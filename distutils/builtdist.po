# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
# Tetsuo Koyama <tkoyama010@gmail.com>, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:06+0000\n"
"PO-Revision-Date: 2020-05-30 11:52+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../distutils/builtdist.rst:5
msgid "Creating Built Distributions"
msgstr "ビルド済み配布物を作成する"

#: ../../distutils/_setuptools_disclaimer.rst:3
msgid ""
"This document is being retained solely until the ``setuptools`` "
"documentation at https://setuptools.readthedocs.io/en/latest/setuptools.html "
"independently covers all of the relevant information currently included here."
msgstr ""
"このドキュメントは、 https://setuptools.readthedocs.io/en/latest/setuptools."
"html にある ``setuptools`` のドキュメントが現時点でここにある関連情報を全て網"
"羅するまで、単独でここに載せておかれます。"

#: ../../distutils/builtdist.rst:9
msgid ""
"A \"built distribution\" is what you're probably used to thinking of either "
"as a \"binary package\" or an \"installer\" (depending on your background).  "
"It's not necessarily binary, though, because it might contain only Python "
"source code and/or byte-code; and we don't call it a package, because that "
"word is already spoken for in Python.  (And \"installer\" is a term specific "
"to the world of mainstream desktop systems.)"
msgstr ""
"\"ビルド済み配布物\" とは、おそらく皆さんが通常 \"バイナリパッケージ\" とか "
"\"インストーラ\" (背景にしている知識によって違います) と考えているものです。"
"とはいえ、配布物が必然的にバイナリ形式になるわけではありません。配布物には、"
"Python ソースコード、かつ/またはバイトコードが入るからです; また、我々はパッ"
"ケージという呼び方もしません。すでに Python の用語として使っているからです "
"(また、\"インストーラ\" という言葉は主流のデスクトップシステム特有の用語です)"

#: ../../distutils/builtdist.rst:16
msgid ""
"A built distribution is how you make life as easy as possible for installers "
"of your module distribution: for users of RPM-based Linux systems, it's a "
"binary RPM; for Windows users, it's an executable installer; for Debian-"
"based Linux users, it's a Debian package; and so forth.  Obviously, no one "
"person will be able to create built distributions for every platform under "
"the sun, so the Distutils are designed to enable module developers to "
"concentrate on their specialty---writing code and creating source "
"distributions---while an intermediary species called *packagers* springs up "
"to turn source distributions into built distributions for as many platforms "
"as there are packagers."
msgstr ""
"ビルド済み配布物は、モジュール配布物をインストール作業者にとってできるだけ簡"
"単な状況にする方法です: ビルド済み配布物は、RPM ベースの Linux システムユーザ"
"にとってはバイナリ RPM、Windows ユーザにとっては実行可能なインストーラ、"
"Debian ベースの Linux システムでは Debian パッケージ、などといった具合です。"
"当然のことながら、一人の人間が世の中にある全てのプラットフォーム用にビルド済"
"み配布物を作成できるわけではありません。そこで、Distutils の設計は。開発者が"
"自分の専門分野 --- コードを書き、ソース配布物を作成する --- に集中できる一方"
"で、*パッケージ作成者 (packager)* と呼ばれる、開発者とエンドユーザとの中間に"
"位置する人々がソースコード配布物を多くのプラットフォームにおけるビルド済み配"
"布物に変換できるようになっています。"

#: ../../distutils/builtdist.rst:26
msgid ""
"Of course, the module developer could be their own packager; or the packager "
"could be a volunteer \"out there\" somewhere who has access to a platform "
"which the original developer does not; or it could be software periodically "
"grabbing new source distributions and turning them into built distributions "
"for as many platforms as the software has access to.  Regardless of who they "
"are, a packager uses the setup script and the :command:`bdist` command "
"family to generate built distributions."
msgstr ""
"もちろん、モジュール開発者自身がパッケージ作成者かもしれません; また、パッ"
"ケージを作成するのはオリジナルの作成者が利用できないプラットフォームにアクセ"
"スできるような \"外部の\" ボランティアかもしれませんし、ソース配布物を定期的"
"に取り込んで、アクセスできるかぎりのプラットフォーム向けにビルド済み配布物を"
"生成するソフトウェアかもしれません。作業を行うのが誰であれ、パッケージ作成者"
"は setup  スクリプトを利用し、 :command:`bdist` コマンドファミリを使ってビル"
"ド済み配布物を作成します。"

#: ../../distutils/builtdist.rst:34
msgid ""
"As a simple example, if I run the following command in the Distutils source "
"tree::"
msgstr ""
"単純な例として、Distutils ソースツリーから以下のコマンドを実行したとします::"

#: ../../distutils/builtdist.rst:39
msgid ""
"then the Distutils builds my module distribution (the Distutils itself in "
"this case), does a \"fake\" installation (also in the :file:`build` "
"directory), and creates the default type of built distribution for my "
"platform.  The default format for built distributions is a \"dumb\" tar file "
"on Unix, and a simple executable installer on Windows.  (That tar file is "
"considered \"dumb\" because it has to be unpacked in a specific location to "
"work.)"
msgstr ""
"すると、Distutils はモジュール配布物 (ここでは Distutils 自体) をビルド"
"し、\"偽の (fake)\" インストールを (:file:`build` ディレクトリで) 行います。"
"そして現在のプラットフォームにおける標準の形式でビルド済み配布物を生成しま"
"す。デフォルトのビルド済み形式とは、Unixでは \"ダム (dumb)\" の tar ファイル"
"で、 Windows ではシンプルな実行形式のインストーラになります。(tar ファイル"
"は、特定の場所に手作業で解凍しないと動作しないので、 \"ダム: 賢くない\" 形式"
"とみなします。)"

#: ../../distutils/builtdist.rst:46
msgid ""
"Thus, the above command on a Unix system creates :file:`Distutils-1.0.{plat}."
"tar.gz`; unpacking this tarball from the right place installs the Distutils "
"just as though you had downloaded the source distribution and run ``python "
"setup.py install``.  (The \"right place\" is either the root of the "
"filesystem or  Python's :file:`{prefix}` directory, depending on the options "
"given to the :command:`bdist_dumb` command; the default is to make dumb "
"distributions relative to :file:`{prefix}`.)"
msgstr ""
"従って、 Unix システムで上記のコマンドを実行すると、 :file:`Distutils-1.0."
"{plat}.tar.gz` を作成します;  この tarball を正しい場所で解凍すると、ちょうど"
"ソース配布物をダウンロードして ``python setup.py install`` を実行したのと同じ"
"ように、正しい場所に Distutils がインストールされます。 (\"正しい場所 (right "
"place)\" とは、ファイルシステムのルート下か、 Python の :file:`{prefix}` ディ"
"レクトリ下で、これは :command:`bdist_dumb` に指定するコマンドで変わります; デ"
"フォルトの設定では、 :file:`{prefix}` からの相対パスにインストールされるダム"
"配布物が得られます。)"

#: ../../distutils/builtdist.rst:54
msgid ""
"Obviously, for pure Python distributions, this isn't any simpler than just "
"running ``python setup.py install``\\ ---but for non-pure distributions, "
"which include extensions that would need to be compiled, it can mean the "
"difference between someone being able to use your extensions or not.  And "
"creating \"smart\" built distributions, such as an RPM package or an "
"executable installer for Windows, is far more convenient for users even if "
"your distribution doesn't include any extensions."
msgstr ""
"言うまでもなく、pure Python 配布物の場合なら、``python setup.py install`` す"
"るのに比べて大して簡単になったとは言えません---しかし、非 pure 配布物で、コン"
"パイルの必要な拡張モジュールを含む場合、拡張モジュールを利用できるか否かとい"
"う大きな違いになりえます。また、RPM パッケージや Windows 用の実行形式インス"
"トーラのような \"スマートな\" ビルド済み配布物を作成しておけば、たとえ拡張モ"
"ジュールが一切入っていなくてもユーザにとっては便利になります。"

#: ../../distutils/builtdist.rst:62
msgid ""
"The :command:`bdist` command has a :option:`!--formats` option, similar to "
"the :command:`sdist` command, which you can use to select the types of built "
"distribution to generate: for example, ::"
msgstr ""
":command:`bdist` コマンドには、 :option:`!--formats` オプションがあります。こ"
"れは :command:`sdist` コマンドの場合に似ていて、生成したいビルド済み配布物の"
"形式を選択できます: 例えば、 ::"

#: ../../distutils/builtdist.rst:68
msgid ""
"would, when run on a Unix system, create :file:`Distutils-1.0.{plat}.zip`\\ "
"---again, this archive would be unpacked from the root directory to install "
"the Distutils."
msgstr ""
"とすると、Unix システムでは、 :file:`Distutils-1.0.{plat}.zip` を作成しま"
"す--- 先にも述べたように、Distutils をインストールするには、このアーカイブ形"
"式をルートディレクトリ下で展開します。"

#: ../../distutils/builtdist.rst:72
msgid "The available formats for built distributions are:"
msgstr "ビルド済み配布物として利用できる形式を以下に示します:"

#: ../../distutils/builtdist.rst:75
msgid "Format"
msgstr "フォーマット"

#: ../../distutils/builtdist.rst:75
msgid "Description"
msgstr "説明"

#: ../../distutils/builtdist.rst:75
msgid "Notes"
msgstr "注釈"

#: ../../distutils/builtdist.rst:77
msgid "``gztar``"
msgstr "``gztar``"

#: ../../distutils/builtdist.rst:77
msgid "gzipped tar file (:file:`.tar.gz`)"
msgstr "gzip 圧縮された tar ファイル (:file:`.tar.gz`)"

#: ../../distutils/builtdist.rst:77
msgid "\\(1)"
msgstr "\\(1)"

#: ../../distutils/builtdist.rst:80
msgid "``bztar``"
msgstr "``bztar``"

#: ../../distutils/builtdist.rst:80
msgid "bzipped tar file (:file:`.tar.bz2`)"
msgstr "bzip 圧縮された tar ファイル (:file:`.tar.bz2`)"

#: ../../distutils/builtdist.rst:83
msgid "``xztar``"
msgstr "``xztar``"

#: ../../distutils/builtdist.rst:83
msgid "xzipped tar file (:file:`.tar.xz`)"
msgstr "xzip 圧縮された tar ファイル (:file:`.tar.xz`)"

#: ../../distutils/builtdist.rst:86
msgid "``ztar``"
msgstr "``ztar``"

#: ../../distutils/builtdist.rst:86
msgid "compressed tar file (:file:`.tar.Z`)"
msgstr "compress 圧縮された tar ファイル (:file:`.tar.Z`)"

#: ../../distutils/builtdist.rst:86
msgid "\\(3)"
msgstr "\\(3)"

#: ../../distutils/builtdist.rst:89
msgid "``tar``"
msgstr "``tar``"

#: ../../distutils/builtdist.rst:89
msgid "tar file (:file:`.tar`)"
msgstr "tar ファイル (:file:`.tar`)"

#: ../../distutils/builtdist.rst:91
msgid "``zip``"
msgstr "``zip``"

#: ../../distutils/builtdist.rst:91
msgid "zip file (:file:`.zip`)"
msgstr "zip ファイル (:file:`.zip`)"

#: ../../distutils/builtdist.rst:91
msgid "(2),(4)"
msgstr "(2),(4)"

#: ../../distutils/builtdist.rst:93
msgid "``rpm``"
msgstr "``rpm``"

#: ../../distutils/builtdist.rst:93
msgid "RPM"
msgstr "RPM 形式"

#: ../../distutils/builtdist.rst:93
msgid "\\(5)"
msgstr "\\(5)"

#: ../../distutils/builtdist.rst:95
msgid "``pkgtool``"
msgstr "``pkgtool``"

#: ../../distutils/builtdist.rst:95
msgid "Solaris :program:`pkgtool`"
msgstr "Solaris :program:`pkgtool` 形式"

#: ../../distutils/builtdist.rst:97
msgid "``sdux``"
msgstr "``sdux``"

#: ../../distutils/builtdist.rst:97
msgid "HP-UX :program:`swinstall`"
msgstr "HP-UX :program:`swinstall` 形式"

#: ../../distutils/builtdist.rst:99
msgid "``wininst``"
msgstr "``wininst``"

#: ../../distutils/builtdist.rst:99
msgid "self-extracting ZIP file for Windows"
msgstr "Windows 用の自己展開形式 ZIP ファイル"

#: ../../distutils/builtdist.rst:99
msgid "\\(4)"
msgstr "\\(4)"

#: ../../distutils/builtdist.rst:102
msgid "``msi``"
msgstr "``msi``"

#: ../../distutils/builtdist.rst:102
msgid "Microsoft Installer."
msgstr "マイクロソフト・インストーラー。"

#: ../../distutils/builtdist.rst:105
msgid "Added support for the ``xztar`` format."
msgstr "``xztar`` 形式のサポートが追加されました。"

#: ../../distutils/builtdist.rst:109
msgid "Notes:"
msgstr "注釈:"

#: ../../distutils/builtdist.rst:112
msgid "default on Unix"
msgstr "Unixでのデフォルト形式です"

#: ../../distutils/builtdist.rst:115
msgid "default on Windows"
msgstr "Windows でのデフォルト形式です"

#: ../../distutils/builtdist.rst:118
msgid "requires external :program:`compress` utility."
msgstr "外部の :program:`compress` ユーティリティが必要です。"

#: ../../distutils/builtdist.rst:121
msgid ""
"requires either external :program:`zip` utility or :mod:`zipfile` module "
"(part of the standard Python library since Python 1.6)"
msgstr ""
"外部ユーティリティの :program:`zip` か、 :mod:`zipfile` モジュール (Python "
"1.6 からは標準 Python ライブラリの一部になっています) が必要です"

#: ../../distutils/builtdist.rst:125
msgid ""
"requires external :program:`rpm` utility, version 3.0.4 or better (use ``rpm "
"--version`` to find out which version you have)"
msgstr ""
"外部ユーティリティの :program:`rpm` 、バージョン 3.0.4 以上が必要です (バー"
"ジョンを調べるには、 ``rpm --version`` とします)"

#: ../../distutils/builtdist.rst:128
msgid ""
"You don't have to use the :command:`bdist` command with the :option:`!--"
"formats` option; you can also use the command that directly implements the "
"format you're interested in.  Some of these :command:`bdist` \"sub-"
"commands\" actually generate several similar formats; for instance, the :"
"command:`bdist_dumb` command generates all the \"dumb\" archive formats "
"(``tar``, ``gztar``, ``bztar``, ``xztar``, ``ztar``, and ``zip``), and :"
"command:`bdist_rpm` generates both binary and source RPMs.  The :command:"
"`bdist` sub-commands, and the formats generated by each, are:"
msgstr ""
":command:`bdist` コマンドを使うとき、必ず :option:`!--formats`  オプションを"
"使わなければならないわけではありません; 自分の使いたい形式をダイレクトに実装"
"しているコマンドも使えます。こうした :command:`bdist` \"サブコマンド (sub-"
"command)\" は、実際には類似のいくつかの形式を生成できます; 例えば、 :command:"
"`bdist_dumb` コマンドは、全ての \"ダム\" アーカイブ形式 (``tar``, ``gztar``, "
"``bztar``, ``xztar``, ``ztar``, および ``zip``) を作成できますし、 :command:"
"`bdist_rpm` はバイナリ RPM とソース RPM の両方を生成できます。 :command:"
"`bdist` サブコマンドと、それぞれが生成する形式を以下に示します:"

#: ../../distutils/builtdist.rst:138
msgid "Command"
msgstr "コマンド"

#: ../../distutils/builtdist.rst:138
msgid "Formats"
msgstr "Formats"

#: ../../distutils/builtdist.rst:140
msgid ":command:`bdist_dumb`"
msgstr ":command:`bdist_dumb`"

#: ../../distutils/builtdist.rst:140
msgid "tar, gztar, bztar, xztar, ztar, zip"
msgstr "tar, gztar, bztar, xztar, ztar, zip"

#: ../../distutils/builtdist.rst:142
msgid ":command:`bdist_rpm`"
msgstr ":command:`bdist_rpm`"

#: ../../distutils/builtdist.rst:142
msgid "rpm, srpm"
msgstr "rpm, srpm"

#: ../../distutils/builtdist.rst:144
msgid ":command:`bdist_wininst`"
msgstr ":command:`bdist_wininst`"

#: ../../distutils/builtdist.rst:144
msgid "wininst"
msgstr "wininst"

#: ../../distutils/builtdist.rst:146
msgid ":command:`bdist_msi`"
msgstr ":command:`bdist_msi`"

#: ../../distutils/builtdist.rst:146
msgid "msi"
msgstr "msi"

#: ../../distutils/builtdist.rst:150 ../../distutils/builtdist.rst:305
#: ../../distutils/builtdist.rst:470
msgid "bdist_wininst is deprecated since Python 3.8."
msgstr ""

#: ../../distutils/builtdist.rst:152
msgid ""
"The following sections give details on the individual :command:`bdist_\\*` "
"commands."
msgstr ":command:`bdist_\\*` コマンドについては、以下の節で詳しく述べます。"

#: ../../distutils/builtdist.rst:168
msgid "Creating RPM packages"
msgstr "RPM パッケージを作成する"

#: ../../distutils/builtdist.rst:170
msgid ""
"The RPM format is used by many popular Linux distributions, including Red "
"Hat, SuSE, and Mandrake.  If one of these (or any of the other RPM-based "
"Linux distributions) is your usual environment, creating RPM packages for "
"other users of that same distribution is trivial. Depending on the "
"complexity of your module distribution and differences between Linux "
"distributions, you may also be able to create RPMs that work on different "
"RPM-based distributions."
msgstr ""
"RPM 形式は、Red Hat, SuSE, Mandrake といった、多くの一般的な Linux ディストリ"
"ビューションで使われています。普段使っているのがこれらの環境のいずれか (また"
"はその他の RPM ベースの Linux  ディストリビューション) なら、同じディストリ"
"ビューションを使っている他のユーザ用に RPM パッケージを作成するのはとるに足ら"
"ないことでしょう。一方、モジュール配布物の複雑さや、Linux ディストリビュー"
"ション間の違いにもよりますが、他の RPM ベースのディストリビューションでも動作"
"するような RPM を作成できるかもしれません。"

#: ../../distutils/builtdist.rst:177
msgid ""
"The usual way to create an RPM of your module distribution is to run the :"
"command:`bdist_rpm` command::"
msgstr ""
"通常、モジュール配布物の RPM を作成するには、 :command:`bdist_rpm` コマンドを"
"使います::"

#: ../../distutils/builtdist.rst:182
msgid "or the :command:`bdist` command with the :option:`!--format` option::"
msgstr ""
"あるいは、 :command:`bdist` コマンドを :option:`!--format` オプション付きで使"
"います::"

#: ../../distutils/builtdist.rst:186
msgid ""
"The former allows you to specify RPM-specific options; the latter allows  "
"you to easily specify multiple formats in one run.  If you need to do both, "
"you can explicitly specify multiple :command:`bdist_\\*` commands and their "
"options::"
msgstr ""
"前者の場合、 RPM 特有のオプションを指定できます; 後者の場合、一度の実行で複数"
"の形式を指定できます。両方同時にやりたければ、それぞれの形式について各コマン"
"ドごとにオプション付きで :command:`bdist_\\*` コマンドを並べます::"

#: ../../distutils/builtdist.rst:193
msgid ""
"Creating RPM packages is driven by a :file:`.spec` file, much as using the "
"Distutils is driven by the setup script.  To make your life easier, the :"
"command:`bdist_rpm` command normally creates a :file:`.spec` file based on "
"the information you supply in the setup script, on the command line, and in "
"any Distutils configuration files.  Various options and sections in the :"
"file:`.spec` file are derived from options in the setup script as follows:"
msgstr ""
"Distutils が setup スクリプトで制御されているのとほとんど同じく、 RPM パッ"
"ケージの作成は、 :file:`.spec` で制御されています。 RPM の作成を簡便に解決す"
"るため、 :command:`bdist_rpm` コマンドでは通常、 setup スクリプトに与えた情報"
"とコマンドライン、そして Distutils 設定ファイルに基づいて :file:`.spec` ファ"
"イルを作成します。 :file:`.spec` ファイルの様々なオプションやセクション情報"
"は、以下のようにして setup スクリプトから取り出されます:"

#: ../../distutils/builtdist.rst:201 ../../distutils/builtdist.rst:225
msgid "RPM :file:`.spec` file option or section"
msgstr "RPM :file:`.spec` ファイルのオプションまたはセクション"

#: ../../distutils/builtdist.rst:201
msgid "Distutils setup script option"
msgstr "Distutils setup スクリプト内のオプション"

#: ../../distutils/builtdist.rst:203
msgid "Name"
msgstr "名前"

#: ../../distutils/builtdist.rst:203
msgid "``name``"
msgstr "``name``"

#: ../../distutils/builtdist.rst:205
msgid "Summary (in preamble)"
msgstr "Summary (preamble 内)"

#: ../../distutils/builtdist.rst:205
msgid "``description``"
msgstr "``description``"

#: ../../distutils/builtdist.rst:207
msgid "Version"
msgstr "Version"

#: ../../distutils/builtdist.rst:207
msgid "``version``"
msgstr "``version``"

#: ../../distutils/builtdist.rst:209 ../../distutils/builtdist.rst:232
msgid "Vendor"
msgstr "Vendor"

#: ../../distutils/builtdist.rst:209
msgid ""
"``author`` and ``author_email``, or  --- & ``maintainer`` and "
"``maintainer_email``"
msgstr ""
"``author`` と ``author_email``, または  --- & ``maintainer`` と "
"``maintainer_email``"

#: ../../distutils/builtdist.rst:213
msgid "Copyright"
msgstr "Copyright"

#: ../../distutils/builtdist.rst:213
msgid "``license``"
msgstr "``license``"

#: ../../distutils/builtdist.rst:215
msgid "Url"
msgstr "Url"

#: ../../distutils/builtdist.rst:215
msgid "``url``"
msgstr "``url``"

#: ../../distutils/builtdist.rst:217
msgid "%description (section)"
msgstr "%description (section)"

#: ../../distutils/builtdist.rst:217
msgid "``long_description``"
msgstr "``long_description``"

#: ../../distutils/builtdist.rst:220
msgid ""
"Additionally, there are many options in :file:`.spec` files that don't have "
"corresponding options in the setup script.  Most of these are handled "
"through options to the :command:`bdist_rpm` command as follows:"
msgstr ""
"また、 :file:`.spec` ファイル内の多くのオプションは、 setup スクリプト中に対"
"応するオプションがありません。これらのほとんどは、以下に示す :command:"
"`bdist_rpm` コマンドのオプションで扱えます:"

#: ../../distutils/builtdist.rst:225
msgid ":command:`bdist_rpm` option"
msgstr ":command:`bdist_rpm` オプション"

#: ../../distutils/builtdist.rst:225
msgid "default value"
msgstr "デフォルト値"

#: ../../distutils/builtdist.rst:228
msgid "Release"
msgstr "リリース"

#: ../../distutils/builtdist.rst:228
msgid "``release``"
msgstr "``release``"

#: ../../distutils/builtdist.rst:228
msgid "\"1\""
msgstr "\"1\""

#: ../../distutils/builtdist.rst:230
msgid "Group"
msgstr "Group"

#: ../../distutils/builtdist.rst:230
msgid "``group``"
msgstr "``group``"

#: ../../distutils/builtdist.rst:230
msgid "\"Development/Libraries\""
msgstr "\"Development/Libraries\""

#: ../../distutils/builtdist.rst:232
msgid "``vendor``"
msgstr "``vendor``"

#: ../../distutils/builtdist.rst:232
msgid "(see above)"
msgstr "(上記参照)"

#: ../../distutils/builtdist.rst:234
msgid "Packager"
msgstr "Packager"

#: ../../distutils/builtdist.rst:234
msgid "``packager``"
msgstr "``packager``"

#: ../../distutils/builtdist.rst:234 ../../distutils/builtdist.rst:236
#: ../../distutils/builtdist.rst:238 ../../distutils/builtdist.rst:240
#: ../../distutils/builtdist.rst:242 ../../distutils/builtdist.rst:244
#: ../../distutils/builtdist.rst:246 ../../distutils/builtdist.rst:248
msgid "(none)"
msgstr "(none)"

#: ../../distutils/builtdist.rst:236
msgid "Provides"
msgstr "Provides"

#: ../../distutils/builtdist.rst:236
msgid "``provides``"
msgstr "``provides``"

#: ../../distutils/builtdist.rst:238
msgid "Requires"
msgstr "Requires"

#: ../../distutils/builtdist.rst:238
msgid "``requires``"
msgstr "``requires``"

#: ../../distutils/builtdist.rst:240
msgid "Conflicts"
msgstr "Conflicts"

#: ../../distutils/builtdist.rst:240
msgid "``conflicts``"
msgstr "``conflicts``"

#: ../../distutils/builtdist.rst:242
msgid "Obsoletes"
msgstr "Obsoletes"

#: ../../distutils/builtdist.rst:242
msgid "``obsoletes``"
msgstr "``obsoletes``"

#: ../../distutils/builtdist.rst:244
msgid "Distribution"
msgstr "Distribution"

#: ../../distutils/builtdist.rst:244
msgid "``distribution_name``"
msgstr "``distribution_name``"

#: ../../distutils/builtdist.rst:246
msgid "BuildRequires"
msgstr "BuildRequires"

#: ../../distutils/builtdist.rst:246
msgid "``build_requires``"
msgstr "``build_requires``"

#: ../../distutils/builtdist.rst:248
msgid "Icon"
msgstr "Icon"

#: ../../distutils/builtdist.rst:248
msgid "``icon``"
msgstr "``icon``"

#: ../../distutils/builtdist.rst:251
msgid ""
"Obviously, supplying even a few of these options on the command-line would "
"be tedious and error-prone, so it's usually best to put them in the setup "
"configuration file, :file:`setup.cfg`\\ ---see section :ref:`setup-config`.  "
"If you distribute or package many Python module distributions, you might "
"want to put options that apply to all of them in your personal Distutils "
"configuration file (:file:`~/.pydistutils.cfg`).  If you want to temporarily "
"disable this file, you can pass the :option:`!--no-user-cfg` option to :file:"
"`setup.py`."
msgstr ""
"明らかに、これらのオプションの中からいくつかだけを提供することでさえ、退屈で"
"間違いを起こしやすいものでしょう。なので通常は、それらを setup 設定ファイル :"
"file:`setup.cfg` に収めるのが最適な方法です --- :ref:`setup-config` を参照し"
"てください。多くの Python モジュールの配布物を頒布したりパッケージングする場"
"合は、それら全てに適用するオプションをあなた専用の Distutils 設定ファイル (:"
"file:`~/.pydistutils.cfg`) に収めたいと思うかもしれません。このファイルを一時"
"的に無効にしたければ、 :option:`!--no-user-cfg` を :file:`setup.py` に渡せま"
"す。"

#: ../../distutils/builtdist.rst:259
msgid ""
"There are three steps to building a binary RPM package, all of which are "
"handled automatically by the Distutils:"
msgstr ""
"バイナリ形式の RPM パッケージを作成する際には三つの段階があり、Distutils はこ"
"れら全ての段階を自動的に処理します:"

#: ../../distutils/builtdist.rst:262
msgid ""
"create a :file:`.spec` file, which describes the package (analogous  to the "
"Distutils setup script; in fact, much of the information in the  setup "
"script winds up in the :file:`.spec` file)"
msgstr ""
"RPM パッケージの内容を記述する :file:`.spec` ファイルを作成します (:file:`."
"spec` ファイルは setup スクリプトに似たファイルです; 実際、 setup スクリプト"
"のほとんどの情報が :file:`.spec` ファイルから引き揚げられます)"

#: ../../distutils/builtdist.rst:266
msgid "create the source RPM"
msgstr "ソース RPM を作成します"

#: ../../distutils/builtdist.rst:268
msgid ""
"create the \"binary\" RPM (which may or may not contain binary code, "
"depending on whether your module distribution contains Python extensions)"
msgstr ""
"\"バイナリ (binary)\" RPM を生成します (モジュール配布物に Python 拡張モ"
"ジュールが入っているか否かで、バイナリコードが含まれることも含まれないことも"
"あります)"

#: ../../distutils/builtdist.rst:271
msgid ""
"Normally, RPM bundles the last two steps together; when you use the "
"Distutils, all three steps are typically bundled together."
msgstr ""
"通常、RPM は最後の二つのステップをまとめて行います; Distutils を使うと、普通"
"は三つのステップ全てをまとめて行います。"

#: ../../distutils/builtdist.rst:274
msgid ""
"If you wish, you can separate these three steps.  You can use the :option:"
"`!--spec-only` option to make :command:`bdist_rpm` just create the :file:`."
"spec` file and exit; in this case, the :file:`.spec` file will be written to "
"the \"distribution directory\"---normally :file:`dist/`, but customizable "
"with the :option:`!--dist-dir` option.  (Normally, the :file:`.spec` file "
"winds up deep in the \"build tree,\" in a temporary directory created by :"
"command:`bdist_rpm`.)"
msgstr ""
"望むなら、これらの三つのステップを分割できます。 :command:`bdist_rpm`  コマン"
"ドに :option:`!--spec-only` を指定すれば、単に :file:`.spec` を作成して終了し"
"ます; この場合、 :file:`.spec` ファイルは \"配布物ディレクトリ (distribution "
"directory)\"--- 通常は :file:`dist/` に作成されますが、 :option:`!--dist-"
"dir` オプションで変更することもできます。(通常、 :file:`.spec` ファイルは "
"\"ビルドツリー (build tree)\"、すなわち :command:`bdist_rpm` が作成する一時"
"ディレクトリの中から引き揚げられます。)"

#: ../../distutils/builtdist.rst:302
msgid "Creating Windows Installers"
msgstr "Windows インストーラを作成する"

#: ../../distutils/builtdist.rst:307
msgid ""
"Executable installers are the natural format for binary distributions on "
"Windows.  They display a nice graphical user interface, display some "
"information about the module distribution to be installed taken from the "
"metadata in the setup script, let the user select a few options, and start "
"or cancel the installation."
msgstr ""
"実行可能なインストーラは、Windows 環境ではごく自然なバイナリ配布形式です。イ"
"ンストーラは結構なグラフィカルユーザインタフェースを表示して、モジュール配布"
"物に関するいくつかの情報を setup スクリプト内のメタデータから取り出して示し、"
"ユーザがいくつかのオプションを選んだり、インストールを決行するか取りやめるか"
"選んだりできるようにします。"

#: ../../distutils/builtdist.rst:313
msgid ""
"Since the metadata is taken from the setup script, creating Windows "
"installers is usually as easy as running::"
msgstr ""
"メタデータは setup スクリプトから取り出されるので、Windows インストーラの作成"
"は至って簡単で、以下を実行するだけです::"

#: ../../distutils/builtdist.rst:318
msgid "or the :command:`bdist` command with the :option:`!--formats` option::"
msgstr ""
"あるいは、 :command:`bdist` コマンドを :option:`!--formats` オプション付きで"
"実行します::"

#: ../../distutils/builtdist.rst:322
msgid ""
"If you have a pure module distribution (only containing pure Python modules "
"and packages), the resulting installer will be version independent and have "
"a name like :file:`foo-1.0.win32.exe`. Note that creating ``wininst`` binary "
"distributions in only supported on Windows systems."
msgstr ""

#: ../../distutils/builtdist.rst:327
msgid ""
"If you have a non-pure distribution, the extensions can only be created on a "
"Windows platform, and will be Python version dependent. The installer "
"filename will reflect this and now has the form :file:`foo-1.0.win32-py2.0."
"exe`.  You have to create a separate installer for every Python version you "
"want to support."
msgstr ""
"非 pure 配布物の場合、拡張モジュールは Windows プラットフォーム上だけで作成で"
"き、Python のバージョンに依存したインストーラになります。インストーラのファイ"
"ル名もバージョン依存性を反映して、 :file:`foo-1.0.win32-py2.0.exe` のような形"
"式になります。従って、サポートしたい全てのバージョンの Python に対して、別々"
"のインストーラを作成しなければなりません。"

#: ../../distutils/builtdist.rst:333
msgid ""
"The installer will try to compile pure modules into :term:`bytecode` after "
"installation on the target system in normal and optimizing mode.  If you "
"don't want this to happen for some reason, you can run the :command:"
"`bdist_wininst` command with the :option:`!--no-target-compile` and/or the :"
"option:`!--no-target-optimize` option."
msgstr ""
"インストーラは、ターゲットとなるシステムにインストールを実行した後、 pure モ"
"ジュールを通常 (normal) モードと最適化 (optimizing) モードで :term:`バイト"
"コード <bytecode>` にコンパイルしようと試みます。何らかの理由があってコンパイ"
"ルさせたくなければ、 :command:`bdist_wininst` コマンドを :option:`!--no-"
"target-compile` かつ/または :option:`!--no-target-optimize` オプション付きで"
"実行します。"

#: ../../distutils/builtdist.rst:339
msgid ""
"By default the installer will display the cool \"Python Powered\" logo when "
"it is run, but you can also supply your own 152x261 bitmap which must be a "
"Windows :file:`.bmp` file with the :option:`!--bitmap` option."
msgstr ""
"デフォルトでは、インストーラは実行時にクールな \"Python Powered\" ロゴを表示"
"しますが、自作の152x261ビットマップ画像も指定できます。画像は Windows の :"
"file:`.bmp` ファイル形式でなくてはならず、 :option:`!--bitmap` オプションで指"
"定します。"

#: ../../distutils/builtdist.rst:343
msgid ""
"The installer will also display a large title on the desktop background "
"window when it is run, which is constructed from the name of your "
"distribution and the version number.  This can be changed to another text by "
"using the :option:`!--title` option."
msgstr ""
"インストーラを起動すると、デスクトップの背景ウィンドウ上にでっかいタイトルも"
"表示します。タイトルは配布物の名前とバージョン番号から作成します。 :option:"
"`!--title` オプションを使えば、タイトルを別のテキストに変更できます。"

#: ../../distutils/builtdist.rst:348
msgid ""
"The installer file will be written to the \"distribution directory\" --- "
"normally :file:`dist/`, but customizable with the :option:`!--dist-dir` "
"option."
msgstr ""
"インストーラファイルは \"配布物ディレクトリ (distribution directory)\" --- 通"
"常は :file:`dist/` に作成されますが、 :option:`!--dist-dir` オプションで指定"
"することもできます。"

#: ../../distutils/builtdist.rst:354
msgid "Cross-compiling on Windows"
msgstr "Windows でのクロスコンパイル"

#: ../../distutils/builtdist.rst:356
msgid ""
"Starting with Python 2.6, distutils is capable of cross-compiling between "
"Windows platforms.  In practice, this means that with the correct tools "
"installed, you can use a 32bit version of Windows to create 64bit extensions "
"and vice-versa."
msgstr ""
"Python 2.6 から、distutils は Windows プラットフォーム間でのクロスコンパイル"
"に対応しました。これによって、必要なツールがインストールされていれば、32bit "
"版の Windows で 64bit 版の拡張を作成したり、その逆が可能になりました。"

#: ../../distutils/builtdist.rst:361
msgid ""
"To build for an alternate platform, specify the :option:`!--plat-name` "
"option to the build command.  Valid values are currently 'win32', and  'win-"
"amd64'. For example, on a 32bit version of Windows, you could execute::"
msgstr ""
"別のプラットフォーム向けのビルドを行うには、 :option:`!--plat-name` オプショ"
"ンを指定します。現在のところ、有効な値は 'win32' と 'win-amd64' です。たとえ"
"ば、 32bit 版の Windows 上で、 以下のようにして 64bit版 Windows 向けのビルド"
"を行うことができます::"

#: ../../distutils/builtdist.rst:367
msgid ""
"to build a 64bit version of your extension.  The Windows Installers also "
"support this option, so the command::"
msgstr ""
"Windows インストーラもこのオプションをサポートしています。なので次のコマンド"
"を実行すると::"

#: ../../distutils/builtdist.rst:372
msgid ""
"would create a 64bit installation executable on your 32bit version of "
"Windows."
msgstr "64bit のインストーラを32bitのWindowsで作成できます。"

#: ../../distutils/builtdist.rst:374
msgid ""
"To cross-compile, you must download the Python source code and cross-compile "
"Python itself for the platform you are targeting - it is not possible from a "
"binary installation of Python (as the .lib etc file for other platforms are "
"not included.)  In practice, this means the user of a 32 bit operating "
"system will need to use Visual Studio 2008 to open the :file:`PCbuild/"
"PCbuild.sln` solution in the Python source tree and build the \"x64\" "
"configuration of the 'pythoncore' project before cross-compiling extensions "
"is possible."
msgstr ""
"クロスコンパイルを行うためには、 Python のソースコードをダウンロードして "
"Python 自身をターゲットのプラットフォーム向けにクロスコンパイルしなければなり"
"ません。 Python のバイナリインストールではクロスコンパイルできません (ター"
"ゲットのプラットフォーム用の .lib などのファイルが存在しないためです)。実際問"
"題として、拡張モジュールのクロスコンパイルを可能にするためには、32ビットOS の"
"ユーザーは Python ソースツリーの :file:`PCbuild/PCbuild.sln` ソリューション"
"ファイルを開き、 'pythoncore' プロジェクトの \"x64\" コンフィグレーションをビ"
"ルドするために Visual Studio 2008 を使う必要があるということを意味していま"
"す。"

#: ../../distutils/builtdist.rst:383
msgid ""
"Note that by default, Visual Studio 2008 does not install 64bit compilers or "
"tools.  You may need to reexecute the Visual Studio setup process and select "
"these tools (using Control Panel->[Add/Remove] Programs is a convenient way "
"to check or modify your existing install.)"
msgstr ""
"デフォルトでは、Visual Studio 2008 は 64bit のコンパイラーなどのツールをイン"
"ストールしないことに注意してください。Visual Studio セットアッププロセスを再"
"実行して、それらのツールを選択する必要があるでしょう。(コントロールパネル -> "
"[追加と削除] から簡単に既存のインストールをチェック、修正できます。)"

#: ../../distutils/builtdist.rst:391
msgid "The Postinstallation script"
msgstr "インストール後実行スクリプト (postinstallation script)"

#: ../../distutils/builtdist.rst:393
msgid ""
"Starting with Python 2.3, a postinstallation script can be specified with "
"the :option:`!--install-script` option.  The basename of the script must be "
"specified, and the script filename must also be listed in the scripts "
"argument to the setup function."
msgstr ""
"Python 2.3 からは、インストール実行後スクリプトを :option:`!--install-"
"script` オプションで指定できるようになりました。スクリプトはディレクトリを含"
"まないベースネーム (basename) で指定しなければならず、スクリプトファイル名は "
"setup 関数の scripts 引数中に挙げられていなければなりません。"

#: ../../distutils/builtdist.rst:398
msgid ""
"This script will be run at installation time on the target system after all "
"the files have been copied, with ``argv[1]`` set to :option:`!-install`, and "
"again at uninstallation time before the files are removed with ``argv[1]`` "
"set to :option:`!-remove`."
msgstr ""
"指定したスクリプトは、インストール時、ターゲットとなるシステム上で全てのファ"
"イルがコピーされた後に実行されます。このとき ``argv[1]`` を :option:`!-"
"install` に設定します。また、アンインストール時には、ファイルを削除する前に "
"``argv[1]`` を :option:`!-remove` に設定して実行します。"

#: ../../distutils/builtdist.rst:403
msgid ""
"The installation script runs embedded in the windows installer, every output "
"(``sys.stdout``, ``sys.stderr``) is redirected into a buffer and will be "
"displayed in the GUI after the script has finished."
msgstr ""
"Windows インストーラでは、インストールスクリプトは埋め込みで実行され、全ての"
"出力 (``sys.stdout``、``sys.stderr``) はバッファにリダイレクトされ、スクリプ"
"トの終了後に GUI 上に表示されます。"

#: ../../distutils/builtdist.rst:407
msgid ""
"Some functions especially useful in this context are available as additional "
"built-in functions in the installation script."
msgstr ""
"インストールスクリプトでは、インストール/アンインストールのコンテキストで特に"
"有用ないくつかの機能を、追加の組み込み関数として利用することができます。"

#: ../../distutils/builtdist.rst:414
msgid ""
"These functions should be called when a directory or file is created by the "
"postinstall script at installation time.  It will register *path* with the "
"uninstaller, so that it will be removed when the distribution is "
"uninstalled. To be safe, directories are only removed if they are empty."
msgstr ""
"これらの関数は、インストール後実行スクリプトがディレクトリやファイルを作成し"
"た際に呼び出さなければなりません。この関数はアンインストーラに作成された "
"*path* を登録し、配布物をアンインストールする際にファイルが消されるようにしま"
"す。安全を期すために、ディレクトリは空の時にのみ削除されます。"

#: ../../distutils/builtdist.rst:422
msgid ""
"This function can be used to retrieve special folder locations on Windows "
"like the Start Menu or the Desktop.  It returns the full path to the folder. "
"*csidl_string* must be one of the following strings::"
msgstr ""
"この関数は、「スタートメニュー」や「デスクトップ」といった、Windows における"
"特殊なフォルダ位置を取得する際に使えます。この関数はフォルダのフルパスを返し"
"ます。*csidl_string* は以下の文字列のいずれかでなければなりません::"

#: ../../distutils/builtdist.rst:442
msgid "If the folder cannot be retrieved, :exc:`OSError` is raised."
msgstr ""
"該当するフォルダを取得できなかった場合、 :exc:`OSError` が送出されます。"

#: ../../distutils/builtdist.rst:444
msgid ""
"Which folders are available depends on the exact Windows version, and "
"probably also the configuration.  For details refer to Microsoft's "
"documentation of the :c:func:`SHGetSpecialFolderPath` function."
msgstr ""
"どの種類のフォルダを取得できるかは、特定の Windows のバージョンごとに異なりま"
"す。また、おそらく設定によっても異なるでしょう。詳細については、 :c:func:"
"`SHGetSpecialFolderPath` 関数に関する Microsoft のドキュメントを参照してくだ"
"さい。"

#: ../../distutils/builtdist.rst:451
msgid ""
"This function creates a shortcut. *target* is the path to the program to be "
"started by the shortcut. *description* is the description of the shortcut. "
"*filename* is the title of the shortcut that the user will see. *arguments* "
"specifies the command line arguments, if any. *workdir* is the working "
"directory for the program. *iconpath* is the file containing the icon for "
"the shortcut, and *iconindex* is the index of the icon in the file "
"*iconpath*.  Again, for details consult the Microsoft documentation for the :"
"class:`IShellLink` interface."
msgstr ""
"この関数はショートカットを作成します。 *target* はショートカットによって起動"
"されるプログラムへのパスです。 *description* はショートカットに対する説明で"
"す。 *filename* はユーザから見えるショートカットの名前です。コマンドライン引"
"数があれば、 *arguments* に指定します。 *workdir* はプログラムの作業ディレク"
"トリです。 *iconpath* はショートカットのためのアイコンが入ったファイルで、 "
"*iconindex* はファイル *iconpath* 中のアイコンへのインデクスです。これについ"
"ても、詳しくは :class:`IShellLink` インタフェースに関する Microsoft のドキュ"
"メントを参照してください。"

#: ../../distutils/builtdist.rst:462
msgid "Vista User Access Control (UAC)"
msgstr "Vista のユーザアカウント制御 (UAC)"

#: ../../distutils/builtdist.rst:464
msgid ""
"Starting with Python 2.6, bdist_wininst supports a :option:`!--user-access-"
"control` option.  The default is 'none' (meaning no UAC handling is done), "
"and other valid values are 'auto' (meaning prompt for UAC elevation if "
"Python was installed for all users) and 'force' (meaning always prompt for "
"elevation)."
msgstr ""
"Python 2.6 から、 bdist_wininst は :option:`!--user-access-control` オプショ"
"ンをサポートしています。デフォルトは 'none' (UAC制御をしないことを意味しま"
"す) で、それ以外の有効な値は 'auto' (Python が全ユーザー用にインストールされ"
"ていれば UAC 昇格を行う)、 'force' (常に昇格を行う) です。"
