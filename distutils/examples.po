# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2018
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:18+0000\n"
"Last-Translator: tomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../distutils/examples.rst:5
msgid "Examples"
msgstr "使用例"

#: ../../distutils/examples.rst:7
msgid ""
"This chapter provides a number of basic examples to help get started with "
"distutils.  Additional information about using distutils can be found in the "
"Distutils Cookbook."
msgstr ""
"この章は distutils を使い始めるのに役立つ幾つかの基本的な例を提供します。"
"distutils を使うための追加の情報は Distutils Cookbook で見つけることができま"
"す。"

#: ../../distutils/examples.rst:14
msgid "`Distutils Cookbook <https://wiki.python.org/moin/Distutils/Cookbook>`_"
msgstr ""
"`Distutils Cookbook <https://wiki.python.org/moin/Distutils/Cookbook>`_"

#: ../../distutils/examples.rst:15
msgid ""
"Collection of recipes showing how to achieve more control over distutils."
msgstr "distutils をもっと制御するためのレシピ集。"

#: ../../distutils/examples.rst:21
msgid "Pure Python distribution (by module)"
msgstr "pure Python 配布物 (モジュール形式)"

#: ../../distutils/examples.rst:23
msgid ""
"If you're just distributing a couple of modules, especially if they don't "
"live in a particular package, you can specify them individually using the "
"``py_modules`` option in the setup script."
msgstr ""
"単に二つのモジュール、特定のパッケージに属しないモジュールを配布するだけな"
"ら、setup スクリプト中で ``py_modules`` オプションを使って個別に指定できま"
"す。"

#: ../../distutils/examples.rst:27
msgid ""
"In the simplest case, you'll have two files to worry about: a setup script "
"and the single module you're distributing, :file:`foo.py` in this example::"
msgstr ""
"もっとも単純なケースでは、二つのファイル: setup スクリプト自体と、配布したい"
"単一のモジュール、この例では :file:`foo.py` について考えなければなりません::"

#: ../../distutils/examples.rst:34
msgid ""
"(In all diagrams in this section, *<root>* will refer to the distribution "
"root directory.)  A minimal setup script to describe this situation would "
"be::"
msgstr ""
"(この節の全ての図において、*<root>* は配布物ルートディレクトリを参照しま"
"す。) この状況を扱うための最小の setup スクリプトは以下のようになります::"

#: ../../distutils/examples.rst:43
msgid ""
"Note that the name of the distribution is specified independently with the "
"``name`` option, and there's no rule that says it has to be the same as the "
"name of the sole module in the distribution (although that's probably a good "
"convention to follow).  However, the distribution name is used to generate "
"filenames, so you should stick to letters, digits, underscores, and hyphens."
msgstr ""
"配布物の名前は ``name`` オプションで個々に指定し、配布されるモジュールの一つ"
"と配布物を同じ名前にする必要はないことに注意してください (とはいえ、この命名"
"方法はよいならわしでしょう)。ただし、配布物名はファイル名を作成するときに使わ"
"れるので、文字、数字、アンダースコア、ハイフンだけで構成しなければなりませ"
"ん。"

#: ../../distutils/examples.rst:49
msgid ""
"Since ``py_modules`` is a list, you can of course specify multiple modules, "
"eg. if you're distributing modules :mod:`foo` and :mod:`bar`, your setup "
"might look like this::"
msgstr ""
"``py_modules`` はリストなので、もちろん複数のモジュールを指定できます。例え"
"ば、モジュール :mod:`foo` と :mod:`bar` を配布しようとしているのなら、 setup "
"スクリプトは以下のようになります::"

#: ../../distutils/examples.rst:58
msgid "and the setup script might be  ::"
msgstr "また、セットアップスクリプトは以下のようになります ::"

#: ../../distutils/examples.rst:66
msgid ""
"You can put module source files into another directory, but if you have "
"enough modules to do that, it's probably easier to specify modules by "
"package rather than listing them individually."
msgstr ""
"モジュールのソースファイルは他のディレクトリに置けますが、そうしなければなら"
"ないようなモジュールを沢山持っているのなら、モジュールを個別に列挙するよりも"
"パッケージを指定した方が簡単でしょう。"

#: ../../distutils/examples.rst:74
msgid "Pure Python distribution (by package)"
msgstr "pure Python 配布物 (パッケージ形式)"

#: ../../distutils/examples.rst:76
msgid ""
"If you have more than a couple of modules to distribute, especially if they "
"are in multiple packages, it's probably easier to specify whole packages "
"rather than individual modules.  This works even if your modules are not in "
"a package; you can just tell the Distutils to process modules from the root "
"package, and that works the same as any other package (except that you don't "
"have to have an :file:`__init__.py` file)."
msgstr ""
"二つ以上のモジュールを配布する場合、とりわけ二つのパッケージに分かれている場"
"合、おそらく個々のモジュールよりもパッケージ全体を指定する方が簡単です。たと"
"えモジュールがパッケージ内に入っていなくても状況は同じで、その場合はルート"
"パッケージにモジュールが入っていると Distutils に教えることができ、他のパッ"
"ケージと同様にうまく処理されます (ただし、 :file:`__init__.py` があってはなり"
"ません)。"

#: ../../distutils/examples.rst:83
msgid "The setup script from the last example could also be written as  ::"
msgstr "最後の例で挙げた setup スクリプトは ::"

#: ../../distutils/examples.rst:91
msgid "(The empty string stands for the root package.)"
msgstr "のようにも書けます (空文字はルートパッケージを意味します)"

#: ../../distutils/examples.rst:93
msgid ""
"If those two files are moved into a subdirectory, but remain in the root "
"package, e.g.::"
msgstr ""
"これら二つのファイルをサブディレクトリ下に移動しておいて、インストール先は"
"ルートパッケージのままにしておきたい、例えば::"

#: ../../distutils/examples.rst:101
msgid ""
"then you would still specify the root package, but you have to tell the "
"Distutils where source files in the root package live::"
msgstr ""
"のような場合には、パッケージ名にはルートパッケージをそのまま指定しておきます"
"が、ルートパッケージに置くソースファイルがどこにあるかを Distutils に教えなけ"
"ればなりません::"

#: ../../distutils/examples.rst:111
msgid ""
"More typically, though, you will want to distribute multiple modules in the "
"same package (or in sub-packages).  For example, if the :mod:`foo`  and :mod:"
"`bar` modules belong in package :mod:`foobar`, one way to layout your source "
"tree is ::"
msgstr ""
"もっと典型的なケースでは、複数のモジュールを同じパッケージ  (またはサブパッ"
"ケージ) に入れて配布しようと思うでしょう。例えば、 :mod:`foo` と :mod:`bar` "
"モジュールがパッケージ :mod:`foobar` に属する場合、ソースツリーをレイアウトす"
"る一案として、以下が考えられます ::"

#: ../../distutils/examples.rst:123
msgid ""
"This is in fact the default layout expected by the Distutils, and the one "
"that requires the least work to describe in your setup script::"
msgstr ""
"実際、Distutils ではこれをデフォルトのレイアウトとして想定していて、setup ス"
"クリプトを書く際にも最小限の作業しか必要ありません::"

#: ../../distutils/examples.rst:132
msgid ""
"If you want to put modules in directories not named for their package, then "
"you need to use the ``package_dir`` option again.  For example, if the :file:"
"`src` directory holds modules in the :mod:`foobar` package::"
msgstr ""
"モジュールを入れるディレクトリをパッケージの名前にしたくない場合、ここでも "
"``package_dir`` オプションを使う必要があります。例えば、パッケージ :mod:"
"`foobar` のモジュールが :file:`src` に入っているとします::"

#: ../../distutils/examples.rst:143
msgid "an appropriate setup script would be  ::"
msgstr "適切な setup スクリプトは、以下のようになるでしょう ::"

#: ../../distutils/examples.rst:152
msgid ""
"Or, you might put modules from your main package right in the distribution "
"root::"
msgstr ""
"また、メインパッケージ内のモジュールを配布物ルート下に置くことがあるかもしれ"
"ません::"

#: ../../distutils/examples.rst:161
msgid "in which case your setup script would be  ::"
msgstr "この場合、setup スクリプトは ::"

#: ../../distutils/examples.rst:170
msgid "(The empty string also stands for the current directory.)"
msgstr "のようになるでしょう。(空文字列も現在のディレクトリを表します。)"

#: ../../distutils/examples.rst:172
msgid ""
"If you have sub-packages, they must be explicitly listed in ``packages``, "
"but any entries in ``package_dir`` automatically extend to sub-packages. (In "
"other words, the Distutils does *not* scan your source tree, trying to "
"figure out which directories correspond to Python packages by looking for :"
"file:`__init__.py` files.)  Thus, if the default layout grows a sub-package::"
msgstr ""
"サブパッケージがある場合、 ``packages`` で明示的に列挙しなければなりません"
"が、 ``package_dir`` はサブパッケージへのパスを自動的に展開します。 (別の言い"
"方をすれば、 Distutils はソースツリーを *走査せず* 、どのディレクトリが "
"Python パッケージに相当するのかを :file:`__init__.py` files. を探して調べよう"
"とします。) このようにして、デフォルトのレイアウトはサブパッケージ形式に展開"
"されます::"

#: ../../distutils/examples.rst:188
msgid "then the corresponding setup script would be  ::"
msgstr "対応する setup スクリプトは以下のようになります ::"

#: ../../distutils/examples.rst:200
msgid "Single extension module"
msgstr "単体の拡張モジュール"

#: ../../distutils/examples.rst:202
msgid ""
"Extension modules are specified using the ``ext_modules`` option. "
"``package_dir`` has no effect on where extension source files are found; it "
"only affects the source for pure Python modules.  The simplest  case, a "
"single extension module in a single C source file, is::"
msgstr ""
"拡張モジュールは、``ext_modules`` オプションを使って指定します。"
"``package_dir`` は、拡張モジュールのソースファイルをどこで探すかには影響しま"
"せん; pure Python モジュールのソースのみに影響します。もっとも単純なケースで"
"は、単一の C ソースファイルで書かれた単一の拡張モジュールは以下のようになりま"
"す::"

#: ../../distutils/examples.rst:211
msgid ""
"If the :mod:`foo` extension belongs in the root package, the setup script "
"for this could be  ::"
msgstr ""
":mod:`foo` 拡張モジュールがルートパッケージに属している場合は、 setup スクリ"
"プトは次のように書けます ::"

#: ../../distutils/examples.rst:221
msgid "If the extension actually belongs in a package, say :mod:`foopkg`, then"
msgstr ""
"同じソースツリーレイアウトで、この拡張モジュールを :mod:`foopkg` の下に置き、"
"拡張モジュールの名前を変えるには"

#: ../../distutils/examples.rst:223
msgid ""
"With exactly the same source tree layout, this extension can be put in the :"
"mod:`foopkg` package simply by changing the name of the extension::"
msgstr ""
":mod:`foopkg` 拡張をルートパッケージ下に所属させたい場合、 setup スクリプトは"
"以下のようにします::"

#: ../../distutils/examples.rst:234
msgid "Checking a package"
msgstr "パッケージのチェック"

#: ../../distutils/examples.rst:236
msgid ""
"The ``check`` command allows you to verify if your package meta-data meet "
"the minimum requirements to build a distribution."
msgstr ""
"``check`` コマンドで、パッケージのメタデータが配布物をビルドするための最低限"
"の条件を満たしているかの検証が行えます。"

#: ../../distutils/examples.rst:239
msgid ""
"To run it, just call it using your :file:`setup.py` script. If something is "
"missing, ``check`` will display a warning."
msgstr ""
"コマンドを実行するには、単純に :file:`setup.py` スクリプトを使って呼び出して"
"ください。何かが不足していた場合は、 ``check`` で警告が表示されるでしょう。"

#: ../../distutils/examples.rst:242
msgid "Let's take an example with a simple script::"
msgstr "簡単なスクリプトを例に取ってみましょう::"

#: ../../distutils/examples.rst:248
msgid "Running the ``check`` command will display some warnings:"
msgstr "``check`` コマンドを走らせると、いくつかの警告が表示されます:"

#: ../../distutils/examples.rst:259
msgid ""
"If you use the reStructuredText syntax in the ``long_description`` field and "
"`docutils`_  is installed you can check if the syntax is fine with the "
"``check`` command, using the ``restructuredtext`` option."
msgstr ""
"``long_description`` フィールドで reStructuredText の構文を使用し、"
"`docutils`_ がインストールされている場合は、``check`` コマンドに "
"``restructuredtext`` オプションを使用して、その構文が正しいかどうかチェックで"
"きます。"

#: ../../distutils/examples.rst:263
msgid "For example, if the :file:`setup.py` script is changed like this::"
msgstr "例えば、 :file:`setup.py` スクリプトを次のように変えたとします::"

#: ../../distutils/examples.rst:278
msgid ""
"Where the long description is broken, ``check`` will be able to detect it by "
"using the :mod:`docutils` parser:"
msgstr ""
"long description の壊れている箇所を、 :mod:`docutils` 構文解析器を使い "
"``check`` で検出できます:"

#: ../../distutils/examples.rst:289
msgid "Reading the metadata"
msgstr "メタデータの読み込み"

#: ../../distutils/examples.rst:291
msgid ""
"The :func:`distutils.core.setup` function provides a command-line interface "
"that allows you to query the metadata fields of a project through the "
"``setup.py`` script of a given project:"
msgstr ""
":func:`distutils.core.setup` 関数は、プロジェクトの ``setup.py`` スクリプトを"
"通して、プロジェクトのメタデータフィールドの値を調べることのできるコマンドラ"
"イン・インターフェイスを提供します:"

#: ../../distutils/examples.rst:300
msgid ""
"This call reads the ``name`` metadata by running the :func:`distutils.core."
"setup`  function. Although, when a source or binary distribution is created "
"with Distutils, the metadata fields are written in a static file called :"
"file:`PKG-INFO`. When a Distutils-based project is installed in Python, the :"
"file:`PKG-INFO` file is copied alongside the modules and packages of the "
"distribution under :file:`NAME-VERSION-pyX.X.egg-info`, where ``NAME`` is "
"the name of the project, ``VERSION`` its version as defined in the Metadata, "
"and ``pyX.X`` the major and minor version of Python like ``2.7`` or ``3.2``."
msgstr ""
"この呼び出しは、 :func:`distutils.core.setup` 関数を実行して ``name`` メタ"
"データを読み取っています。ソース配布物もしくはバイナリ配布物が Distutils で作"
"られていたとしても、メタデータフィールドは :file:`PKG-INFO` という静的なファ"
"イルに書かれます。Distutils ベースのプロジェクトが Python にインストールされ"
"るとき、 :file:`NAME-VERSION-pyX.X.egg-info` 以下にある配布物のモジュールや"
"パッケージと一緒に :file:`PKG-INFO` がコピーされます。ここで ``NAME`` はプロ"
"ジェクト名、 ``VERSION`` はメタデータで定義されたバージョン、 ``pyX.X`` は "
"``2.7`` や ``3.2`` のような Python のメジャーバージョンとマイナーバージョンで"
"す。"

#: ../../distutils/examples.rst:310
msgid ""
"You can read back this static file, by using the :class:`distutils.dist."
"DistributionMetadata` class and its :func:`read_pkg_file` method::"
msgstr ""
":class:`distutils.dist.DistributionMetadata` クラスとその :func:"
"`read_pkg_file`  メソッドを使って、この静的ファイルを読むことができます::"

#: ../../distutils/examples.rst:324
msgid ""
"Notice that the class can also be instantiated with a metadata file path to "
"loads its values::"
msgstr ""
"このクラスは、値を読み取るメタデータのファイルパスを引数に取ってインスタンス"
"化することもできることに注意してください::"
