# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../distutils/apiref.rst:5
msgid "API Reference"
msgstr "API リファレンス"

#: ../../distutils/apiref.rst:11
msgid "`New and changed setup.py arguments in setuptools`_"
msgstr "`setuptools で新規追加または変更された setup.py の引数`_"

#: ../../distutils/apiref.rst:10
msgid ""
"The ``setuptools`` project adds new capabilities to the ``setup`` function "
"and other APIs, makes the API consistent across different Python versions, "
"and is hence recommended over using ``distutils`` directly."
msgstr ""
"``setuptools`` プロジェクトは ``setup`` 関数や他の API に新しい機能を追加した"
"り、異なる Python バージョンの間で API に一貫性を持たせているため、 "
"``distutils`` の代替として推奨されています。"

#: ../../distutils/_setuptools_disclaimer.rst:3
msgid ""
"This document is being retained solely until the ``setuptools`` "
"documentation at https://setuptools.readthedocs.io/en/latest/setuptools.html "
"independently covers all of the relevant information currently included here."
msgstr ""
"このドキュメントは、 https://setuptools.readthedocs.io/en/latest/setuptools."
"html にある ``setuptools`` のドキュメントが現時点でここにある関連情報を全て網"
"羅するまで、単独でここに載せておかれます。"

#: ../../distutils/apiref.rst:19
msgid ":mod:`distutils.core` --- Core Distutils functionality"
msgstr ":mod:`distutils.core` --- Distutils のコア機能"

#: ../../distutils/apiref.rst:25
msgid ""
"The :mod:`distutils.core` module is the only module that needs to be "
"installed to use the Distutils. It provides the :func:`setup` (which is "
"called from the setup script). Indirectly provides the  :class:`distutils."
"dist.Distribution` and :class:`distutils.cmd.Command` class."
msgstr ""
"Distutilsを使うためにインストールする必要がある唯一のモジュールが :mod:"
"`distutils.core` モジュールです。 :func:`setup` 関数 (セットアップスクリプト"
"から呼び出されます)を提供します。間接的に :class:`distutils.dist."
"Distribution` クラスと :class:`distutils.cmd.Command` クラスを提供します。"

#: ../../distutils/apiref.rst:33
msgid ""
"The basic do-everything function that does most everything you could ever "
"ask for from a Distutils method."
msgstr ""
"全てを実行する基本的な関数で、Distutilsでできるほとんどのことを実行します。"

#: ../../distutils/apiref.rst:36
msgid ""
"The setup function takes a large number of arguments. These are laid out in "
"the following table."
msgstr "setup関数はたくさんの引数をとります。以下のテーブルにまとめます。"

#: ../../distutils/apiref.rst:42 ../../distutils/apiref.rst:185
msgid "argument name"
msgstr "引数名"

#: ../../distutils/apiref.rst:42 ../../distutils/apiref.rst:143
#: ../../distutils/apiref.rst:185
msgid "value"
msgstr "value"

#: ../../distutils/apiref.rst:42 ../../distutils/apiref.rst:185
msgid "type"
msgstr "type"

#: ../../distutils/apiref.rst:44 ../../distutils/apiref.rst:187
msgid "*name*"
msgstr "*name*"

#: ../../distutils/apiref.rst:44
msgid "The name of the package"
msgstr "パッケージの名前"

#: ../../distutils/apiref.rst:44 ../../distutils/apiref.rst:46
#: ../../distutils/apiref.rst:50 ../../distutils/apiref.rst:53
#: ../../distutils/apiref.rst:56 ../../distutils/apiref.rst:58
#: ../../distutils/apiref.rst:61 ../../distutils/apiref.rst:68
#: ../../distutils/apiref.rst:72 ../../distutils/apiref.rst:75
#: ../../distutils/apiref.rst:96 ../../distutils/apiref.rst:106
#: ../../distutils/apiref.rst:187 ../../distutils/apiref.rst:278
msgid "a string"
msgstr "文字列"

#: ../../distutils/apiref.rst:46
msgid "*version*"
msgstr "*version*"

#: ../../distutils/apiref.rst:46
msgid "The version number of the package; see :mod:`distutils.version`"
msgstr "パッケージのバージョン番号。 :mod:`distutils.version` を参照"

#: ../../distutils/apiref.rst:50
msgid "*description*"
msgstr "*description*"

#: ../../distutils/apiref.rst:50
msgid "A single line describing the package"
msgstr "1行で書いたパッケージ解説"

#: ../../distutils/apiref.rst:53
msgid "*long_description*"
msgstr "*long_description*"

#: ../../distutils/apiref.rst:53
msgid "Longer description of the package"
msgstr "パッケージの長い解説"

#: ../../distutils/apiref.rst:56
msgid "*author*"
msgstr "*author*"

#: ../../distutils/apiref.rst:56
msgid "The name of the package author"
msgstr "パッケージ作者の名前"

#: ../../distutils/apiref.rst:58
msgid "*author_email*"
msgstr "*author_email*"

#: ../../distutils/apiref.rst:58
msgid "The email address of the package author"
msgstr "パッケージ作者のemailアドレス"

#: ../../distutils/apiref.rst:61
msgid "*maintainer*"
msgstr "*maintainer*"

#: ../../distutils/apiref.rst:61
msgid ""
"The name of the current maintainer, if different from the author. Note that "
"if the maintainer is provided, distutils will use it as the author in :file:"
"`PKG-INFO`"
msgstr ""
"作者と違う場合の、現在のメンテナーの名前です。 maintainer 引数が与えられた場"
"合、 distutils は :file:`PKG-INFO` で作者として使用します"

#: ../../distutils/apiref.rst:68
msgid "*maintainer_email*"
msgstr "*maintainer_email*"

#: ../../distutils/apiref.rst:68
msgid ""
"The email address of the current maintainer, if different from the author"
msgstr "現在のメンテナのemailアドレス(パッケージ作者と異なる場合)"

#: ../../distutils/apiref.rst:72
msgid "*url*"
msgstr "*url*"

#: ../../distutils/apiref.rst:72
msgid "A URL for the package (homepage)"
msgstr "パッケージのURL(ホームページ)"

#: ../../distutils/apiref.rst:75
msgid "*download_url*"
msgstr "*download_url*"

#: ../../distutils/apiref.rst:75
msgid "A URL to download the package"
msgstr "パッケージダウンロード用URL"

#: ../../distutils/apiref.rst:77
msgid "*packages*"
msgstr "*packages*"

#: ../../distutils/apiref.rst:77
msgid "A list of Python packages that distutils will manipulate"
msgstr "distutilsが操作するPythonパッケージのリスト"

#: ../../distutils/apiref.rst:77 ../../distutils/apiref.rst:80
#: ../../distutils/apiref.rst:83 ../../distutils/apiref.rst:100
#: ../../distutils/apiref.rst:193 ../../distutils/apiref.rst:207
#: ../../distutils/apiref.rst:223 ../../distutils/apiref.rst:226
#: ../../distutils/apiref.rst:230 ../../distutils/apiref.rst:234
#: ../../distutils/apiref.rst:240 ../../distutils/apiref.rst:247
#: ../../distutils/apiref.rst:258 ../../distutils/apiref.rst:267
#: ../../distutils/apiref.rst:275
msgid "a list of strings"
msgstr "文字列のリスト"

#: ../../distutils/apiref.rst:80
msgid "*py_modules*"
msgstr "*py_modules*"

#: ../../distutils/apiref.rst:80
msgid "A list of Python modules that distutils will manipulate"
msgstr "distutilsが操作するPythonモジュールのリスト"

#: ../../distutils/apiref.rst:83
msgid "*scripts*"
msgstr "*scripts*"

#: ../../distutils/apiref.rst:83
msgid "A list of standalone script files to be built and installed"
msgstr "ビルドおよびインストールする単体スクリプトファイルのリスト"

#: ../../distutils/apiref.rst:87
msgid "*ext_modules*"
msgstr "*ext_modules*"

#: ../../distutils/apiref.rst:87
msgid "A list of Python extensions to be built"
msgstr "ビルドする拡張モジュール"

#: ../../distutils/apiref.rst:87
msgid "a list of instances of :class:`distutils.core.Extension`"
msgstr ":class:`distutils.core.Extension` のインスタンスのリスト"

#: ../../distutils/apiref.rst:90
msgid "*classifiers*"
msgstr "*classifiers*"

#: ../../distutils/apiref.rst:90
msgid "A list of categories for the package"
msgstr "パッケージのカテゴリのリスト"

#: ../../distutils/apiref.rst:90
msgid ""
"a list of strings; valid classifiers are listed on `PyPI <https://pypi.org/"
"classifiers>`_."
msgstr ""
"文字列のリスト。有効な classifier のリストは `PyPI <https://pypi.org/"
"classifiers>`_ を参照。"

#: ../../distutils/apiref.rst:93
msgid "*distclass*"
msgstr "*distclass*"

#: ../../distutils/apiref.rst:93
msgid "the :class:`Distribution` class to use"
msgstr "使用する :class:`Distribution` クラス"

#: ../../distutils/apiref.rst:93
msgid "a subclass of :class:`distutils.core.Distribution`"
msgstr ":class:`distutils.core.Distribution` のサブクラス"

#: ../../distutils/apiref.rst:96
msgid "*script_name*"
msgstr "*script_name*"

#: ../../distutils/apiref.rst:96
msgid "The name of the setup.py script - defaults to ``sys.argv[0]``"
msgstr "setup.pyスクリプトの名前 - デフォルトでは ``sys.argv[0]``"

#: ../../distutils/apiref.rst:100
msgid "*script_args*"
msgstr "*script_args*"

#: ../../distutils/apiref.rst:100
msgid "Arguments to supply to the setup script"
msgstr "setup スクリプトの引数"

#: ../../distutils/apiref.rst:103
msgid "*options*"
msgstr "*options*"

#: ../../distutils/apiref.rst:103
msgid "default options for the setup script"
msgstr "セットアップスクリプトのデフォルト引数"

#: ../../distutils/apiref.rst:103 ../../distutils/apiref.rst:113
#: ../../distutils/apiref.rst:119
msgid "a dictionary"
msgstr "辞書"

#: ../../distutils/apiref.rst:106
msgid "*license*"
msgstr "*license*"

#: ../../distutils/apiref.rst:106
msgid "The license for the package"
msgstr "パッケージのライセンス"

#: ../../distutils/apiref.rst:108
msgid "*keywords*"
msgstr "*keywords*"

#: ../../distutils/apiref.rst:108
msgid "Descriptive meta-data, see :pep:`314`"
msgstr "説明用メタデータ。 :pep:`314` を参照してください"

#: ../../distutils/apiref.rst:108 ../../distutils/apiref.rst:111
msgid "a list of strings or a comma-separated string"
msgstr "文字列のリスト、またはカンマ区切り文字列"

#: ../../distutils/apiref.rst:111
msgid "*platforms*"
msgstr "*platforms*"

#: ../../distutils/apiref.rst:113
msgid "*cmdclass*"
msgstr "*cmdclass*"

#: ../../distutils/apiref.rst:113
msgid "A mapping of command names to :class:`Command` subclasses"
msgstr "コマンド名から :class:`Command` サブクラスへのマッピング"

#: ../../distutils/apiref.rst:116
msgid "*data_files*"
msgstr "*data_files*"

#: ../../distutils/apiref.rst:116
msgid "A list of data files to install"
msgstr "インストールするデータファイルのリスト"

#: ../../distutils/apiref.rst:116
msgid "a list"
msgstr "リスト"

#: ../../distutils/apiref.rst:119
msgid "*package_dir*"
msgstr "*package_dir*"

#: ../../distutils/apiref.rst:119
msgid "A mapping of package to directory names"
msgstr "パッケージからディレクトリ名へのマッピング"

#: ../../distutils/apiref.rst:127
msgid ""
"Run a setup script in a somewhat controlled environment, and return  the :"
"class:`distutils.dist.Distribution` instance that drives things.   This is "
"useful if you need to find out the distribution meta-data  (passed as "
"keyword args from *script* to :func:`setup`), or  the contents of the config "
"files or command-line."
msgstr ""
"制御された環境でセットアップスクリプトを実行し、いろいろなものを操作する :"
"class:`distutils.dist.Distribution` クラスのインスタンスを返します。これは"
"ディストリビューションのメタデータ(キーワード引数 *script* として関数 :func:"
"`setup` に渡される)を参照したり、設定ファイルやコマンドラインの内容を調べる時"
"に便利です。"

#: ../../distutils/apiref.rst:133
msgid ""
"*script_name* is a file that will be read and run with :func:`exec`.  ``sys."
"argv[0]`` will be replaced with *script* for the duration of the call.  "
"*script_args* is a list of strings; if supplied, ``sys.argv[1:]`` will be "
"replaced by *script_args* for the duration  of the call."
msgstr ""
"*script* は :func:`exec` で読み込まれるファイルです。 ``sys.argv[0]`` は、呼"
"び出しのために *script_name* と置換されます。  *script_args* は文字列のリスト"
"です。もし提供されていた場合、 ``sys.argv[1:]`` は、呼び出しのために "
"*script_args* で置換されます。"

#: ../../distutils/apiref.rst:138
msgid ""
"*stop_after* tells :func:`setup` when to stop processing; possible  values:"
msgstr ""
"*stop_after* はいつ動作を停止するか関数 :func:`setup` に伝えます。とりうる値"
"は:"

#: ../../distutils/apiref.rst:143 ../../distutils/apiref.rst:562
#: ../../distutils/apiref.rst:1606
msgid "description"
msgstr "description"

#: ../../distutils/apiref.rst:145
msgid "*init*"
msgstr "*init*"

#: ../../distutils/apiref.rst:145
msgid ""
"Stop after the :class:`Distribution` instance has been created  and "
"populated with the keyword arguments to :func:`setup`"
msgstr ""
":class:`Distribution` インスタンスを作成し、キーワード引数を :func:`setup` に"
"渡したあとに停止する。"

#: ../../distutils/apiref.rst:149
msgid "*config*"
msgstr "*config*"

#: ../../distutils/apiref.rst:149
msgid ""
"Stop after config files have been parsed (and their data stored in the :"
"class:`Distribution` instance)"
msgstr ""
"設定ファイルをパーズしたあと停止する(そしてそのデータは :class:"
"`Distribution` インスタンスに保存される)。"

#: ../../distutils/apiref.rst:153
msgid "*commandline*"
msgstr "*commandline*"

#: ../../distutils/apiref.rst:153
msgid ""
"Stop after the command-line (``sys.argv[1:]`` or  *script_args*) have been "
"parsed (and the data stored in the :class:`Distribution` instance.)"
msgstr ""
"コマンドライン (``sys.argv[1:]`` または *script_args*) がパーズされたあとに停"
"止する (そしてそのデータは :class:`Distribution` インスタンスに保存される)。"

#: ../../distutils/apiref.rst:158
msgid "*run*"
msgstr "*run*"

#: ../../distutils/apiref.rst:158
msgid ""
"Stop after all commands have been run (the same as  if :func:`setup` had "
"been called in the usual way). This is the default value."
msgstr ""
"全てのコマンドを実行したあとに停止する(関数 :func:`setup` を通常の方法で呼び"
"出した場合と同じ)。デフォルト値。"

#: ../../distutils/apiref.rst:164
msgid ""
"In addition, the :mod:`distutils.core` module exposed a number of  classes "
"that live elsewhere."
msgstr ""
"これに加えて、 :mod:`distutils.core` モジュールは他のモジュールにあるいくつか"
"のクラスを公開しています。"

#: ../../distutils/apiref.rst:167
msgid ":class:`~distutils.extension.Extension` from :mod:`distutils.extension`"
msgstr ""
":mod:`distutils.extension` から :class:`~distutils.extension.Extension`"

#: ../../distutils/apiref.rst:169
msgid ":class:`~distutils.cmd.Command` from :mod:`distutils.cmd`"
msgstr ":mod:`distutils.cmd` から :class:`~distutils.cmd.Command`"

#: ../../distutils/apiref.rst:171
msgid ":class:`~distutils.dist.Distribution` from :mod:`distutils.dist`"
msgstr ":mod:`distutils.dist` から :class:`~distutils.dist.Distribution`"

#: ../../distutils/apiref.rst:173
msgid ""
"A short description of each of these follows, but see the relevant module "
"for the full reference."
msgstr ""
"それぞれの簡単な説明を以下に記します。完全な説明についてはそれぞれのモジュー"
"ルをごらんください。"

#: ../../distutils/apiref.rst:179
msgid ""
"The Extension class describes a single C or C++ extension module in a setup "
"script. It accepts the following keyword arguments in its constructor:"
msgstr ""
"Extension クラスは、セットアップスクリプト中で C または C++ 拡張モジュールを"
"表します。\n"
"コンストラクタで以下のキーワード引数をとります:"

#: ../../distutils/apiref.rst:187
msgid ""
"the full name of the extension, including any packages --- ie. *not* a "
"filename or pathname, but Python dotted name"
msgstr ""
"拡張のフルネーム(パッケージを含む) --- ファイル名やパス名では *なく* 、Python"
"のピリオド区切りの名前"

#: ../../distutils/apiref.rst:193
msgid "*sources*"
msgstr "*sources*"

#: ../../distutils/apiref.rst:193
msgid ""
"list of source filenames, relative to the distribution root (where the setup "
"script lives), in Unix form (slash-separated) for portability. Source files "
"may be C, C++, SWIG (.i), platform-specific resource files, or whatever else "
"is recognized by the :command:`build_ext` command as source for a Python "
"extension."
msgstr ""
"ソースファイル名のリスト。配布物ルートディレクトリ (setupスクリプトのある場"
"所) からの相対パス、プラットフォーム独立のため Unix 形式(スラッシュで区切る)"
"で記述します。ソースファイルは C, C++, SWIG (.i)、特定プラットフォーム用のリ"
"ソースファイル、その他 :command:`build_ext` コマンドがソースファイルだと認識"
"するどの形式でもありえます。"

#: ../../distutils/apiref.rst:207
msgid "*include_dirs*"
msgstr "*include_dirs*"

#: ../../distutils/apiref.rst:207
msgid ""
"list of directories to search for C/C++ header files (in Unix form for "
"portability)"
msgstr ""
"C/C++ヘッダファイルを検索するディレクトリのリスト(プラットフォーム独立のため "
"Unix 形式で記述する)"

#: ../../distutils/apiref.rst:211
msgid "*define_macros*"
msgstr "*define_macros*"

#: ../../distutils/apiref.rst:211
msgid ""
"list of macros to define; each macro is defined using a 2-tuple ``(name, "
"value)``, where *value* is either the string to define it to or ``None`` to "
"define it without a particular value (equivalent of ``#define FOO`` in "
"source or :option:`!-DFOO` on Unix C compiler command line)"
msgstr ""
"定義するマクロのリスト; それぞれのマクロは2要素のタプル ``(name, value)`` で"
"定義されます。 *value* には定義しようとしている文字列、または内容なしで定義す"
"る場合は ``None`` (ソースコード中で ``#define FOO`` と書く、または Unix Cコン"
"パイラのコマンドラインで :option:`!-DFOO` を指定するのと等価です) を指定しま"
"す"

#: ../../distutils/apiref.rst:211
msgid "a list of tuples"
msgstr "タプルのリスト"

#: ../../distutils/apiref.rst:223
msgid "*undef_macros*"
msgstr "*undef_macros*"

#: ../../distutils/apiref.rst:223
msgid "list of macros to undefine explicitly"
msgstr "定義を消すマクロのリスト"

#: ../../distutils/apiref.rst:226
msgid "*library_dirs*"
msgstr "*library_dirs*"

#: ../../distutils/apiref.rst:226
msgid "list of directories to search for C/C++ libraries at link time"
msgstr "リンク時にC/C++ライブラリを検索するディレクトリのリスト"

#: ../../distutils/apiref.rst:230
msgid "*libraries*"
msgstr "*libraries*"

#: ../../distutils/apiref.rst:230
msgid "list of library names (not filenames or paths) to link against"
msgstr "リンクするライブラリ名のリスト (ファイル名やパスではない)"

#: ../../distutils/apiref.rst:234
msgid "*runtime_library_dirs*"
msgstr "*runtime_library_dirs*"

#: ../../distutils/apiref.rst:234
msgid ""
"list of directories to search for C/C++ libraries at run time (for shared "
"extensions, this is when the extension is loaded)"
msgstr ""
"実行時(shared extensionでは、拡張が読み込まれる時)に C/C++ライブラリを探索す"
"るディレクトリのリスト"

#: ../../distutils/apiref.rst:240
msgid "*extra_objects*"
msgstr "*extra_objects*"

#: ../../distutils/apiref.rst:240
msgid ""
"list of extra files to link with (eg. object files not implied by 'sources', "
"static library that must be explicitly specified, binary resource files, "
"etc.)"
msgstr ""
"追加でリンクするファイル('sources'に対応するコードが含まれていないファイル、"
"バイナリ形式のリソースファイルなど)のリスト"

#: ../../distutils/apiref.rst:247
msgid "*extra_compile_args*"
msgstr "*extra_compile_args*"

#: ../../distutils/apiref.rst:247
msgid ""
"any extra platform- and compiler-specific information to use when compiling "
"the source files in 'sources'. For platforms and compilers where a command "
"line makes sense, this is typically a list of command-line arguments, but "
"for other platforms it could be anything."
msgstr ""
"'sources'のソースをコンパイルする時に追加するプラットフォーム特有またはコンパ"
"イラ特有の情報コマンドラインを利用できるプラットホームとコンパイラでは、これ"
"は通常コマンドライン引数のリストですが、他のプラットホームでも、それは何かに"
"使えます。"

#: ../../distutils/apiref.rst:258
msgid "*extra_link_args*"
msgstr "*extra_link_args*"

#: ../../distutils/apiref.rst:258
msgid ""
"any extra platform- and compiler-specific information to use when linking "
"object files together to create the extension (or to create a new static "
"Python interpreter). Similar interpretation as for 'extra_compile_args'."
msgstr ""
"オブジェクトファイルをリンクして拡張(または新しいPythonインタプリタ)を作る時"
"に追加するプラットフォーム特有またはコンパイラ特有の情報 "
"'extra_compile_args'に似た実装です。"

#: ../../distutils/apiref.rst:267
msgid "*export_symbols*"
msgstr "*export_symbols*"

#: ../../distutils/apiref.rst:267
msgid ""
"list of symbols to be exported from a shared extension. Not used on all "
"platforms, and not generally necessary for Python extensions, which "
"typically export exactly one symbol: ``init`` + extension_name."
msgstr ""
"shared extensionからエクスポートされるシンボルのリスト。全てのプラットフォー"
"ムでは使われず、 Python拡張(典型的には ``init`` + extension_name という1つの"
"シンボルだけエクスポートする)に一般的に必要なものでもない。"

#: ../../distutils/apiref.rst:275
msgid "*depends*"
msgstr "*depends*"

#: ../../distutils/apiref.rst:275
msgid "list of files that the extension depends on"
msgstr "拡張が依存するファイルのリスト"

#: ../../distutils/apiref.rst:278
msgid "*language*"
msgstr "*language*"

#: ../../distutils/apiref.rst:278
msgid ""
"extension language (i.e. ``'c'``, ``'c++'``, ``'objc'``). Will be detected "
"from the source extensions if not provided."
msgstr ""
"拡張の言語 (例: ``'c'``, ``'c++'``, ``'objc'``)。指定しなければソースの拡張子"
"で検出される。"

#: ../../distutils/apiref.rst:284
msgid "*optional*"
msgstr "*optional*"

#: ../../distutils/apiref.rst:284
msgid ""
"specifies that a build failure in the extension should not abort the build "
"process, but simply skip the extension."
msgstr ""
"拡張で起きたビルド失敗によってビルドプロセスを中断せず、単にその拡張を無視し"
"て処理を進めるように指定します。"

#: ../../distutils/apiref.rst:284
msgid "a boolean"
msgstr "ブール値"

#: ../../distutils/apiref.rst:292
msgid ""
"On Unix, C extensions are no longer linked to libpython except on Android "
"and Cygwin."
msgstr ""
"Android と Cygwin を除き、 Unix では C 拡張モジュールは libpython とリンクさ"
"れなくなりました。"

#: ../../distutils/apiref.rst:298
msgid ""
"A :class:`Distribution` describes how to build, install and package up a "
"Python software package."
msgstr ""
":class:`Distribution` はPythonソフトウェアパッケージをどのようにビルド、イン"
"ストール、パッケージするかを定義する。"

#: ../../distutils/apiref.rst:301
msgid ""
"See the :func:`setup` function for a list of keyword arguments accepted  by "
"the Distribution constructor. :func:`setup` creates a Distribution instance."
msgstr ""
"Distribution のコンストラクタが取りうるキーワード引数のリストに関しては、 :"
"func:`setup` 関数を見てください。 :func:`setup` は Distribution のインスタン"
"スを作ります。"

#: ../../distutils/apiref.rst:304
msgid ""
":class:`~distutils.core.Distribution` now warns if ``classifiers``, "
"``keywords`` and ``platforms`` fields are not specified as a list or a "
"string."
msgstr ""
"``classifiers``, ``keywords``, ``platforms`` のフィールドがリストもしくは文字"
"列で指定されていなかった場合、 :class:`~distutils.core.Distribution` が警告を"
"出すようになりました。"

#: ../../distutils/apiref.rst:311
msgid ""
"A :class:`Command` class (or rather, an instance of one of its subclasses) "
"implement a single distutils command."
msgstr ""
":class:`Command` クラス(そのサブクラスのインスタンス)はdistutilsのあるコマン"
"ドを実装します。"

#: ../../distutils/apiref.rst:316
msgid ":mod:`distutils.ccompiler` --- CCompiler base class"
msgstr ":mod:`distutils.ccompiler` --- CCompiler ベースクラス"

#: ../../distutils/apiref.rst:322
msgid ""
"This module provides the abstract base class for the :class:`CCompiler` "
"classes.  A :class:`CCompiler` instance can be used for all the compile  and "
"link steps needed to build a single project. Methods are provided to  set "
"options for the compiler --- macro definitions, include directories,  link "
"path, libraries and the like."
msgstr ""
"このモジュールは :class:`CCompiler` クラスの抽象ベースクラスを提供します。 :"
"class:`CCompiler` のインスタンスはプロジェクトにおける全てのコンパイルおよび"
"リンクに使われます。コンパイラのオプションを設定するためのメソッドが提供され"
"ます --- マクロ定義、includeディレクトリ、リンクパス、ライブラリなど。"

#: ../../distutils/apiref.rst:328
msgid "This module provides the following functions."
msgstr "このモジュールは以下の関数を提供します。"

#: ../../distutils/apiref.rst:333
msgid ""
"Generate linker options for searching library directories and linking with "
"specific libraries.  *libraries* and *library_dirs* are, respectively, lists "
"of library names (not filenames!) and search directories.  Returns a list of "
"command-line options suitable for use with some compiler (depending on the "
"two format strings passed in)."
msgstr ""
"ライブラリを探索するディレクトリ、特定のライブラリとのリンクをするためのリン"
"カオプションを生成します。 *libraries* と *library_dirs* はそれぞれライブラリ"
"名(ファイル名ではありません!)のリストと、探索ディレクトリのリストです。 "
"compilerで利用できるコマンドラインオプションのリスト(指定されたフォーマット文"
"字列に依存します)を返します。"

#: ../../distutils/apiref.rst:342
msgid ""
"Generate C pre-processor options (:option:`!-D`, :option:`!-U`, :option:`!-"
"I`) as used by at least two types of compilers: the typical Unix compiler "
"and Visual C++. *macros* is the usual thing, a list of 1- or 2-tuples, where "
"``(name,)`` means undefine (:option:`!-U`) macro *name*, and ``(name, "
"value)`` means define (:option:`!-D`) macro *name* to *value*.  "
"*include_dirs* is just a list of directory names to be added to the header "
"file search path (:option:`!-I`). Returns a list of command-line options "
"suitable for either Unix compilers or Visual C++."
msgstr ""
"Cプリプロセッサオプション(:option:`!-D`, :option:`!-U`, :option:`!-I`)を生成"
"します。これらは少なくとも2つのコンパイラで利用可能です。典型的な Unix のコン"
"パイラと、VisualC++です。 *macros* は1または2要素のタプルで ``(name,)`` は "
"*name* マクロの削除 (:option:`!-U`)を意味し、 ``(name, value)`` は *name* マ"
"クロを *value* として定義(:option:`!-D`)します。 *include_dirs* はディレクト"
"リ名のリストで、ヘッダファイルのサーチパスに追加されます(:option:`!-I`)。 "
"Unix のコンパイラと、Visual C++で利用できるコマンドラインオプションのリストを"
"返します。"

#: ../../distutils/apiref.rst:354
msgid "Determine the default compiler to use for the given platform."
msgstr "指定されたプラットフォームのデフォルトコンパイラを返します。"

#: ../../distutils/apiref.rst:356
msgid ""
"*osname* should be one of the standard Python OS names (i.e. the ones "
"returned by ``os.name``) and *platform* the common value returned by ``sys."
"platform`` for the platform in question."
msgstr ""
"問い合わせの *osname* はPython標準のOS名(``os.name`` で返されるもの)のひとつ"
"であるべきで、 *platform* は ``sys.platform`` で返される共通の値です。"

#: ../../distutils/apiref.rst:360
msgid ""
"The default values are ``os.name`` and ``sys.platform`` in case the "
"parameters are not given."
msgstr ""
"パラメータが指定されていない場合のデフォルト値は ``os.name`` と ``sys."
"platform`` です。"

#: ../../distutils/apiref.rst:366
msgid ""
"Factory function to generate an instance of some CCompiler subclass for the "
"supplied platform/compiler combination. *plat* defaults to ``os.name`` (eg. "
"``'posix'``, ``'nt'``), and *compiler*  defaults to the default compiler for "
"that platform. Currently only ``'posix'`` and ``'nt'`` are supported, and "
"the default compilers are \"traditional Unix interface\" (:class:"
"`UnixCCompiler` class) and Visual C++ (:class:`MSVCCompiler` class).  Note "
"that it's perfectly possible to ask for a Unix compiler object under "
"Windows, and a Microsoft compiler object under Unix---if you supply a value "
"for *compiler*, *plat* is ignored."
msgstr ""
"指定されたプラットフォーム/コンパイラの組み合わせ向けに、 CCompilerサブクラス"
"のインスタンスを生成するファクトリ関数です。 *plat* のデフォルト値は ``os."
"name`` (例: ``'posix'``, ``'nt'``), *compiler*)、 *compiler* のデフォルト値は"
"プラトフォームのデフォルトコンパイラです。現在は ``'posix'`` と ``'nt'`` だけ"
"がサポートされています、デフォルトのコンパイラは \"traditional Unix "
"interface\" (:class:`UnixCCompiler` クラス) と、 Visual C++ (:class:"
"`MSVCCompiler` クラス) です。 WindowsでUnixコンパイラオブジェクトを要求するこ"
"とも、UnixでMicrosoft コンパイラオブジェクトを要求することも可能です。 "
"*compiler* 引数を与えると *plat* は無視されます。"

#: ../../distutils/apiref.rst:382
msgid ""
"Print list of available compilers (used by the :option:`!--help-compiler` "
"options to :command:`build`, :command:`build_ext`, :command:`build_clib`)."
msgstr ""
"利用可能なコンパイラのリストを表示します (:command:`build`, :command:"
"`build_ext`, :command:`build_clib` の、 :option:`!--help-compiler` オプション"
"で使われます)。"

#: ../../distutils/apiref.rst:388
msgid ""
"The abstract base class :class:`CCompiler` defines the interface that  must "
"be implemented by real compiler classes.  The class also has  some utility "
"methods used by several compiler classes."
msgstr ""
"抽象ベースクラス :class:`CCompiler` は実際のコンパイラクラスで実装される必要"
"のあるインターフェースを定義しています。このクラスはコンパイラクラスで利用さ"
"れるユーティリティメソッドも定義しています。"

#: ../../distutils/apiref.rst:392
msgid ""
"The basic idea behind a compiler abstraction class is that each instance can "
"be used for all the compile/link steps in building a single project.  Thus, "
"attributes common to all of those compile and link steps --- include "
"directories, macros to define, libraries to link against, etc. --- are "
"attributes of the compiler instance.  To allow for variability in how "
"individual files are treated, most of those attributes may be varied on a "
"per-compilation or per-link basis."
msgstr ""
"コンパイラ抽象クラスの基本的な前提は、各インスタンスはあるプロジェクトをビル"
"ドするときの全コンパイル/リンクで利用できるということです。そこで、コンパイル"
"とリンクステップで共通する属性 --- インクルードディレクトリ、マクロ定義、リン"
"クするライブラリなど --- はコンパイラインスタンスの属性になります。どのように"
"各ファイルが扱われるかを変更できるように、ほとんどの属性はコンパイルごと、ま"
"たはリンクごとに与えることができます。"

#: ../../distutils/apiref.rst:400
msgid ""
"The constructor for each subclass creates an instance of the Compiler "
"object. Flags are *verbose* (show verbose output), *dry_run* (don't actually "
"execute the steps) and *force* (rebuild everything, regardless of "
"dependencies). All of these flags default to ``0`` (off). Note that you "
"probably don't want to instantiate :class:`CCompiler` or one of its "
"subclasses directly - use the :func:`distutils.CCompiler.new_compiler` "
"factory function instead."
msgstr ""
"各サブクラスのコンストラクタは Compiler クラスのインスタンスを作ります。フラ"
"グは *verbose* (冗長な出力を表示します)、 *dry_run* (実際にはそのステップを実"
"行しません)、そして *force* (依存関係を無視して全て再ビルドします)です。これ"
"らのフラグは全てデフォルト値が ``0`` (無効)になっています。 :class:"
"`CCompiler` またはサブクラスを直接インスタンス化したくない場合には、かわり"
"に :func:`distutils.CCompiler.new_compiler` ファクトリ関数を利用してくださ"
"い。"

#: ../../distutils/apiref.rst:407
msgid ""
"The following methods allow you to manually alter compiler options for  the "
"instance of the Compiler class."
msgstr ""
"以下のメソッドで、Compilerクラスのインスタンスが使うコンパイラオプションを手"
"動で変更できます。"

#: ../../distutils/apiref.rst:413
msgid ""
"Add *dir* to the list of directories that will be searched for header files. "
"The compiler is instructed to search directories in the order in which they "
"are supplied by successive calls to :meth:`add_include_dir`."
msgstr ""
"*dir* をヘッダファイル探索ディレクトリのリストに追加します。コンパイラは :"
"meth:`add_include_dir` を呼び出した順にディレクトリを探索するよう指定されま"
"す。"

#: ../../distutils/apiref.rst:420
msgid ""
"Set the list of directories that will be searched to *dirs* (a list of "
"strings). Overrides any preceding calls to :meth:`add_include_dir`; "
"subsequent calls to :meth:`add_include_dir` add to the list passed to :meth:"
"`set_include_dirs`. This does not affect any list of standard include "
"directories that the compiler may search by default."
msgstr ""
"探索されるディレクトリのリストを *dirs* (文字列のリスト)に設定します。先に実"
"行された :meth:`add_include_dir` は上書きされます。後で実行する :meth:"
"`add_include_dir` は :meth:`set_include_dirs` のリストにディレクトリを追加し"
"ます。これはコンパイラがデフォルトで探索する標準インクルードディレクトリには"
"影響しません。"

#: ../../distutils/apiref.rst:429
msgid ""
"Add *libname* to the list of libraries that will be included in all links "
"driven by this compiler object.  Note that *libname* should \\*not\\* be the "
"name of a file containing a library, but the name of the library itself: the "
"actual filename will be inferred by the linker, the compiler, or the "
"compiler class (depending on the platform)."
msgstr ""
"*libname* をコンパイラオブジェクトによるリンク時に使われるライブラリのリスト"
"に追加します。 *libname* はライブラリを含むファイル名ではなく、ライブラリその"
"ものの名前です: 実際のファイル名はリンカ、コンパイラ、またはコンパイラクラス"
"(プラットフォームに依存します)から推測されます。"

#: ../../distutils/apiref.rst:435
msgid ""
"The linker will be instructed to link against libraries in the order they "
"were supplied to :meth:`add_library` and/or :meth:`set_libraries`.  It is "
"perfectly valid to duplicate library names; the linker will be instructed to "
"link against libraries as many times as they are mentioned."
msgstr ""
"リンカは :meth:`add_library` と :meth:`set_libraries` で渡された順にライブラ"
"リをリンクしようとします。ライブラリ名が重なることは問題ありません。リンカは"
"指定された回数だけライブラリとリンクしようとします。"

#: ../../distutils/apiref.rst:443
msgid ""
"Set the list of libraries to be included in all links driven by this "
"compiler object to *libnames* (a list of strings).  This does not affect any "
"standard system libraries that the linker may include by default."
msgstr ""
"コンパイラオブジェクトによるリンク時に使われるライブラリのリストを "
"*libnames* (文字列のリスト)に設定します。これはリンカがデフォルトでリンクする"
"標準のシステムライブラリには影響しません。"

#: ../../distutils/apiref.rst:450
msgid ""
"Add *dir* to the list of directories that will be searched for libraries "
"specified to :meth:`add_library` and :meth:`set_libraries`.  The linker will "
"be instructed to search for libraries in the order they are supplied to :"
"meth:`add_library_dir` and/or :meth:`set_library_dirs`."
msgstr ""
":meth:`add_library` と :meth:`set_libraries` で指定されたライブラリを探索する"
"ディレクトリのリストに *dir* を追加します。リンカは :meth:`add_library_dir` "
"と :meth:`set_library_dirs` で指定された順にディレクトリを探索されます。"

#: ../../distutils/apiref.rst:458
msgid ""
"Set the list of library search directories to *dirs* (a list of strings).  "
"This does not affect any standard library search path that the linker may "
"search by default."
msgstr ""
"ライブラリを探索するディレクトリを *dirs* (文字列のリスト)に設定します。これ"
"はリンカがデフォルトで探索する標準ライブラリ探索パスには影響しません。"

#: ../../distutils/apiref.rst:465
msgid ""
"Add *dir* to the list of directories that will be searched for shared "
"libraries at runtime."
msgstr ""
"実行時に共有ライブラリを探索するディレクトリのリストに *dir* を追加します。"

#: ../../distutils/apiref.rst:471
msgid ""
"Set the list of directories to search for shared libraries at runtime to "
"*dirs* (a list of strings).  This does not affect any standard search path "
"that the runtime linker may search by default."
msgstr ""
"実行時に共有ライブラリを探索するディレクトリのリストを *dirs* (文字列のリス"
"ト)に設定します。これはランタイムリンカがデフォルトで利用する標準探索パスには"
"影響しません。"

#: ../../distutils/apiref.rst:478
msgid ""
"Define a preprocessor macro for all compilations driven by this compiler "
"object. The optional parameter *value* should be a string; if it is not "
"supplied, then the macro will be defined without an explicit value and the "
"exact outcome depends on the compiler used."
msgstr ""
"このコンパイラオブジェクトで実行される全てのコンパイルで利用されるプリプロ"
"セッサのマクロ定義を行います。オプション引数 *value* は文字列でなければなりま"
"せん; それが指定されない場合は、特定の値を持たないマクロが定義され、実際の値"
"は使っているコンパイラに依存します。"

#: ../../distutils/apiref.rst:488
msgid ""
"Undefine a preprocessor macro for all compilations driven by this compiler "
"object.  If the same macro is defined by :meth:`define_macro` and undefined "
"by :meth:`undefine_macro` the last call takes precedence (including multiple "
"redefinitions or undefinitions).  If the macro is redefined/undefined on a "
"per-compilation basis (ie. in the call to :meth:`compile`), then that takes "
"precedence."
msgstr ""
"このコンパイラオブジェクトで実行される全てのコンパイルで利用されるプリプロ"
"セッサのマクロ定義を消します。同じマクロを :meth:`define_macro` で定義し、 :"
"meth:`undefine_macro` で定義を削除した場合、後で呼び出されたものが優先される"
"(複数の再定義と削除を含みます)。もしコンパイルごと(すなわち :meth:`compile` "
"の呼び出しごと)にマクロが再定義/削除される場合も後で呼び出されたものが優先さ"
"れます。"

#: ../../distutils/apiref.rst:498
msgid ""
"Add *object* to the list of object files (or analogues, such as explicitly "
"named library files or the output of \"resource compilers\") to be included "
"in every link driven by this compiler object."
msgstr ""
"このコンパイラオブジェクトによる全てのリンクで利用されるオブジェクトファイル"
"(または類似のライブラリファイルや \"リソースコンパイラ\"の出力)のリストに "
"*object* を追加します。"

#: ../../distutils/apiref.rst:505
msgid ""
"Set the list of object files (or analogues) to be included in every link to "
"*objects*.  This does not affect any standard object files that the linker "
"may include by default (such as system libraries)."
msgstr ""
"このコンパイラオブジェクトによる全てのリンクで利用されるオブジェクトファイル"
"(または類似のもの)のリストを *objects* に設定します。これはリンカがデフォルト"
"利用する標準オブジェクトファイル(システムライブラリなど)には影響しません。"

#: ../../distutils/apiref.rst:509
msgid ""
"The following methods implement methods for autodetection of compiler  "
"options, providing some functionality similar to GNU :program:`autoconf`."
msgstr ""
"以下のメソッドはコンパイラオプションの自動検出を実装しており、 GNU :program:"
"`autoconf` に似たいくつかの機能を提供します。"

#: ../../distutils/apiref.rst:515
msgid ""
"Detect the language of a given file, or list of files. Uses the  instance "
"attributes :attr:`language_map` (a dictionary), and  :attr:`language_order` "
"(a list) to do the job."
msgstr ""
"与えられたファイルまたはファイルのリストの言語を検出します。インスタンス属"
"性 :attr:`language_map` (辞書)と、 :attr:`language_order` (リスト)を仕事に使"
"います。"

#: ../../distutils/apiref.rst:522
msgid ""
"Search the specified list of directories for a static or shared library file "
"*lib* and return the full path to that file.  If *debug* is true, look for a "
"debugging version (if that makes sense on the current platform).  Return "
"``None`` if *lib* wasn't found in any of the specified directories."
msgstr ""
"指定されたディレクトリのリストから、スタティックまたは共有ライブラリファイル "
"*lib* を探し、そのファイルのフルパスを返します。もし *debug* が真なら、(現在"
"のプラットフォームで意味があれば)デバッグ版を探します。指定されたどのディレク"
"トリでも *lib* が見つからなければ ``None`` を返します。"

#: ../../distutils/apiref.rst:530
msgid ""
"Return a boolean indicating whether *funcname* is supported on the current "
"platform.  The optional arguments can be used to augment the compilation "
"environment by providing additional include files and paths and libraries "
"and paths."
msgstr ""
"*funcname* が現在のプラットフォームでサポートされているかどうかをブール値で返"
"します。省略可能引数は追加のインクルードファイルやパス、ライブラリやパスを与"
"えることでコンパイル環境を指定します。"

#: ../../distutils/apiref.rst:538
msgid ""
"Return the compiler option to add *dir* to the list of directories searched "
"for libraries."
msgstr ""
"*dir* をライブラリ探索ディレクトリに追加するコンパイラオプションを返します。"

#: ../../distutils/apiref.rst:544
msgid ""
"Return the compiler option to add *lib* to the list of libraries linked into "
"the shared library or executable."
msgstr ""
"共有ライブラリまたは実行ファイルにリンクされるライブラリ一覧に *lib* を追加す"
"るコンパイラオプションを返します。"

#: ../../distutils/apiref.rst:550
msgid ""
"Return the compiler option to add *dir* to the list of directories searched "
"for runtime libraries."
msgstr ""
"ランタイムライブラリを検索するディレクトリのリストに *dir* を追加するコンパイ"
"ラオプションを返します。"

#: ../../distutils/apiref.rst:556
msgid ""
"Define the executables (and options for them) that will be run to perform "
"the various stages of compilation.  The exact set of executables that may be "
"specified here depends on the compiler class (via the 'executables' class "
"attribute), but most will have:"
msgstr ""
"コンパイルのいろいろなステージで実行される実行ファイル(とその引数)を定義しま"
"す。コンパイラクラス(の 'executables' 属性)によって実行ファイルのセットは変わ"
"る可能性がありますが、ほとんどは以下のものを持っています:"

#: ../../distutils/apiref.rst:562
msgid "attribute"
msgstr "属性"

#: ../../distutils/apiref.rst:564
msgid "*compiler*"
msgstr "*compiler*"

#: ../../distutils/apiref.rst:564
msgid "the C/C++ compiler"
msgstr "C/C++ コンパイラ"

#: ../../distutils/apiref.rst:566
msgid "*linker_so*"
msgstr "*linker_so*"

#: ../../distutils/apiref.rst:566
msgid "linker used to create shared objects and libraries"
msgstr "シェアードオブジェクト、ライブラリを作るために使うリンカ"

#: ../../distutils/apiref.rst:569
msgid "*linker_exe*"
msgstr "*linker_exe*"

#: ../../distutils/apiref.rst:569
msgid "linker used to create binary executables"
msgstr "バイナリ実行可能ファイルを作るために使うリンカ"

#: ../../distutils/apiref.rst:571
msgid "*archiver*"
msgstr "*archiver*"

#: ../../distutils/apiref.rst:571
msgid "static library creator"
msgstr "静的ライブラリを作るアーカイバ"

#: ../../distutils/apiref.rst:574
msgid ""
"On platforms with a command-line (Unix, DOS/Windows), each of these is a "
"string that will be split into executable name and (optional) list of "
"arguments. (Splitting the string is done similarly to how Unix shells "
"operate: words are delimited by spaces, but quotes and backslashes can "
"override this.  See :func:`distutils.util.split_quoted`.)"
msgstr ""
"コマンドラインをもつプラットフォーム(Unix, DOS/Windows)では、それぞれの文字列"
"は実行ファイル名と(省略可能な)引数リストに分割されます。(文字列の分割は Unix "
"のシェルが行うものに似ています: 単語はスペースで区切られますが、クォートと"
"バックスラッシュでオーバーライドできます。 :func:`distutils.util."
"split_quoted` をごらんください。)"

#: ../../distutils/apiref.rst:580
msgid "The following methods invoke stages in the build process."
msgstr "以下のメソッドはビルドプロセスのステージを呼び出します。"

#: ../../distutils/apiref.rst:585
msgid ""
"Compile one or more source files. Generates object files (e.g.  transforms "
"a :file:`.c` file to a :file:`.o` file.)"
msgstr ""
"1つ以上のソースファイルをコンパイルします。オブジェクトファイルを生成 (たとえ"
"ば :file:`.c` ファイルを :file:`.o` ファイルに変換)します。"

#: ../../distutils/apiref.rst:588
msgid ""
"*sources* must be a list of filenames, most likely C/C++ files, but in "
"reality anything that can be handled by a particular compiler and compiler "
"class (eg. :class:`MSVCCompiler` can handle resource files in *sources*).  "
"Return a list of object filenames, one per source filename in *sources*.  "
"Depending on the implementation, not all source files will necessarily be "
"compiled, but all corresponding object filenames will be returned."
msgstr ""
"*sources* はファイル名のリストである必要があります。おそらく C/C++ ファイルで"
"すが、実際にはコンパイラとコンパイラクラスで扱えるもの(例: :class:"
"`MSVCCompiler` はリソースファイルを *sources* にとることができます)なら何でも"
"指定できます。 *sources* のソースファイルひとつずつに対応するオブジェクトファ"
"イル名のリストを返します。実装に依存しますが、全てのソースファイルがコンパイ"
"ルされる必要はありません。しかし全ての対応するオブジェクトファイル名が返りま"
"す。"

#: ../../distutils/apiref.rst:595
msgid ""
"If *output_dir* is given, object files will be put under it, while retaining "
"their original path component.  That is, :file:`foo/bar.c` normally compiles "
"to :file:`foo/bar.o` (for a Unix implementation); if *output_dir* is "
"*build*, then it would compile to :file:`build/foo/bar.o`."
msgstr ""
"もし *output_dir* が指定されていれば、オブジェクトファイルはその下に、オリジ"
"ナルのパスを維持した状態で置かれます。つまり、 :file:`foo/bar.c` は通常コンパ"
"イルされて :file:`foo/bar.o` になります (Unix実装の場合)が、もし "
"*output_dir* が *build* であれば、 :file:`build/foo/bar.o` になります。"

#: ../../distutils/apiref.rst:600
msgid ""
"*macros*, if given, must be a list of macro definitions.  A macro definition "
"is either a ``(name, value)`` 2-tuple or a ``(name,)`` 1-tuple. The former "
"defines a macro; if the value is ``None``, the macro is defined without an "
"explicit value.  The 1-tuple case undefines a macro.  Later definitions/"
"redefinitions/undefinitions take precedence."
msgstr ""
"*macros* は(もし指定されていれば)マクロ定義のリストである必要があります。マク"
"ロ定義は ``(name, value)`` という形式の2要素のタプル、または ``(name,)`` とい"
"う形式の1要素のタプルのどちらかです。前者はマクロを定義します。もし value が "
"``None`` であれば、マクロは特定の値をもたないで定義されます。1要素のタプルは"
"マクロ定義を削除します。後で実行された定義/再定義/削除が優先されます。"

#: ../../distutils/apiref.rst:606
msgid ""
"*include_dirs*, if given, must be a list of strings, the directories to add "
"to the default include file search path for this compilation only."
msgstr ""
"*include_dirs* は(もし指定されていれば)文字列のリストである必要があります。こ"
"のコンパイルだけで有効な、デフォルトのインクルードファイルの検索ディレクトリ"
"に追加するディレクトリ群を指定します。"

#: ../../distutils/apiref.rst:609
msgid ""
"*debug* is a boolean; if true, the compiler will be instructed to output "
"debug symbols in (or alongside) the object file(s)."
msgstr ""
"*debug* はブーリアン値です。もし真なら、コンパイラはデバッグシンボルをオブ"
"ジェクトファイルに(または別ファイルに)出力します。"

#: ../../distutils/apiref.rst:612
msgid ""
"*extra_preargs* and *extra_postargs* are implementation-dependent. On "
"platforms that have the notion of a command-line (e.g. Unix, DOS/Windows), "
"they are most likely lists of strings: extra command-line arguments to "
"prepend/append to the compiler command line.  On other platforms, consult "
"the implementation class documentation.  In any event, they are intended as "
"an escape hatch for those occasions when the abstract compiler framework "
"doesn't cut the mustard."
msgstr ""
"*extra_preargs* と *extra_postargs* は実装依存です。コマンドラインをもってい"
"るプラットフォーム(例 Unix, DOS/Windows)では、おそらく文字列のリスト: コンパ"
"イラのコマンドライン引数の前/後に追加するコマンドライン引数です。他のプラット"
"フォームでは、実装クラスのドキュメントを参照してください。どの場合でも、これ"
"らの引数は抽象コンパイラフレームワークが期待に沿わない時の脱出口として意図さ"
"れています。"

#: ../../distutils/apiref.rst:619
msgid ""
"*depends*, if given, is a list of filenames that all targets depend on.  If "
"a source file is older than any file in depends, then the source file will "
"be recompiled.  This supports dependency tracking, but only at a coarse "
"granularity."
msgstr ""
"*depends* は(もし指定されていれば)ターゲットが依存しているファイル名のリスト"
"です。ソースファイルが依存しているファイルのどれかより古ければ、ソースファイ"
"ルは再コンパイルされます。これは依存関係のトラッキングをサポートしています"
"が、荒い粒度でしか行われません。"

#: ../../distutils/apiref.rst:624
msgid "Raises :exc:`CompileError` on failure."
msgstr "失敗すると :exc:`CompileError` を起こします。"

#: ../../distutils/apiref.rst:629
msgid ""
"Link a bunch of stuff together to create a static library file. The \"bunch "
"of stuff\" consists of the list of object files supplied as *objects*, the "
"extra object files supplied to :meth:`add_link_object` and/or :meth:"
"`set_link_objects`, the libraries supplied to :meth:`add_library` and/or :"
"meth:`set_libraries`, and the libraries supplied as *libraries* (if any)."
msgstr ""
"静的ライブラリファイルを作るために元ファイル群をリンクします。「元ファイル"
"群」は *objects* で指定されたオブジェクトファイルのリストを基礎にしています。"
"追加のオブジェクトファイルを :meth:`add_link_object` および/または :meth:"
"`set_link_objects` で指定し、追加のライブラリを :meth:`add_library` および/ま"
"たは :meth:`set_libraries` で指定します。そして *libraries* で指定されたライ"
"ブラリです。"

#: ../../distutils/apiref.rst:635
msgid ""
"*output_libname* should be a library name, not a filename; the filename will "
"be inferred from the library name.  *output_dir* is the directory where the "
"library file will be put."
msgstr ""
"*output_libname* はファイル名ではなく、ライブラリ名でなければなりません; ファ"
"イル名はライブラリ名から推測されます。*output_dir* はライブラリファイルが置か"
"れるディレクトリです。"

#: ../../distutils/apiref.rst:641
msgid ""
"*debug* is a boolean; if true, debugging information will be included in the "
"library (note that on most platforms, it is the compile step where this "
"matters: the *debug* flag is included here just for consistency)."
msgstr ""
"*debug* はブーリアン値です。もし真なら、デバッグ情報はライブラリに含められま"
"す (ほとんどのプラットフォームにおいて、これが重要なのはコンパイルステップで"
"あることに注意してください: *debug* フラグは、ここでは単に一貫性のために含め"
"られます)。"

#: ../../distutils/apiref.rst:645 ../../distutils/apiref.rst:687
msgid ""
"*target_lang* is the target language for which the given objects are being "
"compiled. This allows specific linkage time treatment of certain languages."
msgstr ""
"*target_lang* はオブジェクトがコンパイルされる対象言語です。リンク時に言語特"
"有の処理を行えるようにします。"

#: ../../distutils/apiref.rst:648
msgid "Raises :exc:`LibError` on failure."
msgstr "失敗すると :exc:`LibError` を起こします。"

#: ../../distutils/apiref.rst:653
msgid ""
"Link a bunch of stuff together to create an executable or shared library "
"file."
msgstr ""
"実行ファイルまたは共有ライブラリファイルを作るために元ファイル群をリンクしま"
"す。"

#: ../../distutils/apiref.rst:655
msgid ""
"The \"bunch of stuff\" consists of the list of object files supplied as "
"*objects*. *output_filename* should be a filename.  If *output_dir* is "
"supplied, *output_filename* is relative to it (i.e. *output_filename* can "
"provide directory components if needed)."
msgstr ""
"「元ファイル群」は *objects* で指定されたオブジェクトファイルのリストを基礎に"
"しています。 *output_filename* はファイル名です。もし *output_dir* が指定され"
"ていれば、それに対する相対パスとして *output_filename* は扱われます(必要なら"
"ば *output_filename* はディレクトリ名を含むことができます。)。"

#: ../../distutils/apiref.rst:660
msgid ""
"*libraries* is a list of libraries to link against.  These are library "
"names, not filenames, since they're translated into filenames in a platform-"
"specific way (eg. *foo* becomes :file:`libfoo.a` on Unix and :file:`foo.lib` "
"on DOS/Windows).  However, they can include a directory component, which "
"means the linker will look in that specific directory rather than searching "
"all the normal locations."
msgstr ""
"*libraries* はリンクするライブラリのリストです。これはファイル名ではなくライ"
"ブラリ名で指定します。プラットフォーム依存の方式でファイル名に変換されます"
"(例: *foo* はUnix では :file:`libfoo.a` に、DOS/Windowsでは :file:`foo.lib` "
"になります。 )。ただしこれらはディレクトリ名を含むことができ、その場合はリン"
"カは通常の場所全体を探すのではなく特定のディレクトリを参照します。"

#: ../../distutils/apiref.rst:667
msgid ""
"*library_dirs*, if supplied, should be a list of directories to search for "
"libraries that were specified as bare library names (ie. no directory "
"component).  These are on top of the system default and those supplied to :"
"meth:`add_library_dir` and/or :meth:`set_library_dirs`.  "
"*runtime_library_dirs* is a list of directories that will be embedded into "
"the shared library and used to search for other shared libraries that "
"\\*it\\* depends on at run-time.  (This may only be relevant on Unix.)"
msgstr ""
"*library_dirs* はもし指定されるならば、修飾されていない(ディレクトリ名を含ん"
"でいない)ライブラリ名で指定されたライブラリを探索するディレクトリのリストで"
"す。これはシステムのデフォルトより優先され、 :meth:`add_library_dir` と/また"
"は :meth:`set_library_dirs` に渡されます。 *runtime_library_dirs* は共有ライ"
"ブラリに埋め込まれるディレクトリのリストで、実行時にそれが依存する共有ライブ"
"ラリのパスを指定します。(これはUnixでだけ意味があるかもしれません。)"

#: ../../distutils/apiref.rst:675
msgid ""
"*export_symbols* is a list of symbols that the shared library will export. "
"(This appears to be relevant only on Windows.)"
msgstr ""
"*export_symbols* は共有ライブラリがエクスポートするシンボルのリストです。 (こ"
"れはWindowsだけで意味があるようです。)"

#: ../../distutils/apiref.rst:678
msgid ""
"*debug* is as for :meth:`compile` and :meth:`create_static_lib`,  with the "
"slight distinction that it actually matters on most platforms (as opposed "
"to :meth:`create_static_lib`, which includes a *debug* flag mostly for "
"form's sake)."
msgstr ""
"*debug* は :meth:`compile` や :meth:`create_static_lib` と同じですが、少しだ"
"け違いがあり、(:meth:`create_static_lib` では *debug* フラグは形式をあわせる"
"ために存在していたのに対して)ほとんどのプラットフォームで意識されます。"

#: ../../distutils/apiref.rst:683
msgid ""
"*extra_preargs* and *extra_postargs* are as for :meth:`compile`  (except of "
"course that they supply command-line arguments for the particular linker "
"being used)."
msgstr ""
"*extra_preargs* と *extra_postargs* は :meth:`compile` と同じですが、コンパイ"
"ラではなくリンカへの引数として扱われます。"

#: ../../distutils/apiref.rst:690
msgid "Raises :exc:`LinkError` on failure."
msgstr "失敗すると :exc:`LinkError` が起きます。"

#: ../../distutils/apiref.rst:695
msgid ""
"Link an executable.  *output_progname* is the name of the file executable, "
"while *objects* are a list of object filenames to link in. Other arguments  "
"are as for the :meth:`link` method."
msgstr ""
"実行ファイルをリンクします。 *output_progname* は実行ファイルの名前です。 "
"*objects* はリンクされるオブジェクトのファイル名のリストです。他の引数は :"
"meth:`link` メソッドと同じです。"

#: ../../distutils/apiref.rst:702
msgid ""
"Link a shared library. *output_libname* is the name of the output  library, "
"while *objects* is a list of object filenames to link in.  Other arguments "
"are as for the :meth:`link` method."
msgstr ""
"共有ライブラリをリンクします。 *output_libname* は出力先のライブラリ名です。 "
"*objects* はリンクされるオブジェクトのファイル名のリストです。他の引数は :"
"meth:`link` メソッドと同じです。"

#: ../../distutils/apiref.rst:709
msgid ""
"Link a shared object. *output_filename* is the name of the shared object "
"that will be created, while *objects* is a list of object filenames  to link "
"in. Other arguments are as for the :meth:`link` method."
msgstr ""
"共有オブジェクトをリンクします。 *output_filename* は出力先の共有オブジェクト"
"名です。 *objects* はリンクされるオブジェクトのファイル名のリストです。他の引"
"数は :meth:`link` メソッドと同じです。"

#: ../../distutils/apiref.rst:716
msgid ""
"Preprocess a single C/C++ source file, named in *source*. Output will be "
"written to file named *output_file*, or *stdout* if *output_file* not "
"supplied. *macros* is a list of macro definitions as for :meth:`compile`, "
"which will augment the macros set with :meth:`define_macro` and :meth:"
"`undefine_macro`. *include_dirs* is a list of directory names that will be "
"added to the  default list, in the same way as :meth:`add_include_dir`."
msgstr ""
"*source* で指定されたひとつの C/C++ソースファイルをプリプロセスします。出力先"
"のファイルは *output_file* か、もし *output_file* が指定されていなければ "
"*stdout* になります。 *macros* は :meth:`compile` と同様にマクロ定義のリスト"
"で、 :meth:`define_macro` や :meth:`undefine_macro` によって引数になります。 "
"*include_dirs* はデフォルトのリストに追加されるディレクトリ名のリストで、 :"
"meth:`add_include_dir` と同じ方法で扱われます。"

#: ../../distutils/apiref.rst:723
msgid "Raises :exc:`PreprocessError` on failure."
msgstr "失敗すると :exc:`PreprocessError` が起きます。"

#: ../../distutils/apiref.rst:725
msgid ""
"The following utility methods are defined by the :class:`CCompiler` class, "
"for use by the various concrete subclasses."
msgstr ""
"以下のユーティリティメソッドは具体的なサブクラスで使うために、 :class:"
"`CCompiler` クラスで定義されています。"

#: ../../distutils/apiref.rst:731
msgid ""
"Returns the filename of the executable for the given *basename*.  Typically "
"for non-Windows platforms this is the same as the basename,  while Windows "
"will get a :file:`.exe` added."
msgstr ""
"*basename* で指定された実行ファイルのファイル名を返します。 Windows以外の典型"
"的なプラットフォームではbasenameそのままが、Windowsでは :file:`.exe` が追加さ"
"れたものが返ります。"

#: ../../distutils/apiref.rst:738
msgid ""
"Returns the filename for the given library name on the current platform. On "
"Unix a library with *lib_type* of ``'static'`` will typically  be of the "
"form :file:`liblibname.a`, while a *lib_type* of ``'dynamic'``  will be of "
"the form :file:`liblibname.so`."
msgstr ""
"現在のプラットフォームでのライブラリファイル名を返します。 Unixで *lib_type* "
"が ``'static'`` の場合、 :file:`liblibname.a` の形式を返し、 *lib_type* が "
"``'dynamic'`` の場合は :file:`liblibname.so` の形式を返します。"

#: ../../distutils/apiref.rst:746
msgid ""
"Returns the name of the object files for the given source files. "
"*source_filenames* should be a list of filenames."
msgstr ""
"指定されたソースファイルに対応するオブジェクトファイル名を返します。 "
"*source_filenames* はファイル名のリストです。"

#: ../../distutils/apiref.rst:752
msgid ""
"Returns the name of a shared object file for the given file name *basename*."
msgstr "*basename* に対応する共有オブジェクトファイルのファイル名を返します。"

#: ../../distutils/apiref.rst:757
msgid ""
"Invokes :func:`distutils.util.execute`. This method invokes a  Python "
"function *func* with the given arguments *args*, after  logging and taking "
"into account the *dry_run* flag."
msgstr ""
":func:`distutils.util.execute` を実行します。このメソッドは、ロギング処理を"
"し *dry_run* フラグを考慮に入れた上で、 Python 関数の *func* を与えられた引"
"数 *args* で実行します。"

#: ../../distutils/apiref.rst:764
msgid ""
"Invokes :func:`distutils.util.spawn`. This invokes an external  process to "
"run the given command."
msgstr ""
":func:`distutils.util.spawn` を実行します。これは与えられたコマンドを走らせる"
"別プロセスを起動します。"

#: ../../distutils/apiref.rst:770
msgid ""
"Invokes :func:`distutils.dir_util.mkpath`. This creates a directory  and any "
"missing ancestor directories."
msgstr ""
":func:`distutils.dir_util.mkpath` を実行します。ディレクトリと、そこまでの不"
"足している親ディレクトリを作成します。"

#: ../../distutils/apiref.rst:776
msgid "Invokes :meth:`distutils.file_util.move_file`. Renames *src* to  *dst*."
msgstr ""
":meth:`distutils.file_util.move_file` を実行します。 *src* を *dst* に名前変"
"更します。"

#: ../../distutils/apiref.rst:781
msgid "Write a message using :func:`distutils.log.debug`."
msgstr ":func:`distutils.log.debug` を使用してメッセージを書き出します。"

#: ../../distutils/apiref.rst:786
msgid "Write a warning message *msg* to standard error."
msgstr "警告メッセージ *msg* を標準エラー出力に書き出します。"

#: ../../distutils/apiref.rst:791
msgid ""
"If the *debug* flag is set on this :class:`CCompiler` instance, print  *msg* "
"to standard output, otherwise do nothing."
msgstr ""
"もしこの :class:`CCompiler` インスタンスで *debug* フラグが指定されていれば "
"*msg* を標準出力に出力し、そうでなければ何も出力しません。"

#: ../../distutils/apiref.rst:803
msgid ":mod:`distutils.unixccompiler` --- Unix C Compiler"
msgstr ":mod:`distutils.unixccompiler` --- Unix C コンパイラ"

#: ../../distutils/apiref.rst:809
msgid ""
"This module provides the :class:`UnixCCompiler` class, a subclass of :class:"
"`CCompiler` that handles the typical Unix-style command-line  C compiler:"
msgstr ""
"このモジュールは :class:`UnixCCompiler` クラスを提供します。 :class:"
"`CCompiler` クラスのサブクラスで、典型的なUnixスタイルのコマンドラインCコンパ"
"イラを扱います:"

#: ../../distutils/apiref.rst:812
msgid "macros defined with :option:`!-Dname[=value]`"
msgstr "マクロは :option:`!-Dname[=value]` で定義されます"

#: ../../distutils/apiref.rst:814
msgid "macros undefined with :option:`!-Uname`"
msgstr "マクロは :option:`!-Uname` で削除されます"

#: ../../distutils/apiref.rst:816
msgid "include search directories specified with :option:`!-Idir`"
msgstr ""
"インクルードファイルの探索ディレクトリは :option:`!-Idir` で指定されます"

#: ../../distutils/apiref.rst:818
msgid "libraries specified with :option:`!-llib`"
msgstr "ライブラリは :option:`!-llib` で指定されます"

#: ../../distutils/apiref.rst:820
msgid "library search directories specified with :option:`!-Ldir`"
msgstr "ライブラリの探索ディレクトリは :option:`!-Ldir` で指定されます"

#: ../../distutils/apiref.rst:822
msgid ""
"compile handled by :program:`cc` (or similar) executable with :option:`!-c` "
"option: compiles :file:`.c` to :file:`.o`"
msgstr ""
"コンパイルは :program:`cc` (またはそれに似た) 実行ファイルに、 :option:`!-c` "
"オプションをつけて実行します: :file:`.c` を :file:`.o` にコンパイルします"

#: ../../distutils/apiref.rst:825
msgid ""
"link static library handled by :program:`ar` command (possibly with :program:"
"`ranlib`)"
msgstr ""
"静的ライブラリは :program:`ar` コマンドで処理されます (:program:`ranlib` を使"
"うかもしれません)"

#: ../../distutils/apiref.rst:828
msgid "link shared library handled by :program:`cc` :option:`!-shared`"
msgstr ""
"共有ライブラリのリンクは :program:`cc` :option:`!-shared` で処理されます"

#: ../../distutils/apiref.rst:832
msgid ":mod:`distutils.msvccompiler` --- Microsoft Compiler"
msgstr ":mod:`distutils.msvccompiler` --- Microsoft コンパイラ"

#: ../../distutils/apiref.rst:839
msgid ""
"This module provides :class:`MSVCCompiler`, an implementation of the "
"abstract :class:`CCompiler` class for Microsoft Visual Studio. Typically, "
"extension modules need to be compiled with the same compiler that was used "
"to compile Python. For Python 2.3 and earlier, the compiler was Visual "
"Studio 6. For Python 2.4 and 2.5, the compiler is Visual Studio .NET 2003."
msgstr ""
"このモジュールは :class:`MSVCCompiler` クラスを提供します。抽象クラス :class:"
"`CCompiler` の具象クラスでMicrosoft Visual Studio向けのものです。一般的に、拡"
"張モジュールはPythonをコンパイルしたのと同じコンパイラでコンパイルする必要が"
"あります。Python 2.3 やそれ以前では、コンパイラはVisual Studio 6でした。 "
"Python 2.4 と Python 2.5 では、コンパイラは Visual Studio .NET 2003 です。"

#: ../../distutils/apiref.rst:845
msgid ""
":class:`MSVCCompiler` will normally choose the right compiler, linker etc. "
"on its own. To override this choice, the environment variables "
"*DISTUTILS_USE_SDK* and *MSSdk* must be both set. *MSSdk* indicates that the "
"current environment has been setup by the SDK's ``SetEnv.Cmd`` script, or "
"that the environment variables had been registered when the SDK was "
"installed; *DISTUTILS_USE_SDK* indicates that the distutils user has made an "
"explicit choice to override the compiler selection by :class:`MSVCCompiler`."
msgstr ""
":class:`MSVCCompiler` は大体正しいコンパイラ、リンカその他を選びます。この選"
"択を上書きするためには、環境変数 *DISTUTILS_USE_SDK* と *MSSdk* の両方を設定"
"する必要があります。 *MSSdk* は現在の環境をセットアップした ``SetEnv.Cmd`` ス"
"クリプト、もしくは環境変数がSDKをインストールした時に登録されたものであること"
"を示します。 *DISTUTILS_USE_SDK* はdistutilsのユーザーが明示的に :class:"
"`MSVCCompiler` が選んだコンパイラを上書きすることを示します。"

#: ../../distutils/apiref.rst:855
msgid ":mod:`distutils.bcppcompiler` --- Borland Compiler"
msgstr ":mod:`distutils.bcppcompiler` --- Borland コンパイラ"

#: ../../distutils/apiref.rst:860
msgid ""
"This module provides :class:`BorlandCCompiler`, a subclass of the abstract :"
"class:`CCompiler` class for the Borland C++ compiler."
msgstr ""
"このモジュールは :class:`BorlandCCompiler` クラスを提供します。抽象クラス :"
"class:`CCompiler` の具象クラスでBorland C++ コンパイラ向けです。"

#: ../../distutils/apiref.rst:865
msgid ":mod:`distutils.cygwincompiler` --- Cygwin Compiler"
msgstr ":mod:`distutils.cygwincompiler` --- Cygwin コンパイラ"

#: ../../distutils/apiref.rst:870
msgid ""
"This module provides the :class:`CygwinCCompiler` class, a subclass of :"
"class:`UnixCCompiler` that handles the Cygwin port of the GNU C compiler to "
"Windows.  It also contains the Mingw32CCompiler class which handles the "
"mingw32 port of GCC (same as cygwin in no-cygwin mode)."
msgstr ""
"このモジュールは :class:`CygwinCCompiler` クラスを提供します。 :class:"
"`UnixCCompiler` のサブクラスで Cygwinに移植されたWindows用の GNU C コンパイラ"
"向けです。さらに Mingw32CCompiler クラスを含んでおり、これは mingw32 向けに移"
"植された GCC (cygwinの no-cygwin モードと同じ)向けです。"

#: ../../distutils/apiref.rst:877
msgid ":mod:`distutils.archive_util` ---  Archiving utilities"
msgstr ":mod:`distutils.archive_util` --- アーカイブユーティリティ"

#: ../../distutils/apiref.rst:883
msgid ""
"This module provides a few functions for creating archive files, such as "
"tarballs or zipfiles."
msgstr ""
"このモジュールはアーカイブファイル(tarやzip)を作成する関数を提供します。"

#: ../../distutils/apiref.rst:889
msgid ""
"Create an archive file (eg. ``zip`` or ``tar``).  *base_name*  is the name "
"of the file to create, minus any format-specific extension;  *format* is the "
"archive format: one of ``zip``, ``tar``, ``gztar``, ``bztar``, ``xztar``, or "
"``ztar``. *root_dir* is a directory that will be the root directory of the "
"archive; ie. we typically ``chdir`` into *root_dir* before  creating the "
"archive.  *base_dir* is the directory where we start  archiving from; ie. "
"*base_dir* will be the common prefix of all files and directories in the "
"archive.  *root_dir* and *base_dir* both default to the current directory. "
"Returns the name of the archive file."
msgstr ""
"アーカイブファイル(例: ``zip`` や ``tar``)を作成します。 *base_name* は作成す"
"るファイル名からフォーマットの拡張子を除いたものです。 *format* はアーカイブ"
"のフォーマットで ``zip``, ``tar``, ``gztar``, ``bztar``, ``xztar``, ``ztar`` "
"のいずれかです。 *root_dir* はアーカイブのルートディレクトリになるディレクト"
"リです: つまりアーカイブを作成する前に *root_dir* に ``chdir`` します。 "
"*base_dir* はアーカイブの起点となるディレクトリです: つまり *base_dir* はアー"
"カイブ中の全ファイルおよびディレクトリの前につくディレクトリ名です。 "
"*root_dir* と *base_dir* はともにカレントディレクトリがデフォルト値です。アー"
"カイブファイル名を返します。"

#: ../../distutils/apiref.rst:899
msgid "Added support for the ``xztar`` format."
msgstr "``xztar`` 形式のサポートが追加されました。"

#: ../../distutils/apiref.rst:905
msgid ""
"'Create an (optional compressed) archive as a tar file from all files in and "
"under *base_dir*. *compress* must be ``'gzip'`` (the default), ``'bzip2'``, "
"``'xz'``, ``'compress'``, or ``None``.  For the ``'compress'`` method the "
"compression utility named by :program:`compress` must be on the default "
"program search path, so this is probably Unix-specific.  The output tar file "
"will be named :file:`base_dir.tar`, possibly plus the appropriate "
"compression extension (``.gz``, ``.bz2``, ``.xz`` or ``.Z``).  Return the "
"output filename."
msgstr ""
"*base_dir* 以下の全ファイルから、 tar ファイルを作成 (オプションで圧縮) しま"
"す。 *compress* は ``'gzip'`` (デフォルト), ``'xz'``, ``'compress'``, "
"``'bzip2'`` または ``None`` である必要があります。 ``'compress'`` メソッドに"
"ついては、 :program:`compress` で指定される圧縮ユーティリティにパスが通ってい"
"る必要があるので、おそらくこれは Unix だけで有効でしょう。出力 tar ファイル"
"は :file:`base_dir.tar` という名前になり、圧縮によって拡張子が付きます(``."
"gz``, ``.bz2``, ``.xz`` または ``.Z``)。出力ファイル名が返ります。"

#: ../../distutils/apiref.rst:914
msgid "Added support for the ``xz`` compression."
msgstr "``xz`` 形式のサポートが追加されました。"

#: ../../distutils/apiref.rst:920
msgid ""
"Create a zip file from all files in and under *base_dir*.  The output zip "
"file will be named *base_name* + :file:`.zip`.  Uses either the  :mod:"
"`zipfile` Python module (if available) or the InfoZIP :file:`zip`  utility "
"(if installed and found on the default search path).  If neither  tool is "
"available, raises :exc:`DistutilsExecError`.   Returns the name of the "
"output zip file."
msgstr ""
"*base_dir* 以下の全ファイルから、zipファイルを作成します。出力されるzipファイ"
"ルは *base_name* + :file:`.zip` という名前になります。 :mod:`zipfile`  Python"
"モジュール(利用可能なら)またはInfoZIP :file:`zip` ユーティリティ(インストール"
"されていてパスが通っているなら)を使います。もしどちらも利用できなければ、 :"
"exc:`DistutilsExecError` が起きます。出力zipファイル名が返ります。"

#: ../../distutils/apiref.rst:928
msgid ":mod:`distutils.dep_util` --- Dependency checking"
msgstr ":mod:`distutils.dep_util` --- 依存関係のチェック"

#: ../../distutils/apiref.rst:934
msgid ""
"This module provides functions for performing simple, timestamp-based "
"dependency of files and groups of files; also, functions based entirely  on "
"such timestamp dependency analysis."
msgstr ""
"このモジュールはシンプルなタイムスタンプを元にしたファイルやファイル群の依存"
"関係を処理する関数を提供します。さらに、それらの依存関係解析を元にした関数を"
"提供します。"

#: ../../distutils/apiref.rst:941
msgid ""
"Return true if *source* exists and is more recently modified than *target*, "
"or if *source* exists and *target* doesn't. Return false if both exist and "
"*target* is the same age or newer  than *source*. Raise :exc:"
"`DistutilsFileError` if *source* does not exist."
msgstr ""
"*source* が存在して、 *target* より最近変更されている、または *source* が存在"
"して、 *target* が存在していない場合は真を返します。両方が存在していて、 "
"*target* のほうが *source* より新しいか同じ場合には偽を返します。 *source* が"
"存在しない場合には :exc:`DistutilsFileError` を起こします。"

#: ../../distutils/apiref.rst:949
msgid ""
"Walk two filename lists in parallel, testing if each source is newer than "
"its corresponding target.  Return a pair of lists (*sources*, *targets*) "
"where source is newer than target, according to the semantics of :func:"
"`newer`."
msgstr ""
"ふたつのファイル名リストを並列に探索して、それぞれのソースが対応するターゲッ"
"トより新しいかをテストします。 :func:`newer` の意味でターゲットよりソースが新"
"しいペアのリスト(*sources*, *targets*)を返します。"

#: ../../distutils/apiref.rst:958
msgid ""
"Return true if *target* is out-of-date with respect to any file listed in "
"*sources*.  In other words, if *target* exists and is newer than every file "
"in *sources*, return false; otherwise return true. *missing* controls what "
"we do when a source file is missing; the default (``'error'``) is to blow up "
"with an :exc:`OSError` from  inside :func:`os.stat`; if it is ``'ignore'``, "
"we silently drop any missing source files; if it is ``'newer'``, any missing "
"source files make us assume that *target* is out-of-date (this is handy in "
"\"dry-run\" mode: it'll make you pretend to carry out commands that wouldn't "
"work because inputs are missing, but that doesn't matter because you're not "
"actually going to run the commands)."
msgstr ""
"*target* が、 *sources* にリストアップされたどれかのファイルより古ければ真を"
"返します。\n"
"言い換えれば、 *target* が存在して *sources* にある全てのファイルより新しいな"
"ら偽を返し、そうでなければ真を返します。\n"
"*missing* はソースファイルが存在しなかった時の振る舞いを決定します。デフォル"
"ト(``'error'``)は :func:`os.stat` 関数の内部で発生した :exc:`OSError` 例外を"
"投げます。\n"
"``'ignore'`` の場合は、単に存在しないソースファイルを無視します。\n"
"``'newer'`` の場合は、存在しないソースファイルについては *target* が古いとみ"
"なします(これは \"dry-run\" モードで便利です: 入力がないのでコマンドは実行で"
"きませんが実際に実行しようとしていないので問題になりません)。"

#: ../../distutils/apiref.rst:971
msgid ":mod:`distutils.dir_util` --- Directory tree operations"
msgstr ":mod:`distutils.dir_util` --- ディレクトリツリーの操作"

#: ../../distutils/apiref.rst:977
msgid ""
"This module provides functions for operating on directories and trees of "
"directories."
msgstr ""
"このモジュールはディレクトリとディレクトリツリーを操作する関数を提供します。"

#: ../../distutils/apiref.rst:983
msgid ""
"Create a directory and any missing ancestor directories.  If the directory "
"already exists (or if *name* is the empty string, which means the current "
"directory, which of course exists), then do nothing.  Raise :exc:"
"`DistutilsFileError` if unable to create some directory along the way (eg. "
"some sub-path exists, but is a file rather than a directory).  If *verbose* "
"is true, print a one-line summary of each mkdir to stdout.  Return the list "
"of directories actually created."
msgstr ""
"ディレクトリと、必要な親ディレクトリを作成します。もしディレクトリが既に存在"
"している(*name* が空文字列の場合、カレントディレクトリを示すのでもちろん存在"
"しています)場合、何もしません。ディレクトリを作成できなかった場合(例: ディレ"
"クトリと同じ名前のファイルが既に存在していた)、 :exc:`DistutilsFileError` を"
"起こします。もし *verbose* が真なら、それぞれのmkdirについて1行、標準出力に出"
"力します。実際に作成されたディレクトリのリストを返します。"

#: ../../distutils/apiref.rst:994
msgid ""
"Create all the empty directories under *base_dir* needed to put *files* "
"there. *base_dir* is just the name of a directory which doesn't necessarily "
"exist yet; *files* is a list of filenames to be interpreted relative to "
"*base_dir*. *base_dir* + the directory portion of every file in *files* will "
"be created if it doesn't already exist.  *mode*, *verbose* and *dry_run* "
"flags  are as for :func:`mkpath`."
msgstr ""
"*files* を置くために必要な空ディレクトリを *base_dir* 以下に作成します。 "
"*base_dir* ディレクトリは存在している必要はありません。 *files* はファイル名"
"のリストで *base_dir* からの相対パスとして扱われます。 *base_dir* + *files* "
"のディレクトリ部分が(既に存在していなければ)作成されます。 *mode*, *verbose* "
"と *dry_run* フラグは :func:`mkpath` と同じです。"

#: ../../distutils/apiref.rst:1004
msgid ""
"Copy an entire directory tree *src* to a new location *dst*.  Both *src* and "
"*dst* must be directory names.  If *src* is not a directory, raise :exc:"
"`DistutilsFileError`.  If *dst* does  not exist, it is created with :func:"
"`mkpath`.  The end result of the  copy is that every file in *src* is copied "
"to *dst*, and  directories under *src* are recursively copied to *dst*. "
"Return the list of files that were copied or might have been copied, using "
"their output name. The return value is unaffected by *update* or *dry_run*: "
"it is simply the list of all files under *src*, with the names changed to be "
"under *dst*."
msgstr ""
"*src* ディレクトリツリー全体を *dst* にコピーします。 *src* と *dst* はどちら"
"もディレクトリ名である必要があります。もし *src* がディレクトリでなければ、 :"
"exc:`DistutilsFileError` を起こします。もし *dst* が存在しなければ、 :func:"
"`mkpath` で作成されます。実行結果は、 *src* 以下の全てのファイルが *dst* にコ"
"ピーされ、 *src* 以下の全てのディレクトリが *dst* に再帰的にコピーされます。"
"コピーされた(またはされるはず)のファイルのリストを返します。返り値は "
"*update* または *dry_run* に影響されません: *src* 以下の全ファイルを単に "
"*dst* 以下に改名したリストが返されます。"

#: ../../distutils/apiref.rst:1014
msgid ""
"*preserve_mode* and *preserve_times* are the same as for :func:`distutils."
"file_util.copy_file`; note that they only apply to regular files, not to "
"directories.  If *preserve_symlinks* is true, symlinks will be copied as "
"symlinks (on platforms that support them!); otherwise (the default), the "
"destination of the symlink will be copied.  *update* and *verbose* are the "
"same as for :func:`copy_file`."
msgstr ""
"*preserve_mode* と *preserve_times* は :func:`distutils.file_util.copy_file` "
"のものと同じです; それらは通常のファイルにのみ適用され、ディレクトリには適用"
"されません。 *preserve_symlinks* が真の場合、シンボリックリンクはシンボリック"
"リンクとしてコピーされます (サポートするプラットフォームでは!); そうでない "
"(デフォルトの) 場合、シンボリックリンクの対象がコピーされます。 *update* と "
"*verbose* は :func:`copy_file` のものと同じです。"

#: ../../distutils/apiref.rst:1022
msgid ""
"Files in *src* that begin with :file:`.nfs` are skipped (more information on "
"these files is available in answer D2 of the `NFS FAQ page <http://nfs."
"sourceforge.net/#section_d>`_)."
msgstr ""
"*src* にあるファイルで :file:`.nfs` から始まるものは対象から外されます (これ"
"らのファイルについての情報は `NFS FAQ page <http://nfs.sourceforge.net/"
"#section_d>`_ の回答 D2 にあります) 。"

#: ../../distutils/apiref.rst:1026
msgid "NFS files are ignored."
msgstr "NFS ファイルは無視されます。"

#: ../../distutils/apiref.rst:1031
msgid ""
"Recursively remove *directory* and all files and directories underneath it. "
"Any errors are ignored (apart from being reported to ``sys.stdout`` if "
"*verbose* is true)."
msgstr ""
"再帰的に *directory* とその下の全ファイルを削除します。エラーは無視されます "
"(*verbose* が真の時は ``sys.stdout`` に出力されます)。"

#: ../../distutils/apiref.rst:1037
msgid ":mod:`distutils.file_util` --- Single file operations"
msgstr ":mod:`distutils.file_util` --- 1ファイルの操作"

#: ../../distutils/apiref.rst:1043
msgid ""
"This module contains some utility functions for operating on individual "
"files."
msgstr ""
"このモジュールはそれぞれのファイルを操作するユーティリティ関数を提供します。"

#: ../../distutils/apiref.rst:1048
msgid ""
"Copy file *src* to *dst*. If *dst* is a directory, then *src* is copied "
"there with the same name; otherwise, it must be a filename. (If the file "
"exists, it will be ruthlessly clobbered.) If *preserve_mode* is true (the "
"default), the file's mode (type and permission bits, or whatever is "
"analogous on the current platform) is copied. If *preserve_times* is true "
"(the default), the last-modified and last-access times are copied as well. "
"If *update* is true, *src* will only be copied if *dst* does not exist, or "
"if *dst* does exist but is older than *src*."
msgstr ""
"ファイル *src* を *dst* にコピーします。 *dst* がディレクトリの場合、 *src* "
"はそこへ同じ名前でコピーされます; そうでない場合は、ファイル名として扱われま"
"す。(もしファイルが存在するなら、容赦無く上書きされます。) *preserve_mode* "
"が (デフォルト値の) 真の場合、ファイルのモード (タイプやパーミッション、その"
"他プラットフォームがサポートするもの) もコピーされます。 *preserve_times* が "
"(デフォルト値の) 真の場合、最終更新、最終アクセス時刻もコピーされます。"
"*update* が真の場合、 *src* は *dst* が存在しない場合か、*dst* が存在して "
"*src* より古い場合にだけコピーします。"

#: ../../distutils/apiref.rst:1057
msgid ""
"*link* allows you to make hard links (using :func:`os.link`) or symbolic "
"links (using :func:`os.symlink`) instead of copying: set it to ``'hard'`` or "
"``'sym'``; if it is ``None`` (the default), files are copied. Don't set "
"*link* on systems that don't support it: :func:`copy_file` doesn't check if "
"hard or symbolic linking is available.  It uses :func:`_copy_file_contents` "
"to copy file contents."
msgstr ""
"*link* は値を ``'hard'`` または ``'sym'`` に設定することでコピーのかわりに"
"ハードリンク(:func:`os.link` を使います)またはシンボリックリンク(:func:`os."
"symlink` を使います)を許可します。 ``None``  (デフォルト)の時には、ファイルは"
"コピーされます。 *link* をサポートしていないシステムで有効にしないでくださ"
"い。 :func:`copy_file` はハードリンク、シンボリックリンクが可能かチェックして"
"いません。ファイルの内容をコピーするために :func:`_copy_file_contents` を利用"
"しています。"

#: ../../distutils/apiref.rst:1064
msgid ""
"Return a tuple ``(dest_name, copied)``: *dest_name* is the actual  name of "
"the output file, and *copied* is true if the file was copied  (or would have "
"been copied, if *dry_run* true)."
msgstr ""
"``(dest_name, copied)`` のタプルを返します: *dest_name* は出力ファイルの実際"
"の名前、 *copied* はファイルがコピーされた(*dry_run* が真の時にはコピーされる"
"ことになった)場合には真です。"

#: ../../distutils/apiref.rst:1078
msgid ""
"Move file *src* to *dst*. If *dst* is a directory, the file will be moved "
"into it with the same name; otherwise, *src* is just renamed to *dst*.  "
"Returns the new full name of the file."
msgstr ""
"ファイル *src* を *dst* に移動します。もし *dst* がディレクトリなら、ファイル"
"はそのディレクトリに同じ名前で移動されます。そうでなければ、 *src* は *dst* "
"に単にリネームされます。新しいファイルの名前を返します。"

#: ../../distutils/apiref.rst:1084
msgid ""
"Handles cross-device moves on Unix using :func:`copy_file`.  What about "
"other systems?"
msgstr ""
"Unix ではデバイスをまたがる移動は :func:`copy_file` を利用して扱っています。"
"他のシステムではどうでしょう？"

#: ../../distutils/apiref.rst:1090
msgid ""
"Create a file called *filename* and write *contents* (a sequence of strings "
"without line terminators) to it."
msgstr ""
"*filename* を作成し、 *contents* (行末文字がない文字列のシーケンス)を書き込み"
"ます。"

#: ../../distutils/apiref.rst:1095
msgid ":mod:`distutils.util` --- Miscellaneous other utility functions"
msgstr ":mod:`distutils.util` --- その他のユーティリティ関数"

#: ../../distutils/apiref.rst:1101
msgid ""
"This module contains other assorted bits and pieces that don't fit into  any "
"other utility module."
msgstr ""
"このモジュールは他のユーティリティモジュールにあわないものを提供しています。"

#: ../../distutils/apiref.rst:1107
msgid ""
"Return a string that identifies the current platform.  This is used mainly "
"to distinguish platform-specific build directories and platform-specific "
"built distributions.  Typically includes the OS name and version and the "
"architecture (as supplied by 'os.uname()'), although the exact information "
"included depends on the OS; e.g., on Linux, the kernel version isn't "
"particularly important."
msgstr ""
"現在のプラットフォームを示す文字列を返します。\n"
"これはプラットフォーム依存のビルドディレクトリやプラットフォーム依存の配布物"
"を区別するために使われます。\n"
"典型的には、('os.uname()' のように) OSの名前とバージョン、アーキテクチャを含"
"みますが、厳密にはOSに依存します。\n"
"例えば Linux ではカーネルのバージョンはそれほど重要ではありません。"

#: ../../distutils/apiref.rst:1114
msgid "Examples of returned values:"
msgstr "返される値の例:"

#: ../../distutils/apiref.rst:1116
msgid "``linux-i586``"
msgstr "``linux-i586``"

#: ../../distutils/apiref.rst:1117
msgid "``linux-alpha``"
msgstr "``linux-alpha``"

#: ../../distutils/apiref.rst:1118
msgid "``solaris-2.6-sun4u``"
msgstr "``solaris-2.6-sun4u``"

#: ../../distutils/apiref.rst:1120
msgid "For non-POSIX platforms, currently just returns ``sys.platform``."
msgstr ""
"POSIX でないプラットフォームでは、今のところ単に ``sys.platform`` が返されま"
"す。"

#: ../../distutils/apiref.rst:1122
msgid ""
"For macOS systems the OS version reflects the minimal version on which "
"binaries will run (that is, the value of ``MACOSX_DEPLOYMENT_TARGET`` during "
"the build of Python), not the OS version of the current system."
msgstr ""
"macOS システムでは、 OS バージョンは、現在のOSバージョンではなく、実行するバ"
"イナリの最小バージョンを表しています。 (これは、Python をビルドするときの "
"``MACOSX_DEPLOYMENT_TARGET`` の値です。)"

#: ../../distutils/apiref.rst:1126
msgid ""
"For universal binary builds on macOS the architecture value reflects the "
"universal binary status instead of the architecture of the current "
"processor. For 32-bit universal binaries the architecture is ``fat``, for 64-"
"bit universal binaries the architecture is ``fat64``, and for 4-way "
"universal binaries the architecture is ``universal``. Starting from Python "
"2.7 and Python 3.2 the architecture ``fat3`` is used for a 3-way universal "
"build (ppc, i386, x86_64) and ``intel`` is used for a universal build with "
"the i386 and x86_64 architectures"
msgstr ""
"macOS のユニバーサルバイナリビルドでは、アーキテクチャの値は現在のプロセッサ"
"ではなく、ユニバーサルバイナリの状態を表しています。32bit ユニバーサルバイナ"
"リではアーキテクチャは ``fat`` で、64bit ユニバーサルバイナリではアーキテク"
"チャは ``fat64`` で、4-way ユニバーサルバイナリではアーキテクチャは "
"``universal`` になります。Python 2.7 と Python 3.2 から 3-way ユニバーサルバ"
"イナリ (ppc, i386, x86_64) には ``fat3`` が i386 と x86_64 ユニバーサルバイナ"
"リには ``intel`` が使われるようになりました"

#: ../../distutils/apiref.rst:1135
msgid "Examples of returned values on macOS:"
msgstr "macOS で返される値の例:"

#: ../../distutils/apiref.rst:1137
msgid "``macosx-10.3-ppc``"
msgstr "``macosx-10.3-ppc``"

#: ../../distutils/apiref.rst:1139
msgid "``macosx-10.3-fat``"
msgstr "``macosx-10.3-fat``"

#: ../../distutils/apiref.rst:1141
msgid "``macosx-10.5-universal``"
msgstr "``macosx-10.5-universal``"

#: ../../distutils/apiref.rst:1143
msgid "``macosx-10.6-intel``"
msgstr "``macosx-10.6-intel``"

#: ../../distutils/apiref.rst:1145
msgid ""
"For AIX, Python 3.9 and later return a string starting with \"aix\", "
"followed by additional fields (separated by ``'-'``) that represent the "
"combined values of AIX Version, Release and Technology Level (first field), "
"Build Date (second field), and bit-size (third field). Python 3.8 and "
"earlier returned only a single additional field with the AIX Version and "
"Release."
msgstr ""
"AIX の場合、 Python 3.9 以降のバージョンでは \"aix\" に続く追加のフィールド "
"(``'-'`` で連結されます) として AIX のバージョン、リリースおよびテクノロ"
"ジー・レベル (第1フィールド)、ビルド作成日 (第2フィールド)、ビットサイズ (第3"
"フィールド) を含む文字列を返します。 Python 3.8 以前のバージョンでは追加の"
"フィールドとして AIX のバージョンとリリース の1つだけを含む文字列を返していま"
"した。"

#: ../../distutils/apiref.rst:1151
msgid "Examples of returned values on AIX:"
msgstr "AIX における戻り値の例:"

#: ../../distutils/apiref.rst:1153
msgid ""
"``aix-5307-0747-32`` # 32-bit build on AIX ``oslevel -s``: 5300-07-00-0000"
msgstr ""
"``aix-5307-0747-32`` # AIX ``oslevel -s``: 5300-07-00-0000 の32ビットビルド"

#: ../../distutils/apiref.rst:1155
msgid ""
"``aix-7105-1731-64`` # 64-bit build on AIX ``oslevel -s``: 7100-05-01-1731"
msgstr ""
"``aix-7105-1731-64`` # AIX ``oslevel -s``: 7100-05-01-1731 の64ビットビルド"

#: ../../distutils/apiref.rst:1157
msgid "``aix-7.2``          # Legacy form reported in Python 3.8 and earlier"
msgstr "``aix-7.2``          # Python 3.8 以前のレガシー形式"

#: ../../distutils/apiref.rst:1159
msgid ""
"The AIX platform string format now also includes the technology level, build "
"date, and ABI bit-size."
msgstr ""
"AIX プラットフォームの文字列形式はバージョンとリリース情報に加えて、テクノロ"
"ジー・レベル、ビルド作成日、および ABI のビットサイズを含むようになりました。"

#: ../../distutils/apiref.rst:1166
msgid ""
"Return 'pathname' as a name that will work on the native filesystem, i.e. "
"split it on '/' and put it back together again using the current directory "
"separator. Needed because filenames in the setup script are always supplied "
"in Unix style, and have to be converted to the local convention before we "
"can actually use them in the filesystem.  Raises :exc:`ValueError` on non-"
"Unix-ish systems if *pathname* either  starts or ends with a slash."
msgstr ""
"'pathname' をファイルシステムで利用できる名前にして返します。すなわち、'/'で"
"分割し、現在のディレクトリセパレータで接続しなおします。セットアップスクリプ"
"ト中のファイル名はUnixスタイルで提供され、実際に利用する前に変換する必要があ"
"るため、この関数が必要になります。もし *pathname* の最初または最後がスラッ"
"シュの場合、Unix的でないシステムでは :exc:`ValueError` が起きます。"

#: ../../distutils/apiref.rst:1176
msgid ""
"Return *pathname* with *new_root* prepended.  If *pathname* is relative, "
"this is equivalent to ``os.path.join(new_root,pathname)`` Otherwise, it "
"requires making *pathname* relative and then joining the two, which is "
"tricky on DOS/Windows."
msgstr ""
"*pathname* の前に *new_root* を追加したものを返します。もし *pathname* が相対"
"パスなら、 ``os.path.join(new_root,pathname)`` と等価です。そうでなければ、 "
"*pathname* を相対パスに変換したあと接続します。これはDOS/Windows ではトリッ"
"キーな作業になります。"

#: ../../distutils/apiref.rst:1183
msgid ""
"Ensure that 'os.environ' has all the environment variables we guarantee that "
"users can use in config files, command-line options, etc.  Currently this "
"includes:"
msgstr ""
"'os.environ'に、ユーザがconfigファイル、コマンドラインオプションなどで利用で"
"きることを保証している環境変数があることを確認します。現在は以下のものが含ま"
"れています:"

#: ../../distutils/apiref.rst:1187
msgid ":envvar:`HOME` - user's home directory (Unix only)"
msgstr ":envvar:`HOME` - ユーザのホームディレクトリ (Unix のみ)"

#: ../../distutils/apiref.rst:1188
msgid ""
":envvar:`PLAT` - description of the current platform, including hardware and "
"OS (see :func:`get_platform`)"
msgstr ""
":envvar:`PLAT` - ハードウェアとOSを含む現在のプラットフォームの説明。 (:func:"
"`get_platform` を参照)"

#: ../../distutils/apiref.rst:1194
msgid ""
"Perform shell/Perl-style variable substitution on *s*.  Every occurrence of "
"``$`` followed by a name is considered a variable, and variable is "
"substituted by the value found in the *local_vars* dictionary, or in ``os."
"environ`` if it's not in *local_vars*. *os.environ* is first checked/"
"augmented to guarantee that it contains certain values: see :func:"
"`check_environ`.  Raise :exc:`ValueError` for any variables not found in "
"either *local_vars* or ``os.environ``."
msgstr ""
"shell/Perlスタイルの変数置換を *s* について行います。全ての ``$`` に名前が続"
"いたものは変数とみなされ、辞書 *local_vars* でみつかった値に置換されます。 "
"*local_vars* で見つからなかった場合には ``os.environ`` で置換されます。 *os."
"environ* は最初にある値を含んでいることをチェックされます: :func:"
"`check_environ` を参照。 *local_vars* or ``os.environ`` のどちらにも値が見つ"
"からなかった場合、 :exc:`ValueError` を起こします。"

#: ../../distutils/apiref.rst:1201
msgid ""
"Note that this is not a full-fledged string interpolation function. A valid "
"``$variable`` can consist only of upper and lower case letters, numbers and "
"an underscore. No { } or ( ) style quoting is available."
msgstr ""
"これは完全な文字列挿入関数ではないことに注意してください。 ``$variable`` の名"
"前には大小英字、数字、アンダーバーだけを含むことができます。 { } や ( ) を"
"使った引用形式は利用できません。"

#: ../../distutils/apiref.rst:1208
msgid ""
"Split a string up according to Unix shell-like rules for quotes and "
"backslashes. In short: words are delimited by spaces, as long as those "
"spaces are not escaped by a backslash, or inside a quoted string. Single and "
"double quotes are equivalent, and the quote characters can be backslash-"
"escaped.  The backslash is stripped from any two-character escape sequence, "
"leaving only the escaped character.  The quote characters are stripped from "
"any quoted string.  Returns a list of words."
msgstr ""
"文字列をUnixのシェルのようなルール(引用符やバックスラッシュの扱い)で分割しま"
"す。つまり、バックスラッシュでエスケープされるか、引用符で囲まれていなければ"
"各語はスペースで区切られます。一重引用符と二重引用符は同じ意味です。引用符も"
"バックスラッシュでエスケープできます。 2文字でのエスケープシーケンスに使われ"
"ているバックスラッシュは削除され、エスケープされていた文字だけが残ります。引"
"用符は文字列から削除されます。語のリストが返ります。"

#: ../../distutils/apiref.rst:1221
msgid ""
"Perform some action that affects the outside world (for instance, writing to "
"the filesystem).  Such actions are special because they are disabled by the "
"*dry_run* flag.  This method takes  care of all that bureaucracy for you; "
"all you have to do is supply the function to call and an argument tuple for "
"it (to embody the \"external action\" being performed), and an optional "
"message to print."
msgstr ""
"外部に影響するいくつかのアクション(たとえば、ファイルシステムへの書き込み)を"
"実行します。そのようなアクションは *dry_run* フラグで無効にする必要があるので"
"特別です。この関数はその繁雑な処理を行います。関数と引数のタプル、(実行する"
"「アクション」をはっきりさせるための)表示に使われる任意のメッセージを渡してく"
"ださい。"

#: ../../distutils/apiref.rst:1230
msgid "Convert a string representation of truth to true (1) or false (0)."
msgstr "真偽値をあらわす文字列を真(1)または偽(0)に変換します。"

#: ../../distutils/apiref.rst:1232
msgid ""
"True values are ``y``, ``yes``, ``t``, ``true``, ``on``  and ``1``; false "
"values are ``n``, ``no``, ``f``, ``false``,  ``off`` and ``0``.  Raises :exc:"
"`ValueError` if *val*  is anything else."
msgstr ""
"真の値は ``y``, ``yes``, ``t``, ``true``, ``on`` そして ``1`` です。偽の値は "
"``n``, ``no``, ``f``, ``false``,  ``off`` そして ``0`` です。 *val* が上のど"
"れでもない時は :exc:`ValueError` を起こします。"

#: ../../distutils/apiref.rst:1239
msgid ""
"Byte-compile a collection of Python source files to :file:`.pyc` files in a :"
"file:`__pycache__` subdirectory (see :pep:`3147` and :pep:`488`). *py_files* "
"is a list of files to compile; any files that don't end in :file:`.py` are "
"silently skipped.  *optimize* must be one of the following:"
msgstr ""
"Python ソースファイル群をバイトコンパイルして :file:`__pycache__` サブディレ"
"クトリ内に :file:`.pyc` ファイルを出力します。(:pep:`3147` と :pep:`488` を参"
"照) *py_files* はコンパイルするファイルのリストです; :file:`.py` で終わらない"
"ファイルは単にスキップされます。 *optimize* は次のうちの 1 つでなければなりま"
"せん:"

#: ../../distutils/apiref.rst:1244
msgid "``0`` - don't optimize"
msgstr "``0`` - 最適化しない"

#: ../../distutils/apiref.rst:1245
msgid "``1`` - normal optimization (like ``python -O``)"
msgstr "``1`` - 通常の最適化 (``python -O`` のように)"

#: ../../distutils/apiref.rst:1246
msgid "``2`` - extra optimization (like ``python -OO``)"
msgstr "``2`` - さらに最適化 (``python -OO`` のように)"

#: ../../distutils/apiref.rst:1248
msgid "If *force* is true, all files are recompiled regardless of timestamps."
msgstr ""
"もし *force* が真なら、全てのファイルがタイムスタンプに関係なく再コンパイルさ"
"れます。"

#: ../../distutils/apiref.rst:1250
msgid ""
"The source filename encoded in each :term:`bytecode` file defaults to the "
"filenames listed in *py_files*; you can modify these with *prefix* and "
"*basedir*. *prefix* is a string that will be stripped off of each source "
"filename, and *base_dir* is a directory name that will be prepended (after "
"*prefix* is stripped).  You can supply either or both (or neither) of "
"*prefix* and *base_dir*, as you wish."
msgstr ""
":term:`バイトコード <bytecode>` ファイルにエンコードされるソースファイル名"
"は、デフォルトでは *py_files* が使われます。これを *prefix* と *basedir* で変"
"更することができます。 *prefix* はそれぞれのソースファイル名から削除される文"
"字列で、 *base_dir* は(*prefix* を削除したあと)先頭に追加されるディレクトリ名"
"です。任意に *prefix* と *base_dir* のどちらか、両方を与える(与えない)ことが"
"できます。"

#: ../../distutils/apiref.rst:1257
msgid ""
"If *dry_run* is true, doesn't actually do anything that would affect the "
"filesystem."
msgstr ""
"もし *dry_run* が真なら、ファイルシステムに影響することは何もされません。"

#: ../../distutils/apiref.rst:1260
msgid ""
"Byte-compilation is either done directly in this interpreter process with "
"the standard :mod:`py_compile` module, or indirectly by writing a temporary "
"script and executing it.  Normally, you should let :func:`byte_compile` "
"figure out to use direct compilation or not (see the source for details).  "
"The *direct* flag is used by the script generated in indirect mode; unless "
"you know what you're doing, leave it set to ``None``."
msgstr ""
"バイトコンパイルは現在のインタプリタプロセスによって標準の :mod:`py_compile` "
"モジュールを使って直接行われるか、テンポラリスクリプトを書いて間接的に行われ"
"ます。通常は :func:`byte_compile` に直接かそうでないかをまかせます (詳細につ"
"いてはソースをごらんください)。 *direct* フラグは関節モードで作成されたスクリ"
"プトで使用されます。何をやっているか理解していない時は ``None`` のままにして"
"おいてください。"

#: ../../distutils/apiref.rst:1267
msgid ""
"Create ``.pyc`` files with an :func:`import magic tag <imp.get_tag>` in "
"their name, in a :file:`__pycache__` subdirectory instead of files without "
"tag in the current directory."
msgstr ""
"カレントディレクトリにタグなしでファイルを作る代わりに、 :file:`__pycache__` "
"サブディレクトリに :func:`import magic tag <imp.get_tag>` を使ってその名前で "
"``.pyc`` ファイルを作成します。"

#: ../../distutils/apiref.rst:1272
msgid "Create ``.pyc`` files according to :pep:`488`."
msgstr ":pep:`488` に従って ``.pyc`` ファイルを作成します。"

#: ../../distutils/apiref.rst:1278
msgid ""
"Return a version of *header* escaped for inclusion in an :rfc:`822` header, "
"by ensuring there are 8 spaces space after each newline. Note that it does "
"no other modification of the string."
msgstr ""
":rfc:`822` ヘッダに含められるよう加工した *header* を返します。改行のあとには"
"8つのスペースが追加されます。この関数は文字列に他の変更はしません。"

#: ../../distutils/apiref.rst:1288
msgid ":mod:`distutils.dist` --- The Distribution class"
msgstr ":mod:`distutils.dist` --- Distribution クラス"

#: ../../distutils/apiref.rst:1295
msgid ""
"This module provides the :class:`~distutils.core.Distribution` class, which "
"represents the module distribution being built/installed/distributed."
msgstr ""
"このモジュールは、ビルド/インストール/配布するモジュールディストリビューショ"
"ンを表す :class:`~distutils.core.Distribution` クラスを提供します。"

#: ../../distutils/apiref.rst:1300
msgid ":mod:`distutils.extension` --- The Extension class"
msgstr ":mod:`distutils.extension` --- Extension クラス"

#: ../../distutils/apiref.rst:1307
msgid ""
"This module provides the :class:`Extension` class, used to describe C/C++ "
"extension modules in setup scripts."
msgstr ""
"このモジュールは :class:`Extension` クラスを提供します。 C/C++拡張モジュール"
"をセットアップスクリプトで表すために使われます。"

#: ../../distutils/apiref.rst:1315
msgid ":mod:`distutils.debug` --- Distutils debug mode"
msgstr ":mod:`distutils.debug` --- Distutils デバッグモード"

#: ../../distutils/apiref.rst:1321
msgid "This module provides the DEBUG flag."
msgstr "このモジュールはDEBUGフラグを提供します。"

#: ../../distutils/apiref.rst:1325
msgid ":mod:`distutils.errors` --- Distutils exceptions"
msgstr ":mod:`distutils.errors` --- Distutils 例外"

#: ../../distutils/apiref.rst:1331
msgid ""
"Provides exceptions used by the Distutils modules.  Note that Distutils "
"modules may raise standard exceptions; in particular, SystemExit is usually "
"raised for errors that are obviously the end-user's fault (eg. bad command-"
"line arguments)."
msgstr ""
"distutilsのモジュールで使用される例外を提供します。 distutilsのモジュールは標"
"準的な例外を起こします。特に、 SystemExit はエンドユーザによる失敗(コマンドラ"
"イン引数の間違いなど)で起きます。"

#: ../../distutils/apiref.rst:1335
msgid ""
"This module is safe to use in ``from ... import *`` mode; it only exports "
"symbols whose names start with ``Distutils`` and end with ``Error``."
msgstr ""
"このモジュールは ``from ... import *`` で安全に使用することができます。このモ"
"ジュールは ``Distutils`` ではじまり、 ``Error`` で終わるシンボルしかexportし"
"ません。"

#: ../../distutils/apiref.rst:1340
msgid ""
":mod:`distutils.fancy_getopt` --- Wrapper around the standard getopt module"
msgstr ":mod:`distutils.fancy_getopt` --- 標準 getopt モジュールのラッパ"

#: ../../distutils/apiref.rst:1346
msgid ""
"This module provides a wrapper around the standard :mod:`getopt`  module "
"that provides the following additional features:"
msgstr ""
"このモジュールは以下の機能を標準の :mod:`getopt` モジュールに追加するラッパを"
"提供します:"

#: ../../distutils/apiref.rst:1349
msgid "short and long options are tied together"
msgstr "短いオプションと長いオプションを関連づけます"

#: ../../distutils/apiref.rst:1351
msgid ""
"options have help strings, so :func:`fancy_getopt` could potentially  create "
"a complete usage summary"
msgstr ""
"オプションはヘルプ文字列なので、 :func:`fancy_getopt` に完全な利用方法サマリ"
"を作らせることもできます"

#: ../../distutils/apiref.rst:1354
msgid "options set attributes of a passed-in object"
msgstr "オプションは渡されたオブジェクトの属性を設定します。"

#: ../../distutils/apiref.rst:1356
msgid ""
"boolean options can have \"negative aliases\" --- eg. if :option:`!--quiet` "
"is the \"negative alias\" of :option:`!--verbose`, then :option:`!--quiet` "
"on the command line sets *verbose* to false."
msgstr ""
"真偽値をとるオプションは \"負のエイリアス\" を持ちます。--- たとえば :option:"
"`!--quiet` の \"負のエイリアス\" が :option:`!--verbose` の場合、コマンドライ"
"ンで :option:`!--quiet` を指定すると *verbose* は偽になります。"

#: ../../distutils/apiref.rst:1362
msgid ""
"Wrapper function. *options* is a list of ``(long_option, short_option, "
"help_string)`` 3-tuples as described in the constructor for :class:"
"`FancyGetopt`. *negative_opt* should be a dictionary mapping option names to "
"option names, both the key and value should be in the *options* list. "
"*object* is an object which will be used to store values (see the :meth:"
"`getopt` method of the :class:`FancyGetopt` class). *args* is the argument "
"list. Will use ``sys.argv[1:]`` if you  pass ``None`` as *args*."
msgstr ""
"ラッパ関数。 *options* は :class:`FancyGetopt` のコンストラクタで説明されてい"
"る ``(long_option, short_option, help_string)`` の3要素タプルのリストです。 "
"*negative_opt* はオプション名からオプション名のマッピングになっている辞書で、"
"キー、値のどちらも *options* リストに含まれている必要があります。 *object* は"
"値を保存するオブジェクト(:class:`FancyGetopt` クラスの :meth:`getopt` メソッ"
"ドを参照してください)です。 *args* は引数のリストです。 *args* として "
"``None`` を渡すと、 ``sys.argv[1:]`` が使われます。"

#: ../../distutils/apiref.rst:1373
msgid "Wraps *text* to less than *width* wide."
msgstr "*text* を *width* 以下の幅で折り返します。"

#: ../../distutils/apiref.rst:1378
msgid ""
"The option_table is a list of 3-tuples: ``(long_option, short_option, "
"help_string)``"
msgstr ""
"option_table は 3つ組タプルのリストです。 ``(long_option, short_option, "
"help_string)``"

#: ../../distutils/apiref.rst:1381
msgid ""
"If an option takes an argument, its *long_option* should have ``'='`` "
"appended; *short_option* should just be a single character, no ``':'`` in "
"any case. *short_option* should be ``None`` if a *long_option*  doesn't have "
"a corresponding *short_option*. All option tuples must have long options."
msgstr ""
"もしオプションが引数を持つなら、 *long_option* に ``'='`` を追加する必要があ"
"ります。 *short_option* は一文字のみで、 ``':'`` はどの場合にも不要です。 "
"*long_option* に対応する *short_option* がない場合、 *short_option* は "
"``None`` にしてください。全てのオプションタプルは長い形式のオプションを持つ必"
"要があります。"

#: ../../distutils/apiref.rst:1386
msgid "The :class:`FancyGetopt` class provides the following methods:"
msgstr ":class:`FancyGetopt` クラスは以下のメソッドを提供します:"

#: ../../distutils/apiref.rst:1391
msgid "Parse command-line options in args. Store as attributes on *object*."
msgstr ""
"argsのコマンドラインオプションを解析します。 *object* に属性として保存しま"
"す。"

#: ../../distutils/apiref.rst:1393
msgid ""
"If *args* is ``None`` or not supplied, uses ``sys.argv[1:]``.  If *object* "
"is ``None`` or not supplied, creates a new :class:`OptionDummy` instance, "
"stores option values there, and returns a tuple ``(args, object)``.  If "
"*object* is supplied, it is modified in place and :func:`getopt` just "
"returns *args*; in both cases, the returned *args* is a modified copy of the "
"passed-in *args* list, which is left untouched."
msgstr ""
"もし *args* が ``None`` もしくは与えられない場合には、 ``sys.argv[1:]`` を使"
"います。もし *object* が ``None`` もしくは与えられない場合には、新しく :"
"class:`OptionDummy` インスタンスを作成し、オプションの値を保存したのち "
"``(args, object)`` のタプルを返します。もし *object* が提供されていれば、その"
"場で変更され、 :func:`getopt` は *args* のみを返します。どちらのケースでも、"
"返された *args* は渡された *args* リスト(これは変更されません)の変更されたコ"
"ピーです。"

#: ../../distutils/apiref.rst:1405
msgid ""
"Returns the list of ``(option, value)`` tuples processed by the previous run "
"of :meth:`getopt`  Raises :exc:`RuntimeError` if :meth:`getopt` hasn't been "
"called yet."
msgstr ""
"直前に実行された :meth:`getopt` が処理した ``(option, value)`` タプルのリスト"
"を返します。 :meth:`getopt` がまだ呼ばれていない場合には :exc:`RuntimeError` "
"を起こします。"

#: ../../distutils/apiref.rst:1412
msgid ""
"Generate help text (a list of strings, one per suggested line of output) "
"from the option table for this :class:`FancyGetopt` object."
msgstr ""
"この :class:`FancyGetopt` オブジェクトのオプションテーブルからヘルプテキスト"
"(出力の一行に対応する文字列のリスト)を生成します。"

#: ../../distutils/apiref.rst:1415
msgid "If supplied, prints the supplied *header* at the top of the help."
msgstr "もし与えられていれば、 *header* をヘルプの先頭に出力します。"

#: ../../distutils/apiref.rst:1419
msgid ":mod:`distutils.filelist` --- The FileList class"
msgstr ":mod:`distutils.filelist` --- FileList クラス"

#: ../../distutils/apiref.rst:1426
msgid ""
"This module provides the :class:`FileList` class, used for poking about the "
"filesystem and building lists of files."
msgstr ""
"このモジュールはファイルシステムを見て、ファイルのリストを構築するために使わ"
"れる :class:`FileList` クラスを提供します。"

#: ../../distutils/apiref.rst:1431
msgid ":mod:`distutils.log` --- Simple :pep:`282`-style logging"
msgstr ":mod:`distutils.log` --- シンプルな :pep:`282` 形式のロギング"

#: ../../distutils/apiref.rst:1438
msgid ":mod:`distutils.spawn` --- Spawn a sub-process"
msgstr ":mod:`distutils.spawn` --- サブプロセスの生成"

#: ../../distutils/apiref.rst:1444
msgid ""
"This module provides the :func:`spawn` function, a front-end to  various "
"platform-specific functions for launching another program in a  sub-process. "
"Also provides :func:`find_executable` to search the path for a given "
"executable name."
msgstr ""
"このモジュールは :func:`spawn` 関数を提供します。これは様々なプラットフォーム"
"依存の他プログラムをサブプロセスとして実行する関数に対するフロントエンドに"
"なっています。与えられた実行ファイルの名前からパスを探索する :func:"
"`find_executable` 関数も提供しています。"

#: ../../distutils/apiref.rst:1451
msgid ":mod:`distutils.sysconfig` --- System configuration information"
msgstr ":mod:`distutils.sysconfig` --- システム設定情報"

#: ../../distutils/apiref.rst:1455
msgid ":mod:`distutils.sysconfig` has been merged into :mod:`sysconfig`."
msgstr ""

#: ../../distutils/apiref.rst:1462
msgid ""
"The :mod:`distutils.sysconfig` module provides access to Python's low-level "
"configuration information.  The specific configuration variables available "
"depend heavily on the platform and configuration. The specific variables "
"depend on the build process for the specific version of Python being run; "
"the variables are those found in the :file:`Makefile` and configuration "
"header that are installed with Python on Unix systems.  The configuration "
"header is called :file:`pyconfig.h` for Python versions starting with 2.2, "
"and :file:`config.h` for earlier versions of Python."
msgstr ""
":mod:`distutils.sysconfig` モジュールでは、 Python の低水準の設定情報へのアク"
"セス手段を提供しています。アクセスできる設定情報変数は、プラットフォームと設"
"定自体に大きく左右されます。また、特定の変数は、使っているバージョンの "
"Python のビルドプロセスに左右されます; こうした変数は、 Unix システムでは、 :"
"file:`Makefile` や Python と一緒にインストールされる設定ヘッダから探し出され"
"ます。設定ファイルのヘッダは、2.2 以降のバージョンでは :file:`pyconfig.h` 、"
"それ以前のバージョンでは :file:`config.h` です。"

#: ../../distutils/apiref.rst:1471
msgid ""
"Some additional functions are provided which perform some useful "
"manipulations for other parts of the :mod:`distutils` package."
msgstr ""
"他にも、 :mod:`distutils` パッケージの別の部分を操作する上で便利な関数がいく"
"つか提供されています。"

#: ../../distutils/apiref.rst:1477
msgid "The result of ``os.path.normpath(sys.prefix)``."
msgstr "``os.path.normpath(sys.prefix)`` の返り値です。"

#: ../../distutils/apiref.rst:1482
msgid "The result of ``os.path.normpath(sys.exec_prefix)``."
msgstr "``os.path.normpath(sys.exec_prefix)`` の返り値です。"

#: ../../distutils/apiref.rst:1487
msgid ""
"Return the value of a single variable.  This is equivalent to "
"``get_config_vars().get(name)``."
msgstr ""
"ある一つの設定変数に対する値を返します。 ``get_config_vars().get(name)`` と同"
"じです。"

#: ../../distutils/apiref.rst:1493
msgid ""
"Return a set of variable definitions.  If there are no arguments, this "
"returns a dictionary mapping names of configuration variables to values.  If "
"arguments are provided, they should be strings, and the return value will be "
"a sequence giving the associated values. If a given name does not have a "
"corresponding value, ``None`` will be included for that variable."
msgstr ""
"定義されている変数のセットを返します。引数を指定しなければ、設定変数名を変数"
"の値に対応付けるマップ型を返します。引数を指定する場合、引数の各値は文字列で"
"なければならず、戻り値は引数に関連付けられた各設定変数の値からなるシーケンス"
"になります。引数に指定した名前の設定変数に値がない場合、その変数に対する戻り"
"値には ``None`` が入ります。"

#: ../../distutils/apiref.rst:1502
msgid ""
"Return the full path name of the configuration header.  For Unix, this will "
"be the header generated by the :program:`configure` script; for other "
"platforms the header will have been supplied directly by the Python source "
"distribution.  The file is a platform-specific text file."
msgstr ""
"設定ヘッダのフルパス名を返します。 Unixの場合、このヘッダファイルは :program:"
"`configure` スクリプトによって生成されるヘッダファイル名です; 他のプラット"
"フォームでは、ヘッダは Python ソース配布物中で直接与えられています。ファイル"
"はプラットフォーム固有のテキストファイルです。"

#: ../../distutils/apiref.rst:1510
msgid ""
"Return the full path name of the :file:`Makefile` used to build Python.  For "
"Unix, this will be a file generated by the :program:`configure` script; the "
"meaning for other platforms will vary.  The file is a platform-specific text "
"file, if it exists. This function is only useful on POSIX platforms."
msgstr ""
"Python をビルドする際に用いる :file:`Makefile` のフルパスを返します。 Unixの"
"場合、このファイルは :program:`configure` スクリプトによって生成されます; 他"
"のプラットフォームでは、この関数の返す値の意味は様々です。有意なファイル名を"
"返す場合、ファイルはプラットフォーム固有のテキストファイル形式です。この関数"
"は POSIX プラットフォームでのみ有用です。"

#: ../../distutils/apiref.rst:1515
msgid ""
"The following functions are deprecated together with this module and they "
"have no direct replacement."
msgstr ""

#: ../../distutils/apiref.rst:1521
msgid ""
"Return the directory for either the general or platform-dependent C include "
"files.  If *plat_specific* is true, the platform-dependent include directory "
"is returned; if false or omitted, the platform-independent directory is "
"returned. If *prefix* is given, it is used as either the prefix instead of :"
"const:`PREFIX`, or as the exec-prefix instead of :const:`EXEC_PREFIX` if "
"*plat_specific* is true."
msgstr ""
"C インクルードファイルディレクトリについて、一般的なディレクトリ名か、プラッ"
"トフォーム依存のディレクトリ名のいずれかを返します。 *plat_specific* が真であ"
"れば、プラットフォーム依存のインクルードディレクトリ名を返します; "
"*plat_specific* が偽か、省略された場合には、プラットフォームに依存しないディ"
"レクトリを返します。 *prefix* が指定されていれば、 :const:`PREFIX` の代わりに"
"用いられます。また、 *plat_specific* が真の場合、 :const:`EXEC_PREFIX` の代わ"
"りに用いられます。"

#: ../../distutils/apiref.rst:1531
msgid ""
"Return the directory for either the general or platform-dependent library "
"installation.  If *plat_specific* is true, the platform-dependent include "
"directory is returned; if false or omitted, the platform-independent "
"directory is returned.  If *prefix* is given, it is used as either the "
"prefix instead of :const:`PREFIX`, or as the exec-prefix instead of :const:"
"`EXEC_PREFIX` if *plat_specific* is true.  If *standard_lib* is true, the "
"directory for the standard library is returned rather than the directory for "
"the installation of third-party extensions."
msgstr ""
"ライブラリディレクトリについて、一般的なディレクトリ名か、プラットフォーム依"
"存のディレクトリ名のいずれかを返します。 *plat_specific* が真であれば、プラッ"
"トフォーム依存のライブラリディレクトリ名を返します; *plat_specific* が偽か、"
"省略された場合には、プラットフォームに依存しないディレクトリを返します。 "
"*prefix* が指定されていれば、 :const:`PREFIX` の代わりに用いられます。また、 "
"*plat_specific* が真の場合、 :const:`EXEC_PREFIX` の代わりに用いられます。 "
"*standard_lib* が真であれば、サードパーティ製の拡張モジュールをインストールす"
"るディレクトリの代わりに、標準ライブラリのディレクトリを返します。"

#: ../../distutils/apiref.rst:1540
msgid ""
"The following function is only intended for use within the :mod:`distutils` "
"package."
msgstr ""
"以下の関数は、 :mod:`distutils` パッケージ内の使用だけを前提にしています。"

#: ../../distutils/apiref.rst:1546
msgid ""
"Do any platform-specific customization of a :class:`distutils.ccompiler."
"CCompiler` instance."
msgstr ""
":class:`distutils.ccompiler.CCompiler` インスタンスに対して、プラットフォーム"
"固有のカスタマイズを行います。"

#: ../../distutils/apiref.rst:1549
msgid ""
"This function is only needed on Unix at this time, but should be called "
"consistently to support forward-compatibility.  It inserts the information "
"that varies across Unix flavors and is stored in Python's :file:`Makefile`.  "
"This information includes the selected compiler, compiler and linker "
"options, and the extension used by the linker for shared objects."
msgstr ""
"この関数は現在のところ、Unix だけで必要ですが、将来の互換性を考慮して一貫して"
"常に呼び出されます。この関数は様々な Unix の変種ごとに異なる情報や、Python "
"の :file:`Makefile` に書かれた情報をインスタンスに挿入します。この情報には、"
"選択されたコンパイラやコンパイラ/リンカのオプション、そして共有オブジェクトを"
"扱うためにリンカに指定する拡張子が含まれます。"

#: ../../distutils/apiref.rst:1555
msgid ""
"This function is even more special-purpose, and should only be used from "
"Python's own build procedures."
msgstr ""
"この関数はもっと特殊用途向けで、Python 自体のビルドプロセスでのみ使われるべき"
"です。"

#: ../../distutils/apiref.rst:1561
msgid ""
"Inform the :mod:`distutils.sysconfig` module that it is being used as part "
"of the build process for Python.  This changes a lot of relative locations "
"for files, allowing them to be located in the build area rather than in an "
"installed Python."
msgstr ""
":mod:`distutils.sysconfig` モジュールに、モジュールが Python のビルドプロセス"
"の一部として使われることを知らせます。これによって、ファイルコピー先を示す相"
"対位置が大幅に変更され、インストール済みの Python ではなく、ビルド作業領域に"
"ファイルが置かれるようになります。"

#: ../../distutils/apiref.rst:1568
msgid ":mod:`distutils.text_file` --- The TextFile class"
msgstr ":mod:`distutils.text_file` --- TextFile クラス"

#: ../../distutils/apiref.rst:1574
msgid ""
"This module provides the :class:`TextFile` class, which gives an interface  "
"to text files that (optionally) takes care of stripping comments, ignoring  "
"blank lines, and joining lines with backslashes."
msgstr ""
"このモジュールは :class:`TextFile` クラスを提供します。これはテキストファイル"
"へのインターフェースを提供し、コメントの削除、空行の無視、バックスラッシュで"
"の行の連結を任意に行えます。"

#: ../../distutils/apiref.rst:1581
msgid ""
"This class provides a file-like object that takes care of all  the things "
"you commonly want to do when processing a text file  that has some line-by-"
"line syntax: strip comments (as long as ``#``  is your comment character), "
"skip blank lines, join adjacent lines by escaping the newline (ie. backslash "
"at end of line), strip leading and/or trailing whitespace.  All of these are "
"optional and independently controllable."
msgstr ""
"このクラスはファイルのようなオブジェクトを提供します。これは行指向のテキスト"
"ファイルを処理する時に共通して必要となる処理を行います: (``#`` がコメント文字"
"なら)コメントの削除、空行のスキップ、 (行末のバックスラッシュでの)改行のエス"
"ケープによる行の連結、先頭/末尾の空白文字の削除。これらは全て独立して任意に設"
"定できます。"

#: ../../distutils/apiref.rst:1588
msgid ""
"The class provides a :meth:`warn` method so you can generate  warning "
"messages that report physical line number, even if the  logical line in "
"question spans multiple physical lines.  Also  provides :meth:`unreadline` "
"for implementing line-at-a-time lookahead."
msgstr ""
"クラスは :meth:`warn` メソッドを提供しており、物理行つきの警告メッセージを生"
"成することができます。この物理行は論理行が複数の物理行にまたがっていても大丈"
"夫です。また :meth:`unreadline` メソッドが一行先読みを実装するために提供され"
"ています。"

#: ../../distutils/apiref.rst:1593
msgid ""
":class:`TextFile` instances are create with either *filename*, *file*, or "
"both. :exc:`RuntimeError` is raised if both are ``None``. *filename* should "
"be a string, and *file* a file object (or something that provides :meth:"
"`readline` and :meth:`close`  methods).  It is recommended that you supply "
"at least *filename*,  so that :class:`TextFile` can include it in warning "
"messages.  If *file* is not supplied, :class:`TextFile` creates its own "
"using the :func:`open` built-in function."
msgstr ""
":class:`TextFile` のインスタンスは *filename*, *file*,またはその両方をとって"
"作成されます。両方が ``None`` の場合 :exc:`RuntimeError` が起きます。 "
"*filename* は文字列、 *file* はファイルオブジェクト(または :meth:`readline` "
"と :meth:`close` のメソッドを提供する何か) である必要があります。 :class:"
"`TextFile` が生成する警告メッセージに含めることができるので、 *filename* を与"
"えることが推奨されます、もし *file* が提供されなければ、 :class:`TextFile` は"
"組み込みの :func:`open` を利用して自分で作成します。"

#: ../../distutils/apiref.rst:1601
msgid ""
"The options are all boolean, and affect the values returned by :meth:"
"`readline`"
msgstr "オプションは全て真偽値で、 :meth:`readline` で返される値に影響します。"

#: ../../distutils/apiref.rst:1606
msgid "option name"
msgstr "オプション名"

#: ../../distutils/apiref.rst:1606
msgid "default"
msgstr "default"

#: ../../distutils/apiref.rst:1608
msgid "*strip_comments*"
msgstr "*strip_comments*"

#: ../../distutils/apiref.rst:1608
msgid ""
"strip from ``'#'`` to end-of-line, as well as any whitespace leading up to "
"the ``'#'``\\ ---unless it is escaped by a backslash"
msgstr ""
"バックスラッシュでエスケープされていない限り、``'#'`` から行末までと、"
"``'#'`` の先にある空白文字の並びを削除します"

#: ../../distutils/apiref.rst:1608 ../../distutils/apiref.rst:1617
#: ../../distutils/apiref.rst:1622
msgid "true"
msgstr "true"

#: ../../distutils/apiref.rst:1614
msgid "*lstrip_ws*"
msgstr "*lstrip_ws*"

#: ../../distutils/apiref.rst:1614
msgid "strip leading whitespace from each line before returning it"
msgstr "行を返す前に先頭の空白文字の並びを削除します。"

#: ../../distutils/apiref.rst:1614 ../../distutils/apiref.rst:1632
#: ../../distutils/apiref.rst:1643
msgid "false"
msgstr "false"

#: ../../distutils/apiref.rst:1617
msgid "*rstrip_ws*"
msgstr "*rstrip_ws*"

#: ../../distutils/apiref.rst:1617
msgid ""
"strip trailing whitespace (including line terminator!) from each line before "
"returning it."
msgstr "行を返す前に行末の空白文字(改行文字を含みます!)の並びを削除します。"

#: ../../distutils/apiref.rst:1622
msgid "*skip_blanks*"
msgstr "*skip_blanks*"

#: ../../distutils/apiref.rst:1622
msgid ""
"skip lines that are empty \\*after\\* stripping comments and whitespace.  "
"(If both lstrip_ws and rstrip_ws are false, then some lines may consist of "
"solely whitespace: these will \\*not\\* be skipped, even if *skip_blanks* is "
"true.)"
msgstr ""
"コメントと空白を除いた\\*あとで\\*内容がない行をスキップします。 (もし "
"lstrip_ws と rstrip_ws がともに偽なら、空白文字だけの行があるかもしれません。"
"これは *skip_blanks* が真でない限りスキップされません。)"

#: ../../distutils/apiref.rst:1632
msgid "*join_lines*"
msgstr "*join_lines*"

#: ../../distutils/apiref.rst:1632
msgid ""
"if a backslash is the last non-newline character on a line after stripping "
"comments and whitespace, join the following line to it to form one logical "
"line; if N consecutive lines end with a backslash, then N+1 physical lines "
"will be joined to form one logical line."
msgstr ""
"もしコメントと空白文字を削除したあとで、バックスラッシュが最後の改行文字でな"
"い文字なら、次の行を接続して一つの論理行とします: N行の連続した行がバックス"
"ラッシュで終わる場合、N+1 行の物理行が1行の論理行として扱われます。"

#: ../../distutils/apiref.rst:1643
msgid "*collapse_join*"
msgstr "*collapse_join*"

#: ../../distutils/apiref.rst:1643
msgid ""
"strip leading whitespace from lines that are joined to their predecessor; "
"only matters if ``(join_lines and not lstrip_ws)``"
msgstr ""
"前の行と接続するとき、行頭の空白文字を削除します。 ``(join_lines and not "
"lstrip_ws)`` の時だけ意味をもちます。"

#: ../../distutils/apiref.rst:1650
msgid ""
"Note that since *rstrip_ws* can strip the trailing newline, the semantics "
"of :meth:`readline` must differ from those of the built-in file object's :"
"meth:`readline` method!  In particular, :meth:`readline`  returns ``None`` "
"for end-of-file: an empty string might just be a  blank line (or an all-"
"whitespace line), if *rstrip_ws* is true  but *skip_blanks* is not."
msgstr ""
"*rstrip_ws* は行末の改行を削除するので、 :meth:`readline` のセマンティクスが"
"組み込みファイルオブジェクトの :meth:`readline` メソッドとは変わってしまいま"
"す! 特に、 *rstrip_ws* が真で *skip_blanks* が偽のとき、 :meth:`readline` は"
"ファイルの終端で ``None`` を返し、空文字列を返したときは空行(または全て空白文"
"字の行)です。"

#: ../../distutils/apiref.rst:1659
msgid ""
"Open a new file *filename*.  This overrides any *file* or *filename* "
"constructor arguments."
msgstr ""
"新しいファイル *filename* を開きます。これはコンストラクタ引数の *file* と "
"*filename* を上書きします。"

#: ../../distutils/apiref.rst:1665
msgid ""
"Close the current file and forget everything we know about it (including the "
"filename and the current line number)."
msgstr ""
"現在のファイルを閉じ、(ファイル名や現在の行番号を含め)現在のファイルについて"
"の情報を全て消します。"

#: ../../distutils/apiref.rst:1671
msgid ""
"Print (to stderr) a warning message tied to the current logical line in the "
"current file.  If the current logical line in the file spans multiple "
"physical lines, the warning refers to the whole range, such as ``\"lines "
"3-5\"``.  If *line* is supplied,  it overrides the current line number; it "
"may be a list or tuple  to indicate a range of physical lines, or an integer "
"for a  single physical line."
msgstr ""
"標準エラー出力に現在のファイルの論理行に結びついた警告メッセージを出力しま"
"す。もし現在の論理行が複数の物理行に対応するなら、警告メッセージは以下のよう"
"に全体を参照します: ``\"lines 3-5\"`` 。もし *line* が与えられていれば、現在"
"の行番号を上書きします; 物理行のレンジをあらわすリストまたはタプル、もしくは"
"ある物理行をあらわす整数のどれでも与えられます。"

#: ../../distutils/apiref.rst:1681
msgid ""
"Read and return a single logical line from the current file (or from an "
"internal buffer if lines have previously been \"unread\" with :meth:"
"`unreadline`).  If the *join_lines* option  is true, this may involve "
"reading multiple physical lines concatenated into a single string.  Updates "
"the current line number,  so calling :meth:`warn` after :meth:`readline` "
"emits a warning  about the physical line(s) just read.  Returns ``None`` on "
"end-of-file,  since the empty string can occur if *rstrip_ws* is true but  "
"*strip_blanks* is not."
msgstr ""
"現在のファイル(または :meth:`unreadline` で\"unread\"を直前に行っていればバッ"
"ファ)から論理行を1行読み込んで返します。もし *join_lines* オプションが真な"
"ら、このメソッドは複数の物理行を読み込んで接続した文字列を返します。現在の行"
"番号を更新します。そのため :meth:`readline` のあとに :meth:`warn` を呼ぶと丁"
"度読んだ行についての警告を出します。 *rstrip_ws* が真で、 *strip_blanks* が偽"
"のとき空文字列が返るので、ファイルの終端では ``None`` を返します。"

#: ../../distutils/apiref.rst:1692
msgid ""
"Read and return the list of all logical lines remaining in the current file. "
"This updates the current line number to the last line of the file."
msgstr ""
"現在のファイルで残っている全ての論理行のリストを読み込んで返します。行番号"
"を、ファイルの最後の行に更新します。"

#: ../../distutils/apiref.rst:1698
msgid ""
"Push *line* (a string) onto an internal buffer that will be checked by "
"future :meth:`readline` calls.  Handy for implementing a parser with line-at-"
"a-time lookahead. Note that lines that are \"unread\" with :meth:"
"`unreadline` are not subsequently re-cleansed (whitespace  stripped, or "
"whatever) when read with :meth:`readline`. If multiple calls are made to :"
"meth:`unreadline` before a call to :meth:`readline`, the lines will be "
"returned most in most recent first order."
msgstr ""
"*line* (文字列)を次の :meth:`readline` 用に、内部バッファにpushします。行の先"
"読みを必要とするパーサを実装する時に便利です。 :meth:`unreadline` で"
"\"unread\"された行は :meth:`readline` で読み込む際に再度処理(空白の除去など)"
"されません。もし :meth:`unreadline` を、 :meth:`readline` を呼ぶ前に複数回実"
"行すると、最後にunreadした行から返されます。"

#: ../../distutils/apiref.rst:1707
msgid ":mod:`distutils.version` --- Version number classes"
msgstr ":mod:`distutils.version` --- バージョン番号クラス"

#: ../../distutils/apiref.rst:1722
msgid ":mod:`distutils.cmd` --- Abstract base class for Distutils commands"
msgstr ":mod:`distutils.cmd` --- Distutils コマンドの抽象クラス"

#: ../../distutils/apiref.rst:1729
msgid "This module supplies the abstract base class :class:`Command`."
msgstr "このモジュールは抽象ベースクラス :class:`Command` を提供します。"

#: ../../distutils/apiref.rst:1734
msgid ""
"Abstract base class for defining command classes, the \"worker bees\" of the "
"Distutils.  A useful analogy for command classes is to think of them as "
"subroutines with local variables called *options*.  The options are declared "
"in :meth:`initialize_options` and defined (given their final values) in :"
"meth:`finalize_options`, both of which must be defined by every command "
"class.  The distinction between the two is necessary because option values "
"might come from the outside world (command line, config file, ...), and any "
"options dependent on other options must be computed after these outside "
"influences have been processed --- hence :meth:`finalize_options`.  The body "
"of the subroutine, where it does all its work based on the values of its "
"options, is the :meth:`run` method, which must also be implemented by every "
"command class."
msgstr ""
"コマンドクラスを定義するための抽象ベースクラス --- distutilsの「働きバチ」 "
"--- です。コマンドクラスは *options* とよばれるローカル変数を持ったサブルーチ"
"ンと考えることができます。オプションは :meth:`initialize_options` で宣言さ"
"れ、 :meth:`finalize_options` で定義さ(最終的な値を与えら)れます。どちらも全"
"てのコマンドクラスで実装する必要があります。この2つの区別は必要です。なぜなら"
"オプションの値は外部(コマンドライン、設定ファイルなど)から来るかもしれず、他"
"のオプションに依存しているオプションは外部の影響を処理した後で計算される必要"
"があるからです。そのため :meth:`finalize_options` が存在します。サブルーチン"
"の本体は全ての処理をオプションの値にもとづいて行う :meth:`run` メソッドで、こ"
"れも全てのコマンドクラスで実装される必要があります。"

#: ../../distutils/apiref.rst:1747
msgid ""
"The class constructor takes a single argument *dist*, a :class:`~distutils."
"core.Distribution` instance."
msgstr ""
"このクラスのコンストラクタは、 :class:`~distutils.core.Distribution` インスタ"
"ンス *dist* 1 つを引数に取ります。"

#: ../../distutils/apiref.rst:1752
msgid "Creating a new Distutils command"
msgstr "新しいDistutilsコマンドの作成"

#: ../../distutils/apiref.rst:1754
msgid "This section outlines the steps to create a new Distutils command."
msgstr ""
"このセクションではDistutilsの新しいコマンドを作成する手順の概要をしめします。"

#: ../../distutils/apiref.rst:1756
msgid ""
"A new command lives in a module in the :mod:`distutils.command` package. "
"There is a sample template in that directory called :file:"
"`command_template`.  Copy this file to a new module with the same name as "
"the new command you're implementing.  This module should implement a class "
"with the same name as the module (and the command).  So, for instance, to "
"create the command ``peel_banana`` (so that users can run ``setup.py "
"peel_banana``), you'd copy :file:`command_template` to :file:`distutils/"
"command/peel_banana.py`, then edit it so that it's implementing the class :"
"class:`peel_banana`, a subclass of :class:`distutils.cmd.Command`."
msgstr ""
"新しいコマンドは :mod:`distutils.command` パッケージ中のモジュールに作られま"
"す。 :file:`command_template` というディレクトリにサンプルのテンプレートがあ"
"ります。このファイルを実装しようとしているコマンドと同名の新しいモジュールに"
"コピーしてください。このモジュールはモジュール(とコマンド)と同じ名前のクラス"
"を実装する必要があります。そのため、 ``peel_banana`` コマンド(ユーザは "
"``setup.py peel_banana`` と実行できます)を実装する際には、 :file:"
"`command_template` を :file:`distutils/command/peel_banana.py` にコピーし、 :"
"class:`distutils.cmd.Command` のサブクラス :class:`peel_banana` クラスを実装"
"するように編集してください。"

#: ../../distutils/apiref.rst:1766
msgid "Subclasses of :class:`Command` must define the following methods."
msgstr ""
":class:`Command` のサブクラスは以下のメソッドを実装する必要があります。"

#: ../../distutils/apiref.rst:1770
msgid ""
"Set default values for all the options that this command supports.  Note "
"that these defaults may be overridden by other commands, by the setup "
"script, by config files, or by the command-line.  Thus, this is not the "
"place to code dependencies between options; generally, :meth:"
"`initialize_options` implementations are just a bunch of ``self.foo = None`` "
"assignments."
msgstr ""
"このコマンドがサポートする全てのオプションのデフォルト値を設定します。これら"
"のデフォルトは他のコマンドやセットアップスクリプト、設定ファイル、コマンドラ"
"インによって上書きされるかもしれません。そのためオプション間の依存関係を記述"
"するには適切な場所ではありません。一般的に :meth:`initialize_options` は単に "
"``self.foo = None`` のような定義だけを行います。"

#: ../../distutils/apiref.rst:1779
msgid ""
"Set final values for all the options that this command supports. This is "
"always called as late as possible, ie.  after any option assignments from "
"the command-line or from other commands have been done.  Thus, this is the "
"place to code option dependencies: if *foo* depends on *bar*, then it is "
"safe to set *foo* from *bar* as long as *foo* still has the same value it "
"was assigned in :meth:`initialize_options`."
msgstr ""
"このコマンドがサポートする全てのオプションの最終的な値を設定します。これは可"
"能な限り遅く呼び出されます。つまりコマンドラインや他のコマンドによるオプショ"
"ンの代入のあとに呼び出されます。そのため、オプション間の依存関係を記述するの"
"に適した場所です。もし *foo* が *bar* に依存しており、かつまだ *foo* が :"
"meth:`initialize_options` で定義された値のままなら、 *foo* を *bar* から代入"
"しても安全です。"

#: ../../distutils/apiref.rst:1789
msgid ""
"A command's raison d'etre: carry out the action it exists to perform, "
"controlled by the options initialized in :meth:`initialize_options`, "
"customized by other commands, the setup script, the command-line, and config "
"files, and finalized in :meth:`finalize_options`.  All terminal output and "
"filesystem interaction should be done by :meth:`run`."
msgstr ""
"コマンドの本体です。実行するべきアクションを実装しています。 :meth:"
"`initialize_options` で初期化され、他のコマンドされ、セットアップスクリプト、"
"コマンドライン、設定ファイルでカスタマイズされ、 :meth:`finalize_options` で"
"設定されたオプションがアクションを制御します。端末への出力とファイルシステム"
"とのやりとりは全て :meth:`run` が行います。"

#: ../../distutils/apiref.rst:1798
msgid ""
"*sub_commands* formalizes the notion of a \"family\" of commands, e.g. "
"``install`` as the parent with sub-commands ``install_lib``, "
"``install_headers``, etc.  The parent of a family of commands defines "
"*sub_commands* as a class attribute; it's a list of 2-tuples "
"``(command_name, predicate)``, with *command_name* a string and *predicate* "
"a function, a string or ``None``.  *predicate* is a method of the parent "
"command that determines whether the corresponding command is applicable in "
"the current situation.  (E.g. ``install_headers`` is only applicable if we "
"have any C header files to install.)  If *predicate* is ``None``, that "
"command is always applicable."
msgstr ""
"*sub_commands* はコマンドの\"ファミリー\"を定式化したものです。たとえば "
"``install`` はサブコマンド ``install_lib`` ``install_headers`` などの親です。"
"コマンドファミリーの親は *sub_commands* をクラス属性として持ちます。 "
"*sub_commands* は2要素のタプル ``(command_name, predicate)`` のリストで、 "
"*command_name* は文字列、 *predicate* は関数か文字列か ``None`` です。 "
"*predicate* はには親コマンドのメソッドで、現在の状況がコマンド実行にふさわし"
"いかどうか判断するものを指定します。 (例えば ``install_headers`` はインストー"
"ルするべき Cヘッダファイルがある時だけ有効です。) もし *predicate* が None な"
"ら、そのコマンドは常に有効になります。"

#: ../../distutils/apiref.rst:1809
msgid ""
"*sub_commands* is usually defined at the *end* of a class, because "
"predicates can be methods of the class, so they must already have been "
"defined.  The canonical example is the :command:`install` command."
msgstr ""
"*sub_commands* は通常クラスの *最後* で定義されます。これは predicate は "
"bound されていないメソッドになるので、全て先に定義されている必要があるためで"
"す。標準的な例は :command:`install` コマンドです。"

#: ../../distutils/apiref.rst:1815
msgid ":mod:`distutils.command` --- Individual Distutils commands"
msgstr ":mod:`distutils.command` --- Distutils 各コマンド"

#: ../../distutils/apiref.rst:1826
msgid ":mod:`distutils.command.bdist` --- Build a binary installer"
msgstr ":mod:`distutils.command.bdist` --- バイナリインストーラの構築"

#: ../../distutils/apiref.rst:1836
msgid ""
":mod:`distutils.command.bdist_packager` --- Abstract base class for packagers"
msgstr ""
":mod:`distutils.command.bdist_packager` --- パッケージの抽象ベースクラス"

#: ../../distutils/apiref.rst:1846
msgid ":mod:`distutils.command.bdist_dumb` --- Build a \"dumb\" installer"
msgstr ":mod:`distutils.command.bdist_dumb` --- \"ダム\"インストーラを構築"

#: ../../distutils/apiref.rst:1856
msgid ""
":mod:`distutils.command.bdist_msi` --- Build a Microsoft Installer binary "
"package"
msgstr ""
":mod:`distutils.command.bdist_msi` --- Microsoft Installer バイナリパッケージ"
"をビルドする"

#: ../../distutils/apiref.rst:1863
msgid "Use bdist_wheel (wheel packages) instead."
msgstr "bdist_wheel (wheel パッケージ) を代わりに使ってください。"

#: ../../distutils/apiref.rst:1866
msgid "Builds a `Windows Installer`_ (.msi) binary package."
msgstr "`Windows Installer`_ (.msi) バイナリパッケージをビルドします。"

#: ../../distutils/apiref.rst:1872
msgid ""
":mod:`distutils.command.bdist_rpm` --- Build a binary distribution as a "
"Redhat RPM and SRPM"
msgstr ""
":mod:`distutils.command.bdist_rpm` --- Redhat RPMとSRPM形式のバイナリディスト"
"リビューションを構築"

#: ../../distutils/apiref.rst:1882
msgid ":mod:`distutils.command.sdist` --- Build a source distribution"
msgstr ":mod:`distutils.command.sdist` --- ソース配布物の構築"

#: ../../distutils/apiref.rst:1892
msgid ":mod:`distutils.command.build` --- Build all files of a package"
msgstr ":mod:`distutils.command.build` --- パッケージ中の全ファイルを構築"

#: ../../distutils/apiref.rst:1902
msgid ""
":mod:`distutils.command.build_clib` --- Build any C libraries in a package"
msgstr ""
":mod:`distutils.command.build_clib` --- パッケージ中のCライブラリを構築"

#: ../../distutils/apiref.rst:1912
msgid ""
":mod:`distutils.command.build_ext` --- Build any extensions in a package"
msgstr ":mod:`distutils.command.build_ext` --- パッケージ中の拡張を構築"

#: ../../distutils/apiref.rst:1922
msgid ""
":mod:`distutils.command.build_py` --- Build the .py/.pyc files of a package"
msgstr ""
":mod:`distutils.command.build_py` --- パッケージ中の.py/.pyc ファイルを構築"

#: ../../distutils/apiref.rst:1932
msgid ""
"Alternative implementation of build_py which also runs the 2to3 conversion "
"library on each .py file that is going to be installed. To use this in a "
"setup.py file for a distribution that is designed to run with both Python 2."
"x and 3.x, add::"
msgstr ""
"インストールされる各 .py ファイル上で 2to3 変換ライブラリをさらに実行する "
"build_py の代替実装。Python 2.x と 3.x の両方で動くことを意図した配布物におい"
"て setup.py ファイルの中でこれを使用するためには、setup.py に次のように付け加"
"えてください::"

#: ../../distutils/apiref.rst:1942
msgid "to your setup.py, and later::"
msgstr "そして::"

#: ../../distutils/apiref.rst:1946
msgid "to the invocation of setup()."
msgstr "を setup() の呼び出しに追加してください。"

#: ../../distutils/apiref.rst:1950
msgid ""
":mod:`distutils.command.build_scripts` --- Build the scripts of a package"
msgstr ""
":mod:`distutils.command.build_scripts` --- パッケージ中のスクリプトを構築"

#: ../../distutils/apiref.rst:1960
msgid ":mod:`distutils.command.clean` --- Clean a package build area"
msgstr ":mod:`distutils.command.clean` --- パッケージのビルドエリアを消去"

#: ../../distutils/apiref.rst:1965
msgid ""
"This command removes the temporary files created by :command:`build` and its "
"subcommands, like intermediary compiled object files.  With the ``--all`` "
"option, the complete build directory will be removed."
msgstr ""
"このコマンドは :command:`build` とそのサブコマンドによって作られた、中間コン"
"パイルオブジェクトファイルのような一時ファイルを削除します。 ``--all`` オプ"
"ションとともに使うと、 build ディレクトリ全体を削除します。"

#: ../../distutils/apiref.rst:1969
msgid ""
"Extension modules built :ref:`in place <distutils-build-ext-inplace>` will "
"not be cleaned, as they are not in the build directory."
msgstr ""
":ref:`in place <distutils-build-ext-inplace>` でビルドしたモジュールは、それ"
"は build ディレクトリにいないので、削除されません。"

#: ../../distutils/apiref.rst:1974
msgid ":mod:`distutils.command.config` --- Perform package configuration"
msgstr ":mod:`distutils.command.config` --- パッケージの設定"

#: ../../distutils/apiref.rst:1984
msgid ":mod:`distutils.command.install` --- Install a package"
msgstr ":mod:`distutils.command.install` --- パッケージのインストール"

#: ../../distutils/apiref.rst:1994
msgid ""
":mod:`distutils.command.install_data` --- Install data files from a package"
msgstr ""
":mod:`distutils.command.install_data` --- パッケージ中のデータファイルをイン"
"ストール"

#: ../../distutils/apiref.rst:2004
msgid ""
":mod:`distutils.command.install_headers` --- Install C/C++ header files from "
"a package"
msgstr ""
":mod:`distutils.command.install_headers` --- パッケージから C/C++ ヘッダファ"
"イルをインストール"

#: ../../distutils/apiref.rst:2014
msgid ""
":mod:`distutils.command.install_lib` --- Install library files from a package"
msgstr ""
":mod:`distutils.command.install_lib` --- パッケージからライブラリファイルをイ"
"ンストール"

#: ../../distutils/apiref.rst:2024
msgid ""
":mod:`distutils.command.install_scripts` --- Install script files from a "
"package"
msgstr ""
":mod:`distutils.command.install_scripts` --- パッケージからスクリプトファイル"
"をインストール"

#: ../../distutils/apiref.rst:2034
msgid ""
":mod:`distutils.command.register` --- Register a module with the Python "
"Package Index"
msgstr ""
":mod:`distutils.command.register` --- モジュールをPython Package Indexに登録"
"する"

#: ../../distutils/apiref.rst:2040
msgid ""
"The ``register`` command registers the package with the Python Package  "
"Index. This is described in more detail in :pep:`301`."
msgstr ""
"``register`` コマンドはパッケージをPython Package Index に登録します。この詳"
"細は :pep:`301` に記述されています。"

#: ../../distutils/apiref.rst:2047
msgid ":mod:`distutils.command.check` --- Check the meta-data of a package"
msgstr ""
":mod:`distutils.command.check` --- パッケージのメタデータをチェックする"

#: ../../distutils/apiref.rst:2053
msgid ""
"The ``check`` command performs some tests on the meta-data of a package. For "
"example, it verifies that all required meta-data are provided as the "
"arguments passed to the :func:`setup` function."
msgstr ""
"``check`` コマンドは、パッケージのメタデータに対していくつかのテストを行ない"
"ます。例えば、すべての必要なメタデータが :func:`setup` 関数に渡された引数とし"
"て提供されることを確認します。"
