# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:06+0000\n"
"PO-Revision-Date: 2020-05-30 11:52+0000\n"
"Last-Translator: tomo, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../distutils/introduction.rst:5
msgid "An Introduction to Distutils"
msgstr "Distutilsの紹介"

#: ../../distutils/_setuptools_disclaimer.rst:3
msgid ""
"This document is being retained solely until the ``setuptools`` "
"documentation at https://setuptools.readthedocs.io/en/latest/setuptools.html "
"independently covers all of the relevant information currently included here."
msgstr ""
"このドキュメントは、 https://setuptools.readthedocs.io/en/latest/setuptools."
"html にある ``setuptools`` のドキュメントが現時点でここにある関連情報を全て網"
"羅するまで、単独でここに載せておかれます。"

#: ../../distutils/introduction.rst:9
msgid ""
"This document covers using the Distutils to distribute your Python modules, "
"concentrating on the role of developer/distributor: if you're looking for "
"information on installing Python modules, you should refer to the :ref:"
"`install-index` chapter."
msgstr ""
"このドキュメントで扱っている内容は、 Distutils を使った Python モジュールの配"
"布で、とりわけ開発者/配布者の役割に重点を置いています: Python モジュールのイ"
"ンストールに関する情報を探しているのなら、 :ref:`install-index` を参照してく"
"ださい。"

#: ../../distutils/introduction.rst:18
msgid "Concepts & Terminology"
msgstr "概念と用語"

#: ../../distutils/introduction.rst:20
msgid ""
"Using the Distutils is quite simple, both for module developers and for "
"users/administrators installing third-party modules.  As a developer, your "
"responsibilities (apart from writing solid, well-documented and well-tested "
"code, of course!) are:"
msgstr ""
"Distutils の使い方は、モジュール開発者とサードパーティ製のモジュールをインス"
"トールするユーザ/管理者のどちらにとってもきわめて単純です。開発者側のやるべき"
"ことは (もちろん、しっかりした実装で、詳しく文書化され、よくテストされたコー"
"ドを書くことは別として！) 以下の項目になります:"

#: ../../distutils/introduction.rst:25
msgid "write a setup script (:file:`setup.py` by convention)"
msgstr ""
"setup スクリプト (:file:`setup.py` という名前にするのがならわし) を書く"

#: ../../distutils/introduction.rst:27
msgid "(optional) write a setup configuration file"
msgstr "(必要があれば) setup 設定ファイルを書く"

#: ../../distutils/introduction.rst:29
msgid "create a source distribution"
msgstr "ソースコード配布物を作成する"

#: ../../distutils/introduction.rst:31
msgid "(optional) create one or more built (binary) distributions"
msgstr ""
"(必要があれば) 一つまたはそれ以上のビルド済み (バイナリ) 形式の配布物を作成す"
"る"

#: ../../distutils/introduction.rst:33
msgid "Each of these tasks is covered in this document."
msgstr "これらの作業については、いずれもこのドキュメントで扱っています。"

#: ../../distutils/introduction.rst:35
msgid ""
"Not all module developers have access to a multitude of platforms, so it's "
"not always feasible to expect them to create a multitude of built "
"distributions.  It is hoped that a class of intermediaries, called "
"*packagers*, will arise to address this need.  Packagers will take source "
"distributions released by module developers, build them on one or more "
"platforms, and release the resulting built distributions.  Thus, users on "
"the most popular platforms will be able to install most popular Python "
"module distributions in the most natural way for their platform, without "
"having to run a single setup script or compile a line of code."
msgstr ""
"全てのモジュール開発者が複数の実行プラットフォームを利用できるわけではないの"
"で、全てのプラットフォーム向けにビルド済みの配布物を提供してもらえると期待す"
"るわけにはいきません。ですから、仲介を行う人々、いわゆる *パッケージ作成者 "
"(packager)* がこの問題を解決すべく立ち上がってくれることが望ましいでしょう。"
"パッケージ作成者はモジュール開発者がリリースしたソースコード配布物を、一つま"
"たはそれ以上のプラットフォーム上でビルドして、得られたビルド済み配布物をリ"
"リースすることになります。したがって、ほとんどの一般的なプラットフォームにお"
"けるユーザは、setup スクリプト一つ実行せず、コードを一行たりともコンパイルし"
"なくても、使っているプラットフォーム向けのきわめて普通の方法でほとんどの一般"
"的な Python モジュール配布物をインストールできるでしょう。"

#: ../../distutils/introduction.rst:49
msgid "A Simple Example"
msgstr "簡単な例"

#: ../../distutils/introduction.rst:51
msgid ""
"The setup script is usually quite simple, although since it's written in "
"Python, there are no arbitrary limits to what you can do with it, though you "
"should be careful about putting arbitrarily expensive operations in your "
"setup script. Unlike, say, Autoconf-style configure scripts, the setup "
"script may be run multiple times in the course of building and installing "
"your module distribution."
msgstr ""
"setup スクリプトは通常単純なものですが、Python で書かれているため、スクリプト"
"中で何かを処理しようと考えたとき特に制限はありません。とはいえ、setup スクリ"
"プト中に何かコストの大きな処理を行うときは十分注意してください。autoconf 形式"
"の設定スクリプトとは違い、setup スクリプトはモジュール配布物をビルドしてイン"
"ストールする中で複数回実行されることがあります。"

#: ../../distutils/introduction.rst:58
msgid ""
"If all you want to do is distribute a module called :mod:`foo`, contained in "
"a file :file:`foo.py`, then your setup script can be as simple as this::"
msgstr ""
":file:`foo.py` という名前のファイルに収められている :mod:`foo` という名前のモ"
"ジュールを配布したいだけなら、setup スクリプトは以下のような単純なものになり"
"ます::"

#: ../../distutils/introduction.rst:67
msgid "Some observations:"
msgstr "以下のことに注意してください:"

#: ../../distutils/introduction.rst:69
msgid ""
"most information that you supply to the Distutils is supplied as keyword "
"arguments to the :func:`setup` function"
msgstr ""
"Distutils に与えなければならない情報のほとんどは、 :func:`setup` 関数のキー"
"ワード引数として与えます"

#: ../../distutils/introduction.rst:72
msgid ""
"those keyword arguments fall into two categories: package metadata (name, "
"version number) and information about what's in the package (a list of pure "
"Python modules, in this case)"
msgstr ""
"キーワード引数は二つのカテゴリ: パッケージのメタデータ (パッケージ名、バー"
"ジョン番号)、パッケージに何が収められているかの情報 (上の場合は pure Python "
"モジュールのリスト)、に行き着きます"

#: ../../distutils/introduction.rst:76
msgid ""
"modules are specified by module name, not filename (the same will hold true "
"for packages and extensions)"
msgstr ""
"モジュールはファイル名ではなく、モジュール名で指定します (パッケージと拡張モ"
"ジュールについても同じです)"

#: ../../distutils/introduction.rst:79
msgid ""
"it's recommended that you supply a little more metadata, in particular your "
"name, email address and a URL for the project (see section :ref:`setup-"
"script` for an example)"
msgstr ""
"作者名、電子メールアドレス、プロジェクトの URL といった追加のメタデータを入れ"
"ておくよう奨めます (:ref:`setup-script` の例を参照してください)"

#: ../../distutils/introduction.rst:83
msgid ""
"To create a source distribution for this module, you would create a setup "
"script, :file:`setup.py`, containing the above code, and run this command "
"from a terminal::"
msgstr ""
"このモジュールのソース配布物を作成するには、上記のコードが書かれた setup スク"
"リプト :file:`setup.py` を作成し、端末からこのコマンドを実行してください::"

#: ../../distutils/introduction.rst:89
msgid ""
"For Windows, open a command prompt window (:menuselection:`Start --> "
"Accessories`) and change the command to::"
msgstr ""
"Windows では、コマンドプロンプトのウィンドウを開き (:menuselection:`スタート "
"--> アクセサリ`) 、次のようにコマンドを変えてください::"

#: ../../distutils/introduction.rst:94
msgid ""
":command:`sdist` will create an archive file (e.g., tarball on Unix, ZIP "
"file on Windows) containing your setup script :file:`setup.py`, and your "
"module :file:`foo.py`. The archive file will be named :file:`foo-1.0.tar.gz` "
"(or :file:`.zip`), and will unpack into a directory :file:`foo-1.0`."
msgstr ""
":command:`sdist` は、 setup スクリプト :file:`setup.py` とモジュール :file:"
"`foo.py` を含むアーカイブファイル (例。 Unix の tarball や Windows の ZIP "
"ファイル) を作成します。アーカイブファイルは :file:`foo-1.0.tar.gz` (あるい"
"は :file:`.zip`) という名前になり、 :file:`foo-1.0` というディレクトリに展開"
"されます。"

#: ../../distutils/introduction.rst:99
msgid ""
"If an end-user wishes to install your :mod:`foo` module, all they have to do "
"is download :file:`foo-1.0.tar.gz` (or :file:`.zip`), unpack it, and---from "
"the :file:`foo-1.0` directory---run ::"
msgstr ""
"エンドユーザが :mod:`foo` モジュールをインストールしたければ、 :file:"
"`foo-1.0.tar.gz` (または :file:`.zip`) をダウンロードし、それを展開して、以下"
"のスクリプトを --- :file:`foo-1.0` ディレクトリ中で --- 実行するだけです ::"

#: ../../distutils/introduction.rst:105
msgid ""
"which will ultimately copy :file:`foo.py` to the appropriate directory for "
"third-party modules in their Python installation."
msgstr ""
"この操作を行うと、インストールされている Python での適切なサードパーティ製モ"
"ジュール置き場に :file:`foo.py` を完璧にコピーします。"

#: ../../distutils/introduction.rst:108
msgid ""
"This simple example demonstrates some fundamental concepts of the Distutils. "
"First, both developers and installers have the same basic user interface, i."
"e. the setup script.  The difference is which Distutils *commands* they use: "
"the :command:`sdist` command is almost exclusively for module developers, "
"while :command:`install` is more often for installers (although most "
"developers will want to install their own code occasionally)."
msgstr ""
"ここで述べた簡単な例では、 Distutils の基本的な概念のいくつかを示しています。"
"まず、開発者とインストール作業者は同じ基本インタフェース、すなわち setup スク"
"リプトを使っています。二人の作業の違いは、使っている Distutils *コマンド "
"(command)* にあります: :command:`sdist` コマンドは、ほぼ完全に開発者だけが対"
"象となる一方、 :command:`install` はどちらかというとインストール作業者向けで"
"す (とはいえ、ほとんどの開発者は自分のコードをインストールしたくなることがあ"
"るでしょう)。"

#: ../../distutils/introduction.rst:115
msgid ""
"If you want to make things really easy for your users, you can create one or "
"more built distributions for them.  For instance, if you are running on a "
"Windows machine, and want to make things easy for other Windows users, you "
"can create an executable installer (the most appropriate type of built "
"distribution for this platform) with the :command:`bdist_wininst` command.  "
"For example::"
msgstr ""
"ユーザにとって本当に簡単なものにしたいのなら、一つまたはそれ以上のビルド済み"
"配布物を作ってあげられます。例えば、Windows マシン上で作業をしていて、他の "
"Windows ユーザにとって簡単な配布物を提供したいのなら、実行可能な形式の (この"
"プラットフォーム向けのビルド済み配布物としてはもっとも適切な) インストーラを"
"作成できます。これには :command:`bdist_wininst` を使います。例えば::"

#: ../../distutils/introduction.rst:123
msgid ""
"will create an executable installer, :file:`foo-1.0.win32.exe`, in the "
"current directory."
msgstr ""
"とすると、実行可能なインストーラ形式、 :file:`foo-1.0.win32.exe` が現在のディ"
"レクトリに作成されます。"

#: ../../distutils/introduction.rst:126
msgid ""
"Other useful built distribution formats are RPM, implemented by the :command:"
"`bdist_rpm` command, Solaris :program:`pkgtool` (:command:`bdist_pkgtool`), "
"and HP-UX :program:`swinstall` (:command:`bdist_sdux`).  For example, the "
"following command will create an RPM file called :file:`foo-1.0.noarch.rpm`::"
msgstr ""
"その他の有用な配布形態としては、 :command:`bdist_rpm` に実装されている RPM 形"
"式、 Solaris :program:`pkgtool` (:command:`bdist_pkgtool`) 、 HP-UX :program:"
"`swinstall` (:command:`bdist_sdux`) があります。例えば、以下のコマンドを実行"
"すると、 :file:`foo-1.0.noarch.rpm` という名前の RPM ファイルを作成します::"

#: ../../distutils/introduction.rst:134
msgid ""
"(The :command:`bdist_rpm` command uses the :command:`rpm` executable, "
"therefore this has to be run on an RPM-based system such as Red Hat Linux, "
"SuSE Linux, or Mandrake Linux.)"
msgstr ""
"(:command:`bdist_rpm` コマンドは :command:`rpm` コマンドを使うため、 Red Hat "
"Linux や SuSE Linux、 Mandrake Linux といった RPM ベースのシステムで実行しな"
"ければなりません)"

#: ../../distutils/introduction.rst:138
msgid ""
"You can find out what distribution formats are available at any time by "
"running ::"
msgstr "どの配布形式が利用できるかは、これを実行すれば分かります ::"

#: ../../distutils/introduction.rst:147
msgid "General Python terminology"
msgstr "Python 一般の用語"

#: ../../distutils/introduction.rst:149
msgid ""
"If you're reading this document, you probably have a good idea of what "
"modules, extensions, and so forth are.  Nevertheless, just to be sure that "
"everyone is operating from a common starting point, we offer the following "
"glossary of common Python terms:"
msgstr ""
"このドキュメントを読んでいるのなら、モジュール (module)、拡張モジュール "
"(extension) などが何を表すのかをよく知っているかもしれません。とはいえ、読者"
"がみな共通のスタートポイントに立って Distutils の操作を始められるように、ここ"
"で一般的な Python 用語について以下のような用語集を示しておきます:"

#: ../../distutils/introduction.rst:157
msgid "module"
msgstr "module"

#: ../../distutils/introduction.rst:155
msgid ""
"the basic unit of code reusability in Python: a block of code imported by "
"some other code.  Three types of modules concern us here: pure Python "
"modules, extension modules, and packages."
msgstr ""
"Python においてコードを再利用する際の基本単位: すなわち、他のコードから "
"import されるひとかたまりのコードです。ここでは、三種類のモジュール: pure "
"Python モジュール、拡張モジュール、パッケージが関わってきます。"

#: ../../distutils/introduction.rst:162
msgid "pure Python module"
msgstr "pure Python モジュール"

#: ../../distutils/introduction.rst:160
msgid ""
"a module written in Python and contained in a single :file:`.py` file (and "
"possibly associated :file:`.pyc` files).  Sometimes referred to as a \"pure "
"module.\""
msgstr ""
"Python で書かれ、単一の :file:`.py`  ファイル内に収められたモジュールです (:"
"file:`.pyc` ファイルと関連があります) 。 \"pure モジュール  (pure module)\" "
"と呼ばれることもあります。"

#: ../../distutils/introduction.rst:170
msgid "extension module"
msgstr "extension module"

#: ../../distutils/introduction.rst:165
msgid ""
"a module written in the low-level language of the Python implementation: C/C+"
"+ for Python, Java for Jython. Typically contained in a single dynamically "
"loadable pre-compiled file, e.g. a shared object (:file:`.so`) file for "
"Python extensions on Unix, a DLL (given the :file:`.pyd` extension) for "
"Python extensions on Windows, or a Java class file for Jython extensions.  "
"(Note that currently, the Distutils only handles C/C++ extensions for "
"Python.)"
msgstr ""
"Python を実装している低水準言語: Python の場合は C/C++ 、 Jython の場合は "
"Java 、で書かれたモジュールです。通常は、動的にロードできるコンパイル済みの単"
"一のファイルに入っています。例えば、Unix向け Python 拡張のための共有オブジェ"
"クト (:file:`.so`) 、 Windows 向け Python 拡張のための DLL (:file:`.pyd` とい"
"う拡張子が与えられています)、 Jython 拡張のための Java クラスといった具合で"
"す。 (現状では、 Distutils は Python 向けの C/C++ 拡張モジュールしか扱わない"
"ので注意してください。)"

#: ../../distutils/introduction.rst:175
msgid "package"
msgstr "package"

#: ../../distutils/introduction.rst:173
msgid ""
"a module that contains other modules; typically contained in a directory in "
"the filesystem and distinguished from other directories by the presence of a "
"file :file:`__init__.py`."
msgstr ""
"他のモジュールが入っているモジュールです; 通常、ファイルシステム内のあるディ"
"レクトリに収められ、 :file:`__init__.py` が入っていることで通常のディレクトリ"
"と区別できます。"

#: ../../distutils/introduction.rst:185
msgid "root package"
msgstr "ルートパッケージ"

#: ../../distutils/introduction.rst:178
msgid ""
"the root of the hierarchy of packages.  (This isn't really a package, since "
"it doesn't have an :file:`__init__.py` file.  But we have to call it "
"something.) The vast majority of the standard library is in the root "
"package, as are many small, standalone third-party modules that don't belong "
"to a larger module collection. Unlike regular packages, modules in the root "
"package can be found in many directories: in fact, every directory listed in "
"``sys.path`` contributes modules to the root package."
msgstr ""
"階層的なパッケージの根 (root) の部分にあたるパッケージです。(この部分には :"
"file:`__init__.py` ファイルがないので、本当のパッケージではありませんが、便宜"
"上そう呼びます。) 標準ライブラリの大部分はルートパッケージに入っています、ま"
"た、多くの小規模な単体のサードパーティモジュールで、他の大規模なモジュールコ"
"レクションに属していないものもここに入ります。正規のパッケージと違い、ルート"
"パッケージ上のモジュールの実体は様々なディレクトリにあります: 実際は、 ``sys."
"path`` に列挙されているディレクトリ全てが、ルートパッケージに配置されるモ"
"ジュールの内容に影響します。"

#: ../../distutils/introduction.rst:190
msgid "Distutils-specific terminology"
msgstr "Distutils 固有の用語"

#: ../../distutils/introduction.rst:192
msgid ""
"The following terms apply more specifically to the domain of distributing "
"Python modules using the Distutils:"
msgstr ""
"以下は Distutils を使って Python モジュールを配布する際に使われる特有の用語で"
"す:"

#: ../../distutils/introduction.rst:201
msgid "module distribution"
msgstr "モジュール配布物"

#: ../../distutils/introduction.rst:196
msgid ""
"a collection of Python modules distributed together as a single downloadable "
"resource and meant to be installed *en masse*.  Examples of some well-known "
"module distributions are NumPy, SciPy, Pillow, or mxBase.  (This would be "
"called a *package*, except that term is already taken in the Python context: "
"a single module distribution may contain zero, one, or many Python packages.)"
msgstr ""
"単一のダウンロード可能なリソースとして配布され、*一纏めに* インストールでき"
"る Python モジュールの集まりです。よく知られているモジュール配布物の例は "
"NumPy、SciPy、Pillow、mxBase です。(Python の文脈で既に使われてるとき以外は、"
"これは *パッケージ* と呼ばれます: 1 つのモジュール配布物は 0 個か 1 個かもっ"
"と多くの Python パッケージを含みます。)"

#: ../../distutils/introduction.rst:205
msgid "pure module distribution"
msgstr "pure module distribution"

#: ../../distutils/introduction.rst:204
msgid ""
"a module distribution that contains only pure Python modules and packages. "
"Sometimes referred to as a \"pure distribution.\""
msgstr ""
"pure Python モジュールやパッケージだけが入ったモジュール配布物です。\"pure 配"
"布物 (pure distribution)\" とも呼ばれます。"

#: ../../distutils/introduction.rst:209
msgid "non-pure module distribution"
msgstr "non-pure module distribution"

#: ../../distutils/introduction.rst:208
msgid ""
"a module distribution that contains at least one extension module.  "
"Sometimes referred to as a \"non-pure distribution.\""
msgstr ""
"少なくとも一つの拡張モジュールが入ったモジュール配布物です。\"非 pure 配布物"
"\"とも呼びます。"

#: ../../distutils/introduction.rst:213
msgid "distribution root"
msgstr "配布物ルート"

#: ../../distutils/introduction.rst:212
msgid ""
"the top-level directory of your source tree (or  source distribution); the "
"directory where :file:`setup.py` exists.  Generally  :file:`setup.py` will "
"be run from this directory."
msgstr ""
"ソースコードツリー (またはソース配布物) ディレクトリの最上階層で、 :file:"
"`setup.py` のある場所です。一般的には、 :file:`setup.py` はこのディレクトリ上"
"で実行します。"
