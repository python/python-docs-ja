# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
# Tetsuo Koyama <tkoyama010@gmail.com>, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:18+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../distutils/packageindex.rst:9
msgid "The Python Package Index (PyPI)"
msgstr "Python Package Index (PyPI)"

#: ../../distutils/packageindex.rst:11
msgid ""
"The `Python Package Index (PyPI)`_ stores :ref:`meta-data <meta-data>` "
"describing distributions packaged with distutils, as well as package data "
"like distribution files if a package author wishes."
msgstr ""
"`Python Package Index (PyPI)`_ はパッケージ作者が望む場合、配布ファイルのよう"
"なパッケージデータだけでなく、 distutils でパッケージされた配布物について記述"
"した :ref:`メタデータ <meta-data>` も保存します。"

#: ../../distutils/packageindex.rst:15
msgid ""
"Distutils provides the :command:`register` and :command:`upload` commands "
"for pushing meta-data and distribution files to PyPI, respectively.  See :"
"ref:`package-commands` for information on these commands."
msgstr ""
"Distutils には、メタデータの発行を行う :command:`register` と、PyPI に配布物"
"をアップロードする :command:`upload` コマンドが用意されています。これらコマン"
"ドについての詳細は :ref:`package-commands` を参照してください。"

#: ../../distutils/packageindex.rst:21
msgid "PyPI overview"
msgstr "PyPI の概要"

#: ../../distutils/packageindex.rst:23
msgid ""
"PyPI lets you submit any number of versions of your distribution to the "
"index. If you alter the meta-data for a particular version, you can submit "
"it again and the index will be updated."
msgstr ""
"配布物の様々なバージョンについて、好きなだけインデクスへの提出を行ってかまい"
"ません。特定のバージョンに関するメタデータを入れ替えたければ、再度提出を行え"
"ば、インデクス上のデータが更新されます。"

#: ../../distutils/packageindex.rst:27
msgid ""
"PyPI holds a record for each (name, version) combination submitted.  The "
"first user to submit information for a given name is designated the Owner of "
"that name.  Changes can be submitted through the :command:`register` command "
"or through the web interface.  Owners can designate other users as Owners or "
"Maintainers.  Maintainers can edit the package information, but not "
"designate new Owners or Maintainers."
msgstr ""
"PyPI は提出された配布物の (名前、バージョン) の各組み合わせについて記録を保持"
"しています。ある配布物名について最初に情報を提出したユーザが、 その配布物名の"
"オーナ (owner) になります。変更は :command:`register` コマンドか、web インタ"
"フェースを介して提出できます。オーナは他のユーザをオーナやメンテナとして指名"
"できます。 メンテナはパッケージ情報を編集できますが、他の人をオーナやメンテナ"
"に指名することはできません。"

#: ../../distutils/packageindex.rst:34
msgid ""
"By default PyPI displays only the newest version of a given package.  The "
"web interface lets one change this default behavior and manually select "
"which versions to display and hide."
msgstr ""
"デフォルトでは PyPI はパッケージの最新バージョンしか表示しません。Web イン"
"ターフェースからこのデフォルトの振る舞いを変更することができ、手動でどのバー"
"ジョンを見せ、どのバージョンを見せないかを選べます。"

#: ../../distutils/packageindex.rst:38
msgid ""
"For each version, PyPI displays a home page.  The home page is created from "
"the ``long_description`` which can be submitted via the :command:`register` "
"command.  See :ref:`package-display` for more information."
msgstr ""
"それぞれのバージョンについて、 PyPI はホームページを表示します。ホームページ"
"は :command:`register` コマンドで提出出来る ``long_description`` から作られま"
"す。詳細については :ref:`package-display` をご覧ください。"

#: ../../distutils/packageindex.rst:46
msgid "Distutils commands"
msgstr "distutils コマンド"

#: ../../distutils/packageindex.rst:48
msgid ""
"Distutils exposes two commands for submitting package data to PyPI: the :ref:"
"`register <package-register>` command for submitting meta-data to PyPI and "
"the :ref:`upload <package-upload>` command for submitting distribution "
"files.  Both commands read configuration data from a special file called a :"
"ref:`.pypirc file <pypirc>`."
msgstr ""
"distutils には PyPI にパッケージのデータを送信するための 2 つのコマンドがあり"
"ます: PyPI にメタデータを送信するための :ref:`register <package-register>` と"
"配布物ファイルを送信するための :ref:`upload <package-upload>` です。どちらの"
"コマンドも、  :ref:`.pypirc ファイル <pypirc>` という特別なファイルから設定"
"データを読みます。"

#: ../../distutils/packageindex.rst:58
msgid "The ``register`` command"
msgstr "``register`` コマンド"

#: ../../distutils/packageindex.rst:60
msgid ""
"The distutils command :command:`register` is used to submit your "
"distribution's meta-data to an index server. It is invoked as follows::"
msgstr ""
"Distutils の :command:`register` コマンドは、配布物のメタデータをインデックス"
"サーバーに送信するために使います。次のように実行します::"

#: ../../distutils/packageindex.rst:65
msgid "Distutils will respond with the following prompt::"
msgstr "Distutils は以下のようなプロンプトを出します::"

#: ../../distutils/packageindex.rst:75
msgid ""
"Note: if your username and password are saved locally, you will not see this "
"menu.  Also, refer to :ref:`pypirc` for how to store your credentials in a :"
"file:`.pypirc` file."
msgstr ""
"注意: ユーザ名とパスワードをローカルに保存している場合、このメニューは表示さ"
"れません。認証情報を :file:`.pypirc` ファイルに保存する方法については :ref:"
"`pypirc` を参照してください。"

#: ../../distutils/packageindex.rst:79
msgid ""
"If you have not registered with PyPI, then you will need to do so now. You "
"should choose option 2, and enter your details as required. Soon after "
"submitting your details, you will receive an email which will be used to "
"confirm your registration."
msgstr ""
"まだ PyPI に登録したことがなければ、まず登録する必要があります。この場合選択"
"肢 2 番を選び、リクエストされた詳細情報を入力してゆきます。詳細情報を提出し終"
"えると、登録情報の承認を行うためのメールを受け取るはずです。"

#: ../../distutils/packageindex.rst:84
msgid ""
"Once you are registered, you may choose option 1 from the menu. You will be "
"prompted for your PyPI username and password, and :command:`register` will "
"then submit your meta-data to the index."
msgstr ""
"すでに登録を行ったことがあれば、選択肢 1 を選べます。この選択肢を選ぶと、"
"PyPI ユーザ名とパスワードを入力するよう促され、 :command:`register` がメタ"
"データをインデクスに自動的に提出します。"

#: ../../distutils/packageindex.rst:88
msgid ""
"See :ref:`package-cmdoptions` for options to the :command:`register` command."
msgstr ""
":command:`register` コマンドのオプションについては :ref:`package-cmdoptions` "
"を参照してください。"

#: ../../distutils/packageindex.rst:94
msgid "The ``upload`` command"
msgstr "``upload`` コマンド"

#: ../../distutils/packageindex.rst:96
msgid ""
"The distutils command :command:`upload` pushes the distribution files to "
"PyPI."
msgstr ""
"Distutils のコマンド :command:`upload` は、配布物ファイルを PyPI へ送ります。"

#: ../../distutils/packageindex.rst:98
msgid ""
"The command is invoked immediately after building one or more distribution "
"files.  For example, the command ::"
msgstr ""
"このコマンドは一つ以上の配布物ファイルをビルドした直後に呼び出されます。例え"
"ば、次のコマンド ::"

#: ../../distutils/packageindex.rst:103
msgid ""
"will cause the source distribution and the Windows installer to be uploaded "
"to PyPI.  Note that these will be uploaded even if they are built using an "
"earlier invocation of :file:`setup.py`, but that only distributions named on "
"the command line for the invocation including the :command:`upload` command "
"are uploaded."
msgstr ""
"は、ソース配布物とWindowsのインストーラをPyPIにアップロードします。以前に :"
"file:`setup.py` を実行してビルドした配布物もアップロード対象になるけれども、"
"アップロードされるのは :command:`upload` コマンドと同時に指定された配布物だけ"
"だということに注意してください。"

#: ../../distutils/packageindex.rst:108
msgid ""
"If a :command:`register` command was previously called in the same command, "
"and if the password was entered in the prompt, :command:`upload` will reuse "
"the entered password.  This is useful if you do not want to store a password "
"in clear text in a :file:`.pypirc` file."
msgstr ""
"同じコマンド内で :command:`register` コマンドが呼ばれていて、そこでプロンプト"
"からパスワードを入力した場合、 :command:`upload` は入力されたパスワードを再利"
"用します。 :file:`$HOME/.pypirc` ファイルにプレインテキストでパスワードを保存"
"したくない場合はこの方法を利用できます。"

#: ../../distutils/packageindex.rst:113
msgid ""
"You can use the ``--sign`` option to tell :command:`upload` to sign each "
"uploaded file using GPG (GNU Privacy Guard).  The  :program:`gpg` program "
"must be available for execution on the system :envvar:`PATH`.  You can also "
"specify which key to use for signing using the ``--identity=name`` option."
msgstr ""
" ``--sign`` オプションを使って、アップロードされたファイルそれぞれに GPG "
"(GNU Privacy Guard) を使って署名するよう :command:`upload` に指示ができま"
"す。 :program:`gpg` プログラムが実行できるためには、システムの :envvar:"
"`PATH` にいなければなりません。 ``--identity=name`` オプションを使って、署名"
"にどのキーを使うのか指定できます。"

#: ../../distutils/packageindex.rst:118
msgid ""
"See :ref:`package-cmdoptions` for additional options to the :command:"
"`upload` command."
msgstr ""
":command:`upload` コマンドの追加のオプションについては :ref:`package-"
"cmdoptions` を参照してください。"

#: ../../distutils/packageindex.rst:125
msgid "Additional command options"
msgstr "追加のコマンドオプション"

#: ../../distutils/packageindex.rst:127
msgid ""
"This section describes options common to both the :command:`register` and :"
"command:`upload` commands."
msgstr ""
"このセクションで説明するオプションは :command:`register`, :command:`upload` "
"の両コマンドに共通です。"

#: ../../distutils/packageindex.rst:130
msgid ""
"The ``--repository`` or ``-r`` option lets you specify a PyPI server "
"different from the default.  For example::"
msgstr ""
"``--repository`` または ``-r`` オプションで、デフォルトとは異なる PyPI サーバ"
"を指定出来ます。例えば::"

#: ../../distutils/packageindex.rst:135
msgid ""
"For convenience, a name can be used in place of the URL when the :file:`."
"pypirc` file is configured to do so.  For example::"
msgstr ""
"簡単のために、 :file:`.pypirc` ファイルでそのように設定してあれば、URL の場所"
"に名前を使えます。例えば::"

#: ../../distutils/packageindex.rst:140
msgid "See :ref:`pypirc` for more information on defining alternate servers."
msgstr ""
"代替サーバーを定義することについて、より詳しい情報は :ref:`pypirc` を参照して"
"ください。"

#: ../../distutils/packageindex.rst:142
msgid ""
"The ``--show-response`` option displays the full response text from the PyPI "
"server, which is useful when debugging problems with registering and "
"uploading."
msgstr ""
"``--show-response`` オプションを指定することで、 PyPI サーバからの全ての応答"
"をテキストで表示します。これは登録時・アップロード時に何か問題があった場合の"
"デバッグに有用です。"

#: ../../distutils/packageindex.rst:153
msgid "The ``.pypirc`` file"
msgstr "``.pypirc`` ファイル"

#: ../../distutils/packageindex.rst:155
msgid ""
"The :command:`register` and :command:`upload` commands both check for the "
"existence of a :file:`.pypirc` file at the location :file:`$HOME/.pypirc`. "
"If this file exists, the command uses the username, password, and repository "
"URL configured in the file.  The format of a :file:`.pypirc` file is as "
"follows:"
msgstr ""
":command:`register`, :command:`upload` コマンドともに、 :file:`.pypirc` ファ"
"イルが :file:`$HOME/.pypirc` にいるかどうかをチェックします。このファイルがあ"
"れば、これらコマンドはユーザ名、パスワード、登録 URL として、このファイルで設"
"定されているものを使います。 :file:`.pypirc` ファイルのフォーマットは以下のよ"
"うなものです:"

#: ../../distutils/packageindex.rst:172
msgid ""
"The *distutils* section defines an *index-servers* variable that lists the "
"name of all sections describing a repository."
msgstr ""
"*distutils* セクションは、 *index-servers* でリポジトリを設定する全てのセク"
"ション名の リストを定義しています。"

#: ../../distutils/packageindex.rst:175
msgid "Each section describing a repository defines three variables:"
msgstr "リポジトリを表す各セクションは3つの変数を定義します:"

#: ../../distutils/packageindex.rst:177
msgid "*repository*, that defines the url of the PyPI server. Defaults to"
msgstr "*repository* は PyPI サーバの URL を定義します。"

#: ../../distutils/packageindex.rst:178
msgid "``https://upload.pypi.org/legacy/``."
msgstr "デフォルトは ``https://upload.pypi.org/legacy/`` です。"

#: ../../distutils/packageindex.rst:179
msgid "*username*, which is the registered username on the PyPI server."
msgstr "*username* は PyPI サーバーに登録されたユーザー名です。"

#: ../../distutils/packageindex.rst:181
msgid "*password*, that will be used to authenticate. If omitted the user"
msgstr "*password* は認証に使われます。"

#: ../../distutils/packageindex.rst:181
msgid "will be prompt to type it when needed."
msgstr "省略された場合、必要なときに入力を求められます。"

#: ../../distutils/packageindex.rst:183
msgid ""
"If you want to define another server a new section can be created and listed "
"in the *index-servers* variable:"
msgstr ""
"別のサーバーを定義した場合は、新しいセクションを作成し、 *index-servers* に追"
"加します:"

#: ../../distutils/packageindex.rst:203
msgid ""
"This allows the :command:`register` and :command:`upload` commands to be "
"called with the ``--repository`` option as described in :ref:`package-"
"cmdoptions`."
msgstr ""
"これらセクションは :command:`register`, :command:`upload` コマンドで、 :ref:"
"`package-cmdoptions` で説明した ``--repository`` オプションとともに使うことが"
"出来ます。"

#: ../../distutils/packageindex.rst:207
msgid ""
"Specifically, you might want to add the `PyPI Test Repository <https://wiki."
"python.org/moin/TestPyPI>`_ to your ``.pypirc`` to facilitate testing before "
"doing your first upload to ``PyPI`` itself."
msgstr ""
"特に、 ``PyPI`` そのものに最初にアップロードする前にテストするのを容易にすべ"
"く、あなたの ``.pypirc`` には `PyPI Test Repository <https://wiki.python.org/"
"moin/TestPyPI>`_ を追加したいでしょう。"

#: ../../distutils/packageindex.rst:215
msgid "PyPI package display"
msgstr "PyPI パッケージ表示"

#: ../../distutils/packageindex.rst:217
msgid ""
"The ``long_description`` field plays a special role at PyPI. It is used by "
"the server to display a home page for the registered package."
msgstr ""
"``long_description`` フィールドは PyPI において特別な役目を持ちます。サーバー"
"は登録されたパッケージのホームページを表示するためにこれを利用します。"

#: ../../distutils/packageindex.rst:220
msgid ""
"If you use the `reStructuredText <http://docutils.sourceforge.net/rst."
"html>`_ syntax for this field, PyPI will parse it and display an HTML output "
"for the package home page."
msgstr ""
"このフィールドに `reStructuredText <http://docutils.sourceforge.net/rst."
"html>`_ 記法を利用した場合、PyPI はこれをパースして、パッケージのホームページ"
"にHTML 出力を表示します。"

#: ../../distutils/packageindex.rst:224
msgid ""
"The ``long_description`` field can be attached to a text file located in the "
"package::"
msgstr ""
"``long_description`` フィールドにパッケージ内のファイルの内容を利用することも"
"できます::"

#: ../../distutils/packageindex.rst:235
msgid ""
"In that case, :file:`README.txt` is a regular reStructuredText text file "
"located in the root of the package besides :file:`setup.py`."
msgstr ""
"この例では、 :file:`README.txt` は通常の reStructuredText テキストファイル"
"で、 :file:`setup.py` と同じパッケージのルートディレクトリに置かれています。"

#: ../../distutils/packageindex.rst:238
msgid ""
"To prevent registering broken reStructuredText content, you can use the :"
"program:`rst2html` program that is provided by the :mod:`docutils` package "
"and check the ``long_description`` from the command line:"
msgstr ""
"壊れた reStructuredText を登録してしまうのを防ぐために、コマンドラインから :"
"mod:`docutils` パッケージが提供している :program:`rst2html` プログラムを利用"
"して ``long_description`` をチェックすることができます:"

#: ../../distutils/packageindex.rst:246
msgid ""
":mod:`docutils` will display a warning if there's something wrong with your "
"syntax.  Because PyPI applies additional checks (e.g. by passing ``--no-"
"raw`` to ``rst2html.py`` in the command above), being able to run the "
"command above without warnings does not guarantee that PyPI will convert the "
"content successfully."
msgstr ""
":mod:`docutils` は文法に何か問題があると警告を表示します。 PyPI は他にも"
"チェックを行うので (例えば ``rst2html.py`` に ``--no-raw`` を指定します)、上"
"のコマンドを警告なしに実行できたとしても PyPI での変換が成功することを保証す"
"るわけではありません。"
