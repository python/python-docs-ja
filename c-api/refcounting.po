# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Arihiro TAKASE, 2023
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-11 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:50+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/refcounting.rst:8
msgid "Reference Counting"
msgstr "参照カウント"

#: ../../c-api/refcounting.rst:10
msgid ""
"The functions and macros in this section are used for managing reference "
"counts of Python objects."
msgstr ""
"このセクションにある関数とマクロは、 Python オブジェクトの参照カウントの管理"
"に使用されます。"

#: ../../c-api/refcounting.rst:16
msgid "Get the reference count of the Python object *o*."
msgstr "Python オブジェクト *o* の参照カウントを取得します。"

#: ../../c-api/refcounting.rst:18
msgid ""
"Note that the returned value may not actually reflect how many references to "
"the object are actually held.  For example, some objects are :term:"
"`immortal` and have a very high refcount that does not reflect the actual "
"number of references.  Consequently, do not rely on the returned value to be "
"accurate, other than a value of 0 or 1."
msgstr ""
"戻り値は、実際に保持されているオブジェクトの参照の数を実際に反映しているとは"
"限らないことに注意してください。例えば、一部のオブジェクトは永続 (:term:"
"`immortal`) であり、実際の参照の数を反映しない非常に高い参照数を持ちます。し"
"たがって、 0 か 1 の値以外では、正確な戻り値に頼らないでください。"

#: ../../c-api/refcounting.rst:24
msgid ""
"Use the :c:func:`Py_SET_REFCNT()` function to set an object reference count."
msgstr ""
"オブジェクトの参照カウントを設定するためには、 :c:func:`Py_SET_REFCNT()` 関数"
"を使用してください。"

#: ../../c-api/refcounting.rst:26
msgid ":c:func:`Py_REFCNT()` is changed to the inline static function."
msgstr ":c:func:`Py_REFCNT()` は static なインライン関数に変更されました。"

#: ../../c-api/refcounting.rst:29
msgid "The parameter type is no longer :c:expr:`const PyObject*`."
msgstr "引数の型は :c:expr:`const PyObject*` ではなくなりました。"

#: ../../c-api/refcounting.rst:35
msgid "Set the object *o* reference counter to *refcnt*."
msgstr "オブジェクト *o* の参照カウントを *refcnt* に設定します。"

#: ../../c-api/refcounting.rst:37
msgid ""
"On :ref:`Python build with Free Threading <free-threading-build>`, if "
"*refcnt* is larger than ``UINT32_MAX``, the object is made :term:`immortal`."
msgstr ""
":ref:`フリースレッドな Python ビルド <free-threading-build>` では、 *refcnt* "
"が ``UINT32_MAX`` より大きい場合、オブジェクトは永続 (:term:`immortal`) とな"
"ります。"

#: ../../c-api/refcounting.rst:40 ../../c-api/refcounting.rst:53
#: ../../c-api/refcounting.rst:119
msgid "This function has no effect on :term:`immortal` objects."
msgstr "この関数は永続 (:term:`immortal`) オブジェクトには何もしません。"

#: ../../c-api/refcounting.rst:44 ../../c-api/refcounting.rst:68
#: ../../c-api/refcounting.rst:147
msgid "Immortal objects are not modified."
msgstr "永続オブジェクトは変更されません。"

#: ../../c-api/refcounting.rst:50
msgid ""
"Indicate taking a new :term:`strong reference` to object *o*, indicating it "
"is in use and should not be destroyed."
msgstr ""
"オブジェクト *o* への新しい :term:`強参照 <strong reference>` を取得し、それ"
"が使用中で破棄されてはならないことを示します。"

#: ../../c-api/refcounting.rst:55
msgid ""
"This function is usually used to convert a :term:`borrowed reference` to a :"
"term:`strong reference` in-place. The :c:func:`Py_NewRef` function can be "
"used to create a new :term:`strong reference`."
msgstr ""

#: ../../c-api/refcounting.rst:59
msgid "When done using the object, release is by calling :c:func:`Py_DECREF`."
msgstr ""

#: ../../c-api/refcounting.rst:61
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XINCREF`."
msgstr ""
"オブジェクトが ``NULL`` であってはいけません。それが ``NULL`` ではないと確信"
"が持てないならば、 :c:func:`Py_XINCREF` を使ってください。"

#: ../../c-api/refcounting.rst:64
msgid ""
"Do not expect this function to actually modify *o* in any way. For at least :"
"pep:`some objects <0683>`, this function has no effect."
msgstr ""

#: ../../c-api/refcounting.rst:74
msgid ""
"Similar to :c:func:`Py_INCREF`, but the object *o* can be ``NULL``, in which "
"case this has no effect."
msgstr ""

#: ../../c-api/refcounting.rst:77
msgid "See also :c:func:`Py_XNewRef`."
msgstr ""

#: ../../c-api/refcounting.rst:82
msgid ""
"Create a new :term:`strong reference` to an object: call :c:func:`Py_INCREF` "
"on *o* and return the object *o*."
msgstr ""

#: ../../c-api/refcounting.rst:85
msgid ""
"When the :term:`strong reference` is no longer needed, :c:func:`Py_DECREF` "
"should be called on it to release the reference."
msgstr ""

#: ../../c-api/refcounting.rst:88
msgid ""
"The object *o* must not be ``NULL``; use :c:func:`Py_XNewRef` if *o* can be "
"``NULL``."
msgstr ""

#: ../../c-api/refcounting.rst:91
msgid "For example::"
msgstr "例えば::"

#: ../../c-api/refcounting.rst:93
msgid ""
"Py_INCREF(obj);\n"
"self->attr = obj;"
msgstr ""

#: ../../c-api/refcounting.rst:96
msgid "can be written as::"
msgstr ""

#: ../../c-api/refcounting.rst:98
msgid "self->attr = Py_NewRef(obj);"
msgstr ""

#: ../../c-api/refcounting.rst:100
msgid "See also :c:func:`Py_INCREF`."
msgstr ""

#: ../../c-api/refcounting.rst:107
msgid "Similar to :c:func:`Py_NewRef`, but the object *o* can be NULL."
msgstr ""

#: ../../c-api/refcounting.rst:109
msgid "If the object *o* is ``NULL``, the function just returns ``NULL``."
msgstr ""

#: ../../c-api/refcounting.rst:116
msgid ""
"Release a :term:`strong reference` to object *o*, indicating the reference "
"is no longer used."
msgstr ""

#: ../../c-api/refcounting.rst:121
msgid ""
"Once the last :term:`strong reference` is released (i.e. the object's "
"reference count reaches 0), the object's type's deallocation function (which "
"must not be ``NULL``) is invoked."
msgstr ""

#: ../../c-api/refcounting.rst:126
msgid ""
"This function is usually used to delete a :term:`strong reference` before "
"exiting its scope."
msgstr ""

#: ../../c-api/refcounting.rst:129
msgid ""
"The object must not be ``NULL``; if you aren't sure that it isn't ``NULL``, "
"use :c:func:`Py_XDECREF`."
msgstr ""
"オブジェクトが ``NULL`` であってはいけません。それが ``NULL`` ではないと確信"
"が持てないならば、 :c:func:`Py_XDECREF` を使ってください。"

#: ../../c-api/refcounting.rst:132
msgid ""
"Do not expect this function to actually modify *o* in any way. For at least :"
"pep:`some objects <683>`, this function has no effect."
msgstr ""

#: ../../c-api/refcounting.rst:138
msgid ""
"The deallocation function can cause arbitrary Python code to be invoked (e."
"g. when a class instance with a :meth:`~object.__del__` method is "
"deallocated).  While exceptions in such code are not propagated, the "
"executed code has free access to all Python global variables.  This means "
"that any object that is reachable from a global variable should be in a "
"consistent state before :c:func:`Py_DECREF` is invoked.  For example, code "
"to delete an object from a list should copy a reference to the deleted "
"object in a temporary variable, update the list data structure, and then "
"call :c:func:`Py_DECREF` for the temporary variable."
msgstr ""

#: ../../c-api/refcounting.rst:153
msgid ""
"Similar to :c:func:`Py_DECREF`, but the object *o* can be ``NULL``, in which "
"case this has no effect. The same warning from :c:func:`Py_DECREF` applies "
"here as well."
msgstr ""

#: ../../c-api/refcounting.rst:160
msgid ""
"Release a :term:`strong reference` for object *o*. The object may be "
"``NULL``, in which case the macro has no effect; otherwise the effect is the "
"same as for :c:func:`Py_DECREF`, except that the argument is also set to "
"``NULL``.  The warning for :c:func:`Py_DECREF` does not apply with respect "
"to the object passed because the macro carefully uses a temporary variable "
"and sets the argument to ``NULL`` before releasing the reference."
msgstr ""

#: ../../c-api/refcounting.rst:168
msgid ""
"It is a good idea to use this macro whenever releasing a reference to an "
"object that might be traversed during garbage collection."
msgstr ""

#: ../../c-api/refcounting.rst:171
msgid ""
"The macro argument is now only evaluated once. If the argument has side "
"effects, these are no longer duplicated."
msgstr ""

#: ../../c-api/refcounting.rst:178
msgid ""
"Indicate taking a new :term:`strong reference` to object *o*. A function "
"version of :c:func:`Py_XINCREF`. It can be used for runtime dynamic "
"embedding of Python."
msgstr ""

#: ../../c-api/refcounting.rst:185
msgid ""
"Release a :term:`strong reference` to object *o*. A function version of :c:"
"func:`Py_XDECREF`. It can be used for runtime dynamic embedding of Python."
msgstr ""

#: ../../c-api/refcounting.rst:192
msgid ""
"Macro safely releasing a :term:`strong reference` to object *dst* and "
"setting *dst* to *src*."
msgstr ""

#: ../../c-api/refcounting.rst:195
msgid "As in case of :c:func:`Py_CLEAR`, \"the obvious\" code can be deadly::"
msgstr ""

#: ../../c-api/refcounting.rst:197
msgid ""
"Py_DECREF(dst);\n"
"dst = src;"
msgstr ""

#: ../../c-api/refcounting.rst:200
msgid "The safe way is::"
msgstr ""

#: ../../c-api/refcounting.rst:202
msgid "Py_SETREF(dst, src);"
msgstr ""

#: ../../c-api/refcounting.rst:204
msgid ""
"That arranges to set *dst* to *src* _before_ releasing the reference to the "
"old value of *dst*, so that any code triggered as a side-effect of *dst* "
"getting torn down no longer believes *dst* points to a valid object."
msgstr ""

#: ../../c-api/refcounting.rst:211 ../../c-api/refcounting.rst:223
msgid ""
"The macro arguments are now only evaluated once. If an argument has side "
"effects, these are no longer duplicated."
msgstr ""

#: ../../c-api/refcounting.rst:218
msgid ""
"Variant of :c:macro:`Py_SETREF` macro that uses :c:func:`Py_XDECREF` instead "
"of :c:func:`Py_DECREF`."
msgstr ""
