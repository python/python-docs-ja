# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2018
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:48+0000\n"
"Last-Translator: tomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "オブジェクトをヒープ上にメモリ確保する"

#: ../../c-api/allocation.rst:17
msgid ""
"Initialize a newly-allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the "
"object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""
"新たにメモリ確保されたオブジェクト *op* に対し、型と初期状態での参照 "
"(initial reference) を初期化します。初期化されたオブジェクトを返します。"
"*type* からそのオブジェクトが循環参照ガベージ検出の機能を有する場合、検出機構"
"が監視対象とするオブジェクトのセットに追加されます。オブジェクトの他のフィー"
"ルドには影響を及ぼしません。"

#: ../../c-api/allocation.rst:26
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""
":c:func:`PyObject_Init` の全ての処理を行い、可変サイズオブジェクトの場合には"
"長さ情報も初期化します。"

#: ../../c-api/allocation.rst:32
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized; the object's reference count will be one.  The size of "
"the memory allocation is determined from the :c:member:`~PyTypeObject."
"tp_basicsize` field of the type object."
msgstr ""
"C 構造体型 *TYPE* と Python型オブジェクト *type* を使って、新しい Python オブ"
"ジェクトをメモリ上に確保します。Pythonオブジェクトヘッダで定義されていない"
"フィールドは初期化されません; オブジェクトの参照カウントは 1 になります。確保"
"するメモリのサイズは型オブジェクトの  :c:member:`~PyTypeObject.tp_basicsize` "
"フィールドで決まります。"

#: ../../c-api/allocation.rst:41
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized.  The allocated memory allows for the *TYPE* structure "
"plus *size* fields of the size given by the :c:member:`~PyTypeObject."
"tp_itemsize` field of *type*.  This is useful for implementing objects like "
"tuples, which are able to determine their size at construction time.  "
"Embedding the array of fields into the same allocation decreases the number "
"of allocations, improving the memory management efficiency."
msgstr ""
"C 構造体型 *TYPE* と Python 型オブジェクト *type* を使って新しい Python オブ"
"ジェクトをメモリ上に確保します。 Python オブジェクトヘッダで定義されていない"
"フィールドは初期化されません。確保されたメモリは、 *TYPE* 構造体に加え、"
"*type* の :c:member:`~PyTypeObject.tp_itemsize` フィールドで指定されているサ"
"イズを *size* 個分の大きさを格納できます。この関数は、例えばタプルのように生"
"成時にサイズを決定できるオブジェクトを実装する際に便利です。一連の複数の"
"フィールドのメモリ割り当てを一度で行うことでアロケーション回数を減らし、メモ"
"リ管理の効率が向上します。"

#: ../../c-api/allocation.rst:53
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_New` or :c:"
"func:`PyObject_NewVar`.  This is normally called from the :c:member:"
"`~PyTypeObject.tp_dealloc` handler specified in the object's type.  The "
"fields of the object should not be accessed after this call as the memory is "
"no longer a valid Python object."
msgstr ""
":c:func:`PyObject_New` や :c:func:`PyObject_NewVar` で 確保したメモリを解放し"
"ます。通常、この関数はオブジェクトの型に指定されている :c:member:"
"`~PyTypeObject.tp_dealloc` ハンドラから呼び出されます。 この関数を呼び出した"
"後は、メモリ領域はもはや有効な Python オブジェクトを表現していないので、オブ"
"ジェクトのフィールド に対してアクセスしてはなりません。"

#: ../../c-api/allocation.rst:62
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""
"Python からは ``None`` に見えるオブジェクトです。この値へのアクセスは、このオ"
"ブジェクトへのポインタを評価する :c:macro:`Py_None` マクロを使わなければなり"
"ません。"

#: ../../c-api/allocation.rst:69
msgid ":c:func:`PyModule_Create`"
msgstr ":c:func:`PyModule_Create`"

#: ../../c-api/allocation.rst:70
msgid "To allocate and create extension modules."
msgstr "拡張モジュールのアロケートと生成。"
