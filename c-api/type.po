# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:19+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/type.rst:6
msgid "Type Objects"
msgstr "型オブジェクト"

#: ../../c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr "組み込み型を記述する際に用いられる、オブジェクトを表す C 構造体です。"

#: ../../c-api/type.rst:20
msgid ""
"This is the type object for type objects; it is the same object as ``type`` "
"and ``types.TypeType`` in the Python layer."
msgstr ""
"型オブジェクト自身の型オブジェクトです; Python レイヤにおける :class:`type` "
"や ``types.TypeType`` と同じオブジェクトです。"

#: ../../c-api/type.rst:26
msgid ""
"Return true if the object *o* is a type object, including instances of types "
"derived from the standard type object.  Return false in all other cases."
msgstr ""
"オブジェクト *o* が型オブジェクトの場合に真を返します。標準型オブジェクトから"
"派生したサブタイプ (subtype) のインスタンスも含みます。その他の場合には偽を返"
"します。"

#: ../../c-api/type.rst:32
msgid ""
"Return true if the object *o* is a type object, but not a subtype of the "
"standard type object.  Return false in all other cases."
msgstr ""
"オブジェクト *o* が型オブジェクトの場合に真を返します。標準型のサブタイプの場"
"合は含みません。その他の場合には偽を返します。"

#: ../../c-api/type.rst:40
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr "内部の検索キャッシュをクリアします。現在のバージョンタグを返します。"

#: ../../c-api/type.rst:47
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes "
"or base classes of the type."
msgstr ""
"内部の検索キャッシュを、その type とすべてのサブタイプに対して無効にします。"
"この関数は type の属性や基底クラス列を変更したあとに手動で呼び出さなければな"
"りません。"

#: ../../c-api/type.rst:56
msgid ""
"Return true if the type object *o* sets the feature *feature*.  Type "
"features are denoted by single bit flags."
msgstr ""
"型オブジェクト *o* に、型機能 *feature* が設定されている場合に真を返します。"
"型機能は各々単一ビットのフラグで表されます。"

#: ../../c-api/type.rst:62
msgid ""
"Return true if the type object includes support for the cycle detector; this "
"tests the type flag :const:`Py_TPFLAGS_HAVE_GC`."
msgstr ""
"型オブジェクトが *o* が循環参照検出をサポートしている場合に真を返します; この"
"関数は型機能フラグ :const:`Py_TPFLAGS_HAVE_GC` の設定状態をチェックします。"

#: ../../c-api/type.rst:70
msgid "Return true if *a* is a subtype of *b*."
msgstr "*a* が *b* のサブタイプの場合に真を返します。"

#: ../../c-api/type.rst:74
msgid ""
"This function only checks for actual subtypes, which means that :meth:"
"`~class.__subclasscheck__` is not called on *b*.  Call :c:func:"
"`PyObject_IsSubclass` to do the same check that :func:`issubclass` would do."
msgstr ""
"この関数は実際のサブクラスをチェックするだけです。つまり、 :meth:`~class."
"__subclasscheck__` は *b* に対し呼ばれません。 :func:`issubclass` と同じ"
"チェックをするには :c:func:`PyObject_IsSubclass` を呼んでください。"

#: ../../c-api/type.rst:84
msgid ""
"This function used an :c:type:`int` type for *nitems*. This might require "
"changes in your code for properly supporting 64-bit systems."
msgstr ""
"この関数は以前は *nitems* の型に :c:type:`int` を利用していました。この変更に"
"より、 64bit システムを正しくサポートするには修正が必要になります。"

#: ../../c-api/type.rst:96
msgid ""
"Finalize a type object.  This should be called on all type objects to finish "
"their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""
"型オブジェクトの後始末処理 (finalize) を行います。この関数は全てのオブジェク"
"トで初期化を完了するために呼び出されなくてはなりません。この関数は、基底クラ"
"ス型から継承したスロットを型オブジェクトに追加する役割があります。成功した場"
"合には ``0`` を返し、エラーの場合には ``-1`` を返して例外情報を設定します。"
