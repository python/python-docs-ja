# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:49+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/type.rst:6
msgid "Type Objects"
msgstr "型オブジェクト"

#: ../../c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr "組み込み型を記述する際に用いられる、オブジェクトを表す C 構造体です。"

#: ../../c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as :class:"
"`type` in the Python layer."
msgstr ""
"型オブジェクト自身の型オブジェクトです; Python レイヤにおける :class:`type` "
"と同じオブジェクトです。"

#: ../../c-api/type.rst:24
msgid ""
"Return true if the object *o* is a type object, including instances of types "
"derived from the standard type object.  Return false in all other cases."
msgstr ""
"オブジェクト *o* が型オブジェクトの場合に真を返します。標準型オブジェクトから"
"派生したサブタイプのインスタンスも含みます。その他の場合には偽を返します。"

#: ../../c-api/type.rst:30
msgid ""
"Return true if the object *o* is a type object, but not a subtype of the "
"standard type object.  Return false in all other cases."
msgstr ""
"オブジェクト *o* が型オブジェクトの場合に真を返します。標準型のサブタイプの場"
"合は含みません。その他の場合には偽を返します。"

#: ../../c-api/type.rst:36
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr "内部の検索キャッシュをクリアします。現在のバージョンタグを返します。"

#: ../../c-api/type.rst:40
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with `Py_LIMITED_API`; the individual "
"flag bits are guaranteed to be stable across Python releases, but access to :"
"c:member:`~PyTypeObject.tp_flags` itself is not part of the limited API."
msgstr ""
"*type* のメンバーである :c:member:`~PyTypeObject.tp_flags` を返します。この関"
"数は基本的に `Py_LIMITED_API` を定義して使うことを想定しています。それぞれの"
"フラグはpythonの異なるリリースで安定していることが保証されていますが、 :c:"
"member:`~PyTypeObject.tp_flags` 自体は限定されたAPIの一部ではありません。"

#: ../../c-api/type.rst:47
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr "返り値の型が ``long`` ではなく ``unsigned long`` になりました。"

#: ../../c-api/type.rst:53
msgid ""
"Invalidate the internal lookup cache for the type and all of its subtypes.  "
"This function must be called after any manual modification of the attributes "
"or base classes of the type."
msgstr ""
"内部の検索キャッシュを、その type とすべてのサブタイプに対して無効にします。"
"この関数は type の属性や基底クラス列を変更したあとに手動で呼び出さなければな"
"りません。"

#: ../../c-api/type.rst:60
msgid ""
"Return true if the type object *o* sets the feature *feature*.  Type "
"features are denoted by single bit flags."
msgstr ""
"型オブジェクト *o* に、型機能 *feature* が設定されている場合に真を返します。"
"型機能は各々単一ビットのフラグで表されます。"

#: ../../c-api/type.rst:66
msgid ""
"Return true if the type object includes support for the cycle detector; this "
"tests the type flag :const:`Py_TPFLAGS_HAVE_GC`."
msgstr ""
"型オブジェクトが *o* が循環参照検出をサポートしている場合に真を返します; この"
"関数は型機能フラグ :const:`Py_TPFLAGS_HAVE_GC` の設定状態をチェックします。"

#: ../../c-api/type.rst:72
msgid "Return true if *a* is a subtype of *b*."
msgstr "*a* が *b* のサブタイプの場合に真を返します。"

#: ../../c-api/type.rst:74
msgid ""
"This function only checks for actual subtypes, which means that :meth:"
"`~class.__subclasscheck__` is not called on *b*.  Call :c:func:"
"`PyObject_IsSubclass` to do the same check that :func:`issubclass` would do."
msgstr ""
"この関数は実際のサブクラスをチェックするだけです。つまり、 :meth:`~class."
"__subclasscheck__` は *b* に対し呼ばれません。 :func:`issubclass` と同じ"
"チェックをするには :c:func:`PyObject_IsSubclass` を呼んでください。"

#: ../../c-api/type.rst:82
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type "
"object.  Use Python's default memory allocation mechanism to allocate a new "
"instance and initialize all its contents to *NULL*."
msgstr ""
"型オブジェクトの :c:member:`~PyTypeObject.tp_alloc` に対するジェネリックハン"
"ドラです。 Python のデフォルトのメモリアロケートメカニズムを使って新しいイン"
"スタンスをアロケートし、すべての内容を *NULL* で初期化します。"

#: ../../c-api/type.rst:88
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's :c:member:`~PyTypeObject."
"tp_alloc` slot."
msgstr ""
"型オブジェクトの :c:member:`~PyTypeObject.tp_new` に対するジェネリックハンド"
"ラです。型の :c:member:`~PyTypeObject.tp_alloc` スロットを使って新しいインス"
"タンスを作成します。"

#: ../../c-api/type.rst:93
msgid ""
"Finalize a type object.  This should be called on all type objects to finish "
"their initialization.  This function is responsible for adding inherited "
"slots from a type's base class.  Return ``0`` on success, or return ``-1`` "
"and sets an exception on error."
msgstr ""
"型オブジェクトのファイナライズを行います。この関数は全てのオブジェクトで初期"
"化を完了するために呼び出されなくてはなりません。この関数は、基底クラス型から"
"継承したスロットを型オブジェクトに追加する役割があります。成功した場合には "
"``0`` を返し、エラーの場合には ``-1`` を返して例外情報を設定します。"

#: ../../c-api/type.rst:100
msgid ""
"Creates and returns a heap type object from the *spec* passed to the "
"function."
msgstr ""
"関数引数に与えられた *spec* からヒープタイプのオブジェクトを作って返します。"

#: ../../c-api/type.rst:104
msgid ""
"Creates and returns a heap type object from the *spec*. In addition to that, "
"the created heap type contains all types contained by the *bases* tuple as "
"base types. This allows the caller to reference other heap types as base "
"types."
msgstr ""
"*spec* からヒープタイプのオブジェクトを生成して返します。加えて、生成された"
"ヒープタイプは *bases* タプルが保持するすべての型を基底の型として保持します。"
"他のヒープ型を基底型として参照できます。"

#: ../../c-api/type.rst:112
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"*NULL*, this indicates that either the slot is *NULL*, or that the function "
"was called with invalid parameters. Callers will typically cast the result "
"pointer into the appropriate function type."
msgstr ""
"与えられたスロットに格納されている関数ポインタを返します。返り値が *NULL* の"
"場合は、スロットが *NULL* か、関数が不正な引数で呼ばれたことを示します。通"
"常、呼び出し側は返り値のポインタを適切な関数型にキャストします。"
