# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:51+0000\n"
"Last-Translator: tomo, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/conversion.rst:6
msgid "String conversion and formatting"
msgstr "文字列の変換と書式化"

#: ../../c-api/conversion.rst:8
msgid "Functions for number conversion and formatted string output."
msgstr "数値変換と、書式化文字列出力のための関数群。"

#: ../../c-api/conversion.rst:13
msgid ""
"Output not more than *size* bytes to *str* according to the format string "
"*format* and the extra arguments. See the Unix man page :manpage:"
"`snprintf(2)`."
msgstr ""
"書式文字列 *format* と追加の引数から、 *size* バイトを超えない文字列を *str* "
"に出力します。 Unix man page の :manpage:`snprintf(2)` を参照してください。"

#: ../../c-api/conversion.rst:19
msgid ""
"Output not more than *size* bytes to *str* according to the format string "
"*format* and the variable argument list *va*. Unix man page :manpage:"
"`vsnprintf(2)`."
msgstr ""
"書式文字列 *format* と可変長引数リスト *va* から、 *size* バイトを超えない文"
"字列を *str* に出力します。 Unix man page の :manpage:`vsnprintf(2)` を参照し"
"てください。"

#: ../../c-api/conversion.rst:23
msgid ""
":c:func:`PyOS_snprintf` and :c:func:`PyOS_vsnprintf` wrap the Standard C "
"library functions :c:func:`snprintf` and :c:func:`vsnprintf`. Their purpose "
"is to guarantee consistent behavior in corner cases, which the Standard C "
"functions do not."
msgstr ""
":c:func:`PyOS_snprintf` と :c:func:`PyOS_vsnprintf` は標準Cライブラリの :c:"
"func:`snprintf` と :c:func:`vsnprintf` 関数をラップします。これらの関数の目的"
"は、C標準ライブラリが保証していないコーナーケースでの動作を保証することです。"

#: ../../c-api/conversion.rst:28
msgid ""
"The wrappers ensure that *str*[*size*-1] is always ``'\\0'`` upon return. "
"They never write more than *size* bytes (including the trailing ``'\\0'``) "
"into str. Both functions require that ``str != NULL``, ``size > 0`` and "
"``format != NULL``."
msgstr ""
"これらのラッパ関数は、戻るときに *str*[*size*-1] が常に ``'\\0'`` であること"
"を保証します。(str の末尾の ``'\\0'`` を含めて) *size* バイト以上を書き込みま"
"せん。``str != NULL``, ``size > 0``, ``format != NULL`` を要求します。"

#: ../../c-api/conversion.rst:33
msgid ""
"If the platform doesn't have :c:func:`vsnprintf` and the buffer size needed "
"to avoid truncation exceeds *size* by more than 512 bytes, Python aborts "
"with a *Py_FatalError*."
msgstr ""
"もし :c:func:`vsnprintf` のないプラットフォームで、切り捨てを避けるために必要"
"なバッファサイズが *size* を512バイトより大きく超過していれば、 Python は "
"*Py_FatalError* で abort します。"

#: ../../c-api/conversion.rst:37
msgid ""
"The return value (*rv*) for these functions should be interpreted as follows:"
msgstr "これらの関数の戻り値 (以下では *rv* とします) は以下の意味を持ちます:"

#: ../../c-api/conversion.rst:39
msgid ""
"When ``0 <= rv < size``, the output conversion was successful and *rv* "
"characters were written to *str* (excluding the trailing ``'\\0'`` byte at "
"*str*[*rv*])."
msgstr ""
"``0 <= rv < size`` のとき、変換出力は成功して、(最後の *str*[*rv*] にある "
"``'\\0'`` を除いて) *rv* 文字が *str* に出力された。"

#: ../../c-api/conversion.rst:43
msgid ""
"When ``rv >= size``, the output conversion was truncated and a buffer with "
"``rv + 1`` bytes would have been needed to succeed. *str*[*size*-1] is "
"``'\\0'`` in this case."
msgstr ""
"``rv >= size`` のとき、変換出力は切り詰められており、成功するためには ``rv + "
"1`` バイトが必要だったことを示します。*str*[*size*-1] は ``'\\0'`` です。"

#: ../../c-api/conversion.rst:47
msgid ""
"When ``rv < 0``, \"something bad happened.\" *str*[*size*-1] is ``'\\0'`` in "
"this case too, but the rest of *str* is undefined. The exact cause of the "
"error depends on the underlying platform."
msgstr ""
"``rv < 0`` のときは、何か悪いことが起こった時です。この場合でも "
"*str*[*size*-1] は ``'\\0'`` ですが、*str* のそれ以外の部分は未定義です。エ"
"ラーの正確な原因はプラットフォーム依存です。"

#: ../../c-api/conversion.rst:51
msgid ""
"The following functions provide locale-independent string to number "
"conversions."
msgstr "以下の関数は locale 非依存な文字列から数値への変換を行ないます。"

#: ../../c-api/conversion.rst:56
msgid ""
"Convert a string ``s`` to a :c:type:`double`, raising a Python exception on "
"failure.  The set of accepted strings corresponds to the set of strings "
"accepted by Python's :func:`float` constructor, except that ``s`` must not "
"have leading or trailing whitespace. The conversion is independent of the "
"current locale."
msgstr ""
"文字列 ``s`` を :c:type:`double` に変換します。失敗したときは Python の例外を"
"発生させます。受け入れられる文字列は、 Python の :func:`float` コンストラクタ"
"が受け付ける文字列に準拠しますが、 ``s`` の先頭と末尾に空白文字があってはなら"
"ないという部分が異なります。この変換は現在のロケールに依存しません。"

#: ../../c-api/conversion.rst:62
msgid ""
"If ``endptr`` is ``NULL``, convert the whole string.  Raise ValueError and "
"return ``-1.0`` if the string is not a valid representation of a floating-"
"point number."
msgstr ""
"``endptr`` が ``NULL`` の場合、変換は文字列全体に対して行われます。文字列が正"
"しい浮動小数点数の表現になっていない場合は ``-1.0`` を返して ValueError を発"
"生させます。"

#: ../../c-api/conversion.rst:66
msgid ""
"If endptr is not ``NULL``, convert as much of the string as possible and set "
"``*endptr`` to point to the first unconverted character.  If no initial "
"segment of the string is the valid representation of a floating-point "
"number, set ``*endptr`` to point to the beginning of the string, raise "
"ValueError, and return ``-1.0``."
msgstr ""
"endptr が ``NULL`` で無い場合、文字列を可能な範囲で変換して、``*endptr`` に最"
"初の変換されなかった文字へのポインタを格納します。文字列の先頭に正しい浮動小"
"数点数の表現が無かった場合、``*endptr`` を文字列の先頭に設定して、ValueError "
"を発生させ、``-1.0`` を返します。"

#: ../../c-api/conversion.rst:73
msgid ""
"If ``s`` represents a value that is too large to store in a float (for "
"example, ``\"1e500\"`` is such a string on many platforms) then if "
"``overflow_exception`` is ``NULL`` return ``Py_HUGE_VAL`` (with an "
"appropriate sign) and don't set any exception.  Otherwise, "
"``overflow_exception`` must point to a Python exception object; raise that "
"exception and return ``-1.0``.  In both cases, set ``*endptr`` to point to "
"the first character after the converted value."
msgstr ""
"``s`` が float に格納し切れないほど大きい値を表現していた場合、(例えば、"
"``\"1e500\"`` は多くのプラットフォームで表現できません) "
"``overflow_exception`` が ``NULL`` なら ``Py_HUGE_VAL`` に適切な符号を付けて"
"返します。他の場合は ``overflow_exception`` は Python の例外オブジェクトへの"
"ポインタでなければならず、その例外を発生させて ``-1.0`` を返します。どちらの"
"場合でも、``*endptr`` には変換された値の直後の最初の文字へのポインタが設定さ"
"れます。"

#: ../../c-api/conversion.rst:81
msgid ""
"If any other error occurs during the conversion (for example an out-of-"
"memory error), set the appropriate Python exception and return ``-1.0``."
msgstr ""
"それ以外のエラーが変換中に発生した場合(例えば out-of-memory エラー)、適切な "
"Python の例外を設定して ``-1.0`` を返します。"

#: ../../c-api/conversion.rst:90
msgid ""
"Convert a :c:type:`double` *val* to a string using supplied *format_code*, "
"*precision*, and *flags*."
msgstr ""
":c:type:`double` *val* を指定された *format_code*, *precision*, *flags* に基"
"づいて文字列に変換します。"

#: ../../c-api/conversion.rst:93
msgid ""
"*format_code* must be one of ``'e'``, ``'E'``, ``'f'``, ``'F'``, ``'g'``, "
"``'G'`` or ``'r'``.  For ``'r'``, the supplied *precision* must be 0 and is "
"ignored.  The ``'r'`` format code specifies the standard :func:`repr` format."
msgstr ""
"*format_code* は ``'e'``, ``'E'``, ``'f'``, ``'F'``, ``'g'``, ``'G'``, "
"``'r'`` のどれかでなければなりません。 ``'r'`` の場合、 *precision* は 0 でな"
"ければならず、無視されます。 ``'r'`` フォーマットコードは標準の :func:`repr` "
"フォーマットを指定しています。"

#: ../../c-api/conversion.rst:98
msgid ""
"*flags* can be zero or more of the values *Py_DTSF_SIGN*, "
"*Py_DTSF_ADD_DOT_0*, or *Py_DTSF_ALT*, or-ed together:"
msgstr ""
"*flags* は 0 か、*Py_DTSF_SIGN*, *Py_DTSF_ADD_DOT_0*, *Py_DTSF_ALT* か、これ"
"らの or を取ったものです:"

#: ../../c-api/conversion.rst:101
msgid ""
"*Py_DTSF_SIGN* means to always precede the returned string with a sign "
"character, even if *val* is non-negative."
msgstr ""
"*Py_DTSF_SIGN* は、*val* が負で無いときも常に符号文字を先頭につけることを意味"
"します。"

#: ../../c-api/conversion.rst:104
msgid ""
"*Py_DTSF_ADD_DOT_0* means to ensure that the returned string will not look "
"like an integer."
msgstr "*Py_DTSF_ADD_DOT_0* は文字列が整数のように見えないことを保証します。"

#: ../../c-api/conversion.rst:107
msgid ""
"*Py_DTSF_ALT* means to apply \"alternate\" formatting rules.  See the "
"documentation for the :c:func:`PyOS_snprintf` ``'#'`` specifier for details."
msgstr ""
"*Py_DTSF_ALT* は \"alternate\" フォーマットルールを適用することを意味します。"
"詳細は :c:func:`PyOS_snprintf` の ``'#'`` 指定を参照してください。"

#: ../../c-api/conversion.rst:111
msgid ""
"If *ptype* is non-NULL, then the value it points to will be set to one of "
"*Py_DTST_FINITE*, *Py_DTST_INFINITE*, or *Py_DTST_NAN*, signifying that "
"*val* is a finite number, an infinite number, or not a number, respectively."
msgstr ""
"*ptype* が NULL で無い場合、*val* が有限数、無限数、NaNのどれかに合わせて、"
"*Py_DTST_FINITE*, *Py_DTST_INFINITE*, *Py_DTST_NAN* のいずれかに設定されま"
"す。"

#: ../../c-api/conversion.rst:115
msgid ""
"The return value is a pointer to *buffer* with the converted string or "
"*NULL* if the conversion failed. The caller is responsible for freeing the "
"returned string by calling :c:func:`PyMem_Free`."
msgstr ""
"戻り値は変換後の文字列が格納された *buffer* へのポインタか、変換が失敗した場"
"合は *NULL* です。呼び出し側は、返された文字列を :c:func:`PyMem_Free` を使っ"
"て解放する責任があります。"

#: ../../c-api/conversion.rst:124
msgid ""
"Case insensitive comparison of strings. The function works almost "
"identically to :c:func:`strcmp` except that it ignores the case."
msgstr ""
"大文字/小文字を区別しない文字列比較。大文字/小文字を無視する以外は、 :c:func:"
"`strcmp` と同じ動作をします。"

#: ../../c-api/conversion.rst:130
msgid ""
"Case insensitive comparison of strings. The function works almost "
"identically to :c:func:`strncmp` except that it ignores the case."
msgstr ""
"大文字/小文字を区別しない文字列比較。大文字/小文字を無視する以外は、 :c:func:"
"`strncmp` と同じ動作をします。"
