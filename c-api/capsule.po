# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# 石井明久, 2024
# Arihiro TAKASE, 2024
# tomo, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-04 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:47+0000\n"
"Last-Translator: tomo, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/capsule.rst:6
msgid "Capsules"
msgstr "カプセル"

#: ../../c-api/capsule.rst:10
msgid ""
"Refer to :ref:`using-capsules` for more information on using these objects."
msgstr ""
"`using-capsules` 以下のオブジェクトを使う方法については :ref:`using-"
"capsules` を参照してください。"

#: ../../c-api/capsule.rst:17
msgid ""
"This subtype of :c:type:`PyObject` represents an opaque value, useful for C "
"extension modules who need to pass an opaque value (as a :c:expr:`void*` "
"pointer) through Python code to other C code.  It is often used to make a C "
"function pointer defined in one module available to other modules, so the "
"regular import mechanism can be used to access C APIs defined in dynamically "
"loaded modules."
msgstr ""
"この :c:type:`PyObject` のサブタイプは、任意の値を表し、C拡張モジュールから "
"Pythonコードを経由して他のC言語のコードに任意の値を(:c:expr:`void*` ポインタ"
"の形で)渡す必要があるときに有用です。あるモジュール内で定義されているC言語関"
"数のポインタを、他のモジュールに渡してそこから呼び出せるようにするためによく"
"使われます。これにより、動的にロードされるモジュールの中の C API に通常の "
"import 機構を通してアクセスすることができます。"

#: ../../c-api/capsule.rst:27
msgid "The type of a destructor callback for a capsule.  Defined as::"
msgstr "カプセルに対するデストラクタコールバック型. 次のように定義されます::"

#: ../../c-api/capsule.rst:29
msgid "typedef void (*PyCapsule_Destructor)(PyObject *);"
msgstr ""

#: ../../c-api/capsule.rst:31
msgid ""
"See :c:func:`PyCapsule_New` for the semantics of PyCapsule_Destructor "
"callbacks."
msgstr ""
"PyCapsule_Destructor コールバックの動作については :c:func:`PyCapsule_New` を"
"参照してください。"

#: ../../c-api/capsule.rst:37
msgid ""
"Return true if its argument is a :c:type:`PyCapsule`.  This function always "
"succeeds."
msgstr ""
"引数が :c:type:`PyCapsule` の場合に真を返します。この関数は常に成功します。"

#: ../../c-api/capsule.rst:43
msgid ""
"Create a :c:type:`PyCapsule` encapsulating the *pointer*.  The *pointer* "
"argument may not be ``NULL``."
msgstr ""
"*pointer* を格納する :c:type:`PyCapsule` を作成します。 *pointer* 引数は "
"``NULL`` であってはなりません。"

#: ../../c-api/capsule.rst:46
msgid "On failure, set an exception and return ``NULL``."
msgstr "失敗した場合、例外を設定して ``NULL`` を返します。"

#: ../../c-api/capsule.rst:48
msgid ""
"The *name* string may either be ``NULL`` or a pointer to a valid C string.  "
"If non-``NULL``, this string must outlive the capsule.  (Though it is "
"permitted to free it inside the *destructor*.)"
msgstr ""
"*name* 文字列は ``NULL`` か、有効なC文字列へのポインタです。``NULL`` で無い場"
"合、この文字列は少なくともカプセルより長く生存する必要があります。"
"(*destructor* の中で解放することは許可されています)"

#: ../../c-api/capsule.rst:52
msgid ""
"If the *destructor* argument is not ``NULL``, it will be called with the "
"capsule as its argument when it is destroyed."
msgstr ""
"*destructor* が ``NULL`` で無い場合、カプセルが削除されるときにそのカプセルを"
"引数として呼び出されます。"

#: ../../c-api/capsule.rst:55
msgid ""
"If this capsule will be stored as an attribute of a module, the *name* "
"should be specified as ``modulename.attributename``.  This will enable other "
"modules to import the capsule using :c:func:`PyCapsule_Import`."
msgstr ""
"このカプセルがモジュールの属性として保存される場合、 *name* は ``modulename."
"attributename`` と指定されるべきです。こうすると、他のモジュールがそのカプセ"
"ルを :c:func:`PyCapsule_Import` でインポートすることができます。"

#: ../../c-api/capsule.rst:62
msgid ""
"Retrieve the *pointer* stored in the capsule.  On failure, set an exception "
"and return ``NULL``."
msgstr ""
"カプセルに保存されている *pointer* を取り出します。失敗した場合は例外を設定し"
"て ``NULL`` を返します。"

#: ../../c-api/capsule.rst:65
msgid ""
"The *name* parameter must compare exactly to the name stored in the capsule. "
"If the name stored in the capsule is ``NULL``, the *name* passed in must "
"also be ``NULL``.  Python uses the C function :c:func:`!strcmp` to compare "
"capsule names."
msgstr ""

#: ../../c-api/capsule.rst:73
msgid ""
"Return the current destructor stored in the capsule.  On failure, set an "
"exception and return ``NULL``."
msgstr ""
"カプセルに保存されている現在のデストラクタを返します。失敗した場合、例外を設"
"定して ``NULL`` を返します。"

#: ../../c-api/capsule.rst:76
msgid ""
"It is legal for a capsule to have a ``NULL`` destructor.  This makes a "
"``NULL`` return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or :"
"c:func:`PyErr_Occurred` to disambiguate."
msgstr ""
"カプセルは ``NULL`` をデストラクタとして持つことができます。従って、戻り値の "
"``NULL`` がエラーを指してない可能性があります。 :c:func:`PyCapsule_IsValid` "
"か :c:func:`PyErr_Occurred` を利用して確認してください。"

#: ../../c-api/capsule.rst:83
msgid ""
"Return the current context stored in the capsule.  On failure, set an "
"exception and return ``NULL``."
msgstr ""
"カプセルに保存されている現在のコンテキスト(context)を返します。失敗した場合、"
"例外を設定して ``NULL`` を返します。"

#: ../../c-api/capsule.rst:86
msgid ""
"It is legal for a capsule to have a ``NULL`` context.  This makes a ``NULL`` "
"return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or :c:func:"
"`PyErr_Occurred` to disambiguate."
msgstr ""
"カプセルは ``NULL`` をコンテキストとして持つことができます。従って、戻り値の "
"``NULL`` がエラーを指してない可能性があります。 :c:func:`PyCapsule_IsValid` "
"か :c:func:`PyErr_Occurred` を利用して確認してください。"

#: ../../c-api/capsule.rst:93
msgid ""
"Return the current name stored in the capsule.  On failure, set an exception "
"and return ``NULL``."
msgstr ""
"カプセルに保存されている現在の name を返します。失敗した場合、例外を設定して "
"``NULL`` を返します。"

#: ../../c-api/capsule.rst:96
msgid ""
"It is legal for a capsule to have a ``NULL`` name.  This makes a ``NULL`` "
"return code somewhat ambiguous; use :c:func:`PyCapsule_IsValid` or :c:func:"
"`PyErr_Occurred` to disambiguate."
msgstr ""
"カプセルは ``NULL`` を name として持つことができます。従って、戻り値の "
"``NULL`` がエラーを指してない可能性があります。 :c:func:`PyCapsule_IsValid` "
"か :c:func:`PyErr_Occurred` を利用して確認してください。"

#: ../../c-api/capsule.rst:103
msgid ""
"Import a pointer to a C object from a capsule attribute in a module.  The "
"*name* parameter should specify the full name to the attribute, as in "
"``module.attribute``.  The *name* stored in the capsule must match this "
"string exactly."
msgstr ""

#: ../../c-api/capsule.rst:108
msgid ""
"Return the capsule's internal *pointer* on success.  On failure, set an "
"exception and return ``NULL``."
msgstr ""
"成功した場合、カプセルの内部 *ポインタ* を返します。失敗した場合、例外を設定"
"して ``NULL`` を返します。"

#: ../../c-api/capsule.rst:111
msgid "*no_block* has no effect anymore."
msgstr ""

#: ../../c-api/capsule.rst:117
msgid ""
"Determines whether or not *capsule* is a valid capsule.  A valid capsule is "
"non-``NULL``, passes :c:func:`PyCapsule_CheckExact`, has a non-``NULL`` "
"pointer stored in it, and its internal name matches the *name* parameter.  "
"(See :c:func:`PyCapsule_GetPointer` for information on how capsule names are "
"compared.)"
msgstr ""
"*capsule* が有効なカプセルであるかどうかをチェックします。有効な *capsule* "
"は、非 ``NULL`` で、 :c:func:`PyCapsule_CheckExact` をパスし、非 ``NULL`` な"
"ポインタを格納していて、内部の name が引数 *name* とマッチします。 (name の比"
"較方法については :c:func:`PyCapsule_GetPointer` を参照)"

#: ../../c-api/capsule.rst:123
msgid ""
"In other words, if :c:func:`PyCapsule_IsValid` returns a true value, calls "
"to any of the accessors (any function starting with ``PyCapsule_Get``) are "
"guaranteed to succeed."
msgstr ""

#: ../../c-api/capsule.rst:127
msgid ""
"Return a nonzero value if the object is valid and matches the name passed "
"in. Return ``0`` otherwise.  This function will not fail."
msgstr ""
"オブジェクトが有効で name がマッチした場合に非 ``0`` を、それ以外の場合に "
"``0`` を返します。この関数は絶対に失敗しません。"

#: ../../c-api/capsule.rst:133
msgid "Set the context pointer inside *capsule* to *context*."
msgstr "*capsule* 内部のコンテキストポインタを *context* に設定します。"

#: ../../c-api/capsule.rst:135 ../../c-api/capsule.rst:142
#: ../../c-api/capsule.rst:151 ../../c-api/capsule.rst:159
msgid ""
"Return ``0`` on success.  Return nonzero and set an exception on failure."
msgstr "成功したら ``0`` を、失敗したら例外を設定して非 ``0`` を返します。"

#: ../../c-api/capsule.rst:140
msgid "Set the destructor inside *capsule* to *destructor*."
msgstr "*capsule* 内部のデストラクタを *destructor* に設定します。"

#: ../../c-api/capsule.rst:147
msgid ""
"Set the name inside *capsule* to *name*.  If non-``NULL``, the name must "
"outlive the capsule.  If the previous *name* stored in the capsule was not "
"``NULL``, no attempt is made to free it."
msgstr ""
"*capsule* 内部の name を *name* に設定します。*name* が非 ``NULL`` のとき、そ"
"れは *capsule* よりも長い寿命を持つ必要があります。もしすでに *capsule* に非 "
"``NULL`` の *name* が保存されていた場合、それに対する解放は行われません。"

#: ../../c-api/capsule.rst:156
msgid ""
"Set the void pointer inside *capsule* to *pointer*.  The pointer may not be "
"``NULL``."
msgstr ""
"*capsule* 内部のポインタを *pointer* に設定します。*pointer* は ``NULL`` で"
"あってはなりません。"

#: ../../c-api/capsule.rst:8
msgid "object"
msgstr "オブジェクト"

#: ../../c-api/capsule.rst:8
msgid "Capsule"
msgstr "Capsule"
