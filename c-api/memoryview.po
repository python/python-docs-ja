# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/memoryview.rst:9
msgid "MemoryView objects"
msgstr "memoryview オブジェクト"

#: ../../c-api/memoryview.rst:11
msgid ""
"A :class:`memoryview` object exposes the C level :ref:`buffer interface "
"<bufferobjects>` as a Python object which can then be passed around like any "
"other object."
msgstr ""
":class:`memoryview` オブジェクトは、他のオブジェクトと同じように扱える "
"Python オブジェクトの形をした C 言語レベルの :ref:`バッファのインターフェー"
"ス <bufferobjects>` です。"

#: ../../c-api/memoryview.rst:18
msgid ""
"Create a memoryview object from an object that provides the buffer "
"interface. If *obj* supports writable buffer exports, the memoryview object "
"will be read/write, otherwise it may be either read-only or read/write at "
"the discretion of the exporter."
msgstr ""
"バッファインターフェースを提供するオブジェクトからmemoryview オブジェクトを生"
"成します。もし *obj* が書き込み可能なバッファのエクスポートをサポートするな"
"ら、その memoryview オブジェクトは読み書き可能です。そうでなければ読出しのみ"
"になるか、エクスポーターの分別にもとづいて読み書きが可能となります。"

#: ../../c-api/memoryview.rst:25
msgid ""
"Create a memoryview object using *mem* as the underlying buffer. *flags* can "
"be one of :c:macro:`PyBUF_READ` or :c:macro:`PyBUF_WRITE`."
msgstr ""
"*mem* を配下のバッファとしてmemoryview オブジェクトを作成します。 *flags* "
"は :c:macro:`PyBUF_READ` か :c:macro:`PyBUF_WRITE` のどちらかになります。"

#: ../../c-api/memoryview.rst:32
msgid ""
"Create a memoryview object wrapping the given buffer structure *view*. For "
"simple byte buffers, :c:func:`PyMemoryView_FromMemory` is the preferred "
"function."
msgstr ""
"*view* として与えられたバッファ構造をラップする memoryview オブジェクトを作成"
"します。単なるバイトバッファ向けには、  :c:func:`PyMemoryView_FromMemory` の"
"ほうが望ましいです。"

#: ../../c-api/memoryview.rst:38
msgid ""
"Create a memoryview object to a :term:`contiguous` chunk of memory (in "
"either 'C' or 'F'ortran *order*) from an object that defines the buffer "
"interface. If memory is contiguous, the memoryview object points to the "
"original memory. Otherwise, a copy is made and the memoryview points to a "
"new bytes object."
msgstr ""
"buffer インターフェースを定義しているオブジェクトから ('C' か 'F'ortran の "
"*order* で) :term:`連続した <contiguous>` メモリチャンクへの memoryview オブ"
"ジェクトを作ります。メモリが連続している場合、 memoryview オブジェクトは元の"
"メモリを参照します。それ以外の場合、メモリはコピーされて、 memoryview オブ"
"ジェクトは新しい bytes オブジェクトを参照します。"

#: ../../c-api/memoryview.rst:47
msgid ""
"Return true if the object *obj* is a memoryview object.  It is not currently "
"allowed to create subclasses of :class:`memoryview`.  This function always "
"succeeds."
msgstr ""
"*obj* が memoryview オブジェクトの場合に真を返します。現在のところ、 :class:"
"`memoryview` のサブクラスの作成は許可されていません。この関数は常に成功しま"
"す。"

#: ../../c-api/memoryview.rst:54
msgid ""
"Return a pointer to the memoryview's private copy of the exporter's buffer. "
"*mview* **must** be a memoryview instance; this macro doesn't check its "
"type, you must do it yourself or you will risk crashes."
msgstr ""
"書きだされたバッファーの memoryview のプライベート コピーに、ポインターを返し"
"ます。\n"
"*mview* は  memoryview インスタンスでなければなりません;\n"
"このマクロは型をチェックしないので自前で型チェックしなければならず、それを怠"
"るとクラッシュする恐れがあります。"

#: ../../c-api/memoryview.rst:60
msgid ""
"Return either a pointer to the exporting object that the memoryview is based "
"on or ``NULL`` if the memoryview has been created by one of the functions :c:"
"func:`PyMemoryView_FromMemory` or :c:func:`PyMemoryView_FromBuffer`. *mview* "
"**must** be a memoryview instance."
msgstr ""
"memoryview をエクスポートしているオブジェクトへのポインタを返します。\n"
"memoryview が :c:func:`PyMemoryView_FromMemory` か :c:func:"
"`PyMemoryView_FromBuffer` のどちらかで作成されていた場合、 ``NULL`` を返しま"
"す。"
