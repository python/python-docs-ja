# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2015-2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/structures.rst:6
msgid "Common Object Structures"
msgstr "共通のオブジェクト構造体 (common object structure)"

#: ../../c-api/structures.rst:8
msgid ""
"There are a large number of structures which are used in the definition of "
"object types for Python.  This section describes these structures and how "
"they are used."
msgstr ""
"Python では、オブジェクト型を定義する上で数多くの構造体が使われます。この節で"
"は三つの構造体とその利用方法について説明します。"

#: ../../c-api/structures.rst:12
msgid ""
"All Python objects ultimately share a small number of fields at the "
"beginning of the object's representation in memory.  These are represented "
"by the :c:type:`PyObject` and :c:type:`PyVarObject` types, which are "
"defined, in turn, by the expansions of some macros also used, whether "
"directly or indirectly, in the definition of all other Python objects."
msgstr ""
"全ての Python オブジェクトは、オブジェクトのメモリ内表現の先頭部分にある少数"
"のフィールドを完全に共有しています。このフィールドは :c:type:`PyObject` およ"
"び :c:type:`PyVarObject` 型で表現されます。 :c:type:`PyObject` 型や :c:type:"
"`PyVarObject` 型もまた、他の全ての Python  オブジェクトを定義する上で直接的・"
"間接的に使われているマクロを使って定義されています。"

#: ../../c-api/structures.rst:21
msgid ""
"All object types are extensions of this type.  This is a type which contains "
"the information Python needs to treat a pointer to an object as an object.  "
"In a normal \"release\" build, it contains only the object's reference count "
"and a pointer to the corresponding type object.  It corresponds to the "
"fields defined by the expansion of the ``PyObject_HEAD`` macro."
msgstr ""
"全てのオブジェクト型はこの型を拡張したものです。この型には、あるオブジェクト"
"に対するオブジェクトとしてのポインタを Python から扱う必要がある際に必要な情"
"報が入っています。通常に \"リリースされている\" ビルドでは、この構造体にはオ"
"ブジェクトの参照カウントと、オブジェクトに対応する型オブジェクトだけが入って"
"います。``PyObject_HEAD`` マクロ展開で定義されているフィールドに対応します。"

#: ../../c-api/structures.rst:31
msgid ""
"This is an extension of :c:type:`PyObject` that adds the :attr:`ob_size` "
"field.  This is only used for objects that have some notion of *length*. "
"This type does not often appear in the Python/C API.  It corresponds to the "
"fields defined by the expansion of the ``PyObject_VAR_HEAD`` macro."
msgstr ""
":c:type:`PyObject` を拡張して、 :attr:`ob_size` フィールドを追加したもので"
"す。この構造体は、 *長さ (length)* の概念を持つオブジェクトだけに対して使いま"
"す。この型が Python/C API で使われることはほとんどありません。 "
"``PyObject_VAR_HEAD`` マクロ展開で定義されているフィールドに対応します。"

#: ../../c-api/structures.rst:36
msgid ""
"These macros are used in the definition of :c:type:`PyObject` and :c:type:"
"`PyVarObject`:"
msgstr ""
"これらのマクロは :c:type:`PyObject` と :c:type:`PyVarObject` の定義で使われて"
"います:"

#: ../../c-api/structures.rst:42
msgid ""
"This is a macro which expands to the declarations of the fields of the :c:"
"type:`PyObject` type; it is used when declaring new types which represent "
"objects without a varying length.  The specific fields it expands to depend "
"on the definition of :c:macro:`Py_TRACE_REFS`.  By default, that macro is "
"not defined, and :c:macro:`PyObject_HEAD` expands to::"
msgstr ""
":c:type:`PyObject` 型のフィールド宣言に展開されるマクロです;  可変でない長さ"
"を持つオブジェクトを表現する新たな型を宣言する場合に使います。展開によってど"
"のフィールドが宣言されるかは、 :c:macro:`Py_TRACE_REFS` の定義に依存します。"
"デフォルトでは、 :c:macro:`Py_TRACE_REFS` は定義されておらず、 :c:macro:"
"`PyObject_HEAD` は以下のコードに展開されます::"

#: ../../c-api/structures.rst:51
msgid "When :c:macro:`Py_TRACE_REFS` is defined, it expands to::"
msgstr ""
":c:macro:`Py_TRACE_REFS` が定義されている場合、以下のように展開されます::"

#: ../../c-api/structures.rst:60
msgid ""
"This is a macro which expands to the declarations of the fields of the :c:"
"type:`PyVarObject` type; it is used when declaring new types which represent "
"objects with a length that varies from instance to instance. This macro "
"always expands to::"
msgstr ""
"マクロです。 :c:type:`PyVarObject` 型のフィールド宣言に展開されるマクロです; "
"インスタンスによって可変の長さを持つオブジェクトを表現する新たな型を宣言する"
"場合に使います。マクロは常に以下のように展開されます::"

#: ../../c-api/structures.rst:68
msgid ""
"Note that :c:macro:`PyObject_HEAD` is part of the expansion, and that its "
"own expansion varies depending on the definition of :c:macro:`Py_TRACE_REFS`."
msgstr ""
"マクロ展開結果の一部に :c:macro:`PyObject_HEAD` が含まれており、 :c:macro:"
"`PyObject_HEAD` の展開結果は :c:macro:`Py_TRACE_REFS` の定義に依存します。"

#: ../../c-api/structures.rst:74
msgid ""
"This macro is used to access the :attr:`ob_type` member of a Python object. "
"It expands to::"
msgstr ""
"Python オブジェクトの :attr:`ob_type` メンバにアクセスするのに使うマクロで"
"す。\n"
"これは次のように展開されます::"

#: ../../c-api/structures.rst:84
msgid ""
"This macro is used to access the :attr:`ob_refcnt` member of a Python "
"object. It expands to::"
msgstr ""
"Python オブジェクトの :attr:`ob_refcnt` メンバにアクセスするのに使うマクロで"
"す。\n"
"これは次のように展開されます::"

#: ../../c-api/structures.rst:95
msgid ""
"This macro is used to access the :attr:`ob_size` member of a Python object. "
"It expands to::"
msgstr ""
"Python オブジェクトの :attr:`ob_size` メンバにアクセスするのに使うマクロで"
"す。\n"
"これは次のように展開されます::"

#: ../../c-api/structures.rst:105
msgid ""
"This is a macro which expands to initialization values for a new :c:type:"
"`PyObject` type.  This macro expands to::"
msgstr ""
"新しい :c:type:`PyObject` 型のための初期値に展開するマクロです。このマクロは"
"次のように展開されます。 ::"

#: ../../c-api/structures.rst:114
msgid ""
"This is a macro which expands to initialization values for a new :c:type:"
"`PyVarObject` type, including the :attr:`ob_size` field. This macro expands "
"to::"
msgstr ""
"新しい、 :attr:`ob_size` フィールドを含む :c:type:`PyVarObject` 型のための初"
"期値に展開するマクロです。このマクロは次のように展開されます。 ::"

#: ../../c-api/structures.rst:124
msgid ""
"Type of the functions used to implement most Python callables in C. "
"Functions of this type take two :c:type:`PyObject\\*` parameters and return "
"one such value.  If the return value is *NULL*, an exception shall have been "
"set.  If not *NULL*, the return value is interpreted as the return value of "
"the function as exposed in Python.  The function must return a new reference."
msgstr ""
"ほとんどの Python の呼び出し可能オブジェクトを C で実装する際に用いられている"
"関数の型です。この型の関数は二つの :c:type:`PyObject\\*` 型パラメタをとり、 :"
"c:type:`PyObject\\*` 型の値を返します。戻り値を *NULL* にする場合、例外をセッ"
"トしておかなければなりません。 *NULL* でない値を返す場合、戻り値は Python に"
"関数の戻り値として公開される値として解釈されます。この型の関数は新たな参照を"
"返さなければなりません。"

#: ../../c-api/structures.rst:134
msgid ""
"Structure used to describe a method of an extension type.  This structure "
"has four fields:"
msgstr ""
"拡張型のメソッドを記述する際に用いる構造体です。この構造体には 4 つのフィール"
"ドがあります:"

#: ../../c-api/structures.rst:138 ../../c-api/structures.rst:264
#: ../../c-api/structures.rst:329
msgid "Field"
msgstr "フィールド"

#: ../../c-api/structures.rst:138 ../../c-api/structures.rst:264
#: ../../c-api/structures.rst:329
msgid "C Type"
msgstr "C の型"

#: ../../c-api/structures.rst:138 ../../c-api/structures.rst:264
#: ../../c-api/structures.rst:329
msgid "Meaning"
msgstr "意味"

#: ../../c-api/structures.rst:140
msgid ":attr:`ml_name`"
msgstr ":attr:`ml_name`"

#: ../../c-api/structures.rst:140 ../../c-api/structures.rst:148
#: ../../c-api/structures.rst:266 ../../c-api/structures.rst:279
#: ../../c-api/structures.rst:295 ../../c-api/structures.rst:331
#: ../../c-api/structures.rst:339
msgid "char \\*"
msgstr "char \\*"

#: ../../c-api/structures.rst:140
msgid "name of the method"
msgstr "メソッド名"

#: ../../c-api/structures.rst:142
msgid ":attr:`ml_meth`"
msgstr ":attr:`ml_meth`"

#: ../../c-api/structures.rst:142
msgid "PyCFunction"
msgstr "PyCFunction"

#: ../../c-api/structures.rst:142
msgid "pointer to the C implementation"
msgstr "C 実装へのポインタ"

#: ../../c-api/structures.rst:145
msgid ":attr:`ml_flags`"
msgstr ":attr:`ml_flags`"

#: ../../c-api/structures.rst:145 ../../c-api/structures.rst:268
#: ../../c-api/structures.rst:275 ../../c-api/structures.rst:291
msgid "int"
msgstr "int"

#: ../../c-api/structures.rst:145
msgid "flag bits indicating how the call should be constructed"
msgstr "呼び出しをどのように行うかを示すフラグビット"

#: ../../c-api/structures.rst:148
msgid ":attr:`ml_doc`"
msgstr ":attr:`ml_doc`"

#: ../../c-api/structures.rst:148 ../../c-api/structures.rst:279
msgid "points to the contents of the docstring"
msgstr "docstring の内容を指すポインタ"

#: ../../c-api/structures.rst:152
msgid ""
"The :attr:`ml_meth` is a C function pointer.  The functions may be of "
"different types, but they always return :c:type:`PyObject\\*`.  If the "
"function is not of the :c:type:`PyCFunction`, the compiler will require a "
"cast in the method table. Even though :c:type:`PyCFunction` defines the "
"first parameter as :c:type:`PyObject\\*`, it is common that the method "
"implementation uses the specific C type of the *self* object."
msgstr ""
":attr:`ml_meth` は C の関数ポインタです。関数は別の型で定義されていてもかまい"
"ませんが、常に  :c:type:`PyObject\\*` を返します。関数が :c:type:"
"`PyFunction` でない場合、メソッドテーブル内でキャストを行うようコンパイラが要"
"求することになるでしょう。 :c:type:`PyCFunction` では最初のパラメタが :c:"
"type:`PyObject\\*` 型であると定義していますが、固有の C 型を *self* オブジェ"
"クトに使う実装はよく行われています。"

#: ../../c-api/structures.rst:159
msgid ""
"The :attr:`ml_flags` field is a bitfield which can include the following "
"flags. The individual flags indicate either a calling convention or a "
"binding convention.  Of the calling convention flags, only :const:"
"`METH_VARARGS` and :const:`METH_KEYWORDS` can be combined. Any of the "
"calling convention flags can be combined with a binding flag."
msgstr ""
":attr:`ml_flags` フィールドはビットフィールドで、以下のフラグが入ります。\n"
"個々のフラグは呼び出し規約 (calling convention) や束縛規約 (binding "
"convention) を表します。\n"
"呼び出し規約フラグでは、 :const:`METH_VARARGS` および :const:`METH_KEYWORDS` "
"だけが組み合わせられます。\n"
"呼び出し規約フラグは束縛規約フラグと組み合わせられます。"

#: ../../c-api/structures.rst:168
msgid ""
"This is the typical calling convention, where the methods have the type :c:"
"type:`PyCFunction`. The function expects two :c:type:`PyObject\\*` values. "
"The first one is the *self* object for methods; for module functions, it is "
"the module object.  The second parameter (often called *args*) is a tuple "
"object representing all arguments.  This parameter is typically processed "
"using :c:func:`PyArg_ParseTuple` or :c:func:`PyArg_UnpackTuple`."
msgstr ""
":c:type:`PyCFunction` 型のメソッドで典型的に使われる呼び出し規約です。関数"
"は :c:type:`PyObject\\*` 型の引数値を二つ要求します。最初の引数はメソッドの "
"*self* オブジェクトです; モジュール関数の場合、これはモジュールオブジェクトで"
"す。第二のパラメタ (よく *args* と呼ばれます) は、全ての引数を表現するタプル"
"オブジェクトです。パラメタは通常、 :c:func:`PyArg_ParseTuple` や :c:func:"
"`PyArg_UnpackTuple` で処理されます。"

#: ../../c-api/structures.rst:178
msgid ""
"Methods with these flags must be of type :c:type:`PyCFunctionWithKeywords`. "
"The function expects three parameters: *self*, *args*, and a dictionary of "
"all the keyword arguments.  The flag is typically combined with :const:"
"`METH_VARARGS`, and the parameters are typically processed using :c:func:"
"`PyArg_ParseTupleAndKeywords`."
msgstr ""
"このフラグを持つメソッドは :c:type:`PyCFunctionWithKeywords` 型でなければなり"
"ません。 :c:type:`PyCFunctionWithKeywords` は三つのパラメタ: *self* 、 "
"*args* 、およびキーワード引数全てからなる辞書、を要求します。このフラグは通"
"常 :const:`METH_VARARGS` と組み合わされ、パラメタは :c:func:"
"`PyArg_ParseTupleAndKeywords` で処理されます。"

#: ../../c-api/structures.rst:187
msgid ""
"Methods without parameters don't need to check whether arguments are given "
"if they are listed with the :const:`METH_NOARGS` flag.  They need to be of "
"type :c:type:`PyCFunction`.  The first parameter is typically named ``self`` "
"and will hold a reference to the module or object instance.  In all cases "
"the second parameter will be *NULL*."
msgstr ""
"引数のないメソッドは、 :const:`METH_NOARGS` フラグをつけた場合、必要な引数が"
"指定されているかをチェックしなくなります。こうしたメソッドは :c:type:"
"`PyCFunction` 型でなくてはなりません。第一のパラメタは ``self`` になり、モ"
"ジュールかオブジェクトインスタンスへの参照を保持することになります。いずれに"
"せよ、第二のパラメタは *NULL* になります。"

#: ../../c-api/structures.rst:196
msgid ""
"Methods with a single object argument can be listed with the :const:`METH_O` "
"flag, instead of invoking :c:func:`PyArg_ParseTuple` with a ``\"O\"`` "
"argument. They have the type :c:type:`PyCFunction`, with the *self* "
"parameter, and a :c:type:`PyObject\\*` parameter representing the single "
"argument."
msgstr ""
"単一のオブジェクト引数だけをとるメソッドは、 :c:func:`PyArg_ParseTuple` を引"
"数 ``\"O\"`` にして呼び出す代わりに、 :const:`METH_O` フラグつきで指定できま"
"す。メソッドは :c:type:`PyCFunction` 型で、 *self* パラメタと単一の引数を表現"
"する :c:type:`PyObject\\*` パラメタを伴います。"

#: ../../c-api/structures.rst:204
msgid ""
"This calling convention is deprecated.  The method must be of type :c:type:"
"`PyCFunction`.  The second argument is *NULL* if no arguments are given, a "
"single object if exactly one argument is given, and a tuple of objects if "
"more than one argument is given.  There is no way for a function using this "
"convention to distinguish between a call with multiple arguments and a call "
"with a tuple as the only argument."
msgstr ""
"この呼び出し規約は撤廃されました。メソッドは :c:type:`PyCFunction` 型でなけれ"
"ばなりません。第二引数は、引数がない場合には *NULL* 、単一の引数の場合にはそ"
"の引数オブジェクト、複数個の引数の場合には引数オブジェクトからなるタプルで"
"す。この呼び出し規約を使うと、複数個の引数の場合と、単一のタプルが唯一引数の"
"場合を区別できなくなってしまいます。"

#: ../../c-api/structures.rst:211
msgid ""
"These two constants are not used to indicate the calling convention but the "
"binding when use with methods of classes.  These may not be used for "
"functions defined for modules.  At most one of these flags may be set for "
"any given method."
msgstr ""
"以下の二つの定数は、呼び出し規約を示すものではなく、クラスのメソッドとして使"
"う際の束縛方式を示すものです。モジュールに対して定義された関数で用いてはなり"
"ません。メソッドに対しては、最大で一つしかこのフラグをセットできません。"

#: ../../c-api/structures.rst:221
msgid ""
"The method will be passed the type object as the first parameter rather than "
"an instance of the type.  This is used to create *class methods*, similar to "
"what is created when using the :func:`classmethod` built-in function."
msgstr ""
"メソッドの最初の引数には、型のインスタンスではなく型オブジェクトが渡されま"
"す。このフラグは組み込み関数 :func:`classmethod` を使って生成するのと同じ *ク"
"ラスメソッド (class method)* を生成するために使われます。"

#: ../../c-api/structures.rst:233
msgid ""
"The method will be passed *NULL* as the first parameter rather than an "
"instance of the type.  This is used to create *static methods*, similar to "
"what is created when using the :func:`staticmethod` built-in function."
msgstr ""
"メソッドの最初の引数には、型のインスタンスではなく *NULL* が渡されます。この"
"フラグは、 :func:`staticmethod` を使って生成するのと同じ *静的メソッド "
"(static method)* を生成するために使われます。"

#: ../../c-api/structures.rst:239
msgid ""
"One other constant controls whether a method is loaded in place of another "
"definition with the same method name."
msgstr ""
"もう一つの定数は、あるメソッドを同名の別のメソッド定義と置き換えるかどうかを"
"制御します。"

#: ../../c-api/structures.rst:245
msgid ""
"The method will be loaded in place of existing definitions.  Without "
"*METH_COEXIST*, the default is to skip repeated definitions.  Since slot "
"wrappers are loaded before the method table, the existence of a "
"*sq_contains* slot, for example, would generate a wrapped method named :meth:"
"`__contains__` and preclude the loading of a corresponding PyCFunction with "
"the same name.  With the flag defined, the PyCFunction will be loaded in "
"place of the wrapper object and will co-exist with the slot.  This is "
"helpful because calls to PyCFunctions are optimized more than wrapper object "
"calls."
msgstr ""
"メソッドを既存の定義を置き換える形でロードします。 *METH_COEXIST* を指定しな"
"ければ、デフォルトの設定にしたがって、定義が重複しないようスキップします。ス"
"ロットラッパはメソッドテーブルよりも前にロードされるので、例えば "
"*sq_contains* スロットはラップしているメソッド :meth:`__contains__` を生成"
"し、同名の PyCFunction のロードを阻止します。このフラグを定義すると、 "
"PyCFunction はラッパオブジェクトを置き換える形でロードされ、スロットと連立し"
"ます。 PyCFunctions の呼び出しはラッパオブジェクトの呼び出しよりも最適化され"
"ているので、こうした仕様が便利になります。"

#: ../../c-api/structures.rst:260
msgid ""
"Structure which describes an attribute of a type which corresponds to a C "
"struct member.  Its fields are:"
msgstr ""
"type の C 構造体のメンバとして格納されている、ある型の属性を表す構造体です。"
"この構造体のフィールドは以下のとおりです:"

#: ../../c-api/structures.rst:266
msgid ":attr:`name`"
msgstr ":attr:`name`"

#: ../../c-api/structures.rst:266
msgid "name of the member"
msgstr "メンバ名"

#: ../../c-api/structures.rst:268
msgid ":attr:`!type`"
msgstr ":attr:`!type`"

#: ../../c-api/structures.rst:268
msgid "the type of the member in the C struct"
msgstr "C 構造体の中のメンバの型"

#: ../../c-api/structures.rst:271
msgid ":attr:`offset`"
msgstr ":attr:`offset`"

#: ../../c-api/structures.rst:271 ../../c-api/structures.rst:307
msgid "Py_ssize_t"
msgstr "Py_ssize_t"

#: ../../c-api/structures.rst:271
msgid ""
"the offset in bytes that the member is located on the type's object struct"
msgstr "そのメンバの type object 構造体中の場所の offset バイト数"

#: ../../c-api/structures.rst:275
msgid ":attr:`flags`"
msgstr ":attr:`flags`"

#: ../../c-api/structures.rst:275
msgid "flag bits indicating if the field should be read-only or writable"
msgstr "フィールドが読み込み専用か書込み可能なのかを示すビットフラグ"

#: ../../c-api/structures.rst:279
msgid ":attr:`doc`"
msgstr ":attr:`doc`"

#: ../../c-api/structures.rst:283
msgid ""
":attr:`!type` can be one of many ``T_`` macros corresponding to various C "
"types.  When the member is accessed in Python, it will be converted to the "
"equivalent Python type."
msgstr ""
":attr:`!type` はたくさんのCの型を意味する ``T_`` マクロのうちの1つです。メン"
"バが Python からアクセスされるとき、そのメンバは対応する Python の型に変換さ"
"れます。"

#: ../../c-api/structures.rst:288
msgid "Macro name"
msgstr "マクロ名"

#: ../../c-api/structures.rst:288
msgid "C type"
msgstr "C type"

#: ../../c-api/structures.rst:290
msgid "T_SHORT"
msgstr "T_SHORT"

#: ../../c-api/structures.rst:290
msgid "short"
msgstr "short"

#: ../../c-api/structures.rst:291
msgid "T_INT"
msgstr "T_INT"

#: ../../c-api/structures.rst:292
msgid "T_LONG"
msgstr "T_LONG"

#: ../../c-api/structures.rst:292
msgid "long"
msgstr "long型"

#: ../../c-api/structures.rst:293
msgid "T_FLOAT"
msgstr "T_FLOAT"

#: ../../c-api/structures.rst:293
msgid "float"
msgstr "float"

#: ../../c-api/structures.rst:294
msgid "T_DOUBLE"
msgstr "T_DOUBLE"

#: ../../c-api/structures.rst:294
msgid "double"
msgstr "double"

#: ../../c-api/structures.rst:295
msgid "T_STRING"
msgstr "T_STRING"

#: ../../c-api/structures.rst:296
msgid "T_OBJECT"
msgstr "T_OBJECT"

#: ../../c-api/structures.rst:296 ../../c-api/structures.rst:297
msgid "PyObject \\*"
msgstr "PyObject \\*"

#: ../../c-api/structures.rst:297
msgid "T_OBJECT_EX"
msgstr "T_OBJECT_EX"

#: ../../c-api/structures.rst:298
msgid "T_CHAR"
msgstr "T_CHAR"

#: ../../c-api/structures.rst:298 ../../c-api/structures.rst:299
#: ../../c-api/structures.rst:304
msgid "char"
msgstr "char"

#: ../../c-api/structures.rst:299
msgid "T_BYTE"
msgstr "T_BYTE"

#: ../../c-api/structures.rst:300
msgid "T_UBYTE"
msgstr "T_UBYTE"

#: ../../c-api/structures.rst:300
msgid "unsigned char"
msgstr "unsigned char"

#: ../../c-api/structures.rst:301
msgid "T_UINT"
msgstr "T_UINT"

#: ../../c-api/structures.rst:301
msgid "unsigned int"
msgstr "unsigned int"

#: ../../c-api/structures.rst:302
msgid "T_USHORT"
msgstr "T_USHORT"

#: ../../c-api/structures.rst:302
msgid "unsigned short"
msgstr "unsigned short"

#: ../../c-api/structures.rst:303
msgid "T_ULONG"
msgstr "T_ULONG"

#: ../../c-api/structures.rst:303
msgid "unsigned long"
msgstr "unsigned long"

#: ../../c-api/structures.rst:304
msgid "T_BOOL"
msgstr "T_BOOL"

#: ../../c-api/structures.rst:305
msgid "T_LONGLONG"
msgstr "T_LONGLONG"

#: ../../c-api/structures.rst:305
msgid "long long"
msgstr "long long"

#: ../../c-api/structures.rst:306
msgid "T_ULONGLONG"
msgstr "T_ULONGLONG"

#: ../../c-api/structures.rst:306
msgid "unsigned long long"
msgstr "unsigned long long"

#: ../../c-api/structures.rst:307
msgid "T_PYSSIZET"
msgstr "T_PYSSIZET"

#: ../../c-api/structures.rst:310
msgid ""
":c:macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX` differ in that :c:macro:"
"`T_OBJECT` returns ``None`` if the member is *NULL* and :c:macro:"
"`T_OBJECT_EX` raises an :exc:`AttributeError`.  Try to use :c:macro:"
"`T_OBJECT_EX` over :c:macro:`T_OBJECT` because :c:macro:`T_OBJECT_EX` "
"handles use of the :keyword:`del` statement on that attribute more correctly "
"than :c:macro:`T_OBJECT`."
msgstr ""
":c:macro:`T_OBJECT` と :c:macro:`T_OBJECT_EX` については、 :c:macro:"
"`T_OBJECT` がメンバが *NULL* だったときに ``None`` を返すのに対し、 :c:macro:"
"`T_OBJECT_EX` は :exc:`AttributeError` を発生させる点が異なります。 :c:macro:"
"`T_OBJECT_EX` は属性に対する :keyword:`del` 文をより正しくあつかうので、でき"
"れば :c:macro:`T_OBJECT` よりも :c:macro:`T_OBJECT_EX` を使ってください。"

#: ../../c-api/structures.rst:317
msgid ""
":attr:`flags` can be ``0`` for write and read access or :c:macro:`READONLY` "
"for read-only access.  Using :c:macro:`T_STRING` for :attr:`type` implies :c:"
"macro:`READONLY`.  Only :c:macro:`T_OBJECT` and :c:macro:`T_OBJECT_EX` "
"members can be deleted.  (They are set to *NULL*)."
msgstr ""
":attr:`flags` には読み書きアクセス可能なら ``0`` で、読み込み専用なら :c:"
"macro:`READONLY` を設定します。\n"
":attr:`type` に :c:macro:`T_STRING` を使うと、 :c:macro:`READONLY` 扱いになり"
"ます。\n"
":c:macro:`T_OBJECT` メンバと :c:macro:`T_OBJECT_EX` メンバだけが削除できます "
"(*NULL* が代入されます)。"

#: ../../c-api/structures.rst:325
msgid ""
"Structure to define property-like access for a type. See also description of "
"the :c:member:`PyTypeObject.tp_getset` slot."
msgstr ""

#: ../../c-api/structures.rst:331
msgid "name"
msgstr "名前"

#: ../../c-api/structures.rst:331
msgid "attribute name"
msgstr ""

#: ../../c-api/structures.rst:333
msgid "get"
msgstr ""

#: ../../c-api/structures.rst:333
msgid "getter"
msgstr ""

#: ../../c-api/structures.rst:333
msgid "C Function to get the attribute"
msgstr ""

#: ../../c-api/structures.rst:335
msgid "set"
msgstr "集合"

#: ../../c-api/structures.rst:335
msgid "setter"
msgstr ""

#: ../../c-api/structures.rst:335
msgid ""
"optional C function to set or delete the attribute, if omitted the attribute "
"is readonly"
msgstr ""

#: ../../c-api/structures.rst:339
msgid "doc"
msgstr ""

#: ../../c-api/structures.rst:339
msgid "optional docstring"
msgstr ""

#: ../../c-api/structures.rst:341
msgid "closure"
msgstr ""

#: ../../c-api/structures.rst:341
msgid "void \\*"
msgstr ""

#: ../../c-api/structures.rst:341
msgid ""
"optional function pointer, providing additional data for getter and setter"
msgstr ""

#: ../../c-api/structures.rst:346
msgid ""
"The ``get`` function takes one :c:type:`PyObject\\*` parameter (the "
"instance) and a function pointer (the associated ``closure``)::"
msgstr ""

#: ../../c-api/structures.rst:351
msgid ""
"It should return a new reference on success or *NULL* with a set exception "
"on failure."
msgstr ""

#: ../../c-api/structures.rst:354
msgid ""
"``set`` functions take two :c:type:`PyObject\\*` parameters (the instance "
"and the value to be set) and a function pointer (the associated "
"``closure``)::"
msgstr ""

#: ../../c-api/structures.rst:359
msgid ""
"In case the attribute should be deleted the second parameter is *NULL*. "
"Should return ``0`` on success or ``-1`` with a set exception on failure."
msgstr ""

#: ../../c-api/structures.rst:365
msgid ""
"Return a bound method object for an extension type implemented in C.  This "
"can be useful in the implementation of a :c:member:`~PyTypeObject."
"tp_getattro` or :c:member:`~PyTypeObject.tp_getattr` handler that does not "
"use the :c:func:`PyObject_GenericGetAttr` function."
msgstr ""
"C で実装された拡張型の束縛メソッドオブジェクトを返します。 :c:func:"
"`PyObject_GenericGetAttr` 関数を使わない :c:member:`~PyTypeObject."
"tp_getattro` や :c:member:`~PyTypeObject.tp_getattr` ハンドラを実装する際に便"
"利です。"
