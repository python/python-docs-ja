# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# 石井明久, 2024
# tomo, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-11 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:48+0000\n"
"Last-Translator: tomo, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/codec.rst:4
msgid "Codec registry and support functions"
msgstr "codec レジストリとサポート関数"

#: ../../c-api/codec.rst:8
msgid "Register a new codec search function."
msgstr "新しい codec 検索関数を登録します。"

#: ../../c-api/codec.rst:10
msgid ""
"As side effect, this tries to load the :mod:`!encodings` package, if not yet "
"done, to make sure that it is always first in the list of search functions."
msgstr ""
"副作用として、この関数は :mod:`!encodings` パッケージが常に検索関数の先頭に来"
"るように、まだロードされていない場合はロードします。"

#: ../../c-api/codec.rst:15
msgid ""
"Unregister a codec search function and clear the registry's cache. If the "
"search function is not registered, do nothing. Return 0 on success. Raise an "
"exception and return -1 on error."
msgstr ""

#: ../../c-api/codec.rst:23
msgid ""
"Return ``1`` or ``0`` depending on whether there is a registered codec for "
"the given *encoding*.  This function always succeeds."
msgstr ""
"*encoding* のための登録された codec が存在するかどうかに応じて ``1`` か "
"``0`` を返します。\n"
"この関数は常に成功します。"

#: ../../c-api/codec.rst:28
msgid "Generic codec based encoding API."
msgstr "汎用の codec ベースの encode API."

#: ../../c-api/codec.rst:30
msgid ""
"*object* is passed through the encoder function found for the given "
"*encoding* using the error handling method defined by *errors*.  *errors* "
"may be ``NULL`` to use the default method defined for the codec.  Raises a :"
"exc:`LookupError` if no encoder can be found."
msgstr ""
"*encoding* に応じて見つかったエンコーダ関数に対して *object* を渡します。\n"
"エラーハンドリングメソッドは *errors* で指定します。\n"
"*errors* は ``NULL`` でもよく、その場合はその codec のデフォルトのメソッドが"
"利用されます。\n"
"エンコーダが見つからなかった場合は :exc:`LookupError` を発生させます。"

#: ../../c-api/codec.rst:37
msgid "Generic codec based decoding API."
msgstr "汎用の codec ベースのデコード API."

#: ../../c-api/codec.rst:39
msgid ""
"*object* is passed through the decoder function found for the given "
"*encoding* using the error handling method defined by *errors*.  *errors* "
"may be ``NULL`` to use the default method defined for the codec.  Raises a :"
"exc:`LookupError` if no encoder can be found."
msgstr ""
"*encoding* に応じて見つかったデコーダ関数に対して *object* を渡します。\n"
"エラーハンドリングメソッドは *errors* で指定します。\n"
"*errors* は ``NULL`` でもよく、その場合はその codec のデフォルトのメソッドが"
"利用されます。\n"
"デコーダが見つからなかった場合は :exc:`LookupError` を発生させます。"

#: ../../c-api/codec.rst:46
msgid "Codec lookup API"
msgstr "コーデック検索API"

#: ../../c-api/codec.rst:48
msgid ""
"In the following functions, the *encoding* string is looked up converted to "
"all lower-case characters, which makes encodings looked up through this "
"mechanism effectively case-insensitive.  If no codec is found, a :exc:"
"`KeyError` is set and ``NULL`` returned."
msgstr ""
"次の関数では、文字列 *encoding* は全て小文字に変換することで、効率的に、大文"
"字小文字を無視した検索をします。\n"
"コーデックが見つからない場合、 :exc:`KeyError` を設定して ``NULL`` を返しま"
"す。"

#: ../../c-api/codec.rst:55
msgid "Get an encoder function for the given *encoding*."
msgstr "与えられた *encoding* のエンコーダ関数を返します。"

#: ../../c-api/codec.rst:59
msgid "Get a decoder function for the given *encoding*."
msgstr "与えられた *encoding* のデコーダ関数を返します。"

#: ../../c-api/codec.rst:63
msgid ""
"Get an :class:`~codecs.IncrementalEncoder` object for the given *encoding*."
msgstr ""
"与えられた *encoding* の :class:`~codecs.IncrementalEncoder` オブジェクトを返"
"します。"

#: ../../c-api/codec.rst:67
msgid ""
"Get an :class:`~codecs.IncrementalDecoder` object for the given *encoding*."
msgstr ""
"与えられた *encoding* の :class:`~codecs.IncrementalDecoder` オブジェクトを返"
"します。"

#: ../../c-api/codec.rst:71
msgid ""
"Get a :class:`~codecs.StreamReader` factory function for the given "
"*encoding*."
msgstr ""
"与えられた *encoding* の :class:`~codecs.StreamReader` ファクトリ関数を返しま"
"す。"

#: ../../c-api/codec.rst:75
msgid ""
"Get a :class:`~codecs.StreamWriter` factory function for the given "
"*encoding*."
msgstr ""
"与えられた *encoding* の :class:`~codecs.StreamWriter` ファクトリ関数を返しま"
"す。"

#: ../../c-api/codec.rst:79
msgid "Registry API for Unicode encoding error handlers"
msgstr "Unicode エラーハンドラ用レジストリ API"

#: ../../c-api/codec.rst:83
msgid ""
"Register the error handling callback function *error* under the given "
"*name*. This callback function will be called by a codec when it encounters "
"unencodable characters/undecodable bytes and *name* is specified as the "
"error parameter in the call to the encode/decode function."
msgstr ""
"エラーハンドルのためのコールバック関数 *error* を *name* で登録します。この"
"コールバック関数は、コーデックがエンコードできない文字/デコードできないバイト"
"に遭遇した時に、そのエンコード/デコード関数の呼び出しで *name* が指定されてい"
"たら呼び出されます。"

#: ../../c-api/codec.rst:88
msgid ""
"The callback gets a single argument, an instance of :exc:"
"`UnicodeEncodeError`, :exc:`UnicodeDecodeError` or :exc:"
"`UnicodeTranslateError` that holds information about the problematic "
"sequence of characters or bytes and their offset in the original string "
"(see :ref:`unicodeexceptions` for functions to extract this information).  "
"The callback must either raise the given exception, or return a two-item "
"tuple containing the replacement for the problematic sequence, and an "
"integer giving the offset in the original string at which encoding/decoding "
"should be resumed."
msgstr ""
"コールバックは1つの引数として、 :exc:`UnicodeEncodeError`, :exc:"
"`UnicodeDecodeError`, :exc:`UnicodeTranslateError` のどれかのインスタンスを受"
"け取ります。このインスタンスは問題のある文字列やバイト列に関する情報と、その"
"元の文字列中のオフセットを持っています。(その情報を取得するための関数について"
"は :ref:`unicodeexceptions` を参照してください。) コールバックは渡された例外"
"を発生させるか、2要素のタプルに問題のシーケンスの代替と、 encode/decode を再"
"開する元の文字列中のオフセットとなる整数を格納して返します。"

#: ../../c-api/codec.rst:98
msgid "Return ``0`` on success, ``-1`` on error."
msgstr "成功したら ``0`` を、エラー時は ``-1`` を返します。"

#: ../../c-api/codec.rst:102
msgid ""
"Lookup the error handling callback function registered under *name*.  As a "
"special case ``NULL`` can be passed, in which case the error handling "
"callback for \"strict\" will be returned."
msgstr ""
"*name* で登録されたエラーハンドリングコールバック関数を検索します。\n"
"特別な場合として、``NULL`` が渡された場合、\"strict\" のエラーハンドリング"
"コールバック関数を返します。"

#: ../../c-api/codec.rst:108
msgid "Raise *exc* as an exception."
msgstr "*exc* を例外として発生させます。"

#: ../../c-api/codec.rst:112
msgid "Ignore the unicode error, skipping the faulty input."
msgstr "unicode エラーを無視し、問題の入力をスキップします。"

#: ../../c-api/codec.rst:116
msgid "Replace the unicode encode error with ``?`` or ``U+FFFD``."
msgstr "unicode エラーを ``?`` か ``U+FFFD`` で置き換えます。"

#: ../../c-api/codec.rst:120
msgid "Replace the unicode encode error with XML character references."
msgstr "unicode encode エラーを XML文字参照で置き換えます。"

#: ../../c-api/codec.rst:124
msgid ""
"Replace the unicode encode error with backslash escapes (``\\x``, ``\\u`` "
"and ``\\U``)."
msgstr ""
"unicode encode エラーをバックスラッシュエスケープ (``\\x``, ``\\u``, "
"``\\U``) で置き換えます。"

#: ../../c-api/codec.rst:129
msgid "Replace the unicode encode error with ``\\N{...}`` escapes."
msgstr "unicode encode エラーを ``\\N{...}`` で置き換えます。"
