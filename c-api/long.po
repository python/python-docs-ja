# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-06-09 02:01+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/long.rst:6
msgid "Long Integer Objects"
msgstr "長整数型オブジェクト (long integer object)"

#: ../../c-api/long.rst:13
msgid ""
"This subtype of :c:type:`PyObject` represents a Python long integer object."
msgstr "この :c:type:`PyObject` のサブタイプは長整数型を表現します。"

#: ../../c-api/long.rst:20
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python long integer "
"type. This is the same object as ``long`` and ``types.LongType``."
msgstr ""
"この :c:type:`PyTypeObject` のインスタンスは Python 長整数型を表現します。こ"
"れは Python レイヤにおける :class:`long` や ``types.LongType`` と同じオブジェ"
"クトです。"

#: ../../c-api/long.rst:26
msgid ""
"Return true if its argument is a :c:type:`PyLongObject` or a subtype of :c:"
"type:`PyLongObject`."
msgstr ""
"引数が :c:type:`PyLongObject` か :c:type:`PyLongObject` のサブタイプのときに"
"真を返します。"

#: ../../c-api/long.rst:29
msgid "Allowed subtypes to be accepted."
msgstr "サブタイプを引数にとれるようになりました."

#: ../../c-api/long.rst:35
msgid ""
"Return true if its argument is a :c:type:`PyLongObject`, but not a subtype "
"of :c:type:`PyLongObject`."
msgstr ""
"引数が :c:type:`PyLongObject` 型で、かつ :c:type:`PyLongObject` 型のサブタイ"
"プでないときに真を返します。"

#: ../../c-api/long.rst:43
msgid ""
"Return a new :c:type:`PyLongObject` object from *v*, or *NULL* on failure."
msgstr ""
"*v* から新たな :c:type:`PyLongObject` オブジェクトを生成して返します。失敗の"
"ときには *NULL* を返します。"

#: ../../c-api/long.rst:48
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned long`, "
"or *NULL* on failure."
msgstr ""
"Cの :c:type:`unsigned long` から新たな :c:type:`PyLongObject` オブジェクトを"
"生成して返します。失敗した際には *NULL* を返します。"

#: ../../c-api/long.rst:54
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`Py_ssize_t`, or "
"*NULL* on failure."
msgstr ""
"C の :c:type:`Py_ssize_t` 型から新たな :c:type:`PyLongObject` オブジェクトを"
"生成して返します。 失敗のときには *NULL* を返します。"

#: ../../c-api/long.rst:62
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`size_t`, or "
"*NULL* on failure."
msgstr ""
"C の :c:type:`size_t` 型から新たな :c:type:`PyLongObject` オブジェクトを生成"
"して返します。 失敗のときには *NULL* を返します。"

#: ../../c-api/long.rst:70
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`long long`, or "
"*NULL* on failure."
msgstr ""
"C の :c:type:`long long` 型から新たな :c:type:`PyLongObject` オブジェクトを生"
"成して返します。失敗のときには *NULL* を返します。"

#: ../../c-api/long.rst:76
msgid ""
"Return a new :c:type:`PyLongObject` object from a C :c:type:`unsigned long "
"long`, or *NULL* on failure."
msgstr ""
"C の :c:type:`unsigned long long` 型から新たな :c:type:`PyLongObject` オブ"
"ジェクトを生成して返します。失敗のときには *NULL* を返します。"

#: ../../c-api/long.rst:82
msgid ""
"Return a new :c:type:`PyLongObject` object from the integer part of *v*, or "
"*NULL* on failure."
msgstr ""
"*v* の整数部から新たな :c:type:`PyLongObject` オブジェクトを生成して返しま"
"す。失敗のときには *NULL* を返します。"

#: ../../c-api/long.rst:88
msgid ""
"Return a new :c:type:`PyLongObject` based on the string value in *str*, "
"which is interpreted according to the radix in *base*.  If *pend* is non-"
"*NULL*, *\\*pend* will point to the first character in *str* which follows "
"the representation of the number.  If *base* is ``0``, the radix will be "
"determined based on the leading characters of *str*: if *str* starts with "
"``'0x'`` or ``'0X'``, radix 16 will be used; if *str* starts with ``'0'``, "
"radix 8 will be used; otherwise radix 10 will be used.  If *base* is not "
"``0``, it must be between ``2`` and ``36``, inclusive.  Leading spaces are "
"ignored.  If there are no digits, :exc:`ValueError` will be raised."
msgstr ""
"*str* の文字列値に基づいて、新たな :c:type:`PyLongObject` を返します。このと"
"き *base* を基数として文字列を解釈します。 *pend* が *NULL* でなければ、 "
"*\\*pend* は *str* 中で数が表現されている部分以後の先頭の文字のアドレスを指し"
"ています。 *base* が ``0`` ならば、 *str* の先頭の文字列に基づいて基数を決定"
"します: もし *str* が ``'0x'`` または ``'0X'`` で始まっていれば、基数に 16 を"
"使います; *str* が ``'0'`` で始まっていれば、基数に 8 を使います; その他の場"
"合には基数に 10 を使います。 *base* が ``0`` でなければ、 *base* は ``2`` 以"
"上 ``36`` 以下の数でなければなりません。先頭に空白がある場合は無視されます。"
"数字が全くない場合、 :exc:`ValueError` が送出されます。"

#: ../../c-api/long.rst:101
msgid ""
"Convert a sequence of Unicode digits to a Python long integer value.  The "
"first parameter, *u*, points to the first character of the Unicode string, "
"*length* gives the number of characters, and *base* is the radix for the "
"conversion.  The radix must be in the range [2, 36]; if it is out of range, :"
"exc:`ValueError` will be raised."
msgstr ""
"Unicode の数字配列を Python の長整数型に変換します。最初のパラメタ *u* は、 "
"Unicode 文字列の最初の文字を指し、 *length* には文字数を指定し、 *base* には"
"変換時の基数を指定します。基数は範囲 [2, 36] になければなりません; 範囲外の基"
"数を指定すると、 :exc:`ValueError` を送出します。"

#: ../../c-api/long.rst:109
msgid ""
"This function used an :c:type:`int` for *length*. This might require changes "
"in your code for properly supporting 64-bit systems."
msgstr ""
"この関数は以前は *length* に :c:type:`int *` 型を使用していました。この変更に"
"より、 64 bit システムを正しくサポートするには修正が必要になります。"

#: ../../c-api/long.rst:116
msgid ""
"Create a Python integer or long integer from the pointer *p*. The pointer "
"value can be retrieved from the resulting value using :c:func:"
"`PyLong_AsVoidPtr`."
msgstr ""
"ポインタ *p* から Python 整数値または長整数型を生成します。ポインタの値は :c:"
"func:`PyLong_AsVoidPtr` を適用した結果から取得できます。"

#: ../../c-api/long.rst:121
msgid ""
"If the integer is larger than LONG_MAX, a positive long integer is returned."
msgstr "整数値が LONG_MAX より大きい場合に、正の長整数を返すようになりました。"

#: ../../c-api/long.rst:131
msgid ""
"Return a C :c:type:`long` representation of the contents of *pylong*.  If "
"*pylong* is greater than :const:`LONG_MAX`, an :exc:`OverflowError` is "
"raised and ``-1`` will be returned."
msgstr ""
"*pylong* の指す長整数値を、 C の :c:type:`long` 型表現で返します。 *pylong* "
"が :const:`LONG_MAX` よりも大きい場合、 :exc:`OverflowError` を送出し、 "
"``-1`` を返します。"

#: ../../c-api/long.rst:138
msgid ""
"Return a C :c:type:`long` representation of the contents of *pylong*.  If "
"*pylong* is greater than :const:`LONG_MAX` or less than :const:`LONG_MIN`, "
"set *\\*overflow* to ``1`` or ``-1``, respectively, and return ``-1``; "
"otherwise, set *\\*overflow* to ``0``.  If any other exception occurs (for "
"example a TypeError or MemoryError), then ``-1`` will be returned and "
"*\\*overflow* will be ``0``."
msgstr ""
"*pylong* の値を C の :c:type:`long` 型表現で返します。 *pylong* が :const:"
"`LONG_MAX` より大きかったり :const:`LONG_MIN` より小さい場合、 *\\*overflow* "
"に ``1`` か ``-1`` を設定して ``-1`` を返します。それ以外の場合は "
"*\\*overflow* に ``0`` を設定します。なにか例外が発生した場合は(TypeError や "
"MemoryErrorなど)、 *\\*overflow* は ``0`` で戻り値が ``-1`` になります。"

#: ../../c-api/long.rst:151
msgid ""
"Return a C :c:type:`long long` representation of the contents of *pylong*.  "
"If *pylong* is greater than :const:`PY_LLONG_MAX` or less than :const:"
"`PY_LLONG_MIN`, set *\\*overflow* to ``1`` or ``-1``, respectively, and "
"return ``-1``; otherwise, set *\\*overflow* to ``0``.  If any other "
"exception occurs (for example a TypeError or MemoryError), then ``-1`` will "
"be returned and *\\*overflow* will be ``0``."
msgstr ""
"*pylong* の値を C の :c:type:`long long` 型表現で返します。 *pylong* が :"
"const:`PY_LLONG_MAX` より大きかったり :const:`PY_LLONG_MIN` より小さい場合、 "
"*\\*overflow* に ``1`` か ``-1`` を設定して ``-1`` を返します。それ以外の場合"
"は *\\*overflow* に ``0`` を設定します。なにか例外が発生した場合は(TypeError "
"や MemoryErrorなど)、 *\\*overflow* は ``0`` で戻り値が ``-1`` になります。"

#: ../../c-api/long.rst:168
msgid ""
"Return a C :c:type:`Py_ssize_t` representation of the contents of *pylong*.  "
"If *pylong* is greater than :const:`PY_SSIZE_T_MAX`, an :exc:`OverflowError` "
"is raised and ``-1`` will be returned."
msgstr ""
"*pylong* の指す長整数値を、 C の :c:type:`Py_ssize_t` 型表現で返します。 "
"*pylong* が :const:`PY_SSIZE_T_MAX` よりも大きい場合、 :exc:`OverflowError` "
"を送出し、 ``-1`` を返します。"

#: ../../c-api/long.rst:181
msgid ""
"Return a C :c:type:`unsigned long` representation of the contents of "
"*pylong*. If *pylong* is greater than :const:`ULONG_MAX`, an :exc:"
"`OverflowError` is raised."
msgstr ""
"*pylong* の指す長整数値を、 C の :c:type:`unsigned long` 型表現で返します。 "
"*pylong* が :const:`ULONG_MAX` よりも大きい場合、 :exc:`OverflowError` を送出"
"します。"

#: ../../c-api/long.rst:191
msgid ""
"Return a C :c:type:`long long` from a Python long integer.  If *pylong* "
"cannot be represented as a :c:type:`long long`, an :exc:`OverflowError` is "
"raised and ``-1`` is returned."
msgstr ""
"*pylong* の指す長整数値を、 C の :c:type:`long long` 型表現で返します。 "
"*pylong* が :c:type:`long long` で表せない場合、 :exc:`OverflowError` を送出"
"し ``-1`` を返します。"

#: ../../c-api/long.rst:203
msgid ""
"Return a C :c:type:`unsigned long long` from a Python long integer. If "
"*pylong* cannot be represented as an :c:type:`unsigned long long`, an :exc:"
"`OverflowError` is raised and ``(unsigned long long)-1`` is returned."
msgstr ""
"*pylong* の指す長整数値を、 C の :c:type:`unsigned long long` 型表現で返しま"
"す。 *pylong* が :c:type:`unsigned long long` で表せない場合、 :exc:"
"`OverflowError` を発生させて、 ``(unsigned long long)-1`` を返します。"

#: ../../c-api/long.rst:210
msgid ""
"A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`."
msgstr ""
"負 *pylong* を指定した際に :exc:`TypeError` ではなく、 :exc:`OverflowError` "
"を送出するようになりました。"

#: ../../c-api/long.rst:217
msgid ""
"Return a C :c:type:`unsigned long` from a Python long integer, without "
"checking for overflow."
msgstr ""
"Python 長整数値を、オーバフローチェックを行わずに C の :c:type:`unsigned "
"long` 型表現で返します。"

#: ../../c-api/long.rst:220
msgid ""
"Returns ``(unsigned long)-1`` on error.  Use :c:func:`PyErr_Occurred` to "
"disambiguate."
msgstr ""
"エラーが起きたときに ``(unsigned long)-1`` を返します。\n"
"見分けを付けるためには  :c:func:`PyErr_Occurred` を使ってください。"

#: ../../c-api/long.rst:228
msgid ""
"Return a C :c:type:`unsigned long long` from a Python long integer, without "
"checking for overflow."
msgstr ""
"Python 長整数値を、オーバフローチェックを行わずに C の :c:type:`unsigned "
"long long` 型表現で返します。"

#: ../../c-api/long.rst:231
msgid ""
"Returns ``(unsigned PY_LONG_LONG)-1`` on error.  Use :c:func:"
"`PyErr_Occurred` to disambiguate."
msgstr ""

#: ../../c-api/long.rst:239
msgid ""
"Return a C :c:type:`double` representation of the contents of *pylong*.  If "
"*pylong* cannot be approximately represented as a :c:type:`double`, an :exc:"
"`OverflowError` exception is raised and ``-1.0`` will be returned."
msgstr ""
"*pylong* の指す値を、 C の :c:type:`double` 型表現で返します。 *pylong* が :"
"c:type:`double` を使って近似表現できない場合、 :exc:`OverflowError` 例外を送"
"出して ``-1.0`` を返します。"

#: ../../c-api/long.rst:246
msgid ""
"Convert a Python integer or long integer *pylong* to a C :c:type:`void` "
"pointer. If *pylong* cannot be converted, an :exc:`OverflowError` will be "
"raised.  This is only assured to produce a usable :c:type:`void` pointer for "
"values created with :c:func:`PyLong_FromVoidPtr`."
msgstr ""
"Python の整数型か長整数型を指す *pylong* を、 C の :c:type:`void` ポインタに"
"変換します。 *pylong* を変換できなければ、 :exc:`OverflowError` を送出しま"
"す。この関数は :c:func:`PyLong_FromVoidPtr` で値を生成するときに使うような :"
"c:type:`void` ポインタ型を生成できるだけです。"

#: ../../c-api/long.rst:253
msgid ""
"For values outside 0..LONG_MAX, both signed and unsigned integers are "
"accepted."
msgstr ""
"値が 0..LONG_MAX の範囲外だった場合でも、符号付き整数と符号無し整数の両方とも"
"利用可能になりました。"
