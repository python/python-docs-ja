# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Osamu NAKAMURA, 2019
# tomo, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 03:41+0000\n"
"Last-Translator: tomo, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/sequence.rst:6
msgid "Sequence Protocol"
msgstr "シーケンス型プロトコル (sequence protocol)"

#: ../../c-api/sequence.rst:11
msgid ""
"Return ``1`` if the object provides sequence protocol, and ``0`` otherwise. "
"Note that it returns ``1`` for Python classes with a :meth:`__getitem__` "
"method unless they are :class:`dict` subclasses since in general case it is "
"impossible to determine what the type of keys it supports.  This function "
"always succeeds."
msgstr ""
"オブジェクトがシーケンス型プロトコルを提供している場合は ``1`` を、そうでない"
"場合は ``0`` を返します。\n"
":meth:`__getitem__` メソッドを持つ Python クラスについては、それらが :class:"
"`dict` のサブクラスでない限り、 ``1`` を返すのに注意してください。そうなる理"
"由は、一般的なケースではオブジェクトがどの種類のキーをサポートしているかを判"
"別するのが不可能だからです。 \n"
"この関数は常に成功します。"

#: ../../c-api/sequence.rst:23
msgid ""
"Returns the number of objects in sequence *o* on success, and ``-1`` on "
"failure.  This is equivalent to the Python expression ``len(o)``."
msgstr ""
"成功するとシーケンス *o* 中のオブジェクトの数を返し、失敗すると ``-1`` を返し"
"ます。これは、Python の式 ``len(o)`` と同じになります。"

#: ../../c-api/sequence.rst:29
msgid ""
"Return the concatenation of *o1* and *o2* on success, and ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o1 + o2``."
msgstr ""
"成功すると *o1* と *o2* の連結 (concatenation) を返し、失敗すると ``NULL`` を"
"返します。Python の式 ``o1 + o2`` と同じです。"

#: ../../c-api/sequence.rst:35
msgid ""
"Return the result of repeating sequence object *o* *count* times, or "
"``NULL`` on failure.  This is the equivalent of the Python expression ``o * "
"count``."
msgstr ""
"成功するとオブジェクト *o* の *count* 回繰り返しを返し、失敗すると ``NULL`` "
"を返します。Python の式 ``o * count`` と同じです。"

#: ../../c-api/sequence.rst:41
msgid ""
"Return the concatenation of *o1* and *o2* on success, and ``NULL`` on "
"failure. The operation is done *in-place* when *o1* supports it.  This is "
"the equivalent of the Python expression ``o1 += o2``."
msgstr ""
"成功すると *o1* と *o2* の連結 (concatenation) を返し、失敗すると ``NULL`` を"
"返します。*o1* が *in-place* 演算をサポートする場合、in-place 演算を行いま"
"す。Python の式 ``o1 += o2`` と同じです。"

#: ../../c-api/sequence.rst:48
msgid ""
"Return the result of repeating sequence object *o* *count* times, or "
"``NULL`` on failure.  The operation is done *in-place* when *o* supports "
"it.  This is the equivalent of the Python expression ``o *= count``."
msgstr ""
"成功するとオブジェクト *o* の *count* 回繰り返しを返し、失敗すると ``NULL`` "
"を返します。*o* が *in-place* 演算をサポートする場合、in-place 演算を行いま"
"す。Python の式 ``o *= count`` と同じです。"

#: ../../c-api/sequence.rst:55
msgid ""
"Return the *i*\\ th element of *o*, or ``NULL`` on failure. This is the "
"equivalent of the Python expression ``o[i]``."
msgstr ""
"成功すると *o* の *i* 番目の要素を返し、失敗すると ``NULL`` を返します。"
"Python の式 ``o[i]`` と同じです。"

#: ../../c-api/sequence.rst:61
msgid ""
"Return the slice of sequence object *o* between *i1* and *i2*, or ``NULL`` "
"on failure. This is the equivalent of the Python expression ``o[i1:i2]``."
msgstr ""
"成功すると *o* の *i1* から *i2* までの間のスライスを返し、失敗すると "
"``NULL`` を返します。Python の式 ``o[i1:i2]`` と同じです。"

#: ../../c-api/sequence.rst:67
msgid ""
"Assign object *v* to the *i*\\ th element of *o*.  Raise an exception and "
"return ``-1`` on failure; return ``0`` on success.  This is the equivalent "
"of the Python statement ``o[i] = v``.  This function *does not* steal a "
"reference to *v*."
msgstr ""
"*o* の *i* 番目の要素に *v* を代入します。\n"
"失敗すると、例外を送出し ``-1`` を返します;\n"
"成功すると ``0`` を返します。\n"
"これは Python の文 ``o[i] = v`` と同じです。\n"
"この関数は *v* への参照を *盗み取りません* 。"

#: ../../c-api/sequence.rst:72
msgid ""
"If *v* is ``NULL``, the element is deleted, however this feature is "
"deprecated in favour of using :c:func:`PySequence_DelItem`."
msgstr ""
"*v* が ``NULL`` の場合はその要素が削除されますが、この機能は非推奨であり、 :"
"c:func:`PyObject_DelAttr` を使うのが望ましいです。"

#: ../../c-api/sequence.rst:78
msgid ""
"Delete the *i*\\ th element of object *o*.  Returns ``-1`` on failure.  This "
"is the equivalent of the Python statement ``del o[i]``."
msgstr ""
"*o* の *i* 番目の要素を削除します。失敗すると ``-1`` を返します。Python の文 "
"``del o[i]`` と同じです。"

#: ../../c-api/sequence.rst:84
msgid ""
"Assign the sequence object *v* to the slice in sequence object *o* from *i1* "
"to *i2*.  This is the equivalent of the Python statement ``o[i1:i2] = v``."
msgstr ""
"*o* の *i1* から *i2* までの間のスライスに *v* を代入します。Python の文 "
"``o[i1:i2] = v`` と同じです。"

#: ../../c-api/sequence.rst:90
msgid ""
"Delete the slice in sequence object *o* from *i1* to *i2*.  Returns ``-1`` "
"on failure.  This is the equivalent of the Python statement ``del o[i1:i2]``."
msgstr ""
"シーケンスオブジェクト *o* の *i1* から *i2* までの間のスライスを削除します。"
"失敗すると ``-1`` を返します。Python の文 ``del o[i1:i2]`` と同じです。"

#: ../../c-api/sequence.rst:96
msgid ""
"Return the number of occurrences of *value* in *o*, that is, return the "
"number of keys for which ``o[key] == value``.  On failure, return ``-1``.  "
"This is equivalent to the Python expression ``o.count(value)``."
msgstr ""
"*o* における *value* の出現回数、すなわち  ``o[key] == value`` となる *key* "
"の個数を返します。失敗すると ``-1`` を返します。Python の式 ``o."
"count(value)`` と同じです。"

#: ../../c-api/sequence.rst:103
msgid ""
"Determine if *o* contains *value*.  If an item in *o* is equal to *value*, "
"return ``1``, otherwise return ``0``. On error, return ``-1``.  This is "
"equivalent to the Python expression ``value in o``."
msgstr ""
"*o* に *value* が入っているか判定します。*o* のある要素が *value* と等価 "
"(equal) ならば ``1`` を返し、それ以外の場合には ``0`` を返します。エラーが発"
"生すると ``-1`` を返します。Python の式 ``value in o`` と同じです。"

#: ../../c-api/sequence.rst:110
msgid ""
"Return the first index *i* for which ``o[i] == value``.  On error, return "
"``-1``.    This is equivalent to the Python expression ``o.index(value)``."
msgstr ""
"``o[i] == value`` となる最初に見つかったインデクス *i* を返します。エラーが発"
"生すると ``-1`` を返します。Python の式 ``o.index(value)`` と同じです。"

#: ../../c-api/sequence.rst:116
msgid ""
"Return a list object with the same contents as the sequence or iterable *o*, "
"or ``NULL`` on failure.  The returned list is guaranteed to be new.  This is "
"equivalent to the Python expression ``list(o)``."
msgstr ""
"シーケンスもしくはイテラブル *o* と同じ内容を持つリストオブジェクトを返しま"
"す。\n"
"失敗したら ``NULL`` を返します。\n"
"返されるリストは新しく作られたことが保証されています。\n"
"これは Python の式 ``list(o)`` と同等です。"

#: ../../c-api/sequence.rst:125
msgid ""
"Return a tuple object with the same contents as the sequence or iterable "
"*o*, or ``NULL`` on failure.  If *o* is a tuple, a new reference will be "
"returned, otherwise a tuple will be constructed with the appropriate "
"contents.  This is equivalent to the Python expression ``tuple(o)``."
msgstr ""
"シーケンスあるいはイテラブルである *o* と同じ内容を持つタプルオブジェクトを返"
"します。\n"
"失敗したら ``NULL`` を返します。*o* がタプルの場合、新たな参照を返します。\n"
"それ以外の場合、適切な内容が入ったタプルを構築して返します。\n"
"Pythonの式 ``tuple(o)`` と同等です。"

#: ../../c-api/sequence.rst:133
msgid ""
"Return the sequence or iterable *o* as an object usable by the other "
"``PySequence_Fast*`` family of functions. If the object is not a sequence or "
"iterable, raises :exc:`TypeError` with *m* as the message text. Returns "
"``NULL`` on failure."
msgstr ""
"シーケンスまたはイテラブルの *o* を``PySequence_Fast*`` ファミリの関数で利用"
"できるオブジェクトとして返します。オブジェクトがシーケンスでもイテラブルでも"
"ない場合は、メッセージ *m* を持つ、 :exec:`TypeError` を送出します。失敗した"
"ら ``NULL`` を返します。"

#: ../../c-api/sequence.rst:138
msgid ""
"The ``PySequence_Fast*`` functions are thus named because they assume *o* is "
"a :c:type:`PyTupleObject` or a :c:type:`PyListObject` and access the data "
"fields of *o* directly."
msgstr ""
"``PySequence_Fast*`` ファミリの関数は、*o* が :c:type:`PyTupleObject` また"
"は :c:type:`PyListObject` と仮定し、*o* のデータフィールドに直接アクセスする"
"ため、そのように名付けられています。"

#: ../../c-api/sequence.rst:142
msgid ""
"As a CPython implementation detail, if *o* is already a sequence or list, it "
"will be returned."
msgstr ""
"CPythonの実装では、もし *o* が 既にシーケンスかタプルであれば、*o* そのものを"
"返します。"

#: ../../c-api/sequence.rst:148
msgid ""
"Returns the length of *o*, assuming that *o* was returned by :c:func:"
"`PySequence_Fast` and that *o* is not ``NULL``.  The size can also be gotten "
"by calling :c:func:`PySequence_Size` on *o*, but :c:func:"
"`PySequence_Fast_GET_SIZE` is faster because it can assume *o* is a list or "
"tuple."
msgstr ""
"*o* が ``NULL`` でなく、 :c:func:`PySequence_Fast` が返したオブジェクトである"
"と仮定して、 *o* の長さを返します。 *o* のサイズは :c:func:`PySequence_Size` "
"を呼び出しても得られますが、 :c:func:`PySequence_Fast_GET_SIZE` の方が *o* を"
"リストかタプルであると仮定して処理するため、より高速です。"

#: ../../c-api/sequence.rst:157
msgid ""
"Return the *i*\\ th element of *o*, assuming that *o* was returned by :c:"
"func:`PySequence_Fast`, *o* is not ``NULL``, and that *i* is within bounds."
msgstr ""
"*o* が ``NULL`` でなく、 :c:func:`PySequence_Fast` が返したオブジェクトであ"
"り、かつ *i* がインデクスの範囲内にあると仮定して、 *o* の *i* 番目の要素を返"
"します。"

#: ../../c-api/sequence.rst:163
msgid ""
"Return the underlying array of PyObject pointers.  Assumes that *o* was "
"returned by :c:func:`PySequence_Fast` and *o* is not ``NULL``."
msgstr ""
"PyObject ポインタの背後にあるアレイを返します。この関数では、 *o* は :c:func:"
"`PySequence_Fast` の返したオブジェクトであり、 ``NULL`` でないものと仮定して"
"います。"

#: ../../c-api/sequence.rst:166
msgid ""
"Note, if a list gets resized, the reallocation may relocate the items array. "
"So, only use the underlying array pointer in contexts where the sequence "
"cannot change."
msgstr ""
"リストのサイズが変更されるとき、メモリ再確保が要素の配列を再配置するかもしれ"
"ないことに注意してください。そのため、シーケンスの変更が発生しないコンテキス"
"トでのみ背後にあるポインタを使ってください。"

#: ../../c-api/sequence.rst:173
msgid ""
"Return the *i*\\ th element of *o* or ``NULL`` on failure. Faster form of :c:"
"func:`PySequence_GetItem` but without checking that :c:func:"
"`PySequence_Check` on *o* is true and without adjustment for negative "
"indices."
msgstr ""
"*o* の *i* 番目の要素を返し、失敗すると ``NULL`` を返します。 :c:func:"
"`PySequence_GetItem` の高速版であり、:c:func:`PySequence_Check` で *o* が真を"
"返すかどうかの検証や、負の添え字の調整を行いません。 "
