# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Inada Naoki <songofacandy@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/string.rst:6
msgid "String/Bytes Objects"
msgstr "文字列とバイト列オブジェクト"

#: ../../c-api/string.rst:8
msgid ""
"These functions raise :exc:`TypeError` when expecting a string parameter and "
"are called with a non-string parameter."
msgstr ""
"下記の関数は、文字列オブジェクトを期待している引数に文字列オブジェクトでない"
"パラメタを指定して呼び出されると、 :exc:`TypeError` を送出します。"

#: ../../c-api/string.rst:13
msgid ""
"These functions have been renamed to PyBytes_* in Python 3.x. Unless "
"otherwise noted, the PyBytes functions available in 3.x are aliased to their "
"PyString_* equivalents to help porting."
msgstr ""
"これらの関数群は Python 3.x では PyBytes_* へリネームされます。移植を容易にす"
"るために、特に注釈されていない限り、 3.x で利用できる PyBytes 関数群は同等の "
"PyString_* 関数へのエイリアスにされています。"

#: ../../c-api/string.rst:22
msgid "This subtype of :c:type:`PyObject` represents a Python string object."
msgstr ""
"この :c:type:`PyObject` のサブタイプは Python の文字列オブジェクトを表現しま"
"す。"

#: ../../c-api/string.rst:29
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python string type; "
"it is the same object as ``str`` and ``types.StringType`` in the Python "
"layer. ."
msgstr ""
"この :c:type:`PyTypeObject` のインスタンスは Python の文字列型を表現します; "
"このオブジェクトは Python レイヤにおける ``str`` や ``types.StringType`` と同"
"じです。 ."

#: ../../c-api/string.rst:35
msgid ""
"Return true if the object *o* is a string object or an instance of a subtype "
"of the string type."
msgstr "*o* が文字列型か文字列型のサブタイプであるときに真を返します。"

#: ../../c-api/string.rst:38
msgid "Allowed subtypes to be accepted."
msgstr "サブタイプを引数にとれるようになりました."

#: ../../c-api/string.rst:44
msgid ""
"Return true if the object *o* is a string object, but not an instance of a "
"subtype of the string type."
msgstr "*o* が文字列型で、かつ文字列型のサブタイプでないときに真を返します。"

#: ../../c-api/string.rst:52
msgid ""
"Return a new string object with a copy of the string *v* as value on "
"success, and *NULL* on failure.  The parameter *v* must not be *NULL*; it "
"will not be checked."
msgstr ""
"*v* を値に持つ文字列オブジェクトを返します。失敗すると *NULL* を返します。パ"
"ラメタ *v* は *NULL* であってはなりません; *NULL* かどうかはチェックしませ"
"ん。"

#: ../../c-api/string.rst:59
msgid ""
"Return a new string object with a copy of the string *v* as value and length "
"*len* on success, and *NULL* on failure.  If *v* is *NULL*, the contents of "
"the string are uninitialized."
msgstr ""
"値が *v* で長さが *len* の新たな文字列オブジェクトを返します。失敗すると "
"*NULL* を返します。 *v* が *NULL* の場合、文字列の中身は未初期化の状態になり"
"ます。"

#: ../../c-api/string.rst:63
msgid ""
"This function used an :c:type:`int` type for *len*. This might require "
"changes in your code for properly supporting 64-bit systems."
msgstr ""
"この関数は以前は *len* の型に :c:type:`int` を利用していました。この変更によ"
"り、 64 bit システムを正しくサポートするには修正が必要になります。"

#: ../../c-api/string.rst:70
msgid ""
"Take a C :c:func:`printf`\\ -style *format* string and a variable number of "
"arguments, calculate the size of the resulting Python string and return a "
"string with the values formatted into it.  The variable arguments must be C "
"types and must correspond exactly to the format characters in the *format* "
"string.  The following format characters are allowed:"
msgstr ""
"C 関数 :c:func:`printf` 形式の *format* 文字列と可変個の引数をとり、書式化済"
"みの文字列長を計算した上で、書式化を行った結果を値とする Python 文字列にして"
"返します。可変個の引数部は C のデータ型でなくてはならず、かつ *format* 文字列"
"内の書式指定文字 (format character) に一致する型でなくてはなりません。利用で"
"きる書式化文字は以下の通りです:"

#: ../../c-api/string.rst:86
msgid "Format Characters"
msgstr "書式指定文字"

#: ../../c-api/string.rst:86
msgid "Type"
msgstr "型"

#: ../../c-api/string.rst:86
msgid "Comment"
msgstr "コメント"

#: ../../c-api/string.rst:88
msgid ":attr:`%%`"
msgstr ":attr:`%%`"

#: ../../c-api/string.rst:88
msgid "*n/a*"
msgstr "*n/a*"

#: ../../c-api/string.rst:88
msgid "The literal % character."
msgstr "文字 % のリテラル。"

#: ../../c-api/string.rst:90
msgid ":attr:`%c`"
msgstr ":attr:`%c`"

#: ../../c-api/string.rst:90 ../../c-api/string.rst:93
#: ../../c-api/string.rst:117 ../../c-api/string.rst:120
msgid "int"
msgstr "int"

#: ../../c-api/string.rst:90
msgid "A single character, represented as a C int."
msgstr "C の整数型で表現される単一の文字。"

#: ../../c-api/string.rst:93
msgid ":attr:`%d`"
msgstr ":attr:`%d`"

#: ../../c-api/string.rst:93
msgid "Exactly equivalent to ``printf(\"%d\")``."
msgstr "C の ``printf(\"%d\")`` と全く同じ。"

#: ../../c-api/string.rst:96
msgid ":attr:`%u`"
msgstr ":attr:`%u`"

#: ../../c-api/string.rst:96
msgid "unsigned int"
msgstr "unsigned int"

#: ../../c-api/string.rst:96
msgid "Exactly equivalent to ``printf(\"%u\")``."
msgstr "C の ``printf(\"%u\")`` と全く同じ。"

#: ../../c-api/string.rst:99
msgid ":attr:`%ld`"
msgstr ":attr:`%ld`"

#: ../../c-api/string.rst:99
msgid "long"
msgstr "long"

#: ../../c-api/string.rst:99
msgid "Exactly equivalent to ``printf(\"%ld\")``."
msgstr "C の ``printf(\"%ld\")`` と全く同じ。"

#: ../../c-api/string.rst:102
msgid ":attr:`%lu`"
msgstr ":attr:`%lu`"

#: ../../c-api/string.rst:102
msgid "unsigned long"
msgstr "unsigned long"

#: ../../c-api/string.rst:102
msgid "Exactly equivalent to ``printf(\"%lu\")``."
msgstr "C の ``printf(\"%lu\")`` と全く同じ。"

#: ../../c-api/string.rst:105
msgid ":attr:`%lld`"
msgstr ":attr:`%lld`"

#: ../../c-api/string.rst:105
msgid "long long"
msgstr "long long"

#: ../../c-api/string.rst:105
msgid "Exactly equivalent to ``printf(\"%lld\")``."
msgstr "C の ``printf(\"%lld\")`` と全く同じ。"

#: ../../c-api/string.rst:108
msgid ":attr:`%llu`"
msgstr ":attr:`%llu`"

#: ../../c-api/string.rst:108
msgid "unsigned long long"
msgstr "unsigned long long"

#: ../../c-api/string.rst:108
msgid "Exactly equivalent to ``printf(\"%llu\")``."
msgstr "C の ``printf(\"%llu\")`` と全く同じ。"

#: ../../c-api/string.rst:111
msgid ":attr:`%zd`"
msgstr ":attr:`%zd`"

#: ../../c-api/string.rst:111
msgid "Py_ssize_t"
msgstr "Py_ssize_t"

#: ../../c-api/string.rst:111
msgid "Exactly equivalent to ``printf(\"%zd\")``."
msgstr "C の ``printf(\"%zd\")`` と全く同じ。"

#: ../../c-api/string.rst:114
msgid ":attr:`%zu`"
msgstr ":attr:`%zu`"

#: ../../c-api/string.rst:114
msgid "size_t"
msgstr "size_t"

#: ../../c-api/string.rst:114
msgid "Exactly equivalent to ``printf(\"%zu\")``."
msgstr "C の ``printf(\"%zu\")`` と全く同じ。"

#: ../../c-api/string.rst:117
msgid ":attr:`%i`"
msgstr ":attr:`%i`"

#: ../../c-api/string.rst:117
msgid "Exactly equivalent to ``printf(\"%i\")``."
msgstr "C の ``printf(\"%i\")`` と全く同じ。"

#: ../../c-api/string.rst:120
msgid ":attr:`%x`"
msgstr ":attr:`%x`"

#: ../../c-api/string.rst:120
msgid "Exactly equivalent to ``printf(\"%x\")``."
msgstr "C の ``printf(\"%x\")`` と全く同じ。"

#: ../../c-api/string.rst:123
msgid ":attr:`%s`"
msgstr ":attr:`%s`"

#: ../../c-api/string.rst:123
msgid "char\\*"
msgstr "char\\*"

#: ../../c-api/string.rst:123
msgid "A null-terminated C character array."
msgstr "null で終端された C の文字列。"

#: ../../c-api/string.rst:126
msgid ":attr:`%p`"
msgstr ":attr:`%p`"

#: ../../c-api/string.rst:126
msgid "void\\*"
msgstr "void\\*"

#: ../../c-api/string.rst:126
msgid ""
"The hex representation of a C pointer. Mostly equivalent to "
"``printf(\"%p\")`` except that it is guaranteed to start with the literal "
"``0x`` regardless of what the platform's ``printf`` yields."
msgstr ""
"C ポインタの 16 進表記。 ``printf(\"%p\")`` とほとんど同じだが、プラット"
"フォームにおける ``printf`` の定義に関わりなく先頭にリテラル ``0x`` が付きま"
"す。"

#: ../../c-api/string.rst:135
msgid ""
"An unrecognized format character causes all the rest of the format string to "
"be copied as-is to the result string, and any extra arguments discarded."
msgstr ""
"識別できない書式指定文字があった場合、残りの書式文字列はそのまま出力文字列に"
"コピーされ、残りの引数は無視されます。"

#: ../../c-api/string.rst:140
msgid ""
"The `\"%lld\"` and `\"%llu\"` format specifiers are only available when :"
"const:`HAVE_LONG_LONG` is defined."
msgstr ""
"`\"%lld\"` と `\"%llu\"` 書式指定文字は :const:`HAVE_LONG_LONG` が定義されて"
"いる時だけ利用できます。"

#: ../../c-api/string.rst:143
msgid "Support for `\"%lld\"` and `\"%llu\"` added."
msgstr "`\"%lld\"` と `\"%llu\"` のサポートが追加されました。"

#: ../../c-api/string.rst:149
msgid ""
"Identical to :c:func:`PyString_FromFormat` except that it takes exactly two "
"arguments."
msgstr ""
":c:func:`PyString_FromFormat` と同じです。ただし、こちらの関数は二つしか引数"
"をとりません。"

#: ../../c-api/string.rst:155
msgid "Return the length of the string in string object *string*."
msgstr "文字列オブジェクト *string* 内の文字列値の長さを返します。"

#: ../../c-api/string.rst:157
msgid ""
"This function returned an :c:type:`int` type. This might require changes in "
"your code for properly supporting 64-bit systems."
msgstr ""
"この関数は以前は :c:type:`int` を返していました。この変更により、 64 bit シス"
"テムを正しくサポートするには修正が必要になります。"

#: ../../c-api/string.rst:164
msgid "Macro form of :c:func:`PyString_Size` but without error checking."
msgstr ""
":c:func:`PyString_Size` をマクロで実装したもので、エラーチェックを行いませ"
"ん。"

#: ../../c-api/string.rst:166
msgid ""
"This macro returned an :c:type:`int` type. This might require changes in "
"your code for properly supporting 64-bit systems."
msgstr ""
"このマクロは以前は :c:type:`int` を返していました。この変更により、 64 bit シ"
"ステムを正しくサポートするには修正が必要になります。"

#: ../../c-api/string.rst:173
msgid ""
"Return a NUL-terminated representation of the contents of *string*.  The "
"pointer refers to the internal buffer of *string*, not a copy.  The data "
"must not be modified in any way, unless the string was just created using "
"``PyString_FromStringAndSize(NULL, size)``. It must not be deallocated.  If "
"*string* is a Unicode object, this function computes the default encoding of "
"*string* and operates on that.  If *string* is not a string object at all, :"
"c:func:`PyString_AsString` returns *NULL* and raises :exc:`TypeError`."
msgstr ""
"*string* の中身を NUL 文字終端された表現で返します。ポインタは *string* オブ"
"ジェクトの内部バッファを指し、バッファのコピーを指すわけではありません。 "
"``PyString_FromStringAndSize(NULL, size)`` を使って生成した文字列でない限り、"
"バッファ内のデータはいかなる変更もしてはなりません。この文字列をデアロケート"
"してはなりません。 *string* が Unicode オブジェクトの場合、この関数は "
"*string* のデフォルトエンコーディング版を計算し、デフォルトエンコーディング版"
"に対して操作を行います。 *string* が文字列オブジェクトですらない場合、 :c:"
"func:`PyString_AsString` は *NULL* を返して :exc:`TypeError` を送出します。"

#: ../../c-api/string.rst:184
msgid ""
"Macro form of :c:func:`PyString_AsString` but without error checking.  Only "
"string objects are supported; no Unicode objects should be passed."
msgstr ""
":c:func:`PyString_AsString` をマクロで実装したもので、エラーチェックを行いま"
"せん。文字列オブジェクトだけをサポートします; Unicode オブジェクトを渡しては"
"なりません。"

#: ../../c-api/string.rst:190
msgid ""
"Return a NUL-terminated representation of the contents of the object *obj* "
"through the output variables *buffer* and *length*."
msgstr ""
"*obj* の中身を NUL 文字終端された表現にして、出力用の変数 *buffer* と "
"*length* を使って返します。"

#: ../../c-api/string.rst:193
msgid ""
"The function accepts both string and Unicode objects as input. For Unicode "
"objects it returns the default encoded version of the object.  If *length* "
"is *NULL*, the resulting buffer may not contain NUL characters; if it does, "
"the function returns ``-1`` and a :exc:`TypeError` is raised."
msgstr ""
"この関数は文字列オブジェクトと Unicode オブジェクトのどちらも入力として受理し"
"ます。 Unicode オブジェクトの場合、オブジェクトをデフォルトエンコーディングで"
"エンコードしたバージョン (default encoded version) を返します。 *length* が "
"*NULL* の場合、値を返させるバッファには NUL 文字を入れてはなりません; NUL 文"
"字が入っている場合、関数は ``-1`` を返し、 :exc:`TypeError` を送出します。"

#: ../../c-api/string.rst:198
msgid ""
"The buffer refers to an internal string buffer of *obj*, not a copy. The "
"data must not be modified in any way, unless the string was just created "
"using ``PyString_FromStringAndSize(NULL, size)``.  It must not be "
"deallocated.  If *string* is a Unicode object, this function computes the "
"default encoding of *string* and operates on that.  If *string* is not a "
"string object at all, :c:func:`PyString_AsStringAndSize` returns ``-1`` and "
"raises :exc:`TypeError`."
msgstr ""
"*buffer* は *obj* の内部文字列バッファを参照し、バッファのコピーを参照するわ"
"けではありません。 ``PyString_FromStringAndSize(NULL, size)`` を使って生成し"
"た文字列でない限り、バッファ内のデータはいかなる変更もしてはなりません。この"
"文字列をデアロケートしてはなりません。 *string* が Unicode オブジェクトの場"
"合、この関数は *string* のデフォルトエンコーディング版を計算し、デフォルトエ"
"ンコーディング版に対して操作を行います。 *string* が文字列オブジェクトですら"
"ない場合、 :c:func:`PyString_AsStringAndSize` は ``-1`` を返して :exc:"
"`TypeError` を送出します。"

#: ../../c-api/string.rst:205
msgid ""
"This function used an :c:type:`int *` type for *length*. This might require "
"changes in your code for properly supporting 64-bit systems."
msgstr ""
"この関数は以前は *length* に :c:type:`int *` 型を使用していました。この変更に"
"より、 64 bit システムを正しくサポートするには修正が必要になります。"

#: ../../c-api/string.rst:212
msgid ""
"Create a new string object in *\\*string* containing the contents of "
"*newpart* appended to *string*; the caller will own the new reference.  The "
"reference to the old value of *string* will be stolen.  If the new string "
"cannot be created, the old reference to *string* will still be discarded and "
"the value of *\\*string* will be set to *NULL*; the appropriate exception "
"will be set."
msgstr ""
"新しい文字列オブジェクトを *\\*string* に作成し、 *newpart* の内容を "
"*string* に追加します; 呼び出し側は新たな参照を所有することになります。 "
"*string* の以前の値に対する参照は盗み取られます。新たな文字列を生成できなけれ"
"ば、 *string* に対する古い参照は無視され、 *\\*string* の値は *NULL* に設定さ"
"れます; その際、適切な例外情報が設定されます。"

#: ../../c-api/string.rst:221
msgid ""
"Create a new string object in *\\*string* containing the contents of "
"*newpart* appended to *string*.  This version decrements the reference count "
"of *newpart*."
msgstr ""
"新しい文字列オブジェクトを *\\*string* に作成し、 *newpart* の内容を "
"*string* に追加します。こちらのバージョンの関数は *newpart* への参照をデクリ"
"メントします。"

#: ../../c-api/string.rst:227
msgid ""
"A way to resize a string object even though it is \"immutable\". Only use "
"this to build up a brand new string object; don't use this if the string may "
"already be known in other parts of the code.  It is an error to call this "
"function if the refcount on the input string object is not one. Pass the "
"address of an existing string object as an lvalue (it may be written into), "
"and the new size desired. On success, *\\*string* holds the resized string "
"object and ``0`` is returned; the address in *\\*string* may differ from its "
"input value.  If the reallocation fails, the original string object at "
"*\\*string* is deallocated, *\\*string* is set to *NULL*, a memory exception "
"is set, and ``-1`` is returned."
msgstr ""
"\"変更不能\" である文字列オブジェクトをサイズ変更する手段です。新たな文字列オ"
"ブジェクトを作成するときにのみ使用してください; 文字列がすでにコードの他の部"
"分で使われているかもしれない場合には、この関数を使ってはなりません。入力する"
"文字列オブジェクトの参照カウントが 1 でない場合、この関数を呼び出すとエラーに"
"なります。左側値には、既存の文字列オブジェクトのアドレスを渡し (このアドレス"
"には書き込み操作が起きるかもしれません)、新たなサイズを指定します。成功した場"
"合、 *\\*string* はサイズ変更された文字列オブジェクトを保持し、 ``0`` が返さ"
"れます; *\\*string* の値は、入力したときの値と異なっているかもしれません。文"
"字列の再アロケーションに失敗した場合、 *\\*string* に入っていた元の文字列オブ"
"ジェクトを解放し、 *\\*string* を *NULL* にセットし、メモリ例外をセットし、 "
"``-1`` を返します。"

#: ../../c-api/string.rst:237
msgid ""
"This function used an :c:type:`int` type for *newsize*. This might require "
"changes in your code for properly supporting 64-bit systems."
msgstr ""
"この関数は以前は *newsize* の型に :c:type:`int` を利用していました。この変更"
"により、 64 bit システムを正しくサポートするには修正が必要になります。"

#: ../../c-api/string.rst:243
msgid ""
"Return a new string object from *format* and *args*. Analogous to ``format % "
"args``.  The *args* argument must be a tuple or dict."
msgstr ""
"新たな文字列オブジェクトを *format* と *args* から生成します。 ``format % "
"args`` と似た働きです。引数 *args* はタプルまたは辞書でなければなりません。"

#: ../../c-api/string.rst:249
msgid ""
"Intern the argument *\\*string* in place.  The argument must be the address "
"of a pointer variable pointing to a Python string object.  If there is an "
"existing interned string that is the same as *\\*string*, it sets "
"*\\*string* to it (decrementing the reference count of the old string object "
"and incrementing the reference count of the interned string object), "
"otherwise it leaves *\\*string* alone and interns it (incrementing its "
"reference count).  (Clarification: even though there is a lot of talk about "
"reference counts, think of this function as reference-count-neutral; you own "
"the object after the call if and only if you owned it before the call.)"
msgstr ""
"引数 *\\*string* をインプレースで隔離 (intern) します。引数は Python 文字列オ"
"ブジェクトを指すポインタへのアドレスでなくてはなりません。 *\\*string* と等し"
"い、すでに隔離済みの文字列が存在する場合、そのオブジェクトを *\\*string* に設"
"定します (かつ、元の文字列オブジェクトの参照カウントをデクリメントし、すでに"
"隔離済みの文字列オブジェクトの参照カウントをインクリメントします)。 (補足: 参"
"照カウントについては沢山説明して来ましtが、この関数は参照カウント中立 "
"(reference-count-neutral) と考えてください; この関数では、関数の呼び出し後に"
"オブジェクトに対して参照の所有権を持てるのは、関数を呼び出す前にすでに所有権"
"を持っていた場合に限ります。)"

#: ../../c-api/string.rst:261 ../../c-api/string.rst:273
#: ../../c-api/string.rst:286 ../../c-api/string.rst:303
#: ../../c-api/string.rst:316 ../../c-api/string.rst:333
msgid ""
"This function is not available in 3.x and does not have a PyBytes alias."
msgstr "この関数は 3.x では利用できず、 PyBytes エイリアスもありません。"

#: ../../c-api/string.rst:266
msgid ""
"A combination of :c:func:`PyString_FromString` and :c:func:"
"`PyString_InternInPlace`, returning either a new string object that has been "
"interned, or a new (\"owned\") reference to an earlier interned string "
"object with the same value."
msgstr ""
":c:func:`PyString_FromString` と :c:func:`PyString_InternInPlace` を組み合わ"
"せたもので、隔離済みの新たな文字列オブジェクトを返すか、同じ値を持つすでに隔"
"離済みの文字列オブジェクトに対する新たな (\"所有権を得た\") 参照を返します。"

#: ../../c-api/string.rst:278
msgid ""
"Create an object by decoding *size* bytes of the encoded buffer *s* using "
"the codec registered for *encoding*.  *encoding* and *errors* have the same "
"meaning as the parameters of the same name in the :func:`unicode` built-in "
"function. The codec to be used is looked up using the Python codec "
"registry.  Return *NULL* if an exception was raised by the codec."
msgstr ""
"*size* からなるエンコード済みのバッファ *s* を *encoding* の名前で登録されて"
"いる codec に渡してデコードし、オブジェクトを生成します。 *encoding* および "
"*errors* は組み込み関数 :func:`unicode` に与える同名のパラメタと同じ意味を持"
"ちます。使用する codec の検索は、 Python の codec レジストリを使って行いま"
"す。codec が例外を送出した場合には *NULL* を返します。"

#: ../../c-api/string.rst:288 ../../c-api/string.rst:318
msgid ""
"This function used an :c:type:`int` type for *size*. This might require "
"changes in your code for properly supporting 64-bit systems."
msgstr ""
"この関数は以前は *size* の型に :c:type:`int` を利用していました。この変更によ"
"り、 64bit システムを正しくサポートするには修正が必要になります。"

#: ../../c-api/string.rst:295
msgid ""
"Decode a string object by passing it to the codec registered for *encoding* "
"and return the result as Python object. *encoding* and *errors* have the "
"same meaning as the parameters of the same name in the string :meth:`encode` "
"method. The codec to be used is looked up using the Python codec registry. "
"Return *NULL* if an exception was raised by the codec."
msgstr ""
"文字列オブジェクトを *encoding* の名前で登録されている codec に渡してデコード"
"し、Python オブジェクトを返します。 *encoding* および *errors* は文字列型の :"
"meth:`encode` メソッドに与える同名のパラメタと同じ意味を持ちます。使用する "
"codec の検索は、 Python の codec レジストリを使って行います。codec が例外を送"
"出した場合には *NULL* を返します。"

#: ../../c-api/string.rst:308
msgid ""
"Encode the :c:type:`char` buffer of the given size by passing it to the "
"codec registered for *encoding* and return a Python object. *encoding* and "
"*errors* have the same meaning as the parameters of the same name in the "
"string :meth:`encode` method. The codec to be used is looked up using the "
"Python codec registry.  Return *NULL* if an exception was raised by the "
"codec."
msgstr ""
"*size* で指定されたサイズの :c:type:`char` バッファを *encoding* の名前で登録"
"されている codec に渡してエンコードし、 Python オブジェクトを返します。 "
"*encoding* および *errors* は文字列型の :meth:`encode` メソッドに与える同名の"
"パラメタと同じ意味を持ちます。使用する codec の検索は、 Python の codec レジ"
"ストリを使って行います。codec が例外を送出した場合には *NULL* を返します。"

#: ../../c-api/string.rst:325
msgid ""
"Encode a string object using the codec registered for *encoding* and return "
"the result as Python object. *encoding* and *errors* have the same meaning "
"as the parameters of the same name in the string :meth:`encode` method. The "
"codec to be used is looked up using the Python codec registry. Return *NULL* "
"if an exception was raised by the codec."
msgstr ""
"エンコード名 *encoding* で登録された codec を使って文字列オブジェクトをエン"
"コードし、その結果を Python オブジェクトとして返します。 *encoding* および "
"*errors* は文字列型の :meth:`encode` メソッドに与える同名のパラメタと同じ意味"
"を持ちます。使用する codec の検索は、 Python の codec レジストリを使って行い"
"ます。codec が例外を送出した場合には *NULL* を返します。"
