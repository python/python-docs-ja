# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr "弱参照オブジェクト"

#: ../../c-api/weakref.rst:8
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The first "
"is a simple reference object, and the second acts as a proxy for the "
"original object as much as it can."
msgstr ""
"Python は *弱参照* を第一級オブジェクト (first-class object) としてサポートし"
"ます。弱参照を直接実装する二種類の固有のオブジェクト型があります。第一は単純"
"な参照オブジェクトで、第二はオリジナルのオブジェクトに対して可能な限りプロキ"
"シとして振舞うオブジェクトです。"

#: ../../c-api/weakref.rst:16
msgid ""
"Return true if *ob* is either a reference or proxy object.  This function "
"always succeeds."
msgstr ""

#: ../../c-api/weakref.rst:22
msgid ""
"Return true if *ob* is a reference object.  This function always succeeds."
msgstr ""

#: ../../c-api/weakref.rst:27
msgid "Return true if *ob* is a proxy object.  This function always succeeds."
msgstr ""

#: ../../c-api/weakref.rst:32
msgid ""
"Return a weak reference object for the object *ob*.  This will always return "
"a new reference, but is not guaranteed to create a new object; an existing "
"reference object may be returned.  The second parameter, *callback*, can be "
"a callable object that receives notification when *ob* is garbage collected; "
"it should accept a single parameter, which will be the weak reference object "
"itself. *callback* may also be ``None`` or ``NULL``.  If *ob* is not a "
"weakly referencable object, or if *callback* is not callable, ``None``, or "
"``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""

#: ../../c-api/weakref.rst:44
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing proxy object may be returned.  The second parameter, *callback*, "
"can be a callable object that receives notification when *ob* is garbage "
"collected; it should accept a single parameter, which will be the weak "
"reference object itself. *callback* may also be ``None`` or ``NULL``.  If "
"*ob* is not a weakly referencable object, or if *callback* is not callable, "
"``None``, or ``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""

#: ../../c-api/weakref.rst:56
msgid ""
"Return the referenced object from a weak reference, *ref*.  If the referent "
"is no longer live, returns :const:`Py_None`."
msgstr ""
"弱参照 *ref* が参照しているオブジェクトを返します。被参照オブジェクトがすでに"
"存続していない場合、 :const:`Py_None` を返します。"

#: ../../c-api/weakref.rst:61
msgid ""
"This function returns a :term:`borrowed reference` to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except when it cannot be destroyed before the last usage of the borrowed "
"reference."
msgstr ""

#: ../../c-api/weakref.rst:69
msgid ""
"Similar to :c:func:`PyWeakref_GetObject`, but implemented as a macro that "
"does no error checking."
msgstr ""
":c:func:`PyWeakref_GetObject` に似ていますが、マクロで実装されていて、エラー"
"チェックを行いません。"
