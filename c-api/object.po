# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 03:39+0000\n"
"Last-Translator: tomo, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/object.rst:6
msgid "Object Protocol"
msgstr "オブジェクトプロトコル (object protocol)"

#: ../../c-api/object.rst:11
msgid ""
"The ``NotImplemented`` singleton, used to signal that an operation is not "
"implemented for the given type combination."
msgstr ""
"与えられたオブジェクトとメソッドの引数の型の組み合わせの処理が未実装である印"
"として使われる、 ``未実装 (NotImplemented)`` シングルトン。"

#: ../../c-api/object.rst:17
msgid ""
"Properly handle returning :c:data:`Py_NotImplemented` from within a C "
"function (that is, increment the reference count of NotImplemented and "
"return it)."
msgstr ""
"C 関数から :c:data:`Py_NotImplemented` を返す処理を適切に行います  (すなわ"
"ち、 NotImplemented シングルトンの参照カウントを増やし、返却します) 。"

#: ../../c-api/object.rst:24
msgid ""
"Print an object *o*, on file *fp*.  Returns ``-1`` on error.  The flags "
"argument is used to enable certain printing options.  The only option "
"currently supported is :const:`Py_PRINT_RAW`; if given, the :func:`str` of "
"the object is written instead of the :func:`repr`."
msgstr ""
"オブジェクト *o* をファイル *fp* に出力します。失敗すると ``-1`` を返しま"
"す。 *flags* 引数は何らかの出力オプションを有効にする際に使います。現在サポー"
"トされている唯一のオプションは :const:`Py_PRINT_RAW` です; このオプションを指"
"定すると、 :func:`repr` の代わりに :func:`str` を使ってオブジェクトを書き込み"
"ます。"

#: ../../c-api/object.rst:32 ../../c-api/object.rst:43
msgid ""
"Returns ``1`` if *o* has the attribute *attr_name*, and ``0`` otherwise.  "
"This is equivalent to the Python expression ``hasattr(o, attr_name)``.  This "
"function always succeeds."
msgstr ""
"*o* が属性 *attr_name* を持つときに ``1`` を、それ以外のときに ``0`` を返しま"
"す。この関数は Python の式 ``hasattr(o, attr_name)`` と同じです。この関数は常"
"に成功します。"

#: ../../c-api/object.rst:36
msgid ""
"Note that exceptions which occur while calling :meth:`__getattr__` and :meth:"
"`__getattribute__` methods will get suppressed. To get error reporting use :"
"c:func:`PyObject_GetAttr()` instead."
msgstr ""
":meth:`__getattr__` メソッドや :meth:`__getattribute__` メソッドの呼び出し中"
"に起こる例外は抑制されることに注意してください。\n"
"エラーを報告させるには、代わりに :c:func:`PyObject_GetAttr()` を使ってくださ"
"い。"

#: ../../c-api/object.rst:47
msgid ""
"Note that exceptions which occur while calling :meth:`__getattr__` and :meth:"
"`__getattribute__` methods and creating a temporary string object will get "
"suppressed. To get error reporting use :c:func:`PyObject_GetAttrString()` "
"instead."
msgstr ""
":meth:`__getattr__` メソッドや :meth:`__getattribute__` メソッドの呼び出し中"
"や、一時的な文字列オブジェクトの作成中に起こる例外は抑制されることに注意して"
"ください。\n"
"エラーを報告させるには、代わりに :c:func:`PyObject_GetAttrString()` を使って"
"ください。"

#: ../../c-api/object.rst:55
msgid ""
"Retrieve an attribute named *attr_name* from object *o*. Returns the "
"attribute value on success, or ``NULL`` on failure.  This is the equivalent "
"of the Python expression ``o.attr_name``."
msgstr ""
"オブジェクト *o* から、名前 *attr_name* の属性を取得します。成功すると属性値"
"を返し失敗すると ``NULL`` を返します。この関数は Python の式 ``o.attr_name`` "
"と同じです。"

#: ../../c-api/object.rst:62
msgid ""
"Retrieve an attribute named *attr_name* from object *o*. Returns the "
"attribute value on success, or ``NULL`` on failure. This is the equivalent "
"of the Python expression ``o.attr_name``."
msgstr ""
"オブジェクト *o* から、名前 *attr_name* の属性を取得します。成功すると属性値"
"を返し失敗すると ``NULL`` を返します。この関数は Python の式 ``o.attr_name`` "
"と同じです。"

#: ../../c-api/object.rst:69
msgid ""
"Generic attribute getter function that is meant to be put into a type "
"object's ``tp_getattro`` slot.  It looks for a descriptor in the dictionary "
"of classes in the object's MRO as well as an attribute in the object's :attr:"
"`~object.__dict__` (if present).  As outlined in :ref:`descriptors`, data "
"descriptors take preference over instance attributes, while non-data "
"descriptors don't.  Otherwise, an :exc:`AttributeError` is raised."
msgstr ""
"型オブジェクトの ``tp_getattro`` スロットに置かれる、属性を取得する総称的な関"
"数です。この関数は、 (もし存在すれば) オブジェクトの属性 :attr:`~object."
"__dict__` に加え、オブジェクトの MRO にあるクラスの辞書にあるデスクリプタを探"
"します。 :ref:`descriptors` で概要が述べられている通り、データのデスクリプタ"
"はインスタンスの属性より優先され、非データデスクリプタは後回しにされます。見"
"付からなかった場合は :exc:`AttributeError` を送出します。"

#: ../../c-api/object.rst:79 ../../c-api/object.rst:90
msgid ""
"Set the value of the attribute named *attr_name*, for object *o*, to the "
"value *v*. Raise an exception and return ``-1`` on failure; return ``0`` on "
"success.  This is the equivalent of the Python statement ``o.attr_name = v``."
msgstr ""
"オブジェクト *o* の *attr_name* という名の属性に、値 *v* を設定します。\n"
"失敗すると例外を送出し ``-1`` を返します; 成功すると ``0`` を返します。\n"
"この関数は Python の式 ``o.attr_name = v`` と同じです。"

#: ../../c-api/object.rst:84
msgid ""
"If *v* is ``NULL``, the attribute is deleted, however this feature is "
"deprecated in favour of using :c:func:`PyObject_DelAttr`."
msgstr ""
"*v* が ``NULL`` の場合は属性が削除されますが、この機能は非推奨であり :c:func:"
"`PyObject_DelAttr` を使うのが望ましいです。"

#: ../../c-api/object.rst:95
msgid ""
"If *v* is ``NULL``, the attribute is deleted, however this feature is "
"deprecated in favour of using :c:func:`PyObject_DelAttrString`."
msgstr ""
"*v* が ``NULL`` の場合は属性が削除されますが、この機能は非推奨であり :c:func:"
"`PyObject_DelAttrString` を使うのが望ましいです。"

#: ../../c-api/object.rst:101
msgid ""
"Generic attribute setter and deleter function that is meant to be put into a "
"type object's :c:member:`~PyTypeObject.tp_setattro` slot.  It looks for a "
"data descriptor in the dictionary of classes in the object's MRO, and if "
"found it takes preference over setting or deleting the attribute in the "
"instance dictionary. Otherwise, the attribute is set or deleted in the "
"object's :attr:`~object.__dict__` (if present). On success, ``0`` is "
"returned, otherwise an :exc:`AttributeError` is raised and ``-1`` is "
"returned."
msgstr ""
"属性の設定と削除を行う汎用的な関数で、型オブジェクトの :c:member:"
"`~PyTypeObject.tp_setattro` スロットに置かれます。\n"
"オブジェクトの MRO にあるクラスの辞書からデータディスクリプタを探し、見付かっ"
"た場合はインスタンスの辞書にある属性の設定や削除よりも優先されます。\n"
"そうでない場合は、(もし存在すれば) オブジェクトの :attr:`~object.__dict__` に"
"属性を設定もしくは削除します。\n"
"成功すると ``0`` が返され、そうでない場合は :exc:`AttributeError` が送出され "
"``-1`` が返されます。"

#: ../../c-api/object.rst:113 ../../c-api/object.rst:119
msgid ""
"Delete attribute named *attr_name*, for object *o*. Returns ``-1`` on "
"failure. This is the equivalent of the Python statement ``del o.attr_name``."
msgstr ""
"オブジェクト *o* の *attr_name* という名の属性を削除します。失敗すると "
"``-1`` を返します。この関数は Python の文 ``del o.attr_name`` と同じです。"

#: ../../c-api/object.rst:125
msgid ""
"A generic implementation for the getter of a ``__dict__`` descriptor. It "
"creates the dictionary if necessary."
msgstr ""
"``__dict__`` デスクリプタの getter の総称的な実装です。必要な場合は、辞書を作"
"成します。"

#: ../../c-api/object.rst:133
msgid ""
"A generic implementation for the setter of a ``__dict__`` descriptor. This "
"implementation does not allow the dictionary to be deleted."
msgstr ""
"``__dict__`` デスクリプタの setter の総称的な実装です。この実装では辞書を削除"
"することは許されていません。"

#: ../../c-api/object.rst:141
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by *opid*, "
"which must be one of :const:`Py_LT`, :const:`Py_LE`, :const:`Py_EQ`, :const:"
"`Py_NE`, :const:`Py_GT`, or :const:`Py_GE`, corresponding to ``<``, ``<=``, "
"``==``, ``!=``, ``>``, or ``>=`` respectively. This is the equivalent of the "
"Python expression ``o1 op o2``, where ``op`` is the operator corresponding "
"to *opid*. Returns the value of the comparison on success, or ``NULL`` on "
"failure."
msgstr ""
"*o1* と *o2* を *opid* に指定した演算によって比較します。 *opid* は :const:"
"`Py_LT`, :const:`Py_LE`, :const:`Py_EQ`, :const:`Py_NE`, :const:`Py_GT`, また"
"は :const:`Py_GE`, のいずれかでなければならず、それぞれ ``<``, ``<=``, "
"``==``, ``!=``, ``>``, および ``>=`` に対応します。この関数は Python の式 "
"``o1 op o2`` と同じで、 ``op`` が *opid* に対応する演算子です。成功すると比較"
"結果の値を返し失敗すると ``NULL`` を返します。"

#: ../../c-api/object.rst:151
msgid ""
"Compare the values of *o1* and *o2* using the operation specified by *opid*, "
"which must be one of :const:`Py_LT`, :const:`Py_LE`, :const:`Py_EQ`, :const:"
"`Py_NE`, :const:`Py_GT`, or :const:`Py_GE`, corresponding to ``<``, ``<=``, "
"``==``, ``!=``, ``>``, or ``>=`` respectively. Returns ``-1`` on error, "
"``0`` if the result is false, ``1`` otherwise. This is the equivalent of the "
"Python expression ``o1 op o2``, where ``op`` is the operator corresponding "
"to *opid*."
msgstr ""
"*o1* と *o2* を *opid* に指定した演算によって比較します。 *opid* は :const:"
"`Py_LT`, :const:`Py_LE`, :const:`Py_EQ`, :const:`Py_NE`, :const:`Py_GT`, また"
"は :const:`Py_GE`, のいずれかでなければならず、それぞれ ``<``, ``<=``, "
"``==``, ``!=``, ``>``, および ``>=`` に対応します。比較結果が真ならば ``1`` "
"を、偽ならば ``0`` を、エラーが発生すると ``-1`` を返します。この関数は "
"Python の式 ``o1 op o2`` と同じで、 ``op`` が *opid* に対応する演算子です。"

#: ../../c-api/object.rst:160
msgid ""
"If *o1* and *o2* are the same object, :c:func:`PyObject_RichCompareBool` "
"will always return ``1`` for :const:`Py_EQ` and ``0`` for :const:`Py_NE`."
msgstr ""
"*o1* と *o2* が同一のオブジェクトである場合、 :c:func:"
"`PyObject_RichCompareBool` は :const:`Py_EQ` に対して常に ``1`` を返し、 :"
"const:`Py_NE` に対して常に ``0`` を返します。"

#: ../../c-api/object.rst:167
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, ``NULL`` on failure.  This is the equivalent of "
"the Python expression ``repr(o)``.  Called by the :func:`repr` built-in "
"function."
msgstr ""
"オブジェクト *o* の文字列表現を計算します。成功すると文字列表現を返し、失敗す"
"ると ``NULL`` を返します。 Python 式 ``repr(o)`` と同じです。この関数は組み込"
"み関数 :func:`repr` の処理で呼び出されます。"

#: ../../c-api/object.rst:171 ../../c-api/object.rst:195
msgid ""
"This function now includes a debug assertion to help ensure that it does not "
"silently discard an active exception."
msgstr ""
"アクティブな例外を黙って捨てないことを保証するのに便利なように、この関数はデ"
"バッグアサーションを含むようになりました。"

#: ../../c-api/object.rst:179
msgid ""
"As :c:func:`PyObject_Repr`, compute a string representation of object *o*, "
"but escape the non-ASCII characters in the string returned by :c:func:"
"`PyObject_Repr` with ``\\x``, ``\\u`` or ``\\U`` escapes.  This generates a "
"string similar to that returned by :c:func:`PyObject_Repr` in Python 2. "
"Called by the :func:`ascii` built-in function."
msgstr ""
":c:func:`PyObject_Repr` と同様、オブジェクト *o* の文字列表現を計算します"
"が、 :c:func:`PyObject_Repr` によって返された文字列に含まれる非 ASCII 文字"
"を、エスケープ文字 ``\\x`` 、 ``\\u`` 、 ``\\U`` でエスケープします。この関数"
"は Pythoh 2 の :c:func:`PyObject_Repr` が返す文字列と同じ文字列を生成しま"
"す。 :func:`ascii` によって呼び出されます。"

#: ../../c-api/object.rst:190
msgid ""
"Compute a string representation of object *o*.  Returns the string "
"representation on success, ``NULL`` on failure.  This is the equivalent of "
"the Python expression ``str(o)``.  Called by the :func:`str` built-in "
"function and, therefore, by the :func:`print` function."
msgstr ""
"オブジェクト *o* の文字列表現を計算します。成功すると文字列表現を返し、失敗す"
"ると ``NULL`` を返します。 Python 式 ``str(o)`` と同じです。この関数は組み込"
"み関数 :func:`str` や、 :func:`print` 関数の処理で呼び出されます。"

#: ../../c-api/object.rst:203
msgid ""
"Compute a bytes representation of object *o*.  ``NULL`` is returned on "
"failure and a bytes object on success.  This is equivalent to the Python "
"expression ``bytes(o)``, when *o* is not an integer.  Unlike ``bytes(o)``, a "
"TypeError is raised when *o* is an integer instead of a zero-initialized "
"bytes object."
msgstr ""
"オブジェクト *o* のバイト列表現を計算します。失敗すると ``NULL`` を返し、成功"
"すると bytes オブジェクトを返します。 *o* が整数でないときの、 Python 式 "
"``bytes(o)`` と同じです。 ``bytes(o)`` と違って、 *o* が整数のときには、ゼロ"
"で初期化された bytes オブジェクトを返すのではなく TypeError が送出されます。"

#: ../../c-api/object.rst:212
msgid ""
"Return ``1`` if the class *derived* is identical to or derived from the "
"class *cls*, otherwise return ``0``.  In case of an error, return ``-1``."
msgstr ""
"クラス *derived* がクラス *cls* と同一であるか、そこから派生したクラスである"
"場合は ``1`` を返し、そうでない場合は ``0`` を返します。\n"
"エラーが起きた場合は ``-1`` を返します。"

#: ../../c-api/object.rst:215 ../../c-api/object.rst:234
msgid ""
"If *cls* is a tuple, the check will be done against every entry in *cls*. "
"The result will be ``1`` when at least one of the checks returns ``1``, "
"otherwise it will be ``0``."
msgstr ""
"*cls* がタプルの場合、 *cls* の全ての要素に対してチェックします。\n"
"少なくとも1つのチェックで ``1`` が返ったとき、結果は ``1`` となり、それ以外の"
"とき ``0`` になります。"

#: ../../c-api/object.rst:219
msgid ""
"If *cls* has a :meth:`~class.__subclasscheck__` method, it will be called to "
"determine the subclass status as described in :pep:`3119`.  Otherwise, "
"*derived* is a subclass of *cls* if it is a direct or indirect subclass, i."
"e. contained in ``cls.__mro__``."
msgstr ""
"*cls* に :meth:`~class.__subclasscheck__` メソッドがある場合は、子クラスの状"
"態が :pep:`3119` にある通りかどうかを判定するために呼ばれます。\n"
"そうでないとき *derived* が *cls* の子クラスになるのは、直接的あるいは間接的"
"な子クラスである場合、つまり ``cls.__mro__`` に含まれる場合です。"

#: ../../c-api/object.rst:224
msgid ""
"Normally only class objects, i.e. instances of :class:`type` or a derived "
"class, are considered classes.  However, objects can override this by having "
"a :attr:`__bases__` attribute (which must be a tuple of base classes)."
msgstr ""
"通常は、クラスオブジェクト、つまり :class:`type` のインスタンスやそこから派生"
"したクラスだけがクラスと見なされます。\n"
"しかし、オブジェクトに属性 :attr:`__bases__` (これは基底クラスのタプルでなけ"
"ればならない) を持たせることで上書きできます。"

#: ../../c-api/object.rst:231
msgid ""
"Return ``1`` if *inst* is an instance of the class *cls* or a subclass of "
"*cls*, or ``0`` if not.  On error, returns ``-1`` and sets an exception."
msgstr ""
"*inst* がクラス *cls* もしくは *cls* の子クラスのインスタンスである場合に "
"``1`` を返し、そうでない場合に ``0`` を返します。\n"
"エラーが起きると ``-1`` を返し例外を設定します。"

#: ../../c-api/object.rst:238
msgid ""
"If *cls* has a :meth:`~class.__instancecheck__` method, it will be called to "
"determine the subclass status as described in :pep:`3119`.  Otherwise, "
"*inst* is an instance of *cls* if its class is a subclass of *cls*."
msgstr ""
"*cls* に :meth:`~class.__instancecheck__` メソッドがある場合は、子クラスの状"
"態が :pep:`3119` にある通りかどうかを判定するために呼ばれます。 \n"
"そうでないとき *inst* が *cls* のインスタンスになるのは、そのクラスが *cls* "
"の子クラスである場合です。"

#: ../../c-api/object.rst:242
msgid ""
"An instance *inst* can override what is considered its class by having a :"
"attr:`__class__` attribute."
msgstr ""
"インスタンス *inst* に属性 :attr:`__class__` を持たせることで、そのクラスと見"
"なされるものを上書きできます。"

#: ../../c-api/object.rst:245
msgid ""
"An object *cls* can override if it is considered a class, and what its base "
"classes are, by having a :attr:`__bases__` attribute (which must be a tuple "
"of base classes)."
msgstr ""
"オブジェクト *cls* とその基底クラスがクラスと見なされる場合、属性 :attr:"
"`__bases__` (これは基底クラスのタプルでなければならない) を持たせることで上書"
"きできます。"

#: ../../c-api/object.rst:252
msgid ""
"Determine if the object *o* is callable.  Return ``1`` if the object is "
"callable and ``0`` otherwise.  This function always succeeds."
msgstr ""
"オブジェクト *o* が呼び出し可能オブジェクトかどうか調べます。オブジェクトが呼"
"び出し可能であるときに ``1`` を返し、そうでないときには ``0`` を返します。こ"
"の関数呼び出しは常に成功します。"

#: ../../c-api/object.rst:258
msgid ""
"Call a callable Python object *callable*, with arguments given by the tuple "
"*args*, and named arguments given by the dictionary *kwargs*."
msgstr ""
"呼び出し可能な Python のオブジェクト *callable* を、タプル *args* として与え"
"られる引数と辞書 *kwargs* として与えられる名前付き引数とともに呼び出します。"

#: ../../c-api/object.rst:261
msgid ""
"*args* must not be ``NULL``, use an empty tuple if no arguments are needed. "
"If no named arguments are needed, *kwargs* can be ``NULL``."
msgstr ""
"*args* は ``NULL`` であってはならず、引数を必要としない場合は空のタプルを使っ"
"てください。\n"
"*kwargs* は ``NULL`` でも構いません。"

#: ../../c-api/object.rst:264 ../../c-api/object.rst:276
#: ../../c-api/object.rst:288 ../../c-api/object.rst:308
#: ../../c-api/object.rst:327 ../../c-api/object.rst:341
msgid ""
"Return the result of the call on success, or raise an exception and return "
"``NULL`` on failure."
msgstr ""
"成功したら呼び出しの結果を返し、失敗したら例外を送出し ``NULL`` を返します。"

#: ../../c-api/object.rst:267
msgid ""
"This is the equivalent of the Python expression: ``callable(*args, "
"**kwargs)``."
msgstr "これは次の Python の式と同等です: ``callable(*args, **kwargs)`` 。"

#: ../../c-api/object.rst:273
msgid ""
"Call a callable Python object *callable*, with arguments given by the tuple "
"*args*.  If no arguments are needed, then *args* can be ``NULL``."
msgstr ""
"呼び出し可能な Python のオブジェクト *callable* を、タプル *args* として与え"
"られる引数とともに呼び出します。\n"
"引数が不要な場合は、 *args* は ``NULL`` で構いません。"

#: ../../c-api/object.rst:279 ../../c-api/object.rst:291
msgid "This is the equivalent of the Python expression: ``callable(*args)``."
msgstr "これは次の Python の式と同等です: ``callable(*args)`` 。"

#: ../../c-api/object.rst:284
msgid ""
"Call a callable Python object *callable*, with a variable number of C "
"arguments. The C arguments are described using a :c:func:`Py_BuildValue` "
"style format string.  The format can be ``NULL``, indicating that no "
"arguments are provided."
msgstr ""
"呼び出し可能な Python オブジェクト *callable* を可変数個の C 引数とともに呼び"
"出します。\n"
"C 引数は :c:func:`Py_BuildValue` 形式のフォーマット文字列を使って記述しま"
"す。\n"
" *format* は ``NULL`` かもしれず、与える引数がないことを表します。"

#: ../../c-api/object.rst:293
msgid ""
"Note that if you only pass :c:type:`PyObject \\*` args, :c:func:"
"`PyObject_CallFunctionObjArgs` is a faster alternative."
msgstr ""
":c:type:`PyObject \\*` args だけを引数に渡す場合は、 :c:func:"
"`PyObject_CallFunctionObjArgs` がより速い方法であることを覚えておいてくださ"
"い。 "

#: ../../c-api/object.rst:296
msgid "The type of *format* was changed from ``char *``."
msgstr "*format* の型が ``char *`` から変更されました。"

#: ../../c-api/object.rst:302
msgid ""
"Call the method named *name* of object *obj* with a variable number of C "
"arguments.  The C arguments are described by a :c:func:`Py_BuildValue` "
"format string that should  produce a tuple."
msgstr ""
"オブジェクト *obj* の *name* という名前のメソッドを、いくつかの C 引数ととも"
"に呼び出します。\n"
"C 引数はタプルを生成する :c:func:`Py_BuildValue` 形式のフォーマット文字列で記"
"述されています。"

#: ../../c-api/object.rst:306
msgid "The format can be ``NULL``, indicating that no arguments are provided."
msgstr "*format* は ``NULL`` でもよく、引数が与えられないことを表します。 "

#: ../../c-api/object.rst:311
msgid ""
"This is the equivalent of the Python expression: ``obj.name(arg1, "
"arg2, ...)``."
msgstr "これは次の Python の式と同等です: ``obj.name(arg1, arg2, ...)`` 。"

#: ../../c-api/object.rst:314
msgid ""
"Note that if you only pass :c:type:`PyObject \\*` args, :c:func:"
"`PyObject_CallMethodObjArgs` is a faster alternative."
msgstr ""
":c:type:`PyObject \\*` args だけを引数に渡す場合は、 :c:func:"
"`PyObject_CallMethodObjArgs` がより速い方法であることを覚えておいてくださ"
"い。 "

#: ../../c-api/object.rst:317
msgid "The types of *name* and *format* were changed from ``char *``."
msgstr "*name* と *format* の型が ``char *`` から変更されました。"

#: ../../c-api/object.rst:323
msgid ""
"Call a callable Python object *callable*, with a variable number of :c:type:"
"`PyObject\\*` arguments.  The arguments are provided as a variable number of "
"parameters followed by ``NULL``."
msgstr ""
"呼び出し可能な Python オブジェクト *callable* を可変数個の :c:type:"
"`PyObject\\*` 引数とともに呼び出します。引数列は末尾に ``NULL`` がついた可変"
"数個のパラメタとして与えます。"

#: ../../c-api/object.rst:330
msgid ""
"This is the equivalent of the Python expression: ``callable(arg1, "
"arg2, ...)``."
msgstr "これは次の Python の式と同等です: ``callable(arg1, arg2, ...)`` 。"

#: ../../c-api/object.rst:336
msgid ""
"Calls a method of the Python object *obj*, where the name of the method is "
"given as a Python string object in *name*.  It is called with a variable "
"number of :c:type:`PyObject\\*` arguments.  The arguments are provided as a "
"variable number of parameters followed by ``NULL``."
msgstr ""
"Python オブジェクト *obj* のメソッドを呼び出します、メソッド名は Python 文字"
"列オブジェクト *name* で与えます。可変数個の :c:type:`PyObject\\*` 引数と共に"
"呼び出されます. 引数列は末尾に ``NULL`` がついた可変数個のパラメタとして与え"
"ます。"

#: ../../c-api/object.rst:349
msgid ""
"Compute and return the hash value of an object *o*.  On failure, return "
"``-1``. This is the equivalent of the Python expression ``hash(o)``."
msgstr ""
"オブジェクト *o* のハッシュ値を計算して返します。失敗すると ``-1`` を返しま"
"す。 Python の式 ``hash(o)`` と同じです。"

#: ../../c-api/object.rst:352
msgid ""
"The return type is now Py_hash_t.  This is a signed integer the same size as "
"Py_ssize_t."
msgstr ""
"返り値の型が Py_hash_t になりました。この型は、 Py_ssize_t と同じサイズをもつ"
"符号付き整数です。"

#: ../../c-api/object.rst:359
msgid ""
"Set a :exc:`TypeError` indicating that ``type(o)`` is not hashable and "
"return ``-1``. This function receives special treatment when stored in a "
"``tp_hash`` slot, allowing a type to explicitly indicate to the interpreter "
"that it is not hashable."
msgstr ""
"``type(o)`` がハッシュ不可能であることを示す :exc:`TypeError` を設定し、 "
"``-1`` を返します。この関数は ``tp_hash`` スロットに格納されたときには特別な"
"扱いを受け、その type がハッシュ不可能であることをインタプリタに明示的に示し"
"ます。"

#: ../../c-api/object.rst:367
msgid ""
"Returns ``1`` if the object *o* is considered to be true, and ``0`` "
"otherwise. This is equivalent to the Python expression ``not not o``.  On "
"failure, return ``-1``."
msgstr ""
"*o* が真を表すとみなせる場合には ``1`` を、そうでないときには ``0`` を返しま"
"す。   Python の式 ``not not o`` と同じです。失敗すると ``-1`` を返します。"

#: ../../c-api/object.rst:374
msgid ""
"Returns ``0`` if the object *o* is considered to be true, and ``1`` "
"otherwise. This is equivalent to the Python expression ``not o``.  On "
"failure, return ``-1``."
msgstr ""
"*o* が真を表すとみなせる場合には ``0`` を、そうでないときには ``1`` を返しま"
"す。   Python の式 ``not o`` と同じです。失敗すると ``-1`` を返します。"

#: ../../c-api/object.rst:383
msgid ""
"When *o* is non-``NULL``, returns a type object corresponding to the object "
"type of object *o*. On failure, raises :exc:`SystemError` and returns "
"``NULL``.  This is equivalent to the Python expression ``type(o)``. This "
"function increments the reference count of the return value. There's really "
"no reason to use this function instead of the common expression ``o-"
">ob_type``, which returns a pointer of type :c:type:`PyTypeObject\\*`, "
"except when the incremented reference count is needed."
msgstr ""
"*o* が ``NULL`` でない場合、オブジェクト *o* のオブジェクト型に相当する型オブ"
"ジェクトを返します。失敗すると :exc:`SystemError` を送出して ``NULL`` を返し"
"ます。 Python の式 ``type(o)`` と同じです。  この関数は戻り値の参照カウントを"
"インクリメントします。参照カウントのインクリメントが必要でない限り、広く使わ"
"れていて :c:type:`PyTypeObject\\*` 型のポインタを返す表記法 ``o->ob_type`` の"
"代わりに使う理由は全くありません。"

#: ../../c-api/object.rst:394
msgid ""
"Return true if the object *o* is of type *type* or a subtype of *type*.  "
"Both parameters must be non-``NULL``."
msgstr ""
"オブジェクト *o* が、 *type* か *type* のサブタイプであるときに真を返します。"
"どちらのパラメタも ``NULL`` であってはなりません。"

#: ../../c-api/object.rst:403
msgid ""
"Return the length of object *o*.  If the object *o* provides either the "
"sequence and mapping protocols, the sequence length is returned.  On error, "
"``-1`` is returned.  This is the equivalent to the Python expression "
"``len(o)``."
msgstr ""
"*o* の長さを返します。ただしオブジェクト *o* がシーケンス型プロトコルとマップ"
"型プロトコルの両方を提供している場合、シーケンスとしての長さを返します。エ"
"ラーが生じると ``-1`` を返します。 Python の式 ``len(o)`` と同じです。"

#: ../../c-api/object.rst:410
msgid ""
"Return an estimated length for the object *o*. First try to return its "
"actual length, then an estimate using :meth:`~object.__length_hint__`, and "
"finally return the default value. On error return ``-1``. This is the "
"equivalent to the Python expression ``operator.length_hint(o, default)``."
msgstr ""
"オブジェクト *o* の概算の長さを返します。\n"
"最初に実際の長さを、次に :meth:`~object.__length_hint__` を使って概算の長さ"
"を、そして最後にデフォルトの値を返そうとします。\n"
"この関数は Python の式 ``operator.length_hint(o, default)`` と同じです。"

#: ../../c-api/object.rst:420
msgid ""
"Return element of *o* corresponding to the object *key* or ``NULL`` on "
"failure. This is the equivalent of the Python expression ``o[key]``."
msgstr ""
"オブジェクト *key* に対応する *o* の要素を返します。失敗すると ``NULL`` を返"
"します。Python の式 ``o[key]`` と同じです。"

#: ../../c-api/object.rst:426
msgid ""
"Map the object *key* to the value *v*.  Raise an exception and return ``-1`` "
"on failure; return ``0`` on success.  This is the equivalent of the Python "
"statement ``o[key] = v``."
msgstr ""
"オブジェクト *key* を値 *v* に対応付けます。\n"
"失敗すると例外を送出し ``-1`` を返します; 成功すると ``0`` を返します。\n"
"Python の文 ``o[key] = v`` と同じです。"

#: ../../c-api/object.rst:433
msgid ""
"Remove the mapping for the object *key* from the object *o*.  Return ``-1`` "
"on failure.  This is equivalent to the Python statement ``del o[key]``."
msgstr ""
"オブジェクト *o* から *key* に関する対応付けを削除します。失敗すると ``-1`` "
"を返します。Python の文 ``del o[key]`` と同じです。"

#: ../../c-api/object.rst:439
msgid ""
"This is equivalent to the Python expression ``dir(o)``, returning a "
"(possibly empty) list of strings appropriate for the object argument, or "
"``NULL`` if there was an error.  If the argument is ``NULL``, this is like "
"the Python ``dir()``, returning the names of the current locals; in this "
"case, if no execution frame is active then ``NULL`` is returned but :c:func:"
"`PyErr_Occurred` will return false."
msgstr ""
"この関数は Python の式 ``dir(o)`` と同じで、オブジェクトの変数名に割り当てて"
"いる文字列からなるリスト (空の場合もあります) を返します。エラーの場合には "
"``NULL`` を返します。引数を ``NULL`` にすると、Python における ``dir()`` と同"
"様に、現在のローカルな名前を返します; この場合、アクティブな実行フレームがな"
"ければ ``NULL`` を返しますが、 :c:func:`PyErr_Occurred` は偽を返します。"

#: ../../c-api/object.rst:448
msgid ""
"This is equivalent to the Python expression ``iter(o)``. It returns a new "
"iterator for the object argument, or the object  itself if the object is "
"already an iterator.  Raises :exc:`TypeError` and returns ``NULL`` if the "
"object cannot be iterated."
msgstr ""
"Python の式 ``iter(o)`` と同じです。引数にとったオブジェクトに対する新たなイ"
"テレータか、オブジェクトがすでにイテレータの場合にはオブジェクト自身を返しま"
"す。オブジェクトが反復処理不可能であった場合には :exc:`TypeError` を送出して "
"``NULL`` を返します。"
