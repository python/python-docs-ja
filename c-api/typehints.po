# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/typehints.rst:6
msgid "Objects for Type Hinting"
msgstr "型ヒントのためのオブジェクト"

#: ../../c-api/typehints.rst:8
msgid ""
"Various built-in types for type hinting are provided.  Currently, two types "
"exist -- :ref:`GenericAlias <types-genericalias>` and :ref:`Union <types-"
"union>`.  Only ``GenericAlias`` is exposed to C."
msgstr ""

#: ../../c-api/typehints.rst:14
msgid ""
"Create a :ref:`GenericAlias <types-genericalias>` object. Equivalent to "
"calling the Python class :class:`types.GenericAlias`.  The *origin* and "
"*args* arguments set the ``GenericAlias``\\ 's ``__origin__`` and "
"``__args__`` attributes respectively. *origin* should be a :c:expr:"
"`PyTypeObject*`, and *args* can be a :c:expr:`PyTupleObject*` or any "
"``PyObject*``.  If *args* passed is not a tuple, a 1-tuple is automatically "
"constructed and ``__args__`` is set to ``(args,)``. Minimal checking is done "
"for the arguments, so the function will succeed even if *origin* is not a "
"type. The ``GenericAlias``\\ 's ``__parameters__`` attribute is constructed "
"lazily from ``__args__``.  On failure, an exception is raised and ``NULL`` "
"is returned."
msgstr ""
":ref:`GenericAlias` 型のオブジェクトを生成します。Pythonクラス :class:`types."
"GenericAlias` を呼び出すことと同等です。引数 *origin* と *args* は"
"``GenericAlias``の``__origin__``および``__args__``属性をそれぞれ設定します。 "
"*origin* は :c:expr:`PyTypeObject*` でなければならず、 *args* は :c:expr:"
"`PyTupleObject*` または任意の``PyObject*``です。 *args* がタプルでない場合に"
"は1タプルが自動的に生成され、``__args__``には``(args,)``が設定されます。引数"
"チェックは最小限なため、たとえ *origin* が型を示すオブジェクトでなくても関数"
"呼び出しは成功します。``GenericAlias``の``__parameters__``属性は``__args__``"
"から必要に応じて遅延生成されます。失敗した場合、例外が送出されて``NULL``を返"
"します。"

#: ../../c-api/typehints.rst:28
msgid "Here's an example of how to make an extension type generic::"
msgstr "以下は拡張の型をジェネリックにする例です。"

#: ../../c-api/typehints.rst:38
msgid "The data model method :meth:`__class_getitem__`."
msgstr "データモデルメソッド :meth:`__class_getitem__` 。"

#: ../../c-api/typehints.rst:44
msgid ""
"The C type of the object returned by :c:func:`Py_GenericAlias`. Equivalent "
"to :class:`types.GenericAlias` in Python."
msgstr ""
":c:func:`Py_GenericAlias` により返されるCの型オブジェクトです。Pythonの :"
"class:`types.GenericAlias` と同等です。"
