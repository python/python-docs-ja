# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/module.rst:6
msgid "Module Objects"
msgstr "モジュールオブジェクト (module object)"

#: ../../c-api/module.rst:10
msgid "There are only a few functions special to module objects."
msgstr "モジュールオブジェクト固有の関数は数個しかありません。"

#: ../../c-api/module.rst:17
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python module type.  "
"This is exposed to Python programs as ``types.ModuleType``."
msgstr ""
"この :c:type:`PyTypeObject` のインスタンスは Python のモジュールオブジェクト"
"型を表現します。このオブジェクトは、Python プログラムには ``types."
"ModuleType``  として公開されています。"

#: ../../c-api/module.rst:23
msgid "Return true if *p* is a module object, or a subtype of a module object."
msgstr ""
"*p* がモジュールオブジェクトかモジュールオブジェクトのサブタイプであるときに"
"真を返します。"

#: ../../c-api/module.rst:25
msgid "Allowed subtypes to be accepted."
msgstr "サブタイプを引数にとれるようになりました."

#: ../../c-api/module.rst:31
msgid ""
"Return true if *p* is a module object, but not a subtype of :c:data:"
"`PyModule_Type`."
msgstr ""
"*p* がモジュールオブジェクトで、かつモジュールオブジェクトのサブタイプでない"
"ときに真を返します。 :c:data:`PyModule_Type`."

#: ../../c-api/module.rst:44
msgid ""
"Return a new module object with the :attr:`__name__` attribute set to "
"*name*. Only the module's :attr:`__doc__` and :attr:`__name__` attributes "
"are filled in; the caller is responsible for providing a :attr:`__file__` "
"attribute."
msgstr ""
":attr:`__name__` 属性が *name* に設定された新たなモジュールオブジェクトを返し"
"ます。モジュールの :attr:`__doc__` および :attr:`__name__` 属性だけに値が入っ"
"ています; :attr:`__file__` 属性に値を入れるのは呼び出し側の責任です。"

#: ../../c-api/module.rst:53
msgid ""
"Return the dictionary object that implements *module*'s namespace; this "
"object is the same as the :attr:`~object.__dict__` attribute of the module "
"object.  This function never fails.  It is recommended extensions use other :"
"c:func:`PyModule_\\*` and :c:func:`PyObject_\\*` functions rather than "
"directly manipulate a module's :attr:`~object.__dict__`."
msgstr ""
"*module* の名前空間を実現する辞書オブジェクトを返します; このオブジェクトはモ"
"ジュールオブジェクトの :attr:`~object.__dict__` と同じです。この関数が失敗す"
"ることはありません。  拡張モジュールでは、この関数で得たモジュールの :attr:"
"`~object.__dict__` を直接いじるより、他の :c:func:`PyModule_\\*` および :c:"
"func:`PyObject_\\*` 関数を使うよう勧めます。"

#: ../../c-api/module.rst:66
msgid ""
"Return *module*'s :attr:`__name__` value.  If the module does not provide "
"one, or if it is not a string, :exc:`SystemError` is raised and *NULL* is "
"returned."
msgstr ""
"*module* の :attr:`__name__` の値を返します。モジュールがこの属性を提供してい"
"ない場合や文字列型でない場合、 :exc:`SystemError` を送出して *NULL* を返しま"
"す。"

#: ../../c-api/module.rst:76
msgid ""
"Return the name of the file from which *module* was loaded using *module*'s :"
"attr:`__file__` attribute.  If this is not defined, or if it is not a "
"string, raise :exc:`SystemError` and return *NULL*."
msgstr ""
"*module* をロードするために使ったファイルの名前を、 *module* の :attr:"
"`__file__` 属性から調べて返します。 :attr:`__file__` が定義されていない場合や"
"文字列型でない場合、 :exc:`SystemError` を送出して *NULL* を返します。"

#: ../../c-api/module.rst:83
msgid ""
"Add an object to *module* as *name*.  This is a convenience function which "
"can be used from the module's initialization function.  This steals a "
"reference to *value*.  Return ``-1`` on error, ``0`` on success."
msgstr ""
"*module* にオブジェクトを *name* として追加します。この関数はモジュールの初期"
"化関数から利用される便宜関数です。これは *value* への参照を盗みます。エラーの"
"ときには ``-1`` を、成功したときには ``0`` を返します。"

#: ../../c-api/module.rst:92
msgid ""
"Add an integer constant to *module* as *name*.  This convenience function "
"can be used from the module's initialization function. Return ``-1`` on "
"error, ``0`` on success."
msgstr ""
"*module* に整数定数を *name* として追加します。この便宜関数はモジュールの初期"
"化関数から利用されています。エラーのときには ``-1`` を、成功したときには "
"``0`` を返します。"

#: ../../c-api/module.rst:101
msgid ""
"Add a string constant to *module* as *name*.  This convenience function can "
"be used from the module's initialization function.  The string *value* must "
"be null-terminated.  Return ``-1`` on error, ``0`` on success."
msgstr ""
"*module* に文字列定数を *name* として追加します。この便宜関数はモジュールの初"
"期化関数から利用されています。文字列 *value* は null 終端されていなければなり"
"ません。エラーのときには ``-1`` を、成功したときには ``0`` を返します。"

#: ../../c-api/module.rst:109
msgid ""
"Add an int constant to *module*. The name and the value are taken from "
"*macro*. For example ``PyModule_AddIntMacro(module, AF_INET)`` adds the int "
"constant *AF_INET* with the value of *AF_INET* to *module*. Return ``-1`` on "
"error, ``0`` on success."
msgstr ""
"*module* に int 定数を追加します。名前と値は *macro* から取得されます。例え"
"ば、``PyModule_AddIntMacro(module, AF_INET)`` とすると、*AF_INET* という名前"
"の int 型定数を *AF_INET* の値で *module* に追加します。エラー時には ``-1`` "
"を、成功時には ``0`` を返します。"

#: ../../c-api/module.rst:118
msgid "Add a string constant to *module*."
msgstr "文字列定数を *module* に追加します。"
