# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:48+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "複素数オブジェクト (complex number object)"

#: ../../c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs, "
"and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"Python の複素数オブジェクトは、C API 側から見ると二つの別個の型として実装され"
"ています: 一方は Python プログラムに対して公開されている Python のオブジェク"
"トで、他方は実際の複素数値を表現する C の構造体です。API では、これら双方を扱"
"う関数を提供しています。"

#: ../../c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr "C 構造体としての複素数"

#: ../../c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""
"複素数の C 構造体を引数として受理したり、戻り値として返したりする関数は、ポイ"
"ンタ渡しを行うのではなく *値渡し* を行うので注意してください。これは API 全体"
"を通して一貫しています。"

#: ../../c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate.  It is defined as::"
msgstr ""
"Python 複素数オブジェクトの値の部分に対応する C の構造体です。複素数オブジェ"
"クトを扱うほとんどの関数は、この型の構造体を場合に応じて入力や出力として使い"
"ます。構造体は以下のように定義されています::"

#: ../../c-api/complex.rst:39
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "二つの複素数の和を C の :c:type:`Py_complex` 型で返します。"

#: ../../c-api/complex.rst:45
msgid ""
"Return the difference between two complex numbers, using the C :c:type:"
"`Py_complex` representation."
msgstr "二つの複素数の差を C の :c:type:`Py_complex` 型で返します。"

#: ../../c-api/complex.rst:51
msgid ""
"Return the negation of the complex number *complex*, using the C :c:type:"
"`Py_complex` representation."
msgstr "複素数 *complex* の符号反転 C の :c:type:`Py_complex` 型で返します。"

#: ../../c-api/complex.rst:57
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "二つの複素数の積を C の :c:type:`Py_complex` 型で返します。"

#: ../../c-api/complex.rst:63
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "二つの複素数の商を C の :c:type:`Py_complex` 型で返します。"

#: ../../c-api/complex.rst:66
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to :"
"c:data:`EDOM`."
msgstr ""
"*divisor* が null の場合は、このメソッドはゼロを返し、 :c:data:`errno` に :c:"
"data:`EDOM` をセットします。"

#: ../../c-api/complex.rst:72
msgid ""
"Return the exponentiation of *num* by *exp*, using the C :c:type:"
"`Py_complex` representation."
msgstr "指数 *exp* の *num* 乗を C の :c:type:`Py_complex` 型で返します。"

#: ../../c-api/complex.rst:75
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:data:`EDOM`."
msgstr ""
"*num* が null で *exp* が正の実数でない場合は、このメソッドはゼロを返し、 :c:"
"data:`errno` に :c:data:`EDOM` をセットします。"

#: ../../c-api/complex.rst:80
msgid "Complex Numbers as Python Objects"
msgstr "Python オブジェクトとしての複素数型"

#: ../../c-api/complex.rst:85
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number object."
msgstr "この :c:type:`PyObject` のサブタイプは Python の複素数型を表現します。"

#: ../../c-api/complex.rst:90
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number "
"type. It is the same object as :class:`complex` in the Python layer."
msgstr ""
"この :c:type:`PyTypeObject` のインスタンスは Python の複素数型を表現します。 "
"Pythonレイヤの :class:`complex` と同じオブジェクトです。"

#: ../../c-api/complex.rst:96
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of :"
"c:type:`PyComplexObject`."
msgstr ""
"引数が :c:type:`PyComplexObject` 型か :c:type:`PyComplexObject` 型のサブタイ"
"プのときに真を返します。"

#: ../../c-api/complex.rst:102
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`."
msgstr ""
"引数が :c:type:`PyComplexObject` 型で、かつ :c:type:`PyComplexObject` 型のサ"
"ブタイプでないときに真を返します。"

#: ../../c-api/complex.rst:108
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value."
msgstr "C の :c:type:`Py_complex` 型から Python の複素数値を生成します。"

#: ../../c-api/complex.rst:113
msgid "Return a new :c:type:`PyComplexObject` object from *real* and *imag*."
msgstr ""
"新たな :c:type:`PyComplexObject` オブジェクトを *real* と *imag* から生成しま"
"す。"

#: ../../c-api/complex.rst:118
msgid "Return the real part of *op* as a C :c:type:`double`."
msgstr "*op* の実数部分を C の :c:type:`double` 型で返します。"

#: ../../c-api/complex.rst:123
msgid "Return the imaginary part of *op* as a C :c:type:`double`."
msgstr "*op* の虚数部分を C の :c:type:`double` 型で返します。"

#: ../../c-api/complex.rst:128
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr "複素数値 *op* から :c:type:`Py_complex` 型を生成します。"

#: ../../c-api/complex.rst:130
msgid ""
"If *op* is not a Python complex number object but has a :meth:`__complex__` "
"method, this method will first be called to convert *op* to a Python complex "
"number object. Upon failure, this method returns ``-1.0`` as a real value."
msgstr ""
"*op* が Python の複素数オブジェクトではないが、 :meth:`__complex__` メソッド"
"を持っていた場合、このメソッドが最初に呼ばれ、 *op* が Python の複素数オブ"
"ジェクトに変換されます。処理が失敗した場合は、このメソッドは実数の ``-1.0`` "
"を返します。"
