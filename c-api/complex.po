# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Arihiro TAKASE, 2023
# tomo, 2023
# Taichi Haradaguchi, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:48+0000\n"
"Last-Translator: Taichi Haradaguchi, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/complex.rst:6
msgid "Complex Number Objects"
msgstr "複素数オブジェクト"

#: ../../c-api/complex.rst:10
msgid ""
"Python's complex number objects are implemented as two distinct types when "
"viewed from the C API:  one is the Python object exposed to Python programs, "
"and the other is a C structure which represents the actual complex number "
"value. The API provides functions for working with both."
msgstr ""
"Python の複素数オブジェクトは、C API 側から見ると二つの別個の型として実装され"
"ています: 一方は Python プログラムに対して公開されている Python のオブジェク"
"トで、他方は実際の複素数値を表現する C の構造体です。API では、これら双方を扱"
"う関数を提供しています。"

#: ../../c-api/complex.rst:17
msgid "Complex Numbers as C Structures"
msgstr "C 構造体としての複素数"

#: ../../c-api/complex.rst:19
msgid ""
"Note that the functions which accept these structures as parameters and "
"return them as results do so *by value* rather than dereferencing them "
"through pointers.  This is consistent throughout the API."
msgstr ""
"複素数の C 構造体を引数として受理したり、戻り値として返したりする関数は、ポイ"
"ンタ渡しを行うのではなく *値渡し* を行うので注意してください。これは API 全体"
"を通して一貫しています。"

#: ../../c-api/complex.rst:26
msgid ""
"The C structure which corresponds to the value portion of a Python complex "
"number object.  Most of the functions for dealing with complex number "
"objects use structures of this type as input or output values, as "
"appropriate."
msgstr ""

#: ../../c-api/complex.rst:33
msgid "The structure is defined as::"
msgstr ""

#: ../../c-api/complex.rst:35
msgid ""
"typedef struct {\n"
"    double real;\n"
"    double imag;\n"
"} Py_complex;"
msgstr ""

#: ../../c-api/complex.rst:43
msgid ""
"Return the sum of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "二つの複素数の和を C の :c:type:`Py_complex` 型で返します。"

#: ../../c-api/complex.rst:49
msgid ""
"Return the difference between two complex numbers, using the C :c:type:"
"`Py_complex` representation."
msgstr "二つの複素数の差を C の :c:type:`Py_complex` 型で返します。"

#: ../../c-api/complex.rst:55
msgid ""
"Return the negation of the complex number *num*, using the C :c:type:"
"`Py_complex` representation."
msgstr "複素数 *num* の符号反転 C の :c:type:`Py_complex` 型で返します。"

#: ../../c-api/complex.rst:61
msgid ""
"Return the product of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "二つの複素数の積を C の :c:type:`Py_complex` 型で返します。"

#: ../../c-api/complex.rst:67
msgid ""
"Return the quotient of two complex numbers, using the C :c:type:`Py_complex` "
"representation."
msgstr "二つの複素数の商を C の :c:type:`Py_complex` 型で返します。"

#: ../../c-api/complex.rst:70
msgid ""
"If *divisor* is null, this method returns zero and sets :c:data:`errno` to :"
"c:macro:`!EDOM`."
msgstr ""
"*divisor* が null の場合は、このメソッドはゼロを返し、 :c:data:`errno` に :c:"
"macro:`!EDOM` をセットします。"

#: ../../c-api/complex.rst:76
msgid ""
"Return the exponentiation of *num* by *exp*, using the C :c:type:"
"`Py_complex` representation."
msgstr "指数 *exp* の *num* 乗を C の :c:type:`Py_complex` 型で返します。"

#: ../../c-api/complex.rst:79
msgid ""
"If *num* is null and *exp* is not a positive real number, this method "
"returns zero and sets :c:data:`errno` to :c:macro:`!EDOM`."
msgstr ""
"*num* が null で *exp* が正の実数でない場合は、このメソッドはゼロを返し、 :c:"
"data:`errno` に :c:macro:`!EDOM` をセットします。"

#: ../../c-api/complex.rst:84
msgid "Complex Numbers as Python Objects"
msgstr "Python オブジェクトとしての複素数型"

#: ../../c-api/complex.rst:89
msgid ""
"This subtype of :c:type:`PyObject` represents a Python complex number object."
msgstr "この :c:type:`PyObject` のサブタイプは Python の複素数型を表現します。"

#: ../../c-api/complex.rst:94
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python complex number "
"type. It is the same object as :class:`complex` in the Python layer."
msgstr ""
"この :c:type:`PyTypeObject` のインスタンスは Python の複素数型を表現します。 "
"Pythonレイヤの :class:`complex` と同じオブジェクトです。"

#: ../../c-api/complex.rst:100
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject` or a subtype of :"
"c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"引数が :c:type:`PyComplexObject` か :c:type:`PyComplexObject` のサブタイプで"
"あるときに真を返します。この関数は常に成功します。"

#: ../../c-api/complex.rst:106
msgid ""
"Return true if its argument is a :c:type:`PyComplexObject`, but not a "
"subtype of :c:type:`PyComplexObject`.  This function always succeeds."
msgstr ""
"引数が :c:type:`PyComplexObject` であるが :c:type:`PyComplexObject` のサブタ"
"イプでないときに真を返します。この関数は常に成功します。"

#: ../../c-api/complex.rst:112
msgid ""
"Create a new Python complex number object from a C :c:type:`Py_complex` "
"value. Return ``NULL`` with an exception set on error."
msgstr ""

#: ../../c-api/complex.rst:118
msgid ""
"Return a new :c:type:`PyComplexObject` object from *real* and *imag*. Return "
"``NULL`` with an exception set on error."
msgstr ""

#: ../../c-api/complex.rst:124
msgid "Return the real part of *op* as a C :c:expr:`double`."
msgstr "*op* の実数部分を C の :c:expr:`double` 型で返します。"

#: ../../c-api/complex.rst:126
msgid ""
"If *op* is not a Python complex number object but has a :meth:`~object."
"__complex__` method, this method will first be called to convert *op* to a "
"Python complex number object.  If :meth:`!__complex__` is not defined then "
"it falls back to call :c:func:`PyFloat_AsDouble` and returns its result."
msgstr ""

#: ../../c-api/complex.rst:132 ../../c-api/complex.rst:148
msgid ""
"Upon failure, this method returns ``-1.0`` with an exception set, so one "
"should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""

#: ../../c-api/complex.rst:135 ../../c-api/complex.rst:151
msgid "Use :meth:`~object.__complex__` if available."
msgstr ""

#: ../../c-api/complex.rst:140
msgid "Return the imaginary part of *op* as a C :c:expr:`double`."
msgstr "*op* の虚数部分を C の :c:expr:`double` 型で返します。"

#: ../../c-api/complex.rst:142
msgid ""
"If *op* is not a Python complex number object but has a :meth:`~object."
"__complex__` method, this method will first be called to convert *op* to a "
"Python complex number object.  If :meth:`!__complex__` is not defined then "
"it falls back to call :c:func:`PyFloat_AsDouble` and returns ``0.0`` on "
"success."
msgstr ""

#: ../../c-api/complex.rst:156
msgid "Return the :c:type:`Py_complex` value of the complex number *op*."
msgstr "複素数値 *op* から :c:type:`Py_complex` 型を生成します。"

#: ../../c-api/complex.rst:158
msgid ""
"If *op* is not a Python complex number object but has a :meth:`~object."
"__complex__` method, this method will first be called to convert *op* to a "
"Python complex number object.  If :meth:`!__complex__` is not defined then "
"it falls back to :meth:`~object.__float__`.  If :meth:`!__float__` is not "
"defined then it falls back to :meth:`~object.__index__`."
msgstr ""

#: ../../c-api/complex.rst:164
msgid ""
"Upon failure, this method returns :c:type:`Py_complex` with :c:member:"
"`~Py_complex.real` set to ``-1.0`` and with an exception set, so one should "
"call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""

#: ../../c-api/complex.rst:168
msgid "Use :meth:`~object.__index__` if available."
msgstr "可能であれば :meth:`~object.__index__` を使うようになりました。"

#: ../../c-api/complex.rst:8
msgid "object"
msgstr "object"

#: ../../c-api/complex.rst:8
msgid "complex number"
msgstr "complex number"
