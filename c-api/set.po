# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Arihiro TAKASE, 2023
# tomo, 2023
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-27 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:50+0000\n"
"Last-Translator: Nozomu Kaneko <nozom.kaneko@gmail.com>, 2023\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/set.rst:6
msgid "Set Objects"
msgstr "Set オブジェクト"

#: ../../c-api/set.rst:15
msgid ""
"This section details the public API for :class:`set` and :class:`frozenset` "
"objects.  Any functionality not listed below is best accessed using either "
"the abstract object protocol (including :c:func:`PyObject_CallMethod`, :c:"
"func:`PyObject_RichCompareBool`, :c:func:`PyObject_Hash`, :c:func:"
"`PyObject_Repr`, :c:func:`PyObject_IsTrue`, :c:func:`PyObject_Print`, and :c:"
"func:`PyObject_GetIter`) or the abstract number protocol (including :c:func:"
"`PyNumber_And`, :c:func:`PyNumber_Subtract`, :c:func:`PyNumber_Or`, :c:func:"
"`PyNumber_Xor`, :c:func:`PyNumber_InPlaceAnd`, :c:func:"
"`PyNumber_InPlaceSubtract`, :c:func:`PyNumber_InPlaceOr`, and :c:func:"
"`PyNumber_InPlaceXor`)."
msgstr ""
"このセクションでは :class:`set` と :class:`frozenset` の公開 API について詳し"
"く述べます。以降で説明していない機能は、抽象オブジェクトプロトコル (:c:func:"
"`PyObject_CallMethod`, :c:func:`PyObject_RichCompareBool`, :c:func:"
"`PyObject_Hash`, :c:func:`PyObject_Repr`, :c:func:`PyObject_IsTrue`, :c:func:"
"`PyObject_Print`, :c:func:`PyObject_GetIter` を含む) か抽象数値プロトコル (:"
"c:func:`PyNumber_And`, :c:func:`PyNumber_Subtract`, :c:func:`PyNumber_Or`, :"
"c:func:`PyNumber_Xor`, :c:func:`PyNumber_InPlaceAnd`, :c:func:"
"`PyNumber_InPlaceSubtract`, :c:func:`PyNumber_InPlaceOr`, :c:func:"
"`PyNumber_InPlaceXor` を含む) を使って利用できます。"

#: ../../c-api/set.rst:29
msgid ""
"This subtype of :c:type:`PyObject` is used to hold the internal data for "
"both :class:`set` and :class:`frozenset` objects.  It is like a :c:type:"
"`PyDictObject` in that it is a fixed size for small sets (much like tuple "
"storage) and will point to a separate, variable sized block of memory for "
"medium and large sized sets (much like list storage). None of the fields of "
"this structure should be considered public and all are subject to change.  "
"All access should be done through the documented API rather than by "
"manipulating the values in the structure."
msgstr ""
"この :c:type:`PyObject` を継承した型は、 :class:`set` と :class:`frozenset` "
"両方の内部データを保存するのに用いられます。 :c:type:`PyDictObject` と同じよ"
"うに、小さい集合(set)に対しては(タプルのように)固定サイズであり、そうでない集"
"合に対しては(リストと同じように)可変長のメモリブロックを用います。この構造体"
"のどのフィールドも、公開されていると考えるべきではなく、変更される可能性があ"
"ります。すべてのアクセスは、構造体の中の値を直接操作するのではなく、ドキュメ"
"ントされた API を用いて行うべきです。"

#: ../../c-api/set.rst:40
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`set` type."
msgstr ""
"この :c:type:`PyTypeObject` のインスタンスは、Python の :class:`set` 型を表し"
"ます。"

#: ../../c-api/set.rst:46
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`frozenset` type."
msgstr ""
"この :c:type:`PyTypeObject` のインスタンスは、Python の :class:`frozenset` 型"
"を表します。"

#: ../../c-api/set.rst:49
msgid ""
"The following type check macros work on pointers to any Python object. "
"Likewise, the constructor functions work with any iterable Python object."
msgstr ""
"以降の型チェックマクロはすべての Python オブジェクトに対するポインタに対して"
"動作します。同様に、コンストラクタはすべてのイテレート可能な Python オブジェ"
"クトに対して動作します。"

#: ../../c-api/set.rst:55
msgid ""
"Return true if *p* is a :class:`set` object or an instance of a subtype. "
"This function always succeeds."
msgstr ""
"*p* が :class:`set` かそのサブタイプのオブジェクトであるときに true を返しま"
"す。この関数は常に成功します。"

#: ../../c-api/set.rst:60
msgid ""
"Return true if *p* is a :class:`frozenset` object or an instance of a "
"subtype.  This function always succeeds."
msgstr ""
"*p* が :class:`frozenset` かそのサブタイプのオブジェクトであるときに true を"
"返します。この関数は常に成功します。"

#: ../../c-api/set.rst:65
msgid ""
"Return true if *p* is a :class:`set` object, a :class:`frozenset` object, or "
"an instance of a subtype.  This function always succeeds."
msgstr ""
"*p* が :class:`set` か :class:`frozenset` 、あるいはそのサブタイプのオブジェ"
"クトであれば、true を返します。この関数は常に成功します。"

#: ../../c-api/set.rst:70
msgid ""
"Return true if *p* is a :class:`set` object but not an instance of a "
"subtype.  This function always succeeds."
msgstr ""
"*p* が :class:`set` オブジェクトだがサブタイプのインスタンスでない場合に真を"
"返します。この関数は常に成功します。"

#: ../../c-api/set.rst:77
msgid ""
"Return true if *p* is a :class:`set` object or a :class:`frozenset` object "
"but not an instance of a subtype.  This function always succeeds."
msgstr ""
"*p* が :class:`set` か :class:`frozenset` のどちらかのオブジェクトであるとき"
"に true を返します。サブタイプのオブジェクトは含みません。この関数は常に成功"
"します。"

#: ../../c-api/set.rst:83
msgid ""
"Return true if *p* is a :class:`frozenset` object but not an instance of a "
"subtype.  This function always succeeds."
msgstr ""
"*p* が :class:`frozenset` オブジェクトだがサブタイプのインスタンスでない場合"
"に真を返します。この関数は常に成功します。"

#: ../../c-api/set.rst:89
msgid ""
"Return a new :class:`set` containing objects returned by the *iterable*.  "
"The *iterable* may be ``NULL`` to create a new empty set.  Return the new "
"set on success or ``NULL`` on failure.  Raise :exc:`TypeError` if *iterable* "
"is not actually iterable.  The constructor is also useful for copying a set "
"(``c=set(s)``)."
msgstr ""
"*iterable* が返すオブジェクトを含む新しい :class:`set` を返します。\n"
"*iterable* が ``NULL`` のときは、空の set を返します。\n"
"成功したら新しい set を、失敗したら ``NULL`` を返します。\n"
"*iterable* がイテレート可能でない場合は、 :exc:`TypeError` を送出します。\n"
"このコンストラクタは set をコピーするときにも使えます (``c=set(s)``)。"

#: ../../c-api/set.rst:98
msgid ""
"Return a new :class:`frozenset` containing objects returned by the "
"*iterable*. The *iterable* may be ``NULL`` to create a new empty frozenset.  "
"Return the new set on success or ``NULL`` on failure.  Raise :exc:"
"`TypeError` if *iterable* is not actually iterable."
msgstr ""
"*iterable* が返すオブジェクトを含む新しい :class:`frozenset` を返します。\n"
"*iterable* が ``NULL`` のときは、空の frozenset を返します。\n"
"成功時には新しい set を、失敗時には ``NULL`` を返します。\n"
"*iterable* がイテレート可能でない場合は、 :exc:`TypeError` を送出します。"

#: ../../c-api/set.rst:104
msgid ""
"The following functions and macros are available for instances of :class:"
"`set` or :class:`frozenset` or instances of their subtypes."
msgstr ""
"以降の関数やマクロは、 :class:`set` と :class:`frozenset` とそのサブタイプの"
"インスタンスに対して利用できます。"

#: ../../c-api/set.rst:112
msgid ""
"Return the length of a :class:`set` or :class:`frozenset` object. Equivalent "
"to ``len(anyset)``.  Raises a :exc:`SystemError` if *anyset* is not a :class:"
"`set`, :class:`frozenset`, or an instance of a subtype."
msgstr ""

#: ../../c-api/set.rst:119
msgid "Macro form of :c:func:`PySet_Size` without error checking."
msgstr "エラーチェックを行わない、 :c:func:`PySet_Size` のマクロ形式。"

#: ../../c-api/set.rst:124
msgid ""
"Return ``1`` if found, ``0`` if not found, and ``-1`` if an error is "
"encountered.  Unlike the Python :meth:`~object.__contains__` method, this "
"function does not automatically convert unhashable sets into temporary "
"frozensets.  Raise a :exc:`TypeError` if the *key* is unhashable. Raise :exc:"
"`SystemError` if *anyset* is not a :class:`set`, :class:`frozenset`, or an "
"instance of a subtype."
msgstr ""

#: ../../c-api/set.rst:133
msgid ""
"Add *key* to a :class:`set` instance.  Also works with :class:`frozenset` "
"instances (like :c:func:`PyTuple_SetItem` it can be used to fill in the "
"values of brand new frozensets before they are exposed to other code).  "
"Return ``0`` on success or ``-1`` on failure. Raise a :exc:`TypeError` if "
"the *key* is unhashable. Raise a :exc:`MemoryError` if there is no room to "
"grow.  Raise a :exc:`SystemError` if *set* is not an instance of :class:"
"`set` or its subtype."
msgstr ""
":class:`set` のインスタンスに *key* を追加します。\n"
":class:`frozenset` に対しても動作します (:c:func:`PyTuple_SetItem` のように、"
"他のコードに見える前の新しい frozenset の値を埋めるために使用できます)。\n"
"成功したら ``0`` を、失敗したら ``-1`` を返します。\n"
"*key* がハッシュ可能でない場合は、 :exc:`TypeError` を送出します。\n"
"*set* を大きくする余裕がない場合は、 :exc:`MemoryError` を送出します。\n"
"*set* が :class:`set` かそのサブタイプのインスタンスでない場合は、 :exc:"
"`SystemError` を送出します。"

#: ../../c-api/set.rst:142
msgid ""
"The following functions are available for instances of :class:`set` or its "
"subtypes but not for instances of :class:`frozenset` or its subtypes."
msgstr ""
"以降の関数は、 :class:`set` とそのサブタイプに対して利用可能です。 :class:"
"`frozenset` とそのサブタイプには利用できません。"

#: ../../c-api/set.rst:148
msgid ""
"Return ``1`` if found and removed, ``0`` if not found (no action taken), and "
"``-1`` if an error is encountered.  Does not raise :exc:`KeyError` for "
"missing keys.  Raise a :exc:`TypeError` if the *key* is unhashable.  Unlike "
"the Python :meth:`~frozenset.discard` method, this function does not "
"automatically convert unhashable sets into temporary frozensets. Raise :exc:"
"`SystemError` if *set* is not an instance of :class:`set` or its subtype."
msgstr ""

#: ../../c-api/set.rst:158
msgid ""
"Return a new reference to an arbitrary object in the *set*, and removes the "
"object from the *set*.  Return ``NULL`` on failure.  Raise :exc:`KeyError` "
"if the set is empty. Raise a :exc:`SystemError` if *set* is not an instance "
"of :class:`set` or its subtype."
msgstr ""
"*set* の中の要素のどれかに対する新しい参照を返し、そのオブジェクトを *set* か"
"ら削除します。\n"
"失敗したら ``NULL`` を返します。\n"
"set が空の場合には :exc:`KeyError` を送出します。\n"
"*set* が :class:`set` とそのサブタイプのインスタンスでない場合は、 :exc:"
"`SystemError` を送出します。"

#: ../../c-api/set.rst:166
msgid ""
"Empty an existing set of all elements. Return ``0`` on success. Return "
"``-1`` and raise :exc:`SystemError` if *set* is not an instance of :class:"
"`set` or its subtype."
msgstr ""

#: ../../c-api/set.rst:11
msgid "object"
msgstr "object"

#: ../../c-api/set.rst:11
msgid "set"
msgstr "集合"

#: ../../c-api/set.rst:11
msgid "frozenset"
msgstr "frozenset"

#: ../../c-api/set.rst:110
msgid "built-in function"
msgstr "組み込み関数"

#: ../../c-api/set.rst:110
msgid "len"
msgstr "len"
