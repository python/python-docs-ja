# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/set.rst:6
msgid "Set Objects"
msgstr "Set オブジェクト"

#: ../../c-api/set.rst:17
msgid ""
"This section details the public API for :class:`set` and :class:`frozenset` "
"objects.  Any functionality not listed below is best accessed using the "
"either the abstract object protocol (including :c:func:"
"`PyObject_CallMethod`, :c:func:`PyObject_RichCompareBool`, :c:func:"
"`PyObject_Hash`, :c:func:`PyObject_Repr`, :c:func:`PyObject_IsTrue`, :c:func:"
"`PyObject_Print`, and :c:func:`PyObject_GetIter`) or the abstract number "
"protocol (including :c:func:`PyNumber_And`, :c:func:`PyNumber_Subtract`, :c:"
"func:`PyNumber_Or`, :c:func:`PyNumber_Xor`, :c:func:`PyNumber_InPlaceAnd`, :"
"c:func:`PyNumber_InPlaceSubtract`, :c:func:`PyNumber_InPlaceOr`, and :c:func:"
"`PyNumber_InPlaceXor`)."
msgstr ""
"このセクションでは :class:`set` と :class:`frozenset` の公開 API について詳し"
"く述べます。以降で説明していない機能は、抽象オブジェクトプロトコル (:c:func:"
"`PyObject_CallMethod`, :c:func:`PyObject_RichCompareBool`, :c:func:"
"`PyObject_Hash`, :c:func:`PyObject_Repr`, :c:func:`PyObject_IsTrue`, :c:func:"
"`PyObject_Print`, :c:func:`PyObject_GetIter` を含む) か抽象数値プロトコル (:"
"c:func:`PyNumber_And`, :c:func:`PyNumber_Subtract`, :c:func:`PyNumber_Or`, :"
"c:func:`PyNumber_Xor`, :c:func:`PyNumber_InPlaceAnd`, :c:func:"
"`PyNumber_InPlaceSubtract`, :c:func:`PyNumber_InPlaceOr`, :c:func:"
"`PyNumber_InPlaceXor` を含む) を使って利用できます。"

#: ../../c-api/set.rst:31
msgid ""
"This subtype of :c:type:`PyObject` is used to hold the internal data for "
"both :class:`set` and :class:`frozenset` objects.  It is like a :c:type:"
"`PyDictObject` in that it is a fixed size for small sets (much like tuple "
"storage) and will point to a separate, variable sized block of memory for "
"medium and large sized sets (much like list storage). None of the fields of "
"this structure should be considered public and are subject to change.  All "
"access should be done through the documented API rather than by manipulating "
"the values in the structure."
msgstr ""
"この :c:type:`PyObject` を継承した型は、 :class:`set` と :class:`frozenset` "
"両方の内部データを保存するのに用いられます。 :c:type:`PyDictObject` と同じよ"
"うに、小さい集合(set)に対しては(タプルのように)固定サイズであり、そうでない集"
"合に対しては(リストと同じように)可変長のメモリブロックを用います。この構造体"
"のどのフィールドも、非公開で変更される可能性があると考えて下さい。すべてのア"
"クセスは、構造体の中の値を直接操作するのではなく、ドキュメントされた API を用"
"いて行うべきです。"

#: ../../c-api/set.rst:42
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`set` type."
msgstr ""
"この :c:type:`PyTypeObject` のインスタンスは、Python の :class:`set` 型を表し"
"ます。"

#: ../../c-api/set.rst:48
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`frozenset` type."
msgstr ""
"この :c:type:`PyTypeObject` のインスタンスは、Python の :class:`frozenset` 型"
"を表します。"

#: ../../c-api/set.rst:51
msgid ""
"The following type check macros work on pointers to any Python object. "
"Likewise, the constructor functions work with any iterable Python object."
msgstr ""
"以降の型チェックマクロはすべての Python オブジェクトに対するポインタに対して"
"動作します。同様に、コンストラクタはすべてのイテレート可能な Python オブジェ"
"クトに対して動作します。"

#: ../../c-api/set.rst:57
msgid ""
"Return true if *p* is a :class:`set` object or an instance of a subtype."
msgstr ""
"*p* が :class:`set` かそのサブタイプのオブジェクトであるときに真を返します。"

#: ../../c-api/set.rst:63
msgid ""
"Return true if *p* is a :class:`frozenset` object or an instance of a "
"subtype."
msgstr ""
"*p* が :class:`frozenset` かそのサブタイプのオブジェクトであるときに真を返し"
"ます。"

#: ../../c-api/set.rst:70
msgid ""
"Return true if *p* is a :class:`set` object, a :class:`frozenset` object, or "
"an instance of a subtype."
msgstr ""
"*p* が :class:`set` か :class:`frozenset` 、あるいはそのサブタイプのオブジェ"
"クトであれば、true を返します。"

#: ../../c-api/set.rst:76
msgid ""
"Return true if *p* is a :class:`set` object or a :class:`frozenset` object "
"but not an instance of a subtype."
msgstr ""
"*p* が :class:`set` か :class:`frozenset` のどちらかのオブジェクトであるとき"
"に true を返します。サブタイプのオブジェクトは含みません。"

#: ../../c-api/set.rst:82
msgid ""
"Return true if *p* is a :class:`frozenset` object but not an instance of a "
"subtype."
msgstr ""
"*p* が :class:`frozenset` のオブジェクトであるときに true を返します。サブタ"
"イプのオブジェクトは含みません。"

#: ../../c-api/set.rst:88
msgid ""
"Return a new :class:`set` containing objects returned by the *iterable*.  "
"The *iterable* may be *NULL* to create a new empty set.  Return the new set "
"on success or *NULL* on failure.  Raise :exc:`TypeError` if *iterable* is "
"not actually iterable.  The constructor is also useful for copying a set "
"(``c=set(s)``)."
msgstr ""
"*iterable* が返すオブジェクトを含む新しい :class:`set` を返します。 "
"*iterable* が *NULL* のときは、空の set を返します。成功したら新しい set を、"
"失敗したら *NULL* を返します。 *iterable* がイテレート可能で無い場合は、 :"
"exc:`TypeError` を送出します。このコンストラクタは set をコピーするときにも使"
"えます (``c=set(s)``)。"

#: ../../c-api/set.rst:97
msgid ""
"Return a new :class:`frozenset` containing objects returned by the "
"*iterable*. The *iterable* may be *NULL* to create a new empty frozenset.  "
"Return the new set on success or *NULL* on failure.  Raise :exc:`TypeError` "
"if *iterable* is not actually iterable."
msgstr ""
"*iterable* が返すオブジェクトを含む新しい :class:`frozenset` を返します。 "
"*iterable* が *NULL* のときは、空の frozenset を返します。成功時には新しい "
"set を、失敗時には *NULL* を返します。 *iterable* がイテレート可能で無い場合"
"は、 :exc:`TypeError` を送出します。"

#: ../../c-api/set.rst:102
msgid ""
"Now guaranteed to return a brand-new :class:`frozenset`.  Formerly, "
"frozensets of zero-length were a singleton.  This got in the way of building-"
"up new frozensets with :meth:`PySet_Add`."
msgstr ""
"完全に新しい :class:`frozenset` オブジェクトを返すことが保証されるようになり"
"ました。以前は、大きさがゼロの frozenset はシングルトンでした。これによりまっ"
"さらな frozenset から :meth:`PySet_Add` を使って組み立てることが出来ます。"

#: ../../c-api/set.rst:107
msgid ""
"The following functions and macros are available for instances of :class:"
"`set` or :class:`frozenset` or instances of their subtypes."
msgstr ""
"以降の関数やマクロは、 :class:`set` と :class:`frozenset` とそのサブタイプの"
"インスタンスに対して利用できます。"

#: ../../c-api/set.rst:115
msgid ""
"Return the length of a :class:`set` or :class:`frozenset` object. Equivalent "
"to ``len(anyset)``.  Raises a :exc:`PyExc_SystemError` if *anyset* is not a :"
"class:`set`, :class:`frozenset`, or an instance of a subtype."
msgstr ""
":class:`set` や :class:`frozenset` のオブジェクトの長さを返します。 "
"``len(anyset)`` と同じです。 *anyset* が :class:`set` 、 :class:`frozenset` "
"及びそのサブタイプのオブジェクトで無い場合は、 :exc:`PyExc_SystemError` を送"
"出します。"

#: ../../c-api/set.rst:119
msgid ""
"This function returned an :c:type:`int`. This might require changes in your "
"code for properly supporting 64-bit systems."
msgstr ""
"この関数は以前は :c:type:`int` を返していました。この変更により、 64 bit シス"
"テムを正しくサポートするには修正が必要になります。"

#: ../../c-api/set.rst:126
msgid "Macro form of :c:func:`PySet_Size` without error checking."
msgstr "エラーチェックを行わない、 :c:func:`PySet_Size` のマクロ形式。"

#: ../../c-api/set.rst:131
msgid ""
"Return ``1`` if found, ``0`` if not found, and ``-1`` if an error is "
"encountered.  Unlike the Python :meth:`__contains__` method, this function "
"does not automatically convert unhashable sets into temporary frozensets.  "
"Raise a :exc:`TypeError` if the *key* is unhashable. Raise :exc:"
"`PyExc_SystemError` if *anyset* is not a :class:`set`, :class:`frozenset`, "
"or an instance of a subtype."
msgstr ""
"見つかったら ``1`` を、見つからなかったら ``0`` を、エラーが発生した場合は "
"``-1`` を返します。\n"
"Python の :meth:`__contains__` メソッドと違って、この関数は非ハッシュ set を"
"一時的な frozenset に自動で変換しません。\n"
"*key* がハッシュ可能で無い場合、 :exc:`TypeError` を送出します。\n"
"*anyset* が :class:`set`, :class:`frozenset` 及びそのサブタイプのオブジェクト"
"で無い場合は :exc:`PyExc_SystemError` を送出します。"

#: ../../c-api/set.rst:140
msgid ""
"Add *key* to a :class:`set` instance.  Does not apply to :class:`frozenset` "
"instances.  Return ``0`` on success or ``-1`` on failure. Raise a :exc:"
"`TypeError` if the *key* is unhashable. Raise a :exc:`MemoryError` if there "
"is no room to grow. Raise a :exc:`SystemError` if *set* is not an instance "
"of :class:`set` or its subtype."
msgstr ""
":class:`set` のインスタンスに *key* を追加します。 :class:`frozenset` のイン"
"スタンスに使わないで下さい。成功したら ``0`` を、失敗したら ``-1`` を返しま"
"す。 *key* がハッシュ可能でないなら、 :exc:`TypeError` を送出します。 set を"
"大きくする余裕が無い場合は、 :exc:`MemoryError` を送出します。 *set* が :"
"class:`set` とそのサブタイプのインスタンスで無い場合は、 :exc:`SystemError` "
"を送出します。"

#: ../../c-api/set.rst:146
msgid ""
"Now works with instances of :class:`frozenset` or its subtypes. Like :c:func:"
"`PyTuple_SetItem` in that it can be used to fill-in the values of brand new "
"frozensets before they are exposed to other code."
msgstr ""
":class:`frozenset` やそのサブタイプのインスタンスに対して利用できるようになり"
"ました。 :c:func:`PyTuple_SetItem` のように、新しい frozenset を他のコードに"
"渡すまえに内容を追加するためのに使うことができます。"

#: ../../c-api/set.rst:151
msgid ""
"The following functions are available for instances of :class:`set` or its "
"subtypes but not for instances of :class:`frozenset` or its subtypes."
msgstr ""
"以降の関数は、 :class:`set` とそのサブタイプに対して利用可能です。 :class:"
"`frozenset` とそのサブタイプには利用できません。"

#: ../../c-api/set.rst:157
msgid ""
"Return ``1`` if found and removed, ``0`` if not found (no action taken), and "
"``-1`` if an error is encountered.  Does not raise :exc:`KeyError` for "
"missing keys.  Raise a :exc:`TypeError` if the *key* is unhashable.  Unlike "
"the Python :meth:`~set.discard` method, this function does not automatically "
"convert unhashable sets into temporary frozensets. Raise :exc:"
"`PyExc_SystemError` if *set* is not an instance of :class:`set` or its "
"subtype."
msgstr ""
"*key* が見つかって、値を削除したら ``1`` を返します。\n"
"見つからなかったら (何もせずに) ``0`` を返します。\n"
"エラーが発生した場合は ``-1`` を返します。\n"
"*key* が無くても :exc:`KeyError` を送出しません。\n"
"*key* がハッシュ可能でない場合は :exc:`TypeError` を送出します。\n"
"Python の :meth:`~set.discard` メソッドと違って、この関数は非ハッシュ set を"
"一時的な frozenset に変換しません。\n"
"*set* が :class:`set` かそのサブタイプのインスタンスでないときは、 :exc:"
"`PyExc_SystemError` を送出します。"

#: ../../c-api/set.rst:167
msgid ""
"Return a new reference to an arbitrary object in the *set*, and removes the "
"object from the *set*.  Return *NULL* on failure.  Raise :exc:`KeyError` if "
"the set is empty. Raise a :exc:`SystemError` if *set* is not an instance of :"
"class:`set` or its subtype."
msgstr ""
"*set* の中の要素のどれかに対する新しい参照を返し、そのオブジェクトを *set* か"
"ら削除します。失敗したら *NULL* を返します。 set が空の場合には :exc:"
"`KeyError` を送出します。 *set* が :class:`set` とそのサブタイプのインスタン"
"スでない場合は、 :exc:`SystemError` を送出します。"

#: ../../c-api/set.rst:175
msgid "Empty an existing set of all elements."
msgstr "set を空にします。"
