# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/marshal.rst:6
msgid "Data marshalling support"
msgstr "データ整列化 (data marshalling) のサポート"

#: ../../c-api/marshal.rst:8
msgid ""
"These routines allow C code to work with serialized objects using the same "
"data format as the :mod:`marshal` module.  There are functions to write data "
"into the serialization format, and additional functions that can be used to "
"read the data back.  Files used to store marshalled data must be opened in "
"binary mode."
msgstr ""
"以下のルーチン群は、 :mod:`marshal` モジュールと同じ形式を使った整列化オブ"
"ジェクトを C コードから使えるようにします。整列化形式でデータを書き出す関数に"
"加えて、データを読み戻す関数もあります。整列化されたデータを記録するファイル"
"はバイナリモードで開かれていなければなりません。"

#: ../../c-api/marshal.rst:14
msgid "Numeric values are stored with the least significant byte first."
msgstr "数値は最小桁が先にくるように記録されます。"

#: ../../c-api/marshal.rst:16
msgid ""
"The module supports two versions of the data format: version 0 is the "
"historical version, version 1 shares interned strings in the file, and upon "
"unmarshalling.  Version 2 uses a binary format for floating point numbers. "
"``Py_MARSHAL_VERSION`` indicates the current file format (currently 2)."
msgstr ""
"このモジュールでは、3つのバージョンのデータ形式をサポートしています。バージョ"
"ン 0 は従来のもので、バージョン 1  は intern 化された文字列をファイル内で共有"
"し、逆マーシャル化の時にも共有されるようにします。バージョン2は、浮動小数点数"
"に対してバイナリフォーマットを利用します。 ``Py_MARSHAL_VERSION`` は現在の"
"バージョン (バージョン 2) を示します。"

#: ../../c-api/marshal.rst:24
msgid ""
"Marshal a :c:expr:`long` integer, *value*, to *file*.  This will only write "
"the least-significant 32 bits of *value*; regardless of the size of the "
"native :c:expr:`long` type.  *version* indicates the file format."
msgstr ""

#: ../../c-api/marshal.rst:31
msgid ""
"Marshal a Python object, *value*, to *file*. *version* indicates the file "
"format."
msgstr ""
"Python オブジェクト *value* を *file* へ整列化します。*version* はファイル"
"フォーマットを示します。"

#: ../../c-api/marshal.rst:37
msgid ""
"Return a bytes object containing the marshalled representation of *value*. "
"*version* indicates the file format."
msgstr ""
"*value* の整列化表現が入ったバイト列オブジェクトを返します。*version* はファ"
"イルフォーマットを示します。"

#: ../../c-api/marshal.rst:41
msgid "The following functions allow marshalled values to be read back in."
msgstr "以下の関数を使うと、整列化された値を読み戻せます。"

#: ../../c-api/marshal.rst:46
msgid ""
"Return a C :c:expr:`long` from the data stream in a :c:expr:`FILE*` opened "
"for reading.  Only a 32-bit value can be read in using this function, "
"regardless of the native size of :c:expr:`long`."
msgstr ""

#: ../../c-api/marshal.rst:50 ../../c-api/marshal.rst:60
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`) and returns "
"``-1``."
msgstr ""
"エラーの場合、適切な例外 (:exc:`EOFError`) を設定し ``-1`` を返します。"

#: ../../c-api/marshal.rst:56
msgid ""
"Return a C :c:expr:`short` from the data stream in a :c:expr:`FILE*` opened "
"for reading.  Only a 16-bit value can be read in using this function, "
"regardless of the native size of :c:expr:`short`."
msgstr ""

#: ../../c-api/marshal.rst:66
msgid ""
"Return a Python object from the data stream in a :c:expr:`FILE*` opened for "
"reading."
msgstr ""

#: ../../c-api/marshal.rst:69 ../../c-api/marshal.rst:83
#: ../../c-api/marshal.rst:92
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`, :exc:`ValueError` "
"or :exc:`TypeError`) and returns ``NULL``."
msgstr ""
"エラーの場合、適切な例外 (:exc:`EOFError`, :exc:`ValueError`, :exc:"
"`TypeError`) を設定し ``NULL`` を返します。"

#: ../../c-api/marshal.rst:75
msgid ""
"Return a Python object from the data stream in a :c:expr:`FILE*` opened for "
"reading.  Unlike :c:func:`PyMarshal_ReadObjectFromFile`, this function "
"assumes that no further objects will be read from the file, allowing it to "
"aggressively load file data into memory so that the de-serialization can "
"operate from data in memory rather than reading a byte at a time from the "
"file.  Only use these variant if you are certain that you won't be reading "
"anything else from the file."
msgstr ""

#: ../../c-api/marshal.rst:89
msgid ""
"Return a Python object from the data stream in a byte buffer containing "
"*len* bytes pointed to by *data*."
msgstr ""
"*data* が指す *len* バイトのバイト列バッファ内のデータストリームから Python "
"オブジェクトを返します。"
