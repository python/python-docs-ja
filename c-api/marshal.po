# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/marshal.rst:6
msgid "Data marshalling support"
msgstr "データ整列化 (data marshalling) のサポート"

#: ../../c-api/marshal.rst:8
msgid ""
"These routines allow C code to work with serialized objects using the same "
"data format as the :mod:`marshal` module.  There are functions to write data "
"into the serialization format, and additional functions that can be used to "
"read the data back.  Files used to store marshalled data must be opened in "
"binary mode."
msgstr ""
"以下のルーチン群は、 :mod:`marshal` モジュールと同じ形式を使った整列化オブ"
"ジェクトを C コードから使えるようにします。整列化形式でデータを書き出す関数に"
"加えて、データを読み戻す関数もあります。整列化されたデータを記録するファイル"
"はバイナリモードで開かれていなければなりません。"

#: ../../c-api/marshal.rst:14
msgid "Numeric values are stored with the least significant byte first."
msgstr "数値は最小桁が先にくるように記録されます。"

#: ../../c-api/marshal.rst:16
msgid ""
"The module supports two versions of the data format: version ``0`` is the "
"historical version, version ``1`` (new in Python 2.4) shares interned "
"strings in the file, and upon unmarshalling.  Version 2 (new in Python 2.5) "
"uses a binary format for floating point numbers.  *Py_MARSHAL_VERSION* "
"indicates the current file format (currently 2)."
msgstr ""
"このモジュールでは、3つのバージョンのデータ形式をサポートしています。バージョ"
"ン ``0`` は従来のもので、(Python 2.4 で新たに追加された) バージョン ``1`` は "
"intern 化された文字列をファイル内で共有し、逆マーシャル化の時にも共有されるよ"
"うにします。 (Python 2.5 で新たに追加された) バージョン2は、浮動小数点数に対"
"してバイナリフォーマットを利用します。 *PY_MARSHAL_VERSION* は現在のバージョ"
"ン (バージョン 2) を示します。"

#: ../../c-api/marshal.rst:25
msgid ""
"Marshal a :c:type:`long` integer, *value*, to *file*.  This will only write "
"the least-significant 32 bits of *value*; regardless of the size of the "
"native :c:type:`long` type."
msgstr ""
":c:type:`long` 型の整数値 *value* を *file* へ整列化します。この関数は "
"*value* の下桁 32 ビットを書き込むだけです; ネイティブの :c:type:`long` 型サ"
"イズには関知しません。"

#: ../../c-api/marshal.rst:29 ../../c-api/marshal.rst:37
#: ../../c-api/marshal.rst:45
msgid "*version* indicates the file format."
msgstr "ファイル形式を示す *version* が追加されました。"

#: ../../c-api/marshal.rst:35
msgid "Marshal a Python object, *value*, to *file*."
msgstr "Python オブジェクト *value* を *file* へ整列化します。"

#: ../../c-api/marshal.rst:43
msgid ""
"Return a string object containing the marshalled representation of *value*."
msgstr "*value* の整列化表現が入った文字列オブジェクトを返します。"

#: ../../c-api/marshal.rst:49
msgid "The following functions allow marshalled values to be read back in."
msgstr "以下の関数を使うと、整列化された値を読み戻せます。"

#: ../../c-api/marshal.rst:51
msgid ""
"XXX What about error detection?  It appears that reading past the end of the "
"file will always result in a negative numeric value (where that's relevant), "
"but it's not clear that negative values won't be handled properly when "
"there's no error.  What's the right way to tell? Should only non-negative "
"values be written using these routines?"
msgstr ""
"XXX What about error detection?  It appears that reading past the end of the "
"file will always result in a negative numeric value (where that's relevant), "
"but it's not clear that negative values won't be handled properly when "
"there's no error.  What's the right way to tell? Should only non-negative "
"values be written using these routines?"

#: ../../c-api/marshal.rst:60
msgid ""
"Return a C :c:type:`long` from the data stream in a :c:type:`FILE\\*` opened "
"for reading.  Only a 32-bit value can be read in using this function, "
"regardless of the native size of :c:type:`long`."
msgstr ""
"読み出し用に開かれた :c:type:`FILE\\*` 内のデータストリームから、 C の :c:"
"type:`long` 型データを読み出して返します。この関数は、ネイティブの :c:type:"
"`long` のサイズに関係なく、 32 ビットの値だけを読み出せます。"

#: ../../c-api/marshal.rst:67
msgid ""
"Return a C :c:type:`short` from the data stream in a :c:type:`FILE\\*` "
"opened for reading.  Only a 16-bit value can be read in using this function, "
"regardless of the native size of :c:type:`short`."
msgstr ""
"読み出し用に開かれた :c:type:`FILE\\*` 内のデータストリームから、 C の :c:"
"type:`short` 型データを読み出して返します。この関数は、ネイティブの :c:type:"
"`short` のサイズに関係なく、 16 ビットの値だけを読み出せます。"

#: ../../c-api/marshal.rst:74
msgid ""
"Return a Python object from the data stream in a :c:type:`FILE\\*` opened "
"for reading.  On error, sets the appropriate exception (:exc:`EOFError` or :"
"exc:`TypeError`) and returns *NULL*."
msgstr ""
"読み出し用に開かれた :c:type:`FILE\\*` 内のデータストリームから、 Python オブ"
"ジェクトを読み出して返します。エラーが生じた場合、適切な例外 (:exc:"
"`EOFError` または :exc:`TypeError`) を送出して *NULL* を返します。"

#: ../../c-api/marshal.rst:81
msgid ""
"Return a Python object from the data stream in a :c:type:`FILE\\*` opened "
"for reading.  Unlike :c:func:`PyMarshal_ReadObjectFromFile`, this function "
"assumes that no further objects will be read from the file, allowing it to "
"aggressively load file data into memory so that the de-serialization can "
"operate from data in memory rather than reading a byte at a time from the "
"file.  Only use these variant if you are certain that you won't be reading "
"anything else from the file.  On error, sets the appropriate exception (:exc:"
"`EOFError` or :exc:`TypeError`) and returns *NULL*."
msgstr ""
"読み出し用に開かれた :c:type:`FILE\\*` 内のデータストリームから、 Python オブ"
"ジェクトを読み出して返します。 :c:func:`PyMarshal_ReadObjectFromFile` と違"
"い、この関数はファイル中に後続のオブジェクトが存在しないと仮定し、ファイルか"
"らメモリ上にファイルデータを一気にメモリにロードして、逆整列化機構がファイル"
"から一バイトづつ読み出す代わりにメモリ上のデータを操作できるようにします。対"
"象のファイルから他に何も読み出さないと分かっている場合にのみ、この関数を使っ"
"てください。エラーが生じた場合、適切な例外 (:exc:`EOFError` または :exc:"
"`TypeError`) を送出して *NULL* を返します。"

#: ../../c-api/marshal.rst:93
msgid ""
"Return a Python object from the data stream in a character buffer containing "
"*len* bytes pointed to by *string*.  On error, sets the appropriate "
"exception (:exc:`EOFError` or :exc:`TypeError`) and returns *NULL*."
msgstr ""
"*string* が指している *len* バイトの文字列バッファに納められたデータストリー"
"ムから Python オブジェクトを読み出して返します。エラーが生じた場合、適切な例"
"外 (:exc:`EOFError` または :exc:`TypeError`) を送出して *NULL* を返します。"

#: ../../c-api/marshal.rst:98
msgid ""
"This function used an :c:type:`int` type for *len*. This might require "
"changes in your code for properly supporting 64-bit systems."
msgstr ""
"この関数は以前は *len* の型に :c:type:`int` を利用していました。この変更によ"
"り、 64 bit システムを正しくサポートするには修正が必要になります。"
