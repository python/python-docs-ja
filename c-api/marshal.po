# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Arihiro TAKASE, 2023
# Taichi Haradaguchi, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-04 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:49+0000\n"
"Last-Translator: Taichi Haradaguchi, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/marshal.rst:6
msgid "Data marshalling support"
msgstr "データ整列化 (data marshalling) のサポート"

#: ../../c-api/marshal.rst:8
msgid ""
"These routines allow C code to work with serialized objects using the same "
"data format as the :mod:`marshal` module.  There are functions to write data "
"into the serialization format, and additional functions that can be used to "
"read the data back.  Files used to store marshalled data must be opened in "
"binary mode."
msgstr ""
"以下のルーチン群は、 :mod:`marshal` モジュールと同じ形式を使った整列化オブ"
"ジェクトを C コードから使えるようにします。整列化形式でデータを書き出す関数に"
"加えて、データを読み戻す関数もあります。整列化されたデータを記録するファイル"
"はバイナリモードで開かれていなければなりません。"

#: ../../c-api/marshal.rst:14
msgid "Numeric values are stored with the least significant byte first."
msgstr "数値は最小桁が先にくるように記録されます。"

#: ../../c-api/marshal.rst:16
msgid ""
"The module supports two versions of the data format: version 0 is the "
"historical version, version 1 shares interned strings in the file, and upon "
"unmarshalling.  Version 2 uses a binary format for floating-point numbers. "
"``Py_MARSHAL_VERSION`` indicates the current file format (currently 2)."
msgstr ""

#: ../../c-api/marshal.rst:24
msgid ""
"Marshal a :c:expr:`long` integer, *value*, to *file*.  This will only write "
"the least-significant 32 bits of *value*; regardless of the size of the "
"native :c:expr:`long` type.  *version* indicates the file format."
msgstr ""
":c:expr:`long` 型の整数値 *value* を *file* へ整列化します。この関数は "
"*value* の下桁 32 ビットを書き込むだけです; ネイティブの :c:expr:`long` 型サ"
"イズには関知しません。 *version* はファイルフォーマットを示します。"

#: ../../c-api/marshal.rst:28 ../../c-api/marshal.rst:36
msgid ""
"This function can fail, in which case it sets the error indicator. Use :c:"
"func:`PyErr_Occurred` to check for that."
msgstr ""
"この関数は失敗することがあり、その場合はエラー指示子を設定します。それを確認"
"するために :c:func:`PyErr_Occurred` を使います。"

#: ../../c-api/marshal.rst:33
msgid ""
"Marshal a Python object, *value*, to *file*. *version* indicates the file "
"format."
msgstr ""
"Python オブジェクト *value* を *file* へ整列化します。*version* はファイル"
"フォーマットを示します。"

#: ../../c-api/marshal.rst:41
msgid ""
"Return a bytes object containing the marshalled representation of *value*. "
"*version* indicates the file format."
msgstr ""
"*value* の整列化表現が入ったバイト列オブジェクトを返します。*version* はファ"
"イルフォーマットを示します。"

#: ../../c-api/marshal.rst:45
msgid "The following functions allow marshalled values to be read back in."
msgstr "以下の関数を使うと、整列化された値を読み戻せます。"

#: ../../c-api/marshal.rst:50
msgid ""
"Return a C :c:expr:`long` from the data stream in a :c:expr:`FILE*` opened "
"for reading.  Only a 32-bit value can be read in using this function, "
"regardless of the native size of :c:expr:`long`."
msgstr ""
"読み出し用に開かれた :c:expr:`FILE*` 内のデータストリームから、 C の :c:expr:"
"`long` 型データを読み出して返します。この関数は、ネイティブの :c:expr:`long` "
"のサイズに関係なく、 32 ビットの値だけを読み出せます。"

#: ../../c-api/marshal.rst:54 ../../c-api/marshal.rst:64
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`) and returns "
"``-1``."
msgstr ""
"エラーの場合、適切な例外 (:exc:`EOFError`) を設定し ``-1`` を返します。"

#: ../../c-api/marshal.rst:60
msgid ""
"Return a C :c:expr:`short` from the data stream in a :c:expr:`FILE*` opened "
"for reading.  Only a 16-bit value can be read in using this function, "
"regardless of the native size of :c:expr:`short`."
msgstr ""
"読み出し用に開かれた :c:expr:`FILE*` 内のデータストリームから、 C の :c:expr:"
"`short` 型データを読み出して返します。この関数は、ネイティブの :c:expr:"
"`short` のサイズに関係なく、 16 ビットの値だけを読み出せます。"

#: ../../c-api/marshal.rst:70
msgid ""
"Return a Python object from the data stream in a :c:expr:`FILE*` opened for "
"reading."
msgstr ""
"読み出し用に開かれた :c:expr:`FILE*` 内のデータストリームから Python オブジェ"
"クトを返します。"

#: ../../c-api/marshal.rst:73 ../../c-api/marshal.rst:87
#: ../../c-api/marshal.rst:96
msgid ""
"On error, sets the appropriate exception (:exc:`EOFError`, :exc:`ValueError` "
"or :exc:`TypeError`) and returns ``NULL``."
msgstr ""
"エラーの場合、適切な例外 (:exc:`EOFError`, :exc:`ValueError`, :exc:"
"`TypeError`) を設定し ``NULL`` を返します。"

#: ../../c-api/marshal.rst:79
msgid ""
"Return a Python object from the data stream in a :c:expr:`FILE*` opened for "
"reading.  Unlike :c:func:`PyMarshal_ReadObjectFromFile`, this function "
"assumes that no further objects will be read from the file, allowing it to "
"aggressively load file data into memory so that the de-serialization can "
"operate from data in memory rather than reading a byte at a time from the "
"file.  Only use these variant if you are certain that you won't be reading "
"anything else from the file."
msgstr ""
"読み出し用に開かれた :c:expr:`FILE*` 内のデータストリームから、 Python オブ"
"ジェクトを読み出して返します。 :c:func:`PyMarshal_ReadObjectFromFile` と違"
"い、この関数はファイル中に後続のオブジェクトが存在しないと仮定し、ファイルか"
"らメモリ上にファイルデータを一気にメモリにロードして、逆整列化機構がファイル"
"から一バイトづつ読み出す代わりにメモリ上のデータを操作できるようにします。対"
"象のファイルから他に何も読み出さないと分かっている場合にのみ、この関数を使っ"
"てください。"

#: ../../c-api/marshal.rst:93
msgid ""
"Return a Python object from the data stream in a byte buffer containing "
"*len* bytes pointed to by *data*."
msgstr ""
"*data* が指す *len* バイトのバイト列バッファ内のデータストリームから Python "
"オブジェクトを返します。"
