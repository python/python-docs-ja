# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:48+0000\n"
"Last-Translator: tomo, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/file.rst:6
msgid "File Objects"
msgstr "ファイルオブジェクト"

#: ../../c-api/file.rst:10
msgid ""
"These APIs are a minimal emulation of the Python 2 C API for built-in file "
"objects, which used to rely on the buffered I/O (:c:type:`FILE\\*`) support "
"from the C standard library.  In Python 3, files and streams use the new :"
"mod:`io` module, which defines several layers over the low-level unbuffered "
"I/O of the operating system.  The functions described below are convenience "
"C wrappers over these new APIs, and meant mostly for internal error "
"reporting in the interpreter; third-party code is advised to access the :mod:"
"`io` APIs instead."
msgstr ""
"これらの API は、 Python 2 の組み込みのファイルオブジェクトの C API を最低限"
"エミュレートするためのものです。それらは、標準 C ライブラリでサポートされてい"
"るバッファ付き I/O (:c:type:`FILE\\*`) に頼るために使われます。 Python 3 で"
"は、ファイルとストリームは新しい :mod:`io` モジュールを使用され、そこに OS の"
"低レベルなバッファ付き I/O の上にいくつかの層が定義されています。下で解説され"
"ている関数は、それらの新しい API の便利な C ラッパーであり、インタプリタでの"
"内部的なエラー通知に向いています; サードパーティーのコードは代わりに :mod:"
"`io` の API を使うことが推奨されます。"

#: ../../c-api/file.rst:22
msgid ""
"Create a Python file object from the file descriptor of an already opened "
"file *fd*.  The arguments *name*, *encoding*, *errors* and *newline* can be "
"*NULL* to use the defaults; *buffering* can be *-1* to use the default. "
"*name* is ignored and kept for backward compatibility. Return *NULL* on "
"failure. For a more comprehensive description of the arguments, please refer "
"to the :func:`io.open` function documentation."
msgstr ""
"既に開かれているファイル *fd* のファイルディスクリプタから Python のファイル"
"オブジェクトを作成します。引数 *name* 、 *encoding* 、 *errors* 、 *newline* "
"には、デフォルトの値として ``NULL`` が使えます。*buffering* には *-1* を指定"
"してデフォルトの値を使うことができます。 *name* は無視されるのですが、後方互"
"換性のために残されています。失敗すると *NULL* を返します。より包括的な引数の"
"解説は、 :func:`io.open` 関数のドキュメントを参照してください。"

#: ../../c-api/file.rst:31
msgid ""
"Since Python streams have their own buffering layer, mixing them with OS-"
"level file descriptors can produce various issues (such as unexpected "
"ordering of data)."
msgstr ""
"Python ストリームは自身のバッファリング層を持つため、ファイル記述子のOSレベル"
"のバッファリングと併用すると、様々な問題 (予期せぬデータ順) などを引き起こし"
"ます。"

#: ../../c-api/file.rst:35
msgid "Ignore *name* attribute."
msgstr "*name* 属性の無視。"

#: ../../c-api/file.rst:41
msgid ""
"Return the file descriptor associated with *p* as an :c:type:`int`.  If the "
"object is an integer, its value is returned.  If not, the object's :meth:"
"`~io.IOBase.fileno` method is called if it exists; the method must return an "
"integer, which is returned as the file descriptor value.  Sets an exception "
"and returns ``-1`` on failure."
msgstr ""
"*p* に関連づけられる ファイルディスクリプタを :c:type:`int` として返します。"
"オブジェクトが整数なら、その値を返します。 整数でない場合、オブジェクトに :"
"meth:`~io.IOBase.fileno` メソッドがあれば呼び出します; このメソッドの返り値"
"は、ファイル記述子の値として返される整数でなければなりません。失敗すると例外"
"を設定して ``-1`` を返します。"

#: ../../c-api/file.rst:52
msgid ""
"Equivalent to ``p.readline([n])``, this function reads one line from the "
"object *p*.  *p* may be a file object or any object with a :meth:`~io.IOBase."
"readline` method.  If *n* is ``0``, exactly one line is read, regardless of "
"the length of the line.  If *n* is greater than ``0``, no more than *n* "
"bytes will be read from the file; a partial line can be returned.  In both "
"cases, an empty string is returned if the end of the file is reached "
"immediately.  If *n* is less than ``0``, however, one line is read "
"regardless of length, but :exc:`EOFError` is raised if the end of the file "
"is reached immediately."
msgstr ""
"``p.readline([n])`` と同じで、この関数はオブジェクト *p* の各行を読み出しま"
"す。 *p* はファイルオブジェクトか、 :meth:`~io.IOBase.readline` メソッドを持"
"つ何らかのオブジェクトでかまいません。 *n* が ``0`` の場合、行の長さに関係な"
"く正確に 1 行だけ読み出します。 *n* が ``0`` より大きければ、 *n* バイト以上"
"のデータは読み出しません; 従って、行の一部だけが返される場合があります。 どち"
"らの場合でも、読み出し後すぐにファイルの終端に到達した場合には空文字列を 返し"
"ます。 *n* が ``0`` より小さければ、長さに関わらず 1 行だけを 読み出します"
"が、すぐにファイルの終端に到達した場合には :exc:`EOFError` を送出します。"

#: ../../c-api/file.rst:67
msgid ""
"Write object *obj* to file object *p*.  The only supported flag for *flags* "
"is :const:`Py_PRINT_RAW`; if given, the :func:`str` of the object is written "
"instead of the :func:`repr`.  Return ``0`` on success or ``-1`` on failure; "
"the appropriate exception will be set."
msgstr ""
"オブジェクト *obj* をファイルオブジェクト *p* に書き込みます。 *flags* がサ"
"ポートするフラグは :const:`Py_PRINT_RAW` だけです; このフラグを指定すると、オ"
"ブジェクトに :func:`repr` ではなく :func:`str` を適用した結果をファイルに書き"
"出します。成功した場合には ``0`` を返し、失敗すると ``-1`` を返して適切な例外"
"をセットします。"

#: ../../c-api/file.rst:75
msgid ""
"Write string *s* to file object *p*.  Return ``0`` on success or ``-1`` on "
"failure; the appropriate exception will be set."
msgstr ""
"文字列 *s* をファイルオブジェクト *p* に書き出します。成功した場合には ``0`` "
"を返し、失敗すると ``-1`` を返して適切な例外をセットします。"
