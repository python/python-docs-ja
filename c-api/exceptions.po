# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/exceptions.rst:8
msgid "Exception Handling"
msgstr "例外処理"

#: ../../c-api/exceptions.rst:10
msgid ""
"The functions described in this chapter will let you handle and raise Python "
"exceptions.  It is important to understand some of the basics of Python "
"exception handling.  It works somewhat like the Unix :c:data:`errno` "
"variable: there is a global indicator (per thread) of the last error that "
"occurred.  Most functions don't clear this on success, but will set it to "
"indicate the cause of the error on failure.  Most functions also return an "
"error indicator, usually *NULL* if they are supposed to return a pointer, or "
"``-1`` if they return an integer (exception: the :c:func:`PyArg_\\*` "
"functions return ``1`` for success and ``0`` for failure)."
msgstr ""
"この章で説明する関数を使うと、 Python の例外の処理や送出ができるようになりま"
"す。 Python の例外処理の基本をいくらか理解することが大切です。例外は POSIX :"
"c:data:`errno` 変数にやや似た機能を果たします: 発生した中で最も新しいエラー"
"の (スレッド毎の) グローバルなインジケータがあります。実行に成功した場合には"
"ほとんどの C API 関数がこれをクリアしませんが、失敗したときにはエラーの原因を"
"示すために設定します。ほとんどの C API 関数はエラーインジケータも返し、通常は"
"関数がポインタを返すことになっている場合は *NULL* であり、関数が整数を返す場"
"合は ``-1`` です。(例外: :c:func:`PyArg_\\*` 関数は実行に成功したときに "
"``1`` を返し、失敗したときに ``0`` を返します)."

#: ../../c-api/exceptions.rst:20
msgid ""
"When a function must fail because some function it called failed, it "
"generally doesn't set the error indicator; the function it called already "
"set it.  It is responsible for either handling the error and clearing the "
"exception or returning after cleaning up any resources it holds (such as "
"object references or memory allocations); it should *not* continue normally "
"if it is not prepared to handle the error.  If returning due to an error, it "
"is important to indicate to the caller that an error has been set.  If the "
"error is not handled or carefully propagated, additional calls into the "
"Python/C API may not behave as intended and may fail in mysterious ways."
msgstr ""
"ある関数が呼び出した関数がいくつか失敗したために、その関数が失敗しなければな"
"らないとき、一般的にエラーインジケータを設定しません。呼び出した関数がすでに"
"設定しています。エラーを処理して例外をクリアするか、あるいは (オブジェクト参"
"照またはメモリ割り当てのような)それが持つどんなリソースも取り除いた後に戻るか"
"のどちらか一方を行う責任があります。エラーを処理する準備をしていなければ、普"
"通に続けるべきでは *ありません*。エラーのために戻る場合は、エラーが設定されて"
"いると呼び出し元に知らせることが大切です。エラーが処理されていない場合または"
"丁寧に伝えられている場合には、Python/C APIのさらなる呼び出しは意図した通りに"
"は動かない可能性があり、不可解な形で失敗するかもしれません。"

#: ../../c-api/exceptions.rst:35
msgid ""
"The error indicator consists of three Python objects corresponding to   the "
"Python variables ``sys.exc_type``, ``sys.exc_value`` and ``sys."
"exc_traceback``. API functions exist to interact with the error indicator in "
"various ways.  There is a separate error indicator for each thread."
msgstr ""
"エラーインジケータは Python 変数 ``sys.exc_type``, ``sys.exc_value`` および "
"``sys.exc_traceback`` に対応する三つの Python オブジェクトからからなります。"
"いろいろな方法でエラーインジケータとやりとりするために API 関数が存在します。"
"各スレッドに別々のエラーインジケータがあります。"

#: ../../c-api/exceptions.rst:46
msgid ""
"Print a standard traceback to ``sys.stderr`` and clear the error indicator. "
"**Unless** the error is a ``SystemExit``.  In that case the no traceback is "
"printed and Python process will exit with the error code specified by the "
"``SystemExit`` instance."
msgstr ""
"標準のトレースバックを ``sys.stderr`` に出力し、エラーインジケータをクリアし"
"ます。\n"
"ただし、エラーが ``SystemExit`` **である場合を除いて** です。\n"
"その場合、トレースバックは出力されず、 Python プロセスは ``SystemExit`` イン"
"スタンスで指定されたエラーコードで終了します。"

#: ../../c-api/exceptions.rst:51
msgid ""
"Call this function **only** when the error indicator is set.  Otherwise it "
"will cause a fatal error!"
msgstr ""
"エラーインジケータが設定されているときに **だけ**、この関数を呼び出してくださ"
"い。\n"
"それ以外の場合、致命的なエラーを引き起こすでしょう!"

#: ../../c-api/exceptions.rst:54
msgid ""
"If *set_sys_last_vars* is nonzero, the variables :data:`sys.last_type`, :"
"data:`sys.last_value` and :data:`sys.last_traceback` will be set to the "
"type, value and traceback of the printed exception, respectively."
msgstr ""
"*set_sys_last_vars* が非ゼロであれば、 :data:`sys.last_type`, :data:`sys."
"last_value`, :data:`sys.last_traceback` 変数が、表示される例外のタイプ、値、"
"トレースバックそれぞれに反映されます。"

#: ../../c-api/exceptions.rst:61
msgid "Alias for ``PyErr_PrintEx(1)``."
msgstr "``PyErr_PrintEx(1)`` のエイリアス."

#: ../../c-api/exceptions.rst:66
msgid ""
"Test whether the error indicator is set.  If set, return the exception "
"*type* (the first argument to the last call to one of the :c:func:"
"`PyErr_Set\\*` functions or to :c:func:`PyErr_Restore`).  If not set, return "
"*NULL*.  You do not own a reference to the return value, so you do not need "
"to :c:func:`Py_DECREF` it."
msgstr ""
"エラーインジケータが設定されているかテストします。設定されている場合は、例外"
"の *型* (:c:func:`PyErr_Set\\*` 関数の一つあるいは :c:func:`PyErr_Restore` へ"
"の最も新しい呼び出しに対する第一引数)を返します。設定されていない場合は "
"*NULL* を返します。あなたは戻り値への参照を持っていませんので、それに :c:"
"func:`Py_DECREF` する必要はありません。"

#: ../../c-api/exceptions.rst:74
msgid ""
"Do not compare the return value to a specific exception; use :c:func:"
"`PyErr_ExceptionMatches` instead, shown below.  (The comparison could easily "
"fail since the exception may be an instance instead of a class, in the case "
"of a class exception, or it may be a subclass of the expected exception.)"
msgstr ""
"戻り値を特定の例外と比較しないでください。その代わりに、下に示す :c:func:"
"`PyErr_ExceptionMatches` を使ってください。(比較は簡単に失敗するでしょう。な"
"ぜなら、例外はクラスではなくインスタンスかもしれないし、あるいは、クラス例外"
"の場合は期待される例外のサブクラスかもしれないからです。)"

#: ../../c-api/exceptions.rst:82
msgid ""
"Equivalent to ``PyErr_GivenExceptionMatches(PyErr_Occurred(), exc)``.  This "
"should only be called when an exception is actually set; a memory access "
"violation will occur if no exception has been raised."
msgstr ""
"``PyErr_GivenExceptionMatches(PyErr_Occurred(), exc)`` と同じ。例外が実際に設"
"定されたときにだけ、これを呼び出だすべきです。例外が発生していないならば、メ"
"モリアクセス違反が起きるでしょう。"

#: ../../c-api/exceptions.rst:89
msgid ""
"Return true if the *given* exception matches the exception in *exc*.  If "
"*exc* is a class object, this also returns true when *given* is an instance "
"of a subclass.  If *exc* is a tuple, all exceptions in the tuple (and "
"recursively in subtuples) are searched for a match."
msgstr ""
"*given* 例外が *exc* の例外と一致するなら真を返します。これは *exc* がクラス"
"オブジェクトである場合も真を返します。これは *given* がサブクラスのインスタン"
"スであるときも真を返します。*exc* がタプルならば、タプル内\\ (と再帰的にサブ"
"タプル内)のすべての例外が一致するか調べられます。"

#: ../../c-api/exceptions.rst:97
msgid ""
"Under certain circumstances, the values returned by :c:func:`PyErr_Fetch` "
"below can be \"unnormalized\", meaning that ``*exc`` is a class object but "
"``*val`` is not an instance of the  same class.  This function can be used "
"to instantiate the class in that case.  If the values are already "
"normalized, nothing happens. The delayed normalization is implemented to "
"improve performance."
msgstr ""
"ある状況では、以下の :c:func:`PyErr_Fetch` が返す値は \"正規化されていない\" "
"可能性があります。つまり、 ``*exc`` はクラスオブジェクトだが ``*val`` は同じ"
"クラスのインスタンスではないという意味です。この関数はそのような場合にそのク"
"ラスをインスタンス化するために使われます。その値がすでに正規化されている場合"
"は何も起きません。遅延正規化はパフォーマンスを改善するために実装されていま"
"す。"

#: ../../c-api/exceptions.rst:106
msgid ""
"Clear the error indicator.  If the error indicator is not set, there is no "
"effect."
msgstr ""
"エラーインジケータをクリアします。エラーインジケータが設定されていないなら"
"ば、効果はありません。"

#: ../../c-api/exceptions.rst:112
msgid ""
"Retrieve the error indicator into three variables whose addresses are "
"passed. If the error indicator is not set, set all three variables to "
"*NULL*.  If it is set, it will be cleared and you own a reference to each "
"object retrieved.  The value and traceback object may be *NULL* even when "
"the type object is not."
msgstr ""
"エラーインジケータをアドレスを渡す三つの変数の中へ取り出します。エラーインジ"
"ケータが設定されていない場合は、三つすべての変数を *NULL* に設定します。エ"
"ラーインジケータが設定されている場合はクリアされ、あなたは取り出されたそれぞ"
"れのオブジェクトへの参照を持つことになります。型オブジェクトが *NULL* でない"
"ときでさえ、その値とトレースバックオブジェクトは *NULL* かもしれません。"

#: ../../c-api/exceptions.rst:119
msgid ""
"This function is normally only used by code that needs to handle exceptions "
"or by code that needs to save and restore the error indicator temporarily."
msgstr ""
"通常、この関数は例外を扱う必要のあるコードあるいはエラーインジケータを一時的"
"に保存して元に戻す必要のあるコードによってのみ使用されます。"

#: ../../c-api/exceptions.rst:125
msgid ""
"Set  the error indicator from the three objects.  If the error indicator is "
"already set, it is cleared first.  If the objects are *NULL*, the error "
"indicator is cleared.  Do not pass a *NULL* type and non-*NULL* value or "
"traceback.  The exception type should be a class.  Do not pass an invalid "
"exception type or value. (Violating these rules will cause subtle problems "
"later.)  This call takes away a reference to each object: you must own a "
"reference to each object before the call and after the call you no longer "
"own these references.  (If you don't understand this, don't use this "
"function.  I warned you.)"
msgstr ""
"三つのオブジェクトからエラーインジケータを設定します。エラーインジケータがす"
"でに設定されている場合は、最初にクリアされます。オブジェクトが *NULL* なら"
"ば、エラーインジケータがクリアされます。*NULL* のtypeと非 *NULL* のvalueある"
"いは tracebackを渡してはいけません。例外の型(type)はクラスであるべきです。無"
"効な例外の型(type)あるいは値(value)を渡してはいけません。(これらの規則を破る"
"と後で気付きにくい問題の原因となるでしょう。) この呼び出しはそれぞれのオブ"
"ジェクトへの参照を取り除きます: あなたは呼び出しの前にそれぞれのオブジェクト"
"への参照を持たなければならないのであり、また呼び出しの後にはもはやこれらの参"
"照を持っていません。(これを理解していない場合は、この関数を使ってはいけませ"
"ん。注意しておきます。)"

#: ../../c-api/exceptions.rst:137
msgid ""
"This function is normally only used by code that needs to save and restore "
"the error indicator temporarily; use :c:func:`PyErr_Fetch` to save the "
"current exception state."
msgstr ""
"通常この関数はエラーインジケータを一時的に保存し元に戻す必要のあるコードに"
"よってのみに使われます。現在の例外状態を保存するためには :c:func:"
"`PyErr_Fetch` を使ってください。"

#: ../../c-api/exceptions.rst:144
msgid ""
"This is the most common way to set the error indicator.  The first argument "
"specifies the exception type; it is normally one of the standard exceptions, "
"e.g. :c:data:`PyExc_RuntimeError`.  You need not increment its reference "
"count. The second argument is an error message; it is converted to a string "
"object."
msgstr ""
"これはエラーインジケータを設定するための最も一般的な方法です。第一引数は例外"
"の型を指定します。通常は標準例外の一つ、例えば :c:data:`PyExc_RuntimeError` "
"です。その参照カウントを増加させる必要はありません。第二引数はエラーメッセー"
"ジで、文字列オブジェクトへ変換されます。"

#: ../../c-api/exceptions.rst:152
msgid ""
"This function is similar to :c:func:`PyErr_SetString` but lets you specify "
"an arbitrary Python object for the \"value\" of the exception."
msgstr ""
"この関数は :c:func:`PyErr_SetString` に似ていますが、例外の\"値(value)\"とし"
"て任意のPythonオブジェクトを指定することができます。"

#: ../../c-api/exceptions.rst:158
msgid ""
"This function sets the error indicator and returns *NULL*.  *exception* "
"should be a Python exception class.  The *format* and subsequent parameters "
"help format the error message; they have the same meaning and values as in :"
"c:func:`PyString_FromFormat`."
msgstr ""
"この関数はエラーインジケータを設定し *NULL* を返します。 *exception* は"
"Python 例外クラスであるべきです。 *format* と以降の引数はエラーメッセージを作"
"るためのもので, :c:func:`PyString_FromFormat` の引数と同じ意味を持っていま"
"す。"

#: ../../c-api/exceptions.rst:166
msgid "This is a shorthand for ``PyErr_SetObject(type, Py_None)``."
msgstr "これは ``PyErr_SetObject(type, Py_None)`` を省略したものです。"

#: ../../c-api/exceptions.rst:171
msgid ""
"This is a shorthand for ``PyErr_SetString(PyExc_TypeError, message)``, where "
"*message* indicates that a built-in operation was invoked with an illegal "
"argument.  It is mostly for internal use."
msgstr ""
"これは ``PyErr_SetString(PyExc_TypeError, message)`` を省略したもので、ここ"
"で *message* は組み込み操作が不正な引数で呼び出されたということを表していま"
"す。主に内部で使用するためのものです。"

#: ../../c-api/exceptions.rst:178
msgid ""
"This is a shorthand for ``PyErr_SetNone(PyExc_MemoryError)``; it returns "
"*NULL* so an object allocation function can write ``return PyErr_NoMemory();"
"`` when it runs out of memory."
msgstr ""
"これは ``PyErr_SetNone(PyExc_MemoryError)`` を省略したもので、*NULL* を返しま"
"す。したがって、メモリ不足になったとき、オブジェクト割り当て関数は ``return "
"PyErr_NoMemory();`` と書くことができます。"

#: ../../c-api/exceptions.rst:187
msgid ""
"This is a convenience function to raise an exception when a C library "
"function has returned an error and set the C variable :c:data:`errno`.  It "
"constructs a tuple object whose first item is the integer :c:data:`errno` "
"value and whose second item is the corresponding error message (gotten from :"
"c:func:`strerror`), and then calls ``PyErr_SetObject(type, object)``.  On "
"Unix, when the :c:data:`errno` value is :const:`EINTR`, indicating an "
"interrupted system call, this calls :c:func:`PyErr_CheckSignals`, and if "
"that set the error indicator, leaves it set to that.  The function always "
"returns *NULL*, so a wrapper function around a system call can write "
"``return PyErr_SetFromErrno(type);`` when the system call returns an error."
msgstr ""
"Cライブラリ関数がエラーを返してC変数 :c:data:`errno` を設定したときに、これは"
"例外を発生させるために便利な関数です。第一要素が整数 :c:data:`errno` 値で、第"
"二要素が (:c:func:`strerror` から得られる)対応するエラーメッセージであるタプ"
"ルオブジェクトを構成します。それから、 ``PyErr_SetObject(type, object)`` を呼"
"び出します。 Unixでは、 :c:data:`errno` 値が :const:`EINTR` であるとき、すな"
"わち割り込まれたシステムコールを表しているとき、これは :c:func:"
"`PyErr_CheckSignals` を呼び出し、それがエラーインジケータを設定した場合は設定"
"されたままにしておきます。関数は常に *NULL* を返します。したがって、システム"
"コールがエラーを返したとき、システムコールのラッパー関数は ``return "
"PyErr_SetFromErrno(type);`` と書くことができます。"

#: ../../c-api/exceptions.rst:201
msgid ""
"Similar to :c:func:`PyErr_SetFromErrno`, with the additional behavior that "
"if *filenameObject* is not *NULL*, it is passed to the constructor of *type* "
"as a third parameter.  In the case of exceptions such as :exc:`IOError` and :"
"exc:`OSError`, this is used to define the :attr:`filename` attribute of the "
"exception instance."
msgstr ""
":c:func:`PyErr_SetFromErrno` に似ていますが、 *filenameObject* が *NULL* でな"
"い場合にそれを *type* のコンストラクタに第三引数として渡す、というふるまいが"
"追加されています。\n"
":exc:`IOError` と :exc:`OSError` のような例外の場合では、これが例外インスタン"
"スの :attr:`filename` 属性を定義するために使われます。"

#: ../../c-api/exceptions.rst:210
msgid ""
"Similar to :c:func:`PyErr_SetFromErrnoWithFilenameObject`, but the filename "
"is given as a C string."
msgstr ""
":c:func:`PyErr_SetFromErrnoWithFilenameObject` と似ていますが、ファイル名は "
"C 文字列として与えられます。"

#: ../../c-api/exceptions.rst:216
msgid ""
"This is a convenience function to raise :exc:`WindowsError`. If called with "
"*ierr* of :c:data:`0`, the error code returned by a call to :c:func:"
"`GetLastError` is used instead.  It calls the Win32 function :c:func:"
"`FormatMessage` to retrieve the Windows description of error code given by "
"*ierr* or :c:func:`GetLastError`, then it constructs a tuple object whose "
"first item is the *ierr* value and whose second item is the corresponding "
"error message (gotten from :c:func:`FormatMessage`), and then calls "
"``PyErr_SetObject(PyExc_WindowsError, object)``. This function always "
"returns *NULL*. Availability: Windows."
msgstr ""
"これは :exc:`WindowsError` を発生させるために便利な関数です。 :c:data:`0` の "
"*ierr* とともに呼び出された場合、 :c:func:`GetLastError` が返すエラーコードが"
"代りに使われます。 *ierr* あるいは :c:func:`GetLastError` によって与えられる"
"エラーコードのWindows用の説明を取り出すために、Win32関数 :c:func:"
"`FormatMessage` を呼び出します。それから、第一要素が *ierr* 値で第二要素が(:"
"c:func:`FormatMessage` から得られる) 対応するエラーメッセージであるタプルオブ"
"ジェクトを構成します。そして、 ``PyErr_SetObject(PyExc_WindowsError, "
"object)`` を呼び出します。この関数は常に *NULL* を返します。利用可能範囲: "
"Windows。"

#: ../../c-api/exceptions.rst:228
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErr`, with an additional parameter "
"specifying the exception type to be raised. Availability: Windows."
msgstr ""
":c:func:`PyErr_SetFromWindowsErr` に似ていますが、送出する例外の型を指定する"
"引数が追加されています。利用可能範囲: Windows。"

#: ../../c-api/exceptions.rst:236
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErr`, with the additional behavior "
"that if *filenameObject* is not *NULL*, it is passed to the constructor of :"
"exc:`WindowsError` as a third parameter. Availability: Windows."
msgstr ""
":c:func:`PyErr_SetFromWindowsErr` に似ていますが、 *filenameObject* が "
"*NULL* でない場合には :exc:`WindowsError` のコンストラクタに第三引数として渡"
"されるというふるまいが追加されています。利用可能範囲: Windows。"

#: ../../c-api/exceptions.rst:243
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErrWithFilenameObject`, but the "
"filename is given as a C string. Availability: Windows."
msgstr ""
":c:func:`PyErr_SetFromWindowsErrWithFilenameObject` と似ていますが、ファイル"
"名は C 文字列として与えられます。利用可能範囲: Windows。"

#: ../../c-api/exceptions.rst:249
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErrWithFilenameObject`, with an "
"additional parameter specifying the exception type to be raised. "
"Availability: Windows."
msgstr ""
":c:func:`PyErr_SetFromWindowsErrWithFilenameObject` に似ていますが、送出する"
"例外の型を指定する引数が追加されています。利用可能範囲: Windows。"

#: ../../c-api/exceptions.rst:258
msgid ""
"Similar to :c:func:`PyErr_SetFromWindowsErrWithFilename`, with an additional "
"parameter specifying the exception type to be raised. Availability: Windows."
msgstr ""
":c:func:`PyErr_SetFromWindowsErrWithFilename` に似ていますが、送出する例外の"
"型を指定する引数が追加されています。利用可能範囲: Windows。"

#: ../../c-api/exceptions.rst:266
msgid ""
"This is a shorthand for ``PyErr_SetString(PyExc_SystemError, message)``, "
"where *message* indicates that an internal operation (e.g. a Python/C API "
"function) was invoked with an illegal argument.  It is mostly for internal "
"use."
msgstr ""
"``PyErr_SetString(PyExc_SystemError, message)`` を省略したものです。ここで "
"*message* は内部操作(例えば、Python/C API関数)が不正な引数とともに呼び出され"
"たということを示しています。主に内部で使用するためのものです。"

#: ../../c-api/exceptions.rst:274
msgid ""
"Issue a warning message.  The *category* argument is a warning category (see "
"below) or *NULL*; the *message* argument is a message string.  *stacklevel* "
"is a positive number giving a number of stack frames; the warning will be "
"issued from the  currently executing line of code in that stack frame.  A "
"*stacklevel* of 1 is the function calling :c:func:`PyErr_WarnEx`, 2 is  the "
"function above that, and so forth."
msgstr ""
"警告メッセージを発行します。 *category* 引数は警告カテゴリ(以下を参照) かまた"
"は *NULL* で、 *message* 引数はメッセージ文字列です。 *stacklevel* はスタック"
"フレームの数を示す正の整数です; 警告はそのスタックフレームの中の実行している"
"行から発行されます。 *stacklevel* が 1 だと :c:func:`PyErr_WarnEx` を呼び出し"
"ている関数が、2 だとその上の関数が Warning の発行元になります。"

#: ../../c-api/exceptions.rst:281
msgid ""
"This function normally prints a warning message to *sys.stderr*; however, it "
"is also possible that the user has specified that warnings are to be turned "
"into errors, and in that case this will raise an exception.  It is also "
"possible that the function raises an exception because of a problem with the "
"warning machinery (the implementation imports the :mod:`warnings` module to "
"do the heavy lifting). The return value is ``0`` if no exception is raised, "
"or ``-1`` if an exception is raised.  (It is not possible to determine "
"whether a warning message is actually printed, nor what the reason is for "
"the exception; this is intentional.)  If an exception is raised, the caller "
"should do its normal exception handling (for example, :c:func:`Py_DECREF` "
"owned references and return an error value)."
msgstr ""
"この関数は通常警告メッセージを *sys.stderr* へプリントします。けれども、ユー"
"ザが警告をエラーへ変更するように指定することも可能です。そのような場合には、"
"これは例外を発生させます。警告機構がもつ問題のためにその関数が例外を発生させ"
"るということも可能です。(実装ではその厄介な仕事を行うために :mod:`warnings` "
"モジュールをインポートします)。例外が発生させられなければ、戻り値は ``0`` で"
"す。あるいは、例外が発生させられると ``-1`` です。(警告メッセージが実際にプリ"
"ントされるかどうかを決定することはできず、また何がその例外の原因なのかを決定"
"することもできない。これは意図的なものです。)例外が発生した場合、呼び出し元は"
"通常の例外処理を行います(例えば、 :c:func:`Py_DECREF` は参照を持っており、エ"
"ラー値を返します)。"

#: ../../c-api/exceptions.rst:293
msgid ""
"Warning categories must be subclasses of :c:data:`PyExc_Warning`; :c:data:"
"`PyExc_Warning` is a subclass of :c:data:`PyExc_Exception`; the default "
"warning category is :c:data:`PyExc_RuntimeWarning`. The standard Python "
"warning categories are available as global variables whose names are "
"enumerated at :ref:`standardwarningcategories`."
msgstr ""
"警告カテゴリは :c:data:`PyExc_Warning` のサブクラスでなければなりません。 :c:"
"data:`PyExc_Warning` は :c:data:`PyExc_Exception` のサブクラスです。\n"
"デフォルトの警告カテゴリは :c:data:`PyExc_RuntimeWarning` です。\n"
"標準の Python 警告カテゴリは、 :ref:`standardwarningcategories` で名前が列挙"
"されているグローバル変数として利用可能です。"

#: ../../c-api/exceptions.rst:299
msgid ""
"For information about warning control, see the documentation for the :mod:"
"`warnings` module and the :option:`-W` option in the command line "
"documentation.  There is no C API for warning control."
msgstr ""
"警告をコントロールするための情報については、 :mod:`warnings` モジュールのド"
"キュメンテーションとコマンドライン・ドキュメンテーションの :option:`-W` オプ"
"ションを参照してください。警告コントロールのためのC APIはありません。"

#: ../../c-api/exceptions.rst:306
msgid ""
"Issue a warning message.  The *category* argument is a warning category (see "
"below) or *NULL*; the *message* argument is a message string.  The warning "
"will appear to be issued from the function calling :c:func:`PyErr_Warn`, "
"equivalent to calling :c:func:`PyErr_WarnEx` with a *stacklevel* of 1."
msgstr ""
"警告メッセージを発行します。 *category* 引数は警告カテゴリ(以下を参照) かまた"
"は *NULL* で、 *message* 引数はメッセージ文字列です。警告は、 :c:func:"
"`PyErr_WarnEx` を *stacklevel* に 1 を指定した時と同じく、 :c:func:"
"`PyErr_Warn` を呼び出した関数から発行されます。"

#: ../../c-api/exceptions.rst:311
msgid "Deprecated; use :c:func:`PyErr_WarnEx` instead."
msgstr "非推奨; :c:func:`PyErr_WarnEx` を使って下さい。"

#: ../../c-api/exceptions.rst:316
msgid ""
"Issue a warning message with explicit control over all warning attributes.  "
"This is a straightforward wrapper around the Python function :func:`warnings."
"warn_explicit`, see there for more information.  The *module* and *registry* "
"arguments may be set to *NULL* to get the default effect described there."
msgstr ""
"すべての警告の属性を明示的に制御した警告メッセージを出します。これは Python "
"関数 :func:`warnings.warn_explicit` の直接的なラッパで、さらに情報を得るには"
"そちらを参照してください。そこに説明されているデフォルトの効果を得るために、 "
"*module* と *registry* 引数は *NULL* に設定することができます。"

#: ../../c-api/exceptions.rst:325
msgid ""
"Issue a :exc:`DeprecationWarning` with the given *message* and *stacklevel* "
"if the :c:data:`Py_Py3kWarningFlag` flag is enabled."
msgstr ""
":c:data:`Py_Py3kWarningFlag` フラグが有効な場合、与えられた *message* と "
"*stacklevel* に応じて :exc:`DeprecationWarning` を発生します。"

#: ../../c-api/exceptions.rst:338
msgid ""
"This function interacts with Python's signal handling.  It checks whether a "
"signal has been sent to the processes and if so, invokes the corresponding "
"signal handler.  If the :mod:`signal` module is supported, this can invoke a "
"signal handler written in Python.  In all cases, the default effect for :"
"const:`SIGINT` is to raise the  :exc:`KeyboardInterrupt` exception.  If an "
"exception is raised the error indicator is set and the function returns "
"``-1``; otherwise the function returns ``0``.  The error indicator may or "
"may not be cleared if it was previously set."
msgstr ""
"この関数はPythonのシグナル処理とやりとりすることができます。シグナルがそのプ"
"ロセスへ送られたかどうかチェックし、そうならば対応するシグナルハンドラを呼び"
"出します。 :mod:`signal` モジュールがサポートされている場合は、これはPythonで"
"書かれたシグナルハンドラを呼び出せます。すべての場合で、 :const:`SIGINT` のデ"
"フォルトの効果は :exc:`KeyboardInterrupt` 例外を発生させることです。例外が発"
"生した場合、エラーインジケータが設定され、関数は ``-1`` を返します。そうでな"
"ければ、関数は ``0`` を返します。エラーインジケータが以前に設定されている場合"
"は、それがクリアされるかどうかわからない。"

#: ../../c-api/exceptions.rst:354
msgid ""
"This function simulates the effect of a :const:`SIGINT` signal arriving --- "
"the next time :c:func:`PyErr_CheckSignals` is called,  :exc:"
"`KeyboardInterrupt` will be raised.  It may be called without holding the "
"interpreter lock."
msgstr ""
"この関数は廃止されています。 :const:`SIGINT` シグナルが到達した影響をシミュ"
"レートします --- 次に :c:func:`PyErr_CheckSignals` が呼ばれるとき、 :exc:"
"`KeyboardInterrupt` は送出されるでしょう。インタプリタロックを保持することな"
"く呼び出すことができます。"

#: ../../c-api/exceptions.rst:364
msgid ""
"This utility function specifies a file descriptor to which a ``'\\0'`` byte "
"will be written whenever a signal is received.  It returns the previous such "
"file descriptor.  The value ``-1`` disables the feature; this is the initial "
"state. This is equivalent to :func:`signal.set_wakeup_fd` in Python, but "
"without any error checking.  *fd* should be a valid file descriptor.  The "
"function should only be called from the main thread."
msgstr ""
"このユーティリティ関数は、シグナルを受信したときに ``'\\0'`` バイトを書き込む"
"ファイルディスクリプタを指定します。戻り値は、それまで設定されていたファイル"
"ディスクリプタです。 ``-1`` はこの機能を無効にします。これは初期状態です。こ"
"れは Python の :func:`signal.set_wakeup_fd` と同じものですが、エラーチェック"
"を行ないません。 *fd* は有効なファイルディスクリプタであるべきです。この関数"
"の呼び出しはメインスレッドのみから行われるべきです。"

#: ../../c-api/exceptions.rst:376
msgid ""
"This utility function creates and returns a new exception class. The *name* "
"argument must be the name of the new exception, a C string of the form "
"``module.classname``.  The *base* and *dict* arguments are normally *NULL*. "
"This creates a class object derived from :exc:`Exception` (accessible in C "
"as :c:data:`PyExc_Exception`)."
msgstr ""
"このユーティリティ関数は新しい例外クラスを作成して返します。 *name* 引数は新"
"しい例外の名前、 ``module.classname`` 形式の C文字列でなければならない。 "
"*base* と *dict* 引数は通常 *NULL* です。これはすべての例外のためのルート、組"
"み込み名 :exc:`Exception` (Cでは :c:data:`PyExc_Exception` としてアクセス可"
"能)をルートとして派生したクラスオブジェクトを作成します。"

#: ../../c-api/exceptions.rst:382
msgid ""
"The :attr:`__module__` attribute of the new class is set to the first part "
"(up to the last dot) of the *name* argument, and the class name is set to "
"the last part (after the last dot).  The *base* argument can be used to "
"specify alternate base classes; it can either be only one class or a tuple "
"of classes. The *dict* argument can be used to specify a dictionary of class "
"variables and methods."
msgstr ""
"新しいクラスの :attr:`__module__` 属性は *name* 引数の前半部分(最後のドットま"
"で)に設定され、クラス名は後半部分(最後のドットの後)に設定されます。 *base* 引"
"数は代わりのベースクラスを指定するために使えます; 一つのクラスでも、クラスの"
"タプルでも構いません。 *dict* 引数はクラス変数とメソッドの辞書を指定するため"
"に使えます。"

#: ../../c-api/exceptions.rst:391
msgid ""
"Same as :c:func:`PyErr_NewException`, except that the new exception class "
"can easily be given a docstring: If *doc* is non-*NULL*, it will be used as "
"the docstring for the exception class."
msgstr ""
":c:func:`PyErr_NewException` とほぼ同じですが、新しい例外クラスに簡単に "
"docstring を設定できます。 *doc* が *NULL* で無い場合、それが例外クラスの "
"docstring になります。"

#: ../../c-api/exceptions.rst:400
msgid ""
"This utility function prints a warning message to ``sys.stderr`` when an "
"exception has been set but it is impossible for the interpreter to actually "
"raise the exception.  It is used, for example, when an exception occurs in "
"an :meth:`__del__` method."
msgstr ""
"例外が設定されているがインタプリタが実際に例外を発生させることができないとき"
"に、このユーティリティ関数は警告メッセージを ``sys.stderr`` へプリントしま"
"す。例えば、例外が :meth:`__del__` メソッドで発生したときに使われます。"

#: ../../c-api/exceptions.rst:405
msgid ""
"The function is called with a single argument *obj* that identifies the "
"context in which the unraisable exception occurred. If possible, the repr of "
"*obj* will be printed in the warning message."
msgstr ""
"発生させられない例外が起きたコンテキストを指し示す単一の引数 *obj* で関数が呼"
"び出されます。\n"
"可能な場合は、 *obj* の repr 文字列が警告メッセージに出力されます。"

#: ../../c-api/exceptions.rst:413
msgid "Unicode Exception Objects"
msgstr "Unicode 例外オブジェクト"

#: ../../c-api/exceptions.rst:415
msgid ""
"The following functions are used to create and modify Unicode exceptions "
"from C."
msgstr ""
"以下の関数は C言語から Unicode 例外を作ったり修正したりするために利用します。"

#: ../../c-api/exceptions.rst:419
msgid ""
"Create a :class:`UnicodeDecodeError` object with the attributes *encoding*, "
"*object*, *length*, *start*, *end* and *reason*."
msgstr ""
"*encoding*, *object*, *length*, *start*, *end*, *reason* 属性をもった :class:"
"`UnicodeDecodeError` オブジェクトを作成します。"

#: ../../c-api/exceptions.rst:424
msgid ""
"Create a :class:`UnicodeEncodeError` object with the attributes *encoding*, "
"*object*, *length*, *start*, *end* and *reason*."
msgstr ""
"*encoding*, *object*, *length*, *start*, *end*, *reason* 属性を持った :class:"
"`UnicodeEncodeError` オブジェクトを作成します。"

#: ../../c-api/exceptions.rst:429
msgid ""
"Create a :class:`UnicodeTranslateError` object with the attributes *object*, "
"*length*, *start*, *end* and *reason*."
msgstr ""
"*object*, *length*, *start*, *end*, *reason* 属性を持った :class:"
"`UnicodeTranslateError` オブジェクトを作成します。"

#: ../../c-api/exceptions.rst:435
msgid "Return the *encoding* attribute of the given exception object."
msgstr "与えられた例外オブジェクトの *encoding* 属性を返します。"

#: ../../c-api/exceptions.rst:441
msgid "Return the *object* attribute of the given exception object."
msgstr "与えられた例外オブジェクトの *object* 属性を返します。"

#: ../../c-api/exceptions.rst:447
msgid ""
"Get the *start* attribute of the given exception object and place it into "
"*\\*start*.  *start* must not be *NULL*.  Return ``0`` on success, ``-1`` on "
"failure."
msgstr ""
"渡された例外オブジェクトから *start* 属性を取得して *\\*start* に格納します。"
"*start* は *NULL* であってはなりません。成功したら ``0`` を、失敗したら "
"``-1`` を返します。"

#: ../../c-api/exceptions.rst:455
msgid ""
"Set the *start* attribute of the given exception object to *start*.  Return "
"``0`` on success, ``-1`` on failure."
msgstr ""
"渡された例外オブジェクトの *start* 属性を *start* に設定します。成功したら "
"``0`` を、失敗したら ``-1`` を返します。"

#: ../../c-api/exceptions.rst:462
msgid ""
"Get the *end* attribute of the given exception object and place it into "
"*\\*end*.  *end* must not be *NULL*.  Return ``0`` on success, ``-1`` on "
"failure."
msgstr ""
"渡された例外オブジェクトから *end* 属性を取得して *\\*end* に格納します。"
"*end* は *NULL* であってはなりません。成功したら ``0`` を、失敗したら ``-1`` "
"を返します。"

#: ../../c-api/exceptions.rst:470
msgid ""
"Set the *end* attribute of the given exception object to *end*.  Return "
"``0`` on success, ``-1`` on failure."
msgstr ""
"渡された例外オブジェクトの *end* 属性を *end* に設定します。成功したら ``0`` "
"を、失敗したら ``-1`` を返します。"

#: ../../c-api/exceptions.rst:477
msgid "Return the *reason* attribute of the given exception object."
msgstr "渡された例外オブジェクトの *reason* 属性を返します。"

#: ../../c-api/exceptions.rst:483
msgid ""
"Set the *reason* attribute of the given exception object to *reason*.  "
"Return ``0`` on success, ``-1`` on failure."
msgstr ""
"渡された例外オブジェクトの *reason* 属性を *reason* に設定します。成功したら "
"``0`` を、失敗したら ``-1`` を返します。"

#: ../../c-api/exceptions.rst:488
msgid "Recursion Control"
msgstr "再帰の管理"

#: ../../c-api/exceptions.rst:490
msgid ""
"These two functions provide a way to perform safe recursive calls at the C "
"level, both in the core and in extension modules.  They are needed if the "
"recursive code does not necessarily invoke Python code (which tracks its "
"recursion depth automatically)."
msgstr ""
"これら2つの関数は C レベルの再帰呼び出しを安全に実行する方法を、コアモジュー"
"ルにも拡張モジュールにも提供します。再帰を使ったコードが必ずしも Python コー"
"ドを実行するわけではない場合 (Python コードは再帰の深さを自動的に追跡しま"
"す)、これらの関数が必要となります。"

#: ../../c-api/exceptions.rst:497
msgid "Marks a point where a recursive C-level call is about to be performed."
msgstr "C レベルの再帰呼び出しをしようとしているところに印を付けます。"

#: ../../c-api/exceptions.rst:499
msgid ""
"If :const:`USE_STACKCHECK` is defined, this function checks if the OS stack "
"overflowed using :c:func:`PyOS_CheckStack`.  In this is the case, it sets a :"
"exc:`MemoryError` and returns a nonzero value."
msgstr ""
":const:`USE_STACKCHECK` が定義されている場合、 OS のスタックがオーバーフロー"
"がしたかどうかを :c:func:`PyOS_CheckStack` を使ってチェックします。もしオー"
"バーフローしているなら、 :exc:`MemoryError` をセットしゼロでない値を返しま"
"す。"

#: ../../c-api/exceptions.rst:503
msgid ""
"The function then checks if the recursion limit is reached.  If this is the "
"case, a :exc:`RuntimeError` is set and a nonzero value is returned. "
"Otherwise, zero is returned."
msgstr ""
"次にこの関数は再帰の上限に達していないかをチェックします。上限に達している場"
"合、 :exc:`RuntimeError` をセットしゼロでない値を返します。そうでない場合はゼ"
"ロを返します。"

#: ../../c-api/exceptions.rst:507
msgid ""
"*where* should be a string such as ``\" in instance check\"`` to be "
"concatenated to the :exc:`RuntimeError` message caused by the recursion "
"depth limit."
msgstr ""
"再帰の深さの上限に達して送出される :exc:`RuntimeError` のメッセージに連結でき"
"るよう *where* は ``\" in instance check\"`` のような文字列にしてください。"

#: ../../c-api/exceptions.rst:513
msgid ""
"Ends a :c:func:`Py_EnterRecursiveCall`.  Must be called once for each "
"*successful* invocation of :c:func:`Py_EnterRecursiveCall`."
msgstr ""
":c:func:`Py_EnterRecursiveCall` を終了させます。 :c:func:"
"`Py_EnterRecursiveCall` の *成功した* 呼び出しに対し 1 回呼ばなければなりませ"
"ん。"

#: ../../c-api/exceptions.rst:520
msgid "Standard Exceptions"
msgstr "標準例外"

#: ../../c-api/exceptions.rst:522
msgid ""
"All standard Python exceptions are available as global variables whose names "
"are ``PyExc_`` followed by the Python exception name.  These have the type :"
"c:type:`PyObject\\*`; they are all class objects.  For completeness, here "
"are all the variables:"
msgstr ""
"``PyExc_`` の後ろにPythonの例外名が続く名前をもつグローバル変数として、すべて"
"の標準Python例外が利用可能です。これらは型 :c:type:`PyObject\\*` を持ち、すべ"
"てクラスオブジェクトです。完璧を期するために、すべての変数を以下に列挙します:"

#: ../../c-api/exceptions.rst:570 ../../c-api/exceptions.rst:695
msgid "C Name"
msgstr "C名"

#: ../../c-api/exceptions.rst:570 ../../c-api/exceptions.rst:695
msgid "Python Name"
msgstr "Python名"

#: ../../c-api/exceptions.rst:570 ../../c-api/exceptions.rst:695
msgid "Notes"
msgstr "注釈"

#: ../../c-api/exceptions.rst:572
msgid ":c:data:`PyExc_BaseException`"
msgstr ":c:data:`PyExc_BaseException`"

#: ../../c-api/exceptions.rst:572
msgid ":exc:`BaseException`"
msgstr ":exc:`BaseException`"

#: ../../c-api/exceptions.rst:572
msgid "(1), (4)"
msgstr "(1), (4)"

#: ../../c-api/exceptions.rst:574
msgid ":c:data:`PyExc_Exception`"
msgstr ":c:data:`PyExc_Exception`"

#: ../../c-api/exceptions.rst:574
msgid ":exc:`Exception`"
msgstr ":exc:`Exception`"

#: ../../c-api/exceptions.rst:574 ../../c-api/exceptions.rst:576
#: ../../c-api/exceptions.rst:578 ../../c-api/exceptions.rst:586
#: ../../c-api/exceptions.rst:606 ../../c-api/exceptions.rst:697
msgid "\\(1)"
msgstr "\\(1)"

#: ../../c-api/exceptions.rst:576
msgid ":c:data:`PyExc_StandardError`"
msgstr ":c:data:`PyExc_StandardError`"

#: ../../c-api/exceptions.rst:576
msgid ":exc:`StandardError`"
msgstr ":exc:`StandardError`"

#: ../../c-api/exceptions.rst:578
msgid ":c:data:`PyExc_ArithmeticError`"
msgstr ":c:data:`PyExc_ArithmeticError`"

#: ../../c-api/exceptions.rst:578
msgid ":exc:`ArithmeticError`"
msgstr ":exc:`ArithmeticError`"

#: ../../c-api/exceptions.rst:580
msgid ":c:data:`PyExc_AssertionError`"
msgstr ":c:data:`PyExc_AssertionError`"

#: ../../c-api/exceptions.rst:580
msgid ":exc:`AssertionError`"
msgstr ":exc:`AssertionError`"

#: ../../c-api/exceptions.rst:582
msgid ":c:data:`PyExc_AttributeError`"
msgstr ":c:data:`PyExc_AttributeError`"

#: ../../c-api/exceptions.rst:582
msgid ":exc:`AttributeError`"
msgstr ":exc:`AttributeError`"

#: ../../c-api/exceptions.rst:584
msgid ":c:data:`PyExc_BufferError`"
msgstr ":c:data:`PyExc_BufferError`"

#: ../../c-api/exceptions.rst:584
msgid ":exc:`BufferError`"
msgstr ":exc:`BufferError`"

#: ../../c-api/exceptions.rst:586
msgid ":c:data:`PyExc_EnvironmentError`"
msgstr ":c:data:`PyExc_EnvironmentError`"

#: ../../c-api/exceptions.rst:586
msgid ":exc:`EnvironmentError`"
msgstr ":exc:`EnvironmentError`"

#: ../../c-api/exceptions.rst:588
msgid ":c:data:`PyExc_EOFError`"
msgstr ":c:data:`PyExc_EOFError`"

#: ../../c-api/exceptions.rst:588
msgid ":exc:`EOFError`"
msgstr ":exc:`EOFError`"

#: ../../c-api/exceptions.rst:590
msgid ":c:data:`PyExc_FloatingPointError`"
msgstr ":c:data:`PyExc_FloatingPointError`"

#: ../../c-api/exceptions.rst:590
msgid ":exc:`FloatingPointError`"
msgstr ":exc:`FloatingPointError`"

#: ../../c-api/exceptions.rst:592
msgid ":c:data:`PyExc_GeneratorExit`"
msgstr ":c:data:`PyExc_GeneratorExit`"

#: ../../c-api/exceptions.rst:592
msgid ":exc:`GeneratorExit`"
msgstr ":exc:`GeneratorExit`"

#: ../../c-api/exceptions.rst:594
msgid ":c:data:`PyExc_ImportError`"
msgstr ":c:data:`PyExc_ImportError`"

#: ../../c-api/exceptions.rst:594
msgid ":exc:`ImportError`"
msgstr ":exc:`ImportError`"

#: ../../c-api/exceptions.rst:596
msgid ":c:data:`PyExc_IndentationError`"
msgstr ":c:data:`PyExc_IndentationError`"

#: ../../c-api/exceptions.rst:596
msgid ":exc:`IndentationError`"
msgstr ":exc:`IndentationError`"

#: ../../c-api/exceptions.rst:598
msgid ":c:data:`PyExc_IndexError`"
msgstr ":c:data:`PyExc_IndexError`"

#: ../../c-api/exceptions.rst:598
msgid ":exc:`IndexError`"
msgstr ":exc:`IndexError`"

#: ../../c-api/exceptions.rst:600
msgid ":c:data:`PyExc_IOError`"
msgstr ":c:data:`PyExc_IOError`"

#: ../../c-api/exceptions.rst:600
msgid ":exc:`IOError`"
msgstr ":exc:`IOError`"

#: ../../c-api/exceptions.rst:602
msgid ":c:data:`PyExc_KeyError`"
msgstr ":c:data:`PyExc_KeyError`"

#: ../../c-api/exceptions.rst:602
msgid ":exc:`KeyError`"
msgstr ":exc:`KeyError`"

#: ../../c-api/exceptions.rst:604
msgid ":c:data:`PyExc_KeyboardInterrupt`"
msgstr ":c:data:`PyExc_KeyboardInterrupt`"

#: ../../c-api/exceptions.rst:604
msgid ":exc:`KeyboardInterrupt`"
msgstr ":exc:`KeyboardInterrupt`"

#: ../../c-api/exceptions.rst:606
msgid ":c:data:`PyExc_LookupError`"
msgstr ":c:data:`PyExc_LookupError`"

#: ../../c-api/exceptions.rst:606
msgid ":exc:`LookupError`"
msgstr ":exc:`LookupError`"

#: ../../c-api/exceptions.rst:608
msgid ":c:data:`PyExc_MemoryError`"
msgstr ":c:data:`PyExc_MemoryError`"

#: ../../c-api/exceptions.rst:608
msgid ":exc:`MemoryError`"
msgstr ":exc:`MemoryError`"

#: ../../c-api/exceptions.rst:610
msgid ":c:data:`PyExc_NameError`"
msgstr ":c:data:`PyExc_NameError`"

#: ../../c-api/exceptions.rst:610
msgid ":exc:`NameError`"
msgstr ":exc:`NameError`"

#: ../../c-api/exceptions.rst:612
msgid ":c:data:`PyExc_NotImplementedError`"
msgstr ":c:data:`PyExc_NotImplementedError`"

#: ../../c-api/exceptions.rst:612
msgid ":exc:`NotImplementedError`"
msgstr ":exc:`NotImplementedError`"

#: ../../c-api/exceptions.rst:614
msgid ":c:data:`PyExc_OSError`"
msgstr ":c:data:`PyExc_OSError`"

#: ../../c-api/exceptions.rst:614
msgid ":exc:`OSError`"
msgstr ":exc:`OSError`"

#: ../../c-api/exceptions.rst:616
msgid ":c:data:`PyExc_OverflowError`"
msgstr ":c:data:`PyExc_OverflowError`"

#: ../../c-api/exceptions.rst:616
msgid ":exc:`OverflowError`"
msgstr ":exc:`OverflowError`"

#: ../../c-api/exceptions.rst:618
msgid ":c:data:`PyExc_ReferenceError`"
msgstr ":c:data:`PyExc_ReferenceError`"

#: ../../c-api/exceptions.rst:618
msgid ":exc:`ReferenceError`"
msgstr ":exc:`ReferenceError`"

#: ../../c-api/exceptions.rst:618
msgid "\\(2)"
msgstr "\\(2)"

#: ../../c-api/exceptions.rst:620
msgid ":c:data:`PyExc_RuntimeError`"
msgstr ":c:data:`PyExc_RuntimeError`"

#: ../../c-api/exceptions.rst:620
msgid ":exc:`RuntimeError`"
msgstr ":exc:`RuntimeError`"

#: ../../c-api/exceptions.rst:622
msgid ":c:data:`PyExc_StopIteration`"
msgstr ":c:data:`PyExc_StopIteration`"

#: ../../c-api/exceptions.rst:622
msgid ":exc:`StopIteration`"
msgstr ":exc:`StopIteration`"

#: ../../c-api/exceptions.rst:624
msgid ":c:data:`PyExc_SyntaxError`"
msgstr ":c:data:`PyExc_SyntaxError`"

#: ../../c-api/exceptions.rst:624
msgid ":exc:`SyntaxError`"
msgstr ":exc:`SyntaxError`"

#: ../../c-api/exceptions.rst:626
msgid ":c:data:`PyExc_SystemError`"
msgstr ":c:data:`PyExc_SystemError`"

#: ../../c-api/exceptions.rst:626
msgid ":exc:`SystemError`"
msgstr ":exc:`SystemError`"

#: ../../c-api/exceptions.rst:628
msgid ":c:data:`PyExc_SystemExit`"
msgstr ":c:data:`PyExc_SystemExit`"

#: ../../c-api/exceptions.rst:628
msgid ":exc:`SystemExit`"
msgstr ":exc:`SystemExit`"

#: ../../c-api/exceptions.rst:630
msgid ":c:data:`PyExc_TabError`"
msgstr ":c:data:`PyExc_TabError`"

#: ../../c-api/exceptions.rst:630
msgid ":exc:`TabError`"
msgstr ":exc:`TabError`"

#: ../../c-api/exceptions.rst:632
msgid ":c:data:`PyExc_TypeError`"
msgstr ":c:data:`PyExc_TypeError`"

#: ../../c-api/exceptions.rst:632
msgid ":exc:`TypeError`"
msgstr ":exc:`TypeError`"

#: ../../c-api/exceptions.rst:634
msgid ":c:data:`PyExc_UnboundLocalError`"
msgstr ":c:data:`PyExc_UnboundLocalError`"

#: ../../c-api/exceptions.rst:634
msgid ":exc:`UnboundLocalError`"
msgstr ":exc:`UnboundLocalError`"

#: ../../c-api/exceptions.rst:636
msgid ":c:data:`PyExc_UnicodeDecodeError`"
msgstr ":c:data:`PyExc_UnicodeDecodeError`"

#: ../../c-api/exceptions.rst:636
msgid ":exc:`UnicodeDecodeError`"
msgstr ":exc:`UnicodeDecodeError`"

#: ../../c-api/exceptions.rst:638
msgid ":c:data:`PyExc_UnicodeEncodeError`"
msgstr ":c:data:`PyExc_UnicodeEncodeError`"

#: ../../c-api/exceptions.rst:638
msgid ":exc:`UnicodeEncodeError`"
msgstr ":exc:`UnicodeEncodeError`"

#: ../../c-api/exceptions.rst:640
msgid ":c:data:`PyExc_UnicodeError`"
msgstr ":c:data:`PyExc_UnicodeError`"

#: ../../c-api/exceptions.rst:640
msgid ":exc:`UnicodeError`"
msgstr ":exc:`UnicodeError`"

#: ../../c-api/exceptions.rst:642
msgid ":c:data:`PyExc_UnicodeTranslateError`"
msgstr ":c:data:`PyExc_UnicodeTranslateError`"

#: ../../c-api/exceptions.rst:642
msgid ":exc:`UnicodeTranslateError`"
msgstr ":exc:`UnicodeTranslateError`"

#: ../../c-api/exceptions.rst:644
msgid ":c:data:`PyExc_VMSError`"
msgstr ""

#: ../../c-api/exceptions.rst:644
msgid ":exc:`VMSError`"
msgstr ""

#: ../../c-api/exceptions.rst:644
msgid "\\(5)"
msgstr "\\(5)"

#: ../../c-api/exceptions.rst:646
msgid ":c:data:`PyExc_ValueError`"
msgstr ":c:data:`PyExc_ValueError`"

#: ../../c-api/exceptions.rst:646
msgid ":exc:`ValueError`"
msgstr ":exc:`ValueError`"

#: ../../c-api/exceptions.rst:648
msgid ":c:data:`PyExc_WindowsError`"
msgstr ":c:data:`PyExc_WindowsError`"

#: ../../c-api/exceptions.rst:648
msgid ":exc:`WindowsError`"
msgstr ":exc:`WindowsError`"

#: ../../c-api/exceptions.rst:648
msgid "\\(3)"
msgstr "\\(3)"

#: ../../c-api/exceptions.rst:650
msgid ":c:data:`PyExc_ZeroDivisionError`"
msgstr ":c:data:`PyExc_ZeroDivisionError`"

#: ../../c-api/exceptions.rst:650
msgid ":exc:`ZeroDivisionError`"
msgstr ":exc:`ZeroDivisionError`"

#: ../../c-api/exceptions.rst:653 ../../c-api/exceptions.rst:718
msgid "Notes:"
msgstr "注釈:"

#: ../../c-api/exceptions.rst:656
msgid "This is a base class for other standard exceptions."
msgstr "これは別の標準例外のためのベースクラスです。"

#: ../../c-api/exceptions.rst:659
msgid "This is the same as :exc:`weakref.ReferenceError`."
msgstr "これは :exc:`weakref.ReferenceError` と同じです。"

#: ../../c-api/exceptions.rst:662
msgid ""
"Only defined on Windows; protect code that uses this by testing that the "
"preprocessor macro ``MS_WINDOWS`` is defined."
msgstr ""
"Windowsでのみ定義されています。プリプロセッサマクロ ``MS_WINDOWS`` が定義され"
"ているかテストすることで、これを使うコードを保護してください。"

#: ../../c-api/exceptions.rst:669
msgid ""
"Only defined on VMS; protect code that uses this by testing that the "
"preprocessor macro ``__VMS`` is defined."
msgstr ""

#: ../../c-api/exceptions.rst:675
msgid "Standard Warning Categories"
msgstr "標準警告カテゴリ"

#: ../../c-api/exceptions.rst:677
msgid ""
"All standard Python warning categories are available as global variables "
"whose names are ``PyExc_`` followed by the Python exception name. These have "
"the type :c:type:`PyObject\\*`; they are all class objects. For "
"completeness, here are all the variables:"
msgstr ""
"``PyExc_`` の後ろにPythonの例外名が続く名前をもつグローバル変数として、すべて"
"の標準Python警告カテゴリが利用可能です。これらは型 :c:type:`PyObject\\*` を持"
"ち、すべてクラスオブジェクトです。完璧を期するために、すべての変数を以下に列"
"挙します:"

#: ../../c-api/exceptions.rst:697
msgid ":c:data:`PyExc_Warning`"
msgstr ":c:data:`PyExc_Warning`"

#: ../../c-api/exceptions.rst:697
msgid ":exc:`Warning`"
msgstr ":exc:`Warning`"

#: ../../c-api/exceptions.rst:699
msgid ":c:data:`PyExc_BytesWarning`"
msgstr ":c:data:`PyExc_BytesWarning`"

#: ../../c-api/exceptions.rst:699
msgid ":exc:`BytesWarning`"
msgstr ":exc:`BytesWarning`"

#: ../../c-api/exceptions.rst:701
msgid ":c:data:`PyExc_DeprecationWarning`"
msgstr ":c:data:`PyExc_DeprecationWarning`"

#: ../../c-api/exceptions.rst:701
msgid ":exc:`DeprecationWarning`"
msgstr ":exc:`DeprecationWarning`"

#: ../../c-api/exceptions.rst:703
msgid ":c:data:`PyExc_FutureWarning`"
msgstr ":c:data:`PyExc_FutureWarning`"

#: ../../c-api/exceptions.rst:703
msgid ":exc:`FutureWarning`"
msgstr ":exc:`FutureWarning`"

#: ../../c-api/exceptions.rst:705
msgid ":c:data:`PyExc_ImportWarning`"
msgstr ":c:data:`PyExc_ImportWarning`"

#: ../../c-api/exceptions.rst:705
msgid ":exc:`ImportWarning`"
msgstr ":exc:`ImportWarning`"

#: ../../c-api/exceptions.rst:707
msgid ":c:data:`PyExc_PendingDeprecationWarning`"
msgstr ":c:data:`PyExc_PendingDeprecationWarning`"

#: ../../c-api/exceptions.rst:707
msgid ":exc:`PendingDeprecationWarning`"
msgstr ":exc:`PendingDeprecationWarning`"

#: ../../c-api/exceptions.rst:709
msgid ":c:data:`PyExc_RuntimeWarning`"
msgstr ":c:data:`PyExc_RuntimeWarning`"

#: ../../c-api/exceptions.rst:709
msgid ":exc:`RuntimeWarning`"
msgstr ":exc:`RuntimeWarning`"

#: ../../c-api/exceptions.rst:711
msgid ":c:data:`PyExc_SyntaxWarning`"
msgstr ":c:data:`PyExc_SyntaxWarning`"

#: ../../c-api/exceptions.rst:711
msgid ":exc:`SyntaxWarning`"
msgstr ":exc:`SyntaxWarning`"

#: ../../c-api/exceptions.rst:713
msgid ":c:data:`PyExc_UnicodeWarning`"
msgstr ":c:data:`PyExc_UnicodeWarning`"

#: ../../c-api/exceptions.rst:713
msgid ":exc:`UnicodeWarning`"
msgstr ":exc:`UnicodeWarning`"

#: ../../c-api/exceptions.rst:715
msgid ":c:data:`PyExc_UserWarning`"
msgstr ":c:data:`PyExc_UserWarning`"

#: ../../c-api/exceptions.rst:715
msgid ":exc:`UserWarning`"
msgstr ":exc:`UserWarning`"

#: ../../c-api/exceptions.rst:721
msgid "This is a base class for other standard warning categories."
msgstr "これは別の標準警告カテゴリのためのベースクラスです。"

#: ../../c-api/exceptions.rst:724
msgid "String Exceptions"
msgstr "文字列の例外"

#: ../../c-api/exceptions.rst:726
msgid ""
"All exceptions to be raised or caught must be derived from :exc:"
"`BaseException`. Trying to raise a string exception now raises :exc:"
"`TypeError`."
msgstr ""
"発生したりキャッチされる全ての例外は :exc:`BaseException` を継承しなければな"
"りません。文字列例外を発生させようとすると :exc:`TypeError` が発生されます。"
