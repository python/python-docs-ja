# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/sys.rst:6
msgid "Operating System Utilities"
msgstr "オペレーティングシステム関連のユーティリティ"

#: ../../c-api/sys.rst:10
msgid ""
"Return the file system representation for *path*. If the object is a :class:"
"`str` or :class:`bytes` object, then its reference count is incremented. If "
"the object implements the :class:`os.PathLike` interface, then :meth:`~os."
"PathLike.__fspath__` is returned as long as it is a :class:`str` or :class:"
"`bytes` object. Otherwise :exc:`TypeError` is raised and ``NULL`` is "
"returned."
msgstr ""
"*path* のファイルシステム表現を返します。オブジェクトが :class:`str` か :"
"class:`bytes` の場合は、その参照カウンタがインクリメントされます。オブジェク"
"トが :class:`os.PathLike` インターフェースを実装している場合、:meth:`~os."
"PathLike.__fspath__` が呼び出され、その結果が :class:`str` が :class:`bytes` "
"であればその値が返されます。さもなければ、:exc:`TypeError` が送出され、"
"``NULL`` が返されます。"

#: ../../c-api/sys.rst:22
msgid ""
"Return true (nonzero) if the standard I/O file *fp* with name *filename* is "
"deemed interactive.  This is the case for files for which "
"``isatty(fileno(fp))`` is true.  If the global flag :c:data:"
"`Py_InteractiveFlag` is true, this function also returns true if the "
"*filename* pointer is ``NULL`` or if the name is equal to one of the strings "
"``'<stdin>'`` or ``'???'``."
msgstr ""
"*filename* という名前の標準 I/O ファイル *fp* が対話的 (interactive) であると"
"考えられる場合に真 (非ゼロ) を返します。これは ``isatty(fileno(fp))`` が真に"
"なるファイルの場合です。グローバルなフラグ :c:data:`Py_InteractiveFlag` が真"
"の場合には、 *filename* ポインタが ``NULL`` か、名前が ``'<stdin>'`` または "
"``'???'`` のいずれかに等しい場合にも真を返します。"

#: ../../c-api/sys.rst:31
msgid ""
"Function to prepare some internal state before a process fork.  This should "
"be called before calling :c:func:`fork` or any similar function that clones "
"the current process. Only available on systems where :c:func:`fork` is "
"defined."
msgstr ""
"プロセスがフォークする前に、いくつかの内部状態を準備するための関数です。:c:"
"func:`fork` や現在のプロセスを複製するその他の類似の関数を呼び出す前にこの関"
"数を呼びださなければなりません。:c:func:`fork` が定義されているシステムでのみ"
"利用できます。"

#: ../../c-api/sys.rst:37
msgid ""
"The C :c:func:`fork` call should only be made from the :ref:`\"main\" thread "
"<fork-and-threads>` (of the :ref:`\"main\" interpreter <sub-interpreter-"
"support>`).  The same is true for ``PyOS_BeforeFork()``."
msgstr ""

#: ../../c-api/sys.rst:47
msgid ""
"Function to update some internal state after a process fork.  This should be "
"called from the parent process after calling :c:func:`fork` or any similar "
"function that clones the current process, regardless of whether process "
"cloning was successful. Only available on systems where :c:func:`fork` is "
"defined."
msgstr ""
"プロセスがフォークした後に内部状態を更新するための関数です。 :c:func:`fork` "
"や、現在のプロセスを複製するその他の類似の関数を呼び出した後に、プロセスの複"
"製が成功したかどうかにかかわらず、親プロセスからこの関数を呼び出さなければな"
"りません。:c:func:`fork` が定義されているシステムでのみ利用できます。"

#: ../../c-api/sys.rst:54
msgid ""
"The C :c:func:`fork` call should only be made from the :ref:`\"main\" thread "
"<fork-and-threads>` (of the :ref:`\"main\" interpreter <sub-interpreter-"
"support>`).  The same is true for ``PyOS_AfterFork_Parent()``."
msgstr ""

#: ../../c-api/sys.rst:64
msgid ""
"Function to update internal interpreter state after a process fork. This "
"must be called from the child process after calling :c:func:`fork`, or any "
"similar function that clones the current process, if there is any chance the "
"process will call back into the Python interpreter. Only available on "
"systems where :c:func:`fork` is defined."
msgstr ""

#: ../../c-api/sys.rst:71
msgid ""
"The C :c:func:`fork` call should only be made from the :ref:`\"main\" thread "
"<fork-and-threads>` (of the :ref:`\"main\" interpreter <sub-interpreter-"
"support>`).  The same is true for ``PyOS_AfterFork_Child()``."
msgstr ""

#: ../../c-api/sys.rst:79
msgid ""
":func:`os.register_at_fork` allows registering custom Python functions to be "
"called by :c:func:`PyOS_BeforeFork()`, :c:func:`PyOS_AfterFork_Parent` and  :"
"c:func:`PyOS_AfterFork_Child`."
msgstr ""
":func:`os.register_at_fork` を利用すると :c:func:`PyOS_BeforeFork()`、:c:"
"func:`PyOS_AfterFork_Parent` :c:func:`PyOS_AfterFork_Child` によって呼び出さ"
"れるカスタムのPython関数を登録できます。"

#: ../../c-api/sys.rst:86
msgid ""
"Function to update some internal state after a process fork; this should be "
"called in the new process if the Python interpreter will continue to be "
"used. If a new executable is loaded into the new process, this function does "
"not need to be called."
msgstr ""
"プロセスが fork した後の内部状態を更新するための関数です; fork 後 Python イン"
"タプリタを使い続ける場合、新たなプロセス内でこの関数を呼び出さねばなりませ"
"ん。新たなプロセスに新たな実行可能物をロードする場合、この関数を呼び出す必要"
"はありません。"

#: ../../c-api/sys.rst:91
msgid "This function is superseded by :c:func:`PyOS_AfterFork_Child()`."
msgstr ""
"この関数は :c:func:`PyOS_AfterFork_Child()` によって置き換えられました。"

#: ../../c-api/sys.rst:97
msgid ""
"Return true when the interpreter runs out of stack space.  This is a "
"reliable check, but is only available when :const:`USE_STACKCHECK` is "
"defined (currently on Windows using the Microsoft Visual C++ compiler).  :"
"const:`USE_STACKCHECK` will be defined automatically; you should never "
"change the definition in your own code."
msgstr ""
"インタプリタがスタック空間を使い尽くしたときに真を返します。このチェック関数"
"には信頼性がありますが、 :const:`USE_STACKCHECK` が定義されている場合 (現状で"
"は Microsoft Visual C++ コンパイラでビルドした Windows 版) にしか利用できませ"
"ん . :const:`USE_STACKCHECK` は自動的に定義されます; 自前のコードでこの定義を"
"変更してはなりません。"

#: ../../c-api/sys.rst:106
msgid ""
"Return the current signal handler for signal *i*.  This is a thin wrapper "
"around either :c:func:`sigaction` or :c:func:`signal`.  Do not call those "
"functions directly! :c:type:`PyOS_sighandler_t` is a typedef alias for :c:"
"expr:`void (\\*)(int)`."
msgstr ""
"シグナル *i* に対する現在のシグナルハンドラを返します。この関数は :c:func:"
"`sigaction` または :c:func:`signal` のいずれかに対する薄いラッパーです。 :c:"
"func:`sigaction` や :c:func:`signal` を直接呼び出してはなりません! :c:type:"
"`PyOS_sighandler_t` は :c:expr:`void (\\*)(int)` の typedef  による別名です。"

#: ../../c-api/sys.rst:114
msgid ""
"Set the signal handler for signal *i* to be *h*; return the old signal "
"handler. This is a thin wrapper around either :c:func:`sigaction` or :c:func:"
"`signal`.  Do not call those functions directly!  :c:type:"
"`PyOS_sighandler_t` is a typedef alias for :c:expr:`void (\\*)(int)`."
msgstr ""
"シグナル *i* に対する現在のシグナルハンドラを *h* に設定します; 以前のシグナ"
"ルハンドラを返します。この関数は :c:func:`sigaction` または :c:func:`signal` "
"のいずれかに対する薄いラッパーです。 :c:func:`sigaction` や :c:func:`signal` "
"を直接呼び出してはなりません!  :c:type:`PyOS_sighandler_t` は :c:expr:`void "
"(\\*)(int)` の typedef  による別名です。"

#: ../../c-api/sys.rst:122
msgid ""
"This function should not be called directly: use the :c:type:`PyConfig` API "
"with the :c:func:`PyConfig_SetBytesString` function which ensures that :ref:"
"`Python is preinitialized <c-preinit>`."
msgstr ""

#: ../../c-api/sys.rst:126 ../../c-api/sys.rst:193
msgid ""
"This function must not be called before :ref:`Python is preinitialized <c-"
"preinit>` and so that the LC_CTYPE locale is properly configured: see the :c:"
"func:`Py_PreInitialize` function."
msgstr ""

#: ../../c-api/sys.rst:130
msgid ""
"Decode a byte string from the :term:`filesystem encoding and error handler`. "
"If the error handler is :ref:`surrogateescape error handler "
"<surrogateescape>`, undecodable bytes are decoded as characters in range "
"U+DC80..U+DCFF; and if a byte sequence can be decoded as a surrogate "
"character, the bytes are escaped using the surrogateescape error handler "
"instead of decoding them."
msgstr ""
":term:`ファイルシステムのエンコーディングとエラーハンドラ <filesystem "
"encoding and error handler>` からバイト文字列をデコードします。エラーハンドラ"
"が :ref:`surrogateescape エラーハンドラ <surrogateescape>` なら、\n"
"デコードできないバイトは U+DC80 から U+DCFF までの範囲の文字としてデコードさ"
"れ、バイト列がサロゲート文字としてデコードできる場合は、デコードするのではな"
"く surrogateescape エラーハンドラを使ってバイト列がエスケープされます。"

#: ../../c-api/sys.rst:137
msgid ""
"Return a pointer to a newly allocated wide character string, use :c:func:"
"`PyMem_RawFree` to free the memory. If size is not ``NULL``, write the "
"number of wide characters excluding the null character into ``*size``"
msgstr ""
"新しくメモリ確保されたワイドキャラクター文字列へのポインタを返します。\n"
"このメモリを解放するのには :c:func:`PyMem_RawFree` を使ってください。\n"
"引数 size が ``NULL`` でない場合は、 null 文字以外のワイドキャラクターの数を "
"``*size`` へ書き込みます。"

#: ../../c-api/sys.rst:141
msgid ""
"Return ``NULL`` on decoding error or memory allocation error. If *size* is "
"not ``NULL``, ``*size`` is set to ``(size_t)-1`` on memory error or set to "
"``(size_t)-2`` on decoding error."
msgstr ""
"デコードもしくはメモリ確保でエラーが起きると ``NULL`` を返します。\n"
"*size* が ``NULL`` でない場合は、メモリエラーのときは ``(size_t)-1`` を、デ"
"コードでのエラーのときは ``(size_t)-2`` を ``*size`` に設定します。"

#: ../../c-api/sys.rst:145 ../../c-api/sys.rst:185
msgid ""
"The :term:`filesystem encoding and error handler` are selected by :c:func:"
"`PyConfig_Read`: see :c:member:`~PyConfig.filesystem_encoding` and :c:member:"
"`~PyConfig.filesystem_errors` members of :c:type:`PyConfig`."
msgstr ""

#: ../../c-api/sys.rst:149
msgid ""
"Decoding errors should never happen, unless there is a bug in the C library."
msgstr "C ライブラリーにバグがない限り、デコードでのエラーは起こりえません。"

#: ../../c-api/sys.rst:152
msgid ""
"Use the :c:func:`Py_EncodeLocale` function to encode the character string "
"back to a byte string."
msgstr ""
"キャラクター文字列をバイト文字列に戻すには :c:func:`Py_EncodeLocale` 関数を"
"使ってください。"

#: ../../c-api/sys.rst:157
msgid ""
"The :c:func:`PyUnicode_DecodeFSDefaultAndSize` and :c:func:"
"`PyUnicode_DecodeLocaleAndSize` functions."
msgstr ""
":c:func:`PyUnicode_DecodeFSDefaultAndSize` および :c:func:"
"`PyUnicode_DecodeLocaleAndSize` 関数。"

#: ../../c-api/sys.rst:162 ../../c-api/sys.rst:204
msgid ""
"The function now uses the UTF-8 encoding in the :ref:`Python UTF-8 Mode "
"<utf8-mode>`."
msgstr ""
"この関数は、:ref:`Python UTF-8 Mode <utf8-mode>` ではUTF-8エンコーディングを"
"利用するようになりました。"

#: ../../c-api/sys.rst:166
msgid ""
"The function now uses the UTF-8 encoding on Windows if :c:data:"
"`Py_LegacyWindowsFSEncodingFlag` is zero;"
msgstr ""

#: ../../c-api/sys.rst:173
msgid ""
"Encode a wide character string to the :term:`filesystem encoding and error "
"handler`. If the error handler is :ref:`surrogateescape error handler "
"<surrogateescape>`, surrogate characters in the range U+DC80..U+DCFF are "
"converted to bytes 0x80..0xFF."
msgstr ""
"ワイドキャラクター文字列を :term:`ファイルシステムのエンコーディングとエラー"
"ハンドラ <filesystem encoding and error handler>` にエンコードします。エラー"
"ハンドラが :ref:`surrogateescape エラーハンドラ <surrogateescape>` なら、\n"
"U+DC80 から U+DCFF までの範囲のサロゲート文字は 0x80 から 0xFF までのバイトに"
"変換されます。"

#: ../../c-api/sys.rst:178
msgid ""
"Return a pointer to a newly allocated byte string, use :c:func:`PyMem_Free` "
"to free the memory. Return ``NULL`` on encoding error or memory allocation "
"error."
msgstr ""
"新しくメモリ確保されたバイト文字列へのポインタを返します。\n"
"このメモリを解放するのには :c:func:`PyMem_Free` を使ってください。\n"
"エンコードエラーかメモリ確保エラーのときは ``NULL`` を返します。"

#: ../../c-api/sys.rst:182
msgid ""
"If error_pos is not ``NULL``, ``*error_pos`` is set to ``(size_t)-1`` on "
"success,  or set to the index of the invalid character on encoding error."
msgstr ""

#: ../../c-api/sys.rst:189
msgid ""
"Use the :c:func:`Py_DecodeLocale` function to decode the bytes string back "
"to a wide character string."
msgstr ""
"バイト文字列をワイドキャラクター文字列に戻すには :c:func:`Py_DecodeLocale` 関"
"数を使ってください。"

#: ../../c-api/sys.rst:199
msgid ""
"The :c:func:`PyUnicode_EncodeFSDefault` and :c:func:`PyUnicode_EncodeLocale` "
"functions."
msgstr ""
":c:func:`PyUnicode_EncodeFSDefault` および :c:func:`PyUnicode_EncodeLocale` "
"関数。"

#: ../../c-api/sys.rst:208
msgid ""
"The function now uses the UTF-8 encoding on Windows if :c:data:"
"`Py_LegacyWindowsFSEncodingFlag` is zero."
msgstr ""

#: ../../c-api/sys.rst:216
msgid "System Functions"
msgstr "システム関数"

#: ../../c-api/sys.rst:218
msgid ""
"These are utility functions that make functionality from the :mod:`sys` "
"module accessible to C code.  They all work with the current interpreter "
"thread's :mod:`sys` module's dict, which is contained in the internal thread "
"state structure."
msgstr ""
":mod:`sys` モジュールが提供している機能にCのコードからアクセスする関数です。"
"すべての関数は現在のインタプリタスレッドの :mod:`sys` モジュールの辞書に対し"
"て動作します。この辞書は内部のスレッド状態構造体に格納されています。"

#: ../../c-api/sys.rst:224
msgid ""
"Return the object *name* from the :mod:`sys` module or ``NULL`` if it does "
"not exist, without setting an exception."
msgstr ""
":mod:`sys` モジュールの *name* オブジェクトを返すか、存在しなければ例外を設定"
"せずに ``NULL`` を返します。"

#: ../../c-api/sys.rst:229
msgid ""
"Set *name* in the :mod:`sys` module to *v* unless *v* is ``NULL``, in which "
"case *name* is deleted from the sys module. Returns ``0`` on success, ``-1`` "
"on error."
msgstr ""
"*v* が ``NULL`` で無い場合、 :mod:`sys` モジュールの *name* に *v* を設定しま"
"す。 *v* が ``NULL`` なら、 sys モジュールから *name* を削除します。成功した"
"ら ``0`` を、エラー時は ``-1`` を返します。"

#: ../../c-api/sys.rst:235
msgid ""
"Reset :data:`sys.warnoptions` to an empty list. This function may be called "
"prior to :c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/sys.rst:240
msgid ""
"Append *s* to :data:`sys.warnoptions`. This function must be called prior "
"to :c:func:`Py_Initialize` in order to affect the warnings filter list."
msgstr ""

#: ../../c-api/sys.rst:245
msgid "Append *unicode* to :data:`sys.warnoptions`."
msgstr ":data:`sys.warnoptions` に *unicode* を追加します。"

#: ../../c-api/sys.rst:247
msgid ""
"Note: this function is not currently usable from outside the CPython "
"implementation, as it must be called prior to the implicit import of :mod:"
"`warnings` in :c:func:`Py_Initialize` to be effective, but can't be called "
"until enough of the runtime has been initialized to permit the creation of "
"Unicode objects."
msgstr ""

#: ../../c-api/sys.rst:255
msgid ""
"Set :data:`sys.path` to a list object of paths found in *path* which should "
"be a list of paths separated with the platform's search path delimiter (``:"
"`` on Unix, ``;`` on Windows)."
msgstr ""
":data:`sys.path` を *path* に含まれるパスの、リストオブジェクトに設定しま"
"す。 *path* はプラットフォームの検索パスデリミタ(Unixでは ``:``, Windows で"
"は ``;``) で区切られたパスのリストでなければなりません。"

#: ../../c-api/sys.rst:261
msgid ""
"Write the output string described by *format* to :data:`sys.stdout`.  No "
"exceptions are raised, even if truncation occurs (see below)."
msgstr ""
"*format* で指定された出力文字列を :data:`sys.stdout` に出力します。切り詰めが"
"起こった場合を含め、例外は一切発生しません (後述)。"

#: ../../c-api/sys.rst:264
msgid ""
"*format* should limit the total size of the formatted output string to 1000 "
"bytes or less -- after 1000 bytes, the output string is truncated. In "
"particular, this means that no unrestricted \"%s\" formats should occur; "
"these should be limited using \"%.<N>s\" where <N> is a decimal number "
"calculated so that <N> plus the maximum size of other formatted text does "
"not exceed 1000 bytes.  Also watch out for \"%f\", which can print hundreds "
"of digits for very large numbers."
msgstr ""
"*format* は、フォーマット後の出力文字列のトータルの大きさを1000バイト以下に抑"
"えるべきです。-- 1000 バイト以降の出力文字列は切り詰められます。特に、制限の"
"ない \"%s\" フォーマットを使うべきではありません。\"%.<N>s\" のようにして N "
"に10進数の値を指定し、<N> + その他のフォーマット後の最大サイズが1000を超えな"
"いように設定するべきです。同じように \"%f\" にも気を付ける必要があります。非"
"常に大きい数値に対して、数百の数字を出力する可能性があります。"

#: ../../c-api/sys.rst:272
msgid ""
"If a problem occurs, or :data:`sys.stdout` is unset, the formatted message "
"is written to the real (C level) *stdout*."
msgstr ""
"問題が発生したり、 :data:`sys.stdout` が設定されていなかった場合、フォーマッ"
"ト後のメッセージは本物の(Cレベルの) *stdout* に出力されます。"

#: ../../c-api/sys.rst:277
msgid ""
"As :c:func:`PySys_WriteStdout`, but write to :data:`sys.stderr` or *stderr* "
"instead."
msgstr ""
":c:func:`PySys_WriteStdout` と同じですが、 :data:`sys.stderr` もしくは "
"*stderr* に出力します。"

#: ../../c-api/sys.rst:282
msgid ""
"Function similar to PySys_WriteStdout() but format the message using :c:func:"
"`PyUnicode_FromFormatV` and don't truncate the message to an arbitrary "
"length."
msgstr ""
"PySys_WriteStdout() に似た関数ですが、 :c:func:`PyUnicode_FromFormatV` を使っ"
"てメッセージをフォーマットし、メッセージを任意の長さに切り詰めたりはしませ"
"ん。"

#: ../../c-api/sys.rst:290
msgid ""
"As :c:func:`PySys_FormatStdout`, but write to :data:`sys.stderr` or *stderr* "
"instead."
msgstr ""
":c:func:`PySys_FormatStdout` と同じですが、 :data:`sys.stderr` もしくは "
"*stderr* に出力します。"

#: ../../c-api/sys.rst:297
msgid ""
"Parse *s* as a set of :option:`-X` options and add them to the current "
"options mapping as returned by :c:func:`PySys_GetXOptions`. This function "
"may be called prior to :c:func:`Py_Initialize`."
msgstr ""

#: ../../c-api/sys.rst:305
msgid ""
"Return the current dictionary of :option:`-X` options, similarly to :data:"
"`sys._xoptions`.  On error, ``NULL`` is returned and an exception is set."
msgstr ""
":data:`sys._xoptions` と同様、 :option:`-X` オプションの現在の辞書を返しま"
"す。エラーが起きると、 ``NULL`` が返され、例外がセットされます。"

#: ../../c-api/sys.rst:314
msgid ""
"Raise an auditing event with any active hooks. Return zero for success and "
"non-zero with an exception set on failure."
msgstr ""

#: ../../c-api/sys.rst:317
msgid ""
"If any hooks have been added, *format* and other arguments will be used to "
"construct a tuple to pass. Apart from ``N``, the same format characters as "
"used in :c:func:`Py_BuildValue` are available. If the built value is not a "
"tuple, it will be added into a single-element tuple. (The ``N`` format "
"option consumes a reference, but since there is no way to know whether "
"arguments to this function will be consumed, using it may cause reference "
"leaks.)"
msgstr ""

#: ../../c-api/sys.rst:325
msgid ""
"Note that ``#`` format characters should always be treated as :c:type:"
"`Py_ssize_t`, regardless of whether ``PY_SSIZE_T_CLEAN`` was defined."
msgstr ""

#: ../../c-api/sys.rst:328
msgid ":func:`sys.audit` performs the same function from Python code."
msgstr ""

#: ../../c-api/sys.rst:334
msgid ""
"Require :c:type:`Py_ssize_t` for ``#`` format characters. Previously, an "
"unavoidable deprecation warning was raised."
msgstr ""

#: ../../c-api/sys.rst:340
msgid ""
"Append the callable *hook* to the list of active auditing hooks. Return zero "
"on success and non-zero on failure. If the runtime has been initialized, "
"also set an error on failure. Hooks added through this API are called for "
"all interpreters created by the runtime."
msgstr ""

#: ../../c-api/sys.rst:346
msgid ""
"The *userData* pointer is passed into the hook function. Since hook "
"functions may be called from different runtimes, this pointer should not "
"refer directly to Python state."
msgstr ""
"*userData* ポインタはフック関数に渡されます。\n"
"フック関数は別なランタイムから呼び出されるかもしれないので、このポインタは直"
"接 Python の状態を参照すべきではありません。"

#: ../../c-api/sys.rst:350
msgid ""
"This function is safe to call before :c:func:`Py_Initialize`. When called "
"after runtime initialization, existing audit hooks are notified and may "
"silently abort the operation by raising an error subclassed from :class:"
"`Exception` (other errors will not be silenced)."
msgstr ""

#: ../../c-api/sys.rst:355
msgid ""
"The hook function is of type :c:expr:`int (*)(const char *event, PyObject "
"*args, void *userData)`, where *args* is guaranteed to be a :c:type:"
"`PyTupleObject`. The hook function is always called with the GIL held by the "
"Python interpreter that raised the event."
msgstr ""

#: ../../c-api/sys.rst:360
msgid ""
"See :pep:`578` for a detailed description of auditing.  Functions in the "
"runtime and standard library that raise events are listed in the :ref:`audit "
"events table <audit-events>`. Details are in each function's documentation."
msgstr ""

#: ../../c-api/sys.rst:365
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sys.addaudithook`` with no "
"arguments."
msgstr ""
"引数無しで :ref:`監査イベント <auditing>` ``sys.addaudithook`` を送出しま"
"す。 "

#: ../../c-api/sys.rst:367
msgid ""
"If the interpreter is initialized, this function raises a auditing event "
"``sys.addaudithook`` with no arguments. If any existing hooks raise an "
"exception derived from :class:`Exception`, the new hook will not be added "
"and the exception is cleared. As a result, callers cannot assume that their "
"hook has been added unless they control all existing hooks."
msgstr ""

#: ../../c-api/sys.rst:379
msgid "Process Control"
msgstr "プロセス制御"

#: ../../c-api/sys.rst:386
msgid ""
"Print a fatal error message and kill the process.  No cleanup is performed. "
"This function should only be invoked when a condition is detected that would "
"make it dangerous to continue using the Python interpreter; e.g., when the "
"object administration appears to be corrupted.  On Unix, the standard C "
"library function :c:func:`abort` is called which will attempt to produce a :"
"file:`core` file."
msgstr ""
"致命的エラーメッセージ (fatal error message) を出力してプロセスを強制終了 "
"(kill) します。後始末処理は行われません。この関数は、Python  インタプリタを使"
"い続けるのが危険であるような状況が検出されたとき; 例えば、オブジェクト管理が"
"崩壊していると思われるときにのみ、呼び出されるようにしなければなりません。"
"Unixでは、標準 C ライブラリ関数 :c:func:`abort` を呼び出して :file:`core` を"
"生成しようと試みます。"

#: ../../c-api/sys.rst:393
msgid ""
"The ``Py_FatalError()`` function is replaced with a macro which logs "
"automatically the name of the current function, unless the "
"``Py_LIMITED_API`` macro is defined."
msgstr ""

#: ../../c-api/sys.rst:397
msgid "Log the function name automatically."
msgstr ""

#: ../../c-api/sys.rst:407
msgid ""
"Exit the current process.  This calls :c:func:`Py_FinalizeEx` and then calls "
"the standard C library function ``exit(status)``.  If :c:func:"
"`Py_FinalizeEx` indicates an error, the exit status is set to 120."
msgstr ""
"現在のプロセスを終了します。:c:func:`Py_FinalizeEx` を呼び出した後、標準Cライ"
"ブラリ関数の ``exit(status)`` を呼び出します。:c:func:`Py_FinalizeEx` がエ"
"ラーになった場合、終了ステータスは 120に設定されます。"

#: ../../c-api/sys.rst:411
msgid "Errors from finalization no longer ignored."
msgstr "終了処理のエラーは無視されなくなりました。"

#: ../../c-api/sys.rst:421
msgid ""
"Register a cleanup function to be called by :c:func:`Py_FinalizeEx`.  The "
"cleanup function will be called with no arguments and should return no "
"value.  At most 32 cleanup functions can be registered.  When the "
"registration is successful, :c:func:`Py_AtExit` returns ``0``; on failure, "
"it returns ``-1``.  The cleanup function registered last is called first. "
"Each cleanup function will be called at most once.  Since Python's internal "
"finalization will have completed before the cleanup function, no Python APIs "
"should be called by *func*."
msgstr ""
":c:func:`Py_FinalizeEx` から呼び出される後始末処理を行う関数 (cleanup "
"function) を登録します。後始末関数は引数無しで呼び出され、値を返しません。最"
"大で 32 の後始末処理関数を登録できます。登録に成功すると、 :c:func:"
"`Py_AtExit` は ``0`` を返します;  失敗すると ``-1`` を返します。最後に登録し"
"た後始末処理関数から先に呼び出されます。各関数は高々一度しか呼び出されませ"
"ん。 Python の内部的な終了処理は後始末処理関数より以前に完了しているので、 "
"*func* からはいかなる Python API も呼び出してはなりません。"
