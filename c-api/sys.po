# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2018-01-20 20:55+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/sys.rst:6
msgid "Operating System Utilities"
msgstr "オペレーティングシステム関連のユーティリティ"

#: ../../c-api/sys.rst:11
msgid ""
"Return true (nonzero) if the standard I/O file *fp* with name *filename* is "
"deemed interactive.  This is the case for files for which "
"``isatty(fileno(fp))`` is true.  If the global flag :c:data:"
"`Py_InteractiveFlag` is true, this function also returns true if the "
"*filename* pointer is *NULL* or if the name is equal to one of the strings "
"``'<stdin>'`` or ``'???'``."
msgstr ""
"*filename* という名前の標準 I/O ファイル *fp* が対話的 (interactive) であると"
"考えられる場合に真 (非ゼロ) を返します。これは ``isatty(fileno(fp))`` が真に"
"なるファイルの場合です。グローバルなフラグ :c:data:`Py_InteractiveFlag` が真"
"の場合には、 *filename* ポインタが *NULL* か、名前が ``'<stdin>'`` または "
"``'???'`` のいずれかに等しい場合にも真を返します。"

#: ../../c-api/sys.rst:20
msgid ""
"Function to update some internal state after a process fork; this should be "
"called in the new process if the Python interpreter will continue to be "
"used. If a new executable is loaded into the new process, this function does "
"not need to be called."
msgstr ""
"プロセスが fork した後の内部状態を更新するための関数です; fork 後 Python イン"
"タプリタを使い続ける場合、新たなプロセス内でこの関数を呼び出さねばなりませ"
"ん。新たなプロセスに新たな実行可能物をロードする場合、この関数を呼び出す必要"
"はありません。"

#: ../../c-api/sys.rst:28
msgid ""
"Return true when the interpreter runs out of stack space.  This is a "
"reliable check, but is only available when :const:`USE_STACKCHECK` is "
"defined (currently on Windows using the Microsoft Visual C++ compiler).  :"
"const:`USE_STACKCHECK` will be defined automatically; you should never "
"change the definition in your own code."
msgstr ""
"インタプリタがスタック空間を使い尽くしたときに真を返します。このチェック関数"
"には信頼性がありますが、 :const:`USE_STACKCHECK` が定義されている場合 (現状で"
"は Microsoft Visual C++ コンパイラでビルドした Windows 版) にしか利用できませ"
"ん . :const:`USE_STACKCHECK` は自動的に定義されます; 自前のコードでこの定義を"
"変更してはなりません。"

#: ../../c-api/sys.rst:37
msgid ""
"Return the current signal handler for signal *i*.  This is a thin wrapper "
"around either :c:func:`sigaction` or :c:func:`signal`.  Do not call those "
"functions directly! :c:type:`PyOS_sighandler_t` is a typedef alias for :c:"
"type:`void (\\*)(int)`."
msgstr ""
"シグナル *i* に対する現在のシグナルハンドラを返します。この関数は :c:func:"
"`sigaction` または :c:func:`signal` のいずれかに対する薄いラッパです。 :c:"
"func:`sigaction` や :c:func:`signal` を直接呼び出してはなりません! :c:type:"
"`PyOS_sighandler_t` は :c:type:`void (\\*)(int)` の typedef  による別名です。"

#: ../../c-api/sys.rst:45
msgid ""
"Set the signal handler for signal *i* to be *h*; return the old signal "
"handler. This is a thin wrapper around either :c:func:`sigaction` or :c:func:"
"`signal`.  Do not call those functions directly!  :c:type:"
"`PyOS_sighandler_t` is a typedef alias for :c:type:`void (\\*)(int)`."
msgstr ""
"シグナル *i* に対する現在のシグナルハンドラを *h* に設定します; 以前のシグナ"
"ルハンドラを返します。この関数は :c:func:`sigaction` または :c:func:`signal` "
"のいずれかに対する薄いラッパーです。 :c:func:`sigaction` や :c:func:`signal` "
"を直接呼び出してはなりません!  :c:type:`PyOS_sighandler_t` は :c:type:`void "
"(\\*)(int)` の typedef  による別名です。"

#: ../../c-api/sys.rst:53
msgid "System Functions"
msgstr "システム関数"

#: ../../c-api/sys.rst:55
msgid ""
"These are utility functions that make functionality from the :mod:`sys` "
"module accessible to C code.  They all work with the current interpreter "
"thread's :mod:`sys` module's dict, which is contained in the internal thread "
"state structure."
msgstr ""
":mod:`sys` モジュールが提供している機能にCのコードからアクセスする関数です。"
"すべての関数は現在のインタプリタスレッドの :mod:`sys` モジュールの辞書に対し"
"て動作します。この辞書は内部のスレッド状態構造体に格納されています。"

#: ../../c-api/sys.rst:61
msgid ""
"Return the object *name* from the :mod:`sys` module or *NULL* if it does not "
"exist, without setting an exception."
msgstr ""
":mod:`sys` モジュールの *name* オブジェクトを返すか、存在しなければ例外を設定"
"せずに *NULL* を返します。"

#: ../../c-api/sys.rst:66
msgid ""
"Return the :c:type:`FILE*` associated with the object *name* in the :mod:"
"`sys` module, or *def* if *name* is not in the module or is not associated "
"with a :c:type:`FILE*`."
msgstr ""
":mod:`sys` モジュール内のオブジェクト *name* に関連付けられた :c:type:"
"`FILE*` を返します。 *name* がなかった場合や :c:type:`FILE*` に関連付けられて"
"いなかった場合は *def* を返します。"

#: ../../c-api/sys.rst:72
msgid ""
"Set *name* in the :mod:`sys` module to *v* unless *v* is *NULL*, in which "
"case *name* is deleted from the sys module. Returns ``0`` on success, ``-1`` "
"on error."
msgstr ""
"*v* が *NULL* で無い場合、 :mod:`sys` モジュールの *name* に *v* を設定しま"
"す。 *v* が *NULL* なら、 sys モジュールから *name* を削除します。成功したら "
"``0`` を、エラー時は ``-1`` を返します。"

#: ../../c-api/sys.rst:78
msgid "Reset :data:`sys.warnoptions` to an empty list."
msgstr ":data:`sys.warnoptions` を、空リストにリセットします。"

#: ../../c-api/sys.rst:82
msgid "Append *s* to :data:`sys.warnoptions`."
msgstr ":data:`sys.warnoptions` に *s* を追加します。"

#: ../../c-api/sys.rst:86
msgid ""
"Set :data:`sys.path` to a list object of paths found in *path* which should "
"be a list of paths separated with the platform's search path delimiter (``:"
"`` on Unix, ``;`` on Windows)."
msgstr ""
":data:`sys.path` を *path* に含まれるパスの、リストオブジェクトに設定しま"
"す。 *path* はプラットフォームの検索パスデリミタ(Unixでは ``:``, Windows で"
"は ``;``) で区切られたパスのリストでなければなりません。"

#: ../../c-api/sys.rst:92
msgid ""
"Write the output string described by *format* to :data:`sys.stdout`.  No "
"exceptions are raised, even if truncation occurs (see below)."
msgstr ""
"*format* で指定された出力文字列を :data:`sys.stdout` に出力します。切り詰めが"
"起こった場合を含め、例外は一切発生しません (後述)。"

#: ../../c-api/sys.rst:95
msgid ""
"*format* should limit the total size of the formatted output string to 1000 "
"bytes or less -- after 1000 bytes, the output string is truncated. In "
"particular, this means that no unrestricted \"%s\" formats should occur; "
"these should be limited using \"%.<N>s\" where <N> is a decimal number "
"calculated so that <N> plus the maximum size of other formatted text does "
"not exceed 1000 bytes.  Also watch out for \"%f\", which can print hundreds "
"of digits for very large numbers."
msgstr ""
"*format* は、フォーマット後の出力文字列のトータルの大きさを1000バイト以下に抑"
"えるべきです。-- 1000 バイト以降の出力文字列は切り詰められます。特に、制限の"
"ない \"%s\" フォーマットを使うべきではありません。\"%.<N>s\" のようにして N "
"に10進数の値を指定し、<N> + その他のフォーマット後の最大サイズが1000を超えな"
"いように設定するべきです。同じように \"%f\" にも気を付ける必要があります。非"
"常に大きい数値に対して、数百の数字を出力する可能性があります。"

#: ../../c-api/sys.rst:103
msgid ""
"If a problem occurs, or :data:`sys.stdout` is unset, the formatted message "
"is written to the real (C level) *stdout*."
msgstr ""
"問題が発生したり、 :data:`sys.stdout` が設定されていなかった場合、フォーマッ"
"ト後のメッセージは本物の(Cレベルの) *stdout* に出力されます。"

#: ../../c-api/sys.rst:108
msgid "As above, but write to :data:`sys.stderr` or *stderr* instead."
msgstr "上と同じですが、 :data:`sys.stderr` か *stderr* に出力します。"

#: ../../c-api/sys.rst:114
msgid "Process Control"
msgstr "プロセス制御"

#: ../../c-api/sys.rst:121
msgid ""
"Print a fatal error message and kill the process.  No cleanup is performed. "
"This function should only be invoked when a condition is detected that would "
"make it dangerous to continue using the Python interpreter; e.g., when the "
"object administration appears to be corrupted.  On Unix, the standard C "
"library function :c:func:`abort` is called which will attempt to produce a :"
"file:`core` file."
msgstr ""
"致命的エラーメッセージ (fatal error message) を出力してプロセスを強制終了 "
"(kill) します。後始末処理は行われません。この関数は、Python  インタプリタを使"
"い続けるのが危険であるような状況が検出されたとき; 例えば、オブジェクト管理が"
"崩壊していると思われるときにのみ、呼び出されるようにしなければなりません。"
"Unixでは、標準 C ライブラリ関数 :c:func:`abort` を呼び出して :file:`core` を"
"生成しようと試みます。"

#: ../../c-api/sys.rst:135
msgid ""
"Exit the current process.  This calls :c:func:`Py_Finalize` and then calls "
"the standard C library function ``exit(status)``."
msgstr ""
"現在のプロセスを終了 (exit) します。この関数は :c:func:`Py_Finalize` を呼び出"
"し、次いで標準 C ライブラリ関数 ``exit(status)`` を呼び出します。"

#: ../../c-api/sys.rst:145
msgid ""
"Register a cleanup function to be called by :c:func:`Py_Finalize`.  The "
"cleanup function will be called with no arguments and should return no "
"value.  At most 32 cleanup functions can be registered.  When the "
"registration is successful, :c:func:`Py_AtExit` returns ``0``; on failure, "
"it returns ``-1``.  The cleanup function registered last is called first. "
"Each cleanup function will be called at most once.  Since Python's internal "
"finalization will have completed before the cleanup function, no Python APIs "
"should be called by *func*."
msgstr ""
":c:func:`Py_Finalize` から呼び出される後始末処理を行う関数 (cleanup "
"function) を登録します。後始末関数は引数無しで呼び出され、値を返しません。最"
"大で 32 の後始末処理関数を登録できます。登録に成功すると、 :c:func:"
"`Py_AtExit` は ``0`` を返します;  失敗すると ``-1`` を返します。最後に登録し"
"た後始末処理関数から先に呼び出されます。各関数は高々一度しか呼び出されませ"
"ん。 Python の内部的な終了処理は後始末処理関数より以前に完了しているので、 "
"*func* からはいかなる Python API も呼び出してはなりません。"
