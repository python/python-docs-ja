# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/veryhigh.rst:8
msgid "The Very High Level Layer"
msgstr "超高レベルレイヤ"

#: ../../c-api/veryhigh.rst:10
msgid ""
"The functions in this chapter will let you execute Python source code given "
"in a file or a buffer, but they will not let you interact in a more detailed "
"way with the interpreter."
msgstr ""
"この章の関数を使うとファイルまたはバッファにある Python ソースコードを実行で"
"きますが、より詳細なやり取りをインタプリタとすることはできないでしょう。"

#: ../../c-api/veryhigh.rst:14
msgid ""
"Several of these functions accept a start symbol from the grammar as a "
"parameter.  The available start symbols are :const:`Py_eval_input`, :const:"
"`Py_file_input`, and :const:`Py_single_input`.  These are described "
"following the functions which accept them as parameters."
msgstr ""
"これらの関数のいくつかは引数として文法の開始記号を受け取ります。使用できる開"
"始記号は :const:`Py_eval_input` と :const:`Py_file_input` 、 :const:"
"`Py_single_input` です。開始記号の説明はこれらを引数として取る関数の後にあり"
"ます。"

#: ../../c-api/veryhigh.rst:19
msgid ""
"Note also that several of these functions take :c:type:`FILE\\*` "
"parameters.  One particular issue which needs to be handled carefully is "
"that the :c:type:`FILE` structure for different C libraries can be different "
"and incompatible.  Under Windows (at least), it is possible for dynamically "
"linked extensions to actually use different libraries, so care should be "
"taken that :c:type:`FILE\\*` parameters are only passed to these functions "
"if it is certain that they were created by the same library that the Python "
"runtime is using."
msgstr ""
"これらの関数のいくつかが :c:type:`FILE\\*` 引数をとることにも注意してくださ"
"い。注意深く扱う必要がある特別な問題の1つは、異なるCライブラリの :c:type:"
"`FILE` 構造体は異なっていて互換性がない可能性があるということです。実際に(少"
"なくとも)Windowsでは、動的リンクされる拡張が異なるライブラリを使うことが可能"
"であり、したがって、 :c:type:`FILE\\*` 引数がPythonランタイムが使っているライ"
"ブラリと同じライブラリによって作成されたことが確かならば、単にこれらの関数へ"
"渡すだけということに注意すべきです。"

#: ../../c-api/veryhigh.rst:30
msgid ""
"The main program for the standard interpreter.  This is made available for "
"programs which embed Python.  The *argc* and *argv* parameters should be "
"prepared exactly as those which are passed to a C program's :c:func:`main` "
"function.  It is important to note that the argument list may be modified "
"(but the contents of the strings pointed to by the argument list are not). "
"The return value will be ``0`` if the interpreter exits normally (ie, "
"without an exception), ``1`` if the interpreter exits due to an exception, "
"or ``2`` if the parameter list does not represent a valid Python command "
"line."
msgstr ""
"標準インタプリタのためのメインプログラム。Pythonを組み込むプログラムのために"
"これを利用できるようにしています。 *argc* と *argv* 引数をCプログラムの :c:"
"func:`main` 関数へ渡されるものとまったく同じに作成すべきです。引数リストが変"
"更される可能性があるという点に注意することは重要です。 (しかし、引数リストが"
"指している文字列の内容は変更されません)。戻り値はインタプリタが(例外などでは"
"なく)普通に終了した時は ``0`` に、例外で終了したときには ``1`` に、引数リスト"
"が正しい Python コマンドラインが渡されなかったときは ``2`` になります。"

#: ../../c-api/veryhigh.rst:39
msgid ""
"Note that if an otherwise unhandled :exc:`SystemExit` is raised, this "
"function will not return ``1``, but exit the process, as long as "
"``Py_InspectFlag`` is not set."
msgstr ""
"``Py_InspectFlag`` が設定されていない場合、未処理の :exc:`SystemExit` 例外が"
"発生すると、この関数は ``1`` を返すのではなくプロセスを exit することに気をつ"
"けてください。"

#: ../../c-api/veryhigh.rst:46
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving *closeit* set to ``0`` and *flags* set to *NULL*."
msgstr ""
"下記の :c:func:`PyRun_AnyFileExFlags` の *closeit* を ``0`` に、 *flags* を "
"*NULL* にして単純化したインタフェースです。"

#: ../../c-api/veryhigh.rst:52
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving the *closeit* argument set to ``0``."
msgstr ""
"下記の :c:func:`PyRun_AnyFileExFlags` の *closeit* を ``0`` にして単純化した"
"インタフェースです。"

#: ../../c-api/veryhigh.rst:58
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving the *flags* argument set to *NULL*."
msgstr ""
"下記の :c:func:`PyRun_AnyFileExFlags` の *flags* を *NULL* にして単純化したイ"
"ンタフェースです。"

#: ../../c-api/veryhigh.rst:64
msgid ""
"If *fp* refers to a file associated with an interactive device (console or "
"terminal input or Unix pseudo-terminal), return the value of :c:func:"
"`PyRun_InteractiveLoop`, otherwise return the result of :c:func:"
"`PyRun_SimpleFile`.  If *filename* is *NULL*, this function uses ``\"???\"`` "
"as the filename."
msgstr ""
"*fp* が対話的デバイス (コンソールや端末入力あるいは Unix 仮想端末) と関連づけ"
"られたファイルを参照しているならば、 :c:func:`PyRun_InteractiveLoop` の値を返"
"します。それ以外の場合は、 :c:func:`PyRun_SimpleFile` の結果を返します。 "
"*filename* が *NULL* ならば、この関数はファイル名として ``\"???\"`` を使いま"
"す。"

#: ../../c-api/veryhigh.rst:73
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleStringFlags` below, "
"leaving the *PyCompilerFlags\\** argument set to NULL."
msgstr ""
"下記の :c:func:`PyRun_SimpleStringFlags` の *PyCompilerFlags\\** を *NULL* に"
"して単純化したインタフェースです。"

#: ../../c-api/veryhigh.rst:79
msgid ""
"Executes the Python source code from *command* in the :mod:`__main__` module "
"according to the *flags* argument. If :mod:`__main__` does not already "
"exist, it is created.  Returns ``0`` on success or ``-1`` if an exception "
"was raised.  If there was an error, there is no way to get the exception "
"information. For the meaning of *flags*, see below."
msgstr ""
":mod:`__main__` モジュールの中で *flags* に従って *command* に含まれる "
"Python ソースコードを実行します。 :mod:`__main__` がまだ存在しない場合は作成"
"されます。正常終了の場合は ``0`` を返し、また例外が発生した場合は ``-1`` を返"
"します。エラーがあっても、例外情報を得る方法はありません。 *flags* の意味につ"
"いては、後述します。"

#: ../../c-api/veryhigh.rst:85
msgid ""
"Note that if an otherwise unhandled :exc:`SystemExit` is raised, this "
"function will not return ``-1``, but exit the process, as long as "
"``Py_InspectFlag`` is not set."
msgstr ""
"``Py_InspectFlag`` が設定されていない場合、未処理の :exc:`SystemExit` 例外が"
"発生すると、この関数は ``1`` を返すのではなくプロセスを exit することに気をつ"
"けてください。"

#: ../../c-api/veryhigh.rst:92
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` below, "
"leaving *closeit* set to ``0`` and *flags* set to *NULL*."
msgstr ""
"下記の :c:func:`PyRun_SimpleFileExFlags` の *closeit* を ``0`` に、 *flags* "
"を *NULL* にして単純化したインタフェースです。"

#: ../../c-api/veryhigh.rst:98
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` below, "
"leaving *closeit* set to ``0``."
msgstr ""
"下記の :c:func:`PyRun_AnyFileExFlags` の *closeit* を ``0`` にして単純化した"
"インタフェースです。"

#: ../../c-api/veryhigh.rst:104
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` below, "
"leaving *flags* set to *NULL*."
msgstr ""
"下記の :c:func:`PyRun_SimpleFileExFlags` の *flags* を *NULL* にして単純化し"
"たインタフェースです。"

#: ../../c-api/veryhigh.rst:110
msgid ""
"Similar to :c:func:`PyRun_SimpleStringFlags`, but the Python source code is "
"read from *fp* instead of an in-memory string. *filename* should be the name "
"of the file.  If *closeit* is true, the file is closed before "
"PyRun_SimpleFileExFlags returns."
msgstr ""
":c:func:`PyRun_SimpleStringFlags` と似ていますが、Python ソースコードをメモリ"
"内の文字列ではなく *fp* から読み込みます。 *filename* はそのファイルの名前で"
"なければなりません。 *closeit* に真を指定した場合は、PyRun_SimpleFileExFlags "
"が処理を戻す前にファイルを閉じます。"

#: ../../c-api/veryhigh.rst:118
msgid ""
"This is a simplified interface to :c:func:`PyRun_InteractiveOneFlags` below, "
"leaving *flags* set to *NULL*."
msgstr ""
"下記の :c:func:`PyRun_InteractiveOneFlags` の *flags* を *NULL* にして単純化"
"したインタフェースです。"

#: ../../c-api/veryhigh.rst:124
msgid ""
"Read and execute a single statement from a file associated with an "
"interactive device according to the *flags* argument.  The user will be "
"prompted using ``sys.ps1`` and ``sys.ps2``.  Returns ``0`` when the input "
"was executed successfully, ``-1`` if there was an exception, or an error "
"code from the :file:`errcode.h` include file distributed as part of Python "
"if there was a parse error.  (Note that :file:`errcode.h` is not included "
"by :file:`Python.h`, so must be included specifically if needed.)"
msgstr ""
"対話的デバイスに関連付けられたファイルから文を一つ読み込み、 *flags* に従って"
"実行します。 ``sys.ps1`` と ``sys.ps2`` を使って、ユーザにプロンプトを表示し"
"ます。入力が正常に実行されたときは ``0`` を返します。例外が発生した場合は "
"``-1`` を返します。パースエラーの場合は Python の一部として配布されている :"
"file:`errcode.h` インクルードファイルにあるエラーコードを返します。 (:file:"
"`Python.h` は :file:`errcode.h` をインクルードしません。したがって、必要なら"
"ば特別にインクルードしなければならないことに注意してください。)"

#: ../../c-api/veryhigh.rst:135
msgid ""
"This is a simplified interface to :c:func:`PyRun_InteractiveLoopFlags` "
"below, leaving *flags* set to *NULL*."
msgstr ""
"下記の :c:func:`PyRun_InteractiveLoopFlags` の *flags* を *NULL* にして単純化"
"したインタフェースです。"

#: ../../c-api/veryhigh.rst:141
msgid ""
"Read and execute statements from a file associated with an interactive "
"device until EOF is reached.  The user will be prompted using ``sys.ps1`` "
"and ``sys.ps2``.  Returns ``0`` at EOF."
msgstr ""
"対話的デバイスに関連付けられたファイルから EOF に達するまで複数の文を読み込み"
"実行します。使われます。 ``sys.ps1`` と ``sys.ps2`` を使って、ユーザにプロン"
"プトを表示します。 EOF に達すると ``0`` を返します。"

#: ../../c-api/veryhigh.rst:148
msgid ""
"This is a simplified interface to :c:func:"
"`PyParser_SimpleParseStringFlagsFilename` below, leaving  *filename* set to "
"*NULL* and *flags* set to ``0``."
msgstr ""
"下記の :c:func:`PyParser_SimpleParseStringFlagsFilename` の *filename* を "
"*NULL* に、 *flags* を ``0`` にして単純化したインタフェースです。"

#: ../../c-api/veryhigh.rst:155
msgid ""
"This is a simplified interface to :c:func:"
"`PyParser_SimpleParseStringFlagsFilename` below, leaving  *filename* set to "
"*NULL*."
msgstr ""
"下記の :c:func:`PyParser_SimpleParseStringFlagsFilename` の *filename* を "
"*NULL* にして単純化したインタフェースです。"

#: ../../c-api/veryhigh.rst:162
msgid ""
"Parse Python source code from *str* using the start token *start* according "
"to the *flags* argument.  The result can be used to create a code object "
"which can be evaluated efficiently. This is useful if a code fragment must "
"be evaluated many times."
msgstr ""
"開始トークン *start* を使って *str* に含まれる Python ソースコードを *flags* "
"引数に従ってパースします。効率的に評価可能なコードオブジェ クトを作成するため"
"にその結果を使うことができます。コード断片を何度も評価しなければならない場合"
"に役に立ちます。"

#: ../../c-api/veryhigh.rst:170
msgid ""
"This is a simplified interface to :c:func:`PyParser_SimpleParseFileFlags` "
"below, leaving *flags* set to ``0``."
msgstr ""
"下記の :c:func:`PyRun_SimpleParseFileFlags` の *flags* を ``0`` にして単純化"
"したインタフェースです。"

#: ../../c-api/veryhigh.rst:176
msgid ""
"Similar to :c:func:`PyParser_SimpleParseStringFlagsFilename`, but the Python "
"source code is read from *fp* instead of an in-memory string."
msgstr ""
":c:func:`PyParser_SimpleParseStringFlagsFilename` に似ていますが、 Pythonソー"
"スコードをメモリ内の文字列ではなく *fp* から読み込みます。 *filename* はその"
"ファイルの名前でなけれななりません。"

#: ../../c-api/veryhigh.rst:182
msgid ""
"This is a simplified interface to :c:func:`PyRun_StringFlags` below, leaving "
"*flags* set to *NULL*."
msgstr ""
"下記の :c:func:`PyRun_StringFlags` の *flags* を *NULL* にして単純化したイン"
"タフェースです。"

#: ../../c-api/veryhigh.rst:188
msgid ""
"Execute Python source code from *str* in the context specified by the "
"dictionaries *globals* and *locals* with the compiler flags specified by "
"*flags*.  The parameter *start* specifies the start token that should be "
"used to parse the source code."
msgstr ""
"辞書 *globals* と *locals* で指定されるコンテキストにおいて、*str* に含まれる"
"Pythonソースコードをコンパイラフラグ *flags* のもとで実行します。パラメータ "
"*start* はソースコードをパースするために使われるべき開始トークンを指定しま"
"す。"

#: ../../c-api/veryhigh.rst:193
msgid ""
"Returns the result of executing the code as a Python object, or *NULL* if an "
"exception was raised."
msgstr ""
"コードを実行した結果をPythonオブジェクトとして返します。または、例外が発生し"
"たならば *NULL* を返します。"

#: ../../c-api/veryhigh.rst:199
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving "
"*closeit* set to ``0`` and *flags* set to *NULL*."
msgstr ""
"下記の :c:func:`PyRun_FileExFlags` の *closeit* を ``0`` にし、 *flags* を "
"*NULL* にして単純化したインタフェースです。"

#: ../../c-api/veryhigh.rst:205
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving "
"*flags* set to *NULL*."
msgstr ""
"下記の :c:func:`PyRun_FileExFlags` の *flags* を *NULL* にして単純化したイン"
"タフェースです。"

#: ../../c-api/veryhigh.rst:211
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving "
"*closeit* set to ``0``."
msgstr ""
"下記の :c:func:`PyRun_FileExFlags` の *closeit* を ``0`` にして単純化したイン"
"タフェースです。"

#: ../../c-api/veryhigh.rst:217
msgid ""
"Similar to :c:func:`PyRun_StringFlags`, but the Python source code is read "
"from *fp* instead of an in-memory string. *filename* should be the name of "
"the file. If *closeit* is true, the file is closed before :c:func:"
"`PyRun_FileExFlags` returns."
msgstr ""
":c:func:`PyRun_StringFlags` と似ていますが、Pythonソースコードをメモリ内の文"
"字列ではなく *fp* から読み込みます。 *filename* はそのファイルの名前でなけれ"
"ばなりません。もし *closeit* を真にすると、 :c:func:`PyRun_FileExFlags` が処"
"理を戻す前にファイルを閉じます。"

#: ../../c-api/veryhigh.rst:225
msgid ""
"This is a simplified interface to :c:func:`Py_CompileStringFlags` below, "
"leaving *flags* set to *NULL*."
msgstr ""
"下記の :c:func:`Py_CompileStringFlags` の *flags* を *NULL* にして単純化した"
"インタフェースです。"

#: ../../c-api/veryhigh.rst:231
msgid ""
"Parse and compile the Python source code in *str*, returning the resulting "
"code object.  The start token is given by *start*; this can be used to "
"constrain the code which can be compiled and should be :const:"
"`Py_eval_input`, :const:`Py_file_input`, or :const:`Py_single_input`.  The "
"filename specified by *filename* is used to construct the code object and "
"may appear in tracebacks or :exc:`SyntaxError` exception messages.  This "
"returns *NULL* if the code cannot be parsed or compiled."
msgstr ""
"*str* 内の Python ソースコードをパースしてコンパイルし、作られたコードオブ"
"ジェクトを返します。開始トークンは *start* によって与えられます。これはコンパ"
"イル可能なコードを制限するために使うことができ、 :const:`Py_eval_input` 、 :"
"const:`Py_file_input` もしくは :const:`Py_single_input` であるべきです。 "
"*filename* で指定されるファイル名はコードオブジェクトを構築するために使われ、"
"トレースバックあるいは :exc:`SyntaxError` 例外メッセージに出てくる可能性があ"
"ります。コードがパースできなかったりコンパイルできなかったりした場合に、これ"
"は *NULL* を返します。"

#: ../../c-api/veryhigh.rst:242
msgid ""
"This is a simplified interface to :c:func:`PyEval_EvalCodeEx`, with just the "
"code object, and the dictionaries of global and local variables. The other "
"arguments are set to *NULL*."
msgstr ""
":c:func:`PyEval_EvalCodeEx` に対するシンプルなインタフェースで、コードオブ"
"ジェクトと、グローバル変数とローカル変数の辞書だけを受け取ります。他の引数に"
"は *NULL* が渡されます。"

#: ../../c-api/veryhigh.rst:249
msgid ""
"Evaluate a precompiled code object, given a particular environment for its "
"evaluation.  This environment consists of dictionaries of global and local "
"variables, arrays of arguments, keywords and defaults, and a closure tuple "
"of cells."
msgstr ""
"与えられた特定の環境で、コンパイル済みのコードオブジェクトを評価します。環境"
"はグローバルとローカルの辞書、引き数の配列、キーワードとデフォルト値、クロー"
"ジャーのためのセルのタプルで構成されています。"

#: ../../c-api/veryhigh.rst:257
msgid ""
"Evaluate an execution frame.  This is a simplified interface to "
"PyEval_EvalFrameEx, for backward compatibility."
msgstr ""
"実行フレームを評価します。これは PyEval_EvalFrameEx に対するシンプルなインタ"
"フェースで、後方互換性のためのものです。"

#: ../../c-api/veryhigh.rst:263
msgid ""
"This is the main, unvarnished function of Python interpretation.  It is "
"literally 2000 lines long.  The code object associated with the execution "
"frame *f* is executed, interpreting bytecode and executing calls as needed. "
"The additional *throwflag* parameter can mostly be ignored - if true, then "
"it causes an exception to immediately be thrown; this is used for the :meth:"
"`~generator.throw` methods of generator objects."
msgstr ""
"Python のインタープリタの主要な、直接的な関数です。 この関数には 2000 行ほど"
"あります。 実行フレーム *f* に関連付けられたコードオブジェクトを実行します。 "
"バイトコードを解釈して、必要に応じて呼び出しを実行します。 追加の "
"*throwflag* 引数はほとんど無視できます。 - もし true なら、 すぐに例外を発生"
"させます。これはジェネレータオブジェクトの :meth:`~generator.throw` メソッド"
"で利用されます。"

#: ../../c-api/veryhigh.rst:273
msgid ""
"This function changes the flags of the current evaluation frame, and returns "
"true on success, false on failure."
msgstr ""
"現在の評価フレームのフラグを変更します。成功したら true を、失敗したら false "
"を返します。"

#: ../../c-api/veryhigh.rst:281
msgid ""
"The start symbol from the Python grammar for isolated expressions; for use "
"with :c:func:`Py_CompileString`."
msgstr ""
"単独の式に対するPython文法の開始記号で、 :c:func:`Py_CompileString` と一緒に"
"使います。"

#: ../../c-api/veryhigh.rst:289
msgid ""
"The start symbol from the Python grammar for sequences of statements as read "
"from a file or other source; for use with :c:func:`Py_CompileString`.  This "
"is the symbol to use when compiling arbitrarily long Python source code."
msgstr ""
"ファイルあるいは他のソースから読み込まれた文の並びに対するPython文法の開始記"
"号で、 :c:func:`Py_CompileString` と一緒に使います。これは任意の長さのPython"
"ソースコードをコンパイルするときに使う記号です。"

#: ../../c-api/veryhigh.rst:298
msgid ""
"The start symbol from the Python grammar for a single statement; for use "
"with :c:func:`Py_CompileString`. This is the symbol used for the interactive "
"interpreter loop."
msgstr ""
"単一の文に対するPython文法の開始記号で、 :c:func:`Py_CompileString` と一緒に"
"使います。これは対話式のインタプリタループのための記号です。"

#: ../../c-api/veryhigh.rst:305
msgid ""
"This is the structure used to hold compiler flags.  In cases where code is "
"only being compiled, it is passed as ``int flags``, and in cases where code "
"is being executed, it is passed as ``PyCompilerFlags *flags``.  In this "
"case, ``from __future__ import`` can modify *flags*."
msgstr ""
"コンパイラフラグを収めておくための構造体です。コードをコンパイルするだけの場"
"合、この構造体が ``int flags`` として渡されます。コードを実行する場合には "
"``PyCompilerFlags *flags`` として渡されます。この場合、``from __future__ "
"import`` は *flags* の内容を変更できます。"

#: ../../c-api/veryhigh.rst:310
msgid ""
"Whenever ``PyCompilerFlags *flags`` is *NULL*, :attr:`cf_flags` is treated "
"as equal to ``0``, and any modification due to ``from __future__ import`` is "
"discarded.  ::"
msgstr ""
"``PyCompilerFlags *flags`` が *NULL* の場合、 :attr:`cf_flags` は ``0`` とし"
"て扱われ、 ``from __future__ import`` による変更は無視されます。 ::"

#: ../../c-api/veryhigh.rst:321
msgid ""
"This bit can be set in *flags* to cause division operator ``/`` to be "
"interpreted as \"true division\" according to :pep:`238`."
msgstr ""
"このビットを *flags* にセットすると、除算演算子 ``/`` は :pep:`238` による"
"「真の除算 (true division)」として扱われます。"
