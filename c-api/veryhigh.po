# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:06+0000\n"
"PO-Revision-Date: 2020-05-30 11:51+0000\n"
"Last-Translator: tomo, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../c-api/veryhigh.rst:8
msgid "The Very High Level Layer"
msgstr "超高水準レイヤ"

#: ../../c-api/veryhigh.rst:10
msgid ""
"The functions in this chapter will let you execute Python source code given "
"in a file or a buffer, but they will not let you interact in a more detailed "
"way with the interpreter."
msgstr ""
"この章の関数を使うとファイルまたはバッファにある Python ソースコードを実行で"
"きますが、より詳細なやり取りをインタプリタとすることはできないでしょう。"

#: ../../c-api/veryhigh.rst:14
msgid ""
"Several of these functions accept a start symbol from the grammar as a "
"parameter.  The available start symbols are :const:`Py_eval_input`, :const:"
"`Py_file_input`, and :const:`Py_single_input`.  These are described "
"following the functions which accept them as parameters."
msgstr ""
"これらの関数のいくつかは引数として文法の開始記号を受け取ります。使用できる開"
"始記号は :const:`Py_eval_input` と :const:`Py_file_input` 、 :const:"
"`Py_single_input` です。開始記号の説明はこれらを引数として取る関数の後にあり"
"ます。"

#: ../../c-api/veryhigh.rst:19
msgid ""
"Note also that several of these functions take :c:type:`FILE*` parameters.  "
"One particular issue which needs to be handled carefully is that the :c:type:"
"`FILE` structure for different C libraries can be different and "
"incompatible.  Under Windows (at least), it is possible for dynamically "
"linked extensions to actually use different libraries, so care should be "
"taken that :c:type:`FILE*` parameters are only passed to these functions if "
"it is certain that they were created by the same library that the Python "
"runtime is using."
msgstr ""

#: ../../c-api/veryhigh.rst:30
msgid ""
"The main program for the standard interpreter.  This is made available for "
"programs which embed Python.  The *argc* and *argv* parameters should be "
"prepared exactly as those which are passed to a C program's :c:func:`main` "
"function (converted to wchar_t according to the user's locale).  It is "
"important to note that the argument list may be modified (but the contents "
"of the strings pointed to by the argument list are not). The return value "
"will be ``0`` if the interpreter exits normally (i.e., without an "
"exception), ``1`` if the interpreter exits due to an exception, or ``2`` if "
"the parameter list does not represent a valid Python command line."
msgstr ""
"標準インタプリタのためのメインプログラム。Pythonを組み込むプログラムのために"
"これを利用できるようにしています。 *argc* と *argv* 引数をCプログラムの :c:"
"func:`main` 関数 (ユーザのロケールに従って wchar_t に変換されます) へ渡される"
"ものとまったく同じに作成すべきです。引数リストが変更される可能性があるという"
"点に注意することは重要です。 (しかし、引数リストが指している文字列の内容は変"
"更されません)。戻り値はインタプリタが(例外などではなく)普通に終了した時は "
"``0`` に、例外で終了したときには ``1`` に、引数リストが正しい Python コマンド"
"ラインが渡されなかったときは ``2`` になります。"

#: ../../c-api/veryhigh.rst:40
msgid ""
"Note that if an otherwise unhandled :exc:`SystemExit` is raised, this "
"function will not return ``1``, but exit the process, as long as "
"``Py_InspectFlag`` is not set."
msgstr ""
"``Py_InspectFlag`` が設定されていない場合、未処理の :exc:`SystemExit` 例外が"
"発生すると、この関数は ``1`` を返すのではなくプロセスを exit することに気をつ"
"けてください。"

#: ../../c-api/veryhigh.rst:47
msgid "Similar to :c:func:`Py_Main` but *argv* is an array of bytes strings."
msgstr ""

#: ../../c-api/veryhigh.rst:54
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving *closeit* set to ``0`` and *flags* set to ``NULL``."
msgstr ""
"下記の :c:func:`PyRun_AnyFileExFlags` の *closeit* を ``0`` に、 *flags* を "
"``NULL`` にして単純化したインタフェースです。"

#: ../../c-api/veryhigh.rst:60
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving the *closeit* argument set to ``0``."
msgstr ""
"下記の :c:func:`PyRun_AnyFileExFlags` の *closeit* を ``0`` にして単純化した"
"インタフェースです。"

#: ../../c-api/veryhigh.rst:66
msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving the *flags* argument set to ``NULL``."
msgstr ""
"下記の :c:func:`PyRun_AnyFileExFlags` の *flags* を ``NULL`` にして単純化した"
"インタフェースです。"

#: ../../c-api/veryhigh.rst:72
msgid ""
"If *fp* refers to a file associated with an interactive device (console or "
"terminal input or Unix pseudo-terminal), return the value of :c:func:"
"`PyRun_InteractiveLoop`, otherwise return the result of :c:func:"
"`PyRun_SimpleFile`.  *filename* is decoded from the filesystem encoding (:"
"func:`sys.getfilesystemencoding`).  If *filename* is ``NULL``, this function "
"uses ``\"???\"`` as the filename."
msgstr ""
"*fp* が対話的デバイス (コンソールや端末入力あるいは Unix 仮想端末) と関連づけ"
"られたファイルを参照している場合は、 :c:func:`PyRun_InteractiveLoop` の値を返"
"します。それ以外の場合は、 :c:func:`PyRun_SimpleFile` の結果を返します。 "
"*filename* はファイルシステムのエンコーディング (:func:`sys."
"getfilesystemencoding`) でデコードされます。 *filename* が ``NULL`` ならば、"
"この関数はファイル名として ``\"???\"`` を使います。"

#: ../../c-api/veryhigh.rst:82
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleStringFlags` below, "
"leaving the :c:type:`PyCompilerFlags`\\* argument set to ``NULL``."
msgstr ""

#: ../../c-api/veryhigh.rst:88
msgid ""
"Executes the Python source code from *command* in the :mod:`__main__` module "
"according to the *flags* argument. If :mod:`__main__` does not already "
"exist, it is created.  Returns ``0`` on success or ``-1`` if an exception "
"was raised.  If there was an error, there is no way to get the exception "
"information. For the meaning of *flags*, see below."
msgstr ""
":mod:`__main__` モジュールの中で *flags* に従って *command* に含まれる "
"Python ソースコードを実行します。 :mod:`__main__` がまだ存在しない場合は作成"
"されます。正常終了の場合は ``0`` を返し、また例外が発生した場合は ``-1`` を返"
"します。エラーがあっても、例外情報を得る方法はありません。 *flags* の意味につ"
"いては、後述します。"

#: ../../c-api/veryhigh.rst:94
msgid ""
"Note that if an otherwise unhandled :exc:`SystemExit` is raised, this "
"function will not return ``-1``, but exit the process, as long as "
"``Py_InspectFlag`` is not set."
msgstr ""
"``Py_InspectFlag`` が設定されていない場合、未処理の :exc:`SystemExit` 例外が"
"発生すると、この関数は ``1`` を返すのではなくプロセスを exit することに気をつ"
"けてください。"

#: ../../c-api/veryhigh.rst:101
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` below, "
"leaving *closeit* set to ``0`` and *flags* set to ``NULL``."
msgstr ""
"下記の :c:func:`PyRun_SimpleFileExFlags` の *closeit* を ``0`` に、 *flags* "
"を ``NULL`` にして単純化したインタフェースです。"

#: ../../c-api/veryhigh.rst:107
msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` below, "
"leaving *flags* set to ``NULL``."
msgstr ""
"下記の :c:func:`PyRun_SimpleFileExFlags` の *flags* を ``NULL`` にして単純化"
"したインタフェースです。"

#: ../../c-api/veryhigh.rst:113
msgid ""
"Similar to :c:func:`PyRun_SimpleStringFlags`, but the Python source code is "
"read from *fp* instead of an in-memory string. *filename* should be the name "
"of the file, it is decoded from the filesystem encoding (:func:`sys."
"getfilesystemencoding`).  If *closeit* is true, the file is closed before "
"PyRun_SimpleFileExFlags returns."
msgstr ""
":c:func:`PyRun_SimpleStringFlags` と似ていますが、Pythonソースコードをメモリ"
"内の文字列ではなく *fp* から読み込みます。 *filename* はそのファイルの名前で"
"なければならず、ファイルシステムのエンコーディング (:func:`sys."
"getfilesystemencoding`) でデコードされます。 *closeit* に真を指定した場合は、"
"PyRun_SimpleFileExFlags が処理を戻す前にファイルを閉じます。"

#: ../../c-api/veryhigh.rst:120
msgid ""
"On Windows, *fp* should be opened as binary mode (e.g. ``fopen(filename, "
"\"rb\")``. Otherwise, Python may not handle script file with LF line ending "
"correctly."
msgstr ""
"Windowsでは、 *fp* はバイナリモードで開くべきです (例えば ``fopen(filename, "
"\"rb\")``)。\n"
"そうしない場合は、 Python は行末が LF のスクリプトを正しく扱えないでしょう。"

#: ../../c-api/veryhigh.rst:126
msgid ""
"This is a simplified interface to :c:func:`PyRun_InteractiveOneFlags` below, "
"leaving *flags* set to ``NULL``."
msgstr ""
"下記の :c:func:`PyRun_InteractiveOneFlags` の *flags* を ``NULL`` にして単純"
"化したインタフェースです。"

#: ../../c-api/veryhigh.rst:132
msgid ""
"Read and execute a single statement from a file associated with an "
"interactive device according to the *flags* argument.  The user will be "
"prompted using ``sys.ps1`` and ``sys.ps2``.  *filename* is decoded from the "
"filesystem encoding (:func:`sys.getfilesystemencoding`)."
msgstr ""
"対話的デバイスに関連付けられたファイルから文を一つ読み込み、 *flags* に従って"
"実行します。 ``sys.ps1`` と ``sys.ps2`` を使って、ユーザにプロンプトを表示し"
"ます。 *filename* はファイルシステムのエンコーディング (:func:`sys."
"getfilesystemencoding`) でデコードされます。"

#: ../../c-api/veryhigh.rst:137
msgid ""
"Returns ``0`` when the input was executed successfully, ``-1`` if there was "
"an exception, or an error code from the :file:`errcode.h` include file "
"distributed as part of Python if there was a parse error.  (Note that :file:"
"`errcode.h` is not included by :file:`Python.h`, so must be included "
"specifically if needed.)"
msgstr ""
"入力が正常に実行されたときは ``0`` を返します。例外が発生した場合は ``-1`` を"
"返します。パースエラーの場合はPythonの一部として配布されている :file:"
"`errcode.h` インクルードファイルにあるエラーコードを返します。 (:file:"
"`Python.h` は :file:`errcode.h` をインクルードしません。従って、 必要な場合は"
"その都度インクルードしなければならないことに注意してください。)"

#: ../../c-api/veryhigh.rst:146
msgid ""
"This is a simplified interface to :c:func:`PyRun_InteractiveLoopFlags` "
"below, leaving *flags* set to ``NULL``."
msgstr ""
"下記の :c:func:`PyRun_InteractiveLoopFlags` の *flags* を ``NULL`` にして単純"
"化したインタフェースです。"

#: ../../c-api/veryhigh.rst:152
msgid ""
"Read and execute statements from a file associated with an interactive "
"device until EOF is reached.  The user will be prompted using ``sys.ps1`` "
"and ``sys.ps2``.  *filename* is decoded from the filesystem encoding (:func:"
"`sys.getfilesystemencoding`).  Returns ``0`` at EOF or a negative number "
"upon failure."
msgstr ""
"対話的デバイスに関連付けられたファイルから EOF に達するまで文を読み込み実行し"
"ます。\n"
"``sys.ps1`` と ``sys.ps2`` を使って、ユーザにプロンプトを表示します。\n"
"*filename* はファイルシステムのエンコーディング (:func:`sys."
"getfilesystemencoding`) でデコードされます。\n"
"EOFに達すると ``0`` を返すか、失敗したら負の数を返します。"

#: ../../c-api/veryhigh.rst:161
msgid ""
"Can be set to point to a function with the prototype ``int func(void)``.  "
"The function will be called when Python's interpreter prompt is about to "
"become idle and wait for user input from the terminal.  The return value is "
"ignored.  Overriding this hook can be used to integrate the interpreter's "
"prompt with other event loops, as done in the :file:`Modules/_tkinter.c` in "
"the Python source code."
msgstr ""
"``int func(void)`` というプロトタイプの関数へのポインタが設定できます。\n"
"この関数は、 Python のインタプリタのプロンプトがアイドル状態になりターミナル"
"からのユーザの入力を待つようになったときに呼び出されます。\n"
"返り値は無視されます。\n"
"このフックを上書きすることで、 Python のソースコードの中で :file:`Modules/"
"_tkinter.c` がやっているように、インタプリタのプロンプトと他のイベントループ"
"を統合できます。"

#: ../../c-api/veryhigh.rst:172
msgid ""
"Can be set to point to a function with the prototype ``char *func(FILE "
"*stdin, FILE *stdout, char *prompt)``, overriding the default function used "
"to read a single line of input at the interpreter's prompt.  The function is "
"expected to output the string *prompt* if it's not ``NULL``, and then read a "
"line of input from the provided standard input file, returning the resulting "
"string.  For example, The :mod:`readline` module sets this hook to provide "
"line-editing and tab-completion features."
msgstr ""
"``char *func(FILE *stdin, FILE *stdout, char *prompt)`` というプロトタイプの"
"関数へのポインタが設定でき、デフォルトの関数を上書きすることでインタプリタの"
"プロンプトへの入力を1行だけ読めます。\n"
"この関数は、文字列 *prompt* が ``NULL`` でない場合は *prompt* を出力し、与え"
"られた標準入力ファイルから入力を1行読み、結果の文字列を返すという動作が期待さ"
"れています。\n"
"例えば、 :mod:`readline` モジュールはこのフックを設定して、行編集機能やタブ補"
"完機能を提供しています。"

#: ../../c-api/veryhigh.rst:181
msgid ""
"The result must be a string allocated by :c:func:`PyMem_RawMalloc` or :c:"
"func:`PyMem_RawRealloc`, or ``NULL`` if an error occurred."
msgstr ""
"返り値は :c:func:`PyMem_RawMalloc` または :c:func:`PyMem_RawRealloc` でメモリ"
"確保した文字列、あるいはエラーが起きた場合には ``NULL`` でなければなりませ"
"ん。"

#: ../../c-api/veryhigh.rst:184
msgid ""
"The result must be allocated by :c:func:`PyMem_RawMalloc` or :c:func:"
"`PyMem_RawRealloc`, instead of being allocated by :c:func:`PyMem_Malloc` or :"
"c:func:`PyMem_Realloc`."
msgstr ""
"返り値は、 :c:func:`PyMem_Malloc` や :c:func:`PyMem_Realloc` ではなく、 :c:"
"func:`PyMem_RawMalloc` または :c:func:`PyMem_RawRealloc` でメモリ確保したもの"
"でなければなりません。"

#: ../../c-api/veryhigh.rst:192
msgid ""
"This is a simplified interface to :c:func:"
"`PyParser_SimpleParseStringFlagsFilename` below, leaving  *filename* set to "
"``NULL`` and *flags* set to ``0``."
msgstr ""
"下記の :c:func:`PyParser_SimpleParseStringFlagsFilename` の *filename* を "
"``NULL`` に、 *flags* を ``0`` にして単純化したインタフェースです。"

#: ../../c-api/veryhigh.rst:199
msgid ""
"This is a simplified interface to :c:func:"
"`PyParser_SimpleParseStringFlagsFilename` below, leaving  *filename* set to "
"``NULL``."
msgstr ""
"下記の :c:func:`PyParser_SimpleParseStringFlagsFilename` の *filename* を "
"``NULL`` にして単純化したインタフェースです。"

#: ../../c-api/veryhigh.rst:206
msgid ""
"Parse Python source code from *str* using the start token *start* according "
"to the *flags* argument.  The result can be used to create a code object "
"which can be evaluated efficiently. This is useful if a code fragment must "
"be evaluated many times. *filename* is decoded from the filesystem encoding "
"(:func:`sys.getfilesystemencoding`)."
msgstr ""
"開始トークン *start* を使って *str* に含まれる Python ソースコードを *flags* "
"引数に従ってパースします。効率的に評価可能なコードオブジェ クトを作成するため"
"にその結果を使うことができます。コード断片を何度も評価しなければならない場合"
"に役に立ちます。 *filename* はファイルシステムエンコーディング (:func:`sys."
"getfilesystemencoding`) でデコードされます。"

#: ../../c-api/veryhigh.rst:215
msgid ""
"This is a simplified interface to :c:func:`PyParser_SimpleParseFileFlags` "
"below, leaving *flags* set to ``0``."
msgstr ""
"下記の :c:func:`PyRun_SimpleParseFileFlags` の *flags* を ``0`` にして単純化"
"したインタフェースです。"

#: ../../c-api/veryhigh.rst:221
msgid ""
"Similar to :c:func:`PyParser_SimpleParseStringFlagsFilename`, but the Python "
"source code is read from *fp* instead of an in-memory string."
msgstr ""
":c:func:`PyParser_SimpleParseStringFlagsFilename` に似ていますが、 Pythonソー"
"スコードをメモリ内の文字列ではなく *fp* から読み込みます。 *filename* はその"
"ファイルの名前でなけれななりません。"

#: ../../c-api/veryhigh.rst:227
msgid ""
"This is a simplified interface to :c:func:`PyRun_StringFlags` below, leaving "
"*flags* set to ``NULL``."
msgstr ""
"下記の :c:func:`PyRun_StringFlags` の *flags* を ``NULL`` にして単純化したイ"
"ンタフェースです。"

#: ../../c-api/veryhigh.rst:233
msgid ""
"Execute Python source code from *str* in the context specified by the "
"objects *globals* and *locals* with the compiler flags specified by "
"*flags*.  *globals* must be a dictionary; *locals* can be any object that "
"implements the mapping protocol.  The parameter *start* specifies the start "
"token that should be used to parse the source code."
msgstr ""
"オブジェクトの *globals* と *locals* で指定されるコンテキストで、コンパイラフ"
"ラグに *flags* を設定した状態で、 *str* にある Python ソースコードを実行しま"
"す。\n"
"*globals* は辞書でなければなりません; *locals* はマッピングプロトコルを実装し"
"たオブジェクトなら何でも構いません。\n"
"引数 *start* はソースコードをパースするために使われるべき開始トークンを指定し"
"ます。"

#: ../../c-api/veryhigh.rst:239
msgid ""
"Returns the result of executing the code as a Python object, or ``NULL`` if "
"an exception was raised."
msgstr ""
"コードを実行した結果をPythonオブジェクトとして返します。または、例外が発生し"
"たならば ``NULL`` を返します。"

#: ../../c-api/veryhigh.rst:245
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving "
"*closeit* set to ``0`` and *flags* set to ``NULL``."
msgstr ""
"下記の :c:func:`PyRun_FileExFlags` の *closeit* を ``0`` にし、 *flags* を "
"``NULL`` にして単純化したインタフェースです。"

#: ../../c-api/veryhigh.rst:251
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving "
"*flags* set to ``NULL``."
msgstr ""
"下記の :c:func:`PyRun_FileExFlags` の *flags* を ``NULL`` にして単純化したイ"
"ンタフェースです。"

#: ../../c-api/veryhigh.rst:257
msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving "
"*closeit* set to ``0``."
msgstr ""
"下記の :c:func:`PyRun_FileExFlags` の *closeit* を ``0`` にして単純化したイン"
"タフェースです。"

#: ../../c-api/veryhigh.rst:263
msgid ""
"Similar to :c:func:`PyRun_StringFlags`, but the Python source code is read "
"from *fp* instead of an in-memory string. *filename* should be the name of "
"the file, it is decoded from the filesystem encoding (:func:`sys."
"getfilesystemencoding`). If *closeit* is true, the file is closed before :c:"
"func:`PyRun_FileExFlags` returns."
msgstr ""
":c:func:`PyRun_StringFlags` と似ていますが、Pythonソースコードをメモリ内の文"
"字列ではなく *fp* から読み込みます。 *filename* はそのファイルの名前でなけれ"
"ばならず、ファイルシステムのエンコーディング (:func:`sys."
"getfilesystemencoding`) でデコードされます。もし *closeit* を真にすると、 :c:"
"func:`PyRun_FileExFlags` が処理を戻す前にファイルを閉じます。"

#: ../../c-api/veryhigh.rst:272
msgid ""
"This is a simplified interface to :c:func:`Py_CompileStringFlags` below, "
"leaving *flags* set to ``NULL``."
msgstr ""
"下記の :c:func:`Py_CompileStringFlags` の *flags* を ``NULL`` にして単純化し"
"たインタフェースです。"

#: ../../c-api/veryhigh.rst:278
msgid ""
"This is a simplified interface to :c:func:`Py_CompileStringExFlags` below, "
"with *optimize* set to ``-1``."
msgstr ""
"下記の :c:func:`Py_CompileStringExFlags` の *optimize* を ``-1`` にして単純化"
"したインタフェースです。"

#: ../../c-api/veryhigh.rst:284
msgid ""
"Parse and compile the Python source code in *str*, returning the resulting "
"code object.  The start token is given by *start*; this can be used to "
"constrain the code which can be compiled and should be :const:"
"`Py_eval_input`, :const:`Py_file_input`, or :const:`Py_single_input`.  The "
"filename specified by *filename* is used to construct the code object and "
"may appear in tracebacks or :exc:`SyntaxError` exception messages.  This "
"returns ``NULL`` if the code cannot be parsed or compiled."
msgstr ""
"*str* 内の Python ソースコードをパースしてコンパイルし、作られたコードオブ"
"ジェクトを返します。開始トークンは *start* によって与えられます。これはコンパ"
"イル可能なコードを制限するために使うことができ、 :const:`Py_eval_input` 、 :"
"const:`Py_file_input` もしくは :const:`Py_single_input` であるべきです。 "
"*filename* で指定されるファイル名はコードオブジェクトを構築するために使われ、"
"トレースバックあるいは :exc:`SyntaxError` 例外メッセージに出てくる可能性があ"
"ります。コードがパースできなかったりコンパイルできなかったりした場合に、これ"
"は ``NULL`` を返します。"

#: ../../c-api/veryhigh.rst:292
msgid ""
"The integer *optimize* specifies the optimization level of the compiler; a "
"value of ``-1`` selects the optimization level of the interpreter as given "
"by :option:`-O` options.  Explicit levels are ``0`` (no optimization; "
"``__debug__`` is true), ``1`` (asserts are removed, ``__debug__`` is false) "
"or ``2`` (docstrings are removed too)."
msgstr ""
"整数 *optimize* は、コンパイラの最適化レベルを指定します;  ``-1`` は、インタ"
"プリタの :option:`-O` オプションで与えられるのと同じ最適化レベルを選びます。"
"明示的なレベルは、 ``0`` (最適化なし、 ``__debug__`` は真)、 ``1`` (assert は"
"取り除かれ、 ``__debug__`` は偽)、 ``2`` (docstring も取り除かれる) です。"

#: ../../c-api/veryhigh.rst:303
msgid ""
"Like :c:func:`Py_CompileStringObject`, but *filename* is a byte string "
"decoded from the filesystem encoding (:func:`os.fsdecode`)."
msgstr ""
":c:func:`Py_CompileStringObject` と似ていますが、 *filename* はファイルシステ"
"ムのエンコーディングでデコード (:func:`os.fsdecode`) されたバイト文字列です。"

#: ../../c-api/veryhigh.rst:310
msgid ""
"This is a simplified interface to :c:func:`PyEval_EvalCodeEx`, with just the "
"code object, and global and local variables.  The other arguments are set to "
"``NULL``."
msgstr ""
":c:func:`PyEval_EvalCodeEx` のシンプルなインタフェースで、コードオブジェクト"
"と、グローバル変数とローカル変数だけを受け取ります。\n"
"他の引数には ``NULL`` が渡されます。"

#: ../../c-api/veryhigh.rst:317
msgid ""
"Evaluate a precompiled code object, given a particular environment for its "
"evaluation.  This environment consists of a dictionary of global variables, "
"a mapping object of local variables, arrays of arguments, keywords and "
"defaults, a dictionary of default values for :ref:`keyword-only <keyword-"
"only_parameter>` arguments and a closure tuple of cells."
msgstr ""
"与えられた特定の環境で、コンパイル済みのコードオブジェクトを評価します。この"
"環境はグローバル変数の辞書と、ローカル変数のマッピングオブジェクト、引数の配"
"列、キーワードとデフォルト値、:ref:`キーワード専用 <keyword-only_parameter>` "
"引数のデフォルト値の辞書と、セルのクロージャタプルで構成されます。"

#: ../../c-api/veryhigh.rst:326
msgid ""
"The C structure of the objects used to describe frame objects. The fields of "
"this type are subject to change at any time."
msgstr ""
"フレームオブジェクトを表現するために使われるオブジェクトのC構造体。\n"
"この型のフィールドはいつでも変更され得ます。"

#: ../../c-api/veryhigh.rst:332
msgid ""
"Evaluate an execution frame.  This is a simplified interface to :c:func:"
"`PyEval_EvalFrameEx`, for backward compatibility."
msgstr ""
"実行フレームを評価します。これは :c:func:`PyEval_EvalFrameEx` に対するシンプ"
"ルなインタフェースで、後方互換性のためのものです。"

#: ../../c-api/veryhigh.rst:338
msgid ""
"This is the main, unvarnished function of Python interpretation.  The code "
"object associated with the execution frame *f* is executed, interpreting "
"bytecode and executing calls as needed.  The additional *throwflag* "
"parameter can mostly be ignored - if true, then it causes an exception to "
"immediately be thrown; this is used for the :meth:`~generator.throw` methods "
"of generator objects."
msgstr ""
"Python のインタープリタの主要な、直接的な関数です。実行フレーム *f* に関連付"
"けられたコードオブジェクトを実行します。 バイトコードを解釈して、必要に応じて"
"呼び出しを実行します。 追加の *throwflag* 引数はほとんど無視できます。 - も"
"し true なら、 すぐに例外を発生させます。これはジェネレータオブジェクトの :"
"meth:`~generator.throw` メソッドで利用されます。"

#: ../../c-api/veryhigh.rst:345
msgid ""
"This function now includes a debug assertion to help ensure that it does not "
"silently discard an active exception."
msgstr ""
"アクティブな例外を黙って捨てないことを保証するのに便利なように、この関数はデ"
"バッグアサーションを含むようになりました。"

#: ../../c-api/veryhigh.rst:352
msgid ""
"This function changes the flags of the current evaluation frame, and returns "
"true on success, false on failure."
msgstr ""
"現在の評価フレームのフラグを変更します。成功したら true を、失敗したら false "
"を返します。"

#: ../../c-api/veryhigh.rst:360
msgid ""
"The start symbol from the Python grammar for isolated expressions; for use "
"with :c:func:`Py_CompileString`."
msgstr ""
"単独の式に対するPython文法の開始記号で、 :c:func:`Py_CompileString` と一緒に"
"使います。"

#: ../../c-api/veryhigh.rst:368
msgid ""
"The start symbol from the Python grammar for sequences of statements as read "
"from a file or other source; for use with :c:func:`Py_CompileString`.  This "
"is the symbol to use when compiling arbitrarily long Python source code."
msgstr ""
"ファイルあるいは他のソースから読み込まれた文の並びに対するPython文法の開始記"
"号で、 :c:func:`Py_CompileString` と一緒に使います。これは任意の長さのPython"
"ソースコードをコンパイルするときに使う記号です。"

#: ../../c-api/veryhigh.rst:377
msgid ""
"The start symbol from the Python grammar for a single statement; for use "
"with :c:func:`Py_CompileString`. This is the symbol used for the interactive "
"interpreter loop."
msgstr ""
"単一の文に対するPython文法の開始記号で、 :c:func:`Py_CompileString` と一緒に"
"使います。これは対話式のインタプリタループのための記号です。"

#: ../../c-api/veryhigh.rst:384
msgid ""
"This is the structure used to hold compiler flags.  In cases where code is "
"only being compiled, it is passed as ``int flags``, and in cases where code "
"is being executed, it is passed as ``PyCompilerFlags *flags``.  In this "
"case, ``from __future__ import`` can modify *flags*."
msgstr ""
"コンパイラフラグを収めておくための構造体です。コードをコンパイルするだけの場"
"合、この構造体が ``int flags`` として渡されます。コードを実行する場合には "
"``PyCompilerFlags *flags`` として渡されます。この場合、``from __future__ "
"import`` は *flags* の内容を変更できます。"

#: ../../c-api/veryhigh.rst:389
msgid ""
"Whenever ``PyCompilerFlags *flags`` is ``NULL``, :attr:`cf_flags` is treated "
"as equal to ``0``, and any modification due to ``from __future__ import`` is "
"discarded."
msgstr ""
"``PyCompilerFlags *flags`` が ``NULL`` の場合、 :attr:`cf_flags` は ``0`` と"
"して扱われ、 ``from __future__ import`` による変更は無視されます。"

#: ../../c-api/veryhigh.rst:395
msgid "Compiler flags."
msgstr "コンパイラフラグ。"

#: ../../c-api/veryhigh.rst:399
msgid ""
"*cf_feature_version* is the minor Python version. It should be initialized "
"to ``PY_MINOR_VERSION``."
msgstr ""

#: ../../c-api/veryhigh.rst:402
msgid ""
"The field is ignored by default, it is used if and only if ``PyCF_ONLY_AST`` "
"flag is set in *cf_flags*."
msgstr ""

#: ../../c-api/veryhigh.rst:405
msgid "Added *cf_feature_version* field."
msgstr ""

#: ../../c-api/veryhigh.rst:411
msgid ""
"This bit can be set in *flags* to cause division operator ``/`` to be "
"interpreted as \"true division\" according to :pep:`238`."
msgstr ""
"このビットを *flags* にセットすると、除算演算子 ``/`` は :pep:`238` による"
"「真の除算 (true division)」として扱われます。"
