# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Shin Saito, 2021
# 秘湯 <xwhhsprings@gmail.com>, 2023
# tomo, 2023
# Inada Naoki <songofacandy@gmail.com>, 2023
# Arihiro TAKASE, 2023
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2023
# Takanori Suzuki <takanori@takanory.net>, 2023
# TENMYO Masakazu, 2023
# 石井明久, 2024
# Takeshi Nakazato, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:49+0000\n"
"Last-Translator: Takeshi Nakazato, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../reference/lexical_analysis.rst:6
msgid "Lexical analysis"
msgstr "字句解析"

#: ../../reference/lexical_analysis.rst:10
msgid ""
"A Python program is read by a *parser*.  Input to the parser is a stream of "
"*tokens*, generated by the *lexical analyzer*.  This chapter describes how "
"the lexical analyzer breaks a file into tokens."
msgstr ""
"Python で書かれたプログラムは *パーザ (parser)* に読み込まれます。パーザへの"
"入力は、 *字句解析器 (lexical analyzer)* によって生成された一連の *トークン "
"(token)* からなります。この章では、字句解析器がファイルをトークン列に分解する"
"方法について解説します。"

#: ../../reference/lexical_analysis.rst:14
msgid ""
"Python reads program text as Unicode code points; the encoding of a source "
"file can be given by an encoding declaration and defaults to UTF-8, see :pep:"
"`3120` for details.  If the source file cannot be decoded, a :exc:"
"`SyntaxError` is raised."
msgstr ""
"Python はプログラムテキストを Unicode コードポイントとして読み込みます。ソー"
"スファイルのエンコーディングはエンコーディング宣言で与えられ、デフォルトは "
"UTF-8  です。詳細は :pep:`3120` を参照してください。ソースファイルがデコード"
"できなければ、 :exc:`SyntaxError` が送出されます。"

#: ../../reference/lexical_analysis.rst:23
msgid "Line structure"
msgstr "行構造"

#: ../../reference/lexical_analysis.rst:27
msgid "A Python program is divided into a number of *logical lines*."
msgstr "Python プログラムは多数の *論理行 (logical lines)* に分割されます。"

#: ../../reference/lexical_analysis.rst:33
msgid "Logical lines"
msgstr "論理行 (logical line)"

#: ../../reference/lexical_analysis.rst:37
msgid ""
"The end of a logical line is represented by the token NEWLINE.  Statements "
"cannot cross logical line boundaries except where NEWLINE is allowed by the "
"syntax (e.g., between statements in compound statements). A logical line is "
"constructed from one or more *physical lines* by following the explicit or "
"implicit *line joining* rules."
msgstr ""
"論理行の終端は、トークン NEWLINE で表されます。構文上許されている場合 (複合"
"文: compound statement 中の実行文: statement) を除いて、実行文は論理行間にま"
"たがることはできません。論理行は一行またはそれ以上の *物理行(physical line)* "
"からなり、物理行の末尾には明示的または非明示的な *行連結(line joining)* 規則"
"が続きます。"

#: ../../reference/lexical_analysis.rst:47
msgid "Physical lines"
msgstr "物理行 (physical line)"

#: ../../reference/lexical_analysis.rst:49
msgid ""
"A physical line is a sequence of characters terminated by an end-of-line "
"sequence.  In source files and strings, any of the standard platform line "
"termination sequences can be used - the Unix form using ASCII LF (linefeed), "
"the Windows form using the ASCII sequence CR LF (return followed by "
"linefeed), or the old Macintosh form using the ASCII CR (return) character.  "
"All of these forms can be used equally, regardless of platform. The end of "
"input also serves as an implicit terminator for the final physical line."
msgstr ""
"物理行とは、行終端コードで区切られた文字列のことです。\n"
"ソースファイルやソース文字列では、各プラットフォームごとの標準の行終端コード"
"を使用することができます。\n"
"Unix形式ではASCII LF (行送り: linefeed)文字、 Windows形式ではASCII 配列の CR "
"LF (復帰: return に続いて行送り) 、 Macintosh形式ではASCII CR (復帰) 文字で"
"す。\n"
"これら全ての形式のコードは、違うプラットフォームでも等しく使用することができ"
"ます。\n"
"入力の末尾も、最後の物理行の暗黙的な終端としての役割を果たします。"

#: ../../reference/lexical_analysis.rst:57
msgid ""
"When embedding Python, source code strings should be passed to Python APIs "
"using the standard C conventions for newline characters (the ``\\n`` "
"character, representing ASCII LF, is the line terminator)."
msgstr ""
"Pythonに埋め込む場合には、標準のC言語の改行文字の変換規則 (ASCII LFを表現した"
"文字コード ``\\n`` が行終端となります) に従って、 Python APIにソースコードを"
"渡す必要があります。"

#: ../../reference/lexical_analysis.rst:65
msgid "Comments"
msgstr "コメント (Comments)"

#: ../../reference/lexical_analysis.rst:70
msgid ""
"A comment starts with a hash character (``#``) that is not part of a string "
"literal, and ends at the end of the physical line.  A comment signifies the "
"end of the logical line unless the implicit line joining rules are invoked. "
"Comments are ignored by the syntax."
msgstr ""
"コメントは文字列リテラル内に入っていないハッシュ文字 (``#``) から始まり、同じ"
"物理行の末端で終わります。\n"
"非明示的な行継続規則が適用されていない限り、コメントは論理行を終端させま"
"す。\n"
"コメントは構文上無視されます。"

#: ../../reference/lexical_analysis.rst:79
msgid "Encoding declarations"
msgstr "エンコード宣言 (encoding declaration)"

#: ../../reference/lexical_analysis.rst:84
msgid ""
"If a comment in the first or second line of the Python script matches the "
"regular expression ``coding[=:]\\s*([-\\w.]+)``, this comment is processed "
"as an encoding declaration; the first group of this expression names the "
"encoding of the source code file. The encoding declaration must appear on a "
"line of its own. If it is the second line, the first line must also be a "
"comment-only line. The recommended forms of an encoding expression are ::"
msgstr ""
"Python スクリプト中の一行目か二行目にあるコメントが正規表現 "
"``coding[=:]\\s*([-\\w.]+)`` にマッチする場合、コメントはエンコード宣言として"
"処理されます; この表現の最初のグループがソースコードファイルのエンコードを指"
"定します。エンコード宣言は自身の行になければなりません。二行目にある場合、一"
"行目もコメントのみの行でなければなりません。エンコード宣言式として推奨する形"
"式は ::"

#: ../../reference/lexical_analysis.rst:91
msgid "# -*- coding: <encoding-name> -*-"
msgstr ""

#: ../../reference/lexical_analysis.rst:93
msgid "which is recognized also by GNU Emacs, and ::"
msgstr "これは GNU Emacs で認識できます。または ::"

#: ../../reference/lexical_analysis.rst:95
msgid "# vim:fileencoding=<encoding-name>"
msgstr ""

#: ../../reference/lexical_analysis.rst:97
msgid "which is recognized by Bram Moolenaar's VIM."
msgstr "これは、Bram Moolenar による VIM が認識できる形式です。"

#: ../../reference/lexical_analysis.rst:99
msgid ""
"If no encoding declaration is found, the default encoding is UTF-8.  If the "
"implicit or explicit encoding of a file is UTF-8, an initial UTF-8 byte-"
"order mark (b'\\xef\\xbb\\xbf') is ignored rather than being a syntax error."
msgstr ""

#: ../../reference/lexical_analysis.rst:103
msgid ""
"If an encoding is declared, the encoding name must be recognized by Python "
"(see :ref:`standard-encodings`). The encoding is used for all lexical "
"analysis, including string literals, comments and identifiers."
msgstr ""
"エンコーディングが宣言される場合、そのエンコーディング名は Python によって認"
"識できなければなりません (:ref:`standard-encodings` を参照してください)。宣言"
"されたエンコーディングは、例えば文字列リテラル、コメント、識別子などの、全て"
"の字句解析に使われます。"

#: ../../reference/lexical_analysis.rst:112
msgid "Explicit line joining"
msgstr "明示的な行継続"

#: ../../reference/lexical_analysis.rst:116
msgid ""
"Two or more physical lines may be joined into logical lines using backslash "
"characters (``\\``), as follows: when a physical line ends in a backslash "
"that is not part of a string literal or comment, it is joined with the "
"following forming a single logical line, deleting the backslash and the "
"following end-of-line character.  For example::"
msgstr ""
"二つまたはそれ以上の物理行を論理行としてつなげるためには、バックスラッシュ文"
"字 (``\\``) を使って以下のようにします: 物理行が文字列リテラルやコメント中の"
"文字でないバックスラッシュで終わっている場合、後続する行とつなげて一つの論理"
"行を構成し、バックスラッシュおよびバックスラッシュの後ろにある行末文字を削除"
"します。例えば::"

#: ../../reference/lexical_analysis.rst:122
msgid ""
"if 1900 < year < 2100 and 1 <= month <= 12 \\\n"
"   and 1 <= day <= 31 and 0 <= hour < 24 \\\n"
"   and 0 <= minute < 60 and 0 <= second < 60:   # Looks like a valid date\n"
"        return 1"
msgstr ""

#: ../../reference/lexical_analysis.rst:127
msgid ""
"A line ending in a backslash cannot carry a comment.  A backslash does not "
"continue a comment.  A backslash does not continue a token except for string "
"literals (i.e., tokens other than string literals cannot be split across "
"physical lines using a backslash).  A backslash is illegal elsewhere on a "
"line outside a string literal."
msgstr ""
"バックスラッシュで終わる行にはコメントを入れることはできません。また、バック"
"スラッシュを使ってコメントを継続することはできません。バックスラッシュが文字"
"列リテラル中にある場合を除き、バックスラッシュの後ろにトークンを継続すること"
"はできません (すなわち、物理行内の文字列リテラル以外のトークンをバックスラッ"
"シュを使って分断することはできません)。上記以外の場所では、文字列リテラル外に"
"あるバックスラッシュはどこにあっても不正となります。"

#: ../../reference/lexical_analysis.rst:137
msgid "Implicit line joining"
msgstr "非明示的な行継続"

#: ../../reference/lexical_analysis.rst:139
msgid ""
"Expressions in parentheses, square brackets or curly braces can be split "
"over more than one physical line without using backslashes. For example::"
msgstr ""
"丸括弧 (parentheses)、角括弧 (square bracket) 、および波括弧 (curly brace) 内"
"の式は、バックスラッシュを使わずに一行以上の物理行に分割することができます。"
"例えば::"

#: ../../reference/lexical_analysis.rst:142
msgid ""
"month_names = ['Januari', 'Februari', 'Maart',      # These are the\n"
"               'April',   'Mei',      'Juni',       # Dutch names\n"
"               'Juli',    'Augustus', 'September',  # for the months\n"
"               'Oktober', 'November', 'December']   # of the year"
msgstr ""

#: ../../reference/lexical_analysis.rst:147
msgid ""
"Implicitly continued lines can carry comments.  The indentation of the "
"continuation lines is not important.  Blank continuation lines are allowed. "
"There is no NEWLINE token between implicit continuation lines.  Implicitly "
"continued lines can also occur within triple-quoted strings (see below); in "
"that case they cannot carry comments."
msgstr ""
"非明示的に継続された行にはコメントを含めることができます。継続行のインデント"
"は重要ではありません。空の継続行を書くことができます。非明示的な継続行中に"
"は、NEWLINE トークンは存在しません。非明示的な行の継続は、三重クオートされた"
"文字列 (下記参照) でも発生します; この場合には、コメントを含めることができま"
"せん。"

#: ../../reference/lexical_analysis.rst:157
msgid "Blank lines"
msgstr "空行"

#: ../../reference/lexical_analysis.rst:161
msgid ""
"A logical line that contains only spaces, tabs, formfeeds and possibly a "
"comment, is ignored (i.e., no NEWLINE token is generated).  During "
"interactive input of statements, handling of a blank line may differ "
"depending on the implementation of the read-eval-print loop.  In the "
"standard interactive interpreter, an entirely blank logical line (i.e. one "
"containing not even whitespace or a comment) terminates a multi-line "
"statement."
msgstr ""
"スペース、タブ、フォームフィード、およびコメントのみを含む論理行は無視されま"
"す (すなわち、NEWLINE トークンは生成されません)。文を対話的に入力している際に"
"は、空行の扱いは行読み込み-評価-出力 (read-eval-print) ループの実装によって異"
"なることがあります。標準的な対話的インタプリタの実装では、完全な空行でできた"
"論理行 (すなわち、空白文字もコメントも全く含まない空行) は、複数行からなる文"
"の終端を示します。"

#: ../../reference/lexical_analysis.rst:172
msgid "Indentation"
msgstr "インデント"

#: ../../reference/lexical_analysis.rst:176
msgid ""
"Leading whitespace (spaces and tabs) at the beginning of a logical line is "
"used to compute the indentation level of the line, which in turn is used to "
"determine the grouping of statements."
msgstr ""
"論理行の行頭にある、先頭の空白 (スペースおよびタブ) の連なりは、その行のイン"
"デントレベルを計算するために使われます。インデントレベルは、実行文のグループ"
"化方法を決定するために用いられます。"

#: ../../reference/lexical_analysis.rst:180
msgid ""
"Tabs are replaced (from left to right) by one to eight spaces such that the "
"total number of characters up to and including the replacement is a multiple "
"of eight (this is intended to be the same rule as used by Unix).  The total "
"number of spaces preceding the first non-blank character then determines the "
"line's indentation.  Indentation cannot be split over multiple physical "
"lines using backslashes; the whitespace up to the first backslash determines "
"the indentation."
msgstr ""
"タブは (左から右の方向に) 1 つにつき 8 つのスペースで置き換えられ、置き換え後"
"の文字数は 8 の倍数になります (Unix で使われている規則と同じになるよう意図さ"
"れています)。そして、最初の非空白文字までのスペースの総数が、その行のインデン"
"トを決定します。インデントは、バックスラッシュで複数の物理行に分割できませ"
"ん; 最初のバックスラッシュまでの空白がインデントを決定します。"

#: ../../reference/lexical_analysis.rst:188
msgid ""
"Indentation is rejected as inconsistent if a source file mixes tabs and "
"spaces in a way that makes the meaning dependent on the worth of a tab in "
"spaces; a :exc:`TabError` is raised in that case."
msgstr ""
"ソースファイルがタブとスペースを混在させ、その意味づけがタブのスペース換算数"
"に依存するようなら、インデントは不合理なものとして却下されます。その場合は :"
"exc:`TabError` が送出されます。"

#: ../../reference/lexical_analysis.rst:192
msgid ""
"**Cross-platform compatibility note:** because of the nature of text editors "
"on non-UNIX platforms, it is unwise to use a mixture of spaces and tabs for "
"the indentation in a single source file.  It should also be noted that "
"different platforms may explicitly limit the maximum indentation level."
msgstr ""
"**プラットフォーム間の互換性に関する注意:** 非 UNIX プラットフォームにおける"
"テキストエディタの性質上、一つのソースファイル内でタブとインデントを混在させ"
"て使うのは賢明ではありません。また、プラットフォームによっては、最大インデン"
"トレベルを明示的に制限しているかもしれません。"

#: ../../reference/lexical_analysis.rst:197
msgid ""
"A formfeed character may be present at the start of the line; it will be "
"ignored for the indentation calculations above.  Formfeed characters "
"occurring elsewhere in the leading whitespace have an undefined effect (for "
"instance, they may reset the space count to zero)."
msgstr ""
"フォームフィード文字が行の先頭にあっても構いません; フォームフィード文字は上"
"のインデントレベル計算時には無視されます。フォームフィード文字が先頭の空白中"
"の他の場所にある場合、その影響は未定義です (例えば、スペースの数を 0 にリセッ"
"トするかもしれません)。"

#: ../../reference/lexical_analysis.rst:204
msgid ""
"The indentation levels of consecutive lines are used to generate INDENT and "
"DEDENT tokens, using a stack, as follows."
msgstr ""
"連続する行における各々のインデントレベルは、 INDENT および DEDENT トークンを"
"生成するために使われます。トークンの生成はスタックを用いて以下のように行われ"
"ます。"

#: ../../reference/lexical_analysis.rst:207
msgid ""
"Before the first line of the file is read, a single zero is pushed on the "
"stack; this will never be popped off again.  The numbers pushed on the stack "
"will always be strictly increasing from bottom to top.  At the beginning of "
"each logical line, the line's indentation level is compared to the top of "
"the stack. If it is equal, nothing happens. If it is larger, it is pushed on "
"the stack, and one INDENT token is generated.  If it is smaller, it *must* "
"be one of the numbers occurring on the stack; all numbers on the stack that "
"are larger are popped off, and for each number popped off a DEDENT token is "
"generated.  At the end of the file, a DEDENT token is generated for each "
"number remaining on the stack that is larger than zero."
msgstr ""
"ファイル中の最初の行を読み出す前に、スタックにゼロが一つ積まれ (push され) ま"
"す; このゼロは決して除去 (pop) されることはありません。スタックの先頭に積まれ"
"てゆく数字は、常にスタックの末尾から先頭にかけて厳密に増加するようになってい"
"ます。各論理行の開始位置において、その行のインデントレベル値がスタックの先頭"
"の値と比較されます。値が等しければ何もしません。インデントレベル値がスタック"
"上の値よりも大きければ、インデントレベル値はスタックに積まれ、INDENT トークン"
"が一つ生成されます。インデントレベル値がスタック上の値よりも小さい場合、その"
"値はスタック内のいずれかの値と *等しくなければなりません* ; スタック上のイン"
"デントレベル値よりも大きい値はすべて除去され、値が一つ除去されるごとに "
"DEDENT トークンが一つ生成されます。ファイルの末尾では、スタックに残っているゼ"
"ロより大きい値は全て除去され、値が一つ除去されるごとに DEDENT トークンが一つ"
"生成されます。"

#: ../../reference/lexical_analysis.rst:218
msgid ""
"Here is an example of a correctly (though confusingly) indented piece of "
"Python code::"
msgstr ""
"以下の例に正しく (しかし当惑させるように) インデントされた Python コードの一"
"部を示します::"

#: ../../reference/lexical_analysis.rst:221
msgid ""
"def perm(l):\n"
"        # Compute the list of all permutations of l\n"
"    if len(l) <= 1:\n"
"                  return [l]\n"
"    r = []\n"
"    for i in range(len(l)):\n"
"             s = l[:i] + l[i+1:]\n"
"             p = perm(s)\n"
"             for x in p:\n"
"              r.append(l[i:i+1] + x)\n"
"    return r"
msgstr ""

#: ../../reference/lexical_analysis.rst:233
msgid "The following example shows various indentation errors::"
msgstr "以下の例は、様々なインデントエラーになります::"

#: ../../reference/lexical_analysis.rst:235
msgid ""
" def perm(l):                       # error: first line indented\n"
"for i in range(len(l)):             # error: not indented\n"
"    s = l[:i] + l[i+1:]\n"
"        p = perm(l[:i] + l[i+1:])   # error: unexpected indent\n"
"        for x in p:\n"
"                r.append(l[i:i+1] + x)\n"
"            return r                # error: inconsistent dedent"
msgstr ""

#: ../../reference/lexical_analysis.rst:243
msgid ""
"(Actually, the first three errors are detected by the parser; only the last "
"error is found by the lexical analyzer --- the indentation of ``return r`` "
"does not match a level popped off the stack.)"
msgstr ""
"(実際は、最初の 3 つのエラーはパーザによって検出されます; 最後のエラーのみが"
"字句解析器で見つかります --- ``return r`` のインデントは、スタックから逐次除"
"去されていくどのインデントレベル値とも一致しません)"

#: ../../reference/lexical_analysis.rst:251
msgid "Whitespace between tokens"
msgstr "トークン間の空白"

#: ../../reference/lexical_analysis.rst:253
msgid ""
"Except at the beginning of a logical line or in string literals, the "
"whitespace characters space, tab and formfeed can be used interchangeably to "
"separate tokens.  Whitespace is needed between two tokens only if their "
"concatenation could otherwise be interpreted as a different token (e.g., ab "
"is one token, but a b is two tokens)."
msgstr ""
"論理行の先頭や文字列の内部にある場合を除き、空白文字であるスペース、タブ、お"
"よびフォームフィードは、トークンを分割するために自由に利用することができま"
"す。二つのトークンを並べて書くと別のトークンとしてみなされてしまうような場合"
"には、トークンの間に空白が必要となります (例えば、ab は一つのトークンです"
"が、 a b は二つのトークンとなります)。"

#: ../../reference/lexical_analysis.rst:263
msgid "Other tokens"
msgstr "その他のトークン"

#: ../../reference/lexical_analysis.rst:265
msgid ""
"Besides NEWLINE, INDENT and DEDENT, the following categories of tokens "
"exist: *identifiers*, *keywords*, *literals*, *operators*, and *delimiters*. "
"Whitespace characters (other than line terminators, discussed earlier) are "
"not tokens, but serve to delimit tokens. Where ambiguity exists, a token "
"comprises the longest possible string that forms a legal token, when read "
"from left to right."
msgstr ""
"NEWLINE、INDENT、および DEDENT の他、以下のトークンのカテゴリ: *識別子 "
"(identifier)*, *キーワード(keyword)*, *リテラル*, *演算子 (operator)*, *デリ"
"ミタ (delimiter)* が存在します。空白文字 (上で述べた行終端文字以外) はトーク"
"ンではありませんが、トークンを区切る働きがあります。トークンの解析にあいまい"
"さが生じた場合、トークンは左から右に読んで不正でないトークンを構築できる最長"
"の文字列を含むように構築されます。"

#: ../../reference/lexical_analysis.rst:275
msgid "Identifiers and keywords"
msgstr "識別子 (identifier) およびキーワード (keyword)"

#: ../../reference/lexical_analysis.rst:279
msgid ""
"Identifiers (also referred to as *names*) are described by the following "
"lexical definitions."
msgstr "識別子 (または *名前 (name)*) は、以下の字句定義で記述されます。"

#: ../../reference/lexical_analysis.rst:282
msgid ""
"The syntax of identifiers in Python is based on the Unicode standard annex "
"UAX-31, with elaboration and changes as defined below; see also :pep:`3131` "
"for further details."
msgstr ""
"Python における識別子の構文は、Unicode 標準仕様添付書類 UAX-31 に基づき、詳細"
"と変更点は以下で定義します。詳しくは :pep:`3131` を参照してください。"

#: ../../reference/lexical_analysis.rst:286
msgid ""
"Within the ASCII range (U+0001..U+007F), the valid characters for "
"identifiers are the same as in Python 2.x: the uppercase and lowercase "
"letters ``A`` through ``Z``, the underscore ``_`` and, except for the first "
"character, the digits ``0`` through ``9``."
msgstr ""
"ASCII 範囲 (U+0001..U+007F) 内では、識別子として有効な文字は Python 2.x にお"
"けるものと同じです。大文字と小文字の ``A`` から ``Z``、アンダースコア ``_``、"
"先頭の文字を除く数字 ``0`` から ``9`` です。"

#: ../../reference/lexical_analysis.rst:291
msgid ""
"Python 3.0 introduces additional characters from outside the ASCII range "
"(see :pep:`3131`).  For these characters, the classification uses the "
"version of the Unicode Character Database as included in the :mod:"
"`unicodedata` module."
msgstr ""
"Python 3.0 は、さらに ASCII 範囲外から文字を導入します (:pep:`3131` を参照し"
"てください。)。これらの文字については、分類は :mod:`unicodedata` モジュールに"
"含まれる Unicode Character Database の版を使います。"

#: ../../reference/lexical_analysis.rst:295
msgid "Identifiers are unlimited in length.  Case is significant."
msgstr "識別子の長さには制限がありません。大小文字は区別されます。"

#: ../../reference/lexical_analysis.rst:304
msgid "The Unicode category codes mentioned above stand for:"
msgstr "上で言及した Unicode カテゴリコードは以下を表します:"

#: ../../reference/lexical_analysis.rst:306
msgid "*Lu* - uppercase letters"
msgstr "*Lu* - 大文字 (uppercase letters)"

#: ../../reference/lexical_analysis.rst:307
msgid "*Ll* - lowercase letters"
msgstr "*Ll* - 小文字 (lowercase letters)"

#: ../../reference/lexical_analysis.rst:308
msgid "*Lt* - titlecase letters"
msgstr "*Lt* - 先頭が大文字 (titlecase letters)"

#: ../../reference/lexical_analysis.rst:309
msgid "*Lm* - modifier letters"
msgstr "*Lm* - 修飾文字 (modifier letters)"

#: ../../reference/lexical_analysis.rst:310
msgid "*Lo* - other letters"
msgstr "*Lo* - その他の文字 (other letters)"

#: ../../reference/lexical_analysis.rst:311
msgid "*Nl* - letter numbers"
msgstr "*Nl* - 数値を表す文字 (letter numbers)"

#: ../../reference/lexical_analysis.rst:312
msgid "*Mn* - nonspacing marks"
msgstr "*Mn* - 字幅のない記号 (nonspacing marks)"

#: ../../reference/lexical_analysis.rst:313
msgid "*Mc* - spacing combining marks"
msgstr "*Mc* - 字幅のある結合記号 (spacing combining marks)"

#: ../../reference/lexical_analysis.rst:314
msgid "*Nd* - decimal numbers"
msgstr "*Nd* - 10 進数字 (decimal numbers)"

#: ../../reference/lexical_analysis.rst:315
msgid "*Pc* - connector punctuations"
msgstr "*Pc* - 連結用句読記号 (connector punctuations)"

#: ../../reference/lexical_analysis.rst:316
msgid ""
"*Other_ID_Start* - explicit list of characters in `PropList.txt <https://www."
"unicode.org/Public/15.1.0/ucd/PropList.txt>`_ to support backwards "
"compatibility"
msgstr ""

#: ../../reference/lexical_analysis.rst:319
msgid "*Other_ID_Continue* - likewise"
msgstr "*Other_ID_Continue* - 同様"

#: ../../reference/lexical_analysis.rst:321
msgid ""
"All identifiers are converted into the normal form NFKC while parsing; "
"comparison of identifiers is based on NFKC."
msgstr ""
"すべての識別子は、解析中は正規化形式 NFKC に変換されます。識別子間の比較は "
"NFKC に基づきます。"

#: ../../reference/lexical_analysis.rst:324
msgid ""
"A non-normative HTML file listing all valid identifier characters for "
"Unicode 15.1.0 can be found at https://www.unicode.org/Public/15.1.0/ucd/"
"DerivedCoreProperties.txt"
msgstr ""

#: ../../reference/lexical_analysis.rst:332
msgid "Keywords"
msgstr "キーワード (keyword)"

#: ../../reference/lexical_analysis.rst:338
msgid ""
"The following identifiers are used as reserved words, or *keywords* of the "
"language, and cannot be used as ordinary identifiers.  They must be spelled "
"exactly as written here:"
msgstr ""
"以下の識別子は、予約語、または Python 言語における *キーワード (keyword)* と"
"して使われ、通常の識別子として使うことはできません。キーワードは厳密に下記の"
"通りに綴らなければなりません:"

#: ../../reference/lexical_analysis.rst:342
msgid ""
"False      await      else       import     pass\n"
"None       break      except     in         raise\n"
"True       class      finally    is         return\n"
"and        continue   for        lambda     try\n"
"as         def        from       nonlocal   while\n"
"assert     del        global     not        with\n"
"async      elif       if         or         yield"
msgstr ""

#: ../../reference/lexical_analysis.rst:356
msgid "Soft Keywords"
msgstr "ソフトキーワード"

#: ../../reference/lexical_analysis.rst:362
msgid ""
"Some identifiers are only reserved under specific contexts. These are known "
"as *soft keywords*.  The identifiers ``match``, ``case``, ``type`` and ``_`` "
"can syntactically act as keywords in certain contexts, but this distinction "
"is done at the parser level, not when tokenizing."
msgstr ""

#: ../../reference/lexical_analysis.rst:367
msgid ""
"As soft keywords, their use in the grammar is possible while still "
"preserving compatibility with existing code that uses these names as "
"identifier names."
msgstr ""

#: ../../reference/lexical_analysis.rst:371
msgid ""
"``match``, ``case``, and ``_`` are used in the :keyword:`match` statement. "
"``type`` is used in the :keyword:`type` statement."
msgstr ""

#: ../../reference/lexical_analysis.rst:374
msgid "``type`` is now a soft keyword."
msgstr ""

#: ../../reference/lexical_analysis.rst:383
msgid "Reserved classes of identifiers"
msgstr "予約済みの識別子種 (reserved classes of identifiers)"

#: ../../reference/lexical_analysis.rst:385
msgid ""
"Certain classes of identifiers (besides keywords) have special meanings.  "
"These classes are identified by the patterns of leading and trailing "
"underscore characters:"
msgstr ""
"ある種の (キーワードを除く) 識別子には、特殊な意味があります。これらの識別子"
"種は、先頭や末尾にあるアンダースコア文字のパターンで区別されます:"

#: ../../reference/lexical_analysis.rst:389
msgid "``_*``"
msgstr "``_*``"

#: ../../reference/lexical_analysis.rst:390
msgid "Not imported by ``from module import *``."
msgstr ""

#: ../../reference/lexical_analysis.rst:392
msgid "``_``"
msgstr ""

#: ../../reference/lexical_analysis.rst:393
msgid ""
"In a ``case`` pattern within a :keyword:`match` statement, ``_`` is a :ref:"
"`soft keyword <soft-keywords>` that denotes a :ref:`wildcard <wildcard-"
"patterns>`."
msgstr ""

#: ../../reference/lexical_analysis.rst:397
msgid ""
"Separately, the interactive interpreter makes the result of the last "
"evaluation available in the variable ``_``. (It is stored in the :mod:"
"`builtins` module, alongside built-in functions like ``print``.)"
msgstr ""

#: ../../reference/lexical_analysis.rst:402
msgid ""
"Elsewhere, ``_`` is a regular identifier. It is often used to name "
"\"special\" items, but it is not special to Python itself."
msgstr ""

#: ../../reference/lexical_analysis.rst:407
msgid ""
"The name ``_`` is often used in conjunction with internationalization; refer "
"to the documentation for the :mod:`gettext` module for more information on "
"this convention."
msgstr ""
"名前 ``_`` は、しばしば国際化 (internationalization) と共に用いられます; この"
"慣習についての詳しい情報は、 :mod:`gettext` を参照してください。"

#: ../../reference/lexical_analysis.rst:411
msgid "It is also commonly used for unused variables."
msgstr ""

#: ../../reference/lexical_analysis.rst:413
msgid "``__*__``"
msgstr "``__*__``"

#: ../../reference/lexical_analysis.rst:414
msgid ""
"System-defined names, informally known as \"dunder\" names. These names are "
"defined by the interpreter and its implementation (including the standard "
"library). Current system names are discussed in the :ref:`specialnames` "
"section and elsewhere. More will likely be defined in future versions of "
"Python.  *Any* use of ``__*__`` names, in any context, that does not follow "
"explicitly documented use, is subject to breakage without warning."
msgstr ""
"システムで定義された (system-defined) 名前です。非公式には\"dunder\"な名前と"
"呼ばれます(訳注: double underscoresの略)。これらの名前はインタープリタと (標"
"準ライブラリを含む) 実装上で定義されています。 現行のシステムでの名前は :ref:"
"`specialnames` などで話題に挙げられています。 Python の将来のバージョンではよ"
"り多くの名前が定義されることになります。このドキュメントで明記されている用法"
"に従わない、 *あらゆる* ``__*__`` の名前は、いかなるコンテキストにおける利用"
"でも、警告無く損害を引き起こすことがあります。 "

#: ../../reference/lexical_analysis.rst:421
msgid "``__*``"
msgstr "``__*``"

#: ../../reference/lexical_analysis.rst:422
msgid ""
"Class-private names.  Names in this category, when used within the context "
"of a class definition, are re-written to use a mangled form to help avoid "
"name clashes between \"private\" attributes of base and derived classes. See "
"section :ref:`atom-identifiers`."
msgstr ""
"クラスプライベート (class-private) な名前です。このカテゴリに属する名前は、ク"
"ラス定義のコンテキスト上で用いられた場合、基底クラスと派生クラスの \"プライ"
"ベートな\" 属性間で名前衝突が起こるのを防ぐために書き直されます。 :ref:`atom-"
"identifiers` を参照してください。"

#: ../../reference/lexical_analysis.rst:431
msgid "Literals"
msgstr "リテラル"

#: ../../reference/lexical_analysis.rst:435
msgid "Literals are notations for constant values of some built-in types."
msgstr ""
"リテラル (literal) とは、いくつかの組み込み型の定数を表記したものです。"

#: ../../reference/lexical_analysis.rst:446
msgid "String and Bytes literals"
msgstr "文字列およびバイト列リテラル"

#: ../../reference/lexical_analysis.rst:448
msgid "String literals are described by the following lexical definitions:"
msgstr "文字列リテラルは以下の字句定義で記述されます:"

#: ../../reference/lexical_analysis.rst:473
msgid ""
"One syntactic restriction not indicated by these productions is that "
"whitespace is not allowed between the :token:`~python-grammar:stringprefix` "
"or :token:`~python-grammar:bytesprefix` and the rest of the literal. The "
"source character set is defined by the encoding declaration; it is UTF-8 if "
"no encoding declaration is given in the source file; see section :ref:"
"`encodings`."
msgstr ""
"上記の生成規則で示されていない文法的な制限が一つあります。リテラルの :token:"
"`~python-grammar:stringprefix` や :token:`~python-grammar:bytesprefix` と残り"
"の部分の間に空白を入れてはならないことです。ソースコード文字セット (source "
"character set) はエンコーディング宣言で定義されます。エンコーディング宣言がな"
"ければ UTF-8 です。節 :ref:`encodings` を参照してください。"

#: ../../reference/lexical_analysis.rst:483
msgid ""
"In plain English: Both types of literals can be enclosed in matching single "
"quotes (``'``) or double quotes (``\"``).  They can also be enclosed in "
"matching groups of three single or double quotes (these are generally "
"referred to as *triple-quoted strings*). The backslash (``\\``) character is "
"used to give special meaning to otherwise ordinary characters like ``n``, "
"which means 'newline' when escaped (``\\n``). It can also be used to escape "
"characters that otherwise have a special meaning, such as newline, backslash "
"itself, or the quote character. See :ref:`escape sequences <escape-"
"sequences>` below for examples."
msgstr ""

#: ../../reference/lexical_analysis.rst:496
msgid ""
"Bytes literals are always prefixed with ``'b'`` or ``'B'``; they produce an "
"instance of the :class:`bytes` type instead of the :class:`str` type.  They "
"may only contain ASCII characters; bytes with a numeric value of 128 or "
"greater must be expressed with escapes."
msgstr ""
"バイト列リテラルには、常に ``'b'`` や ``'B'`` が接頭します。これらによっ"
"て、 :class:`str` 型ではなく :class:`bytes` 型のインスタンスが作成されます。"
"バイト列リテラルは ASCII 文字のみ含むことができます。 128 以上の数値を持つバ"
"イトはエスケープして表されなければなりません。"

#: ../../reference/lexical_analysis.rst:505
msgid ""
"Both string and bytes literals may optionally be prefixed with a letter "
"``'r'`` or ``'R'``; such constructs are called :dfn:`raw string literals` "
"and :dfn:`raw bytes literals` respectively and treat backslashes as literal "
"characters.  As a result, in raw string literals, ``'\\U'`` and ``'\\u'`` "
"escapes are not treated specially."
msgstr ""

#: ../../reference/lexical_analysis.rst:511
msgid ""
"The ``'rb'`` prefix of raw bytes literals has been added as a synonym of "
"``'br'``."
msgstr ""
"raw バイト列リテラルの ``'rb'`` プレフィックスが ``'br'`` の同義語として追加"
"されました。"

#: ../../reference/lexical_analysis.rst:515
msgid ""
"Support for the unicode legacy literal (``u'value'``) was reintroduced to "
"simplify the maintenance of dual Python 2.x and 3.x codebases. See :pep:"
"`414` for more information."
msgstr ""
"Python 2.x と 3.x 両対応のコードベースのメンテナンスを単純化するために、レガ"
"シー unicode リテラル (``u'value'``) のサポートが再び導入されました。詳細は :"
"pep:`414` を参照してください。"

#: ../../reference/lexical_analysis.rst:523
msgid ""
"A string literal with ``'f'`` or ``'F'`` in its prefix is a :dfn:`formatted "
"string literal`; see :ref:`f-strings`.  The ``'f'`` may be combined with "
"``'r'``, but not with ``'b'`` or ``'u'``, therefore raw formatted strings "
"are possible, but formatted bytes literals are not."
msgstr ""
"``'f'`` または ``'F'`` の接頭辞が付いた文字列リテラルはフォーマット済み文字列"
"リテラル（ :dfn:`formatted string literal` ）です。詳細については :ref:`"
"フォーマット済み文字列リテラル <f-strings>` を参照してください。接頭辞の "
"``'f'`` は ``'r'`` と組み合わせられますが、 ``'b'`` や ``'u'`` と組み合わせる"
"ことはできません。つまりフォーマット済みの raw 文字列リテラルは可ですが、"
"フォーマット済みのバイト列リテラルは不可です。"

#: ../../reference/lexical_analysis.rst:528
msgid ""
"In triple-quoted literals, unescaped newlines and quotes are allowed (and "
"are retained), except that three unescaped quotes in a row terminate the "
"literal.  (A \"quote\" is the character used to open the literal, i.e. "
"either ``'`` or ``\"``.)"
msgstr ""
"三重クオートリテラル中には、三連のエスケープされないクオート文字でリテラルを"
"終端してしまわないかぎり、エスケープされていない改行やクオートを書くことがで"
"きます (さらに、それらはそのまま文字列中に残ります)。(ここでいう \"クオート"
"\" とは、文字列の囲みを開始するときに使った文字を示し、``'`` か ``\"`` のいず"
"れかです。)"

#: ../../reference/lexical_analysis.rst:551
msgid "Escape sequences"
msgstr ""

#: ../../reference/lexical_analysis.rst:553
msgid ""
"Unless an ``'r'`` or ``'R'`` prefix is present, escape sequences in string "
"and bytes literals are interpreted according to rules similar to those used "
"by Standard C.  The recognized escape sequences are:"
msgstr ""
"``'r'`` または ``'R'`` 接頭文字がつかないかぎり、文字列またはバイト列リテラル"
"中のエスケープシーケンスは標準 C で使われているのと同様の法則にしたがって解釈"
"されます。以下に Python で認識されるエスケープシーケンスを示します:"

#: ../../reference/lexical_analysis.rst:558
#: ../../reference/lexical_analysis.rst:591
msgid "Escape Sequence"
msgstr "エスケープシーケンス"

#: ../../reference/lexical_analysis.rst:558
#: ../../reference/lexical_analysis.rst:591
msgid "Meaning"
msgstr "意味"

#: ../../reference/lexical_analysis.rst:558
#: ../../reference/lexical_analysis.rst:591
msgid "Notes"
msgstr "注釈"

#: ../../reference/lexical_analysis.rst:560
msgid "``\\``\\ <newline>"
msgstr ""

#: ../../reference/lexical_analysis.rst:560
msgid "Backslash and newline ignored"
msgstr "バックスラッシュと改行文字が無視されます"

#: ../../reference/lexical_analysis.rst:560
msgid "\\(1)"
msgstr "\\(1)"

#: ../../reference/lexical_analysis.rst:562
msgid "``\\\\``"
msgstr "``\\\\``"

#: ../../reference/lexical_analysis.rst:562
msgid "Backslash (``\\``)"
msgstr "バックスラッシュ (``\\``)"

#: ../../reference/lexical_analysis.rst:564
msgid "``\\'``"
msgstr "``\\'``"

#: ../../reference/lexical_analysis.rst:564
msgid "Single quote (``'``)"
msgstr "一重引用符 (``'``)"

#: ../../reference/lexical_analysis.rst:566
msgid "``\\\"``"
msgstr "``\\\"``"

#: ../../reference/lexical_analysis.rst:566
msgid "Double quote (``\"``)"
msgstr "二重引用符 (``\"``)"

#: ../../reference/lexical_analysis.rst:568
msgid "``\\a``"
msgstr "``\\a``"

#: ../../reference/lexical_analysis.rst:568
msgid "ASCII Bell (BEL)"
msgstr "ASCII 端末ベル (BEL)"

#: ../../reference/lexical_analysis.rst:570
msgid "``\\b``"
msgstr "``\\b``"

#: ../../reference/lexical_analysis.rst:570
msgid "ASCII Backspace (BS)"
msgstr "ASCII バックスペース (BS)"

#: ../../reference/lexical_analysis.rst:572
msgid "``\\f``"
msgstr "``\\f``"

#: ../../reference/lexical_analysis.rst:572
msgid "ASCII Formfeed (FF)"
msgstr "ASCII フォームフィード (FF)"

#: ../../reference/lexical_analysis.rst:574
msgid "``\\n``"
msgstr "``\\n``"

#: ../../reference/lexical_analysis.rst:574
msgid "ASCII Linefeed (LF)"
msgstr "ASCII 行送り (LF)"

#: ../../reference/lexical_analysis.rst:576
msgid "``\\r``"
msgstr "``\\r``"

#: ../../reference/lexical_analysis.rst:576
msgid "ASCII Carriage Return (CR)"
msgstr "ASCII 復帰 (CR)"

#: ../../reference/lexical_analysis.rst:578
msgid "``\\t``"
msgstr "``\\t``"

#: ../../reference/lexical_analysis.rst:578
msgid "ASCII Horizontal Tab (TAB)"
msgstr "ASCII 水平タブ (TAB)"

#: ../../reference/lexical_analysis.rst:580
msgid "``\\v``"
msgstr "``\\v``"

#: ../../reference/lexical_analysis.rst:580
msgid "ASCII Vertical Tab (VT)"
msgstr "ASCII 垂直タブ (VT)"

#: ../../reference/lexical_analysis.rst:582
msgid ":samp:`\\\\\\\\{ooo}`"
msgstr ""

#: ../../reference/lexical_analysis.rst:582
msgid "Character with octal value *ooo*"
msgstr "8 進数値 *ooo* を持つ文字"

#: ../../reference/lexical_analysis.rst:582
msgid "(2,4)"
msgstr ""

#: ../../reference/lexical_analysis.rst:585
msgid ":samp:`\\\\x{hh}`"
msgstr ""

#: ../../reference/lexical_analysis.rst:585
msgid "Character with hex value *hh*"
msgstr "16 進数値 *hh* を持つ文字"

#: ../../reference/lexical_analysis.rst:585
msgid "(3,4)"
msgstr ""

#: ../../reference/lexical_analysis.rst:588
msgid "Escape sequences only recognized in string literals are:"
msgstr "文字列でのみ認識されるエスケープシーケンスは以下のとおりです:"

#: ../../reference/lexical_analysis.rst:593
msgid ":samp:`\\\\N\\\\{{name}\\\\}`"
msgstr ""

#: ../../reference/lexical_analysis.rst:593
msgid "Character named *name* in the Unicode database"
msgstr "Unicode データベース中で *name* という名前の文字"

#: ../../reference/lexical_analysis.rst:593
msgid "\\(5)"
msgstr "\\(5)"

#: ../../reference/lexical_analysis.rst:596
msgid ":samp:`\\\\u{xxxx}`"
msgstr ""

#: ../../reference/lexical_analysis.rst:596
msgid "Character with 16-bit hex value *xxxx*"
msgstr "16-bit の十六進値 *xxxx* を持つ文字"

#: ../../reference/lexical_analysis.rst:596
msgid "\\(6)"
msgstr "\\(6)"

#: ../../reference/lexical_analysis.rst:599
msgid ":samp:`\\\\U{xxxxxxxx}`"
msgstr ""

#: ../../reference/lexical_analysis.rst:599
msgid "Character with 32-bit hex value *xxxxxxxx*"
msgstr "32-bit の十六進値 *xxxxxxxx* を持つ文字"

#: ../../reference/lexical_analysis.rst:599
msgid "\\(7)"
msgstr "\\(7)"

#: ../../reference/lexical_analysis.rst:603
msgid "Notes:"
msgstr "注釈:"

#: ../../reference/lexical_analysis.rst:606
msgid "A backslash can be added at the end of a line to ignore the newline::"
msgstr ""

#: ../../reference/lexical_analysis.rst:608
msgid ""
">>> 'This string will not include \\\n"
"... backslashes or newline characters.'\n"
"'This string will not include backslashes or newline characters.'"
msgstr ""

#: ../../reference/lexical_analysis.rst:612
msgid ""
"The same result can be achieved using :ref:`triple-quoted strings "
"<strings>`, or parentheses and :ref:`string literal concatenation <string-"
"concatenation>`."
msgstr ""

#: ../../reference/lexical_analysis.rst:617
msgid "As in Standard C, up to three octal digits are accepted."
msgstr "標準 C と同じく、最大で 3 桁の 8 進数まで受理します。"

#: ../../reference/lexical_analysis.rst:619
msgid ""
"Octal escapes with value larger than ``0o377`` produce a :exc:"
"`DeprecationWarning`."
msgstr ""

#: ../../reference/lexical_analysis.rst:623
msgid ""
"Octal escapes with value larger than ``0o377`` produce a :exc:"
"`SyntaxWarning`. In a future Python version they will be eventually a :exc:"
"`SyntaxError`."
msgstr ""

#: ../../reference/lexical_analysis.rst:629
msgid "Unlike in Standard C, exactly two hex digits are required."
msgstr "標準 C とは違い、ちょうど 2 桁の 16 進数しか受理されません。"

#: ../../reference/lexical_analysis.rst:632
msgid ""
"In a bytes literal, hexadecimal and octal escapes denote the byte with the "
"given value. In a string literal, these escapes denote a Unicode character "
"with the given value."
msgstr ""
"バイト列リテラル中では、十六進および八進エスケープは与えられた値のバイトを表"
"します。文字列リテラル中では、エスケープ文字は与えられた値を持つ Unicode 文字"
"を表します。"

#: ../../reference/lexical_analysis.rst:637
msgid "Support for name aliases [#]_ has been added."
msgstr "name aliases [#]_ に対するサポートが追加されました。"

#: ../../reference/lexical_analysis.rst:641
msgid "Exactly four hex digits are required."
msgstr "ちょうど 4 桁の 16 進数しか受理されません。"

#: ../../reference/lexical_analysis.rst:644
msgid ""
"Any Unicode character can be encoded this way.  Exactly eight hex digits are "
"required."
msgstr ""
"あらゆるユニコード文字はこのようにしてエンコードすることができます。正確に8文"
"字の16進数字が必要です。"

#: ../../reference/lexical_analysis.rst:650
msgid ""
"Unlike Standard C, all unrecognized escape sequences are left in the string "
"unchanged, i.e., *the backslash is left in the result*.  (This behavior is "
"useful when debugging: if an escape sequence is mistyped, the resulting "
"output is more easily recognized as broken.)  It is also important to note "
"that the escape sequences only recognized in string literals fall into the "
"category of unrecognized escapes for bytes literals."
msgstr ""
"標準の C とは違い、認識されなかったエスケープシーケンスはすべて、そのまま文字"
"列中に残ります。すなわち、*バックスラッシュも結果中に残ります*。(この挙動はデ"
"バッグの際に便利です: エスケープシーケンスが誤入力されたら、その出力結果が失"
"敗しているのが分かりやすくなります。) 文字列中でのみ認識されるエスケープシー"
"ケンスは、バイト列リテラルには、認識されないエスケープシーケンスとして分類さ"
"れるので注意してください。"

#: ../../reference/lexical_analysis.rst:657
msgid "Unrecognized escape sequences produce a :exc:`DeprecationWarning`."
msgstr ""

#: ../../reference/lexical_analysis.rst:660
msgid ""
"Unrecognized escape sequences produce a :exc:`SyntaxWarning`. In a future "
"Python version they will be eventually a :exc:`SyntaxError`."
msgstr ""

#: ../../reference/lexical_analysis.rst:664
msgid ""
"Even in a raw literal, quotes can be escaped with a backslash, but the "
"backslash remains in the result; for example, ``r\"\\\"\"`` is a valid "
"string literal consisting of two characters: a backslash and a double quote; "
"``r\"\\\"`` is not a valid string literal (even a raw string cannot end in "
"an odd number of backslashes).  Specifically, *a raw literal cannot end in a "
"single backslash* (since the backslash would escape the following quote "
"character).  Note also that a single backslash followed by a newline is "
"interpreted as those two characters as part of the literal, *not* as a line "
"continuation."
msgstr ""
"raw リテラルでも、引用符はバックスラッシュでエスケープできますが、バックス"
"ラッシュ自体も文字列に残ります; 例えば、``r\"\\\"\"`` は有効な文字列リテラル"
"で、バックスラッシュと二重引用符からなる文字列を表します; ``r\"\\\"`` は無効"
"な文字列リテラルです (raw リテラルを奇数個連なったバックスラッシュで終わらせ"
"ることはできません)。具体的には、(バックスラッシュが直後のクオート文字をエス"
"ケープしてしまうので)  *raw文字列を単一のバックスラッシュで終わらせることはで"
"きません* さらに、バックスラッシュの直後に改行がきても、行継続を意味する *の"
"ではなく*、リテラルの一部であるそれら二つの文字として解釈されます。"

#: ../../reference/lexical_analysis.rst:677
msgid "String literal concatenation"
msgstr "文字列リテラルの結合 (concatenation)"

#: ../../reference/lexical_analysis.rst:679
msgid ""
"Multiple adjacent string or bytes literals (delimited by whitespace), "
"possibly using different quoting conventions, are allowed, and their meaning "
"is the same as their concatenation.  Thus, ``\"hello\" 'world'`` is "
"equivalent to ``\"helloworld\"``.  This feature can be used to reduce the "
"number of backslashes needed, to split long strings conveniently across long "
"lines, or even to add comments to parts of strings, for example::"
msgstr ""
"文字列やバイト列リテラルは、互いに異なる引用符を使っていても (空白文字で区"
"切っても) 複数隣接させることができます。これは各々の文字列を結合するのと同じ"
"意味を持ちます。したがって、``\"hello\" 'world'`` は ``\"helloworld\"`` と同"
"じです。この機能を使うと、バックスラッシュを減らしたり、長い文字列を手軽に分"
"離して複数行にまたがらせたり、あるいは部分文字列ごとにコメントを追加すること"
"さえできます。例えば::"

#: ../../reference/lexical_analysis.rst:686
msgid ""
"re.compile(\"[A-Za-z_]\"       # letter or underscore\n"
"           \"[A-Za-z0-9_]*\"   # letter, digit or underscore\n"
"          )"
msgstr ""

#: ../../reference/lexical_analysis.rst:690
msgid ""
"Note that this feature is defined at the syntactical level, but implemented "
"at compile time.  The '+' operator must be used to concatenate string "
"expressions at run time.  Also note that literal concatenation can use "
"different quoting styles for each component (even mixing raw strings and "
"triple quoted strings), and formatted string literals may be concatenated "
"with plain string literals."
msgstr ""
"この機能は文法レベルで定義されていますが、スクリプトをコンパイルする際の処理"
"として実現されることに注意してください。実行時に文字列表現を結合したければ、 "
"'+' 演算子を使わなければなりません。また、リテラルの結合においては、結合する"
"各要素に異なる引用符形式を使ったり (raw 文字列と三重引用符を混ぜることさえで"
"きます) 、フォーマット済み文字列リテラルと通常の文字列リテラルを結合したりす"
"ることもできますので注意してください。"

#: ../../reference/lexical_analysis.rst:713
msgid "f-strings"
msgstr ""

#: ../../reference/lexical_analysis.rst:717
msgid ""
"A :dfn:`formatted string literal` or :dfn:`f-string` is a string literal "
"that is prefixed with ``'f'`` or ``'F'``.  These strings may contain "
"replacement fields, which are expressions delimited by curly braces ``{}``. "
"While other string literals always have a constant value, formatted strings "
"are really expressions evaluated at run time."
msgstr ""
"フォーマット済み文字列リテラル（ :dfn:`formatted string literal` ）または :"
"dfn:`f-string` は、接頭辞 ``'f'`` または ``'F'`` の付いた文字列リテラルです。"
"これらの文字列には、波括弧 ``{}`` で区切られた式である置換フィールドを含める"
"ことができます。他の文字列リテラルの場合は内容が常に一定で変わることが無いの"
"に対して、フォーマット済み文字列リテラルは実行時に式として評価されます。"

#: ../../reference/lexical_analysis.rst:723
msgid ""
"Escape sequences are decoded like in ordinary string literals (except when a "
"literal is also marked as a raw string).  After decoding, the grammar for "
"the contents of the string is:"
msgstr ""
"エスケープシーケンスは通常の文字列リテラルと同様にデコードされます (ただしリ"
"テラルが raw 文字列でもある場合は除きます) 。エスケープシーケンスをデコードし"
"た後は、文字列の内容は次の文法で解釈されます:"

#: ../../reference/lexical_analysis.rst:737
msgid ""
"The parts of the string outside curly braces are treated literally, except "
"that any doubled curly braces ``'{{'`` or ``'}}'`` are replaced with the "
"corresponding single curly brace.  A single opening curly bracket ``'{'`` "
"marks a replacement field, which starts with a Python expression. To display "
"both the expression text and its value after evaluation, (useful in "
"debugging), an equal sign ``'='`` may be added after the expression. A "
"conversion field, introduced by an exclamation point ``'!'`` may follow.  A "
"format specifier may also be appended, introduced by a colon ``':'``. A "
"replacement field ends with a closing curly bracket ``'}'``."
msgstr ""
"文字列のうち、波括弧で囲まれた部分以外は文字通り解釈されます。ただし、二重波"
"括弧 ``'{{'`` および ``'}}'`` は単一の波括弧に置き換えられます。単一の開き波"
"括弧 ``'{'`` は置換フィールドの始まりを意味し、その中身は Python の式で始まり"
"ます。(デバッグ時に便利な機能として) 式のテキストと、評価後の値との両者を表示"
"したい場合には、式の後に等号 ``'='`` を加えてください。その後ろには、感嘆符 "
"``'!'`` によって導入される変換フィールドを続けることができます。さらに、"
"``':'`` に続いて書式指定子を追加できます。置換フィールドは単一の閉じ波括弧 "
"``'}'`` で終わります。"

#: ../../reference/lexical_analysis.rst:747
msgid ""
"Expressions in formatted string literals are treated like regular Python "
"expressions surrounded by parentheses, with a few exceptions. An empty "
"expression is not allowed, and both :keyword:`lambda`  and assignment "
"expressions ``:=`` must be surrounded by explicit parentheses. Each "
"expression is evaluated in the context where the formatted string literal "
"appears, in order from left to right.  Replacement expressions can contain "
"newlines in both single-quoted and triple-quoted f-strings and they can "
"contain comments.  Everything that comes after a ``#`` inside a replacement "
"field is a comment (even closing braces and quotes). In that case, "
"replacement fields must be closed in a different line."
msgstr ""

#: ../../reference/lexical_analysis.rst:758
msgid ""
">>> f\"abc{a # This is a comment }\"\n"
"... + 3}\"\n"
"'abc5'"
msgstr ""

#: ../../reference/lexical_analysis.rst:764
msgid ""
"Prior to Python 3.7, an :keyword:`await` expression and comprehensions "
"containing an :keyword:`async for` clause were illegal in the expressions in "
"formatted string literals due to a problem with the implementation."
msgstr ""
"Python 3.7 より前のバージョンでは、:keyword:`await` 式および :keyword:`async "
"for` 句を含む内包表記は、実装に伴う問題の都合により許されていませんでした。"

#: ../../reference/lexical_analysis.rst:769
msgid ""
"Prior to Python 3.12, comments were not allowed inside f-string replacement "
"fields."
msgstr ""

#: ../../reference/lexical_analysis.rst:773
msgid ""
"When the equal sign ``'='`` is provided, the output will have the expression "
"text, the ``'='`` and the evaluated value. Spaces after the opening brace "
"``'{'``, within the expression and after the ``'='`` are all retained in the "
"output. By default, the ``'='`` causes the :func:`repr` of the expression to "
"be provided, unless there is a format specified. When a format is specified "
"it defaults to the :func:`str` of the expression unless a conversion ``'!"
"r'`` is declared."
msgstr ""
"等号 ``'='`` が指定されたとき、出力文字列は、式のテキスト表現、等号 ``'='``、"
"および評価された式を含みます。開き波括弧 ``'{'`` の直後、式の中、および "
"``'='`` の後に含まれる空白文字はすべて保存されます。書式指定子が存在しない限"
"り、``'='`` を指定した場合は、式に対して :func:`repr` を適用した結果が出力に"
"なります。一方、書式指定子が存在する場合は、変換フィールドで ``'!r'`` が指定"
"されていない限り、デフォルトで :func:`str` が適用されます。"

#: ../../reference/lexical_analysis.rst:781
msgid "The equal sign ``'='``."
msgstr "等号 ``'='``。"

#: ../../reference/lexical_analysis.rst:784
msgid ""
"If a conversion is specified, the result of evaluating the expression is "
"converted before formatting.  Conversion ``'!s'`` calls :func:`str` on the "
"result, ``'!r'`` calls :func:`repr`, and ``'!a'`` calls :func:`ascii`."
msgstr ""
"もし変換フィールドが指定されていた場合、式の評価結果はフォーマットの前に変換"
"されます。変換 ``'!s'`` は :func:`str` を、 ``'!r'`` は :func:`repr` を、そし"
"て ``'!a'`` は :func:`ascii` を呼び出します。"

#: ../../reference/lexical_analysis.rst:788
msgid ""
"The result is then formatted using the :func:`format` protocol.  The format "
"specifier is passed to the :meth:`~object.__format__` method of the "
"expression or conversion result.  An empty string is passed when the format "
"specifier is omitted.  The formatted result is then included in the final "
"value of the whole string."
msgstr ""

#: ../../reference/lexical_analysis.rst:794
msgid ""
"Top-level format specifiers may include nested replacement fields. These "
"nested fields may include their own conversion fields and :ref:`format "
"specifiers <formatspec>`, but may not include more deeply nested replacement "
"fields. The :ref:`format specifier mini-language <formatspec>` is the same "
"as that used by the :meth:`str.format` method."
msgstr ""

#: ../../reference/lexical_analysis.rst:800
msgid ""
"Formatted string literals may be concatenated, but replacement fields cannot "
"be split across literals."
msgstr ""
"フォーマット済み文字列リテラルは他の文字列リテラルと結合できますが、置換"
"フィールドを複数のリテラルに分割して書くことはできません。"

#: ../../reference/lexical_analysis.rst:803
msgid "Some examples of formatted string literals::"
msgstr "フォーマット済み文字列リテラルの例をいくつか挙げます::"

#: ../../reference/lexical_analysis.rst:805
msgid ""
">>> name = \"Fred\"\n"
">>> f\"He said his name is {name!r}.\"\n"
"\"He said his name is 'Fred'.\"\n"
">>> f\"He said his name is {repr(name)}.\"  # repr() is equivalent to !r\n"
"\"He said his name is 'Fred'.\"\n"
">>> width = 10\n"
">>> precision = 4\n"
">>> value = decimal.Decimal(\"12.34567\")\n"
">>> f\"result: {value:{width}.{precision}}\"  # nested fields\n"
"'result:      12.35'\n"
">>> today = datetime(year=2017, month=1, day=27)\n"
">>> f\"{today:%B %d, %Y}\"  # using date format specifier\n"
"'January 27, 2017'\n"
">>> f\"{today=:%B %d, %Y}\" # using date format specifier and debugging\n"
"'today=January 27, 2017'\n"
">>> number = 1024\n"
">>> f\"{number:#0x}\"  # using integer format specifier\n"
"'0x400'\n"
">>> foo = \"bar\"\n"
">>> f\"{ foo = }\" # preserves whitespace\n"
"\" foo = 'bar'\"\n"
">>> line = \"The mill's closed\"\n"
">>> f\"{line = }\"\n"
"'line = \"The mill\\'s closed\"'\n"
">>> f\"{line = :20}\"\n"
"\"line = The mill's closed   \"\n"
">>> f\"{line = !r:20}\"\n"
"'line = \"The mill\\'s closed\" '"
msgstr ""

#: ../../reference/lexical_analysis.rst:835
msgid ""
"Reusing the outer f-string quoting type inside a replacement field is "
"permitted::"
msgstr ""

#: ../../reference/lexical_analysis.rst:838
msgid ""
">>> a = dict(x=2)\n"
">>> f\"abc {a[\"x\"]} def\"\n"
"'abc 2 def'"
msgstr ""

#: ../../reference/lexical_analysis.rst:842
msgid ""
"Prior to Python 3.12, reuse of the same quoting type of the outer f-string "
"inside a replacement field was not possible."
msgstr ""

#: ../../reference/lexical_analysis.rst:846
msgid ""
"Backslashes are also allowed in replacement fields and are evaluated the "
"same way as in any other context::"
msgstr ""

#: ../../reference/lexical_analysis.rst:849
msgid ""
">>> a = [\"a\", \"b\", \"c\"]\n"
">>> print(f\"List a contains:\\n{\"\\n\".join(a)}\")\n"
"List a contains:\n"
"a\n"
"b\n"
"c"
msgstr ""

#: ../../reference/lexical_analysis.rst:856
msgid ""
"Prior to Python 3.12, backslashes were not permitted inside an f-string "
"replacement field."
msgstr ""

#: ../../reference/lexical_analysis.rst:860
msgid ""
"Formatted string literals cannot be used as docstrings, even if they do not "
"include expressions."
msgstr ""
"フォーマット済み文字列リテラルは、たとえ式を含んでいなかったとしても、 "
"docstring としては使えません。"

#: ../../reference/lexical_analysis.rst:865
msgid ""
">>> def foo():\n"
"...     f\"Not a docstring\"\n"
"...\n"
">>> foo.__doc__ is None\n"
"True"
msgstr ""

#: ../../reference/lexical_analysis.rst:871
msgid ""
"See also :pep:`498` for the proposal that added formatted string literals, "
"and :meth:`str.format`, which uses a related format string mechanism."
msgstr ""
"フォーマット済み文字列リテラルを Python に追加した提案 :pep:`498` も参照して"
"ください。また関連する文字列フォーマットの仕組みを使っている :meth:`str."
"format` も参照してください。"

#: ../../reference/lexical_analysis.rst:878
msgid "Numeric literals"
msgstr "数値リテラル"

#: ../../reference/lexical_analysis.rst:884
msgid ""
"There are three types of numeric literals: integers, floating-point numbers, "
"and imaginary numbers.  There are no complex literals (complex numbers can "
"be formed by adding a real number and an imaginary number)."
msgstr ""

#: ../../reference/lexical_analysis.rst:888
msgid ""
"Note that numeric literals do not include a sign; a phrase like ``-1`` is "
"actually an expression composed of the unary operator '``-``' and the "
"literal ``1``."
msgstr ""
"数値リテラルには符号が含まれていないことに注意してください; ``-1`` のような句"
"は、実際には単項演算子 (unary operator) '``-``' とリテラル ``1`` を組み合わせ"
"たものです。"

#: ../../reference/lexical_analysis.rst:902
msgid "Integer literals"
msgstr "整数リテラル"

#: ../../reference/lexical_analysis.rst:904
msgid "Integer literals are described by the following lexical definitions:"
msgstr "整数リテラルは以下の字句定義で記述されます:"

#: ../../reference/lexical_analysis.rst:918
msgid ""
"There is no limit for the length of integer literals apart from what can be "
"stored in available memory."
msgstr ""
"値がメモリ上に収まるかどうかという問題を除けば、整数リテラルには長さの制限が"
"ありません。"

#: ../../reference/lexical_analysis.rst:921
msgid ""
"Underscores are ignored for determining the numeric value of the literal.  "
"They can be used to group digits for enhanced readability.  One underscore "
"can occur between digits, and after base specifiers like ``0x``."
msgstr ""
"アンダースコアはリテラルの値を判断するにあたって無視されます。そのためアン"
"ダースコアを使って数字をグループ化することで読みやすくできます。アンダースコ"
"アは数字と数字の間に 1 つだけ、あるいは ``0x`` のような基数指定の直後に 1 つ"
"だけ挿入できます。"

#: ../../reference/lexical_analysis.rst:925
msgid ""
"Note that leading zeros in a non-zero decimal number are not allowed. This "
"is for disambiguation with C-style octal literals, which Python used before "
"version 3.0."
msgstr ""
"なお、非 0 の十進数の先頭には 0 を付けられません。これは、Python がバージョ"
"ン 3.0 以前に使っていた C 形式の八進リテラルとの曖昧さを回避するためです。"

#: ../../reference/lexical_analysis.rst:929
msgid "Some examples of integer literals::"
msgstr "整数リテラルの例をいくつか示します::"

#: ../../reference/lexical_analysis.rst:931
msgid ""
"7     2147483647                        0o177    0b100110111\n"
"3     79228162514264337593543950336     0o377    0xdeadbeef\n"
"      100_000_000_000                   0b_1110_0101"
msgstr ""

#: ../../reference/lexical_analysis.rst:935
#: ../../reference/lexical_analysis.rst:967
msgid "Underscores are now allowed for grouping purposes in literals."
msgstr ""
"グループ化を目的としたリテラル中のアンダースコアが許されるようになりました。"

#: ../../reference/lexical_analysis.rst:946
msgid "Floating-point literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:948
msgid ""
"Floating-point literals are described by the following lexical definitions:"
msgstr ""

#: ../../reference/lexical_analysis.rst:958
msgid ""
"Note that the integer and exponent parts are always interpreted using radix "
"10. For example, ``077e010`` is legal, and denotes the same number as "
"``77e10``. The allowed range of floating-point literals is implementation-"
"dependent.  As in integer literals, underscores are supported for digit "
"grouping."
msgstr ""

#: ../../reference/lexical_analysis.rst:963
msgid "Some examples of floating-point literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:965
msgid "3.14    10.    .001    1e100    3.14e-10    0e0    3.14_15_93"
msgstr ""

#: ../../reference/lexical_analysis.rst:976
msgid "Imaginary literals"
msgstr "虚数 (imaginary) リテラル"

#: ../../reference/lexical_analysis.rst:978
msgid "Imaginary literals are described by the following lexical definitions:"
msgstr "虚数リテラルは以下のような字句定義で記述されます:"

#: ../../reference/lexical_analysis.rst:983
msgid ""
"An imaginary literal yields a complex number with a real part of 0.0.  "
"Complex numbers are represented as a pair of floating-point numbers and have "
"the same restrictions on their range.  To create a complex number with a "
"nonzero real part, add a floating-point number to it, e.g., ``(3+4j)``.  "
"Some examples of imaginary literals::"
msgstr ""

#: ../../reference/lexical_analysis.rst:989
msgid "3.14j   10.j    10j     .001j   1e100j   3.14e-10j   3.14_15_93j"
msgstr ""

#: ../../reference/lexical_analysis.rst:995
msgid "Operators"
msgstr "演算子"

#: ../../reference/lexical_analysis.rst:999
msgid "The following tokens are operators:"
msgstr "以下のトークンは演算子です:"

#: ../../reference/lexical_analysis.rst:1001
msgid ""
"+       -       *       **      /       //      %      @\n"
"<<      >>      &       |       ^       ~       :=\n"
"<       >       <=      >=      ==      !="
msgstr ""

#: ../../reference/lexical_analysis.rst:1012
msgid "Delimiters"
msgstr "デリミタ (delimiter)"

#: ../../reference/lexical_analysis.rst:1016
msgid "The following tokens serve as delimiters in the grammar:"
msgstr "以下のトークンは文法上のデリミタとして働きます:"

#: ../../reference/lexical_analysis.rst:1018
msgid ""
"(       )       [       ]       {       }\n"
",       :       !       .       ;       @       =\n"
"->      +=      -=      *=      /=      //=     %=\n"
"@=      &=      |=      ^=      >>=     <<=     **="
msgstr ""

#: ../../reference/lexical_analysis.rst:1025
msgid ""
"The period can also occur in floating-point and imaginary literals.  A "
"sequence of three periods has a special meaning as an ellipsis literal. The "
"second half of the list, the augmented assignment operators, serve lexically "
"as delimiters, but also perform an operation."
msgstr ""
"ピリオドは浮動小数点数や虚数リテラル中にも置けます。ピリオド三つの列はスライ"
"ス表記における省略符号 (ellipsis) リテラルとして特別な意味を持ちます。リスト"
"後半の累算代入演算子 (augmented assignment operator) は、字句的にはデリミタと"
"して振舞いますが、演算も行います。"

#: ../../reference/lexical_analysis.rst:1030
msgid ""
"The following printing ASCII characters have special meaning as part of "
"other tokens or are otherwise significant to the lexical analyzer:"
msgstr ""
"以下の印字可能 ASCII 文字は、他のトークンの一部として特殊な意味を持っていた"
"り、字句解析器にとって重要な意味を持っています:"

#: ../../reference/lexical_analysis.rst:1033
msgid "'       \"       #       \\"
msgstr ""

#: ../../reference/lexical_analysis.rst:1037
msgid ""
"The following printing ASCII characters are not used in Python.  Their "
"occurrence outside string literals and comments is an unconditional error:"
msgstr ""
"以下の印字可能 ASCII 文字は、Python では使われていません。これらの文字が文字"
"列リテラルやコメントの外にある場合、無条件にエラーとなります:"

#: ../../reference/lexical_analysis.rst:1040
msgid "$       ?       `"
msgstr ""

#: ../../reference/lexical_analysis.rst:1046
msgid "Footnotes"
msgstr "脚注"

#: ../../reference/lexical_analysis.rst:1047
msgid "https://www.unicode.org/Public/15.1.0/ucd/NameAliases.txt"
msgstr "https://www.unicode.org/Public/15.1.0/ucd/NameAliases.txt"

#: ../../reference/lexical_analysis.rst:8
msgid "lexical analysis"
msgstr "字句解析"

#: ../../reference/lexical_analysis.rst:8
msgid "parser"
msgstr "``parser``"

#: ../../reference/lexical_analysis.rst:8
msgid "token"
msgstr "トークン"

#: ../../reference/lexical_analysis.rst:25
msgid "line structure"
msgstr "行構造"

#: ../../reference/lexical_analysis.rst:35
msgid "logical line"
msgstr "論理行"

#: ../../reference/lexical_analysis.rst:35
#: ../../reference/lexical_analysis.rst:114
#: ../../reference/lexical_analysis.rst:532
msgid "physical line"
msgstr "物理行"

#: ../../reference/lexical_analysis.rst:35
#: ../../reference/lexical_analysis.rst:114
msgid "line joining"
msgstr "行連結"

#: ../../reference/lexical_analysis.rst:35
msgid "NEWLINE token"
msgstr "NEWLINE トークン"

#: ../../reference/lexical_analysis.rst:67
msgid "comment"
msgstr "コメント"

#: ../../reference/lexical_analysis.rst:67
msgid "hash character"
msgstr "ハッシュ文字"

#: ../../reference/lexical_analysis.rst:67
#: ../../reference/lexical_analysis.rst:81
msgid "# (hash)"
msgstr "# (hash)"

#: ../../reference/lexical_analysis.rst:81
msgid "source character set"
msgstr "ソースコード文字セット"

#: ../../reference/lexical_analysis.rst:81
msgid "encoding declarations (source file)"
msgstr "encoding declarations (source file)"

#: ../../reference/lexical_analysis.rst:81
msgid "source encoding declaration"
msgstr ""

#: ../../reference/lexical_analysis.rst:114
msgid "line continuation"
msgstr "行継続"

#: ../../reference/lexical_analysis.rst:114
msgid "backslash character"
msgstr "バックスラッシュ文字"

#: ../../reference/lexical_analysis.rst:159
msgid "blank line"
msgstr "空行"

#: ../../reference/lexical_analysis.rst:174
msgid "indentation"
msgstr "インデント"

#: ../../reference/lexical_analysis.rst:174
msgid "leading whitespace"
msgstr "先頭の空白"

#: ../../reference/lexical_analysis.rst:174
msgid "space"
msgstr "空白"

#: ../../reference/lexical_analysis.rst:174
msgid "tab"
msgstr "タブ"

#: ../../reference/lexical_analysis.rst:174
msgid "grouping"
msgstr "グループ化"

#: ../../reference/lexical_analysis.rst:174
msgid "statement grouping"
msgstr "実行文のグループ化"

#: ../../reference/lexical_analysis.rst:202
msgid "INDENT token"
msgstr "INDENT トークン"

#: ../../reference/lexical_analysis.rst:202
msgid "DEDENT token"
msgstr "DEDENT トークン"

#: ../../reference/lexical_analysis.rst:277
msgid "identifier"
msgstr "識別子"

#: ../../reference/lexical_analysis.rst:277
msgid "name"
msgstr "name"

#: ../../reference/lexical_analysis.rst:334
#: ../../reference/lexical_analysis.rst:358
msgid "keyword"
msgstr "キーワード"

#: ../../reference/lexical_analysis.rst:334
msgid "reserved word"
msgstr "予約語"

#: ../../reference/lexical_analysis.rst:358
msgid "soft keyword"
msgstr ""

#: ../../reference/lexical_analysis.rst:377
msgid "_, identifiers"
msgstr ""

#: ../../reference/lexical_analysis.rst:377
msgid "__, identifiers"
msgstr ""

#: ../../reference/lexical_analysis.rst:433
msgid "literal"
msgstr "リテラル"

#: ../../reference/lexical_analysis.rst:433
msgid "constant"
msgstr "定数"

#: ../../reference/lexical_analysis.rst:438
#: ../../reference/lexical_analysis.rst:479
msgid "string literal"
msgstr "文字列リテラル"

#: ../../reference/lexical_analysis.rst:438
#: ../../reference/lexical_analysis.rst:492
msgid "bytes literal"
msgstr "バイト列リテラル"

#: ../../reference/lexical_analysis.rst:438
msgid "ASCII"
msgstr "ASCII"

#: ../../reference/lexical_analysis.rst:438
msgid "' (single quote)"
msgstr ""

#: ../../reference/lexical_analysis.rst:438
msgid "\" (double quote)"
msgstr ""

#: ../../reference/lexical_analysis.rst:438
msgid "u'"
msgstr ""

#: ../../reference/lexical_analysis.rst:438
msgid "u\""
msgstr ""

#: ../../reference/lexical_analysis.rst:479
msgid "triple-quoted string"
msgstr "triple-quoted string"

#: ../../reference/lexical_analysis.rst:479
msgid "Unicode Consortium"
msgstr "Unicode コンソーシアム"

#: ../../reference/lexical_analysis.rst:479
msgid "raw string"
msgstr "raw 文字列"

#: ../../reference/lexical_analysis.rst:479
msgid "\"\"\""
msgstr ""

#: ../../reference/lexical_analysis.rst:479
msgid "'''"
msgstr ""

#: ../../reference/lexical_analysis.rst:492
msgid "b'"
msgstr ""

#: ../../reference/lexical_analysis.rst:492
msgid "b\""
msgstr ""

#: ../../reference/lexical_analysis.rst:501
msgid "r'"
msgstr ""

#: ../../reference/lexical_analysis.rst:501
msgid "raw string literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:501
msgid "r\""
msgstr ""

#: ../../reference/lexical_analysis.rst:519
msgid "f'"
msgstr ""

#: ../../reference/lexical_analysis.rst:519
#: ../../reference/lexical_analysis.rst:697
msgid "formatted string literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:519
msgid "f\""
msgstr ""

#: ../../reference/lexical_analysis.rst:532
msgid "escape sequence"
msgstr "エスケープシーケンス"

#: ../../reference/lexical_analysis.rst:532
msgid "Standard C"
msgstr "標準 C"

#: ../../reference/lexical_analysis.rst:532
msgid "C"
msgstr "C"

#: ../../reference/lexical_analysis.rst:532
msgid "\\ (backslash)"
msgstr ""

#: ../../reference/lexical_analysis.rst:532
msgid "\\\\"
msgstr "\\\\"

#: ../../reference/lexical_analysis.rst:532
msgid "\\a"
msgstr "\\a"

#: ../../reference/lexical_analysis.rst:532
msgid "\\b"
msgstr "\\b"

#: ../../reference/lexical_analysis.rst:532
msgid "\\f"
msgstr "\\f"

#: ../../reference/lexical_analysis.rst:532
msgid "\\n"
msgstr "\\n"

#: ../../reference/lexical_analysis.rst:532
msgid "\\r"
msgstr "\\r"

#: ../../reference/lexical_analysis.rst:532
msgid "\\t"
msgstr "\\t"

#: ../../reference/lexical_analysis.rst:532
msgid "\\v"
msgstr "\\v"

#: ../../reference/lexical_analysis.rst:532
msgid "\\x"
msgstr "\\x"

#: ../../reference/lexical_analysis.rst:532
msgid "\\u"
msgstr "\\u"

#: ../../reference/lexical_analysis.rst:532
msgid "\\U"
msgstr "\\U"

#: ../../reference/lexical_analysis.rst:648
msgid "unrecognized escape sequence"
msgstr "認識されなかったエスケープシーケンス"

#: ../../reference/lexical_analysis.rst:697
msgid "interpolated string literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:697
msgid "string"
msgstr "string"

#: ../../reference/lexical_analysis.rst:697
msgid "formatted literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:697
msgid "interpolated literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:697
msgid "f-string"
msgstr "f-string"

#: ../../reference/lexical_analysis.rst:697
msgid "fstring"
msgstr ""

#: ../../reference/lexical_analysis.rst:697
msgid "{} (curly brackets)"
msgstr "{} (波括弧)"

#: ../../reference/lexical_analysis.rst:697
msgid "in formatted string literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:697
msgid "! (exclamation)"
msgstr "! (エクスクラメーション)"

#: ../../reference/lexical_analysis.rst:697
msgid ": (colon)"
msgstr ": (コロン)"

#: ../../reference/lexical_analysis.rst:697
msgid "= (equals)"
msgstr "= (等号)"

#: ../../reference/lexical_analysis.rst:697
msgid "for help in debugging using string literals"
msgstr ""

#: ../../reference/lexical_analysis.rst:880
msgid "number"
msgstr "number"

#: ../../reference/lexical_analysis.rst:880
msgid "numeric literal"
msgstr "数値リテラル"

#: ../../reference/lexical_analysis.rst:880
#: ../../reference/lexical_analysis.rst:893
msgid "integer literal"
msgstr "整数リテラル"

#: ../../reference/lexical_analysis.rst:880
msgid "floating-point literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:880
msgid "hexadecimal literal"
msgstr "16進数リテラル"

#: ../../reference/lexical_analysis.rst:880
msgid "octal literal"
msgstr "8進数リテラル"

#: ../../reference/lexical_analysis.rst:880
msgid "binary literal"
msgstr "2進数リテラル"

#: ../../reference/lexical_analysis.rst:880
msgid "decimal literal"
msgstr "10進数リテラル"

#: ../../reference/lexical_analysis.rst:880
msgid "imaginary literal"
msgstr "虚数リテラル"

#: ../../reference/lexical_analysis.rst:880
msgid "complex literal"
msgstr "複素数リテラル"

#: ../../reference/lexical_analysis.rst:893
msgid "0b"
msgstr ""

#: ../../reference/lexical_analysis.rst:893
msgid "0o"
msgstr ""

#: ../../reference/lexical_analysis.rst:893
msgid "0x"
msgstr ""

#: ../../reference/lexical_analysis.rst:893
#: ../../reference/lexical_analysis.rst:939
msgid "_ (underscore)"
msgstr "_ (下線)"

#: ../../reference/lexical_analysis.rst:893
#: ../../reference/lexical_analysis.rst:939
#: ../../reference/lexical_analysis.rst:971
msgid "in numeric literal"
msgstr ""

#: ../../reference/lexical_analysis.rst:939
msgid ". (dot)"
msgstr ". (ドット)"

#: ../../reference/lexical_analysis.rst:939
msgid "e"
msgstr ""

#: ../../reference/lexical_analysis.rst:971
msgid "j"
msgstr ""

#: ../../reference/lexical_analysis.rst:997
msgid "operators"
msgstr "演算子"

#: ../../reference/lexical_analysis.rst:1014
msgid "delimiters"
msgstr "デリミタ"
