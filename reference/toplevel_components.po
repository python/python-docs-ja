# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2018-06-23 04:51+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../reference/toplevel_components.rst:6
msgid "Top-level components"
msgstr "トップレベル要素"

#: ../../reference/toplevel_components.rst:10
msgid ""
"The Python interpreter can get its input from a number of sources: from a "
"script passed to it as standard input or as program argument, typed in "
"interactively, from a module source file, etc.  This chapter gives the "
"syntax used in these cases."
msgstr ""
"Python インタプリタは、標準入力や、プログラムの引数として与えられたスクリプ"
"ト、対話的にタイプ入力された命令、モジュールのソースファイルなど、様々な入力"
"源から入力を得ることができます。この章では、それぞれの場合に用いられる構文法"
"について説明しています。"

#: ../../reference/toplevel_components.rst:19
msgid "Complete Python programs"
msgstr "完全な Python プログラム"

#: ../../reference/toplevel_components.rst:28
msgid ""
"While a language specification need not prescribe how the language "
"interpreter is invoked, it is useful to have a notion of a complete Python "
"program.  A complete Python program is executed in a minimally initialized "
"environment: all built-in and standard modules are available, but none have "
"been initialized, except for :mod:`sys` (various system services), :mod:"
"`__builtin__` (built-in functions, exceptions and ``None``) and :mod:"
"`__main__`.  The latter is used to provide the local and global namespace "
"for execution of the complete program."
msgstr ""
"言語仕様の中では、その言語を処理するインタプリタがどのように起動されるかまで"
"規定する必要はないのですが、完全な Python プログラムについての概念を持ってお"
"くと役に立ちます。完全な Python プログラムは、最小限に初期化された環境 : 全て"
"の組み込み変数と標準モジュールが利用可能で、かつ :mod:`sys` ( 様々なシステム"
"サービス ) 、 :mod:`__builtin__` ( 組み込み関数、例外、および ``None``) 、 :"
"mod:`__main__` の 3 つを除く全てのモジュールが初期化されていない状態で動作し"
"ます。 :mod:`__main__` は、完全なプログラムを実行する際に、ローカルおよびグ"
"ローバルな名前空間を提供するために用いられます。"

#: ../../reference/toplevel_components.rst:36
msgid ""
"The syntax for a complete Python program is that for file input, described "
"in the next section."
msgstr ""
"完全な Python プログラムの構文は、下の節で述べるファイル入力のためのもので"
"す。"

#: ../../reference/toplevel_components.rst:43
msgid ""
"The interpreter may also be invoked in interactive mode; in this case, it "
"does not read and execute a complete program but reads and executes one "
"statement (possibly compound) at a time.  The initial environment is "
"identical to that of a complete program; each statement is executed in the "
"namespace of :mod:`__main__`."
msgstr ""
"インタプリタは、対話的モード (interactive mode) で起動されることもあります; "
"この場合、インタプリタは完全なプログラムを読んで実行するのではなく、一度に単"
"一の実行文 (複合文のときもあります) を読み込んで実行します。初期状態の環境"
"は、完全なプログラムを実行するときの環境と同じです; 各実行文は、 :mod:"
"`__main__` の名前空間内で実行されます。"

#: ../../reference/toplevel_components.rst:54
msgid ""
"A complete program can be passed to the interpreter in three forms: with "
"the :option:`-c` *string* command line option, as a file passed as the first "
"command line argument, or as standard input. If the file or standard input "
"is a tty device, the interpreter enters interactive mode; otherwise, it "
"executes the file as a complete program."
msgstr ""

#: ../../reference/toplevel_components.rst:64
msgid "File input"
msgstr "ファイル入力"

#: ../../reference/toplevel_components.rst:66
msgid "All input read from non-interactive files has the same form:"
msgstr "非対話的なファイルから読み出された入力は、全て同じ形式:"

#: ../../reference/toplevel_components.rst:71
msgid "This syntax is used in the following situations:"
msgstr "をとります。この構文法は、以下の状況で用いられます:"

#: ../../reference/toplevel_components.rst:73
msgid "when parsing a complete Python program (from a file or from a string);"
msgstr "(ファイルや文字列内の) 完全な Python プログラムを構文解析するとき;"

#: ../../reference/toplevel_components.rst:75
msgid "when parsing a module;"
msgstr "モジュールを構文解析するとき;"

#: ../../reference/toplevel_components.rst:77
msgid "when parsing a string passed to the :keyword:`exec` statement;"
msgstr ":keyword:`exec` 文に渡された文字列を構文解析するとき;"

#: ../../reference/toplevel_components.rst:83
msgid "Interactive input"
msgstr "対話的入力"

#: ../../reference/toplevel_components.rst:85
msgid "Input in interactive mode is parsed using the following grammar:"
msgstr "対話モードでの入力は、以下の文法の下に構文解析されます:"

#: ../../reference/toplevel_components.rst:90
msgid ""
"Note that a (top-level) compound statement must be followed by a blank line "
"in interactive mode; this is needed to help the parser detect the end of the "
"input."
msgstr ""
"対話モードでは、(トップレベルの) 複合文の最後に空白行を入れなくてはならないこ"
"とに注意してください; これは、複合文の終端をパーザが検出するための手がかりと"
"して必要です。"

#: ../../reference/toplevel_components.rst:97
msgid "Expression input"
msgstr "式入力"

#: ../../reference/toplevel_components.rst:103
msgid ""
"There are two forms of expression input.  Both ignore leading whitespace. "
"The string argument to :func:`eval` must have the following form:"
msgstr ""
"式入力には二つの形式があります。双方とも、先頭の空白を無視します。 :func:"
"`eval` に対する文字列引数は、以下の形式をとらなければなりません:"

#: ../../reference/toplevel_components.rst:111
msgid "The input line read by :func:`input` must have the following form:"
msgstr ""
":func:`input` で読み込まれる入力行は、以下の形式をとらなければなりません:"

#: ../../reference/toplevel_components.rst:123
msgid ""
"Note: to read 'raw' input line without interpretation, you can use the built-"
"in function :func:`raw_input` or the :meth:`readline` method of file objects."
msgstr ""
"注意 : 文としての解釈を行わない ' 生の (raw)' 入力行を読み出すためには、組み"
"込み関数 :func:`raw_input` や、ファイルオブジェクトの :meth:`readline` メソッ"
"ドを使うことができます。"
