# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:06+0000\n"
"PO-Revision-Date: 2020-05-30 12:15+0000\n"
"Last-Translator: tomo, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../reference/introduction.rst:6
msgid "Introduction"
msgstr "はじめに"

#: ../../reference/introduction.rst:8
msgid ""
"This reference manual describes the Python programming language. It is not "
"intended as a tutorial."
msgstr ""
"このリファレンスマニュアルは、Python プログラミング言語自体に関する記述です。"
"チュートリアルとして書かれたものではありません。"

#: ../../reference/introduction.rst:11
msgid ""
"While I am trying to be as precise as possible, I chose to use English "
"rather than formal specifications for everything except syntax and lexical "
"analysis. This should make the document more understandable to the average "
"reader, but will leave room for ambiguities. Consequently, if you were "
"coming from Mars and tried to re-implement Python from this document alone, "
"you might have to guess things and in fact you would probably end up "
"implementing quite a different language. On the other hand, if you are using "
"Python and wonder what the precise rules about a particular area of the "
"language are, you should definitely be able to find them here. If you would "
"like to see a more formal definition of the language, maybe you could "
"volunteer your time --- or invent a cloning machine :-)."
msgstr ""
"私は本マニュアルをできるだけ正確に書こうとする一方で、文法や字句解析以外の全"
"てについて、形式化された仕様記述ではなく英語を使うことにしました。そうするこ"
"とで、このドキュメントが平均的な読者にとってより読みやすくなっているはずです"
"が、ややあいまいな部分も残っていることでしょう。従って、もし読者のあなたが火"
"星から来ている人で、このドキュメントだけから Python を再度実装しようとしてい"
"るのなら、色々と推測しなければならないことがあり、実際にはおそらく全く別の言"
"語を実装する羽目になるでしょう。逆に、あなたが Python を利用しており、Python "
"言語のある特定の領域において、厳密な規則が何か疑問に思った場合、その答えはこ"
"のドキュメントで確実に見つけられることでしょう。もしより形式化された言語定義"
"をお望みなら、あなたの時間を提供していただいてかまいません --- もしくは、ク"
"ローン生成装置でも発明してください :-)。"

#: ../../reference/introduction.rst:23
msgid ""
"It is dangerous to add too many implementation details to a language "
"reference document --- the implementation may change, and other "
"implementations of the same language may work differently.  On the other "
"hand, CPython is the one Python implementation in widespread use (although "
"alternate implementations continue to gain support), and its particular "
"quirks are sometimes worth being mentioned, especially where the "
"implementation imposes additional limitations. Therefore, you'll find short "
"\"implementation notes\" sprinkled throughout the text."
msgstr ""
"実装に関する詳細を言語リファレンスのドキュメントに載せすぎるのは危険なことで"
"す --- 実装は変更されるかもしれず、同じ言語でも異なる実装は異なった動作をする"
"かもしれないからです。一方、CPython が広く使われている一つの Python 実装 (別"
"の実装も支持され続けていますが) なので、特定のクセについては、特に実装によっ"
"て何らかの制限が加えられている場合には、触れておく価値があります。従って、こ"
"のテキスト全体にわたって短い \"実装に関する注釈 (imprementation notes)\" がち"
"りばめられています。"

#: ../../reference/introduction.rst:32
msgid ""
"Every Python implementation comes with a number of built-in and standard "
"modules.  These are documented in :ref:`library-index`.  A few built-in "
"modules are mentioned when they interact in a significant way with the "
"language definition."
msgstr ""
"Python 実装はいずれも、数々の組み込みモジュールと標準モジュールが付属します。"
"それらについては、 :ref:`library-index` でドキュメント化されています。いくつ"
"かの組み込みモジュールについては、言語定義と重要なかかわりをもっているときに"
"ついて触れています。"

#: ../../reference/introduction.rst:41
msgid "Alternate Implementations"
msgstr "別のPythonの実装"

#: ../../reference/introduction.rst:43
msgid ""
"Though there is one Python implementation which is by far the most popular, "
"there are some alternate implementations which are of particular interest to "
"different audiences."
msgstr ""
"Pythonの実装としては、群を抜いて有名な実装がひとつ存在しています。それ以外の"
"実装に関しても、特定のユーザ間で興味が持たれています。"

#: ../../reference/introduction.rst:47
msgid "Known implementations include:"
msgstr "よく知られている実装には以下のものがあります:"

#: ../../reference/introduction.rst:51
msgid "CPython"
msgstr "CPython"

#: ../../reference/introduction.rst:50
msgid ""
"This is the original and most-maintained implementation of Python, written "
"in C. New language features generally appear here first."
msgstr ""
"これは最も保守されている初代のPython実装で、C言語で書かれています。ほとんどの"
"場合、言語の新機能がいち早く実装されます。"

#: ../../reference/introduction.rst:57
msgid "Jython"
msgstr "Jython"

#: ../../reference/introduction.rst:54
msgid ""
"Python implemented in Java.  This implementation can be used as a scripting "
"language for Java applications, or can be used to create applications using "
"the Java class libraries.  It is also often used to create tests for Java "
"libraries. More information can be found at `the Jython website <http://www."
"jython.org/>`_."
msgstr ""
"Javaで実装されたPythonです。この実装はJavaアプリケーションのためのスクリプト"
"言語として、もしくはJavaクラスライブラリを使ったアプリケーションを作成するた"
"めに使用することができます。また、Javaライブラリのテストを作成するためにもし"
"ばしば使用されています。さらなる情報については `the Jython website <http://"
"www.jython.org/>`_ を参照してください。"

#: ../../reference/introduction.rst:63
msgid "Python for .NET"
msgstr "Python for .NET"

#: ../../reference/introduction.rst:60
msgid ""
"This implementation actually uses the CPython implementation, but is a "
"managed .NET application and makes .NET libraries available.  It was created "
"by Brian Lloyd.  For more information, see the `Python for .NET home page "
"<https://pythonnet.github.io/>`_."
msgstr ""
"この実装は内部ではCPythonを使用していますが、 .NETアプリケーションによって管"
"理されているので、 .NETライブラリを参照することが可能です。この実装はBrian "
"Lloydによって作成されました。さらなる情報については、 `Python for .NET home "
"page <https://pythonnet.github.io/>`_ を参照してください。"

#: ../../reference/introduction.rst:69
msgid "IronPython"
msgstr "IronPython"

#: ../../reference/introduction.rst:66
msgid ""
"An alternate Python for .NET.  Unlike Python.NET, this is a complete Python "
"implementation that generates IL, and compiles Python code directly to .NET "
"assemblies.  It was created by Jim Hugunin, the original creator of Jython.  "
"For more information, see `the IronPython website <http://ironpython.net/>`_."
msgstr ""
".NETでPythonを使用するためのもう一つの実装です。Python.NETとは異なり、完全に"
"ILを生成することができるPythonの実装あり、直接Pythonコードを.NETアセンブリに"
"コンパイルします。これはJythonの初代の開発者であるJim Huguninによって作られま"
"した。さらなる情報については `the IronPython website <http://ironpython.net/"
">`_ を参照してください。"

#: ../../reference/introduction.rst:77
msgid "PyPy"
msgstr "PyPy"

#: ../../reference/introduction.rst:72
msgid ""
"An implementation of Python written completely in Python. It supports "
"several advanced features not found in other implementations like stackless "
"support and a Just in Time compiler. One of the goals of the project is to "
"encourage experimentation with the language itself by making it easier to "
"modify the interpreter (since it is written in Python).  Additional "
"information is available on `the PyPy project's home page <http://pypy.org/"
">`_."
msgstr ""
"完全にPythonで書かれたPythonの実装です。他の実装には見られない、スタックレス"
"のサポートや、実行時 (Just in Time) コンパイラなどの高度な機能をサポートして"
"います。このプロジェクトの一つの目的は、（Pythonで書かれていることによっ"
"て、）インタプリタを簡単に修正できるようにして、言語自体での実験を後押しする"
"ことです。さらなる情報は `the PyPy project's home page <http://pypy.org/>`_ "
"にあります。"

#: ../../reference/introduction.rst:79
msgid ""
"Each of these implementations varies in some way from the language as "
"documented in this manual, or introduces specific information beyond what's "
"covered in the standard Python documentation.  Please refer to the "
"implementation-specific documentation to determine what else you need to "
"know about the specific implementation you're using."
msgstr ""
"これらの各実装はこのマニュアルで文書化された言語とは多少異なっている、もしく"
"は、標準のPythonドキュメントと何処が異なっているかを定めた情報が公開されてい"
"るでしょう。あなたが使用している実装上で、代替手段を使う必要があるかどうかを"
"判断するためには、各実装の仕様書を参照してください。"

#: ../../reference/introduction.rst:89
msgid "Notation"
msgstr "本マニュアルにおける表記法"

#: ../../reference/introduction.rst:93
msgid ""
"The descriptions of lexical analysis and syntax use a modified BNF grammar "
"notation.  This uses the following style of definition:"
msgstr ""
"字句解析と構文に関する記述では、BNF 文法記法に手を加えたものを使っています。"
"この記法では、以下のような記述形式をとります:"

#: ../../reference/introduction.rst:100
msgid ""
"The first line says that a ``name`` is an ``lc_letter`` followed by a "
"sequence of zero or more ``lc_letter``\\ s and underscores.  An "
"``lc_letter`` in turn is any of the single characters ``'a'`` through "
"``'z'``.  (This rule is actually adhered to for the names defined in lexical "
"and grammar rules in this document.)"
msgstr ""
"最初の行は、``name`` が ``lc_letter`` の後ろにゼロ個またはそれ以上の "
"``lc_letter`` とアンダースコアが続いたものであることを示しています。そして、"
"``lc_letter`` は ``'a'`` から ``'z'`` までの何らかの文字一字であることを示し"
"ます。 (この規則は、このドキュメントに記述されている字句規則と構文規則におい"
"て定義されている名前 (name) で一貫して使われています)。"

#: ../../reference/introduction.rst:105
msgid ""
"Each rule begins with a name (which is the name defined by the rule) and ``::"
"=``.  A vertical bar (``|``) is used to separate alternatives; it is the "
"least binding operator in this notation.  A star (``*``) means zero or more "
"repetitions of the preceding item; likewise, a plus (``+``) means one or "
"more repetitions, and a phrase enclosed in square brackets (``[ ]``) means "
"zero or one occurrences (in other words, the enclosed phrase is optional).  "
"The ``*`` and ``+`` operators bind as tightly as possible; parentheses are "
"used for grouping.  Literal strings are enclosed in quotes.  White space is "
"only meaningful to separate tokens. Rules are normally contained on a single "
"line; rules with many alternatives may be formatted alternatively with each "
"line after the first beginning with a vertical bar."
msgstr ""
"各規則は name (規則によって定義されているものの名前) と ``::=`` から始まりま"
"す。垂直線 (``|``) は、複数の選択項目を分かち書きするときに使います; この記号"
"は、この記法において最も結合優先度の低い演算子です。アスタリスク (``*``) は、"
"直前にくる要素のゼロ個以上の繰り返しを表します; 同様に、プラス (``+``) は一個"
"以上の繰り返しで、角括弧 (``[ ]``) に囲われた字句は、字句がゼロ個か一個出現す"
"る (別の言い方をすれば、囲いの中の字句はオプションである) ことを示します。"
"``*`` および ``+`` 演算子の結合範囲は可能な限り狭くなっています; 字句のグルー"
"プ化には丸括弧を使います。リテラル文字列はクオートで囲われます。空白はトーク"
"ンを分割しているときのみ意味を持ちます。規則は通常、一行中に収められていま"
"す; 多数の選択肢のある規則は、最初の行につづいて、垂直線の後ろに各々別の行と"
"して記述されます。"

#: ../../reference/introduction.rst:119
msgid ""
"In lexical definitions (as the example above), two more conventions are "
"used: Two literal characters separated by three dots mean a choice of any "
"single character in the given (inclusive) range of ASCII characters.  A "
"phrase between angular brackets (``<...>``) gives an informal description of "
"the symbol defined; e.g., this could be used to describe the notion of "
"'control character' if needed."
msgstr ""
"(上の例のような) 字句定義では、他に二つの慣習が使われています: 三つのドットで"
"区切られている二つのリテラル文字は、二つの文字の ASCII 文字コードにおける (包"
"含的な) 範囲から文字を一字選ぶことを示します。各カッコ中の字句 (``<...>``) "
"は、定義済みのシンボルを記述する非形式的なやりかたです; 例えば、'制御文字' を"
"書き表す必要があるときなどに使われることがあります。"

#: ../../reference/introduction.rst:126
msgid ""
"Even though the notation used is almost the same, there is a big difference "
"between the meaning of lexical and syntactic definitions: a lexical "
"definition operates on the individual characters of the input source, while "
"a syntax definition operates on the stream of tokens generated by the "
"lexical analysis. All uses of BNF in the next chapter (\"Lexical Analysis\") "
"are lexical definitions; uses in subsequent chapters are syntactic "
"definitions."
msgstr ""
"字句と構文規則の定義の間で使われている表記はほとんど同じですが、その意味には"
"大きな違いがあります: 字句定義は入力ソース中の個々の文字を取り扱いますが、構"
"文定義は字句解析で生成された一連のトークンを取り扱います。次節 (\"字句解析"
"\") における BNF はすべて字句定義のためのものです; それ以降の章では、構文定義"
"のために使っています。"
