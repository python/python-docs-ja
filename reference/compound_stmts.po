# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../reference/compound_stmts.rst:5
msgid "Compound statements"
msgstr "複合文 (compound statement)"

#: ../../reference/compound_stmts.rst:9
msgid ""
"Compound statements contain (groups of) other statements; they affect or "
"control the execution of those other statements in some way.  In general, "
"compound statements span multiple lines, although in simple incarnations a "
"whole compound statement may be contained in one line."
msgstr ""
"複合文には、他の文 (のグループ) が入ります; 複合文は、中に入っている他の文の"
"実行の制御に何らかのやり方で影響を及ぼします。一般的には、複合文は複数行にま"
"たがって書かれますが、全部の文を一行に連ねた単純な書き方もあります。"

#: ../../reference/compound_stmts.rst:14
msgid ""
"The :keyword:`if`, :keyword:`while` and :keyword:`for` statements implement "
"traditional control flow constructs.  :keyword:`try` specifies exception "
"handlers and/or cleanup code for a group of statements.  Function and class "
"definitions are also syntactically compound statements."
msgstr ""
":keyword:`if` 、 :keyword:`while` 、および :keyword:`for` 文は、伝統的な制御"
"フロー構成を実現します。 :keyword:`try` は例外処理および / または一連の文に対"
"するクリーンアップコードを指定します。関数とクラス定義もまた、構文法的には複"
"合文です。"

#: ../../reference/compound_stmts.rst:23
msgid ""
"Compound statements consist of one or more 'clauses.'  A clause consists of "
"a header and a 'suite.'  The clause headers of a particular compound "
"statement are all at the same indentation level. Each clause header begins "
"with a uniquely identifying keyword and ends with a colon.  A suite is a "
"group of statements controlled by a clause.  A suite can be one or more "
"semicolon-separated simple statements on the same line as the header, "
"following the header's colon, or it can be one or more indented statements "
"on subsequent lines.  Only the latter form of suite can contain nested "
"compound statements; the following is illegal, mostly because it wouldn't be "
"clear to which :keyword:`if` clause a following :keyword:`else` clause would "
"belong:   ::"
msgstr ""
"複合文は、一つまたはそれ以上の ' 節 (clause)' からなります。一つの節は、ヘッ"
"ダと ' スイート (suite)' からなります。特定の複合文を構成する節のヘッダ部分"
"は、全て同じインデントレベルになります。各々の節ヘッダ行は一意に識別される"
"キーワードから始まり、コロンで終わります。スイートは、ヘッダのコロンの後ろに"
"セミコロンで区切られた一つまたはそれ以上の単純文を並べるか、ヘッダ行後のイン"
"デントされた文の集まりです。後者の形式のスイートに限り、ネストされた複合文を"
"入れることができます ; 以下の文は、 :keyword:`else` 節がどの :keyword:`if` 節"
"に属するかがはっきりしないという理由から不正になります :"

#: ../../reference/compound_stmts.rst:36
msgid ""
"Also note that the semicolon binds tighter than the colon in this context, "
"so that in the following example, either all or none of the :keyword:`print` "
"statements are executed::"
msgstr ""
"また、このコンテキスト中では、セミコロンはコロンよりも強い結合を表すことにも"
"注意してください。従って、以下の例では、 :keyword:`print` は全て実行される"
"か、されないかのどちらかです ::"

#: ../../reference/compound_stmts.rst:42
msgid "Summarizing:"
msgstr "まとめると、以下のようになります:"

#: ../../reference/compound_stmts.rst:62
msgid ""
"Note that statements always end in a ``NEWLINE`` possibly followed by a "
"``DEDENT``. Also note that optional continuation clauses always begin with a "
"keyword that cannot start a statement, thus there are no ambiguities (the "
"'dangling :keyword:`else`' problem is solved in Python by requiring nested :"
"keyword:`if` statements to be indented)."
msgstr ""
"文は常に ``NEWLINE`` か、その後に ``DEDENT`` が続いたもので終了することに注意"
"してください。また、オプションの継続節は常にあるキーワードから始まり、この"
"キーワードから複合文を開始することはできないため、曖昧さは存在しないことにも"
"注意してください (Python では、 ' ぶら下がり (dangling) :keyword:`else`' 問題"
"を、ネストされた :keyword:`if` 文はインデントさせること解決しています ) 。"

#: ../../reference/compound_stmts.rst:68
msgid ""
"The formatting of the grammar rules in the following sections places each "
"clause on a separate line for clarity."
msgstr ""
"以下の節における文法規則の記述方式は、明確さのために、各節を別々の行に書くよ"
"うにしています。"

#: ../../reference/compound_stmts.rst:77
msgid "The :keyword:`if` statement"
msgstr ":keyword:`if` 文"

#: ../../reference/compound_stmts.rst:84
msgid "The :keyword:`if` statement is used for conditional execution:"
msgstr ":keyword:`if` 文は、条件分岐を実行するために使われます:"

#: ../../reference/compound_stmts.rst:91
msgid ""
"It selects exactly one of the suites by evaluating the expressions one by "
"one until one is found to be true (see section :ref:`booleans` for the "
"definition of true and false); then that suite is executed (and no other "
"part of the :keyword:`if` statement is executed or evaluated).  If all "
"expressions are false, the suite of the :keyword:`else` clause, if present, "
"is executed."
msgstr ""
":keyword:`if` 文は、式を一つ一つ評価してゆき、真になるまで続けて、真になった"
"節のスイートだけを選択します (真: true と偽: false の定義については、 :ref:"
"`booleans` 節を参照してください); 次に、選択したスイートを実行します (そし"
"て、 :keyword:`if` 文の他の部分は、実行や評価をされません)。全ての式が偽に"
"なった場合、 :keyword:`else` 節があれば、そのスイートが実行されます。"

#: ../../reference/compound_stmts.rst:101
msgid "The :keyword:`while` statement"
msgstr ":keyword:`while` 文"

#: ../../reference/compound_stmts.rst:108
msgid ""
"The :keyword:`while` statement is used for repeated execution as long as an "
"expression is true:"
msgstr ""
":keyword:`while` 文は、式の値が真である間、実行を繰り返すために使われます:"

#: ../../reference/compound_stmts.rst:115
msgid ""
"This repeatedly tests the expression and, if it is true, executes the first "
"suite; if the expression is false (which may be the first time it is tested) "
"the suite of the :keyword:`else` clause, if present, is executed and the "
"loop terminates."
msgstr ""
":keyword:`while` 文は式を繰り返し真偽評価し、真であれば最初のスイートを実行し"
"ます。式が偽であれば (最初から偽になっていることもありえます)、 :keyword:"
"`else` 節がある場合にはそれを実行し、ループを終了します。"

#: ../../reference/compound_stmts.rst:124
msgid ""
"A :keyword:`break` statement executed in the first suite terminates the loop "
"without executing the :keyword:`else` clause's suite.  A :keyword:`continue` "
"statement executed in the first suite skips the rest of the suite and goes "
"back to testing the expression."
msgstr ""
"最初のスイート内で :keyword:`break` 文が実行されると、 :keyword:`else` 節のス"
"イートを実行することなくループを終了します。 :keyword:`continue` 文が最初のス"
"イート内で実行されると、スイート内にある残りの文の実行をスキップして、式の真"
"偽評価に戻ります。"

#: ../../reference/compound_stmts.rst:133
msgid "The :keyword:`for` statement"
msgstr ":keyword:`for` 文"

#: ../../reference/compound_stmts.rst:143
msgid ""
"The :keyword:`for` statement is used to iterate over the elements of a "
"sequence (such as a string, tuple or list) or other iterable object:"
msgstr ""
":keyword:`for` 文は、シーケンス (文字列、タプルまたはリスト) や、その他の反復"
"可能なオブジェクト (iterable object) 内の要素に渡って反復処理を行うために使わ"
"れます:"

#: ../../reference/compound_stmts.rst:150
msgid ""
"The expression list is evaluated once; it should yield an iterable object.  "
"An iterator is created for the result of the ``expression_list``.  The suite "
"is then executed once for each item provided by the iterator, in the order "
"of ascending indices.  Each item in turn is assigned to the target list "
"using the standard rules for assignments, and then the suite is executed.  "
"When the items are exhausted (which is immediately when the sequence is "
"empty), the suite in the :keyword:`else` clause, if present, is executed, "
"and the loop terminates."
msgstr ""
"式リストは一度だけ評価されます ; 結果はイテレーション可能オブジェクトにならね"
"ばなりません。 ``expression_list`` の結果に対してイテレータを生成し、その後、"
"シーケンスの各要素についてインデクスの小さい順に一度だけスイートを実行しま"
"す。このときシーケンス内の要素が通常の代入規則を使ってターゲットリストに代入"
"され、その後スイートが実行されます。全ての要素を使い切ると ( シーケンスが空の"
"場合にはすぐに ) 、 :keyword:`else` 節があればそれが実行され、ループを終了し"
"ます。"

#: ../../reference/compound_stmts.rst:162
msgid ""
"A :keyword:`break` statement executed in the first suite terminates the loop "
"without executing the :keyword:`else` clause's suite.  A :keyword:`continue` "
"statement executed in the first suite skips the rest of the suite and "
"continues with the next item, or with the :keyword:`else` clause if there "
"was no next item."
msgstr ""
"最初のスイート内で :keyword:`break` 文が実行されると、 :keyword:`else` 節のス"
"イートを実行することなくループを終了します。 :keyword:`continue` 文が最初のス"
"イート内で実行されると、スイート内にある残りの文の実行をスキップして、次の要"
"素の処理に移るか、これ以上次の要素が無い場合は :keyword:`else` 節の処理に移り"
"ます。"

#: ../../reference/compound_stmts.rst:168
msgid ""
"The suite may assign to the variable(s) in the target list; this does not "
"affect the next item assigned to it."
msgstr ""
"スイートの中では、ターゲットリスト内の変数に代入を行えます; この代入によっ"
"て、次に代入される要素に影響を及ぼすことはありません。"

#: ../../reference/compound_stmts.rst:175
msgid ""
"The target list is not deleted when the loop is finished, but if the "
"sequence is empty, it will not have been assigned to at all by the loop.  "
"Hint: the built-in function :func:`range` returns a sequence of integers "
"suitable to emulate the effect of Pascal's ``for i := a to b do``; e.g., "
"``range(3)`` returns the list ``[0, 1, 2]``."
msgstr ""
"ループが終了してもターゲットリストは削除されませんが、シーケンスが空の場合に"
"は、ループでの代入は全く行われません。ヒント : 組み込み関数 :func:`range` "
"は、 Pascal 言語における ``for i := a to b do`` の効果をエミュレートするのに"
"適した数列を返します ; すなわち、 ``range(3)`` はリスト ``[0, 1, 2]`` を返し"
"ます。"

#: ../../reference/compound_stmts.rst:187
msgid ""
"There is a subtlety when the sequence is being modified by the loop (this "
"can only occur for mutable sequences, e.g. lists). An internal counter is "
"used to keep track of which item is used next, and this is incremented on "
"each iteration.  When this counter has reached the length of the sequence "
"the loop terminates.  This means that if the suite deletes the current (or a "
"previous) item from the sequence, the next item will be skipped (since it "
"gets the index of the current item which has already been treated).  "
"Likewise, if the suite inserts an item in the sequence before the current "
"item, the current item will be treated again the next time through the loop. "
"This can lead to nasty bugs that can be avoided by making a temporary copy "
"using a slice of the whole sequence, e.g., ::"
msgstr ""

#: ../../reference/compound_stmts.rst:208
msgid "The :keyword:`try` statement"
msgstr ":keyword:`try` 文"

#: ../../reference/compound_stmts.rst:215
msgid ""
"The :keyword:`try` statement specifies exception handlers and/or cleanup "
"code for a group of statements:"
msgstr ""
":keyword:`try` 文は、ひとまとめの文に対して、例外処理および/またはクリーン"
"アップコードを指定します:"

#: ../../reference/compound_stmts.rst:227
msgid ""
"In previous versions of Python, :keyword:`try`...\\ :keyword:`except`...\\ :"
"keyword:`finally` did not work. :keyword:`try`...\\ :keyword:`except` had to "
"be nested in :keyword:`try`...\\ :keyword:`finally`."
msgstr ""
"以前のバージョンの Python では、 :keyword:`try`... :keyword:`except`... :"
"keyword:`finally` は機能しませんでした。 :keyword:`try`... :keyword:`except` "
"は :keyword:`try`... :keyword:`finally` 中でネストさせる必要がありました。"

#: ../../reference/compound_stmts.rst:232
msgid ""
"The :keyword:`except` clause(s) specify one or more exception handlers. When "
"no exception occurs in the :keyword:`try` clause, no exception handler is "
"executed. When an exception occurs in the :keyword:`try` suite, a search for "
"an exception handler is started.  This search inspects the except clauses in "
"turn until one is found that matches the exception.  An expression-less "
"except clause, if present, must be last; it matches any exception.  For an "
"except clause with an expression, that expression is evaluated, and the "
"clause matches the exception if the resulting object is \"compatible\" with "
"the exception.  An object is compatible with an exception if it is the class "
"or a base class of the exception object, or a tuple containing an item "
"compatible with the exception."
msgstr ""
":keyword:`except` 節は一つ以上の例外ハンドラを指定します。 :keyword:`try` 節"
"内で例外が起きなければ、どの例外ハンドラも実行されません。 :keyword:`try` ス"
"イート内で例外が発生すると、例外ハンドラの検索が開始されます。この検索で"
"は、 :keyword:`except`  節を逐次、発生した例外に対応するまで調べます。式を伴"
"わない :keyword:`except` 節を使うなら、最後に書かなければならず、これは全ての"
"例外に対応します。式を伴う :keyword:`except` 節に対しては、その式が評価され、"
"結果のオブジェクトが例外と \"互換である (compatible)\" 場合にその節が対応しま"
"す。ある例外に対してオブジェクトが互換であるのは、それが例外オブジェクトのク"
"ラスかベースクラスの場合、または例外と互換である要素が入ったタプルである場合"
"です。"

#: ../../reference/compound_stmts.rst:243
msgid ""
"If no except clause matches the exception, the search for an exception "
"handler continues in the surrounding code and on the invocation stack.  [#]_"
msgstr ""
"例外がどの :keyword:`except` 節にも合致しなかった場合、現在のコードを囲うさら"
"に外側、そして呼び出しスタックへと検索を続けます。 [#]_"

#: ../../reference/compound_stmts.rst:246
msgid ""
"If the evaluation of an expression in the header of an except clause raises "
"an exception, the original search for a handler is canceled and a search "
"starts for the new exception in the surrounding code and on the call stack "
"(it is treated as if the entire :keyword:`try` statement raised the "
"exception)."
msgstr ""
":keyword:`except` 節のヘッダにある式を値評価するときに例外が発生すると、元々"
"のハンドラ検索はキャンセルされ、新たな例外に対する例外ハンドラの検索を現在"
"の :keyword:`except` 節の外側のコードや呼び出しスタックに対して行います (:"
"keyword:`try` 文全体が例外を発行したかのように扱われます)。"

#: ../../reference/compound_stmts.rst:251
msgid ""
"When a matching except clause is found, the exception is assigned to the "
"target specified in that except clause, if present, and the except clause's "
"suite is executed.  All except clauses must have an executable block.  When "
"the end of this block is reached, execution continues normally after the "
"entire try statement.  (This means that if two nested handlers exist for the "
"same exception, and the exception occurs in the try clause of the inner "
"handler, the outer handler will not handle the exception.)"
msgstr ""
"合致する except 節が見つかると、その :keyword:`except` 節はその except 節で指"
"定されているターゲットに代入されて、もし存在する場合、加えて except 節スイー"
"トが実行されます。全ての except 節は実行可能なブロックを持っていなければなり"
"ません。このブロックの末尾に到達すると、通常は :keyword:`try` 文全体の直後に"
"実行を継続します。 ( このことは、同じ例外に対してネストした二つの例外ハンドラ"
"が存在し、内側のハンドラ内の :keyword:`try` 節で例外が発生した場合、外側のハ"
"ンドラは例外を処理しないことを意味します。 )"

#: ../../reference/compound_stmts.rst:266
msgid ""
"Before an except clause's suite is executed, details about the exception are "
"assigned to three variables in the :mod:`sys` module: ``sys.exc_type`` "
"receives the object identifying the exception; ``sys.exc_value`` receives "
"the exception's parameter; ``sys.exc_traceback`` receives a traceback object "
"(see section :ref:`types`) identifying the point in the program where the "
"exception occurred. These details are also available through the :func:`sys."
"exc_info` function, which returns a tuple ``(exc_type, exc_value, "
"exc_traceback)``.  Use of the corresponding variables is deprecated in favor "
"of this function, since their use is unsafe in a threaded program.  As of "
"Python 1.5, the variables are restored to their previous values (before the "
"call) when returning from a function that handled an exception."
msgstr ""
":keyword:`except` 節のスイートが実行される前に、例外に関する詳細が :mod:"
"`sys` モジュール内の三つの変数に代入されます : ``sys.exc_type`` は、例外を示"
"すオブジェクトを受け取ります ; ``sys.exc_value`` は例外のパラメタを受け取りま"
"す ; ``sys.exc_traceback`` は、プログラム上の例外が発生した位置を識別するト"
"レースバックオブジェクト (:ref:`types` 参照 ) を受け取ります。これらの詳細は"
"また、関数 :func:`sys.exc_info` を介して入手することもできます。この関数はタ"
"プル ``(exc_type, exc_value, exc_traceback)`` を返します。ただしこの関数に対"
"応する変数の使用は、スレッドを使ったプログラムで安全に使えないため撤廃されて"
"います。 Python 1.5 からは、例外を処理した関数から戻るときに、以前の値 ( 関数"
"呼び出し前の値 ) に戻されます。"

#: ../../reference/compound_stmts.rst:284
msgid ""
"The optional :keyword:`else` clause is executed if the control flow leaves "
"the :keyword:`try` suite, no exception was raised, and no :keyword:"
"`return`, :keyword:`continue`, or :keyword:`break` statement was executed.  "
"Exceptions in the :keyword:`else` clause are not handled by the preceding :"
"keyword:`except` clauses."
msgstr ""

#: ../../reference/compound_stmts.rst:292
msgid ""
"If :keyword:`finally` is present, it specifies a 'cleanup' handler.  The :"
"keyword:`try` clause is executed, including any :keyword:`except` and :"
"keyword:`else` clauses.  If an exception occurs in any of the clauses and is "
"not handled, the exception is temporarily saved. The :keyword:`finally` "
"clause is executed.  If there is a saved exception, it is re-raised at the "
"end of the :keyword:`finally` clause. If the :keyword:`finally` clause "
"raises another exception or executes a :keyword:`return` or :keyword:`break` "
"statement, the saved exception is discarded::"
msgstr ""
":keyword:`finally` 節がある場合は、 '後始末 (cleanup)' の対処を指定します。ま"
"ず :keyword:`except` 節や :keyword:`else` 節を含め、 :keyword:`try` 節が実行"
"されます。それらの節の中で例外が起き、誰も対処していない場合は、例外は一時的"
"に保存されます。次に :keyword:`finally` 節が実行されます。保存された例外が"
"あった場合は、 :keyword:`finally` 節の末尾で再送出されます。  :keyword:"
"`finally` 節で別の例外が送出される場合、あるいは :keyword:`return`, :keyword:"
"`break` 文を実行した場合は、保存された例外は破棄されます::"

#: ../../reference/compound_stmts.rst:310
msgid ""
"The exception information is not available to the program during execution "
"of the :keyword:`finally` clause."
msgstr ""
":keyword:`finally` 節を実行している間は、プログラムからは例外情報は利用できま"
"せん。"

#: ../../reference/compound_stmts.rst:318
msgid ""
"When a :keyword:`return`, :keyword:`break` or :keyword:`continue` statement "
"is executed in the :keyword:`try` suite of a :keyword:`try`...\\ :keyword:"
"`finally` statement, the :keyword:`finally` clause is also executed 'on the "
"way out.' A :keyword:`continue` statement is illegal in the :keyword:"
"`finally` clause. (The reason is a problem with the current implementation "
"--- this restriction may be lifted in the future)."
msgstr ""
":keyword:`try`...\\ :keyword:`finally` 文の :keyword:`try` スイート内で :"
"keyword:`return` 、 :keyword:`break` 、または :keyword:`continue` 文が実行さ"
"れた場合、 :keyword:`finally` 節も '抜け出る途中に (on the way out)' 実行され"
"ます。 :keyword:`finally` 節での :keyword:`continue` 文の使用は不正です。 (理"
"由は現在の実装上の問題です -- この制限は将来解消されるかもしれません)。"

#: ../../reference/compound_stmts.rst:325
msgid ""
"The return value of a function is determined by the last :keyword:`return` "
"statement executed.  Since the :keyword:`finally` clause always executes, a :"
"keyword:`return` statement executed in the :keyword:`finally` clause will "
"always be the last one executed::"
msgstr ""
"関数の返り値は最後に実行された :keyword:`return` 文によって決まります。\n"
":keyword:`finally` 節は必ず実行されるため、:keyword:`finally` 節で実行され"
"た :keyword:`return` 文は常に最後に実行されます::"

#: ../../reference/compound_stmts.rst:339
msgid ""
"Additional information on exceptions can be found in section :ref:"
"`exceptions`, and information on using the :keyword:`raise` statement to "
"generate exceptions may be found in section :ref:`raise`."
msgstr ""
"例外に関するその他の情報は :ref:`exceptions` 節にあります。また、 :keyword:"
"`raise` 文の使用による例外の生成に関する情報は、 :ref:`raise` 節にあります。"

#: ../../reference/compound_stmts.rst:348
msgid "The :keyword:`with` statement"
msgstr ":keyword:`with` 文"

#: ../../reference/compound_stmts.rst:356
msgid ""
"The :keyword:`with` statement is used to wrap the execution of a block with "
"methods defined by a context manager (see section :ref:`context-managers`). "
"This allows common :keyword:`try`...\\ :keyword:`except`...\\ :keyword:"
"`finally` usage patterns to be encapsulated for convenient reuse."
msgstr ""
":keyword:`with` 文は、ブロックの実行を、コンテキストマネージャによって定義さ"
"れたメソッドでラップするために使われます（ :ref:`context-managers` セクション"
"を参照してください）。これにより、よくある :keyword:`try`...\\ :keyword:"
"`except`...\\ :keyword:`finally` 利用パターンをカプセル化して便利に再利用する"
"ことができます。"

#: ../../reference/compound_stmts.rst:365
msgid ""
"The execution of the :keyword:`with` statement with one \"item\" proceeds as "
"follows:"
msgstr ""
"一つの \"要素\" を持つ :keyword:`with` 文の実行は以下のように進行します:"

#: ../../reference/compound_stmts.rst:367
msgid ""
"The context expression (the expression given in the :token:`with_item`) is "
"evaluated to obtain a context manager."
msgstr ""
"コンテキスト式 (:token:`with_item` で与えられた式) を評価することで、コンテキ"
"ストマネージャを取得します。"

#: ../../reference/compound_stmts.rst:370
msgid "The context manager's :meth:`__exit__` is loaded for later use."
msgstr ""
"コンテキストマネージャの :meth:`__exit__` メソッドが、後で使うためにロードさ"
"れます。"

#: ../../reference/compound_stmts.rst:372
msgid "The context manager's :meth:`__enter__` method is invoked."
msgstr "コンテキストマネージャの :meth:`__enter__` メソッドが呼ばれます。"

#: ../../reference/compound_stmts.rst:374
msgid ""
"If a target was included in the :keyword:`with` statement, the return value "
"from :meth:`__enter__` is assigned to it."
msgstr ""
":keyword:`with` 文にターゲットが含まれていたら、それに :meth:`__enter__` から"
"の戻り値が代入されます。"

#: ../../reference/compound_stmts.rst:379
msgid ""
"The :keyword:`with` statement guarantees that if the :meth:`__enter__` "
"method returns without an error, then :meth:`__exit__` will always be "
"called. Thus, if an error occurs during the assignment to the target list, "
"it will be treated the same as an error occurring within the suite would be. "
"See step 6 below."
msgstr ""
":keyword:`with` 文は、 :meth:`__enter__` メソッドがエラーなく終了した場合に"
"は :meth:`__exit__` が常に呼ばれることを保証します。ですので、もしエラーが"
"ターゲットリストへの代入中にエラーが発生した場合には、これはそのスイートの中"
"で発生したエラーと同じように扱われます。以下のステップ 6 を参照してください。"

#: ../../reference/compound_stmts.rst:384
msgid "The suite is executed."
msgstr "スイートが実行されます。"

#: ../../reference/compound_stmts.rst:386
msgid ""
"The context manager's :meth:`__exit__` method is invoked. If an exception "
"caused the suite to be exited, its type, value, and traceback are passed as "
"arguments to :meth:`__exit__`. Otherwise, three :const:`None` arguments are "
"supplied."
msgstr ""
"コンテキストマネージャの :meth:`__exit__` メソッドが呼ばれます。もし例外がス"
"イートを終了させる場合、その型、値、そしてトレースバックが :meth:`__exit__` "
"へ引数として渡されます。そうでなければ、 3 つの :const:`None` 引数が与えられ"
"ます。"

#: ../../reference/compound_stmts.rst:391
msgid ""
"If the suite was exited due to an exception, and the return value from the :"
"meth:`__exit__` method was false, the exception is reraised. If the return "
"value was true, the exception is suppressed, and execution continues with "
"the statement following the :keyword:`with` statement."
msgstr ""
"スイートが例外により終了され、 :meth:`__exit__` メソッドからの戻り値が偽"
"（ false ）ならば、例外が再送出されます。この戻り値が真（ true ）ならば例外は"
"抑制され、実行は :keyword:`with` 文の次の文から続きます。"

#: ../../reference/compound_stmts.rst:396
msgid ""
"If the suite was exited for any reason other than an exception, the return "
"value from :meth:`__exit__` is ignored, and execution proceeds at the normal "
"location for the kind of exit that was taken."
msgstr ""
"もしそのスイートが例外でない何らかの理由で終了した場合、その :meth:"
"`__exit__` からの戻り値は無視されて、実行は発生した終了の種類に応じた通常の位"
"置から継続します。"

#: ../../reference/compound_stmts.rst:400
msgid ""
"With more than one item, the context managers are processed as if multiple :"
"keyword:`with` statements were nested::"
msgstr ""
"複数の要素があるとき、コンテキストマネージャは複数の :keyword:`with` 文がネス"
"トされたかのように進行します::"

#: ../../reference/compound_stmts.rst:406
msgid "is equivalent to ::"
msgstr "は、以下と同等です ::"

#: ../../reference/compound_stmts.rst:414
msgid ""
"In Python 2.5, the :keyword:`with` statement is only allowed when the "
"``with_statement`` feature has been enabled.  It is always enabled in Python "
"2.6."
msgstr ""
"Python 2.5 では、 :keyword:`with` 文は ``with_statement`` 機能が有効にされた"
"場合にだけ利用できます。 Python 2.6 では常に利用できます。"

#: ../../reference/compound_stmts.rst:418
msgid "Support for multiple context expressions."
msgstr "複数のコンテキスト式をサポートしました。"

#: ../../reference/compound_stmts.rst:424
msgid ":pep:`343` - The \"with\" statement"
msgstr ":pep:`343` - \"with\" ステートメント"

#: ../../reference/compound_stmts.rst:424
msgid ""
"The specification, background, and examples for the Python :keyword:`with` "
"statement."
msgstr "Python の :keyword:`with` 文の仕様、背景、そして実例"

#: ../../reference/compound_stmts.rst:435
msgid "Function definitions"
msgstr "関数定義"

#: ../../reference/compound_stmts.rst:445
msgid ""
"A function definition defines a user-defined function object (see section :"
"ref:`types`):"
msgstr ""
"関数定義は、ユーザ定義関数オブジェクトを定義します (:ref:`types` 節参照):"

#: ../../reference/compound_stmts.rst:463
msgid ""
"A function definition is an executable statement.  Its execution binds the "
"function name in the current local namespace to a function object (a wrapper "
"around the executable code for the function).  This function object contains "
"a reference to the current global namespace as the global namespace to be "
"used when the function is called."
msgstr ""
"関数定義は実行可能な文です。関数定義を実行すると、現在のローカルな名前空間内"
"で関数名を関数オブジェクト (関数の実行可能コードをくるむラッパ) に束縛しま"
"す。この関数オブジェクトには、関数が呼び出された際に使われるグローバルな名前"
"空間として、現在のグローバルな名前空間への参照が入っています。"

#: ../../reference/compound_stmts.rst:469
msgid ""
"The function definition does not execute the function body; this gets "
"executed only when the function is called. [#]_"
msgstr ""
"関数定義は関数本体を実行しません; 関数本体は関数が呼び出された時にのみ実行さ"
"れます。 [#]_"

#: ../../reference/compound_stmts.rst:475
msgid ""
"A function definition may be wrapped by one or more :term:`decorator` "
"expressions. Decorator expressions are evaluated when the function is "
"defined, in the scope that contains the function definition.  The result "
"must be a callable, which is invoked with the function object as the only "
"argument. The returned value is bound to the function name instead of the "
"function object.  Multiple decorators are applied in nested fashion. For "
"example, the following code::"
msgstr ""
"関数定義は一つ以上のデコレータ (:term:`decorator`) 式でラップできます。デコ"
"レータ式は関数を定義するとき、関数定義の入っているスコープで評価されます。そ"
"の結果は、関数オブジェクトを唯一の引数にとる呼び出し可能オブジェクトでなけれ"
"ばなりません。関数オブジェクトの代わりに、返された値が関数名に束縛されます。"
"複数のデコレータはネストして適用されます。例えば、以下のようなコード ::"

#: ../../reference/compound_stmts.rst:486
msgid "is equivalent to::"
msgstr "は、以下と同じです ::"

#: ../../reference/compound_stmts.rst:495
msgid ""
"When one or more top-level :term:`parameters <parameter>` have the form "
"*parameter* ``=`` *expression*, the function is said to have \"default "
"parameter values.\"  For a parameter with a default value, the "
"corresponding :term:`argument` may be omitted from a call, in which case the "
"parameter's default value is substituted.  If a parameter has a default "
"value, all following parameters must also have a default value --- this is a "
"syntactic restriction that is not expressed by the grammar."
msgstr ""
"一つ以上のトップレベルの :term:`parameters <parameter>` に *parameter* ``=`` "
"*expression* の形式がある場合、関数は \" デフォルトのパラメタ値 (default "
"parameter values)\" を持つといいます。デフォルト値を伴うパラメタに対しては、"
"関数呼び出しの際に対応する引数(:term:`argument`)が省略されると、パラメタの値"
"はデフォルト値で置き換えられます。あるパラメタがデフォルト値を持つ場合、それ"
"以後のパラメタは全てデフォルト値を持たなければなりません --- これは文法的には"
"表現されていない構文上の制限です。"

#: ../../reference/compound_stmts.rst:503
msgid ""
"**Default parameter values are evaluated when the function definition is "
"executed.**  This means that the expression is evaluated once, when the "
"function is defined, and that the same \"pre-computed\" value is used for "
"each call.  This is especially important to understand when a default "
"parameter is a mutable object, such as a list or a dictionary: if the "
"function modifies the object (e.g. by appending an item to a list), the "
"default value is in effect modified. This is generally not what was "
"intended.  A way around this  is to use ``None`` as the default, and "
"explicitly test for it in the body of the function, e.g.::"
msgstr ""
"** デフォルトパラメタ値は関数定義を実行する際に値評価されます。 ** これは、デ"
"フォルトパラメタの式は関数を定義するときにただ一度だけ評価され、同じ \" 計算"
"済みの \" 値が全ての呼び出しで使われることを意味します。デフォルトパラメタ値"
"がリストや辞書のような変更可能なオブジェクトである場合、この使用を理解してお"
"くことは特に重要です : 関数でこのオブジェクトを ( 例えばリストに要素を追加し"
"て ) 変更すると、実際のデフォルト値が変更されてしまいます。一般には、これは意"
"図しない動作です。このような動作を避けるには、デフォルト値に ``None`` を使"
"い、この値を関数本体の中で明示的にテストします。例えば以下のようにします ::"

#: ../../reference/compound_stmts.rst:522
msgid ""
"Function call semantics are described in more detail in section :ref:"
"`calls`. A function call always assigns values to all parameters mentioned "
"in the parameter list, either from position arguments, from keyword "
"arguments, or from default values.  If the form \"``*identifier``\" is "
"present, it is initialized to a tuple receiving any excess positional "
"parameters, defaulting to the empty tuple.  If the form \"``**identifier``\" "
"is present, it is initialized to a new dictionary receiving any excess "
"keyword arguments, defaulting to a new empty dictionary."
msgstr ""
"関数呼び出しの意味付けに関する詳細は、 :ref:`calls` 節で述べられています。関"
"数呼び出しを行うと、パラメタリストに記述された全てのパラメタに対して、固定引"
"数、キーワード引数、デフォルト引数のいずれかから値を代入します。 "
"\"``*identifier``\" 形式が存在する場合、余った固定引数を受け取るタプルに初期"
"化されます。この変数のデフォルト値は空のタプルです。 \"``**identifier``\" 形"
"式が存在する場合、余ったキーワード引数を受け取るタプルに初期化されます。デ"
"フォルト値は空の辞書です。"

#: ../../reference/compound_stmts.rst:532
msgid ""
"It is also possible to create anonymous functions (functions not bound to a "
"name), for immediate use in expressions.  This uses lambda expressions, "
"described in section :ref:`lambda`.  Note that the lambda expression is "
"merely a shorthand for a simplified function definition; a function defined "
"in a \":keyword:`def`\" statement can be passed around or assigned to "
"another name just like a function defined by a lambda expression.  The \":"
"keyword:`def`\" form is actually more powerful since it allows the execution "
"of multiple statements."
msgstr ""
"式で直接使うために、無名関数 ( 名前に束縛されていない関数 ) を作成することも"
"可能です。無名関数の作成には、 :ref:`lambda` 節で記述されているラムダ式 "
"(lambda expression) を使います。ラムダ式は、単純化された関数定義を行うための"
"略記法にすぎません ; \":keyword:`def`\" 文で定義された関数は、ラムダ式で定義"
"された関数と全く同様に引渡したり、他の名前に代入したりできます。実際には、 "
"\":keyword:`def`\" 形式は複数の式を実行できるという点でより強力です。"

#: ../../reference/compound_stmts.rst:540
msgid ""
"**Programmer's note:** Functions are first-class objects.  A \"``def``\" "
"form executed inside a function definition defines a local function that can "
"be returned or passed around.  Free variables used in the nested function "
"can access the local variables of the function containing the def.  See "
"section :ref:`naming` for details."
msgstr ""
"** プログラマのための注釈 :** 関数は一級の (first-class) オブジェクトです。関"
"数定義内で \"``def``\" 形式を実行すると、戻り値として返したり引き渡したりでき"
"るローカルな関数を定義します。ネストされた関数内で自由変数を使うと、 :"
"keyword:`def` 文の入っている関数のローカル変数にアクセスすることができます。"
"詳細は :ref:`naming` 節を参照してください。"

#: ../../reference/compound_stmts.rst:550
msgid "Class definitions"
msgstr "クラス定義"

#: ../../reference/compound_stmts.rst:562
msgid "A class definition defines a class object (see section :ref:`types`):"
msgstr "クラス定義は、クラスオブジェクトを定義します (:ref:`types` 節参照):"

#: ../../reference/compound_stmts.rst:569
msgid ""
"A class definition is an executable statement.  It first evaluates the "
"inheritance list, if present.  Each item in the inheritance list should "
"evaluate to a class object or class type which allows subclassing.  The "
"class's suite is then executed in a new execution frame (see section :ref:"
"`naming`), using a newly created local namespace and the original global "
"namespace. (Usually, the suite contains only function definitions.)  When "
"the class's suite finishes execution, its execution frame is discarded but "
"its local namespace is saved. [#]_ A class object is then created using the "
"inheritance list for the base classes and the saved local namespace for the "
"attribute dictionary.  The class name is bound to this class object in the "
"original local namespace."
msgstr ""
"クラス定義は実行可能な文です。クラス定義では、まず継承リストがあればそれを評"
"価します。継承リストの各要素の値評価結果はクラスオブジェクトか、サブクラス可"
"能なクラス型でなければなりません。次にクラスのスイートが新たな実行フレーム内"
"で、新たなローカル名前空間と元々のグローバル名前空間を使って実行されます (:"
"ref:`naming` 節を参照してください ) 。 ( 通常、スイートには関数定義のみが含ま"
"れます ) クラスのスイートを実行し終えると、実行フレームは無視されますが、ロー"
"カルな名前空間は保存されます。次に、基底クラスの継承リストを使ってクラスオブ"
"ジェクトが生成され、ローカルな名前空間を属性値辞書として保存します。最後に、"
"もとのローカルな名前空間において、クラス名がこのクラスオブジェクトに束縛され"
"ます。"

#: ../../reference/compound_stmts.rst:580
msgid ""
"**Programmer's note:** Variables defined in the class definition are class "
"variables; they are shared by all instances.  To create instance variables, "
"they can be set in a method with ``self.name = value``.  Both class and "
"instance variables are accessible through the notation \"``self.name``\", "
"and an instance variable hides a class variable with the same name when "
"accessed in this way. Class variables can be used as defaults for instance "
"variables, but using mutable values there can lead to unexpected results.  "
"For :term:`new-style class`\\es, descriptors can be used to create instance "
"variables with different implementation details."
msgstr ""
"** プログラマのための注釈 :** クラス定義内で定義された変数はクラス変数です ; "
"クラス変数は全てのインスタンス間で共有されます。インスタンス変数を作成するに"
"は、メソッドの中で ``self.name = value`` でセットできます。クラス変数もインス"
"タンス変数も \"``self.name``\" 表記でアクセスすることができます。この表記でア"
"クセスする場合、インスタンス変数は同名のクラス変数を隠蔽します。クラス変数"
"は、インスタンス変数のデフォルト値として使えますが、変更可能な値をそこに使う"
"と予期せぬ結果につながります。新スタイルクラス (:term:`new-style class`) で"
"は、デスクリプタを使ってインスタンス変数の振舞いを変更できます。"

#: ../../reference/compound_stmts.rst:590
msgid ""
"Class definitions, like function definitions, may be wrapped by one or more :"
"term:`decorator` expressions.  The evaluation rules for the decorator "
"expressions are the same as for functions.  The result must be a class "
"object, which is then bound to the class name."
msgstr ""
"クラス定義は、関数定義と同じように、 1 つ以上のデコレータ (:term:"
"`decorator`) 式でラップすることができます。デコレータ式の評価規則は関数と同じ"
"です。結果はクラスオブジェクトでなければならず、それがクラス名に束縛されま"
"す。"

#: ../../reference/compound_stmts.rst:596
msgid "Footnotes"
msgstr "注記"

#: ../../reference/compound_stmts.rst:597
msgid ""
"The exception is propagated to the invocation stack unless there is a :"
"keyword:`finally` clause which happens to raise another exception. That new "
"exception causes the old one to be lost."
msgstr ""
"例外は、別の例外を送出するような :keyword:`finally` 節が無い場合にのみ呼び出"
"しスタックへ伝わります。新しい例外によって、古い例外は失われます。"

#: ../../reference/compound_stmts.rst:601
msgid ""
"A string literal appearing as the first statement in the function body is "
"transformed into the function's ``__doc__`` attribute and therefore the "
"function's :term:`docstring`."
msgstr ""
"関数の本体の最初の文として現われる文字列リテラルは、その関数の ``__doc__`` 属"
"性に変換され、その関数のドキュメンテーション文字列(:term:`docstring`) になり"
"ます。"

#: ../../reference/compound_stmts.rst:605
msgid ""
"A string literal appearing as the first statement in the class body is "
"transformed into the namespace's ``__doc__`` item and therefore the class's :"
"term:`docstring`."
msgstr ""
"クラスの本体の最初の文として現われる文字列リテラルは、その名前空間の "
"``__doc__`` 要素となり、そのクラスのドキュメンテーション文字列(:term:"
"`docstring`)になります。"
