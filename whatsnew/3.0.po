# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.0.rst:3
msgid "What's New In Python 3.0"
msgstr "What's New In Python 3.0"

#: ../../whatsnew/3.0.rst:0
msgid "Author"
msgstr "著者"

#: ../../whatsnew/3.0.rst:7
msgid "Guido van Rossum"
msgstr "Guido van Rossum"

#: ../../whatsnew/3.0.rst:54
msgid ""
"This article explains the new features in Python 3.0, compared to 2.6. "
"Python 3.0, also known as \"Python 3000\" or \"Py3K\", is the first ever "
"*intentionally backwards incompatible* Python release. Python 3.0 was "
"released on December 3, 2008. There are more changes than in a typical "
"release, and more that are important for all Python users. Nevertheless, "
"after digesting the changes, you'll find that Python really hasn't changed "
"all that much -- by and large, we're mostly fixing well-known annoyances and "
"warts, and removing a lot of old cruft."
msgstr ""

#: ../../whatsnew/3.0.rst:63
msgid ""
"This article doesn't attempt to provide a complete specification of all new "
"features, but instead tries to give a convenient overview. For full details, "
"you should refer to the documentation for Python 3.0, and/or the many PEPs "
"referenced in the text. If you want to understand the complete "
"implementation and design rationale for a particular feature, PEPs usually "
"have more details than the regular documentation; but note that PEPs usually "
"are not kept up-to-date once a feature has been fully implemented."
msgstr ""
"この記事は全ての新機能を完璧な仕様を示そうとはしませんが、便利な概要について"
"は説明しようとしています。\n"
"全詳細については Python 3.0 のドキュメントや、本編で引かれている多くの PEP を"
"参照してください。\n"
"特定の機能の実装や設計原理について完全に理解したいなら、通常のドキュメントよ"
"りも詳しいことが書いてある PEP を見るとよいでしょう。\n"
"しかし、一旦機能が完全に実装されると、普通 PEP は最新の状態に保たれないことに"
"注意してください。"

#: ../../whatsnew/3.0.rst:72
msgid ""
"Due to time constraints this document is not as complete as it should have "
"been.  As always for a new release, the ``Misc/NEWS`` file in the source "
"distribution contains a wealth of detailed information about every small "
"thing that was changed."
msgstr ""
"この文書で全項目に触れるべきなのですが、時間の制約のためそうではありませ"
"ん。\n"
"いつもの新リリースのように、 ソース配布の `Misc/NEWS` には些細な変更について"
"も詳細な情報があります。"

#: ../../whatsnew/3.0.rst:89
msgid "Common Stumbling Blocks"
msgstr "よくある悩みの種"

#: ../../whatsnew/3.0.rst:91
msgid ""
"This section lists those few changes that are most likely to trip you up if "
"you're used to Python 2.5."
msgstr ""
"このセクションは Python 2.5 に慣れていたら躓いてしまいそうな少数の変更の一覧"
"です。"

#: ../../whatsnew/3.0.rst:95
msgid "Print Is A Function"
msgstr "print関数"

#: ../../whatsnew/3.0.rst:97
msgid ""
"The ``print`` statement has been replaced with a :func:`print` function, "
"with keyword arguments to replace most of the special syntax of the old "
"``print`` statement (:pep:`3105`).  Examples::"
msgstr ""
"``print`` 文は :func:`print` 関数に置き換えられ、古い ``print`` 文の特殊な文"
"法の殆どがキーワード引数で置き換えられています (:pep:`3105`)。 例::"

#: ../../whatsnew/3.0.rst:116
msgid "You can also customize the separator between items, e.g.::"
msgstr "項目間の区切りをカスタマイズすることもできます。例::"

#: ../../whatsnew/3.0.rst:120
msgid "which produces:"
msgstr "これは以下を出力します :"

#: ../../whatsnew/3.0.rst:126
msgid "Note:"
msgstr "注釈:"

#: ../../whatsnew/3.0.rst:128
msgid ""
"The :func:`print` function doesn't support the \"softspace\" feature of the "
"old ``print`` statement.  For example, in Python 2.x, ``print \"A\\n\", "
"\"B\"`` would write ``\"A\\nB\\n\"``; but in Python 3.0, ``print(\"A\\n\", "
"\"B\")`` writes ``\"A\\n B\\n\"``."
msgstr ""
":func:`print` 関数は、古い ``print`` 文の \"ソフトスペース\" 機能をサポートし"
"ません。例えば Python 2.x では、 ``print \"A\\n\", \"B\"`` は "
"``\"A\\nB\\n\"`` を出力していましたが、 Python 3.0 では、 ``print(\"A\\n\", "
"\"B\")`` は ``\"A\\n B\\n\"`` を出力します。"

#: ../../whatsnew/3.0.rst:133
msgid ""
"Initially, you'll be finding yourself typing the old ``print x`` a lot in "
"interactive mode.  Time to retrain your fingers to type ``print(x)`` instead!"
msgstr ""
"最初は、対話モードで古い ``print x`` を何回もタイプしてしまうでしょう。代わり"
"に ``print(x)`` とタイプするよう再教育してください。"

#: ../../whatsnew/3.0.rst:137
msgid ""
"When using the ``2to3`` source-to-source conversion tool, all ``print`` "
"statements are automatically converted to :func:`print` function calls, so "
"this is mostly a non-issue for larger projects."
msgstr ""
"``2to3`` ソース変換ツールを使うと、すべての ``print`` 文が :func:`print` 関数"
"呼び出しに自動的に置換されるので、大きなプロジェクトでもさほど問題にならない"
"でしょう。"

#: ../../whatsnew/3.0.rst:143
msgid "Views And Iterators Instead Of Lists"
msgstr "リストからビューおよびイテレータへ"

#: ../../whatsnew/3.0.rst:145
msgid "Some well-known APIs no longer return lists:"
msgstr "いくつかの良く使われている API はもはやリストを返しません:"

#: ../../whatsnew/3.0.rst:147
msgid ""
":class:`dict` methods :meth:`dict.keys`, :meth:`dict.items` and :meth:`dict."
"values` return \"views\" instead of lists.  For example, this no longer "
"works: ``k = d.keys(); k.sort()``.  Use ``k = sorted(d)`` instead (this "
"works in Python 2.5 too and is just as efficient)."
msgstr ""
":class:`dict` の :meth:`dict.keys`, :meth:`dict.items` そして :meth:`dict."
"values` メソッドはリストの代わりに \"views\" を返します。 例えば: ``k = d."
"keys(); k.sort()`` は上手く動きません。 代わりに ``k = sorted(d)`` を使ってく"
"ださい (これは Python 2.5 でも動作し、効率的です)。"

#: ../../whatsnew/3.0.rst:153
msgid ""
"Also, the :meth:`dict.iterkeys`, :meth:`dict.iteritems` and :meth:`dict."
"itervalues` methods are no longer supported."
msgstr ""
":meth:`dict.iterkeys`、 :meth:`dict.iteritems`、 :meth:`dict.itervalues` メ"
"ソッドはもうサポートされません。"

#: ../../whatsnew/3.0.rst:156
msgid ""
":func:`map` and :func:`filter` return iterators.  If you really need a list "
"and the input sequences are all of equal length, a quick fix is to wrap :"
"func:`map` in :func:`list`, e.g. ``list(map(...))``, but a better fix is "
"often to use a list comprehension (especially when the original code uses :"
"keyword:`lambda`), or rewriting the code so it doesn't need a list at all.  "
"Particularly tricky is :func:`map` invoked for the side effects of the "
"function; the correct transformation is to use a regular :keyword:`for` loop "
"(since creating a list would just be wasteful)."
msgstr ""
":func:`map` と :func:`filter` はイテレータを返します。もしも本物のリストが必"
"要で、全ての入力シーケンスが同じ長さの場合であれば、簡単に直すなら :func:"
"`map` を :func:`list` で包みます。例えば ``list(map(...))`` という具合。です"
"がより良いのは、大抵はリスト内包を使うことです (特に元々のコードが :keyword:"
"`lambda` を使っている場合)。あるいはコードを、リストを全く必要としないように"
"書き換えましょう。とりわけトリッキーなのは、関数に副作用を起こさせるために呼"
"び出される :func:`map` です; この場合確実な変換は普通に :keyword:`for` ループ"
"を使うことです (そもそもリストを作ること自体が無駄遣いでしょう)。"

#: ../../whatsnew/3.0.rst:167
msgid ""
"If the input sequences are not of equal length, :func:`map` will stop at the "
"termination of the shortest of the sequences. For full compatibility with :"
"func:`map` from Python 2.x, also wrap the sequences in :func:`itertools."
"zip_longest`, e.g. ``map(func, *sequences)`` becomes ``list(map(func, "
"itertools.zip_longest(*sequences)))``."
msgstr ""
"入力シーケンスの長さが同じとは限らないならば、 :func:`map` は最も短いシーケン"
"スが消費されつくすと処理をやめます。Python 2.x での :func:`map` 用法と全く互"
"換にするにはシーケンスを :func:`itertools.zip_longest` で包んでください。例え"
"ば ``map(func, *sequences)`` を ``list(map(func, itertools."
"zip_longest(*sequences)))`` とします。"

#: ../../whatsnew/3.0.rst:173
msgid ""
":func:`range` now behaves like :func:`xrange` used to behave, except it "
"works with values of arbitrary size.  The latter no longer exists."
msgstr ""
":func:`range` は :func:`xrange` のように振る舞います。ただし、任意のサイズの"
"値で動作します。 :func:`xrange` は削除されました。"

#: ../../whatsnew/3.0.rst:177
msgid ":func:`zip` now returns an iterator."
msgstr ":func:`zip` はイテレータを返します。"

#: ../../whatsnew/3.0.rst:180
msgid "Ordering Comparisons"
msgstr "順序比較"

#: ../../whatsnew/3.0.rst:182
msgid "Python 3.0 has simplified the rules for ordering comparisons:"
msgstr "Python 3.0 で順序比較のルールが簡単になりました。"

#: ../../whatsnew/3.0.rst:184
msgid ""
"The ordering comparison operators (``<``, ``<=``, ``>=``, ``>``) raise a "
"TypeError exception when the operands don't have a meaningful natural "
"ordering.  Thus, expressions like ``1 < ''``, ``0 > None`` or ``len <= len`` "
"are no longer valid, and e.g. ``None < None`` raises :exc:`TypeError` "
"instead of returning ``False``.  A corollary is that sorting a heterogeneous "
"list no longer makes sense -- all the elements must be comparable to each "
"other.  Note that this does not apply to the ``==`` and ``!=`` operators: "
"objects of different incomparable types always compare unequal to each other."
msgstr ""
"順序比較演算子 (``<``, ``<=``, ``>=``, ``>``)  は、そのオペランドが自然な順序"
"づけを持たない場合 TypeError 例外を送出します。  ``1 < ''``, ``0 > None`` ま"
"たは ``len <= len`` のような式は無効になり、 ``None < None`` は ``False`` を"
"返す代わりに :exc:`TypeError` を送出します。その結果、 不均一なリスト（訳注："
"比較不能な型からなる要素が混在するリスト）のソートは意味がなくなりました。 "
"-- 全ての要素は互いに比較できなければなりません。これは ``==`` と ``!=`` 演算"
"子には適用されないことに注意してください: 別々の比較不可能な型のオブジェクト"
"を比較すると常に、互いに等しくないと評価されます。"

#: ../../whatsnew/3.0.rst:195
msgid ""
":meth:`builtin.sorted` and :meth:`list.sort` no longer accept the *cmp* "
"argument providing a comparison function.  Use the *key* argument instead. N."
"B. the *key* and *reverse* arguments are now \"keyword-only\"."
msgstr ""
":meth:`builtin.sorted` と :meth:`list.sort` メソッドは比較関数を与える *cmp* "
"引数を受け取らなくなりました。 かわりに *key* 引数を使用してください。 *key* "
"と *reverse* 引数は \"キーワード専用\" となったことに注意してください。"

#: ../../whatsnew/3.0.rst:200
msgid ""
"The :func:`cmp` function should be treated as gone, and the :meth:`__cmp__` "
"special method is no longer supported.  Use :meth:`__lt__` for sorting, :"
"meth:`__eq__` with :meth:`__hash__`, and other rich comparisons as needed. "
"(If you really need the :func:`cmp` functionality, you could use the "
"expression ``(a > b) - (a < b)`` as the equivalent for ``cmp(a, b)``.)"
msgstr ""
":func:`cmp` 関数は廃止され、 :meth:`__cmp__` 特殊関数はもはやサポートされませ"
"ん。ソートには :meth:`__lt__` を使用し、 :meth:`__hash__` には :meth:"
"`__eq__`  を 、必要に応じて他の高級比較 (rich comparison) を使用してくださ"
"い。 (もし :func:`cmp` の機能が必要なら、 式 ``(a > b) - (a < b)`` を "
"``cmp(a, b)`` の代わに使用できるはずです)"

#: ../../whatsnew/3.0.rst:207
msgid "Integers"
msgstr "整数"

#: ../../whatsnew/3.0.rst:209
msgid ""
":pep:`237`: Essentially, :class:`long` renamed to :class:`int`. That is, "
"there is only one built-in integral type, named :class:`int`; but it behaves "
"mostly like the old :class:`long` type."
msgstr ""
":pep:`237`: 基本的には、 :class:`long` は :class:`int` に改名されました。これ"
"は、整数型の唯一の組み込み型になり、 :class:`int` と名付けられていますが、古"
"い :class:`long` 型とほぼ同じように振る舞います。"

#: ../../whatsnew/3.0.rst:213
msgid ""
":pep:`238`: An expression like ``1/2`` returns a float.  Use ``1//2`` to get "
"the truncating behavior.  (The latter syntax has existed for years, at least "
"since Python 2.2.)"
msgstr ""
":pep:`238`: ``1/2`` のような式は float を返します。切り捨てる挙動を得るには\n"
" ``1//2`` を使ってください。 (後者の構文は少なくとも Python 2.2 からありま"
"す。)"

#: ../../whatsnew/3.0.rst:217
msgid ""
"The :data:`sys.maxint` constant was removed, since there is no longer a "
"limit to the value of integers.  However, :data:`sys.maxsize` can be used as "
"an integer larger than any practical list or string index.  It conforms to "
"the implementation's \"natural\" integer size and is typically the same as :"
"data:`sys.maxint` in previous releases on the same platform (assuming the "
"same build options)."
msgstr ""
"整数の上限がなくなったため、:data:`sys.maxint` 定数は削除されました。しかしな"
"がら、通常のリストや文字列の添え字よりも大きい整数として :data:`sys.maxsize` "
"を使うことができます。 :data:`sys.maxsize` は実装の \"自然な\" 整数の大きさに"
"一致し、同じプラットフォームでは (同じビルドオプションなら) 過去のリリース"
"の :data:`sys.maxint` と普通は同じです。"

#: ../../whatsnew/3.0.rst:224
msgid ""
"The :func:`repr` of a long integer doesn't include the trailing ``L`` "
"anymore, so code that unconditionally strips that character will chop off "
"the last digit instead.  (Use :func:`str` instead.)"
msgstr ""
"long 整数の :func:`repr` はもはや末尾に ``L`` を持ちません。そのため、無条件"
"に \"L\" を取り除くコードは代わりに最後の数字を取り除いてしまうでしょう。 (代"
"わりに :func:`str` を使用してください。)"

#: ../../whatsnew/3.0.rst:228
msgid ""
"Octal literals are no longer of the form ``0720``; use ``0o720`` instead."
msgstr ""
"8進数リテラルが ``0720`` の形でなくなりました。代わりに ``0o720`` を使ってく"
"ださい。"

#: ../../whatsnew/3.0.rst:232
msgid "Text Vs. Data Instead Of Unicode Vs. 8-bit"
msgstr "Unicode 対 8 ビット、ではなく、テキスト対データに"

#: ../../whatsnew/3.0.rst:234
msgid ""
"Everything you thought you knew about binary data and Unicode has changed."
msgstr "バイナリと Unicode について知っていると思っている全てが変わりました。"

#: ../../whatsnew/3.0.rst:237
msgid ""
"Python 3.0 uses the concepts of *text* and (binary) *data* instead of "
"Unicode strings and 8-bit strings.  All text is Unicode; however *encoded* "
"Unicode is represented as binary data.  The type used to hold text is :class:"
"`str`, the type used to hold data is :class:`bytes`.  The biggest difference "
"with the 2.x situation is that any attempt to mix text and data in Python "
"3.0 raises :exc:`TypeError`, whereas if you were to mix Unicode and 8-bit "
"strings in Python 2.x, it would work if the 8-bit string happened to contain "
"only 7-bit (ASCII) bytes, but you would get :exc:`UnicodeDecodeError` if it "
"contained non-ASCII values.  This value-specific behavior has caused "
"numerous sad faces over the years."
msgstr ""
"Python 3.0 でのコンセプトは、Unicode 文字列と 8 ビット文字列、という対比では"
"なくて、 *テキスト* と (バイナリ) *データ* の違いと考える、というものです。全"
"てのテキストは Unicode です; 一方で *エンコードされた* Unicode はバイナリデー"
"タとして表現されます。テキストを保持するのに使われる型は :class:`str` で、"
"データには :class:`bytes` を使います。2.x での状況との最大の違いは、Python "
"3.0 でテキストとデータを混ぜようとすれば :exc:`TypeError` となることです。"
"Python 2.x では Unicode と 8 ビット文字列を混ぜたとすれば、8 ビット文字列がた"
"またま 7 ビット (ASCII) バイトだけから出来ていれば動くし非 ASCII バイトがあれ"
"ば :exc:`UnicodeDecodeError` となっていたでしょう。この、データ値に依存した振"
"る舞いが、何年にも渡って夥しい数の悲劇を生み出していました。"

#: ../../whatsnew/3.0.rst:250
msgid ""
"As a consequence of this change in philosophy, pretty much all code that "
"uses Unicode, encodings or binary data most likely has to change.  The "
"change is for the better, as in the 2.x world there were numerous bugs "
"having to do with mixing encoded and unencoded text.  To be prepared in "
"Python 2.x, start using :class:`unicode` for all unencoded text, and :class:"
"`str` for binary or encoded data only.  Then the ``2to3`` tool will do most "
"of the work for you."
msgstr ""
"この変更からの帰結として、Unicode、エンコーディング、あるいはバイナリデータを"
"使うほとんど全てのコードは、原則として修正する必要があると思います。この変更"
"は進歩のための破壊です。というのも 2.x 世界には、エンコードされたテキストとそ"
"うでないものをごっちゃにしている膨大な数のバグがあるはずだからです。Python 2."
"x のうちから準備しておくには、まずは全てのエンコードしていないテキストに :"
"class:`unicode` を使い、 :class:`str` はバイナリとエンコードされたデータだけ"
"に対して使うことから始めてください。そうしておけば :term:`2to3` ツールがあな"
"たのためにほとんどの仕事をしてくれるでしょう。"

#: ../../whatsnew/3.0.rst:258
msgid ""
"You can no longer use ``u\"...\"`` literals for Unicode text. However, you "
"must use ``b\"...\"`` literals for binary data."
msgstr ""
"Unicode テキストのリテラルに ``u\"...\"`` を使うことはもはやできません。しか"
"し、バイナリーデータのリテラルには ``b\"...\"`` を使わなければなりません。"
"(---訳注: この ``u\"...\"`` は Python 3.3 で再び使えるようになりました。 ---)"

#: ../../whatsnew/3.0.rst:261
msgid ""
"As the :class:`str` and :class:`bytes` types cannot be mixed, you must "
"always explicitly convert between them.  Use :meth:`str.encode` to go from :"
"class:`str` to :class:`bytes`, and :meth:`bytes.decode` to go from :class:"
"`bytes` to :class:`str`.  You can also use ``bytes(s, encoding=...)`` and "
"``str(b, encoding=...)``, respectively."
msgstr ""
":class:`str` 型と :class:`bytes` 型を混ぜて使うことは出来ませんから、それらは"
"いつでも明示的に変換しなければいけません。 :class:`str` から :class:`bytes` "
"にするには :meth:`str.encode` を使ってください。そして :class:`bytes` から :"
"class:`str` にするには :meth:`bytes.decode` を使います。それぞれ ``bytes(s, "
"encoding=...)`` 、 ``str(b, encoding=...)`` を使うことも出来ます。"

#: ../../whatsnew/3.0.rst:268
msgid ""
"Like :class:`str`, the :class:`bytes` type is immutable.  There is a "
"separate *mutable* type to hold buffered binary data, :class:`bytearray`.  "
"Nearly all APIs that accept :class:`bytes` also accept :class:`bytearray`.  "
"The mutable API is based on :class:`collections.MutableSequence`."
msgstr ""
":class:`str` がそうであるように、 :class:`bytes` は :term:`immutable` です。"
"これとは独立させて :term:`mutable` 型として、バッファ化されたバイナリデータを"
"保持するための :class:`bytearray` が用意してあります。 :class:`bytes` を受け"
"付ける API のほぼ全てが :class:`bytearray` も許容します。その mutable API "
"は :class:`collections.MutableSequence` に基づいています。"

#: ../../whatsnew/3.0.rst:274
msgid ""
"All backslashes in raw string literals are interpreted literally. This means "
"that ``'\\U'`` and ``'\\u'`` escapes in raw strings are not treated "
"specially.  For example, ``r'\\u20ac'`` is a string of 6 characters in "
"Python 3.0, whereas in 2.6, ``ur'\\u20ac'`` was the single \"euro\" "
"character.  (Of course, this change only affects raw string literals; the "
"euro character is ``'\\u20ac'`` in Python 3.0.)"
msgstr ""
"raw 文字列リテラル内にある全てのバックスラッシュが「字句通り」に解釈されま"
"す。つまり ``'\\U'`` も ``'\\u'`` も、 raw 文字列内にあっては何ら特別に扱われ"
"ないということです。例えば ``r'\\u20ac'`` は Python 3.0 では 6 文字の文字列で"
"す。Python 2.x では ``ur'\\u20ac'`` が単一の「ユーロ」文字であったのにです。"
"(無論この変更は raw 文字列リテラルについてだけのもので、ユーロ文字は Python "
"3.0 で ``'\\u20ac'`` です。)"

#: ../../whatsnew/3.0.rst:281
msgid ""
"The built-in :class:`basestring` abstract type was removed.  Use :class:"
"`str` instead.  The :class:`str` and :class:`bytes` types don't have "
"functionality enough in common to warrant a shared base class.  The ``2to3`` "
"tool (see below) replaces every occurrence of :class:`basestring` with :"
"class:`str`."
msgstr ""
"組み込みであった :class:`basestring` 抽象型なんてものは削除されたのです。 :"
"class:`str` をお使いなさい。 :class:`str` と :class:`bytes` は基底クラスを共"
"有するのを正当化するのに足るほどには、機能的に共通していないのです。 :term:"
"`2to3` ツール (後述) は :class:`basestring` を片っ端から :class:`str` に置き"
"換えてくれます。"

#: ../../whatsnew/3.0.rst:287
msgid ""
"Files opened as text files (still the default mode for :func:`open`) always "
"use an encoding to map between strings (in memory) and bytes (on disk).  "
"Binary files (opened with a ``b`` in the mode argument) always use bytes in "
"memory.  This means that if a file is opened using an incorrect mode or "
"encoding, I/O will likely fail loudly, instead of silently producing "
"incorrect data.  It also means that even Unix users will have to specify the "
"correct mode (text or binary) when opening a file.  There is a platform-"
"dependent default encoding, which on Unixy platforms can be set with the "
"``LANG`` environment variable (and sometimes also with some other platform-"
"specific locale-related environment variables).  In many cases, but not all, "
"the system default is UTF-8; you should never count on this default.  Any "
"application reading or writing more than pure ASCII text should probably "
"have a way to override the encoding. There is no longer any need for using "
"the encoding-aware streams in the :mod:`codecs` module."
msgstr ""
"テキストファイルとして開かれたファイル (これは従来どおり :func:`open` でのデ"
"フォルトのモード) は、 (メモリ内の) 文字列と (ディスクでの) バイト列との写像"
"をするのに、常にエンコーディングを使います。バイナリファイル (モードに ``b`` "
"を付けて開いたもの) はメモリ内では常にバイト列を使います。このことで、もしも"
"ファイルが誤ったモードやエンコーディングで開かれようとすると、I/O はきっと口"
"やかましく失敗します。こっそり正しくないデータを生み出すのではなく。それに加"
"えて、ファイルを開く際には Unix ユーザでさえもこれからは、 (テキストかバイナ"
"リかの) 正しいモードを選択する必要があるということです。プラットフォームには"
"それ特有のデフォルトエンコーディングがあります。Unix 的プラットフォームではこ"
"れは環境変数 ``LANG`` にセットされているかもしれません (あるいは時々ほかのプ"
"ラットフォーム特有の、ロケールに関係した環境変数にもセットされています)。全て"
"とは言いませんが多くの場合は、システムのデフォルトは UTF-8 です; ですが決して"
"このデフォルトを当てにすべきではありません。純粋な ASCII テキスト以上のものを"
"読み書きするどんなアプリケーションも、きっとエンコーディングをオーバライド出"
"来る手段を持つべきです。 :mod:`codecs` 内にあるエンコーディングを熟知したスト"
"リームを使うことは、今ではもう必要なくなりました。"

#: ../../whatsnew/3.0.rst:304
msgid ""
"The initial values of :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys."
"stderr` are now unicode-only text files (i.e., they are instances of :class:"
"`io.TextIOBase`).  To read and write bytes data with these streams, you need "
"to use their :data:`io.TextIOBase.buffer` attribute."
msgstr ""
":data:`sys.stdin`, :data:`sys.stdout`, :data:`sys.stderr` の初期値はいまでは "
"Unicode のみのテキストファイルです (つまりそれらは :class:`io.TextIOBase` の"
"インスタンスです)。バイト列データをそれらのストリームで読み書きするには、 :"
"data:`io.TextIOBase.buffer` 属性を使う必要があります。"

#: ../../whatsnew/3.0.rst:310
msgid ""
"Filenames are passed to and returned from APIs as (Unicode) strings. This "
"can present platform-specific problems because on some platforms filenames "
"are arbitrary byte strings.  (On the other hand, on Windows filenames are "
"natively stored as Unicode.)  As a work-around, most APIs (e.g. :func:`open` "
"and many functions in the :mod:`os` module) that take filenames accept :"
"class:`bytes` objects as well as strings, and a few APIs have a way to ask "
"for a :class:`bytes` return value.  Thus, :func:`os.listdir` returns a list "
"of :class:`bytes` instances if the argument is a :class:`bytes` instance, "
"and :func:`os.getcwdb` returns the current working directory as a :class:"
"`bytes` instance.  Note that when :func:`os.listdir` returns a list of "
"strings, filenames that cannot be decoded properly are omitted rather than "
"raising :exc:`UnicodeError`."
msgstr ""
"ファイル名は、API へは (Unicode) 文字列を渡し、 (Unicode) 文字列が返ります。"
"これにはプラットフォーム特有の問題があるかもしれません。というのも、いくつか"
"のプラットフォームではファイル名は任意のバイト文字列だからです。(他方では、"
"Windows ではファイル名はネイティブに Unicode で格納されています。) 次善策とし"
"て、ほとんどの API (たとえば :func:`open` と :mod:`os` モジュール内の多くの関"
"数) はファイル名として、文字列だけでなく :class:`bytes` を受け付け、そして少"
"しの API は :class:`bytes` を返すかどうかを要求出来る手段を持っています。それ"
"ゆえに :func:`os.listdir` は引数が :class:`bytes` インスタンスであれば :"
"class:`bytes` のリストで返し、 :func:`os.getcwdb` はカレントディレクトリを :"
"class:`bytes` で返します。 :func:`os.listdir` が文字列のリストで返す際、適切"
"にデコード出来ないファイル名は :exc:`UnicodeError` とはせずに無視されることに"
"ご注意ください。"

#: ../../whatsnew/3.0.rst:325
msgid ""
"Some system APIs like :data:`os.environ` and :data:`sys.argv` can also "
"present problems when the bytes made available by the system is not "
"interpretable using the default encoding.  Setting the ``LANG`` variable and "
"rerunning the program is probably the best approach."
msgstr ""
":data:`os.environ` や :data:`sys.argv` のようないくつかのシステム API にも問"
"題がありえます。システムにより利用可能とされるべきバイト列がデフォルトエン"
"コーディングで解釈不能な場合です。環境変数 ``LANG`` をセットしてプログラムを"
"再実行することが、おそらく最善のアプローチです。"

#: ../../whatsnew/3.0.rst:330
msgid ""
":pep:`3138`: The :func:`repr` of a string no longer escapes non-ASCII "
"characters.  It still escapes control characters and code points with non-"
"printable status in the Unicode standard, however."
msgstr ""
":pep:`3138`: 文字列への :func:`repr` はもう非 ASCII 文字をエスケープしませ"
"ん。ただし、制御文字、Unicode 標準で印字不可状態のコードポイントは今でもエス"
"ケープされます。"

#: ../../whatsnew/3.0.rst:334
msgid ":pep:`3120`: The default source encoding is now UTF-8."
msgstr ":pep:`3120`: ソースのエンコードのデフォルトが UTF-8 になりました。"

#: ../../whatsnew/3.0.rst:336
msgid ""
":pep:`3131`: Non-ASCII letters are now allowed in identifiers. (However, the "
"standard library remains ASCII-only with the exception of contributor names "
"in comments.)"
msgstr ""
":pep:`3131`: 非 ASCII 文字を識別子として使用することが出来るようになりまし"
"た。 (そうはいっても標準ライブラリは、コメント内での貢献者の名前以外では "
"ASCII だけのままです。)"

#: ../../whatsnew/3.0.rst:340
msgid ""
"The :mod:`StringIO` and :mod:`cStringIO` modules are gone.  Instead, import "
"the :mod:`io` module and use :class:`io.StringIO` or :class:`io.BytesIO` for "
"text and data respectively."
msgstr ""
":mod:`StringIO` および :mod:`cStringIO` モジュールは廃止されました。その代わ"
"り :mod:`io` モジュールをインポートして、テキストやデータには :class:`io."
"StringIO` や :class:`io.BytesIO` を使用してください。"

#: ../../whatsnew/3.0.rst:344
msgid "See also the :ref:`unicode-howto`, which was updated for Python 3.0."
msgstr ""
":ref:`unicode-howto` を参照してください。Python 3.0 向けに更新されました。"

#: ../../whatsnew/3.0.rst:348
msgid "Overview Of Syntax Changes"
msgstr "構文の変更の概要"

#: ../../whatsnew/3.0.rst:350
msgid ""
"This section gives a brief overview of every *syntactic* change in Python "
"3.0."
msgstr ""
"このセクションは Python 3.0 における全ての *構文の* 変更についての簡単な概要"
"です。"

#: ../../whatsnew/3.0.rst:354
msgid "New Syntax"
msgstr "新たな構文"

#: ../../whatsnew/3.0.rst:356
msgid ""
":pep:`3107`: Function argument and return value annotations.  This provides "
"a standardized way of annotating a function's parameters and return value.  "
"There are no semantics attached to such annotations except that they can be "
"introspected at runtime using the :attr:`__annotations__` attribute.  The "
"intent is to encourage experimentation through metaclasses, decorators or "
"frameworks."
msgstr ""
":pep:`3107`: 関数引数と戻り値のアノテーション。これは関数のパラメータと戻り値"
"へのアノテーションを付ける標準的な手段を提供します (訳注: annotation を強いて"
"訳せば「注釈」)。そのようなアノテーションには、実行時に :attr:"
"`__annotations__` 属性を調べること以外には何の意味付けもされていません。メタ"
"クラスやデコレータ、フレームワークを通じた実験を促進することが意図されていま"
"す。"

#: ../../whatsnew/3.0.rst:363
msgid ""
":pep:`3102`: Keyword-only arguments.  Named parameters occurring after "
"``*args`` in the parameter list *must* be specified using keyword syntax in "
"the call.  You can also use a bare ``*`` in the parameter list to indicate "
"that you don't accept a variable-length argument list, but you do have "
"keyword-only arguments."
msgstr ""
":pep:`3102`: キーワード専用引数。\n"
"パラメータリスト中で ``*args`` のあとに現れる名前付きパラメータは、呼び出す際"
"には *必ず* キーワード引数の構文を使う必要があります (---訳注: ``def fun(*a, "
"kw):`` という定義で ``fun(1, 2, 3)`` は NG で ``fun(1, 2, kw=3)`` としなけれ"
"ばならない。ここまでは 2.x と同じ ---)。\n"
"この PEP により、可変引数リストを受け取らずにキーワード専用引数だけを許したい"
"場合にそれを主張するために剥き出しの ``*`` をパラメータリスト内に書けるように"
"なりました (---訳注: ``def fun(*, kw):`` と定義出来る。この定義では "
"``fun(kw=1)`` としてしか呼び出せない。 ``fun(1)`` はダメ。---)。"

#: ../../whatsnew/3.0.rst:369
msgid ""
"Keyword arguments are allowed after the list of base classes in a class "
"definition.  This is used by the new convention for specifying a metaclass "
"(see next section), but can be used for other purposes as well, as long as "
"the metaclass supports it."
msgstr ""
"クラス定義内で、基底クラスのリストのあとでキーワード引数が許されるようになり"
"ました。これは metaclass を指定するための新しい規約 (次セクション参照) に使わ"
"れるものですが、 metaclass サポートだけのためだけでなく他の目的に使うことも出"
"来ます。"

#: ../../whatsnew/3.0.rst:374
msgid ""
":pep:`3104`: :keyword:`nonlocal` statement.  Using ``nonlocal x`` you can "
"now assign directly to a variable in an outer (but non-global) scope.  :"
"keyword:`!nonlocal` is a new reserved word."
msgstr ""

#: ../../whatsnew/3.0.rst:378
msgid ""
":pep:`3132`: Extended Iterable Unpacking.  You can now write things like "
"``a, b, *rest = some_sequence``.  And even ``*rest, a = stuff``.  The "
"``rest`` object is always a (possibly empty) list; the right-hand side may "
"be any iterable.  Example::"
msgstr ""
":pep:`3132`: 拡張されたイテレータのアンパック。 ``a, b, *rest = "
"some_sequence`` のようなことを書けるようになりました。 ``*rest, a = stuff`` "
"も出来ます。 ``rest`` オブジェクトは常に (空かもしれなくても) リストです; 右"
"辺には任意のイテラブルを置けます。例えば::"

#: ../../whatsnew/3.0.rst:385
msgid "This sets *a* to ``0``, *b* to ``4``, and *rest* to ``[1, 2, 3]``."
msgstr ""
"これは *a* に ``0`` を、 *b* に ``4`` を、そして *rest* に ``[1, 2, 3]`` を"
"セットします。"

#: ../../whatsnew/3.0.rst:387
msgid ""
"Dictionary comprehensions: ``{k: v for k, v in stuff}`` means the same thing "
"as ``dict(stuff)`` but is more flexible.  (This is :pep:`274` vindicated. :-)"
msgstr ""
"辞書内包表記: ``{k: v for k, v in stuff}`` は ``dict(stuff)`` と同じ意味です"
"が、より柔軟です。 (これは :pep:`274` で支持されています。)"

#: ../../whatsnew/3.0.rst:391
msgid ""
"Set literals, e.g. ``{1, 2}``.  Note that ``{}`` is an empty dictionary; use "
"``set()`` for an empty set.  Set comprehensions are also supported; e.g., "
"``{x for x in stuff}`` means the same thing as ``set(stuff)`` but is more "
"flexible."
msgstr ""
"セットリテラル、例えば ``{1, 2}``。``{}`` は空の辞書であることに注意してくだ"
"さい。空のセットには ``set()`` を使用してください。セットの内包表記もサポート"
"されました。例えば ``{x for x in stuff}`` は ``set(stuff)`` と同じ意味です"
"が、より柔軟です。"

#: ../../whatsnew/3.0.rst:396
msgid ""
"New octal literals, e.g. ``0o720`` (already in 2.6).  The old octal literals "
"(``0720``) are gone."
msgstr ""
"新たな8進数リテラル、e.g. ``0o720`` (2.6 で既にありました)。古い8進数リテラ"
"ル (``0720``) は廃止されました。"

#: ../../whatsnew/3.0.rst:399
msgid ""
"New binary literals, e.g. ``0b1010`` (already in 2.6), and there is a new "
"corresponding built-in function, :func:`bin`."
msgstr ""
"新たなバイナリリテラル、e.g. ``0b1010`` (2.6 で既にありました) と、関連する新"
"しい組み込み関数 :func:`bin` が導入されました。"

#: ../../whatsnew/3.0.rst:402
msgid ""
"Bytes literals are introduced with a leading ``b`` or ``B``, and there is a "
"new corresponding built-in function, :func:`bytes`."
msgstr ""
"``b`` または ``B`` で始まるバイトリテラルと、関連する新しい組み込み関数 :"
"func:`bytes` が導入されました。"

#: ../../whatsnew/3.0.rst:406
msgid "Changed Syntax"
msgstr "変更された構文"

#: ../../whatsnew/3.0.rst:408
msgid ""
":pep:`3109` and :pep:`3134`: new :keyword:`raise` statement syntax: :samp:"
"`raise [{expr} [from {expr}]]`.  See below."
msgstr ""
":pep:`3109` と :pep:`3134`: 新たな :keyword:`raise` 文のシンタックス: :samp:"
"`raise [{expr} [from {expr}]]`。以下を参照してください。"

#: ../../whatsnew/3.0.rst:411
msgid ""
":keyword:`!as` and :keyword:`with` are now reserved words.  (Since 2.6, "
"actually.)"
msgstr ""

#: ../../whatsnew/3.0.rst:414
msgid ""
"``True``, ``False``, and ``None`` are reserved words.  (2.6 partially "
"enforced the restrictions on ``None`` already.)"
msgstr ""
"``True``、``False``、および ``None`` が予約語になりました。(2.6 では既に "
"``None`` が部分的に制限されていました)"

#: ../../whatsnew/3.0.rst:417
msgid ""
"Change from :keyword:`except` *exc*, *var* to :keyword:`!except` *exc* :"
"keyword:`!as` *var*.  See :pep:`3110`."
msgstr ""

#: ../../whatsnew/3.0.rst:420
msgid ":pep:`3115`: New Metaclass Syntax.  Instead of::"
msgstr ":pep:`3115`: 新たなメタクラスのシンタックス．以下の;"

#: ../../whatsnew/3.0.rst:426
msgid "you must now use::"
msgstr "代わりに次のようにしてください:"

#: ../../whatsnew/3.0.rst:431
msgid ""
"The module-global :data:`__metaclass__` variable is no longer supported.  "
"(It was a crutch to make it easier to default to new-style classes without "
"deriving every class from :class:`object`.)"
msgstr ""
"モジュールグローバルの :data:`__metaclass__` 変数はもうサポートされません。"
"(これは :class:`object` を派生しない全てのクラスのデフォルトを簡単に新スタイ"
"ルクラス化するための「松葉杖」でした。) (---訳注: 「新/旧スタイルクラス」は "
"Python 2.x 固有の概念。Python 2.1 までの旧式クラスと、Python 2.2 で導入され"
"た、現在まで続く :class:`object` を派生する (当時の旧からみた) 新スタイル。"
"Python 2.2 から 2.7 では ``class Clazz:`` は (モジュールグローバルの :data:"
"`__metaclass__` を使わない限り) :class:`object` を派生しない旧スタイルクラス"
"でしたが、Python 3.x にはもはや「旧スタイルクラス」がないのでこれは Python "
"2.2 から 2.7 での ``class Clazz(object):`` と同じ意味です。---)"

#: ../../whatsnew/3.0.rst:436
msgid ""
"List comprehensions no longer support the syntactic form :samp:`[... for "
"{var} in {item1}, {item2}, ...]`.  Use :samp:`[... for {var} in ({item1}, "
"{item2}, ...)]` instead. Also note that list comprehensions have different "
"semantics: they are closer to syntactic sugar for a generator expression "
"inside a :func:`list` constructor, and in particular the loop control "
"variables are no longer leaked into the surrounding scope."
msgstr ""
"リスト内包表記はもう :samp:`[... for {var} in {item1}, {item2}, ...]` という"
"構文形をサポートしません。代わりに :samp:`[... for {var} in ({item1}, "
"{item2}, ...)]` を使用してください。また、リスト内包表記は異なるセマンティク"
"スを持つことに注意してください。リスト内包表記は :func:`list` コンストラクタ"
"内のジェネレータ式の糖衣構文に近く、特にループの制御変数はスコープ外ではもう"
"使用することができません。"

#: ../../whatsnew/3.0.rst:444
msgid ""
"The *ellipsis* (``...``) can be used as an atomic expression anywhere.  "
"(Previously it was only allowed in slices.)  Also, it *must* now be spelled "
"as ``...``.  (Previously it could also be spelled as ``. . .``, by a mere "
"accident of the grammar.)"
msgstr ""
"*ellipsis* (``...``) はどこででも原子的な式として使うことが出来ます。\n"
"(以前はスライス内でのみ許されていました。)\n"
"また、``...`` と書かなければ *ならなく* なりました。\n"
"(以前は文法の些細な偶然により ``. . .`` と書くことも出来ました。)"

#: ../../whatsnew/3.0.rst:450
msgid "Removed Syntax"
msgstr "削除された操作"

#: ../../whatsnew/3.0.rst:452
msgid ""
":pep:`3113`: Tuple parameter unpacking removed.  You can no longer write "
"``def foo(a, (b, c)): ...``. Use ``def foo(a, b_c): b, c = b_c`` instead."
msgstr ""
":pep:`3113`: タプル引数のアンパックが削除されました.  ``def foo(a, (b, "
"c)): ...`` のように書くことはできません。かわりに ``def foo(a, b_c): b, c = "
"b_c`` を使用してください。"

#: ../../whatsnew/3.0.rst:456
msgid "Removed backticks (use :func:`repr` instead)."
msgstr ""
"バッククオートが削除されました (代わりに :func:`repr` を使用してください)。"

#: ../../whatsnew/3.0.rst:458
msgid "Removed ``<>`` (use ``!=`` instead)."
msgstr "``<>`` が削除されました (代わりに ``!=`` を使用してください)。"

#: ../../whatsnew/3.0.rst:460
msgid ""
"Removed keyword: :func:`exec` is no longer a keyword; it remains as a "
"function.  (Fortunately the function syntax was also accepted in 2.x.)  Also "
"note that :func:`exec` no longer takes a stream argument; instead of "
"``exec(f)`` you can use ``exec(f.read())``."
msgstr ""
"削除されたキーワード: :func:`exec` はキーワードでなくなりましたが、関数として"
"残りました。 (幸運にも関数のシンタックスは 2.x でも許容されています。)  ま"
"た、 :func:`exec` はストリーム引数を受け取らなくなりました。``exec(f)`` の代"
"わりに ``exec(f.read())`` を使うことができます。"

#: ../../whatsnew/3.0.rst:465
msgid "Integer literals no longer support a trailing ``l`` or ``L``."
msgstr "``l`` または ``L`` で終わる整数リテラルはサポートされません。"

#: ../../whatsnew/3.0.rst:467
msgid "String literals no longer support a leading ``u`` or ``U``."
msgstr ""
"``u`` or ``U`` で始まる文字列リテラルはサポートされません。(---訳注: この "
"``u\"...\"`` は Python 3.3 で再び使えるようになりました。 ---)"

#: ../../whatsnew/3.0.rst:469
msgid ""
"The :keyword:`from` *module* :keyword:`import` ``*`` syntax is only allowed "
"at the module level, no longer inside functions."
msgstr ""
":keyword:`from` *module* :keyword:`import` ``*`` はモジュールレベルでのみ許さ"
"れ、関数内での使用は許されません。"

#: ../../whatsnew/3.0.rst:472
msgid ""
"The only acceptable syntax for relative imports is :samp:`from .[{module}] "
"import {name}`.  All :keyword:`import` forms not starting with ``.`` are "
"interpreted as absolute imports.  (:pep:`328`)"
msgstr ""
"相対インポートに許される構文は :samp:`from .[{module}] import {name}` のみで"
"す。\n"
"``.`` で始まらない形の全ての :keyword:`import` は絶対インポートと解釈されま"
"す。 (:pep:`328`)"

#: ../../whatsnew/3.0.rst:476
msgid "Classic classes are gone."
msgstr "古い形式のクラスはサポートされません。"

#: ../../whatsnew/3.0.rst:480
msgid "Changes Already Present In Python 2.6"
msgstr "Python 2.6 で既にあった変更"

#: ../../whatsnew/3.0.rst:482
msgid ""
"Since many users presumably make the jump straight from Python 2.5 to Python "
"3.0, this section reminds the reader of new features that were originally "
"designed for Python 3.0 but that were back-ported to Python 2.6.  The "
"corresponding sections in :ref:`whats-new-in-2.6` should be consulted for "
"longer descriptions."
msgstr ""
"おそらく多くのユーザが一足飛びに Python 2.5 から Python 3.0 に移行しようとす"
"るでしょうから、このセクションでは、もともとは Python 3.0 のためにデザインさ"
"れたものの Python 2.6 にバックポートされた新機能について、読者に思い出しても"
"らいましょう。 :ref:`whats-new-in-2.6` 内の対応するセクションにはもっと長い説"
"明が書かれています。"

#: ../../whatsnew/3.0.rst:488
msgid ""
":ref:`pep-0343`.  The :keyword:`with` statement is now a standard feature "
"and no longer needs to be imported from the :mod:`__future__`. Also check "
"out :ref:`new-26-context-managers` and :ref:`new-module-contextlib`."
msgstr ""
":ref:`pep-0343`. :keyword:`with` 文は今では標準機能となったので、 :mod:"
"`__future__` からインポートする必要はもうありません。 :ref:`new-26-context-"
"managers` と :ref:`new-module-contextlib` も見てください。"

#: ../../whatsnew/3.0.rst:493
msgid ""
":ref:`pep-0366`.  This enhances the usefulness of the :option:`-m` option "
"when the referenced module lives in a package."
msgstr ""
":ref:`pep-0366`. :option:`-m` オプションの有用性を強化します。パッケージ内に"
"あるモジュールを参照している際に関係します。"

#: ../../whatsnew/3.0.rst:496
msgid ":ref:`pep-0370`."
msgstr ":ref:`pep-0370`."

#: ../../whatsnew/3.0.rst:498
msgid ":ref:`pep-0371`."
msgstr ":ref:`pep-0371`."

#: ../../whatsnew/3.0.rst:500
msgid ""
":ref:`pep-3101`.  Note: the 2.6 description mentions the :meth:`format` "
"method for both 8-bit and Unicode strings.  In 3.0, only the :class:`str` "
"type (text strings with Unicode support) supports this method; the :class:"
"`bytes` type does not.  The plan is to eventually make this the only API for "
"string formatting, and to start deprecating the ``%`` operator in Python 3.1."
msgstr ""
":ref:`pep-3101`. 注意: 2.6 の記述では :meth:`format` メソッドが 8 ビット文字"
"列と Unicode 文字列両方について述べていますが、3.0 では :class:`str` 型 "
"(Unicode サポートを持ったテキスト文字列) だけがこのメソッドをサポートしていま"
"す。 :class:`bytes` 型にはありません。計画では最終的にはこれだけが唯一の文字"
"列フォーマットの API になり、Python 3.1 では ``%`` 演算子は非推奨扱いを開始す"
"る予定です。(--- 訳注: ``%`` 演算子の撤廃は影響が大き過ぎるからか、現実には "
"(ドキュメントでの軽い記述を除き) 実行時に特別に非推奨扱いされることは 3.5 に"
"なってさえもいまだありません。 ---)"

#: ../../whatsnew/3.0.rst:507
msgid ""
":ref:`pep-3105`.  This is now a standard feature and no longer needs to be "
"imported from :mod:`__future__`.  More details were given above."
msgstr ""
":ref:`pep-3105`. これはもはや標準機能となったので、 :mod:`__future__` からイ"
"ンポートする必要はありません。詳細はこのドキュメントの上の方に書いてありま"
"す。"

#: ../../whatsnew/3.0.rst:510
msgid ""
":ref:`pep-3110`.  The :keyword:`except` *exc* :keyword:`!as` *var* syntax is "
"now standard and :keyword:`!except` *exc*, *var* is no longer supported.  "
"(Of course, the :keyword:`!as` *var* part is still optional.)"
msgstr ""

#: ../../whatsnew/3.0.rst:515
msgid ""
":ref:`pep-3112`.  The ``b\"...\"`` string literal notation (and its variants "
"like ``b'...'``, ``b\"\"\"...\"\"\"``, and ``br\"...\"``) now produces a "
"literal of type :class:`bytes`."
msgstr ""
":ref:`pep-3112`. 文字列リテラル ``b\"...\"`` 表記 (とそのお仲間 ``b'...'``, "
"``b\"\"\"...\"\"\"``, ``br\"...\"`` など) は今では :class:`bytes` 型です。"

#: ../../whatsnew/3.0.rst:519
msgid ""
":ref:`pep-3116`.  The :mod:`io` module is now the standard way of doing file "
"I/O.  The built-in :func:`open` function is now an alias for :func:`io.open` "
"and has additional keyword arguments *encoding*, *errors*, *newline* and "
"*closefd*.  Also note that an invalid *mode* argument now raises :exc:"
"`ValueError`, not :exc:`IOError`.  The binary file object underlying a text "
"file object can be accessed as :attr:`f.buffer` (but beware that the text "
"object maintains a buffer of itself in order to speed up the encoding and "
"decoding operations)."
msgstr ""
":ref:`pep-3116`. :mod:`io` モジュールが今ではファイル I/O の標準手段です。組"
"み込みの :func:`open` は今では :func:`io.open` へのエイリアスであり、また、追"
"加のキーワード引数 *encoding*, *errors*, *newline*, *closefd* を持ちます。不"
"正な *mode* 引数で :exc:`IOError` ではなく :exc:`ValueError` を投げるように"
"なったことにも注意してください。テキストファイルオブジェクトの背後にあるバイ"
"ナリファイルオブジェクトには、 :attr:`f.buffer` でアクセスできます。(ただしエ"
"ンコーディング・デコーディング操作の高速化のために、テキストオブジェクトは自"
"身のバッファを保守管理していることに注意してください。)"

#: ../../whatsnew/3.0.rst:529
msgid ""
":ref:`pep-3118`.  The old builtin :func:`buffer` is now really gone; the new "
"builtin :func:`memoryview` provides (mostly) similar functionality."
msgstr ""
":ref:`pep-3118`. 古いビルトインの :func:`buffer` は本当になくなりました; 新し"
"いビルトイン :func:`memoryview` が (ほぼ) 同様の機能性を提供します。"

#: ../../whatsnew/3.0.rst:533
msgid ""
":ref:`pep-3119`.  The :mod:`abc` module and the ABCs defined in the :mod:"
"`collections` module plays a somewhat more prominent role in the language "
"now, and built-in collection types like :class:`dict` and :class:`list` "
"conform to the :class:`collections.MutableMapping` and :class:`collections."
"MutableSequence` ABCs, respectively."
msgstr ""
":ref:`pep-3119`. :mod:`collections` モジュール内で定義されている :mod:`abc` "
"モジュールと ABC 群が今では言語においてもっと目立った役割を演じるようになって"
"いて、たとえば :class:`dict` や :class:`list` のようなビルトインのコレクショ"
"ン型はそれぞれ :class:`collections.MutableMapping` と :class:`collections."
"MutableSequence` の ABC に従うようになっています。"

#: ../../whatsnew/3.0.rst:539
msgid ""
":ref:`pep-3127`.  As mentioned above, the new octal literal notation is the "
"only one supported, and binary literals have been added."
msgstr ""
":ref:`pep-3127`. 上述のとおり、新しい 8 進数リテラル表現だけが唯一の 8 進数リ"
"テラル表現となり、また、バイナリリテラルが追加されました。"

#: ../../whatsnew/3.0.rst:543
msgid ":ref:`pep-3129`."
msgstr ":ref:`pep-3129`."

#: ../../whatsnew/3.0.rst:545
msgid ""
":ref:`pep-3141`.  The :mod:`numbers` module is another new use of ABCs, "
"defining Python's \"numeric tower\".  Also note the new :mod:`fractions` "
"module which implements :class:`numbers.Rational`."
msgstr ""
":ref:`pep-3141`. :mod:`numbers` が、もう一つの新しく ABC を使うモジュールで、"
"Python の「数値塔 (numeric tower)」を定義しています。新しい :mod:`fractions` "
"モジュールが :class:`numbers.Rational` を実装していることにも注目してくださ"
"い。"

#: ../../whatsnew/3.0.rst:551
msgid "Library Changes"
msgstr "ライブラリの変更"

#: ../../whatsnew/3.0.rst:553
msgid ""
"Due to time constraints, this document does not exhaustively cover the very "
"extensive changes to the standard library.  :pep:`3108` is the reference for "
"the major changes to the library.  Here's a capsule review:"
msgstr ""
"時間の制約により、この文書は標準ライブラリの非常に幅広い変更について徹底的に"
"取り上げてはいません。\n"
"ライブラリの大きな変更については :pep:`3108` を参照してください。\n"
"ここでは要約を示します:"

#: ../../whatsnew/3.0.rst:558
msgid ""
"Many old modules were removed.  Some, like :mod:`gopherlib` (no longer used) "
"and :mod:`md5` (replaced by :mod:`hashlib`), were already deprecated by :pep:"
"`4`.  Others were removed as a result of the removal of support for various "
"platforms such as Irix, BeOS and Mac OS 9 (see :pep:`11`).  Some modules "
"were also selected for removal in Python 3.0 due to lack of use or because a "
"better replacement exists.  See :pep:`3108` for an exhaustive list."
msgstr ""
"多くの古いモジュールは削除されました。\n"
":mod:`gopherlib` (もう使われません) や :mod:`md5` (:mod:`hashlib` に代替され"
"ました) 等のいくつかのモジュールは :pep:`4` で既に廃止予定でした。\n"
"他のモジュールは、Irix、BeOS ならびに Mac OS 9 等のプラットフォームでのサポー"
"トが打ち切られた (:pep:`11` 参照) ために削除されました。\n"
"いくつかのモジュールは使われなかったり、より良い代用品があるため Python 3.0 "
"で削除されました\n"
"網羅的なリストは :pep:`3108` を参照してください。"

#: ../../whatsnew/3.0.rst:566
msgid ""
"The :mod:`bsddb3` package was removed because its presence in the core "
"standard library has proved over time to be a particular burden for the core "
"developers due to testing instability and Berkeley DB's release schedule.  "
"However, the package is alive and well, externally maintained at https://www."
"jcea.es/programacion/pybsddb.htm."
msgstr ""
":mod:`bsddb3` パッケージが削除されました。テストの不安定性と Berkeley DB のリ"
"リーススケジュールにより、中心標準ライブラリでの存在がコア開発者の大きな負担"
"になっていることが徐々に分かってきたためです。しかしながら :mod:`bsddb3` パッ"
"ケージはまだ残っていて、https://www.jcea.es/programacion/pybsddb.htm で外部的"
"に保守されています。"

#: ../../whatsnew/3.0.rst:572
msgid ""
"Some modules were renamed because their old name disobeyed :pep:`8`, or for "
"various other reasons.  Here's the list:"
msgstr ""
"いくつかのモジュールは :pep:`8` に従っていないか、その他の理由により名前が変"
"更されました:"

#: ../../whatsnew/3.0.rst:576
msgid "Old Name"
msgstr "以前の名前"

#: ../../whatsnew/3.0.rst:576
msgid "New Name"
msgstr "新しい名前"

#: ../../whatsnew/3.0.rst:578
msgid "_winreg"
msgstr "_winreg"

#: ../../whatsnew/3.0.rst:578
msgid "winreg"
msgstr "winreg"

#: ../../whatsnew/3.0.rst:579
msgid "ConfigParser"
msgstr "ConfigParser"

#: ../../whatsnew/3.0.rst:579
msgid "configparser"
msgstr "configparser"

#: ../../whatsnew/3.0.rst:580
msgid "copy_reg"
msgstr "copy_reg"

#: ../../whatsnew/3.0.rst:580
msgid "copyreg"
msgstr "copyreg"

#: ../../whatsnew/3.0.rst:581
msgid "Queue"
msgstr "Queue"

#: ../../whatsnew/3.0.rst:581
msgid "queue"
msgstr "queue"

#: ../../whatsnew/3.0.rst:582
msgid "SocketServer"
msgstr "SocketServer"

#: ../../whatsnew/3.0.rst:582
msgid "socketserver"
msgstr "socketserver"

#: ../../whatsnew/3.0.rst:583
msgid "markupbase"
msgstr "markupbase"

#: ../../whatsnew/3.0.rst:583
msgid "_markupbase"
msgstr "_markupbase"

#: ../../whatsnew/3.0.rst:584
msgid "repr"
msgstr "repr"

#: ../../whatsnew/3.0.rst:584
msgid "reprlib"
msgstr "reprlib"

#: ../../whatsnew/3.0.rst:585
msgid "test.test_support"
msgstr "test.test_support"

#: ../../whatsnew/3.0.rst:585
msgid "test.support"
msgstr "test.support"

#: ../../whatsnew/3.0.rst:588
msgid ""
"A common pattern in Python 2.x is to have one version of a module "
"implemented in pure Python, with an optional accelerated version implemented "
"as a C extension; for example, :mod:`pickle` and :mod:`cPickle`.  This "
"places the burden of importing the accelerated version and falling back on "
"the pure Python version on each user of these modules.  In Python 3.0, the "
"accelerated versions are considered implementation details of the pure "
"Python versions. Users should always import the standard version, which "
"attempts to import the accelerated version and falls back to the pure Python "
"version.  The :mod:`pickle` / :mod:`cPickle` pair received this treatment.  "
"The :mod:`profile` module is on the list for 3.1.  The :mod:`StringIO` "
"module has been turned into a class in the :mod:`io` module."
msgstr ""
"Python 2.x でのよくあるパターンは、ピュア Python で実装した版とともに、オプ"
"ショナルで、C 拡張として実装した「加速装置付き (accelerated)」版を持つ、とい"
"うものです。例えば :mod:`pickle` と :mod:`cPickle` がそうです。それらモジュー"
"ルの個々のユーザにとって、accelerated 版をインポートしてみてダメならピュア "
"Python 版を使う、というのも重荷となるものです。Python 3.0 では、 accelerated "
"版はピュア Python 版の実装の詳細と考えます。ユーザは常に標準バージョンをイン"
"ポートすべきです。これ自身が accelerated 版のインポートを試みてダメならピュ"
"ア Python 版を使うようになっています。 :mod:`pickle` / :mod:`cPickle` のペア"
"がこの対象になりました。 :mod:`profile` モジュールは 3.1 でこれが予定されてい"
"ます。 :mod:`StringIO` モジュールは :mod:`io` モジュール内のクラスに変更され"
"ました。"

#: ../../whatsnew/3.0.rst:602
msgid ""
"Some related modules have been grouped into packages, and usually the "
"submodule names have been simplified.  The resulting new packages are:"
msgstr ""
"関連のあるモジュールのいくつかはパッケージにまとめられ、ふつうサブモジュール"
"名は単純化されました。結果として以下のようなパッケージが出来ました:"

#: ../../whatsnew/3.0.rst:606
msgid ""
":mod:`dbm` (:mod:`anydbm`, :mod:`dbhash`, :mod:`dbm`, :mod:`dumbdbm`, :mod:"
"`gdbm`, :mod:`whichdb`)."
msgstr ""
":mod:`dbm` (:mod:`anydbm`, :mod:`dbhash`, :mod:`dbm`, :mod:`dumbdbm`, :mod:"
"`gdbm`, :mod:`whichdb`)。"

#: ../../whatsnew/3.0.rst:609
msgid ":mod:`html` (:mod:`HTMLParser`, :mod:`htmlentitydefs`)."
msgstr ":mod:`html` (:mod:`HTMLParser`, :mod:`htmlentitydefs`)。"

#: ../../whatsnew/3.0.rst:611
msgid ""
":mod:`http` (:mod:`httplib`, :mod:`BaseHTTPServer`, :mod:`CGIHTTPServer`, :"
"mod:`SimpleHTTPServer`, :mod:`Cookie`, :mod:`cookielib`)."
msgstr ""
":mod:`http` (:mod:`httplib`, :mod:`BaseHTTPServer`, :mod:`CGIHTTPServer`, :"
"mod:`SimpleHTTPServer`, :mod:`Cookie`, :mod:`cookielib`)。"

#: ../../whatsnew/3.0.rst:615
msgid ""
":mod:`tkinter` (all :mod:`Tkinter`-related modules except :mod:`turtle`).  "
"The target audience of :mod:`turtle` doesn't really care about :mod:"
"`tkinter`.  Also note that as of Python 2.6, the functionality of :mod:"
"`turtle` has been greatly enhanced."
msgstr ""
":mod:`tkinter` (:mod:`turtle` を除く全ての :mod:`Tkinter` 関連のモジュー"
"ル)。\n"
":mod:`turtle` の対象読者は :mod:`tkinter` にそれほど関心がありません。\n"
"また、Python 2.6 以降では :mod:`turtle` の機能は大幅に向上しました。"

#: ../../whatsnew/3.0.rst:620
msgid ""
":mod:`urllib` (:mod:`urllib`, :mod:`urllib2`, :mod:`urlparse`, :mod:"
"`robotparse`)."
msgstr ""
":mod:`urllib` (:mod:`urllib`, :mod:`urllib2`, :mod:`urlparse`, :mod:"
"`robotparse`)。"

#: ../../whatsnew/3.0.rst:623
msgid ""
":mod:`xmlrpc` (:mod:`xmlrpclib`, :mod:`DocXMLRPCServer`, :mod:"
"`SimpleXMLRPCServer`)."
msgstr ""
":mod:`xmlrpc` (:mod:`xmlrpclib`, :mod:`DocXMLRPCServer`, :mod:"
"`SimpleXMLRPCServer`)。"

#: ../../whatsnew/3.0.rst:626
msgid ""
"Some other changes to standard library modules, not covered by :pep:`3108`:"
msgstr ":pep:`3108` で取り上げられていない標準ライブラリーの他の変更:"

#: ../../whatsnew/3.0.rst:629
msgid "Killed :mod:`sets`.  Use the built-in :func:`set` class."
msgstr ""
":mod:`sets` は廃止されました。組み込みの :func:`set` クラスを使用してくださ"
"い。"

#: ../../whatsnew/3.0.rst:631
msgid ""
"Cleanup of the :mod:`sys` module: removed :func:`sys.exitfunc`, :func:`sys."
"exc_clear`, :data:`sys.exc_type`, :data:`sys.exc_value`, :data:`sys."
"exc_traceback`.  (Note that :data:`sys.last_type` etc. remain.)"
msgstr ""
":mod:`sys` モジュールの整理: :func:`sys.exitfunc`, :func:`sys.exc_clear`, :"
"data:`sys.exc_type`, :data:`sys.exc_value`, :data:`sys.exc_traceback` は削除"
"されました。(:data:`sys.last_type` 等はまだあります。)"

#: ../../whatsnew/3.0.rst:636
msgid ""
"Cleanup of the :class:`array.array` type: the :meth:`read` and :meth:`write` "
"methods are gone; use :meth:`fromfile` and :meth:`tofile` instead.  Also, "
"the ``'c'`` typecode for array is gone -- use either ``'b'`` for bytes or "
"``'u'`` for Unicode characters."
msgstr ""
":class:`array.array` 型の整理: :meth:`read` ならびに :meth:`write` メソッドは"
"廃止されました。代わりに :meth:`fromfile` ならびに :meth:`tofile` を使用して"
"ください。また、array 向けの ``'c'`` タイプコードは廃止されました。バイトに"
"は ``'b'`` 、Unicode 文字には ``'u'`` を使用してください。"

#: ../../whatsnew/3.0.rst:642
msgid ""
"Cleanup of the :mod:`operator` module: removed :func:`sequenceIncludes` and :"
"func:`isCallable`."
msgstr ""
":mod:`operator` モジュールの整理: :func:`sequenceIncludes` および :func:"
"`isCallable` は削除されました。"

#: ../../whatsnew/3.0.rst:645
msgid ""
"Cleanup of the :mod:`thread` module: :func:`acquire_lock` and :func:"
"`release_lock` are gone; use :func:`acquire` and :func:`release` instead."
msgstr ""
":mod:`thread` モジュールの整理: :func:`acquire_lock` ならびに :func:"
"`release_lock` は廃止されました。代わりに :func:`acquire` ならびに :func:"
"`release` を使用してください。"

#: ../../whatsnew/3.0.rst:649
msgid "Cleanup of the :mod:`random` module: removed the :func:`jumpahead` API."
msgstr ""
":mod:`random` モジュールの整理: :func:`jumpahead` API は削除されました。"

#: ../../whatsnew/3.0.rst:651
msgid "The :mod:`new` module is gone."
msgstr ":mod:`new` モジュールは廃止されました。"

#: ../../whatsnew/3.0.rst:653
msgid ""
"The functions :func:`os.tmpnam`, :func:`os.tempnam` and :func:`os.tmpfile` "
"have been removed in favor of the :mod:`tempfile` module."
msgstr ""
"関数 :func:`os.tmpnam`、:func:`os.tempnam` および :func:`os.tmpfile` は :mod:"
"`tempfile` のため削除されました。"

#: ../../whatsnew/3.0.rst:657
msgid ""
"The :mod:`tokenize` module has been changed to work with bytes.  The main "
"entry point is now :func:`tokenize.tokenize`, instead of generate_tokens."
msgstr ""
":mod:`tokenize` モジュールはバイトでも機能するように変更されました。メインの"
"エントリポイントは generate_tokens から :func:`tokenize.tokenize` になりまし"
"た。"

#: ../../whatsnew/3.0.rst:661
msgid ""
":data:`string.letters` and its friends (:data:`string.lowercase` and :data:"
"`string.uppercase`) are gone.  Use :data:`string.ascii_letters` etc. "
"instead.  (The reason for the removal is that :data:`string.letters` and "
"friends had locale-specific behavior, which is a bad idea for such "
"attractively named global \"constants\".)"
msgstr ""

#: ../../whatsnew/3.0.rst:668
msgid ""
"Renamed module :mod:`__builtin__` to :mod:`builtins` (removing the "
"underscores, adding an 's').  The :data:`__builtins__` variable found in "
"most global namespaces is unchanged.  To modify a builtin, you should use :"
"mod:`builtins`, not :data:`__builtins__`!"
msgstr ""
"モジュール :mod:`__builtin__` が :mod:`builtins` にリネームされました (アン"
"ダースコアの削除と 's' の追加)。\n"
"大半の大域名前空間における :data:`__builtins__` 変数は変更されていません。\n"
"組み込みを変更するには :data:`__builtins__` でなく :mod:`builtins` を使わなけ"
"ればなりません。"

#: ../../whatsnew/3.0.rst:675
msgid ":pep:`3101`: A New Approach To String Formatting"
msgstr ":pep:`3101`: 文字列整形の新たなアプローチ"

#: ../../whatsnew/3.0.rst:677
msgid ""
"A new system for  built-in string formatting operations replaces the ``%`` "
"string  formatting operator.   (However, the ``%``  operator is still "
"supported;  it will  be deprecated in  Python 3.1  and removed from the "
"language at some later time.)  Read :pep:`3101` for the full scoop."
msgstr ""
"組み込みの新しい文字列書式化操作で、文字列の ``%`` 演算子を置き換えるもので"
"す。(しかしながら ``%`` 演算子はまだサポートされます; Python 3.1 で非推奨とな"
"り、将来のいつかの時点で削除されます。) 完全な詳細は :pep:`3101` をお読み下さ"
"い。 (--- 訳注: `Python 2.6 で既にあった変更`_ での対応する記述に書いた訳注を"
"参照。---)"

#: ../../whatsnew/3.0.rst:685
msgid "Changes To Exceptions"
msgstr "例外に関する変更"

#: ../../whatsnew/3.0.rst:687
msgid ""
"The APIs for raising and catching exception have been cleaned up and new "
"powerful features added:"
msgstr "例外の送出や捕捉を行う API は整理され、 強力な新機能が追加されました:"

#: ../../whatsnew/3.0.rst:690
msgid ""
":pep:`352`: All exceptions must be derived (directly or indirectly) from :"
"exc:`BaseException`.  This is the root of the exception hierarchy.  This is "
"not new as a recommendation, but the *requirement* to inherit from :exc:"
"`BaseException` is new.  (Python 2.6 still allowed classic classes to be "
"raised, and placed no restriction on what you can catch.)  As a consequence, "
"string exceptions are finally truly and utterly dead."
msgstr ""
":pep:`352`: 全ての例外は (直接的にまたは間接的に) :exc:`BaseException` を継承"
"しなければなりません。\n"
":exc:`BaseException` は例外階層の根です。\n"
"これは勧告としては新しくありませんが、:exc:`BaseException` 継承の *要求* は新"
"しいです。\n"
"(Python 2.6 は依然として昔のクラスを送出するのを許容しており、捕捉するものに"
"ついての制限はありません。)\n"
"結果として文字列例外は終に本当の意味で、完全になくなりました。"

#: ../../whatsnew/3.0.rst:698
msgid ""
"Almost all exceptions should actually derive from :exc:`Exception`; :exc:"
"`BaseException` should only be used as a base class for exceptions that "
"should only be handled at the top level, such as :exc:`SystemExit` or :exc:"
"`KeyboardInterrupt`.  The recommended idiom for handling all exceptions "
"except for this latter category is to use :keyword:`except` :exc:`Exception`."
msgstr ""
"ほとんど全ての例外は、実際は :exc:`Exception` を継承すべきです。 :exc:"
"`BaseException` は最上位で扱われるべき例外、例えば :exc:`SystemExit` や :exc:"
"`KeyboardInterrupt` の基底クラスとしてのみ使われるべきでしす。上記カテゴリー"
"を除く全ての例外を処理するのに推奨されるイディオムは :keyword:`except` :exc:"
"`Exception` です。"

#: ../../whatsnew/3.0.rst:705
msgid ":exc:`StandardError` was removed."
msgstr ":exc:`StandardError` は削除されました。"

#: ../../whatsnew/3.0.rst:707
msgid ""
"Exceptions no longer behave as sequences.  Use the :attr:`args` attribute "
"instead."
msgstr ""
"例外はシーケンスとして振る舞わなくなりました。代わりに :attr:`args` 属性を使"
"用してください。"

#: ../../whatsnew/3.0.rst:710
msgid ""
":pep:`3109`: Raising exceptions.  You must now use :samp:`raise {Exception}"
"({args})` instead of :samp:`raise {Exception}, {args}`. Additionally, you "
"can no longer explicitly specify a traceback; instead, if you *have* to do "
"this, you can assign directly to the :attr:`__traceback__` attribute (see "
"below)."
msgstr ""
":pep:`3109`: 例外の送出。\n"
":samp:`raise {Exception}, {args}` ではなく :samp:`raise {Exception}({args})` "
"としなければなりません。\n"
"加えて、トレースバックを明示的に指定することはもう出来ません。\n"
"そう *しなければならない* 場合は、代わりに :attr:`__traceback__` 属性に直接割"
"り当てることが出来ます (下記参照)."

#: ../../whatsnew/3.0.rst:716
msgid ""
":pep:`3110`: Catching exceptions.  You must now use :samp:`except "
"{SomeException} as {variable}` instead of :samp:`except {SomeException}, "
"{variable}`.  Moreover, the *variable* is explicitly deleted when the :"
"keyword:`except` block is left."
msgstr ""
":pep:`3110`: 例外の捕捉。\n"
":samp:`except {SomeException}, {variable}` ではなく :samp:`except "
"{SomeException} as {variable}` としなければなりません。\n"
"その上 :keyword:`except` ブロックがある場合 *variable* は明示的に削除されま"
"す。"

#: ../../whatsnew/3.0.rst:722
msgid ""
":pep:`3134`: Exception chaining.  There are two cases: implicit chaining and "
"explicit chaining.  Implicit chaining happens when an exception is raised in "
"an :keyword:`except` or :keyword:`finally` handler block.  This usually "
"happens due to a bug in the handler block; we call this a *secondary* "
"exception.  In this case, the original exception (that was being handled) is "
"saved as the :attr:`__context__` attribute of the secondary exception. "
"Explicit chaining is invoked with this syntax::"
msgstr ""
":pep:`3134`: 例外の連鎖。\n"
"暗黙の連鎖と明示的な連鎖の2つの場合があります。\n"
"暗黙の連鎖は例外が :keyword:`except` や :keyword:`finally` 処理ブロックで送出"
"されたときに起こります。\n"
"この原因は大抵処理ブロック内のバグです。\n"
"これを *二次的な (secondary)* 例外と呼びます。\n"
"この場合 (処理中の) 元々の例外は二次的な例外の :attr:`__context__` 属性に保存"
"されます。\n"
"明示的な連鎖は以下の構文で起こします::"

#: ../../whatsnew/3.0.rst:733
msgid ""
"(where *primary_exception* is any expression that produces an exception "
"object, probably an exception that was previously caught). In this case, the "
"primary exception is stored on the :attr:`__cause__` attribute of the "
"secondary exception.  The traceback printed when an unhandled exception "
"occurs walks the chain of :attr:`__cause__` and :attr:`__context__` "
"attributes and prints a separate traceback for each component of the chain, "
"with the primary exception at the top.  (Java users may recognize this "
"behavior.)"
msgstr ""
"(*primary_exception* は例外オブジェクトを生成する任意の式です。たぶんどこかで"
"以前捕捉した例外でしょう。) 今の場合、一次的 (primary) な例外は二次的例外の :"
"attr:`__cause__` 属性に保存されます。未捕捉の例外が起こった際に表示されるト"
"レースバックは :attr:`__cause__` と :attr:`__context__` 属性を渡り歩き、そし"
"て一次的例外を一番上に置いて、連鎖のそれぞれの構成要素ごとにトレースバックを"
"分けて表示します。(Java ユーザにはこの振る舞いは御馴染みでしょう。)"

#: ../../whatsnew/3.0.rst:742
msgid ""
":pep:`3134`: Exception objects now store their traceback as the :attr:"
"`__traceback__` attribute.  This means that an exception object now contains "
"all the information pertaining to an exception, and there are fewer reasons "
"to use :func:`sys.exc_info` (though the latter is not removed)."
msgstr ""
":pep:`3134`: 例外オブジェクトがトレースバックを :attr:`__traceback__` 属性に"
"格納するようになりました。\n"
"つまり、例外オブジェクトが例外関連の全情報を持つようになったということで"
"す。\n"
":func:`sys.exc_info` を使う理由は (削除されていませんが) あまりありません。"

#: ../../whatsnew/3.0.rst:748
msgid ""
"A few exception messages are improved when Windows fails to load an "
"extension module.  For example, ``error code 193`` is now ``%1 is not a "
"valid Win32 application``.  Strings now deal with non-English locales."
msgstr ""
"Windows が拡張モジュールのロードに失敗したときの例外メッセージが少し改善しま"
"した。\n"
"例えば、``error code 193`` は ``%1 is not a valid Win32 application`` になり"
"ました。\n"
"文字列は英語でないロケールを扱えるようになりました。"

#: ../../whatsnew/3.0.rst:755
msgid "Miscellaneous Other Changes"
msgstr "その他の変更"

#: ../../whatsnew/3.0.rst:758
msgid "Operators And Special Methods"
msgstr "演算子と特殊メソッド"

#: ../../whatsnew/3.0.rst:760
msgid ""
"``!=`` now returns the opposite of ``==``, unless ``==`` returns :data:"
"`NotImplemented`."
msgstr ""
"``!=`` は ``==`` と逆の結果をかえします（``==`` が :data:`NotImplemented` を"
"返さなければ）。"

#: ../../whatsnew/3.0.rst:763
msgid ""
"The concept of \"unbound methods\" has been removed from the language. When "
"referencing a method as a class attribute, you now get a plain function "
"object."
msgstr ""
"「非束縛メソッド (unbound methods)」という概念は言語から削除されました。クラ"
"ス属性としてのメソッドを参照しても今では普通の関数オブジェクトが得られます。"

#: ../../whatsnew/3.0.rst:767
msgid ""
":meth:`__getslice__`, :meth:`__setslice__` and :meth:`__delslice__` were "
"killed.  The syntax ``a[i:j]`` now translates to ``a.__getitem__(slice(i, "
"j))`` (or :meth:`__setitem__` or :meth:`__delitem__`, when used as an "
"assignment or deletion target, respectively)."
msgstr ""
":meth:`__getslice__`, :meth:`__setslice__`, :meth:`__delslice__` はお亡くなり"
"になりました。構文 ``a[i:j]`` は今では ``a.__getitem__(slice(i, j))`` と解釈"
"されます (または代入や削除で使われる場合は順に :meth:`__setitem__` か :meth:"
"`__delitem__`)。"

#: ../../whatsnew/3.0.rst:773
msgid ""
":pep:`3114`: the standard :meth:`next` method has been renamed to :meth:"
"`~iterator.__next__`."
msgstr ""
":pep:`3114`:  :meth:`next` 標準メソッドは :meth:`~iterator.__next__` に改名さ"
"れました。"

#: ../../whatsnew/3.0.rst:776
msgid ""
"The :meth:`__oct__` and :meth:`__hex__` special methods are removed -- :func:"
"`oct` and :func:`hex` use :meth:`__index__` now to convert the argument to "
"an integer."
msgstr ""
":meth:`__oct__` ならびに :meth:`__hex__` 特殊メソッドは削除されました。\n"
":func:`oct` ならびに :func:`hex` は :meth:`__index__` を使って引数を整数に変"
"換します。"

#: ../../whatsnew/3.0.rst:780
msgid "Removed support for :attr:`__members__` and :attr:`__methods__`."
msgstr ":attr:`__members__` と :attr:`__methods__` は削除されました。"

#: ../../whatsnew/3.0.rst:782
msgid ""
"The function attributes named :attr:`func_X` have been renamed to use the :"
"data:`__X__` form, freeing up these names in the function attribute "
"namespace for user-defined attributes.  To wit, :attr:`func_closure`, :attr:"
"`func_code`, :attr:`func_defaults`, :attr:`func_dict`, :attr:`func_doc`, :"
"attr:`func_globals`, :attr:`func_name` were renamed to :attr:`__closure__`, :"
"attr:`__code__`, :attr:`__defaults__`, :attr:`~object.__dict__`, :attr:"
"`__doc__`, :attr:`__globals__`, :attr:`~definition.__name__`, respectively."
msgstr ""
":attr:`func_X` 的な命名だった関数オブジェクトの属性が、 :data:`__X__` 的命名"
"に変わりました。ユーザ定義属性の命名を関数属性名前空間から解き放つためです。"
"つまり、 :attr:`func_closure`, :attr:`func_code`, :attr:`func_defaults`, :"
"attr:`func_dict`, :attr:`func_doc`, :attr:`func_globals`, :attr:`func_name` "
"が順に :attr:`__closure__`, :attr:`__code__`, :attr:`__defaults__`, :attr:"
"`~object.__dict__`, :attr:`__doc__`, :attr:`__globals__`, :attr:`~definition."
"__name__`"

#: ../../whatsnew/3.0.rst:792
msgid ":meth:`__nonzero__` is now :meth:`__bool__`."
msgstr ":meth:`__nonzero__` は :meth:`__bool__` に改名されました。"

#: ../../whatsnew/3.0.rst:795
msgid "Builtins"
msgstr "組み込み"

#: ../../whatsnew/3.0.rst:797
msgid ""
":pep:`3135`: New :func:`super`.  You can now invoke :func:`super` without "
"arguments and (assuming this is in a regular instance method defined inside "
"a :keyword:`class` statement) the right class and instance will "
"automatically be chosen.  With arguments, the behavior of :func:`super` is "
"unchanged."
msgstr ""
":pep:`3135`: 新しくなった :func:`super` 。今では :func:`super` は引数なしで呼"
"び出せます。(これが :keyword:`class` 内で定義される通常のインスタンスメソッド"
"内であると仮定して) 正しいクラスとインスタンスが自動的に選択されます。引数あ"
"りの場合の :func:`super` の振る舞いには変更はありません。"

#: ../../whatsnew/3.0.rst:803
msgid ""
":pep:`3111`: :func:`raw_input` was renamed to :func:`input`.  That is, the "
"new :func:`input` function reads a line from :data:`sys.stdin` and returns "
"it with the trailing newline stripped. It raises :exc:`EOFError` if the "
"input is terminated prematurely. To get the old behavior of :func:`input`, "
"use ``eval(input())``."
msgstr ""
":pep:`3111`: :func:`raw_input` が :func:`input` にリネームされました。つま"
"り、新しい :func:`input` 関数は :data:`sys.stdin` から行を読み、末尾の改行を"
"取り除いて返します。入力が時期尚早に終わってしまったら :exc:`EOFError` になり"
"ます。昔の :func:`input` の振る舞いが欲しければ ``eval(input())`` としてくだ"
"さい。"

#: ../../whatsnew/3.0.rst:809
msgid ""
"A new built-in function :func:`next` was added to call the :meth:`~iterator."
"__next__` method on an object."
msgstr ""
"新しい組み込み関数 :func:`next` が追加されました。 オブジェクトの :meth:"
"`~iterator.__next__` メソッドを呼び出します。"

#: ../../whatsnew/3.0.rst:812
msgid ""
"The :func:`round` function rounding strategy and return type have changed.  "
"Exact halfway cases are now rounded to the nearest even result instead of "
"away from zero.  (For example, ``round(2.5)`` now returns ``2`` rather than "
"``3``.)  ``round(x[, n])`` now delegates to ``x.__round__([n])`` instead of "
"always returning a float.  It generally returns an integer when called with "
"a single argument and a value of the same type as ``x`` when called with two "
"arguments."
msgstr ""
":func:`round` 関数の丸めの戦略と戻り値の型が変更されました。ど真ん中の場合"
"に、四捨五入ではなく最近接偶数への丸めをするようになりました。(例えば "
"``round(2.5)`` は今では ``2`` を返します。 ``3`` ではなく。) (---訳注: 丸め"
"モードについては `Wikipedia <https://en.wikipedia.org/wiki/Rounding#Tie-"
"breaking>`_ 参照。---) ``round(x[, n])`` は常に浮動小数点数の結果を返す代わり"
"に、 ``x.__round__([n])`` に処理を委譲するようになりました。これは一般的に、"
"単一引数で呼ばれた際に整数を返し、二つの引数で呼ばれた場合は ``x`` と同じ型の"
"値として返します。"

#: ../../whatsnew/3.0.rst:821
msgid "Moved :func:`intern` to :func:`sys.intern`."
msgstr ":func:`intern` は :func:`sys.intern` に移動しました。"

#: ../../whatsnew/3.0.rst:823
msgid ""
"Removed: :func:`apply`.  Instead of ``apply(f, args)`` use ``f(*args)``."
msgstr ""
":func:`apply` は削除されました。 ``apply(f, args)`` の代わりに ``f(*args)`` "
"を使用してください。"

#: ../../whatsnew/3.0.rst:826
msgid ""
"Removed :func:`callable`.  Instead of ``callable(f)`` you can use "
"``isinstance(f, collections.Callable)``.  The :func:`operator.isCallable` "
"function is also gone."
msgstr ""
":func:`callable` は削除されました。 ``callable(f)`` のかわりに "
"``isinstance(f, collections.Callable)`` を使用してください。 :func:`operator."
"isCallable` も削除されました。"

#: ../../whatsnew/3.0.rst:830
msgid ""
"Removed :func:`coerce`.  This function no longer serves a purpose now that "
"classic classes are gone."
msgstr ""
":func:`coerce` は削除されました。古い形式のクラスが削除されたため、この関数は"
"必要ありません。"

#: ../../whatsnew/3.0.rst:833
msgid ""
"Removed :func:`execfile`.  Instead of ``execfile(fn)`` use ``exec(open(fn)."
"read())``."
msgstr ""
":func:`execfile` は削除されました。 ``execfile(fn)`` の代わりに "
"``exec(open(fn).read())`` を使用してください。"

#: ../../whatsnew/3.0.rst:836
msgid ""
"Removed the :class:`file` type.  Use :func:`open`.  There are now several "
"different kinds of streams that open can return in the :mod:`io` module."
msgstr ""
" :class:`file` 型は削除されました。 :func:`open` を使用してください。 :mod:"
"`io` モジュールには open が返すことの出来るいくつかの異なる種類のストリームが"
"あります。"

#: ../../whatsnew/3.0.rst:839
msgid ""
"Removed :func:`reduce`.  Use :func:`functools.reduce` if you really need it; "
"however, 99 percent of the time an explicit :keyword:`for` loop is more "
"readable."
msgstr ""
":func:`reduce` は削除されました。もし本当に必要なら :func:`functools.reduce` "
"を使用してください。ほぼ間違いなく :keyword:`for` ループのほうがより可読性が"
"高いでしょう。"

#: ../../whatsnew/3.0.rst:843
msgid "Removed :func:`reload`.  Use :func:`imp.reload`."
msgstr ""
":func:`reload` は削除されました。  :func:`imp.reload` を使用してください。"

#: ../../whatsnew/3.0.rst:845
msgid ""
"Removed. :meth:`dict.has_key` -- use the :keyword:`in` operator instead."
msgstr ""
":meth:`dict.has_key` は削除されました -- 代わりに :keyword:`in` 演算子を使用"
"してください。"

#: ../../whatsnew/3.0.rst:852
msgid "Build and C API Changes"
msgstr "ビルドならびに C API の変更"

#: ../../whatsnew/3.0.rst:854
msgid ""
"Due to time constraints, here is a *very* incomplete list of changes to the "
"C API."
msgstr "時間がないため、以下のC APIへの変更点のリストは *かなり* 不完全です。"

#: ../../whatsnew/3.0.rst:857
msgid ""
"Support for several platforms was dropped, including but not limited to Mac "
"OS 9, BeOS, RISCOS, Irix, and Tru64."
msgstr ""
"Mac OS 9, BeOS, RISCOS, Irix, Tru64 に限らず、いくつものプラットフォームのサ"
"ポートが打ち切られました。"

#: ../../whatsnew/3.0.rst:860
msgid ":pep:`3118`: New Buffer API."
msgstr ":pep:`3118`: 新たなバッファ API。"

#: ../../whatsnew/3.0.rst:862
msgid ":pep:`3121`: Extension Module Initialization & Finalization."
msgstr ":pep:`3121`: 例外モジュールの初期化と最終化"

#: ../../whatsnew/3.0.rst:864
msgid ":pep:`3123`: Making :c:macro:`PyObject_HEAD` conform to standard C."
msgstr ":pep:`3123`: :c:macro:`PyObject_HEAD` を標準的な C に一致。"

#: ../../whatsnew/3.0.rst:866
msgid "No more C API support for restricted execution."
msgstr "制限付き実行 の C API サポートはこれ以上されません。"

#: ../../whatsnew/3.0.rst:868
msgid ""
":c:func:`PyNumber_Coerce`, :c:func:`PyNumber_CoerceEx`, :c:func:"
"`PyMember_Get`, and :c:func:`PyMember_Set` C APIs are removed."
msgstr ""
":c:func:`PyNumber_Coerce`、:c:func:`PyNumber_CoerceEx`、:c:func:"
"`PyMember_Get`、および :c:func:`PyMember_Set` C APIs は削除されました。"

#: ../../whatsnew/3.0.rst:871
msgid ""
"New C API :c:func:`PyImport_ImportModuleNoBlock`, works like :c:func:"
"`PyImport_ImportModule` but won't block on the import lock (returning an "
"error instead)."
msgstr ""
"新たな C API :c:func:`PyImport_ImportModuleNoBlock`、:c:func:"
"`PyImport_ImportModule` のように動きますが、インポートロックでブロックしませ"
"ん (代わりにエラーを返します)。"

#: ../../whatsnew/3.0.rst:875
msgid ""
"Renamed the boolean conversion C-level slot and method: ``nb_nonzero`` is "
"now ``nb_bool``."
msgstr ""
"ブール変換の C 水準のスロットとメソッドがリネームされました: ``nb_nonzero`` "
"が ``nb_bool`` になりました。"

#: ../../whatsnew/3.0.rst:878
msgid ""
"Removed :c:macro:`METH_OLDARGS` and :c:macro:`WITH_CYCLE_GC` from the C API."
msgstr ""
"C API から :c:macro:`METH_OLDARGS` と :c:macro:`WITH_CYCLE_GC` が削除されまし"
"た。"

#: ../../whatsnew/3.0.rst:884
msgid "Performance"
msgstr "性能"

#: ../../whatsnew/3.0.rst:886
msgid ""
"The net result of the 3.0 generalizations is that Python 3.0 runs the "
"pystone benchmark around 10% slower than Python 2.5.  Most likely the "
"biggest cause is the removal of special-casing for small integers. There's "
"room for improvement, but it will happen after 3.0 is released!"
msgstr ""
"3.0 の可搬化 (generalization) による正味の結果は、Python 3.0 を pystone ベン"
"チマークすると Python 2.5 より 10% 遅くなる、というものでした。これはどうやら"
"小さい整数についての特殊処理を削除したことに一番大きな要因があるようです。こ"
"れには改善の余地がありますが、それは 3.0 リリース以降でしょう!"

#: ../../whatsnew/3.0.rst:896
msgid "Porting To Python 3.0"
msgstr "Python 3.0 への移植"

#: ../../whatsnew/3.0.rst:898
msgid ""
"For porting existing Python 2.5 or 2.6 source code to Python 3.0, the best "
"strategy is the following:"
msgstr ""
"(---訳注: 今では独立したクックブック :ref:`pyporting-howto` があるのでそちら"
"をご覧下さい。---) 既存の Python 2.5 や 2.6 のソースコードを Python 3.0 に移"
"植する最良の策は以下の通りです:"

#: ../../whatsnew/3.0.rst:901
msgid "(Prerequisite:) Start with excellent test coverage."
msgstr "(必須:) 優秀なテストカバレッジから始めてください。"

#: ../../whatsnew/3.0.rst:903
msgid ""
"Port to Python 2.6.  This should be no more work than the average port from "
"Python 2.x to Python 2.(x+1).  Make sure all your tests pass."
msgstr ""
"Python 2.6 に移植します。Python 2.x を Python 2.(x+1) に移植する普通の作業以"
"上のことをしてはいけません。確実に全てのテストを通してください。"

#: ../../whatsnew/3.0.rst:907
msgid ""
"(Still using 2.6:) Turn on the :option:`!-3` command line switch. This "
"enables warnings about features that will be removed (or change) in 3.0.  "
"Run your test suite again, and fix code that you get warnings about until "
"there are no warnings left, and all your tests still pass."
msgstr ""
"(まだ 2.6 を使います:) コマンドラインに :option:`!-3` オプションを渡します。"
"これは 3.0 で削除された (または変更された) 機能についての警告発行を有効にしま"
"す。再びテストスイートを実行して、そして警告が出たコードをそれがなくなるまで"
"修正し、全てのテストをパスさせます。"

#: ../../whatsnew/3.0.rst:913
msgid ""
"Run the ``2to3`` source-to-source translator over your source code tree.  "
"(See :ref:`2to3-reference` for more on this tool.)  Run the result of the "
"translation under Python 3.0.  Manually fix up any remaining issues, fixing "
"problems until all tests pass again."
msgstr ""
"``2to3`` をあなたのソースコードツリーに対して走らせます (このツールの詳細につ"
"いては :ref:`2to3-reference` をみてください)。Python 3.0 で変換結果のコードを"
"走らせます。何か問題が残っていれば手動で修正し、修正後も全てのテストをパスす"
"るようにします。"

#: ../../whatsnew/3.0.rst:918
msgid ""
"It is not recommended to try to write source code that runs unchanged under "
"both Python 2.6 and 3.0; you'd have to use a very contorted coding style, e."
"g. avoiding ``print`` statements, metaclasses, and much more.  If you are "
"maintaining a library that needs to support both Python 2.6 and Python 3.0, "
"the best approach is to modify step 3 above by editing the 2.6 version of "
"the source code and running the ``2to3`` translator again, rather than "
"editing the 3.0 version of the source code."
msgstr ""
"Python 2.6 と 3.0 両方で変更なしに動作するコードを書こうとすることはお奨め出"
"来ません; それをするととても捻じ曲がったコーディングスタイルを使う必要がある"
"でしょう。例えば ``print`` やメタクラスを避けたりとかそんな。Python 2.6 と "
"3.0 両バージョンともに対するサポートを必要とするライブラリを保守しているので"
"あれば、最良のアプローチは上記スリーステップを修正して、2.6 版のソースコード"
"を編集して ``2to3`` する、を繰り返すことです。これは 3.0 版のソースコードを編"
"集するより良いです。(---訳注: ここで言っていることは正論なのですが、 "
"``2to3`` は「Python 3 では動くが Python 2 では動かない (かもしれない)」ものを"
"生成します。2016 時点でも Python 2.7 はかなり元気 (予定では 2020 年までは公式"
"にサポートされる) ですので両バージョン (ただし今だと 2.7 と 3.2 以降) で変更"
"なしで動作するものを必要とすることは、残念ながらまだ多いでしょう (あなたが"
"作っているのがライブラリであるならば)。これについては :ref:`pyporting-howto` "
"に少し書かれています。 ---)"

#: ../../whatsnew/3.0.rst:927
msgid ""
"For porting C extensions to Python 3.0, please see :ref:`cporting-howto`."
msgstr ""
"C 拡張を Python 3.0 に移植するには、 :ref:`cporting-howto` を参照してくださ"
"い。"
