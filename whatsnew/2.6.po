# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:06+0000\n"
"PO-Revision-Date: 2020-05-30 12:17+0000\n"
"Last-Translator: tomo, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/2.6.rst:5
msgid "What's New in Python 2.6"
msgstr "What's New in Python 2.6"

#: ../../whatsnew/2.6.rst:0
msgid "Author"
msgstr "著者"

#: ../../whatsnew/2.6.rst:9
msgid "A.M. Kuchling (amk at amk.ca)"
msgstr "A.M. Kuchling (amk at amk.ca)"

#: ../../whatsnew/2.6.rst:52
msgid ""
"This article explains the new features in Python 2.6, released on October 1 "
"2008.  The release schedule is described in :pep:`361`."
msgstr ""
"この文書は Python 2.6 の新機能について解説します。 Python 2.6 は 2008 年 10 "
"月 1 日にリリースされました。リリーススケジュールは :pep:`361` に記述されてい"
"ます。"

#: ../../whatsnew/2.6.rst:55
msgid ""
"The major theme of Python 2.6 is preparing the migration path to Python 3.0, "
"a major redesign of the language.  Whenever possible, Python 2.6 "
"incorporates new features and syntax from 3.0 while remaining compatible "
"with existing code by not removing older features or syntax.  When it's not "
"possible to do that, Python 2.6 tries to do what it can, adding "
"compatibility functions in a :mod:`future_builtins` module and a :option:"
"`!-3` switch to warn about usages that will become unsupported in 3.0."
msgstr ""
"Python 2.6 の主要なテーマは、大幅な言語の再設計となる Python 3.0 移行への道筋"
"を準備することです。可能な場合にはいつでも、Python 2.6 は、古い機能や文法を削"
"除することなく既存のコードの互換性を保てるようにしながら、3.0 より新機能と新"
"文法を組み込んでいます。そうすることが出来ない場合には、Python 2.6 は、出来る"
"ことを出来るだけ試みました。それには :mod:`future_builtins` モジュールに互換"
"関数を、また、Python 3 でサポートされなくなる用法についての警告を出すための :"
"option:`!-3` スイッチ を追加しています。"

#: ../../whatsnew/2.6.rst:64
msgid ""
"Some significant new packages have been added to the standard library, such "
"as the :mod:`multiprocessing` and :mod:`json` modules, but there aren't many "
"new features that aren't related to Python 3.0 in some way."
msgstr ""
":mod:`multiprocessing` や :mod:`json` といった、いくつか重要な新しいパッケー"
"ジが標準ライブラリに追加されましたが、Python 3.0 に何らかも関係しない新機能は"
"あまり多くはありません。"

#: ../../whatsnew/2.6.rst:69
msgid ""
"Python 2.6 also sees a number of improvements and bugfixes throughout the "
"source.  A search through the change logs finds there were 259 patches "
"applied and 612 bugs fixed between Python 2.5 and 2.6.  Both figures are "
"likely to be underestimates."
msgstr ""
"Python 2.6 ではさらに、たくさんの改善とバグフィックスがソースコードのありとあ"
"らゆる場所に見られます。Python 2.5 から 2.6 の変更ログを手繰ってみると、低く"
"見積もっても、適用されたパッチは 259、フィックスされたバグは 612 にのぼりま"
"す。"

#: ../../whatsnew/2.6.rst:74
msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you "
"should refer to the documentation for Python 2.6. If you want to understand "
"the rationale for the design and implementation, refer to the PEP for a "
"particular new feature. Whenever possible, \"What's New in Python\" links to "
"the bug/patch item for each change."
msgstr ""
"このドキュメントは新機能の完全な詳細を提供するのではなくて、簡易な概要を提供"
"することを目的にしています。完全な詳細が知りたければ、 Python 2.6 のドキュメ"
"ントを参照してください。設計と実装の根拠を理解したい場合は、新機能に関する "
"PEP を参照してください。可能な限り、 \"What’s New in Python\" は各変更の bug "
"や patch に対してリンクしています。"

#: ../../whatsnew/2.6.rst:90
msgid "Python 3.0"
msgstr "Python 3.0"

#: ../../whatsnew/2.6.rst:92
msgid ""
"The development cycle for Python versions 2.6 and 3.0 was synchronized, with "
"the alpha and beta releases for both versions being made on the same days.  "
"The development of 3.0 has influenced many features in 2.6."
msgstr ""
"Python 2.6 と 3.0 の開発サイクルは同期していました。両バージョンのアルファ、"
"ベータリリースは同じ日にリリースされています。3.0 の開発は 2.6 の多くの機能に"
"影響を与えました。"

#: ../../whatsnew/2.6.rst:97
msgid ""
"Python 3.0 is a far-ranging redesign of Python that breaks compatibility "
"with the 2.x series.  This means that existing Python code will need some "
"conversion in order to run on Python 3.0.  However, not all the changes in "
"3.0 necessarily break compatibility.  In cases where new features won't "
"cause existing code to break, they've been backported to 2.6 and are "
"described in this document in the appropriate place.  Some of the 3.0-"
"derived features are:"
msgstr ""
"Python 3.0 は、2.x シリーズとの互換性を破壊する、広範囲な再設計です。これは、"
"Python 3.0 で動作させるためには既存のコードに何らかの変換が必要なことを意味し"
"ています。しかしながら、必ずしも全ての 3.0 での変更が互換性を破壊するわけでは"
"ありません。新機能が既存のコードの破壊を引き起こさないケースにおいては、それ"
"らは 2.6 にバックポートされました。これらについてはこのドキュメントの適切な場"
"所に記載しています。3.0 由来の機能の一部としては以下があります:"

#: ../../whatsnew/2.6.rst:106
msgid ""
"A :meth:`__complex__` method for converting objects to a complex number."
msgstr "オブジェクトを複素数(虚数)に変換する :meth:`__complex__` メソッド。"

#: ../../whatsnew/2.6.rst:107
msgid "Alternate syntax for catching exceptions: ``except TypeError as exc``."
msgstr ""
"例外の捕捉の、これまでとは別の文法の追加: ``except TypeError as exc`` 。"

#: ../../whatsnew/2.6.rst:108
msgid ""
"The addition of :func:`functools.reduce` as a synonym for the built-in :func:"
"`reduce` function."
msgstr ""
"組み込み関数 :func:`reduce` への別名としての :func:`functools.reduce` の追"
"加。"

#: ../../whatsnew/2.6.rst:111
msgid ""
"Python 3.0 adds several new built-in functions and changes the semantics of "
"some existing builtins.  Functions that are new in 3.0 such as :func:`bin` "
"have simply been added to Python 2.6, but existing builtins haven't been "
"changed; instead, the :mod:`future_builtins` module has versions with the "
"new 3.0 semantics.  Code written to be compatible with 3.0 can do ``from "
"future_builtins import hex, map`` as necessary."
msgstr ""
"Python 3.0 はいくつかの新しい組み込み関数を追加し、また、いくつかの既存の組み"
"込み関数では意味を変更しています。Python 3.0 での新しい組み込み関数、例えば :"
"func:`bin` などは単純に 2.6 に追加されましたが、既存のものはそうせずに、代わ"
"りに :mod:`future_builtins` モジュールに 3.0 版のものを追加しています。3.0 と"
"互換性を持ちたいコードでは、必要に応じて ``from future_builtins import hex, "
"map`` などとすることが出来ます。"

#: ../../whatsnew/2.6.rst:119
msgid ""
"A new command-line switch, :option:`!-3`, enables warnings about features "
"that will be removed in Python 3.0.  You can run code with this switch to "
"see how much work will be necessary to port code to 3.0.  The value of this "
"switch is available to Python code as the boolean variable :data:`sys."
"py3kwarning`, and to C extension code as :c:data:`Py_Py3kWarningFlag`."
msgstr ""
"新しいコマンドラインオプション :option:`!-3` で、Python 3.0 で削除される機能"
"についての警告を受け取ることが出来ます。このスイッチで、3.0 にコードを移植す"
"るためにはどの程度の仕事が必要になるのか知ることが出来るでしょう。この値は "
"Python コードからもアクセス出来て、ブーリアン値 :data:`sys.py3kwarning` と、"
"C 拡張 API では :c:data:`Py_Py3kWarningFlag` です。"

#: ../../whatsnew/2.6.rst:128
msgid ""
"The 3xxx series of PEPs, which contains proposals for Python 3.0. :pep:"
"`3000` describes the development process for Python 3.0. Start with :pep:"
"`3100` that describes the general goals for Python 3.0, and then explore the "
"higher-numbered PEPS that propose specific features."
msgstr ""
"Python 3.0 についての提案を含む PEP は 3xxx シリーズにあります。 :pep:`3000` "
"は Python 3.0 の開発プロセスについて記述しています。Python 3.0 の全般的な目標"
"について記述している :pep:`3100` から始めて、個別の機能についての提案のこれよ"
"り番号が高い PEP を探索してみてください。"

#: ../../whatsnew/2.6.rst:136
msgid "Changes to the Development Process"
msgstr "開発プロセスに関する変更"

#: ../../whatsnew/2.6.rst:138
msgid ""
"While 2.6 was being developed, the Python development process underwent two "
"significant changes: we switched from SourceForge's issue tracker to a "
"customized Roundup installation, and the documentation was converted from "
"LaTeX to reStructuredText."
msgstr ""
"2.6 の開発の間で、Python 開発プロセスは 2 つの重要な変更を経験しました: "
"SourceForge の課題トラッカーから、カスタイマイズした Roundup インストレーショ"
"ンに乗り換えました。また、ドキュメントは LaTeX から reStructuredText に変換し"
"ました。"

#: ../../whatsnew/2.6.rst:145
msgid "New Issue Tracker: Roundup"
msgstr "新しい課題トラッカー: Roundup"

#: ../../whatsnew/2.6.rst:147
msgid ""
"For a long time, the Python developers had been growing increasingly annoyed "
"by SourceForge's bug tracker.  SourceForge's hosted solution doesn't permit "
"much customization; for example, it wasn't possible to customize the life "
"cycle of issues."
msgstr ""
"もう随分長いこと Python 開発者たちは、SourceForge のバグトラッカーにイライラ"
"を高め続けてきました。SourceForge がホストするソリューションには全くカスタマ"
"イズの余地がなく、たとえば課題のライフサイクルをカスタマイズ出来ませんでし"
"た。"

#: ../../whatsnew/2.6.rst:152
msgid ""
"The infrastructure committee of the Python Software Foundation therefore "
"posted a call for issue trackers, asking volunteers to set up different "
"products and import some of the bugs and patches from SourceForge.  Four "
"different trackers were examined: `Jira <https://www.atlassian.com/software/"
"jira/>`__, `Launchpad <https://launchpad.net/>`__, `Roundup <http://roundup."
"sourceforge.net/>`__, and `Trac <https://trac.edgewall.org/>`__. The "
"committee eventually settled on Jira and Roundup as the two candidates.  "
"Jira is a commercial product that offers no-cost hosted instances to free-"
"software projects; Roundup is an open-source project that requires "
"volunteers to administer it and a server to host it."
msgstr ""
"そのようなわけで、Python Software Foundation のインフラ委員会はボランティアた"
"ちに課題トラッカーについて、異なるプロダクトのセットアップをし、SourceForge "
"からバグ報告とパッチのインポートをする依頼の呼び掛けをしました。4 つのトラッ"
"カーが試されました: `Jira <https://www.atlassian.com/software/jira/>`__, "
"`Launchpad <https://launchpad.net>`__, `Roundup <http://roundup.sourceforge."
"net/>`__, `Trac <https://trac.edgewall.org/>`__ です。委員会は結果として "
"Jira と Roundup の 2 つを候補に据えました。Jira はフリーソフトウェアプロジェ"
"クトの無償でのホストが可能な商用製品です; Roundup はそれを運営するボランティ"
"アとそれをホストするサーバが必要なオープンソースプロダクトです。"

#: ../../whatsnew/2.6.rst:166
msgid ""
"After posting a call for volunteers, a new Roundup installation was set up "
"at https://bugs.python.org.  One installation of Roundup can host multiple "
"trackers, and this server now also hosts issue trackers for Jython and for "
"the Python web site.  It will surely find other uses in the future.  Where "
"possible, this edition of \"What's New in Python\" links to the bug/patch "
"item for each change."
msgstr ""
"ボランティアへの呼び掛けののち、新しい Roundup インストレーションが https://"
"bugs.python.org にセットアップされました。Roundup の一つのインストレーション"
"は複数のトラッカーをホスト出来るため、このサーバは今では Jython と Python "
"ウェブサイトのための課題トラッカーもホストしています。間違いなく将来はほかの"
"ものもホストするでしょう。可能な場所では、\"What's New in Python\" のこのエ"
"ディションでは、それぞれの変更についてのバグ/パッチの Roundup アイテムにリン"
"クします。"

#: ../../whatsnew/2.6.rst:174
msgid ""
"Hosting of the Python bug tracker is kindly provided by `Upfront Systems "
"<http://www.upfrontsoftware.co.za>`__ of Stellenbosch, South Africa.  Martin "
"von Löwis put a lot of effort into importing existing bugs and patches from "
"SourceForge; his scripts for this import operation are at http://svn.python."
"org/view/tracker/importer/ and may be useful to other projects wishing to "
"move from SourceForge to Roundup."
msgstr ""
"Python バグトラッカーのホスティングは、南アフリカの Stellenbosch による "
"`Upfront Systems <http://www.upfrontsoftware.co.za>`__ が快く提供してくれてい"
"ます。Martin von Löwis が SourceForge からバグ報告とパッチをインポートするの"
"に多大な労力を払いました; 彼によるこのインポート操作のためのスクリプトは "
"http://svn.python.org/view/tracker/importer/ にあります。これは SourceForge "
"から Roundup へ移行したいと考えているほかのプロジェクトにも役に立つでしょう。"

#: ../../whatsnew/2.6.rst:185
msgid "https://bugs.python.org"
msgstr "https://bugs.python.org"

#: ../../whatsnew/2.6.rst:185
msgid "The Python bug tracker."
msgstr "Python のバグトラッカー。"

#: ../../whatsnew/2.6.rst:188
msgid "http://bugs.jython.org:"
msgstr "http://bugs.jython.org:"

#: ../../whatsnew/2.6.rst:188
msgid "The Jython bug tracker."
msgstr "Jython のバグトラッカー。"

#: ../../whatsnew/2.6.rst:191
msgid "http://roundup.sourceforge.net/"
msgstr "http://roundup.sourceforge.net/"

#: ../../whatsnew/2.6.rst:191
msgid "Roundup downloads and documentation."
msgstr "Roundup のダウンロードとドキュメント。"

#: ../../whatsnew/2.6.rst:193
msgid "http://svn.python.org/view/tracker/importer/"
msgstr "http://svn.python.org/view/tracker/importer/"

#: ../../whatsnew/2.6.rst:194
msgid "Martin von Löwis's conversion scripts."
msgstr "Martin von Löwis の変換スクリプト。"

#: ../../whatsnew/2.6.rst:197
msgid "New Documentation Format: reStructuredText Using Sphinx"
msgstr ""
"新しいドキュメンテーションフォーマット: Sphinx を使っての reStructuredText "

#: ../../whatsnew/2.6.rst:199
msgid ""
"The Python documentation was written using LaTeX since the project started "
"around 1989.  In the 1980s and early 1990s, most documentation was printed "
"out for later study, not viewed online. LaTeX was widely used because it "
"provided attractive printed output while remaining straightforward to write "
"once the basic rules of the markup were learned."
msgstr ""
"Python のドキュメンテーションは、そのプロジェクトの開始した 1989 年頃より "
"LaTeX を使って書かれてきました。1980 年代と 1990 年代初期は、ほとんどのドキュ"
"メンテーションはあとで学習するために印刷されるもので、オンラインで見るもので"
"はありませんでした。LaTeX はとても魅惑的な印刷をしてくれるものですから、非常"
"に大変広く広く使われていましたが、一方では、学んだマークアップの基礎的なルー"
"ルで直裁的に、書いたらそれっきり、というものでもありました。"

#: ../../whatsnew/2.6.rst:206
msgid ""
"Today LaTeX is still used for writing publications destined for printing, "
"but the landscape for programming tools has shifted.  We no longer print out "
"reams of documentation; instead, we browse through it online and HTML has "
"become the most important format to support. Unfortunately, converting LaTeX "
"to HTML is fairly complicated and Fred L. Drake Jr., the long-time Python "
"documentation editor, spent a lot of time maintaining the conversion "
"process.  Occasionally people would suggest converting the documentation "
"into SGML and later XML, but performing a good conversion is a major task "
"and no one ever committed the time required to finish the job."
msgstr ""
"こんにちにおいてもなお、印刷を命題とする出版において LaTeX は健在といえど、プ"
"ログラミングの道具立ての風景は変わりました。わたしたちはもはやドキュメンテー"
"ションの紙束をプリントアウトはしません。代わりにオンラインでブラウズします。"
"ですから HTML は、サポートすべき最も重要なフォーマットになりました。悲しいか"
"な、 LaTeX から HTML への変換は気が狂うほどに複雑で、Fred L. Drake Jr.、彼は"
"長らく Python ドキュメンテーションのエディターを務めていますが、彼はその変換"
"処理の保守に多大な時間を浪費していたのです。ときおり人々はドキュメンテーショ"
"ンを SGML に変換して、それから XML にすればいいでしょ、と持ちかけるのですが、"
"良い変換を達成することにとらわれて、誰一人として仕事を完遂させようと時間を捧"
"げることはしませんでした。"

#: ../../whatsnew/2.6.rst:217
msgid ""
"During the 2.6 development cycle, Georg Brandl put a lot of effort into "
"building a new toolchain for processing the documentation.  The resulting "
"package is called Sphinx, and is available from http://sphinx-doc.org/."
msgstr ""
"2.6 の開発サイクルの期間に、Georg Brandl はドキュメンテーションの処理のための"
"新たなツールチェインの構築に多大な労力を払いました。\n"
"その成果であるパッケージは Sphinx と呼ばれ、 http://sphinx-doc.org/ で入手出"
"来ます。"

#: ../../whatsnew/2.6.rst:222
msgid ""
"Sphinx concentrates on HTML output, producing attractively styled and modern "
"HTML; printed output is still supported through conversion to LaTeX.  The "
"input format is reStructuredText, a markup syntax supporting custom "
"extensions and directives that is commonly used in the Python community."
msgstr ""
"Sphinx は HTML 出力に集中し、人を惹きつけるスタイルでモダンな HTML を生成しま"
"す。印刷出力は LaTeX への変換を経由することで健在です。入力のフォーマットは "
"reStructuredText です。これはカスタムな拡張とディレクティブをサポートしている"
"マークアップ文法で、Python コミュニティでは広く使われています。"

#: ../../whatsnew/2.6.rst:228
msgid ""
"Sphinx is a standalone package that can be used for writing, and almost two "
"dozen other projects (`listed on the Sphinx web site <https://www.sphinx-doc."
"org/en/master/examples.html>`__) have adopted Sphinx as their documentation "
"tool."
msgstr ""
"Sphinx は執筆に使えるスタンドアロンのパッケージです。そして 2 ダースに届かん"
"ばかりのプロジェクト (`Sphinx ウェブサイトのリスト <https://www.sphinx-doc."
"org/en/master/examples.html>`__) が Sphinx をドキュメンテーションツールとして"
"採用しました。"

#: ../../whatsnew/2.6.rst:236
msgid "`Documenting Python <https://devguide.python.org/documenting/>`__"
msgstr "`Documenting Python <https://devguide.python.org/documenting/>`__"

#: ../../whatsnew/2.6.rst:236
msgid "Describes how to write for Python's documentation."
msgstr "Python ドキュメントの書き方について書いています。"

#: ../../whatsnew/2.6.rst:239
msgid "`Sphinx <http://sphinx-doc.org/>`__"
msgstr "`Sphinx <http://sphinx-doc.org/>`__"

#: ../../whatsnew/2.6.rst:239
msgid "Documentation and code for the Sphinx toolchain."
msgstr "Sphinx ツールチェインのドキュメントとコードです。"

#: ../../whatsnew/2.6.rst:241
msgid "`Docutils <http://docutils.sourceforge.net>`__"
msgstr "`Docutils <http://docutils.sourceforge.net>`__"

#: ../../whatsnew/2.6.rst:242
msgid "The underlying reStructuredText parser and toolset."
msgstr ""
"縁の下の力持ちになっている reStructuredText のパーサとツールセットです。"

#: ../../whatsnew/2.6.rst:248
msgid "PEP 343: The 'with' statement"
msgstr "PEP 343: \"with\" ステートメント"

#: ../../whatsnew/2.6.rst:250
msgid ""
"The previous version, Python 2.5, added the ':keyword:`with`' statement as "
"an optional feature, to be enabled by a ``from __future__ import "
"with_statement`` directive.  In 2.6 the statement no longer needs to be "
"specially enabled; this means that :keyword:`!with` is now always a "
"keyword.  The rest of this section is a copy of the corresponding section "
"from the \"What's New in Python 2.5\" document; if you're familiar with the "
"':keyword:`!with`' statement from Python 2.5, you can skip this section."
msgstr ""
"Python 2.5 では、  ':keyword:`with`' 文が ``from __future__ import "
"with_statement`` ディレクティブで有効に出来るオプションの機能として追加されま"
"した。2.6 では ':keyword:`!with`' 文は特別に有効化する必要なく、もういつでも"
"そこにあります。このセクションの残りの部分は \"What's New in Python 2.5\" の"
"対応するセクションからの丸々コピーですので、2.5 で ':keyword:`!with`' 文に馴"
"染んでいるなら読み飛ばしてもらって結構です。"

#: ../../whatsnew/2.6.rst:259
msgid ""
"The ':keyword:`with`' statement clarifies code that previously would use "
"``try...finally`` blocks to ensure that clean-up code is executed.  In this "
"section, I'll discuss the statement as it will commonly be used.  In the "
"next section, I'll examine the implementation details and show how to write "
"objects for use with this statement."
msgstr ""
"':keyword:`with`' ステートメントは、以前なら後片付けが実行されるのを確実にす"
"るために ``try...finally`` ブロックを使ったであろうようなコードを、より単純明"
"快にします。このセクションでは、このステートメントの普通の使い方を説明しま"
"す。続くセクションでは実装の詳細を調べ、このステートメントとともに使うために"
"オブジェクトをどうやって書けば良いかをお見せします。"

#: ../../whatsnew/2.6.rst:265
msgid ""
"The ':keyword:`with`' statement is a control-flow structure whose basic "
"structure is::"
msgstr ""
"':keyword:`with`' ステートメントは基本構造が以下となる制御フロー構造です::"

#: ../../whatsnew/2.6.rst:271
msgid ""
"The expression is evaluated, and it should result in an object that supports "
"the context management protocol (that is, has :meth:`__enter__` and :meth:"
"`__exit__` methods)."
msgstr ""
"expression は評価されて結果がコンテキスト管理プロトコルをサポートするオブジェ"
"クトにならなければなりません (具体的にはメソッド :meth:`__enter__` と :meth:"
"`__exit__` を持つオブジェクト)。 ( 訳注: Python ドキュメント全体で context "
"manager protocol と context management protocol とで不統一。同じものです。 )"

#: ../../whatsnew/2.6.rst:275
msgid ""
"The object's :meth:`__enter__` is called before *with-block* is executed and "
"therefore can run set-up code. It also may return a value that is bound to "
"the name *variable*, if given.  (Note carefully that *variable* is *not* "
"assigned the result of *expression*.)"
msgstr ""
"*with-block* が呼び出される前に、 :meth:`__enter__` が呼ばれるので、セット"
"アップコードをそこで実行出来ます。それは *variable* 名(与えられた場合)に束縛"
"されることになる値も返します(注意深く読んで下さい、つまり *variable* には "
"*expression* の結果が代入される *のではない* のです)。"

#: ../../whatsnew/2.6.rst:280
msgid ""
"After execution of the *with-block* is finished, the object's :meth:"
"`__exit__` method is called, even if the block raised an exception, and can "
"therefore run clean-up code."
msgstr ""
"*with-block* ブロックの実行が終了後、ブロックが例外を送出する場合であろうとオ"
"ブジェクトの :meth:`__exit__` が呼び出されますので、ここで後片付けコードを実"
"行出来ます。"

#: ../../whatsnew/2.6.rst:284
msgid ""
"Some standard Python objects now support the context management protocol and "
"can be used with the ':keyword:`with`' statement. File objects are one "
"example::"
msgstr ""
"いくつかの Python 標準オブジェクトが既にコンテキスト管理プロトコルをサポート"
"していて、 ':keyword:`with`' とともに使えます。ファイルオブジェクトがその一例"
"です::"

#: ../../whatsnew/2.6.rst:292
msgid ""
"After this statement has executed, the file object in *f* will have been "
"automatically closed, even if the :keyword:`for` loop raised an exception "
"part-way through the block."
msgstr ""
"このステートメントが実行し終わったあかつきには、 *f* のファイルオブジェクト"
"は、たとえ :keyword:`for` ループが道半ばにして例外と成り果てても、自動的にク"
"ローズされます。"

#: ../../whatsnew/2.6.rst:298
msgid ""
"In this case, *f* is the same object created by :func:`open`, because :meth:"
"`file.__enter__` returns *self*."
msgstr ""
"このケースでは、 *f* は :func:`open` が作ったオブジェクトと同じです。これは"
"ファイルオブジェクトの :meth:`file.__enter__` が *self* を返しているからで"
"す。"

#: ../../whatsnew/2.6.rst:301
msgid ""
"The :mod:`threading` module's locks and condition variables  also support "
"the ':keyword:`with`' statement::"
msgstr ""
":mod:`threading` モジュールのロック・条件変数でも ':keyword:`with`' ステート"
"メントの恩恵にあずかれます::"

#: ../../whatsnew/2.6.rst:309
msgid ""
"The lock is acquired before the block is executed and always released once  "
"the block is complete."
msgstr ""
"ブロックが実行される前にロックが獲得されて、ブロックが完了するやいなや必ず解"
"放されます。"

#: ../../whatsnew/2.6.rst:312
msgid ""
"The :func:`localcontext` function in the :mod:`decimal` module makes it easy "
"to save and restore the current decimal context, which encapsulates the "
"desired precision and rounding characteristics for computations::"
msgstr ""
":mod:`decimal` モジュール内の :func:`localcontext` 関数は現在の decimal のコ"
"ンテキスト (計算の望みの精度と丸め特性をカプセル化しています) を保存しておい"
"てあとで元に戻すのを簡単にしてくれます::"

#: ../../whatsnew/2.6.rst:331
msgid "Writing Context Managers"
msgstr "コンテキストマネージャを書く"

#: ../../whatsnew/2.6.rst:333
msgid ""
"Under the hood, the ':keyword:`with`' statement is fairly complicated. Most "
"people will only use ':keyword:`!with`' in company with existing objects and "
"don't need to know these details, so you can skip the rest of this section "
"if you like.  Authors of new objects will need to understand the details of "
"the underlying implementation and should keep reading."
msgstr ""
"中身を紐解いてみれば、 ':keyword:`with`' ステートメントはけっこう入り組んでい"
"ます。ほとんどの人にとっては、既存のオブジェクトを ':keyword:`!with`' ととも"
"に使うだけのことでその詳細を知る必要は無いので、それで良いならこのセクション"
"の残りの部分は読み飛ばして結構です。新しいオブジェクトの作者は基礎となる実装"
"の詳細について知る必要があるので、このまま読み進めるべきです。"

#: ../../whatsnew/2.6.rst:339
msgid "A high-level explanation of the context management protocol is:"
msgstr "コンテキスト管理プロトコルの高度な説明はこんなです:"

#: ../../whatsnew/2.6.rst:341
msgid ""
"The expression is evaluated and should result in an object called a "
"\"context manager\".  The context manager must have :meth:`__enter__` and :"
"meth:`__exit__` methods."
msgstr ""
"expression は評価されて、 \"コンテキストマネージャ(context manager)\"  になら"
"なければなりません。コンテキストマネージャは :meth:`__enter__` メソッドと :"
"meth:`__exit__` メソッドを持っていなければなりません。"

#: ../../whatsnew/2.6.rst:345
msgid ""
"The context manager's :meth:`__enter__` method is called.  The value "
"returned is assigned to *VAR*.  If no ``as VAR`` clause is present, the "
"value is simply discarded."
msgstr ""
"コンテキストマネージャの :meth:`__enter__` メソッドが呼び出されます。これの戻"
"り値は *VAR* に代入されます。 ``as VAR`` 節がない場合は、この値は単に捨てられ"
"ます。"

#: ../../whatsnew/2.6.rst:349
msgid "The code in *BLOCK* is executed."
msgstr "*BLOCK* 内のコードが実行されます。"

#: ../../whatsnew/2.6.rst:351
msgid ""
"If *BLOCK* raises an exception, the context manager's :meth:`__exit__` "
"method is called with three arguments, the exception details (``type, value, "
"traceback``, the same values returned by :func:`sys.exc_info`, which can "
"also be ``None`` if no exception occurred).  The method's return value "
"controls whether an exception is re-raised: any false value re-raises the "
"exception, and ``True`` will result in suppressing it.  You'll only rarely "
"want to suppress the exception, because if you do the author of the code "
"containing the ':keyword:`with`' statement will never realize anything went "
"wrong."
msgstr ""
"*BLOCK* が例外を起こした場合、コンテキストマネージャの :meth:`__exit__` メ"
"ソッドが 3 つの引数とともに呼び出されます。これは例外の詳細です (``type, "
"value, traceback``, これは :func:`sys.exc_info` が返す値と同じで、例外が起こ"
"らなければ ``None`` です)。そのメソッドの戻り値は例外を再送出するかどうかを制"
"御します: 全ての偽の値ではその例外が再送出され、 ``True`` では揉み消します。"
"例外を揉み消すなど滅多なことでは欲しいと思わないでしょう。もしそうしてしまっ"
"たら、 ':keyword:`with`' ステートメントを含んだコードの作者は何か間違ったこと"
"が起こったことに決して気付かないですから。"

#: ../../whatsnew/2.6.rst:360
msgid ""
"If *BLOCK* didn't raise an exception,  the :meth:`__exit__` method is still "
"called, but *type*, *value*, and *traceback* are all ``None``."
msgstr ""
"*BLOCK* が例外を起こさなかった場合も :meth:`__exit__` メソッドが呼び出されま"
"す。ただし *type*, *value*, *traceback* は全て ``None`` です。"

#: ../../whatsnew/2.6.rst:363
msgid ""
"Let's think through an example.  I won't present detailed code but will only "
"sketch the methods necessary for a database that supports transactions."
msgstr ""
"例を通じて考えましょう。枝葉末節を含んだ完璧なコードを提示しようとは思いませ"
"んが、データベースのためにトランザクションをサポートするのに必要となるメソッ"
"ドの書き方についてスケッチしてみようと思います。"

#: ../../whatsnew/2.6.rst:366
msgid ""
"(For people unfamiliar with database terminology: a set of changes to the "
"database are grouped into a transaction.  Transactions can be either "
"committed, meaning that all the changes are written into the database, or "
"rolled back, meaning that the changes are all discarded and the database is "
"unchanged.  See any database textbook for more information.)"
msgstr ""
"(データベース用語に不慣れな方へ:データベースへの変更のセットは、トランザク"
"ションという単位でグループ化されています。トランザクションは「コミット」され"
"る、その意味は、全ての変更がデータベースに書き込まれることです、もしくは"
"「ロールバック」される、この場合全ての変更が捨てられてデータベースが変更され"
"ません、この 2 つのいずれかになりえます。詳しくはなにかデータベースの著述を読"
"んで下さい。)"

#: ../../whatsnew/2.6.rst:372
msgid ""
"Let's assume there's an object representing a database connection. Our goal "
"will be to let the user write code like this::"
msgstr ""
"データベース接続を表現するオブジェクトがあると仮定しましょう。私たちの目標"
"は、そのオブジェクトのユーザがこのように書けるようになることです::"

#: ../../whatsnew/2.6.rst:381
msgid ""
"The transaction should be committed if the code in the block runs flawlessly "
"or rolled back if there's an exception. Here's the basic interface for :"
"class:`DatabaseConnection` that I'll assume::"
msgstr ""
"トランザクションはブロック内のコードがつつがなく終了すればコミットし、例外が"
"発生すればロールバックすべきです。私が思い描いている :class:"
"`DatabaseConnection` の基本的なインターフェイスはこんなです::"

#: ../../whatsnew/2.6.rst:394
msgid ""
"The :meth:`__enter__` method is pretty easy, having only to start a new "
"transaction.  For this application the resulting cursor object would be a "
"useful result, so the method will return it.  The user can then add ``as "
"cursor`` to their ':keyword:`with`' statement to bind the cursor to a "
"variable name. ::"
msgstr ""
":meth:`__enter__` メソッドはとっても簡単で、トランザクションを開始する必要が"
"あるだけです。このアプリケーションでは、カーソルオブジェクトを結果とすること"
"が有用なので、メソッドはそれを返しましょう。ユーザはこれにより ``as cursor`` "
"をその ':keyword:`with`' ステートメントにつけて、そのカーソルを変数名に束縛で"
"きます::"

#: ../../whatsnew/2.6.rst:406
msgid ""
"The :meth:`__exit__` method is the most complicated because it's where most "
"of the work has to be done.  The method has to check if an exception "
"occurred.  If there was no exception, the transaction is committed.  The "
"transaction is rolled back if there was an exception."
msgstr ""
":meth:`__exit__` メソッドはそれがほとんどの仕事をしなければならない場所なの"
"で、もっと複雑です。メソッドは例外が起こったのかどうかをチェックし、例外が起"
"こっていなければトランザクションをコミットし、例外があればロールバックしなけ"
"ればいけません。"

#: ../../whatsnew/2.6.rst:411
msgid ""
"In the code below, execution will just fall off the end of the function, "
"returning the default value of ``None``.  ``None`` is false, so the "
"exception will be re-raised automatically.  If you wished, you could be more "
"explicit and add a :keyword:`return` statement at the marked location. ::"
msgstr ""
"下記のコード内では実行がメソッドの末尾まで落ちていって、なのでデフォルトの "
"``None`` 返却になります。 ``None`` は偽なので、例外は自動的に再送出されます。"
"望むならもっと明示的に、コメントでマークした部分で :keyword:`return` 文を書い"
"てもよろしいです::"

#: ../../whatsnew/2.6.rst:431
msgid "The contextlib module"
msgstr "contextlib モジュール"

#: ../../whatsnew/2.6.rst:433
msgid ""
"The :mod:`contextlib` module provides some functions and a decorator that "
"are useful when writing objects for use with the ':keyword:`with`' statement."
msgstr ""
":mod:`contextlib` モジュールは、 ':keyword:`with`' ステートメントで使えるオブ"
"ジェクトを書く際に便利ないくつかの関数とデコレータを提供しています。"

#: ../../whatsnew/2.6.rst:436
msgid ""
"The decorator is called :func:`contextmanager`, and lets you write a single "
"generator function instead of defining a new class.  The generator should "
"yield exactly one value.  The code up to the :keyword:`yield` will be "
"executed as the :meth:`__enter__` method, and the value yielded will be the "
"method's return value that will get bound to the variable in the ':keyword:"
"`with`' statement's :keyword:`!as` clause, if any.  The code after the :"
"keyword:`!yield` will be executed in the :meth:`__exit__` method.  Any "
"exception raised in the block will be raised by the :keyword:`!yield` "
"statement."
msgstr ""
"デコレータは :func:`contextmanager` という名前で、新たにクラスを書く代わりに"
"一つジェネレータを書けば済むようにするものです。そのジェネレータは正確に一つ"
"の値を yield しなければなりません。 :keyword:`yield` より上の部分のコードが :"
"meth:`__enter__` メソッドとして実行されます。yield した値は :meth:"
"`__enter__` メソッドの戻り値となって、 ':keyword:`with`' ステートメントの :"
"keyword:`!as` 節があれば、その変数に束縛されます。 :keyword:`!yield` に続く"
"コードが :meth:`__exit__` メソッド内で実行されます。ブロック内では任意の例外"
"が :keyword:`!yield` ステートメントによって引き起こされます。"

#: ../../whatsnew/2.6.rst:445
msgid ""
"Using this decorator, our database example from the previous section could "
"be written as::"
msgstr ""
"このデコレータを使って、前セクションの私たちのデータベースの例はこのように書"
"けます::"

#: ../../whatsnew/2.6.rst:465
msgid ""
"The :mod:`contextlib` module also has a ``nested(mgr1, mgr2, ...)`` function "
"that combines a number of context managers so you don't need to write nested "
"':keyword:`with`' statements.  In this example, the single ':keyword:`!"
"with`' statement both starts a database transaction and acquires a thread "
"lock::"
msgstr ""
":mod:`contextlib` モジュールには ``nested(mgr1, mgr2, ...)`` 関数もあり、この"
"関数はたくさんのコンテキストマネージャを組み合わせることができて、入れ子の ':"
"keyword:`with`' を書く必要性をなくしてくれます。この例では、単一の ':keyword:"
"`!with`' でデータベーストランザクション開始とスレッドのロック獲得の両方をやっ"
"てのけています::"

#: ../../whatsnew/2.6.rst:474
msgid ""
"Finally, the :func:`closing` function returns its argument so that it can be "
"bound to a variable, and calls the argument's ``.close()`` method at the end "
"of the block. ::"
msgstr ""
"最後になりますが、 :func:`closing` 関数はその与えた引数をそのまま返して変数に"
"束縛出来るようにし、かつブロックの終了で、与えた引数が持つ ``.close()`` を呼"
"び出します::"

#: ../../whatsnew/2.6.rst:492
msgid ":pep:`343` - The \"with\" statement"
msgstr ":pep:`343` - \"with\" ステートメント"

#: ../../whatsnew/2.6.rst:489
msgid ""
"PEP written by Guido van Rossum and Nick Coghlan; implemented by Mike Bland, "
"Guido van Rossum, and Neal Norwitz.  The PEP shows the code generated for a "
"':keyword:`with`' statement, which can be helpful in learning how the "
"statement works."
msgstr ""
"PEP は Guido van Rossum と Nick Coghlan によって書かれ、Mike Bland、 Guido "
"van Rossum、Neal Norwitz により実装されました。この PEP は ':keyword:`with`' "
"ステートメントによって生成されるコードを見せてくれるので、このステートメント"
"がどうやって動作するのかを知るのに役立ちます。"

#: ../../whatsnew/2.6.rst:494
msgid "The documentation  for the :mod:`contextlib` module."
msgstr ":mod:`contextlib` モジュールについてのドキュメント。"

#: ../../whatsnew/2.6.rst:501
msgid "PEP 366: Explicit Relative Imports From a Main Module"
msgstr "PEP 366: メインモジュールからの明示的相対インポート"

#: ../../whatsnew/2.6.rst:503
msgid ""
"Python's :option:`-m` switch allows running a module as a script. When you "
"ran a module that was located inside a package, relative imports didn't work "
"correctly."
msgstr ""
"Python のオプション :option:`-m` で、モジュールをスクリプトとして実行出来ま"
"す。パッケージ内のモジュールを実行する際に、相対インポートが正しく動作してい"
"ませんでした。"

#: ../../whatsnew/2.6.rst:507
msgid ""
"The fix for Python 2.6 adds a :attr:`__package__` attribute to modules.  "
"When this attribute is present, relative imports will be relative to the "
"value of this attribute instead of the :attr:`__name__` attribute."
msgstr ""
"Python 2.6 でのそれについてのフィックスは、モジュールに :attr:`__package__` "
"属性を追加するというものです。この属性がある場合は相対インポートは :attr:"
"`__name__` 属性の代わりにこの属性の値からの相対でインポートします。"

#: ../../whatsnew/2.6.rst:512
msgid ""
"PEP 302-style importers can then set :attr:`__package__` as necessary. The :"
"mod:`runpy` module that implements the :option:`-m` switch now does this, so "
"relative imports will now work correctly in scripts running from inside a "
"package."
msgstr ""
"PEP 302 スタイルのインポーターはその結果 :attr:`__package__` を必要に応じて設"
"定出来ます。 :option:`-m` スイッチを実装している :mod:`runpy` モジュールは今"
"はこれをするので、パッケージ内のモジュール実行内の相対インポートは、今では正"
"しく動作します。(--- 訳注: このセクションの言いたいことの結論がわからない方は"
"いないと思いますが、細かいところでこの翻訳を行っている 2015 年ではわからなく"
"なっているところがあるので補足しておきます。 :attr:`__package__` 属性のくだり"
"ですが、現在となっては「2.5 ではこれを設定していなかった」のかどうか簡単には"
"確認は出来ないですが、言語リファレンスによればローダが :attr:`__package__` を"
"セットするのはオプションだがセットすべき、と書かれています。2.6 で行われたの"
"は、おそらく :attr:`__package__` の用法が :mod:`runpy` きっかけで整理された、"
"ということではないかと思います。---)"

#: ../../whatsnew/2.6.rst:522
msgid "PEP 370: Per-user ``site-packages`` Directory"
msgstr "PEP 370: ユーザごとの ``site-packages`` ディレクトリ"

#: ../../whatsnew/2.6.rst:524
msgid ""
"When you run Python, the module search path ``sys.path`` usually includes a "
"directory whose path ends in ``\"site-packages\"``.  This directory is "
"intended to hold locally-installed packages available to all users using a "
"machine or a particular site installation."
msgstr ""
"Python を実行すると、モジュール検索パス ``sys.path`` にはパスが  ``\"site-"
"packages\"`` で終わるディレクトリが普通含まれます。このディレクトリは、ローカ"
"ルにインストールされる機器を使う全てのユーザが使えるパッケージあるいは固有の"
"サイトインストレーションを持つ場所として意図されています。"

#: ../../whatsnew/2.6.rst:529
msgid ""
"Python 2.6 introduces a convention for user-specific site directories. The "
"directory varies depending on the platform:"
msgstr ""
"Python 2.6 ではユーザ固有のサイトディレクトリのための決まりを導入しました。"
"ディレクトリはプラットフォームに依存して変わります。"

#: ../../whatsnew/2.6.rst:532
msgid "Unix and Mac OS X: :file:`~/.local/`"
msgstr "Unix と Mac OS X: :file:`~/.local/`"

#: ../../whatsnew/2.6.rst:533
msgid "Windows: :file:`%APPDATA%/Python`"
msgstr "Windows: :file:`%APPDATA%/Python`"

#: ../../whatsnew/2.6.rst:535
msgid ""
"Within this directory, there will be version-specific subdirectories, such "
"as :file:`lib/python2.6/site-packages` on Unix/Mac OS and :file:`Python26/"
"site-packages` on Windows."
msgstr ""
"このディレクトリ内にはバージョン固有のサブディレクトリが入ります。Unix/Mac "
"OS では  :file:`lib/python2.6/site-packages`  のように、Windows では :file:"
"`Python26/site-packages`  のように。"

#: ../../whatsnew/2.6.rst:539
msgid ""
"If you don't like the default directory, it can be overridden by an "
"environment variable.  :envvar:`PYTHONUSERBASE` sets the root directory used "
"for all Python versions supporting this feature.  On Windows, the directory "
"for application-specific data can be changed by setting the :envvar:"
"`APPDATA` environment variable.  You can also modify the :file:`site.py` "
"file for your Python installation."
msgstr ""
"このデフォルトディレクトリが好きでないなら、この機能をサポートする全ての "
"Python バージョンが使う環境変数 :envvar:`PYTHONUSERBASE` にルートディレクトリ"
"を指定することで上書き出来ます。Windows ではアプリケーション固有データの場所"
"を環境変数 :envvar:`APPDATA` で変更出来ます。また、あなたの Python インスト"
"レーションについての :file:`site.py` ファイルを修正することでも出来ます。"

#: ../../whatsnew/2.6.rst:546
msgid ""
"The feature can be disabled entirely by running Python with the :option:`-s` "
"option or setting the :envvar:`PYTHONNOUSERSITE` environment variable."
msgstr ""
"この機能は Python 起動時に :option:`-s` オプションを付けるか、環境変数 :"
"envvar:`PYTHONNOUSERSITE` をセットすることで完全に無効に出来ます。"

#: ../../whatsnew/2.6.rst:552
msgid ":pep:`370` - Per-user ``site-packages`` Directory"
msgstr ":pep:`370` - ユーザごとの ``site-packages`` ディレクトリ"

#: ../../whatsnew/2.6.rst:553
msgid "PEP written and implemented by Christian Heimes."
msgstr "PEP 著と実装 Christian Heimes."

#: ../../whatsnew/2.6.rst:561
msgid "PEP 371: The ``multiprocessing`` Package"
msgstr "PEP 371: ``multiprocessing`` パッケージ"

#: ../../whatsnew/2.6.rst:563
msgid ""
"The new :mod:`multiprocessing` package lets Python programs create new "
"processes that will perform a computation and return a result to the "
"parent.  The parent and child processes can communicate using queues and "
"pipes, synchronize their operations using locks and semaphores, and can "
"share simple arrays of data."
msgstr ""
"新しい :mod:`multiprocessing` により、Python プログラムが新たなプロセスを作成"
"して何か計算を実行させて結果を返させることが出来ます。親と子のプロセスは"
"キューとパイプを使って通信し、ロックとセマフォを使って同期し、単純なデータの"
"配列を共有出来ます。"

#: ../../whatsnew/2.6.rst:569
msgid ""
"The :mod:`multiprocessing` module started out as an exact emulation of the :"
"mod:`threading` module using processes instead of threads.  That goal was "
"discarded along the path to Python 2.6, but the general approach of the "
"module is still similar.  The fundamental class is the :class:`Process`, "
"which is passed a callable object and a collection of arguments.  The :meth:"
"`start` method sets the callable running in a subprocess, after which you "
"can call the :meth:`is_alive` method to check whether the subprocess is "
"still running and the :meth:`join` method to wait for the process to exit."
msgstr ""
":mod:`multiprocessing` モジュールは、 :mod:`threading` モジュールがスレッドの"
"代わりにプロセスを使ようになるだけのような、完全な模倣となるよう開始されまし"
"た。その目標は Python 2.6 へ向かう道のりを経て捨て去られはしましたが、モ"
"ジュールの一般的なアプローチはそれでも似ています。基礎的なクラスは :class:"
"`Process` です。これには呼び出し可能オブジェクトと引数のコレクションを渡しま"
"す。その :meth:`start` メソッドが渡された呼び出し可能オブジェクトをサブプロセ"
"スで実行するので、 :meth:`is_alive` メソッドを呼び出せばサブプロセスが実行中"
"かを知ることが出来、 :meth:`join` メソッドでそのプロセスが終了するのを待つこ"
"とが出来ます。"

#: ../../whatsnew/2.6.rst:579
msgid ""
"Here's a simple example where the subprocess will calculate a factorial.  "
"The function doing the calculation is written strangely so that it takes "
"significantly longer when the input argument is a multiple of 4."
msgstr ""
"ここに、サブプロセスが階乗を計算する例を示します。その計算をする関数はヘンテ"
"コリンに書かれていて、入力が 4 の倍数だととっても時間がかかるように仕組んであ"
"ります。"

#: ../../whatsnew/2.6.rst:616
msgid ""
"A :class:`~queue.Queue` is used to communicate the result of the factorial. "
"The :class:`~queue.Queue` object is stored in a global variable. The child "
"process will use the value of the variable when the child was created; "
"because it's a :class:`~queue.Queue`, parent and child can use the object to "
"communicate.  (If the parent were to change the value of the global "
"variable, the child's value would be unaffected, and vice versa.)"
msgstr ""
":class:`~queue.Queue` が factorial の結果を通信して返すのに使われています。 :"
"class:`~queue.Queue` オブジェクトはグローバル変数に格納されています。子プロセ"
"スは、子プロセスが作成された時点のその変数の値を使うことになります; :class:"
"`~queue.Queue` なので、親子はそのオブジェクトを通信のために使うことが出来ま"
"す。(プロセス作成後に親がグローバル変数 queue を差し替えても、子の値は左右さ"
"れませんし、逆もしかりです。)"

#: ../../whatsnew/2.6.rst:624
msgid ""
"Two other classes, :class:`Pool` and :class:`Manager`, provide higher-level "
"interfaces.  :class:`Pool` will create a fixed number of worker processes, "
"and requests can then be distributed to the workers by calling :meth:`apply` "
"or :meth:`apply_async` to add a single request, and :meth:`map` or :meth:"
"`map_async` to add a number of requests.  The following code uses a :class:"
"`Pool` to spread requests across 5 worker processes and retrieve a list of "
"results::"
msgstr ""
"2 つのほかのクラス :class:`Pool` と :class:`Manager` はハイレベルインターフェ"
"イスです。 :class:`Pool` では固定数のワーカープロセスを作ってワーカープロセス"
"にリクエストを配ることが出来ます。 :meth:`apply` または :meth:`apply_async` "
"メソッドで単体のリクエストを追加出来、 :meth:`map` または :meth:`map_async` "
"メソッドでたくさんのリクエストを追加出来ます。以下のコードでは :class:`Pool` "
"を使って 5 つのワーカープロセスにリクエストをばら撒き、結果のリストを回収しま"
"す::"

#: ../../whatsnew/2.6.rst:642
msgid "This produces the following output::"
msgstr "これは以下のような出力をします::"

#: ../../whatsnew/2.6.rst:651
msgid ""
"The other high-level interface, the :class:`Manager` class, creates a "
"separate server process that can hold master copies of Python data "
"structures.  Other processes can then access and modify these data "
"structures using proxy objects.  The following example creates a shared "
"dictionary by calling the :meth:`dict` method; the worker processes then "
"insert values into the dictionary.  (Locking is not done for you "
"automatically, which doesn't matter in this example. :class:`Manager`'s "
"methods also include :meth:`Lock`, :meth:`RLock`, and :meth:`Semaphore` to "
"create shared locks.)"
msgstr ""
"もう一方の方のハイレベルインターフェイス :class:`Manager` クラスは、Python "
"データ構造のマスターコピーを保持出来る、独立したひとつのサーバプロセスを作り"
"ます。ほかのプロセスたちは、これらデータ構造の読み書きと修正をプロキシオブ"
"ジェクトを使って行えます。続く例では、 :meth:`dict` メソッドを呼ぶことにより"
"共有辞書を作ります; ワーカープロセスはその辞書へ挿入します。(ロックは自動的に"
"は行われませんがこの例では問題ではありません。 :class:`Manager` のメソッドに"
"は :meth:`Lock`, :meth:`RLock`, :meth:`Semaphore` メソッドも含まれていて、共"
"有ロックを作るのに使えます。)"

#: ../../whatsnew/2.6.rst:695
msgid "This will produce the output::"
msgstr "これはこんな出力をするでしょう::"

#: ../../whatsnew/2.6.rst:706
msgid "The documentation for the :mod:`multiprocessing` module."
msgstr ":mod:`multiprocessing` モジュールについてのドキュメント。"

#: ../../whatsnew/2.6.rst:709
msgid ":pep:`371` - Addition of the multiprocessing package"
msgstr ":pep:`371` - multiprocessing パッケージの追加"

#: ../../whatsnew/2.6.rst:709
msgid ""
"PEP written by Jesse Noller and Richard Oudkerk; implemented by Richard "
"Oudkerk and Jesse Noller."
msgstr ""
"PEP 著 Jesse Noller と Richard Oudkerk; 実装 Richard Oudkerk と Jesse Noller."

#: ../../whatsnew/2.6.rst:718
msgid "PEP 3101: Advanced String Formatting"
msgstr ":pep:`3101`: 進化版文字列フォーマッティング"

#: ../../whatsnew/2.6.rst:720
msgid ""
"In Python 3.0, the `%` operator is supplemented by a more powerful string "
"formatting method, :meth:`format`.  Support for the :meth:`str.format` "
"method has been backported to Python 2.6."
msgstr ""
"Python 3.0 では `%` 演算子を補う、より強力な文字列フォーマッティングメソッド"
"の :meth:`format` が作られました。これをサポートする :meth:`str.format` メ"
"ソッドが Python 2.6 にバックポートされています。"

#: ../../whatsnew/2.6.rst:724
msgid ""
"In 2.6, both 8-bit and Unicode strings have a `.format()` method that treats "
"the string as a template and takes the arguments to be formatted. The "
"formatting template uses curly brackets (`{`, `}`) as special characters::"
msgstr ""
"2.6 では 8 ビット文字列と Unicode 文字列の両方が `.format()` メソッドを持ち、"
"文字列をテンプレートとみなして、フォーマットに使われるべき引数を受け取りま"
"す。フォーマッティングのテンプレートには波括弧 (`{`, `}`) が特殊文字として使"
"われます::"

#: ../../whatsnew/2.6.rst:737
msgid "Curly brackets can be escaped by doubling them::"
msgstr "波括弧自身は二重に書くことでエスケープ出来ます::"

#: ../../whatsnew/2.6.rst:742
msgid ""
"Field names can be integers indicating positional arguments, such as ``{0}"
"``, ``{1}``, etc. or names of keyword arguments.  You can also supply "
"compound field names that read attributes or access dictionary keys::"
msgstr ""
"フィールド名は、位置引数に対応する整数による ``{0}``, ``{1}``, …、またはキー"
"ワード引数に対応する名前です。属性を読み出したり辞書のキーにアクセスするよう"
"な合成フィールド名(compound field names)も与えることが出来ます::"

#: ../../whatsnew/2.6.rst:756
msgid ""
"Note that when using dictionary-style notation such as ``[.mp4]``, you don't "
"need to put any quotation marks around the string; it will look up the value "
"using ``.mp4`` as the key.  Strings beginning with a number will be "
"converted to an integer.  You can't write more complicated expressions "
"inside a format string."
msgstr ""
"``[.mp4]`` のように辞書スタイルの記法を使う際は文字列の周りを引用符で囲む必要"
"はありません; ``.mp4`` をキーに値のルックアップされます。数値で始まる文字列は"
"整数に変換されます。フォーマット文字列内でこれ以上複雑な表現は書けません。"

#: ../../whatsnew/2.6.rst:762
msgid ""
"So far we've shown how to specify which field to substitute into the "
"resulting string.  The precise formatting used is also controllable by "
"adding a colon followed by a format specifier.  For example::"
msgstr ""
"ここまでは、結果文字列に置き換えられるフィールドを指定する方法について見てき"
"ました。フォーマッティングではさらに、コロンに続けて書式指定子を追加すること"
"でコントロール可能です。例えば::"

#: ../../whatsnew/2.6.rst:776
msgid "Format specifiers can reference other fields through nesting::"
msgstr "書式指定子として、ネストによる他フィールド参照が使えます::"

#: ../../whatsnew/2.6.rst:786
msgid "The alignment of a field within the desired width can be specified:"
msgstr "望みの幅内でのフィールドの整列を指定可能です:"

#: ../../whatsnew/2.6.rst:789
msgid "Character"
msgstr "文字"

#: ../../whatsnew/2.6.rst:789
msgid "Effect"
msgstr "効果"

#: ../../whatsnew/2.6.rst:791
msgid "< (default)"
msgstr "< (デフォルト)"

#: ../../whatsnew/2.6.rst:791
msgid "Left-align"
msgstr "左寄せ"

#: ../../whatsnew/2.6.rst:792
msgid ">"
msgstr ">"

#: ../../whatsnew/2.6.rst:792
msgid "Right-align"
msgstr "右寄せ"

#: ../../whatsnew/2.6.rst:793
msgid "^"
msgstr "^"

#: ../../whatsnew/2.6.rst:793
msgid "Center"
msgstr "中央寄せ"

#: ../../whatsnew/2.6.rst:794
msgid "="
msgstr "="

#: ../../whatsnew/2.6.rst:794
msgid "(For numeric types only) Pad after the sign."
msgstr "(数値型についてのみ) 符号のあとにパディング"

#: ../../whatsnew/2.6.rst:797
msgid ""
"Format specifiers can also include a presentation type, which controls how "
"the value is formatted.  For example, floating-point numbers can be "
"formatted as a general number or in exponential notation::"
msgstr ""
"書式指定子には体裁のタイプも含めることが出来ます。値をどのようにフォーマット"
"するかです。たとえば浮動小数点数は普通の数値に、あるいは指数形式でフォーマッ"
"ト出来ます::"

#: ../../whatsnew/2.6.rst:806
msgid ""
"A variety of presentation types are available.  Consult the 2.6 "
"documentation for a :ref:`complete list <formatstrings>`; here's a sample:"
msgstr ""
"たくさんの体裁のタイプを利用出来ます。2.6 ドキュメントの :ref:`complete list "
"<formatstrings>` を調べてみてください。以下はその一部です:"

#: ../../whatsnew/2.6.rst:810
msgid "``b``"
msgstr "``b``"

#: ../../whatsnew/2.6.rst:810
msgid "Binary. Outputs the number in base 2."
msgstr "2進数。出力される数値は2を基数とします。"

#: ../../whatsnew/2.6.rst:811
msgid "``c``"
msgstr "``c``"

#: ../../whatsnew/2.6.rst:811
msgid ""
"Character. Converts the integer to the corresponding Unicode character "
"before printing."
msgstr "文字。数値を対応するユニコード文字に変換します。"

#: ../../whatsnew/2.6.rst:813
msgid "``d``"
msgstr "``d``"

#: ../../whatsnew/2.6.rst:813
msgid "Decimal Integer. Outputs the number in base 10."
msgstr "10進数。出力される数値は10を基数とします。"

#: ../../whatsnew/2.6.rst:814
msgid "``o``"
msgstr "``o``"

#: ../../whatsnew/2.6.rst:814
msgid "Octal format. Outputs the number in base 8."
msgstr "8進数。出力される数値は8を基数とします。"

#: ../../whatsnew/2.6.rst:815
msgid "``x``"
msgstr "``x``"

#: ../../whatsnew/2.6.rst:815
msgid ""
"Hex format. Outputs the number in base 16, using lower-case letters for the "
"digits above 9."
msgstr ""
"16進数。出力される数値は16を基数とします。 10進で9を超える数字には小文字が使"
"われます。"

#: ../../whatsnew/2.6.rst:817
msgid "``e``"
msgstr "``e``"

#: ../../whatsnew/2.6.rst:817
msgid ""
"Exponent notation. Prints the number in scientific notation using the letter "
"'e' to indicate the exponent."
msgstr "指数表現です。指数を示す 'e'  を使った科学的記数法で表示します。"

#: ../../whatsnew/2.6.rst:819
msgid "``g``"
msgstr "``g``"

#: ../../whatsnew/2.6.rst:819
msgid ""
"General format. This prints the number as a fixed-point number, unless the "
"number is too large, in which case it switches to 'e' exponent notation."
msgstr ""
"汎用フォーマット。数値が大き過ぎない限りは固定小数点表現をしますが、大きい値"
"では 'e' 指数表現に切り替えます。"

#: ../../whatsnew/2.6.rst:822
msgid "``n``"
msgstr "``n``"

#: ../../whatsnew/2.6.rst:822
msgid ""
"Number. This is the same as 'g' (for floats) or 'd' (for integers), except "
"that it uses the current locale setting to insert the appropriate number "
"separator characters."
msgstr ""
"数値です。現在のロケールに合わせて、数値分割文字が挿入されることを除き、 "
"``'g'`` (浮動小数点数の場合) または 'd' (整数の場合) と同じです。"

#: ../../whatsnew/2.6.rst:825
msgid "``%``"
msgstr "``%``"

#: ../../whatsnew/2.6.rst:825
msgid ""
"Percentage. Multiplies the number by 100 and displays in fixed ('f') format, "
"followed by a percent sign."
msgstr ""
"パーセンテージです。数値は 100 倍され、固定小数点数フォーマット (``'f'``) で"
"パーセント記号付きで表示されます。"

#: ../../whatsnew/2.6.rst:829
msgid ""
"Classes and types can define a :meth:`__format__` method to control how "
"they're formatted.  It receives a single argument, the format specifier::"
msgstr ""
"クラスと型は、自身がどのように書式化されるかをコントロールするために :meth:"
"`__format__` メソッドを定義出来ます。単一の引数として書式指定子を受け取りま"
"す::"

#: ../../whatsnew/2.6.rst:838
msgid ""
"There's also a :func:`format` builtin that will format a single value.  It "
"calls the type's :meth:`__format__` method with the provided specifier::"
msgstr ""
"ビルトインの :func:`format` もあって、単一の値をフォーマット出来ます。これは"
"型の :meth:`__format__` メソッドを与えられた指定子とともに呼び出します::"

#: ../../whatsnew/2.6.rst:849
msgid ":ref:`formatstrings`"
msgstr ":ref:`formatstrings`"

#: ../../whatsnew/2.6.rst:849
msgid "The reference documentation for format fields."
msgstr "リファレンスドキュメント。"

#: ../../whatsnew/2.6.rst:851
msgid ":pep:`3101` - Advanced String Formatting"
msgstr ":pep:`3101`: 進化版文字列フォーマッティング"

#: ../../whatsnew/2.6.rst:852
msgid "PEP written by Talin. Implemented by Eric Smith."
msgstr "PEP 著 Talin; 実装 Eric Smith。"

#: ../../whatsnew/2.6.rst:859
msgid "PEP 3105: ``print`` As a Function"
msgstr "PEP 3105: ``print`` を関数にする"

#: ../../whatsnew/2.6.rst:861
msgid ""
"The ``print`` statement becomes the :func:`print` function in Python 3.0. "
"Making :func:`print` a function makes it possible to replace the function by "
"doing ``def print(...)`` or importing a new function from somewhere else."
msgstr ""
"``print`` 文は Python 3.0 では :func:`print` 関数になります。 :func:`print` "
"が関数になることで、 ``def print(...)`` やなにかほかの場所からの新しい関数を"
"インポートするなどの方法で置き換え可能になります。"

#: ../../whatsnew/2.6.rst:865
msgid ""
"Python 2.6 has a ``__future__`` import that removes ``print`` as language "
"syntax, letting you use the functional form instead.  For example::"
msgstr ""
"Python 2.6 では ``__future__`` インポートで 言語構文としての ``print`` を取り"
"除き、関数形式のものを代わりに使えるように出来ます。たとえば::"

#: ../../whatsnew/2.6.rst:871
msgid "The signature of the new function is::"
msgstr "この新しい関数のシグネチャは以下の通りです::"

#: ../../whatsnew/2.6.rst:876
msgid "The parameters are:"
msgstr "パラメータは以下のとおりです:"

#: ../../whatsnew/2.6.rst:878
msgid "*args*: positional arguments whose values will be printed out."
msgstr "*args*: 出力される値を指定する位置引数リスト。"

#: ../../whatsnew/2.6.rst:879
msgid "*sep*: the separator, which will be printed between arguments."
msgstr "*sep*: 引数リスト *args* を出力するのに使われる区切り文字。"

#: ../../whatsnew/2.6.rst:880
msgid ""
"*end*: the ending text, which will be printed after all of the arguments "
"have been output."
msgstr "*end*: 引数リスト *args*  を全て出力したあとに出力するテキスト。"

#: ../../whatsnew/2.6.rst:882
msgid "*file*: the file object to which the output will be sent."
msgstr "*file*: 出力が送られるファイルオブジェクト。"

#: ../../whatsnew/2.6.rst:886
msgid ":pep:`3105` - Make print a function"
msgstr ":pep:`3105` - print を関数にする"

#: ../../whatsnew/2.6.rst:887
msgid "PEP written by Georg Brandl."
msgstr "Georg Brandl 著の PEP。"

#: ../../whatsnew/2.6.rst:894
msgid "PEP 3110: Exception-Handling Changes"
msgstr "PEP 3110: 例外処理の変更"

#: ../../whatsnew/2.6.rst:896
msgid ""
"One error that Python programmers occasionally make is writing the following "
"code::"
msgstr ""
"Python プログラマが時折やらかしてしまう誤りの一つにこんなのがあります::"

#: ../../whatsnew/2.6.rst:904
msgid ""
"The author is probably trying to catch both :exc:`TypeError` and :exc:"
"`ValueError` exceptions, but this code actually does something different: it "
"will catch :exc:`TypeError` and bind the resulting exception object to the "
"local name ``\"ValueError\"``.  The :exc:`ValueError` exception will not be "
"caught at all.  The correct code specifies a tuple of exceptions::"
msgstr ""
"このコードの作者はきっと :exc:`TypeError` 例外と :exc:`ValueError` 例外の両方"
"とっつかまえてやろうと思ったのでしょうが、このコードは実際にはちょっと違った"
"ことをします: :exc:`TypeError` を捕捉したらこれを ``\"ValueError\"`` という"
"ローカル名の例外オブジェクトに束縛します…。 :exc:`ValueError` 例外は決して捕"
"捉されません。正しくは、例外のタプルで指定します::"

#: ../../whatsnew/2.6.rst:916
msgid ""
"This error happens because the use of the comma here is ambiguous: does it "
"indicate two different nodes in the parse tree, or a single node that's a "
"tuple?"
msgstr ""
"こんなことが起こってしまうのは、ここではカンマの使用が曖昧だからです: それ、"
"解析木内で 2 つのノードを示すのかな、タプルな単一ノードかしら?"

#: ../../whatsnew/2.6.rst:920
msgid ""
"Python 3.0 makes this unambiguous by replacing the comma with the word "
"\"as\".  To catch an exception and store the exception object in the "
"variable ``exc``, you must write::"
msgstr ""
"Python 3.0 はカンマからワード \"as\" に置き換えてこの曖昧さをなくします。例外"
"を捕捉して例外オブジェクトを ``exc`` に記憶するには、こう書かなければなりませ"
"ん::"

#: ../../whatsnew/2.6.rst:929
msgid ""
"Python 3.0 will only support the use of \"as\", and therefore interprets the "
"first example as catching two different exceptions.  Python 2.6 supports "
"both the comma and \"as\", so existing code will continue to work.  We "
"therefore suggest using \"as\" when writing new Python code that will only "
"be executed with 2.6."
msgstr ""
"Python 3.0 は \"as\" の使用のみをサポートするようになるので、最初の例は 2 つ"
"の異なる例外を捕捉するものとして翻訳されます。Python 2.6 ではカンマも \"as\" "
"もサポートするので、既存のコードはそのまま動作します。新たに 2.6 で実行され"
"る Python コードを書くならば、 \"as\" の使用を勧めます。"

#: ../../whatsnew/2.6.rst:937
msgid ":pep:`3110` - Catching Exceptions in Python 3000"
msgstr ":pep:`3110` - Python 3000 での例外の捕捉"

#: ../../whatsnew/2.6.rst:938
msgid "PEP written and implemented by Collin Winter."
msgstr "PEP 著と実装 Collin Winter."

#: ../../whatsnew/2.6.rst:945
msgid "PEP 3112: Byte Literals"
msgstr "PEP 3112: バイトリテラル"

#: ../../whatsnew/2.6.rst:947
msgid ""
"Python 3.0 adopts Unicode as the language's fundamental string type and "
"denotes 8-bit literals differently, either as ``b'string'`` or using a :"
"class:`bytes` constructor.  For future compatibility, Python 2.6 adds :class:"
"`bytes` as a synonym for the :class:`str` type, and it also supports the "
"``b''`` notation."
msgstr ""
"Python 3.0 は Unicode を言語の基本文字列型として採用し、8 ビットリテラルは異"
"なった記法で指示します。それには ``b'string'`` とするか、 :class:`bytes` のコ"
"ンストラクタを用います。前方互換のために、Python 2.6 は :class:`str` 型に対す"
"る別名として :class:`bytes` を追加のうえで、 ``b''`` 記法もサポートします。"

#: ../../whatsnew/2.6.rst:954
msgid ""
"The 2.6 :class:`str` differs from 3.0's :class:`bytes` type in various ways; "
"most notably, the constructor is completely different.  In 3.0, ``bytes([65, "
"66, 67])`` is 3 elements long, containing the bytes representing ``ABC``; in "
"2.6, ``bytes([65, 66, 67])`` returns the 12-byte string representing the :"
"func:`str` of the list."
msgstr ""
"2.6 の :class:`str` 型は 3.0 の :class:`bytes` 型とは色んな意味で違います; 一"
"番顕著なのは、コンストラクタがまったく異なることです。3.0 での ``bytes([65, "
"66, 67])`` は 3 つのバイトで ``ABC`` を構築しますが、2.6 での ``bytes([65, "
"66, 67])`` は引数のリストを :func:`str` で文字列化した 12 バイト文字列を返し"
"ます。"

#: ../../whatsnew/2.6.rst:960
msgid ""
"The primary use of :class:`bytes` in 2.6 will be to write tests of object "
"type such as ``isinstance(x, bytes)``.  This will help the 2to3 converter, "
"which can't tell whether 2.x code intends strings to contain either "
"characters or 8-bit bytes; you can now use either :class:`bytes` or :class:"
"`str` to represent your intention exactly, and the resulting code will also "
"be correct in Python 3.0."
msgstr ""
"2.6 での :class:`bytes` の主な使いみちはオブジェクトの型のテストに "
"``isinstance(x, bytes)`` とすることでしょう。またこれは、 2.x コードが文字列"
"として ASCII 文字と 8 ビットバイトのどちらを意図しているのか知ることが出来な"
"い 2to3 コンバータの助けになります; あなたは今や :class:`bytes` と :class:"
"`str` の区別を、あなたの意図を正確に表現するのに使えます。そして結果のコード"
"は Python 3.0 で正しいものに修正されるでしょう。"

#: ../../whatsnew/2.6.rst:967
msgid ""
"There's also a ``__future__`` import that causes all string literals to "
"become Unicode strings.  This means that ``\\u`` escape sequences can be "
"used to include Unicode characters::"
msgstr ""
"全ての文字列リテラルを Unicode 文字列としてしまう ``__future__`` インポートも"
"あります。これは Unicode 文字を含むのに ``\\u`` エスケープシーケンスを使える"
"ことを意味します。"

#: ../../whatsnew/2.6.rst:979
msgid ""
"At the C level, Python 3.0 will rename the existing 8-bit string type, "
"called :c:type:`PyStringObject` in Python 2.x, to :c:type:`PyBytesObject`.  "
"Python 2.6 uses ``#define`` to support using the names :c:func:"
"`PyBytesObject`, :c:func:`PyBytes_Check`, :c:func:"
"`PyBytes_FromStringAndSize`, and all the other functions and macros used "
"with strings."
msgstr ""
"C API のレベルでは、Python 3.0 は既存の 8 ビット文字列型の名前を変えます。"
"Python 2.x での :c:type:`PyStringObject` は :c:type:`PyBytesObject` になりま"
"す。Python 2.6 では :c:func:`PyBytesObject`, :c:func:`PyBytes_Check`, :c:"
"func:`PyBytes_FromStringAndSize` をはじめとする全ての文字列関数とマクロを "
"``#define`` を使ってサポートしています(訳注: pure Python レベルと同じく単な"
"る PyString\\_\\* の別名として)。"

#: ../../whatsnew/2.6.rst:986
msgid ""
"Instances of the :class:`bytes` type are immutable just as strings are.  A "
"new :class:`bytearray` type stores a mutable sequence of bytes::"
msgstr ""
":class:`bytes` 型のインスタンスは単に文字列と同じで :term:`immutable` で"
"す。 :class:`bytearray` 型が、バイト列を :term:`mutable` シーケンスとして格納"
"するものとして新しく追加されました::"

#: ../../whatsnew/2.6.rst:1001
msgid ""
"Byte arrays support most of the methods of string types, such as :meth:"
"`startswith`/:meth:`endswith`, :meth:`find`/:meth:`rfind`, and some of the "
"methods of lists, such as :meth:`append`, :meth:`pop`,  and :meth:`reverse`."
msgstr ""
":class:`bytearray` は :meth:`startswith`/:meth:`endswith`, :meth:`find`/:"
"meth:`rfind` のような文字列型のほとんどのメソッド、 :meth:`append`, :meth:"
"`pop`, :meth:`reverse` のようなリストのいくつかのメソッドをサポートします。"

#: ../../whatsnew/2.6.rst:1014
msgid ""
"There's also a corresponding C API, with :c:func:`PyByteArray_FromObject`, :"
"c:func:`PyByteArray_FromStringAndSize`, and various other functions."
msgstr ""
"対応する C API もあります。 :c:func:`PyByteArray_FromObject`, :c:func:"
"`PyByteArray_FromStringAndSize` や色々その他関数です。"

#: ../../whatsnew/2.6.rst:1021
msgid ":pep:`3112` - Bytes literals in Python 3000"
msgstr ":pep:`3112` - Python 3000 でのバイトリテラル"

#: ../../whatsnew/2.6.rst:1022
msgid "PEP written by Jason Orendorff; backported to 2.6 by Christian Heimes."
msgstr "PEP 著 Jason Orendorff; 2.6 へのバックポート Christian Heimes."

#: ../../whatsnew/2.6.rst:1029
msgid "PEP 3116: New I/O Library"
msgstr "PEP 3116: 新しい I/O ライブラリ"

#: ../../whatsnew/2.6.rst:1031
msgid ""
"Python's built-in file objects support a number of methods, but file-like "
"objects don't necessarily support all of them.  Objects that imitate files "
"usually support :meth:`read` and :meth:`write`, but they may not support :"
"meth:`readline`, for example.  Python 3.0 introduces a layered I/O library "
"in the :mod:`io` module that separates buffering and text-handling features "
"from the fundamental read and write operations."
msgstr ""
"Python ビルトインのファイルオブジェクトはたくさんのメソッドをサポートしていま"
"すが、ファイルライクなオブジェクトは必ずしもそのすべてをサポートする必要はあ"
"りません。ファイルのまねごとをするオブジェクトは大抵 :meth:`read` と :meth:"
"`write` をサポートしますが、 :meth:`readline` はサポートしないかもしれませ"
"ん、例えば。Python 3.0 は :mod:`io` モジュールに、階層化された I/O ライブラリ"
"を導入しています。それは基礎的な読み書き操作からバッファリング機能とテキスト"
"処理を分離しています。"

#: ../../whatsnew/2.6.rst:1039
msgid ""
"There are three levels of abstract base classes provided by the :mod:`io` "
"module:"
msgstr ""
":mod:`io` モジュールによって提供される抽象基底クラスには 3 つのレベルがありま"
"す:"

#: ../../whatsnew/2.6.rst:1042
msgid ""
":class:`RawIOBase` defines raw I/O operations: :meth:`read`, :meth:"
"`readinto`, :meth:`write`, :meth:`seek`, :meth:`tell`, :meth:`truncate`, "
"and :meth:`close`. Most of the methods of this class will often map to a "
"single system call. There are also :meth:`readable`, :meth:`writable`, and :"
"meth:`seekable` methods for determining what operations a given object will "
"allow."
msgstr ""
":class:`RawIOBase` は剥き身の I/O 操作を定義します: :meth:`read`, :meth:"
"`readinto`, :meth:`write`, :meth:`seek`, :meth:`tell`, :meth:`truncate`, :"
"meth:`close` 。このクラスのほとんどのメソッドが多くの場合単一のシステムコール"
"に対応するでしょう。 :meth:`readable`, :meth:`writable`, :meth:`seekable` メ"
"ソッドも利用可能で、オブジェクトでどの操作が許されるのかを知るのに使えます。"

#: ../../whatsnew/2.6.rst:1050
msgid ""
"Python 3.0 has concrete implementations of this class for files and sockets, "
"but Python 2.6 hasn't restructured its file and socket objects in this way."
msgstr ""
"Python 3.0 はこのクラスのファイルとソケットに対する具象実装を持っていますが、"
"Python 2.6 はファイル、ソケットオブジェクトのこの方法での再構築はしていませ"
"ん。"

#: ../../whatsnew/2.6.rst:1056
msgid ""
":class:`BufferedIOBase` is an abstract base class that buffers data in "
"memory to reduce the number of system calls used, making I/O processing more "
"efficient. It supports all of the methods of :class:`RawIOBase`, and adds a :"
"attr:`raw` attribute holding the underlying raw object."
msgstr ""
":class:`BufferedIOBase` はデータをメモリにバッファすることでシステムコール使"
"用回数を減らし、I/O 処理をより効率的に行うための抽象基底クラスです。 :class:"
"`RawIOBase` の全てのメソッドをサポートし、追加で基底の剥き身のオブジェクトを"
"保持する :attr:`raw` 属性を持ちます。"

#: ../../whatsnew/2.6.rst:1062
msgid ""
"There are five concrete classes implementing this ABC. :class:"
"`BufferedWriter` and :class:`BufferedReader` are for objects that support "
"write-only or read-only usage that have a :meth:`seek` method for random "
"access.  :class:`BufferedRandom` objects support read and write access upon "
"the same underlying stream, and :class:`BufferedRWPair` is for objects such "
"as TTYs that have both read and write operations acting upon unconnected "
"streams of data. The :class:`BytesIO` class supports reading, writing, and "
"seeking over an in-memory buffer."
msgstr ""
"5 つの具象クラスがこの ABC を実装しています。 :class:`BufferedWriter` と :"
"class:`BufferedReader` はランダムアクセスのための :meth:`seek` を持ち、書き込"
"み専用または読み出し専用の用途をサポートするオブジェクトのためのものです。 :"
"class:`BufferedRandom` オブジェクトはこれらと同じ前提のストリームでの読み書き"
"アクセスをサポートし、 :class:`BufferedRWPair` は、TTY のような、連続していな"
"いデータのストリームの上で読み書き操作両方を演じるオブジェクトのためのもので"
"す。 :class:`BytesIO` クラスはインメモリのバッファ上での読み、書き、シークを"
"サポートします。"

#: ../../whatsnew/2.6.rst:1075
msgid ""
":class:`TextIOBase`: Provides functions for reading and writing strings "
"(remember, strings will be Unicode in Python 3.0), and supporting :term:"
"`universal newlines`.  :class:`TextIOBase` defines the :meth:`readline` "
"method and supports iteration upon objects."
msgstr ""
":class:`TextIOBase`: 文字列 (忘れないで、Python 3.0 では文字列は Unicode にな"
"ります) の読み書き関数を提供し、 :term:`universal newlines` をサポートしま"
"す。 :class:`TextIOBase` は :meth:`readline` メソッドをサポートし、また、オブ"
"ジェクトを渡るイテレーションをサポートします。"

#: ../../whatsnew/2.6.rst:1081
msgid ""
"There are two concrete implementations.  :class:`TextIOWrapper` wraps a "
"buffered I/O object, supporting all of the methods for text I/O and adding "
"a :attr:`buffer` attribute for access to the underlying object.  :class:"
"`StringIO` simply buffers everything in memory without ever writing anything "
"to disk."
msgstr ""
"2 つの具象実装があります。 :class:`TextIOWrapper` はバッファ化 I/O オブジェク"
"トをラップし、テキスト I/O の全てのメソッドをサポートし、追加で元となるオブ"
"ジェクトへのアクセスのための :attr:`buffer` 属性を持ちます。 :class:"
"`StringIO` はディスクへの一切の書き込みをせずに単純にメモリ内に全てをバッファ"
"します。"

#: ../../whatsnew/2.6.rst:1087
msgid ""
"(In Python 2.6, :class:`io.StringIO` is implemented in pure Python, so it's "
"pretty slow.   You should therefore stick with the existing :mod:`StringIO` "
"module or :mod:`cStringIO` for now.  At some point Python 3.0's :mod:`io` "
"module will be rewritten into C for speed, and perhaps the C implementation "
"will be  backported to the 2.x releases.)"
msgstr ""
"(Python 2.6 では :class:`io.StringIO` は pure Python で書かれているので、かな"
"り遅いです。ですから今のところは既存の :mod:`StringIO` モジュール か :mod:"
"`cStringIO` モジュールに留まっておくべきです。Python 3.0 の :mod:`io` モ"
"ジュールは、ある時点で速度のために C に書き直されます。そしておそらくその実装"
"は 2.x リリースにバックポートされます ( **訳注: 2.7 で実現** ) 。)"

#: ../../whatsnew/2.6.rst:1093
msgid ""
"In Python 2.6, the underlying implementations haven't been restructured to "
"build on top of the :mod:`io` module's classes.  The module is being "
"provided to make it easier to write code that's forward-compatible with 3.0, "
"and to save developers the effort of writing their own implementations of "
"buffering and text I/O."
msgstr ""
"Python 2.6 では根底にある実装が :mod:`io` モジュールのクラスの上に組み立てら"
"れるようには再構築されていません (訳注: Python HowTo の移植ガイドにも触れられ"
"ている通り、2.7 も同じです)。このモジュールは 3.0 への前方互換のコードを書く"
"のを容易にするために、また、開発者たちがバッファリング I/O とテキスト I/O を"
"自身で書く労力を省くために提供されています。"

#: ../../whatsnew/2.6.rst:1103
msgid ":pep:`3116` - New I/O"
msgstr ":pep:`3116` - 新しい I/O"

#: ../../whatsnew/2.6.rst:1102
msgid ""
"PEP written by Daniel Stutzbach, Mike Verdone, and Guido van Rossum. Code by "
"Guido van Rossum, Georg Brandl, Walter Doerwald, Jeremy Hylton, Martin von "
"Löwis, Tony Lownds, and others."
msgstr ""
"PEP 著: Daniel Stutzbach, Mike Verdone, Guido van Rossum. 実装: Guido van "
"Rossum, Georg Brandl, Walter Doerwald, Jeremy Hylton, Martin von Loewis, "
"Tony Löwis, ほか."

#: ../../whatsnew/2.6.rst:1111
msgid "PEP 3118: Revised Buffer Protocol"
msgstr "PEP 3118: 改訂版バッファプロトコル"

#: ../../whatsnew/2.6.rst:1113
msgid ""
"The buffer protocol is a C-level API that lets Python types exchange "
"pointers into their internal representations.  A memory-mapped file can be "
"viewed as a buffer of characters, for example, and this lets another module "
"such as :mod:`re` treat memory-mapped files as a string of characters to be "
"searched."
msgstr ""
"バッファプロトコルは Python 型にその内部表現へのポインタをやりとりさせる、C "
"レベル API です。例えば、メモリマップドファイルは文字のバッファとして見ること"
"が出来ます。そしてこれは :mod:`re` のようなほかのモジュールが、それを文字列と"
"して扱って検索するようなことを許します。"

#: ../../whatsnew/2.6.rst:1119
msgid ""
"The primary users of the buffer protocol are numeric-processing packages "
"such as NumPy, which expose the internal representation of arrays so that "
"callers can write data directly into an array instead of going through a "
"slower API.  This PEP updates the buffer protocol in light of experience "
"from NumPy development, adding a number of new features such as indicating "
"the shape of an array or locking a memory region."
msgstr ""
"バッファプロトコルの主なユーザは NumPy のような数値演算パッケージで、それらは"
"呼び出し元がより遅い API を経由することなく直接的に行列にデータを書き込むこと"
"が出来るように、行列の内部表現を曝しています。この PEP は NumPy 開発の経験を"
"踏まえてバッファプロトコルを更新するもので、行列の形状を表明したり、メモリ領"
"域をロックしたりするような多数の新機能を追加します。"

#: ../../whatsnew/2.6.rst:1126
msgid ""
"The most important new C API function is ``PyObject_GetBuffer(PyObject *obj, "
"Py_buffer *view, int flags)``, which takes an object and a set of flags, and "
"fills in the ``Py_buffer`` structure with information about the object's "
"memory representation.  Objects can use this operation to lock memory in "
"place while an external caller could be modifying the contents, so there's a "
"corresponding ``PyBuffer_Release(Py_buffer *view)`` to indicate that the "
"external caller is done."
msgstr ""
"最重要の新規 C API 関数は ``PyObject_GetBuffer(PyObject *obj, Py_buffer "
"*view, int flags)`` で、これはオブジェクトを受け取って、フラグをセットし、 "
"``Py_buffer`` 構造体にオブジェクトのメモリ表現についての情報を埋めます。オブ"
"ジェクトはこの操作を、外部の呼び出し元がその内容を修正している間所定のメモリ"
"をロックするのに使えます。ですので対応する操作 ``PyBuffer_Release(Py_buffer "
"*view)`` があり、これで外部呼出し元が処理を終えたことを表明します。"

#: ../../whatsnew/2.6.rst:1138
msgid ""
"The *flags* argument to :c:func:`PyObject_GetBuffer` specifies constraints "
"upon the memory returned.  Some examples are:"
msgstr ""
":c:func:`PyObject_GetBuffer` への *flags* 引数は返されるメモリについての制約"
"条件を指定します。いくつかの例として:"

#: ../../whatsnew/2.6.rst:1141
msgid ":const:`PyBUF_WRITABLE` indicates that the memory must be writable."
msgstr ""
":const:`PyBUF_WRITABLE` はメモリが書き込み可能でなければならないことを指示し"
"ます。"

#: ../../whatsnew/2.6.rst:1143
msgid ""
":const:`PyBUF_LOCK` requests a read-only or exclusive lock on the memory."
msgstr ""
":const:`PyBUF_LOCK` は読み出し専用もしくはメモリの排他ロックを要求します。"

#: ../../whatsnew/2.6.rst:1145
msgid ""
":const:`PyBUF_C_CONTIGUOUS` and :const:`PyBUF_F_CONTIGUOUS` requests a C-"
"contiguous (last dimension varies the fastest) or Fortran-contiguous (first "
"dimension varies the fastest) array layout."
msgstr ""
":const:`PyBUF_C_CONTIGUOUS` と :const:`PyBUF_F_CONTIGUOUS` は C-contiguous "
"(最後の次元が最初に動きます) または Fortran-contiguous (最初の次元が最初に動"
"きます) の行列レイアウトを要求します。 (訳注: 日本でも馴染みのある用語ではい"
"わゆる column-major order (列優先)、 row-major order (行優先) です。)"

#: ../../whatsnew/2.6.rst:1149
msgid ""
"Two new argument codes for :c:func:`PyArg_ParseTuple`, ``s*`` and ``z*``, "
"return locked buffer objects for a parameter."
msgstr ""
":c:func:`PyArg_ParseTuple` のための 2 つの新しい書式化コード ``s*`` と "
"``z*`` は、パラメータとしてロックされたバッファオブジェクトを返します。"

#: ../../whatsnew/2.6.rst:1155
msgid ":pep:`3118` - Revising the buffer protocol"
msgstr ":pep:`3118` - 改訂版バッファプロトコル"

#: ../../whatsnew/2.6.rst:1155
msgid ""
"PEP written by Travis Oliphant and Carl Banks; implemented by Travis "
"Oliphant."
msgstr "PEP 著: Travis Oliphant, Carl Banks; 実装: Travis Oliphant."

#: ../../whatsnew/2.6.rst:1164
msgid "PEP 3119: Abstract Base Classes"
msgstr "PEP 3119: 抽象基底クラス"

#: ../../whatsnew/2.6.rst:1166
msgid ""
"Some object-oriented languages such as Java support interfaces, declaring "
"that a class has a given set of methods or supports a given access "
"protocol.  Abstract Base Classes (or ABCs) are an equivalent feature for "
"Python. The ABC support consists of an :mod:`abc` module containing a "
"metaclass called :class:`ABCMeta`, special handling of this metaclass by "
"the :func:`isinstance` and :func:`issubclass` builtins, and a collection of "
"basic ABCs that the Python developers think will be widely useful.  Future "
"versions of Python will probably add more ABCs."
msgstr ""
"ある種のオブジェクト指向言語、たとえば Java などは、クラスが持つメソッドの集"
"合やサポートするアクセスプロトコルを宣言するための「インターフェイス」をサ"
"ポートしています。抽象基底クラス (ABCs=Abstract Base Classes)は Python でのこ"
"れと等価な機能です。ABC サポートは、 :class:`ABCMeta` と呼ばれるメタクラスを"
"含む :mod:`abc` モジュール、ビルトイン :func:`isinstance` と :func:"
"`issubclass` のそのメタクラスについての特殊処理、それに Python 開発者が広範囲"
"にわたって使えると考えた基礎的な ABCs のコレクションから成ります。たぶん将来"
"のバージョンの Python ではもっとたくさんの ABCs が追加されると思います。"

#: ../../whatsnew/2.6.rst:1176
msgid ""
"Let's say you have a particular class and wish to know whether it supports "
"dictionary-style access.  The phrase \"dictionary-style\" is vague, however. "
"It probably means that accessing items with ``obj[1]`` works. Does it imply "
"that setting items with ``obj[2] = value`` works? Or that the object will "
"have :meth:`keys`, :meth:`values`, and :meth:`items` methods?  What about "
"the iterative variants  such as :meth:`iterkeys`?  :meth:`copy` and :meth:"
"`update`?  Iterating over the object with :func:`iter`?"
msgstr ""
"あなたがなにか特別なクラスを持っていて、辞書スタイルのアクセスをサポートする"
"のか知りたいとしましょう。「辞書スタイル」ってなんでしょうね、それにしても。"
"たぶんアイテムにアクセスするのに ``obj[1]`` が使えるでしょう。それは "
"``obj[2] = value`` のように値をセットするのも含まれるでしょうね? あるいは :"
"meth:`keys`, :meth:`values`, :meth:`items` メソッドを持ちますかね? :meth:"
"`iterkeys` みたいな列挙系はいかがでしょう? :meth:`copy` と :meth:`update` "
"は? オブジェクトを巡回するのに :func:`iter` で出来ます?"

#: ../../whatsnew/2.6.rst:1184
msgid ""
"The Python 2.6 :mod:`collections` module includes a number of different ABCs "
"that represent these distinctions.  :class:`Iterable` indicates that a class "
"defines :meth:`__iter__`, and :class:`Container` means the class defines a :"
"meth:`__contains__` method and therefore supports ``x in y`` expressions.  "
"The basic dictionary interface of getting items, setting items, and :meth:"
"`keys`, :meth:`values`, and :meth:`items`, is defined by the :class:"
"`MutableMapping` ABC."
msgstr ""
"Python 2.6 の :mod:`collections` モジュールには、この手の区別を表現出来るたく"
"さんの ABCs が含まれています。 :class:`Iterable` は :meth:`__iter__` を定義し"
"たクラスを示し、 :class:`Container` は :meth:`__contains__` メソッドを定義し"
"ていて、なので ``x in y`` 式をサポートしていることを意味します。アイテム取"
"得、アイテムセット、 :meth:`keys`, :meth:`values`, :meth:`items` という品揃え"
"の基礎的な辞書インターフェイスは :class:`MutableMapping` ABC で定義されていま"
"す。"

#: ../../whatsnew/2.6.rst:1193
msgid ""
"You can derive your own classes from a particular ABC to indicate they "
"support that ABC's interface::"
msgstr ""
"あなた自身のクラスを特定の ABC から派生して、ABC のインターフェイスをサポート"
"することを示せます::"

#: ../../whatsnew/2.6.rst:1202
msgid ""
"Alternatively, you could write the class without deriving from the desired "
"ABC and instead register the class by calling the ABC's :meth:`register` "
"method::"
msgstr ""
"別の方法としては、望みの ABC から派生するのではなく、その ABC の :meth:"
"`register`  メソッドを呼び出して登録することでも出来ます::"

#: ../../whatsnew/2.6.rst:1213
msgid ""
"For classes that you write, deriving from the ABC is probably clearer. The :"
"meth:`register`  method is useful when you've written a new ABC that can "
"describe an existing type or class, or if you want to declare that some "
"third-party class implements an ABC. For example, if you defined a :class:"
"`PrintableType` ABC, it's legal to do::"
msgstr ""
"あなたが書くクラスでは ABC から派生するのが、たぶん綺麗で良いと思います。既存"
"の型やクラスを記述出来る新しい ABC が書けた場合や、なにかサードパーティのクラ"
"スが実装する ABC を宣言したい場合などには :meth:`register` メソッドが有用で"
"す。例えば、 :class:`PrintableType` ABC を定義したのなら、今がそのとき、で"
"す::"

#: ../../whatsnew/2.6.rst:1225
msgid ""
"Classes should obey the semantics specified by an ABC, but Python can't "
"check this; it's up to the class author to understand the ABC's requirements "
"and to implement the code accordingly."
msgstr ""
"クラスは ABC が規定するセマンティクスに従うべきですが、Python はそれをチェッ"
"クは出来ません；その ABC の要求を理解してコードを適切に実装するのはクラスの作"
"者任せです。"

#: ../../whatsnew/2.6.rst:1229
msgid ""
"To check whether an object supports a particular interface, you can now "
"write::"
msgstr ""
"オブジェクトが特定のインターフェイスをサポートするかどうかをチェックするのに"
"は、今やこう書けます::"

#: ../../whatsnew/2.6.rst:1236
msgid ""
"Don't feel that you must now begin writing lots of checks as in the above "
"example.  Python has a strong tradition of duck-typing, where explicit type-"
"checking is never done and code simply calls methods on an object, trusting "
"that those methods will be there and raising an exception if they aren't.  "
"Be judicious in checking for ABCs and only do it where it's absolutely "
"necessary."
msgstr ""
"これからはたくさんのこのようなチェックをしなければならないのだ、この例のよう"
"に、などとは思わないように。Python は至極ダックタイピングな流儀なのであって明"
"示的な型チェックは決してされませんし、コードは単純にオブジェクトのメソッド"
"を、それらメソッドがそこにあるはずで、なければ例外になるのを信じて呼ぶだけで"
"す。ABC についてのチェックには分別を持ち、それが絶対的に必要な場合にだけそう"
"するようにしましょう。"

#: ../../whatsnew/2.6.rst:1243
msgid ""
"You can write your own ABCs by using ``abc.ABCMeta`` as the metaclass in a "
"class definition::"
msgstr ""
"あなた自身の ABCs を書くには、クラス定義内のメタクラスとして ``abc.ABCMeta`` "
"を使います::"

#: ../../whatsnew/2.6.rst:1264
msgid ""
"In the :class:`Drawable` ABC above, the :meth:`draw_doubled` method renders "
"the object at twice its size and can be implemented in terms of other "
"methods described in :class:`Drawable`.  Classes implementing this ABC "
"therefore don't need to provide their own implementation of :meth:"
"`draw_doubled`, though they can do so.  An implementation of :meth:`draw` is "
"necessary, though; the ABC can't provide a useful generic implementation."
msgstr ""
"上の :class:`Drawable` ABC では、 :meth:`draw_doubled` メソッドがオブジェクト"
"をその 2 倍のサイズで描画しますが、 :class:`Drawable` で示されたほかのメソッ"
"ドのやり方で実現されるのでしょう。この ABC を実装するクラスは :meth:"
"`draw_doubled` のそれ自身の実装を提供する必要はないわけですが、実装しても良い"
"です。一方 :meth:`draw` の実装は必要です。その ABC が役に立つ汎用的な実装が提"
"供出来ていないので。"

#: ../../whatsnew/2.6.rst:1272
msgid ""
"You can apply the ``@abstractmethod`` decorator to methods such as :meth:"
"`draw` that must be implemented; Python will then raise an exception for "
"classes that don't define the method. Note that the exception is only raised "
"when you actually try to create an instance of a subclass lacking the "
"method::"
msgstr ""
":meth:`draw` のような、実装が必須のメソッドに対して ``@abstractmethod`` デコ"
"レータを適用することが出来ます; Python はそのメソッドを実装しないクラスに例外"
"を喰らわせます。サブクラスにそのメソッドが欠けていたとしても、インスタンスを"
"実際に作ろうと試みてはじめて例外となることに注意しましょう::"

#: ../../whatsnew/2.6.rst:1287
msgid ""
"Abstract data attributes can be declared using the ``@abstractproperty`` "
"decorator::"
msgstr "抽象データ属性を ``@abstractproperty`` を使って宣言出来ます::"

#: ../../whatsnew/2.6.rst:1297
msgid "Subclasses must then define a :meth:`readonly` property."
msgstr ""
"この場合サブクラスは :meth:`readonly` プロパティを定義することが必須です。"

#: ../../whatsnew/2.6.rst:1303
msgid ":pep:`3119` - Introducing Abstract Base Classes"
msgstr ":pep:`3119` - 抽象基底クラスの導入"

#: ../../whatsnew/2.6.rst:1302
msgid ""
"PEP written by Guido van Rossum and Talin. Implemented by Guido van Rossum. "
"Backported to 2.6 by Benjamin Aranguren, with Alex Martelli."
msgstr ""
"PEP は Guido van Rossum と Talin によって著され、Guido van Rossum により実装"
"されています。Python 2.6 へのバックポートは Benjamin Aranguren と Alex "
"Martelli により行われました。"

#: ../../whatsnew/2.6.rst:1311
msgid "PEP 3127: Integer Literal Support and Syntax"
msgstr "PEP 3127: 整数リテラルのサポートと文法"

#: ../../whatsnew/2.6.rst:1313
msgid ""
"Python 3.0 changes the syntax for octal (base-8) integer literals, prefixing "
"them with \"0o\" or \"0O\" instead of a leading zero, and adds support for "
"binary (base-2) integer literals, signalled by a \"0b\" or \"0B\" prefix."
msgstr ""
"Python 3.0 は octal (基数 8: 8 進数) 整数リテラルの構文を変更し、先行するゼロ"
"の代わりに \"0o\" または \"0O\" (「ゼロオー」)としています。また、 binary (基"
"数 2: 2 進数) 整数リテラルのサポートを追加し、これは \"0b\" または \"0B\" で"
"指示します。"

#: ../../whatsnew/2.6.rst:1318
msgid ""
"Python 2.6 doesn't drop support for a leading 0 signalling an octal number, "
"but it does add support for \"0o\" and \"0b\"::"
msgstr ""
"Python 2.6 は先行するゼロの形式での 8 進数サポートをやめませんが、 \"0o\" と "
"\"0b\" は追加サポートします::"

#: ../../whatsnew/2.6.rst:1326
msgid ""
"The :func:`oct` builtin still returns numbers prefixed with a leading zero, "
"and a new :func:`bin` builtin returns the binary representation for a "
"number::"
msgstr ""
"ビルトイン関数 :func:`oct` はまだ先行ゼロ形式での表現を返します。新しいビルト"
"イン関数 :func:`bin` は数値の 2 進数表現を返します::"

#: ../../whatsnew/2.6.rst:1337
msgid ""
"The :func:`int` and :func:`long` builtins will now accept the \"0o\" and "
"\"0b\" prefixes when base-8 or base-2 are requested, or when the *base* "
"argument is zero (signalling that the base used should be determined from "
"the string)::"
msgstr ""
"ビルトイン :func:`int`, :func:`long` が、基数 8 か 0 を要求された場合の "
"\"0o\" プレフィクス、基数 2 か 0 を要求された場合の \"0b\" プレフィクスをそれ"
"ぞれ許容するようになりました(基数 *base* = 0 は文字列から基数を決めるべきであ"
"ることを指示します)::"

#: ../../whatsnew/2.6.rst:1355
msgid ":pep:`3127` - Integer Literal Support and Syntax"
msgstr ":pep:`3127` - 整数リテラルのサポートと文法"

#: ../../whatsnew/2.6.rst:1355
msgid "PEP written by Patrick Maupin; backported to 2.6 by Eric Smith."
msgstr "PEP 著 Patrick Maupin、2.6 へのバックポートは Eric Smith による。"

#: ../../whatsnew/2.6.rst:1363
msgid "PEP 3129: Class Decorators"
msgstr "PEP 3129: クラスデコレータ"

#: ../../whatsnew/2.6.rst:1365
msgid ""
"Decorators have been extended from functions to classes.  It's now legal to "
"write::"
msgstr ""
"デコレータが拡張されて関数だけでなクラスにも使えるようになりました。今やこの"
"ように書くのは合法です::"

#: ../../whatsnew/2.6.rst:1373
msgid "This is equivalent to::"
msgstr "これは次と等価です::"

#: ../../whatsnew/2.6.rst:1382
msgid ":pep:`3129` - Class Decorators"
msgstr ":pep:`3129` - クラスデコレータ"

#: ../../whatsnew/2.6.rst:1383
msgid "PEP written by Collin Winter."
msgstr "PEP 著 Collin Winter."

#: ../../whatsnew/2.6.rst:1390
msgid "PEP 3141: A Type Hierarchy for Numbers"
msgstr "PEP 3141: 数値の型階層"

#: ../../whatsnew/2.6.rst:1392
msgid ""
"Python 3.0 adds several abstract base classes for numeric types inspired by "
"Scheme's numeric tower.  These classes were backported to 2.6 as the :mod:"
"`numbers` module."
msgstr ""
"Python 3.0 では Scheme の numeric tower に触発された、いくつかの数値型のため"
"の抽象基底クラスを追加しています。これらのクラスは :mod:`numbers` モジュール "
"として 2.6 にバックポートされています。"

#: ../../whatsnew/2.6.rst:1396
msgid ""
"The most general ABC is :class:`Number`.  It defines no operations at all, "
"and only exists to allow checking if an object is a number by doing "
"``isinstance(obj, Number)``."
msgstr ""
"一番てっぺんの汎用 ABC が :class:`Number` です。これには何の演算も含まれず、"
"オブジェクトがなんらか数値であることをチェックするためだけにあります。 "
"``isinstance(obj, Number)`` として使えます。"

#: ../../whatsnew/2.6.rst:1400
msgid ""
":class:`Complex` is a subclass of :class:`Number`.  Complex numbers can "
"undergo the basic operations of addition, subtraction, multiplication, "
"division, and exponentiation, and you can retrieve the real and imaginary "
"parts and obtain a number's conjugate.  Python's built-in complex type is an "
"implementation of :class:`Complex`."
msgstr ""
":class:`Complex` は :class:`Number` のサブクラスです。複素数は基礎的な追加の"
"演算の加算、減算、積算、除算、累乗に耐えるとともに、実数部と虚数部の抽出と共"
"役数の取得が出来ます。Python のビルトインの complex 型は :class:`Complex` を"
"実装しています。"

#: ../../whatsnew/2.6.rst:1406
msgid ""
":class:`Real` further derives from :class:`Complex`, and adds operations "
"that only work on real numbers: :func:`floor`, :func:`trunc`, rounding, "
"taking the remainder mod N, floor division, and comparisons."
msgstr ""
":class:`Real` は :class:`Complex` から更に派生し、実数のみで動作する演算を追"
"加しています: :func:`floor`, :func:`trunc`, 丸め, divmod, floor division, 比"
"較、です。"

#: ../../whatsnew/2.6.rst:1411
msgid ""
":class:`Rational` numbers derive from :class:`Real`, have :attr:`numerator` "
"and :attr:`denominator` properties, and can be converted to floats.  Python "
"2.6 adds a simple rational-number class, :class:`Fraction`, in the :mod:"
"`fractions` module.  (It's called :class:`Fraction` instead of :class:"
"`Rational` to avoid a name clash with :class:`numbers.Rational`.)"
msgstr ""
":class:`Rational` 数は :class:`Real` からの派生で、プロパティ :attr:"
"`numerator`, :attr:`denominator` を持ち、浮動小数点数への変換が出来ます。"
"Python 2.6 は単純な有理数クラス :class:`Fraction` を :mod:`fractions` モ"
"ジュールに追加しています。(:class:`Rational` ではなく :class:`Fraction` なの"
"は、 :class:`numbers.Rational` と名前が衝突するのを避けるためです。)"

#: ../../whatsnew/2.6.rst:1418
msgid ""
":class:`Integral` numbers derive from :class:`Rational`, and can be shifted "
"left and right with ``<<`` and ``>>``, combined using bitwise operations "
"such as ``&`` and ``|``, and can be used as array indexes and slice "
"boundaries."
msgstr ""
":class:`Integral` 数は :class:`Rational` からの派生で、シフト演算 ``<<``, "
"``>>`` が出来て、 ``&`` や ``|`` のようなビット演算で混ぜ合わせることができ"
"て、また、配列のインデクスとスライスの境界として使えます。"

#: ../../whatsnew/2.6.rst:1423
msgid ""
"In Python 3.0, the PEP slightly redefines the existing builtins :func:"
"`round`, :func:`math.floor`, :func:`math.ceil`, and adds a new one, :func:"
"`math.trunc`, that's been backported to Python 2.6. :func:`math.trunc` "
"rounds toward zero, returning the closest :class:`Integral` that's between "
"the function's argument and zero."
msgstr ""
"Python 3.0 では、その PEP は少し既存のビルトイン :func:`round`, :func:`math."
"floor`, :func:`math.ceil` を再定義していて、また、Python 2.6 にバックポートさ"
"れている新しい :func:`math.trunc` を追加しています。 :func:`math.trunc` はゼ"
"ロに向かう方向の丸めで、引数とゼロの間で一番近い :class:`Integral` を返しま"
"す。"

#: ../../whatsnew/2.6.rst:1432
msgid ":pep:`3141` - A Type Hierarchy for Numbers"
msgstr ":pep:`3141` - 数値の型階層"

#: ../../whatsnew/2.6.rst:1432
msgid "PEP written by Jeffrey Yasskin."
msgstr "PEP 著: Jeffrey Yasskin."

#: ../../whatsnew/2.6.rst:1434
msgid ""
"`Scheme's numerical tower <https://www.gnu.org/software/guile/manual/"
"html_node/Numerical-Tower.html#Numerical-Tower>`__, from the Guile manual."
msgstr ""
"Guile マニュアルの `Scheme's numerical tower <https://www.gnu.org/software/"
"guile/manual/html_node/Numerical-Tower.html#Numerical-Tower>`__ 。"

#: ../../whatsnew/2.6.rst:1436
msgid ""
"`Scheme's number datatypes <http://schemers.org/Documents/Standards/R5RS/"
"HTML/r5rs-Z-H-9.html#%_sec_6.2>`__ from the R5RS Scheme specification."
msgstr ""
"R5RS Scheme 仕様の `Scheme's number datatypes <http://schemers.org/Documents/"
"Standards/R5RS/HTML/r5rs-Z-H-9.html#%_sec_6.2>`__ 。"

#: ../../whatsnew/2.6.rst:1440
msgid "The :mod:`fractions` Module"
msgstr ":mod:`fractions` モジュール"

#: ../../whatsnew/2.6.rst:1442
msgid ""
"To fill out the hierarchy of numeric types, the :mod:`fractions` module "
"provides a rational-number class.  Rational numbers store their values as a "
"numerator and denominator forming a fraction, and can exactly represent "
"numbers such as ``2/3`` that floating-point numbers can only approximate."
msgstr ""
"数値型階層を埋めるべく、 :mod:`fractions` モジュールが有理数クラスを提供して"
"います。有理数は分子(numerator)と分母(denominator)で構成される分数としてその"
"値を格納し、浮動小数点数では近似しか出来ない ``2/3`` のような数を正確に表現出"
"来ます。"

#: ../../whatsnew/2.6.rst:1448
msgid ""
"The :class:`Fraction` constructor takes two :class:`Integral` values that "
"will be the numerator and denominator of the resulting fraction. ::"
msgstr ""
":class:`Fraction` のコンストラクタは 2 つの :class:`Integral` 値を取り、それ"
"らはそれぞれ結果の分数の分子と分母になります。::"

#: ../../whatsnew/2.6.rst:1461
msgid ""
"For converting floating-point numbers to rationals, the float type now has "
"an :meth:`as_integer_ratio()` method that returns the numerator and "
"denominator for a fraction that evaluates to the same floating-point value::"
msgstr ""
"浮動小数点数を有理数に変換するのに、浮動小数点数型に :meth:"
"`as_integer_ratio()` メソッドが追加されています。これはそれを評価して分数の分"
"子と分母を返します::"

#: ../../whatsnew/2.6.rst:1473
msgid ""
"Note that values that can only be approximated by floating-point numbers, "
"such as 1./3, are not simplified to the number being approximated; the "
"fraction attempts to match the floating-point value **exactly**."
msgstr ""
"1./3 のような浮動小数点数で近似にしかならない値は、近似して単純化されたりはし"
"ないことに注意してください; その分数は浮動小数点数に **正確に** 合うように試"
"みられます。"

#: ../../whatsnew/2.6.rst:1478
msgid ""
"The :mod:`fractions` module is based upon an implementation by Sjoerd "
"Mullender that was in Python's :file:`Demo/classes/` directory for a long "
"time.  This implementation was significantly updated by Jeffrey Yasskin."
msgstr ""
":mod:`fractions` モジュールは、ずっと長い間 Python の :file:`Demo/classes/` "
"ディレクトリにいた Sjoerd Mullender による実装に基いています。この実装が "
"Jeffrey Yasskin によって大幅に更新されました。"

#: ../../whatsnew/2.6.rst:1485
msgid "Other Language Changes"
msgstr "その他の言語変更"

#: ../../whatsnew/2.6.rst:1487
msgid "Some smaller changes made to the core Python language are:"
msgstr "Python 言語コアに小さな変更がいくつか行われました:"

#: ../../whatsnew/2.6.rst:1489
msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can now "
"be executed directly by passing their name to the interpreter. The directory "
"or zip archive is automatically inserted as the first entry in sys.path.  "
"(Suggestion and initial patch by Andy Chu, subsequently revised by Phillip "
"J. Eby and Nick Coghlan; :issue:`1739468`.)"
msgstr ""
":file:`__main__.py` を含んだディレクトリ名と zip アーカイブ名をインタプリタに"
"渡して直接実行出来るようになりました。そのディレクトリと zip アーカイブは自動"
"的に sys.path エントリの先頭に追加されます。(Suggestion and initial patch by "
"Andy Chu, subsequently revised by Phillip J. Eby and Nick Coghlan; :issue:"
"`1739468`.)"

#: ../../whatsnew/2.6.rst:1496
msgid ""
"The :func:`hasattr` function was catching and ignoring all errors, under the "
"assumption that they meant a :meth:`__getattr__` method was failing somehow "
"and the return value of :func:`hasattr` would therefore be ``False``.  This "
"logic shouldn't be applied to :exc:`KeyboardInterrupt` and :exc:"
"`SystemExit`, however; Python 2.6 will no longer discard such exceptions "
"when :func:`hasattr` encounters them.  (Fixed by Benjamin Peterson; :issue:"
"`2196`.)"
msgstr ""
":func:`hasattr` 関数は :meth:`__getattr__` メソッドが例外を起こすと何か失敗し"
"たのだと仮定して、全て捕捉して無視して ``False`` を返していました。ですがその"
"ロジックは :exc:`KeyboardInterrupt` と :exc:`SystemExit` まで捕まえるべきでは"
"なかったのです。Python 2.6 では :func:`hasattr` はもはやそれら例外に出会って"
"もそれを捨てません。 (Fixed by Benjamin Peterson; :issue:`2196`.)"

#: ../../whatsnew/2.6.rst:1504
msgid ""
"When calling a function using the ``**`` syntax to provide keyword "
"arguments, you are no longer required to use a Python dictionary; any "
"mapping will now work::"
msgstr ""
"``**`` 構文を使ってキーワード引数を許容する関数を呼び出すのに、もう Python 辞"
"書を使う必要はありません; 任意のマッピングプロトコルをサポートするオブジェク"
"トで今では動作します::"

#: ../../whatsnew/2.6.rst:1517
msgid "(Contributed by Alexander Belopolsky; :issue:`1686487`.)"
msgstr "(Contributed by Alexander Belopolsky; :issue:`1686487`.)"

#: ../../whatsnew/2.6.rst:1519
msgid ""
"It's also become legal to provide keyword arguments after a ``*args`` "
"argument to a function call. ::"
msgstr ""
"同時に、 ``*args`` 引数のあとでキーワード引数を与える関数呼び出しも今では合法"
"です。::"

#: ../../whatsnew/2.6.rst:1528
msgid ""
"Previously this would have been a syntax error. (Contributed by Amaury "
"Forgeot d'Arc; :issue:`3473`.)"
msgstr ""
"以前はこれは構文エラーになっていました。 (Contributed by Amaury Forgeot "
"d'Arc; :issue:`3473`.)"

#: ../../whatsnew/2.6.rst:1531
msgid ""
"A new builtin, ``next(iterator, [default])`` returns the next item from the "
"specified iterator.  If the *default* argument is supplied, it will be "
"returned if *iterator* has been exhausted; otherwise, the :exc:"
"`StopIteration` exception will be raised.  (Backported in :issue:`2719`.)"
msgstr ""
"新しいビルトイン ``next(iterator, [default])`` は指定したイテレータより次のア"
"イテムを返します。 *iterator* が使い果たされている場合、 *default* 引数が与え"
"られていれがこれを、そうでなければ :exc:`StopIteration` 例外を起こします。 "
"(Backported in :issue:`2719`.)"

#: ../../whatsnew/2.6.rst:1537
msgid ""
"Tuples now have :meth:`index` and :meth:`count` methods matching the list "
"type's :meth:`index` and :meth:`count` methods::"
msgstr ""
"タプルがリストと同じく :meth:`index` と :meth:`count` メソッドを持つように"
"なっています::"

#: ../../whatsnew/2.6.rst:1546
msgid "(Contributed by Raymond Hettinger)"
msgstr "(Contributed by Raymond Hettinger)"

#: ../../whatsnew/2.6.rst:1548
msgid ""
"The built-in types now have improved support for extended slicing syntax, "
"accepting various combinations of ``(start, stop, step)``. Previously, the "
"support was partial and certain corner cases wouldn't work. (Implemented by "
"Thomas Wouters.)"
msgstr ""
"ビルトイン型が拡張スライス構文をサポートするために改善されています。色々な "
"``(start, stop, step)`` 組み合わせを受け付けます。以前はこれのサポートは限定"
"的で、ものによっては動作しませんでした。 (Implemented by Thomas Wouters.)"

#: ../../whatsnew/2.6.rst:1555
msgid ""
"Properties now have three attributes, :attr:`getter`, :attr:`setter` and :"
"attr:`deleter`, that are decorators providing useful shortcuts for adding a "
"getter, setter or deleter function to an existing property. You would use "
"them like this::"
msgstr ""
"property に :attr:`getter`, :attr:`setter`, :attr:`deleter` が追加されていま"
"す。取得関数(getter)、設定関数(setter)、削除関数(deleter)を既存のプロパティに"
"追加するための便利なショートカットとして使えるデコレータです。これらはこのよ"
"うに使えます::"

#: ../../whatsnew/2.6.rst:1582
msgid ""
"Several methods of the built-in set types now accept multiple iterables: :"
"meth:`intersection`, :meth:`intersection_update`, :meth:`union`, :meth:"
"`update`, :meth:`difference` and :meth:`difference_update`."
msgstr ""
"ビルトインの set 型のいくつかのメソッドが複数イテラブルを受け付けるようになっ"
"ています: :meth:`intersection`, :meth:`intersection_update`, :meth:`union`, :"
"meth:`update`, :meth:`difference`, :meth:`difference_update` です。"

#: ../../whatsnew/2.6.rst:1596 ../../whatsnew/2.6.rst:1880
#: ../../whatsnew/2.6.rst:1901
msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Contributed by Raymond Hettinger.)"

#: ../../whatsnew/2.6.rst:1598
msgid ""
"Many floating-point features were added.  The :func:`float` function will "
"now turn the string ``nan`` into an IEEE 754 Not A Number value, and "
"``+inf`` and ``-inf`` into positive or negative infinity.  This works on any "
"platform with IEEE 754 semantics.  (Contributed by Christian Heimes; :issue:"
"`1635`.)"
msgstr ""
"たくさんの浮動小数点数機能が追加されました。 :func:`float` 関数は文字列 "
"``nan`` を IEEE 754 非数 (Not A Number) 値に変換し、 ``+inf`` と ``-inf`` は"
"正あるいは負の無限大に変換します。これは IEEE 754 セマンティクスのあらゆるプ"
"ラットフォームで動作します。 (Contributed by Christian Heimes; :issue:"
"`1635`.)"

#: ../../whatsnew/2.6.rst:1604
msgid ""
"Other functions in the :mod:`math` module, :func:`isinf` and :func:`isnan`, "
"return true if their floating-point argument is infinite or Not A Number.  (:"
"issue:`1640`)"
msgstr ""
"ほか :mod:`math` モジュールに :func:`isinf` と :func:`isnan` が追加されていま"
"す; 浮動小数点数が、前者は無限大ならば、後者は非数ならばそれぞれ真を返しま"
"す。 (:issue:`1640`)"

#: ../../whatsnew/2.6.rst:1608
msgid ""
"Conversion functions were added to convert floating-point numbers into "
"hexadecimal strings (:issue:`3008`).  These functions convert floats to and "
"from a string representation without introducing rounding errors from the "
"conversion between decimal and binary.  Floats have a :meth:`hex` method "
"that returns a string representation, and the ``float.fromhex()`` method "
"converts a string back into a number::"
msgstr ""
"浮動小数点数を 16 進表記文字列に変換する変換関数が追加されています (:issue:"
"`3008`)。これら関数は 10 進と 2 進との間の変換で起こる丸め誤差を持ち込まずに"
"浮動小数点数と文字列表現の相互変換をします。浮動小数点数は文字列表現を返す :"
"meth:`hex` メソッドを持ち、また、 ``float.fromhex()`` メソッドが文字列から浮"
"動小数点数に戻します::"

#: ../../whatsnew/2.6.rst:1625
msgid ""
"A numerical nicety: when creating a complex number from two floats on "
"systems that support signed zeros (-0 and +0), the :func:`complex` "
"constructor will now preserve the sign of the zero.  (Fixed by Mark T. "
"Dickinson; :issue:`1507`.)"
msgstr ""
"数に関する繊細さ: 符号付ゼロ (-0 と +0) をサポートするシステムで 2 つの浮動小"
"数点数から複素数を作る際に、 :func:`complex` コンストラクタがゼロの符号を維持"
"するようになりました。 (Fixed by Mark T. Dickinson; :issue:`1507`.)"

#: ../../whatsnew/2.6.rst:1630
msgid ""
"Classes that inherit a :meth:`__hash__` method from a parent class can set "
"``__hash__ = None`` to indicate that the class isn't hashable.  This will "
"make ``hash(obj)`` raise a :exc:`TypeError` and the class will not be "
"indicated as implementing the :class:`Hashable` ABC."
msgstr ""
":meth:`__hash__` メソッドを親クラスから継承するクラスは、ハッシュ出来ないこと"
"を示すのに ``__hash__ = None`` をセット出来ます。これにより ``hash(obj)`` "
"は :exc:`TypeError` を起こし、そのクラスは :class:`Hashable` ABC を実装してい"
"ないことを示します。"

#: ../../whatsnew/2.6.rst:1636
msgid ""
"You should do this when you've defined a :meth:`__cmp__` or :meth:`__eq__` "
"method that compares objects by their value rather than by identity.  All "
"objects have a default hash method that uses ``id(obj)`` as the hash value.  "
"There's no tidy way to remove the :meth:`__hash__` method inherited from a "
"parent class, so assigning ``None`` was implemented as an override.  At the "
"C level, extensions can set ``tp_hash`` to :c:func:"
"`PyObject_HashNotImplemented`. (Fixed by Nick Coghlan and Amaury Forgeot "
"d'Arc; :issue:`2235`.)"
msgstr ""
":meth:`__cmp__` か :meth:`__eq__` を定義するのにその比較にオブジェクトの身元"
"ではなくその値を使ったならば、あなたはこれをすべきです。全てのオブジェクトは"
"その値として ``id(obj)`` を使うデフォルトのハッシュ化メソッドを持っています。"
"親クラスから継承した :meth:`__hash__` を削除する整理された方法はありません。"
"ですのでオーバライドとしての ``None`` の代入が実装されました。 C API のレベル"
"では、拡張は ``tp_hash`` に :c:func:`PyObject_HashNotImplemented` をセット出"
"来ます。 (Fixed by Nick Coghlan and Amaury Forgeot d'Arc; :issue:`2235`.)"

#: ../../whatsnew/2.6.rst:1646
msgid ""
"The :exc:`GeneratorExit` exception now subclasses :exc:`BaseException` "
"instead of :exc:`Exception`.  This means that an exception handler that does "
"``except Exception:`` will not inadvertently catch :exc:`GeneratorExit`. "
"(Contributed by Chad Austin; :issue:`1537`.)"
msgstr ""
":exc:`GeneratorExit` 例外が :exc:`Exception` ではなく :exc:`BaseException` の"
"サブクラスになっています。 ``except Exception:`` をする例外ハンドラが意図せ"
"ず :exc:`GeneratorExit` 捕捉してしまうことがなくなります。 (Contributed by "
"Chad Austin; :issue:`1537`.)"

#: ../../whatsnew/2.6.rst:1652
msgid ""
"Generator objects now have a :attr:`gi_code` attribute that refers to the "
"original code object backing the generator. (Contributed by Collin Winter; :"
"issue:`1473257`.)"
msgstr ""
"ジェネレータオブジェクトが、そのジェネレータを返すオリジナルのコードオブジェ"
"クトを参照する :attr:`gi_code` 属性を持つようになりました。 (Contributed by "
"Collin Winter; :issue:`1473257`.)"

#: ../../whatsnew/2.6.rst:1656
msgid ""
"The :func:`compile` built-in function now accepts keyword arguments as well "
"as positional parameters.  (Contributed by Thomas Wouters; :issue:`1444529`.)"
msgstr ""
"ビルトイン関数 :func:`compile` が位置引数だけでなくキーワード引数も受け付ける"
"ようになりました。  (Contributed by Thomas Wouters; :issue:`1444529`.)"

#: ../../whatsnew/2.6.rst:1660
msgid ""
"The :func:`complex` constructor now accepts strings containing parenthesized "
"complex numbers, meaning that ``complex(repr(cplx))`` will now round-trip "
"values.  For example, ``complex('(3+4j)')`` now returns the value (3+4j).  (:"
"issue:`1491866`)"
msgstr ""
":func:`complex` コンストラクタが括弧で囲まれた複素数表現文字列を受け付けるよ"
"うになっています。 ``complex(repr(cplx))`` で元に戻せるということです。例え"
"ば ``complex('(3+4j)')`` は今では値 ``(3+4j)`` を返します。 (:issue:"
"`1491866`)"

#: ../../whatsnew/2.6.rst:1665
msgid ""
"The string :meth:`translate` method now accepts ``None`` as the translation "
"table parameter, which is treated as the identity transformation.   This "
"makes it easier to carry out operations that only delete characters.  "
"(Contributed by Bengt Richter and implemented by Raymond Hettinger; :issue:"
"`1193128`.)"
msgstr ""
"文字列の :meth:`translate` メソッドが変形テーブルパラメータとして ``None`` を"
"受け付けるようになりました。そのまま同じものを返す変形として扱われます。これ"
"により文字を削除する操作を実行するのが簡単になります。 (Contributed by Bengt "
"Richter and implemented by Raymond Hettinger; :issue:`1193128`.)"

#: ../../whatsnew/2.6.rst:1671
msgid ""
"The built-in :func:`dir` function now checks for a :meth:`__dir__` method on "
"the objects it receives.  This method must return a list of strings "
"containing the names of valid attributes for the object, and lets the object "
"control the value that :func:`dir` produces. Objects that have :meth:"
"`__getattr__` or :meth:`__getattribute__` methods can use this to advertise "
"pseudo-attributes they will honor. (:issue:`1591665`)"
msgstr ""
"ビルトインの :func:`dir` 関数が、受け取ったオブジェクトの :meth:`__dir__` メ"
"ソッドをチェックするようになりました。このメソッドはそのオブジェクトで妥当な"
"属性名を含む文字列のリストを返さなければなりません。これにより :func:`dir` が"
"生成する値を制御出来ます。 :meth:`__getattr__` や :meth:`__getattribute__` メ"
"ソッドを使うオブジェクトはこれを使うことで、約束するつもりの擬似属性を公表出"
"来ます。 (:issue:`1591665`)"

#: ../../whatsnew/2.6.rst:1679
msgid ""
"Instance method objects have new attributes for the object and function "
"comprising the method; the new synonym for :attr:`im_self` is :attr:"
"`__self__`, and :attr:`im_func` is also available as :attr:`__func__`. The "
"old names are still supported in Python 2.6, but are gone in 3.0."
msgstr ""
"インスタンスメソッドオブジェクトが、そのメソッドを包含するオブジェクトと関数"
"のための新たな属性を持つようになっています; :attr:`im_self` への新しい別名"
"が :attr:`__self__` です。また :attr:`im_func` も :attr:`__func__` として利用"
"可能です。古い名前は Python 2.6 で引き続きサポートされますが、3.0 ではいなく"
"なります。"

#: ../../whatsnew/2.6.rst:1684
msgid ""
"An obscure change: when you use the :func:`locals` function inside a :"
"keyword:`class` statement, the resulting dictionary no longer returns free "
"variables.  (Free variables, in this case, are variables referenced in the :"
"keyword:`!class` statement  that aren't attributes of the class.)"
msgstr ""
"目立たない変更: :func:`locals` 関数を :keyword:`class` ステートメント内で使う"
"際、結果の辞書はもはや自由変数を返しません。(この場合、自由変数は :keyword:`!"
"class` ステートメント内で参照される変数で、クラスの属性ではありません。)"

#: ../../whatsnew/2.6.rst:1693
msgid "Optimizations"
msgstr "最適化"

#: ../../whatsnew/2.6.rst:1695
msgid ""
"The :mod:`warnings` module has been rewritten in C.  This makes it possible "
"to invoke warnings from the parser, and may also make the interpreter's "
"startup faster. (Contributed by Neal Norwitz and Brett Cannon; :issue:"
"`1631171`.)"
msgstr ""
":mod:`warnings` モジュールが C で書き直されました。これにより警告をパーサから"
"発行出来、また、インタプリタの起動が高速化しています。 (Contributed by Neal "
"Norwitz and Brett Cannon; :issue:`1631171`.)"

#: ../../whatsnew/2.6.rst:1700
msgid ""
"Type objects now have a cache of methods that can reduce the work required "
"to find the correct method implementation for a particular class; once "
"cached, the interpreter doesn't need to traverse base classes to figure out "
"the right method to call. The cache is cleared if a base class or the class "
"itself is modified, so the cache should remain correct even in the face of "
"Python's dynamic nature. (Original optimization implemented by Armin Rigo, "
"updated for Python 2.6 by Kevin Jacobs; :issue:`1700288`.)"
msgstr ""
"型オブジェクトがメソッドのキャッシュを持つようになっています。これは個別のク"
"ラスについての正しいメソッド実装を見つけるのに必要な仕事を減らします。いった"
"んキャッシュされれば、インタプリタは呼び出さなければならない正しいメソッドを"
"知るために基底クラス群を横断しなくてもよくなります。基底クラスやクラス自身が"
"修正されれば、Python の動的な振る舞いの面においても正しくあり続けなければなら"
"ないので、キャッシュはクリアされます。 (Original optimization implemented by "
"Armin Rigo, updated for Python 2.6 by Kevin Jacobs; :issue:`1700288`.)"

#: ../../whatsnew/2.6.rst:1710
msgid ""
"By default, this change is only applied to types that are included with the "
"Python core.  Extension modules may not necessarily be compatible with this "
"cache, so they must explicitly add :c:macro:`Py_TPFLAGS_HAVE_VERSION_TAG` to "
"the module's ``tp_flags`` field to enable the method cache. (To be "
"compatible with the method cache, the extension module's code must not "
"directly access and modify the ``tp_dict`` member of any of the types it "
"implements.  Most modules don't do this, but it's impossible for the Python "
"interpreter to determine that. See :issue:`1878` for some discussion.)"
msgstr ""
"デフォルトではこの変更は、Python コアに含まれる型のみに適用されます。拡張モ"
"ジュールは必ずしもこのキャッシュに互換ではなく、拡張モジュールはメソッド"
"キャッシュを有効にするために、モジュールの ``tp_flags`` フィールドに明示的"
"に :c:macro:`Py_TPFLAGS_HAVE_VERSION_TAG` を追加しなければなりません。(このメ"
"ソッドキャッシュに対して互換であるためには、拡張モジュールのコードは、それが"
"実装するどんな型についても ``tp_dict`` メンバに直接アクセスしたり修正したりし"
"てはなりません。ほとんどのモジュールはこれをしていませんが、Python インタプリ"
"タがそれを検知することは出来ません。 :issue:`1878` にいくらかの議論があります"
"ので参照してください。)"

#: ../../whatsnew/2.6.rst:1721
msgid ""
"Function calls that use keyword arguments are significantly faster by doing "
"a quick pointer comparison, usually saving the time of a full string "
"comparison.  (Contributed by Raymond Hettinger, after an initial "
"implementation by Antoine Pitrou; :issue:`1819`.)"
msgstr ""
"キーワード引数を使う関数呼び出しが、素早くポインタで比較することで顕著に高速"
"化しています。これは常に文字列丸ごとを比較する時間を省きます。 (Contributed "
"by Raymond Hettinger, after an initial implementation by Antoine Pitrou; :"
"issue:`1819`.)"

#: ../../whatsnew/2.6.rst:1726
msgid ""
"All of the functions in the :mod:`struct` module have been rewritten in C, "
"thanks to work at the Need For Speed sprint. (Contributed by Raymond "
"Hettinger.)"
msgstr ""
":mod:`struct` モジュールの全ての関数が C で書き換えられました。「Need For "
"Speed スプリント」での作業の成果です。 (Contributed by Raymond Hettinger.)"

#: ../../whatsnew/2.6.rst:1730
msgid ""
"Some of the standard built-in types now set a bit in their type objects.  "
"This speeds up checking whether an object is a subclass of one of these "
"types.  (Contributed by Neal Norwitz.)"
msgstr ""
"いくつかの標準ビルトイン型が、その型オブジェクトにビットをセットするようにな"
"りました。これは、オブジェクトがそれら型のサブクラスの一つであるかどうかの"
"チェックするのを高速化します。 (Contributed by Neal Norwitz.)"

#: ../../whatsnew/2.6.rst:1734
msgid ""
"Unicode strings now use faster code for detecting whitespace and line "
"breaks; this speeds up the :meth:`split` method by about 25% and :meth:"
"`splitlines` by 35%. (Contributed by Antoine Pitrou.)  Memory usage is "
"reduced by using pymalloc for the Unicode string's data."
msgstr ""
"Unicode 文字列が、空白文字と改行を検出するためのコードにより高速な実装を使う"
"ようになりました; :meth:`split` メソッドでおよそ 25% の速度向上、 :meth:"
"`splitlines` メソッドでは 35% です。(Contributed by Antoine Pitrou.) Unicode "
"文字列データのために pymalloc を使うことでメモリ使用が減りました。"

#: ../../whatsnew/2.6.rst:1740
msgid ""
"The ``with`` statement now stores the :meth:`__exit__` method on the stack, "
"producing a small speedup.  (Implemented by Jeffrey Yasskin.)"
msgstr ""
"``with`` ステートメントが :meth:`__exit__` メソッドをスタック上に保存するよう"
"になり、ちょっとだけ高速化しました。 (Implemented by Jeffrey Yasskin.)"

#: ../../whatsnew/2.6.rst:1743
msgid ""
"To reduce memory usage, the garbage collector will now clear internal free "
"lists when garbage-collecting the highest generation of objects. This may "
"return memory to the operating system sooner."
msgstr ""
"メモリ使用を減らすために、一番作られたオブジェクトをガーベージコレクトする際"
"に、ガーベージコレクタが内部のフリーリストをクリアするようになりました。これ"
"はオペレーティングシステムにすぐに返されます。"

#: ../../whatsnew/2.6.rst:1752
msgid "Interpreter Changes"
msgstr "インタプリタの変更"

#: ../../whatsnew/2.6.rst:1754
msgid ""
"Two command-line options have been reserved for use by other Python "
"implementations.  The :option:`-J` switch has been reserved for use by "
"Jython for Jython-specific options, such as switches that are passed to the "
"underlying JVM.  :option:`-X` has been reserved for options specific to a "
"particular implementation of Python such as CPython, Jython, or IronPython.  "
"If either option is used with Python 2.6, the interpreter will report that "
"the option isn't currently used."
msgstr ""
"Python のほかの実装で使うために、2 つのコマンドラインオプションが予約されまし"
"た。 :option:`-J` スイッチは Jython 固有のオプションのために予約されました。"
"前提となる JVM に渡すスイッチなどに使います。 :option:`-X` スイッチは個別の "
"Python 実装、たとえば CPython、Jython や IronPython のために予約されました。"
"Python 2.6 でどちらかのオプションが使われると、インタプリタはそのオプションは"
"現在使われていないことを報告します。"

#: ../../whatsnew/2.6.rst:1762
msgid ""
"Python can now be prevented from writing :file:`.pyc` or :file:`.pyo` files "
"by supplying the :option:`-B` switch to the Python interpreter, or by "
"setting the :envvar:`PYTHONDONTWRITEBYTECODE` environment variable before "
"running the interpreter.  This setting is available to Python programs as "
"the ``sys.dont_write_bytecode`` variable, and Python code can change the "
"value to modify the interpreter's behaviour.  (Contributed by Neal Norwitz "
"and Georg Brandl.)"
msgstr ""
"Python インタプリタに :option:`-B` スイッチを渡すか、インタプリタ実行前に環境"
"変数 :envvar:`PYTHONDONTWRITEBYTECODE` をセットするかのどちらかで、 :file:`."
"pyc` や :file:`.pyo` が作られないようにすることが出来るようになりました。この"
"設定は Python プログラムから ``sys.dont_write_bytecode`` 変数として利用可能"
"で、Python コードはこの変数を変更してインタプリタの振る舞いを変えることが出来"
"ます。 (Contributed by Neal Norwitz and Georg Brandl.)"

#: ../../whatsnew/2.6.rst:1770
msgid ""
"The encoding used for standard input, output, and standard error can be "
"specified by setting the :envvar:`PYTHONIOENCODING` environment variable "
"before running the interpreter.  The value should be a string in the form "
"``<encoding>`` or ``<encoding>:<errorhandler>``. The *encoding* part "
"specifies the encoding's name, e.g. ``utf-8`` or ``latin-1``; the optional "
"*errorhandler* part specifies what to do with characters that can't be "
"handled by the encoding, and  should be one of \"error\", \"ignore\", or "
"\"replace\".   (Contributed by Martin von Löwis.)"
msgstr ""
"標準入力、標準出力、標準エラー出力に使うエンコーディングを、インタプリタ起動"
"前に環境変数 :envvar:`PYTHONIOENCODING` を設定することで指定出来るようになり"
"ました。値は ``<encoding>`` または ``<encoding>:<errorhandler>`` 形式の文字列"
"でなければなりません。 *encoding* 部分はエンコーディングの名前で、例えば "
"``utf-8`` や ``latin-1`` です; 省略可能な *errorhandler* 部分はエンコーディン"
"グによって処理出来ない文字に対して何をするのかを指定するもので、 \"error\", "
"\"ignore\", \"replace\" のどれかです。 (Contributed by Martin von Löwis.)"

#: ../../whatsnew/2.6.rst:1783
msgid "New and Improved Modules"
msgstr "新しいモジュールと改良されたモジュール"

#: ../../whatsnew/2.6.rst:1785
msgid ""
"As in every release, Python's standard library received a number of "
"enhancements and bug fixes.  Here's a partial list of the most notable "
"changes, sorted alphabetically by module name. Consult the :file:`Misc/NEWS` "
"file in the source tree for a more complete list of changes, or look through "
"the Subversion logs for all the details."
msgstr ""
"全てのリリースに置いて、 Python の標準ライブラリはたくさんの改良とバグ修正が"
"されてきました。ここでは一部の注目に値する変更を、モジュール名で辞書順ソート"
"してリストアップしています。もっと完全な変更リストが見たければ、ソースツリー"
"内の :file:`Misc/NEWS` ファイルか、全ての完全な詳細が入っている Subversion の"
"ログを参照してください。"

#: ../../whatsnew/2.6.rst:1791
msgid ""
"The :mod:`asyncore` and :mod:`asynchat` modules are being actively "
"maintained again, and a number of patches and bugfixes were applied.  "
"(Maintained by Josiah Carlson; see :issue:`1736190` for one patch.)"
msgstr ""
":mod:`asyncore` と :mod:`asynchat` モジュールが再び活発に保守され、多数のパッ"
"チとバグ修正が適用されました。 (Maintained by Josiah Carlson; see :issue:"
"`1736190` for one patch.)"

#: ../../whatsnew/2.6.rst:1796
msgid ""
"The :mod:`bsddb` module also has a new maintainer, Jesús Cea Avión, and the "
"package is now available as a standalone package.  The web page for the "
"package is `www.jcea.es/programacion/pybsddb.htm <https://www.jcea.es/"
"programacion/pybsddb.htm>`__. The plan is to remove the package from the "
"standard library in Python 3.0, because its pace of releases is much more "
"frequent than Python's."
msgstr ""
":mod:`bsddb` モジュールは新しいメンテナ Jesús Cea Avión を得て、パッケージは"
"今ではスタンドアロンのパッケージとして入手可能です。パッケージのウェブページ"
"は `www.jcea.es/programacion/pybsddb.htm <https://www.jcea.es/programacion/"
"pybsddb.htm>`__ です。このモジュールは Python 3.0 では標準ライブラリからは削"
"除される予定です。というのも、これの更新ペースは Python のそれよりも遥かに頻"
"繁だからです。"

#: ../../whatsnew/2.6.rst:1804
msgid ""
"The :mod:`bsddb.dbshelve` module now uses the highest pickling protocol "
"available, instead of restricting itself to protocol 1. (Contributed by W. "
"Barnes.)"
msgstr ""
":mod:`bsddb.dbshelve` モジュールは pickle 化で、プロトコル 1 に制限するのでは"
"なく利用出来る一番高いプロトコルバージョンを使うようになりました。"
"(Contributed by W. Barnes.)"

#: ../../whatsnew/2.6.rst:1808
msgid ""
"The :mod:`cgi` module will now read variables from the query string of an "
"HTTP POST request.  This makes it possible to use form actions with URLs "
"that include query strings such as \"/cgi-bin/add.py?category=1\".  "
"(Contributed by Alexandre Fiori and Nubis; :issue:`1817`.)"
msgstr ""
":mod:`cgi` モジュールが HTTP POST リクエストのクエリ文字列を読み取るようにな"
"りました。これにより URL に \"/cgi-bin/add.py?category=1\" のようにクエリ文字"
"列を含む form アクションに使えるようになります。 (Contributed by Alexandre "
"Fiori and Nubis; :issue:`1817`.)"

#: ../../whatsnew/2.6.rst:1814
msgid ""
"The :func:`parse_qs` and :func:`parse_qsl` functions have been relocated "
"from the :mod:`cgi` module to the :mod:`urlparse` module. The versions still "
"available in the :mod:`cgi` module will trigger :exc:"
"`PendingDeprecationWarning` messages in 2.6 (:issue:`600362`)."
msgstr ""
":func:`parse_qs`, :func:`parse_qsl` 関数を :mod:`cgi` モジュールから :mod:"
"`urlparse` モジュールに移動しました。もとのバージョンは :mod:`cgi` モジュール"
"にまだいて、2.6 では呼び出すと :exc:`PendingDeprecationWarning` メッセージが"
"報告されます。 (:issue:`600362`)."

#: ../../whatsnew/2.6.rst:1820
msgid ""
"The :mod:`cmath` module underwent extensive revision, contributed by Mark "
"Dickinson and Christian Heimes. Five new functions were added:"
msgstr ""
":mod:`cmath` モジュールに大掛かりな改訂が行われました。Mark Dickinson と "
"Christian Heimes による貢献です。5 つの新しい関数が追加されました:"

#: ../../whatsnew/2.6.rst:1824
msgid ""
":func:`polar` converts a complex number to polar form, returning the modulus "
"and argument of the complex number."
msgstr ""
":func:`polar` は複素数を極形式 (polar form) に変換し、複素数の絶対値 "
"(modulus) と偏角 (argument) を返します。"

#: ../../whatsnew/2.6.rst:1827
msgid ""
":func:`rect` does the opposite, turning a modulus, argument pair back into "
"the corresponding complex number."
msgstr ":func:`rect` はその逆で、絶対値と偏角から対応する複素数に戻します。"

#: ../../whatsnew/2.6.rst:1830
msgid ""
":func:`phase` returns the argument (also called the angle) of a complex "
"number."
msgstr ":func:`phase` は複素数の偏角 (angle とも呼ばれています) を返します。"

#: ../../whatsnew/2.6.rst:1833
msgid ""
":func:`isnan` returns True if either the real or imaginary part of its "
"argument is a NaN."
msgstr ""
":func:`isnan` はその引数の実数部か虚数部のどちらかが NaN であれば真を返しま"
"す。"

#: ../../whatsnew/2.6.rst:1836
msgid ""
":func:`isinf` returns True if either the real or imaginary part of its "
"argument is infinite."
msgstr ""
":func:`isinf` はその引数の実数部か虚数部のどちらかが無限大であれば真を返しま"
"す。"

#: ../../whatsnew/2.6.rst:1839
msgid ""
"The revisions also improved the numerical soundness of the :mod:`cmath` "
"module.  For all functions, the real and imaginary parts of the results are "
"accurate to within a few units of least precision (ulps) whenever possible.  "
"See :issue:`1381` for the details.  The branch cuts for :func:`asinh`, :func:"
"`atanh`: and :func:`atan` have also been corrected."
msgstr ""
"その改訂では、 :mod:`cmath` モジュールの数値的安定性も改善されました。全ての"
"関数で、結果の実数部、虚数部は最小精度単位で少しの範囲内で、可能な限り正確で"
"す。詳細は :issue:`1381` を見てください。 :func:`asinh`, :func:`atanh`:, :"
"func:`atan` に対する分岐截線 (branch cut) も修正されています。\\ \\ (--- 訳"
"注: units of least precision に対する枯れた訳語はないようなので最小精度単位と"
"していますが仮数部の最下位ビットのことです。ので、within a few ulps は下位数"
"ビットという意味。分岐截線 (branch cut) は一般的な訳語かどうかはわかりません"
"が、wikipedia から採りました。---)"

#: ../../whatsnew/2.6.rst:1846
msgid ""
"The tests for the module have been greatly expanded; nearly 2000 new test "
"cases exercise the algebraic functions."
msgstr ""
"そのモジュールのテストは大変拡大しました; およそ 2000 の新たなテストケースが"
"数学関数群を鍛え上げます。"

#: ../../whatsnew/2.6.rst:1849
msgid ""
"On IEEE 754 platforms, the :mod:`cmath` module now handles IEEE 754 special "
"values and floating-point exceptions in a manner consistent with Annex 'G' "
"of the C99 standard."
msgstr ""
"IEEE 754 プラットフォームでは :mod:`cmath` モジュールは、IEEE 754 の特殊値と"
"浮動小数点例外を、C99 標準の付録 'G' での一貫性のある方法で処理するようになり"
"ました。"

#: ../../whatsnew/2.6.rst:1853
msgid ""
"A new data type in the :mod:`collections` module: :class:"
"`namedtuple(typename, fieldnames)` is a factory function that creates "
"subclasses of the standard tuple whose fields are accessible by name as well "
"as index.  For example::"
msgstr ""
":mod:`collections` モジュールに新しいデータ型が追加されています: :class:"
"`namedtuple(typename, fieldnames)` は、添え字だけでなく名前でもアクセス出来る"
"フィールドを持った標準タプルのサブクラスを作るファクトリ関数です。例えば::"

#: ../../whatsnew/2.6.rst:1875
msgid ""
"Several places in the standard library that returned tuples have been "
"modified to return :class:`namedtuple` instances.  For example, the :meth:"
"`Decimal.as_tuple` method now returns a named tuple with :attr:`sign`, :attr:"
"`digits`, and :attr:`exponent` fields."
msgstr ""
"標準ライブラリのいくつかの箇所で :class:`namedtuple` インスタンスを返すように"
"修正されています。例えば :meth:`Decimal.as_tuple` メソッドは :attr:`sign`, :"
"attr:`digits`, :attr:`exponent` フィールドを持った名前付きタプルを返すように"
"なりました。"

#: ../../whatsnew/2.6.rst:1882
msgid ""
"Another change to the :mod:`collections` module is that the :class:`deque` "
"type now supports an optional *maxlen* parameter; if supplied, the deque's "
"size will be restricted to no more than *maxlen* items.  Adding more items "
"to a full deque causes old items to be discarded."
msgstr ""
":mod:`collections` モジュールのもう一つの変更は、 :class:`deque` 型が省略可能"
"な *maxlen* パラメータをサポートするようになったことです; 与えられると、 "
"deque のサイズが要素数 *maxlen* を超えないように制限されます。お腹いっぱいの "
"deque にさらに要素を追加すると、古いものから捨てられます。"

#: ../../whatsnew/2.6.rst:1903
msgid ""
"The :mod:`Cookie` module's :class:`Morsel` objects now support an :attr:"
"`httponly` attribute.  In some browsers. cookies with this attribute set "
"cannot be accessed or manipulated by JavaScript code. (Contributed by Arvin "
"Schnell; :issue:`1638033`.)"
msgstr ""
":mod:`Cookie` モジュールの :class:`Morsel` オブジェクトが :attr:`httponly` 属"
"性をサポートするようになりました。いくつかのブラウザでは、この属性を付けた"
"クッキーは JavaScript コードからアクセスや操作が出来ません。 (Contributed by "
"Arvin Schnell; :issue:`1638033`.)"

#: ../../whatsnew/2.6.rst:1908
msgid ""
"A new window method in the :mod:`curses` module, :meth:`chgat`, changes the "
"display attributes for a certain number of characters on a single line.  "
"(Contributed by Fabian Kreutz.)"
msgstr ""
":mod:`curses` モジュールの新しい window メソッド :meth:`chgat` は、一行での指"
"定数ぶん文字の表示属性を変更します。 (Contributed by Fabian Kreutz.)"

#: ../../whatsnew/2.6.rst:1918
msgid ""
"The :class:`Textbox` class in the :mod:`curses.textpad` module now supports "
"editing in insert mode as well as overwrite mode. Insert mode is enabled by "
"supplying a true value for the *insert_mode* parameter when creating the :"
"class:`Textbox` instance."
msgstr ""
":mod:`curses.textpad` モジュールの :class:`Textbox` クラスが上書きモードのほ"
"かに挿入モード編集をサポートするようになりました。挿入モードは :class:"
"`Textbox` インスタンス構築時に *insert_mode* パラメータを真にすることで有効に"
"なります。"

#: ../../whatsnew/2.6.rst:1923
msgid ""
"The :mod:`datetime` module's :meth:`strftime` methods now support a ``%f`` "
"format code that expands to the number of microseconds in the object, zero-"
"padded on the left to six places.  (Contributed by Skip Montanaro; :issue:"
"`1158`.)"
msgstr ""
":mod:`datetime` モジュールの :meth:`strftime` メソッドが ``%f`` 書式化コード"
"をサポートするようになりました。これはオブジェクトのマイクロ秒をミリ秒として"
"ゼロ埋めで 6 桁で展開します。 (---訳注: 言葉だけだとどうしても伝わりにくいで"
"すが、フィールドとしてミリ秒を持たずにマイクロ秒を持っている datetime で「秒."
"ミリ秒」という表記をするのにマイクロ秒精度まで表示するのが目的です。ですので "
"654 ミリ秒が「654000」と書式化されますし、32 ミリ秒は「032000」です。---) "
"(Contributed by Skip Montanaro; :issue:`1158`.)"

#: ../../whatsnew/2.6.rst:1928
msgid ""
"The :mod:`decimal` module was updated to version 1.66 of `the General "
"Decimal Specification <http://speleotrove.com/decimal/decarith.html>`__.  "
"New features include some methods for some basic mathematical functions such "
"as :meth:`exp` and :meth:`log10`::"
msgstr ""
":mod:`decimal` モジュールが `the General Decimal Specification <http://"
"speleotrove.com/decimal/decarith.html>`__ のバージョン 1.55 に更新されまし"
"た。新しい機能には :meth:`exp` や :meth:`log10` のようないくつかの基礎的な数"
"学関数が含まれます::"

#: ../../whatsnew/2.6.rst:1940
msgid ""
"The :meth:`as_tuple` method of :class:`Decimal` objects now returns a named "
"tuple with :attr:`sign`, :attr:`digits`, and :attr:`exponent` fields."
msgstr ""
":class:`Decimal` クラスの :meth:`as_tuple` メソッドが :attr:`sign`, :attr:"
"`digits`, :attr:`exponent` フィールドを持った名前付きタプルを返すようになりま"
"した。"

#: ../../whatsnew/2.6.rst:1943
msgid ""
"(Implemented by Facundo Batista and Mark Dickinson.  Named tuple support "
"added by Raymond Hettinger.)"
msgstr ""
"(Implemented by Facundo Batista and Mark Dickinson.  Named tuple support "
"added by Raymond Hettinger.)"

#: ../../whatsnew/2.6.rst:1946
msgid ""
"The :mod:`difflib` module's :class:`SequenceMatcher` class now returns named "
"tuples representing matches, with :attr:`a`, :attr:`b`, and :attr:`size` "
"attributes. (Contributed by Raymond Hettinger.)"
msgstr ""
":mod:`difflib` モジュールの :class:`SequenceMatcher` クラスが、マッチを :"
"attr:`a`, :attr:`b`, :attr:`size` 属性を持つ名前付きタプルで返すようになりま"
"した。 (Contributed by Raymond Hettinger.)"

#: ../../whatsnew/2.6.rst:1951
msgid ""
"An optional ``timeout`` parameter, specifying a timeout measured in seconds, "
"was added to the :class:`ftplib.FTP` class constructor as well as the :meth:"
"`connect` method.  (Added by Facundo Batista.) Also, the :class:`FTP` "
"class's :meth:`storbinary` and :meth:`storlines` now take an optional "
"*callback* parameter that will be called with each block of data after the "
"data has been sent. (Contributed by Phil Schwartz; :issue:`1221598`.)"
msgstr ""
":class:`ftplib.FTP` クラスのコンストラクタと :meth:`connect` メソッドに省略可"
"能 ``timeout`` パラメータが追加されました。タイムアウトを秒で指定します。"
"(Added by Facundo Batista.) また、 :class:`FTP` クラスの :meth:`storbinary` "
"と :meth:`storlines` メソッドが *callback* パラメータを新たに受け取ります。こ"
"れはデータが送信されたあとでデータの各ブロックごとに呼び出されます。 "
"(Contributed by Phil Schwartz; :issue:`1221598`.)"

#: ../../whatsnew/2.6.rst:1959
msgid ""
"The :func:`reduce` built-in function is also available in the :mod:"
"`functools` module.  In Python 3.0, the builtin has been dropped and :func:"
"`reduce` is only available from :mod:`functools`; currently there are no "
"plans to drop the builtin in the 2.x series. (Patched by Christian Heimes; :"
"issue:`1739906`.)"
msgstr ""
"ビルトイン関数の :func:`reduce` が :mod:`functools` モジュールでも利用可能で"
"す。Python 3.0 ではビルトイン関数は削除されて :mod:`functools` のものだけが使"
"えます; 現在のところ 2.x シリーズでビルトイン版を削除する計画はありません。 "
"(Patched by Christian Heimes; :issue:`1739906`.) (---訳注: 2.7 でも削除されて"
"いません。使用を検出するには :option:`!-3` オプションなどで警告をチェックして"
"ください。 ---)"

#: ../../whatsnew/2.6.rst:1965
msgid ""
"When possible, the :mod:`getpass` module will now use :file:`/dev/tty` to "
"print a prompt message and read the password, falling back to standard error "
"and standard input.  If the password may be echoed to the terminal, a "
"warning is printed before the prompt is displayed.  (Contributed by Gregory "
"P. Smith.)"
msgstr ""
"可能な場合には、 :mod:`getpass` モジュールはプロンプトメッセージ出力とパス"
"ワードの読み取りに :file:`/dev/tty` を使うようになりました。利用出来ない場合"
"は標準エラー出力と標準入力が使われます。端末に入力パスワードがエコーされるか"
"もしれない場合、プロンプト表示の前に警告が出力されます。 (Contributed by "
"Gregory P. Smith.)"

#: ../../whatsnew/2.6.rst:1971
msgid ""
"The :func:`glob.glob` function can now return Unicode filenames if a Unicode "
"path was used and Unicode filenames are matched within the directory.  (:"
"issue:`1001604`)"
msgstr ""
":func:`glob.glob` 関数が、Unicode パスが使われるかディレクトリ内に Unicode "
"ファイル名がマッチすると Unicode ファイル名を返すようになりました。 (:issue:"
"`1001604`)"

#: ../../whatsnew/2.6.rst:1975
msgid ""
"A new function in the :mod:`heapq` module, ``merge(iter1, iter2, ...)``, "
"takes any number of iterables returning data in sorted order, and returns a "
"new generator that returns the contents of all the iterators, also in sorted "
"order.  For example::"
msgstr ""
":mod:`heapq` モジュールの新しい関数 ``merge(iter1, iter2, ...)`` は、任意の数"
"のソートされたデータを返すイテラブルを取り、全てのイテラブルの内容をソートさ"
"れた順に返す新しいジェネレータを返します (---訳注: 誤解を招く表現なので補足し"
"ておきますが、入力のイテレータはソート済みであることを「仮定」し、出力のジェ"
"ネレータは「入力が主張している」順序に従うだけです。入力がソートされていなく"
"ても並べ替えられるわけではありません。リファレンスにはここはきちんと書かれて"
"います。---)。例えば::"

#: ../../whatsnew/2.6.rst:1983
msgid ""
"Another new function, ``heappushpop(heap, item)``, pushes *item* onto "
"*heap*, then pops off and returns the smallest item. This is more efficient "
"than making a call to :func:`heappush` and then :func:`heappop`."
msgstr ""
"もう一つの新たな関数 ``heappushpop(heap, item)`` は、 *item* を *heap* に "
"push した後、pop を行って *heap* から最初の要素を返します。この一続きの動作"
"を :func:`heappush` に引き続いて :func:`heappop` を別々に呼び出すよりも効率的"
"に実行します。"

#: ../../whatsnew/2.6.rst:1988
msgid ""
":mod:`heapq` is now implemented to only use less-than comparison, instead of "
"the less-than-or-equal comparison it previously used. This makes :mod:"
"`heapq`'s usage of a type match the :meth:`list.sort` method. (Contributed "
"by Raymond Hettinger.)"
msgstr ""
":mod:`heapq` は以前使っていた「以下(``<=``)」比較ではなく「より小さい"
"(``<``)」比較だけを使って実装されています。これにより :mod:`heapq` に格納する"
"型の要件が :meth:`list.sort` メソッドに合致します。 (Contributed by Raymond "
"Hettinger.)"

#: ../../whatsnew/2.6.rst:1994
msgid ""
"An optional ``timeout`` parameter, specifying a timeout measured in seconds, "
"was added to the :class:`httplib.HTTPConnection` and :class:"
"`HTTPSConnection` class constructors.  (Added by Facundo Batista.)"
msgstr ""
"省略可能パラメータ ``timeout`` が :class:`httplib.HTTPConnection` と :class:"
"`HTTPSConnection` クラスのコンストラクタに追加されました。タイムアウトを秒で"
"指定します。 (Added by Facundo Batista.)"

#: ../../whatsnew/2.6.rst:1999
msgid ""
"Most of the :mod:`inspect` module's functions, such as :func:`getmoduleinfo` "
"and :func:`getargs`, now return named tuples. In addition to behaving like "
"tuples, the elements of the  return value can also be accessed as "
"attributes. (Contributed by Raymond Hettinger.)"
msgstr ""
":func:`getmoduleinfo` や :func:`getargs` のようなほとんどの :mod:`inspect` モ"
"ジュール関数が、名前付きタプルを返すようになりました。タプルのように振る舞う"
"だけでなく、属性でアクセスすることも出来ます。 (Contributed by Raymond "
"Hettinger.)"

#: ../../whatsnew/2.6.rst:2005
msgid ""
"Some new functions in the module include :func:`isgenerator`, :func:"
"`isgeneratorfunction`, and :func:`isabstract`."
msgstr ""
"モジュールには :func:`isgenerator`, :func:`isgeneratorfunction`, :func:"
"`isabstract` を含むいくつかの新しい関数が追加されています。"

#: ../../whatsnew/2.6.rst:2009
msgid "The :mod:`itertools` module gained several new functions."
msgstr ":mod:`itertools` モジュールにいくつかの関数が追加されています。"

#: ../../whatsnew/2.6.rst:2011
msgid ""
"``izip_longest(iter1, iter2, ...[, fillvalue])`` makes tuples from each of "
"the elements; if some of the iterables are shorter than others, the missing "
"values are set to *fillvalue*.  For example::"
msgstr ""
"``izip_longest(iter1, iter2, ...[, fillvalue])`` はそれぞれの要素群からタプル"
"を生成します; イテラブルの要素数がほかのものより短ければ欠落値として "
"*fillvalue* が埋められます。例えば::"

#: ../../whatsnew/2.6.rst:2018
msgid ""
"``product(iter1, iter2, ..., [repeat=N])`` returns the Cartesian product of "
"the supplied iterables, a set of tuples containing every possible "
"combination of the elements returned from each iterable. ::"
msgstr ""
"``product(iter1, iter2, ..., [repeat=N])`` は与えたイテラブルの直積 "
"(Cartesian product)、つまりそれぞれのイテラブルから返るその要素たちの全てのあ"
"りうる組み合わせを含むタプルの集合を返します。::"

#: ../../whatsnew/2.6.rst:2027
msgid ""
"The optional *repeat* keyword argument is used for taking the product of an "
"iterable or a set of iterables with themselves, repeated *N* times.  With a "
"single iterable argument, *N*-tuples are returned::"
msgstr ""
"省略可能 *repeat* キーワード引数が与えられると、イテラブルが一つであればこれ"
"が *N* 個、複数あればそのセットが *N* 回与えられたとみなします。単一のイテラ"
"ブルに対しては *N* 要素タプルのリストで返ります::"

#: ../../whatsnew/2.6.rst:2036
msgid "With two iterables, *2N*-tuples are returned. ::"
msgstr "2 つのイテラブルであれば *2N* 要素タプルのリストで返ります::"

#: ../../whatsnew/2.6.rst:2044
msgid ""
"``combinations(iterable, r)`` returns sub-sequences of length *r* from the "
"elements of *iterable*. ::"
msgstr ""
"``combinations(iterable, r)``  は、入力 *iterable* の要素からなる長さ *r* の"
"部分列を返します (---訳注: 数学の初等組み合わせ論の「組合せ (combination)」 "
"---)::"

#: ../../whatsnew/2.6.rst:2055
msgid ""
"``permutations(iter[, r])`` returns all the permutations of length *r* of "
"the iterable's elements.  If *r* is not specified, it will default to the "
"number of elements produced by the iterable. ::"
msgstr ""
"``permutations(iter[, r])`` は入力 *iterable* の長さ *r* の順列を返します。 "
"*r* が指定されなければ、イテラブルが生成する全要素数がデフォルトで使われます "
"(---訳注: 数学の初等組み合わせ論の「順列 (sequence without repetition)」また"
"は群論や組合せ論の「置換 (permutation)」。リファレンスでは訳出で置換も順列も"
"両方出てきていますが、高校教育で習う用語で「順列」が伝わりやすいのでここでは"
"「順列」としています。 ---)::"

#: ../../whatsnew/2.6.rst:2065
msgid ""
"``itertools.chain(*iterables)`` is an existing function in :mod:`itertools` "
"that gained a new constructor in Python 2.6. ``itertools.chain."
"from_iterable(iterable)`` takes a single iterable that should return other "
"iterables.  :func:`chain` will then return all the elements of the first "
"iterable, then all the elements of the second, and so on. ::"
msgstr ""
"``itertools.chain(*iterables)`` は :mod:`itertools` に元々いたものですが、新"
"しい構築方法が出来ました。Python 2.6 では、 ``itertools.chain."
"from_iterable(iterable)`` でほかのイテラブルを返す単一のイテラブルを取り、 :"
"func:`chain` は、最初のイテラブルからの全要素、次のイテラブルからの全要"
"素、…、のように返します::"

#: ../../whatsnew/2.6.rst:2075
msgid "(All contributed by Raymond Hettinger.)"
msgstr "(All contributed by Raymond Hettinger.)"

#: ../../whatsnew/2.6.rst:2077
msgid ""
"The :mod:`logging` module's :class:`FileHandler` class and its subclasses :"
"class:`WatchedFileHandler`, :class:`RotatingFileHandler`, and :class:"
"`TimedRotatingFileHandler` now have an optional *delay* parameter to their "
"constructors.  If *delay* is true, opening of the log file is deferred until "
"the first :meth:`emit` call is made.  (Contributed by Vinay Sajip.)"
msgstr ""
":mod:`logging` モジュールの :class:`FileHandler` クラスとそのサブクラスの :"
"class:`WatchedFileHandler`, :class:`RotatingFileHandler`, :class:"
"`TimedRotatingFileHandler` がそのコンストラクタで省略可能 *delay* パラメータ"
"を受け取るようになりました。 *delay* が真の場合、ログファイルのオープンは最初"
"の :meth:`emit` が呼び出されるまで延期されます。 (Contributed by Vinay "
"Sajip.)"

#: ../../whatsnew/2.6.rst:2084
msgid ""
":class:`TimedRotatingFileHandler` also has a *utc* constructor parameter.  "
"If the argument is true, UTC time will be used in determining when midnight "
"occurs and in generating filenames; otherwise local time will be used."
msgstr ""
":class:`TimedRotatingFileHandler` ではコンストラクタに *utc* パラメータも取る"
"ようになっています。これが真の場合、 ``when='midnight'`` などの切り替え時刻判"
"定とその生成ファイル名に UTC が使われます。"

#: ../../whatsnew/2.6.rst:2089
msgid "Several new functions were added to the :mod:`math` module:"
msgstr "いくつかの新しい関数が :mod:`math` モジュールに追加されました:"

#: ../../whatsnew/2.6.rst:2091
msgid ""
":func:`~math.isinf` and :func:`~math.isnan` determine whether a given float "
"is a (positive or negative) infinity or a NaN (Not a Number), respectively."
msgstr ""
":func:`~math.isinf` と :func:`~math.isnan` は与えられた浮動小数点数が、順に、"
"(正または負の) 無限大であるかどうか、非数 (NaN=Not a Number) であるかどうかを"
"返します。"

#: ../../whatsnew/2.6.rst:2094
msgid ""
":func:`~math.copysign` copies the sign bit of an IEEE 754 number, returning "
"the absolute value of *x* combined with the sign bit of *y*.  For example, "
"``math.copysign(1, -0.0)`` returns -1.0. (Contributed by Christian Heimes.)"
msgstr ""
":func:`~math.copysign` は IEEE 754 数の符号ビットをコピーします。 *x* の絶対"
"値と *y* の符号ビットを組み合わせたものを返します。例えば ``math.copysign(1, "
"-0.0)`` は -1.0 を返します。 (Contributed by Christian Heimes.)"

#: ../../whatsnew/2.6.rst:2099
msgid ""
":func:`~math.factorial` computes the factorial of a number. (Contributed by "
"Raymond Hettinger; :issue:`2138`.)"
msgstr ""
":func:`~math.factorial` は階乗を計算します。 (Contributed by Raymond "
"Hettinger; :issue:`2138`.)"

#: ../../whatsnew/2.6.rst:2102
msgid ""
":func:`~math.fsum` adds up the stream of numbers from an iterable, and is "
"careful to avoid loss of precision through using partial sums. (Contributed "
"by Jean Brouwers, Raymond Hettinger, and Mark Dickinson; :issue:`2819`.)"
msgstr ""
":func:`~math.fsum` はイテラブルからの数列を、部分和の計算を通じて精度の損失を"
"避けながら積み上げた合計の計算をします。 (Contributed by Jean Brouwers, "
"Raymond Hettinger, and Mark Dickinson; :issue:`2819`.)"

#: ../../whatsnew/2.6.rst:2107
msgid ""
":func:`~math.acosh`, :func:`~math.asinh` and :func:`~math.atanh` compute the "
"inverse hyperbolic functions."
msgstr ""
":func:`~math.acosh`, :func:`~math.asinh`, :func:`~math.atanh` は逆双曲線関数"
"を計算します。"

#: ../../whatsnew/2.6.rst:2110
msgid ":func:`~math.log1p` returns the natural logarithm of *1+x* (base *e*)."
msgstr ":func:`~math.log1p` は *1+x*  の自然対数 (底 *e* の対数) を返します。"

#: ../../whatsnew/2.6.rst:2113
msgid ""
":func:`trunc` rounds a number toward zero, returning the closest :class:"
"`Integral` that's between the function's argument and zero. Added as part of "
"the backport of `PEP 3141's type hierarchy for numbers <#pep-3141>`__."
msgstr ""
":func:`trunc` はゼロに向かう方向に丸めを行い、与えられた引数とゼロに最も近"
"い :class:`Integral` を返します。これは `PEP 3141: 数値の型階層 "
"<#pep-3141>`__ のバックポートの一部として追加されました。"

#: ../../whatsnew/2.6.rst:2118
msgid ""
"The :mod:`math` module has been improved to give more consistent behaviour "
"across platforms, especially with respect to handling of floating-point "
"exceptions and IEEE 754 special values."
msgstr ""
":mod:`math` モジュールは、特に浮動小数点例外と IEEE 754 の特殊値の処理におい"
"て、プラットフォーム間に渡る振る舞いの一貫性をさらに高めるように改善されまし"
"た。"

#: ../../whatsnew/2.6.rst:2122
msgid ""
"Whenever possible, the module follows the recommendations of the C99 "
"standard about 754's special values.  For example, ``sqrt(-1.)`` should now "
"give a :exc:`ValueError` across almost all platforms, while "
"``sqrt(float('NaN'))`` should return a NaN on all IEEE 754 platforms.  Where "
"Annex 'F' of the C99 standard recommends signaling 'divide-by-zero' or "
"'invalid', Python will raise :exc:`ValueError`. Where Annex 'F' of the C99 "
"standard recommends signaling 'overflow', Python will raise :exc:"
"`OverflowError`.  (See :issue:`711019` and :issue:`1640`.)"
msgstr ""
"可能な場合にはいつでもこのモジュールは 754 の特殊値について、C99 標準の勧告に"
"従います。例えば、 ``sqrt(-1.)`` は今ではほとんど全てのプラットフォームで :"
"exc:`ValueError` となるはずで、 ``sqrt(float('NaN'))`` は全ての IEEE 754 プ"
"ラットフォームで NaN を返すはずです。C99 標準の付録 'F' で 'divide-by-zero' "
"または 'invalid' を伝えることを勧告している箇所では Python は :exc:"
"`ValueError` を投げます。C99 標準の付録 'F' で 'overflow' を伝えることを勧告"
"している箇所では Python は :exc:`OverflowError` を投げます。 (See :issue:"
"`711019` and :issue:`1640`.)"

#: ../../whatsnew/2.6.rst:2132
msgid "(Contributed by Christian Heimes and Mark Dickinson.)"
msgstr "(Contributed by Christian Heimes and Mark Dickinson.)"

#: ../../whatsnew/2.6.rst:2134
msgid ""
":class:`~mmap.mmap` objects now have a :meth:`rfind` method that searches "
"for a substring beginning at the end of the string and searching backwards.  "
"The :meth:`find` method also gained an *end* parameter giving an index at "
"which to stop searching. (Contributed by John Lenton.)"
msgstr ""
":class:`~mmap.mmap` オブジェクトに :meth:`rfind` メソッドが追加されています。"
"部分文字列の検索を、末尾から後ろ向きに検索します。 :meth:`find` には新しい引"
"数 *end* パラメータが追加されていて、検索対象の終了位置を指定することが出来ま"
"す。 (Contributed by John Lenton.)"

#: ../../whatsnew/2.6.rst:2140
msgid ""
"The :mod:`operator` module gained a :func:`methodcaller` function that takes "
"a name and an optional set of arguments, returning a callable that will call "
"the named function on any arguments passed to it.  For example::"
msgstr ""
":mod:`operator` モジュールに :func:`methodcaller` 関数が追加されています。名"
"前と省略可能な引数を与えると、渡したその任意の引数でその名前の関数を呼び出す"
"呼び出し可能オブジェクトを返します。例えば::"

#: ../../whatsnew/2.6.rst:2150
msgid "(Contributed by Georg Brandl, after a suggestion by Gregory Petrosyan.)"
msgstr ""
"(Contributed by Georg Brandl, after a suggestion by Gregory Petrosyan.)"

#: ../../whatsnew/2.6.rst:2152
msgid ""
"The :func:`attrgetter` function now accepts dotted names and performs the "
"corresponding attribute lookups::"
msgstr ""
":func:`attrgetter` 関数がドット付きの名前を受け付け、対応する属性ルックアップ"
"をするようになりました::"

#: ../../whatsnew/2.6.rst:2162
msgid "(Contributed by Georg Brandl, after a suggestion by Barry Warsaw.)"
msgstr "(Contributed by Georg Brandl, after a suggestion by Barry Warsaw.)"

#: ../../whatsnew/2.6.rst:2164
msgid ""
"The :mod:`os` module now wraps several new system calls. ``fchmod(fd, "
"mode)`` and ``fchown(fd, uid, gid)`` change the mode and ownership of an "
"opened file, and ``lchmod(path, mode)`` changes the mode of a symlink.  "
"(Contributed by Georg Brandl and Christian Heimes.)"
msgstr ""
":mod:`os` モジュールがいくつか新しくシステムコールをラップしています。開いた"
"ファイルについて、 ``fchmod(fd, mode)`` はモードを変更し、 ``fchown(fd, uid, "
"gid)`` は所有権を変更し、 ``lchmod(path, mode)`` はシンボリックリンクのモード"
"を変更します。 (Contributed by Georg Brandl and Christian Heimes.)"

#: ../../whatsnew/2.6.rst:2170
msgid ""
":func:`chflags` and :func:`lchflags` are wrappers for the corresponding "
"system calls (where they're available), changing the flags set on a file.  "
"Constants for the flag values are defined in the :mod:`stat` module; some "
"possible values include :const:`UF_IMMUTABLE` to signal the file may not be "
"changed and :const:`UF_APPEND` to indicate that data can only be appended to "
"the file.  (Contributed by M. Levinson.)"
msgstr ""
":func:`chflags` と :func:`lchflags` は対応するシステムコール (利用可能であれ"
"ば) へのラッパーで、ファイルのフラグを変更します。そのフラグ値についての定数"
"が :mod:`stat` モジュールに定義されています; いくつかの取りうる値には、ファイ"
"ルが変更されるべきではないことを伝える :const:`UF_IMMUTABLE` 、ファイルには"
"データの追記のみが可能であることを伝える :const:`UF_APPEND` 、があります。 "
"(Contributed by M. Levinson.)"

#: ../../whatsnew/2.6.rst:2178
msgid ""
"``os.closerange(low, high)`` efficiently closes all file descriptors from "
"*low* to *high*, ignoring any errors and not including *high* itself. This "
"function is now used by the :mod:`subprocess` module to make starting "
"processes faster.  (Contributed by Georg Brandl; :issue:`1663329`.)"
msgstr ""
"``os.closerange(low, high)`` は効率よく全ての *low* から *high* のファイルデ"
"スクリプタをクローズします。全てのエラーは無視されます。それと *high* はク"
"ローズ対象ではないです。この関数は既に :mod:`subprocess` モジュールがプロセス"
"を開始するのを高速化するために使われています。 (Contributed by Georg "
"Brandl; :issue:`1663329`.)"

#: ../../whatsnew/2.6.rst:2183
msgid ""
"The ``os.environ`` object's :meth:`clear` method will now unset the "
"environment variables using :func:`os.unsetenv` in addition to clearing the "
"object's keys.  (Contributed by Martin Horcicka; :issue:`1181`.)"
msgstr ""
"``os.environ`` オブジェクトの :meth:`clear` メソッドが、オブジェクトのキーか"
"ら取り除くだけでなく :func:`os.unsetenv` を使って環境変数を未設定にするように"
"なりました。  (Contributed by Martin Horcicka; :issue:`1181`.)"

#: ../../whatsnew/2.6.rst:2187
msgid ""
"The :func:`os.walk` function now has a ``followlinks`` parameter. If set to "
"True, it will follow symlinks pointing to directories and visit the "
"directory's contents.  For backward compatibility, the parameter's default "
"value is false.  Note that the function can fall into an infinite recursion "
"if there's a symlink that points to a parent directory.  (:issue:`1273829`)"
msgstr ""
":func:`os.walk` 関数に ``followlinks`` パラメータが追加されています。これを真"
"にすると、シンボリックリンクが指す相手のディレクトリを渡り歩くようになりま"
"す。後方互換のためにこのパラメータのデフォルトは偽です。なお、親ディレクトリ"
"を指すシンボリックリンクなど参照が循環していると、無限再帰に陥りますので注意"
"してください。 (:issue:`1273829`)"

#: ../../whatsnew/2.6.rst:2194
msgid ""
"In the :mod:`os.path` module, the :func:`splitext` function has been changed "
"to not split on leading period characters. This produces better results when "
"operating on Unix's dot-files. For example, ``os.path.splitext('.ipython')`` "
"now returns ``('.ipython', '')`` instead of ``('', '.ipython')``. (:issue:"
"`1115886`)"
msgstr ""
":mod:`os.path` モジュールの :func:`splitext` 関数が、先行するピリオドで分割し"
"ないように変更されています。これにより Unix のドットファイルの処理結果がよく"
"なります。例えば ``os.path.splitext('.ipython')`` は ``('', '.ipython')`` で"
"はなく ``('.ipython', '')`` を返すようになっています。 (:issue:`1115886`)"

#: ../../whatsnew/2.6.rst:2201
msgid ""
"A new function, ``os.path.relpath(path, start='.')``, returns a relative "
"path from the ``start`` path, if it's supplied, or from the current working "
"directory to the destination ``path``.  (Contributed by Richard Barran; :"
"issue:`1339796`.)"
msgstr ""
"新規関数 ``os.path.relpath(path, start='.')`` は、与えられれば ``start`` から"
"の、与えられなければカレントディレクトリからの、目的地 ``path`` への相対パス"
"を返します。 (Contributed by Richard Barran; :issue:`1339796`.)"

#: ../../whatsnew/2.6.rst:2206
msgid ""
"On Windows, :func:`os.path.expandvars` will now expand environment variables "
"given in the form \"%var%\", and \"~user\" will be expanded into the user's "
"home directory path.  (Contributed by Josiah Carlson; :issue:`957650`.)"
msgstr ""
"Windows において、 :func:`os.path.expandvars` が \"%var%\" 形式の記述に環境変"
"数を展開し、 \"~user\" にユーザのホームディレクトリのパスを展開するようになり"
"ました。 (Contributed by Josiah Carlson; :issue:`957650`.) (---訳注: "
"\"~user\" は実在した仕様かわかりません。2.7 に該当する実装もコメントも "
"docstring もリファレンスもありませんし、当然この振る舞いは現在実在していませ"
"ん。---)"

#: ../../whatsnew/2.6.rst:2211
msgid ""
"The Python debugger provided by the :mod:`pdb` module gained a new command: "
"\"run\" restarts the Python program being debugged and can optionally take "
"new command-line arguments for the program. (Contributed by Rocky "
"Bernstein; :issue:`1393667`.)"
msgstr ""
":mod:`pdb` モジュールで提供される Python デバッガに新たなコマンドが追加されま"
"した: \"run\" はデバッグ対象の Python プログラムを再起動します。またオプショ"
"ンとして、対象プログラムに与えるコマンドライン引数を渡せます。 (Contributed "
"by Rocky Bernstein; :issue:`1393667`.)"

#: ../../whatsnew/2.6.rst:2216
msgid ""
"The :func:`pdb.post_mortem` function, used to begin debugging a traceback, "
"will now use the traceback returned by :func:`sys.exc_info` if no traceback "
"is supplied.   (Contributed by Facundo Batista; :issue:`1106316`.)"
msgstr ""
"トレースバックのデバッグを開始するのに使われる :func:`pdb.post_mortem` が、ト"
"レースバックが与えられない場合に :func:`sys.exc_info` からの戻り値のトレース"
"バックを使うようになりました。 (Contributed by Facundo Batista; :issue:"
"`1106316`.)"

#: ../../whatsnew/2.6.rst:2221
msgid ""
"The :mod:`pickletools` module now has an :func:`optimize` function that "
"takes a string containing a pickle and removes some unused opcodes, "
"returning a shorter pickle that contains the same data structure. "
"(Contributed by Raymond Hettinger.)"
msgstr ""
":mod:`pickletools` モジュールに :func:`optimize` 関数が追加されました。これ"
"は pickle を含んだ文字列を受け取って、未使用 opcode を削除の上で同じデータ構"
"造を含んだより小さい pickle を返します。 (Contributed by Raymond Hettinger.)"

#: ../../whatsnew/2.6.rst:2226
msgid ""
"A :func:`get_data` function was added to the :mod:`pkgutil` module that "
"returns the contents of resource files included with an installed Python "
"package.  For example::"
msgstr ""
":mod:`pkgutil` モジュールに :func:`get_data` 関数が追加されました。これはイン"
"ストールされている Python パッケージに含まれるリソースファイルの内容を返しま"
"す。例えば::"

#: ../../whatsnew/2.6.rst:2241
msgid "(Contributed by Paul Moore; :issue:`2439`.)"
msgstr "(Contributed by Paul Moore; :issue:`2439`.)"

#: ../../whatsnew/2.6.rst:2243
msgid ""
"The :mod:`pyexpat` module's :class:`Parser` objects now allow setting their :"
"attr:`buffer_size` attribute to change the size of the buffer used to hold "
"character data. (Contributed by Achim Gaedke; :issue:`1137`.)"
msgstr ""
":mod:`pyexpat` モジュールの :class:`Parser` オブジェクトで、 :attr:"
"`buffer_size` 属性の設定により文字データの保持に使うバッファのサイズを変更出"
"来るようになりました。 (Contributed by Achim Gaedke; :issue:`1137`.)"

#: ../../whatsnew/2.6.rst:2248
msgid ""
"The :mod:`Queue` module now provides queue variants that retrieve entries in "
"different orders.  The :class:`PriorityQueue` class stores queued items in a "
"heap and retrieves them in priority order, and :class:`LifoQueue` retrieves "
"the most recently added entries first, meaning that it behaves like a stack. "
"(Contributed by Raymond Hettinger.)"
msgstr ""
":mod:`Queue` モジュールが、エントリを違った順序で取り出すような queue の変種"
"をサポートするようになっています。 :class:`PriorityQueue` クラスはキューアイ"
"テムをヒープで格納し、それを優先順で取り出します。 :class:`LifoQueue` クラス"
"は、最後にエントリに追加されたものを最初に取り出します。つまり stack のように"
"振舞うということです。 (Contributed by Raymond Hettinger.)"

#: ../../whatsnew/2.6.rst:2255
msgid ""
"The :mod:`random` module's :class:`Random` objects can now be pickled on a "
"32-bit system and unpickled on a 64-bit system, and vice versa.  "
"Unfortunately, this change also means that Python 2.6's :class:`Random` "
"objects can't be unpickled correctly on earlier versions of Python. "
"(Contributed by Shawn Ligocki; :issue:`1727780`.)"
msgstr ""
":mod:`random` モジュールの :class:`Random` が、今では 32 ビットシステムで "
"pickle 出来、64 ビットシステムで unpickle 出来、逆も出来ます。残念ながらこの"
"変更は Python 2.6 の :class:`Random` オブジェクトを以前の Python で正しく "
"unpickle 出来ないことを意味します。 (Contributed by Shawn Ligocki; :issue:"
"`1727780`.)"

#: ../../whatsnew/2.6.rst:2262
msgid ""
"The new ``triangular(low, high, mode)`` function returns random numbers "
"following a triangular distribution.   The returned values are between *low* "
"and *high*, not including *high* itself, and with *mode* as the most "
"frequently occurring value in the distribution.  (Contributed by Wladmir van "
"der Laan and Raymond Hettinger; :issue:`1681432`.)"
msgstr ""
"新たな ``triangular(low, high, mode)`` は、三角分布 (triangular "
"distribution) に従う乱数を生成します。 *mode* は分布内の最頻値で、返却値は "
"*high* を含まない *low* と *high* の間です。 (Contributed by Wladmir van der "
"Laan and Raymond Hettinger; :issue:`1681432`.)"

#: ../../whatsnew/2.6.rst:2269
msgid ""
"Long regular expression searches carried out by the  :mod:`re` module will "
"check for signals being delivered, so time-consuming searches can now be "
"interrupted. (Contributed by Josh Hoyt and Ralf Schmitt; :issue:`846388`.)"
msgstr ""
":mod:`re` モジュールによって実行される長い正規表現検索が届けられるシグナルを"
"チェックするようになり、これにより多大な時間を要する検索を中断出来るようにな"
"ります。 (Contributed by Josh Hoyt and Ralf Schmitt; :issue:`846388`.) (---訳"
"注: 原文を忠実に訳すとわかりにくいですが、単に C のレベルでシグナルハンドラを"
"仕掛けたので Python が割り込める、というのがここで言っていることです。本質的"
"には「長い」や「時間のかかる」はあまり関係ないです。---)"

#: ../../whatsnew/2.6.rst:2274
msgid ""
"The regular expression module is implemented by compiling bytecodes for a "
"tiny regex-specific virtual machine.  Untrusted code could create malicious "
"strings of bytecode directly and cause crashes, so Python 2.6 includes a "
"verifier for the regex bytecode. (Contributed by Guido van Rossum from work "
"for Google App Engine; :issue:`3487`.)"
msgstr ""
"正規表現モジュールは、小さな正規表現固有仮想マシン用のバイトコードをコンパイ"
"ルすることで実装されています。信頼出来ないコードにより、悪意あるバイトコード"
"文字列を直接作って破滅させることが出来ます。ですので、2.6 では正規表現バイト"
"コードの検証をするようにしてあります。(Contributed by Guido van Rossum from "
"work for Google App Engine; :issue:`3487`.)"

#: ../../whatsnew/2.6.rst:2281
msgid ""
"The :mod:`rlcompleter` module's :meth:`Completer.complete()` method will now "
"ignore exceptions triggered while evaluating a name. (Fixed by Lorenz "
"Quack; :issue:`2250`.)"
msgstr ""
":mod:`rlcompleter` モジュールの :meth:`Completer.complete()` メソッドが名前の"
"評価時に引き起こされた例外を無視するようになりました。 (Fixed by Lorenz "
"Quack; :issue:`2250`.)"

#: ../../whatsnew/2.6.rst:2285
msgid ""
"The :mod:`sched` module's :class:`scheduler` instances now have a read-only :"
"attr:`queue` attribute that returns the contents of the scheduler's queue, "
"represented as a list of named tuples with the fields ``(time, priority, "
"action, argument)``. (Contributed by Raymond Hettinger; :issue:`1861`.)"
msgstr ""
":mod:`sched` モジュールの :class:`scheduler` インスタンスが読み出し専用の :"
"attr:`queue` 属性を持つようになりました。これはスケジューラのキュー内容を名前"
"付きタプル ``(time, priority, action, argument)`` で返します。 (Contributed "
"by Raymond Hettinger; :issue:`1861`.)"

#: ../../whatsnew/2.6.rst:2291
msgid ""
"The :mod:`select` module now has wrapper functions for the Linux :c:func:"
"`epoll` and BSD :c:func:`kqueue` system calls. :meth:`modify` method was "
"added to the existing :class:`poll` objects; ``pollobj.modify(fd, "
"eventmask)`` takes a file descriptor or file object and an event mask, "
"modifying the recorded event mask for that file. (Contributed by Christian "
"Heimes; :issue:`1657`.)"
msgstr ""
":mod:`select` モジュールに新たに Linux システムコール :c:func:`epoll` と BSD "
"システムコール :c:func:`kqueue` へのラッパー関数が追加されました。既存の :"
"class:`poll` オブジェクトには新たに :meth:`modify` メソッドが追加されていま"
"す。 ``pollobj.modify(fd, eventmask)`` はファイルデスクリプタかファイルオブ"
"ジェクトとイベントマスクを取り、そのファイルの記録イベントのマスクを修正しま"
"す。(Contributed by Christian Heimes; :issue:`1657`.)"

#: ../../whatsnew/2.6.rst:2299
msgid ""
"The :func:`shutil.copytree` function now has an optional *ignore* argument "
"that takes a callable object.  This callable will receive each directory "
"path and a list of the directory's contents, and returns a list of names "
"that will be ignored, not copied."
msgstr ""
":func:`shutil.copytree` が省略可能引数 *ignore* を取るようになっています。呼"
"び出し可能オブジェクトを渡します。この呼び出し可能オブジェクトはそれぞれの"
"ディレクトリパスとその内容リストを受け取って、コピーせずに無視したい名前のリ"
"ストを返します。"

#: ../../whatsnew/2.6.rst:2304
msgid ""
"The :mod:`shutil` module also provides an :func:`ignore_patterns` function "
"for use with this new parameter.  :func:`ignore_patterns` takes an arbitrary "
"number of glob-style patterns and returns a callable that will ignore any "
"files and directories that match any of these patterns.  The following "
"example copies a directory tree, but skips both :file:`.svn` directories and "
"Emacs backup files, which have names ending with '~'::"
msgstr ""
":mod:`shutil` モジュールでは同時に、この新たなパラメータのために使える :func:"
"`ignore_patterns` も提供しています。 :func:`ignore_patterns` は任意の数の "
"glob スタイルのパターンを取り、これらパターンに合致する任意のファイルとディレ"
"クトリを無視する呼び出し可能オブジェクトを返します。以下は、 :file:`.svn` "
"ディレクトリと '~' で終わるファイル名を持つ Emacs のバックアップファイルをス"
"キップしてディレクトリコピーをする例です::"

#: ../../whatsnew/2.6.rst:2315
msgid "(Contributed by Tarek Ziadé; :issue:`2663`.)"
msgstr "(Contributed by Tarek Ziadé; :issue:`2663`.)"

#: ../../whatsnew/2.6.rst:2317
msgid ""
"Integrating signal handling with GUI handling event loops like those used by "
"Tkinter or GTk+ has long been a problem; most software ends up polling, "
"waking up every fraction of a second to check if any GUI events have "
"occurred. The :mod:`signal` module can now make this more efficient. Calling "
"``signal.set_wakeup_fd(fd)`` sets a file descriptor to be used; when a "
"signal is received, a byte is written to that file descriptor.  There's also "
"a C-level function, :c:func:`PySignal_SetWakeupFd`, for setting the "
"descriptor."
msgstr ""
"Tkinter や GTK+ などのような場所で、シグナルハンドリングと GUI 処理のイベント"
"ループを組み合わせることは、長い間悩みの種でした; ほとんどのソフトウェアは"
"ポーリングを行って、わずかばかりの時間で起き上がっては GUI イベントが起きてい"
"ないかチェックするハメになっています。 :mod:`signal` モジュールが、これをより"
"効率的に行えるようにしました。 ``signal.set_wakeup_fd(fd)`` でファイルデスク"
"リプタをセットすると、イベント受信時にファイルデスクリプタにバイトが書き込ま"
"れます。 C レベルの関数 :c:func:`PySignal_SetWakeupFd` もあります。同じくファ"
"イルデスクリプタを渡します。"

#: ../../whatsnew/2.6.rst:2327
msgid ""
"Event loops will use this by opening a pipe to create two descriptors, one "
"for reading and one for writing.  The writable descriptor will be passed to :"
"func:`set_wakeup_fd`, and the readable descriptor will be added to the list "
"of descriptors monitored by the event loop via :c:func:`select` or :c:func:"
"`poll`. On receiving a signal, a byte will be written and the main event "
"loop will be woken up, avoiding the need to poll."
msgstr ""
"イベントループはこれを、読み込み用と書き込み用の 2 つのデスクリプタを作るパイ"
"プをオープンして使うことになるでしょう。書き込み用デスクリプタは :func:"
"`set_wakeup_fd` に渡し、読み込み用デスクリプタはイベントループから :c:func:"
"`select` や :c:func:`poll` で監視するデスクリプタのリストに追加すれば良いで"
"しょう。シグナル受信時にはバイトが書き込まれてメインのイベントループが起き上"
"がるので、ポーリングは必要なくなります。"

#: ../../whatsnew/2.6.rst:2335
msgid "(Contributed by Adam Olsen; :issue:`1583`.)"
msgstr "(Contributed by Adam Olsen; :issue:`1583`.)"

#: ../../whatsnew/2.6.rst:2337
msgid ""
"The :func:`siginterrupt` function is now available from Python code, and "
"allows changing whether signals can interrupt system calls or not. "
"(Contributed by Ralf Schmitt.)"
msgstr ""
":func:`siginterrupt` 関数が Python コードから利用可能になりました。対象シグナ"
"ルがシステムコールを中断出来るかどうかを変更出来ます。 (Contributed by Ralf "
"Schmitt.)"

#: ../../whatsnew/2.6.rst:2341
msgid ""
"The :func:`setitimer` and :func:`getitimer` functions have also been added "
"(where they're available).  :func:`setitimer` allows setting interval timers "
"that will cause a signal to be delivered to the process after a specified "
"time, measured in wall-clock time, consumed process time, or combined "
"process+system time.  (Contributed by Guilherme Polo; :issue:`2240`.)"
msgstr ""
":func:`setitimer`, :func:`getitimer` 関数も追加されています (利用可能であれ"
"ば)。 :func:`setitimer` は、指定時間経過後に処理にシグナルを届けます。時間は"
"「壁時計時間 (wall-clock time)」(訳注: リファレンスでは「実時間」と表現してい"
"る)、「プロセスの実行時間 (consumed process time)」、またはプロセス + システ"
"ム時間の組合せで指定します。(Contributed by Guilherme Polo; :issue:`2240`.)"

#: ../../whatsnew/2.6.rst:2348
msgid ""
"The :mod:`smtplib` module now supports SMTP over SSL thanks to the addition "
"of the :class:`SMTP_SSL` class. This class supports an interface identical "
"to the existing :class:`SMTP` class. (Contributed by Monty Taylor.)  Both "
"class constructors also have an optional ``timeout`` parameter that "
"specifies a timeout for the initial connection attempt, measured in "
"seconds.  (Contributed by Facundo Batista.)"
msgstr ""
":mod:`smtplib` モジュールが、 :class:`SMTP_SSL` クラスの追加によって SMTP "
"over SSL をサポートするようになっています。このクラスは既存の :class:`SMTP` "
"と同じインターフェイスです。(Contributed by Monty Taylor.)   両方のクラスのコ"
"ンストラクタでは新たに省略可能な ``timeout`` パラメータを取ります。最初に接続"
"を試みる際のタイムアウト値を秒で指定します。(Contributed by Facundo Batista.)"

#: ../../whatsnew/2.6.rst:2356
msgid ""
"An implementation of the LMTP protocol (:rfc:`2033`) was also added to the "
"module.  LMTP is used in place of SMTP when transferring e-mail between "
"agents that don't manage a mail queue.  (LMTP implemented by Leif Hedstrom; :"
"issue:`957003`.)"
msgstr ""
"LMTP プロトコル (:rfc:`2033`) 実装もモジュールに追加されています。LMTP はメー"
"ルキューを管理しないエージェント間で e-mail を転送する際に、SMTP の代わりに使"
"われます。(LMTP implemented by Leif Hedstrom; :issue:`957003`.)"

#: ../../whatsnew/2.6.rst:2361
msgid ""
":meth:`SMTP.starttls` now complies with :rfc:`3207` and forgets any "
"knowledge obtained from the server not obtained from the TLS negotiation "
"itself.  (Patch contributed by Bill Fenner; :issue:`829951`.)"
msgstr ""
":meth:`SMTP.starttls` は今や :rfc:`3207` 遵守であり、TLS ネゴシエーション自身"
"で得たのでないサーバから得られるいかなる知識も記憶しません。(Patch "
"contributed by Bill Fenner; :issue:`829951`.)"

#: ../../whatsnew/2.6.rst:2366
msgid ""
"The :mod:`socket` module now supports TIPC (http://tipc.sourceforge.net/), a "
"high-performance non-IP-based protocol designed for use in clustered "
"environments.  TIPC addresses are 4- or 5-tuples. (Contributed by Alberto "
"Bertogli; :issue:`1646`.)"
msgstr ""
":mod:`socket` モジュールが TIPC (http://tipc.sourceforge.net/) をサポートする"
"ようになりました。これは高性能な非 IP ベースのプロトコルで、クラスタ環境で使"
"われるように設計されたものです。TIPC のアドレスは 4 または 5 要素のタプルで"
"す。 (Contributed by Alberto Bertogli; :issue:`1646`.)"

#: ../../whatsnew/2.6.rst:2371
msgid ""
"A new function, :func:`create_connection`, takes an address and connects to "
"it using an optional timeout value, returning the connected socket object.  "
"This function also looks up the address's type and connects to it using IPv4 "
"or IPv6 as appropriate.  Changing your code to use :func:`create_connection` "
"instead of ``socket(socket.AF_INET, ...)`` may be all that's required to "
"make your code work with IPv6."
msgstr ""
"新規の :func:`create_connection` 関数はアドレスを取り、省略可能なタイムアウト"
"値を使って接続を行い、接続されたソケットオブジェクトを返します。この関数は同"
"時に、アドレスのタイプを調べて IPv4 と IPv6 の相応しい方を使って接続します。"
"あなたのコードが ``socket(socket.AF_INET, ...)`` を使う代わりに :func:"
"`create_connection` に乗り換えることは、それが IPv6 対応で必要なこと全て、と"
"なるでしょう。"

#: ../../whatsnew/2.6.rst:2379
msgid ""
"The base classes in the :mod:`SocketServer` module now support calling a :"
"meth:`handle_timeout` method after a span of inactivity specified by the "
"server's :attr:`timeout` attribute.  (Contributed by Michael Pomraning.)  "
"The :meth:`serve_forever` method now takes an optional poll interval "
"measured in seconds, controlling how often the server will check for a "
"shutdown request. (Contributed by Pedro Werneck and Jeffrey Yasskin; :issue:"
"`742598`, :issue:`1193577`.)"
msgstr ""
":mod:`SocketServer` モジュール内の基底クラスが、 :attr:`timeout` 属性で指定の"
"無応答時間経過後に :meth:`handle_timeout` メソッドを呼び出すようになっていま"
"す。 (Contributed by Michael Pomraning.)  :meth:`serve_forever` メソッドは、"
"オプションの秒指定のポーリング間隔を取るようになりました。これは、サーバが"
"シャットダウン要求のチェックをどの程度の頻度で行えばよいのかを制御します。 "
"(Contributed by Pedro Werneck and Jeffrey Yasskin; :issue:`742598`, :issue:"
"`1193577`.)"

#: ../../whatsnew/2.6.rst:2388
msgid ""
"The :mod:`sqlite3` module, maintained by Gerhard Häring, has been updated "
"from version 2.3.2 in Python 2.5 to version 2.4.1."
msgstr ""
"Gerhard Häring により保守されている :mod:`sqlite3` モジュールが、Python 2.5 "
"時のバージョン 2.3.2 からバージョン 2.4.1 に更新されました。"

#: ../../whatsnew/2.6.rst:2392
msgid ""
"The :mod:`struct` module now supports the C99 :c:type:`_Bool` type, using "
"the format character ``'?'``. (Contributed by David Remahl.)"
msgstr ""
":mod:`struct` モジュールが C99 の :c:type:`_Bool` 型をフォーマット文字 "
"``'?'`` でサポートするようになりました。 (Contributed by David Remahl.)"

#: ../../whatsnew/2.6.rst:2396
msgid ""
"The :class:`Popen` objects provided by the :mod:`subprocess` module now "
"have :meth:`terminate`, :meth:`kill`, and :meth:`send_signal` methods. On "
"Windows, :meth:`send_signal` only supports the :const:`SIGTERM` signal, and "
"all these methods are aliases for the Win32 API function :c:func:"
"`TerminateProcess`. (Contributed by Christian Heimes.)"
msgstr ""
":mod:`subprocess` モジュールの :class:`Popen` オブジェクトに :meth:"
"`terminate`, :meth:`kill`, :meth:`send_signal` メソッドが追加されました。"
"Windows では :meth:`send_signal` は :const:`SIGTERM` シグナルのみがサポートさ"
"れ、またこれら全てのメソッドは Win32 API 関数の :c:func:`TerminateProcess` の"
"別名になっています。 (Contributed by Christian Heimes.)"

#: ../../whatsnew/2.6.rst:2403
msgid ""
"A new variable in the :mod:`sys` module, :attr:`float_info`, is an object "
"containing information derived from the :file:`float.h` file about the "
"platform's floating-point support.  Attributes of this object include :attr:"
"`mant_dig` (number of digits in the mantissa), :attr:`epsilon` (smallest "
"difference between 1.0 and the next largest value representable), and "
"several others.  (Contributed by Christian Heimes; :issue:`1534`.)"
msgstr ""
":mod:`sys` モジュールに新たに追加された変数 :attr:`float_info` は、 :file:"
"`float.h` に由来するプラットフォームの浮動小数点数サポートについての情報を含"
"んだオブジェクトです。このオブジェクトの属性としては、 :attr:`mant_dig` (仮数"
"部の桁数)、 :attr:`epsilon` (1.0 と、それより大きい表現可能な最小値との差)な"
"どがあります。 (Contributed by Christian Heimes; :issue:`1534`.)"

#: ../../whatsnew/2.6.rst:2411
msgid ""
"Another new variable, :attr:`dont_write_bytecode`, controls whether Python "
"writes any :file:`.pyc` or :file:`.pyo` files on importing a module. If this "
"variable is true, the compiled files are not written.  The variable is "
"initially set on start-up by supplying the :option:`-B` switch to the Python "
"interpreter, or by setting the :envvar:`PYTHONDONTWRITEBYTECODE` environment "
"variable before running the interpreter.  Python code can subsequently "
"change the value of this variable to control whether bytecode files are "
"written or not. (Contributed by Neal Norwitz and Georg Brandl.)"
msgstr ""
"もう一つの新たな変数 :attr:`dont_write_bytecode` は Python がモジュールイン"
"ポート時に :file:`.pyc` や :file:`.pyo` を作るかどうかを制御します。この変数"
"が真ならば、コンパイル済みファイルは作られません。この変数は Python インタプ"
"リタを :option:`-B` スイッチ付きで起動するか環境変数 :envvar:"
"`PYTHONDONTWRITEBYTECODE` をセットすることで初期設定されます。Python コードは"
"このあとでこの変数の値を変更することで、バイトコードファイルを作るかどうかを"
"制御出来ます。 (Contributed by Neal Norwitz and Georg Brandl.)"

#: ../../whatsnew/2.6.rst:2422
msgid ""
"Information about the command-line arguments supplied to the Python "
"interpreter is available by reading attributes of a named tuple available as "
"``sys.flags``.  For example, the :attr:`verbose` attribute is true if Python "
"was executed in verbose mode, :attr:`debug` is true in debugging mode, etc. "
"These attributes are all read-only. (Contributed by Christian Heimes.)"
msgstr ""
"Python インタプリタに与えられたコマンドライン引数についての情報を、 ``sys."
"flags`` として利用可能な名前付きタプルで知ることが出来ます。例えば Python が"
"冗長モードで起動された場合は :attr:`verbose` 属性は真となり、デバッグモードで"
"は :attr:`debug` 属性が真、などです。これら属性は全て読み出し専用です。 "
"(Contributed by Christian Heimes.)"

#: ../../whatsnew/2.6.rst:2430
msgid ""
"A new function, :func:`getsizeof`, takes a Python object and returns the "
"amount of memory used by the object, measured in bytes.  Built-in objects "
"return correct results; third-party extensions may not, but can define a :"
"meth:`__sizeof__` method to return the object's size. (Contributed by Robert "
"Schuppenies; :issue:`2898`.)"
msgstr ""
"新しい関数 :func:`getsizeof` が追加されました。 Python オブジェクトを受け取"
"り、そのオブジェクトが利用しているメモリサイズをバイト単位で返します。\n"
"ビルトインオブジェクトは正確な結果を返しますが、サードパーティの拡張は正確な"
"値を返さないかもしれません。\n"
"その場合 :meth:`__sizeof__` メソッドを定義してオブジェクトのサイズを返すこと"
"ができます。 (Robert Schuppenies による貢献. :issue:`2898`)"

#: ../../whatsnew/2.6.rst:2437
msgid ""
"It's now possible to determine the current profiler and tracer functions by "
"calling :func:`sys.getprofile` and :func:`sys.gettrace`. (Contributed by "
"Georg Brandl; :issue:`1648`.)"
msgstr ""
"現在動作中のプロファイラとトレーサーを、 :func:`sys.getprofile` と :func:"
"`sys.gettrace` で知ることが出来るようになりました。 (Contributed by Georg "
"Brandl; :issue:`1648`.)"

#: ../../whatsnew/2.6.rst:2441
msgid ""
"The :mod:`tarfile` module now supports POSIX.1-2001 (pax) tarfiles in "
"addition to the POSIX.1-1988 (ustar) and GNU tar formats that were already "
"supported.  The default format is GNU tar; specify the ``format`` parameter "
"to open a file using a different format::"
msgstr ""
":mod:`tarfile` モジュールが、既にサポートされている POSIX.1-1988 (ustar) と "
"GNU tar フォーマットに加えて、POSIX.1-2001 (pax) をサポートするようになりまし"
"た。デフォルトは GNU tar です; これと違うフォーマットでファイルを開くには "
"``format`` パラメータで指定します::"

#: ../../whatsnew/2.6.rst:2449
msgid ""
"The new ``encoding`` and ``errors`` parameters specify an encoding and an "
"error handling scheme for character conversions.  ``'strict'``, "
"``'ignore'``, and ``'replace'`` are the three standard ways Python can "
"handle errors,; ``'utf-8'`` is a special value that replaces bad characters "
"with their UTF-8 representation.  (Character conversions occur because the "
"PAX format supports Unicode filenames, defaulting to UTF-8 encoding.)"
msgstr ""
"新しい ``encoding`` と ``errors`` パラメータはエンコーディングと文字変換のエ"
"ラー処理方法を指定します。 ``'strict'``, ``'ignore'``,  ``'replace'`` は "
"Python の 3 つの標準エラー処理です; ``'utf-8'`` は特殊で、不正な文字を、それ"
"の UTF-8 表現に置き換えます。(文字変換は、PAX フォーマットが Unicode ファイル"
"名をサポートするために現れ、デフォルトは UTF-8 エンコーディングです。)"

#: ../../whatsnew/2.6.rst:2457
msgid ""
"The :meth:`TarFile.add` method now accepts an ``exclude`` argument that's a "
"function that can be used to exclude certain filenames from an archive. The "
"function must take a filename and return true if the file should be excluded "
"or false if it should be archived. The function is applied to both the name "
"initially passed to :meth:`add` and to the names of files in recursively-"
"added directories."
msgstr ""
":meth:`TarFile.add` メソッドが新たに ``exclude`` 引数を受け付けます。これは"
"アーカイブから特定のファイル名を除外するために呼び出される呼び出し可能オブ"
"ジェクトです。ファイル名を受け取って、除外すべきファイルの場合に真、そうでな"
"ければ偽を返してください。この呼び出し可能オブジェクトは :meth:`add` に最初に"
"追加される名前と再帰的に追加されるディレクトリの名前の両方に適用されます。"

#: ../../whatsnew/2.6.rst:2465
msgid "(All changes contributed by Lars Gustäbel)."
msgstr "(All changes contributed by Lars Gustäbel)."

#: ../../whatsnew/2.6.rst:2467
msgid ""
"An optional ``timeout`` parameter was added to the :class:`telnetlib.Telnet` "
"class constructor, specifying a timeout measured in seconds.  (Added by "
"Facundo Batista.)"
msgstr ""
"省略可能パラメータ ``timeout`` が :class:`telnetlib.Telnet` クラスのコンスト"
"ラクタに追加されました。タイムアウトを秒で指定します。 (Added by Facundo "
"Batista.)"

#: ../../whatsnew/2.6.rst:2471
msgid ""
"The :class:`tempfile.NamedTemporaryFile` class usually deletes the temporary "
"file it created when the file is closed.  This behaviour can now be changed "
"by passing ``delete=False`` to the constructor.  (Contributed by Damien "
"Miller; :issue:`1537850`.)"
msgstr ""
":class:`tempfile.NamedTemporaryFile` クラスは普通はこれが作った一時ファイル"
"を、ファイルクローズ時に削除します。この振る舞いを、コンストラクタのパラメー"
"タに ``delete=False`` を渡すことで変更出来るようになりました。 (Contributed "
"by Damien Miller; :issue:`1537850`.)"

#: ../../whatsnew/2.6.rst:2476
msgid ""
"A new class, :class:`SpooledTemporaryFile`, behaves like a temporary file "
"but stores its data in memory until a maximum size is exceeded.  On reaching "
"that limit, the contents will be written to an on-disk temporary file.  "
"(Contributed by Dustin J. Mitchell.)"
msgstr ""
"新しいクラス :class:`SpooledTemporaryFile` は一時ファイルのように振舞います"
"が、そのデータは最大サイズを超えるまではメモリ内に格納されます。その制限を超"
"えると、その内容がディスク上の一時ファイルに書き込まれます。 (Contributed by "
"Dustin J. Mitchell.)"

#: ../../whatsnew/2.6.rst:2481
msgid ""
"The :class:`NamedTemporaryFile` and :class:`SpooledTemporaryFile` classes "
"both work as context managers, so you can write ``with tempfile."
"NamedTemporaryFile() as tmp: ...``. (Contributed by Alexander Belopolsky; :"
"issue:`2021`.)"
msgstr ""
":class:`NamedTemporaryFile` と :class:`SpooledTemporaryFile` のともにコンテキ"
"ストマネージャとして動作しますので、 ``with tempfile.NamedTemporaryFile() as "
"tmp: ...`` のように書くことが出来ます。 (Contributed by Alexander "
"Belopolsky; :issue:`2021`.)"

#: ../../whatsnew/2.6.rst:2486
msgid ""
"The :mod:`test.test_support` module gained a number of context managers "
"useful for writing tests. :func:`EnvironmentVarGuard` is a context manager "
"that temporarily changes environment variables and automatically restores "
"them to their old values."
msgstr ""
":mod:`test.test_support` に、テストを書くのに便利な多くのコンテキストマネー"
"ジャが追加されています。 :func:`EnvironmentVarGuard` は環境変数を一時的に変更"
"して自動的に元に戻すコンテキストマネージャです。"

#: ../../whatsnew/2.6.rst:2492
msgid ""
"Another context manager, :class:`TransientResource`, can surround calls to "
"resources that may or may not be available; it will catch and ignore a "
"specified list of exceptions.  For example, a network test may ignore "
"certain failures when connecting to an external web site::"
msgstr ""
"もう一つのコンテキストマネージャ :class:`TransientResource` は、利用出来るか"
"もしれないし出来ないかもしれないリソースの呼び出しを包むことが出来ます; 指定"
"した例外リストを捕捉して無視します(---訳注: この紹介、良くないと思うのと、多"
"分著者が誤解してます。確かに属性名/属性値を特定してこれに一致する場合にだけ例"
"外を受け取るためのものなので、一致しないものは無視、という事実には反しません"
"が、「狙った例外は受け取る(ResourceDenied)」でもあるはずです。「期待した例外"
"が発生する」ことをテストしたいでしょう、「期待しない例外はテストには関係な"
"い」であるとともに。それとリファレンスと docstring によれば「指定した例外と属"
"性に合致する場合に ResourceDenied」と言っているので、やはり事実とは反していま"
"す。---)。例えば、ネットワークのテストでは外部のウェブサイトとの接続時の特定"
"の失敗を無視するでしょう::"

#: ../../whatsnew/2.6.rst:2503
msgid ""
"Finally, :func:`check_warnings` resets the :mod:`warning` module's warning "
"filters and returns an object that will record all warning messages "
"triggered (:issue:`3781`)::"
msgstr ""
"最後に、 :func:`check_warnings` は :mod:`warning` モジュールの警告フィルタを"
"リセットして、全ての引き起こされる警告メッセージを記録するオブジェクトを返し"
"ます (:issue:`3781`)::"

#: ../../whatsnew/2.6.rst:2513
msgid "(Contributed by Brett Cannon.)"
msgstr "(Contributed by Brett Cannon.)"

#: ../../whatsnew/2.6.rst:2515
msgid ""
"The :mod:`textwrap` module can now preserve existing whitespace at the "
"beginnings and ends of the newly-created lines by specifying "
"``drop_whitespace=False`` as an argument::"
msgstr ""
":mod:`textwrap` モジュールで、行頭と新たに作る行の末尾にもともと含まれている"
"空白文字を保ったままにすることが出来るようになりました。 "
"``drop_whitespace=False`` を指定します::"

#: ../../whatsnew/2.6.rst:2534
msgid "(Contributed by Dwayne Bailey; :issue:`1581073`.)"
msgstr "(Contributed by Dwayne Bailey; :issue:`1581073`.)"

#: ../../whatsnew/2.6.rst:2536
msgid ""
"The :mod:`threading` module API is being changed to use properties such as :"
"attr:`daemon` instead of :meth:`setDaemon` and :meth:`isDaemon` methods, and "
"some methods have been renamed to use underscores instead of camel-case; for "
"example, the :meth:`activeCount` method is renamed to :meth:`active_count`.  "
"Both the 2.6 and 3.0 versions of the module support the same properties and "
"renamed methods, but don't remove the old methods.  No date has been set for "
"the deprecation of the old APIs in Python 3.x; the old APIs won't be removed "
"in any 2.x version. (Carried out by several people, most notably Benjamin "
"Peterson.)"
msgstr ""
":mod:`threading` モジュールの API が、 :meth:`setDaemon`, :meth:`isDaemon` メ"
"ソッドではなく :attr:`daemon` のようにプロパティを使うように変更中です。ま"
"た、いくつかのメソッドはキャメルケースではなくアンダースコアスタイルに名前変"
"更されています; 例えば :meth:`activeCount` メソッドは :meth:`active_count` に"
"リネームされます。2.6 と 3.0 の両バージョンのモジュールは同じプロパティとリ"
"ネームされたメソッドをサポートしますが、古いメソッドは削除されません。古い "
"API が Python 3.x で撤廃するのがいつになるのかは未定です; 2.x バージョンでは"
"削除されないでしょう。 (Carried out by several people, most notably Benjamin "
"Peterson.) (--- 訳注: 3.5 でもこの状態は続いたままです。今でもキャメルケース"
"スタイルのメソッドが使えます。ですが、もちろん新しい名前を使うべきです。---)"

#: ../../whatsnew/2.6.rst:2547
msgid ""
"The :mod:`threading` module's :class:`Thread` objects gained an :attr:"
"`ident` property that returns the thread's identifier, a nonzero integer.  "
"(Contributed by Gregory P. Smith; :issue:`2871`.)"
msgstr ""
":mod:`threading` モジュールの :class:`Thread` オブジェクトに :attr:`ident` プ"
"ロパティが追加されています。スレッドの識別子を非ゼロの整数で返します。 "
"(Contributed by Gregory P. Smith; :issue:`2871`.)"

#: ../../whatsnew/2.6.rst:2552
msgid ""
"The :mod:`timeit` module now accepts callables as well as strings for the "
"statement being timed and for the setup code. Two convenience functions were "
"added for creating :class:`Timer` instances: ``repeat(stmt, setup, time, "
"repeat, number)`` and ``timeit(stmt, setup, time, number)`` create an "
"instance and call the corresponding method. (Contributed by Erik Demaine; :"
"issue:`1533909`.)"
msgstr ""
":mod:`timeit` モジュールが、計測されるステートメントとセットアップコードとし"
"て、文字列だけでなく呼び出し可能オブジェクトを渡せるようになりました。 :"
"class:`Timer` インスタンスを作成する 2 つの便利関数が追加されています: "
"``repeat(stmt, setup, time, repeat, number)`` と ``timeit(stmt, setup, time, "
"number)`` で、インスタンスを作成して対応するメソッドを呼びます。 "
"(Contributed by Erik Demaine; :issue:`1533909`.)"

#: ../../whatsnew/2.6.rst:2561
msgid ""
"The :mod:`Tkinter` module now accepts lists and tuples for options, "
"separating the elements by spaces before passing the resulting value to Tcl/"
"Tk. (Contributed by Guilherme Polo; :issue:`2906`.)"
msgstr ""
":mod:`Tkinter` モジュールが、オプションとしてリストとタプルを受け付けるように"
"なっています。Tcl/Tk へは空白区切りの文字列にして渡されます。 (Contributed "
"by Guilherme Polo; :issue:`2906`.)"

#: ../../whatsnew/2.6.rst:2566
msgid ""
"The :mod:`turtle` module for turtle graphics was greatly enhanced by Gregor "
"Lingl.  New features in the module include:"
msgstr ""
"タートルグラフィックスのための :mod:`turtle` モジュールが Gregor Lingl により"
"大幅に拡張されました。\n"
"モジュールの新しい機能は次の通りです:"

#: ../../whatsnew/2.6.rst:2569
msgid "Better animation of turtle movement and rotation."
msgstr "亀の移動と回転のアニメーションの改善。"

#: ../../whatsnew/2.6.rst:2570
msgid ""
"Control over turtle movement using the new :meth:`delay`, :meth:`tracer`, "
"and :meth:`speed` methods."
msgstr ""
"新しい :meth:`delay` メソッド、 :meth:`tracer` メソッド、 :meth:`speed` メ"
"ソッドを使って亀の動きをコントロールできるようになりました。"

#: ../../whatsnew/2.6.rst:2572
msgid ""
"The ability to set new shapes for the turtle, and to define a new coordinate "
"system."
msgstr "亀に新しい姿を設定できたり、新しい座標系を定義できるようになりました。"

#: ../../whatsnew/2.6.rst:2574
msgid "Turtles now have an :meth:`undo()` method that can roll back actions."
msgstr "亀に、動作を巻き戻せる :meth:`undo()` メソッドが増えました。"

#: ../../whatsnew/2.6.rst:2575
msgid ""
"Simple support for reacting to input events such as mouse and keyboard "
"activity, making it possible to write simple games."
msgstr ""
"マウスやキーボードからの入力イベントに反応するための簡易なサポートが入り、簡"
"単なゲームを書けるようになりました。"

#: ../../whatsnew/2.6.rst:2577
msgid ""
"A :file:`turtle.cfg` file can be used to customize the starting appearance "
"of the turtle's screen."
msgstr ""
":file:`turtle.cfg` を使って、turtle の画面の起動時の見た目をカスタマイズでき"
"るようになりました。"

#: ../../whatsnew/2.6.rst:2579
msgid ""
"The module's docstrings can be replaced by new docstrings that have been "
"translated into another language."
msgstr ""
"モジュールの docstring が、他の言語に翻訳された docstring に置き換えられるよ"
"うになりました。"

#: ../../whatsnew/2.6.rst:2582
msgid "(:issue:`1513695`)"
msgstr "(:issue:`1513695`)"

#: ../../whatsnew/2.6.rst:2584
msgid ""
"An optional ``timeout`` parameter was added to the :func:`urllib.urlopen` "
"function and the :class:`urllib.ftpwrapper` class constructor, as well as "
"the :func:`urllib2.urlopen` function.  The parameter specifies a timeout "
"measured in seconds.   For example::"
msgstr ""
"省略可能パラメータ ``timeout`` が :func:`urllib.urlopen` 関数と :class:"
"`urllib.ftpwrapper` クラスのコンストラクタ、 :func:`urllib2.urlopen` 関数に追"
"加されました。タイムアウトを秒で指定します。例えば::"

#: ../../whatsnew/2.6.rst:2597
msgid "(Added by Facundo Batista.)"
msgstr "(Added by Facundo Batista.)"

#: ../../whatsnew/2.6.rst:2599
msgid ""
"The Unicode database provided by the :mod:`unicodedata` module has been "
"updated to version 5.1.0.  (Updated by Martin von Löwis; :issue:`3811`.)"
msgstr ""
":mod:`unicodedata` モジュールで提供される Unicode データベースが、バージョン "
"5.1.0 に更新されました。 (Updated by Martin von Löwis; :issue:`3811`.)"

#: ../../whatsnew/2.6.rst:2603
msgid ""
"The :mod:`warnings` module's :func:`formatwarning` and :func:`showwarning` "
"gained an optional *line* argument that can be used to supply the line of "
"source code.  (Added as part of :issue:`1631171`, which re-implemented part "
"of the :mod:`warnings` module in C code.)"
msgstr ""
":mod:`warnings` モジュールの :func:`formatwarning` と :func:`showwarning` に"
"省略可能な *line* 引数が追加されました。ソースコードの行番号を与えることが出"
"来ます。 (Added as part of :issue:`1631171`, which re-implemented part of "
"the :mod:`warnings` module in C code.)"

#: ../../whatsnew/2.6.rst:2608
msgid ""
"A new function, :func:`catch_warnings`, is a context manager intended for "
"testing purposes that lets you temporarily modify the warning filters and "
"then restore their original values (:issue:`3781`)."
msgstr ""
"新しい関数 :func:`catch_warnings` はコンテキストマネージャで、テスト目的で警"
"告フィルタを一時的に変更して元に戻すのに使えます。 (:issue:`3781`)."

#: ../../whatsnew/2.6.rst:2612
msgid ""
"The XML-RPC :class:`SimpleXMLRPCServer` and :class:`DocXMLRPCServer` classes "
"can now be prevented from immediately opening and binding to their socket by "
"passing ``False`` as the *bind_and_activate* constructor parameter.  This "
"can be used to modify the instance's :attr:`allow_reuse_address` attribute "
"before calling the :meth:`server_bind` and :meth:`server_activate` methods "
"to open the socket and begin listening for connections. (Contributed by "
"Peter Parente; :issue:`1599845`.)"
msgstr ""
"XML-RPC の :class:`SimpleXMLRPCServer` クラスと :class:`DocXMLRPCServer` クラ"
"スでは、コンストラクタパラメータ *bind_and_activate* に ``False`` を渡すと、"
"そのソケットに即座にバインドして有効化 (訳注: ソケットのリッスン) するのを避"
"けられるようになりました。\n"
"これは :meth:`server_bind` メソッドと :meth:`server_activate` メソッドを呼び"
"出してソケットへのバインドと有効化を行う前に、インスタンスの :attr:"
"`allow_reuse_address` 属性を変更するのに使えます。 (Contributed by Peter "
"Parente; :issue:`1599845`.)"

#: ../../whatsnew/2.6.rst:2621
msgid ""
":class:`SimpleXMLRPCServer` also has a :attr:`_send_traceback_header` "
"attribute; if true, the exception and formatted traceback are returned as "
"HTTP headers \"X-Exception\" and \"X-Traceback\".  This feature is for "
"debugging purposes only and should not be used on production servers because "
"the tracebacks might reveal passwords or other sensitive information.  "
"(Contributed by Alan McIntyre as part of his project for Google's Summer of "
"Code 2007.)"
msgstr ""
":class:`SimpleXMLRPCServer` はさらに :attr:`_send_traceback_header` 属性を持"
"つようになりました。真の場合、例外とフォーマットされたトレースバックが HTTP "
"ヘッダ \"X-Exception\" と \"X-Traceback\" として返ります。この機能はデバッグ"
"のみに使い、製品のサーバには使ってはなりません。トレースバックには剥き出しの"
"パスワードが含まれるかもしれず、あるいはほかの何か企業秘密だったり国家秘密"
"だったりするような繊細な情報満載かもしれないのです。 (Contributed by Alan "
"McIntyre as part of his project for Google's Summer of Code 2007.)"

#: ../../whatsnew/2.6.rst:2629
msgid ""
"The :mod:`xmlrpclib` module no longer automatically converts :class:"
"`datetime.date` and :class:`datetime.time` to the :class:`xmlrpclib."
"DateTime` type; the conversion semantics were not necessarily correct for "
"all applications.  Code using :mod:`xmlrpclib` should convert :class:`date` "
"and :class:`~datetime.time` instances. (:issue:`1330538`)  The code can also "
"handle dates before 1900 (contributed by Ralf Schmitt; :issue:`2014`) and 64-"
"bit integers represented by using ``<i8>`` in XML-RPC responses (contributed "
"by Riku Lindblad; :issue:`2985`)."
msgstr ""
":mod:`xmlrpclib` モジュールが自動的に :class:`datetime.date` と :class:"
"`datetime.time` を :class:`xmlrpclib.DateTime` 型に変換することはなくなりまし"
"た; 変換のセマンティクスが必ずしも全てのアプリケーションで正しいわけではあり"
"ませんでした。 (:issue:`1330538`)\n"
":mod:`xmlrpclib` を使うコードは自分で :class:`date` インスタンスと :class:"
"`~datetime.time` インスタンスを変換すべきです。\n"
"そうしておくと、 1900 年以前の日付 (contributed by Ralf Schmitt; :issue:"
"`2014`) と、XML-RPC レスポンス内で ``<i8>`` を使った 64 ビット整数表現 "
"(contributed by Riku Lindblad; :issue:`2985`) を処理できます。"

#: ../../whatsnew/2.6.rst:2639
msgid ""
"The :mod:`zipfile` module's :class:`ZipFile` class now has :meth:`extract` "
"and :meth:`extractall` methods that will unpack a single file or all the "
"files in the archive to the current directory, or to a specified directory::"
msgstr ""
":mod:`zipfile` モジュールの :class:`ZipFile` クラスに :meth:`extract` メソッ"
"ドと :meth:`extractall` メソッドが追加されました。アーカイブ内の、それぞれ単"
"一ファイル、全てのファイルを、カレントディレクトリか指定のディレクトリに展開"
"します::"

#: ../../whatsnew/2.6.rst:2653
msgid "(Contributed by Alan McIntyre; :issue:`467924`.)"
msgstr "(Contributed by Alan McIntyre; :issue:`467924`.)"

#: ../../whatsnew/2.6.rst:2655
msgid ""
"The :meth:`open`, :meth:`read` and :meth:`extract` methods can now take "
"either a filename or a :class:`ZipInfo` object.  This is useful when an "
"archive accidentally contains a duplicated filename. (Contributed by Graham "
"Horler; :issue:`1775025`.)"
msgstr ""
":meth:`open`, :meth:`read`, :meth:`extract` メソッドはファイル名か :class:"
"`ZipInfo` オブジェクトのどちらかを受け取れるようになっています。これは誤って"
"重複したファイル名を含んでいるアーカイブで有用でしょう。 (Contributed by "
"Graham Horler; :issue:`1775025`.)"

#: ../../whatsnew/2.6.rst:2660
msgid ""
"Finally, :mod:`zipfile` now supports using Unicode filenames for archived "
"files.  (Contributed by Alexey Borzenkov; :issue:`1734346`.)"
msgstr ""
"最後に、 :mod:`zipfile` がアーカイブするファイルのファイル名として Unicode の"
"使用をサポートするようになりました。  (Contributed by Alexey Borzenkov; :"
"issue:`1734346`.)  (---訳注: リファレンスに注意事項として書かれていますが、"
"zip ファイルのファイル名標準は存在しないのでこれは問題を起こすことがありま"
"す。---)"

#: ../../whatsnew/2.6.rst:2667
msgid "The :mod:`ast` module"
msgstr ":mod:`ast` モジュール"

#: ../../whatsnew/2.6.rst:2669
msgid ""
"The :mod:`ast` module provides an Abstract Syntax Tree representation of "
"Python code, and Armin Ronacher contributed a set of helper functions that "
"perform a variety of common tasks.  These will be useful for HTML templating "
"packages, code analyzers, and similar tools that process Python code."
msgstr ""
":mod:`ast` モジュールは Python コードの抽象構文木 (Abstract Syntax Tree) 表現"
"を提供します。また、Armin Ronacher は共通タスクを実行するさまざまなヘルパー関"
"数を寄稿しました。これらは HTML テンプレートパッケージであるとか、コードアナ"
"ライザ、などなどの、Python コードを処理するツールで有用となるでしょう。"

#: ../../whatsnew/2.6.rst:2676
msgid ""
"The :func:`parse` function takes an expression and returns an AST. The :func:"
"`dump` function outputs a representation of a tree, suitable for debugging::"
msgstr ""
":func:`parse` 関数は式を受け取り AST を返します。 :func:`dump` 関数はツリー表"
"現をデバッギングに相応しい出力をします::"

#: ../../whatsnew/2.6.rst:2690
msgid "This outputs a deeply nested tree::"
msgstr "これの出力は深くネストされたツリーです::"

#: ../../whatsnew/2.6.rst:2723
msgid ""
"The :func:`literal_eval` method takes a string or an AST representing a "
"literal expression, parses and evaluates it, and returns the resulting "
"value.  A literal expression is a Python expression containing only strings, "
"numbers, dictionaries, etc. but no statements or function calls.  If you "
"need to evaluate an expression but cannot accept the security risk of using "
"an :func:`eval` call, :func:`literal_eval` will handle it safely::"
msgstr ""
":func:`literal_eval` メソッドは、文字列またはリテラル式を表現する AST を受け"
"取り解析と評価を行い、結果の値を返します。リテラル式は、文字列、数値、辞書な"
"どのみを含む Python 式で、文や関数呼び出しを含みません。もしもあなたに式を評"
"価する必要があって、だけれども :func:`eval` を呼び出すことによるセキュリティ"
"リスクを許容出来ないということであれば、 :func:`literal_eval` がそれを安全に"
"処理してくれます::"

#: ../../whatsnew/2.6.rst:2739
msgid ""
"The module also includes :class:`NodeVisitor` and :class:`NodeTransformer` "
"classes for traversing and modifying an AST, and functions for common "
"transformations such as changing line numbers."
msgstr ""
"モジュールには、AST を横断し、修正するための :class:`NodeVisitor` と :class:"
"`NodeTransformer` クラス、例えば行番号の変更などの共通的な変形を行う関数群が"
"含まれています。"

#: ../../whatsnew/2.6.rst:2747
msgid "The :mod:`future_builtins` module"
msgstr ":mod:`future_builtins` モジュール"

#: ../../whatsnew/2.6.rst:2749
msgid ""
"Python 3.0 makes many changes to the repertoire of built-in functions, and "
"most of the changes can't be introduced in the Python 2.x series because "
"they would break compatibility. The :mod:`future_builtins` module provides "
"versions of these built-in functions that can be imported when writing 3.0-"
"compatible code."
msgstr ""
"Python 3.0 はビルトイン関数のレポジトリにたくさんの変更を加えていて、そのほと"
"んどが互換性を破壊するため Python 2.x シリーズには導入出来ません。 :mod:"
"`future_builtins` モジュールは 3.0 互換コードを書くのにインポート出来る 3.0 "
"互換関数セットです。"

#: ../../whatsnew/2.6.rst:2756
msgid "The functions in this module currently include:"
msgstr "このモジュールに今のところ含まれるのは:"

#: ../../whatsnew/2.6.rst:2758
msgid ""
"``ascii(obj)``: equivalent to :func:`repr`.  In Python 3.0, :func:`repr` "
"will return a Unicode string, while :func:`ascii` will return a pure ASCII "
"bytestring."
msgstr ""
"``ascii(obj)``: 2.x の :func:`repr` と同じことをします。Python 3.0 では :"
"func:`repr` は Unicode 文字列を返すようになっていて、一方 :func:`ascii` は純"
"粋な ASCII バイト文字列を返します。"

#: ../../whatsnew/2.6.rst:2762
msgid ""
"``filter(predicate, iterable)``, ``map(func, iterable1, ...)``: the 3.0 "
"versions return iterators, unlike the 2.x builtins which return lists."
msgstr ""
"``filter(predicate, iterable)``, ``map(func, iterable1, ...)``: 3.0 と同じよ"
"うにイテレータを返し、これは 2.x のビルトインがリストで返すのとは違っていま"
"す。"

#: ../../whatsnew/2.6.rst:2766
msgid ""
"``hex(value)``, ``oct(value)``: instead of calling the :meth:`__hex__` or :"
"meth:`__oct__` methods, these versions will call the :meth:`__index__` "
"method and convert the result to hexadecimal or octal.  :func:`oct` will use "
"the new ``0o`` notation for its result."
msgstr ""
"``hex(value)``, ``oct(value)``: :meth:`__hex__` と :meth:`__oct__` メソッドを"
"呼び出すのではなく、 :meth:`__index__` メソッドを呼び出した結果を "
"hexadecimal または octal に変換します。こちらのバージョンの :func:`oct` は新"
"しい ``0o`` 記法で返却します。"

#: ../../whatsnew/2.6.rst:2775
msgid "The :mod:`json` module: JavaScript Object Notation"
msgstr ":mod:`json` モジュール: JavaScript オブジェクト記法"

#: ../../whatsnew/2.6.rst:2777
msgid ""
"The new :mod:`json` module supports the encoding and decoding of Python "
"types in JSON (Javascript Object Notation). JSON is a lightweight "
"interchange format often used in web applications. For more information "
"about JSON, see http://www.json.org."
msgstr ""
"新しい :mod:`json` モジュールは、JSON (Javascript Object Notation) と Python "
"型のエンコーディング、デコーディングをサポートします。JSON は軽量なデータ交換"
"フォーマットで、頻繁にウェブアプリケーションで使われます。JSON の詳細情報は "
"http://www.json.org にあります。"

#: ../../whatsnew/2.6.rst:2782
msgid ""
":mod:`json` comes with support for decoding and encoding most built-in "
"Python types. The following example encodes and decodes a dictionary::"
msgstr ""
":mod:`json` モジュールはほとんどのビルトイン型のデコーディングとエンコーディ"
"ングサポートを備えています。以下の例は辞書のエンコードとデコードをしていま"
"す::"

#: ../../whatsnew/2.6.rst:2793
msgid ""
"It's also possible to write your own decoders and encoders to support more "
"types. Pretty-printing of the JSON strings is also supported."
msgstr ""
"ほかの何か型をサポートするのに独自のエンコーダ、デコーダを書くことも出来ま"
"す。JSON 文字列の pretty-printing もサポートされています。"

#: ../../whatsnew/2.6.rst:2796
msgid ":mod:`json` (originally called simplejson) was written by Bob Ippolito."
msgstr ""
":mod:`json` (もともと simplejson と呼ばれていました) は Bob Ippolito によって"
"書かれました。"

#: ../../whatsnew/2.6.rst:2803
msgid "The :mod:`plistlib` module: A Property-List Parser"
msgstr ":mod:`plistlib` モジュール: プロパティリストパーサ"

#: ../../whatsnew/2.6.rst:2805
msgid ""
"The ``.plist`` format is commonly used on Mac OS X to store basic data types "
"(numbers, strings, lists, and dictionaries) by serializing them into an XML-"
"based format. It resembles the XML-RPC serialization of data types."
msgstr ""
"``.plist`` フォーマットは Mac OS X で一般的に使われ、基本的なデータ型(数値、"
"文字列、リスト、辞書)を XML ベースのフォーマットにシリアライズして格納しま"
"す。データ型の XML-RPC シリアライズに似ています。"

#: ../../whatsnew/2.6.rst:2810
msgid ""
"Despite being primarily used on Mac OS X, the format has nothing Mac-"
"specific about it and the Python implementation works on any platform that "
"Python supports, so the :mod:`plistlib` module has been promoted to the "
"standard library."
msgstr ""
"Mac OS X で主に使われるとはいえ、そのフォーマットはまったく Mac 固有ではなく"
"その Python 実装は Python がサポートするあらゆるプラットフォームで動作するの"
"で、:mod:`plistlib` は標準ライブラリに昇格しました。"

#: ../../whatsnew/2.6.rst:2815
msgid "Using the module is simple::"
msgstr "モジュールを使うのは単純です::"

#: ../../whatsnew/2.6.rst:2842
msgid "ctypes Enhancements"
msgstr "ctypes の強化"

#: ../../whatsnew/2.6.rst:2844
msgid ""
"Thomas Heller continued to maintain and enhance the :mod:`ctypes` module."
msgstr "Thomas Heller は :mod:`ctypes` モジュールの保守と拡張を続けました。"

#: ../../whatsnew/2.6.rst:2847
msgid ""
":mod:`ctypes` now supports a :class:`c_bool` datatype that represents the "
"C99 ``bool`` type.  (Contributed by David Remahl; :issue:`1649190`.)"
msgstr ""
":mod:`ctypes` は今では C99 ``bool`` 型を表す :class:`c_bool` データ型をサポー"
"トします。  (Contributed by David Remahl; :issue:`1649190`.)"

#: ../../whatsnew/2.6.rst:2851
msgid ""
"The :mod:`ctypes` string, buffer and array types have improved support for "
"extended slicing syntax, where various combinations of ``(start, stop, "
"step)`` are supplied. (Implemented by Thomas Wouters.)"
msgstr ""
":mod:`ctypes` の string, buffer, array 型が拡張スライスインデクス構文をサポー"
"トするように改善され、 ``(start, stop, step)`` の色々な組み合わせが使えま"
"す。 (Implemented by Thomas Wouters.)"

#: ../../whatsnew/2.6.rst:2858
msgid ""
"All :mod:`ctypes` data types now support :meth:`from_buffer` and :meth:"
"`from_buffer_copy` methods that create a ctypes instance based on a provided "
"buffer object.  :meth:`from_buffer_copy` copies the contents of the object, "
"while :meth:`from_buffer` will share the same memory area."
msgstr ""
"全ての :mod:`ctypes` データ型が :meth:`from_buffer`, :meth:"
"`from_buffer_copy` メソッドをサポートするようになりました。これは与えられた "
"buffer オブジェクトに基く ctypes インスタンスを作ります。 :meth:"
"`from_buffer_copy` はそのオブジェクトの内容をコピーし、 :meth:`from_buffer` "
"はその同じメモリ領域を共有します。"

#: ../../whatsnew/2.6.rst:2865
msgid ""
"A new calling convention tells :mod:`ctypes` to clear the ``errno`` or Win32 "
"LastError variables at the outset of each wrapped call. (Implemented by "
"Thomas Heller; :issue:`1798`.)"
msgstr ""
"新しい呼び出しの慣例は、 :mod:`ctypes` にそれぞれのラップされた呼び出しの発生"
"時に ``errno`` あるいは Win32 LastError 変数をクリアすることを伝えることで"
"す。 (Implemented by Thomas Heller; :issue:`1798`.)"

#: ../../whatsnew/2.6.rst:2869
msgid ""
"You can now retrieve the Unix ``errno`` variable after a function call.  "
"When creating a wrapped function, you can supply ``use_errno=True`` as a "
"keyword parameter to the :func:`DLL` function and then call the module-level "
"methods :meth:`set_errno` and :meth:`get_errno` to set and retrieve the "
"error value."
msgstr ""
"Unix ``errno`` 変数を関数呼び出し後に抽出できるようになっています。ラップされ"
"た関数を作る際、 ``use_errno=True`` を :func:`DLL` 関数へのキーワード引数とし"
"て渡すことが出来、それによりモジュールレベル関数の :meth:`set_errno` と :"
"meth:`get_errno` を、 errno 値を設定・取得するのに呼び出せます。"

#: ../../whatsnew/2.6.rst:2875
msgid ""
"The Win32 LastError variable is similarly supported by the :func:`DLL`, :"
"func:`OleDLL`, and :func:`WinDLL` functions. You supply "
"``use_last_error=True`` as a keyword parameter and then call the module-"
"level methods :meth:`set_last_error` and :meth:`get_last_error`."
msgstr ""
"Win32 LastError は :func:`DLL`, :func:`OleDLL`, :func:`WinDLL` 関数で同じよう"
"にサポートされています。同じように ``use_last_error=True`` を与え、モジュール"
"レベル関数 :meth:`set_last_error` と :meth:`get_last_error` を使います。"

#: ../../whatsnew/2.6.rst:2881
msgid ""
"The :func:`byref` function, used to retrieve a pointer to a ctypes instance, "
"now has an optional *offset* parameter that is a byte count that will be "
"added to the returned pointer."
msgstr ""
"ctypes インスタンスへのポインタを抽出にするのに使われる :func:`byref` 関数"
"が、省略可能な *offset* パラメータを受け取るようになりました。これは返される"
"ポインタに追加されるバイト数です。"

#: ../../whatsnew/2.6.rst:2888
msgid "Improved SSL Support"
msgstr "SSL サポートの改善"

#: ../../whatsnew/2.6.rst:2890
msgid ""
"Bill Janssen made extensive improvements to Python 2.6's support for the "
"Secure Sockets Layer by adding a new module, :mod:`ssl`, that's built atop "
"the `OpenSSL <https://www.openssl.org/>`__ library. This new module provides "
"more control over the protocol negotiated, the X.509 certificates used, and "
"has better support for writing SSL servers (as opposed to clients) in "
"Python.  The existing SSL support in the :mod:`socket` module hasn't been "
"removed and continues to work, though it will be removed in Python 3.0."
msgstr ""
"Bill Janssen は Python 2.6 の Secure Sockets Layer サポートを大掛かりに改善し"
"ました。行われたのは新モジュール :mod:`ssl` の追加です。これは `OpenSSL "
"<https://www.openssl.org/>`__ ライブラリの上に構築されています。この新しいモ"
"ジュールはプロトコルのネゴシエイトのさらなる制御、X.509 証明書の使用、そして "
"SSL サーバ (クライアントの対語としての) を Python で書くためのより良いサポー"
"トを提供しています。既存の :mod:`socket` モジュールにある SSL サポートは削除"
"されずにそのまま使えますが、Python 3.0 では削除されます。"

#: ../../whatsnew/2.6.rst:2899
msgid ""
"To use the new module, you must first create a TCP connection in the usual "
"way and then pass it to the :func:`ssl.wrap_socket` function. It's possible "
"to specify whether a certificate is required, and to obtain certificate info "
"by calling the :meth:`getpeercert` method."
msgstr ""
"この新たなモジュールを使うには、まず最初にいつものやり方で TCP コネクションを"
"作らなければなりません。そしてその上でそれを :func:`ssl.wrap_socket` 関数に渡"
"します (---訳注: 2.7.9 ではさらに進化した ``SSLContext.wrap_socket`` が使えま"
"す ---)。証明書が必要かどうかを指定することが出来、証明書の情報を :meth:"
"`getpeercert` メソッドで取得することも出来ます。"

#: ../../whatsnew/2.6.rst:2906
msgid "The documentation for the :mod:`ssl` module."
msgstr ":mod:`ssl` モジュールについてのドキュメント。"

#: ../../whatsnew/2.6.rst:2911
msgid "Deprecations and Removals"
msgstr "非推奨と削除"

#: ../../whatsnew/2.6.rst:2913 ../../whatsnew/2.6.rst:3241
msgid ""
"String exceptions have been removed.  Attempting to use them raises a :exc:"
"`TypeError`."
msgstr ""
"文字列を例外として送出することは出来なくなりました。これをすると :exc:"
"`TypeError` を起こします。"

#: ../../whatsnew/2.6.rst:2916
msgid ""
"Changes to the :class:`Exception` interface as dictated by :pep:`352` "
"continue to be made.  For 2.6, the :attr:`message` attribute is being "
"deprecated in favor of the :attr:`args` attribute."
msgstr ""
":pep:`352` で指示される :class:`Exception` インターフェイスの変更が続けられて"
"います。 2.6 では、 :attr:`args` 属性を採用するので :attr:`message` 属性が非"
"推奨となります。"

#: ../../whatsnew/2.6.rst:2921
msgid ""
"(3.0-warning mode) Python 3.0 will feature a reorganized standard library "
"that will drop many outdated modules and rename others. Python 2.6 running "
"in 3.0-warning mode will warn about these modules when they are imported."
msgstr ""
"(3.0 警告モード) Python 3.0 はたくさんの時代遅れのモジュールを削除し、ほかの"
"ものも名前変更するような標準ライブラリの再編成が特色となります。Python 2.6 "
"を 3.0 警告モードで動かすと、それらがインポートされる際に警告が励起されます。"

#: ../../whatsnew/2.6.rst:2926
msgid ""
"The list of deprecated modules is: :mod:`audiodev`, :mod:`bgenlocations`, :"
"mod:`buildtools`, :mod:`bundlebuilder`, :mod:`Canvas`, :mod:`compiler`, :mod:"
"`dircache`, :mod:`dl`, :mod:`fpformat`, :mod:`gensuitemodule`, :mod:"
"`ihooks`, :mod:`imageop`, :mod:`imgfile`, :mod:`linuxaudiodev`, :mod:"
"`mhlib`, :mod:`mimetools`, :mod:`multifile`, :mod:`new`, :mod:`pure`, :mod:"
"`statvfs`, :mod:`sunaudiodev`, :mod:`test.testall`, and :mod:`toaiff`."
msgstr ""
"非推奨モジュールのリストです: :mod:`audiodev`, :mod:`bgenlocations`, :mod:"
"`buildtools`, :mod:`bundlebuilder`, :mod:`Canvas`, :mod:`compiler`, :mod:"
"`dircache`, :mod:`dl`, :mod:`fpformat`, :mod:`gensuitemodule`, :mod:"
"`ihooks`, :mod:`imageop`, :mod:`imgfile`, :mod:`linuxaudiodev`, :mod:"
"`mhlib`, :mod:`mimetools`, :mod:`multifile`, :mod:`new`, :mod:`pure`, :mod:"
"`statvfs`, :mod:`sunaudiodev`, :mod:`test.testall`, :mod:`toaiff`."

#: ../../whatsnew/2.6.rst:2951
msgid "The :mod:`gopherlib` module has been removed."
msgstr ":mod:`gopherlib` モジュールは削除されました。"

#: ../../whatsnew/2.6.rst:2953
msgid ""
"The :mod:`MimeWriter` module and :mod:`mimify` module have been deprecated; "
"use the :mod:`email` package instead."
msgstr ""
":mod:`MimeWriter` モジュールと :mod:`mimify` モジュール は非推奨となっていま"
"す。代わりに  :mod:`email` パッケージを使ってください。"

#: ../../whatsnew/2.6.rst:2957
msgid ""
"The :mod:`md5` module has been deprecated; use the :mod:`hashlib` module "
"instead."
msgstr ""
":mod:`md5` モジュールは非推奨となりました。代わりに :mod:`hashlib` モジュール"
"を使ってください。"

#: ../../whatsnew/2.6.rst:2960
msgid ""
"The :mod:`posixfile` module has been deprecated; :func:`fcntl.lockf` "
"provides better locking."
msgstr ""
":mod:`posixfile` モジュールは非推奨となりました。  :func:`fcntl.lockf` がより"
"良いロッキングを提供しています。"

#: ../../whatsnew/2.6.rst:2963
msgid ""
"The :mod:`popen2` module has been deprecated; use the :mod:`subprocess` "
"module."
msgstr ""
":mod:`popen2` モジュールは非推奨となっています。  :mod:`subprocess` モジュー"
"ルを使ってください。"

#: ../../whatsnew/2.6.rst:2966
msgid "The :mod:`rgbimg` module has been removed."
msgstr ":mod:`rgbimg` モジュールは削除されました。"

#: ../../whatsnew/2.6.rst:2968
msgid ""
"The :mod:`sets` module has been deprecated; it's better to use the built-in :"
"class:`set` and :class:`frozenset` types."
msgstr ""
":mod:`sets` モジュールは非推奨となりました。代わりにビルトインの  :class:"
"`set`, :class:`frozenset` 型を使ってください。"

#: ../../whatsnew/2.6.rst:2971
msgid ""
"The :mod:`sha` module has been deprecated; use the :mod:`hashlib` module "
"instead."
msgstr ""
":mod:`sha` モジュールは非推奨となりました。代わりに :mod:`hashlib` モジュール"
"を使ってください。"

#: ../../whatsnew/2.6.rst:2979
msgid "Build and C API Changes"
msgstr "ビルドならびに C API の変更"

#: ../../whatsnew/2.6.rst:2981
msgid "Changes to Python's build process and to the C API include:"
msgstr "Python のビルド過程と C API の変更は以下の通りです:"

#: ../../whatsnew/2.6.rst:2983
msgid ""
"Python now must be compiled with C89 compilers (after 19 years!).  This "
"means that the Python source tree has dropped its own implementations of :c:"
"func:`memmove` and :c:func:`strerror`, which are in the C89 standard library."
msgstr ""
"Python はもはや、 C89 コンパイラでコンパイルされなければなりません (19 年も"
"経ってる!)。ですので Python ソースツリーからは、 :c:func:`memmove` と :c:"
"func:`strerror` の手前実装が削除されています。C89 標準ライブラリにあるもので"
"すから。"

#: ../../whatsnew/2.6.rst:2988
msgid ""
"Python 2.6 can be built with Microsoft Visual Studio 2008 (version 9.0), and "
"this is the new default compiler.  See the :file:`PCbuild` directory for the "
"build files.  (Implemented by Christian Heimes.)"
msgstr ""
"Python 2.6 は Microsoft Visual Studio 2008 (version 9.0) でビルド出来ます。そ"
"してこれが新しいデフォルトコンパイラです。 :file:`PCbuild` ディレクトリのビル"
"ドファイルを参照して下さい。 (Implemented by Christian Heimes.)"

#: ../../whatsnew/2.6.rst:2993
msgid ""
"On Mac OS X, Python 2.6 can be compiled as a 4-way universal build. The :"
"program:`configure` script can take a :option:`!--with-universal-archs=[32-"
"bit|64-bit|all]` switch, controlling whether the binaries are built for 32-"
"bit architectures (x86, PowerPC), 64-bit (x86-64 and PPC-64), or both. "
"(Contributed by Ronald Oussoren.)"
msgstr ""
"Mac OS X では、Python 2.6 は 4 種類のユニバーサルビルドでコンパイル出来ま"
"す。 :program:`configure` スクリプトは :option:`!--with-universal-archs=[32-"
"bit|64-bit|all]` スイッチを取って、32-bit アーキテクチャ (x86, PowerPC), 64-"
"bit (x86-64 and PPC-64), あるいは両方のバイナリをビルド出来ます。 "
"(Contributed by Ronald Oussoren.)"

#: ../../whatsnew/2.6.rst:3000
msgid ""
"The BerkeleyDB module now has a C API object, available as ``bsddb.db."
"api``.   This object can be used by other C extensions that wish to use the :"
"mod:`bsddb` module for their own purposes. (Contributed by Duncan Grisby.)"
msgstr ""
"BerkeleyDB モジュールが C API オブジェクトを公開しています。 ``bsddb.db."
"api`` として利用可能です。このモジュールは :mod:`bsddb` モジュールを自身の独"
"自の目的で使いたいほかの C 拡張で使えます。 (Contributed by Duncan Grisby.)"

#: ../../whatsnew/2.6.rst:3005
msgid ""
"The new buffer interface, previously described in `the PEP 3118 section "
"<#pep-3118-revised-buffer-protocol>`__, adds :c:func:`PyObject_GetBuffer` "
"and :c:func:`PyBuffer_Release`, as well as a few other functions."
msgstr ""
"`PEP 3118 改訂版バッファプロトコル <#pep-3118-revised-buffer-protocol>`__ で"
"前述の新しいバッファインターフェイスのために、 :c:func:`PyObject_GetBuffer` "
"と :c:func:`PyBuffer_Release` とほか少しの関数が追加されました。"

#: ../../whatsnew/2.6.rst:3010
msgid ""
"Python's use of the C stdio library is now thread-safe, or at least as "
"thread-safe as the underlying library is.  A long-standing potential bug "
"occurred if one thread closed a file object while another thread was reading "
"from or writing to the object.  In 2.6 file objects have a reference count, "
"manipulated by the :c:func:`PyFile_IncUseCount` and :c:func:"
"`PyFile_DecUseCount` functions.  File objects can't be closed unless the "
"reference count is zero.  :c:func:`PyFile_IncUseCount` should be called "
"while the GIL is still held, before carrying out an I/O operation using the "
"``FILE *`` pointer, and :c:func:`PyFile_DecUseCount` should be called "
"immediately after the GIL is re-acquired. (Contributed by Antoine Pitrou and "
"Gregory P. Smith.)"
msgstr ""
"Python の C stdio ライブラリの使用は今では、スレッドセーフ、もしくは、最低で"
"も基底のライブラリと同じ程度にはスレッドセーフです。ファイルをあるスレッドが"
"別スレッドで読み書き最中にクローズするとマズイことが起こるのは、もう長いこと"
"居座り続けた潜在的なバグでした。2.6 ではファイルオブジェクトが参照カウントを"
"持っていて、 :c:func:`PyFile_IncUseCount`, :c:func:`PyFile_DecUseCount` 関数"
"で操作します。ファイルオブジェクトは参照カウントがゼロにならない限りクローズ"
"出来ません。GIL が獲得されている間に ``FILE *`` ポインタを使った I/O 操作を実"
"行する前に :c:func:`PyFile_IncUseCount` が呼び出されなければなりません。ま"
"た、GIL の再獲得後に即座に :c:func:`PyFile_DecUseCount` が呼び出されなければ"
"なりません。(---訳注: 伝わりづらいので別の言い方で言い直すと「Inc してから "
"GIL 解放して FILE\\* を弄び、済んだら GIL 再獲得して Dec する」。リファレンス"
"のコード例ですぐにわかります。---) (Contributed by Antoine Pitrou and "
"Gregory P. Smith.)"

#: ../../whatsnew/2.6.rst:3023
msgid ""
"Importing modules simultaneously in two different threads no longer "
"deadlocks; it will now raise an :exc:`ImportError`.  A new API function, :c:"
"func:`PyImport_ImportModuleNoBlock`, will look for a module in ``sys."
"modules`` first, then try to import it after acquiring an import lock.  If "
"the import lock is held by another thread, an :exc:`ImportError` is raised. "
"(Contributed by Christian Heimes.)"
msgstr ""
"異なるスレッドから同時にモジュールをインポートすることでデッドロックが発生す"
"ることはなくなりました; 今では :exc:`ImportError` になります。新たな API 関"
"数 :c:func:`PyImport_ImportModuleNoBlock` は最初に ``sys.modules`` を探し、イ"
"ンポートロック獲得後にインポートしようと試みます。インポートロックが他のス"
"レッドにより獲得されていれば :exc:`ImportError` が発生します。(Contributed "
"by Christian Heimes.)"

#: ../../whatsnew/2.6.rst:3031
msgid ""
"Several functions return information about the platform's floating-point "
"support.  :c:func:`PyFloat_GetMax` returns the maximum representable "
"floating point value, and :c:func:`PyFloat_GetMin` returns the minimum "
"positive value.  :c:func:`PyFloat_GetInfo` returns an object containing more "
"information from the :file:`float.h` file, such as ``\"mant_dig\"`` (number "
"of digits in the mantissa), ``\"epsilon\"`` (smallest difference between 1.0 "
"and the next largest value representable), and several others. (Contributed "
"by Christian Heimes; :issue:`1534`.)"
msgstr ""
"いくつかの関数が、プラットフォームの浮動小数点サポートについての情報を返しま"
"す。 :c:func:`PyFloat_GetMax` は浮動小数点数で表現出来る最大値を返し、 :c:"
"func:`PyFloat_GetMin` は正の最小値を返します。 :c:func:`PyFloat_GetInfo` は :"
"file:`float.h` からの情報を含むオブジェクトを返し、これには ``\"mant_dig\"`` "
"(仮数部桁数)、 ``\"epsilon\"`` (1.0 とそれより大きい表現可能な最小値との差)や"
"ほかのいくつかの情報を含みます。 (Contributed by Christian Heimes; :issue:"
"`1534`.)"

#: ../../whatsnew/2.6.rst:3042
msgid ""
"C functions and methods that use :c:func:`PyComplex_AsCComplex` will now "
"accept arguments that have a :meth:`__complex__` method.  In particular, the "
"functions in the :mod:`cmath` module will now accept objects with this "
"method. This is a backport of a Python 3.0 change. (Contributed by Mark "
"Dickinson; :issue:`1675423`.)"
msgstr ""
":c:func:`PyComplex_AsCComplex` を使う C 関数とメソッドが :meth:`__complex__` "
"メソッドを持つ引数を受け付けるようになっています。特に、 :mod:`cmath` モ"
"ジュールにある関数は、このメソッドを持つオブジェクトを受け付けます。これは "
"Python 3.0 での変更のバックポートです。 (Contributed by Mark Dickinson; :"
"issue:`1675423`.)"

#: ../../whatsnew/2.6.rst:3049
msgid ""
"Python's C API now includes two functions for case-insensitive string "
"comparisons, ``PyOS_stricmp(char*, char*)`` and ``PyOS_strnicmp(char*, "
"char*, Py_ssize_t)``. (Contributed by Christian Heimes; :issue:`1635`.)"
msgstr ""
"Python C API に 2 つの大文字小文字を区別しない文字列比較関数 "
"``PyOS_stricmp(char*, char*)`` と ``PyOS_strnicmp(char*, char*, "
"Py_ssize_t)`` が追加されました。 (Contributed by Christian Heimes; :issue:"
"`1635`.)"

#: ../../whatsnew/2.6.rst:3054
msgid ""
"Many C extensions define their own little macro for adding integers and "
"strings to the module's dictionary in the ``init*`` function.  Python 2.6 "
"finally defines standard macros for adding values to a module, :c:macro:"
"`PyModule_AddStringMacro` and :c:macro:`PyModule_AddIntMacro()`.  "
"(Contributed by Christian Heimes.)"
msgstr ""
"多くの C 拡張が、 ``init*`` 関数内でモジュール辞書に整数と文字列定数を追加す"
"るために独自の小さなマクロを定義しています。 Python 2.6 ではついにモジュール"
"に値を追加する標準マクロを定義しました。 :c:macro:`PyModule_AddStringMacro` "
"と :c:macro:`PyModule_AddIntMacro()` です。 (Contributed by Christian "
"Heimes.)"

#: ../../whatsnew/2.6.rst:3061
msgid ""
"Some macros were renamed in both 3.0 and 2.6 to make it clearer that they "
"are macros, not functions.  :c:macro:`Py_Size()` became :c:macro:"
"`Py_SIZE()`, :c:macro:`Py_Type()` became :c:macro:`Py_TYPE()`, and :c:macro:"
"`Py_Refcnt()` became :c:macro:`Py_REFCNT()`. The mixed-case macros are still "
"available in Python 2.6 for backward compatibility. (:issue:`1629`)"
msgstr ""
"いくつかのマクロが 3.0 と 2.6 の両方でリネームされました。それが関数ではなく"
"マクロであることを明確にするためです。 :c:macro:`Py_Size()` は :c:macro:"
"`Py_SIZE()` となり、 :c:macro:`Py_Type()` は :c:macro:`Py_TYPE()` に、そし"
"て :c:macro:`Py_Refcnt()` が :c:macro:`Py_REFCNT()` になっています。元の大小"
"文字混在版は後方互換のために Python 2.6 では利用可能なままです。 (:issue:"
"`1629`)"

#: ../../whatsnew/2.6.rst:3070
msgid ""
"Distutils now places C extensions it builds in a different directory when "
"running on a debug version of Python. (Contributed by Collin Winter; :issue:"
"`1530959`.)"
msgstr ""
"Distutils は C 拡張を、デバッグバージョンの Python 実行時に別のディレクトリに"
"ビルドするようになりました。 (Contributed by Collin Winter; :issue:"
"`1530959`.)"

#: ../../whatsnew/2.6.rst:3074
msgid ""
"Several basic data types, such as integers and strings, maintain internal "
"free lists of objects that can be re-used.  The data structures for these "
"free lists now follow a naming convention: the variable is always named "
"``free_list``, the counter is always named ``numfree``, and a macro "
"``Py<typename>_MAXFREELIST`` is always defined."
msgstr ""
"いくつかの基本データ型、例えば数値や文字列型は、あとで再利用されるオブジェク"
"トのフリーリスト(---訳注: メモリ管理での alloc/free の free。---)を内部的に管"
"理しています。それらデータ構造はこのフリーリストに関して、命名規約に従うよう"
"にしました; その変数名は常に ``free_list`` 、カウンタは常に ``numfree`` 、そ"
"してマクロ ``Py<typename>_MAXFREELIST`` が必ず定義されます。"

#: ../../whatsnew/2.6.rst:3081
msgid ""
"A new Makefile target, \"make patchcheck\", prepares the Python source tree "
"for making a patch: it fixes trailing whitespace in all modified ``.py`` "
"files, checks whether the documentation has been changed, and reports "
"whether the :file:`Misc/ACKS` and :file:`Misc/NEWS` files have been updated. "
"(Contributed by Brett Cannon.)"
msgstr ""
"新たに追加された Makefile のターゲット \"make patchcheck\" は、Python ソース"
"ツリーに対してパッチを作る準備をします: 修正された ``.py`` ファイル全てに含ま"
"れる末尾の余分な空白を取り除き、ドキュメンテーションが変更されているかを"
"チェックし、そして :file:`Misc/ACKS` と :file:`Misc/NEWS` が更新されているか"
"どうかを報告します。 (Contributed by Brett Cannon.)"

#: ../../whatsnew/2.6.rst:3088
msgid ""
"Another new target, \"make profile-opt\", compiles a Python binary using "
"GCC's profile-guided optimization.  It compiles Python with profiling "
"enabled, runs the test suite to obtain a set of profiling results, and then "
"compiles using these results for optimization. (Contributed by Gregory P. "
"Smith.)"
msgstr ""
"もう一つの新しいターゲット \"make profile-opt\" は、GCC の profile-guided 最"
"適化を使った Python バイナリをビルドします。これは Python をプロファイリング"
"を有効にしてビルドし、プロファイル結果のセットを得るためのテストスイートを実"
"施し、そして最適化のためにそれら結果を使ってビルドします。 (Contributed by "
"Gregory P. Smith.)"

#: ../../whatsnew/2.6.rst:3097
msgid "Port-Specific Changes: Windows"
msgstr "ポート特有の変更: Windows"

#: ../../whatsnew/2.6.rst:3099
msgid ""
"The support for Windows 95, 98, ME and NT4 has been dropped. Python 2.6 "
"requires at least Windows 2000 SP4."
msgstr ""
"Windows 95, 98, ME, NT4 のサポートはとりやめられました。 Python 2.6 は最低で"
"も Windows 2000 SP4 が必要です。"

#: ../../whatsnew/2.6.rst:3102
msgid ""
"The new default compiler on Windows is Visual Studio 2008 (version 9.0). The "
"build directories for Visual Studio 2003 (version 7.1) and 2005 (version "
"8.0) were moved into the PC/ directory. The new :file:`PCbuild` directory "
"supports cross compilation for X64, debug builds and Profile Guided "
"Optimization (PGO). PGO builds are roughly 10% faster than normal builds.  "
"(Contributed by Christian Heimes with help from Amaury Forgeot d'Arc and "
"Martin von Löwis.)"
msgstr ""
"Windows での新しいデフォルトコンパイラが Visual Studio 2008 (version 9.0) に"
"なっています。Visual Studio 2003 (version 7.1) と 2005 (version 8.0) のビルド"
"ディレクトリは PC/ に移動しました。新しい :file:`PCbuild` ディレクトリは "
"X64, デバッグビルド、Profile Guided Optimization (PGO) をサポートしています。"
"PGO ビルドは通常ビルドに較べておよそ 10% 高速化になります。 (Contributed by "
"Christian Heimes with help from Amaury Forgeot d'Arc and Martin von Löwis.)"

#: ../../whatsnew/2.6.rst:3110
msgid ""
"The :mod:`msvcrt` module now supports both the normal and wide char variants "
"of the console I/O API.  The :func:`getwch` function reads a keypress and "
"returns a Unicode value, as does the :func:`getwche` function.  The :func:"
"`putwch` function takes a Unicode character and writes it to the console. "
"(Contributed by Christian Heimes.)"
msgstr ""
":mod:`msvcrt` モジュールはいまでは通常文字系とワイド文字系の両方のコンソール "
"I/O API をサポートします。 :func:`getwch` 関数と :func:`getwche` 関数は打鍵を"
"読み取り、Unicode 値を返します。 :func:`putwch` 関数は Unicode 文字を受け取"
"り、コンソールに書き出します。 (Contributed by Christian Heimes.)"

#: ../../whatsnew/2.6.rst:3117
msgid ""
":func:`os.path.expandvars` will now expand environment variables in the form "
"\"%var%\", and \"~user\" will be expanded into the user's home directory "
"path.  (Contributed by Josiah Carlson; :issue:`957650`.)"
msgstr ""
":func:`os.path.expandvars` は \"%var%\" 形式を環境変数で置換し、 \"~user\" を"
"ユーザのホームディレクトリパスに置換します(---訳注: 上のほうの訳注参"
"照。---)。 (Contributed by Josiah Carlson; :issue:`957650`.)"

#: ../../whatsnew/2.6.rst:3121
msgid ""
"The :mod:`socket` module's socket objects now have an :meth:`ioctl` method "
"that provides a limited interface to the :c:func:`WSAIoctl` system interface."
msgstr ""
":mod:`socket` モジュールのソケットオブジェクトが :meth:`ioctl` メソッドを持つ"
"ようになりました。 :c:func:`WSAIoctl` インターフェイスへの限定的なインター"
"フェイスを提供します。"

#: ../../whatsnew/2.6.rst:3125
msgid ""
"The :mod:`_winreg` module now has a function, :func:"
"`ExpandEnvironmentStrings`, that expands environment variable references "
"such as ``%NAME%`` in an input string.  The handle objects provided by this "
"module now support the context protocol, so they can be used in :keyword:"
"`with` statements. (Contributed by Christian Heimes.)"
msgstr ""
":mod:`_winreg` モジュールに新しい関数 :func:`ExpandEnvironmentStrings` が追加"
"されています。これは入力文字列が ``%NAME%`` のように参照されている場合に環境"
"変数を展開します。このモジュールで提供されるハンドルオブジェクトはコンテキス"
"ト管理プロトコルをサポートするようになったので、 :keyword:`with` ステートメン"
"トで使えます。 (Contributed by Christian Heimes.)"

#: ../../whatsnew/2.6.rst:3132
msgid ""
":mod:`_winreg` also has better support for x64 systems, exposing the :func:"
"`DisableReflectionKey`, :func:`EnableReflectionKey`, and :func:"
"`QueryReflectionKey` functions, which enable and disable registry reflection "
"for 32-bit processes running on 64-bit systems. (:issue:`1753245`)"
msgstr ""
":mod:`_winreg` は x64 システムのためのより良いサポートが追加されています。 "
"64 ビットシステムで動作する 32 ビットプロセスでレジストリリフレクションを有無"
"効化をする :func:`DisableReflectionKey`, :func:`EnableReflectionKey`,  :func:"
"`QueryReflectionKey` 関数を公開しています。 (:issue:`1753245`)"

#: ../../whatsnew/2.6.rst:3138
msgid ""
"The :mod:`msilib` module's :class:`Record` object gained :meth:`GetInteger` "
"and :meth:`GetString` methods that return field values as an integer or a "
"string. (Contributed by Floris Bruynooghe; :issue:`2125`.)"
msgstr ""
":mod:`msilib` モジュールの :class:`Record` オブジェクトに :meth:`GetInteger` "
"と :meth:`GetString` メソッドが追加されました。フィールド値をそれぞれ数値とし"
"て、または文字列として返します。 (Contributed by Floris Bruynooghe; :issue:"
"`2125`.)"

#: ../../whatsnew/2.6.rst:3146
msgid "Port-Specific Changes: Mac OS X"
msgstr "ポート特有の変更: Mac OS X"

#: ../../whatsnew/2.6.rst:3148
msgid ""
"When compiling a framework build of Python, you can now specify the "
"framework name to be used by providing the :option:`!--with-framework-name=` "
"option to the :program:`configure` script."
msgstr ""
"Python をフレームワークビルドでコンパイルする際に、 :program:`configure` スク"
"リプトに :option:`!--with-framework-name` オプションでフレームワーク名を指定"
"出来るようになりました。"

#: ../../whatsnew/2.6.rst:3153
msgid ""
"The :mod:`macfs` module has been removed.  This in turn required the :func:"
"`macostools.touched` function to be removed because it depended on the :mod:"
"`macfs` module.  (:issue:`1490190`)"
msgstr ""
":mod:`macfs` モジュールは削除されました。これは同様に :func:`macostools."
"touched` 関数の削除を必要としました。それが  :mod:`macfs` モジュールに依存し"
"ていたので。  (:issue:`1490190`)"

#: ../../whatsnew/2.6.rst:3157
msgid ""
"Many other Mac OS modules have been deprecated and will be removed in Python "
"3.0: :mod:`_builtinSuites`, :mod:`aepack`, :mod:`aetools`, :mod:`aetypes`, :"
"mod:`applesingle`, :mod:`appletrawmain`, :mod:`appletrunner`, :mod:"
"`argvemulator`, :mod:`Audio_mac`, :mod:`autoGIL`, :mod:`Carbon`, :mod:"
"`cfmfile`, :mod:`CodeWarrior`, :mod:`ColorPicker`, :mod:`EasyDialogs`, :mod:"
"`Explorer`, :mod:`Finder`, :mod:`FrameWork`, :mod:`findertools`, :mod:`ic`, :"
"mod:`icglue`, :mod:`icopen`, :mod:`macerrors`, :mod:`MacOS`, :mod:`macfs`, :"
"mod:`macostools`, :mod:`macresource`, :mod:`MiniAEFrame`, :mod:`Nav`, :mod:"
"`Netscape`, :mod:`OSATerminology`, :mod:`pimp`, :mod:`PixMapWrapper`, :mod:"
"`StdSuites`, :mod:`SystemEvents`, :mod:`Terminal`, and :mod:"
"`terminalcommand`."
msgstr ""
"ほか多くの Mac OS モジュールが非推奨となり、 Python 3.0 では削除されます: :"
"mod:`_builtinSuites`, :mod:`aepack`, :mod:`aetools`, :mod:`aetypes`, :mod:"
"`applesingle`, :mod:`appletrawmain`, :mod:`appletrunner`, :mod:"
"`argvemulator`, :mod:`Audio_mac`, :mod:`autoGIL`, :mod:`Carbon`, :mod:"
"`cfmfile`, :mod:`CodeWarrior`, :mod:`ColorPicker`, :mod:`EasyDialogs`, :mod:"
"`Explorer`, :mod:`Finder`, :mod:`FrameWork`, :mod:`findertools`, :mod:`ic`, :"
"mod:`icglue`, :mod:`icopen`, :mod:`macerrors`, :mod:`MacOS`, :mod:`macfs`, :"
"mod:`macostools`, :mod:`macresource`, :mod:`MiniAEFrame`, :mod:`Nav`, :mod:"
"`Netscape`, :mod:`OSATerminology`, :mod:`pimp`, :mod:`PixMapWrapper`, :mod:"
"`StdSuites`, :mod:`SystemEvents`, :mod:`Terminal`, :mod:`terminalcommand` 。"

#: ../../whatsnew/2.6.rst:3200
msgid "Port-Specific Changes: IRIX"
msgstr "ポート特有の変更: IRIX"

#: ../../whatsnew/2.6.rst:3202
msgid ""
"A number of old IRIX-specific modules were deprecated and will be removed in "
"Python 3.0: :mod:`al` and :mod:`AL`, :mod:`cd`, :mod:`cddb`, :mod:"
"`cdplayer`, :mod:`CL` and :mod:`cl`, :mod:`DEVICE`, :mod:`ERRNO`, :mod:"
"`FILE`, :mod:`FL` and :mod:`fl`, :mod:`flp`, :mod:`fm`, :mod:`GET`, :mod:"
"`GLWS`, :mod:`GL` and :mod:`gl`, :mod:`IN`, :mod:`IOCTL`, :mod:`jpeg`, :mod:"
"`panelparser`, :mod:`readcd`, :mod:`SV` and :mod:`sv`, :mod:`torgb`, :mod:"
"`videoreader`, and :mod:`WAIT`."
msgstr ""
"たくさんの古い IRIX 固有のモジュールが非推奨となり、Python 3.0 では削除されま"
"す: :mod:`al` と :mod:`AL`, :mod:`cd`, :mod:`cddb`, :mod:`cdplayer`, :mod:"
"`CL` と :mod:`cl`, :mod:`DEVICE`, :mod:`ERRNO`, :mod:`FILE`, :mod:`FL` と :"
"mod:`fl`, :mod:`flp`, :mod:`fm`, :mod:`GET`, :mod:`GLWS`, :mod:`GL` と :mod:"
"`gl`, :mod:`IN`, :mod:`IOCTL`, :mod:`jpeg`, :mod:`panelparser`, :mod:"
"`readcd`, :mod:`SV` と :mod:`sv`, :mod:`torgb`, :mod:`videoreader`, :mod:"
"`WAIT` 。"

#: ../../whatsnew/2.6.rst:3232
msgid "Porting to Python 2.6"
msgstr "Python 2.6 への移植"

#: ../../whatsnew/2.6.rst:3234
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr ""
"このセクションでは前述の変更とバグフィックスにより必要となるかもしれないコー"
"ドの変更を列挙します:"

#: ../../whatsnew/2.6.rst:3237
msgid ""
"Classes that aren't supposed to be hashable should set ``__hash__ = None`` "
"in their definitions to indicate the fact."
msgstr ""
"ハッシュ化をサポートしないクラスはその定義内でその事実を示すために、  "
"``__hash__ = None`` をセットすべきです。"

#: ../../whatsnew/2.6.rst:3244
msgid ""
"The :meth:`__init__` method of :class:`collections.deque` now clears any "
"existing contents of the deque before adding elements from the iterable.  "
"This change makes the behavior match ``list.__init__()``."
msgstr ""
":class:`collections.deque` の :meth:`__init__` メソッドが、イテラブルから要素"
"を追加する前に全ての deque の既存の内容をクリアするようになっています。この変"
"更は ``list.__init__()`` の振る舞いと一致します(---訳注: 当たり前のことにしか"
"思えないのですが詳細がわかりません。これ以前のバージョンでは deque はシングル"
"トンのように振舞っていたのでしょうか。---)。"

#: ../../whatsnew/2.6.rst:3249
msgid ""
":meth:`object.__init__` previously accepted arbitrary arguments and keyword "
"arguments, ignoring them.  In Python 2.6, this is no longer allowed and will "
"result in a :exc:`TypeError`.  This will affect :meth:`__init__` methods "
"that end up calling the corresponding method on :class:`object` (perhaps "
"through using :func:`super`). See :issue:`1683368` for discussion."
msgstr ""
":meth:`object.__init__` は以前は任意の引数とキーワード引数を受け取り、そして"
"無視していました。Python 2.6 ではもうこれは許されません。 :exc:`TypeError` を"
"起こします。これは結果的に :class:`object` の対応するメソッドを呼ぶ(おそら"
"く :func:`super` を介して) :meth:`__init__` メソッドに影響します。 :issue:"
"`1683368` の議論を参照して下さい。"

#: ../../whatsnew/2.6.rst:3256
msgid ""
"The :class:`Decimal` constructor now accepts leading and trailing whitespace "
"when passed a string.  Previously it would raise an :exc:`InvalidOperation` "
"exception.  On the other hand, the :meth:`create_decimal` method of :class:"
"`Context` objects now explicitly disallows extra whitespace, raising a :exc:"
"`ConversionSyntax` exception."
msgstr ""
":class:`Decimal` のコンストラクタは今では先頭と末尾の空白が含まれる文字列を許"
"容します。以前は :exc:`InvalidOperation` となっていました。他方で、 :class:"
"`Context` オブジェクトの :meth:`create_decimal` メソッドは余分な空白を明示的"
"に拒絶するようになり、 :exc:`ConversionSyntax` を投げます。"

#: ../../whatsnew/2.6.rst:3263
msgid ""
"Due to an implementation accident, if you passed a file path to the built-"
"in  :func:`__import__` function, it would actually import the specified "
"file.  This was never intended to work, however, and the implementation now "
"explicitly checks for this case and raises an :exc:`ImportError`."
msgstr ""
"実装上の誤り(事故)で、ビルトインの :func:`__import__` 関数にファイルパスを渡"
"すと指定したファイルをインポート出来ていました。しかしながらこれは決して意図"
"した振る舞いではありませんでした。実装は今ではこのケースを明示的にチェック"
"し、 :exc:`ImportError` を起こします。"

#: ../../whatsnew/2.6.rst:3269
msgid ""
"C API: the :c:func:`PyImport_Import` and :c:func:`PyImport_ImportModule` "
"functions now default to absolute imports, not relative imports. This will "
"affect C extensions that import other modules."
msgstr ""
"C API: :c:func:`PyImport_Import` と :c:func:`PyImport_ImportModule` 関数がデ"
"フォルトで、相対インポートではなく絶対インポートをするようになっています。こ"
"れはほかのモジュールをインポートする C 拡張に影響します。"

#: ../../whatsnew/2.6.rst:3273
msgid ""
"C API: extension data types that shouldn't be hashable should define their "
"``tp_hash`` slot to :c:func:`PyObject_HashNotImplemented`."
msgstr ""
"C API: ハッシュされるべきではない拡張データ型は、 ``tp_hash`` スロットを :c:"
"func:`PyObject_HashNotImplemented` と定義すべきです。"

#: ../../whatsnew/2.6.rst:3277
msgid ""
"The :mod:`socket` module exception :exc:`socket.error` now inherits from :"
"exc:`IOError`.  Previously it wasn't a subclass of :exc:`StandardError` but "
"now it is, through :exc:`IOError`. (Implemented by Gregory P. Smith; :issue:"
"`1706815`.)"
msgstr ""
":mod:`socket` モジュールの例外 :exc:`socket.error` が :exc:`IOError` 派生に"
"なっています。以前は :exc:`StandardError` のサブクラスではありませんでしたが"
"今は :exc:`IOError` を通じてそれのサブクラスです。 (Implemented by Gregory "
"P. Smith; :issue:`1706815`.)"

#: ../../whatsnew/2.6.rst:3282
msgid ""
"The :mod:`xmlrpclib` module no longer automatically converts :class:"
"`datetime.date` and :class:`datetime.time` to the :class:`xmlrpclib."
"DateTime` type; the conversion semantics were not necessarily correct for "
"all applications.  Code using :mod:`xmlrpclib` should convert :class:`date` "
"and :class:`~datetime.time` instances. (:issue:`1330538`)"
msgstr ""
":mod:`xmlrpclib` モジュールが自動的に :class:`datetime.date` と :class:"
"`datetime.time` を :class:`xmlrpclib.DateTime` 型に変換することは、もう二度と"
"しません; 変換のセマンティクスは必ずしも全てのアプリケーションで正しいわけで"
"はなかったのです。 :mod:`xmlrpclib` を使うコードは自分で :class:`date` と :"
"class:`~datetime.time` インスタンスを変換すべきです。(:issue:`1330538`)"

#: ../../whatsnew/2.6.rst:3289
msgid ""
"(3.0-warning mode) The :class:`Exception` class now warns when accessed "
"using slicing or index access; having :class:`Exception` behave like a tuple "
"is being phased out."
msgstr ""
"(3.0 警告モード) :class:`Exception` クラスはスライスやインデクスアクセスで警"
"告を出します; :class:`Exception` のタプルのような振る舞いはのちに取り除かれま"
"す。"

#: ../../whatsnew/2.6.rst:3293
msgid ""
"(3.0-warning mode) inequality comparisons between two dictionaries or two "
"objects that don't implement comparison methods are reported as warnings.  "
"``dict1 == dict2`` still works, but ``dict1 < dict2`` is being phased out."
msgstr ""
"(3.0 警告モード) 2 つの辞書や 2 つの比較メソッドを実装しないオブジェクトの不"
"等号比較は警告されます。 ``dict1 == dict2`` はまだ動作しますが、 ``dict1 < "
"dict2`` はのちに取り除かれます。"

#: ../../whatsnew/2.6.rst:3298
msgid ""
"Comparisons between cells, which are an implementation detail of Python's "
"scoping rules, also cause warnings because such comparisons are forbidden "
"entirely in 3.0."
msgstr ""
"Python のスコープルールの実装の詳細であるセル間の比較も、警告を引き起こしま"
"す。なぜならこれは、3.0 ではそのような比較は完全に禁止されているからです。"

#: ../../whatsnew/2.6.rst:3308
msgid "Acknowledgements"
msgstr "謝辞"

#: ../../whatsnew/2.6.rst:3310
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Georg Brandl, Steve Brown, Nick Coghlan, Ralph Corderoy, Jim Jewett, Kent "
"Johnson, Chris Lambacher,  Martin Michlmayr, Antoine Pitrou, Brian Warner."
msgstr ""
"著者は提案の申し出や修正、様々なこの記事の草稿の助けをしてくれた以下の人々に"
"感謝します:  Georg Brandl, Steve Brown, Nick Coghlan, Ralph Corderoy, Jim "
"Jewett, Kent Johnson, Chris Lambacher, Martin Michlmayr, Antoine Pitrou, "
"Brian Warner."
