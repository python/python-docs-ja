# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Osamu NAKAMURA, 2021
# Taichi Haradaguchi, 2024
# tomo, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-04 14:17+0000\n"
"PO-Revision-Date: 2021-06-29 13:04+0000\n"
"Last-Translator: tomo, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.1.rst:3
msgid "What's New In Python 3.1"
msgstr "What's New In Python 3.1"

#: ../../whatsnew/3.1.rst:0
msgid "Author"
msgstr "著者"

#: ../../whatsnew/3.1.rst:5
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

#: ../../whatsnew/3.1.rst:49
msgid ""
"This article explains the new features in Python 3.1, compared to 3.0. "
"Python 3.1 was released on June 27, 2009."
msgstr ""
"この記事では 3.0 と比較した Python 3.1 の新機能を解説します。Python 3.1 は"
"2009年6月27日にリリースされました。"

#: ../../whatsnew/3.1.rst:54
msgid "PEP 372: Ordered Dictionaries"
msgstr "PEP 372: 順序付き辞書"

#: ../../whatsnew/3.1.rst:56
msgid ""
"Regular Python dictionaries iterate over key/value pairs in arbitrary order. "
"Over the years, a number of authors have written alternative implementations "
"that remember the order that the keys were originally inserted.  Based on "
"the experiences from those implementations, a new :class:`collections."
"OrderedDict` class has been introduced."
msgstr ""
"通常の Python 辞書は、 key/value ペアを不定の順序でイテレートします。何年にも"
"わたり、いろいろな人が key の挿入順を保存する辞書の別実装を書いてきました。そ"
"の経験に基づき、新しい :class:`~collections.OrderedDict` クラスが導入されまし"
"た。"

#: ../../whatsnew/3.1.rst:62
msgid ""
"The OrderedDict API is substantially the same as regular dictionaries but "
"will iterate over keys and values in a guaranteed order depending on when a "
"key was first inserted.  If a new entry overwrites an existing entry, the "
"original insertion position is left unchanged.  Deleting an entry and "
"reinserting it will move it to the end."
msgstr ""
"OrderedDict API は通常の辞書と同じインターフェースを提供していますが、 key/"
"value をイテレートするときに key が最初に挿入された順番になることが保証されて"
"います。新しいエントリが既存のエントリを上書きした場合は、元の挿入順序が保持"
"されます。エントリを削除して再挿入すると、順序は一番最後に移動します。"

#: ../../whatsnew/3.1.rst:68
msgid ""
"The standard library now supports use of ordered dictionaries in several "
"modules.  The :mod:`configparser` module uses them by default.  This lets "
"configuration files be read, modified, and then written back in their "
"original order.  The *_asdict()* method for :func:`collections.namedtuple` "
"now returns an ordered dictionary with the values appearing in the same "
"order as the underlying tuple indices.  The :mod:`json` module is being "
"built-out with an *object_pairs_hook* to allow OrderedDicts to be built by "
"the decoder. Support was also added for third-party tools like `PyYAML "
"<https://pyyaml.org/>`_."
msgstr ""
"標準ライブラリのいくつかのモジュールで、順序付き辞書の利用がサポートされてい"
"ます。:mod:`configparser` モジュールはデフォルトで順序付き辞書を使います。設"
"定ファイルを読み込み、編集した後、元の順序で書きなおすことができます。:func:"
"`collections.namedtuple` の *_asdict()* メソッドは、タプルの順序と同じ順序の"
"順序付き辞書を返すようになりました。:mod:`json` モジュールのデコーダーが "
"OrderedDict をビルドするのをサポートするために、 :class:`~json.JSONDecoder` "
"クラスのコンストラクタに *object_pairs_hook* 引数が追加されました。 `PyYAML "
"<https://pyyaml.org/>`_ などの外部のライブラリでもサポートされています。"

#: ../../whatsnew/3.1.rst:79
msgid ":pep:`372` - Ordered Dictionaries"
msgstr ":pep:`372` - 順序付き辞書"

#: ../../whatsnew/3.1.rst:80
msgid ""
"PEP written by Armin Ronacher and Raymond Hettinger.  Implementation written "
"by Raymond Hettinger."
msgstr ""
"PEP written by Armin Ronacher and Raymond Hettinger.  Implementation written "
"by Raymond Hettinger."

#: ../../whatsnew/3.1.rst:83
msgid ""
"Since an ordered dictionary remembers its insertion order, it can be used in "
"conjunction with sorting to make a sorted dictionary::"
msgstr ""
"順序付き辞書は挿入順序を記憶するので、ソートと組み合わせて使うことで、ソート"
"された辞書を作れます::"

#: ../../whatsnew/3.1.rst:86
msgid ""
">>> # regular unsorted dictionary\n"
">>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}\n"
"\n"
">>> # dictionary sorted by key\n"
">>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))\n"
"OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])\n"
"\n"
">>> # dictionary sorted by value\n"
">>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))\n"
"OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])\n"
"\n"
">>> # dictionary sorted by length of the key string\n"
">>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))\n"
"OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])"
msgstr ""

#: ../../whatsnew/3.1.rst:101
msgid ""
"The new sorted dictionaries maintain their sort order when entries are "
"deleted.  But when new keys are added, the keys are appended to the end and "
"the sort is not maintained."
msgstr ""
"この新しい順序付き辞書は、項目が削除されてもソートされた順序を保持します。し"
"かし、キーが追加されるとき、そのキーは最後に追加され、ソートは保持されませ"
"ん。"

#: ../../whatsnew/3.1.rst:107
msgid "PEP 378: Format Specifier for Thousands Separator"
msgstr "PEP 378: 1000区切りのための書式指定子"

#: ../../whatsnew/3.1.rst:109
msgid ""
"The built-in :func:`format` function and the :meth:`str.format` method use a "
"mini-language that now includes a simple, non-locale aware way to format a "
"number with a thousands separator.  That provides a way to humanize a "
"program's output, improving its professional appearance and readability::"
msgstr ""
"組み込みの :func:`format` 関数と :meth:`str.format` メソッドが使うミニ言語"
"に、単純でロケールに依存しない 1000 区切りカンマの書式化が追加されました。こ"
"れによって簡単にプログラムの出力を、その玄人ちっくな見た目を改善してひとさま"
"にとって読みやすいものに出来ます::"

#: ../../whatsnew/3.1.rst:114
msgid ""
">>> format(1234567, ',d')\n"
"'1,234,567'\n"
">>> format(1234567.89, ',.2f')\n"
"'1,234,567.89'\n"
">>> format(12345.6 + 8901234.12j, ',f')\n"
"'12,345.600000+8,901,234.120000j'\n"
">>> format(Decimal('1234567.89'), ',f')\n"
"'1,234,567.89'"
msgstr ""

#: ../../whatsnew/3.1.rst:123
msgid ""
"The supported types are :class:`int`, :class:`float`, :class:`complex` and :"
"class:`decimal.Decimal`."
msgstr ""
"これをサポートする型は :class:`int`, :class:`float`, :class:`complex` , :"
"class:`decimal.Decimal` です。"

#: ../../whatsnew/3.1.rst:126
msgid ""
"Discussions are underway about how to specify alternative separators like "
"dots, spaces, apostrophes, or underscores.  Locale-aware applications should "
"use the existing *n* format specifier which already has some support for "
"thousands separators."
msgstr ""
"ドットやら空白やらアポストロフィやらあるいはアンダースコアなどの他のセパレー"
"タをどうやって指定するかの議論は水面下にありますが、ロケールに従う必要がある"
"アプリケーションは、1000区切りセパレータについていくつかのサポートを既に持っ"
"ている既存の *n* 指定子を使うべきです。"

#: ../../whatsnew/3.1.rst:133
msgid ":pep:`378` - Format Specifier for Thousands Separator"
msgstr ":pep:`378` - 1000区切りのための書式指定子"

#: ../../whatsnew/3.1.rst:134
msgid ""
"PEP written by Raymond Hettinger and implemented by Eric Smith and Mark "
"Dickinson."
msgstr ""
"PEP written by Raymond Hettinger and implemented by Eric Smith and Mark "
"Dickinson."

#: ../../whatsnew/3.1.rst:139
msgid "Other Language Changes"
msgstr "その他の言語変更"

#: ../../whatsnew/3.1.rst:141
msgid "Some smaller changes made to the core Python language are:"
msgstr "Python 言語コアに小さな変更がいくつか行われました:"

#: ../../whatsnew/3.1.rst:143
msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can now "
"be executed directly by passing their name to the interpreter. The directory/"
"zipfile is automatically inserted as the first entry in sys.path.  "
"(Suggestion and initial patch by Andy Chu; revised patch by Phillip J. Eby "
"and Nick Coghlan; :issue:`1739468`.)"
msgstr ""
":file:`__main__.py` を含むディレクトと zip アーカイブを、その名前をインタプリ"
"タに渡すことで直接実行出来るようになりました。そのディレクトリと zip ファイル"
"は自動的に sys.path エントリの先頭に挿入されます。(Suggestion and initial "
"patch by Andy Chu; revised patch by Phillip J. Eby and Nick Coghlan; :issue:"
"`1739468`.)"

#: ../../whatsnew/3.1.rst:149
msgid ""
"The :func:`int` type gained a ``bit_length`` method that returns the number "
"of bits necessary to represent its argument in binary::"
msgstr ""
":func:`int` 型に ``bit_length`` メソッドが追加されました。\n"
"このメソッドはその値を二進数で表現するのに必要なビット数を返します::"

#: ../../whatsnew/3.1.rst:152
msgid ""
">>> n = 37\n"
">>> bin(37)\n"
"'0b100101'\n"
">>> n.bit_length()\n"
"6\n"
">>> n = 2**123-1\n"
">>> n.bit_length()\n"
"123\n"
">>> (n+1).bit_length()\n"
"124"
msgstr ""

#: ../../whatsnew/3.1.rst:163
msgid ""
"(Contributed by Fredrik Johansson, Victor Stinner, Raymond Hettinger, and "
"Mark Dickinson; :issue:`3439`.)"
msgstr ""
"(Contributed by Fredrik Johansson, Victor Stinner, Raymond Hettinger, and "
"Mark Dickinson; :issue:`3439`.)"

#: ../../whatsnew/3.1.rst:166
msgid ""
"The fields in :func:`format` strings can now be automatically numbered::"
msgstr ""
":func:`format` 文字列のフィールドに自動的に番号が振られるようになりました::"

#: ../../whatsnew/3.1.rst:169
msgid ""
">>> 'Sir {} of {}'.format('Gallahad', 'Camelot')\n"
"'Sir Gallahad of Camelot'"
msgstr ""

#: ../../whatsnew/3.1.rst:172
msgid ""
"Formerly, the string would have required numbered fields such as: ``'Sir {0} "
"of {1}'``."
msgstr ""
"以前は、文字列は ``'Sir {0} of {1}'`` のようにフィールドに番号を振らなければ"
"なりませんでした。"

#: ../../whatsnew/3.1.rst:175
msgid "(Contributed by Eric Smith; :issue:`5237`.)"
msgstr "(Contributed by Eric Smith; :issue:`5237`.)"

#: ../../whatsnew/3.1.rst:177
msgid ""
"The :func:`!string.maketrans` function is deprecated and is replaced by new "
"static methods, :meth:`bytes.maketrans` and :meth:`bytearray.maketrans`. "
"This change solves the confusion around which types were supported by the :"
"mod:`string` module. Now, :class:`str`, :class:`bytes`, and :class:"
"`bytearray` each have their own **maketrans** and **translate** methods with "
"intermediate translation tables of the appropriate type."
msgstr ""

#: ../../whatsnew/3.1.rst:184
msgid "(Contributed by Georg Brandl; :issue:`5675`.)"
msgstr "(Contributed by Georg Brandl; :issue:`5675`.)"

#: ../../whatsnew/3.1.rst:186
msgid ""
"The syntax of the :keyword:`with` statement now allows multiple context "
"managers in a single statement::"
msgstr ""
":keyword:`with` 文のシンタックスは一つの文で複数のコンテキストマネージャを使"
"えるようになりました::"

#: ../../whatsnew/3.1.rst:189
msgid ""
">>> with open('mylog.txt') as infile, open('a.out', 'w') as outfile:\n"
"...     for line in infile:\n"
"...         if '<critical>' in line:\n"
"...             outfile.write(line)"
msgstr ""

#: ../../whatsnew/3.1.rst:194
msgid ""
"With the new syntax, the :func:`!contextlib.nested` function is no longer "
"needed and is now deprecated."
msgstr ""

#: ../../whatsnew/3.1.rst:197
msgid ""
"(Contributed by Georg Brandl and Mattias Brändström; `appspot issue 53094 "
"<https://codereview.appspot.com/53094>`_.)"
msgstr ""
"(Georg Brandl と Mattias Brändström の貢献; `appspot issue 53094 <https://"
"codereview.appspot.com/53094>`_.)"

#: ../../whatsnew/3.1.rst:200
msgid ""
"``round(x, n)`` now returns an integer if *x* is an integer. Previously it "
"returned a float::"
msgstr ""
"``round(x, n)`` は *x* が整数の場合、整数を返すようになりました。以前は浮動小"
"数点を返していました::"

#: ../../whatsnew/3.1.rst:203
msgid ""
">>> round(1123, -2)\n"
"1100"
msgstr ""

#: ../../whatsnew/3.1.rst:206
msgid "(Contributed by Mark Dickinson; :issue:`4707`.)"
msgstr "(Contributed by Mark Dickinson; :issue:`4707`.)"

#: ../../whatsnew/3.1.rst:208
msgid ""
"Python now uses David Gay's algorithm for finding the shortest floating-"
"point representation that doesn't change its value.  This should help "
"mitigate some of the confusion surrounding binary floating-point numbers."
msgstr ""

#: ../../whatsnew/3.1.rst:213
msgid ""
"The significance is easily seen with a number like ``1.1`` which does not "
"have an exact equivalent in binary floating point.  Since there is no exact "
"equivalent, an expression like ``float('1.1')`` evaluates to the nearest "
"representable value which is ``0x1.199999999999ap+0`` in hex or "
"``1.100000000000000088817841970012523233890533447265625`` in decimal. That "
"nearest value was and still is used in subsequent floating-point "
"calculations."
msgstr ""

#: ../../whatsnew/3.1.rst:221
msgid ""
"What is new is how the number gets displayed.  Formerly, Python used a "
"simple approach.  The value of ``repr(1.1)`` was computed as ``format(1.1, "
"'.17g')`` which evaluated to ``'1.1000000000000001'``. The advantage of "
"using 17 digits was that it relied on IEEE-754 guarantees to assure that "
"``eval(repr(1.1))`` would round-trip exactly to its original value.  The "
"disadvantage is that many people found the output to be confusing (mistaking "
"intrinsic limitations of binary floating-point representation as being a "
"problem with Python itself)."
msgstr ""

#: ../../whatsnew/3.1.rst:230
msgid ""
"The new algorithm for ``repr(1.1)`` is smarter and returns ``'1.1'``. "
"Effectively, it searches all equivalent string representations (ones that "
"get stored with the same underlying float value) and returns the shortest "
"representation."
msgstr ""
"新しいアルゴリズムでは ``repr(1.1)`` はより賢明で ``'1.1'`` を返します。実際"
"的には、これは全ての等価な文字列表現 (前提となる同じ浮動小数点数に戻るもの) "
"を探し、そして一番短い表現を返します。"

#: ../../whatsnew/3.1.rst:235
msgid ""
"The new algorithm tends to emit cleaner representations when possible, but "
"it does not change the underlying values.  So, it is still the case that "
"``1.1 + 2.2 != 3.3`` even though the representations may suggest otherwise."
msgstr ""
"新アルゴリズムは、可能な限りよりわかりやすい表現を生み出す傾向がありますが、"
"元の値を変更しません。ですから ``1.1 + 2.2 != 3.3`` は表示がどうであれ、今で"
"も問題です。"

#: ../../whatsnew/3.1.rst:239
msgid ""
"The new algorithm depends on certain features in the underlying floating-"
"point implementation.  If the required features are not found, the old "
"algorithm will continue to be used.  Also, the text pickle protocols assure "
"cross-platform portability by using the old algorithm."
msgstr ""

#: ../../whatsnew/3.1.rst:244
msgid "(Contributed by Eric Smith and Mark Dickinson; :issue:`1580`)"
msgstr "(Contributed by Eric Smith and Mark Dickinson; :issue:`1580`)"

#: ../../whatsnew/3.1.rst:247
msgid "New, Improved, and Deprecated Modules"
msgstr "新たなモジュール、改良されたモジュール、非推奨のモジュール"

#: ../../whatsnew/3.1.rst:249
msgid ""
"Added a :class:`collections.Counter` class to support convenient counting of "
"unique items in a sequence or iterable::"
msgstr ""
"シーケンスまたはイテラブル内にある一意な要素を数え上げるのに便利な :class:"
"`collections.Counter` クラスが追加されました::"

#: ../../whatsnew/3.1.rst:252
msgid ""
">>> Counter(['red', 'blue', 'red', 'green', 'blue', 'blue'])\n"
"Counter({'blue': 3, 'red': 2, 'green': 1})"
msgstr ""

#: ../../whatsnew/3.1.rst:255
msgid "(Contributed by Raymond Hettinger; :issue:`1696199`.)"
msgstr "(Contributed by Raymond Hettinger; :issue:`1696199`.)"

#: ../../whatsnew/3.1.rst:257
msgid ""
"Added a new module, :mod:`tkinter.ttk` for access to the Tk themed widget "
"set. The basic idea of ttk is to separate, to the extent possible, the code "
"implementing a widget's behavior from the code implementing its appearance."
msgstr ""
"Tk のテーマ付きウィジェットへのアクセスを提供する、新しい :mod:`tkinter.ttk` "
"モジュールが追加されました。 :mod:`tkinter.ttk` の基本的なアイディアは、拡張"
"可能性のためにウィジェットの動作を実装するコードと見た目を記述するコードを分"
"離することです。"

#: ../../whatsnew/3.1.rst:261
msgid "(Contributed by Guilherme Polo; :issue:`2983`.)"
msgstr "(Contributed by Guilherme Polo; :issue:`2983`.)"

#: ../../whatsnew/3.1.rst:263
msgid ""
"The :class:`gzip.GzipFile` and :class:`bz2.BZ2File` classes now support the "
"context management protocol::"
msgstr ""
":class:`gzip.GzipFile` と :class:`bz2.BZ2File` クラスはコンテキストマネジメン"
"トプロトコルをサポートするようになりました::"

#: ../../whatsnew/3.1.rst:266
msgid ""
">>> # Automatically close file after writing\n"
">>> with gzip.GzipFile(filename, \"wb\") as f:\n"
"...     f.write(b\"xxx\")"
msgstr ""

#: ../../whatsnew/3.1.rst:270
msgid "(Contributed by Antoine Pitrou.)"
msgstr "(Contributed by Antoine Pitrou.)"

#: ../../whatsnew/3.1.rst:272
msgid ""
"The :mod:`decimal` module now supports methods for creating a decimal object "
"from a binary :class:`float`.  The conversion is exact but can sometimes be "
"surprising::"
msgstr ""
":mod:`decimal` モジュールが二進 :class:`float` から decimal オブジェクトを生"
"成するメソッドをサポートしました。\n"
"変換は正確ですが時に意外なことがあります::"

#: ../../whatsnew/3.1.rst:276
msgid ""
">>> Decimal.from_float(1.1)\n"
"Decimal('1.100000000000000088817841970012523233890533447265625')"
msgstr ""

#: ../../whatsnew/3.1.rst:279
msgid ""
"The long decimal result shows the actual binary fraction being stored for "
"*1.1*.  The fraction has many digits because *1.1* cannot be exactly "
"represented in binary."
msgstr ""
"長い十進の結果が、 *1.1* を記憶するための現実の二進での端数を表しています。 "
"*1.1* は二進数で正確に表現出来ないので、端数は十進表現でとても多くの桁数に"
"なっています。"

#: ../../whatsnew/3.1.rst:283
msgid "(Contributed by Raymond Hettinger and Mark Dickinson.)"
msgstr "(Contributed by Raymond Hettinger and Mark Dickinson.)"

#: ../../whatsnew/3.1.rst:285
msgid ""
"The :mod:`itertools` module grew two new functions.  The :func:`itertools."
"combinations_with_replacement` function is one of four for generating "
"combinatorics including permutations and Cartesian products.  The :func:"
"`itertools.compress` function mimics its namesake from APL.  Also, the "
"existing :func:`itertools.count` function now has an optional *step* "
"argument and can accept any type of counting sequence including :class:"
"`fractions.Fraction` and :class:`decimal.Decimal`::"
msgstr ""
":mod:`itertools` に 2 つの関数が追加されました。 :func:`itertools."
"combinations_with_replacement` 関数は、置換 (順列, permutation) や直積 "
"(Cartesian product) を含む組合せ論の 4 つの生成関数のうちの 1 つです。 :func:"
"`itertools.compress` 関数は `APL <https://ja.wikipedia.org/wiki/APL>`_ の同名"
"機能の模倣品です。また、既存の :func:`itertools.count` 関数は新たにオプショナ"
"ルな *step* 引数を取るようになり、そして数え方に :class:`fractions.Fraction` "
"や :class:`decimal.Decimal` を含む任意の数値型を使えるようになりました。 ::"

#: ../../whatsnew/3.1.rst:294
msgid ""
">>> [p+q for p,q in combinations_with_replacement('LOVE', 2)]\n"
"['LL', 'LO', 'LV', 'LE', 'OO', 'OV', 'OE', 'VV', 'VE', 'EE']\n"
"\n"
">>> list(compress(data=range(10), selectors=[0,0,1,1,0,1,0,1,0,0]))\n"
"[2, 3, 5, 7]\n"
"\n"
">>> c = count(start=Fraction(1,2), step=Fraction(1,6))\n"
">>> [next(c), next(c), next(c), next(c)]\n"
"[Fraction(1, 2), Fraction(2, 3), Fraction(5, 6), Fraction(1, 1)]"
msgstr ""

#: ../../whatsnew/3.1.rst:304
msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Contributed by Raymond Hettinger.)"

#: ../../whatsnew/3.1.rst:306
msgid ""
":func:`collections.namedtuple` now supports a keyword argument *rename* "
"which lets invalid fieldnames be automatically converted to positional names "
"in the form _0, _1, etc.  This is useful when the field names are being "
"created by an external source such as a CSV header, SQL field list, or user "
"input::"
msgstr ""
":func:`collections.namedtuple` が新たにキーワード引数 *rename* をサポートし、"
"これにより不正なフィールド名を自動で _0, _1, ... といった位置による名前に変換"
"することが出来ます。これはフィールド名が何か外部ソースに基いて作られる場合に"
"有用です。例えば CSV のヘッダ、SQL のフィールドリスト、あるいはユーザ入力など"
"です::"

#: ../../whatsnew/3.1.rst:312
msgid ""
">>> query = input()\n"
"SELECT region, dept, count(*) FROM main GROUPBY region, dept\n"
"\n"
">>> cursor.execute(query)\n"
">>> query_fields = [desc[0] for desc in cursor.description]\n"
">>> UserQuery = namedtuple('UserQuery', query_fields, rename=True)\n"
">>> pprint.pprint([UserQuery(*row) for row in cursor])\n"
"[UserQuery(region='South', dept='Shipping', _2=185),\n"
" UserQuery(region='North', dept='Accounting', _2=37),\n"
" UserQuery(region='West', dept='Sales', _2=419)]"
msgstr ""

#: ../../whatsnew/3.1.rst:323
msgid "(Contributed by Raymond Hettinger; :issue:`1818`.)"
msgstr "(Contributed by Raymond Hettinger; :issue:`1818`.)"

#: ../../whatsnew/3.1.rst:325
msgid ""
"The :func:`re.sub`, :func:`re.subn` and :func:`re.split` functions now "
"accept a flags parameter."
msgstr ""
":func:`re.sub`、:func:`re.subn` および :func:`re.split` 関数は flags 引数を受"
"け取るようになりました。"

#: ../../whatsnew/3.1.rst:328
msgid "(Contributed by Gregory Smith.)"
msgstr "(Contributed by Gregory Smith.)"

#: ../../whatsnew/3.1.rst:330
msgid ""
"The :mod:`logging` module now implements a simple :class:`logging."
"NullHandler` class for applications that are not using logging but are "
"calling library code that does.  Setting-up a null handler will suppress "
"spurious warnings such as \"No handlers could be found for logger foo\"::"
msgstr ""
"logging を自身では使わずとも使用ライブラリがそうしているようなアプリケーショ"
"ンのために、 :mod:`logging` モジュールが単純な :class:`logging.NullHandler` "
"を実装しました。null ハンドラをセットアップすることは、 \"No handlers could "
"be found for logger foo\" のような警告を抑制します。"

#: ../../whatsnew/3.1.rst:335
msgid ""
">>> h = logging.NullHandler()\n"
">>> logging.getLogger(\"foo\").addHandler(h)"
msgstr ""

#: ../../whatsnew/3.1.rst:338
msgid "(Contributed by Vinay Sajip; :issue:`4384`)."
msgstr "(Contributed by Vinay Sajip; :issue:`4384`)."

#: ../../whatsnew/3.1.rst:340
msgid ""
"The :mod:`runpy` module which supports the ``-m`` command line switch now "
"supports the execution of packages by looking for and executing a "
"``__main__`` submodule when a package name is supplied."
msgstr ""
"コマンドラインスイッチ ``-m`` をサポートしている :mod:`runpy` がパッケージの"
"実行をサポートするようになりました。パッケージ名が与えられると ``__main__`` "
"サブモジュールを探し出して実行します。"

#: ../../whatsnew/3.1.rst:344
msgid "(Contributed by Andi Vajda; :issue:`4195`.)"
msgstr "(Contributed by Andi Vajda; :issue:`4195`.)"

#: ../../whatsnew/3.1.rst:346
msgid ""
"The :mod:`pdb` module can now access and display source code loaded via :mod:"
"`zipimport` (or any other conformant :pep:`302` loader)."
msgstr ""
":mod:`pdb` モジュールが :mod:`zipimport` (あるいはなにかほかの :pep:`302` 準"
"拠ローダ) でロードされたモジュールのソースコードにアクセスでき、表示できるよ"
"うになりました。"

#: ../../whatsnew/3.1.rst:349
msgid "(Contributed by Alexander Belopolsky; :issue:`4201`.)"
msgstr "(Contributed by Alexander Belopolsky; :issue:`4201`.)"

#: ../../whatsnew/3.1.rst:351
msgid ":class:`functools.partial` objects can now be pickled."
msgstr ""
":class:`functools.partial` オブジェクトが pickle 化出来るようになりました。"

#: ../../whatsnew/3.1.rst:353
msgid ""
"(Suggested by Antoine Pitrou and Jesse Noller.  Implemented by Jack "
"Diederich; :issue:`5228`.)"
msgstr ""
"(Suggested by Antoine Pitrou and Jesse Noller.  Implemented by Jack "
"Diederich; :issue:`5228`.)"

#: ../../whatsnew/3.1.rst:356
msgid ""
"Add :mod:`pydoc` help topics for symbols so that ``help('@')`` works as "
"expected in the interactive environment."
msgstr ""
"シンボルのための :mod:`pydoc` ヘルプトピックが追加されました。これで対話環境"
"で ``help('@')`` などが期待通りの働きをします (---訳注: 実装としては "
"pydoc_data パッケージのこと。 :file:`pydoc_data/topics.py` に docstring から"
"は生成出来ない、シンボルについてのドキュメントが収められています  ---)。"

#: ../../whatsnew/3.1.rst:359
msgid "(Contributed by David Laban; :issue:`4739`.)"
msgstr "(Contributed by David Laban; :issue:`4739`.)"

#: ../../whatsnew/3.1.rst:361
msgid ""
"The :mod:`unittest` module now supports skipping individual tests or classes "
"of tests. And it supports marking a test as an expected failure, a test that "
"is known to be broken, but shouldn't be counted as a failure on a "
"TestResult::"
msgstr ""
":mod:`unittest` に特定のテストメソッドやテストクラス全体をスキップする仕組み"
"のサポートが追加されました。さらに、この機能はテスト結果を「意図的な失敗」と"
"することができ、テストが失敗しても :class:`TestResult` の失敗数にはカウントさ"
"れなくなります::"

#: ../../whatsnew/3.1.rst:366
msgid ""
"class TestGizmo(unittest.TestCase):\n"
"\n"
"    @unittest.skipUnless(sys.platform.startswith(\"win\"), \"requires "
"Windows\")\n"
"    def test_gizmo_on_windows(self):\n"
"        ...\n"
"\n"
"    @unittest.expectedFailure\n"
"    def test_gimzo_without_required_library(self):\n"
"        ..."
msgstr ""

#: ../../whatsnew/3.1.rst:376
msgid ""
"Also, tests for exceptions have been builtout to work with context managers "
"using the :keyword:`with` statement::"
msgstr ""
"また例外についてのテストが、 :keyword:`with` 文で使えるコンテキストマネージャ"
"として増強されました::"

#: ../../whatsnew/3.1.rst:379
msgid ""
"def test_division_by_zero(self):\n"
"    with self.assertRaises(ZeroDivisionError):\n"
"        x / 0"
msgstr ""

#: ../../whatsnew/3.1.rst:383
msgid ""
"In addition, several new assertion methods were added including :meth:"
"`~unittest.TestCase.assertSetEqual`, :meth:`~unittest.TestCase."
"assertDictEqual`, :meth:`!assertDictContainsSubset`, :meth:`~unittest."
"TestCase.assertListEqual`, :meth:`~unittest.TestCase.assertTupleEqual`, :"
"meth:`~unittest.TestCase.assertSequenceEqual`, :meth:`assertRaisesRegexp() "
"<unittest.TestCase.assertRaisesRegex>`, :meth:`~unittest.TestCase."
"assertIsNone`, and :meth:`~unittest.TestCase.assertIsNotNone`."
msgstr ""

#: ../../whatsnew/3.1.rst:394
msgid "(Contributed by Benjamin Peterson and Antoine Pitrou.)"
msgstr "(Contributed by Benjamin Peterson and Antoine Pitrou.)"

#: ../../whatsnew/3.1.rst:396
msgid ""
"The :mod:`io` module has three new constants for the :meth:`~io.IOBase.seek` "
"method: :data:`~os.SEEK_SET`, :data:`~os.SEEK_CUR`, and :data:`~os.SEEK_END`."
msgstr ""

#: ../../whatsnew/3.1.rst:399
msgid "The :data:`sys.version_info` tuple is now a named tuple::"
msgstr ":data:`sys.version_info` タプルが名前付きタプルになりました。"

#: ../../whatsnew/3.1.rst:401
msgid ""
">>> sys.version_info\n"
"sys.version_info(major=3, minor=1, micro=0, releaselevel='alpha', serial=2)"
msgstr ""

#: ../../whatsnew/3.1.rst:404
msgid "(Contributed by Ross Light; :issue:`4285`.)"
msgstr "(Contributed by Ross Light; :issue:`4285`.)"

#: ../../whatsnew/3.1.rst:406
msgid "The :mod:`!nntplib` and :mod:`imaplib` modules now support IPv6."
msgstr ""

#: ../../whatsnew/3.1.rst:408
msgid "(Contributed by Derek Morr; :issue:`1655` and :issue:`1664`.)"
msgstr "(Contributed by Derek Morr; :issue:`1655` and :issue:`1664`.)"

#: ../../whatsnew/3.1.rst:410
msgid ""
"The :mod:`pickle` module has been adapted for better interoperability with "
"Python 2.x when used with protocol 2 or lower.  The reorganization of the "
"standard library changed the formal reference for many objects.  For "
"example, ``__builtin__.set`` in Python 2 is called ``builtins.set`` in "
"Python 3. This change confounded efforts to share data between different "
"versions of Python.  But now when protocol 2 or lower is selected, the "
"pickler will automatically use the old Python 2 names for both loading and "
"dumping. This remapping is turned-on by default but can be disabled with the "
"*fix_imports* option::"
msgstr ""
":mod:`pickle` を、プロトコル 2 以下を使う際に Python 2.x との相互運用に順応す"
"るようにしました。標準ライブラリの再編成はたくさんのオブジェクトへの公式な参"
"照を変えました。例えば Python 2 の ``__builtin__.set`` は Python 3 では "
"``builtins.set`` です。この変化は異なる Python バージョン間でのデータ共有の取"
"り組みを複雑にしました。ですが今回のこの修正により、プロトコル 2 以下を選んだ"
"場合は pickler は自動的にロード時もダンプ時も古い Python 2 命名を使うようにな"
"ります。この再マッピングはデフォルトで有効になりますが、 *fix_imports* オプ"
"ションで無効に出来ます::"

#: ../../whatsnew/3.1.rst:420
msgid ""
">>> s = {1, 2, 3}\n"
">>> pickle.dumps(s, protocol=0)\n"
"b'c__builtin__\\nset\\np0\\n((lp1\\nL1L\\naL2L\\naL3L\\natp2\\nRp3\\n.'\n"
">>> pickle.dumps(s, protocol=0, fix_imports=False)\n"
"b'cbuiltins\\nset\\np0\\n((lp1\\nL1L\\naL2L\\naL3L\\natp2\\nRp3\\n.'"
msgstr ""

#: ../../whatsnew/3.1.rst:426
msgid ""
"An unfortunate but unavoidable side-effect of this change is that protocol 2 "
"pickles produced by Python 3.1 won't be readable with Python 3.0. The latest "
"pickle protocol, protocol 3, should be used when migrating data between "
"Python 3.x implementations, as it doesn't attempt to remain compatible with "
"Python 2.x."
msgstr ""
"不幸にも、そして避けられないこの変更による副作用は、Python 3.1 によって生成さ"
"れたプロトコル 2 pickle が Python 3.0 で読めなくなるであろうことです。Python "
"2.x との互換性を維持するつもりがないのであれば、Python 3.x 実装間でのデータ移"
"行では最新 pickle プロトコルバージョン 3 を使うべきです。"

#: ../../whatsnew/3.1.rst:432
msgid ""
"(Contributed by Alexandre Vassalotti and Antoine Pitrou, :issue:`6137`.)"
msgstr ""
"(Contributed by Alexandre Vassalotti and Antoine Pitrou, :issue:`6137`.)"

#: ../../whatsnew/3.1.rst:434
msgid ""
"A new module, :mod:`importlib` was added.  It provides a complete, portable, "
"pure Python reference implementation of the :keyword:`import` statement and "
"its counterpart, the :func:`__import__` function.  It represents a "
"substantial step forward in documenting and defining the actions that take "
"place during imports."
msgstr ""
"新規モジュール :mod:`importlib` が追加されました。 :keyword:`import` 文とその"
"相棒の :func:`__import__` 関数の、完全で移植性が高いピュア Python 参照実装を"
"提供しています。これはインポートで行う動作の文書化と定義における、確かな前進"
"です。"

#: ../../whatsnew/3.1.rst:440
msgid "(Contributed by Brett Cannon.)"
msgstr "(Contributed by Brett Cannon.)"

#: ../../whatsnew/3.1.rst:443
msgid "Optimizations"
msgstr "最適化"

#: ../../whatsnew/3.1.rst:445
msgid "Major performance enhancements have been added:"
msgstr "大きな性能向上がありました:"

#: ../../whatsnew/3.1.rst:447
msgid ""
"The new I/O library (as defined in :pep:`3116`) was mostly written in Python "
"and quickly proved to be a problematic bottleneck in Python 3.0. In Python "
"3.1, the I/O library has been entirely rewritten in C and is 2 to 20 times "
"faster depending on the task at hand. The pure Python version is still "
"available for experimentation purposes through the ``_pyio`` module."
msgstr ""

#: ../../whatsnew/3.1.rst:454
msgid "(Contributed by Amaury Forgeot d'Arc and Antoine Pitrou.)"
msgstr "(Contributed by Amaury Forgeot d'Arc and Antoine Pitrou.)"

#: ../../whatsnew/3.1.rst:456
msgid ""
"Added a heuristic so that tuples and dicts containing only untrackable "
"objects are not tracked by the garbage collector. This can reduce the size "
"of collections and therefore the garbage collection overhead on long-running "
"programs, depending on their particular use of datatypes."
msgstr ""

#: ../../whatsnew/3.1.rst:461
msgid "(Contributed by Antoine Pitrou, :issue:`4688`.)"
msgstr "(Contributed by Antoine Pitrou, :issue:`4688`.)"

#: ../../whatsnew/3.1.rst:463
msgid ""
"Enabling a configure option named ``--with-computed-gotos`` on compilers "
"that support it (notably: gcc, SunPro, icc), the bytecode evaluation loop is "
"compiled with a new dispatch mechanism which gives speedups of up to 20%, "
"depending on the system, the compiler, and the benchmark."
msgstr ""

#: ../../whatsnew/3.1.rst:469
msgid ""
"(Contributed by Antoine Pitrou along with a number of other participants, :"
"issue:`4753`)."
msgstr ""
"(Contributed by Antoine Pitrou along with a number of other participants, :"
"issue:`4753`)."

#: ../../whatsnew/3.1.rst:472
msgid ""
"The decoding of UTF-8, UTF-16 and LATIN-1 is now two to four times faster."
msgstr ""
"UTF-8, UTF-16 ならびに LATIN-1 のデコーディングが2から4倍速くなりました。"

#: ../../whatsnew/3.1.rst:475
msgid ""
"(Contributed by Antoine Pitrou and Amaury Forgeot d'Arc, :issue:`4868`.)"
msgstr "(Antoine Pitrou と Amaury Forgeot d'Arc の貢献, :issue:`4868`.)"

#: ../../whatsnew/3.1.rst:477
msgid ""
"The :mod:`json` module now has a C extension to substantially improve its "
"performance.  In addition, the API was modified so that json works only "
"with :class:`str`, not with :class:`bytes`.  That change makes the module "
"closely match the `JSON specification <https://json.org/>`_ which is defined "
"in terms of Unicode."
msgstr ""

#: ../../whatsnew/3.1.rst:483
msgid ""
"(Contributed by Bob Ippolito and converted to Py3.1 by Antoine Pitrou and "
"Benjamin Peterson; :issue:`4136`.)"
msgstr ""
"(Contributed by Bob Ippolito and converted to Py3.1 by Antoine Pitrou and "
"Benjamin Peterson; :issue:`4136`.)"

#: ../../whatsnew/3.1.rst:486
msgid ""
"Unpickling now interns the attribute names of pickled objects.  This saves "
"memory and allows pickles to be smaller."
msgstr ""

#: ../../whatsnew/3.1.rst:489
msgid "(Contributed by Jake McGuire and Antoine Pitrou; :issue:`5084`.)"
msgstr "(Contributed by Jake McGuire and Antoine Pitrou; :issue:`5084`.)"

#: ../../whatsnew/3.1.rst:492
msgid "IDLE"
msgstr "IDLE"

#: ../../whatsnew/3.1.rst:494
msgid ""
"IDLE's format menu now provides an option to strip trailing whitespace from "
"a source file."
msgstr ""
"IDLE のフォーマットメニューに、ソースコードから末尾の空白を取り除くことが出来"
"るオプションが追加されました。"

#: ../../whatsnew/3.1.rst:497
msgid "(Contributed by Roger D. Serwy; :issue:`5150`.)"
msgstr "(Contributed by Roger D. Serwy; :issue:`5150`.)"

#: ../../whatsnew/3.1.rst:500
msgid "Build and C API Changes"
msgstr "ビルドならびに C API の変更"

#: ../../whatsnew/3.1.rst:502
msgid "Changes to Python's build process and to the C API include:"
msgstr "Python のビルド過程と C API の変更は以下の通りです:"

#: ../../whatsnew/3.1.rst:504
msgid ""
"Integers are now stored internally either in base ``2**15`` or in base "
"``2**30``, the base being determined at build time.  Previously, they were "
"always stored in base ``2**15``.  Using base ``2**30`` gives significant "
"performance improvements on 64-bit machines, but benchmark results on 32-bit "
"machines have been mixed.  Therefore, the default is to use base ``2**30`` "
"on 64-bit machines and base ``2**15`` on 32-bit machines; on Unix, there's a "
"new configure option ``--enable-big-digits`` that can be used to override "
"this default."
msgstr ""
"整数の内部格納方式が ``2**15`` ベースと ``2**30`` ベースのいずれかになりまし"
"た。\n"
"これはビルド時に決定されます。\n"
"以前は常に ``2**15`` ベースで格納されていました。\n"
"``2**30`` ベースにすると 64 bit マシンでは性能が有意に向上しますが、 32 bit "
"マシンでのベンチマーク結果には向上も低下もあります。\n"
"そのため、デフォルトでは 64 bit マシンで ``2**30`` ベースを、 32 bit マシン"
"で ``2**15`` ベースを使用します。\n"
"Unix では新たな configure オプション ``--enable-big-digits`` が追加されまし"
"た。\n"
"これにより上記のデフォルトを上書き出来ます。"

#: ../../whatsnew/3.1.rst:513
msgid ""
"Apart from the performance improvements this change should be invisible to "
"end users, with one exception: for testing and debugging purposes there's a "
"new :data:`sys.int_info` that provides information about the internal "
"format, giving the number of bits per digit and the size in bytes of the C "
"type used to store each digit::"
msgstr ""
"この変更は性能向上以外ではエンドユーザには分からないはずですが、例外が1つあり"
"ます。\n"
"テストおよびデバッグ目的で内部形式の情報を提供する :data:`sys.int_info` が追"
"加されましたが、これにより数字あたりのビット数と各数字の格納に使われる C の型"
"のバイトサイズが分かります::"

#: ../../whatsnew/3.1.rst:519
msgid ""
">>> import sys\n"
">>> sys.int_info\n"
"sys.int_info(bits_per_digit=30, sizeof_digit=4)"
msgstr ""

#: ../../whatsnew/3.1.rst:523
msgid "(Contributed by Mark Dickinson; :issue:`4258`.)"
msgstr "(Contributed by Mark Dickinson; :issue:`4258`.)"

#: ../../whatsnew/3.1.rst:525
msgid ""
"The :c:func:`PyLong_AsUnsignedLongLong()` function now handles a negative "
"*pylong* by raising :exc:`OverflowError` instead of :exc:`TypeError`."
msgstr ""
":c:func:`PyLong_AsUnsignedLongLong()` 関数は負の *pylong* に対し :exc:"
"`TypeError` ではなく :exc:`OverflowError` を送出するようになりました。"

#: ../../whatsnew/3.1.rst:528
msgid "(Contributed by Mark Dickinson and Lisandro Dalcrin; :issue:`5175`.)"
msgstr "(Contributed by Mark Dickinson and Lisandro Dalcrin; :issue:`5175`.)"

#: ../../whatsnew/3.1.rst:530
msgid ""
"Deprecated :c:func:`!PyNumber_Int`.  Use :c:func:`PyNumber_Long` instead."
msgstr ""
":c:func:`!PyNumber_Int` が非推奨になりました。代わりに :c:func:"
"`PyNumber_Long` を使用してください。"

#: ../../whatsnew/3.1.rst:532
msgid "(Contributed by Mark Dickinson; :issue:`4910`.)"
msgstr "(Contributed by Mark Dickinson; :issue:`4910`.)"

#: ../../whatsnew/3.1.rst:534
msgid ""
"Added a new :c:func:`PyOS_string_to_double` function to replace the "
"deprecated functions :c:func:`!PyOS_ascii_strtod` and :c:func:`!"
"PyOS_ascii_atof`."
msgstr ""
"非推奨の関数 :c:func:`!PyOS_ascii_strtod` および :c:func:`!PyOS_ascii_atof` "
"を置き換えるために新しく :c:func:`PyOS_string_to_double` 関数が追加されまし"
"た。"

#: ../../whatsnew/3.1.rst:537
msgid "(Contributed by Mark Dickinson; :issue:`5914`.)"
msgstr "(Contributed by Mark Dickinson; :issue:`5914`.)"

#: ../../whatsnew/3.1.rst:539
msgid ""
"Added :c:type:`PyCapsule` as a replacement for the :c:type:`!PyCObject` API. "
"The principal difference is that the new type has a well defined interface "
"for passing typing safety information and a less complicated signature for "
"calling a destructor.  The old type had a problematic API and is now "
"deprecated."
msgstr ""
":c:type:`!PyCObject` API を置き換えるものとして、 :c:type:`PyCapsule` が追加"
"されました。主な違いとしては、新しい型は、型安全に情報を渡すための良く定義さ"
"れたインターフェースを持ち、また、デストラクタの呼び出しのシグネチャの複雑さ"
"が小さくなっています。古い型は問題のある API で、今では非推奨です。"

#: ../../whatsnew/3.1.rst:545
msgid "(Contributed by Larry Hastings; :issue:`5630`.)"
msgstr "(Contributed by Larry Hastings; :issue:`5630`.)"

#: ../../whatsnew/3.1.rst:548
msgid "Porting to Python 3.1"
msgstr "Python 3.1 への移植"

#: ../../whatsnew/3.1.rst:550
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr ""
"このセクションでは前述の変更とバグフィックスにより必要となるかもしれないコー"
"ドの変更を列挙します:"

#: ../../whatsnew/3.1.rst:553
msgid ""
"The new floating-point string representations can break existing doctests. "
"For example::"
msgstr ""

#: ../../whatsnew/3.1.rst:556
msgid ""
"def e():\n"
"    '''Compute the base of natural logarithms.\n"
"\n"
"    >>> e()\n"
"    2.7182818284590451\n"
"\n"
"    '''\n"
"    return sum(1/math.factorial(x) for x in reversed(range(30)))\n"
"\n"
"doctest.testmod()\n"
"\n"
"**********************************************************************\n"
"Failed example:\n"
"    e()\n"
"Expected:\n"
"    2.7182818284590451\n"
"Got:\n"
"    2.718281828459045\n"
"**********************************************************************"
msgstr ""

#: ../../whatsnew/3.1.rst:576
msgid ""
"The automatic name remapping in the pickle module for protocol 2 or lower "
"can make Python 3.1 pickles unreadable in Python 3.0.  One solution is to "
"use protocol 3.  Another solution is to set the *fix_imports* option to "
"``False``. See the discussion above for more details."
msgstr ""
"pickle モジュールがプロトコルバージョン 2 以下で自動的に名前の再対応付けを行"
"うので、Python 3.1 で pickle 化すると Python 3.0 で読めなくなります。一つの解"
"決策はプロトコル 3 を使うことです。もう一つは *fix_imports* オプションを "
"``False`` にセットすることです。上述の議論を参照してください。"
