# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Takanori Suzuki <takanori@takanory.net>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-29 13:04+0000\n"
"Last-Translator: Takanori Suzuki <takanori@takanory.net>, 2021\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.4.rst:3
msgid "What's New In Python 3.4"
msgstr "What's New In Python 3.4"

#: ../../whatsnew/3.4.rst:0
msgid "Author"
msgstr "著者"

#: ../../whatsnew/3.4.rst:5
msgid "R. David Murray <rdmurray@bitdance.com> (Editor)"
msgstr "R. David Murray <rdmurray@bitdance.com> (編集者)"

#: ../../whatsnew/3.4.rst:63
msgid ""
"This article explains the new features in Python 3.4, compared to 3.3. "
"Python 3.4 was released on March 16, 2014.  For full details, see the "
"`changelog <https://docs.python.org/3.4/whatsnew/changelog.html>`_."
msgstr ""
"この記事では 3.3 と比較した Python 3.4 の新機能を解説します。 Python 3.4 は"
"2014年3月16日にリリースされました。全詳細については `変更履歴  <https://docs."
"python.jp/3.4/whatsnew/changelog.html>`_ をご覧ください。"

#: ../../whatsnew/3.4.rst:70
msgid ":pep:`429` -- Python 3.4 Release Schedule"
msgstr ":pep:`429` -- Python 3.4 リリーススケジュール"

#: ../../whatsnew/3.4.rst:75
msgid "Summary -- Release Highlights"
msgstr "概要 -- リリースハイライト"

#: ../../whatsnew/3.4.rst:80
msgid "New syntax features:"
msgstr "新たな文法機能:"

#: ../../whatsnew/3.4.rst:82
msgid "No new syntax features were added in Python 3.4."
msgstr "Python 3.4 に追加された新しい文法機能はありません。"

#: ../../whatsnew/3.4.rst:84
msgid "Other new features:"
msgstr "その他の新しい機能:"

#: ../../whatsnew/3.4.rst:86
msgid ":ref:`pip should always be available <whatsnew-pep-453>` (:pep:`453`)."
msgstr ""
":ref:`pip が常に利用可能であることが保障されるようになりました<whatsnew-"
"pep-453>` (:pep:`453`)。"

#: ../../whatsnew/3.4.rst:87
msgid ""
":ref:`Newly created file descriptors are non-inheritable <whatsnew-pep-446>` "
"(:pep:`446`)."
msgstr ""
":ref:`新しく作成されたファイル記述子が継承不可能 （non-inheritable） になりま"
"した<whatsnew-pep-446>` (:pep:`446`)。"

#: ../../whatsnew/3.4.rst:89
msgid ""
"command line option for :ref:`isolated mode <whatsnew-isolated-mode>` (:"
"issue:`16499`)."
msgstr ""
":ref:`隔離モード (isolated mode) <whatsnew-isolated-mode>` の為のコマンドライ"
"ンオプション (:issue:`16499`)。"

#: ../../whatsnew/3.4.rst:91
msgid ""
":ref:`improvements in the handling of codecs <codec-handling-improvements>` "
"that are not text encodings (multiple issues)."
msgstr ""
"非テキストエンコーディングでの :ref:`Codec 処理の改良 <codec-handling-"
"improvements>`  (複数の issue に関係)."

#: ../../whatsnew/3.4.rst:93
msgid ""
":ref:`A ModuleSpec Type <whatsnew-pep-451>` for the Import System (:pep:"
"`451`).  (Affects importer authors.)"
msgstr ""
"インポートシステムのための :ref:`ModuleSpec 型 <whatsnew-pep-451>`  (:pep:"
"`451`).  (インポーターの作者に影響します)"

#: ../../whatsnew/3.4.rst:95
msgid ""
"The :mod:`marshal` format has been made :ref:`more compact and efficient "
"<whatsnew-marshal-3>` (:issue:`16475`)."
msgstr ""
":mod:`marshal` フォーマットが :ref:`よりコンパクトで効率的に <whatsnew-"
"marshal-3>` なりました  (:issue:`16475`)。"

#: ../../whatsnew/3.4.rst:98
msgid "New library modules:"
msgstr "新たなライブラリモジュール:"

#: ../../whatsnew/3.4.rst:100
msgid ""
":mod:`asyncio`: :ref:`New provisional API for asynchronous IO <whatsnew-"
"asyncio>` (:pep:`3156`)."
msgstr ""
":mod:`asyncio`: :ref:`非同期 IO のための新たな暫定 API <whatsnew-asyncio>` (:"
"pep:`3156`)。"

#: ../../whatsnew/3.4.rst:102
msgid ""
":mod:`ensurepip`: :ref:`Bootstrapping the pip installer <whatsnew-"
"ensurepip>` (:pep:`453`)."
msgstr ""
":mod:`ensurepip`: :ref:`pip インストーラのブートストラップ <whatsnew-"
"ensurepip>` (:pep:`453`)。"

#: ../../whatsnew/3.4.rst:104
msgid ""
":mod:`enum`: :ref:`Support for enumeration types <whatsnew-enum>` (:pep:"
"`435`)."
msgstr ":mod:`enum`: :ref:`列挙型のサポート <whatsnew-enum>` (:pep:`435`)。"

#: ../../whatsnew/3.4.rst:106
msgid ""
":mod:`pathlib`: :ref:`Object-oriented filesystem paths <whatsnew-pathlib>` (:"
"pep:`428`)."
msgstr ""
":mod:`pathlib`: :ref:`オブジェクト指向のファイルシステムパス <whatsnew-"
"pathlib>` (:pep:`428`)。"

#: ../../whatsnew/3.4.rst:108
msgid ""
":mod:`selectors`: :ref:`High-level and efficient I/O multiplexing <whatsnew-"
"selectors>`, built upon the :mod:`select` module primitives (part of :pep:"
"`3156`)."
msgstr ""
":mod:`selectors`: :ref:`高水準で効率的な I/O の多重化<whatsnew-selectors>`、:"
"mod:`select` モジュールプリミティブを基にしています (:pep:`3156` の一部)。"

#: ../../whatsnew/3.4.rst:111
msgid ""
":mod:`statistics`: A basic :ref:`numerically stable statistics library "
"<whatsnew-statistics>` (:pep:`450`)."
msgstr ""
":mod:`statistics`: 基礎的な :ref:`数値的に安定な統計ライブラリ <whatsnew-"
"statistics>` (:pep:`450`)。"

#: ../../whatsnew/3.4.rst:113
msgid ""
":mod:`tracemalloc`: :ref:`Trace Python memory allocations <whatsnew-"
"tracemalloc>` (:pep:`454`)."
msgstr ""
":mod:`tracemalloc`: :ref:`Python のメモリ割り当てのトレース <whatsnew-"
"tracemalloc>` (:pep:`454`)。"

#: ../../whatsnew/3.4.rst:116
msgid "Significantly improved library modules:"
msgstr "大幅に改善されたライブラリモジュール:"

#: ../../whatsnew/3.4.rst:118
msgid ""
":ref:`Single-dispatch generic functions <whatsnew-singledispatch>` in :mod:"
"`functools` (:pep:`443`)."
msgstr ""
":mod:`functools` の :ref:`シングルディスパッチジェネリック関数 <whatsnew-"
"singledispatch>` (:pep:`443`)。"

#: ../../whatsnew/3.4.rst:120
msgid ""
"New :mod:`pickle` :ref:`protocol 4 <whatsnew-protocol-4>` (:pep:`3154`)."
msgstr ""
":mod:`pickle` の新しい :ref:`プロトコル 4 <whatsnew-protocol-4>` (:pep:"
"`3154`)."

#: ../../whatsnew/3.4.rst:121
msgid ""
":mod:`multiprocessing` now has :ref:`an option to avoid using os.fork on "
"Unix <whatsnew-multiprocessing-no-fork>` (:issue:`8713`)."
msgstr ""
":mod:`multiprocessing` が :ref:`Unix で os.fork の使用を避けるオプションを持"
"つようになりました <whatsnew-multiprocessing-no-fork>` (:issue:`8713`)。"

#: ../../whatsnew/3.4.rst:123
msgid ""
":mod:`email` has a new submodule, :mod:`~email.contentmanager`, and a new :"
"mod:`~email.message.Message` subclass (:class:`~email.contentmanager."
"EmailMessage`) that :ref:`simplify MIME handling "
"<whatsnew_email_contentmanager>` (:issue:`18891`)."
msgstr ""
":mod:`email` にサブモジュール :mod:`~email.contentmanager` が追加され、ま"
"た、 :mod:`~email.message.Message` のサブクラス (:class:`~email."
"contentmanager.EmailMessage`) が追加されました。これは :ref:`MIME 処理を簡単"
"にします <whatsnew_email_contentmanager>` 。 (:issue:`18891`)"

#: ../../whatsnew/3.4.rst:127
msgid ""
"The :mod:`inspect` and :mod:`pydoc` modules are now capable of correct "
"introspection of a much wider variety of callable objects, which improves "
"the output of the Python :func:`help` system."
msgstr ""
":mod:`inspect` と :mod:`pydoc` が以前よりも遥かに幅広い種類の callable オブ"
"ジェクトを正しくイントロスペクション出来るようになり、これは Python :func:"
"`help` システムを改善することになりました。"

#: ../../whatsnew/3.4.rst:130
msgid "The :mod:`ipaddress` module API has been declared stable"
msgstr ":mod:`ipaddress` モジュール API は安定だと宣言されました。"

#: ../../whatsnew/3.4.rst:132
msgid "Security improvements:"
msgstr "セキュリティの改善:"

#: ../../whatsnew/3.4.rst:134
msgid ""
":ref:`Secure and interchangeable hash algorithm <whatsnew-pep-456>` (:pep:"
"`456`)."
msgstr ""
":ref:`安全で取り替え可能なハッシュアルゴリズム <whatsnew-pep-456>` (:pep:"
"`456`)。"

#: ../../whatsnew/3.4.rst:136
msgid ""
":ref:`Make newly created file descriptors non-inheritable <whatsnew-"
"pep-446>` (:pep:`446`) to avoid leaking file descriptors to child processes."
msgstr ""
"ファイル記述子が子プロセスにリークするのを防ぐために :ref:`新しく作成された"
"ファイル記述子が継承不可になりました <whatsnew-pep-446>` (:pep:`446`)。"

#: ../../whatsnew/3.4.rst:138
msgid ""
"New command line option for :ref:`isolated mode <whatsnew-isolated-mode>`, (:"
"issue:`16499`)."
msgstr ""
":ref:`隔離モード (isolated mode) <whatsnew-isolated-mode>` のための新たなコマ"
"ンドラインオプション (:issue:`16499`)。"

#: ../../whatsnew/3.4.rst:140
msgid ""
":mod:`multiprocessing` now has :ref:`an option to avoid using os.fork on "
"Unix <whatsnew-multiprocessing-no-fork>`.  *spawn* and *forkserver* are more "
"secure because they avoid sharing data with child processes."
msgstr ""
":mod:`multiprocessing` が :ref:`Unix で os.fork の使用を避けるオプション "
"<whatsnew-multiprocessing-no-fork>` を持つようになりました。\n"
"子プロセスとのデータ共有を避けるため *spawn* と *forkserver* はより安全です。"

#: ../../whatsnew/3.4.rst:143
msgid ""
":mod:`multiprocessing` child processes on Windows no longer inherit all of "
"the parent's inheritable handles, only the necessary ones."
msgstr ""
"Windows での :mod:`multiprocessing` 子プロセスはもはや、必要なものを除いて親"
"の継承可能なハンドルを継承しません。"

#: ../../whatsnew/3.4.rst:145
msgid ""
"A new :func:`hashlib.pbkdf2_hmac` function provides the `PKCS#5 password-"
"based key derivation function 2 <https://en.wikipedia.org/wiki/PBKDF2>`_."
msgstr ""
"新たな関数 :func:`hashlib.pbkdf2_hmac` は `PKCS#5 パスワードベースの鍵導出関"
"数２ <https://en.wikipedia.org/wiki/PBKDF2>`_ を提供します。"

#: ../../whatsnew/3.4.rst:148
msgid ":ref:`TLSv1.1 and TLSv1.2 support <whatsnew-tls-11-12>` for :mod:`ssl`."
msgstr ""
":mod:`ssl` での :ref:`TLSv1.1、 TLSv1.2 サポート <whatsnew-tls-11-12>` の追"
"加。"

#: ../../whatsnew/3.4.rst:149
msgid ""
":ref:`Retrieving certificates from the Windows system cert store support "
"<whatsnew34-win-cert-store>` for :mod:`ssl`."
msgstr ""
":mod:`ssl` での :ref:`Windows のシステム証明書ストアよりの証明書抽出サポート "
"<whatsnew34-win-cert-store>` の追加。"

#: ../../whatsnew/3.4.rst:151
msgid ""
":ref:`Server-side SNI (Server Name Indication) support <whatsnew34-sni>` "
"for :mod:`ssl`."
msgstr ""
":mod:`ssl` での :ref:`サーバサイド SNI (Server Name Indication) サポート "
"<whatsnew34-sni>` の追加。"

#: ../../whatsnew/3.4.rst:153
msgid ""
"The :class:`ssl.SSLContext` class has a :ref:`lot of improvements "
"<whatsnew34-sslcontext>`."
msgstr ""
":class:`ssl.SSLContext` クラスに :ref:`多数の改善 <whatsnew34-sslcontext>` が"
"なされました。"

#: ../../whatsnew/3.4.rst:155
msgid ""
"All modules in the standard library that support SSL now support server "
"certificate verification, including hostname matching (:func:`ssl."
"match_hostname`) and CRLs (Certificate Revocation lists, see :func:`ssl."
"SSLContext.load_verify_locations`)."
msgstr ""
"SSL をサポートする全ての標準ライブラリモジュールは今や、ホスト名のマッチング "
"(:func:`ssl.match_hostname`) と証明書失効リスト (CRLs=certification "
"revocation lists。 :func:`ssl.SSLContext.load_verify_locations` 参照) を含む"
"サーバ証明書検証をサポートします。"

#: ../../whatsnew/3.4.rst:160
msgid "CPython implementation improvements:"
msgstr "CPython の実装の改善:"

#: ../../whatsnew/3.4.rst:162
msgid ":ref:`Safe object finalization <whatsnew-pep-442>` (:pep:`442`)."
msgstr ""
":ref:`オブジェクトの安全なファイナライゼーション <whatsnew-pep-442>` (:pep:"
"`442`)。"

#: ../../whatsnew/3.4.rst:163
msgid ""
"Leveraging :pep:`442`, in most cases :ref:`module globals are no longer set "
"to None during finalization <whatsnew-pep-442>` (:issue:`18214`)."
msgstr ""
":pep:`442` を活用することで、ほとんどのケースで :ref:`モジュールのグローバル"
"がファイナライゼーション中に None がセットされることはなくなりました "
"<whatsnew-pep-442>`  (:issue:`18214`)。"

#: ../../whatsnew/3.4.rst:165
msgid ":ref:`Configurable memory allocators <whatsnew-pep-445>` (:pep:`445`)."
msgstr ":ref:`設定可能なメモリアロケータ <whatsnew-pep-445>` (:pep:`445`)。"

#: ../../whatsnew/3.4.rst:166
msgid ":ref:`Argument Clinic <whatsnew-pep-436>` (:pep:`436`)."
msgstr ":ref:`Argument Clinic <whatsnew-pep-436>` (:pep:`436`)。"

#: ../../whatsnew/3.4.rst:168
msgid ""
"Please read on for a comprehensive list of user-facing changes, including "
"many other smaller improvements, CPython optimizations, deprecations, and "
"potential porting issues."
msgstr ""
"以降は、たくさんのほかの小さな改善、CPython での最適化、非推奨リスト、潜在的"
"な移植性問題を含む、ユーザ向けの変更の包括的なリストになっています。"

#: ../../whatsnew/3.4.rst:175
msgid "New Features"
msgstr "新しい機能"

#: ../../whatsnew/3.4.rst:180
msgid "PEP 453: Explicit Bootstrapping of PIP in Python Installations"
msgstr "PEP 453: Python インストール時の PIP の明示的なブートストラッピング"

#: ../../whatsnew/3.4.rst:183
msgid "Bootstrapping pip By Default"
msgstr "デフォルトでの pip のブートストラッピング"

#: ../../whatsnew/3.4.rst:185
msgid ""
"The new :mod:`ensurepip` module (defined in :pep:`453`) provides a standard "
"cross-platform mechanism to bootstrap the pip installer into Python "
"installations and virtual environments. The version of ``pip`` included with "
"Python 3.4.0 is ``pip`` 1.5.4, and future 3.4.x maintenance releases will "
"update the bundled version to the latest version of ``pip`` that is "
"available at the time of creating the release candidate."
msgstr ""
"新しい :mod:`ensurepip` モジュール(:pep:`453` で定義されています)は標準のクロ"
"スプラットフォームのメカニズムで、Python インストールと仮想環境に pip インス"
"トーラをブートストラップします。Python 3.4.0 に含まれる ``pip`` のバージョン"
"は ``pip`` 1.5.4 で、将来の 3.4.x メンテナンスリリースでは Python のリリース"
"候補の作成時点で入手出来る最新バージョンの ``pip`` がバンドルされる予定です。"

#: ../../whatsnew/3.4.rst:192
msgid ""
"By default, the commands ``pipX`` and ``pipX.Y`` will be installed on all "
"platforms (where X.Y stands for the version of the Python installation), "
"along with the ``pip`` Python package and its dependencies. On Windows and "
"in virtual environments on all platforms, the unversioned ``pip`` command "
"will also be installed. On other platforms, the system wide unversioned "
"``pip`` command typically refers to the separately installed Python 2 "
"version."
msgstr ""
"デフォルトでは ``pipX`` , ``pipX.Y`` コマンドが全てのプラットフォームに、"
"Python パッケージ ``pip`` とその依存物とともにインストールされます(X. Y はイ"
"ンストールされる Python のバージョン)。Windows 実環境と全てのプラットフォーム"
"の仮想環境には、バージョンが名前に付与されない ``pip`` コマンドもインストール"
"されます。ほかのプラットフォームでは、システムワイドでバージョンが名前に付与"
"されない ``pip`` コマンドは、典型的には Python 2 を別途インストールした際のも"
"のを指しています。"

#: ../../whatsnew/3.4.rst:200
msgid ""
"The ``pyvenv`` command line utility and the :mod:`venv` module make use of "
"the :mod:`ensurepip` module to make ``pip`` readily available in virtual "
"environments. When using the command line utility, ``pip`` is installed by "
"default, while when using the :mod:`venv` module :ref:`venv-api` "
"installation of ``pip`` must be requested explicitly."
msgstr ""
"``pyvenv`` コマンドラインユーティリティと :mod:`venv` モジュールは、仮想環境"
"で ``pip`` が使えるようにするために :mod:`ensurepip` モジュールを使います。\n"
"コマンドラインユーティリティを使う際は ``pip`` はデフォルトでインストールされ"
"ます。\n"
":mod:`venv` モジュールの :ref:`venv-api` を使う際は、 ``pip`` のインストール"
"は明示的に要求しなければなりません。"

#: ../../whatsnew/3.4.rst:206
msgid ""
"For CPython :ref:`source builds on POSIX systems <building-python-on-unix>`, "
"the ``make install`` and ``make altinstall`` commands bootstrap ``pip`` by "
"default.  This behaviour can be controlled through configure options, and "
"overridden through Makefile options."
msgstr ""
"CPython の :ref:`source builds on POSIX systems <building-python-on-unix>` で"
"は ``make install``, ``make altinstall`` コマンドはデフォルトで ``pip`` ブー"
"トストラップを行います。この振る舞いは configure のオプションを変更して "
"Makefile を作ることで変更できます。"

#: ../../whatsnew/3.4.rst:211
msgid ""
"On Windows and Mac OS X, the CPython installers now default to installing "
"``pip`` along with CPython itself (users may opt out of installing it during "
"the installation process). Window users will need to opt in to the automatic "
"``PATH`` modifications to have ``pip`` available from the command line by "
"default, otherwise it can still be accessed through the Python launcher for "
"Windows as ``py -m pip``."
msgstr ""
"Windows と Mac OS X では CPython インストーラはそれ自身と一緒に ``pip`` をデ"
"フォルトでインストールするようになっています(ユーザはインストールプロセスで除"
"外するかもしれませんが)。Windows ユーザは ``pip`` がコマンドラインからデフォ"
"ルトで利用可能なように ``PATH`` の自動修正するかの選択を求められます。そうし"
"ない場合でも Windows のための Python ランチャで ``py -m pip`` のようにすれば"
"良いです。"

#: ../../whatsnew/3.4.rst:218
msgid ""
"As `discussed in the PEP`__, platform packagers may choose not to install "
"these commands by default, as long as, when invoked, they provide clear and "
"simple directions on how to install them on that platform (usually using the "
"system package manager)."
msgstr ""
"`discussed in the PEP <https://www.python.org/dev/peps/pep-0453/"
"#recommendations-for-downstream-distributors>`_ の通りプラットフォームのパッ"
"ケージャは、プラットフォームでのそれらインストールの単純明快な手段を自身が提"
"供する(普通システムのパッケージマネージャ)からと言う理由で、デフォルトでのこ"
"れらコマンドのインストールを選択しないかもしれません。"

#: ../../whatsnew/3.4.rst:227
msgid ""
"To avoid conflicts between parallel Python 2 and Python 3 installations, "
"only the versioned ``pip3`` and ``pip3.4`` commands are bootstrapped by "
"default when ``ensurepip`` is invoked directly - the ``--default-pip`` "
"option is needed to also request the unversioned ``pip`` command. ``pyvenv`` "
"and the Windows installer ensure that the unqualified ``pip`` command is "
"made available in those environments, and ``pip`` can always be invoked via "
"the ``-m`` switch rather than directly to avoid ambiguity on systems with "
"multiple Python installations."
msgstr ""
"Python 2 と Python 3 の共存インストールでの衝突を避けるために、 "
"``ensurepip`` を直接呼び出した場合のデフォルトでは、バージョン付けされた "
"``pip3``, ``pip3.4`` コマンドだけがインストールされます。バージョン付けのな"
"い ``pip`` コマンドもインストールしたければ、 ``--default-pip`` オプションが"
"必要です。 ``pyvenv`` と Windows インストーラは修飾のない ``pip`` コマンドが"
"それら環境で利用可能となるように保障しますし、また、複数の Python がインス"
"トールされたシステムで曖昧さを避けようと直接コマンドを呼び出す代わりに、 "
"``pip`` は ``-m`` スイッチ経由でいつでも呼び出せます。"

#: ../../whatsnew/3.4.rst:238
msgid "Documentation Changes"
msgstr "ドキュメントの変更"

#: ../../whatsnew/3.4.rst:240
msgid ""
"As part of this change, the :ref:`installing-index` and :ref:`distributing-"
"index` sections of the documentation have been completely redesigned as "
"short getting started and FAQ documents. Most packaging documentation has "
"now been moved out to the Python Packaging Authority maintained `Python "
"Packaging User Guide <https://packaging.python.org>`__ and the documentation "
"of the individual projects."
msgstr ""
"この変更の一部は、 :ref:`installing-index` と :ref:`distributing-index` セク"
"ションがより手短な始め方として完全にデザインし直されたことと、FAQ ドキュメン"
"トです。ほとんどのパッケージングについてのドキュメンテーションは `Python "
"Packaging User Guide <https://packaging.python.org>`__  が保守している "
"Python Packaging Authority に移動されて、独立したプロジェクトのドキュメンテー"
"ションになっています。"

#: ../../whatsnew/3.4.rst:248
msgid ""
"However, as this migration is currently still incomplete, the legacy "
"versions of those guides remaining available as :ref:`install-index` and :"
"ref:`setuptools-index`."
msgstr ""

#: ../../whatsnew/3.4.rst:254
msgid ":pep:`453` -- Explicit bootstrapping of pip in Python installations"
msgstr ""
":pep:`453` -- Python インストールの際の明示的なpipのブートストラッピング"

#: ../../whatsnew/3.4.rst:255
msgid ""
"PEP written by Donald Stufft and Nick Coghlan, implemented by Donald Stufft, "
"Nick Coghlan, Martin von Löwis and Ned Deily."
msgstr ""
"PEP は Donald Stufft と Nick Coghlan によって書かれ、Donald Stufft, Nick "
"Coghlan, Martin von Löwis, Ned Deily により実装されました。"

#: ../../whatsnew/3.4.rst:262
msgid "PEP 446: Newly Created File Descriptors Are Non-Inheritable"
msgstr "PEP 446: 新規作成されたファイル記述子は継承不可"

#: ../../whatsnew/3.4.rst:264
msgid ""
":pep:`446` makes newly created file descriptors :ref:`non-inheritable "
"<fd_inheritance>`.  In general, this is the behavior an application will "
"want: when launching a new process, having currently open files also open in "
"the new process can lead to all sorts of hard to find bugs, and potentially "
"to security issues."
msgstr ""
":pep:`446` により、新規作成するファイル記述子は :ref:`継承不可 (non-"
"inheritable) <fd_inheritance>` となります。一般的にはこれこそがアプリケーショ"
"ンが望む振る舞いです。新たにプロセスを生成する際に、現在開いているファイルを"
"起こした子プロセスでも開くことは、検出が困難なあらゆるバグや潜在的なセキュリ"
"ティ問題を引き起こしかねません。"

#: ../../whatsnew/3.4.rst:270
msgid ""
"However, there are occasions when inheritance is desired.  To support these "
"cases, the following new functions and methods are available:"
msgstr ""
"そうはいっても継承することが望ましい場合もあります。それらのケースをサポート"
"するために、以下の新規関数とメソッドが利用出来ます:"

#: ../../whatsnew/3.4.rst:273
msgid ":func:`os.get_inheritable`, :func:`os.set_inheritable`"
msgstr ":func:`os.get_inheritable`, :func:`os.set_inheritable`"

#: ../../whatsnew/3.4.rst:274
msgid ":func:`os.get_handle_inheritable`, :func:`os.set_handle_inheritable`"
msgstr ":func:`os.get_handle_inheritable`, :func:`os.set_handle_inheritable`"

#: ../../whatsnew/3.4.rst:275
msgid ""
":meth:`socket.socket.get_inheritable`, :meth:`socket.socket.set_inheritable`"
msgstr ""
":meth:`socket.socket.get_inheritable`, :meth:`socket.socket.set_inheritable`"

#: ../../whatsnew/3.4.rst:279
msgid ":pep:`446` -- Make newly created file descriptors non-inheritable"
msgstr ":pep:`446` -- 新規作成されたファイル記述子を継承不可にする"

#: ../../whatsnew/3.4.rst:280 ../../whatsnew/3.4.rst:1812
msgid "PEP written and implemented by Victor Stinner."
msgstr "PEP written and implemented by Victor Stinner."

#: ../../whatsnew/3.4.rst:286
msgid "Improvements to Codec Handling"
msgstr "Codec 処理の改良"

#: ../../whatsnew/3.4.rst:288
msgid ""
"Since it was first introduced, the :mod:`codecs` module has always been "
"intended to operate as a type-neutral dynamic encoding and decoding system. "
"However, its close coupling with the Python text model, especially the type "
"restricted convenience methods on the builtin :class:`str`, :class:`bytes` "
"and :class:`bytearray` types, has historically obscured that fact."
msgstr ""
"その最初の導入からずっと、 :mod:`codecs` モジュールとはいつなんどきも、型に中"
"立で動的なエンコーディング・デコーディングシステムとして働くものであったので"
"す。そうなのですがその Python テキストモデルとの密接な結合、特に組み込み型 :"
"class:`str`, :class:`bytes`, :class:`bytearray` にある型に制限があるコンビニ"
"エンスメソッドのおかげで、歴史的にその本来の意図を曖昧にしてきたのでした。"

#: ../../whatsnew/3.4.rst:295
msgid ""
"As a key step in clarifying the situation, the :meth:`codecs.encode` and :"
"meth:`codecs.decode` convenience functions are now properly documented in "
"Python 2.7, 3.3 and 3.4. These functions have existed in the :mod:`codecs` "
"module (and have been covered by the regression test suite) since Python "
"2.4, but were previously only discoverable through runtime introspection."
msgstr ""
"そんな状況を清く正しくするための重要な一歩として、今ではコンビニエンス関数 :"
"meth:`codecs.encode`, :meth:`codecs.decode` が Python 2.7、3.3、3.4 で適切に"
"ドキュメントされました。これら関数は :mod:`codecs` モジュールに Python 2.4 か"
"らずっと存在している (うえに回帰テストスイートでもずっと網羅してきた) のです"
"が、以前はドキュメントされていなかったわけなので、実行時イントロスペクション"
"でようやく見つけられるというものだったわけです。"

#: ../../whatsnew/3.4.rst:301
msgid ""
"Unlike the convenience methods on :class:`str`, :class:`bytes` and :class:"
"`bytearray`, the :mod:`codecs` convenience functions support arbitrary "
"codecs in both Python 2 and Python 3, rather than being limited to Unicode "
"text encodings (in Python 3) or ``basestring`` <-> ``basestring`` "
"conversions (in Python 2)."
msgstr ""
":class:`str`, :class:`bytes`, :class:`bytearray` でのコンビニエンスメソッド"
"が Python 3 では Unicode テキストエンコーディングに制限され、Python 2 では "
"``basestring`` <-> ``basestring`` 変換に制限されるのとは違うのです。 :mod:"
"`codecs` のコンビニエンス関数は Python 2 と Python 3 の両方で任意のコーデック"
"をサポートするのです。"

#: ../../whatsnew/3.4.rst:307
msgid ""
"In Python 3.4, the interpreter is able to identify the known non-text "
"encodings provided in the standard library and direct users towards these "
"general purpose convenience functions when appropriate::"
msgstr ""
"Python 3.4 では、インタプリタは標準ライブラリで提供している非テキストエンコー"
"ディングについて知っています。そして以下のように適宜、それら汎用目的のコンビ"
"ニエンス関数へユーザを誘導します::"

#: ../../whatsnew/3.4.rst:311
msgid ""
">>> b\"abcdef\".decode(\"hex\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"LookupError: 'hex' is not a text encoding; use codecs.decode() to handle "
"arbitrary codecs\n"
"\n"
">>> \"hello\".encode(\"rot13\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"LookupError: 'rot13' is not a text encoding; use codecs.encode() to handle "
"arbitrary codecs\n"
"\n"
">>> open(\"foo.txt\", encoding=\"hex\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"LookupError: 'hex' is not a text encoding; use codecs.open() to handle "
"arbitrary codecs"
msgstr ""

#: ../../whatsnew/3.4.rst:326
msgid ""
"In a related change, whenever it is feasible without breaking backwards "
"compatibility, exceptions raised during encoding and decoding operations are "
"wrapped in a chained exception of the same type that mentions the name of "
"the codec responsible for producing the error::"
msgstr ""
"関連する変更で、後方互換性を壊すことなくそれが相応しい場合にはいつでも、エン"
"コーディング・デコーディング操作中に起こる例外は、同じ例外型でありエラーを発"
"生させることになった原因コーデックの名前に言及する連鎖例外内に包まれます::"

#: ../../whatsnew/3.4.rst:331
msgid ""
">>> import codecs\n"
"\n"
">>> codecs.decode(b\"abcdefgh\", \"hex\")\n"
"Traceback (most recent call last):\n"
"  File \"/usr/lib/python3.4/encodings/hex_codec.py\", line 20, in "
"hex_decode\n"
"    return (binascii.a2b_hex(input), len(input))\n"
"binascii.Error: Non-hexadecimal digit found\n"
"\n"
"The above exception was the direct cause of the following exception:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"binascii.Error: decoding with 'hex' codec failed (Error: Non-hexadecimal "
"digit found)\n"
"\n"
">>> codecs.encode(\"hello\", \"bz2\")\n"
"Traceback (most recent call last):\n"
"  File \"/usr/lib/python3.4/encodings/bz2_codec.py\", line 17, in "
"bz2_encode\n"
"    return (bz2.compress(input), len(input))\n"
"  File \"/usr/lib/python3.4/bz2.py\", line 498, in compress\n"
"    return comp.compress(data) + comp.flush()\n"
"TypeError: 'str' does not support the buffer interface\n"
"\n"
"The above exception was the direct cause of the following exception:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: encoding with 'bz2' codec failed (TypeError: 'str' does not "
"support the buffer interface)"
msgstr ""

#: ../../whatsnew/3.4.rst:359
msgid ""
"Finally, as the examples above show, these improvements have permitted the "
"restoration of the convenience aliases for the non-Unicode codecs that were "
"themselves restored in Python 3.2. This means that encoding binary data to "
"and from its hexadecimal representation (for example) can now be written as::"
msgstr ""
"そしてついに、ここまで実例で見てきたような的確な誘導による改善が、それ自体は "
"Python 3.2 で復活していた非 Unicode コーデックへのコンビニエンスのエイリアス"
"の復活を可能にしました。(---訳注: Python 3.0 で一度非 Unicode エンコーディン"
"グは消滅し、3.2 でそれらコーデックそのものは復活したものの、 :source:`Lib/"
"encodings/aliases.py` のマッピングからは除外されたままだった。---) つまり、バ"
"イナリデータの 16 進表現エンコードとそのデコード (たとえば、です) は、今では"
"こう書けるということです::"

#: ../../whatsnew/3.4.rst:365
msgid ""
">>> from codecs import encode, decode\n"
">>> encode(b\"hello\", \"hex\")\n"
"b'68656c6c6f'\n"
">>> decode(b\"68656c6c6f\", \"hex\")\n"
"b'hello'"
msgstr ""

#: ../../whatsnew/3.4.rst:371
msgid ""
"The binary and text transforms provided in the standard library are detailed "
"in :ref:`binary-transforms` and :ref:`text-transforms`."
msgstr ""
"標準ライブラリで提供されるバイナリ変換とテキスト変換は、 :ref:`binary-"
"transforms` と :ref:`text-transforms` に詳細記述されました。"

#: ../../whatsnew/3.4.rst:374
msgid ""
"(Contributed by Nick Coghlan in :issue:`7475`, :issue:`17827`, :issue:"
"`17828` and :issue:`19619`.)"
msgstr ""
"(Contributed by Nick Coghlan in :issue:`7475`, :issue:`17827`, :issue:"
"`17828` and :issue:`19619`.)"

#: ../../whatsnew/3.4.rst:381
msgid "PEP 451: A ModuleSpec Type for the Import System"
msgstr "PEP 451: インポートシステムのための ModuleSpec 型"

#: ../../whatsnew/3.4.rst:383
msgid ""
":pep:`451` provides an encapsulation of the information about a module that "
"the import machinery will use to load it (that is, a module specification).  "
"This helps simplify both the import implementation and several import-"
"related APIs. The change is also a stepping stone for `several future import-"
"related improvements`__."
msgstr ""
":pep:`451` は、インポート機構がロードに使うモジュールに関する情報 (つまりモ"
"ジュールの仕様) のカプセル化を提供します。これはインポートの実装とインポート"
"関連 API の両方を単純化するのに役立ちます。この変更は、 `いくつかの将来のイン"
"ポート関連の改善 <https://mail.python.org/pipermail/python-dev/2013-"
"November/130111.html>`_ の足掛かりでもあります。"

#: ../../whatsnew/3.4.rst:391
msgid ""
"The public-facing changes from the PEP are entirely backward-compatible. "
"Furthermore, they should be transparent to everyone but importer authors.  "
"Key finder and loader methods have been deprecated, but they will continue "
"working. New importers should use the new methods described in the PEP.  "
"Existing importers should be updated to implement the new methods.  See the :"
"ref:`deprecated-3.4` section for a list of methods that should be replaced "
"and their replacements."
msgstr ""
"この PEP による公な側面での変化は完全に後方互換です。さらにそれらは、インポー"
"ターの作者以外にとっては透過的であるはずです。鍵となるファインダとローダのメ"
"ソッドはまだ動作し続けますが非推奨となりました。新しいインポータは PEP に記述"
"された新メソッドを使うべきです。既存のインポータは新メソッドを実装するように"
"更新すべきです。置き換えられるべきメソッドとその代わりとなるメソッドのリスト"
"については :ref:`deprecated-3.4` を参照してください。"

#: ../../whatsnew/3.4.rst:401
msgid "Other Language Changes"
msgstr "その他の言語変更"

#: ../../whatsnew/3.4.rst:403
msgid "Some smaller changes made to the core Python language are:"
msgstr "Python 言語コアに小さな変更がいくつか行われました:"

#: ../../whatsnew/3.4.rst:405
msgid "Unicode database updated to UCD version 6.3."
msgstr "Unicode データベースを UCD バージョン 6.3 にアップグレードしました。"

#: ../../whatsnew/3.4.rst:407
msgid ""
":func:`min` and :func:`max` now accept a *default* keyword-only argument "
"that can be used to specify the value they return if the iterable they are "
"evaluating has no elements.  (Contributed by Julian Berman in :issue:"
"`18111`.)"
msgstr ""
":func:`min` と :func:`max` にキーワード専用引数 *default* が追加されました。"
"これにはイテラブルが要素なしであると評価される場合に返す値を指定出来ます。 "
"(Contributed by Julian Berman in :issue:`18111`.)"

#: ../../whatsnew/3.4.rst:412
msgid "Module objects are now :ref:`weakly referenceable <mod-weakref>`."
msgstr ""

#: ../../whatsnew/3.4.rst:414
msgid ""
"Module ``__file__`` attributes (and related values) should now always "
"contain absolute paths by default, with the sole exception of ``__main__."
"__file__`` when a script has been executed directly using a relative path.  "
"(Contributed by Brett Cannon in :issue:`18416`.)"
msgstr ""
"モジュールの ``__file__`` 属性 (と関連する値) にはデフォルトでは常に絶対パス"
"を含むようになりました。ただし、スクリプトがコマンドラインから相対パスを使っ"
"て直接実行された際の ``__main__.__file__`` は唯一の例外です。 (Contributed "
"by Brett Cannon in :issue:`18416`.)"

#: ../../whatsnew/3.4.rst:419
msgid ""
"All the UTF-\\* codecs (except UTF-7) now reject surrogates during both "
"encoding and decoding unless the ``surrogatepass`` error handler is used, "
"with the exception of the UTF-16 decoder (which accepts valid surrogate "
"pairs) and the UTF-16 encoder (which produces them while encoding non-BMP "
"characters). (Contributed by Victor Stinner, Kang-Hao (Kenny) Lu and Serhiy "
"Storchaka in :issue:`12892`.)"
msgstr ""
"UTF-16 デコーダ (妥当なサロゲートペアを受け付ける) と UTF-16 エンコーダ (非 "
"BMP 文字のエンコードでサロゲートペアを生成) 以外の、(UTF-7 を除く) 全ての "
"UTF-\\* コーデックが、エラーハンドラ ``surrogatepass`` を使わない限りはエン"
"コーディングとデコーディングの両方でサロゲートペアを拒絶するようになりまし"
"た。(Contributed by Victor Stinner, Kang-Hao (Kenny) Lu and Serhiy Storchaka "
"in :issue:`12892`.)"

#: ../../whatsnew/3.4.rst:426
msgid ""
"New German EBCDIC :ref:`codec <standard-encodings>` ``cp273``.  (Contributed "
"by Michael Bierenfeld and Andrew Kuchling in :issue:`1097797`.)"
msgstr ""
"新規ドイツ語 EBCDIC :ref:`codec <standard-encodings>` ``cp273``.  "
"(Contributed by Michael Bierenfeld and Andrew Kuchling in :issue:`1097797`.)"

#: ../../whatsnew/3.4.rst:429
msgid ""
"New Ukrainian :ref:`codec <standard-encodings>` ``cp1125``.  (Contributed by "
"Serhiy Storchaka in :issue:`19668`.)"
msgstr ""
"新規ウクライナ語 :ref:`codec <standard-encodings>` ``cp1125``.  (Contributed "
"by Serhiy Storchaka in :issue:`19668`.)"

#: ../../whatsnew/3.4.rst:432
msgid ""
":class:`bytes`.join() and :class:`bytearray`.join() now accept arbitrary "
"buffer objects as arguments.  (Contributed by Antoine Pitrou in :issue:"
"`15958`.)"
msgstr ""
":class:`bytes`.join() と :class:`bytearray`.join() が引数として任意のバッファ"
"オブジェクトを受け取れるようになりました。 (Contributed by Antoine Pitrou "
"in :issue:`15958`.)"

#: ../../whatsnew/3.4.rst:436
msgid ""
"The :class:`int` constructor now accepts any object that has an "
"``__index__`` method for its *base* argument.  (Contributed by Mark "
"Dickinson in :issue:`16772`.)"
msgstr ""
":class:`int` コンストラクタの *base* 引数に、 ``__index__`` メソッドを持つ任"
"意のオブジェクトを渡せるようになりました。(Contributed by Mark Dickinson in :"
"issue:`16772`.) (---訳注: `Python API の変更`_ に同じ :issue:`16772` を発端と"
"する変更が書かれているのでそちらも参照して下さい。 ---)"

#: ../../whatsnew/3.4.rst:440
msgid ""
"Frame objects now have a :func:`~frame.clear` method that clears all "
"references to local variables from the frame.  (Contributed by Antoine "
"Pitrou in :issue:`17934`.)"
msgstr ""
"フレームオブジェクトに、ローカル変数への全ての参照をフレームからクリアするメ"
"ソッド :func:`~frame.clear` が追加されました。(Contributed by Antoine Pitrou "
"in :issue:`17934`.)"

#: ../../whatsnew/3.4.rst:444
msgid ""
":class:`memoryview` is now registered as a :class:`Sequence <collections."
"abc>`, and supports the :func:`reversed` builtin.  (Contributed by Nick "
"Coghlan and Claudiu Popa in :issue:`18690` and :issue:`19078`.)"
msgstr ""
":class:`memoryview` が :class:`Sequence <collections.abc>` として登録され、ま"
"た、組み込み関数 :func:`reversed` をサポートするようになりました。 "
"(Contributed by Nick Coghlan and Claudiu Popa in :issue:`18690` and :issue:"
"`19078`.)"

#: ../../whatsnew/3.4.rst:448
msgid ""
"Signatures reported by :func:`help` have been modified and improved in "
"several cases as a result of the introduction of Argument Clinic and other "
"changes to the :mod:`inspect` and :mod:`pydoc` modules."
msgstr ""
"Argument Clinic の導入、 :mod:`inspect` と :mod:`pydoc` になされた他の変更の"
"結果、多くの場合で :func:`help` が報告するシグニチャが修正・改善されました。"

#: ../../whatsnew/3.4.rst:452
msgid ""
":meth:`~object.__length_hint__` is now part of the formal language "
"specification (see :pep:`424`).  (Contributed by Armin Ronacher in :issue:"
"`16148`.)"
msgstr ""
":meth:`~object.__length_hint__` が、公式な言語仕様の一部になりました (see :"
"pep:`424`)。 (Contributed by Armin Ronacher in :issue:`16148`.)"

#: ../../whatsnew/3.4.rst:458
msgid "New Modules"
msgstr "新たなモジュール"

#: ../../whatsnew/3.4.rst:464
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.4.rst:466
msgid ""
"The new :mod:`asyncio` module (defined in :pep:`3156`) provides a standard "
"pluggable event loop model for Python, providing solid asynchronous IO "
"support in the standard library, and making it easier for other event loop "
"implementations to interoperate with the standard library and each other."
msgstr ""
":mod:`asyncio` モジュールが追加されました (:pep:`3156` で定義されています)。"
"これは Python のための標準的で抜き挿し可能なイベントループモデルを、標準ライ"
"ブラリに信頼出来る非同期 I/O サポートを追加することで提供し、また、ほかのイベ"
"ントループ実装を標準ライブラリと相互運用することを容易にします。"

#: ../../whatsnew/3.4.rst:471 ../../whatsnew/3.4.rst:534
msgid "For Python 3.4, this module is considered a :term:`provisional API`."
msgstr ""
"Python 3.4 では、このモジュールは :term:`暫定 API <provisional API>` であると"
"みなされています。"

#: ../../whatsnew/3.4.rst:475
msgid ":pep:`3156` -- Asynchronous IO Support Rebooted: the \"asyncio\" Module"
msgstr ":pep:`3156` -- 非同期 IO サポートの再起動: \"asyncio\" モジュール"

#: ../../whatsnew/3.4.rst:476
msgid "PEP written and implementation led by Guido van Rossum."
msgstr ""
"PEP written and implementation led by Guido van Rossum. (訳注: PEP タイトルの"
"「Asynchronous IO Support Rebooted: the \"asyncio\" Module」は :pep:`3153` の"
"焼き直しのため。)"

#: ../../whatsnew/3.4.rst:482
msgid "ensurepip"
msgstr "ensurepip"

#: ../../whatsnew/3.4.rst:484
msgid ""
"The new :mod:`ensurepip` module is the primary infrastructure for the :pep:"
"`453` implementation.  In the normal course of events end users will not "
"need to interact with this module, but it can be used to manually bootstrap "
"``pip`` if the automated bootstrapping into an installation or virtual "
"environment was declined."
msgstr ""
"新規の :mod:`ensurepip` モジュールは :pep:`453` 実装のための本質的な基盤で"
"す。通常はエンドユーザはこのモジュールを弄ぶ必要はありません。ですが、 "
"``pip`` のインストレーションや仮想環境に対する自動ブートストラップを拒否して"
"いた場合には、手動でそれをブートストラップするのに使えます。"

#: ../../whatsnew/3.4.rst:490
msgid ""
":mod:`ensurepip` includes a bundled copy of ``pip``, up-to-date as of the "
"first release candidate of the release of CPython with which it ships (this "
"applies to both maintenance releases and feature releases).  ``ensurepip`` "
"does not access the internet.  If the installation has internet access, "
"after ``ensurepip`` is run the bundled ``pip`` can be used to upgrade "
"``pip`` to a more recent release than the bundled one.  (Note that such an "
"upgraded version of ``pip`` is considered to be a separately installed "
"package and will not be removed if Python is uninstalled.)"
msgstr ""
":mod:`ensurepip` は ``pip`` のバンドルされたコピーを含んでいて、これは "
"CPython リリースの最初のリリース候補時点での最新です (このことはメンテナンス"
"リリース、feature リリースの両方に適用されます)。 ``ensurepip`` 自身はイン"
"ターネットアクセスしません。依存パッケージ解決のためのインターネットアクセス"
"を要するならばそれは ``ensurepip`` 実行の後の ``pip`` で行いますし、 ``pip`` "
"そのもののアップグレードも ``pip`` 自身で行います。(そのようなアップグレード"
"版 ``pip`` は個別のインストールパッケージとみなされて、Python がアンインス"
"トールされても削除されないことを付記しておきます。)"

#: ../../whatsnew/3.4.rst:499
msgid ""
"The module is named *ensure*\\ pip because if called when ``pip`` is already "
"installed, it does nothing.  It also has an ``--upgrade`` option that will "
"cause it to install the bundled copy of ``pip`` if the existing installed "
"version of ``pip`` is older than the bundled copy."
msgstr ""
"このモジュールが「 *ensure (保障する)* 」を名前に冠するのは、 ``pip`` がイン"
"ストール済みならば何もしないからです。このモジュールは ``--upgrade`` オプショ"
"ンを持ちますが、これは既存のインストール版 ``pip`` がこのモジュールにバンドル"
"されたコピーよりも古い場合に、バンドルされたコピー版 ``pip`` をインストールし"
"ます。"

#: ../../whatsnew/3.4.rst:508
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.4.rst:510
msgid ""
"The new :mod:`enum` module (defined in :pep:`435`) provides a standard "
"implementation of enumeration types, allowing other modules (such as :mod:"
"`socket`) to provide more informative error messages and better debugging "
"support by replacing opaque integer constants with backwards compatible "
"enumeration values."
msgstr ""
":mod:`enum` モジュール (:pep:`435` にて定義) は標準の列挙型実装を提供します。"
"これにより (:mod:`socket` のような) ほかのモジュールが、不透明な整数定数を後"
"方互換を保ったまま列挙値に置き換えることによって、より情報に富むエラーメッ"
"セージを提供したり、より良いデバッグサポートを行えるようになります。"

#: ../../whatsnew/3.4.rst:518
msgid ":pep:`435` -- Adding an Enum type to the Python standard library"
msgstr ":pep:`435` -- Python 標準ライブラリに enum 型を追加"

#: ../../whatsnew/3.4.rst:519
msgid ""
"PEP written by Barry Warsaw, Eli Bendersky and Ethan Furman, implemented by "
"Ethan Furman."
msgstr ""
"PEP written by Barry Warsaw, Eli Bendersky and Ethan Furman, implemented by "
"Ethan Furman."

#: ../../whatsnew/3.4.rst:526
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.4.rst:528
msgid ""
"The new :mod:`pathlib` module offers classes representing filesystem paths "
"with semantics appropriate for different operating systems.  Path classes "
"are divided between *pure paths*, which provide purely computational "
"operations without I/O, and *concrete paths*, which inherit from pure paths "
"but also provide I/O operations."
msgstr ""
"新規モジュール :mod:`pathlib` は、異なるオペレーティングシステムごとに適切な"
"意味付けでファイルシステムパスを表現するクラス群を提供しています。パスのクラ"
"ス群は *純粋パス* と *具象パス* に分離されています。前者は I/O を伴わない純粋"
"なパス計算操作を提供するもので、後者は純粋パスを派生しますが I/O 操作も提供し"
"ます。"

#: ../../whatsnew/3.4.rst:538
msgid ":pep:`428` -- The pathlib module -- object-oriented filesystem paths"
msgstr ""
":pep:`428` -- pathlib モジュール -- オブジェクト指向のファイルシステムパス"

#: ../../whatsnew/3.4.rst:539 ../../whatsnew/3.4.rst:1835
msgid "PEP written and implemented by Antoine Pitrou."
msgstr "PEP written and implemented by Antoine Pitrou."

#: ../../whatsnew/3.4.rst:545
msgid "selectors"
msgstr "selectors"

#: ../../whatsnew/3.4.rst:547
msgid ""
"The new :mod:`selectors` module (created as part of implementing :pep:"
"`3156`) allows high-level and efficient I/O multiplexing, built upon the :"
"mod:`select` module primitives."
msgstr ""
"新規モジュール :mod:`selectors` (:pep:`3156` の一部として作成されました)　"
"は、高水準で効率的な I/O の多重化を行います。これは :mod:`select` モジュール"
"プリミティブに基いています。"

#: ../../whatsnew/3.4.rst:555
msgid "statistics"
msgstr "statistics"

#: ../../whatsnew/3.4.rst:557
msgid ""
"The new :mod:`statistics` module (defined in :pep:`450`) offers some core "
"statistics functionality directly in the standard library. This module "
"supports calculation of the mean, median, mode, variance and standard "
"deviation of a data series."
msgstr ""
"新規モジュール :mod:`statistics` (:pep:`450` で定義) は統計を扱う中核機能のい"
"くつかを標準ライブラリで直接提供します。このモジュールはデータ系列の平均、中"
"央値、最頻値、分散、標準偏差の計算をサポートします。"

#: ../../whatsnew/3.4.rst:564
msgid ":pep:`450` -- Adding A Statistics Module To The Standard Library"
msgstr ":pep:`450` -- 標準ライブラリに統計モジュールを追加"

#: ../../whatsnew/3.4.rst:565
msgid "PEP written and implemented by Steven D'Aprano"
msgstr "PEP written and implemented by Steven D'Aprano"

#: ../../whatsnew/3.4.rst:571
msgid "tracemalloc"
msgstr "tracemalloc"

#: ../../whatsnew/3.4.rst:573
msgid ""
"The new :mod:`tracemalloc` module (defined in :pep:`454`) is a debug tool to "
"trace memory blocks allocated by Python. It provides the following "
"information:"
msgstr ""
"新たな :mod:`tracemalloc` モジュール (:pep:`454` で定義) は Python が割り当て"
"たメモリブロックをトレースするためのデバッグツールです。\n"
"以下の情報を提供します:"

#: ../../whatsnew/3.4.rst:576
msgid "Trace where an object was allocated"
msgstr "オブジェクトが割り当てられた場所をトレースする"

#: ../../whatsnew/3.4.rst:577
msgid ""
"Statistics on allocated memory blocks per filename and per line number: "
"total size, number and average size of allocated memory blocks"
msgstr ""
"ファイル名ごと、及び行ごとに割り当てられたメモリブロックの以下の統計を取りま"
"す：総サイズ、ブロック数、割り当てられたブロックの平均サイズ"

#: ../../whatsnew/3.4.rst:579
msgid "Compute the differences between two snapshots to detect memory leaks"
msgstr "メモリリークを検出するために2つのスナップショットの差を計算します。"

#: ../../whatsnew/3.4.rst:583
msgid ""
":pep:`454` -- Add a new tracemalloc module to trace Python memory allocations"
msgstr ""
":pep:`454` -- Python メモリ割り当てをトレースするための tracemalloc モジュー"
"ルの追加"

#: ../../whatsnew/3.4.rst:584
msgid "PEP written and implemented by Victor Stinner"
msgstr "PEP written and implemented by Victor Stinner"

#: ../../whatsnew/3.4.rst:589
msgid "Improved Modules"
msgstr "改良されたモジュール"

#: ../../whatsnew/3.4.rst:593
msgid "abc"
msgstr "abc"

#: ../../whatsnew/3.4.rst:595
msgid ""
"New function :func:`abc.get_cache_token` can be used to know when to "
"invalidate caches that are affected by changes in the object graph.  "
"(Contributed by Łukasz Langa in :issue:`16832`.)"
msgstr ""
"新規関数 :func:`abc.get_cache_token` は、オブジェクトグラフ内での変化の影響を"
"受けるキャッシュをいつ無効化すれば良いかを知るために使えます。 (Contributed "
"by Łukasz Langa in :issue:`16832`.)"

#: ../../whatsnew/3.4.rst:599
msgid ""
"New class :class:`~abc.ABC` has :class:`~abc.ABCMeta` as its meta class. "
"Using ``ABC`` as a base class has essentially the same effect as specifying "
"``metaclass=abc.ABCMeta``, but is simpler to type and easier to read. "
"(Contributed by Bruno Dupuis in :issue:`16049`.)"
msgstr ""
"新規クラス :class:`~abc.ABC` はそのメタクラスとして :class:`~abc.ABCMeta` を"
"持ちます。この ``ABC`` を基底クラスとして使うことは ``metaclass=abc."
"ABCMeta`` を指定するのと本質的に同じ効果を持ちますが、少ないタイプ数で単純に"
"書ける上に読みやすいものになります。(Contributed by Bruno Dupuis in :issue:"
"`16049`.)"

#: ../../whatsnew/3.4.rst:606
msgid "aifc"
msgstr "aifc"

#: ../../whatsnew/3.4.rst:608
msgid ""
"The :meth:`!getparams` method now returns a namedtuple rather than a plain "
"tuple.  (Contributed by Claudiu Popa in :issue:`17818`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:611
msgid ""
":func:`!aifc.open` now supports the context management protocol: when used "
"in a :keyword:`with` block, the :meth:`!close` method of the returned object "
"will be called automatically at the end of the block.  (Contributed by "
"Serhiy Storchacha in :issue:`16486`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:616 ../../whatsnew/3.4.rst:1543
msgid ""
"The :meth:`!writeframesraw` and :meth:`!writeframes` methods now accept any :"
"term:`bytes-like object`.  (Contributed by Serhiy Storchaka in :issue:"
"`8311`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:622
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.4.rst:624
msgid ""
"The :class:`~argparse.FileType` class now accepts *encoding* and *errors* "
"arguments, which are passed through to :func:`open`.  (Contributed by Lucas "
"Maystre in :issue:`11175`.)"
msgstr ""
":class:`~argparse.FileType` クラスが *encoding* 引数、 *errors* 引数を受け付"
"けるようになりました。これは :func:`open` にそのまま渡されます。 "
"(Contributed by Lucas Maystre in :issue:`11175`.)"

#: ../../whatsnew/3.4.rst:630
msgid "audioop"
msgstr "audioop"

#: ../../whatsnew/3.4.rst:632
msgid ""
":mod:`!audioop` now supports 24-bit samples.  (Contributed by Serhiy "
"Storchaka in :issue:`12866`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:635
msgid ""
"New :func:`!byteswap` function converts big-endian samples to little-endian "
"and vice versa.  (Contributed by Serhiy Storchaka in :issue:`19641`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:639
msgid ""
"All :mod:`!audioop` functions now accept any :term:`bytes-like object`.  "
"Strings are not accepted: they didn't work before, now they raise an error "
"right away. (Contributed by Serhiy Storchaka in :issue:`16685`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:645
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.4.rst:647
msgid ""
"The encoding and decoding functions in :mod:`base64` now accept any :term:"
"`bytes-like object` in cases where it previously required a :class:`bytes` "
"or :class:`bytearray` instance.  (Contributed by Nick Coghlan in :issue:"
"`17839`.)"
msgstr ""
":mod:`base64` のエンコード・デコード関数が任意の :term:`bytes-like object` オ"
"ブジェクトを受け取れるようになりました。以前は :class:`bytes` または :class:"
"`bytearray` インスタンスである必要がありました。 (Contributed by Nick "
"Coghlan in :issue:`17839`.)"

#: ../../whatsnew/3.4.rst:652
msgid ""
"New functions :func:`~base64.a85encode`, :func:`~base64.a85decode`, :func:"
"`~base64.b85encode`, and :func:`~base64.b85decode` provide the ability to "
"encode and decode binary data from and to ``Ascii85`` and the git/mercurial "
"``Base85`` formats, respectively.  The ``a85`` functions have options that "
"can be used to make them compatible with the variants of the ``Ascii85`` "
"encoding, including the Adobe variant.  (Contributed by Martin Morrison, the "
"Mercurial project, Serhiy Storchaka, and Antoine Pitrou in :issue:`17618`.)"
msgstr ""
"新規関数 :func:`~base64.a85encode`, :func:`~base64.a85decode` は ``Ascii85`` "
"フォーマットの、 :func:`~base64.b85encode`, :func:`~base64.b85decode` は git/"
"mercurial の ``Base85`` フォーマットの、バイナリデータのエンコード・バイナリ"
"データへのデコードを提供します。 ``a85`` 関数は、Abobe 方言を含む "
"``Ascii85`` エンコーディングの変種と互換性を持たせるためのオプションを持って"
"います。(Contributed by Martin Morrison, the Mercurial project, Serhiy "
"Storchaka, and Antoine Pitrou in :issue:`17618`.)"

#: ../../whatsnew/3.4.rst:662
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.4.rst:664
msgid ""
"The :meth:`.ChainMap.new_child` method now accepts an *m* argument "
"specifying the child map to add to the chain.  This allows an existing "
"mapping and/or a custom mapping type to be used for the child.  (Contributed "
"by Vinay Sajip in :issue:`16613`.)"
msgstr ""
":meth:`.ChainMap.new_child` メソッドが、チェーンに追加する子マップを指定する "
"*m* 引数を取るようになりました。これにより、以前は組み込み辞書が必ず maps の"
"先頭になっていましたが、カスタムマッピング型も使えるようになります。"
"(Contributed by Vinay Sajip in :issue:`16613`.)"

#: ../../whatsnew/3.4.rst:671
msgid "colorsys"
msgstr "colorsys"

#: ../../whatsnew/3.4.rst:673
msgid ""
"The number of digits in the coefficients for the RGB --- YIQ conversions "
"have been expanded so that they match the FCC NTSC versions.  The change in "
"results should be less than 1% and may better match results found elsewhere. "
"(Contributed by Brian Landers and Serhiy Storchaka in :issue:`14323`.)"
msgstr ""
"RGB --- YIQ 変換の係数の桁数が `FCC NTSC version <https://en.wikipedia.org/"
"wiki/YIQ#FCC_version_of_NTSC_standard>`_ に合うように広げられました。結果とし"
"ての変化は 1% 未満のはずで、また、ほかの処理系での結果とより合致するでしょ"
"う。 (Contributed by Brian Landers and Serhiy Storchaka in :issue:`14323`.)"

#: ../../whatsnew/3.4.rst:680
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.4.rst:682
msgid ""
"The new :class:`contextlib.suppress` context manager helps to clarify the "
"intent of code that deliberately suppresses exceptions from a single "
"statement.  (Contributed by Raymond Hettinger in :issue:`15806` and Zero "
"Piraeus in :issue:`19266`.)"
msgstr ""
"新規コンテキストマネージャ :class:`contextlib.suppress` によって、意図して単"
"独ステートメントからの例外を抑制しているというコードの意図をはっきりと読み手"
"に伝えることが出来ます。 (Contributed by Raymond Hettinger in :issue:`15806` "
"and Zero Piraeus in :issue:`19266`.)"

#: ../../whatsnew/3.4.rst:687
msgid ""
"The new :func:`contextlib.redirect_stdout` context manager makes it easier "
"for utility scripts to handle inflexible APIs that write their output to :"
"data:`sys.stdout` and don't provide any options to redirect it.  Using the "
"context manager, the :data:`sys.stdout` output can be redirected to any "
"other stream or, in conjunction with :class:`io.StringIO`, to a string. The "
"latter can be especially useful, for example, to capture output from a "
"function that was written to implement a command line interface. It is "
"recommended only for utility scripts because it affects the global state of :"
"data:`sys.stdout`.  (Contributed by Raymond Hettinger in :issue:`15805`.)"
msgstr ""
"新規コンテキストマネージャ :func:`contextlib.redirect_stdout` は、ユーティリ"
"ティスクリプトにて、その出力を :data:`sys.stdout` に書き出す一方でその向き先"
"を変えれない頑固な API の扱いを簡単にしてくれます。これを使うと、 :data:`sys."
"stdout` 出力をなにかほかのストリームに振り替えたり、あるいは :class:`io."
"StringIO` と組み合わせて文字列化したり出来ます。後者などは特に便利で、たとえ"
"ば元々はコマンドラインインターフェイスとして実装された関数からの出力を取り込"
"む、などということが出来ます。このコンテキストマネージャはユーティリティスク"
"リプト以外では使わない方が肝要です。というのもこれは :data:`sys.stdout` の大"
"域的な状態に影響を与えてしまうからです。 (Contributed by Raymond Hettinger "
"in :issue:`15805`.)"

#: ../../whatsnew/3.4.rst:698
msgid ""
"The :mod:`contextlib` documentation has also been updated to include a :ref:"
"`discussion <single-use-reusable-and-reentrant-cms>` of the differences "
"between single use, reusable and reentrant context managers."
msgstr ""
":mod:`contextlib` ドキュメントにも改善が行われ、コンテキストマネージャを単独"
"で使うのと再利用したり再入可能(リエントラント)するのとの違いについての :ref:`"
"議論 <single-use-reusable-and-reentrant-cms>` が追加されました。"

#: ../../whatsnew/3.4.rst:704
msgid "dbm"
msgstr "dbm"

#: ../../whatsnew/3.4.rst:706
msgid ""
":func:`dbm.open` objects now support the context management protocol.  When "
"used in a :keyword:`with` statement, the ``close`` method of the database "
"object will be called automatically at the end of the block.  (Contributed "
"by Claudiu Popa and Nick Coghlan in :issue:`19282`.)"
msgstr ""
":func:`dbm.open` がコンテキスト管理プロトコルをサポートするようになりまし"
"た: :keyword:`with` ブロックで使うとデータベースオブジェクトの ``close`` メ"
"ソッドがブロックの終了時に自動的に呼び出されます。 (Contributed by Claudiu "
"Popa and Nick Coghlan in :issue:`19282`.)"

#: ../../whatsnew/3.4.rst:713
msgid "dis"
msgstr "dis"

#: ../../whatsnew/3.4.rst:715
msgid ""
"Functions :func:`~dis.show_code`, :func:`~dis.dis`, :func:`~dis.distb`, and :"
"func:`~dis.disassemble` now accept a keyword-only *file* argument that "
"controls where they write their output."
msgstr ""
"関数 :func:`~dis.show_code`, :func:`~dis.dis`, :func:`~dis.distb`, :func:"
"`~dis.disassemble` が新たにキーワード専用引数 *file* を受け取ります。これは出"
"力先を制御します。"

#: ../../whatsnew/3.4.rst:719
msgid ""
"The :mod:`dis` module is now built around an :class:`~dis.Instruction` class "
"that provides object oriented access to the details of each individual "
"bytecode operation."
msgstr ""
":mod:`dis` モジュールはいまでは :class:`~dis.Instruction` クラスを中心に据え"
"て構築されています。これは個々のバイトコード操作の詳細に対し、オブジェクト指"
"向的なアクセスを提供するクラスです。"

#: ../../whatsnew/3.4.rst:723
msgid ""
"A new method, :func:`~dis.get_instructions`, provides an iterator that emits "
"the Instruction stream for a given piece of Python code.  Thus it is now "
"possible to write a program that inspects and manipulates a bytecode object "
"in ways different from those provided by the :mod:`~dis` module itself.  For "
"example::"
msgstr ""
"新規メソッド :func:`~dis.get_instructions` が、与えた Python コード片について"
"の命令 (インストラクション) ストリームを発行するイテレータを提供します。これ"
"を使えば、:mod:`~dis` モジュール自身が提供しているのとは違った方法で、バイト"
"コードオブジェクトを調べたり加工するようなプログラムを書くことが出来ます。例"
"えばこのように書けます::"

#: ../../whatsnew/3.4.rst:729
msgid ""
">>> import dis\n"
">>> for instr in dis.get_instructions(lambda x: x + 1):\n"
"...     print(instr.opname)\n"
"LOAD_FAST\n"
"LOAD_CONST\n"
"BINARY_ADD\n"
"RETURN_VALUE"
msgstr ""

#: ../../whatsnew/3.4.rst:737
msgid ""
"The various display tools in the :mod:`dis` module have been rewritten to "
"use these new components."
msgstr ""
":mod:`dis` モジュールにある色々な表示ツールが、これらの新しい構成要素でもって"
"書き直されました。"

#: ../../whatsnew/3.4.rst:740
msgid ""
"In addition, a new application-friendly class :class:`~dis.Bytecode` "
"provides an object-oriented API for inspecting bytecode in both in human-"
"readable form and for iterating over instructions.  The :class:`~dis."
"Bytecode` constructor takes the same arguments that :func:`~dis."
"get_instruction` does (plus an optional *current_offset*), and the resulting "
"object can be iterated to produce :class:`~dis.Instruction` objects.  But it "
"also has a :mod:`~dis.Bytecode.dis` method, equivalent to calling :mod:`~dis."
"dis` on the constructor argument, but returned as a multi-line string::"
msgstr ""
"アプリケーションフレンドリな :class:`~dis.Bytecode` クラスも追加されていま"
"す。これはバイトコードを調べるのに、人が読める形式としてもインストラクション"
"列をイテレートするのにも優しい、オブジェクト指向的な API になっています。 :"
"class:`~dis.Bytecode` コンストラクタは :func:`~dis.get_instruction` と同じ引"
"数 (と、追加でオプショナルな *current_offset*) を受け取って、結果のオブジェク"
"トは :class:`~dis.Instruction` オブジェクトを生成するイテレータとして振舞うこ"
"とが出来ます。このオブジェクトは、 :mod:`~dis.dis` にコンストラクタ引数を渡し"
"て呼び出すのと等価な :mod:`~dis.Bytecode.dis` メソッドも持っていますが、マル"
"チライン文字列で返します::"

#: ../../whatsnew/3.4.rst:749
msgid ""
">>> bytecode = dis.Bytecode(lambda x: x + 1, current_offset=3)\n"
">>> for instr in bytecode:\n"
"...     print('{} ({})'.format(instr.opname, instr.opcode))\n"
"LOAD_FAST (124)\n"
"LOAD_CONST (100)\n"
"BINARY_ADD (23)\n"
"RETURN_VALUE (83)\n"
">>> bytecode.dis().splitlines()       \n"
"['  1           0 LOAD_FAST                0 (x)',\n"
" '      -->     3 LOAD_CONST               1 (1)',\n"
" '              6 BINARY_ADD',\n"
" '              7 RETURN_VALUE']"
msgstr ""

#: ../../whatsnew/3.4.rst:762
msgid ""
":class:`~dis.Bytecode` also has a class method, :meth:`~dis.Bytecode."
"from_traceback`, that provides the ability to manipulate a traceback (that "
"is, ``print(Bytecode.from_traceback(tb).dis())`` is equivalent to "
"``distb(tb)``)."
msgstr ""
":class:`~dis.Bytecode` にはクラスメソッド :meth:`~dis.Bytecode."
"from_traceback` もあります。トレースバックから :class:`~dis.Bytecode` を構築"
"します。(``print(Bytecode.from_traceback(tb).dis())`` は :func:`~dis.distb` "
"を使って ``distb(tb)`` とするのと同じです。)"

#: ../../whatsnew/3.4.rst:767
msgid ""
"(Contributed by Nick Coghlan, Ryan Kelly and Thomas Kluyver in :issue:"
"`11816` and Claudiu Popa in :issue:`17916`.)"
msgstr ""
"(Contributed by Nick Coghlan, Ryan Kelly and Thomas Kluyver in :issue:"
"`11816` and Claudiu Popa in :issue:`17916`.)"

#: ../../whatsnew/3.4.rst:770
msgid ""
"New function :func:`~dis.stack_effect` computes the effect on the Python "
"stack of a given opcode and argument, information that is not otherwise "
"available. (Contributed by Larry Hastings in :issue:`19722`.)"
msgstr ""
"新規関数 :func:`~dis.stack_effect` は与えられた opcode (命令コード) と引数の "
"Python スタックへの effect を計算します。この情報は他からは得られません。 "
"(Contributed by Larry Hastings in :issue:`19722`.) (---訳注: "
"``PyCompile_OpcodeStackEffect`` として C API として曝した上で Python からアク"
"セス出来るようにしたものらしいです。 `stackdepth_walk での使用箇所 <https://"
"hg.python.org/cpython/file/5fe72b9ed48e/Python/compile.c#l3838>`_ 参照。---)"

#: ../../whatsnew/3.4.rst:776
msgid "doctest"
msgstr "doctest"

#: ../../whatsnew/3.4.rst:778
msgid ""
"A new :ref:`option flag <doctest-options>`, :const:`~doctest.FAIL_FAST`, "
"halts test running as soon as the first failure is detected.  (Contributed "
"by R. David Murray and Daniel Urban in :issue:`16522`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:782
msgid ""
"The :mod:`doctest` command line interface now uses :mod:`argparse`, and has "
"two new options, ``-o`` and ``-f``.  ``-o`` allows :ref:`doctest options "
"<doctest-options>` to be specified on the command line, and ``-f`` is a "
"shorthand for ``-o FAIL_FAST`` (to parallel the similar option supported by "
"the :mod:`unittest` CLI).  (Contributed by R. David Murray in :issue:"
"`11390`.)"
msgstr ""
":mod:`doctest` コマンドラインインターフェイスは :mod:`argparse` を使うように"
"なりました。2 つの新オプション ``-o`` と ``-f`` が追加されています。 ``-o`` "
"によりコマンドラインから :ref:`doctest オプション <doctest-options>` を指定す"
"ることが出来ます。 ``-f`` は ``-o FAIL_FAST`` の速記法です (:mod:`unittest` "
"CLI でサポートされる似たオプション :ref:`サポートされる同じオプション "
"<unittest-command-line-interface>` に似せるためです)。 (Contributed by R. "
"David Murray in :issue:`11390`.)"

#: ../../whatsnew/3.4.rst:788
msgid ""
":mod:`doctest` will now find doctests in extension module ``__doc__`` "
"strings. (Contributed by Zachary Ware in :issue:`3158`.)"
msgstr ""
":mod:`doctest` はいまや、拡張モジュールの ``__doc__`` 文字列から doctest を見"
"つけることが出来ます。 (Contributed by Zachary Ware in :issue:`3158`.)"

#: ../../whatsnew/3.4.rst:793
msgid "email"
msgstr "email"

#: ../../whatsnew/3.4.rst:795
msgid ""
":meth:`~email.message.Message.as_string` now accepts a *policy* argument to "
"override the default policy of the message when generating a string "
"representation of it.  This means that ``as_string`` can now be used in more "
"circumstances, instead of having to create and use a :mod:`~email.generator` "
"in order to pass formatting parameters to its ``flatten`` method.  "
"(Contributed by R. David Murray in :issue:`18600`.)"
msgstr ""
":meth:`~email.message.Message.as_string` メソッドが、その文字列表現を生成する"
"のに使うデフォルトポリシーを上書き出来る *policy* 引数を取るようになりまし"
"た。つまり :class:`~email.message.Message` を作り直したり ``flattern`` メソッ"
"ドの書式化パラメータのためだけに :mod:`~email.generator` を使うことなしに、 "
"``as_string`` をより多くの状況で使えるということになります。(Contributed by "
"R. David Murray in :issue:`18600`.)"

#: ../../whatsnew/3.4.rst:802
msgid ""
"New method :meth:`~email.message.Message.as_bytes` added to produce a bytes "
"representation of the message in a fashion similar to how ``as_string`` "
"produces a string representation.  It does not accept the *maxheaderlen* "
"argument, but does accept the *unixfrom* and *policy* arguments. The :class:"
"`~email.message.Message` :meth:`~email.message.Message.__bytes__` method "
"calls it, meaning that ``bytes(mymsg)`` will now produce the intuitive "
"result:  a bytes object containing the fully formatted message.  "
"(Contributed by R. David Murray in :issue:`18600`.)"
msgstr ""
":meth:`~email.message.Message.as_bytes` メソッドが追加されました。これは "
"``as_string`` が文字列表現を生成するのと似たやり方で、メッセージの bytes 表現"
"を生成します。これは *maxheaderlen* 引数を取りませんが、 *unixfrom* 引数と "
"*policy* 引数を取ります。 :class:`~email.message.Message` の :meth:`~email."
"message.Message.__bytes__` がこれを呼び出すようにしたので、 ``bytes(mymsg)`` "
"は今や直感に反しない結果、つまり完全にフォーマットされたメッセージを生成しま"
"す。(Contributed by R. David Murray in :issue:`18600`.)"

#: ../../whatsnew/3.4.rst:811
msgid ""
"The :meth:`.Message.set_param` message now accepts a *replace* keyword "
"argument. When specified, the associated header will be updated without "
"changing its location in the list of headers.  For backward compatibility, "
"the default is ``False``.  (Contributed by R. David Murray in :issue:"
"`18891`.)"
msgstr ""
":meth:`.Message.set_param` メソッドにキーワード引数 *replace* が追加されまし"
"た。真を渡すとヘッダリスト内のその位置を変更せずに関連ヘッダを更新します。後"
"方互換のためにデフォルトは ``False`` です。 (Contributed by R. David Murray "
"in :issue:`18891`.)"

#: ../../whatsnew/3.4.rst:819
msgid ""
"A pair of new subclasses of :class:`~email.message.Message` have been added "
"(:class:`.EmailMessage` and :class:`.MIMEPart`), along with a new sub-"
"module, :mod:`~email.contentmanager` and a new :mod:`~email.policy` "
"attribute :attr:`~email.policy.EmailPolicy.content_manager`.  All "
"documentation is currently in the new module, which is being added as part "
"of email's new :term:`provisional API`.  These classes provide a number of "
"new methods that make extracting content from and inserting content into "
"email messages much easier.  For details, see the :mod:`~email."
"contentmanager` documentation and the :ref:`email-examples`.  These API "
"additions complete the bulk of the work that was planned as part of the "
"email6 project.  The currently provisional API is scheduled to become final "
"in Python 3.5 (possibly with a few minor additions in the area of error "
"handling).  (Contributed by R. David Murray in :issue:`18891`.)"
msgstr ""
"サブモジュール :mod:`~email.contentmanager` と :mod:`~email.policy` 属性の :"
"attr:`~email.policy.EmailPolicy.content_manager` の追加と併せて、 :class:"
"`~email.message.Message` の対となる二つのサブクラス (:class:`.EmailMessage` "
"と :class:`.MIMEPart`) が追加されました。\n"
"全てのドキュメントは、 email の新規 :term:`暫定 API <provisional API>` の構成"
"要素として追加されたこの新しいモジュールにあります。\n"
"これらのクラスは、 email メッセージからの内容抽出や挿入を遥かに簡単に行える、"
"数多くの新規メソッドを提供しています。\n"
"詳細は :mod:`~email.contentmanager` のドキュメントと :ref:`email-examples` を"
"参照してください。\n"
"これらの API の追加作業により email6 プロジェクトの一部として計画されていた作"
"業は、その大部分が完了しました。\n"
"現在のところ、暫定 API 状態は Python 3.5 で最後となる予定です (可能性としては"
"エラー処理あたりのゾーンでは少々の些細な追加は残るかもしれません)。 "
"(Contributed by R. David Murray in :issue:`18891`.)"

#: ../../whatsnew/3.4.rst:835
msgid "filecmp"
msgstr "filecmp"

#: ../../whatsnew/3.4.rst:837
msgid ""
"A new :func:`~filecmp.clear_cache` function provides the ability to clear "
"the :mod:`filecmp` comparison cache, which uses :func:`os.stat` information "
"to determine if the file has changed since the last compare.  This can be "
"used, for example, if the file might have been changed and re-checked in "
"less time than the resolution of a particular filesystem's file modification "
"time field. (Contributed by Mark Levitt in :issue:`18149`.)"
msgstr ""
":func:`~filecmp.clear_cache` 関数が追加されました。 :mod:`filecmp` は :func:"
"`os.stat` 情報をキャッシュして最後の比較時点からのファイルの変化をみています"
"が、このキャッシュをクリアします。これはたとえば、ファイルシステムのタイムス"
"タンプフィールドの解像度未満の時間差で再比較したい場合に使えるでしょう。"
"(Contributed by Mark Levitt in :issue:`18149`.)"

#: ../../whatsnew/3.4.rst:844
msgid ""
"New module attribute :const:`~filecmp.DEFAULT_IGNORES` provides the list of "
"directories that are used as the default value for the *ignore* parameter of "
"the :func:`~filecmp.dircmp` function.  (Contributed by Eli Bendersky in :"
"issue:`15442`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:851
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.4.rst:853
msgid ""
"The new :func:`~functools.partialmethod` descriptor brings partial argument "
"application to descriptors, just as :func:`~functools.partial` provides for "
"normal callables. The new descriptor also makes it easier to get arbitrary "
"callables (including :func:`~functools.partial` instances) to behave like "
"normal instance methods when included in a class definition. (Contributed by "
"Alon Horev and Nick Coghlan in :issue:`4331`.)"
msgstr ""
"新たな :func:`~functools.partialmethod` デスクリプタは、ちょうど普通の "
"callable に対して :func:`~functools.partial` がするように、デスクリプタへの引"
"数部分適用を可能にします。この新しいデスクリプタをクラス定義内で使うと、簡単"
"に (:func:`~functools.partial` インスタンスを含む) 任意の callable を普通のイ"
"ンスタンスメソッドのように振舞わせることも出来ます。(Contributed by Alon "
"Horev and Nick Coghlan in :issue:`4331`.)"

#: ../../whatsnew/3.4.rst:862
msgid ""
"The new :func:`~functools.singledispatch` decorator brings support for "
"single-dispatch generic functions to the Python standard library. Where "
"object oriented programming focuses on grouping multiple operations on a "
"common set of data into a class, a generic function focuses on grouping "
"multiple implementations of an operation that allows it to work with "
"*different* kinds of data."
msgstr ""
"新たな :func:`~functools.singledispatch` デコレータは、Python 標準ライブラリ"
"にシングルディスパッチのジェネリック関数のサポートを追加します。オブジェクト"
"指向プログラミングは共通データ集合についての複数操作をまとめあげてクラスに押"
"し込めようとしますが、ジェネリック関数は *異なった* 種類のデータに対して動作"
"させたい操作の複数実装をひとつにまとめあげる考え方です。(---訳注: ここで"
"「ジェネリック関数」と呼んでいるものを他の言語との類推で理解しようとすると、"
"「呼び出す側目線」では同じで、「呼び出される側」目線では違うかもしれません。"
"例えば C++ ユーザは「template の特殊化」もしくは「型ごとのオーバロード」との"
"類推で理解してください。---)"

#: ../../whatsnew/3.4.rst:871
msgid ":pep:`443` -- Single-dispatch generic functions"
msgstr ":pep:`443` -- シングルディスパッチのジェネリック関数"

#: ../../whatsnew/3.4.rst:872
msgid "PEP written and implemented by Łukasz Langa."
msgstr "PEP written and implemented by Łukasz Langa."

#: ../../whatsnew/3.4.rst:874
msgid ""
":func:`~functools.total_ordering` now supports a return value of :data:"
"`NotImplemented` from the underlying comparison function.  (Contributed by "
"Katie Miller in :issue:`10042`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:878
msgid ""
"A pure-python version of the :func:`~functools.partial` function is now in "
"the stdlib; in CPython it is overridden by the C accelerated version, but it "
"is available for other implementations to use.  (Contributed by Brian Thorne "
"in :issue:`12428`.)"
msgstr ""
":func:`~functools.partial` 関数のピュア Python 版が標準ライブラリに追加されま"
"した。CPython の場合は C による高速版で置き換えられますが、ほかの Python 実装"
"で利用出来ます。 (Contributed by Brian Thorne in :issue:`12428`.)"

#: ../../whatsnew/3.4.rst:885
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.4.rst:887
msgid ""
"New function :func:`~gc.get_stats` returns a list of three per-generation "
"dictionaries containing the collections statistics since interpreter "
"startup. (Contributed by Antoine Pitrou in :issue:`16351`.)"
msgstr ""
"新規関数 :func:`~gc.get_stats` は、インタプリタが開始してからの、世代ごと回収"
"統計を持つ辞書の、3 世代ぶんのリストを返します。(Contributed by Antoine "
"Pitrou in :issue:`16351`.)"

#: ../../whatsnew/3.4.rst:893
msgid "glob"
msgstr "glob"

#: ../../whatsnew/3.4.rst:895
msgid ""
"A new function :func:`~glob.escape` provides a way to escape special "
"characters in a filename so that they do not become part of the globbing "
"expansion but are instead matched literally.  (Contributed by Serhiy "
"Storchaka in :issue:`8402`.)"
msgstr ""
"新規関数 :func:`~glob.escape` は、glob 的な展開がなされないようにして字句通り"
"の合致をするように、ファイル名に含まれる特殊文字をエスケープする手段となりま"
"す。(Contributed by Serhiy Storchaka in :issue:`8402`.)"

#: ../../whatsnew/3.4.rst:901
msgid "hashlib"
msgstr "hashlib"

#: ../../whatsnew/3.4.rst:903
msgid ""
"A new :func:`hashlib.pbkdf2_hmac` function provides the `PKCS#5 password-"
"based key derivation function 2 <https://en.wikipedia.org/wiki/PBKDF2>`_.  "
"(Contributed by Christian Heimes in :issue:`18582`.)"
msgstr ""
"新たな関数 :func:`hashlib.pbkdf2_hmac` は `PKCS#5 パスワードベースの鍵導出関"
"数２ <https://en.wikipedia.org/wiki/PBKDF2>`_ を提供します。 (Contributed by "
"Christian Heimes in :issue:`18582`.)"

#: ../../whatsnew/3.4.rst:908
msgid ""
"The :attr:`~hashlib.hash.name` attribute of :mod:`hashlib` hash objects is "
"now a formally supported interface.  It has always existed in CPython's :mod:"
"`hashlib` (although it did not return lower case names for all supported "
"hashes), but it was not a public interface and so some other Python "
"implementations have not previously supported it.  (Contributed by Jason R. "
"Coombs in :issue:`18532`.)"
msgstr ""
":mod:`hashlib` のハッシュオブジェクトの :attr:`~hashlib.hash.name` 属性が、公"
"式にサポートされるインターフェイスになりました。これは CPython の :mod:"
"`hashlib` には以前から存在していました (ただしサポートされるハッシュの名前を"
"必ずしも小文字で返してはいませんでした) が、公開インターフェイスとしていな"
"かったために、ほかのいくつかの Python 実装では以前はサポートされていませんで"
"した。(Contributed by Jason R. Coombs in :issue:`18532`.)"

#: ../../whatsnew/3.4.rst:917
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.4.rst:919
msgid ""
":mod:`hmac` now accepts ``bytearray`` as well as ``bytes`` for the *key* "
"argument to the :func:`~hmac.new` function, and the *msg* parameter to both "
"the :func:`~hmac.new` function and the :meth:`~hmac.HMAC.update` method now "
"accepts any type supported by the :mod:`hashlib` module.  (Contributed by "
"Jonas Borgström in :issue:`18240`.)"
msgstr ""
":mod:`hmac` は、 :func:`~hmac.new` の *key* 引数として ``bytearray`` と "
"``bytes`` を許容するようになり、また、 :func:`~hmac.new` 関数と :meth:`~hmac."
"HMAC.update` メソッドの両方への *msg* パラメータとして、 :mod:`hashlib` モ"
"ジュールがサポートする任意の型を許容するようになりました。(Contributed by "
"Jonas Borgström in :issue:`18240`.)"

#: ../../whatsnew/3.4.rst:925
msgid ""
"The *digestmod* argument to the :func:`hmac.new` function may now be any "
"hash digest name recognized by :mod:`hashlib`.  In addition, the current "
"behavior in which the value of *digestmod* defaults to ``MD5`` is "
"deprecated: in a future version of Python there will be no default value.  "
"(Contributed by Christian Heimes in :issue:`17276`.)"
msgstr ""
":func:`hmac.new` 関数への *digestmod* 引数には、:mod:`hashlib` が認識する任意"
"のハッシュダイジェスト名を渡せるようになりました。これとともに、 *digestmod* "
"のデフォルトとして ``MD5`` を使う現在の振る舞いは非推奨です。将来のバージョン"
"の Python ではこれのデフォルト値はなくなり、指定が必須になります。 "
"(Contributed by Christian Heimes in :issue:`17276`.)"

#: ../../whatsnew/3.4.rst:931
msgid ""
"With the addition of :attr:`~hmac.HMAC.block_size` and :attr:`~hmac.HMAC."
"name` attributes (and the formal documentation of the :attr:`~hmac.HMAC."
"digest_size` attribute), the :mod:`hmac` module now conforms fully to the :"
"pep:`247` API. (Contributed by Christian Heimes in :issue:`18775`.)"
msgstr ""
":attr:`~hmac.HMAC.block_size` 属性と :attr:`~hmac.HMAC.name` 属性 (と :attr:"
"`~hmac.HMAC.digest_size` 属性の公式ドキュメント) の追加をもって、 :mod:"
"`hmac` モジュールは完全に :pep:`247` API を遵守するものとなりました。 "
"(Contributed by Christian Heimes in :issue:`18775`.)"

#: ../../whatsnew/3.4.rst:938
msgid "html"
msgstr "html"

#: ../../whatsnew/3.4.rst:940
msgid ""
"New function :func:`~html.unescape` function converts HTML5 character "
"references to the corresponding Unicode characters.  (Contributed by Ezio "
"Melotti in :issue:`2927`.)"
msgstr ""
"新規関数 :func:`~html.unescape` は HTML5 文字参照を対応する Unicode 文字に変"
"換します。 (Contributed by Ezio Melotti in :issue:`2927`.)"

#: ../../whatsnew/3.4.rst:944
msgid ""
":class:`~html.parser.HTMLParser` accepts a new keyword argument "
"*convert_charrefs* that, when ``True``, automatically converts all character "
"references.  For backward-compatibility, its value defaults to ``False``, "
"but it will change to ``True`` in a future version of Python, so you are "
"invited to set it explicitly and update your code to use this new feature.  "
"(Contributed by Ezio Melotti in :issue:`13633`.)"
msgstr ""
":class:`~html.parser.HTMLParser` が新規キーワード引数 *convert_charrefs* を受"
"け取ります。これが ``True`` の場合に、全ての文字参照が自動的に変換されます。"
"後方互換性の問題から今はこのデフォルトを ``False`` にしてありますが、将来バー"
"ジョンの Python でこれを ``True`` に変えます。ですから値は明示的にセットして"
"この新しい機能を使うように更新しておくと良いです。(Contributed by Ezio "
"Melotti in :issue:`13633`.)"

#: ../../whatsnew/3.4.rst:951
msgid ""
"The *strict* argument of :class:`~html.parser.HTMLParser` is now deprecated. "
"(Contributed by Ezio Melotti in :issue:`15114`.)"
msgstr ""
":class:`~html.parser.HTMLParser` の *strict* 引数が非推奨となりました。 "
"(Contributed by Ezio Melotti in :issue:`15114`.)"

#: ../../whatsnew/3.4.rst:956
msgid "http"
msgstr "http"

#: ../../whatsnew/3.4.rst:958
msgid ""
":meth:`~http.server.BaseHTTPRequestHandler.send_error` now accepts an "
"optional additional *explain* parameter which can be used to provide an "
"extended error description, overriding the hardcoded default if there is "
"one. This extended error description will be formatted using the :attr:"
"`~http.server.HTTP.error_message_format` attribute and sent as the body of "
"the error response.  (Contributed by Karl Cow in :issue:`12921`.)"
msgstr ""
":meth:`~http.server.BaseHTTPRequestHandler.send_error` がオプショナルなパラ"
"メータ *explain* を受け付けるようになりました。指定されると、拡張のエラー説明"
"を提供するにあたって、ハードコードされたデフォルトの代わりに使われます。この"
"拡張のエラー説明は :attr:`~http.server.HTTP.error_message_format` 属性を使っ"
"てフォーマットされて、エラーレスポンスのメッセージボディとして送信されます。"
"(Contributed by Karl Cow in :issue:`12921`.)"

#: ../../whatsnew/3.4.rst:965
msgid ""
"The :mod:`http.server` :ref:`command line interface <http-server-cli>` now "
"has a ``-b/--bind`` option that causes the server to listen on a specific "
"address. (Contributed by Malte Swart in :issue:`17764`.)"
msgstr ""
":mod:`http.server` の :ref:`コマンドラインインターフェイス <http-server-"
"cli>` に ``-b/--bind`` オプションが追加されました。これは特定のアドレスで "
"listen することを指示します。 (Contributed by Malte Swart in :issue:"
"`17764`.) (---訳注: ネットワークプログラミングに詳しい人ほど混乱しそうなので"
"一応。 ``--bind`` というオプション名が示すとおり、より正確に表現するなら"
"「ユーザ指定のネットワークインターフェイスに bind」。コミットログの表現"
"「Expose --bind argument for http.server, enable http.server to bind to a "
"user specified network interface.」の方がわかりやすいかと。  ---)"

#: ../../whatsnew/3.4.rst:971
msgid "idlelib and IDLE"
msgstr "idlelib と IDLE"

#: ../../whatsnew/3.4.rst:973
msgid ""
"Since idlelib implements the IDLE shell and editor and is not intended for "
"import by other programs, it gets improvements with every release. See :file:"
"`Lib/idlelib/NEWS.txt` for a cumulative list of changes since 3.3.0, as well "
"as changes made in future 3.4.x releases. This file is also available from "
"the IDLE :menuselection:`Help --> About IDLE` dialog."
msgstr ""
"idlelib は IDLE シェルとエディタを実装するものであってほかのプログラムからイ"
"ンポートされることを意図してはいないので、改善は毎度のリリースごとに行われま"
"す。3.3.0 から始まり、また将来の 3.4.x リリースになされる累積的な変更リスト"
"は :file:`Lib/idlelib/NEWS.txt` で読むことが出来ます。このファイルは IDLE "
"で :menuselection:`Help --> About IDLE` からも辿り着けます。"

#: ../../whatsnew/3.4.rst:981
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.4.rst:983
msgid ""
"The :class:`~importlib.abc.InspectLoader` ABC defines a new method, :meth:"
"`~importlib.abc.InspectLoader.source_to_code` that accepts source data and a "
"path and returns a code object.  The default implementation is equivalent to "
"``compile(data, path, 'exec', dont_inherit=True)``. (Contributed by Eric "
"Snow and Brett Cannon in :issue:`15627`.)"
msgstr ""
":class:`~importlib.abc.InspectLoader` ABC に新規メソッド :meth:`~importlib."
"abc.InspectLoader.source_to_code` が追加されました。ソースデータとパスを受け"
"取り、コードオブジェクトを返します。これのデフォルト実装は ``compile(data, "
"path, 'exec', dont_inherit=True)`` と同じです。 (Contributed by Eric Snow "
"and Brett Cannon in :issue:`15627`.)"

#: ../../whatsnew/3.4.rst:989
msgid ""
":class:`~importlib.abc.InspectLoader` also now has a default implementation "
"for the :meth:`~importlib.abc.InspectLoader.get_code` method.  However, it "
"will normally be desirable to override the default implementation for "
"performance reasons.  (Contributed by Brett Cannon in :issue:`18072`.)"
msgstr ""
":class:`~importlib.abc.InspectLoader` では :meth:`~importlib.abc."
"InspectLoader.get_code` メソッドへのデフォルト実装追加も行われました。とはい"
"え性能面の理由より、通常はデフォルト実装をオーバライドすることが望ましいで"
"す。 (Contributed by Brett Cannon in :issue:`18072`.)"

#: ../../whatsnew/3.4.rst:994
msgid ""
"The :func:`~importlib.reload` function has been moved from :mod:`!imp` to :"
"mod:`importlib` as part of the :mod:`!imp` module deprecation.  (Contributed "
"by Berker Peksag in :issue:`18193`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:998
msgid ""
":mod:`importlib.util` now has a :data:`~importlib.util.MAGIC_NUMBER` "
"attribute providing access to the bytecode version number.  This replaces "
"the :func:`!get_magic` function in the deprecated :mod:`!imp` module. "
"(Contributed by Brett Cannon in :issue:`18192`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1003
msgid ""
"New :mod:`importlib.util` functions :func:`~importlib.util."
"cache_from_source` and :func:`~importlib.util.source_from_cache` replace the "
"same-named functions in the deprecated :mod:`!imp` module.  (Contributed by "
"Brett Cannon in :issue:`18194`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1008
msgid ""
"The :mod:`importlib` bootstrap :class:`.NamespaceLoader` now conforms to "
"the :class:`.InspectLoader` ABC, which means that ``runpy`` and ``python -"
"m`` can now be used with namespace packages.  (Contributed by Brett Cannon "
"in :issue:`18058`.)"
msgstr ""
":mod:`importlib` ブートストラップ :class:`.NamespaceLoader` が :class:`."
"InspectLoader` ABC に従うようになりました。つまりこれにより ``runpy`` と "
"``python -m`` が名前空間パッケージに対して使えるようになりました。"
"(Contributed by Brett Cannon in :issue:`18058`.)  (訳注: 3.3 以降の名前空間"
"パッケージについては What's New In Python 3.3 (:pep:`420`) 参照。) "

#: ../../whatsnew/3.4.rst:1013
msgid ""
":mod:`importlib.util` has a new function :func:`~importlib.util."
"decode_source` that decodes source from bytes using universal newline "
"processing.  This is useful for implementing :meth:`.InspectLoader."
"get_source` methods."
msgstr ""
":mod:`importlib.util` に :func:`~importlib.util.decode_source` 関数が追加され"
"ました。 :term:`universal newlines` 処理を使って bytes からソースをデコードし"
"ます。 :meth:`.InspectLoader.get_source` メソッドを実装するのに便利です。"

#: ../../whatsnew/3.4.rst:1017
msgid ""
":class:`importlib.machinery.ExtensionFileLoader` now has a :meth:`~importlib."
"machinery.ExtensionFileLoader.get_filename` method.  This was inadvertently "
"omitted in the original implementation.  (Contributed by Eric Snow in :issue:"
"`19152`.)"
msgstr ""
":class:`importlib.machinery.ExtensionFileLoader` に :meth:`~importlib."
"machinery.ExtensionFileLoader.get_filename` メソッドが追加されました。これは"
"本来実装されるべきものでしたが見落とされていました。(Contributed by Eric "
"Snow in :issue:`19152`.)"

#: ../../whatsnew/3.4.rst:1024
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.4.rst:1026
msgid ""
"The :mod:`inspect` module now offers a basic :ref:`command line interface "
"<inspect-module-cli>` to quickly display source code and other information "
"for modules, classes and functions.  (Contributed by Claudiu Popa and Nick "
"Coghlan in :issue:`18626`.)"
msgstr ""
":mod:`inspect` モジュールに、ソースコードおよびモジュール・クラス・関数につい"
"てのその他情報を手早く表示するための、基礎的な :ref:`コマンドラインインター"
"フェイス <inspect-module-cli>` が追加されました。  (Contributed by Claudiu "
"Popa and Nick Coghlan in :issue:`18626`.)"

#: ../../whatsnew/3.4.rst:1031
msgid ""
":func:`~inspect.unwrap` makes it easy to unravel wrapper function chains "
"created by :func:`functools.wraps` (and any other API that sets the "
"``__wrapped__`` attribute on a wrapper function).  (Contributed by Daniel "
"Urban, Aaron Iles and Nick Coghlan in :issue:`13266`.)"
msgstr ""
"新規の :func:`~inspect.unwrap` で、 :func:`functools.wraps` (やラッパー関数"
"に ``__wrapped__`` 属性をセットするその他 API) で作られたラッパー関数のチェイ"
"ンを、簡単にほどくことが出来ます。 (Contributed by Daniel Urban, Aaron Iles "
"and Nick Coghlan in :issue:`13266`.) (---訳注: 「簡単に」の意味するところにつ"
"いて、 `Python API の変更`_ に記述されている ``functools.update_wrapper()`` "
"と ``functools.wraps()`` の変更も参照して下さい。---)"

#: ../../whatsnew/3.4.rst:1036
msgid ""
"As part of the implementation of the new :mod:`enum` module, the :mod:"
"`inspect` module now has substantially better support for custom ``__dir__`` "
"methods and dynamic class attributes provided through metaclasses.  "
"(Contributed by Ethan Furman in :issue:`18929` and :issue:`19030`.)"
msgstr ""
"新規 :mod:`enum` モジュールが実装されたことを受け :mod:`inspect` モジュール"
"は、カスタム ``__dir__`` メソッドに対する、またメタクラスを介して提供される動"
"的クラス属性に対する、ずっと良いサポートを提供出来るようになりました。 "
"(Contributed by Ethan Furman in :issue:`18929` and :issue:`19030`.)"

#: ../../whatsnew/3.4.rst:1042
msgid ""
":func:`~inspect.getfullargspec` and :func:`~inspect.getargspec` now use the :"
"func:`~inspect.signature` API. This allows them to support a much broader "
"range of callables, including those with ``__signature__`` attributes, those "
"with metadata provided by argument clinic, :func:`functools.partial` objects "
"and more. Note that, unlike :func:`~inspect.signature`, these functions "
"still ignore ``__wrapped__`` attributes, and report the already bound first "
"argument for bound methods, so it is still necessary to update your code to "
"use :func:`~inspect.signature` directly if those features are desired. "
"(Contributed by Yury Selivanov in :issue:`17481`.)"
msgstr ""
":func:`~inspect.getfullargspec` と :func:`~inspect.getargspec` が :func:"
"`~inspect.signature` API を使うようになりました。このことで、以前より遥かに幅"
"広い callable をサポートするようになっています。それには ``__signature__`` 属"
"性を含むもの、 Argument Clinic で提供されるメタデータを含むもの、あるいは :"
"func:`functools.partial` オブジェクト、なども含まれます。 :func:`~inspect."
"signature` そのものとは違い、今でも :func:`~inspect.getfullargspec`, :func:"
"`~inspect.getargspec` は ``__wrapped__`` 属性を無視し、そして束縛されたメソッ"
"ドで最初に束縛された引数を報告するので、それが望みでないならば :func:"
"`~inspect.signature` を直接使うようにあなたのコードを更新する必要があります。"
"(Contributed by Yury Selivanov in :issue:`17481`.) (---訳注: What's New In "
"Python 3.5 を参照してください。 :func:`~inspect.signature` により :func:"
"`~inspect.getfullargspec` と :func:`~inspect.getargspec` は結果として非推奨と"
"なりました。---)"

#: ../../whatsnew/3.4.rst:1053
msgid ""
":func:`~inspect.signature` now supports duck types of CPython functions, "
"which adds support for functions compiled with Cython.  (Contributed by "
"Stefan Behnel and Yury Selivanov in :issue:`17159`.)"
msgstr ""
":func:`~inspect.signature` が CPython 関数のダックタイプをサポートするように"
"なりました。これは Cython でコンパイルされた関数をサポートすることになりま"
"す。 (Contributed by Stefan Behnel and Yury Selivanov in :issue:`17159`.) "
"(---訳注: duck type はここでは「 ``types.FunctionType`` であることを要求しな"
"い」の意味。 `_signature_is_functionlike <https://hg.python.org/cpython/"
"file/32a660a52aae/Lib/inspect.py#l1604>`_ 参照。 ---)"

#: ../../whatsnew/3.4.rst:1059
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.4.rst:1061
msgid ""
":mod:`ipaddress` was added to the standard library in Python 3.3 as a :term:"
"`provisional API`. With the release of Python 3.4, this qualification has "
"been removed: :mod:`ipaddress` is now considered a stable API, covered by "
"the normal standard library requirements to maintain backwards compatibility."
msgstr ""
":mod:`ipaddress` は Python 3.3 で標準ライブラリに :term:`暫定 API "
"<provisional API>` として追加されました。Python 3.4 リリースで、この但し書き"
"は削除されました: :mod:`ipaddress` は今や安定 API とみなされ、今後は通常の標"
"準ライブラリの後方互換性維持要件に従います。"

#: ../../whatsnew/3.4.rst:1067
msgid ""
"A new :attr:`~ipaddress.IPv4Address.is_global` property is ``True`` if an "
"address is globally routeable.  (Contributed by Peter Moody in :issue:"
"`17400`.)"
msgstr ""
"新規のプロパティ :attr:`~ipaddress.IPv4Address.is_global` は、アドレスが "
"routeable である場合に ``True`` を返します。 (Contributed by Peter Moody in :"
"issue:`17400`.) (---訳注: リファレンスマニュアルでは routeable という表現では"
"なく「アドレスがパブリックネットワークに割り当てられている場合」。---)"

#: ../../whatsnew/3.4.rst:1073
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.4.rst:1075
msgid ""
"The :class:`~logging.handlers.TimedRotatingFileHandler` has a new *atTime* "
"parameter that can be used to specify the time of day when rollover should "
"happen.  (Contributed by Ronald Oussoren in :issue:`9556`.)"
msgstr ""
":class:`~logging.handlers.TimedRotatingFileHandler` に *atTime* パラメータが"
"追加されました。ロールオーバ対象となる日付での時刻を指定します。 "
"(Contributed by Ronald Oussoren in :issue:`9556`.)"

#: ../../whatsnew/3.4.rst:1079
msgid ""
":class:`~logging.handlers.SocketHandler` and :class:`~logging.handlers."
"DatagramHandler` now support Unix domain sockets (by setting *port* to "
"``None``).  (Contributed by Vinay Sajip in commit ce46195b56a9.)"
msgstr ""
":class:`~logging.handlers.SocketHandler` と :class:`~logging.handlers."
"DatagramHandler` が Unix ドメインソケットをサポートするようになりました "
"(*port* に ``None`` をセットすることで)。 (Contributed by Vinay Sajip in "
"commit `ce46195b56a9 <https://hg.python.org/cpython/rev/ce46195b56a9>`_ .)"

#: ../../whatsnew/3.4.rst:1084
msgid ""
":func:`~logging.config.fileConfig` now accepts a :class:`configparser."
"RawConfigParser` subclass instance for the *fname* parameter.  This "
"facilitates using a configuration file when logging configuration is just a "
"part of the overall application configuration, or where the application "
"modifies the configuration before passing it to :func:`~logging.config."
"fileConfig`.  (Contributed by Vinay Sajip in :issue:`16110`.)"
msgstr ""
":func:`~logging.config.fileConfig` が *fname* パラメータとして :class:"
"`configparser.RawConfigParser` のサブクラスを許容するようになりました。これは"
"ロギングの設定がアプリケーション全体の設定の一部に過ぎない場合や、 :func:"
"`~logging.config.fileConfig` に渡す前にアプリケーションが設定を修正するような"
"場合でも設定ファイルを使用することを容易にします。(Contributed by Vinay "
"Sajip in :issue:`16110`.)"

#: ../../whatsnew/3.4.rst:1092
msgid ""
"Logging configuration data received from a socket via the :func:`logging."
"config.listen` function can now be validated before being processed by "
"supplying a verification function as the argument to the new *verify* "
"keyword argument.  (Contributed by Vinay Sajip in :issue:`15452`.)"
msgstr ""
":func:`logging.config.listen` 関数経由でソケットから受信したロギング設定デー"
"タを、処理前に検証出来るようになりました。新規のキーワード引数 *verify* に検"
"証関数を渡すことで可能です。(Contributed by Vinay Sajip in :issue:`15452`.)"

#: ../../whatsnew/3.4.rst:1101
msgid "marshal"
msgstr "marshal"

#: ../../whatsnew/3.4.rst:1103
msgid ""
"The default :mod:`marshal` version has been bumped to 3.  The code "
"implementing the new version restores the Python2 behavior of recording only "
"one copy of interned strings and preserving the interning on "
"deserialization, and extends this \"one copy\" ability to any object type "
"(including handling recursive references).  This reduces both the size of ``."
"pyc`` files and the amount of memory a module occupies in memory when it is "
"loaded from a ``.pyc`` (or ``.pyo``) file.  (Contributed by Kristján Valur "
"Jónsson in :issue:`16475`, with additional speedups by Antoine Pitrou in :"
"issue:`19219`.)"
msgstr ""
":mod:`marshal` のバージョンが 3 に上げられました。新バージョンを実装している"
"コードは、intern された文字列をただ一つのコピーだけ記録しておきデシリアライズ"
"でその intern を維持するという Python 2 での振舞いを復活させつつ、「ただ一つ"
"のコピー」を文字列型のみならず任意のオブジェクト型に (再帰参照の処理も含め) "
"拡張しています。これは ``.pyc`` ファイルのサイズを削減し、また、 ``.pyc`` (ま"
"たは ``.pyo``) ファイルからロードされる際にモジュールが占めるメモリ量を削減し"
"ます。(Contributed by Kristján Valur Jónsson in :issue:`16475`, with "
"additional speedups by Antoine Pitrou in :issue:`19219`.)"

#: ../../whatsnew/3.4.rst:1114
msgid "mmap"
msgstr "mmap"

#: ../../whatsnew/3.4.rst:1116
msgid ""
"mmap objects are now :ref:`weakly referenceable <mod-weakref>`. (Contributed "
"by Valerie Lambert in :issue:`4885`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1121
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.4.rst:1125
msgid ""
"On Unix two new :ref:`start methods <multiprocessing-start-methods>`, "
"``spawn`` and ``forkserver``, have been added for starting processes using :"
"mod:`multiprocessing`.  These make the mixing of processes with threads more "
"robust, and the ``spawn`` method matches the semantics that multiprocessing "
"has always used on Windows.  New function :func:`~multiprocessing."
"get_all_start_methods` reports all start methods available on the platform, :"
"func:`~multiprocessing.get_start_method` reports the current start method, "
"and :func:`~multiprocessing.set_start_method` sets the start method.  "
"(Contributed by Richard Oudkerk in :issue:`8713`.)"
msgstr ""
":mod:`multiprocessing` を使ってプロセスを開始する :ref:`開始方式 "
"<multiprocessing-start-methods>` として、Unix において 2 つ、 ``spawn`` と "
"``forkserver`` が追加されました。これらはスレッドとプロセスのミックスをより堅"
"牢にし、また、 ``spawn`` は multiprocessing が以前から常に Windows で使ってき"
"たセマンティクスと一致します。新規関数の、 :func:`~multiprocessing."
"get_all_start_methods` はプラットフォームで利用出来るすべての開始方式を報告"
"し、 :func:`~multiprocessing.get_start_method` は現在設定されている開始方式を"
"報告し、 :func:`~multiprocessing.set_start_method` は開始方式を設定します。"
"(Contributed by Richard Oudkerk in :issue:`8713`.)"

#: ../../whatsnew/3.4.rst:1135
msgid ""
":mod:`multiprocessing` also now has the concept of a ``context``, which "
"determines how child processes are created.  New function :func:"
"`~multiprocessing.get_context` returns a context that uses a specified start "
"method.  It has the same API as the :mod:`multiprocessing` module itself, so "
"you can use it to create :class:`~multiprocessing.pool.Pool`\\ s and other "
"objects that will operate within that context.  This allows a framework and "
"an application or different parts of the same application to use "
"multiprocessing without interfering with each other.  (Contributed by "
"Richard Oudkerk in :issue:`18999`.)"
msgstr ""
":mod:`multiprocessing` には、子プロセスがどのように作られるかを決定する "
"``context`` のコンセプトが追加されています。新規関数 :func:`~multiprocessing."
"get_context` は指定した開始方式を使うコンテキストを返します。コンテキストは :"
"mod:`multiprocessing` モジュール自身と同じ API を持っているので、コンテキスト"
"内で操作する :class:`~multiprocessing.pool.Pool` や他のオブジェクトを、それを"
"使って作成することが出来ます。コンテキストによって、フレームワークとアプリ"
"ケーションあるいは同じアプリケーションの別の部分が相互に干渉しあわないように"
"して multiprocessing を使うことが出来ます。(Contributed by Richard Oudkerk "
"in :issue:`18999`.)"

#: ../../whatsnew/3.4.rst:1145
msgid ""
"Except when using the old *fork* start method, child processes no longer "
"inherit unneeded handles/file descriptors from their parents (part of :issue:"
"`8713`)."
msgstr ""
"昔からの *fork* 開始方式を除き、子プロセスはもはや必要のないハンドル・ファイ"
"ル記述子をその親から継承しません。 (part of :issue:`8713`)."

#: ../../whatsnew/3.4.rst:1149
msgid ""
":mod:`multiprocessing` now relies on :mod:`runpy` (which implements the ``-"
"m`` switch) to initialise ``__main__`` appropriately in child processes when "
"using the ``spawn`` or ``forkserver`` start methods. This resolves some edge "
"cases where combining multiprocessing, the ``-m`` command line switch, and "
"explicit relative imports could cause obscure failures in child processes.  "
"(Contributed by Nick Coghlan in :issue:`19946`.)"
msgstr ""
":mod:`multiprocessing` が開始方式に ``spawn`` または ``forkserver`` を使う場"
"合に、子プロセスで適切に ``__main__`` を初期化するために :mod:`runpy` (これ"
"が ``-m`` スイッチを実装しています) に頼るようになりました。これは、 "
"multiprocessing と ``-m`` コマンドラインスイッチ・明示的な相対インポートを組"
"み合わせると子プロセスが不可解に失敗していたような、いくつかの際どい問題を解"
"決します。 (Contributed by Nick Coghlan in :issue:`19946`.)"

#: ../../whatsnew/3.4.rst:1158
msgid "operator"
msgstr "operator"

#: ../../whatsnew/3.4.rst:1160
msgid ""
"New function :func:`~operator.length_hint` provides an implementation of the "
"specification for how the :meth:`~object.__length_hint__` special method "
"should be used, as part of the :pep:`424` formal specification of this "
"language feature.  (Contributed by Armin Ronacher in :issue:`16148`.)"
msgstr ""
"新規関数 :func:`~operator.length_hint` は、言語仕様となった特殊メソッド :"
"meth:`~object.__length_hint__` の :pep:`424` 公式仕様の一環として、それがどの"
"ように使われるのかについて詳述する実装を提供します。(Contributed by Armin "
"Ronacher in :issue:`16148`.)"

#: ../../whatsnew/3.4.rst:1165
msgid ""
"There is now a pure-python version of the :mod:`operator` module available "
"for reference and for use by alternate implementations of Python.  "
"(Contributed by Zachary Ware in :issue:`16694`.)"
msgstr ""
"参照実装として、また Python 実装の代替として用いることが出来る、 :mod:"
"`operator` モジュールのピュア Python 版が書かれました。 (Contributed by "
"Zachary Ware in :issue:`16694`.)"

#: ../../whatsnew/3.4.rst:1171
msgid "os"
msgstr "os"

#: ../../whatsnew/3.4.rst:1173
msgid ""
"There are new functions to get and set the :ref:`inheritable flag "
"<fd_inheritance>` of a file descriptor (:func:`os.get_inheritable`, :func:"
"`os.set_inheritable`) or a Windows handle (:func:`os."
"get_handle_inheritable`, :func:`os.set_handle_inheritable`)."
msgstr ""
"新規関数により :ref:`継承可能フラグ <fd_inheritance>` を制御出来るようになり"
"ました。ファイル記述子には :func:`os.get_inheritable`, :func:`os."
"set_inheritable` を、Windows のハンドルには :func:`os."
"get_handle_inheritable`, :func:`os.set_handle_inheritable` を使います。"

#: ../../whatsnew/3.4.rst:1178
msgid ""
"New function :func:`~os.cpu_count` reports the number of CPUs available on "
"the platform on which Python is running (or ``None`` if the count can't be "
"determined).  The :func:`multiprocessing.cpu_count` function is now "
"implemented in terms of this function).  (Contributed by Trent Nelson, "
"Yogesh Chaudhari, Victor Stinner, and Charles-François Natali in :issue:"
"`17914`.)"
msgstr ""
"関数 :func:`~os.cpu_count` が追加されました。これは Python を実行しているプ"
"ラットフォームで利用可能な CPU 数を返します (決定できない場合は ``None`` を返"
"します)。既存の :func:`multiprocessing.cpu_count` はこの関数の値を返すように"
"なりました。(Contributed by Trent Nelson, Yogesh Chaudhari, Victor Stinner, "
"and Charles-François Natali in :issue:`17914`.)"

#: ../../whatsnew/3.4.rst:1184
msgid ""
":func:`os.path.samestat` is now available on the Windows platform (and the :"
"func:`os.path.samefile` implementation is now shared between Unix and "
"Windows).  (Contributed by Brian Curtin in :issue:`11939`.)"
msgstr ""
":func:`os.path.samestat` が Windows プラットフォームでも動作するようになりま"
"した (また、 :func:`os.path.samefile` の実装は Unix と Windows で共有されまし"
"た)。 (Contributed by Brian Curtin in :issue:`11939`.)"

#: ../../whatsnew/3.4.rst:1188
msgid ""
":func:`os.path.ismount` now recognizes volumes mounted below a drive root on "
"Windows.  (Contributed by Tim Golden in :issue:`9035`.)"
msgstr ""
":func:`os.path.ismount` が Windows において、ドライブルートよりも下にあるマウ"
"ントポイントを認識するようになりました。  (Contributed by Tim Golden in :"
"issue:`9035`.)"

#: ../../whatsnew/3.4.rst:1191
msgid ""
":func:`os.open` supports two new flags on platforms that provide them, :"
"const:`~os.O_PATH` (un-opened file descriptor), and :const:`~os.O_TMPFILE` "
"(unnamed temporary file; as of 3.4.0 release available only on Linux systems "
"with a kernel version of 3.11 or newer that have uapi headers).  "
"(Contributed by Christian Heimes in :issue:`18673` and Benjamin Peterson, "
"respectively.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1199
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.4.rst:1201
msgid ""
":mod:`pdb` has been enhanced to handle generators, :keyword:`yield`, and "
"``yield from`` in a more useful fashion.  This is especially helpful when "
"debugging :mod:`asyncio` based programs.  (Contributed by Andrew Svetlov and "
"Xavier de Gaye in :issue:`16596`.)"
msgstr ""
":mod:`pdb` が、ジェネレータ、 :keyword:`yield` 、 ``yield from`` をより価値あ"
"る方法で処理するように強化されました。これは :mod:`asyncio` ベースのプログラ"
"ムをデバッグする際にとりわけ助けとなります。 (Contributed by Andrew Svetlov "
"and Xavier de Gaye in :issue:`16596`.)"

#: ../../whatsnew/3.4.rst:1206
msgid ""
"The ``print`` command has been removed from :mod:`pdb`, restoring access to "
"the Python :func:`print` function from the pdb command line.  Python2's "
"``pdb`` did not have a ``print`` command; instead, entering ``print`` "
"executed the ``print`` statement.  In Python3 ``print`` was mistakenly made "
"an alias for the pdb :pdbcmd:`p` command.  ``p``, however, prints the "
"``repr`` of its argument, not the ``str`` like the Python2 ``print`` command "
"did.  Worse, the Python3 ``pdb print`` command shadowed the Python3 "
"``print`` function, making it inaccessible at the ``pdb`` prompt.  "
"(Contributed by Connor Osborn in :issue:`18764`.)"
msgstr ""
":mod:`pdb` から ``print`` コマンドは削除され、pdb コマンドラインからの "
"Python :func:`print` 関数へのアクセスを取り戻しました。 Python 2 の ``pdb`` "
"には ``print`` コマンドはなく ``print`` の入力は Python 2 の ``print`` 文を実"
"行していました。 Python 3 で pdb の :pdbcmd:`p` コマンドへのエイリアスとして "
"``print`` を作ったのが間違いでした。 ``p`` はその引数の ``repr`` を表示するの"
"であって、Python 2 での ``print`` コマンドがしていた ``str`` を表示するのでは"
"ありません。さらに悪いことに、Python 3 の ``pdb print`` コマンドは Python 3 "
"の ``print`` 関数を隠してしまい、 ``pdb`` プロンプトからのアクセスを出来なく"
"していたのでした。 (Contributed by Connor Osborn in :issue:`18764`.)"

#: ../../whatsnew/3.4.rst:1220
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.4.rst:1222
msgid ""
":mod:`pickle` now supports (but does not use by default) a new pickle "
"protocol, protocol 4.  This new protocol addresses a number of issues that "
"were present in previous protocols, such as the serialization of nested "
"classes, very large strings and containers, and classes whose :meth:"
"`__new__` method takes keyword-only arguments.  It also provides some "
"efficiency improvements."
msgstr ""
":mod:`pickle` で新 pickle プロトコル 4 が追加されました (デフォルトにはされて"
"いません)。この新プロトコルは、入れ子のクラスや巨大な文字列・コンテナやキー"
"ワード専用引数を取る :meth:`__new__` メソッドを持つクラスなどにまつわるシリア"
"ライズの問題など、以前のプロトコルに存在していた数多くの問題を措置していま"
"す。ほかにもいくつか効率面での改善が入っています。"

#: ../../whatsnew/3.4.rst:1230
msgid ":pep:`3154` -- Pickle protocol 4"
msgstr ":pep:`3154` -- Pickle プロトコル 4"

#: ../../whatsnew/3.4.rst:1231
msgid "PEP written by Antoine Pitrou and implemented by Alexandre Vassalotti."
msgstr "PEP written by Antoine Pitrou and implemented by Alexandre Vassalotti."

#: ../../whatsnew/3.4.rst:1235
msgid "plistlib"
msgstr "plistlib"

#: ../../whatsnew/3.4.rst:1237
msgid ""
":mod:`plistlib` now has an API that is similar to the standard pattern for "
"stdlib serialization protocols, with new :func:`~plistlib.load`, :func:"
"`~plistlib.dump`, :func:`~plistlib.loads`, and :func:`~plistlib.dumps` "
"functions.  (The older API is now deprecated.)  In addition to the already "
"supported XML plist format (:const:`~plistlib.FMT_XML`), it also now "
"supports the binary plist format (:const:`~plistlib.FMT_BINARY`).  "
"(Contributed by Ronald Oussoren and others in :issue:`14455`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1247
msgid "poplib"
msgstr "poplib"

#: ../../whatsnew/3.4.rst:1249
msgid ""
"Two new methods have been added to :mod:`poplib`: :meth:`~poplib.POP3.capa`, "
"which returns the list of capabilities advertised by the POP server, and :"
"meth:`~poplib.POP3.stls`, which switches a clear-text POP3 session into an "
"encrypted POP3 session if the POP server supports it.  (Contributed by "
"Lorenzo Catucci in :issue:`4473`.)"
msgstr ""
":mod:`poplib` に 2 つの新規メソッドが追加されました。 :meth:`~poplib.POP3."
"capa` は POP サーバにより公表された機能リストを返します。 :meth:`~poplib."
"POP3.stls` は平文 POP3 セッションを、POP サーバがサポートしていれば暗号化され"
"た POP3 セッションに切り替えます。 (Contributed by Lorenzo Catucci in :issue:"
"`4473`.)"

#: ../../whatsnew/3.4.rst:1257
msgid "pprint"
msgstr "pprint"

#: ../../whatsnew/3.4.rst:1259
msgid ""
"The :mod:`pprint` module's :class:`~pprint.PrettyPrinter` class and its :"
"func:`~pprint.pformat`, and :func:`~pprint.pprint` functions have a new "
"option, *compact*, that controls how the output is formatted.  Currently "
"setting *compact* to ``True`` means that sequences will be printed with as "
"many sequence elements as will fit within *width* on each (indented) line. "
"(Contributed by Serhiy Storchaka in :issue:`19132`.)"
msgstr ""
":mod:`pprint` モジュールの、 :class:`~pprint.PrettyPrinter` クラス、 :func:"
"`~pprint.pformat` 関数、 :func:`~pprint.pprint` 関数に、新規オプション "
"*compact* が追加されました。これは出力方法を制御するもので、今のところのこれ"
"の ``True`` での振舞いは、個々の (インデントされた) 行を *width* 幅で出来るだ"
"け多くのシーケンスの要素が収まるように出力します。 (Contributed by Serhiy "
"Storchaka in :issue:`19132`.)"

#: ../../whatsnew/3.4.rst:1266
msgid ""
"Long strings are now wrapped using Python's normal line continuation "
"syntax.  (Contributed by Antoine Pitrou in :issue:`17150`.)"
msgstr ""
"長い文字列が Python の普通の行継続構文で折り返されるようになりました。 "
"(Contributed by Antoine Pitrou in :issue:`17150`.)"

#: ../../whatsnew/3.4.rst:1271
msgid "pty"
msgstr "pty"

#: ../../whatsnew/3.4.rst:1273
msgid ""
":func:`pty.spawn` now returns the status value from :func:`os.waitpid` on "
"the child process, instead of ``None``.  (Contributed by Gregory P. Smith.)"
msgstr ""
":func:`pty.spawn` が ``None`` ではなく :func:`os.waitpid` からの戻り値から"
"取ったステータス値を返すようになりました。 (Contributed by Gregory P. Smith.)"

#: ../../whatsnew/3.4.rst:1278
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.4.rst:1280
msgid ""
"The :mod:`pydoc` module is now based directly on the :func:`inspect."
"signature` introspection API, allowing it to provide signature information "
"for a wider variety of callable objects. This change also means that "
"``__wrapped__`` attributes are now taken into account when displaying help "
"information. (Contributed by Larry Hastings in :issue:`19674`.)"
msgstr ""
":mod:`pydoc` モジュールがイントロスペクション API :func:`inspect.signature` "
"に直接基くようになりました。これによりより幅広く callable オブジェクトのシグ"
"ニチャ情報を提供出来るようになりました。この変更は、ヘルプ情報表示の際に "
"``__wrapped__`` 属性も考慮に入れられることも意味しています。(Contributed by "
"Larry Hastings in :issue:`19674`.)"

#: ../../whatsnew/3.4.rst:1286
msgid ""
"The :mod:`pydoc` module no longer displays the ``self`` parameter for "
"already bound methods. Instead, it aims to always display the exact current "
"signature of the supplied callable.  (Contributed by Larry Hastings in :"
"issue:`20710`.)"
msgstr ""
":mod:`pydoc` モジュールはもはや既に束縛済みのメソッドでは ``self`` パラメータ"
"を表示しません。それよりも、与えられた callable の正確な現在のシグニチャを常"
"に表示しようとします。 (Contributed by Larry Hastings in :issue:`20710`.)"

#: ../../whatsnew/3.4.rst:1291
msgid ""
"In addition to the changes that have been made to :mod:`pydoc` directly, its "
"handling of custom ``__dir__`` methods and various descriptor behaviours has "
"also been improved substantially by the underlying changes in the :mod:"
"`inspect` module."
msgstr ""
":mod:`pydoc` に直接なされた変更に加え、背後の :mod:`inspect` モジュールの改善"
"が、カスタム ``__dir__`` メソッドやさまざまなデスクリプタの扱いについての振る"
"舞いの大幅な改善に寄与しました。"

#: ../../whatsnew/3.4.rst:1296
msgid ""
"As the :func:`help` builtin is based on :mod:`pydoc`, the above changes also "
"affect the behaviour of :func:`help`."
msgstr ""
"組み込み :func:`help` は :mod:`pydoc` モジュールに基いているので、上記変更"
"は :func:`help` の振る舞いにも影響します。"

#: ../../whatsnew/3.4.rst:1301
msgid "re"
msgstr "re"

#: ../../whatsnew/3.4.rst:1303
msgid ""
"New :func:`~re.fullmatch` function and :meth:`.regex.fullmatch` method "
"anchor the pattern at both ends of the string to match.  This provides a way "
"to be explicit about the goal of the match, which avoids a class of subtle "
"bugs where ``$`` characters get lost during code changes or the addition of "
"alternatives to an existing regular expression.  (Contributed by Matthew "
"Barnett in :issue:`16203`.)"
msgstr ""
":func:`~re.fullmatch` 関数と :meth:`.regex.fullmatch` メソッドが追加されまし"
"た。これはパターンを合致する文字列の両端に固定します。コード変更や既存の正規"
"表現になにか代わりとなるものを追加したりする際に、末尾に ``$`` を入れ忘れると"
"いった類のバグは気付きにくいものです。これらの関数で、合致すべき終端をはっき"
"り伝えることが出来ます。 (Contributed by Matthew Barnett in :issue:`16203`.)"

#: ../../whatsnew/3.4.rst:1310
msgid ""
"The repr of :ref:`regex objects <re-objects>` now includes the pattern and "
"the flags; the repr of :ref:`match objects <match-objects>` now includes the "
"start, end, and the part of the string that matched.  (Contributed by Hugo "
"Lopes Tavares and Serhiy Storchaka in :issue:`13592` and :issue:`17087`.)"
msgstr ""
":ref:`正規表現オブジェクト <re-objects>` の repr にパターンとフラグを含めるよ"
"うになりました。 :ref:`match オブジェクト <match-objects>` の repr に start、"
"end と合致した部分文字列を含むようになりました。 (Contributed by Hugo Lopes "
"Tavares and Serhiy Storchaka in :issue:`13592` and :issue:`17087`.)"

#: ../../whatsnew/3.4.rst:1318
msgid "resource"
msgstr "resource"

#: ../../whatsnew/3.4.rst:1320
msgid ""
"New :func:`~resource.prlimit` function, available on Linux platforms with a "
"kernel version of 2.6.36 or later and glibc of 2.13 or later, provides the "
"ability to query or set the resource limits for processes other than the one "
"making the call.  (Contributed by Christian Heimes in :issue:`16595`.)"
msgstr ""
"新規関数 :func:`~resource.prlimit` は、指定プロセスのリソースリミットの問い合"
"わせとセットを、一度の呼び出しで行えます。カーネルバージョン 2.6.36 以降で "
"glibc 2.13 以降の Linux プラットフォームで利用可能です。 (Contributed by "
"Christian Heimes in :issue:`16595`.)"

#: ../../whatsnew/3.4.rst:1325
msgid ""
"On Linux kernel version 2.6.36 or later, there are also some new Linux "
"specific constants: :const:`~resource.RLIMIT_MSGQUEUE`, :const:`~resource."
"RLIMIT_NICE`, :const:`~resource.RLIMIT_RTPRIO`, :const:`~resource."
"RLIMIT_RTTIME`, and :const:`~resource.RLIMIT_SIGPENDING`. (Contributed by "
"Christian Heimes in :issue:`19324`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1331
msgid ""
"On FreeBSD version 9 and later, there some new FreeBSD specific constants: :"
"const:`~resource.RLIMIT_SBSIZE`, :const:`~resource.RLIMIT_SWAP`, and :const:"
"`~resource.RLIMIT_NPTS`.  (Contributed by Claudiu Popa in :issue:`19343`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1338
msgid "select"
msgstr "select"

#: ../../whatsnew/3.4.rst:1340
msgid ""
":class:`~select.epoll` objects now support the context management protocol. "
"When used in a :keyword:`with` statement, the :meth:`~select.epoll.close` "
"method will be called automatically at the end of the block.  (Contributed "
"by Serhiy Storchaka in :issue:`16488`.)"
msgstr ""
":class:`~select.epoll` がコンテキスト管理プロトコルをサポートするようになりま"
"した: :keyword:`with` ブロックで使うと  :meth:`~select.epoll.close` メソッド"
"がブロックの終了時に自動的に呼び出されます。 (Contributed by Serhiy "
"Storchaka in :issue:`16488`.)"

#: ../../whatsnew/3.4.rst:1345
msgid ""
":class:`~select.devpoll` objects now have :meth:`~select.devpoll.fileno` "
"and :meth:`~select.devpoll.close` methods, as well as a new attribute :attr:"
"`~select.devpoll.closed`.  (Contributed by Victor Stinner in :issue:`18794`.)"
msgstr ""
":class:`~select.devpoll` オブジェクトに、メソッド :meth:`~select.devpoll."
"fileno` とメソッド :meth:`~select.devpoll.close` 、それに属性 :attr:`~select."
"devpoll.closed` が追加されました。 (Contributed by Victor Stinner in :issue:"
"`18794`.)"

#: ../../whatsnew/3.4.rst:1352
msgid "shelve"
msgstr "shelve"

#: ../../whatsnew/3.4.rst:1354
msgid ""
":class:`~shelve.Shelf` instances may now be used in :keyword:`with` "
"statements, and will be automatically closed at the end of the :keyword:`!"
"with` block. (Contributed by Filip Gruszczyński in :issue:`13896`.)"
msgstr ""
":class:`~shelve.Shelf` がコンテキスト管理プロトコルをサポートするようになりま"
"した: :keyword:`!with` ブロックで使うとブロックの終了時に自動的にクローズされ"
"ます。 (Contributed by Filip Gruszczyński in :issue:`13896`.)"

#: ../../whatsnew/3.4.rst:1360
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.4.rst:1362
msgid ""
":func:`~shutil.copyfile` now raises a specific :exc:`~shutil.Error` "
"subclass, :exc:`~shutil.SameFileError`, when the source and destination are "
"the same file, which allows an application to take appropriate action on "
"this specific error.  (Contributed by Atsuo Ishimoto and Hynek Schlawack in :"
"issue:`1492704`.)"
msgstr ""
":func:`~shutil.copyfile` が、コピー元とコピー先が同じファイルの場合に :exc:"
"`~shutil.Error` の限定されたサブクラスである :exc:`~shutil.SameFileError` を"
"投げるようになりました。これにより、アプリケーションはこの特定のエラーでそれ"
"に相応しいアクションを取れます。 (Contributed by Atsuo Ishimoto and Hynek "
"Schlawack in :issue:`1492704`.)"

#: ../../whatsnew/3.4.rst:1370
msgid "smtpd"
msgstr "smtpd"

#: ../../whatsnew/3.4.rst:1372
msgid ""
"The :class:`!SMTPServer` and :class:`!SMTPChannel` classes now accept a "
"*map* keyword argument which, if specified, is passed in to :class:`!"
"asynchat.async_chat` as its *map* argument.  This allows an application to "
"avoid affecting the global socket map.  (Contributed by Vinay Sajip in :"
"issue:`11959`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1380
msgid "smtplib"
msgstr "smtplib"

#: ../../whatsnew/3.4.rst:1382
msgid ""
":exc:`~smtplib.SMTPException` is now a subclass of :exc:`OSError`, which "
"allows both socket level errors and SMTP protocol level errors to be caught "
"in one try/except statement by code that only cares whether or not an error "
"occurred. (Contributed by Ned Jackson Lovely in :issue:`2118`.)"
msgstr ""
":exc:`~smtplib.SMTPException` が :exc:`OSError` のサブクラスになりました。こ"
"れによって、とにかくエラーが起こったのだということにしか関心がないコードが、"
"ソケット階層でのエラーと SMTP プロトコル階層の両エラーを一撃の try/except 文"
"で捕捉出来るようになりました。 (Contributed by Ned Jackson Lovely in :issue:"
"`2118`.)"

#: ../../whatsnew/3.4.rst:1389
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.4.rst:1391
msgid ""
"The socket module now supports the :const:`~socket.CAN_BCM` protocol on "
"platforms that support it.  (Contributed by Brian Thorne in :issue:`15359`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1394
msgid ""
"Socket objects have new methods to get or set their :ref:`inheritable flag "
"<fd_inheritance>`, :meth:`~socket.socket.get_inheritable` and :meth:`~socket."
"socket.set_inheritable`."
msgstr ""
"ソケットオブジェクトで :ref:`継承可能フラグ <fd_inheritance>` を制御出来るよ"
"うになりました。 :meth:`~socket.socket.get_inheritable` で取得し、 :meth:"
"`~socket.socket.set_inheritable` でセットします。"

#: ../../whatsnew/3.4.rst:1398
msgid ""
"The ``socket.AF_*`` and ``socket.SOCK_*`` constants are now enumeration "
"values using the new :mod:`enum` module.  This allows meaningful names to be "
"printed during debugging, instead of integer \"magic numbers\"."
msgstr ""
"定数値の ``socket.AF_*`` と ``socket.SOCK_*`` が、新規の :mod:`enum` モジュー"
"ルを使った列挙値になりました。つまりデバッグなどで魑魅魍魎な整数ではなく徳高"
"い名前で表示されるということです。"

#: ../../whatsnew/3.4.rst:1402
msgid "The :const:`~socket.AF_LINK` constant is now available on BSD and OSX."
msgstr ""

#: ../../whatsnew/3.4.rst:1404
msgid ""
":func:`~socket.inet_pton` and :func:`~socket.inet_ntop` are now supported on "
"Windows.  (Contributed by Atsuo Ishimoto in :issue:`7171`.)"
msgstr ""
":func:`~socket.inet_pton` と :func:`~socket.inet_ntop` が Windows でサポート"
"されるようになりました。 (Contributed by Atsuo Ishimoto in :issue:`7171`.)"

#: ../../whatsnew/3.4.rst:1409
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.4.rst:1411
msgid ""
"A new boolean parameter to the :func:`~sqlite3.connect` function, *uri*, can "
"be used to indicate that the *database* parameter is a ``uri`` (see the "
"`SQLite URI documentation <https://www.sqlite.org/uri.html>`_).  "
"(Contributed by poq in :issue:`13773`.)"
msgstr ""
":func:`~sqlite3.connect` 関数に新規の真偽値パラメータ *uri* が追加されまし"
"た。これを真にセットすると *database* パラメータを URI として解釈させることが"
"出来ます。 (`SQLite の URI のドキュメント <https://www.sqlite.org/uri."
"html>`_ を参照してください)。 (Contributed by poq in :issue:`13773`.)"

#: ../../whatsnew/3.4.rst:1418
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.4.rst:1422
msgid ""
":data:`~ssl.PROTOCOL_TLSv1_1` and :data:`~ssl.PROTOCOL_TLSv1_2` (TLSv1.1 and "
"TLSv1.2 support) have been added; support for these protocols is only "
"available if Python is linked with OpenSSL 1.0.1 or later.  (Contributed by "
"Michele Orrù and Antoine Pitrou in :issue:`16692`.)"
msgstr ""
":data:`~ssl.PROTOCOL_TLSv1_1` と :data:`~ssl.PROTOCOL_TLSv1_2` (TLSv1.1 と "
"TLSv1.2 のサポート) が追加されました。これらプロトコルのサポートは Python が "
"OpenSSL 1.0.1 以降とリンクしている場合にのみ利用可能です。 (Contributed by "
"Michele Orrù and Antoine Pitrou in :issue:`16692`.)"

#: ../../whatsnew/3.4.rst:1429
msgid ""
"New function :func:`~ssl.create_default_context` provides a standard way to "
"obtain an :class:`~ssl.SSLContext` whose settings are intended to be a "
"reasonable balance between compatibility and security.  These settings are "
"more stringent than the defaults provided by the :class:`~ssl.SSLContext` "
"constructor, and may be adjusted in the future, without prior deprecation, "
"if best-practice security requirements change.  The new recommended best "
"practice for using stdlib libraries that support SSL is to use :func:`~ssl."
"create_default_context` to obtain an :class:`~ssl.SSLContext` object, modify "
"it if needed, and then pass it as the *context* argument of the appropriate "
"stdlib API.  (Contributed by Christian Heimes in :issue:`19689`.)"
msgstr ""
"新規関数 :func:`~ssl.create_default_context` は、互換性とセキュリティの間の程"
"よいバランスとなるよう調整された :class:`~ssl.SSLContext` を得るための標準手"
"段として追加されました。それらの設定は :class:`~ssl.SSLContext` コンストラク"
"タが与えるデフォルトよりも厳しく、そして将来的にセキュリティにおけるベストプ"
"ラクティスによる要請が変化すれば、事前予告なしで調整されるかもしれません。"
"SSL をサポートする標準ライブラリの使用においての新しいベストプラクティスとし"
"て、 :class:`~ssl.SSLContext` を得るのには :func:`~ssl."
"create_default_context` を使うことが推奨です。必要に応じ、対応する標準ライブ"
"ラリ API の *context* 引数に渡すためにそれを使うよう修正してください。"
"(Contributed by Christian Heimes in :issue:`19689`.)"

#: ../../whatsnew/3.4.rst:1441
msgid ""
":class:`~ssl.SSLContext` method :meth:`~ssl.SSLContext."
"load_verify_locations` accepts a new optional argument *cadata*, which can "
"be used to provide PEM or DER encoded certificates directly via strings or "
"bytes, respectively. (Contributed by Christian Heimes in :issue:`18138`.)"
msgstr ""
":class:`~ssl.SSLContext` のメソッド :meth:`~ssl.SSLContext."
"load_verify_locations` にオプショナル引数 *cadata* が追加されました。これに"
"は PEM あるいは DER エンコードの証明書を直接指定できます。前者の場合は文字列"
"で、後者では :term:`bytes-like object` で指定します。(Contributed by "
"Christian Heimes in :issue:`18138`.)"

#: ../../whatsnew/3.4.rst:1446
msgid ""
"New function :func:`~ssl.get_default_verify_paths` returns a named tuple of "
"the paths and environment variables that the :meth:`~ssl.SSLContext."
"set_default_verify_paths` method uses to set OpenSSL's default ``cafile`` "
"and ``capath``.  This can be an aid in debugging default verification "
"issues.  (Contributed by Christian Heimes in :issue:`18143`.)"
msgstr ""
"関数 :func:`~ssl.get_default_verify_paths` が追加されました。これは :meth:"
"`~ssl.SSLContext.set_default_verify_paths` メソッドが OpenSSL デフォルトの "
"``cafile`` と ``capath`` をセットするのに使うパスと環境変数から成る名前付きタ"
"プルを返します。デフォルトの検証にまつわる問題をデバッグするのに使えるでしょ"
"う。(Contributed by Christian Heimes in :issue:`18143`.)"

#: ../../whatsnew/3.4.rst:1453
msgid ""
":class:`~ssl.SSLContext` has a new method, :meth:`~ssl.SSLContext."
"cert_store_stats`, that reports the number of loaded ``X.509`` certs, "
"``X.509 CA`` certs, and certificate revocation lists (``crl``\\ s), as well "
"as a :meth:`~ssl.SSLContext.get_ca_certs` method that returns a list of the "
"loaded ``CA`` certificates.  (Contributed by Christian Heimes in :issue:"
"`18147`.)"
msgstr ""
":class:`~ssl.SSLContext` の新規メソッド :meth:`~ssl.SSLContext."
"cert_store_stats` はロードされた ``X.509`` 証明書、 ``X.509 CA`` 証明書、証明"
"書失効リスト (``crl``) を報告し、また、新規メソッド :meth:`~ssl.SSLContext."
"get_ca_certs` はロードされた ``CA`` 証明書のリストを返します。(Contributed "
"by Christian Heimes in :issue:`18147`.)"

#: ../../whatsnew/3.4.rst:1460
msgid ""
"If OpenSSL 0.9.8 or later is available, :class:`~ssl.SSLContext` has a new "
"attribute :attr:`~ssl.SSLContext.verify_flags` that can be used to control "
"the certificate verification process by setting it to some combination of "
"the new constants :const:`~ssl.VERIFY_DEFAULT`, :const:`~ssl."
"VERIFY_CRL_CHECK_LEAF`, :const:`~ssl.VERIFY_CRL_CHECK_CHAIN`, or :const:"
"`~ssl.VERIFY_X509_STRICT`. OpenSSL does not do any CRL verification by "
"default.  (Contributed by Christien Heimes in :issue:`8813`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1468
msgid ""
"New :class:`~ssl.SSLContext` method :meth:`~ssl.SSLContext."
"load_default_certs` loads a set of default \"certificate authority\" (CA) "
"certificates from default locations, which vary according to the platform.  "
"It can be used to load both TLS web server authentication certificates "
"(``purpose=``:data:`~ssl.Purpose.SERVER_AUTH`) for a client to use to verify "
"a server, and certificates for a server to use in verifying client "
"certificates (``purpose=``:data:`~ssl.Purpose.CLIENT_AUTH`).  (Contributed "
"by Christian Heimes in :issue:`19292`.)"
msgstr ""
":class:`~ssl.SSLContext` の新規メソッド :meth:`~ssl.SSLContext."
"load_default_certs` は、プラットフォームによって異なるデフォルトの場所から "
"“認証局” (CA=certification authority) 証明書ファイル一式をロードします。クラ"
"イアントがサーバを検証するための TLS web サーバ証明の証明書をロード "
"(``purpose=``:data:`~ssl.Purpose.SERVER_AUTH`) することも、サーバがクライアン"
"ト証明書を検証するのに用いる証明書をロード (``purpose=``:data:`~ssl.Purpose."
"CLIENT_AUTH`) することも出来ます。(Contributed by Christian Heimes in :issue:"
"`19292`.)"

#: ../../whatsnew/3.4.rst:1479
msgid ""
"Two new windows-only functions, :func:`~ssl.enum_certificates` and :func:"
"`~ssl.enum_crls` provide the ability to retrieve certificates, certificate "
"information, and CRLs from the Windows cert store.  (Contributed by "
"Christian Heimes in :issue:`17134`.)"
msgstr ""
"Windows だけで利用出来る関数が 2 つ追加されました。 :func:`~ssl."
"enum_certificates` と :func:`~ssl.enum_crls` で Windows のシステム証明書スト"
"アから、証明書、証明書の情報、CRLs (certification revocation=証明書失効リス"
"ト) を抽出出来ます。(Contributed by Christian Heimes in :issue:`17134`.)"

#: ../../whatsnew/3.4.rst:1486
msgid ""
"Support for server-side SNI (Server Name Indication) using the new :meth:"
"`ssl.SSLContext.set_servername_callback` method. (Contributed by Daniel "
"Black in :issue:`8109`.)"
msgstr ""
"新規メソッド :meth:`ssl.SSLContext.set_servername_callback` によるサーバサイ"
"ド SNI (Server Name Indication) サポートが追加されました。 (Contributed by "
"Daniel Black in :issue:`8109`.)"

#: ../../whatsnew/3.4.rst:1490
msgid ""
"The dictionary returned by :meth:`.SSLSocket.getpeercert` contains "
"additional ``X509v3`` extension items: ``crlDistributionPoints``, "
"``calIssuers``, and ``OCSP`` URIs.  (Contributed by Christian Heimes in :"
"issue:`18379`.)"
msgstr ""
":meth:`.SSLSocket.getpeercert` が返す辞書に ``X509v3`` 拡張アイテムを含むよう"
"になりました: ``crlDistributionPoints``, ``caIssuers``, ``OCSP`` URI。 "
"(Contributed by Christian Heimes in :issue:`18379`.)"

#: ../../whatsnew/3.4.rst:1496
msgid "stat"
msgstr "stat"

#: ../../whatsnew/3.4.rst:1498
msgid ""
"The :mod:`stat` module is now backed by a C implementation in :mod:`!_stat`. "
"A C implementation is required as most of the values aren't standardized and "
"are platform-dependent.  (Contributed by Christian Heimes in :issue:`11016`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1502
msgid ""
"The module supports new :mod:`~stat.ST_MODE` flags, :mod:`~stat.S_IFDOOR`, :"
"const:`~stat.S_IFPORT`, and :const:`~stat.S_IFWHT`.  (Contributed by "
"Christian Hiemes in :issue:`11016`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1508
msgid "struct"
msgstr "struct"

#: ../../whatsnew/3.4.rst:1510
msgid ""
"New function :mod:`~struct.iter_unpack` and a new :meth:`struct.Struct."
"iter_unpack` method on compiled formats provide streamed unpacking of a "
"buffer containing repeated instances of a given format of data. (Contributed "
"by Antoine Pitrou in :issue:`17804`.)"
msgstr ""
"関数 :mod:`~struct.iter_unpack` と、コンパイル済フォーマットでのメソッド :"
"meth:`struct.Struct.iter_unpack` が追加されました。これは、与えられたデータ"
"フォーマットの繰り返しインスタンスを含むバッファを逐次的にアンパックします。 "
"(Contributed by Antoine Pitrou in :issue:`17804`.)"

#: ../../whatsnew/3.4.rst:1517
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.4.rst:1519
msgid ""
":func:`~subprocess.check_output` now accepts an *input* argument that can be "
"used to provide the contents of ``stdin`` for the command that is run. "
"(Contributed by Zack Weinberg in :issue:`16624`.)"
msgstr ""
":func:`~subprocess.check_output` が *input* 引数を受け付けるようになりまし"
"た。これは実行するコマンドにとっての ``stdin`` を供給するのに使われます (訳"
"注: :func:`~subprocess.run` のドキュメント参照)。 (Contributed by Zack "
"Weinberg in :issue:`16624`.)"

#: ../../whatsnew/3.4.rst:1523
msgid ""
":func:`~subprocess.getstatus` and :func:`~subprocess.getstatusoutput` now "
"work on Windows.  This change was actually inadvertently made in 3.3.4. "
"(Contributed by Tim Golden in :issue:`10197`.)"
msgstr ""
":func:`~subprocess.getstatus` と :func:`~subprocess.getstatusoutput` が "
"Windows でも動作するようになりました。ただしこの変更は実際には、不注意で "
"3.3.4 に対して既に行われました。 (Contributed by Tim Golden in :issue:"
"`10197`.)"

#: ../../whatsnew/3.4.rst:1529
msgid "sunau"
msgstr "sunau"

#: ../../whatsnew/3.4.rst:1531
msgid ""
"The :meth:`!getparams` method now returns a namedtuple rather than a plain "
"tuple.  (Contributed by Claudiu Popa in :issue:`18901`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1534
msgid ""
":meth:`!sunau.open` now supports the context management protocol: when used "
"in a :keyword:`with` block, the ``close`` method of the returned object will "
"be called automatically at the end of the block.  (Contributed by Serhiy "
"Storchaka in :issue:`18878`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1539
msgid ""
":meth:`.AU_write.setsampwidth` now supports 24 bit samples, thus adding "
"support for writing 24 sample using the module.  (Contributed by Serhiy "
"Storchaka in :issue:`19261`.)"
msgstr ""
"24 ビットサンプルの出力をサポートしました。つまり :meth:`.AU_write."
"setsampwidth` に 24 ビットに対応する値をセット出来ます。 (Contributed by "
"Serhiy Storchaka in :issue:`19261`.)"

#: ../../whatsnew/3.4.rst:1549
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.4.rst:1551
msgid ""
"New function :func:`sys.getallocatedblocks` returns the current number of "
"blocks allocated by the interpreter.  (In CPython with the default ``--with-"
"pymalloc`` setting, this is allocations made through the :c:func:"
"`PyObject_Malloc` API.)  This can be useful for tracking memory leaks, "
"especially if automated via a test suite.  (Contributed by Antoine Pitrou "
"in :issue:`13390`.)"
msgstr ""
"新規関数 :func:`sys.getallocatedblocks` は、現在インタプリタによりアロケート"
"されているブロック数を返します (デフォルトの ``--with-pymalloc`` 設定での "
"CPython では、これは :c:func:`PyObject_Malloc` API によるアロケーションで"
"す)。これはメモリリークの追跡に、とりわけテストスイートで自動化されている場合"
"はなおさら有用です。 (Contributed by Antoine Pitrou in :issue:`13390`.)"

#: ../../whatsnew/3.4.rst:1558
msgid ""
"When the Python interpreter starts in :ref:`interactive mode <tut-"
"interactive>`, it checks for an :data:`~sys.__interactivehook__` attribute "
"on the :mod:`sys` module.  If the attribute exists, its value is called with "
"no arguments just before interactive mode is started.  The check is made "
"after the :envvar:`PYTHONSTARTUP` file is read, so it can be set there.  "
"The :mod:`site` module :ref:`sets it <rlcompleter-config>` to a function "
"that enables tab completion and history saving (in :file:`~/.python-"
"history`) if the platform supports :mod:`readline`.  If you do not want this "
"(new) behavior, you can override it in :envvar:`PYTHONSTARTUP`, :mod:"
"`sitecustomize`, or :mod:`usercustomize` by deleting this attribute from :"
"mod:`sys` (or setting it to some other callable).  (Contributed by Éric "
"Araujo and Antoine Pitrou in :issue:`5845`.)"
msgstr ""
"Python インタプリタが :ref:`tut-interactive` で開始する際に :mod:`sys` モ"
"ジュールの属性 :data:`~sys.__interactivehook__` をチェックするようになりまし"
"た。この属性があると、対話モード開始直前にその設定値が引数なしで呼び出されま"
"す。このチェックは :envvar:`PYTHONSTARTUP` ファイルが読み込まれたあとで行われ"
"るので、そのファイル内でセット出来ます。 :mod:`site` モジュールは :mod:"
"`readline` をサポートするプラットフォームではタブ補完と (:file:`~/.python-"
"history` への) 履歴保存を有効にする関数を :ref:`__interactivehook__ にセット"
"します <rlcompleter-config>` 。この (新たな) 振る舞いがお気に召さなければ、 :"
"envvar:`PYTHONSTARTUP`, :mod:`sitecustomize`, :mod:`usercustomize` のいずれか"
"で :mod:`sys` からこの属性を削除 (あるいはほかのなにか callable をセット) し"
"てください。 (Contributed by Éric Araujo and Antoine Pitrou in :issue:"
"`5845`.)"

#: ../../whatsnew/3.4.rst:1573
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.4.rst:1575
msgid ""
"The :mod:`tarfile` module now supports a simple :ref:`tarfile-commandline` "
"when called as a script directly or via ``-m``.  This can be used to create "
"and extract tarfile archives.  (Contributed by Berker Peksag in :issue:"
"`13477`.)"
msgstr ""
":mod:`tarfile` モジュールはスクリプトや直接 ``-m`` で呼ばれた場合、簡単な :"
"ref:`tarfile-commandline` をサポートするようになりました。\n"
"これにより tar ファイルアーカイブの作成や解凍が可能です。\n"
"(Contributed by Berker Peksag in :issue:`13477`.)"

#: ../../whatsnew/3.4.rst:1581
msgid "textwrap"
msgstr "textwrap"

#: ../../whatsnew/3.4.rst:1583
msgid ""
"The :class:`~textwrap.TextWrapper` class has two new attributes/constructor "
"arguments: :attr:`~textwrap.TextWrapper.max_lines`, which limits the number "
"of lines in the output, and :attr:`~textwrap.TextWrapper.placeholder`, which "
"is a string that will appear at the end of the output if it has been "
"truncated because of *max_lines*.  Building on these capabilities, a new "
"convenience function :func:`~textwrap.shorten` collapses all of the "
"whitespace in the input to single spaces and produces a single line of a "
"given *width* that ends with the *placeholder* (by default, ``[...]``).  "
"(Contributed by Antoine Pitrou and Serhiy Storchaka in :issue:`18585` and :"
"issue:`18725`.)"
msgstr ""
":class:`~textwrap.TextWrapper` に 2 つ新しい制御変数が追加されていて、これら"
"は属性値であり、コンストラクタ引数に渡せます。それぞれ :attr:`~textwrap."
"TextWrapper.max_lines` が最大出力行数、 :attr:`~textwrap.TextWrapper."
"placeholder` が *max_lines* により切り詰める場合に出力の最終行に置くテキスト"
"です。これら機能を使った新規のコンビニエンス関数 :func:`~textwrap.shorten` が"
"追加されています。これは入力に含まれる全ての空白文字を単一の空白に置き換え、"
"また幅 *width* に収めて、切り詰める場合は末尾を *placeholder* (デフォルトで "
"``[...]``) で置き換えて、単一行で返します。(Contributed by Antoine Pitrou "
"and Serhiy Storchaka in :issue:`18585` and :issue:`18725`.)"

#: ../../whatsnew/3.4.rst:1595
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.4.rst:1597
msgid ""
"The :class:`~threading.Thread` object representing the main thread can be "
"obtained from the new :func:`~threading.main_thread` function.  In normal "
"conditions this will be the thread from which the Python interpreter was "
"started.  (Contributed by Andrew Svetlov in :issue:`18882`.)"
msgstr ""
"メインスレッドを表現する :class:`~threading.Thread` オブジェクトを、新規関"
"数 :func:`~threading.main_thread` で得られるようになりました。通常の条件であ"
"ればこれは Python インタプリタを開始したスレッドになります。 (Contributed by "
"Andrew Svetlov in :issue:`18882`.)"

#: ../../whatsnew/3.4.rst:1604
msgid "traceback"
msgstr "traceback"

#: ../../whatsnew/3.4.rst:1606
msgid ""
"A new :func:`traceback.clear_frames` function takes a traceback object and "
"clears the local variables in all of the frames it references, reducing the "
"amount of memory consumed.  (Contributed by Andrew Kuchling in :issue:"
"`1565525`.)"
msgstr ""
"新規関数 :func:`traceback.clear_frames` は、トレースバックオブジェクトを受け"
"取って、それが参照している全てのフレーム内のローカル変数をクリアすることで、"
"メモリ消費量を削減します。 (Contributed by Andrew Kuchling in :issue:"
"`1565525`.)"

#: ../../whatsnew/3.4.rst:1613
msgid "types"
msgstr "types"

#: ../../whatsnew/3.4.rst:1615
msgid ""
"A new :func:`~types.DynamicClassAttribute` descriptor provides a way to "
"define an attribute that acts normally when looked up through an instance "
"object, but which is routed to the *class* ``__getattr__`` when looked up "
"through the class.  This allows one to have properties active on a class, "
"and have virtual attributes on the class with the same name (see :mod:`Enum` "
"for an example). (Contributed by Ethan Furman in :issue:`19030`.)"
msgstr ""
"新規デスクリプタ :func:`~types.DynamicClassAttribute` は、そのアクセスがイン"
"スタンスからの場合には普通に振舞いつつクラスからのアクセスでは *クラス* の "
"__getattr__ メソッドに振り向ける属性、これを定義する手段を提供します。このこ"
"とにより、インスタンス上ではアクティブなプロパティを持ち、クラス上では同名の"
"仮想的属性を持つ、といったことが出来ます (:class:`~enum.Enum` がこれの実例に"
"なっています)。 (Contributed by Ethan Furman in :issue:`19030`.)"

#: ../../whatsnew/3.4.rst:1624
msgid "urllib"
msgstr "urllib"

#: ../../whatsnew/3.4.rst:1626
msgid ""
":mod:`urllib.request` now supports ``data:`` URLs via the :class:`~urllib."
"request.DataHandler` class.  (Contributed by Mathias Panzenböck in :issue:"
"`16423`.)"
msgstr ""
":mod:`urllib.request` が新規クラス :class:`~urllib.request.DataHandler` を介"
"して ``data:`` URL をサポートするようになりました。 (Contributed by Mathias "
"Panzenböck in :issue:`16423`.)"

#: ../../whatsnew/3.4.rst:1630
msgid ""
"The http method that will be used by a :class:`~urllib.request.Request` "
"class can now be specified by setting a :class:`~urllib.request.Request."
"method` class attribute on the subclass.  (Contributed by Jason R Coombs in :"
"issue:`18978`.)"
msgstr ""
":class:`~urllib.request.Request` クラスで使われる HTTP メソッドを、サブクラス"
"で :class:`~urllib.request.Request.method` 属性をセットすることにより指定出来"
"るようになりました。 (Contributed by Jason R Coombs in :issue:`18978`.) (---"
"訳注: :class:`~urllib.request.Request.method` は 3.3 で追加されたが、コンスト"
"ラクタに渡されたものが設定されるだけだった。---)"

#: ../../whatsnew/3.4.rst:1635
msgid ""
":class:`~urllib.request.Request` objects are now reusable: if the :attr:"
"`~urllib.request.Request.full_url` or :attr:`~urllib.request.Request.data` "
"attributes are modified, all relevant internal properties are updated.  This "
"means, for example, that it is now possible to use the same :class:`~urllib."
"request.Request` object in more than one :meth:`.OpenerDirector.open` call "
"with different *data* arguments, or to modify a :class:`~urllib.request."
"Request`\\ 's ``url`` rather than recomputing it from scratch.  There is "
"also a new :meth:`~urllib.request.Request.remove_header` method that can be "
"used to remove headers from a :class:`~urllib.request.Request`.  "
"(Contributed by Alexey Kachayev in :issue:`16464`, Daniel Wozniak in :issue:"
"`17485`, and Damien Brecht and Senthil Kumaran in :issue:`17272`.)"
msgstr ""
":class:`~urllib.request.Request` オブジェクトは今では再利用可能です: :attr:"
"`~urllib.request.Request.full_url` あるいは :attr:`~urllib.request.Request."
"data` 属性などが変更されると、関連する全ての内部プロパティが更新されます。こ"
"のことによって今や、例えば、 :class:`~urllib.request.Request` オブジェクト"
"を、異なる *data* 引数での :meth:`.OpenerDirector.open` の複数回呼び出し内で"
"使ったり、あるいは、まっさらから作り直すのではなく :class:`~urllib.request."
"Request` の ``url`` を書き換えて使ったり出来ます。新たに :meth:`~urllib."
"request.Request.remove_header` メソッドも追加されていて、これは :class:"
"`~urllib.request.Request` からヘッダを取り除きます。 (Contributed by Alexey "
"Kachayev in :issue:`16464`, Daniel Wozniak in :issue:`17485`, and Damien "
"Brecht and Senthil Kumaran in :issue:`17272`.)"

#: ../../whatsnew/3.4.rst:1648
msgid ""
":class:`~urllib.error.HTTPError` objects now have a :attr:`~urllib.error."
"HTTPError.headers` attribute that provides access to the HTTP response "
"headers associated with the error.  (Contributed by Berker Peksag in :issue:"
"`15701`.)"
msgstr ""
":class:`~urllib.error.HTTPError` オブジェクトに、エラーに関係する HTTP レスポ"
"ンスヘッダへのアクセスを提供する :attr:`~urllib.error.HTTPError.headers` 属性"
"が追加されました。 (Contributed by Berker Peksag in :issue:`15701`.)"

#: ../../whatsnew/3.4.rst:1655
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.4.rst:1657
msgid ""
"The :class:`~unittest.TestCase` class has a new method, :meth:`~unittest."
"TestCase.subTest`, that produces a context manager whose :keyword:`with` "
"block becomes a \"sub-test\".  This context manager allows a test method to "
"dynamically generate subtests  by, say, calling the ``subTest`` context "
"manager inside a loop.  A single test method can thereby produce an "
"indefinite number of separately identified and separately counted tests, all "
"of which will run even if one or more of them fail.  For example::"
msgstr ""

#: ../../whatsnew/3.4.rst:1665
msgid ""
"class NumbersTest(unittest.TestCase):\n"
"    def test_even(self):\n"
"        for i in range(6):\n"
"            with self.subTest(i=i):\n"
"                self.assertEqual(i % 2, 0)"
msgstr ""

#: ../../whatsnew/3.4.rst:1671
msgid ""
"will result in six subtests, each identified in the unittest verbose output "
"with a label consisting of the variable name ``i`` and a particular value "
"for that variable (``i=0``, ``i=1``, etc).  See :ref:`subtests` for the full "
"version of this example.  (Contributed by Antoine Pitrou in :issue:`16997`.)"
msgstr ""
"これは 6 つのサブテストとなり、それぞれは unittest 内の冗長出力において、変数"
"名 ``i`` とその変数への個々の値 (``i=0``, ``i=1``, など) からなるラベルで識別"
"されます。この例の完全なバージョンが :ref:`subtests` にあります。 "
"(Contributed by Antoine Pitrou in :issue:`16997`.)"

#: ../../whatsnew/3.4.rst:1676
msgid ""
":func:`unittest.main` now accepts an iterable of test names for "
"*defaultTest*, where previously it only accepted a single test name as a "
"string.  (Contributed by Jyrki Pulliainen in :issue:`15132`.)"
msgstr ""
":func:`unittest.main` の *defaultTest* に、テスト名からなるイテラブルを渡せる"
"ようになりました。以前は文字列で単一のテスト名を渡せるだけでした。 "
"(Contributed by Jyrki Pulliainen in :issue:`15132`.)"

#: ../../whatsnew/3.4.rst:1680
msgid ""
"If :class:`~unittest.SkipTest` is raised during test discovery (that is, at "
"the module level in the test file), it is now reported as a skip instead of "
"an error.  (Contributed by Zach Ware in :issue:`16935`.)"
msgstr ""
"テストディスカバリ最中に発生する :class:`~unittest.SkipTest` (これはテスト"
"ファイル内のモジュールレベルで起こせます) を、エラーとしてではなくスキップと"
"して報告するようになりました。 (Contributed by Zach Ware in :issue:`16935`.)"

#: ../../whatsnew/3.4.rst:1684
msgid ""
":meth:`~unittest.TestLoader.discover` now sorts the discovered files to "
"provide consistent test ordering.  (Contributed by Martin Melin and Jeff "
"Ramnani in :issue:`16709`.)"
msgstr ""
":meth:`~unittest.TestLoader.discover` が発見したファイルをソートするように"
"なったので、一貫したテスト順でテスト出来ます。  (Contributed by Martin Melin "
"and Jeff Ramnani in :issue:`16709`.)"

#: ../../whatsnew/3.4.rst:1688
msgid ""
":class:`~unittest.TestSuite` now drops references to tests as soon as the "
"test has been run, if the test is successful.  On Python interpreters that "
"do garbage collection, this allows the tests to be garbage collected if "
"nothing else is holding a reference to the test.  It is possible to override "
"this behavior by creating a :class:`~unittest.TestSuite` subclass that "
"defines a custom ``_removeTestAtIndex`` method.  (Contributed by Tom "
"Wardill, Matt McClure, and Andrew Svetlov in :issue:`11798`.)"
msgstr ""
":class:`~unittest.TestSuite` がその実行完了次第すぐに、テスト成功していれば、"
"テストへの参照を取り除くようになりました。ガーベージコレクションを行う "
"Python インタプリタ上ではこの振る舞いによって、テストへの参照を保持しているも"
"のが他にない場合のテストのガーベージコレクトを可能にします。この振る舞いは :"
"mod:`~unittest.TestSuite` をサブクラス化して何もしない "
"``_removeTestAtIndex`` を定義することで上書き出来ます。 (Contributed by Tom "
"Wardill, Matt McClure, and Andrew Svetlov in :issue:`11798`.)"

#: ../../whatsnew/3.4.rst:1696
msgid ""
"A new test assertion context-manager, :meth:`~unittest.TestCase.assertLogs`, "
"will ensure that a given block of code emits a log message using the :mod:"
"`logging` module.  By default the message can come from any logger and have "
"a priority of ``INFO`` or higher, but both the logger name and an "
"alternative minimum logging level may be specified.  The object returned by "
"the context manager can be queried for the :class:`~logging.LogRecord`\\ s "
"and/or formatted messages that were logged.  (Contributed by Antoine Pitrou "
"in :issue:`18937`.)"
msgstr ""
"テストアサーションの新規コンテキストマネージャ :meth:`~unittest.TestCase."
"assertLogs` が追加されました。これはコードブロックが :mod:`logging` を使って"
"ログメッセージを発行しているか確認します。デフォルトでは任意のロガーからの "
"``INFO`` 以上のプライオリティを持つメッセージを取れますが、ロガー名と最小プラ"
"イオリティの両方とも指定可能です。コンテキストマネージャからの戻りオブジェク"
"トに対して、ログされた :class:`~logging.LogRecord` とフォーマットされたメッ"
"セージの両方あるいはどちらかを問い合わせることが出来ます。 (Contributed by "
"Antoine Pitrou in :issue:`18937`.)"

#: ../../whatsnew/3.4.rst:1705
msgid ""
"Test discovery now works with namespace packages (Contributed by Claudiu "
"Popa in :issue:`17457`.)"
msgstr ""
"テストディスカバリが名前空間パッケージで動作するようになりました。 "
"(Contributed by Claudiu Popa in :issue:`17457`.)"

#: ../../whatsnew/3.4.rst:1708
msgid ""
":mod:`unittest.mock` objects now inspect their specification signatures when "
"matching calls, which means an argument can now be matched by either "
"position or name, instead of only by position.  (Contributed by Antoine "
"Pitrou in :issue:`17015`.)"
msgstr ""
":mod:`unittest.mock` オブジェクトが、呼び出しが合致する際に仕様としてのシグニ"
"チャを検査するようになりました。これはつまり、以前は位置引数だけの合致だった"
"ものが、位置引数と名前の両方で合致できるようになったということです。"
"(Contributed by Antoine Pitrou in :issue:`17015`.)"

#: ../../whatsnew/3.4.rst:1713
msgid ""
":func:`~mock.mock_open` objects now have ``readline`` and ``readlines`` "
"methods.  (Contributed by Toshio Kuratomi in :issue:`17467`.)"
msgstr ""
":func:`~mock.mock_open` オブジェクトに ``readline`` メソッドと ``readlines`` "
"メソッドが追加されました。  (Contributed by Toshio Kuratomi in :issue:"
"`17467`.)"

#: ../../whatsnew/3.4.rst:1718
msgid "venv"
msgstr "venv"

#: ../../whatsnew/3.4.rst:1720
msgid ""
":mod:`venv` now includes activation scripts for the ``csh`` and ``fish`` "
"shells.  (Contributed by Andrew Svetlov in :issue:`15417`.)"
msgstr ""
":mod:`venv` に ``csh`` と ``fish`` シェルの有効化スクリプトが追加されまし"
"た。 (Contributed by Andrew Svetlov in :issue:`15417`.)"

#: ../../whatsnew/3.4.rst:1723
msgid ""
":class:`~venv.EnvBuilder` and the :func:`~venv.create` convenience function "
"take a new keyword argument *with_pip*, which defaults to ``False``, that "
"controls whether or not :class:`~venv.EnvBuilder` ensures that ``pip`` is "
"installed in the virtual environment.  (Contributed by Nick Coghlan in :"
"issue:`19552` as part of the :pep:`453` implementation.)"
msgstr ""
":class:`~venv.EnvBuilder` クラスとコンビニエンス関数 :func:`~venv.create` が"
"新規キーワード引数 *with_pip* を取るようになりました。デフォルトは ``False`` "
"です。これは :class:`~venv.EnvBuilder` が仮想環境に ``pip`` がインストールさ"
"れていることを保証するかどうかを制御します。(Contributed by Nick Coghlan in :"
"issue:`19552` as part of the :pep:`453` implementation.)"

#: ../../whatsnew/3.4.rst:1731
msgid "wave"
msgstr "wave"

#: ../../whatsnew/3.4.rst:1733
msgid ""
"The :meth:`~wave.getparams` method now returns a namedtuple rather than a "
"plain tuple.  (Contributed by Claudiu Popa in :issue:`17487`.)"
msgstr ""
":meth:`~wave.getparams` メソッドがプレインなタプルではなく :class:"
"`~collections.namedtuple` を返すようになりました。 (Contributed by Claudiu "
"Popa in :issue:`17487`.)"

#: ../../whatsnew/3.4.rst:1736
msgid ""
":meth:`wave.open` now supports the context management protocol.  "
"(Contributed by Claudiu Popa in :issue:`17616`.)"
msgstr ""
":func:`wave.open` がコンテキスト管理プロトコルをサポートするようになりまし"
"た。 (Contributed by Claudiu Popa in :issue:`17616`.)"

#: ../../whatsnew/3.4.rst:1739
msgid ""
":mod:`wave` can now :ref:`write output to unseekable files <wave-write-"
"objects>`.  (Contributed by David Jones, Guilherme Polo, and Serhiy "
"Storchaka in :issue:`5202`.)"
msgstr ""
":mod:`wave` は :ref:`シーク不能なファイルへの書き出しが出来るように <wave-"
"write-objects>` なりました。 (Contributed by David Jones, Guilherme Polo, "
"and Serhiy Storchaka in :issue:`5202`.)"

#: ../../whatsnew/3.4.rst:1743
msgid ""
"The :meth:`~wave.Wave_write.writeframesraw` and :meth:`~wave.Wave_write."
"writeframes` methods now accept any :term:`bytes-like object`.  (Contributed "
"by Serhiy Storchaka in :issue:`8311`.)"
msgstr ""
":meth:`~wave.Wave_write.writeframesraw` メソッドと :meth:`~wave.Wave_write."
"writeframes` メソッドが :term:`bytes-like object` を受け付けるようになりまし"
"た。 (Contributed by Serhiy Storchaka in :issue:`8311`.)"

#: ../../whatsnew/3.4.rst:1749
msgid "weakref"
msgstr "weakref"

#: ../../whatsnew/3.4.rst:1751
msgid ""
"New :class:`~weakref.WeakMethod` class simulates weak references to bound "
"methods.  (Contributed by Antoine Pitrou in :issue:`14631`.)"
msgstr ""
"新規 :class:`~weakref.WeakMethod` クラスは、インスタンスメソッドへの弱参照を"
"シミュレートします。 (Contributed by Antoine Pitrou in :issue:`14631`.)"

#: ../../whatsnew/3.4.rst:1754
msgid ""
"New :class:`~weakref.finalize` class makes it possible to register a "
"callback to be invoked when an object is garbage collected, without needing "
"to carefully manage the lifecycle of the weak reference itself.  "
"(Contributed by Richard Oudkerk in :issue:`15528`.)"
msgstr ""
"新規クラス :class:`~weakref.finalize` は、弱参照自身のライフサイクルを注意深"
"く管理する必要性なしに、オブジェクトがガーベージコレクトされる際に呼び出され"
"るコールバックを登録することを可能にします。 (Contributed by Richard Oudkerk "
"in :issue:`15528`.)"

#: ../../whatsnew/3.4.rst:1759
msgid ""
"The callback, if any, associated with a :class:`~weakref.ref` is now exposed "
"via the :attr:`~weakref.ref.__callback__` attribute.  (Contributed by Mark "
"Dickinson in :issue:`17643`.)"
msgstr ""
":class:`~weakref.ref` に関連付いたコールバック (あれば) を、新規属性 :attr:"
"`~weakref.ref.__callback__` で取得出来るようになりました。(Contributed by "
"Mark Dickinson in :issue:`17643`.)"

#: ../../whatsnew/3.4.rst:1765
msgid "xml.etree"
msgstr "xml.etree"

#: ../../whatsnew/3.4.rst:1767
msgid ""
"A new parser, :class:`~xml.etree.ElementTree.XMLPullParser`, allows a non-"
"blocking applications to parse XML documents.  An example can be seen at :"
"ref:`elementtree-pull-parsing`.  (Contributed by Antoine Pitrou in :issue:"
"`17741`.)"
msgstr ""
"ノンブロッキングなアプリケーションでの XML ドキュメントの解析に、新規パーサ :"
"class:`~xml.etree.ElementTree.XMLPullParser` を利用出来ます。実例は :ref:"
"`elementtree-pull-parsing` をみてください。 (Contributed by Antoine Pitrou "
"in :issue:`17741`.)"

#: ../../whatsnew/3.4.rst:1772
msgid ""
"The :mod:`xml.etree.ElementTree` :func:`~xml.etree.ElementTree.tostring` "
"and :func:`~xml.etree.ElementTree.tostringlist` functions, and the :class:"
"`~xml.etree.ElementTree.ElementTree` :meth:`~xml.etree.ElementTree."
"ElementTree.write` method, now have a *short_empty_elements* :ref:`keyword-"
"only parameter <keyword-only_parameter>` providing control over whether "
"elements with no content are written in abbreviated (``<tag />``) or "
"expanded (``<tag></tag>``) form.  (Contributed by Ariel Poliak and Serhiy "
"Storchaka in :issue:`14377`.)"
msgstr ""
":mod:`xml.etree.ElementTree` の関数 :func:`~xml.etree.ElementTree."
"tostring` 、:func:`~xml.etree.ElementTree.tostringlist` と、 :class:`~xml."
"etree.ElementTree.ElementTree` クラスの :meth:`~xml.etree.ElementTree."
"ElementTree.write` メソッドに、 :ref:`キーワード専用引数 <keyword-"
"only_parameter>` の *short_empty_elements* が追加されました。これはコンテンツ"
"を持たない要素を省略形 (``<tag />``) で書き出すか展開された形 (``<tag></"
"tag>``) で書き出すかを制御します。(Contributed by Ariel Poliak and Serhiy "
"Storchaka in :issue:`14377`.)"

#: ../../whatsnew/3.4.rst:1783
msgid "zipfile"
msgstr "zipfile"

#: ../../whatsnew/3.4.rst:1785
msgid ""
"The :meth:`~zipfile.PyZipFile.writepy` method of the :class:`~zipfile."
"PyZipFile` class has a new *filterfunc* option that can be used to control "
"which directories and files are added to the archive.  For example, this "
"could be used to exclude test files from the archive. (Contributed by "
"Christian Tismer in :issue:`19274`.)"
msgstr ""
":class:`~zipfile.PyZipFile` クラスの :meth:`~zipfile.PyZipFile.writepy` メ"
"ソッドに *filterfunc* オプションが追加されました。これはアーカイブにどのディ"
"レクトリ・ファイルを加えるのかをコントロールするのに使うことが出来ます。例え"
"ばテスト用ファイルをアーカイブから除外する、などということが出来ます。"
"(Contributed by Christian Tismer in :issue:`19274`.)"

#: ../../whatsnew/3.4.rst:1791
msgid ""
"The *allowZip64* parameter to :class:`~zipfile.ZipFile` and :class:`~zipfile."
"PyZipfile` is now ``True`` by default.  (Contributed by William Mallard in :"
"issue:`17201`.)"
msgstr ""
":class:`~zipfile.ZipFile` クラスと :class:`~zipfile.PyZipfile` クラスの "
"*allowZip64* パラメータのデフォルトが ``True`` に変更されました。 "
"(Contributed by William Mallard in :issue:`17201`.)"

#: ../../whatsnew/3.4.rst:1798
msgid "CPython Implementation Changes"
msgstr "CPython の実装の変更"

#: ../../whatsnew/3.4.rst:1804
msgid "PEP 445: Customization of CPython Memory Allocators"
msgstr "PEP 445: CPython のメモリアロケータのカスタマイズ"

#: ../../whatsnew/3.4.rst:1806
msgid ""
":pep:`445` adds new C level interfaces to customize memory allocation in the "
"CPython interpreter."
msgstr ""
":pep:`445` は、CPython インタープリタのメモリ割り当てをカスタマイズするために"
"新たな C 水準のインターフェイスを追加しました。"

#: ../../whatsnew/3.4.rst:1811
msgid ":pep:`445` -- Add new APIs to customize Python memory allocators"
msgstr ""
":pep:`445` -- Python メモリアロケータをカスタマイズするための新 API 追加"

#: ../../whatsnew/3.4.rst:1818
msgid "PEP 442: Safe Object Finalization"
msgstr "PEP 442: オブジェクトの安全なファイナライゼーション"

#: ../../whatsnew/3.4.rst:1820
msgid ""
":pep:`442` removes the current limitations and quirks of object finalization "
"in CPython. With it, objects with :meth:`__del__` methods, as well as "
"generators with :keyword:`finally` clauses, can be finalized when they are "
"part of a reference cycle."
msgstr ""
":pep:`442` は、 CPython でのオブジェクトのファイナライゼーションにまつわる現"
"在の制限と奇癖を取り除きます。これによって、 :meth:`__del__` メソッドを持つオ"
"ブジェクトと :keyword:`finally` 節を持つジェネレータが、それらが循環参照に含"
"まれる場合もファイナライズ出来ます。(---訳注: ジェネレータの例については :"
"issue:`17468` から派生した :issue:`17807` での修正 `changeset 83688:"
"c89febab4648 <https://hg.python.org/cpython/rev/c89febab4648>`_ の ``Lib/"
"test/test_generators.py`` に追加されたテスト参照。---)"

#: ../../whatsnew/3.4.rst:1825
msgid ""
"As part of this change, module globals are no longer forcibly set to :const:"
"`None` during interpreter shutdown in most cases, instead relying on the "
"normal operation of the cyclic garbage collector.  This avoids a whole class "
"of interpreter-shutdown-time errors, usually involving ``__del__`` methods, "
"that have plagued Python since the cyclic GC was first introduced."
msgstr ""
"この変更の一環で、モジュールのグローバルは、ほとんどのケースではインタプリタ"
"のシャットダウン中に強制的に :const:`None` がセットされることはなくなり、代わ"
"りに循環ガーベージコレクタの通常のオペレーションに委ねます。このことは、循環 "
"GC が最初に導入されて以来悩みの種だった、普通 ``__del__`` メソッドを巻き込ん"
"だ「インタプリタシャットダウン時エラーの類」全体を回避します。(---訳注: :"
"issue:`18214` (superseder for :issue:`812369`), `changeset "
"84936:79e2f5bbc30c <https://hg.python.org/cpython/rev/79e2f5bbc30c/>`_ ---)"

#: ../../whatsnew/3.4.rst:1834
msgid ":pep:`442` -- Safe object finalization"
msgstr ":pep:`442` -- オブジェクトの安全なファイナライゼーション"

#: ../../whatsnew/3.4.rst:1841
msgid "PEP 456: Secure and Interchangeable Hash Algorithm"
msgstr "PEP 456: 安全で取り換え可能なハッシュアルゴリズム"

#: ../../whatsnew/3.4.rst:1843
msgid ""
":pep:`456` follows up on earlier security fix work done on Python's hash "
"algorithm to address certain DOS attacks to which public facing APIs backed "
"by dictionary lookups may be subject.  (See :issue:`14621` for the start of "
"the current round of improvements.)  The PEP unifies CPython's hash code to "
"make it easier for a packager to substitute a different hash algorithm, and "
"switches Python's default implementation to a SipHash implementation on "
"platforms that have a 64 bit data type.  Any performance differences in "
"comparison with the older FNV algorithm are trivial."
msgstr ""
":pep:`456` は、Python のハッシュアルゴリズムで行われた以前のセキュリティ修正"
"作業 --- これは公に曝されている辞書検索に裏打ちされた API が標的になるかもし"
"れない、特定の DOS 攻撃に対処するものです ---  に追従するものです (この改善の"
"現在ラウンドの事の起こりについては :issue:`14621` を見てください)。この PEP "
"では、 CPython のハッシュのコードをパッケージャが異なるハッシュアルゴリズムへ"
"の差し替えを容易にするために一元化し、そして Python のデフォルト実装としては "
"64 ビットデータ型を持つプラットフォームで SipHash に乗り換えます。以前の FNV "
"アルゴリズムと比較したどんなパフォーマンスの差異も、些細なものです。"

#: ../../whatsnew/3.4.rst:1852
msgid ""
"The PEP adds additional fields to the :data:`sys.hash_info` named tuple to "
"describe the hash algorithm in use by the currently executing binary.  "
"Otherwise, the PEP does not alter any existing CPython APIs."
msgstr ""

#: ../../whatsnew/3.4.rst:1860
msgid "PEP 436: Argument Clinic"
msgstr "PEP 436: Argument Clinic"

#: ../../whatsnew/3.4.rst:1862
msgid ""
"\"Argument Clinic\" (:pep:`436`) is now part of the CPython build process "
"and can be used to simplify the process of defining and maintaining accurate "
"signatures for builtins and standard library extension modules implemented "
"in C."
msgstr ""
"「Argument Clinic」(:pep:`436`) は CPython ビルドプロセスの新たな鍋の具です。"
"ビルトインと標準ライブラリの拡張モジュールが C で実装されるにあたって、正確な"
"シグニチャを定義し保守管理するプロセスを単純化するのに使えます。"

#: ../../whatsnew/3.4.rst:1867
msgid ""
"Some standard library extension modules have been converted to use Argument "
"Clinic in Python 3.4, and :mod:`pydoc` and :mod:`inspect` have been updated "
"accordingly."
msgstr ""
"Python 3.4 では既にいくつかの標準ライブラリ拡張モジュールが Argument Clinic "
"を使うように変換されていて、またこれの結果として :mod:`pydoc` と :mod:"
"`inspect` が更新されました。"

#: ../../whatsnew/3.4.rst:1871
msgid ""
"It is expected that signature metadata for programmatic introspection will "
"be added to additional callables implemented in C as part of Python 3.4 "
"maintenance releases."
msgstr ""
"Python 3.4 メンテナンスリリースでの更新の一部として C で実装されている "
"callable に対して、プログラム的なイントロスペクションのためのシグニチャメタ"
"データの追加が、さらに追加で行われることが期待されています。"

#: ../../whatsnew/3.4.rst:1876
msgid ""
"The Argument Clinic PEP is not fully up to date with the state of the "
"implementation. This has been deemed acceptable by the release manager and "
"core development team in this case, as Argument Clinic will not be made "
"available as a public API for third party use in Python 3.4."
msgstr ""
"Argument Clinic の PEP は、実装されている状態に対して完全には最新のものとは"
"なっていません。Argument Clinic は Python 3.4 ではサードパーティに向けた公開 "
"API として利用可能とする予定ではないので、このケースではリリース管理者とコア"
"開発チームによって許容出来るとみなされました。"

#: ../../whatsnew/3.4.rst:1883
msgid ":pep:`436` -- The Argument Clinic DSL"
msgstr ""
":pep:`436` -- The Argument Clinic DSL (訳注: DSL=Domain-Specific Language)"

#: ../../whatsnew/3.4.rst:1884
msgid "PEP written and implemented by Larry Hastings."
msgstr "PEP written and implemented by Larry Hastings."

#: ../../whatsnew/3.4.rst:1888
msgid "Other Build and C API Changes"
msgstr "その他のビルド並びに C API の変更"

#: ../../whatsnew/3.4.rst:1890
msgid ""
"The new :c:func:`PyType_GetSlot` function has been added to the stable ABI, "
"allowing retrieval of function pointers from named type slots when using the "
"limited API.  (Contributed by Martin von Löwis in :issue:`17162`.)"
msgstr ""
":c:func:`PyType_GetSlot` 関数が、安定 ABI に追加されました。これにより、制限 "
"API を使う際に名前の付いた型のスロットから関数ポインタを取り出すことが出来ま"
"す。(Contributed by Martin von Löwis in :issue:`17162`.) (---訳注: 安定 ABI, "
"制限 API については What's New In Python 3.2 (:pep:`384`) を参照。---)"

#: ../../whatsnew/3.4.rst:1894
msgid ""
"The new :c:func:`!Py_SetStandardStreamEncoding` pre-initialization API "
"allows applications embedding the CPython interpreter to reliably force a "
"particular encoding and error handler for the standard streams. (Contributed "
"by Bastien Montagne and Nick Coghlan in :issue:`16129`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1899
msgid ""
"Most Python C APIs that don't mutate string arguments are now correctly "
"marked as accepting ``const char *`` rather than ``char *``.  (Contributed "
"by Serhiy Storchaka in :issue:`1772673`.)"
msgstr ""
"文字列引数を変更することのない Python C API のほとんどが、 ``char *`` ではな"
"く適切に ``const char *`` として宣言されました。 (Contributed by Serhiy "
"Storchaka in :issue:`1772673`.)"

#: ../../whatsnew/3.4.rst:1903
msgid ""
"A new shell version of ``python-config`` can be used even when a python "
"interpreter is not available (for example, in cross compilation scenarios)."
msgstr ""
"Python インタプリタが利用出来ない場合 (例えばクロスコンパイルのシナリオ) で"
"あっても使える、シェルで書き直したバージョンの ``python-config`` が追加されま"
"した。"

#: ../../whatsnew/3.4.rst:1906
msgid ""
":c:func:`PyUnicode_FromFormat` now supports width and precision "
"specifications for ``%s``, ``%A``, ``%U``, ``%V``, ``%S``, and ``%R``. "
"(Contributed by Ysj Ray and Victor Stinner in :issue:`7330`.)"
msgstr ""
":c:func:`PyUnicode_FromFormat` が ``%s``, ``%A``, ``%U``, ``%V``, ``%S``, "
"``%R`` についての幅と精度の指定をサポートするようになりました。 (Contributed "
"by Ysj Ray and Victor Stinner in :issue:`7330`.)"

#: ../../whatsnew/3.4.rst:1910
msgid ""
"New function :c:func:`PyStructSequence_InitType2` supplements the existing :"
"c:func:`PyStructSequence_InitType` function.  The difference is that it "
"returns ``0`` on success and ``-1`` on failure."
msgstr ""
"既存の :c:func:`PyStructSequence_InitType` 関数を補うものとして、 :c:func:"
"`PyStructSequence_InitType2` が追加されました。違いは、これは成功時に "
"``0`` 、失敗時に ``-1`` を返すことです。"

#: ../../whatsnew/3.4.rst:1914
msgid ""
"The CPython source can now be compiled using the address sanity checking "
"features of recent versions of GCC and clang:  the false alarms in the small "
"object allocator have been silenced.  (Contributed by Dhiru Kholia in :issue:"
"`18596`.)"
msgstr ""
"CPython のソースを、最近の GCC と clang のアドレスサニティチェック機能を使っ"
"てコンパイル出来るようにしました: 小さなオブジェクト用アロケータで起こってい"
"た偽の警報を黙らせました。 (Contributed by Dhiru Kholia in :issue:`18596`.)"

#: ../../whatsnew/3.4.rst:1919
msgid ""
"The Windows build now uses `Address Space Layout Randomization <https://en."
"wikipedia.org/wiki/Address_space_layout_randomization>`_ and `Data Execution "
"Prevention <https://en.wikipedia.org/wiki/Data_Execution_Prevention>`_.  "
"(Contributed by Christian Heimes in :issue:`16632`.)"
msgstr ""
"Windows ビルドに `アドレス空間配置のランダム化 <https://en.wikipedia.org/"
"wiki/Address_space_layout_randomization>`_ と `データ実行防止 <https://en."
"wikipedia.org/wiki/Data_Execution_Prevention>`_ を使うようにしました。 "
"(Contributed by Christian Heimes in :issue:`16632`.)"

#: ../../whatsnew/3.4.rst:1924
msgid ""
"New function :c:func:`PyObject_LengthHint` is the C API equivalent of :func:"
"`operator.length_hint`.  (Contributed by Armin Ronacher in :issue:`16148`.)"
msgstr ""
":func:`operator.length_hint` と等価な C API 関数 :c:func:"
"`PyObject_LengthHint` が追加されました。 (Contributed by Armin Ronacher in :"
"issue:`16148`.)"

#: ../../whatsnew/3.4.rst:1932
msgid "Other Improvements"
msgstr "その他の改善"

#: ../../whatsnew/3.4.rst:1936
msgid ""
"The :ref:`python <using-on-cmdline>` command has a new :ref:`option <using-"
"on-misc-options>`, ``-I``, which causes it to run in \"isolated mode\", "
"which means that :data:`sys.path` contains neither the script's directory "
"nor the user's ``site-packages`` directory, and all :envvar:`!PYTHON*` "
"environment variables are ignored (it implies both ``-s`` and ``-E``).  "
"Other restrictions may also be applied in the future, with the goal being to "
"isolate the execution of a script from the user's environment.  This is "
"appropriate, for example, when Python is used to run a system script.  On "
"most POSIX systems it can and should be used in the ``#!`` line of system "
"scripts.  (Contributed by Christian Heimes in :issue:`16499`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1947
msgid ""
"Tab-completion is now enabled by default in the interactive interpreter on "
"systems that support :mod:`readline`.  History is also enabled by default, "
"and is written to (and read from) the file :file:`~/.python-history`. "
"(Contributed by Antoine Pitrou and Éric Araujo in :issue:`5845`.)"
msgstr ""
":mod:`readline` をサポートするプラットフォームで、対話インタプリタでの :kbd:"
"`Tab` キーでの補完がデフォルトで有効になりました。履歴もデフォルトで有効とな"
"り、 :file:`~/.python-history` に書き込まれ (そしてそこから読み込まれ) ま"
"す。 (Contributed by Antoine Pitrou and Éric Araujo in :issue:`5845`.)"

#: ../../whatsnew/3.4.rst:1952
msgid ""
"Invoking the Python interpreter with ``--version`` now outputs the version "
"to standard output instead of standard error (:issue:`18338`). Similar "
"changes were made to :mod:`argparse` (:issue:`18920`) and other modules that "
"have script-like invocation capabilities (:issue:`18922`)."
msgstr ""
"Python インタプリタの ``--version`` での起動時、標準エラーではなく標準出力に"
"バージョン情報を出力するようになりました (:issue:`18338`)。同じ変更は :mod:"
"`argparse` モジュールに対して (:issue:`18920`)、また、スクリプトとして呼び出"
"せる機能を持つモジュールに対して (:issue:`18922`) も行われました。"

#: ../../whatsnew/3.4.rst:1957
msgid ""
"The CPython Windows installer now adds ``.py`` to the :envvar:`PATHEXT` "
"variable when extensions are registered, allowing users to run a python "
"script at the windows command prompt by just typing its name without the ``."
"py`` extension.  (Contributed by Paul Moore in :issue:`18569`.)"
msgstr ""
"CPython の Windows インストーラが、拡張子を登録する際に :envvar:`PATHEXT` に "
"``.py`` を追加するようになりました。これをするとユーザは、 Windows コマンドプ"
"ロンプトから Python スクリプトを、 ``.py`` 拡張子なしでその名前だけタイプして"
"実行出来ます。 (Contributed by Paul Moore in :issue:`18569`.)"

#: ../../whatsnew/3.4.rst:1962
msgid ""
"A new ``make`` target `coverage-report <https://devguide.python.org/coverage/"
"#measuring-coverage-of-c-code-with-gcov-and-lcov>`_ will build python, run "
"the test suite, and generate an HTML coverage report for the C codebase "
"using ``gcov`` and `lcov <https://ltp.sourceforge.net/coverage/lcov.php>`_."
msgstr ""

#: ../../whatsnew/3.4.rst:1968
msgid ""
"The ``-R`` option to the :ref:`python regression test suite <regrtest>` now "
"also checks for memory allocation leaks, using :func:`sys."
"getallocatedblocks`.  (Contributed by Antoine Pitrou in :issue:`13390`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:1973
msgid "``python -m`` now works with namespace packages."
msgstr "``python -m`` が名前空間パッケージで動くようになりました。"

#: ../../whatsnew/3.4.rst:1975
msgid ""
"The :mod:`stat` module is now implemented in C, which means it gets the "
"values for its constants from the C header files, instead of having the "
"values hard-coded in the python module as was previously the case."
msgstr ""
":mod:`stat` モジュールが C で実装されました。これは以前問題であった Python モ"
"ジュール内で値をハードコードすることなく、定数を C ヘッダファイルから取りこめ"
"ることを意味しています。(---訳注: :issue:`11016` 、特に `msg127114 <https://"
"bugs.python.org/issue11016#msg127114>`_ 以降参照。---)"

#: ../../whatsnew/3.4.rst:1979
msgid ""
"Loading multiple python modules from a single OS module (``.so``, ``.dll``) "
"now works correctly (previously it silently returned the first python module "
"in the file).  (Contributed by Václav Šmilauer in :issue:`16421`.)"
msgstr ""
"単一の OS モジュール (POSIX の ``.so`` と Windows の ``.dll``) からの複数 "
"Python モジュールのロードを正しく行えるようになりました (以前は黙ってファイル"
"内の最初のモジュールだけが返されていました)。  (Contributed by Václav "
"Šmilauer in :issue:`16421`.)"

#: ../../whatsnew/3.4.rst:1983
msgid ""
"A new opcode, :opcode:`LOAD_CLASSDEREF`, has been added to fix a bug in the "
"loading of free variables in class bodies that could be triggered by certain "
"uses of :ref:`__prepare__ <prepare>`.  (Contributed by Benjamin Peterson in :"
"issue:`17853`.)"
msgstr ""
"新しい命令コード :opcode:`LOAD_CLASSDEREF` が追加されました。これは :ref:"
"`__prepare__ <prepare>` のある種の使い方で起こりうる、クラス本体内の自由変数"
"のロードでのバグを修正するために導入されました。(Contributed by Benjamin "
"Peterson in :issue:`17853`.)"

#: ../../whatsnew/3.4.rst:1988
msgid ""
"A number of MemoryError-related crashes were identified and fixed by Victor "
"Stinner using his :pep:`445`-based ``pyfailmalloc`` tool (:issue:`18408`, :"
"issue:`18520`)."
msgstr ""
"Victor Stinner が、彼の :pep:`445` ベースの ``pyfailmalloc`` ツールを用いて数"
"多くのメモリエラー関連のクラッシュを特定し、そして修正しました。 (:issue:"
"`18408`, :issue:`18520`)"

#: ../../whatsnew/3.4.rst:1992
msgid ""
"The ``pyvenv`` command now accepts a ``--copies`` option to use copies "
"rather than symlinks even on systems where symlinks are the default.  "
"(Contributed by Vinay Sajip in :issue:`18807`.)"
msgstr ""
"``pyvenv`` コマンドに、シンボリックリンクがデフォルトのシステムでもそうせずに"
"コピーを使うようにするための ``--copies`` オプションが追加されました。 "
"(Contributed by Vinay Sajip in :issue:`18807`.)"

#: ../../whatsnew/3.4.rst:1996
msgid ""
"The ``pyvenv`` command also accepts a ``--without-pip`` option to suppress "
"the otherwise-automatic bootstrapping of pip into the virtual environment.  "
"(Contributed by Nick Coghlan in :issue:`19552` as part of the :pep:`453` "
"implementation.)"
msgstr ""
"``pyvenv`` コマンドにはさらに、そうしなければ自動的に仮想環境に pip がブート"
"ストラップされてしまうのを抑制するための、 ``--without-pip`` オプションが追加"
"されました。(Contributed by Nick Coghlan in :issue:`19552` as part of the :"
"pep:`453` implementation.)"

#: ../../whatsnew/3.4.rst:2001
msgid ""
"The encoding name is now optional in the value set for the :envvar:"
"`PYTHONIOENCODING` environment variable.  This makes it possible to set just "
"the error handler, without changing the default encoding. (Contributed by "
"Serhiy Storchaka in :issue:`18818`.)"
msgstr ""
"環境変数 :envvar:`PYTHONIOENCODING` の値内で、エンコーディング名を省略出来る"
"ようになりました。つまり、デフォルトエンコーディングを変更することなしにエ"
"ラーハンドラだけをセット出来ます。 (Contributed by Serhiy Storchaka in :"
"issue:`18818`.)"

#: ../../whatsnew/3.4.rst:2006
msgid ""
"The :mod:`bz2`, :mod:`lzma`, and :mod:`gzip` module ``open`` functions now "
"support ``x`` (exclusive creation) mode.  (Contributed by Tim Heaney and "
"Vajrasky Kok in :issue:`19201`, :issue:`19222`, and :issue:`19223`.)"
msgstr ""
":mod:`bz2`、:mod:`lzma`、:mod:`gzip` モジュールの ``open`` 関数が ``x`` (排他"
"的作成) モードをサポートするようになりました。 (Contributed by Tim Heaney "
"and Vajrasky Kok in :issue:`19201`, :issue:`19222`, and :issue:`19223`.)"

#: ../../whatsnew/3.4.rst:2012
msgid "Significant Optimizations"
msgstr "大幅な最適化"

#: ../../whatsnew/3.4.rst:2014
msgid ""
"The UTF-32 decoder is now 3x to 4x faster.  (Contributed by Serhiy Storchaka "
"in :issue:`14625`.)"
msgstr ""
"UTF-32 デコーダが3-4倍速くなりました。 (Contributed by Serhiy Storchaka in :"
"issue:`14625`.)"

#: ../../whatsnew/3.4.rst:2017
msgid ""
"The cost of hash collisions for sets is now reduced.  Each hash table probe "
"now checks a series of consecutive, adjacent key/hash pairs before "
"continuing to make random probes through the hash table.  This exploits "
"cache locality to make collision resolution less expensive. The collision "
"resolution scheme can be described as a hybrid of linear probing and open "
"addressing.  The number of additional linear probes defaults to nine.  This "
"can be changed at compile-time by defining LINEAR_PROBES to be any value.  "
"Set LINEAR_PROBES=0 to turn-off linear probing entirely.  (Contributed by "
"Raymond Hettinger in :issue:`18771`.)"
msgstr ""
"集合に対するハッシュ衝突のコストが削減されました。ハッシュテーブルの個々の検"
"査 (probe) で、ハッシュテーブル全体を通したランダムな検査を行う前に、連続する"
"隣接したキー/ハッシュペアをチェックするようになりました。これは、キャッシュ局"
"所性を利用して衝突解決のコストを減らします。この衝突解決戦略は、リニア検査と"
"オープンアドレッシング法のハイブリッドとして説明できます。追加的なリニア検査"
"の数はデフォルトでは 9 です。この値は、コンパイル時に LINEAR_PROBES を定義す"
"ることで任意の値に変更できます。リニア検査を完全に無効にするには "
"LINEAR_PROBES=0 を設定してください。 (Contributed by Raymond Hettinger in :"
"issue:`18771`.)"

#: ../../whatsnew/3.4.rst:2028
msgid ""
"The interpreter starts about 30% faster. A couple of measures lead to the "
"speedup. The interpreter loads fewer modules on startup, e.g. the :mod:"
"`re`, :mod:`collections` and :mod:`locale` modules and their dependencies "
"are no longer imported by default. The marshal module has been improved to "
"load compiled Python code faster.  (Contributed by Antoine Pitrou, Christian "
"Heimes and Victor Stinner in :issue:`19219`, :issue:`19218`, :issue:"
"`19209`, :issue:`19205` and :issue:`9548`.)"
msgstr ""
"インタプリタの起動が約 30% 高速化されました。この速度向上は、いくつかの手段に"
"よってもたらされました。インタプリタは起動時により少数のモジュールをロードす"
"るようになりました。例えば :mod:`re`, :mod:`collections`, :mod:`locale` モ"
"ジュール、およびそれらの依存モジュールは、デフォルトではインポートされませ"
"ん。 marshal モジュールは、コンパイルされた Python コードをより高速にロードで"
"きるように改善されました。 (Contributed by Antoine Pitrou, Christian Heimes "
"and Victor Stinner in :issue:`19219`, :issue:`19218`, :issue:`19209`, :issue:"
"`19205` and :issue:`9548`.)"

#: ../../whatsnew/3.4.rst:2036
msgid ""
":class:`bz2.BZ2File` is now as fast or faster than the Python2 version for "
"most cases.  :class:`lzma.LZMAFile` has also been optimized.  (Contributed "
"by Serhiy Storchaka and Nadeem Vawda in :issue:`16034`.)"
msgstr ""
":class:`bz2.BZ2File` が大半の場合 Python2 のバージョン以上に速くなりました。:"
"class:`lzma.LZMAFile` も最適化されました。(Contributed by Serhiy Storchaka "
"and Nadeem Vawda in :issue:`16034`.)"

#: ../../whatsnew/3.4.rst:2040
msgid ""
":func:`random.getrandbits` is 20%-40% faster for small integers (the most "
"common use case).  (Contributed by Serhiy Storchaka in :issue:`16674`.)"
msgstr ""
":func:`random.getrandbits` が (通常使用される) 小さな整数に対して20%-40% 早く"
"なりました。 (Contributed by Serhiy Storchaka in :issue:`16674`.)"

#: ../../whatsnew/3.4.rst:2043
msgid ""
"By taking advantage of the new storage format for strings, pickling of "
"strings is now significantly faster.  (Contributed by Victor Stinner and "
"Antoine Pitrou in :issue:`15596`.)"
msgstr ""
"文字列のストレージ形式を変更したことにより、文字列のピックル化は非常に速くな"
"りました。(Contributed by Victor Stinner and Antoine Pitrou in :issue:"
"`15596`.)"

#: ../../whatsnew/3.4.rst:2047
msgid ""
"A performance issue in :meth:`io.FileIO.readall` has been solved.  This "
"particularly affects Windows, and significantly speeds up the case of piping "
"significant amounts of data through :mod:`subprocess`.  (Contributed by "
"Richard Oudkerk in :issue:`15758`.)"
msgstr ""
":meth:`io.FileIO.readall` の性能問題が解決されました。これは特に Windows に影"
"響し、 :mod:`subprocess` を通して大量のデータをパイプで渡しているケースでかな"
"り速度向上します。 (Contributed by Richard Oudkerk in :issue:`15758`.)"

#: ../../whatsnew/3.4.rst:2052
msgid ""
":func:`html.escape` is now 10x faster.  (Contributed by Matt Bryant in :"
"issue:`18020`.)"
msgstr ""
":func:`html.escape` が10倍速くなりました。(Contributed by Matt Bryant in :"
"issue:`18020`.)"

#: ../../whatsnew/3.4.rst:2055
msgid ""
"On Windows, the native ``VirtualAlloc`` is now used instead of the CRT "
"``malloc`` in ``obmalloc``.  Artificial benchmarks show about a 3% memory "
"savings."
msgstr ""
"Windows において、 ``obmalloc`` で CRT の ``malloc`` の代わりにネイティブの "
"``VirtualAlloc`` を使うようになりました。人工的なベンチマーク結果は、メモリー"
"消費が 3% 減ったことを示しています。"

#: ../../whatsnew/3.4.rst:2059
msgid ""
":func:`os.urandom` now uses a lazily opened persistent file descriptor so as "
"to avoid using many file descriptors when run in parallel from multiple "
"threads.  (Contributed by Antoine Pitrou in :issue:`18756`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2067
msgid "Deprecated"
msgstr "非推奨"

#: ../../whatsnew/3.4.rst:2069
msgid ""
"This section covers various APIs and other features that have been "
"deprecated in Python 3.4, and will be removed in Python 3.5 or later.  In "
"most (but not all) cases, using the deprecated APIs will produce a :exc:"
"`DeprecationWarning` when the interpreter is run with deprecation warnings "
"enabled (for example, by using ``-Wd``)."
msgstr ""
"このセクションでは、Python 3.4 で非推奨となり Python 3.5 以降で削除予定とな"
"る、様々な API とその他機能性についてをカバーします。(全てではありませんが) "
"ほとんどのケースで、非推奨に対する警告を (たとえば ``-Wd`` を使って) 有効にし"
"たインタプリタ起動時、非推奨 API を使うと :exc:`DeprecationWarning` を励起し"
"ます。"

#: ../../whatsnew/3.4.rst:2077
msgid "Deprecations in the Python API"
msgstr "Python API の非推奨項目"

#: ../../whatsnew/3.4.rst:2079
msgid ""
"As mentioned in :ref:`whatsnew-pep-451`, a number of :mod:`importlib` "
"methods and functions are deprecated: :meth:`!importlib.find_loader` is "
"replaced by :func:`importlib.util.find_spec`; :meth:`!importlib.machinery."
"PathFinder.find_module` is replaced by :meth:`importlib.machinery.PathFinder."
"find_spec`; :meth:`!importlib.abc.MetaPathFinder.find_module` is replaced "
"by :meth:`importlib.abc.MetaPathFinder.find_spec`; :meth:`!importlib.abc."
"PathEntryFinder.find_loader` and :meth:`!find_module` are replaced by :meth:"
"`importlib.abc.PathEntryFinder.find_spec`; all of the :samp:`{xxx}Loader` "
"ABC ``load_module`` methods (:meth:`!importlib.abc.Loader.load_module`, :"
"meth:`!importlib.abc.InspectLoader.load_module`, :meth:`!importlib.abc."
"FileLoader.load_module`, :meth:`!importlib.abc.SourceLoader.load_module`) "
"should no longer be implemented, instead loaders should implement an "
"``exec_module`` method (:meth:`importlib.abc.Loader.exec_module`, :meth:"
"`importlib.abc.InspectLoader.exec_module` :meth:`importlib.abc.SourceLoader."
"exec_module`) and let the import system take care of the rest; and :meth:`!"
"importlib.abc.Loader.module_repr`, :meth:`!importlib.util."
"module_for_loader`, :meth:`!importlib.util.set_loader`, and :meth:`!"
"importlib.util.set_package` are no longer needed because their functions are "
"now handled automatically by the import system."
msgstr ""

#: ../../whatsnew/3.4.rst:2104
msgid ""
"The :mod:`!imp` module is pending deprecation. To keep compatibility with "
"Python 2/3 code bases, the module's removal is currently not scheduled."
msgstr ""

#: ../../whatsnew/3.4.rst:2107
msgid ""
"The :mod:`formatter` module is pending deprecation and is slated for removal "
"in Python 3.6."
msgstr ""
":mod:`formatter` モジュールが撤廃保留中で、Python 3.6 での削除が計画されてい"
"ます。"

#: ../../whatsnew/3.4.rst:2110
msgid ""
"``MD5`` as the default *digestmod* for the :func:`hmac.new` function is "
"deprecated.  Python 3.6 will require an explicit digest name or constructor "
"as *digestmod* argument."
msgstr ""
":func:`hmac.new` 関数の *digestmod* がデフォルトで暗黙に ``MD5`` を使う仕様は"
"撤廃されます。Python 3.6 では *digestmod* 引数には明示的にダイジェスト名かコ"
"ンストラクタを渡すことが求められます。"

#: ../../whatsnew/3.4.rst:2114
msgid ""
"The internal ``Netrc`` class in the :mod:`ftplib` module has been documented "
"as deprecated in its docstring for quite some time.  It now emits a :exc:"
"`DeprecationWarning` and will be removed completely in Python 3.5."
msgstr ""
":mod:`ftplib` モジュール内の内部クラス ``Netrc`` はずっと長いことそのドキュメ"
"ンテーション文字列内で非推奨であることを謳ってきました。これは今や :exc:"
"`DeprecationWarning` を発行します。Python 3.5 ではこのクラスは完全に削除され"
"ます。"

#: ../../whatsnew/3.4.rst:2118
msgid ""
"The undocumented *endtime* argument to :meth:`subprocess.Popen.wait` should "
"not have been exposed and is hopefully not in use; it is deprecated and will "
"mostly likely be removed in Python 3.5."
msgstr ""
":meth:`subprocess.Popen.wait` の文書化されていない引数 *endtime* は本来曝して"
"はいけないものでしたので、使用されていないことを願っています。これは非推奨で"
"すし、確実に Python 3.5 では削除されるのではないでしょうか。(---訳注: 3.5 で"
"は削除はされませんでしたが、もちろん使用しないでください。これは内部用で"
"す。---)"

#: ../../whatsnew/3.4.rst:2122
msgid ""
"The *strict* argument of :class:`~html.parser.HTMLParser` is deprecated."
msgstr ":class:`~html.parser.HTMLParser` の *strict* 引数は非推奨です。"

#: ../../whatsnew/3.4.rst:2124
msgid ""
"The :mod:`plistlib` :func:`~plistlib.readPlist`, :func:`~plistlib."
"writePlist`, :func:`~plistlib.readPlistFromBytes`, and :func:`~plistlib."
"writePlistToBytes` functions are deprecated in favor of the corresponding "
"new functions :func:`~plistlib.load`, :func:`~plistlib.dump`, :func:"
"`~plistlib.loads`, and :func:`~plistlib.dumps`.  :func:`~plistlib.Data` is "
"deprecated in favor of just using the :class:`bytes` constructor."
msgstr ""
":mod:`plistlib` モジュールに追加された :func:`~plistlib.load`, :func:"
"`~plistlib.dump`, :func:`~plistlib.loads`, :func:`~plistlib.dumps` により、対"
"応する :func:`~plistlib.readPlist`, :func:`~plistlib.writePlist`, :func:"
"`~plistlib.readPlistFromBytes`, :func:`~plistlib.writePlistToBytes` が非推奨"
"となりました。同じく単に :class:`bytes` コンストラクタを使えば良いので :func:"
"`~plistlib.Data` が非推奨となりました。"

#: ../../whatsnew/3.4.rst:2131
msgid ""
"The :mod:`sysconfig` key ``SO`` is deprecated, it has been replaced by "
"``EXT_SUFFIX``."
msgstr ""
":mod:`sysconfig` のキー ``SO`` は非推奨です。これは ``EXT_SUFFIX`` に取って代"
"わられました。"

#: ../../whatsnew/3.4.rst:2134
msgid ""
"The ``U`` mode accepted by various ``open`` functions is deprecated. In "
"Python3 it does not do anything useful, and should be replaced by "
"appropriate uses of :class:`io.TextIOWrapper` (if needed) and its *newline* "
"argument."
msgstr ""
"種々の ``open`` 関数で受け付けられていた ``U`` モードは非推奨となりました。"
"Python 3 ではこれは何も役に立つことはしません。 :class:`io.TextIOWrapper` (必"
"要ならば)、 *newline* 引数を適切に使うことによって置き換えられるはずです。"

#: ../../whatsnew/3.4.rst:2139
msgid ""
"The *parser* argument of :func:`xml.etree.ElementTree.iterparse` has been "
"deprecated, as has the *html* argument of :func:`~xml.etree.ElementTree."
"XMLParser`.  To prepare for the removal of the latter, all arguments to "
"``XMLParser`` should be passed by keyword."
msgstr ""
":func:`xml.etree.ElementTree.iterparse` の *parser* 引数と :func:`~xml.etree."
"ElementTree.XMLParser` の *html* 引数が非推奨となりました。後者は (訳注: 第一"
"引数のため) 削除に備えて ``XMLParser`` への全ての引数はキーワード引数として渡"
"すようにしてください。"

#: ../../whatsnew/3.4.rst:2146
msgid "Deprecated Features"
msgstr "非推奨の機能"

#: ../../whatsnew/3.4.rst:2148
msgid ""
"Running :ref:`idle` with the ``-n`` flag (no subprocess) is deprecated. "
"However, the feature will not be removed until :issue:`18823` is resolved."
msgstr ""
":ref:`idle` の ``-n`` フラグでの実行 (サブプロセスを起こさない) は非推奨とな"
"りました。ただし、この機能は :issue:`18823` が解決するまでは削除はされませ"
"ん。"

#: ../../whatsnew/3.4.rst:2151
msgid ""
"The site module adding a \"site-python\" directory to sys.path, if it "
"exists, is deprecated (:issue:`19375`)."
msgstr ""
":mod:`site` モジュールは \"site-python\" ディレクトリが存在すればこれを sys."
"path に加えていましたが、これは非推奨となりました。 (:issue:`19375`)"

#: ../../whatsnew/3.4.rst:2157
msgid "Removed"
msgstr "削除"

#: ../../whatsnew/3.4.rst:2161
msgid "Operating Systems No Longer Supported"
msgstr "サポートされなくなったオペレーティングシステム"

#: ../../whatsnew/3.4.rst:2163
msgid ""
"Support for the following operating systems has been removed from the source "
"and build tools:"
msgstr "以下の OS 向けのソースとビルドツールは削除されました。"

#: ../../whatsnew/3.4.rst:2166
msgid "OS/2 (:issue:`16135`)."
msgstr "OS/2 (:issue:`16135`)。"

#: ../../whatsnew/3.4.rst:2167
msgid "Windows 2000 (changeset e52df05b496a)."
msgstr ""
"Windows 2000 (`changeset e52df05b496a <https://hg.python.org/cpython/rev/"
"e52df05b496a>`_)。"

#: ../../whatsnew/3.4.rst:2168
msgid ""
"Windows systems where ``COMSPEC`` points to ``command.com`` (:issue:`14470`)."
msgstr ""
"``COMSPEC`` が ``command.com`` を指している Windows システム (:issue:"
"`14470`)."

#: ../../whatsnew/3.4.rst:2169
msgid "VMS (:issue:`16136`)."
msgstr "VMS (:issue:`16136`)。"

#: ../../whatsnew/3.4.rst:2173
msgid "API and Feature Removals"
msgstr "API と機能の削除"

#: ../../whatsnew/3.4.rst:2175
msgid ""
"The following obsolete and previously deprecated APIs and features have been "
"removed:"
msgstr ""
"時代遅れとなり、以前に既に非推奨となった以下の API と機能が削除されました:"

#: ../../whatsnew/3.4.rst:2178
msgid ""
"The unmaintained ``Misc/TextMate`` and ``Misc/vim`` directories have been "
"removed (see the `devguide <https://devguide.python.org>`_ for suggestions "
"on what to use instead)."
msgstr ""
"保守されていなかった ``Misc/TextMate`` と ``Misc/vim`` ディレクトリは削除され"
"ました (代わりに何が使えるかの提案は `devguide <https://devguide.python."
"org>`_ をみてください --- 訳注: おそらく `Additional Resources <https://"
"devguide.python.org/#additional-resources>`_ に挙げられている `wiki <https://"
"wiki.python.org/moin/PythonEditors>`_ を指している ---)。"

#: ../../whatsnew/3.4.rst:2182
msgid ""
"The ``SO`` makefile macro is removed (it was replaced by the "
"``SHLIB_SUFFIX`` and ``EXT_SUFFIX`` macros) (:issue:`16754`)."
msgstr ""
"makefile のマクロ ``SO``  は削除されました (これは ``SHLIB_SUFFIX`` マクロと "
"``EXT_SUFFIX`` マクロで置き換えられました) (:issue:`16754`)。"

#: ../../whatsnew/3.4.rst:2185
msgid ""
"The ``PyThreadState.tick_counter`` field has been removed; its value has "
"been meaningless since Python 3.2, when the \"new GIL\" was introduced (:"
"issue:`19199`)."
msgstr ""
"``PyThreadState.tick_counter`` フィールドは削除されました。これは Python 3.2 "
"で「新しい GIL」が導入された際に意味をなくしていました。 (:issue:`19199`)."

#: ../../whatsnew/3.4.rst:2189
msgid ""
"``PyLoader`` and ``PyPycLoader`` have been removed from :mod:`importlib`. "
"(Contributed by Taras Lyapun in :issue:`15641`.)"
msgstr ""
"``PyLoader`` と ``PyPycLoader`` が :mod:`importlib` から削除されました。 "
"(Contributed by Taras Lyapun in :issue:`15641`.)"

#: ../../whatsnew/3.4.rst:2192
msgid ""
"The *strict* argument to :class:`~http.client.HTTPConnection` and :class:"
"`~http.client.HTTPSConnection` has been removed.  HTTP 0.9-style \"Simple "
"Responses\" are no longer supported."
msgstr ""
":class:`~http.client.HTTPConnection` と :class:`~http.client."
"HTTPSConnection` の *strict* 引数は削除されました。 HTTP 0.9 スタイルの "
"「Simple Responses」はもはやサポートされません。"

#: ../../whatsnew/3.4.rst:2196
msgid ""
"The deprecated :mod:`urllib.request.Request` getter and setter methods "
"``add_data``, ``has_data``, ``get_data``, ``get_type``, ``get_host``, "
"``get_selector``, ``set_proxy``, ``get_origin_req_host``, and "
"``is_unverifiable`` have been removed (use direct attribute access instead)."
msgstr ""
":mod:`urllib.request.Request` の非推奨となっていた getter/setter メソッドの "
"``add_data``, ``has_data``, ``get_data``, ``get_type``, ``get_host``, "
"``get_selector``, ``set_proxy``, ``get_origin_req_host``, "
"``is_unverifiable`` は削除されました (代わりに属性アクセスを直接使ってくださ"
"い)。"

#: ../../whatsnew/3.4.rst:2201
msgid ""
"Support for loading the deprecated ``TYPE_INT64`` has been removed from :mod:"
"`marshal`.  (Contributed by Dan Riti in :issue:`15480`.)"
msgstr ""
"非推奨の ``TYPE_INT64`` ロードのサポートが :mod:`marshal` から削除されまし"
"た。  (Contributed by Dan Riti in :issue:`15480`.)"

#: ../../whatsnew/3.4.rst:2204
msgid ""
":class:`inspect.Signature`: positional-only parameters are now required to "
"have a valid name."
msgstr ""
":class:`inspect.Signature`: 位置専用パラメータを示すのに今では正当な名前が必"
"要です。"

#: ../../whatsnew/3.4.rst:2207
msgid ""
":meth:`object.__format__` no longer accepts non-empty format strings, it now "
"raises a :exc:`TypeError` instead.  Using a non-empty string has been "
"deprecated since Python 3.2.  This change has been made to prevent a "
"situation where previously working (but incorrect) code would start failing "
"if an object gained a __format__ method, which means that your code may now "
"raise a :exc:`TypeError` if you are using an ``'s'`` format code with "
"objects that do not have a __format__ method that handles it.  See :issue:"
"`7994` for background."
msgstr ""
"object 自身の :meth:`object.__format__` はもはや空でないフォーマット文字列を"
"受け付けず、 :exc:`TypeError` を投げます。空でない文字列を渡すことは既に "
"Python 3.2 で非推奨となっていました。この変更は以前は動作した (そして正しくな"
"い) コードが、オブジェクトが __format__ メソッドを得ることで処理に失敗し始め"
"ていた状況を防ぐ目的でなされました。この変更が意味することはあなたのコードに"
"とって、それを処理する __format__ メソッドを持たないオブジェクトに ``s`` "
"フォーマットコードを使うと :exc:`TypeError` を起こしうるようになった、という"
"ことです。背景については :issue:`7994` を参照して下さい。 (---訳注: このパラ"
"グラフの中盤が非常にわかりにくい表現で訳者も意味を取りきれていませんが、おそ"
"らく Python 2.6/3.0 で動作していた例えば ``format(1+1j, '10s')`` が Python "
"2.7/3.1 で動作しなくなったことを指しているのだと思います。問題にされているの"
"は動作しなくなったことではなくてむしろ動作していたことで、そして object."
"__format__ が return str(self).__format__(fmt) で実現されていること。このコー"
"ドでは fmt は何らの意味も持っていませんので、これは一貫性に欠ける要因である、"
"とのことで、「わかりやすく拒絶する」ことが真意であるようです ---)"

#: ../../whatsnew/3.4.rst:2216
msgid ""
":meth:`difflib.SequenceMatcher.isbjunk` and :meth:`difflib.SequenceMatcher."
"isbpopular` were deprecated in 3.2, and have now been removed: use ``x in sm."
"bjunk`` and ``x in sm.bpopular``, where *sm* is a :class:`~difflib."
"SequenceMatcher` object (:issue:`13248`)."
msgstr ""
"Python 3.2 で非推奨となった :meth:`difflib.SequenceMatcher.isbjunk` および :"
"meth:`difflib.SequenceMatcher.isbpopular` は削除されました: *sm* が :class:"
"`~difflib.SequenceMatcher` であるとして、 ``x in sm.bjunk`` と ``x in sm."
"bpopular`` を使うようにしてください。 (:issue:`13248`)"

#: ../../whatsnew/3.4.rst:2224
msgid "Code Cleanups"
msgstr "コードの整理"

#: ../../whatsnew/3.4.rst:2226
msgid ""
"The unused and undocumented internal ``Scanner`` class has been removed from "
"the :mod:`pydoc` module."
msgstr ""
":mod:`pydoc` モジュールで、使用されておらず文書化もされていなかった内部的な "
"``Scanner`` クラスが削除されました。"

#: ../../whatsnew/3.4.rst:2229
msgid ""
"The private and effectively unused ``_gestalt`` module has been removed, "
"along with the private :mod:`platform` functions ``_mac_ver_lookup``, "
"``_mac_ver_gstalt``, and ``_bcd2str``, which would only have ever been "
"called on badly broken OSX systems (see :issue:`18393`)."
msgstr ""
"ひどく壊れていた OSX システムで呼ばれる可能性があるのみだった :mod:"
"`platform` モジュールの非公開関数 ``_mac_ver_lookup``, ``_mac_ver_gstalt``, "
"``_bcd2str`` とあわせて、非公開かつ実質的に未使用だった ``_gestalt`` モジュー"
"ルが削除されました。 (see :issue:`18393`)"

#: ../../whatsnew/3.4.rst:2234
msgid ""
"The hardcoded copies of certain :mod:`stat` constants that were included in "
"the :mod:`tarfile` module namespace have been removed."
msgstr ""
":mod:`tarfile` モジュールの名前空間内に :mod:`stat` 定数群がハードコードでコ"
"ピーされていましたが、これは削除されました。"

#: ../../whatsnew/3.4.rst:2240
msgid "Porting to Python 3.4"
msgstr "Python 3.4 への移植"

#: ../../whatsnew/3.4.rst:2242
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"このセクションでは前述の変更とバグフィックスにより必要となるかもしれないコー"
"ドの変更を列挙します:"

#: ../../whatsnew/3.4.rst:2247
msgid "Changes in 'python' Command Behavior"
msgstr "'python' コマンドの挙動の変更"

#: ../../whatsnew/3.4.rst:2249
msgid ""
"In a posix shell, setting the :envvar:`PATH` environment variable to an "
"empty value is equivalent to not setting it at all.  However, setting :"
"envvar:`PYTHONPATH` to an empty value was *not* equivalent to not setting it "
"at all: setting :envvar:`PYTHONPATH` to an empty value was equivalent to "
"setting it to ``.``, which leads to confusion when reasoning by analogy to "
"how :envvar:`PATH` works.  The behavior now conforms to the posix convention "
"for :envvar:`PATH`."
msgstr ""
"POSIX シェルでは、環境変数 :envvar:`PATH` に空の値をセットすることは、何も"
"セットしないことと同じです。ところが :envvar:`PYTHONPATH` に空の値をセットす"
"ることは、何もセットしないことと *まったく同じではありませんでした*: :envvar:"
"`PYTHONPATH` に空の値をセットすると、 ``.`` をセットしたのと同じ意味になって"
"いて、これは :envvar:`PATH` での振舞いから類推しようとすると混乱を招くもので"
"した。この振る舞いは :envvar:`PATH` での POSIX の慣習に従うように改められまし"
"た。"

#: ../../whatsnew/3.4.rst:2257
msgid ""
"The [X refs, Y blocks] output of a debug (``--with-pydebug``) build of the "
"CPython interpreter is now off by default.  It can be re-enabled using the "
"``-X showrefcount`` option.  (Contributed by Ezio Melotti in :issue:`17323`.)"
msgstr ""
"CPython インタプリタのデバッグビルド (``--with-pydebug``) での出力 [X refs, "
"Y blocks] がデフォルトではオフになりました。 ``-X showrefcount`` オプション起"
"動で再度有効に出来ます。 (Contributed by Ezio Melotti in :issue:`17323`.)"

#: ../../whatsnew/3.4.rst:2261
msgid ""
"The python command and most stdlib scripts (as well as :mod:`argparse`) now "
"output ``--version`` information to ``stdout`` instead of ``stderr`` (for "
"issue list see :ref:`other-improvements-3.4` above)."
msgstr ""
":program:`python` コマンドとほとんどの標準ライブラリスクリプト (また :mod:"
"`argparse` も) において、 ``--version`` が情報出力を ``stderr`` ではなく "
"``stdout`` に行うようになりました (issue へのリンクは :ref:`other-"
"improvements-3.4` セクション内参照)。"

#: ../../whatsnew/3.4.rst:2267
msgid "Changes in the Python API"
msgstr "Python API の変更"

#: ../../whatsnew/3.4.rst:2269
msgid ""
"The ABCs defined in :mod:`importlib.abc` now either raise the appropriate "
"exception or return a default value instead of raising :exc:"
"`NotImplementedError` blindly. This will only affect code calling :func:"
"`super` and falling through all the way to the ABCs. For compatibility, "
"catch both :exc:`NotImplementedError` or the appropriate exception as needed."
msgstr ""
":mod:`importlib.abc` 内に定義されている ABC は、無分別に :exc:"
"`NotImplementedError` を投げるのではなく、相応しい例外を投げるかデフォルト値"
"を返すかのどちらかになりました。このことは :func:`super` を呼び出して ABC が"
"するがままに任せているコードにのみ影響します。互換性のために、必要であれば :"
"exc:`NotImplementedError` とその投げられる新たな例外の両方を捕捉してくださ"
"い。"

#: ../../whatsnew/3.4.rst:2275
msgid ""
"The module type now initializes the :attr:`__package__` and :attr:"
"`__loader__` attributes to ``None`` by default. To determine if these "
"attributes were set in a backwards-compatible fashion, use e.g. "
"``getattr(module, '__loader__', None) is not None``.  (:issue:`17115`.)"
msgstr ""
"モジュール型が :attr:`__package__` 属性と :attr:`__loader__` 属性をデフォルト"
"で ``None`` で初期化するようになりました。これら属性がセットされたかどうかを"
"後方互換性のある方法で調べるには、たとえば ``getattr(module, '__loader__', "
"None) is not None`` のようにしてください。 (:issue:`17115`.)"

#: ../../whatsnew/3.4.rst:2280
msgid ""
":meth:`!importlib.util.module_for_loader` now sets ``__loader__`` and "
"``__package__`` unconditionally to properly support reloading. If this is "
"not desired then you will need to set these attributes manually. You can "
"use :func:`importlib.util.module_to_load` for module management."
msgstr ""

#: ../../whatsnew/3.4.rst:2285
msgid ""
"Import now resets relevant attributes (e.g. ``__name__``, ``__loader__``, "
"``__package__``, ``__file__``, ``__cached__``) unconditionally when "
"reloading. Note that this restores a pre-3.3 behavior in that it means a "
"module is re-found when re-loaded (:issue:`19413`)."
msgstr ""
"インポートがリロードの際に無条件に関連属性 (例えば ``__name__``, "
"``__loader__``, ``__package__``, ``__file__``, ``__cached__``) をリセットする"
"ようになりました。これは、3.3 以前のリロードの際にモジュールを再発見する振る"
"舞いと同じものを復元するものであるということを注記しておきます。 (:issue:"
"`19413`)"

#: ../../whatsnew/3.4.rst:2290
msgid ""
"Frozen packages no longer set ``__path__`` to a list containing the package "
"name, they now set it to an empty list.  The previous behavior could cause "
"the import system to do the wrong thing on submodule imports if there was "
"also a directory with the same name as the frozen package.  The correct way "
"to determine if a module is a package or not is to use ``hasattr(module, "
"'__path__')`` (:issue:`18065`)."
msgstr ""
"凍結パッケージ (frozen package) はもはや ``__path__`` にパッケージ名を含むリ"
"ストをセットせず、空リストをセットします。この以前の振る舞いは、凍結パッケー"
"ジと同じ名前を持つディレクトリが存在する場合のサブモジュールのインポートで、"
"インポートシステムが間違ったことを起こしうるものでした。モジュールがパッケー"
"ジなのかそうでないのかを決める正しい方法は、 ``hasattr(module, '__path__')`` "
"を使うことです。 (:issue:`18065`)"

#: ../../whatsnew/3.4.rst:2297
msgid ""
"Frozen modules no longer define a ``__file__`` attribute. It's semantically "
"incorrect for frozen modules to set the attribute as they are not loaded "
"from any explicit location. If you must know that a module comes from frozen "
"code then you can see if the module's ``__spec__.location`` is set to "
"``'frozen'``, check if the loader is a subclass of :class:`importlib."
"machinery.FrozenImporter`, or if Python 2 compatibility is necessary you can "
"use :func:`!imp.is_frozen`."
msgstr ""

#: ../../whatsnew/3.4.rst:2305
msgid ""
":func:`py_compile.compile` now raises :exc:`FileExistsError` if the file "
"path it would write to is a symlink or a non-regular file. This is to act as "
"a warning that import will overwrite those files with a regular file "
"regardless of what type of file path they were originally."
msgstr ""
":func:`py_compile.compile` が書き込み先ファイルパスがシンボリックリンクか非レ"
"ギュラーファイルの場合に :exc:`FileExistsError` を投げるようになりました。こ"
"れは、警告の役割を果たすためです、インポートがファイルパスの元のファイルタイ"
"プが何かによらずに、それらファイルをレギュラーファイルで上書きすることの。"

#: ../../whatsnew/3.4.rst:2310
msgid ""
":meth:`importlib.abc.SourceLoader.get_source` no longer raises :exc:"
"`ImportError` when the source code being loaded triggers a :exc:"
"`SyntaxError` or :exc:`UnicodeDecodeError`. As :exc:`ImportError` is meant "
"to be raised only when source code cannot be found but it should, it was "
"felt to be over-reaching/overloading of that meaning when the source code is "
"found but improperly structured. If you were catching ImportError before and "
"wish to continue to ignore syntax or decoding issues, catch all three "
"exceptions now."
msgstr ""
"ソースコードをロードしようとして :exc:`SyntaxError` かもしくは :exc:"
"`UnicodeDecodeError` を引き起こした場合に、 :meth:`importlib.abc."
"SourceLoader.get_source` はそれを :exc:`ImportError` に読み替えて投げることを"
"しなくなりました。 :exc:`ImportError` はそうあるべきなのに見つからない場合に"
"のみ投げられるべきなので、ソースコードが見つかったけれども正しくない構造であ"
"る場合の意味にまで及ぶのは、手を伸ばし過ぎで過負荷です。ImportError を捕捉し"
"ていたコードで今後とも構文エラーとデコーディングの問題を無視したいと望むなら"
"ば、これら 3 つ全ての例外を捕捉するようにしてください。 (訳注: `changeset "
"84172:e353f64dfd95 <https://hg.python.org/cpython/rev/e353f64dfd95>`_ )"

#: ../../whatsnew/3.4.rst:2319
msgid ""
":func:`functools.update_wrapper` and :func:`functools.wraps` now correctly "
"set the ``__wrapped__`` attribute to the function being wrapped, even if "
"that function also had its ``__wrapped__`` attribute set. This means "
"``__wrapped__`` attributes now correctly link a stack of decorated functions "
"rather than every ``__wrapped__`` attribute in the chain referring to the "
"innermost function. Introspection libraries that assumed the previous "
"behaviour was intentional can use :func:`inspect.unwrap` to access the first "
"function in the chain that has no ``__wrapped__`` attribute."
msgstr ""
":func:`functools.update_wrapper` と :func:`functools.wraps` が、たとえその関"
"数も ``__wrapped__`` を持っていたとしても正しくその関数が包まれるように "
"``__wrapped__`` 属性値をセットするようになりました。つまり ``__wrapped__`` 属"
"性は、以前のようにチェイン内の全ての ``__wrapped__`` 属性が最も内側の関数を参"
"照するのではなく、デコレートされた関数の積み上げを正しくリンクするようになっ"
"たということです。以前の振る舞いが意図されたものであると思い込んでいたイント"
"ロスペクションライブラリの作者は、チェインの中の最初の関数 (``__wrapped__`` "
"属性を持たない) にアクセスするのに :func:`inspect.unwrap` を使えます。(---訳"
"注: :issue:`17482`. わかりにくいので実例で。中で適切に @wrap を使うデコレー"
"タ @deco1、@deco2 があるとして、my_func をこの両方でデコレートするとします。"
"この場合に、Python 3.3 までは ``my_func.__wrapped__.__wrapped__`` が "
"AttributeError になります。今回のこの修正で ``my_func.__wrapped__."
"__wrapped__`` は期待通りに振舞います。 ---)"

#: ../../whatsnew/3.4.rst:2329
msgid ""
":func:`inspect.getfullargspec` has been reimplemented on top of :func:"
"`inspect.signature` and hence handles a much wider variety of callable "
"objects than it did in the past. It is expected that additional builtin and "
"extension module callables will gain signature metadata over the course of "
"the Python 3.4 series. Code that assumes that :func:`inspect.getfullargspec` "
"will fail on non-Python callables may need to be adjusted accordingly."
msgstr ""
":func:`inspect.getfullargspec` は、 :func:`inspect.signature` を前提とした再"
"実装がなされました。これにより、かつて扱えていたよりも遥かに広い種類の呼び出"
"し可能 (callable) を扱うようになりました (訳注: 例えば :func:`open` などは "
"Python 3.3 までは扱えなかった)。Python 3.4 系列の経過のなかで、追加で組み込み"
"や拡張モジュールの callable がシグニチャのメタデータを持つことが期待されてい"
"ます。 :func:`inspect.getfullargspec` が非 Python callable で失敗することを前"
"提としたコードは、適宜調整の必要があるかもしれません。"

#: ../../whatsnew/3.4.rst:2337
msgid ""
":class:`importlib.machinery.PathFinder` now passes on the current working "
"directory to objects in :data:`sys.path_hooks` for the empty string. This "
"results in :data:`sys.path_importer_cache` never containing ``''``, thus "
"iterating through :data:`sys.path_importer_cache` based on :data:`sys.path` "
"will not find all keys. A module's ``__file__`` when imported in the current "
"working directory will also now have an absolute path, including when using "
"``-m`` with the interpreter (except for ``__main__.__file__`` when a script "
"has been executed directly using a relative path) (Contributed by Brett "
"Cannon in :issue:`18416`).  is specified on the command-line) (:issue:"
"`18416`)."
msgstr ""
":class:`importlib.machinery.PathFinder` は :data:`sys.path_hooks` 内のオブ"
"ジェクトに、空文字列の場合は現在作業ディレクトリを渡すようになりました。結果"
"の :data:`sys.path_importer_cache` が決して ``''`` を含まないことになるの"
"で、 :data:`sys.path` に基いて :data:`sys.path_importer_cache` を巡回しても全"
"てのキーを見つけられません。インタプリタを ``-m`` で起動した場合も含め、現在"
"作業ディレクトリ内でインポートされた際のモジュールの ``__file__`` も絶対パス"
"で持つようになりました (ただしスクリプトがコマンドラインから相対パスを使って"
"直接実行された際の ``__main__.__file__`` を除きます (Contributed by Brett "
"Cannon in :issue:`18416`))。 (:issue:`18416`)"

#: ../../whatsnew/3.4.rst:2348
msgid ""
"The removal of the *strict* argument to :class:`~http.client.HTTPConnection` "
"and :class:`~http.client.HTTPSConnection` changes the meaning of the "
"remaining arguments if you are specifying them positionally rather than by "
"keyword.  If you've been paying attention to deprecation warnings your code "
"should already be specifying any additional arguments via keywords."
msgstr ""
":class:`~http.client.HTTPConnection` と :class:`~http.client."
"HTTPSConnection` から *strict* 引数が削除されたことは、残りの引数をキーワード"
"引数としてではなく位置引数として使っていたなら意味が変わってしまいます。非推"
"奨警告に注意を払ってきたのであれば、あなたのコードは既に全てのオプショナル引"
"数をキーワードで渡しているはずです。"

#: ../../whatsnew/3.4.rst:2354
msgid ""
"Strings between ``from __future__ import ...`` statements now *always* raise "
"a :exc:`SyntaxError`.  Previously if there was no leading docstring, an "
"interstitial string would sometimes be ignored.  This brings CPython into "
"compliance with the language spec; Jython and PyPy already were. (:issue:"
"`17434`)."
msgstr ""
"``from __future__ import ...`` ステートメントの間に文字列が含まれる場合に *常"
"に* :exc:`SyntaxError` となるようになりました。以前はモジュールの docstring "
"が先頭にある場合とない場合で振る舞いが違っていて、ない場合にこのエラーが意図"
"せず無視される場合がありました。この修正は CPython を言語仕様に準拠させるもの"
"です。Jython と PyPy では既にこれが行われています。 (:issue:`17434`)"

#: ../../whatsnew/3.4.rst:2360
msgid ""
":meth:`ssl.SSLSocket.getpeercert` and :meth:`ssl.SSLSocket.do_handshake` now "
"raise an :exc:`OSError` with ``ENOTCONN`` when the ``SSLSocket`` is not "
"connected, instead of the previous behavior of raising an :exc:"
"`AttributeError`.  In addition, :meth:`~ssl.SSLSocket.getpeercert` will "
"raise a :exc:`ValueError` if the handshake has not yet been done."
msgstr ""
":meth:`ssl.SSLSocket.getpeercert` と :meth:`ssl.SSLSocket.do_handshake` は、 "
"``SSLSocket`` が未接続時に以前は :exc:`AttributeError` を投げていましたが、 "
"``ENOTCONN`` を持った :exc:`OSError` を投げるように改められました。加えて :"
"meth:`~ssl.SSLSocket.getpeercert` はハンドシェイクが未実施の場合に :exc:"
"`ValueError` を投げるようになりました。"

#: ../../whatsnew/3.4.rst:2366
msgid ""
":func:`base64.b32decode` now raises a :exc:`binascii.Error` when the input "
"string contains non-b32-alphabet characters, instead of a :exc:`TypeError`.  "
"This particular :exc:`TypeError` was missed when the other :exc:"
"`TypeError`\\ s were converted.  (Contributed by Serhiy Storchaka in :issue:"
"`18011`.)  Note: this change was also inadvertently applied in Python 3.3.3."
msgstr ""
":func:`base64.b32decode` が入力文字列が非 b32 文字を含む場合に :exc:"
"`TypeError` ではなく :exc:`binascii.Error` を投げるようになりました。今回のこ"
"の :exc:`TypeError` はほか (訳注: if the input is incorrectly padded のとき) "
"の :exc:`TypeError` が置き換えられた際に置き換え忘れられたものでした。 "
"(Contributed by Serhiy Storchaka in :issue:`18011`.) 注意: この修正は後方互換"
"性を保てないので本来メンテナンスリリースの Python 3.3 には入るべきではなかっ"
"たのですが、不注意で Python 3.3.3 にも行われてしまいました。"

#: ../../whatsnew/3.4.rst:2373
msgid ""
"The :attr:`!file` attribute is now automatically closed when the creating :"
"class:`!cgi.FieldStorage` instance is garbage collected. If you were pulling "
"the file object out separately from the :class:`!cgi.FieldStorage` instance "
"and not keeping the instance alive, then you should either store the entire :"
"class:`!cgi.FieldStorage` instance or read the contents of the file before "
"the :class:`!cgi.FieldStorage` instance is garbage collected."
msgstr ""

#: ../../whatsnew/3.4.rst:2380
msgid ""
"Calling ``read`` or ``write`` on a closed SSL socket now raises an "
"informative :exc:`ValueError` rather than the previous more mysterious :exc:"
"`AttributeError` (:issue:`9177`)."
msgstr ""
"クローズ済みの SSL ソケットに対する ``read`` や ``write`` 呼び出しで、以前の"
"ようなミステリアスな :exc:`AttributeError` ではなく、役に立つ :exc:"
"`ValueError` を投げるようになりました。 (:issue:`9177`)"

#: ../../whatsnew/3.4.rst:2384
msgid ""
":meth:`slice.indices` no longer produces an :exc:`OverflowError` for huge "
"values.  As a consequence of this fix, :meth:`slice.indices` now raises a :"
"exc:`ValueError` if given a negative length; previously it returned nonsense "
"values (:issue:`14794`)."
msgstr ""
":meth:`slice.indices` が巨大な値で :exc:`OverflowError` を起こすことはなくな"
"りました。この修正からの流れで :meth:`slice.indices` は負の値に対して :exc:"
"`ValueError` を投げるようになっています。以前はこれは馬鹿げた値を返していまし"
"た。 (:issue:`14794`)"

#: ../../whatsnew/3.4.rst:2389
msgid ""
"The :class:`complex` constructor, unlike the :mod:`cmath` functions, was "
"incorrectly accepting :class:`float` values if an object's ``__complex__`` "
"special method returned one.  This now raises a :exc:`TypeError`. (:issue:"
"`16290`.)"
msgstr ""
"特殊メソッド ``__complex__`` が複素数ではなく :class:`float` を返す実装をして"
"いるオブジェクトを渡すと :mod:`cmath` 関数ではエラーとなり、 :class:"
"`complex` コンストラクタでは受け容れられていましたが、これはいずれも :exc:"
"`TypeError` となるように改められました。(:issue:`16290`.)"

#: ../../whatsnew/3.4.rst:2394
msgid ""
"The :class:`int` constructor in 3.2 and 3.3 erroneously accepts :class:"
"`float` values for the *base* parameter.  It is unlikely anyone was doing "
"this, but if so, it will now raise a :exc:`TypeError` (:issue:`16772`)."
msgstr ""
"3.2 と 3.3 での :class:`int` コンストラクタが *base* パラメータとして誤って :"
"class:`float` を許容してしまっていました。それをわざわざやっているとも思えな"
"いですが、そうしていたなら今後は :exc:`TypeError` になります。 (:issue:"
"`16772`)"

#: ../../whatsnew/3.4.rst:2398
msgid ""
"Defaults for keyword-only arguments are now evaluated *after* defaults for "
"regular keyword arguments, instead of before.  Hopefully no one wrote any "
"code that depends on the previous buggy behavior (:issue:`16967`)."
msgstr ""
"キーワード専用引数へのデフォルト値が、通常のキーワード引数へのデフォルト値評"
"価の *あとで* 評価されるようになりました。前ではなく。望むらくは誰一人以前の"
"バギーな振る舞いに頼っちゃうおバカなコードを書いていませんように。願います。 "
"(:issue:`16967`)"

#: ../../whatsnew/3.4.rst:2402
msgid ""
"Stale thread states are now cleared after :func:`~os.fork`.  This may cause "
"some system resources to be released that previously were incorrectly kept "
"perpetually alive (for example, database connections kept in thread-local "
"storage).  (:issue:`17094`.)"
msgstr ""
"古いスレッド状態が :func:`~os.fork` 後にクリアされるようになりました。これに"
"より、以前は不適切に永遠に生き残ってしまっていたいくつかのシステムリソース "
"(たとえば、スレッドローカル記憶内に維持されたデータベース接続) が解放されるよ"
"うになります。 (:issue:`17094`.)"

#: ../../whatsnew/3.4.rst:2407
msgid ""
"Parameter names in ``__annotations__`` dicts are now mangled properly, "
"similarly to :attr:`~function.__kwdefaults__`. (Contributed by Yury "
"Selivanov in :issue:`20625`.)"
msgstr ""

#: ../../whatsnew/3.4.rst:2411
msgid ""
":attr:`hashlib.hash.name` now always returns the identifier in lower case. "
"Previously some builtin hashes had uppercase names, but now that it is a "
"formal public interface the naming has been made consistent (:issue:`18532`)."
msgstr ""
":attr:`hashlib.hash.name` が識別子を常に小文字で返すようになりました。以前は"
"いくつかの組み込みハッシュが大文字名を持っていましたが、公式インターフェイス"
"であることから、命名に一貫性を持たせるようにしました。 (:issue:`18532`)"

#: ../../whatsnew/3.4.rst:2415
msgid ""
"Because :mod:`unittest.TestSuite` now drops references to tests after they "
"are run, test harnesses that reuse a :class:`~unittest.TestSuite` to re-run "
"a set of tests may fail.   Test suites should not be re-used in this fashion "
"since it means state is retained between test runs, breaking the test "
"isolation that :mod:`unittest` is designed to provide.  However, if the lack "
"of isolation is considered acceptable, the old behavior can be restored by "
"creating a :mod:`~unittest.TestSuite` subclass that defines a "
"``_removeTestAtIndex`` method that does nothing (see :meth:`.TestSuite."
"__iter__`) (:issue:`11798`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2425
msgid ""
":mod:`unittest` now uses :mod:`argparse` for command line parsing.  There "
"are certain invalid command forms that used to work that are no longer "
"allowed; in theory this should not cause backward compatibility issues since "
"the disallowed command forms didn't make any sense and are unlikely to be in "
"use."
msgstr ""
":mod:`unittest` がコマンドライン解析に :mod:`argparse` を使うようになりまし"
"た。このことで、以前は動作していた不当なコマンド形式で許されなくなったものが"
"あります。理屈から言えばこれは後方互換性の問題ではないはずです。許されなく"
"なったコマンド形式は意味をなしていなかったものですから、使われていたとは思え"
"ません。"

#: ../../whatsnew/3.4.rst:2430
msgid ""
"The :func:`re.split`, :func:`re.findall`, and :func:`re.sub` functions, and "
"the :meth:`~re.match.group` and :meth:`~re.match.groups` methods of "
"``match`` objects now always return a *bytes* object when the string to be "
"matched is a :term:`bytes-like object`.  Previously the return type matched "
"the input type, so if your code was depending on the return value being, "
"say, a ``bytearray``, you will need to change your code."
msgstr ""
"関数 :func:`re.split`, :func:`re.findall`, :func:`re.sub` と、 ``match`` オブ"
"ジェクトのメソッド :meth:`~re.match.group`, :meth:`~re.match.groups` は、操作"
"対象が :term:`bytes-like object` である場合に常に *bytes* オブジェクトを返す"
"ようになりました。以前は戻り値型は入力型に合わせられていました。戻り値の型が"
"たとえば ``bytearray`` になることに依存していたのであれば、コードを修正する必"
"要があります。"

#: ../../whatsnew/3.4.rst:2437
msgid ""
":mod:`!audioop` functions now raise an error immediately if passed string "
"input, instead of failing randomly later on (:issue:`16685`)."
msgstr ""

#: ../../whatsnew/3.4.rst:2440
msgid ""
"The new *convert_charrefs* argument to :class:`~html.parser.HTMLParser` "
"currently defaults to ``False`` for backward compatibility, but will "
"eventually be changed to default to ``True``.  It is recommended that you "
"add this keyword, with the appropriate value, to any :class:`~html.parser."
"HTMLParser` calls in your code (:issue:`13633`)."
msgstr ""
":class:`~html.parser.HTMLParser` の新規引数 *convert_charrefs* は現在は後方互"
"換性維持のために ``False`` をデフォルトとしていますが、最終的には ``True`` が"
"デフォルトになります。あなたのコードでは :class:`~html.parser.HTMLParser` の"
"全ての呼び出しでこれをキーワード引数として明示することをお勧めします。 (:"
"issue:`13633`)"

#: ../../whatsnew/3.4.rst:2446
msgid ""
"Since the *digestmod* argument to the :func:`hmac.new` function will in the "
"future have no default, all calls to :func:`hmac.new` should be changed to "
"explicitly specify a *digestmod* (:issue:`17276`)."
msgstr ""
":func:`hmac.new` 関数の *digestmod* 引数からデフォルト値が消える予定です。の"
"で、 :func:`hmac.new` 呼び出しは常に *digestmod* を明示するように修正すべきで"
"す。 (:issue:`17276`)"

#: ../../whatsnew/3.4.rst:2450
msgid ""
"Calling :func:`sysconfig.get_config_var` with the ``SO`` key, or looking "
"``SO`` up in the results of a call to :func:`sysconfig.get_config_vars` is "
"deprecated.  This key should be replaced by ``EXT_SUFFIX`` or "
"``SHLIB_SUFFIX``, depending on the context (:issue:`19555`)."
msgstr ""
":func:`sysconfig.get_config_var` にキー ``SO`` を渡すことと :func:`sysconfig."
"get_config_vars` の呼び出し結果から ``SO`` キーを探すことは非推奨です。この"
"キーは文脈依存の ``EXT_SUFFIX`` または ``SHLIB_SUFFIX`` で置き換えられるべき"
"です。 (:issue:`19555`)"

#: ../../whatsnew/3.4.rst:2455
msgid ""
"Any calls to ``open`` functions that specify ``U`` should be modified. ``U`` "
"is ineffective in Python3 and will eventually raise an error if used. "
"Depending on the function, the equivalent of its old Python2 behavior can be "
"achieved using either a *newline* argument, or if necessary by wrapping the "
"stream in :mod:`~io.TextIOWrapper` to use its *newline* argument (:issue:"
"`15204`)."
msgstr ""
"``open`` 系関数にモード ``U`` を使っていたコードは修正すべきです。 ``U`` は "
"Python 3 では無力であり、いずれはこれの使用は例外を投げるようになる予定です。"
"使う関数に依存しますが、 *newline* 引数を使うか、あるいは必要であればストリー"
"ムを :mod:`~io.TextIOWrapper` でラップしてその *newline* 引数を使うことで、そ"
"の古い Python 2 の振る舞いと同等なものを実現出来ます。 (:issue:`15204`)"

#: ../../whatsnew/3.4.rst:2462
msgid ""
"If you use ``pyvenv`` in a script and desire that pip *not* be installed, "
"you must add ``--without-pip`` to your command invocation."
msgstr ""
"スクリプト内から ``pyvenv`` を使っていて、pip がインストール *されない* こと"
"を望むならば、コマンド呼び出しに ``--without-pip`` を追加しなければなりませ"
"ん。"

#: ../../whatsnew/3.4.rst:2466
msgid ""
"The default behavior of :func:`json.dump` and :func:`json.dumps` when an "
"indent is specified has changed: it no longer produces trailing spaces after "
"the item separating commas at the ends of lines.  This will matter only if "
"you have tests that are doing white-space-sensitive comparisons of such "
"output (:issue:`16333`)."
msgstr ""
"indent を明示した場合の :func:`json.dump` と :func:`json.dumps` のデフォルト"
"の振る舞いが変更されました。要素を区切るカンマが行末に来る場合の後ろに、空白"
"を追加しなくなりました。これはその出力のテストを空白に繊細な比較をすることで"
"行っている場合にだけ問題になります。 (:issue:`16333`)"

#: ../../whatsnew/3.4.rst:2472
msgid ""
":mod:`doctest` now looks for doctests in extension module ``__doc__`` "
"strings, so if your doctest test discovery includes extension modules that "
"have things that look like doctests in them you may see test failures you've "
"never seen before when running your tests (:issue:`3158`)."
msgstr ""
":mod:`doctest` が拡張モジュールの ``__doc__`` 文字列から doctest を見つけるよ"
"うになったので、doctest のテストディスカバリが拡張モジュールを含んでいてその"
"中で doctest のようにみえるものが含まれていると、テスト実行時にこれまで見かけ"
"たことのないテスト失敗を目にするかもしれません。 (:issue:`3158`)"

#: ../../whatsnew/3.4.rst:2477
msgid ""
"The :mod:`collections.abc` module has been slightly refactored as part of "
"the Python startup improvements.  As a consequence of this, it is no longer "
"the case that importing :mod:`collections` automatically imports :mod:"
"`collections.abc`.  If your program depended on the (undocumented) implicit "
"import, you will need to add an explicit ``import collections.abc`` (:issue:"
"`20784`)."
msgstr ""
":mod:`collections.abc` モジュールが、Python スタートアップの改善の一環で少々"
"リファクタリングが行われました。これの結果として :mod:`collections` は自動"
"で :mod:`collections.abc` をインポートしなくなりました。もしもこの (文書化さ"
"れていなかった) 暗黙でのインポートに依存していたのであれば、 ``import "
"collections.abc`` として明示的にインポートを追加する必要があります。 (:issue:"
"`20784`)"

#: ../../whatsnew/3.4.rst:2486
msgid "Changes in the C API"
msgstr "C API の変更"

#: ../../whatsnew/3.4.rst:2488
msgid ""
":c:func:`PyEval_EvalFrameEx`, :c:func:`PyObject_Repr`, and :c:func:"
"`PyObject_Str`, along with some other internal C APIs, now include a "
"debugging assertion that ensures they are not used in situations where they "
"may silently discard a currently active exception. In cases where discarding "
"the active exception is expected and desired (for example, because it has "
"already been saved locally with :c:func:`PyErr_Fetch` or is being "
"deliberately replaced with a different exception), an explicit :c:func:"
"`PyErr_Clear` call will be needed to avoid triggering the assertion when "
"invoking these operations (directly or indirectly) and running against a "
"version of Python that is compiled with assertions enabled."
msgstr ""
"いくつかの内部 C API とともに :c:func:`PyEval_EvalFrameEx`, :c:func:"
"`PyObject_Repr`, :c:func:`PyObject_Str` に、現在アクティブな例外を黙殺する状"
"況で使われていないことを確かにするためのデバッグアサーションが仕込まれまし"
"た。アクティブな例外を捨てることが期待されて望ましいケース (たとえば、既に"
"ローカルに :c:func:`PyErr_Fetch` で保存済みであるとか、異なる例外に置き換える"
"ことが意図である場合) は、アサーション有効でコンパイルされている Python バー"
"ジョンで実行して、(直接的・間接的によらず) それら操作呼び出しがそのアサーショ"
"ンを発行するのを、明示的に :c:func:`PyErr_Clear` 呼び出しをすることで潰してく"
"ださい。"

#: ../../whatsnew/3.4.rst:2500
msgid ""
":c:func:`PyErr_SetImportError` now sets :exc:`TypeError` when its **msg** "
"argument is not set. Previously only ``NULL`` was returned with no exception "
"set."
msgstr ""
":c:func:`PyErr_SetImportError` が **msg** がセットされていない場合に :exc:"
"`TypeError` をセットするようになりました。以前は例外をセットすることなく "
"``NULL`` を返すだけでした。"

#: ../../whatsnew/3.4.rst:2504
msgid ""
"The result of the :c:data:`PyOS_ReadlineFunctionPointer` callback must now "
"be a string allocated by :c:func:`PyMem_RawMalloc` or :c:func:"
"`PyMem_RawRealloc`, or ``NULL`` if an error occurred, instead of a string "
"allocated by :c:func:`PyMem_Malloc` or :c:func:`PyMem_Realloc` (:issue:"
"`16742`)"
msgstr ""
":c:data:`PyOS_ReadlineFunctionPointer` コールバックは、エラー時に ``NULL`` を"
"返すか :c:func:`PyMem_RawMalloc` または :c:func:`PyMem_RawRealloc` でアロケー"
"トした文字列を返さなければなりません。 :c:func:`PyMem_Malloc` や :c:func:"
"`PyMem_Realloc` でアロケートした文字列はダメです。 (:issue:`16742`)"

#: ../../whatsnew/3.4.rst:2510
msgid ""
":c:func:`PyThread_set_key_value` now always set the value. In Python 3.3, "
"the function did nothing if the key already exists (if the current value is "
"a non-``NULL`` pointer)."
msgstr ""
":c:func:`PyThread_set_key_value` が必ず値をセットするようになりました。"
"Python 3.3 ではこの関数はキーが既存 (で現在値が ``NULL`` ポインタでない) の場"
"合には何もしませんでした。"

#: ../../whatsnew/3.4.rst:2514
msgid ""
"The ``f_tstate`` (thread state) field of the :c:type:`PyFrameObject` "
"structure has been removed to fix a bug: see :issue:`14432` for the "
"rationale."
msgstr ""
":c:type:`PyFrameObject` 構造体のフィールド ``f_tstate`` (thread state) が、バ"
"グをフィックスするために削除されました: 論拠については :issue:`14432` を参照"
"してください。"

#: ../../whatsnew/3.4.rst:2519
msgid "Changed in 3.4.3"
msgstr "3.4.3 の変更"

#: ../../whatsnew/3.4.rst:2524
msgid ""
"PEP 476: Enabling certificate verification by default for stdlib http clients"
msgstr ""
"PEP 476: stdlib http クライアントが証明書の検証を行うのをデフォルトで有効化"

#: ../../whatsnew/3.4.rst:2526
msgid ""
":mod:`http.client` and modules which use it, such as :mod:`urllib.request` "
"and :mod:`xmlrpc.client`, will now verify that the server presents a "
"certificate which is signed by a CA in the platform trust store and whose "
"hostname matches the hostname being requested by default, significantly "
"improving security for many applications."
msgstr ""
":mod:`http.client` とこのモジュールを使っている例えば :mod:`urllib.request` "
"や :mod:`xmlrpc.client`  が、サーバをプラットフォームが持つ信頼ストアにある "
"CA により署名された証明書で検証し、そのホスト名がリクエストされたホスト名かど"
"うかのチェックをデフォルトで行うようになりました。これは多くのアプリケーショ"
"ンにとって大幅なセキュリティ改善になります。"

#: ../../whatsnew/3.4.rst:2532
msgid ""
"For applications which require the old previous behavior, they can pass an "
"alternate context::"
msgstr ""
"以前の古い振る舞いが必要なアプリケーションでは、代わりとなるコンテキストを渡"
"せます::"

#: ../../whatsnew/3.4.rst:2535
msgid ""
"import urllib.request\n"
"import ssl\n"
"\n"
"# This disables all verification\n"
"context = ssl._create_unverified_context()\n"
"\n"
"# This allows using a specific certificate for the host, which doesn't need\n"
"# to be in the trust store\n"
"context = ssl.create_default_context(cafile=\"/path/to/file.crt\")\n"
"\n"
"urllib.request.urlopen(\"https://invalid-cert\", context=context)"
msgstr ""
