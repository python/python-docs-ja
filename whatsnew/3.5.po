# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Tetsuo Koyama <tkoyama010@gmail.com>, 2021
# yaakiyu, 2023
# Arihiro TAKASE, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-06 14:16+0000\n"
"PO-Revision-Date: 2021-06-29 13:04+0000\n"
"Last-Translator: Arihiro TAKASE, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.5.rst:3
msgid "What's New In Python 3.5"
msgstr "What's New In Python 3.5"

#: ../../whatsnew/3.5.rst:0
msgid "Editors"
msgstr "エディタ"

#: ../../whatsnew/3.5.rst:5
msgid "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"
msgstr "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"

#: ../../whatsnew/3.5.rst:47
msgid ""
"This article explains the new features in Python 3.5, compared to 3.4. "
"Python 3.5 was released on September 13, 2015.  See the `changelog <https://"
"docs.python.org/3.5/whatsnew/changelog.html>`_ for a full list of changes."
msgstr ""
"この記事では 3.4 と比較した Python 3.5 の新機能を解説します。\n"
"Python 3.5 は2015年9月13日にリリースされました。\n"
"全詳細については `変更履歴 <https://docs.python.org/3.5/whatsnew/changelog."
"html>`_ をご覧ください。"

#: ../../whatsnew/3.5.rst:54
msgid ":pep:`478` - Python 3.5 Release Schedule"
msgstr ":pep:`478` - Python 3.5 リリーススケジュール"

#: ../../whatsnew/3.5.rst:58
msgid "Summary -- Release highlights"
msgstr "概要 -- リリースハイライト"

#: ../../whatsnew/3.5.rst:60
msgid "New syntax features:"
msgstr "新たな文法機能:"

#: ../../whatsnew/3.5.rst:62
msgid ""
":ref:`PEP 492 <whatsnew-pep-492>`, coroutines with async and await syntax."
msgstr ""
":ref:`PEP 492 <whatsnew-pep-492>`、コルーチン、async 構文と await 構文。"

#: ../../whatsnew/3.5.rst:63
msgid ""
":ref:`PEP 465 <whatsnew-pep-465>`, a new matrix multiplication operator: ``a "
"@ b``."
msgstr ":ref:`PEP 465 <whatsnew-pep-465>`、新たな行列乗算演算子 ``a @ b``。"

#: ../../whatsnew/3.5.rst:64
msgid ""
":ref:`PEP 448 <whatsnew-pep-448>`, additional unpacking generalizations."
msgstr ":ref:`PEP 448 <whatsnew-pep-448>`、追加可能なアンパックへの一般化。"

#: ../../whatsnew/3.5.rst:67
msgid "New library modules:"
msgstr "新たなライブラリモジュール:"

#: ../../whatsnew/3.5.rst:69
msgid ":mod:`typing`: :ref:`PEP 484 -- Type Hints <whatsnew-pep-484>`."
msgstr ":mod:`typing`: :ref:`PEP 484 -- 型ヒント <whatsnew-pep-484>`。"

#: ../../whatsnew/3.5.rst:70
msgid ""
":mod:`zipapp`: :ref:`PEP 441 Improving Python ZIP Application Support "
"<whatsnew-zipapp>`."
msgstr ""
":mod:`zipapp`: :ref:`PEP 441 Python ZIP アプリケーションのサポートの改善 "
"<whatsnew-zipapp>`。"

#: ../../whatsnew/3.5.rst:74
msgid "New built-in features:"
msgstr "新たな組み込み機能:"

#: ../../whatsnew/3.5.rst:76
msgid ""
"``bytes % args``, ``bytearray % args``: :ref:`PEP 461 <whatsnew-pep-461>` -- "
"Adding ``%`` formatting to bytes and bytearray."
msgstr ""
"``bytes % args``, ``bytearray % args``: :ref:`PEP 461 <whatsnew-pep-461>` -- "
"bytes と bytearray に ``%`` 書式化を追加。"

#: ../../whatsnew/3.5.rst:79
msgid ""
"New :meth:`bytes.hex`, :meth:`bytearray.hex` and :meth:`memoryview.hex` "
"methods. (Contributed by Arnon Yaari in :issue:`9951`.)"
msgstr ""
"新たな :meth:`bytes.hex`, :meth:`bytearray.hex` :meth:`memoryview.hex` メソッ"
"ド。 (Contributed by Arnon Yaari in :issue:`9951`.)"

#: ../../whatsnew/3.5.rst:82
msgid ""
":class:`memoryview` now supports tuple indexing (including multi-"
"dimensional). (Contributed by Antoine Pitrou in :issue:`23632`.)"
msgstr ""
":class:`memoryview` クラスが、(複数次元の場合を含んだ) タプルの添字をサポート"
"するようになりました。\n"
"(:issue:`23632` におけるAntoine Pitrouによる貢献です。)"

#: ../../whatsnew/3.5.rst:85
msgid ""
"Generators have a new ``gi_yieldfrom`` attribute, which returns the object "
"being iterated by ``yield from`` expressions. (Contributed by Benno Leslie "
"and Yury Selivanov in :issue:`24450`.)"
msgstr ""
"ジェネレータに ``gi_yieldfrom`` 属性が新しく追加され、これは ``yield from`` "
"式で反復処理されるオブジェクトを返します。\n"
"(Contributed by Benno Leslie and Yury Selivanov in :issue:`24450`.)"

#: ../../whatsnew/3.5.rst:89
msgid ""
"A new :exc:`RecursionError` exception is now raised when maximum recursion "
"depth is reached.  (Contributed by Georg Brandl in :issue:`19235`.)"
msgstr ""
"新たな例外 :exc:`RecursionError` が最長再帰深度に到達した際に送出されるように"
"なりました。   (Contributed by Georg Brandl in :issue:`19235`.)"

#: ../../whatsnew/3.5.rst:94
msgid "CPython implementation improvements:"
msgstr "CPython の実装の改善:"

#: ../../whatsnew/3.5.rst:96
msgid ""
"When the ``LC_TYPE`` locale is the POSIX locale (``C`` locale), :py:data:"
"`sys.stdin` and :py:data:`sys.stdout` now use the ``surrogateescape`` error "
"handler, instead of the ``strict`` error handler. (Contributed by Victor "
"Stinner in :issue:`19977`.)"
msgstr ""
"``LC_TYPE`` ロケールが POSIX ロケール (``C`` ロケール) のとき、 :py:data:"
"`sys.stdin` および :py:data:`sys.stdout` は ``strict`` エラーハンドラではな"
"く ``surrogateescape`` を使うようになりました。 (Contributed by Victor "
"Stinner in :issue:`19977`.)"

#: ../../whatsnew/3.5.rst:101
msgid ""
"``.pyo`` files are no longer used and have been replaced by a more flexible "
"scheme that includes the optimization level explicitly in ``.pyc`` name. "
"(See :ref:`PEP 488 overview <whatsnew-pep-488>`.)"
msgstr ""
"``.pyo`` ファイルは使われなくなり、``.pyc`` ファイル名に最適化レベルが明示さ"
"れる、より柔軟な仕組みに置き換えられました。(:ref:`PEP 488 の概要 <whatsnew-"
"pep-488>` を参照してください。)"

#: ../../whatsnew/3.5.rst:105
msgid ""
"Builtin and extension modules are now initialized in a multi-phase process, "
"which is similar to how Python modules are loaded. (See :ref:`PEP 489 "
"overview <whatsnew-pep-489>`.)"
msgstr ""
"組み込みおよび拡張モジュールが多段階で初期化されるようになりました。これは "
"Python モジュールのロード方法と同じです。 (:ref:`PEP 489 の概要  <whatsnew-"
"pep-489>` を参照してください。)"

#: ../../whatsnew/3.5.rst:110
msgid "Significant improvements in the standard library:"
msgstr "標準ライブラリーの顕著な改善"

#: ../../whatsnew/3.5.rst:112
msgid ""
":class:`collections.OrderedDict` is now :ref:`implemented in C <whatsnew-"
"ordereddict>`, which makes it 4 to 100 times faster."
msgstr ""
":class:`collections.OrderedDict` が :ref:`C で実装されました <whatsnew-"
"ordereddict>`。\n"
"これにより 4 倍から 100 倍高速になりました。"

#: ../../whatsnew/3.5.rst:116
msgid ""
"The :mod:`ssl` module gained :ref:`support for Memory BIO <whatsnew-"
"sslmemorybio>`, which decouples SSL protocol handling from network IO."
msgstr ""
":mod:`ssl` モジュールに :ref:`メモリ BIO サポート <whatsnew-sslmemorybio>` が"
"追加されました。これにより SSL プロトコルの処理と ネットワーク IO が分離され"
"ました。"

#: ../../whatsnew/3.5.rst:120
msgid ""
"The new :func:`os.scandir` function provides a :ref:`better and "
"significantly faster way <whatsnew-pep-471>` of directory traversal."
msgstr ""
"新たな関数 :func:`os.scandir` はディレクトリー走査の :ref:`改良され非常に速い"
"方法 <whatsnew-pep-471>` を提供します。"

#: ../../whatsnew/3.5.rst:124
msgid ""
":func:`functools.lru_cache` has been mostly :ref:`reimplemented in C "
"<whatsnew-lrucache>`, yielding much better performance."
msgstr ""
":func:`functools.lru_cache` の大部分が :ref:`C で再実装 <whatsnew-lrucache>` "
"され、性能が大幅に向上しました。"

#: ../../whatsnew/3.5.rst:128
msgid ""
"The new :func:`subprocess.run` function provides a :ref:`streamlined way to "
"run subprocesses <whatsnew-subprocess>`."
msgstr ""
"新たな関数 :func:`subprocess.run` は :ref:`サブプロセスを実行する合理的な方"
"法 <whatsnew-subprocess>` を提供します。"

#: ../../whatsnew/3.5.rst:131
msgid ""
"The :mod:`traceback` module has been significantly :ref:`enhanced <whatsnew-"
"traceback>` for improved performance and developer convenience."
msgstr ""
":mod:`traceback` モジュールは性能と開発者の利便性が向上し、大いに :ref:`強化"
"され <whatsnew-traceback>` ました。"

#: ../../whatsnew/3.5.rst:136
msgid "Security improvements:"
msgstr "セキュリティの改善:"

#: ../../whatsnew/3.5.rst:138
msgid ""
"SSLv3 is now disabled throughout the standard library. It can still be "
"enabled by instantiating a :class:`ssl.SSLContext` manually.  (See :issue:"
"`22638` for more details; this change was backported to CPython 3.4 and 2.7.)"
msgstr ""
"SSLv3 が標準ライブラリ全体を通じて無効化されました。ただし :class:`ssl."
"SSLContext` を手動でインスタンス化することによってなら今でも有効には出来ま"
"す。  (詳細に関しては :issue:`22638` を参照してください。この変更は CPython "
"3.4 と 2.7 にもバックポートされました。)"

#: ../../whatsnew/3.5.rst:143
msgid ""
"HTTP cookie parsing is now stricter, in order to protect against potential "
"injection attacks. (Contributed by Antoine Pitrou in :issue:`22796`.)"
msgstr ""
"潜在的なインジェクション攻撃からの防御のために、HTTP クッキーの解析がより厳密"
"に行われるようになりました。 (Contributed by Antoine Pitrou in :issue:"
"`22796`.)"

#: ../../whatsnew/3.5.rst:148
msgid "Windows improvements:"
msgstr "Windows の改善:"

#: ../../whatsnew/3.5.rst:150
msgid ""
"A new installer for Windows has replaced the old MSI. See :ref:`using-on-"
"windows` for more information."
msgstr ""
"Windows のインストーラが新しくなり古い MSI を置き換えました。さらに詳しい情報"
"は :ref:`using-on-windows` をご覧ください。"

#: ../../whatsnew/3.5.rst:153
msgid ""
"Windows builds now use Microsoft Visual C++ 14.0, and extension modules "
"should use the same."
msgstr ""
"Windows のビルドに Microsoft Visual C++ 14.0 を使うようになっています。拡張モ"
"ジュールも同じものを使うべきです。"

#: ../../whatsnew/3.5.rst:157
msgid ""
"Please read on for a comprehensive list of user-facing changes, including "
"many other smaller improvements, CPython optimizations, deprecations, and "
"potential porting issues."
msgstr ""
"以降は、たくさんのほかの小さな改善、CPython での最適化、非推奨リスト、潜在的"
"な移植性問題を含む、ユーザ向けの変更の包括的なリストになっています。"

#: ../../whatsnew/3.5.rst:163
msgid "New Features"
msgstr "新しい機能"

#: ../../whatsnew/3.5.rst:168
msgid "PEP 492 - Coroutines with async and await syntax"
msgstr "PEP 492 - コルーチン、 async と await 構文"

#: ../../whatsnew/3.5.rst:170
msgid ""
":pep:`492` greatly improves support for asynchronous programming in Python "
"by adding :term:`awaitable objects <awaitable>`, :term:`coroutine functions "
"<coroutine function>`, :term:`asynchronous iteration <asynchronous "
"iterable>`, and :term:`asynchronous context managers <asynchronous context "
"manager>`."
msgstr ""
":pep:`492` で :term:`待機可能オブジェクト<awaitable>`、:term:`コルーチン関数 "
"<coroutine function>`、:term:`非同期イテレーション <asynchronous "
"iterable>`、:term:`非同期コンテキストマネージャ <asynchronous context "
"manager>` が追加され、Python における非同期プログラミングを大幅に向上しまし"
"た。"

#: ../../whatsnew/3.5.rst:176
msgid ""
"Coroutine functions are declared using the new :keyword:`async def` syntax::"
msgstr "コルーチン関数は新たな構文 :keyword:`async def` を用いて定義されます:"

#: ../../whatsnew/3.5.rst:178
msgid ""
">>> async def coro():\n"
"...     return 'spam'"
msgstr ""

#: ../../whatsnew/3.5.rst:181
msgid ""
"Inside a coroutine function, the new :keyword:`await` expression can be used "
"to suspend coroutine execution until the result is available.  Any object "
"can be *awaited*, as long as it implements the :term:`awaitable` protocol by "
"defining the :meth:`__await__` method."
msgstr ""
"コルーチン関数内で、新たな :keyword:`await` 式を用いることで結果が利用可能に"
"なるまでコルーチンの実行を停止することが出来ます。:meth:`__await__` メソッド"
"を定義して :term:`awaitable` プロトコルを実装する限り、あらゆるオブジェクト"
"は *待機可能* です。"

#: ../../whatsnew/3.5.rst:186
msgid ""
"PEP 492 also adds :keyword:`async for` statement for convenient iteration "
"over asynchronous iterables."
msgstr ""
"PEP 492 により :keyword:`async for` 文も追加されました。非同期イテラブルを反"
"復するのに便利です。"

#: ../../whatsnew/3.5.rst:189
msgid "An example of a rudimentary HTTP client written using the new syntax::"
msgstr "新たな構文を用いた初歩的な HTTP クライアントの例です::"

#: ../../whatsnew/3.5.rst:191
msgid ""
"import asyncio\n"
"\n"
"async def http_get(domain):\n"
"    reader, writer = await asyncio.open_connection(domain, 80)\n"
"\n"
"    writer.write(b'\\r\\n'.join([\n"
"        b'GET / HTTP/1.1',\n"
"        b'Host: %b' % domain.encode('latin-1'),\n"
"        b'Connection: close',\n"
"        b'', b''\n"
"    ]))\n"
"\n"
"    async for line in reader:\n"
"        print('>>>', line)\n"
"\n"
"    writer.close()\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(http_get('example.com'))\n"
"finally:\n"
"    loop.close()"
msgstr ""

#: ../../whatsnew/3.5.rst:215
msgid ""
"Similarly to asynchronous iteration, there is a new syntax for asynchronous "
"context managers.  The following script::"
msgstr ""
"非同期イテレーションと同様に、非同期なコンテキストマネージャの新たな構文があ"
"ります。以下のスクリプト::"

#: ../../whatsnew/3.5.rst:218
msgid ""
"import asyncio\n"
"\n"
"async def coro(name, lock):\n"
"    print('coro {}: waiting for lock'.format(name))\n"
"    async with lock:\n"
"        print('coro {}: holding the lock'.format(name))\n"
"        await asyncio.sleep(1)\n"
"        print('coro {}: releasing the lock'.format(name))\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"lock = asyncio.Lock()\n"
"coros = asyncio.gather(coro(1, lock), coro(2, lock))\n"
"try:\n"
"    loop.run_until_complete(coros)\n"
"finally:\n"
"    loop.close()"
msgstr ""

#: ../../whatsnew/3.5.rst:235
msgid "will output::"
msgstr "の出力は::"

#: ../../whatsnew/3.5.rst:237
msgid ""
"coro 2: waiting for lock\n"
"coro 2: holding the lock\n"
"coro 1: waiting for lock\n"
"coro 2: releasing the lock\n"
"coro 1: holding the lock\n"
"coro 1: releasing the lock"
msgstr ""

#: ../../whatsnew/3.5.rst:244
msgid ""
"Note that both :keyword:`async for` and :keyword:`async with` can only be "
"used inside a coroutine function declared with :keyword:`async def`."
msgstr ""
":keyword:`async for` と :keyword:`async with` は両方とも、 :keyword:`async "
"def` で宣言されたコルーチン関数内でのみ使えることに注意してください。"

#: ../../whatsnew/3.5.rst:247
msgid ""
"Coroutine functions are intended to be run inside a compatible event loop, "
"such as the :ref:`asyncio loop <asyncio-event-loop>`."
msgstr ""
"コルーチン関数は :ref:`asyncio loop <asyncio-event-loop>` のような適したイベ"
"ントループ内で実行させるためのものです。"

#: ../../whatsnew/3.5.rst:253
msgid ""
"Starting with CPython 3.5.2, ``__aiter__`` can directly return :term:"
"`asynchronous iterators <asynchronous iterator>`.  Returning an :term:"
"`awaitable` object will result in a :exc:`PendingDeprecationWarning`."
msgstr ""
"CPython 3.5.2 以降では、 ``__aiter__`` は :term:`非同期イテレータ "
"<asynchronous iterator>` を直接返せます。\n"
":term:`awaitable` オブジェクトを返すと :exc:`PendingDeprecationWarning` が送"
"出されます。"

#: ../../whatsnew/3.5.rst:259
msgid "See more details in the :ref:`async-iterators` documentation section."
msgstr ""
"より詳細なことはドキュメントの :ref:`async-iterators` 節を参照してください。"

#: ../../whatsnew/3.5.rst:265
msgid ":pep:`492` -- Coroutines with async and await syntax"
msgstr ":pep:`492` -- コルーチン、 async 構文と await 構文"

#: ../../whatsnew/3.5.rst:266
msgid "PEP written and implemented by Yury Selivanov."
msgstr "PEP written and implemented by Yury Selivanov."

#: ../../whatsnew/3.5.rst:272
msgid "PEP 465 - A dedicated infix operator for matrix multiplication"
msgstr "PEP 465 - 行列の乗算専用の中置演算子"

#: ../../whatsnew/3.5.rst:274
msgid ""
":pep:`465` adds the ``@`` infix operator for matrix multiplication. "
"Currently, no builtin Python types implement the new operator, however, it "
"can be implemented by defining :meth:`__matmul__`, :meth:`__rmatmul__`, and :"
"meth:`__imatmul__` for regular, reflected, and in-place matrix "
"multiplication.  The semantics of these methods is similar to that of "
"methods defining other infix arithmetic operators."
msgstr ""
":pep:`465` により ``@`` 行列の乗算のための中置演算子が追加されました。\n"
"現在のところ Python の型はこの演算子を実装していませんが、:meth:"
"`__matmul__`、:meth:`__rmatmul__`、:meth:`__imatmul__` (それぞれ通常の乗算、"
"反射した乗算、インプレースの乗算) を定義することで実装することが出来ます。\n"
"これらのメソッドのセマンティクスは他の中置算術演算子のものと類似です。 "

#: ../../whatsnew/3.5.rst:281
msgid ""
"Matrix multiplication is a notably common operation in many fields of "
"mathematics, science, engineering, and the addition of ``@`` allows writing "
"cleaner code::"
msgstr ""
"行列の乗算は数学、科学、工学の多くの分野では非常に一般的です。\n"
"``@`` の追加によりコードをより綺麗に書くことが出来ます::"

#: ../../whatsnew/3.5.rst:285
msgid "S = (H @ beta - r).T @ inv(H @ V @ H.T) @ (H @ beta - r)"
msgstr ""

#: ../../whatsnew/3.5.rst:287
msgid "instead of::"
msgstr "これはたとえば NumPy を使っても、以下のように書く必要がありました::"

#: ../../whatsnew/3.5.rst:289
msgid ""
"S = dot((dot(H, beta) - r).T,\n"
"        dot(inv(dot(dot(H, V), H.T)), dot(H, beta) - r))"
msgstr ""

#: ../../whatsnew/3.5.rst:292
msgid "NumPy 1.10 has support for the new operator::"
msgstr "NumPy 1.10 はこの新たな演算子をサポートしています::"

#: ../../whatsnew/3.5.rst:294
msgid ""
">>> import numpy\n"
"\n"
">>> x = numpy.ones(3)\n"
">>> x\n"
"array([ 1., 1., 1.])\n"
"\n"
">>> m = numpy.eye(3)\n"
">>> m\n"
"array([[ 1., 0., 0.],\n"
"       [ 0., 1., 0.],\n"
"       [ 0., 0., 1.]])\n"
"\n"
">>> x @ m\n"
"array([ 1., 1., 1.])"
msgstr ""

#: ../../whatsnew/3.5.rst:312
msgid ":pep:`465` -- A dedicated infix operator for matrix multiplication"
msgstr ":pep:`465` -- 行列乗算専用の中置演算子"

#: ../../whatsnew/3.5.rst:313
msgid "PEP written by Nathaniel J. Smith; implemented by Benjamin Peterson."
msgstr "PEP written by Nathaniel J. Smith; implemented by Benjamin Peterson."

#: ../../whatsnew/3.5.rst:319
msgid "PEP 448 - Additional Unpacking Generalizations"
msgstr "PEP 448 - 追加可能なアンパックへの一般化"

#: ../../whatsnew/3.5.rst:321
msgid ""
":pep:`448` extends the allowed uses of the ``*`` iterable unpacking operator "
"and ``**`` dictionary unpacking operator.  It is now possible to use an "
"arbitrary number of unpackings in :ref:`function calls <calls>`::"
msgstr ""
":pep:`448` によって、 ``*`` イテラブルアンパック演算子と ``**`` 辞書アンパッ"
"ク演算子の利用方法が拡張されました。\n"
":ref:`関数呼び出し <calls>` で任意の数のアンパックで使えるようになりました::"

#: ../../whatsnew/3.5.rst:325
msgid ""
">>> print(*[1], *[2], 3, *[4, 5])\n"
"1 2 3 4 5\n"
"\n"
">>> def fn(a, b, c, d):\n"
"...     print(a, b, c, d)\n"
"...\n"
"\n"
">>> fn(**{'a': 1, 'c': 3}, **{'b': 2, 'd': 4})\n"
"1 2 3 4"
msgstr ""

#: ../../whatsnew/3.5.rst:335
msgid ""
"Similarly, tuple, list, set, and dictionary displays allow multiple "
"unpackings (see :ref:`exprlists` and :ref:`dict`)::"
msgstr ""
"同様に、タプル、リスト、集合、辞書表現でも複数のアンパックが使えます (:ref:"
"`exprlists` および :ref:`dict` を参照してください)::"

#: ../../whatsnew/3.5.rst:338
msgid ""
">>> *range(4), 4\n"
"(0, 1, 2, 3, 4)\n"
"\n"
">>> [*range(4), 4]\n"
"[0, 1, 2, 3, 4]\n"
"\n"
">>> {*range(4), 4, *(5, 6, 7)}\n"
"{0, 1, 2, 3, 4, 5, 6, 7}\n"
"\n"
">>> {'x': 1, **{'y': 2}}\n"
"{'x': 1, 'y': 2}"
msgstr ""

#: ../../whatsnew/3.5.rst:352
msgid ":pep:`448` -- Additional Unpacking Generalizations"
msgstr ":pep:`448` -- 追加可能なアンパックへの一般化"

#: ../../whatsnew/3.5.rst:353
msgid ""
"PEP written by Joshua Landau; implemented by Neil Girdhar, Thomas Wouters, "
"and Joshua Landau."
msgstr ""
"PEP written by Joshua Landau; implemented by Neil Girdhar, Thomas Wouters, "
"and Joshua Landau."

#: ../../whatsnew/3.5.rst:360
msgid "PEP 461 - percent formatting support for bytes and bytearray"
msgstr "PEP 461 - bytes および bytearray のパーセント書式化サポート"

#: ../../whatsnew/3.5.rst:362
msgid ""
":pep:`461` adds support for the ``%`` :ref:`interpolation operator <bytes-"
"formatting>` to :class:`bytes` and :class:`bytearray`."
msgstr ""
":pep:`461` によって、 :class:`bytes` と :class:`bytearray` に ``%`` :ref:`補"
"間演算子 <bytes-formatting>` のサポートが追加されます。"

#: ../../whatsnew/3.5.rst:366
msgid ""
"While interpolation is usually thought of as a string operation, there are "
"cases where interpolation on ``bytes`` or ``bytearrays`` makes sense, and "
"the work needed to make up for this missing functionality detracts from the "
"overall readability of the code.  This issue is particularly important when "
"dealing with wire format protocols, which are often a mixture of binary and "
"ASCII compatible text."
msgstr ""
"補間は通常は文字列演算だと考えられていますが、 ``bytes`` や ``bytearrays`` 上"
"の補間が意味を持つ場合もあって、この機能が無いと余計な作業が必要になりコード"
"の全体の可読性が損なわれます。\n"
"この問題は特にワイヤフォーマットプロトコルの取り扱いにおいて重要で、バイナリ"
"とASCII互換のテキストが入り交じったものがよく出てきます。"

#: ../../whatsnew/3.5.rst:373 ../../whatsnew/3.5.rst:1848
msgid "Examples::"
msgstr "例::"

#: ../../whatsnew/3.5.rst:375
msgid ""
">>> b'Hello %b!' % b'World'\n"
"b'Hello World!'\n"
"\n"
">>> b'x=%i y=%f' % (1, 2.5)\n"
"b'x=1 y=2.500000'"
msgstr ""

#: ../../whatsnew/3.5.rst:381
msgid ""
"Unicode is not allowed for ``%b``, but it is accepted by ``%a`` (equivalent "
"of ``repr(obj).encode('ascii', 'backslashreplace')``)::"
msgstr ""
"Unicode に対して ``%b`` は使えませんが、 ``%a`` であれば使えます "
"(``repr(obj).encode('ascii', 'backslashreplace')`` と同等)::"

#: ../../whatsnew/3.5.rst:384
msgid ""
">>> b'Hello %b!' % 'World'\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: %b requires bytes, or an object that implements __bytes__, not "
"'str'\n"
"\n"
">>> b'price: %a' % '10€'\n"
"b\"price: '10\\\\u20ac'\""
msgstr ""

#: ../../whatsnew/3.5.rst:392
msgid ""
"Note that ``%s`` and ``%r`` conversion types, although supported, should "
"only be used in codebases that need compatibility with Python 2."
msgstr ""
"``%s`` および ``%r`` 変換型はサポートはされますが、 Python 2 との互換性を持た"
"せる必要のあるコードベースでのみ使われるべきだということに注意してください。"

#: ../../whatsnew/3.5.rst:397
msgid ":pep:`461` -- Adding % formatting to bytes and bytearray"
msgstr ":pep:`461` -- bytes と bytearray への % 書式化の追加"

#: ../../whatsnew/3.5.rst:398
msgid ""
"PEP written by Ethan Furman; implemented by Neil Schemenauer and Ethan "
"Furman."
msgstr ""
"PEP written by Ethan Furman; implemented by Neil Schemenauer and Ethan "
"Furman."

#: ../../whatsnew/3.5.rst:405
msgid "PEP 484 - Type Hints"
msgstr "PEP 484 - 型ヒント"

#: ../../whatsnew/3.5.rst:407
msgid ""
"Function annotation syntax has been a Python feature since version 3.0 (:pep:"
"`3107`), however the semantics of annotations has been left undefined."
msgstr ""
"関数アノテーション構文はバージョン 3.0 (:pep:`3107`) から Python の仕様になり"
"ましたが、アノテーションのセマンティクスは未定義のままでした。"

#: ../../whatsnew/3.5.rst:410
msgid ""
"Experience has shown that the majority of function annotation uses were to "
"provide type hints to function parameters and return values.  It became "
"evident that it would be beneficial for Python users, if the standard "
"library included the base definitions and tools for type annotations."
msgstr ""
"経験的に、関数アノテーションの使用の大半は関数の引数と返り値の型ヒントを提供"
"するためのものです。\n"
"標準ライブラリーが型アノテーションの基本的な定義とツールを持てば、Python ユー"
"ザに有益であることは明白となりました。"

#: ../../whatsnew/3.5.rst:415
msgid ""
":pep:`484` introduces a :term:`provisional module <provisional API>` to "
"provide these standard definitions and tools, along with some conventions "
"for situations where annotations are not available."
msgstr ""

#: ../../whatsnew/3.5.rst:419
msgid ""
"For example, here is a simple function whose argument and return type are "
"declared in the annotations::"
msgstr ""
"例えば、こちらは引数と返り値の型がアノテーションで定義されている簡単な関数で"
"す::"

#: ../../whatsnew/3.5.rst:422
msgid ""
"def greeting(name: str) -> str:\n"
"    return 'Hello ' + name"
msgstr ""

#: ../../whatsnew/3.5.rst:425
msgid ""
"While these annotations are available at runtime through the usual :attr:"
"`__annotations__` attribute, *no automatic type checking happens at "
"runtime*.  Instead, it is assumed that a separate off-line type checker (e."
"g. `mypy <https://mypy-lang.org>`_) will be used for on-demand source code "
"analysis."
msgstr ""

#: ../../whatsnew/3.5.rst:431
msgid ""
"The type system supports unions, generic types, and a special type named :"
"class:`~typing.Any` which is consistent with (i.e. assignable to and from) "
"all types."
msgstr ""
"型システムはユニオン、一般型、そして :class:`~typing.Any` という全ての型と互"
"換な (すなわち代入可能) 特殊型をサポートしています。"

#: ../../whatsnew/3.5.rst:437
msgid ":mod:`typing` module documentation"
msgstr ":mod:`typing` モジュールのドキュメント"

#: ../../whatsnew/3.5.rst:438
msgid ":pep:`484` -- Type Hints"
msgstr ":pep:`484` -- 型ヒント"

#: ../../whatsnew/3.5.rst:439
msgid ""
"PEP written by Guido van Rossum, Jukka Lehtosalo, and Łukasz Langa; "
"implemented by Guido van Rossum."
msgstr ""
"PEP 著 Guido van Rossum, Jukka Lehtosalo, Łukasz Langa; 実装 Guido van "
"Rossum。"

#: ../../whatsnew/3.5.rst:441
msgid ":pep:`483` -- The Theory of Type Hints"
msgstr ":pep:`483` -- 型ヒントの理論"

#: ../../whatsnew/3.5.rst:442
msgid "PEP written by Guido van Rossum"
msgstr "PEP written by Guido van Rossum"

#: ../../whatsnew/3.5.rst:448
msgid ""
"PEP 471 - os.scandir() function -- a better and faster directory iterator"
msgstr "PEP 471 - os.scandir() 関数 -- より良く、速いディレクトリイテレータ"

#: ../../whatsnew/3.5.rst:450
msgid ""
":pep:`471` adds a new directory iteration function, :func:`os.scandir`, to "
"the standard library.  Additionally, :func:`os.walk` is now implemented "
"using ``scandir``, which makes it 3 to 5 times faster on POSIX systems and 7 "
"to 20 times faster on Windows systems.  This is largely achieved by greatly "
"reducing the number of calls to :func:`os.stat` required to walk a directory "
"tree."
msgstr ""
":pep:`471` により新しいディレクトリ反復関数 :func:`os.scandir` が標準ライブラ"
"リへ追加されました。\n"
"さらに、 ``scandir`` を使い :func:`os.walk` が実装され、 POSIX システムで3倍"
"から5倍、 Windows システムで7倍から20倍高速になりました。\n"
"これは主に、ディレクトリツリーを走査するのに必要な :func:`os.stat` の呼び出し"
"回数をかなり減らしたことによるものです。"

#: ../../whatsnew/3.5.rst:457
msgid ""
"Additionally, ``scandir`` returns an iterator, as opposed to returning a "
"list of file names, which improves memory efficiency when iterating over "
"very large directories."
msgstr ""
"これの他にも、  ``scandir``  ファイル名のリストではなくイテレータを返すように"
"なり、非常に大きなディレクトリ群の走査をするときのメモリ効率が改善されまし"
"た。"

#: ../../whatsnew/3.5.rst:461
msgid ""
"The following example shows a simple use of :func:`os.scandir` to display "
"all the files (excluding directories) in the given *path* that don't start "
"with ``'.'``. The :meth:`entry.is_file() <os.DirEntry.is_file>` call will "
"generally not make an additional system call::"
msgstr ""
"次の例では、 :func:`os.scandir` を使用して、与えられた *path* 内の先頭が "
"``'.'`` でないすべてのファイル (ディレクトリを除く) を表示します。 :meth:"
"`entry.is_file() <os.DirEntry.is_file>` を呼び出しても、通常は追加のシステム"
"コールは行われません::"

#: ../../whatsnew/3.5.rst:466
msgid ""
"for entry in os.scandir(path):\n"
"    if not entry.name.startswith('.') and entry.is_file():\n"
"        print(entry.name)"
msgstr ""

#: ../../whatsnew/3.5.rst:472
msgid ""
":pep:`471` -- os.scandir() function -- a better and faster directory iterator"
msgstr ""
":pep:`471` -- os.scandir() 関数 -- より良く、速いディレクトリイテレータ"

#: ../../whatsnew/3.5.rst:473
msgid ""
"PEP written and implemented by Ben Hoyt with the help of Victor Stinner."
msgstr "PEP 著・実装 Ben Hoyt 補佐 Victor Stinner。"

#: ../../whatsnew/3.5.rst:479
msgid "PEP 475: Retry system calls failing with EINTR"
msgstr "PEP 475: EINTR で失敗したシステムコールの再試行"

#: ../../whatsnew/3.5.rst:481
msgid ""
"An :py:const:`errno.EINTR` error code is returned whenever a system call, "
"that is waiting for I/O, is interrupted by a signal.  Previously, Python "
"would raise :exc:`InterruptedError` in such cases.  This meant that, when "
"writing a Python application, the developer had two choices:"
msgstr ""

#: ../../whatsnew/3.5.rst:486
msgid "Ignore the ``InterruptedError``."
msgstr "``InterruptedError`` を無視する。"

#: ../../whatsnew/3.5.rst:487
msgid ""
"Handle the ``InterruptedError`` and attempt to restart the interrupted "
"system call at every call site."
msgstr ""
"呼び出し箇所の全てで ``InterruptedError`` を処理し、中断されたシステムコール"
"の再開を試みる。"

#: ../../whatsnew/3.5.rst:490
msgid ""
"The first option makes an application fail intermittently. The second option "
"adds a large amount of boilerplate that makes the code nearly unreadable.  "
"Compare::"
msgstr ""
"最初の選択肢では、アプリケーションは断続的に失敗します。\n"
"二つ目の選択肢では、定型処理を大量に追加せねばならず、コードの可読性が著しく"
"下がります。\n"
"次の2つを比べてみてください::"

#: ../../whatsnew/3.5.rst:494
msgid "print(\"Hello World\")"
msgstr ""

#: ../../whatsnew/3.5.rst:496
msgid "and::"
msgstr "および::"

#: ../../whatsnew/3.5.rst:498
msgid ""
"while True:\n"
"    try:\n"
"        print(\"Hello World\")\n"
"        break\n"
"    except InterruptedError:\n"
"        continue"
msgstr ""

#: ../../whatsnew/3.5.rst:505
msgid ""
":pep:`475` implements automatic retry of system calls on ``EINTR``.  This "
"removes the burden of dealing with ``EINTR`` or :exc:`InterruptedError` in "
"user code in most situations and makes Python programs, including the "
"standard library, more robust.  Note that the system call is only retried if "
"the signal handler does not raise an exception."
msgstr ""
":pep:`475` は ``EINTR`` を受けた場合のシステムコールの自動再試行を実装してい"
"ます。\n"
"これはほとんどの場合ユーザコードでの ``EINTR`` や :exc:`InterruptedError` を"
"扱う負担をなくし、標準ライブラリを含む Python プログラムをより堅牢にしま"
"す。\n"
"シグナルハンドラが例外を投げない場合にのみシステムコールを再試行することに注"
"意してください。"

#: ../../whatsnew/3.5.rst:512
msgid ""
"Below is a list of functions which are now retried when interrupted by a "
"signal:"
msgstr ""
"下記は、シグナルで中断された際に再試行をするようになった関数のリストです:"

#: ../../whatsnew/3.5.rst:515
msgid ":func:`open` and :func:`io.open`;"
msgstr ":func:`open` および :func:`io.open`;"

#: ../../whatsnew/3.5.rst:517
msgid "functions of the :mod:`faulthandler` module;"
msgstr ":mod:`faulthandler` モジュールの関数;"

#: ../../whatsnew/3.5.rst:519
msgid ""
":mod:`os` functions: :func:`~os.fchdir`, :func:`~os.fchmod`, :func:`~os."
"fchown`, :func:`~os.fdatasync`, :func:`~os.fstat`, :func:`~os.fstatvfs`, :"
"func:`~os.fsync`, :func:`~os.ftruncate`, :func:`~os.mkfifo`, :func:`~os."
"mknod`, :func:`~os.open`, :func:`~os.posix_fadvise`, :func:`~os."
"posix_fallocate`, :func:`~os.pread`, :func:`~os.pwrite`, :func:`~os.read`, :"
"func:`~os.readv`, :func:`~os.sendfile`, :func:`~os.wait3`, :func:`~os."
"wait4`, :func:`~os.wait`, :func:`~os.waitid`, :func:`~os.waitpid`, :func:"
"`~os.write`, :func:`~os.writev`;"
msgstr ""
":mod:`os` モジュールの関数: :func:`~os.fchdir`, :func:`~os.fchmod`, :func:"
"`~os.fchown`, :func:`~os.fdatasync`, :func:`~os.fstat`, :func:`~os."
"fstatvfs`, :func:`~os.fsync`, :func:`~os.ftruncate`, :func:`~os.mkfifo`, :"
"func:`~os.mknod`, :func:`~os.open`, :func:`~os.posix_fadvise`, :func:`~os."
"posix_fallocate`, :func:`~os.pread`, :func:`~os.pwrite`, :func:`~os.read`, :"
"func:`~os.readv`, :func:`~os.sendfile`, :func:`~os.wait3`, :func:`~os."
"wait4`, :func:`~os.wait`, :func:`~os.waitid`, :func:`~os.waitpid`, :func:"
"`~os.write`, :func:`~os.writev`;"

#: ../../whatsnew/3.5.rst:529
msgid ""
"special cases: :func:`os.close` and :func:`os.dup2` now ignore :py:const:"
"`~errno.EINTR` errors; the syscall is not retried (see the PEP for the "
"rationale);"
msgstr ""

#: ../../whatsnew/3.5.rst:533
msgid ""
":mod:`select` functions: :func:`devpoll.poll() <select.devpoll.poll>`, :func:"
"`epoll.poll() <select.epoll.poll>`, :func:`kqueue.control() <select.kqueue."
"control>`, :func:`poll.poll() <select.poll.poll>`, :func:`~select.select`;"
msgstr ""
":mod:`select` モジュール関数: :func:`devpoll.poll() <select.devpoll.poll>`, :"
"func:`epoll.poll() <select.epoll.poll>`, :func:`kqueue.control() <select."
"kqueue.control>`, :func:`poll.poll() <select.poll.poll>`, :func:`~select."
"select`;"

#: ../../whatsnew/3.5.rst:538
msgid ""
"methods of the :class:`~socket.socket` class: :meth:`~socket.socket."
"accept`, :meth:`~socket.socket.connect` (except for non-blocking sockets), :"
"meth:`~socket.socket.recv`, :meth:`~socket.socket.recvfrom`, :meth:`~socket."
"socket.recvmsg`, :meth:`~socket.socket.send`, :meth:`~socket.socket."
"sendall`, :meth:`~socket.socket.sendmsg`, :meth:`~socket.socket.sendto`;"
msgstr ""
":class:`~socket.socket` クラスのメソッド: :meth:`~socket.socket.accept`, :"
"meth:`~socket.socket.connect` (ノンブロッキングソケットを除く), :meth:"
"`~socket.socket.recv`, :meth:`~socket.socket.recvfrom`, :meth:`~socket."
"socket.recvmsg`, :meth:`~socket.socket.send`, :meth:`~socket.socket."
"sendall`, :meth:`~socket.socket.sendmsg`, :meth:`~socket.socket.sendto`;"

#: ../../whatsnew/3.5.rst:545
msgid ":func:`signal.sigtimedwait` and :func:`signal.sigwaitinfo`;"
msgstr ":func:`signal.sigtimedwait` および :func:`signal.sigwaitinfo`;"

#: ../../whatsnew/3.5.rst:547
msgid ":func:`time.sleep`."
msgstr ":func:`time.sleep`."

#: ../../whatsnew/3.5.rst:551
msgid ":pep:`475` -- Retry system calls failing with EINTR"
msgstr ":pep:`475` -- EINTR で失敗したシステムコールの再試行"

#: ../../whatsnew/3.5.rst:552
msgid ""
"PEP and implementation written by Charles-François Natali and Victor "
"Stinner, with the help of Antoine Pitrou (the French connection)."
msgstr ""
"Antoine Pitrou の協力のもと、 PEP および実装は Charles-François Natali と "
"Victor Stinner によって書かれました (『フレンチ・コネクション』)。"

#: ../../whatsnew/3.5.rst:559
msgid "PEP 479: Change StopIteration handling inside generators"
msgstr "PEP 479: ジェネレータ内の StopIteration の処理の変更"

#: ../../whatsnew/3.5.rst:561
msgid ""
"The interaction of generators and :exc:`StopIteration` in Python 3.4 and "
"earlier was sometimes surprising, and could conceal obscure bugs.  "
"Previously, ``StopIteration`` raised accidentally inside a generator "
"function was interpreted as the end of the iteration by the loop construct "
"driving the generator."
msgstr ""
"Python 3.4 以前では、ジェネレータと :exc:`StopIteration` の組み合わせが驚くよ"
"うな動作をし、分かりづらいバグを隠すことがありました。\n"
"以前は、ジェネレータ関数内でうっかり ``StopIteration`` が送出されると、その"
"ジェネレータの反復処理をしているループ構造が終端に達したと解釈されていまし"
"た。"

#: ../../whatsnew/3.5.rst:567
msgid ""
":pep:`479` changes the behavior of generators: when a ``StopIteration`` "
"exception is raised inside a generator, it is replaced with a :exc:"
"`RuntimeError` before it exits the generator frame.  The main goal of this "
"change is to ease debugging in the situation where an unguarded :func:`next` "
"call raises ``StopIteration`` and causes the iteration controlled by the "
"generator to terminate silently. This is particularly pernicious in "
"combination with the ``yield from`` construct."
msgstr ""
":pep:`479` によってジェネレータのこの振る舞いが変更されました:\n"
"ジェネレータ内部で ``StopIteration`` 例外が送出されたときは、ジェネレータのフ"
"レームを抜ける前に :exc:`RuntimeError` に置き換えられます。\n"
"この変更の一番の目的は、保護されていない :func:`next` の呼び出しが "
"``StopIteration`` を送出し、ジェネレータを回している反復処理が黙って終了して"
"しまうような状況で、デバッグをしやすくすることです。\n"
"これは ``yield from`` 構造と組み合わさったとき特に有害になります。"

#: ../../whatsnew/3.5.rst:575
msgid ""
"This is a backwards incompatible change, so to enable the new behavior, a :"
"term:`__future__` import is necessary::"
msgstr ""
"これは後方互換性の無い変更ですので、この新しい振る舞いを有効にするには :term:"
"`__future__` のインポートが必要です::"

#: ../../whatsnew/3.5.rst:578
msgid ""
">>> from __future__ import generator_stop\n"
"\n"
">>> def gen():\n"
"...     next(iter([]))\n"
"...     yield\n"
"...\n"
">>> next(gen())\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 2, in gen\n"
"StopIteration\n"
"\n"
"The above exception was the direct cause of the following exception:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"RuntimeError: generator raised StopIteration"
msgstr ""

#: ../../whatsnew/3.5.rst:595
msgid ""
"Without a ``__future__`` import, a :exc:`PendingDeprecationWarning` will be "
"raised whenever a :exc:`StopIteration` exception is raised inside a "
"generator."
msgstr ""
"``__future__`` をインポートしておらず、ジェネレータの内部で :exc:"
"`StopIteration` 例外が送出されたときには :exc:`PendingDeprecationWarning` が"
"送出されます。"

#: ../../whatsnew/3.5.rst:600
msgid ":pep:`479` -- Change StopIteration handling inside generators"
msgstr ":pep:`479` -- ジェネレータ内の StopIteration の処理の変更"

#: ../../whatsnew/3.5.rst:601
msgid ""
"PEP written by Chris Angelico and Guido van Rossum. Implemented by Chris "
"Angelico, Yury Selivanov and Nick Coghlan."
msgstr ""
"PEP written by Chris Angelico and Guido van Rossum. Implemented by Chris "
"Angelico, Yury Selivanov and Nick Coghlan."

#: ../../whatsnew/3.5.rst:608
msgid "PEP 485: A function for testing approximate equality"
msgstr "PEP 485: 近似的に等しいことを調べる関数"

#: ../../whatsnew/3.5.rst:610
msgid ""
":pep:`485` adds the :func:`math.isclose` and :func:`cmath.isclose` functions "
"which tell whether two values are approximately equal or \"close\" to each "
"other.  Whether or not two values are considered close is determined "
"according to given absolute and relative tolerances. Relative tolerance is "
"the maximum allowed difference between ``isclose`` arguments, relative to "
"the larger absolute value::"
msgstr ""
":pep:`485` により、2値が互いに近似的に等しいか \"近い\" ことを調べる関数 :"
"func:`math.isclose` 及び :func:`cmath.isclose` が追加されました。\n"
"2値が近いと判断されるかどうかは与えられた絶対及び相対許容差で決まります。 \n"
"相対許容差は ``isclose`` 引数間で許される、絶対値の大きい方に対する最大の差で"
"す::"

#: ../../whatsnew/3.5.rst:617
msgid ""
">>> import math\n"
">>> a = 5.0\n"
">>> b = 4.99998\n"
">>> math.isclose(a, b, rel_tol=1e-5)\n"
"True\n"
">>> math.isclose(a, b, rel_tol=1e-6)\n"
"False"
msgstr ""

#: ../../whatsnew/3.5.rst:625
msgid ""
"It is also possible to compare two values using absolute tolerance, which "
"must be a non-negative value::"
msgstr ""
"2値を絶対許容差で比較することも出来ます。絶対許容差は非負数でなければなりませ"
"ん::"

#: ../../whatsnew/3.5.rst:628
msgid ""
">>> import math\n"
">>> a = 5.0\n"
">>> b = 4.99998\n"
">>> math.isclose(a, b, abs_tol=0.00003)\n"
"True\n"
">>> math.isclose(a, b, abs_tol=0.00001)\n"
"False"
msgstr ""

#: ../../whatsnew/3.5.rst:638
msgid ":pep:`485` -- A function for testing approximate equality"
msgstr ":pep:`485` -- A function for testing approximate equality"

#: ../../whatsnew/3.5.rst:639
msgid ""
"PEP written by Christopher Barker; implemented by Chris Barker and Tal Einat."
msgstr ""
"PEP written by Christopher Barker; implemented by Chris Barker and Tal Einat."

#: ../../whatsnew/3.5.rst:646
msgid "PEP 486: Make the Python Launcher aware of virtual environments"
msgstr "PEP 486: Python ランチャーが仮想環境を認識する"

#: ../../whatsnew/3.5.rst:648
msgid ""
":pep:`486` makes the Windows launcher (see :pep:`397`) aware of an active "
"virtual environment. When the default interpreter would be used and the "
"``VIRTUAL_ENV`` environment variable is set, the interpreter in the virtual "
"environment will be used."
msgstr ""
":pep:`486` により、 Windows ランチャー (:pep:`397` を参照してください) が有効"
"になっている仮想環境を認識するようになりました。\n"
"デフォルトのインタプリタを使っていて、 ``VIRTUAL_ENV`` 環境変数が設定されてい"
"るときは、仮想環境のインタプリタが使われます。"

#: ../../whatsnew/3.5.rst:655
msgid ":pep:`486` -- Make the Python Launcher aware of virtual environments"
msgstr ":pep:`486` -- Python ランチャーが仮想環境を認識する"

#: ../../whatsnew/3.5.rst:656
msgid "PEP written and implemented by Paul Moore."
msgstr "PEP written and implemented by Paul Moore."

#: ../../whatsnew/3.5.rst:662
msgid "PEP 488: Elimination of PYO files"
msgstr "PEP 488: PYO ファイルの廃止"

#: ../../whatsnew/3.5.rst:664
msgid ""
":pep:`488` does away with the concept of ``.pyo`` files. This means that ``."
"pyc`` files represent both unoptimized and optimized bytecode. To prevent "
"the need to constantly regenerate bytecode files, ``.pyc`` files now have an "
"optional ``opt-`` tag in their name when the bytecode is optimized. This has "
"the side-effect of no more bytecode file name clashes when running under "
"either :option:`-O` or :option:`-OO`. Consequently, bytecode files generated "
"from :option:`-O`, and :option:`-OO` may now exist simultaneously. :func:"
"`importlib.util.cache_from_source` has an updated API to help with this "
"change."
msgstr ""
":pep:`488` は ``.pyo`` ファイルという概念を廃止しました。\n"
"つまり、``.pyc`` ファイルは最適化されていないバイトコードと最適化されたバイト"
"コードの両方を指すということです。\n"
"バイトコードファイルを何度も再生成する必要がないよう、バイトコードが最適化さ"
"れたときは ``.pyc`` ファイルは任意の ``opt-`` タグを名前に持つようになりまし"
"た。\n"
"この副作用で、:option:`-O` と :option:`-OO` のいずれかで実行した場合でも、バ"
"イトコードのファイル名が衝突しないようになりました。\n"
"それにより、:option:`-O` および :option:`-OO` で生成したバイトコードは同時に"
"存在できるようになりました。\n"
":func:`importlib.util.cache_from_source` にの API は更新され、この変更に役立"
"ちます。"

#: ../../whatsnew/3.5.rst:676
msgid ":pep:`488` -- Elimination of PYO files"
msgstr ":pep:`488` -- PYO ファイルの廃止"

#: ../../whatsnew/3.5.rst:677
msgid "PEP written and implemented by Brett Cannon."
msgstr "PEP written and implemented by Brett Cannon."

#: ../../whatsnew/3.5.rst:683
msgid "PEP 489: Multi-phase extension module initialization"
msgstr "PEP 489: 拡張モジュールの多段階初期化"

#: ../../whatsnew/3.5.rst:685
msgid ""
":pep:`489` updates extension module initialization to take advantage of the "
"two step module loading mechanism introduced by :pep:`451` in Python 3.4."
msgstr ""
":pep:`489` により拡張モジュールの初期化方式が更新され、 Python 3.4 で :pep:"
"`451` によって導入された2段階でモジュールを読み込む仕組みが活用できるようにな"
"りました。"

#: ../../whatsnew/3.5.rst:688
msgid ""
"This change brings the import semantics of extension modules that opt-in to "
"using the new mechanism much closer to those of Python source and bytecode "
"modules, including the ability to use any valid identifier as a module name, "
"rather than being restricted to ASCII."
msgstr ""
"この変更によって、新しい仕組みを使うことを選択した拡張モジュールのインポート"
"の動作が、 Python のソースコードやバイトコードでできたモジュールにかなり近く"
"なり、これまで ASCII に制限されていたモジュール名に任意の識別子が使えるように"
"なりました。"

#: ../../whatsnew/3.5.rst:695
msgid ":pep:`489` -- Multi-phase extension module initialization"
msgstr ":pep:`489` -- 拡張モジュールの多段階初期化"

#: ../../whatsnew/3.5.rst:696
msgid ""
"PEP written by Petr Viktorin, Stefan Behnel, and Nick Coghlan; implemented "
"by Petr Viktorin."
msgstr "PEP 著 Petr Viktorin, Stefan Behnel, Nick Coghlan; 実装 Petr Viktorin."

#: ../../whatsnew/3.5.rst:701
msgid "Other Language Changes"
msgstr "その他の言語変更"

#: ../../whatsnew/3.5.rst:703
msgid "Some smaller changes made to the core Python language are:"
msgstr "Python 言語コアに小さな変更がいくつか行われました:"

#: ../../whatsnew/3.5.rst:705
msgid ""
"Added the ``\"namereplace\"`` error handlers.  The ``\"backslashreplace\"`` "
"error handlers now work with decoding and translating. (Contributed by "
"Serhiy Storchaka in :issue:`19676` and :issue:`22286`.)"
msgstr ""
"``\"namereplace\"`` エラーハンドラが追加されました。``\"backslashreplace\"`` "
"エラーハンドラはデコードと変換で動くようになりました。 (Contributed by "
"Serhiy Storchaka in :issue:`19676` and :issue:`22286`.)"

#: ../../whatsnew/3.5.rst:709
msgid ""
"The :option:`-b` option now affects comparisons of :class:`bytes` with :"
"class:`int`.  (Contributed by Serhiy Storchaka in :issue:`23681`.)"
msgstr ""
":option:`-b` オプションが :class:`bytes` と :class:`int` の比較に影響するよう"
"になりました。 (Contributed by Serhiy Storchaka in :issue:`23681`.)"

#: ../../whatsnew/3.5.rst:712
msgid ""
"New Kazakh ``kz1048`` and Tajik ``koi8_t`` :ref:`codecs <standard-"
"encodings>`. (Contributed by Serhiy Storchaka in :issue:`22682` and :issue:"
"`22681`.)"
msgstr ""
"新たなカザフ語 ``kz1048`` 及びタジク語 ``koi8_t`` :ref:`コーデックス "
"<standard-encodings>`。 (Contributed by Serhiy Storchaka in :issue:`22682` "
"and :issue:`22681`.)"

#: ../../whatsnew/3.5.rst:715
msgid ""
"Property docstrings are now writable. This is especially useful for :func:"
"`collections.namedtuple` docstrings. (Contributed by Berker Peksag in :issue:"
"`24064`.)"
msgstr ""
"プロパティのドキュメンテーション文字列が書き込み可能になりました。これは特"
"に :func:`collections.namedtuple` のドキュメンテーション文字列で有用です。 "
"(Contributed by Berker Peksag in :issue:`24064`.)"

#: ../../whatsnew/3.5.rst:719
msgid ""
"Circular imports involving relative imports are now supported. (Contributed "
"by Brett Cannon and Antoine Pitrou in :issue:`17636`.)"
msgstr ""
"相対インポートに関する循環インポートがサポートされました。(Contributed by "
"Brett Cannon and Antoine Pitrou in :issue:`17636`.)"

#: ../../whatsnew/3.5.rst:724
msgid "New Modules"
msgstr "新たなモジュール"

#: ../../whatsnew/3.5.rst:727
msgid "typing"
msgstr "typing"

#: ../../whatsnew/3.5.rst:729
msgid ""
"The new :mod:`typing` :term:`provisional <provisional API>` module provides "
"standard definitions and tools for function type annotations. See :ref:`Type "
"Hints <whatsnew-pep-484>` for more information."
msgstr ""

#: ../../whatsnew/3.5.rst:736
msgid "zipapp"
msgstr "zipapp"

#: ../../whatsnew/3.5.rst:738
msgid ""
"The new :mod:`zipapp` module (specified in :pep:`441`) provides an API and "
"command line tool for creating executable Python Zip Applications, which "
"were introduced in Python 2.6 in :issue:`1739468`, but which were not well "
"publicized, either at the time or since."
msgstr ""
"新たな :mod:`zipapp` モジュール (:pep:`441` で仕様定義) は実行可能な Python "
"Zip アプリケーションを作成するための API とコマンドラインツールを提供しま"
"す。\n"
"Python Zip アプリケーションは Python 2.6 の :issue:`1739468` で導入されました"
"が、それ以降もあまり知られていませんでした。"

#: ../../whatsnew/3.5.rst:743
msgid ""
"With the new module, bundling your application is as simple as putting all "
"the files, including a ``__main__.py`` file, into a directory ``myapp`` and "
"running:"
msgstr ""
"この新しいモジュールを使ったアプリケーションのバンドル方法は単純で、 "
"``__main__.py`` ファイルを含む全てのファイルをディレクトリ ``myapp`` に置き、"
"次のように実行します:"

#: ../../whatsnew/3.5.rst:747
msgid ""
"$ python -m zipapp myapp\n"
"$ python myapp.pyz"
msgstr ""

#: ../../whatsnew/3.5.rst:752
msgid ""
"The module implementation has been contributed by Paul Moore in :issue:"
"`23491`."
msgstr "モジュールの実装は :issue:`23491` の Paul Moore による貢献です。"

#: ../../whatsnew/3.5.rst:757
msgid ":pep:`441` -- Improving Python ZIP Application Support"
msgstr ""
":pep:`441` -- Python ZIP アプリケーションのサポートの改善 <whatsnew-zipapp>`"

#: ../../whatsnew/3.5.rst:761
msgid "Improved Modules"
msgstr "改良されたモジュール"

#: ../../whatsnew/3.5.rst:764
msgid "argparse"
msgstr "argparse"

#: ../../whatsnew/3.5.rst:766
msgid ""
"The :class:`~argparse.ArgumentParser` class now allows disabling :ref:"
"`abbreviated usage <prefix-matching>` of long options by setting :ref:"
"`allow_abbrev` to ``False``.  (Contributed by Jonathan Paugh, Steven "
"Bethard, paul j3 and Daniel Eriksson in :issue:`14910`.)"
msgstr ""
":class:`~argparse.ArgumentParser` クラスは、:ref:`allow_abbrev` を ``False`` "
"に設定することでロングオプションの :ref:`短縮使用 <prefix-matching>` を無効化"
"できるようになりました。 (Contributed by Jonathan Paugh, Steven Bethard, "
"paul j3 and Daniel Eriksson in :issue:`14910`.)"

#: ../../whatsnew/3.5.rst:773
msgid "asyncio"
msgstr "asyncio"

#: ../../whatsnew/3.5.rst:775
msgid ""
"Since the :mod:`asyncio` module is :term:`provisional <provisional API>`, "
"all changes introduced in Python 3.5 have also been backported to Python 3.4."
"x."
msgstr ""

#: ../../whatsnew/3.5.rst:778
msgid "Notable changes in the :mod:`asyncio` module since Python 3.4.0:"
msgstr "Python 3.4.0 以後の :mod:`asyncio` モジュールの重要な変更点:"

#: ../../whatsnew/3.5.rst:780
msgid ""
"New debugging APIs: :meth:`loop.set_debug() <asyncio.loop.set_debug>` and :"
"meth:`loop.get_debug() <asyncio.loop.get_debug>` methods. (Contributed by "
"Victor Stinner.)"
msgstr ""
"新たなデバッグ API: :meth:`loop.set_debug() <asyncio.loop.set_debug>` と :"
"meth:`loop.get_debug() <asyncio.loop.get_debug>` メソッド。 (Contributed by "
"Victor Stinner.)"

#: ../../whatsnew/3.5.rst:784
msgid ""
"The proactor event loop now supports SSL. (Contributed by Antoine Pitrou and "
"Victor Stinner in :issue:`22560`.)"
msgstr ""
"proactor イベントループが SSL をサポートしました。 (Contributed by Antoine "
"Pitrou and Victor Stinner in :issue:`22560`.)"

#: ../../whatsnew/3.5.rst:787
msgid ""
"A new :meth:`loop.is_closed() <asyncio.loop.is_closed>` method to check if "
"the event loop is closed. (Contributed by Victor Stinner in :issue:`21326`.)"
msgstr ""
"イベントループが閉じているかどうか調べる新たな :meth:`loop.is_closed() "
"<asyncio.loop.is_closed>` メソッド。 (Contributed by Victor Stinner in :"
"issue:`21326`.)"

#: ../../whatsnew/3.5.rst:791
msgid ""
"A new :meth:`loop.create_task() <asyncio.loop.create_task>` to conveniently "
"create and schedule a new :class:`~asyncio.Task` for a coroutine.  The "
"``create_task`` method is also used by all asyncio functions that wrap "
"coroutines into tasks, such as :func:`asyncio.wait`, :func:`asyncio.gather`, "
"etc. (Contributed by Victor Stinner.)"
msgstr ""
"コルーチンの新しい :class:`~asyncio.Task` を便利に作成しスケジュールするため"
"の新たな :meth:`loop.create_task() <asyncio.loop.create_task>`。\n"
"``create_task`` メソッドは\n"
"コルーチンをタスクにラップする全ての asyncio 関数、たとえば :func:`asyncio."
"wait`, :func:`asyncio.gather`、にも使われます。 (Contributed by Victor "
"Stinner.)"

#: ../../whatsnew/3.5.rst:798
msgid ""
"A new :meth:`transport.get_write_buffer_limits() <asyncio.WriteTransport."
"get_write_buffer_limits>` method to inquire for *high-* and *low-* water "
"limits of the flow control. (Contributed by Victor Stinner.)"
msgstr ""

#: ../../whatsnew/3.5.rst:803
msgid ""
"The :func:`~asyncio.async` function is deprecated in favor of :func:"
"`~asyncio.ensure_future`. (Contributed by Yury Selivanov.)"
msgstr ""
":func:`~asyncio.async` 関数は :func:`~asyncio.ensure_future` により非推奨にな"
"りました。(Contributed by Yury Selivanov.)"

#: ../../whatsnew/3.5.rst:807
msgid ""
"New :meth:`loop.set_task_factory() <asyncio.loop.set_task_factory>` and :"
"meth:`loop.get_task_factory() <asyncio.loop.get_task_factory>` methods to "
"customize the task factory that :meth:`loop.create_task() <asyncio.loop."
"create_task>` method uses.  (Contributed by Yury Selivanov.)"
msgstr ""
":meth:`loop.create_task() <asyncio.loop.create_task>` メソッドが使うタスク"
"ファクトリーをカスタマイズするための新たな :meth:`loop.set_task_factory() "
"<asyncio.loop.set_task_factory>` メソッドと :meth:`loop.get_task_factory() "
"<asyncio.loop.get_task_factory>` メソッド。 (Yury Selivanovによる貢献。)"

#: ../../whatsnew/3.5.rst:814
msgid ""
"New :meth:`Queue.join() <asyncio.Queue.join>` and :meth:`Queue.task_done() "
"<asyncio.Queue.task_done>` queue methods. (Contributed by Victor Stinner.)"
msgstr ""
"新たな :meth:`Queue.join() <asyncio.Queue.join>` および :meth:`Queue."
"task_done() <asyncio.Queue.task_done>` キューメソッド。(Contributed by "
"Victor Stinner.)"

#: ../../whatsnew/3.5.rst:818
msgid ""
"The ``JoinableQueue`` class was removed, in favor of the :class:`asyncio."
"Queue` class. (Contributed by Victor Stinner.)"
msgstr ""
"``JoinableQueue`` クラスは :class:`asyncio.Queue` クラスにより削除されまし"
"た。 (Contributed by Victor Stinner.)"

#: ../../whatsnew/3.5.rst:822
msgid "Updates in 3.5.1:"
msgstr "3.5.1 での変更:"

#: ../../whatsnew/3.5.rst:824
msgid ""
"The :func:`~asyncio.ensure_future` function and all functions that use it, "
"such as :meth:`loop.run_until_complete() <asyncio.loop.run_until_complete>`, "
"now accept all kinds of :term:`awaitable objects <awaitable>`. (Contributed "
"by Yury Selivanov.)"
msgstr ""

#: ../../whatsnew/3.5.rst:829
msgid ""
"New :func:`~asyncio.run_coroutine_threadsafe` function to submit coroutines "
"to event loops from other threads. (Contributed by Vincent Michel.)"
msgstr ""
"他のスレッドからコルーチンをイベントループに送信するための新たな :func:"
"`~asyncio.run_coroutine_threadsafe` 関数。\n"
"(Contributed by Vincent Michel.)"

#: ../../whatsnew/3.5.rst:833
msgid ""
"New :meth:`Transport.is_closing() <asyncio.BaseTransport.is_closing>` method "
"to check if the transport is closing or closed. (Contributed by Yury "
"Selivanov.)"
msgstr ""

#: ../../whatsnew/3.5.rst:837
msgid ""
"The :meth:`loop.create_server() <asyncio.loop.create_server>` method can now "
"accept a list of hosts. (Contributed by Yann Sionneau.)"
msgstr ""

#: ../../whatsnew/3.5.rst:841
msgid "Updates in 3.5.2:"
msgstr "3.5.2 での変更:"

#: ../../whatsnew/3.5.rst:843
msgid ""
"New :meth:`loop.create_future() <asyncio.loop.create_future>` method to "
"create Future objects.  This allows alternative event loop implementations, "
"such as `uvloop <https://github.com/MagicStack/uvloop>`_, to provide a "
"faster :class:`asyncio.Future` implementation. (Contributed by Yury "
"Selivanov.)"
msgstr ""

#: ../../whatsnew/3.5.rst:850
msgid ""
"New :meth:`loop.get_exception_handler() <asyncio.loop."
"get_exception_handler>` method to get the current exception handler. "
"(Contributed by Yury Selivanov.)"
msgstr ""

#: ../../whatsnew/3.5.rst:854
msgid ""
"New :meth:`StreamReader.readuntil() <asyncio.StreamReader.readuntil>` method "
"to read data from the stream until a separator bytes sequence appears. "
"(Contributed by Mark Korenberg.)"
msgstr ""
"新しい :meth:`StreamReader.readuntil() <asyncio.StreamReader.readuntil>` メ"
"ソッドで、区切りとなるバイトの並びが出てくるまでストリームからデータを読み取"
"れるようになりました。\n"
"(Contributed by Mark Korenberg.)"

#: ../../whatsnew/3.5.rst:859
msgid ""
"The :meth:`loop.create_connection() <asyncio.loop.create_connection>` and :"
"meth:`loop.create_server() <asyncio.loop.create_server>` methods are "
"optimized to avoid calling the system ``getaddrinfo`` function if the "
"address is already resolved. (Contributed by A. Jesse Jiryu Davis.)"
msgstr ""

#: ../../whatsnew/3.5.rst:865
msgid ""
"The :meth:`loop.sock_connect(sock, address) <asyncio.loop.sock_connect>` no "
"longer requires the *address* to be resolved prior to the call. (Contributed "
"by A. Jesse Jiryu Davis.)"
msgstr ""

#: ../../whatsnew/3.5.rst:871
msgid "bz2"
msgstr "bz2"

#: ../../whatsnew/3.5.rst:873
msgid ""
"The :meth:`BZ2Decompressor.decompress <bz2.BZ2Decompressor.decompress>` "
"method now accepts an optional *max_length* argument to limit the maximum "
"size of decompressed data. (Contributed by Nikolaus Rath in :issue:`15955`.)"
msgstr ""
":meth:`BZ2Decompressor.decompress <bz2.BZ2Decompressor.decompress>` メソッド"
"がオプション引数 *max_length* を取れるようになり、展開されたデータの最大サイ"
"ズが制限できるようになりました。\n"
"(Contributed by Nikolaus Rath in :issue:`15955`.)"

#: ../../whatsnew/3.5.rst:879
msgid "cgi"
msgstr "cgi"

#: ../../whatsnew/3.5.rst:881
msgid ""
"The :class:`!FieldStorage` class now supports the :term:`context manager` "
"protocol.  (Contributed by Berker Peksag in :issue:`20289`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:886
msgid "cmath"
msgstr "cmath"

#: ../../whatsnew/3.5.rst:888
msgid ""
"A new function :func:`~cmath.isclose` provides a way to test for approximate "
"equality.  (Contributed by Chris Barker and Tal Einat in :issue:`24270`.)"
msgstr ""
"新たな関数 :func:`~cmath.isclose` は近似的に等しいかどうかを判断する方法を提"
"供します。\n"
"(Contributed by Chris Barker and Tal Einat in :issue:`24270`.)"

#: ../../whatsnew/3.5.rst:893
msgid "code"
msgstr "コード"

#: ../../whatsnew/3.5.rst:895
msgid ""
"The :func:`InteractiveInterpreter.showtraceback() <code."
"InteractiveInterpreter.showtraceback>` method now prints the full chained "
"traceback, just like the interactive interpreter.  (Contributed by Claudiu "
"Popa in :issue:`17442`.)"
msgstr ""
":func:`InteractiveInterpreter.showtraceback() <code.InteractiveInterpreter."
"showtraceback>` メソッドが、対話的インタープリタのように連なったスタックト"
"レース全体を表示するようになりました。\n"
"(Contributed by Claudiu Popa in :issue:`17442`.)"

#: ../../whatsnew/3.5.rst:901
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.5.rst:905
msgid ""
"The :class:`~collections.OrderedDict` class is now implemented in C, which "
"makes it 4 to 100 times faster.  (Contributed by Eric Snow in :issue:"
"`16991`.)"
msgstr ""
":class:`collections.OrderedDict` が C で実装されました。\n"
"これにより 4倍 から 100 倍高速になりました。\n"
"(Contributed by Eric Snow in :issue:`16991`.)"

#: ../../whatsnew/3.5.rst:908
msgid ""
":meth:`OrderedDict.items() <collections.OrderedDict.items>`, :meth:"
"`OrderedDict.keys() <collections.OrderedDict.keys>`, :meth:`OrderedDict."
"values() <collections.OrderedDict.values>` views now support :func:"
"`reversed` iteration. (Contributed by Serhiy Storchaka in :issue:`19505`.)"
msgstr ""
":meth:`OrderedDict.items() <collections.OrderedDict.items>`, :meth:"
"`OrderedDict.keys() <collections.OrderedDict.keys>`, :meth:`OrderedDict."
"values() <collections.OrderedDict.values>` ビューが :func:`reversed` イテレー"
"ションをサポートしました。\n"
"(Contributed by Serhiy Storchaka in :issue:`19505`.)"

#: ../../whatsnew/3.5.rst:914
msgid ""
"The :class:`~collections.deque` class now defines :meth:`~collections.deque."
"index`, :meth:`~collections.deque.insert`, and :meth:`~collections.deque."
"copy`, and supports the ``+`` and ``*`` operators. This allows deques to be "
"recognized as a :class:`~collections.abc.MutableSequence` and improves their "
"substitutability for lists. (Contributed by Raymond Hettinger in :issue:"
"`23704`.)"
msgstr ""
":class:`~collections.deque` クラスが :meth:`~collections.deque.index`、 :"
"meth:`~collections.deque.insert`、 :meth:`~collections.deque.copy` を定義し、"
"``+`` と ``*`` 演算をサポートしました。\n"
"これにより deque インスタンスは :class:`~collections.abc.MutableSequence` と"
"認識され、list との代替性が向上しました。\n"
"(Contributed by Raymond Hettinger in :issue:`23704`.)"

#: ../../whatsnew/3.5.rst:921
msgid ""
"Docstrings produced by :func:`~collections.namedtuple` can now be updated::"
msgstr ""
":func:`~collections.namedtuple` で生成されたドキュメンテーション文字列が更新"
"可能となりました::"

#: ../../whatsnew/3.5.rst:923
msgid ""
"Point = namedtuple('Point', ['x', 'y'])\n"
"Point.__doc__ += ': Cartesian coordinate'\n"
"Point.x.__doc__ = 'abscissa'\n"
"Point.y.__doc__ = 'ordinate'"
msgstr ""

#: ../../whatsnew/3.5.rst:928
msgid "(Contributed by Berker Peksag in :issue:`24064`.)"
msgstr "(Contributed by Berker Peksag in :issue:`24064`.)"

#: ../../whatsnew/3.5.rst:930
msgid ""
"The :class:`~collections.UserString` class now implements the :meth:"
"`__getnewargs__`, :meth:`__rmod__`, :meth:`~str.casefold`, :meth:`~str."
"format_map`, :meth:`~str.isprintable`, and :meth:`~str.maketrans` methods to "
"match the corresponding methods of :class:`str`. (Contributed by Joe Jevnik "
"in :issue:`22189`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:938
msgid "collections.abc"
msgstr "collections.abc"

#: ../../whatsnew/3.5.rst:940
msgid ""
"The :meth:`Sequence.index() <collections.abc.Sequence.index>` method now "
"accepts *start* and *stop* arguments to match the corresponding methods of :"
"class:`tuple`, :class:`list`, etc. (Contributed by Devin Jeanpierre in :"
"issue:`23086`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:945
msgid ""
"A new :class:`~collections.abc.Generator` abstract base class. (Contributed "
"by Stefan Behnel in :issue:`24018`.)"
msgstr ""
"新たに :class:`~collections.abc.Generator` 抽象基底クラスが追加されました。\n"
"(Contributed by Stefan Behnel in :issue:`24018`.)"

#: ../../whatsnew/3.5.rst:948
msgid ""
"New :class:`~collections.abc.Awaitable`, :class:`~collections.abc."
"Coroutine`, :class:`~collections.abc.AsyncIterator`, and :class:"
"`~collections.abc.AsyncIterable` abstract base classes. (Contributed by Yury "
"Selivanov in :issue:`24184`.)"
msgstr ""
"新たに :class:`~collections.abc.Awaitable`, :class:`~collections.abc."
"Coroutine`, :class:`~collections.abc.AsyncIterator`, :class:`~collections."
"abc.AsyncIterable` 抽象基底クラスが追加されました。\n"
"(Contributed by Yury Selivanov in :issue:`24184`.)"

#: ../../whatsnew/3.5.rst:953
msgid ""
"For earlier Python versions, a backport of the new ABCs is available in an "
"external :pypi:`PyPI package <backports_abc>`."
msgstr ""

#: ../../whatsnew/3.5.rst:958
msgid "compileall"
msgstr "compileall"

#: ../../whatsnew/3.5.rst:960
msgid ""
"A new :mod:`compileall` option, :samp:`-j {N}`, allows running *N* workers "
"simultaneously to perform parallel bytecode compilation. The :func:"
"`~compileall.compile_dir` function has a corresponding ``workers`` "
"parameter.  (Contributed by Claudiu Popa in :issue:`16104`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:965
msgid ""
"Another new option, ``-r``, allows controlling the maximum recursion level "
"for subdirectories.  (Contributed by Claudiu Popa in :issue:`19628`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:968
msgid ""
"The ``-q`` command line option can now be specified more than once, in which "
"case all output, including errors, will be suppressed.  The corresponding "
"``quiet`` parameter in :func:`~compileall.compile_dir`, :func:`~compileall."
"compile_file`, and :func:`~compileall.compile_path` can now accept an "
"integer value indicating the level of output suppression. (Contributed by "
"Thomas Kluyver in :issue:`21338`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:977
msgid "concurrent.futures"
msgstr "concurrent.futures"

#: ../../whatsnew/3.5.rst:979
msgid ""
"The :meth:`Executor.map() <concurrent.futures.Executor.map>` method now "
"accepts a *chunksize* argument to allow batching of tasks to improve "
"performance when :meth:`~concurrent.futures.ProcessPoolExecutor` is used. "
"(Contributed by Dan O'Reilly in :issue:`11271`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:984
msgid ""
"The number of workers in the :class:`~concurrent.futures.ThreadPoolExecutor` "
"constructor is optional now.  The default value is 5 times the number of "
"CPUs. (Contributed by Claudiu Popa in :issue:`21527`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:990
msgid "configparser"
msgstr "configparser"

#: ../../whatsnew/3.5.rst:992
msgid ""
":mod:`configparser` now provides a way to customize the conversion of values "
"by specifying a dictionary of converters in the :class:`~configparser."
"ConfigParser` constructor, or by defining them as methods in "
"``ConfigParser`` subclasses.  Converters defined in a parser instance are "
"inherited by its section proxies."
msgstr ""

#: ../../whatsnew/3.5.rst:998
msgid "Example::"
msgstr "以下はプログラム例です::"

#: ../../whatsnew/3.5.rst:1000
msgid ""
">>> import configparser\n"
">>> conv = {}\n"
">>> conv['list'] = lambda v: [e.strip() for e in v.split() if e.strip()]\n"
">>> cfg = configparser.ConfigParser(converters=conv)\n"
">>> cfg.read_string(\"\"\"\n"
"... [s]\n"
"... list = a b c d e f g\n"
"... \"\"\")\n"
">>> cfg.get('s', 'list')\n"
"'a b c d e f g'\n"
">>> cfg.getlist('s', 'list')\n"
"['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
">>> section = cfg['s']\n"
">>> section.getlist('list')\n"
"['a', 'b', 'c', 'd', 'e', 'f', 'g']"
msgstr ""

#: ../../whatsnew/3.5.rst:1016
msgid "(Contributed by Łukasz Langa in :issue:`18159`.)"
msgstr "(Contributed by Łukasz Langa in :issue:`18159`.)"

#: ../../whatsnew/3.5.rst:1020
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.5.rst:1022
msgid ""
"The new :func:`~contextlib.redirect_stderr` :term:`context manager` (similar "
"to :func:`~contextlib.redirect_stdout`) makes it easier for utility scripts "
"to handle inflexible APIs that write their output to :data:`sys.stderr` and "
"don't provide any options to redirect it::"
msgstr ""
"新規 :term:`context manager` の :func:`contextlib.redirect_stderr` は、ユー"
"ティリティスクリプトにて、その出力を :data:`sys.stderr` に書き出す一方でその"
"向き先を変えれない頑固な API の扱いを簡単にしてくれます  (:func:`~contextlib."
"redirect_stdout` と対となるものです)。::"

#: ../../whatsnew/3.5.rst:1027
msgid ""
">>> import contextlib, io, logging\n"
">>> f = io.StringIO()\n"
">>> with contextlib.redirect_stderr(f):\n"
"...     logging.warning('warning')\n"
"...\n"
">>> f.getvalue()\n"
"'WARNING:root:warning\\n'"
msgstr ""

#: ../../whatsnew/3.5.rst:1035
msgid "(Contributed by Berker Peksag in :issue:`22389`.)"
msgstr "(Contributed by Berker Peksag in :issue:`22389`.)"

#: ../../whatsnew/3.5.rst:1039
msgid "csv"
msgstr "csv"

#: ../../whatsnew/3.5.rst:1041
msgid ""
"The :meth:`~csv.csvwriter.writerow` method now supports arbitrary iterables, "
"not just sequences.  (Contributed by Serhiy Storchaka in :issue:`23171`.)"
msgstr ""
":meth:`~csv.csvwriter.writerow` メソッドは、シーケンスだけでなく、 任意のイテ"
"ラブルをサポートしました。(Contributed by Serhiy Storchaka in :issue:"
"`23171`.)"

#: ../../whatsnew/3.5.rst:1046
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.5.rst:1048
msgid ""
"The new :func:`~curses.update_lines_cols` function updates the :data:`LINES` "
"and :data:`COLS` module variables.  This is useful for detecting manual "
"screen resizing.  (Contributed by Arnon Yaari in :issue:`4254`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1054
msgid "dbm"
msgstr "dbm"

#: ../../whatsnew/3.5.rst:1056
msgid ""
":func:`dumb.open <dbm.dumb.open>` always creates a new database when the "
"flag has the value ``\"n\"``.  (Contributed by Claudiu Popa in :issue:"
"`18039`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1061
msgid "difflib"
msgstr "difflib"

#: ../../whatsnew/3.5.rst:1063
msgid ""
"The charset of HTML documents generated by :meth:`HtmlDiff.make_file() "
"<difflib.HtmlDiff.make_file>` can now be customized by using a new *charset* "
"keyword-only argument. The default charset of HTML document changed from "
"``\"ISO-8859-1\"`` to ``\"utf-8\"``. (Contributed by Berker Peksag in :issue:"
"`2052`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1070
msgid ""
"The :func:`~difflib.diff_bytes` function can now compare lists of byte "
"strings.  This fixes a regression from Python 2. (Contributed by Terry J. "
"Reedy and Greg Ward in :issue:`17445`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1076
msgid "distutils"
msgstr "distutils"

#: ../../whatsnew/3.5.rst:1078
msgid ""
"Both the ``build`` and ``build_ext`` commands now accept a ``-j`` option to "
"enable parallel building of extension modules. (Contributed by Antoine "
"Pitrou in :issue:`5309`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1082
msgid ""
"The ``distutils`` module now supports ``xz`` compression, and can be enabled "
"by passing ``xztar`` as an argument to ``bdist --format``. (Contributed by "
"Serhiy Storchaka in :issue:`16314`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1088
msgid "doctest"
msgstr "doctest"

#: ../../whatsnew/3.5.rst:1090
msgid ""
"The :func:`~doctest.DocTestSuite` function returns an empty :class:`unittest."
"TestSuite` if *module* contains no docstrings, instead of raising :exc:"
"`ValueError`.  (Contributed by Glenn Jones in :issue:`15916`.)"
msgstr ""
":func:`~doctest.DocTestSuite` 関数が、 *module* がドキュメンテーション文字列"
"(docstrings)を含まない場合に :exc:`ValueError` を送出するのではなく空の :"
"class:`unittest.TestSuite` を返すようになりました。 (Contributed by Glenn "
"Jones in :issue:`15916`.)"

#: ../../whatsnew/3.5.rst:1096
msgid "email"
msgstr "email"

#: ../../whatsnew/3.5.rst:1098
msgid ""
"A new policy option :attr:`Policy.mangle_from_ <email.policy.Policy."
"mangle_from_>` controls whether or not lines that start with ``\"From \"`` "
"in email bodies are prefixed with a ``\">\"`` character by generators.  The "
"default is ``True`` for :attr:`~email.policy.compat32` and ``False`` for all "
"other policies. (Contributed by Milan Oberkirch in :issue:`20098`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1104
msgid ""
"A new :meth:`Message.get_content_disposition() <email.message.Message."
"get_content_disposition>` method provides easy access to a canonical value "
"for the :mailheader:`Content-Disposition` header. (Contributed by Abhilash "
"Raj in :issue:`21083`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1110
msgid ""
"A new policy option :attr:`EmailPolicy.utf8 <email.policy.EmailPolicy.utf8>` "
"can be set to ``True`` to encode email headers using the UTF-8 charset "
"instead of using encoded words.  This allows ``Messages`` to be formatted "
"according to :rfc:`6532` and used with an SMTP server that supports the :rfc:"
"`6531` ``SMTPUTF8`` extension.  (Contributed by R. David Murray in :issue:"
"`24211`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1117
msgid ""
"The :class:`mime.text.MIMEText <email.mime.text.MIMEText>` constructor now "
"accepts a :class:`charset.Charset <email.charset.Charset>` instance. "
"(Contributed by Claude Paroz and Berker Peksag in :issue:`16324`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1123
msgid "enum"
msgstr "enum"

#: ../../whatsnew/3.5.rst:1125
msgid ""
"The :class:`~enum.Enum` callable has a new parameter *start* to specify the "
"initial number of enum values if only *names* are provided::"
msgstr ""
":class:`~enum.Enum` 呼び出し可能オブジェクトは、*names* のみが与えられた場合"
"に enum 値の初期値を指定する新たな引数 *start* を持ちます::"

#: ../../whatsnew/3.5.rst:1128
msgid ""
">>> Animal = enum.Enum('Animal', 'cat dog', start=10)\n"
">>> Animal.cat\n"
"<Animal.cat: 10>\n"
">>> Animal.dog\n"
"<Animal.dog: 11>"
msgstr ""

#: ../../whatsnew/3.5.rst:1134
msgid "(Contributed by Ethan Furman in :issue:`21706`.)"
msgstr "(Contributed by Ethan Furman in :issue:`21706`.)"

#: ../../whatsnew/3.5.rst:1138
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.5.rst:1140
msgid ""
"The :func:`~faulthandler.enable`, :func:`~faulthandler.register`, :func:"
"`~faulthandler.dump_traceback` and :func:`~faulthandler."
"dump_traceback_later` functions now accept file descriptors in addition to "
"file-like objects. (Contributed by Wei Wu in :issue:`23566`.)"
msgstr ""
"関数 :func:`~faulthandler.enable`, :func:`~faulthandler.register`, :func:"
"`~faulthandler.dump_traceback`, :func:`~faulthandler.dump_traceback_later` "
"が、ファイル様オブジェクトだけでなくファイル記述子を受け取るようになりまし"
"た。 (Contributed by Wei Wu in :issue:`23566`.)"

#: ../../whatsnew/3.5.rst:1148
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.5.rst:1152
msgid ""
"Most of the :func:`~functools.lru_cache` machinery is now implemented in C, "
"making it significantly faster.  (Contributed by Matt Joiner, Alexey "
"Kachayev, and Serhiy Storchaka in :issue:`14373`.)"
msgstr ""
":func:`~functools.lru_cache` 機構の多くが C で実装されました。これにより速度"
"が大幅に向上しました。 (Contributed by Matt Joiner, Alexey Kachayev, and "
"Serhiy Storchaka in :issue:`14373`.)"

#: ../../whatsnew/3.5.rst:1158
msgid "glob"
msgstr "glob"

#: ../../whatsnew/3.5.rst:1160
msgid ""
"The :func:`~glob.iglob` and :func:`~glob.glob` functions now support "
"recursive search in subdirectories, using the ``\"**\"`` pattern. "
"(Contributed by Serhiy Storchaka in :issue:`13968`.)"
msgstr ""
":func:`~glob.iglob` 関数と :func:`~glob.glob` 関数は、 ``\"**\"`` パターンを"
"使ったサブディレクトリの再帰的な検索をサポートしました。(Contributed by "
"Serhiy Storchaka in :issue:`13968`.)"

#: ../../whatsnew/3.5.rst:1166
msgid "gzip"
msgstr "gzip"

#: ../../whatsnew/3.5.rst:1168
msgid ""
"The *mode* argument of the :class:`~gzip.GzipFile` constructor now accepts "
"``\"x\"`` to request exclusive creation. (Contributed by Tim Heaney in :"
"issue:`19222`.)"
msgstr ""
":class:`~gzip.GzipFile` コンストラクタの *mode* 引数が排他的作成を要求する "
"``\"x\"``  を受け取るようになりました。 (Contributed by Tim Heaney in :issue:"
"`19222`.)"

#: ../../whatsnew/3.5.rst:1174
msgid "heapq"
msgstr "heapq"

#: ../../whatsnew/3.5.rst:1176
msgid ""
"Element comparison in :func:`~heapq.merge` can now be customized by passing "
"a :term:`key function` in a new optional *key* keyword argument, and a new "
"optional *reverse* keyword argument can be used to reverse element "
"comparison::"
msgstr ""

#: ../../whatsnew/3.5.rst:1181
msgid ""
">>> import heapq\n"
">>> a = ['9', '777', '55555']\n"
">>> b = ['88', '6666']\n"
">>> list(heapq.merge(a, b, key=len))\n"
"['9', '88', '777', '6666', '55555']\n"
">>> list(heapq.merge(reversed(a), reversed(b), key=len, reverse=True))\n"
"['55555', '6666', '777', '88', '9']"
msgstr ""

#: ../../whatsnew/3.5.rst:1189
msgid "(Contributed by Raymond Hettinger in :issue:`13742`.)"
msgstr "(Contributed by Raymond Hettinger in :issue:`13742`.)"

#: ../../whatsnew/3.5.rst:1193
msgid "http"
msgstr "http"

#: ../../whatsnew/3.5.rst:1195
msgid ""
"A new :class:`HTTPStatus <http.HTTPStatus>` enum that defines a set of HTTP "
"status codes, reason phrases and long descriptions written in English. "
"(Contributed by Demian Brecht in :issue:`21793`.)"
msgstr ""
"新しい :class:`HTTPStatus <http.HTTPStatus>` のenum は、HTTPステータスコード"
"のセットで、その理由句と詳細な説明は、英語で記載されています。(Contributed "
"by Demian Brecht in :issue:`21793`.)"

#: ../../whatsnew/3.5.rst:1201
msgid "http.client"
msgstr "http.client"

#: ../../whatsnew/3.5.rst:1203
msgid ""
":meth:`HTTPConnection.getresponse() <http.client.HTTPConnection."
"getresponse>` now raises a :exc:`~http.client.RemoteDisconnected` exception "
"when a remote server connection is closed unexpectedly.  Additionally, if a :"
"exc:`ConnectionError` (of which ``RemoteDisconnected`` is a subclass) is "
"raised, the client socket is now closed automatically, and will reconnect on "
"the next request::"
msgstr ""

#: ../../whatsnew/3.5.rst:1210
msgid ""
"import http.client\n"
"conn = http.client.HTTPConnection('www.python.org')\n"
"for retries in range(3):\n"
"    try:\n"
"        conn.request('GET', '/')\n"
"        resp = conn.getresponse()\n"
"    except http.client.RemoteDisconnected:\n"
"        pass"
msgstr ""

#: ../../whatsnew/3.5.rst:1219
msgid "(Contributed by Martin Panter in :issue:`3566`.)"
msgstr "(Contributed by Martin Panter in :issue:`3566`.)"

#: ../../whatsnew/3.5.rst:1223
msgid "idlelib and IDLE"
msgstr "idlelib と IDLE"

#: ../../whatsnew/3.5.rst:1225
msgid ""
"Since idlelib implements the IDLE shell and editor and is not intended for "
"import by other programs, it gets improvements with every release.  See :"
"file:`Lib/idlelib/NEWS.txt` for a cumulative list of changes since 3.4.0, as "
"well as changes made in future 3.5.x releases. This file is also available "
"from the IDLE :menuselection:`Help --> About IDLE` dialog."
msgstr ""
"idlelib は IDLE シェルとエディタを実装するものであってほかのプログラムからイ"
"ンポートされることを意図してはいないので、改善は毎度のリリースごとに行われま"
"す。3.4.0 から始まり、また将来の 3.5.x リリースになされる累積的な変更リスト"
"は :file:`Lib/idlelib/NEWS.txt` で読むことが出来ます。このファイルは IDLE "
"で :menuselection:`Help --> About IDLE` からも辿り着けます。"

#: ../../whatsnew/3.5.rst:1233
msgid "imaplib"
msgstr "imaplib"

#: ../../whatsnew/3.5.rst:1235
msgid ""
"The :class:`~imaplib.IMAP4` class now supports the :term:`context manager` "
"protocol. When used in a :keyword:`with` statement, the IMAP4 ``LOGOUT`` "
"command will be called automatically at the end of the block. (Contributed "
"by Tarek Ziadé and Serhiy Storchaka in :issue:`4972`.)"
msgstr ""
":class:`~imaplib.IMAP4` クラスが :term:`context manager` プロトコルをサポート"
"するようになりました。 :keyword:`with` 文とともに使うと、 IMAP4 ``LOGOUT`` コ"
"マンドがブロックの終了時に自動的に呼び出されます。 (Contributed by Tarek "
"Ziadé and Serhiy Storchaka in :issue:`4972`.)"

#: ../../whatsnew/3.5.rst:1240
msgid ""
"The :mod:`imaplib` module now supports :rfc:`5161` (ENABLE Extension) and :"
"rfc:`6855` (UTF-8 Support) via the :meth:`IMAP4.enable() <imaplib.IMAP4."
"enable>` method.  A new :attr:`IMAP4.utf8_enabled <imaplib.IMAP4."
"utf8_enabled>` attribute tracks whether or not :rfc:`6855` support is "
"enabled. (Contributed by Milan Oberkirch, R. David Murray, and Maciej Szulik "
"in :issue:`21800`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1247
msgid ""
"The :mod:`imaplib` module now automatically encodes non-ASCII string "
"usernames and passwords using UTF-8, as recommended by the RFCs.  "
"(Contributed by Milan Oberkirch in :issue:`21800`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1253
msgid "imghdr"
msgstr "imghdr"

#: ../../whatsnew/3.5.rst:1255
msgid ""
"The :func:`!what` function now recognizes the `OpenEXR <https://www.openexr."
"com>`_ format (contributed by Martin Vignali and Claudiu Popa in :issue:"
"`20295`), and the `WebP <https://en.wikipedia.org/wiki/WebP>`_ format "
"(contributed by Fabrice Aneche and Claudiu Popa in :issue:`20197`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1263
msgid "importlib"
msgstr "importlib"

#: ../../whatsnew/3.5.rst:1265
msgid ""
"The :class:`util.LazyLoader <importlib.util.LazyLoader>` class allows for "
"lazy loading of modules in applications where startup time is important. "
"(Contributed by Brett Cannon in :issue:`17621`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1269
msgid ""
"The :func:`abc.InspectLoader.source_to_code() <importlib.abc.InspectLoader."
"source_to_code>` method is now a static method.  This makes it easier to "
"initialize a module object with code compiled from a string by running "
"``exec(code, module.__dict__)``. (Contributed by Brett Cannon in :issue:"
"`21156`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1275
msgid ""
"The new :func:`util.module_from_spec() <importlib.util.module_from_spec>` "
"function is now the preferred way to create a new module.  As opposed to "
"creating a :class:`types.ModuleType` instance directly, this new function "
"will set the various import-controlled attributes based on the passed-in "
"spec object.  (Contributed by Brett Cannon in :issue:`20383`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1283
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.5.rst:1285
msgid ""
"Both the :class:`~inspect.Signature` and :class:`~inspect.Parameter` classes "
"are now picklable and hashable.  (Contributed by Yury Selivanov in :issue:"
"`20726` and :issue:`20334`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1289
msgid ""
"A new :meth:`BoundArguments.apply_defaults() <inspect.BoundArguments."
"apply_defaults>` method provides a way to set default values for missing "
"arguments::"
msgstr ""

#: ../../whatsnew/3.5.rst:1293
msgid ""
">>> def foo(a, b='ham', *args): pass\n"
">>> ba = inspect.signature(foo).bind('spam')\n"
">>> ba.apply_defaults()\n"
">>> ba.arguments\n"
"OrderedDict([('a', 'spam'), ('b', 'ham'), ('args', ())])"
msgstr ""

#: ../../whatsnew/3.5.rst:1299
msgid "(Contributed by Yury Selivanov in :issue:`24190`.)"
msgstr "(Contributed by Yury Selivanov in :issue:`24190`.)"

#: ../../whatsnew/3.5.rst:1301
msgid ""
"A new class method :meth:`Signature.from_callable() <inspect.Signature."
"from_callable>` makes subclassing of :class:`~inspect.Signature` easier.  "
"(Contributed by Yury Selivanov and Eric Snow in :issue:`17373`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1306
msgid ""
"The :func:`~inspect.signature` function now accepts a *follow_wrapped* "
"optional keyword argument, which, when set to ``False``, disables automatic "
"following of ``__wrapped__`` links. (Contributed by Yury Selivanov in :issue:"
"`20691`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1311
msgid ""
"A set of new functions to inspect :term:`coroutine functions <coroutine "
"function>` and :term:`coroutine objects <coroutine>` has been added: :func:"
"`~inspect.iscoroutine`, :func:`~inspect.iscoroutinefunction`, :func:"
"`~inspect.isawaitable`, :func:`~inspect.getcoroutinelocals`, and :func:"
"`~inspect.getcoroutinestate`. (Contributed by Yury Selivanov in :issue:"
"`24017` and :issue:`24400`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1319
msgid ""
"The :func:`~inspect.stack`, :func:`~inspect.trace`, :func:`~inspect."
"getouterframes`, and :func:`~inspect.getinnerframes` functions now return a "
"list of named tuples. (Contributed by Daniel Shahaf in :issue:`16808`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1326
msgid "io"
msgstr "io"

#: ../../whatsnew/3.5.rst:1328
msgid ""
"A new :meth:`BufferedIOBase.readinto1() <io.BufferedIOBase.readinto1>` "
"method, that uses at most one call to the underlying raw stream's :meth:"
"`RawIOBase.read() <io.RawIOBase.read>` or :meth:`RawIOBase.readinto() <io."
"RawIOBase.readinto>` methods. (Contributed by Nikolaus Rath in :issue:"
"`20578`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1336
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.5.rst:1338
msgid ""
"Both the :class:`~ipaddress.IPv4Network` and :class:`~ipaddress.IPv6Network` "
"classes now accept an ``(address, netmask)`` tuple argument, so as to easily "
"construct network objects from existing addresses::"
msgstr ""

#: ../../whatsnew/3.5.rst:1342
msgid ""
">>> import ipaddress\n"
">>> ipaddress.IPv4Network(('127.0.0.0', 8))\n"
"IPv4Network('127.0.0.0/8')\n"
">>> ipaddress.IPv4Network(('127.0.0.0', '255.0.0.0'))\n"
"IPv4Network('127.0.0.0/8')"
msgstr ""

#: ../../whatsnew/3.5.rst:1348
msgid "(Contributed by Peter Moody and Antoine Pitrou in :issue:`16531`.)"
msgstr "(Contributed by Peter Moody and Antoine Pitrou in :issue:`16531`.)"

#: ../../whatsnew/3.5.rst:1350
msgid ""
"A new :attr:`~ipaddress.IPv4Network.reverse_pointer` attribute for the :"
"class:`~ipaddress.IPv4Network` and :class:`~ipaddress.IPv6Network` classes "
"returns the name of the reverse DNS PTR record::"
msgstr ""

#: ../../whatsnew/3.5.rst:1354
msgid ""
">>> import ipaddress\n"
">>> addr = ipaddress.IPv4Address('127.0.0.1')\n"
">>> addr.reverse_pointer\n"
"'1.0.0.127.in-addr.arpa'\n"
">>> addr6 = ipaddress.IPv6Address('::1')\n"
">>> addr6.reverse_pointer\n"
"'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa'"
msgstr ""

#: ../../whatsnew/3.5.rst:1362
msgid "(Contributed by Leon Weber in :issue:`20480`.)"
msgstr "(Contributed by Leon Weber in :issue:`20480`.)"

#: ../../whatsnew/3.5.rst:1366
msgid "json"
msgstr "json"

#: ../../whatsnew/3.5.rst:1368
msgid ""
"The :mod:`json.tool` command line interface now preserves the order of keys "
"in JSON objects passed in input.  The new ``--sort-keys`` option can be used "
"to sort the keys alphabetically. (Contributed by Berker Peksag in :issue:"
"`21650`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1373
msgid ""
"JSON decoder now raises :exc:`~json.JSONDecodeError` instead of :exc:"
"`ValueError` to provide better context information about the error. "
"(Contributed by Serhiy Storchaka in :issue:`19361`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1379
msgid "linecache"
msgstr "linecache"

#: ../../whatsnew/3.5.rst:1381
msgid ""
"A new :func:`~linecache.lazycache` function can be used to capture "
"information about a non-file-based module to permit getting its lines later "
"via :func:`~linecache.getline`. This avoids doing I/O until a line is "
"actually needed, without having to carry the module globals around "
"indefinitely. (Contributed by Robert Collins in :issue:`17911`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1389
msgid "locale"
msgstr "locale"

#: ../../whatsnew/3.5.rst:1391
msgid ""
"A new :func:`~locale.delocalize` function can be used to convert a string "
"into a normalized number string, taking the ``LC_NUMERIC`` settings into "
"account::"
msgstr ""

#: ../../whatsnew/3.5.rst:1394
msgid ""
">>> import locale\n"
">>> locale.setlocale(locale.LC_NUMERIC, 'de_DE.UTF-8')\n"
"'de_DE.UTF-8'\n"
">>> locale.delocalize('1.234,56')\n"
"'1234.56'\n"
">>> locale.setlocale(locale.LC_NUMERIC, 'en_US.UTF-8')\n"
"'en_US.UTF-8'\n"
">>> locale.delocalize('1,234.56')\n"
"'1234.56'"
msgstr ""

#: ../../whatsnew/3.5.rst:1404
msgid "(Contributed by Cédric Krier in :issue:`13918`.)"
msgstr "(Contributed by Cédric Krier in :issue:`13918`.)"

#: ../../whatsnew/3.5.rst:1408
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.5.rst:1410
msgid ""
"All logging methods (:class:`~logging.Logger` :meth:`~logging.Logger.log`, :"
"meth:`~logging.Logger.exception`, :meth:`~logging.Logger.critical`, :meth:"
"`~logging.Logger.debug`, etc.), now accept exception instances as an "
"*exc_info* argument, in addition to boolean values and exception tuples::"
msgstr ""

#: ../../whatsnew/3.5.rst:1416
msgid ""
">>> import logging\n"
">>> try:\n"
"...     1/0\n"
"... except ZeroDivisionError as ex:\n"
"...     logging.error('exception', exc_info=ex)\n"
"ERROR:root:exception"
msgstr ""

#: ../../whatsnew/3.5.rst:1423
msgid "(Contributed by Yury Selivanov in :issue:`20537`.)"
msgstr "(Contributed by Yury Selivanov in :issue:`20537`.)"

#: ../../whatsnew/3.5.rst:1425
msgid ""
"The :class:`handlers.HTTPHandler <logging.handlers.HTTPHandler>` class now "
"accepts an optional :class:`ssl.SSLContext` instance to configure SSL "
"settings used in an HTTP connection. (Contributed by Alex Gaynor in :issue:"
"`22788`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1430
msgid ""
"The :class:`handlers.QueueListener <logging.handlers.QueueListener>` class "
"now takes a *respect_handler_level* keyword argument which, if set to "
"``True``, will pass messages to handlers taking handler levels into account. "
"(Contributed by Vinay Sajip.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1437
msgid "lzma"
msgstr "lzma"

#: ../../whatsnew/3.5.rst:1439
msgid ""
"The :meth:`LZMADecompressor.decompress() <lzma.LZMADecompressor.decompress>` "
"method now accepts an optional *max_length* argument to limit the maximum "
"size of decompressed data. (Contributed by Martin Panter in :issue:`15955`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1446
msgid "math"
msgstr "math"

#: ../../whatsnew/3.5.rst:1448
msgid ""
"Two new constants have been added to the :mod:`math` module: :data:`~math."
"inf` and :data:`~math.nan`.  (Contributed by Mark Dickinson in :issue:"
"`23185`.)"
msgstr ""
":mod:`math` モジュールに定数 :data:`~math.inf` および :data:`~math.nan` が追"
"加されました。\n"
"(Contributed by Mark Dickinson in :issue:`23185`.)"

#: ../../whatsnew/3.5.rst:1451
msgid ""
"A new function :func:`~math.isclose` provides a way to test for approximate "
"equality. (Contributed by Chris Barker and Tal Einat in :issue:`24270`.)"
msgstr ""
"新たな関数 :func:`~math.isclose` は近似的に等しいことを調べる方法を提供しま"
"す。\n"
"(Contributed by Chris Barker and Tal Einat in :issue:`24270`.)"

#: ../../whatsnew/3.5.rst:1454
msgid ""
"A new :func:`~math.gcd` function has been added.  The :func:`fractions.gcd` "
"function is now deprecated. (Contributed by Mark Dickinson and Serhiy "
"Storchaka in :issue:`22486`.)"
msgstr ""
"新たに関数 :func:`~math.gcd` が追加されました。\n"
"関数 :func:`fractions.gcd` は非推奨です。 (Contributed by Mark Dickinson and "
"Serhiy Storchaka in :issue:`22486`.)"

#: ../../whatsnew/3.5.rst:1460
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.5.rst:1462
msgid ""
":func:`sharedctypes.synchronized() <multiprocessing.sharedctypes."
"synchronized>` objects now support the :term:`context manager` protocol. "
"(Contributed by Charles-François Natali in :issue:`21565`.)"
msgstr ""
":func:`sharedctypes.synchronized() <multiprocessing.sharedctypes."
"synchronized>` オブジェクトが :term:`コンテキストマネージャ <context "
"manager>` プロトコルをサポートするようになりました。 (Contributed by Charles-"
"François Natali in :issue:`21565`.)"

#: ../../whatsnew/3.5.rst:1468
msgid "operator"
msgstr "operator"

#: ../../whatsnew/3.5.rst:1470
msgid ""
":func:`~operator.attrgetter`, :func:`~operator.itemgetter`, and :func:"
"`~operator.methodcaller` objects now support pickling. (Contributed by Josh "
"Rosenberg and Serhiy Storchaka in :issue:`22955`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1474
msgid ""
"New :func:`~operator.matmul` and :func:`~operator.imatmul` functions to "
"perform matrix multiplication. (Contributed by Benjamin Peterson in :issue:"
"`21176`.)"
msgstr ""
"行列乗算を行う :func:`~operator.matmul` 関数と :func:`~operator.imatmul` 関数"
"が新しく追加されました。\n"
"(Contributed by Benjamin Peterson in :issue:`21176`.)"

#: ../../whatsnew/3.5.rst:1480
msgid "os"
msgstr "os"

#: ../../whatsnew/3.5.rst:1482
msgid ""
"The new :func:`~os.scandir` function returning an iterator of :class:`~os."
"DirEntry` objects has been added.  If possible, :func:`~os.scandir` extracts "
"file attributes while scanning a directory, removing the need to perform "
"subsequent system calls to determine file type or attributes, which may "
"significantly improve performance.  (Contributed by Ben Hoyt with the help "
"of Victor Stinner in :issue:`22524`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1489
msgid ""
"On Windows, a new :attr:`stat_result.st_file_attributes <os.stat_result."
"st_file_attributes>` attribute is now available.  It corresponds to the "
"``dwFileAttributes`` member of the ``BY_HANDLE_FILE_INFORMATION`` structure "
"returned by ``GetFileInformationByHandle()``.  (Contributed by Ben Hoyt in :"
"issue:`21719`.)"
msgstr ""
"Windows において、新たに :attr:`stat_result.st_file_attributes <os."
"stat_result.st_file_attributes>` 属性が利用可能です。これは Windows API の "
"``GetFileInformationByHandle()`` から返る ``BY_HANDLE_FILE_INFORMATION`` 構造"
"体のメンバ ``dwFileAttributes`` に対応します。 (Contributed by Ben Hoyt in :"
"issue:`21719`.)"

#: ../../whatsnew/3.5.rst:1495
msgid ""
"The :func:`~os.urandom` function now uses the ``getrandom()`` syscall on "
"Linux 3.17 or newer, and ``getentropy()`` on OpenBSD 5.6 and newer, removing "
"the need to use ``/dev/urandom`` and avoiding failures due to potential file "
"descriptor exhaustion.  (Contributed by Victor Stinner in :issue:`22181`.)"
msgstr ""
":func:`~os.urandom` 関数が、Linux 3.17 以降ではシステムコール "
"``getrandom()`` を、OpenBSD 5.6 以降ではシステムコール ``getentropy()`` を使"
"うようになりました。これは ``/dev/urandom`` を使う必要性をなくし、潜在的には"
"起こり得たファイル記述子を使い果たすことによる失敗を避けることに繋がります。 "
"(Contributed by Victor Stinner in :issue:`22181`.)"

#: ../../whatsnew/3.5.rst:1500
msgid ""
"New :func:`~os.get_blocking` and :func:`~os.set_blocking` functions allow "
"getting and setting a file descriptor's blocking mode (:const:`~os."
"O_NONBLOCK`.) (Contributed by Victor Stinner in :issue:`22054`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1504
msgid ""
"The :func:`~os.truncate` and :func:`~os.ftruncate` functions are now "
"supported on Windows.  (Contributed by Steve Dower in :issue:`23668`.)"
msgstr ""
":func:`~os.truncate` と :func:`~os.ftruncate` が Windows でサポートされるよう"
"になりました。 (Contributed by Steve Dower in :issue:`23668`.)"

#: ../../whatsnew/3.5.rst:1507
msgid ""
"There is a new :func:`os.path.commonpath` function returning the longest "
"common sub-path of each passed pathname.  Unlike the :func:`os.path."
"commonprefix` function, it always returns a valid path::"
msgstr ""

#: ../../whatsnew/3.5.rst:1512
msgid ""
">>> os.path.commonprefix(['/usr/lib', '/usr/local/lib'])\n"
"'/usr/l'\n"
"\n"
">>> os.path.commonpath(['/usr/lib', '/usr/local/lib'])\n"
"'/usr'"
msgstr ""

#: ../../whatsnew/3.5.rst:1518
msgid "(Contributed by Rafik Draoui and Serhiy Storchaka in :issue:`10395`.)"
msgstr "(Contributed by Rafik Draoui and Serhiy Storchaka in :issue:`10395`.)"

#: ../../whatsnew/3.5.rst:1522
msgid "pathlib"
msgstr "pathlib"

#: ../../whatsnew/3.5.rst:1524
msgid ""
"The new :meth:`Path.samefile() <pathlib.Path.samefile>` method can be used "
"to check whether the path points to the same file as another path, which can "
"be either another :class:`~pathlib.Path` object, or a string::"
msgstr ""

#: ../../whatsnew/3.5.rst:1528
msgid ""
">>> import pathlib\n"
">>> p1 = pathlib.Path('/etc/hosts')\n"
">>> p2 = pathlib.Path('/etc/../etc/hosts')\n"
">>> p1.samefile(p2)\n"
"True"
msgstr ""

#: ../../whatsnew/3.5.rst:1534
msgid "(Contributed by Vajrasky Kok and Antoine Pitrou in :issue:`19775`.)"
msgstr "(Contributed by Vajrasky Kok and Antoine Pitrou in :issue:`19775`.)"

#: ../../whatsnew/3.5.rst:1536
msgid ""
"The :meth:`Path.mkdir() <pathlib.Path.mkdir>` method now accepts a new "
"optional *exist_ok* argument to match ``mkdir -p`` and :func:`os.makedirs` "
"functionality.  (Contributed by Berker Peksag in :issue:`21539`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1540
msgid ""
"There is a new :meth:`Path.expanduser() <pathlib.Path.expanduser>` method to "
"expand ``~`` and ``~user`` prefixes.  (Contributed by Serhiy Storchaka and "
"Claudiu Popa in :issue:`19776`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1544
msgid ""
"A new :meth:`Path.home() <pathlib.Path.home>` class method can be used to "
"get a :class:`~pathlib.Path` instance representing the user’s home "
"directory. (Contributed by Victor Salgado and Mayank Tripathi in :issue:"
"`19777`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1549
msgid ""
"New :meth:`Path.write_text() <pathlib.Path.write_text>`, :meth:`Path."
"read_text() <pathlib.Path.read_text>`, :meth:`Path.write_bytes() <pathlib."
"Path.write_bytes>`, :meth:`Path.read_bytes() <pathlib.Path.read_bytes>` "
"methods to simplify read/write operations on files."
msgstr ""

#: ../../whatsnew/3.5.rst:1555
msgid ""
"The following code snippet will create or rewrite existing file ``~/"
"spam42``::"
msgstr ""

#: ../../whatsnew/3.5.rst:1558
msgid ""
">>> import pathlib\n"
">>> p = pathlib.Path('~/spam42')\n"
">>> p.expanduser().write_text('ham')\n"
"3"
msgstr ""

#: ../../whatsnew/3.5.rst:1563
msgid "(Contributed by Christopher Welborn in :issue:`20218`.)"
msgstr "(Contributed by Christopher Welborn in :issue:`20218`.)"

#: ../../whatsnew/3.5.rst:1567
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.5.rst:1569
msgid ""
"Nested objects, such as unbound methods or nested classes, can now be "
"pickled using :ref:`pickle protocols <pickle-protocols>` older than protocol "
"version 4. Protocol version 4 already supports these cases.  (Contributed by "
"Serhiy Storchaka in :issue:`23611`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1576
msgid "poplib"
msgstr "poplib"

#: ../../whatsnew/3.5.rst:1578
msgid ""
"A new :meth:`POP3.utf8() <poplib.POP3.utf8>` command enables :rfc:`6856` "
"(Internationalized Email) support, if a POP server supports it. (Contributed "
"by Milan OberKirch in :issue:`21804`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1584
msgid "re"
msgstr "re"

#: ../../whatsnew/3.5.rst:1586
msgid ""
"References and conditional references to groups with fixed length are now "
"allowed in lookbehind assertions::"
msgstr ""

#: ../../whatsnew/3.5.rst:1589
msgid ""
">>> import re\n"
">>> pat = re.compile(r'(a|b).(?<=\\1)c')\n"
">>> pat.match('aac')\n"
"<_sre.SRE_Match object; span=(0, 3), match='aac'>\n"
">>> pat.match('bbc')\n"
"<_sre.SRE_Match object; span=(0, 3), match='bbc'>"
msgstr ""

#: ../../whatsnew/3.5.rst:1596
msgid "(Contributed by Serhiy Storchaka in :issue:`9179`.)"
msgstr "(Contributed by Serhiy Storchaka in :issue:`9179`.)"

#: ../../whatsnew/3.5.rst:1598
msgid ""
"The number of capturing groups in regular expressions is no longer limited "
"to 100.  (Contributed by Serhiy Storchaka in :issue:`22437`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1601
msgid ""
"The :func:`~re.sub` and :func:`~re.subn` functions now replace unmatched "
"groups with empty strings instead of raising an exception. (Contributed by "
"Serhiy Storchaka in :issue:`1519638`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1605
msgid ""
"The :class:`re.error` exceptions have new attributes, :attr:`~re.error."
"msg`, :attr:`~re.error.pattern`, :attr:`~re.error.pos`, :attr:`~re.error."
"lineno`, and :attr:`~re.error.colno`, that provide better context "
"information about the error::"
msgstr ""

#: ../../whatsnew/3.5.rst:1611
msgid ""
">>> re.compile(\"\"\"\n"
"...     (?x)\n"
"...     .++\n"
"... \"\"\")\n"
"Traceback (most recent call last):\n"
"   ...\n"
"sre_constants.error: multiple repeat at position 16 (line 3, column 7)"
msgstr ""

#: ../../whatsnew/3.5.rst:1619
msgid "(Contributed by Serhiy Storchaka in :issue:`22578`.)"
msgstr "(Contributed by Serhiy Storchaka in :issue:`22578`.)"

#: ../../whatsnew/3.5.rst:1623
msgid "readline"
msgstr "readline"

#: ../../whatsnew/3.5.rst:1625
msgid ""
"A new :func:`~readline.append_history_file` function can be used to append "
"the specified number of trailing elements in history to the given file. "
"(Contributed by Bruno Cauet in :issue:`22940`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1631
msgid "selectors"
msgstr "selectors"

#: ../../whatsnew/3.5.rst:1633
msgid ""
"The new :class:`~selectors.DevpollSelector` supports efficient ``/dev/poll`` "
"polling on Solaris. (Contributed by Giampaolo Rodola' in :issue:`18931`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1639
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.5.rst:1641
msgid ""
"The :func:`~shutil.move` function now accepts a *copy_function* argument, "
"allowing, for example, the :func:`~shutil.copy` function to be used instead "
"of the default :func:`~shutil.copy2` if there is a need to ignore file "
"metadata when moving. (Contributed by Claudiu Popa in :issue:`19840`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1647
msgid ""
"The :func:`~shutil.make_archive` function now supports the *xztar* format. "
"(Contributed by Serhiy Storchaka in :issue:`5411`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1652
msgid "signal"
msgstr "signal"

#: ../../whatsnew/3.5.rst:1654
msgid ""
"On Windows, the :func:`~signal.set_wakeup_fd` function now also supports "
"socket handles.  (Contributed by Victor Stinner in :issue:`22018`.)"
msgstr ""
"Windows において、 :func:`~signal.set_wakeup_fd` 関数がソケットハンドルもサ"
"ポートするようになりました。  (Contributed by Victor Stinner in :issue:"
"`22018`.)"

#: ../../whatsnew/3.5.rst:1657
msgid ""
"Various ``SIG*`` constants in the :mod:`signal` module have been converted "
"into :mod:`Enums <enum>`.  This allows meaningful names to be printed during "
"debugging, instead of integer \"magic numbers\". (Contributed by Giampaolo "
"Rodola' in :issue:`21076`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1664
msgid "smtpd"
msgstr "smtpd"

#: ../../whatsnew/3.5.rst:1666
msgid ""
"Both the :class:`!SMTPServer` and :class:`!SMTPChannel` classes now accept a "
"*decode_data* keyword argument to determine if the ``DATA`` portion of the "
"SMTP transaction is decoded using the ``\"utf-8\"`` codec or is instead "
"provided to the :meth:`!SMTPServer.process_message` method as a byte "
"string.  The default is ``True`` for backward compatibility reasons, but "
"will change to ``False`` in Python 3.6.  If *decode_data* is set to "
"``False``, the ``process_message`` method must be prepared to accept keyword "
"arguments. (Contributed by Maciej Szulik in :issue:`19662`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1677
msgid ""
"The :class:`!SMTPServer` class now advertises the ``8BITMIME`` extension (:"
"rfc:`6152`) if *decode_data* has been set ``True``.  If the client specifies "
"``BODY=8BITMIME`` on the ``MAIL`` command, it is passed to :meth:`!"
"SMTPServer.process_message` via the *mail_options* keyword. (Contributed by "
"Milan Oberkirch and R.  David Murray in :issue:`21795`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1684
msgid ""
"The :class:`!SMTPServer` class now also supports the ``SMTPUTF8`` extension "
"(:rfc:`6531`: Internationalized Email).  If the client specified ``SMTPUTF8 "
"BODY=8BITMIME`` on the ``MAIL`` command, they are passed to :meth:`!"
"SMTPServer.process_message` via the *mail_options* keyword.  It is the "
"responsibility of the ``process_message`` method to correctly handle the "
"``SMTPUTF8`` data. (Contributed by Milan Oberkirch in :issue:`21725`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1692
msgid ""
"It is now possible to provide, directly or via name resolution, IPv6 "
"addresses in the :class:`!SMTPServer` constructor, and have it successfully "
"connect.  (Contributed by Milan Oberkirch in :issue:`14758`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1698
msgid "smtplib"
msgstr "smtplib"

#: ../../whatsnew/3.5.rst:1700
msgid ""
"A new :meth:`SMTP.auth() <smtplib.SMTP.auth>` method provides a convenient "
"way to implement custom authentication mechanisms. (Contributed by Milan "
"Oberkirch in :issue:`15014`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1704
msgid ""
"The :meth:`SMTP.set_debuglevel() <smtplib.SMTP.set_debuglevel>` method now "
"accepts an additional debuglevel (2), which enables timestamps in debug "
"messages. (Contributed by Gavin Chappell and Maciej Szulik in :issue:"
"`16914`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1708
msgid ""
"Both the :meth:`SMTP.sendmail() <smtplib.SMTP.sendmail>` and :meth:`SMTP."
"send_message() <smtplib.SMTP.send_message>` methods now support :rfc:`6531` "
"(SMTPUTF8). (Contributed by Milan Oberkirch and R. David Murray in :issue:"
"`22027`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1715
msgid "sndhdr"
msgstr "sndhdr"

#: ../../whatsnew/3.5.rst:1717
msgid ""
"The :func:`!what` and :func:`!whathdr` functions  now return a :func:"
"`~collections.namedtuple`.  (Contributed by Claudiu Popa in :issue:`18615`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1723
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.5.rst:1725
msgid ""
"Functions with timeouts now use a monotonic clock, instead of a system "
"clock. (Contributed by Victor Stinner in :issue:`22043`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1728
msgid ""
"A new :meth:`socket.sendfile() <socket.socket.sendfile>` method allows "
"sending a file over a socket by using the high-performance :func:`os."
"sendfile` function on UNIX, resulting in uploads being from 2 to 3 times "
"faster than when using plain :meth:`socket.send() <socket.socket.send>`. "
"(Contributed by Giampaolo Rodola' in :issue:`17552`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1734
msgid ""
"The :meth:`socket.sendall() <socket.socket.sendall>` method no longer resets "
"the socket timeout every time bytes are received or sent.  The socket "
"timeout is now the maximum total duration to send all data. (Contributed by "
"Victor Stinner in :issue:`23853`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1739
msgid ""
"The *backlog* argument of the :meth:`socket.listen() <socket.socket.listen>` "
"method is now optional.  By default it is set to :data:`SOMAXCONN <socket."
"SOMAXCONN>` or to ``128``, whichever is less. (Contributed by Charles-"
"François Natali in :issue:`21455`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1746
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.5.rst:1751
msgid "Memory BIO Support"
msgstr "メモリ BIO サポート"

#: ../../whatsnew/3.5.rst:1753
msgid "(Contributed by Geert Jansen in :issue:`21965`.)"
msgstr "(Contributed by Geert Jansen in :issue:`21965`.)"

#: ../../whatsnew/3.5.rst:1755
msgid ""
"The new :class:`~ssl.SSLObject` class has been added to provide SSL protocol "
"support for cases when the network I/O capabilities of :class:`~ssl."
"SSLSocket` are not necessary or are suboptimal.  ``SSLObject`` represents an "
"SSL protocol instance, but does not implement any network I/O methods, and "
"instead provides a memory buffer interface.  The new :class:`~ssl.MemoryBIO` "
"class can be used to pass data between Python and an SSL protocol instance."
msgstr ""

#: ../../whatsnew/3.5.rst:1762
msgid ""
"The memory BIO SSL support is primarily intended to be used in frameworks "
"implementing asynchronous I/O for which :class:`~ssl.SSLSocket`'s readiness "
"model (\"select/poll\") is inefficient."
msgstr ""

#: ../../whatsnew/3.5.rst:1766
msgid ""
"A new :meth:`SSLContext.wrap_bio() <ssl.SSLContext.wrap_bio>` method can be "
"used to create a new ``SSLObject`` instance."
msgstr ""

#: ../../whatsnew/3.5.rst:1771
msgid "Application-Layer Protocol Negotiation Support"
msgstr ""

#: ../../whatsnew/3.5.rst:1773
msgid "(Contributed by Benjamin Peterson in :issue:`20188`.)"
msgstr "(Contributed by Benjamin Peterson in :issue:`20188`.)"

#: ../../whatsnew/3.5.rst:1775
msgid ""
"Where OpenSSL support is present, the :mod:`ssl` module now implements the "
"*Application-Layer Protocol Negotiation* TLS extension as described in :rfc:"
"`7301`."
msgstr ""

#: ../../whatsnew/3.5.rst:1779
msgid ""
"The new :meth:`SSLContext.set_alpn_protocols() <ssl.SSLContext."
"set_alpn_protocols>` can be used to specify which protocols a socket should "
"advertise during the TLS handshake."
msgstr ""

#: ../../whatsnew/3.5.rst:1783
msgid ""
"The new :meth:`SSLSocket.selected_alpn_protocol() <ssl.SSLSocket."
"selected_alpn_protocol>` returns the protocol that was selected during the "
"TLS handshake. The :const:`~ssl.HAS_ALPN` flag indicates whether ALPN "
"support is present."
msgstr ""

#: ../../whatsnew/3.5.rst:1790
msgid "Other Changes"
msgstr "その他の変更"

#: ../../whatsnew/3.5.rst:1792
msgid ""
"There is a new :meth:`SSLSocket.version() <ssl.SSLSocket.version>` method to "
"query the actual protocol version in use. (Contributed by Antoine Pitrou in :"
"issue:`20421`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1796
msgid ""
"The :class:`~ssl.SSLSocket` class now implements a :meth:`SSLSocket."
"sendfile() <ssl.SSLSocket.sendfile>` method. (Contributed by Giampaolo "
"Rodola' in :issue:`17552`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1800
msgid ""
"The :meth:`SSLSocket.send() <ssl.SSLSocket.send>` method now raises either "
"the :exc:`ssl.SSLWantReadError` or :exc:`ssl.SSLWantWriteError` exception on "
"a non-blocking socket if the operation would block. Previously, it would "
"return ``0``.  (Contributed by Nikolaus Rath in :issue:`20951`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1805
msgid ""
"The :func:`~ssl.cert_time_to_seconds` function now interprets the input time "
"as UTC and not as local time, per :rfc:`5280`.  Additionally, the return "
"value is always an :class:`int`. (Contributed by Akira Li in :issue:`19940`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1809
msgid ""
"New :meth:`SSLObject.shared_ciphers() <ssl.SSLObject.shared_ciphers>` and :"
"meth:`SSLSocket.shared_ciphers() <ssl.SSLSocket.shared_ciphers>` methods "
"return the list of ciphers sent by the client during the handshake. "
"(Contributed by Benjamin Peterson in :issue:`23186`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1814
msgid ""
"The :meth:`SSLSocket.do_handshake() <ssl.SSLSocket.do_handshake>`, :meth:"
"`SSLSocket.read() <ssl.SSLSocket.read>`, :meth:`SSLSocket.shutdown() <ssl."
"SSLSocket.shutdown>`, and :meth:`SSLSocket.write() <ssl.SSLSocket.write>` "
"methods of the :class:`~ssl.SSLSocket` class no longer reset the socket "
"timeout every time bytes are received or sent. The socket timeout is now the "
"maximum total duration of the method. (Contributed by Victor Stinner in :"
"issue:`23853`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1822
msgid ""
"The :func:`~ssl.match_hostname` function now supports matching of IP "
"addresses. (Contributed by Antoine Pitrou in :issue:`23239`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1827
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.5.rst:1829
msgid ""
"The :class:`~sqlite3.Row` class now fully supports the sequence protocol, in "
"particular :func:`reversed` iteration and slice indexing. (Contributed by "
"Claudiu Popa in :issue:`10203`; by Lucas Sinclair, Jessica McKellar, and  "
"Serhiy Storchaka in :issue:`13583`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1838
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.5.rst:1840
msgid ""
"The new :func:`~subprocess.run` function has been added. It runs the "
"specified command and returns a :class:`~subprocess.CompletedProcess` "
"object, which describes a finished process.  The new API is more consistent "
"and is the recommended approach to invoking subprocesses in Python code that "
"does not need to maintain compatibility with earlier Python versions. "
"(Contributed by Thomas Kluyver in :issue:`23342`.)"
msgstr ""
"新たに :func:`~subprocess.run` 関数が追加されました。\n"
"これは指定されたコマンドを実行し :class:`~subprocess.CompletedProcess` オブ"
"ジェクトを返します。\n"
"オブジェクトは終了したプロセスを記述します。\n"
"新たな API はより一貫的で、古いバージョンとの互換性を必要としない Python コー"
"ドでサブプロセスを起動するのに推奨される方法です。\n"
"(Contributed by Thomas Kluyver in :issue:`23342`.)"

#: ../../whatsnew/3.5.rst:1850
msgid ""
">>> subprocess.run([\"ls\", \"-l\"])  # doesn't capture output\n"
"CompletedProcess(args=['ls', '-l'], returncode=0)\n"
"\n"
">>> subprocess.run(\"exit 1\", shell=True, check=True)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit "
"status 1\n"
"\n"
">>> subprocess.run([\"ls\", \"-l\", \"/dev/null\"], stdout=subprocess.PIPE)\n"
"CompletedProcess(args=['ls', '-l', '/dev/null'], returncode=0,\n"
"stdout=b'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\\n')"
msgstr ""

#: ../../whatsnew/3.5.rst:1864
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.5.rst:1866
msgid ""
"A new :func:`~sys.set_coroutine_wrapper` function allows setting a global "
"hook that will be called whenever a :term:`coroutine object <coroutine>` is "
"created by an :keyword:`async def` function.  A corresponding :func:`~sys."
"get_coroutine_wrapper` can be used to obtain a currently set wrapper.  Both "
"functions are :term:`provisional <provisional API>`, and are intended for "
"debugging purposes only.  (Contributed by Yury Selivanov in :issue:`24017`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1874
msgid ""
"A new :func:`~sys.is_finalizing` function can be used to check if the Python "
"interpreter is :term:`shutting down <interpreter shutdown>`. (Contributed by "
"Antoine Pitrou in :issue:`22696`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1880
msgid "sysconfig"
msgstr "sysconfig"

#: ../../whatsnew/3.5.rst:1882
msgid ""
"The name of the user scripts directory on Windows now includes the first two "
"components of the Python version. (Contributed by Paul Moore in :issue:"
"`23437`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1888
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.5.rst:1890
msgid ""
"The *mode* argument of the :func:`~tarfile.open` function now accepts "
"``\"x\"`` to request exclusive creation.  (Contributed by Berker Peksag in :"
"issue:`21717`.)"
msgstr ""
":func:`~tarfile.open` 関数の *mode* 引数が排他的作成を要求する ``\"x\"``  を"
"受け取るようになりました。 (Contributed by Berker Peksag in :issue:`21717`.)"

#: ../../whatsnew/3.5.rst:1893
msgid ""
"The :meth:`TarFile.extractall() <tarfile.TarFile.extractall>` and :meth:"
"`TarFile.extract() <tarfile.TarFile.extract>` methods now take a keyword "
"argument *numeric_owner*.  If set to ``True``, the extracted files and "
"directories will be owned by the numeric ``uid`` and ``gid`` from the "
"tarfile. If set to ``False`` (the default, and the behavior in versions "
"prior to 3.5), they will be owned by the named user and group in the "
"tarfile. (Contributed by Michael Vogt and Eric Smith in :issue:`23193`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1901
msgid ""
"The :meth:`TarFile.list() <tarfile.TarFile.list>` now accepts an optional "
"*members* keyword argument that can be set to a subset of the list returned "
"by :meth:`TarFile.getmembers() <tarfile.TarFile.getmembers>`. (Contributed "
"by Serhiy Storchaka in :issue:`21549`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1908
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.5.rst:1910
msgid ""
"Both the :meth:`Lock.acquire() <threading.Lock.acquire>` and :meth:`RLock."
"acquire() <threading.RLock.acquire>` methods now use a monotonic clock for "
"timeout management. (Contributed by Victor Stinner in :issue:`22043`.)"
msgstr ""
":meth:`Lock.acquire() <threading.Lock.acquire>` と :meth:`RLock.acquire() "
"<threading.RLock.acquire>` の両メソッドがタイムアウトの管理に単調時計を使用す"
"るようになりました。\n"
"(Contributed by Victor Stinner in :issue:`22043`.)"

#: ../../whatsnew/3.5.rst:1917
msgid "time"
msgstr "time"

#: ../../whatsnew/3.5.rst:1919
msgid ""
"The :func:`~time.monotonic` function is now always available. (Contributed "
"by Victor Stinner in :issue:`22043`.)"
msgstr ""
":func:`~time.monotonic` 関数が常に利用出来るようになりました。\n"
"(Contributed by Victor Stinner in :issue:`22043`.)"

#: ../../whatsnew/3.5.rst:1924
msgid "timeit"
msgstr "timeit"

#: ../../whatsnew/3.5.rst:1926
msgid ""
"A new command line option ``-u`` or :samp:`--unit={U}` can be used to "
"specify the time unit for the timer output.  Supported options are ``usec``, "
"``msec``, or ``sec``.  (Contributed by Julian Gindi in :issue:`18983`.)"
msgstr ""
"新たなコマンドラインオプション ``-u`` 又は :samp:`--unit={U}` を使用してタイ"
"マーの出力の単位を指定できます。\n"
"サポートされたオプションは ``usec``, ``msec``,  ``sec`` です。\n"
"(Contributed by Julian Gindi in :issue:`18983`.)"

#: ../../whatsnew/3.5.rst:1930
msgid ""
"The :func:`~timeit.timeit` function has a new *globals* parameter for "
"specifying the namespace in which the code will be running. (Contributed by "
"Ben Roberts in :issue:`2527`.)"
msgstr ""
":func:`~timeit.timeit` 関数に引数 *globals* が追加されました。\n"
"これによりコードが実行される名前空間を指定します。\n"
"(Contributed by Ben Roberts in :issue:`2527`.)"

#: ../../whatsnew/3.5.rst:1936
msgid "tkinter"
msgstr "tkinter"

#: ../../whatsnew/3.5.rst:1938
msgid ""
"The :mod:`!tkinter._fix` module used for setting up the Tcl/Tk environment "
"on Windows has been replaced by a private function in the :mod:`!_tkinter` "
"module which makes no permanent changes to environment variables. "
"(Contributed by Zachary Ware in :issue:`20035`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1947
msgid "traceback"
msgstr "traceback"

#: ../../whatsnew/3.5.rst:1949
msgid ""
"New :func:`~traceback.walk_stack` and :func:`~traceback.walk_tb` functions "
"to conveniently traverse frame and :ref:`traceback objects <traceback-"
"objects>`. (Contributed by Robert Collins in :issue:`17911`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1954
msgid ""
"New lightweight classes: :class:`~traceback.TracebackException`, :class:"
"`~traceback.StackSummary`, and :class:`~traceback.FrameSummary`. "
"(Contributed by Robert Collins in :issue:`17911`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1958
msgid ""
"Both the :func:`~traceback.print_tb` and :func:`~traceback.print_stack` "
"functions now support negative values for the *limit* argument. (Contributed "
"by Dmitry Kazakov in :issue:`22619`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1964
msgid "types"
msgstr "types"

#: ../../whatsnew/3.5.rst:1966
msgid ""
"A new :func:`~types.coroutine` function to transform :term:`generator "
"<generator iterator>` and :class:`generator-like <collections.abc."
"Generator>` objects into :term:`awaitables <awaitable>`. (Contributed by "
"Yury Selivanov in :issue:`24017`.)"
msgstr ""
"新たに :func:`~types.coroutine` 関数が追加されました。\n"
":term:`ジェネレータ <generator iterator>` と :class:`ジェネレータ様 "
"<collections.abc.Generator>` オブジェクトを :term:`awaitable` に変換しま"
"す。\n"
"(Contributed by Yury Selivanov in :issue:`24017`.)"

#: ../../whatsnew/3.5.rst:1972
msgid ""
"A new type called :class:`~types.CoroutineType`, which is used for :term:"
"`coroutine` objects created by :keyword:`async def` functions. (Contributed "
"by Yury Selivanov in :issue:`24400`.)"
msgstr ""
"新たに型 :class:`~types.CoroutineType` が追加されました。\n"
":keyword:`async def` 関数で作られた :term:`coroutine` オブジェクトに使われま"
"す。 (Contributed by Yury Selivanov in :issue:`24400`.)"

#: ../../whatsnew/3.5.rst:1978
msgid "unicodedata"
msgstr "unicodedata"

#: ../../whatsnew/3.5.rst:1980
msgid ""
"The :mod:`unicodedata` module now uses data from `Unicode 8.0.0 <https://"
"unicode.org/versions/Unicode8.0.0/>`_."
msgstr ""

#: ../../whatsnew/3.5.rst:1985
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.5.rst:1987
msgid ""
"The :meth:`TestLoader.loadTestsFromModule() <unittest.TestLoader."
"loadTestsFromModule>` method now accepts a keyword-only argument *pattern* "
"which is passed to ``load_tests`` as the third argument.  Found packages are "
"now checked for ``load_tests`` regardless of whether their path matches "
"*pattern*, because it is impossible for a package name to match the default "
"pattern. (Contributed by Robert Collins and Barry A. Warsaw in :issue:"
"`16662`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1994
msgid ""
"Unittest discovery errors now are exposed in the :data:`TestLoader.errors "
"<unittest.TestLoader.errors>` attribute of the :class:`~unittest.TestLoader` "
"instance. (Contributed by Robert Collins in :issue:`19746`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:1999
msgid ""
"A new command line option ``--locals`` to show local variables in "
"tracebacks.  (Contributed by Robert Collins in :issue:`22936`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2004
msgid "unittest.mock"
msgstr "unittest.mock"

#: ../../whatsnew/3.5.rst:2006
msgid "The :class:`~unittest.mock.Mock` class has the following improvements:"
msgstr ":class:`~unittest.mock.Mock` クラスは、次の改善が行われました。"

#: ../../whatsnew/3.5.rst:2008
msgid ""
"The class constructor has a new *unsafe* parameter, which causes mock "
"objects to raise :exc:`AttributeError` on attribute names starting with "
"``\"assert\"``. (Contributed by Kushal Das in :issue:`21238`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2013
msgid ""
"A new :meth:`Mock.assert_not_called() <unittest.mock.Mock."
"assert_not_called>` method to check if the mock object was called. "
"(Contributed by Kushal Das in :issue:`21262`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2017
msgid ""
"The :class:`~unittest.mock.MagicMock` class now supports :meth:"
"`__truediv__`, :meth:`__divmod__` and :meth:`__matmul__` operators. "
"(Contributed by Johannes Baiter in :issue:`20968`, and Håkan Lövdahl in :"
"issue:`23581` and :issue:`23568`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2022
msgid ""
"It is no longer necessary to explicitly pass ``create=True`` to the :func:"
"`~unittest.mock.patch` function when patching builtin names. (Contributed by "
"Kushal Das in :issue:`17660`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2028
msgid "urllib"
msgstr "urllib"

#: ../../whatsnew/3.5.rst:2030
msgid ""
"A new :class:`request.HTTPPasswordMgrWithPriorAuth <urllib.request."
"HTTPPasswordMgrWithPriorAuth>` class allows HTTP Basic Authentication "
"credentials to be managed so as to eliminate unnecessary ``401`` response "
"handling, or to unconditionally send credentials on the first request in "
"order to communicate with servers that return a ``404`` response instead of "
"a ``401`` if the ``Authorization`` header is not sent. (Contributed by Matej "
"Cepl in :issue:`19494` and Akshit Khurana in :issue:`7159`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2039
msgid ""
"A new *quote_via* argument for the :func:`parse.urlencode() <urllib.parse."
"urlencode>` function provides a way to control the encoding of query parts "
"if needed. (Contributed by Samwyse and Arnon Yaari in :issue:`13866`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2044
msgid ""
"The :func:`request.urlopen() <urllib.request.urlopen>` function accepts an :"
"class:`ssl.SSLContext` object as a *context* argument, which will be used "
"for the HTTPS connection.  (Contributed by Alex Gaynor in :issue:`22366`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2048
msgid ""
"The :func:`parse.urljoin() <urllib.parse.urljoin>` was updated to use the :"
"rfc:`3986` semantics for the resolution of relative URLs, rather than :rfc:"
"`1808` and :rfc:`2396`. (Contributed by Demian Brecht and Senthil Kumaran "
"in :issue:`22118`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2055
msgid "wsgiref"
msgstr "wsgiref"

#: ../../whatsnew/3.5.rst:2057
msgid ""
"The *headers* argument of the :class:`headers.Headers <wsgiref.headers."
"Headers>` class constructor is now optional. (Contributed by Pablo Torres "
"Navarrete and SilentGhost in :issue:`5800`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2063
msgid "xmlrpc"
msgstr "xmlrpc"

#: ../../whatsnew/3.5.rst:2065
msgid ""
"The :class:`client.ServerProxy <xmlrpc.client.ServerProxy>` class now "
"supports the :term:`context manager` protocol. (Contributed by Claudiu Popa "
"in :issue:`20627`.)"
msgstr ""
":class:`client.ServerProxy <xmlrpc.client.ServerProxy>` クラスが :term:`コン"
"テキストマネージャ <context manager>` プロトコルをサポートするようになりまし"
"た。 (Contributed by Claudiu Popa in :issue:`20627`.)"

#: ../../whatsnew/3.5.rst:2069
msgid ""
"The :class:`client.ServerProxy <xmlrpc.client.ServerProxy>` constructor now "
"accepts an optional :class:`ssl.SSLContext` instance. (Contributed by Alex "
"Gaynor in :issue:`22960`.)"
msgstr ""
":class:`client.ServerProxy <xmlrpc.client.ServerProxy>` コンストラクタは任意"
"の :class:`ssl.SSLContext` インスタンスを受け取るようになりました。 "
"(Contributed by Alex Gaynor in :issue:`22960`.)"

#: ../../whatsnew/3.5.rst:2075
msgid "xml.sax"
msgstr "xml.sax"

#: ../../whatsnew/3.5.rst:2077
msgid ""
"SAX parsers now support a character stream of the :class:`xmlreader."
"InputSource <xml.sax.xmlreader.InputSource>` object. (Contributed by Serhiy "
"Storchaka in :issue:`2175`.)"
msgstr ""
"SAX パーサは :class:`xmlreader.InputSource <xml.sax.xmlreader.InputSource>` "
"オブジェクトの文字ストリームをサポートしました。\n"
"(Contributed by Serhiy Storchaka in :issue:`2175`.)"

#: ../../whatsnew/3.5.rst:2081
msgid ""
":func:`~xml.sax.parseString` now accepts a :class:`str` instance. "
"(Contributed by Serhiy Storchaka in :issue:`10590`.)"
msgstr ""
":func:`~xml.sax.parseString` が :class:`str` インスタンスを受け取るようになり"
"ました。\n"
"(Contributed by Serhiy Storchaka in :issue:`10590`.)"

#: ../../whatsnew/3.5.rst:2086
msgid "zipfile"
msgstr "zipfile"

#: ../../whatsnew/3.5.rst:2088
msgid ""
"ZIP output can now be written to unseekable streams. (Contributed by Serhiy "
"Storchaka in :issue:`23252`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2091
msgid ""
"The *mode* argument of :meth:`ZipFile.open() <zipfile.ZipFile.open>` method "
"now accepts ``\"x\"`` to request exclusive creation. (Contributed by Serhiy "
"Storchaka in :issue:`21717`.)"
msgstr ""
":meth:`ZipFile.open() <zipfile.ZipFile.open>` メソッドの *mode* 引数が排他的"
"作成を要求する ``\"x\"``  を受け取るようになりました。 (Contributed by "
"Serhiy Storchaka in :issue:`21717`.)"

#: ../../whatsnew/3.5.rst:2097
msgid "Other module-level changes"
msgstr "その他のモジュールレベルの変更"

#: ../../whatsnew/3.5.rst:2099
msgid ""
"Many functions in the :mod:`mmap`, :mod:`!ossaudiodev`, :mod:`socket`, :mod:"
"`ssl`, and :mod:`codecs` modules now accept writable :term:`bytes-like "
"objects <bytes-like object>`. (Contributed by Serhiy Storchaka in :issue:"
"`23001`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2106
msgid "Optimizations"
msgstr "最適化"

#: ../../whatsnew/3.5.rst:2108
msgid ""
"The :func:`os.walk` function has been sped up by 3 to 5 times on POSIX "
"systems, and by 7 to 20 times on Windows.  This was done using the new :func:"
"`os.scandir` function, which exposes file information from the underlying "
"``readdir`` or ``FindFirstFile``/``FindNextFile`` system calls.  "
"(Contributed by Ben Hoyt with help from Victor Stinner in :issue:`23605`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2114
msgid ""
"Construction of ``bytes(int)`` (filled by zero bytes) is faster and uses "
"less memory for large objects. ``calloc()`` is used instead of ``malloc()`` "
"to allocate memory for these objects. (Contributed by Victor Stinner in :"
"issue:`21233`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2119
msgid ""
"Some operations on :mod:`ipaddress` :class:`~ipaddress.IPv4Network` and :"
"class:`~ipaddress.IPv6Network` have been massively sped up, such as :meth:"
"`~ipaddress.IPv4Network.subnets`, :meth:`~ipaddress.IPv4Network.supernet`, :"
"func:`~ipaddress.summarize_address_range`, :func:`~ipaddress."
"collapse_addresses`. The speed up can range from 3 to 15 times. (Contributed "
"by Antoine Pitrou, Michel Albert, and Markus in :issue:`21486`, :issue:"
"`21487`, :issue:`20826`, :issue:`23266`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2127
msgid ""
"Pickling of :mod:`ipaddress` objects was optimized to produce significantly "
"smaller output.  (Contributed by Serhiy Storchaka in :issue:`23133`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2130
msgid ""
"Many operations on :class:`io.BytesIO` are now 50% to 100% faster. "
"(Contributed by Serhiy Storchaka in :issue:`15381` and David Wilson in :"
"issue:`22003`.)"
msgstr ""
":class:`io.BytesIO` の多くの操作が 50% から 100% 速くなりました。 "
"(Contributed by Serhiy Storchaka in :issue:`15381` and David Wilson in :"
"issue:`22003`.)"

#: ../../whatsnew/3.5.rst:2134
msgid ""
"The :func:`marshal.dumps` function is now faster: 65--85% with versions 3 "
"and 4, 20--25% with versions 0 to 2 on typical data, and up to 5 times in "
"best cases. (Contributed by Serhiy Storchaka in :issue:`20416` and :issue:"
"`23344`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2139
msgid ""
"The UTF-32 encoder is now 3 to 7 times faster. (Contributed by Serhiy "
"Storchaka in :issue:`15027`.)"
msgstr ""
"UTF-32 エンコーダが 3 から 7 倍速くなりました。 (Contributed by Serhiy "
"Storchaka in :issue:`15027`.)"

#: ../../whatsnew/3.5.rst:2142
msgid ""
"Regular expressions are now parsed up to 10% faster. (Contributed by Serhiy "
"Storchaka in :issue:`19380`.)"
msgstr ""
"正規表現のパースが最高で 10% 速くなりました。 (Contributed by Serhiy "
"Storchaka in :issue:`19380`.)"

#: ../../whatsnew/3.5.rst:2145
msgid ""
"The :func:`json.dumps` function was optimized to run with "
"``ensure_ascii=False`` as fast as with ``ensure_ascii=True``. (Contributed "
"by Naoki Inada in :issue:`23206`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2149
msgid ""
"The :c:func:`PyObject_IsInstance` and :c:func:`PyObject_IsSubclass` "
"functions have been sped up in the common case that the second argument has :"
"class:`type` as its metaclass. (Contributed Georg Brandl by in :issue:"
"`22540`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2154
msgid ""
"Method caching was slightly improved, yielding up to 5% performance "
"improvement in some benchmarks. (Contributed by Antoine Pitrou in :issue:"
"`22847`.)"
msgstr ""
"メソッドのキャッシュが少し改良されました。ベンチマークによっては性能が最高で "
"5% 向上しました。 (Contributed by Antoine Pitrou in :issue:`22847`.)"

#: ../../whatsnew/3.5.rst:2158
msgid ""
"Objects from the :mod:`random` module now use 50% less memory on 64-bit "
"builds.  (Contributed by Serhiy Storchaka in :issue:`23488`.)"
msgstr ""
":mod:`random` モジュールのオブジェクトのメモリ使用量が 64-bit ビルドで 50% 減"
"少しました。 (Contributed by Serhiy Storchaka in :issue:`23488`.)"

#: ../../whatsnew/3.5.rst:2161
msgid ""
"The :func:`property` getter calls are up to 25% faster. (Contributed by Joe "
"Jevnik in :issue:`23910`.)"
msgstr ""
":func:`property` ゲッタの呼び出しが最高で 25% 速くなりました。 (Contributed "
"by Joe Jevnik in :issue:`23910`.)"

#: ../../whatsnew/3.5.rst:2164
msgid ""
"Instantiation of :class:`fractions.Fraction` is now up to 30% faster. "
"(Contributed by Stefan Behnel in :issue:`22464`.)"
msgstr ""
":class:`fractions.Fraction` のインスタンス化が最高で 30% 速くなりました。 "
"(Contributed by Stefan Behnel in :issue:`22464`.)"

#: ../../whatsnew/3.5.rst:2167
msgid ""
"String methods :meth:`~str.find`, :meth:`~str.rfind`, :meth:`~str.split`, :"
"meth:`~str.partition` and the :keyword:`in` string operator are now "
"significantly faster for searching 1-character substrings. (Contributed by "
"Serhiy Storchaka in :issue:`23573`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2174
msgid "Build and C API Changes"
msgstr "ビルドならびに C API の変更"

#: ../../whatsnew/3.5.rst:2176
msgid "New ``calloc`` functions were added:"
msgstr "新たな ``calloc`` 関数が追加されました:"

#: ../../whatsnew/3.5.rst:2178
msgid ":c:func:`PyMem_RawCalloc`,"
msgstr ":c:func:`PyMem_RawCalloc`,"

#: ../../whatsnew/3.5.rst:2179
msgid ":c:func:`PyMem_Calloc`,"
msgstr ":c:func:`PyMem_Calloc`,"

#: ../../whatsnew/3.5.rst:2180
msgid ":c:func:`PyObject_Calloc`."
msgstr ""

#: ../../whatsnew/3.5.rst:2182
msgid "(Contributed by Victor Stinner in :issue:`21233`.)"
msgstr "(Contributed by Victor Stinner in :issue:`21233`.)"

#: ../../whatsnew/3.5.rst:2184
msgid "New encoding/decoding helper functions:"
msgstr "新たなエンコーディング/デコーディングヘルパ関数:"

#: ../../whatsnew/3.5.rst:2186
msgid ":c:func:`Py_DecodeLocale` (replaced ``_Py_char2wchar()``),"
msgstr ":c:func:`Py_DecodeLocale` (``_Py_char2wchar()`` の代わり),"

#: ../../whatsnew/3.5.rst:2187
msgid ":c:func:`Py_EncodeLocale` (replaced ``_Py_wchar2char()``)."
msgstr ":c:func:`Py_EncodeLocale` (``_Py_wchar2char()`` の代わり)."

#: ../../whatsnew/3.5.rst:2189
msgid "(Contributed by Victor Stinner in :issue:`18395`.)"
msgstr "(Contributed by Victor Stinner in :issue:`18395`.)"

#: ../../whatsnew/3.5.rst:2191
msgid ""
"A new :c:func:`PyCodec_NameReplaceErrors` function to replace the unicode "
"encode error with ``\\N{...}`` escapes. (Contributed by Serhiy Storchaka in :"
"issue:`19676`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2195
msgid ""
"A new :c:func:`PyErr_FormatV` function similar to :c:func:`PyErr_Format`, "
"but accepts a :c:type:`va_list` argument. (Contributed by Antoine Pitrou in :"
"issue:`18711`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2199
msgid ""
"A new :c:data:`PyExc_RecursionError` exception. (Contributed by Georg Brandl "
"in :issue:`19235`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2202
msgid ""
"New :c:func:`PyModule_FromDefAndSpec`, :c:func:`PyModule_FromDefAndSpec2`, "
"and :c:func:`PyModule_ExecDef` functions introduced by :pep:`489` -- multi-"
"phase extension module initialization. (Contributed by Petr Viktorin in :"
"issue:`24268`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2207
msgid ""
"New :c:func:`PyNumber_MatrixMultiply` and :c:func:"
"`PyNumber_InPlaceMatrixMultiply` functions to perform matrix multiplication. "
"(Contributed by Benjamin Peterson in :issue:`21176`.  See also :pep:`465` "
"for details.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2213
msgid ""
"The :c:member:`PyTypeObject.tp_finalize` slot is now part of the stable ABI."
msgstr ""

#: ../../whatsnew/3.5.rst:2215
msgid ""
"Windows builds now require Microsoft Visual C++ 14.0, which is available as "
"part of `Visual Studio 2015 <https://visualstudio.microsoft.com/en/vs/older-"
"downloads/#visual-studio-2015-and-other-products>`_."
msgstr ""

#: ../../whatsnew/3.5.rst:2218
msgid ""
"Extension modules now include a platform information tag in their filename "
"on some platforms (the tag is optional, and CPython will import extensions "
"without it, although if the tag is present and mismatched, the extension "
"won't be loaded):"
msgstr ""
"いくつかのプラットフォームにおいて、拡張モジュールのファイル名にプラット"
"フォームについての情報をタグとして含むようになりました (タグはオプショナルで"
"あり、CPython は、タグが含まれていて実行しようとしているプラットフォームとミ"
"スマッチな場合にその拡張をロードしようとしない一方で、拡張をそれが含まれてい"
"なくてもインポートします):"

#: ../../whatsnew/3.5.rst:2223
msgid ""
"On Linux, extension module filenames end with ``.cpython-<major><minor>m-"
"<architecture>-<os>.pyd``:"
msgstr ""
"Linux では拡張モジュールのファイル名は ``.cpython-<major><minor>m-"
"<architecture>-<os>.pyd`` で終わります:"

#: ../../whatsnew/3.5.rst:2226 ../../whatsnew/3.5.rst:2243
msgid ""
"``<major>`` is the major number of the Python version; for Python 3.5 this "
"is ``3``."
msgstr ""
"``<major>`` は Python バージョンのメジャー番号です。Python 3.5 では ``3`` で"
"す。"

#: ../../whatsnew/3.5.rst:2229 ../../whatsnew/3.5.rst:2246
msgid ""
"``<minor>`` is the minor number of the Python version; for Python 3.5 this "
"is ``5``."
msgstr ""
"``<minor>`` は Python バージョンのマイナー番号です。Python 3.5 では ``5`` で"
"す。"

#: ../../whatsnew/3.5.rst:2232
msgid ""
"``<architecture>`` is the hardware architecture the extension module was "
"built to run on. It's most commonly either ``i386`` for 32-bit Intel "
"platforms or ``x86_64`` for 64-bit Intel (and AMD) platforms."
msgstr ""
"``<architecture>`` は拡張モジュールがどのハードウェアアーキテクチャ向けに動作"
"するようビルドされたのかを表します。32-bit Intel プラットフォーム向けの "
"``i386`` か 64-bit Intel (及び AMD) プラットフォーム向けの ``x86_64`` がもっ"
"とも一般的です。"

#: ../../whatsnew/3.5.rst:2236
msgid ""
"``<os>`` is always ``linux-gnu``, except for extensions built to talk to the "
"32-bit ABI on 64-bit platforms, in which case it is ``linux-gnu32`` (and "
"``<architecture>`` will be ``x86_64``)."
msgstr ""
"``<os>`` は原則として ``linux-gnu`` ですが、64-bit プラットフォームにおいて "
"32-bit ABI で動作するようビルドされた拡張モジュールの場合は ``linux-gnu32`` "
"になります (この場合 ``<architecture>`` は ``x86_64`` となるでしょう)。"

#: ../../whatsnew/3.5.rst:2240
msgid ""
"On Windows, extension module filenames end with ``<debug>.cp<major><minor>-"
"<platform>.pyd``:"
msgstr ""
"Windows では拡張モジュールのファイル名は ``<debug>.cp<major><minor>-"
"<platform>.pyd`` で終わります:"

#: ../../whatsnew/3.5.rst:2249
msgid ""
"``<platform>`` is the platform the extension module was built for, either "
"``win32`` for Win32, ``win_amd64`` for Win64, ``win_ia64`` for Windows "
"Itanium 64, and ``win_arm`` for Windows on ARM."
msgstr ""
"``<platform>`` は拡張モジュールがどのプラットフォーム向けにビルドされたものな"
"のかを表し、 Win32 用の ``win32`` , Win64 用の ``win_amd64`` , Windows "
"Itanium 64 用の ``win_ia64`` , Windows on ARM 用の ``win_arm`` のいずれかで"
"す。"

#: ../../whatsnew/3.5.rst:2253
msgid ""
"If built in debug mode, ``<debug>`` will be ``_d``, otherwise it will be "
"blank."
msgstr ""
"デバッグモードでビルドされた場合は ``<debug>`` は ``_d`` となり、それ以外の場"
"合はブランクです。"

#: ../../whatsnew/3.5.rst:2256
msgid ""
"On OS X platforms, extension module filenames now end with ``-darwin.so``."
msgstr ""
"OS X プラットフォームでは拡張モジュールのファイル名は ``-darwin.so`` で終わり"
"ます。"

#: ../../whatsnew/3.5.rst:2258
msgid ""
"On all other platforms, extension module filenames are the same as they were "
"with Python 3.4."
msgstr ""
"他のすべてのプラットフォームでは、拡張モジュールのファイル名は Python 3.4 で"
"のものと同じです。"

#: ../../whatsnew/3.5.rst:2263
msgid "Deprecated"
msgstr "非推奨"

#: ../../whatsnew/3.5.rst:2266
msgid "New Keywords"
msgstr "新たなキーワード"

#: ../../whatsnew/3.5.rst:2268
msgid ""
"``async`` and ``await`` are not recommended to be used as variable, class, "
"function or module names.  Introduced by :pep:`492` in Python 3.5, they will "
"become proper keywords in Python 3.7."
msgstr ""
"``async`` および ``await`` を変数、クラス、関数、ならびにモジュールの名前に使"
"用することは推奨されません。\n"
"それらは Python 3.5 で :pep:`492` により導入され、Python 3.7 で正式にキーワー"
"ドになります。"

#: ../../whatsnew/3.5.rst:2274
msgid "Deprecated Python Behavior"
msgstr "非推奨の Python の挙動"

#: ../../whatsnew/3.5.rst:2276
msgid ""
"Raising the :exc:`StopIteration` exception inside a generator will now "
"generate a silent :exc:`PendingDeprecationWarning`, which will become a non-"
"silent deprecation warning in Python 3.6 and will trigger a :exc:"
"`RuntimeError` in Python 3.7. See :ref:`PEP 479: Change StopIteration "
"handling inside generators <whatsnew-pep-479>` for details."
msgstr ""
"ジェネレータ内で :exc:`StopIteration` 例外を送出すると現在は静かな :exc:"
"`PendingDeprecationWarning` が発生します。\n"
"これは、Python 3.6 では静かでない非推奨の警告となり、Python 3.7 では :exc:"
"`RuntimeError` を起こします。\n"
"詳細は :ref:`PEP 479: Change StopIteration handling inside generators "
"<whatsnew-pep-479>` を参照してください。"

#: ../../whatsnew/3.5.rst:2284
msgid "Unsupported Operating Systems"
msgstr "サポートされないオペレーティングシステム"

#: ../../whatsnew/3.5.rst:2286
msgid ""
"Windows XP is no longer supported by Microsoft, thus, per :PEP:`11`, CPython "
"3.5 is no longer officially supported on this OS."
msgstr ""
"Windows XP は Microsoft によって既にサポートされていません。このため :PEP:"
"`11` により、CPython 3.5 ではこの OS をもはや公式にはサポートしません。"

#: ../../whatsnew/3.5.rst:2291
msgid "Deprecated Python modules, functions and methods"
msgstr "非推奨の Python モジュール、関数、メソッド"

#: ../../whatsnew/3.5.rst:2293
msgid ""
"The :mod:`formatter` module has now graduated to full deprecation and is "
"still slated for removal in Python 3.6."
msgstr ""
":mod:`formatter` モジュールは完全に非推奨になり、Python 3.6 で削除される予定"
"です。"

#: ../../whatsnew/3.5.rst:2296
msgid ""
"The :func:`asyncio.async` function is deprecated in favor of :func:`~asyncio."
"ensure_future`."
msgstr ""
":func:`asyncio.async` 関数は :func:`~asyncio.ensure_future` により非推奨にな"
"りました。"

#: ../../whatsnew/3.5.rst:2299
msgid ""
"The :mod:`!smtpd` module has in the past always decoded the DATA portion of "
"email messages using the ``utf-8`` codec.  This can now be controlled by the "
"new *decode_data* keyword to :class:`!SMTPServer`.  The default value is "
"``True``, but this default is deprecated.  Specify the *decode_data* keyword "
"with an appropriate value to avoid the deprecation warning."
msgstr ""

#: ../../whatsnew/3.5.rst:2305
msgid ""
"Directly assigning values to the :attr:`~http.cookies.Morsel.key`, :attr:"
"`~http.cookies.Morsel.value` and :attr:`~http.cookies.Morsel.coded_value` "
"of :class:`http.cookies.Morsel` objects is deprecated.  Use the :meth:`~http."
"cookies.Morsel.set` method instead.  In addition, the undocumented "
"*LegalChars* parameter of :meth:`~http.cookies.Morsel.set` is deprecated, "
"and is now ignored."
msgstr ""
":class:`http.cookies.Morsel` オブジェクトの :attr:`~http.cookies.Morsel."
"key`, :attr:`~http.cookies.Morsel.value`, :attr:`~http.cookies.Morsel."
"coded_value` に対して直接代入することは非推奨です。 :meth:`~http.cookies."
"Morsel.set` メソッドを使うようにしてください。また、 :meth:`~http.cookies."
"Morsel.set` のドキュメントされていなかった *LegalChars* パラメータは非推奨と"
"なり、無視されます。"

#: ../../whatsnew/3.5.rst:2312
msgid ""
"Passing a format string as keyword argument *format_string* to the :meth:"
"`~string.Formatter.format` method of the :class:`string.Formatter` class has "
"been deprecated. (Contributed by Serhiy Storchaka in :issue:`23671`.)"
msgstr ""
":class:`string.Formatter` クラスの :meth:`~string.Formatter.format` メソッド"
"に対し、キーワード引数 *format_string* としてフォーマット文字列を渡すことは非"
"推奨となりました。 (Contributed by Serhiy Storchaka in :issue:`23671`.)"

#: ../../whatsnew/3.5.rst:2317
msgid ""
"The :func:`platform.dist` and :func:`platform.linux_distribution` functions "
"are now deprecated.  Linux distributions use too many different ways of "
"describing themselves, so the functionality is left to a package. "
"(Contributed by Vajrasky Kok and Berker Peksag in :issue:`1322`.)"
msgstr ""
"関数 :func:`platform.dist` と :func:`platform.linux_distribution` が非推奨と"
"なりました。Linux ディストリビューションが自分自身を記述する方法があまりにも"
"多様なため、この機能は外部パッケージに任せることとなりました(訳注: ここでは "
"`distro <https://github.com/nir0s/distro>`_ のことを指している)。  "
"(Contributed by Vajrasky Kok and Berker Peksag in :issue:`1322`.)"

#: ../../whatsnew/3.5.rst:2322
msgid ""
"The previously undocumented ``from_function`` and ``from_builtin`` methods "
"of :class:`inspect.Signature` are deprecated.  Use the new :meth:`Signature."
"from_callable() <inspect.Signature.from_callable>` method instead. "
"(Contributed by Yury Selivanov in :issue:`24248`.)"
msgstr ""
":class:`inspect.Signature` の、以前からドキュメントされていなかったメソッド "
"``from_function`` と ``from_builtin`` は非推奨です。新しい :meth:`Signature."
"from_callable() <inspect.Signature.from_callable>` を代わりに使ってくださ"
"い。 (Contributed by Yury Selivanov in :issue:`24248`.)"

#: ../../whatsnew/3.5.rst:2327
msgid ""
"The :func:`inspect.getargspec` function is deprecated and scheduled to be "
"removed in Python 3.6.  (See :issue:`20438` for details.)"
msgstr ""
":func:`inspect.getargspec` 関数は非推奨となり、Python 3.6 で削除されることが"
"予定されています。  (See :issue:`20438` for details.)"

#: ../../whatsnew/3.5.rst:2330
msgid ""
"The :mod:`inspect` :func:`~inspect.getfullargspec`, :func:`~inspect."
"getcallargs`, and :func:`~inspect.formatargspec` functions are deprecated in "
"favor of the :func:`inspect.signature` API. (Contributed by Yury Selivanov "
"in :issue:`20438`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2335
msgid ""
":func:`~inspect.getargvalues` and :func:`~inspect.formatargvalues` functions "
"were inadvertently marked as deprecated with the release of Python 3.5.0."
msgstr ""

#: ../../whatsnew/3.5.rst:2338
msgid ""
"Use of :const:`re.LOCALE` flag with str patterns or :const:`re.ASCII` is now "
"deprecated.  (Contributed by Serhiy Storchaka in :issue:`22407`.)"
msgstr ""
"str のパターンとともに :const:`re.LOCALE` や :const:`re.ASCII` フラグを使用す"
"ることは非推奨となりました。  (Contributed by Serhiy Storchaka in :issue:"
"`22407`.)"

#: ../../whatsnew/3.5.rst:2341
msgid ""
"Use of unrecognized special sequences consisting of ``'\\'`` and an ASCII "
"letter in regular expression patterns and replacement patterns now raises a "
"deprecation warning and will be forbidden in Python 3.6. (Contributed by "
"Serhiy Storchaka in :issue:`23622`.)"
msgstr ""
"``'\\'`` と ASCII 文字からなる認識出来ない特殊シーケンスが正規表現内と置き換"
"えパターン内で使われた場合に、非推奨警告を出すようになりました。Python 3.6 で"
"は禁止されるようになります。 (Contributed by Serhiy Storchaka in :issue:"
"`23622`.)"

#: ../../whatsnew/3.5.rst:2346
msgid ""
"The undocumented and unofficial *use_load_tests* default argument of the :"
"meth:`unittest.TestLoader.loadTestsFromModule` method now is deprecated and "
"ignored. (Contributed by Robert Collins and Barry A. Warsaw in :issue:"
"`16662`.)"
msgstr ""
":meth:`unittest.TestLoader.loadTestsFromModule` メソッドのドキュメントされて"
"おらず非公式の *use_load_tests* デフォルト引数は非推奨となり、無視されます。 "
"(Contributed by Robert Collins and Barry A. Warsaw in :issue:`16662`.)"

#: ../../whatsnew/3.5.rst:2353
msgid "Removed"
msgstr "削除"

#: ../../whatsnew/3.5.rst:2356
msgid "API and Feature Removals"
msgstr "API と機能の削除"

#: ../../whatsnew/3.5.rst:2358
msgid ""
"The following obsolete and previously deprecated APIs and features have been "
"removed:"
msgstr ""
"時代遅れとなり、以前に既に非推奨となった以下の API と機能が削除されました:"

#: ../../whatsnew/3.5.rst:2361
msgid ""
"The ``__version__`` attribute has been dropped from the email package.  The "
"email code hasn't been shipped separately from the stdlib for a long time, "
"and the ``__version__`` string was not updated in the last few releases."
msgstr ""
"email パッケージの ``__version__`` 属性は削除されました。email パッケージが標"
"準ライブラリとは別々にリリースされていたのは遥か昔の話であり、ここのところ何"
"回かのリリースにいたっては ``__version__`` 文字列が更新されていませんでした。"

#: ../../whatsnew/3.5.rst:2365
msgid ""
"The internal ``Netrc`` class in the :mod:`ftplib` module was deprecated in "
"3.4, and has now been removed. (Contributed by Matt Chaput in :issue:`6623`.)"
msgstr ""
"3.4 で非推奨となっていた :mod:`ftplib` モジュール内の内部クラス ``Netrc`` が"
"削除されました。 (Contributed by Matt Chaput in :issue:`6623`.)"

#: ../../whatsnew/3.5.rst:2369
msgid "The concept of ``.pyo`` files has been removed."
msgstr "``.pyo`` ファイルのコンセプトは削除されました。"

#: ../../whatsnew/3.5.rst:2371
msgid ""
"The JoinableQueue class in the provisional :mod:`asyncio` module was "
"deprecated in 3.4.4 and is now removed. (Contributed by A. Jesse Jiryu Davis "
"in :issue:`23464`.)"
msgstr ""
"暫定 :mod:`asyncio` モジュールで 3.4.4 で非推奨となった JoinableQueue は削除"
"されました。 (Contributed by A. Jesse Jiryu Davis in :issue:`23464`.)"

#: ../../whatsnew/3.5.rst:2377
msgid "Porting to Python 3.5"
msgstr "Python 3.5 への移植"

#: ../../whatsnew/3.5.rst:2379
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"このセクションでは前述の変更とバグフィックスにより必要となるかもしれないコー"
"ドの変更を列挙します:"

#: ../../whatsnew/3.5.rst:2384
msgid "Changes in Python behavior"
msgstr "Python の挙動の変更"

#: ../../whatsnew/3.5.rst:2386
msgid ""
"Due to an oversight, earlier Python versions erroneously accepted the "
"following syntax::"
msgstr ""
"以前のバージョンの Python で、誤って以下の構文を許容してしまっていました::"

#: ../../whatsnew/3.5.rst:2389
msgid ""
"f(1 for x in [1], *args)\n"
"f(1 for x in [1], **kwargs)"
msgstr ""

#: ../../whatsnew/3.5.rst:2392
msgid ""
"Python 3.5 now correctly raises a :exc:`SyntaxError`, as generator "
"expressions must be put in parentheses if not a sole argument to a function."
msgstr ""
"Python 3.5 は正しく :exc:`SyntaxError` を投げます。ジェネレータ式は関数への唯"
"一の引数でない場合には、括弧で囲まなければならないのです。(---訳注: 一応。"
"3.5 以前も ``ff(str(i) for i in range(5), \"5\")`` は SyntaxError です。上の"
"例の通り ``gg(str(i) for i in range(5), *[\"1\", \"2\"])`` や ``hh(str(i) "
"for i in range(5), **{\"k1\": \"1\", \"k2\": \"2\"})`` が SytaxError ではな"
"かった、という話です。---)"

#: ../../whatsnew/3.5.rst:2397
msgid "Changes in the Python API"
msgstr "Python API の変更"

#: ../../whatsnew/3.5.rst:2399
msgid ""
":pep:`475`: System calls are now retried when interrupted by a signal "
"instead of raising :exc:`InterruptedError` if the Python signal handler does "
"not raise an exception."
msgstr ""
":pep:`475`: Python シグナルハンドラが例外を送出しなければ、システムコールがシ"
"グナルに中断された場合に、 :exc:`InterruptedError` を送出せずにシステムコール"
"を再試行するようになりました。"

#: ../../whatsnew/3.5.rst:2403
msgid ""
"Before Python 3.5, a :class:`datetime.time` object was considered to be "
"false if it represented midnight in UTC.  This behavior was considered "
"obscure and error-prone and has been removed in Python 3.5.  See :issue:"
"`13936` for full details."
msgstr ""
"Python 3.5 以前は、 :class:`.time` オブジェクトは UTC で深夜を表すときに偽と"
"みなされていました。\n"
"この挙動は分かりにくく、エラーの元となると考えられ、Python 3.5 で削除されまし"
"た。\n"
"全詳細については :issue:`13936` を参照してください。"

#: ../../whatsnew/3.5.rst:2408
msgid ""
"The :meth:`ssl.SSLSocket.send` method now raises either :exc:`ssl."
"SSLWantReadError` or :exc:`ssl.SSLWantWriteError` on a non-blocking socket "
"if the operation would block.  Previously, it would return ``0``.  "
"(Contributed by Nikolaus Rath in :issue:`20951`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2413
msgid ""
"The ``__name__`` attribute of generators is now set from the function name, "
"instead of being set from the code name. Use ``gen.gi_code.co_name`` to "
"retrieve the code name. Generators also have a new ``__qualname__`` "
"attribute, the qualified name, which is now used for the representation of a "
"generator (``repr(gen)``). (Contributed by Victor Stinner in :issue:`21205`.)"
msgstr ""
"ジェネレータの ``__name__`` 属性の値として、以前は code オブジェクトの名前か"
"ら取っていましたが、関数名からセットされるようになりました。code の方が所望の"
"場合は ``gen.gi_code.co_name`` から取得してください。ジェネレータは新たに "
"``__qualname__`` 属性も持つようになりました。これはジェネレータの正規名であ"
"り、ジェネレータの表現をする際 (``repr(gen)``) にこれを用いるようになりまし"
"た。 (Contributed by Victor Stinner in :issue:`21205`.)"

#: ../../whatsnew/3.5.rst:2420
msgid ""
"The deprecated \"strict\" mode and argument of :class:`~html.parser."
"HTMLParser`, :meth:`!HTMLParser.error`, and the :exc:`!HTMLParserError` "
"exception have been removed.  (Contributed by Ezio Melotti in :issue:"
"`15114`.) The *convert_charrefs* argument of :class:`~html.parser."
"HTMLParser` is now ``True`` by default.  (Contributed by Berker Peksag in :"
"issue:`21047`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2426
msgid ""
"Although it is not formally part of the API, it is worth noting for porting "
"purposes (ie: fixing tests) that error messages that were previously of the "
"form \"'sometype' does not support the buffer protocol\" are now of the form "
"\"a :term:`bytes-like object` is required, not 'sometype'\". (Contributed by "
"Ezio Melotti in :issue:`16518`.)"
msgstr ""
"API の公式な部分とは言えないものの、移植性への考慮のために (つまりテストの修"
"正) に、エラーメッセージの変更に注意を払っておいてください。かつて "
"\"'sometype' does not support the buffer protocol\" の形だったものが、いまで"
"は \"a :term:`bytes-like object` is required, not 'sometype'\" の形になってい"
"ます。 (Contributed by Ezio Melotti in :issue:`16518`.)"

#: ../../whatsnew/3.5.rst:2432
msgid ""
"If the current directory is set to a directory that no longer exists then :"
"exc:`FileNotFoundError` will no longer be raised and instead :meth:"
"`~importlib.machinery.FileFinder.find_spec` will return ``None`` **without** "
"caching ``None`` in :data:`sys.path_importer_cache`, which is different than "
"the typical case (:issue:`22834`)."
msgstr ""
"既に存在していないディレクトリをカレントディレクトリとして指していた場合"
"に、 :meth:`~importlib.machinery.FileFinder.find_spec` は以前は :exc:"
"`FileNotFoundError` 例外を送出していましたが、そうではなく ``None`` を返却す"
"るようになりました。この際 :data:`sys.path_importer_cache` に ``None`` を **"
"キャッシュはしません** 。これは典型的なケースとは違います(訳注: `msg231477 "
"<https://bugs.python.org/issue22834#msg231477>`_)。 (:issue:`22834`)"

#: ../../whatsnew/3.5.rst:2438
msgid ""
"HTTP status code and messages from :mod:`http.client` and :mod:`http.server` "
"were refactored into a common :class:`~http.HTTPStatus` enum.  The values "
"in :mod:`http.client` and :mod:`http.server` remain available for backwards "
"compatibility.  (Contributed by Demian Brecht in :issue:`21793`.)"
msgstr ""
":mod:`http.client` モジュールと :mod:`http.server` モジュールに散らばってい"
"た HTTP ステータスコードと対応するメッセージを、共通の :class:`~http."
"HTTPStatus` enum としてまとめ直しました。:mod:`http.client` 、 :mod:`http."
"server` にあったもとの値も後方互換性のために残してあります。 (Contributed by "
"Demian Brecht in :issue:`21793`.)"

#: ../../whatsnew/3.5.rst:2443
msgid ""
"When an import loader defines :meth:`importlib.machinery.Loader.exec_module` "
"it is now expected to also define :meth:`~importlib.machinery.Loader."
"create_module` (raises a :exc:`DeprecationWarning` now, will be an error in "
"Python 3.6). If the loader inherits from :class:`importlib.abc.Loader` then "
"there is nothing to do, else simply define :meth:`~importlib.machinery."
"Loader.create_module` to return ``None``.  (Contributed by Brett Cannon in :"
"issue:`23014`.)"
msgstr ""
"インポートローダが :meth:`importlib.machinery.Loader.exec_module` を定義する"
"場合は、同時に :meth:`~importlib.machinery.Loader.create_module` も定義されて"
"いることを要求するように変更されました (今のところ :exc:`DeprecationWarning` "
"となりますが、Python 3.6 ではエラーとなります)。ローダが :class:`importlib."
"abc.Loader` を継承していれば特にこの変更の影響を受けることはありません。そう"
"でないならば、 ``None`` を返すだけの :meth:`~importlib.machinery.Loader."
"create_module` を定義してください。 (Contributed by Brett Cannon in :issue:"
"`23014`.)"

#: ../../whatsnew/3.5.rst:2451
msgid ""
"The :func:`re.split` function always ignored empty pattern matches, so the "
"``\"x*\"`` pattern worked the same as ``\"x+\"``, and the ``\"\\b\"`` "
"pattern never worked.  Now :func:`re.split` raises a warning if the pattern "
"could match an empty string.  For compatibility, use patterns that never "
"match an empty string (e.g. ``\"x+\"`` instead of ``\"x*\"``).  Patterns "
"that could only match an empty string (such as ``\"\\b\"``) now raise an "
"error. (Contributed by Serhiy Storchaka in :issue:`22818`.)"
msgstr ""
":func:`re.split` 関数は常に空のパターンマッチを無視してきました。ですからパ"
"ターン ``\"x*\"`` はパターン ``\"x+\"`` と同じように動作し、パターン "
"``\"\\b\"`` は決して動作しませんでした。今後は :func:`re.split` はパターンが"
"空文字列に合致しうる場合に警告を出します。互換性のためには空文字列とはマッチ"
"しえないパターンを使ってください(たとえば ``\"x*\"`` ではなく ``\"x+\"`` を"
"使ってください)。空文字列としかマッチしえないパターン(例えば ``\"\\b\"``)はエ"
"ラーとなります。 (Contributed by Serhiy Storchaka in :issue:`22818`.)"

#: ../../whatsnew/3.5.rst:2459
msgid ""
"The :class:`http.cookies.Morsel` dict-like interface has been made self "
"consistent:  morsel comparison now takes the :attr:`~http.cookies.Morsel."
"key` and :attr:`~http.cookies.Morsel.value` into account, :meth:`~http."
"cookies.Morsel.copy` now results in a :class:`~http.cookies.Morsel` instance "
"rather than a :class:`dict`, and :meth:`~http.cookies.Morsel.update` will "
"now raise an exception if any of the keys in the update dictionary are "
"invalid.  In addition, the undocumented *LegalChars* parameter of :func:"
"`~http.cookies.Morsel.set` is deprecated and is now ignored.  (Contributed "
"by Demian Brecht in :issue:`2211`.)"
msgstr ""
":class:`http.cookies.Morsel` 辞書風インターフェイスのそれ自身での一貫性を持た"
"せるようにしました: morsel の比較に :attr:`~http.cookies.Morsel.key` と :"
"attr:`~http.cookies.Morsel.value` を考慮するようにし、 :meth:`~http.cookies."
"Morsel.copy` は :class:`dict` を返さずに :class:`~http.cookies.Morsel` インス"
"タンスを返すようにし、 :meth:`~http.cookies.Morsel.update` は更新する辞書内の"
"いずれかのキーが不正(訳注: :rfc:`2109` として不正なキーのことで、update 以外"
"のインターフェイスでは変更前も拒絶される)であれば例外を投げるようにしていま"
"す。加えて、ドキュメントされていない :func:`~http.cookies.Morsel.set` の "
"*LegalChars* パラメータは非推奨となり、また指定しても無視されます。 "
"(Contributed by Demian Brecht in :issue:`2211`.)"

#: ../../whatsnew/3.5.rst:2469
msgid ""
":pep:`488` has removed ``.pyo`` files from Python and introduced the "
"optional ``opt-`` tag in ``.pyc`` file names. The :func:`importlib.util."
"cache_from_source` has gained an *optimization* parameter to help control "
"the ``opt-`` tag. Because of this, the *debug_override* parameter of the "
"function is now deprecated. ``.pyo`` files are also no longer supported as a "
"file argument to the Python interpreter and thus serve no purpose when "
"distributed on their own (i.e. sourceless code distribution). Due to the "
"fact that the magic number for bytecode has changed in Python 3.5, all old "
"``.pyo`` files from previous versions of Python are invalid regardless of "
"this PEP."
msgstr ""

#: ../../whatsnew/3.5.rst:2480
msgid ""
"The :mod:`socket` module now exports the :const:`~socket.CAN_RAW_FD_FRAMES` "
"constant on linux 3.6 and greater."
msgstr ""

#: ../../whatsnew/3.5.rst:2483
msgid ""
"The :func:`ssl.cert_time_to_seconds` function now interprets the input time "
"as UTC and not as local time, per :rfc:`5280`.  Additionally, the return "
"value is always an :class:`int`. (Contributed by Akira Li in :issue:`19940`.)"
msgstr ""
":rfc:`5280` に基づき、 :func:`ssl.cert_time_to_seconds` 関数が入力の時刻を"
"ローカル時刻ではなく UTC として解釈するようになりました。また、戻り値は常に :"
"class:`int` となります。 (Contributed by Akira Li in :issue:`19940`.)"

#: ../../whatsnew/3.5.rst:2487
msgid ""
"The ``pygettext.py`` Tool now uses the standard +NNNN format for timezones "
"in the POT-Creation-Date header."
msgstr ""
"``pygettext.py`` ツールが POT-Creation-Date ヘッダ内のタイムゾーン形式とし"
"て、標準の +NNNN 形式を使うようになりました。"

#: ../../whatsnew/3.5.rst:2490
msgid ""
"The :mod:`smtplib` module now uses :data:`sys.stderr` instead of the "
"previous module-level :data:`stderr` variable for debug output.  If your "
"(test) program depends on patching the module-level variable to capture the "
"debug output, you will need to update it to capture sys.stderr instead."
msgstr ""
":mod:`smtplib` モジュールは以前はデバッグ出力のためにモジュールレベルの :"
"data:`stderr` 変数を使っていましたが、 :data:`sys.stderr` を使うようになりま"
"した。もしもあなたの(テスト)プログラムが、そのデバッグ出力をキャプチャするた"
"めにこのモジュールレベル変数に依存してたのであれば、今後は sys.stderr をキャ"
"プチャするようにする必要があります。"

#: ../../whatsnew/3.5.rst:2495
msgid ""
"The :meth:`str.startswith` and :meth:`str.endswith` methods no longer return "
"``True`` when finding the empty string and the indexes are completely out of "
"range.  (Contributed by Serhiy Storchaka in :issue:`24284`.)"
msgstr ""
":meth:`str.startswith` と :meth:`str.endswith` メソッドは空文字列を見つけた場"
"合と完全に範囲外のインデクスが渡された場合に ``True`` を返すことはしなくなり"
"ました。  (Contributed by Serhiy Storchaka in :issue:`24284`.)"

#: ../../whatsnew/3.5.rst:2499
msgid ""
"The :func:`inspect.getdoc` function now returns documentation strings "
"inherited from base classes.  Documentation strings no longer need to be "
"duplicated if the inherited documentation is appropriate.  To suppress an "
"inherited string, an empty string must be specified (or the documentation "
"may be filled in).  This change affects the output of the :mod:`pydoc` "
"module and the :func:`help` function. (Contributed by Serhiy Storchaka in :"
"issue:`15582`.)"
msgstr ""
":func:`inspect.getdoc` 関数が基底クラスから継承したドキュメンテーション文字列"
"を返すようになりました。その継承したドキュメンテーション文字列が相応しいので"
"あれば、もはやそれを繰り返して記述する必要はありません。継承されたそれを抑制"
"するには、空の文字列を記述しなければなりません(もしくは然るべきドキュメンテー"
"ションを埋めれば良いです)。この変更は :mod:`pydoc` モジュールと :func:`help` "
"関数の出力に影響します。 (Contributed by Serhiy Storchaka in :issue:`15582`.)"

#: ../../whatsnew/3.5.rst:2507
msgid ""
"Nested :func:`functools.partial` calls are now flattened.  If you were "
"relying on the previous behavior, you can now either add an attribute to a :"
"func:`functools.partial` object or you can create a subclass of :func:"
"`functools.partial`. (Contributed by Alexander Belopolsky in :issue:`7830`.)"
msgstr ""
"ネストされた :func:`functools.partial` 呼び出しは平坦化されるようになりまし"
"た。以前の振る舞いに依存していたのであれば :func:`functools.partial` オブジェ"
"クトに属性を追加するか、または :func:`functools.partial` をサブクラス化するこ"
"とで出来ます。 (--訳注: 後半が意味がある内容を言ってるようには思えません。"
"「以前の振る舞い」とはおそらく ``partial`` オブジェクトの ``func`` 属性が "
"functools.partial そのものになることを指していて、「似たことをしたければ "
"``partial`` オブジェクトに別の属性を付ければりゃいんじゃね?」程度の無責任な代"
"替案を言ってるだけのような気がします。そもそも後者の「サブクラス化」は出来な"
"いと思いますし。 --)  (Contributed by Alexander Belopolsky in :issue:`7830`.)"

#: ../../whatsnew/3.5.rst:2514
msgid "Changes in the C API"
msgstr "C API の変更"

#: ../../whatsnew/3.5.rst:2516
msgid ""
"The undocumented :c:member:`!format` member of the (non-public) :c:type:"
"`PyMemoryViewObject` structure has been removed. All extensions relying on "
"the relevant parts in ``memoryobject.h`` must be rebuilt."
msgstr ""

#: ../../whatsnew/3.5.rst:2521
msgid ""
"The :c:type:`PyMemAllocator` structure was renamed to :c:type:"
"`PyMemAllocatorEx` and a new ``calloc`` field was added."
msgstr ""
":c:type:`PyMemAllocator` 構造体が :c:type:`PyMemAllocatorEx` にリネームされた"
"上で ``calloc`` フィールドが追加されました。"

#: ../../whatsnew/3.5.rst:2524
msgid ""
"Removed non-documented macro :c:macro:`!PyObject_REPR()` which leaked "
"references. Use format character ``%R`` in :c:func:`PyUnicode_FromFormat`-"
"like functions to format the :func:`repr` of the object. (Contributed by "
"Serhiy Storchaka in :issue:`22453`.)"
msgstr ""

#: ../../whatsnew/3.5.rst:2529
msgid ""
"Because the lack of the :attr:`__module__` attribute breaks pickling and "
"introspection, a deprecation warning is now raised for builtin types without "
"the :attr:`__module__` attribute.  This would be an AttributeError in the "
"future. (Contributed by Serhiy Storchaka in :issue:`20204`.)"
msgstr ""
":attr:`__module__` 属性の欠落は pickle 化とイントロスペクションを壊してしまう"
"ので、 :attr:`__module__` 属性のない組み込み型で deprecation warning を引き起"
"こすようにしました。将来これは AttributeError にするかもしれません。"
"(Contributed by Serhiy Storchaka in :issue:`20204`.)"

#: ../../whatsnew/3.5.rst:2535
msgid ""
"As part of the :pep:`492` implementation, the ``tp_reserved`` slot of :c:"
"type:`PyTypeObject` was replaced with a :c:member:`~PyTypeObject."
"tp_as_async` slot.  Refer to :ref:`coro-objects` for new types, structures "
"and functions."
msgstr ""

#: ../../whatsnew/3.5.rst:2542
msgid "Notable changes in Python 3.5.4"
msgstr ""

#: ../../whatsnew/3.5.rst:2545
msgid "New ``make regen-all`` build target"
msgstr ""

#: ../../whatsnew/3.5.rst:2547
msgid ""
"To simplify cross-compilation, and to ensure that CPython can reliably be "
"compiled without requiring an existing version of Python to already be "
"available, the autotools-based build system no longer attempts to implicitly "
"recompile generated files based on file modification times."
msgstr ""

#: ../../whatsnew/3.5.rst:2552
msgid ""
"Instead, a new ``make regen-all`` command has been added to force "
"regeneration of these files when desired (e.g. after an initial version of "
"Python has already been built based on the pregenerated versions)."
msgstr ""

#: ../../whatsnew/3.5.rst:2556
msgid ""
"More selective regeneration targets are also defined - see :source:`Makefile."
"pre.in` for details."
msgstr ""

#: ../../whatsnew/3.5.rst:2559 ../../whatsnew/3.5.rst:2572
msgid "(Contributed by Victor Stinner in :issue:`23404`.)"
msgstr "(Victor Stinner の貢献による :issue:`23404`) "

#: ../../whatsnew/3.5.rst:2565
msgid "Removal of ``make touch`` build target"
msgstr ""

#: ../../whatsnew/3.5.rst:2567
msgid ""
"The ``make touch`` build target previously used to request implicit "
"regeneration of generated files by updating their modification times has "
"been removed."
msgstr ""

#: ../../whatsnew/3.5.rst:2570
msgid "It has been replaced by the new ``make regen-all`` target."
msgstr ""
