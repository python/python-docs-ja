# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
# Tetsuo Koyama <tkoyama010@gmail.com>, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 03:34+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/2.7.rst:3
msgid "What's New in Python 2.7"
msgstr "What's New in Python 2.7"

#: ../../whatsnew/2.7.rst:0
msgid "Author"
msgstr "著者"

#: ../../whatsnew/2.7.rst:5
msgid "A.M. Kuchling (amk at amk.ca)"
msgstr "A.M. Kuchling (amk at amk.ca)"

#: ../../whatsnew/2.7.rst:52
msgid ""
"This article explains the new features in Python 2.7.  Python 2.7 was "
"released on July 3, 2010."
msgstr ""
"この文書は Python 2.7 の新機能について解説します。Python 2.7 は 2010 年 7 月 "
"3 日にリリースされました。"

#: ../../whatsnew/2.7.rst:55
msgid ""
"Numeric handling has been improved in many ways, for both floating-point "
"numbers and for the :class:`~decimal.Decimal` class. There are some useful "
"additions to the standard library, such as a greatly enhanced :mod:"
"`unittest` module, the :mod:`argparse` module for parsing command-line "
"options, convenient :class:`~collections.OrderedDict` and :class:"
"`~collections.Counter` classes in the :mod:`collections` module, and many "
"other improvements."
msgstr ""
"数値周りの扱いが、浮動小数点数でも :class:`~decimal.Decimal` クラスでもいろい"
"ろな点で改良されました、標準ライブラリにいくつかの有用な追加が行われまし"
"た。 :mod:`unittest` モジュールが大幅に改良され、コマンドラインオプション解析"
"の :mod:`argparse` モジュールが追加され、 :mod:`collections` モジュールに便利"
"な :class:`~collections.OrderedDict` と :class:`~collections.Counter` が追加"
"され、他にもたくさんの改良が行われています。"

#: ../../whatsnew/2.7.rst:63
msgid ""
"Python 2.7 is planned to be the last of the 2.x releases, so we worked on "
"making it a good release for the long term.  To help with porting to Python "
"3, several new features from the Python 3.x series have been included in 2.7."
msgstr ""
"Python 2.7 は 2.x の最終リリースになることが予定されているので、私たちはこの"
"リリースを長期にわたって良いものになるように努力してきました。Python 3 への移"
"植を助けるため、いくつかの新機能が Python 3.x から Python 2.7 に取り込まれて"
"います。"

#: ../../whatsnew/2.7.rst:68
msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you "
"should refer to the documentation for Python 2.7 at https://docs.python.org. "
"If you want to understand the rationale for the design and implementation, "
"refer to the PEP for a particular new feature or the issue on https://bugs."
"python.org in which a change was discussed.  Whenever possible, \"What's New "
"in Python\" links to the bug/patch item for each change."
msgstr ""
"このドキュメントは新機能の完全な詳細を提供するのではなくて、簡易な概要を提供"
"することを目的にしています。完全な詳細が知りたければ、 https://docs.python."
"org の Python 2.7 のドキュメントを参照してください。設計と実装の根拠を理解し"
"たい場合は、新機能に関する PEP を参照するか、 https://bugs.python.org に議論"
"したい機能について登録してください。可能な限り、 \"What's New in Python\" は"
"各変更の bug や patch に対してリンクしています。"

#: ../../whatsnew/2.7.rst:80
msgid "The Future for Python 2.x"
msgstr "Python 2.x の今後"

#: ../../whatsnew/2.7.rst:82
msgid ""
"Python 2.7 is the last major release in the 2.x series, as the Python "
"maintainers have shifted the focus of their new feature development efforts "
"to the Python 3.x series. This means that while Python 2 continues to "
"receive bug fixes, and to be updated to build correctly on new hardware and "
"versions of supported operated systems, there will be no new full feature "
"releases for the language or standard library."
msgstr ""
"Python 2.7 は 2.x シリーズの最後のメジャーリリースになります。Python のメンテ"
"ナは既に Python 3.x シリーズへの新機能の開発に焦点をシフトしています。Python "
"2 は今後もバグフィックスを受け容れ、新しいハードウェアやサポートしている OS "
"のバージョンでのビルドが出来るように保つ一方で、言語や標準ライブラリの新しい"
"完全な機能のリリースは行いません。"

#: ../../whatsnew/2.7.rst:89
msgid ""
"However, while there is a large common subset between Python 2.7 and Python "
"3, and many of the changes involved in migrating to that common subset, or "
"directly to Python 3, can be safely automated, some other changes (notably "
"those associated with Unicode handling) may require careful consideration, "
"and preferably robust automated regression test suites, to migrate "
"effectively."
msgstr ""
"しかしながら、Python 2.7 と Python 3 の間の共通の大きなサブセットがあって、そ"
"の共通サブセットあるいは直接的に Python 3 のものへの移行に伴う多くの変更が安"
"全に自動的に行える一方で、その他の変更(Unicode の扱いに関係するものに顕著です"
"が)入念な検討を必要とし、移行を有効に行うためには堅牢な回帰テストスイートが望"
"まれることでしょう。"

#: ../../whatsnew/2.7.rst:96
msgid ""
"This means that Python 2.7 will remain in place for a long time, providing a "
"stable and supported base platform for production systems that have not yet "
"been ported to Python 3. The full expected lifecycle of the Python 2.7 "
"series is detailed in :pep:`373`."
msgstr ""
"これは Python 2.7 が長期間に渡って依然として有効であり、安定性と、Python 3 が"
"いまだに移植されていないような製品システムのベースプラットフォームのサポート"
"を提供し続けることを意味しています。Python 2.7 シリーズに望まれているライフサ"
"イクルについての完全な詳細は、 :pep:`373` に記述されています。"

#: ../../whatsnew/2.7.rst:101
msgid "Some key consequences of the long-term significance of 2.7 are:"
msgstr "2.7 が長期的に重要なリリースになるので、いくつかの結論があります:"

#: ../../whatsnew/2.7.rst:103
msgid ""
"As noted above, the 2.7 release has a much longer period of maintenance when "
"compared to earlier 2.x versions. Python 2.7 is currently expected to remain "
"supported by the core development team (receiving security updates and other "
"bug fixes) until at least 2020 (10 years after its initial release, compared "
"to the more typical support period of 18--24 months)."
msgstr ""
"上述のように、 2.7 リリースは以前の 2.x バージョンに較べて遥かに長期間のメン"
"テナンスとなります。Python 2.7 は現在では、最低でも 2020 年までコア開発チーム"
"によって(セキュリティアップデートやほかのバグフィックスの)サポートがなされ続"
"けることが求められています(最初のリリースから 10 年後です。普通であれば "
"18--24 ヶ月なのに)。"

#: ../../whatsnew/2.7.rst:109
msgid ""
"As the Python 2.7 standard library ages, making effective use of the Python "
"Package Index (either directly or via a redistributor) becomes more "
"important for Python 2 users. In addition to a wide variety of third party "
"packages for various tasks, the available packages include backports of new "
"modules and features from the Python 3 standard library that are compatible "
"with Python 2, as well as various tools and libraries that can make it "
"easier to migrate to Python 3. The `Python Packaging User Guide <https://"
"packaging.python.org>`__ provides guidance on downloading and installing "
"software from the Python Package Index."
msgstr ""
"Python 2.7 標準ライブラリが年老いていくに従い、(直接であれ再配布であれ) "
"Python Package Index の効果的な利用が Python 2 ユーザにとってますます重要に"
"なっています。さまざまなタスクをこなすありとあらゆるサードパーティパッケージ"
"に加え、Python 2 互換の、Python 3 標準ライブラリからバックポートした新しいモ"
"ジュールや機能を含むパッケージ、Python 3 への移行を容易にするための様々なツー"
"ルやライブラリが入手出来ます。`Python Packaging User Guide <https://"
"packaging.python.org>`_ は Python Package Index からソフトウェアをダウンロー"
"ド・インストールする際のガイダンスです。"

#: ../../whatsnew/2.7.rst:119
msgid ""
"While the preferred approach to enhancing Python 2 is now the publication of "
"new packages on the Python Package Index, this approach doesn't necessarily "
"work in all cases, especially those related to network security. In "
"exceptional cases that cannot be handled adequately by publishing new or "
"updated packages on PyPI, the Python Enhancement Proposal process may be "
"used to make the case for adding new features directly to the Python 2 "
"standard library. Any such additions, and the maintenance releases where "
"they were added, will be noted in the :ref:`py27-maintenance-enhancements` "
"section below."
msgstr ""
"Python 2 を拡張するための望ましいアプローチは現在では Python Package Index に"
"新しいパッケージを公開することである一方で、このアプローチが全てのケースで求"
"められるわけではありません。特にそれがネットワークセキュリティに関係している"
"場合には。PyPI に新規もしくは更新パッケージを公開することでは十分ではない例外"
"的なケースにおいては、Python 2 標準ライブラリに直接新機能を追加するために "
"Python Enhancement Proposal プロセスが使われるでしょう。そのような追加の全て"
"と、それらが追加されたメンテナンスリリースは、下の方の :ref:`py27-"
"maintenance-enhancements` セクションで言及されます。"

#: ../../whatsnew/2.7.rst:129
msgid ""
"For projects wishing to migrate from Python 2 to Python 3, or for library "
"and framework developers wishing to support users on both Python 2 and "
"Python 3, there are a variety of tools and guides available to help decide "
"on a suitable approach and manage some of the technical details involved. "
"The recommended starting point is the :ref:`pyporting-howto` HOWTO guide."
msgstr ""
"Python 2 から Python 3 へ乗り換えたいと望むプロジェクトあるいはPython 2 と "
"Python 3 両方のユーザをサポートしたいと願うライブラリやフレームワークの開発者"
"向けに、さまざまなツールやガイドがあります。これらは、相応しいアプローチを決"
"めたりある種複雑な技術的詳細の管理をする手助けとなるでしょう。まず手始めに"
"は :ref:`pyporting-howto` HOWTO ガイドをご覧になることをお奨めします。"

#: ../../whatsnew/2.7.rst:137
msgid "Changes to the Handling of Deprecation Warnings"
msgstr "Deprecation Warnings の扱いの変更"

#: ../../whatsnew/2.7.rst:139
msgid ""
"For Python 2.7, a policy decision was made to silence warnings only of "
"interest to developers by default.  :exc:`DeprecationWarning` and its "
"descendants are now ignored unless otherwise requested, preventing users "
"from seeing warnings triggered by an application.  This change was also made "
"in the branch that became Python 3.2. (Discussed on stdlib-sig and carried "
"out in :issue:`7319`.)"
msgstr ""
"Python 2.7 では開発者向けの警告をデフォルトで抑止するポリシーが取られまし"
"た。 :exc:`DeprecationWarning` とそれを継承した警告は、指定されない限りは無視"
"され、アプリケーションのユーザーがその警告を見ないですむようになりました。こ"
"の変更は Python 3.2 ブランチにも適用されました。 (stdlib-sig で討議され、 :"
"issue:`7319` になりました)"

#: ../../whatsnew/2.7.rst:146
msgid ""
"In previous releases, :exc:`DeprecationWarning` messages were enabled by "
"default, providing Python developers with a clear indication of where their "
"code may break in a future major version of Python."
msgstr ""
"以前のリリースでは、 :exc:`DeprecationWarning` メッセージはデフォルトで有効に"
"なっており、 Python 開発者に、将来のバージョンの Python でそのコードのどこが"
"動かなくなるかを明確に知らせていました。"

#: ../../whatsnew/2.7.rst:151
msgid ""
"However, there are increasingly many users of Python-based applications who "
"are not directly involved in the development of those applications.  :exc:"
"`DeprecationWarning` messages are irrelevant to such users, making them "
"worry about an application that's actually working correctly and burdening "
"application developers with responding to these concerns."
msgstr ""
"しかし、 Python で開発されたアプリケーションの利用者であって開発には携わって"
"いない人がどんどん増えてきました。 :exc:`DeprecationWarning` メッセージはそれ"
"らのユーザーには無関係で、彼らをアプリケーションが本当に正しく動いているのか"
"不安にさせ、ユーザーの質問に応えるための開発者の負担も増やしていました。"

#: ../../whatsnew/2.7.rst:158
msgid ""
"You can re-enable display of :exc:`DeprecationWarning` messages by running "
"Python with the :option:`-Wdefault <-W>` (short form: :option:`-Wd <-W>`) "
"switch, or by setting the :envvar:`PYTHONWARNINGS` environment variable to "
"``\"default\"`` (or ``\"d\"``) before running Python.  Python code can also "
"re-enable them by calling ``warnings.simplefilter('default')``."
msgstr ""
":exc:`DeprecationWarning` メッセージの表示を有効にするには、 :option:`-"
"Wdefault <-W>` (短い形式: :option:`-Wd <-W>`) スイッチか、Python を実行する前"
"に :envvar:`PYTHONWARNINGS` 環境変数を ``\"default\"``  (か、 ``\"d\"``)に設"
"定します。 Python コードから有効にする場合は ``warnings."
"simplefilter('default')`` とします。"

#: ../../whatsnew/2.7.rst:165
msgid ""
"The ``unittest`` module also automatically reenables deprecation warnings "
"when running tests."
msgstr ""
"``unittest`` モジュールもテスト実行時に自動的に deprecation warnings を有効に"
"します。"

#: ../../whatsnew/2.7.rst:170
msgid "Python 3.1 Features"
msgstr "Python 3.1 の機能"

#: ../../whatsnew/2.7.rst:172
msgid ""
"Much as Python 2.6 incorporated features from Python 3.0, version 2.7 "
"incorporates some of the new features in Python 3.1.  The 2.x series "
"continues to provide tools for migrating to the 3.x series."
msgstr ""
"Python 2.6 は Python 3.0 から多くの機能を取り込み、Python 2.7 は Python 3.1 "
"の新しい機能のいくつかを取り込みました。2.x シリーズは 3.x シリーズへの移行の"
"ためのツールを提供し続けています。"

#: ../../whatsnew/2.7.rst:177
msgid "A partial list of 3.1 features that were backported to 2.7:"
msgstr "Python 2.7 に取り込まれた 3.1 の機能の不完全なリスト:"

#: ../../whatsnew/2.7.rst:179
msgid "The syntax for set literals (``{1,2,3}`` is a mutable set)."
msgstr "集合のリテラル文法 (``{1,2,3}`` は mutable set になります)"

#: ../../whatsnew/2.7.rst:180
msgid "Dictionary and set comprehensions (``{i: i*2 for i in range(3)}``)."
msgstr "辞書と集合の内包表記 (``{i: i*2 for i in range(3)}``)."

#: ../../whatsnew/2.7.rst:181
msgid "Multiple context managers in a single :keyword:`with` statement."
msgstr "1つの :keyword:`with` 文で複数のコンテキストマネージャを扱えるように。"

#: ../../whatsnew/2.7.rst:182
msgid "A new version of the :mod:`io` library, rewritten in C for performance."
msgstr ""
":mod:`io` ライブラリの新バージョン。パフォーマンスのためにC言語で描き直されて"
"います。"

#: ../../whatsnew/2.7.rst:183
msgid "The ordered-dictionary type described in :ref:`pep-0372`."
msgstr ":ref:`pep-0372` で解説されている順序付き辞書"

#: ../../whatsnew/2.7.rst:184
msgid "The new ``\",\"`` format specifier described in :ref:`pep-0378`."
msgstr ":ref:`pep-0378` で解説されている新しい ``\",\"`` フォーマット指定子"

#: ../../whatsnew/2.7.rst:185
msgid "The :class:`memoryview` object."
msgstr ":class:`memoryview` オブジェクト"

#: ../../whatsnew/2.7.rst:186
msgid ""
"A small subset of the :mod:`importlib` module, `described below <#importlib-"
"section>`__."
msgstr ""
":mod:`importlib` モジュールの小さいサブセット。 `下に説明があります "
"<#importlib-section>`__"

#: ../../whatsnew/2.7.rst:188
msgid ""
"The :func:`repr` of a float ``x`` is shorter in many cases: it's now based "
"on the shortest decimal string that's guaranteed to round back to ``x``.  As "
"in previous versions of Python, it's guaranteed that ``float(repr(x))`` "
"recovers ``x``."
msgstr ""
"float ``x`` の :func:`repr` が多くの場合に短くなりました。これは ``x`` に戻せ"
"ることが保証される最小の10進文字列です。以前のバージョンの Python では、 "
"``float(repr(x))`` が ``x`` になることだけが保証されていました。"

#: ../../whatsnew/2.7.rst:192
msgid ""
"Float-to-string and string-to-float conversions are correctly rounded. The :"
"func:`round` function is also now correctly rounded."
msgstr ""
"float から文字列、文字列から float への変換が正しく丸められるようになりまし"
"た。 :func:`round` 関数も正しく丸めるようになりました。"

#: ../../whatsnew/2.7.rst:194
msgid ""
"The :c:type:`PyCapsule` type, used to provide a C API for extension modules."
msgstr "拡張モジュールが C API を提供するための、 :c:type:`PyCapsule` 型"

#: ../../whatsnew/2.7.rst:195
msgid "The :c:func:`PyLong_AsLongAndOverflow` C API function."
msgstr ":c:func:`PyLong_AsLongAndOverflow` C API 関数"

#: ../../whatsnew/2.7.rst:197
msgid "Other new Python3-mode warnings include:"
msgstr "新しい Python3 モード Warning:"

#: ../../whatsnew/2.7.rst:199
msgid ""
":func:`operator.isCallable` and :func:`operator.sequenceIncludes`, which are "
"not supported in 3.x, now trigger warnings."
msgstr ""
":func:`operator.isCallable` と :func:`operator.sequenceIncludes` は 3.x では"
"サポートされず、 warning になります。"

#: ../../whatsnew/2.7.rst:201
msgid ""
"The :option:`!-3` switch now automatically enables the :option:`!-Qwarn` "
"switch that causes warnings about using classic division with integers and "
"long integers."
msgstr ""
":option:`!-3` スイッチは、整数または長整数での古い除算方式を使用した場合に警"
"告を出力するようになる :option:`!-Qwarn` スイッチを有効にするようになりまし"
"た。"

#: ../../whatsnew/2.7.rst:214
msgid "PEP 372: Adding an Ordered Dictionary to collections"
msgstr "PEP 372: collections に順序付き辞書を追加"

#: ../../whatsnew/2.7.rst:216
msgid ""
"Regular Python dictionaries iterate over key/value pairs in arbitrary order. "
"Over the years, a number of authors have written alternative implementations "
"that remember the order that the keys were originally inserted.  Based on "
"the experiences from those implementations, 2.7 introduces a new :class:"
"`~collections.OrderedDict` class in the :mod:`collections` module."
msgstr ""
"通常の Python 辞書は、 key/value ペアを不定の順序でイテレートします。何年にも"
"わたり、いろいろな人が key の挿入順を保存する辞書の別実装を書いてきました。そ"
"の経験に基づき、 2.7 は :mod:`collections` モジュールに新しい :class:"
"`~collections.OrderedDict` クラスを追加しました。"

#: ../../whatsnew/2.7.rst:222
msgid ""
"The :class:`~collections.OrderedDict` API provides the same interface as "
"regular dictionaries but iterates over keys and values in a guaranteed order "
"depending on when a key was first inserted::"
msgstr ""
":class:`~collections.OrderedDict` API は通常の辞書と同じインタフェースを提供"
"していますが、 key/value をイテレートするときに key が最初に挿入された順番に"
"なることが保証されています。 ::"

#: ../../whatsnew/2.7.rst:233
msgid ""
"If a new entry overwrites an existing entry, the original insertion position "
"is left unchanged::"
msgstr ""
"新しいエントリが既存のエントリを上書きした場合は、元の挿入順序が保持されま"
"す。::"

#: ../../whatsnew/2.7.rst:240
msgid "Deleting an entry and reinserting it will move it to the end::"
msgstr "エントリを削除して再挿入すると、順序は一番最後に移動します。::"

#: ../../whatsnew/2.7.rst:247
msgid ""
"The :meth:`~collections.OrderedDict.popitem` method has an optional *last* "
"argument that defaults to ``True``.  If *last* is true, the most recently "
"added key is returned and removed; if it's false, the oldest key is "
"selected::"
msgstr ""
":meth:`~collections.OrderedDict.popitem` メソッドは、オプションの *last* 引数"
"を持ち、でフォルトで ``True`` になっています。 *last* が真の場合、一番最近に"
"追加された key が返され、削除されます。偽の場合、最も古い key が選ばれます::"

#: ../../whatsnew/2.7.rst:262
msgid ""
"Comparing two ordered dictionaries checks both the keys and values, and "
"requires that the insertion order was the same::"
msgstr ""
"2つの順序付き辞書を比較するときは、key/value だけでなく、挿入順も比較されま"
"す。::"

#: ../../whatsnew/2.7.rst:278
msgid ""
"Comparing an :class:`~collections.OrderedDict` with a regular dictionary "
"ignores the insertion order and just compares the keys and values."
msgstr ""
":class:`~collections.OrderedDict` を通常の辞書と比較すると、挿入順は無視され"
"て単に key/value だけが比較されます。"

#: ../../whatsnew/2.7.rst:281
msgid ""
"How does the :class:`~collections.OrderedDict` work?  It maintains a doubly-"
"linked list of keys, appending new keys to the list as they're inserted. A "
"secondary dictionary maps keys to their corresponding list node, so deletion "
"doesn't have to traverse the entire linked list and therefore remains O(1)."
msgstr ""
":class:`~collections.OrderedDict` の実装はこうなっています。 key の2重リンク"
"リストを管理し、新しい key が挿入されるときにリストに新しい key を追加しま"
"す。2つ目の辞書が key を対応するリストノードにマップします。なので、削除時に"
"リンクリストを操作する必要はなく、コストは O(1) に保たれています。"

#: ../../whatsnew/2.7.rst:287
msgid ""
"The standard library now supports use of ordered dictionaries in several "
"modules."
msgstr ""
"標準ライブラリのいくつかのモジュールで、順序付き辞書の利用がサポートされてい"
"ます。"

#: ../../whatsnew/2.7.rst:290
msgid ""
"The :mod:`ConfigParser` module uses them by default, meaning that "
"configuration files can now be read, modified, and then written back in "
"their original order."
msgstr ""
":mod:`ConfigParser` モジュールはデフォルトで順序付き辞書を使います。設定ファ"
"イルを読み込み、編集した後、元の順序で書きなおすことができます。"

#: ../../whatsnew/2.7.rst:294
msgid ""
"The :meth:`~collections.somenamedtuple._asdict()` method for :func:"
"`collections.namedtuple` now returns an ordered dictionary with the values "
"appearing in the same order as the underlying tuple indices."
msgstr ""
":func:`collections.namedtuple` の :meth:`~collections.somenamedtuple."
"_asdict()` メソッドは、タプルの順序と同じ順序の順序付き辞書を返すようになりま"
"した。"

#: ../../whatsnew/2.7.rst:298
msgid ""
"The :mod:`json` module's :class:`~json.JSONDecoder` class constructor was "
"extended with an *object_pairs_hook* parameter to allow :class:`OrderedDict` "
"instances to be built by the decoder. Support was also added for third-party "
"tools like `PyYAML <http://pyyaml.org/>`_."
msgstr ""
":mod:`json` モジュールのデコーダーが :class:`OrderedDict` をビルドするのをサ"
"ポートするために、 :class:`~json.JSONDecoder` クラスのコンストラクタに "
"*object_pairs_hook* 引数が追加されました。 `PyYAML <http://pyyaml.org/>`_ な"
"どの外部のライブラリでもサポートされています。"

#: ../../whatsnew/2.7.rst:307
msgid ":pep:`372` - Adding an ordered dictionary to collections"
msgstr ":pep:`372` - collections に順序付き辞書を追加"

#: ../../whatsnew/2.7.rst:307
msgid ""
"PEP written by Armin Ronacher and Raymond Hettinger; implemented by Raymond "
"Hettinger."
msgstr ""
"PEP written by Armin Ronacher and Raymond Hettinger; implemented by Raymond "
"Hettinger."

#: ../../whatsnew/2.7.rst:313
msgid "PEP 378: Format Specifier for Thousands Separator"
msgstr "PEP 378: 1000区切りのための書式指定子"

#: ../../whatsnew/2.7.rst:315
msgid ""
"To make program output more readable, it can be useful to add separators to "
"large numbers, rendering them as 18,446,744,073,709,551,616 instead of "
"18446744073709551616."
msgstr ""
"大きい数値に区切り文字を追加して、18446744073709551616 の代わりに "
"18,446,744,073,709,551,616 と出力すると、プログラムの出力を読みやすくできま"
"す。"

#: ../../whatsnew/2.7.rst:319
msgid ""
"The fully general solution for doing this is the :mod:`locale` module, which "
"can use different separators (\",\" in North America, \".\" in Europe) and "
"different grouping sizes, but :mod:`locale` is complicated to use and "
"unsuitable for multi-threaded applications where different threads are "
"producing output for different locales."
msgstr ""
"これを行う一般的な方法は :mod:`locale` モジュールを使うことで、複数の区切り文"
"字 (北米では \",\" で、ヨーロッパでは \".\") を使ったり、複数のグループの大き"
"さを使うことができます。しかし、 :mod:`locale` の利用方法は複雑ですし、スレッ"
"ドごとに異なるロケールの出力を行うプログラムでは利用することができません。"

#: ../../whatsnew/2.7.rst:325
msgid ""
"Therefore, a simple comma-grouping mechanism has been added to the mini-"
"language used by the :meth:`str.format` method.  When formatting a floating-"
"point number, simply include a comma between the width and the precision::"
msgstr ""
"そのため、シンプルなカンマによるグループ化機構が :meth:`str.format` メソッド"
"のミニ言語に追加されました。浮動小数点数をフォーマットする場合、シンプルにカ"
"ンマを幅と精度の間に置きます。"

#: ../../whatsnew/2.7.rst:333
msgid "When formatting an integer, include the comma after the width:"
msgstr "整数をフォーマットする場合は、幅の後にカンマを追加します。"

#: ../../whatsnew/2.7.rst:338
msgid ""
"This mechanism is not adaptable at all; commas are always used as the "
"separator and the grouping is always into three-digit groups.  The comma-"
"formatting mechanism isn't as general as the :mod:`locale` module, but it's "
"easier to use."
msgstr ""
"この機構は全く柔軟性を持っていません。区切り文字は常にカンマですし、グループ"
"は常に数字3つになります。カンマ書式機構は :mod:`locale` ほど汎用ではありませ"
"んが、手軽に使うことができます。"

#: ../../whatsnew/2.7.rst:345
msgid ":pep:`378` - Format Specifier for Thousands Separator"
msgstr ":pep:`378` - 1000区切りのための書式指定子"

#: ../../whatsnew/2.7.rst:346
msgid "PEP written by Raymond Hettinger; implemented by Eric Smith."
msgstr "PEP written by Raymond Hettinger; implemented by Eric Smith."

#: ../../whatsnew/2.7.rst:349
msgid "PEP 389: The argparse Module for Parsing Command Lines"
msgstr "PEP 389: コマンドライン解析のための argparse モジュール"

#: ../../whatsnew/2.7.rst:351
msgid ""
"The :mod:`argparse` module for parsing command-line arguments was added as a "
"more powerful replacement for the :mod:`optparse` module."
msgstr ""
"コマンドライン引数の解析のための :mod:`argparse` モジュールが、 :mod:"
"`optparse` モジュールのより強力な代替として追加されました。"

#: ../../whatsnew/2.7.rst:355
msgid ""
"This means Python now supports three different modules for parsing command-"
"line arguments: :mod:`getopt`, :mod:`optparse`, and :mod:`argparse`.  The :"
"mod:`getopt` module closely resembles the C library's :c:func:`getopt` "
"function, so it remains useful if you're writing a Python prototype that "
"will eventually be rewritten in C. :mod:`optparse` becomes redundant, but "
"there are no plans to remove it because there are many scripts still using "
"it, and there's no automated way to update these scripts.  (Making the :mod:"
"`argparse` API consistent with :mod:`optparse`'s interface was discussed but "
"rejected as too messy and difficult.)"
msgstr ""
"これにより、 Python はコマンドライン引数の解析のために3つの異なるモジュー"
"ル、 :mod:`getopt`, :mod:`optparse`, :mod:`argparse` を持つことになります。 :"
"mod:`getopt` モジュールは C言語用ライブラリの :c:func:`getopt` 関数に似せてあ"
"るので、あとで C 言語で書き直すかもしれないプログラムのプロトタイプを Python "
"で書く場合に役に立ちます。 :mod:`optparse` は冗長になってしまいましたが、まだ"
"たくさんのスクリプトが利用していて、それらのスクリプトを自動的に更新する手段"
"が無いので、削除される予定はありません。(:mod:`argparse` API を :mod:"
"`optparse` のインタフェースに適合させる方法も検討されましたが、多くの複雑さと"
"難点のために却下されました)"

#: ../../whatsnew/2.7.rst:366
msgid ""
"In short, if you're writing a new script and don't need to worry about "
"compatibility with earlier versions of Python, use :mod:`argparse` instead "
"of :mod:`optparse`."
msgstr ""
"古いバージョンの Python との互換性を気にすること無く新しいスクリプトを書く時"
"は、 :mod:`optparse` の代わりに :mod:`argparse` を使ってください。"

#: ../../whatsnew/2.7.rst:370
msgid "Here's an example::"
msgstr "以下はこの使用例です::"

#: ../../whatsnew/2.7.rst:393
msgid ""
"Unless you override it, :option:`!-h` and :option:`!--help` switches are "
"automatically added, and produce neatly formatted output::"
msgstr ""
"オーバーライドしない限り、 :option:`!-h` と :option:`!--help` スイッチが自動"
"的に追加され、綺麗にフォーマットした出力を生成します。 ::"

#: ../../whatsnew/2.7.rst:410
msgid ""
"As with :mod:`optparse`, the command-line switches and arguments are "
"returned as an object with attributes named by the *dest* parameters::"
msgstr ""
":mod:`optparse` と同じく、コマンドラインスイッチと引数は、 *dest* 引数の名前"
"の属性をもったオブジェクトとして返されます。 ::"

#: ../../whatsnew/2.7.rst:425
msgid ""
":mod:`argparse` has much fancier validation than :mod:`optparse`; you can "
"specify an exact number of arguments as an integer, 0 or more arguments by "
"passing ``'*'``, 1 or more by passing ``'+'``, or an optional argument with "
"``'?'``.  A top-level parser can contain sub-parsers to define subcommands "
"that have different sets of switches, as in ``svn commit``, ``svn "
"checkout``, etc.  You can specify an argument's type as :class:`~argparse."
"FileType`, which will automatically open files for you and understands that "
"``'-'`` means standard input or output."
msgstr ""
":mod:`argparse` は :mod:`optparse` よりも多くの便利なバリデーションを持ってい"
"ます。引数の正確な数を整数で指定したり、 ``'*'`` で0以上の数を指定したり、 "
"``'+'`` で1以上の数を指定したり、 ``'?'`` でオプションにしたりできます。トッ"
"プレベルのパーサーはサブパーサーを持つことができ、 ``svn commit``, ``svn "
"checkout`` のように異なるオプションを持ったサブコマンドを定義できます。引数の"
"タイプに :class:`~argparse.FileType` を指定することで、自動でファイルを開"
"き、 ``'-'`` が指定されたときに標準入出力だと判断することができます。"

#: ../../whatsnew/2.7.rst:438
msgid ":mod:`argparse` documentation"
msgstr ":mod:`argparse` のドキュメント"

#: ../../whatsnew/2.7.rst:438
msgid "The documentation page of the argparse module."
msgstr "argparse モジュールのドキュメント"

#: ../../whatsnew/2.7.rst:442
msgid ":ref:`upgrading-optparse-code`"
msgstr ":ref:`upgrading-optparse-code`"

#: ../../whatsnew/2.7.rst:441
msgid ""
"Part of the Python documentation, describing how to convert code that uses :"
"mod:`optparse`."
msgstr ""
":mod:`optparse` を使うコードを変換する方法を説明した Python のドキュメントの"
"一部"

#: ../../whatsnew/2.7.rst:444
msgid ":pep:`389` - argparse - New Command Line Parsing Module"
msgstr ":pep:`389` - argparse コマンドライン解析モジュール"

#: ../../whatsnew/2.7.rst:445
msgid "PEP written and implemented by Steven Bethard."
msgstr "PEP written and implemented by Steven Bethard."

#: ../../whatsnew/2.7.rst:448
msgid "PEP 391: Dictionary-Based Configuration For Logging"
msgstr "PEP 391: logging の辞書ベースの設定"

#: ../../whatsnew/2.7.rst:450
msgid ""
"The :mod:`logging` module is very flexible; applications can define a tree "
"of logging subsystems, and each logger in this tree can filter out certain "
"messages, format them differently, and direct messages to a varying number "
"of handlers."
msgstr ""
":mod:`logging` モジュールは非常に柔軟です。アプリケーションは logging のサブ"
"システムのツリーを定義できます。このツリーの各ロガーはいくつかのメッセージを"
"フィルターし、異なるフォーマットを行い、メッセージを沢山の種類のハンドラーに"
"渡します。"

#: ../../whatsnew/2.7.rst:455
msgid ""
"All this flexibility can require a lot of configuration.  You can write "
"Python statements to create objects and set their properties, but a complex "
"set-up requires verbose but boring code. :mod:`logging` also supports a :"
"func:`~logging.fileConfig` function that parses a file, but the file format "
"doesn't support configuring filters, and it's messier to generate "
"programmatically."
msgstr ""
"この柔軟性は、多くの設定を必要とします。オブジェクトを生成してプロパティを設"
"定する Python コードを書くこともできますが、複雑なセットアップをしようとする"
"と退屈なコードを書かないといけなくなります。 :mod:`logging` は設定ファイルの"
"パースを行う :func:`~logging.fileConfig` 関数を提供していますが、このファイル"
"フォーマットはフィルターの設定をサポートしていませんし、プログラムで生成する"
"のはさらに面倒になります。"

#: ../../whatsnew/2.7.rst:462
msgid ""
"Python 2.7 adds a :func:`~logging.dictConfig` function that uses a "
"dictionary to configure logging.  There are many ways to produce a "
"dictionary from different sources: construct one with code; parse a file "
"containing JSON; or use a YAML parsing library if one is installed.  For "
"more information see :ref:`logging-config-api`."
msgstr ""
"Python 2.7 は logging の設定のために辞書を使う :func:`~logging.dictConfig` 関"
"数を追加しました。いろいろな入力から辞書を作成する方法があります。コードで"
"作ったり、 JSON ファイルをパースしたり、YAMLのパーサーをインストールしてあれ"
"ばそれを使うことができます。詳しい情報は :ref:`logging-config-api` を参照して"
"ください。"

#: ../../whatsnew/2.7.rst:468
msgid ""
"The following example configures two loggers, the root logger and a logger "
"named \"network\".  Messages sent to the root logger will be sent to the "
"system log using the syslog protocol, and messages to the \"network\" logger "
"will be written to a :file:`network.log` file that will be rotated once the "
"log reaches 1MB."
msgstr ""
"以下は、2つのロガー、 root logger と \"network\" という名前の logger を設定す"
"る例です。root logger に送られたメッセージは syslog プロトコルを利用してシス"
"テムログに送られ、 \"network\" logger に送られたメッセージは 1 MB ごとにロー"
"テートされる\n"
":file:`network.log` ファイルに書きこまれます。"

#: ../../whatsnew/2.7.rst:518
msgid ""
"Three smaller enhancements to the :mod:`logging` module, all implemented by "
"Vinay Sajip, are:"
msgstr ""
"他にも、 :mod:`logging` モジュールには Vinary Sajip によって実装された 3 つの"
"改良があります。"

#: ../../whatsnew/2.7.rst:523
msgid ""
"The :class:`~logging.handlers.SysLogHandler` class now supports syslogging "
"over TCP.  The constructor has a *socktype* parameter giving the type of "
"socket to use, either :const:`socket.SOCK_DGRAM` for UDP or :const:`socket."
"SOCK_STREAM` for TCP.  The default protocol remains UDP."
msgstr ""
":class:`~logging.handlers.SysLogHandler` クラスは TCP 経由の syslog をサポー"
"トします。コンストラクタの *socktype* 引数は使用するソケットの種類として、 "
"UDP を使う :const:`socket.SOCK_DGRAM` と TCP を使う :const:`socket."
"SOCK_STREAM` のどちらかを取ります。デフォルトはUDPのままです。"

#: ../../whatsnew/2.7.rst:529
msgid ""
":class:`~logging.Logger` instances gained a :meth:`~logging.Logger.getChild` "
"method that retrieves a descendant logger using a relative path. For "
"example, once you retrieve a logger by doing ``log = getLogger('app')``, "
"calling ``log.getChild('network.listen')`` is equivalent to ``getLogger('app."
"network.listen')``."
msgstr ""
":class:`~logging.Logger` インスタンスに :meth:`~logging.Logger.getChild`  メ"
"ソッドが追加されました。これは、相対パスで下位の logger を返します。 例え"
"ば、 ``log = getLogger('app')`` として logger を取得した後、  ``log."
"getChild('network.listen')`` は ``getLogger('app.network.listen')`` と同じに"
"なります。"

#: ../../whatsnew/2.7.rst:535
msgid ""
"The :class:`~logging.LoggerAdapter` class gained an :meth:`~logging."
"LoggerAdapter.isEnabledFor` method that takes a *level* and returns whether "
"the underlying logger would process a message of that level of importance."
msgstr ""
":class:`~logging.LoggerAdapter` クラスに  meth:`~logging.LoggerAdapter."
"isEnabledFor` メソッドが追加されました。 *level* を引数に取り、ベースの "
"logger がその重要度レベルのメッセージを処理するかどうかを返します。"

#: ../../whatsnew/2.7.rst:544
msgid ":pep:`391` - Dictionary-Based Configuration For Logging"
msgstr ":pep:`391` - logging の辞書ベースの設定"

#: ../../whatsnew/2.7.rst:545
msgid "PEP written and implemented by Vinay Sajip."
msgstr "PEP written and implemented by Vinay Sajip."

#: ../../whatsnew/2.7.rst:548
msgid "PEP 3106: Dictionary Views"
msgstr "PEP 3106: 辞書 View"

#: ../../whatsnew/2.7.rst:550
msgid ""
"The dictionary methods :meth:`~dict.keys`, :meth:`~dict.values`, and :meth:"
"`~dict.items` are different in Python 3.x.  They return an object called a :"
"dfn:`view` instead of a fully materialized list."
msgstr ""
"辞書の :meth:`~dict.keys`, :meth:`~dict.values`, :meth:`~dict.items` メソッド"
"は Python 3.x では動作が代わり、完全に実体化されたリストの代わりに、 :dfn:"
"`view` と呼ばれるオブジェクトを返すようになりました。"

#: ../../whatsnew/2.7.rst:554
msgid ""
"It's not possible to change the return values of :meth:`~dict.keys`, :meth:"
"`~dict.values`, and :meth:`~dict.items` in Python 2.7 because too much code "
"would break.  Instead the 3.x versions were added under the new names :meth:"
"`~dict.viewkeys`, :meth:`~dict.viewvalues`, and :meth:`~dict.viewitems`."
msgstr ""
"Python 2.7 では、 :meth:`~dict.keys`, :meth:`~dict.values`, :meth:`~dict."
"items` の動作を変えてしまうと、既存の大量のコードが動かなくなってしまうので、"
"Python 3.x と同じ動作に合わせることはできません。なので、 Python 3.x のメソッ"
"ドと同じ動作をするメソッドを、別の :meth:`~dict.viewkeys`, :meth:`~dict."
"viewvalues`, :meth:`~dict.viewitems` という名前で追加しました。"

#: ../../whatsnew/2.7.rst:568
msgid ""
"Views can be iterated over, but the key and item views also behave like "
"sets.  The ``&`` operator performs intersection, and ``|`` performs a union::"
msgstr ""
"View はイテレートするだけでなく、set と似た利用をすることもできます。``&`` 演"
"算子で共通部分集合を、``|`` 演算子で話集合を取ることができます。"

#: ../../whatsnew/2.7.rst:579
msgid ""
"The view keeps track of the dictionary and its contents change as the "
"dictionary is modified::"
msgstr "view は辞書とその辞書の変化に追随しています。::"

#: ../../whatsnew/2.7.rst:589
msgid ""
"However, note that you can't add or remove keys while you're iterating over "
"the view::"
msgstr ""
"ただし、view をイテレートしている間に key の追加や削除ができないことに気を付"
"けてください。::"

#: ../../whatsnew/2.7.rst:599
msgid ""
"You can use the view methods in Python 2.x code, and the 2to3 converter will "
"change them to the standard :meth:`~dict.keys`, :meth:`~dict.values`, and :"
"meth:`~dict.items` methods."
msgstr ""
"Python 2.x で view メソッドを利用すると、 2to3 が自動的にそれを通常の :meth:"
"`~dict.keys`, :meth:`~dict.values`, :meth:`~dict.items` メソッドに書き換えて"
"くれます。"

#: ../../whatsnew/2.7.rst:606
msgid ":pep:`3106` - Revamping dict.keys(), .values() and .items()"
msgstr ":pep:`3106` - Revamping dict.keys(), .values() and .items()"

#: ../../whatsnew/2.7.rst:606
msgid ""
"PEP written by Guido van Rossum. Backported to 2.7 by Alexandre Vassalotti; :"
"issue:`1967`."
msgstr ""
"PEP written by Guido van Rossum. Backported to 2.7 by Alexandre Vassalotti; :"
"issue:`1967`."

#: ../../whatsnew/2.7.rst:611
msgid "PEP 3137: The memoryview Object"
msgstr "PEP 3137: memoryview オブジェクト"

#: ../../whatsnew/2.7.rst:613
msgid ""
"The :class:`memoryview` object provides a view of another object's memory "
"content that matches the :class:`bytes` type's interface."
msgstr ""
":class:`memoryview` オブジェクトは、他のオブジェクトのメモリの内容に対する :"
"class:`bytes` 型のインタフェースに合わせた view を提供します。"

#: ../../whatsnew/2.7.rst:631
msgid ""
"The content of the view can be converted to a string of bytes or a list of "
"integers:"
msgstr "view の内容は bytes 型の文字列か整数のリストに変換することができます。"

#: ../../whatsnew/2.7.rst:643
msgid ""
":class:`memoryview` objects allow modifying the underlying object if it's a "
"mutable object."
msgstr ""
":class:`memoryview` オブジェクトは、対象となる背後のオブジェクトが変更可能 "
"(mutable) な場合は、その変更を許可しています。"

#: ../../whatsnew/2.7.rst:666
msgid ":pep:`3137` - Immutable Bytes and Mutable Buffer"
msgstr ":pep:`3137` - Immutable Bytes and Mutable Buffer"

#: ../../whatsnew/2.7.rst:665
msgid ""
"PEP written by Guido van Rossum. Implemented by Travis Oliphant, Antoine "
"Pitrou and others. Backported to 2.7 by Antoine Pitrou; :issue:`2396`."
msgstr ""
"PEP written by Guido van Rossum. Implemented by Travis Oliphant, Antoine "
"Pitrou and others. Backported to 2.7 by Antoine Pitrou; :issue:`2396`."

#: ../../whatsnew/2.7.rst:672
msgid "Other Language Changes"
msgstr "その他の言語変更"

#: ../../whatsnew/2.7.rst:674
msgid "Some smaller changes made to the core Python language are:"
msgstr "Python 言語コアに小さな変更がいくつか行われました:"

#: ../../whatsnew/2.7.rst:676
msgid ""
"The syntax for set literals has been backported from Python 3.x. Curly "
"brackets are used to surround the contents of the resulting mutable set; set "
"literals are distinguished from dictionaries by not containing colons and "
"values. ``{}`` continues to represent an empty dictionary; use ``set()`` for "
"an empty set."
msgstr ""
"set リテラルのためのシンタックスが Python 3.x からバックポートされました。内"
"容を波括弧で囲うと mutable set になります。dict リテラルとの区別は、コロンと "
"value が存在しないことで行われます。なので、``{}`` は引き続き空の dict になり"
"ます。空の set を作るときには ``set()`` を使ってください。"

#: ../../whatsnew/2.7.rst:693
msgid "Backported by Alexandre Vassalotti; :issue:`2335`."
msgstr "Backported by Alexandre Vassalotti; :issue:`2335`."

#: ../../whatsnew/2.7.rst:695
msgid ""
"Dictionary and set comprehensions are another feature backported from 3.x, "
"generalizing list/generator comprehensions to use the literal syntax for "
"sets and dictionaries."
msgstr ""
"dict と set の内包表記も Python 3.x からバックポートされました。list と "
"generator の内包表記を set と dict にも使えるように一般化させています。"

#: ../../whatsnew/2.7.rst:707
msgid "Backported by Alexandre Vassalotti; :issue:`2333`."
msgstr "Backported by Alexandre Vassalotti; :issue:`2333`."

#: ../../whatsnew/2.7.rst:709
msgid ""
"The :keyword:`with` statement can now use multiple context managers in one "
"statement.  Context managers are processed from left to right and each one "
"is treated as beginning a new :keyword:`!with` statement. This means that::"
msgstr ""
":keyword:`with` 文が1つの文で複数のコンテキストマネージャーを使えるようになり"
"ました。コンテキストマネージャーは左から右へ処理され、それぞれが新しい :"
"keyword:`!with` 文の開始となるように扱われます。つまり::"

#: ../../whatsnew/2.7.rst:717
msgid "is equivalent to::"
msgstr "は、以下と同じです ::"

#: ../../whatsnew/2.7.rst:723
msgid ""
"The :func:`contextlib.nested` function provides a very similar function, so "
"it's no longer necessary and has been deprecated."
msgstr ""
":func:`contextlib.nested` 関数は非常に似た機能を提供していたので、もう必要な"
"くなり廃止予定となりました。"

#: ../../whatsnew/2.7.rst:726
msgid ""
"(Proposed in https://codereview.appspot.com/53094; implemented by Georg "
"Brandl.)"
msgstr ""
"(Proposed in https://codereview.appspot.com/53094; implemented by Georg "
"Brandl.)"

#: ../../whatsnew/2.7.rst:729
msgid ""
"Conversions between floating-point numbers and strings are now correctly "
"rounded on most platforms.  These conversions occur in many different "
"places: :func:`str` on floats and complex numbers; the :class:`float` and :"
"class:`complex` constructors; numeric formatting; serializing and "
"deserializing floats and complex numbers using the :mod:`marshal`, :mod:"
"`pickle` and :mod:`json` modules; parsing of float and imaginary literals in "
"Python code; and :class:`~decimal.Decimal`-to-float conversion."
msgstr ""
"浮動小数点数と文字列の間の変換がほとんどのプラットフォームで正しく丸められる"
"ようになりました。この変換はいろいろな場面で発生します: float 型や complex 型"
"に対する :func:`str` 関数の適用、 :class:`float` や :class:`complex` コンスト"
"ラクタ、数値フォーマット、 :mod:`marshal`, :mod:`pickle`, :mod:`json` モ"
"ジュールを使ってのシリアライズとデシリアライズ、 Python コード中の float や "
"imaginary リテラルの解析、 :class:`~decimal.Decimal` から float への変換など"
"です。"

#: ../../whatsnew/2.7.rst:741
msgid ""
"Related to this, the :func:`repr` of a floating-point number *x* now returns "
"a result based on the shortest decimal string that's guaranteed to round "
"back to *x* under correct rounding (with round-half-to-even rounding mode).  "
"Previously it gave a string based on rounding x to 17 decimal digits."
msgstr ""
"これに関連して、浮動小数点数 *x* の :func:`repr` は、 (round-half-to-even 丸"
"めモードで)正しく丸め処理をした場合に元の *x* に戻せる最小の 10進文字列になり"
"ました。以前は *x* を17桁の10進文字列に丸めていました。"

#: ../../whatsnew/2.7.rst:749
msgid ""
"The rounding library responsible for this improvement works on Windows and "
"on Unix platforms using the gcc, icc, or suncc compilers.  There may be a "
"small number of platforms where correct operation of this code cannot be "
"guaranteed, so the code is not used on such systems.  You can find out which "
"code is being used by checking :data:`sys.float_repr_style`,  which will be "
"``short`` if the new code is in use and ``legacy`` if it isn't."
msgstr ""
"丸めライブラリが、この改善が Windows や gcc, icc, suncc を使った Unix 環境で"
"動かす役目をおっています。このライブラリの正確な動作が保証できない少しの環境"
"があるので、そういったシステムではこのライブラリは利用されません。 :data:"
"`sys.float_repr_style` が ``short`` なら新しいコードが利用されていて、 "
"``legacy`` なら利用されていません。"

#: ../../whatsnew/2.7.rst:757
msgid ""
"Implemented by Eric Smith and Mark Dickinson, using David Gay's :file:`dtoa."
"c` library; :issue:`7117`."
msgstr ""
"Implemented by Eric Smith and Mark Dickinson, using David Gay's :file:`dtoa."
"c` library; :issue:`7117`."

#: ../../whatsnew/2.7.rst:760
msgid ""
"Conversions from long integers and regular integers to floating point now "
"round differently, returning the floating-point number closest to the "
"number.  This doesn't matter for small integers that can be converted "
"exactly, but for large numbers that will unavoidably lose precision, Python "
"2.7 now approximates more closely.  For example, Python 2.6 computed the "
"following::"
msgstr ""
"多倍長整数や通常の整数から浮動小数点への変換でも丸め処理が変更され、元の数に"
"一番近い浮動小数点値が返されるようになりました。これは浮動小数点へ完全に変換"
"できる小さい整数では問題になりませんが、桁数に対して精度がどうしても足りない"
"場合に関係します。Python 2.7 はより正確に近似するようになりました。例えば、"
"Python 2.6 では次のように計算されていました::"

#: ../../whatsnew/2.7.rst:773
msgid ""
"Python 2.7's floating-point result is larger, but much closer to the true "
"value::"
msgstr ""
"Python 2.7 の浮動小数点への変換結果は元の数値より大きくなりますが、元の値によ"
"り近くなっています::"

#: ../../whatsnew/2.7.rst:782
msgid "(Implemented by Mark Dickinson; :issue:`3166`.)"
msgstr "(Implemented by Mark Dickinson; :issue:`3166`.)"

#: ../../whatsnew/2.7.rst:784
msgid ""
"Integer division is also more accurate in its rounding behaviours.  (Also "
"implemented by Mark Dickinson; :issue:`1811`.)"
msgstr ""
"この丸めの動作により、整数同士の true division (``from __future__ import "
"division``) の結果もより正確になりました。 (Also implemented by Mark "
"Dickinson; :issue:`1811`.)"

#: ../../whatsnew/2.7.rst:787
msgid ""
"Implicit coercion for complex numbers has been removed; the interpreter will "
"no longer ever attempt to call a :meth:`__coerce__` method on complex "
"objects.  (Removed by Meador Inge and Mark Dickinson; :issue:`5211`.)"
msgstr ""
"複素数に対する暗黙の型強制は削除されました。インタプリタは complex オブジェク"
"トに対して :meth:`__coerce__` メソッドを呼び出そうとしません。 (Removed by "
"Meador Inge and Mark Dickinson; :issue:`5211`.)"

#: ../../whatsnew/2.7.rst:791
msgid ""
"The :meth:`str.format` method now supports automatic numbering of the "
"replacement fields.  This makes using :meth:`str.format` more closely "
"resemble using ``%s`` formatting::"
msgstr ""
":meth:`str.format` メソッドは置換フィールドに対する自動ナンバリングをサポート"
"するようになりました。これにより :meth:`str.format` をより ``%s`` と同じよう"
"に使えるようになりました。 ::"

#: ../../whatsnew/2.7.rst:800
msgid ""
"The auto-numbering takes the fields from left to right, so the first ``{...}"
"`` specifier will use the first argument to :meth:`str.format`, the next "
"specifier will use the next argument, and so on.  You can't mix auto-"
"numbering and explicit numbering -- either number all of your specifier "
"fields or none of them -- but you can mix auto-numbering and named fields, "
"as in the second example above.  (Contributed by Eric Smith; :issue:`5237`.)"
msgstr ""
"自動ナンバリングは左のフィールドから右のフィールドへと行われるので、最初の "
"``{...}`` 指定は :meth:`str.format` メソッドの最初の引数を利用し、次の指定は"
"次の引数を利用します。自動ナンバリングと明示的なナンバリングを混ぜて使うこと"
"はできず、全ての置換指定に手動でナンバリングするか、全てを自動ナンバリングに"
"任せなければなりません。ただし、上の例の2つめのように、自動ナンバリングと名前"
"フィールドを混ぜて使うことは可能です。 (Contributed by Eric Smith; :issue:"
"`5237`.)"

#: ../../whatsnew/2.7.rst:807
msgid ""
"Complex numbers now correctly support usage with :func:`format`, and default "
"to being right-aligned. Specifying a precision or comma-separation applies "
"to both the real and imaginary parts of the number, but a specified field "
"width and alignment is applied to the whole of the resulting ``1.5+3j`` "
"output.  (Contributed by Eric Smith; :issue:`1588` and :issue:`7988`.)"
msgstr ""
"複素数が :func:`format` をサポートするようになりました。デフォルトでは右寄せ"
"になります。精度やカンマ区切りの指定は、実部と虚部のそれぞれに対して適用され"
"ます。アラインの指定は ``1.5+3j`` のような複素数全体に対して適用されます。 "
"(Contributed by Eric Smith; :issue:`1588` and :issue:`7988`.)"

#: ../../whatsnew/2.7.rst:814
msgid ""
"The 'F' format code now always formats its output using uppercase "
"characters, so it will now produce 'INF' and 'NAN'. (Contributed by Eric "
"Smith; :issue:`3382`.)"
msgstr ""
"'F' 書式符号は常に大文字を使って出力するようになり、 'INF' や 'NAN' が出力さ"
"れるようになりました。 (Contributed by Eric Smith; :issue:`3382`.)"

#: ../../whatsnew/2.7.rst:818
msgid ""
"A low-level change: the :meth:`object.__format__` method now triggers a :exc:"
"`PendingDeprecationWarning` if it's passed a format string, because the :"
"meth:`__format__` method for :class:`object` converts the object to a string "
"representation and formats that.  Previously the method silently applied the "
"format string to the string representation, but that could hide mistakes in "
"Python code.  If you're supplying formatting information such as an "
"alignment or precision, presumably you're expecting the formatting to be "
"applied in some object-specific way.  (Fixed by Eric Smith; :issue:`7994`.)"
msgstr ""
"低レベルな変更: :meth:`object.__format__` メソッドは :exc:"
"`PendingDeprecationWarning` を発生させるようになりました。 :class:`object` に"
"対する :meth:`__format__` メソッドはオブジェクトを文字列表現に変換してそれを"
"フォーマットするからです。以前は、このメソッドは書式文字列を受け取り文字列表"
"現を返していましたが、この仕様は Python コードのミスを隠してしまう可能性があ"
"りました。アライメントや精度のようなフォーマット指定情報を渡した時、そのなに"
"かそのオブジェクトに合ったフォーマットがあることを期待しているはずなのに、 :"
"meth:`object.__format__` メソッドはそれを無視します。 (Fixed by Eric Smith; :"
"issue:`7994`.)"

#: ../../whatsnew/2.7.rst:828
msgid ""
"The :func:`int` and :func:`long` types gained a ``bit_length`` method that "
"returns the number of bits necessary to represent its argument in binary::"
msgstr ""
":func:`int` と :func:`long` 型に ``bit_length`` メソッドが追加されました。こ"
"のメソッドはその値を2進数で表現したときに何ビット必要になるかを返します::"

#: ../../whatsnew/2.7.rst:843
msgid "(Contributed by Fredrik Johansson and Victor Stinner; :issue:`3439`.)"
msgstr "(Contributed by Fredrik Johansson and Victor Stinner; :issue:`3439`.)"

#: ../../whatsnew/2.7.rst:845
msgid ""
"The :keyword:`import` statement will no longer try an absolute import if a "
"relative import (e.g. ``from .os import sep``) fails.  This fixes a bug, but "
"could possibly break certain :keyword:`!import` statements that were only "
"working by accident.  (Fixed by Meador Inge; :issue:`7902`.)"
msgstr ""
":keyword:`import` 文が、絶対インポート (例: ``from .os import sep``)が失敗し"
"たときに相対インポートを試さなくなりました。これはバグ修正ですが、いままでた"
"またま動いていただけの :keyword:`!import`  文を動かなくしてしまう可能性があり"
"ます。(Fixed by Meador Inge; :issue:`7902`.)"

#: ../../whatsnew/2.7.rst:851
msgid ""
"It's now possible for a subclass of the built-in :class:`unicode` type to "
"override the :meth:`__unicode__` method.  (Implemented by Victor Stinner; :"
"issue:`1583863`.)"
msgstr ""
"ビルトインの :class:`unicode` 型のサブクラスが :meth:`__unicode__` メソッドを"
"オーバーライドできるようになりました。(Implemented by Victor Stinner; :issue:"
"`1583863`.)"

#: ../../whatsnew/2.7.rst:855
msgid ""
"The :class:`bytearray` type's :meth:`~bytearray.translate` method now "
"accepts ``None`` as its first argument.  (Fixed by Georg Brandl; :issue:"
"`4759`.)"
msgstr ""
":class:`bytearray` 型の :meth:`~bytearray.translate` メソッドが第一引数に "
"``None`` を受け入れるようになりました。 (Fixed by Georg Brandl; :issue:"
"`4759`.)"

#: ../../whatsnew/2.7.rst:861
msgid ""
"When using ``@classmethod`` and ``@staticmethod`` to wrap methods as class "
"or static methods, the wrapper object now exposes the wrapped function as "
"their :attr:`__func__` attribute. (Contributed by Amaury Forgeot d'Arc, "
"after a suggestion by George Sakkis; :issue:`5982`.)"
msgstr ""
"``@classmethod`` や ``@staticmethod`` を使ってクラスメソッドやスタティックメ"
"ソッドを作成した時、そのラッパーオブジェクトがラップ対象となる関数を :attr:"
"`__func__` 属性で公開するようになりました。(Contributed by Amaury Forgeot "
"d'Arc, after a suggestion by George Sakkis; :issue:`5982`.)"

#: ../../whatsnew/2.7.rst:867 ../../whatsnew/2.7.rst:2462
msgid ""
"When a restricted set of attributes were set using ``__slots__``, deleting "
"an unset attribute would not raise :exc:`AttributeError` as you would "
"expect.  Fixed by Benjamin Peterson; :issue:`7604`.)"
msgstr ""
"``__slots__`` を利用して属性を制限した場合に、設定されていない属性を del した"
"ときに :exc:`AttributeError` にならなかったのを修正しました。 (Fixed by "
"Benjamin Peterson; :issue:`7604`.)"

#: ../../whatsnew/2.7.rst:871
msgid ""
"Two new encodings are now supported: \"cp720\", used primarily for Arabic "
"text; and \"cp858\", a variant of CP 850 that adds the euro symbol.  (CP720 "
"contributed by Alexander Belchenko and Amaury Forgeot d'Arc in :issue:"
"`1616979`; CP858 contributed by Tim Hatch in :issue:`8016`.)"
msgstr ""
"2つの新しいエンコーディングが追加されました: \"cp720\" は主にアラビア文字に使"
"われます。 \"cp858\" は cp850 の一種ですが、ユーロ記号を追加しています。 "
"(CP720 contributed by Alexander Belchenko and Amaury Forgeot d'Arc in :issue:"
"`1616979`; CP858 contributed by Tim Hatch in :issue:`8016`.)"

#: ../../whatsnew/2.7.rst:877
msgid ""
"The :class:`file` object will now set the :attr:`filename` attribute on the :"
"exc:`IOError` exception when trying to open a directory on POSIX platforms "
"(noted by Jan Kaliszewski; :issue:`4764`), and now explicitly checks for and "
"forbids writing to read-only file objects instead of trusting the C library "
"to catch and report the error (fixed by Stefan Krah; :issue:`5677`)."
msgstr ""
":class:`file` オブジェクトは、POSIX環境に置いてディレクトリを開こうとした時に"
"発生する :exc:`IOError` 例外に :attr:`filename` 属性を設定するようになりまし"
"た。 (noted by Jan Kaliszewski; :issue:`4764`) また、読み出し専用のファイルに"
"対する書き込みを、Cライブラリ側のエラー検出・報告に頼るのではなく、明示的に"
"チェックするようになりました。 (fixed by Stefan Krah; :issue:`5677`)."

#: ../../whatsnew/2.7.rst:884
msgid ""
"The Python tokenizer now translates line endings itself, so the :func:"
"`compile` built-in function now accepts code using any line-ending "
"convention.  Additionally, it no longer requires that the code end in a "
"newline."
msgstr ""
"Python の字句解析機は改行をそれ自身に変換するようになりました。それにより、組"
"み込みの :func:`compile` 関数がどの改行コードを利用したコードでも受け付けるよ"
"うになりました。また、コードの終端の改行も不要になりました。"

#: ../../whatsnew/2.7.rst:889
msgid ""
"Extra parentheses in function definitions are illegal in Python 3.x, meaning "
"that you get a syntax error from ``def f((x)): pass``.  In Python3-warning "
"mode, Python 2.7 will now warn about this odd usage. (Noted by James "
"Lingard; :issue:`7362`.)"
msgstr ""
"関数宣言中の余分な丸括弧は Python 3.x では不正になりました。つまり、 ``def "
"f((x)): pass`` はsyntax errorになります。 Python3 警告モードでは、 Python "
"2.7 はこの利用方法について警告を出すようになりました。 (Noted by James "
"Lingard; :issue:`7362`.)"

#: ../../whatsnew/2.7.rst:894
msgid ""
"It's now possible to create weak references to old-style class objects.  New-"
"style classes were always weak-referenceable.  (Fixed by Antoine Pitrou; :"
"issue:`8268`.)"
msgstr ""
"古いスタイルのクラスのオブジェクトに対して弱参照を作れるようになりました。新"
"スタイルクラスには以前から弱参照を利用できます。(Fixed by Antoine Pitrou; :"
"issue:`8268`.)"

#: ../../whatsnew/2.7.rst:898
msgid ""
"When a module object is garbage-collected, the module's dictionary is now "
"only cleared if no one else is holding a reference to the dictionary (:issue:"
"`7140`)."
msgstr ""
"モジュールオブジェクトがGCされたとき、モジュールの辞書は、他にその辞書への参"
"照を持っているものがない場合にのみクリアされるようになりました。(:issue:"
"`7140`)."

#: ../../whatsnew/2.7.rst:907
msgid "Interpreter Changes"
msgstr "インタプリタの変更"

#: ../../whatsnew/2.7.rst:909
msgid ""
"A new environment variable, :envvar:`PYTHONWARNINGS`, allows controlling "
"warnings.  It should be set to a string containing warning settings, "
"equivalent to those used with the :option:`-W` switch, separated by commas. "
"(Contributed by Brian Curtin; :issue:`7301`.)"
msgstr ""
"新しい環境変数 :envvar:`PYTHONWARNINGS` を使って警告を制御できるようになりま"
"した。この環境変数には、 :option:`-W` スイッチに使われる警告の設定を、カンマ"
"区切りの文字列として指定します。 (Contributed by Brian Curtin; :issue:"
"`7301`.)"

#: ../../whatsnew/2.7.rst:915
msgid ""
"For example, the following setting will print warnings every time they "
"occur, but turn warnings from the :mod:`Cookie` module into an error.  (The "
"exact syntax for setting an environment variable varies across operating "
"systems and shells.)"
msgstr ""
"例えば、以下の設定は警告が発生するたびにそれを表示しますが、 :mod:`Cookie` モ"
"ジュールからの警告はエラーにします。 (環境変数を設定するための文法はOSとシェ"
"ルに依存します)"

#: ../../whatsnew/2.7.rst:928
msgid "Optimizations"
msgstr "最適化"

#: ../../whatsnew/2.7.rst:930
msgid "Several performance enhancements have been added:"
msgstr "いくつかの場面でパフォーマンスが向上しています。"

#: ../../whatsnew/2.7.rst:932
msgid ""
"A new opcode was added to perform the initial setup for :keyword:`with` "
"statements, looking up the :meth:`__enter__` and :meth:`__exit__` methods.  "
"(Contributed by Benjamin Peterson.)"
msgstr ""
":keyword:`with` 文の初期セットアップを行うための新しいオペコードが追加されま"
"した。 :meth:`__enter__` と :meth:`__exit__` メソッドの検索を行います。 "
"(Contributed by Benjamin Peterson.)"

#: ../../whatsnew/2.7.rst:936
msgid ""
"The garbage collector now performs better for one common usage pattern: when "
"many objects are being allocated without deallocating any of them.  This "
"would previously take quadratic time for garbage collection, but now the "
"number of full garbage collections is reduced as the number of objects on "
"the heap grows. The new logic only performs a full garbage collection pass "
"when the middle generation has been collected 10 times and when the number "
"of survivor objects from the middle generation exceeds 10% of the number of "
"objects in the oldest generation.  (Suggested by Martin von Löwis and "
"implemented by Antoine Pitrou; :issue:`4074`.)"
msgstr ""
"たくさんのオブジェクトを開放せずに確保していくという、よくある使い方の 1つに"
"おいて、GCのパフォーマンスが向上しました。以前はこの場合にGCにかかる時間はオ"
"ブジェクトの数の2乗に比例していました。現在はフルGCの数は増えたヒープ上のオブ"
"ジェクトの数に比例しています。新しい方式では、3世代中2世代目に対するGCが10回"
"実行されたうえで、 2世代目から3世代目に移ったオブジェクトの数が3世代目のオブ"
"ジェクトの数の 10%を超えたときにフルGCが発生します。(Suggested by Martin von "
"Löwis and implemented by Antoine Pitrou; :issue:`4074`.)"

#: ../../whatsnew/2.7.rst:947
msgid ""
"The garbage collector tries to avoid tracking simple containers which can't "
"be part of a cycle. In Python 2.7, this is now true for tuples and dicts "
"containing atomic types (such as ints, strings, etc.). Transitively, a dict "
"containing tuples of atomic types won't be tracked either. This helps reduce "
"the cost of each garbage collection by decreasing the number of objects to "
"be considered and traversed by the collector. (Contributed by Antoine "
"Pitrou; :issue:`4688`.)"
msgstr ""
"GCが循環参照になりえないシンプルなコンテナ型の追跡を避けるようになりました。 "
"Python 2.7 では、アトミックな型(整数、文字列など)のみを含むタプルと辞書は追跡"
"されません。推移的に、アトミックな型のみを含むタプルを含む辞書も、同じく追跡"
"されません。これにより、GCによって巡回されチェックされるオブジェクトの数が減"
"るので、 GCのコストを減らすことができます。 (Contributed by Antoine Pitrou; :"
"issue:`4688`.)"

#: ../../whatsnew/2.7.rst:956
msgid ""
"Long integers are now stored internally either in base 2**15 or in base "
"2**30, the base being determined at build time.  Previously, they were "
"always stored in base 2**15.  Using base 2**30 gives significant performance "
"improvements on 64-bit machines, but benchmark results on 32-bit machines "
"have been mixed.  Therefore, the default is to use base 2**30 on 64-bit "
"machines and base 2**15 on 32-bit machines; on Unix, there's a new configure "
"option :option:`!--enable-big-digits` that can be used to override this "
"default."
msgstr ""
"多倍長整数の内部格納方式が、 2**15 ベースと 2**30 ベースのどちらかをビルド時"
"に選択するようになりました。以前は常に 2**15 ベースで格納していました。 "
"2**30 ベースにすると 64bit マシンに置いては確実にパフォーマンスが向上します"
"が、 32bit マシンではパフォーマンスが向上する場合も低下する場合もあります。な"
"ので、デフォルトでは 64bit マシンでは 2**30 ベースで、 32bit マシンでは "
"2**15 ベースになるようになります。 Unix では新しい configure オプションとし"
"て :option:`!--enable-big-digits` が追加され、このデフォルトの選択をオーバー"
"ライドできるようになっています。"

#: ../../whatsnew/2.7.rst:965
msgid ""
"Apart from the performance improvements this change should be invisible to "
"end users, with one exception: for testing and debugging purposes there's a "
"new structseq :data:`sys.long_info` that provides information about the "
"internal format, giving the number of bits per digit and the size in bytes "
"of the C type used to store each digit::"
msgstr ""
"この変更はパフォーマンスの向上以外の形ではユーザーに見えないはずですが、 1つ"
"だけ例外があります。テストとデバッグを目的として、 :data:`sys.long_info` とい"
"うデータが追加され、内部フォーマットとして digit あたりのビット数と、それに使"
"うCのデータ型のバイト数の情報を提供します::"

#: ../../whatsnew/2.7.rst:976
msgid "(Contributed by Mark Dickinson; :issue:`4258`.)"
msgstr "(Contributed by Mark Dickinson; :issue:`4258`.)"

#: ../../whatsnew/2.7.rst:978
msgid ""
"Another set of changes made long objects a few bytes smaller: 2 bytes "
"smaller on 32-bit systems and 6 bytes on 64-bit. (Contributed by Mark "
"Dickinson; :issue:`5260`.)"
msgstr ""
"その他の変更により、多倍長整数オブジェクトのサイズは数バイト小さくなりまし"
"た。 32bit システムでは 2byte, 64bit システムでは 6byte 小さくなりました。 "
"(Contributed by Mark Dickinson; :issue:`5260`.)"

#: ../../whatsnew/2.7.rst:982
msgid ""
"The division algorithm for long integers has been made faster by tightening "
"the inner loop, doing shifts instead of multiplications, and fixing an "
"unnecessary extra iteration. Various benchmarks show speedups of between 50% "
"and 150% for long integer divisions and modulo operations. (Contributed by "
"Mark Dickinson; :issue:`5512`.) Bitwise operations are also significantly "
"faster (initial patch by Gregory Smith; :issue:`1087418`)."
msgstr ""
"多倍長整数の除算アルゴリズムが、内部のループの軽量化や乗算からシフト演算への"
"置き換え、不要なイテレーションの削除により高速化されました。いくつかのベンチ"
"マークによると、多倍長整数の剰余演算は 50% から 150% 高速化されています。 "
"(Contributed by Mark Dickinson; :issue:`5512`.) ビット演算も高速化されていま"
"す。(initial patch by Gregory Smith; :issue:`1087418`)"

#: ../../whatsnew/2.7.rst:991
msgid ""
"The implementation of ``%`` checks for the left-side operand being a Python "
"string and special-cases it; this results in a 1--3% performance increase "
"for applications that frequently use ``%`` with strings, such as templating "
"libraries. (Implemented by Collin Winter; :issue:`5176`.)"
msgstr ""
"``%`` の実装が、左側のオペランドが文字列型かどうかをチェックしてその場合の処"
"理を特殊化しました。これにより文字列に対して ``%`` を頻繁に使う、テンプレート"
"ライブラリなどのアプリケーションのパフォーマンスが1--3%向上します。 "
"(Implemented by Collin Winter; :issue:`5176`.)"

#: ../../whatsnew/2.7.rst:997
msgid ""
"List comprehensions with an ``if`` condition are compiled into faster "
"bytecode.  (Patch by Antoine Pitrou, back-ported to 2.7 by Jeffrey Yasskin; :"
"issue:`4715`.)"
msgstr ""
"``if`` 条件付きのリスト内包表記がより高速なバイトコードにコンパイルされるよう"
"になりました。(Patch by Antoine Pitrou, back-ported to 2.7 by Jeffrey "
"Yasskin; :issue:`4715`.)"

#: ../../whatsnew/2.7.rst:1001
msgid ""
"Converting an integer or long integer to a decimal string was made faster by "
"special-casing base 10 instead of using a generalized conversion function "
"that supports arbitrary bases. (Patch by Gawain Bolton; :issue:`6713`.)"
msgstr ""
"整数や多倍長整数から10進文字列への変換を、任意の基数をサポートした汎用の変換"
"関数を使う代わりに10進数に特殊化した処理を行うことで高速化しました。 (Patch "
"by Gawain Bolton; :issue:`6713`.)"

#: ../../whatsnew/2.7.rst:1006
msgid ""
"The :meth:`split`, :meth:`replace`, :meth:`rindex`, :meth:`rpartition`, and :"
"meth:`rsplit` methods of string-like types (strings, Unicode strings, and :"
"class:`bytearray` objects) now use a fast reverse-search algorithm instead "
"of a character-by-character scan.  This is sometimes faster by a factor of "
"10.  (Added by Florent Xicluna; :issue:`7462` and :issue:`7622`.)"
msgstr ""
"文字列等(str, unicode, :class:`bytearray`) の :meth:`split`, :meth:"
"`replace`, :meth:`rindex`, :meth:`rpartition`, :meth:`rsplit` メソッドが、1文"
"字ずつのスキャンの代わりに高速な逆方向スキャンアルゴリズムを使うようになりま"
"した。これにより、場合によっては10倍レベルの高速化になります。(Added by "
"Florent Xicluna; :issue:`7462` and :issue:`7622`.)"

#: ../../whatsnew/2.7.rst:1013
msgid ""
"The :mod:`pickle` and :mod:`cPickle` modules now automatically intern the "
"strings used for attribute names, reducing memory usage of the objects "
"resulting from unpickling.  (Contributed by Jake McGuire; :issue:`5084`.)"
msgstr ""
":mod:`pickle` と :mod:`cPickle` モジュールが、属性名に使われている文字列を自"
"動的にインターンするようになりました。これにより unpickle 後のオブジェクトの"
"メモリ使用量が減ります。(Contributed by Jake McGuire; :issue:`5084`.)"

#: ../../whatsnew/2.7.rst:1018
msgid ""
"The :mod:`cPickle` module now special-cases dictionaries, nearly halving the "
"time required to pickle them. (Contributed by Collin Winter; :issue:`5670`.)"
msgstr ""
":mod:`cPickle` モジュールが辞書に対する特殊化を行い、 pickle にかかる時間をお"
"よそ半分に減らしました。 (Contributed by Collin Winter; :issue:`5670`.)"

#: ../../whatsnew/2.7.rst:1025
msgid "New and Improved Modules"
msgstr "新しいモジュールと改良されたモジュール"

#: ../../whatsnew/2.7.rst:1027
msgid ""
"As in every release, Python's standard library received a number of "
"enhancements and bug fixes.  Here's a partial list of the most notable "
"changes, sorted alphabetically by module name. Consult the :file:`Misc/NEWS` "
"file in the source tree for a more complete list of changes, or look through "
"the Subversion logs for all the details."
msgstr ""
"全てのリリースに置いて、 Python の標準ライブラリはたくさんの改良とバグ修正が"
"されてきました。ここでは一部の注目に値する変更を、モジュール名で辞書順ソート"
"してリストアップしています。もっと完全な変更リストが見たければ、ソースツリー"
"内の :file:`Misc/NEWS` ファイルか、全ての完全な詳細が入っている Subversion の"
"ログを参照してください。"

#: ../../whatsnew/2.7.rst:1033
msgid ""
"The :mod:`bdb` module's base debugging class :class:`~bdb.Bdb` gained a "
"feature for skipping modules.  The constructor now takes an iterable "
"containing glob-style patterns such as ``django.*``; the debugger will not "
"step into stack frames from a module that matches one of these patterns. "
"(Contributed by Maru Newby after a suggestion by Senthil Kumaran; :issue:"
"`5142`.)"
msgstr ""
":mod:`bdb` モジュールの基底デバッガクラス :class:`~bdb.Bdb` に、モジュールを"
"スキップする機能が追加されました。コンストラクタは ``django.*`` のような "
"glob スタイルのパターンをもった iterable を引数として受け取ります。デバッガは"
"パターンのどれかにマッチするスタックフレームにステップインしません。 "
"(Contributed by Maru Newby after a suggestion by Senthil Kumaran; :issue:"
"`5142`.)"

#: ../../whatsnew/2.7.rst:1041
msgid ""
"The :mod:`binascii` module now supports the buffer API, so it can be used "
"with :class:`memoryview` instances and other similar buffer objects. "
"(Backported from 3.x by Florent Xicluna; :issue:`7703`.)"
msgstr ""
":mod:`binascii` モジュールが buffer API をサポートするようになり、 :class:"
"`memoryview` インスタンスやその他のバッファオブジェクトともに利用できるように"
"なりました。 (Backported from 3.x by Florent Xicluna; :issue:`7703`.)"

#: ../../whatsnew/2.7.rst:1045
msgid ""
"Updated module: the :mod:`bsddb` module has been updated from 4.7.2devel9 to "
"version 4.8.4 of `the pybsddb package <https://www.jcea.es/programacion/"
"pybsddb.htm>`__. The new version features better Python 3.x compatibility, "
"various bug fixes, and adds several new BerkeleyDB flags and methods. "
"(Updated by Jesús Cea Avión; :issue:`8156`.  The pybsddb changelog can be "
"read at http://hg.jcea.es/pybsddb/file/tip/ChangeLog.)"
msgstr ""
":mod:`bsddb` モジュールが `pybsddb パッケージ <https://www.jcea.es/"
"programacion/pybsddb.htm>`__ の 4.7.2devel9 から 4.8.4 に更新されました。新し"
"いバージョンはより Python 3.x との互換性がよくなり、いくつかのバグ修正と、い"
"くつかの新しい BerkeleyDB のフラグとメソッドが追加されています。 (Updated by "
"Jesús Cea Avión; :issue:`8156`.  The pybsddb changelog can be read at http://"
"hg.jcea.es/pybsddb/file/tip/ChangeLog.)"

#: ../../whatsnew/2.7.rst:1053
msgid ""
"The :mod:`bz2` module's :class:`~bz2.BZ2File` now supports the context "
"management protocol, so you can write ``with bz2.BZ2File(...) as f:``. "
"(Contributed by Hagen Fürstenau; :issue:`3860`.)"
msgstr ""
":mod:`bz2` モジュールの :class:`~bz2.BZ2File` がコンテキストマネージャープロ"
"トコルをサポートするようになりました。これにより、 ``with bz2.BZ2File(...) "
"as f:`` といった書き方ができます。 (Contributed by Hagen Fürstenau; :issue:"
"`3860`.)"

#: ../../whatsnew/2.7.rst:1057
msgid ""
"New class: the :class:`~collections.Counter` class in the :mod:`collections` "
"module is useful for tallying data.  :class:`~collections.Counter` instances "
"behave mostly like dictionaries but return zero for missing keys instead of "
"raising a :exc:`KeyError`:"
msgstr ""
":mod:`collections` モジュールの新しい :class:`~collections.Counter` クラス"
"は、データの数え上げをするときに便利です。 :class:`~collections.Counter` イン"
"スタンスは辞書のように振る舞いますが、キーが存在しなかったときに :exc:"
"`KeyError` 例外を発生させる代わりに 0 を返します。"

#: ../../whatsnew/2.7.rst:1079
msgid ""
"There are three additional :class:`~collections.Counter` methods. :meth:"
"`~collections.Counter.most_common` returns the N most common elements and "
"their counts.  :meth:`~collections.Counter.elements` returns an iterator "
"over the contained elements, repeating each element as many times as its "
"count. :meth:`~collections.Counter.subtract` takes an iterable and subtracts "
"one for each element instead of adding; if the argument is a dictionary or "
"another :class:`Counter`, the counts are subtracted. ::"
msgstr ""
":class:`~collections.Counter` には追加の3つのメソッドがあります。 :meth:"
"`~collections.Counter.most_common` はカウントが最も多い N 要素とそのカウント"
"を返します。 :meth:`~collections.Counter.elements` はカウントしている要素を、"
"そのカウント数だけ繰り返すイテレータを返します。 :meth:`~collections.Counter."
"subtract` はイテレート可能型を受け取り、その各要素を足すのではなく引いて行き"
"ます。引数が辞書か他の :class:`Counter` だった場合は、そのカウントが引かれま"
"す。 ::"

#: ../../whatsnew/2.7.rst:1102
msgid "Contributed by Raymond Hettinger; :issue:`1696199`."
msgstr "Contributed by Raymond Hettinger; :issue:`1696199`."

#: ../../whatsnew/2.7.rst:1106
msgid ""
"New class: :class:`~collections.OrderedDict` is described in the earlier "
"section :ref:`pep-0372`."
msgstr ""
"新しいクラス :class:`~collections.OrderedDict` はすでに :ref:`pep-0372` で紹"
"介しました。"

#: ../../whatsnew/2.7.rst:1109
msgid ""
"New method: The :class:`~collections.deque` data type now has a :meth:"
"`~collections.deque.count` method that returns the number of contained "
"elements equal to the supplied argument *x*, and a :meth:`~collections.deque."
"reverse` method that reverses the elements of the deque in-place.  :class:"
"`~collections.deque` also exposes its maximum length as the read-only :attr:"
"`~collections.deque.maxlen` attribute. (Both features added by Raymond "
"Hettinger.)"
msgstr ""
"メソッドが追加されました。:class:`~collections.deque`  データ型の :meth:"
"`~collections.deque.count`  メソッドは、引数で指定された *x* と等しい要素が何"
"個入っているかを返します。 :meth:`~collections.deque.reverse` メソッドは "
"deque 内の要素をインプレースで逆順にします。 :class:`~collections.deque` はま"
"た、最大長を返す読み出し専用の属性 :attr:`~collections.deque.maxlen` を持ちま"
"す。 (Both features added by Raymond Hettinger.)"

#: ../../whatsnew/2.7.rst:1117
msgid ""
"The :class:`~collections.namedtuple` class now has an optional *rename* "
"parameter. If *rename* is true, field names that are invalid because they've "
"been repeated or aren't legal Python identifiers will be renamed to legal "
"names that are derived from the field's position within the list of fields:"
msgstr ""
":class:`~collections.namedtuple` クラスにオプションの *rename* 引数が追加され"
"ました。 *rename* が真のとき、複数回現れたり Python の識別子として許可されな"
"いために無効なフィールド名があったとき、フィールドのリスト内での場所に基づく"
"有効なフィールド名に置き換えられます。 ::"

#: ../../whatsnew/2.7.rst:1128
msgid "(Added by Raymond Hettinger; :issue:`1818`.)"
msgstr "(Added by Raymond Hettinger; :issue:`1818`.)"

#: ../../whatsnew/2.7.rst:1130
msgid ""
"Finally, the :class:`~collections.Mapping` abstract base class now returns :"
"const:`NotImplemented` if a mapping is compared to another type that isn't "
"a :class:`Mapping`. (Fixed by Daniel Stutzbach; :issue:`8729`.)"
msgstr ""
":class:`~collections.Mapping` 抽象基底クラスが、他の :class:`Mapping` でない"
"型と比較されたときに :const:`NotImplemented` を返すようになりました。(Fixed "
"by Daniel Stutzbach; :issue:`8729`.)"

#: ../../whatsnew/2.7.rst:1135
msgid ""
"Constructors for the parsing classes in the :mod:`ConfigParser` module now "
"take an *allow_no_value* parameter, defaulting to false; if true, options "
"without values will be allowed.  For example::"
msgstr ""
":mod:`ConfigParser` モジュールのパーサークラスのコンストラクタが "
"*allow_no_value* 引数を受け取るようになりました。これはデフォルトでは False "
"です。真の場合、値のないオプションが利用できるようになります。例えば::"

#: ../../whatsnew/2.7.rst:1157
msgid "(Contributed by Mats Kindahl; :issue:`7005`.)"
msgstr "(Contributed by Mats Kindahl; :issue:`7005`.)"

#: ../../whatsnew/2.7.rst:1159
msgid ""
"Deprecated function: :func:`contextlib.nested`, which allows handling more "
"than one context manager with a single :keyword:`with` statement, has been "
"deprecated, because the :keyword:`!with` statement now supports multiple "
"context managers."
msgstr ""
":func:`contextlib.nested` 関数が廃止予定になりました。これは1つの :keyword:"
"`with` 文で1つ以上のコンテキストマネージャーを扱うためのものでしたが、 :"
"keyword:`!with` 文が複数のコンテキストマネージャーをサポートするようになりま"
"した。"

#: ../../whatsnew/2.7.rst:1164
msgid ""
"The :mod:`cookielib` module now ignores cookies that have an invalid version "
"field, one that doesn't contain an integer value.  (Fixed by John J. Lee; :"
"issue:`3924`.)"
msgstr ""
":mod:`cookielib` モジュールが不正な、値が整数値ではないバージョンフィールドを"
"持つ cookie を無視するようになりました。(Fixed by John J. Lee; :issue:"
"`3924`.)"

#: ../../whatsnew/2.7.rst:1168
msgid ""
"The :mod:`copy` module's :func:`~copy.deepcopy` function will now correctly "
"copy bound instance methods.  (Implemented by Robert Collins; :issue:`1515`.)"
msgstr ""
":mod:`copy` モジュールの :func:`~copy.deepcopy` 関数が、束縛ずみインスタンス"
"メソッドを正しくコピーするようになりました。(Implemented by Robert Collins; :"
"issue:`1515`.)"

#: ../../whatsnew/2.7.rst:1172
msgid ""
"The :mod:`ctypes` module now always converts ``None`` to a C ``NULL`` "
"pointer for arguments declared as pointers.  (Changed by Thomas Heller; :"
"issue:`4606`.)  The underlying `libffi library <https://sourceware.org/"
"libffi/>`__ has been updated to version 3.0.9, containing various fixes for "
"different platforms.  (Updated by Matthias Klose; :issue:`8142`.)"
msgstr ""
":mod:`ctypes` モジュールが、ポインタとして宣言された引数に対して ``None`` が"
"渡された場合常に C の ``NULL`` ポインタに変換するようになりました。(Changed "
"by Thomas Heller; :issue:`4606`.) 基盤となっている `libffi ライブラリ "
"<https://sourceware.org/libffi/>`__ が 3.0.9 にアップデートされ、いくつかのプ"
"ラットフォームにおけるいろいろな問題が修正されました。(Updated by Matthias "
"Klose; :issue:`8142`.)"

#: ../../whatsnew/2.7.rst:1179
msgid ""
"New method: the :mod:`datetime` module's :class:`~datetime.timedelta` class "
"gained a :meth:`~datetime.timedelta.total_seconds` method that returns the "
"number of seconds in the duration.  (Contributed by Brian Quinlan; :issue:"
"`5788`.)"
msgstr ""
"新しいメソッド: :mod:`datetime` モジュールの :class:`~datetime.timedelta` ク"
"ラスに :meth:`~datetime.timedelta.total_seconds` メソッドが追加されました。こ"
"れはその期間の秒数を返します。(Contributed by Brian Quinlan; :issue:`5788`.)"

#: ../../whatsnew/2.7.rst:1183
msgid ""
"New method: the :class:`~decimal.Decimal` class gained a :meth:`~decimal."
"Decimal.from_float` class method that performs an exact conversion of a "
"floating-point number to a :class:`~decimal.Decimal`. This exact conversion "
"strives for the closest decimal approximation to the floating-point "
"representation's value; the resulting decimal value will therefore still "
"include the inaccuracy, if any. For example, ``Decimal.from_float(0.1)`` "
"returns "
"``Decimal('0.1000000000000000055511151231257827021181583404541015625')``. "
"(Implemented by Raymond Hettinger; :issue:`4796`.)"
msgstr ""
"新しいメソッド: :class:`~decimal.Decimal` クラスに、浮動小数点数から :class:"
"`~decimal.Decimal` への正確な変換を行う :meth:`~decimal.Decimal.from_float` "
"クラスメソッドが追加されました。この正確な変換は、浮動小数点数が示す値に一番"
"近い近似となる10進数を求めます。なので、このメソッドを使ったとしてもある程度"
"の誤差は残ります。例えば、 ``Decimal.from_float(0.1)`` は "
"``Decimal('0.1000000000000000055511151231257827021181583404541015625')`` を返"
"します。 (Implemented by Raymond Hettinger; :issue:`4796`.)"

#: ../../whatsnew/2.7.rst:1194
msgid ""
"Comparing instances of :class:`~decimal.Decimal` with floating-point numbers "
"now produces sensible results based on the numeric values of the operands.  "
"Previously such comparisons would fall back to Python's default rules for "
"comparing objects, which produced arbitrary results based on their type.  "
"Note that you still cannot combine :class:`Decimal` and floating-point in "
"other operations such as addition, since you should be explicitly choosing "
"how to convert between float and :class:`~decimal.Decimal`.  (Fixed by Mark "
"Dickinson; :issue:`2531`.)"
msgstr ""
":class:`~decimal.Decimal` のインスタンスと浮動小数点数の比較は、オペランドの"
"値に応じた賢い結果を返すようになりました。以前はこの比較は Python のデフォル"
"トのオブジェクト比較にフォールバックし、オペランドの型に応じて不定な結果が返"
"されていました。ただし、 :class:`Decimal` と浮動小数点数を加算などの他の演算"
"で組み合わせることはいまでも許可されていません。浮動小数点数と :class:"
"`~decimal.Decimal` の間の変換方法を明示的に指定するべきです。(Fixed by Mark "
"Dickinson; :issue:`2531`.)"

#: ../../whatsnew/2.7.rst:1203
msgid ""
"The constructor for :class:`~decimal.Decimal` now accepts floating-point "
"numbers (added by Raymond Hettinger; :issue:`8257`) and non-European Unicode "
"characters such as Arabic-Indic digits (contributed by Mark Dickinson; :"
"issue:`6595`)."
msgstr ""
":class:`~decimal.Decimal` のコンストラクタが浮動小数点数を受け入れるようにな"
"りました。 (added by Raymond Hettinger; :issue:`8257`) また、アラビア・インド"
"数字などの、ヨーロッパ以外の Unicode 文字も受け入れるようになりました。 "
"(contributed by Mark Dickinson; :issue:`6595`)."

#: ../../whatsnew/2.7.rst:1208
msgid ""
"Most of the methods of the :class:`~decimal.Context` class now accept "
"integers as well as :class:`~decimal.Decimal` instances; the only exceptions "
"are the :meth:`~decimal.Context.canonical` and :meth:`~decimal.Context."
"is_canonical` methods.  (Patch by Juan José Conti; :issue:`7633`.)"
msgstr ""
":class:`~decimal.Context` クラスのほとんどのメソッドが :class:`~decimal."
"Decimal` インスタンスと同じく整数を受け入れるようになりました。例外は :meth:"
"`~decimal.Context.canonical` と :meth:`~decimal.Context.is_canonical` メソッ"
"ドだけです。 (Patch by Juan José Conti; :issue:`7633`.)"

#: ../../whatsnew/2.7.rst:1213
msgid ""
"When using :class:`~decimal.Decimal` instances with a string's :meth:`~str."
"format` method, the default alignment was previously left-alignment.  This "
"has been changed to right-alignment, which is more sensible for numeric "
"types.  (Changed by Mark Dickinson; :issue:`6857`.)"
msgstr ""
":class:`~decimal.Decimal` インスタンスを文字列の :meth:`~str.format` メソッド"
"で利用した場合、デフォルトのアライメントが左揃えから、数値型に適した右揃えに"
"変更されました。  (Changed by Mark Dickinson; :issue:`6857`.)"

#: ../../whatsnew/2.7.rst:1218
msgid ""
"Comparisons involving a signaling NaN value (or ``sNAN``) now signal :const:"
"`InvalidOperation` instead of silently returning a true or false value "
"depending on the comparison operator.  Quiet NaN values (or ``NaN``) are now "
"hashable.  (Fixed by Mark Dickinson; :issue:`7279`.)"
msgstr ""
"signaling NaN (あるいは ``sNAN``) との比較は、暗黙に比較演算に応じて真偽値を"
"返すのではなく、 :const:`InvalidOperation` 例外を発生させるようになりまし"
"た。 Quiet NaN (あるいは ``NaN``) はハッシュ可能になりました。 (Fixed by "
"Mark Dickinson; :issue:`7279`.)"

#: ../../whatsnew/2.7.rst:1224
msgid ""
"The :mod:`difflib` module now produces output that is more compatible with "
"modern :command:`diff`/:command:`patch` tools through one small change, "
"using a tab character instead of spaces as a separator in the header giving "
"the filename.  (Fixed by Anatoly Techtonik; :issue:`7585`.)"
msgstr ""
":mod:`difflib` モジュールの出力が、ファイル名を含むヘッダのセパレータにスペー"
"スではなくタブ文字を使うようになり、最近の :command:`diff`/:command:`patch` "
"ツールとの互換性が高くなりました。(Fixed by Anatoly Techtonik; :issue:"
"`7585`.)"

#: ../../whatsnew/2.7.rst:1230
msgid ""
"The Distutils ``sdist`` command now always regenerates the :file:`MANIFEST` "
"file, since even if the :file:`MANIFEST.in` or :file:`setup.py` files "
"haven't been modified, the user might have created some new files that "
"should be included. (Fixed by Tarek Ziadé; :issue:`8688`.)"
msgstr ""
"Distutils ``sdist`` コマンドが、 :file:`MANIFEST.in` や :file:`setup.py` ファ"
"イルが変更されていなくても、ユーザーが作成したかもしれない新しいファイルが含"
"まれるようにするために、毎回 :file:`MANIFEST` ファイルを再生成するようになり"
"ました。 (Fixed by Tarek Ziadé; :issue:`8688`.)"

#: ../../whatsnew/2.7.rst:1236
msgid ""
"The :mod:`doctest` module's :const:`IGNORE_EXCEPTION_DETAIL` flag will now "
"ignore the name of the module containing the exception being tested.  (Patch "
"by Lennart Regebro; :issue:`7490`.)"
msgstr ""
":mod:`doctest` モジュールの :const:`IGNORE_EXCEPTION_DETAIL` フラグが、テスト"
"されている例外を含むモジュールの名前を無視するようになりました。 (Patch by "
"Lennart Regebro; :issue:`7490`.)"

#: ../../whatsnew/2.7.rst:1240
msgid ""
"The :mod:`email` module's :class:`~email.message.Message` class will now "
"accept a Unicode-valued payload, automatically converting the payload to the "
"encoding specified by :attr:`output_charset`. (Added by R. David Murray; :"
"issue:`1368247`.)"
msgstr ""
":mod:`email` モジュールの :class:`~email.message.Message` クラスが Uniode値の"
"ペイロードを受け入れるようになり、自動的に :attr:`output_charset` で指定され"
"たエンコーディングに変換するようになりました。 (Added by R. David Murray; :"
"issue:`1368247`.)"

#: ../../whatsnew/2.7.rst:1245
msgid ""
"The :class:`~fractions.Fraction` class now accepts a single float or :class:"
"`~decimal.Decimal` instance, or two rational numbers, as arguments to its "
"constructor.  (Implemented by Mark Dickinson; rationals added in :issue:"
"`5812`, and float/decimal in :issue:`8294`.)"
msgstr ""
":class:`~fractions.Fraction` クラスが、コンストラクタの引数として、 1つの "
"float 値、 :class:`~decimal.Decimal` インスタンス、 2つの有理数を受け入れるよ"
"うになりました。(Implemented by Mark Dickinson; rationals added in :issue:"
"`5812`, and float/decimal in :issue:`8294`.)"

#: ../../whatsnew/2.7.rst:1251
msgid ""
"Ordering comparisons (``<``, ``<=``, ``>``, ``>=``) between fractions and "
"complex numbers now raise a :exc:`TypeError`. This fixes an oversight, "
"making the :class:`~fractions.Fraction` match the other numeric types."
msgstr ""
"fraction と complex 数の間の順序比較演算 (``<``, ``<=``, ``>``, ``>=``)が :"
"exc:`TypeError` 例外を発生させるようになりました。これは過失を修正し、 :"
"class:`~fractions.Fraction` を他の数値型とマッチさせます。"

#: ../../whatsnew/2.7.rst:1258
msgid ""
"New class: :class:`~ftplib.FTP_TLS` in the :mod:`ftplib` module provides "
"secure FTP connections using TLS encapsulation of authentication as well as "
"subsequent control and data transfers. (Contributed by Giampaolo Rodola; :"
"issue:`2054`.)"
msgstr ""
"新しいクラス: :class:`~ftplib.FTP_TLS` が :mod:`ftplib` に追加されました。認"
"証とその後の制御・データ転送をTLSカプセル化することでセキュアなFTP接続を提供"
"します。 (Contributed by Giampaolo Rodola; :issue:`2054`.)"

#: ../../whatsnew/2.7.rst:1264
msgid ""
"The :meth:`~ftplib.FTP.storbinary` method for binary uploads can now restart "
"uploads thanks to an added *rest* parameter (patch by Pablo Mouzo; :issue:"
"`6845`.)"
msgstr ""
"バイナリデータのアップロードを行う :meth:`~ftplib.FTP.storbinary` に *rest* "
"引数が追加され、アップロードのリスタートができるようになりました。 (patch by "
"Pablo Mouzo; :issue:`6845`.)"

#: ../../whatsnew/2.7.rst:1268
msgid ""
"New class decorator: :func:`~functools.total_ordering` in the :mod:"
"`functools` module takes a class that defines an :meth:`__eq__` method and "
"one of :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`, or :meth:`__ge__`, "
"and generates the missing comparison methods.  Since the :meth:`__cmp__` "
"method is being deprecated in Python 3.x, this decorator makes it easier to "
"define ordered classes. (Added by Raymond Hettinger; :issue:`5479`.)"
msgstr ""
"新しいクラスデコレータ: :mod:`functools` モジュールに :func:`~functools."
"total_ordering`  が追加されました。 :meth:`__eq__` と、 :meth:`__lt__`, :"
"meth:`__le__`, :meth:`__gt__`, :meth:`__ge__` のいづれか1つを定義したクラスを"
"受け取り、残りの比較メソッドを生成します。 :meth:`__cmp__` メソッドが Python "
"3.x では廃止されたので、順序のあるクラスを定義するのを簡単にするためにこのデ"
"コレータがあります。(Added by Raymond Hettinger; :issue:`5479`.)"

#: ../../whatsnew/2.7.rst:1276
msgid ""
"New function: :func:`~functools.cmp_to_key` will take an old-style "
"comparison function that expects two arguments and return a new callable "
"that can be used as the *key* parameter to functions such as :func:"
"`sorted`, :func:`min` and :func:`max`, etc.  The primary intended use is to "
"help with making code compatible with Python 3.x. (Added by Raymond "
"Hettinger.)"
msgstr ""
"新しい関数: :func:`~functools.cmp_to_key` 関数は、古いスタイルの2引数を受け取"
"る比較関数を受け取り、 :func:`sorted`, :func:`min`, :func:`max` などの *key* "
"引数に利用できる呼び出し可能オブジェクトを返します。この関数の主な目的は、古"
"いコードを Python 3.x へ対応させるのを手助けすることです。(Added by Raymond "
"Hettinger.)"

#: ../../whatsnew/2.7.rst:1283
msgid ""
"New function: the :mod:`gc` module's :func:`~gc.is_tracked` returns true if "
"a given instance is tracked by the garbage collector, false otherwise. "
"(Contributed by Antoine Pitrou; :issue:`4688`.)"
msgstr ""
"新しい関数: :mod:`gc` モジュールに :func:`~gc.is_tracked` 関数が追加されまし"
"た。渡されたオブジェクトがGCに追跡されている場合に True を、そうでない場合に "
"False を返します。 (Contributed by Antoine Pitrou; :issue:`4688`.)"

#: ../../whatsnew/2.7.rst:1287
msgid ""
"The :mod:`gzip` module's :class:`~gzip.GzipFile` now supports the context "
"management protocol, so you can write ``with gzip.GzipFile(...) as f:`` "
"(contributed by Hagen Fürstenau; :issue:`3860`), and it now implements the :"
"class:`io.BufferedIOBase` ABC, so you can wrap it with :class:`io."
"BufferedReader` for faster processing (contributed by Nir Aides; :issue:"
"`7471`). It's also now possible to override the modification time recorded "
"in a gzipped file by providing an optional timestamp to the constructor.  "
"(Contributed by Jacques Frechet; :issue:`4272`.)"
msgstr ""
":mod:`gzip` モジュールの :class:`~gzip.GzipFile` がコンテキストマネージャープ"
"ロトコルをサポートしました。 ``with gzip.GzipFile(...) as f:`` と書くことがで"
"きます。(contributed by Hagen Fürstenau; :issue:`3860` また、 :class:`io."
"BufferedIOBase` ABC を実装しています。なので、より高速な処理のために :class:"
"`io.BufferedReader` でラップすることができます。 (contributed by Nir Aides; :"
"issue:`7471`). さらに、コンストラクタにオプションのタイムスタンプを指定するこ"
"とで、 gzip ファイル内の変更時間レコードをオーバーライドすることができるよう"
"になりました。  (Contributed by Jacques Frechet; :issue:`4272`.)"

#: ../../whatsnew/2.7.rst:1297
msgid ""
"Files in gzip format can be padded with trailing zero bytes; the :mod:`gzip` "
"module will now consume these trailing bytes.  (Fixed by Tadek Pietraszek "
"and Brian Curtin; :issue:`2846`.)"
msgstr ""
"gzip ファイルフォーマットのファイルは最後にゼロバイトによるパディングができる"
"ようになりました。 :mod:`gzip` モジュールは末尾のゼロバイトを消費します。"
"(Fixed by Tadek Pietraszek and Brian Curtin; :issue:`2846`.)"

#: ../../whatsnew/2.7.rst:1301
msgid ""
"New attribute: the :mod:`hashlib` module now has an :attr:`~hashlib.hashlib."
"algorithms` attribute containing a tuple naming the supported algorithms. In "
"Python 2.7, ``hashlib.algorithms`` contains ``('md5', 'sha1', 'sha224', "
"'sha256', 'sha384', 'sha512')``. (Contributed by Carl Chenet; :issue:`7418`.)"
msgstr ""
"新しい属性: :mod:`hashlib` モジュールに :attr:`~hashlib.hashlib.algorithms` "
"属性が追加されました。これはサポートしているアルゴリズムを含むタプルです。 "
"Python 2.7 では、 ``hashlib.algorithms`` は ``('md5', 'sha1', 'sha224', "
"'sha256', 'sha384', 'sha512')`` が含まれています。 (Contributed by Carl "
"Chenet; :issue:`7418`.)"

#: ../../whatsnew/2.7.rst:1307
msgid ""
"The default :class:`~httplib.HTTPResponse` class used by the :mod:`httplib` "
"module now supports buffering, resulting in much faster reading of HTTP "
"responses. (Contributed by Kristján Valur Jónsson; :issue:`4879`.)"
msgstr ""
":mod:`httplib` モジュールで使われているデフォルトの :class:`~httplib."
"HTTPResponse` クラスがバッファリングをサポートし、HTTPレスポンスをより高速に"
"読み込めるようになりました。 (Contributed by Kristján Valur Jónsson; :issue:"
"`4879`.)"

#: ../../whatsnew/2.7.rst:1311
msgid ""
"The :class:`~httplib.HTTPConnection` and :class:`~httplib.HTTPSConnection` "
"classes now support a *source_address* parameter, a ``(host, port)`` 2-tuple "
"giving the source address that will be used for the connection. (Contributed "
"by Eldon Ziegler; :issue:`3972`.)"
msgstr ""
":class:`~httplib.HTTPConnection` と :class:`~httplib.HTTPSConnection` クラス"
"が *source_address* 引数として ``(host, port)`` の2要素タプルを受け取るように"
"なりました。これは接続のソースアドレスとして利用されます。 (Contributed by "
"Eldon Ziegler; :issue:`3972`.)"

#: ../../whatsnew/2.7.rst:1316
msgid ""
"The :mod:`ihooks` module now supports relative imports.  Note that :mod:"
"`ihooks` is an older module for customizing imports, superseded by the :mod:"
"`imputil` module added in Python 2.0. (Relative import support added by Neil "
"Schemenauer.)"
msgstr ""
":mod:`ihooks` モジュールが相対 import をサポートしました。 :mod:`ihooks` "
"import をカスタマイズするための古いモジュールで、 Python 2.0 で追加された :"
"mod:`imputil` モジュールに取って変わられていることに注意してください。 "
"(Relative import support added by Neil Schemenauer.)"

#: ../../whatsnew/2.7.rst:1323
msgid ""
"The :mod:`imaplib` module now supports IPv6 addresses. (Contributed by Derek "
"Morr; :issue:`1655`.)"
msgstr ""
":mod:`imaplib` モジュールが IPv6 アドレスをサポートするようになりました。 "
"(Contributed by Derek Morr; :issue:`1655`.)"

#: ../../whatsnew/2.7.rst:1326
msgid ""
"New function: the :mod:`inspect` module's :func:`~inspect.getcallargs` takes "
"a callable and its positional and keyword arguments, and figures out which "
"of the callable's parameters will receive each argument, returning a "
"dictionary mapping argument names to their values.  For example::"
msgstr ""
":mod:`inspect` モジュールに :func:`~inspect.getcallargs` 関数が追加されまし"
"た。 callable とその位置引数、キーワード引数を受け取り、 callable のどの仮引"
"数がどの実引数を受け取るかを計算し、引数名から値へマップする辞書を返します。"
"例えば::"

#: ../../whatsnew/2.7.rst:1343
msgid "Contributed by George Sakkis; :issue:`3135`."
msgstr "Contributed by George Sakkis; :issue:`3135`."

#: ../../whatsnew/2.7.rst:1345
msgid ""
"Updated module: The :mod:`io` library has been upgraded to the version "
"shipped with Python 3.1.  For 3.1, the I/O library was entirely rewritten in "
"C and is 2 to 20 times faster depending on the task being performed.  The "
"original Python version was renamed to the :mod:`_pyio` module."
msgstr ""
"更新されたモジュール: :mod:`io` ライブラリが、Python 3.1 に同梱されるバージョ"
"ンに更新されました。 3.1 では、I/O ライブラリは完全に C で書き直され、処理さ"
"れるタスクに依って 2 から 20 倍速くなりました。元の Python バージョンは :mod:"
"`_pyio` モジュールに改名されました。"

#: ../../whatsnew/2.7.rst:1350
msgid ""
"One minor resulting change: the :class:`io.TextIOBase` class now has an :"
"attr:`errors` attribute giving the error setting used for encoding and "
"decoding errors (one of ``'strict'``, ``'replace'``, ``'ignore'``)."
msgstr ""
"結果の軽微な変更: :class:`io.TextIOBase` クラスは、エンコーディングやデコー"
"ディングのエラーに使われるエラー設定 (``'strict'``, ``'replace'``, "
"``'ignore'`` のいずれか) を与える :attr:`errors` 属性を持つようになりました。"

#: ../../whatsnew/2.7.rst:1355
msgid ""
"The :class:`io.FileIO` class now raises an :exc:`OSError` when passed an "
"invalid file descriptor.  (Implemented by Benjamin Peterson; :issue:"
"`4991`.)  The :meth:`~io.IOBase.truncate` method now preserves the file "
"position; previously it would change the file position to the end of the new "
"file.  (Fixed by Pascal Chambon; :issue:`6939`.)"
msgstr ""
":class:`io.FileIO` クラスは、無効なファイルディスクリプタを渡されたときに :"
"exc:`OSError` を送出するようになりました。(Implemented by Benjamin "
"Peterson; :issue:`4991`.) :meth:`~io.IOBase.truncate` メソッドは、ファイル位"
"置を保存するようになりました。以前は、ファイル位置を新しいファイルの末尾に変"
"更しました。(Fixed by Pascal Chambon; :issue:`6939`.)"

#: ../../whatsnew/2.7.rst:1361
msgid ""
"New function: ``itertools.compress(data, selectors)`` takes two iterators.  "
"Elements of *data* are returned if the corresponding value in *selectors* is "
"true::"
msgstr ""
"新しい関数: ``itertools.compress(data, selectors)`` は、2 つのイテレータを取"
"ります。*data* の要素は、*selectors* の対応する値が真であれば返されます::"

#: ../../whatsnew/2.7.rst:1370
msgid ""
"New function: ``itertools.combinations_with_replacement(iter, r)`` returns "
"all the possible *r*-length combinations of elements from the iterable "
"*iter*.  Unlike :func:`~itertools.combinations`, individual elements can be "
"repeated in the generated combinations::"
msgstr ""
"新しい関数: ``itertools.combinations_with_replacement(iter, r)`` は、 *iter* "
"から、すべての可能な長さ *r* の要素の組合せを返します。 :func:`~itertools."
"combinations` とは異なり、生成された組合せに個別の要素が繰り返し出現できま"
"す::"

#: ../../whatsnew/2.7.rst:1379
msgid ""
"Note that elements are treated as unique depending on their position in the "
"input, not their actual values."
msgstr ""
"なお要素は、実際の値ではなく、その入力内での位置に依って一意であるとみなされ"
"ます。"

#: ../../whatsnew/2.7.rst:1382
msgid ""
"The :func:`itertools.count` function now has a *step* argument that allows "
"incrementing by values other than 1.  :func:`~itertools.count` also now "
"allows keyword arguments, and using non-integer values such as floats or :"
"class:`~decimal.Decimal` instances.  (Implemented by Raymond Hettinger; :"
"issue:`5032`.)"
msgstr ""
":func:`itertools.count` 関数は、1 以外の値を増分できるように、 *step* 引数を"
"追加しました。 :func:`~itertools.count` はまた、キーワード引数に対応し、さら"
"に浮動小数点数や :class:`~decimal.Decimal` インスタンスのような、非整数の値を"
"使えるようになりました。(Implemented by Raymond Hettinger; :issue:`5032`.)"

#: ../../whatsnew/2.7.rst:1388
msgid ""
":func:`itertools.combinations` and :func:`itertools.product` previously "
"raised :exc:`ValueError` for values of *r* larger than the input iterable.  "
"This was deemed a specification error, so they now return an empty "
"iterator.  (Fixed by Raymond Hettinger; :issue:`4816`.)"
msgstr ""
":func:`itertools.combinations` および :func:`itertools.product` は、以前は入"
"力のイテレート可能オブジェクトより大きい *r* に :exc:`ValueError` を返してい"
"ました。これは仕様エラーと認められ、空のイテレータを返すようになりました。"
"(Fixed by Raymond Hettinger; :issue:`4816`.)"

#: ../../whatsnew/2.7.rst:1393
msgid ""
"Updated module: The :mod:`json` module was upgraded to version 2.0.9 of the "
"simplejson package, which includes a C extension that makes encoding and "
"decoding faster. (Contributed by Bob Ippolito; :issue:`4136`.)"
msgstr ""
"更新されたモジュール: :mod:`json` モジュールが、エンコーディングやデコーディ"
"ングを高速化する C 拡張を含んだ、 simplejson パッケージのバージョン 2.0.9 に"
"アップグレードされました。 (Contributed by Bob Ippolito; :issue:`4136`.)"

#: ../../whatsnew/2.7.rst:1398
msgid ""
"To support the new :class:`collections.OrderedDict` type, :func:`json.load` "
"now has an optional *object_pairs_hook* parameter that will be called with "
"any object literal that decodes to a list of pairs. (Contributed by Raymond "
"Hettinger; :issue:`5381`.)"
msgstr ""
"新しい :class:`collections.OrderedDict` 型をサポートするために、 :func:`json."
"load` はオプションとして、任意のオブジェクトリテラルに対して呼び出され、ペア"
"のリストにデコードする *object_pairs_hook* パラメタを追加しました。"
"(Contributed by Raymond Hettinger; :issue:`5381`.)"

#: ../../whatsnew/2.7.rst:1403
msgid ""
"The :mod:`mailbox` module's :class:`~mailbox.Maildir` class now records the "
"timestamp on the directories it reads, and only re-reads them if the "
"modification time has subsequently changed.  This improves performance by "
"avoiding unneeded directory scans.  (Fixed by A.M. Kuchling and Antoine "
"Pitrou; :issue:`1607951`, :issue:`6896`.)"
msgstr ""
":mod:`mailbox` モジュールの :class:`~mailbox.Maildir` クラスは、読み込むディ"
"レクトリのタイムスタンプを記録し、その後に更新時刻が変わった場合にのみ再読み"
"込みするようになりました。これは不必要なディレクトリ走査を避けることでパ"
"フォーマンスを向上させます。(Fixed by A.M. Kuchling and Antoine Pitrou; :"
"issue:`1607951`, :issue:`6896`.)"

#: ../../whatsnew/2.7.rst:1409
msgid ""
"New functions: the :mod:`math` module gained :func:`~math.erf` and :func:"
"`~math.erfc` for the error function and the complementary error function, :"
"func:`~math.expm1` which computes ``e**x - 1`` with more precision than "
"using :func:`~math.exp` and subtracting 1, :func:`~math.gamma` for the Gamma "
"function, and :func:`~math.lgamma` for the natural log of the Gamma "
"function. (Contributed by Mark Dickinson and nirinA raseliarison; :issue:"
"`3366`.)"
msgstr ""
"新しい関数: :mod:`math` モジュールは、誤差関数と相補誤差関数 :func:`~math."
"erf` および :func:`~math.erfc` 、 ``e**x - 1`` を :func:`~math.exp` から 1 を"
"引くのよりも高い精度で計算する :func:`~math.expm1` 、ガンマ関数 :func:`~math."
"gamma` 、そしてガンマ関数の自然対数 :func:`~math.lgamma` を追加しました。 "
"(Contributed by Mark Dickinson and nirinA raseliarison; :issue:`3366`.)"

#: ../../whatsnew/2.7.rst:1417
msgid ""
"The :mod:`multiprocessing` module's :class:`Manager*` classes can now be "
"passed a callable that will be called whenever a subprocess is started, "
"along with a set of arguments that will be passed to the callable. "
"(Contributed by lekma; :issue:`5585`.)"
msgstr ""
":mod:`multiprocessing` モジュールの :class:`Manager*` クラスに、サブプロセス"
"の開始時に呼び出される呼び出し可能オブジェクトと、それに渡される引数群を渡す"
"ことができるようになりました。 (Contributed by lekma; :issue:`5585`.)"

#: ../../whatsnew/2.7.rst:1423
msgid ""
"The :class:`~multiprocessing.Pool` class, which controls a pool of worker "
"processes, now has an optional *maxtasksperchild* parameter.  Worker "
"processes will perform the specified number of tasks and then exit, causing "
"the :class:`~multiprocessing.Pool` to start a new worker.  This is useful if "
"tasks may leak memory or other resources, or if some tasks will cause the "
"worker to become very large. (Contributed by Charles Cazabon; :issue:`6963`.)"
msgstr ""
"ワーカプロセスのプールを制御する :class:`~multiprocessing.Pool` クラスに、オ"
"プションの *maxtasksperchild* パラメタが追加されました。ワーカプロセスはこれ"
"で指定された数のタスクを処理したら、退出して :class:`~multiprocessing.Pool` "
"に新しいワーカーを開始させます。これは、タスクがメモリその他のリソースをリー"
"クし得るときや、ワーカをとても大きくしてしまうようなタスクがあるときに便利で"
"す。 (Contributed by Charles Cazabon; :issue:`6963`.)"

#: ../../whatsnew/2.7.rst:1431
msgid ""
"The :mod:`nntplib` module now supports IPv6 addresses. (Contributed by Derek "
"Morr; :issue:`1664`.)"
msgstr ""
":mod:`nntplib` モジュールは、IPv6 アドレスをサポートするようになりました。 "
"(Contributed by Derek Morr; :issue:`1664`.)"

#: ../../whatsnew/2.7.rst:1434
msgid ""
"New functions: the :mod:`os` module wraps the following POSIX system calls: :"
"func:`~os.getresgid` and :func:`~os.getresuid`, which return the real, "
"effective, and saved GIDs and UIDs; :func:`~os.setresgid` and :func:`~os."
"setresuid`, which set real, effective, and saved GIDs and UIDs to new "
"values; :func:`~os.initgroups`, which initialize the group access list for "
"the current process.  (GID/UID functions contributed by Travis H.; :issue:"
"`6508`.  Support for initgroups added by Jean-Paul Calderone; :issue:`7333`.)"
msgstr ""
"新しい関数: :mod:`os` モジュールは、以下の POSIX システムコールをラップしま"
"す: real, effective, および saved GID と UID を返す、 :func:`~os.getresgid` "
"と :func:`~os.getresuid` 、 real, effective, および saved GID と UID を新しく"
"設定する、 :func:`~os.setresgid` と :func:`~os.setresuid` 、現在のプロセスに"
"グループアクセスリストを初期化する :func:`~os.initgroups`  。 (GID/UID "
"functions contributed by Travis H.; :issue:`6508`. Support for initgroups "
"added by Jean-Paul Calderone; :issue:`7333`.)"

#: ../../whatsnew/2.7.rst:1444
msgid ""
"The :func:`os.fork` function now re-initializes the import lock in the child "
"process; this fixes problems on Solaris when :func:`~os.fork` is called from "
"a thread.  (Fixed by Zsolt Cserna; :issue:`7242`.)"
msgstr ""
":func:`os.fork` 関数は、子プロセス中で import ロックを再初期化するようになり"
"ました。これは、Solaris における :func:`~os.fork` がスレッドから呼び出された"
"時の問題を修正します。(Fixed by Zsolt Cserna; :issue:`7242`.)"

#: ../../whatsnew/2.7.rst:1448
msgid ""
"In the :mod:`os.path` module, the :func:`~os.path.normpath` and :func:`~os."
"path.abspath` functions now preserve Unicode; if their input path is a "
"Unicode string, the return value is also a Unicode string. (:meth:`~os.path."
"normpath` fixed by Matt Giuca in :issue:`5827`; :meth:`~os.path.abspath` "
"fixed by Ezio Melotti in :issue:`3426`.)"
msgstr ""
":mod:`os.path` モジュールの、 :func:`~os.path.normpath` および :func:`~os."
"path.abspath` 関数は、Unicode を保存するようになりました。入力パスが Unicode "
"なら、戻り値も Unicode 文字列になります。 (:meth:`~os.path.normpath` fixed "
"by Matt Giuca in :issue:`5827`; :meth:`~os.path.abspath` fixed by Ezio "
"Melotti in :issue:`3426`.)"

#: ../../whatsnew/2.7.rst:1454
msgid ""
"The :mod:`pydoc` module now has help for the various symbols that Python "
"uses.  You can now do ``help('<<')`` or ``help('@')``, for example. "
"(Contributed by David Laban; :issue:`4739`.)"
msgstr ""
":mod:`pydoc` モジュールは、Python が使う様々なシンボルのヘルプを追加しまし"
"た。例えば、 ``help('<<')`` や ``help('@')`` とできるようになりました。"
"(Contributed by David Laban; :issue:`4739`.)"

#: ../../whatsnew/2.7.rst:1458
msgid ""
"The :mod:`re` module's :func:`~re.split`, :func:`~re.sub`, and :func:`~re."
"subn` now accept an optional *flags* argument, for consistency with the "
"other functions in the module.  (Added by Gregory P. Smith.)"
msgstr ""
":mod:`re` モジュールの :func:`~re.split`, :func:`~re.sub`, および :func:`~re."
"subn` は、モジュールの他の関数との一貫性のため、オプションの *flags* 引数を受"
"け付けるようになりました。 (Added by Gregory P. Smith.)"

#: ../../whatsnew/2.7.rst:1462
msgid ""
"New function: :func:`~runpy.run_path` in the :mod:`runpy` module will "
"execute the code at a provided *path* argument.  *path* can be the path of a "
"Python source file (:file:`example.py`), a compiled bytecode file (:file:"
"`example.pyc`), a directory (:file:`./package/`), or a zip archive (:file:"
"`example.zip`).  If a directory or zip path is provided, it will be added to "
"the front of ``sys.path`` and the module :mod:`__main__` will be imported.  "
"It's expected that the directory or zip contains a :file:`__main__.py`; if "
"it doesn't, some other :file:`__main__.py` might be imported from a location "
"later in ``sys.path``.  This makes more of the machinery of :mod:`runpy` "
"available to scripts that want to mimic the way Python's command line "
"processes an explicit path name. (Added by Nick Coghlan; :issue:`6816`.)"
msgstr ""
"新しい関数: :mod:`runpy` モジュールの :func:`~runpy.run_path` は、与えられた "
"*path* 引数のコードを実行します。 *path* は Python ソースファイルのパス (:"
"file:`example.py`)、コンパイル済みバイトコードファイル (:file:`example."
"pyc`)、ディレクトリ (:file:`./package/`)、または zip アーカイブ (:file:"
"`example.zip`) にできます。ディレクトリか zip パスが与えられると、それが "
"``sys.path`` の最初に加えられ、モジュール :mod:`__main__` が import されま"
"す。これは、ディレクトリや zip が :file:`__main__.py` を含むことを期待しま"
"す。なければ、他の :file:`__main__.py` が ``sys.path`` の後の部分から import "
"されることがあります。これにより、Python のコマンドラインが明示的なパス名を処"
"理する方法を真似たいようなスクリプトに、 :mod:`runpy` のより多くの機構が利用"
"できるようになります。 (Added by Nick Coghlan; :issue:`6816`.)"

#: ../../whatsnew/2.7.rst:1476
msgid ""
"New function: in the :mod:`shutil` module, :func:`~shutil.make_archive` "
"takes a filename, archive type (zip or tar-format), and a directory path, "
"and creates an archive containing the directory's contents. (Added by Tarek "
"Ziadé.)"
msgstr ""
"新しい関数: :mod:`shutil` モジュールの :func:`~shutil.make_archive` は、ファ"
"イル名、アーカイブ型 (zip または tar-format)、およびディレクトリパスを取っ"
"て、そのディレクトリの内容を含むアーカイブを生成します。(Added by Tarek "
"Ziadé.)"

#: ../../whatsnew/2.7.rst:1481
msgid ""
":mod:`shutil`'s :func:`~shutil.copyfile` and :func:`~shutil.copytree` "
"functions now raise a :exc:`~shutil.SpecialFileError` exception when asked "
"to copy a named pipe.  Previously the code would treat named pipes like a "
"regular file by opening them for reading, and this would block "
"indefinitely.  (Fixed by Antoine Pitrou; :issue:`3002`.)"
msgstr ""
":mod:`shutil` の :func:`~shutil.copyfile` および :func:`~shutil.copytree` 関"
"数は、名前付きパイプのコピーを求められたときに :exc:`~shutil."
"SpecialFileError` 例外を送出する様になりました。以前は、コードは、名前付きパ"
"イプを、通常のファイルのように読み込み用に開いて扱い、いつまでもブロックして"
"いました。 (Fixed by Antoine Pitrou; :issue:`3002`.)"

#: ../../whatsnew/2.7.rst:1487
msgid ""
"The :mod:`signal` module no longer re-installs the signal handler unless "
"this is truly necessary, which fixes a bug that could make it impossible to "
"catch the EINTR signal robustly.  (Fixed by Charles-Francois Natali; :issue:"
"`8354`.)"
msgstr ""
":mod:`signal` モジュールは、シグナルハンドラを本当に必要でない限り再インス"
"トールしなくなりました。これで、EINTR シグナルを確実に捕えられないバグが修正"
"されました。(Fixed by Charles-Francois Natali; :issue:`8354`.)"

#: ../../whatsnew/2.7.rst:1492
msgid ""
"New functions: in the :mod:`site` module, three new functions return various "
"site- and user-specific paths. :func:`~site.getsitepackages` returns a list "
"containing all global site-packages directories, :func:`~site."
"getusersitepackages` returns the path of the user's site-packages directory, "
"and :func:`~site.getuserbase` returns the value of the :envvar:`USER_BASE` "
"environment variable, giving the path to a directory that can be used to "
"store data. (Contributed by Tarek Ziadé; :issue:`6693`.)"
msgstr ""
"新しい関数: :mod:`site` モジュールの、新しい関数群は様々なサイトおよびユーザ"
"に特有のパスを返します。 :func:`~site.getsitepackages` は、全てのグローバル "
"site-packages ディレクトリを含むリストを返します。 :func:`~site."
"getusersitepackages` は、ユーザの site-packages ディレクトリのパスを返しま"
"す。そして、 :func:`~site.getuserbase` は、データの保存に使えるディレクトリへ"
"のパスを与える、 :envvar:`USER_BASE` 環境変数の値を返します。 (Contributed "
"by Tarek Ziadé; :issue:`6693`.)"

#: ../../whatsnew/2.7.rst:1503
msgid ""
"The :mod:`site` module now reports exceptions occurring when the :mod:"
"`sitecustomize` module is imported, and will no longer catch and swallow "
"the :exc:`KeyboardInterrupt` exception.  (Fixed by Victor Stinner; :issue:"
"`3137`.)"
msgstr ""
":mod:`site` モジュールは :mod:`sitecustomize` モジュールが import されたとき"
"に例外を報告するようになり、 :exc:`KeyboardInterrupt` 例外が捕捉されて飲み込"
"まれることはなくなりました。 (Fixed by Victor Stinner; :issue:`3137`.)"

#: ../../whatsnew/2.7.rst:1508
msgid ""
"The :func:`~socket.create_connection` function gained a *source_address* "
"parameter, a ``(host, port)`` 2-tuple giving the source address that will be "
"used for the connection. (Contributed by Eldon Ziegler; :issue:`3972`.)"
msgstr ""
":func:`~socket.create_connection` 関数は、接続に使われるソースアドレスを与え"
"る ``(host, port)`` の 2-タプル、 *source_address* パラメタを追加しました。 "
"(Contributed by Eldon Ziegler; :issue:`3972`.)"

#: ../../whatsnew/2.7.rst:1513
msgid ""
"The :meth:`~socket.socket.recv_into` and :meth:`~socket.socket."
"recvfrom_into` methods will now write into objects that support the buffer "
"API, most usefully the :class:`bytearray` and :class:`memoryview` objects.  "
"(Implemented by Antoine Pitrou; :issue:`8104`.)"
msgstr ""
":meth:`~socket.socket.recv_into` および :meth:`~socket.socket.recvfrom_into` "
"メソッドは、バッファ API をサポートするオブジェクト、最も便利なのは :class:"
"`bytearray` や :class:`memoryview` 、に書きこむようになりました。 "
"(Implemented by Antoine Pitrou; :issue:`8104`.)"

#: ../../whatsnew/2.7.rst:1518
msgid ""
"The :mod:`SocketServer` module's :class:`~SocketServer.TCPServer` class now "
"supports socket timeouts and disabling the Nagle algorithm. The :attr:"
"`~SocketServer.TCPServer.disable_nagle_algorithm` class attribute defaults "
"to ``False``; if overridden to be true, new request connections will have "
"the TCP_NODELAY option set to prevent buffering many small sends into a "
"single TCP packet. The :attr:`~SocketServer.BaseServer.timeout` class "
"attribute can hold a timeout in seconds that will be applied to the request "
"socket; if no request is received within that time, :meth:`~SocketServer."
"BaseServer.handle_timeout` will be called and :meth:`~SocketServer."
"BaseServer.handle_request` will return. (Contributed by Kristján Valur "
"Jónsson; :issue:`6192` and :issue:`6267`.)"
msgstr ""
":mod:`SocketServer` モジュールの :class:`~SocketServer.TCPServer` クラスは、"
"ソケットタイムアウトと Nagle アルゴリズムの無効化をサポートするようになりまし"
"た。 :attr:`~SocketServer.TCPServer.disable_nagle_algorithm` クラス属性は、デ"
"フォルトで ``False`` です。上書きされて真になると、新しいリクエスト接続は、"
"TCP_NODELAY オプションを設定され、一つの TCP パケットにたくさんの小さな送信が"
"バッファリングされることを防ぎます。 :attr:`~SocketServer.BaseServer."
"timeout` クラス属性は、リクエストソケットに適用されるタイムアウトを秒で保持で"
"きます。その時間内にリクエストが受け付けられなければ、 :meth:`~SocketServer."
"BaseServer.handle_timeout` が呼び出され、 :meth:`~SocketServer.BaseServer."
"handle_request` が返されます。(Contributed by Kristján Valur Jónsson; :issue:"
"`6192` and :issue:`6267`.)"

#: ../../whatsnew/2.7.rst:1530
msgid ""
"Updated module: the :mod:`sqlite3` module has been updated to version 2.6.0 "
"of the `pysqlite package <https://github.com/ghaering/pysqlite>`__. Version "
"2.6.0 includes a number of bugfixes, and adds the ability to load SQLite "
"extensions from shared libraries. Call the ``enable_load_extension(True)`` "
"method to enable extensions, and then call :meth:`~sqlite3.Connection."
"load_extension` to load a particular shared library. (Updated by Gerhard "
"Häring.)"
msgstr ""
"更新されたモジュール: :mod:`sqlite3` モジュールが `pysqlite パッケージ "
"<https://github.com/ghaering/pysqlite>`__ のバージョン 2.6.0 にアップデートさ"
"れました。バージョン 2.6.0 はいくつかのバグ修正を含み、共有ライブラリから "
"SQLite 拡張をロードできるようになりました。拡張を有効にするには "
"``enable_load_extension(True)`` メソッドを呼び出し、そして特定の共有ライブラ"
"リをロードするには :meth:`~sqlite3.Connection.load_extension` を呼び出してく"
"ださい。 (Updated by Gerhard Häring.)"

#: ../../whatsnew/2.7.rst:1537
msgid ""
"The :mod:`ssl` module's :class:`~ssl.SSLSocket` objects now support the "
"buffer API, which fixed a test suite failure (fix by Antoine Pitrou; :issue:"
"`7133`) and automatically set OpenSSL's :c:macro:`SSL_MODE_AUTO_RETRY`, "
"which will prevent an error code being returned from :meth:`recv` operations "
"that trigger an SSL renegotiation (fix by Antoine Pitrou; :issue:`8222`)."
msgstr ""
":mod:`ssl` モジュールの :class:`~ssl.SSLSocket` オブジェクトは、バッファ API "
"をサポートするようになりました。これは、テストスイートの障害を修正します "
"(fix by Antoine Pitrou; :issue:`7133`)。また、OpenSSL の :c:macro:"
"`SSL_MODE_AUTO_RETRY` を自動的に設定することで、 :meth:`recv` 演算によって "
"SSL 再ネゴシエーションを引き起こすエラーコードが返されるのを防ぎます (fix by "
"Antoine Pitrou; :issue:`8222`)。"

#: ../../whatsnew/2.7.rst:1544
msgid ""
"The :func:`ssl.wrap_socket` constructor function now takes a *ciphers* "
"argument that's a string listing the encryption algorithms to be allowed; "
"the format of the string is described `in the OpenSSL documentation <https://"
"www.openssl.org/docs/manmaster/man1/ciphers.html#CIPHER-LIST-FORMAT>`__. "
"(Added by Antoine Pitrou; :issue:`8322`.)"
msgstr ""
":func:`ssl.wrap_socket` コンストラクタ関数は、許可される暗号化アルゴリズムを"
"列挙する文字列である *ciphers* 引数を取るようになりました。この文字列の書式"
"は、 `OpenSSL ドキュメント <https://www.openssl.org/docs/manmaster/man1/"
"ciphers.html#CIPHER-LIST-FORMAT>`__ で解説されています。 (Added by Antoine "
"Pitrou; :issue:`8322`.)"

#: ../../whatsnew/2.7.rst:1551
msgid ""
"Another change makes the extension load all of OpenSSL's ciphers and digest "
"algorithms so that they're all available.  Some SSL certificates couldn't be "
"verified, reporting an \"unknown algorithm\" error.  (Reported by Beda "
"Kosata, and fixed by Antoine Pitrou; :issue:`8484`.)"
msgstr ""
"その他の変更により、拡張はOpenSSL の全ての暗号とメッセージダイジェストアルゴ"
"リズムをロードし、それらすべてが利用できるようにします。SSL 証明書の中には検"
"証できないものもあり、\"unknown algorithm\" エラーを報告します。 (Reported "
"by Beda Kosata, and fixed by Antoine Pitrou; :issue:`8484`.)"

#: ../../whatsnew/2.7.rst:1557
msgid ""
"The version of OpenSSL being used is now available as the module attributes :"
"data:`ssl.OPENSSL_VERSION` (a string), :data:`ssl.OPENSSL_VERSION_INFO` (a 5-"
"tuple), and :data:`ssl.OPENSSL_VERSION_NUMBER` (an integer).  (Added by "
"Antoine Pitrou; :issue:`8321`.)"
msgstr ""
"OpenSSL の、使われるバージョンは、モジュール属性 :data:`ssl.OPENSSL_VERSION` "
"(文字列)、 :data:`ssl.OPENSSL_VERSION_INFO` (5-タプル)、および :data:`ssl."
"OPENSSL_VERSION_NUMBER` (整数) として利用できるようになりました。 (Added by "
"Antoin Pitrou; :issue:`8321`.)"

#: ../../whatsnew/2.7.rst:1563
msgid ""
"The :mod:`struct` module will no longer silently ignore overflow errors when "
"a value is too large for a particular integer format code (one of "
"``bBhHiIlLqQ``); it now always raises a :exc:`struct.error` exception.  "
"(Changed by Mark Dickinson; :issue:`1523`.)  The :func:`~struct.pack` "
"function will also attempt to use :meth:`__index__` to convert and pack non-"
"integers before trying the :meth:`__int__` method or reporting an error. "
"(Changed by Mark Dickinson; :issue:`8300`.)"
msgstr ""
":mod:`struct` モジュールは、値が特定の整数フォーマットコード (``bBhHiIlLqQ`` "
"のいずれか) に対して大きすぎるときに、オーバーフローエラーを静かに無視しなく"
"なりました。これは必ず :exc:`struct.error` 例外を送出するようになりました。 "
"(Changed by Mark Dickinson; :issue:`1523`.) :func:`~struct.pack` 関数は、非整"
"数を変換してパックするのに、 :meth:`__int__` メソッドを試したりエラーを報告し"
"たりする前に、 :meth:`__index__` の使用も試すようになりました。 (Changed by "
"Mark Dickinson; :issue:`8300`.)"

#: ../../whatsnew/2.7.rst:1572
msgid ""
"New function: the :mod:`subprocess` module's :func:`~subprocess."
"check_output` runs a command with a specified set of arguments and returns "
"the command's output as a string when the command runs without error, or "
"raises a :exc:`~subprocess.CalledProcessError` exception otherwise."
msgstr ""
"新しい関数: :mod:`subprocess` モジュールの :func:`~subprocess.check_output` "
"は、指定された引数群でコマンドを実行し、コマンドがエラーを起こさずに実行した"
"らコマンドの出力を文字列として返し、そうでなければ :exc:`~subprocess."
"CalledProcessError` 例外を送出します。"

#: ../../whatsnew/2.7.rst:1587
msgid "(Contributed by Gregory P. Smith.)"
msgstr "(Contributed by Gregory P. Smith.)"

#: ../../whatsnew/2.7.rst:1589
msgid ""
"The :mod:`subprocess` module will now retry its internal system calls on "
"receiving an :const:`EINTR` signal.  (Reported by several people; final "
"patch by Gregory P. Smith in :issue:`1068268`.)"
msgstr ""
":mod:`subprocess` モジュールは、 :const:`EINTR` シグナルを受け取り次第内部シ"
"ステムコールを最施行するようになりました。(Reported by several people; final "
"patch by Gregory P. Smith in :issue:`1068268`.)"

#: ../../whatsnew/2.7.rst:1593
msgid ""
"New function: :func:`~symtable.Symbol.is_declared_global` in the :mod:"
"`symtable` module returns true for variables that are explicitly declared to "
"be global, false for ones that are implicitly global. (Contributed by Jeremy "
"Hylton.)"
msgstr ""
"新しい関数: :mod:`symtable` モジュールの :func:`~symtable.Symbol."
"is_declared_global` は、明示的に global と宣言された引数には真、暗示的に "
"global である引数には偽を返します。(Contributed by Jeremy Hylton.)"

#: ../../whatsnew/2.7.rst:1598 ../../whatsnew/2.7.rst:2496
msgid ""
"The :mod:`syslog` module will now use the value of ``sys.argv[0]`` as the "
"identifier instead of the previous default value of ``'python'``. (Changed "
"by Sean Reifschneider; :issue:`8451`.)"
msgstr ""
":mod:`syslog` モジュールは、識別子として、以前デフォルトであった "
"``'python'`` の値ではなく、 ``sys.argv[0]`` の値を使うようになりました。 "
"(Changed by Sean Reifschneider; :issue:`8451`.)"

#: ../../whatsnew/2.7.rst:1602
msgid ""
"The ``sys.version_info`` value is now a named tuple, with attributes named :"
"attr:`major`, :attr:`minor`, :attr:`micro`, :attr:`releaselevel`, and :attr:"
"`serial`.  (Contributed by Ross Light; :issue:`4285`.)"
msgstr ""
"``sys.version_info`` の値は、属性名 :attr:`major`, :attr:`minor`, :attr:"
"`micro`, :attr:`releaselevel`, および :attr:`serial` を持つ名前付きタプルにな"
"りました。 (Contributed by Ross Light; :issue:`4285`.)"

#: ../../whatsnew/2.7.rst:1607
msgid ""
":func:`sys.getwindowsversion` also returns a named tuple, with attributes "
"named :attr:`major`, :attr:`minor`, :attr:`build`, :attr:`platform`, :attr:"
"`service_pack`, :attr:`service_pack_major`, :attr:`service_pack_minor`, :"
"attr:`suite_mask`, and :attr:`product_type`.  (Contributed by Brian Curtin; :"
"issue:`7766`.)"
msgstr ""
":func:`sys.getwindowsversion` もまた、属性名 :attr:`major`, :attr:`minor`, :"
"attr:`build`, :attr:`platform`, :attr:`service_pack`, :attr:"
"`service_pack_major`, :attr:`service_pack_minor`, :attr:`suite_mask`, およ"
"び :attr:`product_type` を持つ名前付きタプルを返します。(Contributed by "
"Brian Curtin; :issue:`7766`.)"

#: ../../whatsnew/2.7.rst:1613 ../../whatsnew/2.7.rst:2500
msgid ""
"The :mod:`tarfile` module's default error handling has changed, to no longer "
"suppress fatal errors.  The default error level was previously 0, which "
"meant that errors would only result in a message being written to the debug "
"log, but because the debug log is not activated by default, these errors go "
"unnoticed.  The default error level is now 1, which raises an exception if "
"there's an error. (Changed by Lars Gustäbel; :issue:`7357`.)"
msgstr ""
":mod:`tarfile` モジュールのデフォルトエラー処理が変更され、致命的なエラーを抑"
"制しないようになりました。デフォルトのエラーレベルは以前は 0 で、エラーはメッ"
"セージとしてデバッグログに書き込まれるだけでしたが、デバッグログはデフォルト"
"では活性化されていないため、エラーは顧みられませんでした。デフォルトのエラー"
"レベルは 1 になり、エラーがあれば例外が送出されます。 (Changed by Lars "
"Gustäbel; :issue:`7357`.)"

#: ../../whatsnew/2.7.rst:1621
msgid ""
":mod:`tarfile` now supports filtering the :class:`~tarfile.TarInfo` objects "
"being added to a tar file.  When you call :meth:`~tarfile.TarFile.add`, you "
"may supply an optional *filter* argument that's a callable.  The *filter* "
"callable will be passed the :class:`~tarfile.TarInfo` for every file being "
"added, and can modify and return it. If the callable returns ``None``, the "
"file will be excluded from the resulting archive.  This is more powerful "
"than the existing *exclude* argument, which has therefore been deprecated. "
"(Added by Lars Gustäbel; :issue:`6856`.) The :class:`~tarfile.TarFile` class "
"also now supports the context management protocol. (Added by Lars Gustäbel; :"
"issue:`7232`.)"
msgstr ""
":mod:`tarfile` は、tar ファイルに追加される :class:`~tarfile.TarInfo` オブ"
"ジェクトのフィルタリングをサポートするようになりました。 :meth:`~tarfile."
"TarFile.add` を呼び出したとき、オプションの呼び出し可能オブジェクトである "
"*filter* 引数を与えることができます。 *filter* オブジェクトには、ファイルが追"
"加される度に :class:`~tarfile.TarInfo` を渡され、これを変形して返せます。この"
"オブジェクトが ``None`` を返したら、そのファイルは結果のアーカイブから除かれ"
"ます。これは既存の *exclude* 引数より強力で、それゆえこれは非推奨となります。"
"(Added by Lars Gustäbel; :issue:`6856`.) :class:`~tarfile.TarFile` クラスはま"
"た、コンテキストマネージャプロトコルもサポートするようになりました。(Added "
"by Lars Gustäbel; :issue:`7232`.)"

#: ../../whatsnew/2.7.rst:1633
msgid ""
"The :meth:`~threading.Event.wait` method of the :class:`threading.Event` "
"class now returns the internal flag on exit.  This means the method will "
"usually return true because :meth:`~threading.Event.wait` is supposed to "
"block until the internal flag becomes true.  The return value will only be "
"false if a timeout was provided and the operation timed out. (Contributed by "
"Tim Lesher; :issue:`1674032`.)"
msgstr ""
":class:`threading.Event` クラスの :meth:`~threading.Event.wait` メソッドは、"
"終了時に内部フラグを返すようになりました。 :meth:`~threading.Event.wait` は内"
"部フラグが真になるまでブロックすることを想定されているため、この関数は通常真"
"を返すことになります。この戻り値は、タイムアウトが与えられ、オペレーションが"
"タイムアウトした時のみ偽になります。 (Contributed by Tim Lesher; :issue:"
"`1674032`.)"

#: ../../whatsnew/2.7.rst:1640
msgid ""
"The Unicode database provided by the :mod:`unicodedata` module is now used "
"internally to determine which characters are numeric, whitespace, or "
"represent line breaks.  The database also includes information from the :"
"file:`Unihan.txt` data file (patch by Anders Chrigström and Amaury Forgeot "
"d'Arc; :issue:`1571184`) and has been updated to version 5.2.0 (updated by "
"Florent Xicluna; :issue:`8024`)."
msgstr ""
":mod:`unicodedata` モジュールに提供される Unicode データベースは、どの文字が"
"数字や空白文字か、または改行を表すかを決定するために、内部で使われるようにな"
"りました。このデータベースはまた、 :file:`Unihan.txt` データファイルからの情"
"報も含みます (patch by Anders Chrigström and Amaury Forgeot d'Arc; :issue:"
"`1571184`)。また、バージョン 5.2.0 にアップデートされました (updated by "
"Florent Xicluna; :issue:`8024`)。"

#: ../../whatsnew/2.7.rst:1648 ../../whatsnew/2.7.rst:2508
msgid ""
"The :mod:`urlparse` module's :func:`~urlparse.urlsplit` now handles unknown "
"URL schemes in a fashion compliant with :rfc:`3986`: if the URL is of the "
"form ``\"<something>://...\"``, the text before the ``://`` is treated as "
"the scheme, even if it's a made-up scheme that the module doesn't know "
"about.  This change may break code that worked around the old behaviour.  "
"For example, Python 2.6.4 or 2.5 will return the following:"
msgstr ""
":mod:`urlparse` モジュールの :func:`~urlparse.urlsplit` は、未知の URL スキー"
"ムを :rfc:`3986` に応じた方法で処理します。 URL が ``\"<something>://...\"`` "
"の形式なら、 ``://`` の前のテキストを、それがモジュールの知らない作り物のス"
"キームであってさえ、スキームとして扱います。この変更は、古い働きを使って動作"
"していたコードを破壊することがあります。例えば、Python 2.6.4 や 2.5 は以下を"
"返します:"

#: ../../whatsnew/2.7.rst:1663 ../../whatsnew/2.7.rst:2523
msgid "Python 2.7 (and Python 2.6.5) will return:"
msgstr "Python 2.7 (や Python 2.6.5) は以下を返します:"

#: ../../whatsnew/2.7.rst:1672 ../../whatsnew/2.7.rst:2532
msgid ""
"(Python 2.7 actually produces slightly different output, since it returns a "
"named tuple instead of a standard tuple.)"
msgstr ""
"(Python 2.7 では、これは普通のタプルではなく名前付きタプルを返すので、実際は"
"微妙に異なる出力をします。)"

#: ../../whatsnew/2.7.rst:1675
msgid ""
"The :mod:`urlparse` module also supports IPv6 literal addresses as defined "
"by :rfc:`2732` (contributed by Senthil Kumaran; :issue:`2987`)."
msgstr ""
":mod:`urlparse` モジュールは、 :rfc:`2732` で定義された IPv6 リテラルアドレス"
"もサポートします (contributed by Senthil Kumaran; :issue:`2987`)。"

#: ../../whatsnew/2.7.rst:1685
msgid ""
"New class: the :class:`~weakref.WeakSet` class in the :mod:`weakref` module "
"is a set that only holds weak references to its elements; elements will be "
"removed once there are no references pointing to them. (Originally "
"implemented in Python 3.x by Raymond Hettinger, and backported to 2.7 by "
"Michael Foord.)"
msgstr ""
"新しいクラス: :mod:`weakref` モジュールの :class:`~weakref.WeakSet` クラス"
"は、その要素の弱参照だけを保持する集合です。要素は、それを指す参照がなくなり"
"次第除去されます。 (Originally implemented in Python 3.x by Raymond "
"Hettinger, and backported to 2.7 by Michael Foord.)"

#: ../../whatsnew/2.7.rst:1691
msgid ""
"The ElementTree library, :mod:`xml.etree`, no longer escapes ampersands and "
"angle brackets when outputting an XML processing instruction (which looks "
"like ``<?xml-stylesheet href=\"#style1\"?>``) or comment (which looks like "
"``<!-- comment -->``). (Patch by Neil Muller; :issue:`2746`.)"
msgstr ""
"エレメントツリーライブラリ、 :mod:`xml.etree` は、 (``<?xml-stylesheet "
"href=\"#style1\"?>`` のような) 命令や (``<!-- comment -->`` のような) コメン"
"トを処理する XML を出力するとき、アンパサンドや山括弧をエスケープしなくなりま"
"した。 (Patch by Neil Muller; :issue:`2746`.)"

#: ../../whatsnew/2.7.rst:1697
msgid ""
"The XML-RPC client and server, provided by the :mod:`xmlrpclib` and :mod:"
"`SimpleXMLRPCServer` modules, have improved performance by supporting "
"HTTP/1.1 keep-alive and by optionally using gzip encoding to compress the "
"XML being exchanged.  The gzip compression is controlled by the :attr:"
"`encode_threshold` attribute of :class:`SimpleXMLRPCRequestHandler`, which "
"contains a size in bytes; responses larger than this will be compressed. "
"(Contributed by Kristján Valur Jónsson; :issue:`6267`.)"
msgstr ""
":mod:`xmlrpclib` と :mod:`SimpleXMLRPCServer` によって提供される XML-RPC クラ"
"イアントおよびサーバは、HTTP/1.1 keep-alive をサポートし、場合によっては "
"gzip エンコーディングを使って XML の送受を圧縮することで、パフォーマンスが向"
"上しました。gzip 圧縮は :class:`SimpleXMLRPCRequestHandler` の :attr:"
"`encode_threshold` 属性によって制御されます。これはバイト数で、これより大きな"
"応答は圧縮されます。 (Contributed by Kristján Valur Jónsson; :issue:`6267`.)"

#: ../../whatsnew/2.7.rst:1706
msgid ""
"The :mod:`zipfile` module's :class:`~zipfile.ZipFile` now supports the "
"context management protocol, so you can write ``with zipfile.ZipFile(...) as "
"f:``. (Contributed by Brian Curtin; :issue:`5511`.)"
msgstr ""
":mod:`zipfile` モジュールの :class:`~zipfile.ZipFile` は、コンテキストマネジ"
"メントプロトコルをサポートし、 ``with zipfile.ZipFile(...) as f:`` と書けるよ"
"うになりました。 (Contributed by Brian Curtin; :issue:`5511`.)"

#: ../../whatsnew/2.7.rst:1710
msgid ""
":mod:`zipfile` now also supports archiving empty directories and extracts "
"them correctly.  (Fixed by Kuba Wieczorek; :issue:`4710`.) Reading files out "
"of an archive is faster, and interleaving :meth:`~zipfile.ZipFile.read` and :"
"meth:`~zipfile.ZipFile.readline` now works correctly. (Contributed by Nir "
"Aides; :issue:`7610`.)"
msgstr ""
":mod:`zipfile` は、空のディレクトリのアーカイブ化をサポートするようになり、こ"
"れを正しく解凍します。(Fixed by Kuba Wieczorek; :issue:`4710`.) アーカイブ内"
"のファイルの読み込みが速くなり、 :meth:`~zipfile.ZipFile.read` および :meth:"
"`~zipfile.ZipFile.readline` の割り込みが正しく働くようになりました。"
"(Contributed by Nir Aides; :issue:`7610`.)"

#: ../../whatsnew/2.7.rst:1716
msgid ""
"The :func:`~zipfile.is_zipfile` function now accepts a file object, in "
"addition to the path names accepted in earlier versions.  (Contributed by "
"Gabriel Genellina; :issue:`4756`.)"
msgstr ""
":func:`~zipfile.is_zipfile` 関数は、以前受け付けられていたパス名に加え、ファ"
"イルオブジェクトも受け付けるようになりました。 (Contributed by Gabriel "
"Genellina; :issue:`4756`.)"

#: ../../whatsnew/2.7.rst:1720
msgid ""
"The :meth:`~zipfile.ZipFile.writestr` method now has an optional "
"*compress_type* parameter that lets you override the default compression "
"method specified in the :class:`~zipfile.ZipFile` constructor.  (Contributed "
"by Ronald Oussoren; :issue:`6003`.)"
msgstr ""
":meth:`~zipfile.ZipFile.writestr` メソッドは、 :class:`~zipfile.ZipFile` コン"
"ストラクタで指定されたデフォルトの圧縮メソッドをオーバライドする、オプション"
"の *compress_type* パラメタを追加しました。 (Contributed by Ronald "
"Oussoren; :issue:`6003`.)"

#: ../../whatsnew/2.7.rst:1733
msgid "New module: importlib"
msgstr "新しいモジュール: importlib"

#: ../../whatsnew/2.7.rst:1735
msgid ""
"Python 3.1 includes the :mod:`importlib` package, a re-implementation of the "
"logic underlying Python's :keyword:`import` statement. :mod:`importlib` is "
"useful for implementors of Python interpreters and to users who wish to "
"write new importers that can participate in the import process.  Python 2.7 "
"doesn't contain the complete :mod:`importlib` package, but instead has a "
"tiny subset that contains a single function, :func:`~importlib."
"import_module`."
msgstr ""
"Python 3.1 は、根底の Python の :keyword:`import` 文のロジックの最実装であ"
"る :mod:`importlib` パッケージを含みます。 :mod:`importlib` は、Python インタ"
"プリタの実装者や、import プロセスに関与する新しいインポータを書きたいと願う"
"ユーザにとって便利です。 Python 2.7 は :mod:`importlib` パッケージを完全には"
"含みませんが、代わりに 1 つの関数 :func:`~importlib.import_module` を含む小さ"
"なサブセットがあります。"

#: ../../whatsnew/2.7.rst:1743
msgid ""
"``import_module(name, package=None)`` imports a module.  *name* is a string "
"containing the module or package's name.  It's possible to do relative "
"imports by providing a string that begins with a ``.`` character, such as "
"``..utils.errors``.  For relative imports, the *package* argument must be "
"provided and is the name of the package that will be used as the anchor for "
"the relative import.  :func:`~importlib.import_module` both inserts the "
"imported module into ``sys.modules`` and returns the module object."
msgstr ""
"``import_module(name, package=None)`` はモジュールを import します。 *name* "
"はモジュールまたはパッケージの名前を含む文字列です。 ``..utils.errors`` のよ"
"うに ``.`` 文字で始まる文字列を与えることで、相対 import も可能です。相対 "
"import では、 *package* 引数は必ず与えられなければならず、相対 import のアン"
"カーとして使われるパッケージの名前でなければなりません。 :func:`~importlib."
"import_module` は、 import されたモジュールを ``sys.modules`` に挿入し、モ"
"ジュールオブジェクトを返すこともします。"

#: ../../whatsnew/2.7.rst:1752
msgid "Here are some examples::"
msgstr "ここに例があります::"

#: ../../whatsnew/2.7.rst:1763
msgid ""
":mod:`importlib` was implemented by Brett Cannon and introduced in Python "
"3.1."
msgstr ""
":mod:`importlib` は、Brett Cannon によって実装され、 Python 3.1 に導入されま"
"した。"

#: ../../whatsnew/2.7.rst:1768
msgid "New module: sysconfig"
msgstr "新しいモジュール: sysconfig"

#: ../../whatsnew/2.7.rst:1770
msgid ""
"The :mod:`sysconfig` module has been pulled out of the Distutils package, "
"becoming a new top-level module in its own right. :mod:`sysconfig` provides "
"functions for getting information about Python's build process: compiler "
"switches, installation paths, the platform name, and whether Python is "
"running from its source directory."
msgstr ""
":mod:`sysconfig` モジュールが Distutils パッケージから引き抜かれ、新しいトッ"
"プレベルモジュールになりました。 :mod:`sysconfig` は、Python のビルドプロセス"
"についての以下の情報を得るための関数群を提供しています。コンパイラスイッチ、"
"インストレーションパス、プラットフォーム名、そして Python がソースディレクト"
"リから実行されているかどうかです。"

#: ../../whatsnew/2.7.rst:1777
msgid "Some of the functions in the module are:"
msgstr "モジュールの関数のいくつかを紹介すると:"

#: ../../whatsnew/2.7.rst:1779
msgid ""
":func:`~sysconfig.get_config_var` returns variables from Python's Makefile "
"and the :file:`pyconfig.h` file."
msgstr ""
":func:`~sysconfig.get_config_var` は、Python の Makefile と :file:`pyconfig."
"h` ファイルから変数を返します。"

#: ../../whatsnew/2.7.rst:1781
msgid ""
":func:`~sysconfig.get_config_vars` returns a dictionary containing all of "
"the configuration variables."
msgstr ""
":func:`~sysconfig.get_config_vars` は、すべての環境設定変数を含む辞書を返しま"
"す。"

#: ../../whatsnew/2.7.rst:1783
msgid ""
":func:`~sysconfig.get_path` returns the configured path for a particular "
"type of module: the standard library, site-specific modules, platform-"
"specific modules, etc."
msgstr ""
":func:`~sysconfig.get_path` は、特定のタイプのモジュール、つまり標準ライブラ"
"リ、サイト特有のモジュール、プラットフォーム特有のライブフラリなど、への設定"
"されたパスを返します。"

#: ../../whatsnew/2.7.rst:1786
msgid ""
":func:`~sysconfig.is_python_build` returns true if you're running a binary "
"from a Python source tree, and false otherwise."
msgstr ""
":func:`~sysconfig.is_python_build` は、Python ソースツリーからバイナリを起動"
"していれば真を、そうでなければ偽を返します。"

#: ../../whatsnew/2.7.rst:1789
msgid ""
"Consult the :mod:`sysconfig` documentation for more details and for a "
"complete list of functions."
msgstr ""
"詳細と関数の完全な一覧は :mod:`sysconfig` ドキュメントを参照してください。"

#: ../../whatsnew/2.7.rst:1792
msgid ""
"The Distutils package and :mod:`sysconfig` are now maintained by Tarek "
"Ziadé, who has also started a Distutils2 package (source repository at "
"https://hg.python.org/distutils2/) for developing a next-generation version "
"of Distutils."
msgstr ""
"Distutils パッケージと :mod:`sysconfig` は Tarek Ziadé によってメンテナンスさ"
"れていて、彼は Distutils の新世代版を開発するために Distutils2 パッケージ "
"(source repository at https://hg.python.org/distutils2/) も開始しました。"

#: ../../whatsnew/2.7.rst:1799
msgid "ttk: Themed Widgets for Tk"
msgstr "ttk: Tk のテーマ付きウィジェット"

#: ../../whatsnew/2.7.rst:1801
msgid ""
"Tcl/Tk 8.5 includes a set of themed widgets that re-implement basic Tk "
"widgets but have a more customizable appearance and can therefore more "
"closely resemble the native platform's widgets.  This widget set was "
"originally called Tile, but was renamed to Ttk (for \"themed Tk\") on being "
"added to Tcl/Tck release 8.5."
msgstr ""
"Tcl/Tk 8.5 は、基本的な Tk ウィジェットを最実装しながらより自由な外観のカスタ"
"マイズが広がり、よりネイティブなプラットフォームのウィジェットに似たテーマ付"
"きウィジェット群を含みます。このウィジェット群は、元は Tile と呼ばれていまし"
"たが、Tcl/Tck リリース 8.5 への追加の際に (\"themed Tk\" を略して) Ttk に改名"
"されました。"

#: ../../whatsnew/2.7.rst:1807
msgid ""
"To learn more, read the :mod:`ttk` module documentation.  You may also wish "
"to read the Tcl/Tk manual page describing the Ttk theme engine, available at "
"https://www.tcl.tk/man/tcl8.5/TkCmd/ttk_intro.htm. Some screenshots of the "
"Python/Ttk code in use are at https://code.google.com/archive/p/python-ttk/"
"wikis/Screenshots.wiki."
msgstr ""
"詳しく知るには、 :mod:`ttk` モジュールのドキュメントをお読みください。 "
"https://www.tcl.tk/man/tcl8.5/TkCmd/ttk_intro.htm にある、Ttk テーマエンジン"
"を解説した Tcl/Tk マニュアルページを読むのもいいでしょう。 Python/Ttk コード"
"を動かしているスクリーンショットは https://code.google.com/archive/p/python-"
"ttk/wikis/Screenshots.wiki にあります。"

#: ../../whatsnew/2.7.rst:1814
msgid ""
"The :mod:`ttk` module was written by Guilherme Polo and added in :issue:"
"`2983`.  An alternate version called ``Tile.py``, written by Martin Franklin "
"and maintained by Kevin Walzer, was proposed for inclusion in :issue:`2618`, "
"but the authors argued that Guilherme Polo's work was more comprehensive."
msgstr ""
":mod:`ttk` モジュールは Guilherme Polo によって書かれ、 :issue:`2983` に追加"
"されました。 ``Tile.py`` と呼ばれる別バージョン ``Tile.py`` は、 Martin "
"Franklin によって書かれ、Kevin Walzer によってメンテナンスされているもので、"
"組み込みが :issue:`2618` で提案されましたが、著者は Guilherme Polo の作品のほ"
"うがより包括的であると主張しました。"

#: ../../whatsnew/2.7.rst:1824
msgid "Updated module: unittest"
msgstr "更新されたモジュール: unittest"

#: ../../whatsnew/2.7.rst:1826
msgid ""
"The :mod:`unittest` module was greatly enhanced; many new features were "
"added.  Most of these features were implemented by Michael Foord, unless "
"otherwise noted.  The enhanced version of the module is downloadable "
"separately for use with Python versions 2.4 to 2.6, packaged as the :mod:"
"`unittest2` package, from https://pypi.org/project/unittest2."
msgstr ""
":mod:`unittest` モジュールが大幅に改善されました。多くの新機能が追加されまし"
"た。それらの機能のほとんどは、特に注釈のない限り、 Michael Foord によって実装"
"されました。このモジュールの改善された版は、 Python バージョン 2.4 から 2.6 "
"で使うために、 https://pypi.org/project/unittest2 から :mod:`unittest2` パッ"
"ケージとして別にダウンロードできます。"

#: ../../whatsnew/2.7.rst:1833
msgid ""
"When used from the command line, the module can automatically discover "
"tests.  It's not as fancy as `py.test <http://pytest.org>`__ or `nose "
"<https://nose.readthedocs.io/>`__, but provides a simple way to run tests "
"kept within a set of package directories.  For example, the following "
"command will search the :file:`test/` subdirectory for any importable test "
"files named ``test*.py``::"
msgstr ""
"コマンドラインから使われるとき、このモジュールはテストを自動的に発見します。"
"これは `py.test <http://pytest.org>`__ や `nose <https://nose.readthedocs.io/"
">`__ ほど派手ではありませんが、テストをパッケージディレクトリに保持されたテス"
"トを簡潔に実行する方法を提供します。例えば、以下のコマンドは :file:`test/` サ"
"ブディレクトリから ``test*.py`` という名前の import できるテストファイル検索"
"します::"

#: ../../whatsnew/2.7.rst:1842
msgid ""
"Consult the :mod:`unittest` module documentation for more details. "
"(Developed in :issue:`6001`.)"
msgstr ""
"詳細は、 :mod:`unittest` モジュールのドキュメントを参照してください。 "
"(Developed in :issue:`6001`.)"

#: ../../whatsnew/2.7.rst:1845
msgid "The :func:`~unittest.main` function supports some other new options:"
msgstr ""
":func:`~unittest.main` 関数は、その他幾つかの新しいオプションを提供します:"

#: ../../whatsnew/2.7.rst:1847
msgid ""
":option:`-b <unittest -b>` or :option:`!--buffer` will buffer the standard "
"output and standard error streams during each test.  If the test passes, any "
"resulting output will be discarded; on failure, the buffered output will be "
"displayed."
msgstr ""
":option:`-b <unittest -b>` や :option:`!--buffer` は、標準出力や標準エラース"
"トリームをそれぞれのテストの間バッファに入れます。テストが通れば、結果の出力"
"は全て捨てられます。失敗したら、バッファに入れられた出力が表示されます。"

#: ../../whatsnew/2.7.rst:1852
msgid ""
":option:`-c <unittest -c>` or :option:`!--catch` will cause the control-C "
"interrupt to be handled more gracefully.  Instead of interrupting the test "
"process immediately, the currently running test will be completed and then "
"the partial results up to the interruption will be reported. If you're "
"impatient, a second press of control-C will cause an immediate interruption."
msgstr ""
":option:`-c <unittest -c>` や :option:`!--catch` は、control-C による中断をよ"
"り上品にします。テストプロセスを即座に中断するのではなく、現在実行中のテスト"
"は完了させ、中断までの部分的な結果は報告されます。待ちきれなければ、control-"
"C をもう一度押せば、即座に中断されます。"

#: ../../whatsnew/2.7.rst:1859
msgid ""
"This control-C handler tries to avoid causing problems when the code being "
"tested or the tests being run have defined a signal handler of their own, by "
"noticing that a signal handler was already set and calling it.  If this "
"doesn't work for you, there's a :func:`~unittest.removeHandler` decorator "
"that can be used to mark tests that should have the control-C handling "
"disabled."
msgstr ""
"この control-C ハンドラは、コードがテストされているときや、実行されているテス"
"トが独自のシグナルハンドラを定義したとき、シグナルハンドラがすでに設定されて"
"いてそして呼び出されたということを知らせることで、問題を起こさないようにしま"
"す。これがまずいなら、 :func:`~unittest.removeHandler` デコレータを使って、テ"
"ストが control-C ハンドリングを無効にするべきであると示せます。"

#: ../../whatsnew/2.7.rst:1866
msgid ""
":option:`-f <unittest -f>` or :option:`!--failfast` makes test execution "
"stop immediately when a test fails instead of continuing to execute further "
"tests.  (Suggested by Cliff Dyer and implemented by Michael Foord; :issue:"
"`8074`.)"
msgstr ""
":option:`-f <unittest -f>` や :option:`!--failfast` は、テストが失敗したと"
"き、他のテストを続けるのではなく、テストの実行を即座に停止します。 "
"(Suggested by Cliff Dyer and implemented by Michael Foord; :issue:`8074`.)"

#: ../../whatsnew/2.7.rst:1871
msgid ""
"The progress messages now show 'x' for expected failures and 'u' for "
"unexpected successes when run in verbose mode. (Contributed by Benjamin "
"Peterson.)"
msgstr ""
"進捗メッセージは、verbose モードで実行したとき、期待された失敗に 'x' を、期待"
"されない成功に 'u' を表示するようになりました。(Contributed by Benjamin "
"Peterson.)"

#: ../../whatsnew/2.7.rst:1875
msgid ""
"Test cases can raise the :exc:`~unittest.SkipTest` exception to skip a test "
"(:issue:`1034053`)."
msgstr ""
"テストケースは、テストをスキップするために :exc:`~unittest.SkipTest` 例外を送"
"出します。(:issue:`1034053`)."

#: ../../whatsnew/2.7.rst:1878
msgid ""
"The error messages for :meth:`~unittest.TestCase.assertEqual`, :meth:"
"`~unittest.TestCase.assertTrue`, and :meth:`~unittest.TestCase.assertFalse` "
"failures now provide more information.  If you set the :attr:`~unittest."
"TestCase.longMessage` attribute of your :class:`~unittest.TestCase` classes "
"to true, both the standard error message and any additional message you "
"provide will be printed for failures.  (Added by Michael Foord; :issue:"
"`5663`.)"
msgstr ""
":meth:`~unittest.TestCase.assertEqual`, :meth:`~unittest.TestCase."
"assertTrue`, および :meth:`~unittest.TestCase.assertFalse` 失敗のメッセージ"
"は、提供する情報量が増えました。 :class:`~unittest.TestCase` クラスの :attr:"
"`~unittest.TestCase.longMessage` 属性を真に設定すると、失敗時に、標準のエラー"
"メッセージと追加して提供したメッセージの両方が表示されます。(Added by "
"Michael Foord; :issue:`5663`.)"

#: ../../whatsnew/2.7.rst:1885
msgid ""
"The :meth:`~unittest.TestCase.assertRaises` method now returns a context "
"handler when called without providing a callable object to run.  For "
"example, you can write this::"
msgstr ""
":meth:`~unittest.TestCase.assertRaises` メソッドは、実行する呼び出し可能オブ"
"ジェクトを与えずに呼び出されたとき、コンテキストハンドラを返すようになりまし"
"た。例えば、こう書くことができます::"

#: ../../whatsnew/2.7.rst:1892
msgid "(Implemented by Antoine Pitrou; :issue:`4444`.)"
msgstr "(Implemented by Antoine Pitrou; :issue:`4444`.)"

#: ../../whatsnew/2.7.rst:1896
msgid ""
"Module- and class-level setup and teardown fixtures are now supported. "
"Modules can contain :func:`~unittest.setUpModule` and :func:`~unittest."
"tearDownModule` functions.  Classes can have :meth:`~unittest.TestCase."
"setUpClass` and :meth:`~unittest.TestCase.tearDownClass` methods that must "
"be defined as class methods (using ``@classmethod`` or equivalent).  These "
"functions and methods are invoked when the test runner switches to a test "
"case in a different module or class."
msgstr ""
"モジュールレベルおよびクラスレベルの設定と、ティアダウンフィクスチャがサポー"
"トされました。モジュールは、 :func:`~unittest.setUpModule` および :func:"
"`~unittest.tearDownModule` 関数を含むことができます。クラスは :meth:"
"`~unittest.TestCase.setUpClass` および :meth:`~unittest.TestCase."
"tearDownClass` メソッドを含むことができ、これらは (``@classmethod`` や透過な"
"ものを使って) クラスメソッドとして定義しなければなりません。これらの関数とメ"
"ソッドは、テストランナーが別のモジュールやクラスのテストケースに切り替えると"
"きに呼び出されます。"

#: ../../whatsnew/2.7.rst:1904
msgid ""
"The methods :meth:`~unittest.TestCase.addCleanup` and :meth:`~unittest."
"TestCase.doCleanups` were added. :meth:`~unittest.TestCase.addCleanup` lets "
"you add cleanup functions that will be called unconditionally (after :meth:"
"`~unittest.TestCase.setUp` if :meth:`~unittest.TestCase.setUp` fails, "
"otherwise after :meth:`~unittest.TestCase.tearDown`). This allows for much "
"simpler resource allocation and deallocation during tests (:issue:`5679`)."
msgstr ""
"メソッド :meth:`~unittest.TestCase.addCleanup` および :meth:`~unittest."
"TestCase.doCleanups` が追加されました。 :meth:`~unittest.TestCase."
"addCleanup` で、無条件に呼び出されるクリーンアップ関数を (:meth:`~unittest."
"TestCase.setUp` が失敗したら :meth:`~unittest.TestCase.setUp` の後に、そうで"
"なければ :meth:`~unittest.TestCase.tearDown` の後に) 追加できるようにします。"
"これにより、テスト中のリソースの配置と解放が簡潔になります。(:issue:`5679`)."

#: ../../whatsnew/2.7.rst:1912
msgid ""
"A number of new methods were added that provide more specialized tests.  "
"Many of these methods were written by Google engineers for use in their test "
"suites; Gregory P. Smith, Michael Foord, and GvR worked on merging them into "
"Python's version of :mod:`unittest`."
msgstr ""
"より特化したテストを提供するメソッドがいくつか追加されました。これらのメソッ"
"ドの多くは、Google のエンジニアたちによってそのテストスイートのために書かれま"
"した。Gregory P. Smith, Michael Foord, and GvR が、これを :mod:`unittest` の "
"Python 版にマージしました。"

#: ../../whatsnew/2.7.rst:1917
msgid ""
":meth:`~unittest.TestCase.assertIsNone` and :meth:`~unittest.TestCase."
"assertIsNotNone` take one expression and verify that the result is or is not "
"``None``."
msgstr ""
":meth:`~unittest.TestCase.assertIsNone` および :meth:`~unittest.TestCase."
"assertIsNotNone` はひとつの式を取り、その結果が ``None`` であるか、またはない"
"かを確かめます。"

#: ../../whatsnew/2.7.rst:1920
msgid ""
":meth:`~unittest.TestCase.assertIs` and :meth:`~unittest.TestCase."
"assertIsNot` take two values and check whether the two values evaluate to "
"the same object or not. (Added by Michael Foord; :issue:`2578`.)"
msgstr ""
":meth:`~unittest.TestCase.assertIs` および :meth:`~unittest.TestCase."
"assertIsNot` は、2 つの値を取り、その評価が同一のオブジェクトであるか、または"
"ないかを確かめます。 (Added by Michael Foord; :issue:`2578`.)"

#: ../../whatsnew/2.7.rst:1924
msgid ""
":meth:`~unittest.TestCase.assertIsInstance` and :meth:`~unittest.TestCase."
"assertNotIsInstance` check whether the resulting object is an instance of a "
"particular class, or of one of a tuple of classes.  (Added by Georg Brandl; :"
"issue:`7031`.)"
msgstr ""
":meth:`~unittest.TestCase.assertIsInstance` および :meth:`~unittest.TestCase."
"assertNotIsInstance` は、結果のオブジェクトが特定のクラス、またはタプルにある"
"クラスのいずれかのインスタンスであるかを調べます。(Added by Georg Brandl; :"
"issue:`7031`.)"

#: ../../whatsnew/2.7.rst:1929
msgid ""
":meth:`~unittest.TestCase.assertGreater`, :meth:`~unittest.TestCase."
"assertGreaterEqual`, :meth:`~unittest.TestCase.assertLess`, and :meth:"
"`~unittest.TestCase.assertLessEqual` compare two quantities."
msgstr ""
":meth:`~unittest.TestCase.assertGreater`, :meth:`~unittest.TestCase."
"assertGreaterEqual`, :meth:`~unittest.TestCase.assertLess`, および :meth:"
"`~unittest.TestCase.assertLessEqual` は、二つの量を比較します。"

#: ../../whatsnew/2.7.rst:1933
msgid ""
":meth:`~unittest.TestCase.assertMultiLineEqual` compares two strings, and if "
"they're not equal, displays a helpful comparison that highlights the "
"differences in the two strings.  This comparison is now used by default when "
"Unicode strings are compared with :meth:`~unittest.TestCase.assertEqual`."
msgstr ""
":meth:`~unittest.TestCase.assertMultiLineEqual` は 2 つの文字列を比較し、等し"
"くなければ、2 文字列の差分をハイライトする有益な比較を表示します。この比較"
"は、Unicode 文字列が :meth:`~unittest.TestCase.assertEqual` で比較されるとき"
"のデフォルトに使われるようになりました。"

#: ../../whatsnew/2.7.rst:1938
msgid ""
":meth:`~unittest.TestCase.assertRegexpMatches` and :meth:`~unittest.TestCase."
"assertNotRegexpMatches` checks whether the first argument is a string "
"matching or not matching the regular expression provided as the second "
"argument (:issue:`8038`)."
msgstr ""
":meth:`~unittest.TestCase.assertRegexpMatches` および :meth:`~unittest."
"TestCase.assertNotRegexpMatches` は、第一引数が第二引数として与えられた正規表"
"現にマッチする、またはしない文字列であるかどうかを調べます。 (:issue:`8038`)"

#: ../../whatsnew/2.7.rst:1943
msgid ""
":meth:`~unittest.TestCase.assertRaisesRegexp` checks whether a particular "
"exception is raised, and then also checks that the string representation of "
"the exception matches the provided regular expression."
msgstr ""
":meth:`~unittest.TestCase.assertRaisesRegexp` は、特定の式が送出されるかを調"
"べ、そしてまたその式の文字列表現が与えられた正規表現にマッチするかを調べま"
"す。"

#: ../../whatsnew/2.7.rst:1947
msgid ""
":meth:`~unittest.TestCase.assertIn` and :meth:`~unittest.TestCase."
"assertNotIn` tests whether *first* is or is not in  *second*."
msgstr ""
":meth:`~unittest.TestCase.assertIn` および :meth:`~unittest.TestCase."
"assertNotIn` は、 *first* が *second* に属するか、または属さないかを調べま"
"す。"

#: ../../whatsnew/2.7.rst:1950
msgid ""
":meth:`~unittest.TestCase.assertItemsEqual` tests whether two provided "
"sequences contain the same elements."
msgstr ""
":meth:`~unittest.TestCase.assertItemsEqual` は、2 つの与えられたシーケンスが"
"同じ要素を含むかを調べます。"

#: ../../whatsnew/2.7.rst:1953
msgid ""
":meth:`~unittest.TestCase.assertSetEqual` compares whether two sets are "
"equal, and only reports the differences between the sets in case of error."
msgstr ""
":meth:`~unittest.TestCase.assertSetEqual` は、2 つの集合が等しいか比較し、エ"
"ラーの場合のみ、集合間の差分を報告します。"

#: ../../whatsnew/2.7.rst:1956
msgid ""
"Similarly, :meth:`~unittest.TestCase.assertListEqual` and :meth:`~unittest."
"TestCase.assertTupleEqual` compare the specified types and explain any "
"differences without necessarily printing their full values; these methods "
"are now used by default when comparing lists and tuples using :meth:"
"`~unittest.TestCase.assertEqual`. More generally, :meth:`~unittest.TestCase."
"assertSequenceEqual` compares two sequences and can optionally check whether "
"both sequences are of a particular type."
msgstr ""
"同様に、 :meth:`~unittest.TestCase.assertListEqual` および :meth:`~unittest."
"TestCase.assertTupleEqual` は、指定された型を比較し、差分を説明しますが、完全"
"な値を表示するとはかぎりません。これらのメソッドは、リストやタプルを :meth:"
"`~unittest.TestCase.assertEqual` で比較するときにデフォルトで使われるようにな"
"りました。より一般的には、 :meth:`~unittest.TestCase.assertSequenceEqual` は "
"2 つのシーケンスを比較し、必要なら両方のシーケンスが特定の型であるかを調べま"
"す。"

#: ../../whatsnew/2.7.rst:1964
msgid ""
":meth:`~unittest.TestCase.assertDictEqual` compares two dictionaries and "
"reports the differences; it's now used by default when you compare two "
"dictionaries using :meth:`~unittest.TestCase.assertEqual`.  :meth:`~unittest."
"TestCase.assertDictContainsSubset` checks whether all of the key/value pairs "
"in *first* are found in *second*."
msgstr ""
":meth:`~unittest.TestCase.assertDictEqual` は、二つの辞書を比較し、差分を報告"
"します。これは、辞書を :meth:`~unittest.TestCase.assertEqual` で比較するとき"
"にデフォルトで使われるようになりました。 :meth:`~unittest.TestCase."
"assertDictContainsSubset` は、 *first* に属するキー/値の対の全てが *second* "
"に現れるかを調べます。"

#: ../../whatsnew/2.7.rst:1969
msgid ""
":meth:`~unittest.TestCase.assertAlmostEqual` and :meth:`~unittest.TestCase."
"assertNotAlmostEqual` test whether *first* and *second* are approximately "
"equal.  This method can either round their difference to an optionally-"
"specified number of *places* (the default is 7) and compare it to zero, or "
"require the difference to be smaller than a supplied *delta* value."
msgstr ""
":meth:`~unittest.TestCase.assertAlmostEqual` および :meth:`~unittest."
"TestCase.assertNotAlmostEqual` は、 *first* と *second* がほぼ等しいかを判定"
"します。このメソッドは、オプションで指定された *places* (デフォルトは 7) の数"
"に差を丸めてそれをゼロと比べるか、差が与えられた *delta* の値より小さいことを"
"要求します。"

#: ../../whatsnew/2.7.rst:1975
msgid ""
":meth:`~unittest.TestLoader.loadTestsFromName` properly honors the :attr:"
"`~unittest.TestLoader.suiteClass` attribute of the :class:`~unittest."
"TestLoader`. (Fixed by Mark Roddy; :issue:`6866`.)"
msgstr ""
":meth:`~unittest.TestLoader.loadTestsFromName` は、 :class:`~unittest."
"TestLoader` の :attr:`~unittest.TestLoader.suiteClass` 属性を適切に受け入れま"
"す。(Fixed by Mark Roddy; :issue:`6866`.)"

#: ../../whatsnew/2.7.rst:1979
msgid ""
"A new hook lets you extend the :meth:`~unittest.TestCase.assertEqual` method "
"to handle new data types.  The :meth:`~unittest.TestCase."
"addTypeEqualityFunc` method takes a type object and a function. The function "
"will be used when both of the objects being compared are of the specified "
"type.  This function should compare the two objects and raise an exception "
"if they don't match; it's a good idea for the function to provide additional "
"information about why the two objects aren't matching, much as the new "
"sequence comparison methods do."
msgstr ""
"新しいフックにより、 :meth:`~unittest.TestCase.assertEqual` メソッドを拡張し"
"て新しいデータ型を扱わせられます。 :meth:`~unittest.TestCase."
"addTypeEqualityFunc` メソッドは型オブジェクトと関数を取ります。この関数は、比"
"較される両方のオブジェクトが特定の型であるときに使われます。この関数は、2 つ"
"のオブジェクトを比較し、マッチしなければ例外を送出するべきです。この関数が、"
"新しいシーケンス比較メソッドがするように、2 つのオブジェクトがなぜマッチしな"
"いのかについて追加の情報を提供するのがいいアイデアです。"

#: ../../whatsnew/2.7.rst:1988
msgid ""
":func:`unittest.main` now takes an optional ``exit`` argument.  If false, :"
"func:`~unittest.main` doesn't call :func:`sys.exit`, allowing :func:"
"`~unittest.main` to be used from the interactive interpreter. (Contributed "
"by J. Pablo Fernández; :issue:`3379`.)"
msgstr ""
":func:`unittest.main` はオプションの ``exit`` 引数を取るようになりました。偽"
"の場合、 :func:`~unittest.main` は :func:`sys.exit` を呼び出さず、これにより"
"対話型インタプリタから :func:`~unittest.main` が使えるようになります。"
"(Contributed by J. Pablo Fernández; :issue:`3379`.)"

#: ../../whatsnew/2.7.rst:1993
msgid ""
":class:`~unittest.TestResult` has new :meth:`~unittest.TestResult."
"startTestRun` and :meth:`~unittest.TestResult.stopTestRun` methods that are "
"called immediately before and after a test run.  (Contributed by Robert "
"Collins; :issue:`5728`.)"
msgstr ""
":class:`~unittest.TestResult` に、テストランの直前と直後に呼び出される :meth:"
"`~unittest.TestResult.startTestRun` および :meth:`~unittest.TestResult."
"stopTestRun` が追加されました。 (Contributed by Robert Collins; :issue:"
"`5728`.)"

#: ../../whatsnew/2.7.rst:1997
msgid ""
"With all these changes, the :file:`unittest.py` was becoming awkwardly "
"large, so the module was turned into a package and the code split into "
"several files (by Benjamin Peterson).  This doesn't affect how the module is "
"imported or used."
msgstr ""
"これら一連の変更により、 :file:`unittest.py` は無様に大きくなったので、モ"
"ジュールはパッケージとなり、コードは複数のファイルに分割されました (by "
"Benjamin Peterson)。これは、モジュールをインポートして使う方法には影響しませ"
"ん。"

#: ../../whatsnew/2.7.rst:2005
msgid "http://www.voidspace.org.uk/python/articles/unittest2.shtml"
msgstr "http://www.voidspace.org.uk/python/articles/unittest2.shtml"

#: ../../whatsnew/2.7.rst:2005
msgid ""
"Describes the new features, how to use them, and the rationale for various "
"design decisions.  (By Michael Foord.)"
msgstr ""
"Describes the new features, how to use them, and the rationale for various "
"design decisions.  (By Michael Foord.)"

#: ../../whatsnew/2.7.rst:2011
msgid "Updated module: ElementTree 1.3"
msgstr "更新されたモジュール: ElementTree 1.3"

#: ../../whatsnew/2.7.rst:2013
msgid ""
"The version of the ElementTree library included with Python was updated to "
"version 1.3.  Some of the new features are:"
msgstr ""
"Python に同梱される ElementTree ライブラリのバージョンが、バージョン 1.3 に"
"アップデートされました。新機能の一部は:"

#: ../../whatsnew/2.7.rst:2016
msgid ""
"The various parsing functions now take a *parser* keyword argument giving "
"an :class:`~xml.etree.ElementTree.XMLParser` instance that will be used.  "
"This makes it possible to override the file's internal encoding::"
msgstr ""
"様々な解析関数が、使われる :class:`~xml.etree.ElementTree.XMLParser` インスタ"
"ンスを与える *parser* キーワード引数を取るようになりました。これにより、ファ"
"イルの内部エンコーディングをオーバーライドできるようになりました::"

#: ../../whatsnew/2.7.rst:2023
msgid ""
"Errors in parsing XML now raise a :exc:`ParseError` exception, whose "
"instances have a :attr:`position` attribute containing a (*line*, *column*) "
"tuple giving the location of the problem."
msgstr ""
"XML を解析するときのエラーは、 :exc:`ParseError` 例外を送出するようになりまし"
"た。この例外のインスタンスは、問題の位置を与える (*line*, *column*) タプルを"
"含む :attr:`position` 属性を持ちます。"

#: ../../whatsnew/2.7.rst:2027
msgid ""
"ElementTree's code for converting trees to a string has been significantly "
"reworked, making it roughly twice as fast in many cases.  The :meth:"
"`ElementTree.write() <xml.etree.ElementTree.ElementTree.write>` and :meth:"
"`Element.write` methods now have a *method* parameter that can be "
"\"xml\" (the default), \"html\", or \"text\".  HTML mode will output empty "
"elements as ``<empty></empty>`` instead of ``<empty/>``, and text mode will "
"skip over elements and only output the text chunks.  If you set the :attr:"
"`tag` attribute of an element to ``None`` but leave its children in place, "
"the element will be omitted when the tree is written out, so you don't need "
"to do more extensive rearrangement to remove a single element."
msgstr ""
"ツリーを文字列に変換する ElementTree のコードが大幅に改善され、多くの場合でお"
"およそ 2 倍速くなりました。 :meth:`ElementTree.write() <xml.etree."
"ElementTree.ElementTree.write>` および :meth:`Element.write` メソッドは、 "
"*method* パラメタを追加し、これは \"xml\" (デフォルト), \"html\", または "
"\"text\" にできます。HTML モードは、空の要素を ``<empty/>`` ではなく "
"``<empty></empty>`` として出力し、text モードは要素を無視し、テキストのチャン"
"クのみ出力します。要素の :attr:`tag` 属性を ``None`` に設定してその子はそのま"
"まにすると、ツリーが書き出されるとき、その要素は省かれるので、それ以上再編成"
"することなく要素を一つ取り除けます。"

#: ../../whatsnew/2.7.rst:2039
msgid ""
"Namespace handling has also been improved.  All ``xmlns:<whatever>`` "
"declarations are now output on the root element, not scattered throughout "
"the resulting XML.  You can set the default namespace for a tree by setting "
"the :attr:`default_namespace` attribute and can register new prefixes with :"
"meth:`~xml.etree.ElementTree.register_namespace`.  In XML mode, you can use "
"the true/false *xml_declaration* parameter to suppress the XML declaration."
msgstr ""
"名前空間の操作も改善されました。すべての ``xmlns:<whatever>`` 宣言は、結果の "
"XML に散らばるのではなく、ルート要素に出力されます。 :attr:"
"`default_namespace` 属性を設定することでデフォルトの名前空間を設定でき、 :"
"meth:`~xml.etree.ElementTree.register_namespace` で新しい接頭辞を登録できま"
"す。XML モードでは、XML 宣言を抑制するために真/偽の *xml_declaration* パラメ"
"タを使えます。"

#: ../../whatsnew/2.7.rst:2047
msgid ""
"New :class:`~xml.etree.ElementTree.Element` method: :meth:`~xml.etree."
"ElementTree.Element.extend` appends the items from a sequence to the "
"element's children.  Elements themselves behave like sequences, so it's easy "
"to move children from one element to another::"
msgstr ""
"新しい :class:`~xml.etree.ElementTree.Element`  メソッド: :meth:`~xml.etree."
"ElementTree.Element.extend`  はシーケンスから項目の子に要素を追加します。要素"
"それ自体はシーケンスのように振る舞うので、子をある要素から別の要素に移すのが"
"簡単です::"

#: ../../whatsnew/2.7.rst:2064
msgid ""
"New :class:`Element` method: :meth:`~xml.etree.ElementTree.Element.iter` "
"yields the children of the element as a generator.  It's also possible to "
"write ``for child in elem:`` to loop over an element's children.  The "
"existing method :meth:`getiterator` is now deprecated, as is :meth:"
"`getchildren` which constructs and returns a list of children."
msgstr ""
"新しい :class:`Element` メソッド: :meth:`~xml.etree.ElementTree.Element."
"iter`  は、要素の子をジェネレータとして与えます。また、 ``for child in elem:"
"`` と書いて要素の子に渡ってループできます。既存のメソッド :meth:"
"`getiterator` と、子のリストを構成して返す :meth:`getchildren` は、非推奨にな"
"りました。"

#: ../../whatsnew/2.7.rst:2071
msgid ""
"New :class:`Element` method: :meth:`~xml.etree.ElementTree.Element.itertext` "
"yields all chunks of text that are descendants of the element.  For example::"
msgstr ""
"新しい :class:`Element` メソッド: :meth:`~xml.etree.ElementTree.Element."
"itertext`  は、その要素の子孫であるテキストのチャンクを全て与えます。例えば::"

#: ../../whatsnew/2.7.rst:2082
msgid ""
"Deprecated: using an element as a Boolean (i.e., ``if elem:``) would return "
"true if the element had any children, or false if there were no children.  "
"This behaviour is confusing -- ``None`` is false, but so is a childless "
"element? -- so it will now trigger a :exc:`FutureWarning`.  In your code, "
"you should be explicit: write ``len(elem) != 0`` if you're interested in the "
"number of children, or ``elem is not None``."
msgstr ""
"非推奨: 要素をブール値として使う (すなわち、 ``if elem:``) と、要素が子を持て"
"ば真を、子を持たなければ偽を返します。この振る舞いは紛らわしいです -- "
"``None`` は偽、では子を持たない要素は? -- ですから、 :exc:`FutureWarning` を"
"引き起こすようになりました。コードでは、明示するべきです。子の数に興味がある"
"なら ``len(elem) != 0`` と、または ``elem is not None`` と書いてください。"

#: ../../whatsnew/2.7.rst:2090
msgid ""
"Fredrik Lundh develops ElementTree and produced the 1.3 version; you can "
"read his article describing 1.3 at http://effbot.org/zone/elementtree-13-"
"intro.htm. Florent Xicluna updated the version included with Python, after "
"discussions on python-dev and in :issue:`6472`.)"
msgstr ""
"Fredrik Lundh は ElementTree を開発し、1.3 バージョンを作成しました。 1.3 を"
"解説した彼の記事を http://effbot.org/zone/elementtree-13-intro.htm で読めま"
"す。 Florent Xicluna は、python-dev および :issue:`6472` での議論の後、 "
"Python に含まれるバージョンをアップデートしました。"

#: ../../whatsnew/2.7.rst:2100
msgid "Build and C API Changes"
msgstr "ビルドならびに C API の変更"

#: ../../whatsnew/2.7.rst:2102
msgid "Changes to Python's build process and to the C API include:"
msgstr "Python のビルド過程と C API の変更は以下の通りです:"

#: ../../whatsnew/2.7.rst:2104
msgid ""
"The latest release of the GNU Debugger, GDB 7, can be `scripted using Python "
"<https://sourceware.org/gdb/current/onlinedocs/gdb/Python.html>`__. When you "
"begin debugging an executable program P, GDB will look for a file named ``P-"
"gdb.py`` and automatically read it.  Dave Malcolm contributed a :file:"
"`python-gdb.py` that adds a number of commands useful when debugging Python "
"itself.  For example, ``py-up`` and ``py-down`` go up or down one Python "
"stack frame, which usually corresponds to several C stack frames.  ``py-"
"print`` prints the value of a Python variable, and ``py-bt`` prints the "
"Python stack trace.  (Added as a result of :issue:`8032`.)"
msgstr ""
"GNU デバッガ、GDB 7、の最新のリリースは `Python を使って書けます <https://"
"sourceware.org/gdb/current/onlinedocs/gdb/Python.html>`__ 実行可能なプログラ"
"ム P のデバッグを始めるとき、GDB は ``P-gdb.py`` という名前のファイルをロック"
"し、それを自動的に読み込みます。Dave Malcolm は Python 自体をデバッグするとき"
"に便利ないくつかのコマンドを加える :file:`python-gdb.py` に貢献しました。例え"
"ば、 ``py-up`` および ``py-down`` は、通常いくつかの C スタックフレームに対応"
"する、 Python のスタックフレームを上がったり下がったりします。 ``py-print`` "
"は、Python 変数の値を表示し、 ``py-bt`` は、 Python スタックトレースを表示し"
"ます。(Added as a result of :issue:`8032`.)"

#: ../../whatsnew/2.7.rst:2116
msgid ""
"If you use the :file:`.gdbinit` file provided with Python, the \"pyo\" macro "
"in the 2.7 version now works correctly when the thread being debugged "
"doesn't hold the GIL; the macro now acquires it before printing. "
"(Contributed by Victor Stinner; :issue:`3632`.)"
msgstr ""
"Python に備え付けの :file:`.gdbinit` ファイルを使うと、デバッグされているス"
"レッドが GIL をほじしていないとき、2.7 バージョンの \"pyo\" マクロが正常に動"
"くようになりました。このマクロは、表示の前にこれを取得するようになりました。 "
"(Contributed by Victor Stinner; :issue:`3632`.)"

#: ../../whatsnew/2.7.rst:2121
msgid ""
":c:func:`Py_AddPendingCall` is now thread-safe, letting any worker thread "
"submit notifications to the main Python thread.  This is particularly useful "
"for asynchronous IO operations. (Contributed by Kristján Valur Jónsson; :"
"issue:`4293`.)"
msgstr ""
":c:func:`Py_AddPendingCall` はスレッドセーフになり、ワーカスレッドがメイン "
"Python スレッドに通知を投入することができるようになりました。これは特に、非同"
"時性の IO 処理に便利です。(Contributed by Kristján Valur Jónsson; :issue:"
"`4293`.)"

#: ../../whatsnew/2.7.rst:2126
msgid ""
"New function: :c:func:`PyCode_NewEmpty` creates an empty code object; only "
"the filename, function name, and first line number are required. This is "
"useful for extension modules that are attempting to construct a more useful "
"traceback stack.  Previously such extensions needed to call :c:func:"
"`PyCode_New`, which had many more arguments.  (Added by Jeffrey Yasskin.)"
msgstr ""
"新しい関数: :c:func:`PyCode_NewEmpty` は、空のコードオブジェクトを生成しま"
"す。要求されるのは、ファイル名、関数名、そして最初の行番号だけです。これは、"
"より便利なトレースバックスタックを構成しようとする拡張モジュールに便利です。"
"以前は、このような拡張はより多くの引数を必要とする :c:func:`PyCode_New` を呼"
"び出す必要がありました。(Added by Jeffrey Yasskin.)"

#: ../../whatsnew/2.7.rst:2133
msgid ""
"New function: :c:func:`PyErr_NewExceptionWithDoc` creates a new exception "
"class, just as the existing :c:func:`PyErr_NewException` does, but takes an "
"extra ``char *`` argument containing the docstring for the new exception "
"class.  (Added by 'lekma' on the Python bug tracker; :issue:`7033`.)"
msgstr ""
"新しい関数: :c:func:`PyErr_NewExceptionWithDoc` は、既存の :c:func:"
"`PyErr_NewException` と同じように新しい例外クラスを生成しますが、新しい例外ク"
"ラスの docstring を含む、追加の ``char *`` 引数を取ります。(Added by 'lekma' "
"on the Python bug tracker; :issue:`7033`.)"

#: ../../whatsnew/2.7.rst:2139
msgid ""
"New function: :c:func:`PyFrame_GetLineNumber` takes a frame object and "
"returns the line number that the frame is currently executing. Previously "
"code would need to get the index of the bytecode instruction currently "
"executing, and then look up the line number corresponding to that address.  "
"(Added by Jeffrey Yasskin.)"
msgstr ""
"新しい関数: :c:func:`PyFrame_GetLineNumber` はフレームオブジェクトを取り、そ"
"のフレームが現在実行している行番号を返します。以前は、コードは現在実行してい"
"るバイトコード命令のインデクスを得て、それからそのアドレスに対応する行番号を"
"探索する必要がありました。(Added by Jeffrey Yasskin.)"

#: ../../whatsnew/2.7.rst:2145
msgid ""
"New functions: :c:func:`PyLong_AsLongAndOverflow` and :c:func:"
"`PyLong_AsLongLongAndOverflow`  approximates a Python long integer as a C :c:"
"type:`long` or :c:type:`long long`. If the number is too large to fit into "
"the output type, an *overflow* flag is set and returned to the caller. "
"(Contributed by Case Van Horsen; :issue:`7528` and :issue:`7767`.)"
msgstr ""
"新しい関数: :c:func:`PyLong_AsLongAndOverflow` および :c:func:"
"`PyLong_AsLongLongAndOverflow` は、C の :c:type:`long` や :c:type:`long "
"long` のような Python の長整数に近いです。この数が出力型に適合するには大きす"
"ぎるなら、 *overflow* フラグが設定され、呼び出し元に返されます。(Contributed "
"by Case Van Horsen; :issue:`7528` and :issue:`7767`.)"

#: ../../whatsnew/2.7.rst:2152
msgid ""
"New function: stemming from the rewrite of string-to-float conversion, a "
"new :c:func:`PyOS_string_to_double` function was added.  The old :c:func:"
"`PyOS_ascii_strtod` and :c:func:`PyOS_ascii_atof` functions are now "
"deprecated."
msgstr ""
"新しい関数: 文字列から浮動小数点数への変換から由来する、新しい :c:func:"
"`PyOS_string_to_double` 関数が追加されました。古い :c:func:"
"`PyOS_ascii_strtod` および :c:func:`PyOS_ascii_atof` は、非推奨となりました。"

#: ../../whatsnew/2.7.rst:2157
msgid ""
"New function: :c:func:`PySys_SetArgvEx` sets the value of ``sys.argv`` and "
"can optionally update ``sys.path`` to include the directory containing the "
"script named by ``sys.argv[0]`` depending on the value of an *updatepath* "
"parameter."
msgstr ""
"新しい関数: :c:func:`PySys_SetArgvEx` は、 ``sys.argv`` の値を設定し、 "
"*updatepath* に依ってオプションで ``sys.path`` を更新して ``sys.argv[0]`` で"
"指名されたスクリプトを含むディレクトリを含めることができます。"

#: ../../whatsnew/2.7.rst:2162
msgid ""
"This function was added to close a security hole for applications that embed "
"Python.  The old function, :c:func:`PySys_SetArgv`, would always update "
"``sys.path``, and sometimes it would add the current directory.  This meant "
"that, if you ran an application embedding Python in a directory controlled "
"by someone else, attackers could put a Trojan-horse module in the directory "
"(say, a file named :file:`os.py`) that your application would then import "
"and run."
msgstr ""
"この関数は、Python を埋め込んだアプリケーションのセキュリティホールを塞ぐため"
"に追加されました。古い関数 :c:func:`PySys_SetArgv` は、必ず ``sys.path`` を更"
"新し、これはカレントディレクトリを追加することがあります。これにより、Python "
"を埋め込んだアプリケーションを別の誰かが制御するディレクトリで実行すると、攻"
"撃者がディレクトリにトロイの木馬モジュール(例えば、 :file:`os.py` という名前"
"のファイル) を仕込み、インポートさせ実行させる事ができました。"

#: ../../whatsnew/2.7.rst:2170
msgid ""
"If you maintain a C/C++ application that embeds Python, check whether you're "
"calling :c:func:`PySys_SetArgv` and carefully consider whether the "
"application should be using :c:func:`PySys_SetArgvEx` with *updatepath* set "
"to false."
msgstr ""
"Python を埋め込んだ C/C++ アプリケーションを保守しているなら、 :c:func:"
"`PySys_SetArgv` を呼び出していないか調べ、 *updatepath* を偽に設定した :c:"
"func:`PySys_SetArgvEx` を使うべきかよく考えてください。"

#: ../../whatsnew/2.7.rst:2175
msgid ""
"Security issue reported as `CVE-2008-5983 <https://cve.mitre.org/cgi-bin/"
"cvename.cgi?name=CVE-2008-5983>`_; discussed in :issue:`5753`, and fixed by "
"Antoine Pitrou."
msgstr ""
":issue:`5753` で `CVE-2008-5983 <https://cve.mitre.org/cgi-bin/cvename.cgi?"
"name=CVE-2008-5983>`_ として報告され、Antoine Pitrou によって修正されたたセ"
"キュリティ問題です。"

#: ../../whatsnew/2.7.rst:2179
msgid ""
"New macros: the Python header files now define the following macros: :c:"
"macro:`Py_ISALNUM`, :c:macro:`Py_ISALPHA`, :c:macro:`Py_ISDIGIT`, :c:macro:"
"`Py_ISLOWER`, :c:macro:`Py_ISSPACE`, :c:macro:`Py_ISUPPER`, :c:macro:"
"`Py_ISXDIGIT`, :c:macro:`Py_TOLOWER`, and :c:macro:`Py_TOUPPER`. All of "
"these functions are analogous to the C standard macros for classifying "
"characters, but ignore the current locale setting, because in several places "
"Python needs to analyze characters in a locale-independent way.  (Added by "
"Eric Smith; :issue:`5793`.)"
msgstr ""
"新しいマクロ: Python ヘッダファイルは、以下のマクロを定義しました: :c:macro:"
"`Py_ISALNUM`, :c:macro:`Py_ISALPHA`, :c:macro:`Py_ISDIGIT`, :c:macro:"
"`Py_ISLOWER`, :c:macro:`Py_ISSPACE`, :c:macro:`Py_ISUPPER`, :c:macro:"
"`Py_ISXDIGIT`, :c:macro:`Py_TOLOWER`, および :c:macro:`Py_TOUPPER` 。これらす"
"べての関数は、文字を分類する C の標準マクロと類似ですが、Python は文字をロ"
"ケールに依らず文字を分析したいときがあるため、現在のロケール設定を無視しま"
"す。(Added by Eric Smith; :issue:`5793`.)"

#: ../../whatsnew/2.7.rst:2197
msgid ""
"Removed function: :c:macro:`PyEval_CallObject` is now only available as a "
"macro.  A function version was being kept around to preserve ABI linking "
"compatibility, but that was in 1997; it can certainly be deleted by now.  "
"(Removed by Antoine Pitrou; :issue:`8276`.)"
msgstr ""
"取り除かれた関数: :c:macro:`PyEval_CallObject` は、マクロとしてのみ利用できる"
"ようになりました。関数版は、ABI リンク互換性を保つために残されましたが、それ"
"は 1997 年のことです。今となっては削除するべきです。(Removed by Antoine "
"Pitrou; :issue:`8276`.)"

#: ../../whatsnew/2.7.rst:2202
msgid ""
"New format codes: the :c:func:`PyFormat_FromString`, :c:func:"
"`PyFormat_FromStringV`, and :c:func:`PyErr_Format` functions now accept "
"``%lld`` and ``%llu`` format codes for displaying C's :c:type:`long long` "
"types. (Contributed by Mark Dickinson; :issue:`7228`.)"
msgstr ""
"新しいフォーマットコード: :c:func:`PyFormat_FromString`, :c:func:"
"`PyFormat_FromStringV`, および :c:func:`PyErr_Format` 関数は、C の :c:type:"
"`long long` 型を表示する ``%lld`` および ``%llu`` フォーマットを受け付けるよ"
"うになりました。(Contributed by Mark Dickinson; :issue:`7228`.)"

#: ../../whatsnew/2.7.rst:2208
msgid ""
"The complicated interaction between threads and process forking has been "
"changed.  Previously, the child process created by :func:`os.fork` might "
"fail because the child is created with only a single thread running, the "
"thread performing the :func:`os.fork`. If other threads were holding a lock, "
"such as Python's import lock, when the fork was performed, the lock would "
"still be marked as \"held\" in the new process.  But in the child process "
"nothing would ever release the lock, since the other threads weren't "
"replicated, and the child process would no longer be able to perform imports."
msgstr ""
"スレッドとプロセスのフォークの間の複雑な相互関係が変更されました。以前は、 :"
"func:`os.fork` によって生成された子プロセスは失敗していました。これは、子は動"
"作しているスレッド 1 つだけで生成され、そのスレッドが :func:`os.fork` を処理"
"するからです。他のスレッドが、Python のインポートロックのような、ロックを保持"
"していたら、フォークが実行されたとき、ロックは新しいプロセスでも \"held\" と"
"してマークされたままです。しかし、子プロセスでは、他のスレッドは複製されない"
"ため、ロックを解放するものは何もないので、子プロセスは import の実行を続ける"
"ことができません。"

#: ../../whatsnew/2.7.rst:2218
msgid ""
"Python 2.7 acquires the import lock before performing an :func:`os.fork`, "
"and will also clean up any locks created using the :mod:`threading` module.  "
"C extension modules that have internal locks, or that call :c:func:`fork()` "
"themselves, will not benefit from this clean-up."
msgstr ""
"Python 2.7 は、 :func:`os.fork` を実行する前に import ロックを取得し、また :"
"mod:`threading` モジュールを使って生成された全てのロックをクリーンアップしま"
"す。内部ロックを持っていたり、自身で :c:func:`fork()` を呼び出したりするよう"
"な C 拡張モジュールは、このクリーンアップの恩恵を受けません。"

#: ../../whatsnew/2.7.rst:2224
msgid "(Fixed by Thomas Wouters; :issue:`1590864`.)"
msgstr "(Fixed by Thomas Wouters; :issue:`1590864`.)"

#: ../../whatsnew/2.7.rst:2226
msgid ""
"The :c:func:`Py_Finalize` function now calls the internal :func:`threading."
"_shutdown` function; this prevents some exceptions from being raised when an "
"interpreter shuts down. (Patch by Adam Olsen; :issue:`1722344`.)"
msgstr ""
":c:func:`Py_Finalize` 関数は、内部の :func:`threading._shutdown` 関数を呼び出"
"します。これにより、インタプリタがシャトダウンするときに送出が防がれる例外が"
"あります。(Patch by Adam Olsen; :issue:`1722344`.)"

#: ../../whatsnew/2.7.rst:2231
msgid ""
"When using the :c:type:`PyMemberDef` structure to define attributes of a "
"type, Python will no longer let you try to delete or set a :const:"
"`T_STRING_INPLACE` attribute."
msgstr ""
":c:type:`PyMemberDef` 構造を使って型の属性を定義する際、Python はもはや :"
"const:`T_STRING_INPLACE` 属性を削除または設定させようとはしません。"

#: ../../whatsnew/2.7.rst:2237
msgid ""
"Global symbols defined by the :mod:`ctypes` module are now prefixed with "
"``Py``, or with ``_ctypes``.  (Implemented by Thomas Heller; :issue:`3102`.)"
msgstr ""
":mod:`ctypes` によって定義されたグローバルシンボルには、 ``Py`` または "
"``_ctypes`` が接頭されるようになりました。(Implemented by Thomas Heller; :"
"issue:`3102`.)"

#: ../../whatsnew/2.7.rst:2241
msgid ""
"New configure option: the :option:`!--with-system-expat` switch allows "
"building the :mod:`pyexpat` module to use the system Expat library. "
"(Contributed by Arfrever Frehtes Taifersar Arahesis; :issue:`7609`.)"
msgstr ""
"新しい設定オプション: :option:`!--with-system-expat` スイッチにより、 :mod:"
"`pyexpat` モジュールをビルドして、システム Expat ライブラリを使えます。 "
"(Contributed by Arfrever Frehtes Taifersar Arahesis; :issue:`7609`.)"

#: ../../whatsnew/2.7.rst:2245
msgid ""
"New configure option: the :option:`!--with-valgrind` option will now disable "
"the pymalloc allocator, which is difficult for the Valgrind memory-error "
"detector to analyze correctly. Valgrind will therefore be better at "
"detecting memory leaks and overruns. (Contributed by James Henstridge; :"
"issue:`2422`.)"
msgstr ""
"新しい設定オプション: :option:`!--with-valgrind` オプションは、 Valgrind メモ"
"リエラー検出器が正しく分析するのが難しい pymalloc アロケータを無効にするよう"
"になりました。ですから Valgrind は、メモリリークやオーバーランをより検出でき"
"ます。 (Contributed by James Henstridge; :issue:`2422`.)"

#: ../../whatsnew/2.7.rst:2252
msgid ""
"New configure option: you can now supply an empty string to :option:`!--with-"
"dbmliborder=` in order to disable all of the various DBM modules.  (Added by "
"Arfrever Frehtes Taifersar Arahesis; :issue:`6491`.)"
msgstr ""
"新しい設定オプション: :option:`!--with-dbmliborder=` に空の文字列を与えて様々"
"な DBM モジュールを全て無効にできます。 (Added by Arfrever Frehtes Taifersar "
"Arahesis; :issue:`6491`.)"

#: ../../whatsnew/2.7.rst:2257
msgid ""
"The :program:`configure` script now checks for floating-point rounding bugs "
"on certain 32-bit Intel chips and defines a :c:macro:`X87_DOUBLE_ROUNDING` "
"preprocessor definition.  No code currently uses this definition, but it's "
"available if anyone wishes to use it. (Added by Mark Dickinson; :issue:"
"`2937`.)"
msgstr ""
":program:`configure` スクリプトは、ある種の 32-bit Intel チップ上の浮動小数点"
"丸めバグを調べ、 :c:macro:`X87_DOUBLE_ROUNDING` プリプロセッサ定義を定義しま"
"す。現在この定義を使うコードはありませんが、使うことを望む人がいたら使えま"
"す。(Added by Mark Dickinson; :issue:`2937`.)"

#: ../../whatsnew/2.7.rst:2263
msgid ""
":program:`configure` also now sets a :envvar:`LDCXXSHARED` Makefile variable "
"for supporting C++ linking.  (Contributed by Arfrever Frehtes Taifersar "
"Arahesis; :issue:`1222585`.)"
msgstr ""
":program:`configure` はまた、C++ リンクをサポートする :envvar:`LDCXXSHARED` "
"Makefile を設定するようになりました。 (Contributed by Arfrever Frehtes "
"Taifersar Arahesis; :issue:`1222585`.)"

#: ../../whatsnew/2.7.rst:2267
msgid ""
"The build process now creates the necessary files for pkg-config support.  "
"(Contributed by Clinton Roy; :issue:`3585`.)"
msgstr ""
"ビルドプロセスは、pkg-config サポートに必要なファイルを生成するようになりまし"
"た。(Contributed by Clinton Roy; :issue:`3585`.)"

#: ../../whatsnew/2.7.rst:2270
msgid ""
"The build process now supports Subversion 1.7.  (Contributed by Arfrever "
"Frehtes Taifersar Arahesis; :issue:`6094`.)"
msgstr ""
"ビルドプロセスは、Subversion 1.7 をサポートするようになりました。 "
"(Contributed by Arfrever Frehtes Taifersar Arahesis; :issue:`6094`.)"

#: ../../whatsnew/2.7.rst:2277
msgid "Capsules"
msgstr "カプセル"

#: ../../whatsnew/2.7.rst:2279
msgid ""
"Python 3.1 adds a new C datatype, :c:type:`PyCapsule`, for providing a C API "
"to an extension module.  A capsule is essentially the holder of a C ``void "
"*`` pointer, and is made available as a module attribute; for example, the :"
"mod:`socket` module's API is exposed as ``socket.CAPI``, and :mod:"
"`unicodedata` exposes ``ucnhash_CAPI``.  Other extensions can import the "
"module, access its dictionary to get the capsule object, and then get the "
"``void *`` pointer, which will usually point to an array of pointers to the "
"module's various API functions."
msgstr ""
"Python 3.1 は、拡張モジュールに C API を提供する新しい C データ型 :c:type:"
"`PyCapsule` を追加しました。カプセルは、本質的には C の ``void *`` ポインタの"
"ホルダであり、モジュール属性として利用できるようになります。例えば、 :mod:"
"`socket` モジュールの API は ``socket.CAPI`` として公開されていて、 :mod:"
"`unicodedata` は ``ucnhash_CAPI`` を公開しています。その他の拡張はモジュール"
"を import し、辞書にアクセスしてカプセルオブジェクトを取得し、そしてモジュー"
"ルの様々な API 関数へのポインタの配列を指す ``void *`` ポインタを取得できま"
"す。"

#: ../../whatsnew/2.7.rst:2288
msgid ""
"There is an existing data type already used for this, :c:type:`PyCObject`, "
"but it doesn't provide type safety.  Evil code written in pure Python could "
"cause a segmentation fault by taking a :c:type:`PyCObject` from module A and "
"somehow substituting it for the :c:type:`PyCObject` in module B.   Capsules "
"know their own name, and getting the pointer requires providing the name:"
msgstr ""
"これに使われる既存のデータ型 :c:type:`PyCObject` がありますが、これは型安全性"
"を提供しません。pure Python で書かれた邪悪なコードは、 :c:type:`PyCObject` を"
"モジュール A から取り、どうにかしてそれをモジュール B の :c:type:`PyCObject` "
"で代えることで、セグメンテーション違反を起こし得ます。カプセルは自身の名前を"
"知っていて、ポインタを得るには名前を提供しなければなりません:"

#: ../../whatsnew/2.7.rst:2306
msgid ""
"You are assured that ``vtable`` points to whatever you're expecting. If a "
"different capsule was passed in, :c:func:`PyCapsule_IsValid` would detect "
"the mismatched name and return false.  Refer to :ref:`using-capsules` for "
"more information on using these objects."
msgstr ""
"``vtable`` が期待どおりのものを指すことが保証されます。異なるカプセルが渡され"
"たら、 :c:func:`PyCapsule_IsValid` は不適合な名前を検知し、偽を返します。これ"
"らのオブジェクトの使用について、より詳しい情報は、 :ref:`using-capsules` を参"
"照してください。"

#: ../../whatsnew/2.7.rst:2311
msgid ""
"Python 2.7 now uses capsules internally to provide various extension-module "
"APIs, but the :c:func:`PyCObject_AsVoidPtr` was modified to handle capsules, "
"preserving compile-time compatibility with the :c:type:`CObject` interface.  "
"Use of :c:func:`PyCObject_AsVoidPtr` will signal a :exc:"
"`PendingDeprecationWarning`, which is silent by default."
msgstr ""
"Python 2.7 は、様々な拡張モジュール API を提供するためにカプセルを内部的に使"
"うようになりましたが、カプセルを処理するために :c:func:`PyCObject_AsVoidPtr` "
"が :c:type:`CObject` インタフェースとのコンパイル時互換性は保ったまま変更され"
"ました。 :c:func:`PyCObject_AsVoidPtr` を使うと :exc:"
"`PendingDeprecationWarning` が合図されますが、デフォルトでは言及されません。"

#: ../../whatsnew/2.7.rst:2318
msgid ""
"Implemented in Python 3.1 and backported to 2.7 by Larry Hastings; discussed "
"in :issue:`5630`."
msgstr ""
"Implemented in Python 3.1 and backported to 2.7 by Larry Hastings; discussed "
"in :issue:`5630`."

#: ../../whatsnew/2.7.rst:2325
msgid "Port-Specific Changes: Windows"
msgstr "ポート特有の変更: Windows"

#: ../../whatsnew/2.7.rst:2327
msgid ""
"The :mod:`msvcrt` module now contains some constants from the :file:"
"`crtassem.h` header file: :data:`CRT_ASSEMBLY_VERSION`, :data:"
"`VC_ASSEMBLY_PUBLICKEYTOKEN`, and :data:`LIBRARIES_ASSEMBLY_NAME_PREFIX`. "
"(Contributed by David Cournapeau; :issue:`4365`.)"
msgstr ""
":mod:`msvcrt` モジュールは、 :file:`crtassem.h` からのいくつかの定数を追加し"
"ました。 :data:`CRT_ASSEMBLY_VERSION`, :data:`VC_ASSEMBLY_PUBLICKEYTOKEN`, お"
"よび :data:`LIBRARIES_ASSEMBLY_NAME_PREFIX`. (Contributed by David "
"Cournapeau; :issue:`4365`.)"

#: ../../whatsnew/2.7.rst:2334
msgid ""
"The :mod:`_winreg` module for accessing the registry now implements the :"
"func:`~_winreg.CreateKeyEx` and :func:`~_winreg.DeleteKeyEx` functions, "
"extended versions of previously-supported functions that take several extra "
"arguments.  The :func:`~_winreg.DisableReflectionKey`, :func:`~_winreg."
"EnableReflectionKey`, and :func:`~_winreg.QueryReflectionKey` were also "
"tested and documented. (Implemented by Brian Curtin: :issue:`7347`.)"
msgstr ""
"レジストリへのアクセスのための :mod:`_winreg` モジュールは、以前サポートされ"
"ていた関数群の引数を増やした拡張版である :func:`~_winreg.CreateKeyEx` およ"
"び :func:`~_winreg.DeleteKeyEx` を実装しました。 :func:`~_winreg."
"DisableReflectionKey`, :func:`~_winreg.EnableReflectionKey`, および :func:"
"`~_winreg.QueryReflectionKey` もテストされ、ドキュメント化されました。"
"(Implemented by Brian Curtin: :issue:`7347`.)"

#: ../../whatsnew/2.7.rst:2342
msgid ""
"The new :c:func:`_beginthreadex` API is used to start threads, and the "
"native thread-local storage functions are now used. (Contributed by Kristján "
"Valur Jónsson; :issue:`3582`.)"
msgstr ""
"新しい :c:func:`_beginthreadex` API がスレッドの開始に使われ、ネイティブのス"
"レッドローカルストレージ間数が使われるようになりました。(Contributed by "
"Kristján Valur Jónsson; :issue:`3582`.)"

#: ../../whatsnew/2.7.rst:2346
msgid ""
"The :func:`os.kill` function now works on Windows.  The signal value can be "
"the constants :const:`CTRL_C_EVENT`, :const:`CTRL_BREAK_EVENT`, or any "
"integer.  The first two constants will send :kbd:`Control-C` and :kbd:"
"`Control-Break` keystroke events to subprocesses; any other value will use "
"the :c:func:`TerminateProcess` API.  (Contributed by Miki Tebeka; :issue:"
"`1220212`.)"
msgstr ""
":func:`os.kill` 関数が Windows で働くようになりました。このシグナル値は定数 :"
"const:`CTRL_C_EVENT`, :const:`CTRL_BREAK_EVENT`, その他の整数にできます。最初"
"の 2 定数は :kbd:`Control-C` および :kbd:`Control-Break` 打鍵イベントをサブプ"
"ロセスに送ります。その他の値は、 :c:func:`TerminateProcess` API を使います。"
"(Contributed by Miki Tebeka; :issue:`1220212`.)"

#: ../../whatsnew/2.7.rst:2353
msgid ""
"The :func:`os.listdir` function now correctly fails for an empty path.  "
"(Fixed by Hirokazu Yamamoto; :issue:`5913`.)"
msgstr ""
":func:`os.listdir` 関数は、空のパスに対してちゃんと失敗するようになりまし"
"た。 (Fixed by Hirokazu Yamamoto; :issue:`5913`.)"

#: ../../whatsnew/2.7.rst:2356
msgid ""
"The :mod:`mimelib` module will now read the MIME database from the Windows "
"registry when initializing. (Patch by Gabriel Genellina; :issue:`4969`.)"
msgstr ""
":mod:`mimelib` モジュールは、初期化の際に Windows レジストリから MIME データ"
"ベースを正しく読みこむようになりました。 (Patch by Gabriel Genellina; :issue:"
"`4969`.)"

#: ../../whatsnew/2.7.rst:2363
msgid "Port-Specific Changes: Mac OS X"
msgstr "ポート特有の変更: Mac OS X"

#: ../../whatsnew/2.7.rst:2365
msgid ""
"The path ``/Library/Python/2.7/site-packages`` is now appended to ``sys."
"path``, in order to share added packages between the system installation and "
"a user-installed copy of the same version. (Changed by Ronald Oussoren; :"
"issue:`4865`.)"
msgstr ""
"追加されたパッケージを、システムインストレーションとユーザがインストールした"
"同じバージョンのコピーで共有するために、 ``sys.path`` に ``/Library/"
"Python/2.7/site-packages`` が追加されました。 (Changed by Ronald Oussoren; :"
"issue:`4865`.)"

#: ../../whatsnew/2.7.rst:2372
msgid ""
"As of 2.7.13, this change was removed. ``/Library/Python/2.7/site-"
"packages``, the site-packages directory used by the Apple-supplied system "
"Python 2.7 is no longer appended to ``sys.path`` for user-installed Pythons "
"such as from the python.org installers.  As of macOS 10.12, Apple changed "
"how the system site-packages directory is configured, which could cause "
"installation of pip components, like setuptools, to fail.  Packages "
"installed for the system Python will no longer be shared with user-installed "
"Pythons. (:issue:`28440`)"
msgstr ""

#: ../../whatsnew/2.7.rst:2383
msgid "Port-Specific Changes: FreeBSD"
msgstr "ポート特有の変更: FreeBSD"

#: ../../whatsnew/2.7.rst:2385
msgid ""
"FreeBSD 7.1's :const:`SO_SETFIB` constant, used with :func:`~socket."
"getsockopt`/:func:`~socket.setsockopt` to select an alternate routing table, "
"is now available in the :mod:`socket` module.  (Added by Kyle VanderBeek; :"
"issue:`8235`.)"
msgstr ""
"FreeBSD 7.1 の、他のルーティングテーブルを選択するための :func:`~socket."
"getsockopt`/:func:`~socket.setsockopt` で使われている :const:`SO_SETFIB` 定数"
"が、 :mod:`socket` モジュールで使えるようになりました。(Added by Kyle "
"VanderBeek; :issue:`8235`.)"

#: ../../whatsnew/2.7.rst:2391
msgid "Other Changes and Fixes"
msgstr "その他の変更と修正"

#: ../../whatsnew/2.7.rst:2393
msgid ""
"Two benchmark scripts, :file:`iobench` and :file:`ccbench`, were added to "
"the :file:`Tools` directory.  :file:`iobench` measures the speed of the "
"built-in file I/O objects returned by :func:`open` while performing various "
"operations, and :file:`ccbench` is a concurrency benchmark that tries to "
"measure computing throughput, thread switching latency, and IO processing "
"bandwidth when performing several tasks using a varying number of threads."
msgstr ""
"ベンチマークスクリプトの 2 つ、 :file:`iobench` および :file:`ccbench`, が :"
"file:`Tools` ディレクトリに追加されました。 :file:`iobench` は、様々な演算を"
"実行している間 :func:`open` によって返された組み込みファイル I/O オブジェクト"
"の速度を計測し、 :file:`ccbench` は、変化する数のスレッドを使っていくつかのタ"
"スクを処理するときの計算スループット、スレッド切り替えレイテンシ、IO 処理バン"
"ド幅の計測を試みる同時実行ベンチマークです。"

#: ../../whatsnew/2.7.rst:2401
msgid ""
"The :file:`Tools/i18n/msgfmt.py` script now understands plural forms in :"
"file:`.po` files.  (Fixed by Martin von Löwis; :issue:`5464`.)"
msgstr ""
":file:`Tools/i18n/msgfmt.py` スクリプトは、複数の形式の :file:`.po` ファイル"
"を理解できるようになりました。(Fixed by Martin von Löwis; :issue:`5464`.)"

#: ../../whatsnew/2.7.rst:2405
msgid ""
"When importing a module from a :file:`.pyc` or :file:`.pyo` file with an "
"existing :file:`.py` counterpart, the :attr:`co_filename` attributes of the "
"resulting code objects are overwritten when the original filename is "
"obsolete.  This can happen if the file has been renamed, moved, or is "
"accessed through different paths.  (Patch by Ziga Seilnacht and Jean-Paul "
"Calderone; :issue:`1180193`.)"
msgstr ""
"既存の対応する :file:`.py` が存在する :file:`.pyc` または :file:`.pyo` ファイ"
"ルからモジュールを import するとき、結果のコードオブジェクトの :attr:"
"`co_filename` 属性は、元のファイル名が古くなったとき、上書きされます。これ"
"は、ファイルがリネーム、移動、異なるパスを通したアクセスをされたときに起こり"
"えます。(Patch by Ziga Seilnacht and Jean-Paul Calderone; :issue:`1180193`.)"

#: ../../whatsnew/2.7.rst:2412
msgid ""
"The :file:`regrtest.py` script now takes a :option:`!--randseed=` switch "
"that takes an integer that will be used as the random seed for the :option:"
"`!-r` option that executes tests in random order. The :option:`!-r` option "
"also reports the seed that was used (Added by Collin Winter.)"
msgstr ""
":file:`regrtest.py` スクリプトは、テストを乱順に実行する :option:`!-r` オプ"
"ションの、ランダムシードに使われる整数を取る :option:`!--randseed=` スイッチ"
"を取るようになりました。 :option:`!-r` オプションは、使われたシードも報告しま"
"す。 (Added by Collin Winter.)"

#: ../../whatsnew/2.7.rst:2418
msgid ""
"Another :file:`regrtest.py` switch is :option:`!-j`, which takes an integer "
"specifying how many tests run in parallel. This allows reducing the total "
"runtime on multi-core machines. This option is compatible with several other "
"options, including the :option:`!-R` switch which is known to produce long "
"runtimes. (Added by Antoine Pitrou, :issue:`6152`.)  This can also be used "
"with a new :option:`!-F` switch that runs selected tests in a loop until "
"they fail.  (Added by Antoine Pitrou; :issue:`7312`.)"
msgstr ""
"もう一つの :file:`regrtest.py` スイッチは :option:`!-j` で、いくつのテストを"
"並行して実行するかを指定する整数です。これにより、マルチコア機での合計実行時"
"間を短縮できます。このオプションは、実行時間を長くすることで知られている :"
"option:`!-R` スイッチなど、いくつかの他のオプションと互換です。 (Added by "
"Antoine Pitrou, :issue:`6152`.) これはまた、選ばれたテストを失敗するまでルー"
"プして実行する :option:`!-F` スイッチとも同時に使えます。(Added by Antoine "
"Pitrou; :issue:`7312`.)"

#: ../../whatsnew/2.7.rst:2427
msgid ""
"When executed as a script, the :file:`py_compile.py` module now accepts "
"``'-'`` as an argument, which will read standard input for the list of "
"filenames to be compiled.  (Contributed by Piotr Ożarowski; :issue:`8233`.)"
msgstr ""
"スクリプトとして実行されるとき、 :file:`py_compile.py` モジュールは標準入力を"
"読み込んでコンパイルするファイル名のリストとする ``'-'`` を引数として受け付け"
"るようになりました。(Contributed by Piotr Ożarowski; :issue:`8233`.)"

#: ../../whatsnew/2.7.rst:2435
msgid "Porting to Python 2.7"
msgstr "Python 2.7 への移植"

#: ../../whatsnew/2.7.rst:2437
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr ""
"このセクションでは前述の変更とバグフィックスにより必要となるかもしれないコー"
"ドの変更を列挙します:"

#: ../../whatsnew/2.7.rst:2440
msgid ""
"The :func:`range` function processes its arguments more consistently; it "
"will now call :meth:`__int__` on non-float, non-integer arguments that are "
"supplied to it.  (Fixed by Alexander Belopolsky; :issue:`1533`.)"
msgstr ""
":func:`range` 関数は、引数をより一貫して処理するようになりました。浮動小数点"
"数でもなく整数でもない引数が与えられたら、その :meth:`__int__` を呼び出すよう"
"になりました。(Fixed by Alexander Belopolsky; :issue:`1533`.)"

#: ../../whatsnew/2.7.rst:2445
msgid ""
"The string :meth:`format` method changed the default precision used for "
"floating-point and complex numbers from 6 decimal places to 12, which "
"matches the precision used by :func:`str`. (Changed by Eric Smith; :issue:"
"`5920`.)"
msgstr ""
"文字列 :meth:`format` メソッドは浮動小数点数および複素数に使われるデフォルト"
"の精度を、 :func:`str` で使われる精度に合わせ、小数第 6 位から 12 位に変更し"
"ました。 (Changed by Eric Smith; :issue:`5920`.)"

#: ../../whatsnew/2.7.rst:2450
msgid ""
"Because of an optimization for the :keyword:`with` statement, the special "
"methods :meth:`__enter__` and :meth:`__exit__` must belong to the object's "
"type, and cannot be directly attached to the object's instance.  This "
"affects new-style classes (derived from :class:`object`) and C extension "
"types.  (:issue:`6101`.)"
msgstr ""
":keyword:`with` 文の最適化のため、特殊メソッド :meth:`__enter__` および :"
"meth:`__exit__` はオブジェクトの型に属さなければならず、オブジェクトのインス"
"タンスには直接取り付けられません。これは (:class:`object` から導出された) 新"
"スタイルクラスと C 拡張型に影響します。 (:issue:`6101`.)"

#: ../../whatsnew/2.7.rst:2456
msgid ""
"Due to a bug in Python 2.6, the *exc_value* parameter to :meth:`__exit__` "
"methods was often the string representation of the exception, not an "
"instance.  This was fixed in 2.7, so *exc_value* will be an instance as "
"expected.  (Fixed by Florent Xicluna; :issue:`7853`.)"
msgstr ""
"Python 2.6 におけるバグのため、 :meth:`__exit__` の *exc_value* パラメタはは"
"よく、例外のインスタンスではなく文字列表現になっていました。これは 2.7 では修"
"正され、 *exc_value* は期待通りインスタンスになります。 (Fixed by Florent "
"Xicluna; :issue:`7853`.)"

#: ../../whatsnew/2.7.rst:2466
msgid "In the standard library:"
msgstr "標準ライブラリでは:"

#: ../../whatsnew/2.7.rst:2468
msgid ""
"Operations with :class:`~datetime.datetime` instances that resulted in a "
"year falling outside the supported range didn't always raise :exc:"
"`OverflowError`.  Such errors are now checked more carefully and will now "
"raise the exception. (Reported by Mark Leander, patch by Anand B. Pillai and "
"Alexander Belopolsky; :issue:`7150`.)"
msgstr ""
"年がサポートされている範囲外にはみ出るような :class:`~datetime.datetime` イン"
"スタンスの演算が、 :exc:`OverflowError` を送出しないことがありました。このよ"
"うなエラーはより注意深く調べられ、例外を送出するようになりました。(Reported "
"by Mark Leander, patch by Anand B. Pillai and Alexander Belopolsky; :issue:"
"`7150`.)"

#: ../../whatsnew/2.7.rst:2474
msgid ""
"When using :class:`~decimal.Decimal` instances with a string's :meth:"
"`format` method, the default alignment was previously left-alignment.  This "
"has been changed to right-alignment, which might change the output of your "
"programs. (Changed by Mark Dickinson; :issue:`6857`.)"
msgstr ""
":class:`~decimal.Decimal` インスタンスを文字列の :meth:`format` メソッドに使"
"うとき、デフォルトの揃えは以前は左揃えでした。これは右揃えに変更され、プログ"
"ラムの出力が変わるかもしれません。(Changed by Mark Dickinson; :issue:`6857`.)"

#: ../../whatsnew/2.7.rst:2480
msgid ""
"Comparisons involving a signaling NaN value (or ``sNAN``) now signal :const:"
"`~decimal.InvalidOperation` instead of silently returning a true or false "
"value depending on the comparison operator.  Quiet NaN values (or ``NaN``) "
"are now hashable.  (Fixed by Mark Dickinson; :issue:`7279`.)"
msgstr ""
"signaling NaN (あるいは ``sNAN``) との比較は、暗黙に比較演算に応じて真偽値を"
"返すのではなく、 :const:`~decimal.InvalidOperation` 例外を発生させるようにな"
"りました。 Quiet NaN (あるいは ``NAN``) はハッシュ可能になりました。 (Fixed "
"by Mark Dickinson; :issue:`7279`.)"

#: ../../whatsnew/2.7.rst:2486
msgid ""
"The ElementTree library, :mod:`xml.etree`, no longer escapes ampersands and "
"angle brackets when outputting an XML processing instruction (which looks "
"like `<?xml-stylesheet href=\"#style1\"?>`) or comment (which looks like "
"`<!-- comment -->`). (Patch by Neil Muller; :issue:`2746`.)"
msgstr ""
"ElementTree ライブラリ :mod:`xml.etree` は、 (`<?xml-stylesheet "
"href=\"#style1\"?>` のような) 命令や (`<!-- comment -->` のような) コメントを"
"処理する XML を出力するときにアンパサンドおよび角括弧をエスケープしなくなりま"
"した。 (Patch by Neil Muller; :issue:`2746`.)"

#: ../../whatsnew/2.7.rst:2492
msgid ""
"The :meth:`~StringIO.StringIO.readline` method of :class:`~StringIO."
"StringIO` objects now does nothing when a negative length is requested, as "
"other file-like objects do.  (:issue:`7348`)."
msgstr ""
":class:`~StringIO.StringIO` オブジェクトの :meth:`~StringIO.StringIO."
"readline` メソッドは負の長さが要求されたとき、ほかのファイル風オブジェクトと"
"同じように、何もしなくなりました。(:issue:`7348`)"

#: ../../whatsnew/2.7.rst:2535
msgid "For C extensions:"
msgstr "C 拡張では:"

#: ../../whatsnew/2.7.rst:2537
msgid ""
"C extensions that use integer format codes with the ``PyArg_Parse*`` family "
"of functions will now raise a :exc:`TypeError` exception instead of "
"triggering a :exc:`DeprecationWarning` (:issue:`5080`)."
msgstr ""
"``PyArg_Parse*`` 系統の関数で整数フォーマットコードを使う C 拡張は、 :exc:"
"`DeprecationWarning` を引き起こすのではなく、 :exc:`TypeError` 例外を送出する"
"ようになりました。(:issue:`5080`)"

#: ../../whatsnew/2.7.rst:2541
msgid ""
"Use the new :c:func:`PyOS_string_to_double` function instead of the old :c:"
"func:`PyOS_ascii_strtod` and :c:func:`PyOS_ascii_atof` functions, which are "
"now deprecated."
msgstr ""
"非推奨となった古い :c:func:`PyOS_ascii_strtod` および :c:func:"
"`PyOS_ascii_atof` 関数の代わりに、新しい :c:func:`PyOS_string_to_double` 関数"
"を使ってください。"

#: ../../whatsnew/2.7.rst:2545
msgid "For applications that embed Python:"
msgstr "Python を埋め込んだアプリケーションでは:"

#: ../../whatsnew/2.7.rst:2547
msgid ""
"The :c:func:`PySys_SetArgvEx` function was added, letting applications close "
"a security hole when the existing :c:func:`PySys_SetArgv` function was "
"used.  Check whether you're calling :c:func:`PySys_SetArgv` and carefully "
"consider whether the application should be using :c:func:`PySys_SetArgvEx` "
"with *updatepath* set to false."
msgstr ""
":c:func:`PySys_SetArgvEx` 関数が追加され、既存の :c:func:`PySys_SetArgv` 関数"
"が使われた時のセキュリティホールを塞ぐことができるようになりました。 :c:func:"
"`PySys_SetArgv` を呼び出していないか調べ、 *updatepath* を偽に設定した :c:"
"func:`PySys_SetArgvEx` を使うべきかよく考えてください。"

#: ../../whatsnew/2.7.rst:2560
msgid "New Features Added to Python 2.7 Maintenance Releases"
msgstr "Python 2.7 メンテナンスリリースで追加された新機能"

#: ../../whatsnew/2.7.rst:2562
msgid ""
"New features may be added to Python 2.7 maintenance releases when the "
"situation genuinely calls for it. Any such additions must go through the "
"Python Enhancement Proposal process, and make a compelling case for why they "
"can't be adequately addressed by either adding the new feature solely to "
"Python 3, or else by publishing it on the Python Package Index."
msgstr ""
"Python 2.7 メンテナンスリリースでは、正真正銘それが求められる状況では、新しい"
"機能が追加される場合があります。そのような追加のどんなものでも Python "
"Enhancement Proposal プロセスを通過しなければなりません。Python 3 だけに新し"
"い機能を追加することによっても Python Package Index に公開することによっても"
"いずれでも十分ではないと言えるだけのやむにやまれない理由付けが必要です。"

#: ../../whatsnew/2.7.rst:2568
msgid ""
"In addition to the specific proposals listed below, there is a general "
"exemption allowing new ``-3`` warnings to be added in any Python 2.7 "
"maintenance release."
msgstr ""
"個別の提案は以下にリストしますが、全ての Python 2.7 メンテナンスリリースに追"
"加される新しい ``-3`` 警告は除いています。"

#: ../../whatsnew/2.7.rst:2574
msgid "Two new environment variables for debug mode"
msgstr "デバッグモード用の2つの新しい環境変数"

#: ../../whatsnew/2.7.rst:2576
msgid ""
"In debug mode, the ``[xxx refs]`` statistic is not written by default, the :"
"envvar:`PYTHONSHOWREFCOUNT` environment variable now must also be set. "
"(Contributed by Victor Stinner; :issue:`31733`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2580
msgid ""
"When Python is compiled with ``COUNT_ALLOC`` defined, allocation counts are "
"no longer dumped by default anymore: the :envvar:`PYTHONSHOWALLOCCOUNT` "
"environment variable must now also be set. Moreover, allocation counts are "
"now dumped into stderr, rather than stdout. (Contributed by Victor Stinner; :"
"issue:`31692`.)"
msgstr ""

#: ../../whatsnew/2.7.rst:2589
msgid "PEP 434: IDLE Enhancement Exception for All Branches"
msgstr "PEP 434: IDLE 拡張についての全てのブランチにおける例外的な扱い"

#: ../../whatsnew/2.7.rst:2591
msgid ""
":pep:`434` describes a general exemption for changes made to the IDLE "
"development environment shipped along with Python. This exemption makes it "
"possible for the IDLE developers to provide a more consistent user "
"experience across all supported versions of Python 2 and 3."
msgstr ""
":pep:`434` は、Pythonと一緒に出荷されるIDLE開発環境に変更を加えるための一般的"
"な免除事項を説明します。これは、IDLE の開発者 が Python 2 と 3 のすべてのサ"
"ポートされているバージョン間でより一貫したユーザーエクスペリエンスを提供する"
"ためのものです。"

#: ../../whatsnew/2.7.rst:2596
msgid ""
"For details of any IDLE changes, refer to the NEWS file for the specific "
"release."
msgstr ""
"全ての IDLE の変更についての詳細は、個別のリリースについてのNEWS ファイルを参"
"照してください。"

#: ../../whatsnew/2.7.rst:2601
msgid "PEP 466: Network Security Enhancements for Python 2.7"
msgstr "PEP 466: Python 2.7 のためのネットワークセキュリティ拡張"

#: ../../whatsnew/2.7.rst:2603
msgid ""
":pep:`466` describes a number of network security enhancement proposals that "
"have been approved for inclusion in Python 2.7 maintenance releases, with "
"the first of those changes appearing in the Python 2.7.7 release."
msgstr ""
":pep:`466` は、 Python 2.7 メンテナンスリリースに含めることを認められた数多く"
"のネットワークセキュリティ強化についての提案を記述しています。それら変更の最"
"初のものは Python 2.7.7 に初めて登場しました。"

#: ../../whatsnew/2.7.rst:2607
msgid ":pep:`466` related features added in Python 2.7.7:"
msgstr "Python 2.7.7 に :pep:`466` 関連で追加された機能:"

#: ../../whatsnew/2.7.rst:2609
msgid ""
":func:`hmac.compare_digest` was backported from Python 3 to make a timing "
"attack resistant comparison operation available to Python 2 applications. "
"(Contributed by Alex Gaynor; :issue:`21306`.)"
msgstr ""
":func:`hmac.compare_digest` が Python 3 からバックポートされました。これによ"
"り Python 2 アプリケーションで  timing attack resistant comparison operation "
"が利用可能になります (Contributed by Alex Gaynor; :issue:`21306`.)"

#: ../../whatsnew/2.7.rst:2613
msgid ""
"OpenSSL 1.0.1g was upgraded in the official Windows installers published on "
"python.org. (Contributed by Zachary Ware; :issue:`21462`.)"
msgstr ""
"python.org で公開される公式 Windows インストーラのビルドに使う OpenSSL が "
"1.0.1g にアップグレードされました . (Contributed by Zachary Ware; :issue:"
"`21462`.)"

#: ../../whatsnew/2.7.rst:2616
msgid ":pep:`466` related features added in Python 2.7.8:"
msgstr "Python 2.7.8 に :pep:`466` 関連で追加された機能:"

#: ../../whatsnew/2.7.rst:2618
msgid ""
":func:`hashlib.pbkdf2_hmac` was backported from Python 3 to make a hashing "
"algorithm suitable for secure password storage broadly available to Python 2 "
"applications. (Contributed by Alex Gaynor; :issue:`21304`.)"
msgstr ""
":func:`hashlib.pbkdf2_hmac` が Python 3 からバックポートされました。これによ"
"り Python 2 アプリケーションでも、安全なパスワード格納に広範に使うのに相応し"
"いハッシュアルゴリズムが利用できます (Contributed by Alex Gaynor; :issue:"
"`21304`.)"

#: ../../whatsnew/2.7.rst:2622
msgid ""
"OpenSSL 1.0.1h was upgraded for the official Windows installers published on "
"python.org. (contributed by Zachary Ware in :issue:`21671` for CVE-2014-0224)"
msgstr ""
"python.org で公開される公式 Windows インストーラのビルドに使う OpenSSL が "
"1.0.1h にアップグレードされました (contributed by Zachary Ware in :issue:"
"`21671` for CVE-2014-0224)"

#: ../../whatsnew/2.7.rst:2625
msgid ":pep:`466` related features added in Python 2.7.9:"
msgstr "Python 2.7.9 に :pep:`466` 関連で追加された機能:"

#: ../../whatsnew/2.7.rst:2627
msgid ""
"Most of Python 3.4's :mod:`ssl` module was backported. This means :mod:`ssl` "
"now supports Server Name Indication, TLS1.x settings, access to the platform "
"certificate store, the :class:`~ssl.SSLContext` class, and other features. "
"(Contributed by Alex Gaynor and David Reid; :issue:`21308`.)"
msgstr ""
"Python 3.4 の :mod:`ssl` モジュールのほとんどがバックポートされました。つま"
"り :mod:`ssl` は今や、Server Name Indication, TLS1.x 設定, platform "
"certificate store へのアクセス, :class:`~ssl.SSLContext` クラス, その他機能が"
"使えます (Contributed by Alex Gaynor and David Reid; :issue:`21308`.)"

#: ../../whatsnew/2.7.rst:2632
msgid ""
"Refer to the \"Version added: 2.7.9\" notes in the module documentation for "
"specific details."
msgstr ""
"個別の詳細については、モジュールのドキュメンテーション内の \"バージョン "
"2.7.9 で追加\" の注釈を参照してください。"

#: ../../whatsnew/2.7.rst:2635
msgid ""
":func:`os.urandom` was changed to cache a file descriptor to ``/dev/"
"urandom`` instead of reopening ``/dev/urandom`` on every call. (Contributed "
"by Alex Gaynor; :issue:`21305`.)"
msgstr ""
":func:`os.urandom` は、呼び出しのたびに ``/dev/urandom`` を開きなおす代わり"
"に ``/dev/urandom`` のファイル記述子をキャッシュするように変更されました。"
"(Contributed by Alex Gaynor; :issue:`21305`.)"

#: ../../whatsnew/2.7.rst:2639
msgid ""
":data:`hashlib.algorithms_guaranteed` and :data:`hashlib."
"algorithms_available` were backported from Python 3 to make it easier for "
"Python 2 applications to select the strongest available hash algorithm. "
"(Contributed by Alex Gaynor in :issue:`21307`)"
msgstr ""
":data:`hashlib.algorithms_guaranteed` と :data:`hashlib."
"algorithms_available` が Python 3 からバックポートされました。これにより "
"Python 2 アプリケーションが可能な限り最強のハッシュアルゴリズムを選択するのが"
"容易になります (Contributed by Alex Gaynor in :issue:`21307`)"

#: ../../whatsnew/2.7.rst:2646
msgid "PEP 477: Backport ensurepip (PEP 453) to Python 2.7"
msgstr "PEP 477: Python 2.7 への ensurepip (PEP 453) バックポート"

#: ../../whatsnew/2.7.rst:2648
msgid ""
":pep:`477` approves the inclusion of the :pep:`453` ensurepip module and the "
"improved documentation that was enabled by it in the Python 2.7 maintenance "
"releases, appearing first in the Python 2.7.9 release."
msgstr ""
":pep:`477` が Python 2.7 メンテナンスリリースに :pep:`453` ensurepip モジュー"
"ル, それによって可能になるドキュメンテーションの改善を含めることを認め、"
"Python 2.7.9 リリースではじめてお披露目されました。"

#: ../../whatsnew/2.7.rst:2654
msgid "Bootstrapping pip By Default"
msgstr "デフォルトでの pip のブートストラッピング"

#: ../../whatsnew/2.7.rst:2656
msgid ""
"The new :mod:`ensurepip` module (defined in :pep:`453`) provides a standard "
"cross-platform mechanism to bootstrap the pip installer into Python "
"installations. The version of ``pip`` included with Python 2.7.9 is ``pip`` "
"1.5.6, and future 2.7.x maintenance releases will update the bundled version "
"to the latest version of ``pip`` that is available at the time of creating "
"the release candidate."
msgstr ""
"新しい :mod:`ensurepip` モジュール(:pep:`453` で定義されています)は標準のクロ"
"スプラットフォームのメカニズムで、Python インストールに pip インストーラを"
"ブートストラップします。Python 2.7.9 に含まれる ``pip`` のバージョンは "
"``pip`` 1.5.6 で、将来の 2.7.x メンテナンスリリースでは Python のリリース候補"
"の作成時点で入手出来る最新バージョンの ``pip`` がバンドルされる予定です。"

#: ../../whatsnew/2.7.rst:2663
msgid ""
"By default, the commands ``pip``, ``pipX`` and ``pipX.Y`` will be installed "
"on all platforms (where X.Y stands for the version of the Python "
"installation), along with the ``pip`` Python package and its dependencies."
msgstr ""
"デフォルトでは ``pip`` , ``pipX`` , ``pipX.Y`` コマンドが全てのプラットフォー"
"ムに、Python パッケージ ``pip`` とその依存物とともにインストールされます(X. "
"Y はインストールされる Python のバージョン)。"

#: ../../whatsnew/2.7.rst:2667
msgid ""
"For CPython :ref:`source builds on POSIX systems <building-python-on-unix>`, "
"the ``make install`` and ``make altinstall`` commands do not bootstrap "
"``pip`` by default.  This behaviour can be controlled through configure "
"options, and overridden through Makefile options."
msgstr ""
"CPython の :ref:`source builds on POSIX systems <building-python-on-unix>` で"
"は ``make install``, ``make altinstall`` コマンドはデフォルトでは ``pip`` "
"ブートストラップを行いません。この振る舞いは configure のオプションを変更し"
"て Makefile を作ることで変更できます。"

#: ../../whatsnew/2.7.rst:2672
msgid ""
"On Windows and Mac OS X, the CPython installers now default to installing "
"``pip`` along with CPython itself (users may opt out of installing it during "
"the installation process). Window users will need to opt in to the automatic "
"``PATH`` modifications to have ``pip`` available from the command line by "
"default, otherwise it can still be accessed through the Python launcher for "
"Windows as ``py -m pip``."
msgstr ""
"Windows と Mac OS X では CPython インストーラはそれ自身と一緒に ``pip`` をデ"
"フォルトでインストールするようになっています(ユーザはインストールプロセスで除"
"外するかもしれませんが)。Windows ユーザは ``pip`` がコマンドラインからデフォ"
"ルトで利用可能なように ``PATH`` の自動修正するかの選択を求められます。そうし"
"ない場合でも Windows のための Python ランチャで ``py -m pip`` のようにすれば"
"良いです。"

#: ../../whatsnew/2.7.rst:2679
msgid ""
"As `discussed in the PEP`__, platform packagers may choose not to install "
"these commands by default, as long as, when invoked, they provide clear and "
"simple directions on how to install them on that platform (usually using the "
"system package manager)."
msgstr ""
"`discussed in the PEP <https://www.python.org/dev/peps/pep-0453/"
"#recommendations-for-downstream-distributors>`_ の通りプラットフォームのパッ"
"ケージャは、プラットフォームでのそれらインストールの単純明快な手段を自身が提"
"供する(普通システムのパッケージマネージャ)からと言う理由で、デフォルトでのこ"
"れらコマンドのインストールを選択しないかもしれません。"

#: ../../whatsnew/2.7.rst:2688
msgid "Documentation Changes"
msgstr "ドキュメントの変更"

#: ../../whatsnew/2.7.rst:2690
msgid ""
"As part of this change, the :ref:`installing-index` and :ref:`distributing-"
"index` sections of the documentation have been completely redesigned as "
"short getting started and FAQ documents. Most packaging documentation has "
"now been moved out to the Python Packaging Authority maintained `Python "
"Packaging User Guide <http://packaging.python.org>`__ and the documentation "
"of the individual projects."
msgstr ""
"この変更の一部は、 :ref:`installing-index` と :ref:`distributing-index` セク"
"ションがより手短な始め方として完全にデザインし直されたことと、FAQ ドキュメン"
"トです。ほとんどのパッケージングについてのドキュメンテーションは `Python "
"Packaging User Guide <http://packaging.python.org>`__  が保守している Python "
"Packaging Authority に移動されて、独立したプロジェクトのドキュメンテーション"
"になっています。"

#: ../../whatsnew/2.7.rst:2698
msgid ""
"However, as this migration is currently still incomplete, the legacy "
"versions of those guides remaining available as :ref:`install-index` and :"
"ref:`distutils-index`."
msgstr ""
"ですが、この移行は現在のところまだ少し不完全ですので、これらのガイドのレガ"
"シーなバージョンは :ref:`install-index` と :ref:`distutils-index` に残してあ"
"ります。"

#: ../../whatsnew/2.7.rst:2705
msgid ":pep:`453` -- Explicit bootstrapping of pip in Python installations"
msgstr ""
":pep:`453` -- Python インストールの際の明示的なpipのブートストラッピング"

#: ../../whatsnew/2.7.rst:2705
msgid ""
"PEP written by Donald Stufft and Nick Coghlan, implemented by Donald Stufft, "
"Nick Coghlan, Martin von Löwis and Ned Deily."
msgstr ""
"PEP は Donald Stufft と Nick Coghlan によって書かれ、Donald Stufft, Nick "
"Coghlan, Martin von Löwis, Ned Deily により実装されました。"

#: ../../whatsnew/2.7.rst:2709
msgid ""
"PEP 476: Enabling certificate verification by default for stdlib http clients"
msgstr ""
"PEP 476: stdlib http クライアントが証明書の検証を行うのをデフォルトで有効化"

#: ../../whatsnew/2.7.rst:2711
msgid ""
":pep:`476` updated :mod:`httplib` and modules which use it, such as :mod:"
"`urllib2` and :mod:`xmlrpclib`, to now verify that the server presents a "
"certificate which is signed by a Certificate Authority in the platform trust "
"store and whose hostname matches the hostname being requested by default, "
"significantly improving security for many applications. This change was made "
"in the Python 2.7.9 release."
msgstr ""

#: ../../whatsnew/2.7.rst:2718
msgid ""
"For applications which require the old previous behavior, they can pass an "
"alternate context::"
msgstr ""
"以前の古い振る舞いが必要なアプリケーションでは、代わりとなるコンテキストを渡"
"せます::"

#: ../../whatsnew/2.7.rst:2735
msgid "PEP 493: HTTPS verification migration tools for Python 2.7"
msgstr "PEP 493: HTTPS verification migration tools for Python 2.7"

#: ../../whatsnew/2.7.rst:2737
msgid ""
":pep:`493` provides additional migration tools to support a more incremental "
"infrastructure upgrade process for environments containing applications and "
"services relying on the historically permissive processing of server "
"certificates when establishing client HTTPS connections.  These additions "
"were made in the Python 2.7.12 release."
msgstr ""

#: ../../whatsnew/2.7.rst:2743
msgid ""
"These tools are intended for use in cases where affected applications and "
"services can't be modified to explicitly pass a more permissive SSL context "
"when establishing the connection."
msgstr ""

#: ../../whatsnew/2.7.rst:2747
msgid ""
"For applications and services which can't be modified at all, the new "
"``PYTHONHTTPSVERIFY`` environment variable may be set to ``0`` to revert an "
"entire Python process back to the default permissive behaviour of Python "
"2.7.8 and earlier."
msgstr ""

#: ../../whatsnew/2.7.rst:2752
msgid ""
"For cases where the connection establishment code can't be modified, but the "
"overall application can be, the new :func:`ssl._https_verify_certificates` "
"function can be used to adjust the default behaviour at runtime."
msgstr ""

#: ../../whatsnew/2.7.rst:2758
msgid "New ``make regen-all`` build target"
msgstr ""

#: ../../whatsnew/2.7.rst:2760
msgid ""
"To simplify cross-compilation, and to ensure that CPython can reliably be "
"compiled without requiring an existing version of Python to already be "
"available, the autotools-based build system no longer attempts to implicitly "
"recompile generated files based on file modification times."
msgstr ""

#: ../../whatsnew/2.7.rst:2765
msgid ""
"Instead, a new ``make regen-all`` command has been added to force "
"regeneration of these files when desired (e.g. after an initial version of "
"Python has already been built based on the pregenerated versions)."
msgstr ""

#: ../../whatsnew/2.7.rst:2769
msgid ""
"More selective regeneration targets are also defined - see :source:`Makefile."
"pre.in` for details."
msgstr ""

#: ../../whatsnew/2.7.rst:2772 ../../whatsnew/2.7.rst:2785
msgid "(Contributed by Victor Stinner in :issue:`23404`.)"
msgstr "(Contributed by Victor Stinner in :issue:`23404`.)"

#: ../../whatsnew/2.7.rst:2778
msgid "Removal of ``make touch`` build target"
msgstr ""

#: ../../whatsnew/2.7.rst:2780
msgid ""
"The ``make touch`` build target previously used to request implicit "
"regeneration of generated files by updating their modification times has "
"been removed."
msgstr ""

#: ../../whatsnew/2.7.rst:2783
msgid "It has been replaced by the new ``make regen-all`` target."
msgstr ""

#: ../../whatsnew/2.7.rst:2794
msgid "Acknowledgements"
msgstr "謝辞"

#: ../../whatsnew/2.7.rst:2796
msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Nick Coghlan, Philip Jenvey, Ryan Lovett, R. David Murray, Hugh Secker-"
"Walker."
msgstr ""
"著者は、以下の方々がこの記事の多くの草稿に提案、修正、そして助力を差し伸べて"
"くださったことに感謝の意を表したいと思います: Nick Coghlan, Philip Jenvey, "
"Ryan Lovett, R. David Murray, Hugh Secker-Walker."
