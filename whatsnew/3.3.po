# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Yuto Horiuchi <hotz07ggl@gmail.com>, 2017
# Shun Sakurai, 2017
# Seiji Momoto <seiji.momoto@gmail.com>, 2017
# Inada Naoki <songofacandy@gmail.com>, 2017
# Arihiro TAKASE, 2017
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2017
# Yusuke Miyazaki <miyazaki.dev@gmail.com>, 2017
# Osamu NAKAMURA, 2017
# Masato HASHIMOTO <cabezon.hashimoto@gmail.com>, 2017
# E. Kawashima, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2017
# Yuto <ogran.std@gmail.com>, 2019
# Tetsuo Koyama <tkoyama010@gmail.com>, 2020
# tomo, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 12:40+0000\n"
"PO-Revision-Date: 2017-02-16 23:44+0000\n"
"Last-Translator: tomo, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../whatsnew/3.3.rst:3
msgid "What's New In Python 3.3"
msgstr "What's New In Python 3.3"

#: ../../whatsnew/3.3.rst:45
msgid ""
"This article explains the new features in Python 3.3, compared to 3.2. "
"Python 3.3 was released on September 29, 2012.  For full details, see the "
"`changelog <https://docs.python.org/3.3/whatsnew/changelog.html>`_."
msgstr ""
"この記事では 3.2 と比較した Python 3.3 の新機能を解説します。 Python 3.3 "
"は2012年9月29日にリリースされました。全詳細については `変更履歴  "
"<https://docs.python.jp/3.3/whatsnew/changelog.html>`_ をご覧ください。"

#: ../../whatsnew/3.3.rst:51
msgid ":pep:`398` - Python 3.3 Release Schedule"
msgstr ":pep:`398` - Python 3.3 リリーススケジュール"

#: ../../whatsnew/3.3.rst:55
msgid "Summary -- Release highlights"
msgstr "概要 -- リリースハイライト"

#: ../../whatsnew/3.3.rst:60
msgid "New syntax features:"
msgstr "新たな文法機能:"

#: ../../whatsnew/3.3.rst:62
msgid ""
"New ``yield from`` expression for :ref:`generator delegation <pep-380>`."
msgstr ":ref:`ジェネレータの委譲 <pep-380>`. のための新しい ``yield from`` 式"

#: ../../whatsnew/3.3.rst:63
msgid "The ``u'unicode'`` syntax is accepted again for :class:`str` objects."
msgstr ":class:`str` オブジェクト向けの ``u'unicode'`` 文法の再適用"

#: ../../whatsnew/3.3.rst:65
msgid "New library modules:"
msgstr "新たなライブラリモジュール:"

#: ../../whatsnew/3.3.rst:67
msgid ":mod:`faulthandler` (helps debugging low-level crashes)"
msgstr ":mod:`faulthandler` (低水準のクラッシュのデバッグを補助する)"

#: ../../whatsnew/3.3.rst:68
msgid ""
":mod:`ipaddress` (high-level objects representing IP addresses and masks)"
msgstr ":mod:`ipaddress` (IPアドレスとマスクを表す高水準オブジェクト)"

#: ../../whatsnew/3.3.rst:69
msgid ":mod:`lzma` (compress data using the XZ / LZMA algorithm)"
msgstr ":mod:`lzma` (XZ / LZMA アルゴリズムを使用したデータ圧縮)"

#: ../../whatsnew/3.3.rst:70
msgid ""
":mod:`unittest.mock` (replace parts of your system under test with mock "
"objects)"
msgstr ":mod:`unittest.mock` (テスト向けにシステムの一部をモックオブジェクトで置き換える)"

#: ../../whatsnew/3.3.rst:71
msgid ""
":mod:`venv` (Python :ref:`virtual environments <pep-405>`, as in the popular"
" ``virtualenv`` package)"
msgstr ""
":mod:`venv` (人気の ``virtualenv`` パッケージのような、Python :ref:`virtual environments "
"<pep-405>`)"

#: ../../whatsnew/3.3.rst:74
msgid "New built-in features:"
msgstr "新たな組み込み機能:"

#: ../../whatsnew/3.3.rst:76
msgid "Reworked :ref:`I/O exception hierarchy <pep-3151>`."
msgstr ":ref:`I/O 例外階層 <pep-3151>` の手直し"

#: ../../whatsnew/3.3.rst:78
msgid "Implementation improvements:"
msgstr "実装の改善:"

#: ../../whatsnew/3.3.rst:80
msgid ""
"Rewritten :ref:`import machinery <importlib>` based on :mod:`importlib`."
msgstr ":ref:`インポート機構 <importlib>` を、 :mod:`importlib` を元に書き換え"

#: ../../whatsnew/3.3.rst:81
msgid "More compact :ref:`unicode strings <pep-393>`."
msgstr "よりコンパクトな :ref:`ユニコード文字列 <pep-393>`."

#: ../../whatsnew/3.3.rst:82
msgid "More compact :ref:`attribute dictionaries <pep-412>`."
msgstr "よりコンパクトな :ref:`属性辞書 <pep-412>`."

#: ../../whatsnew/3.3.rst:84
msgid "Significantly Improved Library Modules:"
msgstr "ライブラリモジュールの大幅な改善:"

#: ../../whatsnew/3.3.rst:86
msgid "C Accelerator for the :ref:`decimal <new-decimal>` module."
msgstr ":ref:`decimal <new-decimal>` モジュールのCによる高速化"

#: ../../whatsnew/3.3.rst:87
msgid ""
"Better unicode handling in the :ref:`email <new-email>` module "
"(:term:`provisional <provisional package>`)."
msgstr ""
":ref:`email <new-email>` モジュールでのより良いユニコード処理 (:term:`暫定版 <provisional "
"package>`)"

#: ../../whatsnew/3.3.rst:90
msgid "Security improvements:"
msgstr "セキュリティの改善:"

#: ../../whatsnew/3.3.rst:92
msgid "Hash randomization is switched on by default."
msgstr "ハッシュのランダム化がデフォルトで有効になりました。"

#: ../../whatsnew/3.3.rst:94
msgid "Please read on for a comprehensive list of user-facing changes."
msgstr "以降はユーザ向けの変更の包括的なリストになっています。"

#: ../../whatsnew/3.3.rst:100
msgid "PEP 405: Virtual Environments"
msgstr "PEP 405: 仮想環境"

#: ../../whatsnew/3.3.rst:102
msgid ""
"Virtual environments help create separate Python setups while sharing a "
"system-wide base install, for ease of maintenance.  Virtual environments "
"have their own set of private site packages (i.e. locally-installed "
"libraries), and are optionally segregated from the system-wide site "
"packages.  Their concept and implementation are inspired by the popular "
"``virtualenv`` third-party package, but benefit from tighter integration "
"with the interpreter core."
msgstr ""
"仮想環境 (virtual environment) は隔離されたPython環境を作成する手助けをします。\n"
"一方で保守を容易にするために、システム全体のインストールを共有します。\n"
"仮想環境はそれ自身の site packages (つまりローカルにインストールされたライブラリ) を持ちつつ、任意でシステム全体の site packages と分離できます。\n"
"このコンセプトと実装は、人気のサードパーティパッケージである ``virtualenv`` を元にしていますが、インタプリタコアとの統合による恩恵を受けています。"

#: ../../whatsnew/3.3.rst:110
msgid ""
"This PEP adds the :mod:`venv` module for programmatic access, and the "
"``pyvenv`` script for command-line access and administration.  The Python "
"interpreter checks for a ``pyvenv.cfg``, file whose existence signals the "
"base of a virtual environment's directory tree."
msgstr ""
"この PEP はプログラムからのアクセス用の :mod:`venv` モジュールと、コマンドラインからのアクセスと管理向けの ``pyvenv`` "
"スクリプトを追加します。Pythonインタプリタは仮想環境のディレクトリツリーの存在を示す ``pyvenv.cfg`` をチェックします。"

#: ../../whatsnew/3.3.rst:118
msgid ":pep:`405` - Python Virtual Environments"
msgstr ":pep:`405` - Python Virtual Environments"

#: ../../whatsnew/3.3.rst:119
msgid ""
"PEP written by Carl Meyer; implementation by Carl Meyer and Vinay Sajip"
msgstr ""
"PEP written by Carl Meyer; implementation by Carl Meyer and Vinay Sajip"

#: ../../whatsnew/3.3.rst:123
msgid "PEP 420: Implicit Namespace Packages"
msgstr "PEP 420: 暗黙的な名前空間パッケージ"

#: ../../whatsnew/3.3.rst:125
msgid ""
"Native support for package directories that don't require ``__init__.py`` "
"marker files and can automatically span multiple path segments (inspired by "
"various third party approaches to namespace packages, as described in "
":pep:`420`)"
msgstr ""
"``__init__.py`` "
"マーカーファイルを必要としないパッケージディレクトリと、複数のモジュールパスをネイティブでサポートします(:pep:`420` "
"に記載された様々なサードパーティでの名前空間のアプローチに影響されています)"

#: ../../whatsnew/3.3.rst:133
msgid ":pep:`420` - Implicit Namespace Packages"
msgstr ":pep:`420` - Implicit Namespace Packages"

#: ../../whatsnew/3.3.rst:133
msgid ""
"PEP written by Eric V. Smith; implementation by Eric V. Smith and Barry "
"Warsaw"
msgstr ""
"PEP written by Eric V. Smith; implementation by Eric V. Smith and Barry "
"Warsaw"

#: ../../whatsnew/3.3.rst:140
msgid ""
"PEP 3118: New memoryview implementation and buffer protocol documentation"
msgstr "PEP 3118: 新たなメモリビューの実装とバッファプロトコルのドキュメント"

#: ../../whatsnew/3.3.rst:142
msgid "The implementation of :pep:`3118` has been significantly improved."
msgstr ":pep:`3118` の実装が大幅に改善されました。"

#: ../../whatsnew/3.3.rst:144
msgid ""
"The new memoryview implementation comprehensively fixes all ownership and "
"lifetime issues of dynamically allocated fields in the Py_buffer struct that"
" led to multiple crash reports. Additionally, several functions that crashed"
" or returned incorrect results for non-contiguous or multi-dimensional input"
" have been fixed."
msgstr ""
"新しい memoryview 実装が、Py_buffer "
"構造体内にフィールドを動的にアロケートする際に多数のクラッシュの報告をもたらしていた全ての所有権問題、ライフタイム問題を包括的に解決しました。加えて、不連続もしくは多次元の入力に対してクラッシュしたり誤った結果を返していた多数の関数が修正されました。"

#: ../../whatsnew/3.3.rst:150
msgid ""
"The memoryview object now has a PEP-3118 compliant getbufferproc() that "
"checks the consumer's request type. Many new features have been added, most "
"of them work in full generality for non-contiguous arrays and arrays with "
"suboffsets."
msgstr ""
"memoryview オブジェクトに、 PEP-3118 準拠の getbufferproc() が追加されています\n"
"(訳注: :ref:`buffer-structs` 参照)。これはコンシューマの要求型をチェックします。多くの新機能が追加されており、これらのほとんどが不連続配列とサブオフセットを持つ配列に完全な一般化をもたらすものです。"

#: ../../whatsnew/3.3.rst:155
msgid ""
"The documentation has been updated, clearly spelling out responsibilities "
"for both exporters and consumers. Buffer request flags are grouped into "
"basic and compound flags. The memory layout of non-contiguous and multi-"
"dimensional NumPy-style arrays is explained."
msgstr ""
":ref:`ドキュメント <bufferobjects>` "
"が更新され、エキスポータ(提供側)とコンシューマ(利用側)両方についての責務をより明確に詳細化しています。 :ref:`バッファ要求のフラグ "
"<buffer-request-types>` が、基本フラグと組合せフラグでグループ分けされています。不連続配列と多次元の NumPy "
"スタイル行列のメモリレイアウトについて説明されています。"

#: ../../whatsnew/3.3.rst:161 ../../whatsnew/3.3.rst:1122
msgid "Features"
msgstr "フィーチャー"

#: ../../whatsnew/3.3.rst:163
msgid ""
"All native single character format specifiers in struct module syntax "
"(optionally prefixed with '@') are now supported."
msgstr ""
"struct モジュールの構文の全ての native :ref:`format-characters` をサポートするようになりました ('@' "
"プレフィクスが付いていても良いです)。 (訳注: :attr:`~memoryview.format` 参照。)"

#: ../../whatsnew/3.3.rst:166
msgid ""
"With some restrictions, the cast() method allows changing of format and "
"shape of C-contiguous arrays."
msgstr ""
"いくつかの制限はありますが、 :meth:`~memoryview.cast` メソッドでフォーマット変更と C-:term:`contiguous` "
"配列の形状 (shape) の変更を行うことが出来ます。"

#: ../../whatsnew/3.3.rst:169
msgid ""
"Multi-dimensional list representations are supported for any array type."
msgstr "任意の配列型で多次元のリスト表現がサポートされるようになっています。"

#: ../../whatsnew/3.3.rst:171
msgid "Multi-dimensional comparisons are supported for any array type."
msgstr "任意の配列型で多次元の比較がサポートされるようになっています。"

#: ../../whatsnew/3.3.rst:173
msgid ""
"One-dimensional memoryviews of hashable (read-only) types with formats B, b "
"or c are now hashable.  (Contributed by Antoine Pitrou in :issue:`13411`.)"
msgstr ""
"'B', 'b', 'c' いずれかのフォーマットの :term:`hashable` な (読み出し専用の) 型の1次元メモリビューもまた、 "
"hashable です。 (Contributed by Antoine Pitrou in :issue:`13411`.)"

#: ../../whatsnew/3.3.rst:176
msgid ""
"Arbitrary slicing of any 1-D arrays type is supported. For example, it is "
"now possible to reverse a memoryview in O(1) by using a negative step."
msgstr ""
"1 次元配列型での任意のスライスがサポートされています。たとえば負の step を与えて memoryview を逆順に並べ替えることが O(1) "
"オーダで出来るようになりました。"

#: ../../whatsnew/3.3.rst:180 ../../whatsnew/3.3.rst:1132
msgid "API changes"
msgstr "API の変更"

#: ../../whatsnew/3.3.rst:182
msgid "The maximum number of dimensions is officially limited to 64."
msgstr "最大 :attr:`次元 <memoryview.ndim>` は公式に 64 に制限されています。"

#: ../../whatsnew/3.3.rst:184
msgid ""
"The representation of empty shape, strides and suboffsets is now an empty "
"tuple instead of ``None``."
msgstr ""
"空の :attr:`~memoryview.shape`, 空の :attr:`~memoryview.strides`, 空の "
":attr:`~memoryview.suboffsets` を表現するのに以前は ``None`` を用いていましたが今ではこれは空のタプルです。"

#: ../../whatsnew/3.3.rst:187
msgid ""
"Accessing a memoryview element with format 'B' (unsigned bytes) now returns "
"an integer (in accordance with the struct module syntax). For returning a "
"bytes object the view must be cast to 'c' first."
msgstr ""
"フォーマット 'B' (unsigned bytes) での memoryview 要素へのアクセスは整数を返すようになりました (struct "
"モジュールでの構文に従っています)。bytes オブジェクトが欲しければまずビューを 'c' で :meth:`~memoryview.cast` "
"しなければなりません。"

#: ../../whatsnew/3.3.rst:191
msgid ""
"memoryview comparisons now use the logical structure of the operands and "
"compare all array elements by value. All format strings in struct module "
"syntax are supported. Views with unrecognised format strings are still "
"permitted, but will always compare as unequal, regardless of view contents."
msgstr ""
"memoryview どうしの比較は被演算対象の論理構造を使って行うようになり、また、全ての配列要素は値で比較されます。struct "
"モジュールの構文の全てのフォーマット文字でサポートされます。認識出来ないフォーマット文字でのビューは今でも許されていますが、ビューの指す中身によらずこれは常に等しくないとされます。"

#: ../../whatsnew/3.3.rst:197
msgid ""
"For further changes see `Build and C API Changes`_ and `Porting C code`_."
msgstr "ほかの変更については、 `ビルドならびに C API の変更`_ と `C コードの移植`_ を参照してください。"

#: ../../whatsnew/3.3.rst:199
msgid "(Contributed by Stefan Krah in :issue:`10181`.)"
msgstr "(Contributed by Stefan Krah in :issue:`10181`.)"

#: ../../whatsnew/3.3.rst:203
msgid ":pep:`3118` - Revising the Buffer Protocol"
msgstr ":pep:`3118` - Revising the Buffer Protocol"

#: ../../whatsnew/3.3.rst:209
msgid "PEP 393: Flexible String Representation"
msgstr "PEP 393: 文字列の柔軟な表現"

#: ../../whatsnew/3.3.rst:211
msgid ""
"The Unicode string type is changed to support multiple internal "
"representations, depending on the character with the largest Unicode ordinal"
" (1, 2, or 4 bytes) in the represented string.  This allows a space-"
"efficient representation in common cases, but gives access to full UCS-4 on "
"all systems.  For compatibility with existing APIs, several representations "
"may exist in parallel; over time, this compatibility should be phased out."
msgstr ""
"Unicode 文字列型が、複数の内部表現 (1、2 または 4 バイトで表現される Unicode 序数(ordinal) の最大値依存) "
"を、表現される文字列内でサポートするように変更されました (訳注: 以前までは Python "
"のビルド時に固定で決めていました)。このことは全てのシステムにおいて、一般のケースでは空間効率の良い表現をしながらも UCS-4 "
"へのフルアクセスを与えます。既存の API との互換性のために複数の表現が並行で存在することになりますが、徐々にこの互換性はなくされていくはずです。"

#: ../../whatsnew/3.3.rst:218
msgid "On the Python side, there should be no downside to this change."
msgstr "Python 側にはこの変更による不都合は何もないはずです。"

#: ../../whatsnew/3.3.rst:220
msgid ""
"On the C API side, :pep:`393` is fully backward compatible.  The legacy API "
"should remain available at least five years.  Applications using the legacy "
"API will not fully benefit of the memory reduction, or - worse - may use a "
"bit more memory, because Python may have to maintain two versions of each "
"string (in the legacy format and in the new efficient storage)."
msgstr ""
"C API 側では :pep:`393` は完全に後方互換です。レガシーな API は最低 5 年は残されるはずです。レガシー API "
"を使うアプリケーションはメモリ削減の効能が完全には得られないか、あるいは最悪の場合には少し余計なメモリを使うかもしれません。これは Python "
"がそれぞれの文字列の二つのバージョン (レガシーなフォーマットと新しい効率的な格納方法) を維持する必要があるかもしれないからです"

#: ../../whatsnew/3.3.rst:227
msgid "Functionality"
msgstr "機能性"

#: ../../whatsnew/3.3.rst:229
msgid "Changes introduced by :pep:`393` are the following:"
msgstr ":pep:`393` でなされた変更は以下の通りです:"

#: ../../whatsnew/3.3.rst:231
msgid ""
"Python now always supports the full range of Unicode code points, including "
"non-BMP ones (i.e. from ``U+0000`` to ``U+10FFFF``).  The distinction "
"between narrow and wide builds no longer exists and Python now behaves like "
"a wide build, even under Windows."
msgstr ""
"Python は今や非 BMP 面の文字を含む Unicode コードポイントの完全な範囲 (つまり ``U+0000`` から "
"``U+10FFFF`` まで) を常にサポートします。narrow ビルド / wide ビルドという区別は今では存在していないため、Python "
"は今ではいつでもかつての wide ビルドのように振る舞い、Windows でもこれは例外ではありません。"

#: ../../whatsnew/3.3.rst:236
msgid ""
"With the death of narrow builds, the problems specific to narrow builds have"
" also been fixed, for example:"
msgstr "narrow ビルドとの決別は、それに付き物だった問題も解決しました。例えば:"

#: ../../whatsnew/3.3.rst:239
msgid ""
":func:`len` now always returns 1 for non-BMP characters, so "
"``len('\\U0010FFFF') == 1``;"
msgstr ""
":func:`len` は今では非 BMP 面文字について必ず 1 を返します。つまり ``len('\\U0010FFFF') == 1`` です;"

#: ../../whatsnew/3.3.rst:242
msgid ""
"surrogate pairs are not recombined in string literals, so ``'\\uDBFF\\uDFFF'"
" != '\\U0010FFFF'``;"
msgstr ""
"サロゲートペアが文字列リテラル内で再結合されることはありません。つまり ``'\\uDBFF\\uDFFF' != '\\U0010FFFF'`` "
"です;"

#: ../../whatsnew/3.3.rst:245
msgid ""
"indexing or slicing non-BMP characters returns the expected value, so "
"``'\\U0010FFFF'[0]`` now returns ``'\\U0010FFFF'`` and not ``'\\uDBFF'``;"
msgstr ""
"非 BMP 面文字を指すインデクスやスライスは期待通りの値を返します。つまり ``'\\U0010FFFF'[0]`` は今では "
"``'\\uDBFF'`` ではなく ``'\\U0010FFFF'`` を返します;"

#: ../../whatsnew/3.3.rst:248
msgid ""
"all other functions in the standard library now correctly handle non-BMP "
"code points."
msgstr "ほかの全ての標準ライブラリ関数が今では正しく非 BMP コードポイントを処理します。"

#: ../../whatsnew/3.3.rst:251
msgid ""
"The value of :data:`sys.maxunicode` is now always ``1114111`` (``0x10FFFF`` "
"in hexadecimal).  The :c:func:`PyUnicode_GetMax` function still returns "
"either ``0xFFFF`` or ``0x10FFFF`` for backward compatibility, and it should "
"not be used with the new Unicode API (see :issue:`13054`)."
msgstr ""
":data:`sys.maxunicode` の値は今やいつでも ``1114111`` (十六進で ``0x10FFFF``) "
"です。後方互換性のために C API の :c:func:`PyUnicode_GetMax` 関数は今でも ``0xFFFF`` か "
"``0x10FFFF`` のどちらかを返すようになってはいますが、新しい Unicode API とともには使ってはいけません (see "
":issue:`13054`)。"

#: ../../whatsnew/3.3.rst:256
msgid "The :file:`./configure` flag ``--with-wide-unicode`` has been removed."
msgstr ":file:`./configure` スクリプトのフラグ ``--with-wide-unicode`` は削除されました。"

#: ../../whatsnew/3.3.rst:259
msgid "Performance and resource usage"
msgstr "性能およびリソース使用量"

#: ../../whatsnew/3.3.rst:261
msgid ""
"The storage of Unicode strings now depends on the highest code point in the "
"string:"
msgstr "Unicode 文字列の記憶域サイズが文字列内のコードポイント最大値に依存するようになったということです:"

#: ../../whatsnew/3.3.rst:263
msgid ""
"pure ASCII and Latin1 strings (``U+0000-U+00FF``) use 1 byte per code point;"
msgstr "純粋な ASCII と Latin1 文字列 (``U+0000-U+00FF``) はコードポイントごとに 1 バイトを占めます;"

#: ../../whatsnew/3.3.rst:265
msgid "BMP strings (``U+0000-U+FFFF``) use 2 bytes per code point;"
msgstr "BMP 文字列 (``U+0000-U+FFFF``) はコードポイントごとに 2 バイトを占めます;"

#: ../../whatsnew/3.3.rst:267
msgid "non-BMP strings (``U+10000-U+10FFFF``) use 4 bytes per code point."
msgstr "非 BMP 文字列 (``U+10000-U+10FFFF``) はコードポイントごとに 4 バイトを占めます。"

#: ../../whatsnew/3.3.rst:269
msgid ""
"The net effect is that for most applications, memory usage of string storage"
" should decrease significantly - especially compared to former wide unicode "
"builds - as, in many cases, strings will be pure ASCII even in international"
" contexts (because many strings store non-human language data, such as XML "
"fragments, HTTP headers, JSON-encoded data, etc.).  We also hope that it "
"will, for the same reasons, increase CPU cache efficiency on non-trivial "
"applications. The memory usage of Python 3.3 is two to three times smaller "
"than Python 3.2, and a little bit better than Python 2.7, on a Django "
"benchmark (see the PEP for details)."
msgstr ""
"結局のところほとんどのアプリケーションにとってのこれの効能は、文字列記憶のためのメモリ使用量が激減することで、これは以前の wide unicode "
"ビルドと比較して顕著です。これは多くの場合、インターナショナルな文脈であってもなお純粋な ASCII "
"が使われるであろうことに関係があります。(というのも多くの文字列が人間向けでない言語として格納されるからです。例えば XML フラグメンツや HTTP "
"ヘッダ、JSON エンコードされたデータ、などなど。)同じ理由から、大きなアプリケーションで CPU "
"キャッシュ活用効率を高めるであろうことも期待出来ます。Python 3.3 のメモリ使用は Python 3.2 の 2 倍から 3 "
"倍小さく、また、Python 2.7 よりも少し良いことが Django ベンチマークでわかっています (詳細は PEP をみてください)。"

#: ../../whatsnew/3.3.rst:283
msgid ":pep:`393` - Flexible String Representation"
msgstr ":pep:`393` - 文字列の柔軟な表現 (Flexible String Representation)"

#: ../../whatsnew/3.3.rst:283
msgid ""
"PEP written by Martin von Löwis; implementation by Torsten Becker and Martin"
" von Löwis."
msgstr ""
"PEP written by Martin von Löwis; implementation by Torsten Becker and Martin"
" von Löwis."

#: ../../whatsnew/3.3.rst:290
msgid "PEP 397: Python Launcher for Windows"
msgstr "PEP 397: Windows の Python ランチャ"

#: ../../whatsnew/3.3.rst:292
msgid ""
"The Python 3.3 Windows installer now includes a ``py`` launcher application "
"that can be used to launch Python applications in a version independent "
"fashion."
msgstr ""
"Python 3.3 の Windows インストーラが、ランチャアプリケーションの ``py`` をインストールするようになりました。これは "
"Python をバージョンに依存しない方法で起動するのに使われます。"

#: ../../whatsnew/3.3.rst:296
msgid ""
"This launcher is invoked implicitly when double-clicking ``*.py`` files. If "
"only a single Python version is installed on the system, that version will "
"be used to run the file. If multiple versions are installed, the most recent"
" version is used by default, but this can be overridden by including a Unix-"
"style \"shebang line\" in the Python script."
msgstr ""
"ランチャは ``*.py`` ファイルをダブルクリックすると暗黙のうちに呼び出されます。システムにインストールされているのが単一の Python "
"バージョンであれば、そのバージョンがファイルの実行に使われます。複数バージョンがインストールされていればデフォルトでは最新バージョンが使われますが、Python"
" スクリプト内で Unix スタイルの「shebang 行 ( ``#!`` )」を含めることでオーバライド出来ます。"

#: ../../whatsnew/3.3.rst:302
msgid ""
"The launcher can also be used explicitly from the command line as the ``py``"
" application. Running ``py`` follows the same version selection rules as "
"implicitly launching scripts, but a more specific version can be selected by"
" passing appropriate arguments (such as ``-3`` to request Python 3 when "
"Python 2 is also installed, or ``-2.6`` to specifically request an earlier "
"Python version when a more recent version is installed)."
msgstr ""
"ランチャは明示的にコマンドラインから ``py`` アプリケーションとして使うことも出来ます。 ``py`` "
"の実行は暗黙にスクリプトを起動するバージョン選択のルールに従いますが、与えるコマンドライン引数により狙ったバージョンを選択出来ます (たとえば "
"``-3`` は Python 2 もインストールされている際に Python 3 を要求し、 ``-2.6`` "
"はもっと新しいバージョンがインストールされている場合に特定の古いバージョンを要求します)。"

#: ../../whatsnew/3.3.rst:309
msgid ""
"In addition to the launcher, the Windows installer now includes an option to"
" add the newly installed Python to the system PATH.  (Contributed by Brian "
"Curtin in :issue:`3561`.)"
msgstr ""
"ランチャに加え、Windows インストーラには新しくインストールする Python をシステムの PATH "
"に追加するオプションが含まれるようになりました。 (Contributed by Brian Curtin in :issue:`3561`.)"

#: ../../whatsnew/3.3.rst:317
msgid ":pep:`397` - Python Launcher for Windows"
msgstr ":pep:`397` - Python Launcher for Windows"

#: ../../whatsnew/3.3.rst:316
msgid ""
"PEP written by Mark Hammond and Martin v. Löwis; implementation by Vinay "
"Sajip."
msgstr ""
"PEP written by Mark Hammond and Martin v. Löwis; implementation by Vinay "
"Sajip."

#: ../../whatsnew/3.3.rst:319
msgid "Launcher documentation: :ref:`launcher`"
msgstr "ランチャのドキュメント: :ref:`launcher`"

#: ../../whatsnew/3.3.rst:321
msgid "Installer PATH modification: :ref:`windows-path-mod`"
msgstr "インストーラ PATH の調整: :ref:`windows-path-mod`"

#: ../../whatsnew/3.3.rst:327
msgid "PEP 3151: Reworking the OS and IO exception hierarchy"
msgstr "PEP 3151: OS および IO 例外階層の手直し"

#: ../../whatsnew/3.3.rst:329
msgid ""
"The hierarchy of exceptions raised by operating system errors is now both "
"simplified and finer-grained."
msgstr "OS エラーが送出する例外の階層が単純化され、粒度が下げられました。"

#: ../../whatsnew/3.3.rst:332
msgid ""
"You don't have to worry anymore about choosing the appropriate exception "
"type between :exc:`OSError`, :exc:`IOError`, :exc:`EnvironmentError`, "
":exc:`WindowsError`, :exc:`mmap.error`, :exc:`socket.error` or "
":exc:`select.error`.  All these exception types are now only one: "
":exc:`OSError`.  The other names are kept as aliases for compatibility "
"reasons."
msgstr ""
":exc:`OSError`、:exc:`IOError`、:exc:`EnvironmentError`、:exc:`WindowsError`、:exc:`mmap.error`、:exc:`socket.error`、そして  :exc:`select.error` の中から適切な例外の型を選ぶのに心配する必要はもうありません。\n"
"上記の例外の型は全てたった1つ :exc:`OSError` になりました。\n"
":exc:`OSError` 以外の名前は互換性のためにエイリアスとして残されています。"

#: ../../whatsnew/3.3.rst:339
msgid ""
"Also, it is now easier to catch a specific error condition.  Instead of "
"inspecting the ``errno`` attribute (or ``args[0]``) for a particular "
"constant from the :mod:`errno` module, you can catch the adequate "
":exc:`OSError` subclass.  The available subclasses are the following:"
msgstr ""
"また、特定のエラー条件を捕捉するのが容易になりました。\n"
"``errno`` 属性 (または ``args[0]``) の特定の定数を :mod:`errno` モジュールから調べる代わりに、適切な :exc:`OSError` 派生クラスを捕捉することが出来ます。\n"
"利用可能な派生クラスは以下の通りです:"

#: ../../whatsnew/3.3.rst:344
msgid ":exc:`BlockingIOError`"
msgstr ":exc:`BlockingIOError`"

#: ../../whatsnew/3.3.rst:345
msgid ":exc:`ChildProcessError`"
msgstr ":exc:`ChildProcessError`"

#: ../../whatsnew/3.3.rst:346
msgid ":exc:`ConnectionError`"
msgstr ":exc:`ConnectionError`"

#: ../../whatsnew/3.3.rst:347
msgid ":exc:`FileExistsError`"
msgstr ":exc:`FileExistsError`"

#: ../../whatsnew/3.3.rst:348
msgid ":exc:`FileNotFoundError`"
msgstr ":exc:`FileNotFoundError`"

#: ../../whatsnew/3.3.rst:349
msgid ":exc:`InterruptedError`"
msgstr ":exc:`InterruptedError`"

#: ../../whatsnew/3.3.rst:350
msgid ":exc:`IsADirectoryError`"
msgstr ":exc:`IsADirectoryError`"

#: ../../whatsnew/3.3.rst:351
msgid ":exc:`NotADirectoryError`"
msgstr ":exc:`NotADirectoryError`"

#: ../../whatsnew/3.3.rst:352
msgid ":exc:`PermissionError`"
msgstr ":exc:`PermissionError`"

#: ../../whatsnew/3.3.rst:353
msgid ":exc:`ProcessLookupError`"
msgstr ":exc:`ProcessLookupError`"

#: ../../whatsnew/3.3.rst:354
msgid ":exc:`TimeoutError`"
msgstr ":exc:`TimeoutError`"

#: ../../whatsnew/3.3.rst:356
msgid "And the :exc:`ConnectionError` itself has finer-grained subclasses:"
msgstr ":exc:`ConnectionError` 自身には細かな派生クラスがあります:"

#: ../../whatsnew/3.3.rst:358
msgid ":exc:`BrokenPipeError`"
msgstr ":exc:`BrokenPipeError`"

#: ../../whatsnew/3.3.rst:359
msgid ":exc:`ConnectionAbortedError`"
msgstr ":exc:`ConnectionAbortedError`"

#: ../../whatsnew/3.3.rst:360
msgid ":exc:`ConnectionRefusedError`"
msgstr ":exc:`ConnectionRefusedError`"

#: ../../whatsnew/3.3.rst:361
msgid ":exc:`ConnectionResetError`"
msgstr ":exc:`ConnectionResetError`"

#: ../../whatsnew/3.3.rst:363
msgid ""
"Thanks to the new exceptions, common usages of the :mod:`errno` can now be "
"avoided.  For example, the following code written for Python 3.2::"
msgstr ""
"新たな例外のおかげで :mod:`errno` の一般的な使い方を避けることが出来ます。\n"
"例えば、Python 3.2 向けに書かれた以下のコード::"

#: ../../whatsnew/3.3.rst:379
msgid ""
"can now be written without the :mod:`errno` import and without manual "
"inspection of exception attributes::"
msgstr "は :mod:`errno` をインポートしたり手動で例外属性を調べたりせずに書くことが出来ます::"

#: ../../whatsnew/3.3.rst:392
msgid ":pep:`3151` - Reworking the OS and IO Exception Hierarchy"
msgstr ":pep:`3151` - Reworking the OS and IO Exception Hierarchy"

#: ../../whatsnew/3.3.rst:393
msgid "PEP written and implemented by Antoine Pitrou"
msgstr "PEP written and implemented by Antoine Pitrou"

#: ../../whatsnew/3.3.rst:402
msgid "PEP 380: Syntax for Delegating to a Subgenerator"
msgstr "PEP 380: サブジェネレータへの委譲構文"

#: ../../whatsnew/3.3.rst:404
msgid ""
"PEP 380 adds the ``yield from`` expression, allowing a :term:`generator` to "
"delegate part of its operations to another generator. This allows a section "
"of code containing :keyword:`yield` to be factored out and placed in another"
" generator. Additionally, the subgenerator is allowed to return with a "
"value, and the value is made available to the delegating generator."
msgstr ""
"PEP 380 は ``yield from`` 式を追加します。これは :term:`ジェネレータ <generator>` "
"に、その操作の一部をほかのジェネレータに委譲するための式です。これによって :keyword:`yield` "
"を含んでいるコードのセクションをほかのジェネレータに移動出来るでしょう。加えてサブジェネレータは値を伴って戻ることが出来、その戻り値は委譲した側のジェネレータで使えます。"

#: ../../whatsnew/3.3.rst:411
msgid ""
"While designed primarily for use in delegating to a subgenerator, the "
"``yield from`` expression actually allows delegation to arbitrary "
"subiterators."
msgstr ""
"``yield from`` "
"式がデザインされた主たる動機はサブジェネレータへの委譲として使うことではありますが、実際には任意のサブイテレータに委譲することも出来ます。"

#: ../../whatsnew/3.3.rst:414
msgid ""
"For simple iterators, ``yield from iterable`` is essentially just a "
"shortened form of ``for item in iterable: yield item``::"
msgstr ""
"単純なイテレータに対して、 ``yield from iterable`` は本質的には ``for item in iterable: yield "
"item`` への単なる速記法です::"

#: ../../whatsnew/3.3.rst:424
msgid ""
"However, unlike an ordinary loop, ``yield from`` allows subgenerators to "
"receive sent and thrown values directly from the calling scope, and return a"
" final value to the outer generator::"
msgstr ""
"ですが普通のループとは違って ``yield from`` ではサブジェネレータは、呼び出し側スコープから "
":meth:`~generator.send` されたり :meth:`~generator.throw` "
"された値を直接受け取ることができ、また、外側のジェネレータに最終的な値を返せます::"

#: ../../whatsnew/3.3.rst:455
msgid ""
"The main principle driving this change is to allow even generators that are "
"designed to be used with the ``send`` and ``throw`` methods to be split into"
" multiple subgenerators as easily as a single large function can be split "
"into multiple subfunctions."
msgstr ""
"この変更を推し進める一番本質にあったものは、たとえ ``send`` メソッドや ``throw`` "
"メソッドとともに使われることを前提に設計されたジェネレータであっても、大きな関数を複数のサブ関数に分割するのと同じくらいに、ジェネレータを簡単に複数のサブジェネレータに分割出来るようにすることでした。"

#: ../../whatsnew/3.3.rst:464
msgid ":pep:`380` - Syntax for Delegating to a Subgenerator"
msgstr ":pep:`380` - サブジェネレータへの委譲構文"

#: ../../whatsnew/3.3.rst:463
msgid ""
"PEP written by Greg Ewing; implementation by Greg Ewing, integrated into 3.3"
" by Renaud Blanch, Ryan Kelly and Nick Coghlan; documentation by Zbigniew "
"Jędrzejewski-Szmek and Nick Coghlan"
msgstr ""
"PEP written by Greg Ewing; implementation by Greg Ewing, integrated into 3.3"
" by Renaud Blanch, Ryan Kelly and Nick Coghlan; documentation by Zbigniew "
"Jędrzejewski-Szmek and Nick Coghlan"

#: ../../whatsnew/3.3.rst:469
msgid "PEP 409: Suppressing exception context"
msgstr "PEP 409: 例外コンテキストの抑制"

#: ../../whatsnew/3.3.rst:471
msgid ""
"PEP 409 introduces new syntax that allows the display of the chained "
"exception context to be disabled. This allows cleaner error messages in "
"applications that convert between exception types::"
msgstr ""
"PEP 409 "
"は、チェインされた例外コンテキストの表示を無効にするための新構文を導入します。これを使えば例外翻訳して投げ直すようなアプリケーションで、エラーメッセージをわかりやすくすることが出来ます::"

#: ../../whatsnew/3.3.rst:490
msgid ""
"Without the ``from None`` suffix to suppress the cause, the original "
"exception would be displayed by default::"
msgstr "元となる要因例外を抑制する ``from None`` を後置しなければ、もとの例外はデフォルトで表示されます::"

#: ../../whatsnew/3.3.rst:514
msgid ""
"No debugging capability is lost, as the original exception context remains "
"available if needed (for example, if an intervening library has incorrectly "
"suppressed valuable underlying details)::"
msgstr ""
"抑制することでデバッグ能力が失われるというわけではなくて、元々の例外コンテキストは利用可能なままです。(例えば介在するライブラリが有益な背後の詳細を不適切に隠してしまっているなど、必要な場合はあるでしょう。)"

#: ../../whatsnew/3.3.rst:528
msgid ":pep:`409` - Suppressing exception context"
msgstr ":pep:`409` - 例外コンテキストの抑制"

#: ../../whatsnew/3.3.rst:528
msgid ""
"PEP written by Ethan Furman; implemented by Ethan Furman and Nick Coghlan."
msgstr ""
"PEP written by Ethan Furman; implemented by Ethan Furman and Nick Coghlan."

#: ../../whatsnew/3.3.rst:533
msgid "PEP 414: Explicit Unicode literals"
msgstr "PEP 414: 明示的なユニコードリテラル"

#: ../../whatsnew/3.3.rst:535
msgid ""
"To ease the transition from Python 2 for Unicode aware Python applications "
"that make heavy use of Unicode literals, Python 3.3 once again supports the "
"\"``u``\" prefix for string literals. This prefix has no semantic "
"significance in Python 3, it is provided solely to reduce the number of "
"purely mechanical changes in migrating to Python 3, making it easier for "
"developers to focus on the more significant semantic changes (such as the "
"stricter default separation of binary and text data)."
msgstr ""
"Unicode を意識する Python アプリケーションが Python 2 で Unicode リテラルを多用しているとしても Python 3 "
"への移行を容易にするために、Python 3.3 では文字列リテラルへの \"``u``\" 前置を再びサポートすることにしました。この前置は "
"Python 3 自身では何らの意味も持ちはせず、Python 3 "
"への移行において純粋な機械的変更を要する事項を単に減らすためだけのために提供されます。開発者はもっと重要な意味的変更 "
"(たとえばバイナリとテキストの厳密な区別) に集中すべきなのです。"

#: ../../whatsnew/3.3.rst:545
msgid ":pep:`414` - Explicit Unicode literals"
msgstr ":pep:`414` - 明示的なユニコードリテラル"

#: ../../whatsnew/3.3.rst:546
msgid "PEP written by Armin Ronacher."
msgstr "PEP written by Armin Ronacher."

#: ../../whatsnew/3.3.rst:550
msgid "PEP 3155: Qualified name for classes and functions"
msgstr "PEP 3155: クラスと関数の正規名"

#: ../../whatsnew/3.3.rst:552
msgid ""
"Functions and class objects have a new ``__qualname__`` attribute "
"representing the \"path\" from the module top-level to their definition.  "
"For global functions and classes, this is the same as ``__name__``.  For "
"other functions and classes, it provides better information about where they"
" were actually defined, and how they might be accessible from the global "
"scope."
msgstr ""
"関数オブジェクトとクラスオブジェクトは新たに ``__qualname__`` "
"属性を持つようになりました。これはモジュールのトップレベルからその定義までの「道のり "
"(path)」を表現するものです。グローバルな関数とクラスについてはこれは ``__name__`` "
"と同じです。ほかの場合にはこれは、実際に定義されている場所についてや、グローバルスコープから如何にしてアクセス可能かについて、もっと良い情報を与えてくれます。"

#: ../../whatsnew/3.3.rst:558
msgid "Example with (non-bound) methods::"
msgstr "(束縛されていない) メソッドでの例::"

#: ../../whatsnew/3.3.rst:568
msgid "Example with nested classes::"
msgstr "入れ子のクラスでの例::"

#: ../../whatsnew/3.3.rst:584
msgid "Example with nested functions::"
msgstr "入れ子の関数の例::"

#: ../../whatsnew/3.3.rst:596
msgid ""
"The string representation of those objects is also changed to include the "
"new, more precise information::"
msgstr "それらオブジェクトの文字列表現も、この新しくてより正確な情報を含むように変更されています::"

#: ../../whatsnew/3.3.rst:606
msgid ":pep:`3155` - Qualified name for classes and functions"
msgstr ":pep:`3155` - クラスと関数の正規名 (qualified name)"

#: ../../whatsnew/3.3.rst:607
msgid "PEP written and implemented by Antoine Pitrou."
msgstr "PEP written and implemented by Antoine Pitrou."

#: ../../whatsnew/3.3.rst:613
msgid "PEP 412: Key-Sharing Dictionary"
msgstr "PEP 412: キー共有辞書"

#: ../../whatsnew/3.3.rst:615
msgid ""
"Dictionaries used for the storage of objects' attributes are now able to "
"share part of their internal storage between each other (namely, the part "
"which stores the keys and their respective hashes).  This reduces the memory"
" consumption of programs creating many instances of non-builtin types."
msgstr ""
"オブジェクト属性を記憶するのに使われる辞書が、内部記憶域の一部 (キーとそれに対応するハッシュ値) "
"を互いに共有出来るようになりました。これにより、組み込みでない型のインスタンスをたくさん作るプログラムのメモリ消費が少なくなります。"

#: ../../whatsnew/3.3.rst:622
msgid ":pep:`412` - Key-Sharing Dictionary"
msgstr ":pep:`412` - キー共有辞書"

#: ../../whatsnew/3.3.rst:623
msgid "PEP written and implemented by Mark Shannon."
msgstr "PEP written and implemented by Mark Shannon."

#: ../../whatsnew/3.3.rst:627
msgid "PEP 362: Function Signature Object"
msgstr "PEP 362: 関数シグニチャオブジェクト"

#: ../../whatsnew/3.3.rst:629
msgid ""
"A new function :func:`inspect.signature` makes introspection of python "
"callables easy and straightforward.  A broad range of callables is "
"supported: python functions, decorated or not, classes, and "
":func:`functools.partial` objects.  New classes :class:`inspect.Signature`, "
":class:`inspect.Parameter` and :class:`inspect.BoundArguments` hold "
"information about the call signatures, such as, annotations, default values,"
" parameters kinds, and bound arguments, which considerably simplifies "
"writing decorators and any code that validates or amends calling signatures "
"or arguments."
msgstr ""
"新たに追加された関数 :func:`inspect.signature` は、Python 呼び出し可能オブジェクト (callable) "
"を調べることを簡単で直接的なものにしてくれます。幅広い callable をサポートしています:デコレートされているかどうかによらず関数、クラス、 "
":func:`functools.partial` オブジェクト。新たに追加されたクラス群 :class:`inspect.Signature`, "
":class:`inspect.Parameter`, :class:`inspect.BoundArguments` "
"は、アノテーション、デフォルト値、パラメータの種類、束縛されている引数などのような呼び出しシグニチャについての情報を保持し、これによって、デコレータを書いたりあるいは呼び出しシグニチャや引数を検証したり改訂したりするコードを書くことが、非常に単純になります。"

#: ../../whatsnew/3.3.rst:641
msgid ":pep:`362`: -  Function Signature Object"
msgstr ":pep:`362`: - 関数シグニチャオブジェクト"

#: ../../whatsnew/3.3.rst:641
msgid ""
"PEP written by Brett Cannon, Yury Selivanov, Larry Hastings, Jiwon Seo; "
"implemented by Yury Selivanov."
msgstr ""
"PEP written by Brett Cannon, Yury Selivanov, Larry Hastings, Jiwon Seo; "
"implemented by Yury Selivanov."

#: ../../whatsnew/3.3.rst:646
msgid "PEP 421: Adding sys.implementation"
msgstr "PEP 421: sys.implementation の追加"

#: ../../whatsnew/3.3.rst:648
msgid ""
"A new attribute on the :mod:`sys` module exposes details specific to the "
"implementation of the currently running interpreter.  The initial set of "
"attributes on :attr:`sys.implementation` are ``name``, ``version``, "
"``hexversion``, and ``cache_tag``."
msgstr ""
":mod:`sys` モジュールに新規属性が追加され、これは現在動作中のインタプリタ実装に固有の詳細を公開します。その "
":attr:`sys.implementation` 属性の手始めの集合として、 ``name``, ``version``, "
"``hexversion``, ``cache_tag`` が定義されています。"

#: ../../whatsnew/3.3.rst:653
msgid ""
"The intention of ``sys.implementation`` is to consolidate into one namespace"
" the implementation-specific data used by the standard library.  This allows"
" different Python implementations to share a single standard library code "
"base much more easily.  In its initial state, ``sys.implementation`` holds "
"only a small portion of the implementation-specific data.  Over time that "
"ratio will shift in order to make the standard library more portable."
msgstr ""
"``sys.implementation`` "
"の真意は、標準ライブラリによって利用される実装固有の情報を一つの名前空間で一元管理することにあります。このことにより異なる Python "
"実装が単一の標準ライブラリのコードベースを共有することが、もっとずっと簡単になります。今時点での初期状態では "
"``sys.implementation`` "
"は実装固有データのごく一部を保持しているだけです。標準ライブラリの移植性がもっと高くなるように、徐々にこの比率が変わっていくでしょう。"

#: ../../whatsnew/3.3.rst:660
msgid ""
"One example of improved standard library portability is ``cache_tag``.  As "
"of Python 3.3, ``sys.implementation.cache_tag`` is used by :mod:`importlib` "
"to support :pep:`3147` compliance.  Any Python implementation that uses "
"``importlib`` for its built-in import system may use ``cache_tag`` to "
"control the caching behavior for modules."
msgstr ""
"標準ライブラリの移植性を改善した一例が ``cache_tag`` です。Python 3.3 以降は "
"``sys.implementation.cache_tag`` が :pep:`3147` をサポートするために :mod:`importlib` "
"により使われます。組み込みのインポートシステムのために ``importlib`` を使う全ての Python "
"実装が、モジュールのキャッシュの振る舞いを制御するのに ``cache_tag`` を利用できます。"

#: ../../whatsnew/3.3.rst:667
msgid "SimpleNamespace"
msgstr "SimpleNamespace"

#: ../../whatsnew/3.3.rst:669
msgid ""
"The implementation of ``sys.implementation`` also introduces a new type to "
"Python: :class:`types.SimpleNamespace`.  In contrast to a mapping-based "
"namespace, like :class:`dict`, ``SimpleNamespace`` is attribute-based, like "
":class:`object`.  However, unlike ``object``, ``SimpleNamespace`` instances "
"are writable.  This means that you can add, remove, and modify the namespace"
" through normal attribute access."
msgstr ""
"``sys.implementation`` の実現に伴って Python に新たな型 :class:`types.SimpleNamespace` "
"が導入されることとなりました。 :class:`dict` のようなマッピングベースの名前空間とは対照的に、 ``SimpleNamespace`` は"
" :class:`object` のような属性ベースです。ですが ``object`` とは違って ``SimpleNamespace`` "
"インスタンスは書き込み可能です。つまり普通の属性アクセスを通じて名前空間に追加したり削除したり修正したりできます。"

#: ../../whatsnew/3.3.rst:678
msgid ":pep:`421` - Adding sys.implementation"
msgstr ":pep:`421` - sys.implementation の追加"

#: ../../whatsnew/3.3.rst:679
msgid "PEP written and implemented by Eric Snow."
msgstr "PEP written and implemented by Eric Snow."

#: ../../whatsnew/3.3.rst:685
msgid "Using importlib as the Implementation of Import"
msgstr "インポート実装としての importlib の使用"

#: ../../whatsnew/3.3.rst:686
msgid ""
":issue:`2377` - Replace __import__ w/ importlib.__import__ :issue:`13959` - "
"Re-implement parts of :mod:`imp` in pure Python :issue:`14605` - Make import"
" machinery explicit :issue:`14646` - Require loaders set __loader__ and "
"__package__"
msgstr ""
":issue:`2377` [Replace __import__ w/ importlib.__import__ (__import__ を "
"importlib.__import__ で置き換える)]、 :issue:`13959` [Re-implement parts of "
":mod:`imp` in pure Python (:mod:`imp` の一部をピュア Python で再実装する)]、 "
":issue:`14605` [Make import machinery explicit (インポート機構を明示的なものにする)]、 "
":issue:`14646` [Require loaders set __loader__ and __package__ (ローダーが "
"__loader__ と __package__ をセットするのを必須とする)]。"

#: ../../whatsnew/3.3.rst:691
msgid ""
"The :func:`__import__` function is now powered by "
":func:`importlib.__import__`. This work leads to the completion of \"phase "
"2\" of :pep:`302`. There are multiple benefits to this change. First, it has"
" allowed for more of the machinery powering import to be exposed instead of "
"being implicit and hidden within the C code. It also provides a single "
"implementation for all Python VMs supporting Python 3.3 to use, helping to "
"end any VM-specific deviations in import semantics. And finally it eases the"
" maintenance of import, allowing for future growth to occur."
msgstr ""
":func:`__import__` 関数を :func:`importlib.__import__` によって実現するようにしました。これは "
":pep:`302` の「第二段階」を完了させるものです。この変更には複数の恩恵があります。まず最初にこれはインポートの機構を、C "
"コードの奥深くで暗黙に秘密裏に行うのではなく、より透明化します。このことで、Python 3.3 をサポートする全ての Python VM "
"で単一の実装を用いることが出来るようになり、インポートのセマンティクスにおける VM "
"固有の逸脱と決別する助けともなります。そしてこれはインポート機構の保守をより容易とし、将来起こりうる進化を促します。"

#: ../../whatsnew/3.3.rst:700
msgid ""
"For the common user, there should be no visible change in semantics.  For "
"those whose code currently manipulates import or calls import "
"programmatically, the code changes that might possibly be required are "
"covered in the `Porting Python code`_ section of this document."
msgstr ""
"一般のユーザにとっては、セマンティクスにおいて目に見える変化はないはずです。今時点でインポートを操作したりインポート呼び出しをプログラム的に行っている場合は、このドキュメントの"
" `Python コードの移植`_ でカバーしているコードの修正が必要になるかもしれません。"

#: ../../whatsnew/3.3.rst:706
msgid "New APIs"
msgstr "新たな API"

#: ../../whatsnew/3.3.rst:707
msgid ""
"One of the large benefits of this work is the exposure of what goes into "
"making the import statement work. That means the various importers that were"
" once implicit are now fully exposed as part of the :mod:`importlib` "
"package."
msgstr ""
"この変更による一番大きな恩恵の一つは、インポート文の動作に何が介在するのかについて露になったことです。つまりかつては様々なインポータが暗黙で行っていたことが、今では完全に"
" :mod:`importlib` パッケージの一部として公開されています。"

#: ../../whatsnew/3.3.rst:711
msgid ""
"The abstract base classes defined in :mod:`importlib.abc` have been expanded"
" to properly delineate between :term:`meta path finders <meta path finder>` "
"and :term:`path entry finders <path entry finder>` by introducing "
":class:`importlib.abc.MetaPathFinder` and "
":class:`importlib.abc.PathEntryFinder`, respectively. The old ABC of "
":class:`importlib.abc.Finder` is now only provided for backwards-"
"compatibility and does not enforce any method requirements."
msgstr ""
":mod:`importlib.abc` で定義される抽象基底クラスは :term:`meta path finder` と :term:`path "
"entry finder` の差異を正確に表現するように拡張されて、それぞれ順に "
":class:`importlib.abc.MetaPathFinder` と "
":class:`importlib.abc.PathEntryFinder` が導入されました。古い ABC である "
":class:`importlib.abc.Finder` は後方互換性のためだけに残されますが、何かのメソッドの必要性を強制したりはしません。"

#: ../../whatsnew/3.3.rst:719
msgid ""
"In terms of finders, :class:`importlib.machinery.FileFinder` exposes the "
"mechanism used to search for source and bytecode files of a module. "
"Previously this class was an implicit member of :attr:`sys.path_hooks`."
msgstr ""
"ファインダ (finder) の側面からは、 :class:`importlib.machinery.FileFinder` "
"がモジュールのソースファイルおよびバイトコードファイルの検索に使われる機構を公開しています。以前はこのクラスは "
":attr:`sys.path_hooks` の暗黙のメンバでした。"

#: ../../whatsnew/3.3.rst:723
msgid ""
"For loaders, the new abstract base class :class:`importlib.abc.FileLoader` "
"helps write a loader that uses the file system as the storage mechanism for "
"a module's code. The loader for source files "
"(:class:`importlib.machinery.SourceFileLoader`), sourceless bytecode files "
"(:class:`importlib.machinery.SourcelessFileLoader`), and extension modules "
"(:class:`importlib.machinery.ExtensionFileLoader`) are now available for "
"direct use."
msgstr ""
"ローダ (loader) については、新規の抽象基底クラス :class:`importlib.abc.FileLoader` "
"が、モジュールのコードを格納する機構としてのファイルシステムを使うローダを書く助けとなります。ソースファイルのローダ "
"(:class:`importlib.machinery.SourceFileLoader`)、ソースを持たないバイトコードのためのローダ "
"(:class:`importlib.machinery.SourcelessFileLoader`)、そして拡張モジュールのためのローダ "
"(:class:`importlib.machinery.ExtensionFileLoader`) が今では直接的に利用出来ます。"

#: ../../whatsnew/3.3.rst:731
msgid ""
":exc:`ImportError` now has ``name`` and ``path`` attributes which are set "
"when there is relevant data to provide. The message for failed imports will "
"also provide the full name of the module now instead of just the tail end of"
" the module's name."
msgstr ""
":exc:`ImportError` には属性 ``name`` と ``path`` "
"が追加されて、これには提供すべき関連データがある場合にセットされます。インポート失敗時のメッセージも、これまでのようにモジュール名の末尾だけを与えるのではなく、モジュールの完全名を提供するようになりました。"

#: ../../whatsnew/3.3.rst:736
msgid ""
"The :func:`importlib.invalidate_caches` function will now call the method "
"with the same name on all finders cached in :attr:`sys.path_importer_cache` "
"to help clean up any stored state as necessary."
msgstr ""
":func:`importlib.invalidate_caches` 関数が :attr:`sys.path_importer_cache` "
"内にキャッシュされている全てのファインダの同名メソッドを呼び出すようになりました。これにより必要に応じて記憶されている状態をクリーンアップ出来ます。"

#: ../../whatsnew/3.3.rst:741
msgid "Visible Changes"
msgstr "目に見える変化"

#: ../../whatsnew/3.3.rst:743
msgid ""
"For potential required changes to code, see the `Porting Python code`_ "
"section."
msgstr "潜在的に必要となるかもしれないコード修正については、 `Python コードの移植`_ セクションを参照してください。"

#: ../../whatsnew/3.3.rst:746
msgid ""
"Beyond the expanse of what :mod:`importlib` now exposes, there are other "
"visible changes to import. The biggest is that :attr:`sys.meta_path` and "
":attr:`sys.path_hooks` now store all of the meta path finders and path entry"
" hooks used by import.  Previously the finders were implicit and hidden "
"within the C code of import instead of being directly exposed. This means "
"that one can now easily remove or change the order of the various finders to"
" fit one's needs."
msgstr ""
":mod:`importlib` によって公開されるものが拡がったことによる、インポートについてのほかの目に見える変化があります。最大の変化は "
":attr:`sys.meta_path` と :attr:`sys.path_hooks` が、インポートで使われる meta path finder"
" と path entry hook の全てを格納するようになったことです。以前はファインダは直接的に公開されるのではなく、インポートの C "
"コード内に暗黙のものとして隠されていました。このことによって、今では望めば要件に合うようファインダを取り除いたり順序を変えたりといったことが簡単に行えるようになっています。"

#: ../../whatsnew/3.3.rst:753
msgid ""
"Another change is that all modules have a ``__loader__`` attribute, storing "
"the loader used to create the module. :pep:`302` has been updated to make "
"this attribute mandatory for loaders to implement, so in the future once "
"3rd-party loaders have been updated people will be able to rely on the "
"existence of the attribute. Until such time, though, import is setting the "
"module post-load."
msgstr ""
"もう一つの変化は、モジュール生成時に使われたローダを格納する ``__loader__`` 属性を、全てのモジュールが持つようになったことです。 "
":pep:`302` "
"はローダの実装においてこの属性をセットすることを必須とするよう更新されました。ですので今後サードパーティのローダが更新されれば、この属性の存在に依存出来るようになります。ですがそのときが来るまでは、インポート処理がモジュールのロードの後処理としてセットします。"

#: ../../whatsnew/3.3.rst:759
msgid ""
"Loaders are also now expected to set the ``__package__`` attribute from "
":pep:`366`. Once again, import itself is already setting this on all loaders"
" from :mod:`importlib` and import itself is setting the attribute post-load."
msgstr ""
"さらにローダが :pep:`366` よりの ``__package__`` "
"属性を設定することも期待出来るようになりました。繰り返しになりますがインポート処理自身が既にこれを全てのローダで :mod:`importlib` "
"より行っていて、また、インポート処理自身がこの属性をロードの後処理としてセットしています。"

#: ../../whatsnew/3.3.rst:763
msgid ""
"``None`` is now inserted into :attr:`sys.path_importer_cache` when no finder"
" can be found on :attr:`sys.path_hooks`. Since :class:`imp.NullImporter` is "
"not directly exposed on :attr:`sys.path_hooks` it could no longer be relied "
"upon to always be available to use as a value representing no finder found."
msgstr ""
":attr:`sys.path_hooks` にファインダが見つからない場合に、 :attr:`sys.path_importer_cache` に "
"``None`` が挿入されるようになりました。 :class:`imp.NullImporter` は :attr:`sys.path_hooks` "
"に直接的に公開されないため、これはファインダが見つからないことの表現値としては当てにならないものになりました。"

#: ../../whatsnew/3.3.rst:768
msgid ""
"All other changes relate to semantic changes which should be taken into "
"consideration when updating code for Python 3.3, and thus should be read "
"about in the `Porting Python code`_ section of this document."
msgstr ""
"全てのほかの変更は、Python 3.3 "
"へのコードの更新の際に考慮すべきセマンティクスの変更に関係しています。ですのでそららについて、このドキュメントの `Python コードの移植`_ "
"セクションを読むべきです。"

#: ../../whatsnew/3.3.rst:772
msgid "(Implementation by Brett Cannon)"
msgstr "(Implementation by Brett Cannon)"

#: ../../whatsnew/3.3.rst:776
msgid "Other Language Changes"
msgstr "その他の言語変更"

#: ../../whatsnew/3.3.rst:778
msgid "Some smaller changes made to the core Python language are:"
msgstr "Python 言語コアに小さな変更がいくつか行われました:"

#: ../../whatsnew/3.3.rst:780
msgid ""
"Added support for Unicode name aliases and named sequences. Both "
":func:`unicodedata.lookup()` and ``'\\N{...}'`` now resolve name aliases, "
"and :func:`unicodedata.lookup()` resolves named sequences too."
msgstr ""
"Unicode `name aliases "
"<http://www.unicode.org/Public/UCD/latest/ucd/NameAliases.txt>`_ と `named "
"sequences "
"<http://www.unicode.org/Public/UCD/latest/ucd/NamedSequences.txt>`_ "
"のサポートが追加されました。 :func:`unicodedata.lookup()` と ``'\\N{...}'`` の両方が name "
"aliases の解決を行い、 :func:`unicodedata.lookup()` は named sequences の解決も行います。"

#: ../../whatsnew/3.3.rst:784
msgid "(Contributed by Ezio Melotti in :issue:`12753`.)"
msgstr "(Contributed by Ezio Melotti in :issue:`12753`.)"

#: ../../whatsnew/3.3.rst:786
msgid "Unicode database updated to UCD version 6.1.0"
msgstr "Unicode データベースを UCD バージョン 6.1.0 にアップグレードしました。"

#: ../../whatsnew/3.3.rst:788
msgid ""
"Equality comparisons on :func:`range` objects now return a result reflecting"
" the equality of the underlying sequences generated by those range objects. "
"(:issue:`13201`)"
msgstr ""
":func:`range` オブジェクトどうしの等値性比較が、それぞれの range "
"オブジェクトによって生成されるシーケンスの等値性を反映して行われるようになりました (:issue:`13201`)。"

#: ../../whatsnew/3.3.rst:792
msgid ""
"The ``count()``, ``find()``, ``rfind()``, ``index()`` and ``rindex()`` "
"methods of :class:`bytes` and :class:`bytearray` objects now accept an "
"integer between 0 and 255 as their first argument."
msgstr ""
":class:`bytes` と :class:`bytearray` オブジェクトのメソッド ``count()``, ``find()``, "
"``rfind()``, ``index()``, ``rindex()`` が、第一引数に 0 から 255 の整数を受け付けるようになりました。"

#: ../../whatsnew/3.3.rst:796
msgid "(Contributed by Petri Lehtinen in :issue:`12170`.)"
msgstr "(Contributed by Petri Lehtinen in :issue:`12170`.)"

#: ../../whatsnew/3.3.rst:798
msgid ""
"The ``rjust()``, ``ljust()``, and ``center()`` methods of :class:`bytes` and"
" :class:`bytearray` now accept a :class:`bytearray` for the ``fill`` "
"argument.  (Contributed by Petri Lehtinen in :issue:`12380`.)"
msgstr ""
":class:`bytes` と :class:`bytearray` オブジェクトのメソッド ``rjust()``, ``ljust()``, "
"``center()`` が、 ``fill`` 引数として :class:`bytearray` を受け付けるようになりました  "
"(Contributed by Petri Lehtinen in :issue:`12380`.)。"

#: ../../whatsnew/3.3.rst:802
msgid ""
"New methods have been added to :class:`list` and :class:`bytearray`: "
"``copy()`` and ``clear()`` (:issue:`10516`).  Consequently, "
":class:`~collections.abc.MutableSequence` now also defines a "
":meth:`~collections.abc.MutableSequence.clear` method (:issue:`11388`)."
msgstr ""
":class:`list` と :class:`bytearray` に新規メソッド ``copy()``, ``clear()`` が追加されました "
"(:issue:`10516`)。これに伴い :class:`~collections.abc.MutableSequence` にも "
":meth:`~collections.abc.MutableSequence.clear` メソッドが追加されました "
"(:issue:`11388`)。"

#: ../../whatsnew/3.3.rst:807
msgid "Raw bytes literals can now be written ``rb\"...\"`` as well as ``br\"...\"``."
msgstr "raw bytes リテラルとして ``br\"...\"`` だけでなく  ``rb\"...\"`` とも書けるようになりました。"

#: ../../whatsnew/3.3.rst:809
msgid "(Contributed by Antoine Pitrou in :issue:`13748`.)"
msgstr "(Contributed by Antoine Pitrou in :issue:`13748`.)"

#: ../../whatsnew/3.3.rst:811
msgid ""
":meth:`dict.setdefault` now does only one lookup for the given key, making "
"it atomic when used with built-in types."
msgstr ""
":meth:`dict.setdefault` "
"が与えられたキーのルックアップを一度しか行わないようになったので、組み込み型でのこれの使用はアトミックになります。(訳注: "
"外部観察可能な変化で説明すると、以前はこの呼び出しが、キーの2回の __hash__、__eq__ 呼び出しを引き起こしていたものが、1回になった。)"

#: ../../whatsnew/3.3.rst:814
msgid "(Contributed by Filip Gruszczyński in :issue:`13521`.)"
msgstr "(Contributed by Filip Gruszczyński in :issue:`13521`.)"

#: ../../whatsnew/3.3.rst:816
msgid ""
"The error messages produced when a function call does not match the function"
" signature have been significantly improved."
msgstr "関数呼び出しが関数シグニチャに合致しない場合のエラーメッセージがかなり改善されました。"

#: ../../whatsnew/3.3.rst:819
msgid "(Contributed by Benjamin Peterson.)"
msgstr "(Contributed by Benjamin Peterson.)"

#: ../../whatsnew/3.3.rst:823
msgid "A Finer-Grained Import Lock"
msgstr "細粒度のインポートロック"

#: ../../whatsnew/3.3.rst:825
msgid ""
"Previous versions of CPython have always relied on a global import lock. "
"This led to unexpected annoyances, such as deadlocks when importing a module"
" would trigger code execution in a different thread as a side-effect. Clumsy"
" workarounds were sometimes employed, such as the "
":c:func:`PyImport_ImportModuleNoBlock` C API function."
msgstr ""
"以前のバージョンの CPython "
"では、常に大域的なインポートロックを当てにしていました。このことは意図せず頭痛の種を持ち込むこと繋がっていました。たとえば、モジュールをインポートすることで副作用として異なるスレッドでのコード実行を引き起こす際に起こる、デッドロックといったことです。不恰好な回避策がときどき採用されてきました。C"
" API 関数 :c:func:`PyImport_ImportModuleNoBlock` などです。"

#: ../../whatsnew/3.3.rst:831
msgid ""
"In Python 3.3, importing a module takes a per-module lock.  This correctly "
"serializes importation of a given module from multiple threads (preventing "
"the exposure of incompletely initialized modules), while eliminating the "
"aforementioned annoyances."
msgstr ""
"Python 3.3 "
"ではモジュールのインポートでは、モジュール単位でのロックを採用しています。このことによって複数スレッドからの指定モジュールのインポートは "
"(モジュールが不完全な初期化のまま曝されるのを防いで) 正しく直列化されて、前述の頭痛の種は取り除かれています。"

#: ../../whatsnew/3.3.rst:836
msgid "(Contributed by Antoine Pitrou in :issue:`9260`.)"
msgstr "(Contributed by Antoine Pitrou in :issue:`9260`.)"

#: ../../whatsnew/3.3.rst:840
msgid "Builtin functions and types"
msgstr "組み込みの関数と型"

#: ../../whatsnew/3.3.rst:842
msgid ""
":func:`open` gets a new *opener* parameter: the underlying file descriptor "
"for the file object is then obtained by calling *opener* with (*file*, "
"*flags*). It can be used to use custom flags like :data:`os.O_CLOEXEC` for "
"example. The ``'x'`` mode was added: open for exclusive creation, failing if"
" the file already exists."
msgstr ""
":func:`open` に新規パラメータ *opener* が追加されました。背後のファイルオブジェクトのファイル記述子は *opener* を "
"(*file*, *flags*) で呼び出して得られます。これは例えば :data:`os.O_CLOEXEC` "
"のようなカスタムなフラグを用いるのに使えます。 / ``'x'`` モードが追加されました。排他的作成として開きます。ファイルが既存の場合は失敗します。"

#: ../../whatsnew/3.3.rst:847
msgid ""
":func:`print`: added the *flush* keyword argument. If the *flush* keyword "
"argument is true, the stream is forcibly flushed."
msgstr ""
":func:`print`: *flush* キーワード引数が追加されました。*flush* "
"キーワード引数が真の場合ストリームは強制的にフラッシュされます。"

#: ../../whatsnew/3.3.rst:849
msgid ""
":func:`hash`: hash randomization is enabled by default, see "
":meth:`object.__hash__` and :envvar:`PYTHONHASHSEED`."
msgstr ""
":func:`hash`: ハッシュのランダム化がデフォルトで有効になりました。 :meth:`object.__hash__` と環境変数 "
":envvar:`PYTHONHASHSEED` を参照してください。"

#: ../../whatsnew/3.3.rst:851
msgid ""
"The :class:`str` type gets a new :meth:`~str.casefold` method: return a "
"casefolded copy of the string, casefolded strings may be used for caseless "
"matching. For example, ``'ß'.casefold()`` returns ``'ss'``."
msgstr ""
":class:`str` 型に :meth:`~str.casefold` メソッドが追加されました。文字列の casefold "
"されたコピーを返します。casefold された文字列は、大文字小文字に関係ないマッチに使えます。例えば ``'ß'.casefold()`` は "
"``'ss'`` を返します。"

#: ../../whatsnew/3.3.rst:854
msgid ""
"The sequence documentation has been substantially rewritten to better "
"explain the binary/text sequence distinction and to provide specific "
"documentation sections for the individual builtin sequence types "
"(:issue:`4966`)."
msgstr ""
"シーケンスについてのドキュメントを大幅に書き換えました。バイナリのシーケンスとテキストのシーケンスについての区別についてより良い説明を加え、また、個々の組み込みシーケンスに関して個別のドキュメントを提供しています"
" (:issue:`4966`)。"

#: ../../whatsnew/3.3.rst:861
msgid "New Modules"
msgstr "新たなモジュール"

#: ../../whatsnew/3.3.rst:864
msgid "faulthandler"
msgstr "faulthandler"

#: ../../whatsnew/3.3.rst:866
msgid ""
"This new debug module :mod:`faulthandler` contains functions to dump Python "
"tracebacks explicitly, on a fault (a crash like a segmentation fault), after"
" a timeout, or on a user signal. Call :func:`faulthandler.enable` to install"
" fault handlers for the :const:`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`,"
" :const:`SIGBUS`, and :const:`SIGILL` signals. You can also enable them at "
"startup by setting the :envvar:`PYTHONFAULTHANDLER` environment variable or "
"by using :option:`-X` ``faulthandler`` command line option."
msgstr ""
"この新規モジュール :mod:`faulthandler` には、異常 (セグメンテーション違反のようなクラッシュ) "
"時、タイムアウト時、ユーザシグナルの発生時などのタイミングで Python traceback を明示的にダンプするための関数が含まれています。シグナル"
" :const:`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`, :const:`SIGBUS`, "
":const:`SIGILL` に対するフォールトハンドラをインストールするには、 :func:`faulthandler.enable` "
"を呼び出してください。インタプリタ開始時点でも有効に出来ます。それには環境変数 :envvar:`PYTHONFAULTHANDLER` "
"をセットするか、コマンドラインオプション :option:`-X` ``faulthandler`` を与えます。"

#: ../../whatsnew/3.3.rst:874
msgid "Example of a segmentation fault on Linux:"
msgstr "Linuxでのセグメンテーションフォールト時の例:"

#: ../../whatsnew/3.3.rst:890
msgid "ipaddress"
msgstr "ipaddress"

#: ../../whatsnew/3.3.rst:892
msgid ""
"The new :mod:`ipaddress` module provides tools for creating and manipulating"
" objects representing IPv4 and IPv6 addresses, networks and interfaces (i.e."
" an IP address associated with a specific IP subnet)."
msgstr ""
"新規モジュール :mod:`ipaddress` は、IPv4/IPv6 アドレス、ネットワーク、インターフェイス (すなわち固有の IP "
"サブネットで関連付けられる IP アドレス)を表現するオブジェクトを生成したり加工したりするための道具立てを提供します。"

#: ../../whatsnew/3.3.rst:896
msgid "(Contributed by Google and Peter Moody in :pep:`3144`.)"
msgstr "(Contributed by Google and Peter Moody in :pep:`3144`.)"

#: ../../whatsnew/3.3.rst:899
msgid "lzma"
msgstr "lzma"

#: ../../whatsnew/3.3.rst:901
msgid ""
"The newly-added :mod:`lzma` module provides data compression and "
"decompression using the LZMA algorithm, including support for the ``.xz`` "
"and ``.lzma`` file formats."
msgstr ""
"新たに追加された :mod:`lzma` モジュールは LZMA アルゴリズムを用いたデータの圧縮と解凍を提供します。``.xz`` および "
"``.lzma`` ファイル形式もサポートされています。"

#: ../../whatsnew/3.3.rst:905
msgid "(Contributed by Nadeem Vawda and Per Øyvind Karlsen in :issue:`6715`.)"
msgstr ""
"(Contributed by Nadeem Vawda and Per Øyvind Karlsen in :issue:`6715`.)"

#: ../../whatsnew/3.3.rst:909
msgid "Improved Modules"
msgstr "改良されたモジュール"

#: ../../whatsnew/3.3.rst:912
msgid "abc"
msgstr "abc"

#: ../../whatsnew/3.3.rst:914
msgid ""
"Improved support for abstract base classes containing descriptors composed "
"with abstract methods. The recommended approach to declaring abstract "
"descriptors is now to provide :attr:`__isabstractmethod__` as a dynamically "
"updated property. The built-in descriptors have been updated accordingly."
msgstr ""
"抽象メソッドで構成されるデスクリプタを含む抽象基底クラスのサポートが改善されています。抽象デスクリプタを宣言するために推奨されるアプローチは今後は、動的に更新されるプロパティとして"
" :attr:`__isabstractmethod__` を提供することです。この結果として、組み込みのデスクリプタが更新されました。"

#: ../../whatsnew/3.3.rst:919 ../../whatsnew/3.3.rst:2245
msgid ""
":class:`abc.abstractproperty` has been deprecated, use :class:`property` "
"with :func:`abc.abstractmethod` instead."
msgstr ""
":class:`abc.abstractproperty` は非推奨となりました。代わりに :func:`abc.abstractmethod` に "
":class:`property` を渡して使ってください。"

#: ../../whatsnew/3.3.rst:921 ../../whatsnew/3.3.rst:2247
msgid ""
":class:`abc.abstractclassmethod` has been deprecated, use "
":class:`classmethod` with :func:`abc.abstractmethod` instead."
msgstr ""
":class:`abc.abstractclassmethod` は非推奨となりました。代わりに :func:`abc.abstractmethod` "
"に :class:`classmethod` を渡して使ってください。"

#: ../../whatsnew/3.3.rst:923 ../../whatsnew/3.3.rst:2249
msgid ""
":class:`abc.abstractstaticmethod` has been deprecated, use "
":class:`staticmethod` with :func:`abc.abstractmethod` instead."
msgstr ""
":class:`abc.abstractstaticmethod` は非推奨となりました。代わりに :func:`abc.abstractmethod`"
" に :class:`staticmethod` を渡して使ってください。"

#: ../../whatsnew/3.3.rst:926
msgid "(Contributed by Darren Dale in :issue:`11610`.)"
msgstr "(Contributed by Darren Dale in :issue:`11610`.)"

#: ../../whatsnew/3.3.rst:928
msgid ""
":meth:`abc.ABCMeta.register` now returns the registered subclass, which "
"means it can now be used as a class decorator (:issue:`10868`)."
msgstr ""
":meth:`abc.ABCMeta.register` "
"が登録されたサブクラスを返すようになりました。つまりクラスデコレータとして使うことができるようになったということです (:issue:`10868`)。"

#: ../../whatsnew/3.3.rst:933
msgid "array"
msgstr "array"

#: ../../whatsnew/3.3.rst:935
msgid ""
"The :mod:`array` module supports the :c:type:`long long` type using ``q`` "
"and ``Q`` type codes."
msgstr ""
":mod:`array` モジュールに型コード ``q`` と ``Q`` による :c:type:`long long` 型サポートが追加されました。"

#: ../../whatsnew/3.3.rst:938
msgid ""
"(Contributed by Oren Tirosh and Hirokazu Yamamoto in :issue:`1172711`.)"
msgstr ""
"(Contributed by Oren Tirosh and Hirokazu Yamamoto in :issue:`1172711`.)"

#: ../../whatsnew/3.3.rst:942
msgid "base64"
msgstr "base64"

#: ../../whatsnew/3.3.rst:944
msgid ""
"ASCII-only Unicode strings are now accepted by the decoding functions of the"
" :mod:`base64` modern interface. For example, ``base64.b64decode('YWJj')`` "
"returns ``b'abc'``.  (Contributed by Catalin Iacob in :issue:`13641`.)"
msgstr ""
":mod:`base64` モジュールのモダンなインターフェイスのほうのデコード関数が、ASCII 文字のみで構成された Unicode "
"文字列を受け付けるようになりました。たとえば ``base64.b64decode('YWJj')`` は ``b'abc'`` を返します。 "
"(Contributed by Catalin Iacob in :issue:`13641`.)"

#: ../../whatsnew/3.3.rst:950
msgid "binascii"
msgstr "binascii"

#: ../../whatsnew/3.3.rst:952
msgid ""
"In addition to the binary objects they normally accept, the ``a2b_`` "
"functions now all also accept ASCII-only strings as input.  (Contributed by "
"Antoine Pitrou in :issue:`13637`.)"
msgstr ""
"``a2b_`` 関数が、バイナリオブジェクトだけでなく ASCII 文字のみで構成された Unicode "
"文字列を入力として受け付けるようになりました。 (Contributed by Antoine Pitrou in :issue:`13637`.)"

#: ../../whatsnew/3.3.rst:958
msgid "bz2"
msgstr "bz2"

#: ../../whatsnew/3.3.rst:960
msgid ""
"The :mod:`bz2` module has been rewritten from scratch. In the process, "
"several new features have been added:"
msgstr ":mod:`bz2` モジュールが最初から書き直されました。その過程で新機能がいくつか追加されました。"

#: ../../whatsnew/3.3.rst:963
msgid ""
"New :func:`bz2.open` function: open a bzip2-compressed file in binary or "
"text mode."
msgstr "新たな :func:`bz2.open` 関数: bzip2 で圧縮されたファイルをバイナリかテキストモードで開きます。"

#: ../../whatsnew/3.3.rst:966
msgid ""
":class:`bz2.BZ2File` can now read from and write to arbitrary file-like "
"objects, by means of its constructor's *fileobj* argument."
msgstr ""
":class:`bz2.BZ2File` が、コンストラクタの *fileobj* "
"引数で、任意のファイル様オブジェクトの読み書きが出来るようになりました。"

#: ../../whatsnew/3.3.rst:969
msgid "(Contributed by Nadeem Vawda in :issue:`5863`.)"
msgstr "(Contributed by Nadeem Vawda in :issue:`5863`.)"

#: ../../whatsnew/3.3.rst:971
msgid ""
":class:`bz2.BZ2File` and :func:`bz2.decompress` can now decompress multi-"
"stream inputs (such as those produced by the :program:`pbzip2` tool). "
":class:`bz2.BZ2File` can now also be used to create this type of file, using"
" the ``'a'`` (append) mode."
msgstr ""
":class:`bz2.BZ2File` と :func:`bz2.decompress` が (:program:`pbzip2` "
"ツールで生成されたような) マルチストリームの入力を展開出来るようになりました。同時に :class:`bz2.BZ2File` は、 ``'a'`` "
"(追記) モードを使ってこのタイプの圧縮ファイルを作るのに使えるようになりました。"

#: ../../whatsnew/3.3.rst:976
msgid "(Contributed by Nir Aides in :issue:`1625`.)"
msgstr "(Contributed by Nir Aides in :issue:`1625`.)"

#: ../../whatsnew/3.3.rst:978
msgid ""
":class:`bz2.BZ2File` now implements all of the :class:`io.BufferedIOBase` "
"API, except for the :meth:`detach` and :meth:`truncate` methods."
msgstr ""
":class:`bz2.BZ2File` が、 :class:`io.BufferedIOBase` API で規定されているメソッドや属性のうち、 "
":meth:`detach` と :meth:`truncate` を除くすべてを実装するようになりました。"

#: ../../whatsnew/3.3.rst:983
msgid "codecs"
msgstr "codecs"

#: ../../whatsnew/3.3.rst:985
msgid ""
"The :mod:`~encodings.mbcs` codec has been rewritten to handle correctly "
"``replace`` and ``ignore`` error handlers on all Windows versions.  The "
":mod:`~encodings.mbcs` codec now supports all error handlers, instead of "
"only ``replace`` to encode and ``ignore`` to decode."
msgstr ""
":mod:`~encodings.mbcs` コーデックが、全ての Windows バージョンでエラーハンドラ ``replace`` と "
"``ignore`` を正しく処理するように書き換えられました。 :mod:`~encodings.mbcs` コーデックは以前は、エンコードでは "
"``replace`` のみ、デコードでは ``ignore`` のみでしたが、これにより全てのエラーハンドラがサポートされます。"

#: ../../whatsnew/3.3.rst:990
msgid ""
"A new Windows-only codec has been added: ``cp65001`` (:issue:`13216`). It is"
" the Windows code page 65001 (Windows UTF-8, ``CP_UTF8``).  For example, it "
"is used by ``sys.stdout`` if the console output code page is set to cp65001 "
"(e.g., using ``chcp 65001`` command)."
msgstr ""
"新たに Windows のみ用のコーデック ``cp65001`` が追加されました (:issue:`13216`)。これは Windows "
"コードページ 65001 (Windows UTF-8, ``CP_UTF8``) です。例えばこれはコンソール出力のコードページが (例えば "
"``chcp 65001`` コマンドを使って)  cp65001 にセットされている場合に ``sys.stdout`` で使われます。"

#: ../../whatsnew/3.3.rst:995
msgid ""
"Multibyte CJK decoders now resynchronize faster.  They only ignore the first"
" byte of an invalid byte sequence. For example, "
"``b'\\xff\\n'.decode('gb2312', 'replace')`` now returns a ``\\n`` after the "
"replacement character."
msgstr ""
"マルチバイト CJK デコーダの再同期が高速になりました。これは不正なバイトシーケンスが最初のバイトであれば無視するだけです。例えば "
"``b'\\xff\\n'.decode('gb2312', 'replace')`` は文字置き換えののちに ``\\n`` "
"を返すようになっています。"

#: ../../whatsnew/3.3.rst:999
msgid "(:issue:`12016`)"
msgstr "(:issue:`12016`)"

#: ../../whatsnew/3.3.rst:1001
msgid ""
"Incremental CJK codec encoders are no longer reset at each call to their "
"encode() methods. For example::"
msgstr ""
"漸増的 CJK コーデックのエンコーダは以前は encode() メソッド呼び出しのたびにリセットしていましたが、リセットしなくなりました。例えば::"

#: ../../whatsnew/3.3.rst:1009
msgid ""
"This example gives ``b'~{Np~}~{J)~}~{l6~}~{HK~}~{!#~} Bye.'`` with older "
"Python versions."
msgstr ""
"この例の場合は以前の Python では ``b'~{Np~}~{J)~}~{l6~}~{HK~}~{!#~} Bye.'`` となっていました。"

#: ../../whatsnew/3.3.rst:1012
msgid "(:issue:`12100`)"
msgstr "(:issue:`12100`)"

#: ../../whatsnew/3.3.rst:1014
msgid "The ``unicode_internal`` codec has been deprecated."
msgstr "``unicode_internal`` コーデックは非推奨となりました。"

#: ../../whatsnew/3.3.rst:1018
msgid "collections"
msgstr "collections"

#: ../../whatsnew/3.3.rst:1020
msgid ""
"Addition of a new :class:`~collections.ChainMap` class to allow treating a "
"number of mappings as a single unit.  (Written by Raymond Hettinger for "
":issue:`11089`, made public in :issue:`11297`.)"
msgstr ""
"新たに追加されたクラス :class:`~collections.ChainMap` は、複数のマッピングをひとまとまりに扱えるようにします。 "
"(Written by Raymond Hettinger for :issue:`11089`, made public in "
":issue:`11297`.)"

#: ../../whatsnew/3.3.rst:1024
msgid ""
"The abstract base classes have been moved in a new :mod:`collections.abc` "
"module, to better differentiate between the abstract and the concrete "
"collections classes.  Aliases for ABCs are still present in the "
":mod:`collections` module to preserve existing imports.  (:issue:`11085`)"
msgstr ""
"抽象基底クラス群は新しいモジュール :mod:`collections.abc` "
"に移動しました。抽象コレクションと具象コレクションを識別しやすくするためです。これをインポートしている既存のコードを維持するために、 ABC の別名群が"
" :mod:`collections` モジュール内に残されています。 (:issue:`11085`)"

#: ../../whatsnew/3.3.rst:1031
msgid ""
"The :class:`~collections.Counter` class now supports the unary ``+`` and "
"``-`` operators, as well as the in-place operators ``+=``, ``-=``, ``|=``, "
"and ``&=``.  (Contributed by Raymond Hettinger in :issue:`13121`.)"
msgstr ""
":class:`~collections.Counter` クラスが、単項 ``+`` 演算子、単項 ``-`` 演算子、インプレイス演算子の "
"``+=``, ``-=``, ``|=``, ``&=`` をサポートするようになりました。(Contributed by Raymond "
"Hettinger in :issue:`13121`.)"

#: ../../whatsnew/3.3.rst:1037
msgid "contextlib"
msgstr "contextlib"

#: ../../whatsnew/3.3.rst:1039
msgid ""
":class:`~contextlib.ExitStack` now provides a solid foundation for "
"programmatic manipulation of context managers and similar cleanup "
"functionality. Unlike the previous ``contextlib.nested`` API (which was "
"deprecated and removed), the new API is designed to work correctly "
"regardless of whether context managers acquire their resources in their "
"``__init__`` method (for example, file objects) or in their ``__enter__`` "
"method (for example, synchronisation objects from the :mod:`threading` "
"module)."
msgstr ""
"コンテキストマネージャをプログラム的に操作することと、これと類似のクリーンアップの機能性について、:class:`~contextlib.ExitStack`"
" が今後は確かな基礎を提供します。かつての (非推奨となり削除された) ``contextlib.nested`` API とは違って、この新しい "
"API は、コンテキストマネージャがリソースを (たとえばファイルオブジェクトなどを) ``__init__`` メソッドで獲得したのか、あるいは "
"(たとえば :mod:`threading` モジュールからの同期オブジェクトを) ``__enter__`` "
"メソッドで獲得したのかとは無関係に正しく動作するように設計されました。"

#: ../../whatsnew/3.3.rst:1048
msgid "(:issue:`13585`)"
msgstr "(:issue:`13585`)"

#: ../../whatsnew/3.3.rst:1052
msgid "crypt"
msgstr "crypt"

#: ../../whatsnew/3.3.rst:1054
msgid ""
"Addition of salt and modular crypt format (hashing method) and the "
":func:`~crypt.mksalt` function to the :mod:`crypt` module."
msgstr ""
":mod:`crypt` モジュールに、 salt として使う追加の crypt フォーマット (ハッシュ化メソッド) と "
":func:`~crypt.mksalt` 関数が追加されました。"

#: ../../whatsnew/3.3.rst:1057
msgid "(:issue:`10924`)"
msgstr "(:issue:`10924`)"

#: ../../whatsnew/3.3.rst:1060
msgid "curses"
msgstr "curses"

#: ../../whatsnew/3.3.rst:1062
msgid ""
"If the :mod:`curses` module is linked to the ncursesw library, use Unicode "
"functions when Unicode strings or characters are passed (e.g. "
":c:func:`waddwstr`), and bytes functions otherwise (e.g. :c:func:`waddstr`)."
msgstr ""
":mod:`curses` モジュールが ncursesw ライブラリとリンクしている場合に、 Unicode 文字列や Unicode "
"文字が渡されれば Unicode 関数 (例えば :c:func:`waddwstr`)、それ以外の場合はバイト列用関数 (例えば "
":c:func:`waddstr`) を呼び出すようにしました。"

#: ../../whatsnew/3.3.rst:1065
msgid ""
"Use the locale encoding instead of ``utf-8`` to encode Unicode strings."
msgstr ""
"Unicode 文字列をエンコードするのに ``utf-8`` ではなく locale のエンコーディングを使うようになりました。(---訳注:  "
":issue:`12567` に対応した説明と思います。とすればこれは **ワイド文字を受け取らない C 関数に渡す** 際に Unicode "
"をエンコードする際の話。このときに以前は暗黙で ``utf-8`` でエンコードしていたのは「誤りである」ということのようです。 ---)"

#: ../../whatsnew/3.3.rst:1066
msgid ""
":class:`curses.window` has a new :attr:`curses.window.encoding` attribute."
msgstr ""
":class:`curses.window` クラスに属性 :attr:`curses.window.encoding` が追加されました。"

#: ../../whatsnew/3.3.rst:1067
msgid ""
"The :class:`curses.window` class has a new :meth:`~curses.window.get_wch` "
"method to get a wide character"
msgstr ""
":class:`curses.window` クラスに :meth:`~curses.window.get_wch` "
"メソッドが追加されました。これはワイド文字を一つ取得します。"

#: ../../whatsnew/3.3.rst:1069
msgid ""
"The :mod:`curses` module has a new :meth:`~curses.unget_wch` function to "
"push a wide character so the next :meth:`~curses.window.get_wch` will return"
" it"
msgstr ""
":mod:`curses` モジュールに関数 :meth:`~curses.unget_wch` が追加されました。これはワイド文字をプッシュし、次に "
":meth:`~curses.window.get_wch` を呼び出した時にその値が返るようにします。"

#: ../../whatsnew/3.3.rst:1073
msgid "(Contributed by Iñigo Serna in :issue:`6755`.)"
msgstr ""
"(Contributed by Iñigo Serna in :issue:`6755`.)\n"
"(---訳注: 最初の2つはおそらく :issue:`12567` --)"

#: ../../whatsnew/3.3.rst:1076
msgid "datetime"
msgstr "datetime"

#: ../../whatsnew/3.3.rst:1078
msgid ""
"Equality comparisons between naive and aware :class:`~datetime.datetime` "
"instances now return :const:`False` instead of raising :exc:`TypeError` "
"(:issue:`15006`)."
msgstr ""
"naive な :class:`~datetime.datetime` インスタンスと aware な "
":class:`~datetime.datetime` インスタンスの等価比較で、 :exc:`TypeError` を投げずに "
":const:`False` を返すようになりました。 (:issue:`15006`)."

#: ../../whatsnew/3.3.rst:1081
msgid ""
"New :meth:`datetime.datetime.timestamp` method: Return POSIX timestamp "
"corresponding to the :class:`~datetime.datetime` instance."
msgstr ""
"新規メソッド :meth:`datetime.datetime.timestamp`: :class:`~datetime.datetime` "
"インスタンスに対応する POSIX タイムスタンプを返します。"

#: ../../whatsnew/3.3.rst:1083
msgid ""
"The :meth:`datetime.datetime.strftime` method supports formatting years "
"older than 1000."
msgstr ""
":meth:`datetime.datetime.strftime` メソッドが 1000 年よりも前の書式化をサポートしました。(---訳注: "
"What's New in Python 3.2 での変更も参照してみてください。---)"

#: ../../whatsnew/3.3.rst:1085
msgid ""
"The :meth:`datetime.datetime.astimezone` method can now be called without "
"arguments to convert datetime instance to the system timezone."
msgstr ""
":meth:`datetime.datetime.astimezone` メソッドを引数なしで呼び出せるようになりました。これは datetime "
"インスタンスをシステムのタイムゾーンに変換します。"

#: ../../whatsnew/3.3.rst:1093
msgid "decimal"
msgstr "decimal"

#: ../../whatsnew/3.3.rst:1096
msgid ":issue:`7652` - integrate fast native decimal arithmetic."
msgstr ":issue:`7652` - decimal 算術演算の、高速なネイティブ 実装の統合"

#: ../../whatsnew/3.3.rst:1096
msgid "C-module and libmpdec written by Stefan Krah."
msgstr "C-module and libmpdec written by Stefan Krah."

#: ../../whatsnew/3.3.rst:1098
msgid ""
"The new C version of the decimal module integrates the high speed libmpdec "
"library for arbitrary precision correctly-rounded decimal floating point "
"arithmetic. libmpdec conforms to IBM's General Decimal Arithmetic "
"Specification."
msgstr ""
"decimal モジュールの新しい C バージョンは高速な libmpdec と統合します。それは任意精度で正しい丸めを行う 10 "
"進浮動小数点数算術演算を行います。libmpdec は IBM の「General Decimal Arithmetic "
"Specification」に従っています。"

#: ../../whatsnew/3.3.rst:1102
msgid ""
"Performance gains range from 10x for database applications to 100x for "
"numerically intensive applications. These numbers are expected gains for "
"standard precisions used in decimal floating point arithmetic. Since the "
"precision is user configurable, the exact figures may vary. For example, in "
"integer bignum arithmetic the differences can be significantly higher."
msgstr ""
"性能向上は、データベースアプリケーションで 10 倍から、数値計算が中心的なアプリケーションで 100 倍まで幅があります。この数字は、 "
"10進数の浮動小数点計算において使われる標準的な精度における期待値です。精度はユーザが変更可能なので、正確な数字は変わる可能性があります。例えば、整数 "
"bignum 計算では、違いはかなりより大きくなるかもしれません。"

#: ../../whatsnew/3.3.rst:1108
msgid ""
"The following table is meant as an illustration. Benchmarks are available at"
" http://www.bytereef.org/mpdecimal/quickstart.html."
msgstr ""
"以下の表は説明のためのものです。ベンチマークは http://www.bytereef.org/mpdecimal/quickstart.html "
"にあります。"

#: ../../whatsnew/3.3.rst:1112
msgid "decimal.py"
msgstr "decimal.py"

#: ../../whatsnew/3.3.rst:1112
msgid "_decimal"
msgstr "_decimal"

#: ../../whatsnew/3.3.rst:1112
msgid "speedup"
msgstr "speedup"

#: ../../whatsnew/3.3.rst:1114
msgid "pi"
msgstr "pi"

#: ../../whatsnew/3.3.rst:1114
msgid "42.02s"
msgstr "42.02s"

#: ../../whatsnew/3.3.rst:1114
msgid "0.345s"
msgstr "0.345s"

#: ../../whatsnew/3.3.rst:1114
msgid "120x"
msgstr "120x"

#: ../../whatsnew/3.3.rst:1116
msgid "telco"
msgstr "telco"

#: ../../whatsnew/3.3.rst:1116
msgid "172.19s"
msgstr "172.19s"

#: ../../whatsnew/3.3.rst:1116
msgid "5.68s"
msgstr "5.68s"

#: ../../whatsnew/3.3.rst:1116
msgid "30x"
msgstr "30x"

#: ../../whatsnew/3.3.rst:1118
msgid "psycopg"
msgstr "psycopg"

#: ../../whatsnew/3.3.rst:1118
msgid "3.57s"
msgstr "3.57s"

#: ../../whatsnew/3.3.rst:1118
msgid "0.29s"
msgstr "0.29s"

#: ../../whatsnew/3.3.rst:1118
msgid "12x"
msgstr "12x"

#: ../../whatsnew/3.3.rst:1124
msgid ""
"The :exc:`~decimal.FloatOperation` signal optionally enables stricter "
"semantics for mixing floats and Decimals."
msgstr ""
":exc:`~decimal.FloatOperation` :ref:`シグナル <decimal-signals>` により、float と "
"Decimal の混合の厳密なセマンティクスを有効に出来ます。(---訳注: 使用例が :ref:`decimal-tutorial` "
"にあります。---)"

#: ../../whatsnew/3.3.rst:1127
msgid ""
"If Python is compiled without threads, the C version automatically disables "
"the expensive thread local context machinery. In this case, the variable "
":data:`~decimal.HAVE_THREADS` is set to ``False``."
msgstr ""
"Python がスレッド無しでコンパイルされている場合、C 版は自動的にコストがかかるスレッドローカルなコンテキスト機構を使用不可にします。この場合、 "
":data:`~decimal.HAVE_THREADS` が ``False`` にセットされます。"

#: ../../whatsnew/3.3.rst:1134
msgid ""
"The C module has the following context limits, depending on the machine "
"architecture:"
msgstr "C モジュールはマシンアーキテクチャに依存する以下のコンテキストの制限を持ちます:"

#: ../../whatsnew/3.3.rst:1138
msgid "32-bit"
msgstr "32-bit"

#: ../../whatsnew/3.3.rst:1138
msgid "64-bit"
msgstr "64-bit"

#: ../../whatsnew/3.3.rst:1140
msgid ":const:`MAX_PREC`"
msgstr ":const:`MAX_PREC`"

#: ../../whatsnew/3.3.rst:1140 ../../whatsnew/3.3.rst:1142
msgid ":const:`425000000`"
msgstr ":const:`425000000`"

#: ../../whatsnew/3.3.rst:1140 ../../whatsnew/3.3.rst:1142
msgid ":const:`999999999999999999`"
msgstr ":const:`999999999999999999`"

#: ../../whatsnew/3.3.rst:1142
msgid ":const:`MAX_EMAX`"
msgstr ":const:`MAX_EMAX`"

#: ../../whatsnew/3.3.rst:1144
msgid ":const:`MIN_EMIN`"
msgstr ":const:`MIN_EMIN`"

#: ../../whatsnew/3.3.rst:1144
msgid ":const:`-425000000`"
msgstr ":const:`-425000000`"

#: ../../whatsnew/3.3.rst:1144
msgid ":const:`-999999999999999999`"
msgstr ":const:`-999999999999999999`"

#: ../../whatsnew/3.3.rst:1147
msgid ""
"In the context templates (:class:`~decimal.DefaultContext`, "
":class:`~decimal.BasicContext` and :class:`~decimal.ExtendedContext`) the "
"magnitude of :attr:`~decimal.Context.Emax` and :attr:`~decimal.Context.Emin`"
" has changed to :const:`999999`."
msgstr ""
"コンテキストの雛形 (:class:`~decimal.DefaultContext`, :class:`~decimal.BasicContext`,"
" :class:`~decimal.ExtendedContext`) では :attr:`~decimal.Context.Emax` と "
":attr:`~decimal.Context.Emin` の絶対値が :const:`999999` に変更されました。"

#: ../../whatsnew/3.3.rst:1152
msgid ""
"The :class:`~decimal.Decimal` constructor in decimal.py does not observe the"
" context limits and converts values with arbitrary exponents or precision "
"exactly. Since the C version has internal limits, the following scheme is "
"used: If possible, values are converted exactly, otherwise "
":exc:`~decimal.InvalidOperation` is raised and the result is NaN. In the "
"latter case it is always possible to use "
":meth:`~decimal.Context.create_decimal` in order to obtain a rounded or "
"inexact value."
msgstr ""
"decimal.py の :class:`~decimal.Decimal` "
"コンストラクタは上記のコンテキスト制限に無知で、任意の指数や精度で正確に変換しようとします。C 版は内部の制限を持っていますので、次の規則が使われます:"
" 可能ならば値は正確に変換され、そうでない場合 :exc:`~decimal.InvalidOperation` が送出されて結果が NaN "
"となります。後者のケースは丸めあるいは不正確な値を得るために :meth:`~decimal.Context.create_decimal` "
"を使うことでいつでも可能です。(---訳注: わかりにくい表現ですがコンテキストで InvalidOperation をトラップしていれば結果が NaN"
" で受け取れて(そうでなければ InvalidOperation が投げられて)、その制御は create_decimal "
"で明示的に行える、ということを言っています。---)"

#: ../../whatsnew/3.3.rst:1161
msgid ""
"The power function in decimal.py is always correctly-rounded. In the C "
"version, it is defined in terms of the correctly-rounded "
":meth:`~decimal.Decimal.exp` and :meth:`~decimal.Decimal.ln` functions, but "
"the final result is only \"almost always correctly rounded\"."
msgstr ""
"decimal.py の :meth:`~decimal.Context.power` 関数は「always correctly-rounded "
"(必ず適切に丸められる)」です。C 版ではこれの意味は関数 :meth:`~decimal.Decimal.exp` と "
":meth:`~decimal.Decimal.ln` に関してであり、最終的な結果においては「almost always correctly "
"rounded (ほとんど必ず適切に丸められる)」となるだけです。"

#: ../../whatsnew/3.3.rst:1167
msgid ""
"In the C version, the context dictionary containing the signals is a "
":class:`~collections.abc.MutableMapping`.  For speed reasons, "
":attr:`~decimal.Context.flags` and :attr:`~decimal.Context.traps` always "
"refer to the same :class:`~collections.abc.MutableMapping` that the context "
"was initialized with. If a new signal dictionary is assigned, "
":attr:`~decimal.Context.flags` and :attr:`~decimal.Context.traps` are "
"updated with the new values, but they do not reference the RHS dictionary."
msgstr ""
"C 版ではシグナルを含む辞書は :class:`~collections.abc.MutableMapping` です。速度的な理由により "
":attr:`~decimal.Context.flags` と :attr:`~decimal.Context.traps` "
"はコンテキストが初期化された時点での :class:`~collections.abc.MutableMapping` "
"を参照し続けます。新たなシグナル辞書を :attr:`~decimal.Context.flags` に "
":attr:`~decimal.Context.traps` 割り当てれば新しい値で更新はされるものの、コンテキストはそれら右辺の辞書を参照しません。"

#: ../../whatsnew/3.3.rst:1177
msgid ""
"Pickling a :class:`~decimal.Context` produces a different output in order to"
" have a common interchange format for the Python and C versions."
msgstr ""
":class:`~decimal.Context` を pickle 化するとこれまでとは異なる出力をします。これは Python 版と C "
"版で共通の交換フォーマットを実現するためです。"

#: ../../whatsnew/3.3.rst:1181
msgid ""
"The order of arguments in the :class:`~decimal.Context` constructor has been"
" changed to match the order displayed by :func:`repr`."
msgstr ""
":class:`~decimal.Context` コンストタクタの引数順が :func:`repr` での表示順に合うように改められました。"

#: ../../whatsnew/3.3.rst:1185
msgid ""
"The ``watchexp`` parameter in the :meth:`~decimal.Decimal.quantize` method "
"is deprecated."
msgstr ":meth:`~decimal.Decimal.quantize` メソッドの ``watchexp`` パラメータが非推奨となりました。"

#: ../../whatsnew/3.3.rst:1192
msgid "email"
msgstr "email"

#: ../../whatsnew/3.3.rst:1195
msgid "Policy Framework"
msgstr "ポリシーフレームワーク"

#: ../../whatsnew/3.3.rst:1197
msgid ""
"The email package now has a :mod:`~email.policy` framework.  A "
":class:`~email.policy.Policy` is an object with several methods and "
"properties that control how the email package behaves.  The primary policy "
"for Python 3.3 is the :class:`~email.policy.Compat32` policy, which provides"
" backward compatibility with the email package in Python 3.2.  A ``policy`` "
"can be specified when an email message is parsed by a :mod:`~email.parser`, "
"or when a :class:`~email.message.Message` object is created, or when an "
"email is serialized using a :mod:`~email.generator`.  Unless overridden, a "
"policy passed to a ``parser`` is inherited by all the ``Message`` object and"
" sub-objects created by the ``parser``.  By default a ``generator`` will use"
" the policy of the ``Message`` object it is serializing.  The default policy"
" is :data:`~email.policy.compat32`."
msgstr ""
"email パッケージに :mod:`~email.policy` フレームワークが追加されました。 "
":class:`~email.policy.Policy` は、 email "
"パッケージがどのように振舞うのかを制御するための多数のメソッドとプロパティを持つオブジェクトです。Python 3.3 のための最初のポリシーは "
":class:`~email.policy.Compat32` で、これは Python 3.2 の email パッケージとの後方互換性を提供します。"
" ``policy`` は、 :mod:`~email.parser` によって email メッセージが解析される際、あるいは "
":class:`~email.message.Message` オブジェクトを生成する際、あるいは :mod:`~email.generator` "
"を用いて email がシリアライズする際に指定出来ます。オーバライドしない限りは、 ``parser`` に渡されたポリシーは全ての "
"``Message`` オブジェクトと ``parser`` が生成したサブオブジェクトに引き継がれます。デフォルトでは ``generator`` "
"は、シリアライズしようとする ``Message`` オブジェクトのポリシーを使います。デフォルトのポリシーは "
":data:`~email.policy.compat32` です。"

#: ../../whatsnew/3.3.rst:1210
msgid "The minimum set of controls implemented by all ``policy`` objects are:"
msgstr "すべての ``policy`` オブジェクトで実装される制御の最小限のセットは以下です:"

#: ../../whatsnew/3.3.rst:1215
msgid "max_line_length"
msgstr "max_line_length"

#: ../../whatsnew/3.3.rst:1215
msgid ""
"The maximum length, excluding the linesep character(s), individual lines may"
" have when a ``Message`` is serialized.  Defaults to 78."
msgstr ""
"``Message`` がシリアライズされる際に各行が持ちうる、linesep 文字(列)を含まない最大の行幅です。デフォルトでは 78 です。"

#: ../../whatsnew/3.3.rst:1219
msgid "linesep"
msgstr "linesep"

#: ../../whatsnew/3.3.rst:1219
msgid ""
"The character used to separate individual lines when a ``Message`` is "
"serialized.  Defaults to ``\\n``."
msgstr "``Message`` がシリアライズされる際に各行を分割するのに使われる文字です。デフォルトは ``\\n`` です。"

#: ../../whatsnew/3.3.rst:1222
msgid "cte_type"
msgstr "cte_type"

#: ../../whatsnew/3.3.rst:1222
msgid ""
"``7bit`` or ``8bit``.  ``8bit`` applies only to a ``Bytes`` ``generator``, "
"and means that non-ASCII may be used where allowed by the protocol (or where"
" it exists in the original input)."
msgstr ""
"``7bit`` または ``8bit`` 。 ``8bit`` は ``Bytes`` ``generator`` "
"に対してのみ適用され、プロトコルが許す場所 (あるいはオリジナルの入力に含まれる場所) には非 ASCII が使われうることを示します。"

#: ../../whatsnew/3.3.rst:1227
msgid "raise_on_defect"
msgstr "raise_on_defect"

#: ../../whatsnew/3.3.rst:1227
msgid ""
"Causes a ``parser`` to raise error when defects are encountered instead of "
"adding them to the ``Message`` object's ``defects`` list."
msgstr ""
"``parser`` が異常を検出した場合に、 ``Message`` オブジェクトの ``defects`` "
"リストに追加するのではなく例外を送出するようにします。"

#: ../../whatsnew/3.3.rst:1232
msgid ""
"A new policy instance, with new settings, is created using the "
":meth:`~email.policy.Policy.clone` method of policy objects.  ``clone`` "
"takes any of the above controls as keyword arguments.  Any control not "
"specified in the call retains its default value.  Thus you can create a "
"policy that uses ``\\r\\n`` linesep characters like this::"
msgstr ""
"新たな設定値を持つ新しいポリシーインスタンスは、ポリシーオブジェクトの :meth:`~email.policy.Policy.clone` "
"メソッドを使って作られます。 ``clone`` "
"は任意の上記制御値をキーワード引数として受け取ります。この呼び出しで指定されない制御はデフォルトのまま残されます。ですので linesep 文字列として"
" ``\\r\\n`` を使うポリシーをこのようにして作れます::"

#: ../../whatsnew/3.3.rst:1240
msgid ""
"Policies can be used to make the generation of messages in the format needed"
" by your application simpler.  Instead of having to remember to specify "
"``linesep='\\r\\n'`` in all the places you call a ``generator``, you can "
"specify it once, when you set the policy used by the ``parser`` or the "
"``Message``, whichever your program uses to create ``Message`` objects.  On "
"the other hand, if you need to generate messages in multiple forms, you can "
"still specify the parameters in the appropriate ``generator`` call.  Or you "
"can have custom policy instances for your different cases, and pass those in"
" when you create the ``generator``."
msgstr ""
"ポリシーは、あなたのアプリケーションが必要とするフォーマットでメッセージを生成するのを簡単にしてくれます。 ``generator`` "
"を呼び出す全ての場所で ``linesep='\\r\\n'`` を指定するのを忘れないようにする代わりに、あなたのプログラムが ``Message``"
" オブジェクトを作成するために使う ``parser`` あるいは ``Message`` "
"がポリシーを要求する一箇所だけで指定すれば良いのです。もちろん一方ではメッセージを複数の形式で生成する必要があれば、 ``generator`` "
"呼び出しのたびにパラメータで指定する必要があります。もしくは、あなた固有のケースのためにカスタムなポリシーを作って、 ``generator`` "
"作成の際にそれを渡すことも出来ます。"

#: ../../whatsnew/3.3.rst:1252
msgid "Provisional Policy with New Header API"
msgstr "新規ヘッダ API を伴った暫定ポリシー"

#: ../../whatsnew/3.3.rst:1254
msgid ""
"While the policy framework is worthwhile all by itself, the main motivation "
"for introducing it is to allow the creation of new policies that implement "
"new features for the email package in a way that maintains backward "
"compatibility for those who do not use the new policies.  Because the new "
"policies introduce a new API, we are releasing them in Python 3.3 as a "
":term:`provisional policy <provisional package>`.  Backwards incompatible "
"changes (up to and including removal of the code) may occur if deemed "
"necessary by the core developers."
msgstr ""
"ポリシーフレームワーク単品でもまったくもって価値があるものではありますが、その導入の主たる動機は、それを使わないコードに対しての後方互換を壊さないやり方で、email"
" パッケージに新機能を実現する新しいポリシーを作れるようにすることでした。その新しいポリシーは新規 API を導入するものなので、私たちはそれらを "
"Python 3.3 での :term:`暫定ポリシー <provisional package>` "
"としてリリースしました。コア開発者が必要と判断すれば、後方互換性を破壊する (コードの破棄さえも含む) 変更が起こりえます。"

#: ../../whatsnew/3.3.rst:1262
msgid ""
"The new policies are instances of :class:`~email.policy.EmailPolicy`, and "
"add the following additional controls:"
msgstr ""
"その新規ポリシーは :class:`~email.policy.EmailPolicy` のインスタンス (訳注: "
":data:`email.policy.default` や :data:`email.policy.SMTP` など) "
"です。これには以下の制御が追加されています:"

#: ../../whatsnew/3.3.rst:1268
msgid "refold_source"
msgstr "refold_source"

#: ../../whatsnew/3.3.rst:1268
msgid ""
"Controls whether or not headers parsed by a :mod:`~email.parser` are "
"refolded by the :mod:`~email.generator`.  It can be ``none``, ``long``, or "
"``all``.  The default is ``long``, which means that source headers with a "
"line longer than ``max_line_length`` get refolded.  ``none`` means no line "
"get refolded, and ``all`` means that all lines get refolded."
msgstr ""
":mod:`~email.parser` により解析されたヘッダを、 :mod:`~email.generator` が折り返しし直す (refold)"
" かどうかを制御します。 ``none``, ``long``, ``all`` のいずれかを指定します。デフォルトは ``long`` "
"で、ソースのヘッダで ``max_line_length`` よりも長い行を refold します。 ``none`` はどの行も refold "
"しません。 ``all`` は全ての行を refold します。"

#: ../../whatsnew/3.3.rst:1277
msgid "header_factory"
msgstr "header_factory"

#: ../../whatsnew/3.3.rst:1277
msgid ""
"A callable that take a ``name`` and ``value`` and produces a custom header "
"object."
msgstr "``name`` と ``value`` を引数に取り、カスタムなヘッダオブジェクトを生成する呼び出し可能 (callable) です。"

#: ../../whatsnew/3.3.rst:1281
msgid ""
"The ``header_factory`` is the key to the new features provided by the new "
"policies.  When one of the new policies is used, any header retrieved from a"
" ``Message`` object is an object produced by the ``header_factory``, and any"
" time you set a header on a ``Message`` it becomes an object produced by "
"``header_factory``.  All such header objects have a ``name`` attribute equal"
" to the header name.  Address and Date headers have additional attributes "
"that give you access to the parsed data of the header.  This means you can "
"now do things like this::"
msgstr ""
"``header_factory`` が、この新規ポリシーにより提供される新機能の要です。この新規ポリシーの一つが使われると、 ``Message`` "
"オブジェクトから抽出されたすべてのヘッダは ``header_factory`` で生成されるオブジェクトであり、また、 ``Message`` "
"にヘッダをセットする場合のいつでも、それは ``header_factory`` "
"で生成されるオブジェクトになります。すべてのその種のヘッダオブジェクトは、ヘッダ名と同名の ``name`` "
"属性を持ちます。アドレスヘッダと日付ヘッダは、ヘッダの解析済み日付にアクセス出来るよう、追加の属性群を持ちます。以下のように使えます::"

#: ../../whatsnew/3.3.rst:1309
msgid ""
"You will note that the unicode display name is automatically encoded as "
"``utf-8`` when the message is serialized, but that when the header is "
"accessed directly, you get the unicode version.  This eliminates any need to"
" deal with the :mod:`email.header` :meth:`~email.header.decode_header` or "
":meth:`~email.header.make_header` functions."
msgstr ""
"Unicode の display name が、メッセージがシリアライズされる際に自動的に ``utf-8`` (訳注: 実行例の場合は「の MIME"
" ヘッダエンコード」) でエンコードされ、ヘッダに直接アクセスすると Unicode で返ることに気付くと思います。つまり "
":mod:`email.header` の :meth:`~email.header.decode_header` 関数や "
":meth:`~email.header.make_header` 関数を取り扱う必要性を取り除いてくれています。"

#: ../../whatsnew/3.3.rst:1315
msgid "You can also create addresses from parts::"
msgstr "アドレスを部品から組み立てることも出来ます::"

#: ../../whatsnew/3.3.rst:1325
msgid "Decoding to unicode is done automatically::"
msgstr "Unicode へデコードするのは自動で行われます::"

#: ../../whatsnew/3.3.rst:1331
msgid ""
"When you parse a message, you can use the ``addresses`` and ``groups`` "
"attributes of the header objects to access the groups and individual "
"addresses::"
msgstr ""
"メッセージ解析の際、グループと個々のアドレスにアクセスするのにヘッダオブジェクトの ``addresses`` 属性と ``groups`` "
"属性を使えます::"

#: ../../whatsnew/3.3.rst:1340
msgid ""
"In summary, if you use one of the new policies, header manipulation works "
"the way it ought to:  your application works with unicode strings, and the "
"email package transparently encodes and decodes the unicode to and from the "
"RFC standard Content Transfer Encodings."
msgstr ""
"要するに新規ポリシーのどれか一つを使うことは、ヘッダ操作をこのようなものにしてくれるということです: あなたのアプリケーションは Unicode "
"文字列でお仕事をし、email パッケージは Unicode のエンコード/デコードを透過的に行って RFC 標準 Content Transfer "
"Encoding との相互変換をやってのける、と。"

#: ../../whatsnew/3.3.rst:1346
msgid "Other API Changes"
msgstr "その他のAPIの変更"

#: ../../whatsnew/3.3.rst:1348
msgid ""
"New :class:`~email.parser.BytesHeaderParser`, added to the "
":mod:`~email.parser` module to complement "
":class:`~email.parser.HeaderParser` and complete the Bytes API."
msgstr ""
":class:`~email.parser.BytesHeaderParser` が :mod:`~email.parser` "
"モジュールに追加されました。これは :class:`~email.parser.HeaderParser` を補足するものであり、また、 bytes "
"API を完全にする (訳注: What's New in Python 3.2 での email の変更内容参照) ものです。"

#: ../../whatsnew/3.3.rst:1352
msgid "New utility functions:"
msgstr "新しいユーティリティ関数:"

#: ../../whatsnew/3.3.rst:1354
msgid ""
":func:`~email.utils.format_datetime`: given a :class:`~datetime.datetime`, "
"produce a string formatted for use in an email header."
msgstr ""
":func:`~email.utils.format_datetime`: :class:`~datetime.datetime` を与えると "
"email ヘッダで使われる書式でフォーマットした文字列を生成します。"

#: ../../whatsnew/3.3.rst:1357
msgid ""
":func:`~email.utils.parsedate_to_datetime`: given a date string from an "
"email header, convert it into an aware :class:`~datetime.datetime`, or a "
"naive :class:`~datetime.datetime` if the offset is ``-0000``."
msgstr ""
":func:`~email.utils.parsedate_to_datetime`: email ヘッダからの日付文字列を渡すと、 aware "
"な、または naive な :class:`~datetime.datetime` に変換します。オフセットが ``-0000`` の場合に naive"
" で返します。"

#: ../../whatsnew/3.3.rst:1361
msgid ""
":func:`~email.utils.localtime`: With no argument, returns the current local "
"time as an aware :class:`~datetime.datetime` using the local "
":class:`~datetime.timezone`.  Given an aware :class:`~datetime.datetime`, "
"converts it into an aware :class:`~datetime.datetime` using the local "
":class:`~datetime.timezone`."
msgstr ""
":func:`~email.utils.localtime`: 引数なしで呼び出すと、ローカル :class:`~datetime.timezone` "
"を使った aware な :class:`~datetime.datetime` として現在ローカル時間を返します。aware な "
":class:`~datetime.datetime` を渡して呼び出すと、ローカル :class:`~datetime.timezone` を使った "
"aware な :class:`~datetime.datetime` に変換します。"

#: ../../whatsnew/3.3.rst:1369
msgid "ftplib"
msgstr "ftplib"

#: ../../whatsnew/3.3.rst:1371
msgid ""
":class:`ftplib.FTP` now accepts a ``source_address`` keyword argument to "
"specify the ``(host, port)`` to use as the source address in the bind call "
"when creating the outgoing socket.  (Contributed by Giampaolo Rodolà in "
":issue:`8594`.)"
msgstr ""
":class:`ftplib.FTP` に新しいキーワード引数 ``source_address`` が追加されました。 ``(host, "
"port)`` の形で指定し、これは外に向かうソケットを作成する際に :meth:`~socket.socket.bind` "
"呼び出し内でのソースアドレスとして用いられます。 (Contributed by Giampaolo Rodolà in :issue:`8594`.)"

#: ../../whatsnew/3.3.rst:1376
msgid ""
"The :class:`~ftplib.FTP_TLS` class now provides a new "
":func:`~ftplib.FTP_TLS.ccc` function to revert control channel back to "
"plaintext.  This can be useful to take advantage of firewalls that know how "
"to handle NAT with non-secure FTP without opening fixed ports.  (Contributed"
" by Giampaolo Rodolà in :issue:`12139`.)"
msgstr ""
":class:`~ftplib.FTP_TLS` クラスに、制御チャネルを平文に戻すための :func:`~ftplib.FTP_TLS.ccc` "
"関数が追加されました。これは、固定ポートで開くことなく非セキュア FTP で NAT "
"を処理する方法を知っているファイアウォールを利用するのに有用となりえます。(Contributed by Giampaolo Rodolà in "
":issue:`12139`.)"

#: ../../whatsnew/3.3.rst:1382
msgid ""
"Added :meth:`ftplib.FTP.mlsd` method which provides a parsable directory "
"listing format and deprecates :meth:`ftplib.FTP.nlst` and "
":meth:`ftplib.FTP.dir`.  (Contributed by Giampaolo Rodolà in "
":issue:`11072`.)"
msgstr ""
"新規メソッド :meth:`ftplib.FTP.mlsd` は機械で読めるディレクトリリスティングのフォーマットを提供し、 "
":meth:`ftplib.FTP.nlst` と :meth:`ftplib.FTP.dir` "
"に取って代わるものとなりました。(Contributed by Giampaolo Rodolà in :issue:`11072`.)"

#: ../../whatsnew/3.3.rst:1388
msgid "functools"
msgstr "functools"

#: ../../whatsnew/3.3.rst:1390
msgid ""
"The :func:`functools.lru_cache` decorator now accepts a ``typed`` keyword "
"argument (that defaults to ``False`` to ensure that it caches values of "
"different types that compare equal in separate cache slots.  (Contributed by"
" Raymond Hettinger in :issue:`13227`.)"
msgstr ""
":func:`functools.lru_cache` デコレータにキーワード引数 ``typed`` を指定出来るようになりました (デフォルトは "
"``False`` です)。これは異なった型の等値比較のキャッシュ値を別々のキャッシュスロットに置くかどうかを決めます。(Contributed by "
"Raymond Hettinger in :issue:`13227`.)"

#: ../../whatsnew/3.3.rst:1397
msgid "gc"
msgstr "gc"

#: ../../whatsnew/3.3.rst:1399
msgid ""
"It is now possible to register callbacks invoked by the garbage collector "
"before and after collection using the new :data:`~gc.callbacks` list."
msgstr ""
"ガーベージコレクタが回収前後に呼び出すコールバックを登録出来るようになりました。新規属性 :data:`~gc.callbacks` "
"リストに登録します。"

#: ../../whatsnew/3.3.rst:1404
msgid "hmac"
msgstr "hmac"

#: ../../whatsnew/3.3.rst:1406
msgid ""
"A new :func:`~hmac.compare_digest` function has been added to prevent side "
"channel attacks on digests through timing analysis.  (Contributed by Nick "
"Coghlan and Christian Heimes in :issue:`15061`.)"
msgstr ""
"タイミング解析によるダイジェストに対する `サイドチャンネル攻撃 <https://en.wikipedia.org/wiki/Side-"
"channel_attack>`_ からの防御のために、 :func:`~hmac.compare_digest` "
"関数が追加されました。(Contributed by Nick Coghlan and Christian Heimes in "
":issue:`15061`.)"

#: ../../whatsnew/3.3.rst:1412
msgid "http"
msgstr "http"

#: ../../whatsnew/3.3.rst:1414
msgid ""
":class:`http.server.BaseHTTPRequestHandler` now buffers the headers and "
"writes them all at once when "
":meth:`~http.server.BaseHTTPRequestHandler.end_headers` is called.  A new "
"method :meth:`~http.server.BaseHTTPRequestHandler.flush_headers` can be used"
" to directly manage when the accumulated headers are sent. (Contributed by "
"Andrew Schaaf in :issue:`3709`.)"
msgstr ""
":class:`http.server.BaseHTTPRequestHandler` がヘッダをバッファするようになり、 "
":meth:`~http.server.BaseHTTPRequestHandler.end_headers` "
"呼び出し時に一度に全てをまとめて書き出すようになりました。新規のメソッド "
":meth:`~http.server.BaseHTTPRequestHandler.flush_headers` "
"は、集積したヘッダを送信する場合の管理に直接使うことが出来ます。(Contributed by Andrew Schaaf in "
":issue:`3709`.)"

#: ../../whatsnew/3.3.rst:1420
msgid ""
":class:`http.server` now produces valid ``HTML 4.01 strict`` output. "
"(Contributed by Ezio Melotti in :issue:`13295`.)"
msgstr ""
":class:`http.server` が正当な ``HTML 4.01 strict`` 出力を生成するようになりました。 (Contributed"
" by Ezio Melotti in :issue:`13295`.)"

#: ../../whatsnew/3.3.rst:1423
msgid ""
":class:`http.client.HTTPResponse` now has a "
":meth:`~http.client.HTTPResponse.readinto` method, which means it can be "
"used as an :class:`io.RawIOBase` class.  (Contributed by John Kuhn in "
":issue:`13464`.)"
msgstr ""
":class:`http.client.HTTPResponse` にメソッド "
":meth:`~http.client.HTTPResponse.readinto` が追加されました。つまりこのクラスを "
":class:`io.RawIOBase` のように扱えるということです。 (Contributed by John Kuhn in "
":issue:`13464`.)"

#: ../../whatsnew/3.3.rst:1430
msgid "html"
msgstr "html"

#: ../../whatsnew/3.3.rst:1432
msgid ""
":class:`html.parser.HTMLParser` is now able to parse broken markup without "
"raising errors, therefore the *strict* argument of the constructor and the "
":exc:`~html.parser.HTMLParseError` exception are now deprecated. The ability"
" to parse broken markup is the result of a number of bug fixes that are also"
" available on the latest bug fix releases of Python 2.7/3.2. (Contributed by"
" Ezio Melotti in :issue:`15114`, and :issue:`14538`, :issue:`13993`, "
":issue:`13960`, :issue:`13358`, :issue:`1745761`, :issue:`755670`, "
":issue:`13357`, :issue:`12629`, :issue:`1200313`, :issue:`670664`, "
":issue:`13273`, :issue:`12888`, :issue:`7311`.)"
msgstr ""
":class:`html.parser.HTMLParser` が壊れたマークアップをエラーなしで解析出来るようになりました。これによりコンストラクタの"
" *strict* 引数と :exc:`~html.parser.HTMLParseError` "
"例外が撤廃されました。この壊れたマークアップを解析出来る能力は数多くのバグフィックスからの結果であり、それらは Python 2.7/3.2 "
"の最新バグフィックスリリースでも利用可能です。(Contributed by Ezio Melotti in :issue:`15114`, and "
":issue:`14538`, :issue:`13993`, :issue:`13960`, :issue:`13358`, "
":issue:`1745761`, :issue:`755670`, :issue:`13357`, :issue:`12629`, "
":issue:`1200313`, :issue:`670664`, :issue:`13273`, :issue:`12888`, "
":issue:`7311`.)"

#: ../../whatsnew/3.3.rst:1442
msgid ""
"A new :data:`~html.entities.html5` dictionary that maps HTML5 named "
"character references to the equivalent Unicode character(s) (e.g. "
"``html5['gt;'] == '>'``) has been added to the :mod:`html.entities` module."
"  The dictionary is now also used by :class:`~html.parser.HTMLParser`.  "
"(Contributed by Ezio Melotti in :issue:`11113` and :issue:`15156`.)"
msgstr ""
":mod:`html.entities` モジュールに、HTML5 名前付き文字参照と Unicode 文字(列) とを対応付ける "
":data:`~html.entities.html5` 辞書が追加されました (例: ``html5['gt;'] == '>'``)。この辞書は既に"
" :class:`~html.parser.HTMLParser` が使っています。 (Contributed by Ezio Melotti in "
":issue:`11113` and :issue:`15156`.)"

#: ../../whatsnew/3.3.rst:1450
msgid "imaplib"
msgstr "imaplib"

#: ../../whatsnew/3.3.rst:1452
msgid ""
"The :class:`~imaplib.IMAP4_SSL` constructor now accepts an SSLContext "
"parameter to control parameters of the secure channel."
msgstr ""
":class:`~imaplib.IMAP4_SSL` コンストラクタが SSLContext "
"パラメータを受け取るようになりました。これはセキュアなチャネルのパラメータを制御します。"

#: ../../whatsnew/3.3.rst:1455
msgid "(Contributed by Sijin Joseph in :issue:`8808`.)"
msgstr "(Contributed by Sijin Joseph in :issue:`8808`.)"

#: ../../whatsnew/3.3.rst:1459
msgid "inspect"
msgstr "inspect"

#: ../../whatsnew/3.3.rst:1461
msgid ""
"A new :func:`~inspect.getclosurevars` function has been added. This function"
" reports the current binding of all names referenced from the function body "
"and where those names were resolved, making it easier to verify correct "
"internal state when testing code that relies on stateful closures."
msgstr ""
":func:`~inspect.getclosurevars` "
"関数が追加されました。この関数は、指定した関数の関数本体から参照されている現在束縛されている全ての名前と、それら名前が解決された場所 (訳注: "
"globals, builtins など) "
"を報告します。これにより、ステートフルなクロージャに依存するコードをテストするのに、正しい内部状態を検証するのが容易になります。"

#: ../../whatsnew/3.3.rst:1466
msgid "(Contributed by Meador Inge and Nick Coghlan in :issue:`13062`.)"
msgstr "(Contributed by Meador Inge and Nick Coghlan in :issue:`13062`.)"

#: ../../whatsnew/3.3.rst:1468
msgid ""
"A new :func:`~inspect.getgeneratorlocals` function has been added. This "
"function reports the current binding of local variables in the generator's "
"stack frame, making it easier to verify correct internal state when testing "
"generators."
msgstr ""
":func:`~inspect.getgeneratorlocals` "
"関数が追加されました。この関数は、指定したジェネレータのスタックフレーム内のローカル変数の、現在束縛されているものを報告します。これにより、ジェネレータをテストするのに、正しい内部状態を検証するのが容易になります。"

#: ../../whatsnew/3.3.rst:1473
msgid "(Contributed by Meador Inge in :issue:`15153`.)"
msgstr "(Contributed by Meador Inge in :issue:`15153`.)"

#: ../../whatsnew/3.3.rst:1476
msgid "io"
msgstr "io"

#: ../../whatsnew/3.3.rst:1478
msgid ""
"The :func:`~io.open` function has a new ``'x'`` mode that can be used to "
"exclusively create a new file, and raise a :exc:`FileExistsError` if the "
"file already exists. It is based on the C11 'x' mode to fopen()."
msgstr ""
":func:`~io.open` 関数に排他的作成に使用する新たな ``'x'`` モードが追加されました。ファイルが既に存在する場合は :exc:`FileExistsError` を送出します。\n"
"C11 fopen() の 'x' モードに基づいています。"

#: ../../whatsnew/3.3.rst:1482
msgid "(Contributed by David Townshend in :issue:`12760`.)"
msgstr "(Contributed by David Townshend in :issue:`12760`.)"

#: ../../whatsnew/3.3.rst:1484
msgid ""
"The constructor of the :class:`~io.TextIOWrapper` class has a new "
"*write_through* optional argument. If *write_through* is ``True``, calls to "
":meth:`~io.TextIOWrapper.write` are guaranteed not to be buffered: any data "
"written on the :class:`~io.TextIOWrapper` object is immediately handled to "
"its underlying binary buffer."
msgstr ""
":class:`~io.TextIOWrapper` のコンストラクタにオプショナルな引数 *write_through*  が追加されました。 "
"*write_through* が ``True`` の場合、:meth:`write` の呼び出しはバッファされないことが保証されます。 "
":class:`TextIOWrapper` オブジェクトに書かれた全てのデータは直ちに下層のバイナリ *buffer* に処理されます。"

#: ../../whatsnew/3.3.rst:1492
msgid "itertools"
msgstr "itertools"

#: ../../whatsnew/3.3.rst:1494
msgid ""
":func:`~itertools.accumulate` now takes an optional ``func`` argument for "
"providing a user-supplied binary function."
msgstr ""
":func:`~itertools.accumulate` がユーザ提供二項関数を渡すためのオプショナル引数 ``func`` "
"を受け付けるようになりました。"

#: ../../whatsnew/3.3.rst:1499
msgid "logging"
msgstr "logging"

#: ../../whatsnew/3.3.rst:1501
msgid ""
"The :func:`~logging.basicConfig` function now supports an optional "
"``handlers`` argument taking an iterable of handlers to be added to the root"
" logger."
msgstr ""
":func:`~logging.basicConfig` 関数がオプショナルな ``handlers`` "
"引数をサポートするようになりました。これはルートロガーに追加するハンドラ群の :term:`イテラブル <iterable>` です。"

#: ../../whatsnew/3.3.rst:1504
msgid ""
"A class level attribute :attr:`~logging.handlers.SysLogHandler.append_nul` "
"has been added to :class:`~logging.handlers.SysLogHandler` to allow control "
"of the appending of the ``NUL`` (``\\000``) byte to syslog records, since "
"for some daemons it is required while for others it is passed through to the"
" log."
msgstr ""
":class:`~logging.handlers.SysLogHandler` クラスに、クラスレベル属性の "
":attr:`~logging.handlers.SysLogHandler.append_nul` が追加されました。これは syslog レコードに"
" ``NUL`` (``\\000``) "
"バイトを追加するかどうかを制御します。これはあるデーモンはこれで終端することが必要な一方でほかはメッセージの一部として NUL "
"を通すという、デーモンによって振る舞いが異なることに対応するためです。"

#: ../../whatsnew/3.3.rst:1512
msgid "math"
msgstr "math"

#: ../../whatsnew/3.3.rst:1514
msgid ""
"The :mod:`math` module has a new function, :func:`~math.log2`,  which "
"returns the base-2 logarithm of *x*."
msgstr ""
":mod:`math` モジュールに新たな関数 :func:`~math.log2` が追加されました。*x* の 2 を底とする対数を返します。"

#: ../../whatsnew/3.3.rst:1517
msgid "(Written by Mark Dickinson in :issue:`11888`.)"
msgstr "(Written by Mark Dickinson in :issue:`11888`.)"

#: ../../whatsnew/3.3.rst:1521
msgid "mmap"
msgstr "mmap"

#: ../../whatsnew/3.3.rst:1523
msgid ""
"The :meth:`~mmap.mmap.read` method is now more compatible with other file-"
"like objects: if the argument is omitted or specified as ``None``, it "
"returns the bytes from the current file position to the end of the mapping."
"  (Contributed by Petri Lehtinen in :issue:`12021`.)"
msgstr ""
":meth:`~mmap.mmap.read` メソッドの他のファイルライクなオブジェクトとの互換性が増しました。引数が省略されるか ``None`` "
"の場合に、ファイルの現在位置からマッピングの末尾までのバイト列を返すようになっています。(Contributed by Petri Lehtinen "
"in :issue:`12021`.)"

#: ../../whatsnew/3.3.rst:1530
msgid "multiprocessing"
msgstr "multiprocessing"

#: ../../whatsnew/3.3.rst:1532
msgid ""
"The new :func:`multiprocessing.connection.wait` function allows polling "
"multiple objects (such as connections, sockets and pipes) with a timeout. "
"(Contributed by Richard Oudkerk in :issue:`12328`.)"
msgstr ""
"関数 :func:`multiprocessing.connection.wait` が追加されました。これは複数の (接続やソケット、パイプのような)"
" オブジェクトをタイムアウト付きでポーリングします。(Contributed by Richard Oudkerk in "
":issue:`12328`.)"

#: ../../whatsnew/3.3.rst:1536
msgid ""
":class:`multiprocessing.Connection` objects can now be transferred over "
"multiprocessing connections. (Contributed by Richard Oudkerk in "
":issue:`4892`.)"
msgstr ""
"プロセス間で　(訳注: :meth:`Connection.send` と :meth:`Connection.recv` で) "
":class:`multiprocessing.Connection` オブジェクトを相互に転送出来るようになりました。 (Contributed by"
" Richard Oudkerk in :issue:`4892`.)"

#: ../../whatsnew/3.3.rst:1540
msgid ""
":class:`multiprocessing.Process` now accepts a ``daemon`` keyword argument "
"to override the default behavior of inheriting the ``daemon`` flag from the "
"parent process (:issue:`6064`)."
msgstr ""
":class:`multiprocessing.Process` がキーワード引数 ``daemon`` を取るようになりました。これは親プロセスから "
"``daemon`` フラグを継承するデフォルトの振る舞いをオーバライドします (:issue:`6064`)。"

#: ../../whatsnew/3.3.rst:1544
msgid ""
"New attribute :data:`multiprocessing.Process.sentinel` allows a program to "
"wait on multiple :class:`~multiprocessing.Process` objects at one time using"
" the appropriate OS primitives (for example, :mod:`select` on posix "
"systems)."
msgstr ""
"属性 :data:`multiprocessing.Process.sentinel` が追加されました。これを用いることで、ふさわしい OS "
"プリミティブ (例えば POSIX システムでの :mod:`select`) を使った一括での複数 "
":class:`~multiprocessing.Process` オブジェクト待ちが可能です。"

#: ../../whatsnew/3.3.rst:1549
msgid ""
"New methods :meth:`multiprocessing.pool.Pool.starmap` and "
":meth:`~multiprocessing.pool.Pool.starmap_async` provide "
":func:`itertools.starmap` equivalents to the existing "
":meth:`multiprocessing.pool.Pool.map` and "
":meth:`~multiprocessing.pool.Pool.map_async` functions.  (Contributed by "
"Hynek Schlawack in :issue:`12708`.)"
msgstr ""
":func:`map` と :func:`itertools.starmap` との関係と同じ、既存の "
":meth:`multiprocessing.pool.Pool.map` と "
":meth:`~multiprocessing.pool.Pool.map_async` に対応する "
":meth:`multiprocessing.pool.Pool.starmap` と "
":meth:`~multiprocessing.pool.Pool.starmap_async` が追加されました。 (Contributed by "
"Hynek Schlawack in :issue:`12708`.)"

#: ../../whatsnew/3.3.rst:1558
msgid "nntplib"
msgstr "nntplib"

#: ../../whatsnew/3.3.rst:1560
msgid ""
"The :class:`nntplib.NNTP` class now supports the context management protocol"
" to unconditionally consume :exc:`socket.error` exceptions and to close the "
"NNTP connection when done::"
msgstr ""
":class:`nntplib.NNTP` クラスがコンテキスト管理プロトコルをサポートするようになりました。with ブロックを抜ける際に無条件に "
"NNTP 接続をクローズします (クローズ処理で発生する :exc:`socket.error` は無視されます)。::"

#: ../../whatsnew/3.3.rst:1571
msgid "(Contributed by Giampaolo Rodolà in :issue:`9795`.)"
msgstr "(Contributed by Giampaolo Rodolà in :issue:`9795`.)"

#: ../../whatsnew/3.3.rst:1575
msgid "os"
msgstr "os"

#: ../../whatsnew/3.3.rst:1577
msgid ""
"The :mod:`os` module has a new :func:`~os.pipe2` function that makes it "
"possible to create a pipe with :data:`~os.O_CLOEXEC` or "
":data:`~os.O_NONBLOCK` flags set atomically. This is especially useful to "
"avoid race conditions in multi-threaded programs."
msgstr ""
":mod:`os` モジュールに :func:`~os.pipe2` 関数が追加されました。これはフラグ :data:`~os.O_CLOEXEC` と"
" :data:`~os.O_NONBLOCK` を (論理和指定で) "
"セットしたパイプをアトミックに作ることが出来ます。これはマルチスレッドプログラムでの競合状態を避けるために特に有用です。"

#: ../../whatsnew/3.3.rst:1582
msgid ""
"The :mod:`os` module has a new :func:`~os.sendfile` function which provides "
"an efficient \"zero-copy\" way for copying data from one file (or socket) "
"descriptor to another. The phrase \"zero-copy\" refers to the fact that all "
"of the copying of data between the two descriptors is done entirely by the "
"kernel, with no copying of data into userspace buffers. :func:`~os.sendfile`"
" can be used to efficiently copy data from a file on disk to a network "
"socket, e.g. for downloading a file."
msgstr ""
":mod:`os` モジュールに :func:`~os.sendfile` 関数が追加されました。これはあるファイル (またはソケット) "
"記述子からのコピーを、効率的な「ゼロコピー」で行います。「ゼロコピー」という言い回しは、これは二つの記述子間でのデータのコピー全てが完全にカーネルによって行われる、という事実について指しています。データコピーにユーザ空間のバッファは使われません。"
" :func:`~os.sendfile` "
"は例えばファイルのダウンロードのような、ディスク上のファイルとネットワークソケット間での効率的なデータコピーに使うことが出来ます。"

#: ../../whatsnew/3.3.rst:1590
msgid ""
"(Patch submitted by Ross Lagerwall and Giampaolo Rodolà in :issue:`10882`.)"
msgstr ""
"(Patch submitted by Ross Lagerwall and Giampaolo Rodolà in :issue:`10882`.)"

#: ../../whatsnew/3.3.rst:1592
msgid ""
"To avoid race conditions like symlink attacks and issues with temporary "
"files and directories, it is more reliable (and also faster) to manipulate "
"file descriptors instead of file names. Python 3.3 enhances existing "
"functions and introduces new functions to work on file descriptors "
"(:issue:`4761`, :issue:`10755` and :issue:`14626`)."
msgstr ""
"シンボリックリンク攻撃や一時ファイル、一時ディレクトリにまつわる問題のような競合状態を避けるには、ファイル名の代わりにファイル記述子を操作することがより信頼出来ます"
" (そして高速でもあります)。 Python 3.3 はファイル記述子で動作するよう既存関数の強化と新規関数の追加を行ないました。 "
"(:issue:`4761`, :issue:`10755` and :issue:`14626`)"

#: ../../whatsnew/3.3.rst:1598
msgid ""
"The :mod:`os` module has a new :func:`~os.fwalk` function similar to "
":func:`~os.walk` except that it also yields file descriptors referring to "
"the directories visited. This is especially useful to avoid symlink races."
msgstr ""
":mod:`os` モジュールの新規関数 :func:`~os.fwalk` は :func:`~os.walk` "
"と似ていますが、これは訪問するディレクトリを指すファイル記述子も yield します。これは特にシンボリックリンクの競合を避けるために有用です。"

#: ../../whatsnew/3.3.rst:1602
msgid ""
"The following functions get new optional *dir_fd* (:ref:`paths relative to "
"directory descriptors <dir_fd>`) and/or *follow_symlinks* (:ref:`not "
"following symlinks <follow_symlinks>`): :func:`~os.access`, "
":func:`~os.chflags`, :func:`~os.chmod`, :func:`~os.chown`, :func:`~os.link`,"
" :func:`~os.lstat`, :func:`~os.mkdir`, :func:`~os.mkfifo`, "
":func:`~os.mknod`, :func:`~os.open`, :func:`~os.readlink`, "
":func:`~os.remove`, :func:`~os.rename`, :func:`~os.replace`, "
":func:`~os.rmdir`, :func:`~os.stat`, :func:`~os.symlink`, "
":func:`~os.unlink`, :func:`~os.utime`.  Platform support for using these "
"parameters can be checked via the sets :data:`os.supports_dir_fd` and "
":data:`os.supports_follows_symlinks`."
msgstr ""
"関数 :func:`~os.access`, :func:`~os.chflags`, :func:`~os.chmod`, "
":func:`~os.chown`, :func:`~os.link`, :func:`~os.lstat`, :func:`~os.mkdir`, "
":func:`~os.mkfifo`, :func:`~os.mknod`, :func:`~os.open`, "
":func:`~os.readlink`, :func:`~os.remove`, :func:`~os.rename`, "
":func:`~os.replace`, :func:`~os.rmdir`, :func:`~os.stat`, "
":func:`~os.symlink`, :func:`~os.unlink`, :func:`~os.utime` が、新たな 2 "
"つのオプショナルなキーワード引数のどちらか、または両方をサポートするようになりました。 *dir_fd* (:ref:`paths relative "
"to directory descriptors <dir_fd>`) と *follow_symlinks* (:ref:`not following"
" symlinks <follow_symlinks>`) です。プラットフォームがそれらパラメータをサポートするかどうかは "
":data:`os.supports_dir_fd` と :data:`os.supports_follow_symlinks` "
"を調べることでわかります。"

#: ../../whatsnew/3.3.rst:1613
msgid ""
"The following functions now support a file descriptor for their path "
"argument: :func:`~os.chdir`, :func:`~os.chmod`, :func:`~os.chown`, "
":func:`~os.execve`, :func:`~os.listdir`, :func:`~os.pathconf`, "
":func:`~os.path.exists`, :func:`~os.stat`, :func:`~os.statvfs`, "
":func:`~os.utime`.  Platform support for this can be checked via the "
":data:`os.supports_fd` set."
msgstr ""
"関数 :func:`~os.chdir`, :func:`~os.chmod`, :func:`~os.chown`, "
":func:`~os.execve`, :func:`~os.listdir`, :func:`~os.pathconf`, "
":func:`~os.path.exists`, :func:`~os.stat`, :func:`~os.statvfs`, "
":func:`~os.utime` が、パス引数としてファイル記述子をサポートするようになりました。これをプラットフォームがサポートするかどうかは "
":data:`os.supports_fd` を調べることでわかります。"

#: ../../whatsnew/3.3.rst:1619
msgid ""
":func:`~os.access` accepts an ``effective_ids`` keyword argument to turn on "
"using the effective uid/gid rather than the real uid/gid in the access "
"check. Platform support for this can be checked via the "
":data:`~os.supports_effective_ids` set."
msgstr ""
":func:`~os.access` がキーワード引数 ``effective_ids`` を受け取るようになりました。これは実 uid/gid "
"の代わりに実効 uid/gid を使ってアクセスチェックを行うように振る舞いを変更します。これをプラットフォームがサポートするかどうかは "
":data:`~os.supports_effective_ids` を調べることでわかります。"

#: ../../whatsnew/3.3.rst:1624
msgid ""
"The :mod:`os` module has two new functions: :func:`~os.getpriority` and "
":func:`~os.setpriority`. They can be used to get or set process "
"niceness/priority in a fashion similar to :func:`os.nice` but extended to "
"all processes instead of just the current one."
msgstr ""
":mod:`os` モジュールに 2 つの関数が追加されました。 :func:`~os.getpriority` と "
":func:`~os.setpriority` です。これらはプロセスのナイス値/優先度 (niceness/priority) を "
":func:`os.nice` と似た方法で取得・設定しますが、現在プロセスだけのものだけではなく全てのプロセスに対して使えるよう拡張されています。"

#: ../../whatsnew/3.3.rst:1629
msgid "(Patch submitted by Giampaolo Rodolà in :issue:`10784`.)"
msgstr "(Patch submitted by Giampaolo Rodolà in :issue:`10784`.)"

#: ../../whatsnew/3.3.rst:1631
msgid ""
"The new :func:`os.replace` function allows cross-platform renaming of a file"
" with overwriting the destination.  With :func:`os.rename`, an existing "
"destination file is overwritten under POSIX, but raises an error under "
"Windows. (Contributed by Antoine Pitrou in :issue:`8828`.)"
msgstr ""
"新規関数 :func:`os.replace` は変更先の上書きにおいてクロスプラットフォームな方法でファイル名変更を行えます。既存の "
":func:`os.rename` では、変更先が既存のファイルの場合に POSIX では上書き、Windows "
"ではエラーとなります。(Contributed by Antoine Pitrou in :issue:`8828`.)"

#: ../../whatsnew/3.3.rst:1637
msgid ""
"The stat family of functions (:func:`~os.stat`, :func:`~os.fstat`, and "
":func:`~os.lstat`) now support reading a file's timestamps with nanosecond "
"precision.  Symmetrically, :func:`~os.utime` can now write file timestamps "
"with nanosecond precision.  (Contributed by Larry Hastings in "
":issue:`14127`.)"
msgstr ""
"stat 系関数 (:func:`~os.stat`, :func:`~os.fstat`, :func:`~os.lstat`) "
"がファイルのタイムスタンプのナノ秒精度を読み取れるようになりました。これと対となる :func:`~os.utime` "
"もファイルのタイムスタンプをナノ秒精度で書き出せるようになりました。 (Contributed by Larry Hastings in "
":issue:`14127`.)"

#: ../../whatsnew/3.3.rst:1643
msgid ""
"The new :func:`os.get_terminal_size` function queries the size of the "
"terminal attached to a file descriptor. See also "
":func:`shutil.get_terminal_size`. (Contributed by Zbigniew Jędrzejewski-"
"Szmek in :issue:`13609`.)"
msgstr ""
"新規関数 :func:`os.get_terminal_size` はファイル記述子が接続しているターミナルウィンドウのサイズを取得します。 "
":func:`shutil.get_terminal_size` も参照して下さい。 (Contributed by Zbigniew "
"Jędrzejewski-Szmek in :issue:`13609`.)"

#: ../../whatsnew/3.3.rst:1650
msgid ""
"New functions to support Linux extended attributes (:issue:`12720`): "
":func:`~os.getxattr`, :func:`~os.listxattr`, :func:`~os.removexattr`, "
":func:`~os.setxattr`."
msgstr ""
"Linux 拡張属性をサポートするための新たな関数 (:issue:`12720`): :func:`~os.getxattr`, "
":func:`~os.listxattr`, :func:`~os.removexattr`, :func:`~os.setxattr`."

#: ../../whatsnew/3.3.rst:1654
msgid ""
"New interface to the scheduler. These functions control how a process is "
"allocated CPU time by the operating system. New functions: "
":func:`~os.sched_get_priority_max`, :func:`~os.sched_get_priority_min`, "
":func:`~os.sched_getaffinity`, :func:`~os.sched_getparam`, "
":func:`~os.sched_getscheduler`, :func:`~os.sched_rr_get_interval`, "
":func:`~os.sched_setaffinity`, :func:`~os.sched_setparam`, "
":func:`~os.sched_setscheduler`, :func:`~os.sched_yield`,"
msgstr ""
"スケジューラに対する新たなインターフェイス。これら関数はプロセスに対する OS による CPU 時間割り当てを制御します。新規関数: "
":func:`~os.sched_get_priority_max`, :func:`~os.sched_get_priority_min`, "
":func:`~os.sched_getaffinity`, :func:`~os.sched_getparam`, "
":func:`~os.sched_getscheduler`, :func:`~os.sched_rr_get_interval`, "
":func:`~os.sched_setaffinity`, :func:`~os.sched_setparam`, "
":func:`~os.sched_setscheduler`, :func:`~os.sched_yield`,"

#: ../../whatsnew/3.3.rst:1663
msgid "New functions to control the file system:"
msgstr "ファイルシステムを制御する新たな関数:"

#: ../../whatsnew/3.3.rst:1665
msgid ""
":func:`~os.posix_fadvise`: Announces an intention to access data in a "
"specific pattern thus allowing the kernel to make optimizations."
msgstr ""
":func:`~os.posix_fadvise`: "
"データへアクセスする意思を、パターンを指定して宣言します。これによりカーネルが最適化を行えるようになります。"

#: ../../whatsnew/3.3.rst:1667
msgid ""
":func:`~os.posix_fallocate`: Ensures that enough disk space is allocated for"
" a file."
msgstr ":func:`~os.posix_fallocate`: ファイルを割り当てるに十分なディスクスペースを確保します。"

#: ../../whatsnew/3.3.rst:1669
msgid ":func:`~os.sync`: Force write of everything to disk."
msgstr ":func:`~os.sync`: ディスクへの全ての書き込みを強制します。"

#: ../../whatsnew/3.3.rst:1671
msgid "Additional new  posix functions:"
msgstr "追加された新たな POSIX 関数:"

#: ../../whatsnew/3.3.rst:1673
msgid ""
":func:`~os.lockf`: Apply, test or remove a POSIX lock on an open file "
"descriptor."
msgstr ":func:`~os.lockf`: オープンされたファイル記述子に対して、POSIX ロックの適用、テスト、解除を行います。"

#: ../../whatsnew/3.3.rst:1674
msgid ""
":func:`~os.pread`: Read from a file descriptor at an offset, the file offset"
" remains unchanged."
msgstr ":func:`~os.pread`: ファイル記述子の指定オフセット位置から読み込みます。ファイルオフセットは変化しません。"

#: ../../whatsnew/3.3.rst:1676
msgid ""
":func:`~os.pwrite`: Write to a file descriptor from an offset, leaving the "
"file offset unchanged."
msgstr ":func:`~os.pwrite`: ファイル記述子に対し、指定オフセット位置から書き出します。ファイルオフセットは変化しません。"

#: ../../whatsnew/3.3.rst:1678
msgid ""
":func:`~os.readv`: Read from a file descriptor into a number of writable "
"buffers."
msgstr ":func:`~os.readv`: ファイル記述子からデータを読みこんで複数の書き込み可能なバッファに書き込みます。"

#: ../../whatsnew/3.3.rst:1679
msgid ""
":func:`~os.truncate`: Truncate the file corresponding to *path*, so that it "
"is at most *length* bytes in size."
msgstr ""
":func:`~os.truncate`: *path* に対応するファイルを、サイズが最大で *length* バイトになるよう切り詰めます。"

#: ../../whatsnew/3.3.rst:1681
msgid ""
":func:`~os.waitid`: Wait for the completion of one or more child processes."
msgstr ":func:`~os.waitid`: 一つ以上の子プロセスの完了を待ちます。"

#: ../../whatsnew/3.3.rst:1682
msgid ""
":func:`~os.writev`: Write the contents of *buffers* to a file descriptor, "
"where *buffers* is an arbitrary sequence of buffers."
msgstr ""
":func:`~os.writev`: *buffers* の内容をファイル記述子へ書き出します。 *buffer* は任意のバッファのシーケンスです。"

#: ../../whatsnew/3.3.rst:1684
msgid ""
":func:`~os.getgrouplist` (:issue:`9344`): Return list of group ids that "
"specified user belongs to."
msgstr ""
":func:`~os.getgrouplist` (:issue:`9344`): 指定したユーザが属するグループ ID のリストを返します。"

#: ../../whatsnew/3.3.rst:1687
msgid ""
":func:`~os.times` and :func:`~os.uname`: Return type changed from a tuple to"
" a tuple-like object with named attributes."
msgstr ""
":func:`~os.times` および :func:`~os.uname`: "
"戻り値の型がタプルから属性名のついたタプルライクオブジェクトに変更されました。"

#: ../../whatsnew/3.3.rst:1690
msgid ""
"Some platforms now support additional constants for the :func:`~os.lseek` "
"function, such as ``os.SEEK_HOLE`` and ``os.SEEK_DATA``."
msgstr ""
"いくつかのプラットフォームにおいて、 :func:`~os.lseek` 関数で使う追加の定数をサポートするようになりました。 "
"``os.SEEK_HOLE`` や ``os.SEEK_DATA`` などです。"

#: ../../whatsnew/3.3.rst:1693
msgid ""
"New constants :data:`~os.RTLD_LAZY`, :data:`~os.RTLD_NOW`, "
":data:`~os.RTLD_GLOBAL`, :data:`~os.RTLD_LOCAL`, :data:`~os.RTLD_NODELETE`, "
":data:`~os.RTLD_NOLOAD`, and :data:`~os.RTLD_DEEPBIND` are available on "
"platforms that support them.   These are for use with the "
":func:`sys.setdlopenflags` function, and supersede the similar constants "
"defined in :mod:`ctypes` and :mod:`DLFCN`.  (Contributed by Victor Stinner "
"in :issue:`13226`.)"
msgstr ""
"新規の定数 :data:`~os.RTLD_LAZY`, :data:`~os.RTLD_NOW`, :data:`~os.RTLD_GLOBAL`, "
":data:`~os.RTLD_LOCAL`, :data:`~os.RTLD_NODELETE`, :data:`~os.RTLD_NOLOAD`, "
":data:`~os.RTLD_DEEPBIND` が、それをサポートしているプラットフォームで利用可能になりました。これらは "
":func:`sys.setdlopenflags` 関数で使います。これら定数は :mod:`ctypes` モジュールと :mod:`DLFCN` "
"で定義されている同じような定数を置き換えるものです。(Contributed by Victor Stinner in :issue:`13226`.)"

#: ../../whatsnew/3.3.rst:1701
msgid ""
":func:`os.symlink` now accepts (and ignores) the ``target_is_directory`` "
"keyword argument on non-Windows platforms, to ease cross-platform support."
msgstr ""
"クロスプラットフォームのサポートを簡単にするために、非 Windows 環境でも :func:`os.symlink` がキーワード引数 "
"``target_is_directory`` を受け付けるようになりました (単に無視します)。"

#: ../../whatsnew/3.3.rst:1706
msgid "pdb"
msgstr "pdb"

#: ../../whatsnew/3.3.rst:1708
msgid ""
"Tab-completion is now available not only for command names, but also their "
"arguments.  For example, for the ``break`` command, function and file names "
"are completed."
msgstr ""
":kbd:`Tab` キーでの補完がコマンド名だけでなくその引数に対しても使えるようになりました。例えば ``break`` "
"コマンドに対しては、関数、ファイル名が補完されます。"

#: ../../whatsnew/3.3.rst:1712
msgid "(Contributed by Georg Brandl in :issue:`14210`)"
msgstr "(Contributed by Georg Brandl in :issue:`14210`)"

#: ../../whatsnew/3.3.rst:1716
msgid "pickle"
msgstr "pickle"

#: ../../whatsnew/3.3.rst:1718
msgid ""
":class:`pickle.Pickler` objects now have an optional "
":attr:`~pickle.Pickler.dispatch_table` attribute allowing per-pickler "
"reduction functions to be set."
msgstr ""
":class:`pickle.Pickler` オブジェクトに pickler ごとのリダクション関数を設定する、オプショナルな "
":attr:`~pickle.Pickler.dispatch_table` 属性が追加されました。"

#: ../../whatsnew/3.3.rst:1722
msgid "(Contributed by Richard Oudkerk in :issue:`14166`.)"
msgstr "(Contributed by Richard Oudkerk in :issue:`14166`.)"

#: ../../whatsnew/3.3.rst:1726
msgid "pydoc"
msgstr "pydoc"

#: ../../whatsnew/3.3.rst:1728
msgid ""
"The Tk GUI and the :func:`~pydoc.serve` function have been removed from the "
":mod:`pydoc` module: ``pydoc -g`` and :func:`~pydoc.serve` have been "
"deprecated in Python 3.2."
msgstr ""
"Tk GUI と :func:`~pydoc.serve` 関数は :mod:`pydoc` モジュールから削除されました。 ``pydoc -g`` "
"と :func:`~pydoc.serve` は Python 3.2 から既に非推奨となっていました。"

#: ../../whatsnew/3.3.rst:1734
msgid "re"
msgstr "re"

#: ../../whatsnew/3.3.rst:1736
msgid ":class:`str` regular expressions now support ``\\u`` and ``\\U`` escapes."
msgstr ":class:`str` 正規表現が ``\\u`` および ``\\U`` エスケープをサポートしました。"

#: ../../whatsnew/3.3.rst:1738
msgid "(Contributed by Serhiy Storchaka in :issue:`3665`.)"
msgstr "(Contributed by Serhiy Storchaka in :issue:`3665`.)"

#: ../../whatsnew/3.3.rst:1742
msgid "sched"
msgstr "sched"

#: ../../whatsnew/3.3.rst:1744
msgid ""
":meth:`~sched.scheduler.run` now accepts a *blocking* parameter which when "
"set to false makes the method execute the scheduled events due to expire "
"soonest (if any) and then return immediately. This is useful in case you "
"want to use the :class:`~sched.scheduler` in non-blocking applications.  "
"(Contributed by Giampaolo Rodolà in :issue:`13449`.)"
msgstr ""
":meth:`~sched.scheduler.run` が *blocking* パラメータを取るようになりました。\n"
"これを偽にセットすると、このメソッドは既に実行予定時間になっているイベント (もしあれば) を実行してすぐに戻ります。\n"
"これは :class:`~sched.scheduler` を非ブロッキングなアプリケーションで使いたい場合に有用です。\n"
"(Contributed by Giampaolo Rodolà in :issue:`13449`.)\n"
"(---訳注: 原文の表現がわかりにくいですが、これは ``blocking=False`` 時はスケジュールされた時間になっているタスクがあれば通常は *delayfunc* を呼び出すところをそうせずに、一番早く次の予定時間に達するタスクの予定時間までの時間差を返します。---)"

#: ../../whatsnew/3.3.rst:1750
msgid ""
":class:`~sched.scheduler` class can now be safely used in multi-threaded "
"environments.  (Contributed by Josiah Carlson and Giampaolo Rodolà in "
":issue:`8684`.)"
msgstr ""
":class:`~sched.scheduler` クラスをマルチスレッド環境で安全に使えるようになりました。 (Contributed by "
"Josiah Carlson and Giampaolo Rodolà in :issue:`8684`.)"

#: ../../whatsnew/3.3.rst:1754
msgid ""
"*timefunc* and *delayfunct* parameters of :class:`~sched.scheduler` class "
"constructor are now optional and defaults to :func:`time.time` and "
":func:`time.sleep` respectively.  (Contributed by Chris Clark in "
":issue:`13245`.)"
msgstr ""
":class:`~sched.scheduler` クラスのコンストラクタでのパラメータ *timefunc* と *delayfunc* "
"が省略可能になりました。それぞれデフォルトで順に :func:`time.time`, :func:`time.sleep` が使われます。 "
"(Contributed by Chris Clark in :issue:`13245`.)"

#: ../../whatsnew/3.3.rst:1759
msgid ""
":meth:`~sched.scheduler.enter` and :meth:`~sched.scheduler.enterabs` "
"*argument* parameter is now optional.  (Contributed by Chris Clark in "
":issue:`13245`.)"
msgstr ""
":meth:`~sched.scheduler.enter` と :meth:`~sched.scheduler.enterabs` の "
"*argument* パラメータが省略可能になりました。  (Contributed by Chris Clark in "
":issue:`13245`.)"

#: ../../whatsnew/3.3.rst:1763
msgid ""
":meth:`~sched.scheduler.enter` and :meth:`~sched.scheduler.enterabs` now "
"accept a *kwargs* parameter.  (Contributed by Chris Clark in "
":issue:`13245`.)"
msgstr ""
":meth:`~sched.scheduler.enter` と :meth:`~sched.scheduler.enterabs` が "
"*kwargs* パラメータを受け付けるようになりました。  (Contributed by Chris Clark in "
":issue:`13245`.)"

#: ../../whatsnew/3.3.rst:1769
msgid "select"
msgstr "select"

#: ../../whatsnew/3.3.rst:1771
msgid ""
"Solaris and derivative platforms have a new class :class:`select.devpoll` "
"for high performance asynchronous sockets via :file:`/dev/poll`. "
"(Contributed by Jesús Cea Avión in :issue:`6397`.)"
msgstr ""
"Solaris とその派生プラットフォームにおいて、新規クラス :class:`select.devpoll` "
"が追加されました。これはハイパフォーマンスな非同期ソケットを :file:`/dev/poll` 経由で提供するものです。 (Contributed "
"by Jesús Cea Avión in :issue:`6397`.)"

#: ../../whatsnew/3.3.rst:1777
msgid "shlex"
msgstr "shlex"

#: ../../whatsnew/3.3.rst:1779
msgid ""
"The previously undocumented helper function ``quote`` from the :mod:`pipes` "
"modules has been moved to the :mod:`shlex` module and documented.  "
":func:`~shlex.quote` properly escapes all characters in a string that might "
"be otherwise given special meaning by the shell."
msgstr ""
"これまで :mod:`pipes` モジュールにいて文書化もされてこなかったヘルパー関数 ``quote`` が、 :mod:`shlex` "
"に移動の上で文書化されました。この :func:`~shlex.quote` "
"は、文字列内でシェルによって何か特別な意味を与えられている全ての文字を適切にエスケープします。"

#: ../../whatsnew/3.3.rst:1786
msgid "shutil"
msgstr "shutil"

#: ../../whatsnew/3.3.rst:1788
msgid "New functions:"
msgstr "新たな関数:"

#: ../../whatsnew/3.3.rst:1790
msgid ""
":func:`~shutil.disk_usage`: provides total, used and free disk space "
"statistics.  (Contributed by Giampaolo Rodolà in :issue:`12442`.)"
msgstr ""
":func:`~shutil.disk_usage`: ディスクの利用状況について、トータル、使用中、空きの容量を返します。 (Contributed "
"by Giampaolo Rodolà in :issue:`12442`.)"

#: ../../whatsnew/3.3.rst:1792
msgid ""
":func:`~shutil.chown`: allows one to change user and/or group of the given "
"path also specifying the user/group names and not only their numeric ids.  "
"(Contributed by Sandro Tosi in :issue:`12191`.)"
msgstr ""
":func:`~shutil.chown`: 指定された path "
"のユーザ、グループの両方あるいは一方を変更します。ユーザ、グループは名前もしくは数値での ID (uid, gid) "
"で指定します。(Contributed by Sandro Tosi in :issue:`12191`.)"

#: ../../whatsnew/3.3.rst:1795
msgid ""
":func:`shutil.get_terminal_size`: returns the size of the terminal window to"
" which the interpreter is attached.  (Contributed by Zbigniew Jędrzejewski-"
"Szmek in :issue:`13609`.)"
msgstr ""
":func:`shutil.get_terminal_size`: インタプリタが接続しているターミナルウィンドウのサイズを取得します。 "
"(Contributed by Zbigniew Jędrzejewski-Szmek in :issue:`13609`.)"

#: ../../whatsnew/3.3.rst:1799
msgid ""
":func:`~shutil.copy2` and :func:`~shutil.copystat` now preserve file "
"timestamps with nanosecond precision on platforms that support it. They also"
" preserve file \"extended attributes\" on Linux.  (Contributed by Larry "
"Hastings in :issue:`14127` and  :issue:`15238`.)"
msgstr ""
":func:`~shutil.copy2` と :func:`~shutil.copystat` "
"がファイルのタイムスタンプを、それをサポートするプラットフォームではナノ秒精度も維持するようになりました。また、Linux ではこれらは「拡張属性 "
"(extended attributes)」もコピーするようになりました。 (Contributed by Larry Hastings in "
":issue:`14127` and :issue:`15238`.)"

#: ../../whatsnew/3.3.rst:1804
msgid ""
"Several functions now take an optional ``symlinks`` argument: when that "
"parameter is true, symlinks aren't dereferenced and the operation instead "
"acts on the symlink itself (or creates one, if relevant). (Contributed by "
"Hynek Schlawack in :issue:`12715`.)"
msgstr ""
"いくつかの関数がオプショナルな ``symlinks`` "
"引数を取るようになりました。これが真の場合、シンボリックリンクの指す先を解決するのではなくシンボリックそのものに対しての操作をします "
"(そうすることが必要であればシンボリックリンク作成もします)。(Contributed by Hynek Schlawack in "
":issue:`12715`.)"

#: ../../whatsnew/3.3.rst:1809
msgid ""
"When copying files to a different file system, :func:`~shutil.move` now "
"handles symlinks the way the posix ``mv`` command does, recreating the "
"symlink rather than copying the target file contents.  (Contributed by "
"Jonathan Niehof in :issue:`9993`.)  :func:`~shutil.move` now also returns "
"the ``dst`` argument as its result."
msgstr ""
"ファイルシステムをまたがったファイルのコピーの際に、 :func:`~shutil.move` がシンボリックリンクを POSIX の ``move``"
" "
"コマンドが行うのと同じやり方で扱うようになりました。つまりターゲットのファイルの中身をコピーするのではなくシンボリックリンクを再作成します。(Contributed"
" by Jonathan Niehof in :issue:`9993`.) また、 :func:`~shutil.move` は ``dst`` "
"引数を戻り値として返すようになりました。"

#: ../../whatsnew/3.3.rst:1815
msgid ""
":func:`~shutil.rmtree` is now resistant to symlink attacks on platforms "
"which support the new ``dir_fd`` parameter in :func:`os.open` and "
":func:`os.unlink`.  (Contributed by Martin von Löwis and Hynek Schlawack in "
":issue:`4489`.)"
msgstr ""
":func:`os.open` と :func:`os.unlink` が新パラメータ ``dir_fd`` をサポートしているプラットフォームでは、 "
":func:`~shutil.rmtree` は今では シンボリックリンク攻撃に耐性を持ちます。 (Contributed by Martin von "
"Löwis and Hynek Schlawack in :issue:`4489`.)"

#: ../../whatsnew/3.3.rst:1822
msgid "signal"
msgstr "signal"

#: ../../whatsnew/3.3.rst:1824
msgid "The :mod:`signal` module has new functions:"
msgstr ":mod:`signal` モジュールに新規関数が追加されました:"

#: ../../whatsnew/3.3.rst:1826
msgid ""
":func:`~signal.pthread_sigmask`: fetch and/or change the signal mask of the "
"calling thread (Contributed by Jean-Paul Calderone in :issue:`8407`);"
msgstr ""
":func:`~signal.pthread_sigmask`: これを呼び出すスレッドにセットされているシグナルマスクを取り出したり変更したりします "
"(Contributed by Jean-Paul Calderone in :issue:`8407`);"

#: ../../whatsnew/3.3.rst:1828
msgid ":func:`~signal.pthread_kill`: send a signal to a thread;"
msgstr ":func:`~signal.pthread_kill`: スレッドにシグナルを送ります;"

#: ../../whatsnew/3.3.rst:1829
msgid ":func:`~signal.sigpending`: examine pending functions;"
msgstr ":func:`~signal.sigpending`: 保留中のシグナルを調べます;"

#: ../../whatsnew/3.3.rst:1830
msgid ":func:`~signal.sigwait`: wait a signal;"
msgstr ":func:`~signal.sigwait`: シグナルを待ちます;"

#: ../../whatsnew/3.3.rst:1831
msgid ""
":func:`~signal.sigwaitinfo`: wait for a signal, returning detailed "
"information about it;"
msgstr ":func:`~signal.sigwaitinfo`: シグナルを待ちますが、それについての詳細情報を返します;"

#: ../../whatsnew/3.3.rst:1833
msgid ""
":func:`~signal.sigtimedwait`: like :func:`~signal.sigwaitinfo` but with a "
"timeout."
msgstr ""
":func:`~signal.sigtimedwait`: :func:`~signal.sigwaitinfo` "
"と似ていますがタイムアウト指定できます。"

#: ../../whatsnew/3.3.rst:1836
msgid ""
"The signal handler writes the signal number as a single byte instead of a "
"nul byte into the wakeup file descriptor. So it is possible to wait more "
"than one signal and know which signals were raised."
msgstr ""
"シグナルハンドラは wakeup ファイル記述子に以前は ``\\0`` を書き込んでいましたが、シグナル番号を 1 "
"バイト整数として書き込むようにしました。これにより、一つ以上のシグナルを待った上でどのシグナルが発生したのかあとから調べるといったことが出来ます。"

#: ../../whatsnew/3.3.rst:1840
msgid ""
":func:`signal.signal` and :func:`signal.siginterrupt` raise an OSError, "
"instead of a RuntimeError: OSError has an errno attribute."
msgstr ""
":func:`signal.signal` と :func:`signal.siginterrupt` は RuntimeError ではなく "
":exc:`OSError` を投げるようになりました: OSError は errno 属性を持っています。"

#: ../../whatsnew/3.3.rst:1845
msgid "smtpd"
msgstr "smtpd"

#: ../../whatsnew/3.3.rst:1847
msgid ""
"The :mod:`smtpd` module now supports :rfc:`5321` (extended SMTP) and "
":rfc:`1870` (size extension).  Per the standard, these extensions are "
"enabled if and only if the client initiates the session with an ``EHLO`` "
"command."
msgstr ""
":mod:`smtpd` モジュールが :rfc:`5321` (extended SMTP) と :rfc:`1870` (size "
"extension) をサポートするようになりました。標準により、これら拡張を有効にするための必要十分条件はクライアントがセッションを ``EHLO``"
" コマンドで開始することです。"

#: ../../whatsnew/3.3.rst:1851
msgid ""
"(Initial ``ELHO`` support by Alberto Trevino.  Size extension by Juhana "
"Jauhiainen.  Substantial additional work on the patch contributed by Michele"
" Orrù and Dan Boswell.  :issue:`8739`)"
msgstr ""
"(Initial ``ELHO`` support by Alberto Trevino.  Size extension by Juhana "
"Jauhiainen.  Substantial additional work on the patch contributed by Michele"
" Orrù and Dan Boswell.  :issue:`8739`)"

#: ../../whatsnew/3.3.rst:1857
msgid "smtplib"
msgstr "smtplib"

#: ../../whatsnew/3.3.rst:1859
msgid ""
"The :class:`~smtplib.SMTP`, :class:`~smtplib.SMTP_SSL`, and "
":class:`~smtplib.LMTP` classes now accept a ``source_address`` keyword "
"argument to specify the ``(host, port)`` to use as the source address in the"
" bind call when creating the outgoing socket.  (Contributed by Paulo "
"Scardine in :issue:`11281`.)"
msgstr ""
"クラス :class:`~smtplib.SMTP`, :class:`~smtplib.SMTP_SSL`, "
":class:`~smtplib.LMTP` に新しいキーワード引数 ``source_address`` が追加されました。 ``(host, "
"port)`` の形で指定し、これは外に向かうソケットを作成する際に :meth:`~socket.socket.bind` "
"呼び出し内でのソースアドレスとして用いられます。(Contributed by Paulo Scardine in :issue:`11281`.)"

#: ../../whatsnew/3.3.rst:1865
msgid ""
":class:`~smtplib.SMTP` now supports the context management protocol, "
"allowing an ``SMTP`` instance to be used in a ``with`` statement.  "
"(Contributed by Giampaolo Rodolà in :issue:`11289`.)"
msgstr ""
":class:`~smtplib.SMTP` がコンテキスト管理プロトコルをサポートするようになったので ``SMTP`` のインスタンスを "
"``with`` 文で使えます。  (Contributed by Giampaolo Rodolà in :issue:`11289`.)"

#: ../../whatsnew/3.3.rst:1869
msgid ""
"The :class:`~smtplib.SMTP_SSL` constructor and the "
":meth:`~smtplib.SMTP.starttls` method now accept an SSLContext parameter to "
"control parameters of the secure channel.  (Contributed by Kasun Herath in "
":issue:`8809`.)"
msgstr ""
":class:`~smtplib.SMTP_SSL` コンストラクタと :meth:`~smtplib.SMTP.starttls` メソッドが "
"SSLContext パラメータを受け取るようになりました。これはセキュアなチャネルのパラメータを制御します。 (Contributed by "
"Kasun Herath in :issue:`8809`.)"

#: ../../whatsnew/3.3.rst:1875
msgid "socket"
msgstr "socket"

#: ../../whatsnew/3.3.rst:1877
msgid ""
"The :class:`~socket.socket` class now exposes additional methods to process "
"ancillary data when supported by the underlying platform:"
msgstr ""
":class:`~socket.socket` "
"クラスが、前提となるプラットフォームがサポートしていれば従属的なデータを処理する追加のメソッドを公開しました:"

#: ../../whatsnew/3.3.rst:1880
msgid ":func:`~socket.socket.sendmsg`"
msgstr ":func:`~socket.socket.sendmsg`"

#: ../../whatsnew/3.3.rst:1881
msgid ":func:`~socket.socket.recvmsg`"
msgstr ":func:`~socket.socket.recvmsg`"

#: ../../whatsnew/3.3.rst:1882
msgid ":func:`~socket.socket.recvmsg_into`"
msgstr ":func:`~socket.socket.recvmsg_into`"

#: ../../whatsnew/3.3.rst:1884
msgid ""
"(Contributed by David Watson in :issue:`6560`, based on an earlier patch by "
"Heiko Wundram)"
msgstr ""
"(Contributed by David Watson in :issue:`6560`, based on an earlier patch by "
"Heiko Wundram)"

#: ../../whatsnew/3.3.rst:1887
msgid ""
"The :class:`~socket.socket` class now supports the PF_CAN protocol family "
"(https://en.wikipedia.org/wiki/Socketcan), on Linux "
"(https://lwn.net/Articles/253425)."
msgstr ""
":class:`~socket.socket` クラスが Linux で (https://lwn.net/Articles/253425) "
"PF_CAN プロトコルファミリ (https://en.wikipedia.org/wiki/Socketcan) をサポートしました。"

#: ../../whatsnew/3.3.rst:1891
msgid ""
"(Contributed by Matthias Fuchs, updated by Tiago Gonçalves in "
":issue:`10141`.)"
msgstr ""
"(Contributed by Matthias Fuchs, updated by Tiago Gonçalves in "
":issue:`10141`.)"

#: ../../whatsnew/3.3.rst:1893
msgid ""
"The :class:`~socket.socket` class now supports the PF_RDS protocol family "
"(https://en.wikipedia.org/wiki/Reliable_Datagram_Sockets and "
"https://oss.oracle.com/projects/rds/)."
msgstr ""
":class:`~socket.socket` クラスが PF_RDS プロトコルファミリ "
"(https://en.wikipedia.org/wiki/Reliable_Datagram_Sockets および "
"https://oss.oracle.com/projects/rds/) をサポートするようになりました。"

#: ../../whatsnew/3.3.rst:1897
msgid ""
"The :class:`~socket.socket` class now supports the ``PF_SYSTEM`` protocol "
"family on OS X.  (Contributed by Michael Goderbauer in :issue:`13777`.)"
msgstr ""
":class:`~socket.socket` クラスが OS X で ``PF_SYSTEM`` プロトコルファミリをサポートするようになりました。 "
"(Contributed by Michael Goderbauer in :issue:`13777`.)"

#: ../../whatsnew/3.3.rst:1900
msgid ""
"New function :func:`~socket.sethostname` allows the hostname to be set on "
"unix systems if the calling process has sufficient privileges. (Contributed "
"by Ross Lagerwall in :issue:`10866`.)"
msgstr ""
"Unix システムにおいて新規関数 :func:`~socket.sethostname` "
"により、呼び出しプロセスが十分な特権を持っていればホスト名をセット出来ます。(Contributed by Ross Lagerwall in "
":issue:`10866`.)"

#: ../../whatsnew/3.3.rst:1906
msgid "socketserver"
msgstr "socketserver"

#: ../../whatsnew/3.3.rst:1908
msgid ""
":class:`~socketserver.BaseServer` now has an overridable method "
":meth:`~socketserver.BaseServer.service_actions` that is called by the "
":meth:`~socketserver.BaseServer.serve_forever` method in the service loop. "
":class:`~socketserver.ForkingMixIn` now uses this to clean up zombie child "
"processes.  (Contributed by Justin Warkentin in :issue:`11109`.)"
msgstr ""
":class:`~socketserver.BaseServer` がオーバライド可能な "
":meth:`~socketserver.BaseServer.service_actions` メソッドを持つようになり、これは "
":meth:`~socketserver.BaseServer.serve_forever` によりサービスループ内で呼び出されます。 "
":class:`~socketserver.ForkingMixIn` がこれをゾンビ化した子プロセスのクリーンアップに使っています。 "
"(Contributed by Justin Warkentin in :issue:`11109`.)"

#: ../../whatsnew/3.3.rst:1916
msgid "sqlite3"
msgstr "sqlite3"

#: ../../whatsnew/3.3.rst:1918
msgid ""
"New :class:`sqlite3.Connection` method "
":meth:`~sqlite3.Connection.set_trace_callback` can be used to capture a "
"trace of all sql commands processed by sqlite.  (Contributed by Torsten "
"Landschoff in :issue:`11688`.)"
msgstr ""
":class:`sqlite3.Connection` の新規のメソッド "
":meth:`~sqlite3.Connection.set_trace_callback` を使うと sqlite3 により処理されるすべての sql"
" コマンドの足跡 (トレース) をキャプチャ出来ます。(Contributed by Torsten Landschoff in "
":issue:`11688`.)"

#: ../../whatsnew/3.3.rst:1925
msgid "ssl"
msgstr "ssl"

#: ../../whatsnew/3.3.rst:1927
msgid "The :mod:`ssl` module has two new random generation functions:"
msgstr ":mod:`ssl` モジュールに新たに 2 つの乱数生成関数が追加されました:"

#: ../../whatsnew/3.3.rst:1929
msgid ""
":func:`~ssl.RAND_bytes`: generate cryptographically strong pseudo-random "
"bytes."
msgstr ":func:`~ssl.RAND_bytes`: 暗号学的に強固な擬似乱数バイト列を生成します。"

#: ../../whatsnew/3.3.rst:1931
msgid ":func:`~ssl.RAND_pseudo_bytes`: generate pseudo-random bytes."
msgstr ":func:`~ssl.RAND_pseudo_bytes`: 擬似乱数バイト列を生成します。"

#: ../../whatsnew/3.3.rst:1933
msgid "(Contributed by Victor Stinner in :issue:`12049`.)"
msgstr "(Contributed by Victor Stinner in :issue:`12049`.)"

#: ../../whatsnew/3.3.rst:1935
msgid ""
"The :mod:`ssl` module now exposes a finer-grained exception hierarchy in "
"order to make it easier to inspect the various kinds of errors. (Contributed"
" by Antoine Pitrou in :issue:`11183`.)"
msgstr ""
":mod:`ssl` モジュールがより粒度の細かい例外階層を公開するようになり、これにより様々な種類のエラーを調べることが容易になります。 "
"(Contributed by Antoine Pitrou in :issue:`11183`.)"

#: ../../whatsnew/3.3.rst:1939
msgid ""
":meth:`~ssl.SSLContext.load_cert_chain` now accepts a *password* argument to"
" be used if the private key is encrypted. (Contributed by Adam Simpkins in "
":issue:`12803`.)"
msgstr ""
":meth:`~ssl.SSLContext.load_cert_chain` が *password* "
"引数を受け付けるようになりました。これは秘密鍵が暗号化されている場合に使われます。 (Contributed by Adam Simpkins in "
":issue:`12803`.)"

#: ../../whatsnew/3.3.rst:1943
msgid ""
"Diffie-Hellman key exchange, both regular and Elliptic Curve-based, is now "
"supported through the :meth:`~ssl.SSLContext.load_dh_params` and "
":meth:`~ssl.SSLContext.set_ecdh_curve` methods. (Contributed by Antoine "
"Pitrou in :issue:`13626` and :issue:`13627`.)"
msgstr ""
"ディフィー・ヘルマン鍵共有の、通常のものと楕円曲線ベースのもの両方が :meth:`~ssl.SSLContext.load_dh_params` "
"メソッドと :meth:`~ssl.SSLContext.set_ecdh_curve` "
"メソッドを通じてサポートされるようになりました。(Contributed by Antoine Pitrou in :issue:`13626` and"
" :issue:`13627`.)"

#: ../../whatsnew/3.3.rst:1948
msgid ""
"SSL sockets have a new :meth:`~ssl.SSLSocket.get_channel_binding` method "
"allowing the implementation of certain authentication mechanisms such as "
"SCRAM-SHA-1-PLUS.  (Contributed by Jacek Konieczny in :issue:`12551`.)"
msgstr ""
"SSL ソケットに新規メソッド :meth:`~ssl.SSLSocket.get_channel_binding` が追加されました。これは "
"SCRAM-SHA-1-PLUS (訳注: :rfc:`5802` など参照) "
"のようなある種の認証メカニズムの実装で拡張されることを想定したものです。(Contributed by Jacek Konieczny in "
":issue:`12551`.)"

#: ../../whatsnew/3.3.rst:1952
msgid ""
"You can query the SSL compression algorithm used by an SSL socket, thanks to"
" its new :meth:`~ssl.SSLSocket.compression` method.  The new attribute "
":attr:`~ssl.OP_NO_COMPRESSION` can be used to disable compression. "
"(Contributed by Antoine Pitrou in :issue:`13634`.)"
msgstr ""
":meth:`~ssl.SSLSocket.compression` メソッドが追加されたので、SSL ソケットで使われている SSL "
"圧縮アルゴリズムを問い合わせることが出来ます。また、新規の属性 :attr:`~ssl.OP_NO_COMPRESSION` "
"で圧縮を無効に出来ます。(Contributed by Antoine Pitrou in :issue:`13634`.)"

#: ../../whatsnew/3.3.rst:1957
msgid ""
"Support has been added for the Next Protocol Negotiation extension using the"
" :meth:`ssl.SSLContext.set_npn_protocols` method. (Contributed by Colin Marc"
" in :issue:`14204`.)"
msgstr ""
":meth:`ssl.SSLContext.set_npn_protocols` による Next Protocol Negotiation 拡張のサポートが追加されました。\n"
"(Contributed by Colin Marc in :issue:`14204`.)"

#: ../../whatsnew/3.3.rst:1961
msgid ""
"SSL errors can now be introspected more easily thanks to "
":attr:`~ssl.SSLError.library` and :attr:`~ssl.SSLError.reason` attributes. "
"(Contributed by Antoine Pitrou in :issue:`14837`.)"
msgstr ""
"属性 :attr:`~ssl.SSLError.library` と :attr:`~ssl.SSLError.reason` が追加されたので、SSL"
" のエラーは以前よりもっと簡単に調べることが出来るようになりました。(Contributed by Antoine Pitrou in "
":issue:`14837`.)"

#: ../../whatsnew/3.3.rst:1965
msgid ""
"The :func:`~ssl.get_server_certificate` function now supports IPv6. "
"(Contributed by Charles-François Natali in :issue:`11811`.)"
msgstr ""
":func:`~ssl.get_server_certificate` 関数が IPv6 をサポートするようになりました。 (Contributed "
"by Charles-François Natali in :issue:`11811`.)"

#: ../../whatsnew/3.3.rst:1968
msgid ""
"New attribute :attr:`~ssl.OP_CIPHER_SERVER_PREFERENCE` allows setting SSLv3 "
"server sockets to use the server's cipher ordering preference rather than "
"the client's (:issue:`13635`)."
msgstr ""
"新規属性 :attr:`~ssl.OP_CIPHER_SERVER_PREFERENCE` は SSLv3 "
"サーバソケットに対し、暗号の優先順位をクライアントのものではなくサーバのものを使うようにします。 (:issue:`13635`)"

#: ../../whatsnew/3.3.rst:1974
msgid "stat"
msgstr "stat"

#: ../../whatsnew/3.3.rst:1976
msgid ""
"The undocumented tarfile.filemode function has been moved to "
":func:`stat.filemode`. It can be used to convert a file's mode to a string "
"of the form '-rwxrwxrwx'."
msgstr ""
"ドキュメントされていなかった ``tarfile.filemode`` 関数が :func:`stat.filemode` "
"に移動されました。これはファイルモードを '-rwxrwxrwx' 形式の文字列に変換するのに使えます。"

#: ../../whatsnew/3.3.rst:1980
msgid "(Contributed by Giampaolo Rodolà in :issue:`14807`.)"
msgstr "(Contributed by Giampaolo Rodolà in :issue:`14807`.)"

#: ../../whatsnew/3.3.rst:1984
msgid "struct"
msgstr "struct"

#: ../../whatsnew/3.3.rst:1986
msgid ""
"The :mod:`struct` module now supports ``ssize_t`` and ``size_t`` via the new"
" codes ``n`` and ``N``, respectively.  (Contributed by Antoine Pitrou in "
":issue:`3163`.)"
msgstr ""
":mod:`struct` モジュールが新たに ``ssize_t`` (コード ``n``)、 ``size_t`` (コード ``N``) "
"をサポートするようになりました。 (Contributed by Antoine Pitrou in :issue:`3163`.)"

#: ../../whatsnew/3.3.rst:1992
msgid "subprocess"
msgstr "subprocess"

#: ../../whatsnew/3.3.rst:1994
msgid ""
"Command strings can now be bytes objects on posix platforms.  (Contributed "
"by Victor Stinner in :issue:`8513`.)"
msgstr ""
"POSIX プラットフォームにおいて、コマンド文字列として bytes オブジェクトを渡せるようになりました。 (Contributed by "
"Victor Stinner in :issue:`8513`.)"

#: ../../whatsnew/3.3.rst:1997
msgid ""
"A new constant :data:`~subprocess.DEVNULL` allows suppressing output in a "
"platform-independent fashion.  (Contributed by Ross Lagerwall in "
":issue:`5870`.)"
msgstr ""
"新規定数 :data:`~subprocess.DEVNULL` は、プラットフォームに依存しない方法で出力を抑制するのに使えます。 "
"(Contributed by Ross Lagerwall in :issue:`5870`.)"

#: ../../whatsnew/3.3.rst:2003
msgid "sys"
msgstr "sys"

#: ../../whatsnew/3.3.rst:2005
msgid ""
"The :mod:`sys` module has a new :data:`~sys.thread_info` :term:`named tuple`"
" holding information about the thread implementation (:issue:`11223`)."
msgstr ""
":mod:`sys` モジュールに、スレッドの実装に関する情報が格納された :term:`名前付きタプル <struct sequence>` "
"を保持する :data:`~sys.thread_info` が追加されました。 (:issue:`11223`)"

#: ../../whatsnew/3.3.rst:2011
msgid "tarfile"
msgstr "tarfile"

#: ../../whatsnew/3.3.rst:2013
msgid ""
":mod:`tarfile` now supports ``lzma`` encoding via the :mod:`lzma` module. "
"(Contributed by Lars Gustäbel in :issue:`5689`.)"
msgstr ""
":mod:`tarfile` が :mod:`lzma` モジュールにより ``lzma`` エンコーディングをサポートするようになりました "
"(Contributed by Lars Gustäbel in :issue:`5689`.)。"

#: ../../whatsnew/3.3.rst:2018
msgid "tempfile"
msgstr "tempfile"

#: ../../whatsnew/3.3.rst:2020
msgid ""
":class:`tempfile.SpooledTemporaryFile`\\'s "
":meth:`~tempfile.SpooledTemporaryFile.truncate` method now accepts a "
"``size`` parameter.  (Contributed by Ryan Kelly in :issue:`9957`.)"
msgstr ""
":class:`tempfile.SpooledTemporaryFile` の :meth:`~tempfile.SpooledTemporaryFile.truncate` メソッドが ``size`` 引数を受け取るようになりました。\n"
"(Contributed by Ryan Kelly in :issue:`9957`.)"

#: ../../whatsnew/3.3.rst:2026
msgid "textwrap"
msgstr "textwrap"

#: ../../whatsnew/3.3.rst:2028
msgid ""
"The :mod:`textwrap` module has a new :func:`~textwrap.indent` that makes it "
"straightforward to add a common prefix to selected lines in a block of text"
"  (:issue:`13857`)."
msgstr ""
":mod:`textwrap` モジュールに :func:`~textwrap.indent` "
"が追加されました。これはテキストのブロック内の選択行に共通のプレフィクスを追加する簡単な方法になります。(:issue:`13857`)"

#: ../../whatsnew/3.3.rst:2034
msgid "threading"
msgstr "threading"

#: ../../whatsnew/3.3.rst:2036
msgid ""
":class:`threading.Condition`, :class:`threading.Semaphore`, "
":class:`threading.BoundedSemaphore`, :class:`threading.Event`, and "
":class:`threading.Timer`, all of which used to be factory functions "
"returning a class instance, are now classes and may be subclassed.  "
"(Contributed by Éric Araujo in :issue:`10968`.)"
msgstr ""
"いずれもかつてインスタンスを返すファクトリ関数であった :class:`threading.Condition`, "
":class:`threading.Semaphore`, :class:`threading.BoundedSemaphore`, "
":class:`threading.Event`, :class:`threading.Timer` "
"がクラスになったので、サブクラス化出来るようになりました。 (Contributed by Éric Araujo in "
":issue:`10968`.)"

#: ../../whatsnew/3.3.rst:2042
msgid ""
"The :class:`threading.Thread` constructor now accepts a ``daemon`` keyword "
"argument to override the default behavior of inheriting the ``daemon`` flag "
"value from the parent thread (:issue:`6064`)."
msgstr ""
":class:`threading.Thread` コンストラクタがキーワード引数 ``daemon`` を取るようになりました。これは親スレッドから "
"``daemon`` フラグを継承するデフォルトの振る舞いをオーバライドします (:issue:`6064`)。"

#: ../../whatsnew/3.3.rst:2046
msgid ""
"The formerly private function ``_thread.get_ident`` is now available as the "
"public function :func:`threading.get_ident`.  This eliminates several cases "
"of direct access to the ``_thread`` module in the stdlib.  Third party code "
"that used ``_thread.get_ident`` should likewise be changed to use the new "
"public interface."
msgstr ""
"かつての非公開関数 ``_thread.get_ident`` が公開関数 :func:`threading.get_ident` "
"として利用可能となっています。これは標準ライブラリにおいて多数の ``_thread`` モジュールへの直接アクセスを取り除く結果になりました。 "
"``_thread.get_ident`` を使っているサードパーティのコードも同じように、新しく公開化されたインターフェイスに乗り換えるべきです。"

#: ../../whatsnew/3.3.rst:2054
msgid "time"
msgstr "time"

#: ../../whatsnew/3.3.rst:2056
msgid "The :pep:`418` added new functions to the :mod:`time` module:"
msgstr ":pep:`418` が :mod:`time` モジュールに新たな関数を追加しました:"

#: ../../whatsnew/3.3.rst:2058
msgid ":func:`~time.get_clock_info`: Get information on a clock."
msgstr ":func:`~time.get_clock_info`: クロックの情報を取得します。"

#: ../../whatsnew/3.3.rst:2059
msgid ""
":func:`~time.monotonic`: Monotonic clock (cannot go backward), not affected "
"by system clock updates."
msgstr ":func:`~time.monotonic`: 単調なクロック (逆行しない)、システムクロックの更新の影響を受けません。"

#: ../../whatsnew/3.3.rst:2061
msgid ""
":func:`~time.perf_counter`: Performance counter with the highest available "
"resolution to measure a short duration."
msgstr ":func:`~time.perf_counter`: 短期間の計測のために利用可能な最高の解像度を持つパフォーマンスカウンタです。"

#: ../../whatsnew/3.3.rst:2063
msgid ""
":func:`~time.process_time`: Sum of the system and user CPU time of the "
"current process."
msgstr ":func:`~time.process_time`: 現在のプロセスの system と user CPU 時間の和です。"

#: ../../whatsnew/3.3.rst:2066
msgid "Other new functions:"
msgstr "その他の新たな関数:"

#: ../../whatsnew/3.3.rst:2068
msgid ""
":func:`~time.clock_getres`, :func:`~time.clock_gettime` and "
":func:`~time.clock_settime` functions with ``CLOCK_xxx`` constants. "
"(Contributed by Victor Stinner in :issue:`10278`.)"
msgstr ""
"関数 :func:`~time.clock_getres`, :func:`~time.clock_gettime`, "
":func:`~time.clock_settime` と、これに使われる定数群 ``CLOCK_xxx`` の追加。 (Contributed by "
"Victor Stinner in :issue:`10278`.)"

#: ../../whatsnew/3.3.rst:2072
msgid ""
"To improve cross platform consistency, :func:`~time.sleep` now raises a "
":exc:`ValueError` when passed a negative sleep value.  Previously this was "
"an error on posix, but produced an infinite sleep on Windows."
msgstr ""
"クロスプラットフォーム間での一貫性を改善するために、 :func:`~time.sleep` が負の値を渡すと :exc:`ValueError` "
"を投げるように変更されています。以前から POSIX システムではエラーでしたが、Windows の場合に無限に sleep していました。"

#: ../../whatsnew/3.3.rst:2078
msgid "types"
msgstr "types"

#: ../../whatsnew/3.3.rst:2080
msgid ""
"Add a new :class:`types.MappingProxyType` class: Read-only proxy of a "
"mapping. (:issue:`14386`)"
msgstr ""
"新規クラス :class:`types.MappingProxyType` の追加: 読み出し専用のマッピングのプロキシです。 "
"(:issue:`14386`)"

#: ../../whatsnew/3.3.rst:2084
msgid ""
"The new functions :func:`types.new_class` and :func:`types.prepare_class` "
"provide support for :pep:`3115` compliant dynamic type creation. "
"(:issue:`14588`)"
msgstr ""
"新規関数 :func:`types.new_class` と :func:`types.prepare_class` は :pep:`3115` "
"準拠の動的な型の生成サポートを提供します。(:issue:`14588`)"

#: ../../whatsnew/3.3.rst:2089
msgid "unittest"
msgstr "unittest"

#: ../../whatsnew/3.3.rst:2091
msgid ""
":meth:`.assertRaises`, :meth:`.assertRaisesRegex`, :meth:`.assertWarns`, and"
" :meth:`.assertWarnsRegex` now accept a keyword argument *msg* when used as "
"context managers.  (Contributed by Ezio Melotti and Winston Ewert in "
":issue:`10775`.)"
msgstr ""
"メソッド :meth:`.assertRaises`, :meth:`.assertRaisesRegex`, "
":meth:`.assertWarns`, :meth:`.assertWarnsRegex` "
"が、コンテキストマネージャとして使われる際にキーワード引数 *msg* を受け付けるようになりました。 (Contributed by Ezio "
"Melotti and Winston Ewert in :issue:`10775`.)"

#: ../../whatsnew/3.3.rst:2096
msgid ""
":meth:`unittest.TestCase.run` now returns the :class:`~unittest.TestResult` "
"object."
msgstr ""
":meth:`unittest.TestCase.run` が :class:`~unittest.TestResult` "
"オブジェクトを返すようになりました。"

#: ../../whatsnew/3.3.rst:2101
msgid "urllib"
msgstr "urllib"

#: ../../whatsnew/3.3.rst:2103
msgid ""
"The :class:`~urllib.request.Request` class, now accepts a *method* argument "
"used by :meth:`~urllib.request.Request.get_method` to determine what HTTP "
"method should be used.  For example, this will send a ``'HEAD'`` request::"
msgstr ""
":class:`~urllib.request.Request` クラスが "
":meth:`~urllib.request.Request.get_method` で使われる *method* "
"引数を受け付けるようになりました。これはどの HTTP メソッドが使われるべきかを指定します。例えば以下は ``'HEAD'`` "
"リクエストを送信します::"

#: ../../whatsnew/3.3.rst:2109
msgid "(:issue:`1673007`)"
msgstr "(:issue:`1673007`)"

#: ../../whatsnew/3.3.rst:2113
msgid "webbrowser"
msgstr "webbrowser"

#: ../../whatsnew/3.3.rst:2115
msgid ""
"The :mod:`webbrowser` module supports more \"browsers\": Google Chrome "
"(named :program:`chrome`, :program:`chromium`, :program:`chrome-browser` or "
":program:`chromium-browser` depending on the version and operating system), "
"and the generic launchers :program:`xdg-open`, from the FreeDesktop.org "
"project, and :program:`gvfs-open`, which is the default URI handler for "
"GNOME 3.  (The former contributed by Arnaud Calmettes in :issue:`13620`, the"
" latter by Matthias Klose in :issue:`14493`.)"
msgstr ""
":mod:`webbrowser` モジュールがさらに多くの \"browsers\" をサポートしました: Google Chrome (バージョンと"
" OS 依存で名前が :program:`chrome`, :program:`chromium`, :program:`chrome-"
"browser`, あるいは :program:`chromium-browser`) と、汎用のランチャ :program:`xdg-open` "
"(FreeDesktop.org プロジェクトのもの) と :program:`gvfs-open` (GNOME 3 のデフォルト URI "
"ハンドラ)。 (The former contributed by Arnaud Calmettes in :issue:`13620`, the "
"latter by Matthias Klose in :issue:`14493`.)"

#: ../../whatsnew/3.3.rst:2125
msgid "xml.etree.ElementTree"
msgstr "xml.etree.ElementTree"

#: ../../whatsnew/3.3.rst:2127
msgid ""
"The :mod:`xml.etree.ElementTree` module now imports its C accelerator by "
"default; there is no longer a need to explicitly import "
":mod:`xml.etree.cElementTree` (this module stays for backwards "
"compatibility, but is now deprecated).  In addition,  the ``iter`` family of"
" methods of :class:`~xml.etree.ElementTree.Element` has been optimized "
"(rewritten in C). The module's documentation has also been greatly improved "
"with added examples and a more detailed reference."
msgstr ""
":mod:`xml.etree.ElementTree` モジュールはデフォルトで C 実装による高速版をインポートするようになりました; もう明示的に"
" :mod:`xml.etree.cElementTree` をインポートする必要はありません (cElementTree "
"モジュールは後方互換のために残されますが非推奨となりました)。また、 :class:`~xml.etree.ElementTree.Element` "
"クラスの ``iter`` 系のメソッドに最適化が施されました (C "
"で再実装されました)。また、このモジュールのドキュメントは大幅に改善されて、実例が追加され、さらに詳細なリファレンスになりました。"

#: ../../whatsnew/3.3.rst:2137
msgid "zlib"
msgstr "zlib"

#: ../../whatsnew/3.3.rst:2139
msgid ""
"New attribute :attr:`zlib.Decompress.eof` makes it possible to distinguish "
"between a properly-formed compressed stream and an incomplete or truncated "
"one. (Contributed by Nadeem Vawda in :issue:`12646`.)"
msgstr ""
"新規属性 :attr:`zlib.Decompress.eof` "
"が追加されました。これにより適切に作られたストリームなのか不完全だったり切り捨てられたものなのかを区別することが出来ます。 (Contributed "
"by Nadeem Vawda in :issue:`12646`.)"

#: ../../whatsnew/3.3.rst:2143
msgid ""
"New attribute :attr:`zlib.ZLIB_RUNTIME_VERSION` reports the version string "
"of the underlying ``zlib`` library that is loaded at runtime.  (Contributed "
"by Torsten Landschoff in :issue:`12306`.)"
msgstr ""
"新規属性 :attr:`zlib.ZLIB_RUNTIME_VERSION` は実行時にロードされた背後の ``zlib`` "
"ライブラリのバージョン文字列です。 (Contributed by Torsten Landschoff in :issue:`12306`.)"

#: ../../whatsnew/3.3.rst:2149
msgid "Optimizations"
msgstr "最適化"

#: ../../whatsnew/3.3.rst:2151
msgid "Major performance enhancements have been added:"
msgstr "大きな性能向上がありました:"

#: ../../whatsnew/3.3.rst:2153
msgid ""
"Thanks to :pep:`393`, some operations on Unicode strings have been "
"optimized:"
msgstr ":pep:`393` により、Unicode 文字列に対する操作が最適化されました:"

#: ../../whatsnew/3.3.rst:2155
msgid "the memory footprint is divided by 2 to 4 depending on the text"
msgstr "メモリフットプリントはテキストに依存して 1/2 から 1/4 になりました"

#: ../../whatsnew/3.3.rst:2156
msgid ""
"encode an ASCII string to UTF-8 doesn't need to encode characters anymore, "
"the UTF-8 representation is shared with the ASCII representation"
msgstr ""
"ASCII 文字列を UTF-8 にエンコードするのに文字をエンコードする必要はなくなりました、UTF-8 表現は ASCII 表現と共有されます"

#: ../../whatsnew/3.3.rst:2158
msgid "the UTF-8 encoder has been optimized"
msgstr "UTF-8 エンコーダが最適化されました"

#: ../../whatsnew/3.3.rst:2159
msgid ""
"repeating a single ASCII letter and getting a substring of an ASCII string "
"is 4 times faster"
msgstr "単一の ASCII 文字を繰り返して ASCII 文字列の部分列を得るのは 4 倍速くなりました"

#: ../../whatsnew/3.3.rst:2162
msgid ""
"UTF-8 is now 2x to 4x faster.  UTF-16 encoding is now up to 10x faster."
msgstr "UTF-8 が2倍から4倍速くなりました。UTF-16 のエンコーディングが最大で10倍速くなりました。"

#: ../../whatsnew/3.3.rst:2164
msgid ""
"(Contributed by Serhiy Storchaka, :issue:`14624`, :issue:`14738` and "
":issue:`15026`.)"
msgstr ""
"(Contributed by Serhiy Storchaka, :issue:`14624`, :issue:`14738` and "
":issue:`15026`.)"

#: ../../whatsnew/3.3.rst:2169
msgid "Build and C API Changes"
msgstr "ビルドならびに C API の変更"

#: ../../whatsnew/3.3.rst:2171
msgid "Changes to Python's build process and to the C API include:"
msgstr "Python のビルド過程と C API の変更は以下の通りです:"

#: ../../whatsnew/3.3.rst:2173
msgid "New :pep:`3118` related function:"
msgstr "新しい :pep:`3118` 関連の関数:"

#: ../../whatsnew/3.3.rst:2175
msgid ":c:func:`PyMemoryView_FromMemory`"
msgstr ":c:func:`PyMemoryView_FromMemory`"

#: ../../whatsnew/3.3.rst:2177
msgid ":pep:`393` added new Unicode types, macros and functions:"
msgstr ":pep:`393` により追加された新たな Unicode 型、マクロ、関数:"

#: ../../whatsnew/3.3.rst:2179
msgid "High-level API:"
msgstr "高水準 API:"

#: ../../whatsnew/3.3.rst:2181
msgid ":c:func:`PyUnicode_CopyCharacters`"
msgstr ":c:func:`PyUnicode_CopyCharacters`"

#: ../../whatsnew/3.3.rst:2182
msgid ":c:func:`PyUnicode_FindChar`"
msgstr ":c:func:`PyUnicode_FindChar`"

#: ../../whatsnew/3.3.rst:2183
msgid ":c:func:`PyUnicode_GetLength`, :c:macro:`PyUnicode_GET_LENGTH`"
msgstr ":c:func:`PyUnicode_GetLength`, :c:macro:`PyUnicode_GET_LENGTH`"

#: ../../whatsnew/3.3.rst:2184
msgid ":c:func:`PyUnicode_New`"
msgstr ":c:func:`PyUnicode_New`"

#: ../../whatsnew/3.3.rst:2185
msgid ":c:func:`PyUnicode_Substring`"
msgstr ":c:func:`PyUnicode_Substring`"

#: ../../whatsnew/3.3.rst:2186
msgid ":c:func:`PyUnicode_ReadChar`, :c:func:`PyUnicode_WriteChar`"
msgstr ":c:func:`PyUnicode_ReadChar`, :c:func:`PyUnicode_WriteChar`"

#: ../../whatsnew/3.3.rst:2188
msgid "Low-level API:"
msgstr "低水準 API:"

#: ../../whatsnew/3.3.rst:2190
msgid ":c:type:`Py_UCS1`, :c:type:`Py_UCS2`, :c:type:`Py_UCS4` types"
msgstr "型 :c:type:`Py_UCS1`, :c:type:`Py_UCS2`, :c:type:`Py_UCS4`"

#: ../../whatsnew/3.3.rst:2191
msgid ""
":c:type:`PyASCIIObject` and :c:type:`PyCompactUnicodeObject` structures"
msgstr "構造体 :c:type:`PyASCIIObject` と :c:type:`PyCompactUnicodeObject`"

#: ../../whatsnew/3.3.rst:2192
msgid ":c:macro:`PyUnicode_READY`"
msgstr ":c:macro:`PyUnicode_READY`"

#: ../../whatsnew/3.3.rst:2193
msgid ":c:func:`PyUnicode_FromKindAndData`"
msgstr ":c:func:`PyUnicode_FromKindAndData`"

#: ../../whatsnew/3.3.rst:2194
msgid ":c:func:`PyUnicode_AsUCS4`, :c:func:`PyUnicode_AsUCS4Copy`"
msgstr ":c:func:`PyUnicode_AsUCS4`, :c:func:`PyUnicode_AsUCS4Copy`"

#: ../../whatsnew/3.3.rst:2195
msgid ""
":c:macro:`PyUnicode_DATA`, :c:macro:`PyUnicode_1BYTE_DATA`, "
":c:macro:`PyUnicode_2BYTE_DATA`, :c:macro:`PyUnicode_4BYTE_DATA`"
msgstr ""
":c:macro:`PyUnicode_DATA`, :c:macro:`PyUnicode_1BYTE_DATA`, "
":c:macro:`PyUnicode_2BYTE_DATA`, :c:macro:`PyUnicode_4BYTE_DATA`"

#: ../../whatsnew/3.3.rst:2197
msgid ""
":c:macro:`PyUnicode_KIND` with :c:type:`PyUnicode_Kind` enum: "
":c:data:`PyUnicode_WCHAR_KIND`, :c:data:`PyUnicode_1BYTE_KIND`, "
":c:data:`PyUnicode_2BYTE_KIND`, :c:data:`PyUnicode_4BYTE_KIND`"
msgstr ""
":c:type:`PyUnicode_Kind` 列挙型での :c:macro:`PyUnicode_KIND`: "
":c:data:`PyUnicode_WCHAR_KIND`, :c:data:`PyUnicode_1BYTE_KIND`, "
":c:data:`PyUnicode_2BYTE_KIND`, :c:data:`PyUnicode_4BYTE_KIND`"

#: ../../whatsnew/3.3.rst:2200
msgid ""
":c:macro:`PyUnicode_READ`, :c:macro:`PyUnicode_READ_CHAR`, "
":c:macro:`PyUnicode_WRITE`"
msgstr ""
":c:macro:`PyUnicode_READ`, :c:macro:`PyUnicode_READ_CHAR`, "
":c:macro:`PyUnicode_WRITE`"

#: ../../whatsnew/3.3.rst:2201
msgid ":c:macro:`PyUnicode_MAX_CHAR_VALUE`"
msgstr ":c:macro:`PyUnicode_MAX_CHAR_VALUE`"

#: ../../whatsnew/3.3.rst:2203
msgid ""
":c:macro:`PyArg_ParseTuple` now accepts a :class:`bytearray` for the ``c`` "
"format (:issue:`12380`)."
msgstr ""
":c:macro:`PyArg_ParseTuple` が ``c`` フォーマットとして :class:`bytearray` "
"を許容するようになりました (:issue:`12380`)。"

#: ../../whatsnew/3.3.rst:2209
msgid "Deprecated"
msgstr "非推奨"

#: ../../whatsnew/3.3.rst:2212
msgid "Unsupported Operating Systems"
msgstr "サポートされないオペレーティングシステム"

#: ../../whatsnew/3.3.rst:2214
msgid "OS/2 and VMS are no longer supported due to the lack of a maintainer."
msgstr "保守する者がいないため OS/2 ならびに VMS はもはやサポートされません。"

#: ../../whatsnew/3.3.rst:2216
msgid ""
"Windows 2000 and Windows platforms which set ``COMSPEC`` to ``command.com`` "
"are no longer supported due to maintenance burden."
msgstr ""
"保守の負担のため WIndows 2000 および ``COMSPEC`` を ``command.com`` に設定している Windows "
"プラットフォームはもはやサポートされません。"

#: ../../whatsnew/3.3.rst:2219
msgid "OSF support, which was deprecated in 3.2, has been completely removed."
msgstr "3.2 で非推奨だった OSF のサポートが完全に削除されました。"

#: ../../whatsnew/3.3.rst:2223
msgid "Deprecated Python modules, functions and methods"
msgstr "非推奨の Python モジュール、関数、メソッド"

#: ../../whatsnew/3.3.rst:2225
msgid ""
"Passing a non-empty string to ``object.__format__()`` is deprecated, and "
"will produce a :exc:`TypeError` in Python 3.4 (:issue:`9856`)."
msgstr ""
"object 型そのものの ``object.__format__()`` に空でない文字列が渡すことは非推奨となりました。Python 3.4 "
"ではこれは :exc:`TypeError` となります (:issue:`9856`)。"

#: ../../whatsnew/3.3.rst:2227
msgid ""
"The ``unicode_internal`` codec has been deprecated because of the "
":pep:`393`, use UTF-8, UTF-16 (``utf-16-le`` or ``utf-16-be``), or UTF-32 "
"(``utf-32-le`` or ``utf-32-be``)"
msgstr ""
":pep:`393` により、 ``unicode_internal`` コーデックは非推奨となりました。UTF-8, UTF-16 "
"(``utf-16-le`` または ``utf-16-be``), あるいは UTF-32 (``utf-32-le`` または "
"``utf-32-be``) を使ってください。"

#: ../../whatsnew/3.3.rst:2230
msgid ""
":meth:`ftplib.FTP.nlst` and :meth:`ftplib.FTP.dir`: use "
":meth:`ftplib.FTP.mlsd`"
msgstr ""
":meth:`ftplib.FTP.nlst` および :meth:`ftplib.FTP.dir`: :meth:`ftplib.FTP.mlsd` "
"を使ってください"

#: ../../whatsnew/3.3.rst:2232
msgid ""
":func:`platform.popen`: use the :mod:`subprocess` module. Check especially "
"the :ref:`subprocess-replacements` section (:issue:`11377`)."
msgstr ""
":func:`platform.popen`: :mod:`subprocess` モジュールを使ってください。 :ref:`subprocess-"
"replacements` を是非お読みください (:issue:`11377`)。"

#: ../../whatsnew/3.3.rst:2234
msgid ""
":issue:`13374`: The Windows bytes API has been deprecated in the :mod:`os` "
"module. Use Unicode filenames, instead of bytes filenames, to not depend on "
"the ANSI code page anymore and to support any filename."
msgstr ""
":issue:`13374`: :mod:`os` モジュールにある Windows のバイト列 API は非推奨となりました。ANSI "
"コードページに依存しないようにしてあらゆるファイル名をサポートするために、バイト列文字列のファイル名ではなく Unicode "
"ファイル名を使ってください。"

#: ../../whatsnew/3.3.rst:2237
msgid ""
":issue:`13988`: The :mod:`xml.etree.cElementTree` module is deprecated.  The"
" accelerator is used automatically whenever available."
msgstr ""
":issue:`13988`: :mod:`xml.etree.cElementTree` "
"モジュールは非推奨です。利用できる際はいつでも自動的にアクセラレータを使用します。"

#: ../../whatsnew/3.3.rst:2239
msgid ""
"The behaviour of :func:`time.clock` depends on the platform: use the new "
":func:`time.perf_counter` or :func:`time.process_time` function instead, "
"depending on your requirements, to have a well defined behaviour."
msgstr ""
":func:`time.clock` の振る舞いがプラットフォーム依存のため、今後は要件に応じて新たに追加された "
":func:`time.perf_counter` または :func:`time.process_time` "
"を使ってください。これらの振る舞いは良く定義されています(well defined)。"

#: ../../whatsnew/3.3.rst:2242
msgid "The :func:`os.stat_float_times` function is deprecated."
msgstr ":func:`os.stat_float_times` 関数は非推奨です。"

#: ../../whatsnew/3.3.rst:2243
msgid ":mod:`abc` module:"
msgstr ":mod:`abc` モジュール:"

#: ../../whatsnew/3.3.rst:2252
msgid ":mod:`importlib` package:"
msgstr ":mod:`importlib` パッケージ:"

#: ../../whatsnew/3.3.rst:2254
msgid ""
":meth:`importlib.abc.SourceLoader.path_mtime` is now deprecated in favour of"
" :meth:`importlib.abc.SourceLoader.path_stats` as bytecode files now store "
"both the modification time and size of the source file the bytecode file was"
" compiled from."
msgstr ""
"バイトコードファイルとしての :meth:`importlib.abc.SourceLoader.path_stats` "
"によりコンパイル時点の修正時刻とソースファイルサイズの両方を格納するようになったので、 "
":meth:`importlib.abc.SourceLoader.path_mtime` は非推奨となりました。"

#: ../../whatsnew/3.3.rst:2264
msgid "Deprecated functions and types of the C API"
msgstr "C API の非推奨の関数ならびに型"

#: ../../whatsnew/3.3.rst:2266
msgid ""
"The :c:type:`Py_UNICODE` has been deprecated by :pep:`393` and will be "
"removed in Python 4. All functions using this type are deprecated:"
msgstr ""
":pep:`393` で :c:type:`Py_UNICODE` は非推奨になり、Python 4 "
"で削除されます。この型を使用している全ての関数は非推奨です。"

#: ../../whatsnew/3.3.rst:2269
msgid ""
"Unicode functions and methods using :c:type:`Py_UNICODE` and "
":c:type:`Py_UNICODE*` types:"
msgstr ""
"型 :c:type:`Py_UNICODE` および :c:type:`Py_UNICODE*` を使用しているユニコード関数ならびにメソッド:"

#: ../../whatsnew/3.3.rst:2272
msgid ""
":c:macro:`PyUnicode_FromUnicode`: use :c:func:`PyUnicode_FromWideChar` or "
":c:func:`PyUnicode_FromKindAndData`"
msgstr ""
":c:macro:`PyUnicode_FromUnicode`: :c:func:`PyUnicode_FromWideChar` または "
":c:func:`PyUnicode_FromKindAndData` を使用してください"

#: ../../whatsnew/3.3.rst:2274
msgid ""
":c:macro:`PyUnicode_AS_UNICODE`, :c:func:`PyUnicode_AsUnicode`, "
":c:func:`PyUnicode_AsUnicodeAndSize`: use "
":c:func:`PyUnicode_AsWideCharString`"
msgstr ""
":c:macro:`PyUnicode_AS_UNICODE`, :c:func:`PyUnicode_AsUnicode`, "
":c:func:`PyUnicode_AsUnicodeAndSize`: :c:func:`PyUnicode_AsWideCharString` "
"を使用してください"

#: ../../whatsnew/3.3.rst:2276
msgid ""
":c:macro:`PyUnicode_AS_DATA`: use :c:macro:`PyUnicode_DATA` with "
":c:macro:`PyUnicode_READ` and :c:macro:`PyUnicode_WRITE`"
msgstr ""
":c:macro:`PyUnicode_AS_DATA`: :c:macro:`PyUnicode_READ` および "
":c:macro:`PyUnicode_WRITE` とともに :c:macro:`PyUnicode_DATA` を使用してください"

#: ../../whatsnew/3.3.rst:2278
msgid ""
":c:macro:`PyUnicode_GET_SIZE`, :c:func:`PyUnicode_GetSize`: use "
":c:macro:`PyUnicode_GET_LENGTH` or :c:func:`PyUnicode_GetLength`"
msgstr ""
":c:macro:`PyUnicode_GET_SIZE`, :c:func:`PyUnicode_GetSize`: "
":c:macro:`PyUnicode_GET_LENGTH` または :c:func:`PyUnicode_GetLength` を使用してください"

#: ../../whatsnew/3.3.rst:2280
msgid ""
":c:macro:`PyUnicode_GET_DATA_SIZE`: use ``PyUnicode_GET_LENGTH(str) * "
"PyUnicode_KIND(str)`` (only work on ready strings)"
msgstr ""
":c:macro:`PyUnicode_GET_DATA_SIZE`: ``PyUnicode_GET_LENGTH(str) * "
"PyUnicode_KIND(str)`` を使用してください (既存の文字列でのみうまくいきます)"

#: ../../whatsnew/3.3.rst:2283
msgid ""
":c:func:`PyUnicode_AsUnicodeCopy`: use :c:func:`PyUnicode_AsUCS4Copy` or "
":c:func:`PyUnicode_AsWideCharString`"
msgstr ""
":c:func:`PyUnicode_AsUnicodeCopy`: :c:func:`PyUnicode_AsUCS4Copy` または "
":c:func:`PyUnicode_AsWideCharString` を使用してください"

#: ../../whatsnew/3.3.rst:2285
msgid ":c:func:`PyUnicode_GetMax`"
msgstr ":c:func:`PyUnicode_GetMax`"

#: ../../whatsnew/3.3.rst:2288
msgid "Functions and macros manipulating Py_UNICODE* strings:"
msgstr "Py_UNICODE* 文字列を操作する関数ならびにマクロ:"

#: ../../whatsnew/3.3.rst:2290
msgid ""
":c:macro:`Py_UNICODE_strlen`: use :c:func:`PyUnicode_GetLength` or "
":c:macro:`PyUnicode_GET_LENGTH`"
msgstr ""
":c:macro:`Py_UNICODE_strlen`: :c:func:`PyUnicode_GetLength` または "
":c:macro:`PyUnicode_GET_LENGTH` を使用してください"

#: ../../whatsnew/3.3.rst:2292
msgid ""
":c:macro:`Py_UNICODE_strcat`: use :c:func:`PyUnicode_CopyCharacters` or "
":c:func:`PyUnicode_FromFormat`"
msgstr ""
":c:macro:`Py_UNICODE_strcat`: :c:func:`PyUnicode_CopyCharacters` または "
":c:func:`PyUnicode_FromFormat` を使用してください"

#: ../../whatsnew/3.3.rst:2294
msgid ""
":c:macro:`Py_UNICODE_strcpy`, :c:macro:`Py_UNICODE_strncpy`, "
":c:macro:`Py_UNICODE_COPY`: use :c:func:`PyUnicode_CopyCharacters` or "
":c:func:`PyUnicode_Substring`"
msgstr ""
":c:macro:`Py_UNICODE_strcpy`, :c:macro:`Py_UNICODE_strncpy`, "
":c:macro:`Py_UNICODE_COPY`: :c:func:`PyUnicode_CopyCharacters` または "
":c:func:`PyUnicode_Substring` を使用してください"

#: ../../whatsnew/3.3.rst:2297
msgid ":c:macro:`Py_UNICODE_strcmp`: use :c:func:`PyUnicode_Compare`"
msgstr ":c:macro:`Py_UNICODE_strcmp`: :c:func:`PyUnicode_Compare` を使用してください"

#: ../../whatsnew/3.3.rst:2298
msgid ":c:macro:`Py_UNICODE_strncmp`: use :c:func:`PyUnicode_Tailmatch`"
msgstr ""
":c:macro:`Py_UNICODE_strncmp`: :c:func:`PyUnicode_Tailmatch` を使用してください"

#: ../../whatsnew/3.3.rst:2299
msgid ""
":c:macro:`Py_UNICODE_strchr`, :c:macro:`Py_UNICODE_strrchr`: use "
":c:func:`PyUnicode_FindChar`"
msgstr ""
":c:macro:`Py_UNICODE_strchr`, :c:macro:`Py_UNICODE_strrchr`:  "
":c:func:`PyUnicode_FindChar` を使用してください"

#: ../../whatsnew/3.3.rst:2301
msgid ":c:macro:`Py_UNICODE_FILL`: use :c:func:`PyUnicode_Fill`"
msgstr ":c:macro:`Py_UNICODE_FILL`: :c:func:`PyUnicode_Fill` を使用してください"

#: ../../whatsnew/3.3.rst:2302
msgid ":c:macro:`Py_UNICODE_MATCH`"
msgstr ":c:macro:`Py_UNICODE_MATCH`"

#: ../../whatsnew/3.3.rst:2304
msgid "Encoders:"
msgstr "エンコーダ:"

#: ../../whatsnew/3.3.rst:2306
msgid ":c:func:`PyUnicode_Encode`: use :c:func:`PyUnicode_AsEncodedObject`"
msgstr ""
":c:func:`PyUnicode_Encode`: :c:func:`PyUnicode_AsEncodedObject` を使用してください"

#: ../../whatsnew/3.3.rst:2307
msgid ":c:func:`PyUnicode_EncodeUTF7`"
msgstr ":c:func:`PyUnicode_EncodeUTF7`"

#: ../../whatsnew/3.3.rst:2308
msgid ""
":c:func:`PyUnicode_EncodeUTF8`: use :c:func:`PyUnicode_AsUTF8` or "
":c:func:`PyUnicode_AsUTF8String`"
msgstr ""
":c:func:`PyUnicode_EncodeUTF8`: :c:func:`PyUnicode_AsUTF8` または "
":c:func:`PyUnicode_AsUTF8String` を使用してください"

#: ../../whatsnew/3.3.rst:2310
msgid ":c:func:`PyUnicode_EncodeUTF32`"
msgstr ":c:func:`PyUnicode_EncodeUTF32`"

#: ../../whatsnew/3.3.rst:2311
msgid ":c:func:`PyUnicode_EncodeUTF16`"
msgstr ":c:func:`PyUnicode_EncodeUTF16`"

#: ../../whatsnew/3.3.rst:2312
msgid ""
":c:func:`PyUnicode_EncodeUnicodeEscape:` use "
":c:func:`PyUnicode_AsUnicodeEscapeString`"
msgstr ""
":c:func:`PyUnicode_EncodeUnicodeEscape:` "
":c:func:`PyUnicode_AsUnicodeEscapeString` を使用してください"

#: ../../whatsnew/3.3.rst:2314
msgid ""
":c:func:`PyUnicode_EncodeRawUnicodeEscape:` use "
":c:func:`PyUnicode_AsRawUnicodeEscapeString`"
msgstr ""
":c:func:`PyUnicode_EncodeRawUnicodeEscape:` "
":c:func:`PyUnicode_AsRawUnicodeEscapeString` を使用してください"

#: ../../whatsnew/3.3.rst:2316
msgid ""
":c:func:`PyUnicode_EncodeLatin1`: use :c:func:`PyUnicode_AsLatin1String`"
msgstr ""
":c:func:`PyUnicode_EncodeLatin1`: :c:func:`PyUnicode_AsLatin1String` "
"を使用してください"

#: ../../whatsnew/3.3.rst:2317
msgid ":c:func:`PyUnicode_EncodeASCII`: use :c:func:`PyUnicode_AsASCIIString`"
msgstr ""
":c:func:`PyUnicode_EncodeASCII`: :c:func:`PyUnicode_AsASCIIString` を使用してください"

#: ../../whatsnew/3.3.rst:2318
msgid ":c:func:`PyUnicode_EncodeCharmap`"
msgstr ":c:func:`PyUnicode_EncodeCharmap`"

#: ../../whatsnew/3.3.rst:2319
msgid ":c:func:`PyUnicode_TranslateCharmap`"
msgstr ":c:func:`PyUnicode_TranslateCharmap`"

#: ../../whatsnew/3.3.rst:2320
msgid ""
":c:func:`PyUnicode_EncodeMBCS`: use :c:func:`PyUnicode_AsMBCSString` or "
":c:func:`PyUnicode_EncodeCodePage` (with ``CP_ACP`` code_page)"
msgstr ""
":c:func:`PyUnicode_EncodeMBCS`: (``CP_ACP`` code_page とともに) "
":c:func:`PyUnicode_AsMBCSString` または :c:func:`PyUnicode_EncodeCodePage`  "
"を使用してください"

#: ../../whatsnew/3.3.rst:2322
msgid ""
":c:func:`PyUnicode_EncodeDecimal`, "
":c:func:`PyUnicode_TransformDecimalToASCII`"
msgstr ""
":c:func:`PyUnicode_EncodeDecimal`, "
":c:func:`PyUnicode_TransformDecimalToASCII`"

#: ../../whatsnew/3.3.rst:2327
msgid "Deprecated features"
msgstr "非推奨の機能"

#: ../../whatsnew/3.3.rst:2329
msgid ""
"The :mod:`array` module's ``'u'`` format code is now deprecated and will be "
"removed in Python 4 together with the rest of the (:c:type:`Py_UNICODE`) "
"API."
msgstr ""
":mod:`array` モジュールの ``'u'`` 書式化コードは非推奨となりました。Python 4 ではほかの "
"(:c:type:`Py_UNICODE`) API と一緒に削除されるでしょう。"

#: ../../whatsnew/3.3.rst:2334
msgid "Porting to Python 3.3"
msgstr "Python 3.3 への移植"

#: ../../whatsnew/3.3.rst:2336
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr "このセクションでは前述の変更とバグフィックスにより必要となるかもしれないコードの変更を列挙します:"

#: ../../whatsnew/3.3.rst:2342
msgid "Porting Python code"
msgstr "Python コードの移植"

#: ../../whatsnew/3.3.rst:2344
msgid ""
"Hash randomization is enabled by default. Set the :envvar:`PYTHONHASHSEED` "
"environment variable to ``0`` to disable hash randomization. See also the "
":meth:`object.__hash__` method."
msgstr ""
"ハッシュのランダム化がデフォルトで有効になりました。これを無効にするには環境変数 :envvar:`PYTHONHASHSEED` を ``0`` "
"にセットして下さい。 :meth:`object.__hash__` メソッドも参照して下さい。"

#: ../../whatsnew/3.3.rst:2348
msgid ""
":issue:`12326`: On Linux, sys.platform doesn't contain the major version "
"anymore. It is now always 'linux', instead of 'linux2' or 'linux3' depending"
" on the Linux version used to build Python. Replace sys.platform == 'linux2'"
" with sys.platform.startswith('linux'), or directly sys.platform == 'linux' "
"if you don't need to support older Python versions."
msgstr ""
":issue:`12326`: Linux では、 :attr:`sys.platform` はもはやメジャーバージョン番号を含みません。 "
"これは今では常に 'linux' です。以前はこれは Python のビルドに使われた Linux バージョンに依存した ``'linux2'`` や "
"``'linux3'`` でした。 ``sys.platform == 'linux2'`` などとするのではなく、 "
"``sys.platform.startswith('linux')`` とするか、古い Python バージョンのサポートが不要であれば直接的に "
"``sys.platform == 'linux'`` として下さい。"

#: ../../whatsnew/3.3.rst:2354
msgid ""
":issue:`13847`, :issue:`14180`: :mod:`time` and :mod:`datetime`: "
":exc:`OverflowError` is now raised instead of :exc:`ValueError` if a "
"timestamp is out of range. :exc:`OSError` is now raised if C functions "
":c:func:`gmtime` or :c:func:`localtime` failed."
msgstr ""
":issue:`13847`, :issue:`14180`: :mod:`time` および :mod:`datetime`: "
"タイムスタンプが範囲外の場合に、 :exc:`ValueError` ではなく :exc:`OverflowError` "
"を送出するようになりました。また、C 関数の :c:func:`gmtime` あるいは :c:func:`localtime` が失敗した場合には "
":exc:`OSError` を送出するようになりました。"

#: ../../whatsnew/3.3.rst:2359
msgid ""
"The default finders used by import now utilize a cache of what is contained "
"within a specific directory. If you create a Python source file or "
"sourceless bytecode file, make sure to call "
":func:`importlib.invalidate_caches` to clear out the cache for the finders "
"to notice the new file."
msgstr ""
"インポートで使われるデフォルトのファインダが、特定のディレクトリに何が含まれるのかについてのキャッシュを利用するようになっています。実行中に "
"Python ソースファイルやバイトコードファイルを作ったら、キャッシュをクリアしてファインダが新しく作られたファイルに気付けるように、 "
":func:`importlib.invalidate_caches` を呼ぶ必要があることに注意してください。"

#: ../../whatsnew/3.3.rst:2364
msgid ""
":exc:`ImportError` now uses the full name of the module that was attempted "
"to be imported. Doctests that check ImportErrors' message will need to be "
"updated to use the full name of the module instead of just the tail of the "
"name."
msgstr ""
":exc:`ImportError` がインポートを試みたモジュール名として完全名を使うようになっています。ImportError "
"のメッセージをチェックする doctest は、モジュール名をその末尾の名前ではなく完全な名前を使うように更新する必要があります。"

#: ../../whatsnew/3.3.rst:2369
msgid ""
"The *index* argument to :func:`__import__` now defaults to 0 instead of -1 "
"and no longer support negative values. It was an oversight when :pep:`328` "
"was implemented that the default value remained -1. If you need to continue "
"to perform a relative import followed by an absolute import, then perform "
"the relative import using an index of 1, followed by another import using an"
" index of 0. It is preferred, though, that you use "
":func:`importlib.import_module` rather than call :func:`__import__` "
"directly."
msgstr ""
":func:`__import__` の引数 *index* のデフォルトが -1 ではなく 0 "
"となり、また、もはや負の値はサポートされません。デフォルト値が -1 で残されたのは(訳注: つまり絶対、相対インポートの両方を試みるようにしたのは) "
":pep:`328` を実装した際の過失でした。絶対インポートに先立って相対インポートを実行する振る舞いがまだ必要なのであれば、index を 1 "
"にして相対インポートを実行して、その後で index 0 のインポートをするようにしてください。そうなのですが、 :func:`__import__` "
"を直接呼び出すのではなく、 :func:`importlib.import_module` を使うことが望ましいやり方です。"

#: ../../whatsnew/3.3.rst:2377
msgid ""
":func:`__import__` no longer allows one to use an index value other than 0 "
"for top-level modules. E.g. ``__import__('sys', level=1)`` is now an error."
msgstr ""
":func:`__import__` の index に、トップレベルモジュールに対して 0 でなく 1 を与えることは今では許されません。例えば "
"``__import__('sys', level=1)`` はエラーです。"

#: ../../whatsnew/3.3.rst:2380
msgid ""
"Because :attr:`sys.meta_path` and :attr:`sys.path_hooks` now have finders on"
" them by default, you will most likely want to use :meth:`list.insert` "
"instead of :meth:`list.append` to add to those lists."
msgstr ""
":attr:`sys.meta_path` と :attr:`sys.path_hooks` "
"にデフォルトでファインダが含まれるようになったので、これらリストの操作で :meth:`list.append` "
"してきたのであれば、今後はおそらくほとんどは :meth:`list.insert` が相応しいでしょう。"

#: ../../whatsnew/3.3.rst:2384
msgid ""
"Because ``None`` is now inserted into :attr:`sys.path_importer_cache`, if "
"you are clearing out entries in the dictionary of paths that do not have a "
"finder, you will need to remove keys paired with values of ``None`` **and** "
":class:`imp.NullImporter` to be backwards-compatible. This will lead to "
"extra overhead on older versions of Python that re-insert ``None`` into "
":attr:`sys.path_importer_cache` where it represents the use of implicit "
"finders, but semantically it should not change anything."
msgstr ""
"ファインダが見つからない場合に :attr:`sys.path_importer_cache` に ``None`` "
"が挿入されるようになったので、ファインダを持たないパスの辞書エントリをクリアするには、後方互換性を保つためには "
":class:`imp.NullImporter` を値に持つエントリと ``None`` を値に持つエントリ **の両方を** "
"削除する必要があります。古い Python バージョンと比較して、暗黙のファインダを使うことを示すのに "
":attr:`sys.path_importer_cache` に ``None`` "
"を再挿入するという追加のオーバヘッドが必要となりますが、意味的には何の変更もないはずです。"

#: ../../whatsnew/3.3.rst:2392
msgid ""
":class:`importlib.abc.Finder` no longer specifies a `find_module()` abstract"
" method that must be implemented. If you were relying on subclasses to "
"implement that method, make sure to check for the method's existence first. "
"You will probably want to check for `find_loader()` first, though, in the "
"case of working with :term:`path entry finders <path entry finder>`."
msgstr ""
":class:`importlib.abc.Finder` が ``find_module()`` "
"実装を強制することで行われていた抽象化は撤廃されています。そのメソッドを実装するサブクラスに依存していたならば、メソッドの存在を先にチェックするようにしてください。ですが、"
" :term:`path entry finders <path entry finder>` とともに動作させるのに、 "
":meth:`~importlib.abc.PathEntryFinder.find_loader` を最初にチェックしたくなるかもしれません。"

#: ../../whatsnew/3.3.rst:2398
msgid ""
":mod:`pkgutil` has been converted to use :mod:`importlib` internally. This "
"eliminates many edge cases where the old behaviour of the :pep:`302` import "
"emulation failed to match the behaviour of the real import system. The "
"import emulation itself is still present, but is now deprecated. The "
":func:`pkgutil.iter_importers` and :func:`pkgutil.walk_packages` functions "
"special case the standard import hooks so they are still supported even "
"though they do not provide the non-standard ``iter_modules()`` method."
msgstr ""
":mod:`pkgutil` は、内部的に :mod:`importlib` を使うように変更されました。このことは、 :pep:`302` "
"インポートエミュレーションの古い振る舞いが本物のインポートシステムの振る舞いに合わせるのに失敗していた数多くの特殊ケースの問題を取り除きます。インポートエミュレーションそのものはまだ存在しますが、今では非推奨です。"
" :func:`pkgutil.iter_importers` 関数と :func:`pkgutil.walk_packages` "
"関数は標準インポートフックを特別に扱うので、ファインダの ``iter_modules()`` "
"メソッドは標準ではないにも関わらず、まだサポートされます。"

#: ../../whatsnew/3.3.rst:2406
msgid ""
"A longstanding RFC-compliance bug (:issue:`1079`) in the parsing done by "
":func:`email.header.decode_header` has been fixed.  Code that uses the "
"standard idiom to convert encoded headers into unicode "
"(``str(make_header(decode_header(h))``) will see no change, but code that "
"looks at the individual tuples returned by decode_header will see that "
"whitespace that precedes or follows ``ASCII`` sections is now included in "
"the ``ASCII`` section.  Code that builds headers using ``make_header`` "
"should also continue to work without change, since ``make_header`` continues"
" to add whitespace between ``ASCII`` and non-``ASCII`` sections if it is not"
" already present in the input strings."
msgstr ""
":func:`email.header.decode_header` によってなされる解析に長い間存在していた RFC 非準拠のバグ "
"(:issue:`1079`) が修正されました。エンコードされたヘッダを Unicode に変換するための標準的なイディオム "
"(``str(make_header(decode_header(h))``) を使うコードからは変化はみえません。ですが、 decode_header"
" から返される個々のタプル要素を見ているコードでは、 ``ASCII`` セクションの前後の空白が ``ASCII`` "
"内に含まれるようになったことがわかります。 ``make_header`` は入力文字列に既に存在していなければ ``ASCII`` 非 "
"``ASCII`` セクション間に以前と同じく空白を追加するので、 ``make_header`` "
"を使ってヘッダを構築するコードは変更なしで動作するはずです。"

#: ../../whatsnew/3.3.rst:2417
msgid ""
":func:`email.utils.formataddr` now does the correct content transfer "
"encoding when passed non-``ASCII`` display names.  Any code that depended on"
" the previous buggy behavior that preserved the non-``ASCII`` unicode in the"
" formatted output string will need to be changed (:issue:`1690608`)."
msgstr ""
":func:`email.utils.formataddr` は非 ASCII の display name に対し正しい content "
"transfer encoding の扱いをするようになっています。かつての、フォーマット後文字列内に非 ASCII Unicode "
"を維持してしまう誤った振る舞いに依存するすべてのコードは、変更の必要があります。 (:issue:`1690608`)"

#: ../../whatsnew/3.3.rst:2422
msgid ""
":meth:`poplib.POP3.quit` may now raise protocol errors like all other "
"``poplib`` methods.  Code that assumes ``quit`` does not raise "
":exc:`poplib.error_proto` errors may need to be changed if errors on "
"``quit`` are encountered by a particular application (:issue:`11291`)."
msgstr ""
":meth:`poplib.POP3.quit` メソッドもほかの全ての ``poplib`` "
"のメソッドと同じく、今ではプロトコルエラーを送出し得ます。 ``quit`` が :exc:`poplib.error_proto` "
"エラーを送出しないことをあてにしていたコードは、 ``quit`` "
"でのエラーが特定のアプリケーションにとって問題となるようであれば、修正の必要があるかもしれません (:issue:`11291`)。"

#: ../../whatsnew/3.3.rst:2427
msgid ""
"The ``strict`` argument to :class:`email.parser.Parser`, deprecated since "
"Python 2.4, has finally been removed."
msgstr ""
"Python 2.4 から非推奨となっていた、 :class:`email.parser.Parser` への ``strict`` "
"引数はついに削除されました。"

#: ../../whatsnew/3.3.rst:2430
msgid ""
"The deprecated method ``unittest.TestCase.assertSameElements`` has been "
"removed."
msgstr "非推奨となっていたメソッド ``unittest.TestCase.assertSameElements`` は削除されました。"

#: ../../whatsnew/3.3.rst:2433
msgid "The deprecated variable ``time.accept2dyear`` has been removed."
msgstr "非推奨となっていた変数 ``time.accept2dyear`` は削除されました。"

#: ../../whatsnew/3.3.rst:2435
msgid ""
"The deprecated ``Context._clamp`` attribute has been removed from the "
":mod:`decimal` module.  It was previously replaced by the public attribute "
":attr:`~decimal.Context.clamp`.  (See :issue:`8540`.)"
msgstr ""
"非推奨となっていた ``Context._clamp`` 属性が :mod:`decimal` モジュールから削除されました。以前に既にこれは公開属性 "
":attr:`~decimal.Context.clamp` に置き換えられていました (:issue:`8540` 参照)。"

#: ../../whatsnew/3.3.rst:2439
msgid ""
"The undocumented internal helper class ``SSLFakeFile`` has been removed from"
" :mod:`smtplib`, since its functionality has long been provided directly by "
":meth:`socket.socket.makefile`."
msgstr ""
"文書化されていなかった内部ヘルパクラス ``SSLFakeFile`` が :mod:`smtplib` "
"モジュールより削除されました。この機能はずっと以前から :meth:`socket.socket.makefile` によって直接的に提供されています。"

#: ../../whatsnew/3.3.rst:2443
msgid ""
"Passing a negative value to :func:`time.sleep` on Windows now raises an "
"error instead of sleeping forever.  It has always raised an error on posix."
msgstr ""
"Windows では :func:`time.sleep` に負値を与えた場合に無限に眠っていましたが、今ではこれは例外を送出します。POSIX "
"ではこれは以前より常に例外です。"

#: ../../whatsnew/3.3.rst:2446
msgid ""
"The ``ast.__version__`` constant has been removed.  If you need to make "
"decisions affected by the AST version, use :attr:`sys.version_info` to make "
"the decision."
msgstr ""
"定数 ``ast.__version__`` は削除されました。AST バージョンに依拠して何かしらの決定をする必要があるのであれば、 "
":attr:`sys.version_info` を使ってください。"

#: ../../whatsnew/3.3.rst:2450
msgid ""
"Code that used to work around the fact that the :mod:`threading` module used"
" factory functions by subclassing the private classes will need to change to"
" subclass the now-public classes."
msgstr ""
":mod:`threading` "
"モジュールの、非公開クラスをサブクラス化するファクトリ関数を迂回していたコードは、今では公開クラスになったので修正の必要があります。"

#: ../../whatsnew/3.3.rst:2454
msgid ""
"The undocumented debugging machinery in the threading module has been "
"removed, simplifying the code.  This should have no effect on production "
"code, but is mentioned here in case any application debug frameworks were "
"interacting with it (:issue:`13550`)."
msgstr ""
"threading "
"モジュール内の文書化されていなかったデバッグ機構を削除してコードを単純化しました。このことが製品コードに影響することがあってはなりませんが、これと連携していたアプリケーションデバッグフレームワークのケースがありうるので、言及しておきます"
" (:issue:`13550`)。"

#: ../../whatsnew/3.3.rst:2461
msgid "Porting C code"
msgstr "C コードの移植"

#: ../../whatsnew/3.3.rst:2463
msgid ""
"In the course of changes to the buffer API the undocumented "
":c:member:`~Py_buffer.smalltable` member of the :c:type:`Py_buffer` "
"structure has been removed and the layout of the "
":c:type:`PyMemoryViewObject` has changed."
msgstr ""
"バッファ API 変更の一環で、文書化されてこなかった :c:type:`Py_buffer` 構造体のメンバ "
":c:member:`~Py_buffer.smalltable` が削除され、また、 :c:type:`PyMemoryViewObject` "
"のレイアウトが変更されました。"

#: ../../whatsnew/3.3.rst:2468
msgid ""
"All extensions relying on the relevant parts in ``memoryobject.h`` or "
"``object.h`` must be rebuilt."
msgstr "``memoryobject.h`` あるいは ``object.h`` での関係する部分に依存する全ての拡張は、再ビルドが必要です。"

#: ../../whatsnew/3.3.rst:2471
msgid ""
"Due to :ref:`PEP 393 <pep-393>`, the :c:type:`Py_UNICODE` type and all "
"functions using this type are deprecated (but will stay available for at "
"least five years).  If you were using low-level Unicode APIs to construct "
"and access unicode objects and you want to benefit of the memory footprint "
"reduction provided by :pep:`393`, you have to convert your code to the new "
":doc:`Unicode API <../c-api/unicode>`."
msgstr ""
":ref:`PEP 393 <pep-393>` により、 :c:type:`Py_UNICODE` 型とこの型を使う全ての関数は非推奨となりました "
"(ただし最低 5 年は利用可能なまま保たれます)。Unicode オブジェクトの構築とアクセスに低水準 Unicode API をこれまで使っていて、 "
":pep:`393` によって提供されるメモリフットプリント削減の恩恵を受けたければ、新しい :doc:`Unicode API "
"<../c-api/unicode>` に乗り換える必要があります。"

#: ../../whatsnew/3.3.rst:2478
msgid ""
"However, if you only have been using high-level functions such as "
":c:func:`PyUnicode_Concat()`, :c:func:`PyUnicode_Join` or "
":c:func:`PyUnicode_FromFormat()`, your code will automatically take "
"advantage of the new unicode representations."
msgstr ""
"一方で :c:func:`PyUnicode_Concat()` 、 :c:func:`PyUnicode_Join` あるいは "
":c:func:`PyUnicode_FromFormat()` といった高水準関数のみを使ってきたのであれば、あなたのコードは自動的に新しい "
"Unicode 表現に便乗できます。"

#: ../../whatsnew/3.3.rst:2483
msgid ":c:func:`PyImport_GetMagicNumber` now returns ``-1`` upon failure."
msgstr ":c:func:`PyImport_GetMagicNumber` は失敗時に ``-1`` を返すようになりました。"

#: ../../whatsnew/3.3.rst:2485
msgid ""
"As a negative value for the *level* argument to :func:`__import__` is no "
"longer valid, the same now holds for :c:func:`PyImport_ImportModuleLevel`. "
"This also means that the value of *level* used by "
":c:func:`PyImport_ImportModuleEx` is now ``0`` instead of ``-1``."
msgstr ""
":func:`__import__` の *level* 引数に負値を渡すことはもはや有効ではないので、対応する "
":c:func:`PyImport_ImportModuleLevel` でも同じです。このことは "
":c:func:`PyImport_ImportModuleEx` に使われる *level* の値が ``-1`` ではなく ``0`` "
"を使うようになったことも意味しています。"

#: ../../whatsnew/3.3.rst:2492
msgid "Building C extensions"
msgstr "C 拡張のビルド"

#: ../../whatsnew/3.3.rst:2494
msgid ""
"The range of possible file names for C extensions has been narrowed. Very "
"rarely used spellings have been suppressed: under POSIX, files named "
"``xxxmodule.so``, ``xxxmodule.abi3.so`` and ``xxxmodule.cpython-*.so`` are "
"no longer recognized as implementing the ``xxx`` module.  If you had been "
"generating such files, you have to switch to the other spellings (i.e., "
"remove the ``module`` string from the file names)."
msgstr ""
"C 拡張のファイル名として認められる範囲が狭められました。滅多に使われてこなかった命名は取りやめられました: POSIX では、 "
"``xxxmodule.so``, ``xxxmodule.abi3.so``, ``xxxmodule.cpython-*.so`` 命名は今後 "
"``xxx`` モジュールの実装とは認識されません。これまでそのようなファイルを作ってきたのであれば、別の命名に乗り換えてください (つまり "
"``module`` 文字列をファイル名から取り除いてください)。"

#: ../../whatsnew/3.3.rst:2502
msgid "(implemented in :issue:`14040`.)"
msgstr "(implemented in :issue:`14040`.)"

#: ../../whatsnew/3.3.rst:2506
msgid "Command Line Switch Changes"
msgstr "コマンドラインスイッチの変更"

#: ../../whatsnew/3.3.rst:2508
msgid ""
"The -Q command-line flag and related artifacts have been removed.  Code "
"checking sys.flags.division_warning will need updating."
msgstr ""
"``-Q`` コマンドラインスイッチとそれに関係するものは削除されました。 ``sys.flags.division_warning`` "
"をチェックしているコードは修正する必要があります。"

#: ../../whatsnew/3.3.rst:2511
msgid "(:issue:`10998`, contributed by Éric Araujo.)"
msgstr "(:issue:`10998`, contributed by Éric Araujo.)"

#: ../../whatsnew/3.3.rst:2513
msgid ""
"When :program:`python` is started with :option:`-S`, ``import site`` will no"
" longer add site-specific paths to the module search paths.  In previous "
"versions, it did."
msgstr ""
":option:`-S` スイッチ付きで :program:`python` を開始すると、 ``import site`` "
"がモジュール検索パスにサイト固有のパスを追加しなくなります。以前のバージョンではそれをしていました。"

#: ../../whatsnew/3.3.rst:2517
msgid ""
"(:issue:`11591`, contributed by Carl Meyer with editions by Éric Araujo.)"
msgstr ""
"(:issue:`11591`, contributed by Carl Meyer with editions by Éric Araujo.)"
