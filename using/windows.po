# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# shirou - しろう <shirou.faw@gmail.com>, 2017
# Hano, 2017
# Arihiro TAKASE, 2017
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2017
# uehara <b1015062@fun.ac.jp>, 2018
# tomo, 2019
# Osamu NAKAMURA, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-26 06:10+0000\n"
"PO-Revision-Date: 2017-02-16 23:42+0000\n"
"Last-Translator: Osamu NAKAMURA, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../using/windows.rst:7
msgid "Using Python on Windows"
msgstr "Windows で Python を使う"

#: ../../using/windows.rst:12
msgid ""
"This document aims to give an overview of Windows-specific behaviour you "
"should know about when using Python on Microsoft Windows."
msgstr ""
"このドキュメントは、 Python を Microsoft Windows で使うときに知っておくべ"
"き、 Windows 固有の動作についての概要を伝えることを目的としています。"

#: ../../using/windows.rst:15
msgid ""
"Unlike most Unix systems and services, Windows does not include a system "
"supported installation of Python. To make Python available, the CPython team "
"has compiled Windows installers (MSI packages) with every `release <https://"
"www.python.org/download/releases/>`_ for many years. These installers are "
"primarily intended to add a per-user installation of Python, with the core "
"interpreter and library being used by a single user. The installer is also "
"able to install for all users of a single machine, and a separate ZIP file "
"is available for application-local distributions."
msgstr ""
"ほとんどの Unix システムとサービスとは違って、Windows には、システムがサポー"
"トする Python インストレーションが含まれていません。Python を利用可能にするた"
"めに、CPython チームは長年の間、すべての `リリース <https://www.python.org/"
"download/releases/>`_ で Windows インストーラ (MSI パッケージ) をコンパイルし"
"てきました。単独のユーザで使われるコアインタプリタとライブラリをユーザごとに"
"追加する Python インストレーションを、これらインストーラは主として意図してい"
"ます。インストーラでは単一マシンのすべてのユーザのためにインストールすること"
"もでき、また、これとは分離されたアプリケーションローカルな配布物の ZIP ファイ"
"ルも入手可能です。"

#: ../../using/windows.rst:24
msgid ""
"As specified in :pep:`11`, a Python release only supports a Windows platform "
"while Microsoft considers the platform under extended support. This means "
"that Python |version| supports Windows 8.1 and newer. If you require Windows "
"7 support, please install Python 3.8."
msgstr ""
":pep:`11` で明記しているとおり Python のリリースは、Microsoft が延長サポート"
"期間であるとしている Windows プラットフォームのみをサポートします。\n"
"つまり Python |version| は Windows 8.1 とそれより新しい Windows をサポートす"
"るということです。\n"
"Windows 7 サポートが必要な場合は、Python 3.8 をインストールしてください。"

#: ../../using/windows.rst:29
msgid ""
"There are a number of different installers available for Windows, each with "
"certain benefits and downsides."
msgstr ""
"Windows で使えるインストーラには多くの様々なものがあり、それぞれが利点と欠点"
"を持っています。"

#: ../../using/windows.rst:32
msgid ""
":ref:`windows-full` contains all components and is the best option for "
"developers using Python for any kind of project."
msgstr ""
":ref:`windows-full` には全てのコンポーネントが含まれており、 Python を使う開"
"発者がどんな種類のプロジェクトでも最適な選択肢です。"

#: ../../using/windows.rst:35
msgid ""
":ref:`windows-store` is a simple installation of Python that is suitable for "
"running scripts and packages, and using IDLE or other development "
"environments. It requires Windows 10, but can be safely installed without "
"corrupting other programs. It also provides many convenient commands for "
"launching Python and its tools."
msgstr ""
":ref:`windows-store` は、スクリプトやパッケージの実行、 IDLE の使用やその他開"
"発環境に適したシンプルな構成の Python です。\n"
"Windows 10 が求められはしますが、他のプログラムを壊すことなく安全にインストー"
"ルできます。\n"
"Python やそのツールを起動する多くの便利なコマンドも提供しています。"

#: ../../using/windows.rst:41
msgid ""
":ref:`windows-nuget` are lightweight installations intended for continuous "
"integration systems. It can be used to build Python packages or run scripts, "
"but is not updateable and has no user interface tools."
msgstr ""
":ref:`windows-nuget` は、継続的インテグレーションのための軽量なインストール構"
"成です。\n"
"これは Python パッケージのビルドやスクリプトの実行にも使えますが、アップデー"
"ト可能ではなく、ユーザーインターフェイスツールもありません。"

#: ../../using/windows.rst:45
msgid ""
":ref:`windows-embeddable` is a minimal package of Python suitable for "
"embedding into a larger application."
msgstr ""
":ref:`windows-embeddable` は、他の大きなアプリケーションに埋め込むのに適し"
"た、 Python の最小パッケージです。"

#: ../../using/windows.rst:52
msgid "The full installer"
msgstr "完全版インストーラ"

#: ../../using/windows.rst:55
msgid "Installation steps"
msgstr "インストール手順"

#: ../../using/windows.rst:57
msgid ""
"Four Python |version| installers are available for download - two each for "
"the 32-bit and 64-bit versions of the interpreter. The *web installer* is a "
"small initial download, and it will automatically download the required "
"components as necessary. The *offline installer* includes the components "
"necessary for a default installation and only requires an internet "
"connection for optional features. See :ref:`install-layout-option` for other "
"ways to avoid downloading during installation."
msgstr ""
"ダウンロードできる Python |version| のインストーラは 4 つあります。\n"
"インタプリタの 32 ビット版、64 ビット版がそれぞれ 2 つずつあります。\n"
"*WEB インストーラ* は最初のダウンロードサイズは小さく、必要なコンポーネントは"
"インストーラ実行時に必要に応じて自動的にダウンロードします。\n"
"*オフラインインストーラ* にはデフォルトインストールに必要なコンポーネントが含"
"まれていて、インターネット接続はオプショナルな機能のためにだけに必要となりま"
"す。\n"
"インストール時にダウンロードを避けるほかの方法については :ref:`install-"
"layout-option` を参照して下さい。"

#: ../../using/windows.rst:65
msgid "After starting the installer, one of two options may be selected:"
msgstr "インストーラを開始すると、2つの選択肢からひとつを選べます:"

#: ../../using/windows.rst:69
msgid "If you select \"Install Now\":"
msgstr "\"Install Now\" を選択した場合:"

#: ../../using/windows.rst:71
msgid ""
"You will *not* need to be an administrator (unless a system update for the C "
"Runtime Library is required or you install the :ref:`launcher` for all users)"
msgstr ""
"管理者権限は *不要です* (ただし C ランタイムライブラリのシステム更新が必要で"
"あったり、 :ref:`launcher` をすべてのユーザ向けにインストールする場合は必要で"
"す)。"

#: ../../using/windows.rst:74
msgid "Python will be installed into your user directory"
msgstr "Python はあなたのユーザディレクトリにインストールされます。"

#: ../../using/windows.rst:75
msgid ""
"The :ref:`launcher` will be installed according to the option at the bottom "
"of the first page"
msgstr ""
":ref:`launcher` はこのインストールウィザード最初のページの下部のチェックボッ"
"クス指定に従ってインストールされます。"

#: ../../using/windows.rst:77
msgid "The standard library, test suite, launcher and pip will be installed"
msgstr "標準ライブラリ、テストスイート、ランチャ、pip がインストールされます。"

#: ../../using/windows.rst:78
msgid "If selected, the install directory will be added to your :envvar:`PATH`"
msgstr ""
"このインストールウィザード最初の下部のチェックボックスをチェックすれば、環境"
"変数 :envvar:`PATH` にインストールディレクトリが追加されます。"

#: ../../using/windows.rst:79
msgid "Shortcuts will only be visible for the current user"
msgstr "ショートカットはカレントユーザだけに可視になります。"

#: ../../using/windows.rst:81
msgid ""
"Selecting \"Customize installation\" will allow you to select the features "
"to install, the installation location and other options or post-install "
"actions. To install debugging symbols or binaries, you will need to use this "
"option."
msgstr ""
"\"Customize installation\" を選択すると、インストール場所、その他オプションや"
"インストール後のアクションの変更などのインストールの有りようを選べます。デ"
"バッグシンボルやデバッグバイナリをインストールするならこちらを選択する必要が"
"あるでしょう。"

#: ../../using/windows.rst:85
msgid ""
"To perform an all-users installation, you should select \"Customize "
"installation\". In this case:"
msgstr ""
"すべてのユーザのためのインストールのためには \"Customize installation\" を選"
"んでください。この場合:"

#: ../../using/windows.rst:88
msgid "You may be required to provide administrative credentials or approval"
msgstr "管理者資格か承認が必要かもしれません。"

#: ../../using/windows.rst:89
msgid "Python will be installed into the Program Files directory"
msgstr "Python は Program Files ディレクトリにインストールされます。"

#: ../../using/windows.rst:90
msgid "The :ref:`launcher` will be installed into the Windows directory"
msgstr ":ref:`launcher` は Windows ディレクトリにインストールされます。"

#: ../../using/windows.rst:91
msgid "Optional features may be selected during installation"
msgstr "オプショナルな機能はインストール中に選択できます。"

#: ../../using/windows.rst:92
msgid "The standard library can be pre-compiled to bytecode"
msgstr "標準ライブラリをバイトコードにプリコンパイルできます。"

#: ../../using/windows.rst:93
msgid ""
"If selected, the install directory will be added to the system :envvar:`PATH`"
msgstr ""
"そう選択すれば、インストールディレクトリはシステム環境変数 :envvar:`PATH` に"
"追加されます。"

#: ../../using/windows.rst:94
msgid "Shortcuts are available for all users"
msgstr "ショートカットがすべてのユーザで利用できるようになります。"

#: ../../using/windows.rst:99
msgid "Removing the MAX_PATH Limitation"
msgstr "MAX_PATH の制限を除去する"

#: ../../using/windows.rst:101
msgid ""
"Windows historically has limited path lengths to 260 characters. This meant "
"that paths longer than this would not resolve and errors would result."
msgstr ""
"Windows は歴史的にパスの長さが 260 文字に制限されています。\n"
"つまり、これより長いパスは解決できず結果としてエラーになるということです。"

#: ../../using/windows.rst:104
msgid ""
"In the latest versions of Windows, this limitation can be expanded to "
"approximately 32,000 characters. Your administrator will need to activate "
"the \"Enable Win32 long paths\" group policy, or set ``LongPathsEnabled`` to "
"``1`` in the registry key "
"``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem``."
msgstr ""
"Windows の最新版では、この制限は約 32,000 文字まで拡張できます。\n"
"管理者が、グループポリシーの \"Win32 の長いパスを有効にする (Enable Win32 "
"long paths)\" を有効にするか、レジストリキー "
"``HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem`` の "
"``LongPathsEnabled`` の値を ``1`` に設定する必要があります。"

#: ../../using/windows.rst:110
msgid ""
"This allows the :func:`open` function, the :mod:`os` module and most other "
"path functionality to accept and return paths longer than 260 characters."
msgstr ""
"これにより、 :func:`open` 関数や :mod:`os` モジュール、他のほとんどのパスの機"
"能が 260 文字より長いパスを受け入れ、返すことができるようになります。"

#: ../../using/windows.rst:113
msgid "After changing the above option, no further configuration is required."
msgstr "これらのオプションを変更したら、それ以上の設定は必要ありません。"

#: ../../using/windows.rst:117
msgid "Support for long paths was enabled in Python."
msgstr "Python で長いパスのサポートが可能になりました。"

#: ../../using/windows.rst:122
msgid "Installing Without UI"
msgstr "インストーラの GUI なしでインストールする"

#: ../../using/windows.rst:124
msgid ""
"All of the options available in the installer UI can also be specified from "
"the command line, allowing scripted installers to replicate an installation "
"on many machines without user interaction.  These options may also be set "
"without suppressing the UI in order to change some of the defaults."
msgstr ""
"インストーラの GUI で利用できるすべてのオプションは、コマンドラインからも指定"
"できます。これによりユーザとの対話なしで数多くの機器に同じインストールを行う"
"ような、スクリプト化されたインストールを行うことができます。ちょっとしたデ"
"フォルトの変更のために、GUI を抑制することなしにこれらコマンドラインオプショ"
"ンをセットすることもできます。"

#: ../../using/windows.rst:129
msgid ""
"To completely hide the installer UI and install Python silently, pass the ``/"
"quiet`` option. To skip past the user interaction but still display progress "
"and errors, pass the ``/passive`` option. The ``/uninstall`` option may be "
"passed to immediately begin removing Python - no prompt will be displayed."
msgstr ""
"完全にインストーラの GUI を隠して Python を静かにインストールするには、 ``/"
"quiet`` オプションを渡してください。対話的に設定するのはスキップしつつも進捗"
"とエラーの表示は行いたいなら、 ``/passive`` オプションを渡してください。 ``/"
"uninstall`` オプションも渡せます。これはプロンプトの表示なしに、即座に "
"Python の削除を開始します。"

#: ../../using/windows.rst:135
msgid ""
"All other options are passed as ``name=value``, where the value is usually "
"``0`` to disable a feature, ``1`` to enable a feature, or a path. The full "
"list of available options is shown below."
msgstr ""
"ほかのすべてのオプションは ``name=value`` の形で渡します。value は大抵 ``0`` "
"で機能を無効化、 ``1`` で機能を有効化、であるとかパスの指定です。利用可能なオ"
"プションの完全なリストは以下の通りです。"

#: ../../using/windows.rst:140
msgid "Name"
msgstr "名前"

#: ../../using/windows.rst:140
msgid "Description"
msgstr "説明"

#: ../../using/windows.rst:140
msgid "Default"
msgstr "デフォルト"

#: ../../using/windows.rst:142
msgid "InstallAllUsers"
msgstr "InstallAllUsers"

#: ../../using/windows.rst:142
msgid "Perform a system-wide installation."
msgstr "システムワイドなインストールを実行する。"

#: ../../using/windows.rst:142 ../../using/windows.rst:165
#: ../../using/windows.rst:168 ../../using/windows.rst:177
#: ../../using/windows.rst:195 ../../using/windows.rst:203
#: ../../using/windows.rst:206
msgid "0"
msgstr "0"

#: ../../using/windows.rst:144
msgid "TargetDir"
msgstr "TargetDir"

#: ../../using/windows.rst:144
msgid "The installation directory"
msgstr "インストール先ディレクトリ。"

#: ../../using/windows.rst:144
msgid "Selected based on InstallAllUsers"
msgstr "InstallAllUsers に基いて選択されます。"

#: ../../using/windows.rst:147
msgid "DefaultAllUsersTargetDir"
msgstr "DefaultAllUsersTargetDir"

#: ../../using/windows.rst:147
msgid "The default installation directory for all-user installs"
msgstr ""
"すべてのユーザ向けインストールのためのデフォルトインストール先ディレクトリ。"

#: ../../using/windows.rst:147
msgid ""
":file:`%ProgramFiles%\\\\\\ Python X.Y` or :file:`\\ %ProgramFiles(x86)%\\\\"
"\\ Python X.Y`"
msgstr ""
":file:`%ProgramFiles%\\\\\\ Python X.Y` または :file:`\\ %ProgramFiles(x86)%"
"\\\\\\ Python X.Y`"

#: ../../using/windows.rst:152
msgid "DefaultJustForMeTargetDir"
msgstr "DefaultJustForMeTargetDir"

#: ../../using/windows.rst:152
msgid "The default install directory for just-for-me installs"
msgstr "自分一人用インストールのためのデフォルトインストール先ディレクトリ。"

#: ../../using/windows.rst:152
msgid ""
":file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY` or :file:`%LocalAppData%\\"
"\\\\ Programs\\\\PythonXY-32` or :file:`%LocalAppData%\\\\\\ Programs\\"
"\\PythonXY-64`"
msgstr ""
":file:`%LocalAppData%\\\\\\ Programs\\\\PythonXY`, :file:`%LocalAppData%\\\\"
"\\ Programs\\\\PythonXY-32`, :file:`%LocalAppData%\\\\\\ Programs\\"
"\\PythonXY-64` のいずれか"

#: ../../using/windows.rst:159
msgid "DefaultCustomTargetDir"
msgstr "DefaultCustomTargetDir"

#: ../../using/windows.rst:159
msgid "The default custom install directory displayed in the UI"
msgstr ""
"カスタムインストールディレクトリとしてデフォルトで GUI に表示される値。"

#: ../../using/windows.rst:159 ../../using/windows.rst:208
msgid "(empty)"
msgstr "(空)"

#: ../../using/windows.rst:162
msgid "AssociateFiles"
msgstr "AssociateFiles"

#: ../../using/windows.rst:162
msgid "Create file associations if the launcher is also installed."
msgstr "ランチャもインストールする場合に、ファイルの関連付けを行う。"

#: ../../using/windows.rst:162 ../../using/windows.rst:172
#: ../../using/windows.rst:175 ../../using/windows.rst:179
#: ../../using/windows.rst:182 ../../using/windows.rst:185
#: ../../using/windows.rst:187 ../../using/windows.rst:190
#: ../../using/windows.rst:193 ../../using/windows.rst:197
#: ../../using/windows.rst:199 ../../using/windows.rst:201
msgid "1"
msgstr "1"

#: ../../using/windows.rst:165
msgid "CompileAll"
msgstr "CompileAll"

#: ../../using/windows.rst:165
msgid "Compile all ``.py`` files to ``.pyc``."
msgstr "すべての ``.py`` ファイルをバイトコンパイルして ``.pyc`` を作る。"

#: ../../using/windows.rst:168
msgid "PrependPath"
msgstr "PrependPath"

#: ../../using/windows.rst:168
msgid ""
"Add install and Scripts directories to :envvar:`PATH` and ``.PY`` to :envvar:"
"`PATHEXT`"
msgstr ""
":envvar:`PATH` にインストールディレクトリと Scripts ディレクトリを追加し、 :"
"envvar:`PATHEXT` に ``.PY`` を追加する。"

#: ../../using/windows.rst:172
msgid "Shortcuts"
msgstr "Shortcuts"

#: ../../using/windows.rst:172
msgid ""
"Create shortcuts for the interpreter, documentation and IDLE if installed."
msgstr ""
"インストールするインタプリタ、ドキュメント、IDLE へのショートカットを作る。"

#: ../../using/windows.rst:175
msgid "Include_doc"
msgstr "Include_doc"

#: ../../using/windows.rst:175
msgid "Install Python manual"
msgstr "Python マニュアルをインストールする。"

#: ../../using/windows.rst:177
msgid "Include_debug"
msgstr "Include_debug"

#: ../../using/windows.rst:177
msgid "Install debug binaries"
msgstr "デバッグバイナリをインストールする。"

#: ../../using/windows.rst:179
msgid "Include_dev"
msgstr "Include_dev"

#: ../../using/windows.rst:179
msgid "Install developer headers and libraries"
msgstr "開発用のヘッダ・ライブラリをインストールする。"

#: ../../using/windows.rst:182
msgid "Include_exe"
msgstr "Include_exe"

#: ../../using/windows.rst:182
msgid "Install :file:`python.exe` and related files"
msgstr ":file:`python.exe` とその関連ファイルをインストールする。"

#: ../../using/windows.rst:185
msgid "Include_launcher"
msgstr "Include_launcher"

#: ../../using/windows.rst:185
msgid "Install :ref:`launcher`."
msgstr ":ref:`launcher` をインストールする。"

#: ../../using/windows.rst:187
msgid "InstallLauncherAllUsers"
msgstr "InstallLauncherAllUsers"

#: ../../using/windows.rst:187
msgid "Installs :ref:`launcher` for all users."
msgstr ":ref:`launcher` をすべてのユーザにインストールする。"

#: ../../using/windows.rst:190
msgid "Include_lib"
msgstr "Include_lib"

#: ../../using/windows.rst:190
msgid "Install standard library and extension modules"
msgstr "標準ライブラリと拡張モジュールをインストールする。"

#: ../../using/windows.rst:193
msgid "Include_pip"
msgstr "Include_pip"

#: ../../using/windows.rst:193
msgid "Install bundled pip and setuptools"
msgstr "バンドル版の pip と setuptools をインストールする。"

#: ../../using/windows.rst:195
msgid "Include_symbols"
msgstr "Include_symbols"

#: ../../using/windows.rst:195
msgid "Install debugging symbols (`*`.pdb)"
msgstr "デバッグシンボル (`*`.pdb) をインストールする。"

#: ../../using/windows.rst:197
msgid "Include_tcltk"
msgstr "Include_tcltk"

#: ../../using/windows.rst:197
msgid "Install Tcl/Tk support and IDLE"
msgstr "Tcl/Tk サポートと IDLE をインストールする。"

#: ../../using/windows.rst:199
msgid "Include_test"
msgstr "Include_test"

#: ../../using/windows.rst:199
msgid "Install standard library test suite"
msgstr "標準ライブラリのテストスイートをインストールする。"

#: ../../using/windows.rst:201
msgid "Include_tools"
msgstr "Include_tools"

#: ../../using/windows.rst:201
msgid "Install utility scripts"
msgstr "ユーティリティスクリプトをインストールする。"

#: ../../using/windows.rst:203
msgid "LauncherOnly"
msgstr "LauncherOnly"

#: ../../using/windows.rst:203
msgid "Only installs the launcher. This will override most other options."
msgstr ""
"ランチャのみをインストールする。これは他のほとんどのオプションを上書きしま"
"す。"

#: ../../using/windows.rst:206
msgid "SimpleInstall"
msgstr "SimpleInstall"

#: ../../using/windows.rst:206
msgid "Disable most install UI"
msgstr "最大限のインストーラ GUI を無効にする。"

#: ../../using/windows.rst:208
msgid "SimpleInstallDescription"
msgstr "SimpleInstallDescription"

#: ../../using/windows.rst:208
msgid "A custom message to display when the simplified install UI is used."
msgstr "単純化されたインストーラ GUI を使う際に表示するカスタムメッセージ。"

#: ../../using/windows.rst:212
msgid ""
"For example, to silently install a default, system-wide Python installation, "
"you could use the following command (from an elevated command prompt)::"
msgstr ""
"例えばデフォルトでシステムワイドな Python インストレーションを静かに行うに"
"は、以下コマンドを使えます (コマンドプロンプトより)::"

#: ../../using/windows.rst:217
msgid ""
"To allow users to easily install a personal copy of Python without the test "
"suite, you could provide a shortcut with the following command. This will "
"display a simplified initial page and disallow customization::"
msgstr ""
"テストスイートなしの Python のパーソナルなコピーのインストールをユーザに簡単"
"に行わせるには、以下コマンドのショートカットを作れば良いです。これはインス"
"トーラの最初のページを単純化して表示し、また、カスタマイズできないようにしま"
"す::"

#: ../../using/windows.rst:224
msgid ""
"(Note that omitting the launcher also omits file associations, and is only "
"recommended for per-user installs when there is also a system-wide "
"installation that included the launcher.)"
msgstr ""
"(ランチャのインストールを省略するとファイルの関連付けも省略されるので、これは"
"ランチャインストールを含めたシステムワイドなインストールをした場合のユーザご"
"とインストールに限った場合のお勧めです。)"

#: ../../using/windows.rst:228
msgid ""
"The options listed above can also be provided in a file named ``unattend."
"xml`` alongside the executable. This file specifies a list of options and "
"values. When a value is provided as an attribute, it will be converted to a "
"number if possible. Values provided as element text are always left as "
"strings. This example file sets the same options as the previous example:"
msgstr ""
"上でリストしたオプションは、実行ファイルと同じ場所の ``unattend.xml`` と名付"
"けられたファイルで与えることもできます。このファイルはオプションとその値のリ"
"ストを指定します。値がアトリビュートとして与えられた場合、それは数値であれば"
"数値に変換されます。エレメントテキストで与える場合は常に文字列のままです。以"
"下は、先の例と同じオプションをセットするファイルの実例です::"

#: ../../using/windows.rst:247
msgid "Installing Without Downloading"
msgstr "ダウンロード不要なインストール"

#: ../../using/windows.rst:249
msgid ""
"As some features of Python are not included in the initial installer "
"download, selecting those features may require an internet connection.  To "
"avoid this need, all possible components may be downloaded on-demand to "
"create a complete *layout* that will no longer require an internet "
"connection regardless of the selected features. Note that this download may "
"be bigger than required, but where a large number of installations are going "
"to be performed it is very useful to have a locally cached copy."
msgstr ""
"Python のいくつかの機能は最初にダウンロードしたインストーラには含まれていない"
"ため、それらの機能をインストールしようと選択するとインターネット接続が必要に"
"なります。\n"
"インターネット接続が必要にならないように、全てのコンポーネントをすぐにできる"
"限りダウンロードして、完全な *配置構成 (layout)* を作成し、どんな機能が選択さ"
"れたかに関わらず、それ以上インターネット接続を必要がないようにします。\n"
"この方法のダウンロードサイズは必要以上に大きくなるかもしれませんが、たくさん"
"の回数インストールしようとする場合には、ローカルにキャッシュされたコピーを持"
"つことはとても有用です。"

#: ../../using/windows.rst:257
msgid ""
"Execute the following command from Command Prompt to download all possible "
"required files.  Remember to substitute ``python-3.9.0.exe`` for the actual "
"name of your installer, and to create layouts in their own directories to "
"avoid collisions between files with the same name."
msgstr ""
"コマンドプロンプトから以下のコマンドを実行して、必要なファイルをできる限り全"
"てダウンロードします。\n"
"``python-3.9.0.exe`` 部分は実際のインストーラの名前に置き換え、同名のファイル"
"どうしの衝突が起こらないように、個別のディレクトリ内に配置構成を作るのを忘れ"
"ないようにしてください。"

#: ../../using/windows.rst:266
msgid ""
"You may also specify the ``/quiet`` option to hide the progress display."
msgstr "進捗表示を隠すのに ``/quiet`` オプションを指定することもできます。"

#: ../../using/windows.rst:269
msgid "Modifying an install"
msgstr "インストール後の変更"

#: ../../using/windows.rst:271
msgid ""
"Once Python has been installed, you can add or remove features through the "
"Programs and Features tool that is part of Windows. Select the Python entry "
"and choose \"Uninstall/Change\" to open the installer in maintenance mode."
msgstr ""
"いったん Python がインストールされたら、Windows のシステム機能の「プログラム"
"と機能」ツールから機能の追加や削除ができます。Python のエントリを選択して「ア"
"ンインストールと変更」を選ぶことで、インストーラをメンテナンスモードで開きま"
"す。"

#: ../../using/windows.rst:275
msgid ""
"\"Modify\" allows you to add or remove features by modifying the checkboxes "
"- unchanged checkboxes will not install or remove anything. Some options "
"cannot be changed in this mode, such as the install directory; to modify "
"these, you will need to remove and then reinstall Python completely."
msgstr ""
"インストーラ GUI で \"Modify\" を選ぶと、チェックボックスの選択を変えることで"
"機能の追加削除ができます - チェックボックスの選択を変えなければ、何かがインス"
"トールされたり削除されたりはしません。いくつかのオプションはこのモードでは変"
"更することはできません。インストールディレクトリなどです。それらを変えたいの"
"であれば、完全に削除してから再インストールする必要があります。"

#: ../../using/windows.rst:280
msgid ""
"\"Repair\" will verify all the files that should be installed using the "
"current settings and replace any that have been removed or modified."
msgstr ""
"\"Repair\" では、現在の設定で本来インストールされるべきすべてのファイルを検証"
"し、削除されていたり更新されていたりするファイルを修正します。"

#: ../../using/windows.rst:283
msgid ""
"\"Uninstall\" will remove Python entirely, with the exception of the :ref:"
"`launcher`, which has its own entry in Programs and Features."
msgstr ""
"\"Uninstall\" は Python を完全に削除します。「プログラムと機能」内の自身のエ"
"ントリを持つ :ref:`launcher` の例外が起こります。"

#: ../../using/windows.rst:290
msgid "The Microsoft Store package"
msgstr "Microsoft ストアパッケージ"

#: ../../using/windows.rst:294
msgid ""
"The Microsoft Store package is an easily installable Python interpreter that "
"is intended mainly for interactive use, for example, by students."
msgstr ""
"Microsoft ストアパッケージは、例えば生徒が主に対話型で使うことを意図した簡単"
"にインストールできる Python インタプリタです。"

#: ../../using/windows.rst:297
msgid ""
"To install the package, ensure you have the latest Windows 10 updates and "
"search the Microsoft Store app for \"Python |version|\". Ensure that the app "
"you select is published by the Python Software Foundation, and install it."
msgstr ""
"このパッケージをインストールするには、最新の Windows 10 のアップデートになっ"
"ていることを確認し、 Microsoft ストアアプリで \"Python |version|\" と検索しま"
"す。\n"
"選んだアプリが Python Software Foundation が公開したものであることを確認し"
"て、インストールします。"

#: ../../using/windows.rst:302
msgid ""
"Python will always be available for free on the Microsoft Store. If you are "
"asked to pay for it, you have not selected the correct package."
msgstr ""
"Python は常に Microsoft ストアで無料で利用できます。\n"
"もしお金を払うように要求されたなら、正しいパッケージを選んでいません。"

#: ../../using/windows.rst:305
msgid ""
"After installation, Python may be launched by finding it in Start. "
"Alternatively, it will be available from any Command Prompt or PowerShell "
"session by typing ``python``. Further, pip and IDLE may be used by typing "
"``pip`` or ``idle``. IDLE can also be found in Start."
msgstr ""
"インストールした後は、スタートメニューから Python を見付けて起動するでしょ"
"う。\n"
"あるいは、 ``python`` とタイプしてコマンドプロンプトや PowerShell のセッショ"
"ンから使えるでしょう。\n"
"さらに、 ``pip`` や ``idle`` とタイプして pip あるいは IDLE を利用できま"
"す。\n"
"IDLE はスタートメニューからも見付けられます。"

#: ../../using/windows.rst:310
msgid ""
"All three commands are also available with version number suffixes, for "
"example, as ``python3.exe`` and ``python3.x.exe`` as well as ``python.exe`` "
"(where ``3.x`` is the specific version you want to launch, such as |"
"version|). Open \"Manage App Execution Aliases\" through Start to select "
"which version of Python is associated with each command. It is recommended "
"to make sure that ``pip`` and ``idle`` are consistent with whichever version "
"of ``python`` is selected."
msgstr ""

#: ../../using/windows.rst:318
msgid ""
"Virtual environments can be created with ``python -m venv`` and activated "
"and used as normal."
msgstr "仮想環境は ``python -m venv`` で作成し、有効化して普通に使えます。"

#: ../../using/windows.rst:321
msgid ""
"If you have installed another version of Python and added it to your "
"``PATH`` variable, it will be available as ``python.exe`` rather than the "
"one from the Microsoft Store. To access the new installation, use ``python3."
"exe`` or ``python3.x.exe``."
msgstr ""
"既に別のバージョンの Python をインストールして ``PATH`` 変数に追加してある場"
"合は、 Microsoft ストアのものではない ``python.exe`` として使えます。\n"
"新しくインストールした Python にアクセスするには、 ``python3.exe`` あるいは "
"``python3.x.exe`` として使えます。"

#: ../../using/windows.rst:326
msgid ""
"The ``py.exe`` launcher will detect this Python installation, but will "
"prefer installations from the traditional installer."
msgstr ""
"``py.exe`` ランチャーはこの Python のインストールを見つけますが、従来のインス"
"トーラーによるインストールを優先します。"

#: ../../using/windows.rst:329
msgid ""
"To remove Python, open Settings and use Apps and Features, or else find "
"Python in Start and right-click to select Uninstall. Uninstalling will "
"remove all packages you installed directly into this Python installation, "
"but will not remove any virtual environments"
msgstr ""
"Python を除去するには、「設定」を開き「アプリと機能」を使うか、「スタート」に"
"ある Python を右クリックしてアンインストールします。\n"
"アンインストールでは、この Python に直接インストールした全てのパッケージが除"
"去されますが、仮想環境はどれも除去されません。"

#: ../../using/windows.rst:335
msgid "Known Issues"
msgstr "既知の問題"

#: ../../using/windows.rst:337
msgid ""
"Because of restrictions on Microsoft Store apps, Python scripts may not have "
"full write access to shared locations such as ``TEMP`` and the registry. "
"Instead, it will write to a private copy. If your scripts must modify the "
"shared locations, you will need to install the full installer."
msgstr ""
"Microsoft ストアアプリの制限により、 Python スクリプトには ``TEMP`` やレジス"
"トリのような共有の場所への完全な書き込み権限は無いでしょう。\n"
"その代わり、個人用のところへ書き込みます。\n"
"スクリプトで共有の場所で変更しなければならない場合は、完全版のインストーラで"
"インストールする必要があります。"

#: ../../using/windows.rst:342
msgid ""
"For more detail on the technical basis for these limitations, please consult "
"Microsoft's documentation on packaged full-trust apps, currently available "
"at `docs.microsoft.com/en-us/windows/msix/desktop/desktop-to-uwp-behind-the-"
"scenes <https://docs.microsoft.com/en-us/windows/msix/desktop/desktop-to-uwp-"
"behind-the-scenes>`_"
msgstr ""

#: ../../using/windows.rst:351
msgid "The nuget.org packages"
msgstr "nuget.org パッケージ"

#: ../../using/windows.rst:355
msgid ""
"The nuget.org package is a reduced size Python environment intended for use "
"on continuous integration and build systems that do not have a system-wide "
"install of Python. While nuget is \"the package manager for .NET\", it also "
"works perfectly fine for packages containing build-time tools."
msgstr ""
"nuget.org パッケージはサイズを縮小した Python 環境で、システム全体で使える "
"Python が無い継続的インテグレーションやビルドシステムで使うことを意図していま"
"す。\n"
"nuget は \".NET のためのパッケージマネージャ\" ですが、ビルド時に使うツールを"
"含んだパッケージに対しても非常に上手く動作します。"

#: ../../using/windows.rst:360
msgid ""
"Visit `nuget.org <https://www.nuget.org/>`_ for the most up-to-date "
"information on using nuget. What follows is a summary that is sufficient for "
"Python developers."
msgstr ""
"nuget の使用方法についての最新の情報を得るには `nuget.org <https://www.nuget."
"org/>`_ に行ってください。\n"
"ここから先は Python 開発者にとって十分な要約です。"

#: ../../using/windows.rst:364
msgid ""
"The ``nuget.exe`` command line tool may be downloaded directly from "
"``https://aka.ms/nugetclidl``, for example, using curl or PowerShell. With "
"the tool, the latest version of Python for 64-bit or 32-bit machines is "
"installed using::"
msgstr ""
"``nuget.exe`` コマンドラインツールは、例えば curl や PowerShell を使って "
"``https://aka.ms/nugetclidl`` から直接ダウンロードできるでしょう。\n"
"このツールを次のように使って、 64 bit あるいは 32 bit のマシン向けの最新バー"
"ジョンの Python がインストールできます::"

#: ../../using/windows.rst:372
msgid ""
"To select a particular version, add a ``-Version 3.x.y``. The output "
"directory may be changed from ``.``, and the package will be installed into "
"a subdirectory. By default, the subdirectory is named the same as the "
"package, and without the ``-ExcludeVersion`` option this name will include "
"the specific version installed. Inside the subdirectory is a ``tools`` "
"directory that contains the Python installation::"
msgstr ""
"特定のバージョンを選択するには、 ``-Version 3.x.y`` を追加してください。\n"
"出力ディレクトリは ``.`` から変更されることがあり、パッケージはサブディレクト"
"リにインストールされます。\n"
"デフォルトではサブディレクトリはパッケージと同じ名前になり、 ``-"
"ExcludeVersion`` オプションを付けないとこの名前はインストールされたバージョン"
"を含みます。\n"
"サブディレクトリの中にはインストールされた Python を含んでいる ``tools`` ディ"
"レクトリがあります::"

#: ../../using/windows.rst:387
msgid ""
"In general, nuget packages are not upgradeable, and newer versions should be "
"installed side-by-side and referenced using the full path. Alternatively, "
"delete the package directory manually and install it again. Many CI systems "
"will do this automatically if they do not preserve files between builds."
msgstr ""
"一般的には、 nuget パッケージはアップグレードできず、より新しいバージョンは横"
"並びにインストールされ、フルパスで参照されます。\n"
"そうする代わりに、手動で直接パッケージを削除し、再度インストールすることもで"
"きます。\n"
"多くの CI システムは、ビルド間でファイルを保存しておかない場合、この作業を自"
"動的に行います。"

#: ../../using/windows.rst:392
msgid ""
"Alongside the ``tools`` directory is a ``build\\native`` directory. This "
"contains a MSBuild properties file ``python.props`` that can be used in a C+"
"+ project to reference the Python install. Including the settings will "
"automatically use the headers and import libraries in your build."
msgstr ""
"``tools`` ディレクトリと同じ場所に ``build\\native`` ディレクトリがありま"
"す。\n"
"このディレクトリは、インストールされた Python を参照する C++ プロジェクトで使"
"える MSBuild プロパティファイル ``python.props`` を含みます。\n"
"ここに設定を入れると自動的にヘッダを使い、ビルド時にライプラリをインポートし"
"ます。"

#: ../../using/windows.rst:397
msgid ""
"The package information pages on nuget.org are `www.nuget.org/packages/"
"python <https://www.nuget.org/packages/python>`_ for the 64-bit version and "
"`www.nuget.org/packages/pythonx86 <https://www.nuget.org/packages/"
"pythonx86>`_ for the 32-bit version."
msgstr ""
"nuget.org にあるパッケージ情報のページは、 64-bit バージョンが `www.nuget."
"org/packages/python <https://www.nuget.org/packages/python>`_ 、 32-bitバー"
"ジョンが `www.nuget.org/packages/pythonx86 <https://www.nuget.org/packages/"
"pythonx86>`_ です。"

#: ../../using/windows.rst:406
msgid "The embeddable package"
msgstr "埋め込み可能なパッケージ"

#: ../../using/windows.rst:410
msgid ""
"The embedded distribution is a ZIP file containing a minimal Python "
"environment. It is intended for acting as part of another application, "
"rather than being directly accessed by end-users."
msgstr ""
"埋め込み用の配布 (embedded distribution) は、最小限の Python 環境を含んだ "
"ZIP ファイルです。これは、エンドユーザから直接的にアクセスされるのではなく何"
"かアプリケーションの一部として動作することを意図したものです。"

#: ../../using/windows.rst:414
msgid ""
"When extracted, the embedded distribution is (almost) fully isolated from "
"the user's system, including environment variables, system registry "
"settings, and installed packages. The standard library is included as pre-"
"compiled and optimized ``.pyc`` files in a ZIP, and ``python3.dll``, "
"``python37.dll``, ``python.exe`` and ``pythonw.exe`` are all provided. Tcl/"
"tk (including all dependants, such as Idle), pip and the Python "
"documentation are not included."
msgstr ""
"展開されると、埋め込み用の配布は、環境変数、システムレジストリの設定、インス"
"トールされているパッケージといったユーザのシステムから (ほぼ) 完全に独立して"
"います。\n"
"ZIP 内には標準ライブラリがプリコンパイルにより最適化された ``.pyc`` として含"
"まれ、また、 ``python3.dll``, ``python37.dll``, ``python.exe``, ``pythonw."
"exe`` のすべてが入っています。(IDLE のようなすべての依存物を含む) Tcl/tk、"
"pip、Python ドキュメントは含まれていません。"

#: ../../using/windows.rst:423
msgid ""
"The embedded distribution does not include the `Microsoft C Runtime <https://"
"www.microsoft.com/en-us/download/details.aspx?id=48145>`_ and it is the "
"responsibility of the application installer to provide this. The runtime may "
"have already been installed on a user's system previously or automatically "
"via Windows Update, and can be detected by finding ``ucrtbase.dll`` in the "
"system directory."
msgstr ""
"埋め込み用配布には `Microsoft C Runtime <https://www.microsoft.com/en-us/"
"download/details.aspx?id=48145>`_ は含まれません。これを提供するのはアプリ"
"ケーションのインストーラの責務です。そのランタイムは既に以前にユーザのシステ"
"ムにインストール済みかもしれませんし、Windows Update により自動で更新されてい"
"るかもしれません。このことはシステムディレクトリに ``ucrtbase.dll`` があるか"
"探せばわかります。"

#: ../../using/windows.rst:430
msgid ""
"Third-party packages should be installed by the application installer "
"alongside the embedded distribution. Using pip to manage dependencies as for "
"a regular Python installation is not supported with this distribution, "
"though with some care it may be possible to include and use pip for "
"automatic updates. In general, third-party packages should be treated as "
"part of the application (\"vendoring\") so that the developer can ensure "
"compatibility with newer versions before providing updates to users."
msgstr ""
"サードパーティのパッケージはアプリケーションのインストーラによって、埋め込み"
"用配布と同じ場所にインストールされるべきです。通常の Python インストレーショ"
"ンのように依存性管理に pip を使うことは、この配布ではサポートされません。です"
"が、ちょっとした注意を払えば、自動更新のために pip を含めて利用することはでき"
"るかもしれません。一般的には、ユーザに更新を提供する前に開発者が新しいバー"
"ジョンとの互換性を保証できるよう、サードパーティーのパッケージはアプリケー"
"ションの一部として扱われるべきです (\"vendoring\")。"

#: ../../using/windows.rst:438
msgid ""
"The two recommended use cases for this distribution are described below."
msgstr "この配布の 2 つのお勧めできるユースケースを、以下で説明します。"

#: ../../using/windows.rst:441
msgid "Python Application"
msgstr "Python アプリケーション"

#: ../../using/windows.rst:443
msgid ""
"An application written in Python does not necessarily require users to be "
"aware of that fact. The embedded distribution may be used in this case to "
"include a private version of Python in an install package. Depending on how "
"transparent it should be (or conversely, how professional it should appear), "
"there are two options."
msgstr ""
"Python で記述された、必ずしもユーザにその事実を意識させる必要のないアプリケー"
"ションです。埋め込み用配布はこのケースで、インストールパッケージ内に Python "
"のプライベートバージョンを含めるのに使えるでしょう。その事実がどのように透過"
"的であるべきかに依存して (あるいは逆に、どのようにプロフェッショナルにみえる"
"べきか)、2 つの選択肢があります。"

#: ../../using/windows.rst:449
msgid ""
"Using a specialized executable as a launcher requires some coding, but "
"provides the most transparent experience for users. With a customized "
"launcher, there are no obvious indications that the program is running on "
"Python: icons can be customized, company and version information can be "
"specified, and file associations behave properly. In most cases, a custom "
"launcher should simply be able to call ``Py_Main`` with a hard-coded command "
"line."
msgstr ""
"ランチャとなる特別な実行ファイルを使うことはちょっとしたコーディングを必要と"
"しますが、ユーザにとっては最も透過的なユーザ体験となります。カスタマイズされ"
"たランチャでは、何もしなければ Python で実行されるプログラムの明白な目印はあ"
"りません; アイコンはカスタマイズし、会社名やバージョン情報を指定し、ファイル"
"の関連付けがそれに相応しく振舞うようにできます。ほとんどのケースではカスタム"
"ランチャは、ハードコードされたコマンドライン文字列で単純に ``Py_Main`` を呼び"
"出すので済むはずです。"

#: ../../using/windows.rst:456
msgid ""
"The simpler approach is to provide a batch file or generated shortcut that "
"directly calls the ``python.exe`` or ``pythonw.exe`` with the required "
"command-line arguments. In this case, the application will appear to be "
"Python and not its actual name, and users may have trouble distinguishing it "
"from other running Python processes or file associations."
msgstr ""
"より簡単なアプローチは、 ``python.exe`` または ``pythonw.exe`` を必要なコマン"
"ドライン引数とともに直接呼び出すバッチファイルかショートカットを提供すること"
"です。この場合、そのアプリケーションは実際の名前ではなく Python であるように"
"みえるので、ほかに動作している Python プロセスやファイルの関連付けと区別する"
"のにユーザが困るかもしれません。"

#: ../../using/windows.rst:462
msgid ""
"With the latter approach, packages should be installed as directories "
"alongside the Python executable to ensure they are available on the path. "
"With the specialized launcher, packages can be located in other locations as "
"there is an opportunity to specify the search path before launching the "
"application."
msgstr ""
"後者のアプローチではパッケージは、パス上で利用可能であることを保証するため"
"に、Python 実行ファイルと同じディレクトリにインストールされるべきです。特別な"
"ランチャの場合はアプリケーション起動前に検索パスを指定する機会があるので、"
"パッケージはほかの場所に配置できます。"

#: ../../using/windows.rst:468
msgid "Embedding Python"
msgstr "Python の埋め込み"

#: ../../using/windows.rst:470
msgid ""
"Applications written in native code often require some form of scripting "
"language, and the embedded Python distribution can be used for this purpose. "
"In general, the majority of the application is in native code, and some part "
"will either invoke ``python.exe`` or directly use ``python3.dll``. For "
"either case, extracting the embedded distribution to a subdirectory of the "
"application installation is sufficient to provide a loadable Python "
"interpreter."
msgstr ""
"ネイティブコードで書かれ、時々スクリプト言語のようなものを必要とするようなア"
"プリケーションです。Python 埋め込み用の配布はこの目的に使えます。一般的に、ア"
"プリケーションの大半がネイティブコード内にあり、一部が ``python.exe`` を呼び"
"出すか、直接的に ``python3.dll`` を使います。どちらのケースでも、ロード可能"
"な Python インタプリタを提供するのには、埋め込み用の配布を展開してアプリケー"
"ションのインストレーションのサブディレクトリに置くことで十分です。"

#: ../../using/windows.rst:477
msgid ""
"As with the application use, packages can be installed to any location as "
"there is an opportunity to specify search paths before initializing the "
"interpreter. Otherwise, there is no fundamental differences between using "
"the embedded distribution and a regular installation."
msgstr ""
"アプリケーションが使うパッケージは、インタプリタ初期化前に検索パスを指定する"
"機会があるので、任意の場所にインストールできます。また、埋め込み用配布を使う"
"のと通常の Python インストレーションを使うのとでの根本的な違いはありません。"

#: ../../using/windows.rst:484
msgid "Alternative bundles"
msgstr "別のバンドル"

#: ../../using/windows.rst:486
msgid ""
"Besides the standard CPython distribution, there are modified packages "
"including additional functionality.  The following is a list of popular "
"versions and their key features:"
msgstr ""
"標準の CPython の配布物の他に、追加の機能を持っている修正されたパッケージがあ"
"ります。以下は人気のあるバージョンとそのキーとなる機能です:"

#: ../../using/windows.rst:491
msgid "`ActivePython <https://www.activestate.com/activepython/>`_"
msgstr "`ActivePython <https://www.activestate.com/activepython/>`_"

#: ../../using/windows.rst:491
msgid "Installer with multi-platform compatibility, documentation, PyWin32"
msgstr "マルチプラットフォーム互換のインストーラー、ドキュメント、 PyWin32"

#: ../../using/windows.rst:495
msgid "`Anaconda <https://www.anaconda.com/download/>`_"
msgstr "`Anaconda <https://www.anaconda.com/download/>`_"

#: ../../using/windows.rst:494
msgid ""
"Popular scientific modules (such as numpy, scipy and pandas) and the "
"``conda`` package manager."
msgstr ""
"人気のある (numpy, scipy や pandas のような) 科学系モジュールと、パッケージマ"
"ネージャ ``conda`` 。"

#: ../../using/windows.rst:499
msgid "`Canopy <https://www.enthought.com/product/canopy/>`_"
msgstr "`Canopy <https://www.enthought.com/product/canopy/>`_"

#: ../../using/windows.rst:498
msgid ""
"A \"comprehensive Python analysis environment\" with editors and other "
"development tools."
msgstr ""
"「包括的な Python 解析環境 (comprehensive Python analysis environment)」で、"
"エディタとほかの開発ツールを含みます。"

#: ../../using/windows.rst:503
msgid "`WinPython <https://winpython.github.io/>`_"
msgstr "`WinPython <https://winpython.github.io/>`_"

#: ../../using/windows.rst:502
msgid ""
"Windows-specific distribution with prebuilt scientific packages and tools "
"for building packages."
msgstr ""
"ビルド済みの科学系パッケージと、パッケージのビルドのためのツールを含む、"
"Windows 固有のディストリビューション。"

#: ../../using/windows.rst:505
msgid ""
"Note that these packages may not include the latest versions of Python or "
"other libraries, and are not maintained or supported by the core Python team."
msgstr ""
"これらパッケージは Python や他のライブラリの最新バージョンが含まれるとは限り"
"ませんし、コア Python チームはこれらを保守もしませんしサポートもしませんので"
"ご理解ください。"

#: ../../using/windows.rst:511
msgid "Configuring Python"
msgstr "Python を構成する"

#: ../../using/windows.rst:513
msgid ""
"To run Python conveniently from a command prompt, you might consider "
"changing some default environment variables in Windows.  While the installer "
"provides an option to configure the PATH and PATHEXT variables for you, this "
"is only reliable for a single, system-wide installation.  If you regularly "
"use multiple versions of Python, consider using the :ref:`launcher`."
msgstr ""
"コマンドプロンプトより便利に Python を実行するために、Windows のデフォルトの"
"環境変数をいくつか変えたいと思うかもしれません。インストーラは :envvar:"
"`PATH` と :envvar:`PATHEXT` 変数を構成させるオプションを提供してはいますが、"
"これは単独のシステムワイドなインストレーションの場合にだけ頼りになるもので"
"す。もしもあなたが定常的に複数バージョンの Python を使うのであれば、 :ref:"
"`launcher` の利用を検討してください。"

#: ../../using/windows.rst:523
msgid "Excursus: Setting environment variables"
msgstr "補足: 環境変数の設定"

#: ../../using/windows.rst:525
msgid ""
"Windows allows environment variables to be configured permanently at both "
"the User level and the System level, or temporarily in a command prompt."
msgstr ""
"Windows では、環境変数を恒久的にユーザレベルとシステムレベルの両方で設定で"
"き、あるいはコマンドプロンプトから一時的にも設定できます。"

#: ../../using/windows.rst:528
msgid ""
"To temporarily set environment variables, open Command Prompt and use the :"
"command:`set` command:"
msgstr ""
"一時的に環境変数を設定するには、コマンドプロンプトを開き :command:`set` コマ"
"ンドを使います:"

#: ../../using/windows.rst:537
msgid ""
"These changes will apply to any further commands executed in that console, "
"and will be inherited by any applications started from the console."
msgstr ""
"これらの変更は、以降に実行される同じコンソール内で実行される任意のコマンドに"
"適用され、また、そのコンソールから開始するすべてのアプリケーションに引き継が"
"れます。"

#: ../../using/windows.rst:540
msgid ""
"Including the variable name within percent signs will expand to the existing "
"value, allowing you to add your new value at either the start or the end. "
"Modifying :envvar:`PATH` by adding the directory containing :program:`python."
"exe` to the start is a common way to ensure the correct version of Python is "
"launched."
msgstr ""
"パーセント記号で変数名を囲んだものは既存の変数の値で展開されるので、新しい値"
"を最初にも最後にも追加することができます。 :program:`python.exe` が入っている"
"ディレクトリを :envvar:`PATH` に追加することは、Python の適切なバージョンが起"
"動するように保証するための一般的な方法です。"

#: ../../using/windows.rst:546
msgid ""
"To permanently modify the default environment variables, click Start and "
"search for 'edit environment variables', or open System properties, :"
"guilabel:`Advanced system settings` and click the :guilabel:`Environment "
"Variables` button. In this dialog, you can add or modify User and System "
"variables. To change System variables, you need non-restricted access to "
"your machine (i.e. Administrator rights)."
msgstr ""
"デフォルトの環境変数を恒久的に変更するには、「スタート」をクリックして検索"
"ボックスで「環境変数を編集」を検索するか、(コンピュータのプロパティなどか"
"ら) :guilabel:`システムの詳細設定` を開いて :guilabel:`環境変数の設定` ボタン"
"をクリックしてください。これで立ち上がるダイアログで、ユーザ環境変数とシステ"
"ム環境変数を追加したり修正したりできます。システム変数を変更するにはあなたの"
"マシンへの制限のないアクセス (つまり管理者権限) が必要です。"

#: ../../using/windows.rst:555
msgid ""
"Windows will concatenate User variables *after* System variables, which may "
"cause unexpected results when modifying :envvar:`PATH`."
msgstr ""
"Windows はシステム変数の *後ろに* ユーザ変数を結合します。この振る舞いによ"
"り :envvar:`PATH` の修正時に期待とは異なる結果になることがあります。"

#: ../../using/windows.rst:558
msgid ""
"The :envvar:`PYTHONPATH` variable is used by all versions of Python 2 and "
"Python 3, so you should not permanently configure this variable unless it "
"only includes code that is compatible with all of your installed Python "
"versions."
msgstr ""
":envvar:`PYTHONPATH` 変数は Python 2 と Python 3 のすべてのバージョンで使われ"
"るので、インストールされているすべての Python バージョンで互換なコードだけを"
"使うのでない限り、この環境変数は恒久的な設定をすべきではありません。"

#: ../../using/windows.rst:566
msgid "https://www.microsoft.com/en-us/wdsi/help/folder-variables"
msgstr "https://www.microsoft.com/en-us/wdsi/help/folder-variables"

#: ../../using/windows.rst:566
msgid "Environment variables in Windows NT"
msgstr "Windows NT の環境変数"

#: ../../using/windows.rst:569
msgid "https://technet.microsoft.com/en-us/library/cc754250.aspx"
msgstr "https://technet.microsoft.com/en-us/library/cc754250.aspx"

#: ../../using/windows.rst:569
msgid "The SET command, for temporarily modifying environment variables"
msgstr "一時的に環境変数を変更するための SET コマンドについて。"

#: ../../using/windows.rst:572
msgid "https://technet.microsoft.com/en-us/library/cc755104.aspx"
msgstr "https://technet.microsoft.com/en-us/library/cc755104.aspx"

#: ../../using/windows.rst:572
msgid "The SETX command, for permanently modifying environment variables"
msgstr "恒久的に環境変数を変更するための SETX コマンドについて。"

#: ../../using/windows.rst:575
msgid ""
"https://support.microsoft.com/en-us/help/310519/how-to-manage-environment-"
"variables-in-windows-xp"
msgstr ""
"https://support.microsoft.com/en-us/help/310519/how-to-manage-environment-"
"variables-in-windows-xp"

#: ../../using/windows.rst:575
msgid "How To Manage Environment Variables in Windows XP"
msgstr "Windows XP での環境変数の管理方法"

#: ../../using/windows.rst:577
msgid "https://www.chem.gla.ac.uk/~louis/software/faq/q1.html"
msgstr "https://www.chem.gla.ac.uk/~louis/software/faq/q1.html"

#: ../../using/windows.rst:578
msgid "Setting Environment variables, Louis J. Farrugia"
msgstr "Louis J. Farrugia による、環境変数の設定についての説明。"

#: ../../using/windows.rst:583
msgid "Finding the Python executable"
msgstr "Python 実行ファイルを見つける"

#: ../../using/windows.rst:587
msgid ""
"Besides using the automatically created start menu entry for the Python "
"interpreter, you might want to start Python in the command prompt. The "
"installer has an option to set that up for you."
msgstr ""
"自動的に作成される Python インタープリタのスタートメニュー項目を使うだけでな"
"く、Python をコマンドプロンプトから起動したいと思うかもしれません。\n"
"インストーラにはそのための設定を行うオプションがあります。"

#: ../../using/windows.rst:591
msgid ""
"On the first page of the installer, an option labelled \"Add Python to "
"PATH\" may be selected to have the installer add the install location into "
"the :envvar:`PATH`.  The location of the :file:`Scripts\\\\` folder is also "
"added. This allows you to type :command:`python` to run the interpreter, "
"and :command:`pip` for the package installer. Thus, you can also execute "
"your scripts with command line options, see :ref:`using-on-cmdline` "
"documentation."
msgstr ""
"インストーラの最初のページに \"Add Python to PATH\" というラベルのオプション"
"があり、これを選択するとインストーラはインストール場所を環境変数 :envvar:"
"`PATH` に追加します。\n"
":file:`Scripts\\\\` フォルダの場所も追加されます。\n"
"これによりコマンドプロンプトから :command:`python` とタイプしてインタプリタを"
"起動したり、 :command:`pip` とタイプしてパッケージインストーラを起動したりで"
"きます。\n"
"コマンドラインからの起動なので、スクリプトをコマンドライン引数付きで起動する"
"こともできます。\n"
":ref:`using-on-cmdline` の文章を参照して下さい。"

#: ../../using/windows.rst:598
msgid ""
"If you don't enable this option at install time, you can always re-run the "
"installer, select Modify, and enable it.  Alternatively, you can manually "
"modify the :envvar:`PATH` using the directions in :ref:`setting-envvars`.  "
"You need to set your :envvar:`PATH` environment variable to include the "
"directory of your Python installation, delimited by a semicolon from other "
"entries.  An example variable could look like this (assuming the first two "
"entries already existed)::"
msgstr ""
"インストール時にこのオプションを有効にしていなかったとしても、インストーラを"
"再度実行して「Modify」を選んで、それを有効にし直せます。あるいはそうせずと"
"も、 :envvar:`PATH` 変数は手動で修正できます。 :ref:`setting-envvars` を参照"
"してください。環境変数 :envvar:`PATH` には Python インストールディレクトリを"
"含む必要があります。ほかのエントリとはセミコロンで区切って繋いでください。こ"
"れの実例は以下のようになります (以下最初の 2 つのエントリは既に存在しているも"
"のと仮定しています)::"

#: ../../using/windows.rst:611
msgid "UTF-8 mode"
msgstr "UTF-8 モード"

#: ../../using/windows.rst:615
msgid ""
"Windows still uses legacy encodings for the system encoding (the ANSI Code "
"Page).  Python uses it for the default encoding of text files (e.g. :func:"
"`locale.getpreferredencoding`)."
msgstr ""

#: ../../using/windows.rst:619
msgid ""
"This may cause issues because UTF-8 is widely used on the internet and most "
"Unix systems, including WSL (Windows Subsystem for Linux)."
msgstr ""

#: ../../using/windows.rst:622
msgid ""
"You can use UTF-8 mode to change the default text encoding to UTF-8. You can "
"enable UTF-8 mode via the ``-X utf8`` command line option, or the "
"``PYTHONUTF8=1`` environment variable.  See :envvar:`PYTHONUTF8` for "
"enabling UTF-8 mode, and :ref:`setting-envvars` for how to modify "
"environment variables."
msgstr ""

#: ../../using/windows.rst:628
msgid "When UTF-8 mode is enabled:"
msgstr ""

#: ../../using/windows.rst:630
msgid ""
":func:`locale.getpreferredencoding` returns ``'UTF-8'`` instead of the "
"system encoding.  This function is used for the default text encoding in "
"many places, including :func:`open`, :class:`Popen`, :meth:`Path.read_text`, "
"etc."
msgstr ""

#: ../../using/windows.rst:634
msgid ""
":data:`sys.stdin`, :data:`sys.stdout`, and :data:`sys.stderr` all use UTF-8 "
"as their text encoding."
msgstr ""

#: ../../using/windows.rst:636
msgid "You can still use the system encoding via the \"mbcs\" codec."
msgstr ""

#: ../../using/windows.rst:638
msgid ""
"Note that adding ``PYTHONUTF8=1`` to the default environment variables will "
"affect all Python 3.7+ applications on your system. If you have any Python "
"3.7+ applications which rely on the legacy system encoding, it is "
"recommended to set the environment variable temporarily or use the ``-X "
"utf8`` command line option."
msgstr ""

#: ../../using/windows.rst:645
msgid ""
"Even when UTF-8 mode is disabled, Python uses UTF-8 by default on Windows "
"for:"
msgstr ""

#: ../../using/windows.rst:648
msgid "Console I/O including standard I/O (see :pep:`528` for details)."
msgstr ""

#: ../../using/windows.rst:649
msgid "The filesystem encoding (see :pep:`529` for details)."
msgstr ""

#: ../../using/windows.rst:655
msgid "Python Launcher for Windows"
msgstr "Windows の Python ランチャ"

#: ../../using/windows.rst:659
msgid ""
"The Python launcher for Windows is a utility which aids in locating and "
"executing of different Python versions.  It allows scripts (or the command-"
"line) to indicate a preference for a specific Python version, and will "
"locate and execute that version."
msgstr ""
"Windows の Python ランチャは、異なる Python のバージョンの位置の特定と実行を"
"助けるユーティリティです。スクリプト (またはコマンドライン) で特定の Python "
"のバージョンの設定を与えられると、位置を特定し、そのバージョンを実行します。"

#: ../../using/windows.rst:664
msgid ""
"Unlike the :envvar:`PATH` variable, the launcher will correctly select the "
"most appropriate version of Python. It will prefer per-user installations "
"over system-wide ones, and orders by language version rather than using the "
"most recently installed version."
msgstr ""
"環境変数 :envvar:`PATH` による方法と違って、このランチャは Python の一番適切"
"なバージョンを、正しく選択します。このランチャはシステムワイドなものよりも"
"ユーザごとのインストレーションの方を優先し、また、新しくインストールされた順"
"よりも言語のバージョンを優先します。"

#: ../../using/windows.rst:669
msgid "The launcher was originally specified in :pep:`397`."
msgstr "ランチャのオリジナルの仕様は :pep:`397` にあります。"

#: ../../using/windows.rst:672
msgid "Getting started"
msgstr "最初に"

#: ../../using/windows.rst:675
msgid "From the command-line"
msgstr "コマンドラインから起動する"

#: ../../using/windows.rst:679
msgid ""
"System-wide installations of Python 3.3 and later will put the launcher on "
"your :envvar:`PATH`. The launcher is compatible with all available versions "
"of Python, so it does not matter which version is installed. To check that "
"the launcher is available, execute the following command in Command Prompt:"
msgstr ""
"Python 3.3 とそれ以降のシステムワイドなインストレーションでは、ランチャがあな"
"たの :envvar:`PATH` に追加されます。ランチャは、入手可能なあらゆる Python の"
"バージョンに互換であるため、実際にどのバージョンの Python がインストールされ"
"ているのかは重要ではありません。ランチャが使えるかを確認するには以下コマンド"
"をコマンドプロンプトより実行してください:"

#: ../../using/windows.rst:688
msgid ""
"You should find that the latest version of Python you have installed is "
"started - it can be exited as normal, and any additional command-line "
"arguments specified will be sent directly to Python."
msgstr ""
"インストールされている最新バージョンの Python が起動するはずです。\n"
"通常どおりに終了することもできますし、追加のコマンドライン引数を指定して直接 "
"Python に渡すこともできます。"

#: ../../using/windows.rst:692
msgid ""
"If you have multiple versions of Python installed (e.g., 2.7 and |version|) "
"you will have noticed that Python |version| was started - to launch Python "
"2.7, try the command:"
msgstr ""
"複数のバージョンの Python (たとえば 2.7 と |version|) がインストールされてい"
"る場合は、Python |version| が起動することになります。Python 2.7 を起動したい"
"なら、次のコマンドを実行してみてください:"

#: ../../using/windows.rst:700
msgid ""
"If you want the latest version of Python 2.x you have installed, try the "
"command:"
msgstr ""
"インストールしてある Python 2.x の最新バージョンを起動したい場合は、次のコマ"
"ンドを実行してみてください:"

#: ../../using/windows.rst:707
msgid "You should find the latest version of Python 2.x starts."
msgstr "最新バージョンの Python 2.x が起動するはずです。"

#: ../../using/windows.rst:709
msgid "If you see the following error, you do not have the launcher installed:"
msgstr ""
"以下のようなエラーが出るようであれば、ランチャはインストールされていません:"

#: ../../using/windows.rst:716
msgid ""
"Per-user installations of Python do not add the launcher to :envvar:`PATH` "
"unless the option was selected on installation."
msgstr ""
"ユーザごとの Python インストレーションでは、インストール時にオプションで指定"
"しない限り、ランチャは :envvar:`PATH`  に追加されません。"

#: ../../using/windows.rst:720
msgid "Virtual environments"
msgstr "仮想環境 (Virtual environments)"

#: ../../using/windows.rst:724
msgid ""
"If the launcher is run with no explicit Python version specification, and a "
"virtual environment (created with the standard library :mod:`venv` module or "
"the external ``virtualenv`` tool) active, the launcher will run the virtual "
"environment's interpreter rather than the global one.  To run the global "
"interpreter, either deactivate the virtual environment, or explicitly "
"specify the global Python version."
msgstr ""
"(標準ライブラリの :mod:`venv` モジュールか外部ツール ``virtualenv`` で作っ"
"た) 仮想環境がアクティブな状態で Python の明示的なバージョンを指定せずにラン"
"チャを起動すると、ランチャはグローバルなインタプリタではなくその仮想環境のも"
"のを実行します。グローバルなほうのインタプリタを実行するには、仮想環境の動作"
"を停止するか、または明示的にグローバルな Python バージョンを指定してくださ"
"い。"

#: ../../using/windows.rst:732
msgid "From a script"
msgstr "スクリプトから起動する"

#: ../../using/windows.rst:734
msgid ""
"Let's create a test Python script - create a file called ``hello.py`` with "
"the following contents"
msgstr ""
"テスト用の Python スクリプトを作成しましょう。``hello.py`` という名前で以下の"
"内容のファイルを作成してください"

#: ../../using/windows.rst:743
msgid "From the directory in which hello.py lives, execute the command:"
msgstr "hello.py が存在するディレクトリで、下記コマンドを実行してください:"

#: ../../using/windows.rst:749
msgid ""
"You should notice the version number of your latest Python 2.x installation "
"is printed.  Now try changing the first line to be:"
msgstr ""
"インストールされている最新の Python 2.x のバージョン番号が表示されるはずで"
"す。では、1行目を以下のように変更してみてください:"

#: ../../using/windows.rst:756
msgid ""
"Re-executing the command should now print the latest Python 3.x information. "
"As with the above command-line examples, you can specify a more explicit "
"version qualifier.  Assuming you have Python 2.6 installed, try changing the "
"first line to ``#! python2.6`` and you should find the 2.6 version "
"information printed."
msgstr ""
"コマンドを再実行すると、今度は最新の Python 3.x の情報が表示されるはずです。"
"これまでのコマンドラインの例と同様に、より細かいバージョン修飾子を指定するこ"
"ともできます。Python 2.6 がインストールされている場合、最初の行を ``#! "
"python2.6`` に変更すると、2.6 のバージョン情報が表示されるはずです。"

#: ../../using/windows.rst:762
msgid ""
"Note that unlike interactive use, a bare \"python\" will use the latest "
"version of Python 2.x that you have installed.  This is for backward "
"compatibility and for compatibility with Unix, where the command ``python`` "
"typically refers to Python 2."
msgstr ""
"コマンドからの呼び出しとは異なり、後ろに何もつかない \"python\" はインストー"
"ルされている Python2.x の最新バージョンを利用することに注意してください。これ"
"は後方互換性と、 ``python`` が一般的に Python 2 を指すUnix との互換性のためで"
"す。"

#: ../../using/windows.rst:768
msgid "From file associations"
msgstr "ファイルの関連付けから起動する"

#: ../../using/windows.rst:770
msgid ""
"The launcher should have been associated with Python files (i.e. ``.py``, ``."
"pyw``, ``.pyc`` files) when it was installed.  This means that when you "
"double-click on one of these files from Windows explorer the launcher will "
"be used, and therefore you can use the same facilities described above to "
"have the script specify the version which should be used."
msgstr ""
"インストール時に、ランチャは Python ファイル (すなわち ``.py``, ``.pyw``, ``."
"pyc`` ファイル) に関連付けられたはずです。そのため、これらのファイルを "
"Windows のエクスプローラーでダブルクリックした際はランチャが使われ、上で述べ"
"たのと同じ機能を使ってスクリプトが使われるべきバージョンを指定できるようにな"
"ります。"

#: ../../using/windows.rst:776
msgid ""
"The key benefit of this is that a single launcher can support multiple "
"Python versions at the same time depending on the contents of the first line."
msgstr ""
"このことによる重要な利点は、単一のランチャが先頭行の内容によって複数の "
"Python バージョンを同時にサポートできることです。"

#: ../../using/windows.rst:780
msgid "Shebang Lines"
msgstr "シェバン (shebang) 行"

#: ../../using/windows.rst:782
msgid ""
"If the first line of a script file starts with ``#!``, it is known as a "
"\"shebang\" line.  Linux and other Unix like operating systems have native "
"support for such lines and they are commonly used on such systems to "
"indicate how a script should be executed.  This launcher allows the same "
"facilities to be used with Python scripts on Windows and the examples above "
"demonstrate their use."
msgstr ""
"スクリプトファイルの先頭の行が ``#!`` で始まっている場合は、その行はシェバン "
"(shebang) 行として知られています。\n"
"Linux や他の Unix 系 OS はこうした行をもともとサポートしているため、それらの"
"システムでは、スクリプトがどのように実行されるかを示すために広く使われま"
"す。\n"
"Windows の Python ランチャは、Windows 上の Python スクリプトが同じ機能を使用"
"できるようにし、上の例ではそれらの機能の使用法を示しています。"

#: ../../using/windows.rst:789
msgid ""
"To allow shebang lines in Python scripts to be portable between Unix and "
"Windows, this launcher supports a number of 'virtual' commands to specify "
"which interpreter to use.  The supported virtual commands are:"
msgstr ""
"Python スクリプトのシェバン行を Unix-Windows 間で移植可能にするため、このラン"
"チャは、どのインタプリタが使われるかを指定するための大量の '仮想' コマンドを"
"サポートしています。サポートされる仮想コマンドには以下のものがあります:"

#: ../../using/windows.rst:793
msgid "``/usr/bin/env python``"
msgstr "``/usr/bin/env python``"

#: ../../using/windows.rst:794
msgid "``/usr/bin/python``"
msgstr "``/usr/bin/python``"

#: ../../using/windows.rst:795
msgid "``/usr/local/bin/python``"
msgstr "``/usr/local/bin/python``"

#: ../../using/windows.rst:796
msgid "``python``"
msgstr "``python``"

#: ../../using/windows.rst:798
msgid "For example, if the first line of your script starts with"
msgstr "具体的に、もしスクリプトの1行目が"

#: ../../using/windows.rst:804
msgid ""
"The default Python will be located and used.  As many Python scripts written "
"to work on Unix will already have this line, you should find these scripts "
"can be used by the launcher without modification.  If you are writing a new "
"script on Windows which you hope will be useful on Unix, you should use one "
"of the shebang lines starting with ``/usr``."
msgstr ""
"で始まっていたら、デフォルトの Python の位置が特定され、使用されます。多くの "
"Unix 上で動作する Python スクリプトにはすでにこの行が存在する傾向がありますの"
"で、ランチャによりそれらのスクリプトを修正なしで使うことができるはずです。あ"
"なたが新しいスクリプトを Windows 上で書いていて、Unix 上でも有用であってほし"
"いと思うなら、シェバン行のうち ``/usr`` で始まるものを使用すべきです。"

#: ../../using/windows.rst:810
msgid ""
"Any of the above virtual commands can be suffixed with an explicit version "
"(either just the major version, or the major and minor version). Furthermore "
"the 32-bit version can be requested by adding \"-32\" after the minor "
"version. I.e. ``/usr/bin/python2.7-32`` will request usage of the 32-bit "
"python 2.7."
msgstr ""
"上記のどの仮想コマンドでも、(メジャーバージョンだけや、メジャー・マイナーバー"
"ジョンの両方で) 明示的にバージョンを指定できます。\n"
"さらに、 \"-32\" をマイナーバージョンの後ろに追加して 32-bit 版を要求できま"
"す。\n"
"例えば、 ``/usr/bin/python2.7-32`` は 32-bit の python 2.7 を使うよう要求しま"
"す。"

#: ../../using/windows.rst:818
msgid ""
"Beginning with python launcher 3.7 it is possible to request 64-bit version "
"by the \"-64\" suffix. Furthermore it is possible to specify a major and "
"architecture without minor (i.e. ``/usr/bin/python3-64``)."
msgstr ""
"python ランチャの 3.7 からは、末尾に \"-64\" を付けて 64-bit 版を要求できま"
"す。\n"
"さらに、マイナーバージョン無しのメジャーバージョンとアーキテクチャだけ (例え"
"ば、 ``/usr/bin/python3-64``) で指定できます。"

#: ../../using/windows.rst:822
msgid ""
"The ``/usr/bin/env`` form of shebang line has one further special property. "
"Before looking for installed Python interpreters, this form will search the "
"executable :envvar:`PATH` for a Python executable. This corresponds to the "
"behaviour of the Unix ``env`` program, which performs a :envvar:`PATH` "
"search."
msgstr ""
"``/usr/bin/env`` 形式のシェバン行にはもう一つ更に特別な特性があります。インス"
"トールされている Python を探す前に、この形式は Python 実行ファイルを :envvar:"
"`PATH` から検索します。これは Unix の ``env`` プログラムに対応する振る舞い"
"で、これも :envvar:`PATH` からの検索をするものです。"

#: ../../using/windows.rst:828
msgid "Arguments in shebang lines"
msgstr "シェバン行の引数"

#: ../../using/windows.rst:830
msgid ""
"The shebang lines can also specify additional options to be passed to the "
"Python interpreter.  For example, if you have a shebang line:"
msgstr ""
"シェバン行では Python インタプリタに渡される追加の引数を指定することもできま"
"す。たとえば、シェバン行に以下のように書かれているとしましょう:"

#: ../../using/windows.rst:837
msgid "Then Python will be started with the ``-v`` option"
msgstr "この場合、Python は ``-v`` オプション付きで起動するでしょう"

#: ../../using/windows.rst:840
msgid "Customization"
msgstr "カスタマイズ"

#: ../../using/windows.rst:843
msgid "Customization via INI files"
msgstr "INI ファイルによるカスタマイズ"

#: ../../using/windows.rst:845
msgid ""
"Two .ini files will be searched by the launcher - ``py.ini`` in the current "
"user's \"application data\" directory (i.e. the directory returned by "
"calling the Windows function ``SHGetFolderPath`` with "
"``CSIDL_LOCAL_APPDATA``) and ``py.ini`` in the same directory as the "
"launcher. The same .ini files are used for both the 'console' version of the "
"launcher (i.e. py.exe) and for the 'windows' version (i.e. pyw.exe)."
msgstr ""
"ランチャは2つの .ini ファイルを探しに行きます。具体的には、現在のユーザーの "
"\"application data\" ディレクトリ (つまり、 Windows の関数 "
"``SHGetFolderPath`` に ``CSIDL_LOCAL_APPDATA`` を与えて呼ぶと返ってくるディレ"
"クトリ) の ``py.ini`` と、ランチャと同じディレクトリにある ``py.ini`` で"
"す。'コンソール' 版のランチャ (つまり py.exe) と 'Windows' 版のランチャ (つま"
"り pyw.exe) は同一の .ini ファイルを使用します。"

#: ../../using/windows.rst:852
msgid ""
"Customization specified in the \"application directory\" will have "
"precedence over the one next to the executable, so a user, who may not have "
"write access to the .ini file next to the launcher, can override commands in "
"that global .ini file."
msgstr ""
"\"application data\" ディレクトリで指定された設定は、実行ファイルの隣にあるも"
"のより優先されます。そのため、ランチャの隣にある .ini ファイルへの書き込みア"
"クセスができないユーザは、グローバルな .ini ファイル内のコマンドを上書き "
"(override) できます。"

#: ../../using/windows.rst:857
msgid "Customizing default Python versions"
msgstr "デフォルトのPythonバージョンのカスタマイズ"

#: ../../using/windows.rst:859
msgid ""
"In some cases, a version qualifier can be included in a command to dictate "
"which version of Python will be used by the command. A version qualifier "
"starts with a major version number and can optionally be followed by a "
"period ('.') and a minor version specifier. Furthermore it is possible to "
"specify if a 32 or 64 bit implementation shall be requested by adding "
"\"-32\" or \"-64\"."
msgstr ""
"どのバージョンの Python をコマンドで使用するかを定めるため、バージョン修飾子"
"がコマンドに含められることがあります。\n"
"バージョン修飾子はメジャーバージョン番号で始まり、オプションのピリオド ('.') "
"とマイナーバージョン指定子がそれに続きます。\n"
"さらに、 \"-32\" や \"-64\" を追記して 32-bit あるいは 64-bit のどちらの実装"
"が要求されるかを指示できます。"

#: ../../using/windows.rst:865
msgid ""
"For example, a shebang line of ``#!python`` has no version qualifier, while "
"``#!python3`` has a version qualifier which specifies only a major version."
msgstr ""
"たとえば、``#!python`` というシェバン行はバージョン修飾子を含みませんが、``#!"
"python3`` はメジャーバージョンを指定するバージョン修飾子を含みます。"

#: ../../using/windows.rst:868
msgid ""
"If no version qualifiers are found in a command, the environment variable :"
"envvar:`PY_PYTHON` can be set to specify the default version qualifier. If "
"it is not set, the default is \"3\". The variable can specify any value that "
"may be passed on the command line, such as \"3\", \"3.7\", \"3.7-32\" or "
"\"3.7-64\". (Note that the \"-64\" option is only available with the "
"launcher included with Python 3.7 or newer.)"
msgstr ""
"コマンドにバージョン修飾子が見つからない場合、環境変数 :envvar:`PY_PYTHON` を"
"設定して、デフォルトのバージョン修飾子を指定できます。\n"
"設定されていない場合、デフォルト値は \"3\" です。\n"
"この変数には \"3\", \"3.7\", \"3.7-32\", \"3.7-64\" のような任意の値をコマン"
"ドラインから指定できます。\n"
"(\"-64\" オプションは Python 3.7 以降のランチャでしか使えないことに注意してく"
"ださい。)"

#: ../../using/windows.rst:875
msgid ""
"If no minor version qualifiers are found, the environment variable "
"``PY_PYTHON{major}`` (where ``{major}`` is the current major version "
"qualifier as determined above) can be set to specify the full version. If no "
"such option is found, the launcher will enumerate the installed Python "
"versions and use the latest minor release found for the major version, which "
"is likely, although not guaranteed, to be the most recently installed "
"version in that family."
msgstr ""
"マイナーバージョン修飾子が見つからない場合、環境変数 ``PY_PYTHON{major}`` (こ"
"こで ``{major}`` は、上記で決定された現在のメジャーバージョン修飾子) を設定し"
"て完全なバージョンを指定することができます。そういったオプションが見つからな"
"ければ、ランチャはインストール済みの Python バージョンを列挙して、見つかった"
"そのメジャーバージョン向けマイナーリリースのうち最新のものを使用します。保証"
"されているわけではありませんが、通常はそのメジャーバージョン系で最も後にイン"
"ストールしたバージョンになります。"

#: ../../using/windows.rst:883
msgid ""
"On 64-bit Windows with both 32-bit and 64-bit implementations of the same "
"(major.minor) Python version installed, the 64-bit version will always be "
"preferred. This will be true for both 32-bit and 64-bit implementations of "
"the launcher - a 32-bit launcher will prefer to execute a 64-bit Python "
"installation of the specified version if available. This is so the behavior "
"of the launcher can be predicted knowing only what versions are installed on "
"the PC and without regard to the order in which they were installed (i.e., "
"without knowing whether a 32 or 64-bit version of Python and corresponding "
"launcher was installed last). As noted above, an optional \"-32\" or \"-64\" "
"suffix can be used on a version specifier to change this behaviour."
msgstr ""
"64-bit Windows で、同一の (major.minor) Python バージョンの 32-bit と 64-bit "
"の両方の実装がインストールされていた場合、64-bit バージョンのほうが常に優先さ"
"れます。これはランチャが 32-bit と 64-bit のどちらでも言えることで、32-bit の"
"ランチャは、指定されたバージョンが使用可能であれば、64-bit の Python を優先し"
"て実行します。これは、どのバージョンが PC にインストールされているかのみでラ"
"ンチャの挙動を予見でき、それらがインストールされた順番に関係なくなる (つまり"
"最後にインストールされた Python とランチャが 32-bit か 64-bit かを知らなくと"
"もよい) ようにするためです。上に記したとおり、オプションの \"-32\", \"-64\" "
"サフィックスでこの挙動を変更できます。"

#: ../../using/windows.rst:894
msgid "Examples:"
msgstr "例:"

#: ../../using/windows.rst:896
msgid ""
"If no relevant options are set, the commands ``python`` and ``python2`` will "
"use the latest Python 2.x version installed and the command ``python3`` will "
"use the latest Python 3.x installed."
msgstr ""
"関連するオプションが設定されていない場合、``python`` および ``python2`` コマ"
"ンドはインストールされている最新の Python 2.x バージョンを使用し、"
"``python3`` コマンドはインストールされている最新の Python 3.x を使用します。"

#: ../../using/windows.rst:900
msgid ""
"The commands ``python3.1`` and ``python2.7`` will not consult any options at "
"all as the versions are fully specified."
msgstr ""
"``python3.1`` および ``python2.7`` コマンドは、バージョンが完全に指定されてい"
"るため、全くオプションを参照しません。"

#: ../../using/windows.rst:903
msgid ""
"If ``PY_PYTHON=3``, the commands ``python`` and ``python3`` will both use "
"the latest installed Python 3 version."
msgstr ""
"``PY_PYTHON=3`` の場合、``python`` および ``python3`` コマンドはともにインス"
"トールされている最新の Python 3 を使用します。"

#: ../../using/windows.rst:906
msgid ""
"If ``PY_PYTHON=3.1-32``, the command ``python`` will use the 32-bit "
"implementation of 3.1 whereas the command ``python3`` will use the latest "
"installed Python (PY_PYTHON was not considered at all as a major version was "
"specified.)"
msgstr ""
"``PY_PYTHON=3.1-32`` の場合、``python`` コマンドは 32-bit 版の 3.1 を使用しま"
"すが、``python3`` コマンドはインストールされている最新の Python を使用します "
"(メジャーバージョンが指定されているため、PY_PYTHON は全く考慮されません。)"

#: ../../using/windows.rst:911
msgid ""
"If ``PY_PYTHON=3`` and ``PY_PYTHON3=3.1``, the commands ``python`` and "
"``python3`` will both use specifically 3.1"
msgstr ""
"``PY_PYTHON=3`` で ``PY_PYTHON3=3.1`` の場合、``python`` および ``python3`` "
"はどちらも 3.1 を使用します"

#: ../../using/windows.rst:914
msgid ""
"In addition to environment variables, the same settings can be configured in "
"the .INI file used by the launcher.  The section in the INI file is called "
"``[defaults]`` and the key name will be the same as the environment "
"variables without the leading ``PY_`` prefix (and note that the key names in "
"the INI file are case insensitive.)  The contents of an environment variable "
"will override things specified in the INI file."
msgstr ""
"環境変数に加え、同じ設定をランチャが使う INI ファイルで構成することができま"
"す。INI ファイルの該当するセクションは ``[defaults]`` と呼ばれ、キー名は環境"
"変数のキー名から ``PY_`` という接頭辞を取ったものと同じです (INI ファイルの"
"キー名は大文字小文字を区別しないことにご注意ください)。環境変数の内容は INI "
"ファイルでの指定を上書きします。"

#: ../../using/windows.rst:921
msgid "For example:"
msgstr "例えば:"

#: ../../using/windows.rst:923
msgid "Setting ``PY_PYTHON=3.1`` is equivalent to the INI file containing:"
msgstr ""
"``PY_PYTHON=3.1`` と設定することは、INI ファイルに下記が含まれることと等価で"
"す:"

#: ../../using/windows.rst:930
msgid ""
"Setting ``PY_PYTHON=3`` and ``PY_PYTHON3=3.1`` is equivalent to the INI file "
"containing:"
msgstr ""
"``PY_PYTHON=3`` と ``PY_PYTHON3=3.1`` を設定することは、INI ファイルに下記が"
"含まれることと等価です:"

#: ../../using/windows.rst:940
msgid "Diagnostics"
msgstr "診断"

#: ../../using/windows.rst:942
msgid ""
"If an environment variable ``PYLAUNCH_DEBUG`` is set (to any value), the "
"launcher will print diagnostic information to stderr (i.e. to the console). "
"While this information manages to be simultaneously verbose *and* terse, it "
"should allow you to see what versions of Python were located, why a "
"particular version was chosen and the exact command-line used to execute the "
"target Python."
msgstr ""
"環境変数 ``PYLAUNCH_DEBUG`` が設定されていたら、設定値が何であっても、ラン"
"チャは診断情報を stderr (つまりコンソール) に出力します。この情報のメッセージ"
"は詳細で *しかも* きついものですが、どういったバージョンの Python が検知され"
"たか、なぜ特定のバージョンが選択されたか、そして、対象の Python を実行するの"
"に使われた正確なコマンドラインを教えてくれます。"

#: ../../using/windows.rst:954
msgid "Finding modules"
msgstr "モジュールの検索"

#: ../../using/windows.rst:956
msgid ""
"Python usually stores its library (and thereby your site-packages folder) in "
"the installation directory.  So, if you had installed Python to :file:`C:\\"
"\\Python\\\\`, the default library would reside in :file:`C:\\\\Python\\"
"\\Lib\\\\` and third-party modules should be stored in :file:`C:\\\\Python\\"
"\\Lib\\\\site-packages\\\\`."
msgstr ""
"Python は通常そのライブラリ (と site-packages フォルダ) をインストールした"
"ディレクトリに格納します。そのため、 Python を :file:`C:\\\\Python\\\\` ディ"
"レクトリにインストールしたとすると、デフォルトのライブラリは :file:`C:\\"
"\\Python\\\\Lib\\\\` に存在し、サードパーティーのモジュールは :file:`C:\\"
"\\Python\\\\Lib\\\\site-packages\\\\` に格納することになります。"

#: ../../using/windows.rst:962
msgid ""
"To completely override :data:`sys.path`, create a ``._pth`` file with the "
"same name as the DLL (``python37._pth``) or the executable (``python._pth``) "
"and specify one line for each path to add to :data:`sys.path`. The file "
"based on the DLL name overrides the one based on the executable, which "
"allows paths to be restricted for any program loading the runtime if desired."
msgstr ""
":data:`sys.path` を完全に上書きするには、 DLL と同じ名前 (``python37._pth``) "
"か実行可能ファイル (``python._pth``) と同じ名前の ``._pth`` ファイルを作成"
"し、1行につき1つのパスを指定して :data:`sys.path` に追加されるようにしてくだ"
"さい。\n"
"DLL 名に基づいたファイルは実行可能ファイル名に基づいたファイルを上書きしま"
"す。これにより、望むならば、ランタイムを読み込むどんなプログラムもパスで制限"
"できます。"

#: ../../using/windows.rst:968
msgid ""
"When the file exists, all registry and environment variables are ignored, "
"isolated mode is enabled, and :mod:`site` is not imported unless one line in "
"the file specifies ``import site``. Blank paths and lines starting with "
"``#`` are ignored. Each path may be absolute or relative to the location of "
"the file. Import statements other than to ``site`` are not permitted, and "
"arbitrary code cannot be specified."
msgstr ""
"ファイルが存在したときは、全てのレジストリと環境変数は無視され、隔離モードに"
"なり、そのファイルに ``import site`` と指定していない限りは :mod:`site` がイ"
"ンポートできなくなります。\n"
"空行と ``#`` で始まる行は無視されます。\n"
"それぞれのパスはファイルの場所を指す絶対パスあるいは相対パスです。\n"
"``site`` 以外のインポート文は許可されておらず、任意のコードも書けません。"

#: ../../using/windows.rst:975
msgid ""
"Note that ``.pth`` files (without leading underscore) will be processed "
"normally by the :mod:`site` module when ``import site`` has been specified."
msgstr ""
"``import site`` を指定したときは、(アンダースコアが前に付かない) ``.pth`` "
"ファイルは :mod:`site` モジュールにより通常通り処理されることに注意してくださ"
"い。"

#: ../../using/windows.rst:978
msgid ""
"When no ``._pth`` file is found, this is how :data:`sys.path` is populated "
"on Windows:"
msgstr ""
"``._pth`` ファイルが見付かったときは、 Windows では :data:`sys.path` は次のよ"
"うに設定されます:"

#: ../../using/windows.rst:981
msgid ""
"An empty entry is added at the start, which corresponds to the current "
"directory."
msgstr ""
"最初に空のエントリが追加されます。これはカレントディレクトリを指しています。"

#: ../../using/windows.rst:984
msgid ""
"If the environment variable :envvar:`PYTHONPATH` exists, as described in :"
"ref:`using-on-envvars`, its entries are added next.  Note that on Windows, "
"paths in this variable must be separated by semicolons, to distinguish them "
"from the colon used in drive identifiers (``C:\\`` etc.)."
msgstr ""
"その次に、 :envvar:`PYTHONPATH` 環境変数が存在するとき、 :ref:`using-on-"
"envvars` で解説されているように追加されます。 Windows ではドライブ識別子 "
"(``C:\\`` など)と区別するために、この環境変数に含まれるパスの区切り文字はセミ"
"コロンでなければならない事に注意してください。"

#: ../../using/windows.rst:989
msgid ""
"Additional \"application paths\" can be added in the registry as subkeys of :"
"samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\\\{version}\\\\PythonPath` under "
"both the ``HKEY_CURRENT_USER`` and ``HKEY_LOCAL_MACHINE`` hives.  Subkeys "
"which have semicolon-delimited path strings as their default value will "
"cause each path to be added to :data:`sys.path`.  (Note that all known "
"installers only use HKLM, so HKCU is typically empty.)"
msgstr ""
"追加で \"アプリケーションのパス\" を ``HKEY_CURRENT_USER`` か "
"``HKEY_LOCAL_MACHINE`` の中の :samp:`\\\\SOFTWARE\\\\Python\\\\PythonCore\\"
"\\{version}\\\\PythonPath` のサブキーとして登録することができます。サブキーは"
"デフォルト値としてセミコロンで区切られたパス文字列を持つことができ、書くパス"
"が :data:`sys.path` に追加されます。 (既存のインストーラーはすべて HKLM しか"
"利用しないので、 HKCU は通常空です)"

#: ../../using/windows.rst:996
msgid ""
"If the environment variable :envvar:`PYTHONHOME` is set, it is assumed as "
"\"Python Home\".  Otherwise, the path of the main Python executable is used "
"to locate a \"landmark file\" (either ``Lib\\os.py`` or ``pythonXY.zip``) to "
"deduce the \"Python Home\".  If a Python home is found, the relevant sub-"
"directories added to :data:`sys.path` (``Lib``, ``plat-win``, etc) are based "
"on that folder.  Otherwise, the core Python path is constructed from the "
"PythonPath stored in the registry."
msgstr ""
":envvar:`PYTHONHOME` が設定されている場合、それが \"Python Home\" として扱わ"
"れます。\n"
"それ以外の場合、 \"Python Home\" を推定するために Python の実行ファイルのパス"
"から \"目印ファイル\" (``Lib\\os.py`` または ``pythonXY.zip``) が探されま"
"す。\n"
"Python home が見つかった場合、そこからいくつかのサブディレクトリ (``Lib``, "
"``plat-win`` など) が :data:`sys.path` に追加されます。\n"
"見つからなかった場合、コアとなる Python path はレジストリに登録された "
"PythonPath から構築されます。"

#: ../../using/windows.rst:1004
msgid ""
"If the Python Home cannot be located, no :envvar:`PYTHONPATH` is specified "
"in the environment, and no registry entries can be found, a default path "
"with relative entries is used (e.g. ``.\\Lib;.\\plat-win``, etc)."
msgstr ""
"Python Home が見つからず、環境変数 :envvar:`PYTHONPATH` が指定されず、レジス"
"トリエントリが見つからなかった場合、関連するデフォルトのパスが利用されます "
"(例: ``.\\Lib;.\\plat-win`` など)。"

#: ../../using/windows.rst:1008
msgid ""
"If a ``pyvenv.cfg`` file is found alongside the main executable or in the "
"directory one level above the executable, the following variations apply:"
msgstr ""
"メインの実行ファイルと同じ場所か一つ上のディレクトリに ``pyvenv.cfg`` がある"
"場合、以下の異なった規則が適用されます:"

#: ../../using/windows.rst:1011
msgid ""
"If ``home`` is an absolute path and :envvar:`PYTHONHOME` is not set, this "
"path is used instead of the path to the main executable when deducing the "
"home location."
msgstr ""
":envvar:`PYTHONHOME` が設定されておらず、 ``home`` が絶対パスの場合、home 推"
"定の際メインの実行ファイルから推定するのではなくこのパスを使います。"

#: ../../using/windows.rst:1015
msgid "The end result of all this is:"
msgstr "結果としてこうなります:"

#: ../../using/windows.rst:1017
msgid ""
"When running :file:`python.exe`, or any other .exe in the main Python "
"directory (either an installed version, or directly from the PCbuild "
"directory), the core path is deduced, and the core paths in the registry are "
"ignored.  Other \"application paths\" in the registry are always read."
msgstr ""
":file:`python.exe` かそれ以外の Python ディレクトリにある .exe ファイルを実行"
"したとき (インストールされている場合でも PCbuild から直接実行されている場合で"
"も) core path が利用され、レジストリ内の core path は無視されます。それ以外の"
"レジストリの \"application paths\" は常に読み込まれます。"

#: ../../using/windows.rst:1022
msgid ""
"When Python is hosted in another .exe (different directory, embedded via "
"COM, etc), the \"Python Home\" will not be deduced, so the core path from "
"the registry is used.  Other \"application paths\" in the registry are "
"always read."
msgstr ""
"Python が他の .exe ファイル (他のディレクトリに存在する場合や、COM経由で組み"
"込まれる場合など) にホストされている場合は、 \"Python Home\" は推定されず、レ"
"ジストリにある core path が利用されます。それ以外のレジストリの "
"\"application paths\" は常に読み込まれます。"

#: ../../using/windows.rst:1026
msgid ""
"If Python can't find its home and there are no registry value (frozen .exe, "
"some very strange installation setup) you get a path with some default, but "
"relative, paths."
msgstr ""
"Python がその home を見つけられず、レジストリの値もない場合 (これはいくつかの"
"とてもおかしなインストレーションセットアップの凍結された .exe)、パスは最小限"
"のデフォルトとして相対パスが使われます。"

#: ../../using/windows.rst:1030
msgid ""
"For those who want to bundle Python into their application or distribution, "
"the following advice will prevent conflicts with other installations:"
msgstr ""
"自身のアプリケーションや配布物に Python をバンドルしたい場合には、以下の助言 "
"(のいずれかまたは組合せ) によりほかのインストレーションとの衝突を避けることが"
"できます:"

#: ../../using/windows.rst:1033
msgid ""
"Include a ``._pth`` file alongside your executable containing the "
"directories to include. This will ignore paths listed in the registry and "
"environment variables, and also ignore :mod:`site` unless ``import site`` is "
"listed."
msgstr ""

#: ../../using/windows.rst:1038
msgid ""
"If you are loading :file:`python3.dll` or :file:`python37.dll` in your own "
"executable, explicitly call :c:func:`Py_SetPath` or (at least) :c:func:"
"`Py_SetProgramName` before :c:func:`Py_Initialize`."
msgstr ""
":file:`python3.dll` や :file:`python37.dll` を自身の実行ファイルからロードす"
"るのであれば、 :c:func:`Py_Initialize` 呼び出しに先立って、 :c:func:"
"`Py_SetPath` か (最低でも) :c:func:`Py_SetProgramName` を明示的に呼び出してく"
"ださい。"

#: ../../using/windows.rst:1042
msgid ""
"Clear and/or overwrite :envvar:`PYTHONPATH` and set :envvar:`PYTHONHOME` "
"before launching :file:`python.exe` from your application."
msgstr ""
"自身のアプリケーションから :file:`python.exe` を起動する前に、 :envvar:"
"`PYTHONPATH` をクリアしたり上書きし、 :envvar:`PYTHONHOME` をセットしてくださ"
"い。"

#: ../../using/windows.rst:1045
msgid ""
"If you cannot use the previous suggestions (for example, you are a "
"distribution that allows people to run :file:`python.exe` directly), ensure "
"that the landmark file (:file:`Lib\\\\os.py`) exists in your install "
"directory. (Note that it will not be detected inside a ZIP file, but a "
"correctly named ZIP file will be detected instead.)"
msgstr ""

#: ../../using/windows.rst:1051
msgid ""
"These will ensure that the files in a system-wide installation will not take "
"precedence over the copy of the standard library bundled with your "
"application. Otherwise, your users may experience problems using your "
"application. Note that the first suggestion is the best, as the others may "
"still be susceptible to non-standard paths in the registry and user site-"
"packages."
msgstr ""
"これらはシステムワイドにインストールされたファイルが、あなたのアプリケーショ"
"ンにバンドルされた標準ライブラリのコピーに優先しないようにします。これをしな"
"ければあなたのアプリケーションのユーザは、何かしら問題を抱えるかもしれませ"
"ん。上で列挙した最初の提案が最善です。ほかのものはレジストリ内の非標準のパス"
"やユーザの site-packages の影響を少し受けやすいからです。"

#: ../../using/windows.rst:1060
msgid ""
"Adds ``._pth`` file support and removes ``applocal`` option from ``pyvenv."
"cfg``."
msgstr ""

#: ../../using/windows.rst:1062
msgid ""
"Adds ``pythonXX.zip`` as a potential landmark when directly adjacent to the "
"executable."
msgstr ""

#: ../../using/windows.rst:1068
msgid ""
"Modules specified in the registry under ``Modules`` (not ``PythonPath``) may "
"be imported by :class:`importlib.machinery.WindowsRegistryFinder`. This "
"finder is enabled on Windows in 3.6.0 and earlier, but may need to be "
"explicitly added to :attr:`sys.meta_path` in the future."
msgstr ""

#: ../../using/windows.rst:1074
msgid "Additional modules"
msgstr "追加のモジュール"

#: ../../using/windows.rst:1076
msgid ""
"Even though Python aims to be portable among all platforms, there are "
"features that are unique to Windows.  A couple of modules, both in the "
"standard library and external, and snippets exist to use these features."
msgstr ""
"Python は全プラットフォーム互換を目指していますが、 Windows にしかないユニー"
"クな機能もあります。標準ライブラリと外部のライブラリの両方で、幾つかのモ"
"ジュールと、そういった機能を使うためのスニペットがあります。"

#: ../../using/windows.rst:1080
msgid ""
"The Windows-specific standard modules are documented in :ref:`mswin-specific-"
"services`."
msgstr ""
"Windows 固有の標準モジュールは、 :ref:`mswin-specific-services` に書かれてい"
"ます。"

#: ../../using/windows.rst:1084
msgid "PyWin32"
msgstr "PyWin32"

#: ../../using/windows.rst:1086
msgid ""
"The `PyWin32 <https://pypi.org/project/pywin32>`_ module by Mark Hammond is "
"a collection of modules for advanced Windows-specific support.  This "
"includes utilities for:"
msgstr ""
"Mark Hammond によって開発された `PyWin32 <https://pypi.org/project/"
"pywin32>`_ モジュールは、進んだ Windows 専用のサポートをするモジュール群で"
"す。このモジュールは以下のユーティリティを含んでいます:"

#: ../../using/windows.rst:1090
msgid ""
"`Component Object Model <https://docs.microsoft.com/en-us/windows/desktop/"
"com/component-object-model--com--portal>`_ (COM)"
msgstr ""

#: ../../using/windows.rst:1093
msgid "Win32 API calls"
msgstr "Win32 API 呼び出し"

#: ../../using/windows.rst:1094
msgid "Registry"
msgstr "レジストリ"

#: ../../using/windows.rst:1095
msgid "Event log"
msgstr "イベントログ"

#: ../../using/windows.rst:1096
msgid ""
"`Microsoft Foundation Classes <https://msdn.microsoft.com/en-us/library/"
"fe1cf721%28VS.80%29.aspx>`_ (MFC) user interfaces"
msgstr ""
"`Microsoft Foundation Classes <https://msdn.microsoft.com/en-us/library/"
"fe1cf721%28VS.80%29.aspx>`_ (MFC) ユーザーインターフェイス"

#: ../../using/windows.rst:1099
msgid ""
"`PythonWin <https://web.archive.org/web/20060524042422/ https://www.python."
"org/windows/pythonwin/>`_ is a sample MFC application shipped with PyWin32.  "
"It is an embeddable IDE with a built-in debugger."
msgstr ""
"`PythonWin <https://web.archive.org/web/20060524042422/ https://www.python."
"org/windows/pythonwin/>`_ は PyWin32 に付属している、サンプルのMFCアプリケー"
"ションです。これはビルトインのデバッガを含む、組み込み可能なIDEです。"

#: ../../using/windows.rst:1106
msgid ""
"`Win32 How Do I...? <http://timgolden.me.uk/python/win32_how_do_i.html>`_"
msgstr ""
"`Win32 How Do I...? <http://timgolden.me.uk/python/win32_how_do_i.html>`_"

#: ../../using/windows.rst:1106
msgid "by Tim Golden"
msgstr "by Tim Golden"

#: ../../using/windows.rst:1108
msgid "`Python and COM <http://www.boddie.org.uk/python/COM.html>`_"
msgstr "`Python and COM <http://www.boddie.org.uk/python/COM.html>`_"

#: ../../using/windows.rst:1109
msgid "by David and Paul Boddie"
msgstr "by David and Paul Boddie"

#: ../../using/windows.rst:1113
msgid "cx_Freeze"
msgstr "cx_Freeze"

#: ../../using/windows.rst:1115
msgid ""
"`cx_Freeze <https://cx-freeze.readthedocs.io/en/latest/>`_ is a :mod:"
"`distutils` extension (see :ref:`extending-distutils`) which wraps Python "
"scripts into executable Windows programs (:file:`{*}.exe` files).  When you "
"have done this, you can distribute your application without requiring your "
"users to install Python."
msgstr ""

#: ../../using/windows.rst:1123
msgid "WConio"
msgstr "WConio"

#: ../../using/windows.rst:1125
msgid ""
"Since Python's advanced terminal handling layer, :mod:`curses`, is "
"restricted to Unix-like systems, there is a library exclusive to Windows as "
"well: Windows Console I/O for Python."
msgstr ""
"Python の進んだターミナル制御レイヤである :mod:`curses` は、 Unix ライクシス"
"テムでしか使うことができません。逆に Windows 専用のライブラリ、 Windows "
"Console I/O for Python があります。"

#: ../../using/windows.rst:1129
msgid ""
"`WConio <http://newcenturycomputers.net/projects/wconio.html>`_ is a wrapper "
"for Turbo-C's :file:`CONIO.H`, used to create text user interfaces."
msgstr ""
"`WConio <http://newcenturycomputers.net/projects/wconio.html>`_ は Turbo-C "
"の :file:`CONIO.H` のラッパーで、テキストユーザーインターフェースを作成するた"
"めに利用することができます。"

#: ../../using/windows.rst:1135
msgid "Compiling Python on Windows"
msgstr "Windows 上で Python をコンパイルする"

#: ../../using/windows.rst:1137
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `checkout <https://"
"devguide.python.org/setup/#getting-the-source-code>`_."
msgstr ""
"CPython を自分でコンパイルしたい場合、最初にすべきことは `ソース <https://"
"www.python.org/downloads/source/>`_ を取得することです。最新リリース版のソー"
"スか、新しい `チェックアウト <https://devguide.python.org/setup/#getting-the-"
"source-code>`_ をダウンロードできます。"

#: ../../using/windows.rst:1142
msgid ""
"The source tree contains a build solution and project files for Microsoft "
"Visual Studio 2015, which is the compiler used to build the official Python "
"releases. These files are in the :file:`PCbuild` directory."
msgstr ""
"ソースツリーには Microsoft Visual Studio 2015 でのビルドのソリューションファ"
"イルとプロジェクトファイルが含まれていて、これが公式の Python リリースに使わ"
"れているコンパイラです。これらファイルは :file:`PCbuild` ディレクトリ内にあり"
"ます。"

#: ../../using/windows.rst:1146
msgid ""
"Check :file:`PCbuild/readme.txt` for general information on the build "
"process."
msgstr ""
"ビルドプロセスについての一般的な情報は、:file:`PCbuild/readme.txt` にありま"
"す。"

#: ../../using/windows.rst:1149
msgid "For extension modules, consult :ref:`building-on-windows`."
msgstr ""
"拡張モジュールについては、 :ref:`building-on-windows` を参照してください。"

#: ../../using/windows.rst:1155
msgid ""
"`Python + Windows + distutils + SWIG + gcc MinGW <http://sebsauvage.net/"
"python/mingw.html>`_"
msgstr ""
"`Python + Windows + distutils + SWIG + gcc MinGW <http://sebsauvage.net/"
"python/mingw.html>`_"

#: ../../using/windows.rst:1154
msgid ""
"or \"Creating Python extensions in C/C++ with SWIG and compiling them with "
"MinGW gcc under Windows\" or \"Installing Python extension with distutils "
"and without Microsoft Visual C++\" by Sébastien Sauvage, 2003"
msgstr ""
"or \"Creating Python extensions in C/C++ with SWIG and compiling them with "
"MinGW gcc under Windows\" or \"Installing Python extension with distutils "
"and without Microsoft Visual C++\" by Sébastien Sauvage, 2003"

#: ../../using/windows.rst:1160
msgid "Other Platforms"
msgstr "ほかのプラットフォーム"

#: ../../using/windows.rst:1162
msgid ""
"With ongoing development of Python, some platforms that used to be supported "
"earlier are no longer supported (due to the lack of users or developers). "
"Check :pep:`11` for details on all unsupported platforms."
msgstr ""
"Python の継続的な開発の中で、過去にサポートされていた幾つかのプラットフォーム"
"が (ユーザーや開発者の不足のために) サポートされなくなっています。すべてのサ"
"ポートされないプラットフォームについての詳細は :pep:`11` をチェックしてくださ"
"い。"

#: ../../using/windows.rst:1166
msgid "`Windows CE <http://pythonce.sourceforge.net/>`_ is still supported."
msgstr ""
"`Windows CE <http://pythonce.sourceforge.net/>`_ は今でもサポートされていま"
"す。"

#: ../../using/windows.rst:1167
msgid ""
"The `Cygwin <https://cygwin.com/>`_ installer offers to install the Python "
"interpreter as well (cf. `Cygwin package source <ftp://ftp.uni-erlangen.de/"
"pub/pc/gnuwin32/cygwin/mirrors/cygnus/ release/python>`_, `Maintainer "
"releases <http://www.tishler.net/jason/software/python/>`_)"
msgstr ""
"`Cygwin <https://cygwin.com/>`_ インストーラも Python インタープリタのインス"
"トールを提供しています。(cf. `Cygwin package source <ftp://ftp.uni-erlangen."
"de/pub/pc/gnuwin32/cygwin/mirrors/cygnus/ release/python>`_, `Maintainer "
"releases <http://www.tishler.net/jason/software/python/>`_)"

#: ../../using/windows.rst:1173
msgid ""
"See `Python for Windows <https://www.python.org/downloads/windows/>`_ for "
"detailed information about platforms with pre-compiled installers."
msgstr ""
"コンパイル済みインストーラが提供されているプラットフォームについての詳細な情"
"報は `Python for Windows <https://www.python.org/downloads/windows/>`_ を参照"
"してください。"
