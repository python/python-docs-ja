# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../using/unix.rst:7
msgid "Using Python on Unix platforms"
msgstr "Unix プラットフォームで Python を使う"

#: ../../using/unix.rst:13
msgid "Getting and installing the latest version of Python"
msgstr "最新バージョンの Python の取得とインストール"

#: ../../using/unix.rst:16
msgid "On Linux"
msgstr "Linux"

#: ../../using/unix.rst:18
msgid ""
"Python comes preinstalled on most Linux distributions, and is available as a "
"package on all others.  However there are certain features you might want to "
"use that are not available on your distro's package.  You can easily compile "
"the latest version of Python from source."
msgstr ""
"ほとんどの Linux ディストリビューションでは Python はプリインストールされてお"
"り、それ以外でもパッケージとして利用可能です。しかし、ディストリビューション"
"のパッケージでは利用したい機能が使えない場合があります。最新版の Python を"
"ソースから簡単にコンパイルすることができます。"

#: ../../using/unix.rst:23
msgid ""
"In the event that Python doesn't come preinstalled and isn't in the "
"repositories as well, you can easily make packages for your own distro.  "
"Have a look at the following links:"
msgstr ""
"Python がプリインストールされておらず、リポジトリにも無い場合、ディストリ"
"ビューション用のパッケージを簡単につくることができます。以下のリンクを参照し"
"てください:"

#: ../../using/unix.rst:29
msgid "https://www.debian.org/doc/manuals/maint-guide/first.en.html"
msgstr "https://www.debian.org/doc/manuals/maint-guide/first.en.html"

#: ../../using/unix.rst:30
msgid "for Debian users"
msgstr "Debian ユーザー向け"

#: ../../using/unix.rst:31
msgid "https://en.opensuse.org/Portal:Packaging"
msgstr "https://en.opensuse.org/Portal:Packaging"

#: ../../using/unix.rst:32
msgid "for OpenSuse users"
msgstr "OpenSuse ユーザー向け"

#: ../../using/unix.rst:33
msgid ""
"https://docs-old.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/"
"RPM_Guide/ch-creating-rpms.html"
msgstr ""
"https://docs-old.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/"
"RPM_Guide/ch-creating-rpms.html"

#: ../../using/unix.rst:34
msgid "for Fedora users"
msgstr "Fedora ユーザー向け"

#: ../../using/unix.rst:35
msgid "http://www.slackbook.org/html/package-management-making-packages.html"
msgstr "http://www.slackbook.org/html/package-management-making-packages.html"

#: ../../using/unix.rst:36
msgid "for Slackware users"
msgstr "Slackware ユーザー向け"

#: ../../using/unix.rst:40
msgid "On FreeBSD and OpenBSD"
msgstr "FreeBSD と OpenBSD"

#: ../../using/unix.rst:42
msgid "FreeBSD users, to add the package use::"
msgstr ""
"FreeBSD ユーザーが Python パッケージを追加するには次のようにしてください::"

#: ../../using/unix.rst:46
msgid "OpenBSD users, to add the package use::"
msgstr ""
"OpenBSD ユーザーが Python パッケージを追加するには次のようにしてください::"

#: ../../using/unix.rst:52
msgid "For example i386 users get the 2.5.1 version of Python using::"
msgstr "例えば、i386 ユーザーが Python 2.5.1 を取得するには次のようにします::"

#: ../../using/unix.rst:58
msgid "On OpenSolaris"
msgstr "OpenSolaris"

#: ../../using/unix.rst:60
msgid ""
"You can get Python from `OpenCSW <https://www.opencsw.org/>`_.  Various "
"versions of Python are available and can be installed with e.g. ``pkgutil -i "
"python27``."
msgstr ""
"`OpenCSW <https://www.opencsw.org/>`_ から Python を入手することができます。 "
"Python の様々なバージョンが利用可能でインストールすることができます。e.g. "
"``pkgutil -i python27``."

#: ../../using/unix.rst:67
msgid "Building Python"
msgstr "Python のビルド"

#: ../../using/unix.rst:69
msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `clone <https://"
"devguide.python.org/setup/#get-the-source-code>`_.  (If you want to "
"contribute patches, you will need a clone.)"
msgstr ""

#: ../../using/unix.rst:75
msgid "The build process consists of the usual commands::"
msgstr "ビルド手順は通常のコマンドで行います ::"

#: ../../using/unix.rst:81
msgid ""
":ref:`Configuration options <configure-options>` and caveats for specific "
"Unix platforms are extensively documented in the :source:`README.rst` file "
"in the root of the Python source tree."
msgstr ""

#: ../../using/unix.rst:87
msgid ""
"``make install`` can overwrite or masquerade the :file:`python3` binary. "
"``make altinstall`` is therefore recommended instead of ``make install`` "
"since it only installs :file:`{exec_prefix}/bin/python{version}`."
msgstr ""
"``make install`` は :file:`python3` バイナリを上書きまたはリンクを破壊してし"
"まうかもしれません。そのため、``make install`` の代わりに :file:"
"`{exec_prefix}/bin/python{version}` のみインストールする ``make altinstall`` "
"が推奨されています。"

#: ../../using/unix.rst:93
msgid "Python-related paths and files"
msgstr "Python に関係するパスとファイル"

#: ../../using/unix.rst:95
msgid ""
"These are subject to difference depending on local installation "
"conventions; :envvar:`prefix` (``${prefix}``) and :envvar:`exec_prefix` "
"(``${exec_prefix}``) are installation-dependent and should be interpreted as "
"for GNU software; they may be the same."
msgstr ""
"これらはローカルインストールの慣例に応じて変化します; :envvar:`prefix` "
"(``${prefix}``) と :envvar:`exec_prefix` (``${exec_prefix}``) はインストール"
"状況に依存していて、GNU ソフトウェアによって解釈されます; この二つは同じであ"
"る場合があります。"

#: ../../using/unix.rst:100
msgid ""
"For example, on most Linux systems, the default for both is :file:`/usr`."
msgstr ""
"例えば、ほとんどの Linux システムでは、両方のデフォルトが :file:`/usr` です。"

#: ../../using/unix.rst:103
msgid "File/directory"
msgstr "ファイル/ディレクトリ"

#: ../../using/unix.rst:103
msgid "Meaning"
msgstr "意味"

#: ../../using/unix.rst:105
msgid ":file:`{exec_prefix}/bin/python3`"
msgstr ":file:`{exec_prefix}/bin/python3`"

#: ../../using/unix.rst:105
msgid "Recommended location of the interpreter."
msgstr "インタプリタの推奨される場所"

#: ../../using/unix.rst:107
msgid ""
":file:`{prefix}/lib/python{version}`, :file:`{exec_prefix}/lib/"
"python{version}`"
msgstr ""
":file:`{prefix}/lib/python{version}`, :file:`{exec_prefix}/lib/"
"python{version}`"

#: ../../using/unix.rst:107
msgid ""
"Recommended locations of the directories containing the standard modules."
msgstr "標準モジュールを格納するディレクトリの、推奨される場所。"

#: ../../using/unix.rst:110
msgid ""
":file:`{prefix}/include/python{version}`, :file:`{exec_prefix}/include/"
"python{version}`"
msgstr ""
":file:`{prefix}/include/python{version}`, :file:`{exec_prefix}/include/"
"python{version}`"

#: ../../using/unix.rst:110
msgid ""
"Recommended locations of the directories containing the include files needed "
"for developing Python extensions and embedding the interpreter."
msgstr ""
"Python 拡張や Python の埋込みに必要となる include ファイルを格納するディレク"
"トリの推奨される場所。"

#: ../../using/unix.rst:118
msgid "Miscellaneous"
msgstr "その他"

#: ../../using/unix.rst:120
msgid ""
"To easily use Python scripts on Unix, you need to make them executable, e.g. "
"with"
msgstr ""
"Python スクリプトを Unix で簡単に使うためには、例えば次のようにしてスクリプト"
"を実行可能ファイルにし、"

#: ../../using/unix.rst:127
msgid ""
"and put an appropriate Shebang line at the top of the script.  A good choice "
"is usually ::"
msgstr ""
"適切な shebang 行をスクリプトの先頭に置きます。たいていの場合良い方法は ::"

#: ../../using/unix.rst:132
msgid ""
"which searches for the Python interpreter in the whole :envvar:`PATH`.  "
"However, some Unices may not have the :program:`env` command, so you may "
"need to hardcode ``/usr/bin/python3`` as the interpreter path."
msgstr ""
"で、:envvar:`PATH` 全体から Python インタープリターを探します。しかし、いくつ"
"かの Unix は :program:`env` コマンドを持たないので、インタープリターのパスを "
"``/usr/bin/python3`` のようにハードコードしなければならないかもしれません。"

#: ../../using/unix.rst:136
msgid ""
"To use shell commands in your Python scripts, look at the :mod:`subprocess` "
"module."
msgstr ""
"シェルコマンドを Python スクリプトから使うには、 :mod:`subprocess` モジュール"
"を参照してください。"

#: ../../using/unix.rst:141
msgid "Custom OpenSSL"
msgstr ""

#: ../../using/unix.rst:143
msgid ""
"To use your vendor's OpenSSL configuration and system trust store, locate "
"the directory with ``openssl.cnf`` file or symlink in ``/etc``. On most "
"distribution the file is either in ``/etc/ssl`` or ``/etc/pki/tls``. The "
"directory should also contain a ``cert.pem`` file and/or a ``certs`` "
"directory."
msgstr ""

#: ../../using/unix.rst:154
msgid ""
"Download, build, and install OpenSSL. Make sure you use ``install_sw`` and "
"not ``install``. The ``install_sw`` target does not override ``openssl.cnf``."
msgstr ""

#: ../../using/unix.rst:172
msgid ""
"Build Python with custom OpenSSL (see the configure ``--with-openssl`` and "
"``--with-openssl-rpath`` options)"
msgstr ""

#: ../../using/unix.rst:187
msgid ""
"Patch releases of OpenSSL have a backwards compatible ABI. You don't need to "
"recompile Python to update OpenSSL. It's sufficient to replace the custom "
"OpenSSL installation with a newer version."
msgstr ""
