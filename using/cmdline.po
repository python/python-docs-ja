# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Osamu NAKAMURA, 2021
# Arihiro TAKASE, 2023
# 石井明久, 2024
# Takanori Suzuki <takanori@takanory.net>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-11 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:50+0000\n"
"Last-Translator: Takanori Suzuki <takanori@takanory.net>, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../using/cmdline.rst:9
msgid "Command line and environment"
msgstr "コマンドラインと環境"

#: ../../using/cmdline.rst:11
msgid ""
"The CPython interpreter scans the command line and the environment for "
"various settings."
msgstr ""
"CPython インタプリタはコマンドラインと環境を読み取って様々な設定を行ないま"
"す。"

#: ../../using/cmdline.rst:16
msgid ""
"Other implementations' command line schemes may differ.  See :ref:"
"`implementations` for further resources."
msgstr ""
"他の実装のコマンドラインスキームは CPython とは異なります。さらなる情報は :"
"ref:`implementations` を参照してください。"

#: ../../using/cmdline.rst:23
msgid "Command line"
msgstr "コマンドライン"

#: ../../using/cmdline.rst:25
msgid "When invoking Python, you may specify any of these options::"
msgstr "Python を起動するとき、以下のうち任意のオプションを指定できます::"

#: ../../using/cmdline.rst:27
msgid ""
"python [-bBdEhiIOPqRsSuvVWx?] [-c command | -m module-name | script | - ] "
"[args]"
msgstr ""

#: ../../using/cmdline.rst:29
msgid ""
"The most common use case is, of course, a simple invocation of a script::"
msgstr ""
"もちろん、もっとも一般的な利用方法は、単純にスクリプトを起動することです::"

#: ../../using/cmdline.rst:31
msgid "python myscript.py"
msgstr ""

#: ../../using/cmdline.rst:37
msgid "Interface options"
msgstr "インターフェイスオプション"

#: ../../using/cmdline.rst:39
msgid ""
"The interpreter interface resembles that of the UNIX shell, but provides "
"some additional methods of invocation:"
msgstr ""
"インタプリタのインターフェイスは UNIX シェルのものに似ていますが、より多くの"
"起動方法を提供しています:"

#: ../../using/cmdline.rst:42
msgid ""
"When called with standard input connected to a tty device, it prompts for "
"commands and executes them until an EOF (an end-of-file character, you can "
"produce that with :kbd:`Ctrl-D` on UNIX or :kbd:`Ctrl-Z, Enter` on Windows) "
"is read. For more on interactive mode, see :ref:`tut-interac`."
msgstr ""

#: ../../using/cmdline.rst:46
msgid ""
"When called with a file name argument or with a file as standard input, it "
"reads and executes a script from that file."
msgstr ""
"ファイル名引数か、標準入力としてファイルを渡された場合、そのファイルからスク"
"リプトを読み込んで実行します。"

#: ../../using/cmdline.rst:48
msgid ""
"When called with a directory name argument, it reads and executes an "
"appropriately named script from that directory."
msgstr ""
"ディレクトリ名を引数に受け取った場合、そのディレクトリから適切な名前のスクリ"
"プトファイルを読み込んで実行します。"

#: ../../using/cmdline.rst:50
msgid ""
"When called with ``-c command``, it executes the Python statement(s) given "
"as *command*.  Here *command* may contain multiple statements separated by "
"newlines. Leading whitespace is significant in Python statements!"
msgstr ""
"``-c コマンド`` オプションを利用して起動された場合、 *コマンド* として渡され"
"た Python の文を実行します。 *コマンド* の部分には改行で区切られた複数行を指"
"定することもできます。行の先頭の空白文字は Python 文の重要要素です！"

#: ../../using/cmdline.rst:53
msgid ""
"When called with ``-m module-name``, the given module is located on the "
"Python module path and executed as a script."
msgstr ""
"``-m モジュール名`` として Python モジュールパスにあるモジュールを指定された"
"場合、そのモジュールをスクリプトとして実行します。"

#: ../../using/cmdline.rst:56
msgid ""
"In non-interactive mode, the entire input is parsed before it is executed."
msgstr "非インタラクティブモードでは、入力の全体が実行前にパースされます。"

#: ../../using/cmdline.rst:58
msgid ""
"An interface option terminates the list of options consumed by the "
"interpreter, all consecutive arguments will end up in :data:`sys.argv` -- "
"note that the first element, subscript zero (``sys.argv[0]``), is a string "
"reflecting the program's source."
msgstr ""
"インタプリタによって消費されるオプションリストが終了したあと、継続する全ての"
"引数は :data:`sys.argv` に渡ります。 -- ただし、添字 0 の先頭要素(``sys."
"argv[0]``) はプログラムのソース自体を示す文字列です。"

#: ../../using/cmdline.rst:65
msgid ""
"Execute the Python code in *command*.  *command* can be one or more "
"statements separated by newlines, with significant leading whitespace as in "
"normal module code."
msgstr ""
"*command* 内の Python コードを実行します。 *command* は改行によって区切られた"
"1行以上の文です。通常のモジュールのコードと同じく、行頭の空白文字は意味を持ち"
"ます。"

#: ../../using/cmdline.rst:69
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-"
"c\"`` and the current directory will be added to the start of :data:`sys."
"path` (allowing modules in that directory to be imported as top level "
"modules)."
msgstr ""
"このオプションが指定された場合、 :data:`sys.argv` の最初の要素は ``\"-c\"`` "
"になり、カレントディレクトリが :data:`sys.path` の先頭に追加されます (その"
"ディレクトリにあるモジュールをトップレベルモジュールとして import 出来るよう"
"になります)。"

#: ../../using/cmdline.rst:74
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_command`` with "
"argument ``command``."
msgstr ""
"引数 ``command`` を指定して :ref:`監査イベント <auditing>` ``cpython."
"run_command`` を送出します。 "

#: ../../using/cmdline.rst:78
msgid ""
"Search :data:`sys.path` for the named module and execute its contents as "
"the :mod:`__main__` module."
msgstr ""
":data:`sys.path` から指定されたモジュール名のモジュールを探し、その内容を :"
"mod:`__main__` モジュールとして実行します。"

#: ../../using/cmdline.rst:81
msgid ""
"Since the argument is a *module* name, you must not give a file extension "
"(``.py``).  The module name should be a valid absolute Python module name, "
"but the implementation may not always enforce this (e.g. it may allow you to "
"use a name that includes a hyphen)."
msgstr ""
"引数は *module* 名なので、拡張子 (``.py``) を含めてはいけません。モジュール名"
"は有効な Python の絶対モジュール名 (absolute module name) であるべきですが、"
"実装がそれを強制しているとは限りません (例えば、ハイフンを名前に含める事を許"
"可するかもしれません)。"

#: ../../using/cmdline.rst:86
msgid ""
"Package names (including namespace packages) are also permitted. When a "
"package name is supplied instead of a normal module, the interpreter will "
"execute ``<pkg>.__main__`` as the main module. This behaviour is "
"deliberately similar to the handling of directories and zipfiles that are "
"passed to the interpreter as the script argument."
msgstr ""
"パッケージ名 (名前空間パッケージも含む) でも構いません。通常のモジュールの代"
"わりにパッケージ名が与えられた場合、インタプリタは ``<pkg>.__main__`` を "
"main モジュールとして実行します。この挙動はスクリプト引数として渡されたディレ"
"クトリや zip ファイルをインタプリタが処理するのと意図的に同じにしています。"

#: ../../using/cmdline.rst:95
msgid ""
"This option cannot be used with built-in modules and extension modules "
"written in C, since they do not have Python module files. However, it can "
"still be used for precompiled modules, even if the original source file is "
"not available."
msgstr ""
"このオプションは組み込みモジュールや C で書かれた拡張モジュールには利用できま"
"せん。 Python モジュールファイルを持っていないからです。しかし、コンパイル済"
"みのモジュールは、たとえ元のソースファイルがなくても利用可能です。"

#: ../../using/cmdline.rst:100
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"full path to the module file (while the module file is being located, the "
"first element will be set to ``\"-m\"``). As with the :option:`-c` option, "
"the current directory will be added to the start of :data:`sys.path`."
msgstr ""
"このオプションが指定された場合、 :data:`sys.argv` の最初の要素はモジュール"
"ファイルのフルパスになります (モジュールファイルを検索している間、最初の要素"
"は ``\"-m\"`` に設定されます)。 :option:`-c` オプションと同様に、カレントディ"
"レクトリが :data:`sys.path` の先頭に追加されます。"

#: ../../using/cmdline.rst:105
msgid ""
":option:`-I` option can  be used to run the script in isolated mode where :"
"data:`sys.path` contains neither the current directory nor the user's site-"
"packages directory. All ``PYTHON*`` environment variables are ignored, too."
msgstr ""

#: ../../using/cmdline.rst:110
msgid ""
"Many standard library modules contain code that is invoked on their "
"execution as a script.  An example is the :mod:`timeit` module::"
msgstr ""
"多くの標準ライブラリモジュールにはスクリプトとして実行された時のためのコード"
"があります。例えば、 :mod:`timeit` モジュールは次のように実行可能です::"

#: ../../using/cmdline.rst:113
msgid ""
"python -m timeit -s \"setup here\" \"benchmarked code here\"\n"
"python -m timeit -h # for details"
msgstr ""

#: ../../using/cmdline.rst:116
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_module`` with "
"argument ``module-name``."
msgstr ""
"引数 ``module-name`` を指定して :ref:`監査イベント <auditing>` ``cpython."
"run_module`` を送出します。 "

#: ../../using/cmdline.rst:119
msgid ":func:`runpy.run_module`"
msgstr ":func:`runpy.run_module`"

#: ../../using/cmdline.rst:120 ../../using/cmdline.rst:172
msgid "Equivalent functionality directly available to Python code"
msgstr "Python コードで直接使える等価な機能"

#: ../../using/cmdline.rst:122
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ":pep:`338` - モジュールをスクリプトとして実行する"

#: ../../using/cmdline.rst:124
msgid "Supply the package name to run a ``__main__`` submodule."
msgstr "``__main__`` サブモジュールを実行するパッケージ名が提供されました。"

#: ../../using/cmdline.rst:127
msgid "namespace packages are also supported"
msgstr "名前空間パッケージもサポートされました"

#: ../../using/cmdline.rst:134
msgid ""
"Read commands from standard input (:data:`sys.stdin`).  If standard input is "
"a terminal, :option:`-i` is implied."
msgstr ""
"標準入力 (:data:`sys.stdin`) からコマンドを読み込みます。標準入力がターミナル"
"だった場合、暗黙的に :option:`-i` オプションが指定されます。"

#: ../../using/cmdline.rst:137
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-"
"\"`` and the current directory will be added to the start of :data:`sys."
"path`."
msgstr ""
"このオプションが指定された場合、 :data:`sys.argv` の最初の要素は ``\"-\"`` "
"で、カレントディレクトリが :data:`sys.path` の先頭に追加されます。"

#: ../../using/cmdline.rst:141 ../../using/cmdline.rst:790
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_stdin`` with no "
"arguments."
msgstr ""
"引数無しで :ref:`監査イベント <auditing>` ``cpython.run_stdin`` を送出しま"
"す。 "

#: ../../using/cmdline.rst:147
msgid ""
"Execute the Python code contained in *script*, which must be a filesystem "
"path (absolute or relative) referring to either a Python file, a directory "
"containing a ``__main__.py`` file, or a zipfile containing a ``__main__.py`` "
"file."
msgstr ""
"*script* 内の Python コードを実行します。 *script* は、Python ファイル、 "
"``__main__.py`` ファイルがあるディレクトリ、 ``__main__.py`` ファイルがある "
"zip ファイルのいずれかの、ファイルシステム上の (絶対または相対) パスでなけれ"
"ばなりません。"

#: ../../using/cmdline.rst:152
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"script name as given on the command line."
msgstr ""
"このオプションが指定された場合、 :data:`sys.argv` の最初の要素はコマンドライ"
"ンで指定されたスクリプト名になります。"

#: ../../using/cmdline.rst:155
msgid ""
"If the script name refers directly to a Python file, the directory "
"containing that file is added to the start of :data:`sys.path`, and the file "
"is executed as the :mod:`__main__` module."
msgstr ""
"スクリプト名が Python ファイルを直接指定していた場合、そのファイルを含むディ"
"レクトリが :data:`sys.path` の先頭に追加され、そのファイルは :mod:`__main__` "
"モジュールとして実行されます。"

#: ../../using/cmdline.rst:159
msgid ""
"If the script name refers to a directory or zipfile, the script name is "
"added to the start of :data:`sys.path` and the ``__main__.py`` file in that "
"location is executed as the :mod:`__main__` module."
msgstr ""
"スクリプト名がディレクトリか zip ファイルを指定していた場合、スクリプト名が :"
"data:`sys.path` に追加され、その中の ``__main__.py`` ファイルが :mod:"
"`__main__` モジュールとして実行されます。"

#: ../../using/cmdline.rst:163
msgid ""
":option:`-I` option can  be used to run the script in isolated mode where :"
"data:`sys.path` contains neither the script's directory nor the user's site-"
"packages directory. All ``PYTHON*`` environment variables are ignored, too."
msgstr ""

#: ../../using/cmdline.rst:168
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_file`` with "
"argument ``filename``."
msgstr ""
"引数 ``filename`` を指定して :ref:`監査イベント <auditing>` ``cpython."
"run_file`` を送出します。 "

#: ../../using/cmdline.rst:171
msgid ":func:`runpy.run_path`"
msgstr ":func:`runpy.run_path`"

#: ../../using/cmdline.rst:175
msgid ""
"If no interface option is given, :option:`-i` is implied, ``sys.argv[0]`` is "
"an empty string (``\"\"``) and the current directory will be added to the "
"start of :data:`sys.path`.  Also, tab-completion and history editing is "
"automatically enabled, if available on your platform (see :ref:`rlcompleter-"
"config`)."
msgstr ""
"インターフェイスオプションが与えられなかった場合、:option:`-i` が暗黙的に指定"
"され、``sys.argv[0]`` が空の文字列 (``\"\"``) になり、 現在のディレクトリが :"
"data:`sys.path` の先頭に追加されます。また、利用可能であればタブ補完と履歴編"
"集が自動的に有効かされます (:ref:`rlcompleter-config` を参照してください)。"

#: ../../using/cmdline.rst:181
msgid ":ref:`tut-invoking`"
msgstr ":ref:`tut-invoking`"

#: ../../using/cmdline.rst:183
msgid "Automatic enabling of tab-completion and history editing."
msgstr "タブ補完と履歴の編集が自動的に有効化されます。"

#: ../../using/cmdline.rst:190
msgid "Generic options"
msgstr "一般オプション"

#: ../../using/cmdline.rst:196
msgid ""
"Print a short description of all command line options and corresponding "
"environment variables and exit."
msgstr ""

#: ../../using/cmdline.rst:201
msgid ""
"Print a short description of Python-specific environment variables and exit."
msgstr ""

#: ../../using/cmdline.rst:208
msgid ""
"Print a description of implementation-specific :option:`-X` options and exit."
msgstr ""

#: ../../using/cmdline.rst:215
msgid "Print complete usage information and exit."
msgstr ""

#: ../../using/cmdline.rst:222
msgid "Print the Python version number and exit.  Example output could be:"
msgstr "Python のバージョン番号を表示して終了します。出力の例:"

#: ../../using/cmdline.rst:224
msgid "Python 3.8.0b2+"
msgstr ""

#: ../../using/cmdline.rst:228
msgid "When given twice, print more information about the build, like:"
msgstr "2つ指定すると、次のようにより多くのビルドの情報を表示します:"

#: ../../using/cmdline.rst:230
msgid ""
"Python 3.8.0b2+ (3.8:0c076caaa8, Apr 20 2019, 21:55:00)\n"
"[GCC 6.2.0 20161005]"
msgstr ""

#: ../../using/cmdline.rst:235
msgid "The ``-VV`` option."
msgstr "``-VV`` オプション。"

#: ../../using/cmdline.rst:242
msgid "Miscellaneous options"
msgstr "その他のオプション"

#: ../../using/cmdline.rst:246
msgid ""
"Issue a warning when converting :class:`bytes` or :class:`bytearray` to :"
"class:`str` without specifying encoding or comparing :class:`!bytes` or :"
"class:`!bytearray` with :class:`!str` or :class:`!bytes` with :class:`int`. "
"Issue an error when the option is given twice (:option:`!-bb`)."
msgstr ""

#: ../../using/cmdline.rst:251
msgid "Affects also comparisons of :class:`bytes` with :class:`int`."
msgstr ""

#: ../../using/cmdline.rst:256
msgid ""
"If given, Python won't try to write ``.pyc`` files on the import of source "
"modules.  See also :envvar:`PYTHONDONTWRITEBYTECODE`."
msgstr ""
"与えられた場合、Python はソースモジュールのインポート時に ``.pyc`` ファイルの"
"作成を試みません。 :envvar:`PYTHONDONTWRITEBYTECODE` 環境変数も参照してくださ"
"い。"

#: ../../using/cmdline.rst:262
msgid ""
"Control the validation behavior of hash-based ``.pyc`` files. See :ref:`pyc-"
"invalidation`. When set to ``default``, checked and unchecked hash-based "
"bytecode cache files are validated according to their default semantics. "
"When set to ``always``, all hash-based ``.pyc`` files, whether checked or "
"unchecked, are validated against their corresponding source file. When set "
"to ``never``, hash-based ``.pyc`` files are not validated against their "
"corresponding source files."
msgstr ""

#: ../../using/cmdline.rst:270
msgid ""
"The semantics of timestamp-based ``.pyc`` files are unaffected by this "
"option."
msgstr ""

#: ../../using/cmdline.rst:276
msgid ""
"Turn on parser debugging output (for expert only). See also the :envvar:"
"`PYTHONDEBUG` environment variable."
msgstr ""

#: ../../using/cmdline.rst:279
msgid ""
"This option requires a :ref:`debug build of Python <debug-build>`, otherwise "
"it's ignored."
msgstr ""

#: ../../using/cmdline.rst:285
msgid ""
"Ignore all ``PYTHON*`` environment variables, e.g. :envvar:`PYTHONPATH` and :"
"envvar:`PYTHONHOME`, that might be set."
msgstr ""

#: ../../using/cmdline.rst:288
msgid "See also the :option:`-P` and :option:`-I` (isolated) options."
msgstr ""

#: ../../using/cmdline.rst:293
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, even "
"when :data:`sys.stdin` does not appear to be a terminal.  The :envvar:"
"`PYTHONSTARTUP` file is not read."
msgstr ""
"最初の引数にスクリプトが指定された場合や :option:`-c` オプションが利用された"
"場合、 :data:`sys.stdin` がターミナルに出力されない場合も含めて、スクリプトか"
"コマンドを実行した後にインタラクティブモードに入ります。 :envvar:"
"`PYTHONSTARTUP` ファイルは読み込みません。"

#: ../../using/cmdline.rst:298
msgid ""
"This can be useful to inspect global variables or a stack trace when a "
"script raises an exception.  See also :envvar:`PYTHONINSPECT`."
msgstr ""
"このオプションはグローバル変数や、スクリプトが例外を発生させるときにそのス"
"タックトレースを調べるのに便利です。 :envvar:`PYTHONINSPECT` も参照してくださ"
"い。"

#: ../../using/cmdline.rst:304
msgid ""
"Run Python in isolated mode. This also implies :option:`-E`, :option:`-P` "
"and :option:`-s` options."
msgstr ""
"Python を隔離モードで実行します。:option:`-E`、:option:`-P`、および :option:"
"`-s` オプションも暗黙的に指定されます。"

#: ../../using/cmdline.rst:307
msgid ""
"In isolated mode :data:`sys.path` contains neither the script's directory "
"nor the user's site-packages directory. All ``PYTHON*`` environment "
"variables are ignored, too. Further restrictions may be imposed to prevent "
"the user from injecting malicious code."
msgstr ""

#: ../../using/cmdline.rst:317
msgid ""
"Remove assert statements and any code conditional on the value of :const:"
"`__debug__`.  Augment the filename for compiled (:term:`bytecode`) files by "
"adding ``.opt-1`` before the ``.pyc`` extension (see :pep:`488`).  See also :"
"envvar:`PYTHONOPTIMIZE`."
msgstr ""

#: ../../using/cmdline.rst:322 ../../using/cmdline.rst:332
msgid "Modify ``.pyc`` filenames according to :pep:`488`."
msgstr ":pep:`488` に従って ``.pyc`` ファイル名を変更します。"

#: ../../using/cmdline.rst:328
msgid ""
"Do :option:`-O` and also discard docstrings.  Augment the filename for "
"compiled (:term:`bytecode`) files by adding ``.opt-2`` before the ``.pyc`` "
"extension (see :pep:`488`)."
msgstr ""

#: ../../using/cmdline.rst:338
msgid "Don't prepend a potentially unsafe path to :data:`sys.path`:"
msgstr ""

#: ../../using/cmdline.rst:340
msgid ""
"``python -m module`` command line: Don't prepend the current working "
"directory."
msgstr ""

#: ../../using/cmdline.rst:342
msgid ""
"``python script.py`` command line: Don't prepend the script's directory. If "
"it's a symbolic link, resolve symbolic links."
msgstr ""

#: ../../using/cmdline.rst:344
msgid ""
"``python -c code`` and ``python`` (REPL) command lines: Don't prepend an "
"empty string, which means the current working directory."
msgstr ""

#: ../../using/cmdline.rst:347
msgid ""
"See also the :envvar:`PYTHONSAFEPATH` environment variable, and :option:`-E` "
"and :option:`-I` (isolated) options."
msgstr ""

#: ../../using/cmdline.rst:355
msgid ""
"Don't display the copyright and version messages even in interactive mode."
msgstr ""
"インタラクティブモードでも copyright とバージョンのメッセージを表示しません。"

#: ../../using/cmdline.rst:362
msgid ""
"Turn on hash randomization. This option only has an effect if the :envvar:"
"`PYTHONHASHSEED` environment variable is set to ``0``, since hash "
"randomization is enabled by default."
msgstr ""

#: ../../using/cmdline.rst:366
msgid ""
"On previous versions of Python, this option turns on hash randomization, so "
"that the :meth:`~object.__hash__` values of str and bytes objects are "
"\"salted\" with an unpredictable random value.  Although they remain "
"constant within an individual Python process, they are not predictable "
"between repeated invocations of Python."
msgstr ""

#: ../../using/cmdline.rst:372
msgid ""
"Hash randomization is intended to provide protection against a denial-of-"
"service caused by carefully chosen inputs that exploit the worst case "
"performance of a dict construction, *O*\\ (*n*\\ :sup:`2`) complexity.  See "
"http://ocert.org/advisories/ocert-2011-003.html for details."
msgstr ""

#: ../../using/cmdline.rst:377
msgid ""
":envvar:`PYTHONHASHSEED` allows you to set a fixed value for the hash seed "
"secret."
msgstr ""
":envvar:`PYTHONHASHSEED` によってハッシュシードの固定値を秘密にすることが出来"
"ます。"

#: ../../using/cmdline.rst:382
msgid "The option is no longer ignored."
msgstr "このオプションが無視されなくなりました."

#: ../../using/cmdline.rst:388
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to :data:"
"`sys.path`."
msgstr ""
":data:`ユーザのサイトパッケージのディレクトリ <site.USER_SITE>` を :data:"
"`sys.path` に追加しません。"

#: ../../using/cmdline.rst:391
msgid "See also :envvar:`PYTHONNOUSERSITE`."
msgstr ""

#: ../../using/cmdline.rst:395 ../../using/cmdline.rst:887
#: ../../using/cmdline.rst:899
msgid ":pep:`370` -- Per user site-packages directory"
msgstr ":pep:`370` -- ユーザごとの ``site-packages`` ディレクトリ"

#: ../../using/cmdline.rst:400
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call :func:`site."
"main` if you want them to be triggered)."
msgstr ""
":mod:`site` モジュールの import と、そのモジュールが行なっていた site ごと"
"の :data:`sys.path` への操作を無効にします。後で :mod:`site` を明示的に "
"import しても、これらの操作は実行されません (実行したい場合は、 :func:`site."
"main` を呼び出してください)。"

#: ../../using/cmdline.rst:408
msgid ""
"Force the stdout and stderr streams to be unbuffered.  This option has no "
"effect on the stdin stream."
msgstr ""

#: ../../using/cmdline.rst:411
msgid "See also :envvar:`PYTHONUNBUFFERED`."
msgstr ":envvar:`PYTHONUNBUFFERED` も参照してください。"

#: ../../using/cmdline.rst:413
msgid "The text layer of the stdout and stderr streams now is unbuffered."
msgstr ""

#: ../../using/cmdline.rst:419
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  When given twice (:"
"option:`!-vv`), print a message for each file that is checked for when "
"searching for a module.  Also provides information on module cleanup at exit."
msgstr ""
"モジュールが初期化されるたびにメッセージを出力し、それがどこ (ファイル名やビ"
"ルトインモジュール) からロードされたのかを表示します。\n"
"二回与えられた場合 (:option:`!-vv`) は、モジュールを検索するときにチェックし"
"たファイルごとにメッセージを出力します。また、終了時のモジュールクリーンアッ"
"プに関する情報も提供します。"

#: ../../using/cmdline.rst:424
msgid ""
"The :mod:`site` module reports the site-specific paths and :file:`.pth` "
"files being processed."
msgstr ""

#: ../../using/cmdline.rst:428
msgid "See also :envvar:`PYTHONVERBOSE`."
msgstr ":envvar:`PYTHONVERBOSE` も参照してください。"

#: ../../using/cmdline.rst:434
msgid ""
"Warning control. Python's warning machinery by default prints warning "
"messages to :data:`sys.stderr`."
msgstr ""
"警告制御。 Python の警告機構はデフォルトでは警告メッセージを :data:`sys."
"stderr` に表示します。"

#: ../../using/cmdline.rst:437 ../../using/cmdline.rst:915
msgid ""
"The simplest settings apply a particular action unconditionally to all "
"warnings emitted by a process (even those that are otherwise ignored by "
"default)::"
msgstr ""

#: ../../using/cmdline.rst:441
msgid ""
"-Wdefault  # Warn once per call location\n"
"-Werror    # Convert to exceptions\n"
"-Walways   # Warn every time\n"
"-Wall      # Same as -Walways\n"
"-Wmodule   # Warn once per calling module\n"
"-Wonce     # Warn once per Python process\n"
"-Wignore   # Never warn"
msgstr ""

#: ../../using/cmdline.rst:449
msgid ""
"The action names can be abbreviated as desired and the interpreter will "
"resolve them to the appropriate action name. For example, ``-Wi`` is the "
"same as ``-Wignore``."
msgstr ""

#: ../../using/cmdline.rst:453
msgid "The full form of argument is::"
msgstr "引数の完全形は次のようになります::"

#: ../../using/cmdline.rst:455
msgid "action:message:category:module:lineno"
msgstr ""

#: ../../using/cmdline.rst:457
msgid ""
"Empty fields match all values; trailing empty fields may be omitted. For "
"example ``-W ignore::DeprecationWarning`` ignores all DeprecationWarning "
"warnings."
msgstr ""

#: ../../using/cmdline.rst:461
msgid ""
"The *action* field is as explained above but only applies to warnings that "
"match the remaining fields."
msgstr ""

#: ../../using/cmdline.rst:464
msgid ""
"The *message* field must match the whole warning message; this match is case-"
"insensitive."
msgstr ""

#: ../../using/cmdline.rst:467
msgid ""
"The *category* field matches the warning category (ex: "
"``DeprecationWarning``). This must be a class name; the match test whether "
"the actual warning category of the message is a subclass of the specified "
"warning category."
msgstr ""

#: ../../using/cmdline.rst:472
msgid ""
"The *module* field matches the (fully qualified) module name; this match is "
"case-sensitive."
msgstr ""

#: ../../using/cmdline.rst:475
msgid ""
"The *lineno* field matches the line number, where zero matches all line "
"numbers and is thus equivalent to an omitted line number."
msgstr ""

#: ../../using/cmdline.rst:478
msgid ""
"Multiple :option:`-W` options can be given; when a warning matches more than "
"one option, the action for the last matching option is performed. Invalid :"
"option:`-W` options are ignored (though, a warning message is printed about "
"invalid options when the first warning is issued)."
msgstr ""
"複数の :option:`-W` オプションを指定することができます。警告が1つ以上のオプ"
"ションとマッチしたときは、最後にマッチしたオプションのアクションが有効になり"
"ます。不正な :option:`-W` オプションは無視されます (最初の警告が発生したとき"
"に、不正なオプションに対する警告メッセージが表示されます)。"

#: ../../using/cmdline.rst:483
msgid ""
"Warnings can also be controlled using the :envvar:`PYTHONWARNINGS` "
"environment variable and from within a Python program using the :mod:"
"`warnings` module. For example, the :func:`warnings.filterwarnings` function "
"can be used to use a regular expression on the warning message."
msgstr ""

#: ../../using/cmdline.rst:488 ../../using/cmdline.rst:927
msgid ""
"See :ref:`warning-filter` and :ref:`describing-warning-filters` for more "
"details."
msgstr ""
"詳しくは :ref:`warning-filter` と :ref:`describing-warning-filters` を参照し"
"てください。"

#: ../../using/cmdline.rst:494
msgid ""
"Skip the first line of the source, allowing use of non-Unix forms of ``#!"
"cmd``.  This is intended for a DOS specific hack only."
msgstr ""
"Unix 以外の形式の ``#!cmd`` を使うために、ソースの最初の行をスキップします。"
"これは、DOS専用のハックのみを目的としています。"

#: ../../using/cmdline.rst:500
msgid ""
"Reserved for various implementation-specific options.  CPython currently "
"defines the following possible values:"
msgstr ""
"様々な実装固有のオプションのために予約されています。現在のところ CPython は以"
"下の値を定義しています:"

#: ../../using/cmdline.rst:503
msgid ""
"``-X faulthandler`` to enable :mod:`faulthandler`. See also :envvar:"
"`PYTHONFAULTHANDLER`."
msgstr ""

#: ../../using/cmdline.rst:508
msgid ""
"``-X showrefcount`` to output the total reference count and number of used "
"memory blocks when the program finishes or after each statement in the "
"interactive interpreter. This only works on :ref:`debug builds <debug-"
"build>`."
msgstr ""

#: ../../using/cmdline.rst:515
msgid ""
"``-X tracemalloc`` to start tracing Python memory allocations using the :mod:"
"`tracemalloc` module. By default, only the most recent frame is stored in a "
"traceback of a trace. Use ``-X tracemalloc=NFRAME`` to start tracing with a "
"traceback limit of *NFRAME* frames. See :func:`tracemalloc.start` and :"
"envvar:`PYTHONTRACEMALLOC` for more information."
msgstr ""

#: ../../using/cmdline.rst:524
msgid ""
"``-X int_max_str_digits`` configures the :ref:`integer string conversion "
"length limitation <int_max_str_digits>`.  See also :envvar:"
"`PYTHONINTMAXSTRDIGITS`."
msgstr ""

#: ../../using/cmdline.rst:530
msgid ""
"``-X importtime`` to show how long each import takes. It shows module name, "
"cumulative time (including nested imports) and self time (excluding nested "
"imports).  Note that its output may be broken in multi-threaded "
"application.  Typical usage is ``python3 -X importtime -c 'import "
"asyncio'``.  See also :envvar:`PYTHONPROFILEIMPORTTIME`."
msgstr ""

#: ../../using/cmdline.rst:538
msgid ""
"``-X dev``: enable :ref:`Python Development Mode <devmode>`, introducing "
"additional runtime checks that are too expensive to be enabled by default.  "
"See also :envvar:`PYTHONDEVMODE`."
msgstr ""

#: ../../using/cmdline.rst:544
msgid ""
"``-X utf8`` enables the :ref:`Python UTF-8 Mode <utf8-mode>`. ``-X utf8=0`` "
"explicitly disables :ref:`Python UTF-8 Mode <utf8-mode>` (even when it would "
"otherwise activate automatically). See also :envvar:`PYTHONUTF8`."
msgstr ""

#: ../../using/cmdline.rst:551
msgid ""
"``-X pycache_prefix=PATH`` enables writing ``.pyc`` files to a parallel tree "
"rooted at the given directory instead of to the code tree. See also :envvar:"
"`PYTHONPYCACHEPREFIX`."
msgstr ""

#: ../../using/cmdline.rst:557
msgid ""
"``-X warn_default_encoding`` issues a :class:`EncodingWarning` when the "
"locale-specific default encoding is used for opening files. See also :envvar:"
"`PYTHONWARNDEFAULTENCODING`."
msgstr ""

#: ../../using/cmdline.rst:563
msgid ""
"``-X no_debug_ranges`` disables the inclusion of the tables mapping extra "
"location information (end line, start column offset and end column offset) "
"to every instruction in code objects. This is useful when smaller code "
"objects and pyc files are desired as well as suppressing the extra visual "
"location indicators when the interpreter displays tracebacks. See also :"
"envvar:`PYTHONNODEBUGRANGES`."
msgstr ""

#: ../../using/cmdline.rst:572
msgid ""
"``-X frozen_modules`` determines whether or not frozen modules are ignored "
"by the import machinery.  A value of ``on`` means they get imported and "
"``off`` means they are ignored.  The default is ``on`` if this is an "
"installed Python (the normal case).  If it's under development (running from "
"the source tree) then the default is ``off``. Note that the :mod:`!"
"importlib_bootstrap` and :mod:`!importlib_bootstrap_external` frozen modules "
"are always used, even if this flag is set to ``off``. See also :envvar:"
"`PYTHON_FROZEN_MODULES`."
msgstr ""

#: ../../using/cmdline.rst:583
msgid ""
"``-X perf`` enables support for the Linux ``perf`` profiler. When this "
"option is provided, the ``perf`` profiler will be able to report Python "
"calls. This option is only available on some platforms and will do nothing "
"if is not supported on the current system. The default value is \"off\". See "
"also :envvar:`PYTHONPERFSUPPORT` and :ref:`perf_profiling`."
msgstr ""

#: ../../using/cmdline.rst:591
msgid ""
"``-X perf_jit`` enables support for the Linux ``perf`` profiler with DWARF "
"support. When this option is provided, the ``perf`` profiler will be able to "
"report Python calls using DWARF information. This option is only available "
"on some platforms and will do nothing if is not supported on the current "
"system. The default value is \"off\". See also :envvar:"
"`PYTHON_PERF_JIT_SUPPORT` and :ref:`perf_profiling`."
msgstr ""

#: ../../using/cmdline.rst:600
msgid ""
":samp:`-X cpu_count={n}` overrides :func:`os.cpu_count`, :func:`os."
"process_cpu_count`, and :func:`multiprocessing.cpu_count`. *n* must be "
"greater than or equal to 1. This option may be useful for users who need to "
"limit CPU resources of a container system. See also :envvar:"
"`PYTHON_CPU_COUNT`. If *n* is ``default``, nothing is overridden."
msgstr ""

#: ../../using/cmdline.rst:609
msgid ""
":samp:`-X presite={package.module}` specifies a module that should be "
"imported before the :mod:`site` module is executed and before the :mod:"
"`__main__` module exists.  Therefore, the imported module isn't :mod:"
"`__main__`. This can be used to execute code early during Python "
"initialization. Python needs to be :ref:`built in debug mode <debug-build>` "
"for this option to exist.  See also :envvar:`PYTHON_PRESITE`."
msgstr ""

#: ../../using/cmdline.rst:618
msgid ""
":samp:`-X gil={0,1}` forces the GIL to be disabled or enabled, respectively. "
"Setting to ``0`` is only available in builds configured with :option:`--"
"disable-gil`. See also :envvar:`PYTHON_GIL` and :ref:`whatsnew313-free-"
"threaded-cpython`."
msgstr ""

#: ../../using/cmdline.rst:625
msgid ""
"It also allows passing arbitrary values and retrieving them through the :"
"data:`sys._xoptions` dictionary."
msgstr ""
"任意の値を渡し、 :data:`sys._xoptions` 辞書から取り出すことも出来ます。"

#: ../../using/cmdline.rst:630
msgid "Removed the ``-X showalloccount`` option."
msgstr ""

#: ../../using/cmdline.rst:633
msgid "Removed the ``-X oldparser`` option."
msgstr ""

#: ../../using/cmdline.rst:639
msgid "Controlling color"
msgstr "色の制御"

#: ../../using/cmdline.rst:641
msgid ""
"The Python interpreter is configured by default to use colors to highlight "
"output in certain situations such as when displaying tracebacks. This "
"behavior can be controlled by setting different environment variables."
msgstr ""
"デフォルトでは、 Python インタープリターは、トレースバックの表示などの特定の"
"状況で、出力を色でハイライトするように構成されています。この振る舞いは、異な"
"る環境変数を設定することで制御できます。"

#: ../../using/cmdline.rst:645
msgid ""
"Setting the environment variable ``TERM`` to ``dumb`` will disable color."
msgstr ""
"環境変数 ``TERM`` を ``dumb`` に設定することで、色付けを無効にできます。"

#: ../../using/cmdline.rst:647
msgid ""
"If the |FORCE_COLOR|_ environment variable is set, then color will be "
"enabled regardless of the value of TERM. This is useful on CI systems which "
"aren’t terminals but can still display ANSI escape sequences."
msgstr ""
"|FORCE_COLOR|_ 環境変数が設定されている場合、 TERM の値にかかわらず、色付けは"
"有効になります。これは、ターミナルではないが ANSI エスケープシーケンスを表示"
"できる CI システムで有効です。"

#: ../../using/cmdline.rst:651
msgid ""
"If the |NO_COLOR|_ environment variable is set, Python will disable all "
"color in the output. This takes precedence over ``FORCE_COLOR``."
msgstr ""
"|NO_COLOR|_ 環境変数が設定されている場合、 Python は出力のすべての色を無効に"
"します。これは ``FORCE_COLOR`` よりも優先されます。"

#: ../../using/cmdline.rst:654
msgid ""
"All these environment variables are used also by other tools to control "
"color output. To control the color output only in the Python interpreter, "
"the :envvar:`PYTHON_COLORS` environment variable can be used. This variable "
"takes precedence over ``NO_COLOR``, which in turn takes precedence over "
"``FORCE_COLOR``."
msgstr ""
"これらのすべての環境変数は、色の出力の制御のために他のツールにも使用されま"
"す。 Python インタープリターでのみ色の出力を制御するには、 :envvar:"
"`PYTHON_COLORS` 環境変数を使用できます。この変数は、 ``FORCE_COLOR`` よりも優"
"先される ``NO_COLOR`` よりも、さらに優先されます。"

#: ../../using/cmdline.rst:669
msgid "Options you shouldn't use"
msgstr "使うべきでないオプション"

#: ../../using/cmdline.rst:673
msgid "Reserved for use by Jython_."
msgstr "Jython_ のために予約されています。"

#: ../../using/cmdline.rst:681
msgid "Environment variables"
msgstr "環境変数"

#: ../../using/cmdline.rst:683
msgid ""
"These environment variables influence Python's behavior, they are processed "
"before the command-line switches other than -E or -I.  It is customary that "
"command-line switches override environmental variables where there is a "
"conflict."
msgstr ""
"以下の環境変数は Python の挙動に影響します。環境変数は -E や -I 以外のコマン"
"ドラインスイッチの前に処理されます。衝突したときにコマンドラインスイッチが環"
"境変数をオーバーライドするのは慣例です。"

#: ../../using/cmdline.rst:690
msgid ""
"Change the location of the standard Python libraries.  By default, the "
"libraries are searched in :file:`{prefix}/lib/python{version}` and :file:"
"`{exec_prefix}/lib/python{version}`, where :file:`{prefix}` and :file:"
"`{exec_prefix}` are installation-dependent directories, both defaulting to :"
"file:`/usr/local`."
msgstr ""
"標準 Python ライブラリの場所を変更します。デフォルトでは、ライブラリは :file:"
"`{prefix}/lib/python{version}` と :file:`{exec_prefix}/lib/python{version}` "
"から検索されます。ここで、 :file:`{prefix}` と :file:`{exec_prefix}` はインス"
"トール依存のディレクトリで、両方共デフォルトでは :file:`/usr/local` です。"

#: ../../using/cmdline.rst:696
msgid ""
"When :envvar:`PYTHONHOME` is set to a single directory, its value replaces "
"both :file:`{prefix}` and :file:`{exec_prefix}`.  To specify different "
"values for these, set :envvar:`PYTHONHOME` to :file:`{prefix}:{exec_prefix}`."
msgstr ""
":envvar:`PYTHONHOME` が1つのディレクトリに設定されている場合、その値は :file:"
"`{prefix}` と :file:`{exec_prefix}` の両方を置き換えます。それらに別々の値を"
"指定したい場合は、 :envvar:`PYTHONHOME` を :file:`{prefix}:{exec_prefix}` の"
"ように指定します。"

#: ../../using/cmdline.rst:703
msgid ""
"Augment the default search path for module files.  The format is the same as "
"the shell's :envvar:`PATH`: one or more directory pathnames separated by :"
"data:`os.pathsep` (e.g. colons on Unix or semicolons on Windows). Non-"
"existent directories are silently ignored."
msgstr ""
"モジュールファイルのデフォルトの検索パスを追加します。この環境変数のフォー"
"マットはシェルの :envvar:`PATH` と同じで、 :data:`os.pathsep` (Unix ならコロ"
"ン、 Windows ならセミコロン) で区切られた1つ以上のディレクトリパスです。存在"
"しないディレクトリは警告なしに無視されます。"

#: ../../using/cmdline.rst:708
msgid ""
"In addition to normal directories, individual :envvar:`PYTHONPATH` entries "
"may refer to zipfiles containing pure Python modules (in either source or "
"compiled form). Extension modules cannot be imported from zipfiles."
msgstr ""
"通常のディレクトリに加えて、 :envvar:`PYTHONPATH` のエントリはピュアPython モ"
"ジュール(ソース形式でもコンパイルされた形式でも) を含む zip ファイルを参照す"
"ることもできます。拡張モジュールは zip ファイルの中から import することはでき"
"ません。"

#: ../../using/cmdline.rst:712
msgid ""
"The default search path is installation dependent, but generally begins "
"with :file:`{prefix}/lib/python{version}` (see :envvar:`PYTHONHOME` above).  "
"It is *always* appended to :envvar:`PYTHONPATH`."
msgstr ""
"デフォルトの検索パスはインストール依存ですが、通常は :file:`{prefix}/lib/"
"python{version}` で始まります。 (上の :envvar:`PYTHONHOME` を参照してくださ"
"い。) これは *常に* :envvar:`PYTHONPATH` に追加されます。"

#: ../../using/cmdline.rst:716
msgid ""
"An additional directory will be inserted in the search path in front of :"
"envvar:`PYTHONPATH` as described above under :ref:`using-on-interface-"
"options`. The search path can be manipulated from within a Python program as "
"the variable :data:`sys.path`."
msgstr ""
"上の :ref:`using-on-interface-options` で説明されているように、追加の検索パス"
"ディレクトリが :envvar:`PYTHONPATH` の手前に追加されます。検索パスは Python "
"プログラムから :data:`sys.path` 変数として操作することができます。"

#: ../../using/cmdline.rst:724
msgid ""
"If this is set to a non-empty string, don't prepend a potentially unsafe "
"path to :data:`sys.path`: see the :option:`-P` option for details."
msgstr ""

#: ../../using/cmdline.rst:732
msgid ""
"If this is set to a non-empty string, it overrides the :data:`sys."
"platlibdir` value."
msgstr ""

#: ../../using/cmdline.rst:740
msgid ""
"If this is the name of a readable file, the Python commands in that file are "
"executed before the first prompt is displayed in interactive mode.  The file "
"is executed in the same namespace where interactive commands are executed so "
"that objects defined or imported in it can be used without qualification in "
"the interactive session.  You can also change the prompts :data:`sys.ps1` "
"and :data:`sys.ps2` and the hook :data:`sys.__interactivehook__` in this "
"file."
msgstr ""
"この変数が読み込み可能なファイル名の場合、対話モードで最初のプロンプトが表示"
"される前にそのファイルの Python コマンドが実行されます。\n"
"ファイル内で定義されているオブジェクトやインポートされたオブジェクトを対話"
"セッションで修飾せずに使用するために、ファイルは対話的なコマンドと同じ名前空"
"間で実行されます。\n"
"このファイルの中で、プロンプト :data:`sys.ps1` や :data:`sys.ps2`、ならびに"
"フック :data:`sys.__interactivehook__` も変更できます。"

#: ../../using/cmdline.rst:747 ../../using/cmdline.rst:749
msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.run_startup`` with the "
"filename as the argument when called on startup."
msgstr ""

#: ../../using/cmdline.rst:755
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-O` option.  If set to an integer, it is equivalent to specifying :"
"option:`-O` multiple times."
msgstr ""
"この変数に空でない文字列を設定するのは :option:`-O` オプションを指定するのと"
"等価です。整数を設定した場合、 :option:`-O` を複数回指定したのと同じになりま"
"す。"

#: ../../using/cmdline.rst:762
msgid ""
"If this is set, it names a callable using dotted-path notation.  The module "
"containing the callable will be imported and then the callable will be run "
"by the default implementation of :func:`sys.breakpointhook` which itself is "
"called by built-in :func:`breakpoint`.  If not set, or set to the empty "
"string, it is equivalent to the value \"pdb.set_trace\".  Setting this to "
"the string \"0\" causes the default implementation of :func:`sys."
"breakpointhook` to do nothing but return immediately."
msgstr ""

#: ../../using/cmdline.rst:774
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-d` option.  If set to an integer, it is equivalent to specifying :"
"option:`-d` multiple times."
msgstr ""
"この変数に空でない文字列を設定するのは :option:`-d` オプションを指定するのと"
"等価です。整数を指定した場合、 :option:`-d` を複数回指定したのと同じになりま"
"す。"

#: ../../using/cmdline.rst:778
msgid ""
"This environment variable requires a :ref:`debug build of Python <debug-"
"build>`, otherwise it's ignored."
msgstr ""

#: ../../using/cmdline.rst:784
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-i` option."
msgstr ""
"この変数に空でない文字列を設定するのは :option:`-i` オプションを指定するのと"
"等価です。"

#: ../../using/cmdline.rst:787
msgid ""
"This variable can also be modified by Python code using :data:`os.environ` "
"to force inspect mode on program termination."
msgstr ""
"この変数は Python コードから :data:`os.environ` を使って変更して、プログラム"
"終了時のインスペクトモードを強制することができます。"

#: ../../using/cmdline.rst:792
msgid "(also 3.11.10, 3.10.15, 3.9.20, and 3.8.20) Emits audit events."
msgstr ""

#: ../../using/cmdline.rst:795
msgid ""
"Uses PyREPL if possible, in which case :envvar:`PYTHONSTARTUP` is also "
"executed. Emits audit events."
msgstr ""

#: ../../using/cmdline.rst:802
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-u` option."
msgstr ""
"この変数に空でない文字列を設定するのは :option:`-u` オプションを指定するのと"
"等価です。"

#: ../../using/cmdline.rst:808
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-v` option.  If set to an integer, it is equivalent to specifying :"
"option:`-v` multiple times."
msgstr ""
"この変数に空でない文字列を設定するのは :option:`-v` オプションを指定するのと"
"等価です。整数を設定した場合、 :option:`-v` を複数回指定したのと同じになりま"
"す。"

#: ../../using/cmdline.rst:815
msgid ""
"If this is set, Python ignores case in :keyword:`import` statements.  This "
"only works on Windows and macOS."
msgstr ""
"この環境変数が設定されている場合、 Python は :keyword:`import` 文で大文字/小"
"文字を区別しません。 これは Windows と macOS でのみ動作します。"

#: ../../using/cmdline.rst:821
msgid ""
"If this is set to a non-empty string, Python won't try to write ``.pyc`` "
"files on the import of source modules.  This is equivalent to specifying "
"the :option:`-B` option."
msgstr ""
"この変数に空でない文字列を設定した場合、 Python はソースモジュールのインポー"
"ト時に ``.pyc`` ファイルを作成しようとはしなくなります。\n"
":option:`-B` オプションを指定するのと等価です。"

#: ../../using/cmdline.rst:828
msgid ""
"If this is set, Python will write ``.pyc`` files in a mirror directory tree "
"at this path, instead of in ``__pycache__`` directories within the source "
"tree. This is equivalent to specifying the :option:`-X` "
"``pycache_prefix=PATH`` option."
msgstr ""

#: ../../using/cmdline.rst:838
msgid ""
"If this variable is not set or set to ``random``, a random value is used to "
"seed the hashes of str and bytes objects."
msgstr ""
"この変数が設定されていない場合や ``random`` に設定された場合、乱数値が str、"
"bytes オブジェクトのハッシュのシードに使われます。"

#: ../../using/cmdline.rst:841
msgid ""
"If :envvar:`PYTHONHASHSEED` is set to an integer value, it is used as a "
"fixed seed for generating the hash() of the types covered by the hash "
"randomization."
msgstr ""
":envvar:`PYTHONHASHSEED` が整数値に設定された場合、その値はハッシュランダム化"
"が扱う型の hash() 生成の固定シードに使われます。"

#: ../../using/cmdline.rst:845
msgid ""
"Its purpose is to allow repeatable hashing, such as for selftests for the "
"interpreter itself, or to allow a cluster of python processes to share hash "
"values."
msgstr ""
"その目的は再現性のあるハッシュを可能にすることです。例えばインタープリタ自身"
"の自己テストや Python プロセスのクラスタでハッシュ値を共有するのに用います。"

#: ../../using/cmdline.rst:849
msgid ""
"The integer must be a decimal number in the range [0,4294967295].  "
"Specifying the value 0 will disable hash randomization."
msgstr ""
"整数は [0,4294967295] の十進数でなければなりません。0 を指定するとハッシュラ"
"ンダム化は無効化されます。"

#: ../../using/cmdline.rst:856
msgid ""
"If this variable is set to an integer, it is used to configure the "
"interpreter's global :ref:`integer string conversion length limitation "
"<int_max_str_digits>`."
msgstr ""

#: ../../using/cmdline.rst:864
msgid ""
"If this is set before running the interpreter, it overrides the encoding "
"used for stdin/stdout/stderr, in the syntax ``encodingname:errorhandler``.  "
"Both the ``encodingname`` and the ``:errorhandler`` parts are optional and "
"have the same meaning as in :func:`str.encode`."
msgstr ""
"この変数がインタープリタ実行前に設定されていた場合、``encodingname:"
"errorhandler`` という文法で標準入力/標準出力/標準エラー出力のエンコードを上書"
"きします。 ``encodingname`` と ``:errorhandler`` の部分はどちらも任意で、:"
"func:`str.encode` と同じ意味を持ちます。"

#: ../../using/cmdline.rst:869
msgid ""
"For stderr, the ``:errorhandler`` part is ignored; the handler will always "
"be ``'backslashreplace'``."
msgstr ""
"標準エラー出力の場合、``:errorhandler`` の部分は無視されます; ハンドラは常に "
"``'backslashreplace'`` です。"

#: ../../using/cmdline.rst:872
msgid "The ``encodingname`` part is now optional."
msgstr "``encodingname`` の部分が任意になりました。"

#: ../../using/cmdline.rst:875
msgid ""
"On Windows, the encoding specified by this variable is ignored for "
"interactive console buffers unless :envvar:`PYTHONLEGACYWINDOWSSTDIO` is "
"also specified. Files and pipes redirected through the standard streams are "
"not affected."
msgstr ""

#: ../../using/cmdline.rst:882
msgid ""
"If this is set, Python won't add the :data:`user site-packages directory "
"<site.USER_SITE>` to :data:`sys.path`."
msgstr ""
"この環境変数が設定されている場合、 Python は :data:`ユーザ site-packages ディ"
"レクトリ <site.USER_SITE>` を :data:`sys.path` に追加しません。"

#: ../../using/cmdline.rst:892
msgid ""
"Defines the :data:`user base directory <site.USER_BASE>`, which is used to "
"compute the path of the :data:`user site-packages directory <site."
"USER_SITE>` and :ref:`installation paths <sysconfig-user-scheme>` for "
"``python -m pip install --user``."
msgstr ""

#: ../../using/cmdline.rst:904
msgid ""
"If this environment variable is set, ``sys.argv[0]`` will be set to its "
"value instead of the value got through the C runtime.  Only works on macOS."
msgstr ""
"この環境変数が設定された場合、 ``sys.argv[0]`` に、C ランタイムから取得した値"
"の代わりにこの環境変数の値が設定されます。macOS でのみ動作します。"

#: ../../using/cmdline.rst:910
msgid ""
"This is equivalent to the :option:`-W` option. If set to a comma separated "
"string, it is equivalent to specifying :option:`-W` multiple times, with "
"filters later in the list taking precedence over those earlier in the list."
msgstr ""

#: ../../using/cmdline.rst:919
msgid ""
"PYTHONWARNINGS=default  # Warn once per call location\n"
"PYTHONWARNINGS=error    # Convert to exceptions\n"
"PYTHONWARNINGS=always   # Warn every time\n"
"PYTHONWARNINGS=all      # Same as PYTHONWARNINGS=always\n"
"PYTHONWARNINGS=module   # Warn once per calling module\n"
"PYTHONWARNINGS=once     # Warn once per Python process\n"
"PYTHONWARNINGS=ignore   # Never warn"
msgstr ""

#: ../../using/cmdline.rst:933
msgid ""
"If this environment variable is set to a non-empty string, :func:"
"`faulthandler.enable` is called at startup: install a handler for :const:"
"`~signal.SIGSEGV`, :const:`~signal.SIGFPE`, :const:`~signal.SIGABRT`, :const:"
"`~signal.SIGBUS` and :const:`~signal.SIGILL` signals to dump the Python "
"traceback. This is equivalent to :option:`-X` ``faulthandler`` option."
msgstr ""

#: ../../using/cmdline.rst:945
msgid ""
"If this environment variable is set to a non-empty string, start tracing "
"Python memory allocations using the :mod:`tracemalloc` module. The value of "
"the variable is the maximum number of frames stored in a traceback of a "
"trace. For example, ``PYTHONTRACEMALLOC=1`` stores only the most recent "
"frame. See the :func:`tracemalloc.start` function for more information. This "
"is equivalent to setting the :option:`-X` ``tracemalloc`` option."
msgstr ""

#: ../../using/cmdline.rst:958
msgid ""
"If this environment variable is set to a non-empty string, Python will show "
"how long each import takes. This is equivalent to setting the :option:`-X` "
"``importtime`` option."
msgstr ""

#: ../../using/cmdline.rst:967
msgid ""
"If this environment variable is set to a non-empty string, enable the :ref:"
"`debug mode <asyncio-debug-mode>` of the :mod:`asyncio` module."
msgstr ""
"この環境変数が空でない文字列に設定された場合、:mod:`asyncio` モジュールの :"
"ref:`デバッグモード <asyncio-debug-mode>` が有効化されます。"

#: ../../using/cmdline.rst:975
msgid "Set the Python memory allocators and/or install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:977
msgid "Set the family of memory allocators used by Python:"
msgstr ""

#: ../../using/cmdline.rst:979
msgid ""
"``default``: use the :ref:`default memory allocators <default-memory-"
"allocators>`."
msgstr ""

#: ../../using/cmdline.rst:981
msgid ""
"``malloc``: use the :c:func:`malloc` function of the C library for all "
"domains (:c:macro:`PYMEM_DOMAIN_RAW`, :c:macro:`PYMEM_DOMAIN_MEM`, :c:macro:"
"`PYMEM_DOMAIN_OBJ`)."
msgstr ""

#: ../../using/cmdline.rst:984
msgid ""
"``pymalloc``: use the :ref:`pymalloc allocator <pymalloc>` for :c:macro:"
"`PYMEM_DOMAIN_MEM` and :c:macro:`PYMEM_DOMAIN_OBJ` domains and use the :c:"
"func:`malloc` function for the :c:macro:`PYMEM_DOMAIN_RAW` domain."
msgstr ""

#: ../../using/cmdline.rst:987
msgid ""
"``mimalloc``: use the :ref:`mimalloc allocator <mimalloc>` for :c:macro:"
"`PYMEM_DOMAIN_MEM` and :c:macro:`PYMEM_DOMAIN_OBJ` domains and use the :c:"
"func:`malloc` function for the :c:macro:`PYMEM_DOMAIN_RAW` domain."
msgstr ""

#: ../../using/cmdline.rst:991
msgid "Install :ref:`debug hooks <pymem-debug-hooks>`:"
msgstr ""

#: ../../using/cmdline.rst:993
msgid ""
"``debug``: install debug hooks on top of the :ref:`default memory allocators "
"<default-memory-allocators>`."
msgstr ""

#: ../../using/cmdline.rst:995
msgid "``malloc_debug``: same as ``malloc`` but also install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:996
msgid "``pymalloc_debug``: same as ``pymalloc`` but also install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:997
msgid "``mimalloc_debug``: same as ``mimalloc`` but also install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:1001
msgid "Added the ``\"default\"`` allocator."
msgstr ""

#: ../../using/cmdline.rst:1007
msgid ""
"If set to a non-empty string, Python will print statistics of the :ref:"
"`pymalloc memory allocator <pymalloc>` every time a new pymalloc object "
"arena is created, and on shutdown."
msgstr ""
"空でない文字列に設定されると、Python は新たなオブジェクトアリーナが生成される"
"時と、シャットダウン時に :ref:`pymalloc メモリアロケータ <pymalloc>` の統計情"
"報を表示します。"

#: ../../using/cmdline.rst:1011
msgid ""
"This variable is ignored if the :envvar:`PYTHONMALLOC` environment variable "
"is used to force the :c:func:`malloc` allocator of the C library, or if "
"Python is configured without ``pymalloc`` support."
msgstr ""

#: ../../using/cmdline.rst:1015
msgid ""
"This variable can now also be used on Python compiled in release mode. It "
"now has no effect if set to an empty string."
msgstr ""

#: ../../using/cmdline.rst:1022
msgid ""
"If set to a non-empty string, the default :term:`filesystem encoding and "
"error handler` mode will revert to their pre-3.6 values of 'mbcs' and "
"'replace', respectively.  Otherwise, the new defaults 'utf-8' and "
"'surrogatepass' are used."
msgstr ""

#: ../../using/cmdline.rst:1027
msgid ""
"This may also be enabled at runtime with :func:`sys."
"_enablelegacywindowsfsencoding`."
msgstr ""

#: ../../using/cmdline.rst:1030 ../../using/cmdline.rst:1044
#: ../../using/cmdline.rst:1095
msgid "Availability"
msgstr ""

#: ../../using/cmdline.rst:1032
msgid "See :pep:`529` for more details."
msgstr "より詳しくは :pep:`529` を参照してください。"

#: ../../using/cmdline.rst:1037
msgid ""
"If set to a non-empty string, does not use the new console reader and "
"writer. This means that Unicode characters will be encoded according to the "
"active console code page, rather than using utf-8."
msgstr ""

#: ../../using/cmdline.rst:1041
msgid ""
"This variable is ignored if the standard streams are redirected (to files or "
"pipes) rather than referring to console buffers."
msgstr ""

#: ../../using/cmdline.rst:1051
msgid ""
"If set to the value ``0``, causes the main Python command line application "
"to skip coercing the legacy ASCII-based C and POSIX locales to a more "
"capable UTF-8 based alternative."
msgstr ""

#: ../../using/cmdline.rst:1055
msgid ""
"If this variable is *not* set (or is set to a value other than ``0``), the "
"``LC_ALL`` locale override environment variable is also not set, and the "
"current locale reported for the ``LC_CTYPE`` category is either the default "
"``C`` locale, or else the explicitly ASCII-based ``POSIX`` locale, then the "
"Python CLI will attempt to configure the following locales for the "
"``LC_CTYPE`` category in the order listed before loading the interpreter "
"runtime:"
msgstr ""

#: ../../using/cmdline.rst:1063
msgid "``C.UTF-8``"
msgstr "``C.UTF-8``"

#: ../../using/cmdline.rst:1064
msgid "``C.utf8``"
msgstr "``C.utf8``"

#: ../../using/cmdline.rst:1065
msgid "``UTF-8``"
msgstr "``UTF-8``"

#: ../../using/cmdline.rst:1067
msgid ""
"If setting one of these locale categories succeeds, then the ``LC_CTYPE`` "
"environment variable will also be set accordingly in the current process "
"environment before the Python runtime is initialized. This ensures that in "
"addition to being seen by both the interpreter itself and other locale-aware "
"components running in the same process (such as the GNU ``readline`` "
"library), the updated setting is also seen in subprocesses (regardless of "
"whether or not those processes are running a Python interpreter), as well as "
"in operations that query the environment rather than the current C locale "
"(such as Python's own :func:`locale.getdefaultlocale`)."
msgstr ""

#: ../../using/cmdline.rst:1077
msgid ""
"Configuring one of these locales (either explicitly or via the above "
"implicit locale coercion) automatically enables the ``surrogateescape`` :ref:"
"`error handler <error-handlers>` for :data:`sys.stdin` and :data:`sys."
"stdout` (:data:`sys.stderr` continues to use ``backslashreplace`` as it does "
"in any other locale). This stream handling behavior can be overridden using :"
"envvar:`PYTHONIOENCODING` as usual."
msgstr ""

#: ../../using/cmdline.rst:1084
msgid ""
"For debugging purposes, setting ``PYTHONCOERCECLOCALE=warn`` will cause "
"Python to emit warning messages on ``stderr`` if either the locale coercion "
"activates, or else if a locale that *would* have triggered coercion is still "
"active when the Python runtime is initialized."
msgstr ""

#: ../../using/cmdline.rst:1089
msgid ""
"Also note that even when locale coercion is disabled, or when it fails to "
"find a suitable target locale, :envvar:`PYTHONUTF8` will still activate by "
"default in legacy ASCII-based locales. Both features must be disabled in "
"order to force the interpreter to use ``ASCII`` instead of ``UTF-8`` for "
"system interfaces."
msgstr ""

#: ../../using/cmdline.rst:1097
msgid "See :pep:`538` for more details."
msgstr "より詳しくは :pep:`538` を参照をしてください。"

#: ../../using/cmdline.rst:1103
msgid ""
"If this environment variable is set to a non-empty string, enable :ref:"
"`Python Development Mode <devmode>`, introducing additional runtime checks "
"that are too expensive to be enabled by default. This is equivalent to "
"setting the :option:`-X` ``dev`` option."
msgstr ""

#: ../../using/cmdline.rst:1112
msgid "If set to ``1``, enable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""

#: ../../using/cmdline.rst:1114
msgid "If set to ``0``, disable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""

#: ../../using/cmdline.rst:1116
msgid ""
"Setting any other non-empty string causes an error during interpreter "
"initialisation."
msgstr ""

#: ../../using/cmdline.rst:1123
msgid ""
"If this environment variable is set to a non-empty string, issue a :class:"
"`EncodingWarning` when the locale-specific default encoding is used."
msgstr ""

#: ../../using/cmdline.rst:1126
msgid "See :ref:`io-encoding-warning` for details."
msgstr "詳細は :ref:`io-encoding-warning` を参照してください。"

#: ../../using/cmdline.rst:1132
msgid ""
"If this variable is set, it disables the inclusion of the tables mapping "
"extra location information (end line, start column offset and end column "
"offset) to every instruction in code objects. This is useful when smaller "
"code objects and pyc files are desired as well as suppressing the extra "
"visual location indicators when the interpreter displays tracebacks."
msgstr ""

#: ../../using/cmdline.rst:1142
msgid ""
"If this variable is set to a nonzero value, it enables support for the Linux "
"``perf`` profiler so Python calls can be detected by it."
msgstr ""

#: ../../using/cmdline.rst:1145 ../../using/cmdline.rst:1158
msgid "If set to ``0``, disable Linux ``perf`` profiler support."
msgstr ""

#: ../../using/cmdline.rst:1147
msgid ""
"See also the :option:`-X perf <-X>` command-line option and :ref:"
"`perf_profiling`."
msgstr ""

#: ../../using/cmdline.rst:1154
msgid ""
"If this variable is set to a nonzero value, it enables support for the Linux "
"``perf`` profiler so Python calls can be detected by it using DWARF "
"information."
msgstr ""

#: ../../using/cmdline.rst:1160
msgid ""
"See also the :option:`-X perf_jit <-X>` command-line option and :ref:"
"`perf_profiling`."
msgstr ""

#: ../../using/cmdline.rst:1169
msgid ""
"If this variable is set to a positive integer, it overrides the return "
"values of :func:`os.cpu_count` and :func:`os.process_cpu_count`."
msgstr ""

#: ../../using/cmdline.rst:1172
msgid "See also the :option:`-X cpu_count <-X>` command-line option."
msgstr ""

#: ../../using/cmdline.rst:1178
msgid ""
"If this variable is set to ``on`` or ``off``, it determines whether or not "
"frozen modules are ignored by the import machinery.  A value of ``on`` means "
"they get imported and ``off`` means they are ignored.  The default is ``on`` "
"for non-debug builds (the normal case) and ``off`` for debug builds. Note "
"that the :mod:`!importlib_bootstrap` and :mod:`!"
"importlib_bootstrap_external` frozen modules are always used, even if this "
"flag is set to ``off``."
msgstr ""

#: ../../using/cmdline.rst:1186
msgid "See also the :option:`-X frozen_modules <-X>` command-line option."
msgstr ""

#: ../../using/cmdline.rst:1192
msgid ""
"If this variable is set to ``1``, the interpreter will colorize various "
"kinds of output. Setting it to ``0`` deactivates this behavior. See also :"
"ref:`using-on-controlling-color`."
msgstr ""

#: ../../using/cmdline.rst:1200
msgid ""
"If this variable is set to ``1``, the interpreter will not attempt to load "
"the Python-based :term:`REPL` that requires :mod:`curses` and :mod:"
"`readline`, and will instead use the traditional parser-based :term:`REPL`."
msgstr ""

#: ../../using/cmdline.rst:1209
msgid ""
"This environment variable can be used to set the location of a ``."
"python_history`` file (by default, it is ``.python_history`` in the user's "
"home directory)."
msgstr ""

#: ../../using/cmdline.rst:1217
msgid ""
"If this variable is set to ``1``, the global interpreter lock (GIL) will be "
"forced on. Setting it to ``0`` forces the GIL off (needs Python configured "
"with the :option:`--disable-gil` build option)."
msgstr ""

#: ../../using/cmdline.rst:1221
msgid ""
"See also the :option:`-X gil <-X>` command-line option, which takes "
"precedence over this variable, and :ref:`whatsnew313-free-threaded-cpython`."
msgstr ""

#: ../../using/cmdline.rst:1227
msgid "Debug-mode variables"
msgstr "デバッグモード変数"

#: ../../using/cmdline.rst:1231
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter."
msgstr ""
"設定された場合、 Python はインタプリタのシャットダウン後に残っているオブジェ"
"クトと参照カウントをダンプします。"

#: ../../using/cmdline.rst:1234 ../../using/cmdline.rst:1242
msgid ""
"Needs Python configured with the :option:`--with-trace-refs` build option."
msgstr ""

#: ../../using/cmdline.rst:1238
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter into a file under the path given as the value "
"to this environment variable."
msgstr ""

#: ../../using/cmdline.rst:1248
msgid ""
"If this variable is set to a module, that module will be imported early in "
"the interpreter lifecycle, before the :mod:`site` module is executed, and "
"before the :mod:`__main__` module is created. Therefore, the imported module "
"is not treated as :mod:`__main__`."
msgstr ""

#: ../../using/cmdline.rst:1253
msgid "This can be used to execute code early during Python initialization."
msgstr ""

#: ../../using/cmdline.rst:1255
msgid ""
"To import a submodule, use ``package.module`` as the value, like in an "
"import statement."
msgstr ""

#: ../../using/cmdline.rst:1258
msgid ""
"See also the :option:`-X presite <-X>` command-line option, which takes "
"precedence over this variable."
msgstr ""

#: ../../using/cmdline.rst:1261
msgid "Needs Python configured with the :option:`--with-pydebug` build option."
msgstr ""
