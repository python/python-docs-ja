# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:20+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../using/cmdline.rst:9
msgid "Command line and environment"
msgstr "コマンドラインと環境"

#: ../../using/cmdline.rst:11
msgid ""
"The CPython interpreter scans the command line and the environment for "
"various settings."
msgstr ""
"CPython インタプリタはコマンドラインと環境を読み取って様々な設定を行ないま"
"す。"

#: ../../using/cmdline.rst:16
msgid ""
"Other implementations' command line schemes may differ.  See :ref:"
"`implementations` for further resources."
msgstr ""
"他の実装のコマンドラインスキームは CPython とは異なります。さらなる情報は :"
"ref:`implementations` を参照してください。"

#: ../../using/cmdline.rst:23
msgid "Command line"
msgstr "コマンドライン"

#: ../../using/cmdline.rst:25
msgid "When invoking Python, you may specify any of these options::"
msgstr "Python を起動するとき、以下のうち任意のオプションを指定できます::"

#: ../../using/cmdline.rst:29
msgid ""
"The most common use case is, of course, a simple invocation of a script::"
msgstr ""
"もちろん、もっとも一般的な利用方法は、単純にスクリプトを起動することです::"

#: ../../using/cmdline.rst:37
msgid "Interface options"
msgstr "インターフェイスオプション"

#: ../../using/cmdline.rst:39
msgid ""
"The interpreter interface resembles that of the UNIX shell, but provides "
"some additional methods of invocation:"
msgstr ""
"インタプリタのインターフェイスは UNIX シェルのものに似ていますが、より多くの"
"起動方法を提供しています:"

#: ../../using/cmdline.rst:42
msgid ""
"When called with standard input connected to a tty device, it prompts for "
"commands and executes them until an EOF (an end-of-file character, you can "
"produce that with :kbd:`Ctrl-D` on UNIX or :kbd:`Ctrl-Z, Enter` on Windows) "
"is read."
msgstr ""
"tty デバイスに接続された標準入力とともに起動された場合、 EOF (end-of-file 文"
"字。 UNIX では :kbd:`Ctrl-D` で、Windows では :kbd:`Ctrl-Z, Enter` で入力可"
"能) を受け取るまで、コマンドを受け取り、それを実行します。"

#: ../../using/cmdline.rst:45
msgid ""
"When called with a file name argument or with a file as standard input, it "
"reads and executes a script from that file."
msgstr ""
"ファイル名引数か、標準入力としてファイルを渡された場合、そのファイルからスク"
"リプトを読み込んで実行します。"

#: ../../using/cmdline.rst:47
msgid ""
"When called with a directory name argument, it reads and executes an "
"appropriately named script from that directory."
msgstr ""
"ディレクトリ名を引数に受け取った場合、そのディレクトリから適切な名前のスクリ"
"プトファイルを読み込んで実行します。"

#: ../../using/cmdline.rst:49
msgid ""
"When called with ``-c command``, it executes the Python statement(s) given "
"as *command*.  Here *command* may contain multiple statements separated by "
"newlines. Leading whitespace is significant in Python statements!"
msgstr ""
"``-c コマンド`` オプションを利用して起動された場合、 *コマンド* として渡され"
"た Python の文を実行します。 *コマンド* の部分には改行で区切られた複数行を指"
"定することもできます。行の先頭の空白文字は Python 文の重要要素です！"

#: ../../using/cmdline.rst:52
msgid ""
"When called with ``-m module-name``, the given module is located on the "
"Python module path and executed as a script."
msgstr ""
"``-m モジュール名`` として Python モジュールパスにあるモジュールを指定された"
"場合、そのモジュールをスクリプトとして実行します。"

#: ../../using/cmdline.rst:55
msgid ""
"In non-interactive mode, the entire input is parsed before it is executed."
msgstr "非インタラクティブモードでは、入力の全体が実行前にパースされます。"

#: ../../using/cmdline.rst:57
msgid ""
"An interface option terminates the list of options consumed by the "
"interpreter, all consecutive arguments will end up in :data:`sys.argv` -- "
"note that the first element, subscript zero (``sys.argv[0]``), is a string "
"reflecting the program's source."
msgstr ""
"インタプリタによって消費されるオプションリストが終了したあと、継続する全ての"
"引数は :data:`sys.argv` に渡ります。 -- ただし、添字 0 の先頭要素(``sys."
"argv[0]``) はプログラムのソース自体を示す文字列です。"

#: ../../using/cmdline.rst:64
msgid ""
"Execute the Python code in *command*.  *command* can be one or more "
"statements separated by newlines, with significant leading whitespace as in "
"normal module code."
msgstr ""
"*command* 内の Python コードを実行します。 *command* は改行によって区切られた"
"1行以上の文です。通常のモジュールのコードと同じく、行頭の空白文字は意味を持ち"
"ます。"

#: ../../using/cmdline.rst:68
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-"
"c\"`` and the current directory will be added to the start of :data:`sys."
"path` (allowing modules in that directory to be imported as top level "
"modules)."
msgstr ""
"このオプションが指定された場合、 :data:`sys.argv` の最初の要素は ``\"-c\"`` "
"になり、カレントディレクトリが :data:`sys.path` の先頭に追加されます (その"
"ディレクトリにあるモジュールをトップレベルモジュールとして import 出来るよう"
"になります)。"

#: ../../using/cmdline.rst:76
msgid ""
"Search :data:`sys.path` for the named module and execute its contents as "
"the :mod:`__main__` module."
msgstr ""
":data:`sys.path` から指定されたモジュール名のモジュールを探し、その内容を :"
"mod:`__main__` モジュールとして実行します。"

#: ../../using/cmdline.rst:79
msgid ""
"Since the argument is a *module* name, you must not give a file extension "
"(``.py``).  The module name should be a valid absolute Python module name, "
"but the implementation may not always enforce this (e.g. it may allow you to "
"use a name that includes a hyphen)."
msgstr ""
"引数は *module* 名なので、拡張子 (``.py``) を含めてはいけません。モジュール名"
"は有効な Python の絶対モジュール名 (absolute module name) であるべきですが、"
"実装がそれを強制しているとは限りません (例えば、ハイフンを名前に含める事を許"
"可するかもしれません)。"

#: ../../using/cmdline.rst:84
msgid ""
"Package names (including namespace packages) are also permitted. When a "
"package name is supplied instead of a normal module, the interpreter will "
"execute ``<pkg>.__main__`` as the main module. This behaviour is "
"deliberately similar to the handling of directories and zipfiles that are "
"passed to the interpreter as the script argument."
msgstr ""
"パッケージ名 (名前空間パッケージも含む) でも構いません。通常のモジュールの代"
"わりにパッケージ名が与えられた場合、インタプリタは ``<pkg>.__main__`` を "
"main モジュールとして実行します。この挙動はスクリプト引数として渡されたディレ"
"クトリや zip ファイルをインタプリタが処理するのと意図的に同じにしています。"

#: ../../using/cmdline.rst:93
msgid ""
"This option cannot be used with built-in modules and extension modules "
"written in C, since they do not have Python module files. However, it can "
"still be used for precompiled modules, even if the original source file is "
"not available."
msgstr ""
"このオプションは組み込みモジュールや C で書かれた拡張モジュールには利用できま"
"せん。 Python モジュールファイルを持っていないからです。しかし、コンパイル済"
"みのモジュールは、たとえ元のソースファイルがなくても利用可能です。"

#: ../../using/cmdline.rst:98
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"full path to the module file (while the module file is being located, the "
"first element will be set to ``\"-m\"``). As with the :option:`-c` option, "
"the current directory will be added to the start of :data:`sys.path`."
msgstr ""
"このオプションが指定された場合、 :data:`sys.argv` の最初の要素はモジュール"
"ファイルのフルパスになります (モジュールファイルを検索している間、最初の要素"
"は ``\"-m\"`` に設定されます)。 :option:`-c` オプションと同様に、カレントディ"
"レクトリが :data:`sys.path` の先頭に追加されます。"

#: ../../using/cmdline.rst:103
msgid ""
"Many standard library modules contain code that is invoked on their "
"execution as a script.  An example is the :mod:`timeit` module::"
msgstr ""
"多くの標準ライブラリモジュールにはスクリプトとして実行された時のためのコード"
"があります。例えば、 :mod:`timeit` モジュールは次のように実行可能です::"

#: ../../using/cmdline.rst:111
msgid ":func:`runpy.run_module`"
msgstr ":func:`runpy.run_module`"

#: ../../using/cmdline.rst:111 ../../using/cmdline.rst:153
msgid "Equivalent functionality directly available to Python code"
msgstr "Python コードで直接使える等価な機能"

#: ../../using/cmdline.rst:113
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ":pep:`338` - モジュールをスクリプトとして実行する"

#: ../../using/cmdline.rst:116
msgid "Supply the package name to run a ``__main__`` submodule."
msgstr "``__main__`` サブモジュールを実行するパッケージ名が提供されました。"

#: ../../using/cmdline.rst:119
msgid "namespace packages are also supported"
msgstr "名前空間パッケージもサポートされました"

#: ../../using/cmdline.rst:125
msgid ""
"Read commands from standard input (:data:`sys.stdin`).  If standard input is "
"a terminal, :option:`-i` is implied."
msgstr ""
"標準入力 (:data:`sys.stdin`) からコマンドを読み込みます。標準入力がターミナル"
"だった場合、暗黙的に :option:`-i` オプションが指定されます。"

#: ../../using/cmdline.rst:128
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be ``\"-"
"\"`` and the current directory will be added to the start of :data:`sys."
"path`."
msgstr ""
"このオプションが指定された場合、 :data:`sys.argv` の最初の要素は ``\"-\"`` "
"で、カレントディレクトリが :data:`sys.path` の先頭に追加されます。"

#: ../../using/cmdline.rst:135
msgid ""
"Execute the Python code contained in *script*, which must be a filesystem "
"path (absolute or relative) referring to either a Python file, a directory "
"containing a ``__main__.py`` file, or a zipfile containing a ``__main__.py`` "
"file."
msgstr ""
"*script* 内の Python コードを実行します。 *script* は、Python ファイル、 "
"``__main__.py`` ファイルがあるディレクトリ、 ``__main__.py`` ファイルがある "
"zip ファイルのいずれかの、ファイルシステム上の (絶対または相対) パスでなけれ"
"ばなりません。"

#: ../../using/cmdline.rst:140
msgid ""
"If this option is given, the first element of :data:`sys.argv` will be the "
"script name as given on the command line."
msgstr ""
"このオプションが指定された場合、 :data:`sys.argv` の最初の要素はコマンドライ"
"ンで指定されたスクリプト名になります。"

#: ../../using/cmdline.rst:143
msgid ""
"If the script name refers directly to a Python file, the directory "
"containing that file is added to the start of :data:`sys.path`, and the file "
"is executed as the :mod:`__main__` module."
msgstr ""
"スクリプト名が Python ファイルを直接指定していた場合、そのファイルを含むディ"
"レクトリが :data:`sys.path` の先頭に追加され、そのファイルは :mod:`__main__` "
"モジュールとして実行されます。"

#: ../../using/cmdline.rst:147
msgid ""
"If the script name refers to a directory or zipfile, the script name is "
"added to the start of :data:`sys.path` and the ``__main__.py`` file in that "
"location is executed as the :mod:`__main__` module."
msgstr ""
"スクリプト名がディレクトリか zip ファイルを指定していた場合、スクリプト名が :"
"data:`sys.path` に追加され、その中の ``__main__.py`` ファイルが :mod:"
"`__main__` モジュールとして実行されます。"

#: ../../using/cmdline.rst:152
msgid ":func:`runpy.run_path`"
msgstr ":func:`runpy.run_path`"

#: ../../using/cmdline.rst:156
msgid ""
"If no interface option is given, :option:`-i` is implied, ``sys.argv[0]`` is "
"an empty string (``\"\"``) and the current directory will be added to the "
"start of :data:`sys.path`.  Also, tab-completion and history editing is "
"automatically enabled, if available on your platform (see :ref:`rlcompleter-"
"config`)."
msgstr ""
"インターフェイスオプションが与えられなかった場合、:option:`-i` が暗黙的に指定"
"され、``sys.argv[0]`` が空の文字列 (``\"\"``) になり、 現在のディレクトリが :"
"data:`sys.path` の先頭に追加されます。また、利用可能であればタブ補完と履歴編"
"集が自動的に有効かされます (:ref:`rlcompleter-config` を参照してください)。"

#: ../../using/cmdline.rst:162
msgid ":ref:`tut-invoking`"
msgstr ":ref:`tut-invoking`"

#: ../../using/cmdline.rst:164
msgid "Automatic enabling of tab-completion and history editing."
msgstr "タブ補完と履歴の編集が自動的に有効化されます。"

#: ../../using/cmdline.rst:169
msgid "Generic options"
msgstr "一般オプション"

#: ../../using/cmdline.rst:175
msgid "Print a short description of all command line options."
msgstr "全コマンドラインオプションの短い説明を出力します。"

#: ../../using/cmdline.rst:181
msgid "Print the Python version number and exit.  Example output could be:"
msgstr "Python のバージョン番号を表示して終了します。出力の例:"

#: ../../using/cmdline.rst:187
msgid "When given twice, print more information about the build, like:"
msgstr "2つ指定すると、次のようにより多くのビルドの情報を表示します:"

#: ../../using/cmdline.rst:194
msgid "The ``-VV`` option."
msgstr "``-VV`` オプション。"

#: ../../using/cmdline.rst:200
msgid "Miscellaneous options"
msgstr "その他のオプション"

#: ../../using/cmdline.rst:204
msgid ""
"Issue a warning when comparing :class:`bytes` or :class:`bytearray` with :"
"class:`str` or :class:`bytes` with :class:`int`.  Issue an error when the "
"option is given twice (:option:`!-bb`)."
msgstr ""
":class:`bytes` または :class:`bytearray` を :class:`str` と比較した場合、また"
"は、 :class:`bytes` を :class:`int` と比較した場合に警告を発生させます。この"
"オプションを2度指定した場合 (:option:`!-bb`) は、エラーを発生させます。"

#: ../../using/cmdline.rst:208
msgid "Affects comparisons of :class:`bytes` with :class:`int`."
msgstr ":class:`bytes` と :class:`int` の比較に影響します。"

#: ../../using/cmdline.rst:213
msgid ""
"If given, Python won't try to write ``.pyc`` files on the import of source "
"modules.  See also :envvar:`PYTHONDONTWRITEBYTECODE`."
msgstr ""
"与えられた場合、Python はソースモジュールのインポート時に ``.pyc`` ファイルの"
"作成を試みません。 :envvar:`PYTHONDONTWRITEBYTECODE` 環境変数も参照してくださ"
"い。"

#: ../../using/cmdline.rst:219
msgid ""
"Turn on parser debugging output (for wizards only, depending on compilation "
"options).  See also :envvar:`PYTHONDEBUG`."
msgstr ""
"パーサーのデバッグ出力を有効にします。(エキスパート専用です。コンパイルオプ"
"ションに依存します)。 :envvar:`PYTHONDEBUG` も参照してください。"

#: ../../using/cmdline.rst:225
msgid ""
"Ignore all :envvar:`PYTHON*` environment variables, e.g. :envvar:"
"`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr ""
"全ての :envvar:`PYTHON*` 環境変数を無視します。例えば、 :envvar:`PYTHONPATH` "
"や :envvar:`PYTHONHOME` などです。"

#: ../../using/cmdline.rst:231
msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, even "
"when :data:`sys.stdin` does not appear to be a terminal.  The :envvar:"
"`PYTHONSTARTUP` file is not read."
msgstr ""
"最初の引数にスクリプトが指定された場合や :option:`-c` オプションが利用された"
"場合、 :data:`sys.stdin` がターミナルに出力されない場合も含めて、スクリプトか"
"コマンドを実行した後にインタラクティブモードに入ります。 :envvar:"
"`PYTHONSTARTUP` ファイルは読み込みません。"

#: ../../using/cmdline.rst:236
msgid ""
"This can be useful to inspect global variables or a stack trace when a "
"script raises an exception.  See also :envvar:`PYTHONINSPECT`."
msgstr ""
"このオプションはグローバル変数や、スクリプトが例外を発生させるときにそのス"
"タックトレースを調べるのに便利です。 :envvar:`PYTHONINSPECT` も参照してくださ"
"い。"

#: ../../using/cmdline.rst:242
msgid ""
"Run Python in isolated mode. This also implies -E and -s. In isolated mode :"
"data:`sys.path` contains neither the script's directory nor the user's site-"
"packages directory. All :envvar:`PYTHON*` environment variables are ignored, "
"too. Further restrictions may be imposed to prevent the user from injecting "
"malicious code."
msgstr ""
"Python を隔離モードで実行します。-E と -s も暗黙的に指定されます。隔離モード"
"では :data:`sys.path` はスクリプトのディレクトリやユーザのサイトパッケージの"
"ディレクトリを含みません。全 :envvar:`PYTHON*` 環境変数も無視されます。ユーザ"
"が悪意のあるコードを注入するのを防ぐために更なる制限が課されるかもしれませ"
"ん。"

#: ../../using/cmdline.rst:253
msgid ""
"Remove assert statements and any code conditional on the value of :const:"
"`__debug__`.  Augment the filename for compiled (:term:`bytecode`) files by "
"adding ``.opt-1`` before the ``.pyc`` extension (see :pep:`488`).  See also :"
"envvar:`PYTHONOPTIMIZE`."
msgstr ""

#: ../../using/cmdline.rst:258 ../../using/cmdline.rst:268
msgid "Modify ``.pyc`` filenames according to :pep:`488`."
msgstr ":pep:`488` に従って ``.pyc`` ファイル名を変更します。"

#: ../../using/cmdline.rst:264
msgid ""
"Do :option:`-O` and also discard docstrings.  Augment the filename for "
"compiled (:term:`bytecode`) files by adding ``.opt-2`` before the ``.pyc`` "
"extension (see :pep:`488`)."
msgstr ""

#: ../../using/cmdline.rst:274
msgid ""
"Don't display the copyright and version messages even in interactive mode."
msgstr ""
"インタラクティブモードでも copyright とバージョンのメッセージを表示しません。"

#: ../../using/cmdline.rst:281
msgid ""
"Kept for compatibility.  On Python 3.3 and greater, hash randomization is "
"turned on by default."
msgstr ""
"互換性のために残されています。Python 3.3 以降ではデフォルトでハッシュランダム"
"化されます。"

#: ../../using/cmdline.rst:284
msgid ""
"On previous versions of Python, this option turns on hash randomization, so "
"that the :meth:`__hash__` values of str, bytes and datetime are \"salted\" "
"with an unpredictable random value.  Although they remain constant within an "
"individual Python process, they are not predictable between repeated "
"invocations of Python."
msgstr ""
"以前のバージョンの Python では、このオプションはハッシュのランダム化を有効に"
"します。これにより、 str, bytes, datetime 型の :meth:`__hash__` 値が予測不可"
"能な乱数で \"塩漬け\" されます。ハッシュ値は各 Python プロセスでは固定です"
"が、 Python を繰り返し再実行した場合は別の予測不能な値になります。"

#: ../../using/cmdline.rst:290
msgid ""
"Hash randomization is intended to provide protection against a denial-of-"
"service caused by carefully-chosen inputs that exploit the worst case "
"performance of a dict construction, O(n^2) complexity.  See http://www.ocert."
"org/advisories/ocert-2011-003.html for details."
msgstr ""
"ハッシュのランダム化は、dict の生成コストが最悪の O(n^2) になるように注意深く"
"選ばれた入力値を与えることによる DoS 攻撃への防御策として提供されています。詳"
"細は http://www.ocert.org/advisories/ocert-2011-003.html を参照してください。"

#: ../../using/cmdline.rst:295
msgid ""
":envvar:`PYTHONHASHSEED` allows you to set a fixed value for the hash seed "
"secret."
msgstr ""
":envvar:`PYTHONHASHSEED` によってハッシュシードの固定値を秘密にすることが出来"
"ます。"

#: ../../using/cmdline.rst:303
msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to :data:"
"`sys.path`."
msgstr ""
":data:`user site-packages directory <site.USER_SITE>` を :data:`sys.path` に"
"追加しません。"

#: ../../using/cmdline.rst:308 ../../using/cmdline.rst:599
#: ../../using/cmdline.rst:611
msgid ":pep:`370` -- Per user site-packages directory"
msgstr ":pep:`370` -- ユーザごとの ``site-packages`` ディレクトリ"

#: ../../using/cmdline.rst:313
msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call :func:`site."
"main` if you want them to be triggered)."
msgstr ""
":mod:`site` モジュールの import と、そのモジュールが行なっていた site ごと"
"の :data:`sys.path` への操作を無効にします。後に :mod:`site` を明示的に "
"import しても、これらの操作は実行されません (実行したい場合は、 :func:`site."
"main` を呼び出してください)。"

#: ../../using/cmdline.rst:321
msgid ""
"Force the binary layer of the stdout and stderr streams (which is available "
"as their ``buffer`` attribute) to be unbuffered. The text I/O layer will "
"still be line-buffered if writing to the console, or block-buffered if "
"redirected to a non-interactive file."
msgstr ""
"標準出力と標準エラー出力のストリームのバイナリーレイヤー (``buffer`` 属性とし"
"て利用可能) がバッファされないよう強制します。それでもテキスト I/O レイヤー"
"は、コンソールに出力する場合はラインバッファされ、日対話的なファイルにリダイ"
"レクトされた場合はブロックバッファされます。"

#: ../../using/cmdline.rst:326
msgid "See also :envvar:`PYTHONUNBUFFERED`."
msgstr ":envvar:`PYTHONUNBUFFERED` も参照してください。"

#: ../../using/cmdline.rst:331
msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  When given twice (:"
"option:`!-vv`), print a message for each file that is checked for when "
"searching for a module.  Also provides information on module cleanup at "
"exit. See also :envvar:`PYTHONVERBOSE`."
msgstr ""
"モジュールが初期化されるたびに、それがどこ(ファイル名やビルトインモジュール) "
"からロードされたのかを示すメッセージを出力します。 二重に指定された場合(:"
"option:`!-vv`)は、モジュールを検索するときにチェックされた各ファイルに対して"
"メッセージを出力します。また、終了時のモジュールクリーンアップに関する情報も"
"提供します。 :envvar:`PYTHONVERBOSE` も参照してください。"

#: ../../using/cmdline.rst:341
msgid ""
"Warning control.  Python's warning machinery by default prints warning "
"messages to :data:`sys.stderr`.  A typical warning message has the following "
"form:"
msgstr ""
"警告制御。 Python の警告機構はデフォルトでは警告メッセージを :data:`sys."
"stderr` に表示します。典型的な警告メッセージは次の書式で表示されます。"

#: ../../using/cmdline.rst:349
msgid ""
"By default, each warning is printed once for each source line where it "
"occurs.  This option controls how often warnings are printed."
msgstr ""
"デフォルトでは、各警告は発生したソース行ごとに一度だけ表示されます。このオプ"
"ションは、警告をどれくらいの頻度で表示するかを制御します。"

#: ../../using/cmdline.rst:352
msgid ""
"Multiple :option:`-W` options may be given; when a warning matches more than "
"one option, the action for the last matching option is performed.  Invalid :"
"option:`-W` options are ignored (though, a warning message is printed about "
"invalid options when the first warning is issued)."
msgstr ""
"複数の :option:`-W` オプションを指定することができます。警告が1つ以上のオプ"
"ションとマッチしたときは、最後にマッチしたオプションのアクションが有効になり"
"ます。不正な :option:`-W` オプションは無視されます (最初の警告が発生したとき"
"に、不正なオプションに対する警告メッセージが表示されます)。"

#: ../../using/cmdline.rst:357
msgid ""
"Warnings can also be controlled from within a Python program using the :mod:"
"`warnings` module."
msgstr ""
"警告は Python プログラムの中から :mod:`warnings` モジュールを利用して制御する"
"ことができます。"

#: ../../using/cmdline.rst:360
msgid ""
"The simplest form of argument is one of the following action strings (or a "
"unique abbreviation):"
msgstr ""
"引数の最もシンプルな形は、以下のアクションの文字列 (あるいはそのユニークな短"
"縮形) です:"

#: ../../using/cmdline.rst:363
msgid "``ignore``"
msgstr "``ignore``"

#: ../../using/cmdline.rst:364
msgid "Ignore all warnings."
msgstr "全ての警告を無視する。"

#: ../../using/cmdline.rst:366
msgid "``default``"
msgstr "``default``"

#: ../../using/cmdline.rst:366
msgid ""
"Explicitly request the default behavior (printing each warning once per "
"source line)."
msgstr "明示的にデフォルトの動作(ソース行ごとに1度警告を表示する)を要求する。"

#: ../../using/cmdline.rst:370
msgid "``all``"
msgstr "``all``"

#: ../../using/cmdline.rst:369
msgid ""
"Print a warning each time it occurs (this may generate many messages if a "
"warning is triggered repeatedly for the same source line, such as inside a "
"loop)."
msgstr ""
"警告が発生するたびに表示する (これは、ループの中などで同じソース行により繰り"
"返し警告が発生された場合に、大量のメッセージを表示します)。"

#: ../../using/cmdline.rst:372
msgid "``module``"
msgstr "``module``"

#: ../../using/cmdline.rst:373
msgid "Print each warning only the first time it occurs in each module."
msgstr "各モジュールで最初に発生した警告を表示する。"

#: ../../using/cmdline.rst:374
msgid "``once``"
msgstr "``once``"

#: ../../using/cmdline.rst:375
msgid "Print each warning only the first time it occurs in the program."
msgstr "プログラムで最初に発生した警告だけを表示する。"

#: ../../using/cmdline.rst:377
msgid "``error``"
msgstr "``error``"

#: ../../using/cmdline.rst:377
msgid "Raise an exception instead of printing a warning message."
msgstr "警告メッセージを表示する代わりに例外を発生させる。"

#: ../../using/cmdline.rst:379
msgid "The full form of argument is::"
msgstr "引数の完全形は次のようになります::"

#: ../../using/cmdline.rst:383
msgid ""
"Here, *action* is as explained above but only applies to messages that match "
"the remaining fields.  Empty fields match all values; trailing empty fields "
"may be omitted.  The *message* field matches the start of the warning "
"message printed; this match is case-insensitive.  The *category* field "
"matches the warning category.  This must be a class name; the match tests "
"whether the actual warning category of the message is a subclass of the "
"specified warning category.  The full class name must be given.  The "
"*module* field matches the (fully-qualified) module name; this match is case-"
"sensitive.  The *line* field matches the line number, where zero matches all "
"line numbers and is thus equivalent to an omitted line number."
msgstr ""
"ここで、 *action* は上で説明されたものですが、残りのフィールドにマッチした"
"メッセージにだけ適用されます。空のフィールドは全ての値にマッチします。空の"
"フィールドの後ろは除外されます。 *message* フィールドは表示される警告メッセー"
"ジの先頭に、大文字小文字を無視してマッチします。 *category* フィールドは警告"
"カテゴリにマッチします。これはクラス名でなければなりません。 *category* の"
"マッチは、メッセージの実際の警告カテゴリーが指定された警告カテゴリーのサブク"
"ラスかどうかをチェックします。完全なクラス名を指定しなければなりません。 "
"*module* フィールドは、(完全正規形(fully-qualified)の) モジュール名に対して"
"マッチします。このマッチは大文字小文字を区別します。 *line* フィールドは行番"
"号にマッチします。 0 は全ての行番号にマッチし、省略した時と同じです。"

#: ../../using/cmdline.rst:395
msgid ":mod:`warnings` -- the warnings module"
msgstr ":mod:`warnings` -- 警告モジュール"

#: ../../using/cmdline.rst:397
msgid ":pep:`230` -- Warning framework"
msgstr ":pep:`230` -- Warning framework"

#: ../../using/cmdline.rst:399
msgid ":envvar:`PYTHONWARNINGS`"
msgstr ":envvar:`PYTHONWARNINGS`"

#: ../../using/cmdline.rst:404
msgid ""
"Skip the first line of the source, allowing use of non-Unix forms of ``#!"
"cmd``.  This is intended for a DOS specific hack only."
msgstr ""
"Unix 以外の形式の ``#!cmd`` を使うために、ソースの最初の行をスキップします。"
"これは、DOS専用のハックのみを目的としています。"

#: ../../using/cmdline.rst:410
msgid ""
"Reserved for various implementation-specific options.  CPython currently "
"defines the following possible values:"
msgstr ""
"様々な実装固有のオプションのために予約されています。現在のところ CPython は以"
"下の値を定義しています:"

#: ../../using/cmdline.rst:413
msgid "``-X faulthandler`` to enable :mod:`faulthandler`;"
msgstr "``-X faulthandler`` は :mod:`faulthandler` を有効化します;"

#: ../../using/cmdline.rst:414
msgid ""
"``-X showrefcount`` to output the total reference count and number of used "
"memory blocks when the program finishes or after each statement in the "
"interactive interpreter. This only works on debug builds."
msgstr ""

#: ../../using/cmdline.rst:417
msgid ""
"``-X tracemalloc`` to start tracing Python memory allocations using the :mod:"
"`tracemalloc` module. By default, only the most recent frame is stored in a "
"traceback of a trace. Use ``-X tracemalloc=NFRAME`` to start tracing with a "
"traceback limit of *NFRAME* frames. See the :func:`tracemalloc.start` for "
"more information."
msgstr ""
"``-X tracemalloc`` は :mod:`tracemalloc` モジュールを用いて Python のメモリ割"
"り当てのトレースを開始します。デフォルトでは最新のフレームのみがトレースのト"
"レースバックに格納されます。最大 *NFRAME* フレームのトレースバックで トレース"
"を開始するには ``-X tracemalloc=NFRAME`` を使用してください。詳細は :func:"
"`tracemalloc.start` を参照してください。"

#: ../../using/cmdline.rst:422
msgid ""
"``-X showalloccount`` to output the total count of allocated objects for "
"each type when the program finishes. This only works when Python was built "
"with ``COUNT_ALLOCS`` defined."
msgstr ""

#: ../../using/cmdline.rst:426
msgid ""
"It also allows passing arbitrary values and retrieving them through the :"
"data:`sys._xoptions` dictionary."
msgstr ""
"任意の値を渡し、 :data:`sys._xoptions` 辞書から取り出すことも出来ます。"

#: ../../using/cmdline.rst:429
msgid "The :option:`-X` option was added."
msgstr ":option:`-X` オプションが追加されました。"

#: ../../using/cmdline.rst:432
msgid "The ``-X faulthandler`` option."
msgstr "``-X faulthandler`` オプション。"

#: ../../using/cmdline.rst:435
msgid "The ``-X showrefcount`` and ``-X tracemalloc`` options."
msgstr "``-X showrefcount`` および ``-X tracemalloc`` オプション。"

#: ../../using/cmdline.rst:438
msgid "The ``-X showalloccount`` option."
msgstr "``-X showalloccount`` オプション"

#: ../../using/cmdline.rst:443
msgid "Options you shouldn't use"
msgstr "使うべきでないオプション"

#: ../../using/cmdline.rst:447
msgid "Reserved for use by Jython_."
msgstr "Jython_ のために予約されています。"

#: ../../using/cmdline.rst:455
msgid "Environment variables"
msgstr "環境変数"

#: ../../using/cmdline.rst:457
msgid ""
"These environment variables influence Python's behavior, they are processed "
"before the command-line switches other than -E or -I.  It is customary that "
"command-line switches override environmental variables where there is a "
"conflict."
msgstr ""
"以下の環境変数は Python の挙動に影響します。環境変数は -E や -I 以外のコマン"
"ドラインスイッチの前に処理されます。衝突したときにコマンドラインスイッチが環"
"境変数をオーバーライドするのは慣例です。"

#: ../../using/cmdline.rst:464
msgid ""
"Change the location of the standard Python libraries.  By default, the "
"libraries are searched in :file:`{prefix}/lib/python{version}` and :file:"
"`{exec_prefix}/lib/python{version}`, where :file:`{prefix}` and :file:"
"`{exec_prefix}` are installation-dependent directories, both defaulting to :"
"file:`/usr/local`."
msgstr ""
"標準 Python ライブラリの場所を変更します。デフォルトでは、ライブラリは :file:"
"`{prefix}/lib/python{version}` と :file:`{exec_prefix}/lib/python{version}` "
"から検索されます。ここで、 :file:`{prefix}` と :file:`{exec_prefix}` はインス"
"トール依存のディレクトリで、両方共デフォルトでは :file:`/usr/local` です。"

#: ../../using/cmdline.rst:470
msgid ""
"When :envvar:`PYTHONHOME` is set to a single directory, its value replaces "
"both :file:`{prefix}` and :file:`{exec_prefix}`.  To specify different "
"values for these, set :envvar:`PYTHONHOME` to :file:`{prefix}:{exec_prefix}`."
msgstr ""
":envvar:`PYTHONHOME` が1つのディレクトリに設定されている場合、その値は :file:"
"`{prefix}` と :file:`{exec_prefix}` の両方を置き換えます。それらに別々の値を"
"指定したい場合は、 :envvar:`PYTHONHOME` を :file:`{prefix}:{exec_prefix}` の"
"ように指定します。"

#: ../../using/cmdline.rst:477
msgid ""
"Augment the default search path for module files.  The format is the same as "
"the shell's :envvar:`PATH`: one or more directory pathnames separated by :"
"data:`os.pathsep` (e.g. colons on Unix or semicolons on Windows). Non-"
"existent directories are silently ignored."
msgstr ""
"モジュールファイルのデフォルトの検索パスを追加します。この環境変数のフォー"
"マットはシェルの :envvar:`PATH` と同じで、 :data:`os.pathsep` (Unix ならコロ"
"ン、 Windows ならセミコロン) で区切られた1つ以上のディレクトリパスです。存在"
"しないディレクトリは警告なしに無視されます。"

#: ../../using/cmdline.rst:482
msgid ""
"In addition to normal directories, individual :envvar:`PYTHONPATH` entries "
"may refer to zipfiles containing pure Python modules (in either source or "
"compiled form). Extension modules cannot be imported from zipfiles."
msgstr ""
"通常のディレクトリに加えて、 :envvar:`PYTHONPATH` のエントリはピュアPython モ"
"ジュール(ソース形式でもコンパイルされた形式でも) を含む zip ファイルを参照す"
"ることもできます。拡張モジュールは zip ファイルの中から import することはでき"
"ません。"

#: ../../using/cmdline.rst:486
msgid ""
"The default search path is installation dependent, but generally begins "
"with :file:`{prefix}/lib/python{version}` (see :envvar:`PYTHONHOME` above).  "
"It is *always* appended to :envvar:`PYTHONPATH`."
msgstr ""
"デフォルトの検索パスはインストール依存ですが、通常は :file:`{prefix}/lib/"
"python{version}` で始まります。 (上の :envvar:`PYTHONHOME` を参照してくださ"
"い。) これは *常に* :envvar:`PYTHONPATH` に追加されます。"

#: ../../using/cmdline.rst:490
msgid ""
"An additional directory will be inserted in the search path in front of :"
"envvar:`PYTHONPATH` as described above under :ref:`using-on-interface-"
"options`. The search path can be manipulated from within a Python program as "
"the variable :data:`sys.path`."
msgstr ""
"上の :ref:`using-on-interface-options` で説明されているように、追加の検索パス"
"ディレクトリが :envvar:`PYTHONPATH` の手前に追加されます。検索パスは Python "
"プログラムから :data:`sys.path` 変数として操作することができます。"

#: ../../using/cmdline.rst:498
msgid ""
"If this is the name of a readable file, the Python commands in that file are "
"executed before the first prompt is displayed in interactive mode.  The file "
"is executed in the same namespace where interactive commands are executed so "
"that objects defined or imported in it can be used without qualification in "
"the interactive session.  You can also change the prompts :data:`sys.ps1` "
"and :data:`sys.ps2` and the hook :data:`sys.__interactivehook__` in this "
"file."
msgstr ""
"この変数が読み込み可能なファイル名の場合、対話モードで最初のプロンプトが表示"
"される前にそのファイルの Python コマンドが実行されます。\n"
"ファイル内で定義されているオブジェクトやインポートされたオブジェクトを対話"
"セッションで修飾せずに使用するために、ファイルは対話的なコマンドと同じ名前空"
"間で実行されます。\n"
"このファイル内のプロンプト :data:`sys.ps1` や :data:`sys.ps2`、ならびにフッ"
"ク :data:`sys.__interactivehook__` を変更することも出来ます。"

#: ../../using/cmdline.rst:508
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-O` option.  If set to an integer, it is equivalent to specifying :"
"option:`-O` multiple times."
msgstr ""
"この変数に空でない文字列を設定するのは :option:`-O` オプションを指定するのと"
"等価です。整数を設定した場合、 :option:`-O` を複数回指定したのと同じになりま"
"す。"

#: ../../using/cmdline.rst:515
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-d` option.  If set to an integer, it is equivalent to specifying :"
"option:`-d` multiple times."
msgstr ""
"この変数に空でない文字列を設定するのは :option:`-d` オプションを指定するのと"
"等価です。整数を指定した場合、 :option:`-d` を複数回指定したのと同じになりま"
"す。"

#: ../../using/cmdline.rst:522
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-i` option."
msgstr ""
"この変数に空でない文字列を設定するのは :option:`-i` オプションを指定するのと"
"等価です。"

#: ../../using/cmdline.rst:525
msgid ""
"This variable can also be modified by Python code using :data:`os.environ` "
"to force inspect mode on program termination."
msgstr ""
"この変数は Python コードから :data:`os.environ` を使って変更して、プログラム"
"終了時のインスペクトモードを強制することができます。"

#: ../../using/cmdline.rst:531
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-u` option."
msgstr ""
"この変数に空でない文字列を設定するのは :option:`-u` オプションを指定するのと"
"等価です。"

#: ../../using/cmdline.rst:537
msgid ""
"If this is set to a non-empty string it is equivalent to specifying the :"
"option:`-v` option.  If set to an integer, it is equivalent to specifying :"
"option:`-v` multiple times."
msgstr ""
"この変数に空でない文字列を設定するのは :option:`-v` オプションを指定するのと"
"等価です。整数を設定した場合、 :option:`-v` を複数回指定したのと同じになりま"
"す。"

#: ../../using/cmdline.rst:544
msgid ""
"If this is set, Python ignores case in :keyword:`import` statements.  This "
"only works on Windows and OS X."
msgstr ""
"この環境変数が設定されている場合、 Python は :keyword:`import` 文で大文字/小"
"文字を区別しません。 これは Windows と OS X でのみ動作します。"

#: ../../using/cmdline.rst:550
msgid ""
"If this is set to a non-empty string, Python won't try to write ``.pyc`` "
"files on the import of source modules.  This is equivalent to specifying "
"the :option:`-B` option."
msgstr ""
"この変数に空でない文字列を設定した場合、 Python はソースモジュールのインポー"
"ト時に ``.pyc`` ファイルを作成しようとはしなくなります。\n"
":option:`-B` オプションを指定するのと等価です。"

#: ../../using/cmdline.rst:557
msgid ""
"If this variable is not set or set to ``random``, a random value is used to "
"seed the hashes of str, bytes and datetime objects."
msgstr ""
"この変数が設定されていない場合や ``random`` に設定された場合、乱数値が str、"
"bytes ならびに datetime オブジェクトのハッシュのシードに使われます。"

#: ../../using/cmdline.rst:560
msgid ""
"If :envvar:`PYTHONHASHSEED` is set to an integer value, it is used as a "
"fixed seed for generating the hash() of the types covered by the hash "
"randomization."
msgstr ""
":envvar:`PYTHONHASHSEED` が整数値に設定された場合、その値はハッシュランダム化"
"が扱う型の hash() 生成の固定シードに使われます。"

#: ../../using/cmdline.rst:564
msgid ""
"Its purpose is to allow repeatable hashing, such as for selftests for the "
"interpreter itself, or to allow a cluster of python processes to share hash "
"values."
msgstr ""
"その目的は再現性のあるハッシュを可能にすることです。例えばインタープリタ自身"
"の自己テストや Python プロセスのクラスタでハッシュ値を共有するのに用います。"

#: ../../using/cmdline.rst:568
msgid ""
"The integer must be a decimal number in the range [0,4294967295].  "
"Specifying the value 0 will disable hash randomization."
msgstr ""
"整数は [0,4294967295] の十進数でなければなりません。0 を指定するとハッシュラ"
"ンダム化は無効化されます。"

#: ../../using/cmdline.rst:576
msgid ""
"If this is set before running the interpreter, it overrides the encoding "
"used for stdin/stdout/stderr, in the syntax ``encodingname:errorhandler``.  "
"Both the ``encodingname`` and the ``:errorhandler`` parts are optional and "
"have the same meaning as in :func:`str.encode`."
msgstr ""
"この変数がインタープリタ実行前に設定されていた場合、``encodingname:"
"errorhandler`` という文法で標準入力/標準出力/標準エラー出力のエンコードを上書"
"きします。 ``encodingname`` と ``:errorhandler`` の部分はどちらも任意で、:"
"func:`str.encode` と同じ意味を持ちます。"

#: ../../using/cmdline.rst:581
msgid ""
"For stderr, the ``:errorhandler`` part is ignored; the handler will always "
"be ``'backslashreplace'``."
msgstr ""
"標準エラー出力の場合、``:errorhandler`` の部分は無視されます; ハンドラは常に "
"``'backslashreplace'`` です。"

#: ../../using/cmdline.rst:584
msgid "The ``encodingname`` part is now optional."
msgstr "``encodingname`` の部分が任意になりました。"

#: ../../using/cmdline.rst:587
msgid ""
"On Windows, the encoding specified by this variable is ignored for "
"interactive console buffers unless :envvar:`PYTHONLEGACYWINDOWSSTDIO` is "
"also specified. Files and pipes redirected through the standard streams are "
"not affected."
msgstr ""

#: ../../using/cmdline.rst:594
msgid ""
"If this is set, Python won't add the :data:`user site-packages directory "
"<site.USER_SITE>` to :data:`sys.path`."
msgstr ""
"この環境変数が設定されている場合、 Python は :data:`ユーザ site-packages ディ"
"レクトリ <site.USER_SITE>` を :data:`sys.path` に追加しません。"

#: ../../using/cmdline.rst:604
msgid ""
"Defines the :data:`user base directory <site.USER_BASE>`, which is used to "
"compute the path of the :data:`user site-packages directory <site."
"USER_SITE>` and :ref:`Distutils installation paths <inst-alt-install-user>` "
"for ``python setup.py install --user``."
msgstr ""
":data:`user base directory <site.USER_BASE>` を設定します。これは ``python "
"setup.py install --user`` 時に :data:`user site-packages directory <site."
"USER_SITE>` と :ref:`Distutils installation paths <inst-alt-install-user>` の"
"パスを計算するのに使われます。 "

#: ../../using/cmdline.rst:616
msgid ""
"If this environment variable is set, ``sys.argv[0]`` will be set to its "
"value instead of the value got through the C runtime.  Only works on Mac OS "
"X."
msgstr ""
"この環境変数が設定された場合、 ``sys.argv[0]`` に、C ランタイムから取得した値"
"の代わりにこの環境変数の値が設定されます。Mac OS X でのみ動作します。"

#: ../../using/cmdline.rst:622
msgid ""
"This is equivalent to the :option:`-W` option. If set to a comma separated "
"string, it is equivalent to specifying :option:`-W` multiple times."
msgstr ""
"これは :option:`-W` オプションと等価です。カンマ区切りの文字列を設定するの"
"は :option:`-W` を複数回指定するのと等価です。"

#: ../../using/cmdline.rst:628
msgid ""
"If this environment variable is set to a non-empty string, :func:"
"`faulthandler.enable` is called at startup: install a handler for :const:"
"`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`, :const:`SIGBUS` and :const:"
"`SIGILL` signals to dump the Python traceback.  This is equivalent to :"
"option:`-X` ``faulthandler`` option."
msgstr ""
"この環境変数が空でない文字列に設定された場合、起動時に :func:`faulthandler."
"enable`  が呼び出されます。Python のトレースバックをダンプするために :const:"
"`SIGSEGV`、:const:`SIGFPE`、:const:`SIGABRT`、:const:`SIGBUS` および :const:"
"`SIGILL` シグナルのハンドラを導入します。:option:`-X` ``faulthandler`` オプ"
"ションと等価です。"

#: ../../using/cmdline.rst:639
msgid ""
"If this environment variable is set to a non-empty string, start tracing "
"Python memory allocations using the :mod:`tracemalloc` module. The value of "
"the variable is the maximum number of frames stored in a traceback of a "
"trace. For example, ``PYTHONTRACEMALLOC=1`` stores only the most recent "
"frame. See the :func:`tracemalloc.start` for more information."
msgstr ""
"この環境変数が空でない文字列に設定された場合、:mod:`tracemalloc` モジュールを"
"利用して Python のメモリ割り当てのトレースを開始します。変数の値はトレース時"
"のトレースバックで保持されるフレームの最大数です。例えば "
"``PYTHONTRACEMALLOC=1`` の場合、最新のフレームのみを保持します。詳細は :func:"
"`tracemalloc.start` を参照してください、"

#: ../../using/cmdline.rst:650
msgid ""
"If this environment variable is set to a non-empty string, enable the :ref:"
"`debug mode <asyncio-debug-mode>` of the :mod:`asyncio` module."
msgstr ""
"この環境変数が空でない文字列に設定された場合、:mod:`asyncio` モジュールの :"
"ref:`デバッグモード <asyncio-debug-mode>` が有効化されます。"

#: ../../using/cmdline.rst:658
msgid "Set the Python memory allocators and/or install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:660
msgid "Set the family of memory allocators used by Python:"
msgstr ""

#: ../../using/cmdline.rst:662
msgid ""
"``malloc``: use the :c:func:`malloc` function of the C library for all "
"domains (:c:data:`PYMEM_DOMAIN_RAW`, :c:data:`PYMEM_DOMAIN_MEM`, :c:data:"
"`PYMEM_DOMAIN_OBJ`)."
msgstr ""

#: ../../using/cmdline.rst:665
msgid ""
"``pymalloc``: use the :ref:`pymalloc allocator <pymalloc>` for :c:data:"
"`PYMEM_DOMAIN_MEM` and :c:data:`PYMEM_DOMAIN_OBJ` domains and use the :c:"
"func:`malloc` function for the :c:data:`PYMEM_DOMAIN_RAW` domain."
msgstr ""

#: ../../using/cmdline.rst:669
msgid "Install debug hooks:"
msgstr ""

#: ../../using/cmdline.rst:671
msgid "``debug``: install debug hooks on top of the default memory allocator"
msgstr ""

#: ../../using/cmdline.rst:672
msgid "``malloc_debug``: same as ``malloc`` but also install debug hooks"
msgstr ""

#: ../../using/cmdline.rst:673
msgid "``pymalloc_debug``: same as ``pymalloc`` but also install debug hooks"
msgstr ""

#: ../../using/cmdline.rst:675
msgid ""
"When Python is compiled in release mode, the default is ``pymalloc``. When "
"compiled in debug mode, the default is ``pymalloc_debug`` and the debug "
"hooks are used automatically."
msgstr ""

#: ../../using/cmdline.rst:679
msgid ""
"If Python is configured without ``pymalloc`` support, ``pymalloc`` and "
"``pymalloc_debug`` are not available, the default is ``malloc`` in release "
"mode and ``malloc_debug`` in debug mode."
msgstr ""

#: ../../using/cmdline.rst:683
msgid ""
"See the :c:func:`PyMem_SetupDebugHooks` function for debug hooks on Python "
"memory allocators."
msgstr ""

#: ../../using/cmdline.rst:691
msgid ""
"If set to a non-empty string, Python will print statistics of the :ref:"
"`pymalloc memory allocator <pymalloc>` every time a new pymalloc object "
"arena is created, and on shutdown."
msgstr ""

#: ../../using/cmdline.rst:695
msgid ""
"This variable is ignored if the :envvar:`PYTHONMALLOC` environment variable "
"is used to force the :c:func:`malloc` allocator of the C library, or if "
"Python is configured without ``pymalloc`` support."
msgstr ""

#: ../../using/cmdline.rst:699
msgid ""
"This variable can now also be used on Python compiled in release mode. It "
"now has no effect if set to an empty string."
msgstr ""

#: ../../using/cmdline.rst:706
msgid ""
"If set to a non-empty string, the default filesystem encoding and errors "
"mode will revert to their pre-3.6 values of 'mbcs' and 'replace', "
"respectively. Otherwise, the new defaults 'utf-8' and 'surrogatepass' are "
"used."
msgstr ""

#: ../../using/cmdline.rst:710
msgid ""
"This may also be enabled at runtime with :func:`sys."
"_enablelegacywindowsfsencoding()`."
msgstr ""

#: ../../using/cmdline.rst:713 ../../using/cmdline.rst:727
msgid "Availability: Windows"
msgstr ""

#: ../../using/cmdline.rst:715
msgid "See :pep:`529` for more details."
msgstr "より詳しくは :pep:`529` を参照をしてください。"

#: ../../using/cmdline.rst:720
msgid ""
"If set to a non-empty string, does not use the new console reader and "
"writer. This means that Unicode characters will be encoded according to the "
"active console code page, rather than using utf-8."
msgstr ""

#: ../../using/cmdline.rst:724
msgid ""
"This variable is ignored if the standard streams are redirected (to files or "
"pipes) rather than referring to console buffers."
msgstr ""

#: ../../using/cmdline.rst:732
msgid "Debug-mode variables"
msgstr "デバッグモード変数"

#: ../../using/cmdline.rst:734
msgid ""
"Setting these variables only has an effect in a debug build of Python, that "
"is, if Python was configured with the ``--with-pydebug`` build option."
msgstr ""
"以下の環境変数は、``--with-pydebug`` ビルドオプションを指定して構成されたデ"
"バッグビルド版の Python でのみ効果があります。"

#: ../../using/cmdline.rst:739
msgid "If set, Python will print threading debug info."
msgstr "設定された場合、 Python はスレッドデバッグ情報を表示します。"

#: ../../using/cmdline.rst:744
msgid ""
"If set, Python will dump objects and reference counts still alive after "
"shutting down the interpreter."
msgstr ""
"設定された場合、 Python はインタプリタのシャットダウン後に残っているオブジェ"
"クトと参照カウントをダンプします。"
