# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2020-06-28 11:57+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/mmap.rst:3
msgid ":mod:`mmap` --- Memory-mapped file support"
msgstr ":mod:`mmap` --- メモリマップファイル"

#: ../../library/mmap.rst:9
msgid ""
"Memory-mapped file objects behave like both strings and like file objects. "
"Unlike normal string objects, however, these are mutable.  You can use mmap "
"objects in most places where strings are expected; for example, you can use "
"the :mod:`re` module to search through a memory-mapped file.  Since they're "
"mutable, you can change a single character by doing ``obj[index] = 'a'``, or "
"change a substring by assigning to a slice: ``obj[i1:i2] = '...'``.  You can "
"also read and write data starting at the current file position, and :meth:"
"`seek` through the file to different positions."
msgstr ""
"メモリにマップされたファイルオブジェクトは、文字列とファイルオブジェクトの両"
"方のように振舞います。しかし通常の文字列オブジェクトとは異なり、これらは可変"
"です。文字列が期待されるほとんどの場所で mmap オブジェクトを利用できます。例"
"えば、メモリマップファイルを探索するために :mod:`re` モジュールを使うことがで"
"きます。それらは可変なので、 ``obj[index] = 'a'`` のように文字を変換できます"
"し、スライスを使うことで ``obj[i1:i2] = '...'`` のように部分文字列を変換する"
"ことができます。現在のファイル位置をデータの始めとする読込みや書込み、ファイ"
"ルの異なる位置へ :meth:`seek` することもできます。"

#: ../../library/mmap.rst:18
msgid ""
"A memory-mapped file is created by the :class:`~mmap.mmap` constructor, "
"which is different on Unix and on Windows.  In either case you must provide "
"a file descriptor for a file opened for update. If you wish to map an "
"existing Python file object, use its :meth:`fileno` method to obtain the "
"correct value for the *fileno* parameter.  Otherwise, you can open the file "
"using the :func:`os.open` function, which returns a file descriptor directly "
"(the file still needs to be closed when done)."
msgstr ""
"メモリマップドファイルは Unix と Windows で異なる :class:`~mmap.mmap` コンス"
"トラクタで生成されます。どちらの場合も、更新用に開かれたファイルディスクリプ"
"タを渡さなければなりません。既存の Python ファイルオブジェクトをマップしたけ"
"れば、 :meth:`fileno` メソッドを使って *fileno* パラメータの正しい値を取得し"
"てください。そうでなければ、 :func:`os.open` 関数を使ってファイルを開けます。"
"この関数はファイルディスクリプタを直接返します(処理が終わったら、やはりファイ"
"ルを閉じる必要があります)。"

#: ../../library/mmap.rst:27
msgid ""
"If you want to create a memory-mapping for a writable, buffered file, you "
"should :func:`~io.IOBase.flush` the file first.  This is necessary to ensure "
"that local modifications to the buffers are actually available to the "
"mapping."
msgstr ""
"書き込み可能でバッファされたファイルへのメモリマップファイルを作りたいのであ"
"れば、まず最初にファイルの :func:`~io.IOBase.flush` を呼び出すべきです。これ"
"はバッファへのローカルな修正がマッピングで実際に利用可能になることを保障する"
"ために必要です。"

#: ../../library/mmap.rst:32
msgid ""
"For both the Unix and Windows versions of the constructor, *access* may be "
"specified as an optional keyword parameter. *access* accepts one of three "
"values: :const:`ACCESS_READ`, :const:`ACCESS_WRITE`, or :const:`ACCESS_COPY` "
"to specify read-only, write-through or copy-on-write memory respectively. "
"*access* can be used on both Unix and Windows.  If *access* is not "
"specified, Windows mmap returns a write-through mapping.  The initial memory "
"values for all three access types are taken from the specified file.  "
"Assignment to an :const:`ACCESS_READ` memory map raises a :exc:`TypeError` "
"exception. Assignment to an :const:`ACCESS_WRITE` memory map affects both "
"memory and the underlying file.  Assignment to an :const:`ACCESS_COPY` "
"memory map affects memory but does not update the underlying file."
msgstr ""
"Unix バージョンと Windows バージョンのどちらのコンストラクタについても、オプ"
"ションのキーワード・パラメータとして *access* を指定することになるかもしれま"
"せん。 *access* は3つの値の内の1つを受け入れます。 :const:`ACCESS_READ` は読"
"み込み専用、 :const:`ACCESS_WRITE` は書き込み可能、 :const:`ACCESS_COPY` はコ"
"ピーした上での書き込みです。 *access* は Unix と Windows の両方で使用すること"
"ができます。 *access* が指定されない場合、 Windows の mmap は書き込み可能マッ"
"プを返します。 3つのアクセス型すべてに対する初期メモリ値は、指定されたファイ"
"ルから得られます。 :const:`ACCESS_READ` 型のメモリマップに対して書き込むと :"
"exc:`TypeError` 例外を送出します。 :const:`ACCESS_WRITE` 型のメモリマップへの"
"書き込みはメモリと元のファイルの両方に影響を与えます。 :const:`ACCESS_COPY` "
"型のメモリマップへの書き込みはメモリに影響を与えますが、元のファイルを更新す"
"ることはありません。"

#: ../../library/mmap.rst:44
msgid ""
"To map anonymous memory, -1 should be passed as the fileno along with the "
"length."
msgstr ""
"無名メモリ(anonymous memory)にマップするためには fileno として -1 を渡し、"
"length を与えてください。"

#: ../../library/mmap.rst:48
msgid ""
"mmap.mmap has formerly been a factory function creating mmap objects. Now "
"mmap.mmap is the class itself."
msgstr ""
"mmap.mmap はこれまで mmap オブジェクトを生成するファクトリ関数でした。これか"
"らは mmap.mmap がクラスそのものになります。"

#: ../../library/mmap.rst:54
msgid ""
"**(Windows version)** Maps *length* bytes from the file specified by the "
"file handle *fileno*, and creates a mmap object.  If *length* is larger than "
"the current size of the file, the file is extended to contain *length* "
"bytes.  If *length* is ``0``, the maximum length of the map is the current "
"size of the file, except that if the file is empty Windows raises an "
"exception (you cannot create an empty mapping on Windows)."
msgstr ""
"**(Windows バージョン)** ファイルハンドル *fileno* によって指定されたファイル"
"から *length* バイトをマップして、 mmap オブジェクトを生成します。 *length* "
"が現在のファイルサイズより大きな場合、ファイルサイズは *length* を含む大きさ"
"にまで拡張されます。 *length* が ``0`` の場合、マップの最大の長さは現在のファ"
"イルサイズになります。ただし、ファイル自体が空のときは Windows が例外を送出し"
"ます (Windows では空のマップを作成することができません)。"

#: ../../library/mmap.rst:61
msgid ""
"*tagname*, if specified and not ``None``, is a string giving a tag name for "
"the mapping.  Windows allows you to have many different mappings against the "
"same file.  If you specify the name of an existing tag, that tag is opened, "
"otherwise a new tag of this name is created.  If this parameter is omitted "
"or ``None``, the mapping is created without a name.  Avoiding the use of the "
"tag parameter will assist in keeping your code portable between Unix and "
"Windows."
msgstr ""
"*tagname* は、 ``None`` 以外で指定された場合、マップのタグ名を与える文字列と"
"なります。 Windows は同じファイルに対する様々なマップを持つことを可能にしま"
"す。既存のタグの名前を指定すればそのタグがオープンされ、そうでなければこの名"
"前の新しいタグが作成されます。もしこのパラメータを省略したり ``None`` を与え"
"たりしたならば、マップは名前なしで作成されます。タグ・パラメータの使用の回避"
"は、あなたのコードを Unix と Windows の間で移植可能にしておくのを助けてくれる"
"でしょう。"

#: ../../library/mmap.rst:69
msgid ""
"*offset* may be specified as a non-negative integer offset. mmap references "
"will be relative to the offset from the beginning of the file. *offset* "
"defaults to 0.  *offset* must be a multiple of the :const:"
"`ALLOCATIONGRANULARITY`."
msgstr ""
"*offset* は非負整数のオフセットとして指定できます。mmap の参照はファイルの先"
"頭からのオフセットに相対的になります。*offset* のデフォルトは 0 です。"
"*offset* は  :const:`ALLOCATIONGRANULARITY` の倍数でなければなりません。"

#: ../../library/mmap.rst:77
msgid ""
"**(Unix version)** Maps *length* bytes from the file specified by the file "
"descriptor *fileno*, and returns a mmap object.  If *length* is ``0``, the "
"maximum length of the map will be the current size of the file when :class:"
"`~mmap.mmap` is called."
msgstr ""
"**(Unix バージョン)** ファイルディスクリプタ *fileno* で指定されたファイルか"
"ら *length* バイトをマップし、mmap オブジェクトを返します。*length* が ``0`` "
"の場合、マップの最大の長さは :class:`~mmap.mmap` が呼ばれた時点でのファイルサ"
"イズになります。"

#: ../../library/mmap.rst:82
msgid ""
"*flags* specifies the nature of the mapping. :const:`MAP_PRIVATE` creates a "
"private copy-on-write mapping, so changes to the contents of the mmap object "
"will be private to this process, and :const:`MAP_SHARED` creates a mapping "
"that's shared with all other processes mapping the same areas of the file.  "
"The default value is :const:`MAP_SHARED`."
msgstr ""
"*flags* はマップの種類を指定します。 :const:`MAP_PRIVATE` はプライベートな "
"copy-on-write(書込み時コピー)のマップを作成します。従って、mmap オブジェクト"
"の内容への変更はこのプロセス内にのみ有効です。 :const:`MAP_SHARED` はファイル"
"の同じ領域をマップする他のすべてのプロセスと共有されたマップを作成します。デ"
"フォルトは :const:`MAP_SHARED` です。"

#: ../../library/mmap.rst:88
msgid ""
"*prot*, if specified, gives the desired memory protection; the two most "
"useful values are :const:`PROT_READ` and :const:`PROT_WRITE`, to specify "
"that the pages may be read or written.  *prot* defaults to :const:`PROT_READ "
"\\| PROT_WRITE`."
msgstr ""
"*prot* が指定された場合、希望のメモリ保護を与えます。 2つの最も有用な値は、 :"
"const:`PROT_READ` と :const:`PROT_WRITE` です。これは、読込み可能または書込み"
"可能を指定するものです。 *prot* のデフォルトは :const:`PROT_READ \\| "
"PROT_WRITE` です。"

#: ../../library/mmap.rst:93
msgid ""
"*access* may be specified in lieu of *flags* and *prot* as an optional "
"keyword parameter.  It is an error to specify both *flags*, *prot* and "
"*access*.  See the description of *access* above for information on how to "
"use this parameter."
msgstr ""
"*access* はオプションのキーワード・パラメータとして、 *flags* と *prot* の代"
"わりに指定してもかまいません。 *flags*, *prot* と *access* の両方を指定するこ"
"とは間違っています。このパラメーターを使用法についての情報は、先に述べた "
"*access* の記述を参照してください。"

#: ../../library/mmap.rst:98
msgid ""
"*offset* may be specified as a non-negative integer offset. mmap references "
"will be relative to the offset from the beginning of the file. *offset* "
"defaults to 0. *offset* must be a multiple of :const:`ALLOCATIONGRANULARITY` "
"which is equal to :const:`PAGESIZE` on Unix systems."
msgstr ""

#: ../../library/mmap.rst:103
msgid ""
"To ensure validity of the created memory mapping the file specified by the "
"descriptor *fileno* is internally automatically synchronized with physical "
"backing store on Mac OS X and OpenVMS."
msgstr ""
"Mac OS X と OpenVMS において、作成された memory mapping の正当性を確実にする"
"ために *fileno* で指定されたファイルディスクリプタは内部で自動的に物理的なス"
"トレージ (physical backing store) と同期されます。"

#: ../../library/mmap.rst:107
msgid "This example shows a simple way of using :class:`~mmap.mmap`::"
msgstr "この例は :class:`~mmap.mmap` の簡潔な使い方を示すものです::"

#: ../../library/mmap.rst:132
msgid ""
"The next example demonstrates how to create an anonymous map and exchange "
"data between the parent and child processes::"
msgstr ""
"次の例では無名マップを作り親プロセスと子プロセスの間でデータのやりとりをして"
"みせます::"

#: ../../library/mmap.rst:150
msgid "Memory-mapped file objects support the following methods:"
msgstr "メモリマップファイルオブジェクトは以下のメソッドをサポートしています:"

#: ../../library/mmap.rst:155
msgid ""
"Closes the mmap. Subsequent calls to other methods of the object will result "
"in a ValueError exception being raised. This will not close the open file."
msgstr ""
"メモリマップファイルを閉じます。この呼出しの後にオブジェクトの他のメソッドの"
"呼出すことは、 :exc:`ValueError` 例外の送出を引き起こします。このメソッドは開"
"いたファイルのクローズはしません。"

#: ../../library/mmap.rst:162
msgid ""
"Returns the lowest index in the object where the substring *string* is "
"found, such that *string* is contained in the range [*start*, *end*]. "
"Optional arguments *start* and *end* are interpreted as in slice notation. "
"Returns ``-1`` on failure."
msgstr ""
"オブジェクト内の [*start*, *end*] の範囲に含まれている部分文字列 *string* が"
"見つかった場所の最も小さいインデックスを返します。オプションの引数 *start* "
"と *end* はスライスに使われるときのように解釈されます。失敗したときには "
"``-1`` を返します。"

#: ../../library/mmap.rst:170
msgid ""
"Flushes changes made to the in-memory copy of a file back to disk. Without "
"use of this call there is no guarantee that changes are written back before "
"the object is destroyed.  If *offset* and *size* are specified, only changes "
"to the given range of bytes will be flushed to disk; otherwise, the whole "
"extent of the mapping is flushed.  *offset* must be a multiple of the :const:"
"`PAGESIZE` or :const:`ALLOCATIONGRANULARITY`."
msgstr ""

#: ../../library/mmap.rst:177
msgid ""
"**(Windows version)** A nonzero value returned indicates success; zero "
"indicates failure."
msgstr ""
"**(Windows バージョン)** ゼロ以外の値が返されたら成功を、ゼロは失敗を意味しま"
"す。"

#: ../../library/mmap.rst:180
msgid ""
"**(Unix version)** A zero value is returned to indicate success. An "
"exception is raised when the call failed."
msgstr ""
"**(Unix バージョン)** ゼロの値が返されたら成功を意味します。呼び出しが失敗す"
"ると例外が送出されます。"

#: ../../library/mmap.rst:186
msgid ""
"Copy the *count* bytes starting at offset *src* to the destination index "
"*dest*.  If the mmap was created with :const:`ACCESS_READ`, then calls to "
"move will raise a :exc:`TypeError` exception."
msgstr ""
"オフセット *src* から始まる *count* バイトをインデックス *dest* の位置へコ"
"ピーします。もし mmap が :const:`ACCESS_READ` で作成されていた場合、 :exc:"
"`TypeError` 例外を発生させます。"

#: ../../library/mmap.rst:193
msgid ""
"Return a string containing up to *num* bytes starting from the current file "
"position; the file position is updated to point after the bytes that were "
"returned."
msgstr ""
"現在のファイル位置から最大で *num* バイト分の文字列を返します。ファイル位置は"
"返したバイトの分だけ後ろの位置へ更新されます。"

#: ../../library/mmap.rst:200
msgid ""
"Returns a string of length 1 containing the character at the current file "
"position, and advances the file position by 1."
msgstr ""
"現在のファイル位置から長さ1の文字列を返します。ファイル位置は1だけ進みます。"

#: ../../library/mmap.rst:206
msgid ""
"Returns a single line, starting at the current file position and up to the "
"next newline."
msgstr "現在のファイル位置から次の改行までの、1行を返します。"

#: ../../library/mmap.rst:212
msgid ""
"Resizes the map and the underlying file, if any. If the mmap was created "
"with :const:`ACCESS_READ` or :const:`ACCESS_COPY`, resizing the map will "
"raise a :exc:`TypeError` exception."
msgstr ""
"マップと元ファイル(がもしあれば)のサイズを変更します。もし mmap が :const:"
"`ACCESS_READ` または :const:`ACCESS_COPY` で作成されたならば、マップサイズの"
"変更は :exc:`TypeError` 例外を発生させます。"

#: ../../library/mmap.rst:219
msgid ""
"Returns the highest index in the object where the substring *string* is "
"found, such that *string* is contained in the range [*start*, *end*]. "
"Optional arguments *start* and *end* are interpreted as in slice notation. "
"Returns ``-1`` on failure."
msgstr ""
"オブジェクト内の [*start*, *end*] の範囲に含まれている部分文字列 *string* が"
"見つかった場所の最も大きいインデックスを返します。オプションの引数 *start* "
"と *end* はスライスに使われるときのように解釈されます。失敗したときには "
"``-1`` を返します。"

#: ../../library/mmap.rst:227
msgid ""
"Set the file's current position.  *whence* argument is optional and defaults "
"to ``os.SEEK_SET`` or ``0`` (absolute file positioning); other values are "
"``os.SEEK_CUR`` or ``1`` (seek relative to the current position) and ``os."
"SEEK_END`` or ``2`` (seek relative to the file's end)."
msgstr ""
"ファイルの現在位置をセットします。 *whence* 引数はオプションであり、デフォル"
"トは ``os.SEEK_SET`` つまり ``0`` (絶対位置)です。その他の値として、 ``os."
"SEEK_CUR`` つまり ``1`` (現在位置からの相対位置)と ``os.SEEK_END`` つまり "
"``2`` (ファイルの終わりからの相対位置)があります。"

#: ../../library/mmap.rst:235
msgid ""
"Return the length of the file, which can be larger than the size of the "
"memory-mapped area."
msgstr ""
"ファイルの長さを返します。メモリマップ領域のサイズより大きいかもしれません。"

#: ../../library/mmap.rst:241
msgid "Returns the current position of the file pointer."
msgstr "ファイルポインタの現在位置を返します。"

#: ../../library/mmap.rst:246
msgid ""
"Write the bytes in *string* into memory at the current position of the file "
"pointer; the file position is updated to point after the bytes that were "
"written. If the mmap was created with :const:`ACCESS_READ`, then writing to "
"it will raise a :exc:`TypeError` exception."
msgstr ""
"メモリ内のファイルポインタの現在位置に *string* のバイト列を書き込みます。"
"ファイル位置はバイト列が書き込まれた後の位置へ更新されます。もし mmap が :"
"const:`ACCESS_READ` で作成されていた場合、書き込み時に :exc:`TypeError` 例外"
"を発生させるでしょう。"

#: ../../library/mmap.rst:254
msgid ""
"Write the single-character string *byte* into memory at the current position "
"of the file pointer; the file position is advanced by ``1``. If the mmap was "
"created with :const:`ACCESS_READ`, then writing to it will raise a :exc:"
"`TypeError` exception."
msgstr ""
"メモリ内のファイルポインタの現在位置に単一文字の文字列 *byte* を書き込みま"
"す。ファイル位置は ``1`` だけ進みます。もし mmap が :const:`ACCESS_READ` で作"
"成されていた場合、書き込み時に :exc:`TypeError` 例外を発生させるでしょう。"
