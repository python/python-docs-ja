# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Tetsuo Koyama <tkoyama010@gmail.com>, 2021
# 石井明久, 2024
# Takanori Suzuki <takanori@takanory.net>, 2024
# Arihiro TAKASE, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-06 14:16+0000\n"
"PO-Revision-Date: 2021-06-28 01:09+0000\n"
"Last-Translator: Arihiro TAKASE, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/mmap.rst:2
msgid ":mod:`!mmap` --- Memory-mapped file support"
msgstr ":mod:`!mmap` --- メモリマップファイルのサポート"

#: ../../includes/wasm-notavail.rst:3
msgid ":ref:`Availability <availability>`: not WASI."
msgstr ":ref:`利用可能な環境 <availability>`: WASI 以外。"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref:`wasm-"
"availability` for more information."
msgstr ""
"このモジュールは WebAssembly では動作しないか、利用不可です。詳しくは、:ref:"
"`wasm-availability` を見てください。"

#: ../../library/mmap.rst:11
msgid ""
"Memory-mapped file objects behave like both :class:`bytearray` and like :"
"term:`file objects <file object>`.  You can use mmap objects in most places "
"where :class:`bytearray` are expected; for example, you can use the :mod:"
"`re` module to search through a memory-mapped file.  You can also change a "
"single byte by doing ``obj[index] = 97``, or change a subsequence by "
"assigning to a slice: ``obj[i1:i2] = b'...'``.  You can also read and write "
"data starting at the current file position, and :meth:`seek` through the "
"file to different positions."
msgstr ""
"メモリにマップされたファイルオブジェクトは、 :class:`bytearray` と :term:`"
"ファイルオブジェクト <file object>` の両方のように振舞います。しかし通常の文"
"字列オブジェクトとは異なり、これらは可変です。 :class:`bytearray` が期待され"
"るほとんどの場所で mmap オブジェクトを利用できます。例えば、メモリマップファ"
"イルを探索するために :mod:`re` モジュールを使うことができます。それらは可変な"
"ので、 ``obj[index] = 97`` のように文字を変換できますし、スライスを使うこと"
"で  ``obj[i1:i2] = b'...'`` のように部分文字列を変換することができます。現在"
"のファイル位置をデータの始めとする読込みや書込み、ファイルの異なる位置へ :"
"meth:`seek` することもできます。"

#: ../../library/mmap.rst:19
msgid ""
"A memory-mapped file is created by the :class:`~mmap.mmap` constructor, "
"which is different on Unix and on Windows.  In either case you must provide "
"a file descriptor for a file opened for update. If you wish to map an "
"existing Python file object, use its :meth:`~io.IOBase.fileno` method to "
"obtain the correct value for the *fileno* parameter.  Otherwise, you can "
"open the file using the :func:`os.open` function, which returns a file "
"descriptor directly (the file still needs to be closed when done)."
msgstr ""
"メモリマップドファイルは Unix と Windows で異なる :class:`~mmap.mmap` コンス"
"トラクタで生成されます。どちらの場合も、更新用に開かれたファイル記述子を渡さ"
"なければなりません。既存の Python ファイルオブジェクトをマップしたければ、 :"
"meth:`~io.IOBase.fileno` メソッドを使って *fileno* パラメータの正しい値を取得"
"してください。そうでなければ、 :func:`os.open` 関数を使ってファイルを開けま"
"す。この関数はファイルディスクリプタを直接返します(処理が終わったら、やはり"
"ファイルを閉じる必要があります)。"

#: ../../library/mmap.rst:28
msgid ""
"If you want to create a memory-mapping for a writable, buffered file, you "
"should :func:`~io.IOBase.flush` the file first.  This is necessary to ensure "
"that local modifications to the buffers are actually available to the "
"mapping."
msgstr ""
"書き込み可能でバッファされたファイルへのメモリマップファイルを作りたいのであ"
"れば、まず最初にファイルの :func:`~io.IOBase.flush` を呼び出すべきです。これ"
"はバッファへのローカルな修正がマッピングで実際に利用可能になることを保障する"
"ために必要です。"

#: ../../library/mmap.rst:33
msgid ""
"For both the Unix and Windows versions of the constructor, *access* may be "
"specified as an optional keyword parameter. *access* accepts one of four "
"values: :const:`ACCESS_READ`, :const:`ACCESS_WRITE`, or :const:`ACCESS_COPY` "
"to specify read-only, write-through or copy-on-write memory respectively, "
"or :const:`ACCESS_DEFAULT` to defer to *prot*.  *access* can be used on both "
"Unix and Windows.  If *access* is not specified, Windows mmap returns a "
"write-through mapping.  The initial memory values for all three access types "
"are taken from the specified file.  Assignment to an :const:`ACCESS_READ` "
"memory map raises a :exc:`TypeError` exception.  Assignment to an :const:"
"`ACCESS_WRITE` memory map affects both memory and the underlying file. "
"Assignment to an :const:`ACCESS_COPY` memory map affects memory but does not "
"update the underlying file."
msgstr ""
"Unix バージョンと Windows バージョンのどちらのコンストラクタについても、オプ"
"ションのキーワード・パラメータとして *access* を指定できます。 *access* は4つ"
"の値の内の1つを受け入れます。 :const:`ACCESS_READ` は読み出し専用、 :const:"
"`ACCESS_WRITE` は書き込み可能、 :const:`ACCESS_COPY` はコピーした上での書き込"
"み、:const:`ACCESS_DEFAULT` は *prot* に従います。 *access* は Unix と "
"Windows の両方で使用することができます。 *access* が指定されない場合、 "
"Windows の mmap は書き込み可能マップを返します。 3つのアクセス型すべてに対す"
"る初期メモリ値は、指定されたファイルから得られます。 :const:`ACCESS_READ` 型"
"のメモリマップに対して書き込むと :exc:`TypeError` 例外を送出します。 :const:"
"`ACCESS_WRITE` 型のメモリマップへの書き込みはメモリと元のファイルの両方に影響"
"を与えます。 :const:`ACCESS_COPY` 型のメモリマップへの書き込みはメモリに影響"
"を与えますが、元のファイルを更新することはありません。"

#: ../../library/mmap.rst:46
msgid "Added :const:`ACCESS_DEFAULT` constant."
msgstr "定数 :const:`ACCESS_DEFAULT` が追加されました。"

#: ../../library/mmap.rst:49
msgid ""
"To map anonymous memory, -1 should be passed as the fileno along with the "
"length."
msgstr ""
"無名メモリ(anonymous memory)にマップするためには fileno として -1 を渡し、"
"length を与えてください。"

#: ../../library/mmap.rst:53
msgid ""
"**(Windows version)** Maps *length* bytes from the file specified by the "
"file handle *fileno*, and creates a mmap object.  If *length* is larger than "
"the current size of the file, the file is extended to contain *length* "
"bytes.  If *length* is ``0``, the maximum length of the map is the current "
"size of the file, except that if the file is empty Windows raises an "
"exception (you cannot create an empty mapping on Windows)."
msgstr ""
"**(Windows バージョン)** ファイルハンドル *fileno* によって指定されたファイル"
"から *length* バイトをマップして、 mmap オブジェクトを生成します。 *length* "
"が現在のファイルサイズより大きな場合、ファイルサイズは *length* を含む大きさ"
"にまで拡張されます。 *length* が ``0`` の場合、マップの最大の長さは現在のファ"
"イルサイズになります。ただし、ファイル自体が空のときは Windows が例外を送出し"
"ます (Windows では空のマップを作成することができません)。"

#: ../../library/mmap.rst:60
msgid ""
"*tagname*, if specified and not ``None``, is a string giving a tag name for "
"the mapping.  Windows allows you to have many different mappings against the "
"same file.  If you specify the name of an existing tag, that tag is opened, "
"otherwise a new tag of this name is created.  If this parameter is omitted "
"or ``None``, the mapping is created without a name.  Avoiding the use of the "
"*tagname* parameter will assist in keeping your code portable between Unix "
"and Windows."
msgstr ""
"*tagname* は、 ``None`` 以外で指定された場合、マップのタグ名を与える文字列と"
"なります。 Windows は同じファイルに対する様々なマップを持つことを可能にしま"
"す。既存のタグの名前を指定すればそのタグがオープンされ、そうでなければこの名"
"前の新しいタグが作成されます。もしこのパラメータを省略したり ``None`` を与え"
"たりしたならば、マップは名前なしで作成されます。 \"tagname\" パラメータの使用"
"の回避は、あなたのコードを Unix と Windows の間で移植可能にしておくのを助けて"
"くれるでしょう。"

#: ../../library/mmap.rst:68
msgid ""
"*offset* may be specified as a non-negative integer offset. mmap references "
"will be relative to the offset from the beginning of the file. *offset* "
"defaults to 0.  *offset* must be a multiple of the :const:"
"`ALLOCATIONGRANULARITY`."
msgstr ""
"*offset* は非負整数のオフセットとして指定できます。mmap の参照はファイルの先"
"頭からのオフセットに相対的になります。*offset* のデフォルトは 0 です。"
"*offset* は  :const:`ALLOCATIONGRANULARITY` の倍数でなければなりません。"

#: ../../library/mmap.rst:72 ../../library/mmap.rst:174
msgid ""
"Raises an :ref:`auditing event <auditing>` ``mmap.__new__`` with arguments "
"``fileno``, ``length``, ``access``, ``offset``."
msgstr ""
"引数 ``fileno``, ``length``, ``access``, ``offset`` 付きで :ref:`監査イベン"
"ト <auditing>` ``mmap.__new__`` を送出します。"

#: ../../library/mmap.rst:78
msgid ""
"**(Unix version)** Maps *length* bytes from the file specified by the file "
"descriptor *fileno*, and returns a mmap object.  If *length* is ``0``, the "
"maximum length of the map will be the current size of the file when :class:"
"`~mmap.mmap` is called."
msgstr ""
"**(Unix バージョン)** ファイルディスクリプタ *fileno* で指定されたファイルか"
"ら *length* バイトをマップし、mmap オブジェクトを返します。*length* が ``0`` "
"の場合、マップの最大の長さは :class:`~mmap.mmap` が呼ばれた時点でのファイルサ"
"イズになります。"

#: ../../library/mmap.rst:83
msgid ""
"*flags* specifies the nature of the mapping. :const:`MAP_PRIVATE` creates a "
"private copy-on-write mapping, so changes to the contents of the mmap object "
"will be private to this process, and :const:`MAP_SHARED` creates a mapping "
"that's shared with all other processes mapping the same areas of the file.  "
"The default value is :const:`MAP_SHARED`. Some systems have additional "
"possible flags with the full list specified in :ref:`MAP_* constants <map-"
"constants>`."
msgstr ""

#: ../../library/mmap.rst:91
msgid ""
"*prot*, if specified, gives the desired memory protection; the two most "
"useful values are :const:`PROT_READ` and :const:`PROT_WRITE`, to specify "
"that the pages may be read or written.  *prot* defaults to :const:`PROT_READ "
"\\| PROT_WRITE`."
msgstr ""
"*prot* が指定された場合、希望のメモリ保護を与えます。 2つの最も有用な値は、 :"
"const:`PROT_READ` と :const:`PROT_WRITE` です。これは、読込み可能または書込み"
"可能を指定するものです。 *prot* のデフォルトは :const:`PROT_READ \\| "
"PROT_WRITE` です。"

#: ../../library/mmap.rst:96
msgid ""
"*access* may be specified in lieu of *flags* and *prot* as an optional "
"keyword parameter.  It is an error to specify both *flags*, *prot* and "
"*access*.  See the description of *access* above for information on how to "
"use this parameter."
msgstr ""
"*access* はオプションのキーワード・パラメータとして、 *flags* と *prot* の代"
"わりに指定してもかまいません。 *flags*, *prot* と *access* の両方を指定するこ"
"とは間違っています。このパラメータの使用法についての情報は、先に述べた "
"*access* の記述を参照してください。"

#: ../../library/mmap.rst:101
msgid ""
"*offset* may be specified as a non-negative integer offset. mmap references "
"will be relative to the offset from the beginning of the file. *offset* "
"defaults to 0. *offset* must be a multiple of :const:`ALLOCATIONGRANULARITY` "
"which is equal to :const:`PAGESIZE` on Unix systems."
msgstr ""

#: ../../library/mmap.rst:106
msgid ""
"If *trackfd* is ``False``, the file descriptor specified by *fileno* will "
"not be duplicated, and the resulting :class:`!mmap` object will not be "
"associated with the map's underlying file. This means that the :meth:`~mmap."
"mmap.size` and :meth:`~mmap.mmap.resize` methods will fail. This mode is "
"useful to limit the number of open file descriptors."
msgstr ""

#: ../../library/mmap.rst:113
msgid ""
"To ensure validity of the created memory mapping the file specified by the "
"descriptor *fileno* is internally automatically synchronized with the "
"physical backing store on macOS."
msgstr ""
"macOS において、作成された memory mapping の正当性を確実にするために "
"*fileno* で指定されたファイルディスクリプタは内部で自動的に物理的なストレー"
"ジ (physical backing store) と同期されます。"

#: ../../library/mmap.rst:117
msgid "The *trackfd* parameter was added."
msgstr "*trackfd* パラメータが追加されました。"

#: ../../library/mmap.rst:120
msgid "This example shows a simple way of using :class:`~mmap.mmap`::"
msgstr "この例は :class:`~mmap.mmap` の簡潔な使い方を示すものです::"

#: ../../library/mmap.rst:122
msgid ""
"import mmap\n"
"\n"
"# write a simple example file\n"
"with open(\"hello.txt\", \"wb\") as f:\n"
"    f.write(b\"Hello Python!\\n\")\n"
"\n"
"with open(\"hello.txt\", \"r+b\") as f:\n"
"    # memory-map the file, size 0 means whole file\n"
"    mm = mmap.mmap(f.fileno(), 0)\n"
"    # read content via standard file methods\n"
"    print(mm.readline())  # prints b\"Hello Python!\\n\"\n"
"    # read content via slice notation\n"
"    print(mm[:5])  # prints b\"Hello\"\n"
"    # update content using slice notation;\n"
"    # note that new content must have same size\n"
"    mm[6:] = b\" world!\\n\"\n"
"    # ... and read again using standard file methods\n"
"    mm.seek(0)\n"
"    print(mm.readline())  # prints b\"Hello  world!\\n\"\n"
"    # close the map\n"
"    mm.close()"
msgstr ""

#: ../../library/mmap.rst:145
msgid ""
":class:`~mmap.mmap` can also be used as a context manager in a :keyword:"
"`with` statement::"
msgstr ""
":class:`~mmap.mmap` は :keyword:`with` 文の中でコンテキストマネージャとしても"
"使えます::"

#: ../../library/mmap.rst:148
msgid ""
"import mmap\n"
"\n"
"with mmap.mmap(-1, 13) as mm:\n"
"    mm.write(b\"Hello world!\")"
msgstr ""

#: ../../library/mmap.rst:153
msgid "Context manager support."
msgstr "コンテキストマネージャのサポート。"

#: ../../library/mmap.rst:157
msgid ""
"The next example demonstrates how to create an anonymous map and exchange "
"data between the parent and child processes::"
msgstr ""
"次の例では無名マップを作り親プロセスと子プロセスの間でデータのやりとりをして"
"みせます::"

#: ../../library/mmap.rst:160
msgid ""
"import mmap\n"
"import os\n"
"\n"
"mm = mmap.mmap(-1, 13)\n"
"mm.write(b\"Hello world!\")\n"
"\n"
"pid = os.fork()\n"
"\n"
"if pid == 0:  # In a child process\n"
"    mm.seek(0)\n"
"    print(mm.readline())\n"
"\n"
"    mm.close()"
msgstr ""

#: ../../library/mmap.rst:176
msgid "Memory-mapped file objects support the following methods:"
msgstr "メモリマップファイルオブジェクトは以下のメソッドをサポートしています:"

#: ../../library/mmap.rst:180
msgid ""
"Closes the mmap. Subsequent calls to other methods of the object will result "
"in a ValueError exception being raised. This will not close the open file."
msgstr ""
"メモリマップファイルを閉じます。この呼出しの後にオブジェクトの他のメソッドの"
"呼出すことは、 :exc:`ValueError` 例外の送出を引き起こします。このメソッドは開"
"いたファイルのクローズはしません。"

#: ../../library/mmap.rst:187
msgid "``True`` if the file is closed."
msgstr "ファイルが閉じている場合 ``True`` となります。"

#: ../../library/mmap.rst:194
msgid ""
"Returns the lowest index in the object where the subsequence *sub* is found, "
"such that *sub* is contained in the range [*start*, *end*]. Optional "
"arguments *start* and *end* are interpreted as in slice notation. Returns "
"``-1`` on failure."
msgstr ""
"オブジェクト内の [*start*, *end*] の範囲に含まれている部分シーケンス *sub* が"
"見つかった場所の最も小さいインデックスを返します。オプションの引数 *start* "
"と *end* はスライスに使われるときのように解釈されます。失敗したときには "
"``-1`` を返します。"

#: ../../library/mmap.rst:199 ../../library/mmap.rst:291
#: ../../library/mmap.rst:331
msgid "Writable :term:`bytes-like object` is now accepted."
msgstr ""
"書き込み可能な :term:`bytes-like object` を使用できるようになりました。"

#: ../../library/mmap.rst:205
msgid ""
"Flushes changes made to the in-memory copy of a file back to disk. Without "
"use of this call there is no guarantee that changes are written back before "
"the object is destroyed.  If *offset* and *size* are specified, only changes "
"to the given range of bytes will be flushed to disk; otherwise, the whole "
"extent of the mapping is flushed.  *offset* must be a multiple of the :const:"
"`PAGESIZE` or :const:`ALLOCATIONGRANULARITY`."
msgstr ""

#: ../../library/mmap.rst:212
msgid ""
"``None`` is returned to indicate success.  An exception is raised when the "
"call failed."
msgstr ""
"``None`` が返されたら成功を意味します。呼び出しが失敗すると例外が送出されま"
"す。"

#: ../../library/mmap.rst:215
msgid ""
"Previously, a nonzero value was returned on success; zero was returned on "
"error under Windows.  A zero value was returned on success; an exception was "
"raised on error under Unix."
msgstr ""

#: ../../library/mmap.rst:223
msgid ""
"Send advice *option* to the kernel about the memory region beginning at "
"*start* and extending *length* bytes.  *option* must be one of the :ref:"
"`MADV_* constants <madvise-constants>` available on the system.  If *start* "
"and *length* are omitted, the entire mapping is spanned.  On some systems "
"(including Linux), *start* must be a multiple of the :const:`PAGESIZE`."
msgstr ""

#: ../../library/mmap.rst:230
msgid "Availability: Systems with the ``madvise()`` system call."
msgstr ""

#: ../../library/mmap.rst:237
msgid ""
"Copy the *count* bytes starting at offset *src* to the destination index "
"*dest*.  If the mmap was created with :const:`ACCESS_READ`, then calls to "
"move will raise a :exc:`TypeError` exception."
msgstr ""
"オフセット *src* から始まる *count* バイトをインデックス *dest* の位置へコ"
"ピーします。もし mmap が :const:`ACCESS_READ` で作成されていた場合、 :exc:"
"`TypeError` 例外を発生させます。"

#: ../../library/mmap.rst:244
msgid ""
"Return a :class:`bytes` containing up to *n* bytes starting from the current "
"file position. If the argument is omitted, ``None`` or negative, return all "
"bytes from the current file position to the end of the mapping. The file "
"position is updated to point after the bytes that were returned."
msgstr ""
"現在のファイル位置からの最大 *n* バイトを含む :class:`bytes` を返します。引数"
"が省略されるか、 ``None`` もしくは負の値が指定された場合、現在のファイル位置"
"からマップ終端までの全てのバイト列を返します。ファイル位置は返されたバイト列"
"の直後を指すように更新されます。"

#: ../../library/mmap.rst:250
msgid "Argument can be omitted or ``None``."
msgstr "引数が省略可能になり、 ``None`` も受け付けるようになりました。"

#: ../../library/mmap.rst:255
msgid ""
"Returns a byte at the current file position as an integer, and advances the "
"file position by 1."
msgstr ""
"現在のファイル位置のバイトを整数値として返し、ファイル位置を 1 進めます。"

#: ../../library/mmap.rst:261
msgid ""
"Returns a single line, starting at the current file position and up to the "
"next newline. The file position is updated to point after the bytes that "
"were returned."
msgstr ""

#: ../../library/mmap.rst:268
msgid "Resizes the map and the underlying file, if any."
msgstr ""

#: ../../library/mmap.rst:270
msgid ""
"Resizing a map created with *access* of :const:`ACCESS_READ` or :const:"
"`ACCESS_COPY`, will raise a :exc:`TypeError` exception. Resizing a map "
"created with with *trackfd* set to ``False``, will raise a :exc:`ValueError` "
"exception."
msgstr ""

#: ../../library/mmap.rst:275
msgid ""
"**On Windows**: Resizing the map will raise an :exc:`OSError` if there are "
"other maps against the same named file. Resizing an anonymous map (ie "
"against the pagefile) will silently create a new map with the original data "
"copied over up to the length of the new size."
msgstr ""

#: ../../library/mmap.rst:280
msgid ""
"Correctly fails if attempting to resize when another map is held Allows "
"resize against an anonymous map on Windows"
msgstr ""

#: ../../library/mmap.rst:286
msgid ""
"Returns the highest index in the object where the subsequence *sub* is "
"found, such that *sub* is contained in the range [*start*, *end*]. Optional "
"arguments *start* and *end* are interpreted as in slice notation. Returns "
"``-1`` on failure."
msgstr ""
"オブジェクト内の [*start*, *end*] の範囲に含まれている部分シーケンス *sub* が"
"見つかった場所の最も大きいインデックスを返します。オプションの引数 *start* "
"と *end* はスライスに使われるときのように解釈されます。失敗したときには "
"``-1`` を返します。"

#: ../../library/mmap.rst:297
msgid ""
"Set the file's current position.  *whence* argument is optional and defaults "
"to ``os.SEEK_SET`` or ``0`` (absolute file positioning); other values are "
"``os.SEEK_CUR`` or ``1`` (seek relative to the current position) and ``os."
"SEEK_END`` or ``2`` (seek relative to the file's end)."
msgstr ""
"ファイルの現在位置をセットします。 *whence* 引数はオプションであり、デフォル"
"トは ``os.SEEK_SET`` つまり ``0`` (絶対位置)です。その他の値として、 ``os."
"SEEK_CUR`` つまり ``1`` (現在位置からの相対位置)と ``os.SEEK_END`` つまり "
"``2`` (ファイルの終わりからの相対位置)があります。"

#: ../../library/mmap.rst:302
msgid "Return the new absolute position instead of ``None``."
msgstr "``None`` ではなく新しい絶対位置を返します。"

#: ../../library/mmap.rst:307
msgid ""
"Return whether the file supports seeking, and the return value is always "
"``True``."
msgstr ""

#: ../../library/mmap.rst:313
msgid ""
"Return the length of the file, which can be larger than the size of the "
"memory-mapped area."
msgstr ""
"ファイルの長さを返します。メモリマップ領域のサイズより大きいかもしれません。"

#: ../../library/mmap.rst:319
msgid "Returns the current position of the file pointer."
msgstr "ファイルポインタの現在位置を返します。"

#: ../../library/mmap.rst:324
msgid ""
"Write the bytes in *bytes* into memory at the current position of the file "
"pointer and return the number of bytes written (never less than "
"``len(bytes)``, since if the write fails, a :exc:`ValueError` will be "
"raised).  The file position is updated to point after the bytes that were "
"written.  If the mmap was created with :const:`ACCESS_READ`, then writing to "
"it will raise a :exc:`TypeError` exception."
msgstr ""
"メモリ内のファイルポイントの現在位置に *bytes* のバイト列を書き込み、書き込ま"
"れたバイト数を返します(もし書き込みが失敗したら :exc:`ValueError` が送出され"
"るため、``len(bytes)`` より少なくなりません)。ファイル位置はバイト列が書き込"
"まれた位置に更新されます。もしmmapが :const:`ACCESS_READ` とともに作成されて"
"いた場合は、書き込みは :exc:`TypeError` 例外を送出するでしょう。"

#: ../../library/mmap.rst:334
msgid "The number of bytes written is now returned."
msgstr "書きこまれたバイト数を返すようになりました。"

#: ../../library/mmap.rst:340
msgid ""
"Write the integer *byte* into memory at the current position of the file "
"pointer; the file position is advanced by ``1``. If the mmap was created "
"with :const:`ACCESS_READ`, then writing to it will raise a :exc:`TypeError` "
"exception."
msgstr ""
"メモリ内のファイル・ポインタの現在位置に整数 *byte* を書き込みます。ファイル"
"位置は ``1`` だけ進みます。もし mmap が :const:`ACCESS_READ` で作成されていた"
"場合、書き込み時に :exc:`TypeError` 例外を発生させるでしょう。"

#: ../../library/mmap.rst:348
msgid "MADV_* Constants"
msgstr "MADV_* 定数"

#: ../../library/mmap.rst:375
msgid ""
"These options can be passed to :meth:`mmap.madvise`.  Not every option will "
"be present on every system."
msgstr ""

#: ../../library/mmap.rst:378
msgid "Availability: Systems with the madvise() system call."
msgstr ""

#: ../../library/mmap.rst:385
msgid "MAP_* Constants"
msgstr "MAP_* 定数"

#: ../../library/mmap.rst:409
msgid ""
"These are the various flags that can be passed to :meth:`mmap.mmap`.  :data:"
"`MAP_ALIGNED_SUPER` is only available at FreeBSD and :data:`MAP_CONCEAL` is "
"only available at OpenBSD.  Note that some options might not be present on "
"some systems."
msgstr ""

#: ../../library/mmap.rst:413
msgid "Added :data:`MAP_POPULATE` constant."
msgstr ""

#: ../../library/mmap.rst:416
msgid "Added :data:`MAP_STACK` constant."
msgstr ""

#: ../../library/mmap.rst:419
msgid "Added :data:`MAP_ALIGNED_SUPER` and :data:`MAP_CONCEAL` constants."
msgstr ""

#: ../../library/mmap.rst:422
msgid ""
"Added :data:`MAP_32BIT`, :data:`MAP_HASSEMAPHORE`, :data:`MAP_JIT`, :data:"
"`MAP_NOCACHE`, :data:`MAP_NOEXTEND`, :data:`MAP_NORESERVE`, :data:"
"`MAP_RESILIENT_CODESIGN`, :data:`MAP_RESILIENT_MEDIA`, :data:`MAP_TPRO`, :"
"data:`MAP_TRANSLATED_ALLOW_EXECUTE`, and :data:`MAP_UNIX03` constants."
msgstr ""
