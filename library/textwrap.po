# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-07-01 15:28+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/textwrap.rst:2
msgid ":mod:`textwrap` --- Text wrapping and filling"
msgstr ":mod:`textwrap` --- テキストの折り返しと詰め込み"

#: ../../library/textwrap.rst:11
msgid "**Source code:** :source:`Lib/textwrap.py`"
msgstr "**ソースコード:** :source:`Lib/textwrap.py`"

#: ../../library/textwrap.rst:15
msgid ""
"The :mod:`textwrap` module provides two convenience functions, :func:`wrap` "
"and :func:`fill`, as well as :class:`TextWrapper`, the class that does all "
"the work, and a utility function  :func:`dedent`.  If you're just wrapping "
"or filling one or two  text strings, the convenience functions should be "
"good enough; otherwise,  you should use an instance of :class:`TextWrapper` "
"for efficiency."
msgstr ""
":mod:`textwrap` モジュールは実際の処理を行う  :class:`TextWrapper` とともに、"
"2つの便利な関数として :func:`wrap` と :func:`fill` を提供しています。\n"
"また、 ユーティティー関数 :func:`dedent` も提供しています。\n"
"1 つか 2 つの文字列を wrap あるいは fill したいだけなら便利関数で十分ですし、"
"そうでないならば効率のために :class:`TextWrapper` のインスタンスを使うべきで"
"しょう。"

#: ../../library/textwrap.rst:23
msgid ""
"Wraps the single paragraph in *text* (a string) so every line is at most "
"*width* characters long.  Returns a list of output lines, without final "
"newlines."
msgstr ""
"*text* (文字列)内の段落を一つだけ折り返しを行います。したがって、すべての行が"
"高々 *width* 文字の長さになります。最後に改行が付かない出力行のリストを返しま"
"す。"

#: ../../library/textwrap.rst:26
msgid ""
"Optional keyword arguments correspond to the instance attributes of :class:"
"`TextWrapper`, documented below.  *width* defaults to ``70``."
msgstr ""
"オプションのキーワード引数は、以下で説明する :class:`TextWrapper` のインスタ"
"ンス属性に対応しています。 *width* はデフォルトで ``70`` です。"

#: ../../library/textwrap.rst:29
msgid ""
"See the :meth:`TextWrapper.wrap` method for additional details on how :func:"
"`wrap` behaves."
msgstr ""
":func:`wrap` の動作についての詳細は :meth:`TextWrapper.wrap` メソッドを参照し"
"てください。"

#: ../../library/textwrap.rst:35
msgid ""
"Wraps the single paragraph in *text*, and returns a single string containing "
"the wrapped paragraph.  :func:`fill` is shorthand for  ::"
msgstr ""
"*text* 内の段落を一つだけ折り返しを行い、折り返しが行われた段落を含む一つの文"
"字列を返します。 :func:`fill` はこれの省略表現です  ::"

#: ../../library/textwrap.rst:40
msgid ""
"In particular, :func:`fill` accepts exactly the same keyword arguments as :"
"func:`wrap`."
msgstr ""
"特に、 :func:`fill` は :func:`wrap` とまったく同じ名前のキーワード引数を受け"
"取ります。"

#: ../../library/textwrap.rst:43
msgid ""
"Both :func:`wrap` and :func:`fill` work by creating a :class:`TextWrapper` "
"instance and calling a single method on it.  That instance is not reused, so "
"for applications that wrap/fill many text strings, it will be more efficient "
"for you to create your own :class:`TextWrapper` object."
msgstr ""
":func:`wrap` と :func:`fill` の両方ともが :class:`TextWrapper` インスタンスを"
"作成し、その一つのメソッドを呼び出すことで機能します。そのインスタンスは再利"
"用されません。したがって、たくさんのテキスト文字列を折り返し/詰め込みを行うア"
"プリケーションのためには、あなた自身の :class:`TextWrapper` オブジェクトを作"
"成することでさらに効率が良くなるでしょう。"

#: ../../library/textwrap.rst:48
msgid ""
"Text is preferably wrapped on whitespaces and right after the hyphens in "
"hyphenated words; only then will long words be broken if necessary, unless :"
"attr:`TextWrapper.break_long_words` is set to false."
msgstr ""
"テキストはなるべく空白か、ハイフンを含む語のハイフンの直後で折り返されま"
"す。 :attr:`TextWrapper.break_long_words` が偽に設定されていなければ、必要な"
"場合に長い語が分解されます。"

#: ../../library/textwrap.rst:52
msgid ""
"An additional utility function, :func:`dedent`, is provided to remove "
"indentation from strings that have unwanted whitespace to the left of the "
"text."
msgstr ""
"追加のユーティリティ関数である :func:`dedent` は、不要な空白をテキストの左側"
"に持つ文字列からインデントを取り去ります。"

#: ../../library/textwrap.rst:58
msgid "Remove any common leading whitespace from every line in *text*."
msgstr "*text* の各行に対し、共通して現れる先頭の空白を削除します。"

#: ../../library/textwrap.rst:60
msgid ""
"This can be used to make triple-quoted strings line up with the left edge of "
"the display, while still presenting them in the source code in indented form."
msgstr ""
"この関数は通常、三重引用符で囲われた文字列をスクリーン/その他の左端にそろえ、"
"なおかつソースコード中ではインデントされた形式を損なわないようにするために使"
"われます。"

#: ../../library/textwrap.rst:63
msgid ""
"Note that tabs and spaces are both treated as whitespace, but they are not "
"equal: the lines ``\"  hello\"`` and ``\"\\thello\"`` are considered to have "
"no common leading whitespace.  (This behaviour is new in Python 2.5; older "
"versions of this module incorrectly expanded tabs before searching for "
"common leading whitespace.)"
msgstr ""
"タブとスペースはともにホワイトスペースとして扱われますが、同じではないことに"
"注意してください:  ``\"  hello\"`` という行と ``\"\\thello\"`` 　は、同じ先頭"
"の空白文字をもっていないとみなされます。 (これは Python 2.5 からの新しい振る"
"舞いです。以前のバージョンではこのモジュールは共通の先頭空白文字を探す前に、"
"不正にタブを展開していました。)"

#: ../../library/textwrap.rst:69
msgid ""
"Lines containing only whitespace are ignored in the input and normalized to "
"a single newline character in the output."
msgstr ""
"空白文字しか含まない行は入力の際に無視され、出力の際に単一の改行文字に正規化"
"されます。"

#: ../../library/textwrap.rst:72
msgid "For example::"
msgstr "例えば::"

#: ../../library/textwrap.rst:86
msgid ""
"The :class:`TextWrapper` constructor accepts a number of optional keyword "
"arguments.  Each argument corresponds to one instance attribute, so for "
"example ::"
msgstr ""
":class:`TextWrapper` コンストラクタはたくさんのオプションのキーワード引数を受"
"け取ります。それぞれのキーワード引数は一つのインスタンス属性に対応します。し"
"たがって、例えば ::"

#: ../../library/textwrap.rst:92
msgid "is the same as  ::"
msgstr "はこれと同じです ::"

#: ../../library/textwrap.rst:97
msgid ""
"You can re-use the same :class:`TextWrapper` object many times, and you can "
"change any of its options through direct assignment to instance attributes "
"between uses."
msgstr ""
"あなたは同じ :class:`TextWrapper` オブジェクトを何回も再利用できます。また、"
"使用中にインスタンス属性へ代入することでそのオプションのどれでも変更できま"
"す。"

#: ../../library/textwrap.rst:101
msgid ""
"The :class:`TextWrapper` instance attributes (and keyword arguments to the "
"constructor) are as follows:"
msgstr ""
":class:`TextWrapper` インスタンス属性(とコンストラクタのキーワード引数)は以下"
"の通りです:"

#: ../../library/textwrap.rst:107
msgid ""
"(default: ``70``) The maximum length of wrapped lines.  As long as there are "
"no individual words in the input text longer than :attr:`width`, :class:"
"`TextWrapper` guarantees that no output line will be longer than :attr:"
"`width` characters."
msgstr ""
"(デフォルト: ``70``) 折り返しが行われる行の最大の長さ。入力行に :attr:"
"`width` より長い単一の語が無い限り、 :class:`TextWrapper` は :attr:`width` 文"
"字より長い出力行が無いことを保証します。"

#: ../../library/textwrap.rst:115
msgid ""
"(default: ``True``) If true, then all tab characters in *text* will be "
"expanded to spaces using the :meth:`expandtabs` method of *text*."
msgstr ""
"(デフォルト: ``True``) もし真ならば、そのときは *text* 内のすべてのタブ文字"
"は *text* の :meth:`expandtabs` メソッドを用いて空白に展開されます。"

#: ../../library/textwrap.rst:121
msgid ""
"(default: ``True``) If true, after tab expansion but before wrapping, the :"
"meth:`wrap` method will replace each whitespace character with a single "
"space.  The whitespace characters replaced are as follows: tab, newline, "
"vertical tab, formfeed, and carriage return (``'\\t\\n\\v\\f\\r'``)."
msgstr ""
"(デフォルト: ``True``) 真の場合、 :meth:`wrap` メソッドはタブの展開の後、 "
"wrap 処理の前に各種空白文字をスペース1文字に置換します。置換される空白文字"
"は: TAB, 改行, 垂直TAB, FF, CR (``'\\t\\n\\v\\f\\r'``) です。"

#: ../../library/textwrap.rst:129
msgid ""
"If :attr:`expand_tabs` is false and :attr:`replace_whitespace` is true, each "
"tab character will be replaced by a single space, which is *not* the same as "
"tab expansion."
msgstr ""
":attr:`expand_tabs` が偽で :attr:`replace_whitespace` が真ならば、各タブ文字"
"は1つの空白に置き換えられます。それはタブ展開と同じでは *ありません* 。"

#: ../../library/textwrap.rst:135
msgid ""
"If :attr:`replace_whitespace` is false, newlines may appear in the middle of "
"a line and cause strange output. For this reason, text should be split into "
"paragraphs (using :meth:`str.splitlines` or similar) which are wrapped "
"separately."
msgstr ""
":attr:`replace_whitespace` が偽の場合、改行が行の途中で現れることで出力がおか"
"しくなることがあります。このため、テキストを(:meth:`str.splitlines` などを"
"使って)段落ごとに分けて別々に wrap する必要があります。"

#: ../../library/textwrap.rst:143
msgid ""
"(default: ``True``) If true, whitespace at the beginning and ending of every "
"line (after wrapping but before indenting) is dropped. Whitespace at the "
"beginning of the paragraph, however, is not dropped if non-whitespace "
"follows it.  If whitespace being dropped takes up an entire line, the whole "
"line is dropped."
msgstr ""
"(デフォルト: ``True``) 真の場合、(wrap 処理のあとインデント処理の前に) 各行の"
"最初と最後の空白文字を削除します。ただし、段落の最初の空白については、次の文"
"字が空白文字でない場合は削除されません。削除される空白文字が行全体に及ぶ場合"
"は、行自体を削除します。"

#: ../../library/textwrap.rst:149
msgid "Whitespace was always dropped in earlier versions."
msgstr "過去のバージョンでは、空白は常に削除されていました。"

#: ../../library/textwrap.rst:155
msgid ""
"(default: ``''``) String that will be prepended to the first line of wrapped "
"output.  Counts towards the length of the first line.  The empty string is "
"not indented."
msgstr ""
"(default: ``''``)  wrap の出力の最初の行の先頭に付与する文字列。最初の行の長"
"さに加算されます。空文字列の場合インデントされません。"

#: ../../library/textwrap.rst:162
msgid ""
"(default: ``''``) String that will be prepended to all lines of wrapped "
"output except the first.  Counts towards the length of each line except the "
"first."
msgstr ""
"(デフォルト: ``''``) 一行目以外の折り返しが行われる出力のすべての行の先頭に付"
"けられる文字列。一行目以外の各行の折り返しまでの長さにカウントされます。"

#: ../../library/textwrap.rst:169
msgid ""
"(default: ``False``) If true, :class:`TextWrapper` attempts to detect "
"sentence endings and ensure that sentences are always separated by exactly "
"two spaces.  This is generally desired for text in a monospaced font. "
"However, the sentence detection algorithm is imperfect: it assumes that a "
"sentence ending consists of a lowercase letter followed by one of ``'.'``, "
"``'!'``, or ``'?'``, possibly followed by one of ``'\"'`` or ``\"'\"``, "
"followed by a space.  One problem with this is algorithm is that it is "
"unable to detect the difference between \"Dr.\" in ::"
msgstr ""
"(デフォルト: ``False``) もし真ならば、 :class:`TextWrapper` は文の終わりを見"
"つけようとし、確実に文がちょうど二つの空白で常に区切られているようにします。"
"これは一般的に固定スペースフォントのテキストに対して望ましいです。しかし、文"
"の検出アルゴリズムは完全ではありません: 文の終わりには、後ろに空白がある "
"``'.'``, ``'!'`` または ``'?'`` の中の一つ、ことによると ``'\"'`` あるいは "
"``\"'\"`` が付随する小文字があると仮定しています。これに伴う一つの問題はアル"
"ゴリズムで下記の\"Dr.\"と ::"

#: ../../library/textwrap.rst:180
msgid "and \"Spot.\" in ::"
msgstr "下記の\"Spot.\"の間の差異を検出できないことです ::"

#: ../../library/textwrap.rst:184
msgid ":attr:`fix_sentence_endings` is false by default."
msgstr ":attr:`fix_sentence_endings` はデフォルトで偽です。"

#: ../../library/textwrap.rst:186
msgid ""
"Since the sentence detection algorithm relies on ``string.lowercase`` for "
"the definition of \"lowercase letter,\" and a convention of using two spaces "
"after a period to separate sentences on the same line, it is specific to "
"English-language texts."
msgstr ""
"文検出アルゴリズムは\"小文字\"の定義のために ``string.lowercase`` に依存し、"
"同一行の文を区切るためにピリオドの後に二つの空白を使う慣習に依存しているた"
"め、英文テキストに限定されたものです。"

#: ../../library/textwrap.rst:194
msgid ""
"(default: ``True``) If true, then words longer than :attr:`width` will be "
"broken in order to ensure that no lines are longer than :attr:`width`.  If "
"it is false, long words will not be broken, and some lines may be longer "
"than :attr:`width`.  (Long words will be put on a line by themselves, in "
"order to minimize the amount by which :attr:`width` is exceeded.)"
msgstr ""
"(デフォルト: ``True``) もし真ならば、そのとき :attr:`width` より長い行が確実"
"にないようにするために、 :attr:`width` より長い語は切られます。偽ならば、長い"
"語は切られないでしょう。そして、 :attr:`width` より長い行があるかもしれませ"
"ん。 (:attr:`width` を超える分を最小にするために、長い語は単独で一行に置かれ"
"るでしょう。)"

#: ../../library/textwrap.rst:203
msgid ""
"(default: ``True``) If true, wrapping will occur preferably on whitespaces "
"and right after hyphens in compound words, as it is customary in English. If "
"false, only whitespaces will be considered as potentially good places for "
"line breaks, but you need to set :attr:`break_long_words` to false if you "
"want truly insecable words.  Default behaviour in previous versions was to "
"always allow breaking hyphenated words."
msgstr ""
"(デフォルト: ``True``) 真の場合、英語で一般的なように、ラップ処理は空白か合成"
"語に含まれるハイフンの直後で行われます。偽の場合、空白だけが改行に適した位置"
"として判断されます。ただし、本当に語の途中で改行が行われないようにするために"
"は、 :attr:`break_long_words` 属性を真に設定する必要があります。過去のバー"
"ジョンでのデフォルトの振る舞いは、常にハイフンの直後での改行を許していまし"
"た。"

#: ../../library/textwrap.rst:213
msgid ""
":class:`TextWrapper` also provides two public methods, analogous to the "
"module-level convenience functions:"
msgstr ""
":class:`TextWrapper` はモジュールレベルの簡易関数に類似した二つの公開メソッド"
"も提供します:"

#: ../../library/textwrap.rst:218
msgid ""
"Wraps the single paragraph in *text* (a string) so every line is at most :"
"attr:`width` characters long.  All wrapping options are taken from instance "
"attributes of the :class:`TextWrapper` instance.  Returns a list of output "
"lines, without final newlines.  If the wrapped output has no content, the "
"returned list is empty."
msgstr ""
"1段落の文字列 *text* を、各行が :attr:`width` 文字以下になるように wrap しま"
"す。 wrap のすべてのオプションは :class:`TextWrapper` インスタンスの属性から"
"取得します。結果の、行末に改行のない行のリストを返します。出力の内容が空にな"
"る場合は、返すリストも空になります。"

#: ../../library/textwrap.rst:227
msgid ""
"Wraps the single paragraph in *text*, and returns a single string containing "
"the wrapped paragraph."
msgstr ""
"*text* 内の段落を一つだけ折り返しを行い、折り返しが行われた段落を含む一つの文"
"字列を返します。"
