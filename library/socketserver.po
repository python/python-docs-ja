# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2021-05-24 12:59+0000\n"
"Last-Translator: Takanori Suzuki <takanori@takanory.net>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/socketserver.rst:2
msgid ":mod:`SocketServer` --- A framework for network servers"
msgstr ":mod:`SocketServer` --- ネットワークサーバ構築のためのフレームワーク"

#: ../../library/socketserver.rst:9
msgid ""
"The :mod:`SocketServer` module has been renamed to :mod:`socketserver` in "
"Python 3.  The :term:`2to3` tool will automatically adapt imports when "
"converting your sources to Python 3."
msgstr ""
":mod:`SocketServer` モジュールは、Python 3 では :mod:`socketserver` にリネー"
"ムされました。 :term:`2to3` ツールが自動的にソースコードの import を修正しま"
"す。"

#: ../../library/socketserver.rst:13
msgid "**Source code:** :source:`Lib/SocketServer.py`"
msgstr "**ソースコード:** :source:`Lib/SocketServer.py`"

#: ../../library/socketserver.rst:17
msgid ""
"The :mod:`SocketServer` module simplifies the task of writing network "
"servers."
msgstr ""
":mod:`SocketServer` モジュールはネットワークサーバを実装するタスクを単純化し"
"ます。"

#: ../../library/socketserver.rst:19
msgid "There are four basic concrete server classes:"
msgstr "基本的な具象サーバクラスが4つあります:"

#: ../../library/socketserver.rst:24
msgid ""
"This uses the Internet TCP protocol, which provides for continuous streams "
"of data between the client and server. If *bind_and_activate* is true, the "
"constructor automatically attempts to invoke :meth:`~BaseServer.server_bind` "
"and :meth:`~BaseServer.server_activate`.  The other parameters are passed to "
"the :class:`BaseServer` base class."
msgstr ""

#: ../../library/socketserver.rst:34
msgid ""
"This uses datagrams, which are discrete packets of information that may "
"arrive out of order or be lost while in transit.  The parameters are the "
"same as for :class:`TCPServer`."
msgstr ""

#: ../../library/socketserver.rst:42
msgid ""
"These more infrequently used classes are similar to the TCP and UDP classes, "
"but use Unix domain sockets; they're not available on non-Unix platforms.  "
"The parameters are the same as for :class:`TCPServer`."
msgstr ""

#: ../../library/socketserver.rst:48
msgid ""
"These four classes process requests :dfn:`synchronously`; each request must "
"be completed before the next request can be started.  This isn't suitable if "
"each request takes a long time to complete, because it requires a lot of "
"computation, or because it returns a lot of data which the client is slow to "
"process.  The solution is to create a separate process or thread to handle "
"each request; the :class:`ForkingMixIn` and :class:`ThreadingMixIn` mix-in "
"classes can be used to support asynchronous behaviour."
msgstr ""
"これらの 4 つのクラスは要求を :dfn:`同期的に (synchronously)` 処理します; 各"
"要求は次の要求を開始する前に完結していなければなりません。同期的な処理は、"
"サーバで大量の計算を必要とする、あるいはクライアントが処理するには時間がかか"
"りすぎるような大量のデータを返す、といった理由によってリクエストに長い時間が"
"かかる状況には向いていません。こうした状況の解決方法は別のプロセスを生成する"
"か、個々の要求を扱うスレッドを生成することです;  :class:`ForkingMixIn` およ"
"び :class:`ThreadingMixIn` 配合クラス (mix-in classes) を使えば、非同期的な動"
"作をサポートできます。"

#: ../../library/socketserver.rst:56
msgid ""
"Creating a server requires several steps.  First, you must create a request "
"handler class by subclassing the :class:`BaseRequestHandler` class and "
"overriding its :meth:`~BaseRequestHandler.handle` method; this method will "
"process incoming requests.  Second, you must instantiate one of the server "
"classes, passing it the server's address and the request handler class.  "
"Then call the :meth:`~BaseServer.handle_request` or :meth:`~BaseServer."
"serve_forever` method of the server object to process one or many requests.  "
"Finally, call :meth:`~BaseServer.server_close` to close the socket."
msgstr ""

#: ../../library/socketserver.rst:67
msgid ""
"When inheriting from :class:`ThreadingMixIn` for threaded connection "
"behavior, you should explicitly declare how you want your threads to behave "
"on an abrupt shutdown. The :class:`ThreadingMixIn` class defines an "
"attribute *daemon_threads*, which indicates whether or not the server should "
"wait for thread termination. You should set the flag explicitly if you would "
"like threads to behave autonomously; the default is :const:`False`, meaning "
"that Python will not exit until all threads created by :class:"
"`ThreadingMixIn` have exited."
msgstr ""
":class:`ThreadingMixIn` から継承してスレッドを利用した接続を行う場合、突発的"
"な通信切断時の処理を明示的に指定する必要があります。 :class:`ThreadingMixIn` "
"クラスには *daemon_threads* 属性があり、サーバがスレッドの終了を待ち合わせる"
"かどうかを指定する事ができます。スレッドが独自の処理を行う場合は、このフラグ"
"を明示的に指定します。デフォルトは :const:`False` で、Pythonは :class:"
"`ThreadingMixIn` クラスが起動した全てのスレッドが終了するまで実行し続けます。"

#: ../../library/socketserver.rst:75
msgid ""
"Server classes have the same external methods and attributes, no matter what "
"network protocol they use."
msgstr ""
"サーバクラス群は使用するネットワークプロトコルに関わらず、同じ外部メソッドお"
"よび属性を持ちます。"

#: ../../library/socketserver.rst:80
msgid "Server Creation Notes"
msgstr "サーバ生成に関するノート"

#: ../../library/socketserver.rst:82
msgid ""
"There are five classes in an inheritance diagram, four of which represent "
"synchronous servers of four types::"
msgstr ""
"継承図にある五つのクラスのうち四つは四種類の同期サーバを表わしています::"

#: ../../library/socketserver.rst:99
msgid ""
"Note that :class:`UnixDatagramServer` derives from :class:`UDPServer`, not "
"from :class:`UnixStreamServer` --- the only difference between an IP and a "
"Unix stream server is the address family, which is simply repeated in both "
"Unix server classes."
msgstr ""
":class:`UnixDatagramServer` は :class:`UDPServer` から派生していて、 :class:"
"`UnixStreamServer` からではないことに注意してください --- IP と Unix ストリー"
"ムサーバの唯一の違いはアドレスファミリーでそれは両方の Unix サーバクラスで単"
"純に繰り返されています。"

#: ../../library/socketserver.rst:108
msgid ""
"Forking and threading versions of each type of server can be created using "
"these mix-in classes.  For instance, :class:`ThreadingUDPServer` is created "
"as follows::"
msgstr ""

#: ../../library/socketserver.rst:115
msgid ""
"The mix-in class comes first, since it overrides a method defined in :class:"
"`UDPServer`.  Setting the various attributes also changes the behavior of "
"the underlying server mechanism."
msgstr ""
"ミクシンクラスは :class:`UDPServer` で定義されるメソッドをオーバライドするた"
"めに、最初に来ます。様々な属性を設定することで元になるサーバ機構の振る舞いを"
"変えられます。"

#: ../../library/socketserver.rst:119
msgid ""
":class:`ForkingMixIn` and the Forking classes mentioned below are only "
"available on POSIX platforms that support :func:`~os.fork`."
msgstr ""

#: ../../library/socketserver.rst:128
msgid "These classes are pre-defined using the mix-in classes."
msgstr ""

#: ../../library/socketserver.rst:131
msgid ""
"To implement a service, you must derive a class from :class:"
"`BaseRequestHandler` and redefine its :meth:`~BaseRequestHandler.handle` "
"method. You can then run various versions of the service by combining one of "
"the server classes with your request handler class.  The request handler "
"class must be different for datagram or stream services.  This can be hidden "
"by using the handler subclasses :class:`StreamRequestHandler` or :class:"
"`DatagramRequestHandler`."
msgstr ""
"サービスの実装には、 :class:`BaseRequestHandler` からクラスを派生させてその :"
"meth:`~BaseRequestHandler.handle` メソッドを再定義しなければなりません。この"
"ようにすれば、サーバクラスと要求処理クラスを結合して様々なバージョンのサービ"
"スを実行することができます。要求処理クラスはデータグラムサービスかストリーム"
"サービスかで異なることでしょう。この違いは処理サブクラス :class:"
"`StreamRequestHandler` または :class:`DatagramRequestHandler` を使うという形"
"で隠蔽できます。"

#: ../../library/socketserver.rst:139
msgid ""
"Of course, you still have to use your head!  For instance, it makes no sense "
"to use a forking server if the service contains state in memory that can be "
"modified by different requests, since the modifications in the child process "
"would never reach the initial state kept in the parent process and passed to "
"each child.  In this case, you can use a threading server, but you will "
"probably have to use locks to protect the integrity of the shared data."
msgstr ""
"もちろん、まだ頭を使わなければなりません! たとえば、サービスがリクエストに"
"よっては書き換えられるようなメモリ上の状態を使うならば、フォークするサーバを"
"使うのは馬鹿げています。というのも子プロセスでの書き換えは親プロセスで保存さ"
"れている初期状態にも親プロセスから分配される各子プロセスの状態にも届かないか"
"らです。この場合、スレッド実行するサーバを使うことはできますが、共有データの"
"一貫性を保つためにロックを使わなければならなくなるでしょう。"

#: ../../library/socketserver.rst:146
msgid ""
"On the other hand, if you are building an HTTP server where all data is "
"stored externally (for instance, in the file system), a synchronous class "
"will essentially render the service \"deaf\" while one request is being "
"handled -- which may be for a very long time if a client is slow to receive "
"all the data it has requested.  Here a threading or forking server is "
"appropriate."
msgstr ""
"一方、全てのデータが外部に(たとえばファイルシステムに)保存される HTTP サーバ"
"を作っているのだとすると、同期クラスではどうしても一つの要求が処理されている"
"間サービスが「耳の聞こえない」状態を呈することになります --- この状態はもしク"
"ライアントが要求した全てのデータをゆっくり受け取るととても長い時間続きかねま"
"せん。こういう場合にはサーバをスレッド実行したりフォークすることが適切です。"

#: ../../library/socketserver.rst:152
msgid ""
"In some cases, it may be appropriate to process part of a request "
"synchronously, but to finish processing in a forked child depending on the "
"request data.  This can be implemented by using a synchronous server and "
"doing an explicit fork in the request handler class :meth:"
"`~BaseRequestHandler.handle` method."
msgstr ""
"ある場合には、要求の一部を同期的に処理する一方で、要求データに依って子プロセ"
"スをフォークして処理を終了させる、といった方法も適当かもしれません。こうした"
"処理方法は同期サーバを使って要求処理クラスの :meth:`~BaseRequestHandler."
"handle` メソッドの中で自分でフォークするようにして実装することができます。"

#: ../../library/socketserver.rst:157
msgid ""
"Another approach to handling multiple simultaneous requests in an "
"environment that supports neither threads nor :func:`~os.fork` (or where "
"these are too expensive or inappropriate for the service) is to maintain an "
"explicit table of partially finished requests and to use :func:`~select."
"select` to decide which request to work on next (or whether to handle a new "
"incoming request).  This is particularly important for stream services where "
"each client can potentially be connected for a long time (if threads or "
"subprocesses cannot be used). See :mod:`asyncore` for another way to manage "
"this."
msgstr ""
"スレッドも :func:`~os.fork` もサポートされない環境で (もしくはサービスにとっ"
"てそれらがあまりに高価についたり不適切な場合に) 多数の同時要求を捌くもう一つ"
"のアプローチは、部分的に処理し終えた要求のテーブルを自分で管理し、次にどの要"
"求に対処するか (または新しく入ってきた要求を扱うかどうか) を決めるのに :func:"
"`~select.select` を使う方法です。これは (もしスレッドやサブプロセスが使えなけ"
"れば) 特にストリームサービスに対して重要で、そのようなサービスでは各クライア"
"ントが潜在的に長く接続し続けます。この問題を管理する別の方法について、 :mod:"
"`asyncore` モジュールを参照してください。"

#: ../../library/socketserver.rst:171
msgid "Server Objects"
msgstr "Serverオブジェクト"

#: ../../library/socketserver.rst:175
msgid ""
"This is the superclass of all Server objects in the module.  It defines the "
"interface, given below, but does not implement most of the methods, which is "
"done in subclasses.  The two parameters are stored in the respective :attr:"
"`server_address` and :attr:`RequestHandlerClass` attributes."
msgstr ""

#: ../../library/socketserver.rst:183
msgid ""
"Return an integer file descriptor for the socket on which the server is "
"listening.  This function is most commonly passed to :func:`select.select`, "
"to allow monitoring multiple servers in the same process."
msgstr ""
"サーバが要求待ちを行っているソケットのファイル記述子を整数で返します。この関"
"数は一般的に、同じプロセス中の複数のサーバを監視できるようにするために、 :"
"func:`select.select` に渡されます。"

#: ../../library/socketserver.rst:190
msgid ""
"Process a single request.  This function calls the following methods in "
"order: :meth:`get_request`, :meth:`verify_request`, and :meth:"
"`process_request`.  If the user-provided :meth:`~BaseRequestHandler.handle` "
"method of the handler class raises an exception, the server's :meth:"
"`handle_error` method will be called.  If no request is received within :"
"attr:`timeout` seconds, :meth:`handle_timeout` will be called and :meth:"
"`handle_request` will return."
msgstr ""
"単一の要求を処理します。この関数は以下のメソッド: :meth:`get_request` 、 :"
"meth:`verify_request` 、および :meth:`process_request` を順番に呼び出します。"
"ハンドラ中でユーザによって提供された :meth:`~BaseRequestHandler.handle` が例"
"外を送出した場合、サーバの :meth:`handle_error` メソッドが呼び出されます。 :"
"attr:`timeout` 秒以内にリクエストが来なかった場合、 :meth:`handle_timeout` が"
"呼ばれて、 :meth:`handle_request` が終了します。"

#: ../../library/socketserver.rst:202
msgid ""
"Handle requests until an explicit :meth:`shutdown` request.  Poll for "
"shutdown every *poll_interval* seconds. Ignores the :attr:`timeout` "
"attribute. If you need to do periodic tasks, do them in another thread."
msgstr ""

#: ../../library/socketserver.rst:210
msgid "Tell the :meth:`serve_forever` loop to stop and wait until it does."
msgstr ""
":meth:`serve_forever` ループに停止するように指示し、停止されるまで待ちます。"

#: ../../library/socketserver.rst:217
msgid "Clean up the server. May be overridden."
msgstr "サーバをクリーンアップします。上書き出来ます。"

#: ../../library/socketserver.rst:224
msgid ""
"The family of protocols to which the server's socket belongs. Common "
"examples are :const:`socket.AF_INET` and :const:`socket.AF_UNIX`."
msgstr ""
"サーバのソケットが属しているプロトコルファミリです。一般的な値は :const:"
"`socket.AF_INET` および :const:`socket.AF_UNIX` です。"

#: ../../library/socketserver.rst:230
msgid ""
"The user-provided request handler class; an instance of this class is "
"created for each request."
msgstr ""
"ユーザが提供する要求処理クラスです; 要求ごとにこのクラスのインスタンスが生成"
"されます。"

#: ../../library/socketserver.rst:236
msgid ""
"The address on which the server is listening.  The format of addresses "
"varies depending on the protocol family; see the documentation for the :mod:"
"`socket` module for details.  For Internet protocols, this is a tuple "
"containing a string giving the address, and an integer port number: "
"``('127.0.0.1', 80)``, for example."
msgstr ""
"サーバが要求待ちを行うアドレスです。アドレスの形式はプロトコルファミリによっ"
"て異なります。詳細は :mod:`socket` モジュールを参照してください。インターネッ"
"トプロトコルでは、この値は例えば ``('127.0.0.1', 80)`` のようにアドレスを与え"
"る文字列と整数のポート番号を含むタプルです。"

#: ../../library/socketserver.rst:245
msgid ""
"The socket object on which the server will listen for incoming requests."
msgstr "サーバが入力の要求待ちを行うためのソケットオブジェクトです。"

#: ../../library/socketserver.rst:248
msgid "The server classes support the following class variables:"
msgstr "サーバクラスは以下のクラス変数をサポートします:"

#: ../../library/socketserver.rst:254
msgid ""
"Whether the server will allow the reuse of an address. This defaults to :"
"const:`False`, and can be set in subclasses to change the policy."
msgstr ""
"サーバがアドレスの再使用を許すかどうかを示す値です。この値は標準で :const:"
"`False` で、サブクラスで再使用ポリシを変更するために設定することができます。"

#: ../../library/socketserver.rst:260
msgid ""
"The size of the request queue.  If it takes a long time to process a single "
"request, any requests that arrive while the server is busy are placed into a "
"queue, up to :attr:`request_queue_size` requests.  Once the queue is full, "
"further requests from clients will get a \"Connection denied\" error.  The "
"default value is usually 5, but this can be overridden by subclasses."
msgstr ""
"要求待ち行列 (queue) のサイズです。単一の要求を処理するのに長時間かかる場合に"
"は、サーバが処理中に届いた要求は最大 :attr:`request_queue_size` 個まで待ち行"
"列に置かれます。待ち行列が一杯になると、それ以降のクライアントからの要求は "
"\"接続拒否 (Connection denied)\" エラーになります。標準の値は通常 5 ですが、"
"この値はサブクラスで上書きすることができます。"

#: ../../library/socketserver.rst:269
msgid ""
"The type of socket used by the server; :const:`socket.SOCK_STREAM` and :"
"const:`socket.SOCK_DGRAM` are two common values."
msgstr ""
"サーバが使うソケットの型です; 一般的な2つの値は、 :const:`socket."
"SOCK_STREAM` と :const:`socket.SOCK_DGRAM` です。"

#: ../../library/socketserver.rst:275
msgid ""
"Timeout duration, measured in seconds, or :const:`None` if no timeout is "
"desired.  If :meth:`handle_request` receives no incoming requests within the "
"timeout period, the :meth:`handle_timeout` method is called."
msgstr ""
"タイムアウト時間(秒)、もしくは、タイムアウトを望まない場合に :const:"
"`None` 。 :meth:`handle_request` がこの時間内にリクエストを受信しない場合、 :"
"meth:`handle_timeout` メソッドが呼ばれます。"

#: ../../library/socketserver.rst:280
msgid ""
"There are various server methods that can be overridden by subclasses of "
"base server classes like :class:`TCPServer`; these methods aren't useful to "
"external users of the server object."
msgstr ""
":class:`TCPServer` のような基底クラスのサブクラスで上書きできるサーバメソッド"
"は多数あります; これらのメソッドはサーバオブジェクトの外部のユーザにとっては"
"役にたたないものです。"

#: ../../library/socketserver.rst:289
msgid ""
"Actually processes the request by instantiating :attr:`RequestHandlerClass` "
"and calling its :meth:`~BaseRequestHandler.handle` method."
msgstr ""
":attr:`RequestHandlerClass` をインスタンス化し、 :meth:`~BaseRequestHandler."
"handle` メソッドを呼び出して、実際に要求を処理します。"

#: ../../library/socketserver.rst:295
msgid ""
"Must accept a request from the socket, and return a 2-tuple containing the "
"*new* socket object to be used to communicate with the client, and the "
"client's address."
msgstr ""
"ソケットから要求を受理して、クライアントとの通信に使われる *新しい* ソケット"
"オブジェクト、およびクライアントのアドレスからなる、2 要素のタプルを返しま"
"す。"

#: ../../library/socketserver.rst:302
msgid ""
"This function is called if the :meth:`~BaseRequestHandler.handle` method of "
"a :attr:`RequestHandlerClass` instance raises an exception.  The default "
"action is to print the traceback to standard output and continue handling "
"further requests."
msgstr ""

#: ../../library/socketserver.rst:310
msgid ""
"This function is called when the :attr:`timeout` attribute has been set to a "
"value other than :const:`None` and the timeout period has passed with no "
"requests being received.  The default action for forking servers is to "
"collect the status of any child processes that have exited, while in "
"threading servers this method does nothing."
msgstr ""
"この関数は :attr:`timeout` 属性が :const:`None` 以外に設定されて、リクエスト"
"がないままタイムアウト秒数が過ぎたときに呼ばれます。 fork型サーバーでのデフォ"
"ルトの動作は、終了した子プロセスの情報を集めるようになっています。スレッド型"
"サーバーではこのメソッドは何もしません。"

#: ../../library/socketserver.rst:319
msgid ""
"Calls :meth:`finish_request` to create an instance of the :attr:"
"`RequestHandlerClass`.  If desired, this function can create a new process "
"or thread to handle the request; the :class:`ForkingMixIn` and :class:"
"`ThreadingMixIn` classes do this."
msgstr ""
":meth:`finish_request` を呼び出して、 :attr:`RequestHandlerClass` のインスタ"
"ンスを生成します。必要なら、この関数から新たなプロセスかスレッドを生成して要"
"求を処理することができます; その処理は :class:`ForkingMixIn` または :class:"
"`ThreadingMixIn`  クラスが行います。"

#: ../../library/socketserver.rst:331
msgid ""
"Called by the server's constructor to activate the server.  The default "
"behavior for a TCP server just invokes :meth:`~socket.socket.listen` on the "
"server's socket. May be overridden."
msgstr ""

#: ../../library/socketserver.rst:338
msgid ""
"Called by the server's constructor to bind the socket to the desired "
"address. May be overridden."
msgstr ""
"サーバのコンストラクタによって呼び出され、適切なアドレスにソケットをバインド"
"します。このメソッドは上書きできます。"

#: ../../library/socketserver.rst:344
msgid ""
"Must return a Boolean value; if the value is :const:`True`, the request will "
"be processed, and if it's :const:`False`, the request will be denied. This "
"function can be overridden to implement access controls for a server. The "
"default implementation always returns :const:`True`."
msgstr ""
"ブール値を返さなければなりません; 値が :const:`True` の場合には要求が処理さ"
"れ、 :const:`False` の場合には要求は拒否されます。サーバへのアクセス制御を実"
"装するためにこの関数を上書きすることができます。標準の実装では常に :const:"
"`True` を返します。"

#: ../../library/socketserver.rst:351
msgid "Request Handler Objects"
msgstr ""

#: ../../library/socketserver.rst:355
msgid ""
"This is the superclass of all request handler objects.  It defines the "
"interface, given below.  A concrete request handler subclass must define a "
"new :meth:`handle` method, and can override any of the other methods.  A new "
"instance of the subclass is created for each request."
msgstr ""

#: ../../library/socketserver.rst:364
msgid ""
"Called before the :meth:`handle` method to perform any initialization "
"actions required.  The default implementation does nothing."
msgstr ""
":meth:`handle`   メソッドより前に呼び出され、何らかの必要な初期化処理を行いま"
"す。標準の実装では何も行いません。"

#: ../../library/socketserver.rst:370
msgid ""
"This function must do all the work required to service a request.  The "
"default implementation does nothing.  Several instance attributes are "
"available to it; the request is available as :attr:`self.request`; the "
"client address as :attr:`self.client_address`; and the server instance as :"
"attr:`self.server`, in case it needs access to per-server information."
msgstr ""
"この関数では、クライアントからの要求を実現するために必要な全ての作業を行わな"
"ければなりません。デフォルト実装では何もしません。この作業の上で、いくつかの"
"インスタンス属性を利用することができます; クライアントからの要求は :attr:"
"`self.request` です; クライアントのアドレスは :attr:`self.client_address` で"
"す;  そしてサーバごとの情報にアクセスする場合には、サーバインスタンスを :"
"attr:`self.server` で取得できます。"

#: ../../library/socketserver.rst:376
msgid ""
"The type of :attr:`self.request` is different for datagram or stream "
"services.  For stream services, :attr:`self.request` is a socket object; for "
"datagram services, :attr:`self.request` is a pair of string and socket."
msgstr ""

#: ../../library/socketserver.rst:383
msgid ""
"Called after the :meth:`handle` method to perform any clean-up actions "
"required.  The default implementation does nothing.  If :meth:`setup` raises "
"an exception, this function will not be called."
msgstr ""
":meth:`handle`   メソッドより後に呼び出され、何らかの必要なクリーンアップ処理"
"を行います。標準の実装では何も行いません。 :meth:`setup` メソッドが例外を送出"
"した場合、このメソッドは呼び出されません。"

#: ../../library/socketserver.rst:391
msgid ""
"These :class:`BaseRequestHandler` subclasses override the :meth:"
"`~BaseRequestHandler.setup` and :meth:`~BaseRequestHandler.finish` methods, "
"and provide :attr:`self.rfile` and :attr:`self.wfile` attributes. The :attr:"
"`self.rfile` and :attr:`self.wfile` attributes can be read or written, "
"respectively, to get the request data or return data to the client."
msgstr ""

#: ../../library/socketserver.rst:400
msgid "Examples"
msgstr "例"

#: ../../library/socketserver.rst:403
msgid ":class:`SocketServer.TCPServer` Example"
msgstr ":class:`SocketServer.TCPServer` の例"

#: ../../library/socketserver.rst:405 ../../library/socketserver.rst:509
msgid "This is the server side::"
msgstr "サーバーサイドの例です::"

#: ../../library/socketserver.rst:436
msgid ""
"An alternative request handler class that makes use of streams (file-like "
"objects that simplify communication by providing the standard file "
"interface)::"
msgstr ""
"別の、ストリーム(標準のファイル型のインタフェースを利用して通信をシンプルにし"
"たファイルライクオブジェクト)を使うリクエストハンドラクラスの例です::"

#: ../../library/socketserver.rst:451
msgid ""
"The difference is that the ``readline()`` call in the second handler will "
"call ``recv()`` multiple times until it encounters a newline character, "
"while the single ``recv()`` call in the first handler will just return what "
"has been sent from the client in one ``sendall()`` call."
msgstr ""
"先ほどとの違いは、``readline()`` の呼び出しが、改行を受け取るまで ``recv()`` "
"を複数回呼び出すことです。1回の ``recv()`` の呼び出しは、クライアント側から1"
"回の ``sendall()`` 呼び出しで送信された分しか受け取りません。"

#: ../../library/socketserver.rst:457 ../../library/socketserver.rst:533
msgid "This is the client side::"
msgstr "クライアントサイドの例::"

#: ../../library/socketserver.rst:482 ../../library/socketserver.rst:611
msgid "The output of the example should look something like this:"
msgstr "この例の出力は次のようになります:"

#: ../../library/socketserver.rst:484
msgid "Server:"
msgstr "サーバー:"

#: ../../library/socketserver.rst:494
msgid "Client:"
msgstr "クライアント:"

#: ../../library/socketserver.rst:507
msgid ":class:`SocketServer.UDPServer` Example"
msgstr ":class:`SocketServer.UDPServer` の例"

#: ../../library/socketserver.rst:552
msgid ""
"The output of the example should look exactly like for the TCP server "
"example."
msgstr "この例の出力は、TCPサーバーの例と全く同じようになります。"

#: ../../library/socketserver.rst:556
msgid "Asynchronous Mixins"
msgstr "非同期処理の Mix-in"

#: ../../library/socketserver.rst:558
msgid ""
"To build asynchronous handlers, use the :class:`ThreadingMixIn` and :class:"
"`ForkingMixIn` classes."
msgstr ""
"複数の接続を非同期に処理するハンドラを作るには、 :class:`ThreadingMixIn` か :"
"class:`ForkingMixIn` クラスを利用します。"

#: ../../library/socketserver.rst:561
msgid "An example for the :class:`ThreadingMixIn` class::"
msgstr ":class:`ThreadingMixIn` クラスの利用例::"

#: ../../library/socketserver.rst:622
msgid ""
"The :class:`ForkingMixIn` class is used in the same way, except that the "
"server will spawn a new process for each request. Available only on POSIX "
"platforms that support :func:`~os.fork`."
msgstr ""
