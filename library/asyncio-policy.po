# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-policy.rst:8
msgid "Policies"
msgstr "ポリシー"

#: ../../library/asyncio-policy.rst:10
msgid ""
"An event loop policy is a global object used to get and set the current :ref:"
"`event loop <asyncio-event-loop>`, as well as create new event loops. The "
"default policy can be :ref:`replaced <asyncio-policy-get-set>` with :ref:"
"`built-in alternatives <asyncio-policy-builtin>` to use different event loop "
"implementations, or substituted by a :ref:`custom policy <asyncio-custom-"
"policies>` that can override these behaviors."
msgstr ""

#: ../../library/asyncio-policy.rst:19
msgid ""
"The :ref:`policy object <asyncio-policy-objects>` gets and sets a separate "
"event loop per *context*. This is per-thread by default, though custom "
"policies could define *context* differently."
msgstr ""

#: ../../library/asyncio-policy.rst:24
msgid ""
"Custom event loop policies can control the behavior of :func:"
"`get_event_loop`, :func:`set_event_loop`, and :func:`new_event_loop`."
msgstr ""

#: ../../library/asyncio-policy.rst:27
msgid ""
"Policy objects should implement the APIs defined in the :class:"
"`AbstractEventLoopPolicy` abstract base class."
msgstr ""
"ポリシーオブジェクトは :class:`AbstractEventLoopPolicy` 抽象基底クラスで定義"
"された API を実装しなければなりません。"

#: ../../library/asyncio-policy.rst:34
msgid "Getting and Setting the Policy"
msgstr "ポリシーの取得と設定"

#: ../../library/asyncio-policy.rst:36
msgid ""
"The following functions can be used to get and set the policy for the "
"current process:"
msgstr ""
"以下の関数は現在のプロセスに対するポリシーの取得や設定をするために使われます:"

#: ../../library/asyncio-policy.rst:41
msgid "Return the current process-wide policy."
msgstr "プロセス全体にわたる現在のポリシーを返します。"

#: ../../library/asyncio-policy.rst:45
msgid "Set the current process-wide policy to *policy*."
msgstr "プロセス全体にわたる現在のポリシーを *policy* に設定します。"

#: ../../library/asyncio-policy.rst:47
msgid "If *policy* is set to ``None``, the default policy is restored."
msgstr ""
"*policy* が ``None`` の場合、デフォルトポリシーが現在のポリシーに戻されます。"

#: ../../library/asyncio-policy.rst:53
msgid "Policy Objects"
msgstr "ポリシーオブジェクト"

#: ../../library/asyncio-policy.rst:55
msgid "The abstract event loop policy base class is defined as follows:"
msgstr "イベントループポリシーの抽象基底クラスは以下のように定義されています:"

#: ../../library/asyncio-policy.rst:59
msgid "An abstract base class for asyncio policies."
msgstr "asyncio ポリシーの抽象基底クラスです。"

#: ../../library/asyncio-policy.rst:63
msgid "Get the event loop for the current context."
msgstr "現在のコンテキストのイベントループを取得します。"

#: ../../library/asyncio-policy.rst:65
msgid ""
"Return an event loop object implementing the :class:`AbstractEventLoop` "
"interface."
msgstr ""
":class:`AbstractEventLoop` のインターフェースを実装したイベントループオブジェ"
"クトを返します。"

#: ../../library/asyncio-policy.rst:68 ../../library/asyncio-policy.rst:80
msgid "This method should never return ``None``."
msgstr "このメソッドは ``None`` を返してはいけません。"

#: ../../library/asyncio-policy.rst:74
msgid "Set the event loop for the current context to *loop*."
msgstr "現在のコンテキストにイベントループ *loop* を設定します。"

#: ../../library/asyncio-policy.rst:78
msgid "Create and return a new event loop object."
msgstr "新しいイベントループオブジェクトを生成して返します。"

#: ../../library/asyncio-policy.rst:84
msgid "Get a child process watcher object."
msgstr "子プロセスを監視するウオッチャーオブジェクトを返します。"

#: ../../library/asyncio-policy.rst:86
msgid ""
"Return a watcher object implementing the :class:`AbstractChildWatcher` "
"interface."
msgstr ""
":class:`AbstractChildWatcher` のインターフェースを実装したウオッチャーオブ"
"ジェクトを返します。"

#: ../../library/asyncio-policy.rst:89 ../../library/asyncio-policy.rst:95
msgid "This function is Unix specific."
msgstr "この関数は Unix 特有です。"

#: ../../library/asyncio-policy.rst:93
msgid "Set the current child process watcher to *watcher*."
msgstr ""
"子プロセスに対する現在のウオッチャーオブジェクトを *watcher* に設定します。"

#: ../../library/asyncio-policy.rst:100
msgid "asyncio ships with the following built-in policies:"
msgstr "asyncio は以下の組み込みポリシーを提供します:"

#: ../../library/asyncio-policy.rst:105
msgid ""
"The default asyncio policy.  Uses :class:`SelectorEventLoop` on Unix and :"
"class:`ProactorEventLoop` on Windows."
msgstr ""
"デフォルトの asyncio ポリシーです。Unix では :class:`SelectorEventLoop` 、"
"Windows では :class:`ProactorEventLoop` を使います。"

#: ../../library/asyncio-policy.rst:108
msgid ""
"There is no need to install the default policy manually. asyncio is "
"configured to use the default policy automatically."
msgstr ""
"デフォルトのポリシーを手動でインストールする必要はありません。 asyncio はデ"
"フォルトポリシーを使うように自動的に構成されます。 "

#: ../../library/asyncio-policy.rst:113
msgid "On Windows, :class:`ProactorEventLoop` is now used by default."
msgstr ""
"Windows では :class:`ProactorEventLoop` がデフォルトで使われるようになりまし"
"た。"

#: ../../library/asyncio-policy.rst:115
msgid ""
":meth:`get_event_loop` now emits a :exc:`DeprecationWarning` if there is no "
"current event loop set and a new event loop has been implicitly created. In "
"Python 3.12 it will be an error."
msgstr ""

#: ../../library/asyncio-policy.rst:123
msgid ""
"An alternative event loop policy that uses the :class:`SelectorEventLoop` "
"event loop implementation."
msgstr ""
":class:`SelectorEventLoop` イベントループ実装を使った別のイベントループポリ"
"シーです。"

#: ../../library/asyncio-policy.rst:126 ../../library/asyncio-policy.rst:134
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`利用可能な環境 <availability>`: Windows 。"

#: ../../library/asyncio-policy.rst:131
msgid ""
"An alternative event loop policy that uses the :class:`ProactorEventLoop` "
"event loop implementation."
msgstr ""
":class:`ProactorEventLoop` イベントループ実装を使った別のイベントループポリ"
"シーです。"

#: ../../library/asyncio-policy.rst:140
msgid "Process Watchers"
msgstr "プロセスのウオッチャー"

#: ../../library/asyncio-policy.rst:142
msgid ""
"A process watcher allows customization of how an event loop monitors child "
"processes on Unix. Specifically, the event loop needs to know when a child "
"process has exited."
msgstr ""
"プロセスのウオッチャーは Unix 上でイベントループが子プロセスを監視する方法を"
"カスタマイズすることを可能にします。特に、子プロセスがいつ終了したかをイベン"
"トループは知る必要があります。"

#: ../../library/asyncio-policy.rst:146
msgid ""
"In asyncio, child processes are created with :func:`create_subprocess_exec` "
"and :meth:`loop.subprocess_exec` functions."
msgstr ""
"asyncio では、子プロセスは :func:`create_subprocess_exec` や :meth:`loop."
"subprocess_exec` 関数により生成されます。"

#: ../../library/asyncio-policy.rst:150
msgid ""
"asyncio defines the :class:`AbstractChildWatcher` abstract base class, which "
"child watchers should implement, and has four different implementations: :"
"class:`ThreadedChildWatcher` (configured to be used by default), :class:"
"`MultiLoopChildWatcher`, :class:`SafeChildWatcher`, and :class:"
"`FastChildWatcher`."
msgstr ""
"asyncio は、子プロセスのウオッチャーが実装すべき :class:"
"`AbstractChildWatcher` 抽象基底クラスを定義しており、さらに異なる4つの実装ク"
"ラスを提供しています: :class:`ThreadedChildWatcher` (デフォルトでこのクラスが"
"使われるように構成されます), :class:`MultiLoopChildWatcher`, :class:"
"`SafeChildWatcher`, そして :class:`FastChildWatcher` です。"

#: ../../library/asyncio-policy.rst:156
msgid ""
"See also the :ref:`Subprocess and Threads <asyncio-subprocess-threads>` "
"section."
msgstr ""
":ref:`サブプロセスとスレッド <asyncio-subprocess-threads>` 節も参照してくださ"
"い。"

#: ../../library/asyncio-policy.rst:159
msgid ""
"The following two functions can be used to customize the child process "
"watcher implementation used by the asyncio event loop:"
msgstr ""
"以下の2つの関数は asyncio のイベントループが使う子プロセスのウオッチャーの実"
"装をカスタマイズするために使うことができます:"

#: ../../library/asyncio-policy.rst:164
msgid "Return the current child watcher for the current policy."
msgstr "現在のポリシーにおける子プロセスのウオッチャーを返します。"

#: ../../library/asyncio-policy.rst:168
msgid ""
"Set the current child watcher to *watcher* for the current policy.  "
"*watcher* must implement methods defined in the :class:"
"`AbstractChildWatcher` base class."
msgstr ""
"現在ポリシーにおける子プロセスのウオッチャーを *watcher* に設定します。 "
"*watcher* は :class:`AbstractChildWatcher` 基底クラスで定義されたメソッドを実"
"装していなければなりません。"

#: ../../library/asyncio-policy.rst:173
msgid ""
"Third-party event loops implementations might not support custom child "
"watchers.  For such event loops, using :func:`set_child_watcher` might be "
"prohibited or have no effect."
msgstr ""
"サードパーティのイベントループ実装は子プロセスのウオッチャーのカスタマイズを"
"サポートしていない可能性があります。そのようなイベントループでは、 :func:"
"`set_child_watcher` 関数の利用は禁止されているか、または何の効果もありませ"
"ん。"

#: ../../library/asyncio-policy.rst:181
msgid "Register a new child handler."
msgstr "新しい子プロセスのハンドラを登録します。"

#: ../../library/asyncio-policy.rst:183
msgid ""
"Arrange for ``callback(pid, returncode, *args)`` to be called when a process "
"with PID equal to *pid* terminates.  Specifying another callback for the "
"same process replaces the previous handler."
msgstr ""
"プロセス ID (PID) が *pid* であるプロセスが終了した時に ``callback(pid, "
"returncode, *args)`` コールバック関数が呼び出されるように手配します。同じプロ"
"セスに対して別のコールバックを登録した場合、以前登録したハンドラを置き換えま"
"す。"

#: ../../library/asyncio-policy.rst:188
msgid "The *callback* callable must be thread-safe."
msgstr ""
"*callback* はスレッドセーフな呼び出し可能オブジェクトでなければなりません。"

#: ../../library/asyncio-policy.rst:192
msgid "Removes the handler for process with PID equal to *pid*."
msgstr ""
"プロセス ID (PID) が *pid* であるプロセスに対して登録されたハンドラを削除しま"
"す。"

#: ../../library/asyncio-policy.rst:194
msgid ""
"The function returns ``True`` if the handler was successfully removed, "
"``False`` if there was nothing to remove."
msgstr ""
"ハンドラが正しく削除された場合 ``True`` を返します。削除するハンドラがない場"
"合は ``False`` を返します。"

#: ../../library/asyncio-policy.rst:199
msgid "Attach the watcher to an event loop."
msgstr "ウオッチャーをイベントループに接続します。"

#: ../../library/asyncio-policy.rst:201
msgid ""
"If the watcher was previously attached to an event loop, then it is first "
"detached before attaching to the new loop."
msgstr ""
"ウオッチャーがイベントループに接続されている場合、新しいイベントループに接続"
"される前に接続済みのイベントループから切り離されます。"

#: ../../library/asyncio-policy.rst:204
msgid "Note: loop may be ``None``."
msgstr "注: 引数は ``None`` をとることができます。"

#: ../../library/asyncio-policy.rst:208
msgid "Return ``True`` if the watcher is ready to use."
msgstr "ウオッチャーが利用可能な状態なら ``True`` を返します。"

#: ../../library/asyncio-policy.rst:210
msgid ""
"Spawning a subprocess with *inactive* current child watcher raises :exc:"
"`RuntimeError`."
msgstr ""
"現在の子プロセスのウオッチャーが *アクティブでない* 場合にサブプロセスを生成"
"すると :exc:`RuntimeError` 例外が送出されます。"

#: ../../library/asyncio-policy.rst:217
msgid "Close the watcher."
msgstr "ウオッチャーをクローズします。"

#: ../../library/asyncio-policy.rst:219
msgid ""
"This method has to be called to ensure that underlying resources are cleaned-"
"up."
msgstr ""
"このメソッドは、ウオッチャーの背後にあるリソースを確実にクリーンアップするた"
"めに必ず呼び出さなければなりません。"

#: ../../library/asyncio-policy.rst:224
msgid ""
"This implementation starts a new waiting thread for every subprocess spawn."
msgstr ""
"この実装は、各サブプロセスの生成時に新しい待ち受けスレッドを開始します。"

#: ../../library/asyncio-policy.rst:226
msgid ""
"It works reliably even when the asyncio event loop is run in a non-main OS "
"thread."
msgstr ""
"このクラスは asyncio イベントループがメインでない OS スレッド上で実行されてい"
"ても期待通りに動きます。"

#: ../../library/asyncio-policy.rst:228
msgid ""
"There is no noticeable overhead when handling a big number of children "
"(*O(1)* each time a child terminates), but starting a thread per process "
"requires extra memory."
msgstr ""
"大量の子プロセスを処理する際に顕著なオーバーヘッドはありません (子プロセスが"
"終了するごとに *O(1)* 程度です) が、各プロセスに対してスレッドを開始するため"
"の追加のメモリが必要になります。"

#: ../../library/asyncio-policy.rst:231
msgid "This watcher is used by default."
msgstr "このウオッチャーはデフォルトで使われます。"

#: ../../library/asyncio-policy.rst:237
msgid ""
"This implementation registers a :py:data:`SIGCHLD` signal handler on "
"instantiation. That can break third-party code that installs a custom "
"handler for :py:data:`SIGCHLD` signal."
msgstr ""
"この実装はインスタンス化の際に :py:data:`SIGCHLD` シグナルハンドラを登録しま"
"す。これにより、独自の :py:data:`SIGCHLD` シグナルハンドラをインストールする"
"ようなサードパーティのコードを壊す可能性があります。"

#: ../../library/asyncio-policy.rst:241 ../../library/asyncio-policy.rst:259
msgid ""
"The watcher avoids disrupting other code spawning processes by polling every "
"process explicitly on a :py:data:`SIGCHLD` signal."
msgstr ""
"このウオッチャーは、各プロセスに明示的に :py:data:`SIGCHLD` シグナルをポーリ"
"ングさせることにより、プロセスを生成する他のコードを中断させないようにしま"
"す。"

#: ../../library/asyncio-policy.rst:244
msgid ""
"There is no limitation for running subprocesses from different threads once "
"the watcher is installed."
msgstr ""
"いったんウオッチャーがインストールされると、異なるスレッドからのサブプロセス"
"の実行について特に制限はありません。"

#: ../../library/asyncio-policy.rst:247
msgid ""
"The solution is safe but it has a significant overhead when handling a big "
"number of processes (*O(n)* each time a :py:data:`SIGCHLD` is received)."
msgstr ""
"このソリューションは安全ですが、大量の子プロセスを処理する際に非常に大きな"
"オーバーヘッドを伴います (:py:data:`SIGCHLD` シグナルを受信するごとに *O(n)* "
"程度)。"

#: ../../library/asyncio-policy.rst:255
msgid ""
"This implementation uses active event loop from the main thread to handle :"
"py:data:`SIGCHLD` signal. If the main thread has no running event loop "
"another thread cannot spawn a subprocess (:exc:`RuntimeError` is raised)."
msgstr ""
"この実装はメインスレッドでアクティブなイベントループを使って :py:data:"
"`SIGCHLD` シグナルを処理します。メインスレッドでイベントループが実行中でない"
"場合、別のスレッドからサブプロセスを生成することはできません (:exc:"
"`RuntimeError` 例外が送出されます)。"

#: ../../library/asyncio-policy.rst:262
msgid ""
"This solution is as safe as :class:`MultiLoopChildWatcher` and has the same "
"*O(N)* complexity but requires a running event loop in the main thread to "
"work."
msgstr ""
"このソリューションは :class:`MultiLoopChildWatcher` と同じように安全で、同程"
"度の *O(N)* オーバーヘッドがあります。一方で、このソリューションはメインス"
"レッドで実行中のイベントループが必要です。"

#: ../../library/asyncio-policy.rst:267
msgid ""
"This implementation reaps every terminated processes by calling ``os."
"waitpid(-1)`` directly, possibly breaking other code spawning processes and "
"waiting for their termination."
msgstr ""
"この実装は終了した子プロセスを得るために直接 ``os.waitpid(-1)`` を呼び出しま"
"す。これにより、プロセスを生成してその終了を待ち受ける別のコードを壊す可能性"
"があります。"

#: ../../library/asyncio-policy.rst:271
msgid ""
"There is no noticeable overhead when handling a big number of children "
"(*O(1)* each time a child terminates)."
msgstr ""
"大量の子プロセスを処理する際に顕著なオーバーヘッドはありません (子プロセスが"
"終了するごとに *O(1)* 程度です)。"

#: ../../library/asyncio-policy.rst:274
msgid ""
"This solution requires a running event loop in the main thread to work, as :"
"class:`SafeChildWatcher`."
msgstr ""
"このソリューションは、 :class:`SafeChildWatcher` と同様にメインスレッドで実行"
"中のイベントループが必要です。"

#: ../../library/asyncio-policy.rst:279
msgid ""
"This implementation polls process file descriptors (pidfds) to await child "
"process termination. In some respects, :class:`PidfdChildWatcher` is a "
"\"Goldilocks\" child watcher implementation. It doesn't require signals or "
"threads, doesn't interfere with any processes launched outside the event "
"loop, and scales linearly with the number of subprocesses launched by the "
"event loop. The main disadvantage is that pidfds are specific to Linux, and "
"only work on recent (5.3+) kernels."
msgstr ""
"この実装は子プロセスの終了を待ち受けるためにプロセスのファイル記述子 "
"(pidfds) をポーリングします。いくつかの点で、 :class:`PidfdChildWatcher` は "
"\"Goldilocks\" 的な子プロセスのウオッチャー実装です。この実装はシグナルもス"
"レッドも必要とせず、イベントループの外で生成されたいかなるプロセスとも干渉せ"
"ず、しかもイベントループから生成されたサブプロセスの数に対して線形にスケール"
"します。主な欠点は pidfds が Linux 特有であり、最近のカーネル (5.3+) でしか動"
"かないことです。"

#: ../../library/asyncio-policy.rst:293
msgid "Custom Policies"
msgstr "ポリシーのカスタマイズ"

#: ../../library/asyncio-policy.rst:295
msgid ""
"To implement a new event loop policy, it is recommended to subclass :class:"
"`DefaultEventLoopPolicy` and override the methods for which custom behavior "
"is wanted, e.g.::"
msgstr ""
"新しいイベントループのポリシーを実装するためには、以下に示すように :class:"
"`DefaultEventLoopPolicy` を継承して振る舞いを変更したいメソッドをオーバーライ"
"ドすることが推奨されます。::"
