# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 02:45+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-policy.rst:8
msgid "Policies"
msgstr ""

#: ../../library/asyncio-policy.rst:10
msgid ""
"An event loop policy is a global per-process object that controls the "
"management of the event loop. Each event loop has a default policy, which "
"can be changed and customized using the policy API."
msgstr ""

#: ../../library/asyncio-policy.rst:14
msgid ""
"A policy defines the notion of *context* and manages a separate event loop "
"per context. The default policy defines *context* to be the current thread."
msgstr ""

#: ../../library/asyncio-policy.rst:18
msgid ""
"By using a custom event loop policy, the behavior of :func:"
"`get_event_loop`, :func:`set_event_loop`, and :func:`new_event_loop` "
"functions can be customized."
msgstr ""

#: ../../library/asyncio-policy.rst:22
msgid ""
"Policy objects should implement the APIs defined in the :class:"
"`AbstractEventLoopPolicy` abstract base class."
msgstr ""

#: ../../library/asyncio-policy.rst:27
msgid "Getting and Setting the Policy"
msgstr ""

#: ../../library/asyncio-policy.rst:29
msgid ""
"The following functions can be used to get and set the policy for the "
"current process:"
msgstr ""

#: ../../library/asyncio-policy.rst:34
msgid "Return the current process-wide policy."
msgstr ""

#: ../../library/asyncio-policy.rst:38
msgid "Set the current process-wide policy to *policy*."
msgstr ""

#: ../../library/asyncio-policy.rst:40
msgid "If *policy* is set to ``None``, the default policy is restored."
msgstr ""

#: ../../library/asyncio-policy.rst:44
msgid "Policy Objects"
msgstr ""

#: ../../library/asyncio-policy.rst:46
msgid "The abstract event loop policy base class is defined as follows:"
msgstr ""

#: ../../library/asyncio-policy.rst:50
msgid "An abstract base class for asyncio policies."
msgstr ""

#: ../../library/asyncio-policy.rst:54
msgid "Get the event loop for the current context."
msgstr "現在のコンテキストのイベントループを取得します。"

#: ../../library/asyncio-policy.rst:56
msgid ""
"Return an event loop object implementing the :class:`AbstractEventLoop` "
"interface."
msgstr ""

#: ../../library/asyncio-policy.rst:59 ../../library/asyncio-policy.rst:71
msgid "This method should never return ``None``."
msgstr ""

#: ../../library/asyncio-policy.rst:65
msgid "Set the event loop for the current context to *loop*."
msgstr "現在のコンテキストにイベントループ *loop* を設定します。"

#: ../../library/asyncio-policy.rst:69
msgid "Create and return a new event loop object."
msgstr "新しいイベントループオブジェクトを生成して返します。"

#: ../../library/asyncio-policy.rst:75
msgid "Get a child process watcher object."
msgstr ""

#: ../../library/asyncio-policy.rst:77
msgid ""
"Return a watcher object implementing the :class:`AbstractChildWatcher` "
"interface."
msgstr ""

#: ../../library/asyncio-policy.rst:80 ../../library/asyncio-policy.rst:86
msgid "This function is Unix specific."
msgstr ""

#: ../../library/asyncio-policy.rst:84
msgid "Set the current child process watcher to *watcher*."
msgstr ""

#: ../../library/asyncio-policy.rst:89
msgid "asyncio ships with the following built-in policies:"
msgstr ""

#: ../../library/asyncio-policy.rst:94
msgid ""
"The default asyncio policy.  Uses :class:`SelectorEventLoop` on both Unix "
"and Windows platforms."
msgstr ""

#: ../../library/asyncio-policy.rst:97
msgid ""
"There is no need to install the default policy manually. asyncio is "
"configured to use the default policy automatically."
msgstr ""

#: ../../library/asyncio-policy.rst:103
msgid ""
"An alternative event loop policy that uses the :class:`ProactorEventLoop` "
"event loop implementation."
msgstr ""

#: ../../library/asyncio-policy.rst:106
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`利用可能な環境 <availability>`: Windows 。"

#: ../../library/asyncio-policy.rst:110
msgid "Process Watchers"
msgstr ""

#: ../../library/asyncio-policy.rst:112
msgid ""
"A process watcher allows customization of how an event loop monitors child "
"processes on Unix. Specifically, the event loop needs to know when a child "
"process has exited."
msgstr ""

#: ../../library/asyncio-policy.rst:116
msgid ""
"In asyncio, child processes are created with :func:`create_subprocess_exec` "
"and :meth:`loop.subprocess_exec` functions."
msgstr ""

#: ../../library/asyncio-policy.rst:120
msgid ""
"asyncio defines the :class:`AbstractChildWatcher` abstract base class, which "
"child watchers should implement, and has two different implementations: :"
"class:`SafeChildWatcher` (configured to be used by default) and :class:"
"`FastChildWatcher`."
msgstr ""

#: ../../library/asyncio-policy.rst:125
msgid ""
"See also the :ref:`Subprocess and Threads <asyncio-subprocess-threads>` "
"section."
msgstr ""
":ref:`サブプロセスとスレッド <asyncio-subprocess-threads>` 節も参照してくださ"
"い。"

#: ../../library/asyncio-policy.rst:128
msgid ""
"The following two functions can be used to customize the child process "
"watcher implementation used by the asyncio event loop:"
msgstr ""

#: ../../library/asyncio-policy.rst:133
msgid "Return the current child watcher for the current policy."
msgstr ""

#: ../../library/asyncio-policy.rst:137
msgid ""
"Set the current child watcher to *watcher* for the current policy.  "
"*watcher* must implement methods defined in the :class:"
"`AbstractChildWatcher` base class."
msgstr ""

#: ../../library/asyncio-policy.rst:142
msgid ""
"Third-party event loops implementations might not support custom child "
"watchers.  For such event loops, using :func:`set_child_watcher` might be "
"prohibited or have no effect."
msgstr ""

#: ../../library/asyncio-policy.rst:150
msgid "Register a new child handler."
msgstr ""

#: ../../library/asyncio-policy.rst:152
msgid ""
"Arrange for ``callback(pid, returncode, *args)`` to be called when a process "
"with PID equal to *pid* terminates.  Specifying another callback for the "
"same process replaces the previous handler."
msgstr ""

#: ../../library/asyncio-policy.rst:157
msgid "The *callback* callable must be thread-safe."
msgstr ""

#: ../../library/asyncio-policy.rst:161
msgid "Removes the handler for process with PID equal to *pid*."
msgstr ""

#: ../../library/asyncio-policy.rst:163
msgid ""
"The function returns ``True`` if the handler was successfully removed, "
"``False`` if there was nothing to remove."
msgstr ""

#: ../../library/asyncio-policy.rst:168
msgid "Attach the watcher to an event loop."
msgstr ""

#: ../../library/asyncio-policy.rst:170
msgid ""
"If the watcher was previously attached to an event loop, then it is first "
"detached before attaching to the new loop."
msgstr ""

#: ../../library/asyncio-policy.rst:173
msgid "Note: loop may be ``None``."
msgstr ""

#: ../../library/asyncio-policy.rst:177
msgid "Close the watcher."
msgstr ""

#: ../../library/asyncio-policy.rst:179
msgid ""
"This method has to be called to ensure that underlying resources are cleaned-"
"up."
msgstr ""

#: ../../library/asyncio-policy.rst:184
msgid ""
"This implementation avoids disrupting other code spawning processes by "
"polling every process explicitly on a :py:data:`SIGCHLD` signal."
msgstr ""

#: ../../library/asyncio-policy.rst:187
msgid ""
"This is a safe solution but it has a significant overhead when handling a "
"big number of processes (*O(n)* each time a :py:data:`SIGCHLD` is received)."
msgstr ""

#: ../../library/asyncio-policy.rst:191
msgid "asyncio uses this safe implementation by default."
msgstr ""

#: ../../library/asyncio-policy.rst:195
msgid ""
"This implementation reaps every terminated processes by calling ``os."
"waitpid(-1)`` directly, possibly breaking other code spawning processes and "
"waiting for their termination."
msgstr ""

#: ../../library/asyncio-policy.rst:199
msgid ""
"There is no noticeable overhead when handling a big number of children "
"(*O(1)* each time a child terminates)."
msgstr ""

#: ../../library/asyncio-policy.rst:204
msgid "Custom Policies"
msgstr ""

#: ../../library/asyncio-policy.rst:206
msgid ""
"To implement a new event loop policy, it is recommended to subclass :class:"
"`DefaultEventLoopPolicy` and override the methods for which custom behavior "
"is wanted, e.g.::"
msgstr ""
