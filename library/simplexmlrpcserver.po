# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/simplexmlrpcserver.rst:2
msgid ":mod:`SimpleXMLRPCServer` --- Basic XML-RPC server"
msgstr ":mod:`SimpleXMLRPCServer` --- 基本的なXML-RPCサーバー"

#: ../../library/simplexmlrpcserver.rst:10
msgid ""
"The :mod:`SimpleXMLRPCServer` module has been merged into :mod:`xmlrpc."
"server` in Python 3.  The :term:`2to3` tool will automatically adapt imports "
"when converting your sources to Python 3."
msgstr ""
":mod:`SimpleXMLRPCServer` モジュールは、Python 3では :mod:`xmlrpc.server` モ"
"ジュールに統合されました。 :term:`2to3` ツールが自動的にソースコード内の"
"importを修正します。"

#: ../../library/simplexmlrpcserver.rst:17
msgid "**Source code:** :source:`Lib/SimpleXMLRPCServer.py`"
msgstr "**Source code:** :source:`Lib/SimpleXMLRPCServer.py`"

#: ../../library/simplexmlrpcserver.rst:21
msgid ""
"The :mod:`SimpleXMLRPCServer` module provides a basic server framework for "
"XML-RPC servers written in Python.  Servers can either be free standing, "
"using :class:`~SimpleXMLRPCServer.SimpleXMLRPCServer`, or embedded in a CGI "
"environment, using :class:`CGIXMLRPCRequestHandler`."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:29
msgid ""
"Create a new server instance.  This class provides methods for registration "
"of functions that can be called by the XML-RPC protocol.  The "
"*requestHandler* parameter should be a factory for request handler "
"instances; it defaults to :class:`SimpleXMLRPCRequestHandler`.  The *addr* "
"and *requestHandler* parameters are passed to the :class:`SocketServer."
"TCPServer` constructor.  If *logRequests* is true (the default), requests "
"will be logged; setting this parameter to false will turn off logging.   The "
"*allow_none* and *encoding* parameters are passed on to  :mod:`xmlrpclib` "
"and control the XML-RPC responses that will be returned from the server. The "
"*bind_and_activate* parameter controls whether :meth:`server_bind` and :meth:"
"`server_activate` are called immediately by the constructor; it defaults to "
"true. Setting it to false allows code to manipulate the "
"*allow_reuse_address* class variable before the address is bound."
msgstr ""
"新しくサーバーインスタンスを作成します。このクラスはXML-RPCプロトコルで呼ばれ"
"る関数の登録のためのメソッドを提供します。引数 *requestHandler* には、リクエ"
"ストハンドラーインスタンスのファクトリーを設定します。デフォルトは :class:"
"`SimpleXMLRPCRequestHandler` です。引数 *addr* と *requestHandler* は :class:"
"`SocketServer.TCPServer` のコンストラクターに引き渡されます。もし引数 "
"*logRequests* が真(true)であれば、(それがデフォルトですが、)リクエストはログ"
"に記録されます。偽(false)である場合にはログは記録されません。引数 "
"*allow_none* と *encoding* は :mod:`xmlrpclib` に引き継がれ、サーバーから返さ"
"れるXML-RPCレスポンスを制御します。 *bind_and_activate* 引数は、コンストラク"
"タの呼び出し直後に :meth:`server_bind` と :meth:`server_activate` を呼ぶかど"
"うかを指定します。デフォルトでは ``True`` です。この引数に ``False`` を指定す"
"ることで、バインドする前に、 *allow_reuse_address* クラス変数を操作することが"
"できます。 (訳注: 同じ名前のインスタンス変数を追加することで、クラス変数を"
"オーバーライドすることができます。)"

#: ../../library/simplexmlrpcserver.rst:42
#: ../../library/simplexmlrpcserver.rst:57
msgid "The *allow_none* and *encoding* parameters were added."
msgstr "引数 *allow_none* と *encoding* が追加されました."

#: ../../library/simplexmlrpcserver.rst:45
msgid "The *bind_and_activate* parameter was added."
msgstr "*bind_and_activate* 引数が追加されました。"

#: ../../library/simplexmlrpcserver.rst:51
msgid ""
"Create a new instance to handle XML-RPC requests in a CGI environment.  The "
"*allow_none* and *encoding* parameters are passed on to  :mod:`xmlrpclib` "
"and control the XML-RPC responses that will be returned  from the server."
msgstr ""
"CGI 環境における XML-RPC リクエストハンドラーを、新たに作成します。引数 "
"*allow_none* と *encoding* は :mod:`xmlrpclib` に引き継がれ、サーバーから返さ"
"れるXML-RPCレスポンスを制御します。"

#: ../../library/simplexmlrpcserver.rst:63
msgid ""
"Create a new request handler instance.  This request handler supports "
"``POST`` requests and modifies logging so that the *logRequests* parameter "
"to the :class:`~SimpleXMLRPCServer.SimpleXMLRPCServer` constructor parameter "
"is honored."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:71
msgid "SimpleXMLRPCServer Objects"
msgstr "SimpleXMLRPCServer オブジェクト"

#: ../../library/simplexmlrpcserver.rst:73
msgid ""
"The :class:`~SimpleXMLRPCServer.SimpleXMLRPCServer` class is based on :class:"
"`SocketServer.TCPServer` and provides a means of creating simple, stand "
"alone XML-RPC servers."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:80
msgid ""
"Register a function that can respond to XML-RPC requests.  If *name* is "
"given, it will be the method name associated with *function*, otherwise "
"``function.__name__`` will be used.  *name* can be either a normal or "
"Unicode string, and may contain characters not legal in Python identifiers, "
"including the period character."
msgstr ""
"XML- RPCリクエストに応じる関数を登録します。引数 *name* が与えられている場合"
"はその値が、関数 *function* に関連付けられます。これが与えられない場合は "
"``function.__name__`` の値が用いられます。引数 *name* は通常の文字列でもユニ"
"コード文字列でも良く、Pythonで識別子として正しくない文字(\" . \"ピリオドな"
"ど )を含んでいても。"

#: ../../library/simplexmlrpcserver.rst:89
msgid ""
"Register an object which is used to expose method names which have not been "
"registered using :meth:`register_function`.  If *instance* contains a :meth:"
"`_dispatch` method, it is called with the requested method name and the "
"parameters from the request.  Its API is ``def _dispatch(self, method, "
"params)`` (note that *params* does not represent a variable argument list).  "
"If it calls an underlying function to perform its task, that function is "
"called as ``func(*params)``, expanding the parameter list. The return value "
"from :meth:`_dispatch` is returned to the client as the result.  If "
"*instance* does not have a :meth:`_dispatch` method, it is searched for an "
"attribute matching the name of the requested method."
msgstr ""
"オブジェクトを登録し、そのオブジェクトの :meth:`register_function` で登録され"
"ていないメソッドを公開します。もし、 *instance* がメソッド :meth:`_dispatch` "
"を定義していれば、 :meth:`_dispatch` が、リクエストされたメソッド名とパラメー"
"タの組を引数として呼び出されます。そして、 :meth:`_dispatch` の返り値が結果と"
"してクライアントに返されます。そのAPIは ``def _dispatch(self, method, "
"params)`` (注意: *params* は可変引数リストではありません)です。仕事をするため"
"に下位の関数を呼ぶ時には、その関数は ``func(*params)`` のように呼ばれます。 :"
"meth:`_dispatch` の返り値はクライアントへ結果として返されます。もし、 "
"*instance* がメソッド :meth:`_dispatch` を定義していなければ、リクエストされ"
"たメソッド名がそのインスタンスに定義されているメソッド名から探されます。"

#: ../../library/simplexmlrpcserver.rst:100
msgid ""
"If the optional *allow_dotted_names* argument is true and the instance does "
"not have a :meth:`_dispatch` method, then if the requested method name "
"contains periods, each component of the method name is searched for "
"individually, with the effect that a simple hierarchical search is "
"performed.  The value found from this search is then called with the "
"parameters from the request, and the return value is passed back to the "
"client."
msgstr ""
"もしオプション引数 *allow_dotted_names* が真(true)で、インスタンスがメソッ"
"ド :meth:`_dispatch` を定義していないとき、リクエストされたメソッド名がピリオ"
"ドを含む場合は、（訳注: 通常のPythonでのピリオドの解釈と同様に）階層的にオブ"
"ジェクトを探索します。そして、そこで見つかったオブジェクトをリクエストから渡"
"された引数で呼び出し、その返り値をクライアントに返します。"

#: ../../library/simplexmlrpcserver.rst:109
msgid ""
"Enabling the *allow_dotted_names* option allows intruders to access your "
"module's global variables and may allow intruders to execute arbitrary code "
"on your machine.  Only use this option on a secure, closed network."
msgstr ""
"*allow_dotted_names* オプションを有効にすると、侵入者にあなたのモジュールのグ"
"ローバル変数にアクセスすることを許し、あなたのコンピュータで任意のコードを実"
"行することを許すことがあります。このオプションは安全な閉じたネットワークでの"
"みお使い下さい。"

#: ../../library/simplexmlrpcserver.rst:113
msgid ""
"2.4.1 *allow_dotted_names* was added to plug a security hole; prior versions "
"are insecure."
msgstr ""
"2.4.1 *allow_dotted_names* はセキュリティホールを塞ぐために追加されました。以"
"前のバージョンは安全ではありません."

#: ../../library/simplexmlrpcserver.rst:120
msgid ""
"Registers the XML-RPC introspection functions ``system.listMethods``, "
"``system.methodHelp`` and ``system.methodSignature``."
msgstr ""
"XML-RPC のイントロスペクション関数、 ``system.listMethods`` 、 ``system."
"methodHelp`` 、 ``system.methodSignature`` を登録します。"

#: ../../library/simplexmlrpcserver.rst:128
msgid "Registers the XML-RPC multicall function system.multicall."
msgstr ""
"XML-RPC における複数の要求を処理する関数 system.multicall を登録します。"

#: ../../library/simplexmlrpcserver.rst:133
msgid ""
"An attribute value that must be a tuple listing valid path portions of the "
"URL for receiving XML-RPC requests.  Requests posted to other paths will "
"result in a 404 \"no such page\" HTTP error.  If this tuple is empty, all "
"paths will be considered valid. The default value is ``('/', '/RPC2')``."
msgstr ""
"この属性値はXML-RPCリクエストを受け付けるURLの正当なパス部分をリストするタプ"
"ルでなければなりません。これ以外のパスへのリクエストは404「そのようなページは"
"ありません」 HTTPエラーになります。このタプルが空の場合は全てのパスが正当であ"
"ると見なされます。デフォルト値は ``('/', '/RPC2')`` です。"

#: ../../library/simplexmlrpcserver.rst:142
msgid ""
"If this attribute is not ``None``, responses larger than this value will be "
"encoded using the *gzip* transfer encoding, if permitted by the client.  The "
"default is ``1400`` which corresponds roughly to a single TCP packet."
msgstr ""
"この属性が ``None`` でない場合、クライアントが受け付けるのであれば、この値よ"
"りも大きいサイズのレスポンスを *gzip* transfer encoding を利用して圧縮されま"
"す、デフォルト値は、だいたいTCPの1パケットに収まるように ``1400`` です。"

#: ../../library/simplexmlrpcserver.rst:152
msgid "SimpleXMLRPCServer Example"
msgstr "SimpleXMLRPCServer の例"

#: ../../library/simplexmlrpcserver.rst:153
msgid "Server code::"
msgstr "サーバーのコード::"

#: ../../library/simplexmlrpcserver.rst:187
msgid ""
"The following client code will call the methods made available by the "
"preceding server::"
msgstr ""
"以下のクライアントコードは上のサーバーで使えるようになったメソッドを呼び出し"
"ます::"

#: ../../library/simplexmlrpcserver.rst:200
msgid ""
"The following :class:`~SimpleXMLRPCServer.SimpleXMLRPCServer` example is "
"included in the module `Lib/SimpleXMLRPCServer.py`::"
msgstr ""

#: ../../library/simplexmlrpcserver.rst:209
msgid "This demo server can be run from the command line as::"
msgstr "このデモサーバはコマンドラインから起動することができます。 ::"

#: ../../library/simplexmlrpcserver.rst:213
msgid ""
"Example client code which talks to the above server is included with `Lib/"
"xmlrpclib.py`::"
msgstr ""
"上記サーバとお喋りをするクライアントのコード例は `Lib/xmlrpclib.py` に含まれ"
"ています::"

#: ../../library/simplexmlrpcserver.rst:228
msgid "And the client can be invoked directly using the following command::"
msgstr "このクライアントは以下コマンドを使って直接起動することも出来ます::"

#: ../../library/simplexmlrpcserver.rst:234
msgid "CGIXMLRPCRequestHandler"
msgstr "CGIXMLRPCRequestHandler"

#: ../../library/simplexmlrpcserver.rst:236
msgid ""
"The :class:`CGIXMLRPCRequestHandler` class can be used to  handle XML-RPC "
"requests sent to Python CGI scripts."
msgstr ""
":class:`CGIXMLRPCRequestHandler` クラスは、Python の CGI スクリプトに送られ"
"た XML-RPC リクエストを処理するときに使用できます。"

#: ../../library/simplexmlrpcserver.rst:242
msgid ""
"Register a function that can respond to XML-RPC requests. If  *name* is "
"given, it will be the method name associated with  function, otherwise "
"*function.__name__* will be used. *name* can be either a normal or Unicode "
"string, and may contain  characters not legal in Python identifiers, "
"including the period character."
msgstr ""
"XML-RPC リクエストに応じる関数を登録します。引数 *name* が与えられている場合"
"はその値が、関数 *function* に関連付けられます。これが与えられない場合は "
"``function.__name__`` の値が用いられます。引数 *name* は通常の文字列でもユニ"
"コード文字列でも良く、Pythonで識別子として正しくない文字(\" . \"ピリオドな"
"ど )を含んでもかまいません。"

#: ../../library/simplexmlrpcserver.rst:251
msgid ""
"Register an object which is used to expose method names  which have not been "
"registered using :meth:`register_function`. If  instance contains a :meth:"
"`_dispatch` method, it is called with the  requested method name and the "
"parameters from the  request; the return value is returned to the client as "
"the result. If instance does not have a :meth:`_dispatch` method, it is "
"searched for an attribute matching the name of the requested method; if  the "
"requested method name contains periods, each  component of the method name "
"is searched for individually,  with the effect that a simple hierarchical "
"search is performed. The value found from this search is then called with "
"the  parameters from the request, and the return value is passed  back to "
"the client."
msgstr ""
"オブジェクトを登録し、そのオブジェクトの :meth:`register_function` で登録され"
"ていないメソッドを公開します。もし、 *instance* がメソッド :meth:`_dispatch` "
"を定義していれば、 :meth:`_dispatch` が、リクエストされたメソッド名とパラメー"
"タの組を引数として呼び出されます。そして、 :meth:`_dispatch` の返り値が結果と"
"してクライアントに返されます。もし、 *instance* がメソッド :meth:`_dispatch` "
"を定義していなければ、リクエストされたメソッド名がそのインスタンスに定義され"
"ているメソッド名から探されます。リクエストされたメソッド名がピリオドを含む場"
"合は、（訳注: 通常のPythonでのピリオドの解釈と同様に）階層的にオブジェクトを"
"探索します。そして、そこで見つかったオブジェクトをリクエストから渡された引数"
"で呼び出し、その返り値をクライアントに返します。"

#: ../../library/simplexmlrpcserver.rst:265
msgid ""
"Register the XML-RPC introspection functions  ``system.listMethods``, "
"``system.methodHelp`` and  ``system.methodSignature``."
msgstr ""
"XML-RPC のイントロスペクション関数、 ``system.listMethods`` 、 ``system."
"methodHelp`` 、 ``system.methodSignature`` を登録します。"

#: ../../library/simplexmlrpcserver.rst:271
msgid "Register the XML-RPC multicall function ``system.multicall``."
msgstr "XML-RPC マルチコール関数 ``system.multicall`` を登録します。"

#: ../../library/simplexmlrpcserver.rst:276
msgid ""
"Handle an XML-RPC request. If *request_text* is given, it should be the POST "
"data provided by the HTTP server,  otherwise the contents of stdin will be "
"used."
msgstr ""
"XML-RPC リクエストを処理します。 与えられた場合、 *request_text* はHTTP サー"
"バが提供する POST データでなければなりません。\n"
"そうでない場合、標準入力の内容が使われます。"

#: ../../library/simplexmlrpcserver.rst:279
msgid "Example::"
msgstr "例::"
