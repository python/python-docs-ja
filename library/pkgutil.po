# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 03:26+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pkgutil.rst:2
msgid ":mod:`pkgutil` --- Package extension utility"
msgstr ":mod:`pkgutil` --- パッケージ拡張ユーティリティ"

#: ../../library/pkgutil.rst:7
msgid "**Source code:** :source:`Lib/pkgutil.py`"
msgstr "**ソースコード:** :source:`Lib/pkgutil.py`"

#: ../../library/pkgutil.rst:11
msgid ""
"This module provides utilities for the import system, in particular package "
"support."
msgstr ""
"このモジュールはインポートシステムの、特にパッケージサポートに関するユーティ"
"リティです。"

#: ../../library/pkgutil.rst:16
msgid "A namedtuple that holds a brief summary of a module's info."
msgstr "モジュールの概要情報を格納する namedtuple"

#: ../../library/pkgutil.rst:22
msgid ""
"Extend the search path for the modules which comprise a package.  Intended "
"use is to place the following code in a package's :file:`__init__.py`::"
msgstr ""
"パッケージを構成するモジュールの検索パスを拡張します。パッケージの :file:"
"`__init__.py` で次のように書くことを意図したものです::"

#: ../../library/pkgutil.rst:28
msgid ""
"This will add to the package's ``__path__`` all subdirectories of "
"directories on ``sys.path`` named after the package.  This is useful if one "
"wants to distribute different parts of a single logical package as multiple "
"directories."
msgstr ""
"上記はパッケージの ``__path__`` に ``sys.path`` の全ディレクトリのサブディレ"
"クトリとしてパッケージ名と同じ名前を追加します。これは1つの論理的なパッケージ"
"の異なる部品を複数のディレクトリに分けて配布したいときに役立ちます。"

#: ../../library/pkgutil.rst:33
msgid ""
"It also looks for :file:`\\*.pkg` files beginning where ``*`` matches the "
"*name* argument.  This feature is similar to :file:`\\*.pth` files (see the :"
"mod:`site` module for more information), except that it doesn't special-case "
"lines starting with ``import``.  A :file:`\\*.pkg` file is trusted at face "
"value: apart from checking for duplicates, all entries found in a :file:`\\*."
"pkg` file are added to the path, regardless of whether they exist on the "
"filesystem.  (This is a feature.)"
msgstr ""
"同時に :file:`\\*.pkg` の ``*`` の部分が *name* 引数に指定された文字列に一致"
"するファイルの検索もおこないます。この機能は ``import`` で始まる特別な行がな"
"いことを除き :file:`\\*.pth` ファイルに似ています (:mod:`site` の項を参"
"照)。 :file:`\\*.pkg` は重複のチェックを除き、信頼できるものとして扱われま"
"す。 :file:`\\*.pkg` ファイルの中に見つかったエントリはファイルシステム上に実"
"在するか否かを問わず、そのまますべてパスに追加されます。(このような仕様で"
"す。)"

#: ../../library/pkgutil.rst:41
msgid ""
"If the input path is not a list (as is the case for frozen packages) it is "
"returned unchanged.  The input path is not modified; an extended copy is "
"returned.  Items are only appended to the copy at the end."
msgstr ""
"入力パスがリストでない場合(フリーズされたパッケージのとき)は何もせずにリター"
"ンします。入力パスが変更されていなければ、アイテムを末尾に追加しただけのコ"
"ピーを返します。"

#: ../../library/pkgutil.rst:45
msgid ""
"It is assumed that :data:`sys.path` is a sequence.  Items of :data:`sys."
"path` that are not strings referring to existing directories are ignored. "
"Unicode items on :data:`sys.path` that cause errors when used as filenames "
"may cause this function to raise an exception (in line with :func:`os.path."
"isdir` behavior)."
msgstr ""
":data:`sys.path` はシーケンスであることが前提になっています。 :data:`sys."
"path` の要素の内、実在するディレクトリを指す文字列となっていないものは無視さ"
"れます。ファイル名として使ったときにエラーが発生する :data:`sys.path` の "
"Unicode要素がある場合、この関数(:func:`os.path.isdir` を実行している行) で例"
"外が発生する可能性があります。"

#: ../../library/pkgutil.rst:54
msgid ":pep:`302` Finder that wraps Python's \"classic\" import algorithm."
msgstr ""
"Python の「旧式の」インポートアルゴリズムをラップする、 :pep:`302` に基づく "
"Finder です。"

#: ../../library/pkgutil.rst:56
msgid ""
"If *dirname* is a string, a :pep:`302` finder is created that searches that "
"directory.  If *dirname* is ``None``, a :pep:`302` finder is created that "
"searches the current :data:`sys.path`, plus any modules that are frozen or "
"built-in."
msgstr ""

#: ../../library/pkgutil.rst:61
msgid ""
"Note that :class:`ImpImporter` does not currently support being used by "
"placement on :data:`sys.meta_path`."
msgstr ""
":class:`ImpImporter` は現在のところ :data:`sys.meta_path` に配置しての利用を"
"サポートしていないことに注意してください。"

#: ../../library/pkgutil.rst:64 ../../library/pkgutil.rst:73
msgid ""
"This emulation is no longer needed, as the standard import mechanism is now "
"fully PEP 302 compliant and available in :mod:`importlib`."
msgstr ""
"標準インポートメカニズムが完全に PEP 302 準拠になり、これが :mod:`importlib` "
"で利用可能であるため、このエミュレーションはもはや必要ありません。"

#: ../../library/pkgutil.rst:71
msgid ":term:`Loader` that wraps Python's \"classic\" import algorithm."
msgstr ""

#: ../../library/pkgutil.rst:80
msgid "Retrieve a module :term:`loader` for the given *fullname*."
msgstr ""

#: ../../library/pkgutil.rst:82
msgid ""
"This is a backwards compatibility wrapper around :func:`importlib.util."
"find_spec` that converts most failures to :exc:`ImportError` and only "
"returns the loader rather than the full :class:`ModuleSpec`."
msgstr ""
"これは後方互換性のために提供している :func:`importlib.util.find_spec` への"
"ラッパーで、そこでのほどんどの失敗を :exc:`ImportError` に変換し、完全な :"
"class:`ModuleSpec` を返す代わりにローダのみを返しています。"

#: ../../library/pkgutil.rst:87 ../../library/pkgutil.rst:104
#: ../../library/pkgutil.rst:119 ../../library/pkgutil.rst:140
#: ../../library/pkgutil.rst:161 ../../library/pkgutil.rst:200
msgid ""
"Updated to be based directly on :mod:`importlib` rather than relying on the "
"package internal PEP 302 import emulation."
msgstr ""
"パッケージ内部の PEP 302 エミュレーションに依存するのではなく直接的に :mod:"
"`importlib` に基くように更新されました。 "

#: ../../library/pkgutil.rst:91 ../../library/pkgutil.rst:123
msgid "Updated to be based on :pep:`451`"
msgstr ":pep:`451` ベースに更新されました。"

#: ../../library/pkgutil.rst:96
msgid "Retrieve a :term:`finder` for the given *path_item*."
msgstr ""

#: ../../library/pkgutil.rst:98
msgid ""
"The returned finder is cached in :data:`sys.path_importer_cache` if it was "
"newly created by a path hook."
msgstr ""

#: ../../library/pkgutil.rst:101
msgid ""
"The cache (or part of it) can be cleared manually if a rescan of :data:`sys."
"path_hooks` is necessary."
msgstr ""
"キャッシュ (やその一部) は、 :data:`sys.path_hooks` のリスキャンが必要になっ"
"た場合は手動でクリアすることができます。"

#: ../../library/pkgutil.rst:111
msgid "Get a :term:`loader` object for *module_or_name*."
msgstr ""

#: ../../library/pkgutil.rst:113
msgid ""
"If the module or package is accessible via the normal import mechanism, a "
"wrapper around the relevant part of that machinery is returned.  Returns "
"``None`` if the module cannot be found or imported.  If the named module is "
"not already imported, its containing package (if any) is imported, in order "
"to establish the package ``__path__``."
msgstr ""
"module か package が通常の import 機構によってアクセスできる場合、その機構の"
"該当部分に対するラッパーを返します。モジュールが見つからなかったり import で"
"きない場合は ``None`` を返します。その名前のモジュールがまだ import されてい"
"ない場合、そのモジュールを含むパッケージが(あれば)そのパッケージの "
"``__path__`` を確立するために import されます。"

#: ../../library/pkgutil.rst:129
msgid "Yield :term:`finder` objects for the given module name."
msgstr ""

#: ../../library/pkgutil.rst:131
msgid ""
"If fullname contains a '.', the finders will be for the package containing "
"fullname, otherwise they will be all registered top level finders (i.e. "
"those on both sys.meta_path and sys.path_hooks)."
msgstr ""

#: ../../library/pkgutil.rst:135
msgid ""
"If the named module is in a package, that package is imported as a side "
"effect of invoking this function."
msgstr ""
"その名前のついたモジュールがパッケージ内に含まれている場合、この関数を実行し"
"た副作用としてそのパッケージが import されます。"

#: ../../library/pkgutil.rst:138
msgid "If no module name is specified, all top level finders are produced."
msgstr ""

#: ../../library/pkgutil.rst:147
msgid ""
"Yields :class:`ModuleInfo` for all submodules on *path*, or, if *path* is "
"``None``, all top-level modules on ``sys.path``."
msgstr ""

#: ../../library/pkgutil.rst:150 ../../library/pkgutil.rst:171
msgid ""
"*path* should be either ``None`` or a list of paths to look for modules in."
msgstr ""
"*path* は ``None`` か、モジュールを検索する path のリストのどちらかでなければ"
"なりません。"

#: ../../library/pkgutil.rst:152 ../../library/pkgutil.rst:173
msgid ""
"*prefix* is a string to output on the front of every module name on output."
msgstr "*prefix* は出力の全てのモジュール名の頭に出力する文字列です。"

#: ../../library/pkgutil.rst:156 ../../library/pkgutil.rst:195
msgid ""
"Only works for a :term:`finder` which defines an ``iter_modules()`` method. "
"This interface is non-standard, so the module also provides implementations "
"for :class:`importlib.machinery.FileFinder` and :class:`zipimport."
"zipimporter`."
msgstr ""
"これは ``iter_modules()`` メソッドを定義している :term:`finder` に対してのみ"
"動作します。このインターフェイスは非標準なので、モジュールは :class:"
"`importlib.machinery.FileFinder` と :class:`zipimport.zipimporter` の実装も提"
"供します。"

#: ../../library/pkgutil.rst:168
msgid ""
"Yields :class:`ModuleInfo` for all modules recursively on *path*, or, if "
"*path* is ``None``, all accessible modules."
msgstr ""

#: ../../library/pkgutil.rst:175
msgid ""
"Note that this function must import all *packages* (*not* all modules!) on "
"the given *path*, in order to access the ``__path__`` attribute to find "
"submodules."
msgstr ""
"この関数は与えられた *path* 上の全ての *パッケージ* (全てのモジュール *ではな"
"い*) を、サブモジュールを検索するのに必要な ``__path__`` 属性にアクセスするた"
"めに import します。"

#: ../../library/pkgutil.rst:179
msgid ""
"*onerror* is a function which gets called with one argument (the name of the "
"package which was being imported) if any exception occurs while trying to "
"import a package.  If no *onerror* function is supplied, :exc:"
"`ImportError`\\s are caught and ignored, while all other exceptions are "
"propagated, terminating the search."
msgstr ""
"*onerror* は、パッケージを import しようとしたときに何かの例外が発生した場合"
"に、 1つの引数 (import しようとしていたパッケージの名前) で呼び出される関数で"
"す。 *onerror* 関数が提供されない場合、 :exc:`ImportError` は補足され無視され"
"ます。それ以外の全ての例外は伝播し、検索を停止させます。"

#: ../../library/pkgutil.rst:185
msgid "Examples::"
msgstr "例::"

#: ../../library/pkgutil.rst:207
msgid "Get a resource from a package."
msgstr "パッケージからリソースを取得します。"

#: ../../library/pkgutil.rst:209
msgid ""
"This is a wrapper for the :term:`loader` :meth:`get_data <importlib.abc."
"ResourceLoader.get_data>` API.  The *package* argument should be the name of "
"a package, in standard module format (``foo.bar``).  The *resource* argument "
"should be in the form of a relative filename, using ``/`` as the path "
"separator.  The parent directory name ``..`` is not allowed, and nor is a "
"rooted name (starting with a ``/``)."
msgstr ""

#: ../../library/pkgutil.rst:216
msgid ""
"The function returns a binary string that is the contents of the specified "
"resource."
msgstr "この関数が返すのは指定されたリソースの内容であるバイナリ文字列です。"

#: ../../library/pkgutil.rst:219
msgid ""
"For packages located in the filesystem, which have already been imported, "
"this is the rough equivalent of::"
msgstr ""
"ファイルシステム中に位置するパッケージで既にインポートされているものに対して"
"は、次と大体同じです::"

#: ../../library/pkgutil.rst:225
msgid ""
"If the package cannot be located or loaded, or it uses a :term:`loader` "
"which does not support :meth:`get_data <importlib.abc.ResourceLoader."
"get_data>`, then ``None`` is returned.  In particular, the :term:`loader` "
"for :term:`namespace packages <namespace package>` does not support :meth:"
"`get_data <importlib.abc.ResourceLoader.get_data>`."
msgstr ""
