# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2017-09-22 17:56+0000\n"
"Last-Translator: 秘湯 <xwhhsprings@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pkgutil.rst:2
msgid ":mod:`pkgutil` --- Package extension utility"
msgstr ":mod:`pkgutil` --- パッケージ拡張ユーティリティ"

#: ../../library/pkgutil.rst:9
msgid "**Source code:** :source:`Lib/pkgutil.py`"
msgstr "**ソースコード:** :source:`Lib/pkgutil.py`"

#: ../../library/pkgutil.rst:13
msgid ""
"This module provides utilities for the import system, in particular package "
"support."
msgstr ""
"このモジュールはインポートシステムの、特にパッケージサポートに関するユーティ"
"リティです。"

#: ../../library/pkgutil.rst:19
msgid ""
"Extend the search path for the modules which comprise a package.  Intended "
"use is to place the following code in a package's :file:`__init__.py`::"
msgstr ""
"パッケージを構成するモジュールの検索パスを拡張します。パッケージの :file:"
"`__init__.py` で次のように書くことを意図したものです::"

#: ../../library/pkgutil.rst:25
msgid ""
"This will add to the package's ``__path__`` all subdirectories of "
"directories on ``sys.path`` named after the package.  This is useful if one "
"wants to distribute different parts of a single logical package as multiple "
"directories."
msgstr ""
"上記はパッケージの ``__path__`` に ``sys.path`` の全ディレクトリのサブディレ"
"クトリとしてパッケージ名と同じ名前を追加します。これは1つの論理的なパッケージ"
"の異なる部品を複数のディレクトリに分けて配布したいときに役立ちます。"

#: ../../library/pkgutil.rst:30
msgid ""
"It also looks for :file:`\\*.pkg` files beginning where ``*`` matches the "
"*name* argument.  This feature is similar to :file:`\\*.pth` files (see the :"
"mod:`site` module for more information), except that it doesn't special-case "
"lines starting with ``import``.  A :file:`\\*.pkg` file is trusted at face "
"value: apart from checking for duplicates, all entries found in a :file:`\\*."
"pkg` file are added to the path, regardless of whether they exist on the "
"filesystem.  (This is a feature.)"
msgstr ""
"同時に :file:`\\*.pkg` の ``*`` の部分が *name* 引数に指定された文字列に一致"
"するファイルの検索もおこないます。この機能は ``import`` で始まる特別な行がな"
"いことを除き :file:`\\*.pth` ファイルに似ています (:mod:`site` の項を参"
"照)。 :file:`\\*.pkg` は重複のチェックを除き、信頼できるものとして扱われま"
"す。 :file:`\\*.pkg` ファイルの中に見つかったエントリはファイルシステム上に実"
"在するか否かを問わず、そのまますべてパスに追加されます。(このような仕様で"
"す。)"

#: ../../library/pkgutil.rst:38
msgid ""
"If the input path is not a list (as is the case for frozen packages) it is "
"returned unchanged.  The input path is not modified; an extended copy is "
"returned.  Items are only appended to the copy at the end."
msgstr ""
"入力パスがリストでない場合(フリーズされたパッケージのとき)は何もせずにリター"
"ンします。入力パスが変更されていなければ、アイテムを末尾に追加しただけのコ"
"ピーを返します。"

#: ../../library/pkgutil.rst:42
msgid ""
"It is assumed that :data:`sys.path` is a sequence.  Items of :data:`sys."
"path` that are not (Unicode or 8-bit) strings referring to existing "
"directories are ignored.  Unicode items on :data:`sys.path` that cause "
"errors when used as filenames may cause this function to raise an exception "
"(in line with :func:`os.path.isdir` behavior)."
msgstr ""
":data:`sys.path` はシーケンスであることが前提になっています。 :data:`sys."
"path` の要素の内、実在するディレクトリを指す (Unicode または 8 ビットの) 文字"
"列となっていないものは無視されます。ファイル名として使ったときにエラーが発生"
"する :data:`sys.path` の Unicode 要素がある場合、この関数 (:func:`os.path."
"isdir` を実行している行) で例外が発生する可能性があります。"

#: ../../library/pkgutil.rst:51
msgid ":pep:`302` Importer that wraps Python's \"classic\" import algorithm."
msgstr ""
"Python の \"クラシック\" インポートアルゴリズムをラップする :pep:`302` "
"Importer."

#: ../../library/pkgutil.rst:53
msgid ""
"If *dirname* is a string, a :pep:`302` importer is created that searches "
"that directory.  If *dirname* is ``None``, a :pep:`302` importer is created "
"that searches the current :data:`sys.path`, plus any modules that are frozen "
"or built-in."
msgstr ""
"*dirname* が文字列の場合、そのディレクトリを検索する :pep:`302` importer を作"
"成します。 *dirname* が ``None`` のとき、現在の :data:`sys.path` とフリーズさ"
"れた、あるいはビルトインの全てのモジュールを検索する :pep:`302` importer を作"
"成します。"

#: ../../library/pkgutil.rst:58
msgid ""
"Note that :class:`ImpImporter` does not currently support being used by "
"placement on :data:`sys.meta_path`."
msgstr ""
":class:`ImpImporter` は現在のところ :data:`sys.meta_path` に配置しての利用を"
"サポートしていないことに注意してください。"

#: ../../library/pkgutil.rst:64
msgid ":pep:`302` Loader that wraps Python's \"classic\" import algorithm."
msgstr ""
"Python の \"クラシック\" インポートアルゴリズムをラップする :pep:`302` "
"Loader."

#: ../../library/pkgutil.rst:69
msgid "Find a :pep:`302` \"loader\" object for *fullname*."
msgstr "*fullname* に対する :pep:`302` \"loader\" オブジェクトを検索します。"

#: ../../library/pkgutil.rst:71
msgid ""
"If *fullname* contains dots, path must be the containing package's "
"``__path__``.  Returns ``None`` if the module cannot be found or imported. "
"This function uses :func:`iter_importers`, and is thus subject to the same "
"limitations regarding platform-specific special import locations such as the "
"Windows registry."
msgstr ""
"*fullname* にドットが含まれる場合、パスはそれを包含しているパッケージの "
"``__path__`` のはずです。モジュールが見つからない場合や import できない場合"
"は ``None`` を返します。この関数は :func:`iter_importers` を利用しているの"
"で、それと同じように、 Windows レジストリなどのプラットフォーム依存の特別な "
"import 場所に関する制限があります。"

#: ../../library/pkgutil.rst:80
msgid "Retrieve a :pep:`302` importer for the given *path_item*."
msgstr "指定された *path_item* に対する :pep:`302` importer を取得します。"

#: ../../library/pkgutil.rst:82
msgid ""
"The returned importer is cached in :data:`sys.path_importer_cache` if it was "
"newly created by a path hook."
msgstr ""
"path hook により新しい importer が作成された場合は、それは :data:`sys."
"path_importer_cache` にキャッシュされます。"

#: ../../library/pkgutil.rst:85
msgid ""
"If there is no importer, a wrapper around the basic import machinery is "
"returned.  This wrapper is never inserted into the importer cache (``None`` "
"is inserted instead)."
msgstr ""
"importer が存在しない場合、基本 import 機構のラッパーを返します。このラッパー"
"は importer cache にはキャッシュされません (代わりに ``None`` が insert され"
"ます)。"

#: ../../library/pkgutil.rst:89
msgid ""
"The cache (or part of it) can be cleared manually if a rescan of :data:`sys."
"path_hooks` is necessary."
msgstr ""
"キャッシュ (やその一部) は、 :data:`sys.path_hooks` のリスキャンが必要になっ"
"た場合は手動でクリアすることができます。"

#: ../../library/pkgutil.rst:95
msgid "Get a :pep:`302` \"loader\" object for *module_or_name*."
msgstr "*module_or_name* に対する :pep:`302` \"loader\" を取得します。"

#: ../../library/pkgutil.rst:97
msgid ""
"If the module or package is accessible via the normal import mechanism, a "
"wrapper around the relevant part of that machinery is returned.  Returns "
"``None`` if the module cannot be found or imported.  If the named module is "
"not already imported, its containing package (if any) is imported, in order "
"to establish the package ``__path__``."
msgstr ""
"module か package が通常の import 機構によってアクセスできる場合、その機構の"
"該当部分に対するラッパーを返します。モジュールが見つからなかったり import で"
"きない場合は ``None`` を返します。その名前のモジュールがまだ import されてい"
"ない場合、そのモジュールを含むパッケージが(あれば)そのパッケージの "
"``__path__`` を確立するために import されます。"

#: ../../library/pkgutil.rst:103
msgid ""
"This function uses :func:`iter_importers`, and is thus subject to the same "
"limitations regarding platform-specific special import locations such as the "
"Windows registry."
msgstr ""
"この関数は :func:`iter_importers` を利用しているので、それと同じように、 "
"Windows レジストリなどのプラットフォーム依存の特別な import 場所に関する制限"
"があります。"

#: ../../library/pkgutil.rst:110
msgid "Yield :pep:`302` importers for the given module name."
msgstr ""
"指定された名前に対する :pep:`302` importer を yield します (---訳注: 原文は "
"the given module name になっていますが、(わかりやすいかもしれませんが) 厳密に"
"はこれは間違い。 fullname に ``cc`` や ``aa.bb.cc`` を渡した場合の ``cc`` は"
"モジュールでもパッケージでもよく、いずれにせよそれを含む親パッケージの "
"importer が返ります。---)。"

#: ../../library/pkgutil.rst:112
msgid ""
"If fullname contains a '.', the importers will be for the package containing "
"fullname, otherwise they will be importers for :data:`sys.meta_path`, :data:"
"`sys.path`, and Python's \"classic\" import machinery, in that order.  If "
"the named module is in a package, that package is imported as a side effect "
"of invoking this function."
msgstr ""
"*fullname* が '.' を含む場合、返されるのは fullname を包含するパッケージの "
"importer になり (---訳注: ``fullname=\"aaa.bbb.ccc\"`` の場合 ``\"aaa."
"bbb\"`` の importer。---)、それ以外の場合は :data:`sys.meta_path`, :data:"
"`sys.path`, そして Python の \"クラシック\" import 機構の順のどれかの "
"importer になります。その名前のついたモジュールがパッケージ内に含まれている場"
"合、この関数を実行した副作用としてそのパッケージが import されます。"

#: ../../library/pkgutil.rst:118
msgid ""
"Non-:pep:`302` mechanisms (e.g. the Windows registry) used by the standard "
"import machinery to find files in alternative locations are partially "
"supported, but are searched *after* :data:`sys.path`.  Normally, these "
"locations are searched *before* :data:`sys.path`, preventing :data:`sys."
"path` entries from shadowing them."
msgstr ""
"標準の import 機構がファイルを別の場所から探す、 :pep:`302` 以外の機構 (例: "
"Windows レジストリ) はある程度までサポートされていますが、それは :data:`sys."
"path` の *後に* 検索されます。通常はそれらの場所は、 :data:`sys.path` のエン"
"トリに隠されないように :data:`sys.path` の *前に* 検索されます。"

#: ../../library/pkgutil.rst:124
msgid ""
"For this to cause a visible difference in behaviour, there must be a module "
"or package name that is accessible via both :data:`sys.path` and one of the "
"non-:pep:`302` file system mechanisms.  In this case, the emulation will "
"find the former version, while the builtin import mechanism will find the "
"latter."
msgstr ""
"モジュールやパッケージ名が :data:`sys.path` と非 :pep:`302` のファイルシステ"
"ム機構のどちらからもアクセスできると、このことは目に見える振る舞いの違いをも"
"たらします。この場合、エミュレート時は前者から、ビルトインの import 機構は後"
"者からモジュールやパッケージを見つけます。"

#: ../../library/pkgutil.rst:129
msgid ""
"Items of the following types can be affected by this discrepancy: ``imp."
"C_EXTENSION``, ``imp.PY_SOURCE``, ``imp.PY_COMPILED``, ``imp.PKG_DIRECTORY``."
msgstr ""
"この動作の食い違いにより、以下の種類の要素が影響を受けるかもしれません: "
"``imp.C_EXTENSION``, ``imp.PY_SOURCE``, ``imp.PY_COMPILED``, ``imp."
"PKG_DIRECTORY``."

#: ../../library/pkgutil.rst:136
msgid ""
"Yields ``(module_loader, name, ispkg)`` for all submodules on *path*, or, if "
"path is ``None``, all top-level modules on ``sys.path``."
msgstr ""
"*path* を指定すればその全てのサブモジュールに対して、 *path* が ``None`` な"
"ら ``sys.path`` の全てのトップレベルモジュールに対して、 ``(module_loader, "
"name, ispkg)`` のタプルを yield します。"

#: ../../library/pkgutil.rst:139 ../../library/pkgutil.rst:149
msgid ""
"*path* should be either ``None`` or a list of paths to look for modules in."
msgstr ""
"*path* は ``None`` か、モジュールを検索する path のリストのどちらかでなければ"
"なりません。"

#: ../../library/pkgutil.rst:141 ../../library/pkgutil.rst:151
msgid ""
"*prefix* is a string to output on the front of every module name on output."
msgstr "*prefix* は出力の全てのモジュール名の頭に出力する文字列です。"

#: ../../library/pkgutil.rst:146
msgid ""
"Yields ``(module_loader, name, ispkg)`` for all modules recursively on "
"*path*, or, if path is ``None``, all accessible modules."
msgstr ""
"*path* を指定すれば再帰的にその中のモジュール全てに対して、 *path* が "
"``None`` ならばアクセスできる全てのモジュールに対して、 ``(module_loader, "
"name, ispkg)`` のタプルを yield します。"

#: ../../library/pkgutil.rst:153
msgid ""
"Note that this function must import all *packages* (*not* all modules!) on "
"the given *path*, in order to access the ``__path__`` attribute to find "
"submodules."
msgstr ""
"この関数は与えられた *path* 上の全ての *パッケージ* (全てのモジュール *ではな"
"い*) を、サブモジュールを検索するのに必要な ``__path__`` 属性にアクセスするた"
"めに import します。"

#: ../../library/pkgutil.rst:157
msgid ""
"*onerror* is a function which gets called with one argument (the name of the "
"package which was being imported) if any exception occurs while trying to "
"import a package.  If no *onerror* function is supplied, :exc:"
"`ImportError`\\s are caught and ignored, while all other exceptions are "
"propagated, terminating the search."
msgstr ""
"*onerror* は、パッケージを import しようとしたときに何かの例外が発生した場合"
"に、 1つの引数 (import しようとしていたパッケージの名前) で呼び出される関数で"
"す。 *onerror* 関数が提供されない場合、 :exc:`ImportError` は補足され無視され"
"ます。それ以外の全ての例外は伝播し、検索を停止させます。"

#: ../../library/pkgutil.rst:163
msgid "Examples::"
msgstr "例::"

#: ../../library/pkgutil.rst:174
msgid "Get a resource from a package."
msgstr "パッケージからリソースを取得します。"

#: ../../library/pkgutil.rst:176
msgid ""
"This is a wrapper for the :pep:`302` loader :func:`get_data` API.  The "
"*package* argument should be the name of a package, in standard module "
"format (``foo.bar``).  The *resource* argument should be in the form of a "
"relative filename, using ``/`` as the path separator.  The parent directory "
"name ``..`` is not allowed, and nor is a rooted name (starting with a ``/``)."
msgstr ""
"この関数は :pep:`302` ローダーの :func:`get_data` API のラッパーです。 "
"*package* 引数は標準的なモジュール形式 (``foo.bar``) のパッケージ名でなければ"
"なりません。 *resource* 引数は ``/`` をパス区切りに使った相対ファイル名の形式"
"です。親ディレクトリを ``..`` としたり、ルートからの (``/`` で始まる) 名前を"
"使うことはできません。"

#: ../../library/pkgutil.rst:182
msgid ""
"The function returns a binary string that is the contents of the specified "
"resource."
msgstr "この関数が返すのは指定されたリソースの内容であるバイナリ文字列です。"

#: ../../library/pkgutil.rst:185
msgid ""
"For packages located in the filesystem, which have already been imported, "
"this is the rough equivalent of::"
msgstr ""
"ファイルシステム中に位置するパッケージで既にインポートされているものに対して"
"は、次と大体同じです::"

#: ../../library/pkgutil.rst:191
msgid ""
"If the package cannot be located or loaded, or it uses a :pep:`302` loader "
"which does not support :func:`get_data`, then ``None`` is returned."
msgstr ""
"パッケージを見出せなかったりロードできなかったり、あるいは :func:`get_data` "
"をサポートしない :pep:`302` ローダーを使ったりした場合は、 ``None`` が返され"
"ます。"
