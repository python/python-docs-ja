# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Arihiro TAKASE, 2023
# tomo, 2023
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-04 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:11+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pkgutil.rst:2
msgid ":mod:`!pkgutil` --- Package extension utility"
msgstr ":mod:`!pkgutil` --- パッケージ拡張ユーティリティ"

#: ../../library/pkgutil.rst:7
msgid "**Source code:** :source:`Lib/pkgutil.py`"
msgstr "**ソースコード:** :source:`Lib/pkgutil.py`"

#: ../../library/pkgutil.rst:11
msgid ""
"This module provides utilities for the import system, in particular package "
"support."
msgstr ""
"このモジュールはインポートシステムの、特にパッケージサポートに関するユーティ"
"リティです。"

#: ../../library/pkgutil.rst:16
msgid "A namedtuple that holds a brief summary of a module's info."
msgstr "モジュールの概要情報を格納する namedtuple"

#: ../../library/pkgutil.rst:22
msgid ""
"Extend the search path for the modules which comprise a package.  Intended "
"use is to place the following code in a package's :file:`__init__.py`::"
msgstr ""
"パッケージを構成するモジュールの検索パスを拡張します。パッケージの :file:"
"`__init__.py` で次のように書くことを意図したものです::"

#: ../../library/pkgutil.rst:25
msgid ""
"from pkgutil import extend_path\n"
"__path__ = extend_path(__path__, __name__)"
msgstr ""

#: ../../library/pkgutil.rst:28
msgid ""
"For each directory on :data:`sys.path` that has a subdirectory that matches "
"the package name, add the subdirectory to the package's :attr:`__path__`.  "
"This is useful if one wants to distribute different parts of a single "
"logical package as multiple directories."
msgstr ""

#: ../../library/pkgutil.rst:33
msgid ""
"It also looks for :file:`\\*.pkg` files beginning where ``*`` matches the "
"*name* argument.  This feature is similar to :file:`\\*.pth` files (see the :"
"mod:`site` module for more information), except that it doesn't special-case "
"lines starting with ``import``.  A :file:`\\*.pkg` file is trusted at face "
"value: apart from skipping blank lines and ignoring comments, all entries "
"found in a :file:`\\*.pkg` file are added to the path, regardless of whether "
"they exist on the filesystem (this is a feature)."
msgstr ""

#: ../../library/pkgutil.rst:41
msgid ""
"If the input path is not a list (as is the case for frozen packages) it is "
"returned unchanged.  The input path is not modified; an extended copy is "
"returned.  Items are only appended to the copy at the end."
msgstr ""
"入力パスがリストでない場合(フリーズされたパッケージのとき)は何もせずにリター"
"ンします。入力パスが変更されていなければ、アイテムを末尾に追加しただけのコ"
"ピーを返します。"

#: ../../library/pkgutil.rst:45
msgid ""
"It is assumed that :data:`sys.path` is a sequence.  Items of :data:`sys."
"path` that are not strings referring to existing directories are ignored. "
"Unicode items on :data:`sys.path` that cause errors when used as filenames "
"may cause this function to raise an exception (in line with :func:`os.path."
"isdir` behavior)."
msgstr ""
":data:`sys.path` はシーケンスであることが前提になっています。 :data:`sys."
"path` の要素の内、実在するディレクトリを指す文字列となっていないものは無視さ"
"れます。ファイル名として使ったときにエラーが発生する :data:`sys.path` の "
"Unicode要素がある場合、この関数(:func:`os.path.isdir` を実行している行) で例"
"外が発生する可能性があります。"

#: ../../library/pkgutil.rst:53
msgid "Retrieve a module :term:`loader` for the given *fullname*."
msgstr ""
"*fullname* に対するモジュール :term:`loader` オブジェクトを取得します。"

#: ../../library/pkgutil.rst:55
msgid ""
"This is a backwards compatibility wrapper around :func:`importlib.util."
"find_spec` that converts most failures to :exc:`ImportError` and only "
"returns the loader rather than the full :class:`importlib.machinery."
"ModuleSpec`."
msgstr ""
"これは後方互換性のために提供している :func:`importlib.util.find_spec` への"
"ラッパーで、そこでのほどんどの失敗を :exc:`ImportError` に変換し、完全な :"
"class:`importlib.machinery.ModuleSpec` を返す代わりにローダのみを返していま"
"す。"

#: ../../library/pkgutil.rst:60 ../../library/pkgutil.rst:81
#: ../../library/pkgutil.rst:96 ../../library/pkgutil.rst:120
#: ../../library/pkgutil.rst:141 ../../library/pkgutil.rst:180
msgid ""
"Updated to be based directly on :mod:`importlib` rather than relying on the "
"package internal :pep:`302` import emulation."
msgstr ""
"パッケージ内部の :pep:`302` エミュレーションに依存するのではなく直接的に :"
"mod:`importlib` に基くように更新されました。 "

#: ../../library/pkgutil.rst:64 ../../library/pkgutil.rst:100
msgid "Updated to be based on :pep:`451`"
msgstr ":pep:`451` ベースに更新されました。"

#: ../../library/pkgutil.rst:67 ../../library/pkgutil.rst:103
msgid "Use :func:`importlib.util.find_spec` instead."
msgstr "代わりに :func:`importlib.util.find_spec` を使用してください。"

#: ../../library/pkgutil.rst:73
msgid "Retrieve a :term:`finder` for the given *path_item*."
msgstr "指定された *path_item* に対する :term:`finder` を取得します。"

#: ../../library/pkgutil.rst:75
msgid ""
"The returned finder is cached in :data:`sys.path_importer_cache` if it was "
"newly created by a path hook."
msgstr ""
"path hook により新しい finder が作成された場合は、それは :data:`sys."
"path_importer_cache` にキャッシュされます。"

#: ../../library/pkgutil.rst:78
msgid ""
"The cache (or part of it) can be cleared manually if a rescan of :data:`sys."
"path_hooks` is necessary."
msgstr ""
"キャッシュ (やその一部) は、 :data:`sys.path_hooks` のリスキャンが必要になっ"
"た場合は手動でクリアすることができます。"

#: ../../library/pkgutil.rst:88
msgid "Get a :term:`loader` object for *module_or_name*."
msgstr "*module_or_name* に対する :term:`loader` オブジェクトを取得します。"

#: ../../library/pkgutil.rst:90
msgid ""
"If the module or package is accessible via the normal import mechanism, a "
"wrapper around the relevant part of that machinery is returned.  Returns "
"``None`` if the module cannot be found or imported.  If the named module is "
"not already imported, its containing package (if any) is imported, in order "
"to establish the package ``__path__``."
msgstr ""
"module か package が通常の import 機構によってアクセスできる場合、その機構の"
"該当部分に対するラッパーを返します。モジュールが見つからなかったり import で"
"きない場合は ``None`` を返します。その名前のモジュールがまだ import されてい"
"ない場合、そのモジュールを含むパッケージが(あれば)そのパッケージの "
"``__path__`` を確立するために import されます。"

#: ../../library/pkgutil.rst:109
msgid "Yield :term:`finder` objects for the given module name."
msgstr ""

#: ../../library/pkgutil.rst:111
msgid ""
"If fullname contains a ``'.'``, the finders will be for the package "
"containing fullname, otherwise they will be all registered top level finders "
"(i.e. those on both :data:`sys.meta_path` and :data:`sys.path_hooks`)."
msgstr ""

#: ../../library/pkgutil.rst:115
msgid ""
"If the named module is in a package, that package is imported as a side "
"effect of invoking this function."
msgstr ""
"その名前のついたモジュールがパッケージ内に含まれている場合、この関数を実行し"
"た副作用としてそのパッケージが import されます。"

#: ../../library/pkgutil.rst:118
msgid "If no module name is specified, all top level finders are produced."
msgstr ""
"モジュール名が指定されない場合は全てのトップレベルの finder が生成されます。"

#: ../../library/pkgutil.rst:127
msgid ""
"Yields :class:`ModuleInfo` for all submodules on *path*, or, if *path* is "
"``None``, all top-level modules on :data:`sys.path`."
msgstr ""
"*path* を指定すればそのすべてのサブモジュールに対して、 *path* が ``None`` な"
"ら :data:`sys.path` のすべてのトップレベルモジュールに対して、:class:"
"`ModuleInfo` を yield します。"

#: ../../library/pkgutil.rst:130 ../../library/pkgutil.rst:151
msgid ""
"*path* should be either ``None`` or a list of paths to look for modules in."
msgstr ""
"*path* は ``None`` か、モジュールを検索する path のリストのどちらかでなければ"
"なりません。"

#: ../../library/pkgutil.rst:132 ../../library/pkgutil.rst:153
msgid ""
"*prefix* is a string to output on the front of every module name on output."
msgstr "*prefix* は出力の全てのモジュール名の頭に出力する文字列です。"

#: ../../library/pkgutil.rst:136 ../../library/pkgutil.rst:175
msgid ""
"Only works for a :term:`finder` which defines an ``iter_modules()`` method. "
"This interface is non-standard, so the module also provides implementations "
"for :class:`importlib.machinery.FileFinder` and :class:`zipimport."
"zipimporter`."
msgstr ""
"これは ``iter_modules()`` メソッドを定義している :term:`finder` に対してのみ"
"動作します。このインターフェイスは非標準なので、モジュールは :class:"
"`importlib.machinery.FileFinder` と :class:`zipimport.zipimporter` の実装も提"
"供します。"

#: ../../library/pkgutil.rst:148
msgid ""
"Yields :class:`ModuleInfo` for all modules recursively on *path*, or, if "
"*path* is ``None``, all accessible modules."
msgstr ""
"*path* を指定すれば再帰的にその中のモジュールすべてに対して、 *path* が "
"``None`` ならばアクセスできるすべてのモジュールに対して、:class:`ModuleInfo` "
"を yield します。"

#: ../../library/pkgutil.rst:155
msgid ""
"Note that this function must import all *packages* (*not* all modules!) on "
"the given *path*, in order to access the ``__path__`` attribute to find "
"submodules."
msgstr ""
"この関数は与えられた *path* 上の全ての *パッケージ* (全てのモジュール *ではな"
"い*) を、サブモジュールを検索するのに必要な ``__path__`` 属性にアクセスするた"
"めに import します。"

#: ../../library/pkgutil.rst:159
msgid ""
"*onerror* is a function which gets called with one argument (the name of the "
"package which was being imported) if any exception occurs while trying to "
"import a package.  If no *onerror* function is supplied, :exc:"
"`ImportError`\\s are caught and ignored, while all other exceptions are "
"propagated, terminating the search."
msgstr ""
"*onerror* は、パッケージを import しようとしたときに何かの例外が発生した場合"
"に、 1つの引数 (import しようとしていたパッケージの名前) で呼び出される関数で"
"す。 *onerror* 関数が提供されない場合、 :exc:`ImportError` は補足され無視され"
"ます。それ以外の全ての例外は伝播し、検索を停止させます。"

#: ../../library/pkgutil.rst:165
msgid "Examples::"
msgstr "例::"

#: ../../library/pkgutil.rst:167
msgid ""
"# list all modules python can access\n"
"walk_packages()\n"
"\n"
"# list all submodules of ctypes\n"
"walk_packages(ctypes.__path__, ctypes.__name__ + '.')"
msgstr ""

#: ../../library/pkgutil.rst:187
msgid "Get a resource from a package."
msgstr "パッケージからリソースを取得します。"

#: ../../library/pkgutil.rst:189
msgid ""
"This is a wrapper for the :term:`loader` :meth:`get_data <importlib.abc."
"ResourceLoader.get_data>` API.  The *package* argument should be the name of "
"a package, in standard module format (``foo.bar``).  The *resource* argument "
"should be in the form of a relative filename, using ``/`` as the path "
"separator.  The parent directory name ``..`` is not allowed, and nor is a "
"rooted name (starting with a ``/``)."
msgstr ""
"この関数は :term:`loader` :meth:`get_data <importlib.abc.ResourceLoader."
"get_data>` API のラッパーです。 *package* 引数は標準的なモジュール形式 "
"(``foo.bar``) のパッケージ名でなければなりません。 *resource* 引数は ``/`` を"
"パス区切りに使った相対ファイル名の形式です。親ディレクトリを ``..`` とした"
"り、ルートからの (``/`` で始まる) 名前を使うことはできません。"

#: ../../library/pkgutil.rst:196
msgid ""
"The function returns a binary string that is the contents of the specified "
"resource."
msgstr "この関数が返すのは指定されたリソースの内容であるバイナリ文字列です。"

#: ../../library/pkgutil.rst:199
msgid ""
"For packages located in the filesystem, which have already been imported, "
"this is the rough equivalent of::"
msgstr ""
"ファイルシステム中に位置するパッケージで既にインポートされているものに対して"
"は、次と大体同じです::"

#: ../../library/pkgutil.rst:202
msgid ""
"d = os.path.dirname(sys.modules[package].__file__)\n"
"data = open(os.path.join(d, resource), 'rb').read()"
msgstr ""

#: ../../library/pkgutil.rst:205
msgid ""
"If the package cannot be located or loaded, or it uses a :term:`loader` "
"which does not support :meth:`get_data <importlib.abc.ResourceLoader."
"get_data>`, then ``None`` is returned.  In particular, the :term:`loader` "
"for :term:`namespace packages <namespace package>` does not support :meth:"
"`get_data <importlib.abc.ResourceLoader.get_data>`."
msgstr ""

#: ../../library/pkgutil.rst:214
msgid "Resolve a name to an object."
msgstr ""

#: ../../library/pkgutil.rst:216
msgid ""
"This functionality is used in numerous places in the standard library (see :"
"issue:`12915`) - and equivalent functionality is also in widely used third-"
"party packages such as setuptools, Django and Pyramid."
msgstr ""

#: ../../library/pkgutil.rst:220
msgid ""
"It is expected that *name* will be a string in one of the following formats, "
"where W is shorthand for a valid Python identifier and dot stands for a "
"literal period in these pseudo-regexes:"
msgstr ""

#: ../../library/pkgutil.rst:224
msgid "``W(.W)*``"
msgstr ""

#: ../../library/pkgutil.rst:225
msgid "``W(.W)*:(W(.W)*)?``"
msgstr ""

#: ../../library/pkgutil.rst:227
msgid ""
"The first form is intended for backward compatibility only. It assumes that "
"some part of the dotted name is a package, and the rest is an object "
"somewhere within that package, possibly nested inside other objects. Because "
"the place where the package stops and the object hierarchy starts can't be "
"inferred by inspection, repeated attempts to import must be done with this "
"form."
msgstr ""

#: ../../library/pkgutil.rst:234
msgid ""
"In the second form, the caller makes the division point clear through the "
"provision of a single colon: the dotted name to the left of the colon is a "
"package to be imported, and the dotted name to the right is the object "
"hierarchy within that package. Only one import is needed in this form. If it "
"ends with the colon, then a module object is returned."
msgstr ""

#: ../../library/pkgutil.rst:240
msgid ""
"The function will return an object (which might be a module), or raise one "
"of the following exceptions:"
msgstr ""

#: ../../library/pkgutil.rst:243
msgid ":exc:`ValueError` -- if *name* isn't in a recognised format."
msgstr ""

#: ../../library/pkgutil.rst:245
msgid ":exc:`ImportError` -- if an import failed when it shouldn't have."
msgstr ""

#: ../../library/pkgutil.rst:247
msgid ""
":exc:`AttributeError` -- If a failure occurred when traversing the object "
"hierarchy within the imported package to get to the desired object."
msgstr ""
