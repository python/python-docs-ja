# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2017-09-22 17:57+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/userdict.rst:2
msgid ":mod:`UserDict` --- Class wrapper for dictionary objects"
msgstr ":mod:`UserDict` --- 辞書オブジェクトのためのクラスラッパー"

#: ../../library/userdict.rst:8
msgid "**Source code:** :source:`Lib/UserDict.py`"
msgstr "**ソースコード:** :source:`Lib/UserDict.py`"

#: ../../library/userdict.rst:12
msgid ""
"The module defines a mixin,  :class:`DictMixin`, defining all dictionary "
"methods for classes that already have a minimum mapping interface.  This "
"greatly simplifies writing classes that need to be substitutable for "
"dictionaries (such as the shelve module)."
msgstr ""
"このモジュールは最小限のマッピングインターフェイスをすでに持っているクラスの"
"ために、すべての辞書メソッドを定義しているmixin、 :class:`DictMixin` を定義し"
"ています。これによって、 (shelveモジュールのような) 辞書の代わりをする必要が"
"あるクラスを書くことが非常に簡単になります。"

#: ../../library/userdict.rst:17
msgid ""
"This module also defines a class, :class:`~UserDict.UserDict`, that acts as "
"a wrapper around dictionary objects.  The need for this class has been "
"largely supplanted by the ability to subclass directly from :class:`dict` (a "
"feature that became available starting with Python version 2.2).  Prior to "
"the introduction of :class:`dict`, the :class:`~UserDict.UserDict` class was "
"used to create dictionary-like sub-classes that obtained new behaviors by "
"overriding existing methods or adding new ones."
msgstr ""
"このモジュールでは :class:`~UserDict.UserDict` クラスも定義しています。\n"
"これは辞書オブジェクトのラッパーとして動作します。\n"
"これの必要性については既に :class:`dict` を直接的にサブクラス化出来るように"
"なった (Python 2.2 から利用可能な機能です) ことによって大幅に取って代わられて"
"います。\n"
":class:`dict` の導入以前には、 :class:`~UserDict.UserDict` クラスはメソッドを"
"オーバライドしたり新しいメソッドを追加して、辞書風のサブクラスを作成するため"
"に使われていました。"

#: ../../library/userdict.rst:25
msgid ""
"The :mod:`UserDict` module defines the :class:`~UserDict.UserDict` class "
"and :class:`DictMixin`:"
msgstr ""
":mod:`UserDict` モジュールは :class:`~UserDict.UserDict` クラスと :class:"
"`DictMixin` を定義しています:"

#: ../../library/userdict.rst:31
msgid ""
"Class that simulates a dictionary.  The instance's contents are kept in a "
"regular dictionary, which is accessible via the :attr:`data` attribute of :"
"class:`~UserDict.UserDict` instances.  If *initialdata* is provided, :attr:"
"`data` is initialized with its contents; note that a reference to "
"*initialdata* will not be kept, allowing it be used for other purposes."
msgstr ""
"辞書をシミュレートするクラスです。\n"
"インスタンスの内容は通常の辞書に保存され、 :class:`~UserDict.UserDict` インス"
"タンスの :attr:`data` 属性を通してアクセスできます。\n"
"*initialdata* が与えられた場合は、 :attr:`data` はその内容で初期化されます;\n"
"他の目的のために使えるように、 *initialdata* への参照が保存されないことがある"
"ということに注意してください。"

#: ../../library/userdict.rst:39
msgid ""
"For backward compatibility, instances of :class:`~UserDict.UserDict` are not "
"iterable."
msgstr ""
"後方互換性のために、 :class:`~UserDict.UserDict` のインスタンスはイテレート可"
"能ではありません。"

#: ../../library/userdict.rst:44
msgid ""
"Subclass of :class:`~UserDict.UserDict` that supports direct iteration (e."
"g.  ``for key in myDict``)."
msgstr ""
":class:`~UserDict.UserDict` のイテレーションをサポートするサブクラス (使用"
"例: ``for key in myDict``)."

#: ../../library/userdict.rst:47
msgid ""
"In addition to supporting the methods and operations of mappings (see "
"section :ref:`typesmapping`), :class:`~UserDict.UserDict` and :class:"
"`IterableUserDict` instances provide the following attribute:"
msgstr ""
"マッピングのメソッドと演算 (:ref:`typesmapping` を参照) に加えて、 :class:"
"`~UserDict.UserDict` 、 :class:`IterableUserDict` インスタンスは次の属性を提"
"供します:"

#: ../../library/userdict.rst:54
msgid ""
"A real dictionary used to store the contents of the :class:`~UserDict."
"UserDict` class."
msgstr ""
":class:`~UserDict.UserDict` クラスの内容を保存するために使われる実際の辞書で"
"す。"

#: ../../library/userdict.rst:59
msgid ""
"Mixin defining all dictionary methods for classes that already have a "
"minimum dictionary interface including :meth:`__getitem__`, :meth:"
"`__setitem__`, :meth:`__delitem__`, and :meth:`keys`."
msgstr ""
":meth:`__getitem__` 、 :meth:`__setitem__` 、 :meth:`__delitem__` および :"
"meth:`keys` といった最小の辞書インタフェースを既に持っているクラスのために、"
"全ての辞書メソッドを定義する mixin です。"

#: ../../library/userdict.rst:63
msgid ""
"This mixin should be used as a superclass.  Adding each of the above methods "
"adds progressively more functionality.  For instance, defining all but :meth:"
"`__delitem__` will preclude only :meth:`pop` and :meth:`popitem` from the "
"full interface."
msgstr ""
"この mixin はスーパークラスとして使われるべきです。上のそれぞれのメソッドを追"
"加することで、より多くの機能がだんだん追加されます。例えば、 :meth:"
"`__delitem__` 以外の全てのメソッドを定義すると、使えないのは :meth:`pop` と :"
"meth:`popitem` だけになります。"

#: ../../library/userdict.rst:68
msgid ""
"In addition to the four base methods, progressively more efficiency comes "
"with defining :meth:`__contains__`, :meth:`__iter__`, and :meth:`iteritems`."
msgstr ""
"4 つの基底メソッドに加えて、 :meth:`__contains__` 、 :meth:`__iter__` およ"
"び :meth:`iteritems` を定義すれば、順次能力を増やしていけます。"

#: ../../library/userdict.rst:71
msgid ""
"Since the mixin has no knowledge of the subclass constructor, it does not "
"define :meth:`__init__` or :meth:`copy`."
msgstr ""
"mixin はサブクラスのコンストラクタについて何も知らないので、 :meth:"
"`__init__` や :meth:`copy` は定義していません。"

#: ../../library/userdict.rst:74
msgid ""
"Starting with Python version 2.6, it is recommended to use :class:"
"`collections.MutableMapping` instead of :class:`DictMixin`."
msgstr ""
"Python 2.6 からは、 :class:`DictMixin` の代わりに、 :class:`collections."
"MutableMapping` を利用することが推奨されています。"

#: ../../library/userdict.rst:77
msgid ""
"Note that DictMixin does not implement the :meth:`~dict.viewkeys`, :meth:"
"`~dict.viewvalues`, or :meth:`~dict.viewitems` methods."
msgstr ""
"DictMixin は :meth:`~dict.viewkeys`, :meth:`~dict.viewvalues`, :meth:`~dict."
"viewitems` メソッドを実装していないことに注意してください。"

#: ../../library/userdict.rst:81
msgid ":mod:`UserList` --- Class wrapper for list objects"
msgstr ":mod:`UserList` --- リストオブジェクトのためのクラスラッパー"

#: ../../library/userdict.rst:89
msgid ""
"When Python 2.2 was released, many of the use cases for this class were "
"subsumed by the ability to subclass :class:`list` directly.  However, a "
"handful of use cases remain."
msgstr ""
"Python 2.2 がリリースされた際、 :class:`list` から直接的にサブクラス化するこ"
"とがこのクラスの多くのユースケースを包含することとなりました。ですがわずかば"
"かりのユースケースが健在です。"

#: ../../library/userdict.rst:93
msgid ""
"This module provides a list-interface around an underlying data store.  By "
"default, that data store is a :class:`list`; however, it can be used to wrap "
"a list-like interface around other objects (such as persistent storage)."
msgstr ""
"このモジュールは下層のデータストアを包むリストインターフェイスを提供します。"
"デフォルトではデータストアは :class:`list` ですが、(例えば永続化記憶のよう"
"な) 他のオブジェクトに対してリストのようなインターフェイスで包むのに使うこと"
"が出来ます。"

#: ../../library/userdict.rst:97
msgid ""
"In addition, this class can be mixed-in with built-in classes using multiple "
"inheritance.  This can sometimes be useful.  For example, you can inherit "
"from :class:`~UserList.UserList` and :class:`str` at the same time.  That "
"would not be possible with both a real :class:`list` and a real :class:`str`."
msgstr ""
"加えて、このクラスは多重継承を使って、組み込みクラスに mixin できます。\n"
"これが役に立つときがあって、例えば :class:`~UserList.UserList` と :class:"
"`str` の両方を同時に継承できます。\n"
"本物の :class:`list` と本物の :class:`str` ではこれはできないでしょう。"

#: ../../library/userdict.rst:102
msgid ""
"This module defines a class that acts as a wrapper around list objects.  It "
"is a useful base class for your own list-like classes, which can inherit "
"from them and override existing methods or add new ones.  In this way one "
"can add new behaviors to lists."
msgstr ""
"このモジュールはリストオブジェクトのラッパーとして働くクラスを定義します。独"
"自のリストに似たクラスのために役に立つ基底クラスで、これを継承し既存のメソッ"
"ドをオーバーライドしたり、あるいは、新しいものを追加したりすることができま"
"す。このような方法で、リストに新しい振る舞いを追加できます。"

#: ../../library/userdict.rst:107
msgid ""
"The :mod:`UserList` module defines the :class:`~UserList.UserList` class:"
msgstr ""
":mod:`UserList` モジュールは :class:`~UserList.UserList` クラスを定義していま"
"す:"

#: ../../library/userdict.rst:112
msgid ""
"Class that simulates a list.  The instance's contents are kept in a regular "
"list, which is accessible via the :attr:`data` attribute of :class:"
"`~UserList.UserList` instances.  The instance's contents are initially set "
"to a copy of *list*, defaulting to the empty list ``[]``.  *list* can be any "
"iterable, e.g. a real Python list or a :class:`~UserList.UserList` object."
msgstr ""
"リストをシミュレートするクラスです。\n"
"インスタンスの内容は通常のリストに保存され、 :class:`~UserList.UserList` イン"
"スタンスの :attr:`data` 属性を通してアクセスできます。\n"
"インスタンスの内容は最初に *list* のコピーに設定されますが、デフォルトでは空"
"リスト ``[]`` です。\n"
"*list* は何らかのイテラブル、例えば通常の Python リストや :class:`~UserList."
"UserList` オブジェクトです。"

#: ../../library/userdict.rst:119
msgid ""
"The :class:`~UserList.UserList` class has been moved to the :mod:"
"`collections` module in Python 3. The :term:`2to3` tool will automatically "
"adapt imports when converting your sources to Python 3."
msgstr ""
":class:`~UserList.UserList` モジュールは、Python 3 では :mod:`collections` に"
"移動しました。\n"
":term:`2to3` ツールは、ソースコードの import を自動的に Python 3 向けに修正し"
"ます。"

#: ../../library/userdict.rst:124
msgid ""
"In addition to supporting the methods and operations of mutable sequences "
"(see section :ref:`typesseq`), :class:`~UserList.UserList` instances provide "
"the following attribute:"
msgstr ""
"可変シーケンスのメソッドと演算 (:ref:`typesseq` を参照) に加えて、 :class:"
"`~UserList.UserList` インスタンスは次の属性を提供します:"

#: ../../library/userdict.rst:131
msgid ""
"A real Python list object used to store the contents of the :class:"
"`~UserList.UserList` class."
msgstr ""
":class:`~UserList.UserList` クラスの内容を保存するために使われる実際の "
"Python リストオブジェクト。"

#: ../../library/userdict.rst:134
msgid ""
"**Subclassing requirements:** Subclasses of :class:`~UserList.UserList` are "
"expected to offer a constructor which can be called with either no arguments "
"or one argument.  List operations which return a new sequence attempt to "
"create an instance of the actual implementation class.  To do so, it assumes "
"that the constructor can be called with a single parameter, which is a "
"sequence object used as a data source."
msgstr ""
"**サブクラス化の要件:** :class:`~UserList.UserList` のサブクラスは引数なし"
"か、あるいは一つの引数のどちらかとともに呼び出せるコンストラクタを提供するこ"
"とが期待されています。\n"
"新しいシーケンスを返すリスト演算は現在の実装クラスのインスタンスを作成しよう"
"とします。\n"
"そのために、データ元として使われるシーケンスオブジェクトである一つのパラメー"
"タとともにコンストラクタを呼び出せると想定しています。"

#: ../../library/userdict.rst:141
msgid ""
"If a derived class does not wish to comply with this requirement, all of the "
"special methods supported by this class will need to be overridden; please "
"consult the sources for information about the methods which need to be "
"provided in that case."
msgstr ""
"派生クラスがこの要求に従いたくないならば、このクラスがサポートしているすべて"
"の特殊メソッドはオーバーライドされる必要があります。その場合に提供される必要"
"のあるメソッドについての情報は、ソースを参考にしてください。"

#: ../../library/userdict.rst:146
msgid ""
"Python versions 1.5.2 and 1.6 also required that the constructor be callable "
"with no parameters, and offer a mutable :attr:`data` attribute.  Earlier "
"versions of Python did not attempt to create instances of the derived class."
msgstr ""
"Python バージョン 1.5.2 と 1.6 では、コンストラクタが引数なしで呼び出し可能で"
"あることと変更可能な :attr:`data` 属性を提供するということも要求されていまし"
"た。Pythonの初期のバージョンでは、派生クラスのインスタンスを作成しようとはし"
"ません。"

#: ../../library/userdict.rst:153
msgid ":mod:`UserString` --- Class wrapper for string objects"
msgstr ":mod:`UserString` --- 文字列オブジェクトのためのクラスラッパー"

#: ../../library/userdict.rst:163
msgid ""
"This :class:`~UserString.UserString` class from this module is available for "
"backward compatibility only.  If you are writing code that does not need to "
"work with versions of Python earlier than Python 2.2, please consider "
"subclassing directly from the built-in :class:`str` type instead of using :"
"class:`~UserString.UserString` (there is no built-in equivalent to :class:"
"`MutableString`)."
msgstr ""
"このモジュールの :class:`~UserString.UserString` クラスは後方互換性のためだけ"
"に残されています。\n"
"書いているコードが Python 2.2 より前のバージョンの Python で動作する必要が無"
"いのならば、 :class:`~UserString.UserString` を使う代わりに組み込み :class:"
"`str` 型から直接サブクラス化することを検討してください (組み込みの :class:"
"`MutableString` と等価なものはありません)。"

#: ../../library/userdict.rst:169
msgid ""
"This module defines a class that acts as a wrapper around string objects.  "
"It is a useful base class for your own string-like classes, which can "
"inherit from them and override existing methods or add new ones.  In this "
"way one can add new behaviors to strings."
msgstr ""
"このモジュールは文字列オブジェクトのラッパーとして働くクラスを定義します。独"
"自の文字列に似たクラスのために役に立つ基底クラスで、これを継承し既存のメソッ"
"ドをオーバーライドしたり、あるいは、新しいものを追加したりすることができま"
"す。このような方法で、文字列に新しい振る舞いを追加できます。"

#: ../../library/userdict.rst:174
msgid ""
"It should be noted that these classes are highly inefficient compared to "
"real string or Unicode objects; this is especially the case for :class:"
"`MutableString`."
msgstr ""
"これらのクラスは本物の文字列や Unicode オブジェクトに比べてとてつもなく非効率"
"であるということに注意すべきです。これは特に :class:`MutableString` に対して"
"当てはまります。"

#: ../../library/userdict.rst:178
msgid "The :mod:`UserString` module defines the following classes:"
msgstr ":mod:`UserString` モジュールは次のクラスを定義しています:"

#: ../../library/userdict.rst:183
msgid ""
"Class that simulates a string or a Unicode string object.  The instance's "
"content is kept in a regular string or Unicode string object, which is "
"accessible via the :attr:`data` attribute of :class:`~UserString.UserString` "
"instances.  The instance's contents are initially set to a copy of "
"*sequence*.  *sequence* can be either a regular Python string or Unicode "
"string, an instance of :class:`~UserString.UserString` (or a subclass) or an "
"arbitrary sequence which can be converted into a string using the built-in :"
"func:`str` function."
msgstr ""
"文字列または Unicode 文字列オブジェクトをシミュレートするクラスです。\n"
"インスタンスの内容は通常の文字列または Unicode 文字列オブジェクトに保存さ"
"れ、 :class:`~UserString.UserString` インスタンスの :attr:`data` 属性を通して"
"アクセスできます。\n"
"インスタンスの内容は最初に *sequence* のコピーに設定されます。\n"
"*sequence* は通常の Python 文字列または Unicode 文字列、 :class:`~UserString."
"UserString` (またはサブクラス) のインスタンス、あるいは組み込み :func:`str` "
"関数を使って文字列に変換できる任意のシーケンスのいずれかです。"

#: ../../library/userdict.rst:192
msgid ""
"The :class:`~UserString.UserString` class has been moved to the :mod:"
"`collections` module in Python 3. The :term:`2to3` tool will automatically "
"adapt imports when converting your sources to Python 3."
msgstr ""
":class:`~UserString.UserString` クラスは、Python 3 では :mod:`collections` に"
"移動しました。\n"
":term:`2to3` ツールは、ソースコードの import を自動的に Python 3 向けに修正し"
"ます。"

#: ../../library/userdict.rst:200
msgid ""
"This class is derived from the :class:`~UserString.UserString` above and "
"redefines strings to be *mutable*.  Mutable strings can't be used as "
"dictionary keys, because dictionaries require *immutable* objects as keys.  "
"The main intention of this class is to serve as an educational example for "
"inheritance and necessity to remove (override) the :meth:`__hash__` method "
"in order to trap attempts to use a mutable object as dictionary key, which "
"would be otherwise very error prone and hard to track down."
msgstr ""
"このクラスは上の :class:`~UserString.UserString` から派生し、 *可変に* なるよ"
"うに文字列を再定義します。\n"
"可変な文字列は辞書のキーとして使うことができません。\n"
"なぜなら、辞書はキーとして *不変な* オブジェクトを要求するからです。\n"
"このクラスの主な目的は、辞書のキーとして可変なオブジェクトを使うという試みを"
"捕捉するために、継承と :meth:`__hash__` メソッドを取り除く (オーバーライドす"
"る) 必要があることを示す教育的な例を提供することです。\n"
"そうしなければ、非常にエラーになりやすく、その原因を突き止めることが困難で"
"しょう。"

#: ../../library/userdict.rst:208
msgid "The :class:`MutableString` class has been removed in Python 3."
msgstr ":class:`MutableString` クラスは Python 3 で削除されました。"

#: ../../library/userdict.rst:211
msgid ""
"In addition to supporting the methods and operations of string and Unicode "
"objects (see section :ref:`string-methods`), :class:`~UserString.UserString` "
"instances provide the following attribute:"
msgstr ""
"文字列および Unicode オブジェクトのメソッドと演算 (:ref:`string-methods` を参"
"照) に加えて、 :class:`~UserString.UserString` インスタンスは次の属性を提供し"
"ます:"

#: ../../library/userdict.rst:218
msgid ""
"A real Python string or Unicode object used to store the content of the :"
"class:`~UserString.UserString` class."
msgstr ""
":class:`~UserString.UserString` クラスの内容を保存するために使われる実際の "
"Python 文字列または Unicode オブジェクト。"
