# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 02:45+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/fractions.rst:2
msgid ":mod:`fractions` --- Rational numbers"
msgstr ":mod:`fractions` --- 有理数"

#: ../../library/fractions.rst:10
msgid "**Source code:** :source:`Lib/fractions.py`"
msgstr "**ソースコード:** :source:`Lib/fractions.py`"

#: ../../library/fractions.rst:14
msgid ""
"The :mod:`fractions` module provides support for rational number arithmetic."
msgstr ":mod:`fractions` モジュールは有理数計算のサポートを提供します。"

#: ../../library/fractions.rst:17
msgid ""
"A Fraction instance can be constructed from a pair of integers, from another "
"rational number, or from a string."
msgstr ""
"Fraction インスタンスは一対の整数、他の有理数、または文字列から生成されます。"

#: ../../library/fractions.rst:26
msgid ""
"The first version requires that *numerator* and *denominator* are instances "
"of :class:`numbers.Rational` and returns a new :class:`Fraction` instance "
"with value ``numerator/denominator``. If *denominator* is :const:`0`, it "
"raises a :exc:`ZeroDivisionError`. The second version requires that "
"*other_fraction* is an instance of :class:`numbers.Rational` and returns a :"
"class:`Fraction` instance with the same value.  The next two versions accept "
"either a :class:`float` or a :class:`decimal.Decimal` instance, and return "
"a :class:`Fraction` instance with exactly the same value.  Note that due to "
"the usual issues with binary floating-point (see :ref:`tut-fp-issues`), the "
"argument to ``Fraction(1.1)`` is not exactly equal to 11/10, and so "
"``Fraction(1.1)`` does *not* return ``Fraction(11, 10)`` as one might "
"expect. (But see the documentation for the :meth:`limit_denominator` method "
"below.) The last version of the constructor expects a string or unicode "
"instance. The usual form for this instance is::"
msgstr ""
"最初のバージョンは *numerator* と *denominator* が :class:`numbers.Rational` "
"のインスタンスであることを要求し、 ``numerator/denominator`` の値を持つ新し"
"い :class:`Fraction` インスタンスを返します。 *denominator* が :const:`0` な"
"らば、 :exc:`ZeroDivisionError` を送出します。二番目のバージョンは "
"*other_fraction* が :class:`numbers.Rational` のインスタンスであることを要求"
"し、同じ値を持つ新しい :class:`Fraction` インスタンスを返します。その次の二つ"
"のバージョンは、 :class:`float` と :class:`decimal.Decimal` インスタンスを受"
"け付け、それとちょうど同じ値を持つ :class:`Fraction` インスタンスを返します。"
"なお、二進浮動小数点数にお決まりの問題 (:ref:`tut-fp-issues` 参照) のため、 "
"``Fraction(1.1)`` の引数は 11/10 と正確に等しいとは言えないので、 "
"``Fraction(1.1)`` は予期した通りの ``Fraction(11, 10)`` を返 *しません* 。(た"
"だし、以下の :meth:`limit_denominator` メソッドのドキュメントを参照してくださ"
"い。)最後のバージョンは、文字列またはユニコードのインスタンスを渡されることを"
"想定します。このインスタンスは、通常、次のような形式です::"

#: ../../library/fractions.rst:43
msgid ""
"where the optional ``sign`` may be either '+' or '-' and ``numerator`` and "
"``denominator`` (if present) are strings of decimal digits.  In addition, "
"any string that represents a finite value and is accepted by the :class:"
"`float` constructor is also accepted by the :class:`Fraction` constructor.  "
"In either form the input string may also have leading and/or trailing "
"whitespace. Here are some examples::"
msgstr ""
"ここで、オプションの ``sign`` は '+' か '-' のどちらかであり、\\ "
"``numerator`` および (存在する場合) ``denominator`` は十進数の数字の文字列で"
"す。さらに、 :class:`float` コンストラクタで受け付けられる有限の値を表す文字"
"列は、:class:`Fraction` コンストラクタでも受け付けられます。どちらの形式で"
"も、入力される文字列は前後に空白があって構いません。以下に、いくつかの例を示"
"します::"

#: ../../library/fractions.rst:77
msgid ""
"The :class:`Fraction` class inherits from the abstract base class :class:"
"`numbers.Rational`, and implements all of the methods and operations from "
"that class.  :class:`Fraction` instances are hashable, and should be treated "
"as immutable.  In addition, :class:`Fraction` has the following properties "
"and methods:"
msgstr ""
":class:`Fraction` クラスは抽象基底クラス :class:`numbers.Rational` を継承し、"
"その全てのメソッドと演算を実装します。 :class:`Fraction` インスタンスはハッ"
"シュ可能で、不変 (immutable) であるものとして扱われます。加えて、 :class:"
"`Fraction` には以下のプロパティとメソッドがあります:"

#: ../../library/fractions.rst:83
msgid ""
"The :class:`Fraction` constructor now accepts :class:`float` and :class:"
"`decimal.Decimal` instances."
msgstr ""
":class:`Fraction` のコンストラクタが :class:`float` および :class:`decimal."
"Decimal` インスタンスを受け付けるようになりました。"

#: ../../library/fractions.rst:90
msgid "Numerator of the Fraction in lowest term."
msgstr "有理数を既約分数で表したときの分子。"

#: ../../library/fractions.rst:94
msgid "Denominator of the Fraction in lowest term."
msgstr "有理数を既約分数で表したときの分母。"

#: ../../library/fractions.rst:99
msgid ""
"This class method constructs a :class:`Fraction` representing the exact "
"value of *flt*, which must be a :class:`float`. Beware that ``Fraction."
"from_float(0.3)`` is not the same value as ``Fraction(3, 10)``."
msgstr ""
"このクラスメソッドは :class:`float` である *flt* の正確な値を表す :class:"
"`Fraction` を構築します。\n"
"``Fraction.from_float(0.3)`` と ``Fraction(3, 10)`` の値は同じでないことに注"
"意してください 。"

#: ../../library/fractions.rst:105
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`float`."
msgstr ""
"Python 3.2 以降では、 :class:`float` から直接 :class:`Fraction` インスタンス"
"を構築できるようになりました。"

#: ../../library/fractions.rst:111
msgid ""
"This class method constructs a :class:`Fraction` representing the exact "
"value of *dec*, which must be a :class:`decimal.Decimal` instance."
msgstr ""
"このクラスメソッドは :class:`decimal.Decimal` インスタンスである *dec* の正確"
"な値を表す :class:`Fraction` を構築します。"

#: ../../library/fractions.rst:116
msgid ""
"From Python 3.2 onwards, you can also construct a :class:`Fraction` instance "
"directly from a :class:`decimal.Decimal` instance."
msgstr ""
"Python 3.2 以降では、 :class:`decimal.Decimal` インスタンスから直接 :class:"
"`Fraction` インスタンスを構築できるようになりました。"

#: ../../library/fractions.rst:123
msgid ""
"Finds and returns the closest :class:`Fraction` to ``self`` that has "
"denominator at most max_denominator.  This method is useful for finding "
"rational approximations to a given floating-point number:"
msgstr ""
"分母が高々 max_denominator である、 ``self`` に最も近い :class:`Fraction` を"
"見付けて返します。このメソッドは与えられた浮動小数点数の有理数近似を見つける"
"のに役立ちます:"

#: ../../library/fractions.rst:131
msgid "or for recovering a rational number that's represented as a float:"
msgstr "あるいは float で表された有理数を元に戻すのにも使えます:"

#: ../../library/fractions.rst:144
msgid ""
"Returns the greatest :class:`int` ``<= self``.  This method can also be "
"accessed through the :func:`math.floor` function:"
msgstr ""
"最大の :class:`int` ``<= self`` を返します。このメソッドは :func:`math."
"floor` 関数からでもアクセスできます:"

#: ../../library/fractions.rst:154
msgid ""
"Returns the least :class:`int` ``>= self``.  This method can also be "
"accessed through the :func:`math.ceil` function."
msgstr ""
"最小の :class:`int` ``>= self`` を返します。このメソッドは :func:`math.ceil` "
"関数からでもアクセスできます。"

#: ../../library/fractions.rst:161
msgid ""
"The first version returns the nearest :class:`int` to ``self``, rounding "
"half to even. The second version rounds ``self`` to the nearest multiple of "
"``Fraction(1, 10**ndigits)`` (logically, if ``ndigits`` is negative), again "
"rounding half toward even.  This method can also be accessed through the :"
"func:`round` function."
msgstr ""
"第一のバージョンは、 ``self`` に最も近い :class:`int` を偶数丸めで返します。"
"第二のバージョンは、このメソッドは ``self`` に最も近い ``Fraction(1, "
"10**ndigits)`` の倍数 (論理的に、 ``ndigits`` が負なら) を、これも偶数丸めで"
"丸めます。 :func:`round` 関数からでもアクセスできます。"

#: ../../library/fractions.rst:170
msgid ""
"Return the greatest common divisor of the integers *a* and *b*.  If either "
"*a* or *b* is nonzero, then the absolute value of ``gcd(a, b)`` is the "
"largest integer that divides both *a* and *b*.  ``gcd(a,b)`` has the same "
"sign as *b* if *b* is nonzero; otherwise it takes the sign of *a*.  ``gcd(0, "
"0)`` returns ``0``."
msgstr ""
"整数 *a* と *b* の最大公約数を返します。*a* も *b* もゼロでないとすると、"
"``gcd(a, b)`` の絶対値は *a* と *b* の両方を割り切る最も大きな整数です。"
"``gcd(a, b)`` は *b* がゼロでなければ *b* と同じ符号になります。そうでなけれ"
"ば *a* の符号を取ります。``gcd(0, 0)`` は ``0`` を返します。"

#: ../../library/fractions.rst:176
msgid "Use :func:`math.gcd` instead."
msgstr "代わりに :func:`math.gcd` を使用してください。"

#: ../../library/fractions.rst:182
msgid "Module :mod:`numbers`"
msgstr ":mod:`numbers` モジュール"

#: ../../library/fractions.rst:183
msgid "The abstract base classes making up the numeric tower."
msgstr "数値の塔を作り上げる抽象基底クラス。"
