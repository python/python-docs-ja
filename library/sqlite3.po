# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# mnamihdk, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2017
# Shun Sakurai, 2017
# Ikuru K <kanumaiku@gmail.com>, 2017
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2017
# Arihiro TAKASE, 2017
# tomo, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-22 13:13+0000\n"
"PO-Revision-Date: 2017-02-16 23:27+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/sqlite3.rst:2
msgid ":mod:`sqlite3` --- DB-API 2.0 interface for SQLite databases"
msgstr ":mod:`sqlite3` --- SQLite データベースに対する DB-API 2.0 インタフェース"

#: ../../library/sqlite3.rst:9
msgid "**Source code:** :source:`Lib/sqlite3/`"
msgstr "**ソースコード:** :source:`Lib/sqlite3/`"

#: ../../library/sqlite3.rst:13
msgid ""
"SQLite is a C library that provides a lightweight disk-based database that "
"doesn't require a separate server process and allows accessing the database "
"using a nonstandard variant of the SQL query language. Some applications can"
" use SQLite for internal data storage.  It's also possible to prototype an "
"application using SQLite and then port the code to a larger database such as"
" PostgreSQL or Oracle."
msgstr ""
"SQLite は、軽量なディスク上のデータベースを提供する C ライブラリです。別のサーバプロセスを用意する必要なく、 SQL "
"クエリー言語の非標準的な一種を使用してデータベースにアクセスできます。一部のアプリケーションは内部データ保存に SQLite "
"を使えます。また、SQLite を使ってアプリケーションのプロトタイプを作り、その後そのコードを PostgreSQL や Oracle "
"のような大規模データベースに移植するということも可能です。"

#: ../../library/sqlite3.rst:20
msgid ""
"The sqlite3 module was written by Gerhard Häring.  It provides a SQL "
"interface compliant with the DB-API 2.0 specification described by "
":pep:`249`."
msgstr ""
"sqlite3 モジュールの著者は Gerhard Häring です。 :pep:`249` で記述されている DB-API 2.0 に準拠した "
"SQL インターフェイスを提供します。"

#: ../../library/sqlite3.rst:23
msgid ""
"To use the module, you must first create a :class:`Connection` object that "
"represents the database.  Here the data will be stored in the "
":file:`example.db` file::"
msgstr ""
"このモジュールを使うには、最初にデータベースを表す :class:`Connection` オブジェクトを作ります。ここではデータはファイル "
":file:`example.db` に格納されているものとします::"

#: ../../library/sqlite3.rst:30
msgid ""
"You can also supply the special name ``:memory:`` to create a database in "
"RAM."
msgstr "特別な名前である ``:memory:`` を使うと RAM 上にデータベースを作ることもできます。"

#: ../../library/sqlite3.rst:32
msgid ""
"Once you have a :class:`Connection`, you can create a :class:`Cursor`  "
"object and call its :meth:`~Cursor.execute` method to perform SQL commands::"
msgstr ""
":class:`Connection` があれば、 :class:`Cursor` オブジェクトを作りその "
":meth:`~Cursor.execute` メソッドを呼んで SQL コマンドを実行することができます::"

#: ../../library/sqlite3.rst:51
msgid ""
"The data you've saved is persistent and is available in subsequent "
"sessions::"
msgstr "保存されたデータは永続的であり、次回のセッションでもそのまま使用できます::"

#: ../../library/sqlite3.rst:57
msgid ""
"Usually your SQL operations will need to use values from Python variables.  "
"You shouldn't assemble your query using Python's string operations because "
"doing so is insecure; it makes your program vulnerable to an SQL injection "
"attack (see https://xkcd.com/327/ for humorous example of what can go "
"wrong)."
msgstr ""
"たいてい、SQL 操作では Python 変数の値を使う必要があります。この時、クエリーを Python "
"の文字列操作を使って構築することは安全とは言えないので、すべきではありません。そのようなことをするとプログラムが SQL "
"インジェクション攻撃に対し脆弱になります (https://xkcd.com/327/ ではどうなってしまうかをユーモラスに描いています)。"

#: ../../library/sqlite3.rst:62
msgid ""
"Instead, use the DB-API's parameter substitution.  Put ``?`` as a "
"placeholder wherever you want to use a value, and then provide a tuple of "
"values as the second argument to the cursor's :meth:`~Cursor.execute` "
"method.  (Other database modules may use a different placeholder, such as "
"``%s`` or ``:1``.) For example::"
msgstr ""
"代わりに、DB-API のパラメータ割り当てを使います。 ``?`` を変数の値を使いたいところに埋めておきます。その上で、値のタプルをカーソルの "
":meth:`~Cursor.execute` メソッドの第2引数として引き渡します。(他のデータベースモジュールでは変数の場所を示すのに ``%s``"
" や ``:1`` などの異なった表記を用いることがあります。) 例を示します::"

#: ../../library/sqlite3.rst:84
msgid ""
"To retrieve data after executing a SELECT statement, you can either treat "
"the cursor as an :term:`iterator`, call the cursor's "
":meth:`~Cursor.fetchone` method to retrieve a single matching row, or call "
":meth:`~Cursor.fetchall` to get a list of the matching rows."
msgstr ""
"SELECT 文を実行した後データを取得する方法は3つありどれを使っても構いません。一つはカーソルを :term:`イテレータ <iterator>` "
"として扱う、一つはカーソルの :meth:`~Cursor.fetchone` メソッドを呼んで一致した内の一行を取得する、もう一つは "
":meth:`~Cursor.fetchall` メソッドを呼んで一致した全ての行のリストとして受け取る、という3つです。"

#: ../../library/sqlite3.rst:89
msgid "This example uses the iterator form::"
msgstr "以下の例ではイテレータの形を使います::"

#: ../../library/sqlite3.rst:104
msgid "https://github.com/ghaering/pysqlite"
msgstr "https://github.com/ghaering/pysqlite"

#: ../../library/sqlite3.rst:103
msgid ""
"The pysqlite web page -- sqlite3 is developed externally under the name "
"\"pysqlite\"."
msgstr "pysqlite のウェブページ -- sqlite3 は「pysqlite」という名の下、外部で開発されています。"

#: ../../library/sqlite3.rst:108
msgid "https://www.sqlite.org"
msgstr "https://www.sqlite.org"

#: ../../library/sqlite3.rst:107
msgid ""
"The SQLite web page; the documentation describes the syntax and the "
"available data types for the supported SQL dialect."
msgstr "SQLite のウェブページ。ここの文書ではサポートされる SQL 方言の文法と使えるデータ型を説明しています。"

#: ../../library/sqlite3.rst:111
msgid "https://www.w3schools.com/sql/"
msgstr ""

#: ../../library/sqlite3.rst:111
msgid "Tutorial, reference and examples for learning SQL syntax."
msgstr "SQL 学習に効くチュートリアル、リファレンス、実例集。"

#: ../../library/sqlite3.rst:113
msgid ":pep:`249` - Database API Specification 2.0"
msgstr ":pep:`249` - Database API Specification 2.0"

#: ../../library/sqlite3.rst:114
msgid "PEP written by Marc-André Lemburg."
msgstr "Marc-Andre Lemburg により書かれた PEP。"

#: ../../library/sqlite3.rst:120
msgid "Module functions and constants"
msgstr "モジュールの関数と定数"

#: ../../library/sqlite3.rst:125
msgid ""
"The version number of this module, as a string. This is not the version of "
"the SQLite library."
msgstr "文字列で表現されたモジュールのバージョン番号です。これは SQLite ライブラリのバージョンではありません。"

#: ../../library/sqlite3.rst:131
msgid ""
"The version number of this module, as a tuple of integers. This is not the "
"version of the SQLite library."
msgstr "整数のタプルで表現されたモジュールのバージョン番号です。これは SQLite ライブラリのバージョンではありません。"

#: ../../library/sqlite3.rst:137
msgid "The version number of the run-time SQLite library, as a string."
msgstr "文字列で表現された SQLite ランタイムライブラリのバージョン番号です。"

#: ../../library/sqlite3.rst:142
msgid ""
"The version number of the run-time SQLite library, as a tuple of integers."
msgstr "整数のタプルで表現された SQLite ランタイムライブラリのバージョン番号です。"

#: ../../library/sqlite3.rst:147 ../../library/sqlite3.rst:160
msgid ""
"This constant is meant to be used with the *detect_types* parameter of the "
":func:`connect` function."
msgstr "この定数は :func:`connect` 関数の *detect_types* パラメータとして使われます。"

#: ../../library/sqlite3.rst:150
msgid ""
"Setting it makes the :mod:`sqlite3` module parse the declared type for each "
"column it returns.  It will parse out the first word of the declared type, "
"i. e.  for \"integer primary key\", it will parse out \"integer\", or for "
"\"number(10)\" it will parse out \"number\". Then for that column, it will "
"look into the converters dictionary and use the converter function "
"registered for that type there."
msgstr ""
"この定数を設定すると :mod:`sqlite3` "
"モジュールは戻り値のカラムの宣言された型を読み取るようになります。意味を持つのは宣言の最初の単語です。すなわち、\"integer primary "
"key\" においては \"integer\" が読み取られます。また、 \"number(10)\" では、 \"number\" "
"が読み取られます。そして、そのカラムに対して、変換関数の辞書を探してその型に対して登録された関数を使うようにします。"

#: ../../library/sqlite3.rst:163
msgid ""
"Setting this makes the SQLite interface parse the column name for each "
"column it returns.  It will look for a string formed [mytype] in there, and "
"then decide that 'mytype' is the type of the column. It will try to find an "
"entry of 'mytype' in the converters dictionary and then use the converter "
"function found there to return the value. The column name found in "
":attr:`Cursor.description` does not include the type, i. e. if you use "
"something like ``'as \"Expiration date [datetime]\"'`` in your SQL, then we "
"will parse out everything until the first ``'['`` for the column name and "
"strip the preceeding space: the column name would simply be \"Expiration "
"date\"."
msgstr ""

#: ../../library/sqlite3.rst:176
msgid ""
"Opens a connection to the SQLite database file *database*. By default "
"returns a :class:`Connection` object, unless a custom *factory* is given."
msgstr ""

#: ../../library/sqlite3.rst:179
msgid ""
"*database* is a :term:`path-like object` giving the pathname (absolute or "
"relative to the current  working directory) of the database file to be "
"opened. You can use ``\":memory:\"`` to open a database connection to a "
"database that resides in RAM instead of on disk."
msgstr ""

#: ../../library/sqlite3.rst:184
msgid ""
"When a database is accessed by multiple connections, and one of the "
"processes modifies the database, the SQLite database is locked until that "
"transaction is committed. The *timeout* parameter specifies how long the "
"connection should wait for the lock to go away until raising an exception. "
"The default for the timeout parameter is 5.0 (five seconds)."
msgstr ""
"データベースが複数の接続からアクセスされている状況で、その内の一つがデータベースに変更を加えたとき、SQLite "
"データベースはそのトランザクションがコミットされるまでロックされます。*timeout* "
"パラメータで、例外を送出するまで接続がロックが解除されるのをどれだけ待つかを決めます。デフォルトは 5.0 (5秒) です。"

#: ../../library/sqlite3.rst:190
msgid ""
"For the *isolation_level* parameter, please see the "
":attr:`~Connection.isolation_level` property of :class:`Connection` objects."
msgstr ""
"*isolation_level* パラメータについては、 :class:`Connection` オブジェクトの、 "
":attr:`~Connection.isolation_level` プロパティを参照してください。"

#: ../../library/sqlite3.rst:193
msgid ""
"SQLite natively supports only the types TEXT, INTEGER, REAL, BLOB and NULL. "
"If you want to use other types you must add support for them yourself. The "
"*detect_types* parameter and the using custom **converters** registered with"
" the module-level :func:`register_converter` function allow you to easily do"
" that."
msgstr ""
"SQLite はネイティブで TEXT、INTEGER、REAL、BLOB および NULL "
"のみをサポートしています。その他のタイプを使用したい場合はあなた自身で追加しなければなりません。*detect_types* "
"パラメータおよび、:func:`register_converter` 関数でモジュールレベルで登録できるカスタム **変換関数** "
"を使用することで簡単に追加できます。"

#: ../../library/sqlite3.rst:198
msgid ""
"*detect_types* defaults to 0 (i. e. off, no type detection), you can set it "
"to any combination of :const:`PARSE_DECLTYPES` and :const:`PARSE_COLNAMES` "
"to turn type detection on."
msgstr ""
"パラメータ *detect_types* のデフォルトは 0 (つまりオフ、型検知無し)です。型検知を有効にするためには、 "
":const:`PARSE_DECLTYPES` と :const:`PARSE_COLNAMES` の適当な組み合わせをこのパラメータにセットします。"

#: ../../library/sqlite3.rst:202
msgid ""
"By default, *check_same_thread* is :const:`True` and only the creating "
"thread may use the connection. If set :const:`False`, the returned "
"connection may be shared across multiple threads. When using multiple "
"threads with the same connection writing operations should be serialized by "
"the user to avoid data corruption."
msgstr ""

#: ../../library/sqlite3.rst:207
msgid ""
"By default, the :mod:`sqlite3` module uses its :class:`Connection` class for"
" the connect call.  You can, however, subclass the :class:`Connection` class"
" and make :func:`connect` use your class instead by providing your class for"
" the *factory* parameter."
msgstr ""
"デフォルトでは、 :mod:`sqlite3` モジュールは connect の呼び出しの際にモジュールの :class:`Connection` "
"クラスを使います。しかし、 :class:`Connection` クラスを継承したクラスを *factory* パラメータに渡して "
":func:`connect` にそのクラスを使わせることもできます。"

#: ../../library/sqlite3.rst:212
msgid "Consult the section :ref:`sqlite3-types` of this manual for details."
msgstr "詳しくはこのマニュアルの :ref:`sqlite3-types` 節を参考にしてください。"

#: ../../library/sqlite3.rst:214
msgid ""
"The :mod:`sqlite3` module internally uses a statement cache to avoid SQL "
"parsing overhead. If you want to explicitly set the number of statements "
"that are cached for the connection, you can set the *cached_statements* "
"parameter. The currently implemented default is to cache 100 statements."
msgstr ""
":mod:`sqlite3` モジュールは SQL "
"解析のオーバーヘッドを避けるために内部で文キャッシュを使っています。接続に対してキャッシュされる文の数を自分で指定したいならば、 "
"*cached_statements* パラメータに設定してください。現在の実装ではデフォルトでキャッシュされる SQL 文の数を 100 "
"にしています。"

#: ../../library/sqlite3.rst:219
msgid ""
"If *uri* is true, *database* is interpreted as a URI. This allows you to "
"specify options. For example, to open a database in read-only mode you can "
"use::"
msgstr ""
"*uri* が真の場合、 *database* は URI "
"として解釈されます。これにより、オプションを指定することができます。例えば、データベースを読み出し専用モードで使用できるように開くには、次のようにします::"

#: ../../library/sqlite3.rst:225
msgid ""
"More information about this feature, including a list of recognized options,"
" can be found in the `SQLite URI documentation "
"<https://www.sqlite.org/uri.html>`_."
msgstr ""

#: ../../library/sqlite3.rst:229
msgid ""
"Raises an :ref:`auditing event <auditing>` ``sqlite3.connect`` with argument"
" ``database``."
msgstr ""

#: ../../library/sqlite3.rst:230
msgid "Added the *uri* parameter."
msgstr "``uri`` パラメータが追加されました。"

#: ../../library/sqlite3.rst:233
msgid ""
"*database* can now also be a :term:`path-like object`, not only a string."
msgstr ""

#: ../../library/sqlite3.rst:239
msgid ""
"Registers a callable to convert a bytestring from the database into a custom"
" Python type. The callable will be invoked for all database values that are "
"of the type *typename*. Confer the parameter *detect_types* of the "
":func:`connect` function for how the type detection works. Note that "
"*typename* and the name of the type in your query are matched in case-"
"insensitive manner."
msgstr ""

#: ../../library/sqlite3.rst:248
msgid ""
"Registers a callable to convert the custom Python type *type* into one of "
"SQLite's supported types. The callable *callable* accepts as single "
"parameter the Python value, and must return a value of the following types: "
"int, float, str or bytes."
msgstr ""
"自分が使いたい Python の型 *type* を SQLite がサポートしている型に変換する呼び出し可能オブジェクト (callable) "
"を登録します。その呼び出し可能オブジェクト *callable* はただ一つの引数に Python の値を受け取り、int, float, str "
"または bytes のいずれかの型の値を返さなければなりません。"

#: ../../library/sqlite3.rst:256
msgid ""
"Returns :const:`True` if the string *sql* contains one or more complete SQL "
"statements terminated by semicolons. It does not verify that the SQL is "
"syntactically correct, only that there are no unclosed string literals and "
"the statement is terminated by a semicolon."
msgstr ""
"文字列 *sql* がセミコロンで終端された一つ以上の完全な SQL 文を含んでいる場合、 :const:`True` を返します。判定は SQL "
"文として文法的に正しいかではなく、閉じられていない文字列リテラルが無いことおよびセミコロンで終端されていることだけで行われます。"

#: ../../library/sqlite3.rst:261
msgid ""
"This can be used to build a shell for SQLite, as in the following example:"
msgstr "この関数は以下の例にあるような SQLite のシェルを作る際に使われます:"

#: ../../library/sqlite3.rst:269
msgid ""
"By default you will not get any tracebacks in user-defined functions, "
"aggregates, converters, authorizer callbacks etc. If you want to debug them,"
" you can call this function with *flag* set to ``True``. Afterwards, you "
"will get tracebacks from callbacks on ``sys.stderr``. Use :const:`False` to "
"disable the feature again."
msgstr ""
"デフォルトでは、ユーザ定義の関数、集計関数、変換関数、認可コールバックなどはトレースバックを出力しません。デバッグの際にはこの関数を *flag* に "
"``True`` を指定して呼び出します。そうした後は先に述べたような関数のトレースバックが ``sys.stderr`` に出力されます。元に戻すには"
" :const:`False` を使います。"

#: ../../library/sqlite3.rst:279
msgid "Connection Objects"
msgstr "Connection オブジェクト"

#: ../../library/sqlite3.rst:283
msgid "A SQLite database connection has the following attributes and methods:"
msgstr "SQLite データベースコネクション。以下の属性やメソッドを持ちます:"

#: ../../library/sqlite3.rst:287
msgid ""
"Get or set the current default isolation level. :const:`None` for autocommit"
" mode or one of \"DEFERRED\", \"IMMEDIATE\" or \"EXCLUSIVE\". See section "
":ref:`sqlite3-controlling-transactions` for a more detailed explanation."
msgstr ""

#: ../../library/sqlite3.rst:293
msgid ""
":const:`True` if a transaction is active (there are uncommitted changes), "
":const:`False` otherwise.  Read-only attribute."
msgstr ""
"トランザクションがアクティブなら (未コミットの変更があるなら) :const:`True` 、そうでなければ :const:`False` "
"。リードオンリー属性です。"

#: ../../library/sqlite3.rst:300
msgid ""
"The cursor method accepts a single optional parameter *factory*. If "
"supplied, this must be a callable returning an instance of :class:`Cursor` "
"or its subclasses."
msgstr ""
"cursor メソッドはオション引数 *factory* を 1 つだけ受け付けます。\n"
"渡された場合は、 :class:`Cursor` またはそのサブクラスのインスタンスを返す呼び出し可能オブジェクトでなければなりません。"

#: ../../library/sqlite3.rst:306
msgid ""
"This method commits the current transaction. If you don't call this method, "
"anything you did since the last call to ``commit()`` is not visible from "
"other database connections. If you wonder why you don't see the data you've "
"written to the database, please check you didn't forget to call this method."
msgstr ""
"このメソッドは現在のトランザクションをコミットします。このメソッドを呼ばないと、前回 ``commit()`` "
"を呼び出してから行ったすべての変更は、他のデータベースコネクションから見ることができません。もし、データベースに書き込んだはずのデータが見えなくて悩んでいる場合は、このメソッドの呼び出しを忘れていないかチェックしてください。"

#: ../../library/sqlite3.rst:313
msgid ""
"This method rolls back any changes to the database since the last call to "
":meth:`commit`."
msgstr "このメソッドは最後に行った :meth:`commit` 後の全ての変更をロールバックします。"

#: ../../library/sqlite3.rst:318
msgid ""
"This closes the database connection. Note that this does not automatically "
"call :meth:`commit`. If you just close your database connection without "
"calling :meth:`commit` first, your changes will be lost!"
msgstr ""
"このメソッドはデータベースコネクションを閉じます。このメソッドが自動的に :meth:`commit` を呼び出さないことに注意してください。 "
":meth:`commit` をせずにコネクションを閉じると、変更が消えてしまいます！"

#: ../../library/sqlite3.rst:324
msgid ""
"This is a nonstandard shortcut that creates a cursor object by calling the "
":meth:`~Connection.cursor` method, calls the cursor's "
":meth:`~Cursor.execute` method with the *parameters* given, and returns the "
"cursor."
msgstr ""

#: ../../library/sqlite3.rst:331
msgid ""
"This is a nonstandard shortcut that creates a cursor object by calling the "
":meth:`~Connection.cursor` method, calls the cursor's "
":meth:`~Cursor.executemany` method with the *parameters* given, and returns "
"the cursor."
msgstr ""

#: ../../library/sqlite3.rst:338
msgid ""
"This is a nonstandard shortcut that creates a cursor object by calling the "
":meth:`~Connection.cursor` method, calls the cursor's "
":meth:`~Cursor.executescript` method with the given *sql_script*, and "
"returns the cursor."
msgstr ""

#: ../../library/sqlite3.rst:345
msgid ""
"Creates a user-defined function that you can later use from within SQL "
"statements under the function name *name*. *num_params* is the number of "
"parameters the function accepts (if *num_params* is -1, the function may "
"take any number of arguments), and *func* is a Python callable that is "
"called as the SQL function. If *deterministic* is true, the created function"
" is marked as `deterministic <https://sqlite.org/deterministic.html>`_, "
"which allows SQLite to perform additional optimizations. This flag is "
"supported by SQLite 3.8.3 or higher, :exc:`NotSupportedError` will be raised"
" if used with older versions."
msgstr ""

#: ../../library/sqlite3.rst:355
msgid ""
"The function can return any of the types supported by SQLite: bytes, str, "
"int, float and ``None``."
msgstr ""

#: ../../library/sqlite3.rst:358
msgid "The *deterministic* parameter was added."
msgstr ""

#: ../../library/sqlite3.rst:361 ../../library/sqlite3.rst:378
#: ../../library/sqlite3.rst:492 ../../library/sqlite3.rst:649
msgid "Example:"
msgstr "例:"

#: ../../library/sqlite3.rst:368
msgid "Creates a user-defined aggregate function."
msgstr "ユーザ定義の集計関数を作成します。"

#: ../../library/sqlite3.rst:370
msgid ""
"The aggregate class must implement a ``step`` method, which accepts the "
"number of parameters *num_params* (if *num_params* is -1, the function may "
"take any number of arguments), and a ``finalize`` method which will return "
"the final result of the aggregate."
msgstr ""

#: ../../library/sqlite3.rst:375
msgid ""
"The ``finalize`` method can return any of the types supported by SQLite: "
"bytes, str, int, float and ``None``."
msgstr ""

#: ../../library/sqlite3.rst:385
msgid ""
"Creates a collation with the specified *name* and *callable*. The callable "
"will be passed two string arguments. It should return -1 if the first is "
"ordered lower than the second, 0 if they are ordered equal and 1 if the "
"first is ordered higher than the second.  Note that this controls sorting "
"(ORDER BY in SQL) so your comparisons don't affect other SQL operations."
msgstr ""
"*name* と *callable* "
"で指定される照合順序を作成します。呼び出し可能オブジェクトには二つの文字列が渡されます。一つめのものが二つめのものより低く順序付けられるならば -1 "
"を返し、等しければ 0 を返し、一つめのものが二つめのものより高く順序付けられるならば 1 を返すようにしなければなりません。この関数はソート(SQL "
"での ORDER BY)をコントロールするもので、比較を行なうことは他の SQL 操作には影響を与えないことに注意しましょう。"

#: ../../library/sqlite3.rst:391
msgid ""
"Note that the callable will get its parameters as Python bytestrings, which "
"will normally be encoded in UTF-8."
msgstr ""
"また、呼び出し可能オブジェクトに渡される引数は Python のバイト文字列として渡されますが、それは通常 UTF-8 で符号化されたものになります。"

#: ../../library/sqlite3.rst:394
msgid ""
"The following example shows a custom collation that sorts \"the wrong way\":"
msgstr "以下の例は「間違った方法で」ソートする自作の照合順序です:"

#: ../../library/sqlite3.rst:398
msgid ""
"To remove a collation, call ``create_collation`` with ``None`` as callable::"
msgstr "照合順序を取り除くには callable に ``None`` を指定して ``create_collation`` を呼び出します::"

#: ../../library/sqlite3.rst:405
msgid ""
"You can call this method from a different thread to abort any queries that "
"might be executing on the connection. The query will then abort and the "
"caller will get an exception."
msgstr ""
"このメソッドを別スレッドから呼び出して接続上で現在実行中であろうクエリを中断させられます。クエリが中断されると呼び出し元は例外を受け取ります。"

#: ../../library/sqlite3.rst:412
msgid ""
"This routine registers a callback. The callback is invoked for each attempt "
"to access a column of a table in the database. The callback should return "
":const:`SQLITE_OK` if access is allowed, :const:`SQLITE_DENY` if the entire "
"SQL statement should be aborted with an error and :const:`SQLITE_IGNORE` if "
"the column should be treated as a NULL value. These constants are available "
"in the :mod:`sqlite3` module."
msgstr ""
"このルーチンはコールバックを登録します。コールバックはデータベースのテーブルのカラムにアクセスしようとするたびに呼び出されます。コールバックはアクセスが許可されるならば"
" :const:`SQLITE_OK` を、SQL 文全体がエラーとともに中断されるべきならば :const:`SQLITE_DENY` を、カラムが "
"NULL 値として扱われるべきなら :const:`SQLITE_IGNORE` を返さなければなりません。これらの定数は :mod:`sqlite3`"
" モジュールに用意されています。"

#: ../../library/sqlite3.rst:419
msgid ""
"The first argument to the callback signifies what kind of operation is to be"
" authorized. The second and third argument will be arguments or "
":const:`None` depending on the first argument. The 4th argument is the name "
"of the database (\"main\", \"temp\", etc.) if applicable. The 5th argument "
"is the name of the inner-most trigger or view that is responsible for the "
"access attempt or :const:`None` if this access attempt is directly from "
"input SQL code."
msgstr ""
"コールバックの第一引数はどの種類の操作が許可されるかを決めます。第二第三引数には第一引数に依存して本当に使われる引数か :const:`None` "
"かが渡されます。第四引数はもし適用されるならばデータベースの名前(\"main\", \"temp\", "
"etc.)です。第五引数はアクセスを試みる要因となった最も内側のトリガまたはビューの名前、またはアクセスの試みが入力された SQL "
"コードに直接起因するものならば :const:`None` です。"

#: ../../library/sqlite3.rst:426
msgid ""
"Please consult the SQLite documentation about the possible values for the "
"first argument and the meaning of the second and third argument depending on"
" the first one. All necessary constants are available in the :mod:`sqlite3` "
"module."
msgstr ""
"第一引数に与えることができる値や、その第一引数によって決まる第二第三引数の意味については、SQLite の文書を参考にしてください。必要な定数は全て "
":mod:`sqlite3` モジュールに用意されています。"

#: ../../library/sqlite3.rst:433
msgid ""
"This routine registers a callback. The callback is invoked for every *n* "
"instructions of the SQLite virtual machine. This is useful if you want to "
"get called from SQLite during long-running operations, for example to update"
" a GUI."
msgstr ""
"このメソッドはコールバックを登録します。コールバックは SQLite 仮想マシン上の *n* 個の命令を実行するごとに呼び出されます。これは、GUI "
"更新などのために、長時間かかる処理中に SQLite からの呼び出しが欲しい場合に便利です。"

#: ../../library/sqlite3.rst:438
msgid ""
"If you want to clear any previously installed progress handler, call the "
"method with :const:`None` for *handler*."
msgstr ""
"以前登録した progress handler をクリアしたい場合は、このメソッドを、 *handler* 引数に :const:`None` "
"を渡して呼び出してください。"

#: ../../library/sqlite3.rst:441
msgid ""
"Returning a non-zero value from the handler function will terminate the "
"currently executing query and cause it to raise an :exc:`OperationalError` "
"exception."
msgstr ""

#: ../../library/sqlite3.rst:448
msgid ""
"Registers *trace_callback* to be called for each SQL statement that is "
"actually executed by the SQLite backend."
msgstr "各 SQL 文が SQLite バックエンドによって実際に実行されるたびに呼び出される *trace_callback* を登録します。"

#: ../../library/sqlite3.rst:451
msgid ""
"The only argument passed to the callback is the statement (as string) that "
"is being executed. The return value of the callback is ignored. Note that "
"the backend does not only run statements passed to the "
":meth:`Cursor.execute` methods.  Other sources include the transaction "
"management of the Python module and the execution of triggers defined in the"
" current database."
msgstr ""
"コールバックに渡される唯一の引数は、実行されている SQL 文 (の文字列)です。コールバックの戻り値は無視されます。バックエンドは "
":meth:`Cursor.execute` メソッドに渡された SQL 文だけを実行するわけではないことに注意してください。他のソースには、 "
"Python モジュールのトランザクション管理や、現在のデータベースに定義されたトリガーの実行が含まれます。"

#: ../../library/sqlite3.rst:457
msgid ""
"Passing :const:`None` as *trace_callback* will disable the trace callback."
msgstr "*trace_callback* として :const:`None` を渡すと、トレースコールバックを無効にできます。"

#: ../../library/sqlite3.rst:464
msgid ""
"This routine allows/disallows the SQLite engine to load SQLite extensions "
"from shared libraries.  SQLite extensions can define new functions, "
"aggregates or whole new virtual table implementations.  One well-known "
"extension is the fulltext-search extension distributed with SQLite."
msgstr ""
"このメソッドは SQLite エンジンが共有ライブラリから SQLite 拡張を読み込むのを許可したり、禁止したりします。SQLite "
"拡張は新しい関数や集計関数や仮想テーブルの実装を定義できます。1つの有名な拡張は SQLite によって頒布されている全テキスト検索拡張です。"

#: ../../library/sqlite3.rst:469 ../../library/sqlite3.rst:481
msgid "Loadable extensions are disabled by default. See [#f1]_."
msgstr "SQLite 拡張はデフォルトで無効にされています。[#f1]_ を見てください。"

#: ../../library/sqlite3.rst:477
msgid ""
"This routine loads a SQLite extension from a shared library.  You have to "
"enable extension loading with :meth:`enable_load_extension` before you can "
"use this routine."
msgstr ""
"このメソッドは共有ライブラリから SQLite 拡張を読み込みます。このメソッドを使う前に :meth:`enable_load_extension` "
"で拡張の読み込みを許可しておかなくてはなりません。"

#: ../../library/sqlite3.rst:487
msgid ""
"You can change this attribute to a callable that accepts the cursor and the "
"original row as a tuple and will return the real result row.  This way, you "
"can implement more advanced ways of returning results, such  as returning an"
" object that can also access columns by name."
msgstr ""
"この属性を変更して、カーソルと元の行をタプル形式で受け取り、本当の結果の行を返す呼び出し可能オブジェクトにすることができます。これによって、より進んだ結果の返し方を実装することができます。例えば、各列に列名でもアクセスできるようなオブジェクトを返すことができます。"

#: ../../library/sqlite3.rst:496
msgid ""
"If returning a tuple doesn't suffice and you want name-based access to "
"columns, you should consider setting :attr:`row_factory` to the highly-"
"optimized :class:`sqlite3.Row` type. :class:`Row` provides both index-based "
"and case-insensitive name-based access to columns with almost no memory "
"overhead. It will probably be better than your own custom dictionary-based "
"approach or even a db_row based solution."
msgstr ""
"タプルを返すのでは物足りず、名前に基づいて列へアクセスしたい場合は、 :attr:`row_factory` に高度に最適化された "
":class:`sqlite3.Row` 型を設定することを検討してください。 :class:`Row` "
"クラスではインデックスでも大文字小文字を無視した名前でも列にアクセスでき、しかもほとんどメモリーを浪費しません。おそらく独自実装の辞書を使うアプローチよりも良いもので、もしかすると"
" db の行に基づいた解法よりも優れているかもしれません。"

#: ../../library/sqlite3.rst:508
msgid ""
"Using this attribute you can control what objects are returned for the "
"``TEXT`` data type. By default, this attribute is set to :class:`str` and "
"the :mod:`sqlite3` module will return Unicode objects for ``TEXT``. If you "
"want to return bytestrings instead, you can set it to :class:`bytes`."
msgstr ""
"この属性を使って ``TEXT`` データ型をどのオブジェクトで返すかを制御できます。デフォルトではこの属性は :class:`str` "
"に設定されており、 :mod:`sqlite3` モジュールは ``TEXT`` を Unicode "
"オブジェクトで返します。もしバイト列で返したいならば、 :class:`bytes` に設定してください。"

#: ../../library/sqlite3.rst:513
msgid ""
"You can also set it to any other callable that accepts a single bytestring "
"parameter and returns the resulting object."
msgstr "バイト列を受け取って望みの型のオブジェクトを返すような呼び出し可能オブジェクトを何でも設定して構いません。"

#: ../../library/sqlite3.rst:516
msgid "See the following example code for illustration:"
msgstr "以下の説明用のコード例を参照してください:"

#: ../../library/sqlite3.rst:523
msgid ""
"Returns the total number of database rows that have been modified, inserted,"
" or deleted since the database connection was opened."
msgstr "データベース接続が開始されて以来の行の変更・挿入・削除がなされた行の総数を返します。"

#: ../../library/sqlite3.rst:529
msgid ""
"Returns an iterator to dump the database in an SQL text format.  Useful when"
" saving an in-memory database for later restoration.  This function provides"
" the same capabilities as the :kbd:`.dump` command in the :program:`sqlite3`"
" shell."
msgstr ""
"データベースをSQL testフォーマットでダンプするためのイテレータを返します。 "
"メモリ内のデータベースの内容を、後で復元するために保存する場合に便利です。この関数には、 :program:`sqlite3` シェルの中の "
":kbd:`.dump` コマンドと同じ機能があります。"

#: ../../library/sqlite3.rst:534
msgid "Example::"
msgstr "以下はプログラム例です::"

#: ../../library/sqlite3.rst:548
msgid ""
"This method makes a backup of a SQLite database even while it's being "
"accessed by other clients, or concurrently by the same connection.  The copy"
" will be written into the mandatory argument *target*, that must be another "
":class:`Connection` instance."
msgstr ""

#: ../../library/sqlite3.rst:553
msgid ""
"By default, or when *pages* is either ``0`` or a negative integer, the "
"entire database is copied in a single step; otherwise the method performs a "
"loop copying up to *pages* pages at a time."
msgstr ""

#: ../../library/sqlite3.rst:557
msgid ""
"If *progress* is specified, it must either be ``None`` or a callable object "
"that will be executed at each iteration with three integer arguments, "
"respectively the *status* of the last iteration, the *remaining* number of "
"pages still to be copied and the *total* number of pages."
msgstr ""

#: ../../library/sqlite3.rst:562
msgid ""
"The *name* argument specifies the database name that will be copied: it must"
" be a string containing either ``\"main\"``, the default, to indicate the "
"main database, ``\"temp\"`` to indicate the temporary database or the name "
"specified after the ``AS`` keyword in an ``ATTACH DATABASE`` statement for "
"an attached database."
msgstr ""

#: ../../library/sqlite3.rst:568
msgid ""
"The *sleep* argument specifies the number of seconds to sleep by between "
"successive attempts to backup remaining pages, can be specified either as an"
" integer or a floating point value."
msgstr ""

#: ../../library/sqlite3.rst:572
msgid "Example 1, copy an existing database into another::"
msgstr ""

#: ../../library/sqlite3.rst:586
msgid "Example 2, copy an existing database into a transient copy::"
msgstr ""

#: ../../library/sqlite3.rst:594
msgid "Availability: SQLite 3.6.11 or higher"
msgstr ""

#: ../../library/sqlite3.rst:602
msgid "Cursor Objects"
msgstr "カーソルオブジェクト"

#: ../../library/sqlite3.rst:606
msgid "A :class:`Cursor` instance has the following attributes and methods."
msgstr ":class:`Cursor` インスタンスは以下の属性やメソッドを持ちます。"

#: ../../library/sqlite3.rst:613
msgid ""
"Executes an SQL statement. The SQL statement may be parameterized (i. e. "
"placeholders instead of SQL literals). The :mod:`sqlite3` module supports "
"two kinds of placeholders: question marks (qmark style) and named "
"placeholders (named style)."
msgstr ""
"SQL 文を実行します。SQL 文はパラメータ化できます(すなわち SQL リテラルの代わりの場所確保文字 (placeholder) "
"を入れておけます)。 :mod:`sqlite3` モジュールは2種類の場所確保記法をサポートします。一つは疑問符(qmark "
"スタイル)、もう一つは名前(named スタイル)です。"

#: ../../library/sqlite3.rst:618
msgid "Here's an example of both styles:"
msgstr "両方のスタイルの例です:"

#: ../../library/sqlite3.rst:622
msgid ""
":meth:`execute` will only execute a single SQL statement. If you try to "
"execute more than one statement with it, it will raise a :exc:`.Warning`. "
"Use :meth:`executescript` if you want to execute multiple SQL statements "
"with one call."
msgstr ""

#: ../../library/sqlite3.rst:630
msgid ""
"Executes an SQL command against all parameter sequences or mappings found in"
" the sequence *seq_of_parameters*.  The :mod:`sqlite3` module also allows "
"using an :term:`iterator` yielding parameters instead of a sequence."
msgstr ""

#: ../../library/sqlite3.rst:636
msgid "Here's a shorter example using a :term:`generator`:"
msgstr "もう少し短い :term:`ジェネレータ <generator>` を使った例です:"

#: ../../library/sqlite3.rst:643
msgid ""
"This is a nonstandard convenience method for executing multiple SQL "
"statements at once. It issues a ``COMMIT`` statement first, then executes "
"the SQL script it gets as a parameter."
msgstr ""
"これは非標準の便宜メソッドで、一度に複数の SQL 文を実行することができます。メソッドは最初に ``COMMIT`` "
"文を発行し、次いで引数として渡された SQLスクリプトを実行します。"

#: ../../library/sqlite3.rst:647
msgid "*sql_script* can be an instance of :class:`str`."
msgstr ""

#: ../../library/sqlite3.rst:656
msgid ""
"Fetches the next row of a query result set, returning a single sequence, or "
":const:`None` when no more data is available."
msgstr ""
"クエリ結果から次の row をフェッチして、1つのシーケンスを返します。これ以上データがない場合は :const:`None` を返します。"

#: ../../library/sqlite3.rst:662
msgid ""
"Fetches the next set of rows of a query result, returning a list.  An empty "
"list is returned when no more rows are available."
msgstr "クエリ結果から次の幾つかの row をフェッチして、リストを返します。これ以上データがない場合は空のリストを返します。"

#: ../../library/sqlite3.rst:665
msgid ""
"The number of rows to fetch per call is specified by the *size* parameter. "
"If it is not given, the cursor's arraysize determines the number of rows to "
"be fetched. The method should try to fetch as many rows as indicated by the "
"size parameter. If this is not possible due to the specified number of rows "
"not being available, fewer rows may be returned."
msgstr ""
"一回の呼び出しで返される row の数は、*size* 引数で指定できます。この引数が与えられない場合、cursor の arraysize "
"属性が利用されます。このメソッドは可能な限り指定された *size* の数の row を fetch しようとするべきです。もし、指定された数の row"
" が利用可能でない場合、それより少ない数の row が返されます。"

#: ../../library/sqlite3.rst:671
msgid ""
"Note there are performance considerations involved with the *size* "
"parameter. For optimal performance, it is usually best to use the arraysize "
"attribute. If the *size* parameter is used, then it is best for it to retain"
" the same value from one :meth:`fetchmany` call to the next."
msgstr ""
"*size* 引数とパフォーマンスの関係についての注意です。パフォーマンスを最適化するためには、大抵、 arraysize "
"属性を利用するのがベストです。 *size* 引数を利用したのであれば、次の :meth:`fetchmany` "
"の呼び出しでも同じ数を利用するのがベストです。"

#: ../../library/sqlite3.rst:678
msgid ""
"Fetches all (remaining) rows of a query result, returning a list.  Note that"
" the cursor's arraysize attribute can affect the performance of this "
"operation. An empty list is returned when no rows are available."
msgstr ""
"全ての(残りの)クエリ結果の row をフェッチして、リストを返します。cursor の arraysize "
"属性がこの操作のパフォーマンスに影響することに気をつけてください。これ以上の row がない場合は、空のリストが返されます。"

#: ../../library/sqlite3.rst:684
msgid "Close the cursor now (rather than whenever ``__del__`` is called)."
msgstr ""

#: ../../library/sqlite3.rst:686
msgid ""
"The cursor will be unusable from this point forward; a "
":exc:`ProgrammingError` exception will be raised if any operation is "
"attempted with the cursor."
msgstr ""

#: ../../library/sqlite3.rst:691
msgid ""
"Although the :class:`Cursor` class of the :mod:`sqlite3` module implements "
"this attribute, the database engine's own support for the determination of "
"\"rows affected\"/\"rows selected\" is quirky."
msgstr ""
"一応 :mod:`sqlite3` モジュールの :class:`Cursor` "
"クラスはこの属性を実装していますが、データベースエンジン自身の「影響を受けた行」/「選択された行」の決定方法は少し風変わりです。"

#: ../../library/sqlite3.rst:695
msgid ""
"For :meth:`executemany` statements, the number of modifications are summed "
"up into :attr:`rowcount`."
msgstr ":meth:`executemany` では、変更数が :attr:`rowcount` に合計されます。"

#: ../../library/sqlite3.rst:698
msgid ""
"As required by the Python DB API Spec, the :attr:`rowcount` attribute \"is "
"-1 in case no ``executeXX()`` has been performed on the cursor or the "
"rowcount of the last operation is not determinable by the interface\". This "
"includes ``SELECT`` statements because we cannot determine the number of "
"rows a query produced until all rows were fetched."
msgstr ""
"Python DB API 仕様で要求されるように、:attr:`rowcount` 属性は「カーソルに対して ``executeXX()`` "
"が行なわれていないか、最後の操作の rowcount がインターフェースによって決定できなかった場合は -1 」です。これには ``SELECT`` "
"文も含まれます。すべての列を取得するまでクエリによって生じた列の数を決定できないからです。"

#: ../../library/sqlite3.rst:704
msgid ""
"With SQLite versions before 3.6.5, :attr:`rowcount` is set to 0 if you make "
"a ``DELETE FROM table`` without any condition."
msgstr ""
"SQLite のバージョン 3.6.5 以前は、条件なしで ``DELETE FROM table`` を実行すると :attr:`rowcount` "
"が 0 にセットされます。"

#: ../../library/sqlite3.rst:709
msgid ""
"This read-only attribute provides the rowid of the last modified row. It is "
"only set if you issued an ``INSERT`` or a ``REPLACE`` statement using the "
":meth:`execute` method.  For operations other than ``INSERT`` or ``REPLACE``"
" or when :meth:`executemany` is called, :attr:`lastrowid` is set to "
":const:`None`."
msgstr ""

#: ../../library/sqlite3.rst:715
msgid ""
"If the ``INSERT`` or ``REPLACE`` statement failed to insert the previous "
"successful rowid is returned."
msgstr ""

#: ../../library/sqlite3.rst:718
msgid "Added support for the ``REPLACE`` statement."
msgstr ""

#: ../../library/sqlite3.rst:723
msgid ""
"Read/write attribute that controls the number of rows returned by "
":meth:`fetchmany`. The default value is 1 which means a single row would be "
"fetched per call."
msgstr ""

#: ../../library/sqlite3.rst:728
msgid ""
"This read-only attribute provides the column names of the last query. To "
"remain compatible with the Python DB API, it returns a 7-tuple for each "
"column where the last six items of each tuple are :const:`None`."
msgstr ""
"この読み出し専用の属性は、最後のクエリの結果のカラム名を提供します。 Python DB API との互換性を維持するために、各カラムに対して "
"7つのタプルを返しますが、タプルの後ろ6つの要素は全て :const:`None` です。"

#: ../../library/sqlite3.rst:732
msgid "It is set for ``SELECT`` statements without any matching rows as well."
msgstr "この属性は ``SELECT`` 文にマッチする row が1つもなかった場合でもセットされます。"

#: ../../library/sqlite3.rst:736
msgid ""
"This read-only attribute provides the SQLite database :class:`Connection` "
"used by the :class:`Cursor` object.  A :class:`Cursor` object created by "
"calling :meth:`con.cursor() <Connection.cursor>` will have a "
":attr:`connection` attribute that refers to *con*::"
msgstr ""
"この読み出し専用の属性は、 :class:`Cursor` オブジェクトが使用する SQLite データベースの :class:`Connection`"
" を提供します。:meth:`con.cursor() <Connection.cursor>` を呼び出すことにより作成される "
":class:`Cursor` オブジェクトは、 *con* を参照する :attr:`connection` 属性を持ちます::"

#: ../../library/sqlite3.rst:749
msgid "Row Objects"
msgstr "Row オブジェクト"

#: ../../library/sqlite3.rst:753
msgid ""
"A :class:`Row` instance serves as a highly optimized "
":attr:`~Connection.row_factory` for :class:`Connection` objects. It tries to"
" mimic a tuple in most of its features."
msgstr ""
":class:`Row` インスタンスは、 :class:`Connection` オブジェクトの "
":attr:`~Connection.row_factory` として高度に最適化されています。タプルによく似た機能を持つ row を作成します。"

#: ../../library/sqlite3.rst:757
msgid ""
"It supports mapping access by column name and index, iteration, "
"representation, equality testing and :func:`len`."
msgstr ""
"カラム名とインデックスによる要素へのアクセス, イテレーション, repr(), 同値テスト, :func:`len` をサポートしています。"

#: ../../library/sqlite3.rst:760
msgid ""
"If two :class:`Row` objects have exactly the same columns and their members "
"are equal, they compare equal."
msgstr "もし、2つの :class:`Row` オブジェクトが完全に同じカラムと値を持っていた場合、それらは同値になります。"

#: ../../library/sqlite3.rst:765
msgid ""
"This method returns a list of column names. Immediately after a query, it is"
" the first member of each tuple in :attr:`Cursor.description`."
msgstr ""
"このメソッドはカラム名のリストを返します。クエリ直後から、これは :attr:`Cursor.description` "
"の各タプルの最初のメンバになります。"

#: ../../library/sqlite3.rst:768
msgid "Added support of slicing."
msgstr "スライスがサポートされました。"

#: ../../library/sqlite3.rst:771
msgid "Let's assume we initialize a table as in the example given above::"
msgstr "Rowの例のために、まずサンプルのテーブルを初期化します::"

#: ../../library/sqlite3.rst:783
msgid "Now we plug :class:`Row` in::"
msgstr "そして、 :class:`Row` を使ってみます::"

#: ../../library/sqlite3.rst:815
msgid "Exceptions"
msgstr "例外"

#: ../../library/sqlite3.rst:819
msgid "A subclass of :exc:`Exception`."
msgstr ""

#: ../../library/sqlite3.rst:823
msgid ""
"The base class of the other exceptions in this module.  It is a subclass of "
":exc:`Exception`."
msgstr "このモジュールにおける他の例外クラスの基底クラスです。 :exc:`Exception` のサブクラスです。"

#: ../../library/sqlite3.rst:828
msgid "Exception raised for errors that are related to the database."
msgstr ""

#: ../../library/sqlite3.rst:832
msgid ""
"Exception raised when the relational integrity of the database is affected, "
"e.g. a foreign key check fails.  It is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:837
msgid ""
"Exception raised for programming errors, e.g. table not found or already "
"exists, syntax error in the SQL statement, wrong number of parameters "
"specified, etc.  It is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:843
msgid ""
"Exception raised for errors that are related to the database's operation and"
" not necessarily under the control of the programmer, e.g. an unexpected "
"disconnect occurs, the data source name is not found, a transaction could "
"not be processed, etc.  It is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:850
msgid ""
"Exception raised in case a method or database API was used which is not "
"supported by the database, e.g. calling the :meth:`~Connection.rollback` "
"method on a connection that does not support transaction or has transactions"
" turned off.  It is a subclass of :exc:`DatabaseError`."
msgstr ""

#: ../../library/sqlite3.rst:859
msgid "SQLite and Python types"
msgstr "SQLite と Python の型"

#: ../../library/sqlite3.rst:863
msgid "Introduction"
msgstr "はじめに"

#: ../../library/sqlite3.rst:865
msgid ""
"SQLite natively supports the following types: ``NULL``, ``INTEGER``, "
"``REAL``, ``TEXT``, ``BLOB``."
msgstr ""
"SQLite は以下の型をネイティブにサポートします: ``NULL``, ``INTEGER``, ``REAL``, ``TEXT``, "
"``BLOB``。"

#: ../../library/sqlite3.rst:868
msgid ""
"The following Python types can thus be sent to SQLite without any problem:"
msgstr "したがって、次の Python の型は問題なく SQLite に送り込めます:"

#: ../../library/sqlite3.rst:871 ../../library/sqlite3.rst:888
msgid "Python type"
msgstr "Python の型"

#: ../../library/sqlite3.rst:871 ../../library/sqlite3.rst:888
msgid "SQLite type"
msgstr "SQLite の型"

#: ../../library/sqlite3.rst:873 ../../library/sqlite3.rst:890
msgid ":const:`None`"
msgstr ":const:`None`"

#: ../../library/sqlite3.rst:873 ../../library/sqlite3.rst:890
msgid "``NULL``"
msgstr "``NULL``"

#: ../../library/sqlite3.rst:875 ../../library/sqlite3.rst:892
msgid ":class:`int`"
msgstr ":class:`int`"

#: ../../library/sqlite3.rst:875 ../../library/sqlite3.rst:892
msgid "``INTEGER``"
msgstr "``INTEGER``"

#: ../../library/sqlite3.rst:877 ../../library/sqlite3.rst:894
msgid ":class:`float`"
msgstr ":class:`float`"

#: ../../library/sqlite3.rst:877 ../../library/sqlite3.rst:894
msgid "``REAL``"
msgstr "``REAL``"

#: ../../library/sqlite3.rst:879
msgid ":class:`str`"
msgstr ":class:`str`"

#: ../../library/sqlite3.rst:879 ../../library/sqlite3.rst:896
msgid "``TEXT``"
msgstr "``TEXT``"

#: ../../library/sqlite3.rst:881 ../../library/sqlite3.rst:899
msgid ":class:`bytes`"
msgstr ":class:`bytes`"

#: ../../library/sqlite3.rst:881 ../../library/sqlite3.rst:899
msgid "``BLOB``"
msgstr "``BLOB``"

#: ../../library/sqlite3.rst:885
msgid "This is how SQLite types are converted to Python types by default:"
msgstr "SQLite の型から Python の型へのデフォルトでの変換は以下の通りです:"

#: ../../library/sqlite3.rst:896
msgid "depends on :attr:`~Connection.text_factory`, :class:`str` by default"
msgstr ":attr:`~Connection.text_factory` に依存する。デフォルトでは :class:`str` 。"

#: ../../library/sqlite3.rst:902
msgid ""
"The type system of the :mod:`sqlite3` module is extensible in two ways: you "
"can store additional Python types in a SQLite database via object "
"adaptation, and you can let the :mod:`sqlite3` module convert SQLite types "
"to different Python types via converters."
msgstr ""
":mod:`sqlite3` モジュールの型システムは二つの方法で拡張できます。一つはオブジェクト適合(adaptation)を通じて追加された "
"Python の型を SQLite に格納することです。もう一つは変換関数(converter)を通じて :mod:`sqlite3` モジュールに "
"SQLite の型を違った Python の型に変換させることです。"

#: ../../library/sqlite3.rst:909
msgid "Using adapters to store additional Python types in SQLite databases"
msgstr "追加された Python の型を SQLite データベースに格納するために適合関数を使う"

#: ../../library/sqlite3.rst:911
msgid ""
"As described before, SQLite supports only a limited set of types natively. "
"To use other Python types with SQLite, you must **adapt** them to one of the"
" sqlite3 module's supported types for SQLite: one of NoneType, int, float, "
"str, bytes."
msgstr ""
"既に述べたように、SQLite が最初からサポートする型は限られたものだけです。それ以外の Python の型を SQLite で使うには、その型を "
":mod:`sqlite3` モジュールがサポートしている型の一つに **適合** "
"させなくてはなりません。サポートしている型というのは、NoneType, int, float, str, bytes です。"

#: ../../library/sqlite3.rst:916
msgid ""
"There are two ways to enable the :mod:`sqlite3` module to adapt a custom "
"Python type to one of the supported ones."
msgstr ":mod:`sqlite3` モジュールで望みの Python の型をサポートされている型の一つに適合させる方法は二つあります。"

#: ../../library/sqlite3.rst:921
msgid "Letting your object adapt itself"
msgstr "オブジェクト自身で適合するようにする"

#: ../../library/sqlite3.rst:923
msgid ""
"This is a good approach if you write the class yourself. Let's suppose you "
"have a class like this::"
msgstr "自分でクラスを書いているならばこの方法が良いでしょう。次のようなクラスがあるとします::"

#: ../../library/sqlite3.rst:930
msgid ""
"Now you want to store the point in a single SQLite column.  First you'll "
"have to choose one of the supported types first to be used for representing "
"the point. Let's just use str and separate the coordinates using a "
"semicolon. Then you need to give your class a method ``__conform__(self, "
"protocol)`` which must return the converted value. The parameter *protocol* "
"will be :class:`PrepareProtocol`."
msgstr ""
"さてこの点を SQLite "
"の一つのカラムに収めたいと考えたとしましょう。最初にしなければならないのはサポートされている型の中から点を表現するのに使えるものを選ぶことです。ここでは単純に文字列を使うことにして、座標を区切るのにはセミコロンを使いましょう。次に必要なのはクラスに変換された値を返す"
" ``__conform__(self, protocol)`` メソッドを追加することです。引数 *protocol* は "
":class:`PrepareProtocol` になります。"

#: ../../library/sqlite3.rst:940
msgid "Registering an adapter callable"
msgstr "適合関数を登録する"

#: ../../library/sqlite3.rst:942
msgid ""
"The other possibility is to create a function that converts the type to the "
"string representation and register the function with "
":meth:`register_adapter`."
msgstr "もう一つの可能性は型を文字列表現に変換する関数を作り :meth:`register_adapter` でその関数を登録することです。"

#: ../../library/sqlite3.rst:947
msgid ""
"The :mod:`sqlite3` module has two default adapters for Python's built-in "
":class:`datetime.date` and :class:`datetime.datetime` types.  Now let's "
"suppose we want to store :class:`datetime.datetime` objects not in ISO "
"representation, but as a Unix timestamp."
msgstr ""
":mod:`sqlite3` モジュールには二つの Python 標準型 :class:`datetime.date` と "
":class:`datetime.datetime` に対するデフォルト適合関数があります。いま :class:`datetime.datetime` "
"オブジェクトを ISO 表現でなく Unix タイムスタンプとして格納したいとしましょう。"

#: ../../library/sqlite3.rst:956
msgid "Converting SQLite values to custom Python types"
msgstr "SQLite の値を好きな Python 型に変換する"

#: ../../library/sqlite3.rst:958
msgid ""
"Writing an adapter lets you send custom Python types to SQLite. But to make "
"it really useful we need to make the Python to SQLite to Python roundtrip "
"work."
msgstr ""
"適合関数を書くことで好きな Python 型を SQLite に送り込めるようになりました。しかし、本当に使い物になるようにするには Python から"
" SQLite さらに Python へという往還(roundtrip)の変換ができる必要があります。"

#: ../../library/sqlite3.rst:961
msgid "Enter converters."
msgstr "そこで変換関数(converter)です。"

#: ../../library/sqlite3.rst:963
msgid ""
"Let's go back to the :class:`Point` class. We stored the x and y coordinates"
" separated via semicolons as strings in SQLite."
msgstr ""
":class:`Point` クラスの例に戻りましょう。x, y 座標をセミコロンで区切った文字列として SQLite に格納したのでした。"

#: ../../library/sqlite3.rst:966
msgid ""
"First, we'll define a converter function that accepts the string as a "
"parameter and constructs a :class:`Point` object from it."
msgstr "まず、文字列を引数として取り :class:`Point` オブジェクトをそれから構築する変換関数を定義します。"

#: ../../library/sqlite3.rst:971
msgid ""
"Converter functions **always** get called with a :class:`bytes` object, no "
"matter under which data type you sent the value to SQLite."
msgstr "変換関数は SQLite に送り込んだデータ型に関係なく **常に** :class:`bytes` オブジェクトを渡されます。"

#: ../../library/sqlite3.rst:980
msgid ""
"Now you need to make the :mod:`sqlite3` module know that what you select "
"from the database is actually a point. There are two ways of doing this:"
msgstr ""
"次に :mod:`sqlite3` モジュールにデータベースから取得したものが本当に点であることを教えなければなりません。二つの方法があります:"

#: ../../library/sqlite3.rst:983
msgid "Implicitly via the declared type"
msgstr "宣言された型を通じて暗黙的に"

#: ../../library/sqlite3.rst:985
msgid "Explicitly via the column name"
msgstr "カラム名を通じて明示的に"

#: ../../library/sqlite3.rst:987
msgid ""
"Both ways are described in section :ref:`sqlite3-module-contents`, in the "
"entries for the constants :const:`PARSE_DECLTYPES` and "
":const:`PARSE_COLNAMES`."
msgstr ""
"どちらの方法も :ref:`sqlite3-module-contents` 節の中で説明されています。それぞれ "
":const:`PARSE_DECLTYPES` 定数と :const:`PARSE_COLNAMES` 定数の項目です。"

#: ../../library/sqlite3.rst:990
msgid "The following example illustrates both approaches."
msgstr "以下の例で両方のアプローチを紹介します。"

#: ../../library/sqlite3.rst:996
msgid "Default adapters and converters"
msgstr "デフォルトの適合関数と変換関数"

#: ../../library/sqlite3.rst:998
msgid ""
"There are default adapters for the date and datetime types in the datetime "
"module. They will be sent as ISO dates/ISO timestamps to SQLite."
msgstr ""
"datetime モジュールの date 型および datetime 型のためのデフォルト適合関数があります。これらの型は ISO 日付 / ISO "
"タイムスタンプとして SQLite に送られます。"

#: ../../library/sqlite3.rst:1001
msgid ""
"The default converters are registered under the name \"date\" for "
":class:`datetime.date` and under the name \"timestamp\" for "
":class:`datetime.datetime`."
msgstr ""
"デフォルトの変換関数は :class:`datetime.date` 用が \"date\" という名前で、 "
":class:`datetime.datetime` 用が \"timestamp\" という名前で登録されています。"

#: ../../library/sqlite3.rst:1005
msgid ""
"This way, you can use date/timestamps from Python without any additional "
"fiddling in most cases. The format of the adapters is also compatible with "
"the experimental SQLite date/time functions."
msgstr ""
"これにより、多くの場合特別な細工無しに Python の日付 / タイムスタンプを使えます。適合関数の書式は実験的な SQLite の "
"date/time 関数とも互換性があります。"

#: ../../library/sqlite3.rst:1009
msgid "The following example demonstrates this."
msgstr "以下の例でこのことを確かめます。"

#: ../../library/sqlite3.rst:1013
msgid ""
"If a timestamp stored in SQLite has a fractional part longer than 6 numbers,"
" its value will be truncated to microsecond precision by the timestamp "
"converter."
msgstr ""
"SQLite に格納されているタイムスタンプが6桁より長い小数部を持っている場合、タイムスタンプの変換関数によってマイクロ秒精度に丸められます。"

#: ../../library/sqlite3.rst:1021
msgid "Controlling Transactions"
msgstr "トランザクション制御"

#: ../../library/sqlite3.rst:1023
msgid ""
"The underlying ``sqlite3`` library operates in ``autocommit`` mode by "
"default, but the Python :mod:`sqlite3` module by default does not."
msgstr ""

#: ../../library/sqlite3.rst:1026
msgid ""
"``autocommit`` mode means that statements that modify the database take "
"effect immediately.  A ``BEGIN`` or ``SAVEPOINT`` statement disables "
"``autocommit`` mode, and a ``COMMIT``, a ``ROLLBACK``, or a ``RELEASE`` that"
" ends the outermost transaction, turns ``autocommit`` mode back on."
msgstr ""

#: ../../library/sqlite3.rst:1031
msgid ""
"The Python :mod:`sqlite3` module by default issues a ``BEGIN`` statement "
"implicitly before a Data Modification Language (DML) statement (i.e. "
"``INSERT``/``UPDATE``/``DELETE``/``REPLACE``)."
msgstr ""

#: ../../library/sqlite3.rst:1035
msgid ""
"You can control which kind of ``BEGIN`` statements :mod:`sqlite3` implicitly"
" executes via the *isolation_level* parameter to the :func:`connect` call, "
"or via the :attr:`isolation_level` property of connections. If you specify "
"no *isolation_level*, a plain ``BEGIN`` is used, which is equivalent to "
"specifying ``DEFERRED``.  Other possible values are ``IMMEDIATE`` and "
"``EXCLUSIVE``."
msgstr ""

#: ../../library/sqlite3.rst:1042
msgid ""
"You can disable the :mod:`sqlite3` module's implicit transaction management "
"by setting :attr:`isolation_level` to ``None``.  This will leave the "
"underlying ``sqlite3`` library operating in ``autocommit`` mode.  You can "
"then completely control the transaction state by explicitly issuing "
"``BEGIN``, ``ROLLBACK``, ``SAVEPOINT``, and ``RELEASE`` statements in your "
"code."
msgstr ""

#: ../../library/sqlite3.rst:1048
msgid ""
":mod:`sqlite3` used to implicitly commit an open transaction before DDL "
"statements.  This is no longer the case."
msgstr ""

#: ../../library/sqlite3.rst:1054
msgid "Using :mod:`sqlite3` efficiently"
msgstr ":mod:`sqlite3` の効率的な使い方"

#: ../../library/sqlite3.rst:1058
msgid "Using shortcut methods"
msgstr "ショートカットメソッドを使う"

#: ../../library/sqlite3.rst:1060
msgid ""
"Using the nonstandard :meth:`execute`, :meth:`executemany` and "
":meth:`executescript` methods of the :class:`Connection` object, your code "
"can be written more concisely because you don't have to create the (often "
"superfluous) :class:`Cursor` objects explicitly. Instead, the "
":class:`Cursor` objects are created implicitly and these shortcut methods "
"return the cursor objects. This way, you can execute a ``SELECT`` statement "
"and iterate over it directly using only a single call on the "
":class:`Connection` object."
msgstr ""
":class:`Connection` オブジェクトの非標準的なメソッド :meth:`execute`, :meth:`executemany`, "
":meth:`executescript` を使うことで、 (しばしば余計な) :class:`Cursor` "
"オブジェクトをわざわざ作り出さずに済むので、コードをより簡潔に書くことができます。 :class:`Cursor` "
"オブジェクトは暗黙裡に生成されショートカットメソッドの戻り値として受け取ることができます。この方法を使えば、 ``SELECT`` "
"文を実行してその結果について反復することが、 :class:`Connection` オブジェクトに対する呼び出し一つで行なえます。"

#: ../../library/sqlite3.rst:1072
msgid "Accessing columns by name instead of by index"
msgstr "位置ではなく名前でカラムにアクセスする"

#: ../../library/sqlite3.rst:1074
msgid ""
"One useful feature of the :mod:`sqlite3` module is the built-in "
":class:`sqlite3.Row` class designed to be used as a row factory."
msgstr ""
":mod:`sqlite3` モジュールの有用な機能の一つに、行生成関数として使われるための :class:`sqlite3.Row` "
"クラスがあります。"

#: ../../library/sqlite3.rst:1077
msgid ""
"Rows wrapped with this class can be accessed both by index (like tuples) and"
" case-insensitively by name:"
msgstr "このクラスでラップされた行は、位置インデクス(タプルのような)でも大文字小文字を区別しない名前でもアクセスできます:"

#: ../../library/sqlite3.rst:1084
msgid "Using the connection as a context manager"
msgstr "コネクションをコンテキストマネージャーとして利用する"

#: ../../library/sqlite3.rst:1086
msgid ""
"Connection objects can be used as context managers that automatically commit"
" or rollback transactions.  In the event of an exception, the transaction is"
" rolled back; otherwise, the transaction is committed:"
msgstr ""
"Connection "
"オブジェクトはコンテキストマネージャーとして利用して、トランザクションを自動的にコミットしたりロールバックすることができます。例外が発生したときにトランザクションはロールバックされ、それ以外の場合、トランザクションはコミットされます:"

#: ../../library/sqlite3.rst:1095
msgid "Common issues"
msgstr "既知の問題"

#: ../../library/sqlite3.rst:1098
msgid "Multithreading"
msgstr "マルチスレッド"

#: ../../library/sqlite3.rst:1100
msgid ""
"Older SQLite versions had issues with sharing connections between threads. "
"That's why the Python module disallows sharing connections and cursors "
"between threads. If you still try to do so, you will get an exception at "
"runtime."
msgstr ""
"古いバージョンの SQLite はスレッド間でのコネクションの共有に問題がありました。その理由は、Python "
"のモジュールではスレッド間のコネクションとカーソルの共有ができないためです。依然としてそのようなことをしようとすると、実行時に例外を受け取るでしょう。"

#: ../../library/sqlite3.rst:1104
msgid ""
"The only exception is calling the :meth:`~Connection.interrupt` method, "
"which only makes sense to call from a different thread."
msgstr "唯一の例外は :meth:`~Connection.interrupt` メソッドで、これだけが異なるスレッドから呼び出せます。"

#: ../../library/sqlite3.rst:1108
msgid "Footnotes"
msgstr "脚注"

#: ../../library/sqlite3.rst:1109
msgid ""
"The sqlite3 module is not built with loadable extension support by default, "
"because some platforms (notably Mac OS X) have SQLite libraries which are "
"compiled without this feature. To get loadable extension support, you must "
"pass --enable-loadable-sqlite-extensions to configure."
msgstr ""
"いくつかのプラットフォームでこの機能なしでコンパイルされる SQLite ライブラリがあるので (特にMac OS X)、sqlite3 "
"モジュールはデフォルトで SQLite 拡張サポートなしで構築されます。SQLite 拡張サポートを有効にするには、configure に "
"--enable-loadable-sqlite-extensions を渡す必要があります。"
