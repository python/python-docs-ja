# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/sqlite3.rst:2
msgid ":mod:`sqlite3` --- DB-API 2.0 interface for SQLite databases"
msgstr ""
":mod:`sqlite3` --- SQLite データベースに対する DB-API 2.0 インタフェース"

#: ../../library/sqlite3.rst:11
msgid ""
"SQLite is a C library that provides a lightweight disk-based database that "
"doesn't require a separate server process and allows accessing the database "
"using a nonstandard variant of the SQL query language. Some applications can "
"use SQLite for internal data storage.  It's also possible to prototype an "
"application using SQLite and then port the code to a larger database such as "
"PostgreSQL or Oracle."
msgstr ""
"SQLite は、別にサーバプロセスは必要とせずデータベースのアクセスに SQL 問い合"
"わせ言語の非標準的な一種を使える軽量なディスク上のデータベースを提供する C ラ"
"イブラリです。ある種のアプリケーションは内部データ保存に SQLite を使えます。"
"また、SQLite を使ってアプリケーションのプロトタイプを作りその後そのコードを "
"PostgreSQL や Oracle のような大規模データベースに移植するということも可能で"
"す。"

#: ../../library/sqlite3.rst:18
msgid ""
"The sqlite3 module was written by Gerhard Häring.  It provides a SQL "
"interface compliant with the DB-API 2.0 specification described by :pep:"
"`249`."
msgstr ""
"sqlite3 モジュールの著者は Gerhard Häring です。 :pep:`249` で記述されている "
"DB-API 2.0 に準拠した SQL インターフェイスを提供します。"

#: ../../library/sqlite3.rst:21
msgid ""
"To use the module, you must first create a :class:`Connection` object that "
"represents the database.  Here the data will be stored in the :file:`example."
"db` file::"
msgstr ""
"このモジュールを使うには、最初にデータベースを表す :class:`Connection` オブ"
"ジェクトを作ります。ここではデータはファイル :file:`example.db` に格納されて"
"いるものとします::"

#: ../../library/sqlite3.rst:28
msgid ""
"You can also supply the special name ``:memory:`` to create a database in "
"RAM."
msgstr ""
"特別な名前である ``:memory:`` を使うと RAM 上にデータベースを作ることもできま"
"す。"

#: ../../library/sqlite3.rst:30
msgid ""
"Once you have a :class:`Connection`, you can create a :class:`Cursor`  "
"object and call its :meth:`~Cursor.execute` method to perform SQL commands::"
msgstr ""
":class:`Connection` があれば、 :class:`Cursor` オブジェクトを作りその :meth:"
"`~Cursor.execute` メソッドを呼んで SQL コマンドを実行することができます::"

#: ../../library/sqlite3.rst:49
msgid ""
"The data you've saved is persistent and is available in subsequent sessions::"
msgstr ""
"保存されたデータは永続的であり、次回のセッションでもそのまま使用できます::"

#: ../../library/sqlite3.rst:55
msgid ""
"Usually your SQL operations will need to use values from Python variables.  "
"You shouldn't assemble your query using Python's string operations because "
"doing so is insecure; it makes your program vulnerable to an SQL injection "
"attack (see https://xkcd.com/327/ for humorous example of what can go wrong)."
msgstr ""
"たいてい、SQL 操作では Python 変数の値を使う必要があります。この時、クエリー"
"を Python の文字列操作を使って構築することは安全とは言えないので、すべきでは"
"ありません。そのようなことをするとプログラムが SQL インジェクション攻撃に対し"
"脆弱になります (https://xkcd.com/327/ ではどうなってしまうかをユーモラスに描"
"いています)。"

#: ../../library/sqlite3.rst:60
msgid ""
"Instead, use the DB-API's parameter substitution.  Put ``?`` as a "
"placeholder wherever you want to use a value, and then provide a tuple of "
"values as the second argument to the cursor's :meth:`~Cursor.execute` "
"method.  (Other database modules may use a different placeholder, such as "
"``%s`` or ``:1``.) For example::"
msgstr ""
"代わりに、DB-API のパラメータ割り当てを使います。 ``?`` を変数の値を使いたい"
"ところに埋めておきます。その上で、値のタプルをカーソルの :meth:`~Cursor."
"execute` メソッドの第2引数として引き渡します。(他のデータベースモジュールでは"
"変数の場所を示すのに ``%s`` や ``:1`` などの異なった表記を用いることがありま"
"す。) 例を示します::"

#: ../../library/sqlite3.rst:82
msgid ""
"To retrieve data after executing a SELECT statement, you can either treat "
"the cursor as an :term:`iterator`, call the cursor's :meth:`~Cursor."
"fetchone` method to retrieve a single matching row, or call :meth:`~Cursor."
"fetchall` to get a list of the matching rows."
msgstr ""
"SELECT 文を実行した後データを取得する方法は3つありどれを使っても構いません。"
"一つはカーソルをイテレータ (:term:`iterator`) として扱う、一つはカーソルの :"
"meth:`~Cursor.fetchone` メソッドを呼んで一致した内の一行を取得する、もう一つ"
"は :meth:`~Cursor.fetchall` メソッドを呼んで一致した全ての行のリストとして受"
"け取る、という3つです。"

#: ../../library/sqlite3.rst:87
msgid "This example uses the iterator form::"
msgstr "以下の例ではイテレータの形を使います::"

#: ../../library/sqlite3.rst:102
msgid "https://github.com/ghaering/pysqlite"
msgstr "https://github.com/ghaering/pysqlite"

#: ../../library/sqlite3.rst:101
msgid ""
"The pysqlite web page -- sqlite3 is developed externally under the name "
"\"pysqlite\"."
msgstr ""
"pysqlite のウェブページ -- sqlite3 は「pysqlite」という名の下、外部で開発され"
"ています。"

#: ../../library/sqlite3.rst:106
msgid "https://www.sqlite.org"
msgstr "https://www.sqlite.org"

#: ../../library/sqlite3.rst:105
msgid ""
"The SQLite web page; the documentation describes the syntax and the "
"available data types for the supported SQL dialect."
msgstr ""
"SQLite のウェブページ。ここの文書ではサポートされる SQL 方言の文法と使える"
"データ型を説明しています。"

#: ../../library/sqlite3.rst:109
msgid "http://www.w3schools.com/sql/"
msgstr "http://www.w3schools.com/sql/"

#: ../../library/sqlite3.rst:109
msgid "Tutorial, reference and examples for learning SQL syntax."
msgstr "SQL 学習に効くチュートリアル、リファレンス、実例集。"

#: ../../library/sqlite3.rst:111
msgid ":pep:`249` - Database API Specification 2.0"
msgstr ":pep:`249` - Database API Specification 2.0"

#: ../../library/sqlite3.rst:112
msgid "PEP written by Marc-André Lemburg."
msgstr "Marc-Andre Lemburg により書かれた PEP。"

#: ../../library/sqlite3.rst:118
msgid "Module functions and constants"
msgstr "モジュールの関数と定数"

#: ../../library/sqlite3.rst:123
msgid ""
"The version number of this module, as a string. This is not the version of "
"the SQLite library."
msgstr ""
"文字列で表現されたモジュールのバージョン番号です。これは SQLite ライブラリの"
"バージョンではありません。"

#: ../../library/sqlite3.rst:128
msgid ""
"The version number of this module, as a tuple of integers. This is not the "
"version of the SQLite library."
msgstr ""
"整数のタプルで表現されたモジュールのバージョン番号です。これは SQLite ライブ"
"ラリのバージョンではありません。"

#: ../../library/sqlite3.rst:133
msgid "The version number of the run-time SQLite library, as a string."
msgstr "文字列で表現された SQLite ランタイムライブラリのバージョン番号です。"

#: ../../library/sqlite3.rst:137
msgid ""
"The version number of the run-time SQLite library, as a tuple of integers."
msgstr ""
"整数のタプルで表現された SQLite ランタイムライブラリのバージョン番号です。"

#: ../../library/sqlite3.rst:141 ../../library/sqlite3.rst:154
msgid ""
"This constant is meant to be used with the *detect_types* parameter of the :"
"func:`connect` function."
msgstr ""
"この定数は :func:`connect` 関数の *detect_types* パラメータとして使われます。"

#: ../../library/sqlite3.rst:144
msgid ""
"Setting it makes the :mod:`sqlite3` module parse the declared type for each "
"column it returns.  It will parse out the first word of the declared type, "
"i. e.  for \"integer primary key\", it will parse out \"integer\", or for "
"\"number(10)\" it will parse out \"number\". Then for that column, it will "
"look into the converters dictionary and use the converter function "
"registered for that type there."
msgstr ""
"この定数を設定すると :mod:`sqlite3` モジュールは戻り値のカラムの宣言された型"
"を読み取るようになります。意味を持つのは宣言の最初の単語です。すなわ"
"ち、\"integer primary key\" においては \"integer\" が読み取られます。また、 "
"\"number(10)\" では、 \"number\" が読み取られます。そして、そのカラムに対し"
"て、変換関数の辞書を探してその型に対して登録された関数を使うようにします。"

#: ../../library/sqlite3.rst:157
msgid ""
"Setting this makes the SQLite interface parse the column name for each "
"column it returns.  It will look for a string formed [mytype] in there, and "
"then decide that 'mytype' is the type of the column. It will try to find an "
"entry of 'mytype' in the converters dictionary and then use the converter "
"function found there to return the value. The column name found in :attr:"
"`Cursor.description` is only the first word of the column name, i.  e. if "
"you use something like ``'as \"x [datetime]\"'`` in your SQL, then we will "
"parse out everything until the first blank for the column name: the column "
"name would simply be \"x\"."
msgstr ""
"この定数を設定すると SQLite のインタフェースは戻り値のそれぞれのカラムの名前"
"を読み取るようになります。文字列の中の [mytype] といった形の部分を探"
"し、'mytype' がそのカラムの名前であると判断します。そして 'mytype' のエントリ"
"を変換関数辞書の中から見つけ、見つかった変換関数を値を返す際に用います。 :"
"attr:`Cursor.description` で見つかるカラム名はその最初の単語だけです。すなわ"
"ち、もし ``'as \"x [datetime]\"'`` のようなものを SQL の中で使っていたとする"
"と、読み取るのはカラム名の中の最初の空白までの全てですので、カラム名として使"
"われるのは単純に \"x\" ということになります。"

#: ../../library/sqlite3.rst:169
msgid ""
"Opens a connection to the SQLite database file *database*. You can use ``\":"
"memory:\"`` to open a database connection to a database that resides in RAM "
"instead of on disk."
msgstr ""
"ファイル *database* の SQLite データベースへの接続を開きます。``\":memory:"
"\"`` という名前を使うことでディスクの代わりに RAM 上のデータベースへの接続を"
"開くこともできます。"

#: ../../library/sqlite3.rst:173
msgid ""
"When a database is accessed by multiple connections, and one of the "
"processes modifies the database, the SQLite database is locked until that "
"transaction is committed. The *timeout* parameter specifies how long the "
"connection should wait for the lock to go away until raising an exception. "
"The default for the timeout parameter is 5.0 (five seconds)."
msgstr ""
"データベースが複数の接続からアクセスされている状況で、その内の一つがデータ"
"ベースに変更を加えたとき、SQLite データベースはそのトランザクションがコミット"
"されるまでロックされます。*timeout* パラメータで、例外を送出するまで接続が"
"ロックが解除されるのをどれだけ待つかを決めます。デフォルトは 5.0 (5秒) です。"

#: ../../library/sqlite3.rst:179
msgid ""
"For the *isolation_level* parameter, please see the :attr:`Connection."
"isolation_level` property of :class:`Connection` objects."
msgstr ""
"*isolation_level* パラメータについては、 :class:`Connection` オブジェクト"
"の、 :attr:`Connection.isolation_level` 属性を参照してください。"

#: ../../library/sqlite3.rst:182
msgid ""
"SQLite natively supports only the types TEXT, INTEGER, REAL, BLOB and NULL. "
"If you want to use other types you must add support for them yourself. The "
"*detect_types* parameter and the using custom **converters** registered with "
"the module-level :func:`register_converter` function allow you to easily do "
"that."
msgstr ""
"SQLite はネイティブで TEXT、INTEGER、REAL、BLOB および NULL のみをサポートし"
"ています。その他のタイプを使用したい場合はあなた自身で追加しなければなりませ"
"ん。*detect_types* パラメーターおよび、:func:`register_converter` 関数でモ"
"ジュールレベルで登録できるカスタム **変換関数** を使用することで簡単に追加で"
"きます。"

#: ../../library/sqlite3.rst:187
msgid ""
"*detect_types* defaults to 0 (i. e. off, no type detection), you can set it "
"to any combination of :const:`PARSE_DECLTYPES` and :const:`PARSE_COLNAMES` "
"to turn type detection on."
msgstr ""
"パラメータ *detect_types* のデフォルトは 0 (つまりオフ、型検知無し)です。型検"
"知を有効にするためには、 :const:`PARSE_DECLTYPES` と :const:`PARSE_COLNAMES` "
"の適当な組み合わせをこのパラメータにセットします。"

#: ../../library/sqlite3.rst:191
msgid ""
"By default, the :mod:`sqlite3` module uses its :class:`Connection` class for "
"the connect call.  You can, however, subclass the :class:`Connection` class "
"and make :func:`connect` use your class instead by providing your class for "
"the *factory* parameter."
msgstr ""
"デフォルトでは、 :mod:`sqlite3` モジュールは connect の呼び出しの際にモジュー"
"ルの :class:`Connection` クラスを使います。しかし、 :class:`Connection` クラ"
"スを継承したクラスを *factory* パラメータに渡して :func:`connect` にそのクラ"
"スを使わせることもできます。"

#: ../../library/sqlite3.rst:196
msgid "Consult the section :ref:`sqlite3-types` of this manual for details."
msgstr "詳しくはこのマニュアルの :ref:`sqlite3-types` 節を参考にしてください。"

#: ../../library/sqlite3.rst:198
msgid ""
"The :mod:`sqlite3` module internally uses a statement cache to avoid SQL "
"parsing overhead. If you want to explicitly set the number of statements "
"that are cached for the connection, you can set the *cached_statements* "
"parameter. The currently implemented default is to cache 100 statements."
msgstr ""
":mod:`sqlite3` モジュールは SQL 解析のオーバーヘッドを避けるために内部で文"
"キャッシュを使っています。接続に対してキャッシュされる文の数を自分で指定した"
"いならば、 *cached_statements* パラメータに設定してください。現在の実装ではデ"
"フォルトでキャッシュされる SQL 文の数を 100 にしています。"

#: ../../library/sqlite3.rst:206
msgid ""
"Registers a callable to convert a bytestring from the database into a custom "
"Python type. The callable will be invoked for all database values that are "
"of the type *typename*. Confer the parameter *detect_types* of the :func:"
"`connect` function for how the type detection works. Note that *typename* "
"and the name of the type in your query are matched in case-insensitive "
"manner."
msgstr ""

#: ../../library/sqlite3.rst:215
msgid ""
"Registers a callable to convert the custom Python type *type* into one of "
"SQLite's supported types. The callable *callable* accepts as single "
"parameter the Python value, and must return a value of the following types: "
"int, long, float, str (UTF-8 encoded), unicode or buffer."
msgstr ""
"自分が使いたい Python の型 *type* を SQLite がサポートしている型に変換する呼"
"び出し可能オブジェクト (callable) を登録します。その呼び出し可能オブジェクト "
"*callable* はただ一つの引数に Python の値を受け取り、int, long, float, "
"(UTF-8 でエンコードされた) str, unicode または buffer のいずれかの型の値を返"
"さなければなりません。"

#: ../../library/sqlite3.rst:223
msgid ""
"Returns :const:`True` if the string *sql* contains one or more complete SQL "
"statements terminated by semicolons. It does not verify that the SQL is "
"syntactically correct, only that there are no unclosed string literals and "
"the statement is terminated by a semicolon."
msgstr ""
"もし文字列 *sql* がセミコロンで終端された一つ以上の完全な SQL 文を含んでいれ"
"ば、 :const:`True` を返します。判定は SQL 文として文法的に正しいかではなく、"
"閉じられていない文字列リテラルが無いことおよびセミコロンで終端されていること"
"だけで行なわれます。"

#: ../../library/sqlite3.rst:228
msgid ""
"This can be used to build a shell for SQLite, as in the following example:"
msgstr "この関数は以下の例にあるような SQLite のシェルを作る際に使われます:"

#: ../../library/sqlite3.rst:236
msgid ""
"By default you will not get any tracebacks in user-defined functions, "
"aggregates, converters, authorizer callbacks etc. If you want to debug them, "
"you can call this function with *flag* set to ``True``. Afterwards, you will "
"get tracebacks from callbacks on ``sys.stderr``. Use :const:`False` to "
"disable the feature again."
msgstr ""
"デフォルトでは、ユーザ定義の関数、集計関数、変換関数、認可コールバックなどは"
"トレースバックを出力しません。デバッグの際にはこの関数を *flag* に ``True`` "
"を指定して呼び出します。そうした後は先に述べたような関数のトレースバックが "
"``sys.stderr`` に出力されます。元に戻すには :const:`False` を使います。"

#: ../../library/sqlite3.rst:246
msgid "Connection Objects"
msgstr "Connection オブジェクト"

#: ../../library/sqlite3.rst:250
msgid "A SQLite database connection has the following attributes and methods:"
msgstr "SQLite データベースコネクション。以下の属性やメソッドを持ちます:"

#: ../../library/sqlite3.rst:254
msgid ""
"Get or set the current isolation level. :const:`None` for autocommit mode or "
"one of \"DEFERRED\", \"IMMEDIATE\" or \"EXCLUSIVE\". See section :ref:"
"`sqlite3-controlling-transactions` for a more detailed explanation."
msgstr ""
"現在の分離レベルを取得または設定します。 :const:`None` で自動コミットモードま"
"たは \"DEFERRED\", \"IMMEDIATE\", \"EXLUSIVE\" のどれかです。より詳しい説明"
"は :ref:`sqlite3-controlling-transactions` 節を参照してください。"

#: ../../library/sqlite3.rst:261
msgid ""
"The cursor method accepts a single optional parameter *factory*. If "
"supplied, this must be a callable returning an instance of :class:`Cursor` "
"or its subclasses."
msgstr ""
"cursor メソッドはオション引数 *factory* を 1 つだけ受け付けます。\n"
"渡された場合は、 :class:`Cursor` またはそのサブクラスのインスタンスを返す呼び"
"出し可能オブジェクトでなければなりません。"

#: ../../library/sqlite3.rst:267
msgid ""
"This method commits the current transaction. If you don't call this method, "
"anything you did since the last call to ``commit()`` is not visible from "
"other database connections. If you wonder why you don't see the data you've "
"written to the database, please check you didn't forget to call this method."
msgstr ""
"このメソッドは現在のトランザクションをコミットします。このメソッドを呼ばない"
"と、前回 ``commit()`` を呼び出してから行ったすべての変更は、他のデータベース"
"コネクションから見ることができません。もし、データベースに書き込んだはずの"
"データが見えなくて悩んでいる場合は、このメソッドの呼び出しを忘れていないか"
"チェックしてください。"

#: ../../library/sqlite3.rst:274
msgid ""
"This method rolls back any changes to the database since the last call to :"
"meth:`commit`."
msgstr ""
"このメソッドは最後に行った :meth:`commit` 後の全ての変更をロールバックしま"
"す。"

#: ../../library/sqlite3.rst:279
msgid ""
"This closes the database connection. Note that this does not automatically "
"call :meth:`commit`. If you just close your database connection without "
"calling :meth:`commit` first, your changes will be lost!"
msgstr ""
"このメソッドはデータベースコネクションを閉じます。このメソッドが自動的に :"
"meth:`commit` を呼び出さないことに注意してください。 :meth:`commit` をせずに"
"コネクションを閉じると、変更が消えてしまいます！"

#: ../../library/sqlite3.rst:285
msgid ""
"This is a nonstandard shortcut that creates an intermediate cursor object by "
"calling the cursor method, then calls the cursor's :meth:`execute <Cursor."
"execute>` method with the parameters given."
msgstr ""
"このメソッドは非標準のショートカットで、cursor メソッドを呼び出して中間的な"
"カーソルオブジェクトを作り、そのカーソルの :meth:`execute <Cursor.execute>` "
"メソッドを与えられたパラメータと共に呼び出します。"

#: ../../library/sqlite3.rst:292
msgid ""
"This is a nonstandard shortcut that creates an intermediate cursor object by "
"calling the cursor method, then calls the cursor's :meth:`executemany "
"<Cursor.executemany>` method with the parameters given."
msgstr ""
"このメソッドは非標準のショートカットで、cursor メソッドを呼び出して中間的な"
"カーソルオブジェクトを作り、そのカーソルの :meth:`executemany <Cursor."
"executemany>` メソッドを与えられたパラメータと共に呼び出します。"

#: ../../library/sqlite3.rst:298
msgid ""
"This is a nonstandard shortcut that creates an intermediate cursor object by "
"calling the cursor method, then calls the cursor's :meth:`executescript "
"<Cursor.executescript>` method with the parameters given."
msgstr ""
"このメソッドは非標準のショートカットで、cursor メソッドを呼び出して中間的な"
"カーソルオブジェクトを作り、そのカーソルの :meth:`executescript <Cursor."
"executescript>` メソッドを与えられたパラメータと共に呼び出します。"

#: ../../library/sqlite3.rst:305
msgid ""
"Creates a user-defined function that you can later use from within SQL "
"statements under the function name *name*. *num_params* is the number of "
"parameters the function accepts, and *func* is a Python callable that is "
"called as the SQL function."
msgstr ""
"後から SQL 文中で *name* という名前の関数として使えるユーザ定義関数を作成しま"
"す。*num_params* は関数が受け付ける引数の数、*func* は SQL 関数として使われ"
"る Python の呼び出し可能オブジェクトです。"

#: ../../library/sqlite3.rst:310
msgid ""
"The function can return any of the types supported by SQLite: unicode, str, "
"int, long, float, buffer and ``None``."
msgstr ""
"関数は SQLite でサポートされている任意の型を返すことができます。具体的には "
"unicode, str, int, long, float, buffer, ``None`` です。"

#: ../../library/sqlite3.rst:313 ../../library/sqlite3.rst:329
#: ../../library/sqlite3.rst:425 ../../library/sqlite3.rst:531
msgid "Example:"
msgstr "例:"

#: ../../library/sqlite3.rst:320
msgid "Creates a user-defined aggregate function."
msgstr "ユーザ定義の集計関数を作成します。"

#: ../../library/sqlite3.rst:322
msgid ""
"The aggregate class must implement a ``step`` method, which accepts the "
"number of parameters *num_params*, and a ``finalize`` method which will "
"return the final result of the aggregate."
msgstr ""
"集計クラスにはパラメータ *num_params* で指定される個数の引数を取る ``step`` "
"メソッドおよび最終的な集計結果を返す ``finalize`` メソッドを実装しなければな"
"りません。"

#: ../../library/sqlite3.rst:326
msgid ""
"The ``finalize`` method can return any of the types supported by SQLite: "
"unicode, str, int, long, float, buffer and ``None``."
msgstr ""
"``finalize`` メソッドは SQLite でサポートされている任意の型を返すことができま"
"す。具体的には unicode, str, int, long, float, buffer, ``None`` です。"

#: ../../library/sqlite3.rst:336
msgid ""
"Creates a collation with the specified *name* and *callable*. The callable "
"will be passed two string arguments. It should return -1 if the first is "
"ordered lower than the second, 0 if they are ordered equal and 1 if the "
"first is ordered higher than the second.  Note that this controls sorting "
"(ORDER BY in SQL) so your comparisons don't affect other SQL operations."
msgstr ""
"*name* と *callable* で指定される照合順序を作成します。呼び出し可能オブジェク"
"トには二つの文字列が渡されます。一つめのものが二つめのものより低く順序付けら"
"れるならば -1 を返し、等しければ 0 を返し、一つめのものが二つめのものより高く"
"順序付けられるならば 1 を返すようにしなければなりません。この関数はソート"
"(SQL での ORDER BY)をコントロールするもので、比較を行なうことは他の SQL 操作"
"には影響を与えないことに注意しましょう。"

#: ../../library/sqlite3.rst:342
msgid ""
"Note that the callable will get its parameters as Python bytestrings, which "
"will normally be encoded in UTF-8."
msgstr ""
"また、呼び出し可能オブジェクトに渡される引数は Python のバイト文字列として渡"
"されますが、それは通常 UTF-8 で符号化されたものになります。"

#: ../../library/sqlite3.rst:345
msgid ""
"The following example shows a custom collation that sorts \"the wrong way\":"
msgstr "以下の例は「間違った方法で」ソートする自作の照合順序です:"

#: ../../library/sqlite3.rst:349
msgid ""
"To remove a collation, call ``create_collation`` with ``None`` as callable::"
msgstr ""
"照合順序を取り除くには callable に ``None`` を指定して ``create_collation`` "
"を呼び出します::"

#: ../../library/sqlite3.rst:356
msgid ""
"You can call this method from a different thread to abort any queries that "
"might be executing on the connection. The query will then abort and the "
"caller will get an exception."
msgstr ""
"このメソッドを別スレッドから呼び出して接続上で現在実行中であろうクエリを中断"
"させられます。クエリが中断されると呼び出し元は例外を受け取ります。"

#: ../../library/sqlite3.rst:363
msgid ""
"This routine registers a callback. The callback is invoked for each attempt "
"to access a column of a table in the database. The callback should return :"
"const:`SQLITE_OK` if access is allowed, :const:`SQLITE_DENY` if the entire "
"SQL statement should be aborted with an error and :const:`SQLITE_IGNORE` if "
"the column should be treated as a NULL value. These constants are available "
"in the :mod:`sqlite3` module."
msgstr ""
"このルーチンはコールバックを登録します。コールバックはデータベースのテーブル"
"のカラムにアクセスしようとするたびに呼び出されます。コールバックはアクセスが"
"許可されるならば :const:`SQLITE_OK` を、SQL 文全体がエラーとともに中断される"
"べきならば :const:`SQLITE_DENY` を、カラムが NULL 値として扱われるべきなら :"
"const:`SQLITE_IGNORE` を返さなければなりません。これらの定数は :mod:"
"`sqlite3` モジュールに用意されています。"

#: ../../library/sqlite3.rst:370
msgid ""
"The first argument to the callback signifies what kind of operation is to be "
"authorized. The second and third argument will be arguments or :const:`None` "
"depending on the first argument. The 4th argument is the name of the "
"database (\"main\", \"temp\", etc.) if applicable. The 5th argument is the "
"name of the inner-most trigger or view that is responsible for the access "
"attempt or :const:`None` if this access attempt is directly from input SQL "
"code."
msgstr ""
"コールバックの第一引数はどの種類の操作が許可されるかを決めます。第二第三引数"
"には第一引数に依存して本当に使われる引数か :const:`None` かが渡されます。第四"
"引数はもし適用されるならばデータベースの名前(\"main\", \"temp\", etc.)です。"
"第五引数はアクセスを試みる要因となった最も内側のトリガまたはビューの名前、ま"
"たはアクセスの試みが入力された SQL コードに直接起因するものならば :const:"
"`None` です。"

#: ../../library/sqlite3.rst:377
msgid ""
"Please consult the SQLite documentation about the possible values for the "
"first argument and the meaning of the second and third argument depending on "
"the first one. All necessary constants are available in the :mod:`sqlite3` "
"module."
msgstr ""
"第一引数に与えることができる値や、その第一引数によって決まる第二第三引数の意"
"味については、SQLite の文書を参考にしてください。必要な定数は全て :mod:"
"`sqlite3` モジュールに用意されています。"

#: ../../library/sqlite3.rst:384
msgid ""
"This routine registers a callback. The callback is invoked for every *n* "
"instructions of the SQLite virtual machine. This is useful if you want to "
"get called from SQLite during long-running operations, for example to update "
"a GUI."
msgstr ""
"このメソッドはコールバックを登録します。コールバックは SQLite 仮想マシン上の "
"*n* 個の命令を実行するごとに呼び出されます。これは、GUI 更新などのために、長"
"時間かかる処理中に SQLite からの呼び出しが欲しい場合に便利です。"

#: ../../library/sqlite3.rst:389
msgid ""
"If you want to clear any previously installed progress handler, call the "
"method with :const:`None` for *handler*."
msgstr ""
"以前登録した progress handler をクリアしたい場合は、このメソッドを、 "
"*handler* 引数に :const:`None` を渡して呼び出してください。"

#: ../../library/sqlite3.rst:397
msgid ""
"This routine allows/disallows the SQLite engine to load SQLite extensions "
"from shared libraries.  SQLite extensions can define new functions, "
"aggregates or whole new virtual table implementations.  One well-known "
"extension is the fulltext-search extension distributed with SQLite."
msgstr ""
"このメソッドは SQLite エンジンが共有ライブラリから SQLite 拡張を読み込むのを"
"許可したり、禁止したりします。SQLite 拡張は新しい関数や集計関数や仮想テーブル"
"の実装を定義できます。1つの有名な拡張は SQLite によって頒布されている全テキス"
"ト検索拡張です。"

#: ../../library/sqlite3.rst:402 ../../library/sqlite3.rst:414
msgid "Loadable extensions are disabled by default. See [#f1]_."
msgstr "SQLite 拡張はデフォルトで無効にされています。[#f1]_ を見てください。"

#: ../../library/sqlite3.rst:410
msgid ""
"This routine loads a SQLite extension from a shared library.  You have to "
"enable extension loading with :meth:`enable_load_extension` before you can "
"use this routine."
msgstr ""
"このメソッドは共有ライブラリから SQLite 拡張を読み込みます。このメソッドを使"
"う前に :meth:`enable_load_extension` で拡張の読み込みを許可しておかなくてはな"
"りません。"

#: ../../library/sqlite3.rst:420
msgid ""
"You can change this attribute to a callable that accepts the cursor and the "
"original row as a tuple and will return the real result row.  This way, you "
"can implement more advanced ways of returning results, such  as returning an "
"object that can also access columns by name."
msgstr ""
"この属性を、カーソルとタプルの形での元の行のデータを受け取り最終的な行を表す"
"オブジェクトを返す呼び出し可能オブジェクトに、変更することができます。これに"
"よって、より進んだ結果の返し方を実装することができます。例えば、カラムの名前"
"で各データにアクセスできるようなオブジェクトを返したりできます。"

#: ../../library/sqlite3.rst:429
msgid ""
"If returning a tuple doesn't suffice and you want name-based access to "
"columns, you should consider setting :attr:`row_factory` to the highly-"
"optimized :class:`sqlite3.Row` type. :class:`Row` provides both index-based "
"and case-insensitive name-based access to columns with almost no memory "
"overhead. It will probably be better than your own custom dictionary-based "
"approach or even a db_row based solution."
msgstr ""
"タプルを返すのでは物足りず、名前に基づいたカラムへのアクセスが行ないたい場合"
"は、高度に最適化された :class:`sqlite3.Row` 型を :attr:`row_factory` にセット"
"することを考えてはいかがでしょうか。 :class:`Row` クラスでは添字でも大文字小"
"文字を無視した名前でもカラムにアクセスでき、しかもほとんどメモリーを浪費しま"
"せん。おそらく、辞書を使うような独自実装のアプローチよりも、もしかすると db "
"の行に基づいた解法よりも良いものかもしれません。"

#: ../../library/sqlite3.rst:441
msgid ""
"Using this attribute you can control what objects are returned for the "
"``TEXT`` data type. By default, this attribute is set to :class:`unicode` "
"and the :mod:`sqlite3` module will return Unicode objects for ``TEXT``. If "
"you want to return bytestrings instead, you can set it to :class:`str`."
msgstr ""
"この属性を使って ``TEXT`` データ型をどのオブジェクトで返すかを制御できます。"
"デフォルトではこの属性は :class:`unicode` に設定されており、 :mod:`sqlite3` "
"モジュールは ``TEXT`` を Unicode オブジェクトで返します。もしバイト列で返した"
"いならば、 :class:`str` に設定してください。"

#: ../../library/sqlite3.rst:446
msgid ""
"For efficiency reasons, there's also a way to return Unicode objects only "
"for non-ASCII data, and bytestrings otherwise. To activate it, set this "
"attribute to :const:`sqlite3.OptimizedUnicode`."
msgstr ""
"効率化のため、非 ASCII データに対してのみ Unicode オブジェクトを返し、それ以"
"外に対してバイト文字列を返す方法もあります。これを有効化するには、この属性"
"を :const:`sqlite3.OptimizedUnicode` にセットしてください。"

#: ../../library/sqlite3.rst:450
msgid ""
"You can also set it to any other callable that accepts a single bytestring "
"parameter and returns the resulting object."
msgstr ""
"バイト列を受け取って望みの型のオブジェクトを返すような呼び出し可能オブジェク"
"トを何でも設定して構いません。"

#: ../../library/sqlite3.rst:453
msgid "See the following example code for illustration:"
msgstr "以下の説明用のコード例を参照してください:"

#: ../../library/sqlite3.rst:460
msgid ""
"Returns the total number of database rows that have been modified, inserted, "
"or deleted since the database connection was opened."
msgstr ""
"データベース接続が開始されて以来の行の変更・挿入・削除がなされた行の総数を返"
"します。"

#: ../../library/sqlite3.rst:466
msgid ""
"Returns an iterator to dump the database in an SQL text format.  Useful when "
"saving an in-memory database for later restoration.  This function provides "
"the same capabilities as the :kbd:`.dump` command in the :program:`sqlite3` "
"shell."
msgstr ""
"データベースをSQL testフォーマットでダンプするためのイテレータを返します。 "
"in-memory データベースの内容を、後でリストアするための保存する場合に便利で"
"す。この関数は :program:`sqlite3` シェルの中の :kbd:`.dump` コマンドと同じ機"
"能を持っています。"

#: ../../library/sqlite3.rst:473
msgid "Example::"
msgstr "例::"

#: ../../library/sqlite3.rst:487
msgid "Cursor Objects"
msgstr "カーソルオブジェクト"

#: ../../library/sqlite3.rst:491
msgid "A :class:`Cursor` instance has the following attributes and methods."
msgstr ":class:`Cursor` インスタンスは以下の属性やメソッドを持ちます。"

#: ../../library/sqlite3.rst:495
msgid ""
"Executes an SQL statement. The SQL statement may be parameterized (i. e. "
"placeholders instead of SQL literals). The :mod:`sqlite3` module supports "
"two kinds of placeholders: question marks (qmark style) and named "
"placeholders (named style)."
msgstr ""
"SQL 文を実行します。SQL 文はパラメータ化できます(すなわち SQL リテラルの代わ"
"りの場所確保文字 (placeholder) を入れておけます)。 :mod:`sqlite3` モジュール"
"は2種類の場所確保記法をサポートします。一つは疑問符(qmark スタイル)、もう一つ"
"は名前(named スタイル)です。"

#: ../../library/sqlite3.rst:500
msgid "Here's an example of both styles:"
msgstr "両方のスタイルの例です:"

#: ../../library/sqlite3.rst:504
msgid ""
":meth:`execute` will only execute a single SQL statement. If you try to "
"execute more than one statement with it, it will raise a Warning. Use :meth:"
"`executescript` if you want to execute multiple SQL statements with one call."
msgstr ""
":meth:`execute` は一つの SQL 文しか実行しません。二つ以上の文を実行しようとす"
"ると、Warning を発生させます。複数の SQL 文を一つの呼び出しで実行したい場合"
"は :meth:`executescript` を使ってください。"

#: ../../library/sqlite3.rst:512
msgid ""
"Executes an SQL command against all parameter sequences or mappings found in "
"the sequence *sql*.  The :mod:`sqlite3` module also allows using an :term:"
"`iterator` yielding parameters instead of a sequence."
msgstr ""
"SQL 文 *sql* を *seq_of_parameters* シーケンス (またはマッピング) に含まれる"
"全てのパラメータに対して実行します。 :mod:`sqlite3` モジュールでは、シーケン"
"スの代わりにパラメータの組を作り出すイテレータ (:term:`iterator`) を使うこと"
"が許されています。"

#: ../../library/sqlite3.rst:518
msgid "Here's a shorter example using a :term:`generator`:"
msgstr "もう少し短いジェネレータ (:term:`generator`) を使った例です:"

#: ../../library/sqlite3.rst:525
msgid ""
"This is a nonstandard convenience method for executing multiple SQL "
"statements at once. It issues a ``COMMIT`` statement first, then executes "
"the SQL script it gets as a parameter."
msgstr ""
"これは非標準の便宜メソッドで、一度に複数の SQL 文を実行することができます。メ"
"ソッドは最初に ``COMMIT`` 文を発行し、次いで引数として渡された SQLスクリプト"
"を実行します。"

#: ../../library/sqlite3.rst:529
msgid "*sql_script* can be a bytestring or a Unicode string."
msgstr "*sql_script* はバイト文字列または Unicode 文字列です。"

#: ../../library/sqlite3.rst:538
msgid ""
"Fetches the next row of a query result set, returning a single sequence, or :"
"const:`None` when no more data is available."
msgstr ""
"クエリ結果から次の row をフェッチして、1つのシーケンスを返します。これ以上"
"データがない場合は :const:`None` を返します。"

#: ../../library/sqlite3.rst:544
msgid ""
"Fetches the next set of rows of a query result, returning a list.  An empty "
"list is returned when no more rows are available."
msgstr ""
"クエリ結果から次の幾つかの row をフェッチして、リストを返します。これ以上デー"
"タがない場合は空のリストを返します。"

#: ../../library/sqlite3.rst:547
msgid ""
"The number of rows to fetch per call is specified by the *size* parameter. "
"If it is not given, the cursor's arraysize determines the number of rows to "
"be fetched. The method should try to fetch as many rows as indicated by the "
"size parameter. If this is not possible due to the specified number of rows "
"not being available, fewer rows may be returned."
msgstr ""
"一回の呼び出しで返される row の数は、*size* 引数で指定できます。この引数が与"
"えられない場合、cursor の arraysize 属性が利用されます。このメソッドは可能な"
"限り指定された *size* の数の row を fetch しようとするべきです。もし、指定さ"
"れた数の row が利用可能でない場合、それより少ない数の row が返されます。"

#: ../../library/sqlite3.rst:553
msgid ""
"Note there are performance considerations involved with the *size* "
"parameter. For optimal performance, it is usually best to use the arraysize "
"attribute. If the *size* parameter is used, then it is best for it to retain "
"the same value from one :meth:`fetchmany` call to the next."
msgstr ""
"*size* 引数とパフォーマンスの関係についての注意です。パフォーマンスを最適化す"
"るためには、大抵、 arraysize 属性を利用するのがベストです。 *size* 引数を利用"
"したのであれば、次の :meth:`fetchmany` の呼び出しでも同じ数を利用するのがベス"
"トです。"

#: ../../library/sqlite3.rst:560
msgid ""
"Fetches all (remaining) rows of a query result, returning a list.  Note that "
"the cursor's arraysize attribute can affect the performance of this "
"operation. An empty list is returned when no rows are available."
msgstr ""
"全ての(残りの)クエリ結果の row をフェッチして、リストを返します。cursor の "
"arraysize 属性がこの操作のパフォーマンスに影響することに気をつけてください。"
"これ以上の row がない場合は、空のリストが返されます。"

#: ../../library/sqlite3.rst:567
msgid ""
"Although the :class:`Cursor` class of the :mod:`sqlite3` module implements "
"this attribute, the database engine's own support for the determination of "
"\"rows affected\"/\"rows selected\" is quirky."
msgstr ""
"一応 :mod:`sqlite3` モジュールの :class:`Cursor` クラスはこの属性を実装してい"
"ますが、データベースエンジン自身の「影響を受けた行」/「選択された行」の決定方"
"法は少し風変わりです。"

#: ../../library/sqlite3.rst:571
msgid ""
"For :meth:`executemany` statements, the number of modifications are summed "
"up into :attr:`rowcount`."
msgstr ":meth:`executemany` では、変更数が :attr:`rowcount` に合計されます。"

#: ../../library/sqlite3.rst:574
msgid ""
"As required by the Python DB API Spec, the :attr:`rowcount` attribute \"is "
"-1 in case no ``executeXX()`` has been performed on the cursor or the "
"rowcount of the last operation is not determinable by the interface\". This "
"includes ``SELECT`` statements because we cannot determine the number of "
"rows a query produced until all rows were fetched."
msgstr ""
"Python DB API 仕様で要求されるように、:attr:`rowcount` 属性は「カーソルに対し"
"て ``executeXX()`` が行なわれていないか、最後の操作の rowcount がインター"
"フェースによって決定できなかった場合は -1 」です。これには ``SELECT`` 文も含"
"まれます。すべての列を取得するまでクエリによって生じた列の数を決定できないか"
"らです。"

#: ../../library/sqlite3.rst:580
msgid ""
"With SQLite versions before 3.6.5, :attr:`rowcount` is set to 0 if you make "
"a ``DELETE FROM table`` without any condition."
msgstr ""
"SQLite のバージョン 3.6.5 以前は、条件なしで ``DELETE FROM table`` を実行する"
"と :attr:`rowcount` が 0 にセットされます。"

#: ../../library/sqlite3.rst:585
msgid ""
"This read-only attribute provides the rowid of the last modified row. It is "
"only set if you issued an ``INSERT`` statement using the :meth:`execute` "
"method. For operations other than ``INSERT`` or when :meth:`executemany` is "
"called, :attr:`lastrowid` is set to :const:`None`."
msgstr ""
"この読み込み専用の属性は、最後に変更した row の rowid を提供します。この属性"
"は、 :meth:`execute` メソッドを利用して ``INSERT`` 文を実行したときのみ設定さ"
"れます。 ``INSERT`` 以外の操作や、 :meth:`executemany` メソッドを呼び出した場"
"合は、 :attr:`lastrowid` は :const:`None` に設定されます。"

#: ../../library/sqlite3.rst:592
msgid ""
"This read-only attribute provides the column names of the last query. To "
"remain compatible with the Python DB API, it returns a 7-tuple for each "
"column where the last six items of each tuple are :const:`None`."
msgstr ""
"この読み込み専用の属性は、最後のクエリの結果のカラム名を提供します。 Python "
"DB API との互換性を維持するために、各カラムに対して 7つのタプルを返しますが、"
"タプルの後ろ6つの要素は全て :const:`None` です。"

#: ../../library/sqlite3.rst:596
msgid "It is set for ``SELECT`` statements without any matching rows as well."
msgstr ""
"この属性は ``SELECT`` 文にマッチする row が1つもなかった場合でもセットされま"
"す。"

#: ../../library/sqlite3.rst:600
msgid ""
"This read-only attribute provides the SQLite database :class:`Connection` "
"used by the :class:`Cursor` object.  A :class:`Cursor` object created by "
"calling :meth:`con.cursor() <Connection.cursor>` will have a :attr:"
"`connection` attribute that refers to *con*::"
msgstr ""
"この読み込み専用の属性は、 :class:`Cursor` オブジェクトが使用する SQLite デー"
"タベースの :class:`Connection` を提供します。:meth:`con.cursor() <Connection."
"cursor>` を呼び出すことにより作成される :class:`Cursor` オブジェクトは、 "
"*con* を参照する :attr:`connection` 属性を持ちます::"

#: ../../library/sqlite3.rst:613
msgid "Row Objects"
msgstr "Row オブジェクト"

#: ../../library/sqlite3.rst:617
msgid ""
"A :class:`Row` instance serves as a highly optimized :attr:`~Connection."
"row_factory` for :class:`Connection` objects. It tries to mimic a tuple in "
"most of its features."
msgstr ""
":class:`Row` インスタンスは、 :class:`Connection` オブジェクトの :attr:"
"`~Connection.row_factory` として高度に最適化されています。タプルによく似た機"
"能を持つ row を作成します。"

#: ../../library/sqlite3.rst:621
msgid ""
"It supports mapping access by column name and index, iteration, "
"representation, equality testing and :func:`len`."
msgstr ""
"カラム名とインデックスによる要素へのアクセス, イテレーション, repr(), 同値テ"
"スト, :func:`len` をサポートしています。"

#: ../../library/sqlite3.rst:624
msgid ""
"If two :class:`Row` objects have exactly the same columns and their members "
"are equal, they compare equal."
msgstr ""
"もし、2つの :class:`Row` オブジェクトが完全に同じカラムと値を持っていた場合、"
"それらは同値になります。"

#: ../../library/sqlite3.rst:627
msgid "Added iteration and equality (hashability)."
msgstr "イテレーションと同値性、ハッシュ可能"

#: ../../library/sqlite3.rst:632
msgid ""
"This method returns a list of column names. Immediately after a query, it is "
"the first member of each tuple in :attr:`Cursor.description`."
msgstr ""
"このメソッドはカラム名のリストを返します。クエリ直後から、これは :attr:"
"`Cursor.description` の各タプルの最初のメンバになります。"

#: ../../library/sqlite3.rst:637
msgid "Let's assume we initialize a table as in the example given above::"
msgstr "Rowの例のために、まずサンプルのテーブルを初期化します::"

#: ../../library/sqlite3.rst:649
msgid "Now we plug :class:`Row` in::"
msgstr "そして、 :class:`Row` を使ってみます::"

#: ../../library/sqlite3.rst:681
msgid "SQLite and Python types"
msgstr "SQLite と Python の型"

#: ../../library/sqlite3.rst:685
msgid "Introduction"
msgstr "はじめに"

#: ../../library/sqlite3.rst:687
msgid ""
"SQLite natively supports the following types: ``NULL``, ``INTEGER``, "
"``REAL``, ``TEXT``, ``BLOB``."
msgstr ""
"SQLite は以下の型をネイティブにサポートします: ``NULL``, ``INTEGER``, "
"``REAL``, ``TEXT``, ``BLOB``。"

#: ../../library/sqlite3.rst:690
msgid ""
"The following Python types can thus be sent to SQLite without any problem:"
msgstr "したがって、次の Python の型は問題なく SQLite に送り込めます:"

#: ../../library/sqlite3.rst:693 ../../library/sqlite3.rst:713
msgid "Python type"
msgstr "Python の型"

#: ../../library/sqlite3.rst:693 ../../library/sqlite3.rst:713
msgid "SQLite type"
msgstr "SQLite の型"

#: ../../library/sqlite3.rst:695 ../../library/sqlite3.rst:715
msgid ":const:`None`"
msgstr ":const:`None`"

#: ../../library/sqlite3.rst:695 ../../library/sqlite3.rst:715
msgid "``NULL``"
msgstr "``NULL``"

#: ../../library/sqlite3.rst:697
msgid ":class:`int`"
msgstr ":class:`int`"

#: ../../library/sqlite3.rst:697 ../../library/sqlite3.rst:699
#: ../../library/sqlite3.rst:717
msgid "``INTEGER``"
msgstr "``INTEGER``"

#: ../../library/sqlite3.rst:699
msgid ":class:`long`"
msgstr ":class:`long`"

#: ../../library/sqlite3.rst:701 ../../library/sqlite3.rst:720
msgid ":class:`float`"
msgstr ":class:`float`"

#: ../../library/sqlite3.rst:701 ../../library/sqlite3.rst:720
msgid "``REAL``"
msgstr "``REAL``"

#: ../../library/sqlite3.rst:703
msgid ":class:`str` (UTF8-encoded)"
msgstr ":class:`str` (UTF8 でエンコードされたバイト文字列)"

#: ../../library/sqlite3.rst:703 ../../library/sqlite3.rst:705
#: ../../library/sqlite3.rst:722
msgid "``TEXT``"
msgstr "``TEXT``"

#: ../../library/sqlite3.rst:705
msgid ":class:`unicode`"
msgstr ":class:`unicode`"

#: ../../library/sqlite3.rst:707 ../../library/sqlite3.rst:725
msgid ":class:`buffer`"
msgstr ":class:`buffer`"

#: ../../library/sqlite3.rst:707 ../../library/sqlite3.rst:725
msgid "``BLOB``"
msgstr "``BLOB``"

#: ../../library/sqlite3.rst:710
msgid "This is how SQLite types are converted to Python types by default:"
msgstr "SQLite の型から Python の型へのデフォルトでの変換は以下の通りです:"

#: ../../library/sqlite3.rst:717
msgid ":class:`int` or :class:`long`, depending on size"
msgstr ":class:`int` または :class:`long` (サイズによる)"

#: ../../library/sqlite3.rst:722
msgid ""
"depends on :attr:`~Connection.text_factory`, :class:`unicode` by default"
msgstr ""
":attr:`~Connection.text_factory` に依存する。デフォルトでは :class:"
"`unicode` 。"

#: ../../library/sqlite3.rst:728
msgid ""
"The type system of the :mod:`sqlite3` module is extensible in two ways: you "
"can store additional Python types in a SQLite database via object "
"adaptation, and you can let the :mod:`sqlite3` module convert SQLite types "
"to different Python types via converters."
msgstr ""
":mod:`sqlite3` モジュールの型システムは二つの方法で拡張できます。一つはオブ"
"ジェクト適合(adaptation)を通じて追加された Python の型を SQLite に格納するこ"
"とです。もう一つは変換関数(converter)を通じて :mod:`sqlite3` モジュールに "
"SQLite の型を違った Python の型に変換させることです。"

#: ../../library/sqlite3.rst:735
msgid "Using adapters to store additional Python types in SQLite databases"
msgstr ""
"追加された Python の型を SQLite データベースに格納するために適合関数を使う"

#: ../../library/sqlite3.rst:737
msgid ""
"As described before, SQLite supports only a limited set of types natively. "
"To use other Python types with SQLite, you must **adapt** them to one of the "
"sqlite3 module's supported types for SQLite: one of NoneType, int, long, "
"float, str, unicode, buffer."
msgstr ""
"既に述べたように、SQLite が最初からサポートする型は限られたものだけです。それ"
"以外の Python の型を SQLite で使うには、その型を :mod:`sqlite3` モジュールが"
"サポートしている型の一つに **適合** させなくてはなりません。サポートしている"
"型というのは、 NoneType, int, long, float, str, unicode, buffer です。"

#: ../../library/sqlite3.rst:742
msgid ""
"There are two ways to enable the :mod:`sqlite3` module to adapt a custom "
"Python type to one of the supported ones."
msgstr ""
":mod:`sqlite3` モジュールで望みの Python の型をサポートされている型の一つに適"
"合させる方法は二つあります。"

#: ../../library/sqlite3.rst:747
msgid "Letting your object adapt itself"
msgstr "オブジェクト自身で適合するようにする"

#: ../../library/sqlite3.rst:749
msgid ""
"This is a good approach if you write the class yourself. Let's suppose you "
"have a class like this::"
msgstr ""
"自分でクラスを書いているならばこの方法が良いでしょう。次のようなクラスがある"
"とします::"

#: ../../library/sqlite3.rst:756
msgid ""
"Now you want to store the point in a single SQLite column.  First you'll "
"have to choose one of the supported types first to be used for representing "
"the point. Let's just use str and separate the coordinates using a "
"semicolon. Then you need to give your class a method ``__conform__(self, "
"protocol)`` which must return the converted value. The parameter *protocol* "
"will be :class:`PrepareProtocol`."
msgstr ""
"さてこの点を SQLite の一つのカラムに収めたいと考えたとしましょう。最初にしな"
"ければならないのはサポートされている型の中から点を表現するのに使えるものを選"
"ぶことです。ここでは単純に文字列を使うことにして、座標を区切るのにはセミコロ"
"ンを使いましょう。次に必要なのはクラスに変換された値を返す "
"``__conform__(self, protocol)`` メソッドを追加することです。引数 *protocol* "
"は :class:`PrepareProtocol` になります。"

#: ../../library/sqlite3.rst:766
msgid "Registering an adapter callable"
msgstr "適合関数を登録する"

#: ../../library/sqlite3.rst:768
msgid ""
"The other possibility is to create a function that converts the type to the "
"string representation and register the function with :meth:"
"`register_adapter`."
msgstr ""
"もう一つの可能性は型を文字列表現に変換する関数を作り :meth:"
"`register_adapter` でその関数を登録することです。"

#: ../../library/sqlite3.rst:773
msgid ""
"The type/class to adapt must be a :term:`new-style class`, i. e. it must "
"have :class:`object` as one of its bases."
msgstr ""
"適合させる型/クラスは新スタイルクラス (:term:`new-style class`) でなければな"
"りません。すなわち、 :class:`object` を基底クラスの一つとしていなければなりま"
"せん。"

#: ../../library/sqlite3.rst:778
msgid ""
"The :mod:`sqlite3` module has two default adapters for Python's built-in :"
"class:`datetime.date` and :class:`datetime.datetime` types.  Now let's "
"suppose we want to store :class:`datetime.datetime` objects not in ISO "
"representation, but as a Unix timestamp."
msgstr ""
":mod:`sqlite3` モジュールには二つの Python 標準型 :class:`datetime.date` と :"
"class:`datetime.datetime` に対するデフォルト適合関数があります。いま :class:"
"`datetime.datetime` オブジェクトを ISO 表現でなく Unix タイムスタンプとして格"
"納したいとしましょう。"

#: ../../library/sqlite3.rst:787
msgid "Converting SQLite values to custom Python types"
msgstr "SQLite の値を好きな Python 型に変換する"

#: ../../library/sqlite3.rst:789
msgid ""
"Writing an adapter lets you send custom Python types to SQLite. But to make "
"it really useful we need to make the Python to SQLite to Python roundtrip "
"work."
msgstr ""
"適合関数を書くことで好きな Python 型を SQLite に送り込めるようになりました。"
"しかし、本当に使い物になるようにするには Python から SQLite さらに Python へ"
"という往還(roundtrip)の変換ができる必要があります。"

#: ../../library/sqlite3.rst:792
msgid "Enter converters."
msgstr "そこで変換関数(converter)です。"

#: ../../library/sqlite3.rst:794
msgid ""
"Let's go back to the :class:`Point` class. We stored the x and y coordinates "
"separated via semicolons as strings in SQLite."
msgstr ""
":class:`Point` クラスの例に戻りましょう。x, y 座標をセミコロンで区切った文字"
"列として SQLite に格納したのでした。"

#: ../../library/sqlite3.rst:797
msgid ""
"First, we'll define a converter function that accepts the string as a "
"parameter and constructs a :class:`Point` object from it."
msgstr ""
"まず、文字列を引数として取り :class:`Point` オブジェクトをそれから構築する変"
"換関数を定義します。"

#: ../../library/sqlite3.rst:802
msgid ""
"Converter functions **always** get called with a string, no matter under "
"which data type you sent the value to SQLite."
msgstr ""
"変換関数は SQLite に送り込んだデータ型に関係なく **常に** 文字列を渡されま"
"す。"

#: ../../library/sqlite3.rst:811
msgid ""
"Now you need to make the :mod:`sqlite3` module know that what you select "
"from the database is actually a point. There are two ways of doing this:"
msgstr ""
"次に :mod:`sqlite3` モジュールにデータベースから取得したものが本当に点である"
"ことを教えなければなりません。二つの方法があります:"

#: ../../library/sqlite3.rst:814
msgid "Implicitly via the declared type"
msgstr "宣言された型を通じて暗黙的に"

#: ../../library/sqlite3.rst:816
msgid "Explicitly via the column name"
msgstr "カラム名を通じて明示的に"

#: ../../library/sqlite3.rst:818
msgid ""
"Both ways are described in section :ref:`sqlite3-module-contents`, in the "
"entries for the constants :const:`PARSE_DECLTYPES` and :const:"
"`PARSE_COLNAMES`."
msgstr ""
"どちらの方法も :ref:`sqlite3-module-contents` 節の中で説明されています。それ"
"ぞれ :const:`PARSE_DECLTYPES` 定数と :const:`PARSE_COLNAMES` 定数の項目です。"

#: ../../library/sqlite3.rst:821
msgid "The following example illustrates both approaches."
msgstr "以下の例で両方のアプローチを紹介します。"

#: ../../library/sqlite3.rst:827
msgid "Default adapters and converters"
msgstr "デフォルトの適合関数と変換関数"

#: ../../library/sqlite3.rst:829
msgid ""
"There are default adapters for the date and datetime types in the datetime "
"module. They will be sent as ISO dates/ISO timestamps to SQLite."
msgstr ""
"datetime モジュールの date 型および datetime 型のためのデフォルト適合関数があ"
"ります。これらの型は ISO 日付 / ISO タイムスタンプとして SQLite に送られま"
"す。"

#: ../../library/sqlite3.rst:832
msgid ""
"The default converters are registered under the name \"date\" for :class:"
"`datetime.date` and under the name \"timestamp\" for :class:`datetime."
"datetime`."
msgstr ""
"デフォルトの変換関数は :class:`datetime.date` 用が \"date\" という名前で、 :"
"class:`datetime.datetime` 用が \"timestamp\" という名前で登録されています。"

#: ../../library/sqlite3.rst:836
msgid ""
"This way, you can use date/timestamps from Python without any additional "
"fiddling in most cases. The format of the adapters is also compatible with "
"the experimental SQLite date/time functions."
msgstr ""
"これにより、多くの場合特別な細工無しに Python の日付 / タイムスタンプを使えま"
"す。適合関数の書式は実験的な SQLite の date/time 関数とも互換性があります。"

#: ../../library/sqlite3.rst:840
msgid "The following example demonstrates this."
msgstr "以下の例でこのことを確かめます。"

#: ../../library/sqlite3.rst:844
msgid ""
"If a timestamp stored in SQLite has a fractional part longer than 6 numbers, "
"its value will be truncated to microsecond precision by the timestamp "
"converter."
msgstr ""
"SQLite に格納されているタイムスタンプが6桁より長い小数部を持っている場合、タ"
"イムスタンプの変換関数によってマイクロ秒精度に丸められます。"

#: ../../library/sqlite3.rst:852
msgid "Controlling Transactions"
msgstr "トランザクション制御"

#: ../../library/sqlite3.rst:854
msgid ""
"By default, the :mod:`sqlite3` module opens transactions implicitly before a "
"Data Modification Language (DML)  statement (i.e. ``INSERT``/``UPDATE``/"
"``DELETE``/``REPLACE``), and commits transactions implicitly before a non-"
"DML, non-query statement (i. e. anything other than ``SELECT`` or the "
"aforementioned)."
msgstr ""
"デフォルトでは、 :mod:`sqlite3` モジュールはデータ変更言語(DML)文(すなわち "
"``INSERT``/``UPDATE``/``DELETE``/``REPLACE``)の前に暗黙のうちにトランザクショ"
"ンを開始し、非DML、非クエリ文(すなわち ``SELECT`` や上記のいずれでもないも"
"の。)の前にトランザクションをコミットします。"

#: ../../library/sqlite3.rst:860
msgid ""
"So if you are within a transaction and issue a command like ``CREATE "
"TABLE ...``, ``VACUUM``, ``PRAGMA``, the :mod:`sqlite3` module will commit "
"implicitly before executing that command. There are two reasons for doing "
"that. The first is that some of these commands don't work within "
"transactions. The other reason is that sqlite3 needs to keep track of the "
"transaction state (if a transaction is active or not)."
msgstr ""
"そのため、トランザクション内で ``CREATE TABLE ...``, ``VACUUM``, ``PRAGMA``  "
"のようなコマンドを発行した場合、 :mod:`sqlite3` モジュールはそのコマンドを実"
"行する前に暗黙にコミットします。これには2つの理由があります。 1番目は、これら"
"のコマンドのうちのいくつかがトランザクション内では動かないということです。 2"
"番目の理由は、 sqlite3 がトランザクション状態 (トランザクションがアクティブか"
"どうか) を追跡する必要があるためです。"

#: ../../library/sqlite3.rst:867
msgid ""
"You can control which kind of ``BEGIN`` statements sqlite3 implicitly "
"executes (or none at all) via the *isolation_level* parameter to the :func:"
"`connect` call, or via the :attr:`isolation_level` property of connections."
msgstr ""
"sqlite3 が暗黙のうちに実行する ``BEGIN`` 文の種類(またはそういうものを使わな"
"いこと)を :func:`connect` 呼び出しの *isolation_level* パラメータを通じて、ま"
"たは接続の :attr:`isolation_level` プロパティを通じて、制御することができま"
"す。"

#: ../../library/sqlite3.rst:871
msgid ""
"If you want **autocommit mode**, then set :attr:`isolation_level` to "
"``None``."
msgstr ""
"**自動コミットモード** を使いたい場合は、 :attr:`isolation_level` は "
"``None`` にしてください。"

#: ../../library/sqlite3.rst:873
msgid ""
"Otherwise leave it at its default, which will result in a plain \"BEGIN\" "
"statement, or set it to one of SQLite's supported isolation levels: "
"\"DEFERRED\", \"IMMEDIATE\" or \"EXCLUSIVE\"."
msgstr ""
"そうでなければデフォルトのまま ``BEGIN`` 文を使い続けるか、SQLite がサポート"
"する分離レベル \"DEFERRED\", \"IMMEDIATE\" または \"EXCLUSIVE\" を設定してく"
"ださい。"

#: ../../library/sqlite3.rst:880
msgid "Using :mod:`sqlite3` efficiently"
msgstr ":mod:`sqlite3` の効率的な使い方"

#: ../../library/sqlite3.rst:884
msgid "Using shortcut methods"
msgstr "ショートカットメソッドを使う"

#: ../../library/sqlite3.rst:886
msgid ""
"Using the nonstandard :meth:`execute`, :meth:`executemany` and :meth:"
"`executescript` methods of the :class:`Connection` object, your code can be "
"written more concisely because you don't have to create the (often "
"superfluous) :class:`Cursor` objects explicitly. Instead, the :class:"
"`Cursor` objects are created implicitly and these shortcut methods return "
"the cursor objects. This way, you can execute a ``SELECT`` statement and "
"iterate over it directly using only a single call on the :class:`Connection` "
"object."
msgstr ""
":class:`Connection` オブジェクトの非標準的なメソッド :meth:`execute`, :meth:"
"`executemany`, :meth:`executescript` を使うことで、 (しばしば余計な) :class:"
"`Cursor` オブジェクトをわざわざ作り出さずに済むので、コードをより簡潔に書くこ"
"とができます。 :class:`Cursor` オブジェクトは暗黙裡に生成されショートカットメ"
"ソッドの戻り値として受け取ることができます。この方法を使えば、 ``SELECT`` 文"
"を実行してその結果について反復することが、 :class:`Connection` オブジェクトに"
"対する呼び出し一つで行なえます。"

#: ../../library/sqlite3.rst:898
msgid "Accessing columns by name instead of by index"
msgstr "位置ではなく名前でカラムにアクセスする"

#: ../../library/sqlite3.rst:900
msgid ""
"One useful feature of the :mod:`sqlite3` module is the built-in :class:"
"`sqlite3.Row` class designed to be used as a row factory."
msgstr ""
":mod:`sqlite3` モジュールの有用な機能の一つに、行生成関数として使われるため"
"の :class:`sqlite3.Row` クラスがあります。"

#: ../../library/sqlite3.rst:903
msgid ""
"Rows wrapped with this class can be accessed both by index (like tuples) and "
"case-insensitively by name:"
msgstr ""
"このクラスでラップされた行は、位置インデクス(タプルのような)でも大文字小文字"
"を区別しない名前でもアクセスできます:"

#: ../../library/sqlite3.rst:910
msgid "Using the connection as a context manager"
msgstr "コネクションをコンテキストマネージャーとして利用する"

#: ../../library/sqlite3.rst:914
msgid ""
"Connection objects can be used as context managers that automatically commit "
"or rollback transactions.  In the event of an exception, the transaction is "
"rolled back; otherwise, the transaction is committed:"
msgstr ""
"Connection オブジェクトはコンテキストマネージャーとして利用して、トランザク"
"ションを自動的にコミットしたりロールバックすることができます。例外が発生した"
"ときにトランザクションはロールバックされ、それ以外の場合、トランザクションは"
"コミットされます:"

#: ../../library/sqlite3.rst:923
msgid "Common issues"
msgstr "既知の問題"

#: ../../library/sqlite3.rst:926
msgid "Multithreading"
msgstr "マルチスレッド"

#: ../../library/sqlite3.rst:928
msgid ""
"Older SQLite versions had issues with sharing connections between threads. "
"That's why the Python module disallows sharing connections and cursors "
"between threads. If you still try to do so, you will get an exception at "
"runtime."
msgstr ""
"古いバージョンの SQLite はスレッド間でのコネクションの共有に問題がありまし"
"た。その理由は、Python のモジュールではスレッド間のコネクションとカーソルの共"
"有ができないためです。依然としてそのようなことをしようとすると、実行時に例外"
"を受け取るでしょう。"

#: ../../library/sqlite3.rst:932
msgid ""
"The only exception is calling the :meth:`~Connection.interrupt` method, "
"which only makes sense to call from a different thread."
msgstr ""
"唯一の例外は :meth:`~Connection.interrupt` メソッドで、これだけが異なるスレッ"
"ドから呼び出せます。"

#: ../../library/sqlite3.rst:936
msgid "Footnotes"
msgstr "注記"

#: ../../library/sqlite3.rst:937
msgid ""
"The sqlite3 module is not built with loadable extension support by default, "
"because some platforms (notably Mac OS X) have SQLite libraries which are "
"compiled without this feature. To get loadable extension support, you must "
"modify setup.py and remove the line that sets SQLITE_OMIT_LOAD_EXTENSION."
msgstr ""
"sqlite3 モジュールはデフォルトで SQLite 拡張サポートなしで構築されます。いく"
"つかのプラットフォーム (特にMac OS X) でこの機能なしでコンパイルされる "
"SQLite ライブラリがあるためです。SQLite 拡張サポートを有効にしてビルドするに"
"は、 setup.py を編集して SQLITE_OMIT_LOAD_EXTENSION をセットしている行を削除"
"してください。"
