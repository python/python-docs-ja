# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Osamu NAKAMURA, 2017
# E. Kawashima, 2017
# Inada Naoki <songofacandy@gmail.com>, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2017
# Arihiro TAKASE, 2017
# tomo, 2018
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-01 13:22+0000\n"
"PO-Revision-Date: 2017-02-16 23:26+0000\n"
"Last-Translator: tomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/signal.rst:2
msgid ":mod:`signal` --- Set handlers for asynchronous events"
msgstr ":mod:`signal` --- 非同期イベントにハンドラを設定する"

#: ../../library/signal.rst:9
msgid "This module provides mechanisms to use signal handlers in Python."
msgstr "このモジュールでは Python でシグナルハンドラを使うための機構を提供します。"

#: ../../library/signal.rst:13
msgid "General rules"
msgstr "一般的なルール"

#: ../../library/signal.rst:15
msgid ""
"The :func:`signal.signal` function allows defining custom handlers to be "
"executed when a signal is received.  A small number of default handlers are "
"installed: :const:`SIGPIPE` is ignored (so write errors on pipes and sockets"
" can be reported as ordinary Python exceptions) and :const:`SIGINT` is "
"translated into a :exc:`KeyboardInterrupt` exception if the parent process "
"has not changed it."
msgstr ""

#: ../../library/signal.rst:22
msgid ""
"A handler for a particular signal, once set, remains installed until it is "
"explicitly reset (Python emulates the BSD style interface regardless of the "
"underlying implementation), with the exception of the handler for "
":const:`SIGCHLD`, which follows the underlying implementation."
msgstr ""
"特定のシグナルに対するハンドラが一度設定されると、明示的にリセットしないかぎり設定されたままになります (Python は背後の実装系に関係なく BSD"
" 形式のインタフェースをエミュレートします)。例外は :const:`SIGCHLD` のハンドラで、この場合は背後の実装系の仕様に従います。"

#: ../../library/signal.rst:29
msgid "Execution of Python signal handlers"
msgstr "Python のシグナルハンドラの実行"

#: ../../library/signal.rst:31
msgid ""
"A Python signal handler does not get executed inside the low-level (C) "
"signal handler.  Instead, the low-level signal handler sets a flag which "
"tells the :term:`virtual machine` to execute the corresponding Python signal"
" handler at a later point(for example at the next :term:`bytecode` "
"instruction). This has consequences:"
msgstr ""
"Python のシグナルハンドラは、低水準 (C言語) のシグナルハンドラ内で実行されるわけではありません。代わりに、低水準のシグナルハンドラが "
":term:`virtual machine` が対応する Python のシグナルハンドラを後から (例えば次の :term:`bytecode` "
"命令時に) 実行するようにフラグを立てます:"

#: ../../library/signal.rst:37
msgid ""
"It makes little sense to catch synchronous errors like :const:`SIGFPE` or "
":const:`SIGSEGV` that are caused by an invalid operation in C code.  Python "
"will return from the signal handler to the C code, which is likely to raise "
"the same signal again, causing Python to apparently hang.  From Python 3.3 "
"onwards, you can use the :mod:`faulthandler` module to report on synchronous"
" errors."
msgstr ""

#: ../../library/signal.rst:44
msgid ""
"A long-running calculation implemented purely in C (such as regular "
"expression matching on a large body of text) may run uninterrupted for an "
"arbitrary amount of time, regardless of any signals received.  The Python "
"signal handlers will be called when the calculation finishes."
msgstr ""
"完全にCで実装された長時間かかる計算 (大きいテキストに対する正規表現のマッチなど) "
"は、どのシグナルを受信しても中断されないまま長時間実行され続ける可能性があります。Python "
"のシグナルハンドラはその計算が終了してから呼び出されます。"

#: ../../library/signal.rst:54
msgid "Signals and threads"
msgstr "シグナルとスレッド"

#: ../../library/signal.rst:56
msgid ""
"Python signal handlers are always executed in the main Python thread, even "
"if the signal was received in another thread.  This means that signals can't"
" be used as a means of inter-thread communication.  You can use the "
"synchronization primitives from the :mod:`threading` module instead."
msgstr ""
"Python のシグナルハンドラは、もしシグナルを受け取ったのが別のスレッドだったとしても、常に Python "
"のメインスレッドで実行されます。このためシグナルをスレッド間通信に使うことはできません。代わりに :mod:`threading` "
"モジュールが提供している同期プリミティブを利用できます。"

#: ../../library/signal.rst:61
msgid "Besides, only the main thread is allowed to set a new signal handler."
msgstr "また、メインスレッドだけが新しいシグナルハンドラを登録できます。"

#: ../../library/signal.rst:65
msgid "Module contents"
msgstr "モジュールの内容"

#: ../../library/signal.rst:67
msgid ""
"signal (SIG*), handler (:const:`SIG_DFL`, :const:`SIG_IGN`) and sigmask "
"(:const:`SIG_BLOCK`, :const:`SIG_UNBLOCK`, :const:`SIG_SETMASK`) related "
"constants listed below were turned into :class:`enums <enum.IntEnum>`. "
":func:`getsignal`, :func:`pthread_sigmask`, :func:`sigpending` and "
":func:`sigwait` functions return human-readable :class:`enums "
"<enum.IntEnum>`."
msgstr ""

#: ../../library/signal.rst:77
msgid "The variables defined in the :mod:`signal` module are:"
msgstr "以下に :mod:`signal` モジュールで定義されている変数を示します:"

#: ../../library/signal.rst:82
msgid ""
"This is one of two standard signal handling options; it will simply perform "
"the default function for the signal.  For example, on most systems the "
"default action for :const:`SIGQUIT` is to dump core and exit, while the "
"default action for :const:`SIGCHLD` is to simply ignore it."
msgstr ""
"二つある標準シグナル処理オプションのうちの一つです; 単純にシグナルに対する標準の関数を実行します。例えば、ほとんどのシステムでは、 "
":const:`SIGQUIT` に対する標準の動作はコアダンプと終了で、 :const:`SIGCHLD` "
"に対する標準の動作は単にシグナルの無視です。"

#: ../../library/signal.rst:90
msgid ""
"This is another standard signal handler, which will simply ignore the given "
"signal."
msgstr "もう一つの標準シグナル処理オプションで、受け取ったシグナルを単に無視します。"

#: ../../library/signal.rst:96
msgid "Abort signal from :manpage:`abort(3)`."
msgstr ""

#: ../../library/signal.rst:100
msgid "Timer signal from :manpage:`alarm(2)`."
msgstr ""

#: ../../library/signal.rst:102 ../../library/signal.rst:114
#: ../../library/signal.rst:130 ../../library/signal.rst:144
#: ../../library/signal.rst:162 ../../library/signal.rst:170
#: ../../library/signal.rst:184 ../../library/signal.rst:190
#: ../../library/signal.rst:196 ../../library/signal.rst:434
#: ../../library/signal.rst:441
msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`利用可能な環境 <availability>`: Unix。"

#: ../../library/signal.rst:106
msgid "Interrupt from keyboard (CTRL + BREAK)."
msgstr ""

#: ../../library/signal.rst:108 ../../library/signal.rst:120
#: ../../library/signal.rst:215 ../../library/signal.rst:225
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`利用可能な環境 <availability>`: Windows 。"

#: ../../library/signal.rst:112
msgid "Bus error (bad memory access)."
msgstr ""

#: ../../library/signal.rst:118
msgid "Child process stopped or terminated."
msgstr ""

#: ../../library/signal.rst:124
msgid "Alias to :data:`SIGCHLD`."
msgstr ""

#: ../../library/signal.rst:128
msgid "Continue the process if it is currently stopped"
msgstr ""

#: ../../library/signal.rst:134
msgid "Floating-point exception. For example, division by zero."
msgstr ""

#: ../../library/signal.rst:137
msgid ""
":exc:`ZeroDivisionError` is raised when the second argument of a division or"
" modulo operation is zero."
msgstr ""

#: ../../library/signal.rst:142
msgid ""
"Hangup detected on controlling terminal or death of controlling process."
msgstr ""

#: ../../library/signal.rst:148
msgid "Illegal instruction."
msgstr ""

#: ../../library/signal.rst:152
msgid "Interrupt from keyboard (CTRL + C)."
msgstr ""

#: ../../library/signal.rst:154
msgid "Default action is to raise :exc:`KeyboardInterrupt`."
msgstr ""

#: ../../library/signal.rst:158
msgid "Kill signal."
msgstr ""

#: ../../library/signal.rst:160
msgid "It cannot be caught, blocked, or ignored."
msgstr ""

#: ../../library/signal.rst:166
msgid "Broken pipe: write to pipe with no readers."
msgstr ""

#: ../../library/signal.rst:168
msgid "Default action is to ignore the signal."
msgstr ""

#: ../../library/signal.rst:174
msgid "Segmentation fault: invalid memory reference."
msgstr ""

#: ../../library/signal.rst:178
msgid "Termination signal."
msgstr ""

#: ../../library/signal.rst:182
msgid "User-defined signal 1."
msgstr ""

#: ../../library/signal.rst:188
msgid "User-defined signal 2."
msgstr ""

#: ../../library/signal.rst:194
msgid "Window resize signal."
msgstr ""

#: ../../library/signal.rst:200
msgid ""
"All the signal numbers are defined symbolically.  For example, the hangup "
"signal is defined as :const:`signal.SIGHUP`; the variable names are "
"identical to the names used in C programs, as found in ``<signal.h>``.  The "
"Unix man page for ':c:func:`signal`' lists the existing signals (on some "
"systems this is :manpage:`signal(2)`, on others the list is in "
":manpage:`signal(7)`). Note that not all systems define the same set of "
"signal names; only those names defined by the system are defined by this "
"module."
msgstr ""

#: ../../library/signal.rst:211
msgid ""
"The signal corresponding to the :kbd:`Ctrl+C` keystroke event. This signal "
"can only be used with :func:`os.kill`."
msgstr ":kbd:`CTRL+C` キーストロークに該当するシグナル。このシグナルは :func:`os.kill` でだけ利用できます。"

#: ../../library/signal.rst:221
msgid ""
"The signal corresponding to the :kbd:`Ctrl+Break` keystroke event. This "
"signal can only be used with :func:`os.kill`."
msgstr ":kbd:`CTRL+BREAK` キーストロークに該当するシグナル。このシグナルは :func:`os.kill` でだけ利用できます。"

#: ../../library/signal.rst:231
msgid "One more than the number of the highest signal number."
msgstr "最も大きいシグナル番号に 1 を足した値です。"

#: ../../library/signal.rst:236
msgid ""
"Decrements interval timer in real time, and delivers :const:`SIGALRM` upon "
"expiration."
msgstr "実時間でデクリメントするインターバルタイマーです。タイマーが発火したときに :const:`SIGALRM` を送ります。"

#: ../../library/signal.rst:242
msgid ""
"Decrements interval timer only when the process is executing, and delivers "
"SIGVTALRM upon expiration."
msgstr ""
"プロセスの実行時間だけデクリメントするインターバルタイマーです。タイマーが発火したときに :const:`SIGVTALRM` を送ります。"

#: ../../library/signal.rst:248
msgid ""
"Decrements interval timer both when the process executes and when the system"
" is executing on behalf of the process. Coupled with ITIMER_VIRTUAL, this "
"timer is usually used to profile the time spent by the application in user "
"and kernel space. SIGPROF is delivered upon expiration."
msgstr ""
"プロセスの実行中と、システムがそのプロセスのために実行している時間だけデクリメントするインターバルタイマーです。ITIMER_VIRTUAL "
"と組み合わせて、このタイマーはよくアプリケーションがユーザー空間とカーネル空間で消費した時間のプロファイリングに利用されます。タイマーが発火したときに "
":const:`SIGPROF` を送ります。"

#: ../../library/signal.rst:256
msgid ""
"A possible value for the *how* parameter to :func:`pthread_sigmask` "
"indicating that signals are to be blocked."
msgstr ":func:`pthread_sigmask` の *how* 引数に渡せる値で、シグナルがブロックされることを意味します。"

#: ../../library/signal.rst:263
msgid ""
"A possible value for the *how* parameter to :func:`pthread_sigmask` "
"indicating that signals are to be unblocked."
msgstr ":func:`pthread_sigmask` の *how* 引数に渡せる値で、シグナルがブロック解除されることを意味します。"

#: ../../library/signal.rst:270
msgid ""
"A possible value for the *how* parameter to :func:`pthread_sigmask` "
"indicating that the signal mask is to be replaced."
msgstr ":func:`pthread_sigmask` の *how* 引数に渡せる値で、シグナルが置換されることを意味します。"

#: ../../library/signal.rst:276
msgid "The :mod:`signal` module defines one exception:"
msgstr ":mod:`signal` モジュールは1つの例外を定義しています:"

#: ../../library/signal.rst:280
msgid ""
"Raised to signal an error from the underlying :func:`setitimer` or "
":func:`getitimer` implementation. Expect this error if an invalid interval "
"timer or a negative time is passed to :func:`setitimer`. This error is a "
"subtype of :exc:`OSError`."
msgstr ""
"背後の :func:`setitimer` または :func:`getitimer` "
"実装からエラーを通知するために送出されます。無効なインタバルタイマーや負の時間が :func:`setitimer` "
"に渡された場合、このエラーを予期してください。このエラーは :exc:`OSError` を継承しています。"

#: ../../library/signal.rst:285
msgid ""
"This error used to be a subtype of :exc:`IOError`, which is now an alias of "
":exc:`OSError`."
msgstr "このエラーは以前は :exc:`IOError` のサブタイプでしたが、 :exc:`OSError` のエイリアスになりました。"

#: ../../library/signal.rst:290
msgid "The :mod:`signal` module defines the following functions:"
msgstr ":mod:`signal` モジュールでは以下の関数を定義しています:"

#: ../../library/signal.rst:295
msgid ""
"If *time* is non-zero, this function requests that a :const:`SIGALRM` signal"
" be sent to the process in *time* seconds. Any previously scheduled alarm is"
" canceled (only one alarm can be scheduled at any time).  The returned value"
" is then the number of seconds before any previously set alarm was to have "
"been delivered. If *time* is zero, no alarm is scheduled, and any scheduled "
"alarm is canceled.  If the return value is zero, no alarm is currently "
"scheduled."
msgstr ""

#: ../../library/signal.rst:303
msgid ""
":ref:`Availability <availability>`: Unix.  See the man page "
":manpage:`alarm(2)` for further information."
msgstr ""

#: ../../library/signal.rst:308
msgid ""
"Return the current signal handler for the signal *signalnum*. The returned "
"value may be a callable Python object, or one of the special values "
":const:`signal.SIG_IGN`, :const:`signal.SIG_DFL` or :const:`None`.  Here, "
":const:`signal.SIG_IGN` means that the signal was previously ignored, "
":const:`signal.SIG_DFL` means that the default way of handling the signal "
"was previously in use, and ``None`` means that the previous signal handler "
"was not installed from Python."
msgstr ""
"シグナル *signalnum* に対する現在のシグナルハンドラを返します。戻り値は呼び出し可能な Python オブジェクトか、 "
":const:`signal.SIG_IGN`\\ 、 :const:`signal.SIG_DFL`\\ 、および :const:`None` "
"といった特殊な値のいずれかです。ここで :const:`signal.SIG_IGN` は以前そのシグナルが無視されていたことを示し、 "
":const:`signal.SIG_DFL` は以前そのシグナルの標準の処理方法が使われていたことを示し、 ``None`` はシグナルハンドラがまだ"
" Python によってインストールされていないことを示します。"

#: ../../library/signal.rst:319
msgid ""
"Return the system description of the signal *signalnum*, such as "
"\"Interrupt\", \"Segmentation fault\", etc. Returns :const:`None` if the "
"signal is not recognized."
msgstr ""

#: ../../library/signal.rst:328
msgid ""
"Return the set of valid signal numbers on this platform.  This can be less "
"than ``range(1, NSIG)`` if some signals are reserved by the system for "
"internal use."
msgstr ""

#: ../../library/signal.rst:337
msgid ""
"Cause the process to sleep until a signal is received; the appropriate "
"handler will then be called.  Returns nothing."
msgstr ""

#: ../../library/signal.rst:342
msgid ""
":ref:`Availability <availability>`: Unix.  See the man page "
":manpage:`signal(2)` for further information."
msgstr ""

#: ../../library/signal.rst:343
msgid ""
"See also :func:`sigwait`, :func:`sigwaitinfo`, :func:`sigtimedwait` and "
":func:`sigpending`."
msgstr ""
":func:`sigwait`, :func:`sigwaitinfo`, :func:`sigtimedwait` "
":func:`sigpending` も参照してください。"

#: ../../library/signal.rst:349
msgid "Sends a signal to the calling process. Returns nothing."
msgstr ""

#: ../../library/signal.rst:356
msgid ""
"Send the signal *signalnum* to the thread *thread_id*, another thread in the"
" same process as the caller.  The target thread can be executing any code "
"(Python or not).  However, if the target thread is executing the Python "
"interpreter, the Python signal handlers will be :ref:`executed by the main "
"thread <signals-and-threads>`.  Therefore, the only point of sending a "
"signal to a particular Python thread would be to force a running system call"
" to fail with :exc:`InterruptedError`."
msgstr ""

#: ../../library/signal.rst:364
msgid ""
"Use :func:`threading.get_ident()` or the :attr:`~threading.Thread.ident` "
"attribute of :class:`threading.Thread` objects to get a suitable value for "
"*thread_id*."
msgstr ""

#: ../../library/signal.rst:368
msgid ""
"If *signalnum* is 0, then no signal is sent, but error checking is still "
"performed; this can be used to check if the target thread is still running."
msgstr ""

#: ../../library/signal.rst:372
msgid ""
"Raises an :ref:`auditing event <auditing>` ``signal.pthread_kill`` with "
"arguments ``thread_id``, ``signalnum``."
msgstr ""

#: ../../library/signal.rst:375
msgid ""
":ref:`Availability <availability>`: Unix.  See the man page "
":manpage:`pthread_kill(3)` for further information."
msgstr ""

#: ../../library/signal.rst:376
msgid "See also :func:`os.kill`."
msgstr ":func:`os.kill` を参照してください。"

#: ../../library/signal.rst:383
msgid ""
"Fetch and/or change the signal mask of the calling thread.  The signal mask "
"is the set of signals whose delivery is currently blocked for the caller. "
"Return the old signal mask as a set of signals."
msgstr ""
"これを呼び出すスレッドにセットされているシグナルマスクを取り出したり変更したりします。シグナルマスクは、呼び出し側のために現在どのシグナルの配送がブロックされているかを示す集合"
" (set) です。呼び出し前のもとのシグナルマスクを集合として返却します。"

#: ../../library/signal.rst:387
msgid ""
"The behavior of the call is dependent on the value of *how*, as follows."
msgstr "この関数の振る舞いは *how* に依存して以下のようになります。"

#: ../../library/signal.rst:389
msgid ""
":data:`SIG_BLOCK`: The set of blocked signals is the union of the current "
"set and the *mask* argument."
msgstr ":data:`SIG_BLOCK`: *mask* で指定されるシグナルが現時点のシグナルマスクに追加されます。"

#: ../../library/signal.rst:391
msgid ""
":data:`SIG_UNBLOCK`: The signals in *mask* are removed from the current set "
"of blocked signals.  It is permissible to attempt to unblock a signal which "
"is not blocked."
msgstr ""
":data:`SIG_UNBLOCK`: *mask* "
"で指定されるシグナルが現時点のシグナルマスクから取り除かれます。もともとブロックされていないシグナルをブロック解除しようとしても問題ありません。"

#: ../../library/signal.rst:394
msgid ""
":data:`SIG_SETMASK`: The set of blocked signals is set to the *mask* "
"argument."
msgstr ":data:`SIG_SETMASK`: シグナルマスク全体を *mask* としてセットします。"

#: ../../library/signal.rst:397
msgid ""
"*mask* is a set of signal numbers (e.g. {:const:`signal.SIGINT`, "
":const:`signal.SIGTERM`}). Use :func:`~signal.valid_signals` for a full mask"
" including all signals."
msgstr ""

#: ../../library/signal.rst:401
msgid ""
"For example, ``signal.pthread_sigmask(signal.SIG_BLOCK, [])`` reads the "
"signal mask of the calling thread."
msgstr ""
"呼び出しスレッドにセットされたシグナルマスクを問い合わせるには例えば "
"``signal.pthread_sigmask(signal.SIG_BLOCK, [])`` とします。"

#: ../../library/signal.rst:404
msgid ":data:`SIGKILL` and :data:`SIGSTOP` cannot be blocked."
msgstr ""

#: ../../library/signal.rst:408
msgid ""
":ref:`Availability <availability>`: Unix.  See the man page "
":manpage:`sigprocmask(3)` and :manpage:`pthread_sigmask(3)` for further "
"information."
msgstr ""

#: ../../library/signal.rst:409
msgid "See also :func:`pause`, :func:`sigpending` and :func:`sigwait`."
msgstr ":func:`pause`, :func:`sigpending`, :func:`sigwait` も参照して下さい。"

#: ../../library/signal.rst:416
msgid ""
"Sets given interval timer (one of :const:`signal.ITIMER_REAL`, "
":const:`signal.ITIMER_VIRTUAL` or :const:`signal.ITIMER_PROF`) specified by "
"*which* to fire after *seconds* (float is accepted, different from "
":func:`alarm`) and after that every *interval* seconds (if *interval* is "
"non-zero). The interval timer specified by *which* can be cleared by setting"
" *seconds* to zero."
msgstr ""

#: ../../library/signal.rst:423
msgid ""
"When an interval timer fires, a signal is sent to the process. The signal "
"sent is dependent on the timer being used; :const:`signal.ITIMER_REAL` will "
"deliver :const:`SIGALRM`, :const:`signal.ITIMER_VIRTUAL` sends "
":const:`SIGVTALRM`, and :const:`signal.ITIMER_PROF` will deliver "
":const:`SIGPROF`."
msgstr ""
"インターバルタイマーが起動したとき、シグナルがプロセスに送られます。送られるシグナルは利用されたタイマーの種類に依存します。 "
":const:`signal.ITIMER_REAL` の場合は :const:`SIGALRM` が、 "
":const:`signal.ITIMER_VIRTUAL` の場合は :const:`SIGVTALRM` が、 "
":const:`signal.ITIMER_PROF` の場合は :const:`SIGPROF` が送られます。"

#: ../../library/signal.rst:429
msgid "The old values are returned as a tuple: (delay, interval)."
msgstr "以前の値が (delay, interval) のタプルとして返されます。"

#: ../../library/signal.rst:431
msgid ""
"Attempting to pass an invalid interval timer will cause an "
":exc:`ItimerError`."
msgstr ""

#: ../../library/signal.rst:439
msgid "Returns current value of a given interval timer specified by *which*."
msgstr ""

#: ../../library/signal.rst:446
msgid ""
"Set the wakeup file descriptor to *fd*.  When a signal is received, the "
"signal number is written as a single byte into the fd.  This can be used by "
"a library to wakeup a poll or select call, allowing the signal to be fully "
"processed."
msgstr ""

#: ../../library/signal.rst:451
msgid ""
"The old wakeup fd is returned (or -1 if file descriptor wakeup was not "
"enabled).  If *fd* is -1, file descriptor wakeup is disabled. If not -1, "
"*fd* must be non-blocking.  It is up to the library to remove any bytes from"
" *fd* before calling poll or select again."
msgstr ""

#: ../../library/signal.rst:456 ../../library/signal.rst:509
msgid ""
"When threads are enabled, this function can only be called from the main "
"thread; attempting to call it from other threads will cause a "
":exc:`ValueError` exception to be raised."
msgstr ""
"スレッドが有効な場合、この関数はメインスレッドからしか実行できません。それ以外のスレッドからこの関数を実行しようとすると "
":exc:`ValueError` 例外が発生します。"

#: ../../library/signal.rst:460
msgid ""
"There are two common ways to use this function. In both approaches, you use "
"the fd to wake up when a signal arrives, but then they differ in how they "
"determine *which* signal or signals have arrived."
msgstr ""

#: ../../library/signal.rst:465
msgid ""
"In the first approach, we read the data out of the fd's buffer, and the byte"
" values give you the signal numbers. This is simple, but in rare cases it "
"can run into a problem: generally the fd will have a limited amount of "
"buffer space, and if too many signals arrive too quickly, then the buffer "
"may become full, and some signals may be lost. If you use this approach, "
"then you should set ``warn_on_full_buffer=True``, which will at least cause "
"a warning to be printed to stderr when signals are lost."
msgstr ""

#: ../../library/signal.rst:474
msgid ""
"In the second approach, we use the wakeup fd *only* for wakeups, and ignore "
"the actual byte values. In this case, all we care about is whether the fd's "
"buffer is empty or non-empty; a full buffer doesn't indicate a problem at "
"all. If you use this approach, then you should set "
"``warn_on_full_buffer=False``, so that your users are not confused by "
"spurious warning messages."
msgstr ""

#: ../../library/signal.rst:481
msgid "On Windows, the function now also supports socket handles."
msgstr "Windowsで、この関数はソケットハンドルをサポートするようになりました。"

#: ../../library/signal.rst:484
msgid "Added ``warn_on_full_buffer`` parameter."
msgstr ""

#: ../../library/signal.rst:489
msgid ""
"Change system call restart behaviour: if *flag* is :const:`False`, system "
"calls will be restarted when interrupted by signal *signalnum*, otherwise "
"system calls will be interrupted.  Returns nothing."
msgstr ""

#: ../../library/signal.rst:495
msgid ""
":ref:`Availability <availability>`: Unix.  See the man page "
":manpage:`siginterrupt(3)` for further information."
msgstr ""

#: ../../library/signal.rst:496
msgid ""
"Note that installing a signal handler with :func:`signal` will reset the "
"restart behaviour to interruptible by implicitly calling "
":c:func:`siginterrupt` with a true *flag* value for the given signal."
msgstr ""
":func:`signal` を使ってシグナルハンドラを設定したときに、暗黙のうちに *flag* に true を指定して "
":c:func:`siginterrupt` が実行されるため、中断に対するリスタートの動作がリセットされることに注意してください。"

#: ../../library/signal.rst:503
msgid ""
"Set the handler for signal *signalnum* to the function *handler*.  *handler*"
" can be a callable Python object taking two arguments (see below), or one of"
" the special values :const:`signal.SIG_IGN` or :const:`signal.SIG_DFL`.  The"
" previous signal handler will be returned (see the description of "
":func:`getsignal` above).  (See the Unix man page :manpage:`signal(2)` for "
"further information.)"
msgstr ""

#: ../../library/signal.rst:513
msgid ""
"The *handler* is called with two arguments: the signal number and the "
"current stack frame (``None`` or a frame object; for a description of frame "
"objects, see the :ref:`description in the type hierarchy <frame-objects>` or"
" see the attribute descriptions in the :mod:`inspect` module)."
msgstr ""
"*handler* は二つの引数とともに呼び出されます: シグナル番号、および現在のスタックフレーム (``None`` またはフレームオブジェクト; "
"フレームオブジェクトについての記述は :ref:`標準型の階層における説明 <frame-objects>` か、 :mod:`inspect` "
"モジュールの属性の説明を参照してください)。"

#: ../../library/signal.rst:518
msgid ""
"On Windows, :func:`signal` can only be called with :const:`SIGABRT`, "
":const:`SIGFPE`, :const:`SIGILL`, :const:`SIGINT`, :const:`SIGSEGV`, "
":const:`SIGTERM`, or :const:`SIGBREAK`. A :exc:`ValueError` will be raised "
"in any other case. Note that not all systems define the same set of signal "
"names; an :exc:`AttributeError` will be raised if a signal name is not "
"defined as ``SIG*`` module level constant."
msgstr ""

#: ../../library/signal.rst:529
msgid ""
"Examine the set of signals that are pending for delivery to the calling "
"thread (i.e., the signals which have been raised while blocked).  Return the"
" set of the pending signals."
msgstr ""
"呼び出しスレッドで配送が保留されているシグナル (つまり配送がブロックされている間に発生したシグナル) "
"の集合を調べます。保留中のシグナルの集合を返します。"

#: ../../library/signal.rst:535
msgid ""
":ref:`Availability <availability>`: Unix.  See the man page "
":manpage:`sigpending(2)` for further information."
msgstr ""

#: ../../library/signal.rst:536
msgid "See also :func:`pause`, :func:`pthread_sigmask` and :func:`sigwait`."
msgstr ":func:`pause`, :func:`pthread_sigmask`, :func:`sigwait` も参照して下さい。"

#: ../../library/signal.rst:543
msgid ""
"Suspend execution of the calling thread until the delivery of one of the "
"signals specified in the signal set *sigset*.  The function accepts the "
"signal (removes it from the pending list of signals), and returns the signal"
" number."
msgstr ""
"*sigset* 集合で指定されたシグナルのうちどれか一つが届くまで呼び出しスレッドを一時停止します。この関数はそのシグナルを受け取ると "
"(それを保留シグナルリストから取り除いて) そのシグナル番号を返します。"

#: ../../library/signal.rst:549
msgid ""
":ref:`Availability <availability>`: Unix.  See the man page "
":manpage:`sigwait(3)` for further information."
msgstr ""

#: ../../library/signal.rst:550
msgid ""
"See also :func:`pause`, :func:`pthread_sigmask`, :func:`sigpending`, "
":func:`sigwaitinfo` and :func:`sigtimedwait`."
msgstr ""
":func:`pause`, :func:`pthread_sigmask`, :func:`sigpending`, "
":func:`sigwaitinfo`, :func:`sigtimedwait` も参照して下さい。"

#: ../../library/signal.rst:558
msgid ""
"Suspend execution of the calling thread until the delivery of one of the "
"signals specified in the signal set *sigset*.  The function accepts the "
"signal and removes it from the pending list of signals. If one of the "
"signals in *sigset* is already pending for the calling thread, the function "
"will return immediately with information about that signal. The signal "
"handler is not called for the delivered signal. The function raises an "
":exc:`InterruptedError` if it is interrupted by a signal that is not in "
"*sigset*."
msgstr ""

#: ../../library/signal.rst:567
msgid ""
"The return value is an object representing the data contained in the "
":c:type:`siginfo_t` structure, namely: :attr:`si_signo`, :attr:`si_code`, "
":attr:`si_errno`, :attr:`si_pid`, :attr:`si_uid`, :attr:`si_status`, "
":attr:`si_band`."
msgstr ""

#: ../../library/signal.rst:574
msgid ""
":ref:`Availability <availability>`: Unix.  See the man page "
":manpage:`sigwaitinfo(2)` for further information."
msgstr ""

#: ../../library/signal.rst:575
msgid "See also :func:`pause`, :func:`sigwait` and :func:`sigtimedwait`."
msgstr ":func:`pause`, :func:`sigwait`, :func:`sigtimedwait` も参照して下さい。"

#: ../../library/signal.rst:579
msgid ""
"The function is now retried if interrupted by a signal not in *sigset* and "
"the signal handler does not raise an exception (see :pep:`475` for the "
"rationale)."
msgstr ""

#: ../../library/signal.rst:587
msgid ""
"Like :func:`sigwaitinfo`, but takes an additional *timeout* argument "
"specifying a timeout. If *timeout* is specified as :const:`0`, a poll is "
"performed. Returns :const:`None` if a timeout occurs."
msgstr ""

#: ../../library/signal.rst:593
msgid ""
":ref:`Availability <availability>`: Unix.  See the man page "
":manpage:`sigtimedwait(2)` for further information."
msgstr ""

#: ../../library/signal.rst:594
msgid "See also :func:`pause`, :func:`sigwait` and :func:`sigwaitinfo`."
msgstr ":func:`pause`, :func:`sigwait`, :func:`sigwaitinfo` も参照して下さい。"

#: ../../library/signal.rst:598
msgid ""
"The function is now retried with the recomputed *timeout* if interrupted by "
"a signal not in *sigset* and the signal handler does not raise an exception "
"(see :pep:`475` for the rationale)."
msgstr ""

#: ../../library/signal.rst:607
msgid "Example"
msgstr "使用例"

#: ../../library/signal.rst:609
msgid ""
"Here is a minimal example program. It uses the :func:`alarm` function to "
"limit the time spent waiting to open a file; this is useful if the file is "
"for a serial device that may not be turned on, which would normally cause "
"the :func:`os.open` to hang indefinitely.  The solution is to set a 5-second"
" alarm before opening the file; if the operation takes too long, the alarm "
"signal will be sent, and the handler raises an exception. ::"
msgstr ""
"以下は最小限のプログラム例です。この例では :func:`alarm` を使ってファイルを開く処理を待つのに費やす時間を制限します; "
"例えば、電源の入っていないシリアルデバイスを開こうとすると、通常 :func:`os.open` "
"は未定義の期間ハングアップしてしまいますが、この方法はそうした場合に便利です。ここではファイルを開くまで 5 "
"秒間のアラームを設定することで解決しています; "
"ファイルを開く処理が長くかかりすぎると、アラームシグナルが送信され、ハンドラが例外を送出するようになっています。 ::"

#: ../../library/signal.rst:632
msgid "Note on SIGPIPE"
msgstr ""

#: ../../library/signal.rst:634
msgid ""
"Piping output of your program to tools like :manpage:`head(1)` will cause a "
":const:`SIGPIPE` signal to be sent to your process when the receiver of its "
"standard output closes early.  This results in an exception like "
":code:`BrokenPipeError: [Errno 32] Broken pipe`.  To handle this case, wrap "
"your entry point to catch this exception as follows::"
msgstr ""

#: ../../library/signal.rst:661
msgid ""
"Do not set :const:`SIGPIPE`'s disposition to :const:`SIG_DFL` in order to "
"avoid :exc:`BrokenPipeError`.  Doing that would cause your program to exit "
"unexpectedly also whenever any socket connection is interrupted while your "
"program is still writing to it."
msgstr ""
