# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Takanori Suzuki <takanori@takanory.net>, 2021
# 29128e1766ff3c22e9a48fcc741811c2_548edd6 <a54a2ad00009f66b8ffbc5c6c2825655_97108>, 2023
# Masato HASHIMOTO <cabezon.hashimoto@gmail.com>, 2023
# tomo, 2023
# Arihiro TAKASE, 2023
# souma987, 2023
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:07+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/http.client.rst:2
msgid ":mod:`!http.client` --- HTTP protocol client"
msgstr ":mod:`!http.client` --- HTTP プロトコルクライアント"

#: ../../library/http.client.rst:7
msgid "**Source code:** :source:`Lib/http/client.py`"
msgstr "**ソースコード:** :source:`Lib/http/client.py`"

#: ../../library/http.client.rst:17
msgid ""
"This module defines classes that implement the client side of the HTTP and "
"HTTPS protocols.  It is normally not used directly --- the module :mod:"
"`urllib.request` uses it to handle URLs that use HTTP and HTTPS."
msgstr ""
"このモジュールでは HTTP および HTTPS プロトコルのクライアントサイドを実装して"
"いるクラスを定義しています。通常、このモジュールは直接使いません --- :mod:"
"`urllib.request` モジュールが HTTP や HTTPS を使った URL を扱う上でこのモ"
"ジュールを使います。"

#: ../../library/http.client.rst:23
msgid ""
"The `Requests package <https://requests.readthedocs.io/en/latest/>`_ is "
"recommended for a higher-level HTTP client interface."
msgstr ""
"より高水準の HTTP クライアントインターフェースとして `Requests パッケージ "
"<https://requests.readthedocs.io/en/latest/>`_ が推奨されています。"

#: ../../library/http.client.rst:28
msgid ""
"HTTPS support is only available if Python was compiled with SSL support "
"(through the :mod:`ssl` module)."
msgstr ""
"HTTPS のサポートは、Python が SSL サポート付きでコンパイルされている場合にの"
"み利用できます (:mod:`ssl` モジュールによって)。"

#: ../../includes/wasm-notavail.rst:3
msgid ":ref:`Availability <availability>`: not WASI."
msgstr ":ref:`利用可能な環境 <availability>`: WASI 以外。"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref:`wasm-"
"availability` for more information."
msgstr ""
"このモジュールは WebAssembly では動作しないか、利用不可です。詳しくは、:ref:"
"`wasm-availability` を見てください。"

#: ../../library/http.client.rst:33
msgid "The module provides the following classes:"
msgstr "このモジュールでは以下のクラスを提供しています:"

#: ../../library/http.client.rst:39
msgid ""
"An :class:`HTTPConnection` instance represents one transaction with an HTTP "
"server.  It should be instantiated by passing it a host and optional port "
"number.  If no port number is passed, the port is extracted from the host "
"string if it has the form ``host:port``, else the default HTTP port (80) is "
"used.  If the optional *timeout* parameter is given, blocking operations "
"(like connection attempts) will timeout after that many seconds (if it is "
"not given, the global default timeout setting is used). The optional "
"*source_address* parameter may be a tuple of a (host, port) to use as the "
"source address the HTTP connection is made from. The optional *blocksize* "
"parameter sets the buffer size in bytes for sending a file-like message body."
msgstr ""
":class:`HTTPConnection` インスタンスは、HTTP サーバとの一回のトランザクション"
"を表現します。\n"
"インスタンスの生成はホスト名とオプションのポート番号を与えることで行いま"
"す。\n"
"ポート番号を指定しなかった場合、ホスト名文字列が ``host:port`` の形式であれ"
"ば、ホスト名からポート番号を抽出し、そうでない場合には標準の HTTP ポート番号 "
"(80) を使います。\n"
"オプションの引数 *timeout* が渡された場合、ブロックする処理 (コネクション接続"
"など) のタイムアウト時間(秒数)として利用されます (渡されなかった場合は、グ"
"ローバルのデフォルトタイムアウト設定が利用されます)。\n"
"オプションの引数 *source_address* を (host, port) という形式のタプルにすると "
"HTTP 接続の接続元アドレスとして使用します。\n"
"オプションの *blocksize* 引数は、送信するファイル類メッセージボディのバッファ"
"サイズをバイト単位で設定します。"

#: ../../library/http.client.rst:51
msgid ""
"For example, the following calls all create instances that connect to the "
"server at the same host and port::"
msgstr ""
"例えば、以下の呼び出しは全て同じサーバの同じポートに接続するインスタンスを生"
"成します::"

#: ../../library/http.client.rst:54
msgid ""
">>> h1 = http.client.HTTPConnection('www.python.org')\n"
">>> h2 = http.client.HTTPConnection('www.python.org:80')\n"
">>> h3 = http.client.HTTPConnection('www.python.org', 80)\n"
">>> h4 = http.client.HTTPConnection('www.python.org', 80, timeout=10)"
msgstr ""

#: ../../library/http.client.rst:59
msgid "*source_address* was added."
msgstr "*source_address* が追加されました。"

#: ../../library/http.client.rst:62
msgid ""
"The  *strict* parameter was removed. HTTP 0.9-style \"Simple Responses\" are "
"no longer supported."
msgstr ""
"*strict* パラメータは廃止されました。HTTP 0.9 の \"シンプルなレスポンス\" の"
"ような形式はもはやサポートされません。"

#: ../../library/http.client.rst:66
msgid "*blocksize* parameter was added."
msgstr "*blocksize* 引数が追加されました。"

#: ../../library/http.client.rst:74
msgid ""
"A subclass of :class:`HTTPConnection` that uses SSL for communication with "
"secure servers.  Default port is ``443``.  If *context* is specified, it "
"must be a :class:`ssl.SSLContext` instance describing the various SSL "
"options."
msgstr ""
":class:`HTTPConnection` のサブクラスはセキュア・サーバとやりとりする為の SSL "
"を使う場合に用います。デフォルトのポート番号は ``443`` です。*context* が指定"
"されれば、それは様々な SSL オプションを記述する :class:`ssl.SSLContext` イン"
"スタンスでなければなりません。"

#: ../../library/http.client.rst:79
msgid "Please read :ref:`ssl-security` for more information on best practices."
msgstr ""
"ベストプラクティスに関するより良い情報が :ref:`ssl-security` にありますのでお"
"読みください。"

#: ../../library/http.client.rst:81
msgid "*source_address*, *context* and *check_hostname* were added."
msgstr "*source_address*、*context* そして *check_hostname* が追加されました。"

#: ../../library/http.client.rst:84
msgid ""
"This class now supports HTTPS virtual hosts if possible (that is, if :const:"
"`ssl.HAS_SNI` is true)."
msgstr ""
"このクラスは現在、可能であれば (つまり :const:`ssl.HAS_SNI` が真の場合) "
"HTTPS のバーチャルホストをサポートしています。"

#: ../../library/http.client.rst:88
msgid ""
"The *strict* parameter was removed. HTTP 0.9-style \"Simple Responses\" are "
"no longer supported."
msgstr ""
"*strict* パラメータは廃止されました。HTTP 0.9 の \"シンプルなレスポンス\" の"
"ような形式はもはやサポートされません。"

#: ../../library/http.client.rst:92
msgid ""
"This class now performs all the necessary certificate and hostname checks by "
"default. To revert to the previous, unverified, behavior :func:`!ssl."
"_create_unverified_context` can be passed to the *context* parameter."
msgstr ""
"このクラスは今や全ての必要な証明書とホスト名の検証をデフォルトで行うようにな"
"りました。 *context* パラメーターに :func:`!ssl._create_unverified_context` "
"を渡すことで、昔の、検証を行わない振る舞いに戻すことができます。"

#: ../../library/http.client.rst:98
msgid ""
"This class now enables TLS 1.3 :attr:`ssl.SSLContext.post_handshake_auth` "
"for the default *context* or when *cert_file* is passed with a custom "
"*context*."
msgstr ""

#: ../../library/http.client.rst:103
msgid ""
"This class now sends an ALPN extension with protocol indicator ``http/1.1`` "
"when no *context* is given. Custom *context* should set ALPN protocols with :"
"meth:`~ssl.SSLContext.set_alpn_protocols`."
msgstr ""

#: ../../library/http.client.rst:108
msgid ""
"The deprecated *key_file*, *cert_file* and *check_hostname* parameters have "
"been removed."
msgstr ""

#: ../../library/http.client.rst:115
msgid ""
"Class whose instances are returned upon successful connection.  Not "
"instantiated directly by user."
msgstr ""
"コネクションに成功したときに、このクラスのインスタンスが返されます。ユーザー"
"から直接利用されることはありません。"

#: ../../library/http.client.rst:118
msgid ""
"The *strict* parameter was removed. HTTP 0.9 style \"Simple Responses\" are "
"no longer supported."
msgstr ""
"*strict* パラメータは廃止されました。HTTP 0.9 の \"シンプルなレスポンス\" の"
"ような形式はもはやサポートされません。"

#: ../../library/http.client.rst:122
msgid "This module provides the following function:"
msgstr "このモジュールは以下の関数を提供します:"

#: ../../library/http.client.rst:126
msgid ""
"Parse the headers from a file pointer *fp* representing a HTTP request/"
"response. The file has to be a :class:`~io.BufferedIOBase` reader (i.e. not "
"text) and must provide a valid :rfc:`2822` style header."
msgstr ""

#: ../../library/http.client.rst:130
msgid ""
"This function returns an instance of :class:`http.client.HTTPMessage` that "
"holds the header fields, but no payload (the same as :attr:`HTTPResponse."
"msg` and :attr:`http.server.BaseHTTPRequestHandler.headers`). After "
"returning, the file pointer *fp* is ready to read the HTTP body."
msgstr ""

#: ../../library/http.client.rst:137
msgid ""
":meth:`parse_headers` does not parse the start-line of a HTTP message; it "
"only parses the ``Name: value`` lines. The file has to be ready to read "
"these field lines, so the first line should already be consumed before "
"calling the function."
msgstr ""

#: ../../library/http.client.rst:142
msgid "The following exceptions are raised as appropriate:"
msgstr "状況に応じて、以下の例外が送出されます:"

#: ../../library/http.client.rst:147
msgid ""
"The base class of the other exceptions in this module.  It is a subclass of :"
"exc:`Exception`."
msgstr ""
"このモジュールにおける他の例外クラスの基底クラスです。 :exc:`Exception` のサ"
"ブクラスです。"

#: ../../library/http.client.rst:153 ../../library/http.client.rst:164
#: ../../library/http.client.rst:169 ../../library/http.client.rst:174
#: ../../library/http.client.rst:179 ../../library/http.client.rst:184
msgid "A subclass of :exc:`HTTPException`."
msgstr ":exc:`HTTPException` サブクラスです。"

#: ../../library/http.client.rst:158
msgid ""
"A subclass of :exc:`HTTPException`, raised if a port is given and is either "
"non-numeric or empty."
msgstr ""
":exc:`HTTPException` のサブクラスです。ポート番号を指定したものの、その値が数"
"字でなかったり空のオブジェクトであった場合に送出されます。"

#: ../../library/http.client.rst:189 ../../library/http.client.rst:194
#: ../../library/http.client.rst:199
msgid "A subclass of :exc:`ImproperConnectionState`."
msgstr ":exc:`ImproperConnectionState` のサブクラスです。"

#: ../../library/http.client.rst:204
msgid ""
"A subclass of :exc:`HTTPException`.  Raised if a server responds with a HTTP "
"status code that we don't understand."
msgstr ""
":exc:`HTTPException` のサブクラスです。サーバが理解できない HTTP 状態コードで"
"応答した場合に送出されます。"

#: ../../library/http.client.rst:210
msgid ""
"A subclass of :exc:`HTTPException`.  Raised if an excessively long line is "
"received in the HTTP protocol from the server."
msgstr ""

#: ../../library/http.client.rst:216
msgid ""
"A subclass of :exc:`ConnectionResetError` and :exc:`BadStatusLine`.  Raised "
"by :meth:`HTTPConnection.getresponse` when the attempt to read the response "
"results in no data read from the connection, indicating that the remote end "
"has closed the connection."
msgstr ""

#: ../../library/http.client.rst:221
msgid "Previously, :exc:`BadStatusLine`\\ ``('')`` was raised."
msgstr ""

#: ../../library/http.client.rst:225
msgid "The constants defined in this module are:"
msgstr "このモジュールで定義されている定数は以下の通りです:"

#: ../../library/http.client.rst:229
msgid "The default port for the HTTP protocol (always ``80``)."
msgstr "HTTP プロトコルの標準のポート (通常は ``80``) です。"

#: ../../library/http.client.rst:233
msgid "The default port for the HTTPS protocol (always ``443``)."
msgstr "HTTPS プロトコルの標準のポート (通常は ``443``) です。"

#: ../../library/http.client.rst:237
msgid "This dictionary maps the HTTP 1.1 status codes to the W3C names."
msgstr ""
"このディクショナリは、HTTP 1.1ステータスコードをW3Cの名前にマップしたもので"
"す。"

#: ../../library/http.client.rst:239
msgid ""
"Example: ``http.client.responses[http.client.NOT_FOUND]`` is ``'Not Found'``."
msgstr ""
"例: ``http.client.responses[http.client.NOT_FOUND]`` は ``'Not Found'`` を示"
"します。"

#: ../../library/http.client.rst:241
msgid ""
"See :ref:`http-status-codes` for a list of HTTP status codes that are "
"available in this module as constants."
msgstr ""

#: ../../library/http.client.rst:248
msgid "HTTPConnection Objects"
msgstr "HTTPConnection オブジェクト"

#: ../../library/http.client.rst:250
msgid ":class:`HTTPConnection` instances have the following methods:"
msgstr ":class:`HTTPConnection` インスタンスには以下のメソッドがあります:"

#: ../../library/http.client.rst:256
msgid ""
"This will send a request to the server using the HTTP request method "
"*method* and the request URI *url*. The provided *url* must be an absolute "
"path to conform with :rfc:`RFC 2616 §5.1.2 <2616#section-5.1.2>` (unless "
"connecting to an HTTP proxy server or using the ``OPTIONS`` or ``CONNECT`` "
"methods)."
msgstr ""

#: ../../library/http.client.rst:262
msgid ""
"If *body* is specified, the specified data is sent after the headers are "
"finished.  It may be a :class:`str`, a :term:`bytes-like object`, an open :"
"term:`file object`, or an iterable of :class:`bytes`.  If *body* is a "
"string, it is encoded as ISO-8859-1, the default for HTTP.  If it is a bytes-"
"like object, the bytes are sent as is.  If it is a :term:`file object`, the "
"contents of the file is sent; this file object should support at least the "
"``read()`` method.  If the file object is an instance of :class:`io."
"TextIOBase`, the data returned by the ``read()`` method will be encoded as "
"ISO-8859-1, otherwise the data returned by ``read()`` is sent as is.  If "
"*body* is an iterable, the elements of the iterable are sent as is until the "
"iterable is exhausted."
msgstr ""

#: ../../library/http.client.rst:274
msgid ""
"The *headers* argument should be a mapping of extra HTTP headers to send "
"with the request. A :rfc:`Host header <2616#section-14.23>` must be provided "
"to conform with :rfc:`RFC 2616 §5.1.2 <2616#section-5.1.2>` (unless "
"connecting to an HTTP proxy server or using the ``OPTIONS`` or ``CONNECT`` "
"methods)."
msgstr ""

#: ../../library/http.client.rst:280
msgid ""
"If *headers* contains neither Content-Length nor Transfer-Encoding, but "
"there is a request body, one of those header fields will be added "
"automatically.  If *body* is ``None``, the Content-Length header is set to "
"``0`` for methods that expect a body (``PUT``, ``POST``, and ``PATCH``).  If "
"*body* is a string or a bytes-like object that is not also a :term:`file "
"<file object>`, the Content-Length header is set to its length.  Any other "
"type of *body* (files and iterables in general) will be chunk-encoded, and "
"the Transfer-Encoding header will automatically be set instead of Content-"
"Length."
msgstr ""

#: ../../library/http.client.rst:292
msgid ""
"The *encode_chunked* argument is only relevant if Transfer-Encoding is "
"specified in *headers*.  If *encode_chunked* is ``False``, the "
"HTTPConnection object assumes that all encoding is handled by the calling "
"code.  If it is ``True``, the body will be chunk-encoded."
msgstr ""

#: ../../library/http.client.rst:297
msgid ""
"For example, to perform a ``GET`` request to ``https://docs.python.org/3/``::"
msgstr ""

#: ../../library/http.client.rst:299
msgid ""
">>> import http.client\n"
">>> host = \"docs.python.org\"\n"
">>> conn = http.client.HTTPSConnection(host)\n"
">>> conn.request(\"GET\", \"/3/\", headers={\"Host\": host})\n"
">>> response = conn.getresponse()\n"
">>> print(response.status, response.reason)\n"
"200 OK"
msgstr ""

#: ../../library/http.client.rst:308
msgid ""
"Chunked transfer encoding has been added to the HTTP protocol version 1.1.  "
"Unless the HTTP server is known to handle HTTP 1.1, the caller must either "
"specify the Content-Length, or must pass a :class:`str` or bytes-like object "
"that is not also a file as the body representation."
msgstr ""

#: ../../library/http.client.rst:314
msgid "*body* can now be an iterable."
msgstr "*body* は iterable オブジェクトとして使用できます。"

#: ../../library/http.client.rst:317
msgid ""
"If neither Content-Length nor Transfer-Encoding are set in *headers*, file "
"and iterable *body* objects are now chunk-encoded. The *encode_chunked* "
"argument was added. No attempt is made to determine the Content-Length for "
"file objects."
msgstr ""

#: ../../library/http.client.rst:326
msgid ""
"Should be called after a request is sent to get the response from the "
"server. Returns an :class:`HTTPResponse` instance."
msgstr ""
"サーバに対して HTTP 要求を送り出した後に呼び出されなければりません。要求に対"
"する応答を取得します。 :class:`HTTPResponse` インスタンスを返します。"

#: ../../library/http.client.rst:331
msgid ""
"Note that you must have read the whole response before you can send a new "
"request to the server."
msgstr ""
"すべての応答を読み込んでからでなければ新しい要求をサーバに送ることはできない"
"ことに注意しましょう。"

#: ../../library/http.client.rst:334
msgid ""
"If a :exc:`ConnectionError` or subclass is raised, the :class:"
"`HTTPConnection` object will be ready to reconnect when a new request is "
"sent."
msgstr ""

#: ../../library/http.client.rst:342
msgid ""
"Set the debugging level.  The default debug level is ``0``, meaning no "
"debugging output is printed.  Any value greater than ``0`` will cause all "
"currently defined debug output to be printed to stdout.  The ``debuglevel`` "
"is passed to any new :class:`HTTPResponse` objects that are created."
msgstr ""

#: ../../library/http.client.rst:352
msgid ""
"Set the host and the port for HTTP Connect Tunnelling. This allows running "
"the connection through a proxy server."
msgstr ""
"HTTP トンネリング接続のホスト名とポート番号を設定します。これによりプロキシ"
"サーバを通しての接続を実行できます。"

#: ../../library/http.client.rst:355
msgid ""
"The *host* and *port* arguments specify the endpoint of the tunneled "
"connection (i.e. the address included in the CONNECT request, *not* the "
"address of the proxy server)."
msgstr ""

#: ../../library/http.client.rst:359
msgid ""
"The *headers* argument should be a mapping of extra HTTP headers to send "
"with the CONNECT request."
msgstr ""

#: ../../library/http.client.rst:362
msgid ""
"As HTTP/1.1 is used for HTTP CONNECT tunnelling request, `as per the RFC "
"<https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.6>`_, a HTTP "
"``Host:`` header must be provided, matching the authority-form of the "
"request target provided as the destination for the CONNECT request. If a "
"HTTP ``Host:`` header is not provided via the headers argument, one is "
"generated and transmitted automatically."
msgstr ""

#: ../../library/http.client.rst:369
msgid ""
"For example, to tunnel through a HTTPS proxy server running locally on port "
"8080, we would pass the address of the proxy to the :class:`HTTPSConnection` "
"constructor, and the address of the host that we eventually want to reach to "
"the :meth:`~HTTPConnection.set_tunnel` method::"
msgstr ""

#: ../../library/http.client.rst:374
msgid ""
">>> import http.client\n"
">>> conn = http.client.HTTPSConnection(\"localhost\", 8080)\n"
">>> conn.set_tunnel(\"www.python.org\")\n"
">>> conn.request(\"HEAD\",\"/index.html\")"
msgstr ""

#: ../../library/http.client.rst:381
msgid ""
"HTTP CONNECT tunnelling requests use protocol HTTP/1.1, upgraded from "
"protocol HTTP/1.0. ``Host:`` HTTP headers are mandatory for HTTP/1.1, so one "
"will be automatically generated and transmitted if not provided in the "
"headers argument."
msgstr ""

#: ../../library/http.client.rst:390
msgid ""
"Returns a dictionary with the headers of the response received from the "
"proxy server to the CONNECT request."
msgstr ""

#: ../../library/http.client.rst:393
msgid "If the CONNECT request was not sent, the method returns ``None``."
msgstr ""

#: ../../library/http.client.rst:400
msgid ""
"Connect to the server specified when the object was created.  By default, "
"this is called automatically when making a request if the client does not "
"already have a connection."
msgstr ""

#: ../../library/http.client.rst:404
msgid ""
"Raises an :ref:`auditing event <auditing>` ``http.client.connect`` with "
"arguments ``self``, ``host``, ``port``."
msgstr ""

#: ../../library/http.client.rst:409
msgid "Close the connection to the server."
msgstr "サーバへの接続を閉じます。"

#: ../../library/http.client.rst:414
msgid "Buffer size in bytes for sending a file-like message body."
msgstr ""

#: ../../library/http.client.rst:419
msgid ""
"As an alternative to using the :meth:`~HTTPConnection.request` method "
"described above, you can also send your request step by step, by using the "
"four functions below."
msgstr ""

#: ../../library/http.client.rst:426
msgid ""
"This should be the first call after the connection to the server has been "
"made. It sends a line to the server consisting of the *method* string, the "
"*url* string, and the HTTP version (``HTTP/1.1``).  To disable automatic "
"sending of ``Host:`` or ``Accept-Encoding:`` headers (for example to accept "
"additional content encodings), specify *skip_host* or *skip_accept_encoding* "
"with non-False values."
msgstr ""
"サーバへの接続が確立したら、最初にこのメソッドを呼び出さなくてはなりません。"
"このメソッドは *method* 文字列、*url* 文字列、そして HTTP バージョン "
"(``HTTP/1.1``) からなる一行を送信します。``Host:`` や ``Accept-Encoding:`` "
"ヘッダの自動送信を無効にしたい場合 (例えば別のコンテンツエンコーディングを受"
"け入れたい場合) には、*skip_host* や *skip_accept_encoding* を偽でない値に設"
"定してください。"

#: ../../library/http.client.rst:436
msgid ""
"Send an :rfc:`822`\\ -style header to the server.  It sends a line to the "
"server consisting of the header, a colon and a space, and the first "
"argument.  If more arguments are given, continuation lines are sent, each "
"consisting of a tab and an argument."
msgstr ""
":rfc:`822` 形式のヘッダをサーバに送ります。この処理では、 *header* 、コロンと"
"スペース、そして最初の引数からなる 1 行をサーバに送ります。追加の引数を指定し"
"た場合、継続して各行にタブ一つと引数の入った引数行が送信されます。"

#: ../../library/http.client.rst:444
msgid ""
"Send a blank line to the server, signalling the end of the headers. The "
"optional *message_body* argument can be used to pass a message body "
"associated with the request."
msgstr ""
"サーバに空行を送り、ヘッダ部が終了したことを通知します。オプションの "
"*message_body* 引数を、リクエストに関連したメッセージボディを渡すのに使うこと"
"が出来ます。"

#: ../../library/http.client.rst:448
msgid ""
"If *encode_chunked* is ``True``, the result of each iteration of "
"*message_body* will be chunk-encoded as specified in :rfc:`7230`, Section "
"3.3.1.  How the data is encoded is dependent on the type of *message_body*.  "
"If *message_body* implements the :ref:`buffer interface <bufferobjects>` the "
"encoding will result in a single chunk. If *message_body* is a :class:"
"`collections.abc.Iterable`, each iteration of *message_body* will result in "
"a chunk.  If *message_body* is a :term:`file object`, each call to ``."
"read()`` will result in a chunk. The method automatically signals the end of "
"the chunk-encoded data immediately after *message_body*."
msgstr ""

#: ../../library/http.client.rst:459
msgid ""
"Due to the chunked encoding specification, empty chunks yielded by an "
"iterator body will be ignored by the chunk-encoder. This is to avoid "
"premature termination of the read of the request by the target server due to "
"malformed encoding."
msgstr ""

#: ../../library/http.client.rst:464
msgid "Added chunked encoding support and the *encode_chunked* parameter."
msgstr ""

#: ../../library/http.client.rst:470
msgid ""
"Send data to the server.  This should be used directly only after the :meth:"
"`endheaders` method has been called and before :meth:`getresponse` is called."
msgstr ""
"サーバにデータを送ります。このメソッドは :meth:`endheaders`  が呼び出された直"
"後で、かつ :meth:`getresponse` が呼び出される前に使わなければなりません。"

#: ../../library/http.client.rst:474
msgid ""
"Raises an :ref:`auditing event <auditing>` ``http.client.send`` with "
"arguments ``self``, ``data``."
msgstr ""

#: ../../library/http.client.rst:480
msgid "HTTPResponse Objects"
msgstr "HTTPResponse オブジェクト"

#: ../../library/http.client.rst:482
msgid ""
"An :class:`HTTPResponse` instance wraps the HTTP response from the server.  "
"It provides access to the request headers and the entity body.  The response "
"is an iterable object and can be used in a with statement."
msgstr ""
":class:`HTTPResponse` インスタンスはサーバからのHTTPレスポンスをラップしま"
"す。これを使用してリクエストヘッダとエンティティボディへアクセスすることがで"
"きます。レスポンスはイテレート可能なオブジェクトであり、また with文と使うこと"
"も可能です。"

#: ../../library/http.client.rst:487
msgid ""
"The :class:`io.BufferedIOBase` interface is now implemented and all of its "
"reader operations are supported."
msgstr ""

#: ../../library/http.client.rst:494
msgid "Reads and returns the response body, or up to the next *amt* bytes."
msgstr "応答の本体全体か、*amt* バイトまで読み出して返します。"

#: ../../library/http.client.rst:498
msgid ""
"Reads up to the next len(b) bytes of the response body into the buffer *b*. "
"Returns the number of bytes read."
msgstr ""
"バッファ *b* にレスポンスボディの次のデータを最大 len(b) バイト読み込みます。"
"何バイト読んだかを返します。"

#: ../../library/http.client.rst:505
msgid ""
"Return the value of the header *name*, or *default* if there is no header "
"matching *name*.  If there is more than one  header with the name *name*, "
"return all of the values joined by ', '.  If *default* is any iterable other "
"than a single string, its elements are similarly returned joined by commas."
msgstr ""

#: ../../library/http.client.rst:512
msgid "Return a list of (header, value) tuples."
msgstr "(header, value) のタプルからなるリストを返します。"

#: ../../library/http.client.rst:516
msgid "Return the ``fileno`` of the underlying socket."
msgstr "ソケットの ``fileno`` を返します。"

#: ../../library/http.client.rst:520
msgid ""
"A :class:`http.client.HTTPMessage` instance containing the response "
"headers.  :class:`http.client.HTTPMessage` is a subclass of :class:`email."
"message.Message`."
msgstr ""

#: ../../library/http.client.rst:526
msgid ""
"HTTP protocol version used by server.  10 for HTTP/1.0, 11 for HTTP/1.1."
msgstr ""
"サーバが使用した HTTP プロトコルバージョンです。10 は HTTP/1.0 を、11 は "
"HTTP/1.1 を表します。"

#: ../../library/http.client.rst:530
msgid ""
"URL of the resource retrieved, commonly used to determine if a redirect was "
"followed."
msgstr ""
"取得されたリソースの URL、主にリダイレクトが発生したかどうかを確認するために"
"利用します。"

#: ../../library/http.client.rst:534
msgid ""
"Headers of the response in the form of an :class:`email.message."
"EmailMessage` instance."
msgstr ""

#: ../../library/http.client.rst:538
msgid "Status code returned by server."
msgstr "サーバから返される状態コードです。"

#: ../../library/http.client.rst:542
msgid "Reason phrase returned by server."
msgstr "サーバから返される応答の理由文です。"

#: ../../library/http.client.rst:546
msgid ""
"A debugging hook.  If :attr:`debuglevel` is greater than zero, messages will "
"be printed to stdout as the response is read and parsed."
msgstr ""

#: ../../library/http.client.rst:551
msgid "Is ``True`` if the stream is closed."
msgstr "ストリームが閉じている場合 ``True`` となります。"

#: ../../library/http.client.rst:555
msgid "Deprecated in favor of :attr:`~HTTPResponse.url`."
msgstr "非推奨となったので :attr:`~HTTPResponse.url` を使用してください。"

#: ../../library/http.client.rst:560
msgid "Deprecated in favor of :attr:`~HTTPResponse.headers`."
msgstr "非推奨となったので :attr:`~HTTPResponse.headers` を使用してください。"

#: ../../library/http.client.rst:565
msgid "Deprecated in favor of :attr:`~HTTPResponse.status`."
msgstr "非推奨となったので :attr:`~HTTPResponse.status` を使用してください。"

#: ../../library/http.client.rst:569
msgid "Examples"
msgstr "使用例"

#: ../../library/http.client.rst:571
msgid "Here is an example session that uses the ``GET`` method::"
msgstr "以下は ``GET`` リクエストの送信方法を示した例です::"

#: ../../library/http.client.rst:573
msgid ""
">>> import http.client\n"
">>> conn = http.client.HTTPSConnection(\"www.python.org\")\n"
">>> conn.request(\"GET\", \"/\")\n"
">>> r1 = conn.getresponse()\n"
">>> print(r1.status, r1.reason)\n"
"200 OK\n"
">>> data1 = r1.read()  # This will return entire content.\n"
">>> # The following example demonstrates reading data in chunks.\n"
">>> conn.request(\"GET\", \"/\")\n"
">>> r1 = conn.getresponse()\n"
">>> while chunk := r1.read(200):\n"
"...     print(repr(chunk))\n"
"b'<!doctype html>\\n<!--[if\"...\n"
"...\n"
">>> # Example of an invalid request\n"
">>> conn = http.client.HTTPSConnection(\"docs.python.org\")\n"
">>> conn.request(\"GET\", \"/parrot.spam\")\n"
">>> r2 = conn.getresponse()\n"
">>> print(r2.status, r2.reason)\n"
"404 Not Found\n"
">>> data2 = r2.read()\n"
">>> conn.close()"
msgstr ""

#: ../../library/http.client.rst:596
msgid ""
"Here is an example session that uses the ``HEAD`` method.  Note that the "
"``HEAD`` method never returns any data. ::"
msgstr ""
"次の例のセッションでは、``HEAD`` メソッドを利用しています。``HEAD`` メソッド"
"は全くデータを返さないことに注目してください。 ::"

#: ../../library/http.client.rst:599
msgid ""
">>> import http.client\n"
">>> conn = http.client.HTTPSConnection(\"www.python.org\")\n"
">>> conn.request(\"HEAD\", \"/\")\n"
">>> res = conn.getresponse()\n"
">>> print(res.status, res.reason)\n"
"200 OK\n"
">>> data = res.read()\n"
">>> print(len(data))\n"
"0\n"
">>> data == b''\n"
"True"
msgstr ""

#: ../../library/http.client.rst:611
msgid "Here is an example session that uses the ``POST`` method::"
msgstr ""

#: ../../library/http.client.rst:613
msgid ""
">>> import http.client, urllib.parse\n"
">>> params = urllib.parse.urlencode({'@number': 12524, '@type': 'issue', "
"'@action': 'show'})\n"
">>> headers = {\"Content-type\": \"application/x-www-form-urlencoded\",\n"
"...            \"Accept\": \"text/plain\"}\n"
">>> conn = http.client.HTTPConnection(\"bugs.python.org\")\n"
">>> conn.request(\"POST\", \"\", params, headers)\n"
">>> response = conn.getresponse()\n"
">>> print(response.status, response.reason)\n"
"302 Found\n"
">>> data = response.read()\n"
">>> data\n"
"b'Redirecting to <a href=\"https://bugs.python.org/issue12524\">https://bugs."
"python.org/issue12524</a>'\n"
">>> conn.close()"
msgstr ""

#: ../../library/http.client.rst:627
msgid ""
"Client side HTTP ``PUT`` requests are very similar to ``POST`` requests. The "
"difference lies only on the server side where HTTP servers will allow "
"resources to be created via ``PUT`` requests. It should be noted that custom "
"HTTP methods are also handled in :class:`urllib.request.Request` by setting "
"the appropriate method attribute. Here is an example session that uses the "
"``PUT`` method::"
msgstr ""

#: ../../library/http.client.rst:633
msgid ""
">>> # This creates an HTTP request\n"
">>> # with the content of BODY as the enclosed representation\n"
">>> # for the resource http://localhost:8080/file\n"
"...\n"
">>> import http.client\n"
">>> BODY = \"***filecontents***\"\n"
">>> conn = http.client.HTTPConnection(\"localhost\", 8080)\n"
">>> conn.request(\"PUT\", \"/file\", BODY)\n"
">>> response = conn.getresponse()\n"
">>> print(response.status, response.reason)\n"
"200, OK"
msgstr ""

#: ../../library/http.client.rst:648
msgid "HTTPMessage Objects"
msgstr "HTTPMessage オブジェクト"

#: ../../library/http.client.rst:652
msgid ""
"An :class:`http.client.HTTPMessage` instance holds the headers from an HTTP "
"response.  It is implemented using the :class:`email.message.Message` class."
msgstr ""
":class:`http.client.HTTPMessage` のインスタンスは HTTP レスポンスヘッダを格納"
"します。 :class:`email.message.Message` クラスを利用して実装されています。"

#: ../../library/http.client.rst:9
msgid "HTTP"
msgstr "HTTP"

#: ../../library/http.client.rst:9
msgid "protocol"
msgstr "プロトコル"

#: ../../library/http.client.rst:9
msgid "http.client (standard module)"
msgstr "http.client (標準モジュール)"

#: ../../library/http.client.rst:13
msgid "module"
msgstr "module"

#: ../../library/http.client.rst:13
msgid "urllib.request"
msgstr "urllib.request"
