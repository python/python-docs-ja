# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/json.rst:2
msgid ":mod:`json` --- JSON encoder and decoder"
msgstr ":mod:`json` --- JSON エンコーダおよびデコーダ"

#: ../../library/json.rst:10
msgid ""
"`JSON (JavaScript Object Notation) <http://json.org>`_, specified by :rfc:"
"`7159` (which obsoletes :rfc:`4627`) and by `ECMA-404 <http://www.ecma-"
"international.org/publications/standards/Ecma-404.htm>`_, is a lightweight "
"data interchange format inspired by `JavaScript <https://en.wikipedia.org/"
"wiki/JavaScript>`_ object literal syntax (although it is not a strict subset "
"of JavaScript [#rfc-errata]_ )."
msgstr ""
"`JSON (JavaScript Object Notation) <http://json.org>`_ は、 :rfc:`7159` (:"
"rfc:`4627` を obsolete) と `ECMA-404 <http://www.ecma-international.org/"
"publications/standards/Ecma-404.htm>`_ によって定義された軽量のデータ交換用の"
"フォーマットです。 JavaScript のオブジェクトリテラル記法に由来しています "
"(`JavaScript <https://en.wikipedia.org/wiki/JavaScript>`_ の厳密なサブセット"
"ではありませんが [#rfc-errata]_)。"

#: ../../library/json.rst:17
msgid ""
":mod:`json` exposes an API familiar to users of the standard library :mod:"
"`marshal` and :mod:`pickle` modules."
msgstr ""
":mod:`json` の API は標準ライブラリの :mod:`marshal` や :mod:`pickle` のユー"
"ザに馴染み深いものです。"

#: ../../library/json.rst:20
msgid "Encoding basic Python object hierarchies::"
msgstr "基本的な Python オブジェクト階層のエンコーディング::"

#: ../../library/json.rst:39
msgid "Compact encoding::"
msgstr "コンパクトなエンコーディング::"

#: ../../library/json.rst:45
msgid "Pretty printing::"
msgstr "見やすい表示::"

#: ../../library/json.rst:55
msgid "Decoding JSON::"
msgstr "JSON のデコーディング::"

#: ../../library/json.rst:67
msgid "Specializing JSON object decoding::"
msgstr "JSON オブジェクトのデコーディング方法を誂える::"

#: ../../library/json.rst:82
msgid "Extending :class:`JSONEncoder`::"
msgstr ":class:`JSONEncoder` の拡張::"

#: ../../library/json.rst:102
msgid "Using :mod:`json.tool` from the shell to validate and pretty-print::"
msgstr ""
"シェルから  :mod:`json.tool` を使って妥当性チェックをして見やすく表示::"

#: ../../library/json.rst:115
msgid ""
"JSON is a subset of `YAML <http://yaml.org/>`_ 1.2.  The JSON produced by "
"this module's default settings (in particular, the default *separators* "
"value) is also a subset of YAML 1.0 and 1.1.  This module can thus also be "
"used as a YAML serializer."
msgstr ""
"JSON は `YAML <http://yaml.org/>`_ 1.2 のサブセットです。このモジュールのデ"
"フォルト設定 (特に、デフォルトの *セパレータ* 値) で生成される JSON は YAML "
"1.0 および 1.1 のサブセットでもあります。このモジュールは YAML シリアライザと"
"しても使えます。"

#: ../../library/json.rst:122
msgid "Basic Usage"
msgstr "基本的な使い方"

#: ../../library/json.rst:129
msgid ""
"Serialize *obj* as a JSON formatted stream to *fp* (a ``.write()``-"
"supporting :term:`file-like object`) using this :ref:`conversion table <py-"
"to-json-table>`."
msgstr ""
"この :ref:`変換表 <py-to-json-table>` を使って、 *obj* を JSON 形式の *fp* "
"(``.write()`` がサポートされている :term:`file-like object`) へのストリームと"
"して直列化します。"

#: ../../library/json.rst:133
msgid ""
"If *skipkeys* is true (default: ``False``), then dict keys that are not of a "
"basic type (:class:`str`, :class:`unicode`, :class:`int`, :class:`long`, :"
"class:`float`, :class:`bool`, ``None``) will be skipped instead of raising "
"a :exc:`TypeError`."
msgstr ""
"*skipkeys* が真 (デフォルトは ``False``) ならば、基本型 (:class:`str`, :"
"class:`unicode`, :class:`int`, :class:`long`, :class:`float`, :class:`bool`, "
"``None``) 以外の辞書のキーは :exc:`TypeError` を送出せずに読み飛ばされます。"

#: ../../library/json.rst:138
msgid ""
"If *ensure_ascii* is true (the default), all non-ASCII characters in the "
"output are escaped with ``\\uXXXX`` sequences, and the result is a :class:"
"`str` instance consisting of ASCII characters only.  If *ensure_ascii* is "
"false, some chunks written to *fp* may be :class:`unicode` instances.  This "
"usually happens because the input contains unicode strings or the *encoding* "
"parameter is used.  Unless ``fp.write()`` explicitly understands :class:"
"`unicode` (as in :func:`codecs.getwriter`) this is likely to cause an error."
msgstr ""
"*ensure_ascii* が真 (これがデフォルトです) ならば全ての非 ASCII 文字は出力に"
"おいて ``\\uXXXX`` エスケープされて、結果は ASCII 文字のみからなる :class:"
"`str` インスタンスになります。 *ensure_ascii* が偽の場合、 *fp* へ書き込まれ"
"るチャンクは :class:`unicode` インスタンスになることがあります。これは普通は"
"入力に Unicode 文字列を含むか、 *encoding* パラメータを使う場合に起こりま"
"す。 ``fp.write()`` が (:func:`codecs.getwriter` でのように)  :class:"
"`unicode` であると明示的に理解していない限り、これはエラーを引き起こすかもし"
"れません。"

#: ../../library/json.rst:147
msgid ""
"If *check_circular* is false (default: ``True``), then the circular "
"reference check for container types will be skipped and a circular reference "
"will result in an :exc:`OverflowError` (or worse)."
msgstr ""
"*check_circular* が false (デフォルトは ``True``) ならば、コンテナ型の循環参"
"照チェックが省かれ、循環参照があれば :exc:`OverflowError` (またはもっと悪い結"
"果) に終わります。"

#: ../../library/json.rst:151
msgid ""
"If *allow_nan* is false (default: ``True``), then it will be a :exc:"
"`ValueError` to serialize out of range :class:`float` values (``nan``, "
"``inf``, ``-inf``) in strict compliance of the JSON specification. If "
"*allow_nan* is true, their JavaScript equivalents (``NaN``, ``Infinity``, ``-"
"Infinity``) will be used."
msgstr ""
"*allow_nan* が偽 (デフォルトは ``True``) の場合、許容範囲外の :class:`float` "
"値 (``nan``, ``inf``, ``-inf``) を JSON 仕様を厳格に守って 直列化すると、:"
"exc:`ValueError` になります。\n"
"*allow_non* が真の場合は、 JavaScript での等価なもの (``NaN``, ``Infinity``, "
"``-Infinity``) が使われます。"

#: ../../library/json.rst:157
msgid ""
"If *indent* is a non-negative integer, then JSON array elements and object "
"members will be pretty-printed with that indent level.  An indent level of "
"0, or negative, will only insert newlines.  ``None`` (the default) selects "
"the most compact representation."
msgstr ""
"*indent* が非負の整数であれば、JSON の配列要素とオブジェクトメンバはそのイン"
"デントレベルで見やすく表示されます。インデントレベルが 0 か負であれば改行だけ"
"が挿入されます。 ``None`` (デフォルト) では最もコンパクトな表現が選択されま"
"す。"

#: ../../library/json.rst:164 ../../library/json.rst:438
msgid ""
"Since the default item separator is ``', '``,  the output might include "
"trailing whitespace when *indent* is specified.  You can use "
"``separators=(',', ': ')`` to avoid this."
msgstr ""
"デフォルトの要素のセパレータが ``', '`` なので、 *indent* が指定されたときは"
"出力の末尾に空白文字が付くかもしれません。\n"
"これを避けるために ``separators=(',', ': ')`` が使えます。"

#: ../../library/json.rst:168 ../../library/json.rst:442
msgid ""
"If specified, *separators* should be an ``(item_separator, key_separator)`` "
"tuple.  By default, ``(', ', ': ')`` are used.  To get the most compact JSON "
"representation, you should specify ``(',', ':')`` to eliminate whitespace."
msgstr ""
"*separators* を指定する場合は、 ``(item_separator, key_separator)`` というタ"
"プルでなければなりません。\n"
"デフォルトでは ``(', ', ': ')`` が使われます。\n"
"最もコンパクトな JSON の表現を得たければ空白を削った ``(',', ':')`` を指定す"
"ればいいでしょう。"

#: ../../library/json.rst:172
msgid ""
"*encoding* is the character encoding for str instances, default is UTF-8."
msgstr "*encoding* は文字列のエンコーディングで、デフォルトは UTF-8 です。"

#: ../../library/json.rst:174 ../../library/json.rst:446
msgid ""
"If specified, *default* should be a function that gets called for objects "
"that can't otherwise be serialized.  It should return a JSON encodable "
"version of the object or raise a :exc:`TypeError`.  If not specified, :exc:"
"`TypeError` is raised."
msgstr ""
"*default* を指定する場合は関数を指定して、この関数はそれ以外では直列化できな"
"いオブジェクトに対して呼び出されます。\n"
"その関数は、オブジェクトを JSON でエンコードできるバージョンにして返すか、さ"
"もなければ :exc:`TypeError` を送出しなければなりません。\n"
"指定しない場合は、 :exc:`TypeError` が送出されます。"

#: ../../library/json.rst:179
msgid ""
"If *sort_keys* is true (default: ``False``), then the output of dictionaries "
"will be sorted by key."
msgstr ""
"*sort_keys* が true (デフォルトでは ``False`` です)であれば、辞書の出力がキー"
"でソートされます。"

#: ../../library/json.rst:182
msgid ""
"To use a custom :class:`JSONEncoder` subclass (e.g. one that overrides the :"
"meth:`default` method to serialize additional types), specify it with the "
"*cls* kwarg; otherwise :class:`JSONEncoder` is used."
msgstr ""
"カスタマイズされた :class:`JSONEncoder` のサブクラス (たとえば追加の型を直列"
"化するように :meth:`default` メソッドをオーバーライドしたもの) を使うには、 "
"*cls* キーワード引数に指定します; 指定しなければ :class:`JSONEncoder` が使わ"
"れます。"

#: ../../library/json.rst:188
msgid ""
"Unlike :mod:`pickle` and :mod:`marshal`, JSON is not a framed protocol so "
"trying to serialize more objects with repeated calls to :func:`dump` and the "
"same *fp* will result in an invalid JSON file."
msgstr ""
":mod:`pickle` や :mod:`marshal` と違って、JSON はフレーム付きのプロトコル "
"(framed protocol) ではないので、同じ *fp* に対して繰り返し :func:`dump` を呼"
"び、たくさんのオブジェクトを直列化しようとすると、不正な JSON ファイルが作ら"
"れてしまいます。"

#: ../../library/json.rst:197
msgid ""
"Serialize *obj* to a JSON formatted :class:`str` using this :ref:`conversion "
"table <py-to-json-table>`.  If *ensure_ascii* is false, the result may "
"contain non-ASCII characters and the return value may be a :class:`unicode` "
"instance."
msgstr ""
"この :ref:`変換表 <py-to-json-table>` を使って、 *obj* を JSON 形式の :class:"
"`str` オブジェクトに直列化します。\n"
"*ensure_ascii* が偽の場合は、結果は非 ASCII を含むかもしれず、戻り値が :"
"class:`unicode` のインスタンスになることがあります。"

#: ../../library/json.rst:202
msgid "The arguments have the same meaning as in :func:`dump`."
msgstr "引数は :func:`dump` のものと同じ意味になります。"

#: ../../library/json.rst:206
msgid ""
"Keys in key/value pairs of JSON are always of the type :class:`str`. When a "
"dictionary is converted into JSON, all the keys of the dictionary are "
"coerced to strings. As a result of this, if a dictionary is converted into "
"JSON and then back into a dictionary, the dictionary may not equal the "
"original one. That is, ``loads(dumps(x)) != x`` if x has non-string keys."
msgstr ""
"JSON のキー値ペアのキーは、常に :class:`str` 型です。辞書が JSON に変換される"
"とき、辞書の全てのキーは文字列へ強制的に変換が行われます。この結果として、辞"
"書が JSON に変換され、それから辞書に戻された場合、辞書は元のものと同じではあ"
"りません。つまり文字列ではないキーを持っている場合、 ``loads(dumps(x)) != "
"x`` となるということです。"

#: ../../library/json.rst:215
msgid ""
"Deserialize *fp* (a ``.read()``-supporting :term:`file-like object` "
"containing a JSON document) to a Python object using this :ref:`conversion "
"table <json-to-py-table>`."
msgstr ""
"この :ref:`変換表 <json-to-py-table>` を使い、 *fp* (``.read()`` をサポート"
"し JSON ドキュメントを含んでいる :term:`file-like object`) を Python オブジェ"
"クトへ脱直列化します。"

#: ../../library/json.rst:219
msgid ""
"If the contents of *fp* are encoded with an ASCII based encoding other than "
"UTF-8 (e.g. latin-1), then an appropriate *encoding* name must be specified. "
"Encodings that are not ASCII based (such as UCS-2) are not allowed, and "
"should be wrapped with ``codecs.getreader(encoding)(fp)``, or simply decoded "
"to a :class:`unicode` object and passed to :func:`loads`."
msgstr ""
"*fp* の内容が ASCII に基づいたしかし UTF-8 ではないエンコーディング (たとえ"
"ば latin-1) を使っているならば、適切な *encoding* 名が指定されなければなりま"
"せん。エンコーディングが ASCII に基づかないもの (UCS-2 など) であることは許さ"
"れないので、 ``codecs.getreader(encoding)(fp)`` というように包むか、または単"
"に :class:`unicode` オブジェクトにデコードしたものを :func:`loads` に渡して下"
"さい。"

#: ../../library/json.rst:225
msgid ""
"*object_hook* is an optional function that will be called with the result of "
"any object literal decoded (a :class:`dict`).  The return value of "
"*object_hook* will be used instead of the :class:`dict`.  This feature can "
"be used to implement custom decoders (e.g. `JSON-RPC <http://www.jsonrpc."
"org>`_ class hinting)."
msgstr ""
"*object_hook* はオプションの関数で、任意のオブジェクトリテラルがデコードされ"
"た結果 (:class:`dict`) に対し呼び出されます。 *object_hook* の返り値は :"
"class:`dict` の代わりに使われます。この機能は独自のデコーダ (例えば `JSON-"
"RPC <http://www.jsonrpc.org>`_ クラスヒンティング) を実装するのに使えます。"

#: ../../library/json.rst:231
msgid ""
"*object_pairs_hook* is an optional function that will be called with the "
"result of any object literal decoded with an ordered list of pairs.  The "
"return value of *object_pairs_hook* will be used instead of the :class:"
"`dict`.  This feature can be used to implement custom decoders that rely on "
"the order that the key and value pairs are decoded (for example, :func:"
"`collections.OrderedDict` will remember the order of insertion). If "
"*object_hook* is also defined, the *object_pairs_hook* takes priority."
msgstr ""
"*object_pairs_hook* はオプションで渡す関数で、ペアの順序付きリストのデコード"
"結果に対して呼ばれます。 *object_pairs_hook* の返り値は :class:`dict` の代わ"
"りに使われます。この機能はキーと値のデコードされる順序に依存する独自のデコー"
"ダ (たとえば :func:`collections.OrderedDict` は挿入の順序を記憶します) を実装"
"するのに使えます。 *object_hook* も定義されている場合は、 "
"*object_pairs_hook* が優先して使用されます。"

#: ../../library/json.rst:239 ../../library/json.rst:333
msgid "Added support for *object_pairs_hook*."
msgstr "*object_pairs_hook* のサポートが追加されました。"

#: ../../library/json.rst:242 ../../library/json.rst:336
msgid ""
"*parse_float*, if specified, will be called with the string of every JSON "
"float to be decoded.  By default, this is equivalent to ``float(num_str)``. "
"This can be used to use another datatype or parser for JSON floats (e.g. :"
"class:`decimal.Decimal`)."
msgstr ""
"*parse_float* は、もし指定されれば、全てのデコードされる JSON の浮動小数点数"
"文字列に対して呼ばれます。デフォルトでは、 ``float(num_str)`` と等価です。こ"
"れは JSON 浮動小数点数に対して他のデータ型やパーサ (たとえば :class:`decimal."
"Decimal`) を使うのに使えます。"

#: ../../library/json.rst:247 ../../library/json.rst:341
msgid ""
"*parse_int*, if specified, will be called with the string of every JSON int "
"to be decoded.  By default, this is equivalent to ``int(num_str)``.  This "
"can be used to use another datatype or parser for JSON integers (e.g. :class:"
"`float`)."
msgstr ""
"*parse_int* は、もし指定されれば、全てのデコードされる JSON の整数文字列に対"
"して呼ばれます。デフォルトでは、 ``int(num_str)`` と等価です。これは JSON 整"
"数に対して他のデータ型やパーサ (たとえば :class:`float`) を使うのに使えます。"

#: ../../library/json.rst:252 ../../library/json.rst:346
msgid ""
"*parse_constant*, if specified, will be called with one of the following "
"strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``. This can be used to "
"raise an exception if invalid JSON numbers are encountered."
msgstr ""
"*parse_constant* は、もし指定されれば、次の文字列に対して呼ばれます: ``'-"
"Infinity'``, ``'Infinity'``, ``'NaN'``, ``'null'``, ``'true'``, ``'false'``。"
"これは不正な JSON 数値に遭遇したときに例外を送出するのに使えます。"

#: ../../library/json.rst:257
msgid "*parse_constant* doesn't get called on 'null', 'true', 'false' anymore."
msgstr "'null', 'true', 'false' に対して *parse_constant* は呼びされません。"

#: ../../library/json.rst:260
msgid ""
"To use a custom :class:`JSONDecoder` subclass, specify it with the ``cls`` "
"kwarg; otherwise :class:`JSONDecoder` is used.  Additional keyword arguments "
"will be passed to the constructor of the class."
msgstr ""
"カスタマイズされた :class:`JSONDecoder` のサブクラスを使うには、 *cls* キー"
"ワード引数に指定します; 指定しなかった場合は :class:`JSONDecoder` が使われま"
"す。追加のキーワード引数はこのクラスのコンストラクタに引き渡されます。"

#: ../../library/json.rst:267
msgid ""
"Deserialize *s* (a :class:`str` or :class:`unicode` instance containing a "
"JSON document) to a Python object using this :ref:`conversion table <json-to-"
"py-table>`."
msgstr ""
"この :ref:`変換表 <json-to-py-table>` を使い、 *s* (JSON ドキュメントを含んで"
"いる :class:`str` または :class:`unicode` のインスタンス) を Python オブジェ"
"クトへ脱直列化します。"

#: ../../library/json.rst:271
msgid ""
"If *s* is a :class:`str` instance and is encoded with an ASCII based "
"encoding other than UTF-8 (e.g. latin-1), then an appropriate *encoding* "
"name must be specified.  Encodings that are not ASCII based (such as UCS-2) "
"are not allowed and should be decoded to :class:`unicode` first."
msgstr ""
"*s* が ASCII に基づいたしかし UTF-8 ではないエンコーディング (たとえば "
"latin-1) でエンコードされた :class:`str` ならば、適切な *encoding* 名が指定さ"
"れなければなりません。エンコーディングが ASCII に基づかないもの (UCS-2 など) "
"であることは許されないので、まず :class:`unicode` にデコードして下さい。"

#: ../../library/json.rst:276
msgid "The other arguments have the same meaning as in :func:`load`."
msgstr "その他の引数は :func:`load` のものと同じ意味です。"

#: ../../library/json.rst:280
msgid "Encoders and Decoders"
msgstr "エンコーダとデコーダ"

#: ../../library/json.rst:284
msgid "Simple JSON decoder."
msgstr "単純な JSON デコーダ。"

#: ../../library/json.rst:286
msgid "Performs the following translations in decoding by default:"
msgstr "デフォルトではデコーディングの際、以下の変換を行います:"

#: ../../library/json.rst:291 ../../library/json.rst:383
msgid "JSON"
msgstr "JSON"

#: ../../library/json.rst:291 ../../library/json.rst:383
msgid "Python"
msgstr "Python"

#: ../../library/json.rst:293 ../../library/json.rst:385
msgid "object"
msgstr "object"

#: ../../library/json.rst:293 ../../library/json.rst:385
msgid "dict"
msgstr "dict"

#: ../../library/json.rst:295 ../../library/json.rst:387
msgid "array"
msgstr "array"

#: ../../library/json.rst:295
msgid "list"
msgstr "list"

#: ../../library/json.rst:297 ../../library/json.rst:389
msgid "string"
msgstr "string"

#: ../../library/json.rst:297
msgid "unicode"
msgstr "unicode"

#: ../../library/json.rst:299
msgid "number (int)"
msgstr "number (int)"

#: ../../library/json.rst:299
msgid "int, long"
msgstr "int, long"

#: ../../library/json.rst:301
msgid "number (real)"
msgstr "number (real)"

#: ../../library/json.rst:301
msgid "float"
msgstr "float"

#: ../../library/json.rst:303 ../../library/json.rst:393
msgid "true"
msgstr "true"

#: ../../library/json.rst:303 ../../library/json.rst:393
msgid "True"
msgstr "True"

#: ../../library/json.rst:305 ../../library/json.rst:395
msgid "false"
msgstr "false"

#: ../../library/json.rst:305 ../../library/json.rst:395
msgid "False"
msgstr "False"

#: ../../library/json.rst:307 ../../library/json.rst:397
msgid "null"
msgstr "null"

#: ../../library/json.rst:307 ../../library/json.rst:397
msgid "None"
msgstr "None"

#: ../../library/json.rst:310
msgid ""
"It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as their "
"corresponding ``float`` values, which is outside the JSON spec."
msgstr ""
"また、このデコーダは ``NaN``, ``Infinity``, ``-Infinity`` を対応する "
"``float`` の値として、JSON の仕様からは外れますが、理解します。"

#: ../../library/json.rst:313
msgid ""
"*encoding* determines the encoding used to interpret any :class:`str` "
"objects decoded by this instance (UTF-8 by default).  It has no effect when "
"decoding :class:`unicode` objects."
msgstr ""
"*encoding* はこのインスタンスでデコードされる :class:`str` オブジェクトを解釈"
"するために使われるエンコーディング (デフォルトは UTF-8) を定めます。 :class:"
"`unicode` オブジェクトのデコーディングには影響を与えません。"

#: ../../library/json.rst:317
msgid ""
"Note that currently only encodings that are a superset of ASCII work, "
"strings of other encodings should be passed in as :class:`unicode`."
msgstr ""
"注意して欲しいのは現状では ASCII のスーパーセットであるようなエンコーディング"
"だけうまく動くということです。他のエンコーディングの文字列は :class:"
"`unicode` にして渡して下さい。"

#: ../../library/json.rst:320
msgid ""
"*object_hook*, if specified, will be called with the result of every JSON "
"object decoded and its return value will be used in place of the given :"
"class:`dict`.  This can be used to provide custom deserializations (e.g. to "
"support JSON-RPC class hinting)."
msgstr ""
"*object_hook* は、もし指定されれば、全てのデコードされた JSON オブジェクトに"
"対して呼ばれその返値は与えられた :class:`dict` の代わりに使われます。この機能"
"は独自の脱直列化 (たとえば JSON-RPC クラスヒンティングをサポートするような) "
"を提供するのに使えます。"

#: ../../library/json.rst:325
msgid ""
"*object_pairs_hook*, if specified will be called with the result of every "
"JSON object decoded with an ordered list of pairs.  The return value of "
"*object_pairs_hook* will be used instead of the :class:`dict`.  This feature "
"can be used to implement custom decoders that rely on the order that the key "
"and value pairs are decoded (for example, :func:`collections.OrderedDict` "
"will remember the order of insertion). If *object_hook* is also defined, the "
"*object_pairs_hook* takes priority."
msgstr ""
"*object_pairs_hook* は、もし指定されれば、全てのペアの順序付きリストにデコー"
"ドされた JSON オブジェクトに対して呼ばれます。 *object_pairs_hook* の返り値"
"は :class:`dict` の代わりに使われます。この機能はキーと値のデコードされる順序"
"に依存する独自のデコーダ (たとえば :func:`collections.OrderedDict` は挿入の順"
"序を記憶します) を実装するのに使えます。 *object_hook* も定義されている場合"
"は、 *object_pairs_hook* が優先して使用されます。"

#: ../../library/json.rst:351
msgid ""
"If *strict* is false (``True`` is the default), then control characters will "
"be allowed inside strings.  Control characters in this context are those "
"with character codes in the 0--31 range, including ``'\\t'`` (tab), "
"``'\\n'``, ``'\\r'`` and ``'\\0'``."
msgstr ""
"*strict* が false (デフォルトは ``True``) の場合、制御文字を文字列に含めるこ"
"とができます。ここで言う制御文字とは、``'\\t'`` (タブ)、``'\\n'``、"
"``'\\r'``、``'\\0'`` を含む 0-31 の範囲のコードを持つ文字のことです。"

#: ../../library/json.rst:356
msgid ""
"If the data being deserialized is not a valid JSON document, a :exc:"
"`ValueError` will be raised."
msgstr ""
"脱直列化しようとしているデータが不正な JSON ドキュメントだった場合、 :exc:"
"`ValueError` が送出されます。"

#: ../../library/json.rst:361
msgid ""
"Return the Python representation of *s* (a :class:`str` or :class:`unicode` "
"instance containing a JSON document)."
msgstr ""
"*s* (:class:`str` または :class:`unicode` インスタンスで JSON 文書を含むも"
"の) の Python 表現を返します。"

#: ../../library/json.rst:366
msgid ""
"Decode a JSON document from *s* (a :class:`str` or :class:`unicode` "
"beginning with a JSON document) and return a 2-tuple of the Python "
"representation and the index in *s* where the document ended."
msgstr ""
"*s* (:class:`str` または :class:`unicode` インスタンスで JSON 文書で始まるも"
"の) から JSON 文書をデコードし、Python 表現と *s* の文書の終わるところのイン"
"デックスからなる 2 要素のタプルを返します。"

#: ../../library/json.rst:370
msgid ""
"This can be used to decode a JSON document from a string that may have "
"extraneous data at the end."
msgstr ""
"このメソッドは後ろに余分なデータを従えた文字列から JSON 文書をデコードするの"
"に使えます。"

#: ../../library/json.rst:376
msgid "Extensible JSON encoder for Python data structures."
msgstr "Python データ構造に対する拡張可能な JSON エンコーダ。"

#: ../../library/json.rst:378
msgid "Supports the following objects and types by default:"
msgstr "デフォルトでは以下のオブジェクトと型をサポートします:"

#: ../../library/json.rst:387
msgid "list, tuple"
msgstr "list, tuple"

#: ../../library/json.rst:389
msgid "str, unicode"
msgstr "str, unicode"

#: ../../library/json.rst:391
msgid "int, long, float"
msgstr "int, long, float"

#: ../../library/json.rst:391
msgid "number"
msgstr "number"

#: ../../library/json.rst:400
msgid ""
"To extend this to recognize other objects, subclass and implement a :meth:"
"`default` method with another method that returns a serializable object for "
"``o`` if possible, otherwise it should call the superclass implementation "
"(to raise :exc:`TypeError`)."
msgstr ""
"このクラスを拡張して他のオブジェクトも認識するようにするには、サブクラスを"
"作って :meth:`default` メソッドを次のように実装します。もう一つ別のメソッドで"
"オブジェクト ``o`` に対する直列化可能なオブジェクトを返すものを呼び出すように"
"します。変換できない時はスーパークラスの実装を (:exc:`TypeError` を送出させる"
"ために) 呼ばなければなりません。"

#: ../../library/json.rst:405
msgid ""
"If *skipkeys* is false (the default), then it is a :exc:`TypeError` to "
"attempt encoding of keys that are not str, int, long, float or ``None``.  If "
"*skipkeys* is true, such items are simply skipped."
msgstr ""
"*skipkeys* が偽 (デフォルト) ならば、str, int, long, float, ``None`` 以外の"
"キーをエンコードする試みは :exc:`TypeError` に終わります。 *skipkeys* が真の"
"場合は、それらのアイテムは単に読み飛ばされます。"

#: ../../library/json.rst:409
msgid ""
"If *ensure_ascii* is true (the default), all non-ASCII characters in the "
"output are escaped with ``\\uXXXX`` sequences, and the results are :class:"
"`str` instances consisting of ASCII characters only. If *ensure_ascii* is "
"false, a result may be a :class:`unicode` instance. This usually happens if "
"the input contains unicode strings or the *encoding* parameter is used."
msgstr ""
"*ensure_ascii* が真 (これがデフォルトです) の場合、全ての非 ASCII 文字は出力"
"において ``\\uXXXX`` エスケープされて、結果は ASCII 文字のみからなる :class:"
"`str` インスタンスになります。\n"
"*ensure_ascii* が偽の場合、 結果は :class:`unicode` インスタンスになることが"
"あります。\n"
"これは普通は入力に Unicode 文字列を含むか、 *encoding* パラメータを使う場合に"
"起こります。"

#: ../../library/json.rst:416
msgid ""
"If *check_circular* is true (the default), then lists, dicts, and custom "
"encoded objects will be checked for circular references during encoding to "
"prevent an infinite recursion (which would cause an :exc:`OverflowError`). "
"Otherwise, no such check takes place."
msgstr ""
"*check_circular* が true (デフォルト) ならば、リスト、辞書および自作でエン"
"コードしたオブジェクトは循環参照がないかエンコード中にチェックされ、無限再帰 "
"(これは :exc:`OverflowError` を引き起こします) を防止します。 ``True`` でない"
"場合は、そういったチェックは施されません。"

#: ../../library/json.rst:421
msgid ""
"If *allow_nan* is true (the default), then ``NaN``, ``Infinity``, and ``-"
"Infinity`` will be encoded as such.  This behavior is not JSON specification "
"compliant, but is consistent with most JavaScript based encoders and "
"decoders.  Otherwise, it will be a :exc:`ValueError` to encode such floats."
msgstr ""
"*allow_nan* が true (デフォルト) ならば、 ``NaN``, ``Infinity``, ``-"
"Infinity`` はそのままエンコードされます。この振る舞いは JSON 仕様に従っていま"
"せんが、大半の JavaScript ベースのエンコーダ、デコーダと矛盾しません。 "
"``True`` でない場合は、そのような浮動小数点数をエンコードすると :exc:"
"`ValueError` が送出されます。"

#: ../../library/json.rst:427
msgid ""
"If *sort_keys* is true (default: ``False``), then the output of dictionaries "
"will be sorted by key; this is useful for regression tests to ensure that "
"JSON serializations can be compared on a day-to-day basis."
msgstr ""
"*sort_keys* が true (デフォルトは ``False``) ならば、辞書の出力がキーでソート"
"されます。これは JSON の直列化がいつでも比較できるようになるので回帰試験の際"
"に便利です。"

#: ../../library/json.rst:431
msgid ""
"If *indent* is a non-negative integer (it is ``None`` by default), then JSON "
"array elements and object members will be pretty-printed with that indent "
"level.  An indent level of 0 will only insert newlines.  ``None`` is the "
"most compact representation."
msgstr ""
"*indent* が非負の整数であれば (デフォルトは ``None`` です)、JSON の配列要素と"
"オブジェクトメンバはそのインデントレベルで見やすく表示されます。インデントレ"
"ベルが 0 であれば 改行だけが挿入されます。``None`` では最もコンパクトな表現が"
"選択されます。"

#: ../../library/json.rst:451
msgid ""
"If *encoding* is not ``None``, then all input strings will be transformed "
"into unicode using that encoding prior to JSON-encoding.  The default is "
"UTF-8."
msgstr ""
"*encoding* が ``None`` でなければ、入力文字列は全て JSON エンコーディングに先"
"立ってこのエンコーディングで Unicode に変換されます。デフォルトは UTF-8 で"
"す。"

#: ../../library/json.rst:458
msgid ""
"Implement this method in a subclass such that it returns a serializable "
"object for *o*, or calls the base implementation (to raise a :exc:"
"`TypeError`)."
msgstr ""
"このメソッドをサブクラスで実装する際には *o* に対して直列化可能なオブジェクト"
"を返すか、基底クラスの実装を (:exc:`TypeError` を送出するために) 呼び出すかし"
"ます。"

#: ../../library/json.rst:462
msgid ""
"For example, to support arbitrary iterators, you could implement default "
"like this::"
msgstr "たとえば、任意のイテレータをサポートするために、次のように実装します::"

#: ../../library/json.rst:478
msgid ""
"Return a JSON string representation of a Python data structure, *o*.  For "
"example::"
msgstr "Python データ構造 *o* の JSON 文字列表現を返します。たとえば::"

#: ../../library/json.rst:487
msgid ""
"Encode the given object, *o*, and yield each string representation as "
"available.  For example::"
msgstr ""
"与えられたオブジェクト *o* をエンコードし、得られた文字列表現ごとに yield し"
"ます。たとえば::"

#: ../../library/json.rst:495
msgid "Standard Compliance and Interoperability"
msgstr "標準への準拠と互換性"

#: ../../library/json.rst:497
msgid ""
"The JSON format is specified by :rfc:`7159` and by `ECMA-404 <http://www."
"ecma-international.org/publications/standards/Ecma-404.htm>`_. This section "
"details this module's level of compliance with the RFC. For simplicity, :"
"class:`JSONEncoder` and :class:`JSONDecoder` subclasses, and parameters "
"other than those explicitly mentioned, are not considered."
msgstr ""
"JSON 形式の仕様は :rfc:`7159` と `ECMA-404 <http://www.ecma-international."
"org/publications/standards/Ecma-404.htm>`_ で規定されています。 この節では、"
"このモジュールの RFC への準拠水準について詳しく述べます。 簡単のために、 :"
"class:`JSONEncoder` および :class:`JSONDecoder` の子クラスと、明示的に触れら"
"れていないパラメータについては考慮しないことにします。"

#: ../../library/json.rst:503
msgid ""
"This module does not comply with the RFC in a strict fashion, implementing "
"some extensions that are valid JavaScript but not valid JSON.  In particular:"
msgstr ""
"このモジュールは、JavaScript では正しいが JSON では不正ないくつかの拡張が実装"
"されているため、厳密な意味では RFC に準拠していません。特に:"

#: ../../library/json.rst:506
msgid "Infinite and NaN number values are accepted and output;"
msgstr "無限および NaN の数値を受け付け、また出力します;"

#: ../../library/json.rst:507
msgid ""
"Repeated names within an object are accepted, and only the value of the last "
"name-value pair is used."
msgstr ""
"あるオブジェクト内での同じ名前の繰り返しを受け付け、最後の名前と値のペアの値"
"のみを使用します。"

#: ../../library/json.rst:510
msgid ""
"Since the RFC permits RFC-compliant parsers to accept input texts that are "
"not RFC-compliant, this module's deserializer is technically RFC-compliant "
"under default settings."
msgstr ""
"この RFC は、RFC 準拠のパーサが RFC 準拠でない入力テキストを受け付けることを"
"許容しているので、このモジュールの脱直列化は技術的に言えば、デフォルトの設定"
"では RFC に準拠しています。"

#: ../../library/json.rst:515
msgid "Character Encodings"
msgstr "文字エンコーディング"

#: ../../library/json.rst:517
msgid ""
"The RFC requires that JSON be represented using either UTF-8, UTF-16, or "
"UTF-32, with UTF-8 being the recommended default for maximum "
"interoperability. Accordingly, this module uses UTF-8 as the default for its "
"*encoding* parameter."
msgstr ""
"RFC は、UTF-8、UTF-16、UTF-32のいずれかでJSONを表現するように要求しており、"
"UTF-8 が最大の互換性を確保するために推奨されるデフォルトです。このため、この"
"モジュールは *encoding* パラメータのデフォルトに UTF-8 を使います。"

#: ../../library/json.rst:521
msgid ""
"This module's deserializer only directly works with ASCII-compatible "
"encodings; UTF-16, UTF-32, and other ASCII-incompatible encodings require "
"the use of workarounds described in the documentation for the deserializer's "
"*encoding* parameter."
msgstr ""
"このモジュールのデシリアライザは直接的には、ASCII 互換のエンコーディングでの"
"み動作します。UTF-16, UTF-32 やほかの ASCII 非互換のエンコーディングには、こ"
"のドキュメント内でデシリアライザの *encoding* パラメータについて説明した回避"
"方法を取る必要があります。"

#: ../../library/json.rst:526
msgid ""
"As permitted, though not required, by the RFC, this module's serializer sets "
"*ensure_ascii=True* by default, thus escaping the output so that the "
"resulting strings only contain ASCII characters."
msgstr ""
"RFC で要求ではなく許可されている通り、このモジュールのシリアライザはデフォル"
"トで *ensure_ascii=True* という設定を用い、従って、結果の文字列が ASCII 文字"
"しか含まないように出力をエスケープします。"

#: ../../library/json.rst:530
msgid ""
"The RFC prohibits adding a byte order mark (BOM) to the start of a JSON "
"text, and this module's serializer does not add a BOM to its output. The RFC "
"permits, but does not require, JSON deserializers to ignore an initial BOM "
"in their input.  This module's deserializer raises a :exc:`ValueError` when "
"an initial BOM is present."
msgstr ""
"RFC は JSON テキストの最初にバイトオーダマーク(BOM)を追加することを禁止してい"
"ますので、このモジュールはその出力に BOM を追加しません。RFC は JSON デシリア"
"ライザが入力の一番最初の BOM を無視することを、許容はしますが求めてはいませ"
"ん。このモジュールのデシリアライザは一番最初の BOM を見つけると :exc:"
"`ValueError` を送出します。"

#: ../../library/json.rst:536
msgid ""
"The RFC does not explicitly forbid JSON strings which contain byte sequences "
"that don't correspond to valid Unicode characters (e.g. unpaired UTF-16 "
"surrogates), but it does note that they may cause interoperability problems. "
"By default, this module accepts and outputs (when present in the original :"
"class:`str`) code points for such sequences."
msgstr ""
"RFC は JSON 文字列に正当な Unicode 文字に対応付かないバイト列(例えばペアにな"
"らない UTF-16 サロゲートのかたわれ)が含まれることを明示的に禁止してはおらず、"
"もちろんこれは相互運用性の問題を引き起こします。デフォルトでは、このモジュー"
"ルは(オリジナルの :class:`str` にある場合)そのようなシーケンスのコードポイン"
"トを受け取り、出力します。"

#: ../../library/json.rst:544
msgid "Infinite and NaN Number Values"
msgstr "無限および NaN の数値"

#: ../../library/json.rst:546
msgid ""
"The RFC does not permit the representation of infinite or NaN number values. "
"Despite that, by default, this module accepts and outputs ``Infinity``, ``-"
"Infinity``, and ``NaN`` as if they were valid JSON number literal values::"
msgstr ""
"RFC は、無限もしくは NaN の数値の表現は許可していません。それにも関わらずデ"
"フォルトでは、このモジュールは ``Infinity``、``-Infinity``、``NaN`` を正しい "
"JSON の数値リテラルの値であるかのように受け付け、出力します::"

#: ../../library/json.rst:561
msgid ""
"In the serializer, the *allow_nan* parameter can be used to alter this "
"behavior.  In the deserializer, the *parse_constant* parameter can be used "
"to alter this behavior."
msgstr ""
"シリアライザでは、この振る舞いを変更するのに *allow_nan* パラメータが使えま"
"す。デシリアライザでは、この振る舞いを変更するのに *parse_constant* パラメー"
"タが使えます。"

#: ../../library/json.rst:567
msgid "Repeated Names Within an Object"
msgstr "オブジェクト中に重複した名前の扱い"

#: ../../library/json.rst:569
msgid ""
"The RFC specifies that the names within a JSON object should be unique, but "
"does not mandate how repeated names in JSON objects should be handled.  By "
"default, this module does not raise an exception; instead, it ignores all "
"but the last name-value pair for a given name::"
msgstr ""
"RFC は JSON オブジェクト中の名前はユニークでなければならないと規定しています"
"が、JSONオブジェクトで名前が繰り返された場合の扱いについて指定していません。"
"デフォルトでは、このモジュールは例外を送出せず、かわりに重複した名前のうち、"
"最後に出現した名前と値のペア以外を無視します。"

#: ../../library/json.rst:578
msgid "The *object_pairs_hook* parameter can be used to alter this behavior."
msgstr "*object_pairs_hook* パラメータでこの動作を変更できます。"

#: ../../library/json.rst:582
msgid "Top-level Non-Object, Non-Array Values"
msgstr "トップレベルの非オブジェクト、非配列の値の扱い"

#: ../../library/json.rst:584
msgid ""
"The old version of JSON specified by the obsolete :rfc:`4627` required that "
"the top-level value of a JSON text must be either a JSON object or array "
"(Python :class:`dict` or :class:`list`), and could not be a JSON null, "
"boolean, number, or string value.  :rfc:`7159` removed that restriction, and "
"this module does not and has never implemented that restriction in either "
"its serializer or its deserializer."
msgstr ""
"廃止された :rfc:`4627` によって規定された古いバージョンの JSON では、JSON テ"
"キストのトップレベルの値は JSON オブジェクトか配列(Python での :class:`dict` "
"か :class:`list`)であることを要求していて、JSON の null, boolean, number, "
"string であることは許されていませんでしたが、この制限は :rfc:`7159` により取"
"り払われました。このモジュールはこの制限を持っていませんし、シリアライザでも"
"デシリアライズでも、一度としてこの制限で実装されたことはありません。"

#: ../../library/json.rst:591
msgid ""
"Regardless, for maximum interoperability, you may wish to voluntarily adhere "
"to the restriction yourself."
msgstr ""
"それにも関わらず、相互運用可能性を最大化したいならば、あなた自身の手で自発的"
"にその制約に忠実に従いたいと思うでしょう。"

#: ../../library/json.rst:596
msgid "Implementation Limitations"
msgstr "実装の制限"

#: ../../library/json.rst:598
msgid "Some JSON deserializer implementations may set limits on:"
msgstr ""
"いくつかの JSON デシリアライザの実装は、以下の制限を設定することがあります。"

#: ../../library/json.rst:600
msgid "the size of accepted JSON texts"
msgstr "受け入れられる JSON テキストのサイズ"

#: ../../library/json.rst:601
msgid "the maximum level of nesting of JSON objects and arrays"
msgstr "JSON オブジェクトと配列のネストの最大の深さ"

#: ../../library/json.rst:602
msgid "the range and precision of JSON numbers"
msgstr "JSON 数値の範囲と精度"

#: ../../library/json.rst:603
msgid "the content and maximum length of JSON strings"
msgstr "JSON 文字列の内容と最大の長さ"

#: ../../library/json.rst:605
msgid ""
"This module does not impose any such limits beyond those of the relevant "
"Python datatypes themselves or the Python interpreter itself."
msgstr ""
"このモジュールは関連する Python データ型や Python インタプリタ自身の制約の世"
"界を超えたそのような制約を強要はしません。"

#: ../../library/json.rst:608
msgid ""
"When serializing to JSON, beware any such limitations in applications that "
"may consume your JSON.  In particular, it is common for JSON numbers to be "
"deserialized into IEEE 754 double precision numbers and thus subject to that "
"representation's range and precision limitations.  This is especially "
"relevant when serializing Python :class:`int` values of extremely large "
"magnitude, or when serializing instances of \"exotic\" numerical types such "
"as :class:`decimal.Decimal`."
msgstr ""
"JSON にシリアライズする際には、あなたの JSON を消費する側のアプリケーションが"
"持つ当該制約に思いを馳せてください。とりわけJSON 数値を IEEE 754 倍精度浮動小"
"数にデシリアライズする際の問題はありがちで、すなわちその有効桁数と精度の制限"
"の影響を受けます。これは、極端に大きな値を持った Python :class:`int` をシリア"
"ライズするとき、あるいは :class:`decimal.Decimal` のような \"風変わりな\" 数"
"値型をシリアライズするとき、に特に関係があります。"

#: ../../library/json.rst:618
msgid "Footnotes"
msgstr "注記"

#: ../../library/json.rst:619
msgid ""
"As noted in `the errata for RFC 7159 <https://www.rfc-editor.org/"
"errata_search.php?rfc=7159>`_, JSON permits literal U+2028 (LINE SEPARATOR) "
"and U+2029 (PARAGRAPH SEPARATOR) characters in strings, whereas JavaScript "
"(as of ECMAScript Edition 5.1) does not."
msgstr ""
"`RFC 7159 正誤表 <https://www.rfc-editor.org/errata_search.php?rfc=7159>`_ で"
"述べられている通り、JSON は (ECMAScript Edition 5.1 の) JavaScript とは逆"
"に、 U+2028 (LINE SEPARATOR) と U+2029 (PARAGRAPH SEPARATOR) が文字列内に含ま"
"れることを許容しています。"
