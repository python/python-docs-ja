# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 03:10+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/dbm.rst:2
msgid ":mod:`dbm` --- Interfaces to Unix \"databases\""
msgstr ":mod:`dbm` --- Unix \"データベース\" へのインタフェース"

#: ../../library/dbm.rst:7
msgid "**Source code:** :source:`Lib/dbm/__init__.py`"
msgstr "**ソースコード:** :source:`Lib/dbm/__init__.py`"

#: ../../library/dbm.rst:11
msgid ""
":mod:`dbm` is a generic interface to variants of the DBM database --- :mod:"
"`dbm.gnu` or :mod:`dbm.ndbm`.  If none of these modules is installed, the "
"slow-but-simple implementation in module :mod:`dbm.dumb` will be used.  "
"There is a `third party interface <https://www.jcea.es/programacion/pybsddb."
"htm>`_ to the Oracle Berkeley DB."
msgstr ""
":mod:`dbm` は DBM データベースのいくつかの種類 ( :mod:`dbm.gnu` または :mod:"
"`dbm.ndbm` ) に対する汎用的なインタフェースです。これらのモジュールのどれもイ"
"ンストールされていなければ、モジュール :mod:`dbm.dumb` に含まれる低速だが単純"
"な実装が使用されます。Oracle Berkeley DB に対する `サードパーティのインタ"
"フェース <https://www.jcea.es/programacion/pybsddb.htm>`_ があります。"

#: ../../library/dbm.rst:20
msgid ""
"A tuple containing the exceptions that can be raised by each of the "
"supported modules, with a unique exception also named :exc:`dbm.error` as "
"the first item --- the latter is used when :exc:`dbm.error` is raised."
msgstr ""
"サポートされているモジュールそれぞれによって送出される可能性のある例外を含む"
"タプル。これにはユニークな例外があり、最初の要素として同じく :exc:`dbm."
"error` という名前の例外が含まれます --- :exc:`dbm.error` が送出される場合、後"
"者(訳注:タプルの ``dbm.error`` ではなく例外 :exc:`dbm.error`)が使用されます。"

#: ../../library/dbm.rst:27
msgid ""
"This function attempts to guess which of the several simple database modules "
"available --- :mod:`dbm.gnu`, :mod:`dbm.ndbm` or :mod:`dbm.dumb` --- should "
"be used to open a given file."
msgstr ""
"この関数は、与えられたファイルを開くために、利用可能ないくつかの単純なデータ"
"ベースモジュール --- :mod:`dbm.gnu`, :mod:`dbm.ndbm`, :mod:`dbm.dumb` --- の"
"どれを使用すべきか推測を試みます。"

#: ../../library/dbm.rst:31
msgid ""
"Returns one of the following values: ``None`` if the file can't be opened "
"because it's unreadable or doesn't exist; the empty string (``''``) if the "
"file's format can't be guessed; or a string containing the required module "
"name, such as ``'dbm.ndbm'`` or ``'dbm.gnu'``."
msgstr ""
"次の値のうち１つを返します: ファイルが読み取れないか存在しないために開くこと"
"ができない場合は ``None``; ファイルのフォーマットを推測することができない場合"
"は空文字列 (``''``); それ以外は ``'dbm.ndbm'`` や ``'dbm.gnu'`` のような、必"
"要なモジュール名を含む文字列。"

#: ../../library/dbm.rst:39
msgid "Open the database file *file* and return a corresponding object."
msgstr "データベースファイル *file* を開いて対応するオブジェクトを返します。"

#: ../../library/dbm.rst:41
msgid ""
"If the database file already exists, the :func:`whichdb` function is used to "
"determine its type and the appropriate module is used; if it does not exist, "
"the first module listed above that can be imported is used."
msgstr ""
"データベースファイルが既に存在する場合、その種類を決定するために  :func:"
"`whichdb` 関数が使用され、適切なモジュールが使用されます; データベースファイ"
"ルが存在しない場合、上記のリストの中でインポート可能な最初のモジュールが使用"
"されます。"

#: ../../library/dbm.rst:45 ../../library/dbm.rst:157
msgid "The optional *flag* argument can be:"
msgstr "オプションの *flag* は:"

#: ../../library/dbm.rst:48 ../../library/dbm.rst:160 ../../library/dbm.rst:179
#: ../../library/dbm.rst:275
msgid "Value"
msgstr "値"

#: ../../library/dbm.rst:48 ../../library/dbm.rst:160 ../../library/dbm.rst:179
#: ../../library/dbm.rst:275
msgid "Meaning"
msgstr "意味"

#: ../../library/dbm.rst:50 ../../library/dbm.rst:162 ../../library/dbm.rst:277
msgid "``'r'``"
msgstr "``'r'``"

#: ../../library/dbm.rst:50 ../../library/dbm.rst:162 ../../library/dbm.rst:277
msgid "Open existing database for reading only (default)"
msgstr "既存のデータベースを読み込み専用で開く (デフォルト)"

#: ../../library/dbm.rst:53 ../../library/dbm.rst:165 ../../library/dbm.rst:280
msgid "``'w'``"
msgstr "``'w'``"

#: ../../library/dbm.rst:53 ../../library/dbm.rst:165 ../../library/dbm.rst:280
msgid "Open existing database for reading and writing"
msgstr "既存のデータベースを読み書き用に開く"

#: ../../library/dbm.rst:56 ../../library/dbm.rst:168 ../../library/dbm.rst:283
msgid "``'c'``"
msgstr "``'c'``"

#: ../../library/dbm.rst:56 ../../library/dbm.rst:168 ../../library/dbm.rst:283
msgid "Open database for reading and writing, creating it if it doesn't exist"
msgstr "データベースを読み書き用に開く。ただし存在しない場合には新たに作成する"

#: ../../library/dbm.rst:59 ../../library/dbm.rst:171 ../../library/dbm.rst:286
msgid "``'n'``"
msgstr "``'n'``"

#: ../../library/dbm.rst:59 ../../library/dbm.rst:171 ../../library/dbm.rst:286
msgid "Always create a new, empty database, open for reading and writing"
msgstr "常に新たに読み書き用の新規のデータベースを作成する"

#: ../../library/dbm.rst:63 ../../library/dbm.rst:290 ../../library/dbm.rst:346
msgid ""
"The optional *mode* argument is the Unix mode of the file, used only when "
"the database has to be created.  It defaults to octal ``0o666`` (and will be "
"modified by the prevailing umask)."
msgstr ""
"オプションの *mode* 引数は、新たにデータベースを作成しなければならない場合に"
"使われる Unix のファイルモードです。標準の値は 8 進数の ``0o666`` です (この"
"値は現在有効な umask で修飾されます)。"

#: ../../library/dbm.rst:68
msgid ""
"The object returned by :func:`.open` supports the same basic functionality "
"as dictionaries; keys and their corresponding values can be stored, "
"retrieved, and deleted, and the :keyword:`in` operator and the :meth:`keys` "
"method are available, as well as :meth:`get` and :meth:`setdefault`."
msgstr ""
":func:`.open` によって返されたオブジェクトは辞書とほとんど同じ機能をサポート"
"します; キーとそれに対応付けられた値を記憶し、取り出し、削除することがで"
"き、 :keyword:`in` 演算子や :meth:`keys` メソッド、また :meth:`get` や :meth:"
"`setdefault` を使うことができます。"

#: ../../library/dbm.rst:73
msgid ""
":meth:`get` and :meth:`setdefault` are now available in all database modules."
msgstr ""
":meth:`get` と :meth:`setdefault` がすべてのデータベースモジュールで利用でき"
"るようになりました。"

#: ../../library/dbm.rst:76
msgid ""
"Key and values are always stored as bytes. This means that when strings are "
"used they are implicitly converted to the default encoding before being "
"stored."
msgstr ""
"キーと値は常に byte 列として格納されます。これは、文字列が使用された場合は格"
"納される前に暗黙的にデフォルトエンコーディングに変換されるということを意味し"
"ます。"

#: ../../library/dbm.rst:80
msgid ""
"These objects also support being used in a :keyword:`with` statement, which "
"will automatically close them when done."
msgstr ""
"これらのオブジェクトは、 :keyword:`with` 文での使用にも対応しています。with "
"文を使用した場合、終了時に自動的に閉じられます。"

#: ../../library/dbm.rst:83
msgid ""
"Added native support for the context management protocol to the objects "
"returned by :func:`.open`."
msgstr ""
":func:`.open` が返すオブジェクトに対するコンテキスト管理のプロトコルがネイ"
"ティブにサポートされました。"

#: ../../library/dbm.rst:87
msgid ""
"The following example records some hostnames and a corresponding title,  and "
"then prints out the contents of the database::"
msgstr ""
"以下の例ではホスト名と対応するタイトルをいくつか記録し、データベースの内容を"
"出力します::"

#: ../../library/dbm.rst:117
msgid "Module :mod:`shelve`"
msgstr ":mod:`shelve` モジュール"

#: ../../library/dbm.rst:118
msgid "Persistence module which stores non-string data."
msgstr "非文字列データを記録する永続化モジュール。"

#: ../../library/dbm.rst:121
msgid "The individual submodules are described in the following sections."
msgstr "個々のサブモジュールは以降の節で説明されます。"

#: ../../library/dbm.rst:125
msgid ":mod:`dbm.gnu` --- GNU's reinterpretation of dbm"
msgstr ":mod:`dbm.gnu` --- GNU による dbm 拡張"

#: ../../library/dbm.rst:131
msgid "**Source code:** :source:`Lib/dbm/gnu.py`"
msgstr "**ソースコード:** :source:`Lib/dbm/gnu.py`"

#: ../../library/dbm.rst:135
msgid ""
"This module is quite similar to the :mod:`dbm` module, but uses the GNU "
"library ``gdbm`` instead to provide some additional functionality.  Please "
"note that the file formats created by :mod:`dbm.gnu` and :mod:`dbm.ndbm` are "
"incompatible."
msgstr ""
"このモジュールは :mod:`dbm` モジュールによく似ていますが、GNU ライブラリ "
"``gdbm`` を使っていくつかの追加機能を提供しています。 :mod:`dbm.gnu` と :mod:"
"`dbm.ndbm` では生成されるファイル形式に互換性がないので注意してください。"

#: ../../library/dbm.rst:139
msgid ""
"The :mod:`dbm.gnu` module provides an interface to the GNU DBM library. "
"``dbm.gnu.gdbm`` objects behave like mappings (dictionaries), except that "
"keys and values are always converted to bytes before storing.  Printing a "
"``gdbm`` object doesn't print the keys and values, and the :meth:`items` "
"and :meth:`values` methods are not supported."
msgstr ""
":mod:`dbm.gnu` モジュールでは GNU DBM ライブラリへのインタフェースを提供しま"
"す。 ``dbm.gnu.gdbm`` オブジェクトはキーと値が必ず保存の前にバイト列に変換さ"
"れることを除き、マップ型 (辞書型) と同じように動作します。 ``gdbm`` オブジェ"
"クトに対して :func:`print` を適用してもキーや値を印字することはなく、 :meth:"
"`items` 及び :meth:`values` メソッドはサポートされていません。"

#: ../../library/dbm.rst:148
msgid ""
"Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"I/O エラーのような :mod:`dbm.gnu` 特有のエラーで送出されます。誤ったキーの指"
"定のように、一般的なマップ型のエラーに対しては :exc:`KeyError` が送出されま"
"す。"

#: ../../library/dbm.rst:154
msgid ""
"Open a ``gdbm`` database and return a :class:`gdbm` object.  The *filename* "
"argument is the name of the database file."
msgstr ""
"``gdbm`` データベースを開いて :class:`gdbm` オブジェクトを返します。 "
"*filename* 引数はデータベースファイルの名前です。"

#: ../../library/dbm.rst:175
msgid ""
"The following additional characters may be appended to the flag to control "
"how the database is opened:"
msgstr ""
"以下の追加の文字を flag に追加して、データベースの開きかたを制御することがで"
"きます:"

#: ../../library/dbm.rst:181
msgid "``'f'``"
msgstr "``'f'``"

#: ../../library/dbm.rst:181
msgid ""
"Open the database in fast mode.  Writes to the database will not be "
"synchronized."
msgstr "データベースを高速モードで開きます。書き込みが同期されません。"

#: ../../library/dbm.rst:184
msgid "``'s'``"
msgstr "``'s'``"

#: ../../library/dbm.rst:184
msgid ""
"Synchronized mode. This will cause changes to the database to be immediately "
"written to the file."
msgstr "同期モード。データベースへの変更がすぐにファイルに書き込まれます。"

#: ../../library/dbm.rst:188
msgid "``'u'``"
msgstr "``'u'``"

#: ../../library/dbm.rst:188
msgid "Do not lock database."
msgstr "データベースをロックしません。"

#: ../../library/dbm.rst:191
msgid ""
"Not all flags are valid for all versions of ``gdbm``.  The module constant :"
"const:`open_flags` is a string of supported flag characters.  The exception :"
"exc:`error` is raised if an invalid flag is specified."
msgstr ""
"全てのバージョンの ``gdbm`` で全てのフラグが有効とは限りません。モジュール定"
"数 :const:`open_flags` はサポートされているフラグ文字からなる文字列です。無効"
"なフラグが指定された場合、例外 :exc:`error` が送出されます。"

#: ../../library/dbm.rst:195
msgid ""
"The optional *mode* argument is the Unix mode of the file, used only when "
"the database has to be created.  It defaults to octal ``0o666``."
msgstr ""
"オプションの *mode* 引数は、新たにデータベースを作成しなければならない場合に"
"使われる Unix のファイルモードです。標準の値は 8 進数の ``0o666`` です。"

#: ../../library/dbm.rst:198
msgid ""
"In addition to the dictionary-like methods, ``gdbm`` objects have the "
"following methods:"
msgstr ""
"辞書型形式のメソッドに加えて、``gdbm`` オブジェクトには以下のメソッドがありま"
"す:"

#: ../../library/dbm.rst:203
msgid ""
"It's possible to loop over every key in the database using this method  and "
"the :meth:`nextkey` method.  The traversal is ordered by ``gdbm``'s internal "
"hash values, and won't be sorted by the key values.  This method returns the "
"starting key."
msgstr ""
"このメソッドと :meth:`nextkey` メソッドを使って、データベースの全てのキーにわ"
"たってループ処理を行うことができます。探索は ``gdbm`` の内部ハッシュ値の順番"
"に行われ、キーの値に順に並んでいるとは限りません。このメソッドは最初のキーを"
"返します。"

#: ../../library/dbm.rst:210
msgid ""
"Returns the key that follows *key* in the traversal.  The following code "
"prints every key in the database ``db``, without having to create a list in "
"memory that contains them all::"
msgstr ""
"データベースの順方向探索において、*key* よりも後に来るキーを返します。以下の"
"コードはデータベース ``db`` について、キー全てを含むリストをメモリ上に生成す"
"ることなく全てのキーを出力します::"

#: ../../library/dbm.rst:221
msgid ""
"If you have carried out a lot of deletions and would like to shrink the "
"space used by the ``gdbm`` file, this routine will reorganize the database.  "
"``gdbm`` objects will not shorten the length of a database file except by "
"using this reorganization; otherwise, deleted file space will be kept and "
"reused as new (key, value) pairs are added."
msgstr ""
"大量の削除を実行した後、``gdbm`` ファイルの占めるスペースを削減したい場合、こ"
"のルーチンはデータベースを再組織化します。この再組織化を使用する方法以外に "
"``gdbm`` オブジェクトがデータベースファイルの大きさを短くすることはありませ"
"ん。サイズを縮小しない場合、削除された部分のファイルスペースは保持され、新た"
"な (キー、値の) ペアが追加される際に再利用されます。"

#: ../../library/dbm.rst:229
msgid ""
"When the database has been opened in fast mode, this method forces any "
"unwritten data to be written to the disk."
msgstr ""
"データベースが高速モードで開かれていた場合、このメソッドはディスクにまだ書き"
"込まれていないデータを全て書き込ませます。"

#: ../../library/dbm.rst:234
msgid "Close the ``gdbm`` database."
msgstr "``gdbm`` データベースをクローズします。"

#: ../../library/dbm.rst:237
msgid ":mod:`dbm.ndbm` --- Interface based on ndbm"
msgstr ":mod:`dbm.ndbm` --- ndbm に基づくインタフェース"

#: ../../library/dbm.rst:243
msgid "**Source code:** :source:`Lib/dbm/ndbm.py`"
msgstr "**ソースコード:** :source:`Lib/dbm/ndbm.py`"

#: ../../library/dbm.rst:247
msgid ""
"The :mod:`dbm.ndbm` module provides an interface to the Unix \"(n)dbm\" "
"library. Dbm objects behave like mappings (dictionaries), except that keys "
"and values are always stored as bytes. Printing a ``dbm`` object doesn't "
"print the keys and values, and the :meth:`items` and :meth:`values` methods "
"are not supported."
msgstr ""
":mod:`dbm.ndbm` モジュールはUnixの\"(n)dbm\"ライブラリのインタフェースを提供"
"します。 dbmオブジェクトは、キーと値が必ずバイト列である以外は辞書オブジェク"
"トのようなふるまいをします。 print関数などで ``dbm`` オブジェクトを出力しても"
"キーと値は出力されません。また、 :meth:`items` と :meth:`values` メソッドはサ"
"ポートされません。"

#: ../../library/dbm.rst:252
msgid ""
"This module can be used with the \"classic\" ndbm interface or the GNU GDBM "
"compatibility interface. On Unix, the :program:`configure` script will "
"attempt to locate the appropriate header file to simplify building this "
"module."
msgstr ""
"このモジュールは、GNU GDBM互換インタフェースを持った \"クラシックな\" ndbmイ"
"ンタフェースを使うことができます。 Unix上のビルド時に :program:`configure` ス"
"クリプトで適切なヘッダファイルが割り当られます。"

#: ../../library/dbm.rst:258
msgid ""
"Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"I/O エラーのような :mod:`dbm.ndbm` 特有のエラーで送出されます。誤ったキーの指"
"定のように、一般的なマップ型のエラーに対しては :exc:`KeyError` が送出されま"
"す。"

#: ../../library/dbm.rst:264
msgid "Name of the ``ndbm`` implementation library used."
msgstr "``ndbm`` が使用している実装ライブラリ名です。"

#: ../../library/dbm.rst:269
msgid ""
"Open a dbm database and return a ``ndbm`` object.  The *filename* argument "
"is the name of the database file (without the :file:`.dir` or :file:`.pag` "
"extensions)."
msgstr ""
"dbmデータベースを開いて ``ndbm`` オブジェクトを返します。引数 *filename* は"
"データベースのファイル名を指定します。 (拡張子 :file:`.dir` や :file:`.pag` "
"は付けません)。"

#: ../../library/dbm.rst:272
msgid "The optional *flag* argument must be one of these values:"
msgstr "オプションの *flag* は以下の値のいずれかです:"

#: ../../library/dbm.rst:294
msgid ""
"In addition to the dictionary-like methods, ``ndbm`` objects provide the "
"following method:"
msgstr ""
"辞書型様のメソッドに加えて、``ndbm`` オブジェクトには以下のメソッドがありま"
"す。"

#: ../../library/dbm.rst:299
msgid "Close the ``ndbm`` database."
msgstr "``ndbm`` データベースをクローズします。"

#: ../../library/dbm.rst:303
msgid ":mod:`dbm.dumb` --- Portable DBM implementation"
msgstr ":mod:`dbm.dumb` --- 可搬性のある DBM 実装"

#: ../../library/dbm.rst:308
msgid "**Source code:** :source:`Lib/dbm/dumb.py`"
msgstr "**ソースコード:** :source:`Lib/dbm/dumb.py`"

#: ../../library/dbm.rst:314
msgid ""
"The :mod:`dbm.dumb` module is intended as a last resort fallback for the :"
"mod:`dbm` module when a more robust module is not available. The :mod:`dbm."
"dumb` module is not written for speed and is not nearly as heavily used as "
"the other database modules."
msgstr ""
":mod:`dbm.dumb` モジュールは、 :mod:`dbm` が頑健なモジュールを他に見つけるこ"
"とができなかった際の最後の手段とされています。 :mod:`dbm.dumb` モジュールは速"
"度を重視して書かれているわけではなく、他のデータベースモジュールのように重い"
"使い方をするためのものではありません。"

#: ../../library/dbm.rst:321
msgid ""
"The :mod:`dbm.dumb` module provides a persistent dictionary-like interface "
"which is written entirely in Python.  Unlike other modules such as :mod:`dbm."
"gnu` no external library is required.  As with other persistent mappings, "
"the keys and values are always stored as bytes."
msgstr ""
":mod:`dbm.dumb` モジュールは永続性辞書に類似したインタフェースを提供し、全て "
"Python で書かれています。 :mod:`dbm.gnu` のようなモジュールと異なり、外部ライ"
"ブラリは必要ありません。他の永続性マップ型のように、キーおよび値は常にバイト"
"列として保存されます。"

#: ../../library/dbm.rst:326
msgid "The module defines the following:"
msgstr "このモジュールは以下を定義します:"

#: ../../library/dbm.rst:331
msgid ""
"Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"I/O エラーのような :mod:`dbm.dumb` 特有のエラーの際に送出されます。不正なキー"
"を指定したときのような、一般的な対応付けエラーの際には :exc:`KeyError` が送出"
"されます。"

#: ../../library/dbm.rst:337
msgid ""
"Open a ``dumbdbm`` database and return a dumbdbm object.  The *filename* "
"argument is the basename of the database file (without any specific "
"extensions).  When a dumbdbm database is created, files with :file:`.dat` "
"and :file:`.dir` extensions are created."
msgstr ""
"``dumbdbm`` データベースを開き、 dubmdbm オブジェクトを返します。 *filename* "
"引数はデータベースファイル名の雛型 (特定の拡張子をもたないもの) です。"
"dumbdbm データベースが生成される際、 :file:`.dat` および :file:`.dir` の拡張"
"子を持ったファイルが生成されます。"

#: ../../library/dbm.rst:342
msgid ""
"The optional *flag* argument supports only the semantics of ``'c'`` and "
"``'n'`` values.  Other values will default to database being always opened "
"for update, and will be created if it does not exist."
msgstr ""
"オプションの *flag* 引数は値 ``'c'`` と値 ``'n'`` のセマンティクスのみをサ"
"ポートしています。他の値を指定すると、デフォルトの常に更新のために開かれた"
"データベースになり、存在しない場合には新たに作成されます。"

#: ../../library/dbm.rst:351
msgid ""
"It is possible to crash the Python interpreter when loading a database with "
"a sufficiently large/complex entry due to stack depth limitations in "
"Python's AST compiler."
msgstr ""
"十分に大きかったり複雑だったりするエントリーのあるデータベースを読み込んでい"
"るときに、 Python の抽象構文木コンパイラのスタックの深さの限界を越えるせい"
"で、 Python インタプリタをクラッシュさせることができます。"

#: ../../library/dbm.rst:355
msgid ""
":func:`.open` always creates a new database when the flag has the value "
"``'n'``."
msgstr ""
"フラグに値 ``'n'`` を与えると、 :func:`.open` が常に新しいデータベースを作成"
"するようになりました。"

#: ../../library/dbm.rst:362
msgid ""
"Creating database in ``'r'`` and ``'w'`` modes.  Modifying database in "
"``'r'`` mode."
msgstr ""
"``'r'`` と ``'w'`` モードでデータベースの作成。 ``'r'`` モードでデータベース"
"を変更。"

#: ../../library/dbm.rst:363
msgid ""
"In addition to the methods provided by the :class:`collections.abc."
"MutableMapping` class, :class:`dumbdbm` objects provide the following "
"methods:"
msgstr ""
":class:`collections.abc.MutableMapping` クラスによって提供されるメソッドに加"
"えて、 :class:`dumbdbm` オブジェクトは以下のメソッドを提供します:"

#: ../../library/dbm.rst:369
msgid ""
"Synchronize the on-disk directory and data files.  This method is called by "
"the :meth:`Shelve.sync` method."
msgstr ""
"ディスク上の辞書とデータファイルを同期します。このメソッドは :meth:`Shelve."
"sync`  メソッドから呼び出されます。"

#: ../../library/dbm.rst:374
msgid "Close the ``dumbdbm`` database."
msgstr "``dumbdbm`` データベースをクローズします。"
