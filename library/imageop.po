# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2017-09-22 17:56+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/imageop.rst:3
msgid ":mod:`imageop` --- Manipulate raw image data"
msgstr ":mod:`imageop` --- 生の画像データを操作する"

#: ../../library/imageop.rst:9
msgid "The :mod:`imageop` module has been removed in Python 3."
msgstr ":mod:`imageop` モジュールは Python 3 で削除されました。"

#: ../../library/imageop.rst:12
msgid ""
"The :mod:`imageop` module contains some useful operations on images. It "
"operates on images consisting of 8 or 32 bit pixels stored in Python "
"strings.  This is the same format as used by :func:`gl.lrectwrite` and the :"
"mod:`imgfile` module."
msgstr ""
":mod:`imageop` モジュールは画像に関する便利な演算が含まれています。Python 文"
"字列に保存されている 8 または 32 ビットのピクセルから構成される画像を操作しま"
"す。これは :func:`gl.lrectwrite` と :mod:`imgfile` モジュールが使用しているも"
"のと同じフォーマットです。"

#: ../../library/imageop.rst:16
msgid "The module defines the following variables and functions:"
msgstr "このモジュールでは以下の変数と関数を定義しています:"

#: ../../library/imageop.rst:21
msgid ""
"This exception is raised on all errors, such as unknown number of bits per "
"pixel, etc."
msgstr ""
"この例外はピクセル当りの未知のビット数などのすべてのエラーで発生させられま"
"す。"

#: ../../library/imageop.rst:27
msgid ""
"Return the selected part of *image*, which should be *width* by *height* in "
"size and consist of pixels of *psize* bytes. *x0*, *y0*, *x1* and *y1* are "
"like the :func:`gl.lrectread` parameters, i.e. the boundary is included in "
"the new image. The new boundaries need not be inside the picture.  Pixels "
"that fall outside the old image will have their value set to zero.  If *x0* "
"is bigger than *x1* the new image is mirrored.  The same holds for the y "
"coordinates."
msgstr ""
"*image* の選択された部分を返します。 *image* は *width* × *height* の大きさ"
"で、 *psize* バイトのピクセルから構成されなければなりません。 *x0*, *y0*, "
"*x1* および *y1* は :func:`gl.lrectread` パラメータと同様です。すなわち、境界"
"は新画像に含まれます。新しい境界は画像の内部である必要はありません。旧画像の"
"外側になるピクセルは値をゼロに設定されます。 *x0* が *x1* より大きければ、新"
"画像は鏡像反転されます。y軸についても同じことが適用されます。"

#: ../../library/imageop.rst:37
msgid ""
"Return *image* scaled to size *newwidth* by *newheight*. No interpolation is "
"done, scaling is done by simple-minded pixel duplication or removal.  "
"Therefore, computer-generated images or dithered images will not look nice "
"after scaling."
msgstr ""
"*image* を大きさ *newwidth* × *newheight* に伸縮させて返します。補間は行われ"
"ません。ばかばかしいほど単純なピクセルの複製と間引きを行い伸縮させます。その"
"ため、コンピュータで作った画像やディザ処理された画像は伸縮した後見た目が良く"
"ありません。"

#: ../../library/imageop.rst:44
msgid ""
"Run a vertical low-pass filter over an image.  It does so by computing each "
"destination pixel as the average of two vertically-aligned source pixels.  "
"The main use of this routine is to forestall excessive flicker if the image "
"is displayed on a video device that uses interlacing, hence the name."
msgstr ""
"垂直ローパスフィルタ処理を画像全体に行います。それぞれの目標ピクセルを垂直に"
"並んだ二つの元ピクセルの平均を計算することで行います。このルーチンの主な用途"
"としては、画像がインターレース走査のビデオ装置に表示された場合に極端なちらつ"
"きを抑えるために用います。そのため、この名前があります。"

#: ../../library/imageop.rst:52
msgid ""
"Convert an 8-bit deep greyscale image to a 1-bit deep image by thresholding "
"all the pixels.  The resulting image is tightly packed and is probably only "
"useful as an argument to :func:`mono2grey`."
msgstr ""
"全ピクセルを二値化することによって、深さ 8 ビットのグレースケール画像を深さ "
"1 ビットの画像へ変換します。処理後の画像は隙間なく詰め込まれ、おそらく :func:"
"`mono2grey` の引数としてしか使い道がないでしょう。"

#: ../../library/imageop.rst:59
msgid ""
"Convert an 8-bit greyscale image to a 1-bit monochrome image using a (simple-"
"minded) dithering algorithm."
msgstr ""
"(ばかばかしいほど単純な) ディザ処理アルゴリズムを用いて、8 ビットグレースケー"
"ル画像を 1 ビットのモノクロ画像に変換します。"

#: ../../library/imageop.rst:65
msgid ""
"Convert a 1-bit monochrome image to an 8 bit greyscale or color image. All "
"pixels that are zero-valued on input get value *p0* on output and all one-"
"value input pixels get value *p1* on output.  To convert a monochrome black-"
"and-white image to greyscale pass the values ``0`` and ``255`` respectively."
msgstr ""
"1 ビットモノクロ画像を 8 ビットのグレースケールまたはカラー画像に変換します。"
"入力で値ゼロの全てのピクセルは出力では値 *p0* を取り、値 1 の入力ピクセルは出"
"力では値 *p1* を取ります。白黒のモノクロ画像をグレースケールへ変換するために"
"は、値 ``0`` と ``255`` をそれぞれ渡してください。"

#: ../../library/imageop.rst:73
msgid ""
"Convert an 8-bit greyscale image to a 4-bit greyscale image without "
"dithering."
msgstr ""
"ディザ処理を行わずに、8 ビットグレースケール画像を 4 ビットグレースケール画像"
"へ変換します。"

#: ../../library/imageop.rst:78
msgid ""
"Convert an 8-bit greyscale image to a 2-bit greyscale image without "
"dithering."
msgstr ""
"ディザ処理を行わずに、8 ビットグレースケール画像を 2 ビットグレースケール画像"
"に変換します。"

#: ../../library/imageop.rst:83
msgid ""
"Convert an 8-bit greyscale image to a 2-bit greyscale image with dithering.  "
"As for :func:`dither2mono`, the dithering algorithm is currently very simple."
msgstr ""
"ディザ処理を行い、8 ビットグレースケール画像を 2 ビットグレースケール画像へ変"
"換します。 :func:`dither2mono` については、ディザ処理アルゴリズムは現在とても"
"単純です。"

#: ../../library/imageop.rst:89
msgid "Convert a 4-bit greyscale image to an 8-bit greyscale image."
msgstr "4 ビットグレースケール画像を 8 ビットグレースケール画像へ変換します。"

#: ../../library/imageop.rst:94
msgid "Convert a 2-bit greyscale image to an 8-bit greyscale image."
msgstr "2 ビットグレースケール画像を 8 ビットグレースケール画像へ変換します。"

#: ../../library/imageop.rst:99
msgid ""
"If set to 0, the functions in this module use a non-backward compatible way "
"of representing multi-byte pixels on little-endian systems.  The SGI for "
"which this module was originally written is a big-endian system, so setting "
"this variable will have no effect. However, the code wasn't originally "
"intended to run on anything else, so it made assumptions about byte order "
"which are not universal.  Setting this variable to 0 will cause the byte "
"order to be reversed on little-endian systems, so that it then is the same "
"as on big-endian systems."
msgstr ""
"0 にセットすると、このモジュールの関数は、リトルエンディアンのシステムで以前"
"のバージョンと互換性のない方法でマルチバイトピクセル値を表現するようになりま"
"す。このモジュールはもともと SGI 向けに書かれたのですが、SGI はビッグエンディ"
"アンのシステムであり、この変数を設定しても何の影響もありません。とはいえ、こ"
"のコードはもともとどこでも動作するように考えて作られたわけではないので、バイ"
"トオーダに関する仮定が相互利用向けではありませんでした。この変数を 0 にする"
"と、リトルエンディアンのシステムではバイトオーダを反転して、ビッグエンディア"
"ンと同じにします。"
