# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
# Takanori Suzuki <takanori@takanory.net>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:06+0000\n"
"PO-Revision-Date: 2020-05-30 12:01+0000\n"
"Last-Translator: Takanori Suzuki <takanori@takanory.net>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.mime.rst:2
msgid ":mod:`email.mime`: Creating email and MIME objects from scratch"
msgstr ":mod:`email.mime`: メールと MIME オブジェクトを一から作成"

#: ../../library/email.mime.rst:7
msgid "**Source code:** :source:`Lib/email/mime/`"
msgstr "**ソースコード:** :source:`Lib/email/mime/`"

#: ../../library/email.mime.rst:11
msgid ""
"This module is part of the legacy (``Compat32``) email API.  Its "
"functionality is partially replaced by the :mod:`~email.contentmanager` in "
"the new API, but in certain applications these classes may still be useful, "
"even in non-legacy code."
msgstr ""

#: ../../library/email.mime.rst:16
msgid ""
"Ordinarily, you get a message object structure by passing a file or some "
"text to a parser, which parses the text and returns the root message "
"object.  However you can also build a complete message structure from "
"scratch, or even individual :class:`~email.message.Message` objects by "
"hand.  In fact, you can also take an existing structure and add new :class:"
"`~email.message.Message` objects, move them around, etc.  This makes a very "
"convenient interface for slicing-and-dicing MIME messages."
msgstr ""
"ふつう、メッセージオブジェクト構造はファイルまたは何がしかのテキストをパーザ"
"に通すことで得られます。パーザは与えられたテキストを解析し、基底となる root "
"のメッセージオブジェクトを返します。しかし、完全なメッセージオブジェクト構造"
"を何もないところから作成することもまた可能です。個別の :class:`~email."
"message.Message` を手で作成することさえできます。実際には、すでに存在するメッ"
"セージオブジェクト構造をとってきて、そこに新たな :class:`~email.message."
"Message` オブジェクトを追加したり、あるものを別のところへ移動させたりできま"
"す。これは MIME メッセージを切ったりおろしたりするために非常に便利なインター"
"フェイスを提供します。"

#: ../../library/email.mime.rst:24
msgid ""
"You can create a new object structure by creating :class:`~email.message."
"Message` instances, adding attachments and all the appropriate headers "
"manually.  For MIME messages though, the :mod:`email` package provides some "
"convenient subclasses to make things easier."
msgstr ""
"新しいメッセージオブジェクト構造は :class:`~email.message.Message` インスタン"
"スを作成することにより作れます。ここに添付ファイルやその他適切なものをすべて"
"手で加えてやればよいのです。MIME メッセージの場合、 :mod:`email` パッケージは"
"これらを簡単におこなえるようにするためにいくつかの便利なサブクラスを提供して"
"います。"

#: ../../library/email.mime.rst:29
msgid "Here are the classes:"
msgstr "以下がそのサブクラスです:"

#: ../../library/email.mime.rst:35
msgid "Module: :mod:`email.mime.base`"
msgstr "モジュール: :mod:`email.mime.base`"

#: ../../library/email.mime.rst:37
msgid ""
"This is the base class for all the MIME-specific subclasses of :class:"
"`~email.message.Message`.  Ordinarily you won't create instances "
"specifically of :class:`MIMEBase`, although you could.  :class:`MIMEBase` is "
"provided primarily as a convenient base class for more specific MIME-aware "
"subclasses."
msgstr ""
"これはすべての :class:`~email.message.Message` の MIME 用サブクラスの基底とな"
"るクラスです。とくに :class:`MIMEBase` のインスタンスを直接作成することは (可"
"能ではありますが) ふつうはしないでしょう。 :class:`MIMEBase` は単により特化さ"
"れた MIME 用サブクラスのための便宜的な基底クラスとして提供されています。"

#: ../../library/email.mime.rst:43
msgid ""
"*_maintype* is the :mailheader:`Content-Type` major type (e.g. :mimetype:"
"`text` or :mimetype:`image`), and *_subtype* is the :mailheader:`Content-"
"Type` minor type  (e.g. :mimetype:`plain` or :mimetype:`gif`).  *_params* is "
"a parameter key/value dictionary and is passed directly to :meth:`Message."
"add_header <email.message.Message.add_header>`."
msgstr ""
"*_maintype* は :mailheader:`Content-Type` の主形式 (maintype) であり (:"
"mimetype:`text` や :mimetype:`image` など)、 *_subtype* は :mailheader:"
"`Content-Type` の副形式 (subtype) です (:mimetype:`plain` や :mimetype:`gif` "
"など)。 *_params* は各パラメータのキーと値を格納した辞書であり、これは直接 :"
"meth:`Message.add_header <email.message.Message.add_header>` に渡されます。"

#: ../../library/email.mime.rst:49
msgid ""
"If *policy* is specified, (defaults to the :class:`compat32 <email.policy."
"Compat32>` policy) it will be passed to :class:`~email.message.Message`."
msgstr ""

#: ../../library/email.mime.rst:53
msgid ""
"The :class:`MIMEBase` class always adds a :mailheader:`Content-Type` header "
"(based on *_maintype*, *_subtype*, and *_params*), and a :mailheader:`MIME-"
"Version` header (always set to ``1.0``)."
msgstr ""
":class:`MIMEBase` クラスはつねに (*_maintype* 、 *_subtype* 、および "
"*_params* にもとづいた) :mailheader:`Content-Type` ヘッダと、 :mailheader:"
"`MIME-Version` ヘッダ (必ず ``1.0`` に設定される) を追加します。"

#: ../../library/email.mime.rst:57 ../../library/email.mime.rst:104
#: ../../library/email.mime.rst:135 ../../library/email.mime.rst:169
#: ../../library/email.mime.rst:204 ../../library/email.mime.rst:224
#: ../../library/email.mime.rst:258
msgid "Added *policy* keyword-only parameter."
msgstr "キーワード専用引数 *policy* が追加されました。"

#: ../../library/email.mime.rst:65
msgid "Module: :mod:`email.mime.nonmultipart`"
msgstr "モジュール: :mod:`email.mime.nonmultipart`"

#: ../../library/email.mime.rst:67
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are not :mimetype:`multipart`.  The "
"primary purpose of this class is to prevent the use of the :meth:`~email."
"message.Message.attach` method, which only makes sense for :mimetype:"
"`multipart` messages.  If :meth:`~email.message.Message.attach` is called, "
"a :exc:`~email.errors.MultipartConversionError` exception is raised."
msgstr ""
":class:`~email.mime.base.MIMEBase` のサブクラスで、これは :mimetype:"
"`multipart` 形式でない MIME メッセージのための中間的な基底クラスです。このク"
"ラスのおもな目的は、通常 :mimetype:`multipart` 形式のメッセージに対してのみ意"
"味をなす :meth:`~email.message.Message.attach` メソッドの使用をふせぐことで"
"す。もし :meth:`~email.message.Message.attach` メソッドが呼ばれた場合、これ"
"は :exc:`~email.errors.MultipartConversionError` 例外を発生します。"

#: ../../library/email.mime.rst:80
msgid "Module: :mod:`email.mime.multipart`"
msgstr "モジュール: :mod:`email.mime.multipart`"

#: ../../library/email.mime.rst:82
msgid ""
"A subclass of :class:`~email.mime.base.MIMEBase`, this is an intermediate "
"base class for MIME messages that are :mimetype:`multipart`.  Optional "
"*_subtype* defaults to :mimetype:`mixed`, but can be used to specify the "
"subtype of the message.  A :mailheader:`Content-Type` header of :mimetype:"
"`multipart/_subtype` will be added to the message object.  A :mailheader:"
"`MIME-Version` header will also be added."
msgstr ""
":class:`~email.mime.base.MIMEBase` のサブクラスで、これは :mimetype:"
"`multipart` 形式の MIME メッセージのための中間的な基底クラスです。オプション"
"引数 *_subtype* はデフォルトでは :mimetype:`mixed` になっていますが、そのメッ"
"セージの副形式 (subtype) を指定するのに使うことができます。メッセージオブジェ"
"クトには :mimetype:`multipart/_subtype` という値をもつ :mailheader:`Content-"
"Type` ヘッダとともに、 :mailheader:`MIME-Version` ヘッダが追加されるでしょ"
"う。"

#: ../../library/email.mime.rst:89
msgid ""
"Optional *boundary* is the multipart boundary string.  When ``None`` (the "
"default), the boundary is calculated when needed (for example, when the "
"message is serialized)."
msgstr ""
"オプション引数 *boundary* は multipart の境界文字列です。これが ``None`` の場"
"合 (デフォルト)、境界は必要に応じて計算されます（例えばメッセージがシリアライ"
"ズされるときなど）。"

#: ../../library/email.mime.rst:93
msgid ""
"*_subparts* is a sequence of initial subparts for the payload.  It must be "
"possible to convert this sequence to a list.  You can always attach new "
"subparts to the message by using the :meth:`Message.attach <email.message."
"Message.attach>` method."
msgstr ""
"*_subparts* はそのペイロードの subpart の初期値からなるシーケンスです。この"
"シーケンスはリストに変換できるようになっている必要があります。新しい subpart "
"はつねに :meth:`Message.attach <email.message.Message.attach>` メソッドを使っ"
"てそのメッセージに追加できるようになっています。"

#: ../../library/email.mime.rst:98 ../../library/email.mime.rst:131
#: ../../library/email.mime.rst:165 ../../library/email.mime.rst:199
#: ../../library/email.mime.rst:222 ../../library/email.mime.rst:253
msgid ""
"Optional *policy* argument defaults to :class:`compat32 <email.policy."
"Compat32>`."
msgstr ""

#: ../../library/email.mime.rst:100
msgid ""
"Additional parameters for the :mailheader:`Content-Type` header are taken "
"from the keyword arguments, or passed into the *_params* argument, which is "
"a keyword dictionary."
msgstr ""
":mailheader:`Content-Type` ヘッダに対する追加のパラメータはキーワード引数 "
"*_params* を介して取得あるいは設定されます。これはキーワード辞書になっていま"
"す。"

#: ../../library/email.mime.rst:113
msgid "Module: :mod:`email.mime.application`"
msgstr "モジュール: :mod:`email.mime.application`"

#: ../../library/email.mime.rst:115
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEApplication` class is used to represent MIME message objects of major "
"type :mimetype:`application`.  *_data* is a string containing the raw byte "
"data.  Optional *_subtype* specifies the MIME subtype and defaults to :"
"mimetype:`octet-stream`."
msgstr ""
":class:`~email.mime.nonmultipart.MIMENonMultipart` のサブクラスである :class:"
"`MIMEApplication` クラスは MIME メッセージオブジェクトのメジャータイプ :"
"mimetype:`application` を表します。 *_data* は生のバイト列が入った文字列で"
"す。オプション引数 *_subtype* は MIME のサブタイプを設定します。サブタイプの"
"デフォルトは :mimetype:`octet-stream` です。"

#: ../../library/email.mime.rst:121
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the data for transport.  This callable takes one "
"argument, which is the :class:`MIMEApplication` instance. It should use :"
"meth:`~email.message.Message.get_payload` and :meth:`~email.message.Message."
"set_payload` to change the payload to encoded form.  It should also add any :"
"mailheader:`Content-Transfer-Encoding` or other headers to the message "
"object as necessary.  The default encoding is base64.  See the :mod:`email."
"encoders` module for a list of the built-in encoders."
msgstr ""
"オプション引数の *_encoder* は呼び出し可能なオブジェクト (関数など) で、デー"
"タの転送に使う実際のエンコード処理を行います。この呼び出し可能なオブジェクト"
"は引数を 1 つ取り、それは :class:`MIMEApplication` のインスタンスです。ペイ"
"ロードをエンコードされた形式に変更するために :meth:`~email.message.Message."
"get_payload` と :meth:`~email.message.Message.set_payload` を使い、必要に応じ"
"て :mailheader:`Content-Transfer-Encoding` やその他のヘッダをメッセージオブ"
"ジェクトに追加するべきです。デフォルトのエンコードは base64 です。組み込みの"
"エンコーダの一覧は :mod:`email.encoders` モジュールを見てください。"

#: ../../library/email.mime.rst:133 ../../library/email.mime.rst:167
msgid "*_params* are passed straight through to the base class constructor."
msgstr "*_params* は基底クラスのコンストラクタにそのまま渡されます。"

#: ../../library/email.mime.rst:144
msgid "Module: :mod:`email.mime.audio`"
msgstr "モジュール: :mod:`email.mime.audio`"

#: ../../library/email.mime.rst:146
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEAudio` class is used to create MIME message objects of major type :"
"mimetype:`audio`. *_audiodata* is a string containing the raw audio data.  "
"If this data can be decoded by the standard Python module :mod:`sndhdr`, "
"then the subtype will be automatically included in the :mailheader:`Content-"
"Type` header. Otherwise you can explicitly specify the audio subtype via the "
"*_subtype* argument.  If the minor type could not be guessed and *_subtype* "
"was not given, then :exc:`TypeError` is raised."
msgstr ""
":class:`MIMEAudio` クラスは :class:`~email.mime.nonmultipart."
"MIMENonMultipart` のサブクラスで、主形式 (maintype) が :mimetype:`audio` の "
"MIME オブジェクトを作成するのに使われます。 *_audiodata* は実際の音声データを"
"格納した文字列です。もしこのデータが標準の Python モジュール :mod:`sndhdr` に"
"よって認識できるものであれば、 :mailheader:`Content-Type` ヘッダの副形式 "
"(subtype) は自動的に決定されます。そうでない場合はその画像の形式 (subtype) "
"を *_subtype* で明示的に指定する必要があります。副形式が自動的に決定できず、 "
"*_subtype* の指定もない場合は、 :exc:`TypeError` が発生します。"

#: ../../library/email.mime.rst:155
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the audio data for transport.  This callable takes one "
"argument, which is the :class:`MIMEAudio` instance. It should use :meth:"
"`~email.message.Message.get_payload` and :meth:`~email.message.Message."
"set_payload` to change the payload to encoded form.  It should also add any :"
"mailheader:`Content-Transfer-Encoding` or other headers to the message "
"object as necessary.  The default encoding is base64.  See the :mod:`email."
"encoders` module for a list of the built-in encoders."
msgstr ""
"オプション引数の *_encoder* は呼び出し可能なオブジェクト (関数など) で、オー"
"ディオデータの転送に使う実際のエンコード処理を行います。この呼び出し可能なオ"
"ブジェクトは引数を 1 つ取り、それは :class:`MIMEAudio` のインスタンスです。ペ"
"イロードをエンコードされた形式に変更するために :meth:`~email.message.Message."
"get_payload` と :meth:`~email.message.Message.set_payload` を使い、必要に応じ"
"て :mailheader:`Content-Transfer-Encoding` やその他のヘッダをメッセージオブ"
"ジェクトに追加するべきです。デフォルトのエンコードは base64 です。組み込みの"
"エンコーダの一覧は :mod:`email.encoders` モジュールを見てください。"

#: ../../library/email.mime.rst:178
msgid "Module: :mod:`email.mime.image`"
msgstr "モジュール: :mod:`email.mime.image`"

#: ../../library/email.mime.rst:180
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEImage` class is used to create MIME message objects of major type :"
"mimetype:`image`. *_imagedata* is a string containing the raw image data.  "
"If this data can be decoded by the standard Python module :mod:`imghdr`, "
"then the subtype will be automatically included in the :mailheader:`Content-"
"Type` header. Otherwise you can explicitly specify the image subtype via the "
"*_subtype* argument.  If the minor type could not be guessed and *_subtype* "
"was not given, then :exc:`TypeError` is raised."
msgstr ""
":class:`MIMEImage` クラスは :class:`~email.mime.nonmultipart."
"MIMENonMultipart` のサブクラスで、主形式 (maintype) が :mimetype:`image` の "
"MIME オブジェクトを作成するのに使われます。 *_imagedata* は実際の画像データを"
"格納した文字列です。もしこのデータが標準の Python モジュール :mod:`imghdr` に"
"よって認識できるものであれば、 :mailheader:`Content-Type` ヘッダの副形式 "
"(subtype) は自動的に決定されます。そうでない場合はその画像の形式 (subtype) "
"を *_subtype* で明示的に指定する必要があります。副形式が自動的に決定できず、 "
"*_subtype* の指定もない場合は、 :exc:`TypeError` が発生します。"

#: ../../library/email.mime.rst:189
msgid ""
"Optional *_encoder* is a callable (i.e. function) which will perform the "
"actual encoding of the image data for transport.  This callable takes one "
"argument, which is the :class:`MIMEImage` instance. It should use :meth:"
"`~email.message.Message.get_payload` and :meth:`~email.message.Message."
"set_payload` to change the payload to encoded form.  It should also add any :"
"mailheader:`Content-Transfer-Encoding` or other headers to the message "
"object as necessary.  The default encoding is base64.  See the :mod:`email."
"encoders` module for a list of the built-in encoders."
msgstr ""
"オプション引数の *_encoder* は呼び出し可能なオブジェクト (関数など) で、画像"
"データの転送に使う実際のエンコード処理を行います。この呼び出し可能なオブジェ"
"クトは引数を 1 つ取り、それは :class:`MIMEImage` のインスタンスです。ペイロー"
"ドをエンコードされた形式に変更するために :meth:`~email.message.Message."
"get_payload` と :meth:`~email.message.Message.set_payload` を使い、必要に応じ"
"て :mailheader:`Content-Transfer-Encoding` やその他のヘッダをメッセージオブ"
"ジェクトに追加するべきです。デフォルトのエンコードは base64 です。組み込みの"
"エンコーダの一覧は :mod:`email.encoders` モジュールを見てください。"

#: ../../library/email.mime.rst:201
msgid ""
"*_params* are passed straight through to the :class:`~email.mime.base."
"MIMEBase` constructor."
msgstr ""
"*_params* は :class:`~email.mime.base.MIMEBase` コンストラクタに直接渡されま"
"す。"

#: ../../library/email.mime.rst:211
msgid "Module: :mod:`email.mime.message`"
msgstr "モジュール: :mod:`email.mime.message`"

#: ../../library/email.mime.rst:213
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEMessage` class is used to create MIME objects of main type :mimetype:"
"`message`. *_msg* is used as the payload, and must be an instance of class :"
"class:`~email.message.Message` (or a subclass thereof), otherwise a :exc:"
"`TypeError` is raised."
msgstr ""
":class:`MIMEMessage` クラスは :class:`~email.mime.nonmultipart."
"MIMENonMultipart` のサブクラスで、主形式 (maintype) が :mimetype:`message` "
"の MIME オブジェクトを作成するのに使われます。ペイロードとして使われるメッ"
"セージは *_msg* になります。これは :class:`~email.message.Message` クラス (あ"
"るいはそのサブクラス) のインスタンスでなければいけません。そうでない場合、こ"
"の関数は :exc:`TypeError` を発生します。"

#: ../../library/email.mime.rst:219
msgid ""
"Optional *_subtype* sets the subtype of the message; it defaults to :"
"mimetype:`rfc822`."
msgstr ""
"オプション引数 *_subtype* はそのメッセージの副形式 (subtype) を設定します。デ"
"フォルトではこれは :mimetype:`rfc822` になっています。"

#: ../../library/email.mime.rst:231
msgid "Module: :mod:`email.mime.text`"
msgstr "モジュール: :mod:`email.mime.text`"

#: ../../library/email.mime.rst:233
msgid ""
"A subclass of :class:`~email.mime.nonmultipart.MIMENonMultipart`, the :class:"
"`MIMEText` class is used to create MIME objects of major type :mimetype:"
"`text`. *_text* is the string for the payload.  *_subtype* is the minor type "
"and defaults to :mimetype:`plain`.  *_charset* is the character set of the "
"text and is passed as an argument to the :class:`~email.mime.nonmultipart."
"MIMENonMultipart` constructor; it defaults to ``us-ascii`` if the string "
"contains only ``ascii`` code points, and ``utf-8`` otherwise.  The "
"*_charset* parameter accepts either a string or a :class:`~email.charset."
"Charset` instance."
msgstr ""
":class:`MIMEText` クラスは :class:`~email.mime.nonmultipart."
"MIMENonMultipart` のサブクラスで、主形式 (maintype) が :mimetype:`text` の "
"MIME オブジェクトを作成するのに使われます。ペイロードの文字列は *_text* にな"
"ります。 *_subtype* には副形式 (subtype) を指定し、デフォルトは :mimetype:"
"`plain` です。 *_charset* はテキストの文字セットで、 :class:`~email.mime."
"nonmultipart.MIMENonMultipart` コンストラクタに引数として渡されます。この値"
"は、文字列が ``ascii`` コードポイントのみを含む場合 ``us-ascii`` 、それ以外"
"は ``utf-8`` がデフォルトになっています。 *_charset* パラメータは、文字列と :"
"class:`~email.charset.Charset` インスタンスの両方を受け付けます。"

#: ../../library/email.mime.rst:243
msgid ""
"Unless the *_charset* argument is explicitly set to ``None``, the MIMEText "
"object created will have both a :mailheader:`Content-Type` header with a "
"``charset`` parameter, and a :mailheader:`Content-Transfer-Encoding` "
"header.  This means that a subsequent ``set_payload`` call will not result "
"in an encoded payload, even if a charset is passed in the ``set_payload`` "
"command.  You can \"reset\" this behavior by deleting the ``Content-Transfer-"
"Encoding`` header, after which a ``set_payload`` call will automatically "
"encode the new payload (and add a new :mailheader:`Content-Transfer-"
"Encoding` header)."
msgstr ""
"``_charset`` 引数に明示的に ``None`` をセットしない限りは、作成される "
"MIMEText オブジェクトは ``charset`` の付いた :mailheader:`Content-Type` ヘッ"
"ダと :mailheader:`Content-Transfer-Endcoding` ヘッダの両方を持ちます。これは"
"後続の ``set_payload`` 呼び出しが、 ``set_payload`` コマンドに charset が渡し"
"たとしてもエンコードされたペイロードにはならないことを意味します。 ``Content-"
"Transfer-Encoding`` ヘッダを削除することでこの振る舞いを「リセット」出来ま"
"す。これにより ``set_payload`` 呼び出しが新たなペイロードを自動的にエンコー"
"ド (そして新たな :mailheader:`Content-Transfer-Encoding` ヘッダを追加) しま"
"す。"

#: ../../library/email.mime.rst:255
msgid "*_charset* also accepts :class:`~email.charset.Charset` instances."
msgstr ""
"*_charset* は :class:`~email.charset.Charset` インスタンスも受け取ります。"
