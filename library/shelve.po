# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Osamu NAKAMURA, 2021
# Masato HASHIMOTO <cabezon.hashimoto@gmail.com>, 2023
# tomo, 2023
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:12+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/shelve.rst:2
msgid ":mod:`!shelve` --- Python object persistence"
msgstr ":mod:`!shelve` --- Python オブジェクトの永続化"

#: ../../library/shelve.rst:7
msgid "**Source code:** :source:`Lib/shelve.py`"
msgstr "**ソースコード:** :source:`Lib/shelve.py`"

#: ../../library/shelve.rst:13
msgid ""
"A \"shelf\" is a persistent, dictionary-like object.  The difference with "
"\"dbm\" databases is that the values (not the keys!) in a shelf can be "
"essentially arbitrary Python objects --- anything that the :mod:`pickle` "
"module can handle. This includes most class instances, recursive data types, "
"and objects containing lots of shared  sub-objects.  The keys are ordinary "
"strings."
msgstr ""
"\"シェルフ (shelf, 棚)\" は辞書に似た永続性を持つオブジェクトです。 \"dbm\" "
"データベースとの違いは、シェルフの値 (キーではありません！) は実質上どんな "
"Python オブジェクトにも --- :mod:`pickle` モジュールが扱えるなら何でも --- で"
"きるということです。これにはほとんどのクラスインスタンス、再帰的なデータ型、"
"沢山の共有されたサブオブジェクトを含むオブジェクトが含まれます。キーは通常の"
"文字列です。"

#: ../../library/shelve.rst:22
msgid ""
"Open a persistent dictionary.  The filename specified is the base filename "
"for the underlying database.  As a side-effect, an extension may be added to "
"the filename and more than one file may be created.  By default, the "
"underlying database file is opened for reading and writing.  The optional "
"*flag* parameter has the same interpretation as the *flag* parameter of :"
"func:`dbm.open`."
msgstr ""
"永続的な辞書を開きます。指定された *filename* は、根底にあるデータベースの基"
"本ファイル名となります。副作用として、 *filename* には拡張子がつけられる場合"
"があり、ひとつ以上のファイルが生成される可能性もあります。デフォルトでは、根"
"底にあるデータベースファイルは読み書き可能なように開かれます。オプションの "
"*flag* パラメータは :func:`dbm.open` における *flag* パラメータと同様に解釈さ"
"れます。"

#: ../../library/shelve.rst:28
msgid ""
"By default, pickles created with :const:`pickle.DEFAULT_PROTOCOL` are used "
"to serialize values.  The version of the pickle protocol can be specified "
"with the *protocol* parameter."
msgstr ""

#: ../../library/shelve.rst:32
msgid ""
"Because of Python semantics, a shelf cannot know when a mutable persistent-"
"dictionary entry is modified.  By default modified objects are written "
"*only* when assigned to the shelf (see :ref:`shelve-example`).  If the "
"optional *writeback* parameter is set to ``True``, all entries accessed are "
"also cached in memory, and written back on :meth:`~Shelf.sync` and :meth:"
"`~Shelf.close`; this can make it handier to mutate mutable entries in the "
"persistent dictionary, but, if many entries are accessed, it can consume "
"vast amounts of memory for the cache, and it can make the close operation "
"very slow since all accessed entries are written back (there is no way to "
"determine which accessed entries are mutable, nor which ones were actually "
"mutated)."
msgstr ""
"Python の意味論により、シェルフには永続的な辞書の可変エントリがいつ変更された"
"かを知る術がありません。\n"
"デフォルトでは、変更されたオブジェクトはシェルフに代入されたとき *だけ* 書き"
"込まれます (:ref:`shelve-example` 参照)。\n"
"オプションの *writeback* パラメータが  ``True`` に設定されている場合は、アク"
"セスされたすべてのエントリはメモリ上にキャッシュされ、 :meth:`~Shelf.sync` お"
"よび :meth:`~Shelf.close` を呼び出した際に書き戻されます;\n"
"この機能は永続的な辞書上の可変の要素に対する変更を容易にしますが、多数のエン"
"トリがアクセスされた場合、膨大な量のメモリがキャッシュのために消費され、アク"
"セスされた全てのエントリを書き戻す (アクセスされたエントリが可変であるか、あ"
"るいは実際に変更されたかを決定する方法は存在しないのです) ために、ファイルを"
"閉じる操作が非常に低速になります。"

#: ../../library/shelve.rst:44 ../../library/shelve.rst:148
msgid ""
":const:`pickle.DEFAULT_PROTOCOL` is now used as the default pickle protocol."
msgstr ""

#: ../../library/shelve.rst:48
msgid "Accepts :term:`path-like object` for filename."
msgstr ""

#: ../../library/shelve.rst:53
msgid ""
"Do not rely on the shelf being closed automatically; always call :meth:"
"`~Shelf.close` explicitly when you don't need it any more, or use :func:"
"`shelve.open` as a context manager::"
msgstr ""
"シェルフが自動的に閉じることに依存しないでください; それがもう必要ない場合は"
"常に :meth:`~Shelf.close` を明示的に呼ぶか、 :func:`shelve.open` をコンテキス"
"トマネージャとして使用してください::"

#: ../../library/shelve.rst:57
msgid ""
"with shelve.open('spam') as db:\n"
"    db['eggs'] = 'eggs'"
msgstr ""

#: ../../library/shelve.rst:64
msgid ""
"Because the :mod:`shelve` module is backed by :mod:`pickle`, it is insecure "
"to load a shelf from an untrusted source.  Like with pickle, loading a shelf "
"can execute arbitrary code."
msgstr ""
":mod:`shelve` モジュールは裏で :mod:`pickle` を使っているので、信頼できない"
"ソースからシェルフを読み込むのは危険です。 pickle と同じく、 shelf の読み込み"
"でも任意のコードを実行できるからです。"

#: ../../library/shelve.rst:68
msgid ""
"Shelf objects support most of methods and operations supported by "
"dictionaries (except copying, constructors and operators ``|`` and ``|=``).  "
"This eases the transition from dictionary based scripts to those requiring "
"persistent storage."
msgstr ""

#: ../../library/shelve.rst:72
msgid "Two additional methods are supported:"
msgstr "追加でサポートされるメソッドが二つあります:"

#: ../../library/shelve.rst:76
msgid ""
"Write back all entries in the cache if the shelf was opened with *writeback* "
"set to :const:`True`.  Also empty the cache and synchronize the persistent "
"dictionary on disk, if feasible.  This is called automatically when the "
"shelf is closed with :meth:`close`."
msgstr ""
"シェルフが *writeback* を :const:`True` にセットして開かれている場合に、"
"キャッシュ中の全てのエントリを書き戻します。また可能な場合は、キャッシュを空"
"にしてディスク上の永続的な辞書を同期します。このメソッドはシェルフを :meth:"
"`close` によって閉じるとき自動的に呼び出されます。"

#: ../../library/shelve.rst:83
msgid ""
"Synchronize and close the persistent *dict* object.  Operations on a closed "
"shelf will fail with a :exc:`ValueError`."
msgstr ""
"永続的な *辞書* オブジェクトを同期して閉じます。既に閉じられているシェルフに"
"対して呼び出すと :exc:`ValueError` を出し失敗します。"

#: ../../library/shelve.rst:89
msgid ""
"`Persistent dictionary recipe <https://code.activestate.com/recipes/576642-"
"persistent-dict-with-multiple-standard-file-format/>`_ with widely supported "
"storage formats and having the speed of native dictionaries."
msgstr ""

#: ../../library/shelve.rst:95
msgid "Restrictions"
msgstr "制限事項"

#: ../../library/shelve.rst:101
msgid ""
"The choice of which database package will be used (such as :mod:`dbm.ndbm` "
"or :mod:`dbm.gnu`) depends on which interface is available.  Therefore it is "
"not safe to open the database directly using :mod:`dbm`.  The database is "
"also (unfortunately) subject to the limitations of :mod:`dbm`, if it is used "
"--- this means that (the pickled representation of) the objects stored in "
"the database should be fairly small, and in rare cases key collisions may "
"cause the database to refuse updates."
msgstr ""
"どのデータベースパッケージが使われるか (例えば :mod:`dbm.ndbm` 、 :mod:`dbm."
"gnu`) は、どのインターフェースが利用可能かに依存します。従って、データベース"
"を :mod:`dbm`  を使って直接開く方法は安全ではありません。データベースはま"
"た、 :mod:`dbm` が使われた場合 (不幸なことに) その制約に縛られます --- これは"
"データベースに記録されたオブジェクト (の pickle 化された表現) はかなり小さく"
"なければならず、キー衝突が生じた場合に、稀にデータベースを更新することができ"
"なくなることを意味します。"

#: ../../library/shelve.rst:109
msgid ""
"The :mod:`shelve` module does not support *concurrent* read/write access to "
"shelved objects.  (Multiple simultaneous read accesses are safe.)  When a "
"program has a shelf open for writing, no other program should have it open "
"for reading or writing.  Unix file locking can be used to solve this, but "
"this differs across Unix versions and requires knowledge about the database "
"implementation used."
msgstr ""
":mod:`shelve` モジュールは、シェルフに置かれたオブジェクトの *並列した* 読み"
"出し/書き込みアクセスをサポートしません (複数の同時読み出しアクセスは安全で"
"す)。あるプログラムが書き込みのために開かれたシェルフを持っているとき、他のプ"
"ログラムはそのシェルフを読み書きのために開いてはいけません。この問題を解決す"
"るために Unix のファイルロック機構を使うことができますが、この機構は Unix の"
"バージョン間で異なり、使われているデータベースの実装について知識が必要となり"
"ます。"

#: ../../library/shelve.rst:116
msgid ""
"On macOS :mod:`dbm.ndbm` can silently corrupt the database file on updates, "
"which can cause hard crashes when trying to read from the database."
msgstr ""

#: ../../library/shelve.rst:122
msgid ""
"A subclass of :class:`collections.abc.MutableMapping` which stores pickled "
"values in the *dict* object."
msgstr ""
":class:`collections.abc.MutableMapping` のサブクラスで、 *dict* オブジェクト"
"内にpickle化された値を保持します。"

#: ../../library/shelve.rst:125
msgid ""
"By default, pickles created with :const:`pickle.DEFAULT_PROTOCOL` are used "
"to serialize values.  The version of the pickle protocol can be specified "
"with the *protocol* parameter.  See the :mod:`pickle` documentation for a "
"discussion of the pickle protocols."
msgstr ""

#: ../../library/shelve.rst:130
msgid ""
"If the *writeback* parameter is ``True``, the object will hold a cache of "
"all entries accessed and write them back to the *dict* at sync and close "
"times. This allows natural operations on mutable entries, but can consume "
"much more memory and make sync and close take a long time."
msgstr ""
"*writeback* パラメータが ``True`` に設定されていれば、アクセスされたすべての"
"エントリはメモリ上にキャッシュされ、ファイルを閉じる際に *dict* に書き戻され"
"ます; この機能により、可変のエントリに対して自然な操作が可能になりますが、さ"
"らに多くのメモリを消費し、辞書をファイルと同期して閉じる際に長い時間がかかる"
"ようになります。"

#: ../../library/shelve.rst:135
msgid ""
"The *keyencoding* parameter is the encoding used to encode keys before they "
"are used with the underlying dict."
msgstr ""
"*keyencoding* パラメータは、shelf の背後にある dict に対して使われる前にキー"
"をエンコードするのに使用されるエンコーディングです。"

#: ../../library/shelve.rst:138
msgid ""
"A :class:`Shelf` object can also be used as a context manager, in which case "
"it will be automatically closed when the :keyword:`with` block ends."
msgstr ""
":class:`Shelf` オブジェクトは、コンテキストマネージャとしても使用できます。こ"
"の場合、 :keyword:`with` ブロックが終了する際に、自動的に閉じられます。"

#: ../../library/shelve.rst:141
msgid ""
"Added the *keyencoding* parameter; previously, keys were always encoded in "
"UTF-8."
msgstr ""
"*keyencoding* パラメータを追加; 以前はキーは常に UTF-8 でエンコードされていま"
"した。"

#: ../../library/shelve.rst:145
msgid "Added context manager support."
msgstr "コンテキストマネージャーサポートが追加されました。"

#: ../../library/shelve.rst:155
msgid ""
"A subclass of :class:`Shelf` which exposes :meth:`!first`, :meth:`!next`, :"
"meth:`!previous`, :meth:`!last` and :meth:`!set_location` methods. These are "
"available in the third-party :mod:`!bsddb` module from `pybsddb <https://www."
"jcea.es/programacion/pybsddb.htm>`_ but not in other database modules.  The "
"*dict* object passed to the constructor must support those methods.  This is "
"generally accomplished by calling one of :func:`!bsddb.hashopen`, :func:`!"
"bsddb.btopen` or :func:`!bsddb.rnopen`.  The optional *protocol*, "
"*writeback*, and *keyencoding* parameters have the same interpretation as "
"for the :class:`Shelf` class."
msgstr ""

#: ../../library/shelve.rst:169
msgid ""
"A subclass of :class:`Shelf` which accepts a *filename* instead of a dict-"
"like object.  The underlying file will be opened using :func:`dbm.open`.  By "
"default, the file will be created and opened for both read and write.  The "
"optional *flag* parameter has the same interpretation as for the :func:`."
"open` function.  The optional *protocol* and *writeback* parameters have the "
"same interpretation as for the :class:`Shelf` class."
msgstr ""
":class:`Shelf` のサブクラスで、辞書に似たオブジェクトの代わりに *filename* を"
"受理します。根底にあるファイルは :func:`dbm.open` を使って開かれます。デフォ"
"ルトでは、ファイルは読み書き可能な状態で開かれます。オプションの *flag* パラ"
"メータは :func:`.open` 関数におけるパラメータと同様に解釈されます。オプション"
"の *protocol* および *writeback* パラメータは :class:`Shelf` クラスにおけるパ"
"ラメータと同様に解釈されます。"

#: ../../library/shelve.rst:180
msgid "Example"
msgstr "使用例"

#: ../../library/shelve.rst:182
msgid ""
"To summarize the interface (``key`` is a string, ``data`` is an arbitrary "
"object)::"
msgstr ""
"インターフェースは以下のコードに集約されています (``key`` は文字列で、"
"``data`` は任意のオブジェクトです)::"

#: ../../library/shelve.rst:185
msgid ""
"import shelve\n"
"\n"
"d = shelve.open(filename)  # open -- file may get suffix added by low-level\n"
"                           # library\n"
"\n"
"d[key] = data              # store data at key (overwrites old data if\n"
"                           # using an existing key)\n"
"data = d[key]              # retrieve a COPY of data at key (raise KeyError\n"
"                           # if no such key)\n"
"del d[key]                 # delete data stored at key (raises KeyError\n"
"                           # if no such key)\n"
"\n"
"flag = key in d            # true if the key exists\n"
"klist = list(d.keys())     # a list of all existing keys (slow!)\n"
"\n"
"# as d was opened WITHOUT writeback=True, beware:\n"
"d['xx'] = [0, 1, 2]        # this works as expected, but...\n"
"d['xx'].append(3)          # *this doesn't!* -- d['xx'] is STILL [0, 1, 2]!\n"
"\n"
"# having opened d without writeback=True, you need to code carefully:\n"
"temp = d['xx']             # extracts the copy\n"
"temp.append(5)             # mutates the copy\n"
"d['xx'] = temp             # stores the copy right back, to persist it\n"
"\n"
"# or, d=shelve.open(filename,writeback=True) would let you just code\n"
"# d['xx'].append(5) and have it work as expected, BUT it would also\n"
"# consume more memory and make the d.close() operation slower.\n"
"\n"
"d.close()                  # close it"
msgstr ""

#: ../../library/shelve.rst:218
msgid "Module :mod:`dbm`"
msgstr ":mod:`dbm` モジュール"

#: ../../library/shelve.rst:219
msgid "Generic interface to ``dbm``-style databases."
msgstr "``dbm`` スタイルのデータベースに対する共通インターフェース。"

#: ../../library/shelve.rst:221
msgid "Module :mod:`pickle`"
msgstr ":mod:`pickle` モジュール"

#: ../../library/shelve.rst:222
msgid "Object serialization used by :mod:`shelve`."
msgstr ":mod:`shelve` によって使われるオブジェクト整列化機構。"

#: ../../library/shelve.rst:9 ../../library/shelve.rst:97
msgid "module"
msgstr "module"

#: ../../library/shelve.rst:9
msgid "pickle"
msgstr "pickle"

#: ../../library/shelve.rst:97
msgid "dbm.ndbm"
msgstr "dbm.ndbm"

#: ../../library/shelve.rst:97
msgid "dbm.gnu"
msgstr "dbm.gnu"
