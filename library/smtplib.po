# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2021-05-24 12:43+0000\n"
"Last-Translator: Takanori Suzuki <takanori@takanory.net>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/smtplib.rst:2
msgid ":mod:`smtplib` --- SMTP protocol client"
msgstr ":mod:`smtplib` --- SMTP プロトコルクライアント"

#: ../../library/smtplib.rst:13
msgid "**Source code:** :source:`Lib/smtplib.py`"
msgstr "**ソースコード:** :source:`Lib/smtplib.py`"

#: ../../library/smtplib.rst:17
msgid ""
"The :mod:`smtplib` module defines an SMTP client session object that can be "
"used to send mail to any Internet machine with an SMTP or ESMTP listener "
"daemon.  For details of SMTP and ESMTP operation, consult :rfc:`821` (Simple "
"Mail Transfer Protocol) and :rfc:`1869` (SMTP Service Extensions)."
msgstr ""
":mod:`smtplib` モジュールは、SMTPまたはESMTPのリスナーデーモンを備えた任意の"
"インターネット上のホストにメールを送るために使用することができる SMTPクライア"
"ント・セッション・オブジェクトを定義します。 SMTPおよびESMTPオペレーションの"
"詳細は、 :rfc:`821` (Simple Mail Transfer Protocol) や :rfc:`1869` (SMTP "
"Service Extensions)を調べてください。"

#: ../../library/smtplib.rst:25
msgid ""
"An :class:`SMTP` instance encapsulates an SMTP connection.  It has methods "
"that support a full repertoire of SMTP and ESMTP operations. If the optional "
"host and port parameters are given, the SMTP :meth:`connect` method is "
"called with those parameters during initialization.  If specified, "
"*local_hostname* is used as the FQDN of the local host in the HELO/EHLO "
"command.  Otherwise, the local hostname is found using :func:`socket."
"getfqdn`.  If the :meth:`connect` call returns anything other than a success "
"code, an :exc:`SMTPConnectError` is raised. The optional *timeout* parameter "
"specifies a timeout in seconds for blocking operations like the connection "
"attempt (if not specified, the global default timeout setting will be "
"used).  If the timeout expires, :exc:`socket.timeout` is raised."
msgstr ""
":class:`SMTP` インスタンスはSMTPコネクションをカプセル化し、 SMTPとESMTPの命"
"令をサポートをします。オプションであるhostとportを与えた場合は、 SMTPクラスの"
"インスタンスが作成されると同時に、 :meth:`connect` メソッドを呼び出し初期化さ"
"れます。:meth:`connect` 呼び出しが成功コード以外を返した場合、 :exc:"
"`SMTPConnectError` 例外が送出されます。*local_hostname* を指定する場合、これ"
"は HELO/EHLO コマンドでのローカルホストの FQDN として使われます。指定しない場"
"合はローカルホスト名は :func:`socket.getfqdn` が使われます。オプションの "
"*timeout* 引数を与える場合、コネクションの接続時などのブロックする操作におけ"
"るタイムアウト時間を秒数で設定します。(指定されなかった場合は、グローバルのデ"
"フォルトタイムアウト設定が利用されます)。タイムアウトに達すると :exc:`socket."
"timeout` 例外が送出されます。"

#: ../../library/smtplib.rst:38
msgid ""
"For normal use, you should only require the initialization/connect, :meth:"
"`sendmail`, and :meth:`SMTP.quit` methods. An example is included below."
msgstr ""
"普通に使う場合は、初期化と接続を行ってから、 :meth:`sendmail` と :meth:`SMTP."
"quit` メソッドを呼びます。使用例は先の方で記載しています。"

#: ../../library/smtplib.rst:42
msgid "*timeout* was added."
msgstr "*timeout* が追加されました"

#: ../../library/smtplib.rst:48
msgid ""
"An :class:`SMTP_SSL` instance behaves exactly the same as instances of :"
"class:`SMTP`. :class:`SMTP_SSL` should be used for situations where SSL is "
"required from the beginning of the connection and using :meth:`starttls` is "
"not appropriate. If *host* is not specified, the local host is used. If "
"*port* is omitted, the standard SMTP-over-SSL port (465) is used. "
"*local_hostname* has the same meaning as it does for the :class:`SMTP` "
"class.  *keyfile* and *certfile* are also optional, and can contain a PEM "
"formatted private key and certificate chain file for the SSL connection. The "
"optional *timeout* parameter specifies a timeout in seconds for blocking "
"operations like the connection attempt (if not specified, the global default "
"timeout setting will be used).  If the timeout expires, :exc:`socket."
"timeout` is raised."
msgstr ""
":class:`SMTP_SSL` のインスタンスは :class:`SMTP` のインスタンスと全く同じよう"
"に動作します。 :class:`SMTP_SSL` は、接続の最初の段階からSSLが要求され、 :"
"meth:`starttls` では対応できない場合にのみ利用されるべきです。 *host* が指定"
"されなかった場合は、localhostが利用されます。 *port* が指定されなかった場合"
"は、標準の SMTP-over-SSL ポート(465) が利用されます。 *local_hostname* は :"
"class:`SMTP` クラスのものと同じです。 *keyfile* と *certfile* もオプション"
"で、SSL接続のための、PEMフォーマットのプライベートキーと、証明パス "
"(certificate chain) ファイルを指定することができます。オプションの *timeout* "
"引数を与える場合、コネクションの接続時などのブロックする操作におけるタイムア"
"ウト時間を秒数で設定します (指定されなかった場合は、グローバルのデフォルトタ"
"イムアウト設定が利用されます)。タイムアウトに達すると :exc:`socket.timeout` "
"例外が送出されます。"

#: ../../library/smtplib.rst:66
msgid ""
"The LMTP protocol, which is very similar to ESMTP, is heavily based on the "
"standard SMTP client. It's common to use Unix sockets for LMTP, so our :meth:"
"`connect` method must support that as well as a regular host:port server.  "
"*local_hostname* has the same meaning as it does for the :class:`SMTP` "
"class.  To specify a Unix socket, you must use an absolute path for *host*, "
"starting with a '/'."
msgstr ""
"ESMTPに非常に似ているLMTPプロトコルは、SMTPクライアントに基づいています。 "
"LMTPにはよくUnixソケットが利用されるので、 :meth:`connect` メソッドは通常の "
"host:port サーバーと同じようにUnixソケットもサポートしています。"
"*local_hostname* は :class:`SMTP` クラスのものと同じです。 Unixソケットを指定"
"するには、 *host* 引数に、 '/' で始まる絶対パスを指定します。"

#: ../../library/smtplib.rst:73
msgid ""
"Authentication is supported, using the regular SMTP mechanism. When using a "
"Unix socket, LMTP generally don't support or require any authentication, but "
"your mileage might vary."
msgstr ""
"認証は、通常のSMTP機構を利用してサポートされています。 Unixソケットを利用する"
"場合、LMTPは通常認証をサポートしたり要求したりはしません。しかし、あなたが必"
"要であれば、利用することができます。"

#: ../../library/smtplib.rst:79
msgid "A nice selection of exceptions is defined as well:"
msgstr "このモジュールの例外には次のものがあります:"

#: ../../library/smtplib.rst:84
msgid ""
"The base exception class for all the other exceptions provided by this "
"module."
msgstr "このモジュールで提供される全ての例外クラスのベースクラスです。"

#: ../../library/smtplib.rst:90
msgid ""
"This exception is raised when the server unexpectedly disconnects, or when "
"an attempt is made to use the :class:`SMTP` instance before connecting it to "
"a server."
msgstr ""
"この例外はサーバが突然コネクションを切断するか、もしくは :class:`SMTP` インス"
"タンスを生成する前にコネクションを張ろうとした場合に上げられます。"

#: ../../library/smtplib.rst:97
msgid ""
"Base class for all exceptions that include an SMTP error code. These "
"exceptions are generated in some instances when the SMTP server returns an "
"error code.  The error code is stored in the :attr:`smtp_code` attribute of "
"the error, and the :attr:`smtp_error` attribute is set to the error message."
msgstr ""
"SMTPのエラーコードを含んだ例外のクラスです。これらの例外はSMTPサーバがエラー"
"コードを返すときに生成されます。エラーコードは :attr:`smtp_code` 属性に格納さ"
"れます。また、 :attr:`smtp_error` 属性にはエラーメッセージが格納されます。"

#: ../../library/smtplib.rst:105
msgid ""
"Sender address refused.  In addition to the attributes set by on all :exc:"
"`SMTPResponseException` exceptions, this sets 'sender' to the string that "
"the SMTP server refused."
msgstr ""
"送信者のアドレスが弾かれたときに上げられる例外です。全ての :exc:"
"`SMTPResponseException` 例外に、 SMTPサーバが弾いた'sender'アドレスの文字列が"
"セットされます。"

#: ../../library/smtplib.rst:112
msgid ""
"All recipient addresses refused.  The errors for each recipient are "
"accessible through the attribute :attr:`recipients`, which is a dictionary "
"of exactly the same sort as :meth:`SMTP.sendmail` returns."
msgstr ""
"全ての受取人アドレスが弾かれたときに上げられる例外です。各受取人のエラーは属"
"性 :attr:`recipients` によってアクセス可能で、 :meth:`SMTP.sendmail` が返す辞"
"書と同じ並びの辞書になっています。"

#: ../../library/smtplib.rst:119
msgid "The SMTP server refused to accept the message data."
msgstr ""
"SMTPサーバが、メッセージのデータを受け入れることを拒絶した時に上げられる例外"
"です。"

#: ../../library/smtplib.rst:124
msgid "Error occurred during establishment of a connection  with the server."
msgstr "サーバへの接続時にエラーが発生した時に上げられる例外です。"

#: ../../library/smtplib.rst:129
msgid "The server refused our ``HELO`` message."
msgstr "サーバーが ``HELO`` メッセージを弾いた時に上げられる例外です。"

#: ../../library/smtplib.rst:134
msgid ""
"SMTP authentication went wrong.  Most probably the server didn't accept the "
"username/password combination provided."
msgstr ""
"SMTP 認証が失敗しました。最もあり得る可能性は、サーバーがユーザ名/パスワード"
"のペアを受付なかった事です。"

#: ../../library/smtplib.rst:142
msgid ":rfc:`821` - Simple Mail Transfer Protocol"
msgstr ":rfc:`821` - Simple Mail Transfer Protocol"

#: ../../library/smtplib.rst:141
msgid ""
"Protocol definition for SMTP.  This document covers the model, operating "
"procedure, and protocol details for SMTP."
msgstr ""
"SMTP のプロトコル定義です。このドキュメントでは SMTP のモデル、操作手順、プロ"
"トコルの詳細についてカバーしています。"

#: ../../library/smtplib.rst:146
msgid ":rfc:`1869` - SMTP Service Extensions"
msgstr ":rfc:`1869` - SMTP Service Extensions"

#: ../../library/smtplib.rst:145
msgid ""
"Definition of the ESMTP extensions for SMTP.  This describes a framework for "
"extending SMTP with new commands, supporting dynamic discovery of the "
"commands provided by the server, and defines a few additional commands."
msgstr ""
"SMTP に対する ESMTP 拡張の定義です。このドキュメントでは、新たな命令による "
"SMTP の拡張、サーバによって提供される命令を動的に発見する機能のサポート、およ"
"びいくつかの追加命令定義について記述しています。"

#: ../../library/smtplib.rst:153
msgid "SMTP Objects"
msgstr "SMTP オブジェクト"

#: ../../library/smtplib.rst:155
msgid "An :class:`SMTP` instance has the following methods:"
msgstr ":class:`SMTP` クラスインスタンスは次のメソッドを提供します:"

#: ../../library/smtplib.rst:160
msgid ""
"Set the debug output level.  A true value for *level* results in debug "
"messages for connection and for all messages sent to and received from the "
"server."
msgstr ""
"コネクション間でやりとりされるメッセージ出力のレベルをセットします。メッセー"
"ジの冗長さは *level* に応じて決まります。"

#: ../../library/smtplib.rst:166
msgid ""
"Send a command *cmd* to the server.  The optional argument *argstring* is "
"simply concatenated to the command, separated by a space."
msgstr ""
"サーバへコマンド *cmd* を送信します。オプション引数 *argstring* はスペース文"
"字でコマンドに連結します。"

#: ../../library/smtplib.rst:169
msgid ""
"This returns a 2-tuple composed of a numeric response code and the actual "
"response line (multiline responses are joined into one long line.)"
msgstr ""
"戻り値は、整数値のレスポンスコードと、サーバからの応答の値をタプルで返しま"
"す。 (サーバからの応答が数行に渡る場合でも一つの大きな文字列で返します。)"

#: ../../library/smtplib.rst:172
msgid ""
"In normal operation it should not be necessary to call this method "
"explicitly. It is used to implement other methods and may be useful for "
"testing private extensions."
msgstr ""
"通常、この命令を明示的に使う必要はありませんが、自分で拡張するする時に使用す"
"るときに役立つかもしれません。"

#: ../../library/smtplib.rst:176
msgid ""
"If the connection to the server is lost while waiting for the reply, :exc:"
"`SMTPServerDisconnected` will be raised."
msgstr ""
"応答待ちのときに、サーバへのコネクションが失われると、 :exc:"
"`SMTPServerDisconnected` が上がります。"

#: ../../library/smtplib.rst:182
msgid ""
"Connect to a host on a given port.  The defaults are to connect to the local "
"host at the standard SMTP port (25). If the hostname ends with a colon "
"(``':'``) followed by a number, that suffix will be stripped off and the "
"number interpreted as the port number to use. This method is automatically "
"invoked by the constructor if a host is specified during instantiation.  "
"Returns a 2-tuple of the response code and message sent by the server in its "
"connection response."
msgstr ""
"ホスト名とポート番号をもとに接続します。デフォルトはlocalhostの標準的なSMTP"
"ポート(25番)に接続します。もしホスト名の末尾がコロン(``':'``)で、後に番号がつ"
"いている場合は、「ホスト名:ポート番号」として扱われます。このメソッドはコンス"
"トラクタにホスト名及びポート番号が指定されている場合、自動的に呼び出されま"
"す。戻り値は、この接続の応答内でサーバによって送信された応答コードとメッセー"
"ジの2要素タプルです。"

#: ../../library/smtplib.rst:193
msgid ""
"Identify yourself to the SMTP server using ``HELO``.  The hostname argument "
"defaults to the fully qualified domain name of the local host. The message "
"returned by the server is stored as the :attr:`helo_resp` attribute of the "
"object."
msgstr ""
"SMTPサーバに ``HELO`` コマンドで身元を示します。デフォルトではhostname引数は"
"ローカルホストを指します。サーバーが返したメッセージは、オブジェクトの :attr:"
"`helo_resp` 属性に格納されます。"

#: ../../library/smtplib.rst:198
msgid ""
"In normal operation it should not be necessary to call this method "
"explicitly. It will be implicitly called by the :meth:`sendmail` when "
"necessary."
msgstr ""
"通常は :meth:`sendmail` が呼びだすため、これを明示的に呼び出す必要はありませ"
"ん。"

#: ../../library/smtplib.rst:204
msgid ""
"Identify yourself to an ESMTP server using ``EHLO``.  The hostname argument "
"defaults to the fully qualified domain name of the local host.  Examine the "
"response for ESMTP option and store them for use by :meth:`has_extn`. Also "
"sets several informational attributes: the message returned by the server is "
"stored as the :attr:`ehlo_resp` attribute, :attr:`does_esmtp` is set to true "
"or false depending on whether the server supports ESMTP, and :attr:"
"`esmtp_features` will be a dictionary containing the names of the SMTP "
"service extensions this server supports, and their parameters (if any)."
msgstr ""
"``EHLO`` を利用し、ESMTPサーバに身元を明かします。デフォルトではhostname引数"
"はローカルホストのFQDNです。また、ESMTPオプションのために応答を調べたもの"
"は、 :meth:`has_extn` に備えて保存されます。また、幾つかの情報を属性に保存し"
"ます: サーバーが返したメッセージは :attr:`ehlo_resp` 属性に、 :attr:"
"`does_esmtp` 属性はサーバーがESMTPをサポートしているかどうかによって true か "
"false に、 :attr:`esmtp_features` 属性は辞書で、サーバーが対応しているSMTP "
"サービス拡張の名前と、もしあればそのパラメータを格納します。"

#: ../../library/smtplib.rst:214
msgid ""
"Unless you wish to use :meth:`has_extn` before sending mail, it should not "
"be necessary to call this method explicitly.  It will be implicitly called "
"by :meth:`sendmail` when necessary."
msgstr ""
":meth:`has_extn` をメールを送信する前に使わない限り、明示的にこのメソッドを呼"
"び出す必要があるべきではなく、 :meth:`sendmail` が必要とした場合に呼ばれま"
"す。"

#: ../../library/smtplib.rst:220
msgid ""
"This method call :meth:`ehlo` and or :meth:`helo` if there has been no "
"previous ``EHLO`` or ``HELO`` command this session.  It tries ESMTP ``EHLO`` "
"first."
msgstr ""
"このメソッドは、現在のセッションでまだ ``EHLO`` か ``HELO`` コマンドが実行さ"
"れていない場合、 :meth:`ehlo` and/or :meth:`helo` メソッドを呼び出します。こ"
"のメソッドは先に ESMTP ``EHLO`` を試します。"

#: ../../library/smtplib.rst:225 ../../library/smtplib.rst:256
#: ../../library/smtplib.rst:280 ../../library/smtplib.rst:330
msgid ":exc:`SMTPHeloError`"
msgstr ":exc:`SMTPHeloError`"

#: ../../library/smtplib.rst:225 ../../library/smtplib.rst:256
#: ../../library/smtplib.rst:280 ../../library/smtplib.rst:330
msgid "The server didn't reply properly to the ``HELO`` greeting."
msgstr "サーバーが ``HELO`` に正しく返事しなかった."

#: ../../library/smtplib.rst:231
msgid ""
"Return :const:`True` if *name* is in the set of SMTP service extensions "
"returned by the server, :const:`False` otherwise. Case is ignored."
msgstr ""
"*name* が拡張SMTPサービスセットに含まれている場合には :const:`True` を返し、"
"そうでなければ :const:`False` を返します。大小文字は区別されません。"

#: ../../library/smtplib.rst:237
msgid ""
"Check the validity of an address on this server using SMTP ``VRFY``. Returns "
"a tuple consisting of code 250 and a full :rfc:`822` address (including "
"human name) if the user address is valid. Otherwise returns an SMTP error "
"code of 400 or greater and an error string."
msgstr ""
"``VRFY`` を利用してSMTPサーバにアドレスの妥当性をチェックします。妥当である場"
"合はコード250と完全な :rfc:`822` アドレス(人名)のタプルを返します。それ以外の"
"場合は、400以上のエラーコードとエラー文字列を返します。"

#: ../../library/smtplib.rst:244
msgid "Many sites disable SMTP ``VRFY`` in order to foil spammers."
msgstr ""
"ほとんどのサイトはスパマーの裏をかくためにSMTPの ``VRFY`` は使用不可になって"
"います。"

#: ../../library/smtplib.rst:249
msgid ""
"Log in on an SMTP server that requires authentication. The arguments are the "
"username and the password to authenticate with. If there has been no "
"previous ``EHLO`` or ``HELO`` command this session, this method tries ESMTP "
"``EHLO`` first. This method will return normally if the authentication was "
"successful, or may raise the following exceptions:"
msgstr ""
"認証が必要なSMTPサーバにログインします。認証に使用する引数はユーザ名とパス"
"ワードです。まだセッションが無い場合は、 ``EHLO`` または ``HELO`` コマンドで"
"セッションを作ります。ESMTPの場合は ``EHLO`` が先に試されます。認証が成功した"
"場合は通常このメソッドは戻りますが、例外が起こった場合は以下の例外が上がりま"
"す:"

#: ../../library/smtplib.rst:259
msgid ":exc:`SMTPAuthenticationError`"
msgstr ":exc:`SMTPAuthenticationError`"

#: ../../library/smtplib.rst:259
msgid "The server didn't accept the username/password combination."
msgstr "サーバがユーザ名/パスワードでの認証に失敗した。"

#: ../../library/smtplib.rst:261 ../../library/smtplib.rst:283
msgid ":exc:`SMTPException`"
msgstr ":exc:`SMTPException`"

#: ../../library/smtplib.rst:262
msgid "No suitable authentication method was found."
msgstr "どんな認証方法も見付からなかった。"

#: ../../library/smtplib.rst:267
msgid ""
"Put the SMTP connection in TLS (Transport Layer Security) mode.  All SMTP "
"commands that follow will be encrypted.  You should then call :meth:`ehlo` "
"again."
msgstr ""
"TLS(Transport Layer Security)モードでSMTPコネクションを出し、全てのSMTPコマン"
"ドは暗号化されます。これは :meth:`ehlo` をもう一度呼びだすときにするべきで"
"す。"

#: ../../library/smtplib.rst:271
msgid ""
"If *keyfile* and *certfile* are provided, these are passed to the :mod:"
"`socket` module's :func:`ssl` function."
msgstr ""
"*keyfile* と *certfile* が提供された場合に、 :mod:`socket` モジュールの :"
"func:`ssl` 関数が通るようになります。"

#: ../../library/smtplib.rst:274
msgid ""
"If there has been no previous ``EHLO`` or ``HELO`` command this session, "
"this method tries ESMTP ``EHLO`` first."
msgstr ""
"もしまだ ``EHLO`` か ``HELO`` コマンドが実行されていない場合、このメソッドは "
"ESMTP ``EHLO`` を先に試します。"

#: ../../library/smtplib.rst:283
msgid "The server does not support the STARTTLS extension."
msgstr "サーバーが STARTTLS 拡張に対応していない。"

#: ../../library/smtplib.rst:287
msgid ":exc:`RuntimeError`"
msgstr ":exc:`RuntimeError`"

#: ../../library/smtplib.rst:288
msgid "SSL/TLS support is not available to your Python interpreter."
msgstr "実行中の Python インタプリタで、SSL/TLS サポートが利用できない。"

#: ../../library/smtplib.rst:293
msgid ""
"Send mail.  The required arguments are an :rfc:`822` from-address string, a "
"list of :rfc:`822` to-address strings (a bare string will be treated as a "
"list with 1 address), and a message string.  The caller may pass a list of "
"ESMTP options (such as ``8bitmime``) to be used in ``MAIL FROM`` commands as "
"*mail_options*. ESMTP options (such as ``DSN`` commands) that should be used "
"with all ``RCPT`` commands can be passed as *rcpt_options*.  (If you need to "
"use different ESMTP options to different recipients you have to use the low-"
"level methods such as :meth:`mail`, :meth:`rcpt` and :meth:`data` to send "
"the message.)"
msgstr ""
"メールを送信します。必要な引数は :rfc:`822` のfromアドレス文字列、 :rfc:"
"`822` のtoアドレス文字列またはアドレス文字列のリスト、メッセージ文字列です。"
"送信側は ``MAIL FROM`` コマンドで使用される *mail_options* の ESMTPオプション"
"(``8bitmime`` のような)のリストを得るかもしれません。全ての ``RCPT`` コマンド"
"で使われるべきESMTPオプション (例えば ``DSN`` コマンド)は、 *rcpt_options* を"
"通して利用することができます。(もし送信先別にESMTPオプションを使う必要があれ"
"ば、メッセージを送るために :meth:`mail` 、 :meth:`rcpt` 、 :meth:`data` と"
"いった下位レベルのメソッドを使う必要があります。)"

#: ../../library/smtplib.rst:304
msgid ""
"The *from_addr* and *to_addrs* parameters are used to construct the message "
"envelope used by the transport agents. The :class:`SMTP` does not modify the "
"message headers in any way."
msgstr ""
"配送エージェントは *from_addr* 、 *to_addrs* 引数を使い、メッセージのエンベ"
"ロープを構成します。 :class:`SMTP` はメッセージヘッダを修正しません。"

#: ../../library/smtplib.rst:308
msgid ""
"If there has been no previous ``EHLO`` or ``HELO`` command this session, "
"this method tries ESMTP ``EHLO`` first. If the server does ESMTP, message "
"size and each of the specified options will be passed to it (if the option "
"is in the feature set the server advertises).  If ``EHLO`` fails, ``HELO`` "
"will be tried and ESMTP options suppressed."
msgstr ""
"まだセッションが無い場合は、 ``EHLO`` または ``HELO`` コマンドでセッションを"
"作ります。ESMTPの場合は ``EHLO`` が先に試されます。また、サーバがESMTP対応な"
"らば、メッセージサイズとそれぞれ指定されたオプションも渡します。(featureオプ"
"ションがあればサーバの広告をセットします) ``EHLO`` が失敗した場合は、ESMTPオ"
"プションの無い ``HELO`` が試されます。"

#: ../../library/smtplib.rst:314
msgid ""
"This method will return normally if the mail is accepted for at least one "
"recipient. Otherwise it will raise an exception.  That is, if this method "
"does not raise an exception, then someone should get your mail. If this "
"method does not raise an exception, it returns a dictionary, with one entry "
"for each recipient that was refused.  Each entry contains a tuple of the "
"SMTP error code and the accompanying error message sent by the server."
msgstr ""
"このメソッドは最低でも1つの受信者にメールが受け入れられたときは普通に戻ります"
"が、そうでない場合は例外を投げます。このメソッドが例外を投げられなければ、誰"
"かが送信したメールを得るべきです。また、例外を投げれなかった場合は、拒絶され"
"た受取人ごとへの1つのエントリーと共に、辞書を返します。各エントリーは、サー"
"バーによって送られたSMTPエラーコードおよびエラーメッセージのタプルを含んでい"
"ます。"

#: ../../library/smtplib.rst:321
msgid "This method may raise the following exceptions:"
msgstr "このメソッドは次の例外を上げることがあります:"

#: ../../library/smtplib.rst:327
msgid ":exc:`SMTPRecipientsRefused`"
msgstr ":exc:`SMTPRecipientsRefused`"

#: ../../library/smtplib.rst:324
msgid ""
"All recipients were refused.  Nobody got the mail.  The :attr:`recipients` "
"attribute of the exception object is a dictionary with information about the "
"refused recipients (like the one returned when at least one recipient was "
"accepted)."
msgstr ""
"全ての受信を拒否され、誰にもメールが届けられませんでした。例外オブジェクト"
"の :attr:`recipients` 属性は、受信拒否についての情報の入った辞書オブジェクト"
"です。 (辞書は少なくとも一つは受信されたときに似ています)。"

#: ../../library/smtplib.rst:333
msgid ":exc:`SMTPSenderRefused`"
msgstr ":exc:`SMTPSenderRefused`"

#: ../../library/smtplib.rst:333
msgid "The server didn't accept the *from_addr*."
msgstr "サーバが *from_addr* を受理しませんでした。"

#: ../../library/smtplib.rst:337
msgid ":exc:`SMTPDataError`"
msgstr ":exc:`SMTPDataError`"

#: ../../library/smtplib.rst:336
msgid ""
"The server replied with an unexpected error code (other than a refusal of a "
"recipient)."
msgstr "サーバが予期しないエラーコードを返しました (受信拒否以外)。"

#: ../../library/smtplib.rst:339
msgid ""
"Unless otherwise noted, the connection will be open even after an exception "
"is raised."
msgstr ""
"また、この他の注意として、例外が上がった後もコネクションは開いたままになって"
"います。"

#: ../../library/smtplib.rst:345
msgid ""
"Terminate the SMTP session and close the connection.  Return the result of "
"the SMTP ``QUIT`` command."
msgstr ""
"SMTPセッションを終了し、コネクションを閉じます。 SMTP ``QUIT`` コマンドの結果"
"を返します。"

#: ../../library/smtplib.rst:348
msgid "Return a value."
msgstr "結果を返すようになりました"

#: ../../library/smtplib.rst:352
msgid ""
"Low-level methods corresponding to the standard SMTP/ESMTP commands "
"``HELP``, ``RSET``, ``NOOP``, ``MAIL``, ``RCPT``, and ``DATA`` are also "
"supported. Normally these do not need to be called directly, so they are not "
"documented here.  For details, consult the module code."
msgstr ""
"下位レベルのメソッドは標準SMTP/ESMTPコマンド ``HELP`` 、 ``RSET`` 、 "
"``NOOP`` 、 ``MAIL`` 、 ``RCPT`` 、 ``DATA`` に対応しています。通常これらは直"
"接呼ぶ必要はなく、また、ドキュメントもありません。詳細はモジュールのコードを"
"調べてください。"

#: ../../library/smtplib.rst:361
msgid "SMTP Example"
msgstr "SMTP 使用例"

#: ../../library/smtplib.rst:363
msgid ""
"This example prompts the user for addresses needed in the message envelope "
"('To' and 'From' addresses), and the message to be delivered.  Note that the "
"headers to be included with the message must be included in the message as "
"entered; this example doesn't do any processing of the :rfc:`822` headers.  "
"In particular, the 'To' and 'From' addresses must be included in the message "
"headers explicitly. ::"
msgstr ""
"次の例は最低限必要なメールアドレス('To' と 'From')を含んだメッセージを送信す"
"るものです。この例では :rfc:`822` ヘッダの加工もしていません。メッセージに含"
"まれるヘッダは、メッセージに含まれる必要があり、特に、明確な'To'、と'From'ア"
"ドレスはメッセージヘッダに含まれている必要があります。 ::"

#: ../../library/smtplib.rst:399
msgid ""
"In general, you will want to use the :mod:`email` package's features to "
"construct an email message, which you can then convert to a string and send "
"via :meth:`sendmail`; see :ref:`email-examples`."
msgstr ""
"多くの場合、 :mod:`email` パッケージの機能を使って email メッセージを構築し、"
"それを文字列に変換して、 :meth:`sendmail` で送信する、という手順を用いま"
"す。 :ref:`email-examples` を参照してください。"
