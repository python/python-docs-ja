# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2018
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:27+0000\n"
"Last-Translator: tomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/syslog.rst:2
msgid ":mod:`syslog` --- Unix syslog library routines"
msgstr ":mod:`syslog` --- Unix syslog ライブラリルーチン群"

#: ../../library/syslog.rst:10
msgid ""
"This module provides an interface to the Unix ``syslog`` library routines. "
"Refer to the Unix manual pages for a detailed description of the ``syslog`` "
"facility."
msgstr ""
"このモジュールでは Unix ``syslog`` ライブラリルーチン群へのインタフェースを提"
"供します。``syslog`` の便宜レベルに関する詳細な記述は Unix マニュアルページを"
"参照してください。"

#: ../../library/syslog.rst:14
msgid ""
"This module wraps the system ``syslog`` family of routines.  A pure Python "
"library that can speak to a syslog server is available in the :mod:`logging."
"handlers` module as :class:`SysLogHandler`."
msgstr ""
"このモジュールはシステムの ``syslog`` ファミリのルーチンをラップしています。 "
"syslog サーバーと通信できる pure Python のライブラリが、 :mod:`logging."
"handlers` モジュールの :class:`SysLogHandler` にあります。"

#: ../../library/syslog.rst:18
msgid "The module defines the following functions:"
msgstr "このモジュールには、以下の関数が定義されています:"

#: ../../library/syslog.rst:24
msgid ""
"Send the string *message* to the system logger.  A trailing newline is added "
"if necessary.  Each message is tagged with a priority composed of a "
"*facility* and a *level*.  The optional *priority* argument, which defaults "
"to :const:`LOG_INFO`, determines the message priority.  If the facility is "
"not encoded in *priority* using logical-or (``LOG_INFO | LOG_USER``), the "
"value given in the :func:`openlog` call is used."
msgstr ""
"文字列 *message* をシステムログ機構に送信します。末尾の改行文字は必要に応じて"
"追加されます。各メッセージは *facility* および *level* からなる優先度でタグ付"
"けされます。オプションの *priority* 引数はメッセージの優先度を定義します。標"
"準の値は :const:`LOG_INFO` です。 *priority* 中に、便宜レベルが  (``LOG_INFO "
"| LOG_USER`` のように) 論理和を使ってコード化されていない場合、 :func:"
"`openlog` を呼び出した際の値が使われます。"

#: ../../library/syslog.rst:31
msgid ""
"If :func:`openlog` has not been called prior to the call to :func:`syslog`, "
"``openlog()`` will be called with no arguments."
msgstr ""
":func:`syslog` が呼び出される前に :func:`openlog` が呼び出されなかった場合、 "
"``openlog()`` が引数なしで呼び出されます。"

#: ../../library/syslog.rst:37
msgid ""
"Logging options of subsequent :func:`syslog` calls can be set by calling :"
"func:`openlog`.  :func:`syslog` will call :func:`openlog` with no arguments "
"if the log is not currently open."
msgstr ""
":func:`openlog` 関数を呼び出すことで以降の :func:`syslog` の呼び出しに対する"
"ログオプションを設定することができます。ログがまだ開かれていない状態で :func:"
"`syslog` を呼び出すと :func:`openlog` が引数なしで呼び出されます。"

#: ../../library/syslog.rst:41
msgid ""
"The optional *ident* keyword argument is a string which is prepended to "
"every message, and defaults to ``sys.argv[0]`` with leading path components "
"stripped.  The optional *logoption* keyword argument (default is 0) is a bit "
"field -- see below for possible values to combine.  The optional *facility* "
"keyword argument (default is :const:`LOG_USER`) sets the default facility "
"for messages which do not have a facility explicitly encoded."
msgstr ""
"オプションの *ident* キーワード引数は全てのメッセージの先頭に付く文字列で、デ"
"フォルトでは ``sys.argv[0]`` から前方のパス部分を取り除いたものです。オプショ"
"ンの *logoption* キーワード引数 (デフォルトは 0) はビットフィールドです。組み"
"合わせられる値については下記を参照してください。オプションの *facility* キー"
"ワード引数 (デフォルトは :const:`LOG_USER`) は明示的に facility が encode さ"
"れていないメッセージに設定される facility です。"

#: ../../library/syslog.rst:48
msgid ""
"In previous versions, keyword arguments were not allowed, and *ident* was "
"required.  The default for *ident* was dependent on the system libraries, "
"and often was ``python`` instead of the name of the python program file."
msgstr ""
"前のバージョンではキーワード引数が許さておらず、*ident* が必須であった。"
"*ident* のデフォルトはシステムライブラリに依存しており、しばしばプログラム"
"ファイルではなく ``python`` であった。"

#: ../../library/syslog.rst:56
msgid ""
"Reset the syslog module values and call the system library ``closelog()``."
msgstr ""
"syslog モジュールの値をリセットし、システムライブラリの ``closelog()`` を呼び"
"出します。"

#: ../../library/syslog.rst:58
msgid ""
"This causes the module to behave as it does when initially imported.  For "
"example, :func:`openlog` will be called on the first :func:`syslog` call "
"(if :func:`openlog` hasn't already been called), and *ident* and other :func:"
"`openlog` parameters are reset to defaults."
msgstr ""
"この関数を呼ぶと、モジュールが最初に import されたときと同じようにふるまいま"
"す。例えば、(:func:`openlog` を呼び出さないで) :func:`syslog` を最初に呼び出"
"したときに、 :func:`openlog` が呼び出され、 *ident* やその他の :func:"
"`openlog` の引数はデフォルト値にリセットされます。"

#: ../../library/syslog.rst:66
msgid ""
"Set the priority mask to *maskpri* and return the previous mask value.  "
"Calls to :func:`syslog` with a priority level not set in *maskpri* are "
"ignored. The default is to log all priorities.  The function "
"``LOG_MASK(pri)`` calculates the mask for the individual priority *pri*.  "
"The function ``LOG_UPTO(pri)`` calculates the mask for all priorities up to "
"and including *pri*."
msgstr ""
"優先度マスクを *maskpri* に設定し、以前のマスク値を返します。 *maskpri* に設"
"定されていない優先度レベルを持った :func:`syslog` の呼び出しは無視されます。"
"標準では全ての優先度をログ出力します。関数 ``LOG_MASK(pri)`` は個々の優先度 "
"*pri* に対する優先度マスクを計算します。関数 ``LOG_UPTO(pri)`` は優先度 "
"*pri* までの全ての優先度を含むようなマスクを計算します。"

#: ../../library/syslog.rst:73
msgid "The module defines the following constants:"
msgstr "このモジュールでは以下の定数を定義しています:"

#: ../../library/syslog.rst:78
msgid "Priority levels (high to low):"
msgstr "優先度 (降順):"

#: ../../library/syslog.rst:76
msgid ""
":const:`LOG_EMERG`, :const:`LOG_ALERT`, :const:`LOG_CRIT`, :const:"
"`LOG_ERR`, :const:`LOG_WARNING`, :const:`LOG_NOTICE`, :const:`LOG_INFO`, :"
"const:`LOG_DEBUG`."
msgstr ""
":const:`LOG_EMERG` 、 :const:`LOG_ALERT` 、 :const:`LOG_CRIT` 、 :const:"
"`LOG_ERR` 、 :const:`LOG_WARNING` 、 :const:`LOG_NOTICE` 、 :const:"
"`LOG_INFO` 、 :const:`LOG_DEBUG` 。"

#: ../../library/syslog.rst:85
msgid "Facilities:"
msgstr "機能:"

#: ../../library/syslog.rst:81
msgid ""
":const:`LOG_KERN`, :const:`LOG_USER`, :const:`LOG_MAIL`, :const:"
"`LOG_DAEMON`, :const:`LOG_AUTH`, :const:`LOG_LPR`, :const:`LOG_NEWS`, :const:"
"`LOG_UUCP`, :const:`LOG_CRON`, :const:`LOG_SYSLOG`, :const:`LOG_LOCAL0` to :"
"const:`LOG_LOCAL7`, and, if defined in ``<syslog.h>``, :const:`LOG_AUTHPRIV`."
msgstr ""
":const:`LOG_KERN` 、 :const:`LOG_USER` 、 :const:`LOG_MAIL` 、 :const:"
"`LOG_DAEMON` 、 :const:`LOG_AUTH` 、 :const:`LOG_LPR` 、 :const:"
"`LOG_NEWS` 、 :const:`LOG_UUCP` 、 :const:`LOG_CRON` 、:const:"
"`LOG_SYSLOG` 、 :const:`LOG_LOCAL0` から :const:`LOG_LOCAL7` 、および "
"``<syslog.h>`` で定義されていれば、 :const:`LOG_AUTHPRIV` 。"

#: ../../library/syslog.rst:91
msgid "Log options:"
msgstr "ログオプション:"

#: ../../library/syslog.rst:88
msgid ""
":const:`LOG_PID`, :const:`LOG_CONS`, :const:`LOG_NDELAY`, and, if defined in "
"``<syslog.h>``, :const:`LOG_ODELAY`, :const:`LOG_NOWAIT`, and :const:"
"`LOG_PERROR`."
msgstr ""
":const:`LOG_PID` 、 :const:`LOG_CONS` 、 :const:`LOG_NDELAY` 、また "
"``<syslog.h>`` で定義されている場合、 :const:`LOG_ODELAY`、 :const:"
"`LOG_NOWAIT` 、および :const:`LOG_PERROR` 。"

#: ../../library/syslog.rst:94
msgid "Examples"
msgstr "使用例"

#: ../../library/syslog.rst:97
msgid "Simple example"
msgstr "シンプルな例"

#: ../../library/syslog.rst:99
msgid "A simple set of examples::"
msgstr "1つ目のシンプルな例::"

#: ../../library/syslog.rst:107
msgid ""
"An example of setting some log options, these would include the process ID "
"in logged messages, and write the messages to the destination facility used "
"for mail logging::"
msgstr ""
"いくつかのログオプションを設定する例。ログメッセージにプロセスIDを含み、メッ"
"セージをメールのログ用の facility にメッセージを書きます::"
