# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/contextvars.rst:2
msgid ":mod:`contextvars` --- Context Variables"
msgstr ":mod:`contextvars` --- コンテキスト変数"

#: ../../library/contextvars.rst:11
msgid ""
"This module provides APIs to manage, store, and access context-local state.  "
"The :class:`~contextvars.ContextVar` class is used to declare and work with "
"*Context Variables*.  The :func:`~contextvars.copy_context` function and "
"the :class:`~contextvars.Context` class should be used to manage the current "
"context in asynchronous frameworks."
msgstr ""
"このモジュールは、コンテキストローカルな状態を管理し、保持し、アクセスするた"
"めの API を提供します。\n"
":class:`~contextvars.ContextVar` クラスは *コンテキスト変数* を宣言し、取り扱"
"うために使われます。\n"
"非同期フレームワークで現時点のコンテキストを管理するのには、 :func:"
"`~contextvars.copy_context` 関数と :class:`~contextvars.Context` クラスを使う"
"べきです。"

#: ../../library/contextvars.rst:17
msgid ""
"Context managers that have state should use Context Variables instead of :"
"func:`threading.local()` to prevent their state from bleeding to other code "
"unexpectedly, when used in concurrent code."
msgstr ""
"状態を持っているコンテキストマネージャは :func:`threading.local()` ではなくコ"
"ンテキスト変数を使い、並行処理のコードから状態が意図せず他のコードへ漏れ出す"
"のを避けるべきです。"

#: ../../library/contextvars.rst:21
msgid "See also :pep:`567` for additional details."
msgstr "より詳しくは :pep:`567` を参照をしてください。"

#: ../../library/contextvars.rst:27
msgid "Context Variables"
msgstr "コンテキスト変数"

#: ../../library/contextvars.rst:31
msgid "This class is used to declare a new Context Variable, e.g.::"
msgstr ""
"このクラスは新しいコンテキスト変数を宣言するのに使われます。例えば、次の通り"
"です:"

#: ../../library/contextvars.rst:35
msgid ""
"The required *name* parameter is used for introspection and debug purposes."
msgstr "必須のパラメータの *name* は内観やデバッグの目的で使われます。"

#: ../../library/contextvars.rst:38
msgid ""
"The optional keyword-only *default* parameter is returned by :meth:"
"`ContextVar.get` when no value for the variable is found in the current "
"context."
msgstr ""
"オプションのキーワード専用引数 *default* は、現在のコンテキストにその変数の値"
"が見付からなかったときに :meth:`ContextVar.get` から返されます。"

#: ../../library/contextvars.rst:42
msgid ""
"**Important:** Context Variables should be created at the top module level "
"and never in closures.  :class:`Context` objects hold strong references to "
"context variables which prevents context variables from being properly "
"garbage collected."
msgstr ""
"**重要:** コンテキスト変数は、モジュールのトップレベルで生成する必要があり、"
"クロージャの中で作成すべきではありません。:class:`Context` オブジェクトはコン"
"テキスト変数への強参照を持っており、コンテキスト変数がガーベジコレクトされる"
"のを防ぎます。"

#: ../../library/contextvars.rst:49
msgid "The name of the variable.  This is a read-only property."
msgstr "変数の名前。読み出し専用のプロパティです。"

#: ../../library/contextvars.rst:55
msgid "Return a value for the context variable for the current context."
msgstr "現在のコンテキストのコンテキスト変数の値を返します。"

#: ../../library/contextvars.rst:57
msgid ""
"If there is no value for the variable in the current context, the method "
"will:"
msgstr "現在のコンテキストのコンテキスト変数に値がなければ、メソッドは:"

#: ../../library/contextvars.rst:60
msgid ""
"return the value of the *default* argument of the method, if provided; or"
msgstr ""
"メソッドの *default* 引数に値が指定されていればその値を返します。さもなければ"

#: ../../library/contextvars.rst:63
msgid ""
"return the default value for the context variable, if it was created with "
"one; or"
msgstr ""
"コンテキスト変数が生成された時にデフォルト値が渡されていれば、その値を返しま"
"す。さもなければ"

#: ../../library/contextvars.rst:66
msgid "raise a :exc:`LookupError`."
msgstr ":exc:`LookupError` を送出します。"

#: ../../library/contextvars.rst:70
msgid ""
"Call to set a new value for the context variable in the current context."
msgstr ""
"現在のコンテキストのコンテキスト変数に新しい値を設定する際に呼び出します。"

#: ../../library/contextvars.rst:73
msgid ""
"The required *value* argument is the new value for the context variable."
msgstr "*value* は必須の引数で、コンテキスト変数の新しい値を指定します。"

#: ../../library/contextvars.rst:76
msgid ""
"Returns a :class:`~contextvars.Token` object that can be used to restore the "
"variable to its previous value via the :meth:`ContextVar.reset` method."
msgstr ""
":class:`~contextvars.Token` オブジェクトを返します。このオブジェクトを :meth:"
"`ContextVar.reset` メソッドに渡すことで、以前の値に戻すことができます。"

#: ../../library/contextvars.rst:82
msgid ""
"Reset the context variable to the value it had before the :meth:`ContextVar."
"set` that created the *token* was used."
msgstr ""
"コンテキスト変数の値を、 *token* を生成した :meth:`ContextVar.set` が呼び出さ"
"れる前の値にリセットします。"

#: ../../library/contextvars.rst:85
msgid "For example::"
msgstr "例えば::"

#: ../../library/contextvars.rst:99
msgid ""
"*Token* objects are returned by the :meth:`ContextVar.set` method. They can "
"be passed to the :meth:`ContextVar.reset` method to revert the value of the "
"variable to what it was before the corresponding *set*."
msgstr ""
"*Token* オブジェクトは、:meth:`ContextVar.set` メソッドによって返されるオブ"
"ジェクトです。このオブジェクトを :meth:`ContextVar.reset` メソッドに渡すこと"
"で、対応する *set* を呼び出す前のコンテキスト変数の値に戻せます。"

#: ../../library/contextvars.rst:106
msgid ""
"A read-only property.  Points to the :class:`ContextVar` object that created "
"the token."
msgstr ""
"読み出し専用のプロパティです。トークンを生成した :class:`ContextVar` オブジェ"
"クトを指します。"

#: ../../library/contextvars.rst:111
msgid ""
"A read-only property.  Set to the value the variable had before the :meth:"
"`ContextVar.set` method call that created the token. It points to :attr:"
"`Token.MISSING` if the variable was not set before the call."
msgstr ""
"読み出し専用のプロパティです。このトークンを作成した :meth:`ContextVar.set` "
"メソッドの呼び出しの前に持っていた値に設定されています。もし呼び出しの前に値"
"が設定されていなければ :attr:`Token.MISSING` を指します。"

#: ../../library/contextvars.rst:118
msgid "A marker object used by :attr:`Token.old_value`."
msgstr ":attr:`Token.old_value` で利用されるマーカーオブジェクトです。"

#: ../../library/contextvars.rst:122
msgid "Manual Context Management"
msgstr "マニュアルでのコンテキスト管理"

#: ../../library/contextvars.rst:126
msgid "Returns a copy of the current :class:`~contextvars.Context` object."
msgstr "現在の :class:`~contextvars.Context` オブジェクトのコピーを返します。"

#: ../../library/contextvars.rst:128
msgid ""
"The following snippet gets a copy of the current context and prints all "
"variables and their values that are set in it::"
msgstr ""
"次のスニペットは、現在のコンテキストのコピーを取得し、コンテキストに設定され"
"ているすべての変数とその値を表示します::"

#: ../../library/contextvars.rst:134
msgid ""
"The function has an O(1) complexity, i.e. works equally fast for contexts "
"with a few context variables and for contexts that have a lot of them."
msgstr ""
"この関数の複雑性はO(1) です。つまり、少数のコンテキスト変数を持つコンテキスト"
"と多くの変数を持つコンテキストで同程度の速度で動作します。"

#: ../../library/contextvars.rst:141
msgid "A mapping of :class:`ContextVars <ContextVar>` to their values."
msgstr ":class:`ContextVars` とその値の対応付け。"

#: ../../library/contextvars.rst:143
msgid ""
"``Context()`` creates an empty context with no values in it. To get a copy "
"of the current context use the :func:`~contextvars.copy_context` function."
msgstr ""
"``Context()`` は、値を持たない空のコンテキストを生成します。現在のコンテキス"
"トのコピーを得るには、:func:`~contextvars.copy_context` 関数を利用します。"

#: ../../library/contextvars.rst:147
msgid ""
"Every thread will have a different top-level :class:`~contextvars.Context` "
"object. This means that a :class:`ContextVar` object behaves in a similar "
"fashion to :func:`threading.local()` when values are assigned in different "
"threads."
msgstr ""

#: ../../library/contextvars.rst:152
msgid "Context implements the :class:`collections.abc.Mapping` interface."
msgstr ""
"Context は、 :class:`collections.abc.Mapping` インターフェースを実装します。"

#: ../../library/contextvars.rst:156
msgid ""
"Execute ``callable(*args, **kwargs)`` code in the context object the *run* "
"method is called on.  Return the result of the execution or propagate an "
"exception if one occurred."
msgstr ""
"``callable(*args, **kwargs)`` を *run* メソッドが呼ばれたコンテキストオブジェ"
"クトの中で実行します。実行した結果を返すか、例外が発生した場合はその例外を伝"
"播します。"

#: ../../library/contextvars.rst:160
msgid ""
"Any changes to any context variables that *callable* makes will be contained "
"in the context object::"
msgstr ""
"*callable* が行ったコンテキスト変数へのいかなる変更も、コンテキストオブジェク"
"トに格納されます::"

#: ../../library/contextvars.rst:189
msgid ""
"The method raises a :exc:`RuntimeError` when called on the same context "
"object from more than one OS thread, or when called recursively."
msgstr ""
"2つ以上の OS スレッドから同一のコンテキストオブジェクトを呼び出すか、再帰的に"
"呼び出したとき、メソッドは :exc:`RuntimeError` を送出します。"

#: ../../library/contextvars.rst:195
msgid "Return a shallow copy of the context object."
msgstr "コンテキストオブジェクトの浅いコピーを返します。"

#: ../../library/contextvars.rst:199
msgid ""
"Return ``True`` if the *context* has a value for *var* set; return ``False`` "
"otherwise."
msgstr ""
"*context* に *var* の値が設定されていた場合 ``True`` を返します; そうでない場"
"合は ``False`` を返します。"

#: ../../library/contextvars.rst:204
msgid ""
"Return the value of the *var* :class:`ContextVar` variable. If the variable "
"is not set in the context object, a :exc:`KeyError` is raised."
msgstr ""
":class:`ContextVar` *var* の値を返します。コンテキストオブジェクト内で変数が"
"設定されていない場合は、:exc:`KeyError` を送出します。"

#: ../../library/contextvars.rst:210
msgid ""
"Return the value for *var* if *var* has the value in the context object.  "
"Return *default* otherwise.  If *default* is not given, return ``None``."
msgstr ""
"*var* がコンテキストオブジェクトの中に値を持てば、その値を返します。さもなけ"
"れば、*default* を返します。*default* を指定していなければ、``None`` を返しま"
"す。"

#: ../../library/contextvars.rst:216
msgid "Return an iterator over the variables stored in the context object."
msgstr "コンテキストオブジェクトに格納されている変数群のイテレータを返します。"

#: ../../library/contextvars.rst:221
msgid "Return the number of variables set in the context object."
msgstr "コンテキストオブジェクトに格納されている変数の数を返します。"

#: ../../library/contextvars.rst:225
msgid "Return a list of all variables in the context object."
msgstr "コンテキストオブジェクト中のすべての変数のリストを返します。"

#: ../../library/contextvars.rst:229
msgid "Return a list of all variables' values in the context object."
msgstr "コンテキストオブジェクト中のすべての変数の値のリストを返します。"

#: ../../library/contextvars.rst:234
msgid ""
"Return a list of 2-tuples containing all variables and their values in the "
"context object."
msgstr ""
"コンテキストオブジェクト中のすべての変数について、変数とその値からなる2要素の"
"タプルのリストを返します。"

#: ../../library/contextvars.rst:239
msgid "asyncio support"
msgstr "asyncio サポート"

#: ../../library/contextvars.rst:241
msgid ""
"Context variables are natively supported in :mod:`asyncio` and are ready to "
"be used without any extra configuration.  For example, here is a simple echo "
"server, that uses a context variable to make the address of a remote client "
"available in the Task that handles that client::"
msgstr ""
"コンテキスト変数は、追加の設定なしに :mod:`asyncio` をサポートします。例え"
"ば、次の単純なechoサーバーは、クライアントを扱う Task の中でリモートクライア"
"ントのアドレスが利用できるように、コンテキスト変数を利用します::"
