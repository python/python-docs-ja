# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2017
# Masato HASHIMOTO <cabezon.hashimoto@gmail.com>, 2017
# Yusuke Miyazaki <miyazaki.dev@gmail.com>, 2017
# Arihiro TAKASE, 2017
# 伏尾 佳悟 <fushio.keigo@gmail.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 12:40+0000\n"
"PO-Revision-Date: 2017-02-16 17:46+0000\n"
"Last-Translator: 伏尾 佳悟 <fushio.keigo@gmail.com>, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/2to3.rst:4
msgid "2to3 - Automated Python 2 to 3 code translation"
msgstr "2to3 - Python 2 から 3 への自動コード変換"

#: ../../library/2to3.rst:8
msgid ""
"2to3 is a Python program that reads Python 2.x source code and applies a "
"series of *fixers* to transform it into valid Python 3.x code.  The standard"
" library contains a rich set of fixers that will handle almost all code.  "
"2to3 supporting library :mod:`lib2to3` is, however, a flexible and generic "
"library, so it is possible to write your own fixers for 2to3.  "
":mod:`lib2to3` could also be adapted to custom applications in which Python "
"code needs to be edited automatically."
msgstr ""
"2to3 は、 Python 2.x のソースコードを読み込み、一連の *変換プログラム* を適用して Python 3.x "
"のコードに変換するプログラムです。標準ライブラリはほとんど全てのコードを取り扱うのに十分な変換プログラムを含んでいます。ただし 2to3 を構成している"
" :mod:`lib2to3` は柔軟かつ一般的なライブラリなので、 2to3 のために自分で変換プログラムを書くこともできます。 "
":mod:`lib2to3` は、 Python コードを自動編集する必要がある場合にも適用することができます。"

#: ../../library/2to3.rst:20
msgid "Using 2to3"
msgstr "2to3 の使用"

#: ../../library/2to3.rst:22
msgid ""
"2to3 will usually be installed with the Python interpreter as a script.  It "
"is also located in the :file:`Tools/scripts` directory of the Python root."
msgstr ""
"2to3 は大抵の場合、 Python インタープリターと共に、スクリプトとしてインストールされます。場所は、 Python "
"のルートディレクトリにある、 :file:`Tools/scripts` ディレクトリです。"

#: ../../library/2to3.rst:25
msgid ""
"2to3's basic arguments are a list of files or directories to transform.  The"
" directories are recursively traversed for Python sources."
msgstr ""
"2to3 に与える基本の引数は、変換対象のファイル、もしくは、ディレクトリのリストです。ディレクトリの場合は、 Python "
"ソースコードを再帰的に探索します。"

#: ../../library/2to3.rst:28
msgid "Here is a sample Python 2.x source file, :file:`example.py`::"
msgstr "Python 2.x のサンプルコード、 :file:`example.py` を示します::"

#: ../../library/2to3.rst:36
msgid "It can be converted to Python 3.x code via 2to3 on the command line:"
msgstr "これは、コマンドラインから 2to3 を呼び出すことで、Python 3.x コードに変換されます:"

#: ../../library/2to3.rst:42
msgid ""
"A diff against the original source file is printed.  2to3 can also write the"
" needed modifications right back to the source file.  (A backup of the "
"original file is made unless :option:`!-n` is also given.)  Writing the "
"changes back is enabled with the :option:`!-w` flag:"
msgstr ""
"オリジナルのソースファイルに対する差分が表示されます。 2to3 は必要となる変更をソースファイルに書き込むこともできます (:option:`!-n`"
" も与えたのでない限りオリジナルのバックアップも作成されます)。変更の書き戻しは :option:`!-w` フラグによって有効化されます:"

#: ../../library/2to3.rst:51
msgid "After transformation, :file:`example.py` looks like this::"
msgstr "変換後、 :file:`example.py` は以下のようになります::"

#: ../../library/2to3.rst:59
msgid ""
"Comments and exact indentation are preserved throughout the translation "
"process."
msgstr "変換処理を通じて、コメントと、インデントは保存されます。"

#: ../../library/2to3.rst:61
msgid ""
"By default, 2to3 runs a set of :ref:`predefined fixers <2to3-fixers>`.  The "
":option:`!-l` flag lists all available fixers.  An explicit set of fixers to"
" run can be given with :option:`!-f`.  Likewise the :option:`!-x` explicitly"
" disables a fixer.  The following example runs only the ``imports`` and "
"``has_key`` fixers:"
msgstr ""
"デフォルトでは、 2to3 は一連の :ref:`事前定義された変換プログラム <2to3-fixers>` を実行します。 :option:`!-l`"
" フラグは、利用可能な変換プログラムの一覧を表示します。 :option:`!-f` "
"フラグにより、実行する変換プログラムを明示的に与えることもできます。同様に、 :option:`!-x` "
"は変換プログラムを明示的に無効化します。下記の例では、 ``imports`` と ``has_key`` 変換プログラムだけを実行します:"

#: ../../library/2to3.rst:70
msgid "This command runs every fixer except the ``apply`` fixer:"
msgstr "このコマンドは ``apply`` 以外のすべての変換プログラムを実行します:"

#: ../../library/2to3.rst:76
msgid ""
"Some fixers are *explicit*, meaning they aren't run by default and must be "
"listed on the command line to be run.  Here, in addition to the default "
"fixers, the ``idioms`` fixer is run:"
msgstr ""
"いくつかの変換プログラムは "
"*明示的*、つまり、デフォルトでは実行されず、コマンドラインで実行するものとして列記する必要があります。デフォルトの変換プログラムに "
"``idioms`` 変換プログラムを追加して実行するには、下記のようにします:"

#: ../../library/2to3.rst:84
msgid "Notice how passing ``all`` enables all default fixers."
msgstr "ここで、 ``all`` を指定することで、全てのデフォルトの変換プログラムを有効化できることに注意して下さい。"

#: ../../library/2to3.rst:86
msgid ""
"Sometimes 2to3 will find a place in your source code that needs to be "
"changed, but 2to3 cannot fix automatically.  In this case, 2to3 will print a"
" warning beneath the diff for a file.  You should address the warning in "
"order to have compliant 3.x code."
msgstr ""
"2to3 がソースコードに修正すべき点を見つけても、自動的には修正できない場合もあります。この場合、 2to3 "
"はファイルの変更点の下に警告を表示します。 3.x に準拠したコードにするために、あなたはこの警告に対処しなくてはなりません。"

#: ../../library/2to3.rst:91
msgid ""
"2to3 can also refactor doctests.  To enable this mode, use the :option:`!-d`"
" flag.  Note that *only* doctests will be refactored.  This also doesn't "
"require the module to be valid Python.  For example, doctest like examples "
"in a reST document could also be refactored with this option."
msgstr ""
"2to3 は doctest の修正もできます。このモードを有効化するには :option:`!-d` フラグを指定して下さい。 doctest "
"*だけ* が修正されることに注意して下さい。これは、モジュールが有効な Python コードであることを要求しないということでもあります。例えば、 "
"reST ドキュメント中の doctest に似たサンプルコードなども、このオプションで修正することができます。"

#: ../../library/2to3.rst:96
msgid ""
"The :option:`!-v` option enables output of more information on the "
"translation process."
msgstr ":option:`!-v` は、変換処理のより詳しい情報の出力を有効化します。"

#: ../../library/2to3.rst:99
msgid ""
"Since some print statements can be parsed as function calls or statements, "
"2to3 cannot always read files containing the print function.  When 2to3 "
"detects the presence of the ``from __future__ import print_function`` "
"compiler directive, it modifies its internal grammar to interpret "
":func:`print` as a function.  This change can also be enabled manually with "
"the :option:`!-p` flag.  Use :option:`!-p` to run fixers on code that "
"already has had its print statements converted."
msgstr ""
"いくつかの print 文は関数呼び出しとしても文としても解析できるので、 2to3 は print 関数を含むファイルを常に読めるとは限りません。 "
"2to3 は ``from __future__ import print_function`` "
"コンパイラディレクティブが存在することを検出すると、内部の文法を変更して :func:`print` を関数として解釈するようになります。 "
":option:`!-p` フラグによって手動でこの変更を有効化することもできます。 print "
"文を変換済みのコードに対して変換プログラムを適用するには :option:`!-p` を使用してください。"

#: ../../library/2to3.rst:107
msgid ""
"The :option:`!-o` or :option:`!--output-dir` option allows specification of "
"an alternate directory for processed output files to be written to.  The "
":option:`!-n` flag is required when using this as backup files do not make "
"sense when not overwriting the input files."
msgstr ""

#: ../../library/2to3.rst:112
msgid "The :option:`!-o` option was added."
msgstr ""

#: ../../library/2to3.rst:115
msgid ""
"The :option:`!-W` or :option:`!--write-unchanged-files` flag tells 2to3 to "
"always write output files even if no changes were required to the file.  "
"This is most useful with :option:`!-o` so that an entire Python source tree "
"is copied with translation from one directory to another. This option "
"implies the :option:`!-w` flag as it would not make sense otherwise."
msgstr ""

#: ../../library/2to3.rst:121
msgid "The :option:`!-W` flag was added."
msgstr ""

#: ../../library/2to3.rst:124
msgid ""
"The :option:`!--add-suffix` option specifies a string to append to all "
"output filenames.  The :option:`!-n` flag is required when specifying this "
"as backups are not necessary when writing to different filenames.  Example:"
msgstr ""

#: ../../library/2to3.rst:132
msgid "Will cause a converted file named ``example.py3`` to be written."
msgstr "とすれば変換後ファイルは ``example.py3`` として書き出されます。"

#: ../../library/2to3.rst:134
msgid "The :option:`!--add-suffix` option was added."
msgstr ""

#: ../../library/2to3.rst:137
msgid "To translate an entire project from one directory tree to another use:"
msgstr ""

#: ../../library/2to3.rst:147
msgid "Fixers"
msgstr "変換プログラム"

#: ../../library/2to3.rst:149
msgid ""
"Each step of transforming code is encapsulated in a fixer.  The command "
"``2to3 -l`` lists them.  As :ref:`documented above <2to3-using>`, each can "
"be turned on and off individually.  They are described here in more detail."
msgstr ""
"コード変形の各ステップは変換プログラムに隠蔽されます。 ``2to3 -l`` コマンドは変換プログラムのリストを表示します。 :ref:`上記 "
"<2to3-using>` の通り、それぞれの変換プログラムを個別に有効化したり無効化したりすることができます。ここではそれらをさらに詳細に説明します。"

#: ../../library/2to3.rst:156
msgid ""
"Removes usage of :func:`apply`.  For example ``apply(function, *args, "
"**kwargs)`` is converted to ``function(*args, **kwargs)``."
msgstr ""
":func:`apply` の使用を削除します。例えば ``apply(function, *args, **kwargs)`` は "
"``function(*args, **kwargs)`` に変換されます。"

#: ../../library/2to3.rst:161
msgid ""
"Replaces deprecated :mod:`unittest` method names with the correct ones."
msgstr "廃止になった :mod:`unittest` メソッド名を新しい名前に置換します。"

#: ../../library/2to3.rst:164 ../../library/2to3.rst:352
msgid "From"
msgstr "対象"

#: ../../library/2to3.rst:164 ../../library/2to3.rst:352
msgid "To"
msgstr "変換先"

#: ../../library/2to3.rst:166
msgid "``failUnlessEqual(a, b)``"
msgstr "``failUnlessEqual(a, b)``"

#: ../../library/2to3.rst:166 ../../library/2to3.rst:168
msgid ":meth:`assertEqual(a, b) <unittest.TestCase.assertEqual>`"
msgstr ":meth:`assertEqual(a, b) <unittest.TestCase.assertEqual>`"

#: ../../library/2to3.rst:168
msgid "``assertEquals(a, b)``"
msgstr "``assertEquals(a, b)``"

#: ../../library/2to3.rst:170
msgid "``failIfEqual(a, b)``"
msgstr "``failIfEqual(a, b)``"

#: ../../library/2to3.rst:170 ../../library/2to3.rst:172
msgid ":meth:`assertNotEqual(a, b) <unittest.TestCase.assertNotEqual>`"
msgstr ":meth:`assertNotEqual(a, b) <unittest.TestCase.assertNotEqual>`"

#: ../../library/2to3.rst:172
msgid "``assertNotEquals(a, b)``"
msgstr "``assertNotEquals(a, b)``"

#: ../../library/2to3.rst:174
msgid "``failUnless(a)``"
msgstr "``failUnless(a)``"

#: ../../library/2to3.rst:174 ../../library/2to3.rst:176
msgid ":meth:`assertTrue(a) <unittest.TestCase.assertTrue>`"
msgstr ":meth:`assertTrue(a) <unittest.TestCase.assertTrue>`"

#: ../../library/2to3.rst:176
msgid "``assert_(a)``"
msgstr "``assert_(a)``"

#: ../../library/2to3.rst:178
msgid "``failIf(a)``"
msgstr "``failIf(a)``"

#: ../../library/2to3.rst:178
msgid ":meth:`assertFalse(a) <unittest.TestCase.assertFalse>`"
msgstr ":meth:`assertFalse(a) <unittest.TestCase.assertFalse>`"

#: ../../library/2to3.rst:180
msgid "``failUnlessRaises(exc, cal)``"
msgstr "``failUnlessRaises(exc, cal)``"

#: ../../library/2to3.rst:180
msgid ":meth:`assertRaises(exc, cal) <unittest.TestCase.assertRaises>`"
msgstr ":meth:`assertRaises(exc, cal) <unittest.TestCase.assertRaises>`"

#: ../../library/2to3.rst:182
msgid "``failUnlessAlmostEqual(a, b)``"
msgstr "``failUnlessAlmostEqual(a, b)``"

#: ../../library/2to3.rst:182 ../../library/2to3.rst:184
msgid ":meth:`assertAlmostEqual(a, b) <unittest.TestCase.assertAlmostEqual>`"
msgstr ":meth:`assertAlmostEqual(a, b) <unittest.TestCase.assertAlmostEqual>`"

#: ../../library/2to3.rst:184
msgid "``assertAlmostEquals(a, b)``"
msgstr "``assertAlmostEquals(a, b)``"

#: ../../library/2to3.rst:186
msgid "``failIfAlmostEqual(a, b)``"
msgstr "``failIfAlmostEqual(a, b)``"

#: ../../library/2to3.rst:186 ../../library/2to3.rst:188
msgid ""
":meth:`assertNotAlmostEqual(a, b) <unittest.TestCase.assertNotAlmostEqual>`"
msgstr ""
":meth:`assertNotAlmostEqual(a, b) <unittest.TestCase.assertNotAlmostEqual>`"

#: ../../library/2to3.rst:188
msgid "``assertNotAlmostEquals(a, b)``"
msgstr "``assertNotAlmostEquals(a, b)``"

#: ../../library/2to3.rst:194
msgid "Converts :class:`basestring` to :class:`str`."
msgstr ":class:`basestring` を :class:`str` に変換します。"

#: ../../library/2to3.rst:198
msgid ""
"Converts :class:`buffer` to :class:`memoryview`.  This fixer is optional "
"because the :class:`memoryview` API is similar but not exactly the same as "
"that of :class:`buffer`."
msgstr ""
":class:`buffer` を :class:`memoryview` に変換します。 :class:`memoryview` API は "
":class:`buffer` と似ているものの厳密に同じではないので、この変換プログラムはオプションです。"

#: ../../library/2to3.rst:204
msgid ""
"Fixes dictionary iteration methods.  :meth:`dict.iteritems` is converted to "
":meth:`dict.items`, :meth:`dict.iterkeys` to :meth:`dict.keys`, and "
":meth:`dict.itervalues` to :meth:`dict.values`.  Similarly, "
":meth:`dict.viewitems`, :meth:`dict.viewkeys` and :meth:`dict.viewvalues` "
"are converted respectively to :meth:`dict.items`, :meth:`dict.keys` and "
":meth:`dict.values`.  It also wraps existing usages of :meth:`dict.items`, "
":meth:`dict.keys`, and :meth:`dict.values` in a call to :class:`list`."
msgstr ""
"辞書をイテレートするメソッドを修正します。 :meth:`dict.iteritems` は :meth:`dict.items` に、 "
":meth:`dict.iterkeys` は :meth:`dict.keys` に、 :meth:`dict.itervalues` は "
":meth:`dict.values` に変換されます。同様に :meth:`dict.viewitems`, "
":meth:`dict.viewkeys` :meth:`dict.viewvalues` はそれぞれ :meth:`dict.items`, "
":meth:`dict.keys`, :meth:`dict.values` に変換されます。また、 :class:`list` の呼び出しの中で "
":meth:`dict.items`, :meth:`dict.keys`, :meth:`dict.values` "
"を使用している場合はそれをラップします。"

#: ../../library/2to3.rst:214
msgid "Converts ``except X, T`` to ``except X as T``."
msgstr "``except X, T`` を ``except X as T`` に変換します。"

#: ../../library/2to3.rst:218
msgid "Converts the ``exec`` statement to the :func:`exec` function."
msgstr "``exec`` 文を :func:`exec` 関数に変換します。"

#: ../../library/2to3.rst:222
msgid ""
"Removes usage of :func:`execfile`.  The argument to :func:`execfile` is "
"wrapped in calls to :func:`open`, :func:`compile`, and :func:`exec`."
msgstr ""
":func:`execfile` の使用を削除します。 :func:`execfile` への引数は :func:`open`, "
":func:`compile`, :func:`exec` の呼び出しでラップされます。"

#: ../../library/2to3.rst:227
msgid ""
"Changes assignment of :attr:`sys.exitfunc` to use of the :mod:`atexit` "
"module."
msgstr ":attr:`sys.exitfunc` への代入を :mod:`atexit` モジュールの使用に変更します。"

#: ../../library/2to3.rst:232
msgid "Wraps :func:`filter` usage in a :class:`list` call."
msgstr ":class:`list` 呼び出しの中で :func:`filter` を使用している部分をラップします。"

#: ../../library/2to3.rst:236
msgid ""
"Fixes function attributes that have been renamed.  For example, "
"``my_function.func_closure`` is converted to ``my_function.__closure__``."
msgstr ""
"名前が変更された関数の属性を修正します。例えば ``my_function.func_closure`` は "
"``my_function.__closure__`` に変換されます。"

#: ../../library/2to3.rst:241
msgid "Removes ``from __future__ import new_feature`` statements."
msgstr "``from __future__ import new_feature`` 文を削除します。"

#: ../../library/2to3.rst:245
msgid "Renames :func:`os.getcwdu` to :func:`os.getcwd`."
msgstr ":func:`os.getcwdu` を :func:`os.getcwd` に置き換えます。"

#: ../../library/2to3.rst:249
msgid "Changes ``dict.has_key(key)`` to ``key in dict``."
msgstr "``dict.has_key(key)`` を ``key in dict`` に変更します。"

#: ../../library/2to3.rst:253
msgid ""
"This optional fixer performs several transformations that make Python code "
"more idiomatic.  Type comparisons like ``type(x) is SomeClass`` and "
"``type(x) == SomeClass`` are converted to ``isinstance(x, SomeClass)``. "
"``while 1`` becomes ``while True``.  This fixer also tries to make use of "
":func:`sorted` in appropriate places.  For example, this block ::"
msgstr ""
"このオプションの変換プログラムは、 Python コードをより Python らしい書き方にするいくつかの変形を行います。 ``type(x) is "
"SomeClass`` や ``type(x) == SomeClass`` のような型の比較は ``isinstance(x, "
"SomeClass)`` に変換されます。 ``while 1`` は ``while True`` になります。また、適切な場所では "
":func:`sorted` が使われるようにします。例えば、このブロックは ::"

#: ../../library/2to3.rst:262
msgid "is changed to ::"
msgstr "次のように変更されます ::"

#: ../../library/2to3.rst:268
msgid "Detects sibling imports and converts them to relative imports."
msgstr ""
"暗黙の相対インポート (sibling imports) を検出して、明示的な相対インポート (relative imports) に変換します。"

#: ../../library/2to3.rst:272
msgid "Handles module renames in the standard library."
msgstr "標準ライブラリ中のモジュール名の変更を扱います。"

#: ../../library/2to3.rst:276
msgid ""
"Handles other modules renames in the standard library.  It is separate from "
"the :2to3fixer:`imports` fixer only because of technical limitations."
msgstr ""
"標準ライブラリ中の別のモジュール名の変更を扱います。単に技術的な制約のために :2to3fixer:`imports` とは別になっています。"

#: ../../library/2to3.rst:281
msgid "Converts ``input(prompt)`` to ``eval(input(prompt))``."
msgstr "``input(prompt)`` を ``eval(input(prompt))`` に変換します。"

#: ../../library/2to3.rst:285
msgid "Converts :func:`intern` to :func:`sys.intern`."
msgstr ":func:`intern` を :func:`sys.intern` に変換します。"

#: ../../library/2to3.rst:289
msgid ""
"Fixes duplicate types in the second argument of :func:`isinstance`.  For "
"example, ``isinstance(x, (int, int))`` is converted to ``isinstance(x, "
"int)`` and ``isinstance(x, (int, float, int))`` is converted to "
"``isinstance(x, (int, float))``."
msgstr ""

#: ../../library/2to3.rst:296
msgid ""
"Removes imports of :func:`itertools.ifilter`, :func:`itertools.izip`, and "
":func:`itertools.imap`.  Imports of :func:`itertools.ifilterfalse` are also "
"changed to :func:`itertools.filterfalse`."
msgstr ""
":func:`itertools.ifilter`, :func:`itertools.izip`, :func:`itertools.imap` "
"のインポートを削除します。また :func:`itertools.ifilterfalse` のインポートを "
":func:`itertools.filterfalse` に変換します。"

#: ../../library/2to3.rst:302
msgid ""
"Changes usage of :func:`itertools.ifilter`, :func:`itertools.izip`, and "
":func:`itertools.imap` to their built-in equivalents. "
":func:`itertools.ifilterfalse` is changed to :func:`itertools.filterfalse`."
msgstr ""
":func:`itertools.ifilter`, :func:`itertools.izip`, :func:`itertools.imap` "
"を使っている箇所を同等の組み込み関数で置き換えます。 :func:`itertools.ifilterfalse` は "
":func:`itertools.filterfalse` に変換されます。"

#: ../../library/2to3.rst:308
msgid "Renames :class:`long` to :class:`int`."
msgstr ":class:`long` を :class:`int` に変更します。"

#: ../../library/2to3.rst:312
msgid ""
"Wraps :func:`map` in a :class:`list` call.  It also changes ``map(None, x)``"
" to ``list(x)``.  Using ``from future_builtins import map`` disables this "
"fixer."
msgstr ""
":class:`list` 呼び出しの中の :func:`map` をラップします。また、 ``map(None, x)`` を ``list(x)``"
" に変換します。 ``from future_builtins import map`` を使うと、この変換プログラムを無効にできます。"

#: ../../library/2to3.rst:318
msgid ""
"Converts the old metaclass syntax (``__metaclass__ = Meta`` in the class "
"body) to the new (``class X(metaclass=Meta)``)."
msgstr ""
"古いメタクラス構文 (クラス定義中の ``__metaclass__ = Meta``) を、新しい構文 (``class "
"X(metaclass=Meta)``) に変換します。"

#: ../../library/2to3.rst:323
msgid ""
"Fixes old method attribute names.  For example, ``meth.im_func`` is "
"converted to ``meth.__func__``."
msgstr "古いメソッドの属性名を修正します。例えば ``meth.im_func`` は ``meth.__func__`` に変換されます。"

#: ../../library/2to3.rst:328
msgid "Converts the old not-equal syntax, ``<>``, to ``!=``."
msgstr "古い不等号の構文 ``<>`` を ``!=`` に変換します。"

#: ../../library/2to3.rst:332
msgid ""
"Converts the use of iterator's :meth:`~iterator.next` methods to the "
":func:`next` function.  It also renames :meth:`next` methods to "
":meth:`~iterator.__next__`."
msgstr ""
"イテレータの :meth:`~iterator.next` メソッドの使用を :func:`next` 関数に変換します。また :meth:`next`"
" メソッドを :meth:`~iterator.__next__` に変更します。"

#: ../../library/2to3.rst:338
msgid "Renames :meth:`__nonzero__` to :meth:`~object.__bool__`."
msgstr ":meth:`__nonzero__` を :meth:`~object.__bool__` に変更します。"

#: ../../library/2to3.rst:342
msgid "Converts octal literals into the new syntax."
msgstr "8 進数リテラルを新しい構文に変換します。"

#: ../../library/2to3.rst:346
msgid ""
"Converts calls to various functions in the :mod:`operator` module to other, "
"but equivalent, function calls.  When needed, the appropriate ``import`` "
"statements are added, e.g. ``import collections.abc``.  The following "
"mapping are made:"
msgstr ""

#: ../../library/2to3.rst:354
msgid "``operator.isCallable(obj)``"
msgstr "``operator.isCallable(obj)``"

#: ../../library/2to3.rst:354
msgid "``callable(obj)``"
msgstr ""

#: ../../library/2to3.rst:355
msgid "``operator.sequenceIncludes(obj)``"
msgstr "``operator.sequenceIncludes(obj)``"

#: ../../library/2to3.rst:355
msgid "``operator.contains(obj)``"
msgstr "``operator.contains(obj)``"

#: ../../library/2to3.rst:356
msgid "``operator.isSequenceType(obj)``"
msgstr "``operator.isSequenceType(obj)``"

#: ../../library/2to3.rst:356
msgid "``isinstance(obj, collections.abc.Sequence)``"
msgstr ""

#: ../../library/2to3.rst:357
msgid "``operator.isMappingType(obj)``"
msgstr "``operator.isMappingType(obj)``"

#: ../../library/2to3.rst:357
msgid "``isinstance(obj, collections.abc.Mapping)``"
msgstr ""

#: ../../library/2to3.rst:358
msgid "``operator.isNumberType(obj)``"
msgstr "``operator.isNumberType(obj)``"

#: ../../library/2to3.rst:358
msgid "``isinstance(obj, numbers.Number)``"
msgstr "``isinstance(obj, numbers.Number)``"

#: ../../library/2to3.rst:359
msgid "``operator.repeat(obj, n)``"
msgstr "``operator.repeat(obj, n)``"

#: ../../library/2to3.rst:359
msgid "``operator.mul(obj, n)``"
msgstr "``operator.mul(obj, n)``"

#: ../../library/2to3.rst:360
msgid "``operator.irepeat(obj, n)``"
msgstr "``operator.irepeat(obj, n)``"

#: ../../library/2to3.rst:360
msgid "``operator.imul(obj, n)``"
msgstr "``operator.imul(obj, n)``"

#: ../../library/2to3.rst:365
msgid ""
"Add extra parenthesis where they are required in list comprehensions.  For "
"example, ``[x for x in 1, 2]`` becomes ``[x for x in (1, 2)]``."
msgstr ""
"リスト内包表記で必要になる括弧を追加します。例えば ``[x for x in 1, 2]`` は ``[x for x in (1, 2)]`` "
"になります。"

#: ../../library/2to3.rst:370
msgid "Converts the ``print`` statement to the :func:`print` function."
msgstr "``print`` 文を :func:`print` 関数に変換します。"

#: ../../library/2to3.rst:374
msgid ""
"Converts ``raise E, V`` to ``raise E(V)``, and ``raise E, V, T`` to ``raise "
"E(V).with_traceback(T)``.  If ``E`` is a tuple, the translation will be "
"incorrect because substituting tuples for exceptions has been removed in "
"3.0."
msgstr ""
"``raise E, V`` を ``raise E(V)`` に、``raise E, V, T`` を ``raise "
"E(V).with_traceback(T)`` に変換します。例外の代わりにタプルを使用することは 3.0 で削除されたので、``E`` "
"がタプルならこの変換は不正確になります。"

#: ../../library/2to3.rst:380
msgid "Converts :func:`raw_input` to :func:`input`."
msgstr ":func:`raw_input` を :func:`input` に変換します。"

#: ../../library/2to3.rst:384
msgid "Handles the move of :func:`reduce` to :func:`functools.reduce`."
msgstr ":func:`reduce` が :func:`functools.reduce` に移動されたことを扱います。"

#: ../../library/2to3.rst:388
msgid "Converts :func:`reload` to :func:`importlib.reload`."
msgstr ""

#: ../../library/2to3.rst:392
msgid "Changes :data:`sys.maxint` to :data:`sys.maxsize`."
msgstr ":data:`sys.maxint` を :data:`sys.maxsize` に変更します。"

#: ../../library/2to3.rst:396
msgid "Replaces backtick repr with the :func:`repr` function."
msgstr "バッククォートを使った repr を :func:`repr` 関数に置き換えます。"

#: ../../library/2to3.rst:400
msgid ""
"Replaces use of the :class:`set` constructor with set literals.  This fixer "
"is optional."
msgstr ":class:`set` コンストラクタの使用を set リテラルに置換します。この変換プログラムはオプションです。"

#: ../../library/2to3.rst:405
msgid "Renames :exc:`StandardError` to :exc:`Exception`."
msgstr ":exc:`StandardError` を :exc:`Exception` に変更します。"

#: ../../library/2to3.rst:409
msgid ""
"Changes the deprecated :data:`sys.exc_value`, :data:`sys.exc_type`, "
":data:`sys.exc_traceback` to use :func:`sys.exc_info`."
msgstr ""
"廃止された :data:`sys.exc_value`, :data:`sys.exc_type`, :data:`sys.exc_traceback`"
" の代わりに :func:`sys.exc_info` を使うように変更します。"

#: ../../library/2to3.rst:414
msgid "Fixes the API change in generator's :meth:`throw` method."
msgstr "ジェネレータの :meth:`throw` メソッドの API 変更を修正します。"

#: ../../library/2to3.rst:418
msgid ""
"Removes implicit tuple parameter unpacking.  This fixer inserts temporary "
"variables."
msgstr "関数定義における暗黙的なタプルパラメータの展開を取り除きます。この変換プログラムによって一時変数が追加されます。"

#: ../../library/2to3.rst:423
msgid ""
"Fixes code broken from the removal of some members in the :mod:`types` "
"module."
msgstr ":mod:`types` モジュールのいくつかのメンバオブジェクトが削除されたことによって壊れたコードを修正します。"

#: ../../library/2to3.rst:428
msgid "Renames :class:`unicode` to :class:`str`."
msgstr ":class:`unicode` を :class:`str` に変更します。"

#: ../../library/2to3.rst:432
msgid ""
"Handles the rename of :mod:`urllib` and :mod:`urllib2` to the :mod:`urllib` "
"package."
msgstr ":mod:`urllib` と :mod:`urllib2` が :mod:`urllib` パッケージに変更されたことを扱います。"

#: ../../library/2to3.rst:437
msgid ""
"Removes excess whitespace from comma separated items.  This fixer is "
"optional."
msgstr "コンマ区切りの要素から余計な空白を取り除きます。この変換プログラムはオプションです。"

#: ../../library/2to3.rst:442
msgid ""
"Renames :func:`xrange` to :func:`range` and wraps existing :func:`range` "
"calls with :class:`list`."
msgstr ""
":func:`xrange` を :func:`range` に変更して、既存の :func:`range` 呼び出しを :class:`list` "
"でラップします。"

#: ../../library/2to3.rst:447
msgid "Changes ``for x in file.xreadlines()`` to ``for x in file``."
msgstr "``for x in file.xreadlines()`` を ``for x in file`` に変更します。"

#: ../../library/2to3.rst:451
msgid ""
"Wraps :func:`zip` usage in a :class:`list` call.  This is disabled when "
"``from future_builtins import zip`` appears."
msgstr ""
":class:`list` 呼び出しの中で使われている :func:`zip` をラップします。これは ``from future_builtins "
"import zip`` が見つかった場合は無効にされます。"

#: ../../library/2to3.rst:456
msgid ":mod:`lib2to3` - 2to3's library"
msgstr ":mod:`lib2to3` - 2to3's library"

#: ../../library/2to3.rst:465
msgid "**Source code:** :source:`Lib/lib2to3/`"
msgstr "**ソースコード:** :source:`Lib/lib2to3/`"

#: ../../library/2to3.rst:471
msgid ""
"The :mod:`lib2to3` API should be considered unstable and may change "
"drastically in the future."
msgstr ":mod:`lib2to3` API は安定しておらず、将来、劇的に変更されるかも知れないと考えるべきです。"
