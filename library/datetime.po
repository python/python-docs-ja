# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# mollinaca, 2021
# tomo, 2024
# Takeshi Nakazato, 2024
# 石井明久, 2024
# Takanori Suzuki <takanori@takanory.net>, 2024
# Arihiro TAKASE, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-04 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:04+0000\n"
"Last-Translator: Arihiro TAKASE, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/datetime.rst:2
msgid ":mod:`!datetime` --- Basic date and time types"
msgstr ":mod:`!datetime` --- 基本的な日付と時間の型"

#: ../../library/datetime.rst:11
msgid "**Source code:** :source:`Lib/datetime.py`"
msgstr "**ソースコード:** :source:`Lib/datetime.py`"

#: ../../library/datetime.rst:17
msgid ""
"The :mod:`!datetime` module supplies classes for manipulating dates and "
"times."
msgstr ""
":mod:`!datetime` モジュールは、日付や時刻を操作するためのクラスを提供していま"
"す。"

#: ../../library/datetime.rst:19
msgid ""
"While date and time arithmetic is supported, the focus of the implementation "
"is on efficient attribute extraction for output formatting and manipulation."
msgstr ""
"日付や時刻に対する算術がサポートされている一方、実装では出力のフォーマットや"
"操作のための効率的な属性の抽出に重点を置いています。"

#: ../../library/datetime.rst:24
msgid "Skip to :ref:`the format codes <format-codes>`."
msgstr ":ref:`書式コード <format-codes>` に飛ぶ。"

#: ../../library/datetime.rst:28
msgid "Module :mod:`calendar`"
msgstr ":mod:`calendar` モジュール"

#: ../../library/datetime.rst:29
msgid "General calendar related functions."
msgstr "汎用のカレンダー関連関数。"

#: ../../library/datetime.rst:31
msgid "Module :mod:`time`"
msgstr ":mod:`time` モジュール"

#: ../../library/datetime.rst:32
msgid "Time access and conversions."
msgstr "時刻へのアクセスと変換。"

#: ../../library/datetime.rst:34
msgid "Module :mod:`zoneinfo`"
msgstr ":mod:`zoneinfo` モジュール"

#: ../../library/datetime.rst:35
msgid "Concrete time zones representing the IANA time zone database."
msgstr "IANAタイムゾーンデータベースを表す具体的なタイムゾーン。"

#: ../../library/datetime.rst:37
msgid "Package `dateutil <https://dateutil.readthedocs.io/en/stable/>`_"
msgstr "`dateutil <https://dateutil.readthedocs.io/en/stable/>`_ パッケージ"

#: ../../library/datetime.rst:38
msgid "Third-party library with expanded time zone and parsing support."
msgstr "拡張タイムゾーンと構文解析サポートのあるサードパーティーライブラリ。"

#: ../../library/datetime.rst:40
msgid "Package :pypi:`DateType`"
msgstr ":pypi:`DateType` パッケージ"

#: ../../library/datetime.rst:41
msgid ""
"Third-party library that introduces distinct static types to e.g. allow :"
"term:`static type checkers <static type checker>` to differentiate between "
"naive and aware datetimes."
msgstr ""

#: ../../library/datetime.rst:48
msgid "Aware and Naive Objects"
msgstr "Aware オブジェクトと Naive オブジェクト"

#: ../../library/datetime.rst:50
msgid ""
"Date and time objects may be categorized as \"aware\" or \"naive\" depending "
"on whether or not they include time zone information."
msgstr ""
"日時のオブジェクトは、それらがタイムゾーンの情報を含んでいるかどうかによって "
"\"aware\" あるいは \"naive\" に分類されます。"

#: ../../library/datetime.rst:53
msgid ""
"With sufficient knowledge of applicable algorithmic and political time "
"adjustments, such as time zone and daylight saving time information, an "
"**aware** object can locate itself relative to other aware objects. An aware "
"object represents a specific moment in time that is not open to "
"interpretation. [#]_"
msgstr ""
"タイムゾーンや夏時間の情報のような、アルゴリズム的で政治的な適用可能な時間調"
"節に関する知識を持っているため、 **aware** オブジェクトは他の aware オブジェ"
"クトとの相対関係を特定できます。\n"
"aware オブジェクトは解釈の余地のない特定の実時刻を表現します。 [#]_"

#: ../../library/datetime.rst:59
msgid ""
"A **naive** object does not contain enough information to unambiguously "
"locate itself relative to other date/time objects. Whether a naive object "
"represents Coordinated Universal Time (UTC), local time, or time in some "
"other time zone is purely up to the program, just like it is up to the "
"program whether a particular number represents metres, miles, or mass. Naive "
"objects are easy to understand and to work with, at the cost of ignoring "
"some aspects of reality."
msgstr ""
"**naive** オブジェクトには他の日付時刻オブジェクトとの相対関係を把握するのに"
"足る情報が含まれません。あるプログラム内の数字がメートルを表わしているのか、"
"マイルなのか、それとも質量なのかがプログラムによって異なるように、naive オブ"
"ジェクトが協定世界時 (UTC) なのか、現地時間なのか、それとも他のタイムゾーンな"
"のかはそのプログラムに依存します。Naive オブジェクトはいくつかの現実的な側面"
"を無視してしまうというコストを無視すれば、簡単に理解でき、うまく利用すること"
"ができます。"

#: ../../library/datetime.rst:66
msgid ""
"For applications requiring aware objects, :class:`.datetime` and :class:`."
"time` objects have an optional time zone information attribute, :attr:`!"
"tzinfo`, that can be set to an instance of a subclass of the abstract :class:"
"`tzinfo` class. These :class:`tzinfo` objects capture information about the "
"offset from UTC time, the time zone name, and whether daylight saving time "
"is in effect."
msgstr ""
"aware オブジェクトを必要とするアプリケーションのために、 :class:`.datetime` "
"と :class:`.time` オブジェクトは追加のタイムゾーン情報の属性 :attr:`!tzinfo` "
"を持ちます。\n"
":attr:`tzinfo` には抽象クラス :class:`tzinfo` のサブクラスのインスタンスを設"
"定できます。\n"
"これらの :class:`tzinfo` オブジェクトは UTC 時間からのオフセットやタイムゾー"
"ンの名前、夏時間が実施されるかどうかの情報を保持しています。"

#: ../../library/datetime.rst:72
msgid ""
"Only one concrete :class:`tzinfo` class, the :class:`timezone` class, is "
"supplied by the :mod:`!datetime` module. The :class:`!timezone` class can "
"represent simple time zones with fixed offsets from UTC, such as UTC itself "
"or North American EST and EDT time zones. Supporting time zones at deeper "
"levels of detail is up to the application. The rules for time adjustment "
"across the world are more political than rational, change frequently, and "
"there is no standard suitable for every application aside from UTC."
msgstr ""
"ただ一つの具象 :class:`tzinfo` クラスである :class:`timezone` クラスが :mod:"
"`!datetime` モジュールで提供されています。 :class:`!timezone` クラスは、UTCか"
"らのオフセットが固定である単純なタイムゾーン（例えばUTCそれ自体）、および北ア"
"メリカにおける東部標準時（EST）／東部夏時間（EDT）のような単純ではないタイム"
"ゾーンの両方を表現できます。より深く詳細までタイムゾーンをサポートするかはア"
"プリケーションに依存します。世界中の時刻の調整を決めるルールは合理的というよ"
"りかは政治的なもので、頻繁に変わり、UTC を除くと都合のよい基準というものはあ"
"りません。"

#: ../../library/datetime.rst:81
msgid "Constants"
msgstr "定数"

#: ../../library/datetime.rst:83
msgid "The :mod:`!datetime` module exports the following constants:"
msgstr ":mod:`!datetime` モジュールでは以下の定数を公開しています:"

#: ../../library/datetime.rst:87
msgid ""
"The smallest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MINYEAR` is 1."
msgstr ""
":class:`date` や :class:`.datetime` オブジェクトで許されている、年を表現する"
"最小の数字です。 :const:`MINYEAR` は1です。"

#: ../../library/datetime.rst:93
msgid ""
"The largest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MAXYEAR` is 9999."
msgstr ""
":class:`date` や :class:`.datetime` オブジェクトで許されている、年を表現する"
"最大の数字です。 :const:`MAXYEAR` は9999です。"

#: ../../library/datetime.rst:98
msgid "Alias for the UTC time zone singleton :attr:`datetime.timezone.utc`."
msgstr "UTCタイムゾーンシングルトン :attr:`datetime.timezone.utc` の別名。"

#: ../../library/datetime.rst:103
msgid "Available Types"
msgstr "利用可能なデータ型"

#: ../../library/datetime.rst:108
msgid ""
"An idealized naive date, assuming the current Gregorian calendar always was, "
"and always will be, in effect. Attributes: :attr:`year`, :attr:`month`, and :"
"attr:`day`."
msgstr ""
"理想的な naive な日付で、これまでもこれからも現在のグレゴリオ暦 (Gregorian "
"calender) が有効であることを仮定しています。\n"
"属性は :attr:`year`, :attr:`month`,および :attr:`day` です。"

#: ../../library/datetime.rst:116
msgid ""
"An idealized time, independent of any particular day, assuming that every "
"day has exactly 24\\*60\\*60 seconds.  (There is no notion of \"leap "
"seconds\" here.) Attributes: :attr:`hour`, :attr:`minute`, :attr:`second`, :"
"attr:`microsecond`, and :attr:`.tzinfo`."
msgstr ""
"理想的な時刻で、特定の日から独立しており、毎日が厳密に 24\\*60\\*60 秒である"
"と仮定しています。(\"うるう秒: leap seconds\" の概念はありません。)\n"
"属性は :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:`microsecond`, お"
"よび :attr:`tzinfo` です。"

#: ../../library/datetime.rst:125
msgid ""
"A combination of a date and a time. Attributes: :attr:`year`, :attr:"
"`month`, :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, and :attr:`.tzinfo`."
msgstr ""
"日付と時刻を組み合わせたものです。\n"
"属性は :attr:`year`, :attr:`month`, :attr:`day`, :attr:`hour`, :attr:"
"`minute`, :attr:`second`, :attr:`microsecond`, および :attr:`tzinfo` です。"

#: ../../library/datetime.rst:133
msgid ""
"A duration expressing the difference between two :class:`.datetime` or :"
"class:`date` instances to microsecond resolution."
msgstr ""
":class:`.datetime` あるいは :class:`date` クラスの二つのインスタンス間の時間"
"差をマイクロ秒精度で表す経過時間値です。"

#: ../../library/datetime.rst:140
msgid ""
"An abstract base class for time zone information objects. These are used by "
"the :class:`.datetime` and :class:`.time` classes to provide a customizable "
"notion of time adjustment (for example, to account for time zone and/or "
"daylight saving time)."
msgstr ""
"タイムゾーン情報オブジェクトの抽象基底クラスです。\n"
":class:`.datetime` および :class:`.time` クラスで用いられ、カスタマイズ可能な"
"時刻修正の概念 (たとえばタイムゾーンや夏時間の計算) を提供します。"

#: ../../library/datetime.rst:148
msgid ""
"A class that implements the :class:`tzinfo` abstract base class as a fixed "
"offset from the UTC."
msgstr ""
":class:`tzinfo` 抽象基底クラスを UTC からの固定オフセットとして実装するクラス"
"です。"

#: ../../library/datetime.rst:153 ../../library/datetime.rst:171
msgid "Objects of these types are immutable."
msgstr "これらの型のオブジェクトは変更不可能 (immutable) です。"

#: ../../library/datetime.rst:155
msgid "Subclass relationships::"
msgstr "サブクラスの関係は以下のようになります::"

#: ../../library/datetime.rst:157
msgid ""
"object\n"
"    timedelta\n"
"    tzinfo\n"
"        timezone\n"
"    time\n"
"    date\n"
"        datetime"
msgstr ""

#: ../../library/datetime.rst:166
msgid "Common Properties"
msgstr "共通の特徴"

#: ../../library/datetime.rst:168
msgid ""
"The :class:`date`, :class:`.datetime`, :class:`.time`, and :class:`timezone` "
"types share these common features:"
msgstr ""
":class:`date` 型、:class:`.datetime` 型、:class:`.time` 型、:class:"
"`timezone` 型には共通する特徴があります:"

#: ../../library/datetime.rst:172
msgid ""
"Objects of these types are :term:`hashable`, meaning that they can be used "
"as dictionary keys."
msgstr ""
"これらの型のオブジェクトは :term:`ハッシュ可能 <hashable>` であり、辞書のキー"
"として使えることになります。"

#: ../../library/datetime.rst:174
msgid ""
"Objects of these types support efficient pickling via the :mod:`pickle` "
"module."
msgstr ""
"これらの型のオブジェクトは :mod:`pickle` モジュールを利用して効率的な pickle "
"化をサポートしています。"

#: ../../library/datetime.rst:177
msgid "Determining if an Object is Aware or Naive"
msgstr "オブジェクトが Aware なのか Naive なのかの判断"

#: ../../library/datetime.rst:179
msgid "Objects of the :class:`date` type are always naive."
msgstr ":class:`date` 型のオブジェクトは常に naive です。"

#: ../../library/datetime.rst:181
msgid ""
"An object of type :class:`.time` or :class:`.datetime` may be aware or naive."
msgstr ""
":class:`.time` 型あるいは :class:`.datetime` 型のオブジェクトは aware か "
"naive のどちらかです。"

#: ../../library/datetime.rst:183
msgid "A :class:`.datetime` object *d* is aware if both of the following hold:"
msgstr ""
"次の条件を両方とも満たす場合、 :class:`.datetime` オブジェクト *d* は aware "
"です:"

#: ../../library/datetime.rst:185
msgid "``d.tzinfo`` is not ``None``"
msgstr "``d.tzinfo`` が ``None`` でない"

#: ../../library/datetime.rst:186
msgid "``d.tzinfo.utcoffset(d)`` does not return ``None``"
msgstr "``d.tzinfo.utcoffset(d)`` が ``None`` を返さない"

#: ../../library/datetime.rst:188
msgid "Otherwise, *d* is naive."
msgstr "どちらかを満たさない場合は、 *d* は naive です。"

#: ../../library/datetime.rst:190
msgid "A :class:`.time` object *t* is aware if both of the following hold:"
msgstr ""
"次の条件を両方とも満たす場合、 :class:`.time` オブジェクト *t* は aware です:"

#: ../../library/datetime.rst:192
msgid "``t.tzinfo`` is not ``None``"
msgstr "``t.tzinfo`` が ``None`` でない"

#: ../../library/datetime.rst:193
msgid "``t.tzinfo.utcoffset(None)`` does not return ``None``."
msgstr "``t.tzinfo.utcoffset(None)`` が ``None`` を返さない"

#: ../../library/datetime.rst:195
msgid "Otherwise, *t* is naive."
msgstr "どちらかを満たさない場合は、 *t* は naive です。"

#: ../../library/datetime.rst:197
msgid ""
"The distinction between aware and naive doesn't apply to :class:`timedelta` "
"objects."
msgstr ""
"aware なオブジェクトと naive なオブジェクトの区別は :class:`timedelta` オブ"
"ジェクトにはあてはまりません。"

#: ../../library/datetime.rst:203
msgid ":class:`timedelta` Objects"
msgstr ":class:`timedelta` オブジェクト"

#: ../../library/datetime.rst:205
msgid ""
"A :class:`timedelta` object represents a duration, the difference between "
"two :class:`.datetime` or :class:`date` instances."
msgstr ""
":class:`timedelta` オブジェクトは経過時間、すなわち二つの :class:`.datetime` "
"または :class:`date` のインスタンスの差を表します。"

#: ../../library/datetime.rst:210
msgid ""
"All arguments are optional and default to 0. Arguments may be integers or "
"floats, and may be positive or negative."
msgstr ""
"全ての引数がオプションで、デフォルト値は0です。\n"
"引数は整数、浮動小数点数でもよく、正でも負でもかまいません。"

#: ../../library/datetime.rst:213
msgid ""
"Only *days*, *seconds* and *microseconds* are stored internally. Arguments "
"are converted to those units:"
msgstr ""
"*days*, *seconds*, *microseconds* だけが内部的に保持されます。\n"
"引数は以下のようにして変換されます:"

#: ../../library/datetime.rst:216
msgid "A millisecond is converted to 1000 microseconds."
msgstr "1 ミリ秒は 1000 マイクロ秒に変換されます。"

#: ../../library/datetime.rst:217
msgid "A minute is converted to 60 seconds."
msgstr "1 分は 60 秒に変換されます。"

#: ../../library/datetime.rst:218
msgid "An hour is converted to 3600 seconds."
msgstr "1 時間は 3600 秒に変換されます。"

#: ../../library/datetime.rst:219
msgid "A week is converted to 7 days."
msgstr "1 週間は 7 日に変換されます。"

#: ../../library/datetime.rst:221
msgid ""
"and days, seconds and microseconds are then normalized so that the "
"representation is unique, with"
msgstr ""
"さらに、値が一意に表されるように days, seconds, microseconds が以下のように正"
"規化されます"

#: ../../library/datetime.rst:224
msgid "``0 <= microseconds < 1000000``"
msgstr "``0 <= microseconds < 1000000``"

#: ../../library/datetime.rst:225
msgid "``0 <= seconds < 3600*24`` (the number of seconds in one day)"
msgstr "``0 <= seconds < 3600*24`` (一日中の秒数)"

#: ../../library/datetime.rst:226
msgid "``-999999999 <= days <= 999999999``"
msgstr "``-999999999 <= days <= 999999999``"

#: ../../library/datetime.rst:228
msgid ""
"The following example illustrates how any arguments besides *days*, "
"*seconds* and *microseconds* are \"merged\" and normalized into those three "
"resulting attributes::"
msgstr ""
"次の例は、 *days*, *seconds*, *microseconds* に加えて任意の引数がどう \"集約"
"\" され、最終的に3つの属性に正規化されるかの説明をしています::"

#: ../../library/datetime.rst:232
msgid ""
">>> from datetime import timedelta\n"
">>> delta = timedelta(\n"
"...     days=50,\n"
"...     seconds=27,\n"
"...     microseconds=10,\n"
"...     milliseconds=29000,\n"
"...     minutes=5,\n"
"...     hours=8,\n"
"...     weeks=2\n"
"... )\n"
">>> # Only days, seconds, and microseconds remain\n"
">>> delta\n"
"datetime.timedelta(days=64, seconds=29156, microseconds=10)"
msgstr ""

#: ../../library/datetime.rst:246
msgid ""
"If any argument is a float and there are fractional microseconds, the "
"fractional microseconds left over from all arguments are combined and their "
"sum is rounded to the nearest microsecond using round-half-to-even "
"tiebreaker. If no argument is a float, the conversion and normalization "
"processes are exact (no information is lost)."
msgstr ""
"引数のいずれかが浮動小数点であり、小数のマイクロ秒が存在する場合、小数のマイ"
"クロ秒は全ての引数から一度取り置かれ、それらの和は最近接偶数のマイクロ秒に丸"
"められます。浮動小数点の引数がない場合、値の変換と正規化の過程は厳密な (失わ"
"れる情報がない) ものとなります。"

#: ../../library/datetime.rst:253
msgid ""
"If the normalized value of days lies outside the indicated range, :exc:"
"`OverflowError` is raised."
msgstr ""
"日の値を正規化した結果、指定された範囲の外側になった場合には、 :exc:"
"`OverflowError` が送出されます。"

#: ../../library/datetime.rst:256
msgid ""
"Note that normalization of negative values may be surprising at first. For "
"example::"
msgstr "負の値を正規化すると、最初は混乱するような値になります。例えば::"

#: ../../library/datetime.rst:259
msgid ""
">>> from datetime import timedelta\n"
">>> d = timedelta(microseconds=-1)\n"
">>> (d.days, d.seconds, d.microseconds)\n"
"(-1, 86399, 999999)"
msgstr ""

#: ../../library/datetime.rst:265 ../../library/datetime.rst:566
#: ../../library/datetime.rst:1122 ../../library/datetime.rst:1760
#: ../../library/datetime.rst:2365
msgid "Class attributes:"
msgstr "以下にクラス属性を示します:"

#: ../../library/datetime.rst:269
msgid "The most negative :class:`timedelta` object, ``timedelta(-999999999)``."
msgstr ""
"最小の値を表す :class:`timedelta` オブジェクトで、 ``timedelta(-999999999)`` "
"です。"

#: ../../library/datetime.rst:274
msgid ""
"The most positive :class:`timedelta` object, ``timedelta(days=999999999, "
"hours=23, minutes=59, seconds=59, microseconds=999999)``."
msgstr ""
"最大の値を表す :class:`timedelta` オブジェクトで、 "
"``timedelta(days=999999999, hours=23, minutes=59, seconds=59, "
"microseconds=999999)`` です。"

#: ../../library/datetime.rst:280
msgid ""
"The smallest possible difference between non-equal :class:`timedelta` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""
":class:`timedelta` オブジェクトが等しくならない最小の時間差で、 "
"``timedelta(microseconds=1)`` です。"

#: ../../library/datetime.rst:283
msgid ""
"Note that, because of normalization, ``timedelta.max`` is greater than ``-"
"timedelta.min``. ``-timedelta.max`` is not representable as a :class:"
"`timedelta` object."
msgstr ""
"正規化のために、 ``timedelta.max`` は ``-timedelta.min`` より大きいことに注意"
"してください。 ``-timedelta.max`` は :class:`timedelta` オブジェクトとして表"
"現することができません。"

#: ../../library/datetime.rst:287 ../../library/datetime.rst:584
#: ../../library/datetime.rst:1142 ../../library/datetime.rst:1780
msgid "Instance attributes (read-only):"
msgstr "インスタンスの属性 (読み出しのみ):"

#: ../../library/datetime.rst:291
msgid "Between -999,999,999 and 999,999,999 inclusive."
msgstr ""

#: ../../library/datetime.rst:296
msgid "Between 0 and 86,399 inclusive."
msgstr ""

#: ../../library/datetime.rst:300
msgid ""
"It is a somewhat common bug for code to unintentionally use this attribute "
"when it is actually intended to get a :meth:`~timedelta.total_seconds` value "
"instead:"
msgstr ""

#: ../../library/datetime.rst:304
msgid ""
">>> from datetime import timedelta\n"
">>> duration = timedelta(seconds=11235813)\n"
">>> duration.days, duration.seconds\n"
"(130, 3813)\n"
">>> duration.total_seconds()\n"
"11235813.0"
msgstr ""

#: ../../library/datetime.rst:315
msgid "Between 0 and 999,999 inclusive."
msgstr ""

#: ../../library/datetime.rst:318 ../../library/datetime.rst:601
#: ../../library/datetime.rst:1195
msgid "Supported operations:"
msgstr "サポートされている演算を以下に示します:"

#: ../../library/datetime.rst:323 ../../library/datetime.rst:604
#: ../../library/datetime.rst:1198
msgid "Operation"
msgstr "演算"

#: ../../library/datetime.rst:323 ../../library/datetime.rst:604
#: ../../library/datetime.rst:1198
msgid "Result"
msgstr "結果"

#: ../../library/datetime.rst:325
msgid "``t1 = t2 + t3``"
msgstr "``t1 = t2 + t3``"

#: ../../library/datetime.rst:325
msgid ""
"Sum of ``t2`` and ``t3``. Afterwards ``t1 - t2 == t3`` and ``t1 - t3 == t2`` "
"are true. (1)"
msgstr ""
"``t2`` と ``t3`` の和。演算後、``t1 - t2 == t3`` および ``t1 - t3 == t2`` は"
"真になります。(1)"

#: ../../library/datetime.rst:329
msgid "``t1 = t2 - t3``"
msgstr "``t1 = t2 - t3``"

#: ../../library/datetime.rst:329
msgid ""
"Difference of ``t2``  and ``t3``. Afterwards ``t1 == t2 - t3`` and ``t2 == "
"t1 + t3`` are true. (1)(6)"
msgstr ""
"``t2`` と ``t3`` の差。演算後、``t1 == t2 - t3`` および ``t2 == t1 + t3`` は"
"真になります。 (1)(6)"

#: ../../library/datetime.rst:333
msgid "``t1 = t2 * i or t1 = i * t2``"
msgstr "``t1 = t2 * i または t1 = i * t2``"

#: ../../library/datetime.rst:333
msgid ""
"Delta multiplied by an integer. Afterwards ``t1 // i == t2`` is true, "
"provided ``i != 0``."
msgstr ""
"時間差と整数の積。演算後、``t1 // i == t2`` は ``i != 0`` であれば真となりま"
"す。"

#: ../../library/datetime.rst:337
msgid "In general, ``t1  * i == t1 * (i-1) + t1`` is true. (1)"
msgstr "一般的に、``t1 * i == t1 * (i-1) + t1`` は真となります。(1)"

#: ../../library/datetime.rst:340
msgid "``t1 = t2 * f or t1 = f * t2``"
msgstr "``t1 = t2 * f`` または ``t1 = f * t2``"

#: ../../library/datetime.rst:340
msgid ""
"Delta multiplied by a float. The result is rounded to the nearest multiple "
"of timedelta.resolution using round-half-to-even."
msgstr ""
"時間差と浮動小数点の積。結果は最近接偶数への丸めを利用して最も近い timedelta."
"resolution の倍数に丸められます。"

#: ../../library/datetime.rst:344
msgid "``f = t2 / t3``"
msgstr "``f = t2 / t3``"

#: ../../library/datetime.rst:344
msgid ""
"Division (3) of overall duration ``t2`` by interval unit ``t3``. Returns a :"
"class:`float` object."
msgstr ""
"``t2`` を ``t3`` で除算 (3) したもの。:class:`float` オブジェクトを返します。"

#: ../../library/datetime.rst:348
msgid "``t1 = t2 / f or t1 = t2 / i``"
msgstr "``t1 = t2 / f`` または ``t1 = t2 / i``"

#: ../../library/datetime.rst:348
msgid ""
"Delta divided by a float or an int. The result is rounded to the nearest "
"multiple of timedelta.resolution using round-half-to-even."
msgstr ""
"時間差を浮動小数点や整数で除したもの。結果は最近接偶数への丸めを利用して最も"
"近い timedelta.resolution の倍数に丸められます。"

#: ../../library/datetime.rst:352
msgid "``t1 = t2 // i`` or ``t1 = t2 // t3``"
msgstr "``t1 = t2 // i`` または ``t1 = t2 // t3``"

#: ../../library/datetime.rst:352
msgid ""
"The floor is computed and the remainder (if any) is thrown away. In the "
"second case, an integer is returned. (3)"
msgstr ""
"floor が計算され、余りは (もしあれば) 捨てられます。後者の場合、整数が返され"
"ます。(3)"

#: ../../library/datetime.rst:356
msgid "``t1 = t2 % t3``"
msgstr "``t1 = t2 % t3``"

#: ../../library/datetime.rst:356
msgid "The remainder is computed as a :class:`timedelta` object. (3)"
msgstr "剰余が :class:`timedelta` オブジェクトとして計算されます。(3)"

#: ../../library/datetime.rst:359
msgid "``q, r = divmod(t1, t2)``"
msgstr "``q, r = divmod(t1, t2)``"

#: ../../library/datetime.rst:359
msgid ""
"Computes the quotient and the remainder: ``q = t1 // t2`` (3) and ``r = t1 % "
"t2``. q is an integer and r is a :class:`timedelta` object."
msgstr ""
"商と剰余が計算されます: ``q = t1 // t2`` (3) と ``r = t1 % t2`` 。q は整数で "
"r は :class:`timedelta` オブジェクトです。"

#: ../../library/datetime.rst:364
msgid "``+t1``"
msgstr "``+t1``"

#: ../../library/datetime.rst:364
msgid "Returns a :class:`timedelta` object with the same value. (2)"
msgstr "同じ値を持つ :class:`timedelta` オブジェクトを返します。(2)"

#: ../../library/datetime.rst:367
msgid "``-t1``"
msgstr "``-t1``"

#: ../../library/datetime.rst:367
msgid ""
"Equivalent to ``timedelta(-t1.days, -t1.seconds, -t1.microseconds)``, and to "
"``t1 * -1``. (1)(4)"
msgstr ""

#: ../../library/datetime.rst:371
msgid "``abs(t)``"
msgstr "``abs(t)``"

#: ../../library/datetime.rst:371
msgid ""
"Equivalent to ``+t`` when ``t.days >= 0``, and to ``-t`` when ``t.days < "
"0``. (2)"
msgstr ""
"``t.days >= 0`` のときには ``+t``, ``t.days < 0`` のときには ``-t`` となりま"
"す。(2)"

#: ../../library/datetime.rst:374
msgid "``str(t)``"
msgstr "``str(t)``"

#: ../../library/datetime.rst:374
msgid ""
"Returns a string in the form ``[D day[s], ][H]H:MM:SS[.UUUUUU]``, where D is "
"negative for negative ``t``. (5)"
msgstr ""
"``[D day[s], ][H]H:MM:SS[.UUUUUU]`` という形式の文字列を返します。``t`` が負"
"の値の場合は ``D`` は負の値となります。(5)"

#: ../../library/datetime.rst:378
msgid "``repr(t)``"
msgstr "``repr(t)``"

#: ../../library/datetime.rst:378
msgid ""
"Returns a string representation of the :class:`timedelta` object as a "
"constructor call with canonical attribute values."
msgstr ""
":class:`timedelta` オブジェクトの文字列表現を返します。その文字列は、正規の属"
"性値を持つコンストラクタ呼び出しのコードになっています。"

#: ../../library/datetime.rst:384 ../../library/datetime.rst:623
#: ../../library/datetime.rst:2596
msgid "Notes:"
msgstr "注釈:"

#: ../../library/datetime.rst:387
msgid "This is exact but may overflow."
msgstr "この演算は正確ですが、オーバフローするかもしれません。"

#: ../../library/datetime.rst:390
msgid "This is exact and cannot overflow."
msgstr "この演算は正確であり、オーバフローし得ません。"

#: ../../library/datetime.rst:393
msgid "Division by zero raises :exc:`ZeroDivisionError`."
msgstr "0 による除算は :exc:`ZeroDivisionError` を送出します。"

#: ../../library/datetime.rst:396
msgid "``-timedelta.max`` is not representable as a :class:`timedelta` object."
msgstr ""
"``-timedelta.max`` は :class:`timedelta` オブジェクトで表現することができませ"
"ん。"

#: ../../library/datetime.rst:399
msgid ""
"String representations of :class:`timedelta` objects are normalized "
"similarly to their internal representation. This leads to somewhat unusual "
"results for negative timedeltas. For example::"
msgstr ""
":class:`timedelta` オブジェクトの文字列表現は内部表現に類似した形に正規化され"
"ます。そのため負の timedelta は少し変な結果になります。例えば::"

#: ../../library/datetime.rst:403
msgid ""
">>> timedelta(hours=-5)\n"
"datetime.timedelta(days=-1, seconds=68400)\n"
">>> print(_)\n"
"-1 day, 19:00:00"
msgstr ""

#: ../../library/datetime.rst:409
msgid ""
"The expression ``t2 - t3`` will always be equal to the expression ``t2 + (-"
"t3)`` except when t3 is equal to ``timedelta.max``; in that case the former "
"will produce a result while the latter will overflow."
msgstr ""
"t3 が ``timedelta.max`` のときを除けば、式 ``t2 - t3`` は常に、式 ``t2 + (-"
"t3)`` と同等です。t3 が ``timedelta.max`` の場合、前者の式は結果の値が出ます"
"が、後者はオーバーフローを起こします。"

#: ../../library/datetime.rst:413
msgid ""
"In addition to the operations listed above, :class:`timedelta` objects "
"support certain additions and subtractions with :class:`date` and :class:`."
"datetime` objects (see below)."
msgstr ""
"上に列挙した操作に加え :class:`timedelta` オブジェクトは :class:`date` およ"
"び :class:`.datetime` オブジェクトとの間で加減算をサポートしています (下を参"
"照してください)。"

#: ../../library/datetime.rst:417
msgid ""
"Floor division and true division of a :class:`timedelta` object by another :"
"class:`timedelta` object are now supported, as are remainder operations and "
"the :func:`divmod` function. True division and multiplication of a :class:"
"`timedelta` object by a :class:`float` object are now supported."
msgstr ""
":class:`timedelta` オブジェクトの別の :class:`timedelta` オブジェクトによる、"
"切り捨て除算と真の除算、および剰余演算と :func:`divmod` 関数がサポートされる"
"ようになりました。 :class:`timedelta` オブジェクトと :class:`float` オブジェ"
"クトの真の除算と掛け算がサポートされるようになりました。"

#: ../../library/datetime.rst:423
msgid ":class:`timedelta` objects support equality and order comparisons."
msgstr ":class:`timedelta` オブジェクトは等価性と順序の比較をサポートします。"

#: ../../library/datetime.rst:425
msgid ""
"In Boolean contexts, a :class:`timedelta` object is considered to be true if "
"and only if it isn't equal to ``timedelta(0)``."
msgstr ""
"ブール演算コンテキストでは、 :class:`timedelta` オブジェクトは "
"``timedelta(0)`` に等しくない場合かつそのときに限り真となります。"

#: ../../library/datetime.rst:428 ../../library/datetime.rst:665
#: ../../library/datetime.rst:1285 ../../library/datetime.rst:1887
msgid "Instance methods:"
msgstr "インスタンスメソッド:"

#: ../../library/datetime.rst:432
msgid ""
"Return the total number of seconds contained in the duration. Equivalent to "
"``td / timedelta(seconds=1)``. For interval units other than seconds, use "
"the division form directly (e.g. ``td / timedelta(microseconds=1)``)."
msgstr ""
"この期間に含まれるトータルの秒数を返します。``td / timedelta(seconds=1)`` と"
"等価です。\n"
"秒以外の期間の単位では、直接に除算する形式 (例えば ``td / "
"timedelta(microseconds=1)``) が使われます。"

#: ../../library/datetime.rst:436
msgid ""
"Note that for very large time intervals (greater than 270 years on most "
"platforms) this method will lose microsecond accuracy."
msgstr ""
"非常に長い期間 (多くのプラットフォームでは270年以上) については、このメソッド"
"はマイクロ秒の精度を失うことがあることに注意してください。"

#: ../../library/datetime.rst:442
msgid "Examples of usage: :class:`timedelta`"
msgstr "使用例: :class:`timedelta`"

#: ../../library/datetime.rst:444
msgid "An additional example of normalization::"
msgstr "正規化の追加の例です::"

#: ../../library/datetime.rst:446
msgid ""
">>> # Components of another_year add up to exactly 365 days\n"
">>> from datetime import timedelta\n"
">>> year = timedelta(days=365)\n"
">>> another_year = timedelta(weeks=40, days=84, hours=23,\n"
"...                          minutes=50, seconds=600)\n"
">>> year == another_year\n"
"True\n"
">>> year.total_seconds()\n"
"31536000.0"
msgstr ""

#: ../../library/datetime.rst:456
msgid "Examples of :class:`timedelta` arithmetic::"
msgstr ":class:`timedelta` の計算の例です::"

#: ../../library/datetime.rst:458
msgid ""
">>> from datetime import timedelta\n"
">>> year = timedelta(days=365)\n"
">>> ten_years = 10 * year\n"
">>> ten_years\n"
"datetime.timedelta(days=3650)\n"
">>> ten_years.days // 365\n"
"10\n"
">>> nine_years = ten_years - year\n"
">>> nine_years\n"
"datetime.timedelta(days=3285)\n"
">>> three_years = nine_years // 3\n"
">>> three_years, three_years.days // 365\n"
"(datetime.timedelta(days=1095), 3)"
msgstr ""

#: ../../library/datetime.rst:475
msgid ":class:`date` Objects"
msgstr ":class:`date` オブジェクト"

#: ../../library/datetime.rst:477
msgid ""
"A :class:`date` object represents a date (year, month and day) in an "
"idealized calendar, the current Gregorian calendar indefinitely extended in "
"both directions."
msgstr ""
":class:`date` オブジェクトは、両方向に無期限に拡張された現在のグレゴリオ暦と"
"いう理想化された暦の日付 (年月日) を表します。"

#: ../../library/datetime.rst:481
msgid ""
"January 1 of year 1 is called day number 1, January 2 of year 1 is called "
"day number 2, and so on. [#]_"
msgstr ""
"1 年 1 月 1 日は日番号 1、1 年 1 月 2 日は日番号 2 と呼ばれ、他も同様です。 "
"[#]_"

#: ../../library/datetime.rst:486
msgid ""
"All arguments are required. Arguments must be integers, in the following "
"ranges:"
msgstr ""
"全ての引数が必須です。\n"
"引数は整数で、次の範囲に収まっていなければなりません:"

#: ../../library/datetime.rst:489
msgid "``MINYEAR <= year <= MAXYEAR``"
msgstr "``MINYEAR <= year <= MAXYEAR``"

#: ../../library/datetime.rst:490
msgid "``1 <= month <= 12``"
msgstr "``1 <= month <= 12``"

#: ../../library/datetime.rst:491
msgid "``1 <= day <= number of days in the given month and year``"
msgstr "``1 <= day <= 指定された月と年における日数``"

#: ../../library/datetime.rst:493 ../../library/datetime.rst:883
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised."
msgstr "範囲を超えた引数を与えた場合、 :exc:`ValueError` が送出されます。"

#: ../../library/datetime.rst:496 ../../library/datetime.rst:888
msgid "Other constructors, all class methods:"
msgstr "他のコンストラクタ、および全てのクラスメソッドを以下に示します:"

#: ../../library/datetime.rst:500
msgid "Return the current local date."
msgstr "現在のローカルな日付を返します。"

#: ../../library/datetime.rst:502
msgid "This is equivalent to ``date.fromtimestamp(time.time())``."
msgstr "``date.fromtimestamp(time.time())`` と等価です。"

#: ../../library/datetime.rst:506
msgid ""
"Return the local date corresponding to the POSIX timestamp, such as is "
"returned by :func:`time.time`."
msgstr ""
":func:`time.time` で返されるような POSIX タイムスタンプに対応するローカルな日"
"付を返します。"

#: ../../library/datetime.rst:509
msgid ""
"This may raise :exc:`OverflowError`, if the timestamp is out of the range of "
"values supported by the platform C :c:func:`localtime` function, and :exc:"
"`OSError` on :c:func:`localtime` failure. It's common for this to be "
"restricted to years from 1970 through 2038. Note that on non-POSIX systems "
"that include leap seconds in their notion of a timestamp, leap seconds are "
"ignored by :meth:`fromtimestamp`."
msgstr ""
"timestamp がプラットフォームの C 関数 :c:func:`localtime` がサポートする値の"
"範囲から外れていた場合、 :exc:`OverflowError` を送出するかもしれません。ま"
"た :c:func:`localtime` 呼び出しが失敗した場合には :exc:`OSError` を送出するか"
"もしれません。この範囲は通常は 1970 年から 2038 年までに制限されています。タ"
"イムスタンプの表記にうるう秒を含める非 POSIX なシステムでは、うるう秒は :"
"meth:`fromtimestamp` では無視されます。"

#: ../../library/datetime.rst:516
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"function. Raise :exc:`OSError` instead of :exc:`ValueError` on :c:func:"
"`localtime` failure."
msgstr ""
"timestamp がプラットフォームの C 関数 :c:func:`localtime` のサポートする値の"
"範囲から外れていた場合、 :exc:`ValueError` ではなく :exc:`OverflowError` を送"
"出するようになりました。 :c:func:`localtime` の呼び出し失敗で :exc:"
"`ValueError` ではなく :exc:`OSError` を送出するようになりました。"

#: ../../library/datetime.rst:525
msgid ""
"Return the date corresponding to the proleptic Gregorian ordinal, where "
"January 1 of year 1 has ordinal 1."
msgstr ""
"先発グレゴリオ暦による序数に対応する日付を返します。\n"
"1 年 1 月 1 日が序数 1 となります。"

#: ../../library/datetime.rst:528
msgid ""
":exc:`ValueError` is raised unless ``1 <= ordinal <= date.max.toordinal()``. "
"For any date *d*, ``date.fromordinal(d.toordinal()) == d``."
msgstr ""
"``1 <= ordinal <= date.max.toordinal()`` でない場合、 :exc:`ValueError` が送"
"出されます。\n"
"任意の日付 *d* に対し、 ``date.fromordinal(d.toordinal()) == d`` となります。"

#: ../../library/datetime.rst:535
msgid ""
"Return a :class:`date` corresponding to a *date_string* given in any valid "
"ISO 8601 format, with the following exceptions:"
msgstr ""
"以下の例外を除く、有効な ISO 8601 フォーマットで与えられた *date_string* に対"
"応する :class:`date` を返します :"

#: ../../library/datetime.rst:538 ../../library/datetime.rst:1044
msgid ""
"Reduced precision dates are not currently supported (``YYYY-MM``, ``YYYY``)."
msgstr "精度の低い日付は現在サポートされていません(``YYYY-MM``, ``YYYY``)。"

#: ../../library/datetime.rst:540 ../../library/datetime.rst:1046
msgid ""
"Extended date representations are not currently supported (``±YYYYYY-MM-"
"DD``)."
msgstr "拡張された日付表現は現在サポートされていません(``±YYYYYY-MM-DD``)。"

#: ../../library/datetime.rst:542 ../../library/datetime.rst:1048
msgid "Ordinal dates are not currently supported (``YYYY-OOO``)."
msgstr "序数の日付は現在サポートされていません(``YYYY-OOO``)。"

#: ../../library/datetime.rst:544 ../../library/datetime.rst:1050
#: ../../library/datetime.rst:1516
msgid "Examples::"
msgstr "例::"

#: ../../library/datetime.rst:546
msgid ""
">>> from datetime import date\n"
">>> date.fromisoformat('2019-12-04')\n"
"datetime.date(2019, 12, 4)\n"
">>> date.fromisoformat('20191204')\n"
"datetime.date(2019, 12, 4)\n"
">>> date.fromisoformat('2021-W01-1')\n"
"datetime.date(2021, 1, 4)"
msgstr ""

#: ../../library/datetime.rst:555
msgid "Previously, this method only supported the format ``YYYY-MM-DD``."
msgstr ""
"以前はこのメソッドは ``YYYY-MM-DD`` フォーマットのみをサポートしていました。"

#: ../../library/datetime.rst:560
msgid ""
"Return a :class:`date` corresponding to the ISO calendar date specified by "
"year, week and day. This is the inverse of the function :meth:`date."
"isocalendar`."
msgstr ""
"年月日で指定された ISO 暦の日付に対応する :class:`date` を返します。\n"
"この関数は :meth:`date.isocalendar` 関数の逆関数です。"

#: ../../library/datetime.rst:570
msgid "The earliest representable date, ``date(MINYEAR, 1, 1)``."
msgstr "表現できる最も古い日付で、``date(MINYEAR, 1, 1)`` です。"

#: ../../library/datetime.rst:575
msgid "The latest representable date, ``date(MAXYEAR, 12, 31)``."
msgstr "表現できる最も新しい日付で、``date(MAXYEAR, 12, 31)`` です。"

#: ../../library/datetime.rst:580
msgid ""
"The smallest possible difference between non-equal date objects, "
"``timedelta(days=1)``."
msgstr "等しくない日付オブジェクト間の最小の差で、``timedelta(days=1)`` です。"

#: ../../library/datetime.rst:588 ../../library/datetime.rst:1146
msgid "Between :const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr "両端値を含む :const:`MINYEAR` から :const:`MAXYEAR` までの値です。"

#: ../../library/datetime.rst:593 ../../library/datetime.rst:1151
msgid "Between 1 and 12 inclusive."
msgstr "両端値を含む 1 から 12 までの値です。"

#: ../../library/datetime.rst:598 ../../library/datetime.rst:1156
msgid "Between 1 and the number of days in the given month of the given year."
msgstr "1 から与えられた月と年における日数までの値です。"

#: ../../library/datetime.rst:606
msgid "``date2 = date1 + timedelta``"
msgstr "``date2 = date1 + timedelta``"

#: ../../library/datetime.rst:606
msgid "``date2`` will be ``timedelta.days`` days after ``date1``. (1)"
msgstr "``date2`` は ``date1`` の ``timedelta.days`` 日後になります。(1)"

#: ../../library/datetime.rst:609
msgid "``date2 = date1 - timedelta``"
msgstr "``date2 = date1 - timedelta``"

#: ../../library/datetime.rst:609
msgid "Computes ``date2`` such that ``date2 + timedelta == date1``. (2)"
msgstr ""
"``date2 + timedelta == date1`` であるような日付 ``date2`` を計算します。(2)"

#: ../../library/datetime.rst:612
msgid "``timedelta = date1 - date2``"
msgstr "``timedelta = date1 - date2``"

#: ../../library/datetime.rst:612 ../../library/datetime.rst:1204
msgid "\\(3)"
msgstr "\\(3)"

#: ../../library/datetime.rst:0
msgid "``date1 == date2``"
msgstr "``date1 == date2``"

#: ../../library/datetime.rst:0
msgid "``date1 != date2``"
msgstr "``date1 != date2``"

#: ../../library/datetime.rst:614 ../../library/datetime.rst:1206
msgid "Equality comparison. (4)"
msgstr "等価性の比較。(4)"

#: ../../library/datetime.rst:0
msgid "``date1 < date2``"
msgstr "``date1 < date2``"

#: ../../library/datetime.rst:0
msgid "``date1 > date2``"
msgstr "``date1 > date2``"

#: ../../library/datetime.rst:0
msgid "``date1 <= date2``"
msgstr "``date1 <= date2``"

#: ../../library/datetime.rst:0
msgid "``date1 >= date2``"
msgstr "``date1 >= date2``"

#: ../../library/datetime.rst:617 ../../library/datetime.rst:1209
msgid "Order comparison. (5)"
msgstr "順序の比較。(5)"

#: ../../library/datetime.rst:626
msgid ""
"*date2* is moved forward in time if ``timedelta.days > 0``, or backward if "
"``timedelta.days < 0``. Afterward ``date2 - date1 == timedelta.days``. "
"``timedelta.seconds`` and ``timedelta.microseconds`` are ignored. :exc:"
"`OverflowError` is raised if ``date2.year`` would be smaller than :const:"
"`MINYEAR` or larger than :const:`MAXYEAR`."
msgstr ""
"*date2* は、 ``timedelta.days > 0`` の場合は進む方向に、 ``timedelta.days < "
"0`` の場合は戻る方向に移動します。\n"
"演算後は ``date2 - date1 == timedelta.days`` が成立します。\n"
"``timedelta.seconds`` および ``timedelta.microseconds`` は無視されます。\n"
"``date2.year`` が :const:`MINYEAR` になってしまったり、 :const:`MAXYEAR` より"
"大きくなってしまう場合には :exc:`OverflowError` が送出されます。"

#: ../../library/datetime.rst:633
msgid "``timedelta.seconds`` and ``timedelta.microseconds`` are ignored."
msgstr "``timedelta.seconds`` と ``timedelta.microseconds`` は無視されます。"

#: ../../library/datetime.rst:636
msgid ""
"This is exact, and cannot overflow. ``timedelta.seconds`` and ``timedelta."
"microseconds`` are 0, and ``date2 + timedelta == date1`` after."
msgstr ""
"この演算は厳密で、オーバフローしません。``timedelta.seconds`` および "
"``timedelta.microseconds`` は 0 で、演算後には ``date2 + timedelta == "
"date1`` となります。"

#: ../../library/datetime.rst:640
msgid ":class:`date` objects are equal if they represent the same date."
msgstr "同じ日を表す :class:`date` オブジェクトは等しいです。"

#: ../../library/datetime.rst:642
msgid ""
":class:`!date` objects that are not also :class:`.datetime` instances are "
"never equal to :class:`!datetime` objects, even if they represent the same "
"date."
msgstr ""
":class:`.datetime` のインスタンスではない :class:`!date` オブジェクトは、同じ"
"日を表していても、:class:`!datetime` オブジェクトとは決して等価にはなりませ"
"ん。"

#: ../../library/datetime.rst:647
msgid ""
"*date1* is considered less than *date2* when *date1* precedes *date2* in "
"time. In other words, ``date1 < date2`` if and only if ``date1.toordinal() < "
"date2.toordinal()``."
msgstr ""

#: ../../library/datetime.rst:651
msgid ""
"Order comparison between a :class:`!date` object that is not also a :class:`."
"datetime` instance and a :class:`!datetime` object raises :exc:`TypeError`."
msgstr ""

#: ../../library/datetime.rst:655 ../../library/datetime.rst:1277
msgid ""
"Comparison between :class:`.datetime` object and an instance of the :class:"
"`date` subclass that is not a :class:`!datetime` subclass no longer converts "
"the latter to :class:`!date`, ignoring the time part and the time zone. The "
"default behavior can be changed by overriding the special comparison methods "
"in subclasses."
msgstr ""

#: ../../library/datetime.rst:663
msgid ""
"In Boolean contexts, all :class:`date` objects are considered to be true."
msgstr ""
"ブール演算コンテキストでは、全ての :class:`.time` オブジェクトは真とみなされ"
"ます。"

#: ../../library/datetime.rst:669
msgid ""
"Return a date with the same value, except for those parameters given new "
"values by whichever keyword arguments are specified."
msgstr ""
"キーワード引数で指定されたパラメータが置き換えられることを除き、同じ値を持"
"つ :class:`date` オブジェクトを返します。"

#: ../../library/datetime.rst:672 ../../library/datetime.rst:1933
msgid "Example::"
msgstr "以下はプログラム例です::"

#: ../../library/datetime.rst:674
msgid ""
">>> from datetime import date\n"
">>> d = date(2002, 12, 31)\n"
">>> d.replace(day=26)\n"
"datetime.date(2002, 12, 26)"
msgstr ""

#: ../../library/datetime.rst:679
msgid ""
":class:`date` objects are also supported by generic function :func:`copy."
"replace`."
msgstr ""
":class:`date` オブジェクトは汎用的な関数 :func:`copy.replace` にもサポートさ"
"れています。"

#: ../../library/datetime.rst:685 ../../library/datetime.rst:1401
msgid ""
"Return a :class:`time.struct_time` such as returned by :func:`time."
"localtime`."
msgstr ""
":func:`time.localtime` が返すような :class:`time.struct_time` を返します。"

#: ../../library/datetime.rst:687
msgid "The hours, minutes and seconds are 0, and the DST flag is -1."
msgstr "時分秒が 0 で、 DST フラグが -1 です。"

#: ../../library/datetime.rst:689 ../../library/datetime.rst:1403
msgid "``d.timetuple()`` is equivalent to::"
msgstr "``d.timetuple()`` は次の式と等価です::"

#: ../../library/datetime.rst:691
msgid ""
"time.struct_time((d.year, d.month, d.day, 0, 0, 0, d.weekday(), yday, -1))"
msgstr ""

#: ../../library/datetime.rst:693
msgid ""
"where ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the "
"day number within the current year starting with 1 for January 1st."
msgstr ""
"ここで、 ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` は本年"
"の 1 月 1 日を 1 としたときの日付番号です。"

#: ../../library/datetime.rst:699
msgid ""
"Return the proleptic Gregorian ordinal of the date, where January 1 of year "
"1 has ordinal 1. For any :class:`date` object *d*, ``date.fromordinal(d."
"toordinal()) == d``."
msgstr ""
"先発グレゴリオ暦における日付序数を返します。 1 年の 1 月 1 日が序数 1 となり"
"ます。任意の :class:`date` オブジェクト *d* について、 ``date.fromordinal(d."
"toordinal()) == d`` となります。"

#: ../../library/datetime.rst:706
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"For example, ``date(2002, 12, 4).weekday() == 2``, a Wednesday. See also :"
"meth:`isoweekday`."
msgstr ""
"月曜日を 0、日曜日を 6 として、曜日を整数で返します。例えば、 ``date(2002, "
"12, 4).weekday() == 2`` であり、水曜日を示します。 :meth:`isoweekday` も参照"
"してください。"

#: ../../library/datetime.rst:713
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"For example, ``date(2002, 12, 4).isoweekday() == 3``, a Wednesday. See also :"
"meth:`weekday`, :meth:`isocalendar`."
msgstr ""
"月曜日を 1,日曜日を 7 として、曜日を整数で返します。例えば、 ``date(2002, "
"12, 4).isoweekday() == 3`` であり、水曜日を示します。 :meth:`weekday`, :meth:"
"`isocalendar` も参照してください。"

#: ../../library/datetime.rst:720
msgid ""
"Return a :term:`named tuple` object with three components: ``year``, "
"``week`` and ``weekday``."
msgstr ""
"``year``、``week``、``weekday`` の3つで構成された :term:`named tuple` を返し"
"ます。"

#: ../../library/datetime.rst:723
msgid ""
"The ISO calendar is a widely used variant of the Gregorian calendar. [#]_"
msgstr "ISO 暦はグレゴリオ暦の変種として広く用いられています。 [#]_"

#: ../../library/datetime.rst:725
msgid ""
"The ISO year consists of 52 or 53 full weeks, and where a week starts on a "
"Monday and ends on a Sunday. The first week of an ISO year is the first "
"(Gregorian) calendar week of a year containing a Thursday. This is called "
"week number 1, and the ISO year of that Thursday is the same as its "
"Gregorian year."
msgstr ""
"ISO 年は完全な週が 52 週または 53 週あり、週は月曜から始まって日曜に終わりま"
"す。ISO 年でのある年における最初の週は、その年の木曜日を含む最初の (グレゴリ"
"オ暦での) 週となります。この週は週番号 1 と呼ばれ、この木曜日での ISO 年はグ"
"レゴリオ暦における年と等しくなります。"

#: ../../library/datetime.rst:730
msgid ""
"For example, 2004 begins on a Thursday, so the first week of ISO year 2004 "
"begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004::"
msgstr ""
"例えば、2004 年は木曜日から始まるため、ISO 年の最初の週は 2003 年 12 月 29 "
"日、月曜日から始まり、2004 年 1 月 4 日、日曜日に終わります ::"

#: ../../library/datetime.rst:733
msgid ""
">>> from datetime import date\n"
">>> date(2003, 12, 29).isocalendar()\n"
"datetime.IsoCalendarDate(year=2004, week=1, weekday=1)\n"
">>> date(2004, 1, 4).isocalendar()\n"
"datetime.IsoCalendarDate(year=2004, week=1, weekday=7)"
msgstr ""

#: ../../library/datetime.rst:739
msgid "Result changed from a tuple to a :term:`named tuple`."
msgstr "結果が タプル から :term:`named tuple` へ変更されました。"

#: ../../library/datetime.rst:744
msgid ""
"Return a string representing the date in ISO 8601 format, ``YYYY-MM-DD``::"
msgstr "日付を ISO 8601 書式の ``YYYY-MM-DD`` で表した文字列を返します::"

#: ../../library/datetime.rst:746
msgid ""
">>> from datetime import date\n"
">>> date(2002, 12, 4).isoformat()\n"
"'2002-12-04'"
msgstr ""

#: ../../library/datetime.rst:752
msgid "For a date *d*, ``str(d)`` is equivalent to ``d.isoformat()``."
msgstr ""
":class:`date` オブジェクト *d* において、``str(d)`` は ``d.isoformat()`` と等"
"価です。"

#: ../../library/datetime.rst:757
msgid "Return a string representing the date::"
msgstr "日付を表す文字列を返します::"

#: ../../library/datetime.rst:759
msgid ""
">>> from datetime import date\n"
">>> date(2002, 12, 4).ctime()\n"
"'Wed Dec  4 00:00:00 2002'"
msgstr ""

#: ../../library/datetime.rst:763 ../../library/datetime.rst:1587
msgid "``d.ctime()`` is equivalent to::"
msgstr "``d.ctime()`` は次の式と等価です::"

#: ../../library/datetime.rst:765 ../../library/datetime.rst:1589
msgid "time.ctime(time.mktime(d.timetuple()))"
msgstr ""

#: ../../library/datetime.rst:767
msgid ""
"on platforms where the native C :c:func:`ctime` function (which :func:`time."
"ctime` invokes, but which :meth:`date.ctime` does not invoke) conforms to "
"the C standard."
msgstr ""
"これが等価になるのは、 (:func:`time.ctime` に呼び出され、 :meth:`date.ctime` "
"に呼び出されない) ネイティブの C 関数 :c:func:`ctime` が C 標準に準拠している"
"プラットフォーム上でです。"

#: ../../library/datetime.rst:774
msgid ""
"Return a string representing the date, controlled by an explicit format "
"string. Format codes referring to hours, minutes or seconds will see 0 "
"values. See also :ref:`strftime-strptime-behavior` and :meth:`date."
"isoformat`."
msgstr ""
"明示的な書式文字列で制御された、日付を表現する文字列を返します。\n"
"時間、分、秒を表す書式コードは値 0 になります。\n"
":ref:`strftime-strptime-behavior` および :meth:`date.isoformat` も参照してく"
"ださい。"

#: ../../library/datetime.rst:781
msgid ""
"Same as :meth:`.date.strftime`. This makes it possible to specify a format "
"string for a :class:`.date` object in :ref:`formatted string literals <f-"
"strings>` and when using :meth:`str.format`. See also :ref:`strftime-"
"strptime-behavior` and :meth:`date.isoformat`."
msgstr ""
":meth:`date.strftime` と等価です。\n"
"これにより、 :ref:`フォーマット済み文字列リテラル <f-strings>` の中や :meth:"
"`str.format` を使っているときに :class:`.date` オブジェクトの書式文字列を指定"
"できます。\n"
":ref:`strftime-strptime-behavior` および :meth:`date.isoformat` も参照してく"
"ださい。"

#: ../../library/datetime.rst:787
msgid "Examples of Usage: :class:`date`"
msgstr "使用例: :class:`date`"

#: ../../library/datetime.rst:789
msgid "Example of counting days to an event::"
msgstr "イベントまでの日数を数える例を示します::"

#: ../../library/datetime.rst:791
msgid ""
">>> import time\n"
">>> from datetime import date\n"
">>> today = date.today()\n"
">>> today\n"
"datetime.date(2007, 12, 5)\n"
">>> today == date.fromtimestamp(time.time())\n"
"True\n"
">>> my_birthday = date(today.year, 6, 24)\n"
">>> if my_birthday < today:\n"
"...     my_birthday = my_birthday.replace(year=today.year + 1)\n"
"...\n"
">>> my_birthday\n"
"datetime.date(2008, 6, 24)\n"
">>> time_to_birthday = abs(my_birthday - today)\n"
">>> time_to_birthday.days\n"
"202"
msgstr ""

#: ../../library/datetime.rst:808
msgid "More examples of working with :class:`date`:"
msgstr "さらなる :class:`date` を使う例:"

#: ../../library/datetime.rst:810
msgid ""
">>> from datetime import date\n"
">>> d = date.fromordinal(730920) # 730920th day after 1. 1. 0001\n"
">>> d\n"
"datetime.date(2002, 3, 11)\n"
"\n"
">>> # Methods related to formatting string output\n"
">>> d.isoformat()\n"
"'2002-03-11'\n"
">>> d.strftime(\"%d/%m/%y\")\n"
"'11/03/02'\n"
">>> d.strftime(\"%A %d. %B %Y\")\n"
"'Monday 11. March 2002'\n"
">>> d.ctime()\n"
"'Mon Mar 11 00:00:00 2002'\n"
">>> 'The {1} is {0:%d}, the {2} is {0:%B}.'.format(d, \"day\", \"month\")\n"
"'The day is 11, the month is March.'\n"
"\n"
">>> # Methods for to extracting 'components' under different calendars\n"
">>> t = d.timetuple()\n"
">>> for i in t:     \n"
"...     print(i)\n"
"2002                # year\n"
"3                   # month\n"
"11                  # day\n"
"0\n"
"0\n"
"0\n"
"0                   # weekday (0 = Monday)\n"
"70                  # 70th day in the year\n"
"-1\n"
">>> ic = d.isocalendar()\n"
">>> for i in ic:    \n"
"...     print(i)\n"
"2002                # ISO year\n"
"11                  # ISO week number\n"
"1                   # ISO day number ( 1 = Monday )\n"
"\n"
">>> # A date object is immutable; all operations produce a new object\n"
">>> d.replace(year=2005)\n"
"datetime.date(2005, 3, 11)"
msgstr ""

#: ../../library/datetime.rst:857
msgid ":class:`.datetime` Objects"
msgstr ":class:`.datetime` オブジェクト"

#: ../../library/datetime.rst:859
msgid ""
"A :class:`.datetime` object is a single object containing all the "
"information from a :class:`date` object and a :class:`.time` object."
msgstr ""
":class:`.datetime` オブジェクトは :class:`date` オブジェクトおよび :class:`."
"time` オブジェクトの全ての情報が入っている単一のオブジェクトです。"

#: ../../library/datetime.rst:862
msgid ""
"Like a :class:`date` object, :class:`.datetime` assumes the current "
"Gregorian calendar extended in both directions; like a :class:`.time` "
"object, :class:`.datetime` assumes there are exactly 3600\\*24 seconds in "
"every day."
msgstr ""
":class:`date` オブジェクトと同様に、 :class:`.datetime` は現在のグレゴリオ暦"
"が両方向に延長されているものと仮定します。また、 :class:`.time` オブジェクト"
"と同様に、 :class:`.datetime` は毎日が厳密に 3600\\*24 秒であると仮定します。"

#: ../../library/datetime.rst:866
msgid "Constructor:"
msgstr "以下にコンストラクタを示します:"

#: ../../library/datetime.rst:870
msgid ""
"The *year*, *month* and *day* arguments are required. *tzinfo* may be "
"``None``, or an instance of a :class:`tzinfo` subclass. The remaining "
"arguments must be integers in the following ranges:"
msgstr ""
"*year*, *month*, *day* 引数は必須です。\n"
"*tzinfo* は ``None`` または :class:`tzinfo` サブクラスのインスタンスです。\n"
"残りの引数は次の範囲の整数でなければなりません:"

#: ../../library/datetime.rst:874
msgid "``MINYEAR <= year <= MAXYEAR``,"
msgstr "``MINYEAR <= year <= MAXYEAR``,"

#: ../../library/datetime.rst:875
msgid "``1 <= month <= 12``,"
msgstr "``1 <= month <= 12``,"

#: ../../library/datetime.rst:876
msgid "``1 <= day <= number of days in the given month and year``,"
msgstr "``1 <= day <= 指定された月と年における日数``,"

#: ../../library/datetime.rst:877 ../../library/datetime.rst:1751
msgid "``0 <= hour < 24``,"
msgstr "``0 <= hour < 24``,"

#: ../../library/datetime.rst:878 ../../library/datetime.rst:1752
msgid "``0 <= minute < 60``,"
msgstr "``0 <= minute < 60``,"

#: ../../library/datetime.rst:879 ../../library/datetime.rst:1753
msgid "``0 <= second < 60``,"
msgstr "``0 <= second < 60``,"

#: ../../library/datetime.rst:880 ../../library/datetime.rst:1754
msgid "``0 <= microsecond < 1000000``,"
msgstr "``0 <= microsecond < 1000000``,"

#: ../../library/datetime.rst:881 ../../library/datetime.rst:1755
msgid "``fold in [0, 1]``."
msgstr "``fold in [0, 1]``."

#: ../../library/datetime.rst:885 ../../library/datetime.rst:1322
#: ../../library/datetime.rst:1900
msgid "Added the *fold* parameter."
msgstr "*fold* パラメータが追加されました。"

#: ../../library/datetime.rst:892
msgid "Return the current local date and time, with :attr:`.tzinfo` ``None``."
msgstr ""
":attr:`tzinfo` が ``None`` である現在のローカルの日付および時刻を返します。"

#: ../../library/datetime.rst:894
msgid "Equivalent to::"
msgstr "次と等価です::"

#: ../../library/datetime.rst:896
msgid "datetime.fromtimestamp(time.time())"
msgstr ""

#: ../../library/datetime.rst:898
msgid "See also :meth:`now`, :meth:`fromtimestamp`."
msgstr ":meth:`now`, :meth:`fromtimestamp` も参照してください。"

#: ../../library/datetime.rst:900
msgid ""
"This method is functionally equivalent to :meth:`now`, but without a ``tz`` "
"parameter."
msgstr ""
"このメソッドの機能は :meth:`now` と等価ですが、 ``tz`` 引数はありません。"

#: ../../library/datetime.rst:905
msgid "Return the current local date and time."
msgstr "現在のローカルな日時を返します。"

#: ../../library/datetime.rst:907
msgid ""
"If optional argument *tz* is ``None`` or not specified, this is like :meth:"
"`today`, but, if possible, supplies more precision than can be gotten from "
"going through a :func:`time.time` timestamp (for example, this may be "
"possible on platforms supplying the C :c:func:`gettimeofday` function)."
msgstr ""
"オプションの引数 *tz* が ``None`` であるか指定されていない場合、このメソッド"
"は :meth:`today` と同様ですが、可能ならば :func:`time.time` タイムスタンプを"
"通じて得ることができる、より高い精度で時刻を提供します (例えば、プラット"
"フォームが C  関数 :c:func:`gettimeofday` をサポートする場合には可能なことが"
"あります)。"

#: ../../library/datetime.rst:913
msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the current date and time are converted to *tz*’s time zone."
msgstr ""
"*tz* が ``None`` でない場合、 *tz* は :class:`tzinfo` のサブクラスのインスタ"
"ンスでなければならず、現在の日付および時刻は *tz* のタイムゾーンに変換されま"
"す。"

#: ../../library/datetime.rst:916
msgid "This function is preferred over :meth:`today` and :meth:`utcnow`."
msgstr ""
":meth:`today` および :meth:`utcnow` よりもこの関数を使う方が好ましいです。"

#: ../../library/datetime.rst:921
msgid "Return the current UTC date and time, with :attr:`.tzinfo` ``None``."
msgstr ""
":attr:`tzinfo` が ``None`` である現在の UTC の日付および時刻を返します。"

#: ../../library/datetime.rst:923
msgid ""
"This is like :meth:`now`, but returns the current UTC date and time, as a "
"naive :class:`.datetime` object. An aware current UTC datetime can be "
"obtained by calling ``datetime.now(timezone.utc)``. See also :meth:`now`."
msgstr ""
"このメソッドは :meth:`now` と似ていますが、 naive な :class:`.datetime` オブ"
"ジェクトとして現在の UTC 日付および時刻を返します。\n"
"aware な現在の UTC datetime は ``datetime.now(timezone.utc)`` を呼び出すこと"
"で取得できます。\n"
":meth:`now` も参照してください。"

#: ../../library/datetime.rst:929
msgid ""
"Because naive ``datetime`` objects are treated by many ``datetime`` methods "
"as local times, it is preferred to use aware datetimes to represent times in "
"UTC. As such, the recommended way to create an object representing the "
"current time in UTC is by calling ``datetime.now(timezone.utc)``."
msgstr ""
"naive な ``datetime`` オブジェクトは多くの ``datetime`` メソッドでローカルな"
"時間として扱われるため、 aware な datetime を使って UTC の時刻を表すのが好ま"
"しいです。\n"
"そのため、 UTC での現在の時刻を表すオブジェクトの作成では ``datetime."
"now(timezone.utc)`` を呼び出す方法が推奨されます。"

#: ../../library/datetime.rst:936
msgid "Use :meth:`datetime.now` with :attr:`UTC` instead."
msgstr "代わりに :attr:`UTC` で :meth:`datetime.now` を使用してください。"

#: ../../library/datetime.rst:941
msgid ""
"Return the local date and time corresponding to the POSIX timestamp, such as "
"is returned by :func:`time.time`. If optional argument *tz* is ``None`` or "
"not specified, the timestamp is converted to the platform's local date and "
"time, and the returned :class:`.datetime` object is naive."
msgstr ""
":func:`time.time` が返すような、 POSIX タイムスタンプに対応するローカルな日付"
"と時刻を返します。オプションの引数 *tz* が ``None`` であるか、指定されていな"
"い場合、タイムスタンプはプラットフォームのローカルな日付および時刻に変換さ"
"れ、返される :class:`.datetime` オブジェクトは naive なものになります。"

#: ../../library/datetime.rst:946
msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the timestamp is converted to *tz*’s time zone."
msgstr ""
"*tz* が ``None`` でない場合、 *tz* は :class:`tzinfo` のサブクラスのインスタ"
"ンスでなければならず、タイムスタンプは *tz* のタイムゾーンに変換されます。"

#: ../../library/datetime.rst:949
msgid ""
":meth:`fromtimestamp` may raise :exc:`OverflowError`, if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"or :c:func:`gmtime` functions, and :exc:`OSError` on :c:func:`localtime` or :"
"c:func:`gmtime` failure. It's common for this to be restricted to years in "
"1970 through 2038. Note that on non-POSIX systems that include leap seconds "
"in their notion of a timestamp, leap seconds are ignored by :meth:"
"`fromtimestamp`, and then it's possible to have two timestamps differing by "
"a second that yield identical :class:`.datetime` objects. This method is "
"preferred over :meth:`utcfromtimestamp`."
msgstr ""
"タイムスタンプがプラットフォームの C 関数 :c:func:`localtime` や :c:func:"
"`gmtime` でサポートされている範囲を超えた場合、 :meth:`fromtimestamp` は :"
"exc:`OverflowError` を送出することがあります。この範囲はよく 1970 年から "
"2038 年に制限されています。\n"
"また :c:func:`localtime` や :c:func:`gmtime` が失敗した際は :exc:`OSError` を"
"送出します。\n"
"うるう秒がタイムスタンプの概念に含まれている非 POSIX システムでは、 :meth:"
"`fromtimestamp` はうるう秒を無視します。\n"
"このため、秒の異なる二つのタイムスタンプが同一の :class:`.datetime` オブジェ"
"クトとなることが起こり得ます。\n"
":meth:`utcfromtimestamp` よりも、このメソッドの方が好ましいです。"

#: ../../library/datetime.rst:960
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"or :c:func:`gmtime` functions. Raise :exc:`OSError` instead of :exc:"
"`ValueError` on :c:func:`localtime` or :c:func:`gmtime` failure."
msgstr ""
"timestamp がプラットフォームの C 関数 :c:func:`localtime` もしくは :c:func:"
"`gmtime` のサポートする値の範囲から外れていた場合、 :exc:`ValueError` ではな"
"く :exc:`OverflowError` を送出するようになりました。 :c:func:`localtime` もし"
"くは :c:func:`gmtime` の呼び出し失敗で :exc:`ValueError` ではなく :exc:"
"`OSError` を送出するようになりました。"

#: ../../library/datetime.rst:967
msgid ":meth:`fromtimestamp` may return instances with :attr:`.fold` set to 1."
msgstr ""
":meth:`fromtimestamp` は :attr:`.fold` を1にしてインスタンスを返します。"

#: ../../library/datetime.rst:972
msgid ""
"Return the UTC :class:`.datetime` corresponding to the POSIX timestamp, "
"with :attr:`.tzinfo` ``None``.  (The resulting object is naive.)"
msgstr ""
"POSIX タイムスタンプに対応する、:attr:`tzinfo` が ``None`` の UTC での :"
"class:`.datetime` を返します。(返されるオブジェクトは naive です。)"

#: ../../library/datetime.rst:975
msgid ""
"This may raise :exc:`OverflowError`, if the timestamp is out of the range of "
"values supported by the platform C :c:func:`gmtime` function, and :exc:"
"`OSError` on :c:func:`gmtime` failure. It's common for this to be restricted "
"to years in 1970 through 2038."
msgstr ""
"タイムスタンプがプラットフォームにおける C 関数 :c:func:`localtime` でサポー"
"トされている範囲を超えている場合には :exc:`OverflowError` を、:c:func:"
"`gmtime` が失敗した場合には :exc:`OSError` を送出します。\n"
"これはたいてい 1970 年から 2038 年に制限されています。"

#: ../../library/datetime.rst:980
msgid "To get an aware :class:`.datetime` object, call :meth:`fromtimestamp`::"
msgstr ""
"aware な :class:`.datetime` オブジェクトを得るには :meth:`fromtimestamp` を呼"
"んでください::"

#: ../../library/datetime.rst:982
msgid "datetime.fromtimestamp(timestamp, timezone.utc)"
msgstr ""

#: ../../library/datetime.rst:984
msgid ""
"On the POSIX compliant platforms, it is equivalent to the following "
"expression::"
msgstr "POSIX 互換プラットフォームでは、これは以下の表現と等価です::"

#: ../../library/datetime.rst:987
msgid ""
"datetime(1970, 1, 1, tzinfo=timezone.utc) + timedelta(seconds=timestamp)"
msgstr ""

#: ../../library/datetime.rst:989
msgid ""
"except the latter formula always supports the full years range: between :"
"const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr ""
"後者を除き、式は常に年の全範囲 (:const:`MINYEAR` から :const:`MAXYEAR` を含み"
"ます) をサポートします。"

#: ../../library/datetime.rst:994
msgid ""
"Because naive ``datetime`` objects are treated by many ``datetime`` methods "
"as local times, it is preferred to use aware datetimes to represent times in "
"UTC. As such, the recommended way to create an object representing a "
"specific timestamp in UTC is by calling ``datetime.fromtimestamp(timestamp, "
"tz=timezone.utc)``."
msgstr ""
"naive な ``datetime`` オブジェクトは多くの ``datetime`` メソッドでローカルな"
"時間として扱われるため、 aware な datetime を使って UTC の時刻を表すのが好ま"
"しいです。\n"
"そのため、 UTC でのある特定のタイムスタンプを表すオブジェクトの作成では "
"``datetime.fromtimestamp(timestamp, tz=timezone.utc)`` を呼び出す方法が推奨さ"
"れます。"

#: ../../library/datetime.rst:1000
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`gmtime` "
"function. Raise :exc:`OSError` instead of :exc:`ValueError` on :c:func:"
"`gmtime` failure."
msgstr ""
"timestamp がプラットフォームの C 関数 :c:func:`gmtime` のサポートする値の範囲"
"から外れていた場合、 :exc:`ValueError` ではなく :exc:`OverflowError` を送出す"
"るようになりました。 :c:func:`gmtime` の呼び出し失敗で :exc:`ValueError` では"
"なく :exc:`OSError` を送出するようになりました。"

#: ../../library/datetime.rst:1008
msgid "Use :meth:`datetime.fromtimestamp` with :attr:`UTC` instead."
msgstr ""
"代わりに :attr:`UTC` で :meth:`datetime.fromtimestamp` を使用してください。"

#: ../../library/datetime.rst:1013
msgid ""
"Return the :class:`.datetime` corresponding to the proleptic Gregorian "
"ordinal, where January 1 of year 1 has ordinal 1. :exc:`ValueError` is "
"raised unless ``1 <= ordinal <= datetime.max.toordinal()``. The hour, "
"minute, second and microsecond of the result are all 0, and :attr:`.tzinfo` "
"is ``None``."
msgstr ""
"1 年 1 月 1 日を序数 1 とする早期グレゴリオ暦序数に対応する :class:`."
"datetime` オブジェクトを返します。\n"
"``1 <= ordinal <= datetime.max.toordinal()`` でなければ :exc:`ValueError` が"
"送出されます。\n"
"返されるオブジェクトの時間、分、秒、およびマイクロ秒はすべて 0 で、 :attr:"
"`tzinfo` は ``None`` となっています。"

#: ../../library/datetime.rst:1021
msgid ""
"Return a new :class:`.datetime` object whose date components are equal to "
"the given :class:`date` object's, and whose time components are equal to the "
"given :class:`.time` object's. If the *tzinfo* argument is provided, its "
"value is used to set the :attr:`.tzinfo` attribute of the result, otherwise "
"the :attr:`~.time.tzinfo` attribute of the *time* argument is used.  If the "
"*date* argument is a :class:`.datetime` object, its time components and :"
"attr:`.tzinfo` attributes are ignored."
msgstr ""
"日付部分と与えられた :class:`date` オブジェクトとが等しく、時刻部分と与えられ"
"た :class:`.time` オブジェクトとが等しい、新しい :class:`.datetime` オブジェ"
"クトを返します。\n"
"*tzinfo* 引数が与えられた場合、その値は返り値の :attr:`.tzinfo` 属性に設定す"
"るのに使われます。そうでない場合、 *time* 引数の :attr:`~.time.tzinfo` 属性が"
"使われます。*date* 引数に :class:`.datetime` オブジェクトが与えられた場合、そ"
"の時刻部分と :attr:`.tzinfo` 属性は無視されます。"

#: ../../library/datetime.rst:1029
msgid ""
"For any :class:`.datetime` object *d*, ``d == datetime.combine(d.date(), d."
"time(), d.tzinfo)``."
msgstr ""
"任意の :class:`.datetime` オブジェクト *d* に対して、``d == datetime."
"combine(d.date(), d.time(), d.tzinfo)`` となります。"

#: ../../library/datetime.rst:1032
msgid "Added the *tzinfo* argument."
msgstr "*tzinfo* 引数が追加されました。"

#: ../../library/datetime.rst:1038
msgid ""
"Return a :class:`.datetime` corresponding to a *date_string* in any valid "
"ISO 8601 format, with the following exceptions:"
msgstr ""
"以下の例外を除く、有効な ISO 8601 フォーマットで与えられた *date_string* に対"
"応する :class:`.datetime` を返します :"

#: ../../library/datetime.rst:1041 ../../library/datetime.rst:1851
msgid "Time zone offsets may have fractional seconds."
msgstr "小数の秒があるタイムゾーンオフセット。"

#: ../../library/datetime.rst:1042
msgid "The ``T`` separator may be replaced by any single unicode character."
msgstr "``T`` セパレーターを他の1文字のユニコードに置き換えたもの。"

#: ../../library/datetime.rst:1043 ../../library/datetime.rst:1856
msgid "Fractional hours and minutes are not supported."
msgstr "少数の時と分はサポートされていません。"

#: ../../library/datetime.rst:1052
msgid ""
">>> from datetime import datetime\n"
">>> datetime.fromisoformat('2011-11-04')\n"
"datetime.datetime(2011, 11, 4, 0, 0)\n"
">>> datetime.fromisoformat('20111104')\n"
"datetime.datetime(2011, 11, 4, 0, 0)\n"
">>> datetime.fromisoformat('2011-11-04T00:05:23')\n"
"datetime.datetime(2011, 11, 4, 0, 5, 23)\n"
">>> datetime.fromisoformat('2011-11-04T00:05:23Z')\n"
"datetime.datetime(2011, 11, 4, 0, 5, 23, tzinfo=datetime.timezone.utc)\n"
">>> datetime.fromisoformat('20111104T000523')\n"
"datetime.datetime(2011, 11, 4, 0, 5, 23)\n"
">>> datetime.fromisoformat('2011-W01-2T00:05:23.283')\n"
"datetime.datetime(2011, 1, 4, 0, 5, 23, 283000)\n"
">>> datetime.fromisoformat('2011-11-04 00:05:23.283')\n"
"datetime.datetime(2011, 11, 4, 0, 5, 23, 283000)\n"
">>> datetime.fromisoformat('2011-11-04 00:05:23.283+00:00')\n"
"datetime.datetime(2011, 11, 4, 0, 5, 23, 283000, tzinfo=datetime.timezone."
"utc)\n"
">>> datetime.fromisoformat('2011-11-04T00:05:23+04:00')   \n"
"datetime.datetime(2011, 11, 4, 0, 5, 23,\n"
"    tzinfo=datetime.timezone(datetime.timedelta(seconds=14400)))"
msgstr ""

#: ../../library/datetime.rst:1074
msgid ""
"Previously, this method only supported formats that could be emitted by :"
"meth:`date.isoformat` or :meth:`datetime.isoformat`."
msgstr ""

#: ../../library/datetime.rst:1081
msgid ""
"Return a :class:`.datetime` corresponding to the ISO calendar date specified "
"by year, week and day. The non-date components of the datetime are populated "
"with their normal default values. This is the inverse of the function :meth:"
"`datetime.isocalendar`."
msgstr ""
"年月日で指定された ISO 暦の日付に対応する :class:`.datetime` を返します。\n"
"datetime の日付でない部分は、標準のデフォルト値で埋められます。\n"
"この関数は :meth:`datetime.isocalendar` の逆関数です。"

#: ../../library/datetime.rst:1090
msgid ""
"Return a :class:`.datetime` corresponding to *date_string*, parsed according "
"to *format*."
msgstr ""
"*date_string* に対応した :class:`.datetime` を返します。 *format* にしたがっ"
"て構文解析されます。"

#: ../../library/datetime.rst:1093
msgid ""
"If *format* does not contain microseconds or time zone information, this is "
"equivalent to::"
msgstr ""
"*format* がマイクロ秒やタイムゾーン情報を含まない場合は、以下と等価です::"

#: ../../library/datetime.rst:1095 ../../library/datetime.rst:2576
msgid "datetime(*(time.strptime(date_string, format)[0:6]))"
msgstr ""

#: ../../library/datetime.rst:1097
msgid ""
":exc:`ValueError` is raised if the date_string and format can't be parsed "
"by :func:`time.strptime` or if it returns a value which isn't a time tuple.  "
"See also :ref:`strftime-strptime-behavior` and :meth:`datetime."
"fromisoformat`."
msgstr ""
"date_string と format が :func:`time.strptime` で構文解析できない場合や、この"
"関数が時刻タプルを返してこない場合には :exc:`ValueError` を送出します。:ref:"
"`strftime-strptime-behavior` および :meth:`datetime.fromisoformat` も参照して"
"ください。"

#: ../../library/datetime.rst:1104
msgid ""
"If *format* specifies a day of month without a year a :exc:"
"`DeprecationWarning` is now emitted.  This is to avoid a quadrennial leap "
"year bug in code seeking to parse only a month and day as the default year "
"used in absence of one in the format is not a leap year. Such *format* "
"values may raise an error as of Python 3.15.  The workaround is to always "
"include a year in your *format*.  If parsing *date_string* values that do "
"not have a year, explicitly add a year that is a leap year before parsing:"
msgstr ""

#: ../../library/datetime.rst:1113
msgid ""
">>> from datetime import datetime\n"
">>> date_string = \"02/29\"\n"
">>> when = datetime.strptime(f\"{date_string};1984\", \"%m/%d;%Y\")  # "
"Avoids leap year bug.\n"
">>> when.strftime(\"%B %d\")  \n"
"'February 29'"
msgstr ""

#: ../../library/datetime.rst:1126
msgid ""
"The earliest representable :class:`.datetime`, ``datetime(MINYEAR, 1, 1, "
"tzinfo=None)``."
msgstr ""
"表現できる最も古い :class:`.datetime` で、 ``datetime(MINYEAR, 1, 1, "
"tzinfo=None)`` です。"

#: ../../library/datetime.rst:1132
msgid ""
"The latest representable :class:`.datetime`, ``datetime(MAXYEAR, 12, 31, 23, "
"59, 59, 999999, tzinfo=None)``."
msgstr ""
"表現できる最も新しい :class:`.datetime` で、 ``datetime(MAXYEAR, 12, 31, 23, "
"59, 59, 999999, tzinfo=None)`` です。"

#: ../../library/datetime.rst:1138
msgid ""
"The smallest possible difference between non-equal :class:`.datetime` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""
"等しくない :class:`.datetime` オブジェクト間の最小の差で、 "
"``timedelta(microseconds=1)`` です。"

#: ../../library/datetime.rst:1161 ../../library/datetime.rst:1784
msgid "In ``range(24)``."
msgstr "in ``range(24)`` を満たします。"

#: ../../library/datetime.rst:1166 ../../library/datetime.rst:1171
#: ../../library/datetime.rst:1789 ../../library/datetime.rst:1794
msgid "In ``range(60)``."
msgstr "in ``range(60)`` を満たします。"

#: ../../library/datetime.rst:1176 ../../library/datetime.rst:1799
msgid "In ``range(1000000)``."
msgstr "in ``range(1000000)`` を満たします。"

#: ../../library/datetime.rst:1181
msgid ""
"The object passed as the *tzinfo* argument to the :class:`.datetime` "
"constructor, or ``None`` if none was passed."
msgstr ""
":class:`.datetime` コンストラクタに *tzinfo* 引数として与えられたオブジェクト"
"になり、何も渡されなかった場合には ``None`` になります。"

#: ../../library/datetime.rst:1187 ../../library/datetime.rst:1810
msgid ""
"In ``[0, 1]``. Used to disambiguate wall times during a repeated interval. "
"(A repeated interval occurs when clocks are rolled back at the end of "
"daylight saving time or when the UTC offset for the current zone is "
"decreased for political reasons.) The values 0 and 1 represent, "
"respectively, the earlier and later of the two moments with the same wall "
"time representation."
msgstr ""
"``[0, 1]`` のどちらかです。\n"
"繰り返し期間中の実時間の曖昧さ除去に使われます。\n"
"(繰り返し期間は、夏時間の終わりに時計が巻き戻るときや、現在のゾーンの UTC オ"
"フセットが政治的な理由で減少するときに発生します。)\n"
"0または1という値は、同じ実時間で表現される 2 つの時刻のうちのそれぞれ早い方ま"
"たは遅い方を表します。"

#: ../../library/datetime.rst:1200
msgid "``datetime2 = datetime1 + timedelta``"
msgstr "``datetime2 = datetime1 + timedelta``"

#: ../../library/datetime.rst:1200 ../../library/datetime.rst:2423
#: ../../library/datetime.rst:2428 ../../library/datetime.rst:2440
#: ../../library/datetime.rst:2445 ../../library/datetime.rst:2505
#: ../../library/datetime.rst:2510 ../../library/datetime.rst:2514
msgid "\\(1)"
msgstr "\\(1)"

#: ../../library/datetime.rst:1202
msgid "``datetime2 = datetime1 - timedelta``"
msgstr "``datetime2 = datetime1 - timedelta``"

#: ../../library/datetime.rst:1202 ../../library/datetime.rst:2456
msgid "\\(2)"
msgstr "\\(2)"

#: ../../library/datetime.rst:1204
msgid "``timedelta = datetime1 - datetime2``"
msgstr "``timedelta = datetime1 - datetime2``"

#: ../../library/datetime.rst:0
msgid "``datetime1 == datetime2``"
msgstr "``datetime1 == datetime2``"

#: ../../library/datetime.rst:0
msgid "``datetime1 != datetime2``"
msgstr "``datetime1 != datetime2``"

#: ../../library/datetime.rst:0
msgid "``datetime1 < datetime2``"
msgstr "``datetime1 < datetime2``"

#: ../../library/datetime.rst:0
msgid "``datetime1 > datetime2``"
msgstr "``datetime1 > datetime2``"

#: ../../library/datetime.rst:0
msgid "``datetime1 <= datetime2``"
msgstr "``datetime1 <= datetime2``"

#: ../../library/datetime.rst:0
msgid "``datetime1 >= datetime2``"
msgstr "``datetime1 >= datetime2``"

#: ../../library/datetime.rst:1216
msgid ""
"``datetime2`` is a duration of ``timedelta`` removed from ``datetime1``, "
"moving forward in time if ``timedelta.days > 0``, or backward if ``timedelta."
"days < 0``. The result has the same :attr:`~.datetime.tzinfo` attribute as "
"the input datetime, and ``datetime2 - datetime1 == timedelta`` after. :exc:"
"`OverflowError` is raised if ``datetime2.year`` would be smaller than :const:"
"`MINYEAR` or larger than :const:`MAXYEAR`. Note that no time zone "
"adjustments are done even if the input is an aware object."
msgstr ""
"``datetime2`` は ``datetime1`` から時間 ``timedelta`` 移動したもので、"
"``timedelta.days > 0`` の場合未来へ、``timedelta.days < 0`` の場合過去へ移動"
"します。\n"
"結果は入力の datetime と同じ :attr:`~.datetime.tzinfo` 属性を持ち、演算後に"
"は ``datetime2 - datetime1 == timedelta`` となります。\n"
"``datetime2.year`` が :const:`MINYEAR` よりも小さいか、 :const:`MAXYEAR` より"
"大きい場合には :exc:`OverflowError` が送出されます。\n"
"入力が aware なオブジェクトの場合でもタイムゾーン修正は全く行われません。"

#: ../../library/datetime.rst:1225
msgid ""
"Computes the ``datetime2`` such that ``datetime2 + timedelta == datetime1``. "
"As for addition, the result has the same :attr:`~.datetime.tzinfo` attribute "
"as the input datetime, and no time zone adjustments are done even if the "
"input is aware."
msgstr ""
"``datetime2 + timedelta == datetime1`` となるような ``datetime2`` を計算しま"
"す。\n"
"ちなみに、結果は入力の datetime と同じ :attr:`~.datetime.tzinfo` 属性を持ち、"
"入力が aware だとしてもタイムゾーン修正は全く行われません。"

#: ../../library/datetime.rst:1230
msgid ""
"Subtraction of a :class:`.datetime` from a :class:`.datetime` is defined "
"only if both operands are naive, or if both are aware. If one is aware and "
"the other is naive, :exc:`TypeError` is raised."
msgstr ""
":class:`.datetime` から :class:`.datetime` の減算は両方の被演算子が naive で"
"あるか、両方とも aware である場合にのみ定義されています。片方が aware でもう"
"一方が naive の場合、 :exc:`TypeError` が送出されます。"

#: ../../library/datetime.rst:1234
msgid ""
"If both are naive, or both are aware and have the same :attr:`~.datetime."
"tzinfo` attribute, the :attr:`~.datetime.tzinfo` attributes are ignored, and "
"the result is a :class:`timedelta` object *t* such that ``datetime2 + t == "
"datetime1``. No time zone adjustments are done in this case."
msgstr ""
"両方とも naive か、両方とも aware で同じ :attr:`~.datetime.tzinfo` 属性を持つ"
"場合、 :attr:`~.datetime.tzinfo` 属性は無視され、結果は ``datetime2 + t == "
"datetime1`` であるような :class:`timedelta` オブジェクト *t* となります。\n"
"この場合タイムゾーン修正は全く行われません。"

#: ../../library/datetime.rst:1239
msgid ""
"If both are aware and have different :attr:`~.datetime.tzinfo` attributes, "
"``a-b`` acts as if *a* and *b* were first converted to naive UTC datetimes. "
"The result is ``(a.replace(tzinfo=None) - a.utcoffset()) - (b."
"replace(tzinfo=None) - b.utcoffset())`` except that the implementation never "
"overflows."
msgstr ""
"両方が aware で異なる :attr:`~.datetime.tzinfo` 属性を持つ場合、 ``a-b`` は "
"*a* および *b* をまず naive な UTC datetime オブジェクトに変換したかのように"
"して行います。\n"
"演算結果は決してオーバフローを起こさないことを除き、 ``(a."
"replace(tzinfo=None) - a.utcoffset()) - (b.replace(tzinfo=None) - b."
"utcoffset())`` と同じになります。"

#: ../../library/datetime.rst:1245
msgid ""
":class:`.datetime` objects are equal if they represent the same date and "
"time, taking into account the time zone."
msgstr ""
":class:`.datetime` オブジェクトはタイムゾーンを考慮して同じ日付と時刻を表す場"
"合、等しいです。"

#: ../../library/datetime.rst:1248
msgid "Naive and aware :class:`!datetime` objects are never equal."
msgstr ""

#: ../../library/datetime.rst:1250
msgid ""
"If both comparands are aware, and have the same :attr:`!tzinfo` attribute, "
"the :attr:`!tzinfo` and :attr:`~.datetime.fold` attributes are ignored and "
"the base datetimes are compared. If both comparands are aware and have "
"different :attr:`~.datetime.tzinfo` attributes, the comparison acts as "
"comparands were first converted to UTC datetimes except that the "
"implementation never overflows. :class:`!datetime` instances in a repeated "
"interval are never equal to :class:`!datetime` instances in other time zone."
msgstr ""

#: ../../library/datetime.rst:1260
msgid ""
"*datetime1* is considered less than *datetime2* when *datetime1* precedes "
"*datetime2* in time, taking into account the time zone."
msgstr ""
"タイムゾーンを考慮して、*datetime1* が時刻として *datetime2* よりも前を表す場"
"合に、*datetime1* は *datetime2* よりも小さいと見なされます。"

#: ../../library/datetime.rst:1263
msgid ""
"Order comparison between naive and aware :class:`.datetime` objects raises :"
"exc:`TypeError`."
msgstr ""

#: ../../library/datetime.rst:1266
msgid ""
"If both comparands are aware, and have the same :attr:`!tzinfo` attribute, "
"the :attr:`!tzinfo` and :attr:`~.datetime.fold` attributes are ignored and "
"the base datetimes are compared. If both comparands are aware and have "
"different :attr:`~.datetime.tzinfo` attributes, the comparison acts as "
"comparands were first converted to UTC datetimes except that the "
"implementation never overflows."
msgstr ""

#: ../../library/datetime.rst:1273
msgid ""
"Equality comparisons between aware and naive :class:`.datetime` instances "
"don't raise :exc:`TypeError`."
msgstr ""
"aware な :class:`datetime` インスタンスと naive な :class:`datetime` インスタ"
"ンスの等価比較では :exc:`TypeError` は送出されません。"

#: ../../library/datetime.rst:1289
msgid "Return :class:`date` object with same year, month and day."
msgstr "同じ年、月、日の :class:`date` オブジェクトを返します。"

#: ../../library/datetime.rst:1294
msgid ""
"Return :class:`.time` object with same hour, minute, second, microsecond and "
"fold. :attr:`.tzinfo` is ``None``. See also method :meth:`timetz`."
msgstr ""
"同じhour、minute、second、microsecond 及び foldを持つ :class:`.time` オブジェ"
"クトを返します。 :attr:`.tzinfo` は ``None`` です。 :meth:`timetz` も参照して"
"ください。"

#: ../../library/datetime.rst:1297 ../../library/datetime.rst:1306
msgid "The fold value is copied to the returned :class:`.time` object."
msgstr "値 foldは返される :class:`.time` オブジェクトにコピーされます。"

#: ../../library/datetime.rst:1303
msgid ""
"Return :class:`.time` object with same hour, minute, second, microsecond, "
"fold, and tzinfo attributes. See also method :meth:`time`."
msgstr ""
"同じhour、minute、second、microsecond、fold および tzinfo 属性を持つ :class:"
"`.time` オブジェクトを返します。  :meth:`time` メソッドも参照してください。"

#: ../../library/datetime.rst:1314
msgid ""
"Return a datetime with the same attributes, except for those attributes "
"given new values by whichever keyword arguments are specified. Note that "
"``tzinfo=None`` can be specified to create a naive datetime from an aware "
"datetime with no conversion of date and time data."
msgstr ""
"キーワード引数で指定した属性の値を除き、同じ属性をもつ datetime オブジェクト"
"を返します。メンバに対する変換を行わずに aware な datetime オブジェクトから "
"naive な datetime オブジェクトを生成するために、``tzinfo=None`` を指定するこ"
"ともできます。"

#: ../../library/datetime.rst:1319
msgid ""
":class:`.datetime` objects are also supported by generic function :func:"
"`copy.replace`."
msgstr ""
":class:`.datetime` オブジェクトは汎用的な関数 :func:`copy.replace` にもサポー"
"トされています。"

#: ../../library/datetime.rst:1328
msgid ""
"Return a :class:`.datetime` object with new :attr:`.tzinfo` attribute *tz*, "
"adjusting the date and time data so the result is the same UTC time as "
"*self*, but in *tz*'s local time."
msgstr ""
"*tz* を新たに :attr:`.tzinfo` 属性 として持つ :class:`.datetime` オブジェクト"
"を返します。\n"
"日付および時刻データを調整して、返り値が *self* と同じ UTC 時刻を持ち、 *tz* "
"におけるローカルな時刻を表すようにします。"

#: ../../library/datetime.rst:1332
msgid ""
"If provided, *tz* must be an instance of a :class:`tzinfo` subclass, and "
"its :meth:`utcoffset` and :meth:`dst` methods must not return ``None``. If "
"*self* is naive, it is presumed to represent time in the system time zone."
msgstr ""
"もし与えられた場合、 *tz* は :class:`tzinfo` のサブクラスのインスタンスでなけ"
"ればならず、 インスタンスの :meth:`utcoffset` および :meth:`dst` メソッドは "
"``None`` を返してはなりません。もし *self* が naive ならば、おそらくシステム"
"のタイムゾーンで時間を表現します。"

#: ../../library/datetime.rst:1336
msgid ""
"If called without arguments (or with ``tz=None``) the system local time zone "
"is assumed for the target time zone. The ``.tzinfo`` attribute of the "
"converted datetime instance will be set to an instance of :class:`timezone` "
"with the zone name and offset obtained from the OS."
msgstr ""
"引数無し (もしくは ``tz=None`` の形 ) で呼び出された場合、システムのローカル"
"なタイムゾーンが変更先のタイムゾーンだと仮定されます。\n"
"変換後の datetime インスタンスの ``.tzinfo`` 属性には、 OS から取得したゾーン"
"名とオフセットを持つ :class:`timezone` インスタンスが設定されます。"

#: ../../library/datetime.rst:1341
msgid ""
"If ``self.tzinfo`` is *tz*, ``self.astimezone(tz)`` is equal to *self*:  no "
"adjustment of date or time data is performed. Else the result is local time "
"in the time zone *tz*, representing the same UTC time as *self*:  after "
"``astz = dt.astimezone(tz)``, ``astz - astz.utcoffset()`` will have the same "
"date and time data as ``dt - dt.utcoffset()``."
msgstr ""
"``self.tzinfo`` が *tz* の場合、 ``self.astimezone(tz)`` は *self* に等しくな"
"ります。つまり、date および time に対する調整は行われません。そうでない場合、"
"結果はタイムゾーン *tz* におけるローカル時刻で、 *self* と同じ UTC 時刻を表す"
"ようになります。これは、``astz = dt.astimezone(tz)`` とした後、 ``astz - "
"astz.utcoffset()`` は通常 ``dt - dt.utcoffset()`` と同じ date および time を"
"持つことを示します。"

#: ../../library/datetime.rst:1347
msgid ""
"If you merely want to attach a :class:`timezone` object *tz* to a datetime "
"*dt* without adjustment of date and time data, use ``dt."
"replace(tzinfo=tz)``. If you merely want to remove the :class:`!timezone` "
"object from an aware datetime *dt* without conversion of date and time data, "
"use ``dt.replace(tzinfo=None)``."
msgstr ""
"単に :class:`timezone` オブジェクト *tz* を :class:`datetime` オブジェクト "
"*dt* に追加したいだけで、日付や時刻データへの調整を行わないのなら、``dt."
"replace(tzinfo=tz)`` を使ってください。単に aware な :class:`datetime` オブ"
"ジェクト *dt* から :class:`!timezone` オブジェクトを除去したいだけで、日付や"
"時刻データの変換を行わないのなら、``dt.replace(tzinfo=None)`` を使ってくださ"
"い。"

#: ../../library/datetime.rst:1352
msgid ""
"Note that the default :meth:`tzinfo.fromutc` method can be overridden in a :"
"class:`tzinfo` subclass to affect the result returned by :meth:`astimezone`. "
"Ignoring error cases, :meth:`astimezone` acts like::"
msgstr ""
"デフォルトの :meth:`tzinfo.fromutc` メソッドを :class:`tzinfo` のサブクラスで"
"上書きして, :meth:`astimezone` が返す結果に影響を及ぼすことができます。エラー"
"の場合を無視すると、 :meth:`astimezone` は以下のように動作します::"

#: ../../library/datetime.rst:1356
msgid ""
"def astimezone(self, tz):\n"
"    if self.tzinfo is tz:\n"
"        return self\n"
"    # Convert self to UTC, and attach the new timezone object.\n"
"    utc = (self - self.utcoffset()).replace(tzinfo=tz)\n"
"    # Convert from UTC to tz's local time.\n"
"    return tz.fromutc(utc)"
msgstr ""

#: ../../library/datetime.rst:1364
msgid "*tz* now can be omitted."
msgstr "*tz* が省略可能になりました。"

#: ../../library/datetime.rst:1367
msgid ""
"The :meth:`astimezone` method can now be called on naive instances that are "
"presumed to represent system local time."
msgstr ""
":meth:`datetime.datetime.astimezone` メソッドを naive なインスタンスに対して"
"呼び出せるようになりました。これは、システムのローカルな時間を表現していると"
"想定されます。"

#: ../../library/datetime.rst:1374
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(self)``, and raises an exception if the latter doesn't return "
"``None`` or a :class:`timedelta` object with magnitude less than one day."
msgstr ""
":attr:`.tzinfo` が ``None`` の場合、 ``None`` を返し、そうでない場合には "
"``self.tzinfo.utcoffset(self)`` を返します。\n"
"後者の式が ``None`` あるいは 1 日以下の大きさを持つ :class:`timedelta` オブ"
"ジェクトのいずれかを返さない場合には例外を送出します。"

#: ../../library/datetime.rst:1378 ../../library/datetime.rst:1973
#: ../../library/datetime.rst:2080 ../../library/datetime.rst:2325
#: ../../library/datetime.rst:2337 ../../library/datetime.rst:2649
msgid "The UTC offset is not restricted to a whole number of minutes."
msgstr "UTC オフセットが分単位でなければならない制限が無くなりました。"

#: ../../library/datetime.rst:1384
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(self)``, and raises an exception if the latter doesn't return ``None`` "
"or a :class:`timedelta` object with magnitude less than one day."
msgstr ""
":attr:`.tzinfo` が ``None`` の場合 ``None`` を返し、そうでない場合には "
"``self.tzinfo.dst(self)`` を返します。\n"
"後者の式が ``None`` もしくは、1 日未満の大きさを持つ :class:`timedelta` オブ"
"ジェクトのいずれかを返さない場合には例外を送出します。"

#: ../../library/datetime.rst:1388 ../../library/datetime.rst:1983
#: ../../library/datetime.rst:2134
msgid "The DST offset is not restricted to a whole number of minutes."
msgstr "DST オフセットが分単位でなければならない制限が無くなりました。"

#: ../../library/datetime.rst:1394
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(self)``, raises an exception if the latter doesn't return ``None`` or "
"a string object,"
msgstr ""
":attr:`.tzinfo` が ``None`` の場合 ``None`` を返し、そうでない場合には "
"``self.tzinfo.tzname(self)`` を返します。\n"
"後者の式が ``None`` か文字列オブジェクトのいずれかを返さない場合には例外を送"
"出します。"

#: ../../library/datetime.rst:1405
msgid ""
"time.struct_time((d.year, d.month, d.day,\n"
"                  d.hour, d.minute, d.second,\n"
"                  d.weekday(), yday, dst))"
msgstr ""

#: ../../library/datetime.rst:1409
msgid ""
"where ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the "
"day number within the current year starting with 1 for January 1st. The :"
"attr:`~time.struct_time.tm_isdst` flag of the result is set according to "
"the :meth:`dst` method: :attr:`.tzinfo` is ``None`` or :meth:`dst` returns "
"``None``, :attr:`!tm_isdst` is set to ``-1``; else if :meth:`dst` returns a "
"non-zero value, :attr:`!tm_isdst` is set to 1; else :attr:`!tm_isdst` is set "
"to 0."
msgstr ""
"ここで ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` はその年"
"の1月1日を 1 としたときのその日の位置です。\n"
"返されるタプルの :attr:`~time.struct_time.tm_isdst` フラグは :meth:`dst` メ"
"ソッドに従って設定されます: :attr:`.tzinfo` が ``None`` か :meth:`dst` が "
"``None`` を返す場合、 :attr:`!tm_isdst` は ``-1`` に設定されます; そうでない"
"場合、 :meth:`dst` がゼロでない値を返すと :attr:`!tm_isdst` は1となります; そ"
"れ以外の場合には :attr:`!tm_isdst` は0に設定されます。"

#: ../../library/datetime.rst:1420
msgid ""
"If :class:`.datetime` instance *d* is naive, this is the same as ``d."
"timetuple()`` except that :attr:`~.time.struct_time.tm_isdst` is forced to 0 "
"regardless of what ``d.dst()`` returns. DST is never in effect for a UTC "
"time."
msgstr ""
":class:`.datetime` インスタンス *d* が naive の場合、このメソッドは ``d."
"timetuple()`` と同じであり、 ``d.dst()`` の返す内容にかかわらず :attr:`~."
"time.struct_time.tm_isdst` が 0 に強制される点だけが異なります。 DST が UTC "
"時刻に影響を及ぼすことは決してありません。"

#: ../../library/datetime.rst:1424
msgid ""
"If *d* is aware, *d* is normalized to UTC time, by subtracting ``d."
"utcoffset()``, and a :class:`time.struct_time` for the normalized time is "
"returned. :attr:`!tm_isdst` is forced to 0. Note that an :exc:"
"`OverflowError` may be raised if ``d.year`` was ``MINYEAR`` or ``MAXYEAR`` "
"and UTC adjustment spills over a year boundary."
msgstr ""
"*d* が aware だった場合、 *d* は ``d.utcoffset()`` を引いて UTC 時刻に正規化"
"され、その時刻が :class:`time.struct_time` として返されます。 :attr:`!"
"tm_isdst` は 0 に強制されます。 ``d.year`` が ``MINYEAR`` もしくは "
"``MAXYEAR`` であり、 UTC 時刻への調整により適切な年の範囲を越えた場合、 :exc:"
"`OverflowError` が送出される可能性があることに注意してください。"

#: ../../library/datetime.rst:1433
msgid ""
"Because naive ``datetime`` objects are treated by many ``datetime`` methods "
"as local times, it is preferred to use aware datetimes to represent times in "
"UTC; as a result, using :meth:`datetime.utctimetuple` may give misleading "
"results. If you have a naive ``datetime`` representing UTC, use ``datetime."
"replace(tzinfo=timezone.utc)`` to make it aware, at which point you can use :"
"meth:`.datetime.timetuple`."
msgstr ""
"naive な ``datetime`` オブジェクトは多くの ``datetime`` メソッドでローカルな"
"時間として扱われるため、 aware な datetime を使って UTC の時刻を表すのが好ま"
"しいです。結果として、 :meth:`datetime.utctimetuple` は誤解を招きやすい返り値"
"を返すかもしれません。\n"
"UTC を表す naive な ``datetime`` があった場合、 :meth:`.datetime.timetuple` "
"が使えるところでは ``datetime.replace(tzinfo=timezone.utc)`` で aware にしま"
"す。"

#: ../../library/datetime.rst:1442
msgid ""
"Return the proleptic Gregorian ordinal of the date. The same as ``self."
"date().toordinal()``."
msgstr ""
"先発グレゴリオ暦における日付序数を返します。``self.date().toordinal()`` と同"
"じです。"

#: ../../library/datetime.rst:1447
msgid ""
"Return POSIX timestamp corresponding to the :class:`.datetime` instance. The "
"return value is a :class:`float` similar to that returned by :func:`time."
"time`."
msgstr ""
":class:`.datetime` インスタンスに対応する POSIX タイムスタンプを返します。\n"
"返り値は :func:`time.time` で返される値に近い :class:`float` です。"

#: ../../library/datetime.rst:1451
msgid ""
"Naive :class:`.datetime` instances are assumed to represent local time and "
"this method relies on the platform C :c:func:`mktime` function to perform "
"the conversion. Since :class:`.datetime` supports wider range of values "
"than :c:func:`mktime` on many platforms, this method may raise :exc:"
"`OverflowError` or :exc:`OSError` for times far in the past or far in the "
"future."
msgstr ""
"このメソッドでは naive な :class:`.datetime` インスタンスはローカル時刻とし、"
"プラットフォームの C 関数 :c:func:`mktime` に頼って変換を行います。\n"
":class:`.datetime` は多くのプラットフォームの :c:func:`mktime` より広い範囲の"
"値をサポートしているので、遥か過去の時刻や遥か未来の時刻に対し、このメソッド"
"は :exc:`OverflowError` または :exc:`OSError` を送出するかもしれません。"

#: ../../library/datetime.rst:1458
msgid ""
"For aware :class:`.datetime` instances, the return value is computed as::"
msgstr ""
"aware な :class:`.datetime` インスタンスに対しては以下のように返り値が計算さ"
"れます::"

#: ../../library/datetime.rst:1461
msgid "(dt - datetime(1970, 1, 1, tzinfo=timezone.utc)).total_seconds()"
msgstr ""

#: ../../library/datetime.rst:1465
msgid ""
"The :meth:`timestamp` method uses the :attr:`.fold` attribute to "
"disambiguate the times during a repeated interval."
msgstr ""
" :meth:`timestamp` メソッドは :attr:`.fold` 属性を繰り返し時間での曖昧さ回避"
"に使用します。"

#: ../../library/datetime.rst:1471
msgid ""
"There is no method to obtain the POSIX timestamp directly from a naive :"
"class:`.datetime` instance representing UTC time. If your application uses "
"this convention and your system time zone is not set to UTC, you can obtain "
"the POSIX timestamp by supplying ``tzinfo=timezone.utc``::"
msgstr ""
"UTC 時刻を表す naive な :class:`.datetime` インスタンスから直接 POSIX タイム"
"スタンプを取得するメソッドはありません。\n"
"アプリケーションがその変換を使っており、システムのタイムゾーンが UTC に設定さ"
"れていなかった場合、 ``tzinfo=timezone.utc`` を引数に与えることで POSIX タイ"
"ムスタンプを取得できます::"

#: ../../library/datetime.rst:1477
msgid "timestamp = dt.replace(tzinfo=timezone.utc).timestamp()"
msgstr ""

#: ../../library/datetime.rst:1479
msgid "or by calculating the timestamp directly::"
msgstr "もしくは直接タイムスタンプを計算することもできます::"

#: ../../library/datetime.rst:1481
msgid "timestamp = (dt - datetime(1970, 1, 1)) / timedelta(seconds=1)"
msgstr ""

#: ../../library/datetime.rst:1485
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"The same as ``self.date().weekday()``. See also :meth:`isoweekday`."
msgstr ""
"月曜日を 0、日曜日を 6 として、曜日を整数で返します。 ``self.date()."
"weekday()`` と同じです。 :meth:`isoweekday` も参照してください。"

#: ../../library/datetime.rst:1491
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"The same as ``self.date().isoweekday()``. See also :meth:`weekday`, :meth:"
"`isocalendar`."
msgstr ""
"月曜日を 1、日曜日を 7 として、曜日を整数で返します。 ``self.date()."
"isoweekday()`` と等価です。 :meth:`weekday` 、 :meth:`isocalendar` も参照して"
"ください。"

#: ../../library/datetime.rst:1498
msgid ""
"Return a :term:`named tuple` with three components: ``year``, ``week`` and "
"``weekday``. The same as ``self.date().isocalendar()``."
msgstr ""
"``year``、``week``、``weekday`` の3つで構成された :term:`named tuple` を返し"
"ます。 ``self.date().isocalendar()`` と等価です。"

#: ../../library/datetime.rst:1504
msgid "Return a string representing the date and time in ISO 8601 format:"
msgstr "日時を ISO 8601 書式で表した文字列で返します::"

#: ../../library/datetime.rst:1506
msgid "``YYYY-MM-DDTHH:MM:SS.ffffff``, if :attr:`microsecond` is not 0"
msgstr ":attr:`microsecond` が 0 でない場合は ``YYYY-MM-DDTHH:MM:SS.ffffff``"

#: ../../library/datetime.rst:1507
msgid "``YYYY-MM-DDTHH:MM:SS``, if :attr:`microsecond` is 0"
msgstr ":attr:`microsecond` が 0 の場合は ``YYYY-MM-DDTHH:MM:SS``"

#: ../../library/datetime.rst:1509
msgid ""
"If :meth:`utcoffset` does not return ``None``, a string is appended, giving "
"the UTC offset:"
msgstr ""
":meth:`utcoffset` が ``None`` を返さない場合は、文字列の後ろに UTC オフセット"
"が追記されます:"

#: ../../library/datetime.rst:1512
msgid ""
"``YYYY-MM-DDTHH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]``, if :attr:`microsecond` "
"is not 0"
msgstr ""
":attr:`microsecond` が 0 でない場合は ``YYYY-MM-DDTHH:MM:SS.ffffff+HH:MM[:"
"SS[.ffffff]]``"

#: ../../library/datetime.rst:1514
msgid ""
"``YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[.ffffff]]``,  if :attr:`microsecond` is 0"
msgstr ""
":attr:`microsecond` が 0 の場合は ``YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[.ffffff]]``"

#: ../../library/datetime.rst:1518
msgid ""
">>> from datetime import datetime, timezone\n"
">>> datetime(2019, 5, 18, 15, 17, 8, 132263).isoformat()\n"
"'2019-05-18T15:17:08.132263'\n"
">>> datetime(2019, 5, 18, 15, 17, tzinfo=timezone.utc).isoformat()\n"
"'2019-05-18T15:17:00+00:00'"
msgstr ""

#: ../../library/datetime.rst:1524
msgid ""
"The optional argument *sep* (default ``'T'``) is a one-character separator, "
"placed between the date and time portions of the result. For example::"
msgstr ""
"オプションの引数 *sep* (デフォルトでは ``'T'`` です)  は 1 文字のセパレータ"
"で、結果の文字列の日付と時刻の間に置かれます。例えば::"

#: ../../library/datetime.rst:1527
msgid ""
">>> from datetime import tzinfo, timedelta, datetime\n"
">>> class TZ(tzinfo):\n"
"...     \"\"\"A time zone with an arbitrary, constant -06:39 offset.\"\"\"\n"
"...     def utcoffset(self, dt):\n"
"...         return timedelta(hours=-6, minutes=-39)\n"
"...\n"
">>> datetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ')\n"
"'2002-12-25 00:00:00-06:39'\n"
">>> datetime(2009, 11, 27, microsecond=100, tzinfo=TZ()).isoformat()\n"
"'2009-11-27T00:00:00.000100-06:39'"
msgstr ""

#: ../../library/datetime.rst:1538 ../../library/datetime.rst:1913
msgid ""
"The optional argument *timespec* specifies the number of additional "
"components of the time to include (the default is ``'auto'``). It can be one "
"of the following:"
msgstr ""
"オプション引数 *timespec* は、含める追加の時間の要素の数を指定します(デフォル"
"トでは ``'auto'`` です)。以下の内一つを指定してください。"

#: ../../library/datetime.rst:1542 ../../library/datetime.rst:1917
msgid ""
"``'auto'``: Same as ``'seconds'`` if :attr:`microsecond` is 0, same as "
"``'microseconds'`` otherwise."
msgstr ""
"``'auto'``: :attr:`microsecond` が0である場合 ``'seconds'`` と等しく、そうで"
"ない場合は ``'microseconds'`` と等しくなります。"

#: ../../library/datetime.rst:1544 ../../library/datetime.rst:1919
msgid "``'hours'``: Include the :attr:`hour` in the two-digit ``HH`` format."
msgstr "``'hours'``:  :attr:`hour` を2桁の ``HH`` 書式で含めます。"

#: ../../library/datetime.rst:1545 ../../library/datetime.rst:1920
msgid ""
"``'minutes'``: Include :attr:`hour` and :attr:`minute` in ``HH:MM`` format."
msgstr ""
"``'minutes'``: :attr:`hour` および :attr:`minute` を ``HH:MM`` の書式で含めま"
"す。"

#: ../../library/datetime.rst:1546 ../../library/datetime.rst:1921
msgid ""
"``'seconds'``: Include :attr:`hour`, :attr:`minute`, and :attr:`second` in "
"``HH:MM:SS`` format."
msgstr ""
"``'seconds'``: :attr:`hour` 、 :attr:`minute` 、 :attr:`second`  を ``HH:MM:"
"SS`` の書式で含めます。"

#: ../../library/datetime.rst:1548 ../../library/datetime.rst:1923
msgid ""
"``'milliseconds'``: Include full time, but truncate fractional second part "
"to milliseconds. ``HH:MM:SS.sss`` format."
msgstr ""
"``'milliseconds'``: 全ての時刻を含みますが、小数第二位をミリ秒に切り捨てま"
"す。\n"
"``HH:MM:SS.sss`` の書式で表現します。"

#: ../../library/datetime.rst:1550 ../../library/datetime.rst:1925
msgid "``'microseconds'``: Include full time in ``HH:MM:SS.ffffff`` format."
msgstr ""
"``'microseconds'``: 全ての時刻を ``HH:MM:SS.mmmmmm`` の書式で含めます。"

#: ../../library/datetime.rst:1554 ../../library/datetime.rst:1929
msgid "Excluded time components are truncated, not rounded."
msgstr "除外された要素は丸め込みではなく、切り捨てされます。"

#: ../../library/datetime.rst:1556
msgid ":exc:`ValueError` will be raised on an invalid *timespec* argument::"
msgstr "不正な *timespec* 引数には :exc:`ValueError` があげられます::"

#: ../../library/datetime.rst:1559
msgid ""
">>> from datetime import datetime\n"
">>> datetime.now().isoformat(timespec='minutes')   \n"
"'2002-12-25T00:00'\n"
">>> dt = datetime(2015, 1, 1, 12, 30, 59, 0)\n"
">>> dt.isoformat(timespec='microseconds')\n"
"'2015-01-01T12:30:59.000000'"
msgstr ""

#: ../../library/datetime.rst:1566 ../../library/datetime.rst:1944
msgid "Added the *timespec* parameter."
msgstr "*timespec* パラメータを追加しました."

#: ../../library/datetime.rst:1572
msgid ""
"For a :class:`.datetime` instance *d*, ``str(d)`` is equivalent to ``d."
"isoformat(' ')``."
msgstr ""
":class:`.datetime` オブジェクト *d* において、 ``str(d)`` は ``d.isoformat(' "
"')`` と等価です。"

#: ../../library/datetime.rst:1578
msgid "Return a string representing the date and time::"
msgstr "日付および時刻を表す文字列を返します::"

#: ../../library/datetime.rst:1580
msgid ""
">>> from datetime import datetime\n"
">>> datetime(2002, 12, 4, 20, 30, 40).ctime()\n"
"'Wed Dec  4 20:30:40 2002'"
msgstr ""

#: ../../library/datetime.rst:1584
msgid ""
"The output string will *not* include time zone information, regardless of "
"whether the input is aware or naive."
msgstr ""
"出力文字列は入力が aware であれ naive であれ、タイムゾーン情報を含み *ません"
"*。"

#: ../../library/datetime.rst:1591
msgid ""
"on platforms where the native C :c:func:`ctime` function (which :func:`time."
"ctime` invokes, but which :meth:`datetime.ctime` does not invoke) conforms "
"to the C standard."
msgstr ""
"これが等価になるのは、 (:func:`time.ctime` に呼び出され、 :meth:`datetime."
"ctime` に呼び出されない) ネイティブの C 関数 :c:func:`ctime` が C 標準に準拠"
"しているプラットフォーム上でです。"

#: ../../library/datetime.rst:1598
msgid ""
"Return a string representing the date and time, controlled by an explicit "
"format string. See also :ref:`strftime-strptime-behavior` and :meth:"
"`datetime.isoformat`."
msgstr ""
"明示的な書式文字列で制御された、日付および時刻を表現する文字列を返します。:"
"ref:`strftime-strptime-behavior` および :meth:`datetime.isoformat` も参照して"
"ください。"

#: ../../library/datetime.rst:1605
msgid ""
"Same as :meth:`.datetime.strftime`. This makes it possible to specify a "
"format string for a :class:`.datetime` object in :ref:`formatted string "
"literals <f-strings>` and when using :meth:`str.format`. See also :ref:"
"`strftime-strptime-behavior` and :meth:`datetime.isoformat`."
msgstr ""
":meth:`.datetime.strftime` と等価です。\n"
"これにより、 :ref:`フォーマット済み文字列リテラル <f-strings>` の中や :meth:"
"`str.format` を使っているときに :class:`.datetime` オブジェクトの書式文字列を"
"指定できます。\n"
":ref:`strftime-strptime-behavior` および :meth:`datetime.isoformat` も参照し"
"てください。"

#: ../../library/datetime.rst:1612
msgid "Examples of Usage: :class:`.datetime`"
msgstr "使用例: :class:`.datetime`"

#: ../../library/datetime.rst:1614
msgid "Examples of working with :class:`.datetime` objects:"
msgstr ":class:`.datetime` オブジェクトを使う例::"

#: ../../library/datetime.rst:1616
msgid ""
">>> from datetime import datetime, date, time, timezone\n"
"\n"
">>> # Using datetime.combine()\n"
">>> d = date(2005, 7, 14)\n"
">>> t = time(12, 30)\n"
">>> datetime.combine(d, t)\n"
"datetime.datetime(2005, 7, 14, 12, 30)\n"
"\n"
">>> # Using datetime.now()\n"
">>> datetime.now()   \n"
"datetime.datetime(2007, 12, 6, 16, 29, 43, 79043)   # GMT +1\n"
">>> datetime.now(timezone.utc)   \n"
"datetime.datetime(2007, 12, 6, 15, 29, 43, 79060, tzinfo=datetime.timezone."
"utc)\n"
"\n"
">>> # Using datetime.strptime()\n"
">>> dt = datetime.strptime(\"21/11/06 16:30\", \"%d/%m/%y %H:%M\")\n"
">>> dt\n"
"datetime.datetime(2006, 11, 21, 16, 30)\n"
"\n"
">>> # Using datetime.timetuple() to get tuple of all attributes\n"
">>> tt = dt.timetuple()\n"
">>> for it in tt:   \n"
"...     print(it)\n"
"...\n"
"2006    # year\n"
"11      # month\n"
"21      # day\n"
"16      # hour\n"
"30      # minute\n"
"0       # second\n"
"1       # weekday (0 = Monday)\n"
"325     # number of days since 1st January\n"
"-1      # dst - method tzinfo.dst() returned None\n"
"\n"
">>> # Date in ISO format\n"
">>> ic = dt.isocalendar()\n"
">>> for it in ic:   \n"
"...     print(it)\n"
"...\n"
"2006    # ISO year\n"
"47      # ISO week\n"
"2       # ISO weekday\n"
"\n"
">>> # Formatting a datetime\n"
">>> dt.strftime(\"%A, %d. %B %Y %I:%M%p\")\n"
"'Tuesday, 21. November 2006 04:30PM'\n"
">>> 'The {1} is {0:%d}, the {2} is {0:%B}, the {3} is {0:%I:%M%p}.'."
"format(dt, \"day\", \"month\", \"time\")\n"
"'The day is 21, the month is November, the time is 04:30PM.'"
msgstr ""

#: ../../library/datetime.rst:1667
msgid ""
"The example below defines a :class:`tzinfo` subclass capturing time zone "
"information for Kabul, Afghanistan, which used +4 UTC until 1945 and then "
"+4:30 UTC thereafter::"
msgstr ""
"下にある例では、1945年までは +4 UTC 、それ以降は +4:30 UTC を使用しているアフ"
"ガニスタンのカブールのタイムゾーン情報を表現する :class:`tzinfo` のサブクラス"
"を定義しています::"

#: ../../library/datetime.rst:1671
msgid ""
"from datetime import timedelta, datetime, tzinfo, timezone\n"
"\n"
"class KabulTz(tzinfo):\n"
"    # Kabul used +4 until 1945, when they moved to +4:30\n"
"    UTC_MOVE_DATE = datetime(1944, 12, 31, 20, tzinfo=timezone.utc)\n"
"\n"
"    def utcoffset(self, dt):\n"
"        if dt.year < 1945:\n"
"            return timedelta(hours=4)\n"
"        elif (1945, 1, 1, 0, 0) <= dt.timetuple()[:5] < (1945, 1, 1, 0, "
"30):\n"
"            # An ambiguous (\"imaginary\") half-hour range representing\n"
"            # a 'fold' in time due to the shift from +4 to +4:30.\n"
"            # If dt falls in the imaginary range, use fold to decide how\n"
"            # to resolve. See PEP495.\n"
"            return timedelta(hours=4, minutes=(30 if dt.fold else 0))\n"
"        else:\n"
"            return timedelta(hours=4, minutes=30)\n"
"\n"
"    def fromutc(self, dt):\n"
"        # Follow same validations as in datetime.tzinfo\n"
"        if not isinstance(dt, datetime):\n"
"            raise TypeError(\"fromutc() requires a datetime argument\")\n"
"        if dt.tzinfo is not self:\n"
"            raise ValueError(\"dt.tzinfo is not self\")\n"
"\n"
"        # A custom implementation is required for fromutc as\n"
"        # the input to this function is a datetime with utc values\n"
"        # but with a tzinfo set to self.\n"
"        # See datetime.astimezone or fromtimestamp.\n"
"        if dt.replace(tzinfo=timezone.utc) >= self.UTC_MOVE_DATE:\n"
"            return dt + timedelta(hours=4, minutes=30)\n"
"        else:\n"
"            return dt + timedelta(hours=4)\n"
"\n"
"    def dst(self, dt):\n"
"        # Kabul does not observe daylight saving time.\n"
"        return timedelta(0)\n"
"\n"
"    def tzname(self, dt):\n"
"        if dt >= self.UTC_MOVE_DATE:\n"
"            return \"+04:30\"\n"
"        return \"+04\""
msgstr ""

#: ../../library/datetime.rst:1714
msgid "Usage of ``KabulTz`` from above::"
msgstr "上に出てきた ``KabulTz`` の使い方::"

#: ../../library/datetime.rst:1716
msgid ""
">>> tz1 = KabulTz()\n"
"\n"
">>> # Datetime before the change\n"
">>> dt1 = datetime(1900, 11, 21, 16, 30, tzinfo=tz1)\n"
">>> print(dt1.utcoffset())\n"
"4:00:00\n"
"\n"
">>> # Datetime after the change\n"
">>> dt2 = datetime(2006, 6, 14, 13, 0, tzinfo=tz1)\n"
">>> print(dt2.utcoffset())\n"
"4:30:00\n"
"\n"
">>> # Convert datetime to another time zone\n"
">>> dt3 = dt2.astimezone(timezone.utc)\n"
">>> dt3\n"
"datetime.datetime(2006, 6, 14, 8, 30, tzinfo=datetime.timezone.utc)\n"
">>> dt2\n"
"datetime.datetime(2006, 6, 14, 13, 0, tzinfo=KabulTz())\n"
">>> dt2 == dt3\n"
"True"
msgstr ""

#: ../../library/datetime.rst:1740
msgid ":class:`.time` Objects"
msgstr ":class:`.time` オブジェクト"

#: ../../library/datetime.rst:1742
msgid ""
"A :class:`.time` object represents a (local) time of day, independent of any "
"particular day, and subject to adjustment via a :class:`tzinfo` object."
msgstr ""
":class:`.time` オブジェクトは (ローカルの) 日中時刻を表現します。\n"
"この時刻表現は特定の日の影響を受けず、 :class:`tzinfo` オブジェクトを介した修"
"正の対象となります。"

#: ../../library/datetime.rst:1747
msgid ""
"All arguments are optional. *tzinfo* may be ``None``, or an instance of a :"
"class:`tzinfo` subclass. The remaining arguments must be integers in the "
"following ranges:"
msgstr ""
"全ての引数はオプションです。 *tzinfo* は ``None`` または :class:`tzinfo` クラ"
"スのサブクラスのインスタンスにすることができます。残りの引数は整数で、以下の"
"ような範囲に入らなければなりません:"

#: ../../library/datetime.rst:1757
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised. "
"All default to 0 except *tzinfo*, which defaults to ``None``."
msgstr ""
"引数がこれらの範囲外にある場合、 :exc:`ValueError` が送出されます。 *tzinfo* "
"のデフォルト値が ``None`` である以外のデフォルト値は0です。"

#: ../../library/datetime.rst:1765
msgid "The earliest representable :class:`.time`, ``time(0, 0, 0, 0)``."
msgstr "表現できる最も古い :class:`.time` で、 ``time(0, 0, 0, 0)`` です。"

#: ../../library/datetime.rst:1770
msgid "The latest representable :class:`.time`, ``time(23, 59, 59, 999999)``."
msgstr ""
"表現できる最も新しい :class:`.time` で、 ``time(23, 59, 59, 999999)`` です。"

#: ../../library/datetime.rst:1775
msgid ""
"The smallest possible difference between non-equal :class:`.time` objects, "
"``timedelta(microseconds=1)``, although note that arithmetic on :class:`."
"time` objects is not supported."
msgstr ""
"等しくない :class:`.time` オブジェクト間の最小の差で、 "
"``timedelta(microseconds=1)`` ですが, :class:`.time` オブジェクト間の四則演算"
"はサポートされていないので注意してください。"

#: ../../library/datetime.rst:1804
msgid ""
"The object passed as the tzinfo argument to the :class:`.time` constructor, "
"or ``None`` if none was passed."
msgstr ""
":class:`.time` コンストラクタに *tzinfo* 引数として与えられたオブジェクトにな"
"り、何も渡されなかった場合には ``None`` になります。"

#: ../../library/datetime.rst:1818
msgid ""
":class:`.time` objects support equality and order comparisons, where *a* is "
"considered less than *b* when *a* precedes *b* in time."
msgstr ""

#: ../../library/datetime.rst:1821
msgid ""
"Naive and aware :class:`!time` objects are never equal. Order comparison "
"between naive and aware :class:`!time` objects raises :exc:`TypeError`."
msgstr ""

#: ../../library/datetime.rst:1825
msgid ""
"If both comparands are aware, and have the same :attr:`~.time.tzinfo` "
"attribute, the :attr:`!tzinfo` and :attr:`!fold` attributes are ignored and "
"the base times are compared. If both comparands are aware and have "
"different :attr:`!tzinfo` attributes, the comparands are first adjusted by "
"subtracting their UTC offsets (obtained from ``self.utcoffset()``)."
msgstr ""
"比較対象が両方とも aware であり、同じ :attr:`~.time.tzinfo` 属性を持つ場"
"合、 :attr:`!tzinfo` と :attr:`!fold` 属性は無視され時間だけで比較が行われま"
"す。比較対象が両方とも aware であり、異なる :attr:`!tzinfo` 属性を持つ場合、"
"まず最初に (``self.utcoffset()`` で取得できる) それぞれの UTC オフセットを引"
"く調整が行われます。"

#: ../../library/datetime.rst:1831
msgid ""
"Equality comparisons between aware and naive :class:`.time` instances don't "
"raise :exc:`TypeError`."
msgstr ""
"aware な  インスタンスと naive な :class:`.time` インスタンスの等価比較では :"
"exc:`TypeError` は送出されません。"

#: ../../library/datetime.rst:1835
msgid ""
"In Boolean contexts, a :class:`.time` object is always considered to be true."
msgstr ""
"ブール値の文脈では、 :class:`.time` オブジェクトは常に真とみなされます。"

#: ../../library/datetime.rst:1837
msgid ""
"Before Python 3.5, a :class:`.time` object was considered to be false if it "
"represented midnight in UTC. This behavior was considered obscure and error-"
"prone and has been removed in Python 3.5. See :issue:`13936` for full "
"details."
msgstr ""
"Python 3.5 以前は、 :class:`.time` オブジェクトは UTC で深夜を表すときに偽と"
"みなされていました。\n"
"この挙動は分かりにくく、エラーの元となると考えられ、Python 3.5 で削除されまし"
"た。\n"
"全詳細については :issue:`13936` を参照してください。"

#: ../../library/datetime.rst:1844
msgid "Other constructor:"
msgstr "その他のコンストラクタ:"

#: ../../library/datetime.rst:1848
msgid ""
"Return a :class:`.time` corresponding to a *time_string* in any valid ISO "
"8601 format, with the following exceptions:"
msgstr ""
"以下の例外を除く、有効な ISO 8601 フォーマットで与えられた *time_string* に対"
"応する :class:`.time` を返します :"

#: ../../library/datetime.rst:1852
msgid ""
"The leading ``T``, normally required in cases where there may be ambiguity "
"between a date and a time, is not required."
msgstr ""

#: ../../library/datetime.rst:1854
msgid ""
"Fractional seconds may have any number of digits (anything beyond 6 will be "
"truncated)."
msgstr ""

#: ../../library/datetime.rst:1858
msgid "Examples:"
msgstr "例:"

#: ../../library/datetime.rst:1860
msgid ""
">>> from datetime import time\n"
">>> time.fromisoformat('04:23:01')\n"
"datetime.time(4, 23, 1)\n"
">>> time.fromisoformat('T04:23:01')\n"
"datetime.time(4, 23, 1)\n"
">>> time.fromisoformat('T042301')\n"
"datetime.time(4, 23, 1)\n"
">>> time.fromisoformat('04:23:01.000384')\n"
"datetime.time(4, 23, 1, 384)\n"
">>> time.fromisoformat('04:23:01,000384')\n"
"datetime.time(4, 23, 1, 384)\n"
">>> time.fromisoformat('04:23:01+04:00')\n"
"datetime.time(4, 23, 1, tzinfo=datetime.timezone(datetime."
"timedelta(seconds=14400)))\n"
">>> time.fromisoformat('04:23:01Z')\n"
"datetime.time(4, 23, 1, tzinfo=datetime.timezone.utc)\n"
">>> time.fromisoformat('04:23:01+00:00')\n"
"datetime.time(4, 23, 1, tzinfo=datetime.timezone.utc)"
msgstr ""

#: ../../library/datetime.rst:1882
msgid ""
"Previously, this method only supported formats that could be emitted by :"
"meth:`time.isoformat`."
msgstr ""

#: ../../library/datetime.rst:1892
msgid ""
"Return a :class:`.time` with the same value, except for those attributes "
"given new values by whichever keyword arguments are specified. Note that "
"``tzinfo=None`` can be specified to create a naive :class:`.time` from an "
"aware :class:`.time`, without conversion of the time data."
msgstr ""
"キーワード引数で指定したメンバの値を除き、同じ値をもつ :class:`.time` オブ"
"ジェクトを返します。データに対する変換を行わずに aware な :class:`.time` オブ"
"ジェクトから  naive な :class:`.time` オブジェクトを生成するために、 "
"``tzinfo=None`` を指定することもできます。"

#: ../../library/datetime.rst:1897
msgid ""
":class:`.time` objects are also supported by generic function :func:`copy."
"replace`."
msgstr ""
":class:`.time` オブジェクトは汎用的な関数 :func:`copy.replace` にもサポートさ"
"れています。"

#: ../../library/datetime.rst:1906
msgid "Return a string representing the time in ISO 8601 format, one of:"
msgstr "時刻を ISO 8601 書式で表した次の文字列のうち1つを返します::"

#: ../../library/datetime.rst:1908
msgid "``HH:MM:SS.ffffff``, if :attr:`microsecond` is not 0"
msgstr ":attr:`microsecond` が 0 でない場合は ``HH:MM:SS.ffffff``"

#: ../../library/datetime.rst:1909
msgid "``HH:MM:SS``, if :attr:`microsecond` is 0"
msgstr ":attr:`microsecond` が 0 の場合は ``HH:MM:SS``"

#: ../../library/datetime.rst:1910
msgid ""
"``HH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]``, if :meth:`utcoffset` does not "
"return ``None``"
msgstr ""
":meth:`utcoffset` が ``None`` を返さない場合、 ``HH:MM:SS.ffffff+HH:MM[:SS[."
"ffffff]]``"

#: ../../library/datetime.rst:1911
msgid ""
"``HH:MM:SS+HH:MM[:SS[.ffffff]]``, if :attr:`microsecond` is 0 and :meth:"
"`utcoffset` does not return ``None``"
msgstr ""
":attr:`microsecond` が 0 で :meth:`utcoffset` が ``None`` を返さない場合、 "
"``HH:MM:SS+HH:MM[:SS[.ffffff]]``"

#: ../../library/datetime.rst:1931
msgid ":exc:`ValueError` will be raised on an invalid *timespec* argument."
msgstr "不正な *timespec* 引数には :exc:`ValueError` があげられます。"

#: ../../library/datetime.rst:1935
msgid ""
">>> from datetime import time\n"
">>> time(hour=12, minute=34, second=56, microsecond=123456)."
"isoformat(timespec='minutes')\n"
"'12:34'\n"
">>> dt = time(hour=12, minute=34, second=56, microsecond=0)\n"
">>> dt.isoformat(timespec='microseconds')\n"
"'12:34:56.000000'\n"
">>> dt.isoformat(timespec='auto')\n"
"'12:34:56'"
msgstr ""

#: ../../library/datetime.rst:1950
msgid "For a time *t*, ``str(t)`` is equivalent to ``t.isoformat()``."
msgstr ""
":class:`time` オブジェクト *t* において、``str(t)`` は ``t.isoformat()`` と等"
"価です。"

#: ../../library/datetime.rst:1955
msgid ""
"Return a string representing the time, controlled by an explicit format "
"string.  See also :ref:`strftime-strptime-behavior` and :meth:`time."
"isoformat`."
msgstr ""
"明示的な書式文字列で制御された、時刻を表現する文字列を返します。:ref:"
"`strftime-strptime-behavior` および :meth:`time.isoformat` も参照してくださ"
"い。"

#: ../../library/datetime.rst:1961
msgid ""
"Same as :meth:`.time.strftime`. This makes it possible to specify a format "
"string for a :class:`.time` object in :ref:`formatted string literals <f-"
"strings>` and when using :meth:`str.format`. See also :ref:`strftime-"
"strptime-behavior` and :meth:`time.isoformat`."
msgstr ""
":meth:`.time.strftime` と等価です。\n"
"これにより、 :ref:`フォーマット済み文字列リテラル <f-strings>` の中や :meth:"
"`str.format` を使っているときに :class:`.time` オブジェクトの書式文字列を指定"
"できます。\n"
":ref:`strftime-strptime-behavior` および :meth:`time.isoformat` も参照してく"
"ださい。"

#: ../../library/datetime.rst:1969
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(None)``, and raises an exception if the latter doesn't return "
"``None`` or a :class:`timedelta` object with magnitude less than one day."
msgstr ""
":attr:`.tzinfo` が ``None`` の場合、 ``None`` を返し、そうでない場合には "
"``self.tzinfo.utcoffset(None)`` を返します。\n"
"後者の式が ``None`` あるいは 1 日以下の大きさを持つ :class:`timedelta` オブ"
"ジェクトのいずれかを返さない場合には例外を送出します。"

#: ../../library/datetime.rst:1979
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(None)``, and raises an exception if the latter doesn't return ``None``, "
"or a :class:`timedelta` object with magnitude less than one day."
msgstr ""
":attr:`.tzinfo` が ``None`` の場合 ``None`` を返し、そうでない場合には "
"``self.tzinfo.dst(None)`` を返します。\n"
"後者の式が ``None`` もしくは、1 日未満の大きさを持つ :class:`timedelta` オブ"
"ジェクトのいずれかを返さない場合には例外を送出します。"

#: ../../library/datetime.rst:1988
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(None)``, or raises an exception if the latter doesn't return ``None`` "
"or a string object."
msgstr ""
":attr:`.tzinfo` が ``None`` の場合 ``None`` を返し、そうでない場合には "
"``self.tzinfo.tzname(None)`` を返します。\n"
"後者の式が ``None`` か文字列オブジェクトのいずれかを返さない場合には例外を送"
"出します。"

#: ../../library/datetime.rst:1993
msgid "Examples of Usage: :class:`.time`"
msgstr "使用例: :class:`.time`"

#: ../../library/datetime.rst:1995
msgid "Examples of working with a :class:`.time` object::"
msgstr ":class:`.time` オブジェクトを使う例::"

#: ../../library/datetime.rst:1997
msgid ""
">>> from datetime import time, tzinfo, timedelta\n"
">>> class TZ1(tzinfo):\n"
"...     def utcoffset(self, dt):\n"
"...         return timedelta(hours=1)\n"
"...     def dst(self, dt):\n"
"...         return timedelta(0)\n"
"...     def tzname(self,dt):\n"
"...         return \"+01:00\"\n"
"...     def  __repr__(self):\n"
"...         return f\"{self.__class__.__name__}()\"\n"
"...\n"
">>> t = time(12, 10, 30, tzinfo=TZ1())\n"
">>> t\n"
"datetime.time(12, 10, 30, tzinfo=TZ1())\n"
">>> t.isoformat()\n"
"'12:10:30+01:00'\n"
">>> t.dst()\n"
"datetime.timedelta(0)\n"
">>> t.tzname()\n"
"'+01:00'\n"
">>> t.strftime(\"%H:%M:%S %Z\")\n"
"'12:10:30 +01:00'\n"
">>> 'The {} is {:%H:%M}.'.format(\"time\", t)\n"
"'The time is 12:10.'"
msgstr ""

#: ../../library/datetime.rst:2026
msgid ":class:`tzinfo` Objects"
msgstr ":class:`tzinfo` オブジェクト"

#: ../../library/datetime.rst:2030
msgid ""
"This is an abstract base class, meaning that this class should not be "
"instantiated directly.  Define a subclass of :class:`tzinfo` to capture "
"information about a particular time zone."
msgstr ""
"このクラスは抽象基底クラスで、直接インスタンス化すべきでないことを意味しま"
"す。\n"
":class:`tzinfo` のサブクラスを定義し、ある特定のタイムゾーンに関する情報を保"
"持するようにしてください。"

#: ../../library/datetime.rst:2034
msgid ""
"An instance of (a concrete subclass of) :class:`tzinfo` can be passed to the "
"constructors for :class:`.datetime` and :class:`.time` objects. The latter "
"objects view their attributes as being in local time, and the :class:"
"`tzinfo` object supports methods revealing offset of local time from UTC, "
"the name of the time zone, and DST offset, all relative to a date or time "
"object passed to them."
msgstr ""
":class:`tzinfo` (の具体的なサブクラス) のインスタンスは :class:`.datetime` お"
"よび :class:`.time` オブジェクトのコンストラクタに渡すことができます。後者の"
"オブジェクトでは、データ属性をローカル時刻におけるものとして見ており、 :"
"class:`tzinfo` オブジェクトはローカル時刻の UTC からのオフセット、タイムゾー"
"ンの名前、 DST オフセットを、渡された日付および時刻オブジェクトからの相対で示"
"すためのメソッドを提供します。"

#: ../../library/datetime.rst:2040
msgid ""
"You need to derive a concrete subclass, and (at least) supply "
"implementations of the standard :class:`tzinfo` methods needed by the :class:"
"`.datetime` methods you use. The :mod:`!datetime` module provides :class:"
"`timezone`, a simple concrete subclass of :class:`tzinfo` which can "
"represent time zones with fixed offset from UTC such as UTC itself or North "
"American EST and EDT."
msgstr ""
"具象サブクラスを作成し、(少なくとも) 使いたい :class:`.datetime` のメソッドが"
"必要とする :class:`tzinfo` のメソッドを実装する必要があります。\n"
":mod:`!datetime` モジュールは :class:`tzinfo` のシンプルな具象サブクラス :"
"class:`timezone` を提供します。\n"
"これは UTC そのものか北アメリカの EST と EDT のような UTC からの固定されたオ"
"フセットを持つタイムゾーンを表せます。"

#: ../../library/datetime.rst:2047
msgid ""
"Special requirement for pickling:  A :class:`tzinfo` subclass must have an :"
"meth:`~object.__init__` method that can be called with no arguments, "
"otherwise it can be pickled but possibly not unpickled again. This is a "
"technical requirement that may be relaxed in the future."
msgstr ""
"pickle 化についての特殊な要求事項: :class:`tzinfo` のサブクラスは引数なしで呼"
"び出すことのできる :meth:`~object.__init__` メソッドを持たなければなりませ"
"ん。そうでなければ、 pickle 化することはできますがおそらく unpickle 化するこ"
"とはできないでしょう。これは技術的な側面からの要求であり、将来緩和されるかも"
"しれません。"

#: ../../library/datetime.rst:2053
msgid ""
"A concrete subclass of :class:`tzinfo` may need to implement the following "
"methods. Exactly which methods are needed depends on the uses made of aware :"
"mod:`!datetime` objects. If in doubt, simply implement all of them."
msgstr ""
":class:`tzinfo` の具体的なサブクラスでは、以下のメソッドを実装する必要があり"
"ます。厳密にどのメソッドが必要なのかは、 aware な :mod:`!datetime` オブジェク"
"トがこのサブクラスのインスタンスをどのように使うかに依存します。不確かなら"
"ば、単に全てを実装してください。"

#: ../../library/datetime.rst:2060
msgid ""
"Return offset of local time from UTC, as a :class:`timedelta` object that is "
"positive east of UTC. If local time is west of UTC, this should be negative."
msgstr ""
"ローカル時間の UTC からのオフセットを、 UTC から東向きを正とした :class:"
"`timedelta` オブジェクトで返します。ローカル時間が UTC の西側にある場合、この"
"値は負になります。"

#: ../../library/datetime.rst:2063
msgid ""
"This represents the *total* offset from UTC; for example, if a :class:"
"`tzinfo` object represents both time zone and DST adjustments, :meth:"
"`utcoffset` should return their sum. If the UTC offset isn't known, return "
"``None``. Else the value returned must be a :class:`timedelta` object "
"strictly between ``-timedelta(hours=24)`` and ``timedelta(hours=24)`` (the "
"magnitude of the offset must be less than one day). Most implementations of :"
"meth:`utcoffset` will probably look like one of these two::"
msgstr ""
"このメソッドは UTC からのオフセットの *総計* を表しています。例えば、 :class:"
"`tzinfo` オブジェクトがタイムゾーンと DST 修正の両方を表現する場合、 :meth:"
"`utcoffset` はそれらの合計を返さなければなりません。\n"
"UTC オフセットが未知である場合、 ``None`` を返します。\n"
"そうでない場合には、返される値は ``-timedelta(hours=24)`` から "
"``timedelta(hours=24)`` までの :class:`timedelta` 境界を含まないオブジェクト"
"でなければなりません (オフセットの大きさは 1 日より短くなければなりませ"
"ん)。\n"
"ほとんどの :meth:`utcoffset` 実装は、おそらく以下の二つのうちの一つに似たもの"
"になるでしょう::"

#: ../../library/datetime.rst:2071
msgid ""
"return CONSTANT                 # fixed-offset class\n"
"return CONSTANT + self.dst(dt)  # daylight-aware class"
msgstr ""

#: ../../library/datetime.rst:2074
msgid ""
"If :meth:`utcoffset` does not return ``None``, :meth:`dst` should not return "
"``None`` either."
msgstr ""
":meth:`utcoffset` が ``None`` を返さない場合、 :meth:`dst` も ``None`` を返し"
"てはなりません。"

#: ../../library/datetime.rst:2077
msgid ""
"The default implementation of :meth:`utcoffset` raises :exc:"
"`NotImplementedError`."
msgstr ""
":meth:`utcoffset` のデフォルトの実装は :exc:`NotImplementedError` を送出しま"
"す。"

#: ../../library/datetime.rst:2086
msgid ""
"Return the daylight saving time (DST) adjustment, as a :class:`timedelta` "
"object or ``None`` if DST information isn't known."
msgstr ""
"夏時間 (DST) 修正を、 :class:`timedelta`  オブジェクトで返します。\n"
"DST 情報が未知の場合、 ``None`` が返されます。"

#: ../../library/datetime.rst:2090
msgid ""
"Return ``timedelta(0)`` if DST is not in effect. If DST is in effect, return "
"the offset as a :class:`timedelta` object (see :meth:`utcoffset` for "
"details). Note that DST offset, if applicable, has already been added to the "
"UTC offset returned by :meth:`utcoffset`, so there's no need to consult :"
"meth:`dst` unless you're interested in obtaining DST info separately. For "
"example, :meth:`datetime.timetuple` calls its :attr:`~.datetime.tzinfo` "
"attribute's :meth:`dst` method to determine how the :attr:`~time.struct_time."
"tm_isdst` flag should be set, and :meth:`tzinfo.fromutc` calls :meth:`dst` "
"to account for DST changes when crossing time zones."
msgstr ""
"DST が有効でない場合には ``timedelta(0)`` を返します。\n"
"DST が有効の場合、オフセットは :class:`timedelta` オブジェクトで返します (詳"
"細は :meth:`utcoffset` を参照してください)。\n"
"DST オフセットが利用可能な場合、この値は :meth:`utcoffset` が返す UTC からの"
"オフセットには既に加算されているため、 DST を個別に取得する必要がない限り :"
"meth:`dst` を使って問い合わせる必要はないので注意してください。\n"
"例えば、 :meth:`datetime.timetuple` は :attr:`~.datetime.tzinfo` 属性の :"
"meth:`dst` メソッドを呼んで :attr:`~time.struct_time.tm_isdst` フラグがセット"
"されているかどうか判断し、 :meth:`tzinfo.fromutc` は :meth:`dst` タイムゾーン"
"を移動する際に DST による変更があるかどうかを調べます。"

#: ../../library/datetime.rst:2100
msgid ""
"An instance *tz* of a :class:`tzinfo` subclass that models both standard and "
"daylight times must be consistent in this sense:"
msgstr ""
"標準および夏時間の両方をモデル化している :class:`tzinfo` サブクラスのインスタ"
"ンス *tz* は以下の式:"

#: ../../library/datetime.rst:2103
msgid "``tz.utcoffset(dt) - tz.dst(dt)``"
msgstr "``tz.utcoffset(dt) - tz.dst(dt)``"

#: ../../library/datetime.rst:2105
msgid ""
"must return the same result for every :class:`.datetime` *dt* with ``dt."
"tzinfo == tz``. For sane :class:`tzinfo` subclasses, this expression yields "
"the time zone's \"standard offset\", which should not depend on the date or "
"the time, but only on geographic location. The implementation of :meth:"
"`datetime.astimezone` relies on this, but cannot detect violations; it's the "
"programmer's responsibility to ensure it. If a :class:`tzinfo` subclass "
"cannot guarantee this, it may be able to override the default implementation "
"of :meth:`tzinfo.fromutc` to work correctly with :meth:`~.datetime."
"astimezone` regardless."
msgstr ""
"が、 ``dt.tzinfo == tz`` 全ての :class:`.datetime` オブジェクト *dt* について"
"常に同じ結果を返さなければならないという点で、一貫性を持っていなければなりま"
"せん。正常に実装された :class:`tzinfo` のサブクラスでは、この式はタイムゾーン"
"における \"標準オフセット (standard offset)\" を表し、特定の日や時刻の事情で"
"はなく地理的な位置にのみ依存していなくてはなりません。 :meth:`datetime."
"astimezone` の実装はこの事実に依存していますが、違反を検出することができませ"
"ん; 正しく実装するのはプログラマの責任です。 :class:`tzinfo` のサブクラスでこ"
"れを保証することができない場合、 :meth:`tzinfo.fromutc` の実装をオーバライド"
"して、 :meth:`astimezone` に関わらず正しく動作するようにしてもかまいません。"

#: ../../library/datetime.rst:2114
msgid ""
"Most implementations of :meth:`dst` will probably look like one of these "
"two::"
msgstr ""
"ほとんどの :meth:`dst` 実装は、おそらく以下の二つのうちの一つに似たものになる"
"でしょう::"

#: ../../library/datetime.rst:2116
msgid ""
"def dst(self, dt):\n"
"    # a fixed-offset class:  doesn't account for DST\n"
"    return timedelta(0)"
msgstr ""

#: ../../library/datetime.rst:2120
msgid "or::"
msgstr "もしくは::"

#: ../../library/datetime.rst:2122
msgid ""
"def dst(self, dt):\n"
"    # Code to set dston and dstoff to the time zone's DST\n"
"    # transition times based on the input dt.year, and expressed\n"
"    # in standard local time.\n"
"\n"
"    if dston <= dt.replace(tzinfo=None) < dstoff:\n"
"        return timedelta(hours=1)\n"
"    else:\n"
"        return timedelta(0)"
msgstr ""

#: ../../library/datetime.rst:2132
msgid ""
"The default implementation of :meth:`dst` raises :exc:`NotImplementedError`."
msgstr ""
"デフォルトの :meth:`dst` 実装は :exc:`NotImplementedError` を送出します。"

#: ../../library/datetime.rst:2140
msgid ""
"Return the time zone name corresponding to the :class:`.datetime` object "
"*dt*, as a string. Nothing about string names is defined by the :mod:`!"
"datetime` module, and there's no requirement that it mean anything in "
"particular. For example, ``\"GMT\"``, ``\"UTC\"``, ``\"-500\"``, "
"``\"-5:00\"``, ``\"EDT\"``, ``\"US/Eastern\"``, ``\"America/New York\"`` are "
"all valid replies. Return ``None`` if a string name isn't known. Note that "
"this is a method rather than a fixed string primarily because some :class:"
"`tzinfo` subclasses will wish to return different names depending on the "
"specific value of *dt* passed, especially if the :class:`tzinfo` class is "
"accounting for daylight time."
msgstr ""
":class:`.datetime` オブジェクト *dt* に対応するタイムゾーン名を文字列で返しま"
"す。 :mod:`!datetime` モジュールでは文字列名について何も定義しておらず、特に"
"何かを意味するといった要求仕様もまったくありません。例えば、``\"GMT\"``, "
"``\"UTC\"``, ``\"-500\"``, ``\"-5:00\"``, ``\"EDT\"``, ``\"US/Eastern\"``, "
"``\"America/New York\"`` は全て有効な応答となります。文字列名が未知の場合に"
"は ``None`` を返してください。 :class:`tzinfo` のサブクラスでは、特に, :"
"class:`tzinfo` クラスが夏時間について記述している場合のように、渡された *dt* "
"の特定の値によって異なった名前を返したい場合があるため、文字列値ではなくメ"
"ソッドとなっていることに注意してください。"

#: ../../library/datetime.rst:2150
msgid ""
"The default implementation of :meth:`tzname` raises :exc:"
"`NotImplementedError`."
msgstr ""
"デフォルトの :meth:`tzname` 実装は :exc:`NotImplementedError` を送出します。"

#: ../../library/datetime.rst:2153
msgid ""
"These methods are called by a :class:`.datetime` or :class:`.time` object, "
"in response to their methods of the same names. A :class:`.datetime` object "
"passes itself as the argument, and a :class:`.time` object passes ``None`` "
"as the argument. A :class:`tzinfo` subclass's methods should therefore be "
"prepared to accept a *dt* argument of ``None``, or of class :class:`."
"datetime`."
msgstr ""
"以下のメソッドは :class:`.datetime` や :class:`.time` オブジェクトにおいて、"
"同名のメソッドが呼び出された際に応じて呼び出されます。 :class:`.datetime` オ"
"ブジェクトは自身を引数としてメソッドに渡し、 :class:`.time` オブジェクトは引"
"数として ``None`` をメソッドに渡します。従って、 :class:`tzinfo` のサブクラス"
"におけるメソッドは引数 *dt* が ``None`` の場合と、 :class:`.datetime` の場合"
"を受理するように用意しなければなりません。"

#: ../../library/datetime.rst:2159
msgid ""
"When ``None`` is passed, it's up to the class designer to decide the best "
"response. For example, returning ``None`` is appropriate if the class wishes "
"to say that time objects don't participate in the :class:`tzinfo` protocols. "
"It may be more useful for ``utcoffset(None)`` to return the standard UTC "
"offset, as there is no other convention for discovering the standard offset."
msgstr ""
"``None`` が渡された場合、最良の応答方法を決めるのはクラス設計者次第です。例え"
"ば、このクラスが :class:`tzinfo` プロトコルと関係をもたないということを表明さ"
"せたければ、 ``None`` が適切です。標準時のオフセットを見つける他の手段がない"
"場合には、標準 UTC オフセットを返すために ``utcoffset(None)`` を使うともっと"
"便利かもしれません。"

#: ../../library/datetime.rst:2165
msgid ""
"When a :class:`.datetime` object is passed in response to a :class:`."
"datetime` method, ``dt.tzinfo`` is the same object as *self*. :class:"
"`tzinfo` methods can rely on this, unless user code calls :class:`tzinfo` "
"methods directly. The intent is that the :class:`tzinfo` methods interpret "
"*dt* as being in local time, and not need worry about objects in other time "
"zones."
msgstr ""
":class:`.datetime` オブジェクトが :meth:`.datetime` メソッドの応答として返さ"
"れた場合、 ``dt.tzinfo`` は *self* と同じオブジェクトになります。ユーザが直"
"接 :class:`tzinfo` メソッドを呼び出さないかぎり、 :class:`tzinfo` メソッドは "
"``dt.tzinfo`` と *self* が同じであることに依存します。その結果 :class:"
"`tzinfo` メソッドは *dt* がローカル時間であると解釈するので、他のタイムゾーン"
"でのオブジェクトの振る舞いについて心配する必要がありません。"

#: ../../library/datetime.rst:2171
msgid ""
"There is one more :class:`tzinfo` method that a subclass may wish to "
"override:"
msgstr ""
"サブクラスでオーバーライドすると良い、もう 1 つの :class:`tzinfo` のメソッド"
"があります:"

#: ../../library/datetime.rst:2176
msgid ""
"This is called from the default :meth:`datetime.astimezone` implementation. "
"When called from that, ``dt.tzinfo`` is *self*, and *dt*'s date and time "
"data are to be viewed as expressing a UTC time. The purpose of :meth:"
"`fromutc` is to adjust the date and time data, returning an equivalent "
"datetime in *self*'s local time."
msgstr ""
"デフォルトの  実装で呼び出されます。 :meth:`datetime.astimezone` から呼ばれた"
"場合、 ``dt.tzinfo`` は *self* であり、 *dt* の日付および時刻データは UTC 時"
"刻を表しているものとして見えます。 :meth:`fromutc` の目的は、 *self* のローカ"
"ル時刻に等しい :class:`datetime` オブジェクトを返すことにより日付と時刻データ"
"メンバを修正することにあります。"

#: ../../library/datetime.rst:2182
msgid ""
"Most :class:`tzinfo` subclasses should be able to inherit the default :meth:"
"`fromutc` implementation without problems. It's strong enough to handle "
"fixed-offset time zones, and time zones accounting for both standard and "
"daylight time, and the latter even if the DST transition times differ in "
"different years. An example of a time zone the default :meth:`fromutc` "
"implementation may not handle correctly in all cases is one where the "
"standard offset (from UTC) depends on the specific date and time passed, "
"which can happen for political reasons. The default implementations of :meth:"
"`~.datetime.astimezone` and :meth:`fromutc` may not produce the result you "
"want if the result is one of the hours straddling the moment the standard "
"offset changes."
msgstr ""
"ほとんどの :class:`tzinfo` サブクラスではデフォルトの :meth:`fromutc` 実装を"
"問題なく継承できます。デフォルトの実装は、固定オフセットのタイムゾーンや、標"
"準時と夏時間の両方について記述しているタイムゾーン、そして DST 移行時刻が年に"
"よって異なる場合でさえ、扱えるくらい強力なものです。デフォルトの :meth:"
"`fromutc` 実装が全ての場合に対して正しく扱うことができないような例は、標準時"
"の (UTCからの) オフセットが引数として渡された特定の日や時刻に依存するもので、"
"これは政治的な理由によって起きることがあります。デフォルトの :meth:`~."
"datetime.astimezone` や :meth:`fromutc` の実装は、結果が標準時オフセットの変"
"化にまたがる何時間かの中にある場合、期待通りの結果を生成しないかもしれませ"
"ん。"

#: ../../library/datetime.rst:2193
msgid ""
"Skipping code for error cases, the default :meth:`fromutc` implementation "
"acts like::"
msgstr ""
"エラーの場合のためのコードを除き、デフォルトの :meth:`fromutc` の実装は以下の"
"ように動作します::"

#: ../../library/datetime.rst:2196
msgid ""
"def fromutc(self, dt):\n"
"    # raise ValueError error if dt.tzinfo is not self\n"
"    dtoff = dt.utcoffset()\n"
"    dtdst = dt.dst()\n"
"    # raise ValueError if dtoff is None or dtdst is None\n"
"    delta = dtoff - dtdst  # this is self's standard offset\n"
"    if delta:\n"
"        dt += delta   # convert to standard local time\n"
"        dtdst = dt.dst()\n"
"        # raise ValueError if dtdst is None\n"
"    if dtdst:\n"
"        return dt + dtdst\n"
"    else:\n"
"        return dt"
msgstr ""

#: ../../library/datetime.rst:2211
msgid ""
"In the following :download:`tzinfo_examples.py <../includes/tzinfo_examples."
"py>` file there are some examples of :class:`tzinfo` classes:"
msgstr ""
"次の :download:`tzinfo_examples.py <../includes/tzinfo_examples.py>` ファイル"
"には、 :class:`tzinfo` クラスの例がいくつか載っています:"

#: ../../library/datetime.rst:2215
msgid ""
"from datetime import tzinfo, timedelta, datetime\n"
"\n"
"ZERO = timedelta(0)\n"
"HOUR = timedelta(hours=1)\n"
"SECOND = timedelta(seconds=1)\n"
"\n"
"# A class capturing the platform's idea of local time.\n"
"# (May result in wrong values on historical times in\n"
"#  timezones where UTC offset and/or the DST rules had\n"
"#  changed in the past.)\n"
"import time as _time\n"
"\n"
"STDOFFSET = timedelta(seconds = -_time.timezone)\n"
"if _time.daylight:\n"
"    DSTOFFSET = timedelta(seconds = -_time.altzone)\n"
"else:\n"
"    DSTOFFSET = STDOFFSET\n"
"\n"
"DSTDIFF = DSTOFFSET - STDOFFSET\n"
"\n"
"class LocalTimezone(tzinfo):\n"
"\n"
"    def fromutc(self, dt):\n"
"        assert dt.tzinfo is self\n"
"        stamp = (dt - datetime(1970, 1, 1, tzinfo=self)) // SECOND\n"
"        args = _time.localtime(stamp)[:6]\n"
"        dst_diff = DSTDIFF // SECOND\n"
"        # Detect fold\n"
"        fold = (args == _time.localtime(stamp - dst_diff))\n"
"        return datetime(*args, microsecond=dt.microsecond,\n"
"                        tzinfo=self, fold=fold)\n"
"\n"
"    def utcoffset(self, dt):\n"
"        if self._isdst(dt):\n"
"            return DSTOFFSET\n"
"        else:\n"
"            return STDOFFSET\n"
"\n"
"    def dst(self, dt):\n"
"        if self._isdst(dt):\n"
"            return DSTDIFF\n"
"        else:\n"
"            return ZERO\n"
"\n"
"    def tzname(self, dt):\n"
"        return _time.tzname[self._isdst(dt)]\n"
"\n"
"    def _isdst(self, dt):\n"
"        tt = (dt.year, dt.month, dt.day,\n"
"              dt.hour, dt.minute, dt.second,\n"
"              dt.weekday(), 0, 0)\n"
"        stamp = _time.mktime(tt)\n"
"        tt = _time.localtime(stamp)\n"
"        return tt.tm_isdst > 0\n"
"\n"
"Local = LocalTimezone()\n"
"\n"
"\n"
"# A complete implementation of current DST rules for major US time zones.\n"
"\n"
"def first_sunday_on_or_after(dt):\n"
"    days_to_go = 6 - dt.weekday()\n"
"    if days_to_go:\n"
"        dt += timedelta(days_to_go)\n"
"    return dt\n"
"\n"
"\n"
"# US DST Rules\n"
"#\n"
"# This is a simplified (i.e., wrong for a few cases) set of rules for US\n"
"# DST start and end times. For a complete and up-to-date set of DST rules\n"
"# and timezone definitions, visit the Olson Database (or try pytz):\n"
"# http://www.twinsun.com/tz/tz-link.htm\n"
"# https://sourceforge.net/projects/pytz/ (might not be up-to-date)\n"
"#\n"
"# In the US, since 2007, DST starts at 2am (standard time) on the second\n"
"# Sunday in March, which is the first Sunday on or after Mar 8.\n"
"DSTSTART_2007 = datetime(1, 3, 8, 2)\n"
"# and ends at 2am (DST time) on the first Sunday of Nov.\n"
"DSTEND_2007 = datetime(1, 11, 1, 2)\n"
"# From 1987 to 2006, DST used to start at 2am (standard time) on the first\n"
"# Sunday in April and to end at 2am (DST time) on the last\n"
"# Sunday of October, which is the first Sunday on or after Oct 25.\n"
"DSTSTART_1987_2006 = datetime(1, 4, 1, 2)\n"
"DSTEND_1987_2006 = datetime(1, 10, 25, 2)\n"
"# From 1967 to 1986, DST used to start at 2am (standard time) on the last\n"
"# Sunday in April (the one on or after April 24) and to end at 2am (DST "
"time)\n"
"# on the last Sunday of October, which is the first Sunday\n"
"# on or after Oct 25.\n"
"DSTSTART_1967_1986 = datetime(1, 4, 24, 2)\n"
"DSTEND_1967_1986 = DSTEND_1987_2006\n"
"\n"
"def us_dst_range(year):\n"
"    # Find start and end times for US DST. For years before 1967, return\n"
"    # start = end for no DST.\n"
"    if 2006 < year:\n"
"        dststart, dstend = DSTSTART_2007, DSTEND_2007\n"
"    elif 1986 < year < 2007:\n"
"        dststart, dstend = DSTSTART_1987_2006, DSTEND_1987_2006\n"
"    elif 1966 < year < 1987:\n"
"        dststart, dstend = DSTSTART_1967_1986, DSTEND_1967_1986\n"
"    else:\n"
"        return (datetime(year, 1, 1), ) * 2\n"
"\n"
"    start = first_sunday_on_or_after(dststart.replace(year=year))\n"
"    end = first_sunday_on_or_after(dstend.replace(year=year))\n"
"    return start, end\n"
"\n"
"\n"
"class USTimeZone(tzinfo):\n"
"\n"
"    def __init__(self, hours, reprname, stdname, dstname):\n"
"        self.stdoffset = timedelta(hours=hours)\n"
"        self.reprname = reprname\n"
"        self.stdname = stdname\n"
"        self.dstname = dstname\n"
"\n"
"    def __repr__(self):\n"
"        return self.reprname\n"
"\n"
"    def tzname(self, dt):\n"
"        if self.dst(dt):\n"
"            return self.dstname\n"
"        else:\n"
"            return self.stdname\n"
"\n"
"    def utcoffset(self, dt):\n"
"        return self.stdoffset + self.dst(dt)\n"
"\n"
"    def dst(self, dt):\n"
"        if dt is None or dt.tzinfo is None:\n"
"            # An exception may be sensible here, in one or both cases.\n"
"            # It depends on how you want to treat them.  The default\n"
"            # fromutc() implementation (called by the default astimezone()\n"
"            # implementation) passes a datetime with dt.tzinfo is self.\n"
"            return ZERO\n"
"        assert dt.tzinfo is self\n"
"        start, end = us_dst_range(dt.year)\n"
"        # Can't compare naive to aware objects, so strip the timezone from\n"
"        # dt first.\n"
"        dt = dt.replace(tzinfo=None)\n"
"        if start + HOUR <= dt < end - HOUR:\n"
"            # DST is in effect.\n"
"            return HOUR\n"
"        if end - HOUR <= dt < end:\n"
"            # Fold (an ambiguous hour): use dt.fold to disambiguate.\n"
"            return ZERO if dt.fold else HOUR\n"
"        if start <= dt < start + HOUR:\n"
"            # Gap (a non-existent hour): reverse the fold rule.\n"
"            return HOUR if dt.fold else ZERO\n"
"        # DST is off.\n"
"        return ZERO\n"
"\n"
"    def fromutc(self, dt):\n"
"        assert dt.tzinfo is self\n"
"        start, end = us_dst_range(dt.year)\n"
"        start = start.replace(tzinfo=self)\n"
"        end = end.replace(tzinfo=self)\n"
"        std_time = dt + self.stdoffset\n"
"        dst_time = std_time + HOUR\n"
"        if end <= dst_time < end + HOUR:\n"
"            # Repeated hour\n"
"            return std_time.replace(fold=1)\n"
"        if std_time < start or dst_time >= end:\n"
"            # Standard time\n"
"            return std_time\n"
"        if start <= std_time < end - HOUR:\n"
"            # Daylight saving time\n"
"            return dst_time\n"
"\n"
"\n"
"Eastern  = USTimeZone(-5, \"Eastern\",  \"EST\", \"EDT\")\n"
"Central  = USTimeZone(-6, \"Central\",  \"CST\", \"CDT\")\n"
"Mountain = USTimeZone(-7, \"Mountain\", \"MST\", \"MDT\")\n"
"Pacific  = USTimeZone(-8, \"Pacific\",  \"PST\", \"PDT\")\n"
msgstr ""

#: ../../library/datetime.rst:2217
msgid ""
"Note that there are unavoidable subtleties twice per year in a :class:"
"`tzinfo` subclass accounting for both standard and daylight time, at the DST "
"transition points. For concreteness, consider US Eastern (UTC -0500), where "
"EDT begins the minute after 1:59 (EST) on the second Sunday in March, and "
"ends the minute after 1:59 (EDT) on the first Sunday in November::"
msgstr ""
"標準時および夏時間の両方を記述している :class:`tzinfo` のサブクラスでは、夏時"
"間の移行のときに、回避不能の難解な問題が年に 2 度あるので注意してください。\n"
"具体的な例として、東部アメリカ時刻 (US Eastern, UTC -0500) を考えます。\n"
"EDT は 3 月の第二日曜日の 1:59 (EST) の 1 分後に開始し、11 月の最初の日曜日"
"の (EDTの) 1:59 に終了します::"

#: ../../library/datetime.rst:2223
msgid ""
"  UTC   3:MM  4:MM  5:MM  6:MM  7:MM  8:MM\n"
"  EST  22:MM 23:MM  0:MM  1:MM  2:MM  3:MM\n"
"  EDT  23:MM  0:MM  1:MM  2:MM  3:MM  4:MM\n"
"\n"
"start  22:MM 23:MM  0:MM  1:MM  3:MM  4:MM\n"
"\n"
"  end  23:MM  0:MM  1:MM  1:MM  2:MM  3:MM"
msgstr ""

#: ../../library/datetime.rst:2231
msgid ""
"When DST starts (the \"start\" line), the local wall clock leaps from 1:59 "
"to 3:00. A wall time of the form 2:MM doesn't really make sense on that day, "
"so ``astimezone(Eastern)`` won't deliver a result with ``hour == 2`` on the "
"day DST begins. For example, at the Spring forward transition of 2016, we "
"get::"
msgstr ""
"DSTの開始 (\"start\" ライン) で、ローカルの実時間は 1:59 から 3:00 に飛びま"
"す。\n"
"この日には、 2:MM という形式の実時間は意味をなさないので、 DST が始まった日"
"に ``astimezone(Eastern)`` は ``hour == 2`` となる結果を返すことはありませ"
"ん。\n"
"例として、 2016 年の春方向の移行では、次のような結果になります::"

#: ../../library/datetime.rst:2236
msgid ""
">>> from datetime import datetime, timezone\n"
">>> from tzinfo_examples import HOUR, Eastern\n"
">>> u0 = datetime(2016, 3, 13, 5, tzinfo=timezone.utc)\n"
">>> for i in range(4):\n"
"...     u = u0 + i*HOUR\n"
"...     t = u.astimezone(Eastern)\n"
"...     print(u.time(), 'UTC =', t.time(), t.tzname())\n"
"...\n"
"05:00:00 UTC = 00:00:00 EST\n"
"06:00:00 UTC = 01:00:00 EST\n"
"07:00:00 UTC = 03:00:00 EDT\n"
"08:00:00 UTC = 04:00:00 EDT"
msgstr ""

#: ../../library/datetime.rst:2250
msgid ""
"When DST ends (the \"end\" line), there's a potentially worse problem: "
"there's an hour that can't be spelled unambiguously in local wall time: the "
"last hour of daylight time. In Eastern, that's times of the form 5:MM UTC on "
"the day daylight time ends. The local wall clock leaps from 1:59 (daylight "
"time) back to 1:00 (standard time) again. Local times of the form 1:MM are "
"ambiguous. :meth:`~.datetime.astimezone` mimics the local clock's behavior "
"by mapping two adjacent UTC hours into the same local hour then. In the "
"Eastern example, UTC times of the form 5:MM and 6:MM both map to 1:MM when "
"converted to Eastern, but earlier times have the :attr:`~.datetime.fold` "
"attribute set to 0 and the later times have it set to 1. For example, at the "
"Fall back transition of 2016, we get::"
msgstr ""
"DST が終了 (\"end\" ライン) で、更なる問題が潜んでいます: ローカルの実時間"
"で、曖昧さ無しに時を綴れない 1 時間が存在します: それは夏時間の最後の 1 時間"
"です。\n"
"東部では、夏時間が終了する日の UTC での 5:MM 形式の時間がそれです。\n"
"ローカルの実時間は (夏時間の) 1:59 から (標準時の) 1:00 に再び巻き戻されま"
"す。\n"
"ローカルの時刻における 1:MM は曖昧です。\n"
"そして :meth:`~.datetime.astimezone` は 2 つの隣り合う UTC 時間を同じローカル"
"の時間に対応付けて、ローカルの時計の振る舞いを真似ます。\n"
"東部の例では、 5:MM および 6:MM という形式の UTC 時刻は両方とも東部時刻に変換"
"された際に 1:MM に対応付けられますが、それ以前の時間は :attr:`~.datetime."
"fold` 属性を 0 にし、以降の時間では 1 にします。例えば、 2016 年での秋方向の"
"移行では、次のような結果になります::"

#: ../../library/datetime.rst:2261
msgid ""
">>> u0 = datetime(2016, 11, 6, 4, tzinfo=timezone.utc)\n"
">>> for i in range(4):\n"
"...     u = u0 + i*HOUR\n"
"...     t = u.astimezone(Eastern)\n"
"...     print(u.time(), 'UTC =', t.time(), t.tzname(), t.fold)\n"
"...\n"
"04:00:00 UTC = 00:00:00 EDT 0\n"
"05:00:00 UTC = 01:00:00 EDT 0\n"
"06:00:00 UTC = 01:00:00 EST 1\n"
"07:00:00 UTC = 02:00:00 EST 0"
msgstr ""

#: ../../library/datetime.rst:2272
msgid ""
"Note that the :class:`.datetime` instances that differ only by the value of "
"the :attr:`~.datetime.fold` attribute are considered equal in comparisons."
msgstr ""
":attr:`~.datetime.fold` 属性が異なるだけの :class:`.datetime` インスタンスは"
"比較において等しいとみなされることに注意してください。"

#: ../../library/datetime.rst:2275
msgid ""
"Applications that can't bear wall-time ambiguities should explicitly check "
"the value of the :attr:`~.datetime.fold` attribute or avoid using hybrid :"
"class:`tzinfo` subclasses; there are no ambiguities when using :class:"
"`timezone`, or any other fixed-offset :class:`tzinfo` subclass (such as a "
"class representing only EST (fixed offset -5 hours), or only EDT (fixed "
"offset -4 hours))."
msgstr ""
"壁時間に関する曖昧さは、明示的に :attr:`~.datetime.fold` 属性を検証するか、 :"
"class:`timezone` が使用されたハイブリッドな :class:`tzinfo` サブクラスか、そ"
"のほかの絶対時間差を示す :class:`tzinfo` サブクラス(EST (-5 時間の絶対時間"
"差) のみを表すクラスや、 EDT (-4 時間の絶対時間差) のみを表すクラス)を使用す"
"ると回避できます。\n"
"このような曖昧さを許容できないアプリケーションは、このような手法によって回避"
"すべきです。"

#: ../../library/datetime.rst:2283
msgid ":mod:`zoneinfo`"
msgstr ":mod:`zoneinfo`"

#: ../../library/datetime.rst:2284
msgid ""
"The :mod:`!datetime` module has a basic :class:`timezone` class (for "
"handling arbitrary fixed offsets from UTC) and its :attr:`timezone.utc` "
"attribute (a UTC :class:`!timezone` instance)."
msgstr ""
":mod:`!datetime` モジュールには (UTC からの任意の固定オフセットを扱う) 基本的"
"な :class:`timezone` クラスと、(UTC  :class:`!timezone` のインスタンスであ"
"る) :attr:`timezone.utc` 属性があります。"

#: ../../library/datetime.rst:2288
msgid ""
"``zoneinfo`` brings the *IANA time zone database* (also known as the Olson "
"database) to Python, and its usage is recommended."
msgstr ""
"``zoneinfo`` は Python に *IANA タイムゾーンデータベース* (オルソンデータベー"
"スとしても知られています) を導入するもので、これを使うことが推奨されていま"
"す。"

#: ../../library/datetime.rst:2291
msgid "`IANA time zone database <https://www.iana.org/time-zones>`_"
msgstr "`IANA タイムゾーンデータベース <https://www.iana.org/time-zones>`_"

#: ../../library/datetime.rst:2292
msgid ""
"The Time Zone Database (often called tz, tzdata or zoneinfo) contains code "
"and data that represent the history of local time for many representative "
"locations around the globe. It is updated periodically to reflect changes "
"made by political bodies to time zone boundaries, UTC offsets, and daylight-"
"saving rules."
msgstr ""
"(しばしば tz、tzdata や zoneinfo と呼ばれる) タイムゾーンデータベースはコード"
"とデータを保持しており、それらは地球全体にわたる多くの代表的な場所のローカル"
"時刻の履歴を表しています。政治団体によるタイムゾーンの境界、UTC オフセット、"
"夏時間のルールの変更を反映するため、定期的にデータベースが更新されます。"

#: ../../library/datetime.rst:2302
msgid ":class:`timezone` Objects"
msgstr ":class:`timezone` オブジェクト"

#: ../../library/datetime.rst:2304
msgid ""
"The :class:`timezone` class is a subclass of :class:`tzinfo`, each instance "
"of which represents a time zone defined by a fixed offset from UTC."
msgstr ""
":class:`timezone` クラスは :class:`tzinfo` のサブクラスで、各インスタンスは "
"UTC からの固定されたオフセットで定義されたタイムゾーンを表しています。"

#: ../../library/datetime.rst:2308
msgid ""
"Objects of this class cannot be used to represent time zone information in "
"the locations where different offsets are used in different days of the year "
"or where historical changes have been made to civil time."
msgstr ""
"このクラスのオブジェクトは、一年のうち異なる日に異なるオフセットが使われてい"
"たり、常用時 (civil time) に歴史的な変化が起きた場所のタイムゾーン情報を表す"
"のには使えないので注意してください。"

#: ../../library/datetime.rst:2315
msgid ""
"The *offset* argument must be specified as a :class:`timedelta` object "
"representing the difference between the local time and UTC. It must be "
"strictly between ``-timedelta(hours=24)`` and ``timedelta(hours=24)``, "
"otherwise :exc:`ValueError` is raised."
msgstr ""
"ローカル時刻と UTC の差分を表す :class:`timedelta` オブジェクトを *offset* 引"
"数に指定しなくてはいけません。これは ``-timedelta(hours=24)`` から "
"``timedelta(hours=24)`` までの両端を含まない範囲に収まっていなくてはなりませ"
"ん。そうでない場合 :exc:`ValueError` が送出されます。"

#: ../../library/datetime.rst:2320
msgid ""
"The *name* argument is optional. If specified it must be a string that will "
"be used as the value returned by the :meth:`datetime.tzname` method."
msgstr ""
"*name* 引数は必須ではありません。もし指定された場合、その値は :meth:"
"`datetime.tzname` メソッドの返り値として使われる文字列でなければなりません。"

#: ../../library/datetime.rst:2331 ../../library/datetime.rst:2342
msgid ""
"Return the fixed value specified when the :class:`timezone` instance is "
"constructed."
msgstr ""
":class:`timezone` インスタンスが構築されたときに指定された固定値を返します。"

#: ../../library/datetime.rst:2334
msgid ""
"The *dt* argument is ignored. The return value is a :class:`timedelta` "
"instance equal to the difference between the local time and UTC."
msgstr ""
"*dt* 引数は無視されます。\n"
"返り値は、ローカル時刻と UTC の差分に等しい :class:`timedelta` インスタンスで"
"す。"

#: ../../library/datetime.rst:2345
msgid ""
"If *name* is not provided in the constructor, the name returned by "
"``tzname(dt)`` is generated from the value of the ``offset`` as follows. If "
"*offset* is ``timedelta(0)``, the name is \"UTC\", otherwise it is a string "
"in the format ``UTC±HH:MM``, where ± is the sign of ``offset``, HH and MM "
"are two digits of ``offset.hours`` and ``offset.minutes`` respectively."
msgstr ""
"*name* が構築時に与えられなかった場合、 ``tzname(dt)`` によって返される name "
"は以下の様に ``offset`` の値から生成されます。\n"
"*offset* が ``timedelta(0)`` であった場合、 name は \"UTC\"になります。\n"
"それ以外の場合、 'UTC±HH:MM' という書式の文字列になり、± は ``offset`` を、"
"HH と MM はそれぞれ二桁の ``offset.hours`` と ``offset.minutes`` を表現しま"
"す。"

#: ../../library/datetime.rst:2351
msgid ""
"Name generated from ``offset=timedelta(0)`` is now plain ``'UTC'``, not "
"``'UTC+00:00'``."
msgstr ""
"``offset=timedelta(0)`` によって生成される名前はプレーンな `'UTC'` であり "
"``'UTC+00:00'`` ではありません。"

#: ../../library/datetime.rst:2358
msgid "Always returns ``None``."
msgstr "常に ``None`` を返します。"

#: ../../library/datetime.rst:2362
msgid ""
"Return ``dt + offset``. The *dt* argument must be an aware :class:`."
"datetime` instance, with ``tzinfo`` set to ``self``."
msgstr ""
"``dt + offset`` を返します。 *dt* 引数は ``tzinfo`` が ``self`` になっている "
"aware な :class:`.datetime` インスタンスでなければなりません。"

#: ../../library/datetime.rst:2369
msgid "The UTC time zone, ``timezone(timedelta(0))``."
msgstr "UTC タイムゾーン ``timezone(timedelta(0))`` です。"

#: ../../library/datetime.rst:2378
msgid ":meth:`~.datetime.strftime` and :meth:`~.datetime.strptime` Behavior"
msgstr ":meth:`~.datetime.strftime` と :meth:`~.datetime.strptime` の振る舞い"

#: ../../library/datetime.rst:2380
msgid ""
":class:`date`, :class:`.datetime`, and :class:`.time` objects all support a "
"``strftime(format)`` method, to create a string representing the time under "
"the control of an explicit format string."
msgstr ""
":class:`date`, :class:`.datetime`, :class:`.time` オブジェクトは全て "
"``strftime(format)`` メソッドをサポートし、時刻を表現する文字列を明示的な書式"
"文字列で統制して作成しています。"

#: ../../library/datetime.rst:2384
msgid ""
"Conversely, the :meth:`datetime.strptime` class method creates a :class:`."
"datetime` object from a string representing a date and time and a "
"corresponding format string."
msgstr ""
"逆に :meth:`datetime.strptime` クラスメソッドは日付や時刻に対応する書式文字列"
"から :class:`.datetime` オブジェクトを生成します。"

#: ../../library/datetime.rst:2388
msgid ""
"The table below provides a high-level comparison of :meth:`~.datetime."
"strftime` versus :meth:`~.datetime.strptime`:"
msgstr ""
"下の表は :meth:`~.datetime.strftime` と :meth:`~.datetime.strptime` との高レ"
"ベルの対比を表しています。"

#: ../../library/datetime.rst:2392
msgid "``strftime``"
msgstr "``strftime``"

#: ../../library/datetime.rst:2392
msgid "``strptime``"
msgstr "``strptime``"

#: ../../library/datetime.rst:2394
msgid "Usage"
msgstr "使用法"

#: ../../library/datetime.rst:2394
msgid "Convert object to a string according to a given format"
msgstr "オブジェクトを与えられた書式に従って文字列に変換する"

#: ../../library/datetime.rst:2394
msgid ""
"Parse a string into a :class:`.datetime` object given a corresponding format"
msgstr ""
"指定された対応する書式で文字列を構文解析して :class:`.datetime` オブジェクト"
"にする"

#: ../../library/datetime.rst:2396
msgid "Type of method"
msgstr "メソッドの種類"

#: ../../library/datetime.rst:2396
msgid "Instance method"
msgstr "インスタンスメソッド"

#: ../../library/datetime.rst:2396
msgid "Class method"
msgstr "クラスメソッド"

#: ../../library/datetime.rst:2398
msgid "Method of"
msgstr "メソッドを持つクラス"

#: ../../library/datetime.rst:2398
msgid ":class:`date`; :class:`.datetime`; :class:`.time`"
msgstr ":class:`date`; :class:`.datetime`; :class:`.time`"

#: ../../library/datetime.rst:2398
msgid ":class:`.datetime`"
msgstr ":class:`.datetime`"

#: ../../library/datetime.rst:2400
msgid "Signature"
msgstr "シグネチャ"

#: ../../library/datetime.rst:2400
msgid "``strftime(format)``"
msgstr "``strftime(format)``"

#: ../../library/datetime.rst:2400
msgid "``strptime(date_string, format)``"
msgstr "``strptime(date_string, format)``"

#: ../../library/datetime.rst:2407
msgid ""
":meth:`~.datetime.strftime` and :meth:`~.datetime.strptime` Format Codes"
msgstr ""
":meth:`~.datetime.strftime` と :meth:`~.datetime.strptime` の書式コード"

#: ../../library/datetime.rst:2409
msgid ""
"These methods accept format codes that can be used to parse and format "
"dates::"
msgstr ""

#: ../../library/datetime.rst:2411
msgid ""
">>> datetime.strptime('31/01/22 23:59:59.999999',\n"
"...                   '%d/%m/%y %H:%M:%S.%f')\n"
"datetime.datetime(2022, 1, 31, 23, 59, 59, 999999)\n"
">>> _.strftime('%a %d %b %Y, %I:%M%p')\n"
"'Mon 31 Jan 2022, 11:59PM'"
msgstr ""

#: ../../library/datetime.rst:2417
msgid ""
"The following is a list of all the format codes that the 1989 C standard "
"requires, and these work on all platforms with a standard C implementation."
msgstr ""
"以下のリストは 1989 C 標準が要求する全ての書式コードで、標準 C 実装があれば全"
"ての環境で動作します。"

#: ../../library/datetime.rst:2421 ../../library/datetime.rst:2524
msgid "Directive"
msgstr "ディレクティブ"

#: ../../library/datetime.rst:2421 ../../library/datetime.rst:2524
msgid "Meaning"
msgstr "意味"

#: ../../library/datetime.rst:2421 ../../library/datetime.rst:2524
msgid "Example"
msgstr "使用例"

#: ../../library/datetime.rst:2421 ../../library/datetime.rst:2524
msgid "Notes"
msgstr "注釈"

#: ../../library/datetime.rst:2423
msgid "``%a``"
msgstr "``%a``"

#: ../../library/datetime.rst:2423
msgid "Weekday as locale's abbreviated name."
msgstr "ロケールの曜日名を短縮形で表示します。"

#: ../../library/datetime.rst:0
msgid "Sun, Mon, ..., Sat (en_US);"
msgstr "Sun, Mon, ..., Sat (en_US);"

#: ../../library/datetime.rst:0
msgid "So, Mo, ..., Sa (de_DE)"
msgstr "So, Mo, ..., Sa (de_DE)"

#: ../../library/datetime.rst:2428
msgid "``%A``"
msgstr "``%A``"

#: ../../library/datetime.rst:2428
msgid "Weekday as locale's full name."
msgstr "ロケールの曜日名を表示します。"

#: ../../library/datetime.rst:0
msgid "Sunday, Monday, ..., Saturday (en_US);"
msgstr "Sunday, Monday, ..., Saturday (en_US);"

#: ../../library/datetime.rst:0
msgid "Sonntag, Montag, ..., Samstag (de_DE)"
msgstr "Sonntag, Montag, ..., Samstag (de_DE)"

#: ../../library/datetime.rst:2433
msgid "``%w``"
msgstr "``%w``"

#: ../../library/datetime.rst:2433
msgid "Weekday as a decimal number, where 0 is Sunday and 6 is Saturday."
msgstr ""
"曜日を10進表記した文字列を表示します。0 が日曜日で、6 が土曜日を表します。"

#: ../../library/datetime.rst:2433
msgid "0, 1, ..., 6"
msgstr "0, 1, ..., 6"

#: ../../library/datetime.rst:2437
msgid "``%d``"
msgstr "``%d``"

#: ../../library/datetime.rst:2437
msgid "Day of the month as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した月中の日にち。"

#: ../../library/datetime.rst:2437
msgid "01, 02, ..., 31"
msgstr "01, 02, ..., 31"

#: ../../library/datetime.rst:2437 ../../library/datetime.rst:2450
#: ../../library/datetime.rst:2453 ../../library/datetime.rst:2459
#: ../../library/datetime.rst:2462 ../../library/datetime.rst:2468
#: ../../library/datetime.rst:2486
msgid "\\(9)"
msgstr "\\(9)"

#: ../../library/datetime.rst:2440
msgid "``%b``"
msgstr "``%b``"

#: ../../library/datetime.rst:2440
msgid "Month as locale's abbreviated name."
msgstr "ロケールの月名を短縮形で表示します。"

#: ../../library/datetime.rst:0
msgid "Jan, Feb, ..., Dec (en_US);"
msgstr "Jan, Feb, ..., Dec (en_US);"

#: ../../library/datetime.rst:0
msgid "Jan, Feb, ..., Dez (de_DE)"
msgstr "Jan, Feb, ..., Dez (de_DE)"

#: ../../library/datetime.rst:2445
msgid "``%B``"
msgstr "``%B``"

#: ../../library/datetime.rst:2445
msgid "Month as locale's full name."
msgstr "ロケールの月名を表示します。"

#: ../../library/datetime.rst:0
msgid "January, February, ..., December (en_US);"
msgstr "January, February, ..., December (en_US);"

#: ../../library/datetime.rst:0
msgid "Januar, Februar, ..., Dezember (de_DE)"
msgstr "Januar, Februar, ..., Dezember (de_DE)"

#: ../../library/datetime.rst:2450
msgid "``%m``"
msgstr "``%m``"

#: ../../library/datetime.rst:2450
msgid "Month as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した月。"

#: ../../library/datetime.rst:2450 ../../library/datetime.rst:2462
msgid "01, 02, ..., 12"
msgstr "01, 02, ..., 12"

#: ../../library/datetime.rst:2453
msgid "``%y``"
msgstr "``%y``"

#: ../../library/datetime.rst:2453
msgid "Year without century as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した世紀無しの年。"

#: ../../library/datetime.rst:2453
msgid "00, 01, ..., 99"
msgstr "00, 01, ..., 99"

#: ../../library/datetime.rst:2456
msgid "``%Y``"
msgstr "``%Y``"

#: ../../library/datetime.rst:2456
msgid "Year with century as a decimal number."
msgstr "西暦 ( 4桁) の 10 進表記を表します。"

#: ../../library/datetime.rst:2456 ../../library/datetime.rst:2526
msgid "0001, 0002, ..., 2013, 2014, ..., 9998, 9999"
msgstr "0001, 0002, ..., 2013, 2014, ..., 9998, 9999"

#: ../../library/datetime.rst:2459
msgid "``%H``"
msgstr "``%H``"

#: ../../library/datetime.rst:2459
msgid "Hour (24-hour clock) as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した時 (24時間表記)。"

#: ../../library/datetime.rst:2459
msgid "00, 01, ..., 23"
msgstr "00, 01, ..., 23"

#: ../../library/datetime.rst:2462
msgid "``%I``"
msgstr "``%I``"

#: ../../library/datetime.rst:2462
msgid "Hour (12-hour clock) as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した時 (12時間表記)。"

#: ../../library/datetime.rst:2465
msgid "``%p``"
msgstr "``%p``"

#: ../../library/datetime.rst:2465
msgid "Locale's equivalent of either AM or PM."
msgstr "ロケールの AM もしくは PM と等価な文字列になります。"

#: ../../library/datetime.rst:0
msgid "AM, PM (en_US);"
msgstr "AM, PM (en_US);"

#: ../../library/datetime.rst:0
msgid "am, pm (de_DE)"
msgstr "am, pm (de_DE)"

#: ../../library/datetime.rst:2465
msgid "\\(1), \\(3)"
msgstr "\\(1), \\(3)"

#: ../../library/datetime.rst:2468
msgid "``%M``"
msgstr "``%M``"

#: ../../library/datetime.rst:2468
msgid "Minute as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した分。"

#: ../../library/datetime.rst:2468 ../../library/datetime.rst:2471
msgid "00, 01, ..., 59"
msgstr "00, 01, ..., 59"

#: ../../library/datetime.rst:2471
msgid "``%S``"
msgstr "``%S``"

#: ../../library/datetime.rst:2471
msgid "Second as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した秒。"

#: ../../library/datetime.rst:2471
msgid "\\(4), \\(9)"
msgstr "\\(4), \\(9)"

#: ../../library/datetime.rst:2474
msgid "``%f``"
msgstr "``%f``"

#: ../../library/datetime.rst:2474
msgid "Microsecond as a decimal number, zero-padded to 6 digits."
msgstr "10進数で表記したマイクロ秒 (6桁に0埋めされます)。"

#: ../../library/datetime.rst:2474
msgid "000000, 000001, ..., 999999"
msgstr "000000, 000001, ..., 999999"

#: ../../library/datetime.rst:2474
msgid "\\(5)"
msgstr "\\(5)"

#: ../../library/datetime.rst:2478 ../../library/datetime.rst:2637
msgid "``%z``"
msgstr "``%z``"

#: ../../library/datetime.rst:2478
msgid ""
"UTC offset in the form ``±HHMM[SS[.ffffff]]`` (empty string if the object is "
"naive)."
msgstr ""
"UTCオフセットを ``±HHMM[SS[.ffffff]]`` の形式で表示します (オブジェクトが"
"naiveであれば空文字列)。"

#: ../../library/datetime.rst:2478
msgid "(empty), +0000, -0400, +1030, +063415, -030712.345216"
msgstr "(空文字列), +0000, -0400, +1030, +063415, -030712.345216"

#: ../../library/datetime.rst:2478 ../../library/datetime.rst:2483
#: ../../library/datetime.rst:2540
msgid "\\(6)"
msgstr "\\(6)"

#: ../../library/datetime.rst:2483 ../../library/datetime.rst:2663
msgid "``%Z``"
msgstr "``%Z``"

#: ../../library/datetime.rst:2483
msgid "Time zone name (empty string if the object is naive)."
msgstr "タイムゾーンの名前を表示します (オブジェクトがnaiveであれば空文字列)。"

#: ../../library/datetime.rst:2483
msgid "(empty), UTC, GMT"
msgstr "(空文字列), UTC, GMT"

#: ../../library/datetime.rst:2486
msgid "``%j``"
msgstr "``%j``"

#: ../../library/datetime.rst:2486
msgid "Day of the year as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した年中の日にち。"

#: ../../library/datetime.rst:2486
msgid "001, 002, ..., 366"
msgstr "001, 002, ..., 366"

#: ../../library/datetime.rst:2489
msgid "``%U``"
msgstr "``%U``"

#: ../../library/datetime.rst:2489
msgid ""
"Week number of the year (Sunday as the first day of the week) as a zero-"
"padded decimal number. All days in a new year preceding the first Sunday are "
"considered to be in week 0."
msgstr ""
"0埋めした10進数で表記した年中の週番号 (週の始まりは日曜日とする)。新年の最初"
"の日曜日に先立つ日は 0週に属するとします。"

#: ../../library/datetime.rst:2489 ../../library/datetime.rst:2497
msgid "00, 01, ..., 53"
msgstr "00, 01, ..., 53"

#: ../../library/datetime.rst:2489 ../../library/datetime.rst:2497
msgid "\\(7), \\(9)"
msgstr "\\(7), \\(9)"

#: ../../library/datetime.rst:2497
msgid "``%W``"
msgstr "``%W``"

#: ../../library/datetime.rst:2497
msgid ""
"Week number of the year (Monday as the first day of the week) as a zero-"
"padded decimal number. All days in a new year preceding the first Monday are "
"considered to be in week 0."
msgstr ""
"0埋めした10進数で表記した年中の週番号 (週の始まりは月曜日とする)。新年の最初"
"の月曜日に先立つ日は 0週に属するとします。"

#: ../../library/datetime.rst:2505
msgid "``%c``"
msgstr "``%c``"

#: ../../library/datetime.rst:2505
msgid "Locale's appropriate date and time representation."
msgstr "ロケールの日時を適切な形式で表します。"

#: ../../library/datetime.rst:0
msgid "Tue Aug 16 21:30:00 1988 (en_US);"
msgstr "Tue Aug 16 21:30:00 1988 (en_US);"

#: ../../library/datetime.rst:0
msgid "Di 16 Aug 21:30:00 1988 (de_DE)"
msgstr "Di 16 Aug 21:30:00 1988 (de_DE)"

#: ../../library/datetime.rst:2510
msgid "``%x``"
msgstr "``%x``"

#: ../../library/datetime.rst:2510
msgid "Locale's appropriate date representation."
msgstr "ロケールの日付を適切な形式で表します。"

#: ../../library/datetime.rst:0
msgid "08/16/88 (None);"
msgstr "08/16/88 (None);"

#: ../../library/datetime.rst:0
msgid "08/16/1988 (en_US);"
msgstr "08/16/1988 (en_US);"

#: ../../library/datetime.rst:0
msgid "16.08.1988 (de_DE)"
msgstr "16.08.1988 (de_DE)"

#: ../../library/datetime.rst:2514
msgid "``%X``"
msgstr "``%X``"

#: ../../library/datetime.rst:2514
msgid "Locale's appropriate time representation."
msgstr "ロケールの時間を適切な形式で表します。"

#: ../../library/datetime.rst:0
msgid "21:30:00 (en_US);"
msgstr "21:30:00 (en_US);"

#: ../../library/datetime.rst:0
msgid "21:30:00 (de_DE)"
msgstr "21:30:00 (de_DE)"

#: ../../library/datetime.rst:2517
msgid "``%%``"
msgstr "``%%``"

#: ../../library/datetime.rst:2517
msgid "A literal ``'%'`` character."
msgstr "文字 ``'%'`` を表します。"

#: ../../library/datetime.rst:2517
msgid "%"
msgstr "%"

#: ../../library/datetime.rst:2520
msgid ""
"Several additional directives not required by the C89 standard are included "
"for convenience. These parameters all correspond to ISO 8601 date values."
msgstr ""
"C89規格により要求されない幾つかの追加のコードが便宜上含まれています。これらの"
"パラメータはすべてISO 8601の日付値に対応しています。"

#: ../../library/datetime.rst:2526
msgid "``%G``"
msgstr "``%G``"

#: ../../library/datetime.rst:2526
msgid ""
"ISO 8601 year with century representing the year that contains the greater "
"part of the ISO week (``%V``)."
msgstr "ISO week(``%V``)の内過半数を含む西暦表記の ISO 8601 year です。"

#: ../../library/datetime.rst:2526
msgid "\\(8)"
msgstr "\\(8)"

#: ../../library/datetime.rst:2531
msgid "``%u``"
msgstr "``%u``"

#: ../../library/datetime.rst:2531
msgid "ISO 8601 weekday as a decimal number where 1 is Monday."
msgstr "1 を月曜日を表す 10進数表記の ISO 8601 weekday です。"

#: ../../library/datetime.rst:2531
msgid "1, 2, ..., 7"
msgstr "1, 2, ..., 7"

#: ../../library/datetime.rst:2534
msgid "``%V``"
msgstr "``%V``"

#: ../../library/datetime.rst:2534
msgid ""
"ISO 8601 week as a decimal number with Monday as the first day of the week. "
"Week 01 is the week containing Jan 4."
msgstr ""
"週で最初の月曜日を始めとする ISO 8601 week です。Week 01 は 1月4日を含みま"
"す。"

#: ../../library/datetime.rst:2534
msgid "01, 02, ..., 53"
msgstr "01, 02, ..., 53"

#: ../../library/datetime.rst:2534
msgid "\\(8), \\(9)"
msgstr "\\(8), \\(9)"

#: ../../library/datetime.rst:2540 ../../library/datetime.rst:2659
msgid "``%:z``"
msgstr "``%:z``"

#: ../../library/datetime.rst:2540
msgid ""
"UTC offset in the form ``±HH:MM[:SS[.ffffff]]`` (empty string if the object "
"is naive)."
msgstr ""
"UTCオフセットを ``±HH:MM[:SS[.ffffff]]`` の形式で表示します (オブジェクトが"
"naiveであれば空文字列)。"

#: ../../library/datetime.rst:2540
msgid "(empty), +00:00, -04:00, +10:30, +06:34:15, -03:07:12.345216"
msgstr "(空文字列), +00:00, -04:00, +10:30, +06:34:15, -03:07:12.345216"

#: ../../library/datetime.rst:2546
msgid ""
"These may not be available on all platforms when used with the :meth:`~."
"datetime.strftime` method. The ISO 8601 year and ISO 8601 week directives "
"are not interchangeable with the year and week number directives above. "
"Calling :meth:`~.datetime.strptime` with incomplete or ambiguous ISO 8601 "
"directives will raise a :exc:`ValueError`."
msgstr ""
"これらが :meth:`~.datetime.strftime` メソッドと一緒に使用された場合、すべての"
"プラットフォームで利用できるわけではありません。 ISO 8601 year 指定子および"
"ISO 8601 week 指定子は、上記のyear および week number 指定子と互換性がありま"
"せん。不完全またはあいまいなISO 8601 指定子で :meth:`~.datetime.strptime` を"
"呼び出すと、 :exc:`ValueError` が送出されます。"

#: ../../library/datetime.rst:2551
msgid ""
"The full set of format codes supported varies across platforms, because "
"Python calls the platform C library's :c:func:`strftime` function, and "
"platform variations are common. To see the full set of format codes "
"supported on your platform, consult the :manpage:`strftime(3)` "
"documentation. There are also differences between platforms in handling of "
"unsupported format specifiers."
msgstr ""
"Python はプラットフォームの C ライブラリの :c:func:`strftime` 関数を呼び出し"
"ていて、プラットフォームごとにその実装が異なるのはよくあることなので、サポー"
"トされる書式コード全体はプラットフォームごとに様々です。\n"
"手元のプラットフォームでサポートされているフォーマット記号全体を見るには、 :"
"manpage:`strftime(3)` のドキュメントを参照してください。\n"
"サポートされていないフォーマット指定子の扱いもプラットフォーム間で差異があり"
"ます。"

#: ../../library/datetime.rst:2557
msgid "``%G``, ``%u`` and ``%V`` were added."
msgstr "``%G``, ``%u`` および ``%V`` が追加されました。"

#: ../../library/datetime.rst:2560
msgid "``%:z`` was added."
msgstr "``%:z`` が追加されました。"

#: ../../library/datetime.rst:2564
msgid "Technical Detail"
msgstr "技術詳細"

#: ../../library/datetime.rst:2566
msgid ""
"Broadly speaking, ``d.strftime(fmt)`` acts like the :mod:`time` module's "
"``time.strftime(fmt, d.timetuple())`` although not all objects support a :"
"meth:`~date.timetuple` method."
msgstr ""
"大雑把にいうと、 ``d.strftime(fmt)`` は :mod:`time` モジュールの ``time."
"strftime(fmt, d.timetuple())`` のように動作します。ただし全てのオブジェクト"
"が :meth:`~date.timetuple` メソッドをサポートしているわけではありません。"

#: ../../library/datetime.rst:2570
msgid ""
"For the :meth:`.datetime.strptime` class method, the default value is "
"``1900-01-01T00:00:00.000``: any components not specified in the format "
"string will be pulled from the default value. [#]_"
msgstr ""
":meth:`.datetime.strptime` クラスメソッドでは、デフォルト値は "
"``1900-01-01T00:00:00.000`` です。書式文字列で指定されなかった部分はデフォル"
"ト値から引っ張ってきます。 [#]_"

#: ../../library/datetime.rst:2574
msgid "Using ``datetime.strptime(date_string, format)`` is equivalent to::"
msgstr "``datetime.strptime(date_string, format)`` は次の式と等価です::"

#: ../../library/datetime.rst:2578
msgid ""
"except when the format includes sub-second components or time zone offset "
"information, which are supported in ``datetime.strptime`` but are discarded "
"by ``time.strptime``."
msgstr ""
"ただし、 ``datetime.strptime`` はサポートしているが ``time.strptime`` には無"
"い、秒未満の単位やタイムゾーンオフセットの情報が format に 含まれているときは"
"除きます。"

#: ../../library/datetime.rst:2582
msgid ""
"For :class:`.time` objects, the format codes for year, month, and day should "
"not be used, as :class:`!time` objects have no such values. If they're used "
"anyway, 1900 is substituted for the year, and 1 for the month and day."
msgstr ""
":class:`.time` オブジェクトには、年、月、日の値がないため、それらを書式コード"
"を使うことができません。\n"
"無理矢理使った場合、年は1900に置き換えられ、月と日は1に置き換えられます。"

#: ../../library/datetime.rst:2586
msgid ""
"For :class:`date` objects, the format codes for hours, minutes, seconds, and "
"microseconds should not be used, as :class:`date` objects have no such "
"values. If they're used anyway, 0 is substituted for them."
msgstr ""
":class:`date` オブジェクトには、時、分、秒、マイクロ秒の値がないため、それら"
"の書式コードを使うことができません。\n"
"無理矢理使った場合、これらの値は0に置き換えられます。"

#: ../../library/datetime.rst:2590
msgid ""
"For the same reason, handling of format strings containing Unicode code "
"points that can't be represented in the charset of the current locale is "
"also platform-dependent. On some platforms such code points are preserved "
"intact in the output, while on others ``strftime`` may raise :exc:"
"`UnicodeError` or return an empty string instead."
msgstr ""
"同じ理由で、現在のロケールの文字集合で表現できない Unicode コードポイントを含"
"む書式文字列の対処もプラットフォーム依存です。\n"
"あるプラットフォームではそういったコードポイントはそのまま出力に出される一"
"方、他のプラットフォームでは ``strftime`` が :exc:`UnicodeError` を送出した"
"り、その代わりに空文字列を返したりするかもしれません。"

#: ../../library/datetime.rst:2599
msgid ""
"Because the format depends on the current locale, care should be taken when "
"making assumptions about the output value. Field orderings will vary (for "
"example, \"month/day/year\" versus \"day/month/year\"), and the output may "
"contain non-ASCII characters."
msgstr ""

#: ../../library/datetime.rst:2605
msgid ""
"The :meth:`~.datetime.strptime` method can parse years in the full [1, 9999] "
"range, but years < 1000 must be zero-filled to 4-digit width."
msgstr ""
":meth:`~.datetime.strptime` メソッドは [1, 9999] の範囲の年数全てを構文解析で"
"きますが、 year < 1000 の範囲の年数は 0 埋めされた 4 桁の数字でなければなりま"
"せん。"

#: ../../library/datetime.rst:2608
msgid ""
"In previous versions, :meth:`~.datetime.strftime` method was restricted to "
"years >= 1900."
msgstr ""
"以前のバージョンでは、 :meth:`~.datetime.strftime` メソッドは years >= 1900 "
"の範囲の年数しか扱えませんでした。"

#: ../../library/datetime.rst:2612
msgid ""
"In version 3.2, :meth:`~.datetime.strftime` method was restricted to years "
">= 1000."
msgstr ""
"バージョン 3.2 では、 :meth:`~.datetime.strftime` メソッドは years >= 1000 の"
"範囲の年数しか扱えませんでした。"

#: ../../library/datetime.rst:2617
msgid ""
"When used with the :meth:`~.datetime.strptime` method, the ``%p`` directive "
"only affects the output hour field if the ``%I`` directive is used to parse "
"the hour."
msgstr ""
":meth:`~.datetime.strptime` メソッドと共に使われた場合、 ``%p`` 指定子は出力"
"の時間フィールドのみに影響し、 ``%I`` 指定子が使われたかのように振る舞いま"
"す。"

#: ../../library/datetime.rst:2621
msgid ""
"Unlike the :mod:`time` module, the :mod:`!datetime` module does not support "
"leap seconds."
msgstr ""
":mod:`time` モジュールと違い、 :mod:`!datetime` モジュールはうるう秒をサポー"
"トしていません。"

#: ../../library/datetime.rst:2625
msgid ""
"When used with the :meth:`~.datetime.strptime` method, the ``%f`` directive "
"accepts from one to six digits and zero pads on the right. ``%f`` is an "
"extension to the set of format characters in the C standard (but implemented "
"separately in datetime objects, and therefore always available)."
msgstr ""
":meth:`~.datetime.strptime` メソッドと共に使われた場合、 ``%f`` 指定子は 1 桁"
"から 6 桁の数字を受け付け、右側から0埋めされます。\n"
"``%f`` は C 標準規格の書式文字セットの拡張です (とは言え、 datetime モジュー"
"ルのオブジェクトそれぞれに実装されているので、どれででも使えます)。"

#: ../../library/datetime.rst:2632
msgid ""
"For a naive object, the ``%z``, ``%:z`` and ``%Z`` format codes are replaced "
"by empty strings."
msgstr ""
"naive オブジェクトでは、書式コード ``%z``、``%:z`` および ``%Z`` は空文字列に"
"置き換えられます。"

#: ../../library/datetime.rst:2635
msgid "For an aware object:"
msgstr "aware オブジェクトでは次のようになります:"

#: ../../library/datetime.rst:2638
msgid ""
":meth:`~.datetime.utcoffset` is transformed into a string of the form "
"``±HHMM[SS[.ffffff]]``, where ``HH`` is a 2-digit string giving the number "
"of UTC offset hours, ``MM`` is a 2-digit string giving the number of UTC "
"offset minutes, ``SS`` is a 2-digit string giving the number of UTC offset "
"seconds and ``ffffff`` is a 6-digit string giving the number of UTC offset "
"microseconds. The ``ffffff`` part is omitted when the offset is a whole "
"number of seconds and both the ``ffffff`` and the ``SS`` part is omitted "
"when the offset is a whole number of minutes. For example, if :meth:`~."
"datetime.utcoffset` returns ``timedelta(hours=-3, minutes=-30)``, ``%z`` is "
"replaced with the string ``'-0330'``."
msgstr ""
":meth:`~.datetime.utcoffset` は ``±HHMM[SS[.ffffff]]`` 形式の文字列に変換され"
"ます。ここで、 ``HH`` は UTC オフセットの時間を表す 2 桁の文字列、 ``MM`` は "
"UTC オフセットの分数を表す 2 桁の文字列、 ``SS`` は UTC オフセットの秒数を表"
"す 2 桁の文字列、 ``ffffff`` は UTC オフセットのマイクロ秒数を表す 6 桁の文字"
"列です。\n"
"オフセットに秒未満の端数が無いときは ``ffffff`` 部分は省略され、オフセットに"
"分未満の端数が無いときは ``ffffff`` 部分も ``SS`` 部分も省略されます。\n"
"例えば、 :meth:`~.datetime.utcoffset` が ``timedelta(hours=-3, "
"minutes=-30)`` を返す場合、 ``%z`` は文字列 ``'-0330'`` に置き換えられます。"

#: ../../library/datetime.rst:2652
msgid ""
"When the ``%z`` directive is provided to the  :meth:`~.datetime.strptime` "
"method, the UTC offsets can have a colon as a separator between hours, "
"minutes and seconds. For example, ``'+01:00:00'`` will be parsed as an "
"offset of one hour. In addition, providing ``'Z'`` is identical to "
"``'+00:00'``."
msgstr ""
"``%z`` 指定子が :meth:`~.datetime.strptime` メソッドに渡されたときは、時分秒"
"のセパレータとしてコロンが UTC オフセットで使えます。\n"
"例えば、 ``'+01:00:00'`` は 1 時間のオフセットだと構文解析されます。\n"
"加えて、 ``'Z'`` を渡すことは ``'+00:00'`` を渡すことと同等です。"

#: ../../library/datetime.rst:2660
msgid ""
"Behaves exactly as ``%z``, but has a colon separator added between hours, "
"minutes and seconds."
msgstr ""

#: ../../library/datetime.rst:2664
msgid ""
"In :meth:`~.datetime.strftime`, ``%Z`` is replaced by an empty string if :"
"meth:`~.datetime.tzname` returns ``None``; otherwise ``%Z`` is replaced by "
"the returned value, which must be a string."
msgstr ""
" :meth:`~.datetime.strftime` では、 :meth:`~.datetime.tzname` が ``None`` を"
"返した場合、 ``%Z`` は空文字列に置き換わります。そうでない場合、 ``%Z`` は返"
"された値に置き換わりますが、 これは文字列でなければなりません。"

#: ../../library/datetime.rst:2668
msgid ":meth:`~.datetime.strptime` only accepts certain values for ``%Z``:"
msgstr ":meth:`~.datetime.strptime` は ``%Z`` に特定の値のみを受け入れます:"

#: ../../library/datetime.rst:2670
msgid "any value in ``time.tzname`` for your machine's locale"
msgstr "使用しているマシンのロケールによる ``time.tzname`` の任意の値"

#: ../../library/datetime.rst:2671
msgid "the hard-coded values ``UTC`` and ``GMT``"
msgstr "ハードコードされた値 ``UTC`` または ``GMT``"

#: ../../library/datetime.rst:2673
msgid ""
"So someone living in Japan may have ``JST``, ``UTC``, and ``GMT`` as valid "
"values, but probably not ``EST``. It will raise ``ValueError`` for invalid "
"values."
msgstr ""
"つまり、日本に住んでいる場合は ``JST``, ``UTC`` と ``GMT`` が有効な値であ"
"り、 ``EST`` はおそらく無効な値となります。無効な値の場合は ``ValueError`` を"
"送出します。"

#: ../../library/datetime.rst:2677
msgid ""
"When the ``%z`` directive is provided to the :meth:`~.datetime.strptime` "
"method, an aware :class:`.datetime` object will be produced. The ``tzinfo`` "
"of the result will be set to a :class:`timezone` instance."
msgstr ""
"``%z`` 指定子が :meth:`~.datetime.strptime` メソッドに与えられた場合、 aware "
"な :class:`.datetime` オブジェクトが作成されます。返り値の ``tzinfo`` は :"
"class:`timezone` インスタンスになっています。"

#: ../../library/datetime.rst:2683
msgid ""
"When used with the :meth:`~.datetime.strptime` method, ``%U`` and ``%W`` are "
"only used in calculations when the day of the week and the calendar year "
"(``%Y``) are specified."
msgstr ""
":meth:`~.datetime.strptime` メソッドと共に使われた場合、 ``%U`` と ``%W`` 指"
"定子は、曜日と年(``%Y``)が指定された場合の計算でのみ使われます。"

#: ../../library/datetime.rst:2688
msgid ""
"Similar to ``%U`` and ``%W``, ``%V`` is only used in calculations when the "
"day of the week and the ISO year (``%G``) are specified in a :meth:`~."
"datetime.strptime` format string. Also note that ``%G`` and ``%Y`` are not "
"interchangeable."
msgstr ""
"``%U`` および ``%W`` と同様に、 ``%V`` は曜日と ISO 年 (``%G``) が :meth:`~."
"datetime.strptime` の書式文字列の中で指定された場合に計算でのみ使われます。\n"
"``%G`` と ``%Y`` は互いに完全な互換性を持たないことにも注意してください。"

#: ../../library/datetime.rst:2694
msgid ""
"When used with the :meth:`~.datetime.strptime` method, the leading zero is "
"optional for  formats ``%d``, ``%m``, ``%H``, ``%I``, ``%M``, ``%S``, "
"``%j``, ``%U``, ``%W``, and ``%V``. Format ``%y`` does require a leading "
"zero."
msgstr ""
":meth:`~.datetime.strptime` メソッドと共に使われるとき、書式 ``%d``, ``%m``, "
"``%H``, ``%I``, ``%M``, ``%S``, ``%j``, ``%U``, ``%W``, ``%V`` では先行ゼロは"
"任意です。\n"
"書式 ``%y`` では先行ゼロは必須です。"

#: ../../library/datetime.rst:2699
msgid ""
"When parsing a month and day using :meth:`~.datetime.strptime`, always "
"include a year in the format.  If the value you need to parse lacks a year, "
"append an explicit dummy leap year.  Otherwise your code will raise an "
"exception when it encounters leap day because the default year used by the "
"parser is not a leap year.  Users run into this bug every four years..."
msgstr ""

#: ../../library/datetime.rst:2705
msgid ""
">>> month_day = \"02/29\"\n"
">>> datetime.strptime(f\"{month_day};1984\", \"%m/%d;%Y\")  # No leap year "
"bug.\n"
"datetime.datetime(1984, 2, 29, 0, 0)"
msgstr ""

#: ../../library/datetime.rst:2711
msgid ""
":meth:`~.datetime.strptime` calls using a format string containing a day of "
"month without a year now emit a :exc:`DeprecationWarning`. In 3.15 or later "
"we may change this into an error or change the default year to a leap year. "
"See :gh:`70647`."
msgstr ""

#: ../../library/datetime.rst:2718
msgid "Footnotes"
msgstr "脚注"

#: ../../library/datetime.rst:2719
msgid "If, that is, we ignore the effects of Relativity"
msgstr "もし相対性理論の効果を無視するならば、ですが"

#: ../../library/datetime.rst:2721
msgid ""
"This matches the definition of the \"proleptic Gregorian\" calendar in "
"Dershowitz and Reingold's book *Calendrical Calculations*, where it's the "
"base calendar for all computations. See the book for algorithms for "
"converting between proleptic Gregorian ordinals and many other calendar "
"systems."
msgstr ""
"この暦法は、全ての計算における基本カレンダーである、 Dershowitz と Reingold "
"の書籍 *Calendrical Calculations* における先発グレゴリオ暦 (\"proleptic "
"Gregorian\") の定義に一致します。\n"
"先発グレゴリオ暦の序数とその他多くの暦法どうしの変換アルゴリズムについては、"
"この書籍を参照してください。"

#: ../../library/datetime.rst:2727
msgid ""
"See R. H. van Gent's `guide to the mathematics of the ISO 8601 calendar "
"<https://web.archive.org/web/20220531051136/https://webspace.science.uu.nl/"
"~gent0113/calendar/isocalendar.htm>`_ for a good explanation."
msgstr ""
"優れた説明は R. H. van Gent の `guide to the mathematics of the ISO 8601 "
"calendar <https://web.archive.org/web/20220531051136/https://webspace."
"science.uu.nl/~gent0113/calendar/isocalendar.htm>`_ を参照してください。"

#: ../../library/datetime.rst:2731
msgid ""
"Passing ``datetime.strptime('Feb 29', '%b %d')`` will fail since 1900 is not "
"a leap year."
msgstr ""
"1900は閏年ではないので ``datetime.strptime('Feb 29', '%b %d')`` を渡すと失敗"
"します。"

#: ../../library/datetime.rst:2372
msgid "% (percent)"
msgstr "% (パーセント)"

#: ../../library/datetime.rst:2372
msgid "datetime format"
msgstr ""
