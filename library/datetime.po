# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# hitsumabushi.org, 2019
# Osamu NAKAMURA, 2019
# 永田 大和 <gey3933@gmail.com>, 2019
# tomo, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 03:31+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/datetime.rst:2
msgid ":mod:`datetime` --- Basic date and time types"
msgstr ":mod:`datetime` --- 基本的な日付型および時間型"

#: ../../library/datetime.rst:11
msgid "**Source code:** :source:`Lib/datetime.py`"
msgstr "**ソースコード:** :source:`Lib/datetime.py`"

#: ../../library/datetime.rst:17
msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and times "
"in both simple and complex ways.  While date and time arithmetic is "
"supported, the focus of the implementation is on efficient attribute "
"extraction for output formatting and manipulation. For related "
"functionality, see also the :mod:`time` and :mod:`calendar` modules."
msgstr ""
":mod:`datetime` モジュールでは、日付や時間データを簡単な方法と複雑な方法の両"
"方で操作するためのクラスを提供しています。日付や時刻を対象にした四則演算がサ"
"ポートされている一方で、このモジュールの実装では出力の書式化や操作を目的とし"
"た属性の効率的な取り出しに焦点を絞っています。機能については、 :mod:`time` お"
"よび :mod:`calendar` も参照してください。"

#: ../../library/datetime.rst:23
msgid "There are two kinds of date and time objects: \"naive\" and \"aware\"."
msgstr "\"naive\" と \"aware\" の2種類の日付と時刻オブジェクトがあります。"

#: ../../library/datetime.rst:25
msgid ""
"An aware object has sufficient knowledge of applicable algorithmic and "
"political time adjustments, such as time zone and daylight saving time "
"information, to locate itself relative to other aware objects.  An aware "
"object is used to represent a specific moment in time that is not open to "
"interpretation [#]_."
msgstr ""
"aware オブジェクトは他の aware オブジェクトとの相対関係を把握出来るように、タ"
"イムゾーンや夏時間の情報のような、アルゴリズム的で政治的な適用可能な時間調節"
"に関する知識を持っています。aware オブジェクトは解釈の余地のない特定の実時刻"
"を表現するのに利用されます [#]_。"

#: ../../library/datetime.rst:31
msgid ""
"A naive object does not contain enough information to unambiguously locate "
"itself relative to other date/time objects.  Whether a naive object "
"represents Coordinated Universal Time (UTC), local time, or time in some "
"other timezone is purely up to the program, just like it is up to the "
"program whether a particular number represents metres, miles, or mass.  "
"Naive objects are easy to understand and to work with, at the cost of "
"ignoring some aspects of reality."
msgstr ""
"naive オブジェクトには他の日付時刻オブジェクトとの相対関係を把握するのに足る"
"情報が含まれません。あるプログラム内の数字がメートルを表わしているのか、マイ"
"ルなのか、それとも質量なのかがプログラムによって異なるように、naive オブジェ"
"クトが協定世界時 (UTC) なのか、現地時間なのか、それとも他のタイムゾーンなのか"
"はそのプログラムに依存します。Naive オブジェクトはいくつかの現実的な側面を無"
"視してしまうというコストを無視すれば、簡単に理解でき、うまく利用することがで"
"きます。"

#: ../../library/datetime.rst:38
msgid ""
"For applications requiring aware objects, :class:`.datetime` and :class:`."
"time` objects have an optional time zone information attribute, :attr:`!"
"tzinfo`, that can be set to an instance of a subclass of the abstract :class:"
"`tzinfo` class. These :class:`tzinfo` objects capture information about the "
"offset from UTC time, the time zone name, and whether Daylight Saving Time "
"is in effect.  Note that only one concrete :class:`tzinfo` class, the :class:"
"`timezone` class, is supplied by the :mod:`datetime` module.  The :class:"
"`timezone` class can represent simple timezones with fixed offset from UTC, "
"such as UTC itself or North American EST and EDT timezones.  Supporting "
"timezones at deeper levels of detail is up to the application.  The rules "
"for time adjustment across the world are more political than rational, "
"change frequently, and there is no standard suitable for every application "
"aside from UTC."
msgstr ""
"aware オブジェクトを必要とするアプリケーションのために、 :class:`.datetime` "
"と :class:`.time` オブジェクトは追加のタイムゾーン情報の属性 :attr:`tzinfo` "
"を持ちます。\n"
":attr:`tzinfo` には抽象クラス :class:`tzinfo` のサブクラスのインスタンスを設"
"定することができます。\n"
"これらの :class:`tzinfo` オブジェクトは UTC 時間からのオフセットやタイムゾー"
"ンの名前、夏時間が実施されるかの情報を保持しています。\n"
"ただ一つの具象 :class:`tzinfo` クラスである :class:`timezone` クラスが :mod:"
"`datetime` モジュールで提供されています。\n"
":class:`timezone` クラスは単純な UTC からの固定オフセットだけを表わすUTC 自身"
"や北アメリカの EST や EDT タイムゾーンのようなものも表現できます。\n"
"より深く詳細までタイムゾーンをサポートするかはアプリケーションに依存しま"
"す。\n"
"世界中の時刻の調整を決めるルールは合理的というよりかは政治的なもので、頻繁に"
"変わり、UTC を除くと都合のよい基準というものはありません。"

#: ../../library/datetime.rst:51
msgid "The :mod:`datetime` module exports the following constants:"
msgstr ":mod:`datetime` モジュールでは以下の定数を公開しています:"

#: ../../library/datetime.rst:55
msgid ""
"The smallest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MINYEAR` is ``1``."
msgstr ""
":class:`date` や :class:`.datetime` オブジェクトで許されている、年を表現する"
"最小の数字です。 :const:`MINYEAR` は ``1`` です。"

#: ../../library/datetime.rst:61
msgid ""
"The largest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MAXYEAR` is ``9999``."
msgstr ""
":class:`date` や :class:`.datetime` オブジェクトで許されている、年を表現する"
"最大の数字です。 :const:`MAXYEAR` は ``9999`` です。"

#: ../../library/datetime.rst:68
msgid "Module :mod:`calendar`"
msgstr ":mod:`calendar` モジュール"

#: ../../library/datetime.rst:68
msgid "General calendar related functions."
msgstr "汎用のカレンダー関連関数。"

#: ../../library/datetime.rst:70
msgid "Module :mod:`time`"
msgstr ":mod:`time` モジュール"

#: ../../library/datetime.rst:71
msgid "Time access and conversions."
msgstr "時刻へのアクセスと変換。"

#: ../../library/datetime.rst:75
msgid "Available Types"
msgstr "利用可能なデータ型"

#: ../../library/datetime.rst:80
msgid ""
"An idealized naive date, assuming the current Gregorian calendar always was, "
"and always will be, in effect. Attributes: :attr:`year`, :attr:`month`, and :"
"attr:`day`."
msgstr ""
"理想的な naive な日付で、これまでもこれからも現在のグレゴリオ暦 (Gregorian "
"calender) が有効であることを仮定しています。\n"
"属性は :attr:`year`, :attr:`month`,および :attr:`day` です。"

#: ../../library/datetime.rst:88
msgid ""
"An idealized time, independent of any particular day, assuming that every "
"day has exactly 24\\*60\\*60 seconds (there is no notion of \"leap seconds\" "
"here). Attributes: :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, and :attr:`.tzinfo`."
msgstr ""
"理想的な時刻で、特定の日から独立しており、毎日が厳密に 24\\*60\\*60 秒である"
"と仮定しています (\"うるう秒: leap seconds\" の概念はありません)。\n"
"属性は :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:`microsecond`, お"
"よび :attr:`tzinfo` です。"

#: ../../library/datetime.rst:97
msgid ""
"A combination of a date and a time. Attributes: :attr:`year`, :attr:"
"`month`, :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, and :attr:`.tzinfo`."
msgstr ""
"日付と時刻を組み合わせたものです。\n"
"属性は :attr:`year`, :attr:`month`, :attr:`day`, :attr:`hour`, :attr:"
"`minute`, :attr:`second`, :attr:`microsecond`, および :attr:`tzinfo` です。"

#: ../../library/datetime.rst:105
msgid ""
"A duration expressing the difference between two :class:`date`, :class:`."
"time`, or :class:`.datetime` instances to microsecond resolution."
msgstr ""
":class:`date`, :class:`.time`, あるいは :class:`.datetime` クラスの二つのイン"
"スタンス間の時間差をマイクロ秒精度で表す経過時間値です。"

#: ../../library/datetime.rst:112
msgid ""
"An abstract base class for time zone information objects.  These are used by "
"the :class:`.datetime` and :class:`.time` classes to provide a customizable "
"notion of time adjustment (for example, to account for time zone and/or "
"daylight saving time)."
msgstr ""
"タイムゾーン情報オブジェクトの抽象基底クラスです。 :class:`.datetime` およ"
"び :class:`.time` クラスで用いられ、カスタマイズ可能な時刻修正の概念 (たとえ"
"ばタイムゾーンや夏時間の計算）を提供します。"

#: ../../library/datetime.rst:120
msgid ""
"A class that implements the :class:`tzinfo` abstract base class as a fixed "
"offset from the UTC."
msgstr ""
":class:`tzinfo` 抽象基底クラスを UTC からの固定オフセットとして実装するクラス"
"です。"

#: ../../library/datetime.rst:126
msgid "Objects of these types are immutable."
msgstr "これらの型のオブジェクトは変更不可能 (immutable) です。"

#: ../../library/datetime.rst:128
msgid "Objects of the :class:`date` type are always naive."
msgstr ":class:`date` 型のオブジェクトは常に naive です。"

#: ../../library/datetime.rst:130
msgid ""
"An object of type :class:`.time` or :class:`.datetime` may be naive or "
"aware. A :class:`.datetime` object *d* is aware if ``d.tzinfo`` is not "
"``None`` and ``d.tzinfo.utcoffset(d)`` does not return ``None``.  If ``d."
"tzinfo`` is ``None``, or if ``d.tzinfo`` is not ``None`` but ``d.tzinfo."
"utcoffset(d)`` returns ``None``, *d* is naive.  A :class:`.time` object *t* "
"is aware if ``t.tzinfo`` is not ``None`` and ``t.tzinfo.utcoffset(None)`` "
"does not return ``None``.  Otherwise, *t* is naive."
msgstr ""
":class:`.time` や :class:`.datetime` 型のオブジェクトは naive か aware のどち"
"らかになります。 :class:`.datetime` オブジェクト *d* は ``d.tzinfo`` が "
"``None`` でなく ``d.tzinfo.utcoffset(d)`` が ``None`` を返さない場合、aware "
"です。``d.tzinfo`` が ``None`` であるか ``d.tzinfo`` が ``None`` でないが "
"``d.tzinfo.utcoffset(d)`` が ``None`` を返す場合、 *d* は naive です。 :"
"class:`.time` のオブジェクト *t* は ``t.tzinfo`` が ``None`` でなく ``t."
"tzinfo.utcoffset(None)`` が ``None`` を返さない場合に aware になって、それ以"
"外の場合には *t* は naive になります。"

#: ../../library/datetime.rst:138
msgid ""
"The distinction between naive and aware doesn't apply to :class:`timedelta` "
"objects."
msgstr ""
"naive なオブジェクトと aware なオブジェクトの区別は :class:`timedelta` オブ"
"ジェクトにはあてはまりません。"

#: ../../library/datetime.rst:141
msgid "Subclass relationships::"
msgstr "サブクラスの関係は以下のようになります::"

#: ../../library/datetime.rst:155
msgid ":class:`timedelta` Objects"
msgstr ":class:`timedelta` オブジェクト"

#: ../../library/datetime.rst:157
msgid ""
"A :class:`timedelta` object represents a duration, the difference between "
"two dates or times."
msgstr ""
":class:`timedelta` オブジェクトは経過時間、すなわち二つの日付や時刻間の差を表"
"します。"

#: ../../library/datetime.rst:162
msgid ""
"All arguments are optional and default to ``0``.  Arguments may be integers "
"or floats, and may be positive or negative."
msgstr ""
"全ての引数がオプションで、デフォルト値は ``0`` です。引数は整数、浮動小数点数"
"にすることができ、正でも負でもかまいません。"

#: ../../library/datetime.rst:165
msgid ""
"Only *days*, *seconds* and *microseconds* are stored internally.  Arguments "
"are converted to those units:"
msgstr ""
"*days*, *seconds*, *microseconds* だけが内部的に保持されます. 引数は以下のよ"
"うにして変換されます:"

#: ../../library/datetime.rst:168
msgid "A millisecond is converted to 1000 microseconds."
msgstr "1 ミリ秒は 1000 マイクロ秒に変換されます。"

#: ../../library/datetime.rst:169
msgid "A minute is converted to 60 seconds."
msgstr "1 分は 60 秒に変換されます。"

#: ../../library/datetime.rst:170
msgid "An hour is converted to 3600 seconds."
msgstr "1 時間は 3600 秒に変換されます。"

#: ../../library/datetime.rst:171
msgid "A week is converted to 7 days."
msgstr "1 週間は 7 日に変換されます。"

#: ../../library/datetime.rst:173
msgid ""
"and days, seconds and microseconds are then normalized so that the "
"representation is unique, with"
msgstr ""
"さらに、値が一意に表されるように days, seconds, microseconds が以下のように正"
"規化されます"

#: ../../library/datetime.rst:176
msgid "``0 <= microseconds < 1000000``"
msgstr "``0 <= microseconds < 1000000``"

#: ../../library/datetime.rst:177
msgid "``0 <= seconds < 3600*24`` (the number of seconds in one day)"
msgstr "``0 <= seconds < 3600*24`` (一日中の秒数)"

#: ../../library/datetime.rst:178
msgid "``-999999999 <= days <= 999999999``"
msgstr "``-999999999 <= days <= 999999999``"

#: ../../library/datetime.rst:180
msgid ""
"If any argument is a float and there are fractional microseconds, the "
"fractional microseconds left over from all arguments are combined and their "
"sum is rounded to the nearest microsecond using round-half-to-even "
"tiebreaker.  If no argument is a float, the conversion and normalization "
"processes are exact (no information is lost)."
msgstr ""
"引数のいずれかが浮動小数点であり、小数のマイクロ秒が存在する場合、小数のマイ"
"クロ秒は全ての引数から一度取り置かれ、それらの和は最近接偶数のマイクロ秒に丸"
"められます。浮動小数点の引数がない場合、値の変換と正規化の過程は厳密な (失わ"
"れる情報がない) ものとなります。"

#: ../../library/datetime.rst:187
msgid ""
"If the normalized value of days lies outside the indicated range, :exc:"
"`OverflowError` is raised."
msgstr ""
"日の値を正規化した結果、指定された範囲の外側になった場合には、 :exc:"
"`OverflowError` が送出されます。"

#: ../../library/datetime.rst:190
msgid ""
"Note that normalization of negative values may be surprising at first. For "
"example,"
msgstr "負の値を正規化すると、一見混乱するような値になります。例えば、"

#: ../../library/datetime.rst:199
msgid "Class attributes are:"
msgstr "クラス属性を以下に示します:"

#: ../../library/datetime.rst:203
msgid "The most negative :class:`timedelta` object, ``timedelta(-999999999)``."
msgstr ""
"最小の値を表す :class:`timedelta` オブジェクトで、 ``timedelta(-999999999)`` "
"です。"

#: ../../library/datetime.rst:208
msgid ""
"The most positive :class:`timedelta` object, ``timedelta(days=999999999, "
"hours=23, minutes=59, seconds=59, microseconds=999999)``."
msgstr ""
"最大の値を表す :class:`timedelta` オブジェクトで、 "
"``timedelta(days=999999999, hours=23, minutes=59, seconds=59, "
"microseconds=999999)`` です。"

#: ../../library/datetime.rst:214
msgid ""
"The smallest possible difference between non-equal :class:`timedelta` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""
":class:`timedelta` オブジェクトが等しくならない最小の時間差で、 "
"``timedelta(microseconds=1)`` です。"

#: ../../library/datetime.rst:217
msgid ""
"Note that, because of normalization, ``timedelta.max`` > ``-timedelta.min``. "
"``-timedelta.max`` is not representable as a :class:`timedelta` object."
msgstr ""
"正規化のために、 ``timedelta.max`` > ``-timedelta.min`` となるので注意してく"
"ださい。 ``-timedelta.max`` は :class:`timedelta` オブジェクトとして表現する"
"ことができません。"

#: ../../library/datetime.rst:220 ../../library/datetime.rst:480
#: ../../library/datetime.rst:890 ../../library/datetime.rst:1459
msgid "Instance attributes (read-only):"
msgstr "インスタンスの属性 (読み出しのみ):"

#: ../../library/datetime.rst:223
msgid "Attribute"
msgstr "属性"

#: ../../library/datetime.rst:223
msgid "Value"
msgstr "値"

#: ../../library/datetime.rst:225
msgid "``days``"
msgstr "``days``"

#: ../../library/datetime.rst:225
msgid "Between -999999999 and 999999999 inclusive"
msgstr "両端値を含む -999999999 から 999999999 の間"

#: ../../library/datetime.rst:227
msgid "``seconds``"
msgstr "``seconds``"

#: ../../library/datetime.rst:227
msgid "Between 0 and 86399 inclusive"
msgstr "両端値を含む 0 から 86399 の間"

#: ../../library/datetime.rst:229
msgid "``microseconds``"
msgstr "``microseconds``"

#: ../../library/datetime.rst:229
msgid "Between 0 and 999999 inclusive"
msgstr "両端値を含む 0 から 999999 の間"

#: ../../library/datetime.rst:232 ../../library/datetime.rst:497
#: ../../library/datetime.rst:943 ../../library/datetime.rst:1498
msgid "Supported operations:"
msgstr "サポートされている演算を以下に示します:"

#: ../../library/datetime.rst:237 ../../library/datetime.rst:500
#: ../../library/datetime.rst:946
msgid "Operation"
msgstr "演算"

#: ../../library/datetime.rst:237 ../../library/datetime.rst:500
#: ../../library/datetime.rst:946
msgid "Result"
msgstr "結果"

#: ../../library/datetime.rst:239
msgid "``t1 = t2 + t3``"
msgstr "``t1 = t2 + t3``"

#: ../../library/datetime.rst:239
msgid ""
"Sum of *t2* and *t3*. Afterwards *t1*-*t2* == *t3* and *t1*-*t3* == *t2* are "
"true. (1)"
msgstr ""
"*t2* と *t3* の和。演算後、*t1*-*t2* == *t3* および *t1*-*t3* == *t2* は真に"
"なります。(1)"

#: ../../library/datetime.rst:242
msgid "``t1 = t2 - t3``"
msgstr "``t1 = t2 - t3``"

#: ../../library/datetime.rst:242
msgid ""
"Difference of *t2* and *t3*. Afterwards *t1* == *t2* - *t3* and *t2* == *t1* "
"+ *t3* are true. (1)(6)"
msgstr ""
"*t2* と *t3* の差分です。演算後、 *t1* == *t2* - *t3* および *t2* == *t1* + "
"*t3* は真になります。 (1)(6)"

#: ../../library/datetime.rst:246
msgid "``t1 = t2 * i or t1 = i * t2``"
msgstr "``t1 = t2 * i または t1 = i * t2``"

#: ../../library/datetime.rst:246
msgid ""
"Delta multiplied by an integer. Afterwards *t1* // i == *t2* is true, "
"provided ``i != 0``."
msgstr ""
"時間差と整数の積。演算後、*t1* // i == *t2* は ``i != 0`` であれば真となりま"
"す。"

#: ../../library/datetime.rst:250
msgid "In general, *t1* \\* i == *t1* \\* (i-1) + *t1* is true. (1)"
msgstr "一般的に、*t1* \\* i == *t1* \\* (i-1) + *t1* は真となります。(1)"

#: ../../library/datetime.rst:253
msgid "``t1 = t2 * f or t1 = f * t2``"
msgstr "``t1 = t2 * f`` または ``t1 = f * t2``"

#: ../../library/datetime.rst:253
msgid ""
"Delta multiplied by a float. The result is rounded to the nearest multiple "
"of timedelta.resolution using round-half-to-even."
msgstr ""
"時間差と浮動小数点の積。結果は最近接偶数への丸めを利用して最も近い timedelta."
"resolution の倍数に丸められます。"

#: ../../library/datetime.rst:257
msgid "``f = t2 / t3``"
msgstr "``f = t2 / t3``"

#: ../../library/datetime.rst:257
msgid ""
"Division (3) of overall duration *t2* by interval unit *t3*. Returns a :"
"class:`float` object."
msgstr ""
"*t2* を *3* で除算 (3) したもの。:class:`float` オブジェクトを返します。"

#: ../../library/datetime.rst:261
msgid "``t1 = t2 / f or t1 = t2 / i``"
msgstr "``t1 = t2 / f`` または ``t1 = t2 / i``"

#: ../../library/datetime.rst:261
msgid ""
"Delta divided by a float or an int. The result is rounded to the nearest "
"multiple of timedelta.resolution using round-half-to-even."
msgstr ""
"時間差を浮動小数点や整数で除したもの。結果は最近接偶数への丸めを利用して最も"
"近い timedelta.resolution の倍数に丸められます。"

#: ../../library/datetime.rst:265
msgid "``t1 = t2 // i`` or ``t1 = t2 // t3``"
msgstr "``t1 = t2 // i`` または ``t1 = t2 // t3``"

#: ../../library/datetime.rst:265
msgid ""
"The floor is computed and the remainder (if any) is thrown away.  In the "
"second case, an integer is returned. (3)"
msgstr ""
"floor が計算され、余りは (もしあれば) 捨てられます。後者の場合、整数が返され"
"ます。(3)"

#: ../../library/datetime.rst:269
msgid "``t1 = t2 % t3``"
msgstr "``t1 = t2 % t3``"

#: ../../library/datetime.rst:269
msgid "The remainder is computed as a :class:`timedelta` object. (3)"
msgstr "剰余が :class:`timedelta` オブジェクトとして計算されます。(3)"

#: ../../library/datetime.rst:272
msgid "``q, r = divmod(t1, t2)``"
msgstr "``q, r = divmod(t1, t2)``"

#: ../../library/datetime.rst:272
msgid ""
"Computes the quotient and the remainder: ``q = t1 // t2`` (3) and ``r = t1 % "
"t2``. q is an integer and r is a :class:`timedelta` object."
msgstr ""
"商と剰余が計算されます: ``q = t1 // t2`` (3) と ``r = t1 % t2`` 。q は整数で "
"r は :class:`timedelta` オブジェクトです。"

#: ../../library/datetime.rst:277
msgid "``+t1``"
msgstr "``+t1``"

#: ../../library/datetime.rst:277
msgid "Returns a :class:`timedelta` object with the same value. (2)"
msgstr "同じ値を持つ :class:`timedelta` オブジェクトを返します。(2)"

#: ../../library/datetime.rst:280
msgid "``-t1``"
msgstr "``-t1``"

#: ../../library/datetime.rst:280
msgid ""
"equivalent to :class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, -*t1."
"microseconds*), and to *t1*\\* -1. (1)(4)"
msgstr ""
":class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, -*t1.microseconds*)、および "
"*t1*\\* -1 と同じです。 (1)(4)"

#: ../../library/datetime.rst:285
msgid "``abs(t)``"
msgstr "``abs(t)``"

#: ../../library/datetime.rst:285
msgid ""
"equivalent to +\\ *t* when ``t.days >= 0``, and to -*t* when ``t.days < 0``. "
"(2)"
msgstr ""
"``t.days >= 0`` のときには +\\ *t*, ``t.days < 0`` のときには -*t* となりま"
"す。(2)"

#: ../../library/datetime.rst:288
msgid "``str(t)``"
msgstr "``str(t)``"

#: ../../library/datetime.rst:288
msgid ""
"Returns a string in the form ``[D day[s], ][H]H:MM:SS[.UUUUUU]``, where D is "
"negative for negative ``t``. (5)"
msgstr ""
"``[D day[s], ][H]H:MM:SS[.UUUUUU]`` という形式の文字列を返します。``t`` が負"
"の値の場合は ``D`` は負の値となります。(5)"

#: ../../library/datetime.rst:292
msgid "``repr(t)``"
msgstr "``repr(t)``"

#: ../../library/datetime.rst:292
msgid ""
"Returns a string representation of the :class:`timedelta` object as a "
"constructor call with canonical attribute values."
msgstr ""
":class:`timedelta` オブジェクトの文字列表現を返します。その文字列は、正規の属"
"性値を持つコンストラクタ呼び出しのコードになっています。"

#: ../../library/datetime.rst:298 ../../library/datetime.rst:514
#: ../../library/datetime.rst:2192
msgid "Notes:"
msgstr "注釈:"

#: ../../library/datetime.rst:301
msgid "This is exact, but may overflow."
msgstr "この演算は正確ですが、オーバフローするかもしれません。"

#: ../../library/datetime.rst:304
msgid "This is exact, and cannot overflow."
msgstr "この演算は正確であり、オーバフローしないはずです。"

#: ../../library/datetime.rst:307
msgid "Division by 0 raises :exc:`ZeroDivisionError`."
msgstr "0 による除算は :exc:`ZeroDivisionError` を送出します。"

#: ../../library/datetime.rst:310
msgid "-*timedelta.max* is not representable as a :class:`timedelta` object."
msgstr ""
"-*timedelta.max* は :class:`timedelta` オブジェクトで表現することができませ"
"ん。"

#: ../../library/datetime.rst:313
msgid ""
"String representations of :class:`timedelta` objects are normalized "
"similarly to their internal representation.  This leads to somewhat unusual "
"results for negative timedeltas.  For example:"
msgstr ""
":class:`timedelta` オブジェクトの文字列表現は内部表現に類似した形に正規化され"
"ます。そのため負の timedelta は少し変な結果になります。例えば:"

#: ../../library/datetime.rst:323
msgid ""
"The expression ``t2 - t3`` will always be equal to the expression ``t2 + (-"
"t3)`` except when t3 is equal to ``timedelta.max``; in that case the former "
"will produce a result while the latter will overflow."
msgstr ""
"t3 が ``timedelta.max`` のときを除けば、式 ``t2 - t3`` は常に、式 ``t2 + (-"
"t3)`` と同等です。t3 が ``timedelta.max`` の場合、前者の式は結果の値が出ます"
"が、後者はオーバーフローを起こします。"

#: ../../library/datetime.rst:327
msgid ""
"In addition to the operations listed above :class:`timedelta` objects "
"support certain additions and subtractions with :class:`date` and :class:`."
"datetime` objects (see below)."
msgstr ""
"上に列挙した操作に加えて、 :class:`timedelta` オブジェクトは :class:`date` お"
"よび :class:`.datetime` オブジェクトとの間で加減算をサポートしています (下を"
"参照してください)。"

#: ../../library/datetime.rst:331
msgid ""
"Floor division and true division of a :class:`timedelta` object by another :"
"class:`timedelta` object are now supported, as are remainder operations and "
"the :func:`divmod` function.  True division and multiplication of a :class:"
"`timedelta` object by a :class:`float` object are now supported."
msgstr ""
":class:`timedelta` オブジェクトの別の :class:`timedelta` オブジェクトによる、"
"切り捨ての割り算と真の値の割り算、および剰余演算子と :func:`divmod` 関数がサ"
"ポートされるようになりました。 :class:`timedelta` オブジェクトと :class:"
"`float` オブジェクトの真の値の割り算と掛け算がサポートされるようになりまし"
"た。"

#: ../../library/datetime.rst:338
msgid ""
"Comparisons of :class:`timedelta` objects are supported with the :class:"
"`timedelta` object representing the smaller duration considered to be the "
"smaller timedelta. In order to stop mixed-type comparisons from falling back "
"to the default comparison by object address, when a :class:`timedelta` "
"object is compared to an object of a different type, :exc:`TypeError` is "
"raised unless the comparison is ``==`` or ``!=``.  The latter cases return :"
"const:`False` or :const:`True`, respectively."
msgstr ""
":class:`timedelta` オブジェクト間の比較はサポートされており、より小さい経過時"
"間を表す :class:`timedelta` オブジェクトがより小さい timedelta と見なされま"
"す。型混合の比較がデフォルトのオブジェクトアドレス比較となってしまうのを抑止"
"するために、 :class:`timedelta` オブジェクトと異なる型のオブジェクトが比較さ"
"れると、比較演算子が ``==`` または ``!=`` でないかぎり :exc:`TypeError` が送"
"出されます。後者の場合、それぞれ :const:`False` または :const:`True` を返しま"
"す。"

#: ../../library/datetime.rst:346
msgid ""
":class:`timedelta` objects are :term:`hashable` (usable as dictionary keys), "
"support efficient pickling, and in Boolean contexts, a :class:`timedelta` "
"object is considered to be true if and only if it isn't equal to "
"``timedelta(0)``."
msgstr ""
":class:`timedelta` オブジェクトは :term:`hashable`  (ハッシュ可能、つまり、辞"
"書のキーとして利用可能) であり、効率的な pickle 化をサポートします。また、"
"ブール演算コンテキストでは、 :class:`timedelta` オブジェクトは "
"``timedelta(0)`` に等しくない場合かつそのときに限り真となります。"

#: ../../library/datetime.rst:350 ../../library/datetime.rst:544
#: ../../library/datetime.rst:1020 ../../library/datetime.rst:1548
msgid "Instance methods:"
msgstr "インスタンスメソッド:"

#: ../../library/datetime.rst:354
msgid ""
"Return the total number of seconds contained in the duration. Equivalent to "
"``td / timedelta(seconds=1)``. For interval units other than seconds, use "
"the division form directly (e.g. ``td / timedelta(microseconds=1)``)."
msgstr ""
"この期間に含まれるトータルの秒数を返します。``td / timedelta(seconds=1)`` と"
"等価です。\n"
"秒以外の期間の単位では、直接に除算する形式 (例えば ``td / "
"timedelta(microseconds=1)``) が使われます。"

#: ../../library/datetime.rst:358
msgid ""
"Note that for very large time intervals (greater than 270 years on most "
"platforms) this method will lose microsecond accuracy."
msgstr ""
"非常に長い期間 (多くのプラットフォームでは270年以上) については、このメソッド"
"はマイクロ秒の精度を失うことがあることに注意してください。"

#: ../../library/datetime.rst:364
msgid "Example usage:"
msgstr "使用例:"

#: ../../library/datetime.rst:390
msgid ":class:`date` Objects"
msgstr ":class:`date` オブジェクト"

#: ../../library/datetime.rst:392
msgid ""
"A :class:`date` object represents a date (year, month and day) in an "
"idealized calendar, the current Gregorian calendar indefinitely extended in "
"both directions.  January 1 of year 1 is called day number 1, January 2 of "
"year 1 is called day number 2, and so on.  This matches the definition of "
"the \"proleptic Gregorian\" calendar in Dershowitz and Reingold's book "
"Calendrical Calculations, where it's the base calendar for all "
"computations.  See the book for algorithms for converting between proleptic "
"Gregorian ordinals and many other calendar systems."
msgstr ""
":class:`date` オブジェクトは日付 (年、月、および日) を表します。日付は理想的"
"なカレンダー、すなわち現在のグレゴリオ暦を過去と未来の両方向に無限に延長した"
"もので表されます。 1 年の 1 月 1 日は日番号 1, 1 年 1 月 2 日は日番号 2,と"
"なっていきます。この暦法は、全ての計算における基本カレンダーである、 "
"Dershowitz と Reingold の書籍 Calendrical Calculations における先発グレゴリオ"
"暦 (proleptic Gregorian) の定義に一致します。"

#: ../../library/datetime.rst:404
msgid ""
"All arguments are required.  Arguments must be integers in the following "
"ranges:"
msgstr ""

#: ../../library/datetime.rst:407
msgid "``MINYEAR <= year <= MAXYEAR``"
msgstr "``MINYEAR <= year <= MAXYEAR``"

#: ../../library/datetime.rst:408
msgid "``1 <= month <= 12``"
msgstr "``1 <= month <= 12``"

#: ../../library/datetime.rst:409
msgid "``1 <= day <= number of days in the given month and year``"
msgstr "``1 <= day <= 指定された月と年における日数``"

#: ../../library/datetime.rst:411 ../../library/datetime.rst:722
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised."
msgstr "範囲を超えた引数を与えた場合、 :exc:`ValueError` が送出されます。"

#: ../../library/datetime.rst:414 ../../library/datetime.rst:727
msgid "Other constructors, all class methods:"
msgstr "他のコンストラクタ、および全てのクラスメソッドを以下に示します:"

#: ../../library/datetime.rst:418
msgid ""
"Return the current local date.  This is equivalent to ``date."
"fromtimestamp(time.time())``."
msgstr ""
"現在のローカルな日付を返します。``date.fromtimestamp(time.time())`` と等価で"
"す。"

#: ../../library/datetime.rst:424
msgid ""
"Return the local date corresponding to the POSIX timestamp, such as is "
"returned by :func:`time.time`.  This may raise :exc:`OverflowError`, if the "
"timestamp is out of the range of values supported by the platform C :c:func:"
"`localtime` function, and :exc:`OSError` on :c:func:`localtime` failure. "
"It's common for this to be restricted to years from 1970 through 2038.  Note "
"that on non-POSIX systems that include leap seconds in their notion of a "
"timestamp, leap seconds are ignored by :meth:`fromtimestamp`."
msgstr ""
":func:`time.time` で返されるような POSIX タイムスタンプに対応するローカルな日"
"付を返します。 timestamp がプラットフォームの C 関数 :c:func:`localtime` がサ"
"ポートする値の範囲から外れていた場合、 :exc:`OverflowError` を送出するかもし"
"れません。また :c:func:`localtime` 呼び出しが失敗した場合には :exc:`OSError` "
"を送出するかもしれません。この範囲は通常は 1970 年から 2038 年までに制限され"
"ています。タイムスタンプの表記にうるう秒を含める非 POSIX なシステムでは、うる"
"う秒は :meth:`fromtimestamp` では無視されます。"

#: ../../library/datetime.rst:432
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"function. Raise :exc:`OSError` instead of :exc:`ValueError` on :c:func:"
"`localtime` failure."
msgstr ""
"timestamp がプラットフォームの C 関数 :c:func:`localtime` のサポートする値の"
"範囲から外れていた場合、 :exc:`ValueError` ではなく :exc:`OverflowError` を送"
"出するようになりました。 :c:func:`localtime` の呼び出し失敗で :exc:"
"`ValueError` ではなく :exc:`OSError` を送出するようになりました。"

#: ../../library/datetime.rst:441
msgid ""
"Return the date corresponding to the proleptic Gregorian ordinal, where "
"January 1 of year 1 has ordinal 1.  :exc:`ValueError` is raised unless ``1 "
"<= ordinal <= date.max.toordinal()``. For any date *d*, ``date.fromordinal(d."
"toordinal()) == d``."
msgstr ""
"先発グレゴリオ暦による序数に対応する日付を返します。 1 年 1 月 1 日が序数 1 "
"となります。 ``1 <= ordinal <= date.max.toordinal()`` でない場合、 :exc:"
"`ValueError` が送出されます。任意の日付 *d* に対し、 ``date.fromordinal(d."
"toordinal()) == d`` となります。"

#: ../../library/datetime.rst:449
msgid ""
"Return a :class:`date` corresponding to a *date_string* in the format "
"emitted by :meth:`date.isoformat`. Specifically, this function supports "
"strings in the format(s) ``YYYY-MM-DD``."
msgstr ""
":meth:`date.isoformat` から出力される形式の *date_string* に対応する :class:"
"`date` を返します。\n"
"具体的には、この関数は ``YYYY-MM-DD`` という形式の文字列をサポートしていま"
"す。"

#: ../../library/datetime.rst:455
msgid ""
"This does not support parsing arbitrary ISO 8601 strings - it is only "
"intended as the inverse operation of :meth:`date.isoformat`."
msgstr ""
"この関数は、任意の ISO 8601 文字列の構文解析をサポートしているわけではありま"
"せん - これは :meth:`date.isoformat` の逆演算を意図して実装されています。"

#: ../../library/datetime.rst:462 ../../library/datetime.rst:870
#: ../../library/datetime.rst:1439 ../../library/datetime.rst:2009
msgid "Class attributes:"
msgstr "以下にクラス属性を示します:"

#: ../../library/datetime.rst:466
msgid "The earliest representable date, ``date(MINYEAR, 1, 1)``."
msgstr "表現できる最も古い日付で、``date(MINYEAR, 1, 1)`` です。"

#: ../../library/datetime.rst:471
msgid "The latest representable date, ``date(MAXYEAR, 12, 31)``."
msgstr "表現できる最も新しい日付で、``date(MAXYEAR, 12, 31)`` です。"

#: ../../library/datetime.rst:476
msgid ""
"The smallest possible difference between non-equal date objects, "
"``timedelta(days=1)``."
msgstr "等しくない日付オブジェクト間の最小の差で、``timedelta(days=1)`` です。"

#: ../../library/datetime.rst:484 ../../library/datetime.rst:894
msgid "Between :const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr "両端値を含む :const:`MINYEAR` から :const:`MAXYEAR` までの値です。"

#: ../../library/datetime.rst:489 ../../library/datetime.rst:899
msgid "Between 1 and 12 inclusive."
msgstr "両端値を含む 1 から 12 までの値です。"

#: ../../library/datetime.rst:494 ../../library/datetime.rst:904
msgid "Between 1 and the number of days in the given month of the given year."
msgstr "1 から与えられた月と年における日数までの値です。"

#: ../../library/datetime.rst:502
msgid "``date2 = date1 + timedelta``"
msgstr "``date2 = date1 + timedelta``"

#: ../../library/datetime.rst:502
msgid "*date2* is ``timedelta.days`` days removed from *date1*.  (1)"
msgstr "*date2* は *date1* から ``timedelta.days`` 日だけ移動した日付です。(1)"

#: ../../library/datetime.rst:505
msgid "``date2 = date1 - timedelta``"
msgstr "``date2 = date1 - timedelta``"

#: ../../library/datetime.rst:505
msgid "Computes *date2* such that ``date2 + timedelta == date1``. (2)"
msgstr ""
"``date2 + timedelta == date1`` であるような日付 *date2* を計算します。(2)"

#: ../../library/datetime.rst:508
msgid "``timedelta = date1 - date2``"
msgstr "``timedelta = date1 - date2``"

#: ../../library/datetime.rst:508 ../../library/datetime.rst:952
msgid "\\(3)"
msgstr "\\(3)"

#: ../../library/datetime.rst:510
msgid "``date1 < date2``"
msgstr "``date1 < date2``"

#: ../../library/datetime.rst:510
msgid ""
"*date1* is considered less than *date2* when *date1* precedes *date2* in "
"time. (4)"
msgstr ""
"*date1* が時刻として *date2* よりも前を表す場合に、*date1* は *date2* よりも"
"小さいと見なされます。(4)"

#: ../../library/datetime.rst:517
msgid ""
"*date2* is moved forward in time if ``timedelta.days > 0``, or backward if "
"``timedelta.days < 0``.  Afterward ``date2 - date1 == timedelta.days``. "
"``timedelta.seconds`` and ``timedelta.microseconds`` are ignored. :exc:"
"`OverflowError` is raised if ``date2.year`` would be smaller than :const:"
"`MINYEAR` or larger than :const:`MAXYEAR`."
msgstr ""
"*date2* は ``timedelta.days > 0`` の場合進む方向に、 ``timedelta.days < 0`` "
"の場合戻る方向に移動します。演算後は、 ``date2 - date1 == timedelta.days`` と"
"なります。 ``timedelta.seconds`` および ``timedelta.microseconds`` は無視され"
"ます。 ``date2.year`` が :const:`MINYEAR` になってしまったり、 :const:"
"`MAXYEAR` より大きくなってしまう場合には :exc:`OverflowError` が送出されま"
"す。"

#: ../../library/datetime.rst:524
msgid "``timedelta.seconds`` and ``timedelta.microseconds`` are ignored."
msgstr "``timedelta.seconds`` と ``timedelta.microseconds`` は無視されます。"

#: ../../library/datetime.rst:527
msgid ""
"This is exact, and cannot overflow.  timedelta.seconds and timedelta."
"microseconds are 0, and date2 + timedelta == date1 after."
msgstr ""
"この演算は厳密で、オーバフローしません。timedelta.seconds および timedelta."
"microseconds は 0 で、演算後には date2 + timedelta == date1 となります。"

#: ../../library/datetime.rst:531
msgid ""
"In other words, ``date1 < date2`` if and only if ``date1.toordinal() < date2."
"toordinal()``. Date comparison raises :exc:`TypeError` if the other "
"comparand isn't also a :class:`date` object. However, ``NotImplemented`` is "
"returned instead if the other comparand has a :meth:`timetuple` attribute.  "
"This hook gives other kinds of date objects a chance at implementing mixed-"
"type comparison. If not, when a :class:`date` object is compared to an "
"object of a different type, :exc:`TypeError` is raised unless the comparison "
"is ``==`` or ``!=``.  The latter cases return :const:`False` or :const:"
"`True`, respectively."
msgstr ""
"言い換えると、 ``date1 < date2`` は ``date1.toordinal() < date2."
"toordinal()`` と同等です。\n"
"日付の比較は、比較相手が :class:`date` オブジェクトでない場合には、 :exc:"
"`TypeError` を送出します。\n"
"ただし、 比較相手に :meth:`timetuple` 属性がある場合は、 ``NotImplemented`` "
"が代わりに送出されます。\n"
"このフックによって、他の種類の日付オブジェクトに、違う型どうしの比較処理を実"
"装できる可能性が生まれます。\n"
"相手が :meth:`timetuple` 属性を持っていない場合に :class:`date` と違う型のオ"
"ブジェクトと比較すると、 ``==`` または ``!=`` の比較でない限り :exc:"
"`TypeError` が送出されます。\n"
"後者の場合では、それぞれ :const:`False` および :const:`True` が返されます。"

#: ../../library/datetime.rst:541
msgid ""
"Dates can be used as dictionary keys. In Boolean contexts, all :class:`date` "
"objects are considered to be true."
msgstr ""
":class:`date` オブジェクトは辞書のキーとして用いることができます。ブール演算"
"コンテキストでは、全ての :class:`date` オブジェクトは真であるとみなされます。"

#: ../../library/datetime.rst:548
msgid ""
"Return a date with the same value, except for those parameters given new "
"values by whichever keyword arguments are specified.  For example, if ``d == "
"date(2002, 12, 31)``, then ``d.replace(day=26) == date(2002, 12, 26)``."
msgstr ""
"キーワード引数で指定されたパラメタが置き換えられることを除き、同じ値を持つ :"
"class:`date` オブジェクトを返します。例えば、``d == date(2002, 12, 31)`` とす"
"ると、``d.replace(day=26) == date(2002, 12, 26)`` となります。"

#: ../../library/datetime.rst:555
msgid ""
"Return a :class:`time.struct_time` such as returned by :func:`time."
"localtime`. The hours, minutes and seconds are 0, and the DST flag is -1. "
"``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d.month, d."
"day, 0, 0, 0, d.weekday(), yday, -1))``, where ``yday = d.toordinal() - "
"date(d.year, 1, 1).toordinal() + 1`` is the day number within the current "
"year starting with ``1`` for January 1st."
msgstr ""
":func:`time.localtime` が返す形式の :class:`time.struct_time` を返します。時"
"間、分、および秒は 0 で、DST フラグは -1 になります。 ``d.timetuple()`` は次"
"の値と同値です: ``time.struct_time((d.year, d.month, d.day, 0, 0, 0, d."
"weekday(), yday, -1))`` ただし ``yday = d.toordinal() - date(d.year, 1, 1)."
"toordinal() + 1`` が 1月1日に ``1`` で始まる現在の年の日を表す。"

#: ../../library/datetime.rst:565
msgid ""
"Return the proleptic Gregorian ordinal of the date, where January 1 of year "
"1 has ordinal 1.  For any :class:`date` object *d*, ``date.fromordinal(d."
"toordinal()) == d``."
msgstr ""
"先発グレゴリオ暦における日付序数を返します。 1 年の 1 月 1 日が序数 1 となり"
"ます。任意の :class:`date` オブジェクト *d* について、 ``date.fromordinal(d."
"toordinal()) == d`` となります。"

#: ../../library/datetime.rst:572
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"For example, ``date(2002, 12, 4).weekday() == 2``, a Wednesday. See also :"
"meth:`isoweekday`."
msgstr ""
"月曜日を 0、日曜日を 6 として、曜日を整数で返します。例えば、 ``date(2002, "
"12, 4).weekday() == 2`` であり、水曜日を示します。 :meth:`isoweekday` も参照"
"してください。"

#: ../../library/datetime.rst:579
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"For example, ``date(2002, 12, 4).isoweekday() == 3``, a Wednesday. See also :"
"meth:`weekday`, :meth:`isocalendar`."
msgstr ""
"月曜日を 1,日曜日を 7 として、曜日を整数で返します。例えば、 ``date(2002, "
"12, 4).isoweekday() == 3`` であり、水曜日を示します。 :meth:`weekday`, :meth:"
"`isocalendar` も参照してください。"

#: ../../library/datetime.rst:586
msgid "Return a 3-tuple, (ISO year, ISO week number, ISO weekday)."
msgstr "3 要素のタプル (ISO 年、ISO 週番号、ISO 曜日) を返します。"

#: ../../library/datetime.rst:588
msgid ""
"The ISO calendar is a widely used variant of the Gregorian calendar. See "
"https://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm for a "
"good explanation."
msgstr ""
"ISO カレンダーはグレゴリオ暦の変種として広く用いられています。\n"
"細かい説明については https://www.staff.science.uu.nl/~gent0113/calendar/"
"isocalendar.htm を参照してください。"

#: ../../library/datetime.rst:592
msgid ""
"The ISO year consists of 52 or 53 full weeks, and where a week starts on a "
"Monday and ends on a Sunday.  The first week of an ISO year is the first "
"(Gregorian) calendar week of a year containing a Thursday. This is called "
"week number 1, and the ISO year of that Thursday is the same as its "
"Gregorian year."
msgstr ""
"ISO 年は完全な週が 52 または 53 週あり、週は月曜から始まって日曜に終わりま"
"す。ISO 年でのある年における最初の週は、その年の木曜日を含む最初の (グレゴリ"
"オ暦での) 週となります。この週は週番号 1 と呼ばれ、この木曜日での ISO 年はグ"
"レゴリオ暦における年と等しくなります。"

#: ../../library/datetime.rst:597
msgid ""
"For example, 2004 begins on a Thursday, so the first week of ISO year 2004 "
"begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that "
"``date(2003, 12, 29).isocalendar() == (2004, 1, 1)`` and ``date(2004, 1, 4)."
"isocalendar() == (2004, 1, 7)``."
msgstr ""
"例えば、2004 年は木曜日から始まるため、ISO 年の最初の週は 2003 年 12 月 29 "
"日、月曜日から始まり、2004 年 1 月 4 日、日曜日に終わります。従って、"
"``date(2003, 12, 29).isocalendar() == (2004, 1, 1)`` であり、かつ "
"``date(2004, 1, 4).isocalendar() == (2004, 1, 7)`` となります。"

#: ../../library/datetime.rst:605
msgid ""
"Return a string representing the date in ISO 8601 format, 'YYYY-MM-DD'.  For "
"example, ``date(2002, 12, 4).isoformat() == '2002-12-04'``."
msgstr ""
"ISO 8601 形式、 'YYYY-MM-DD' の日付を表す文字列を返します。例えば、"
"``date(2002, 12, 4).isoformat() == '2002-12-04'`` となります。"

#: ../../library/datetime.rst:611
msgid "For a date *d*, ``str(d)`` is equivalent to ``d.isoformat()``."
msgstr ""
":class:`date` オブジェクト *d* において、``str(d)`` は ``d.isoformat()`` と等"
"価です。"

#: ../../library/datetime.rst:616
msgid ""
"Return a string representing the date, for example ``date(2002, 12, 4)."
"ctime() == 'Wed Dec 4 00:00:00 2002'``. ``d.ctime()`` is equivalent to "
"``time.ctime(time.mktime(d.timetuple()))`` on platforms where the native C :"
"c:func:`ctime` function (which :func:`time.ctime` invokes, but which :meth:"
"`date.ctime` does not invoke) conforms to the C standard."
msgstr ""
"日付を表す文字列を、例えば ``date(2002, 12, 4).ctime() == 'Wed Dec 4 "
"00:00:00 2002'`` のようにして返します。ネイティブの C 関数 :c:func:`ctime` (:"
"func:`time.ctime` はこの関数を呼び出しますが、 :meth:`date.ctime` は呼び出し"
"ません) が C 標準に準拠しているプラットフォームでは、 ``d.ctime()`` は "
"``time.ctime(time.mktime(d.timetuple()))`` と等価です。"

#: ../../library/datetime.rst:625
msgid ""
"Return a string representing the date, controlled by an explicit format "
"string. Format codes referring to hours, minutes or seconds will see 0 "
"values. For a complete list of formatting directives, see :ref:`strftime-"
"strptime-behavior`."
msgstr ""
"明示的な書式文字列で制御された、日付を表現する文字列を返します。 時間、分、秒"
"を表す書式化コードは値 0 になります。完全な書式化ディレクティブのリストについ"
"ては :ref:`strftime-strptime-behavior` を参照してください。"

#: ../../library/datetime.rst:633
msgid ""
"Same as :meth:`.date.strftime`. This makes it possible to specify a format "
"string for a :class:`.date` object in :ref:`formatted string literals <f-"
"strings>` and when using :meth:`str.format`. For a complete list of "
"formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""
":meth:`date.strftime`と等価です。これにより、 :meth:`str.format` の使用時に :"
"class:`.date` の書式文字列を指定できます。書式化コードの完全なリストについて"
"は :ref:`strftime-strptime-behavior` を参照してください。"

#: ../../library/datetime.rst:640
msgid "Example of counting days to an event::"
msgstr "イベントまでの日数を数える例を示します::"

#: ../../library/datetime.rst:658
msgid "Example of working with :class:`date`:"
msgstr ":class:`date` と併用する例を示します:"

#: ../../library/datetime.rst:697
msgid ":class:`.datetime` Objects"
msgstr ":class:`.datetime` オブジェクト"

#: ../../library/datetime.rst:699
msgid ""
"A :class:`.datetime` object is a single object containing all the "
"information from a :class:`date` object and a :class:`.time` object.  Like "
"a :class:`date` object, :class:`.datetime` assumes the current Gregorian "
"calendar extended in both directions; like a time object, :class:`.datetime` "
"assumes there are exactly 3600\\*24 seconds in every day."
msgstr ""
":class:`.datetime` オブジェクトは :class:`date` オブジェクトおよび :class:`."
"time` オブジェクトの全ての情報が入っている単一のオブジェクトです。 :class:"
"`date` オブジェクトと同様に、 :class:`.datetime` は現在のグレゴリオ暦が両方向"
"に延長されているものと仮定します; また、 :class:`time` オブジェクトと同様"
"に, :class:`.datetime` は毎日が厳密に 3600\\*24 秒であると仮定します。"

#: ../../library/datetime.rst:705
msgid "Constructor:"
msgstr "以下にコンストラクタを示します:"

#: ../../library/datetime.rst:709
msgid ""
"The year, month and day arguments are required.  *tzinfo* may be ``None``, "
"or an instance of a :class:`tzinfo` subclass.  The remaining arguments must "
"be integers in the following ranges:"
msgstr ""

#: ../../library/datetime.rst:713
msgid "``MINYEAR <= year <= MAXYEAR``,"
msgstr "``MINYEAR <= year <= MAXYEAR``,"

#: ../../library/datetime.rst:714
msgid "``1 <= month <= 12``,"
msgstr "``1 <= month <= 12``,"

#: ../../library/datetime.rst:715
msgid "``1 <= day <= number of days in the given month and year``,"
msgstr "``1 <= day <= 指定された月と年における日数``,"

#: ../../library/datetime.rst:716 ../../library/datetime.rst:1430
msgid "``0 <= hour < 24``,"
msgstr "``0 <= hour < 24``,"

#: ../../library/datetime.rst:717 ../../library/datetime.rst:1431
msgid "``0 <= minute < 60``,"
msgstr "``0 <= minute < 60``,"

#: ../../library/datetime.rst:718 ../../library/datetime.rst:1432
msgid "``0 <= second < 60``,"
msgstr "``0 <= second < 60``,"

#: ../../library/datetime.rst:719 ../../library/datetime.rst:1433
msgid "``0 <= microsecond < 1000000``,"
msgstr "``0 <= microsecond < 1000000``,"

#: ../../library/datetime.rst:720 ../../library/datetime.rst:1434
msgid "``fold in [0, 1]``."
msgstr "``fold in [0, 1]``."

#: ../../library/datetime.rst:724 ../../library/datetime.rst:1054
#: ../../library/datetime.rst:1558
msgid "Added the ``fold`` argument."
msgstr "``fold`` 引数が追加されました。"

#: ../../library/datetime.rst:731
msgid ""
"Return the current local datetime, with :attr:`.tzinfo` ``None``. This is "
"equivalent to ``datetime.fromtimestamp(time.time())``. See also :meth:"
"`now`, :meth:`fromtimestamp`."
msgstr ""
"現在のローカルな :class:`datetime` を返します。\n"
":attr:`tzinfo` は ``None`` です。\n"
"この関数は ``datetime.fromtimestamp(time.time())`` と等価です。\n"
":meth:`now`, :meth:`fromtimestamp` も参照してください。"

#: ../../library/datetime.rst:738
msgid ""
"Return the current local date and time.  If optional argument *tz* is "
"``None`` or not specified, this is like :meth:`today`, but, if possible, "
"supplies more precision than can be gotten from going through a :func:`time."
"time` timestamp (for example, this may be possible on platforms supplying "
"the C :c:func:`gettimeofday` function)."
msgstr ""
"現在のローカルな日付および時刻を返します。オプションの引数 *tz* が ``None`` "
"であるか指定されていない場合、このメソッドは :meth:`today` と同様ですが、可能"
"ならば :func:`time.time` タイムスタンプを通じて得ることができる、より高い精度"
"で時刻を提供します (例えば、プラットフォームが C  関数 :c:func:"
"`gettimeofday` をサポートする場合には可能なことがあります)。"

#: ../../library/datetime.rst:744
msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the current date and time are converted to *tz*’s time zone.  "
"In this case the result is equivalent to ``tz.fromutc(datetime.utcnow()."
"replace(tzinfo=tz))``. See also :meth:`today`, :meth:`utcnow`."
msgstr ""
"*tz* が ``None`` でない場合、 *tz* は :class:`tzinfo` のサブクラスのインスタ"
"ンスでなければならず、現在の日付および時刻は *tz* のタイムゾーンに変換されま"
"す。\n"
"この場合、結果は ``tz.fromutc(datetime.utcnow().replace(tzinfo=tz))`` と等価"
"になります。\n"
":meth:`today`, :meth:`utcnow` も参照してください。"

#: ../../library/datetime.rst:752
msgid ""
"Return the current UTC date and time, with :attr:`.tzinfo` ``None``. This is "
"like :meth:`now`, but returns the current UTC date and time, as a naive :"
"class:`.datetime` object.  An aware current UTC datetime can be obtained by "
"calling ``datetime.now(timezone.utc)``.  See also :meth:`now`."
msgstr ""
":attr:`tzinfo` が ``None`` である現在の UTC の日付および時刻を返します。\n"
"これは :meth:`now` と似ていますが、 naive な :class:`.datetime` オブジェクト"
"として現在の UTC 日付および時刻を返します。\n"
"aware な現在の UTC datetime は ``datetime.now(timezone.utc)`` を呼び出すこと"
"で取得できます。\n"
":meth:`now` も参照してください。"

#: ../../library/datetime.rst:759
msgid ""
"Return the local date and time corresponding to the POSIX timestamp, such as "
"is returned by :func:`time.time`. If optional argument *tz* is ``None`` or "
"not specified, the timestamp is converted to the platform's local date and "
"time, and the returned :class:`.datetime` object is naive."
msgstr ""
":func:`time.time` が返すような、 POSIX タイムスタンプに対応するローカルな日付"
"と時刻を返します。オプションの引数 *tz* が ``None`` であるか、指定されていな"
"い場合、タイムスタンプはプラットフォームのローカルな日付および時刻に変換さ"
"れ、返される :class:`.datetime` オブジェクトは naive なものになります。"

#: ../../library/datetime.rst:764
msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the timestamp is converted to *tz*’s time zone.  In this case "
"the result is equivalent to ``tz.fromutc(datetime."
"utcfromtimestamp(timestamp).replace(tzinfo=tz))``."
msgstr ""
"*tz* が ``None`` でない場合、 *tz* は :class:`tzinfo` のサブクラスのインスタ"
"ンスでなければならず、現在の日付および時刻は *tz* のタイムゾーンに変換されま"
"す。\n"
"この場合、結果は ``tz.fromutc(datetime.utcfromtimestamp(timestamp)."
"replace(tzinfo=tz))`` と等価になります。"

#: ../../library/datetime.rst:769
msgid ""
":meth:`fromtimestamp` may raise :exc:`OverflowError`, if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"or :c:func:`gmtime` functions, and :exc:`OSError` on :c:func:`localtime` or :"
"c:func:`gmtime` failure. It's common for this to be restricted to years in "
"1970 through 2038. Note that on non-POSIX systems that include leap seconds "
"in their notion of a timestamp, leap seconds are ignored by :meth:"
"`fromtimestamp`, and then it's possible to have two timestamps differing by "
"a second that yield identical :class:`.datetime` objects. See also :meth:"
"`utcfromtimestamp`."
msgstr ""
"タイムスタンプがプラットフォームの C 関数 :c:func:`localtime` や :c:func:"
"`gmtime` でサポートされている範囲を超えた場合、 :meth:`fromtimestamp` は :"
"exc:`OverflowError` を送出することがあります。この範囲はよく 1970 年から "
"2038 年に制限されています。また :c:func:`localtime` や :c:func:`gmtime` が失"
"敗した際は :exc:`OSError` を送出します。うるう秒がタイムスタンプの概念に含ま"
"れている非 POSIX システムでは、 :meth:`fromtimestamp` はうるう秒を無視しま"
"す。このため、秒の異なる二つのタイムスタンプが同一の :class:`.datetime` オブ"
"ジェクトとなることが起こり得ます。 :meth:`utcfromtimestamp` も参照してくださ"
"い。"

#: ../../library/datetime.rst:779
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`localtime` "
"or :c:func:`gmtime` functions. Raise :exc:`OSError` instead of :exc:"
"`ValueError` on :c:func:`localtime` or :c:func:`gmtime` failure."
msgstr ""
"timestamp がプラットフォームの C 関数 :c:func:`localtime` もしくは :c:func:"
"`gmtime` のサポートする値の範囲から外れていた場合、 :exc:`ValueError` ではな"
"く :exc:`OverflowError` を送出するようになりました。 :c:func:`localtime` もし"
"くは :c:func:`gmtime` の呼び出し失敗で :exc:`ValueError` ではなく :exc:"
"`OSError` を送出するようになりました。"

#: ../../library/datetime.rst:786
msgid ":meth:`fromtimestamp` may return instances with :attr:`.fold` set to 1."
msgstr ""
":meth:`fromtimestamp` は :attr:`.fold` を1にしてインスタンスを返します。"

#: ../../library/datetime.rst:791
msgid ""
"Return the UTC :class:`.datetime` corresponding to the POSIX timestamp, "
"with :attr:`.tzinfo` ``None``. This may raise :exc:`OverflowError`, if the "
"timestamp is out of the range of values supported by the platform C :c:func:"
"`gmtime` function, and :exc:`OSError` on :c:func:`gmtime` failure. It's "
"common for this to be restricted to years in 1970 through 2038."
msgstr ""
"与えられた POSIX タイムスタンプに対応する UTC の :class:`.datetime` で、 :"
"attr:`.tzinfo` が ``None`` に設定されたものを返します。\n"
"タイムスタンプがプラットフォームの C 関数 :c:func:`gmtime` でサポートされてい"
"る範囲を超えている場合には :exc:`OverflowError` を、 :c:func:`gmtime` が失敗"
"した場合には :exc:`OSError` を送出します。\n"
"サポートされている範囲は 1970 年から 2038 年に制限されていることが多いです。"

#: ../../library/datetime.rst:797
msgid "To get an aware :class:`.datetime` object, call :meth:`fromtimestamp`::"
msgstr ""
"aware な :class:`.datetime` オブジェクトを得るには :meth:`fromtimestamp` を呼"
"んでください::"

#: ../../library/datetime.rst:801
msgid ""
"On the POSIX compliant platforms, it is equivalent to the following "
"expression::"
msgstr "POSIX 互換プラットフォームでは、これは以下の表現と等価です::"

#: ../../library/datetime.rst:806
msgid ""
"except the latter formula always supports the full years range: between :"
"const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr ""
"後者を除き、式は常に年の全範囲 (:const:`MINYEAR` から :const:`MAXYEAR` を含み"
"ます) をサポートします。"

#: ../../library/datetime.rst:809
msgid ""
"Raise :exc:`OverflowError` instead of :exc:`ValueError` if the timestamp is "
"out of the range of values supported by the platform C :c:func:`gmtime` "
"function. Raise :exc:`OSError` instead of :exc:`ValueError` on :c:func:"
"`gmtime` failure."
msgstr ""
"timestamp がプラットフォームの C 関数 :c:func:`gmtime` のサポートする値の範囲"
"から外れていた場合、 :exc:`ValueError` ではなく :exc:`OverflowError` を送出す"
"るようになりました。 :c:func:`gmtime` の呼び出し失敗で :exc:`ValueError` では"
"なく :exc:`OSError` を送出するようになりました。"

#: ../../library/datetime.rst:818
msgid ""
"Return the :class:`.datetime` corresponding to the proleptic Gregorian "
"ordinal, where January 1 of year 1 has ordinal 1. :exc:`ValueError` is "
"raised unless ``1 <= ordinal <= datetime.max.toordinal()``.  The hour, "
"minute, second and microsecond of the result are all 0, and :attr:`.tzinfo` "
"is ``None``."
msgstr ""
"1 年 1 月 1 日を序数 1 とする早期グレゴリオ暦序数に対応する :class:`."
"datetime` オブジェクトを返します。\n"
"``1 <= ordinal <= datetime.max.toordinal()`` でなければ :exc:`ValueError` が"
"送出されます。\n"
"返されるオブジェクトの時間、分、秒、およびマイクロ秒はすべて 0 で、 :attr:"
"`tzinfo` は ``None`` となっています。"

#: ../../library/datetime.rst:826
msgid ""
"Return a new :class:`.datetime` object whose date components are equal to "
"the given :class:`date` object's, and whose time components are equal to the "
"given :class:`.time` object's.  If the *tzinfo* argument is provided, its "
"value is used to set the :attr:`.tzinfo` attribute of the result, otherwise "
"the :attr:`~.time.tzinfo` attribute of the *time* argument is used."
msgstr ""
"日付部分と与えられた :class:`date` オブジェクトとが等しく、時刻部分と与えられ"
"た :class:`.time` オブジェクトとが等しい、新しい :class:`.datetime` オブジェ"
"クトを返します。\n"
"*tzinfo* 引数が与えられた場合、その値は返り値の :attr:`.tzinfo` 属性に設定す"
"るのに使われます。そうでない場合、 *time* 引数の :attr:`~.time.tzinfo` 属性が"
"使われます。"

#: ../../library/datetime.rst:833
msgid ""
"For any :class:`.datetime` object *d*, ``d == datetime.combine(d.date(), d."
"time(), d.tzinfo)``.  If date is a :class:`.datetime` object, its time "
"components and :attr:`.tzinfo` attributes are ignored."
msgstr ""
"任意の :class:`.datetime` オブジェクト *d* で ``d == datetime.combine(d."
"date(), d.timetz())`` が成立します。\n"
"date が :class:`.datetime` オブジェクトだった場合、その :class:`.datetime` オ"
"ブジェクトの時刻部分と :attr:`.tzinfo` 属性は無視されます。"

#: ../../library/datetime.rst:838
msgid "Added the *tzinfo* argument."
msgstr "*tzinfo* 引数が追加されました。"

#: ../../library/datetime.rst:844
msgid ""
"Return a :class:`datetime` corresponding to a *date_string* in one of the "
"formats emitted by :meth:`date.isoformat` and :meth:`datetime.isoformat`. "
"Specifically, this function supports strings in the format(s) ``YYYY-MM-"
"DD[*HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]]``, where ``*`` can match "
"any single character."
msgstr ""

#: ../../library/datetime.rst:852
msgid ""
"This does not support parsing arbitrary ISO 8601 strings - it is only "
"intended as the inverse operation of :meth:`datetime.isoformat`. A more full-"
"featured ISO 8601 parser, ``dateutil.parser.isoparse`` is available in the "
"third-party package `dateutil <https://dateutil.readthedocs.io/en/stable/"
"parser.html#dateutil.parser.isoparse>`_."
msgstr ""

#: ../../library/datetime.rst:861
msgid ""
"Return a :class:`.datetime` corresponding to *date_string*, parsed according "
"to *format*.  This is equivalent to ``datetime(*(time.strptime(date_string, "
"format)[0:6]))``. :exc:`ValueError` is raised if the date_string and format "
"can't be parsed by :func:`time.strptime` or if it returns a value which "
"isn't a time tuple. For a complete list of formatting directives, see :ref:"
"`strftime-strptime-behavior`."
msgstr ""
"*date_string* に対応した :class:`.datetime` を返します。 *format* にしたがっ"
"て構文解析されます。これは、 ``datetime(*(time.strptime(date_string, format)"
"[0:6]))`` と等価です。 date_stringとformatが :func:`time.strptime` で構文解析"
"できない場合や、この関数が時刻タプルを返してこない場合には :exc:`ValueError` "
"を送出します。完全な書式化ディレクティブのリストについては :ref:`strftime-"
"strptime-behavior` を参照してください。"

#: ../../library/datetime.rst:874
msgid ""
"The earliest representable :class:`.datetime`, ``datetime(MINYEAR, 1, 1, "
"tzinfo=None)``."
msgstr ""
"表現できる最も古い :class:`.datetime` で、 ``datetime(MINYEAR, 1, 1, "
"tzinfo=None)`` です。"

#: ../../library/datetime.rst:880
msgid ""
"The latest representable :class:`.datetime`, ``datetime(MAXYEAR, 12, 31, 23, "
"59, 59, 999999, tzinfo=None)``."
msgstr ""
"表現できる最も新しい :class:`.datetime` で、 ``datetime(MAXYEAR, 12, 31, 23, "
"59, 59, 999999, tzinfo=None)`` です。"

#: ../../library/datetime.rst:886
msgid ""
"The smallest possible difference between non-equal :class:`.datetime` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""
"等しくない :class:`.datetime` オブジェクト間の最小の差で、 "
"``timedelta(microseconds=1)`` です。"

#: ../../library/datetime.rst:909 ../../library/datetime.rst:1463
msgid "In ``range(24)``."
msgstr "in ``range(24)`` を満たします。。"

#: ../../library/datetime.rst:914 ../../library/datetime.rst:919
#: ../../library/datetime.rst:1468 ../../library/datetime.rst:1473
msgid "In ``range(60)``."
msgstr "in ``range(60)`` を満たします。"

#: ../../library/datetime.rst:924 ../../library/datetime.rst:1478
msgid "In ``range(1000000)``."
msgstr "in ``range(1000000)`` を満たします。"

#: ../../library/datetime.rst:929
msgid ""
"The object passed as the *tzinfo* argument to the :class:`.datetime` "
"constructor, or ``None`` if none was passed."
msgstr ""
":class:`.datetime` コンストラクタに *tzinfo* 引数として与えられたオブジェクト"
"になり、何も渡されなかった場合には ``None`` になります。"

#: ../../library/datetime.rst:935 ../../library/datetime.rst:1489
msgid ""
"In ``[0, 1]``.  Used to disambiguate wall times during a repeated interval.  "
"(A repeated interval occurs when clocks are rolled back at the end of "
"daylight saving time or when the UTC offset for the current zone is "
"decreased for political reasons.) The value 0 (1) represents the earlier "
"(later) of the two moments with the same wall time representation."
msgstr ""
" ``[0, 1]`` のどれかです。繰り返し間隔の間の実時間を明確にするために使用され"
"ます。 （夏時間の終わりに時計がロールバックされるか、政治的な理由により現在の"
"タイムゾーンとUTCとの時間差が減少すると、繰り返し間隔が発生します。）値 0 "
"(1) は同じ時間表現で表される2つの時間の内早いほう(遅いほう)を表します。"

#: ../../library/datetime.rst:948
msgid "``datetime2 = datetime1 + timedelta``"
msgstr "``datetime2 = datetime1 + timedelta``"

#: ../../library/datetime.rst:948 ../../library/datetime.rst:2067
#: ../../library/datetime.rst:2072 ../../library/datetime.rst:2084
#: ../../library/datetime.rst:2089 ../../library/datetime.rst:2149
#: ../../library/datetime.rst:2154 ../../library/datetime.rst:2158
msgid "\\(1)"
msgstr "\\(1)"

#: ../../library/datetime.rst:950
msgid "``datetime2 = datetime1 - timedelta``"
msgstr "``datetime2 = datetime1 - timedelta``"

#: ../../library/datetime.rst:950 ../../library/datetime.rst:2100
msgid "\\(2)"
msgstr "\\(2)"

#: ../../library/datetime.rst:952
msgid "``timedelta = datetime1 - datetime2``"
msgstr "``timedelta = datetime1 - datetime2``"

#: ../../library/datetime.rst:954
msgid "``datetime1 < datetime2``"
msgstr "``datetime1 < datetime2``"

#: ../../library/datetime.rst:954
msgid "Compares :class:`.datetime` to :class:`.datetime`. (4)"
msgstr ":class:`.datetime` を :class:`.datetime` と比較します。 (4)"

#: ../../library/datetime.rst:959
msgid ""
"datetime2 is a duration of timedelta removed from datetime1, moving forward "
"in time if ``timedelta.days`` > 0, or backward if ``timedelta.days`` < 0.  "
"The result has the same :attr:`~.datetime.tzinfo` attribute as the input "
"datetime, and datetime2 - datetime1 == timedelta after. :exc:`OverflowError` "
"is raised if datetime2.year would be smaller than :const:`MINYEAR` or larger "
"than :const:`MAXYEAR`. Note that no time zone adjustments are done even if "
"the input is an aware object."
msgstr ""
"datetime2 は datetime1 から時間 timedelta 移動したもので、 ``timedelta."
"days`` > 0 の場合未来へ、 ``timedelta.days`` < 0 の場合過去へ移動します。\n"
"結果は入力の datetime と同じ :attr:`~.datetime.tzinfo` 属性を持ち、演算後に"
"は datetime2 - datetime1 == timedelta となります。\n"
"datetime2.year が :const:`MINYEAR` よりも小さいか、 :const:`MAXYEAR` より大き"
"い場合には :exc:`OverflowError` が送出されます。\n"
"入力が aware なオブジェクトの場合でもタイムゾーン修正は全く行われません。"

#: ../../library/datetime.rst:968
msgid ""
"Computes the datetime2 such that datetime2 + timedelta == datetime1. As for "
"addition, the result has the same :attr:`~.datetime.tzinfo` attribute as the "
"input datetime, and no time zone adjustments are done even if the input is "
"aware."
msgstr ""
"datetime2 + timedelta == datetime1 となるような datetime2 を計算します。\n"
"ちなみに、結果は入力の datetime と同じ :attr:`~.datetime.tzinfo` 属性を持ち、"
"入力が aware だとしてもタイムゾーン修正は全く行われません。"

#: ../../library/datetime.rst:973
msgid ""
"Subtraction of a :class:`.datetime` from a :class:`.datetime` is defined "
"only if both operands are naive, or if both are aware.  If one is aware and "
"the other is naive, :exc:`TypeError` is raised."
msgstr ""
":class:`.datetime` から :class:`.datetime` の減算は両方の被演算子が naive で"
"あるか、両方とも aware である場合にのみ定義されています。片方が aware でもう"
"一方が naive の場合、 :exc:`TypeError` が送出されます。"

#: ../../library/datetime.rst:977
msgid ""
"If both are naive, or both are aware and have the same :attr:`~.datetime."
"tzinfo` attribute, the :attr:`~.datetime.tzinfo` attributes are ignored, and "
"the result is a :class:`timedelta` object *t* such that ``datetime2 + t == "
"datetime1``.  No time zone adjustments are done in this case."
msgstr ""
"両方とも naive か、両方とも aware で同じ :attr:`~.datetime.tzinfo` 属性を持つ"
"場合、 :attr:`~.datetime.tzinfo` 属性は無視され、結果は ``datetime2 + t == "
"datetime1`` であるような :class:`timedelta` オブジェクト *t* となります。\n"
"この場合タイムゾーン修正は全く行われません。"

#: ../../library/datetime.rst:982
msgid ""
"If both are aware and have different :attr:`~.datetime.tzinfo` attributes, "
"``a-b`` acts as if *a* and *b* were first converted to naive UTC datetimes "
"first.  The result is ``(a.replace(tzinfo=None) - a.utcoffset()) - (b."
"replace(tzinfo=None) - b.utcoffset())`` except that the implementation never "
"overflows."
msgstr ""
"両方が aware で異なる :attr:`~.datetime.tzinfo` 属性を持つ場合、 ``a-b`` は "
"*a* および *b* をまず naive な UTC datetime オブジェクトに変換したかのように"
"して行います。\n"
"演算結果は決してオーバフローを起こさないことを除き、 ``(a."
"replace(tzinfo=None) - a.utcoffset()) - (b.replace(tzinfo=None) - b."
"utcoffset())`` と同じになります。"

#: ../../library/datetime.rst:988
msgid ""
"*datetime1* is considered less than *datetime2* when *datetime1* precedes "
"*datetime2* in time."
msgstr ""
"*datetime1* が時刻として *datetime2* よりも前を表す場合に、*datetime1* は "
"*datetime2* よりも小さいと見なされます。"

#: ../../library/datetime.rst:991
msgid ""
"If one comparand is naive and the other is aware, :exc:`TypeError` is raised "
"if an order comparison is attempted.  For equality comparisons, naive "
"instances are never equal to aware instances."
msgstr ""
"比較の一方が naive であり、もう一方が aware の場合に、順序比較が行われると :"
"exc:`TypeError` が送出されます。等価比較では、 naive インスタンスと aware イ"
"ンスタンスは等価になることはありません。"

#: ../../library/datetime.rst:995
msgid ""
"If both comparands are aware, and have the same :attr:`~.datetime.tzinfo` "
"attribute, the common :attr:`~.datetime.tzinfo` attribute is ignored and the "
"base datetimes are compared.  If both comparands are aware and have "
"different :attr:`~.datetime.tzinfo` attributes, the comparands are first "
"adjusted by subtracting their UTC offsets (obtained from ``self."
"utcoffset()``)."
msgstr ""
"比較対象が両方とも aware で、同じ :attr:`~.datetime.tzinfo` 属性を持つ場"
"合、 :attr:`~.datetime.tzinfo` は無視され datetime だけで比較が行われます。\n"
"比較対象が両方とも aware であり、異なる :attr:`~.datetime.tzinfo` 属性を持つ"
"場合、まず最初に (``self.utcoffset()`` で取得できる) それぞれの UTC オフセッ"
"トを引いて調整します。"

#: ../../library/datetime.rst:1001
msgid ""
"Equality comparisons between naive and aware :class:`.datetime` instances "
"don't raise :exc:`TypeError`."
msgstr ""
"naive な :class:`datetime` インスタンスと aware な :class:`datetime` インスタ"
"ンスの等価比較では :exc:`TypeError` は送出されません。"

#: ../../library/datetime.rst:1007
msgid ""
"In order to stop comparison from falling back to the default scheme of "
"comparing object addresses, datetime comparison normally raises :exc:"
"`TypeError` if the other comparand isn't also a :class:`.datetime` object.  "
"However, ``NotImplemented`` is returned instead if the other comparand has "
"a :meth:`timetuple` attribute.  This hook gives other kinds of date objects "
"a chance at implementing mixed-type comparison.  If not, when a :class:`."
"datetime` object is compared to an object of a different type, :exc:"
"`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter "
"cases return :const:`False` or :const:`True`, respectively."
msgstr ""
"型混合の比較がデフォルトのオブジェクトアドレス比較となってしまうのを抑止する"
"ために、被演算子のもう一方が :class:`.datetime` オブジェクトと異なる型のオブ"
"ジェクトの場合には :exc:`TypeError` が送出されます。しかしながら、被比較演算"
"子のもう一方が :meth:`timetuple` 属性を持つ場合には ``NotImplemented`` が返さ"
"れます。このフックにより、他種の日付オブジェクトに型混合比較を実装するチャン"
"スを与えています。そうでない場合, :class:`.datetime` オブジェクトと異なる型の"
"オブジェクトが比較されると、比較演算子が ``==`` または ``!=`` でないかぎり :"
"exc:`TypeError` が送出されます。後者の場合、それぞれ :const:`False` または :"
"const:`True` を返します。"

#: ../../library/datetime.rst:1017
msgid ""
":class:`.datetime` objects can be used as dictionary keys. In Boolean "
"contexts, all :class:`.datetime` objects are considered to be true."
msgstr ""
":class:`.datetime` オブジェクトは辞書のキーとして用いることができます。ブール"
"演算コンテキストでは、全ての :class:`.datetime` オブジェクトは真であるとみな"
"されます。"

#: ../../library/datetime.rst:1024
msgid "Return :class:`date` object with same year, month and day."
msgstr "同じ年、月、日の :class:`date` オブジェクトを返します。"

#: ../../library/datetime.rst:1029
msgid ""
"Return :class:`.time` object with same hour, minute, second, microsecond and "
"fold. :attr:`.tzinfo` is ``None``.  See also method :meth:`timetz`."
msgstr ""
"同じhour、minute、second、microsecond 及び foldを持つ :class:`.time` オブジェ"
"クトを返します。 :attr:`.tzinfo` は ``None`` です。 :meth:`timetz` も参照して"
"ください。"

#: ../../library/datetime.rst:1032 ../../library/datetime.rst:1041
msgid "The fold value is copied to the returned :class:`.time` object."
msgstr "値 foldは返される :class:`.time` オブジェクトにコピーされます。"

#: ../../library/datetime.rst:1038
msgid ""
"Return :class:`.time` object with same hour, minute, second, microsecond, "
"fold, and tzinfo attributes.  See also method :meth:`time`."
msgstr ""
"同じhour、minute、second、microsecond、fold および tzinfo 属性を持つ :class:"
"`.time` オブジェクトを返します。  :meth:`time` メソッドも参照してください。"

#: ../../library/datetime.rst:1049
msgid ""
"Return a datetime with the same attributes, except for those attributes "
"given new values by whichever keyword arguments are specified.  Note that "
"``tzinfo=None`` can be specified to create a naive datetime from an aware "
"datetime with no conversion of date and time data."
msgstr ""
"キーワード引数で指定した属性の値を除き、同じ属性をもつ datetime オブジェクト"
"を返します。メンバに対する変換を行わずに aware な datetime オブジェクトから "
"naive な datetime オブジェクトを生成するために、``tzinfo=None`` を指定するこ"
"ともできます。"

#: ../../library/datetime.rst:1060
msgid ""
"Return a :class:`.datetime` object with new :attr:`.tzinfo` attribute *tz*, "
"adjusting the date and time data so the result is the same UTC time as "
"*self*, but in *tz*'s local time."
msgstr ""
"*tz* を新たに :attr:`.tzinfo` 属性 として持つ :class:`.datetime` オブジェクト"
"を返します。\n"
"日付および時刻データを調整して、返り値が *self* と同じ UTC 時刻を持ち、 *tz* "
"におけるローカルな時刻を表すようにします。"

#: ../../library/datetime.rst:1064
msgid ""
"If provided, *tz* must be an instance of a :class:`tzinfo` subclass, and "
"its :meth:`utcoffset` and :meth:`dst` methods must not return ``None``.  If "
"*self* is naive, it is presumed to represent time in the system timezone."
msgstr ""
"もし与えられた場合、 *tz* は :class:`tzinfo` のサブクラスのインスタンスでなけ"
"ればならず、 インスタンスの :meth:`utcoffset` および :meth:`dst` メソッドは "
"``None`` を返してはなりません。もし *self* が naive ならば、おそらくシステム"
"のタイムゾーンで時間を表現します。"

#: ../../library/datetime.rst:1068
msgid ""
"If called without arguments (or with ``tz=None``) the system local timezone "
"is assumed for the target timezone.  The ``.tzinfo`` attribute of the "
"converted datetime instance will be set to an instance of :class:`timezone` "
"with the zone name and offset obtained from the OS."
msgstr ""
"引数無し (もしくは ``tz=None``の形 ) で呼び出された場合、変更先のタイムゾーン"
"はシステムのローカルなタイムゾーンだと想定されます。\n"
"変換後の datetime インスタンスの ``.tzinfo`` 属性には、 OS から取得したゾーン"
"名とオフセットを持つ :class:`timezone` インスタンスが設定されます。"

#: ../../library/datetime.rst:1073
msgid ""
"If ``self.tzinfo`` is *tz*, ``self.astimezone(tz)`` is equal to *self*:  no "
"adjustment of date or time data is performed. Else the result is local time "
"in the timezone *tz*, representing the same UTC time as *self*:  after "
"``astz = dt.astimezone(tz)``, ``astz - astz.utcoffset()`` will have the same "
"date and time data as ``dt - dt.utcoffset()``."
msgstr ""
"``self.tzinfo`` が *tz* の場合、 ``self.astimezone(tz)`` は *self* に等しくな"
"ります。つまり、date および time に対する調整は行われません。そうでない場合、"
"結果はタイムゾーン *tz* におけるローカル時刻で、 *self* と同じ UTC 時刻を表す"
"ようになります。これは、``astz = dt.astimezone(tz)`` とした後、 ``astz - "
"astz.utcoffset()`` は通常 ``dt - dt.utcoffset()`` と同じ date および time を"
"持つことを示します。"

#: ../../library/datetime.rst:1079
msgid ""
"If you merely want to attach a time zone object *tz* to a datetime *dt* "
"without adjustment of date and time data, use ``dt.replace(tzinfo=tz)``.  If "
"you merely want to remove the time zone object from an aware datetime *dt* "
"without conversion of date and time data, use ``dt.replace(tzinfo=None)``."
msgstr ""
"単にタイムゾーンオブジェクト *tz* を :class:`datetime` オブジェクト *dt* に追"
"加したいだけで、日付や時刻データへの調整を行わないのなら、``dt."
"replace(tzinfo=tz)`` を使ってください。単に aware な :class:`datetime` オブ"
"ジェクト *dt* からタイムゾーンオブジェクトを除去したいだけで、日付や時刻デー"
"タの変換を行わないのなら、``dt.replace(tzinfo=None)`` を使ってください。"

#: ../../library/datetime.rst:1084
msgid ""
"Note that the default :meth:`tzinfo.fromutc` method can be overridden in a :"
"class:`tzinfo` subclass to affect the result returned by :meth:`astimezone`. "
"Ignoring error cases, :meth:`astimezone` acts like::"
msgstr ""
"デフォルトの :meth:`tzinfo.fromutc` メソッドを :class:`tzinfo` のサブクラスで"
"上書きして, :meth:`astimezone` が返す結果に影響を及ぼすことができます。エラー"
"の場合を無視すると、 :meth:`astimezone` は以下のように動作します::"

#: ../../library/datetime.rst:1096
msgid "*tz* now can be omitted."
msgstr "*tz* が省略可能になりました。"

#: ../../library/datetime.rst:1099
msgid ""
"The :meth:`astimezone` method can now be called on naive instances that are "
"presumed to represent system local time."
msgstr ""
":meth:`datetime.datetime.astimezone` メソッドを naive なインスタンスに対して"
"呼び出せるようになりました。これは、システムのローカルな時間を表現していると"
"想定されます。"

#: ../../library/datetime.rst:1106
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(self)``, and raises an exception if the latter doesn't return "
"``None`` or a :class:`timedelta` object with magnitude less than one day."
msgstr ""
":attr:`.tzinfo` が ``None`` の場合、 ``None`` を返し、そうでない場合には "
"``self.tzinfo.utcoffset(self)`` を返します。\n"
"後者の式が ``None`` あるいは 1 日以下の大きさを持つ :class:`timedelta` オブ"
"ジェクトのいずれかを返さない場合には例外を送出します。"

#: ../../library/datetime.rst:1110 ../../library/datetime.rst:1630
#: ../../library/datetime.rst:1730 ../../library/datetime.rst:1971
#: ../../library/datetime.rst:1982 ../../library/datetime.rst:2248
msgid "The UTC offset is not restricted to a whole number of minutes."
msgstr "UTC オフセットが分単位でなければならない制限が無くなりました。"

#: ../../library/datetime.rst:1116
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(self)``, and raises an exception if the latter doesn't return ``None`` "
"or a :class:`timedelta` object with magnitude less than one day."
msgstr ""
":attr:`.tzinfo` が ``None`` の場合 ``None`` を返し、そうでない場合には "
"``self.tzinfo.dst(self)`` を返します。\n"
"後者の式が ``None`` もしくは、1 日未満の大きさを持つ :class:`timedelta` オブ"
"ジェクトのいずれかを返さない場合には例外を送出します。"

#: ../../library/datetime.rst:1120 ../../library/datetime.rst:1640
#: ../../library/datetime.rst:1782
msgid "The DST offset is not restricted to a whole number of minutes."
msgstr "DST オフセットが分単位でなければならない制限が無くなりました。"

#: ../../library/datetime.rst:1126
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(self)``, raises an exception if the latter doesn't return ``None`` or "
"a string object,"
msgstr ""
":attr:`.tzinfo` が ``None`` の場合 ``None`` を返し、そうでない場合には "
"``self.tzinfo.tzname(self)`` を返します。\n"
"後者の式が ``None`` か文字列オブジェクトのいずれかを返さない場合には例外を送"
"出します。"

#: ../../library/datetime.rst:1133
msgid ""
"Return a :class:`time.struct_time` such as returned by :func:`time."
"localtime`. ``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d."
"month, d.day, d.hour, d.minute, d.second, d.weekday(), yday, dst))``, where "
"``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the day "
"number within the current year starting with ``1`` for January 1st. The :"
"attr:`tm_isdst` flag of the result is set according to the :meth:`dst` "
"method: :attr:`.tzinfo` is ``None`` or :meth:`dst` returns ``None``, :attr:"
"`tm_isdst` is set to ``-1``; else if :meth:`dst` returns a non-zero value, :"
"attr:`tm_isdst` is set to ``1``; else :attr:`tm_isdst` is set to ``0``."
msgstr ""
":func:`time.localtime` が返す形式の :class:`time.struct_time` を返します。\n"
"``d.timetuple()`` は ``time.struct_time((d.year, d.month, d.day, d.hour, d."
"minute, d.second, d.weekday(), yday, dst))`` と等価です。\n"
"ここで ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` はその年"
"の1月1日を ``1`` としたときのその日の位置です。\n"
"返されるタプルの :attr:`tm_isdst` フラグは :meth:`dst` メソッドに従って設定さ"
"れます: :attr:`.tzinfo` が ``None`` か :meth:`dst` が ``None`` を返す場合、 :"
"attr:`tm_isdst` は ``-1`` に設定されます; そうでない場合、 :meth:`dst` がゼロ"
"でない値を返すと :attr:`tm_isdst` は ``1`` となります; それ以外の場合には :"
"attr:`tm_isdst` は ``0`` に設定されます。"

#: ../../library/datetime.rst:1146
msgid ""
"If :class:`.datetime` instance *d* is naive, this is the same as ``d."
"timetuple()`` except that :attr:`tm_isdst` is forced to 0 regardless of what "
"``d.dst()`` returns.  DST is never in effect for a UTC time."
msgstr ""
":class:`.datetime` インスタンス *d* が naive の場合、このメソッドは ``d."
"timetuple()`` と同じであり、 ``d.dst()`` の返す内容にかかわらず :attr:"
"`tm_isdst` が 0 に強制される点だけが異なります。 DST が UTC 時刻に影響を及ぼ"
"すことは決してありません。"

#: ../../library/datetime.rst:1150
msgid ""
"If *d* is aware, *d* is normalized to UTC time, by subtracting ``d."
"utcoffset()``, and a :class:`time.struct_time` for the normalized time is "
"returned.  :attr:`tm_isdst` is forced to 0. Note that an :exc:"
"`OverflowError` may be raised if *d*.year was ``MINYEAR`` or ``MAXYEAR`` and "
"UTC adjustment spills over a year boundary."
msgstr ""
"*d* が aware だった場合、 *d* は ``d.utcoffset()`` を引いて UTC 時刻に正規化"
"され、その時刻が :class:`time.struct_time` として返されます。 :attr:"
"`tm_isdst` は 0 に強制されます。 *d*.year が ``MINYEAR`` もしくは "
"``MAXYEAR`` であり、 UTC 時刻への調整により適切な年の範囲を越えた場合、 :exc:"
"`OverflowError` が送出される可能性があることに注意してください。"

#: ../../library/datetime.rst:1160
msgid ""
"Return the proleptic Gregorian ordinal of the date.  The same as ``self."
"date().toordinal()``."
msgstr ""
"先発グレゴリオ暦における日付序数を返します。``self.date().toordinal()`` と同"
"じです。"

#: ../../library/datetime.rst:1165
msgid ""
"Return POSIX timestamp corresponding to the :class:`.datetime` instance.  "
"The return value is a :class:`float` similar to that returned by :func:`time."
"time`."
msgstr ""
":class:`.datetime` インスタンスに対応する POSIX タイムスタンプを返します。\n"
"返り値は :func:`time.time` で返される値に近い :class:`float` です。"

#: ../../library/datetime.rst:1169
msgid ""
"Naive :class:`.datetime` instances are assumed to represent local time and "
"this method relies on the platform C :c:func:`mktime` function to perform "
"the conversion.  Since :class:`.datetime` supports wider range of values "
"than :c:func:`mktime` on many platforms, this method may raise :exc:"
"`OverflowError` for times far in the past or far in the future."
msgstr ""
"このメソッドでは naive な :class:`.datetime` インスタンスはローカル時刻とし、"
"プラットフォームの C 関数 :c:func:`mktime` に頼って変換を行います。\n"
":class:`.datetime` は多くのプラットフォームの :c:func:`mktime` より広い範囲の"
"値をサポートしているので、遥か過去の時刻や遥か未来の時刻に対し、このメソッド"
"は :exc:`OverflowError` を送出するかもしれません。"

#: ../../library/datetime.rst:1176
msgid ""
"For aware :class:`.datetime` instances, the return value is computed as::"
msgstr ""
"aware な :class:`.datetime` インスタンスに対しては以下のように返り値が計算さ"
"れます::"

#: ../../library/datetime.rst:1183
msgid ""
"The :meth:`timestamp` method uses the :attr:`.fold` attribute to "
"disambiguate the times during a repeated interval."
msgstr ""
" :meth:`timestamp` メソッドは :attr:`.fold` 属性を繰り返し時間での曖昧さ回避"
"に使用します。"

#: ../../library/datetime.rst:1189
msgid ""
"There is no method to obtain the POSIX timestamp directly from a naive :"
"class:`.datetime` instance representing UTC time.  If your application uses "
"this convention and your system timezone is not set to UTC, you can obtain "
"the POSIX timestamp by supplying ``tzinfo=timezone.utc``::"
msgstr ""
"UTC 時刻を表す naive な :class:`.datetime` インスタンスから直接 POSIX タイム"
"スタンプを取得するメソッドはありません。\n"
"アプリケーションがその変換を使っており、システムのタイムゾーンが UTC に設定さ"
"れていなかった場合、 ``tzinfo=timezone.utc`` を引数に与えることで POSIX タイ"
"ムスタンプを取得できます::"

#: ../../library/datetime.rst:1197
msgid "or by calculating the timestamp directly::"
msgstr "もしくは直接タイムスタンプを計算することもできます::"

#: ../../library/datetime.rst:1203
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"The same as ``self.date().weekday()``. See also :meth:`isoweekday`."
msgstr ""
"月曜日を 0、日曜日を 6 として、曜日を整数で返します。 ``self.date()."
"weekday()`` と同じです。 :meth:`isoweekday` も参照してください。"

#: ../../library/datetime.rst:1209
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"The same as ``self.date().isoweekday()``. See also :meth:`weekday`, :meth:"
"`isocalendar`."
msgstr ""
"月曜日を 1、日曜日を 7 として、曜日を整数で返します。 ``self.date()."
"isoweekday()`` と等価です。 :meth:`weekday` 、 :meth:`isocalendar` も参照して"
"ください。"

#: ../../library/datetime.rst:1216
msgid ""
"Return a 3-tuple, (ISO year, ISO week number, ISO weekday).  The same as "
"``self.date().isocalendar()``."
msgstr ""
"3 要素のタプル (ISO 年、ISO 週番号、ISO 曜日) を返します。``self.date()."
"isocalendar()`` と等価です。"

#: ../../library/datetime.rst:1222
msgid ""
"Return a string representing the date and time in ISO 8601 format, YYYY-MM-"
"DDTHH:MM:SS.ffffff or, if :attr:`microsecond` is 0, YYYY-MM-DDTHH:MM:SS"
msgstr ""

#: ../../library/datetime.rst:1226
msgid ""
"If :meth:`utcoffset` does not return ``None``, a string is appended, giving "
"the UTC offset: YYYY-MM-DDTHH:MM:SS.ffffff+HH:MM[:SS[.ffffff]] or, if :attr:"
"`microsecond` is 0 YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[.ffffff]]."
msgstr ""

#: ../../library/datetime.rst:1231
msgid ""
"The optional argument *sep* (default ``'T'``) is a one-character separator, "
"placed between the date and time portions of the result.  For example,"
msgstr ""
"オプションの引数 *sep* (デフォルトでは ``'T'`` です)  は 1 文字のセパレータ"
"で、結果の文字列の日付と時刻の間に置かれます。例えば、"

#: ../../library/datetime.rst:1241 ../../library/datetime.rst:1569
msgid ""
"The optional argument *timespec* specifies the number of additional "
"components of the time to include (the default is ``'auto'``). It can be one "
"of the following:"
msgstr ""
"オプション引数 *timespec* は、含める追加の時間の要素の数を指定します(デフォル"
"トでは ``'auto'`` です)。以下の内一つを指定してください。"

#: ../../library/datetime.rst:1245 ../../library/datetime.rst:1573
msgid ""
"``'auto'``: Same as ``'seconds'`` if :attr:`microsecond` is 0, same as "
"``'microseconds'`` otherwise."
msgstr ""
"``'auto'``: :attr:`microsecond` が0である場合 ``'seconds'`` と等しく、そうで"
"ない場合は ``'microseconds'`` と等しくなります。"

#: ../../library/datetime.rst:1247 ../../library/datetime.rst:1575
msgid "``'hours'``: Include the :attr:`hour` in the two-digit HH format."
msgstr "``'hours'``:  :attr:`hour` を2文字の HH 書式で含めます。"

#: ../../library/datetime.rst:1248 ../../library/datetime.rst:1576
msgid "``'minutes'``: Include :attr:`hour` and :attr:`minute` in HH:MM format."
msgstr ""
"``'minutes'``: :attr:`hour` および :attr:`minute` を HH:MM の書式で含めます。"

#: ../../library/datetime.rst:1249 ../../library/datetime.rst:1577
msgid ""
"``'seconds'``: Include :attr:`hour`, :attr:`minute`, and :attr:`second` in "
"HH:MM:SS format."
msgstr ""
"``'seconds'``: :attr:`hour` と :attr:`minute` および :attr:`second`  を HH:"
"MM:SS の書式で含めます。"

#: ../../library/datetime.rst:1251 ../../library/datetime.rst:1579
msgid ""
"``'milliseconds'``: Include full time, but truncate fractional second part "
"to milliseconds. HH:MM:SS.sss format."
msgstr ""
"``'milliseconds'``: 全ての時間を含みますが、小数第二位をミリ秒に切り捨てま"
"す。 HH:MM:SS.sss の書式で表現します。"

#: ../../library/datetime.rst:1253 ../../library/datetime.rst:1581
msgid "``'microseconds'``: Include full time in HH:MM:SS.ffffff format."
msgstr ""

#: ../../library/datetime.rst:1257 ../../library/datetime.rst:1585
msgid "Excluded time components are truncated, not rounded."
msgstr "除外された要素は丸め込みではなく、切り捨てされます。"

#: ../../library/datetime.rst:1259 ../../library/datetime.rst:1587
msgid ":exc:`ValueError` will be raised on an invalid *timespec* argument."
msgstr "不正な *timespec* 引数には :exc:`ValueError` があげられます。"

#: ../../library/datetime.rst:1269 ../../library/datetime.rst:1599
msgid "Added the *timespec* argument."
msgstr "*timespec* 引数が追加されました。"

#: ../../library/datetime.rst:1275
msgid ""
"For a :class:`.datetime` instance *d*, ``str(d)`` is equivalent to ``d."
"isoformat(' ')``."
msgstr ""
":class:`.datetime` オブジェクト *d* において、 ``str(d)`` は ``d.isoformat(' "
"')`` と等価です。"

#: ../../library/datetime.rst:1281
msgid ""
"Return a string representing the date and time, for example ``datetime(2002, "
"12, 4, 20, 30, 40).ctime() == 'Wed Dec  4 20:30:40 2002'``. ``d.ctime()`` is "
"equivalent to ``time.ctime(time.mktime(d.timetuple()))`` on platforms where "
"the native C :c:func:`ctime` function (which :func:`time.ctime` invokes, but "
"which :meth:`datetime.ctime` does not invoke) conforms to the C standard."
msgstr ""
"日付を表す文字列を、例えば ``datetime(2002, 12, 4, 20, 30, 40).ctime() == "
"'Wed Dec  4 20:30:40 2002'`` のようにして返します。ネイティブの C 関数 :c:"
"func:`ctime`  (:func:`time.ctime` はこの関数を呼び出しますが、 :meth:"
"`datetime.ctime` は呼び出しません) が C 標準に準拠しているプラットフォームで"
"は、 ``d.ctime()`` は ``time.ctime(time.mktime(d.timetuple()))`` と等価です。"

#: ../../library/datetime.rst:1290
msgid ""
"Return a string representing the date and time, controlled by an explicit "
"format string.  For a complete list of formatting directives, see :ref:"
"`strftime-strptime-behavior`."
msgstr ""
"明示的な書式文字列で制御された、日付および時刻を表現する文字列を返します。完"
"全な書式化ディレクティブのリストについては :ref:`strftime-strptime-behavior` "
"を参照してください。"

#: ../../library/datetime.rst:1297
msgid ""
"Same as :meth:`.datetime.strftime`.  This makes it possible to specify a "
"format string for a :class:`.datetime` object in :ref:`formatted string "
"literals <f-strings>` and when using :meth:`str.format`.  For a complete "
"list of formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""
":meth:`datetime.strftime` と等価です。\n"
"これにより、 :ref:`フォーマット済み文字列リテラル <f-strings>` の中や :meth:"
"`str.format` を使っているときに :class:`.datetime` オブジェクトの書式文字列を"
"指定できます。\n"
"書式化コードの完全なリストについては :ref:`strftime-strptime-behavior` を参照"
"してください。"

#: ../../library/datetime.rst:1304
msgid "Examples of working with datetime objects:"
msgstr "datetime オブジェクトを使う例:"

#: ../../library/datetime.rst:1351
msgid "Using datetime with tzinfo:"
msgstr "datetime を tzinfo と組み合わせて使う:"

#: ../../library/datetime.rst:1419
msgid ":class:`.time` Objects"
msgstr ":class:`.time` オブジェクト"

#: ../../library/datetime.rst:1421
msgid ""
"A time object represents a (local) time of day, independent of any "
"particular day, and subject to adjustment via a :class:`tzinfo` object."
msgstr ""
":class:`time` オブジェクトは (ローカルの) 日中時刻を表現します。この時刻表現"
"は特定の日の影響を受けず、 :class:`tzinfo` オブジェクトを介した修正の対象とな"
"ります。"

#: ../../library/datetime.rst:1426
msgid ""
"All arguments are optional.  *tzinfo* may be ``None``, or an instance of a :"
"class:`tzinfo` subclass.  The remaining arguments must be integers in the "
"following ranges:"
msgstr ""

#: ../../library/datetime.rst:1436
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised.  "
"All default to ``0`` except *tzinfo*, which defaults to :const:`None`."
msgstr ""
"引数がこれらの範囲外にある場合、 :exc:`ValueError` が送出されます。 *tzinfo* "
"のデフォルト値が :const:`None` である以外のデフォルト値は ``0`` です。"

#: ../../library/datetime.rst:1444
msgid "The earliest representable :class:`.time`, ``time(0, 0, 0, 0)``."
msgstr "表現できる最も古い :class:`.time` で、 ``time(0, 0, 0, 0)`` です。"

#: ../../library/datetime.rst:1449
msgid "The latest representable :class:`.time`, ``time(23, 59, 59, 999999)``."
msgstr ""
"表現できる最も新しい :class:`.time` で、 ``time(23, 59, 59, 999999)`` です。"

#: ../../library/datetime.rst:1454
msgid ""
"The smallest possible difference between non-equal :class:`.time` objects, "
"``timedelta(microseconds=1)``, although note that arithmetic on :class:`."
"time` objects is not supported."
msgstr ""
"等しくない :class:`.time` オブジェクト間の最小の差で、 "
"``timedelta(microseconds=1)`` ですが, :class:`.time` オブジェクト間の四則演算"
"はサポートされていないので注意してください。"

#: ../../library/datetime.rst:1483
msgid ""
"The object passed as the tzinfo argument to the :class:`.time` constructor, "
"or ``None`` if none was passed."
msgstr ""
":class:`.time` コンストラクタに *tzinfo* 引数として与えられたオブジェクトにな"
"り、何も渡されなかった場合には ``None`` になります。"

#: ../../library/datetime.rst:1500
msgid ""
"comparison of :class:`.time` to :class:`.time`, where *a* is considered less "
"than *b* when *a* precedes *b* in time.  If one comparand is naive and the "
"other is aware, :exc:`TypeError` is raised if an order comparison is "
"attempted. For equality comparisons, naive instances are never equal to "
"aware instances."
msgstr ""
":class:`.time` と :class:`.time` の比較では、 *a* が *b* より前の時刻だった場"
"合 *a* が *b* より小さいとされます。比較の一方が naive であり、もう一方が "
"aware の場合に、順序比較が行われると :exc:`TypeError` が送出されます。等価比"
"較では、 naive インスタンスと aware インスタンスは等価になることはありませ"
"ん。"

#: ../../library/datetime.rst:1505
msgid ""
"If both comparands are aware, and have the same :attr:`~time.tzinfo` "
"attribute, the common :attr:`~time.tzinfo` attribute is ignored and the base "
"times are compared.  If both comparands are aware and have different :attr:"
"`~time.tzinfo` attributes, the comparands are first adjusted by subtracting "
"their UTC offsets (obtained from ``self.utcoffset()``). In order to stop "
"mixed-type comparisons from falling back to the default comparison by object "
"address, when a :class:`.time` object is compared to an object of a "
"different type, :exc:`TypeError` is raised unless the comparison is ``==`` "
"or ``!=``.  The latter cases return :const:`False` or :const:`True`, "
"respectively."
msgstr ""
"比較対象が両方とも aware であり、同じ :attr:`~time.tzinfo` 属性を持つ場合、 :"
"attr:`~time.tzinfo` は無視され datetime だけで比較が行われます。\n"
"比較対象が両方とも aware であり、異なる :attr:`~time.tzinfo` 属性を持つ場合、"
"まず最初に (``self.utcoffset()`` で取得できる) それぞれの UTC オフセットを引"
"いて調整します。\n"
"異なる型どうしの比較がデフォルトのオブジェクトアドレス比較となってしまうのを"
"防ぐために、 :class:`.time` オブジェクトを異なる型のオブジェクトと比較する"
"と、比較演算子が ``==`` または ``!=`` でないかぎり :exc:`TypeError` が送出さ"
"れます。\n"
"比較演算子が ``==`` または ``!=`` である場合、それぞれ :const:`False` また"
"は :const:`True` を返します。"

#: ../../library/datetime.rst:1515
msgid ""
"Equality comparisons between naive and aware :class:`~datetime.time` "
"instances don't raise :exc:`TypeError`."
msgstr ""
"naive な :class:`~datetime.time` インスタンスと aware な :class:`~datetime."
"time` インスタンスの等価比較では、 :exc:`TypeError` は送出されません。"

#: ../../library/datetime.rst:1519
msgid "hash, use as dict key"
msgstr "ハッシュ化、辞書のキーとしての利用"

#: ../../library/datetime.rst:1521
msgid "efficient pickling"
msgstr "効率的な pickle 化"

#: ../../library/datetime.rst:1523
msgid ""
"In boolean contexts, a :class:`.time` object is always considered to be true."
msgstr ""
"ブール値の文脈では、 :class:`.time` オブジェクトは常に真とみなされます。"

#: ../../library/datetime.rst:1525
msgid ""
"Before Python 3.5, a :class:`.time` object was considered to be false if it "
"represented midnight in UTC.  This behavior was considered obscure and error-"
"prone and has been removed in Python 3.5.  See :issue:`13936` for full "
"details."
msgstr ""
"Python 3.5 以前は、 :class:`.time` オブジェクトは UTC で深夜を表すときに偽と"
"みなされていました。\n"
"この挙動は分かりにくく、エラーの元となると考えられ、Python 3.5 で削除されまし"
"た。\n"
"全詳細については :issue:`13936` を参照してください。"

#: ../../library/datetime.rst:1532
msgid "Other constructor:"
msgstr "その他のコンストラクタ:"

#: ../../library/datetime.rst:1536
msgid ""
"Return a :class:`time` corresponding to a *time_string* in one of the "
"formats emitted by :meth:`time.isoformat`. Specifically, this function "
"supports strings in the format(s) ``HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[."
"ffffff]]]``."
msgstr ""

#: ../../library/datetime.rst:1542
msgid ""
"This does not support parsing arbitrary ISO 8601 strings - it is only "
"intended as the inverse operation of :meth:`time.isoformat`."
msgstr ""

#: ../../library/datetime.rst:1553
msgid ""
"Return a :class:`.time` with the same value, except for those attributes "
"given new values by whichever keyword arguments are specified.  Note that "
"``tzinfo=None`` can be specified to create a naive :class:`.time` from an "
"aware :class:`.time`, without conversion of the time data."
msgstr ""
"キーワード引数で指定したメンバの値を除き、同じ値をもつ :class:`.time` オブ"
"ジェクトを返します。データに対する変換を行わずに aware な :class:`.time` オブ"
"ジェクトから  naive な :class:`.time` オブジェクトを生成するために、 "
"``tzinfo=None`` を指定することもできます。"

#: ../../library/datetime.rst:1564
msgid ""
"Return a string representing the time in ISO 8601 format, HH:MM:SS.ffffff "
"or, if :attr:`microsecond` is 0, HH:MM:SS If :meth:`utcoffset` does not "
"return ``None``, a string is appended, giving the UTC offset: HH:MM:SS."
"ffffff+HH:MM[:SS[.ffffff]] or, if self.microsecond is 0, HH:MM:SS+HH:MM[:SS[."
"ffffff]]."
msgstr ""

#: ../../library/datetime.rst:1605
msgid "For a time *t*, ``str(t)`` is equivalent to ``t.isoformat()``."
msgstr ""
":class:`time` オブジェクト *t* において、``str(t)`` は ``t.isoformat()`` と等"
"価です。"

#: ../../library/datetime.rst:1610
msgid ""
"Return a string representing the time, controlled by an explicit format "
"string.  For a complete list of formatting directives, see :ref:`strftime-"
"strptime-behavior`."
msgstr ""
"明示的な書式文字列で制御された、時刻を表現する文字列を返します。完全な書式化"
"ディレクティブのリストについては :ref:`strftime-strptime-behavior` を参照して"
"ください。"

#: ../../library/datetime.rst:1617
msgid ""
"Same as :meth:`.time.strftime`. This makes it possible to specify a format "
"string for a :class:`.time` object in :ref:`formatted string literals <f-"
"strings>` and when using :meth:`str.format`.  For a complete list of "
"formatting directives, see :ref:`strftime-strptime-behavior`."
msgstr ""
":meth:`time.strftime`と等価です。これにより、 :meth:`str.format` の使用時に :"
"class:`.time` の書式文字列を指定できます。書式化コードの完全なリストについて"
"は :ref:`strftime-strptime-behavior` を参照してください。"

#: ../../library/datetime.rst:1626
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(None)``, and raises an exception if the latter doesn't return "
"``None`` or a :class:`timedelta` object with magnitude less than one day."
msgstr ""
":attr:`.tzinfo` が ``None`` の場合、 ``None`` を返し、そうでない場合には "
"``self.tzinfo.utcoffset(None)`` を返します。\n"
"後者の式が ``None`` あるいは 1 日以下の大きさを持つ :class:`timedelta` オブ"
"ジェクトのいずれかを返さない場合には例外を送出します。"

#: ../../library/datetime.rst:1636
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(None)``, and raises an exception if the latter doesn't return ``None``, "
"or a :class:`timedelta` object with magnitude less than one day."
msgstr ""
":attr:`.tzinfo` が ``None`` の場合 ``None`` を返し、そうでない場合には "
"``self.tzinfo.dst(None)`` を返します。\n"
"後者の式が ``None`` もしくは、1 日未満の大きさを持つ :class:`timedelta` オブ"
"ジェクトのいずれかを返さない場合には例外を送出します。"

#: ../../library/datetime.rst:1645
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(None)``, or raises an exception if the latter doesn't return ``None`` "
"or a string object."
msgstr ""
":attr:`.tzinfo` が ``None`` の場合 ``None`` を返し、そうでない場合には "
"``self.tzinfo.tzname(None)`` を返します。\n"
"後者の式が ``None`` か文字列オブジェクトのいずれかを返さない場合には例外を送"
"出します。"

#: ../../library/datetime.rst:1649
msgid "Example:"
msgstr "例:"

#: ../../library/datetime.rst:1680
msgid ":class:`tzinfo` Objects"
msgstr ":class:`tzinfo` オブジェクト"

#: ../../library/datetime.rst:1684
msgid ""
"This is an abstract base class, meaning that this class should not be "
"instantiated directly.  You need to derive a concrete subclass, and (at "
"least) supply implementations of the standard :class:`tzinfo` methods needed "
"by the :class:`.datetime` methods you use.  The :mod:`datetime` module "
"supplies a simple concrete subclass of :class:`tzinfo`, :class:`timezone`, "
"which can represent timezones with fixed offset from UTC such as UTC itself "
"or North American EST and EDT."
msgstr ""
"このクラスは抽象基底クラスで、直接インスタンス化すべきでないことを意味しま"
"す。\n"
"具象サブクラスを作成し、(少なくとも) 使いたい :class:`.datetime` のメソッドが"
"必要とする :class:`tzinfo` のメソッドを実装する必要があります。\n"
":mod:`datetime` モジュールは :class:`tzinfo` のシンプルな具象サブクラス :"
"class:`timezone` を提供します。\n"
"これは UTC そのものか北アメリカの EST と EDT のような UTC からの固定されたオ"
"フセットを持つタイムゾーンを表せます。"

#: ../../library/datetime.rst:1692
msgid ""
"An instance of (a concrete subclass of) :class:`tzinfo` can be passed to the "
"constructors for :class:`.datetime` and :class:`.time` objects. The latter "
"objects view their attributes as being in local time, and the :class:"
"`tzinfo` object supports methods revealing offset of local time from UTC, "
"the name of the time zone, and DST offset, all relative to a date or time "
"object passed to them."
msgstr ""
":class:`tzinfo` (の具体的なサブクラス) のインスタンスは :class:`.datetime` お"
"よび :class:`.time` オブジェクトのコンストラクタに渡すことができます。後者の"
"オブジェクトでは、データ属性をローカル時刻におけるものとして見ており、 :"
"class:`tzinfo` オブジェクトはローカル時刻の UTC からのオフセット、タイムゾー"
"ンの名前、 DST オフセットを、渡された日付および時刻オブジェクトからの相対で示"
"すためのメソッドを提供します。"

#: ../../library/datetime.rst:1698
msgid ""
"Special requirement for pickling:  A :class:`tzinfo` subclass must have an :"
"meth:`__init__` method that can be called with no arguments, else it can be "
"pickled but possibly not unpickled again.  This is a technical requirement "
"that may be relaxed in the future."
msgstr ""
"pickle 化についての特殊な要求事項: :class:`tzinfo` のサブクラスは引数なしで呼"
"び出すことのできる :meth:`__init__` メソッドを持たなければなりません。そうで"
"なければ、 pickle 化することはできますがおそらく unpickle 化することはできな"
"いでしょう。これは技術的な側面からの要求であり、将来緩和されるかもしれませ"
"ん。"

#: ../../library/datetime.rst:1703
msgid ""
"A concrete subclass of :class:`tzinfo` may need to implement the following "
"methods.  Exactly which methods are needed depends on the uses made of "
"aware :mod:`datetime` objects.  If in doubt, simply implement all of them."
msgstr ""
":class:`tzinfo` の具体的なサブクラスでは、以下のメソッドを実装する必要があり"
"ます。厳密にどのメソッドが必要なのかは、 aware な :mod:`datetime` オブジェク"
"トがこのサブクラスのインスタンスをどのように使うかに依存します。不確かなら"
"ば、単に全てを実装してください。"

#: ../../library/datetime.rst:1710
msgid ""
"Return offset of local time from UTC, as a :class:`timedelta` object that is "
"positive east of UTC.  If local time is west of UTC, this should be "
"negative.  Note that this is intended to be the total offset from UTC; for "
"example, if a :class:`tzinfo` object represents both time zone and DST "
"adjustments, :meth:`utcoffset` should return their sum.  If the UTC offset "
"isn't known, return ``None``.  Else the value returned must be a :class:"
"`timedelta` object strictly between ``-timedelta(hours=24)`` and "
"``timedelta(hours=24)`` (the magnitude of the offset must be less than one "
"day).  Most implementations of :meth:`utcoffset` will probably look like one "
"of these two::"
msgstr ""

#: ../../library/datetime.rst:1724
msgid ""
"If :meth:`utcoffset` does not return ``None``, :meth:`dst` should not return "
"``None`` either."
msgstr ""
":meth:`utcoffset` が ``None`` を返さない場合、 :meth:`dst` も ``None`` を返し"
"てはなりません。"

#: ../../library/datetime.rst:1727
msgid ""
"The default implementation of :meth:`utcoffset` raises :exc:"
"`NotImplementedError`."
msgstr ""
":meth:`utcoffset` のデフォルトの実装は :exc:`NotImplementedError` を送出しま"
"す。"

#: ../../library/datetime.rst:1736
msgid ""
"Return the daylight saving time (DST) adjustment, as a :class:`timedelta` "
"object or ``None`` if DST information isn't known.  Return ``timedelta(0)`` "
"if DST is not in effect. If DST is in effect, return the offset as a :class:"
"`timedelta` object (see :meth:`utcoffset` for details). Note that DST "
"offset, if applicable, has already been added to the UTC offset returned by :"
"meth:`utcoffset`, so there's no need to consult :meth:`dst` unless you're "
"interested in obtaining DST info separately.  For example, :meth:`datetime."
"timetuple` calls its :attr:`~.datetime.tzinfo` attribute's :meth:`dst` "
"method to determine how the :attr:`tm_isdst` flag should be set, and :meth:"
"`tzinfo.fromutc` calls :meth:`dst` to account for DST changes when crossing "
"time zones."
msgstr ""

#: ../../library/datetime.rst:1748
msgid ""
"An instance *tz* of a :class:`tzinfo` subclass that models both standard and "
"daylight times must be consistent in this sense:"
msgstr ""
"標準および夏時間の両方をモデル化している :class:`tzinfo` サブクラスのインスタ"
"ンス *tz* は以下の式:"

#: ../../library/datetime.rst:1751
msgid "``tz.utcoffset(dt) - tz.dst(dt)``"
msgstr "``tz.utcoffset(dt) - tz.dst(dt)``"

#: ../../library/datetime.rst:1753
msgid ""
"must return the same result for every :class:`.datetime` *dt* with ``dt."
"tzinfo == tz``  For sane :class:`tzinfo` subclasses, this expression yields "
"the time zone's \"standard offset\", which should not depend on the date or "
"the time, but only on geographic location.  The implementation of :meth:"
"`datetime.astimezone` relies on this, but cannot detect violations; it's the "
"programmer's responsibility to ensure it.  If a :class:`tzinfo` subclass "
"cannot guarantee this, it may be able to override the default implementation "
"of :meth:`tzinfo.fromutc` to work correctly with :meth:`astimezone` "
"regardless."
msgstr ""
"が、 ``dt.tzinfo == tz`` 全ての :class:`.datetime` オブジェクト *dt* について"
"常に同じ結果を返さなければならないという点で、一貫性を持っていなければなりま"
"せん。正常に実装された :class:`tzinfo` のサブクラスでは、この式はタイムゾーン"
"における \"標準オフセット (standard offset)\" を表し、特定の日や時刻の事情で"
"はなく地理的な位置にのみ依存していなくてはなりません。 :meth:`datetime."
"astimezone` の実装はこの事実に依存していますが、違反を検出することができませ"
"ん; 正しく実装するのはプログラマの責任です。 :class:`tzinfo` のサブクラスでこ"
"れを保証することができない場合、 :meth:`tzinfo.fromutc` の実装をオーバライド"
"して、 :meth:`astimezone` に関わらず正しく動作するようにしてもかまいません。"

#: ../../library/datetime.rst:1762
msgid ""
"Most implementations of :meth:`dst` will probably look like one of these "
"two::"
msgstr ""
"ほとんどの :meth:`dst` 実装は、おそらく以下の二つのうちの一つに似たものになる"
"でしょう::"

#: ../../library/datetime.rst:1768
msgid "or ::"
msgstr "もしくは ::"

#: ../../library/datetime.rst:1780
msgid ""
"The default implementation of :meth:`dst` raises :exc:`NotImplementedError`."
msgstr ""
"デフォルトの :meth:`dst` 実装は :exc:`NotImplementedError` を送出します。"

#: ../../library/datetime.rst:1788
msgid ""
"Return the time zone name corresponding to the :class:`.datetime` object "
"*dt*, as a string. Nothing about string names is defined by the :mod:"
"`datetime` module, and there's no requirement that it mean anything in "
"particular.  For example, \"GMT\", \"UTC\", \"-500\", \"-5:00\", \"EDT\", "
"\"US/Eastern\", \"America/New York\" are all valid replies.  Return ``None`` "
"if a string name isn't known.  Note that this is a method rather than a "
"fixed string primarily because some :class:`tzinfo` subclasses will wish to "
"return different names depending on the specific value of *dt* passed, "
"especially if the :class:`tzinfo` class is accounting for daylight time."
msgstr ""
":class:`.datetime` オブジェクト *dt* に対応するタイムゾーン名を文字列で返しま"
"す。 :mod:`datetime` モジュールでは文字列名について何も定義しておらず、特に何"
"かを意味するといった要求仕様もまったくありません。例えば、 \"GMT\",\"UTC\", "
"\"-500\", \"-5:00\", \"EDT\", \"US/Eastern\", \"America/New York\" は全て有効"
"な応答となります。文字列名が未知の場合には ``None`` を返してください。 :"
"class:`tzinfo` のサブクラスでは、特に, :class:`tzinfo` クラスが夏時間について"
"記述している場合のように、渡された *dt* の特定の値によって異なった名前を返し"
"たい場合があるため、文字列値ではなくメソッドとなっていることに注意してくださ"
"い。"

#: ../../library/datetime.rst:1798
msgid ""
"The default implementation of :meth:`tzname` raises :exc:"
"`NotImplementedError`."
msgstr ""
"デフォルトの :meth:`tzname` 実装は :exc:`NotImplementedError` を送出します。"

#: ../../library/datetime.rst:1801
msgid ""
"These methods are called by a :class:`.datetime` or :class:`.time` object, "
"in response to their methods of the same names.  A :class:`.datetime` object "
"passes itself as the argument, and a :class:`.time` object passes ``None`` "
"as the argument.  A :class:`tzinfo` subclass's methods should therefore be "
"prepared to accept a *dt* argument of ``None``, or of class :class:`."
"datetime`."
msgstr ""
"以下のメソッドは :class:`.datetime` や :class:`.time` オブジェクトにおいて、"
"同名のメソッドが呼び出された際に応じて呼び出されます。 :class:`.datetime` オ"
"ブジェクトは自身を引数としてメソッドに渡し、 :class:`.time` オブジェクトは引"
"数として ``None`` をメソッドに渡します。従って、 :class:`tzinfo` のサブクラス"
"におけるメソッドは引数 *dt* が ``None`` の場合と、 :class:`.datetime` の場合"
"を受理するように用意しなければなりません。"

#: ../../library/datetime.rst:1807
msgid ""
"When ``None`` is passed, it's up to the class designer to decide the best "
"response.  For example, returning ``None`` is appropriate if the class "
"wishes to say that time objects don't participate in the :class:`tzinfo` "
"protocols.  It may be more useful for ``utcoffset(None)`` to return the "
"standard UTC offset, as there is no other convention for discovering the "
"standard offset."
msgstr ""
"``None`` が渡された場合、最良の応答方法を決めるのはクラス設計者次第です。例え"
"ば、このクラスが :class:`tzinfo` プロトコルと関係をもたないということを表明さ"
"せたければ、 ``None`` が適切です。標準時のオフセットを見つける他の手段がない"
"場合には、標準 UTC オフセットを返すために ``utcoffset(None)`` を使うともっと"
"便利かもしれません。"

#: ../../library/datetime.rst:1813
msgid ""
"When a :class:`.datetime` object is passed in response to a :class:`."
"datetime` method, ``dt.tzinfo`` is the same object as *self*.  :class:"
"`tzinfo` methods can rely on this, unless user code calls :class:`tzinfo` "
"methods directly.  The intent is that the :class:`tzinfo` methods interpret "
"*dt* as being in local time, and not need worry about objects in other "
"timezones."
msgstr ""
":class:`.datetime` オブジェクトが :meth:`.datetime` メソッドの応答として返さ"
"れた場合、 ``dt.tzinfo`` は *self* と同じオブジェクトになります。ユーザが直"
"接 :class:`tzinfo` メソッドを呼び出さないかぎり、 :class:`tzinfo` メソッドは "
"``dt.tzinfo`` と *self* が同じであることに依存します。その結果 :class:"
"`tzinfo` メソッドは *dt* がローカル時間であると解釈するので、他のタイムゾーン"
"でのオブジェクトの振る舞いについて心配する必要がありません。"

#: ../../library/datetime.rst:1819
msgid ""
"There is one more :class:`tzinfo` method that a subclass may wish to "
"override:"
msgstr ""
"サブクラスでオーバーライドすると良い、もう 1 つの :class:`tzinfo` のメソッド"
"があります:"

#: ../../library/datetime.rst:1824
msgid ""
"This is called from the default :class:`datetime.astimezone()` "
"implementation.  When called from that, ``dt.tzinfo`` is *self*, and *dt*'s "
"date and time data are to be viewed as expressing a UTC time.  The purpose "
"of :meth:`fromutc` is to adjust the date and time data, returning an "
"equivalent datetime in *self*'s local time."
msgstr ""
"デフォルトの :class:`datetime.astimezone()` 実装で呼び出されます。 :class:"
"`datetime.astimezone()` から呼ばれた場合、 ``dt.tzinfo`` は *self* であり、 "
"*dt* の日付および時刻データは UTC 時刻を表しているものとして見えます。 :meth:"
"`fromutc` の目的は、 *self* のローカル時刻に等しい :class:`datetime` オブジェ"
"クトを返すことにより日付と時刻データメンバを修正することにあります。"

#: ../../library/datetime.rst:1830
msgid ""
"Most :class:`tzinfo` subclasses should be able to inherit the default :meth:"
"`fromutc` implementation without problems.  It's strong enough to handle "
"fixed-offset time zones, and time zones accounting for both standard and "
"daylight time, and the latter even if the DST transition times differ in "
"different years.  An example of a time zone the default :meth:`fromutc` "
"implementation may not handle correctly in all cases is one where the "
"standard offset (from UTC) depends on the specific date and time passed, "
"which can happen for political reasons. The default implementations of :meth:"
"`astimezone` and :meth:`fromutc` may not produce the result you want if the "
"result is one of the hours straddling the moment the standard offset changes."
msgstr ""
"ほとんどの :class:`tzinfo` サブクラスではデフォルトの :meth:`fromutc` 実装を"
"問題なく継承できます。デフォルトの実装は、固定オフセットのタイムゾーンや、標"
"準時と夏時間の両方について記述しているタイムゾーン、そして DST 移行時刻が年に"
"よって異なる場合でさえ、扱えるくらい強力なものです。デフォルトの :meth:"
"`fromutc` 実装が全ての場合に対して正しく扱うことができないような例は、標準時"
"の (UTCからの) オフセットが引数として渡された特定の日や時刻に依存するもので、"
"これは政治的な理由によって起きることがあります。デフォルトの :meth:"
"`astimezone` や :meth:`fromutc` の実装は、結果が標準時オフセットの変化にまた"
"がる何時間かの中にある場合、期待通りの結果を生成しないかもしれません。"

#: ../../library/datetime.rst:1841
msgid ""
"Skipping code for error cases, the default :meth:`fromutc` implementation "
"acts like::"
msgstr ""
"エラーの場合のためのコードを除き、デフォルトの :meth:`fromutc` の実装は以下の"
"ように動作します::"

#: ../../library/datetime.rst:1859
msgid ""
"In the following :download:`tzinfo_examples.py <../includes/tzinfo_examples."
"py>` file there are some examples of :class:`tzinfo` classes:"
msgstr ""
"次の :download:`tzinfo_examples.py <../includes/tzinfo_examples.py>` ファイル"
"には、 :class:`tzinfo` クラスの例がいくつか載っています:"

#: ../../library/datetime.rst:1865
msgid ""
"Note that there are unavoidable subtleties twice per year in a :class:"
"`tzinfo` subclass accounting for both standard and daylight time, at the DST "
"transition points.  For concreteness, consider US Eastern (UTC -0500), where "
"EDT begins the minute after 1:59 (EST) on the second Sunday in March, and "
"ends the minute after 1:59 (EDT) on the first Sunday in November::"
msgstr ""
"標準時および夏時間の両方を記述している :class:`tzinfo` のサブクラスでは、夏時"
"間の移行のときに、回避不能の難解な問題が年に 2 度あるので注意してください。\n"
"具体的な例として、東部アメリカ時刻 (US Eastern, UTC -0500) を考えます。\n"
"EDT は 3 月の第二日曜日の 1:59 (EST) の 1 分後に開始し、11 月の最初の日曜日"
"の (EDTの) 1:59 に終了します::"

#: ../../library/datetime.rst:1879
msgid ""
"When DST starts (the \"start\" line), the local wall clock leaps from 1:59 "
"to 3:00.  A wall time of the form 2:MM doesn't really make sense on that "
"day, so ``astimezone(Eastern)`` won't deliver a result with ``hour == 2`` on "
"the day DST begins.  For example, at the Spring forward transition of 2016, "
"we get"
msgstr ""
"DSTの開始の際(\"startの並び\") ローカルの壁時間は 1:59 から 3:00 に飛びます。"
"この日には、 2:MM の形で表現される壁時間は意味をなさないので、"
"``astimezone(Eastern)`` は ``hour == 2``となる結果を返すことはありません。\n"
"例として、2016年の春向き移行では、以下の"

#: ../../library/datetime.rst:1898
msgid ""
"When DST ends (the \"end\" line), there's a potentially worse problem: "
"there's an hour that can't be spelled unambiguously in local wall time: the "
"last hour of daylight time.  In Eastern, that's times of the form 5:MM UTC "
"on the day daylight time ends.  The local wall clock leaps from 1:59 "
"(daylight time) back to 1:00 (standard time) again. Local times of the form "
"1:MM are ambiguous. :meth:`astimezone` mimics the local clock's behavior by "
"mapping two adjacent UTC hours into the same local hour then.  In the "
"Eastern example, UTC times of the form 5:MM and 6:MM both map to 1:MM when "
"converted to Eastern, but earlier times have the :attr:`~datetime.fold` "
"attribute set to 0 and the later times have it set to 1. For example, at the "
"Fall back transition of 2016, we get"
msgstr ""
"DST が終了する際 (\"end\" の並び) では、問題はさらに悪化します: 1 時間の間、"
"ローカルの壁時計ではっきりと時刻をいえなくなります: それは夏時間の最後の 1 時"
"間です。東部時刻では、その日の UTC での 5:MM に夏時間は終了します。ローカルの"
"壁時計は 1:59 (夏時間) から 1:00 (標準時) に再び巻き戻されます。ローカルの時"
"刻における 1:MM はあいまいになります。 :meth:`astimezone` は二つの UTC 時刻を"
"同じローカルの時刻に対応付けることでローカルの時計の振る舞いをまねます。東部"
"時刻の例では、 5:MM および 6:MM の形式をとる UTC 時刻は両方とも、東部時刻に変"
"換された際に 1:MM に対応づけられますが、それ以前の時間は :attr:`~datetime."
"fold` 属性を0にし、以降の時間では1にします。例えば、2016年での秋向き以降で"
"は、以下の"

#: ../../library/datetime.rst:1920
msgid ""
"Note that the :class:`datetime` instances that differ only by the value of "
"the :attr:`~datetime.fold` attribute are considered equal in comparisons."
msgstr ""
"  :attr:`~datetime.fold` 属性が異なるだけの :class:`datetime` インスタンスは"
"比較において等しいとみなされることに注意してください。"

#: ../../library/datetime.rst:1923
msgid ""
"Applications that can't bear wall-time ambiguities should explicitly check "
"the value of the :attr:`~datetime.fold` attribute or avoid using hybrid :"
"class:`tzinfo` subclasses; there are no ambiguities when using :class:"
"`timezone`, or any other fixed-offset :class:`tzinfo` subclass (such as a "
"class representing only EST (fixed offset -5 hours), or only EDT (fixed "
"offset -4 hours))."
msgstr ""
"壁時間に関する曖昧さは、明示的に :attr:`~datetime.fold` 属性を検証するか、 :"
"class:`timezone` が使用されたハイブリッドな :class:`tzinfo` サブクラスか、そ"
"のほかの絶対時間差を示す :class:`tzinfo` サブクラス(EST (-5 時間の絶対時間"
"差) のみを表すクラスや、 EDT (-4 時間の絶対時間差) のみを表すクラス)を使用す"
"ると回避できます。\n"
"このような曖昧さを許容できないアプリケーションは、上記の手法によって回避すべ"
"きです。"

#: ../../library/datetime.rst:1936
msgid "`dateutil.tz <https://dateutil.readthedocs.io/en/stable/tz.html>`_"
msgstr "`dateutil.tz <https://dateutil.readthedocs.io/en/stable/tz.html>`_"

#: ../../library/datetime.rst:1932
msgid ""
"The standard library has :class:`timezone` class for handling arbitrary "
"fixed offsets from UTC and :attr:`timezone.utc` as UTC timezone instance."
msgstr ""
"標準ライブラリにはUTCからの任意の固定オフセットを扱うために、 :class:"
"`timezone` クラスが、 UTCタイムゾーンのインスタンスとして、 :attr:`timezone."
"utc` があります。"

#: ../../library/datetime.rst:1935
msgid ""
"*dateutil.tz* library brings the *IANA timezone database* (also known as the "
"Olson database) to Python and its usage is recommended."
msgstr ""
"*dateutil.tz* ライブラリは Python に *IANA タイムゾーンデータベース* (オルソ"
"ンデータベースとしても知られています) をもたらし、そしてそれの利用が推奨され"
"ます。"

#: ../../library/datetime.rst:1942
msgid "`IANA timezone database <https://www.iana.org/time-zones>`_"
msgstr "`IANA タイムゾーンデータベース <https://www.iana.org/time-zones>`_"

#: ../../library/datetime.rst:1939
msgid ""
"The Time Zone Database (often called tz, tzdata or zoneinfo) contains code "
"and data that represent the history of local time for many representative "
"locations around the globe. It is updated periodically to reflect changes "
"made by political bodies to time zone boundaries, UTC offsets, and daylight-"
"saving rules."
msgstr ""
"(しばしば tz、tzdata や zoneinfo と呼ばれる) タイムゾーンデータベースはコード"
"とデータを保持しており、それらは地球全体にわたる多くの代表的な場所のローカル"
"時刻の履歴を表しています。政治団体によるタイムゾーンの境界、UTC オフセット、"
"夏時間のルールの変更を反映するため、定期的にデータベースが更新されます。"

#: ../../library/datetime.rst:1949
msgid ":class:`timezone` Objects"
msgstr ":class:`timezone` オブジェクト"

#: ../../library/datetime.rst:1951
msgid ""
"The :class:`timezone` class is a subclass of :class:`tzinfo`, each instance "
"of which represents a timezone defined by a fixed offset from UTC.  Note "
"that objects of this class cannot be used to represent timezone information "
"in the locations where different offsets are used in different days of the "
"year or where historical changes have been made to civil time."
msgstr ""
":class:`timezone` クラスは :class:`tzinfo` のサブクラスで、各インスタンスは "
"UTC からの固定されたオフセットで定義されたタイムゾーンを表しています。このク"
"ラスのオブジェクトは、一年のうち異なる日に異なるオフセットが使われていたり、"
"常用時 (civil time) に歴史的な変化が起きた場所のタイムゾーン情報を表すのには"
"使えないので注意してください。"

#: ../../library/datetime.rst:1961
msgid ""
"The *offset* argument must be specified as a :class:`timedelta` object "
"representing the difference between the local time and UTC.  It must be "
"strictly between ``-timedelta(hours=24)`` and ``timedelta(hours=24)``, "
"otherwise :exc:`ValueError` is raised."
msgstr ""
"ローカル時刻と UTC の差分を表す :class:`timedelta` オブジェクトを *offset* 引"
"数に指定しなくてはいけません。これは ``-timedelta(hours=24)`` から "
"``timedelta(hours=24)`` までの両端を含まない範囲に収まっていなくてはなりませ"
"ん。そうでない場合 :exc:`ValueError` が送出されます。"

#: ../../library/datetime.rst:1966
msgid ""
"The *name* argument is optional.  If specified it must be a string that will "
"be used as the value returned by the :meth:`datetime.tzname` method."
msgstr ""
" *name* 引数は必須ではありません。もし指定された場合、その文字列は :meth:"
"`datetime.tzname` メソッドの返り値として使用される値でなければなりません。"

#: ../../library/datetime.rst:1977
msgid ""
"Return the fixed value specified when the :class:`timezone` instance is "
"constructed.  The *dt* argument is ignored.  The return value is a :class:"
"`timedelta` instance equal to the difference between the local time and UTC."
msgstr ""
":class:`timezone` インスタンスの作成時に指定された固定の値を返します。 *dt* "
"引数は無視されます。返り値は、ローカル時刻と UTC の差分に等しい :class:"
"`timedelta` インスタンスです。"

#: ../../library/datetime.rst:1987
msgid ""
"Return the fixed value specified when the :class:`timezone` instance is "
"constructed.  If *name* is not provided in the constructor, the name "
"returned by ``tzname(dt)`` is generated from the value of the ``offset`` as "
"follows.  If *offset* is ``timedelta(0)``, the name is \"UTC\", otherwise it "
"is a string 'UTC±HH:MM', where ± is the sign of ``offset``, HH and MM are "
"two digits of ``offset.hours`` and ``offset.minutes`` respectively."
msgstr ""
":class:`timezone` インスタンスが構築されたときに指定された固定値を返します。 "
"*name* が構築時に与えられなかった場合、 ``tzname(dt)`` によって返される name "
"は以下の様に ``offset`` の値から生成されます。*offset* が ``timedelta(0)`` で"
"あった場合、 name は \"UTC\"になります。それ以外の場合、文字列 'UTC±HH:MM' と"
"なり、± は ``offset`` を、HH と MM はそれぞれ二桁の ``offset.hours`` と "
"``offset.minutes`` を表現します。"

#: ../../library/datetime.rst:1995
msgid ""
"Name generated from ``offset=timedelta(0)`` is now plain 'UTC', not "
"'UTC+00:00'."
msgstr ""
"``offset=timedelta(0)`` によって生成される名前は、プレーンな'UTC'であ"
"り、'UTC+00:00'ではありません。"

#: ../../library/datetime.rst:2002
msgid "Always returns ``None``."
msgstr "常に ``None`` を返します。"

#: ../../library/datetime.rst:2006
msgid ""
"Return ``dt + offset``.  The *dt* argument must be an aware :class:`."
"datetime` instance, with ``tzinfo`` set to ``self``."
msgstr ""
"``dt + offset`` を返します。 *dt* 引数は ``tzinfo`` が ``self`` になっている "
"aware な :class:`.datetime` インスタンスでなければなりません。"

#: ../../library/datetime.rst:2013
msgid "The UTC timezone, ``timezone(timedelta(0))``."
msgstr "UTC タイムゾーン ``timezone(timedelta(0))`` です。"

#: ../../library/datetime.rst:2022
msgid ":meth:`strftime` and :meth:`strptime` Behavior"
msgstr ":meth:`strftime` と :meth:`strptime` の振る舞い"

#: ../../library/datetime.rst:2024
msgid ""
":class:`date`, :class:`.datetime`, and :class:`.time` objects all support a "
"``strftime(format)`` method, to create a string representing the time under "
"the control of an explicit format string.  Broadly speaking, ``d."
"strftime(fmt)`` acts like the :mod:`time` module's ``time.strftime(fmt, d."
"timetuple())`` although not all objects support a :meth:`timetuple` method."
msgstr ""
":class:`date`, :class:`.datetime`,および :class:`.time` オブジェクトは全て、"
"明示的な書式文字列でコントロールして時刻表現文字列を生成するための "
"``strftime(format)`` メソッドをサポートしています。大雑把にいうと、 ``d."
"strftime(fmt)`` は :mod:`time` モジュールの ``time.strftime(fmt, d."
"timetuple())`` のように動作します。ただし全てのオブジェクトが :meth:"
"`timetuple` メソッドをサポートしているわけではありません。"

#: ../../library/datetime.rst:2030
msgid ""
"Conversely, the :meth:`datetime.strptime` class method creates a :class:`."
"datetime` object from a string representing a date and time and a "
"corresponding format string. ``datetime.strptime(date_string, format)`` is "
"equivalent to ``datetime(*(time.strptime(date_string, format)[0:6]))``, "
"except when the format includes sub-second components or timezone offset "
"information, which are supported in ``datetime.strptime`` but are discarded "
"by ``time.strptime``."
msgstr ""
"逆に :meth:`datetime.strptime` クラスメソッドは日付や時刻に対応する書式文字列"
"から :class:`.datetime` オブジェクトを生成します。 ``datetime."
"strptime(date_string, format)`` は ``datetime(*(time.strptime(date_string, "
"format)[0:6]))`` と等価です。ただし、 ``datetime.strptime`` ではサポートされ"
"ていて ``time.strptime`` ではサポートされない、 小数秒以下の要素またはタイム"
"ゾーン情報が含まれる書式の場合には、その限りではありません。"

#: ../../library/datetime.rst:2037
msgid ""
"For :class:`.time` objects, the format codes for year, month, and day should "
"not be used, as time objects have no such values.  If they're used anyway, "
"``1900`` is substituted for the year, and ``1`` for the month and day."
msgstr ""
":class:`.time` オブジェクトでは、年、月、日の値がないため、それらの書式化コー"
"ドを使うことができません。無理矢理使った場合、年は ``1900`` に置き換えられ、"
"月と日は ``1`` に置き換えられます。"

#: ../../library/datetime.rst:2041
msgid ""
"For :class:`date` objects, the format codes for hours, minutes, seconds, and "
"microseconds should not be used, as :class:`date` objects have no such "
"values.  If they're used anyway, ``0`` is substituted for them."
msgstr ""
":class:`date` オブジェクトでは、時、分、秒、マイクロ秒の値がないため、それら"
"の書式化コードを使うことができません。無理矢理使った場合、これらの値は ``0`` "
"に置き換えられます。"

#: ../../library/datetime.rst:2045
msgid ""
"For the :meth:`datetime.strptime` class method, the default value is "
"``1900-01-01T00:00:00.000``: any components not specified in the format "
"string will be pulled from the default value. [#]_"
msgstr ""
":meth:`datetime.strptime` クラスメソッドでは、デフォルト値は "
"``1900-01-01T00:00:00.000`` です。書式文字列で指定されなかった部分はデフォル"
"ト値から引っ張ってきます。 [#]_"

#: ../../library/datetime.rst:2048
msgid ""
"The full set of format codes supported varies across platforms, because "
"Python calls the platform C library's :func:`strftime` function, and "
"platform variations are common.  To see the full set of format codes "
"supported on your platform, consult the :manpage:`strftime(3)` documentation."
msgstr ""
"Python はプラットフォームの C ライブラリの :func:`strftime` 関数を呼び出して"
"いて、プラットフォームごとにその実装が異なるのはよくあることなので、サポート"
"されるフォーマット記号全体はプラットフォームごとに様々です。プラットフォーム"
"でサポートされているフォーマット記号全体を見るには、 :manpage:`strftime(3)` "
"のドキュメントを参照してください。"

#: ../../library/datetime.rst:2053
msgid ""
"For the same reason, handling of format strings containing Unicode code "
"points that can't be represented in the charset of the current locale is "
"also platform-dependent. On some platforms such code points are preserved "
"intact in the output, while on others ``strftime`` may raise :exc:"
"`UnicodeError` or return an empty string instead."
msgstr ""
"同じ理由で、現在のロケールの文字集合で表現できない Unicode コードポイントを含"
"む書式文字列の対処もプラットフォーム依存です。\n"
"あるプラットフォームではそういったコードポイントはそのまま出力に出される一"
"方、他のプラットフォームでは ``strftime`` が :exc:`UnicodeError` を送出した"
"り、その代わりに空文字列を返したりするかもしれません。"

#: ../../library/datetime.rst:2059
msgid ""
"The following is a list of all the format codes that the C standard (1989 "
"version) requires, and these work on all platforms with a standard C "
"implementation.  Note that the 1999 version of the C standard added "
"additional format codes."
msgstr ""
"以下のリストはC標準(1989年版)が要求する全ての書式化コードで、標準C実装があれ"
"ば全ての環境で動作します。1999 年版の C 標準では書式化コードが追加されている"
"ので注意してください。"

#: ../../library/datetime.rst:2065 ../../library/datetime.rst:2172
msgid "Directive"
msgstr "ディレクティブ"

#: ../../library/datetime.rst:2065 ../../library/datetime.rst:2172
msgid "Meaning"
msgstr "意味"

#: ../../library/datetime.rst:2065 ../../library/datetime.rst:2172
msgid "Example"
msgstr "使用例"

#: ../../library/datetime.rst:2065 ../../library/datetime.rst:2172
msgid "Notes"
msgstr "注釈"

#: ../../library/datetime.rst:2067
msgid "``%a``"
msgstr "``%a``"

#: ../../library/datetime.rst:2067
msgid "Weekday as locale's abbreviated name."
msgstr "ロケールの曜日名を短縮形で表示します。"

#: ../../library/datetime.rst:0
msgid "Sun, Mon, ..., Sat (en_US);"
msgstr "Sun, Mon, ..., Sat (en_US);"

#: ../../library/datetime.rst:0
msgid "So, Mo, ..., Sa (de_DE)"
msgstr "So, Mo, ..., Sa (de_DE)"

#: ../../library/datetime.rst:2072
msgid "``%A``"
msgstr "``%A``"

#: ../../library/datetime.rst:2072
msgid "Weekday as locale's full name."
msgstr "ロケールの曜日名を表示します。"

#: ../../library/datetime.rst:0
msgid "Sunday, Monday, ..., Saturday (en_US);"
msgstr "Sunday, Monday, ..., Saturday (en_US);"

#: ../../library/datetime.rst:0
msgid "Sonntag, Montag, ..., Samstag (de_DE)"
msgstr "Sonntag, Montag, ..., Samstag (de_DE)"

#: ../../library/datetime.rst:2077
msgid "``%w``"
msgstr "``%w``"

#: ../../library/datetime.rst:2077
msgid "Weekday as a decimal number, where 0 is Sunday and 6 is Saturday."
msgstr ""
"曜日を10進表記した文字列を表示します。0 が日曜日で、6 が土曜日を表します。"

#: ../../library/datetime.rst:2077
msgid "0, 1, ..., 6"
msgstr "0, 1, ..., 6"

#: ../../library/datetime.rst:2081
msgid "``%d``"
msgstr "``%d``"

#: ../../library/datetime.rst:2081
msgid "Day of the month as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した月中の日にち。"

#: ../../library/datetime.rst:2081
msgid "01, 02, ..., 31"
msgstr "01, 02, ..., 31"

#: ../../library/datetime.rst:2081 ../../library/datetime.rst:2094
#: ../../library/datetime.rst:2097 ../../library/datetime.rst:2103
#: ../../library/datetime.rst:2106 ../../library/datetime.rst:2112
#: ../../library/datetime.rst:2130
msgid "\\(9)"
msgstr "\\(9)"

#: ../../library/datetime.rst:2084
msgid "``%b``"
msgstr "``%b``"

#: ../../library/datetime.rst:2084
msgid "Month as locale's abbreviated name."
msgstr "ロケールの月名を短縮形で表示します。"

#: ../../library/datetime.rst:0
msgid "Jan, Feb, ..., Dec (en_US);"
msgstr "Jan, Feb, ..., Dec (en_US);"

#: ../../library/datetime.rst:0
msgid "Jan, Feb, ..., Dez (de_DE)"
msgstr "Jan, Feb, ..., Dez (de_DE)"

#: ../../library/datetime.rst:2089
msgid "``%B``"
msgstr "``%B``"

#: ../../library/datetime.rst:2089
msgid "Month as locale's full name."
msgstr "ロケールの月名を表示します。"

#: ../../library/datetime.rst:0
msgid "January, February, ..., December (en_US);"
msgstr "January, February, ..., December (en_US);"

#: ../../library/datetime.rst:0
msgid "Januar, Februar, ..., Dezember (de_DE)"
msgstr "Januar, Februar, ..., Dezember (de_DE)"

#: ../../library/datetime.rst:2094
msgid "``%m``"
msgstr "``%m``"

#: ../../library/datetime.rst:2094
msgid "Month as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した月。"

#: ../../library/datetime.rst:2094 ../../library/datetime.rst:2106
msgid "01, 02, ..., 12"
msgstr "01, 02, ..., 12"

#: ../../library/datetime.rst:2097
msgid "``%y``"
msgstr "``%y``"

#: ../../library/datetime.rst:2097
msgid "Year without century as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した世紀無しの年。"

#: ../../library/datetime.rst:2097
msgid "00, 01, ..., 99"
msgstr "00, 01, ..., 99"

#: ../../library/datetime.rst:2100
msgid "``%Y``"
msgstr "``%Y``"

#: ../../library/datetime.rst:2100
msgid "Year with century as a decimal number."
msgstr "西暦 (4桁) の 10 進表記を表します。"

#: ../../library/datetime.rst:2100 ../../library/datetime.rst:2174
msgid "0001, 0002, ..., 2013, 2014, ..., 9998, 9999"
msgstr "0001, 0002, ..., 2013, 2014, ..., 9998, 9999"

#: ../../library/datetime.rst:2103
msgid "``%H``"
msgstr "``%H``"

#: ../../library/datetime.rst:2103
msgid "Hour (24-hour clock) as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した時 (24時間表記)。"

#: ../../library/datetime.rst:2103
msgid "00, 01, ..., 23"
msgstr "00, 01, ..., 23"

#: ../../library/datetime.rst:2106
msgid "``%I``"
msgstr "``%I``"

#: ../../library/datetime.rst:2106
msgid "Hour (12-hour clock) as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した時 (12時間表記)。"

#: ../../library/datetime.rst:2109
msgid "``%p``"
msgstr "``%p``"

#: ../../library/datetime.rst:2109
msgid "Locale's equivalent of either AM or PM."
msgstr "ロケールの AM もしくは PM と等価な文字列になります。"

#: ../../library/datetime.rst:0
msgid "AM, PM (en_US);"
msgstr "AM, PM (en_US);"

#: ../../library/datetime.rst:0
msgid "am, pm (de_DE)"
msgstr "am, pm (de_DE)"

#: ../../library/datetime.rst:2109
msgid "\\(1), \\(3)"
msgstr "\\(1), \\(3)"

#: ../../library/datetime.rst:2112
msgid "``%M``"
msgstr "``%M``"

#: ../../library/datetime.rst:2112
msgid "Minute as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した分。"

#: ../../library/datetime.rst:2112 ../../library/datetime.rst:2115
msgid "00, 01, ..., 59"
msgstr "00, 01, ..., 59"

#: ../../library/datetime.rst:2115
msgid "``%S``"
msgstr "``%S``"

#: ../../library/datetime.rst:2115
msgid "Second as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した秒。"

#: ../../library/datetime.rst:2115
msgid "\\(4), \\(9)"
msgstr "\\(4), \\(9)"

#: ../../library/datetime.rst:2118
msgid "``%f``"
msgstr "``%f``"

#: ../../library/datetime.rst:2118
msgid "Microsecond as a decimal number, zero-padded on the left."
msgstr "10進数で表記したマイクロ秒 (左側から0埋めされます)。"

#: ../../library/datetime.rst:2118
msgid "000000, 000001, ..., 999999"
msgstr "000000, 000001, ..., 999999"

#: ../../library/datetime.rst:2118
msgid "\\(5)"
msgstr "\\(5)"

#: ../../library/datetime.rst:2122 ../../library/datetime.rst:2246
msgid "``%z``"
msgstr "``%z``"

#: ../../library/datetime.rst:2122
msgid ""
"UTC offset in the form ±HHMM[SS[.ffffff]] (empty string if the object is "
"naive)."
msgstr ""

#: ../../library/datetime.rst:2122
msgid "(empty), +0000, -0400, +1030, +063415, -030712.345216"
msgstr "(空文字列), +0000, -0400, +1030, +063415, -030712.345216"

#: ../../library/datetime.rst:2122
msgid "\\(6)"
msgstr "\\(6)"

#: ../../library/datetime.rst:2127 ../../library/datetime.rst:2261
msgid "``%Z``"
msgstr "``%Z``"

#: ../../library/datetime.rst:2127
msgid "Time zone name (empty string if the object is naive)."
msgstr "タイムゾーンの名前を表示します (オブジェクトがnaiveであれば空文字列)。"

#: ../../library/datetime.rst:2127
msgid "(empty), UTC, EST, CST"
msgstr "(空文字列), UTC, EST, CST"

#: ../../library/datetime.rst:2130
msgid "``%j``"
msgstr "``%j``"

#: ../../library/datetime.rst:2130
msgid "Day of the year as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した年中の日にち。"

#: ../../library/datetime.rst:2130
msgid "001, 002, ..., 366"
msgstr "001, 002, ..., 366"

#: ../../library/datetime.rst:2133
msgid "``%U``"
msgstr "``%U``"

#: ../../library/datetime.rst:2133
msgid ""
"Week number of the year (Sunday as the first day of the week) as a zero "
"padded decimal number. All days in a new year preceding the first Sunday are "
"considered to be in week 0."
msgstr ""
"0埋めした10進数で表記した年中の週番号 (週の始まりは日曜日とする)。新年の最初"
"の日曜日に先立つ日は 0週に属するとします。"

#: ../../library/datetime.rst:2133 ../../library/datetime.rst:2141
msgid "00, 01, ..., 53"
msgstr "00, 01, ..., 53"

#: ../../library/datetime.rst:2133 ../../library/datetime.rst:2141
msgid "\\(7), \\(9)"
msgstr "\\(7), \\(9)"

#: ../../library/datetime.rst:2141
msgid "``%W``"
msgstr "``%W``"

#: ../../library/datetime.rst:2141
msgid ""
"Week number of the year (Monday as the first day of the week) as a decimal "
"number. All days in a new year preceding the first Monday are considered to "
"be in week 0."
msgstr ""
"0埋めした10進数で表記した年中の週番号 (週の始まりは月曜日とする)。新年の最初"
"の月曜日に先立つ日は 0週に属するとします。"

#: ../../library/datetime.rst:2149
msgid "``%c``"
msgstr "``%c``"

#: ../../library/datetime.rst:2149
msgid "Locale's appropriate date and time representation."
msgstr "ロケールの日時を適切な形式で表します。"

#: ../../library/datetime.rst:0
msgid "Tue Aug 16 21:30:00 1988 (en_US);"
msgstr "Tue Aug 16 21:30:00 1988 (en_US);"

#: ../../library/datetime.rst:0
msgid "Di 16 Aug 21:30:00 1988 (de_DE)"
msgstr "Di 16 Aug 21:30:00 1988 (de_DE)"

#: ../../library/datetime.rst:2154
msgid "``%x``"
msgstr "``%x``"

#: ../../library/datetime.rst:2154
msgid "Locale's appropriate date representation."
msgstr "ロケールの日付を適切な形式で表します。"

#: ../../library/datetime.rst:0
msgid "08/16/88 (None);"
msgstr "08/16/88 (None);"

#: ../../library/datetime.rst:0
msgid "08/16/1988 (en_US);"
msgstr "08/16/1988 (en_US);"

#: ../../library/datetime.rst:0
msgid "16.08.1988 (de_DE)"
msgstr "16.08.1988 (de_DE)"

#: ../../library/datetime.rst:2158
msgid "``%X``"
msgstr "``%X``"

#: ../../library/datetime.rst:2158
msgid "Locale's appropriate time representation."
msgstr "ロケールの時間を適切な形式で表します。"

#: ../../library/datetime.rst:0
msgid "21:30:00 (en_US);"
msgstr "21:30:00 (en_US);"

#: ../../library/datetime.rst:0
msgid "21:30:00 (de_DE)"
msgstr "21:30:00 (de_DE)"

#: ../../library/datetime.rst:2161
msgid "``%%``"
msgstr "``%%``"

#: ../../library/datetime.rst:2161
msgid "A literal ``'%'`` character."
msgstr "文字 ``'%'`` を表します。"

#: ../../library/datetime.rst:2161
msgid "%"
msgstr "%"

#: ../../library/datetime.rst:2164
msgid ""
"Several additional directives not required by the C89 standard are included "
"for convenience. These parameters all correspond to ISO 8601 date values. "
"These may not be available on all platforms when used with the :meth:"
"`strftime` method. The ISO 8601 year and ISO 8601 week directives are not "
"interchangeable with the year and week number directives above. Calling :"
"meth:`strptime` with incomplete or ambiguous ISO 8601 directives will raise "
"a :exc:`ValueError`."
msgstr ""
"C89規格により要求されない幾つかの追加のコードが便宜上含まれています。これらの"
"パラメータはすべてISO 8601の日付値に対応しています。これらが :meth:"
"`strftime` メソッドと一緒に使用された場合、すべてのプラットフォームで利用でき"
"るわけではありません。 ISO 8601 year ディレクティブおよびISO 8601 week ディレ"
"クティブは、上記のyear および week number ディレクティブと互換性がありませ"
"ん。不完全またはあいまいなISO 8601ディレクティブで :meth:`strptime` を呼び出"
"すと、 :exc:`ValueError` が送出されます。"

#: ../../library/datetime.rst:2174
msgid "``%G``"
msgstr "``%G``"

#: ../../library/datetime.rst:2174
msgid ""
"ISO 8601 year with century representing the year that contains the greater "
"part of the ISO week (``%V``)."
msgstr "ISO week(``%V``)の内過半数を含む西暦表記の ISO 8601 year です。"

#: ../../library/datetime.rst:2174
msgid "\\(8)"
msgstr "\\(8)"

#: ../../library/datetime.rst:2179
msgid "``%u``"
msgstr "``%u``"

#: ../../library/datetime.rst:2179
msgid "ISO 8601 weekday as a decimal number where 1 is Monday."
msgstr "1 を月曜日を表す 10進数表記の ISO 8601 weekday です。"

#: ../../library/datetime.rst:2179
msgid "1, 2, ..., 7"
msgstr "1, 2, ..., 7"

#: ../../library/datetime.rst:2182
msgid "``%V``"
msgstr "``%V``"

#: ../../library/datetime.rst:2182
msgid ""
"ISO 8601 week as a decimal number with Monday as the first day of the week. "
"Week 01 is the week containing Jan 4."
msgstr ""
"週で最初の月曜日を始めとする ISO 8601 week です。Week 01 は 1月4日を含みま"
"す。"

#: ../../library/datetime.rst:2182
msgid "01, 02, ..., 53"
msgstr "01, 02, ..., 53"

#: ../../library/datetime.rst:2182
msgid "\\(8), \\(9)"
msgstr "\\(8), \\(9)"

#: ../../library/datetime.rst:2189
msgid "``%G``, ``%u`` and ``%V`` were added."
msgstr "``%G``, ``%u`` および ``%V`` が追加されました。"

#: ../../library/datetime.rst:2195
msgid ""
"Because the format depends on the current locale, care should be taken when "
"making assumptions about the output value. Field orderings will vary (for "
"example, \"month/day/year\" versus \"day/month/year\"), and the output may "
"contain Unicode characters encoded using the locale's default encoding (for "
"example, if the current locale is ``ja_JP``, the default encoding could be "
"any one of ``eucJP``, ``SJIS``, or ``utf-8``; use :meth:`locale.getlocale` "
"to determine the current locale's encoding)."
msgstr ""
"フォーマットは現在のロケールに依存するので、出力値について何か仮定するときは"
"注意すべきです。フィールドの順序は様々で (例えば、\"月/日/年\" と \"日/月/年"
"\") 、出力はロケールのデフォルトエンコーディングでエンコードされた Unicode 文"
"字列を含むかもしれません (例えば、現在のロケールが ``ja_JP`` だった場合、デ"
"フォルトエンコーディングは ``eucJP`` 、 ``SJIS`` 、 ``utf-8`` のいずれかにな"
"りえます。 :meth:`locale.getlocale` を使って現在のロケールのエンコーディング"
"を確認します) 。"

#: ../../library/datetime.rst:2204
msgid ""
"The :meth:`strptime` method can parse years in the full [1, 9999] range, but "
"years < 1000 must be zero-filled to 4-digit width."
msgstr ""
":meth:`strptime` メソッドは [1, 9999] の範囲の年数全てを構文解析できますが、 "
"year < 1000 の範囲の年数は 0 埋めされた 4 桁の数字でなければなりません。"

#: ../../library/datetime.rst:2207
msgid ""
"In previous versions, :meth:`strftime` method was restricted to years >= "
"1900."
msgstr ""
"以前のバージョンでは、 :meth:`strftime` メソッドは years >= 1900 の範囲の年数"
"しか扱えませんでした。"

#: ../../library/datetime.rst:2211
msgid ""
"In version 3.2, :meth:`strftime` method was restricted to years >= 1000."
msgstr ""
"バージョン 3.2 では、 :meth:`strftime` メソッドは years >= 1000 の範囲の年数"
"しか扱えませんでした。"

#: ../../library/datetime.rst:2216
msgid ""
"When used with the :meth:`strptime` method, the ``%p`` directive only "
"affects the output hour field if the ``%I`` directive is used to parse the "
"hour."
msgstr ""
":meth:`strptime` メソッドと共に使われた場合、 ``%p`` 指定子は出力の時間フィー"
"ルドのみに影響し、 ``%I`` 指定子が使われたかのように振る舞います。"

#: ../../library/datetime.rst:2220
msgid ""
"Unlike the :mod:`time` module, the :mod:`datetime` module does not support "
"leap seconds."
msgstr ""
":mod:`time` モジュールと違い、 :mod:`datetime` モジュールはうるう秒をサポート"
"していません。"

#: ../../library/datetime.rst:2224
msgid ""
"When used with the :meth:`strptime` method, the ``%f`` directive accepts "
"from one to six digits and zero pads on the right.  ``%f`` is an extension "
"to the set of format characters in the C standard (but implemented "
"separately in datetime objects, and therefore always available)."
msgstr ""
":meth:`strptime` メソッドと共に使われた場合、 ``%f`` 指定子は 1 桁から 6 桁の"
"数字を受け付け、右側から 0 埋めされます。 ``%f`` は C 標準規格の書式セットに"
"拡張されます。"

#: ../../library/datetime.rst:2231
msgid ""
"For a naive object, the ``%z`` and ``%Z`` format codes are replaced by empty "
"strings."
msgstr ""
"naive オブジェクトでは、書式化コード ``%z`` および ``%Z`` は空文字列に置き換"
"えられます。"

#: ../../library/datetime.rst:2234
msgid "For an aware object:"
msgstr "aware オブジェクトでは以下のようになります:"

#: ../../library/datetime.rst:2237
msgid ""
":meth:`utcoffset` is transformed into a string of the form ±HHMM[SS[."
"ffffff]], where HH is a 2-digit string giving the number of UTC offset "
"hours, MM is a 2-digit string giving the number of UTC offset minutes, SS is "
"a 2-digit string giving the number of UTC offset seconds and ffffff is a 6-"
"digit string giving the number of UTC offset microseconds.  The ffffff part "
"is omitted when the offset is a whole number of seconds and both the ffffff "
"and the SS part is omitted when the offset is a whole number of minutes.  "
"For example, if :meth:`utcoffset` returns ``timedelta(hours=-3, "
"minutes=-30)``, ``%z`` is replaced with the string ``'-0330'``."
msgstr ""

#: ../../library/datetime.rst:2251
msgid ""
"When the ``%z`` directive is provided to the  :meth:`strptime` method, the "
"UTC offsets can have a colon as a separator between hours, minutes and "
"seconds. For example, ``'+01:00:00'`` will be parsed as an offset of one "
"hour. In addition, providing ``'Z'`` is identical to ``'+00:00'``."
msgstr ""
"``%z`` 指定子が :meth:`strptime` メソッドに渡されたときは、時分秒のセパレータ"
"としてコロンが UTC オフセットで使えます。\n"
"例えば、 ``'+01:00:00'`` は 1 時間のオフセットだと構文解析されます。\n"
"加えて、 ``'Z'`` を渡すことは ``'+00:00'`` と同等です。"

#: ../../library/datetime.rst:2259
msgid ""
"If :meth:`tzname` returns ``None``, ``%Z`` is replaced by an empty string.  "
"Otherwise ``%Z`` is replaced by the returned value, which must be a string."
msgstr ""
":meth:`tzname` が ``None`` を返した場合、 ``%Z`` は空文字列に置き換わります。"
"そうでない場合、 ``%Z`` は返された値に置き換わりますが、 これは文字列でなけれ"
"ばなりません。"

#: ../../library/datetime.rst:2263
msgid ""
"When the ``%z`` directive is provided to the :meth:`strptime` method, an "
"aware :class:`.datetime` object will be produced.  The ``tzinfo`` of the "
"result will be set to a :class:`timezone` instance."
msgstr ""
"``%z`` 指定子が :meth:`strptime` メソッドに与えられた場合、 aware な :class:"
"`.datetime` オブジェクトが作成されます。返り値の ``tzinfo`` は :class:"
"`timezone` インスタンスになっています。"

#: ../../library/datetime.rst:2269
msgid ""
"When used with the :meth:`strptime` method, ``%U`` and ``%W`` are only used "
"in calculations when the day of the week and the calendar year (``%Y``) are "
"specified."
msgstr ""
":meth:`strptime` メソッドと共に使われた場合、 ``%U`` と ``%W`` 指定子は、曜日"
"と年(``%Y``)が指定された場合の計算でのみ使われます。"

#: ../../library/datetime.rst:2274
msgid ""
"Similar to ``%U`` and ``%W``, ``%V`` is only used in calculations when the "
"day of the week and the ISO year (``%G``) are specified in a :meth:"
"`strptime` format string. Also note that ``%G`` and ``%Y`` are not "
"interchangeable."
msgstr ""
"``%U`` と ``%W`` と同様です。 ``%V`` は曜日と ISO year (``%G``)が :meth:"
"`strptime` 書式内で指定された場合に計算でのみ使われます。 ``%G`` と ``%Y`` は"
"互いに完全な互換性を持たないことにも注意してください。"

#: ../../library/datetime.rst:2280
msgid ""
"When used with the :meth:`strptime` method, the leading zero is optional "
"for  formats ``%d``, ``%m``, ``%H``, ``%I``, ``%M``, ``%S``, ``%J``, ``%U``, "
"``%W``, and ``%V``. Format ``%y`` does require a leading zero."
msgstr ""
":meth:`strptime` メソッドと共に使われたときは、書式 ``%d``, ``%m``, ``%H``, "
"``%I``, ``%M``, ``%S``, ``%J``, ``%U``, ``%W``, ``%V`` の後ろに続ける 0 は任"
"意です。\n"
"書式 ``%y`` では後ろに続ける 0 は必須です。"

#: ../../library/datetime.rst:2285
msgid "Footnotes"
msgstr "脚注"

#: ../../library/datetime.rst:2286
msgid "If, that is, we ignore the effects of Relativity"
msgstr "もし相対性理論の効果を無視するならば、ですが"

#: ../../library/datetime.rst:2287
msgid ""
"Passing ``datetime.strptime('Feb 29', '%b %d')`` will fail since ``1900`` is "
"not a leap year."
msgstr ""
"``1900`` は閏年ではないので ``datetime.strptime('Feb 29', '%b %d')`` を渡すと"
"失敗します。"
