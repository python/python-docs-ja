# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017-2018
# 秘湯 <xwhhsprings@gmail.com>, 2016
# Inada Naoki <songofacandy@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-12-22 12:12+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/datetime.rst:2
msgid ":mod:`datetime` --- Basic date and time types"
msgstr ":mod:`datetime` --- 基本的な日付型および時間型"

#: ../../library/datetime.rst:14
msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and times "
"in both simple and complex ways.  While date and time arithmetic is "
"supported, the focus of the implementation is on efficient attribute "
"extraction for output formatting and manipulation. For related "
"functionality, see also the :mod:`time` and :mod:`calendar` modules."
msgstr ""
":mod:`datetime` モジュールでは、日付や時間データを簡単な方法と複雑な方法の両"
"方で操作するためのクラスを提供しています。日付や時刻を対象にした四則演算がサ"
"ポートされている一方で、このモジュールの実装では出力の書式化や操作を目的とし"
"た属性の効率的な取り出しに焦点を絞っています。機能については、 :mod:`time` お"
"よび :mod:`calendar` も参照下さい。"

#: ../../library/datetime.rst:20
msgid "There are two kinds of date and time objects: \"naive\" and \"aware\"."
msgstr "\"naive\" と \"aware\" の2種類の日付と時刻オブジェクトがあります。"

#: ../../library/datetime.rst:22
msgid ""
"An aware object has sufficient knowledge of applicable algorithmic and "
"political time adjustments, such as time zone and daylight saving time "
"information, to locate itself relative to other aware objects.  An aware "
"object is used to represent a specific moment in time that is not open to "
"interpretation [#]_."
msgstr ""
"aware オブジェクトは他の aware オブジェクトとの相対関係を把握出来るように、タ"
"イムゾーンや夏時間の情報のような、アルゴリズム的で政治的な適用可能な時間調節"
"に関する知識を持っています。aware オブジェクトは解釈の余地のない特定の実時刻"
"を表現するのに利用されます [#]_。"

#: ../../library/datetime.rst:28
msgid ""
"A naive object does not contain enough information to unambiguously locate "
"itself relative to other date/time objects.  Whether a naive object "
"represents Coordinated Universal Time (UTC), local time, or time in some "
"other timezone is purely up to the program, just like it's up to the program "
"whether a particular number represents metres, miles, or mass.  Naive "
"objects are easy to understand and to work with, at the cost of ignoring "
"some aspects of reality."
msgstr ""
"naive オブジェクトには他の日付時刻オブジェクトとの相対関係を把握するのに足る"
"情報が含まれません。あるプログラム内の数字がメートルを表わしているのか、マイ"
"ルなのか、それとも質量なのかがプログラムによって異なるように、naive オブジェ"
"クトが協定世界時 (UTC) なのか、現地時間なのか、それとも他のタイムゾーンなのか"
"はそのプログラムに依存します。Naive オブジェクトはいくつかの現実的な側面を無"
"視してしまうというコストを無視すれば、簡単に理解でき、うまく利用することがで"
"きます。"

#: ../../library/datetime.rst:35
msgid ""
"For applications requiring aware objects, :class:`.datetime` and :class:`."
"time` objects have an optional time zone information attribute, :attr:`!"
"tzinfo`, that can be set to an instance of a subclass of the abstract :class:"
"`tzinfo` class. These :class:`tzinfo` objects capture information about the "
"offset from UTC time, the time zone name, and whether Daylight Saving Time "
"is in effect.  Note that no concrete :class:`tzinfo` classes are supplied by "
"the :mod:`datetime` module.  Supporting timezones at whatever level of "
"detail is required is up to the application.  The rules for time adjustment "
"across the world are more political than rational, and there is no standard "
"suitable for every application."
msgstr ""
"aware オブジェクトを必要とするアプリケーションのために、 :class:`.datetime` "
"と :class:`.time` オブジェクトは追加のタイムゾーン情報の属性 :attr:`!tzinfo` "
"を持ちます。 :attr:`tzinfo` には抽象クラス :class:`tzinfo` のサブクラスのイン"
"スタンスを設定することができます。これらの :class:`tzinfo` オブジェクトは "
"UTC 時間からのオフセットやタイムゾーンの名前、夏時間が実施されるかの情報を保"
"持しています。 :mod:`datetime` モジュールには :class:`tzinfo` の具象クラスは"
"提供されていないので注意してください。より深く詳細までタイムゾーンをサポート"
"するかはアプリケーションに依存します。世界中の時刻の調整を決めるルールは合理"
"的というよりかは政治的なもので、頻繁に変わり、都合のよい基準というものはあり"
"ません。"

#: ../../library/datetime.rst:46
msgid "The :mod:`datetime` module exports the following constants:"
msgstr ":mod:`datetime` モジュールでは以下の定数を公開しています:"

#: ../../library/datetime.rst:50
msgid ""
"The smallest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MINYEAR` is ``1``."
msgstr ""
":class:`date` や :class:`.datetime` オブジェクトで許されている、年を表現する"
"最小の数字です。 :const:`MINYEAR` は ``1`` です。"

#: ../../library/datetime.rst:56
msgid ""
"The largest year number allowed in a :class:`date` or :class:`.datetime` "
"object. :const:`MAXYEAR` is ``9999``."
msgstr ""
":class:`date` や :class:`.datetime` オブジェクトで許されている、年を表現する"
"最大の数字です。 :const:`MAXYEAR` は ``9999`` です。"

#: ../../library/datetime.rst:63
msgid "Module :mod:`calendar`"
msgstr ":mod:`calendar` モジュール"

#: ../../library/datetime.rst:63
msgid "General calendar related functions."
msgstr "汎用のカレンダー関連関数。"

#: ../../library/datetime.rst:65
msgid "Module :mod:`time`"
msgstr ":mod:`time` モジュール"

#: ../../library/datetime.rst:66
msgid "Time access and conversions."
msgstr "時刻へのアクセスと変換。"

#: ../../library/datetime.rst:70
msgid "Available Types"
msgstr "利用可能なデータ型"

#: ../../library/datetime.rst:75
msgid ""
"An idealized naive date, assuming the current Gregorian calendar always was, "
"and always will be, in effect. Attributes: :attr:`year`, :attr:`month`, and :"
"attr:`day`."
msgstr ""
"理想化された naive な日付表現で、実質的には、これまでもこれからも現在のグレゴ"
"リオ暦 (Gregorian calender) であると仮定しています。属性: :attr:`year`, :"
"attr:`month`,および :attr:`day` 。"

#: ../../library/datetime.rst:83
msgid ""
"An idealized time, independent of any particular day, assuming that every "
"day has exactly 24\\*60\\*60 seconds (there is no notion of \"leap seconds\" "
"here). Attributes: :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, and :attr:`.tzinfo`."
msgstr ""
"理想的な時刻で、特定の日から独立しており、毎日が厳密に 24\\*60\\*60 秒である"
"と仮定しています (\"うるう秒: leap seconds\" の概念はありません)。\n"
"属性は :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:`microsecond`, お"
"よび :attr:`tzinfo` です。"

#: ../../library/datetime.rst:92
msgid ""
"A combination of a date and a time. Attributes: :attr:`year`, :attr:"
"`month`, :attr:`day`, :attr:`hour`, :attr:`minute`, :attr:`second`, :attr:"
"`microsecond`, and :attr:`.tzinfo`."
msgstr ""
"日付と時刻を組み合わせたものです。\n"
"属性は :attr:`year`, :attr:`month`, :attr:`day`, :attr:`hour`, :attr:"
"`minute`, :attr:`second`, :attr:`microsecond`, および :attr:`tzinfo` です。"

#: ../../library/datetime.rst:100
msgid ""
"A duration expressing the difference between two :class:`date`, :class:`."
"time`, or :class:`.datetime` instances to microsecond resolution."
msgstr ""
":class:`date`, :class:`.time`,あるいは :class:`.datetime` クラスの二つのイン"
"スタンス間の時間差をマイクロ秒精度で表す経過時間値です。"

#: ../../library/datetime.rst:107
msgid ""
"An abstract base class for time zone information objects.  These are used by "
"the :class:`.datetime` and :class:`.time` classes to provide a customizable "
"notion of time adjustment (for example, to account for time zone and/or "
"daylight saving time)."
msgstr ""
"タイムゾーン情報オブジェクトの抽象基底クラスです。 :class:`.datetime` およ"
"び :class:`.time` クラスで用いられ、カスタマイズ可能な時刻修正の概念 (たとえ"
"ばタイムゾーンや夏時間の計算）を提供します。"

#: ../../library/datetime.rst:112
msgid "Objects of these types are immutable."
msgstr "これらの型のオブジェクトは変更不可能 (immutable) です。"

#: ../../library/datetime.rst:114
msgid "Objects of the :class:`date` type are always naive."
msgstr ":class:`date` 型のオブジェクトは常に naive です。"

#: ../../library/datetime.rst:116
msgid ""
"An object of type :class:`.time` or :class:`.datetime` may be naive or "
"aware. A :class:`.datetime` object *d* is aware if ``d.tzinfo`` is not "
"``None`` and ``d.tzinfo.utcoffset(d)`` does not return ``None``.  If ``d."
"tzinfo`` is ``None``, or if ``d.tzinfo`` is not ``None`` but ``d.tzinfo."
"utcoffset(d)`` returns ``None``, *d* is naive.  A :class:`.time` object *t* "
"is aware if ``t.tzinfo`` is not ``None`` and ``t.tzinfo.utcoffset(None)`` "
"does not return ``None``.  Otherwise, *t* is naive."
msgstr ""
":class:`.time` や :class:`.datetime` 型のオブジェクトは naive かaware のどち"
"らかになります。 :class:`.datetime` オブジェクト *d* は ``d.tzinfo`` が "
"``None`` でなく ``d.tzinfo.utcoffset(d)`` が ``None`` を返さなければ、aware "
"になります。``d.tzinfo`` が ``None`` であるか ``d.tzinfo`` が ``None`` でない"
"が ``d.tzinfo.utcoffset(d)`` が ``None`` を返すと *d* は naive になります。 :"
"class:`.time` のオブジェクト *t* は ``t.tzinfo`` が ``None`` でなく ``t."
"tzinfo.utcoffset(None)`` が ``None`` を返さないと aware になって、それ以外で"
"は *t* は naive になります。"

#: ../../library/datetime.rst:124
msgid ""
"The distinction between naive and aware doesn't apply to :class:`timedelta` "
"objects."
msgstr ""
"naive なオブジェクトと aware なオブジェクトの区別は :class:`timedelta` オブ"
"ジェクトにはあてはまりません。"

#: ../../library/datetime.rst:127
msgid "Subclass relationships::"
msgstr "サブクラスの関係は以下のようになります::"

#: ../../library/datetime.rst:140
msgid ":class:`timedelta` Objects"
msgstr ":class:`timedelta` オブジェクト"

#: ../../library/datetime.rst:142
msgid ""
"A :class:`timedelta` object represents a duration, the difference between "
"two dates or times."
msgstr ""
":class:`timedelta` オブジェクトは経過時間、すなわち二つの日付や時刻間の差を表"
"します。"

#: ../../library/datetime.rst:147
msgid ""
"All arguments are optional and default to ``0``.  Arguments may be ints, "
"longs, or floats, and may be positive or negative."
msgstr ""
"全ての引数がオプションで、デフォルト値は ``0`` です。引数は整数、長整数、浮動"
"小数点数にすることができ、正でも負でもかまいません。"

#: ../../library/datetime.rst:150
msgid ""
"Only *days*, *seconds* and *microseconds* are stored internally.  Arguments "
"are converted to those units:"
msgstr ""
"*days*, *seconds*, *microseconds* だけが内部的に保持されます. 引数は以下のよ"
"うにして変換されます:"

#: ../../library/datetime.rst:153
msgid "A millisecond is converted to 1000 microseconds."
msgstr "1 ミリ秒は 1000 マイクロ秒に変換されます。"

#: ../../library/datetime.rst:154
msgid "A minute is converted to 60 seconds."
msgstr "1 分は 60 秒に変換されます。"

#: ../../library/datetime.rst:155
msgid "An hour is converted to 3600 seconds."
msgstr "1 時間は 3600 秒に変換されます。"

#: ../../library/datetime.rst:156
msgid "A week is converted to 7 days."
msgstr "1 週間は 7 日に変換されます。"

#: ../../library/datetime.rst:158
msgid ""
"and days, seconds and microseconds are then normalized so that the "
"representation is unique, with"
msgstr ""
"さらに、値が一意に表されるように days, seconds, microseconds が以下のように正"
"規化されます"

#: ../../library/datetime.rst:161
msgid "``0 <= microseconds < 1000000``"
msgstr "``0 <= microseconds < 1000000``"

#: ../../library/datetime.rst:162
msgid "``0 <= seconds < 3600*24`` (the number of seconds in one day)"
msgstr "``0 <= seconds < 3600*24`` (一日中の秒数)"

#: ../../library/datetime.rst:163
msgid "``-999999999 <= days <= 999999999``"
msgstr "``-999999999 <= days <= 999999999``"

#: ../../library/datetime.rst:165
msgid ""
"If any argument is a float and there are fractional microseconds, the "
"fractional microseconds left over from all arguments are combined and their "
"sum is rounded to the nearest microsecond.  If no argument is a float, the "
"conversion and normalization processes are exact (no information is lost)."
msgstr ""
"引数のいずれかが浮動小数点であり、小数のマイクロ秒が存在する場合、小数のマイ"
"クロ秒は全ての引数から一度取り置かれ、それらの和は最も近いマイクロ秒に丸めら"
"れます。浮動小数点の引数がない場合、値の変換と正規化の過程は厳密な (失われる"
"情報がない) ものとなります。"

#: ../../library/datetime.rst:170
msgid ""
"If the normalized value of days lies outside the indicated range, :exc:"
"`OverflowError` is raised."
msgstr ""
"日の値を正規化した結果、指定された範囲の外側になった場合には、 :exc:"
"`OverflowError` が送出されます。"

#: ../../library/datetime.rst:173
msgid ""
"Note that normalization of negative values may be surprising at first. For "
"example,"
msgstr "負の値を正規化すると、一見混乱するような値になります。例えば、"

#: ../../library/datetime.rst:182
msgid "Class attributes are:"
msgstr "クラス属性を以下に示します:"

#: ../../library/datetime.rst:186
msgid "The most negative :class:`timedelta` object, ``timedelta(-999999999)``."
msgstr ""
"最小の値を表す :class:`timedelta` オブジェクトで、 ``timedelta(-999999999)`` "
"です。"

#: ../../library/datetime.rst:191
msgid ""
"The most positive :class:`timedelta` object, ``timedelta(days=999999999, "
"hours=23, minutes=59, seconds=59, microseconds=999999)``."
msgstr ""
"最大の値を表す :class:`timedelta` オブジェクトで、 "
"``timedelta(days=999999999, hours=23, minutes=59, seconds=59, "
"microseconds=999999)`` です。"

#: ../../library/datetime.rst:197
msgid ""
"The smallest possible difference between non-equal :class:`timedelta` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""
":class:`timedelta` オブジェクトが等しくならない最小の時間差で、 "
"``timedelta(microseconds=1)`` です。"

#: ../../library/datetime.rst:200
msgid ""
"Note that, because of normalization, ``timedelta.max`` > ``-timedelta.min``. "
"``-timedelta.max`` is not representable as a :class:`timedelta` object."
msgstr ""
"正規化のために、 ``timedelta.max`` > ``-timedelta.min`` となるので注意してく"
"ださい。 ``-timedelta.max`` は :class:`timedelta` オブジェクトとして表現する"
"ことができません。"

#: ../../library/datetime.rst:203 ../../library/datetime.rst:406
#: ../../library/datetime.rst:761 ../../library/datetime.rst:1213
msgid "Instance attributes (read-only):"
msgstr "インスタンスの属性 (読み込みのみ):"

#: ../../library/datetime.rst:206
msgid "Attribute"
msgstr "属性"

#: ../../library/datetime.rst:206
msgid "Value"
msgstr "``値``"

#: ../../library/datetime.rst:208
msgid "``days``"
msgstr "``days``"

#: ../../library/datetime.rst:208
msgid "Between -999999999 and 999999999 inclusive"
msgstr "両端値を含む -999999999 から 999999999 の間"

#: ../../library/datetime.rst:210
msgid "``seconds``"
msgstr "``seconds``"

#: ../../library/datetime.rst:210
msgid "Between 0 and 86399 inclusive"
msgstr "両端値を含む 0 から 86399 の間"

#: ../../library/datetime.rst:212
msgid "``microseconds``"
msgstr "``microseconds``"

#: ../../library/datetime.rst:212
msgid "Between 0 and 999999 inclusive"
msgstr "両端値を含む 0 から 999999 の間"

#: ../../library/datetime.rst:215 ../../library/datetime.rst:423
#: ../../library/datetime.rst:804 ../../library/datetime.rst:1241
msgid "Supported operations:"
msgstr "サポートされている操作を以下に示します:"

#: ../../library/datetime.rst:220 ../../library/datetime.rst:426
#: ../../library/datetime.rst:807
msgid "Operation"
msgstr "演算"

#: ../../library/datetime.rst:220 ../../library/datetime.rst:426
#: ../../library/datetime.rst:807
msgid "Result"
msgstr "結果"

#: ../../library/datetime.rst:222
msgid "``t1 = t2 + t3``"
msgstr "``t1 = t2 + t3``"

#: ../../library/datetime.rst:222
msgid ""
"Sum of *t2* and *t3*. Afterwards *t1*-*t2* == *t3* and *t1*-*t3* == *t2* are "
"true. (1)"
msgstr ""
"*t2* と *t3* の和。演算後、*t1*-*t2* == *t3* および *t1*-*t3* == *t2* は真に"
"なります。(1)"

#: ../../library/datetime.rst:225
msgid "``t1 = t2 - t3``"
msgstr "``t1 = t2 - t3``"

#: ../../library/datetime.rst:225
msgid ""
"Difference of *t2* and *t3*. Afterwards *t1* == *t2* - *t3* and *t2* == *t1* "
"+ *t3* are true. (1)"
msgstr ""
"*t2* と *t3* の差。演算後、*t1* == *t2* - *t3* および *t2* == *t1* + *t3* は"
"真になります。(1)"

#: ../../library/datetime.rst:229
msgid "``t1 = t2 * i or t1 = i * t2``"
msgstr "``t1 = t2 * i or t1 = i * t2``"

#: ../../library/datetime.rst:229
msgid ""
"Delta multiplied by an integer or long. Afterwards *t1* // i == *t2* is "
"true, provided ``i != 0``."
msgstr ""
"時間差と(長)整数の積。演算後、*t1* // i == *t2* は ``i != 0`` であれば真とな"
"ります。"

#: ../../library/datetime.rst:233
msgid "In general, *t1* \\* i == *t1* \\* (i-1) + *t1* is true. (1)"
msgstr "一般的に、*t1* \\* i == *t1* \\* (i-1) + *t1* は真となります。(1)"

#: ../../library/datetime.rst:236
msgid "``t1 = t2 // i``"
msgstr "``t1 = t2 // i``"

#: ../../library/datetime.rst:236
msgid "The floor is computed and the remainder (if any) is thrown away. (3)"
msgstr "floor が計算され、余りは (もしあれば) 捨てられます。(3)"

#: ../../library/datetime.rst:239
msgid "``+t1``"
msgstr "``+t1``"

#: ../../library/datetime.rst:239
msgid "Returns a :class:`timedelta` object with the same value. (2)"
msgstr "同じ値を持つ :class:`timedelta` オブジェクトを返します。(2)"

#: ../../library/datetime.rst:242
msgid "``-t1``"
msgstr "``-t1``"

#: ../../library/datetime.rst:242
msgid ""
"equivalent to :class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, -*t1."
"microseconds*), and to *t1*\\* -1. (1)(4)"
msgstr ""
":class:`timedelta`\\ (-*t1.days*, -*t1.seconds*, -*t1.microseconds*)、および "
"*t1*\\* -1 と同じです。 (1)(4)"

#: ../../library/datetime.rst:246
msgid "``abs(t)``"
msgstr "``abs(t)``"

#: ../../library/datetime.rst:246
msgid ""
"equivalent to +\\ *t* when ``t.days >= 0``, and to -*t* when ``t.days < 0``. "
"(2)"
msgstr ""
"``t.days >= 0`` のときには +\\ *t*, ``t.days < 0`` のときには -*t* となりま"
"す。(2)"

#: ../../library/datetime.rst:249
msgid "``str(t)``"
msgstr "``str(t)``"

#: ../../library/datetime.rst:249
msgid ""
"Returns a string in the form ``[D day[s], ][H]H:MM:SS[.UUUUUU]``, where D is "
"negative for negative ``t``. (5)"
msgstr ""
"``[D day[s], ][H]H:MM:SS[.UUUUUU]`` という形式の文字列を返します。``t`` が負"
"の値の場合は ``D`` は負の値となります。(5)"

#: ../../library/datetime.rst:253
msgid "``repr(t)``"
msgstr "``repr(t)``"

#: ../../library/datetime.rst:253
msgid ""
"Returns a string in the form ``datetime.timedelta(D[, S[, U]])``, where D is "
"negative for negative ``t``. (5)"
msgstr ""
"``datetime.timedelta(D[, S[, U]])`` という形式の文字列を返します。``t`` が負"
"の場合は D は負の値となります。(5)"

#: ../../library/datetime.rst:258 ../../library/datetime.rst:440
#: ../../library/datetime.rst:1727
msgid "Notes:"
msgstr "注釈:"

#: ../../library/datetime.rst:261
msgid "This is exact, but may overflow."
msgstr "この演算は正確ですが、オーバフローするかもしれません。"

#: ../../library/datetime.rst:264
msgid "This is exact, and cannot overflow."
msgstr "この演算は正確であり、オーバフローしないはずです。"

#: ../../library/datetime.rst:267
msgid "Division by 0 raises :exc:`ZeroDivisionError`."
msgstr "0 による除算は :exc:`ZeroDivisionError` を送出します。"

#: ../../library/datetime.rst:270
msgid "-*timedelta.max* is not representable as a :class:`timedelta` object."
msgstr ""
"-*timedelta.max* は :class:`timedelta` オブジェクトで表現することができませ"
"ん。"

#: ../../library/datetime.rst:273
msgid ""
"String representations of :class:`timedelta` objects are normalized "
"similarly to their internal representation.  This leads to somewhat unusual "
"results for negative timedeltas.  For example:"
msgstr ""
":class:`timedelta` オブジェクトの文字列表現は内部表現に類似した形に正規化され"
"ます。そのため負の timedelta はいくぶん珍しい結果となります。例えば:"

#: ../../library/datetime.rst:282
msgid ""
"In addition to the operations listed above :class:`timedelta` objects "
"support certain additions and subtractions with :class:`date` and :class:`."
"datetime` objects (see below)."
msgstr ""
"上に列挙した操作に加えて、 :class:`timedelta` オブジェクトは :class:`date` お"
"よび :class:`.datetime` オブジェクトとの間で加減算をサポートしています (下を"
"参照してください)。"

#: ../../library/datetime.rst:286
msgid ""
"Comparisons of :class:`timedelta` objects are supported with the :class:"
"`timedelta` object representing the smaller duration considered to be the "
"smaller timedelta. In order to stop mixed-type comparisons from falling back "
"to the default comparison by object address, when a :class:`timedelta` "
"object is compared to an object of a different type, :exc:`TypeError` is "
"raised unless the comparison is ``==`` or ``!=``.  The latter cases return :"
"const:`False` or :const:`True`, respectively."
msgstr ""
":class:`timedelta` オブジェクト間の比較はサポートされており、より小さい経過時"
"間を表す :class:`timedelta` オブジェクトがより小さい timedelta と見なされま"
"す。型混合の比較がデフォルトのオブジェクトアドレス比較となってしまうのを抑止"
"するために、 :class:`timedelta` オブジェクトと異なる型のオブジェクトが比較さ"
"れると、比較演算子が ``==`` または ``!=`` でないかぎり :exc:`TypeError` が送"
"出されます。後者の場合、それぞれ :const:`False` または :const:`True` を返しま"
"す。"

#: ../../library/datetime.rst:294
msgid ""
":class:`timedelta` objects are :term:`hashable` (usable as dictionary keys), "
"support efficient pickling, and in Boolean contexts, a :class:`timedelta` "
"object is considered to be true if and only if it isn't equal to "
"``timedelta(0)``."
msgstr ""
":class:`timedelta` オブジェクトはハッシュ可能(:term:`hashable`) つまり、辞書"
"のキーとして利用可能) であり、効率的な pickle 化をサポートします。また、ブー"
"ル演算コンテキストでは、 :class:`timedelta` オブジェクトは ``timedelta(0)`` "
"に等しくない場合かつそのときに限り真となります。"

#: ../../library/datetime.rst:298 ../../library/datetime.rst:473
#: ../../library/datetime.rst:876 ../../library/datetime.rst:1264
msgid "Instance methods:"
msgstr "インスタンスメソッド:"

#: ../../library/datetime.rst:302
msgid ""
"Return the total number of seconds contained in the duration. Equivalent to "
"``(td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6`` "
"computed with true division enabled."
msgstr ""
"この期間に含まれるトータルの秒数を返します。 true division が有効な場合の、 "
"``(td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6`` と"
"同じです。"

#: ../../library/datetime.rst:306
msgid ""
"Note that for very large time intervals (greater than 270 years on most "
"platforms) this method will lose microsecond accuracy."
msgstr ""
"非常に長い期間 (多くのプラットフォームでは270年以上) については、このメソッド"
"はマイクロ秒の精度を失うことがあることに注意してください。"

#: ../../library/datetime.rst:312
msgid "Example usage:"
msgstr "使用例:"

#: ../../library/datetime.rst:338
msgid ":class:`date` Objects"
msgstr ":class:`date` オブジェクト"

#: ../../library/datetime.rst:340
msgid ""
"A :class:`date` object represents a date (year, month and day) in an "
"idealized calendar, the current Gregorian calendar indefinitely extended in "
"both directions.  January 1 of year 1 is called day number 1, January 2 of "
"year 1 is called day number 2, and so on.  This matches the definition of "
"the \"proleptic Gregorian\" calendar in Dershowitz and Reingold's book "
"Calendrical Calculations, where it's the base calendar for all "
"computations.  See the book for algorithms for converting between proleptic "
"Gregorian ordinals and many other calendar systems."
msgstr ""
":class:`date` オブジェクトは日付 (年、月、および日) を表します。日付は理想的"
"なカレンダー、すなわち現在のグレゴリオ暦を過去と未来の両方向に無限に延長した"
"もので表されます。 1 年の 1 月 1 日は日番号 1, 1 年 1 月 2 日は日番号 2,と"
"なっていきます。この暦法は、全ての計算における基本カレンダーである、 "
"Dershowitz と Reingold の書籍 Calendrical Calculations における先発グレゴリオ"
"暦 (proleptic Gregorian) の定義に一致します。"

#: ../../library/datetime.rst:352
msgid ""
"All arguments are required.  Arguments may be ints or longs, in the "
"following ranges:"
msgstr ""
"全ての引数が必要です。引数は整数または長整数で、以下の範囲に入らなければなり"
"ません:"

#: ../../library/datetime.rst:355 ../../library/datetime.rst:640
msgid "``MINYEAR <= year <= MAXYEAR``"
msgstr "``MINYEAR <= year <= MAXYEAR``"

#: ../../library/datetime.rst:356 ../../library/datetime.rst:641
msgid "``1 <= month <= 12``"
msgstr "``1 <= month <= 12``"

#: ../../library/datetime.rst:357 ../../library/datetime.rst:642
msgid "``1 <= day <= number of days in the given month and year``"
msgstr "``1 <= day <= 指定された月と年における日数``"

#: ../../library/datetime.rst:359 ../../library/datetime.rst:648
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised."
msgstr "範囲を超えた引数を与えた場合、 :exc:`ValueError` が送出されます。"

#: ../../library/datetime.rst:362 ../../library/datetime.rst:650
msgid "Other constructors, all class methods:"
msgstr "他のコンストラクタ、および全てのクラスメソッドを以下に示します:"

#: ../../library/datetime.rst:366
msgid ""
"Return the current local date.  This is equivalent to ``date."
"fromtimestamp(time.time())``."
msgstr ""
"現在のローカルな日付を返します。``date.fromtimestamp(time.time())`` と等価で"
"す。"

#: ../../library/datetime.rst:372
msgid ""
"Return the local date corresponding to the POSIX timestamp, such as is "
"returned by :func:`time.time`.  This may raise :exc:`ValueError`, if the "
"timestamp is out of the range of values supported by the platform C :c:func:"
"`localtime` function. It's common for this to be restricted to years from "
"1970 through 2038.  Note that on non-POSIX systems that include leap seconds "
"in their notion of a timestamp, leap seconds are ignored by :meth:"
"`fromtimestamp`."
msgstr ""
":func:`time.time` で返されるような POSIX タイムスタンプに対応するローカルな日"
"付を返します。 timestamp がプラットフォームの C 関数 :c:func:`localtime` がサ"
"ポートする値の範囲から外れていた場合、 :exc:`ValueError` を送出するかもしれま"
"せん。この範囲は通常は 1970 年から 2038 年までに制限されています。タイムスタ"
"ンプの表記にうるう秒を含める非 POSIX なシステムでは、うるう秒は :meth:"
"`fromtimestamp` では無視されます。"

#: ../../library/datetime.rst:382
msgid ""
"Return the date corresponding to the proleptic Gregorian ordinal, where "
"January 1 of year 1 has ordinal 1.  :exc:`ValueError` is raised unless ``1 "
"<= ordinal <= date.max.toordinal()``. For any date *d*, ``date.fromordinal(d."
"toordinal()) == d``."
msgstr ""
"先発グレゴリオ暦による序数に対応する日付を返します。 1 年 1 月 1 日が序数 1 "
"となります。 ``1 <= ordinal <= date.max.toordinal()`` でない場合、 :exc:"
"`ValueError` が送出されます。任意の日付 *d* に対し、 ``date.fromordinal(d."
"toordinal()) == d`` となります。"

#: ../../library/datetime.rst:388 ../../library/datetime.rst:741
#: ../../library/datetime.rst:1193
msgid "Class attributes:"
msgstr "以下にクラス属性を示します:"

#: ../../library/datetime.rst:392
msgid "The earliest representable date, ``date(MINYEAR, 1, 1)``."
msgstr "表現できる最も古い日付で、``date(MINYEAR, 1, 1)`` です。"

#: ../../library/datetime.rst:397
msgid "The latest representable date, ``date(MAXYEAR, 12, 31)``."
msgstr "表現できる最も新しい日付で、``date(MAXYEAR, 12, 31)`` です。"

#: ../../library/datetime.rst:402
msgid ""
"The smallest possible difference between non-equal date objects, "
"``timedelta(days=1)``."
msgstr "等しくない日付オブジェクト間の最小の差で、``timedelta(days=1)`` です。"

#: ../../library/datetime.rst:410 ../../library/datetime.rst:765
msgid "Between :const:`MINYEAR` and :const:`MAXYEAR` inclusive."
msgstr "両端値を含む :const:`MINYEAR` から :const:`MAXYEAR` までの値です。"

#: ../../library/datetime.rst:415 ../../library/datetime.rst:770
msgid "Between 1 and 12 inclusive."
msgstr "両端値を含む 1 から 12 までの値です。"

#: ../../library/datetime.rst:420 ../../library/datetime.rst:775
msgid "Between 1 and the number of days in the given month of the given year."
msgstr "1 から与えられた月と年における日数までの値です。"

#: ../../library/datetime.rst:428
msgid "``date2 = date1 + timedelta``"
msgstr "``date2 = date1 + timedelta``"

#: ../../library/datetime.rst:428
msgid "*date2* is ``timedelta.days`` days removed from *date1*.  (1)"
msgstr "*date2* はから *date1* から ``timedelta.days`` 日移動した日付です。(1)"

#: ../../library/datetime.rst:431
msgid "``date2 = date1 - timedelta``"
msgstr "``date2 = date1 - timedelta``"

#: ../../library/datetime.rst:431
msgid "Computes *date2* such that ``date2 + timedelta == date1``. (2)"
msgstr ""
"``date2 + timedelta == date1`` であるような日付 *date2* を計算します。(2)"

#: ../../library/datetime.rst:434
msgid "``timedelta = date1 - date2``"
msgstr "``timedelta = date1 - date2``"

#: ../../library/datetime.rst:434 ../../library/datetime.rst:813
#: ../../library/datetime.rst:1679
msgid "\\(3)"
msgstr "\\(3)"

#: ../../library/datetime.rst:436
msgid "``date1 < date2``"
msgstr "``date1 < date2``"

#: ../../library/datetime.rst:436
msgid ""
"*date1* is considered less than *date2* when *date1* precedes *date2* in "
"time. (4)"
msgstr ""
"*date1* が時刻として *date2* よりも前を表す場合に、*date1* は *date2* よりも"
"小さいと見なされます。(4)"

#: ../../library/datetime.rst:443
msgid ""
"*date2* is moved forward in time if ``timedelta.days > 0``, or backward if "
"``timedelta.days < 0``.  Afterward ``date2 - date1 == timedelta.days``. "
"``timedelta.seconds`` and ``timedelta.microseconds`` are ignored. :exc:"
"`OverflowError` is raised if ``date2.year`` would be smaller than :const:"
"`MINYEAR` or larger than :const:`MAXYEAR`."
msgstr ""
"*date2* は ``timedelta.days > 0`` の場合進む方向に、 ``timedelta.days < 0`` "
"の場合戻る方向に移動します。演算後は、 ``date2 - date1 == timedelta.days`` と"
"なります。 ``timedelta.seconds`` および ``timedelta.microseconds`` は無視され"
"ます。 ``date2.year`` が :const:`MINYEAR` になってしまったり、 :const:"
"`MAXYEAR` より大きくなってしまう場合には :exc:`OverflowError` が送出されま"
"す。"

#: ../../library/datetime.rst:450
msgid ""
"This isn't quite equivalent to date1 + (-timedelta), because -timedelta in "
"isolation can overflow in cases where date1 - timedelta does not. "
"``timedelta.seconds`` and ``timedelta.microseconds`` are ignored."
msgstr ""
"この操作は date1 + (-timedelta) と等価ではありません。なぜならば、date1 - "
"timedelta がオーバフローしない場合でも、-timedelta 単体がオーバフローする可能"
"性があるからです。``timedelta.seconds`` および ``timedelta.microseconds`` は"
"無視されます。"

#: ../../library/datetime.rst:455
msgid ""
"This is exact, and cannot overflow.  timedelta.seconds and timedelta."
"microseconds are 0, and date2 + timedelta == date1 after."
msgstr ""
"この演算は厳密で、オーバフローしません。timedelta.seconds および timedelta."
"microseconds は 0 で、演算後には date2 + timedelta == date1 となります。"

#: ../../library/datetime.rst:459
msgid ""
"In other words, ``date1 < date2`` if and only if ``date1.toordinal() < date2."
"toordinal()``. In order to stop comparison from falling back to the default "
"scheme of comparing object addresses, date comparison normally raises :exc:"
"`TypeError` if the other comparand isn't also a :class:`date` object. "
"However, ``NotImplemented`` is returned instead if the other comparand has "
"a :meth:`timetuple` attribute.  This hook gives other kinds of date objects "
"a chance at implementing mixed-type comparison. If not, when a :class:`date` "
"object is compared to an object of a different type, :exc:`TypeError` is "
"raised unless the comparison is ``==`` or ``!=``.  The latter cases return :"
"const:`False` or :const:`True`, respectively."
msgstr ""
"別の言い方をすると、 ``date1.toordinal() < date2.toordinal()`` であり、かつそ"
"のときに限り ``date1 < date2`` となります。型混合の比較がデフォルトのオブジェ"
"クトアドレス比較となってしまうのを抑止するために、 :class:`date` オブジェクト"
"と異なる型のオブジェクトが比較されると :exc:`TypeError` が送出されます。しか"
"しながら、被比較演算子のもう一方が :meth:`timetuple` 属性を持つ場合には "
"``NotImplemented`` が返されます。このフックにより、他種の日付オブジェクトに型"
"混合比較を実装するチャンスを与えています。そうでない場合、 :class:`date` オブ"
"ジェクトと異なる型のオブジェクトが比較されると、比較演算子が ``==`` または "
"``!=`` でないかぎり :exc:`TypeError` が送出されます。後者の場合、それぞれ :"
"const:`False` または :const:`True` を返します。"

#: ../../library/datetime.rst:470
msgid ""
"Dates can be used as dictionary keys. In Boolean contexts, all :class:`date` "
"objects are considered to be true."
msgstr ""
":class:`date` オブジェクトは辞書のキーとして用いることができます。ブール演算"
"コンテキストでは、全ての :class:`date` オブジェクトは真であるとみなされます。"

#: ../../library/datetime.rst:477
msgid ""
"Return a date with the same value, except for those parameters given new "
"values by whichever keyword arguments are specified.  For example, if ``d == "
"date(2002, 12, 31)``, then ``d.replace(day=26) == date(2002, 12, 26)``."
msgstr ""
"キーワード引数で指定されたパラメタが置き換えられることを除き、同じ値を持つ :"
"class:`date` オブジェクトを返します。例えば、``d == date(2002, 12, 31)`` とす"
"ると、``d.replace(day=26) == date(2002, 12, 26)`` となります。"

#: ../../library/datetime.rst:484
msgid ""
"Return a :class:`time.struct_time` such as returned by :func:`time."
"localtime`. The hours, minutes and seconds are 0, and the DST flag is -1. "
"``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d.month, d."
"day, 0, 0, 0, d.weekday(), yday, -1))``, where ``yday = d.toordinal() - "
"date(d.year, 1, 1).toordinal() + 1`` is the day number within the current "
"year starting with ``1`` for January 1st."
msgstr ""
":func:`time.localtime` が返す形式の :class:`time.struct_time` を返します。時"
"間、分、および秒は 0 で、DST フラグは -1 になります。 ``d.timetuple()`` は次"
"の値と同値です: ``time.struct_time((d.year, d.month, d.day, 0, 0, 0, d."
"weekday(), yday, -1))`` ただし ``yday = d.toordinal() - date(d.year, 1, 1)."
"toordinal() + 1`` が 1月1日に ``1`` で始まる現在の年の日を表す。"

#: ../../library/datetime.rst:494
msgid ""
"Return the proleptic Gregorian ordinal of the date, where January 1 of year "
"1 has ordinal 1.  For any :class:`date` object *d*, ``date.fromordinal(d."
"toordinal()) == d``."
msgstr ""
"先発グレゴリオ暦における日付序数を返します。 1 年の 1 月 1 日が序数 1 となり"
"ます。任意の :class:`date` オブジェクト *d* について、 ``date.fromordinal(d."
"toordinal()) == d`` となります。"

#: ../../library/datetime.rst:501
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"For example, ``date(2002, 12, 4).weekday() == 2``, a Wednesday. See also :"
"meth:`isoweekday`."
msgstr ""
"月曜日を 0、日曜日を 6 として、曜日を整数で返します。例えば、 ``date(2002, "
"12, 4).weekday() == 2`` であり、水曜日を示します。 :meth:`isoweekday` も参照"
"してください。"

#: ../../library/datetime.rst:508
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"For example, ``date(2002, 12, 4).isoweekday() == 3``, a Wednesday. See also :"
"meth:`weekday`, :meth:`isocalendar`."
msgstr ""
"月曜日を 1,日曜日を 7 として、曜日を整数で返します。例えば、 ``date(2002, "
"12, 4).isoweekday() == 3`` であり、水曜日を示します。 :meth:`weekday`, :meth:"
"`isocalendar` も参照してください。"

#: ../../library/datetime.rst:515
msgid "Return a 3-tuple, (ISO year, ISO week number, ISO weekday)."
msgstr "3 要素のタプル (ISO 年、ISO 週番号、ISO 曜日) を返します。"

#: ../../library/datetime.rst:517
msgid ""
"The ISO calendar is a widely used variant of the Gregorian calendar. See "
"https://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm for a "
"good explanation."
msgstr ""
"ISO カレンダーはグレゴリオ暦の変種として広く用いられています。\n"
"細かい説明については https://www.staff.science.uu.nl/~gent0113/calendar/"
"isocalendar.htm を参照してください。"

#: ../../library/datetime.rst:521
msgid ""
"The ISO year consists of 52 or 53 full weeks, and where a week starts on a "
"Monday and ends on a Sunday.  The first week of an ISO year is the first "
"(Gregorian) calendar week of a year containing a Thursday. This is called "
"week number 1, and the ISO year of that Thursday is the same as its "
"Gregorian year."
msgstr ""
"ISO 年は完全な週が 52 または 53 週あり、週は月曜から始まって日曜に終わりま"
"す。ISO 年でのある年における最初の週は、その年の木曜日を含む最初の (グレゴリ"
"オ暦での) 週となります。この週は週番号 1 と呼ばれ、この木曜日での ISO 年はグ"
"レゴリオ暦における年と等しくなります。"

#: ../../library/datetime.rst:526
msgid ""
"For example, 2004 begins on a Thursday, so the first week of ISO year 2004 "
"begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that "
"``date(2003, 12, 29).isocalendar() == (2004, 1, 1)`` and ``date(2004, 1, 4)."
"isocalendar() == (2004, 1, 7)``."
msgstr ""
"例えば、2004 年は木曜日から始まるため、ISO 年の最初の週は 2003 年 12 月 29 "
"日、月曜日から始まり、2004 年 1 月 4 日、日曜日に終わります。従って、"
"``date(2003, 12, 29).isocalendar() == (2004, 1, 1)`` であり、かつ "
"``date(2004, 1, 4).isocalendar() == (2004, 1, 7)`` となります。"

#: ../../library/datetime.rst:534
msgid ""
"Return a string representing the date in ISO 8601 format, 'YYYY-MM-DD'.  For "
"example, ``date(2002, 12, 4).isoformat() == '2002-12-04'``."
msgstr ""
"ISO 8601 形式、'YYYY-MM-DD' の日付を表す文字列を返します。例えば、"
"``date(2002, 12, 4).isoformat() == '2002-12-04'`` となります。"

#: ../../library/datetime.rst:540
msgid "For a date *d*, ``str(d)`` is equivalent to ``d.isoformat()``."
msgstr ""
":class:`date` オブジェクト *d* において、``str(d)`` は ``d.isoformat()`` と等"
"価です。"

#: ../../library/datetime.rst:545
msgid ""
"Return a string representing the date, for example ``date(2002, 12, 4)."
"ctime() == 'Wed Dec 4 00:00:00 2002'``. ``d.ctime()`` is equivalent to "
"``time.ctime(time.mktime(d.timetuple()))`` on platforms where the native C :"
"c:func:`ctime` function (which :func:`time.ctime` invokes, but which :meth:"
"`date.ctime` does not invoke) conforms to the C standard."
msgstr ""
"日付を表す文字列を、例えば ``date(2002, 12, 4).ctime() == 'Wed Dec 4 "
"00:00:00 2002'`` のようにして返します。ネイティブの C 関数 :c:func:`ctime` (:"
"func:`time.ctime` はこの関数を呼び出しますが、 :meth:`date.ctime` は呼び出し"
"ません) が C 標準に準拠しているプラットフォームでは、 ``d.ctime()`` は "
"``time.ctime(time.mktime(d.timetuple()))`` と等価です。"

#: ../../library/datetime.rst:554
msgid ""
"Return a string representing the date, controlled by an explicit format "
"string. Format codes referring to hours, minutes or seconds will see 0 "
"values. For a complete list of formatting directives, see section :ref:"
"`strftime-strptime-behavior`."
msgstr ""
"明示的な書式文字列で制御された、日付を表現する文字列を返します。 時間、分、秒"
"を表す書式化コードは値 0 になります。完全な書式化ディレクティブのリストについ"
"ては :ref:`strftime-strptime-behavior` を参照してください。"

#: ../../library/datetime.rst:562
msgid ""
"Same as :meth:`.date.strftime`. This makes it possible to specify a format "
"string for a :class:`.date` object when using :meth:`str.format`. See "
"section :ref:`strftime-strptime-behavior`."
msgstr ""
":meth:`.date.strftime` と同等です。これのおかげで :meth:`str.format` を使うと"
"きに、 :class:`.date` のための書式文字列を指定できます。完全な書式化ディレク"
"ティブのリストについては :ref:`strftime-strptime-behavior` を参照してくださ"
"い。"

#: ../../library/datetime.rst:567
msgid "Example of counting days to an event::"
msgstr "イベントまでの日数を数える例を示します::"

#: ../../library/datetime.rst:585
msgid "Example of working with :class:`date`:"
msgstr ":class:`date` と併用する例を示します:"

#: ../../library/datetime.rst:624
msgid ":class:`.datetime` Objects"
msgstr ":class:`.datetime` オブジェクト"

#: ../../library/datetime.rst:626
msgid ""
"A :class:`.datetime` object is a single object containing all the "
"information from a :class:`date` object and a :class:`.time` object.  Like "
"a :class:`date` object, :class:`.datetime` assumes the current Gregorian "
"calendar extended in both directions; like a time object, :class:`.datetime` "
"assumes there are exactly 3600\\*24 seconds in every day."
msgstr ""
":class:`.datetime` オブジェクトは :class:`date` オブジェクトおよび :class:`."
"time` オブジェクトの全ての情報が入っている単一のオブジェクトです。 :class:"
"`date` オブジェクトと同様に、 :class:`.datetime` は現在のグレゴリオ暦が両方向"
"に延長されているものと仮定します; また、 :class:`time` オブジェクトと同様"
"に, :class:`.datetime` は毎日が厳密に 3600\\*24 秒であると仮定します。"

#: ../../library/datetime.rst:632
msgid "Constructor:"
msgstr "以下にコンストラクタを示します:"

#: ../../library/datetime.rst:636
msgid ""
"The year, month and day arguments are required.  *tzinfo* may be ``None``, "
"or an instance of a :class:`tzinfo` subclass.  The remaining arguments may "
"be ints or longs, in the following ranges:"
msgstr ""
"年、月、および日の引数は必須です。 *tzinfo* は ``None`` または :class:"
"`tzinfo` クラスのサブクラスのインスタンスにすることができます。残りの引数は整"
"数または長整数で、以下のような範囲に入ります:"

#: ../../library/datetime.rst:643 ../../library/datetime.rst:1185
msgid "``0 <= hour < 24``"
msgstr "``0 <= hour < 24``"

#: ../../library/datetime.rst:644 ../../library/datetime.rst:1186
msgid "``0 <= minute < 60``"
msgstr "``0 <= minute < 60``"

#: ../../library/datetime.rst:645 ../../library/datetime.rst:1187
msgid "``0 <= second < 60``"
msgstr "``0 <= second < 60``"

#: ../../library/datetime.rst:646
msgid "``0 <= microsecond < 1000000``"
msgstr "``0 <= microsecond < 1000000``"

#: ../../library/datetime.rst:654
msgid ""
"Return the current local datetime, with :attr:`.tzinfo` ``None``. This is "
"equivalent to ``datetime.fromtimestamp(time.time())``. See also :meth:"
"`now`, :meth:`fromtimestamp`."
msgstr ""
"現在のローカルな :class:`datetime` を返します。\n"
":attr:`tzinfo` は ``None`` です。\n"
"この関数は ``datetime.fromtimestamp(time.time())`` と等価です。\n"
":meth:`now`, :meth:`fromtimestamp` も参照してください。"

#: ../../library/datetime.rst:661
msgid ""
"Return the current local date and time.  If optional argument *tz* is "
"``None`` or not specified, this is like :meth:`today`, but, if possible, "
"supplies more precision than can be gotten from going through a :func:`time."
"time` timestamp (for example, this may be possible on platforms supplying "
"the C :c:func:`gettimeofday` function)."
msgstr ""
"現在のローカルな日付および時刻を返します。オプションの引数 *tz* が ``None`` "
"であるか指定されていない場合、このメソッドは :meth:`today` と同様ですが、可能"
"ならば :func:`time.time` タイムスタンプを通じて得ることができる、より高い精度"
"で時刻を提供します (例えば、プラットフォームが C  関数 :c:func:"
"`gettimeofday` をサポートする場合には可能なことがあります)。"

#: ../../library/datetime.rst:667
msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the current date and time are converted to *tz*’s time zone.  "
"In this case the result is equivalent to ``tz.fromutc(datetime.utcnow()."
"replace(tzinfo=tz))``. See also :meth:`today`, :meth:`utcnow`."
msgstr ""
"*tz* が ``None`` でない場合、 *tz* は :class:`tzinfo` のサブクラスのインスタ"
"ンスでなければならず、現在の日付および時刻は *tz* のタイムゾーンに変換されま"
"す。\n"
"この場合、結果は ``tz.fromutc(datetime.utcnow().replace(tzinfo=tz))`` と等価"
"になります。\n"
":meth:`today`, :meth:`utcnow` も参照してください。"

#: ../../library/datetime.rst:675
msgid ""
"Return the current UTC date and time, with :attr:`.tzinfo` ``None``. This is "
"like :meth:`now`, but returns the current UTC date and time, as a naive :"
"class:`.datetime` object. See also :meth:`now`."
msgstr ""
":attr:`.tzinfo` が ``None`` である現在の UTC の日付および時刻を返します。これ"
"は :meth:`now` と似ていますが、 naive な :class:`.datetime` オブジェクトとし"
"て現在の UTC 日付および時刻を返します。  :meth:`now` も参照してください。"

#: ../../library/datetime.rst:682
msgid ""
"Return the local date and time corresponding to the POSIX timestamp, such as "
"is returned by :func:`time.time`. If optional argument *tz* is ``None`` or "
"not specified, the timestamp is converted to the platform's local date and "
"time, and the returned :class:`.datetime` object is naive."
msgstr ""
":func:`time.time` が返すような、 POSIX タイムスタンプに対応するローカルな日付"
"と時刻を返します。オプションの引数 *tz* が ``None`` であるか、指定されていな"
"い場合、タイムスタンプはプラットフォームのローカルな日付および時刻に変換さ"
"れ、返される :class:`.datetime` オブジェクトは naive なものになります。"

#: ../../library/datetime.rst:687
msgid ""
"If *tz* is not ``None``, it must be an instance of a :class:`tzinfo` "
"subclass, and the timestamp is converted to *tz*’s time zone.  In this case "
"the result is equivalent to ``tz.fromutc(datetime."
"utcfromtimestamp(timestamp).replace(tzinfo=tz))``."
msgstr ""
"*tz* が ``None`` でない場合、 *tz* は :class:`tzinfo` のサブクラスのインスタ"
"ンスでなければならず、現在の日付および時刻は *tz* のタイムゾーンに変換されま"
"す。\n"
"この場合、結果は ``tz.fromutc(datetime.utcfromtimestamp(timestamp)."
"replace(tzinfo=tz))`` と等価になります。"

#: ../../library/datetime.rst:692
msgid ""
":meth:`fromtimestamp` may raise :exc:`ValueError`, if the timestamp is out "
"of the range of values supported by the platform C :c:func:`localtime` or :c:"
"func:`gmtime` functions.  It's common for this to be restricted to years in "
"1970 through 2038. Note that on non-POSIX systems that include leap seconds "
"in their notion of a timestamp, leap seconds are ignored by :meth:"
"`fromtimestamp`, and then it's possible to have two timestamps differing by "
"a second that yield identical :class:`.datetime` objects. See also :meth:"
"`utcfromtimestamp`."
msgstr ""
"タイムスタンプがプラットフォームの C 関数 :c:func:`localtime` や :c:func:"
"`gmtime` でサポートされている範囲を超えた場合、 :meth:`fromtimestamp` は :"
"exc:`ValueError` を送出することがあります。この範囲はよく 1970 年から 2038 年"
"に制限されています。うるう秒がタイムスタンプの概念に含まれている非 POSIX シス"
"テムでは、 :meth:`fromtimestamp` はうるう秒を無視します。このため、秒の異なる"
"二つのタイムスタンプが同一の :class:`.datetime` オブジェクトとなることが起こ"
"り得ます。 :meth:`utcfromtimestamp` も参照してください。"

#: ../../library/datetime.rst:703
msgid ""
"Return the UTC :class:`.datetime` corresponding to the POSIX timestamp, "
"with :attr:`.tzinfo` ``None``. This may raise :exc:`ValueError`, if the "
"timestamp is out of the range of values supported by the platform C :c:func:"
"`gmtime` function. It's common for this to be restricted to years in 1970 "
"through 2038. See also :meth:`fromtimestamp`."
msgstr ""
"POSIX タイムスタンプに対応する、:attr:`.tzinfo` が ``None`` の UTC での :"
"class:`.datetime` を返します。タイムスタンプがプラットフォームにおける C 関"
"数 :c:func:`localtime` でサポートされている範囲を超えている場合には :exc:"
"`ValueError` を送出します。これはたいてい 1970 年から 2038 年に制限されていま"
"す。 :meth:`fromtimestamp` も参照してください。"

#: ../../library/datetime.rst:712
msgid ""
"Return the :class:`.datetime` corresponding to the proleptic Gregorian "
"ordinal, where January 1 of year 1 has ordinal 1. :exc:`ValueError` is "
"raised unless ``1 <= ordinal <= datetime.max.toordinal()``.  The hour, "
"minute, second and microsecond of the result are all 0, and :attr:`.tzinfo` "
"is ``None``."
msgstr ""
"1 年 1 月 1 日を序数 1 とする早期グレゴリオ暦序数に対応する :class:`."
"datetime` オブジェクトを返します。\n"
"``1 <= ordinal <= datetime.max.toordinal()`` でなければ :exc:`ValueError` が"
"送出されます。\n"
"返されるオブジェクトの時間、分、秒、およびマイクロ秒はすべて 0 で、 :attr:"
"`tzinfo` は ``None`` となっています。"

#: ../../library/datetime.rst:720
msgid ""
"Return a new :class:`.datetime` object whose date components are equal to "
"the given :class:`date` object's, and whose time components and :attr:`."
"tzinfo` attributes are equal to the given :class:`.time` object's. For any :"
"class:`.datetime` object *d*, ``d == datetime.combine(d.date(), d."
"timetz())``.  If date is a :class:`.datetime` object, its time components "
"and :attr:`.tzinfo` attributes are ignored."
msgstr ""
"日付部分が与えられた :class:`date` オブジェクトと等しく、時刻部分と :attr:`."
"tzinfo` 属性が与えられた :class:`.time` オブジェクトと等しい、新しい :class:"
"`.datetime` オブジェクトを返します。\n"
"任意の :class:`.datetime` オブジェクト *d* で ``d == datetime.combine(d."
"date(), d.timetz())`` が成立します。\n"
"date が :class:`.datetime` オブジェクトだった場合、その時刻部分と :attr:`."
"tzinfo` 属性は無視されます。"

#: ../../library/datetime.rst:731
msgid ""
"Return a :class:`.datetime` corresponding to *date_string*, parsed according "
"to *format*.  This is equivalent to ``datetime(*(time.strptime(date_string, "
"format)[0:6]))``. :exc:`ValueError` is raised if the date_string and format "
"can't be parsed by :func:`time.strptime` or if it returns a value which "
"isn't a time tuple. For a complete list of formatting directives, see "
"section :ref:`strftime-strptime-behavior`."
msgstr ""
"*date_string* に対応した :class:`.datetime` を返します。 *format* にしたがっ"
"て構文解析されます。これは、 ``datetime(*(time.strptime(date_string, format)"
"[0:6]))`` と等価です。 date_stringとformatが :func:`time.strptime` で構文解析"
"できない場合や、この関数が時刻タプルを返してこない場合には :exc:`ValueError` "
"を送出します。完全な書式化ディレクティブのリストについては :ref:`strftime-"
"strptime-behavior` を参照してください。"

#: ../../library/datetime.rst:745
msgid ""
"The earliest representable :class:`.datetime`, ``datetime(MINYEAR, 1, 1, "
"tzinfo=None)``."
msgstr ""
"表現できる最も古い :class:`.datetime` で、 ``datetime(MINYEAR, 1, 1, "
"tzinfo=None)`` です。"

#: ../../library/datetime.rst:751
msgid ""
"The latest representable :class:`.datetime`, ``datetime(MAXYEAR, 12, 31, 23, "
"59, 59, 999999, tzinfo=None)``."
msgstr ""
"表現できる最も新しい :class:`.datetime` で、 ``datetime(MAXYEAR, 12, 31, 23, "
"59, 59, 999999, tzinfo=None)`` です。"

#: ../../library/datetime.rst:757
msgid ""
"The smallest possible difference between non-equal :class:`.datetime` "
"objects, ``timedelta(microseconds=1)``."
msgstr ""
"等しくない :class:`.datetime` オブジェクト間の最小の差で、 "
"``timedelta(microseconds=1)`` です。"

#: ../../library/datetime.rst:780 ../../library/datetime.rst:1217
msgid "In ``range(24)``."
msgstr "in ``range(24)`` を満たします。。"

#: ../../library/datetime.rst:785 ../../library/datetime.rst:790
#: ../../library/datetime.rst:1222 ../../library/datetime.rst:1227
msgid "In ``range(60)``."
msgstr "in ``range(60)`` を満たします。"

#: ../../library/datetime.rst:795 ../../library/datetime.rst:1232
msgid "In ``range(1000000)``."
msgstr "in ``range(1000000)`` を満たします。"

#: ../../library/datetime.rst:800
msgid ""
"The object passed as the *tzinfo* argument to the :class:`.datetime` "
"constructor, or ``None`` if none was passed."
msgstr ""
":class:`.datetime` コンストラクタに *tzinfo* 引数として与えられたオブジェクト"
"になり、何も渡されなかった場合には ``None`` になります。"

#: ../../library/datetime.rst:809
msgid "``datetime2 = datetime1 + timedelta``"
msgstr "``datetime2 = datetime1 + timedelta``"

#: ../../library/datetime.rst:809 ../../library/datetime.rst:1631
#: ../../library/datetime.rst:1636 ../../library/datetime.rst:1648
#: ../../library/datetime.rst:1653 ../../library/datetime.rst:1712
#: ../../library/datetime.rst:1717 ../../library/datetime.rst:1721
msgid "\\(1)"
msgstr "\\(1)"

#: ../../library/datetime.rst:811
msgid "``datetime2 = datetime1 - timedelta``"
msgstr "``datetime2 = datetime1 - timedelta``"

#: ../../library/datetime.rst:811
msgid "\\(2)"
msgstr "\\(2)"

#: ../../library/datetime.rst:813
msgid "``timedelta = datetime1 - datetime2``"
msgstr "``timedelta = datetime1 - datetime2``"

#: ../../library/datetime.rst:815
msgid "``datetime1 < datetime2``"
msgstr "``datetime1 < datetime2``"

#: ../../library/datetime.rst:815
msgid "Compares :class:`.datetime` to :class:`.datetime`. (4)"
msgstr ":class:`.datetime` を :class:`.datetime` と比較します。 (4)"

#: ../../library/datetime.rst:820
msgid ""
"datetime2 is a duration of timedelta removed from datetime1, moving forward "
"in time if ``timedelta.days`` > 0, or backward if ``timedelta.days`` < 0.  "
"The result has the same :attr:`~.datetime.tzinfo` attribute as the input "
"datetime, and datetime2 - datetime1 == timedelta after. :exc:`OverflowError` "
"is raised if datetime2.year would be smaller than :const:`MINYEAR` or larger "
"than :const:`MAXYEAR`. Note that no time zone adjustments are done even if "
"the input is an aware object."
msgstr ""
"datetime2 は datetime1 から時間 timedelta 移動したもので、 ``timedelta."
"days`` > 0 の場合未来へ、 ``timedelta.days`` < 0 の場合過去へ移動します。\n"
"結果は入力の datetime と同じ :attr:`~.datetime.tzinfo` 属性を持ち、演算後に"
"は datetime2 - datetime1 == timedelta となります。\n"
"datetime2.year が :const:`MINYEAR` よりも小さいか、 :const:`MAXYEAR` より大き"
"い場合には :exc:`OverflowError` が送出されます。\n"
"入力が aware なオブジェクトの場合でもタイムゾーン修正は全く行われません。"

#: ../../library/datetime.rst:829
msgid ""
"Computes the datetime2 such that datetime2 + timedelta == datetime1. As for "
"addition, the result has the same :attr:`~.datetime.tzinfo` attribute as the "
"input datetime, and no time zone adjustments are done even if the input is "
"aware. This isn't quite equivalent to datetime1 + (-timedelta), because -"
"timedelta in isolation can overflow in cases where datetime1 - timedelta "
"does not."
msgstr ""
"datetime2 + timedelta == datetime1 となるような datetime2 を計算します。\n"
"ちなみに、結果は入力の datetime と同じ :attr:`~.datetime.tzinfo` 属性を持ち、"
"入力が aware でもタイムゾーン修正は全く行われません。\n"
"この操作は date1 + (-timedelta) と等価ではありません。\n"
"なぜならば、 date1 - timedelta がオーバフローしない場合でも、-timedelta 単体"
"がオーバフローする可能性があるからです。"

#: ../../library/datetime.rst:836
msgid ""
"Subtraction of a :class:`.datetime` from a :class:`.datetime` is defined "
"only if both operands are naive, or if both are aware.  If one is aware and "
"the other is naive, :exc:`TypeError` is raised."
msgstr ""
":class:`.datetime` から :class:`.datetime` の減算は両方の被演算子が naive で"
"あるか、両方とも aware である場合にのみ定義されています。片方が aware でもう"
"一方が naive の場合、 :exc:`TypeError` が送出されます。"

#: ../../library/datetime.rst:840
msgid ""
"If both are naive, or both are aware and have the same :attr:`~.datetime."
"tzinfo` attribute, the :attr:`~.datetime.tzinfo` attributes are ignored, and "
"the result is a :class:`timedelta` object *t* such that ``datetime2 + t == "
"datetime1``.  No time zone adjustments are done in this case."
msgstr ""
"両方とも naive か、両方とも aware で同じ :attr:`~.datetime.tzinfo` 属性を持つ"
"場合、 :attr:`~.datetime.tzinfo` 属性は無視され、結果は ``datetime2 + t == "
"datetime1`` であるような :class:`timedelta` オブジェクト *t* となります。\n"
"この場合タイムゾーン修正は全く行われません。"

#: ../../library/datetime.rst:845
msgid ""
"If both are aware and have different :attr:`~.datetime.tzinfo` attributes, "
"``a-b`` acts as if *a* and *b* were first converted to naive UTC datetimes "
"first.  The result is ``(a.replace(tzinfo=None) - a.utcoffset()) - (b."
"replace(tzinfo=None) - b.utcoffset())`` except that the implementation never "
"overflows."
msgstr ""
"両方が aware で異なる :attr:`~.datetime.tzinfo` 属性を持つ場合、 ``a-b`` は "
"*a* および *b* をまず naive な UTC datetime オブジェクトに変換したかのように"
"して行います。\n"
"演算結果は決してオーバフローを起こさないことを除き、 ``(a."
"replace(tzinfo=None) - a.utcoffset()) - (b.replace(tzinfo=None) - b."
"utcoffset())`` と同じになります。"

#: ../../library/datetime.rst:851
msgid ""
"*datetime1* is considered less than *datetime2* when *datetime1* precedes "
"*datetime2* in time."
msgstr ""
"*datetime1* が時刻として *datetime2* よりも前を表す場合に、*datetime1* は "
"*datetime2* よりも小さいと見なされます。"

#: ../../library/datetime.rst:854
msgid ""
"If one comparand is naive and the other is aware, :exc:`TypeError` is "
"raised. If both comparands are aware, and have the same :attr:`~.datetime."
"tzinfo` attribute, the common :attr:`~.datetime.tzinfo` attribute is ignored "
"and the base datetimes are compared.  If both comparands are aware and have "
"different :attr:`~.datetime.tzinfo` attributes, the comparands are first "
"adjusted by subtracting their UTC offsets (obtained from ``self."
"utcoffset()``)."
msgstr ""
"native と aware を比較しようとすると :exc:`TypeError` が送出されます。比較対"
"象が両方とも aware であり、同じ :attr:`~.datetime.tzinfo` 属性を持つ場合、 :"
"attr:`~.datetime.tzinfo` は無視され datetime だけで比較が行われます。比較対象"
"が両方とも aware であり、異なる :attr:`~.datetime.tzinfo` 属性を持つ場合、ま"
"ず最初に (``self.utcoffset()`` で取得できる) それぞれの UTC オフセットを引く"
"調整が行われます。"

#: ../../library/datetime.rst:863
msgid ""
"In order to stop comparison from falling back to the default scheme of "
"comparing object addresses, datetime comparison normally raises :exc:"
"`TypeError` if the other comparand isn't also a :class:`.datetime` object.  "
"However, ``NotImplemented`` is returned instead if the other comparand has "
"a :meth:`timetuple` attribute.  This hook gives other kinds of date objects "
"a chance at implementing mixed-type comparison.  If not, when a :class:`."
"datetime` object is compared to an object of a different type, :exc:"
"`TypeError` is raised unless the comparison is ``==`` or ``!=``.  The latter "
"cases return :const:`False` or :const:`True`, respectively."
msgstr ""
"型混合の比較がデフォルトのオブジェクトアドレス比較となってしまうのを抑止する"
"ために、被演算子のもう一方が :class:`.datetime` オブジェクトと異なる型のオブ"
"ジェクトの場合には :exc:`TypeError` が送出されます。しかしながら、被比較演算"
"子のもう一方が :meth:`timetuple` 属性を持つ場合には ``NotImplemented`` が返さ"
"れます。このフックにより、他種の日付オブジェクトに型混合比較を実装するチャン"
"スを与えています。そうでない場合, :class:`.datetime` オブジェクトと異なる型の"
"オブジェクトが比較されると、比較演算子が ``==`` または ``!=`` でないかぎり :"
"exc:`TypeError` が送出されます。後者の場合、それぞれ :const:`False` または :"
"const:`True` を返します。"

#: ../../library/datetime.rst:873
msgid ""
":class:`.datetime` objects can be used as dictionary keys. In Boolean "
"contexts, all :class:`.datetime` objects are considered to be true."
msgstr ""
":class:`.datetime` オブジェクトは辞書のキーとして用いることができます。ブール"
"演算コンテキストでは、全ての :class:`.datetime` オブジェクトは真であるとみな"
"されます。"

#: ../../library/datetime.rst:880
msgid "Return :class:`date` object with same year, month and day."
msgstr "同じ年、月、日の :class:`date` オブジェクトを返します。"

#: ../../library/datetime.rst:885
msgid ""
"Return :class:`.time` object with same hour, minute, second and "
"microsecond. :attr:`.tzinfo` is ``None``.  See also method :meth:`timetz`."
msgstr ""
"同じ時、分、秒、マイクロ秒を持つ :class:`.time` オブジェクトを返します。 :"
"attr:`.tzinfo` は ``None`` です。 :meth:`timetz` も参照してください。"

#: ../../library/datetime.rst:891
msgid ""
"Return :class:`.time` object with same hour, minute, second, microsecond, "
"and tzinfo attributes.  See also method :meth:`time`."
msgstr ""
"同じ時、分、秒、マイクロ秒、および tzinfo 属性を持つ :class:`.time` オブジェ"
"クトを返します。 :meth:`time` メソッドも参照してください。"

#: ../../library/datetime.rst:897
msgid ""
"Return a datetime with the same attributes, except for those attributes "
"given new values by whichever keyword arguments are specified.  Note that "
"``tzinfo=None`` can be specified to create a naive datetime from an aware "
"datetime with no conversion of date and time data."
msgstr ""
"キーワード引数で指定した属性の値を除き、同じ属性をもつ datetime オブジェクト"
"を返します。メンバに対する変換を行わずに aware な datetime オブジェクトから "
"naive な datetime オブジェクトを生成するために、``tzinfo=None`` を指定するこ"
"ともできます。"

#: ../../library/datetime.rst:905
msgid ""
"Return a :class:`.datetime` object with new :attr:`.tzinfo` attribute *tz*, "
"adjusting the date and time data so the result is the same UTC time as "
"*self*, but in *tz*'s local time."
msgstr ""
"*tz* を新たに :attr:`.tzinfo` 属性 として持つ :class:`.datetime` オブジェクト"
"を返します。\n"
"日付および時刻データを調整して、返り値が *self* と同じ UTC 時刻を持ち、 *tz* "
"におけるローカルな時刻を表すようにします。"

#: ../../library/datetime.rst:909
msgid ""
"*tz* must be an instance of a :class:`tzinfo` subclass, and its :meth:"
"`utcoffset` and :meth:`dst` methods must not return ``None``.  *self* must "
"be aware (``self.tzinfo`` must not be ``None``, and ``self.utcoffset()`` "
"must not return ``None``)."
msgstr ""
"*tz* は :class:`tzinfo` のサブクラスのインスタンスでなければならず、 インスタ"
"ンスの :meth:`utcoffset` および :meth:`dst` メソッドは ``None`` を返してはな"
"りません。 *self* は aware でなくてはなりませ ん (``self.tzinfo`` が "
"``None`` であってはならず、かつ ``self.utcoffset()`` は ``None`` を返してはな"
"りません)。"

#: ../../library/datetime.rst:914
msgid ""
"If ``self.tzinfo`` is *tz*, ``self.astimezone(tz)`` is equal to *self*:  no "
"adjustment of date or time data is performed. Else the result is local time "
"in time zone *tz*, representing the same UTC time as *self*:  after ``astz = "
"dt.astimezone(tz)``, ``astz - astz.utcoffset()`` will usually have the same "
"date and time data as ``dt - dt.utcoffset()``. The discussion of class :"
"class:`tzinfo` explains the cases at Daylight Saving Time transition "
"boundaries where this cannot be achieved (an issue only if *tz* models both "
"standard and daylight time)."
msgstr ""
"``self.tzinfo`` が *tz* の場合、 ``self.astimezone(tz)`` は *self* に等しくな"
"ります: 日付および時刻データメンバに対する調整は行われません。そうでない場"
"合、結果はタイムゾーン *tz* におけるローカル時刻で、 *self* と同じ UTC 時刻を"
"表すようになります: ``astz = dt.astimezone(tz)`` とした後、 ``astz - astz."
"utcoffset()`` は通常 ``dt - dt.utcoffset()`` と同じ日付および時刻データメンバ"
"を持ちます。 :class:`tzinfo` クラスに関する議論では、夏時間 (Daylight Saving "
"time) の遷移境界では上の等価性が成り立たないことを説明しています (*tz* が標準"
"時と夏時間の両方をモデル化している場合のみの問題です)。"

#: ../../library/datetime.rst:923
msgid ""
"If you merely want to attach a time zone object *tz* to a datetime *dt* "
"without adjustment of date and time data, use ``dt.replace(tzinfo=tz)``.  If "
"you merely want to remove the time zone object from an aware datetime *dt* "
"without conversion of date and time data, use ``dt.replace(tzinfo=None)``."
msgstr ""
"単にタイムゾーンオブジェクト *tz* を :class:`datetime` オブジェクト *dt* に追"
"加したいだけで、日付や時刻データへの調整を行わないのなら、``dt."
"replace(tzinfo=tz)`` を使ってください。単に aware な :class:`datetime` オブ"
"ジェクト *dt* からタイムゾーンオブジェクトを除去したいだけで、日付や時刻デー"
"タの変換を行わないのなら、``dt.replace(tzinfo=None)`` を使ってください。"

#: ../../library/datetime.rst:928
msgid ""
"Note that the default :meth:`tzinfo.fromutc` method can be overridden in a :"
"class:`tzinfo` subclass to affect the result returned by :meth:`astimezone`. "
"Ignoring error cases, :meth:`astimezone` acts like::"
msgstr ""
"デフォルトの :meth:`tzinfo.fromutc` メソッドを :class:`tzinfo` のサブクラスで"
"上書きして, :meth:`astimezone` が返す結果に影響を及ぼすことができます。エラー"
"の場合を無視すると、 :meth:`astimezone` は以下のように動作します::"

#: ../../library/datetime.rst:943
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(self)``, and raises an exception if the latter doesn't return "
"``None``, or a :class:`timedelta` object representing a whole number of "
"minutes with magnitude less than one day."
msgstr ""
":attr:`.tzinfo` が ``None`` の場合、 ``None`` を返し、そうでない場合には "
"``self.tzinfo.utcoffset(self)`` を返します。\n"
"後者の式が ``None`` か、1 日以下の大きさを持つ経過時間を表す :class:"
"`timedelta` オブジェクトのいずれかを返さない場合には例外を送出します。"

#: ../../library/datetime.rst:951
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(self)``, and raises an exception if the latter doesn't return ``None``, "
"or a :class:`timedelta` object representing a whole number of minutes with "
"magnitude less than one day."
msgstr ""
":attr:`.tzinfo` が ``None`` の場合 ``None`` を返し、そうでない場合には "
"``self.tzinfo.dst(self)`` を返します。\n"
"後者の式が ``None`` もしくは、1 日未満の経過時間を表す :class:`timedelta` オ"
"ブジェクトのいずれかを返さない場合には例外を送出します。"

#: ../../library/datetime.rst:959
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(self)``, raises an exception if the latter doesn't return ``None`` or "
"a string object,"
msgstr ""
":attr:`.tzinfo` が ``None`` の場合 ``None`` を返し、そうでない場合には "
"``self.tzinfo.tzname(self)`` を返します。\n"
"後者の式が ``None`` か文字列オブジェクトのいずれかを返さない場合には例外を送"
"出します。"

#: ../../library/datetime.rst:966
msgid ""
"Return a :class:`time.struct_time` such as returned by :func:`time."
"localtime`. ``d.timetuple()`` is equivalent to ``time.struct_time((d.year, d."
"month, d.day, d.hour, d.minute, d.second, d.weekday(), yday, dst))``, where "
"``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` is the day "
"number within the current year starting with ``1`` for January 1st. The :"
"attr:`tm_isdst` flag of the result is set according to the :meth:`dst` "
"method: :attr:`.tzinfo` is ``None`` or :meth:`dst` returns ``None``, :attr:"
"`tm_isdst` is set to ``-1``; else if :meth:`dst` returns a non-zero value, :"
"attr:`tm_isdst` is set to ``1``; else :attr:`tm_isdst` is set to ``0``."
msgstr ""
":func:`time.localtime` が返す形式の :class:`time.struct_time` を返します。\n"
"``d.timetuple()`` は ``time.struct_time((d.year, d.month, d.day, d.hour, d."
"minute, d.second, d.weekday(), yday, dst))`` と等価です。\n"
"ここで ``yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1`` はその年"
"の1月1日を ``1`` としたときのその日の位置です。\n"
"返されるタプルの :attr:`tm_isdst` フラグは :meth:`dst` メソッドに従って設定さ"
"れます: :attr:`.tzinfo` が ``None`` か :meth:`dst` が ``None`` を返す場合、 :"
"attr:`tm_isdst` は ``-1`` に設定されます; そうでない場合、 :meth:`dst` がゼロ"
"でない値を返すと :attr:`tm_isdst` は ``1`` となります; それ以外の場合には :"
"attr:`tm_isdst` は ``0`` に設定されます。"

#: ../../library/datetime.rst:979
msgid ""
"If :class:`.datetime` instance *d* is naive, this is the same as ``d."
"timetuple()`` except that :attr:`tm_isdst` is forced to 0 regardless of what "
"``d.dst()`` returns.  DST is never in effect for a UTC time."
msgstr ""
":class:`.datetime` インスタンス *d* が naive の場合、このメソッドは ``d."
"timetuple()`` と同じであり、 ``d.dst()`` の返す内容にかかわらず :attr:"
"`tm_isdst` が 0 に強制される点だけが異なります。 DST が UTC 時刻に影響を及ぼ"
"すことは決してありません。"

#: ../../library/datetime.rst:983
msgid ""
"If *d* is aware, *d* is normalized to UTC time, by subtracting ``d."
"utcoffset()``, and a :class:`time.struct_time` for the normalized time is "
"returned.  :attr:`tm_isdst` is forced to 0. Note that the result's :attr:"
"`tm_year` member may be :const:`MINYEAR`\\ -1 or :const:`MAXYEAR`\\ +1, if "
"*d*.year was ``MINYEAR`` or ``MAXYEAR`` and UTC adjustment spills over a "
"year boundary."
msgstr ""
"*d* が aware の場合、 *d* から ``d.utcoffset()`` が差し引かれて UTC 時刻に正"
"規化され、正規化された時刻の :class:`time.struct_time` を返します。 :attr:"
"`tm_isdst` は 0 に強制されます。 *d*.year が ``MINYEAR`` や ``MAXUEAR`` で、"
"UTC への修正の結果表現可能な年の境界を越えた場合には、戻り値の :attr:"
"`tm_year` メンバは :const:`MINYEAR`\\ -1 または :const:`MAXYEAR`\\ +1 になる"
"ことがあります。"

#: ../../library/datetime.rst:993
msgid ""
"Return the proleptic Gregorian ordinal of the date.  The same as ``self."
"date().toordinal()``."
msgstr ""
"先発グレゴリオ暦における日付序数を返します。``self.date().toordinal()`` と同"
"じです。"

#: ../../library/datetime.rst:999
msgid ""
"Return the day of the week as an integer, where Monday is 0 and Sunday is 6. "
"The same as ``self.date().weekday()``. See also :meth:`isoweekday`."
msgstr ""
"月曜日を 0、日曜日を 6 として、曜日を整数で返します。 ``self.date()."
"weekday()`` と同じです。 :meth:`isoweekday` も参照してください。"

#: ../../library/datetime.rst:1005
msgid ""
"Return the day of the week as an integer, where Monday is 1 and Sunday is 7. "
"The same as ``self.date().isoweekday()``. See also :meth:`weekday`, :meth:"
"`isocalendar`."
msgstr ""
"月曜日を 1、日曜日を 7 として、曜日を整数で返します。 ``self.date()."
"isoweekday()`` と等価です。 :meth:`weekday` 、 :meth:`isocalendar` も参照して"
"ください。"

#: ../../library/datetime.rst:1012
msgid ""
"Return a 3-tuple, (ISO year, ISO week number, ISO weekday).  The same as "
"``self.date().isocalendar()``."
msgstr ""
"3 要素のタプル (ISO 年、ISO 週番号、ISO 曜日) を返します。``self.date()."
"isocalendar()`` と等価です。"

#: ../../library/datetime.rst:1018
msgid ""
"Return a string representing the date and time in ISO 8601 format, YYYY-MM-"
"DDTHH:MM:SS.mmmmmm or, if :attr:`microsecond` is 0, YYYY-MM-DDTHH:MM:SS"
msgstr ""
"日付と時刻を ISO 8601 形式、すなわち YYYY-MM-DDTHH:MM:SS.mmmmmm か、 :attr:"
"`microsecond` が 0 の場合には YYYY-MM-DDTHH:MM:SS で表した文字列を返します。"

#: ../../library/datetime.rst:1022
msgid ""
"If :meth:`utcoffset` does not return ``None``, a 6-character string is "
"appended, giving the UTC offset in (signed) hours and minutes: YYYY-MM-DDTHH:"
"MM:SS.mmmmmm+HH:MM or, if :attr:`microsecond` is 0 YYYY-MM-DDTHH:MM:SS+HH:MM"
msgstr ""
":meth:`utcoffset` が ``None`` を返さない場合、 UTC からのオフセットを時間と分"
"を表した (符号付きの) 6 文字からなる 文字列が追加されます: すなわち、 YYYY-"
"MM- DDTHH:MM:SS.mmmmmm+HH:MM となるか、 :attr:`microsecond` がゼロの場合には "
"YYYY-MM- DDTHH:MM:SS+HH:MM となります。"

#: ../../library/datetime.rst:1027
msgid ""
"The optional argument *sep* (default ``'T'``) is a one-character separator, "
"placed between the date and time portions of the result.  For example,"
msgstr ""
"オプションの引数 *sep* (デフォルトでは ``'T'`` です)  は 1 文字のセパレータ"
"で、結果の文字列の日付と時刻の間に置かれます。例えば、"

#: ../../library/datetime.rst:1040
msgid ""
"For a :class:`.datetime` instance *d*, ``str(d)`` is equivalent to ``d."
"isoformat(' ')``."
msgstr ""
":class:`.datetime` オブジェクト *d* において、 ``str(d)`` は ``d.isoformat(' "
"')`` と等価です。"

#: ../../library/datetime.rst:1046
msgid ""
"Return a string representing the date and time, for example ``datetime(2002, "
"12, 4, 20, 30, 40).ctime() == 'Wed Dec  4 20:30:40 2002'``. ``d.ctime()`` is "
"equivalent to ``time.ctime(time.mktime(d.timetuple()))`` on platforms where "
"the native C :c:func:`ctime` function (which :func:`time.ctime` invokes, but "
"which :meth:`datetime.ctime` does not invoke) conforms to the C standard."
msgstr ""
"日付を表す文字列を、例えば ``datetime(2002, 12, 4, 20, 30, 40).ctime() == "
"'Wed Dec  4 20:30:40 2002'`` のようにして返します。ネイティブの C 関数 :c:"
"func:`ctime`  (:func:`time.ctime` はこの関数を呼び出しますが、 :meth:"
"`datetime.ctime` は呼び出しません) が C 標準に準拠しているプラットフォームで"
"は、 ``d.ctime()`` は ``time.ctime(time.mktime(d.timetuple()))`` と等価です。"

#: ../../library/datetime.rst:1055
msgid ""
"Return a string representing the date and time, controlled by an explicit "
"format string.  For a complete list of formatting directives, see section :"
"ref:`strftime-strptime-behavior`."
msgstr ""
"明示的な書式化文字列で制御された、日付および時刻を表現する文字列を返します。"
"完全な書式化ディレクティブのリストについては :ref:`strftime-strptime-"
"behavior` を参照してください。"

#: ../../library/datetime.rst:1062
msgid ""
"Same as :meth:`.datetime.strftime`.  This makes it possible to specify a "
"format string for a :class:`.datetime` object when using :meth:`str.format`. "
"See section :ref:`strftime-strptime-behavior`."
msgstr ""
":meth:`.datetime.strftime` と同等です。これのおかげで :meth:`str.format` を使"
"うときに、 :class:`.datetime` のための書式文字列を指定できます。完全な書式化"
"ディレクティブのリストについては :ref:`strftime-strptime-behavior` を参照して"
"ください。"

#: ../../library/datetime.rst:1067
msgid "Examples of working with datetime objects:"
msgstr "datetime オブジェクトを使う例:"

#: ../../library/datetime.rst:1114
msgid "Using datetime with tzinfo:"
msgstr "datetime を tzinfo と組み合わせて使う:"

#: ../../library/datetime.rst:1174
msgid ":class:`.time` Objects"
msgstr ":class:`.time` オブジェクト"

#: ../../library/datetime.rst:1176
msgid ""
"A time object represents a (local) time of day, independent of any "
"particular day, and subject to adjustment via a :class:`tzinfo` object."
msgstr ""
":class:`time` オブジェクトは (ローカルの) 日中時刻を表現します。この時刻表現"
"は特定の日の影響を受けず、 :class:`tzinfo` オブジェクトを介した修正の対象とな"
"ります。"

#: ../../library/datetime.rst:1181
msgid ""
"All arguments are optional.  *tzinfo* may be ``None``, or an instance of a :"
"class:`tzinfo` subclass.  The remaining arguments may be ints or longs, in "
"the following ranges:"
msgstr ""
"全ての引数はオプションです。 *tzinfo* は ``None`` または :class:`tzinfo` クラ"
"スのサブクラスのインスタンスにすることができます。残りの引数は整数または長整"
"数で、以下のような範囲に入ります:"

#: ../../library/datetime.rst:1188
msgid "``0 <= microsecond < 1000000``."
msgstr "``0 <= microsecond < 1000000``."

#: ../../library/datetime.rst:1190
msgid ""
"If an argument outside those ranges is given, :exc:`ValueError` is raised.  "
"All default to ``0`` except *tzinfo*, which defaults to :const:`None`."
msgstr ""
"引数がこれらの範囲外にある場合、 :exc:`ValueError` が送出されます。 *tzinfo* "
"のデフォルト値が :const:`None` である以外のデフォルト値は ``0`` です。"

#: ../../library/datetime.rst:1198
msgid "The earliest representable :class:`.time`, ``time(0, 0, 0, 0)``."
msgstr "表現できる最も古い :class:`.time` で、 ``time(0, 0, 0, 0)`` です。"

#: ../../library/datetime.rst:1203
msgid "The latest representable :class:`.time`, ``time(23, 59, 59, 999999)``."
msgstr ""
"表現できる最も新しい :class:`.time` で、 ``time(23, 59, 59, 999999)`` です。"

#: ../../library/datetime.rst:1208
msgid ""
"The smallest possible difference between non-equal :class:`.time` objects, "
"``timedelta(microseconds=1)``, although note that arithmetic on :class:`."
"time` objects is not supported."
msgstr ""
"等しくない :class:`.time` オブジェクト間の最小の差で、 "
"``timedelta(microseconds=1)`` ですが, :class:`.time` オブジェクト間の四則演算"
"はサポートされていないので注意してください。"

#: ../../library/datetime.rst:1237
msgid ""
"The object passed as the tzinfo argument to the :class:`.time` constructor, "
"or ``None`` if none was passed."
msgstr ""
":class:`.time` コンストラクタに *tzinfo* 引数として与えられたオブジェクトにな"
"り、何も渡されなかった場合には ``None`` になります。"

#: ../../library/datetime.rst:1243
msgid ""
"comparison of :class:`.time` to :class:`.time`, where *a* is considered less "
"than *b* when *a* precedes *b* in time.  If one comparand is naive and the "
"other is aware, :exc:`TypeError` is raised.  If both comparands are aware, "
"and have the same :attr:`~time.tzinfo` attribute, the common :attr:`~time."
"tzinfo` attribute is ignored and the base times are compared.  If both "
"comparands are aware and have different :attr:`~time.tzinfo` attributes, the "
"comparands are first adjusted by subtracting their UTC offsets (obtained "
"from ``self.utcoffset()``). In order to stop mixed-type comparisons from "
"falling back to the default comparison by object address, when a :class:`."
"time` object is compared to an object of a different type, :exc:`TypeError` "
"is raised unless the comparison is ``==`` or ``!=``.  The latter cases "
"return :const:`False` or :const:`True`, respectively."
msgstr ""
"*a* が時間的に *b* に先行している場合に *a* は *b* より小さいとみなす、 :"
"class:`.time` と :class:`.time` の比較。 native と aware を比較しようとする"
"と :exc:`TypeError` が送出されます。比較対象が両方とも aware であり、同じ :"
"attr:`~time.tzinfo` 属性を持つ場合、 :attr:`~time.tzinfo` は無視され "
"datetime だけで比較が行われます。比較対象が両方とも aware であり、異なる :"
"attr:`~time.tzinfo` 属性を持つ場合、まず最初に (``self.utcoffset()`` で取得で"
"きる) それぞれの UTC オフセットを引く調整が行われます。型混合の比較がデフォル"
"トのオブジェクトアドレス比較となってしまうのを抑止するために、 :class:`."
"time` オブジェクトと異なる型のオブジェクトが比較されると、比較演算子が "
"``==`` または ``!=`` でないかぎり :exc:`TypeError` が送出されます。後者の場"
"合、それぞれ :const:`False` または :const:`True` を返します。"

#: ../../library/datetime.rst:1255
msgid "hash, use as dict key"
msgstr "ハッシュ化、辞書のキーとしての利用"

#: ../../library/datetime.rst:1257
msgid "efficient pickling"
msgstr "効率的な pickle 化"

#: ../../library/datetime.rst:1259
msgid ""
"in Boolean contexts, a :class:`.time` object is considered to be true if and "
"only if, after converting it to minutes and subtracting :meth:`utcoffset` "
"(or ``0`` if that's ``None``), the result is non-zero."
msgstr ""
"ブール演算コンテキストでは, :class:`.time` オブジェクトは、分に変換し, :meth:"
"`utcoffset` (``None`` を返した場合には ``0``) を差し引いて変換した後の結果が"
"ゼロでない場合、かつそのときに限って真とみなされます。"

#: ../../library/datetime.rst:1268
msgid ""
"Return a :class:`.time` with the same value, except for those attributes "
"given new values by whichever keyword arguments are specified.  Note that "
"``tzinfo=None`` can be specified to create a naive :class:`.time` from an "
"aware :class:`.time`, without conversion of the time data."
msgstr ""
"キーワード引数で指定したメンバの値を除き、同じ値をもつ :class:`.time` オブ"
"ジェクトを返します。データに対する変換を行わずに aware な :class:`.time` オブ"
"ジェクトから  naive な :class:`.time` オブジェクトを生成するために、 "
"``tzinfo=None`` を指定することもできます。"

#: ../../library/datetime.rst:1276
msgid ""
"Return a string representing the time in ISO 8601 format, HH:MM:SS.mmmmmm "
"or, if self.microsecond is 0, HH:MM:SS If :meth:`utcoffset` does not return "
"``None``, a 6-character string is appended, giving the UTC offset in "
"(signed) hours and minutes: HH:MM:SS.mmmmmm+HH:MM or, if self.microsecond is "
"0, HH:MM:SS+HH:MM"
msgstr ""
"日付と時刻を ISO 8601 形式、すなわち HH:MM:SS.mmmmmm か、 :attr:"
"`microsecond` が 0 の場合には HH:MM:SS で表した文字列を返します。 :meth:"
"`utcoffset` が ``None`` を返さない場合、 UTC からのオフセットを時間と分を表し"
"た (符号付きの) 6 文字からなる 文字列が追加されます: すなわち、 HH:MM:SS."
"mmmmmm+HH:MM となるか、 :attr:`microsecond` が 0 の場合には HH:MM:SS+HH:MM と"
"なります"

#: ../../library/datetime.rst:1284
msgid "For a time *t*, ``str(t)`` is equivalent to ``t.isoformat()``."
msgstr ""
":class:`time` オブジェクト *t* において、``str(t)`` は ``t.isoformat()`` と等"
"価です。"

#: ../../library/datetime.rst:1289
msgid ""
"Return a string representing the time, controlled by an explicit format "
"string. For a complete list of formatting directives, see section :ref:"
"`strftime-strptime-behavior`."
msgstr ""
"明示的な書式文字列で制御された、時刻を表現する文字列を返します。完全な書式化"
"ディレクティブのリストについては :ref:`strftime-strptime-behavior` を参照して"
"ください。"

#: ../../library/datetime.rst:1296
msgid ""
"Same as :meth:`.time.strftime`. This makes it possible to specify a format "
"string for a :class:`.time` object when using :meth:`str.format`. See "
"section :ref:`strftime-strptime-behavior`."
msgstr ""
":meth:`.time.strftime` と同等です。これのおかげで :meth:`str.format` を使うと"
"きに、 :class:`.time` のための書式文字列を指定できます。完全な書式化ディレク"
"ティブのリストについては :ref:`strftime-strptime-behavior` を参照してくださ"
"い。"

#: ../../library/datetime.rst:1303
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"utcoffset(None)``, and raises an exception if the latter doesn't return "
"``None`` or a :class:`timedelta` object representing a whole number of "
"minutes with magnitude less than one day."
msgstr ""
":attr:`.tzinfo` が ``None`` の場合 ``None`` を返し、そうでない場合には "
"``self.tzinfo.utcoffset(None)`` を返します。\n"
"後者の式が ``None`` もしくは、1 日未満の経過時間を表す :class:`timedelta` オ"
"ブジェクトのいずれかを返さない場合には例外を送出します。"

#: ../../library/datetime.rst:1311
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"dst(None)``, and raises an exception if the latter doesn't return ``None``, "
"or a :class:`timedelta` object representing a whole number of minutes with "
"magnitude less than one day."
msgstr ""
":attr:`.tzinfo` が ``None`` の場合 ``None`` を返し、そうでない場合には "
"``self.tzinfo.dst(None)`` を返します。\n"
"後者の式が ``None`` もしくは、 1日未満の経過時間を表す :class:`timedelta` オ"
"ブジェクトのいずれかを返さない場合には例外を送出します。"

#: ../../library/datetime.rst:1319
msgid ""
"If :attr:`.tzinfo` is ``None``, returns ``None``, else returns ``self.tzinfo."
"tzname(None)``, or raises an exception if the latter doesn't return ``None`` "
"or a string object."
msgstr ""
":attr:`.tzinfo` が ``None`` の場合 ``None`` を返し、そうでない場合には "
"``self.tzinfo.tzname(None)`` を返します。\n"
"後者の式が ``None`` か文字列オブジェクトのいずれかを返さない場合には例外を送"
"出します。"

#: ../../library/datetime.rst:1324
msgid "Example:"
msgstr "例:"

#: ../../library/datetime.rst:1354
msgid ":class:`tzinfo` Objects"
msgstr ":class:`tzinfo` オブジェクト"

#: ../../library/datetime.rst:1358
msgid ""
"This is an abstract base class, meaning that this class should not be "
"instantiated directly.  You need to derive a concrete subclass, and (at "
"least) supply implementations of the standard :class:`tzinfo` methods needed "
"by the :class:`.datetime` methods you use.  The :mod:`datetime` module does "
"not supply any concrete subclasses of :class:`tzinfo`."
msgstr ""
"これは抽象基底クラスです。つまり、このクラスは直接インスタンス化して利用しま"
"せん。具体的なサブクラスを派生し、 (少なくとも) 利用したい :class:`datetime` "
"のメソッドが必要とする :class:`tzinfo` の標準メソッドを実装してやる必要があり"
"ます。 :mod:`datetime` モジュールでは、 :class:`tzinfo` の具体的なサブクラス"
"は何ら提供していません。"

#: ../../library/datetime.rst:1364
msgid ""
"An instance of (a concrete subclass of) :class:`tzinfo` can be passed to the "
"constructors for :class:`.datetime` and :class:`.time` objects. The latter "
"objects view their attributes as being in local time, and the :class:"
"`tzinfo` object supports methods revealing offset of local time from UTC, "
"the name of the time zone, and DST offset, all relative to a date or time "
"object passed to them."
msgstr ""
":class:`tzinfo` (の具体的なサブクラス) のインスタンスは :class:`.datetime` お"
"よび :class:`.time` オブジェクトのコンストラクタに渡すことができます。後者の"
"オブジェクトでは、データ属性をローカル時刻におけるものとして見ており、 :"
"class:`tzinfo` オブジェクトはローカル時刻の UTC からのオフセット、タイムゾー"
"ンの名前、 DST オフセットを、渡された日付および時刻オブジェクトからの相対で示"
"すためのメソッドを提供します。"

#: ../../library/datetime.rst:1370
msgid ""
"Special requirement for pickling:  A :class:`tzinfo` subclass must have an :"
"meth:`__init__` method that can be called with no arguments, else it can be "
"pickled but possibly not unpickled again.  This is a technical requirement "
"that may be relaxed in the future."
msgstr ""
"pickle 化についての特殊な要求事項: :class:`tzinfo` のサブクラスは引数なしで呼"
"び出すことのできる :meth:`__init__` メソッドを持たなければなりません。そうで"
"なければ、 pickle 化することはできますがおそらく unpickle 化することはできな"
"いでしょう。これは技術的な側面からの要求であり、将来緩和されるかもしれませ"
"ん。"

#: ../../library/datetime.rst:1375
msgid ""
"A concrete subclass of :class:`tzinfo` may need to implement the following "
"methods.  Exactly which methods are needed depends on the uses made of "
"aware :mod:`datetime` objects.  If in doubt, simply implement all of them."
msgstr ""
":class:`tzinfo` の具体的なサブクラスでは、以下のメソッドを実装する必要があり"
"ます。厳密にどのメソッドが必要なのかは、 aware な :mod:`datetime` オブジェク"
"トがこのサブクラスのインスタンスをどのように使うかに依存します。不確かなら"
"ば、単に全てを実装してください。"

#: ../../library/datetime.rst:1382
msgid ""
"Return offset of local time from UTC, in minutes east of UTC.  If local time "
"is west of UTC, this should be negative.  Note that this is intended to be "
"the total offset from UTC; for example, if a :class:`tzinfo` object "
"represents both time zone and DST adjustments, :meth:`utcoffset` should "
"return their sum.  If the UTC offset isn't known, return ``None``.  Else the "
"value returned must be a :class:`timedelta` object specifying a whole number "
"of minutes in the range -1439 to 1439 inclusive (1440 = 24\\*60; the "
"magnitude of the offset must be less than one day).  Most implementations "
"of :meth:`utcoffset` will probably look like one of these two::"
msgstr ""
"ローカル時間の UTC からのオフセットを、 UTC から東向きを正とした分で返しま"
"す。ローカル時間が UTC の西側にある場合、この値は負になります。このメソッド"
"は UTC からのオフセットの総計を返すように意図されているので注意してください; "
"例えば、 :class:`tzinfo` オブジェクトがタイムゾーンと DST 修正の両方を表現す"
"る場合、 :meth:`utcoffset` はそれらの合計を返さなければなりません。 UTC オフ"
"セットが未知である場合、 ``None`` を返してください。そうでない場合には、返さ"
"れる値は -1439 から 1439 の両端を含む値 (1440 = 24\\*60 ; つまり、オフセット"
"の大きさは 1 日より短くなくてはなりません) が分で指定された :class:"
"`timedelta` オブジェクトでなければなりません。ほとんどの :meth:`utcoffset` 実"
"装は、おそらく以下の二つのうちの一つに似たものになるでしょう::"

#: ../../library/datetime.rst:1395
msgid ""
"If :meth:`utcoffset` does not return ``None``, :meth:`dst` should not return "
"``None`` either."
msgstr ""
":meth:`utcoffset` が ``None`` を返さない場合、 :meth:`dst` も ``None`` を返し"
"てはなりません。"

#: ../../library/datetime.rst:1398
msgid ""
"The default implementation of :meth:`utcoffset` raises :exc:"
"`NotImplementedError`."
msgstr ""
":meth:`utcoffset` のデフォルトの実装は :exc:`NotImplementedError` を送出しま"
"す。"

#: ../../library/datetime.rst:1404
msgid ""
"Return the daylight saving time (DST) adjustment, in minutes east of UTC, or "
"``None`` if DST information isn't known.  Return ``timedelta(0)`` if DST is "
"not in effect. If DST is in effect, return the offset as a :class:"
"`timedelta` object (see :meth:`utcoffset` for details). Note that DST "
"offset, if applicable, has already been added to the UTC offset returned by :"
"meth:`utcoffset`, so there's no need to consult :meth:`dst` unless you're "
"interested in obtaining DST info separately.  For example, :meth:`datetime."
"timetuple` calls its :attr:`~.datetime.tzinfo` attribute's :meth:`dst` "
"method to determine how the :attr:`tm_isdst` flag should be set, and :meth:"
"`tzinfo.fromutc` calls :meth:`dst` to account for DST changes when crossing "
"time zones."
msgstr ""
"夏時間 (DST) 修正を、 UTC から東向きを正とした分で返します。\n"
"DST 情報が未知の場合、 ``None`` が返されます。\n"
"DST が有効でない場合には ``timedelta(0)`` を返します。\n"
"DST が有効の場合、オフセットは :class:`timedelta` オブジェクトで返します (詳"
"細は :meth:`utcoffset` を参照してください)。\n"
"DST オフセットが利用可能な場合、この値は :meth:`utcoffset` が返す UTC からの"
"オフセットには既に加算されているため、 DST を個別に取得する必要がない限り :"
"meth:`dst` を使って問い合わせる必要はないので注意してください。\n"
"例えば、 :meth:`datetime.timetuple` は :attr:`~.datetime.tzinfo` 属性の :"
"meth:`dst` メソッドを呼んで :attr:`tm_isdst` フラグがセットされているかどうか"
"判断し、 :meth:`tzinfo.fromutc` は :meth:`dst` タイムゾーンを移動する際に "
"DST による変更があるかどうかを調べます。"

#: ../../library/datetime.rst:1415
msgid ""
"An instance *tz* of a :class:`tzinfo` subclass that models both standard and "
"daylight times must be consistent in this sense:"
msgstr ""
"標準および夏時間の両方をモデル化している :class:`tzinfo` サブクラスのインスタ"
"ンス *tz* は以下の式:"

#: ../../library/datetime.rst:1418
msgid "``tz.utcoffset(dt) - tz.dst(dt)``"
msgstr "``tz.utcoffset(dt) - tz.dst(dt)``"

#: ../../library/datetime.rst:1420
msgid ""
"must return the same result for every :class:`.datetime` *dt* with ``dt."
"tzinfo == tz``  For sane :class:`tzinfo` subclasses, this expression yields "
"the time zone's \"standard offset\", which should not depend on the date or "
"the time, but only on geographic location.  The implementation of :meth:"
"`datetime.astimezone` relies on this, but cannot detect violations; it's the "
"programmer's responsibility to ensure it.  If a :class:`tzinfo` subclass "
"cannot guarantee this, it may be able to override the default implementation "
"of :meth:`tzinfo.fromutc` to work correctly with :meth:`astimezone` "
"regardless."
msgstr ""
"が、 ``dt.tzinfo == tz`` 全ての :class:`.datetime` オブジェクト *dt* について"
"常に同じ結果を返さなければならないという点で、一貫性を持っていなければなりま"
"せん。正常に実装された :class:`tzinfo` のサブクラスでは、この式はタイムゾーン"
"における \"標準オフセット (standard offset)\" を表し、特定の日や時刻の事情で"
"はなく地理的な位置にのみ依存していなくてはなりません。 :meth:`datetime."
"astimezone` の実装はこの事実に依存していますが、違反を検出することができませ"
"ん; 正しく実装するのはプログラマの責任です。 :class:`tzinfo` のサブクラスでこ"
"れを保証することができない場合、 :meth:`tzinfo.fromutc` の実装をオーバライド"
"して、 :meth:`astimezone` に関わらず正しく動作するようにしてもかまいません。"

#: ../../library/datetime.rst:1429
msgid ""
"Most implementations of :meth:`dst` will probably look like one of these "
"two::"
msgstr ""
"ほとんどの :meth:`dst` 実装は、おそらく以下の二つのうちの一つに似たものになる"
"でしょう::"

#: ../../library/datetime.rst:1435
msgid "or ::"
msgstr "もしくは ::"

#: ../../library/datetime.rst:1447
msgid ""
"The default implementation of :meth:`dst` raises :exc:`NotImplementedError`."
msgstr ""
"デフォルトの :meth:`dst` 実装は :exc:`NotImplementedError` を送出します。"

#: ../../library/datetime.rst:1452
msgid ""
"Return the time zone name corresponding to the :class:`.datetime` object "
"*dt*, as a string. Nothing about string names is defined by the :mod:"
"`datetime` module, and there's no requirement that it mean anything in "
"particular.  For example, \"GMT\", \"UTC\", \"-500\", \"-5:00\", \"EDT\", "
"\"US/Eastern\", \"America/New York\" are all valid replies.  Return ``None`` "
"if a string name isn't known.  Note that this is a method rather than a "
"fixed string primarily because some :class:`tzinfo` subclasses will wish to "
"return different names depending on the specific value of *dt* passed, "
"especially if the :class:`tzinfo` class is accounting for daylight time."
msgstr ""
":class:`.datetime` オブジェクト *dt* に対応するタイムゾーン名を文字列で返しま"
"す。 :mod:`datetime` モジュールでは文字列名について何も定義しておらず、特に何"
"かを意味するといった要求仕様もまったくありません。例えば、 \"GMT\",\"UTC\", "
"\"-500\", \"-5:00\", \"EDT\", \"US/Eastern\", \"America/New York\" は全て有効"
"な応答となります。文字列名が未知の場合には ``None`` を返してください。 :"
"class:`tzinfo` のサブクラスでは、特に, :class:`tzinfo` クラスが夏時間について"
"記述している場合のように、渡された *dt* の特定の値によって異なった名前を返し"
"たい場合があるため、文字列値ではなくメソッドとなっていることに注意してくださ"
"い。"

#: ../../library/datetime.rst:1462
msgid ""
"The default implementation of :meth:`tzname` raises :exc:"
"`NotImplementedError`."
msgstr ""
"デフォルトの :meth:`tzname` 実装は :exc:`NotImplementedError` を送出します。"

#: ../../library/datetime.rst:1465
msgid ""
"These methods are called by a :class:`.datetime` or :class:`.time` object, "
"in response to their methods of the same names.  A :class:`.datetime` object "
"passes itself as the argument, and a :class:`.time` object passes ``None`` "
"as the argument.  A :class:`tzinfo` subclass's methods should therefore be "
"prepared to accept a *dt* argument of ``None``, or of class :class:`."
"datetime`."
msgstr ""
"以下のメソッドは :class:`.datetime` や :class:`.time` オブジェクトにおいて、"
"同名のメソッドが呼び出された際に応じて呼び出されます。 :class:`.datetime` オ"
"ブジェクトは自身を引数としてメソッドに渡し、 :class:`.time` オブジェクトは引"
"数として ``None`` をメソッドに渡します。従って、 :class:`tzinfo` のサブクラス"
"におけるメソッドは引数 *dt* が ``None`` の場合と、 :class:`.datetime` の場合"
"を受理するように用意しなければなりません。"

#: ../../library/datetime.rst:1471
msgid ""
"When ``None`` is passed, it's up to the class designer to decide the best "
"response.  For example, returning ``None`` is appropriate if the class "
"wishes to say that time objects don't participate in the :class:`tzinfo` "
"protocols.  It may be more useful for ``utcoffset(None)`` to return the "
"standard UTC offset, as there is no other convention for discovering the "
"standard offset."
msgstr ""
"``None`` が渡された場合、最良の応答方法を決めるのはクラス設計者次第です。例え"
"ば、このクラスが :class:`tzinfo` プロトコルと関係をもたないということを表明さ"
"せたければ、 ``None`` が適切です。標準時のオフセットを見つける他の手段がない"
"場合には、標準 UTC オフセットを返すために ``utcoffset(None)`` を使うともっと"
"便利かもしれません。"

#: ../../library/datetime.rst:1477
msgid ""
"When a :class:`.datetime` object is passed in response to a :class:`."
"datetime` method, ``dt.tzinfo`` is the same object as *self*.  :class:"
"`tzinfo` methods can rely on this, unless user code calls :class:`tzinfo` "
"methods directly.  The intent is that the :class:`tzinfo` methods interpret "
"*dt* as being in local time, and not need worry about objects in other "
"timezones."
msgstr ""
":class:`.datetime` オブジェクトが :meth:`.datetime` メソッドの応答として返さ"
"れた場合、 ``dt.tzinfo`` は *self* と同じオブジェクトになります。ユーザが直"
"接 :class:`tzinfo` メソッドを呼び出さないかぎり、 :class:`tzinfo` メソッドは "
"``dt.tzinfo`` と *self* が同じであることに依存します。その結果 :class:"
"`tzinfo` メソッドは *dt* がローカル時間であると解釈するので、他のタイムゾーン"
"でのオブジェクトの振る舞いについて心配する必要がありません。"

#: ../../library/datetime.rst:1483
msgid ""
"There is one more :class:`tzinfo` method that a subclass may wish to "
"override:"
msgstr ""
"サブクラスでオーバーライドすると良い、もう 1 つの :class:`tzinfo` のメソッド"
"があります:"

#: ../../library/datetime.rst:1488
msgid ""
"This is called from the default :class:`datetime.astimezone()` "
"implementation.  When called from that, ``dt.tzinfo`` is *self*, and *dt*'s "
"date and time data are to be viewed as expressing a UTC time.  The purpose "
"of :meth:`fromutc` is to adjust the date and time data, returning an "
"equivalent datetime in *self*'s local time."
msgstr ""
"デフォルトの :class:`datetime.astimezone()` 実装で呼び出されます。 :class:"
"`datetime.astimezone()` から呼ばれた場合、 ``dt.tzinfo`` は *self* であり、 "
"*dt* の日付および時刻データは UTC 時刻を表しているものとして見えます。 :meth:"
"`fromutc` の目的は、 *self* のローカル時刻に等しい :class:`datetime` オブジェ"
"クトを返すことにより日付と時刻データメンバを修正することにあります。"

#: ../../library/datetime.rst:1494
msgid ""
"Most :class:`tzinfo` subclasses should be able to inherit the default :meth:"
"`fromutc` implementation without problems.  It's strong enough to handle "
"fixed-offset time zones, and time zones accounting for both standard and "
"daylight time, and the latter even if the DST transition times differ in "
"different years.  An example of a time zone the default :meth:`fromutc` "
"implementation may not handle correctly in all cases is one where the "
"standard offset (from UTC) depends on the specific date and time passed, "
"which can happen for political reasons. The default implementations of :meth:"
"`astimezone` and :meth:`fromutc` may not produce the result you want if the "
"result is one of the hours straddling the moment the standard offset changes."
msgstr ""
"ほとんどの :class:`tzinfo` サブクラスではデフォルトの :meth:`fromutc` 実装を"
"問題なく継承できます。デフォルトの実装は、固定オフセットのタイムゾーンや、標"
"準時と夏時間の両方について記述しているタイムゾーン、そして DST 移行時刻が年に"
"よって異なる場合でさえ、扱えるくらい強力なものです。デフォルトの :meth:"
"`fromutc` 実装が全ての場合に対して正しく扱うことができないような例は、標準時"
"の (UTCからの) オフセットが引数として渡された特定の日や時刻に依存するもので、"
"これは政治的な理由によって起きることがあります。デフォルトの :meth:"
"`astimezone` や :meth:`fromutc` の実装は、結果が標準時オフセットの変化にまた"
"がる何時間かの中にある場合、期待通りの結果を生成しないかもしれません。"

#: ../../library/datetime.rst:1505
msgid ""
"Skipping code for error cases, the default :meth:`fromutc` implementation "
"acts like::"
msgstr ""
"エラーの場合のためのコードを除き、デフォルトの :meth:`fromutc` の実装は以下の"
"ように動作します::"

#: ../../library/datetime.rst:1523
msgid "Example :class:`tzinfo` classes:"
msgstr "以下に :class:`tzinfo` クラスの使用例を示します:"

#: ../../library/datetime.rst:1528
msgid ""
"Note that there are unavoidable subtleties twice per year in a :class:"
"`tzinfo` subclass accounting for both standard and daylight time, at the DST "
"transition points.  For concreteness, consider US Eastern (UTC -0500), where "
"EDT begins the minute after 1:59 (EST) on the second Sunday in March, and "
"ends the minute after 1:59 (EDT) on the first Sunday in November::"
msgstr ""
"標準時間 (standard time) および夏時間 (daylight time) の両方を記述している :"
"class:`tzinfo` のサブクラスでは、回避不能の難解な問題が年に 2 度あるので注意"
"してください。具体的な例として、東部アメリカ時刻 (US Eastern, UTC -5000) を考"
"えます。 EDT は 3 月の第二日曜日の 1:59 (EST) 以後に開始し、11 月の最初の日曜"
"日の 1:59 (EDT) に終了します::"

#: ../../library/datetime.rst:1542
msgid ""
"When DST starts (the \"start\" line), the local wall clock leaps from 1:59 "
"to 3:00.  A wall time of the form 2:MM doesn't really make sense on that "
"day, so ``astimezone(Eastern)`` won't deliver a result with ``hour == 2`` on "
"the day DST begins.  In order for :meth:`astimezone` to make this guarantee, "
"the :meth:`rzinfo.dst` method must consider times in the \"missing hour\" (2:"
"MM for Eastern) to be in daylight time."
msgstr ""
"DST の開始の際 (\"start\" の並び) ローカルの壁時計は 1:59 から 3:00 に飛 びま"
"す。この日は 2:MM の形式をとる時刻は実際には無意味となります。従っ て、 "
"``astimezone(Eastern)`` は DST が開始する日には ``hour == 2`` と なる結果を返"
"すことはありません。 :meth:`astimezone` がこのことを保証するようにするに"
"は、 :meth:`tzinfo.dst` メソッドは \"失われた時間\" (東部時刻における 2:MM) "
"が夏時間に存在することを考えなければなりません。"

#: ../../library/datetime.rst:1549
msgid ""
"When DST ends (the \"end\" line), there's a potentially worse problem: "
"there's an hour that can't be spelled unambiguously in local wall time: the "
"last hour of daylight time.  In Eastern, that's times of the form 5:MM UTC "
"on the day daylight time ends.  The local wall clock leaps from 1:59 "
"(daylight time) back to 1:00 (standard time) again. Local times of the form "
"1:MM are ambiguous. :meth:`astimezone` mimics the local clock's behavior by "
"mapping two adjacent UTC hours into the same local hour then.  In the "
"Eastern example, UTC times of the form 5:MM and 6:MM both map to 1:MM when "
"converted to Eastern.  In order for :meth:`astimezone` to make this "
"guarantee, the :meth:`tzinfo.dst` method must consider times in the "
"\"repeated hour\" to be in standard time.  This is easily arranged, as in "
"the example, by expressing DST switch times in the time zone's standard "
"local time."
msgstr ""
"DST が終了する際 (\"end\" の並び) では、問題はさらに悪化します: 1 時間の間、"
"ローカルの壁時計ではっきりと時刻をいえなくなります: それは夏時間の最後の 1 時"
"間です。東部時刻では、その日の UTC での 5:MM に夏時間は終了します。ローカルの"
"壁時計は 1:59 (夏時間) から 1:00 (標準時) に再び巻き戻されます。ローカルの時"
"刻における 1:MM はあいまいになります。 :meth:`astimezone` は二つの UTC 時刻を"
"同じローカルの時刻に対応付けることでローカルの時計の振る舞いをまねます。東部"
"時刻の例では、 5:MM および 6:MM の形式をとる UTC 時刻は両方とも、東部時刻に変"
"換された際に 1:MM に対応づけられます。 :meth:`astimezone` がこのことを保証す"
"るようにするには、 :meth:`tzinfo.dst` は \"繰り返された時間\" が標準時に存在"
"することを考慮しなければなりません。このことは、例えばタイムゾーンの標準の"
"ローカルな時刻に DST への切り替え時刻を表現することで簡単に設定することができ"
"ます。"

#: ../../library/datetime.rst:1562
msgid ""
"Applications that can't bear such ambiguities should avoid using hybrid :"
"class:`tzinfo` subclasses; there are no ambiguities when using UTC, or any "
"other fixed-offset :class:`tzinfo` subclass (such as a class representing "
"only EST (fixed offset -5 hours), or only EDT (fixed offset -4 hours))."
msgstr ""
"このようなあいまいさを許容できないアプリケーションは、ハイブリッドな :class:"
"`tzinfo` サブクラスを使って問題を回避しなければなりません; UTC や、他のオフ"
"セットが固定された :class:`tzinfo` のサブクラス (EST (-5 時間の固定オフセッ"
"ト) のみを表すクラスや、 EDT (-4 時間の固定オフセット) のみを表すクラス) を使"
"う限り、あいまいさは発生しません。"

#: ../../library/datetime.rst:1574
msgid "`pytz <https://pypi.org/project/pytz/>`_"
msgstr ""

#: ../../library/datetime.rst:1570
msgid ""
"The standard library has no :class:`tzinfo` instances, but there exists a "
"third-party library which brings the *IANA timezone database* (also known as "
"the Olson database) to Python: *pytz*."
msgstr ""
"標準ライブラリには :class:`tzinfo` インスタンスはありませんが、サードパー"
"ティーのライブラリで (Olson データベースとしても知られる) *IANA タイムゾーン"
"データベース* を Python に提供するものが存在します: それが *pytz* です。"

#: ../../library/datetime.rst:1574
msgid "*pytz* contains up-to-date information and its usage is recommended."
msgstr "*pytz* は最新の情報を含み、使用を推奨されています。"

#: ../../library/datetime.rst:1580
msgid "`IANA timezone database <https://www.iana.org/time-zones>`_"
msgstr "`IANA タイムゾーンデータベース <https://www.iana.org/time-zones>`_"

#: ../../library/datetime.rst:1577
msgid ""
"The Time Zone Database (often called tz or zoneinfo) contains code and data "
"that represent the history of local time for many representative locations "
"around the globe. It is updated periodically to reflect changes made by "
"political bodies to time zone boundaries, UTC offsets, and daylight-saving "
"rules."
msgstr ""
"(しばしば tz や zoneinfo と呼ばれる) タイムゾーンデータベースはコードとデータ"
"を保持しており、それらは地球全体にわたる多くの代表的な場所のローカル時刻の履"
"歴を表しています。政治団体によるタイムゾーンの境界、UTC オフセット、夏時間の"
"ルールの変更を反映するため、定期的にデータベースが更新されます。"

#: ../../library/datetime.rst:1586
msgid ":meth:`strftime` and :meth:`strptime` Behavior"
msgstr ":meth:`strftime` と :meth:`strptime` の振る舞い"

#: ../../library/datetime.rst:1588
msgid ""
":class:`date`, :class:`.datetime`, and :class:`.time` objects all support a "
"``strftime(format)`` method, to create a string representing the time under "
"the control of an explicit format string.  Broadly speaking, ``d."
"strftime(fmt)`` acts like the :mod:`time` module's ``time.strftime(fmt, d."
"timetuple())`` although not all objects support a :meth:`timetuple` method."
msgstr ""
":class:`date`, :class:`.datetime`,および :class:`.time` オブジェクトは全て、"
"明示的な書式文字列でコントロールして時刻表現文字列を生成するための "
"``strftime(format)`` メソッドをサポートしています。大雑把にいうと、 ``d."
"strftime(fmt)`` は :mod:`time` モジュールの ``time.strftime(fmt, d."
"timetuple())`` のように動作します。ただし全てのオブジェクトが :meth:"
"`timetuple` メソッドをサポートしているわけではありません。"

#: ../../library/datetime.rst:1594
msgid ""
"Conversely, the :meth:`datetime.strptime` class method creates a :class:`."
"datetime` object from a string representing a date and time and a "
"corresponding format string. ``datetime.strptime(date_string, format)`` is "
"equivalent to ``datetime(*(time.strptime(date_string, format)[0:6]))``, "
"except when the format includes sub-second components or timezone offset "
"information, which are supported in ``datetime.strptime`` but are discarded "
"by ``time.strptime``."
msgstr ""
"逆に :meth:`datetime.strptime` クラスメソッドは日付や時刻に対応する書式文字列"
"から :class:`.datetime` オブジェクトを生成します。 ``datetime."
"strptime(date_string, format)`` は ``datetime(*(time.strptime(date_string, "
"format)[0:6]))`` と等価です。ただし、その書式に小数秒以下の要素またはタイム"
"ゾーン情報が含まれる、``datetime.strptime``ではサポートされるが``time."
"strptime``ではサポートされないような場合はその限りではありません。"

#: ../../library/datetime.rst:1601
msgid ""
"For :class:`.time` objects, the format codes for year, month, and day should "
"not be used, as time objects have no such values.  If they're used anyway, "
"``1900`` is substituted for the year, and ``1`` for the month and day."
msgstr ""
":class:`.time` オブジェクトでは、年、月、日の値がないため、それらの書式化コー"
"ドを使うことができません。無理矢理使った場合、年は ``1900`` に置き換えられ、"
"月と日は ``1`` に置き換えられます。"

#: ../../library/datetime.rst:1605
msgid ""
"For :class:`date` objects, the format codes for hours, minutes, seconds, and "
"microseconds should not be used, as :class:`date` objects have no such "
"values.  If they're used anyway, ``0`` is substituted for them."
msgstr ""
":class:`date` オブジェクトでは、時、分、秒、マイクロ秒の値がないため、それら"
"の書式化コードを使うことができません。無理矢理使った場合、これらの値は ``0`` "
"に置き換えられます。"

#: ../../library/datetime.rst:1609
msgid ""
"The full set of format codes supported varies across platforms, because "
"Python calls the platform C library's :func:`strftime` function, and "
"platform variations are common.  To see the full set of format codes "
"supported on your platform, consult the :manpage:`strftime(3)` documentation."
msgstr ""
"Python はプラットフォームの C ライブラリの :func:`strftime` 関数を呼び出して"
"いて、プラットフォームごとにその実装が異なるのはよくあることなので、サポート"
"されるフォーマット記号全体はプラットフォームごとに様々です。プラットフォーム"
"でサポートされているフォーマット記号全体を見るには、 :manpage:`strftime(3)` "
"のドキュメントを参照してください。"

#: ../../library/datetime.rst:1614
msgid ""
"For the same reason, handling of format strings containing Unicode code "
"points that can't be represented in the charset of the current locale is "
"also platform-dependent. On some platforms such code points are preserved "
"intact in the output, while on others ``strftime`` may raise :exc:"
"`UnicodeError` or return an empty string instead."
msgstr ""
"同じ理由で、現在のロケールの文字集合で表現できない Unicode コードポイントを含"
"む書式文字列の対処もプラットフォーム依存です。\n"
"あるプラットフォームではそういったコードポイントはそのまま出力に出される一"
"方、他のプラットフォームでは ``strftime`` が :exc:`UnicodeError` を送出した"
"り、その代わりに空文字列を返したりするかもしれません。"

#: ../../library/datetime.rst:1620
msgid ""
"The following is a list of all the format codes that the C standard (1989 "
"version) requires, and these work on all platforms with a standard C "
"implementation.  Note that the 1999 version of the C standard added "
"additional format codes."
msgstr ""
"以下のリストはC標準(1989年版)が要求する全ての書式化コードで、標準C実装があれ"
"ば全ての環境で動作します。1999 年版の C 標準では書式化コードが追加されている"
"ので注意してください。"

#: ../../library/datetime.rst:1625
msgid ""
"The exact range of years for which :meth:`strftime` works also varies across "
"platforms.  Regardless of platform, years before 1900 cannot be used."
msgstr ""
":meth:`strftime` が正しく動作する年の厳密な範囲はプラットフォーム間で異なりま"
"す。プラットフォームに関わらず、1900 年以前の年は使うことができません。"

#: ../../library/datetime.rst:1629
msgid "Directive"
msgstr "ディレクティブ"

#: ../../library/datetime.rst:1629
msgid "Meaning"
msgstr "意味"

#: ../../library/datetime.rst:1629
msgid "Example"
msgstr "例"

#: ../../library/datetime.rst:1629
msgid "Notes"
msgstr "注釈"

#: ../../library/datetime.rst:1631
msgid "``%a``"
msgstr "``%a``"

#: ../../library/datetime.rst:1631
msgid "Weekday as locale's abbreviated name."
msgstr "ロケールの曜日名を短縮形で表示します。"

#: ../../library/datetime.rst:0
msgid "Sun, Mon, ..., Sat (en_US);"
msgstr "Sun, Mon, ..., Sat (en_US);"

#: ../../library/datetime.rst:0
msgid "So, Mo, ..., Sa (de_DE)"
msgstr "So, Mo, ..., Sa (de_DE)"

#: ../../library/datetime.rst:1636
msgid "``%A``"
msgstr "``%A``"

#: ../../library/datetime.rst:1636
msgid "Weekday as locale's full name."
msgstr "ロケールの曜日名を表示します。"

#: ../../library/datetime.rst:0
msgid "Sunday, Monday, ..., Saturday (en_US);"
msgstr "Sunday, Monday, ..., Saturday (en_US);"

#: ../../library/datetime.rst:0
msgid "Sonntag, Montag, ..., Samstag (de_DE)"
msgstr "Sonntag, Montag, ..., Samstag (de_DE)"

#: ../../library/datetime.rst:1641
msgid "``%w``"
msgstr "``%w``"

#: ../../library/datetime.rst:1641
msgid "Weekday as a decimal number, where 0 is Sunday and 6 is Saturday."
msgstr ""
"曜日を10進表記した文字列を表示します。0 が日曜日で、6 が土曜日を表します。"

#: ../../library/datetime.rst:1641
msgid "0, 1, ..., 6"
msgstr "0, 1, ..., 6"

#: ../../library/datetime.rst:1645
msgid "``%d``"
msgstr "``%d``"

#: ../../library/datetime.rst:1645
msgid "Day of the month as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した月中の日にち。"

#: ../../library/datetime.rst:1645
msgid "01, 02, ..., 31"
msgstr "01, 02, ..., 31"

#: ../../library/datetime.rst:1648
msgid "``%b``"
msgstr "``%b``"

#: ../../library/datetime.rst:1648
msgid "Month as locale's abbreviated name."
msgstr "ロケールの月名を短縮形で表示します。"

#: ../../library/datetime.rst:0
msgid "Jan, Feb, ..., Dec (en_US);"
msgstr "Jan, Feb, ..., Dec (en_US);"

#: ../../library/datetime.rst:0
msgid "Jan, Feb, ..., Dez (de_DE)"
msgstr "Jan, Feb, ..., Dez (de_DE)"

#: ../../library/datetime.rst:1653
msgid "``%B``"
msgstr "``%B``"

#: ../../library/datetime.rst:1653
msgid "Month as locale's full name."
msgstr "ロケールの月名を表示します。"

#: ../../library/datetime.rst:0
msgid "January, February, ..., December (en_US);"
msgstr "January, February, ..., December (en_US);"

#: ../../library/datetime.rst:0
msgid "Januar, Februar, ..., Dezember (de_DE)"
msgstr "Januar, Februar, ..., Dezember (de_DE)"

#: ../../library/datetime.rst:1658
msgid "``%m``"
msgstr "``%m``"

#: ../../library/datetime.rst:1658
msgid "Month as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した月。"

#: ../../library/datetime.rst:1658 ../../library/datetime.rst:1670
msgid "01, 02, ..., 12"
msgstr "01, 02, ..., 12"

#: ../../library/datetime.rst:1661
msgid "``%y``"
msgstr "``%y``"

#: ../../library/datetime.rst:1661
msgid "Year without century as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した世紀無しの年。"

#: ../../library/datetime.rst:1661
msgid "00, 01, ..., 99"
msgstr "00, 01, ..., 99"

#: ../../library/datetime.rst:1664
msgid "``%Y``"
msgstr "``%Y``"

#: ../../library/datetime.rst:1664
msgid "Year with century as a decimal number."
msgstr "西暦 (4桁) の 10 進表記を表します。"

#: ../../library/datetime.rst:1664
msgid "1970, 1988, 2001, 2013"
msgstr "1970, 1988, 2001, 2013"

#: ../../library/datetime.rst:1667
msgid "``%H``"
msgstr "``%H``"

#: ../../library/datetime.rst:1667
msgid "Hour (24-hour clock) as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した時 (24時間表記)。"

#: ../../library/datetime.rst:1667
msgid "00, 01, ..., 23"
msgstr "00, 01, ..., 23"

#: ../../library/datetime.rst:1670
msgid "``%I``"
msgstr "``%I``"

#: ../../library/datetime.rst:1670
msgid "Hour (12-hour clock) as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した時 (12時間表記)。"

#: ../../library/datetime.rst:1673
msgid "``%p``"
msgstr "``%p``"

#: ../../library/datetime.rst:1673
msgid "Locale's equivalent of either AM or PM."
msgstr "ロケールの AM もしくは PM と等価な文字列になります。"

#: ../../library/datetime.rst:0
msgid "AM, PM (en_US);"
msgstr "AM, PM (en_US);"

#: ../../library/datetime.rst:0
msgid "am, pm (de_DE)"
msgstr "am, pm (de_DE)"

#: ../../library/datetime.rst:1673
msgid "\\(1), \\(2)"
msgstr "\\(1), \\(2)"

#: ../../library/datetime.rst:1676
msgid "``%M``"
msgstr "``%M``"

#: ../../library/datetime.rst:1676
msgid "Minute as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した分。"

#: ../../library/datetime.rst:1676 ../../library/datetime.rst:1679
msgid "00, 01, ..., 59"
msgstr "00, 01, ..., 59"

#: ../../library/datetime.rst:1679
msgid "``%S``"
msgstr "``%S``"

#: ../../library/datetime.rst:1679
msgid "Second as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した秒。"

#: ../../library/datetime.rst:1682
msgid "``%f``"
msgstr "``%f``"

#: ../../library/datetime.rst:1682
msgid "Microsecond as a decimal number, zero-padded on the left."
msgstr "10進数で表記したマイクロ秒 (左側から0埋めされます)。"

#: ../../library/datetime.rst:1682
msgid "000000, 000001, ..., 999999"
msgstr "000000, 000001, ..., 999999"

#: ../../library/datetime.rst:1682
msgid "\\(4)"
msgstr "\\(4)"

#: ../../library/datetime.rst:1686 ../../library/datetime.rst:1766
msgid "``%z``"
msgstr "``%z``"

#: ../../library/datetime.rst:1686
msgid ""
"UTC offset in the form +HHMM or -HHMM (empty string if the the object is "
"naive)."
msgstr ""
"UTCオフセットを +HHMM もしくは -HHMM の形式で表示します (オブジェクトがnaive"
"であれば空文字列)。"

#: ../../library/datetime.rst:1686
msgid "(empty), +0000, -0400, +1030"
msgstr "(空文字列), +0000, -0400, +1030"

#: ../../library/datetime.rst:1686
msgid "\\(5)"
msgstr "\\(5)"

#: ../../library/datetime.rst:1690 ../../library/datetime.rst:1771
msgid "``%Z``"
msgstr "``%Z``"

#: ../../library/datetime.rst:1690
msgid "Time zone name (empty string if the object is naive)."
msgstr "タイムゾーンの名前を表示します (オブジェクトがnaiveであれば空文字列)。"

#: ../../library/datetime.rst:1690
msgid "(empty), UTC, EST, CST"
msgstr "(空文字列), UTC, EST, CST"

#: ../../library/datetime.rst:1693
msgid "``%j``"
msgstr "``%j``"

#: ../../library/datetime.rst:1693
msgid "Day of the year as a zero-padded decimal number."
msgstr "0埋めした10進数で表記した年中の日にち。"

#: ../../library/datetime.rst:1693
msgid "001, 002, ..., 366"
msgstr "001, 002, ..., 366"

#: ../../library/datetime.rst:1696
msgid "``%U``"
msgstr "``%U``"

#: ../../library/datetime.rst:1696
msgid ""
"Week number of the year (Sunday as the first day of the week) as a zero "
"padded decimal number. All days in a new year preceding the first Sunday are "
"considered to be in week 0."
msgstr ""
"0埋めした10進数で表記した年中の週番号 (週の始まりは日曜日とする)。新年の最初"
"の日曜日に先立つ日は 0週に属するとします。"

#: ../../library/datetime.rst:1696 ../../library/datetime.rst:1704
msgid "00, 01, ..., 53"
msgstr "00, 01, ..., 53"

#: ../../library/datetime.rst:1696 ../../library/datetime.rst:1704
msgid "\\(6)"
msgstr "\\(6)"

#: ../../library/datetime.rst:1704
msgid "``%W``"
msgstr "``%W``"

#: ../../library/datetime.rst:1704
msgid ""
"Week number of the year (Monday as the first day of the week) as a decimal "
"number. All days in a new year preceding the first Monday are considered to "
"be in week 0."
msgstr ""
"0埋めした10進数で表記した年中の週番号 (週の始まりは月曜日とする)。新年の最初"
"の月曜日に先立つ日は 0週に属するとします。"

#: ../../library/datetime.rst:1712
msgid "``%c``"
msgstr "``%c``"

#: ../../library/datetime.rst:1712
msgid "Locale's appropriate date and time representation."
msgstr "ロケールの日時を適切な形式で表します。"

#: ../../library/datetime.rst:0
msgid "Tue Aug 16 21:30:00 1988 (en_US);"
msgstr "Tue Aug 16 21:30:00 1988 (en_US);"

#: ../../library/datetime.rst:0
msgid "Di 16 Aug 21:30:00 1988 (de_DE)"
msgstr "Di 16 Aug 21:30:00 1988 (de_DE)"

#: ../../library/datetime.rst:1717
msgid "``%x``"
msgstr "``%x``"

#: ../../library/datetime.rst:1717
msgid "Locale's appropriate date representation."
msgstr "ロケールの日付を適切な形式で表します。"

#: ../../library/datetime.rst:0
msgid "08/16/88 (None);"
msgstr "08/16/88 (None);"

#: ../../library/datetime.rst:0
msgid "08/16/1988 (en_US);"
msgstr "08/16/1988 (en_US);"

#: ../../library/datetime.rst:0
msgid "16.08.1988 (de_DE)"
msgstr "16.08.1988 (de_DE)"

#: ../../library/datetime.rst:1721
msgid "``%X``"
msgstr "``%X``"

#: ../../library/datetime.rst:1721
msgid "Locale's appropriate time representation."
msgstr "ロケールの時間を適切な形式で表します。"

#: ../../library/datetime.rst:0
msgid "21:30:00 (en_US);"
msgstr "21:30:00 (en_US);"

#: ../../library/datetime.rst:0
msgid "21:30:00 (de_DE)"
msgstr "21:30:00 (de_DE)"

#: ../../library/datetime.rst:1724
msgid "``%%``"
msgstr "``%%``"

#: ../../library/datetime.rst:1724
msgid "A literal ``'%'`` character."
msgstr "文字 ``'%'`` を表します。"

#: ../../library/datetime.rst:1724
msgid "%"
msgstr "%"

#: ../../library/datetime.rst:1730
msgid ""
"Because the format depends on the current locale, care should be taken when "
"making assumptions about the output value. Field orderings will vary (for "
"example, \"month/day/year\" versus \"day/month/year\"), and the output may "
"contain Unicode characters encoded using the locale's default encoding (for "
"example, if the current locale is ``ja_JP``, the default encoding could be "
"any one of ``eucJP``, ``SJIS``, or ``utf-8``; use :meth:`locale.getlocale` "
"to determine the current locale's encoding)."
msgstr ""
"フォーマットは現在のロケールに依存するので、出力値に何か仮定を置くときは注意"
"すべきです。フィールドの順序は様々で (例えば、\"月/日/年\" と \"日/月/年"
"\") 、出力はロケールのデフォルトエンコーディングでエンコードされた Unicode 文"
"字列を含むかもしれません (例えば、現在のロケールが ``ja_JP`` だった場合、デ"
"フォルトエンコーディングは ``eucJP`` 、 ``SJIS`` 、 ``utf-8`` のいづれかで"
"す; :meth:`locale.getlocale` を使って現在のロケールのエンコーディングを確認し"
"ます) 。"

#: ../../library/datetime.rst:1739
msgid ""
"When used with the :meth:`strptime` method, the ``%p`` directive only "
"affects the output hour field if the ``%I`` directive is used to parse the "
"hour."
msgstr ""
":meth:`strptime` メソッドと共に使われた場合、 ``%p`` 指定子は出力の時間フィー"
"ルドのみに影響し、 ``%I`` 指定子が使われたかのように振る舞います。"

#: ../../library/datetime.rst:1743
msgid ""
"Unlike the :mod:`time` module, the :mod:`datetime` module does not support "
"leap seconds."
msgstr ""
":mod:`time` モジュールと違い、 :mod:`datetime` モジュールはうるう秒をサポート"
"していません。"

#: ../../library/datetime.rst:1747
msgid ""
"``%f`` is an extension to the set of format characters in the C standard "
"(but implemented separately in datetime objects, and therefore always "
"available).  When used with the :meth:`strptime` method, the ``%f`` "
"directive accepts from one to six digits and zero pads on the right."
msgstr ""
"``%f`` は C 標準規格の書式化コードセットへの拡張です (ただし datetime オブ"
"ジェクトとは分けて実装してあるので、常に使えます)。 :meth:`strptime` メソッド"
"と共に使われた場合、 ``%f`` 指定子は 1 桁から 6 桁の数字を受け付け、右側から "
"0 埋めされます。"

#: ../../library/datetime.rst:1755
msgid ""
"For a naive object, the ``%z`` and ``%Z`` format codes are replaced by empty "
"strings."
msgstr ""
"naive オブジェクトでは、書式化コード ``%z`` および ``%Z`` は空文字列に置き換"
"えられます。"

#: ../../library/datetime.rst:1758
msgid "For an aware object:"
msgstr "aware オブジェクトでは以下のようになります:"

#: ../../library/datetime.rst:1761
msgid ""
":meth:`utcoffset` is transformed into a 5-character string of the form +HHMM "
"or -HHMM, where HH is a 2-digit string giving the number of UTC offset "
"hours, and MM is a 2-digit string giving the number of UTC offset minutes.  "
"For example, if :meth:`utcoffset` returns ``timedelta(hours=-3, "
"minutes=-30)``, ``%z`` is replaced with the string ``'-0330'``."
msgstr ""
":meth:`utcoffset` は +HHMM あるいは -HHMM の形式をもった 5 文字の文字列に変換"
"されます。HH は UTC オフセット時間を与える 2 桁の文字列で、 MM は UTC オフ"
"セット分を与える 2 桁の文字列です。例えば、 :meth:`utcoffset` が "
"``timedelta(hours=-3, minutes=-30)`` を返した場合、 ``%z`` は文字列 "
"``'-0330'`` に置き換わります。"

#: ../../library/datetime.rst:1769
msgid ""
"If :meth:`tzname` returns ``None``, ``%Z`` is replaced by an empty string.  "
"Otherwise ``%Z`` is replaced by the returned value, which must be a string."
msgstr ""
":meth:`tzname` が ``None`` を返した場合、 ``%Z`` は空文字列に置き換 わりま"
"す。そうでない場合、 ``%Z`` は返された値に置き換わりますが、 これは文字列でな"
"ければなりません。"

#: ../../library/datetime.rst:1774
msgid ""
"When used with the :meth:`strptime` method, ``%U`` and ``%W`` are only used "
"in calculations when the day of the week and the year are specified."
msgstr ""
":meth:`strptime` メソッドと共に使われた場合、 ``%U`` と ``%W`` 指定子は、年と"
"曜日が指定された場合の計算でのみ使われます。"

#: ../../library/datetime.rst:1779
msgid "Footnotes"
msgstr "注記"

#: ../../library/datetime.rst:1780
msgid "If, that is, we ignore the effects of Relativity"
msgstr "もし相対性理論の効果を無視するならば、ですが"
