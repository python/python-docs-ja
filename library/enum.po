# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Takanori Suzuki <takanori@takanory.net>, 2021
# tomo, 2022
# Yosuke Miyashita, 2024
# 石井明久, 2024
# Arihiro TAKASE, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-06 14:16+0000\n"
"PO-Revision-Date: 2021-06-28 01:05+0000\n"
"Last-Translator: Arihiro TAKASE, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/enum.rst:2
msgid ":mod:`!enum` --- Support for enumerations"
msgstr ":mod:`!enum` --- 列挙型のサポート"

#: ../../library/enum.rst:14
msgid "**Source code:** :source:`Lib/enum.py`"
msgstr "**ソースコード:** :source:`Lib/enum.py`"

#: ../../library/enum.rst:18
msgid ""
"This page contains the API reference information. For tutorial information "
"and discussion of more advanced topics, see"
msgstr ""
"このページには、リファレンス情報だけが含まれています。チュートリアルは、以下"
"のページを参照してください"

#: ../../library/enum.rst:21
msgid ":ref:`Basic Tutorial <enum-basic-tutorial>`"
msgstr ":ref:`基本チュートリアル <enum-basic-tutorial>`"

#: ../../library/enum.rst:22
msgid ":ref:`Advanced Tutorial <enum-advanced-tutorial>`"
msgstr ":ref:`上級チュートリアル <enum-advanced-tutorial>`"

#: ../../library/enum.rst:23
msgid ":ref:`Enum Cookbook <enum-cookbook>`"
msgstr ":ref:`Enum クックブック <enum-cookbook>`"

#: ../../library/enum.rst:27
msgid "An enumeration:"
msgstr "列挙型とは:"

#: ../../library/enum.rst:29
msgid "is a set of symbolic names (members) bound to unique values"
msgstr "一意の値に紐付けられたシンボリックな名前の集合です"

#: ../../library/enum.rst:30
msgid ""
"can be iterated over to return its canonical (i.e. non-alias) members in "
"definition order"
msgstr ""
"反復可能であり、定義順にその正規の（エイリアスでない）メンバーを返します"

#: ../../library/enum.rst:32
msgid "uses *call* syntax to return members by value"
msgstr "値を渡してメンバーを返すために、 *呼び出し* 構文を使用します"

#: ../../library/enum.rst:33
msgid "uses *index* syntax to return members by name"
msgstr "名前を受け取ってメンバーを返すために、 *インデックス* 構文を使用します"

#: ../../library/enum.rst:35
msgid ""
"Enumerations are created either by using :keyword:`class` syntax, or by "
"using function-call syntax::"
msgstr ""
"列挙型は、:keyword:`class` 構文を使用するか、関数呼び出し構文を使用して作成さ"
"れます::"

#: ../../library/enum.rst:38
msgid ""
">>> from enum import Enum\n"
"\n"
">>> # class syntax\n"
">>> class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 3\n"
"\n"
">>> # functional syntax\n"
">>> Color = Enum('Color', ['RED', 'GREEN', 'BLUE'])"
msgstr ""

#: ../../library/enum.rst:49
msgid ""
"Even though we can use :keyword:`class` syntax to create Enums, Enums are "
"not normal Python classes.  See :ref:`How are Enums different? <enum-class-"
"differences>` for more details."
msgstr ""
"Enum の作成に :keyword:`class` 文を使用できるものの、Enum は通常の Python ク"
"ラスではありません。詳細は :ref:`Enum はどう違うのか? <enum-class-"
"differences>` を参照してください。"

#: ../../library/enum.rst:53
msgid "Nomenclature"
msgstr "用語"

#: ../../library/enum.rst:55
msgid "The class :class:`!Color` is an *enumeration* (or *enum*)"
msgstr "クラス :class:`!Color` は *列挙型* (または *Enum*) です"

#: ../../library/enum.rst:56
msgid ""
"The attributes :attr:`!Color.RED`, :attr:`!Color.GREEN`, etc., are "
"*enumeration members* (or *members*) and are functionally constants."
msgstr ""
"属性 :attr:`!Color.RED`, :attr:`!Color.GREEN` などは *列挙型のメンバー* (また"
"は *メンバー*) で、機能的には定数です。"

#: ../../library/enum.rst:58
msgid ""
"The enum members have *names* and *values* (the name of :attr:`!Color.RED` "
"is ``RED``, the value of :attr:`!Color.BLUE` is ``3``, etc.)"
msgstr ""
"列挙型のメンバーは *名前* と *値* を持ちます (:attr:`!Color.RED` の名前は "
"``RED`` 、 :attr:`!Color.BLUE` の値は ``3`` など。)"

#: ../../library/enum.rst:65
msgid "Module Contents"
msgstr "モジュールコンテンツ"

#: ../../library/enum.rst:67
msgid ":class:`EnumType`"
msgstr ":class:`EnumType`"

#: ../../library/enum.rst:69
msgid "The ``type`` for Enum and its subclasses."
msgstr "Enumおよびそのサブクラスのための ``type`` です。"

#: ../../library/enum.rst:71
msgid ":class:`Enum`"
msgstr ":class:`Enum`"

#: ../../library/enum.rst:73
msgid "Base class for creating enumerated constants."
msgstr "列挙型定数を作成する基底クラスです。"

#: ../../library/enum.rst:75
msgid ":class:`IntEnum`"
msgstr ":class:`IntEnum`"

#: ../../library/enum.rst:77
msgid ""
"Base class for creating enumerated constants that are also subclasses of :"
"class:`int`. (`Notes`_)"
msgstr ""
":class:`int` のサブクラスでもある列挙型定数を作成する基底クラスです。"
"(`Notes`_)"

#: ../../library/enum.rst:80
msgid ":class:`StrEnum`"
msgstr ":class:`StrEnum`"

#: ../../library/enum.rst:82
msgid ""
"Base class for creating enumerated constants that are also subclasses of :"
"class:`str`. (`Notes`_)"
msgstr ""
":class:`str` のサブクラスでもある列挙型定数を作成する基底クラスです。"
"(`Notes`_)"

#: ../../library/enum.rst:85
msgid ":class:`Flag`"
msgstr ":class:`Flag`"

#: ../../library/enum.rst:87
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operations without losing their :class:`Flag` membership."
msgstr ""
"列挙型定数を作成する基底クラスで、ビット演算を使って組み合わせられ、その結果"
"も :class:`IntFlag` メンバーになります。"

#: ../../library/enum.rst:90
msgid ":class:`IntFlag`"
msgstr ":class:`IntFlag`"

#: ../../library/enum.rst:92
msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operators without losing their :class:`IntFlag` membership. :class:"
"`IntFlag` members are also subclasses of :class:`int`. (`Notes`_)"
msgstr ""
"列挙型定数を作成する基底クラスで、ビット演算子を使って組み合わせられ、その結"
"果も :class:`IntFlag` メンバーになります。\n"
":class:`IntFlag` は :class:`int` のサブクラスでもあります。(`Notes`_)"

#: ../../library/enum.rst:96
msgid ":class:`ReprEnum`"
msgstr ":class:`ReprEnum`"

#: ../../library/enum.rst:98
msgid ""
"Used by :class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag` to keep "
"the :class:`str() <str>` of the mixed-in type."
msgstr ""
":class:`IntEnum`、:class:`StrEnum`、および :class:`IntFlag` によって使用さ"
"れ、mix-inされた型の :class:`str() <str>` を保持します。"

#: ../../library/enum.rst:101
msgid ":class:`EnumCheck`"
msgstr ":class:`EnumCheck`"

#: ../../library/enum.rst:103
msgid ""
"An enumeration with the values ``CONTINUOUS``, ``NAMED_FLAGS``, and "
"``UNIQUE``, for use with :func:`verify` to ensure various constraints are "
"met by a given enumeration."
msgstr ""
"``CONTINUOUS``、``NAMED_FLAGS``、``UNIQUE`` の値を持つ列挙型です。 :func:"
"`verify` と共に使用して、指定された列挙型がさまざまな制約を満たしていることを"
"確認します。"

#: ../../library/enum.rst:107
msgid ":class:`FlagBoundary`"
msgstr ":class:`FlagBoundary`"

#: ../../library/enum.rst:109
msgid ""
"An enumeration with the values ``STRICT``, ``CONFORM``, ``EJECT``, and "
"``KEEP`` which allows for more fine-grained control over how invalid values "
"are dealt with in an enumeration."
msgstr ""
" ``STRICT``、``CONFORM``、``EJECT``、``KEEP`` の値を持つ列挙型です。列挙型で"
"の無効な値の扱いについて、より細かい制御が可能です。"

#: ../../library/enum.rst:113
msgid ":class:`auto`"
msgstr ":class:`auto`"

#: ../../library/enum.rst:115
msgid ""
"Instances are replaced with an appropriate value for Enum members. :class:"
"`StrEnum` defaults to the lower-cased version of the member name, while "
"other Enums default to 1 and increase from there."
msgstr ""
"インスタンスは列挙型のメンバーに適切な値で置き換えられます。:class:`StrEnum` "
"ではデフォルトの値がメンバー名を小文字にしたものですが、その他の列挙型のデ"
"フォルトは1から連番で増加する値となります。"

#: ../../library/enum.rst:119
msgid ":func:`~enum.property`"
msgstr ":func:`~enum.property`"

#: ../../library/enum.rst:121
msgid ""
"Allows :class:`Enum` members to have attributes without conflicting with "
"member names.  The ``value`` and ``name`` attributes are implemented this "
"way."
msgstr ""
"メンバー名との競合を避けながら :class:`Enum` メンバーに属性を持たせます。"
"``value`` 属性と ``name`` 属性はこの方法で実装されます。"

#: ../../library/enum.rst:125
msgid ":func:`unique`"
msgstr ":func:`unique`"

#: ../../library/enum.rst:127
msgid ""
"Enum class decorator that ensures only one name is bound to any one value."
msgstr ""
"一つの名前だけがひとつの値に束縛されていることを保証する Enum クラスのデコ"
"レーターです。"

#: ../../library/enum.rst:129
msgid ":func:`verify`"
msgstr ":func:`verify`"

#: ../../library/enum.rst:131
msgid ""
"Enum class decorator that checks user-selectable constraints on an "
"enumeration."
msgstr ""

#: ../../library/enum.rst:134
msgid ":func:`member`"
msgstr ":func:`member`"

#: ../../library/enum.rst:136
msgid "Make ``obj`` a member.  Can be used as a decorator."
msgstr "``obj`` をメンバーにします。デコレータとして使用できます。"

#: ../../library/enum.rst:138
msgid ":func:`nonmember`"
msgstr ":func:`nonmember`"

#: ../../library/enum.rst:140
msgid "Do not make ``obj`` a member.  Can be used as a decorator."
msgstr "``obj`` をメンバーにしません。デコレータとして使用できます。"

#: ../../library/enum.rst:142
msgid ":func:`global_enum`"
msgstr ":func:`global_enum`"

#: ../../library/enum.rst:144
msgid ""
"Modify the :class:`str() <str>` and :func:`repr` of an enum to show its "
"members as belonging to the module instead of its class, and export the enum "
"members to the global namespace."
msgstr ""

#: ../../library/enum.rst:148
msgid ":func:`show_flag_values`"
msgstr ":func:`show_flag_values`"

#: ../../library/enum.rst:150
msgid "Return a list of all power-of-two integers contained in a flag."
msgstr "フラグに含まれる、全ての2の累乗の整数のリストを返します。"

#: ../../library/enum.rst:153
msgid "``Flag``, ``IntFlag``, ``auto``"
msgstr "``Flag``, ``IntFlag``, ``auto``"

#: ../../library/enum.rst:154
msgid ""
"``StrEnum``, ``EnumCheck``, ``ReprEnum``, ``FlagBoundary``, ``property``, "
"``member``, ``nonmember``, ``global_enum``, ``show_flag_values``"
msgstr ""
"``StrEnum``, ``EnumCheck``, ``ReprEnum``, ``FlagBoundary``, ``property``, "
"``member``, ``nonmember``, ``global_enum``, ``show_flag_values``"

#: ../../library/enum.rst:159
msgid "Data Types"
msgstr "データ型"

#: ../../library/enum.rst:164
msgid ""
"*EnumType* is the :term:`metaclass` for *enum* enumerations.  It is possible "
"to subclass *EnumType* -- see :ref:`Subclassing EnumType <enumtype-"
"examples>` for details."
msgstr ""
"*EnumType* は *enum* 列挙型の :term:`メタクラス <metaclass>` です。 "
"*EnumType* のサブクラスを作成することが可能です -- 詳細は :ref:`EnumTypeのサ"
"ブクラスを作る <enumtype-examples>` を参照してください。"

#: ../../library/enum.rst:168
msgid ""
"``EnumType`` is responsible for setting the correct :meth:`!__repr__`, :meth:"
"`!__str__`, :meth:`!__format__`, and :meth:`!__reduce__` methods on the "
"final *enum*, as well as creating the enum members, properly handling "
"duplicates, providing iteration over the enum class, etc."
msgstr ""

#: ../../library/enum.rst:175
msgid "This method is called in two different ways:"
msgstr "このメソッドは2つの異なる方法で呼び出されます。"

#: ../../library/enum.rst:177
msgid "to look up an existing member:"
msgstr "既存のメンバーを検索する:"

#: ../../library/enum.rst:0
msgid "cls"
msgstr "cls"

#: ../../library/enum.rst:179 ../../library/enum.rst:185
msgid "The enum class being called."
msgstr "呼び出されるenumクラス。"

#: ../../library/enum.rst:0
msgid "value"
msgstr "value"

#: ../../library/enum.rst:180
msgid "The value to lookup."
msgstr "検索する値。"

#: ../../library/enum.rst:182
msgid ""
"to use the ``cls`` enum to create a new enum (only if the existing enum does "
"not have any members):"
msgstr ""
"``cls`` を使って新しい列挙型を作成する（既存の列挙型がメンバーを持たない場合"
"のみ）:"

#: ../../library/enum.rst:186
msgid "The name of the new Enum to create."
msgstr "新しく作成するEnumの名前。"

#: ../../library/enum.rst:0
msgid "names"
msgstr "names"

#: ../../library/enum.rst:187
msgid "The names/values of the members for the new Enum."
msgstr "新しく作成するEnumのメンバーの名前/値のリスト。"

#: ../../library/enum.rst:0
msgid "module"
msgstr "module"

#: ../../library/enum.rst:188
msgid "The name of the module the new Enum is created in."
msgstr "新しく作成するEnumの属するモジュール名。"

#: ../../library/enum.rst:0
msgid "qualname"
msgstr "qualname"

#: ../../library/enum.rst:189
msgid "The actual location in the module where this Enum can be found."
msgstr ""

#: ../../library/enum.rst:0
msgid "type"
msgstr "type"

#: ../../library/enum.rst:190
msgid "A mix-in type for the new Enum."
msgstr "新しく作成するEnumのmix-in型。"

#: ../../library/enum.rst:0
msgid "start"
msgstr "start"

#: ../../library/enum.rst:191
msgid "The first integer value for the Enum (used by :class:`auto`)."
msgstr "Enumの最初の整数値（:class:`auto` で使用されます）。"

#: ../../library/enum.rst:0
msgid "boundary"
msgstr "boundary"

#: ../../library/enum.rst:192
msgid ""
"How to handle out-of-range values from bit operations (:class:`Flag` only)."
msgstr "bit演算での範囲外の値の扱い方（:class:`Flag` のみ）。"

#: ../../library/enum.rst:196
msgid "Returns ``True`` if member belongs to the ``cls``::"
msgstr "メンバーが ``cls`` に属している場合は ``True`` を返します::"

#: ../../library/enum.rst:198
msgid ""
">>> some_var = Color.RED\n"
">>> some_var in Color\n"
"True\n"
">>> Color.RED.value in Color\n"
"True"
msgstr ""

#: ../../library/enum.rst:206
msgid ""
"Before Python 3.12, a ``TypeError`` is raised if a non-Enum-member is used "
"in a containment check."
msgstr ""
"Python 3.12 以前では、非Enumメンバーの包含判定が行われた場合、``TypeError`` "
"が送出されます。"

#: ../../library/enum.rst:211
msgid ""
"Returns ``['__class__', '__doc__', '__members__', '__module__']`` and the "
"names of the members in *cls*::"
msgstr ""
"``['__class__', '__doc__', '__members__', '__module__']`` と、 *cls* に属する"
"メンバー名を返します::"

#: ../../library/enum.rst:214
msgid ""
">>> dir(Color)\n"
"['BLUE', 'GREEN', 'RED', '__class__', '__contains__', '__doc__', "
"'__getitem__', '__init_subclass__', '__iter__', '__len__', '__members__', "
"'__module__', '__name__', '__qualname__']"
msgstr ""

#: ../../library/enum.rst:219
msgid ""
"Returns the Enum member in *cls* matching *name*, or raises a :exc:"
"`KeyError`::"
msgstr "*cls* 内の一致するメンバーを返すか、:exc:`KeyError` を送出します::"

#: ../../library/enum.rst:221
msgid ""
">>> Color['BLUE']\n"
"<Color.BLUE: 3>"
msgstr ""

#: ../../library/enum.rst:226
msgid "Returns each member in *cls* in definition order::"
msgstr " *cls* 内の各メンバー を定義順に返します::"

#: ../../library/enum.rst:228
msgid ""
">>> list(Color)\n"
"[<Color.RED: 1>, <Color.GREEN: 2>, <Color.BLUE: 3>]"
msgstr ""

#: ../../library/enum.rst:233
msgid "Returns the number of member in *cls*::"
msgstr "*cls* 内のメンバーの数を返します。::"

#: ../../library/enum.rst:235
msgid ""
">>> len(Color)\n"
"3"
msgstr ""

#: ../../library/enum.rst:240
msgid "Returns a mapping of every enum name to its member, including aliases"
msgstr ""

#: ../../library/enum.rst:244
msgid "Returns each member in *cls* in reverse definition order::"
msgstr "*cls* 内の各メンバー を定義順の逆順で返します::"

#: ../../library/enum.rst:246
msgid ""
">>> list(reversed(Color))\n"
"[<Color.BLUE: 3>, <Color.GREEN: 2>, <Color.RED: 1>]"
msgstr ""

#: ../../library/enum.rst:251
msgid ""
"Adds a new name as an alias to an existing member.  Raises a :exc:"
"`NameError` if the name is already assigned to a different member."
msgstr ""

#: ../../library/enum.rst:256
msgid ""
"Adds a new value as an alias to an existing member.  Raises a :exc:"
"`ValueError` if the value is already linked with a different member."
msgstr ""

#: ../../library/enum.rst:261
msgid ""
"Before 3.11 ``EnumType`` was called ``EnumMeta``, which is still available "
"as an alias."
msgstr ""

#: ../../library/enum.rst:266
msgid "*Enum* is the base class for all *enum* enumerations."
msgstr "*Enum* は全ての *enum* 列挙型の基底クラスです。"

#: ../../library/enum.rst:270
msgid "The name used to define the ``Enum`` member::"
msgstr "``Enum`` メンバーを定義するために使用される名前::"

#: ../../library/enum.rst:272
msgid ""
">>> Color.BLUE.name\n"
"'BLUE'"
msgstr ""

#: ../../library/enum.rst:277
msgid "The value given to the ``Enum`` member::"
msgstr "``Enum`` メンバーに与えられた値::"

#: ../../library/enum.rst:279
msgid ""
">>> Color.RED.value\n"
"1"
msgstr ""

#: ../../library/enum.rst:282 ../../library/enum.rst:302
msgid "Value of the member, can be set in :meth:`~Enum.__new__`."
msgstr ""

#: ../../library/enum.rst:284
msgid "Enum member values"
msgstr "列挙型のメンバー値"

#: ../../library/enum.rst:286
msgid ""
"Member values can be anything: :class:`int`, :class:`str`, etc.  If the "
"exact value is unimportant you may use :class:`auto` instances and an "
"appropriate value will be chosen for you.  See :class:`auto` for the details."
msgstr ""
"メンバー値は何であっても構いません: :class:`int`, :class:`str` などなど。\n"
"正確な値が重要でない場合は、 :class:`auto` インスタンスを使っておくと、適切な"
"値が選ばれます。\n"
"詳細は :class:`auto` を参照してください。"

#: ../../library/enum.rst:291
msgid ""
"While mutable/unhashable values, such as :class:`dict`, :class:`list` or a "
"mutable :class:`~dataclasses.dataclass`, can be used, they will have a "
"quadratic performance impact during creation relative to the total number of "
"mutable/unhashable values in the enum."
msgstr ""

#: ../../library/enum.rst:298
msgid "Name of the member."
msgstr ""

#: ../../library/enum.rst:306
msgid ""
"No longer used, kept for backward compatibility. (class attribute, removed "
"during class creation)."
msgstr ""

#: ../../library/enum.rst:311
msgid ""
"``_ignore_`` is only used during creation and is removed from the "
"enumeration once creation is complete."
msgstr ""
"``_ignore_`` は列挙の作成中にのみ使用され、作成が完了すると削除されます。"

#: ../../library/enum.rst:314
msgid ""
"``_ignore_`` is a list of names that will not become members, and whose "
"names will also be removed from the completed enumeration.  See :ref:"
"`TimePeriod <enum-time-period>` for an example."
msgstr ""
"``_ignore_`` は、メンバーにならず、作成された列挙から削除される名前のリストで"
"す。例については、:ref:`TimePeriod <enum-time-period>` を参照してください。"

#: ../../library/enum.rst:320
msgid ""
"Returns ``['__class__', '__doc__', '__module__', 'name', 'value']`` and any "
"public methods defined on *self.__class__*::"
msgstr ""
" ``['__class__', '__doc__', '__module__', 'name', 'value']`` と *self."
"__class__* に定義されたpublicなメソッドを返します::"

#: ../../library/enum.rst:323
msgid ""
">>> from datetime import date\n"
">>> class Weekday(Enum):\n"
"...     MONDAY = 1\n"
"...     TUESDAY = 2\n"
"...     WEDNESDAY = 3\n"
"...     THURSDAY = 4\n"
"...     FRIDAY = 5\n"
"...     SATURDAY = 6\n"
"...     SUNDAY = 7\n"
"...     @classmethod\n"
"...     def today(cls):\n"
"...         print('today is %s' % cls(date.today().isoweekday()).name)\n"
"...\n"
">>> dir(Weekday.SATURDAY)\n"
"['__class__', '__doc__', '__eq__', '__hash__', '__module__', 'name', "
"'today', 'value']"
msgstr ""

#: ../../library/enum.rst:0
msgid "name"
msgstr "name"

#: ../../library/enum.rst:341
msgid "The name of the member being defined (e.g. 'RED')."
msgstr "定義されているメンバーの名前（例：'RED'）。"

#: ../../library/enum.rst:342
msgid "The start value for the Enum; the default is 1."
msgstr "Enumの開始値。デフォルトは1です。"

#: ../../library/enum.rst:0
msgid "count"
msgstr "count"

#: ../../library/enum.rst:343
msgid "The number of members currently defined, not including this one."
msgstr "定義済みのメンバーの数。現在のメンバーを含めない。"

#: ../../library/enum.rst:0
msgid "last_values"
msgstr "last_values"

#: ../../library/enum.rst:344
msgid "A list of the previous values."
msgstr "定義済みの値のリスト。"

#: ../../library/enum.rst:346
msgid ""
"A *staticmethod* that is used to determine the next value returned by :class:"
"`auto`::"
msgstr ""
":class:`auto` によって返される次の値を決定するために使用される "
"*staticmethod*  です::"

#: ../../library/enum.rst:349
msgid ""
">>> from enum import auto\n"
">>> class PowersOfThree(Enum):\n"
"...     @staticmethod\n"
"...     def _generate_next_value_(name, start, count, last_values):\n"
"...         return 3 ** (count + 1)\n"
"...     FIRST = auto()\n"
"...     SECOND = auto()\n"
"...\n"
">>> PowersOfThree.SECOND.value\n"
"9"
msgstr ""

#: ../../library/enum.rst:362
msgid ""
"By default, does nothing.  If multiple values are given in the member "
"assignment, those values become separate arguments to ``__init__``; e.g."
msgstr ""
"デフォルトでは何もしません。メンバーに複数の値が指定されている場合、それらの"
"値は ``__init__`` の別々の引数となります。例えば、"

#: ../../library/enum.rst:369
msgid ""
"``Weekday.__init__()`` would be called as ``Weekday.__init__(self, 1, "
"'Mon')``"
msgstr ""
"``Weekday.__init__()`` は ``Weekday.__init__(self, 1, 'Mon')`` として呼び出さ"
"れます。"

#: ../../library/enum.rst:373
msgid ""
"A *classmethod* that is used to further configure subsequent subclasses. By "
"default, does nothing."
msgstr ""
"サブクラスを更に設定するために使用される *classmethod* です。デフォルトでは何"
"も行いません。"

#: ../../library/enum.rst:378
msgid ""
"A *classmethod* for looking up values not found in *cls*.  By default it "
"does nothing, but can be overridden to implement custom search behavior::"
msgstr ""
"*cls* で見つからない値を検索するための *classmethod* です。デフォルトでは何も"
"しませんが、カスタムの検索の振る舞いを実装するためにオーバーライドすることが"
"できます::"

#: ../../library/enum.rst:381
msgid ""
">>> from enum import StrEnum\n"
">>> class Build(StrEnum):\n"
"...     DEBUG = auto()\n"
"...     OPTIMIZED = auto()\n"
"...     @classmethod\n"
"...     def _missing_(cls, value):\n"
"...         value = value.lower()\n"
"...         for member in cls:\n"
"...             if member.value == value:\n"
"...                 return member\n"
"...         return None\n"
"...\n"
">>> Build.DEBUG.value\n"
"'debug'\n"
">>> Build('deBUG')\n"
"<Build.DEBUG: 'debug'>"
msgstr ""

#: ../../library/enum.rst:400
msgid ""
"By default, doesn't exist.  If specified, either in the enum class "
"definition or in a mixin class (such as ``int``), all values given in the "
"member assignment will be passed; e.g."
msgstr ""
"デフォルトでは存在しません。指定された場合、列挙型のクラス定義またはmix-inク"
"ラス（例えば ``int`` など）のいずれかで、メンバーに代入されたすべての値が渡さ"
"れます。例::"

#: ../../library/enum.rst:408
msgid ""
"results in the call ``int('1a', 16)`` and a value of ``26`` for the member."
msgstr ""

#: ../../library/enum.rst:412
msgid ""
"When writing a custom ``__new__``, do not use ``super().__new__`` -- call "
"the appropriate ``__new__`` instead."
msgstr ""

#: ../../library/enum.rst:417
msgid ""
"Returns the string used for *repr()* calls.  By default, returns the *Enum* "
"name, member name, and value, but can be overridden::"
msgstr ""
"*repr()* の呼び出しに使用される文字列を返します。デフォルトでは、 *Enum* 名、"
"メンバー名、および値を返しますが、オーバーライドすることもできます::"

#: ../../library/enum.rst:420
msgid ""
">>> class OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"...     def __repr__(self):\n"
"...         cls_name = self.__class__.__name__\n"
"...         return f'{cls_name}.{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle."
"ALTERNATE}\"\n"
"(OtherStyle.ALTERNATE, 'OtherStyle.ALTERNATE', 'OtherStyle.ALTERNATE')"
msgstr ""

#: ../../library/enum.rst:433
msgid ""
"Returns the string used for *str()* calls.  By default, returns the *Enum* "
"name and member name, but can be overridden::"
msgstr ""
"*str()* の呼び出しに使用される文字列を返します。デフォルトでは、 *Enum* の名"
"前とメンバーの名前を返しますが、オーバーライドすることもできます::"

#: ../../library/enum.rst:436
msgid ""
">>> class OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"...     def __str__(self):\n"
"...         return f'{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle."
"ALTERNATE}\"\n"
"(<OtherStyle.ALTERNATE: 1>, 'ALTERNATE', 'ALTERNATE')"
msgstr ""

#: ../../library/enum.rst:448
msgid ""
"Returns the string used for *format()* and *f-string* calls.  By default, "
"returns :meth:`__str__` return value, but can be overridden::"
msgstr ""
"*format()* および *f-string* の呼び出しに使用される文字列を返します。デフォル"
"トでは、:meth:`__str__` の戻り値を返しますが、オーバーライドすることもできま"
"す。::"

#: ../../library/enum.rst:451
msgid ""
">>> class OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"...     def __format__(self, spec):\n"
"...         return f'{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle."
"ALTERNATE}\"\n"
"(<OtherStyle.ALTERNATE: 1>, 'OtherStyle.ALTERNATE', 'ALTERNATE')"
msgstr ""

#: ../../library/enum.rst:463
msgid ""
"Using :class:`auto` with :class:`Enum` results in integers of increasing "
"value, starting with ``1``."
msgstr ""
":class:`Enum` で :class:`auto` を使用すると、 ``1`` から始まりインクリメント"
"する整数が値となります。"

#: ../../library/enum.rst:466
msgid "Added :ref:`enum-dataclass-support`"
msgstr ":ref:`enum-dataclass-support` の追加"

#: ../../library/enum.rst:471
msgid ""
"*IntEnum* is the same as :class:`Enum`, but its members are also integers "
"and can be used anywhere that an integer can be used.  If any integer "
"operation is performed with an *IntEnum* member, the resulting value loses "
"its enumeration status."
msgstr ""

#: ../../library/enum.rst:492
msgid ""
"Using :class:`auto` with :class:`IntEnum` results in integers of increasing "
"value, starting with ``1``."
msgstr ""
":class:`IntEnum` で :class:`auto` を使用すると、 ``1`` から始まりインクリメン"
"トする整数が値となります。"

#: ../../library/enum.rst:495
msgid ""
":meth:`~object.__str__` is now :meth:`!int.__str__` to better support the "
"*replacement of existing constants* use-case. :meth:`~object.__format__` was "
"already :meth:`!int.__format__` for that same reason."
msgstr ""
":meth:`~object.__str__` は、既存の定数を置き換えるユースケースをより良くサ"
"ポートするために :meth:`!int.__str__` に変更されました。同じ理由で、:meth:"
"`~object.__format__` は既に :meth:`!int.__format__` に変更されています。"

#: ../../library/enum.rst:502
msgid ""
"``StrEnum`` is the same as :class:`Enum`, but its members are also strings "
"and can be used in most of the same places that a string can be used.  The "
"result of any string operation performed on or with a *StrEnum* member is "
"not part of the enumeration."
msgstr ""

#: ../../library/enum.rst:508
msgid ""
"There are places in the stdlib that check for an exact :class:`str` instead "
"of a :class:`str` subclass (i.e. ``type(unknown) == str`` instead of "
"``isinstance(unknown, str)``), and in those locations you will need to use "
"``str(StrEnum.member)``."
msgstr ""
"標準ライブラリの中には、 :class:`str` の代わりに :class:`str` のサブクラス"
"（つまり、 ``type(unknown) == str`` の代わりに ``isinstance(unknown, "
"str)`` ）を厳密にチェックする場所があります。そのような場所では、 "
"``str(StrEnum.member)`` を使用する必要があります。"

#: ../../library/enum.rst:515
msgid ""
"Using :class:`auto` with :class:`StrEnum` results in the lower-cased member "
"name as the value."
msgstr ""
":class:`StrEnum` で :class:`auto` を使用すると、メンバー名を小文字に変換した"
"ものが値となります。"

#: ../../library/enum.rst:520
msgid ""
":meth:`~object.__str__` is :meth:`!str.__str__` to better support the "
"*replacement of existing constants* use-case.  :meth:`~object.__format__` is "
"likewise :meth:`!str.__format__` for that same reason."
msgstr ""
":meth:`~object.__str__` は *既存の定数の置換* ユースケースをより良くサポート"
"するために :meth:`!str.__str__` となりました。 :meth:`~object.__format__` も"
"同様に、同じ理由で :meth:`!str.__format__` となりました。"

#: ../../library/enum.rst:528
msgid ""
"``Flag`` is the same as :class:`Enum`, but its members support the bitwise "
"operators ``&`` (*AND*), ``|`` (*OR*), ``^`` (*XOR*), and ``~`` (*INVERT*); "
"the results of those operations are (aliases of) members of the enumeration."
msgstr ""

#: ../../library/enum.rst:534
msgid "Returns *True* if value is in self::"
msgstr "値を含む場合に *True* を返します::"

#: ../../library/enum.rst:536
msgid ""
">>> from enum import Flag, auto\n"
">>> class Color(Flag):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> purple = Color.RED | Color.BLUE\n"
">>> white = Color.RED | Color.GREEN | Color.BLUE\n"
">>> Color.GREEN in purple\n"
"False\n"
">>> Color.GREEN in white\n"
"True\n"
">>> purple in white\n"
"True\n"
">>> white in purple\n"
"False"
msgstr ""

#: ../../library/enum.rst:555
msgid "Returns all contained non-alias members::"
msgstr "エイリアスでない、全てのメンバーを返します::"

#: ../../library/enum.rst:557
msgid ""
">>> list(Color.RED)\n"
"[<Color.RED: 1>]\n"
">>> list(purple)\n"
"[<Color.RED: 1>, <Color.BLUE: 4>]"
msgstr ""

#: ../../library/enum.rst:566
msgid "Returns number of members in flag::"
msgstr "flag 内のメンバーの数を返します::"

#: ../../library/enum.rst:568
msgid ""
">>> len(Color.GREEN)\n"
"1\n"
">>> len(white)\n"
"3"
msgstr ""

#: ../../library/enum.rst:577
msgid "Returns *True* if any members in flag, *False* otherwise::"
msgstr ""
"メンバーがflagに含まれている場合は *True* を返し、それ以外の場合は *False* を"
"返します::"

#: ../../library/enum.rst:579
msgid ""
">>> bool(Color.GREEN)\n"
"True\n"
">>> bool(white)\n"
"True\n"
">>> black = Color(0)\n"
">>> bool(black)\n"
"False"
msgstr ""

#: ../../library/enum.rst:589
msgid "Returns current flag binary or'ed with other::"
msgstr "現在のフラグと他のフラグの論理和となるフラグを返します::"

#: ../../library/enum.rst:591
msgid ""
">>> Color.RED | Color.GREEN\n"
"<Color.RED|GREEN: 3>"
msgstr ""

#: ../../library/enum.rst:596
msgid "Returns current flag binary and'ed with other::"
msgstr "現在のフラグと他のフラグの論理積となるフラグを返します::"

#: ../../library/enum.rst:598
msgid ""
">>> purple & white\n"
"<Color.RED|BLUE: 5>\n"
">>> purple & Color.GREEN\n"
"<Color: 0>"
msgstr ""

#: ../../library/enum.rst:605
msgid "Returns current flag binary xor'ed with other::"
msgstr "現在のフラグと他のフラグの排他的論理和となるフラグを返します::"

#: ../../library/enum.rst:607
msgid ""
">>> purple ^ white\n"
"<Color.GREEN: 2>\n"
">>> purple ^ Color.GREEN\n"
"<Color.RED|GREEN|BLUE: 7>"
msgstr ""

#: ../../library/enum.rst:614
msgid "Returns all the flags in *type(self)* that are not in *self*::"
msgstr ""

#: ../../library/enum.rst:616
msgid ""
">>> ~white\n"
"<Color: 0>\n"
">>> ~purple\n"
"<Color.GREEN: 2>\n"
">>> ~Color.RED\n"
"<Color.GREEN|BLUE: 6>"
msgstr ""

#: ../../library/enum.rst:625
msgid ""
"Function used to format any remaining unnamed numeric values.  Default is "
"the value's repr; common choices are :func:`hex` and :func:`oct`."
msgstr ""

#: ../../library/enum.rst:630
msgid ""
"Using :class:`auto` with :class:`Flag` results in integers that are powers "
"of two, starting with ``1``."
msgstr ""
":class:`auto` と :class:`Flag` を一緒に使うと、``1`` から始まる2の累乗の整数"
"になります。"

#: ../../library/enum.rst:633
msgid "The *repr()* of zero-valued flags has changed.  It is now::"
msgstr "値が0のフラグの *repr()* は変更されました。現在は以下のとおりです::"

#: ../../library/enum.rst:641
msgid ""
"``IntFlag`` is the same as :class:`Flag`, but its members are also integers "
"and can be used anywhere that an integer can be used."
msgstr ""

#: ../../library/enum.rst:655
msgid ""
"If any integer operation is performed with an *IntFlag* member, the result "
"is not an *IntFlag*::"
msgstr ""
"*IntFlag* のメンバーと整数の演算が行われた場合、結果は *IntFlag* ではありませ"
"ん::"

#: ../../library/enum.rst:658
msgid ""
">>> Color.RED + 2\n"
"3"
msgstr ""

#: ../../library/enum.rst:661
msgid "If a :class:`Flag` operation is performed with an *IntFlag* member and:"
msgstr ""

#: ../../library/enum.rst:663
msgid "the result is a valid *IntFlag*: an *IntFlag* is returned"
msgstr "結果が有効な *IntFlag*: *IntFlag* が返されます"

#: ../../library/enum.rst:664
msgid ""
"the result is not a valid *IntFlag*: the result depends on the :class:"
"`FlagBoundary` setting"
msgstr ""

#: ../../library/enum.rst:666
msgid "The :func:`repr` of unnamed zero-valued flags has changed.  It is now:"
msgstr ""

#: ../../library/enum.rst:673
msgid ""
"Using :class:`auto` with :class:`IntFlag` results in integers that are "
"powers of two, starting with ``1``."
msgstr ""
":class:`auto` と :class:`IntFlag` を一緒に使うと、``1`` から始まる2の累乗の整"
"数になります。"

#: ../../library/enum.rst:678
msgid ""
":meth:`~object.__str__` is now :meth:`!int.__str__` to better support the "
"*replacement of existing constants* use-case.  :meth:`~object.__format__` "
"was already :meth:`!int.__format__` for that same reason."
msgstr ""
":meth:`~object.__str__` は、既存の定数を置き換えるユースケースをより良くサ"
"ポートするために :meth:`!int.__str__` に変更されました。同じ理由で、:meth:"
"`~object.__format__` は既に :meth:`!int.__format__` に変更されています。"

#: ../../library/enum.rst:682
msgid ""
"Inversion of an :class:`!IntFlag` now returns a positive value that is the "
"union of all flags not in the given flag, rather than a negative value. This "
"matches the existing :class:`Flag` behavior."
msgstr ""
":class:`!IntFlag` の反転は、与えられたフラグ以外のすべてのフラグの結合となる"
"正の値を返すようになりました。これは既存の :class:`Flag` の振る舞いに一致しま"
"す。"

#: ../../library/enum.rst:688
msgid ""
":class:`!ReprEnum` uses the :meth:`repr() <Enum.__repr__>` of :class:`Enum`, "
"but the :class:`str() <str>` of the mixed-in data type:"
msgstr ""

#: ../../library/enum.rst:691
msgid ":meth:`!int.__str__` for :class:`IntEnum` and :class:`IntFlag`"
msgstr ""

#: ../../library/enum.rst:692
msgid ":meth:`!str.__str__` for :class:`StrEnum`"
msgstr ""

#: ../../library/enum.rst:694
msgid ""
"Inherit from :class:`!ReprEnum` to keep the :class:`str() <str>` / :func:"
"`format` of the mixed-in data type instead of using the :class:`Enum`-"
"default :meth:`str() <Enum.__str__>`."
msgstr ""
":class:`!ReprEnum` を継承することで、:class:`Enum` デフォルトの :meth:`str() "
"<Enum.__str__>`  を使用する代わりに、mix-inされたデータ型の :class:`str() "
"<str>`  /  :func:`format` を使用します。"

#: ../../library/enum.rst:703
msgid ""
"*EnumCheck* contains the options used by the :func:`verify` decorator to "
"ensure various constraints; failed constraints result in a :exc:`ValueError`."
msgstr ""
"*EnumCheck* には :func:`verify` デコレータやさまざまな制約を保証するために使"
"用されるオプションが含まれています。制約に違反すると :exc:`ValueError` が発生"
"します。"

#: ../../library/enum.rst:708
msgid "Ensure that each value has only one name::"
msgstr "それぞれの値が1つの名前しか持たないことを確認します::"

#: ../../library/enum.rst:710
msgid ""
">>> from enum import Enum, verify, UNIQUE\n"
">>> @verify(UNIQUE)\n"
"... class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 3\n"
"...     CRIMSON = 1\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: aliases found in <enum 'Color'>: CRIMSON -> RED"
msgstr ""

#: ../../library/enum.rst:724
msgid ""
"Ensure that there are no missing values between the lowest-valued member and "
"the highest-valued member::"
msgstr "最小値のメンバーと最大値のメンバーの間に欠損値がないことを確認します::"

#: ../../library/enum.rst:727
msgid ""
">>> from enum import Enum, verify, CONTINUOUS\n"
">>> @verify(CONTINUOUS)\n"
"... class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 5\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: invalid enum 'Color': missing values 3, 4"
msgstr ""

#: ../../library/enum.rst:739
msgid ""
"Ensure that any flag groups/masks contain only named flags -- useful when "
"values are specified instead of being generated by :func:`auto`::"
msgstr ""
"任意のフラググループ/マスクが、名前付きフラグのみを含むことを確認します -- 値"
"を指定するのではなく、:func:`auto` によって生成される場合に便利です::"

#: ../../library/enum.rst:742
msgid ""
">>> from enum import Flag, verify, NAMED_FLAGS\n"
">>> @verify(NAMED_FLAGS)\n"
"... class Color(Flag):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 4\n"
"...     WHITE = 15\n"
"...     NEON = 31\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: invalid Flag 'Color': aliases WHITE and NEON are missing "
"combined values of 0x18 [use enum.show_flag_values(value) for details]"
msgstr ""

#: ../../library/enum.rst:756
msgid ""
"CONTINUOUS and NAMED_FLAGS are designed to work with integer-valued members."
msgstr ""
"CONTINUOUSとNAMED_FLAGSは整数値のメンバーとともに動作するように設計されていま"
"す。"

#: ../../library/enum.rst:762
msgid ""
"``FlagBoundary`` controls how out-of-range values are handled in :class:"
"`Flag` and its subclasses."
msgstr ""

#: ../../library/enum.rst:767
msgid ""
"Out-of-range values cause a :exc:`ValueError` to be raised. This is the "
"default for :class:`Flag`::"
msgstr ""
"範囲外の値は :exc:`ValueError` を送出します。これは :class:`Flag` のデフォル"
"トです::"

#: ../../library/enum.rst:770
msgid ""
">>> from enum import Flag, STRICT, auto\n"
">>> class StrictFlag(Flag, boundary=STRICT):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> StrictFlag(2**2 + 2**4)\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: <flag 'StrictFlag'> invalid value 20\n"
"    given 0b0 10100\n"
"  allowed 0b0 00111"
msgstr ""

#: ../../library/enum.rst:785
msgid ""
"Out-of-range values have invalid values removed, leaving a valid :class:"
"`Flag` value::"
msgstr ""

#: ../../library/enum.rst:788
msgid ""
">>> from enum import Flag, CONFORM, auto\n"
">>> class ConformFlag(Flag, boundary=CONFORM):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> ConformFlag(2**2 + 2**4)\n"
"<ConformFlag.BLUE: 4>"
msgstr ""

#: ../../library/enum.rst:799
msgid ""
"Out-of-range values lose their :class:`Flag` membership and revert to :class:"
"`int`."
msgstr ""

#: ../../library/enum.rst:812
msgid ""
"Out-of-range values are kept, and the :class:`Flag` membership is kept. This "
"is the default for :class:`IntFlag`::"
msgstr ""

#: ../../library/enum.rst:815
msgid ""
">>> from enum import Flag, KEEP, auto\n"
">>> class KeepFlag(Flag, boundary=KEEP):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> KeepFlag(2**2 + 2**4)\n"
"<KeepFlag.BLUE|16: 20>"
msgstr ""

#: ../../library/enum.rst:829
msgid "Supported ``__dunder__`` names"
msgstr "``__dunder__`` 名のサポート"

#: ../../library/enum.rst:831
msgid ""
":attr:`~EnumType.__members__` is a read-only ordered mapping of "
"``member_name``:``member`` items.  It is only available on the class."
msgstr ""
":attr:`~EnumType.__members__` は読み込み専用の、 ``member_name``:``member``  "
"を要素とする順序付きマッピングです。これはクラスでのみ利用可能です。"

#: ../../library/enum.rst:834
msgid ""
":meth:`~Enum.__new__`, if specified, must create and return the enum "
"members; it is also a very good idea to set the member's :attr:`!_value_` "
"appropriately. Once all the members are created it is no longer used."
msgstr ""

#: ../../library/enum.rst:840
msgid "Supported ``_sunder_`` names"
msgstr "``_sunder_`` 名のサポート"

#: ../../library/enum.rst:842
msgid ""
":meth:`~EnumType._add_alias_` -- adds a new name as an alias to an existing "
"member."
msgstr ""

#: ../../library/enum.rst:844
msgid ""
":meth:`~EnumType._add_value_alias_` -- adds a new value as an alias to an "
"existing member."
msgstr ""

#: ../../library/enum.rst:846
msgid ":attr:`~Enum._name_` -- name of the member"
msgstr ":attr:`~Enum._name_` -- メンバー名"

#: ../../library/enum.rst:847
msgid ":attr:`~Enum._value_` -- value of the member; can be set in ``__new__``"
msgstr ":attr:`~Enum._value_` -- メンバーの値; ``__new__`` で設定できます"

#: ../../library/enum.rst:848
msgid ""
":meth:`~Enum._missing_` -- a lookup function used when a value is not found; "
"may be overridden"
msgstr ""
":meth:`~Enum._missing_` -- 値が見付からなかったときに使われる検索関数; オー"
"バーライドされていることがあります"

#: ../../library/enum.rst:850
msgid ""
":attr:`~Enum._ignore_` -- a list of names, either as a :class:`list` or a :"
"class:`str`, that will not be transformed into members, and will be removed "
"from the final class"
msgstr ""
":attr:`~Enum._ignore_` -- 名前のリストで、 :class:`list` もしくは :class:"
"`str` です。この名前の要素はメンバーへの変換が行われず、最終的なクラスから削"
"除されます。"

#: ../../library/enum.rst:853
msgid ""
":attr:`~Enum._order_` -- no longer used, kept for backward compatibility "
"(class attribute, removed during class creation)"
msgstr ""

#: ../../library/enum.rst:855
msgid ""
":meth:`~Enum._generate_next_value_` -- used to get an appropriate value for "
"an enum member; may be overridden"
msgstr ""
":meth:`~Enum._generate_next_value_` -- 列挙型のメンバーの適切な値を取得するの"
"に使われます。オーバーライドされます。"

#: ../../library/enum.rst:860
msgid ""
"For standard :class:`Enum` classes the next value chosen is the highest "
"value seen incremented by one."
msgstr ""
"標準の :class:`Enum` クラスの場合、次の値として選択されるのは、定義された最大"
"の値に1を加えたものです。"

#: ../../library/enum.rst:863
msgid ""
"For :class:`Flag` classes the next value chosen will be the next highest "
"power-of-two."
msgstr ""
":class:`Flag` クラスでは、次に選ばれる値は、次の最大の2のべき乗となります。"

#: ../../library/enum.rst:866
msgid ""
"While ``_sunder_`` names are generally reserved for the further development "
"of the :class:`Enum` class and can not be used, some are explicitly allowed:"
msgstr ""

#: ../../library/enum.rst:869
msgid ""
"``_repr_*`` (e.g. ``_repr_html_``), as used in `IPython's rich display`_"
msgstr ""

#: ../../library/enum.rst:871
msgid "``_missing_``, ``_order_``, ``_generate_next_value_``"
msgstr "``_missing_``, ``_order_``, ``_generate_next_value_``"

#: ../../library/enum.rst:872
msgid "``_ignore_``"
msgstr "``_ignore_``"

#: ../../library/enum.rst:873
msgid "``_add_alias_``, ``_add_value_alias_``, ``_repr_*``"
msgstr ""

#: ../../library/enum.rst:879
msgid "Utilities and Decorators"
msgstr "ユーティリティとデコレータ"

#: ../../library/enum.rst:883
msgid ""
"*auto* can be used in place of a value.  If used, the *Enum* machinery will "
"call an :class:`Enum`'s :meth:`~Enum._generate_next_value_` to get an "
"appropriate value. For :class:`Enum` and :class:`IntEnum` that appropriate "
"value will be the last value plus one; for :class:`Flag` and :class:"
"`IntFlag` it will be the first power-of-two greater than the highest value; "
"for :class:`StrEnum` it will be the lower-cased version of the member's "
"name.  Care must be taken if mixing *auto()* with manually specified values."
msgstr ""

#: ../../library/enum.rst:891
msgid ""
"*auto* instances are only resolved when at the top level of an assignment:"
msgstr "*auto* インスタンスは、代入のトップレベルでのみ解決されます。"

#: ../../library/enum.rst:893
msgid "``FIRST = auto()`` will work (auto() is replaced with ``1``);"
msgstr "``FIRST = auto()`` は動作します（auto() は ``1`` に置き換えられます）"

#: ../../library/enum.rst:894
msgid ""
"``SECOND = auto(), -2`` will work (auto is replaced with ``2``, so ``2, -2`` "
"is used to create the ``SECOND`` enum member;"
msgstr ""
"``SECOND = auto(), -2`` は動作します（auto は ``2`` に置き換えられるため、 "
"``SECOND`` 列挙型のメンバーには ``2, -2`` が使用されます）"

#: ../../library/enum.rst:896
msgid ""
"``THREE = [auto(), -3]`` will *not* work (``<auto instance>, -3`` is used to "
"create the ``THREE`` enum member)"
msgstr ""
"``THREE = [auto(), -3]`` は動作 *しません* （enumメンバー ``THREE`` の作成に "
"``<auto instance>, -3`` が使用されます）"

#: ../../library/enum.rst:901
msgid ""
"In prior versions, ``auto()`` had to be the only thing on the assignment "
"line to work properly."
msgstr ""
"以前のバージョンでは、 ``auto()`` は、代入行に他のものがあると正しく動作しま"
"せんでした。"

#: ../../library/enum.rst:904
msgid ""
"``_generate_next_value_`` can be overridden to customize the values used by "
"*auto*."
msgstr ""
"``_generate_next_value_`` は、 *auto* が使用する値をカスタマイズするために"
"オーバーライドすることができる。"

#: ../../library/enum.rst:907
msgid ""
"in 3.13 the default ``_generate_next_value_`` will always return the highest "
"member value incremented by 1, and will fail if any member is an "
"incompatible type."
msgstr ""
"3.13では、デフォルトの ``_generate_next_value_`` は常に最も高いメンバーの値に"
"1を加えたものを返し、メンバーのいずれかが比較できない型である場合には失敗しま"
"す。"

#: ../../library/enum.rst:913
msgid ""
"A decorator similar to the built-in *property*, but specifically for "
"enumerations.  It allows member attributes to have the same names as members "
"themselves."
msgstr ""

#: ../../library/enum.rst:917
msgid ""
"the *property* and the member must be defined in separate classes; for "
"example, the *value* and *name* attributes are defined in the *Enum* class, "
"and *Enum* subclasses can define members with the names ``value`` and "
"``name``."
msgstr ""

#: ../../library/enum.rst:926
msgid ""
"A :keyword:`class` decorator specifically for enumerations.  It searches an "
"enumeration's :attr:`~EnumType.__members__`, gathering any aliases it finds; "
"if any are found :exc:`ValueError` is raised with the details::"
msgstr ""
"列挙型専用の :keyword:`class` デコレーターです。列挙型の :attr:`~EnumType."
"__members__` に別名がないかどうか検索します; 見つかった場合、:exc:"
"`ValueError` が詳細情報とともに送出されます::"

#: ../../library/enum.rst:930
msgid ""
">>> from enum import Enum, unique\n"
">>> @unique\n"
"... class Mistake(Enum):\n"
"...     ONE = 1\n"
"...     TWO = 2\n"
"...     THREE = 3\n"
"...     FOUR = 3\n"
"...\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: duplicate values found in <enum 'Mistake'>: FOUR -> THREE"
msgstr ""

#: ../../library/enum.rst:944
msgid ""
"A :keyword:`class` decorator specifically for enumerations.  Members from :"
"class:`EnumCheck` are used to specify which constraints should be checked on "
"the decorated enumeration."
msgstr ""
"列挙型専用の :keyword:`class` デコレーターです。対象の列挙型に対してチェック"
"を行う制約の指定には :class:`EnumCheck` のメンバーが使用されます。"

#: ../../library/enum.rst:952
msgid "A decorator for use in enums: its target will become a member."
msgstr "列挙型で使用するデコレータ: 対象は列挙型のメンバー になります。"

#: ../../library/enum.rst:958
msgid "A decorator for use in enums: its target will not become a member."
msgstr "列挙型で使用するデコレータ: 対象は列挙型のメンバー になりません。"

#: ../../library/enum.rst:964
msgid ""
"A decorator to change the :class:`str() <str>` and :func:`repr` of an enum "
"to show its members as belonging to the module instead of its class. Should "
"only be used when the enum members are exported to the module global "
"namespace (see :class:`re.RegexFlag` for an example)."
msgstr ""

#: ../../library/enum.rst:974
msgid "Return a list of all power-of-two integers contained in a flag *value*."
msgstr "フラグの *value* に含まれる全ての2の累乗の整数のリストを返します。"

#: ../../library/enum.rst:981
msgid "Notes"
msgstr "注釈"

#: ../../library/enum.rst:983
msgid ":class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag`"
msgstr ":class:`IntEnum` 、 :class:`StrEnum` 、 :class:`IntFlag`"

#: ../../library/enum.rst:985
msgid ""
"These three enum types are designed to be drop-in replacements for existing "
"integer- and string-based values; as such, they have extra limitations:"
msgstr ""
"これらの3つの列挙型は、既存の整数ベースおよび文字列ベースの値の代替として設計"
"されています。そのため、追加の制限があります:"

#: ../../library/enum.rst:988
msgid "``__str__`` uses the value and not the name of the enum member"
msgstr "``__str__`` は、列挙型のメンバーの名前ではなく値を使用します"

#: ../../library/enum.rst:990
msgid ""
"``__format__``, because it uses ``__str__``, will also use the value of the "
"enum member instead of its name"
msgstr ""
"``__format__`` は ``__str__`` を使用するため、列挙型のメンバーの名前ではなく"
"値を使用します"

#: ../../library/enum.rst:993
msgid ""
"If you do not need/want those limitations, you can either create your own "
"base class by mixing in the ``int`` or ``str`` type yourself::"
msgstr ""
"もし、そのような制限が必要でない/望まない場合は、``int`` または ``str`` タイ"
"プを継承して、カスタムの基底クラスを作成することができます::"

#: ../../library/enum.rst:996
msgid ""
">>> from enum import Enum\n"
">>> class MyIntEnum(int, Enum):\n"
"...     pass"
msgstr ""

#: ../../library/enum.rst:1000
msgid "or you can reassign the appropriate :meth:`str`, etc., in your enum::"
msgstr "または列挙型の中で適切な :meth:`str` などを再代入することもできます::"

#: ../../library/enum.rst:1002
msgid ""
">>> from enum import Enum, IntEnum\n"
">>> class MyIntEnum(IntEnum):\n"
"...     __str__ = Enum.__str__"
msgstr ""
