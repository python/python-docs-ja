# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/termios.rst:2
msgid ":mod:`termios` --- POSIX style tty control"
msgstr ":mod:`termios` --- POSIX スタイルの端末制御"

#: ../../library/termios.rst:14
msgid ""
"This module provides an interface to the POSIX calls for tty I/O control. "
"For a complete description of these calls, see :manpage:`termios(3)` Unix "
"manual page.  It is only available for those Unix versions that support "
"POSIX *termios* style tty I/O control configured during installation."
msgstr ""
"このモジュールでは端末 I/O 制御のための POSIX 準拠の関数呼び出しインター"
"フェースを提供します。これら呼び出しのための完全な記述については、 Unix マ"
"ニュアルページの :manpage:`termios(3)` を参照してください。これは POSIX "
"*termios* 形式の端末制御をサポートしていてインストール時に有効にした Unix の"
"バージョンでのみ利用可能です。"

#: ../../library/termios.rst:19
msgid ""
"All functions in this module take a file descriptor *fd* as their first "
"argument.  This can be an integer file descriptor, such as returned by ``sys."
"stdin.fileno()``, or a :term:`file object`, such as ``sys.stdin`` itself."
msgstr ""
"このモジュールの関数は全て、ファイル記述子 *fd* を最初の引数としてとります。"
"この値は、 ``sys.stdin.fileno()`` が返すような整数のファイル記述子でも、 "
"``sys.stdin`` 自体のような :term:`file object` でもかまいません。"

#: ../../library/termios.rst:23
msgid ""
"This module also defines all the constants needed to work with the functions "
"provided here; these have the same name as their counterparts in C.  Please "
"refer to your system documentation for more information on using these "
"terminal control interfaces."
msgstr ""
"このモジュールではまた、モジュールで提供されている関数を使う上で必要となる全"
"ての定数を定義しています; これらの定数は C の対応する関数と同じ名前を持ってい"
"ます。これらの端末制御インターフェースを利用する上でのさらなる情報について"
"は、あなたのシステムのドキュメンテーションを参考にしてください。"

#: ../../library/termios.rst:28
msgid "The module defines the following functions:"
msgstr "このモジュールには、以下の関数が定義されています:"

#: ../../library/termios.rst:33
msgid ""
"Return a list containing the tty attributes for file descriptor *fd*, as "
"follows: ``[iflag, oflag, cflag, lflag, ispeed, ospeed, cc]`` where *cc* is "
"a list of the tty special characters (each a string of length 1, except the "
"items with indices :const:`VMIN` and :const:`VTIME`, which are integers when "
"these fields are defined).  The interpretation of the flags and the speeds "
"as well as the indexing in the *cc* array must be done using the symbolic "
"constants defined in the :mod:`termios` module."
msgstr ""
"ファイル記述子 *fd* の端末属性を含むリストを返します。その形式は: ``[iflag, "
"oflag, cflag, lflag, ispeed, ospeed, cc]`` です。 *cc* は端末特殊文字のリスト"
"です (それぞれ長さ 1 の文字列です。ただしインデクス :const:`VMIN` および  :"
"const:`VTIME` の内容は、それらのフィールドが定義されていた場合整数の値となり"
"ます)。端末設定フラグおよび端末速度の解釈、および配列 *cc* のインデクス検索"
"は、 :mod:`termios` で定義されているシンボル定数を使って行わなければなりませ"
"ん。"

#: ../../library/termios.rst:44
msgid ""
"Set the tty attributes for file descriptor *fd* from the *attributes*, which "
"is a list like the one returned by :func:`tcgetattr`.  The *when* argument "
"determines when the attributes are changed: :const:`TCSANOW` to change "
"immediately, :const:`TCSADRAIN` to change after transmitting all queued "
"output, or :const:`TCSAFLUSH` to change after transmitting all queued output "
"and discarding all queued input."
msgstr ""
"ファイル記述子 *fd* の端末属性を *attributes* から取り出して設定します。 "
"*attributes* は :func:`tcgetattr` が返すようなリストです。引数 *when* は属性"
"がいつ変更されるかを決定します: :const:`TCSANOW` は即時変更を行い、 :const:"
"`TCSADRAIN` は現在キューされている出力を全て転送した後に変更を行い、 :const:"
"`TCSAFLUSH` は現在キューされている出力を全て転送し、全てのキューされている入"
"力を無視した後に変更を行います。"

#: ../../library/termios.rst:54
msgid ""
"Send a break on file descriptor *fd*.  A zero *duration* sends a break for "
"0.25--0.5 seconds; a nonzero *duration* has a system dependent meaning."
msgstr ""
"ファイル記述子 *fd* にブレークを送信します。*duration* をゼロにすると、0.25〜"
"0.5 秒間のブレークを送信します; *duration* の値がゼロでない場合、その意味はシ"
"ステム依存です。"

#: ../../library/termios.rst:60
msgid ""
"Wait until all output written to file descriptor *fd* has been transmitted."
msgstr "ファイル記述子 *fd* に書き込まれた全ての出力が転送されるまで待ちます。"

#: ../../library/termios.rst:65
msgid ""
"Discard queued data on file descriptor *fd*.  The *queue* selector specifies "
"which queue: :const:`TCIFLUSH` for the input queue, :const:`TCOFLUSH` for "
"the output queue, or :const:`TCIOFLUSH` for both queues."
msgstr ""
"ファイル記述子 *fd* にキューされたデータを無視します。どのキューかは *queue* "
"セレクタで指定します: :const:`TCIFLUSH` は入力キュー、 :const:`TCOFLUSH` は出"
"力キュー、 :const:`TCIOFLUSH` は両方のキューです。"

#: ../../library/termios.rst:72
msgid ""
"Suspend or resume input or output on file descriptor *fd*.  The *action* "
"argument can be :const:`TCOOFF` to suspend output, :const:`TCOON` to restart "
"output, :const:`TCIOFF` to suspend input, or :const:`TCION` to restart input."
msgstr ""
"ファイル記述子 *fd* の入力または出力をサスペンドしたりレジュームしたりしま"
"す。引数 *action* は出力をサスペンドする :const:`TCOOFF` 、出力をレジュームす"
"る :const:`TCOON` 、入力をサスペンドする :const:`TCIOFF` 、入力をレジュームす"
"る :const:`TCION` をとることができます。"

#: ../../library/termios.rst:79
msgid "Module :mod:`tty`"
msgstr ":mod:`tty` モジュール"

#: ../../library/termios.rst:80
msgid "Convenience functions for common terminal control operations."
msgstr "一般的な端末制御操作のための便利な関数。"

#: ../../library/termios.rst:86
msgid "Example"
msgstr "使用例"

#: ../../library/termios.rst:88
msgid ""
"Here's a function that prompts for a password with echoing turned off.  Note "
"the technique using a separate :func:`tcgetattr` call and a :keyword:"
"`try` ... :keyword:`finally` statement to ensure that the old tty attributes "
"are restored exactly no matter what happens::"
msgstr ""
"以下はエコーバックを切った状態でパスワード入力を促す関数です。ユーザの入力に"
"関わらず以前の端末属性を正確に回復するために、二つの :func:`tcgetattr` と :"
"keyword:`try` ... :keyword:`finally` 文によるテクニックが使われています::"
