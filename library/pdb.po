# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
# Osamu NAKAMURA, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 02:46+0000\n"
"Last-Translator: Osamu NAKAMURA, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pdb.rst:4
msgid ":mod:`pdb` --- The Python Debugger"
msgstr ":mod:`pdb` --- Python デバッガ"

#: ../../library/pdb.rst:9
msgid "**Source code:** :source:`Lib/pdb.py`"
msgstr "**ソースコード:** :source:`Lib/pdb.py`"

#: ../../library/pdb.rst:15
msgid ""
"The module :mod:`pdb` defines an interactive source code debugger for Python "
"programs.  It supports setting (conditional) breakpoints and single stepping "
"at the source line level, inspection of stack frames, source code listing, "
"and evaluation of arbitrary Python code in the context of any stack frame.  "
"It also supports post-mortem debugging and can be called under program "
"control."
msgstr ""
"モジュール :mod:`pdb` は Python プログラム用の対話型ソースコードデバッガを定"
"義します。 (条件付き)ブレークポイントの設定やソース行レベルでのシングルステッ"
"プ実行、スタックフレームのインスペクション、ソースコードリスティングおよびあ"
"らゆるスタックフレームのコンテキストにおける任意の Python コードの評価をサ"
"ポートしています。事後解析デバッギングもサポートし、プログラムの制御下で呼び"
"出すことができます。"

#: ../../library/pdb.rst:26
msgid ""
"The debugger is extensible -- it is actually defined as the class :class:"
"`Pdb`. This is currently undocumented but easily understood by reading the "
"source.  The extension interface uses the modules :mod:`bdb` and :mod:`cmd`."
msgstr ""
"デバッガーは拡張可能です -- 実際にはクラス :class:`Pdb` として定義されていま"
"す。現在これについてのドキュメントはありませんが、ソースを読めば簡単に理解で"
"きます。拡張インターフェースはモジュール :mod:`bdb` と :mod:`cmd` を使ってい"
"ます。"

#: ../../library/pdb.rst:30
msgid ""
"The debugger's prompt is ``(Pdb)``. Typical usage to run a program under "
"control of the debugger is::"
msgstr ""
"デバッガのプロンプトは ``(Pdb)`` です。デバッガに制御された状態でプログラムを"
"実行するための典型的な使い方は以下のようになります::"

#: ../../library/pdb.rst:44
msgid ""
"Tab-completion via the :mod:`readline` module is available for commands and "
"command arguments, e.g. the current global and local names are offered as "
"arguments of the ``p`` command."
msgstr ""
":mod:`readline` モジュールによるコマンドおよびコマンド引数のタブ補完が利用で"
"きます。たとえば、``p`` コマンドの引数では現在のグローバルおよびローカル名が"
"候補として表示されます。"

#: ../../library/pdb.rst:49
msgid ""
":file:`pdb.py` can also be invoked as a script to debug other scripts.  For "
"example::"
msgstr ""
"他のスクリプトをデバッグするために、 :file:`pdb.py` をスクリプトとして呼び出"
"すこともできます。例えば::"

#: ../../library/pdb.rst:54
msgid ""
"When invoked as a script, pdb will automatically enter post-mortem debugging "
"if the program being debugged exits abnormally.  After post-mortem debugging "
"(or after normal exit of the program), pdb will restart the program.  "
"Automatic restarting preserves pdb's state (such as breakpoints) and in most "
"cases is more useful than quitting the debugger upon program's exit."
msgstr ""
"スクリプトとして pdb を起動すると、デバッグ中のプログラムが異常終了したとき"
"に pdb が自動的に事後デバッグモードに入ります。事後デバッグ後 (またはプログラ"
"ムの正常終了後)、pdb はプログラムを再起動します。自動再起動を行った場合、pdb "
"の状態 (ブレークポイントなど) はそのまま維持されるので、たいていの場合、プロ"
"グラム終了時にデバッガーも終了させるよりも便利なはずです。"

#: ../../library/pdb.rst:60
msgid ""
":file:`pdb.py` now accepts a ``-c`` option that executes commands as if "
"given in a :file:`.pdbrc` file, see :ref:`debugger-commands`."
msgstr ""
":file:`pdb.py` は ``-c`` オプションを受け付けるようになりました。このオプショ"
"ンで :file:`.pdbrc` ファイルが与えられると、ファイル内のコマンドを実行しま"
"す。:ref:`debugger-commands` を参照してください。"

#: ../../library/pdb.rst:64
msgid ""
":file:`pdb.py` now accepts a ``-m`` option that execute modules similar to "
"the way ``python3 -m`` does. As with a script, the debugger will pause "
"execution just before the first line of the module."
msgstr ""

#: ../../library/pdb.rst:70
msgid ""
"The typical usage to break into the debugger from a running program is to "
"insert ::"
msgstr "実行するプログラムをデバッガで分析する典型的な使い方は::"

#: ../../library/pdb.rst:75
msgid ""
"at the location you want to break into the debugger.  You can then step "
"through the code following this statement, and continue running without the "
"debugger using the :pdbcmd:`continue` command."
msgstr ""
"これでコードの中のその後に続く文をステップ実行できます。そして :pdbcmd:"
"`continue` コマンドでデバッガーを停止し処理を続行できます。"

#: ../../library/pdb.rst:79
msgid ""
"The built-in :func:`breakpoint()`, when called with defaults, can be used "
"instead of ``import pdb; pdb.set_trace()``."
msgstr ""

#: ../../library/pdb.rst:83
msgid "The typical usage to inspect a crashed program is::"
msgstr ""
"クラッシュしたプログラムを調べるための典型的な使い方は以下のようになります::"

#: ../../library/pdb.rst:101
msgid ""
"The module defines the following functions; each enters the debugger in a "
"slightly different way:"
msgstr ""
"このモジュールは以下の関数を定義しています。それぞれが少しづつ違った方法でデ"
"バッガに入ります:"

#: ../../library/pdb.rst:106
msgid ""
"Execute the *statement* (given as a string or a code object) under debugger "
"control.  The debugger prompt appears before any code is executed; you can "
"set breakpoints and type :pdbcmd:`continue`, or you can step through the "
"statement using :pdbcmd:`step` or :pdbcmd:`next` (all these commands are "
"explained below).  The optional *globals* and *locals* arguments specify the "
"environment in which the code is executed; by default the dictionary of the "
"module :mod:`__main__` is used.  (See the explanation of the built-in :func:"
"`exec` or :func:`eval` functions.)"
msgstr ""
"デバッガーに制御された状態で (文字列またはコードオブジェクトとして与えられ"
"た) *statement* を実行します。あらゆるコードが実行される前にデバッガープロン"
"プトが現れます。ブレークポイントを設定し、:pdbcmd:`continue` とタイプできま"
"す。あるいは、文を :pdbcmd:`step` や :pdbcmd:`next` を使って一つづつ実行する"
"ことができます (これらのコマンドはすべて下で説明します)。オプションの "
"*globals* と *locals* 引数はコードを実行する環境を指定します。デフォルトで"
"は、モジュール :mod:`__main__` の辞書が使われます。(組み込み関数 :func:"
"`exec` または :func:`eval` の説明を参照してください。)"

#: ../../library/pdb.rst:118
msgid ""
"Evaluate the *expression* (given as a string or a code object) under "
"debugger control.  When :func:`runeval` returns, it returns the value of the "
"expression.  Otherwise this function is similar to :func:`run`."
msgstr ""
"デバッガーに制御された状態で (文字列またはコードオブジェクトとして与えられ"
"る) *expression* を評価します。:func:`runeval` から復帰するとき、式の値を返し"
"ます。その他の点では、この関数は :func:`run` と同様です。"

#: ../../library/pdb.rst:125
msgid ""
"Call the *function* (a function or method object, not a string) with the "
"given arguments.  When :func:`runcall` returns, it returns whatever the "
"function call returned.  The debugger prompt appears as soon as the function "
"is entered."
msgstr ""
"*function* (関数またはメソッドオブジェクト、文字列ではありません) を与えられ"
"た引数とともに呼び出します。 :func:`runcall` から復帰するとき、関数呼び出しが"
"返したものはなんでも返します。関数に入るとすぐにデバッガプロンプトが現れま"
"す。"

#: ../../library/pdb.rst:133
msgid ""
"Enter the debugger at the calling stack frame.  This is useful to hard-code "
"a breakpoint at a given point in a program, even if the code is not "
"otherwise being debugged (e.g. when an assertion fails).  If given, *header* "
"is printed to the console just before debugging begins."
msgstr ""

#: ../../library/pdb.rst:138
msgid "The keyword-only argument *header*."
msgstr "*header* キーワード専用引数。"

#: ../../library/pdb.rst:144
msgid ""
"Enter post-mortem debugging of the given *traceback* object.  If no "
"*traceback* is given, it uses the one of the exception that is currently "
"being handled (an exception must be being handled if the default is to be "
"used)."
msgstr ""
"与えられた *traceback* オブジェクトの事後解析デバッギングに入ります。もし "
"*traceback* が与えられなければ、その時点で取り扱っている例外のうちのひとつを"
"使います。 (デフォルト動作をさせるには、例外を取り扱っている最中である必要が"
"あります。)"

#: ../../library/pdb.rst:152
msgid ""
"Enter post-mortem debugging of the traceback found in :data:`sys."
"last_traceback`."
msgstr ""
":data:`sys.last_traceback` のトレースバックの事後解析デバッギングに入ります。"

#: ../../library/pdb.rst:156
msgid ""
"The ``run*`` functions and :func:`set_trace` are aliases for instantiating "
"the :class:`Pdb` class and calling the method of the same name.  If you want "
"to access further features, you have to do this yourself:"
msgstr ""
"``run*`` 関数と :func:`set_trace` は、 :class:`Pdb` クラスをインスタンス化し"
"て同名のメソッドを実行することのエイリアス関数です。それ以上の機能を利用した"
"い場合は、インスタンス化を自分で行わなければなりません:"

#: ../../library/pdb.rst:163
msgid ":class:`Pdb` is the debugger class."
msgstr ":class:`Pdb` はデバッガクラスです。"

#: ../../library/pdb.rst:165
msgid ""
"The *completekey*, *stdin* and *stdout* arguments are passed to the "
"underlying :class:`cmd.Cmd` class; see the description there."
msgstr ""
"*completekey*, *stdin*, *stdout* 引数は、基底にある :class:`cmd.Cmd` クラスに"
"渡されます。そちらの解説を参照してください。"

#: ../../library/pdb.rst:168
msgid ""
"The *skip* argument, if given, must be an iterable of glob-style module name "
"patterns.  The debugger will not step into frames that originate in a module "
"that matches one of these patterns. [1]_"
msgstr ""
"*skip* 引数が指定された場合、 glob スタイルのモジュール名パターンの iterable "
"(イテレート可能オブジェクト) でなければなりません。デバッガはこのパターンのど"
"れかにマッチするモジュールに属するフレームにはステップインしません。 [1]_"

#: ../../library/pdb.rst:172
msgid ""
"By default, Pdb sets a handler for the SIGINT signal (which is sent when the "
"user presses :kbd:`Ctrl-C` on the console) when you give a ``continue`` "
"command. This allows you to break into the debugger again by pressing :kbd:"
"`Ctrl-C`.  If you want Pdb not to touch the SIGINT handler, set *nosigint* "
"to true."
msgstr ""
"デフォルトでは、Pdb は ``continue`` コマンドが投入されると、(ユーザーがコン"
"ソールから :kbd:`Ctrl-C` を押したときに送られる) SIGINT シグナル用ハンドラー"
"を設定します。これにより :kbd:`Ctrl-C` を押すことで再度デバッガーを起動するこ"
"とができます。Pdb に SIGINT ハンドラーを変更させたくない場合は *nosigint* を "
"true に設定してください。"

#: ../../library/pdb.rst:177
msgid ""
"The *readrc* argument defaults to true and controls whether Pdb will load ."
"pdbrc files from the filesystem."
msgstr ""
"*readrc* 引数はデフォルトでは真で、 Pdb が .pdbrc ファイルをファイルシステム"
"から読み込むかどうかを制御します。"

#: ../../library/pdb.rst:180
msgid "Example call to enable tracing with *skip*::"
msgstr "*skip* を使ってトレースする呼び出しの例::"

#: ../../library/pdb.rst:184
msgid "The *skip* argument."
msgstr "*skip* 引数が追加されました。"

#: ../../library/pdb.rst:187
msgid ""
"The *nosigint* argument.  Previously, a SIGINT handler was never set by Pdb."
msgstr ""
"*nosigint* 引数が追加されました。以前は Pdb が SIGINT ハンドラーを設定するこ"
"とはありませんでした。"

#: ../../library/pdb.rst:191
msgid "The *readrc* argument."
msgstr "*readrc* 引数。"

#: ../../library/pdb.rst:199
msgid "See the documentation for the functions explained above."
msgstr "前述のこれら関数のドキュメントを参照してください。"

#: ../../library/pdb.rst:205
msgid "Debugger Commands"
msgstr "デバッガコマンド"

#: ../../library/pdb.rst:207
msgid ""
"The commands recognized by the debugger are listed below.  Most commands can "
"be abbreviated to one or two letters as indicated; e.g. ``h(elp)`` means "
"that either ``h`` or ``help`` can be used to enter the help command (but not "
"``he`` or ``hel``, nor ``H`` or ``Help`` or ``HELP``).  Arguments to "
"commands must be separated by whitespace (spaces or tabs).  Optional "
"arguments are enclosed in square brackets (``[]``) in the command syntax; "
"the square brackets must not be typed.  Alternatives in the command syntax "
"are separated by a vertical bar (``|``)."
msgstr ""
"デバッガーに認識されるコマンドは以下に一覧されています。たいていのコマンドは"
"以下のように 1、2 文字に省略できます。例えば ``h(elp)`` は ``h`` か ``help`` "
"がで help コマンドを呼び出すことを意味します (ただし ``he``, ``hel``, ``H``, "
"``Help``, ``HELP`` は使用できません)。コマンドの引数はホワイトスペース (ス"
"ペースかタブ) で区切ってください。コマンド構文として任意の引数は大括弧 "
"(``[]``) で括られています (実際に大括弧はタイプしないでください)。いくつかか"
"ら選択できる引数は縦線 (``|``) で分割されて記述されています。"

#: ../../library/pdb.rst:216
msgid ""
"Entering a blank line repeats the last command entered.  Exception: if the "
"last command was a :pdbcmd:`list` command, the next 11 lines are listed."
msgstr ""
"空行を入力すると入力された直前のコマンドを繰り返します。例外: 直前のコマンド"
"が :pdbcmd:`list` コマンドならば、次の 11 行がリストされます。"

#: ../../library/pdb.rst:219
msgid ""
"Commands that the debugger doesn't recognize are assumed to be Python "
"statements and are executed in the context of the program being debugged.  "
"Python statements can also be prefixed with an exclamation point (``!``).  "
"This is a powerful way to inspect the program being debugged; it is even "
"possible to change a variable or call a function.  When an exception occurs "
"in such a statement, the exception name is printed but the debugger's state "
"is not changed."
msgstr ""
"デバッガが認識しないコマンドは Python 文とみなして、デバッグしているプログラ"
"ムのコンテキストおいて実行されます。先頭にに感嘆符 (``!``) を付けることで "
"Python 文であると明示することもできます。これはデバッグ中のプログラムを調査す"
"る強力な方法です。変数を変更したり関数を呼び出したりすることも可能です。この"
"ような文で例外が発生した場合には例外名が出力されますが、デバッガの状態は変化"
"しません。"

#: ../../library/pdb.rst:227
msgid ""
"The debugger supports :ref:`aliases <debugger-aliases>`.  Aliases can have "
"parameters which allows one a certain level of adaptability to the context "
"under examination."
msgstr ""
"デバッガーは :ref:`エイリアス <debugger-aliases>` をサポートしています。エイ"
"リアスはデバッグ中のコンテキストに適用可能な一定レベルのパラメータを保持する"
"ことができます。"

#: ../../library/pdb.rst:231
msgid ""
"Multiple commands may be entered on a single line, separated by ``;;``.  (A "
"single ``;`` is not used as it is the separator for multiple commands in a "
"line that is passed to the Python parser.)  No intelligence is applied to "
"separating the commands; the input is split at the first ``;;`` pair, even "
"if it is in the middle of a quoted string."
msgstr ""
"複数のコマンドを ``;;`` で区切って一行で入力することができます。(一つだけの "
"``;`` では使用できません。なぜなら、Python パーサーへ渡される行内の複数のコマ"
"ンドのための分離記号だからです。) コマンドを分割するために何も知的なことはし"
"ていません。たとえ引用文字列の途中であっても、入力は最初の ``;;`` で分割され"
"ます。"

#: ../../library/pdb.rst:241
msgid ""
"If a file :file:`.pdbrc` exists in the user's home directory or in the "
"current directory, it is read in and executed as if it had been typed at the "
"debugger prompt.  This is particularly useful for aliases.  If both files "
"exist, the one in the home directory is read first and aliases defined there "
"can be overridden by the local file."
msgstr ""
"ファイル :file:`.pdbrc` がユーザーのホームディレクトリかカレントディレクトリ"
"にあれば、それが読み込まれ、デバッガーのプロンプトでタイプしたように実行され"
"ます。これは特にエイリアスを使用するときに役立ちます。両方にファイルが存在す"
"る場合、ホームディレクトリのものが最初に読まれ、次にカレントディレクトリにあ"
"るものが読み込まれます。後者により前者の定義は上書きされます。"

#: ../../library/pdb.rst:247
msgid ""
":file:`.pdbrc` can now contain commands that continue debugging, such as :"
"pdbcmd:`continue` or :pdbcmd:`next`.  Previously, these commands had no "
"effect."
msgstr ""
":file:`.pdbrc` に :pdbcmd:`continue` や :pdbcmd:`next` のようなデバッグを続行"
"するコマンドが使用できるようになりました。以前はこのようなコマンドは無視され"
"ていました。"

#: ../../library/pdb.rst:255
msgid ""
"Without argument, print the list of available commands.  With a *command* as "
"argument, print help about that command.  ``help pdb`` displays the full "
"documentation (the docstring of the :mod:`pdb` module).  Since the *command* "
"argument must be an identifier, ``help exec`` must be entered to get help on "
"the ``!`` command."
msgstr ""
"引数を指定しない場合、利用できるコマンドの一覧が表示されます。引数として "
"*command* が与えられた場合、そのコマンドのヘルプが表示されます。``help pdb`` "
"で完全なドキュメント (:mod:`pdb` モジュールの doctring) が表示されます。"
"*command* 引数は識別子でなければならないため、``!`` コマンドのヘルプを表示す"
"るには ``help exec`` と入力します。"

#: ../../library/pdb.rst:263
msgid ""
"Print a stack trace, with the most recent frame at the bottom.  An arrow "
"indicates the current frame, which determines the context of most commands."
msgstr ""
"スタックの底にある最も新しいフレームと一緒にスタックトレースをプリントしま"
"す。矢印はカレントフレームを指し、それがほとんどのコマンドのコンテキストを決"
"定します。"

#: ../../library/pdb.rst:268
msgid ""
"Move the current frame *count* (default one) levels down in the stack trace "
"(to a newer frame)."
msgstr ""
"スタックフレーム内で現在のフレームを *count* レベル (デフォルトは 1) 新しいフ"
"レーム方向に移動します。"

#: ../../library/pdb.rst:273
msgid ""
"Move the current frame *count* (default one) levels up in the stack trace "
"(to an older frame)."
msgstr ""
"スタックフレーム内で現在のフレームを *count* レベル (デフォルトは 1) 古いフ"
"レーム方向に移動します。"

#: ../../library/pdb.rst:278
msgid ""
"With a *lineno* argument, set a break there in the current file.  With a "
"*function* argument, set a break at the first executable statement within "
"that function.  The line number may be prefixed with a filename and a colon, "
"to specify a breakpoint in another file (probably one that hasn't been "
"loaded yet).  The file is searched on :data:`sys.path`.  Note that each "
"breakpoint is assigned a number to which all the other breakpoint commands "
"refer."
msgstr ""
"*lineno* 引数を指定した場合、現在のファイルのその行番号の場所にブレークポイン"
"トを設定します。*function* 引数を指定した場合、その関数の中の最初の実行可能文"
"にブレークポイントを設定します。別のファイル (まだロードされていないかもしれ"
"ないもの) のブレークポイントを指定するには、行番号の前にファイル名とコロンを"
"付けます。ファイルは :data:`sys.path` にそって検索されます。各ブレークポイン"
"トには番号が割り当てられ、その番号を他のすべてのブレークポイントコマンドで参"
"照されることに注意してください。"

#: ../../library/pdb.rst:285
msgid ""
"If a second argument is present, it is an expression which must evaluate to "
"true before the breakpoint is honored."
msgstr ""
"第二引数を指定する場合、その値は式で、その評価値が真でなければブレークポイン"
"トは有効になりません。"

#: ../../library/pdb.rst:288
msgid ""
"Without argument, list all breaks, including for each breakpoint, the number "
"of times that breakpoint has been hit, the current ignore count, and the "
"associated condition if any."
msgstr ""
"引数なしの場合は、それぞれのブレークポイントに対して、そのブレークポイントに"
"行き当たった回数、現在の通過カウント ( ignore count ) と、もしあれば関連条件"
"を含めてすべてのブレークポイントをリストします。"

#: ../../library/pdb.rst:294
msgid ""
"Temporary breakpoint, which is removed automatically when it is first hit. "
"The arguments are the same as for :pdbcmd:`break`."
msgstr ""
"一時的なブレークポイントで、最初にそこに達したときに自動的に取り除かれます。"
"引数は :pdbcmd:`break` と同じです。"

#: ../../library/pdb.rst:299
msgid ""
"With a *filename:lineno* argument, clear all the breakpoints at this line. "
"With a space separated list of breakpoint numbers, clear those breakpoints. "
"Without argument, clear all breaks (but first ask confirmation)."
msgstr ""
"*filename:lineno* 引数を与えると、その行にある全てのブレークポイントを解除し"
"ます。スペースで区切られたブレークポイントナンバーのリストを与えると、それら"
"のブレークポイントを解除します。引数なしの場合は、すべてのブレークポイントを"
"解除します ( が、はじめに確認します ) 。"

#: ../../library/pdb.rst:305
msgid ""
"Disable the breakpoints given as a space separated list of breakpoint "
"numbers.  Disabling a breakpoint means it cannot cause the program to stop "
"execution, but unlike clearing a breakpoint, it remains in the list of "
"breakpoints and can be (re-)enabled."
msgstr ""
"ブレークポイント番号 *bpnumber* のブレークポイントを無効にします。ブレークポ"
"イントを無効にすると、プログラムの実行を止めることができなくなりますが、ブ"
"レークポイントの解除と違いブレークポイントのリストに残っており、(再び) 有効に"
"できます。"

#: ../../library/pdb.rst:312
msgid "Enable the breakpoints specified."
msgstr "指定したブレークポイントを有効にします。"

#: ../../library/pdb.rst:316
msgid ""
"Set the ignore count for the given breakpoint number.  If count is omitted, "
"the ignore count is set to 0.  A breakpoint becomes active when the ignore "
"count is zero.  When non-zero, the count is decremented each time the "
"breakpoint is reached and the breakpoint is not disabled and any associated "
"condition evaluates to true."
msgstr ""
"与えられたブレークポイントナンバーに通過カウントを設定します。count が省略さ"
"れると、通過カウントは 0 に設定されます。通過カウントがゼロになったとき、ブ"
"レークポイントが機能する状態になります。ゼロでないときは、そのブレークポイン"
"トが無効にされず、どんな関連条件も真に評価されていて、ブレークポイントに来る"
"たびに count が減らされます。"

#: ../../library/pdb.rst:324
msgid ""
"Set a new *condition* for the breakpoint, an expression which must evaluate "
"to true before the breakpoint is honored.  If *condition* is absent, any "
"existing condition is removed; i.e., the breakpoint is made unconditional."
msgstr ""
"ブレークポイントに新しい *condition* を設定します。*condition* はブレークポイ"
"ントを制御する条件式で、この式が真を返す場合のみブレークポイントが有効になり"
"ます。*condition* を指定しないと既存の条件が除去されます; ブレークポイントは"
"常に有効になります。"

#: ../../library/pdb.rst:330
msgid ""
"Specify a list of commands for breakpoint number *bpnumber*.  The commands "
"themselves appear on the following lines.  Type a line containing just "
"``end`` to terminate the commands. An example::"
msgstr ""
"ブレークポイントナンバー *bpnumber* にコマンドのリストを指定します。コマンド"
"そのものはその後の行に続けます。``end`` だけからなる行を入力することでコマン"
"ド群の終わりを示します。例を挙げます::"

#: ../../library/pdb.rst:339
msgid ""
"To remove all commands from a breakpoint, type ``commands`` and follow it "
"immediately with ``end``; that is, give no commands."
msgstr ""
"ブレークポイントからコマンドを取り除くには、 ``commands`` のあとに ``end`` だ"
"けを続けます。つまり、コマンドを一つも指定しないようにします。"

#: ../../library/pdb.rst:342
msgid ""
"With no *bpnumber* argument, ``commands`` refers to the last breakpoint set."
msgstr ""
"*bpnumber* 引数を指定しない場合、``commands`` は最後にセットしたブレークポイ"
"ントを参照します。"

#: ../../library/pdb.rst:344
msgid ""
"You can use breakpoint commands to start your program up again.  Simply use "
"the :pdbcmd:`continue` command, or :pdbcmd:`step`, or any other command that "
"resumes execution."
msgstr ""
"ブレークポイントコマンドはプログラムを走らせ直すのに使えます。単に :pdbcmd:"
"`continue` コマンドや :pdb:`step`、その他実行を再開するコマンドを使えば良いの"
"です。"

#: ../../library/pdb.rst:348
msgid ""
"Specifying any command resuming execution (currently :pdbcmd:`continue`, :"
"pdbcmd:`step`, :pdbcmd:`next`, :pdbcmd:`return`, :pdbcmd:`jump`, :pdbcmd:"
"`quit` and their abbreviations) terminates the command list (as if that "
"command was immediately followed by end). This is because any time you "
"resume execution (even with a simple next or step), you may encounter "
"another breakpoint—which could have its own command list, leading to "
"ambiguities about which list to execute."
msgstr ""
"実行を再開するコマンド (現在のところ :pdb:`continue`, :pdb:`step`, :pdb:"
"`next`, :pdb:`return`, :pdb:`jump`, :pdb:`quit` とそれらの省略形) によって、"
"コマンドリストは終了するものと見なされます (コマンドにすぐ end が続いているか"
"のように)。というのも実行を再開すれば (それが単純な next や step であっても) "
"別のブレークポイントに到達するかもしれないからです。そのブレークポイントにさ"
"らにコマンドリストがあれば、どちらのリストを実行すべきか状況が曖昧になりま"
"す。"

#: ../../library/pdb.rst:357
msgid ""
"If you use the 'silent' command in the command list, the usual message about "
"stopping at a breakpoint is not printed.  This may be desirable for "
"breakpoints that are to print a specific message and then continue.  If none "
"of the other commands print anything, you see no sign that the breakpoint "
"was reached."
msgstr ""
"コマンドリストの中で 'silent' コマンドを使うと、ブレークポイントで停止したと"
"いう通常のメッセージはプリントされません。この振る舞いは特定のメッセージを出"
"して実行を続けるようなブレークポイントでは望ましいものでしょう。他のコマンド"
"が何も画面出力をしなければ、そのブレークポイントに到達したというサインを見な"
"いことになります。"

#: ../../library/pdb.rst:364
msgid ""
"Execute the current line, stop at the first possible occasion (either in a "
"function that is called or on the next line in the current function)."
msgstr ""
"現在の行を実行し、最初に実行可能なものがあらわれたときに (呼び出された関数の"
"中か、現在の関数の次の行で) 停止します。"

#: ../../library/pdb.rst:369
msgid ""
"Continue execution until the next line in the current function is reached or "
"it returns.  (The difference between :pdbcmd:`next` and :pdbcmd:`step` is "
"that :pdbcmd:`step` stops inside a called function, while :pdbcmd:`next` "
"executes called functions at (nearly) full speed, only stopping at the next "
"line in the current function.)"
msgstr ""
"現在の関数の次の行に達するか、あるいは関数が返るまで実行を継続します。 (:"
"pdbcmd:`next` と :pdbcmd:`step` の差は :pdbcmd:`step` が呼び出された関数の内"
"部で停止するのに対し、 :pdbcmd:`next` は呼び出された関数を (ほぼ) 全速力で実"
"行し、現在の関数内の次の行で停止するだけです。)"

#: ../../library/pdb.rst:377
msgid ""
"Without argument, continue execution until the line with a number greater "
"than the current one is reached."
msgstr "引数なしだと、現在の行から 1 行先まで実行します。"

#: ../../library/pdb.rst:380
msgid ""
"With a line number, continue execution until a line with a number greater or "
"equal to that is reached.  In both cases, also stop when the current frame "
"returns."
msgstr ""
"行数を指定すると、指定行数かそれ以上に達するまで実行します。どちらにしても現"
"在のフレームが返ってきた時点で停止します。"

#: ../../library/pdb.rst:384
msgid "Allow giving an explicit line number."
msgstr "明示的に行数指定ができるようになりました。"

#: ../../library/pdb.rst:389
msgid "Continue execution until the current function returns."
msgstr "現在の関数が返るまで実行を継続します。"

#: ../../library/pdb.rst:393
msgid "Continue execution, only stop when a breakpoint is encountered."
msgstr "ブレークポイントに出会うまで、実行を継続します。"

#: ../../library/pdb.rst:397
msgid ""
"Set the next line that will be executed.  Only available in the bottom-most "
"frame.  This lets you jump back and execute code again, or jump forward to "
"skip code that you don't want to run."
msgstr ""
"次に実行する行を指定します。最も底のフレーム中でのみ実行可能です。前に戻って"
"実行したり、不要な部分をスキップして先の処理を実行する場合に使用します。"

#: ../../library/pdb.rst:401
msgid ""
"It should be noted that not all jumps are allowed -- for instance it is not "
"possible to jump into the middle of a :keyword:`for` loop or out of a :"
"keyword:`finally` clause."
msgstr ""
"ジャンプには制限があり、例えば :keyword:`for` ループの中には飛び込めません"
"し、 :keyword:`finally` 節の外にも飛ぶ事ができません。"

#: ../../library/pdb.rst:407
msgid ""
"List source code for the current file.  Without arguments, list 11 lines "
"around the current line or continue the previous listing.  With ``.`` as "
"argument, list 11 lines around the current line.  With one argument, list 11 "
"lines around at that line.  With two arguments, list the given range; if the "
"second argument is less than the first, it is interpreted as a count."
msgstr ""
"現在のファイルのソースコードを表示します。引数を指定しないと、現在の行の前後 "
"11 行分を表示するか、直前の表示を続行します。引数に ``.`` を指定すると、現在"
"の行の前後 11 行分を表示します。数値を 1 個指定すると、その行番号の前後 11 行"
"分を表示します。数値を 2 個指定すると、開始行と最終行として表示します; 2 個め"
"の引数が 1 個め未満だった場合、1 個目を開始行、2 個めを開始行からの行数とみな"
"します。"

#: ../../library/pdb.rst:413
msgid ""
"The current line in the current frame is indicated by ``->``.  If an "
"exception is being debugged, the line where the exception was originally "
"raised or propagated is indicated by ``>>``, if it differs from the current "
"line."
msgstr ""
"現在のフレーム内の現在の行は ``->`` で表示されます。例外をデバッグ中の場合、"
"例外が発生または伝搬した行は、それが現在の行とは異なるとき ``>>`` で表示され"
"ます。"

#: ../../library/pdb.rst:418
msgid "The ``>>`` marker."
msgstr "``>>`` マーカー。"

#: ../../library/pdb.rst:423
msgid ""
"List all source code for the current function or frame.  Interesting lines "
"are marked as for :pdbcmd:`list`."
msgstr ""
"現在の関数またはフレームの全ソースコードを表示します。注目する行は :pdbcmd:"
"`list` と同じようにマーカーがつきます。"

#: ../../library/pdb.rst:430
msgid "Print the argument list of the current function."
msgstr "現在の関数の引数リストをプリントします。"

#: ../../library/pdb.rst:434
msgid "Evaluate the *expression* in the current context and print its value."
msgstr ""
"現在のコンテキストにおいて *expression* を評価し、その値をプリントします。"

#: ../../library/pdb.rst:438
msgid ""
"``print()`` can also be used, but is not a debugger command --- this "
"executes the Python :func:`print` function."
msgstr ""
"``print()`` も使えますが、これはデバッガーコマンドではありません --- これは "
"Python の関数 :func:`print` が実行されます。"

#: ../../library/pdb.rst:444
msgid ""
"Like the :pdbcmd:`p` command, except the value of the expression is pretty-"
"printed using the :mod:`pprint` module."
msgstr ""
":pdbcmd:`p` コマンドに似ていますが、式の値以外は :mod:`pprint` モジュールを使"
"用して \"pretty-print\" されます。"

#: ../../library/pdb.rst:449
msgid "Print the type of the *expression*."
msgstr "式の型を表示します。"

#: ../../library/pdb.rst:453
msgid "Try to get source code for the given object and display it."
msgstr ""
"与えられたオブジェクトのソースコードの取得を試み、可能であれば表示します。"

#: ../../library/pdb.rst:459
msgid ""
"Display the value of the expression if it changed, each time execution stops "
"in the current frame."
msgstr ""
"式の値が変更されていれば表示します。毎回実行は現在のフレームで停止します。"

#: ../../library/pdb.rst:462
msgid "Without expression, list all display expressions for the current frame."
msgstr "式を指定しない場合、現在のフレームのすべての式を表示します。"

#: ../../library/pdb.rst:468
msgid ""
"Do not display the expression any more in the current frame.  Without "
"expression, clear all display expressions for the current frame."
msgstr ""
"現在のフレーム内で式をこれ以上表示しないようにします。式を指定しない場合、現"
"在のフレームで display 指定されている式を全てクリアします。"

#: ../../library/pdb.rst:475
msgid ""
"Start an interactive interpreter (using the :mod:`code` module) whose global "
"namespace contains all the (global and local) names found in the current "
"scope."
msgstr ""
"対話型インタープリターを (:mod:`code` モジュールを使って) 開始します。グロー"
"バル名前空間には現在のスコープで見つかったすべてのグローバルおよびローカル名"
"が含まれます。"

#: ../../library/pdb.rst:485
msgid ""
"Create an alias called *name* that executes *command*.  The command must "
"*not* be enclosed in quotes.  Replaceable parameters can be indicated by "
"``%1``, ``%2``, and so on, while ``%*`` is replaced by all the parameters. "
"If no command is given, the current alias for *name* is shown. If no "
"arguments are given, all aliases are listed."
msgstr ""
"*name* という名前の *command* を実行するエイリアスを作成します。コマンドは引"
"用符で囲まれていては *いけません*。入れ替え可能なパラメータは ``%1``、``%2`` "
"などで指し示され、さらに ``%*`` は全パラメータに置き換えられます。コマンドが"
"与えられなければ、*name* に対する現在のエイリアスを表示します。引数が与えられ"
"なければ、すべてのエイリアスがリストされます。"

#: ../../library/pdb.rst:491
msgid ""
"Aliases may be nested and can contain anything that can be legally typed at "
"the pdb prompt.  Note that internal pdb commands *can* be overridden by "
"aliases.  Such a command is then hidden until the alias is removed.  "
"Aliasing is recursively applied to the first word of the command line; all "
"other words in the line are left alone."
msgstr ""
"エイリアスは入れ子になってもよく、pdb プロンプトで合法的にタイプできるどんな"
"ものでも含めることができます。内部 pdb コマンドをエイリアスによって上書きする"
"ことが *できます*。そのとき、このようなコマンドはエイリアスが取り除かれるまで"
"隠されます。エイリアス化はコマンド行の最初の語へ再帰的に適用されます。行の他"
"のすべての語はそのままです。"

#: ../../library/pdb.rst:497
msgid ""
"As an example, here are two useful aliases (especially when placed in the :"
"file:`.pdbrc` file)::"
msgstr ""
"例として、二つの便利なエイリアスがあります (特に :file:`.pdbrc` ファイルに置"
"かれたときに)::"

#: ../../library/pdb.rst:507
msgid "Delete the specified alias."
msgstr "指定したエイリアスを削除します。"

#: ../../library/pdb.rst:511
msgid ""
"Execute the (one-line) *statement* in the context of the current stack "
"frame. The exclamation point can be omitted unless the first word of the "
"statement resembles a debugger command.  To set a global variable, you can "
"prefix the assignment command with a :keyword:`global` statement on the same "
"line, e.g.::"
msgstr ""
"現在のスタックフレームのコンテキストにおいて(一行の) *statement* を実行しま"
"す。文の最初の語がデバッガーコマンドと共通でない場合は、感嘆符を省略すること"
"ができます。グローバル変数を設定するために、同じ行に :keyword:`global` 文とと"
"もに代入コマンドの前に付けることができます。::"

#: ../../library/pdb.rst:523
msgid ""
"Restart the debugged Python program.  If an argument is supplied, it is "
"split with :mod:`shlex` and the result is used as the new :data:`sys.argv`. "
"History, breakpoints, actions and debugger options are preserved. :pdbcmd:"
"`restart` is an alias for :pdbcmd:`run`."
msgstr ""
"デバッグ中のプログラムを再実行します。引数が与えられると、 :mod:`shlex` で分"
"割され、結果が新しい :data:`sys.argv` として使われます。ヒストリー、ブレーク"
"ポイント、アクション、そして、デバッガーオプションは引き継がれます。 :pdbcmd:"
"`restart` は :pdbcmd:`run` の別名です。"

#: ../../library/pdb.rst:530
msgid "Quit from the debugger.  The program being executed is aborted."
msgstr "デバッガーを終了します。実行しているプログラムは中断されます。"

#: ../../library/pdb.rst:534
msgid ""
"Enter a recursive debugger that steps through the code argument (which is an "
"arbitrary expression or statement to be executed in the current environment)."
msgstr ""

#: ../../library/pdb.rst:542
msgid "Footnotes"
msgstr "脚注"

#: ../../library/pdb.rst:543
msgid ""
"Whether a frame is considered to originate in a certain module is determined "
"by the ``__name__`` in the frame globals."
msgstr ""
"フレームが属するモジュールは、そのフレームのグローバルの ``__name__`` によっ"
"て決定されます。"
