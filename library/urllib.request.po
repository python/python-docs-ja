# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# mollinaca, 2021
# tomo, 2021
# Osamu NAKAMURA, 2021
# Takanori Suzuki <takanori@takanory.net>, 2023
# ごはんですよ <uchida@turbare.net>, 2023
# Masato HASHIMOTO <cabezon.hashimoto@gmail.com>, 2023
# Arihiro TAKASE, 2023
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:17+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/urllib.request.rst:2
msgid ":mod:`!urllib.request` --- Extensible library for opening URLs"
msgstr ":mod:`!urllib.request` --- URL を開くための大規模なライブラリ"

#: ../../library/urllib.request.rst:11
msgid "**Source code:** :source:`Lib/urllib/request.py`"
msgstr "**ソースコード:** :source:`Lib/urllib/request.py`"

#: ../../library/urllib.request.rst:15
msgid ""
"The :mod:`urllib.request` module defines functions and classes which help in "
"opening URLs (mostly HTTP) in a complex world --- basic and digest "
"authentication, redirections, cookies and more."
msgstr ""
":mod:`urllib.request` モジュールは基本的な認証、暗号化認証、リダイレクショ"
"ン、Cookie、その他の介在する複雑なアクセス環境において (大抵は HTTP で) URL "
"を開くための関数とクラスを定義します。"

#: ../../library/urllib.request.rst:21
msgid ""
"The `Requests package <https://requests.readthedocs.io/en/master/>`_ is "
"recommended for a higher-level HTTP client interface."
msgstr ""
"より高水準のHTTPクライアントインターフェースとして `Requestsパッケージ "
"<https://requests.readthedocs.io/en/master/>`_ がお奨めです。"

#: ../../library/urllib.request.rst:26
msgid ""
"On macOS it is unsafe to use this module in programs using :func:`os.fork` "
"because the :func:`getproxies` implementation for macOS uses a higher-level "
"system API. Set the environment variable ``no_proxy`` to ``*`` to avoid this "
"problem (e.g. ``os.environ[\"no_proxy\"] = \"*\"``)."
msgstr ""

#: ../../includes/wasm-notavail.rst:3
msgid ":ref:`Availability <availability>`: not WASI."
msgstr ":ref:`利用可能な環境 <availability>`: WASI 以外。"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref:`wasm-"
"availability` for more information."
msgstr ""
"このモジュールは WebAssembly では動作しないか、利用不可です。詳しくは、:ref:"
"`wasm-availability` を見てください。"

#: ../../library/urllib.request.rst:34
msgid "The :mod:`urllib.request` module defines the following functions:"
msgstr ":mod:`urllib.request` モジュールでは以下の関数を定義しています:"

#: ../../library/urllib.request.rst:39
msgid ""
"Open *url*, which can be either a string containing a valid, properly "
"encoded URL, or a :class:`Request` object."
msgstr ""

#: ../../library/urllib.request.rst:42
msgid ""
"*data* must be an object specifying additional data to be sent to the "
"server, or ``None`` if no such data is needed.  See :class:`Request` for "
"details."
msgstr ""
"*data* はサーバーに送信する追加データを指定するオブジェクトであるか ``None`` "
"である必要があります。詳細は :class:`Request` を確認してください。"

#: ../../library/urllib.request.rst:46
msgid ""
"urllib.request module uses HTTP/1.1 and includes ``Connection:close`` header "
"in its HTTP requests."
msgstr ""
"urllib.request モジュールは HTTP/1.1 を使用し、その HTTP リクエストに "
"``Connection:close`` ヘッダーを含みます。"

#: ../../library/urllib.request.rst:49
msgid ""
"The optional *timeout* parameter specifies a timeout in seconds for blocking "
"operations like the connection attempt (if not specified, the global default "
"timeout setting will be used).  This actually only works for HTTP, HTTPS and "
"FTP connections."
msgstr ""
"任意引数 *timeout* には接続開始などのブロックする操作におけるタイムアウト時間"
"を秒数で指定します (指定されなかった場合、グローバルのデフォルトタイムアウト"
"時間が利用されます)。この引数は、 HTTP, HTTPS, FTP 接続でのみ有効です。"

#: ../../library/urllib.request.rst:54
msgid ""
"If *context* is specified, it must be a :class:`ssl.SSLContext` instance "
"describing the various SSL options. See :class:`~http.client."
"HTTPSConnection` for more details."
msgstr ""
"*context* を指定する場合は、様々な SSL オプションを記述する :class:`ssl."
"SSLContext` インスタンスでなければなりません。\n"
"詳細は :class:`~http.client.HTTPSConnection` を参照してください。"

#: ../../library/urllib.request.rst:58
msgid ""
"This function always returns an object which can work as a :term:`context "
"manager` and has the properties *url*, *headers*, and *status*. See :class:"
"`urllib.response.addinfourl` for more detail on these properties."
msgstr ""
"この関数は常にプロパティ *url*、 *headers*、および *status* を持ち、 :term:`"
"コンテキストマネージャ <context manager>` として動作するオブジェクトを返しま"
"す。これらのプロパティに関する詳細は :class:`urllib.response.addinfourl` を確"
"認してください。"

#: ../../library/urllib.request.rst:62
msgid ""
"For HTTP and HTTPS URLs, this function returns a :class:`http.client."
"HTTPResponse` object slightly modified. In addition to the three new methods "
"above, the msg attribute contains the same information as the :attr:`~http."
"client.HTTPResponse.reason` attribute --- the reason phrase returned by "
"server --- instead of the response headers as it is specified in the "
"documentation for :class:`~http.client.HTTPResponse`."
msgstr ""
"HTTP および HTTPS URL の場合、この関数は、わずかに修正された :class:`http."
"client.HTTPResponse` オブジェクトを返します。上記の3つの新しいメソッドに加え"
"て、 msg 属性が :class:`~http.client.HTTPResponse` のドキュメンテーションで指"
"定されているレスポンスヘッダーの代わりに :attr:`~http.client.HTTPResponse."
"reason` 属性 --- サーバーから返された reason フレーズ --- と同じ情報を含んで"
"います。"

#: ../../library/urllib.request.rst:70
msgid ""
"For FTP, file, and data URLs and requests explicitly handled by legacy :"
"class:`URLopener` and :class:`FancyURLopener` classes, this function returns "
"a :class:`urllib.response.addinfourl` object."
msgstr ""
"FTP 、ファイルおよびデータ URL 、レガシーな :class:`URLopener` や :class:"
"`FancyURLopener` によって明示的に扱われるリクエストの場合、この関数は :class:"
"`urllib.response.addinfourl` オブジェクトを返します。"

#: ../../library/urllib.request.rst:74
msgid "Raises :exc:`~urllib.error.URLError` on protocol errors."
msgstr "プロトコルエラー発生時は :exc:`~urllib.error.URLError` を送出します。"

#: ../../library/urllib.request.rst:76
msgid ""
"Note that ``None`` may be returned if no handler handles the request (though "
"the default installed global :class:`OpenerDirector` uses :class:"
"`UnknownHandler` to ensure this never happens)."
msgstr ""
"どのハンドラもリクエストを処理しなかった場合には ``None`` を返すことがあるの"
"で注意してください (デフォルトでインストールされる グローバルハンドラの :"
"class:`OpenerDirector` は、 :class:`UnknownHandler` を使って上記の問題が起き"
"ないようにしています)。"

#: ../../library/urllib.request.rst:80
msgid ""
"In addition, if proxy settings are detected (for example, when a ``*_proxy`` "
"environment variable like :envvar:`!http_proxy` is set), :class:"
"`ProxyHandler` is default installed and makes sure the requests are handled "
"through the proxy."
msgstr ""

#: ../../library/urllib.request.rst:85
msgid ""
"The legacy ``urllib.urlopen`` function from Python 2.6 and earlier has been "
"discontinued; :func:`urllib.request.urlopen` corresponds to the old "
"``urllib2.urlopen``.  Proxy handling, which was done by passing a dictionary "
"parameter to ``urllib.urlopen``, can be obtained by using :class:"
"`ProxyHandler` objects."
msgstr ""
"Python 2.6 以前のレガシーな ``urllib.urlopen`` 関数は廃止されました。:func:"
"`urllib.request.urlopen` が過去の ``urllib2.urlopen`` に相当します。``urllib."
"urlopen`` において辞書型オブジェクトで渡していたプロキシの扱いは、:class:"
"`ProxyHandler` オブジェクトを使用して取得できます。"

#: ../../library/urllib.request.rst:91 ../../library/urllib.request.rst:93
msgid ""
"The default opener raises an :ref:`auditing event <auditing>` ``urllib."
"Request`` with arguments ``fullurl``, ``data``, ``headers``, ``method`` "
"taken from the request object."
msgstr ""

#: ../../library/urllib.request.rst:97
msgid "*cafile* and *capath* were added."
msgstr "*cafile* および *capath* が追加されました。"

#: ../../library/urllib.request.rst:100
msgid ""
"HTTPS virtual hosts are now supported if possible (that is, if :const:`ssl."
"HAS_SNI` is true)."
msgstr ""

#: ../../library/urllib.request.rst:103
msgid "*data* can be an iterable object."
msgstr "*data* にイテラブルなオブジェクトを指定できるようになりました。"

#: ../../library/urllib.request.rst:105
msgid "*cadefault* was added."
msgstr "*cadefault* が追加されました。"

#: ../../library/urllib.request.rst:108
msgid "*context* was added."
msgstr "*context* が追加されました。"

#: ../../library/urllib.request.rst:111
msgid ""
"HTTPS connection now send an ALPN extension with protocol indicator "
"``http/1.1`` when no *context* is given. Custom *context* should set ALPN "
"protocols with :meth:`~ssl.SSLContext.set_alpn_protocols`."
msgstr ""

#: ../../library/urllib.request.rst:116
msgid ""
"Remove *cafile*, *capath* and *cadefault* parameters: use the *context* "
"parameter instead."
msgstr ""

#: ../../library/urllib.request.rst:123
msgid ""
"Install an :class:`OpenerDirector` instance as the default global opener. "
"Installing an opener is only necessary if you want urlopen to use that "
"opener; otherwise, simply call :meth:`OpenerDirector.open` instead of :func:"
"`~urllib.request.urlopen`.  The code does not check for a real :class:"
"`OpenerDirector`, and any class with the appropriate interface will work."
msgstr ""
"指定された :class:`OpenerDirector` のインスタンスを、デフォルトで利用されるグ"
"ローバルの opener としてインストールします。 opener のインストールは、 "
"urlopen にその opener を使って欲しいとき以外必要ありません。普段は単に :func:"
"`~urllib.request.urlopen` の代わりに :meth:`OpenerDirector.open` を利用してく"
"ださい。この関数は引数が本当に :class:`OpenerDirector` のインスタンスであるか"
"どうかはチェックしません。適切なインターフェースを持った任意のクラスを利用す"
"ることができます。"

#: ../../library/urllib.request.rst:133
msgid ""
"Return an :class:`OpenerDirector` instance, which chains the handlers in the "
"order given. *handler*\\s can be either instances of :class:`BaseHandler`, "
"or subclasses of :class:`BaseHandler` (in which case it must be possible to "
"call the constructor without any parameters).  Instances of the following "
"classes will be in front of the *handler*\\s, unless the *handler*\\s "
"contain them, instances of them or subclasses of them: :class:`ProxyHandler` "
"(if proxy settings are detected), :class:`UnknownHandler`, :class:"
"`HTTPHandler`, :class:`HTTPDefaultErrorHandler`, :class:"
"`HTTPRedirectHandler`, :class:`FTPHandler`, :class:`FileHandler`, :class:"
"`HTTPErrorProcessor`."
msgstr ""
"与えられた順番に URL ハンドラを連鎖させる :class:`OpenerDirector`  のインスタ"
"ンスを返します。 *handler* は :class:`BaseHandler` または :class:"
"`BaseHandler` のサブクラスのインスタンスのどちらかです (どちらの場合も、コン"
"ストラクトは引数無しで呼び出せるようになっていなければなりません) 。クラス  :"
"class:`ProxyHandler` (proxy 設定が検出された場合), :class:`UnknownHandler`, :"
"class:`HTTPHandler`, :class:`HTTPDefaultErrorHandler`, :class:"
"`HTTPRedirectHandler`, :class:`FTPHandler`, :class:`FileHandler`, :class:"
"`HTTPErrorProcessor` については、そのクラスのインスタンスか、そのサブクラスの"
"インスタンスが *handler*  に含まれていない限り、 *handler* よりも先に連鎖しま"
"す。"

#: ../../library/urllib.request.rst:143
msgid ""
"If the Python installation has SSL support (i.e., if the :mod:`ssl` module "
"can be imported), :class:`HTTPSHandler` will also be added."
msgstr ""
"Python が SSL をサポートするように設定してインストールされている場合 (すなわ"
"ち、 :mod:`ssl` モジュールを import できる場合) :class:`HTTPSHandler` も追加"
"されます。"

#: ../../library/urllib.request.rst:146
msgid ""
"A :class:`BaseHandler` subclass may also change its :attr:`handler_order` "
"attribute to modify its position in the handlers list."
msgstr ""
":class:`BaseHandler` サブクラスでも :attr:`handler_order` メンバー変数を変更"
"して、ハンドラーリスト内での場所を変更できます。"

#: ../../library/urllib.request.rst:152
msgid ""
"Convert the pathname *path* from the local syntax for a path to the form "
"used in the path component of a URL.  This does not produce a complete URL.  "
"The return value will already be quoted using the :func:`~urllib.parse."
"quote` function."
msgstr ""
"ローカルシステムにおける記法で表されたパス名 *path* をURL におけるパス部分の"
"形式に変換します。これは完全な URL を生成するわけではありません。戻り値は :"
"func:`~urllib.parse.quote` 関数によってクオートされています。"

#: ../../library/urllib.request.rst:159
msgid ""
"Convert the path component *path* from a percent-encoded URL to the local "
"syntax for a path.  This does not accept a complete URL.  This function "
"uses :func:`~urllib.parse.unquote` to decode *path*."
msgstr ""
"URL の、パーセントエンコードされたパス部分 *path* をローカルシステムの記法に"
"変換します。これは完全な URL を受け付けません。*path* のデコードには :func:"
"`~urllib.parse.unquote` 関数を使用します。"

#: ../../library/urllib.request.rst:165
msgid ""
"This helper function returns a dictionary of scheme to proxy server URL "
"mappings. It scans the environment for variables named ``<scheme>_proxy``, "
"in a case insensitive approach, for all operating systems first, and when it "
"cannot find it, looks for proxy information from System Configuration for "
"macOS and Windows Systems Registry for Windows. If both lowercase and "
"uppercase environment variables exist (and disagree), lowercase is preferred."
msgstr ""
"このヘルパー関数はスキーマからプロキシサーバーのURLへのマッピングを行う辞書を"
"返します。この関数はまず、どのOSでも最初に ``<scheme>_proxy`` という名前の環"
"境変数を大文字小文字を区別せずにスキャンします。そこで見つからなかった場合、 "
"macOS の場合は macOS システム環境設定を、 Windows の場合はシステムレジストリ"
"を参照します。もし小文字と大文字の環境変数が両方存在する (そして値が一致しな"
"い) なら、小文字の環境変数が優先されます。"

#: ../../library/urllib.request.rst:175
msgid ""
"If the environment variable ``REQUEST_METHOD`` is set, which usually "
"indicates your script is running in a CGI environment, the environment "
"variable ``HTTP_PROXY`` (uppercase ``_PROXY``) will be ignored. This is "
"because that variable can be injected by a client using the \"Proxy:\" HTTP "
"header. If you need to use an HTTP proxy in a CGI environment, either use "
"``ProxyHandler`` explicitly, or make sure the variable name is in lowercase "
"(or at least the ``_proxy`` suffix)."
msgstr ""
"もし環境変数 ``REQUEST_METHOD`` が設定されていたら (これは通常スクリプトが "
"CGI 環境で動いていることを示しています)、環境変数 ``HTTP_PROXY`` (大文字の "
"``_PROXY``) は無視されます。その理由は、クライアントが \"Proxy:\" HTTP ヘッ"
"ダーを使ってこの環境変数を注入できるからです。もし CGI 環境で HTTP プロキシを"
"使う必要があれば、 ``ProxyHandler`` を明示的に使用するか、環境変数名を小文字"
"にしてください (あるいは、少なくともサフィックスを ``_proxy`` にしてくださ"
"い) 。"

#: ../../library/urllib.request.rst:184
msgid "The following classes are provided:"
msgstr "以下のクラスが提供されています:"

#: ../../library/urllib.request.rst:188
msgid "This class is an abstraction of a URL request."
msgstr "このクラスは URL リクエストを抽象化したものです。"

#: ../../library/urllib.request.rst:190
msgid "*url* should be a string containing a valid, properly encoded URL."
msgstr ""

#: ../../library/urllib.request.rst:192
msgid ""
"*data* must be an object specifying additional data to send to the server, "
"or ``None`` if no such data is needed.  Currently HTTP requests are the only "
"ones that use *data*.  The supported object types include bytes, file-like "
"objects, and iterables of bytes-like objects. If no ``Content-Length`` nor "
"``Transfer-Encoding`` header field has been provided, :class:`HTTPHandler` "
"will set these headers according to the type of *data*.  ``Content-Length`` "
"will be used to send bytes objects, while ``Transfer-Encoding: chunked`` as "
"specified in :rfc:`7230`, Section 3.3.1 will be used to send files and other "
"iterables."
msgstr ""

#: ../../library/urllib.request.rst:202
msgid ""
"For an HTTP POST request method, *data* should be a buffer in the standard :"
"mimetype:`application/x-www-form-urlencoded` format.  The :func:`urllib."
"parse.urlencode` function takes a mapping or sequence of 2-tuples and "
"returns an ASCII string in this format. It should be encoded to bytes before "
"being used as the *data* parameter."
msgstr ""
"HTTP POST リクエストメソッドでは *data* は標準の :mimetype:`application/x-"
"www-form-urlencoded` 形式のバッファーでなければなりません。 :func:`urllib."
"parse.urlencode` 関数は、マップ型あるいは 2 タプルのシーケンスを取り、この形"
"式の ASCII 文字列を返します。これは *data* パラメーターとして使用される前に "
"bytes 型にエンコードされなければなりません。"

#: ../../library/urllib.request.rst:208
msgid ""
"*headers* should be a dictionary, and will be treated as if :meth:"
"`add_header` was called with each key and value as arguments. This is often "
"used to \"spoof\" the ``User-Agent`` header value, which is used by a "
"browser to identify itself -- some HTTP servers only allow requests coming "
"from common browsers as opposed to scripts. For example, Mozilla Firefox may "
"identify itself as ``\"Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 "
"Firefox/2.0.0.11\"``, while :mod:`urllib`'s default user agent string is "
"``\"Python-urllib/2.6\"`` (on Python 2.6). All header keys are sent in camel "
"case."
msgstr ""
"*headers* は辞書でなければなりません。この辞書は :meth:`add_header` を辞書の"
"キーおよび値を引数として呼び出した時と同じように扱われます。この引数は、多く"
"の場合ブラウザーが何であるかを特定する ``User-Agent`` ヘッダーの値を \"偽装"
"\" するために用いられます。これは一部の HTTP サーバーが、スクリプトからのアク"
"セスを禁止するために一般的なブラウザーの ``User-Agent`` ヘッダーしか許可しな"
"いためです。例えば、 Mozilla Firefox は ``User-Agent`` に ``\"Mozilla/5.0 "
"(X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11\"`` のように設定し、 :"
"mod:`urllib` はデフォルトで ``\"Python-urllib/2.6\"`` (Python 2.6の場合) と設"
"定します。headersのすべてのキーはキャメルケースで送信されます。"

#: ../../library/urllib.request.rst:219
msgid ""
"An appropriate ``Content-Type`` header should be included if the *data* "
"argument is present.  If this header has not been provided and *data* is not "
"``None``, ``Content-Type: application/x-www-form-urlencoded`` will be added "
"as a default."
msgstr ""

#: ../../library/urllib.request.rst:224
msgid ""
"The next two arguments are only of interest for correct handling of third-"
"party HTTP cookies:"
msgstr ""
"次の2つの引数は、サードパーティの HTTP クッキーを正しく扱いたい場合にのみ関係"
"してきます:"

#: ../../library/urllib.request.rst:227
msgid ""
"*origin_req_host* should be the request-host of the origin transaction, as "
"defined by :rfc:`2965`.  It defaults to ``http.cookiejar."
"request_host(self)``.  This is the host name or IP address of the original "
"request that was initiated by the user. For example, if the request is for "
"an image in an HTML document, this should be the request-host of the request "
"for the page containing the image."
msgstr ""
"*origin_req_host* は、 :rfc:`2965` で定義されている元のトランザクションにおけ"
"るリクエストホスト (request-host of the origin transaction) です。デフォルト"
"の値は ``http.cookiejar.request_host(self)`` です。この値は、ユーザーによって"
"開始された元々のリクエストにおけるホスト名や IP アドレスです。例えば、もしリ"
"クエストがある HTML ドキュメント内の画像を指していれば、この値は画像を含んで"
"いるページへのリクエストにおけるリクエストホストになるはずです。"

#: ../../library/urllib.request.rst:235
msgid ""
"*unverifiable* should indicate whether the request is unverifiable, as "
"defined by :rfc:`2965`.  It defaults to ``False``.  An unverifiable request "
"is one whose URL the user did not have the option to approve.  For example, "
"if the request is for an image in an HTML document, and the user had no "
"option to approve the automatic fetching of the image, this should be true."
msgstr ""
"*unverifiable* は、 :rfc:`2965` の定義において、該当するリクエストが証明不能 "
"(unverifiable) であるかどうかを示します。デフォルトの値は ``False`` です。証"
"明不能なリクエストとは、ユーザが受け入れの可否を選択できないような URL を持つ"
"リクエストのことです。例えば、リクエストが HTML ドキュメント中の画像であり、"
"ユーザがこの画像を自動的に取得するか どうかを選択できない場合には、証明不能フ"
"ラグは True になります。"

#: ../../library/urllib.request.rst:242
msgid ""
"*method* should be a string that indicates the HTTP request method that will "
"be used (e.g. ``'HEAD'``).  If provided, its value is stored in the :attr:"
"`~Request.method` attribute and is used by :meth:`get_method`. The default "
"is ``'GET'`` if *data* is ``None`` or ``'POST'`` otherwise. Subclasses may "
"indicate a different default method by setting the :attr:`~Request.method` "
"attribute in the class itself."
msgstr ""

#: ../../library/urllib.request.rst:250
msgid ""
"The request will not work as expected if the data object is unable to "
"deliver its content more than once (e.g. a file or an iterable that can "
"produce the content only once) and the request is retried for HTTP redirects "
"or authentication.  The *data* is sent to the HTTP server right away after "
"the headers.  There is no support for a 100-continue expectation in the "
"library."
msgstr ""

#: ../../library/urllib.request.rst:257
msgid ":attr:`Request.method` argument is added to the Request class."
msgstr "引数 :attr:`Request.method` が Request クラスに追加されました。"

#: ../../library/urllib.request.rst:260
msgid "Default :attr:`Request.method` may be indicated at the class level."
msgstr ""
":attr:`Request.method` のデフォルト値はクラスレベルで指定されることがありま"
"す。"

#: ../../library/urllib.request.rst:263
msgid ""
"Do not raise an error if the ``Content-Length`` has not been provided and "
"*data* is neither ``None`` nor a bytes object. Fall back to use chunked "
"transfer encoding instead."
msgstr ""

#: ../../library/urllib.request.rst:270
msgid ""
"The :class:`OpenerDirector` class opens URLs via :class:`BaseHandler`\\ s "
"chained together. It manages the chaining of handlers, and recovery from "
"errors."
msgstr ""
":class:`OpenerDirector` クラスは、 :class:`BaseHandler` の連鎖的に呼び出して "
"URL を開きます。このクラスはハンドラをどのように連鎖させるか、またどのように"
"エラーをリカバリするかを管理します。"

#: ../../library/urllib.request.rst:276
msgid ""
"This is the base class for all registered handlers --- and handles only the "
"simple mechanics of registration."
msgstr ""
"このクラスはハンドラ連鎖に登録される全てのハンドラがベースとしているクラスで"
"す -- このクラスでは登録のための単純なメカニズムだけを扱います。"

#: ../../library/urllib.request.rst:282
msgid ""
"A class which defines a default handler for HTTP error responses; all "
"responses are turned into :exc:`~urllib.error.HTTPError` exceptions."
msgstr ""
"HTTP エラーレスポンスのデフォルトハンドラーを定義するクラスです; すべてのレス"
"ポンスは :exc:`~urllib.error.HTTPError` 例外に変換されます。"

#: ../../library/urllib.request.rst:288
msgid "A class to handle redirections."
msgstr "リダイレクションを扱うクラスです。"

#: ../../library/urllib.request.rst:293
msgid "A class to handle HTTP Cookies."
msgstr "HTTP Cookie を扱うためのクラスです。"

#: ../../library/urllib.request.rst:298
msgid ""
"Cause requests to go through a proxy. If *proxies* is given, it must be a "
"dictionary mapping protocol names to URLs of proxies. The default is to read "
"the list of proxies from the environment variables ``<protocol>_proxy``.  If "
"no proxy environment variables are set, then in a Windows environment proxy "
"settings are obtained from the registry's Internet Settings section, and in "
"a macOS environment proxy information is retrieved from the System "
"Configuration Framework."
msgstr ""
"このクラスはプロキシを通過してリクエストを送らせます。引数 *proxies* を与える"
"場合、プロトコル名からプロキシの URL へ対応付ける辞書でなくてはなりません。標"
"準では、プロキシのリストを環境変数 ``<protocol>_proxy`` から読み出します。プ"
"ロキシ環境変数が設定されていない場合は、 Windows 環境では、 レジストリのイン"
"ターネット設定セクションからプロキシ設定を手に入れ、 macOS 環境では、 macOS "
"システム設定フレームワーク (System Configuration Framework) からプロキシ情報"
"を取得します。"

#: ../../library/urllib.request.rst:306
msgid "To disable autodetected proxy pass an empty dictionary."
msgstr "自動検出されたproxyを無効にするには、空の辞書を渡してください。"

#: ../../library/urllib.request.rst:308
msgid ""
"The :envvar:`no_proxy` environment variable can be used to specify hosts "
"which shouldn't be reached via proxy; if set, it should be a comma-separated "
"list of hostname suffixes, optionally with ``:port`` appended, for example "
"``cern.ch,ncsa.uiuc.edu,some.host:8080``."
msgstr ""
":envvar:`no_proxy` 環境変数は、proxyを利用せずにアクセスするべきホストを指定"
"するために利用されます。設定する場合は、カンマ区切りの、ホストネーム suffix "
"のリストで、オプションとして ``:port`` を付けることができます。例えば、 "
"``cern.ch,ncsa.uiuc.edu,some.host:8080``."

#: ../../library/urllib.request.rst:315
msgid ""
"``HTTP_PROXY`` will be ignored if a variable ``REQUEST_METHOD`` is set; see "
"the documentation on :func:`~urllib.request.getproxies`."
msgstr ""
"変数 ``REQUEST_METHOD`` が設定されている場合、 ``HTTP_PROXY`` は無視されま"
"す; :func:`~urllib.request.getproxies` のドキュメンテーションを参照してくださ"
"い。"

#: ../../library/urllib.request.rst:321
msgid "Keep a database of  ``(realm, uri) -> (user, password)`` mappings."
msgstr ""
"``(realm, uri) -> (user, password)`` の対応付けデータベースを保持します。"

#: ../../library/urllib.request.rst:326
msgid ""
"Keep a database of  ``(realm, uri) -> (user, password)`` mappings. A realm "
"of ``None`` is considered a catch-all realm, which is searched if no other "
"realm fits."
msgstr ""
"``(realm, uri) -> (user, password)``  の対応付けデータベースを保持します。レ"
"ルム ``None`` はその他諸々のレルムを表し、他のレルムが該当しない場合に検索さ"
"れます。"

#: ../../library/urllib.request.rst:333
msgid ""
"A variant of :class:`HTTPPasswordMgrWithDefaultRealm` that also has a "
"database of ``uri -> is_authenticated`` mappings.  Can be used by a "
"BasicAuth handler to determine when to send authentication credentials "
"immediately instead of waiting for a ``401`` response first."
msgstr ""
"``uri -> is_authenticated`` マッピングのデータベースも持つ :class:"
"`HTTPPasswordMgrWithDefaultRealm` のバリエーションです。最初に ``401`` レスポ"
"ンスを待つのではなく直ちに認証情報を送るときの条件を判断するために、 "
"BasicAuth ハンドラによって使われます。"

#: ../../library/urllib.request.rst:343
msgid ""
"This is a mixin class that helps with HTTP authentication, both to the "
"remote host and to a proxy. *password_mgr*, if given, should be something "
"that is compatible with :class:`HTTPPasswordMgr`; refer to section :ref:"
"`http-password-mgr` for information on the interface that must be "
"supported.  If *passwd_mgr* also provides ``is_authenticated`` and "
"``update_authenticated`` methods (see :ref:`http-password-mgr-with-prior-"
"auth`), then the handler will use the ``is_authenticated`` result for a "
"given URI to determine whether or not to send authentication credentials "
"with the request.  If ``is_authenticated`` returns ``True`` for the URI, "
"credentials are sent.  If ``is_authenticated`` is ``False``, credentials are "
"not sent, and then if a ``401`` response is received the request is re-sent "
"with the authentication credentials.  If authentication succeeds, "
"``update_authenticated`` is called to set ``is_authenticated`` ``True`` for "
"the URI, so that subsequent requests to the URI or any of its super-URIs "
"will automatically include the authentication credentials."
msgstr ""
"これは、リモートホストとプロキシの両方に対して HTTP 認証を行うことを助ける "
"mixin クラスです。 *password_mgr* は、もし与えられたら :class:"
"`HTTPPasswordMgr` と互換性のあるオブジェクトでなければなりません; サポートす"
"べきインターフェースに関する情報は :ref:`http-password-mgr` 節を参照してくだ"
"さい。もし *passwd_mgr* が ``is_authenticated`` と ``update_authenticated`` "
"メソッドも提供するなら (:ref:`http-password-mgr-with-prior-auth` を参照)、ハ"
"ンドラは与えられた URI に対する ``is_authenticated`` の結果を用いてリクエスト"
"において認証情報を送るかどうかを決定します。もし ``is_authenticated`` がその "
"URI に対して ``True`` を返すなら、認証情報が送られます。 "
"``is_authenticated`` が ``False`` なら認証情報は送られません。そして、もし "
"``401`` レスポンスを受け取ったら、認証情報を付けて改めてリクエストが送信され"
"ます。もし認証が成功したら、それ以降その URI またはその親 URI に対して行われ"
"るリクエストが認証情報を自動的に含むように、 URI に対して "
"``is_authenticated`` を ``True`` に設定するために ``update_authenticated`` が"
"呼ばれます。"

#: ../../library/urllib.request.rst:360
msgid "Added ``is_authenticated`` support."
msgstr "``is_authenticated`` サポートが追加されました。"

#: ../../library/urllib.request.rst:366
msgid ""
"Handle authentication with the remote host. *password_mgr*, if given, should "
"be something that is compatible with :class:`HTTPPasswordMgr`; refer to "
"section :ref:`http-password-mgr` for information on the interface that must "
"be supported. HTTPBasicAuthHandler will raise a :exc:`ValueError` when "
"presented with a wrong Authentication scheme."
msgstr ""
"遠隔ホストとの間での認証を扱います。 *password_mgr* を与える場合、 :class:"
"`HTTPPasswordMgr` と互換性がなければなりません; 互換性のためにサポートしなけ"
"ればならないインターフェースについての情報はセクション :ref:`http-password-"
"mgr` を参照してください。HTTPBasicAuthHandler は、間違った認証スキーマが与え"
"られると :exc:`ValueError` を送出します。"

#: ../../library/urllib.request.rst:375 ../../library/urllib.request.rst:409
msgid ""
"Handle authentication with the proxy. *password_mgr*, if given, should be "
"something that is compatible with :class:`HTTPPasswordMgr`; refer to "
"section :ref:`http-password-mgr` for information on the interface that must "
"be supported."
msgstr ""
"プロキシとの間での認証を扱います。 *password_mgr* を与える場合、 :class:"
"`HTTPPasswordMgr` と互換性が なければなりません;  互換性のためにサポートしな"
"ければならないインターフェースについての情報はセクション :ref:`http-password-"
"mgr` を参照してください。"

#: ../../library/urllib.request.rst:383
msgid ""
"This is a mixin class that helps with HTTP authentication, both to the "
"remote host and to a proxy. *password_mgr*, if given, should be something "
"that is compatible with :class:`HTTPPasswordMgr`; refer to section :ref:"
"`http-password-mgr` for information on the interface that must be supported."
msgstr ""
"このクラスはHTTP 認証を補助するための混ぜ込みクラス (mixin class) です。遠隔"
"ホストとプロキシの両方に対応しています。 *password_mgr* を与える場合、 :"
"class:`HTTPPasswordMgr` と互換性がなければなりません; 互換性のためにサポート"
"しなければならないインターフェースについての情報はセクション :ref:`http-"
"password-mgr` を参照してください。"

#: ../../library/urllib.request.rst:392
msgid ""
"Handle authentication with the remote host. *password_mgr*, if given, should "
"be something that is compatible with :class:`HTTPPasswordMgr`; refer to "
"section :ref:`http-password-mgr` for information on the interface that must "
"be supported. When both Digest Authentication Handler and Basic "
"Authentication Handler are both added, Digest Authentication is always tried "
"first. If the Digest Authentication returns a 40x response again, it is sent "
"to Basic Authentication handler to Handle.  This Handler method will raise "
"a :exc:`ValueError` when presented with an authentication scheme other than "
"Digest or Basic."
msgstr ""
"リモートホストとの認証を扱います。*password_mgr* を与える場合、:class:"
"`HTTPPasswordMgr` と互換性のあるものでなければなりません。サポートしなければ"
"ならないインターフェースについての情報は :ref:`http-password-mgr` 節を参照し"
"てください。Digest 認証ハンドラーと Basic 認証ハンドラーの両方が追加された場"
"合、常に Digest 認証を先に試みます。Digest 認証が 40x のレスポンスを再び返す"
"と、Basic 認証ハンドラーに送信されます。このハンドラーメソッドは、Digest およ"
"び Basic 以外の認証スキームが存在する場合は :exc:`ValueError` を送出します。"

#: ../../library/urllib.request.rst:402
msgid "Raise :exc:`ValueError` on unsupported Authentication Scheme."
msgstr ""
"未サポートの認証スキームでは :exc:`ValueError` を送出するようになりました。"

#: ../../library/urllib.request.rst:417
msgid "A class to handle opening of HTTP URLs."
msgstr "HTTP の URL を開きます。"

#: ../../library/urllib.request.rst:422
msgid ""
"A class to handle opening of HTTPS URLs.  *context* and *check_hostname* "
"have the same meaning as in :class:`http.client.HTTPSConnection`."
msgstr ""
"HTTPS で URL を開きます。*context* および *check_hostname* は :class:`http."
"client.HTTPSConnection` のものと同じ意味です。"

#: ../../library/urllib.request.rst:425
msgid "*context* and *check_hostname* were added."
msgstr "*context* および *check_hostname* が追加されました。"

#: ../../library/urllib.request.rst:431
msgid "Open local files."
msgstr "ローカルファイルを開きます。"

#: ../../library/urllib.request.rst:435
msgid "Open data URLs."
msgstr "data URL を開きます。"

#: ../../library/urllib.request.rst:441
msgid "Open FTP URLs."
msgstr "FTP の URL を開きます。"

#: ../../library/urllib.request.rst:446
msgid ""
"Open FTP URLs, keeping a cache of open FTP connections to minimize delays."
msgstr ""
"FTP の URL を開きます。遅延を最小限にするために、開かれている FTP  接続に対す"
"るキャッシュを保持します。"

#: ../../library/urllib.request.rst:451
msgid "A catch-all class to handle unknown URLs."
msgstr "その他諸々のためのクラスで、未知のプロトコルの URL を開きます。"

#: ../../library/urllib.request.rst:456 ../../library/urllib.request.rst:1162
msgid "Process HTTP error responses."
msgstr "HTTP エラー応答の処理をします。"

#: ../../library/urllib.request.rst:462
msgid "Request Objects"
msgstr "Request オブジェクト"

#: ../../library/urllib.request.rst:464
msgid ""
"The following methods describe :class:`Request`'s public interface, and so "
"all may be overridden in subclasses.  It also defines several public "
"attributes that can be used by clients to inspect the parsed request."
msgstr ""
"以下のメソッドは :class:`Request` の公開インターフェースについて説明していま"
"す。これらはすべてサブクラスでオーバーライドできます。また、解析したリクエス"
"トを調査するためにクライアントで使用するいくつかの属性も定義します。"

#: ../../library/urllib.request.rst:471
msgid "The original URL passed to the constructor."
msgstr "コンストラクターに渡されたオリジナルの URL です。"

#: ../../library/urllib.request.rst:475
msgid ""
"Request.full_url is a property with setter, getter and a deleter. Getting :"
"attr:`~Request.full_url` returns the original request URL with the fragment, "
"if it was present."
msgstr ""
"Request.full_url は、 setter, getter, deleter を持つプロパティです。もし存在"
"すれば、 :attr:`~Request.full_url` はオリジナルのリクエスト URL フラグメント"
"付きで返します。"

#: ../../library/urllib.request.rst:481
msgid "The URI scheme."
msgstr "URI スキームです。"

#: ../../library/urllib.request.rst:485
msgid ""
"The URI authority, typically a host, but may also contain a port separated "
"by a colon."
msgstr ""
"URI オーソリティです。通常はホスト名ですが、コロンで区切られたポート番号が付"
"随することもあります。"

#: ../../library/urllib.request.rst:490
msgid "The original host for the request, without port."
msgstr "リクエストしたオリジナルのホスト名です。ポート番号はつきません。"

#: ../../library/urllib.request.rst:494
msgid ""
"The URI path.  If the :class:`Request` uses a proxy, then selector will be "
"the full URL that is passed to the proxy."
msgstr ""
"URI パスです。:class:`Request` がプロキシを使用する場合、セレクターはプロキシ"
"に渡される完全な URL になります。"

#: ../../library/urllib.request.rst:499
msgid "The entity body for the request, or ``None`` if not specified."
msgstr ""
"リクエストのエンティティボディか、指定されない場合は ``None`` になります。"

#: ../../library/urllib.request.rst:501
msgid ""
"Changing value of :attr:`Request.data` now deletes \"Content-Length\" header "
"if it was previously set or calculated."
msgstr ""
":attr:`Request.data` の値が変更されると、もしそれ以前に \"Content-Length\" "
"ヘッダーの値が設定または計算されていたらヘッダーが削除されるようになりまし"
"た。"

#: ../../library/urllib.request.rst:507
msgid ""
"boolean, indicates whether the request is unverifiable as defined by :rfc:"
"`2965`."
msgstr ""
"リクエストが :rfc:`2965` で定義された証明不能 (unverifiable) であるかどうかを"
"示す論理値です。"

#: ../../library/urllib.request.rst:512
msgid ""
"The HTTP request method to use.  By default its value is :const:`None`, "
"which means that :meth:`~Request.get_method` will do its normal computation "
"of the method to be used.  Its value can be set (thus overriding the default "
"computation in :meth:`~Request.get_method`) either by providing a default "
"value by setting it at the class level in a :class:`Request` subclass, or by "
"passing a value in to the :class:`Request` constructor via the *method* "
"argument."
msgstr ""
"HTTP リクエストで使うメソッドです。\n"
"デフォルト値は :const:`None` で、このときは使うメソッドを :meth:`~Request."
"get_method` が通常の方法で決定するということになります。\n"
"この値を設定する (従って :meth:`~Request.get_method` のデフォルトの決定を上書"
"きする) 方法は、 :class:`Request` サブクラスでのクラスレベルの設定処理でデ"
"フォルト値を提供するか、 :class:`Request` のコンストラクタの *method* 引数へ"
"値を渡すかです。"

#: ../../library/urllib.request.rst:522
msgid ""
"A default value can now be set in subclasses; previously it could only be "
"set via the constructor argument."
msgstr ""
"サブクラスでデフォルト値が設定できるようになりました; 以前はコンストラクタ引"
"数からしか設定できませんでした。"

#: ../../library/urllib.request.rst:529
msgid ""
"Return a string indicating the HTTP request method.  If :attr:`Request."
"method` is not ``None``, return its value, otherwise return ``'GET'`` if :"
"attr:`Request.data` is ``None``, or ``'POST'`` if it's not. This is only "
"meaningful for HTTP requests."
msgstr ""
"HTTP リクエストメソッドを示す文字列を返します。:attr:`Request.method` が "
"``None`` でなければその値を返します。そうでない場合、:attr:`Request.data` が "
"``None`` なら ``'GET'`` を、そうでなければ ``'POST'`` を返します。これは "
"HTTP リクエストに対してのみ意味を持ちます。"

#: ../../library/urllib.request.rst:534
msgid "get_method now looks at the value of :attr:`Request.method`."
msgstr "get_method は :attr:`Request.method` の値を参照するようになりました。"

#: ../../library/urllib.request.rst:540
msgid ""
"Add another header to the request.  Headers are currently ignored by all "
"handlers except HTTP handlers, where they are added to the list of headers "
"sent to the server.  Note that there cannot be more than one header with the "
"same name, and later calls will overwrite previous calls in case the *key* "
"collides. Currently, this is no loss of HTTP functionality, since all "
"headers which have meaning when used more than once have a (header-specific) "
"way of gaining the same functionality using only one header.  Note that "
"headers added using this method are also added to redirected requests."
msgstr ""
"リクエストに新たなヘッダーを追加します。ヘッダーは HTTP ハンドラ以外のハンド"
"ラでは無視されます。HTTP ハンドラでは、引数はサーバに送信される ヘッダーのリ"
"ストに追加されます。同じ名前を持つヘッダを 2 つ以上持つことはできず、 *key* "
"の衝突が生じた場合、後で追加したヘッダーが前に 追加したヘッダーを上書きしま"
"す。現時点では、この機能は HTTP の機能を損ねることはありません。というのは、"
"複数回呼び出したときに意味を 持つようなヘッダーには、どれもただ一つのヘッダー"
"を使って同じ機能を果たすための (ヘッダー特有の) 方法があるからです。このメ"
"ソッドを使って追加されたヘッダーはリダイレクトされたリクエストにも追加される"
"ことに注意してください。"

#: ../../library/urllib.request.rst:552
msgid "Add a header that will not be added to a redirected request."
msgstr "リダイレクトされたリクエストには追加されないヘッダーを追加します。"

#: ../../library/urllib.request.rst:557
msgid ""
"Return whether the instance has the named header (checks both regular and "
"unredirected)."
msgstr ""
"インスタンスが名前つきヘッダーであるかどうかを (通常のヘッダーと非リダイレク"
"トヘッダの両方を調べて) 返します。"

#: ../../library/urllib.request.rst:563
msgid ""
"Remove named header from the request instance (both from regular and "
"unredirected headers)."
msgstr ""
"リクエストインスタンス (の通常のヘッダーと非リダイレクトヘッダーの両方) から"
"名前つきヘッダーを削除します。"

#: ../../library/urllib.request.rst:571
msgid "Return the URL given in the constructor."
msgstr "コンストラクタで与えられた URL を返します。"

#: ../../library/urllib.request.rst:575
msgid "Returns :attr:`Request.full_url`"
msgstr ":attr:`Request.full_url` を返します。"

#: ../../library/urllib.request.rst:580
msgid ""
"Prepare the request by connecting to a proxy server. The *host* and *type* "
"will replace those of the instance, and the instance's selector will be the "
"original URL given in the constructor."
msgstr ""
"リクエストがプロキシサーバを経由するように準備します。 *host* および *type* "
"はインスタンスのもとの設定と置き換えられ ます。インスタンスのセレクタはコンス"
"トラクタに与えたもともとの URL になります。"

#: ../../library/urllib.request.rst:587
msgid ""
"Return the value of the given header. If the header is not present, return "
"the default value."
msgstr ""
"指定されたヘッダーの値を返します。ヘッダーがない場合は、 *default* の値を返し"
"ます。"

#: ../../library/urllib.request.rst:593
msgid ""
"Return a list of tuples (header_name, header_value) of the Request headers."
msgstr ""
"リクエストヘッダーの値を、タプル (header_name, header_value) のリストで返しま"
"す。"

#: ../../library/urllib.request.rst:595
msgid ""
"The request methods add_data, has_data, get_data, get_type, get_host, "
"get_selector, get_origin_req_host and is_unverifiable that were deprecated "
"since 3.3 have been removed."
msgstr ""
"3.3 から非推奨だった Request オブジェクトのメソッド add_data, has_data, "
"get_data, get_type, get_host, get_selector, get_origin_req_host, "
"is_unverifiable が削除されました。"

#: ../../library/urllib.request.rst:604
msgid "OpenerDirector Objects"
msgstr "OpenerDirector オブジェクト"

#: ../../library/urllib.request.rst:606
msgid ":class:`OpenerDirector` instances have the following methods:"
msgstr ":class:`OpenerDirector` インスタンスは以下のメソッドを持っています:"

#: ../../library/urllib.request.rst:611
msgid ""
"*handler* should be an instance of :class:`BaseHandler`.  The following "
"methods are searched, and added to the possible chains (note that HTTP "
"errors are a special case).  Note that, in the following, *protocol* should "
"be replaced with the actual protocol to handle, for example :meth:"
"`http_response` would be the HTTP protocol response handler.  Also *type* "
"should be replaced with the actual HTTP code, for example :meth:"
"`http_error_404` would handle HTTP 404 errors."
msgstr ""

#: ../../library/urllib.request.rst:619
msgid ""
":meth:`!<protocol>_open` --- signal that the handler knows how to open "
"*protocol* URLs."
msgstr ""

#: ../../library/urllib.request.rst:622
msgid "See |protocol_open|_ for more information."
msgstr "詳細は、 |protocol_open|_ を参照してください。"

#: ../../library/urllib.request.rst:624
msgid ""
":meth:`!http_error_\\<type\\>` --- signal that the handler knows how to "
"handle HTTP errors with HTTP error code *type*."
msgstr ""

#: ../../library/urllib.request.rst:627
msgid "See |http_error_nnn|_ for more information."
msgstr "詳細は、 |http_error_nnn|_ を参照してください。"

#: ../../library/urllib.request.rst:629
msgid ""
":meth:`!<protocol>_error` --- signal that the handler knows how to handle "
"errors from (non-\\ ``http``) *protocol*."
msgstr ""

#: ../../library/urllib.request.rst:632
msgid ""
":meth:`!<protocol>_request` --- signal that the handler knows how to pre-"
"process *protocol* requests."
msgstr ""

#: ../../library/urllib.request.rst:635
msgid "See |protocol_request|_ for more information."
msgstr "詳細は、 |protocol_request|_ を参照してください。"

#: ../../library/urllib.request.rst:637
msgid ""
":meth:`!<protocol>_response` --- signal that the handler knows how to post-"
"process *protocol* responses."
msgstr ""

#: ../../library/urllib.request.rst:640
msgid "See |protocol_response|_ for more information."
msgstr "詳細は、 |protocol_response|_ を参照してください。"

#: ../../library/urllib.request.rst:649
msgid ""
"Open the given *url* (which can be a request object or a string), optionally "
"passing the given *data*. Arguments, return values and exceptions raised are "
"the same as those of :func:`urlopen` (which simply calls the :meth:`open` "
"method on the currently installed global :class:`OpenerDirector`).  The "
"optional *timeout* parameter specifies a timeout in seconds for blocking "
"operations like the connection attempt (if not specified, the global default "
"timeout setting will be used). The timeout feature actually works only for "
"HTTP, HTTPS and FTP connections."
msgstr ""
"与えられた *url* (リクエストオブジェクトでも文字列でもかまいません) を開きま"
"す。オプションとして *data* を与えることができます。 引数、戻り値、および送出"
"される例外は :func:`urlopen` と同じです (:func:`urlopen` の場合、標準でインス"
"トールされている グローバルな :class:`OpenerDirector` の :meth:`open` メソッ"
"ドを呼び出します) 。 オプションの *timeout* 引数は、接続開始のようなブロック"
"する処理におけるタイムアウト時間を 秒数で指定します。(指定しなかった場合は、"
"グローバルのデフォルト設定が利用されます) タイムアウト機能は、 HTTP, HTTPS, "
"FTP 接続でのみ有効です。"

#: ../../library/urllib.request.rst:661
msgid ""
"Handle an error of the given protocol.  This will call the registered error "
"handlers for the given protocol with the given arguments (which are protocol "
"specific).  The HTTP protocol is a special case which uses the HTTP response "
"code to determine the specific error handler; refer to the :meth:`!"
"http_error_\\<type\\>` methods of the handler classes."
msgstr ""

#: ../../library/urllib.request.rst:667
msgid ""
"Return values and exceptions raised are the same as those of :func:`urlopen`."
msgstr "戻り値および送出される例外は :func:`urlopen` と同じものです。"

#: ../../library/urllib.request.rst:669
msgid "OpenerDirector objects open URLs in three stages:"
msgstr ""
"OpenerDirector オブジェクトは、以下の 3 つのステージに分けて URL を開きます:"

#: ../../library/urllib.request.rst:671
msgid ""
"The order in which these methods are called within each stage is determined "
"by sorting the handler instances."
msgstr ""
"各ステージで OpenerDirector オブジェクトのメソッドがどのような順で呼び出され"
"るかは、ハンドラインスタンスの並び方で決まります。"

#: ../../library/urllib.request.rst:674
msgid ""
"Every handler with a method named like :meth:`!<protocol>_request` has that "
"method called to pre-process the request."
msgstr ""

#: ../../library/urllib.request.rst:677
msgid ""
"Handlers with a method named like :meth:`!<protocol>_open` are called to "
"handle the request. This stage ends when a handler either returns a non-\\ :"
"const:`None` value (ie. a response), or raises an exception (usually :exc:"
"`~urllib.error.URLError`).  Exceptions are allowed to propagate."
msgstr ""

#: ../../library/urllib.request.rst:682
msgid ""
"In fact, the above algorithm is first tried for methods named :meth:"
"`~BaseHandler.default_open`.  If all such methods return :const:`None`, the "
"algorithm is repeated for methods named like :meth:`!<protocol>_open`.  If "
"all such methods return :const:`None`, the algorithm is repeated for methods "
"named :meth:`~BaseHandler.unknown_open`."
msgstr ""

#: ../../library/urllib.request.rst:688
msgid ""
"Note that the implementation of these methods may involve calls of the "
"parent :class:`OpenerDirector` instance's :meth:`~OpenerDirector.open` and :"
"meth:`~OpenerDirector.error` methods."
msgstr ""
"これらのメソッドの実装には、親となる :class:`OpenerDirector` インスタンスの :"
"meth:`~OpenDirector.open` や :meth:`~OpenDirector.error` といったメソッド呼び"
"出しが入る場合があるので注意してください。"

#: ../../library/urllib.request.rst:692
msgid ""
"Every handler with a method named like :meth:`!<protocol>_response` has that "
"method called to post-process the response."
msgstr ""

#: ../../library/urllib.request.rst:699
msgid "BaseHandler Objects"
msgstr "BaseHandler オブジェクト"

#: ../../library/urllib.request.rst:701
msgid ""
":class:`BaseHandler` objects provide a couple of methods that are directly "
"useful, and others that are meant to be used by derived classes.  These are "
"intended for direct use:"
msgstr ""
":class:`BaseHandler` オブジェクトは直接的に役に立つ 2 つのメソッドと、その他"
"として派生クラスで使われることを想定したメソッドを 提供します。以下は直接的に"
"使うためのメソッドです:"

#: ../../library/urllib.request.rst:708
msgid "Add a director as parent."
msgstr "親オブジェクトとして、 ``director`` を追加します。"

#: ../../library/urllib.request.rst:713
msgid "Remove any parents."
msgstr "全ての親オブジェクトを削除します。"

#: ../../library/urllib.request.rst:715
msgid ""
"The following attribute and methods should only be used by classes derived "
"from :class:`BaseHandler`."
msgstr ""
"以下の属性およびメソッドは :class:`BaseHandler` から派生したクラスでのみ使わ"
"れます。"

#: ../../library/urllib.request.rst:720
msgid ""
"The convention has been adopted that subclasses defining :meth:`!"
"<protocol>_request` or :meth:`!<protocol>_response` methods are named :class:"
"`!\\*Processor`; all others are named :class:`!\\*Handler`."
msgstr ""

#: ../../library/urllib.request.rst:727
msgid ""
"A valid :class:`OpenerDirector`, which can be used to open using a different "
"protocol, or handle errors."
msgstr ""
"有効な :class:`OpenerDirector` です。この値は違うプロトコルを使って URL を開"
"く場合やエラーを処理する際に使われます。"

#: ../../library/urllib.request.rst:733
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"define it if they want to catch all URLs."
msgstr ""
"このメソッドは :class:`BaseHandler` では定義されて *いません* 。しかし、全て"
"の URL をキャッチさせたいなら、サブクラスで定義する 必要があります。"

#: ../../library/urllib.request.rst:736
msgid ""
"This method, if implemented, will be called by the parent :class:"
"`OpenerDirector`.  It should return a file-like object as described in the "
"return value of the :meth:`~OpenerDirector.open` method of :class:"
"`OpenerDirector`, or ``None``. It should raise :exc:`~urllib.error."
"URLError`, unless a truly exceptional thing happens (for example, :exc:"
"`MemoryError` should not be mapped to :exc:`~urllib.error.URLError`)."
msgstr ""

#: ../../library/urllib.request.rst:743
msgid "This method will be called before any protocol-specific open method."
msgstr ""
"このメソッドはプロトコル固有のオープンメソッドが呼び出される前に呼び出されま"
"す。"

#: ../../library/urllib.request.rst:750
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"define it if they want to handle URLs with the given protocol."
msgstr ""
"このメソッドは :class:`BaseHandler` では定義されて *いません* 。しかしプロト"
"コルの URL をキャッチしたいなら、サブクラスで定義する必要があります。"

#: ../../library/urllib.request.rst:753
msgid ""
"This method, if defined, will be called by the parent :class:"
"`OpenerDirector`. Return values should be the same as for  :meth:"
"`~BaseHandler.default_open`."
msgstr ""

#: ../../library/urllib.request.rst:759
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"define it if they want to catch all URLs with no specific registered handler "
"to open it."
msgstr ""
"このメソッドは :class:`BaseHandler` では定義されて *いません* 。しかし URL を"
"開くための特定のハンドラが登録されていないような URL をキャッチしたいなら、サ"
"ブクラスで定義する必要があります。"

#: ../../library/urllib.request.rst:763
msgid ""
"This method, if implemented, will be called by the :attr:`parent` :class:"
"`OpenerDirector`.  Return values should be the same as for :meth:"
"`default_open`."
msgstr ""
"このメソッドが定義されていた場合、 :attr:`parent` :class:`OpenerDirector` か"
"ら呼び出されます。戻り値は :meth:`default_open` と同じでなければなりません。"

#: ../../library/urllib.request.rst:770
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"override it if they intend to provide a catch-all for otherwise unhandled "
"HTTP errors.  It will be called automatically by the  :class:"
"`OpenerDirector` getting the error, and should not normally be called in "
"other circumstances."
msgstr ""
"このメソッドは :class:`BaseHandler` では定義されて *いません* 。しかしその他"
"の処理されなかった HTTP エラーを処理する機能をもたせたいなら、サブクラスで定"
"義する必要があります。このメソッドはエラーに遭遇した :class:`OpenerDirector` "
"から自動的に呼び出されます。その他の状況では普通呼び出すべきではありません。"

#: ../../library/urllib.request.rst:775
msgid ""
"*req* will be a :class:`Request` object, *fp* will be a file-like object "
"with the HTTP error body, *code* will be the three-digit code of the error, "
"*msg* will be the user-visible explanation of the code and *hdrs* will be a "
"mapping object with the headers of the error."
msgstr ""
"*req* は :class:`Request` オブジェクトで、 *fp* は HTTP エラー本体を読み出せ"
"るようなファイル類似のオブジェクトに なります。 *code* は 3 桁の 10 進数から"
"なるエラーコードで、 *msg* ユーザ向けのエラーコード解説です。 *hdrs* は エ"
"ラー応答のヘッダーをマップしたオブジェクトです。"

#: ../../library/urllib.request.rst:780
msgid ""
"Return values and exceptions raised should be the same as those of :func:"
"`urlopen`."
msgstr ""
"返される値および送出される例外は :func:`urlopen` と同じものでなければなりませ"
"ん。"

#: ../../library/urllib.request.rst:787
msgid ""
"*nnn* should be a three-digit HTTP error code.  This method is also not "
"defined in :class:`BaseHandler`, but will be called, if it exists, on an "
"instance of a subclass, when an HTTP error with code *nnn* occurs."
msgstr ""
"*nnn* は 3 桁の 10 進数からなる HTTP エラーコードでなくてはなりません。このメ"
"ソッドも :class:`BaseHandler` では定義されていませんが、サブクラスのインスタ"
"ンスで定義されていた場合、エラーコード *nnn* の HTTP エラーが発生した際に呼び"
"出されます。"

#: ../../library/urllib.request.rst:791
msgid "Subclasses should override this method to handle specific HTTP errors."
msgstr ""
"特定の HTTP エラーに対する処理を行うためには、このメソッドをサブクラスでオー"
"バライドする必要があります。"

#: ../../library/urllib.request.rst:793
msgid ""
"Arguments, return values and exceptions raised should be the same as for :"
"meth:`~BaseHandler.http_error_default`."
msgstr ""

#: ../../library/urllib.request.rst:801
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"define it if they want to pre-process requests of the given protocol."
msgstr ""
"このメソッドは :class:`BaseHandler` では *定義されていません* が、サブクラス"
"で特定のプロトコルのリクエストのプリプロセスを行いたい場合には定義する必要が"
"あります。"

#: ../../library/urllib.request.rst:804
msgid ""
"This method, if defined, will be called by the parent :class:"
"`OpenerDirector`. *req* will be a :class:`Request` object. The return value "
"should be a :class:`Request` object."
msgstr ""
"このメソッドが定義されていると、親となる :class:`OpenerDirector` から呼び出さ"
"れます。その際、 *req* は :class:`Request` オブジェクトになります。戻り値は :"
"class:`Request` オブジェクトでなければなりません。"

#: ../../library/urllib.request.rst:813
msgid ""
"This method is *not* defined in :class:`BaseHandler`, but subclasses should "
"define it if they want to post-process responses of the given protocol."
msgstr ""
"このメソッドは :class:`BaseHandler` では *定義されていません* が、サブクラス"
"で特定のプロトコルのリクエストのポストプロセスを行いたい場合には定義する必要"
"があります。"

#: ../../library/urllib.request.rst:816
msgid ""
"This method, if defined, will be called by the parent :class:"
"`OpenerDirector`. *req* will be a :class:`Request` object. *response* will "
"be an object implementing the same interface as the return value of :func:"
"`urlopen`.  The return value should implement the same interface as the "
"return value of :func:`urlopen`."
msgstr ""
"このメソッドが定義されていると、親となる :class:`OpenerDirector` から呼び出さ"
"れます。その際、 *req* は :class:`Request` オブジェクトになります。 "
"*response* は :func:`urlopen` の戻り値と同じインターフェースを 実装したオブ"
"ジェクトになります。戻り値もまた、 :func:`urlopen` の戻り値と同じインター"
"フェースを実装したオブジェクトでなければなりません。"

#: ../../library/urllib.request.rst:826
msgid "HTTPRedirectHandler Objects"
msgstr "HTTPRedirectHandler オブジェクト"

#: ../../library/urllib.request.rst:830
msgid ""
"Some HTTP redirections require action from this module's client code.  If "
"this is the case, :exc:`~urllib.error.HTTPError` is raised.  See :rfc:`2616` "
"for details of the precise meanings of the various redirection codes."
msgstr ""
"一部の HTTP リクエストはこのモジュールのクライアントモードからの操作を要求し"
"ます。その場合、:exc:`~urllib.error.HTTPError` が送出されます。さまざまなリダ"
"イレクションコードの正確な意味についての詳細は :rfc:`2616` を参照してくださ"
"い。"

#: ../../library/urllib.request.rst:834
msgid ""
"An :exc:`~urllib.error.HTTPError` exception raised as a security "
"consideration if the HTTPRedirectHandler is presented with a redirected URL "
"which is not an HTTP, HTTPS or FTP URL."
msgstr ""

#: ../../library/urllib.request.rst:841
msgid ""
"Return a :class:`Request` or ``None`` in response to a redirect. This is "
"called by the default implementations of the :meth:`!http_error_30\\*` "
"methods when a redirection is received from the server.  If a redirection "
"should take place, return a new :class:`Request` to allow :meth:`!"
"http_error_30\\*` to perform the redirect to *newurl*.  Otherwise, raise :"
"exc:`~urllib.error.HTTPError` if no other handler should try to handle this "
"URL, or return ``None`` if you can't but another handler might."
msgstr ""

#: ../../library/urllib.request.rst:851
msgid ""
"The default implementation of this method does not strictly follow :rfc:"
"`2616`, which says that 301 and 302 responses to ``POST`` requests must not "
"be automatically redirected without confirmation by the user.  In reality, "
"browsers do allow automatic redirection of these responses, changing the "
"POST to a ``GET``, and the default implementation reproduces this behavior."
msgstr ""
"このメソッドのデフォルトの実装は、 :rfc:`2616` に厳密に従ったものではありませ"
"ん。 :rfc:`2616` では、 ``POST`` リクエストに対する 301 および 302 応答が、"
"ユーザの承認なく自動的にリダイレクトされてはならないと述べています。現実に"
"は、ブラウザは POST を ``GET`` に変更することで、これらの応答に対して自動的に"
"リダイレクトを行えるようにしています。デフォルトの実装でも、この挙動を再現し"
"ています。"

#: ../../library/urllib.request.rst:860
msgid ""
"Redirect to the ``Location:`` or ``URI:`` URL.  This method is called by the "
"parent :class:`OpenerDirector` when getting an HTTP 'moved permanently' "
"response."
msgstr ""
"``Location:`` か ``URI:`` のURL にリダイレクトします。このメソッドは HTTP  に"
"おける 'moved permanently' レスポンスを取得した際に 親オブジェクトとなる :"
"class:`OpenerDirector` によって呼び出されます。"

#: ../../library/urllib.request.rst:866
msgid ""
"The same as :meth:`http_error_301`, but called for the 'found' response."
msgstr ""
":meth:`http_error_301` と同じですが、'found' レスポンスに対して呼び出されま"
"す。"

#: ../../library/urllib.request.rst:871
msgid ""
"The same as :meth:`http_error_301`, but called for the 'see other' response."
msgstr ""
":meth:`http_error_301` と同じですが、'see other' レスポンスに対して呼び出され"
"ます。"

#: ../../library/urllib.request.rst:876
msgid ""
"The same as :meth:`http_error_301`, but called for the 'temporary redirect' "
"response. It does not allow changing the request method from ``POST`` to "
"``GET``."
msgstr ""

#: ../../library/urllib.request.rst:883
msgid ""
"The same as :meth:`http_error_301`, but called for the 'permanent redirect' "
"response. It does not allow changing the request method from ``POST`` to "
"``GET``."
msgstr ""

#: ../../library/urllib.request.rst:893
msgid "HTTPCookieProcessor Objects"
msgstr "HTTPCookieProcessor オブジェクト"

#: ../../library/urllib.request.rst:895
msgid ":class:`HTTPCookieProcessor` instances have one attribute:"
msgstr ":class:`HTTPCookieProcessor` インスタンスは属性をひとつだけ持ちます:"

#: ../../library/urllib.request.rst:899
msgid "The :class:`http.cookiejar.CookieJar` in which cookies are stored."
msgstr ""
"Cookie の入っている :class:`http.cookiejar.CookieJar` オブジェクトです。"

#: ../../library/urllib.request.rst:905
msgid "ProxyHandler Objects"
msgstr "ProxyHandler オブジェクト"

#: ../../library/urllib.request.rst:911
msgid ""
"The :class:`ProxyHandler` will have a method :meth:`!<protocol>_open` for "
"every *protocol* which has a proxy in the *proxies* dictionary given in the "
"constructor.  The method will modify requests to go through the proxy, by "
"calling ``request.set_proxy()``, and call the next handler in the chain to "
"actually execute the protocol."
msgstr ""

#: ../../library/urllib.request.rst:921
msgid "HTTPPasswordMgr Objects"
msgstr "HTTPPasswordMgr オブジェクト"

#: ../../library/urllib.request.rst:923
msgid ""
"These methods are available on :class:`HTTPPasswordMgr` and :class:"
"`HTTPPasswordMgrWithDefaultRealm` objects."
msgstr ""
"以下のメソッドは :class:`HTTPPasswordMgr` および :class:"
"`HTTPPasswordMgrWithDefaultRealm` オブジェクトで利用できます。"

#: ../../library/urllib.request.rst:929
msgid ""
"*uri* can be either a single URI, or a sequence of URIs. *realm*, *user* and "
"*passwd* must be strings. This causes ``(user, passwd)`` to be used as "
"authentication tokens when authentication for *realm* and a super-URI of any "
"of the given URIs is given."
msgstr ""
"*uri* は単一の URI でも複数の URI からなるシーケンスでもかまいません。 "
"*realm* 、 *user* および *passwd* は文字列でなくてはなりません。このメソッド"
"によって、 *realm* と与えられた URI の上位 URI に対して ``(user, passwd)`` が"
"認証トークンとして使われるようになります。"

#: ../../library/urllib.request.rst:937
msgid ""
"Get user/password for given realm and URI, if any.  This method will return "
"``(None, None)`` if there is no matching user/password."
msgstr ""
"与えられたレルムおよび URI に対するユーザ名またはパスワードがあればそれを取得"
"します。該当するユーザ名／パスワードが存在しない場合、このメソッドは "
"``(None, None)`` を返します。"

#: ../../library/urllib.request.rst:940
msgid ""
"For :class:`HTTPPasswordMgrWithDefaultRealm` objects, the realm ``None`` "
"will be searched if the given *realm* has no matching user/password."
msgstr ""
":class:`HTTPPasswordMgrWithDefaultRealm` オブジェクトでは、与えられた "
"*realm* に対して該当するユーザ名/パスワードが存在しない場合、レルム ``None`` "
"が検索されます。"

#: ../../library/urllib.request.rst:947
msgid "HTTPPasswordMgrWithPriorAuth Objects"
msgstr "HTTPPasswordMgrWithPriorAuth オブジェクト"

#: ../../library/urllib.request.rst:949
msgid ""
"This password manager extends :class:`HTTPPasswordMgrWithDefaultRealm` to "
"support tracking URIs for which authentication credentials should always be "
"sent."
msgstr ""
"このパスワードマネージャは :class:`HTTPPasswordMgrWithDefaultRealm` を継承し"
"て、認証の証明書を常に送らないといけない URI を追跡する機能をサポートしていま"
"す。"

#: ../../library/urllib.request.rst:956
msgid ""
"*realm*, *uri*, *user*, *passwd* are as for :meth:`HTTPPasswordMgr."
"add_password`.  *is_authenticated* sets the initial value of the "
"``is_authenticated`` flag for the given URI or list of URIs. If "
"*is_authenticated* is specified as ``True``, *realm* is ignored."
msgstr ""
"*realm*, *uri*, *user*, *passwd* は :meth:`HTTPPasswordMgr.add_password` のも"
"のと同じです。\n"
"*is_authenticated* は、与えられた URI や URI のリストの ``is_authenticated`` "
"フラグの初期値に設定されます。\n"
"*is_authenticated* に ``True`` を指定した場合は、 *realm* は無視されます。"

#: ../../library/urllib.request.rst:964
msgid "Same as for :class:`HTTPPasswordMgrWithDefaultRealm` objects"
msgstr ""
":class:`HTTPPasswordMgrWithDefaultRealm` オブジェクトに対する同名のメソッドと"
"同じです。"

#: ../../library/urllib.request.rst:970
msgid ""
"Update the ``is_authenticated`` flag for the given *uri* or list of URIs."
msgstr ""
"与えられた *url* や URI のリストの ``is_authenticated`` フラグを更新します。"

#: ../../library/urllib.request.rst:976
msgid ""
"Returns the current state of the ``is_authenticated`` flag for the given URI."
msgstr "与えられた URI の ``is_authenticated`` フラグの現在の状態を返します。"

#: ../../library/urllib.request.rst:983
msgid "AbstractBasicAuthHandler Objects"
msgstr "AbstractBasicAuthHandler オブジェクト"

#: ../../library/urllib.request.rst:988
msgid ""
"Handle an authentication request by getting a user/password pair, and re-"
"trying the request.  *authreq* should be the name of the header where the "
"information about the realm is included in the request, *host* specifies the "
"URL and path to authenticate for, *req* should be the (failed) :class:"
"`Request` object, and *headers* should be the error headers."
msgstr ""
"ユーザ名／パスワードを取得し、再度サーバへのリクエストを試みることで、サーバ"
"からの認証リクエストを処理します。 *authreq* はリクエストにおいて レルムに関"
"する情報が含まれているヘッダーの名前、 *host* は認証を行う対象の URL とパスを"
"指定します、 *req* は (失敗した) :class:`Request` オブジェクト、そして "
"*headers* はエラーヘッダーでなくてはなりません。"

#: ../../library/urllib.request.rst:994
msgid ""
"*host* is either an authority (e.g. ``\"python.org\"``) or a URL containing "
"an authority component (e.g. ``\"http://python.org/\"``). In either case, "
"the authority must not contain a userinfo component (so, ``\"python.org\"`` "
"and ``\"python.org:80\"`` are fine, ``\"joe:password@python.org\"`` is not)."
msgstr ""
"*host* は、オーソリティ (例 ``\"python.org\"``) か、オーソリティコンポーネン"
"トを含む URL (例 ``\"http://python.org\"``) です。どちらの場合も、オーソリ"
"ティはユーザ情報コンポーネントを含んではいけません (なので、 ``\"python."
"org\"`` や ``\"python.org:80\"`` は正しく、 ``\"joe:password@python.org\"`` "
"は不正です) 。"

#: ../../library/urllib.request.rst:1003
msgid "HTTPBasicAuthHandler Objects"
msgstr "HTTPBasicAuthHandler オブジェクト"

#: ../../library/urllib.request.rst:1008 ../../library/urllib.request.rst:1019
#: ../../library/urllib.request.rst:1044 ../../library/urllib.request.rst:1055
msgid "Retry the request with authentication information, if available."
msgstr "認証情報がある場合、認証情報付きで再度リクエストを試みます。"

#: ../../library/urllib.request.rst:1014
msgid "ProxyBasicAuthHandler Objects"
msgstr "ProxyBasicAuthHandler オブジェクト"

#: ../../library/urllib.request.rst:1025
msgid "AbstractDigestAuthHandler Objects"
msgstr "AbstractDigestAuthHandler オブジェクト"

#: ../../library/urllib.request.rst:1030
msgid ""
"*authreq* should be the name of the header where the information about the "
"realm is included in the request, *host* should be the host to authenticate "
"to, *req* should be the (failed) :class:`Request` object, and *headers* "
"should be the error headers."
msgstr ""
"*authreq* はリクエストにおいてレルムに関する情報が含まれているヘッダーの名"
"前、 *host* は認証を行う対象のホスト名、 *req* は  (失敗した) :class:"
"`Request` オブジェクト、そして *headers* はエラーヘッダーでなくてはなりませ"
"ん。"

#: ../../library/urllib.request.rst:1039
msgid "HTTPDigestAuthHandler Objects"
msgstr "HTTPDigestAuthHandler オブジェクト"

#: ../../library/urllib.request.rst:1050
msgid "ProxyDigestAuthHandler Objects"
msgstr "ProxyDigestAuthHandler オブジェクト"

#: ../../library/urllib.request.rst:1061
msgid "HTTPHandler Objects"
msgstr "HTTPHandler オブジェクト"

#: ../../library/urllib.request.rst:1066
msgid ""
"Send an HTTP request, which can be either GET or POST, depending on ``req."
"has_data()``."
msgstr ""
"HTTP リクエストを送ります。 ``req.has_data()`` に応じて、 GET または POST の"
"どちらでも送ることができます。"

#: ../../library/urllib.request.rst:1073
msgid "HTTPSHandler Objects"
msgstr "HTTPSHandler オブジェクト"

#: ../../library/urllib.request.rst:1078
msgid ""
"Send an HTTPS request, which can be either GET or POST, depending on ``req."
"has_data()``."
msgstr ""
"HTTPS リクエストを送ります。 ``req.has_data()`` に応じて、 GET または POST の"
"どちらでも送ることができます。"

#: ../../library/urllib.request.rst:1085
msgid "FileHandler Objects"
msgstr "FileHandler オブジェクト"

#: ../../library/urllib.request.rst:1090
msgid ""
"Open the file locally, if there is no host name, or the host name is "
"``'localhost'``."
msgstr ""
"ホスト名がない場合、またはホスト名が ``'localhost'`` の場合にファイルをローカ"
"ルでオープンします。"

#: ../../library/urllib.request.rst:1093
msgid ""
"This method is applicable only for local hostnames.  When a remote hostname "
"is given, a :exc:`~urllib.error.URLError` is raised."
msgstr ""

#: ../../library/urllib.request.rst:1101
msgid "DataHandler Objects"
msgstr "DataHandler オブジェクト"

#: ../../library/urllib.request.rst:1105
msgid ""
"Read a data URL. This kind of URL contains the content encoded in the URL "
"itself. The data URL syntax is specified in :rfc:`2397`. This implementation "
"ignores white spaces in base64 encoded data URLs so the URL may be wrapped "
"in whatever source file it comes from. But even though some browsers don't "
"mind about a missing padding at the end of a base64 encoded data URL, this "
"implementation will raise a :exc:`ValueError` in that case."
msgstr ""

#: ../../library/urllib.request.rst:1116
msgid "FTPHandler Objects"
msgstr "FTPHandler オブジェクト"

#: ../../library/urllib.request.rst:1121
msgid ""
"Open the FTP file indicated by *req*. The login is always done with empty "
"username and password."
msgstr ""
"*req* で表されるファイルを FTP 越しにオープンします。ログインは常に空のユーザ"
"ネームおよびパスワードで行われます。"

#: ../../library/urllib.request.rst:1128
msgid "CacheFTPHandler Objects"
msgstr "CacheFTPHandler オブジェクト"

#: ../../library/urllib.request.rst:1130
msgid ""
":class:`CacheFTPHandler` objects are :class:`FTPHandler` objects with the "
"following additional methods:"
msgstr ""
":class:`CacheFTPHandler` オブジェクトは :class:`FTPHandler` オブジェクトに以"
"下のメソッドを追加したものです:"

#: ../../library/urllib.request.rst:1136
msgid "Set timeout of connections to *t* seconds."
msgstr "接続のタイムアウトを *t* 秒に設定します。"

#: ../../library/urllib.request.rst:1141
msgid "Set maximum number of cached connections to *m*."
msgstr "キャッシュ付き接続の最大接続数を *m* に設定します。"

#: ../../library/urllib.request.rst:1147
msgid "UnknownHandler Objects"
msgstr "UnknownHandler オブジェクト"

#: ../../library/urllib.request.rst:1152
msgid "Raise a :exc:`~urllib.error.URLError` exception."
msgstr ":exc:`~urllib.error.URLError` 例外を送出します。"

#: ../../library/urllib.request.rst:1158
msgid "HTTPErrorProcessor Objects"
msgstr "HTTPErrorProcessor オブジェクト"

#: ../../library/urllib.request.rst:1164
msgid "For 200 error codes, the response object is returned immediately."
msgstr "エラーコード 200 の場合、レスポンスオブジェクトを即座に返します。"

#: ../../library/urllib.request.rst:1166
msgid ""
"For non-200 error codes, this simply passes the job on to the :meth:`!"
"http_error_\\<type\\>` handler methods, via :meth:`OpenerDirector.error`. "
"Eventually, :class:`HTTPDefaultErrorHandler` will raise an :exc:`~urllib."
"error.HTTPError` if no other handler handles the error."
msgstr ""

#: ../../library/urllib.request.rst:1174
msgid "Process HTTPS error responses."
msgstr "HTTPS エラー応答の処理をします。"

#: ../../library/urllib.request.rst:1176
msgid "The behavior is same as :meth:`http_response`."
msgstr "振る舞いは :meth:`http_response` と同じです。"

#: ../../library/urllib.request.rst:1182
msgid "Examples"
msgstr "使用例"

#: ../../library/urllib.request.rst:1184
msgid ""
"In addition to the examples below, more examples are given in :ref:`urllib-"
"howto`."
msgstr "以下の例の他に :ref:`urllib-howto` に多くの例があります。"

#: ../../library/urllib.request.rst:1187
msgid ""
"This example gets the python.org main page and displays the first 300 bytes "
"of it. ::"
msgstr ""
"以下の例では、python.org のメインページを取得して、その最初の 300 バイト分を"
"表示します。 ::"

#: ../../library/urllib.request.rst:1190
msgid ""
">>> import urllib.request\n"
">>> with urllib.request.urlopen('http://www.python.org/') as f:\n"
"...     print(f.read(300))\n"
"...\n"
"b'<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n"
"\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\\n\\n\\n<html\n"
"xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" "
"lang=\"en\">\\n\\n<head>\\n\n"
"<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" /"
">\\n\n"
"<title>Python Programming '"
msgstr ""

#: ../../library/urllib.request.rst:1200
msgid ""
"Note that urlopen returns a bytes object.  This is because there is no way "
"for urlopen to automatically determine the encoding of the byte stream it "
"receives from the HTTP server. In general, a program will decode the "
"returned bytes object to string once it determines or guesses the "
"appropriate encoding."
msgstr ""
"urlopen は bytes オブジェクトを返すことに注意してください。これは urlopen "
"が、HTTP サーバーから受信したバイトストリームのエンコーディングを自動的に決定"
"できないためです。一般に、返された bytes オブジェクトを文字列にデコードするた"
"めのエンコーディングの決定あるいは推測はプログラム側が行います。"

#: ../../library/urllib.request.rst:1206
msgid ""
"The following W3C document, https://www.w3.org/International/O-charset\\ , "
"lists the various ways in which an (X)HTML or an XML document could have "
"specified its encoding information."
msgstr ""
"以下の W3C ドキュメント https://www.w3.org/International/O-charset\\ には "
"(X)HTML や XML ドキュメントでそのエンコーディング情報を指定するさまざまな方法"
"の一覧があります。"

#: ../../library/urllib.request.rst:1210
msgid ""
"As the python.org website uses *utf-8* encoding as specified in its meta "
"tag, we will use the same for decoding the bytes object. ::"
msgstr ""
"python.org ウェブサイトでは *utf-8* エンコーディングを使用しており、それをそ"
"の meta タグで指定していますので、bytes オブジェクトのデコードも同様に行いま"
"す。 ::"

#: ../../library/urllib.request.rst:1213
msgid ""
">>> with urllib.request.urlopen('http://www.python.org/') as f:\n"
"...     print(f.read(100).decode('utf-8'))\n"
"...\n"
"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n"
"\"http://www.w3.org/TR/xhtml1/DTD/xhtm"
msgstr ""

#: ../../library/urllib.request.rst:1219
msgid ""
"It is also possible to achieve the same result without using the :term:"
"`context manager` approach. ::"
msgstr ""
":term:`コンテキストマネージャー <context manager>` を使用しないアプローチでも"
"同様の結果を得ることができます。 ::"

#: ../../library/urllib.request.rst:1222
msgid ""
">>> import urllib.request\n"
">>> f = urllib.request.urlopen('http://www.python.org/')\n"
">>> print(f.read(100).decode('utf-8'))\n"
"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n"
"\"http://www.w3.org/TR/xhtml1/DTD/xhtm"
msgstr ""

#: ../../library/urllib.request.rst:1228
msgid ""
"In the following example, we are sending a data-stream to the stdin of a CGI "
"and reading the data it returns to us. Note that this example will only work "
"when the Python installation supports SSL. ::"
msgstr ""
"以下の例では、データストリームを CGI の標準入力へ送信し、返されたデータを読み"
"込みます。この例は Python が SSL をサポートするように設定してインストールされ"
"ている場合のみ動作します。 ::"

#: ../../library/urllib.request.rst:1232
msgid ""
">>> import urllib.request\n"
">>> req = urllib.request.Request(url='https://localhost/cgi-bin/test.cgi',\n"
"...                       data=b'This data is passed to stdin of the CGI')\n"
">>> with urllib.request.urlopen(req) as f:\n"
"...     print(f.read().decode('utf-8'))\n"
"...\n"
"Got Data: \"This data is passed to stdin of the CGI\""
msgstr ""

#: ../../library/urllib.request.rst:1240
msgid "The code for the sample CGI used in the above example is::"
msgstr "上の例で使われているサンプルの CGI は以下のようになっています::"

#: ../../library/urllib.request.rst:1242
msgid ""
"#!/usr/bin/env python\n"
"import sys\n"
"data = sys.stdin.read()\n"
"print('Content-type: text/plain\\n\\nGot Data: \"%s\"' % data)"
msgstr ""

#: ../../library/urllib.request.rst:1247
msgid "Here is an example of doing a ``PUT`` request using :class:`Request`::"
msgstr "これは :class:`Request` を使った ``PUT`` リクエストの例です::"

#: ../../library/urllib.request.rst:1249
msgid ""
"import urllib.request\n"
"DATA = b'some data'\n"
"req = urllib.request.Request(url='http://localhost:8080', data=DATA, "
"method='PUT')\n"
"with urllib.request.urlopen(req) as f:\n"
"    pass\n"
"print(f.status)\n"
"print(f.reason)"
msgstr ""

#: ../../library/urllib.request.rst:1257
msgid "Use of Basic HTTP Authentication::"
msgstr "以下はベーシック HTTP 認証の例です::"

#: ../../library/urllib.request.rst:1259
msgid ""
"import urllib.request\n"
"# Create an OpenerDirector with support for Basic HTTP Authentication...\n"
"auth_handler = urllib.request.HTTPBasicAuthHandler()\n"
"auth_handler.add_password(realm='PDQ Application',\n"
"                          uri='https://mahler:8092/site-updates.py',\n"
"                          user='klem',\n"
"                          passwd='kadidd!ehopper')\n"
"opener = urllib.request.build_opener(auth_handler)\n"
"# ...and install it globally so it can be used with urlopen.\n"
"urllib.request.install_opener(opener)\n"
"urllib.request.urlopen('http://www.example.com/login.html')"
msgstr ""

#: ../../library/urllib.request.rst:1271
msgid ""
":func:`build_opener` provides many handlers by default, including a :class:"
"`ProxyHandler`.  By default, :class:`ProxyHandler` uses the environment "
"variables named ``<scheme>_proxy``, where ``<scheme>`` is the URL scheme "
"involved.  For example, the :envvar:`!http_proxy` environment variable is "
"read to obtain the HTTP proxy's URL."
msgstr ""

#: ../../library/urllib.request.rst:1277
msgid ""
"This example replaces the default :class:`ProxyHandler` with one that uses "
"programmatically supplied proxy URLs, and adds proxy authorization support "
"with :class:`ProxyBasicAuthHandler`. ::"
msgstr ""
"この例では、デフォルトの :class:`ProxyHandler` を置き換えてプログラム的に作成"
"したプロキシ URL を使うようにし、 :class:`ProxyBasicAuthHandler` でプロキシ認"
"証サポートを追加します。 ::"

#: ../../library/urllib.request.rst:1281
msgid ""
"proxy_handler = urllib.request.ProxyHandler({'http': 'http://www.example."
"com:3128/'})\n"
"proxy_auth_handler = urllib.request.ProxyBasicAuthHandler()\n"
"proxy_auth_handler.add_password('realm', 'host', 'username', 'password')\n"
"\n"
"opener = urllib.request.build_opener(proxy_handler, proxy_auth_handler)\n"
"# This time, rather than install the OpenerDirector, we use it directly:\n"
"opener.open('http://www.example.com/login.html')"
msgstr ""

#: ../../library/urllib.request.rst:1289
msgid "Adding HTTP headers:"
msgstr "以下は HTTP ヘッダーを追加する例です:"

#: ../../library/urllib.request.rst:1291
msgid "Use the *headers* argument to the :class:`Request` constructor, or::"
msgstr ""
"*headers* 引数を使って :class:`Request` コンストラクタを呼び出す方法の他に、"
"以下のようにできます::"

#: ../../library/urllib.request.rst:1293
msgid ""
"import urllib.request\n"
"req = urllib.request.Request('http://www.example.com/')\n"
"req.add_header('Referer', 'http://www.python.org/')\n"
"# Customize the default User-Agent header value:\n"
"req.add_header('User-Agent', 'urllib-example/0.1 (Contact: . . .)')\n"
"r = urllib.request.urlopen(req)"
msgstr ""

#: ../../library/urllib.request.rst:1300
msgid ""
":class:`OpenerDirector` automatically adds a :mailheader:`User-Agent` header "
"to every :class:`Request`.  To change this::"
msgstr ""
":class:`OpenerDirector` は全ての :class:`Request` に :mailheader:`User-"
"Agent` ヘッダーを自動的に追加します。これを変更するには以下のようにします::"

#: ../../library/urllib.request.rst:1303
msgid ""
"import urllib.request\n"
"opener = urllib.request.build_opener()\n"
"opener.addheaders = [('User-agent', 'Mozilla/5.0')]\n"
"opener.open('http://www.example.com/')"
msgstr ""

#: ../../library/urllib.request.rst:1308
msgid ""
"Also, remember that a few standard headers (:mailheader:`Content-Length`, :"
"mailheader:`Content-Type` and :mailheader:`Host`) are added when the :class:"
"`Request` is passed to :func:`urlopen` (or :meth:`OpenerDirector.open`)."
msgstr ""
"また、 :class:`Request` が :func:`urlopen` (や :meth:`OpenerDirector.open`)に"
"渡される際には、いくつかの標準ヘッダー (:mailheader:`Content-Length`, :"
"mailheader:`Content-Type` および :mailheader:`Host`) も追加されることを忘れな"
"いでください。"

#: ../../library/urllib.request.rst:1315
msgid ""
"Here is an example session that uses the ``GET`` method to retrieve a URL "
"containing parameters::"
msgstr ""
"以下は ``GET`` メソッドを使ってパラメータを含む URL を取得するセッションの例"
"です::"

#: ../../library/urllib.request.rst:1318
msgid ""
">>> import urllib.request\n"
">>> import urllib.parse\n"
">>> params = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})\n"
">>> url = \"http://www.musi-cal.com/cgi-bin/query?%s\" % params\n"
">>> with urllib.request.urlopen(url) as f:\n"
"...     print(f.read().decode('utf-8'))\n"
"..."
msgstr ""

#: ../../library/urllib.request.rst:1326
msgid ""
"The following example uses the ``POST`` method instead. Note that params "
"output from urlencode is encoded to bytes before it is sent to urlopen as "
"data::"
msgstr ""
"以下の例では、``POST`` メソッドを使用しています。urlencode から出力されたパラ"
"メーターは urlopen にデータとして渡される前に bytes にエンコードされているこ"
"とに注意してください::"

#: ../../library/urllib.request.rst:1329
msgid ""
">>> import urllib.request\n"
">>> import urllib.parse\n"
">>> data = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})\n"
">>> data = data.encode('ascii')\n"
">>> with urllib.request.urlopen(\"http://requestb.in/xrbl82xr\", data) as "
"f:\n"
"...     print(f.read().decode('utf-8'))\n"
"..."
msgstr ""

#: ../../library/urllib.request.rst:1337
msgid ""
"The following example uses an explicitly specified HTTP proxy, overriding "
"environment settings::"
msgstr ""
"以下の例では、環境変数による設定内容に対して上書きする形で HTTP プロキシを明"
"示的に設定しています::"

#: ../../library/urllib.request.rst:1340
msgid ""
">>> import urllib.request\n"
">>> proxies = {'http': 'http://proxy.example.com:8080/'}\n"
">>> opener = urllib.request.FancyURLopener(proxies)\n"
">>> with opener.open(\"http://www.python.org\") as f:\n"
"...     f.read().decode('utf-8')\n"
"..."
msgstr ""

#: ../../library/urllib.request.rst:1347
msgid ""
"The following example uses no proxies at all, overriding environment "
"settings::"
msgstr ""
"以下の例では、環境変数による設定内容に対して上書きする形で、まったくプロキシ"
"を使わないよう設定しています::"

#: ../../library/urllib.request.rst:1349
msgid ""
">>> import urllib.request\n"
">>> opener = urllib.request.FancyURLopener({})\n"
">>> with opener.open(\"http://www.python.org/\") as f:\n"
"...     f.read().decode('utf-8')\n"
"..."
msgstr ""

#: ../../library/urllib.request.rst:1357
msgid "Legacy interface"
msgstr "レガシーインターフェース"

#: ../../library/urllib.request.rst:1359
msgid ""
"The following functions and classes are ported from the Python 2 module "
"``urllib`` (as opposed to ``urllib2``).  They might become deprecated at "
"some point in the future."
msgstr ""
"以下の関数およびクラスは、Python 2 のモジュール ``urllib`` (``urllib2`` では"
"ありません) から移植されたものです。これらは将来的に廃止されるかもしれませ"
"ん。"

#: ../../library/urllib.request.rst:1365
msgid ""
"Copy a network object denoted by a URL to a local file. If the URL points to "
"a local file, the object will not be copied unless filename is supplied. "
"Return a tuple ``(filename, headers)`` where *filename* is the local file "
"name under which the object can be found, and *headers* is whatever the :"
"meth:`!info` method of the object returned by :func:`urlopen` returned (for "
"a remote object). Exceptions are the same as for :func:`urlopen`."
msgstr ""

#: ../../library/urllib.request.rst:1372
msgid ""
"The second argument, if present, specifies the file location to copy to (if "
"absent, the location will be a tempfile with a generated name). The third "
"argument, if present, is a callable that will be called once on "
"establishment of the network connection and once after each block read "
"thereafter.  The callable will be passed three arguments; a count of blocks "
"transferred so far, a block size in bytes, and the total size of the file.  "
"The third argument may be ``-1`` on older FTP servers which do not return a "
"file size in response to a retrieval request."
msgstr ""

#: ../../library/urllib.request.rst:1381
msgid "The following example illustrates the most common usage scenario::"
msgstr "以下は最も一般的な使用例です::"

#: ../../library/urllib.request.rst:1383
msgid ""
">>> import urllib.request\n"
">>> local_filename, headers = urllib.request.urlretrieve('http://python."
"org/')\n"
">>> html = open(local_filename)\n"
">>> html.close()"
msgstr ""

#: ../../library/urllib.request.rst:1388
msgid ""
"If the *url* uses the :file:`http:` scheme identifier, the optional *data* "
"argument may be given to specify a ``POST`` request (normally the request "
"type is ``GET``).  The *data* argument must be a bytes object in standard :"
"mimetype:`application/x-www-form-urlencoded` format; see the :func:`urllib."
"parse.urlencode` function."
msgstr ""
"*url* が :file:`http:` スキーム識別子を使用していた場合、任意の引数 *data* "
"は ``POST`` リクエストの指定に使用される場合があります (通常のリクエストタイ"
"プは ``GET`` です)。引数 *data* は標準 :mimetype:`application/x-www-form-"
"urlencoded` 形式のバイトオブジェクトでなければなりません。 :func:`urllib."
"parse.urlencode` 関数を参照してください。"

#: ../../library/urllib.request.rst:1394
msgid ""
":func:`urlretrieve` will raise :exc:`~urllib.error.ContentTooShortError` "
"when it detects that the amount of data available  was less than the "
"expected amount (which is the size reported by a  *Content-Length* header). "
"This can occur, for example, when the  download is interrupted."
msgstr ""

#: ../../library/urllib.request.rst:1399
msgid ""
"The *Content-Length* is treated as a lower bound: if there's more data  to "
"read, urlretrieve reads more data, but if less data is available,  it raises "
"the exception."
msgstr ""
"*Content-Length* はデータ量の下限です: 読み込むデータ量がこれを超えている場"
"合 urlretrieve はそれらも読み込みますが、利用できるデータがこれを下回った場"
"合、例外が送出されます。"

#: ../../library/urllib.request.rst:1403
msgid ""
"You can still retrieve the downloaded data in this case, it is stored in "
"the :attr:`!content` attribute of the exception instance."
msgstr ""

#: ../../library/urllib.request.rst:1406
msgid ""
"If no *Content-Length* header was supplied, urlretrieve can not check the "
"size of the data it has downloaded, and just returns it.  In this case you "
"just have to assume that the download was successful."
msgstr ""
"*Content-Length* ヘッダーが与えられなれけば urlretrieve はダウンロードした"
"データのサイズをチェックできません。この場合ダウンロードは正常に完了したとみ"
"なすしかありません。"

#: ../../library/urllib.request.rst:1412
msgid ""
"Cleans up temporary files that may have been left behind by previous calls "
"to :func:`urlretrieve`."
msgstr ""
"以前の :func:`urlretrieve` 呼び出し後に残っているかもしれない一時ファイルをク"
"リーンアップします。"

#: ../../library/urllib.request.rst:1419
msgid ""
"Base class for opening and reading URLs.  Unless you need to support opening "
"objects using schemes other than :file:`http:`, :file:`ftp:`, or :file:`file:"
"`, you probably want to use :class:`FancyURLopener`."
msgstr ""
"URL をオープンし、読み出すためのクラスの基底クラスです。:file:`http:`, :file:"
"`ftp:`, :file:`file:` 以外のスキームを使ったオブジェクトのオープンをサポート"
"したいのでないかぎり、:class:`FancyURLopener` を使おうと思うことになるでしょ"
"う。"

#: ../../library/urllib.request.rst:1423
msgid ""
"By default, the :class:`URLopener` class sends a :mailheader:`User-Agent` "
"header of ``urllib/VVV``, where *VVV* is the :mod:`urllib` version number. "
"Applications can define their own :mailheader:`User-Agent` header by "
"subclassing :class:`URLopener` or :class:`FancyURLopener` and setting the "
"class attribute :attr:`version` to an appropriate string value in the "
"subclass definition."
msgstr ""
"デフォルトでは、 :class:`URLopener` クラスは :mailheader:`User-Agent` ヘッ"
"ダーとして ``urllib/VVV`` を送信します。ここで *VVV* は :mod:`urllib` のバー"
"ジョン番号です。アプリケーションで独自の :mailheader:`User-Agent` ヘッダーを"
"送信したい場合は、 :class:`URLopener` かまたは :class:`FancyURLopener` のサブ"
"クラスを作成し、サブクラス定義においてクラス属性 :attr:`version` を適切な文字"
"列値に設定することで行うことができます。"

#: ../../library/urllib.request.rst:1429
msgid ""
"The optional *proxies* parameter should be a dictionary mapping scheme names "
"to proxy URLs, where an empty dictionary turns proxies off completely.  Its "
"default value is ``None``, in which case environmental proxy settings will "
"be used if present, as discussed in the definition of :func:`urlopen`, above."
msgstr ""
"オプションのパラメーター *proxies* はスキーム名をプロキシの URL にマップする"
"辞書でなければなりません。空の辞書はプロキシ機能を完全にオフにします。デフォ"
"ルトの値は ``None`` で、この場合、 :func:`urlopen` の定義で述べたように、プロ"
"キシを設定する環境変数が存在するならそれを使います。"

#: ../../library/urllib.request.rst:1434
msgid ""
"Additional keyword parameters, collected in *x509*, may be used for "
"authentication of the client when using the :file:`https:` scheme.  The "
"keywords *key_file* and *cert_file* are supported to provide an  SSL key and "
"certificate; both are needed to support client authentication."
msgstr ""
"追加のキーワードパラメーターは *x509* に集められますが、これは :file:`https:"
"` スキームを使った際のクライアント認証に使われることがあります。キーワード引"
"数 *key_file* および *cert_file* が SSL 鍵と証明書を設定するためにサポートさ"
"れています; クライアント認証をするには両方が必要です。"

#: ../../library/urllib.request.rst:1439
msgid ""
":class:`URLopener` objects will raise an :exc:`OSError` exception if the "
"server returns an error code."
msgstr ""
":class:`URLopener` オブジェクトはサーバーがエラーコードを返した場合に :exc:"
"`OSError` 例外を送出します。"

#: ../../library/urllib.request.rst:1444
msgid ""
"Open *fullurl* using the appropriate protocol.  This method sets up cache "
"and proxy information, then calls the appropriate open method with its input "
"arguments.  If the scheme is not recognized, :meth:`open_unknown` is called. "
"The *data* argument has the same meaning as the *data* argument of :func:"
"`urlopen`."
msgstr ""
"適切なプロトコルを使って *fullurl* を開きます。このメソッドはキャッシュとプロ"
"キシ情報を設定し、その後適切な open メソッドを入力引数つきで呼び出します。認"
"識できないスキームが与えられた場合、 :meth:`open_unknown` が呼び出されます。 "
"*data* 引数は :func:`urlopen` の引数 *data* と同じ意味を持っています。"

#: ../../library/urllib.request.rst:1450
msgid "This method always quotes *fullurl* using :func:`~urllib.parse.quote`."
msgstr ""

#: ../../library/urllib.request.rst:1454
msgid "Overridable interface to open unknown URL types."
msgstr ""
"オーバライド可能な、未知のタイプの URL を開くためのインターフェースです。"

#: ../../library/urllib.request.rst:1459
msgid ""
"Retrieves the contents of *url* and places it in *filename*.  The return "
"value is a tuple consisting of a local filename and either an :class:`email."
"message.Message` object containing the response headers (for remote URLs) or "
"``None`` (for local URLs).  The caller must then open and read the contents "
"of *filename*.  If *filename* is not given and the URL refers to a local "
"file, the input filename is returned.  If the URL is non-local and "
"*filename* is not given, the filename is the output of :func:`tempfile."
"mktemp` with a suffix that matches the suffix of the last path component of "
"the input URL.  If *reporthook* is given, it must be a function accepting "
"three numeric parameters: A chunk number, the maximum size chunks are read "
"in and the total size of the download (-1 if unknown).  It will be called "
"once at the start and after each chunk of data is read from the network.  "
"*reporthook* is ignored for local URLs."
msgstr ""
"*url* の内容を取得し、*filename* に保存します。戻り値は、ローカルファイル名"
"と、レスポンスヘッダーが含まれる :class:`email.message.Message` (リモート "
"URL の場合) か ``None`` (ローカル URL の場合) からなるタプルになります。呼び"
"出し側は、その後 *filename* を開いてその内容を読み込まなければなりません。"
"*filename* が与えられず、URL がローカルファイルを参照している場合、入力ファイ"
"ル名が返されます。URL がローカルでなく、*filename* が与えられていない場合、"
"ファイル名は入力 URL のパスの最後の構成要素のサフィックスとマッチするサフィッ"
"クスを持つ :func:`tempfile.mktemp` の出力になります。*reporthook* が与えられ"
"ている場合、3 つの数値 (チャンク数、読み込んだチャンクの最大サイズ、および総"
"ダウンロードサイズ --- 不明の場合は -1) の引数を受け取る関数でなければなりま"
"せん。これは開始時に 1 回と、ネットワークからデータのチャンクを読み込む度に呼"
"び出されます。*reporthook* はローカル URL に対しては無視されます。"

#: ../../library/urllib.request.rst:1472
msgid ""
"If the *url* uses the :file:`http:` scheme identifier, the optional *data* "
"argument may be given to specify a ``POST`` request (normally the request "
"type is ``GET``).  The *data* argument must in standard :mimetype:"
"`application/x-www-form-urlencoded` format; see the :func:`urllib.parse."
"urlencode` function."
msgstr ""
"*url* が :file:`http:` スキーム識別子を使用していた場合、任意の引数 *data* "
"は ``POST`` リクエストの指定に使用される場合があります (通常のリクエストタイ"
"プは ``GET`` です)。引数 *data* は標準 :mimetype:`application/x-www-form-"
"urlencoded` 形式でなければなりません。:func:`urllib.parse.urlencode` 関数を参"
"照してください。"

#: ../../library/urllib.request.rst:1481
msgid ""
"Variable that specifies the user agent of the opener object.  To get :mod:"
"`urllib` to tell servers that it is a particular user agent, set this in a "
"subclass as a class variable or in the constructor before calling the base "
"constructor."
msgstr ""
"URL をオープンするオブジェクトのユーザエージェントを指定する変数です。 :mod:"
"`urllib` を特定のユーザエージェントであるとサーバに通知するには、サブクラスの"
"中でこの値をクラス変数として値を設定するか、コンストラクタの中でベースクラス"
"を呼び出す前に値を設定してください。"

#: ../../library/urllib.request.rst:1491
msgid ""
":class:`FancyURLopener` subclasses :class:`URLopener` providing default "
"handling for the following HTTP response codes: 301, 302, 303, 307 and 401.  "
"For the 30x response codes listed above, the :mailheader:`Location` header "
"is used to fetch the actual URL.  For 401 response codes (authentication "
"required), basic HTTP authentication is performed.  For the 30x response "
"codes, recursion is bounded by the value of the *maxtries* attribute, which "
"defaults to 10."
msgstr ""
":class:`FancyURLopener` は :class:`URLopener` のサブクラスで、以下の HTTP レ"
"スポンスコード: 301、302、303、 307、および 401 を取り扱う機能を提供します。"
"レスポンスコード 30x に対しては、 :mailheader:`Location` ヘッダーを使って実際"
"の URL を取得します。レスポンスコード 401 (認証が要求されていることを示す) に"
"対しては、BASIC認証 (basic HTTP authintication) が行われます。レスポンスコー"
"ド 30x に対しては、最大で *maxtries* 属性に指定された数だけ再帰呼び出しを行う"
"ようになっています。この値はデフォルトで 10 です。"

#: ../../library/urllib.request.rst:1498
msgid ""
"For all other response codes, the method :meth:`~BaseHandler."
"http_error_default` is called which you can override in subclasses to handle "
"the error appropriately."
msgstr ""

#: ../../library/urllib.request.rst:1503
msgid ""
"According to the letter of :rfc:`2616`, 301 and 302 responses to POST "
"requests must not be automatically redirected without confirmation by the "
"user.  In reality, browsers do allow automatic redirection of these "
"responses, changing the POST to a GET, and :mod:`urllib` reproduces this "
"behaviour."
msgstr ""
":rfc:`2616` によると、 POST 要求に対する 301 および 302 応答はユーザの承認無"
"しに自動的にリダイレクトしてはなりません。実際は、これらの応答に対して自動リ"
"ダイレクトを許すブラウザでは POST を GET に変更しており、 :mod:`urllib` でも"
"この動作を再現します。"

#: ../../library/urllib.request.rst:1508
msgid ""
"The parameters to the constructor are the same as those for :class:"
"`URLopener`."
msgstr "コンストラクタに与えるパラメーターは :class:`URLopener` と同じです。"

#: ../../library/urllib.request.rst:1512
msgid ""
"When performing basic authentication, a :class:`FancyURLopener` instance "
"calls its :meth:`prompt_user_passwd` method.  The default implementation "
"asks the users for the required information on the controlling terminal.  A "
"subclass may override this method to support more appropriate behavior if "
"needed."
msgstr ""
"基本的な HTTP 認証を行う際、 :class:`FancyURLopener` インスタンスは :meth:"
"`prompt_user_passwd` メソッドを呼び出します。このメソッドはデフォルトでは実行"
"を制御している端末上で認証に必要な情報を要求するように実装されています。必要"
"ならば、このクラスのサブクラスにおいてより適切な動作をサポートするために :"
"meth:`prompt_user_passwd` メソッドをオーバライドしてもかまいません。"

#: ../../library/urllib.request.rst:1517
msgid ""
"The :class:`FancyURLopener` class offers one additional method that should "
"be overloaded to provide the appropriate behavior:"
msgstr ""
":class:`FancyURLopener` クラスはオーバライド可能な追加のメソッドを提供してお"
"り、適切な振る舞いをさせることができます:"

#: ../../library/urllib.request.rst:1522
msgid ""
"Return information needed to authenticate the user at the given host in the "
"specified security realm.  The return value should be a tuple, ``(user, "
"password)``, which can be used for basic authentication."
msgstr ""
"指定されたセキュリティ領域 (security realm) 下にある与えられたホストにおい"
"て、ユーザー認証に必要な情報を返すための関数です。この関数が返す値は "
"``(user, password)`` からなるタプルでなければなりません。値は Basic 認証で使"
"われます。"

#: ../../library/urllib.request.rst:1526
msgid ""
"The implementation prompts for this information on the terminal; an "
"application should override this method to use an appropriate interaction "
"model in the local environment."
msgstr ""
"このクラスでの実装では、端末に情報を入力するようプロンプトを出します; ローカ"
"ルの環境において適切な形で対話型モデルを使うには、このメソッドをオーバライド"
"しなければなりません。"

#: ../../library/urllib.request.rst:1532
msgid ":mod:`urllib.request` Restrictions"
msgstr ":mod:`urllib.request` の制限事項"

#: ../../library/urllib.request.rst:1538
msgid ""
"Currently, only the following protocols are supported: HTTP (versions 0.9 "
"and 1.0), FTP, local files, and data URLs."
msgstr ""
"現在、次のプロトコルのみサポートされています: HTTP (バージョン 0.9 および "
"1.0)、FTP、ローカルファイル、およびデータ URL"

#: ../../library/urllib.request.rst:1541
msgid "Added support for data URLs."
msgstr "データ URL サポートが追加されました。"

#: ../../library/urllib.request.rst:1543
msgid ""
"The caching feature of :func:`urlretrieve` has been disabled until someone "
"finds the time to hack proper processing of Expiration time headers."
msgstr ""
":func:`urlretrieve` のキャッシュ機能は、誰かが Expiration time ヘッダーの正し"
"い処理をハックする時間を見つけるまで無効にされています。"

#: ../../library/urllib.request.rst:1546
msgid ""
"There should be a function to query whether a particular URL is in the cache."
msgstr ""
"ある URL がキャッシュにあるかどうか調べるような関数があればと思っています。"

#: ../../library/urllib.request.rst:1548
msgid ""
"For backward compatibility, if a URL appears to point to a local file but "
"the file can't be opened, the URL is re-interpreted using the FTP protocol.  "
"This can sometimes cause confusing error messages."
msgstr ""
"後方互換性のため、 URL がローカルシステム上のファイルを指しているように見える"
"にも関わらずファイルを開くことができなければ、 URL は FTP プロトコルを使って"
"再解釈されます。この機能は時として混乱を招くエラーメッセージを引き起こしま"
"す。"

#: ../../library/urllib.request.rst:1552
msgid ""
"The :func:`urlopen` and :func:`urlretrieve` functions can cause arbitrarily "
"long delays while waiting for a network connection to be set up.  This means "
"that it is difficult to build an interactive web client using these "
"functions without using threads."
msgstr ""
"関数 :func:`urlopen` および :func:`urlretrieve` は、ネットワーク接続が確立さ"
"れるまでの間、一定でない長さの遅延を引き起こすことがあります。このことは、こ"
"れらの関数を使ってインタラクティブな Web クライアントを構築するのはスレッドな"
"しには難しいことを意味します。"

#: ../../library/urllib.request.rst:1561
msgid ""
"The data returned by :func:`urlopen` or :func:`urlretrieve` is the raw data "
"returned by the server.  This may be binary data (such as an image), plain "
"text or (for example) HTML.  The HTTP protocol provides type information in "
"the reply header, which can be inspected by looking at the :mailheader:"
"`Content-Type` header.  If the returned data is HTML, you can use the "
"module :mod:`html.parser` to parse it."
msgstr ""
":func:`urlopen` あるいは :func:`urlretrieve` が返すデータはサーバーから返され"
"た生データです。これは (画像のような) バイナリ、プレーンテキスト、あるいは "
"(例えば) HTML などになります。HTTP プロトコルはレスポンスヘッダー内でタイプ情"
"報を提供しており、:mailheader:`Content-Type` ヘッダーを見ることで調査できま"
"す。返されたデータが HTML の場合、モジュール :mod:`html.parser` を使用してこ"
"れを解析できます。"

#: ../../library/urllib.request.rst:1570
msgid ""
"The code handling the FTP protocol cannot differentiate between a file and a "
"directory.  This can lead to unexpected behavior when attempting to read a "
"URL that points to a file that is not accessible.  If the URL ends in a ``/"
"``, it is assumed to refer to a directory and will be handled accordingly.  "
"But if an attempt to read a file leads to a 550 error (meaning the URL "
"cannot be found or is not accessible, often for permission reasons), then "
"the path is treated as a directory in order to handle the case when a "
"directory is specified by a URL but the trailing ``/`` has been left off.  "
"This can cause misleading results when you try to fetch a file whose read "
"permissions make it inaccessible; the FTP code will try to read it, fail "
"with a 550 error, and then perform a directory listing for the unreadable "
"file. If fine-grained control is needed, consider using the :mod:`ftplib` "
"module, subclassing :class:`FancyURLopener`, or changing *_urlopener* to "
"meet your needs."
msgstr ""
"FTP プロトコルを扱うコードでは、ファイルとディレクトリを区別できません。この"
"ことから、アクセスできないファイルを指している URL からデータを読み出そうとす"
"ると、予期しない動作を引き起こす場合があります。 URL が ``/`` で終わっていれ"
"ば、ディレクトリを指しているものとみなして、それに適した処理を行います。しか"
"し、ファイルの読み出し操作が 550 エラー (URL が存在しないか、主にパーミッショ"
"ンの理由でアクセスできない) になった場合、 URL がディレクトリを指していて、末"
"尾の ``/`` を忘れたケースを処理するため、パスをディレクトリとして扱います。こ"
"のために、パーミッションのためにアクセスできないファイルを fetch しようとする"
"と、FTP コードはそのファイルを開こうとして 550 エラーに陥り、次にディレクトリ"
"一覧を表示しようとするため、誤解を生むような結果を引き起こす可能性があるので"
"す。よく調整された制御が必要なら、 :mod:`ftplib` モジュールを使うか、 :class:"
"`FancyURLopener` をサブクラス化するか、 *_urlopener* を変更して目的に合わせる"
"よう検討してください。"

#: ../../library/urllib.request.rst:1587
msgid ":mod:`urllib.response` --- Response classes used by urllib"
msgstr ":mod:`urllib.response` --- urllib で使用するレスポンスクラス"

#: ../../library/urllib.request.rst:1592
msgid ""
"The :mod:`urllib.response` module defines functions and classes which define "
"a minimal file-like interface, including ``read()`` and ``readline()``. "
"Functions defined by this module are used internally by the :mod:`urllib."
"request` module. The typical response object is a :class:`urllib.response."
"addinfourl` instance:"
msgstr ""
":mod:`urllib.response` モジュールは、``read()`` および ``readline()`` を含む "
"最小限のファイルライクインターフェースを定義する関数およびクラスを定義してい"
"ます。このモジュールで定義された関数は、:mod:`urllib.request` モジュール内で"
"使用されます。代表的なレスポンスオブジェクトは :class:`urllib.response."
"addinfourl` インスタンスです。"

#: ../../library/urllib.request.rst:1601
msgid ""
"URL of the resource retrieved, commonly used to determine if a redirect was "
"followed."
msgstr ""
"取得されたリソースの URL、主にリダイレクトが発生したかどうかを確認するために"
"利用します。"

#: ../../library/urllib.request.rst:1605
msgid ""
"Returns the headers of the response in the form of an :class:`~email.message."
"EmailMessage` instance."
msgstr ""

#: ../../library/urllib.request.rst:1611
msgid "Status code returned by server."
msgstr "サーバから返される状態コードです。"

#: ../../library/urllib.request.rst:1615
msgid "Deprecated in favor of :attr:`~addinfourl.url`."
msgstr "非推奨となったので :attr:`~addinfourl.url` を使用してください。"

#: ../../library/urllib.request.rst:1620
msgid "Deprecated in favor of :attr:`~addinfourl.headers`."
msgstr "非推奨となったので :attr:`~addinfourl.headers` を使用してください。"

#: ../../library/urllib.request.rst:1625 ../../library/urllib.request.rst:1630
msgid "Deprecated in favor of :attr:`~addinfourl.status`."
msgstr "非推奨となったので :attr:`~addinfourl.status` を使用してください。"

#: ../../library/urllib.request.rst:1534 ../../library/urllib.request.rst:1557
msgid "HTTP"
msgstr "HTTP"

#: ../../library/urllib.request.rst:1534 ../../library/urllib.request.rst:1557
msgid "protocol"
msgstr "プロトコル"

#: ../../library/urllib.request.rst:1534 ../../library/urllib.request.rst:1568
msgid "FTP"
msgstr "FTP"

#: ../../library/urllib.request.rst:1557
msgid "HTML"
msgstr "HTML"
