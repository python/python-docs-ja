# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Shin Saito, 2021
# TENMYO Masakazu, 2023
# 石井明久, 2024
# Takanori Suzuki <takanori@takanory.net>, 2024
# Arihiro TAKASE, 2024
# Takeshi Nakazato, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-11 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:14+0000\n"
"Last-Translator: Takeshi Nakazato, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/string.rst:2
msgid ":mod:`!string` --- Common string operations"
msgstr ":mod:`!string` --- 一般的な文字列操作"

#: ../../library/string.rst:7
msgid "**Source code:** :source:`Lib/string.py`"
msgstr "**ソースコード:** :source:`Lib/string.py`"

#: ../../library/string.rst:14
msgid ":ref:`textseq`"
msgstr ":ref:`textseq`"

#: ../../library/string.rst:16
msgid ":ref:`string-methods`"
msgstr ":ref:`string-methods`"

#: ../../library/string.rst:19
msgid "String constants"
msgstr "文字列定数"

#: ../../library/string.rst:21
msgid "The constants defined in this module are:"
msgstr "このモジュールで定義されている定数は以下の通りです:"

#: ../../library/string.rst:26
msgid ""
"The concatenation of the :const:`ascii_lowercase` and :const:"
"`ascii_uppercase` constants described below.  This value is not locale-"
"dependent."
msgstr ""
"後述の :const:`ascii_lowercase` と :const:`ascii_uppercase` を合わせたもの。"
"この値はロケールに依存しません。"

#: ../../library/string.rst:32
msgid ""
"The lowercase letters ``'abcdefghijklmnopqrstuvwxyz'``.  This value is not "
"locale-dependent and will not change."
msgstr ""
"小文字 ``'abcdefghijklmnopqrstuvwxyz'`` 。この値はロケールに依存せず、固定で"
"す。"

#: ../../library/string.rst:38
msgid ""
"The uppercase letters ``'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``.  This value is not "
"locale-dependent and will not change."
msgstr ""
"大文字 ``'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`` 。この値はロケールに依存せず、固定で"
"す。"

#: ../../library/string.rst:44
msgid "The string ``'0123456789'``."
msgstr "文字列 ``'0123456789'`` です。"

#: ../../library/string.rst:49
msgid "The string ``'0123456789abcdefABCDEF'``."
msgstr "文字列 ``'0123456789abcdefABCDEF'`` です。"

#: ../../library/string.rst:54
msgid "The string ``'01234567'``."
msgstr "文字列 ``'01234567'`` です。"

#: ../../library/string.rst:59
msgid ""
"String of ASCII characters which are considered punctuation characters in "
"the ``C`` locale: ``!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~``."
msgstr ""
"``C`` ロケールにおいて、区切り文字 (punctuation characters) として扱われる "
"ASCII 文字の文字列です: ``!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~``."

#: ../../library/string.rst:64
msgid ""
"String of ASCII characters which are considered printable.  This is a "
"combination of :const:`digits`, :const:`ascii_letters`, :const:"
"`punctuation`, and :const:`whitespace`."
msgstr ""
"印刷可能な ASCII 文字で構成される文字列です。 :const:`digits`, :const:"
"`ascii_letters`, :const:`punctuation` および :const:`whitespace` を組み合わせ"
"たものです。"

#: ../../library/string.rst:71
msgid ""
"A string containing all ASCII characters that are considered whitespace. "
"This includes the characters space, tab, linefeed, return, formfeed, and "
"vertical tab."
msgstr ""
"空白 (whitespace) として扱われる ASCII 文字全てを含む文字列です。ほとんどのシ"
"ステムでは、これはスペース (space)、タブ (tab)、改行 (linefeed)、復帰 "
"(return)、改頁 (formfeed)、垂直タブ (vertical tab) です。"

#: ../../library/string.rst:79
msgid "Custom String Formatting"
msgstr "カスタムの文字列書式化"

#: ../../library/string.rst:81
msgid ""
"The built-in string class provides the ability to do complex variable "
"substitutions and value formatting via the :meth:`~str.format` method "
"described in :pep:`3101`.  The :class:`Formatter` class in the :mod:`string` "
"module allows you to create and customize your own string formatting "
"behaviors using the same implementation as the built-in :meth:`~str.format` "
"method."
msgstr ""
"組み込みの文字列 (string) クラスには、 :pep:`3101` で記述されている :meth:"
"`~str.format` メソッドによって複雑な変数置換と値のフォーマットを行う機能があ"
"ります。 :mod:`string` モジュールの :class:`Formatter` クラスでは、組み込み"
"の :meth:`~str.format` メソッドと同じ実装を使用して、独自の文字列フォーマット"
"の振る舞いを作成してカスタマイズすることができます。"

#: ../../library/string.rst:90
msgid "The :class:`Formatter` class has the following public methods:"
msgstr ":class:`Formatter` クラスは、以下のメソッドを持ちます:"

#: ../../library/string.rst:94
msgid ""
"The primary API method.  It takes a format string and an arbitrary set of "
"positional and keyword arguments. It is just a wrapper that calls :meth:"
"`vformat`."
msgstr ""
"主要な API メソッドです。書式文字列と、任意の位置引数およびキーワード引数の"
"セットを取ります。これは、:meth:`vformat` を呼び出す単なるラッパーです。"

#: ../../library/string.rst:98
msgid ""
"A format string argument is now :ref:`positional-only <positional-"
"only_parameter>`."
msgstr ""
"書式文字列は :ref:`位置専用 <positional-only_parameter>` の引数となりました。"

#: ../../library/string.rst:104
msgid ""
"This function does the actual work of formatting.  It is exposed as a "
"separate function for cases where you want to pass in a predefined "
"dictionary of arguments, rather than unpacking and repacking the dictionary "
"as individual arguments using the ``*args`` and ``**kwargs`` syntax.  :meth:"
"`vformat` does the work of breaking up the format string into character data "
"and replacement fields.  It calls the various methods described below."
msgstr ""
"この関数はフォーマットの実際の仕事をします。この関数は、 ``*args`` および "
"``**kwargs`` シンタックスを使用して、辞書を個々の引数として unpack してから再"
"度 pack するのではなく、引数としてあらかじめ用意した辞書を渡したい場合のため"
"に、独立した関数として公開されます。 :meth:`vformat` は、書式文字列を文字デー"
"タと置換フィールドに分解する仕事をします。それは、以下に記述する様々なメソッ"
"ドを呼び出します。"

#: ../../library/string.rst:112
msgid ""
"In addition, the :class:`Formatter` defines a number of methods that are "
"intended to be replaced by subclasses:"
msgstr ""
"さらに、 :class:`Formatter` ではサブクラスによって置き換えられることを意図し"
"た次のようないくつかのメソッドが定義されています。"

#: ../../library/string.rst:117
msgid ""
"Loop over the format_string and return an iterable of tuples "
"(*literal_text*, *field_name*, *format_spec*, *conversion*).  This is used "
"by :meth:`vformat` to break the string into either literal text, or "
"replacement fields."
msgstr ""
"format_stringを探査し、タプル、 (*literal_text*, *field_name*, "
"*format_spec*, *conversion*) のイテラブルを返します。これは :meth:`vformat` "
"が文字列を文字としての文字データや置換フィールドに展開するために使用されま"
"す。"

#: ../../library/string.rst:122
msgid ""
"The values in the tuple conceptually represent a span of literal text "
"followed by a single replacement field.  If there is no literal text (which "
"can happen if two replacement fields occur consecutively), then "
"*literal_text* will be a zero-length string.  If there is no replacement "
"field, then the values of *field_name*, *format_spec* and *conversion* will "
"be ``None``."
msgstr ""
"タプルの値は、概念的に文字としての文字データと、それに続く単一の置換フィール"
"ドを表現します。文字としての文字データが無い場合は (ふたつの置換フィールドが"
"連続した場合などに起き得ます) 、 *literal_text* は長さが 0 の文字列となりま"
"す。置換フィールドが無い場合は、 *field_name*, *format_spec* および "
"*conversion* が ``None`` となります。"

#: ../../library/string.rst:131
msgid ""
"Given *field_name* as returned by :meth:`parse` (see above), convert it to "
"an object to be formatted.  Returns a tuple (obj, used_key).  The default "
"version takes strings of the form defined in :pep:`3101`, such as "
"\"0[name]\" or \"label.title\".  *args* and *kwargs* are as passed in to :"
"meth:`vformat`.  The return value *used_key* has the same meaning as the "
"*key* parameter to :meth:`get_value`."
msgstr ""
"引数として与えた :meth:`parse` (上記参照) により返される *field_name* を書式"
"指定対象オブジェクトに変換します。返り値はタプル、 (obj, used_key) です。デ"
"フォルトでは :pep:`3101` に規定される \"0[name]\" や \"label.title\" のような"
"形式の文字列を引数としてとります。 *args* と *kwargs* は :meth:`vformat` に渡"
"されます。返り値 *used_key* は、 :meth:`get_value` の *key* 引数と同じ意味を"
"持ちます。"

#: ../../library/string.rst:140
msgid ""
"Retrieve a given field value.  The *key* argument will be either an integer "
"or a string.  If it is an integer, it represents the index of the positional "
"argument in *args*; if it is a string, then it represents a named argument "
"in *kwargs*."
msgstr ""
"与えられたフィールドの値を取り出します。 *key* 引数は整数でも文字列でも構いま"
"せん。整数の場合は、位置引数 *args* のインデックス番号を示します。文字列の場"
"合は、名前付きの引数 *kwargs* を意味します。"

#: ../../library/string.rst:145
msgid ""
"The *args* parameter is set to the list of positional arguments to :meth:"
"`vformat`, and the *kwargs* parameter is set to the dictionary of keyword "
"arguments."
msgstr ""
"*args* 引数は、 :meth:`vformat` への位置引数のリストに設定され、 *kwargs* 引"
"数は、キーワード引数の辞書に設定されます。"

#: ../../library/string.rst:149
msgid ""
"For compound field names, these functions are only called for the first "
"component of the field name; subsequent components are handled through "
"normal attribute and indexing operations."
msgstr ""
"フィールド名が (ピリオドで区切られた) いくつかの要素からなっている場合、最初"
"の要素のみがこれらの関数に渡されます。残りの要素に関しては、通常の属性または"
"インデックスアクセスと同様に処理されます。"

#: ../../library/string.rst:153
msgid ""
"So for example, the field expression '0.name' would cause :meth:`get_value` "
"to be called with a *key* argument of 0.  The ``name`` attribute will be "
"looked up after :meth:`get_value` returns by calling the built-in :func:"
"`getattr` function."
msgstr ""
"つまり、例えば、フィールドが '0.name' と表現されるとき、 :meth:`get_value` "
"は、 *key* 引数が 0 として呼び出されます。属性 ``name`` は、組み込みの :func:"
"`getattr` 関数が呼び出され、 :meth:`get_value` が返されたのちに検索されます。"

#: ../../library/string.rst:158
msgid ""
"If the index or keyword refers to an item that does not exist, then an :exc:"
"`IndexError` or :exc:`KeyError` should be raised."
msgstr ""
"インデックスまたはキーワードが存在しないアイテムを参照した場合、 :exc:"
"`IndexError` または :exc:`KeyError` が送出されます。"

#: ../../library/string.rst:163
msgid ""
"Implement checking for unused arguments if desired.  The arguments to this "
"function is the set of all argument keys that were actually referred to in "
"the format string (integers for positional arguments, and strings for named "
"arguments), and a reference to the *args* and *kwargs* that was passed to "
"vformat.  The set of unused args can be calculated from these parameters.  :"
"meth:`check_unused_args` is assumed to raise an exception if the check fails."
msgstr ""
"希望に応じて未使用の引数がないか確認する機能を実装します。この関数への引数"
"は、書式指定文字列で実際に参照されるすべての引数のキーの set (位置引数の整"
"数、名前付き引数の文字列) と、vformat に渡される *args* と *kwargs* への参照"
"です。使用されない引数の set は、これらのパラメータから計算されます。 :meth:"
"`check_unused_args` は、確認の結果が偽である場合に例外を送出するものとみなさ"
"れます。"

#: ../../library/string.rst:173
msgid ""
":meth:`format_field` simply calls the global :func:`format` built-in.  The "
"method is provided so that subclasses can override it."
msgstr ""
":meth:`format_field` は単純に組み込みのグローバル関数 :func:`format` を呼び出"
"します。このメソッドは、サブクラスをオーバーライドするために提供されます。"

#: ../../library/string.rst:178
msgid ""
"Converts the value (returned by :meth:`get_field`) given a conversion type "
"(as in the tuple returned by the :meth:`parse` method).  The default version "
"understands 's' (str), 'r' (repr) and 'a' (ascii) conversion types."
msgstr ""
"(:meth:`get_field` が返す) 値を (:meth:`parse` メソッドが返すタプルの形式で) "
"与えられた変換タイプとして変換します。デフォルトバージョンは 's' (str), "
"'r' (repr), 'a' (ascii) 変換タイプを理解します。"

#: ../../library/string.rst:187
msgid "Format String Syntax"
msgstr "書式指定文字列の文法"

#: ../../library/string.rst:189
msgid ""
"The :meth:`str.format` method and the :class:`Formatter` class share the "
"same syntax for format strings (although in the case of :class:`Formatter`, "
"subclasses can define their own format string syntax).  The syntax is "
"related to that of :ref:`formatted string literals <f-strings>`, but it is "
"less sophisticated and, in particular, does not support arbitrary "
"expressions."
msgstr ""
":meth:`str.format` メソッドと :class:`Formatter` クラスは、文字列の書式指定に"
"同じ文法を共有します (ただし、 :class:`Formatter` サブクラスでは、独自の書式"
"指定文法を定義することが可能です)。\n"
"この文法は :ref:`フォーマット済み文字列リテラル <f-strings>` の文法と関係して"
"はいますが、少し洗練されておらず、特に任意の式がサポートされていません。"

#: ../../library/string.rst:202
msgid ""
"Format strings contain \"replacement fields\" surrounded by curly braces ``{}"
"``. Anything that is not contained in braces is considered literal text, "
"which is copied unchanged to the output.  If you need to include a brace "
"character in the literal text, it can be escaped by doubling: ``{{`` and ``}}"
"``."
msgstr ""
"書式指定文字列は波括弧 ``{}`` に囲まれた \"置換フィールド\" を含みます。波括"
"弧に囲まれた部分以外は全て単純な文字として扱われ、変更を加えることなく出力へ"
"コピーされます。波括弧を文字として扱う必要がある場合は、二重にすることでエス"
"ケープすることができます: ``{{`` および ``}}`` 。"

#: ../../library/string.rst:207
msgid "The grammar for a replacement field is as follows:"
msgstr "置換フィールドの文法は以下です:"

#: ../../library/string.rst:219
msgid ""
"In less formal terms, the replacement field can start with a *field_name* "
"that specifies the object whose value is to be formatted and inserted into "
"the output instead of the replacement field. The *field_name* is optionally "
"followed by a  *conversion* field, which is preceded by an exclamation point "
"``'!'``, and a *format_spec*, which is preceded by a colon ``':'``.  These "
"specify a non-default format for the replacement value."
msgstr ""
"もっと簡単にいうと、置換フィールドは *field_name* で始められます。これによっ"
"て指定したオブジェクトの値が、置換フィールドの代わりに書式化され出力に挿入さ"
"れます。*field_name* の後に、感嘆符 ``'!'`` を挟んで *conversion* フィールド"
"を続けることができます。最後にコロン ``':'`` を挟んで、 *format_spec* を書く"
"ことができます。これは、置換される値の非デフォルトの書式を指定します。"

#: ../../library/string.rst:226
msgid "See also the :ref:`formatspec` section."
msgstr ":ref:`formatspec` 節も参照して下さい。"

#: ../../library/string.rst:228
msgid ""
"The *field_name* itself begins with an *arg_name* that is either a number or "
"a keyword.  If it's a number, it refers to a positional argument, and if "
"it's a keyword, it refers to a named keyword argument. An *arg_name* is "
"treated as a number if a call to :meth:`str.isdecimal` on the string would "
"return true. If the numerical arg_names in a format string are 0, 1, 2, ... "
"in sequence, they can all be omitted (not just some) and the numbers 0, 1, "
"2, ... will be automatically inserted in that order. Because *arg_name* is "
"not quote-delimited, it is not possible to specify arbitrary dictionary keys "
"(e.g., the strings ``'10'`` or ``':-]'``) within a format string. The "
"*arg_name* can be followed by any number of index or attribute expressions. "
"An expression of the form ``'.name'`` selects the named attribute using :"
"func:`getattr`, while an expression of the form ``'[index]'`` does an index "
"lookup using :meth:`~object.__getitem__`."
msgstr ""
"*field_name* それ自身は、数かキーワードのいずれかである *arg_name* から始まり"
"ます。それが数である場合、位置引数を参照します。また、それがキーワードである"
"場合、指定されたキーワード引数を参照します。文字列に対して :meth:`str."
"isdecimal` を呼び出した結果が真の場合、 *arg_name* は数として扱われます。書式"
"文字列中で数の arg_names が順に 0, 1, 2, ... である場合、それらはすべて (いく"
"つかではありません) 省略することができます。そして数 0, 1, 2, ... は、自動的"
"にその順で挿入されます。 *arg_name* は引用符で区切られていないので、書式文字"
"列内の任意の辞書キー (例えば文字列 ``'10'`` や ``':-]'`` など) を指定すること"
"はできません。 *arg_name* の後に任意の数のインデックス式または属性式を続ける"
"ことができます。 ``'.name'`` 形式の式は :func:`getattr` を使用して指定された"
"属性を選択します。一方、 ``'[index]'`` 形式の式は :meth:`~object."
"__getitem__` を使用してインデックス参照を行います。"

#: ../../library/string.rst:242
msgid ""
"The positional argument specifiers can be omitted for :meth:`str.format`, so "
"``'{} {}'.format(a, b)`` is equivalent to ``'{0} {1}'.format(a, b)``."
msgstr ""
":meth:`str.format` を使い、位置引数指定を省略することができます。\n"
"``'{} {}'.format(a, b)`` は ``'{0} {1}'.format(a, b)`` と同じになります。"

#: ../../library/string.rst:246
msgid ""
"The positional argument specifiers can be omitted for :class:`Formatter`."
msgstr ":class:`Formatter` を使い、位置引数指定を省略することができます。"

#: ../../library/string.rst:249
msgid "Some simple format string examples::"
msgstr "簡単な書式指定文字列の例を挙げます::"

#: ../../library/string.rst:251
msgid ""
"\"First, thou shalt count to {0}\"  # References first positional argument\n"
"\"Bring me a {}\"                   # Implicitly references the first "
"positional argument\n"
"\"From {} to {}\"                   # Same as \"From {0} to {1}\"\n"
"\"My quest is {name}\"              # References keyword argument 'name'\n"
"\"Weight in tons {0.weight}\"       # 'weight' attribute of first positional "
"arg\n"
"\"Units destroyed: {players[0]}\"   # First element of keyword argument "
"'players'."
msgstr ""
"\"First, thou shalt count to {0}\"  # References first positional argument\n"
"\"Bring me a {}\"                   # Implicitly references the first "
"positional argument\n"
"\"From {} to {}\"                   # Same as \"From {0} to {1}\"\n"
"\"My quest is {name}\"              # References keyword argument 'name'\n"
"\"Weight in tons {0.weight}\"       # 'weight' attribute of first positional "
"arg\n"
"\"Units destroyed: {players[0]}\"   # First element of keyword argument "
"'players'."

#: ../../library/string.rst:258
msgid ""
"The *conversion* field causes a type coercion before formatting.  Normally, "
"the job of formatting a value is done by the :meth:`~object.__format__` "
"method of the value itself.  However, in some cases it is desirable to force "
"a type to be formatted as a string, overriding its own definition of "
"formatting.  By converting the value to a string before calling :meth:"
"`~object.__format__`, the normal formatting logic is bypassed."
msgstr ""
"*置換 (conversion)* フィールドにより書式変換前に型の強制変換が実施されます。"
"通常、値の書式変換は :meth:`~object.__format__` によって実施されます。しかし"
"ながら、場合によっては、文字列として変換することを強制したり、書式指定の定義"
"をオーバーライドしたくなることもあります。 :meth:`~object.__format__` の呼び"
"出し前に値を文字列に変換すると、通常の書式変換の処理は飛ばされます。"

#: ../../library/string.rst:265
msgid ""
"Three conversion flags are currently supported: ``'!s'`` which calls :func:"
"`str` on the value, ``'!r'`` which calls :func:`repr` and ``'!a'`` which "
"calls :func:`ascii`."
msgstr ""
"現在 3つの変換フラグがサポートされています: 値に対して :func:`str` を呼ぶ "
"``'!s'`` 、 :func:`repr` を呼ぶ ``'!r'`` 、 :func:`ascii` を呼ぶ ``'!a'``。"

#: ../../library/string.rst:269
msgid "Some examples::"
msgstr "いくつかの例です::"

#: ../../library/string.rst:271
msgid ""
"\"Harold's a clever {0!s}\"        # Calls str() on the argument first\n"
"\"Bring out the holy {name!r}\"    # Calls repr() on the argument first\n"
"\"More {!a}\"                      # Calls ascii() on the argument first"
msgstr ""
"\"Harold's a clever {0!s}\"        # Calls str() on the argument first\n"
"\"Bring out the holy {name!r}\"    # Calls repr() on the argument first\n"
"\"More {!a}\"                      # Calls ascii() on the argument first"

#: ../../library/string.rst:275
msgid ""
"The *format_spec* field contains a specification of how the value should be "
"presented, including such details as field width, alignment, padding, "
"decimal precision and so on.  Each value type can define its own "
"\"formatting mini-language\" or interpretation of the *format_spec*."
msgstr ""
"*format_spec* フィールドは、フィールド幅、文字揃え、埋め方、精度などの、値を"
"表現する仕様を含みます。それぞれの値の型は、 \"formatting mini-language\" 、"
"または、 *format_spec* の実装で定義されます。"

#: ../../library/string.rst:280
msgid ""
"Most built-in types support a common formatting mini-language, which is "
"described in the next section."
msgstr ""
"ほとんどの組み込み型は、次のセクションに記載された共通の formatting mini-"
"language をサポートします。"

#: ../../library/string.rst:283
msgid ""
"A *format_spec* field can also include nested replacement fields within it. "
"These nested replacement fields may contain a field name, conversion flag "
"and format specification, but deeper nesting is not allowed.  The "
"replacement fields within the format_spec are substituted before the "
"*format_spec* string is interpreted. This allows the formatting of a value "
"to be dynamically specified."
msgstr ""
"*format_spec* フィールド内には入れ子になった置換フィールドを含めることもでき"
"ます。入れ子になった置換フィールドにはフィールド名、変換フラグ、書式指定を含"
"めることができますが、さらに入れ子の階層を含めることはできません。 "
"format_spec 中の置換フィールドは *format_spec* 文字列が解釈される前に置き換え"
"られます。これにより、値の書式を動的に指定することができます。"

#: ../../library/string.rst:290
msgid "See the :ref:`formatexamples` section for some examples."
msgstr ":ref:`formatexamples` のいくつかの例も参照して下さい。"

#: ../../library/string.rst:296
msgid "Format Specification Mini-Language"
msgstr "書式指定ミニ言語仕様"

#: ../../library/string.rst:298
msgid ""
"\"Format specifications\" are used within replacement fields contained "
"within a format string to define how individual values are presented (see :"
"ref:`formatstrings` and :ref:`f-strings`). They can also be passed directly "
"to the built-in :func:`format` function.  Each formattable type may define "
"how the format specification is to be interpreted."
msgstr ""
"書式指定 (\"Format specifications\") は書式指定文字列の個々の値を表現する方法"
"を指定するための、置換フィールドで使用されます (:ref:`formatstrings` および :"
"ref:`f-strings` を参照してください) 。\n"
"それらは、組み込み関数の :func:`format` 関数に直接渡されます。\n"
"それぞれの書式指定可能な型について、書式指定がどのように解釈されるかが規定さ"
"れます。"

#: ../../library/string.rst:305
msgid ""
"Most built-in types implement the following options for format "
"specifications, although some of the formatting options are only supported "
"by the numeric types."
msgstr ""
"多くの組み込み型は、書式指定に関して以下のオプションを実装します。しかしなが"
"ら、いくつかの書式指定オプションは数値型でのみサポートされます。"

#: ../../library/string.rst:308
msgid ""
"A general convention is that an empty format specification produces the same "
"result as if you had called :func:`str` on the value. A non-empty format "
"specification typically modifies the result."
msgstr ""
"一般的な取り決めとして、空の書式指定は、値に対して :func:`str` を呼び出したと"
"きと同じ結果を与えます。通常、空でない書式指定はその結果を変更します。"

#: ../../library/string.rst:312
msgid "The general form of a *standard format specifier* is:"
msgstr "一般的な書式指定子 (*standard format specifier*) の書式は以下です:"

#: ../../library/string.rst:324
msgid ""
"If a valid *align* value is specified, it can be preceded by a *fill* "
"character that can be any character and defaults to a space if omitted. It "
"is not possible to use a literal curly brace (\"``{``\" or \"``}``\") as the "
"*fill* character in a :ref:`formatted string literal <f-strings>` or when "
"using the :meth:`str.format` method.  However, it is possible to insert a "
"curly brace with a nested replacement field.  This limitation doesn't affect "
"the :func:`format` function."
msgstr ""
"有効な *align* 値を指定する場合、その前に *fill* 文字を付けることができま"
"す。\n"
"この文字には任意の文字を指定でき、省略された場合はデフォルトの空白文字となり"
"ます。\n"
":ref:`formatted string literal <f-strings>` の中や :meth:`str.format` メソッ"
"ドを使う場合はリテラルの波括弧 (\"``{``\" と \"``}``\") を *fill* 文字として"
"使えないことに注意してください。\n"
"ただし、波括弧を入れ子になった置換フィールド内に挿入することはできます。\n"
"この制限は :func:`format` 関数には影響しません。"

#: ../../library/string.rst:333
msgid "The meaning of the various alignment options is as follows:"
msgstr "様々な align オプションの意味は以下のとおりです:"

#: ../../library/string.rst:342 ../../library/string.rst:373
msgid "Option"
msgstr "オプション"

#: ../../library/string.rst:342 ../../library/string.rst:373
#: ../../library/string.rst:456 ../../library/string.rst:467
#: ../../library/string.rst:502
msgid "Meaning"
msgstr "意味"

#: ../../library/string.rst:344
msgid "``'<'``"
msgstr "``'<'``"

#: ../../library/string.rst:344
msgid ""
"Forces the field to be left-aligned within the available space (this is the "
"default for most objects)."
msgstr ""
"利用可能なスペースにおいて、左詰めを強制します (ほとんどのオブジェクトにおい"
"てのデフォルト)。"

#: ../../library/string.rst:347
msgid "``'>'``"
msgstr "``'>'``"

#: ../../library/string.rst:347
msgid ""
"Forces the field to be right-aligned within the available space (this is the "
"default for numbers)."
msgstr ""
"利用可能なスペースにおいて、右詰めを強制します (いくつかのオブジェクトにおい"
"てのデフォルト)。"

#: ../../library/string.rst:350
msgid "``'='``"
msgstr "``'='``"

#: ../../library/string.rst:350
msgid ""
"Forces the padding to be placed after the sign (if any) but before the "
"digits.  This is used for printing fields in the form '+000000120'. This "
"alignment option is only valid for numeric types.  It becomes the default "
"for numbers when '0' immediately precedes the field width."
msgstr ""
"符号 (があれば) の後ろを埋めます。 '+000000120' のような形で表示されます。こ"
"のオプションは数値型に対してのみ有効です。フィールド幅の直前が '0' の時はこれ"
"がデフォルトの数値になります。"

#: ../../library/string.rst:356
msgid "``'^'``"
msgstr "``'^'``"

#: ../../library/string.rst:356
msgid "Forces the field to be centered within the available space."
msgstr "利用可能なスペースにおいて、中央寄せを強制します。"

#: ../../library/string.rst:360
msgid ""
"Note that unless a minimum field width is defined, the field width will "
"always be the same size as the data to fill it, so that the alignment option "
"has no meaning in this case."
msgstr ""
"最小のフィールド幅が定義されない限り、フィールド幅はデータを表示するために必"
"要な幅と同じになることに注意して下さい。そのため、その場合には、 align オプ"
"ションは意味を持ちません。"

#: ../../library/string.rst:364
msgid ""
"The *sign* option is only valid for number types, and can be one of the "
"following:"
msgstr ""
"*sign* オプションは数値型に対してのみ有効であり、以下のうちのひとつとなりま"
"す:"

#: ../../library/string.rst:375
msgid "``'+'``"
msgstr "``'+'``"

#: ../../library/string.rst:375
msgid ""
"indicates that a sign should be used for both positive as well as negative "
"numbers."
msgstr "符号の使用を、正数、負数の両方に対して指定します。"

#: ../../library/string.rst:378
msgid "``'-'``"
msgstr "``'-'``"

#: ../../library/string.rst:378
msgid ""
"indicates that a sign should be used only for negative numbers (this is the "
"default behavior)."
msgstr "符号の使用を、負数に対してのみ指定します (デフォルトの挙動です)。"

#: ../../library/string.rst:367 ../../library/string.rst:381
msgid "space"
msgstr "空白"

#: ../../library/string.rst:381
msgid ""
"indicates that a leading space should be used on positive numbers, and a "
"minus sign on negative numbers."
msgstr "空白を正数の前に付け、負号を負数の前に使用することを指定します。"

#: ../../library/string.rst:388
msgid ""
"The ``'z'`` option coerces negative zero floating-point values to positive "
"zero after rounding to the format precision.  This option is only valid for "
"floating-point presentation types."
msgstr ""
"``'z'`` オプションはマイナス0の浮動小数点数をフォーマットの制度で丸めたあとに"
"プラス0に強制的に変換します。このオプションは浮動小数点数型に対してのみ有効で"
"す。"

#: ../../library/string.rst:392
msgid "Added the ``'z'`` option (see also :pep:`682`)."
msgstr "``'z'`` オプションが追加されました (:pep:`682` も参照)。"

#: ../../library/string.rst:397
msgid ""
"The ``'#'`` option causes the \"alternate form\" to be used for the "
"conversion.  The alternate form is defined differently for different types.  "
"This option is only valid for integer, float and complex types. For "
"integers, when binary, octal, or hexadecimal output is used, this option "
"adds the respective prefix ``'0b'``, ``'0o'``, ``'0x'``, or ``'0X'`` to the "
"output value. For float and complex the alternate form causes the result of "
"the conversion to always contain a decimal-point character, even if no "
"digits follow it. Normally, a decimal-point character appears in the result "
"of these conversions only if a digit follows it. In addition, for ``'g'`` "
"and ``'G'`` conversions, trailing zeros are not removed from the result."
msgstr ""
"``'#'`` オプションは、変換に「別形式」を使用します。別形式は、異なる型に対し"
"て違った風に定義されます。このオプションは、整数、浮動小数点数、複素数でのみ"
"有効です。整数に対して2進法、8進法、または16進法の出力が使用される場合、この"
"オプションは出力される値にそれぞれ ``'0b'``, ``'0o'``, ``'0x'``, ``'0X'`` 接"
"頭辞を加えます。浮動小数点数、複素数については、別形式では、小数点文字の後に"
"数字がなくても変換結果には常に小数点文字が含まれます。通常は、数字が続く場合"
"にのみ小数点文字がこれらの変換結果に現われます。さらに、``'g'`` と ``'G'`` の"
"変換については、最後の 0 は結果から取り除かれません。"

#: ../../library/string.rst:411
msgid ""
"The ``','`` option signals the use of a comma for a thousands separator. For "
"a locale aware separator, use the ``'n'`` integer presentation type instead."
msgstr ""
"``','`` オプションは、千の位のセパレータにカンマを使うことを合図します。ロ"
"ケール依存のセパレータには、代わりに ``'n'`` の整数表現形式を使ってください。"

#: ../../library/string.rst:415
msgid "Added the ``','`` option (see also :pep:`378`)."
msgstr "``','`` オプションが追加されました (:pep:`378` も参照)。"

#: ../../library/string.rst:420
msgid ""
"The ``'_'`` option signals the use of an underscore for a thousands "
"separator for floating-point presentation types and for integer presentation "
"type ``'d'``.  For integer presentation types ``'b'``, ``'o'``, ``'x'``, and "
"``'X'``, underscores will be inserted every 4 digits.  For other "
"presentation types, specifying this option is an error."
msgstr ""
"``'_'`` オプションは、浮動小数点数の表現型と整数の表現型 ``'d'`` における千倍"
"ごとの区切り文字にアンダースコアを使うというしるしです。\n"
"整数の表現型の ``'b'``, ``'o'``, ``'x'``, ``'X'`` では、4桁ごとにアンダースコ"
"アが挿入されます。\n"
"他の表現型でこのオプションを指定するとエラーになります。"

#: ../../library/string.rst:427
msgid "Added the ``'_'`` option (see also :pep:`515`)."
msgstr "``'_'`` オプションが追加されました (:pep:`515` も参照)。"

#: ../../library/string.rst:430
msgid ""
"*width* is a decimal integer defining the minimum total field width, "
"including any prefixes, separators, and other formatting characters. If not "
"specified, then the field width will be determined by the content."
msgstr ""
"*width* は10進数の整数で、接頭辞、セパレータ、他のフォーマット文字を含んだ最"
"小の合計フィールド幅を定義します。指定されない場合、フィールド幅はその内容に"
"より決定されます。"

#: ../../library/string.rst:434
msgid ""
"When no explicit alignment is given, preceding the *width* field by a zero "
"(``'0'``) character enables sign-aware zero-padding for numeric types.  This "
"is equivalent to a *fill* character of ``'0'`` with an *alignment* type of "
"``'='``."
msgstr ""
"alignment が明示的に与えられない場合、 *width* フィールドにゼロ (``'0'``) 文"
"字を前置することは、数値型のための符号を意識した 0 パディングを可能にします。"
"これは *fill* 文字に ``'0'`` を指定して、 *alignment* タイプに ``'='`` を指定"
"したことと等価です。"

#: ../../library/string.rst:439
msgid ""
"Preceding the *width* field by ``'0'`` no longer affects the default "
"alignment for strings."
msgstr ""
"*width* フィールドに ``'0'`` を前置することは、文字列に対するデフォルトの整列"
"に影響を与えなくなりました。"

#: ../../library/string.rst:443
msgid ""
"The *precision* is a decimal integer indicating how many digits should be "
"displayed after the decimal point for presentation types ``'f'`` and "
"``'F'``, or before and after the decimal point for presentation types "
"``'g'`` or ``'G'``.  For string presentation types the field indicates the "
"maximum field size - in other words, how many characters will be used from "
"the field content.  The *precision* is not allowed for integer presentation "
"types."
msgstr ""
"*precision* は、表現型 ``'f'`` または ``'F'`` の場合小数点以下、表現型 "
"``'g'`` または ``'G'`` の場合は小数点以上と以下が何桁で表示されるべきかを示す"
"10進整数です。文字列の表現型の場合は最大フィールド幅、言い換えるとフィールド"
"の内容から何文字が使用されるかを示します。*precision* は整数の表現型には使用"
"できません。"

#: ../../library/string.rst:451
msgid "Finally, the *type* determines how the data should be presented."
msgstr "最後に、*type* は、データがどのように表現されるかを決定します。"

#: ../../library/string.rst:453
msgid "The available string presentation types are:"
msgstr "利用可能な文字列の表現型は以下です:"

#: ../../library/string.rst:456 ../../library/string.rst:467
#: ../../library/string.rst:502
msgid "Type"
msgstr "型"

#: ../../library/string.rst:458
msgid "``'s'``"
msgstr "``'s'``"

#: ../../library/string.rst:458
msgid "String format. This is the default type for strings and may be omitted."
msgstr "文字列。これがデフォルトの値で、多くの場合省略されます。"

#: ../../library/string.rst:461 ../../library/string.rst:490
#: ../../library/string.rst:577
msgid "None"
msgstr "None"

#: ../../library/string.rst:461
msgid "The same as ``'s'``."
msgstr "``'s'`` と同じです。"

#: ../../library/string.rst:464
msgid "The available integer presentation types are:"
msgstr "利用可能な整数の表現型は以下です:"

#: ../../library/string.rst:469
msgid "``'b'``"
msgstr "``'b'``"

#: ../../library/string.rst:469
msgid "Binary format. Outputs the number in base 2."
msgstr "2進数。出力される数値は2を基数とします。"

#: ../../library/string.rst:471
msgid "``'c'``"
msgstr "``'c'``"

#: ../../library/string.rst:471
msgid ""
"Character. Converts the integer to the corresponding unicode character "
"before printing."
msgstr "文字。数値を対応する Unicode 文字に変換します。"

#: ../../library/string.rst:474
msgid "``'d'``"
msgstr "``'d'``"

#: ../../library/string.rst:474
msgid "Decimal Integer. Outputs the number in base 10."
msgstr "10進数。出力される数値は10を基数とします。"

#: ../../library/string.rst:476
msgid "``'o'``"
msgstr "``'o'``"

#: ../../library/string.rst:476
msgid "Octal format. Outputs the number in base 8."
msgstr "8進数。出力される数値は8を基数とします。"

#: ../../library/string.rst:478
msgid "``'x'``"
msgstr "``'x'``"

#: ../../library/string.rst:478
msgid ""
"Hex format. Outputs the number in base 16, using lower-case letters for the "
"digits above 9."
msgstr ""
"16進数。出力される数値は16を基数とします。 10進で9を超える数字には小文字が使"
"われます。"

#: ../../library/string.rst:481
msgid "``'X'``"
msgstr "``'X'``"

#: ../../library/string.rst:481
msgid ""
"Hex format. Outputs the number in base 16, using upper-case letters for the "
"digits above 9. In case ``'#'`` is specified, the prefix ``'0x'`` will be "
"upper-cased to ``'0X'`` as well."
msgstr ""
"16進数。出力される数値は16を基数とします。10進で9を超える数字には大文字が使わ"
"れます。``'#'`` が指定された場合、接頭辞 ``'0x'`` も大文字 ``'0X'`` になりま"
"す"

#: ../../library/string.rst:486 ../../library/string.rst:570
msgid "``'n'``"
msgstr "``'n'``"

#: ../../library/string.rst:486
msgid ""
"Number. This is the same as ``'d'``, except that it uses the current locale "
"setting to insert the appropriate number separator characters."
msgstr ""
"数値。現在のロケールに従い、区切り文字を挿入することを除けば、 ``'d'`` と同じ"
"です。"

#: ../../library/string.rst:490
msgid "The same as ``'d'``."
msgstr "``'d'`` と同じです。"

#: ../../library/string.rst:493
msgid ""
"In addition to the above presentation types, integers can be formatted with "
"the floating-point presentation types listed below (except ``'n'`` and "
"``None``). When doing so, :func:`float` is used to convert the integer to a "
"floating-point number before formatting."
msgstr ""
"これらの表現型に加えて、整数は (``'n'`` と ``None`` を除く) 以下の浮動小数点"
"数の表現型で書式指定できます。\n"
"そうすることで整数は書式変換される前に :func:`float` を使って浮動小数点数に変"
"換されます。"

#: ../../library/string.rst:498
msgid ""
"The available presentation types for :class:`float` and :class:`~decimal."
"Decimal` values are:"
msgstr ""
"利用可能な :class:`float` と :class:`~decimal.Decimal` の表現型は以下です:"

#: ../../library/string.rst:504
msgid "``'e'``"
msgstr "``'e'``"

#: ../../library/string.rst:504
msgid ""
"Scientific notation. For a given precision ``p``, formats the number in "
"scientific notation with the letter 'e' separating the coefficient from the "
"exponent. The coefficient has one digit before and ``p`` digits after the "
"decimal point, for a total of ``p + 1`` significant digits. With no "
"precision given, uses a precision of ``6`` digits after the decimal point "
"for :class:`float`, and shows all coefficient digits for :class:`~decimal."
"Decimal`. If no digits follow the decimal point, the decimal point is also "
"removed unless the ``#`` option is used."
msgstr ""
"科学的表記です。与えられた精度 ``p`` に対して、科学的表記では係数と指数を区切"
"り文字 'e' で分けて表します。係数部分は小数点の前に1桁、小数点の後に ``p`` "
"桁、合計 ``p + 1`` 桁の有効桁数を持ちます。 精度が指定されない場合、 :class:"
"`float` では小数点以下 ``6`` 桁の精度が使われ、いっぽう :class:`~decimal."
"Decimal` では係数部全てが表示されます。小数点以下の桁がない場合、 ``#`` オプ"
"ションが使われた場合をのぞき、小数点は除去されます。"

#: ../../library/string.rst:516
msgid "``'E'``"
msgstr "``'E'``"

#: ../../library/string.rst:516
msgid ""
"Scientific notation. Same as ``'e'`` except it uses an upper case 'E' as the "
"separator character."
msgstr "指数表記です。大文字の 'E' を使うことを除いては、 ``'e'`` と同じです。"

#: ../../library/string.rst:519
msgid "``'f'``"
msgstr "``'f'``"

#: ../../library/string.rst:519
msgid ""
"Fixed-point notation. For a given precision ``p``, formats the number as a "
"decimal number with exactly ``p`` digits following the decimal point. With "
"no precision given, uses a precision of ``6`` digits after the decimal point "
"for :class:`float`, and uses a precision large enough to show all "
"coefficient digits for :class:`~decimal.Decimal`. If no digits follow the "
"decimal point, the decimal point is also removed unless the ``#`` option is "
"used."
msgstr ""
"固定小数点表記です。与えられた精度 ``p`` に対して、小数点以下 ``p`` 桁で数値"
"を表します。精度が指定されない場合、 :class:`float` では ``6`` 桁の精度が使わ"
"れ、いっぽう :class:`~decimal.Decimal` では数値全体を表示するのに十分な精度が"
"使われます。小数点以下の桁がない場合、 ``#`` オプションが使われた場合をのぞ"
"き、小数点は除去されます。"

#: ../../library/string.rst:529
msgid "``'F'``"
msgstr "``'F'``"

#: ../../library/string.rst:529
msgid ""
"Fixed-point notation. Same as ``'f'``, but converts ``nan`` to  ``NAN`` and "
"``inf`` to ``INF``."
msgstr ""
"固定小数点数表記です。``nan`` が ``NAN`` に、``inf`` が ``INF`` に変換される"
"ことを除き ``'f'`` と同じです。"

#: ../../library/string.rst:532
msgid "``'g'``"
msgstr "``'g'``"

#: ../../library/string.rst:532
msgid ""
"General format.  For a given precision ``p >= 1``, this rounds the number to "
"``p`` significant digits and then formats the result in either fixed-point "
"format or in scientific notation, depending on its magnitude. A precision of "
"``0`` is treated as equivalent to a precision of ``1``."
msgstr ""
"汎用表記です。与えられた精度 ``p >= 1`` に対して、この表記では数値を有効桁数 "
"``p`` に丸めた上で、数値の大きさに応じて固定小数点表記または科学的表記で表し"
"ます。精度 ``0`` は精度 ``1`` と同じものと取り扱われます。"

#: ../../library/string.rst:539
msgid ""
"The precise rules are as follows: suppose that the result formatted with "
"presentation type ``'e'`` and precision ``p-1`` would have exponent "
"``exp``.  Then, if ``m <= exp < p``, where ``m`` is -4 for floats and -6 "
"for :class:`Decimals <decimal.Decimal>`, the number is formatted with "
"presentation type ``'f'`` and precision ``p-1-exp``.  Otherwise, the number "
"is formatted with presentation type ``'e'`` and precision ``p-1``. In both "
"cases insignificant trailing zeros are removed from the significand, and the "
"decimal point is also removed if there are no remaining digits following it, "
"unless the ``'#'`` option is used."
msgstr ""
"正確なルールは次の通りです: 書式 ``'e'`` 型および精度 ``p-1`` 桁で数値を"
"フォーマットした結果、指数部が ``exp`` になったと仮定します。このとき ``m <= "
"exp < p`` ならば、数値は書式 ``'f'`` 型および精度 ``p-1-exp`` 桁でフォーマッ"
"トされます。ただし ``m`` は浮動小数点数では -4 であり、  :class:`Decimals "
"<decimal.Decimal>` に対しては -6 です。それ以外の場合、数値は書式 ``'e'`` 型"
"および精度 ``p-1`` 桁でフォーマットされます。どちらの場合でも、仮数部の有効で"
"ない末尾のゼロは取り除かれます。また小数点以下に表示する桁が無い場合、 "
"``'#'`` オプションが使われた場合をのぞき、小数点は除去されます。"

#: ../../library/string.rst:552
msgid ""
"With no precision given, uses a precision of ``6`` significant digits for :"
"class:`float`. For :class:`~decimal.Decimal`, the coefficient of the result "
"is formed from the coefficient digits of the value; scientific notation is "
"used for values smaller than ``1e-6`` in absolute value and values where the "
"place value of the least significant digit is larger than 1, and fixed-point "
"notation is used otherwise."
msgstr ""
"精度が指定されない場合、 :class:`float` に対しては有効桁数として ``6`` 桁を適"
"用します。  :class:`~decimal.Decimal` では、フォーマット結果の係数部は実際の"
"値の桁数によって決まります; 絶対値が ``1e-6`` より小さい値や、最下位桁の値が1"
"より大きい値では科学的表記が使われます。それ以外の場合は固定小数点表記が使わ"
"れます。"

#: ../../library/string.rst:561
msgid ""
"Positive and negative infinity, positive and negative zero, and nans, are "
"formatted as ``inf``, ``-inf``, ``0``, ``-0`` and ``nan`` respectively, "
"regardless of the precision."
msgstr ""
"正と負の無限大と 0 および NaN は精度に関係なくそれぞれ ``inf``, ``-inf``, "
"``0``, ``-0`` および ``nan`` となります。"

#: ../../library/string.rst:566
msgid "``'G'``"
msgstr "``'G'``"

#: ../../library/string.rst:566
msgid ""
"General format. Same as ``'g'`` except switches to ``'E'`` if the number "
"gets too large. The representations of infinity and NaN are uppercased, too."
msgstr ""
"汎用フォーマットです。数値が大きくなったとき、 ``'E'`` に切り替わることを除"
"き、 ``'g'`` と同じです。無限大と NaN の表示も大文字になります。"

#: ../../library/string.rst:570
msgid ""
"Number. This is the same as ``'g'``, except that it uses the current locale "
"setting to insert the appropriate number separator characters."
msgstr ""
"数値です。現在のロケールに合わせて、数値分割文字が挿入されることを除き、 "
"``'g'`` と同じです。"

#: ../../library/string.rst:574
msgid "``'%'``"
msgstr "``'%'``"

#: ../../library/string.rst:574
msgid ""
"Percentage. Multiplies the number by 100 and displays in fixed (``'f'``) "
"format, followed by a percent sign."
msgstr ""
"パーセンテージです。数値は 100 倍され、固定小数点数フォーマット (``'f'``) で"
"パーセント記号付きで表示されます。"

#: ../../library/string.rst:577
msgid ""
"For :class:`float` this is like the ``'g'`` type, except that when fixed-"
"point notation is used to format the result, it always includes at least one "
"digit past the decimal point, and switches to the scientific notation when "
"``exp >= p - 1``.  When the precision is not specified, the latter will be "
"as large as needed to represent the given value faithfully."
msgstr ""

#: ../../library/string.rst:585
msgid ""
"For :class:`~decimal.Decimal`, this is the same as either ``'g'`` or ``'G'`` "
"depending on the value of ``context.capitals`` for the current decimal "
"context."
msgstr ""
":class:`~decimal.Decimal` に対しては、現在の decimal コンテキストにおける "
"``context.capitals`` の値に応じて、 ``'g'`` か ``'G'`` のどちらかと同じになり"
"ます。"

#: ../../library/string.rst:589
msgid ""
"The overall effect is to match the output of :func:`str` as altered by the "
"other format modifiers."
msgstr ""
"全体として、他の書式修正指定によって変更された :func:`str` の出力に一致するよ"
"うな結果になります。"

#: ../../library/string.rst:597
msgid "Format examples"
msgstr "書式指定例"

#: ../../library/string.rst:599
msgid ""
"This section contains examples of the :meth:`str.format` syntax and "
"comparison with the old ``%``-formatting."
msgstr ""
"この節では、 :meth:`str.format` 構文の例を紹介し、さらに従来の ``%``-書式と比"
"較します。"

#: ../../library/string.rst:602
msgid ""
"In most of the cases the syntax is similar to the old ``%``-formatting, with "
"the addition of the ``{}`` and with ``:`` used instead of ``%``. For "
"example, ``'%03.2f'`` can be translated to ``'{:03.2f}'``."
msgstr ""
"多くの場合、新構文に ``{}`` を加え、 ``%`` の代わりに ``:`` を使うことで、古"
"い ``%``-書式に類似した書式になります。例えば、``'%03.2f'`` は "
"``'{:03.2f}'`` と変換できます。"

#: ../../library/string.rst:606
msgid ""
"The new format syntax also supports new and different options, shown in the "
"following examples."
msgstr ""
"以下の例で示すように、新構文はさらに新たに様々なオプションもサポートしていま"
"す。"

#: ../../library/string.rst:609
msgid "Accessing arguments by position::"
msgstr "位置引数を使ったアクセス::"

#: ../../library/string.rst:611
msgid ""
">>> '{0}, {1}, {2}'.format('a', 'b', 'c')\n"
"'a, b, c'\n"
">>> '{}, {}, {}'.format('a', 'b', 'c')  # 3.1+ only\n"
"'a, b, c'\n"
">>> '{2}, {1}, {0}'.format('a', 'b', 'c')\n"
"'c, b, a'\n"
">>> '{2}, {1}, {0}'.format(*'abc')      # unpacking argument sequence\n"
"'c, b, a'\n"
">>> '{0}{1}{0}'.format('abra', 'cad')   # arguments' indices can be "
"repeated\n"
"'abracadabra'"
msgstr ""
">>> '{0}, {1}, {2}'.format('a', 'b', 'c')\n"
"'a, b, c'\n"
">>> '{}, {}, {}'.format('a', 'b', 'c')  # 3.1+ only\n"
"'a, b, c'\n"
">>> '{2}, {1}, {0}'.format('a', 'b', 'c')\n"
"'c, b, a'\n"
">>> '{2}, {1}, {0}'.format(*'abc')      # unpacking argument sequence\n"
"'c, b, a'\n"
">>> '{0}{1}{0}'.format('abra', 'cad')   # arguments' indices can be "
"repeated\n"
"'abracadabra'"

#: ../../library/string.rst:622
msgid "Accessing arguments by name::"
msgstr "名前を使ったアクセス::"

#: ../../library/string.rst:624
msgid ""
">>> 'Coordinates: {latitude}, {longitude}'.format(latitude='37.24N', "
"longitude='-115.81W')\n"
"'Coordinates: 37.24N, -115.81W'\n"
">>> coord = {'latitude': '37.24N', 'longitude': '-115.81W'}\n"
">>> 'Coordinates: {latitude}, {longitude}'.format(**coord)\n"
"'Coordinates: 37.24N, -115.81W'"
msgstr ""
">>> 'Coordinates: {latitude}, {longitude}'.format(latitude='37.24N', "
"longitude='-115.81W')\n"
"'Coordinates: 37.24N, -115.81W'\n"
">>> coord = {'latitude': '37.24N', 'longitude': '-115.81W'}\n"
">>> 'Coordinates: {latitude}, {longitude}'.format(**coord)\n"
"'Coordinates: 37.24N, -115.81W'"

#: ../../library/string.rst:630
msgid "Accessing arguments' attributes::"
msgstr "引数の属性へのアクセス::"

#: ../../library/string.rst:632
msgid ""
">>> c = 3-5j\n"
">>> ('The complex number {0} is formed from the real part {0.real} '\n"
"...  'and the imaginary part {0.imag}.').format(c)\n"
"'The complex number (3-5j) is formed from the real part 3.0 and the "
"imaginary part -5.0.'\n"
">>> class Point:\n"
"...     def __init__(self, x, y):\n"
"...         self.x, self.y = x, y\n"
"...     def __str__(self):\n"
"...         return 'Point({self.x}, {self.y})'.format(self=self)\n"
"...\n"
">>> str(Point(4, 2))\n"
"'Point(4, 2)'"
msgstr ""
">>> c = 3-5j\n"
">>> ('The complex number {0} is formed from the real part {0.real} '\n"
"...  'and the imaginary part {0.imag}.').format(c)\n"
"'The complex number (3-5j) is formed from the real part 3.0 and the "
"imaginary part -5.0.'\n"
">>> class Point:\n"
"...     def __init__(self, x, y):\n"
"...         self.x, self.y = x, y\n"
"...     def __str__(self):\n"
"...         return 'Point({self.x}, {self.y})'.format(self=self)\n"
"...\n"
">>> str(Point(4, 2))\n"
"'Point(4, 2)'"

#: ../../library/string.rst:645
msgid "Accessing arguments' items::"
msgstr "引数の要素へのアクセス::"

#: ../../library/string.rst:647
msgid ""
">>> coord = (3, 5)\n"
">>> 'X: {0[0]};  Y: {0[1]}'.format(coord)\n"
"'X: 3;  Y: 5'"
msgstr ""
">>> coord = (3, 5)\n"
">>> 'X: {0[0]};  Y: {0[1]}'.format(coord)\n"
"'X: 3;  Y: 5'"

#: ../../library/string.rst:651
msgid "Replacing ``%s`` and ``%r``::"
msgstr "``%s`` と ``%r`` の置き換え::"

#: ../../library/string.rst:653
msgid ""
">>> \"repr() shows quotes: {!r}; str() doesn't: {!s}\".format('test1', "
"'test2')\n"
"\"repr() shows quotes: 'test1'; str() doesn't: test2\""
msgstr ""
">>> \"repr() shows quotes: {!r}; str() doesn't: {!s}\".format('test1', "
"'test2')\n"
"\"repr() shows quotes: 'test1'; str() doesn't: test2\""

#: ../../library/string.rst:656
msgid "Aligning the text and specifying a width::"
msgstr "テキストの幅を指定した整列::"

#: ../../library/string.rst:658
msgid ""
">>> '{:<30}'.format('left aligned')\n"
"'left aligned                  '\n"
">>> '{:>30}'.format('right aligned')\n"
"'                 right aligned'\n"
">>> '{:^30}'.format('centered')\n"
"'           centered           '\n"
">>> '{:*^30}'.format('centered')  # use '*' as a fill char\n"
"'***********centered***********'"
msgstr ""
">>> '{:<30}'.format('left aligned')\n"
"'left aligned                  '\n"
">>> '{:>30}'.format('right aligned')\n"
"'                 right aligned'\n"
">>> '{:^30}'.format('centered')\n"
"'           centered           '\n"
">>> '{:*^30}'.format('centered')  # use '*' as a fill char\n"
"'***********centered***********'"

#: ../../library/string.rst:667
msgid "Replacing ``%+f``, ``%-f``, and ``% f`` and specifying a sign::"
msgstr "``%+f`` と ``%-f``, ``% f`` の置換、そして符号の指定::"

#: ../../library/string.rst:669
msgid ""
">>> '{:+f}; {:+f}'.format(3.14, -3.14)  # show it always\n"
"'+3.140000; -3.140000'\n"
">>> '{: f}; {: f}'.format(3.14, -3.14)  # show a space for positive numbers\n"
"' 3.140000; -3.140000'\n"
">>> '{:-f}; {:-f}'.format(3.14, -3.14)  # show only the minus -- same as '{:"
"f}; {:f}'\n"
"'3.140000; -3.140000'"
msgstr ""
">>> '{:+f}; {:+f}'.format(3.14, -3.14)  # show it always\n"
"'+3.140000; -3.140000'\n"
">>> '{: f}; {: f}'.format(3.14, -3.14)  # show a space for positive numbers\n"
"' 3.140000; -3.140000'\n"
">>> '{:-f}; {:-f}'.format(3.14, -3.14)  # show only the minus -- same as '{:"
"f}; {:f}'\n"
"'3.140000; -3.140000'"

#: ../../library/string.rst:676
msgid ""
"Replacing ``%x`` and ``%o`` and converting the value to different bases::"
msgstr "``%x`` と ``%o`` の置換、そして値に対する異なる底の変換::"

#: ../../library/string.rst:678
msgid ""
">>> # format also supports binary numbers\n"
">>> \"int: {0:d};  hex: {0:x};  oct: {0:o};  bin: {0:b}\".format(42)\n"
"'int: 42;  hex: 2a;  oct: 52;  bin: 101010'\n"
">>> # with 0x, 0o, or 0b as prefix:\n"
">>> \"int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: {0:#b}\".format(42)\n"
"'int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010'"
msgstr ""
">>> # format also supports binary numbers\n"
">>> \"int: {0:d};  hex: {0:x};  oct: {0:o};  bin: {0:b}\".format(42)\n"
"'int: 42;  hex: 2a;  oct: 52;  bin: 101010'\n"
">>> # with 0x, 0o, or 0b as prefix:\n"
">>> \"int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: {0:#b}\".format(42)\n"
"'int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010'"

#: ../../library/string.rst:685
msgid "Using the comma as a thousands separator::"
msgstr "千の位のセパレータにカンマを使用する::"

#: ../../library/string.rst:687
msgid ""
">>> '{:,}'.format(1234567890)\n"
"'1,234,567,890'"
msgstr ""
">>> '{:,}'.format(1234567890)\n"
"'1,234,567,890'"

#: ../../library/string.rst:690
msgid "Expressing a percentage::"
msgstr "パーセントを表示する::"

#: ../../library/string.rst:692
msgid ""
">>> points = 19\n"
">>> total = 22\n"
">>> 'Correct answers: {:.2%}'.format(points/total)\n"
"'Correct answers: 86.36%'"
msgstr ""
">>> points = 19\n"
">>> total = 22\n"
">>> 'Correct answers: {:.2%}'.format(points/total)\n"
"'Correct answers: 86.36%'"

#: ../../library/string.rst:697
msgid "Using type-specific formatting::"
msgstr "型特有の書式指定を使う::"

#: ../../library/string.rst:699
msgid ""
">>> import datetime\n"
">>> d = datetime.datetime(2010, 7, 4, 12, 15, 58)\n"
">>> '{:%Y-%m-%d %H:%M:%S}'.format(d)\n"
"'2010-07-04 12:15:58'"
msgstr ""
">>> import datetime\n"
">>> d = datetime.datetime(2010, 7, 4, 12, 15, 58)\n"
">>> '{:%Y-%m-%d %H:%M:%S}'.format(d)\n"
"'2010-07-04 12:15:58'"

#: ../../library/string.rst:704
msgid "Nesting arguments and more complex examples::"
msgstr "引数をネストする、さらに複雑な例::"

#: ../../library/string.rst:706
msgid ""
">>> for align, text in zip('<^>', ['left', 'center', 'right']):\n"
"...     '{0:{fill}{align}16}'.format(text, fill=align, align=align)\n"
"...\n"
"'left<<<<<<<<<<<<'\n"
"'^^^^^center^^^^^'\n"
"'>>>>>>>>>>>right'\n"
">>>\n"
">>> octets = [192, 168, 0, 1]\n"
">>> '{:02X}{:02X}{:02X}{:02X}'.format(*octets)\n"
"'C0A80001'\n"
">>> int(_, 16)\n"
"3232235521\n"
">>>\n"
">>> width = 5\n"
">>> for num in range(5,12): \n"
"...     for base in 'dXob':\n"
"...         print('{0:{width}{base}}'.format(num, base=base, width=width), "
"end=' ')\n"
"...     print()\n"
"...\n"
"    5     5     5   101\n"
"    6     6     6   110\n"
"    7     7     7   111\n"
"    8     8    10  1000\n"
"    9     9    11  1001\n"
"   10     A    12  1010\n"
"   11     B    13  1011"
msgstr ""
">>> for align, text in zip('<^>', ['left', 'center', 'right']):\n"
"...     '{0:{fill}{align}16}'.format(text, fill=align, align=align)\n"
"...\n"
"'left<<<<<<<<<<<<'\n"
"'^^^^^center^^^^^'\n"
"'>>>>>>>>>>>right'\n"
">>>\n"
">>> octets = [192, 168, 0, 1]\n"
">>> '{:02X}{:02X}{:02X}{:02X}'.format(*octets)\n"
"'C0A80001'\n"
">>> int(_, 16)\n"
"3232235521\n"
">>>\n"
">>> width = 5\n"
">>> for num in range(5,12): \n"
"...     for base in 'dXob':\n"
"...         print('{0:{width}{base}}'.format(num, base=base, width=width), "
"end=' ')\n"
"...     print()\n"
"...\n"
"    5     5     5   101\n"
"    6     6     6   110\n"
"    7     7     7   111\n"
"    8     8    10  1000\n"
"    9     9    11  1001\n"
"   10     A    12  1010\n"
"   11     B    13  1011"

#: ../../library/string.rst:738
msgid "Template strings"
msgstr "テンプレート文字列"

#: ../../library/string.rst:740
msgid ""
"Template strings provide simpler string substitutions as described in :pep:"
"`292`.  A primary use case for template strings is for internationalization "
"(i18n) since in that context, the simpler syntax and functionality makes it "
"easier to translate than other built-in string formatting facilities in "
"Python.  As an example of a library built on template strings for i18n, see "
"the `flufl.i18n <https://flufli18n.readthedocs.io/en/latest/>`_ package."
msgstr ""
"テンプレート文字列では :pep:`292` で解説されている単純な文字列置換ができま"
"す。\n"
"テンプレート文字列の主な使い道は国際化 (i18n) です。というのは、その国際化の"
"文脈において、より簡潔な文法と機能を持つテンプレート文字列を使うと、 Python "
"にある他の組み込みの文字列フォーマット機能よりも翻訳がしやすいからです。\n"
"テンプレート文字列の上に構築された国際化のためのライプラリの例として、 "
"`flufl.i18n <https://flufli18n.readthedocs.io/en/latest/>`_ を調べてみてくだ"
"さい。"

#: ../../library/string.rst:750
msgid ""
"Template strings support ``$``-based substitutions, using the following "
"rules:"
msgstr ""
"テンプレート文字列は ``$`` に基づいた置換をサポートしていて、次の規則が使われ"
"ています:"

#: ../../library/string.rst:752
msgid "``$$`` is an escape; it is replaced with a single ``$``."
msgstr "``$$`` はエスケープ文字です; ``$`` 一つに置換されます。"

#: ../../library/string.rst:754
msgid ""
"``$identifier`` names a substitution placeholder matching a mapping key of "
"``\"identifier\"``.  By default, ``\"identifier\"`` is restricted to any "
"case-insensitive ASCII alphanumeric string (including underscores) that "
"starts with an underscore or ASCII letter.  The first non-identifier "
"character after the ``$`` character terminates this placeholder "
"specification."
msgstr ""
"``$identifier`` は ``\"identifier\"`` のマッピングキーに合致する置換プレース"
"ホルダーを指定します。デフォルトでは、 ``\"identifier\"`` は大文字と小文字を"
"区別しない ASCII 英数字 (アンダースコアを含む) からなら文字列に制限されていま"
"す。文字列はアンダースコアか ASCII 文字から始まるものでなければなりません。"
"``$`` の後に識別子に使えない文字が出現すると、そこでプレースホルダ名の指定が"
"終わります。"

#: ../../library/string.rst:761
msgid ""
"``${identifier}`` is equivalent to ``$identifier``.  It is required when "
"valid identifier characters follow the placeholder but are not part of the "
"placeholder, such as ``\"${noun}ification\"``."
msgstr ""
"``${identifier}`` は ``$identifier`` と同じです。プレースホルダ名の後ろに識別"
"子として使える文字列が続いていて、それをプレースホルダ名の一部として扱いたく"
"ない場合、例えば ``\"${noun}ification\"`` のような場合に必要な書き方です。"

#: ../../library/string.rst:765
msgid ""
"Any other appearance of ``$`` in the string will result in a :exc:"
"`ValueError` being raised."
msgstr ""
"上記以外の書き方で文字列中に ``$`` を使うと :exc:`ValueError` を送出します。"

#: ../../library/string.rst:768
msgid ""
"The :mod:`string` module provides a :class:`Template` class that implements "
"these rules.  The methods of :class:`Template` are:"
msgstr ""
":mod:`string` モジュールでは、上記のような規則を実装した :class:`Template` ク"
"ラスを提供しています。 :class:`Template` のメソッドを以下に示します:"

#: ../../library/string.rst:774
msgid "The constructor takes a single argument which is the template string."
msgstr "コンストラクタはテンプレート文字列になる引数を一つだけ取ります。"

#: ../../library/string.rst:779
msgid ""
"Performs the template substitution, returning a new string.  *mapping* is "
"any dictionary-like object with keys that match the placeholders in the "
"template.  Alternatively, you can provide keyword arguments, where the "
"keywords are the placeholders.  When both *mapping* and *kwds* are given and "
"there are duplicates, the placeholders from *kwds* take precedence."
msgstr ""
"テンプレート置換を行い、新たな文字列を生成して返します。*mapping* はテンプ"
"レート中のプレースホルダに対応するキーを持つような任意の辞書類似オブジェクト"
"です。辞書を指定する代わりに、キーワード引数も指定でき、その場合にはキーワー"
"ドをプレースホルダ名に対応させます。*mapping* と *kwds* の両方が指定され、内"
"容が重複した場合には、*kwds* に指定したプレースホルダを優先します。"

#: ../../library/string.rst:788
msgid ""
"Like :meth:`substitute`, except that if placeholders are missing from "
"*mapping* and *kwds*, instead of raising a :exc:`KeyError` exception, the "
"original placeholder will appear in the resulting string intact.  Also, "
"unlike with :meth:`substitute`, any other appearances of the ``$`` will "
"simply return ``$`` instead of raising :exc:`ValueError`."
msgstr ""
":meth:`substitute` と同じですが、プレースホルダに対応するものを *mapping* や "
"*kwds* から見つけられなかった場合に、 :exc:`KeyError` 例外を送出する代わりに"
"もとのプレースホルダがそのまま入ります。また、 :meth:`substitute` とは違い、"
"規則外の書き方で ``$`` を使った場合でも、 :exc:`ValueError` を送出せず単に "
"``$`` を返します。"

#: ../../library/string.rst:794
msgid ""
"While other exceptions may still occur, this method is called \"safe\" "
"because it always tries to return a usable string instead of raising an "
"exception.  In another sense, :meth:`safe_substitute` may be anything other "
"than safe, since it will silently ignore malformed templates containing "
"dangling delimiters, unmatched braces, or placeholders that are not valid "
"Python identifiers."
msgstr ""
"その他の例外も発生し得る一方で、このメソッドが「安全 (safe) 」と呼ばれている"
"のは、置換操作は常に、例外を送出する代わりに利用可能な文字列を返そうとするか"
"らです。別の見方をすれば、 :meth:`safe_substitute` は区切り間違いによるぶら下"
"がり (dangling delimiter) や波括弧の非対応、 Python の識別子として無効なプ"
"レースホルダ名を含むような不正なテンプレートを何も警告せずに無視するため、安"
"全とはいえないのです。"

#: ../../library/string.rst:804
msgid ""
"Returns false if the template has invalid placeholders that will cause :meth:"
"`substitute` to raise :exc:`ValueError`."
msgstr ""
":meth:`substitute` が :exc:`ValueError` を送出する原因となるような、不正なプ"
"レースホルダーをテンプレートが含む場合、偽を返します。"

#: ../../library/string.rst:812
msgid ""
"Returns a list of the valid identifiers in the template, in the order they "
"first appear, ignoring any invalid identifiers."
msgstr ""
"テンプレート内の有効な識別子のリストを、その識別子が最初に現れる順番で返しま"
"す。不正な識別子は無視されます。"

#: ../../library/string.rst:817
msgid ":class:`Template` instances also provide one public data attribute:"
msgstr ""
":class:`Template` のインスタンスは、次のような public な属性を提供しています:"

#: ../../library/string.rst:821
msgid ""
"This is the object passed to the constructor's *template* argument.  In "
"general, you shouldn't change it, but read-only access is not enforced."
msgstr ""
"コンストラクタの引数 *template* に渡されたオブジェクトです。通常、この値を変"
"更すべきではありませんが、読み出し専用アクセスを強制しているわけではありませ"
"ん。"

#: ../../library/string.rst:824
msgid "Here is an example of how to use a Template::"
msgstr "Templateの使い方の例を以下に示します::"

#: ../../library/string.rst:826
msgid ""
">>> from string import Template\n"
">>> s = Template('$who likes $what')\n"
">>> s.substitute(who='tim', what='kung pao')\n"
"'tim likes kung pao'\n"
">>> d = dict(who='tim')\n"
">>> Template('Give $who $100').substitute(d)\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Invalid placeholder in string: line 1, col 11\n"
">>> Template('$who likes $what').substitute(d)\n"
"Traceback (most recent call last):\n"
"...\n"
"KeyError: 'what'\n"
">>> Template('$who likes $what').safe_substitute(d)\n"
"'tim likes $what'"
msgstr ""
">>> from string import Template\n"
">>> s = Template('$who likes $what')\n"
">>> s.substitute(who='tim', what='kung pao')\n"
"'tim likes kung pao'\n"
">>> d = dict(who='tim')\n"
">>> Template('Give $who $100').substitute(d)\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Invalid placeholder in string: line 1, col 11\n"
">>> Template('$who likes $what').substitute(d)\n"
"Traceback (most recent call last):\n"
"...\n"
"KeyError: 'what'\n"
">>> Template('$who likes $what').safe_substitute(d)\n"
"'tim likes $what'"

#: ../../library/string.rst:842
msgid ""
"Advanced usage: you can derive subclasses of :class:`Template` to customize "
"the placeholder syntax, delimiter character, or the entire regular "
"expression used to parse template strings.  To do this, you can override "
"these class attributes:"
msgstr ""
"さらに進んだ使い方: :class:`Template` のサブクラスを派生して、プレースホルダ"
"の書式、区切り文字、テンプレート文字列の解釈に使われている正規表現全体をカス"
"タマイズできます。こうした作業には、以下のクラス属性をオーバライドします:"

#: ../../library/string.rst:847
msgid ""
"*delimiter* -- This is the literal string describing a placeholder "
"introducing delimiter.  The default value is ``$``.  Note that this should "
"*not* be a regular expression, as the implementation will call :meth:`re."
"escape` on this string as needed.  Note further that you cannot change the "
"delimiter after class creation (i.e. a different delimiter must be set in "
"the subclass's class namespace)."
msgstr ""
"*delimiter* -- プレースホルダの開始を示すリテラル文字列です。\n"
"デフォルトの値は ``$`` です。\n"
"実装系はこの文字列に対して必要に応じて :meth:`re.escape` を呼び出すので、正規"
"表現になってしまうような文字列にしては *なりません* 。\n"
"さらにクラスを作成した後に delimiter を変更できない (つまり、別の delimiter "
"を設定したいのであれば、サブクラスの名前空間で行わなければならない) ことに注"
"意してください。"

#: ../../library/string.rst:854
msgid ""
"*idpattern* -- This is the regular expression describing the pattern for non-"
"braced placeholders.  The default value is the regular expression ``(?a:[_a-"
"z][_a-z0-9]*)``.  If this is given and *braceidpattern* is ``None`` this "
"pattern will also apply to braced placeholders."
msgstr ""
"*idpattern* -- これは波括弧なしのプレースホルダーを記述する正規表現です。デ"
"フォルト値は正規表現 ``(?a:[_a-z][_a-z0-9]*)`` です。 *idpattern* が与えられ"
"ており、かつ *braceidpattern* が ``None`` の場合、このパターンは波括弧付きの"
"プレースホルダーにも適用されます。"

#: ../../library/string.rst:861
msgid ""
"Since default *flags* is ``re.IGNORECASE``, pattern ``[a-z]`` can match with "
"some non-ASCII characters. That's why we use the local ``a`` flag here."
msgstr ""
"*flags* のデフォルトは ``re.IGNORECASE`` なので、 ``[a-z]`` というパターンは"
"いくつかの非 ASCII 文字に適合できます。\n"
"そのため、ここではローカルの ``a`` フラグを使っています。"

#: ../../library/string.rst:865
msgid ""
"*braceidpattern* can be used to define separate patterns used inside and "
"outside the braces."
msgstr ""
"*braceidpattern* を使用すると、中括弧の内側と外側で使用する別々のパターンを定"
"義できます。"

#: ../../library/string.rst:869
msgid ""
"*braceidpattern* -- This is like *idpattern* but describes the pattern for "
"braced placeholders.  Defaults to ``None`` which means to fall back to "
"*idpattern* (i.e. the same pattern is used both inside and outside braces). "
"If given, this allows you to define different patterns for braced and "
"unbraced placeholders."
msgstr ""
"*braceidpattern* -- これは *idpattern* に似ていますが、波括弧付きプレースホル"
"ダーのパターンを記述します。デフォルトは ``None`` で、 *idpattern* が適用され"
"ます (すなわち、波括弧の内側と外側の両方に同じパターンが使われます) 。 "
"*braceidpattern* を使うと、波括弧付きと波括弧なしのプレースホルダーにそれぞれ"
"異なるパターンを定義することができます。"

#: ../../library/string.rst:877
msgid ""
"*flags* -- The regular expression flags that will be applied when compiling "
"the regular expression used for recognizing substitutions.  The default "
"value is ``re.IGNORECASE``.  Note that ``re.VERBOSE`` will always be added "
"to the flags, so custom *idpattern*\\ s must follow conventions for verbose "
"regular expressions."
msgstr ""
"*flags* -- 代入の認識のために使用される正規表現をコンパイルする際に適用される"
"正規表現フラグ。デフォルト値は ``re.IGNORECASE`` です。``re.VERBOSE`` が常に"
"フラグに追加されるということに注意してください。したがって、カスタムな "
"*idpattern* は verbose 正規表現の規約に従わなければなりません。"

#: ../../library/string.rst:885
msgid ""
"Alternatively, you can provide the entire regular expression pattern by "
"overriding the class attribute *pattern*.  If you do this, the value must be "
"a regular expression object with four named capturing groups.  The capturing "
"groups correspond to the rules given above, along with the invalid "
"placeholder rule:"
msgstr ""
"他にも、クラス属性 *pattern* をオーバライドして、正規表現パターン全体を指定で"
"きます。オーバライドを行う場合、 *pattern* の値は 4 つの名前つきキャプチャグ"
"ループ (capturing group) を持った正規表現オブジェクトでなければなりません。こ"
"れらのキャプチャグループは、上で説明した規則と、無効なプレースホルダに対する"
"規則に対応しています:"

#: ../../library/string.rst:891
msgid ""
"*escaped* -- This group matches the escape sequence, e.g. ``$$``, in the "
"default pattern."
msgstr ""
"*escaped* -- このグループはエスケープシーケンス、すなわちデフォルトパターンに"
"おける ``$$`` に対応します。"

#: ../../library/string.rst:894
msgid ""
"*named* -- This group matches the unbraced placeholder name; it should not "
"include the delimiter in capturing group."
msgstr ""
"*named* -- このグループは波括弧でくくらないプレースホルダ名に対応します; キャ"
"プチャグループに区切り文字を含めてはなりません。"

#: ../../library/string.rst:897
msgid ""
"*braced* -- This group matches the brace enclosed placeholder name; it "
"should not include either the delimiter or braces in the capturing group."
msgstr ""
"*braced* -- このグループは波括弧でくくったプレースホルダ名に対応します; キャ"
"プチャグループに区切り文字を含めてはなりません。"

#: ../../library/string.rst:900
msgid ""
"*invalid* -- This group matches any other delimiter pattern (usually a "
"single delimiter), and it should appear last in the regular expression."
msgstr ""
"*invalid* -- このグループはそのほかの区切り文字のパターン (通常は区切り文字一"
"つ) に対応し、正規表現の末尾に出現しなければなりません。"

#: ../../library/string.rst:903
msgid ""
"The methods on this class will raise :exc:`ValueError` if the pattern "
"matches the template without one of these named groups matching."
msgstr ""
"このクラスのメソッドは、これらの名前付きグループに1つもマッチすることなくパ"
"ターンがテンプレートにマッチした場合、 :exc:`ValueError` を送出します。"

#: ../../library/string.rst:908
msgid "Helper functions"
msgstr "ヘルパー関数"

#: ../../library/string.rst:912
msgid ""
"Split the argument into words using :meth:`str.split`, capitalize each word "
"using :meth:`str.capitalize`, and join the capitalized words using :meth:"
"`str.join`.  If the optional second argument *sep* is absent or ``None``, "
"runs of whitespace characters are replaced by a single space and leading and "
"trailing whitespace are removed, otherwise *sep* is used to split and join "
"the words."
msgstr ""
":meth:`str.split` を使って引数を単語に分割し、 :meth:`str.capitalize` を使っ"
"てそれぞれの単語の先頭の文字を大文字に変換し、 :meth:`str.join` を使ってつな"
"ぎ合わせます。オプションの第2引数 *sep* が与えられないか ``None`` の場合、こ"
"の置換処理は文字列中の連続する空白文字をスペース一つに置き換え、先頭と末尾の"
"空白を削除します、それ以外の場合には *sep* は split と join に使われます。"

#: ../../library/string.rst:195
msgid "{} (curly brackets)"
msgstr "{} (波括弧)"

#: ../../library/string.rst:195 ../../library/string.rst:335
#: ../../library/string.rst:367 ../../library/string.rst:386
#: ../../library/string.rst:395 ../../library/string.rst:409
#: ../../library/string.rst:418
msgid "in string formatting"
msgstr "文字列のフォーマットで"

#: ../../library/string.rst:195
msgid ". (dot)"
msgstr ". (ドット)"

#: ../../library/string.rst:195
msgid "[] (square brackets)"
msgstr "[] (角カッコ)"

#: ../../library/string.rst:195
msgid "! (exclamation)"
msgstr "! (エクスクラメーション)"

#: ../../library/string.rst:195
msgid ": (colon)"
msgstr ": (コロン)"

#: ../../library/string.rst:335
msgid "< (less)"
msgstr "< (小さい)"

#: ../../library/string.rst:335
msgid "> (greater)"
msgstr "> (大きい)"

#: ../../library/string.rst:335
msgid "= (equals)"
msgstr "= (等号)"

#: ../../library/string.rst:335
msgid "^ (caret)"
msgstr "^ (キャレット)"

#: ../../library/string.rst:367
msgid "+ (plus)"
msgstr "+ (プラス記号)"

#: ../../library/string.rst:367
msgid "- (minus)"
msgstr "- (負符号)"

#: ../../library/string.rst:386
msgid "z"
msgstr "z"

#: ../../library/string.rst:395
msgid "# (hash)"
msgstr "# (hash)"

#: ../../library/string.rst:409
msgid ", (comma)"
msgstr ", (カンマ)"

#: ../../library/string.rst:418
msgid "_ (underscore)"
msgstr "_ (下線)"

#: ../../library/string.rst:748
msgid "$ (dollar)"
msgstr "$ (ダラー)"

#: ../../library/string.rst:748
msgid "in template strings"
msgstr "テンプレート文字列の中で"
