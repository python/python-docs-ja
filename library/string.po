# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/string.rst:2
msgid ":mod:`string` --- Common string operations"
msgstr ":mod:`string` --- 一般的な文字列操作"

#: ../../library/string.rst:10
msgid "**Source code:** :source:`Lib/string.py`"
msgstr "**ソースコード:** :source:`Lib/string.py`"

#: ../../library/string.rst:14
msgid ""
"The :mod:`string` module contains a number of useful constants and classes, "
"as well as some deprecated legacy functions that are also available as "
"methods on strings. In addition, Python's built-in string classes support "
"the sequence type methods described in the :ref:`typesseq` section, and also "
"the string-specific methods described in the :ref:`string-methods` section. "
"To output formatted strings use template strings or the ``%`` operator "
"described in the :ref:`string-formatting` section. Also, see the :mod:`re` "
"module for string functions based on regular expressions."
msgstr ""
":mod:`string` モジュールには便利な定数やクラスが数多く入っています。また、現"
"在は文字列のメソッドとして利用できる、すでに撤廃された古い関数も入っていま"
"す。さらに、 Python の組み込み文字列クラスは :ref:`typesseq` 節に記載のシーケ"
"ンス型のメソッドと、 :ref:`string-methods` 節に記載の文字列メソッドもサポート"
"します。出力の書式指定には、テンプレート文字列、または、 :ref:`string-"
"formatting` に記載の ``%`` 演算子を使用して下さい。正規表現に関する文字列操作"
"の関数は :mod:`re` を参照してください。"

#: ../../library/string.rst:25
msgid "String constants"
msgstr "文字列定数"

#: ../../library/string.rst:27
msgid "The constants defined in this module are:"
msgstr "このモジュールで定義されている定数は以下の通りです:"

#: ../../library/string.rst:32
msgid ""
"The concatenation of the :const:`ascii_lowercase` and :const:"
"`ascii_uppercase` constants described below.  This value is not locale-"
"dependent."
msgstr ""
"後述の :const:`ascii_lowercase` と :const:`ascii_uppercase` を合わせたもの。"
"この値はロケールに依存しません。"

#: ../../library/string.rst:38
msgid ""
"The lowercase letters ``'abcdefghijklmnopqrstuvwxyz'``.  This value is not "
"locale-dependent and will not change."
msgstr ""
"小文字 ``'abcdefghijklmnopqrstuvwxyz'`` 。この値はロケールに依存せず、固定で"
"す。"

#: ../../library/string.rst:44
msgid ""
"The uppercase letters ``'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``.  This value is not "
"locale-dependent and will not change."
msgstr ""
"大文字 ``'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`` 。この値はロケールに依存せず、固定で"
"す。"

#: ../../library/string.rst:50
msgid "The string ``'0123456789'``."
msgstr "文字列 ``'0123456789'`` です。"

#: ../../library/string.rst:55
msgid "The string ``'0123456789abcdefABCDEF'``."
msgstr "文字列 ``'0123456789abcdefABCDEF'`` です。"

#: ../../library/string.rst:60
msgid ""
"The concatenation of the strings :const:`lowercase` and :const:`uppercase` "
"described below.  The specific value is locale-dependent, and will be "
"updated when :func:`locale.setlocale` is called."
msgstr ""
"後述の :const:`lowercase` と :const:`uppercase` を合わせた文字列です。具体的"
"な値はロケールに依存しており、 :func:`locale.setlocale` が呼ばれたときに更新"
"されます。"

#: ../../library/string.rst:67
msgid ""
"A string containing all the characters that are considered lowercase "
"letters. On most systems this is the string "
"``'abcdefghijklmnopqrstuvwxyz'``.  The specific value is locale-dependent, "
"and will be updated when :func:`locale.setlocale` is called."
msgstr ""
"小文字として扱われる文字全てを含む文字列です。ほとんどのシステムでは文字列 "
"``'abcdefghijklmnopqrstuvwxyz'`` です。具体的な値はロケールに依存しており、 :"
"func:`locale.setlocale` が呼ばれたときに更新されます。"

#: ../../library/string.rst:75
msgid "The string ``'01234567'``."
msgstr "文字列 ``'01234567'`` です。"

#: ../../library/string.rst:80
msgid ""
"String of ASCII characters which are considered punctuation characters in "
"the ``C`` locale."
msgstr "``C`` ロケールにおいて、句読点として扱われる ASCII 文字の文字列です。"

#: ../../library/string.rst:86
msgid ""
"String of characters which are considered printable.  This is a combination "
"of :const:`digits`, :const:`letters`, :const:`punctuation`, and :const:"
"`whitespace`."
msgstr ""
"印刷可能な文字で構成される文字列です。 :const:`digits`, :const:`letters`, :"
"const:`punctuation` および :const:`whitespace` を組み合わせたものです。"

#: ../../library/string.rst:93
msgid ""
"A string containing all the characters that are considered uppercase "
"letters. On most systems this is the string "
"``'ABCDEFGHIJKLMNOPQRSTUVWXYZ'``.  The specific value is locale-dependent, "
"and will be updated when :func:`locale.setlocale` is called."
msgstr ""
"大文字として扱われる文字全てを含む文字列です。ほとんどのシステムでは "
"``'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`` です。具体的な値はロケールに依存しており、 :"
"func:`locale.setlocale` が呼ばれたときに更新されます。"

#: ../../library/string.rst:101
msgid ""
"A string containing all characters that are considered whitespace. On most "
"systems this includes the characters space, tab, linefeed, return, formfeed, "
"and vertical tab."
msgstr ""
"空白 (whitespace) として扱われる文字全てを含む文字列です。ほとんどのシステム"
"では、これはスペース (space)、タブ (tab)、改行 (linefeed)、復帰 (return)、改"
"頁 (formfeed)、垂直タブ (vertical tab) です。"

#: ../../library/string.rst:109
msgid "Custom String Formatting"
msgstr "カスタムの文字列書式化"

#: ../../library/string.rst:113
msgid ""
"The built-in str and unicode classes provide the ability to do complex "
"variable substitutions and value formatting via the :meth:`str.format` "
"method described in :pep:`3101`.  The :class:`Formatter` class in the :mod:"
"`string` module allows you to create and customize your own string "
"formatting behaviors using the same implementation as the built-in :meth:"
"`~str.format` method."
msgstr ""
"組み込みの str 、および、 unicode クラスは、 :pep:`3101` に記載される :meth:"
"`str.format` メソッドによる、複雑な変数置換と値の書式指定を提供します。 :mod:"
"`string` モジュールの :class:`Formatter` クラスは組み込みの :meth:`~str."
"format` メソッドと同じ実装で、文字列の書式指定の作成とカスタマイズを可能にし"
"ます。"

#: ../../library/string.rst:122
msgid "The :class:`Formatter` class has the following public methods:"
msgstr ":class:`Formatter` クラスは、以下のメソッドを持ちます:"

#: ../../library/string.rst:126
msgid ""
"The primary API method.  It takes a format string and an arbitrary set of "
"positional and keyword arguments. It is just a wrapper that calls :meth:"
"`vformat`."
msgstr ""
"主要な API メソッドです。書式化文字列と、任意の位置引数およびキーワード引数の"
"セットを取ります。これは、:meth:`vformat` を呼び出す単なるラッパーです。"

#: ../../library/string.rst:132
msgid ""
"This function does the actual work of formatting.  It is exposed as a "
"separate function for cases where you want to pass in a predefined "
"dictionary of arguments, rather than unpacking and repacking the dictionary "
"as individual arguments using the ``*args`` and ``**kwargs`` syntax.  :meth:"
"`vformat` does the work of breaking up the format string into character data "
"and replacement fields.  It calls the various methods described below."
msgstr ""
"この関数はフォーマットの実際の仕事をします。この関数は、 ``*args`` および "
"``**kwargs`` シンタックスを使用して、辞書を個々の引数として unpack してから再"
"度 pack するのではなく、引数としてあらかじめ用意した辞書を渡したい場合のため"
"に、独立した関数として公開されます。 :meth:`vformat` は、書式文字列を文字デー"
"タと置換フィールドに分解する仕事をします。それは、以下に記述する様々なメソッ"
"ドを呼び出します。"

#: ../../library/string.rst:140
msgid ""
"In addition, the :class:`Formatter` defines a number of methods that are "
"intended to be replaced by subclasses:"
msgstr ""
"付け加えると、 :class:`Formatter` はサブクラスで置き換えるためのいくつかのメ"
"ソッドを定義します:"

#: ../../library/string.rst:145
msgid ""
"Loop over the format_string and return an iterable of tuples "
"(*literal_text*, *field_name*, *format_spec*, *conversion*).  This is used "
"by :meth:`vformat` to break the string into either literal text, or "
"replacement fields."
msgstr ""
"format_stringを探査し、タプル、 (*literal_text*, *field_name*, "
"*format_spec*, *conversion*) のイテラブルを返します。これは :meth:`vformat` "
"が文字列を文字としての文字データや置換フィールドに展開するために使用されま"
"す。"

#: ../../library/string.rst:150
msgid ""
"The values in the tuple conceptually represent a span of literal text "
"followed by a single replacement field.  If there is no literal text (which "
"can happen if two replacement fields occur consecutively), then "
"*literal_text* will be a zero-length string.  If there is no replacement "
"field, then the values of *field_name*, *format_spec* and *conversion* will "
"be ``None``."
msgstr ""
"タプルの値は、概念的に文字としての文字データと、それに続く単一の置換フィール"
"ドを表現します。文字としての文字データが無い場合は (ふたつの置換フィールドが"
"連続した場合などに起き得ます) 、 *literal_text* は長さが 0 の文字列となりま"
"す。置換フィールドが無い場合は、 *field_name*, *format_spec* および "
"*conversion* が ``None`` となります。"

#: ../../library/string.rst:159
msgid ""
"Given *field_name* as returned by :meth:`parse` (see above), convert it to "
"an object to be formatted.  Returns a tuple (obj, used_key).  The default "
"version takes strings of the form defined in :pep:`3101`, such as "
"\"0[name]\" or \"label.title\".  *args* and *kwargs* are as passed in to :"
"meth:`vformat`.  The return value *used_key* has the same meaning as the "
"*key* parameter to :meth:`get_value`."
msgstr ""
"引数として与えた :meth:`parse` (上記参照) により返される *field_name* を書式"
"指定対象オブジェクトに変換します。返り値はタプル、 (obj, used_key) です。デ"
"フォルトでは :pep:`3101` に規定される \"0[name]\" や \"label.title\" のような"
"形式の文字列を引数としてとります。 *args* と *kwargs* は :meth:`vformat` に渡"
"されます。返り値 *used_key* は、 :meth:`get_value` の *key* 引数と同じ意味を"
"持ちます。"

#: ../../library/string.rst:168
msgid ""
"Retrieve a given field value.  The *key* argument will be either an integer "
"or a string.  If it is an integer, it represents the index of the positional "
"argument in *args*; if it is a string, then it represents a named argument "
"in *kwargs*."
msgstr ""
"与えられたフィールドの値を取り出します。 *key* 引数は整数でも文字列でも構いま"
"せん。整数の場合は、ポジション引数 *args* のインデックス番号を示します。文字"
"列の場合は、名前付きの引数 *kwargs* を意味します。"

#: ../../library/string.rst:173
msgid ""
"The *args* parameter is set to the list of positional arguments to :meth:"
"`vformat`, and the *kwargs* parameter is set to the dictionary of keyword "
"arguments."
msgstr ""
"*args* 引数は、 :meth:`vformat` へのポジション引数のリストに設定され、 "
"*kwargs* 引数は、キーワード引数の辞書に設定されます。"

#: ../../library/string.rst:177
msgid ""
"For compound field names, these functions are only called for the first "
"component of the field name; Subsequent components are handled through "
"normal attribute and indexing operations."
msgstr ""
"複合したフィールド名に対しては、これらの関数はフィールド名の最初の要素に対し"
"てのみ呼び出されます ; あとに続く要素は通常の属性、および、インデックス処理へ"
"と渡されます。"

#: ../../library/string.rst:181
msgid ""
"So for example, the field expression '0.name' would cause :meth:`get_value` "
"to be called with a *key* argument of 0.  The ``name`` attribute will be "
"looked up after :meth:`get_value` returns by calling the built-in :func:"
"`getattr` function."
msgstr ""
"つまり、例えば、フィールドが '0.name' と表現されるとき、 :meth:`get_value` "
"は、 *key* 引数が 0 として呼び出されます。属性 ``name`` は、組み込みの :func:"
"`getattr` 関数が呼び出され、 :meth:`get_value` が返されたのちに検索されます。"

#: ../../library/string.rst:186
msgid ""
"If the index or keyword refers to an item that does not exist, then an :exc:"
"`IndexError` or :exc:`KeyError` should be raised."
msgstr ""
"もし、インデックス、もしくは、キーワードが存在しないアイテムを参照したら、 :"
"exc:`IndexError` 、もしくは、 :exc:`KeyError` が送出されます。"

#: ../../library/string.rst:191
msgid ""
"Implement checking for unused arguments if desired.  The arguments to this "
"function is the set of all argument keys that were actually referred to in "
"the format string (integers for positional arguments, and strings for named "
"arguments), and a reference to the *args* and *kwargs* that was passed to "
"vformat.  The set of unused args can be calculated from these parameters.  :"
"meth:`check_unused_args` is assumed to raise an exception if the check fails."
msgstr ""
"希望に応じ、未使用の引数がないか確認する機能を実装します。この関数への引数"
"は、書式指定文字列で参照される全てのキー引数の set 、 (ポジション引数への整"
"数、名前付き引数への文字列) 、そして vformat に渡される *args* と *kwargs* へ"
"の参照です。使用されない引数の set は、それらのパラメータから計算されます。 :"
"meth:`check_unused_args` は、確認の結果が偽であると、例外を送出するものとみな"
"されます。"

#: ../../library/string.rst:201
msgid ""
":meth:`format_field` simply calls the global :func:`format` built-in.  The "
"method is provided so that subclasses can override it."
msgstr ""
":meth:`format_field` は単純に組み込みのグローバル関数 :func:`format` を呼び出"
"します。このメソッドは、サブクラスをオーバーライドするために提供されます。"

#: ../../library/string.rst:206
msgid ""
"Converts the value (returned by :meth:`get_field`) given a conversion type "
"(as in the tuple returned by the :meth:`parse` method).  The default version "
"understands 's' (str), 'r' (repr) and 'a' (ascii) conversion types."
msgstr ""
"(:meth:`get_field` が返す) 値を (:meth:`parse` メソッドが返すタプルの形式で) "
"与えられた変換タイプとして変換します。デフォルトバージョンは 's' (str), "
"'r' (repr), 'a' (ascii) 変換タイプを理解します。"

#: ../../library/string.rst:215
msgid "Format String Syntax"
msgstr "書式指定文字列の文法"

#: ../../library/string.rst:217
msgid ""
"The :meth:`str.format` method and the :class:`Formatter` class share the "
"same syntax for format strings (although in the case of :class:`Formatter`, "
"subclasses can define their own format string syntax)."
msgstr ""
":meth:`str.format` メソッドと、 :class:`Formatter` クラスは、文字列の書式指定"
"に同じ文法を共有します (しかしながら、 :class:`Formatter` サブクラスの場合、"
"それ自身の書式指定文法を定義することが可能です) 。"

#: ../../library/string.rst:221
msgid ""
"Format strings contain \"replacement fields\" surrounded by curly braces ``{}"
"``. Anything that is not contained in braces is considered literal text, "
"which is copied unchanged to the output.  If you need to include a brace "
"character in the literal text, it can be escaped by doubling: ``{{`` and ``}}"
"``."
msgstr ""
"書式指定文字列は波括弧 ``{}`` に囲まれた \"置換フィールド\" を含みます。波括"
"弧に囲まれた部分以外は全て単純な文字として扱われ、変更を加えることなく出力へ"
"コピーされます。波括弧を文字として扱う必要がある場合は、二重にすることでエス"
"ケープすることができます: ``{{`` および ``}}`` 。"

#: ../../library/string.rst:226
msgid "The grammar for a replacement field is as follows:"
msgstr "置換フィールドの文法は以下です:"

#: ../../library/string.rst:238
msgid ""
"In less formal terms, the replacement field can start with a *field_name* "
"that specifies the object whose value is to be formatted and inserted into "
"the output instead of the replacement field. The *field_name* is optionally "
"followed by a  *conversion* field, which is preceded by an exclamation point "
"``'!'``, and a *format_spec*, which is preceded by a colon ``':'``.  These "
"specify a non-default format for the replacement value."
msgstr ""
"もっと簡単にいうと、置換フィールドは *field_name* で始められます。これによっ"
"て指定したオブジェクトの値が、置換フィールドの代わりに書式化され出力に挿入さ"
"れます。*field_name* の後に、感嘆符 ``'!'`` を挟んで *conversion* フィールド"
"を続けることができます。最後にコロン ``':'`` を挟んで、 *format_spec* を書く"
"ことができます。これは、置換される値の非デフォルトの書式を指定します。"

#: ../../library/string.rst:245
msgid "See also the :ref:`formatspec` section."
msgstr ":ref:`formatspec` 節も参照して下さい。"

#: ../../library/string.rst:247
msgid ""
"The *field_name* itself begins with an *arg_name* that is either a number or "
"a keyword.  If it's a number, it refers to a positional argument, and if "
"it's a keyword, it refers to a named keyword argument.  If the numerical "
"arg_names in a format string are 0, 1, 2, ... in sequence, they can all be "
"omitted (not just some) and the numbers 0, 1, 2, ... will be automatically "
"inserted in that order. Because *arg_name* is not quote-delimited, it is not "
"possible to specify arbitrary dictionary keys (e.g., the strings ``'10'`` or "
"``':-]'``) within a format string. The *arg_name* can be followed by any "
"number of index or attribute expressions. An expression of the form ``'."
"name'`` selects the named attribute using :func:`getattr`, while an "
"expression of the form ``'[index]'`` does an index lookup using :func:"
"`__getitem__`."
msgstr ""
"*field_name* それ自身は、数かキーワードのいずれかである *arg_name* から始まり"
"ます。それが数である場合、位置引数を参照します。また、それがキーワードである"
"場合、指定されたキーワード引数を参照します。書式化文字列中で数の arg_names が"
"順に 0, 1, 2, ... である場合、それらはすべて (いくつかではありません) 省略す"
"ることができます。そして数 0, 1, 2, ... は、自動的にその順で挿入されます。 "
"*arg_name* は引用符で区切られていないので、書式化文字列内の任意の辞書キー (例"
"えば文字列 ``'10'`` や ``':-]'`` など) を指定することはできません。 "
"*arg_name* の後に任意の数のインデックス式または属性式を続けることができま"
"す。 ``'.name'`` 形式の式は :func:`getattr` を使用して指定された属性を選択し"
"ます。一方、 ``'[index]'`` 形式の式は :func:`__getitem__` を使用してインデッ"
"クス参照を行います。"

#: ../../library/string.rst:259
msgid ""
"The positional argument specifiers can be omitted for :meth:`str.format` "
"and :meth:`unicode.format`, so ``'{} {}'`` is equivalent to ``'{0} {1}'``, "
"``u'{} {}'`` is equivalent to ``u'{0} {1}'``."
msgstr ""

#: ../../library/string.rst:264
msgid "Some simple format string examples::"
msgstr "簡単な書式指定文字列の例を挙げます::"

#: ../../library/string.rst:273
msgid ""
"The *conversion* field causes a type coercion before formatting.  Normally, "
"the job of formatting a value is done by the :meth:`__format__` method of "
"the value itself.  However, in some cases it is desirable to force a type to "
"be formatted as a string, overriding its own definition of formatting.  By "
"converting the value to a string before calling :meth:`__format__`, the "
"normal formatting logic is bypassed."
msgstr ""
"*置換 (conversion)* フィールドにより書式変換前に型の強制変換が実施されます。"
"通常、値の書式変換は :meth:`__format__` によって実施されます。しかしながら、"
"場合によっては、文字列として変換することを強制したり、書式指定の定義をオー"
"バーライドしたくなることもあります。 :meth:`__format__` の呼び出し前に値を文"
"字列に変換すると、通常の書式変換の処理は飛ばされます。"

#: ../../library/string.rst:280
msgid ""
"Two conversion flags are currently supported: ``'!s'`` which calls :func:"
"`str` on the value, and ``'!r'`` which calls :func:`repr`."
msgstr ""
"現時点では、二種類の変換フラグがサポートされています: 値に対して :func:`str` "
"を呼び出す ``'!s'`` と、 :func:`repr` を呼び出す ``'!r'`` です。"

#: ../../library/string.rst:283
msgid "Some examples::"
msgstr "いくつかの例です::"

#: ../../library/string.rst:288
msgid ""
"The *format_spec* field contains a specification of how the value should be "
"presented, including such details as field width, alignment, padding, "
"decimal precision and so on.  Each value type can define its own "
"\"formatting mini-language\" or interpretation of the *format_spec*."
msgstr ""
"*format_spec* フィールドは、フィールド幅、文字揃え、埋め方、精度などの、値を"
"表現する仕様を含みます。それぞれの値の型は、 \"formatting mini-language\" 、"
"または、 *format_spec* の実装で定義されます。"

#: ../../library/string.rst:293
msgid ""
"Most built-in types support a common formatting mini-language, which is "
"described in the next section."
msgstr ""
"ほとんどの組み込み型は、共通の次のセクションに記載の formatting mini-"
"language をサポートします。"

#: ../../library/string.rst:296
msgid ""
"A *format_spec* field can also include nested replacement fields within it. "
"These nested replacement fields may contain a field name, conversion flag "
"and format specification, but deeper nesting is not allowed.  The "
"replacement fields within the format_spec are substituted before the "
"*format_spec* string is interpreted. This allows the formatting of a value "
"to be dynamically specified."
msgstr ""
"*format_spec* フィールド内には入れ子になった置換フィールドを含めることもでき"
"ます。入れ子になった置換フィールドにはフィールド名、変換フラグ、書式指定を含"
"めることができますが、さらに入れ子の階層を含めることはできません。 "
"format_spec 中の置換フィールドは *format_spec* 文字列が解釈される前に置き換え"
"られます。これにより、値の書式を動的に指定することができます。"

#: ../../library/string.rst:303
msgid "See the :ref:`formatexamples` section for some examples."
msgstr ":ref:`formatexamples` のいくつかの例も参照して下さい。"

#: ../../library/string.rst:309
msgid "Format Specification Mini-Language"
msgstr "書式指定ミニ言語仕様"

#: ../../library/string.rst:311
msgid ""
"\"Format specifications\" are used within replacement fields contained "
"within a format string to define how individual values are presented (see :"
"ref:`formatstrings`).  They can also be passed directly to the built-in :"
"func:`format` function.  Each formattable type may define how the format "
"specification is to be interpreted."
msgstr ""
"書式指定 (\"Format specifications\") は書式指定文字列の個々の値を表現する方法"
"を指定するための、置換フィールドで使用されます (:ref:`formatstrings` を参照下"
"さい) 。それらは、組み込み関数の :func:`format` 関数に直接渡されます。それぞ"
"れの書式指定可能な型について、書式指定がどのように解釈されるかが規定されま"
"す。"

#: ../../library/string.rst:317
msgid ""
"Most built-in types implement the following options for format "
"specifications, although some of the formatting options are only supported "
"by the numeric types."
msgstr ""
"多くの組み込み型は、書式指定に関して以下のオプションを実装します。しかしなが"
"ら、いくつかの書式指定オプションは数値型でのみサポートされます。"

#: ../../library/string.rst:320
msgid ""
"A general convention is that an empty format string (``\"\"``) produces the "
"same result as if you had called :func:`str` on the value. A non-empty "
"format string typically modifies the result."
msgstr ""
"一般的な取り決めとして、空の書式指定文字列 (``\"\"``) は、値に対して :func:"
"`str` を呼び出したときと同じ結果を与えます。通常、空でない書式指定文字列はそ"
"の結果を変更します。"

#: ../../library/string.rst:324
msgid "The general form of a *standard format specifier* is:"
msgstr "一般的な書式指定子 (*standard format specifier*) の書式は以下です:"

#: ../../library/string.rst:335
msgid ""
"If a valid *align* value is specified, it can be preceded by a *fill* "
"character that can be any character and defaults to a space if omitted. It "
"is not possible to use a literal curly brace (\"``{``\" or \"``}``\") as the "
"*fill* character when using the :meth:`str.format` method.  However, it is "
"possible to insert a curly brace with a nested replacement field.  This "
"limitation doesn't affect the :func:`format` function."
msgstr ""
"有効な *align* 値を指定する場合、その前に *fill* 文字を付けることができます。"
"この文字には任意の文字を指定でき、省略された場合はデフォルトの空白文字となり"
"ます。:meth:`str.format` メソッドを使う場合はリテラルの波括弧 (\"``{``\" と "
"\"``}``\") を *fill* 文字として使えないことに注意してください。ただし、波括弧"
"を入れ子になった置換フィールド内に挿入することはできます。この制限は :func:"
"`format` 関数には影響しません。"

#: ../../library/string.rst:343
msgid "The meaning of the various alignment options is as follows:"
msgstr "様々な align オプションの意味は以下のとおりです:"

#: ../../library/string.rst:346 ../../library/string.rst:372
msgid "Option"
msgstr "オプション"

#: ../../library/string.rst:346 ../../library/string.rst:372
#: ../../library/string.rst:415 ../../library/string.rst:426
#: ../../library/string.rst:458
msgid "Meaning"
msgstr "意味"

#: ../../library/string.rst:348
msgid "``'<'``"
msgstr "``'<'``"

#: ../../library/string.rst:348
msgid ""
"Forces the field to be left-aligned within the available space (this is the "
"default for most objects)."
msgstr ""
"利用可能なスペースにおいて、左詰めを強制します (ほとんどのオブジェクトにおい"
"てのデフォルト)。"

#: ../../library/string.rst:351
msgid "``'>'``"
msgstr "``'>'``"

#: ../../library/string.rst:351
msgid ""
"Forces the field to be right-aligned within the available space (this is the "
"default for numbers)."
msgstr ""
"利用可能なスペースにおいて、右詰めを強制します (いくつかのオブジェクトにおい"
"てのデフォルト)。"

#: ../../library/string.rst:354
msgid "``'='``"
msgstr "``'='``"

#: ../../library/string.rst:354
msgid ""
"Forces the padding to be placed after the sign (if any) but before the "
"digits.  This is used for printing fields in the form '+000000120'. This "
"alignment option is only valid for numeric types.  It becomes the default "
"when '0' immediately precedes the field width."
msgstr ""
"符号 (があれば) の後ろを埋めます。 '+000000120' のような形で表示されます。こ"
"のオプションは数値型に対してのみ有効です。フィールド幅の直前が '0' の時はこれ"
"がデフォルトになります。"

#: ../../library/string.rst:360
msgid "``'^'``"
msgstr "``'^'``"

#: ../../library/string.rst:360
msgid "Forces the field to be centered within the available space."
msgstr "利用可能なスペースにおいて、中央寄せを強制します。"

#: ../../library/string.rst:364
msgid ""
"Note that unless a minimum field width is defined, the field width will "
"always be the same size as the data to fill it, so that the alignment option "
"has no meaning in this case."
msgstr ""
"最小のフィールド幅が定義されない限り、フィールド幅はデータを表示するために必"
"要な幅と同じになることに注意して下さい。そのため、その場合には、 align オプ"
"ションは意味を持ちません。"

#: ../../library/string.rst:368
msgid ""
"The *sign* option is only valid for number types, and can be one of the "
"following:"
msgstr ""
"*sign* オプションは数値型に対してのみ有効であり、以下のうちのひとつとなりま"
"す:"

#: ../../library/string.rst:374
msgid "``'+'``"
msgstr "``'+'``"

#: ../../library/string.rst:374
msgid ""
"indicates that a sign should be used for both positive as well as negative "
"numbers."
msgstr "符号の使用を、正数、負数の両方に対して指定します。"

#: ../../library/string.rst:377
msgid "``'-'``"
msgstr "``'-'``"

#: ../../library/string.rst:377
msgid ""
"indicates that a sign should be used only for negative numbers (this is the "
"default behavior)."
msgstr "符号の使用を、負数に対してのみ指定します (デフォルトの挙動です)。"

#: ../../library/string.rst:380
msgid "space"
msgstr "空白"

#: ../../library/string.rst:380
msgid ""
"indicates that a leading space should be used on positive numbers, and a "
"minus sign on negative numbers."
msgstr "空白を正数の前に付け、負号を負数の前に使用することを指定します。"

#: ../../library/string.rst:384
msgid ""
"The ``'#'`` option is only valid for integers, and only for binary, octal, "
"or hexadecimal output.  If present, it specifies that the output will be "
"prefixed by ``'0b'``, ``'0o'``, or ``'0x'``, respectively."
msgstr ""
"``'#'`` オプションは、整数、かつ、2進数、8進数、16進数の出力に対してのみ有効"
"です。指定されれば、出力は、 ``'0b'``, ``'0o'``, もしくは ``'0x'``, のプリ"
"フィックスが付与されます。"

#: ../../library/string.rst:388
msgid ""
"The ``','`` option signals the use of a comma for a thousands separator. For "
"a locale aware separator, use the ``'n'`` integer presentation type instead."
msgstr ""
"``','`` オプションは、千の位のセパレータにカンマを使うことを合図します。ロ"
"ケール依存のセパレータには、代わりに ``'n'`` の整数表現形式を使ってください。"

#: ../../library/string.rst:392
msgid "Added the ``','`` option (see also :pep:`378`)."
msgstr "``','`` オプションが追加されました (:pep:`378` も参照)。"

#: ../../library/string.rst:395
msgid ""
"*width* is a decimal integer defining the minimum field width.  If not "
"specified, then the field width will be determined by the content."
msgstr ""
"*width* は10進数の整数で、最小のフィールド幅を規程します。もし指定されなけれ"
"ば、フィールド幅は内容により規程されます。"

#: ../../library/string.rst:398
msgid ""
"When no explicit alignment is given, preceding the *width* field by a zero "
"(``'0'``) character enables sign-aware zero-padding for numeric types.  This "
"is equivalent to a *fill* character of ``'0'`` with an *alignment* type of "
"``'='``."
msgstr ""
"alignment が明示的に与えられない場合、 *width* フィールドにゼロ (``'0'``) 文"
"字を前置することは、数値型のための符号を意識した 0 パディングを可能にします。"
"これは *fill* 文字に ``'0'`` を指定して、 *alignment* タイプに ``'='`` を指定"
"したことと等価です。"

#: ../../library/string.rst:403
msgid ""
"The *precision* is a decimal number indicating how many digits should be "
"displayed after the decimal point for a floating point value formatted with "
"``'f'`` and ``'F'``, or before and after the decimal point for a floating "
"point value formatted with ``'g'`` or ``'G'``.  For non-number types the "
"field indicates the maximum field size - in other words, how many characters "
"will be used from the field content. The *precision* is not allowed for "
"integer values."
msgstr ""
"*precision* は10進数で、 ``'f'`` および ``'F'`` 、あるいは、 ``'g'`` および "
"``'G'`` で指定される浮動小数点数の、小数点以下に続く桁数を指定します。非数型"
"に対しては、最大フィールド幅を規程します。言い換えると、フィールドの内容か"
"ら、何文字使用するかを規程します。 *precision* は整数型に対しては、許されませ"
"ん。"

#: ../../library/string.rst:410
msgid "Finally, the *type* determines how the data should be presented."
msgstr "最後に、 *type* は、データがどのように表現されるかを規程します。"

#: ../../library/string.rst:412
msgid "The available string presentation types are:"
msgstr "利用可能な文字列の表現型は以下です:"

#: ../../library/string.rst:415 ../../library/string.rst:426
#: ../../library/string.rst:458
msgid "Type"
msgstr "型"

#: ../../library/string.rst:417
msgid "``'s'``"
msgstr "``'s'``"

#: ../../library/string.rst:417
msgid "String format. This is the default type for strings and may be omitted."
msgstr "文字列。これがデフォルトの値で、多くの場合省略されます。"

#: ../../library/string.rst:420 ../../library/string.rst:447
#: ../../library/string.rst:507
msgid "None"
msgstr "None"

#: ../../library/string.rst:420
msgid "The same as ``'s'``."
msgstr "``'s'`` と同じです。"

#: ../../library/string.rst:423
msgid "The available integer presentation types are:"
msgstr "利用可能な整数の表現型は以下です:"

#: ../../library/string.rst:428
msgid "``'b'``"
msgstr "``'b'``"

#: ../../library/string.rst:428
msgid "Binary format. Outputs the number in base 2."
msgstr "2進数。出力される数値は2を基数とします。"

#: ../../library/string.rst:430
msgid "``'c'``"
msgstr "``'c'``"

#: ../../library/string.rst:430
msgid ""
"Character. Converts the integer to the corresponding unicode character "
"before printing."
msgstr "文字。数値を対応する Unicode 文字に変換します。"

#: ../../library/string.rst:433
msgid "``'d'``"
msgstr "``'d'``"

#: ../../library/string.rst:433
msgid "Decimal Integer. Outputs the number in base 10."
msgstr "10進数。出力される数値は10を基数とします。"

#: ../../library/string.rst:435
msgid "``'o'``"
msgstr "``'o'``"

#: ../../library/string.rst:435
msgid "Octal format. Outputs the number in base 8."
msgstr "8進数。出力される数値は8を基数とします。"

#: ../../library/string.rst:437
msgid "``'x'``"
msgstr "``'x'``"

#: ../../library/string.rst:437
msgid ""
"Hex format. Outputs the number in base 16, using lower- case letters for the "
"digits above 9."
msgstr ""
"16進数。出力される数値は16を基数とします。 10進で9を越える数字には小文字が使"
"われます。"

#: ../../library/string.rst:440
msgid "``'X'``"
msgstr "``'X'``"

#: ../../library/string.rst:440
msgid ""
"Hex format. Outputs the number in base 16, using upper- case letters for the "
"digits above 9."
msgstr ""
"16進数。出力される数値は16を基数とします。 10進で9を越える数字には大文字が使"
"われます。"

#: ../../library/string.rst:443 ../../library/string.rst:500
msgid "``'n'``"
msgstr "``'n'``"

#: ../../library/string.rst:443
msgid ""
"Number. This is the same as ``'d'``, except that it uses the current locale "
"setting to insert the appropriate number separator characters."
msgstr ""
"数値。現在のロケールに従い、区切り文字を挿入することを除けば、 ``'d'`` と同じ"
"です。"

#: ../../library/string.rst:447
msgid "The same as ``'d'``."
msgstr "``'d'`` と同じです。"

#: ../../library/string.rst:450
msgid ""
"In addition to the above presentation types, integers can be formatted with "
"the floating point presentation types listed below (except ``'n'`` and "
"``None``). When doing so, :func:`float` is used to convert the integer to a "
"floating point number before formatting."
msgstr ""
"これらの表現型に加えて、整数は (``'n'`` と ``None`` を除く) 以下の浮動小数点"
"型の表現型で書式指定できます。\n"
"そうすることで整数は書式変換される前に :func:`float` を使って浮動小数点数に変"
"換されます。"

#: ../../library/string.rst:455
msgid ""
"The available presentation types for floating point and decimal values are:"
msgstr "利用可能な浮動小数点数と10進数の表現型は以下です:"

#: ../../library/string.rst:460
msgid "``'e'``"
msgstr "``'e'``"

#: ../../library/string.rst:460
msgid ""
"Exponent notation. Prints the number in scientific notation using the letter "
"'e' to indicate the exponent. The default precision is ``6``."
msgstr ""
"指数表記です。指数を示す 'e' を使って数値を表示します。デフォルトの精度は "
"``6`` です。"

#: ../../library/string.rst:464
msgid "``'E'``"
msgstr "``'E'``"

#: ../../library/string.rst:464
msgid ""
"Exponent notation. Same as ``'e'`` except it uses an upper case 'E' as the "
"separator character."
msgstr "指数表記です。大文字の 'E' を使うことを除いては、 ``'e'`` と同じです。"

#: ../../library/string.rst:467
msgid "``'f'``"
msgstr "``'f'``"

#: ../../library/string.rst:467
msgid ""
"Fixed-point notation. Displays the number as a fixed-point number.  The "
"default precision is ``6``."
msgstr ""
"固定小数点数表記です。数値を固定小数点数として表示します。デフォルトの精度は "
"``6`` です。"

#: ../../library/string.rst:470
msgid "``'F'``"
msgstr "``'F'``"

#: ../../library/string.rst:470
msgid "Fixed point notation. Same as ``'f'``."
msgstr ""

#: ../../library/string.rst:472
msgid "``'g'``"
msgstr "``'g'``"

#: ../../library/string.rst:472
msgid ""
"General format.  For a given precision ``p >= 1``, this rounds the number to "
"``p`` significant digits and then formats the result in either fixed-point "
"format or in scientific notation, depending on its magnitude."
msgstr ""
"汎用フォーマットです。精度を ``p >= 1`` の数値で与えた場合、数値を有効桁 "
"``p`` で丸め、桁に応じて固定小数点か指数表記で表示します。"

#: ../../library/string.rst:477
msgid ""
"The precise rules are as follows: suppose that the result formatted with "
"presentation type ``'e'`` and precision ``p-1`` would have exponent "
"``exp``.  Then if ``-4 <= exp < p``, the number is formatted with "
"presentation type ``'f'`` and precision ``p-1-exp``.  Otherwise, the number "
"is formatted with presentation type ``'e'`` and precision ``p-1``. In both "
"cases insignificant trailing zeros are removed from the significand, and the "
"decimal point is also removed if there are no remaining digits following it."
msgstr ""
"精度のルールは以下のように決まっています: 書式指定の結果が ``'e'`` 型で "
"``p-1`` の精度の場合、指数は ``exp`` になると仮定します。そうすると、 ``-4 "
"<= exp < p`` のとき数値は表現型 ``'f'`` で精度 ``p-1-exp`` に書式変換されま"
"す。それ以外の場合、数値は ``'e'`` 型で精度 ``p-1`` に書式指定されます。この"
"両方の場合で重要でない、連続した 0 は取り除かれます, そして残った桁が無い場合"
"小数点は取り除かれます。"

#: ../../library/string.rst:488
msgid ""
"Positive and negative infinity, positive and negative zero, and nans, are "
"formatted as ``inf``, ``-inf``, ``0``, ``-0`` and ``nan`` respectively, "
"regardless of the precision."
msgstr ""
"正と負の無限大と 0 および NaN は精度に関係なくそれぞれ ``inf``, ``-inf``, "
"``0``, ``-0`` および ``nan`` となります。"

#: ../../library/string.rst:493
msgid ""
"A precision of ``0`` is treated as equivalent to a precision of ``1``.  The "
"default precision is ``6``."
msgstr ""
"``0`` の精度は ``1`` の精度と同等に扱われます。デフォルトの精度は ``6`` で"
"す。"

#: ../../library/string.rst:496
msgid "``'G'``"
msgstr "``'G'``"

#: ../../library/string.rst:496
msgid ""
"General format. Same as ``'g'`` except switches to ``'E'`` if the number "
"gets too large. The representations of infinity and NaN are uppercased, too."
msgstr ""
"汎用フォーマットです。数値が大きくなったとき、 ``'E'`` に切り替わることを除"
"き、 ``'g'`` と同じです。無限大と NaN の表示も大文字になります。"

#: ../../library/string.rst:500
msgid ""
"Number. This is the same as ``'g'``, except that it uses the current locale "
"setting to insert the appropriate number separator characters."
msgstr ""
"数値です。現在のロケールに合わせて、数値分割文字が挿入されることを除き、 "
"``'g'`` と同じです。"

#: ../../library/string.rst:504
msgid "``'%'``"
msgstr "``'%'``"

#: ../../library/string.rst:504
msgid ""
"Percentage. Multiplies the number by 100 and displays in fixed (``'f'``) "
"format, followed by a percent sign."
msgstr ""
"パーセンテージです。数値は 100 倍され、固定小数点数フォーマット (``'f'``) で"
"パーセント記号付きで表示されます。"

#: ../../library/string.rst:507
msgid "The same as ``'g'``."
msgstr "``'g'`` と同じです。"

#: ../../library/string.rst:515
msgid "Format examples"
msgstr "書式指定例"

#: ../../library/string.rst:517
msgid ""
"This section contains examples of the :meth:`str.format` syntax and "
"comparison with the old ``%``-formatting."
msgstr ""
"この節では、 :meth:`str.format` 構文の例を紹介し、さらに従来の ``%``-書式と比"
"較します。"

#: ../../library/string.rst:520
msgid ""
"In most of the cases the syntax is similar to the old ``%``-formatting, with "
"the addition of the ``{}`` and with ``:`` used instead of ``%``. For "
"example, ``'%03.2f'`` can be translated to ``'{:03.2f}'``."
msgstr ""
"多くの場合、``{}`` を加え ``%`` の代わりに ``:`` を使うことで新構文は古い "
"``%``-書式に類似した書式になります。例えば、 ``'%03.2f'`` は ``'{:03.2f}'`` "
"に翻訳できます。"

#: ../../library/string.rst:524
msgid ""
"The new format syntax also supports new and different options, shown in the "
"following examples."
msgstr ""
"以下の例で示すように、新構文はさらに新たに様々なオプションもサポートしていま"
"す。"

#: ../../library/string.rst:527
msgid "Accessing arguments by position::"
msgstr "位置引数を使ったアクセス::"

#: ../../library/string.rst:540
msgid "Accessing arguments by name::"
msgstr "名前を使ったアクセス::"

#: ../../library/string.rst:548
msgid "Accessing arguments' attributes::"
msgstr "引数の属性へのアクセス::"

#: ../../library/string.rst:564
msgid "Accessing arguments' items::"
msgstr "引数の要素へのアクセス::"

#: ../../library/string.rst:570
msgid "Replacing ``%s`` and ``%r``::"
msgstr "``%s`` と ``%r`` の置き換え::"

#: ../../library/string.rst:575
msgid "Aligning the text and specifying a width::"
msgstr "テキストの幅を指定した整列::"

#: ../../library/string.rst:586
msgid "Replacing ``%+f``, ``%-f``, and ``% f`` and specifying a sign::"
msgstr "``%+f`` と ``%-f``, ``% f`` の置換、そして符号の指定::"

#: ../../library/string.rst:595
msgid ""
"Replacing ``%x`` and ``%o`` and converting the value to different bases::"
msgstr "``%x`` と ``%o`` の置換、そして値に対する異なる底の変換::"

#: ../../library/string.rst:604
msgid "Using the comma as a thousands separator::"
msgstr "千の位のセパレータにカンマを使用する::"

#: ../../library/string.rst:609
msgid "Expressing a percentage::"
msgstr "パーセントを表示する::"

#: ../../library/string.rst:616
msgid "Using type-specific formatting::"
msgstr "型特有の書式指定を使う::"

#: ../../library/string.rst:623
msgid "Nesting arguments and more complex examples::"
msgstr "引数をネストする、さらに複雑な例::"

#: ../../library/string.rst:655
msgid "Template strings"
msgstr "テンプレート文字列"

#: ../../library/string.rst:659
msgid ""
"Templates provide simpler string substitutions as described in :pep:`292`. "
"Instead of the normal ``%``\\ -based substitutions, Templates support "
"``$``\\ -based substitutions, using the following rules:"
msgstr ""
"テンプレート (template) を使うと、 :pep:`292` で解説されているようにより簡潔"
"に文字列置換 (string substitution) を行えるようになります。通常の ``%`` ベー"
"スの置換に代わって、テンプレートでは以下のような規則に従った ``$`` ベースの置"
"換をサポートしています:"

#: ../../library/string.rst:663
msgid "``$$`` is an escape; it is replaced with a single ``$``."
msgstr "``$$`` はエスケープ文字です; ``$`` 一つに置換されます。"

#: ../../library/string.rst:665
msgid ""
"``$identifier`` names a substitution placeholder matching a mapping key of "
"``\"identifier\"``.  By default, ``\"identifier\"`` must spell a Python "
"identifier.  The first non-identifier character after the ``$`` character "
"terminates this placeholder specification."
msgstr ""
"``$identifier`` は置換プレースホルダの指定で、 ``\"identifier\"`` というキー"
"への対応付けに相当します。デフォルトは、 ``\"identifier\"`` の部分には "
"Python の識別子が書かれていなければなりません。 ``$`` の後に識別子に使えない"
"文字が出現すると、そこでプレースホルダ名の指定が終わります。"

#: ../../library/string.rst:670
msgid ""
"``${identifier}`` is equivalent to ``$identifier``.  It is required when "
"valid identifier characters follow the placeholder but are not part of the "
"placeholder, such as ``\"${noun}ification\"``."
msgstr ""
"``${identifier}`` は ``$identifier`` と同じです。プレースホルダ名の後ろに識別"
"子として使える文字列が続いていて、それをプレースホルダ名の一部として扱いたく"
"ない場合、例えば ``\"${noun}ification\"`` のような場合に必要な書き方です。"

#: ../../library/string.rst:674
msgid ""
"Any other appearance of ``$`` in the string will result in a :exc:"
"`ValueError` being raised."
msgstr ""
"上記以外の書き方で文字列中に ``$`` を使うと :exc:`ValueError` を送出します。"

#: ../../library/string.rst:677
msgid ""
"The :mod:`string` module provides a :class:`Template` class that implements "
"these rules.  The methods of :class:`Template` are:"
msgstr ""
":mod:`string` モジュールでは、上記のような規則を実装した :class:`Template` ク"
"ラスを提供しています。 :class:`Template` のメソッドを以下に示します:"

#: ../../library/string.rst:683
msgid "The constructor takes a single argument which is the template string."
msgstr "コンストラクタはテンプレート文字列になる引数を一つだけ取ります。"

#: ../../library/string.rst:688
msgid ""
"Performs the template substitution, returning a new string.  *mapping* is "
"any dictionary-like object with keys that match the placeholders in the "
"template.  Alternatively, you can provide keyword arguments, where the "
"keywords are the placeholders.  When both *mapping* and *kws* are given and "
"there are duplicates, the placeholders from *kws* take precedence."
msgstr ""
"テンプレート置換を行い、新たな文字列を生成して返します。 *mapping* はテンプ"
"レート中のプレースホルダに対応するキーを持つような任意の辞書類似オブジェクト"
"です。辞書を指定する代わりに、キーワード引数も指定でき、その場合にはキーワー"
"ドをプレースホルダ名に対応させます。 *mapping* と *kws* の両方が指定され、内"
"容が重複した場合には、 *kws* に指定したプレースホルダを優先します。"

#: ../../library/string.rst:697
msgid ""
"Like :meth:`substitute`, except that if placeholders are missing from "
"*mapping* and *kws*, instead of raising a :exc:`KeyError` exception, the "
"original placeholder will appear in the resulting string intact.  Also, "
"unlike with :meth:`substitute`, any other appearances of the ``$`` will "
"simply return ``$`` instead of raising :exc:`ValueError`."
msgstr ""
":meth:`substitute` と同じですが、プレースホルダに対応するものを *mapping* や "
"*kws* から見つけられなかった場合に、 :exc:`KeyError` 例外を送出する代わりにも"
"とのプレースホルダがそのまま入ります。また、 :meth:`substitute` とは違い、規"
"則外の書き方で ``$`` を使った場合でも、 :exc:`ValueError` を送出せず単に "
"``$`` を返します。"

#: ../../library/string.rst:703
msgid ""
"While other exceptions may still occur, this method is called \"safe\" "
"because it always tries to return a usable string instead of raising an "
"exception.  In another sense, :meth:`safe_substitute` may be anything other "
"than safe, since it will silently ignore malformed templates containing "
"dangling delimiters, unmatched braces, or placeholders that are not valid "
"Python identifiers."
msgstr ""
"その他の例外も発生し得る一方で、このメソッドが「安全 (safe) 」と呼ばれている"
"のは、置換操作は常に、例外を送出する代わりに利用可能な文字列を返そうとするか"
"らです。別の見方をすれば、 :meth:`safe_substitute` は区切り間違いによるぶら下"
"がり (dangling delimiter) や波括弧の非対応、 Python の識別子として無効なプ"
"レースホルダ名を含むような不正なテンプレートを何も警告せずに無視するため、安"
"全とはいえないのです。"

#: ../../library/string.rst:710
msgid ":class:`Template` instances also provide one public data attribute:"
msgstr ""
":class:`Template` のインスタンスは、次のような public な属性を提供しています:"

#: ../../library/string.rst:714
msgid ""
"This is the object passed to the constructor's *template* argument.  In "
"general, you shouldn't change it, but read-only access is not enforced."
msgstr ""
"コンストラクタの引数 *template* に渡されたオブジェクトです。通常、この値を変"
"更すべきではありませんが、読み込み専用アクセスを強制しているわけではありませ"
"ん。"

#: ../../library/string.rst:717
msgid "Here is an example of how to use a Template::"
msgstr "Templateの使い方の例を以下に示します::"

#: ../../library/string.rst:735
msgid ""
"Advanced usage: you can derive subclasses of :class:`Template` to customize "
"the placeholder syntax, delimiter character, or the entire regular "
"expression used to parse template strings.  To do this, you can override "
"these class attributes:"
msgstr ""
"さらに進んだ使い方: :class:`Template` のサブクラスを派生して、プレースホルダ"
"の書式、区切り文字、テンプレート文字列の解釈に使われている正規表現全体をカス"
"タマイズできます。こうした作業には、以下のクラス属性をオーバライドします:"

#: ../../library/string.rst:739
msgid ""
"*delimiter* -- This is the literal string describing a placeholder "
"introducing delimiter.  The default value is ``$``.  Note that this should "
"*not* be a regular expression, as the implementation will call :meth:`re."
"escape` on this string as needed."
msgstr ""
"*delimiter* -- プレースホルダの開始を示すリテラル文字列です。デフォルトの値"
"は ``$`` です。実装系はこの文字列に対して必要に応じて :meth:`re.escape` を呼"
"び出すので、正規表現を表すような文字列にしては *なりません* 。"

#: ../../library/string.rst:744
msgid ""
"*idpattern* -- This is the regular expression describing the pattern for non-"
"braced placeholders (the braces will be added automatically as "
"appropriate).  The default value is the regular expression ``[_a-z][_a-"
"z0-9]*``."
msgstr ""
"*idpattern* -- 波括弧でくくらない形式のプレースホルダの表記パターンを示す正規"
"表現です (波括弧は自動的に適切な場所に追加されます)。デフォルトの値は ``[_a-"
"z][_a-z0-9]*`` という正規表現です。"

#: ../../library/string.rst:749
msgid ""
"Alternatively, you can provide the entire regular expression pattern by "
"overriding the class attribute *pattern*.  If you do this, the value must be "
"a regular expression object with four named capturing groups.  The capturing "
"groups correspond to the rules given above, along with the invalid "
"placeholder rule:"
msgstr ""
"他にも、クラス属性 *pattern* をオーバライドして、正規表現パターン全体を指定で"
"きます。オーバライドを行う場合、 *pattern* の値は 4 つの名前つきキャプチャグ"
"ループ (capturing group) を持った正規表現オブジェクトでなければなりません。こ"
"れらのキャプチャグループは、上で説明した規則と、無効なプレースホルダに対する"
"規則に対応しています:"

#: ../../library/string.rst:755
msgid ""
"*escaped* -- This group matches the escape sequence, e.g. ``$$``, in the "
"default pattern."
msgstr ""
"*escaped* -- このグループはエスケープシーケンス、すなわちデフォルトパターンに"
"おける ``$$`` に対応します。"

#: ../../library/string.rst:758
msgid ""
"*named* -- This group matches the unbraced placeholder name; it should not "
"include the delimiter in capturing group."
msgstr ""
"*named* -- このグループは波括弧でくくらないプレースホルダ名に対応します; キャ"
"プチャグループに区切り文字を含めてはなりません。"

#: ../../library/string.rst:761
msgid ""
"*braced* -- This group matches the brace enclosed placeholder name; it "
"should not include either the delimiter or braces in the capturing group."
msgstr ""
"*braced* -- このグループは波括弧でくくったプレースホルダ名に対応します; キャ"
"プチャグループに区切り文字を含めてはなりません。"

#: ../../library/string.rst:764
msgid ""
"*invalid* -- This group matches any other delimiter pattern (usually a "
"single delimiter), and it should appear last in the regular expression."
msgstr ""
"*invalid* -- このグループはそのほかの区切り文字のパターン (通常は区切り文字一"
"つ) に対応し、正規表現の末尾に出現しなければなりません。"

#: ../../library/string.rst:769
msgid "String functions"
msgstr "文字列操作関数"

#: ../../library/string.rst:771
msgid ""
"The following functions are available to operate on string and Unicode "
"objects. They are not available as string methods."
msgstr ""
"以下の関数は文字列または Unicode オブジェクトを操作できます。これらの関数は文"
"字列型のメソッドにはありません。"

#: ../../library/string.rst:777
msgid ""
"Split the argument into words using :meth:`str.split`, capitalize each word "
"using :meth:`str.capitalize`, and join the capitalized words using :meth:"
"`str.join`.  If the optional second argument *sep* is absent or ``None``, "
"runs of whitespace characters are replaced by a single space and leading and "
"trailing whitespace are removed, otherwise *sep* is used to split and join "
"the words."
msgstr ""
":meth:`str.split` を使って引数を単語に分割し、 :meth:`str.capitalize` を使っ"
"てそれぞれの単語の先頭の文字を大文字に変換し、 :meth:`str.join` を使ってつな"
"ぎ合わせます。オプションの第2引数 *sep* が与えられないか ``None`` の場合、こ"
"の置換処理は文字列中の連続する空白文字をスペース一つに置き換え、先頭と末尾の"
"空白を削除します、それ以外の場合には *sep* は split と join に使われます。"

#: ../../library/string.rst:787
msgid ""
"Return a translation table suitable for passing to :func:`translate`, that "
"will map each character in *from* into the character at the same position in "
"*to*; *from* and *to* must have the same length."
msgstr ""
":func:`translate` に渡すのに適した変換テーブルを返します。このテーブルは、 "
"*from* 内の各文字を *to* の同じ位置にある文字に対応付けます; *from* と *to* "
"は同じ長さでなければなりません。"

#: ../../library/string.rst:793
msgid ""
"Don't use strings derived from :const:`lowercase` and :const:`uppercase` as "
"arguments; in some locales, these don't have the same length.  For case "
"conversions, always use :meth:`str.lower` and :meth:`str.upper`."
msgstr ""
":const:`lowercase` と :const:`uppercase` から取り出した文字列を引数に使っては"
"なりません; ロケールによっては、これらは同じ長さになりません。大文字小文字の"
"変換には、常に :meth:`str.lower` または :meth:`str.upper` を使ってください。"

#: ../../library/string.rst:799
msgid "Deprecated string functions"
msgstr "撤廃された文字列関数"

#: ../../library/string.rst:801
msgid ""
"The following list of functions are also defined as methods of string and "
"Unicode objects; see section :ref:`string-methods` for more information on "
"those.  You should consider these functions as deprecated, although they "
"will not be removed until Python 3.  The functions defined in this module "
"are:"
msgstr ""
"以下の一連の関数は、文字列型や Unicode 型のオブジェクトのメソッドとしても定義"
"されています; 詳しくは、それらの :ref:`string-methods` の項を参照してくださ"
"い。ここに挙げた関数は Python 3.0 で削除されることはないはずですが、撤廃され"
"た関数とみなして下さい。このモジュールで定義されている関数は以下の通りです:"

#: ../../library/string.rst:809
msgid "Use the :func:`float` built-in function."
msgstr "組み込み関数 :func:`float` を使ってください。"

#: ../../library/string.rst:814
msgid ""
"Convert a string to a floating point number.  The string must have the "
"standard syntax for a floating point literal in Python, optionally preceded "
"by a sign (``+`` or ``-``).  Note that this behaves identical to the built-"
"in function :func:`float` when passed a string."
msgstr ""
"文字列を浮動小数点型の数値に変換します。文字列は Python における標準的なの浮"
"動小数点リテラルの文法に従っていなければなりません。先頭に符号 (``+`` または "
"``-``)が付くのは構いません。この関数に文字列を渡した場合は、組み込み関数 :"
"func:`float` と同じように振舞います。"

#: ../../library/string.rst:825
msgid ""
"When passing in a string, values for NaN and Infinity may be returned, "
"depending on the underlying C library.  The specific set of strings accepted "
"which cause these values to be returned depends entirely on the C library "
"and is known to vary."
msgstr ""
"文字列を渡した場合、根底にある C ライブラリによって NaN や Infinity を返す場"
"合があります。こうした値を返させるのがどんな文字列の集合であるかは、全て C ラ"
"イブラリに依存しており、ライブラリによって異なると知られています。"

#: ../../library/string.rst:833
msgid "Use the :func:`int` built-in function."
msgstr "組み込み関数 :func:`int` を使ってください。"

#: ../../library/string.rst:838
msgid ""
"Convert string *s* to an integer in the given *base*.  The string must "
"consist of one or more digits, optionally preceded by a sign (``+`` or ``-"
"``).  The *base* defaults to 10.  If it is 0, a default base is chosen "
"depending on the leading characters of the string (after stripping the "
"sign): ``0x`` or ``0X`` means 16, ``0`` means 8, anything else means 10.  If "
"*base* is 16, a leading ``0x`` or ``0X`` is always accepted, though not "
"required.  This behaves identically to the built-in function :func:`int` "
"when passed a string.  (Also note: for a more flexible interpretation of "
"numeric literals, use the built-in function :func:`eval`.)"
msgstr ""
"文字列 *s* を、 *base* を基数とする整数に変換します。文字列は 1 桁またはそれ"
"以上の数字からなっていなければなりません。先頭に符号 (``+`` または ``-``) が"
"付くのは構いません。 *base* のデフォルト値は 10 です。 *base* が 0 の場合、 "
"(符号を剥ぎ取った後の) 文字列の先頭にある文字列に従ってデフォルトの基数を決定"
"します。 ``0x`` か ``0X`` なら 16 、 ``0`` なら 8 、その他の場合は 10 が基数"
"になります。 *base* が 16 の場合、先頭の ``0x`` や ``0X`` が付いていても受け"
"付けますが、必須ではありません。文字列を渡す場合、この関数は組み込み関数 :"
"func:`int` と同じように振舞います。 (数値リテラルをより柔軟に解釈したい場合に"
"は、組み込み関数 :func:`eval` を使ってください。)"

#: ../../library/string.rst:851
msgid "Use the :func:`long` built-in function."
msgstr "組み込み関数 :func:`long` を使ってください。"

#: ../../library/string.rst:856
msgid ""
"Convert string *s* to a long integer in the given *base*. The string must "
"consist of one or more digits, optionally preceded by a sign (``+`` or ``-"
"``). The *base* argument has the same meaning as for :func:`atoi`.  A "
"trailing ``l`` or ``L`` is not allowed, except if the base is 0.  Note that "
"when invoked without *base* or with *base* set to 10, this behaves identical "
"to the built-in function :func:`long` when passed a string."
msgstr ""
"文字列 *s* を、 *base* を基数とする長整数に変換します。文字列は 1 桁またはそ"
"れ以上の数字からなっていなければなりません。先頭に符号 (``+`` または ``-``) "
"が付くのは構いません。 *base* は :func:`atoi` と同じ意味です。基数が 0 の場合"
"を除き、文字列末尾に ``l`` や ``L`` を付けてはなりません。 *base* を指定しな"
"いか、 10 を指定して文字列を渡した場合には、この関数は組み込み関数 :func:"
"`long` と同じように振舞います。"

#: ../../library/string.rst:866
msgid "Return a copy of *word* with only its first character capitalized."
msgstr "先頭文字だけ大文字にした *word* のコピーを返します。"

#: ../../library/string.rst:871
msgid ""
"Expand tabs in a string replacing them by one or more spaces, depending on "
"the current column and the given tab size.  The column number is reset to "
"zero after each newline occurring in the string. This doesn't understand "
"other non-printing characters or escape sequences.  The tab size defaults to "
"8."
msgstr ""
"現在のカラムと指定タブ幅に従って文字列中のタブを展開し、一つまたはそれ以上の"
"スペースに置き換えます。文字列中に改行が出現するたびにカラム番号は 0 にリセッ"
"トされます。この関数は、他の非表示文字やエスケープシーケンスを解釈しません。"
"タブ幅のデフォルトは 8 です。"

#: ../../library/string.rst:879
msgid ""
"Return the lowest index in *s* where the substring *sub* is found such that "
"*sub* is wholly contained in ``s[start:end]``.  Return ``-1`` on failure. "
"Defaults for *start* and *end* and interpretation of negative values is the "
"same as for slices."
msgstr ""
"``s[start:end]`` の中で、部分文字列 *sub* が完全な形で入っている場所のうち、"
"最初のものを *s* のインデクスで返します。見つからなかった場合は ``-1`` を返し"
"ます。 *start* と *end* のデフォルト値、および、負の値を指定した場合の解釈は"
"文字列のスライスと同じです。"

#: ../../library/string.rst:887
msgid "Like :func:`find` but find the highest index."
msgstr ""
":func:`find` と同じですが、最後に見つかったもののインデックスを返します。"

#: ../../library/string.rst:892
msgid ""
"Like :func:`find` but raise :exc:`ValueError` when the substring is not "
"found."
msgstr ""
":func:`find` と同じですが、部分文字列が見つからなかったときに :exc:"
"`ValueError` を送出します。"

#: ../../library/string.rst:897
msgid ""
"Like :func:`rfind` but raise :exc:`ValueError` when the substring is not "
"found."
msgstr ""
":func:`rfind` と同じですが、部分文字列が見つからなかったときに :exc:"
"`ValueError` 送出します。"

#: ../../library/string.rst:902
msgid ""
"Return the number of (non-overlapping) occurrences of substring *sub* in "
"string ``s[start:end]``. Defaults for *start* and *end* and interpretation "
"of negative values are the same as for slices."
msgstr ""
"``s[start:end]`` における、部分文字列 *sub* の (重複しない) 出現回数を返しま"
"す。 *start* と *end* のデフォルト値、および、負の値を指定した場合の解釈は文"
"字列のスライスと同じです。"

#: ../../library/string.rst:909
msgid ""
"Return a copy of *s*, but with upper case letters converted to lower case."
msgstr "*s* のコピーを大文字を小文字に変換して返します。"

#: ../../library/string.rst:914
msgid ""
"Return a list of the words of the string *s*.  If the optional second "
"argument *sep* is absent or ``None``, the words are separated by arbitrary "
"strings of whitespace characters (space, tab, newline, return, formfeed).  "
"If the second argument *sep* is present and not ``None``, it specifies a "
"string to be used as the  word separator.  The returned list will then have "
"one more item than the number of non-overlapping occurrences of the "
"separator in the string. If *maxsplit* is given, at most *maxsplit* number "
"of splits occur, and the remainder of the string is returned as the final "
"element of the list (thus, the list will have at most ``maxsplit+1`` "
"elements).  If *maxsplit* is not specified or ``-1``, then there is no limit "
"on the number of splits (all possible splits are made)."
msgstr ""
"文字列 *s* 内の単語からなるリストを返します。オプションの第二引数 *sep* を指"
"定しないか、または ``None`` にした場合、空白文字 (スペース、タブ、改行、リ"
"ターン、改頁) からなる任意の文字列で単語に区切ります。 *sep* を ``None`` 以外"
"の値に指定した場合、単語の分割に使う文字列の指定になります。戻り値のリストに"
"は、文字列中に分割文字列が重複せずに出現する回数より一つ多い要素が入るはずで"
"す。 *maxsplit* が与えられた場合には、最大でも *maxsplit* 回の分割しか行わ"
"ず、リストの最後の要素は未分割の残りの文字列になります (従って、リスト中の要"
"素数は最大でも ``maxsplit+1`` です)。 *maxsplit* の指定がないか ``-1`` の場合"
"は、分割数は制限されません (可能な全ての分割を行います)。"

#: ../../library/string.rst:926
msgid ""
"The behavior of split on an empty string depends on the value of *sep*. If "
"*sep* is not specified, or specified as ``None``, the result will be an "
"empty list. If *sep* is specified as any string, the result will be a list "
"containing one element which is an empty string."
msgstr ""
"空文字列に対する分割を行った場合の挙動は *sep* の値に依存します。 *sep* を指"
"定しないか ``None`` にした場合、結果は空のリストになります。 *sep* に文字列を"
"指定した場合、空文字列一つの入ったリストになります。"

#: ../../library/string.rst:934
msgid ""
"Return a list of the words of the string *s*, scanning *s* from the end.  To "
"all intents and purposes, the resulting list of words is the same as "
"returned by :func:`split`, except when the optional third argument "
"*maxsplit* is explicitly specified and nonzero.  If *maxsplit* is given, at "
"most *maxsplit* number of splits -- the *rightmost* ones -- occur, and the "
"remainder of the string is returned as the first element of the list (thus, "
"the list will have at most ``maxsplit+1`` elements)."
msgstr ""
"*s* 中の単語からなるリストを *s* の末尾から検索して生成し返します。関数の返す"
"語のリストは全ての点で :func:`split` の返すものと同じになります。ただし、オプ"
"ションの第三引数 *maxsplit* をゼロでない値に指定した場合には必ずしも同じには"
"なりません。 *maxsplit* が与えられた場合には、最大で *maxsplit* 個の分割を *"
"右端から* 行います - 未分割の残りの文字列はリストの最初の要素として返されま"
"す (従って、リスト中の要素数は最大でも ``maxsplit+1`` です)。"

#: ../../library/string.rst:947
msgid ""
"This function behaves identically to :func:`split`.  (In the past, :func:"
"`split` was only used with one argument, while :func:`splitfields` was only "
"used with two arguments.)"
msgstr ""
"この関数は :func:`split` と同じように振舞います。 (以前は :func:`split` は単"
"一引数の場合にのみ使い、 :func:`splitfields` は引数 2 つの場合でのみ使ってい"
"ました)。"

#: ../../library/string.rst:954
msgid ""
"Concatenate a list or tuple of words with intervening occurrences of  *sep*. "
"The default value for *sep* is a single space character.  It is always true "
"that ``string.join(string.split(s, sep), sep)`` equals *s*."
msgstr ""
"単語のリストやタプルを間に *sep* を入れて連結します。 *sep* のデフォルト値は"
"スペース文字 1 つです。 ``string.join(string.split(s, sep), sep)`` は常に "
"*s* になります。"

#: ../../library/string.rst:961
msgid ""
"This function behaves identically to :func:`join`.  (In the past,  :func:"
"`join` was only used with one argument, while :func:`joinfields` was only "
"used with two arguments.) Note that there is no :meth:`joinfields` method on "
"string objects; use the :meth:`join` method instead."
msgstr ""
"この関数は :func:`join` と同じふるまいをします (以前は、 :func:`join` を使え"
"るのは引数が 1 つの場合だけで、 :func:`joinfields` は引数 2 つの場合だけでし"
"た)。文字列オブジェクトには :meth:`joinfields` メソッドがないので注意してくだ"
"さい。代わりに :meth:`join` メソッドを使ってください。"

#: ../../library/string.rst:969
msgid ""
"Return a copy of the string with leading characters removed.  If *chars* is "
"omitted or ``None``, whitespace characters are removed.  If given and not "
"``None``, *chars* must be a string; the characters in the string will be "
"stripped from the beginning of the string this method is called on."
msgstr ""
"文字列の先頭から文字を取り除いたコピーを生成して返します。 *chars* を指定しな"
"い場合や ``None`` にした場合、先頭の空白を取り除きます。 *chars* を ``None`` "
"以外の値にする場合、 *chars* は文字列でなければなりません。"

#: ../../library/string.rst:974 ../../library/string.rst:986
#: ../../library/string.rst:998
msgid ""
"The *chars* parameter was added.  The *chars* parameter cannot be passed in "
"earlier 2.2 versions."
msgstr ""
"*chars* パラメータを追加しました。初期の 2.2 バージョンでは、 *chars* パラ"
"メータを渡せませんでした。"

#: ../../library/string.rst:981
msgid ""
"Return a copy of the string with trailing characters removed.  If *chars* is "
"omitted or ``None``, whitespace characters are removed.  If given and not "
"``None``, *chars* must be a string; the characters in the string will be "
"stripped from the end of the string this method is called on."
msgstr ""
"文字列の末尾から文字を取り除いたコピーを生成して返します。 *chars* を指定しな"
"い場合や ``None`` にした場合、末尾の空白を取り除きます。 *chars* を ``None`` "
"以外の値にする場合、 *chars* は文字列でなければなりません。"

#: ../../library/string.rst:993
msgid ""
"Return a copy of the string with leading and trailing characters removed.  "
"If *chars* is omitted or ``None``, whitespace characters are removed.  If "
"given and not ``None``, *chars* must be a string; the characters in the "
"string will be stripped from the both ends of the string this method is "
"called on."
msgstr ""
"文字列の先頭と末尾から文字を取り除いたコピーを生成して返します。 *chars* を指"
"定しない場合や ``None`` にした場合、先頭と末尾の空白を取り除きます。 *chars* "
"を ``None`` 以外に指定する場合、 *chars* は文字列でなければなりません。"

#: ../../library/string.rst:1005
msgid ""
"Return a copy of *s*, but with lower case letters converted to upper case "
"and vice versa."
msgstr "*s* の大文字と小文字を入れ替えたものを返します。"

#: ../../library/string.rst:1011
msgid ""
"Delete all characters from *s* that are in *deletechars* (if  present), and "
"then translate the characters using *table*, which  must be a 256-character "
"string giving the translation for each character value, indexed by its "
"ordinal.  If *table* is ``None``, then only the character deletion step is "
"performed."
msgstr ""
"*s* の中から、 (もし指定されていれば) *deletechars* に入っている文字を削除"
"し、 *table* を使って文字変換を行って返します。 *table* は 256 文字からなる文"
"字列で、各文字はそのインデクスを序数とする文字に対する変換先の文字の指定にな"
"ります。もし、 *table* が ``None`` であれば、文字削除のみが行われます。"

#: ../../library/string.rst:1019
msgid ""
"Return a copy of *s*, but with lower case letters converted to upper case."
msgstr "*s* に含まれる小文字を大文字に置換して返します。"

#: ../../library/string.rst:1026
msgid ""
"These functions respectively left-justify, right-justify and center a string "
"in a field of given width.  They return a string that is at least *width* "
"characters wide, created by padding the string *s* with the character "
"*fillchar* (default is a space) until the given width on the right, left or "
"both sides. The string is never truncated."
msgstr ""
"文字列を指定した文字幅のフィールド中でそれぞれ左寄せ、右寄せ、中央寄せしま"
"す。これらの関数は指定幅になるまで文字列 *s* の左側、右側、および、両側のいず"
"れかに *fillchar* （デフォルトでは空白）を追加して、少なくとも *width* 文字か"
"らなる文字列にして返します。文字列を切り詰めることはありません。"

#: ../../library/string.rst:1035
msgid ""
"Pad a numeric string *s* on the left with zero digits until the given "
"*width* is reached.  Strings starting with a sign are handled correctly."
msgstr ""
"数値を表現する文字列 *s* の左側に、指定の幅 *width* になるまでゼロを付加しま"
"す。符号付きの数字も正しく処理します。"

#: ../../library/string.rst:1042
msgid ""
"Return a copy of string *s* with all occurrences of substring *old* replaced "
"by *new*.  If the optional argument *maxreplace* is given, the first "
"*maxreplace* occurrences are replaced."
msgstr ""
"*s* 内の部分文字列 *old* を全て *new* に置換したものを返します。 "
"*maxreplace* を指定した場合、最初に見つかった *maxreplace* 個分だけ置換しま"
"す。"
