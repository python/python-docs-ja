# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Masato HASHIMOTO <cabezon.hashimoto@gmail.com>, 2023
# tomo, 2023
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-04 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:08+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/linecache.rst:2
msgid ":mod:`!linecache` --- Random access to text lines"
msgstr ":mod:`!linecache` --- テキストラインへのランダムアクセス"

#: ../../library/linecache.rst:9
msgid "**Source code:** :source:`Lib/linecache.py`"
msgstr "**ソースコード:** :source:`Lib/linecache.py`"

#: ../../library/linecache.rst:13
msgid ""
"The :mod:`linecache` module allows one to get any line from a Python source "
"file, while attempting to optimize internally, using a cache, the common "
"case where many lines are read from a single file.  This is used by the :mod:"
"`traceback` module to retrieve source lines for inclusion in  the formatted "
"traceback."
msgstr ""
":mod:`linecache` モジュールは、キャッシュ (一つのファイルから何行も読んでおく"
"のが一般的です) を使って、内部で最適化を図りつつ、Python ソースファイルの任意"
"の行を取得するのを可能にします。 :mod:`traceback` モジュールは、整形されたト"
"レースバックにソースコードを含めるためにこのモジュールを利用しています。"

#: ../../library/linecache.rst:18
msgid ""
"The :func:`tokenize.open` function is used to open files. This function "
"uses :func:`tokenize.detect_encoding` to get the encoding of the file; in "
"the absence of an encoding token, the file encoding defaults to UTF-8."
msgstr ""
":func:`tokenize.open` 関数は、ファイルを開くために使用されます。この関数"
"は、 :func:`tokenize.detect_encoding` を使用してファイルのエンコーディングを"
"取得します。エンコーディングトークンが存在しない場合、デフォルトの UTF-8 にな"
"ります。"

#: ../../library/linecache.rst:22
msgid "The :mod:`linecache` module defines the following functions:"
msgstr ":mod:`linecache` モジュールでは次の関数が定義されています:"

#: ../../library/linecache.rst:27
msgid ""
"Get line *lineno* from file named *filename*. This function will never raise "
"an exception --- it will return ``''`` on errors (the terminating newline "
"character will be included for lines that are found)."
msgstr ""
"*filename* という名前のファイルから *lineno* 行目を取得します。この関数は決し"
"て例外を発生させません --- エラーの際には ``''`` を返します (行末の改行文字"
"は、見つかった行に含まれます)。"

#: ../../library/linecache.rst:33
msgid ""
"If a file named *filename* is not found, the function first checks for a :"
"pep:`302` ``__loader__`` in *module_globals*. If there is such a loader and "
"it defines a ``get_source`` method, then that determines the source lines "
"(if ``get_source()`` returns ``None``, then ``''`` is returned). Finally, if "
"*filename* is a relative filename, it is looked up relative to the entries "
"in the module search path, ``sys.path``."
msgstr ""
"*filename* という名前のファイルが見付からなかった場合、この関数は最初に "
"*module_globals* にある :pep:`302` ``__loader__`` を確認します。\n"
"ローダーが存在していて、 ``get_source`` メソッドが実装されていた場合、ソース"
"コードの行を決定します (``get_source()`` が ``None`` を返した場合は、 ``''`` "
"が返ります)。\n"
"最後に、 *filename* が相対ファイル名だった場合、モジュール検索パス ``sys."
"path`` のエントリからの相対パスを探します。"

#: ../../library/linecache.rst:44
msgid ""
"Clear the cache.  Use this function if you no longer need lines from files "
"previously read using :func:`getline`."
msgstr ""
"キャッシュをクリアします。それまでに :func:`getline` を使って読み込んだファイ"
"ルの行が必要でなくなったら、この関数を使ってください。"

#: ../../library/linecache.rst:50
msgid ""
"Check the cache for validity.  Use this function if files in the cache  may "
"have changed on disk, and you require the updated version.  If *filename* is "
"omitted, it will check all the entries in the cache."
msgstr ""
"キャッシュが有効かどうかを確認します。キャッシュしたファイルがディスク上で変"
"更された可能性があり、更新後のバージョンが必要な場合にこの関数を使用します。 "
"*filename* が与えられない場合、全てのキャッシュエントリを確認します。"

#: ../../library/linecache.rst:56
msgid ""
"Capture enough detail about a non-file-based module to permit getting its "
"lines later via :func:`getline` even if *module_globals* is ``None`` in the "
"later call. This avoids doing I/O until a line is actually needed, without "
"having to carry the module globals around indefinitely."
msgstr ""
"後々の呼び出しで *module_globals* が ``None`` となっていても、ファイルの形式"
"でないモジュールの行を後から :func:`getline` で取得するのに十分な詳細を把握し"
"ておきます。この関数により、モジュールの globals を無限に持ち運ぶ必要無しに、"
"実際に必要な行まで I/O を行う必要がなくなります。"

#: ../../library/linecache.rst:63
msgid "Example::"
msgstr "以下はプログラム例です::"

#: ../../library/linecache.rst:65
msgid ""
">>> import linecache\n"
">>> linecache.getline(linecache.__file__, 8)\n"
"'import sys\\n'"
msgstr ""

#: ../../library/linecache.rst:31
msgid "module"
msgstr "module"

#: ../../library/linecache.rst:31
msgid "search"
msgstr "検索"

#: ../../library/linecache.rst:31
msgid "path"
msgstr "パス"
