# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:06+0000\n"
"PO-Revision-Date: 2020-05-30 12:05+0000\n"
"Last-Translator: tomo, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/math.rst:2
msgid ":mod:`math` --- Mathematical functions"
msgstr ":mod:`math` --- 数学関数"

#: ../../library/math.rst:13
msgid ""
"This module provides access to the mathematical functions defined by the C "
"standard."
msgstr ""
"このモジュールは、 C 標準で定義された数学関数へのアクセスを提供します。"

#: ../../library/math.rst:16
msgid ""
"These functions cannot be used with complex numbers; use the functions of "
"the same name from the :mod:`cmath` module if you require support for "
"complex numbers.  The distinction between functions which support complex "
"numbers and those which don't is made since most users do not want to learn "
"quite as much mathematics as required to understand complex numbers.  "
"Receiving an exception instead of a complex result allows earlier detection "
"of the unexpected complex number used as a parameter, so that the programmer "
"can determine how and why it was generated in the first place."
msgstr ""
"これらの関数で複素数を使うことはできません。複素数に対応する必要があるなら"
"ば、 :mod:`cmath` モジュールにある同じ名前の関数を使ってください。ほとんどの"
"ユーザーは複素数を理解するのに必要なだけの数学を勉強したくないので、複素数に"
"対応した関数と対応していない関数の区別がされています。これらの関数では複素数"
"が利用できないため、引数に複素数を渡されると、複素数の結果が返るのではなく例"
"外が発生します。その結果、どういった理由で例外が送出されたかに早い段階で気づ"
"く事ができます。"

#: ../../library/math.rst:25
msgid ""
"The following functions are provided by this module.  Except when explicitly "
"noted otherwise, all return values are floats."
msgstr ""
"このモジュールでは次の関数を提供しています。明示的な注記のない限り、戻り値は"
"全て浮動小数点数になります。"

#: ../../library/math.rst:30
msgid "Number-theoretic and representation functions"
msgstr "数論および数表現の関数"

#: ../../library/math.rst:34
msgid ""
"Return the ceiling of *x*, the smallest integer greater than or equal to "
"*x*. If *x* is not a float, delegates to ``x.__ceil__()``, which should "
"return an :class:`~numbers.Integral` value."
msgstr ""
"*x* の「天井」 (*x* 以上の最小の整数) を返します。 *x* が浮動小数点数でなけれ"
"ば、内部的に ``x.__ceil__()`` が実行され、 :class:`~numbers.Integral` 値が返"
"されます。"

#: ../../library/math.rst:41
msgid ""
"Return the number of ways to choose *k* items from *n* items without "
"repetition and without order."
msgstr "*n* 個の中から *k* 個を重複無く順序をつけずに選ぶ方法の数を返します。"

#: ../../library/math.rst:44
msgid ""
"Evaluates to ``n! / (k! * (n - k)!)`` when ``k <= n`` and evaluates to zero "
"when ``k > n``."
msgstr ""
"``k <= n`` のとき ``n! / (k! * (n - k)!)`` と評価し、``k > n`` のとき 0 と評"
"価します。"

#: ../../library/math.rst:47
msgid ""
"Also called the binomial coefficient because it is equivalent to the "
"coefficient of k-th term in polynomial expansion of the expression ``(1 + x) "
"** n``."
msgstr ""

#: ../../library/math.rst:51 ../../library/math.rst:224
msgid ""
"Raises :exc:`TypeError` if either of the arguments are not integers. Raises :"
"exc:`ValueError` if either of the arguments are negative."
msgstr ""
"いずれかの引数が整数でないなら :exc:`TypeError` を送出します。いずれかの引数"
"が負であれば :exc:`ValueError` を送出します。"

#: ../../library/math.rst:59
msgid ""
"Return a float with the magnitude (absolute value) of *x* but the sign of "
"*y*.  On platforms that support signed zeros, ``copysign(1.0, -0.0)`` "
"returns *-1.0*."
msgstr ""
"*x* の大きさ (絶対値) で *y* と同じ符号の浮動小数点数を返します。符号付きのゼ"
"ロをサポートしているプラットフォームでは、``copysign(1.0, -0.0)`` は *-1.0* "
"を返します。"

#: ../../library/math.rst:66
msgid "Return the absolute value of *x*."
msgstr "*x* の絶対値を返します。"

#: ../../library/math.rst:71
msgid ""
"Return *x* factorial as an integer.  Raises :exc:`ValueError` if *x* is not "
"integral or is negative."
msgstr ""
"*x* の階乗を整数で返します。\n"
"*x* が整数でないか、負の数の場合は、 :exc:`ValueError` を送出します。"

#: ../../library/math.rst:77
msgid ""
"Return the floor of *x*, the largest integer less than or equal to *x*. If "
"*x* is not a float, delegates to ``x.__floor__()``, which should return an :"
"class:`~numbers.Integral` value."
msgstr ""
"*x* の「床」 (*x* 以下の最大の整数) を返します。 *x* が浮動小数点数でなけれ"
"ば、内部的に ``x.__floor__()`` が実行され、 :class:`~numbers.Integral` 値が返"
"されます。"

#: ../../library/math.rst:84
msgid ""
"Return ``fmod(x, y)``, as defined by the platform C library. Note that the "
"Python expression ``x % y`` may not return the same result.  The intent of "
"the C standard is that ``fmod(x, y)`` be exactly (mathematically; to "
"infinite precision) equal to ``x - n*y`` for some integer *n* such that the "
"result has the same sign as *x* and magnitude less than ``abs(y)``.  "
"Python's ``x % y`` returns a result with the sign of *y* instead, and may "
"not be exactly computable for float arguments. For example, ``fmod(-1e-100, "
"1e100)`` is ``-1e-100``, but the result of Python's ``-1e-100 % 1e100`` is "
"``1e100-1e-100``, which cannot be represented exactly as a float, and rounds "
"to the surprising ``1e100``.  For this reason, function :func:`fmod` is "
"generally preferred when working with floats, while Python's ``x % y`` is "
"preferred when working with integers."
msgstr ""
"プラットフォームの C ライブラリで定義されている ``fmod(x, y)`` を返します。 "
"Python の ``x % y`` という式は必ずしも同じ結果を返さないということに注意して"
"ください。 C 標準の要求では、 :c:func:`fmod` は除算の結果が *x* と同じ符号に"
"なり、大きさが ``abs(y)`` より小さくなるような整数 *n* については ``fmod(x, "
"y)`` が厳密に (数学的に、つまり無限の精度で) ``x - n*y``  と等価であるよう求"
"めています。 Python の ``x % y`` は、 *y* と同じ符号の結果を返し、浮動小数点"
"の引数に対して厳密な解を出せないことがあります。例えば、 ``fmod(-1e-100, "
"1e100)`` は ``-1e-100`` ですが、 Python の ``-1e-100 % 1e100`` は "
"``1e100-1e-100`` になり、浮動小数点型で厳密に表現できず、ややこしいことに "
"``1e100`` に丸められます。このため、一般には浮動小数点の場合には関数 :func:"
"`fmod` 、整数の場合には ``x % y`` を使う方がよいでしょう。"

#: ../../library/math.rst:99
msgid ""
"Return the mantissa and exponent of *x* as the pair ``(m, e)``.  *m* is a "
"float and *e* is an integer such that ``x == m * 2**e`` exactly. If *x* is "
"zero, returns ``(0.0, 0)``, otherwise ``0.5 <= abs(m) < 1``.  This is used "
"to \"pick apart\" the internal representation of a float in a portable way."
msgstr ""
"*x* の仮数と指数を ``(m, e)`` のペアとして返します。*m* はfloat型で、*e* は厳"
"密に ``x == m * 2**e`` であるような整数型です。*x* がゼロの場合は、``(0.0, "
"0)`` を返し、それ以外の場合は、``0.5 <= abs(m) < 1`` を返します。これは浮動小"
"数点型の内部表現を可搬性を保ったまま \"分解 (pick apart)\" するためです。"

#: ../../library/math.rst:107
msgid ""
"Return an accurate floating point sum of values in the iterable.  Avoids "
"loss of precision by tracking multiple intermediate partial sums::"
msgstr ""
"iterable 中の値の浮動小数点数の正確な和を返します。複数の部分和を追跡すること"
"で精度のロスを防ぎます::"

#: ../../library/math.rst:115
msgid ""
"The algorithm's accuracy depends on IEEE-754 arithmetic guarantees and the "
"typical case where the rounding mode is half-even.  On some non-Windows "
"builds, the underlying C library uses extended precision addition and may "
"occasionally double-round an intermediate sum causing it to be off in its "
"least significant bit."
msgstr ""
"アルゴリズムの正確性は、 IEEE-754 演算の保証と、丸めモードが偶数丸め (half-"
"even) である典型的な場合に依存します。Windows 以外のいくつかのビルドでは、下"
"層の C ライブラリが拡張精度の加算を行い、時々計算途中の和を double 型へ丸めて"
"しまうため、最下位ビットが消失することがあります。"

#: ../../library/math.rst:121
msgid ""
"For further discussion and two alternative approaches, see the `ASPN "
"cookbook recipes for accurate floating point summation <https://code."
"activestate.com/recipes/393090/>`_\\."
msgstr ""
"より詳細な議論と代替となる二つのアプローチについては、`ASPN cookbook recipes "
"for accurate floating point summation <https://code.activestate.com/"
"recipes/393090/>`_ をご覧下さい。"

#: ../../library/math.rst:128
msgid ""
"Return the greatest common divisor of the integers *a* and *b*.  If either "
"*a* or *b* is nonzero, then the value of ``gcd(a, b)`` is the largest "
"positive integer that divides both *a* and *b*.  ``gcd(0, 0)`` returns ``0``."
msgstr ""
"整数 *a* と *b* の最大公約数を返します。*a* と *b* のいずれかがゼロでない場"
"合、``gcd(a, b)`` の値は *a* と *b* の両方を割り切ることのできる、最も大きな"
"正の整数です。``gcd(0, 0)`` は ``0`` を返します。"

#: ../../library/math.rst:138
msgid ""
"Return ``True`` if the values *a* and *b* are close to each other and "
"``False`` otherwise."
msgstr ""
"値 *a* と *b* が互いに近い場合 ``True`` を、そうでない場合は ``False`` を返し"
"ます。"

#: ../../library/math.rst:141
msgid ""
"Whether or not two values are considered close is determined according to "
"given absolute and relative tolerances."
msgstr ""
"2値が近いと見なされるかどうかは与えられた絶対または相対許容差により決定されま"
"す。"

#: ../../library/math.rst:144
msgid ""
"*rel_tol* is the relative tolerance -- it is the maximum allowed difference "
"between *a* and *b*, relative to the larger absolute value of *a* or *b*. "
"For example, to set a tolerance of 5%, pass ``rel_tol=0.05``.  The default "
"tolerance is ``1e-09``, which assures that the two values are the same "
"within about 9 decimal digits.  *rel_tol* must be greater than zero."
msgstr ""
"*rel_tol* は相対許容差、すなわち *a* と *b* の絶対値の大きい方に対する *a* "
"と *b* の許容される最大の差です。\n"
"例えば許容差を 5% に設定する場合 ``rel_tol=0.05`` を渡します。\n"
"デフォルトの許容差は ``1e-09`` で、2値が9桁同じことを保証します。\n"
"*rel_tol* は0より大きくなければなりません。"

#: ../../library/math.rst:150
msgid ""
"*abs_tol* is the minimum absolute tolerance -- useful for comparisons near "
"zero. *abs_tol* must be at least zero."
msgstr ""
"*abs_tol* は最小の絶対許容差です。0に近い値を比較するのに有用です。*abs_tol* "
"は0より大きくなければなりません。"

#: ../../library/math.rst:153
msgid ""
"If no errors occur, the result will be: ``abs(a-b) <= max(rel_tol * "
"max(abs(a), abs(b)), abs_tol)``."
msgstr ""
"エラーが起こらなければ結果は ``abs(a-b) <= max(rel_tol * max(abs(a), "
"abs(b)), abs_tol)`` です。"

#: ../../library/math.rst:156
msgid ""
"The IEEE 754 special values of ``NaN``, ``inf``, and ``-inf`` will be "
"handled according to IEEE rules.  Specifically, ``NaN`` is not considered "
"close to any other value, including ``NaN``.  ``inf`` and ``-inf`` are only "
"considered close to themselves."
msgstr ""
"IEEE 754 特殊値 ``NaN``、``inf``、``-inf`` は IEEE の規則に従って処理されま"
"す。\n"
"具体的には、``NaN`` は自身を含めたあらゆる値に近いとは見なされません。\n"
"``inf`` と ``-inf`` は自身とのみ近いと見なされます。"

#: ../../library/math.rst:165
msgid ":pep:`485` -- A function for testing approximate equality"
msgstr ":pep:`485` -- A function for testing approximate equality"

#: ../../library/math.rst:170
msgid ""
"Return ``True`` if *x* is neither an infinity nor a NaN, and ``False`` "
"otherwise.  (Note that ``0.0`` *is* considered finite.)"
msgstr ""
"*x* が無限でも NaN でもない場合に ``True`` を返します。それ以外の時には "
"``False`` を返します。 (注意: ``0.0`` は有限数と扱われます。)"

#: ../../library/math.rst:178
msgid ""
"Return ``True`` if *x* is a positive or negative infinity, and ``False`` "
"otherwise."
msgstr ""
"*x* が正ないし負の無限数ならば ``True`` を返します。それ以外の時には "
"``False`` を返します。"

#: ../../library/math.rst:184
msgid ""
"Return ``True`` if *x* is a NaN (not a number), and ``False`` otherwise."
msgstr ""
"*x* がNaN (not a number、非数) の時に ``True`` を返します。それ以外の場合に"
"は ``False`` を返します。"

#: ../../library/math.rst:189
msgid ""
"Return the integer square root of the nonnegative integer *n*. This is the "
"floor of the exact square root of *n*, or equivalently the greatest integer "
"*a* such that *a*\\ ² |nbsp| ≤ |nbsp| *n*."
msgstr ""
"非負整数 *n* の整数平方根を返します。これは *n* の正確な平方根の床であり、 "
"*a*\\ ² |nbsp| ≤ |nbsp| *n* を満たす最大の整数 *a* と等価です。"

#: ../../library/math.rst:193
msgid ""
"For some applications, it may be more convenient to have the least integer "
"*a* such that *n* |nbsp| ≤ |nbsp| *a*\\ ², or in other words the ceiling of "
"the exact square root of *n*. For positive *n*, this can be computed using "
"``a = 1 + isqrt(n - 1)``."
msgstr ""
"少し応用すれば、*n* |nbsp| ≤ |nbsp| *a*\\ ² を満たす最小の整数 *a* 、言い換え"
"れば *n* の正確な平方根の天井を効率的に得られます。正の *n* に対して、これは "
"``a = 1 + isqrt(n - 1)`` を使って計算できます。"

#: ../../library/math.rst:203
msgid ""
"Return ``x * (2**i)``.  This is essentially the inverse of function :func:"
"`frexp`."
msgstr "``x * (2**i)`` を返します。これは本質的に :func:`frexp` の逆関数です。"

#: ../../library/math.rst:209
msgid ""
"Return the fractional and integer parts of *x*.  Both results carry the sign "
"of *x* and are floats."
msgstr ""
"*x* の小数部分と整数部分を返します。両方の結果は *x* の符号を受け継ぎます。整"
"数部はfloat型で返されます。"

#: ../../library/math.rst:215
msgid ""
"Return the number of ways to choose *k* items from *n* items without "
"repetition and with order."
msgstr "*n* 個の中から *k* 個を重複無く順序をつけて選ぶ方法の数を返します。"

#: ../../library/math.rst:218
msgid ""
"Evaluates to ``n! / (n - k)!`` when ``k <= n`` and evaluates to zero when "
"``k > n``."
msgstr ""
"``k <= n`` のとき ``n! / (n - k)!`` と評価し、``k > n`` のとき 0 と評価しま"
"す。"

#: ../../library/math.rst:221
msgid ""
"If *k* is not specified or is None, then *k* defaults to *n* and the "
"function returns ``n!``."
msgstr ""
"*k* が指定されていないか None であれば、*k* はデフォルトで *n* となりこの関数"
"は ``n!`` を返します。"

#: ../../library/math.rst:232
msgid ""
"Calculate the product of all the elements in the input *iterable*. The "
"default *start* value for the product is ``1``."
msgstr ""
"入力 *iterable* の全ての要素の積を計算します。積のデフォルト *start* 値は "
"``1`` です。"

#: ../../library/math.rst:235
msgid ""
"When the iterable is empty, return the start value.  This function is "
"intended specifically for use with numeric values and may reject non-numeric "
"types."
msgstr ""
"イテラブルが空のとき、初期値を返します。この関数は特に数値に使うことを意図さ"
"れており、非数値を受け付けないことがあります。"

#: ../../library/math.rst:244
msgid ""
"Return the IEEE 754-style remainder of *x* with respect to *y*.  For finite "
"*x* and finite nonzero *y*, this is the difference ``x - n*y``, where ``n`` "
"is the closest integer to the exact value of the quotient ``x / y``.  If "
"``x / y`` is exactly halfway between two consecutive integers, the nearest "
"*even* integer is used for ``n``.  The remainder ``r = remainder(x, y)`` "
"thus always satisfies ``abs(r) <= 0.5 * abs(y)``."
msgstr ""
"IEEE 754 標準方式の *x* を *y* で割った剰余を返します。\n"
"有限な *x* と有限な *y* では、分数 ``x / y`` の厳密な値に最も近い整数を "
"``n`` として、 ``x - n*y`` がこの返り値となります。\n"
"``x / y`` が隣り合う 2 つの整数のちょうど真ん中だった場合は、最も近い *偶数* "
"が ``n`` として使われます。\n"
"従って、剰余 ``r = remainder(x, y)`` は常に ``abs(r) <= 0.5 * abs(y)`` を満た"
"します。"

#: ../../library/math.rst:251
msgid ""
"Special cases follow IEEE 754: in particular, ``remainder(x, math.inf)`` is "
"*x* for any finite *x*, and ``remainder(x, 0)`` and ``remainder(math.inf, "
"x)`` raise :exc:`ValueError` for any non-NaN *x*. If the result of the "
"remainder operation is zero, that zero will have the same sign as *x*."
msgstr ""
"特殊なケースについては IEEE 754 に従います: 任意の有限な *x* に対する "
"``remainder(x, math.inf)`` 、および任意の非 NaN の *x* に対する "
"``remainder(x, 0)`` と ``remainder(math.inf, x)`` は :exc:`ValueError` を送出"
"します。\n"
"剰余演算の結果がゼロの場合、そのゼロは *x* と同じ符号を持ちます。"

#: ../../library/math.rst:257
msgid ""
"On platforms using IEEE 754 binary floating-point, the result of this "
"operation is always exactly representable: no rounding error is introduced."
msgstr ""
"IEEE 754 の二進浮動小数点数を使用しているプラットフォームでは、この演算の結果"
"は常に厳密に表現可能です。丸め誤差は発生しません。"

#: ../../library/math.rst:265
msgid ""
"Return the :class:`~numbers.Real` value *x* truncated to an :class:`~numbers."
"Integral` (usually an integer). Delegates to :meth:`x.__trunc__() <object."
"__trunc__>`."
msgstr ""
"*x* の :class:`~numbers.Integral` 値 (たいていは整数) へ切り捨てられた :"
"class:`~numbers.Real` 値を返します。\n"
":meth:`x.__trunc__() <object.__trunc__>` に処理を委譲します。"

#: ../../library/math.rst:270
msgid ""
"Note that :func:`frexp` and :func:`modf` have a different call/return "
"pattern than their C equivalents: they take a single argument and return a "
"pair of values, rather than returning their second return value through an "
"'output parameter' (there is no such thing in Python)."
msgstr ""
":func:`frexp` と :func:`modf` は C のものとは異なった呼び出し/返しパターンを"
"持っていることに注意してください。引数を1つだけ受け取り、1組のペアになった値"
"を返すので、2つ目の戻り値を '出力用の引数' 経由で返したりはしません (Python "
"には出力用の引数はありません)。"

#: ../../library/math.rst:275
msgid ""
"For the :func:`ceil`, :func:`floor`, and :func:`modf` functions, note that "
"*all* floating-point numbers of sufficiently large magnitude are exact "
"integers. Python floats typically carry no more than 53 bits of precision "
"(the same as the platform C double type), in which case any float *x* with "
"``abs(x) >= 2**52`` necessarily has no fractional bits."
msgstr ""
":func:`ceil` 、 :func:`floor` 、および :func:`modf` 関数については、非常に大"
"きな浮動小数点数が *全て* 整数そのものになるということに注意してください。通"
"常、Python の浮動小数点型は 53 ビット以上の精度をもたない (プラットフォームに"
"おける C double 型と同じ) ので、結果的に ``abs(x) >= 2**52`` であるような浮動"
"小数点型 *x* は小数部分を持たなくなるのです。"

#: ../../library/math.rst:283
msgid "Power and logarithmic functions"
msgstr "指数関数と対数関数"

#: ../../library/math.rst:287
msgid ""
"Return *e* raised to the power *x*, where *e* = 2.718281... is the base of "
"natural logarithms.  This is usually more accurate than ``math.e ** x`` or "
"``pow(math.e, x)``."
msgstr ""
"*e* = 2.718281... を自然対数の底として、 *e* の *x* 乗を返します。\n"
"この値は、通常は ``math.e ** x`` や ``pow(math.e, x)`` よりも精度が高いです。"

#: ../../library/math.rst:294
msgid ""
"Return *e* raised to the power *x*, minus 1.  Here *e* is the base of "
"natural logarithms.  For small floats *x*, the subtraction in ``exp(x) - 1`` "
"can result in a `significant loss of precision <https://en.wikipedia.org/"
"wiki/Loss_of_significance>`_\\; the :func:`expm1` function provides a way to "
"compute this quantity to full precision::"
msgstr ""
"*e* の *x* 乗から 1 を引いた値を返します。\n"
"ここでの *e* は自然対数の底です。\n"
"小さい浮動小数点数の *x* において、減算 ``exp(x) - 1`` は `桁落ち <https://"
"en.wikipedia.org/wiki/Loss_of_significance>`_ が発生します。 :func:`expm1` 関"
"数は、この量を最大精度で計算する方法を提供します。"

#: ../../library/math.rst:311
msgid "With one argument, return the natural logarithm of *x* (to base *e*)."
msgstr "引数が1つの場合、*x* の (*e* を底とする)自然対数を返します。"

#: ../../library/math.rst:313
msgid ""
"With two arguments, return the logarithm of *x* to the given *base*, "
"calculated as ``log(x)/log(base)``."
msgstr ""
"引数が2つの場合、``log(x)/log(base)`` として求められる *base* を底とした *x* "
"の対数を返します。"

#: ../../library/math.rst:319
msgid ""
"Return the natural logarithm of *1+x* (base *e*). The result is calculated "
"in a way which is accurate for *x* near zero."
msgstr ""
"*1+x* の自然対数(つまり底 *e* の対数)を返します。結果はゼロに近い *x* に対し"
"て正確になるような方法で計算されます。"

#: ../../library/math.rst:325
msgid ""
"Return the base-2 logarithm of *x*. This is usually more accurate than "
"``log(x, 2)``."
msgstr ""
"2を底とする *x* の対数を返します。この関数は、一般に ``log(x, 2)`` よりも正確"
"な値を返します。"

#: ../../library/math.rst:332
msgid ""
":meth:`int.bit_length` returns the number of bits necessary to represent an "
"integer in binary, excluding the sign and leading zeros."
msgstr ""
":meth:`int.bit_length` は、その整数を二進法で表すのに何ビット必要かを返す関数"
"です。符号と先頭のゼロは無視されます。"

#: ../../library/math.rst:338
msgid ""
"Return the base-10 logarithm of *x*.  This is usually more accurate than "
"``log(x, 10)``."
msgstr ""
"*x* の10を底とした対数(常用対数)を返します。この関数は通常、``log(x, 10)`` よ"
"りも高精度です。"

#: ../../library/math.rst:344
msgid ""
"Return ``x`` raised to the power ``y``.  Exceptional cases follow Annex 'F' "
"of the C99 standard as far as possible.  In particular, ``pow(1.0, x)`` and "
"``pow(x, 0.0)`` always return ``1.0``, even when ``x`` is a zero or a NaN.  "
"If both ``x`` and ``y`` are finite, ``x`` is negative, and ``y`` is not an "
"integer then ``pow(x, y)`` is undefined, and raises :exc:`ValueError`."
msgstr ""
"``x`` の ``y`` 乗を返します。例外的な場合については、 C99 標準の付録 'F' に可"
"能な限り従います。特に、 ``pow(1.0, x)`` と ``pow(x, 0.0)`` は、たとえ ``x`` "
"が零や NaN でも、常に ``1.0`` を返します。もし ``x`` と ``y`` の両方が有限の"
"値で、 ``x`` が負、 ``y`` が整数でない場合、 ``pow(x, y)`` は未定義で、 :exc:"
"`ValueError` を送出します。"

#: ../../library/math.rst:351
msgid ""
"Unlike the built-in ``**`` operator, :func:`math.pow` converts both its "
"arguments to type :class:`float`.  Use ``**`` or the built-in :func:`pow` "
"function for computing exact integer powers."
msgstr ""
"組み込みの ``**`` 演算子と違って、 :func:`math.pow` は両方の引数を :class:"
"`float` 型に変換します。正確な整数の冪乗を計算するには ``**`` もしくは組み込"
"みの :func:`pow` 関数を使ってください。"

#: ../../library/math.rst:358
msgid "Return the square root of *x*."
msgstr "*x* の平方根を返します。"

#: ../../library/math.rst:362
msgid "Trigonometric functions"
msgstr "三角関数"

#: ../../library/math.rst:366
msgid "Return the arc cosine of *x*, in radians."
msgstr "*x* の逆余弦を、ラジアンで返します。"

#: ../../library/math.rst:371
msgid "Return the arc sine of *x*, in radians."
msgstr "*x* の逆正弦を、ラジアンで返します。"

#: ../../library/math.rst:376
msgid "Return the arc tangent of *x*, in radians."
msgstr "*x* の逆正接を、ラジアンで返します。"

#: ../../library/math.rst:381
msgid ""
"Return ``atan(y / x)``, in radians. The result is between ``-pi`` and "
"``pi``. The vector in the plane from the origin to point ``(x, y)`` makes "
"this angle with the positive X axis. The point of :func:`atan2` is that the "
"signs of both inputs are known to it, so it can compute the correct quadrant "
"for the angle. For example, ``atan(1)`` and ``atan2(1, 1)`` are both "
"``pi/4``, but ``atan2(-1, -1)`` is ``-3*pi/4``."
msgstr ""
"``atan(y / x)`` を、ラジアンで返します。戻り値は ``-pi`` から ``pi`` の間にな"
"ります。この角度は、極座標平面において原点から ``(x, y)`` へのベクトルが X 軸"
"の正の方向となす角です。 :func:`atan2` のポイントは、両方の入力の符号が既知で"
"あるために、位相角の正しい象限を計算できることにあります。例えば、 "
"``atan(1)`` と ``atan2(1, 1)`` はいずれも ``pi/4`` ですが、 ``atan2(-1, "
"-1)`` は ``-3*pi/4`` になります。"

#: ../../library/math.rst:391
msgid "Return the cosine of *x* radians."
msgstr "*x* ラジアンの余弦を返します。"

#: ../../library/math.rst:396
msgid ""
"Return the Euclidean distance between two points *p* and *q*, each given as "
"a sequence (or iterable) of coordinates.  The two points must have the same "
"dimension."
msgstr ""
"それぞれ座標のシーケンス (またはイテラブル) として与えられる点 *p* と *q* の"
"間のユークリッド距離を返します。二点の次元は同じでなければなりません。"

#: ../../library/math.rst:400
msgid "Roughly equivalent to::"
msgstr "およそ次と等価です::"

#: ../../library/math.rst:409
msgid ""
"Return the Euclidean norm, ``sqrt(sum(x**2 for x in coordinates))``. This is "
"the length of the vector from the origin to the point given by the "
"coordinates."
msgstr ""
"ユークリッドノルム ``sqrt(sum(x**2 for x in coordinates))`` を返します。これ"
"は原点から座標で与えられる点までのベクトルの長さです。"

#: ../../library/math.rst:413
msgid ""
"For a two dimensional point ``(x, y)``, this is equivalent to computing the "
"hypotenuse of a right triangle using the Pythagorean theorem, ``sqrt(x*x + "
"y*y)``."
msgstr ""
"二次元の点 ``(x, y)`` では、これは直角三角形の斜辺をピタゴラスの定理 "
"``sqrt(x*x + y*y)`` を用いて計算することと等価です。"

#: ../../library/math.rst:417
msgid ""
"Added support for n-dimensional points. Formerly, only the two dimensional "
"case was supported."
msgstr ""
"n 次元の点のサポートが追加されました。以前は、二次元の場合しかサポートされて"
"いませんでした。"

#: ../../library/math.rst:424
msgid "Return the sine of *x* radians."
msgstr "*x* ラジアンの正弦を返します。"

#: ../../library/math.rst:429
msgid "Return the tangent of *x* radians."
msgstr "*x* ラジアンの正接を返します。"

#: ../../library/math.rst:433
msgid "Angular conversion"
msgstr "角度変換"

#: ../../library/math.rst:437
msgid "Convert angle *x* from radians to degrees."
msgstr "角 *x* をラジアンから度に変換します。"

#: ../../library/math.rst:442
msgid "Convert angle *x* from degrees to radians."
msgstr "角 *x* を度からラジアンに変換します。"

#: ../../library/math.rst:446
msgid "Hyperbolic functions"
msgstr "双曲線関数"

#: ../../library/math.rst:448
msgid ""
"`Hyperbolic functions <https://en.wikipedia.org/wiki/Hyperbolic_function>`_ "
"are analogs of trigonometric functions that are based on hyperbolas instead "
"of circles."
msgstr ""
"`双曲線関数 <https://ja.wikipedia.org/wiki/"
"%E5%8F%8C%E6%9B%B2%E7%B7%9A%E9%96%A2%E6%95%B0>`_ は円ではなく双曲線を元にした"
"三角関数のようなものです。"

#: ../../library/math.rst:454
msgid "Return the inverse hyperbolic cosine of *x*."
msgstr "*x* の逆双曲線余弦を返します。"

#: ../../library/math.rst:459
msgid "Return the inverse hyperbolic sine of *x*."
msgstr "*x* の逆双曲線正弦を返します。"

#: ../../library/math.rst:464
msgid "Return the inverse hyperbolic tangent of *x*."
msgstr "*x* の逆双曲線正接を返します。"

#: ../../library/math.rst:469
msgid "Return the hyperbolic cosine of *x*."
msgstr "*x* の双曲線余弦を返します。"

#: ../../library/math.rst:474
msgid "Return the hyperbolic sine of *x*."
msgstr "*x* の双曲線正弦を返します。"

#: ../../library/math.rst:479
msgid "Return the hyperbolic tangent of *x*."
msgstr "*x* の双曲線正接を返します。"

#: ../../library/math.rst:483
msgid "Special functions"
msgstr "特殊関数"

#: ../../library/math.rst:487
msgid ""
"Return the `error function <https://en.wikipedia.org/wiki/Error_function>`_ "
"at *x*."
msgstr ""
"*x* の `誤差関数 <https://ja.wikipedia.org/wiki/"
"%E8%AA%A4%E5%B7%AE%E9%96%A2%E6%95%B0>`_ を返します。"

#: ../../library/math.rst:490
msgid ""
"The :func:`erf` function can be used to compute traditional statistical "
"functions such as the `cumulative standard normal distribution <https://en."
"wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function>`_::"
msgstr ""
":func:`erf` 関数は、伝統的な統計関数を計算するのに使うことができます。例え"
"ば、 `累積標準正規分布 <https://en.wikipedia.org/wiki/"
"Normal_distribution#Cumulative_distribution_function>`_ を計算する関数は次の"
"ように定義できます::"

#: ../../library/math.rst:503
msgid ""
"Return the complementary error function at *x*.  The `complementary error "
"function <https://en.wikipedia.org/wiki/Error_function>`_ is defined as "
"``1.0 - erf(x)``.  It is used for large values of *x* where a subtraction "
"from one would cause a `loss of significance <https://en.wikipedia.org/wiki/"
"Loss_of_significance>`_\\."
msgstr ""
"*x* の相補誤差関数を返します。`相補誤差関数 <https://ja.wikipedia.org/wiki/"
"%E8%AA%A4%E5%B7%AE%E9%96%A2%E6%95%B0>`_ は ``1.0 - erf(x)`` と定義されます。"
"この関数は、1との引き算では `桁落ち <https://ja.wikipedia.org/wiki/"
"%E8%AA%A4%E5%B7%AE#.E6.A1.81.E8.90.BD.E3.81.A1>`_ をするような大きな *x* に対"
"し使われます。"

#: ../../library/math.rst:514
msgid ""
"Return the `Gamma function <https://en.wikipedia.org/wiki/Gamma_function>`_ "
"at *x*."
msgstr ""
"*x* の `ガンマ関数 <https://ja.wikipedia.org/wiki/"
"%E3%82%AC%E3%83%B3%E3%83%9E%E9%96%A2%E6%95%B0>`_ を返します。"

#: ../../library/math.rst:522
msgid ""
"Return the natural logarithm of the absolute value of the Gamma function at "
"*x*."
msgstr "*x* のガンマ関数の絶対値の自然対数を返します。"

#: ../../library/math.rst:529
msgid "Constants"
msgstr "定数"

#: ../../library/math.rst:533
msgid "The mathematical constant *π* = 3.141592..., to available precision."
msgstr "利用可能なだけの精度の数学定数 *π* = 3.141592... (円周率)。"

#: ../../library/math.rst:538
msgid "The mathematical constant *e* = 2.718281..., to available precision."
msgstr "利用可能なだけの精度の数学定数 *e* = 2.718281... (自然対数の底)。"

#: ../../library/math.rst:543
msgid ""
"The mathematical constant *τ* = 6.283185..., to available precision. Tau is "
"a circle constant equal to 2\\ *π*, the ratio of a circle's circumference to "
"its radius. To learn more about Tau, check out Vi Hart's video `Pi is "
"(still) Wrong <https://www.youtube.com/watch?v=jG7vhMMXagQ>`_, and start "
"celebrating `Tau day <https://tauday.com/>`_ by eating twice as much pie!"
msgstr ""
"利用可能なだけの精度の数学定数 *τ* = 6.283185... です。\n"
"タウは 2\\ *π* に等しい円定数で、円周と半径の比です。\n"
"タウについて学ぶには Vi Hart のビデオ `Pi is (still) Wrong <https://www."
"youtube.com/watch?v=jG7vhMMXagQ>`_ をチェックして、パイを二倍食べて `Tau day "
"<https://tauday.com/>`_ を祝い始めましょう！"

#: ../../library/math.rst:554
msgid ""
"A floating-point positive infinity.  (For negative infinity, use ``-math."
"inf``.)  Equivalent to the output of ``float('inf')``."
msgstr ""
"浮動小数の正の無限大です。(負の無限大には ``-math.inf`` を使います。) "
"``float('inf')`` の出力と等価です。"

#: ../../library/math.rst:562
msgid ""
"A floating-point \"not a number\" (NaN) value.  Equivalent to the output of "
"``float('nan')``."
msgstr ""
"浮動小数の非数 \"not a number\" (NaN) です。``float('nan')`` の出力と等価で"
"す。"

#: ../../library/math.rst:570
msgid ""
"The :mod:`math` module consists mostly of thin wrappers around the platform "
"C math library functions.  Behavior in exceptional cases follows Annex F of "
"the C99 standard where appropriate.  The current implementation will raise :"
"exc:`ValueError` for invalid operations like ``sqrt(-1.0)`` or ``log(0.0)`` "
"(where C99 Annex F recommends signaling invalid operation or divide-by-"
"zero), and :exc:`OverflowError` for results that overflow (for example, "
"``exp(1000.0)``).  A NaN will not be returned from any of the functions "
"above unless one or more of the input arguments was a NaN; in that case, "
"most functions will return a NaN, but (again following C99 Annex F) there "
"are some exceptions to this rule, for example ``pow(float('nan'), 0.0)`` or "
"``hypot(float('nan'), float('inf'))``."
msgstr ""
":mod:`math` モジュールは、ほとんどが実行プラットフォームにおける C 言語の数学"
"ライブラリ関数に対する薄いラッパでできています。\n"
"例外時の挙動は、適切である限り C99 標準の Annex F に従います。\n"
"現在の実装では、``sqrt(-1.0)`` や ``log(0.0)`` といった (C99 Annex F で不正な"
"演算やゼロ除算を通知することが推奨されている) 不正な操作に対して :exc:"
"`ValueError` を送出し、(例えば ``exp(1000.0)`` のような) 演算結果がオーバーフ"
"ローする場合には :exc:`OverflowError` を送出します。\n"
"上記の関数群は、1つ以上の引数が NaN であった場合を除いて NaN を返しません。\n"
"引数に NaN が与えられた場合は、殆どの関数は NaN を返しますが、 (C99 Annex F "
"に従って) 別の動作をする場合があります。\n"
"例えば、 ``pow(float('nan'), 0.0)`` や ``hypot(float('nan'), float('inf'))`` "
"といった場合です。\n"
"訳注: 例外が発生せずに結果が返ると、計算結果がおかしくなった原因が複素数を渡"
"したためだということに気づくのが遅れる可能性があります。"

#: ../../library/math.rst:582
msgid ""
"Note that Python makes no effort to distinguish signaling NaNs from quiet "
"NaNs, and behavior for signaling NaNs remains unspecified. Typical behavior "
"is to treat all NaNs as though they were quiet."
msgstr ""
"Python は signaling NaN と quiet NaN を区別せず、signaling NaN に対する挙動は"
"未定義とされていることに注意してください。典型的な挙動は、全ての NaN を "
"quiet NaN として扱うことです。"

#: ../../library/math.rst:589
msgid "Module :mod:`cmath`"
msgstr ":mod:`cmath` モジュール"

#: ../../library/math.rst:590
msgid "Complex number versions of many of these functions."
msgstr "これらの多くの関数の複素数版。"
