# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2017
# Satoshi Nakamatsu <satoshicano@gmail.com>, 2017
# E. Kawashima, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2017
# Arihiro TAKASE, 2017
# Yuto <ogran.std@gmail.com>, 2019
# tomo, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 12:40+0000\n"
"PO-Revision-Date: 2017-02-16 23:30+0000\n"
"Last-Translator: tomo, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/test.rst:2
msgid ":mod:`test` --- Regression tests package for Python"
msgstr ":mod:`test` --- Python 用回帰テストパッケージ"

#: ../../library/test.rst:10
msgid ""
"The :mod:`test` package is meant for internal use by Python only. It is "
"documented for the benefit of the core developers of Python. Any use of this"
" package outside of Python's standard library is discouraged as code "
"mentioned here can change or be removed without notice between releases of "
"Python."
msgstr ""
":mod:`test` パッケージは Python の内部利用専用です。\n"
"ドキュメント化されているのは Python のコア開発者のためです。\n"
"ここで述べられているコードは Python のリリースで予告なく変更されたり、削除される可能性があるため、Python 標準ライブラリー外でこのパッケージを使用することは推奨されません。"

#: ../../library/test.rst:18
msgid ""
"The :mod:`test` package contains all regression tests for Python as well as "
"the modules :mod:`test.support` and :mod:`test.regrtest`. "
":mod:`test.support` is used to enhance your tests while :mod:`test.regrtest`"
" drives the testing suite."
msgstr ""
":mod:`test` パッケージには、Python 用の全ての回帰テストの他に、 :mod:`test.support` モジュールと "
":mod:`test.regrtest` モジュールが入っています。 :mod:`test.support` はテストを充実させるために使い、 "
":mod:`test.regrtest` はテストスイートを実行するのに使います。"

#: ../../library/test.rst:23
msgid ""
"Each module in the :mod:`test` package whose name starts with ``test_`` is a"
" testing suite for a specific module or feature. All new tests should be "
"written using the :mod:`unittest` or :mod:`doctest` module.  Some older "
"tests are written using a \"traditional\" testing style that compares output"
" printed to ``sys.stdout``; this style of test is considered deprecated."
msgstr ""
":mod:`test` パッケージ内のモジュールのうち、名前が ``test_`` "
"で始まるものは、特定のモジュールや機能に対するテストスイートです。新しいテストはすべて :mod:`unittest` か :mod:`doctest`"
" モジュールを使って書くようにしてください。古いテストのいくつかは、 ``sys.stdout`` "
"への出力を比較する「従来の」テスト形式になっていますが、この形式のテストは廃止予定です。"

#: ../../library/test.rst:33
msgid "Module :mod:`unittest`"
msgstr ":mod:`unittest` モジュール"

#: ../../library/test.rst:33
msgid "Writing PyUnit regression tests."
msgstr "PyUnit 回帰テストを書く。"

#: ../../library/test.rst:35
msgid "Module :mod:`doctest`"
msgstr ":mod:`doctest` モジュール"

#: ../../library/test.rst:36
msgid "Tests embedded in documentation strings."
msgstr "ドキュメンテーション文字列に埋め込まれたテスト。"

#: ../../library/test.rst:42
msgid "Writing Unit Tests for the :mod:`test` package"
msgstr ":mod:`test` パッケージのためのユニットテストを書く"

#: ../../library/test.rst:44
msgid ""
"It is preferred that tests that use the :mod:`unittest` module follow a few "
"guidelines. One is to name the test module by starting it with ``test_`` and"
" end it with the name of the module being tested. The test methods in the "
"test module should start with ``test_`` and end with a description of what "
"the method is testing. This is needed so that the methods are recognized by "
"the test driver as test methods. Also, no documentation string for the "
"method should be included. A comment (such as ``# Tests function returns "
"only True or False``) should be used to provide documentation for test "
"methods. This is done because documentation strings get printed out if they "
"exist and thus what test is being run is not stated."
msgstr ""
":mod:`unittest` モジュールを使ってテストを書く場合、幾つかのガイドラインに従うことが推奨されます。 1つは、テストモジュールの名前を、 "
"``test_`` で始め、テスト対象となるモジュール名で終えることです。テストモジュール中のテストメソッドは名前を ``test_`` "
"で始めて、そのメソッドが何をテストしているかという説明で終えます。これはテスト実行プログラムが、そのメソッドをテストメソッドとして認識するために必要です。また、テストメソッドにはドキュメンテーション文字列を入れるべきではありません。コメント（例えば"
" ``# True あるいは False だけを返すテスト関数`` "
"）を使用して、テストメソッドのドキュメントを記述してください。これは、ドキュメンテーション文字列が存在する場合はその内容が出力されてしまうため、どのテストを実行しているのかをいちいち表示したくないからです。"

#: ../../library/test.rst:55
msgid "A basic boilerplate is often used::"
msgstr "以下のような決まり文句を使います::"

#: ../../library/test.rst:88
msgid ""
"This code pattern allows the testing suite to be run by "
":mod:`test.regrtest`, on its own as a script that supports the "
":mod:`unittest` CLI, or via the ``python -m unittest`` CLI."
msgstr ""
"このコードのパターンを使うと :mod:`test.regrtest` からテストスイートを実行でき、 :mod:`unittest` "
"のコマンドラインインターフェースをサポートしているスクリプトとして自分自身を起動したり、 ``python -m unittest`` "
"というコマンドラインインターフェースを通して起動したりできます。"

#: ../../library/test.rst:92
msgid ""
"The goal for regression testing is to try to break code. This leads to a few"
" guidelines to be followed:"
msgstr "回帰テストの目的はコードを解き明かすことです。そのためには以下のいくつかのガイドラインに従ってください:"

#: ../../library/test.rst:95
msgid ""
"The testing suite should exercise all classes, functions, and constants. "
"This includes not just the external API that is to be presented to the "
"outside world but also \"private\" code."
msgstr ""
"テストスイートから、すべてのクラス、関数および定数を実行するべきです。これには外部に公開される外部APIだけでなく「プライベートな」コードも含みます。"

#: ../../library/test.rst:99
msgid ""
"Whitebox testing (examining the code being tested when the tests are being "
"written) is preferred. Blackbox testing (testing only the published user "
"interface) is not complete enough to make sure all boundary and edge cases "
"are tested."
msgstr ""
"ホワイトボックス・テスト（対象のコードの詳細を元にテストを書くこと）を推奨します。ブラックボックス・テスト（公開されるインタフェース仕様だけをテストすること）は、すべての境界条件を確実にテストするには完全ではありません。"

#: ../../library/test.rst:104
msgid ""
"Make sure all possible values are tested including invalid ones. This makes "
"sure that not only all valid values are acceptable but also that improper "
"values are handled correctly."
msgstr ""
"すべての取りうる値を、無効値も含めてテストするようにしてください。そのようなテストを書くことで、全ての有効値が通るだけでなく、不適切な値が正しく処理されることも確認できます。"

#: ../../library/test.rst:108
msgid ""
"Exhaust as many code paths as possible. Test where branching occurs and thus"
" tailor input to make sure as many different paths through the code are "
"taken."
msgstr ""
"コード内のできる限り多くのパスを網羅してください。分岐するように入力を調整したテストを書くことで、コードの多くのパスをたどることができます。"

#: ../../library/test.rst:111
msgid ""
"Add an explicit test for any bugs discovered for the tested code. This will "
"make sure that the error does not crop up again if the code is changed in "
"the future."
msgstr ""
"テスト対象のコードにバグが発見された場合は、明示的にテスト追加するようにしてください。そのようなテストを追加することで、将来コードを変更した際にエラーが再発することを防止できます。"

#: ../../library/test.rst:115
msgid ""
"Make sure to clean up after your tests (such as close and remove all "
"temporary files)."
msgstr "テストの後始末 (例えば一時ファイルをすべて閉じたり削除したりすること) を必ず行ってください。"

#: ../../library/test.rst:118
msgid ""
"If a test is dependent on a specific condition of the operating system then "
"verify the condition already exists before attempting the test."
msgstr "テストがオペレーティングシステムの特定の状況に依存する場合、テスト開始時に条件を満たしているかを検証してください。"

#: ../../library/test.rst:121
msgid ""
"Import as few modules as possible and do it as soon as possible. This "
"minimizes external dependencies of tests and also minimizes possible "
"anomalous behavior from side-effects of importing a module."
msgstr ""
"インポートするモジュールをできるかぎり少なくし、可能な限り早期にインポートを行ってください。そうすることで、テストの外部依存性を最小限にし、モジュールのインポートによる副作用から生じる変則的な動作を最小限にできます。"

#: ../../library/test.rst:125
msgid ""
"Try to maximize code reuse. On occasion, tests will vary by something as "
"small as what type of input is used. Minimize code duplication by "
"subclassing a basic test class with a class that specifies the input::"
msgstr ""
"できる限りテストコードを再利用するようにしましょう。時として、入力の違いだけを記述すれば良くなるくらい、テストコードを小さくすることができます。例えば以下のように、サブクラスで入力を指定することで、コードの重複を最小化することができます::"

#: ../../library/test.rst:145
msgid ""
"When using this pattern, remember that all classes that inherit from "
":class:`unittest.TestCase` are run as tests.  The :class:`Mixin` class in "
"the example above does not have any data and so can't be run by itself, thus"
" it does not inherit from :class:`unittest.TestCase`."
msgstr ""
"このパターンを使うときには、 :class:`unittest.TestCase`  を継承した全てのクラスがテストとして実行されることを忘れないでください。\n"
"上の例の :class:`Mixin` クラスはテストデータを持っておらず、それ自身は実行できないので、 :class:`unittest.TestCase` を継承していません。"

#: ../../library/test.rst:153
msgid "Test Driven Development"
msgstr "Test Driven Development"

#: ../../library/test.rst:154
msgid "A book by Kent Beck on writing tests before code."
msgstr "コードより前にテストを書く方法論に関する Kent Beck の著書。"

#: ../../library/test.rst:160
msgid "Running tests using the command-line interface"
msgstr "コマンドラインインタフェースを利用してテストを実行する"

#: ../../library/test.rst:162
msgid ""
"The :mod:`test` package can be run as a script to drive Python's regression "
"test suite, thanks to the :option:`-m` option: :program:`python -m test`. "
"Under the hood, it uses :mod:`test.regrtest`; the call :program:`python -m "
"test.regrtest` used in previous Python versions still works.  Running the "
"script by itself automatically starts running all regression tests in the "
":mod:`test` package. It does this by finding all modules in the package "
"whose name starts with ``test_``, importing them, and executing the function"
" :func:`test_main` if present or loading the tests via "
"unittest.TestLoader.loadTestsFromModule if ``test_main`` does not exist.  "
"The names of tests to execute may also be passed to the script. Specifying a"
" single regression test (:program:`python -m test test_spam`) will minimize "
"output and only print whether the test passed or failed."
msgstr ""
":mod:`test` パッケージはスクリプトとして Python の回帰テストスイートを実行できます。\n"
":option:`-m` オプションを利用して、 :program:`python -m test.regrtest` として実行します。\n"
"この仕組みの内部では :mod:`test.regrtest`; を使っています; 古いバージョンの Python で使われている :program:`python -m test.regrtest` という呼び出しは今でも上手く動きます。\n"
"スクリプトを実行すると、自動的に :mod:`test` パッケージ内のすべての回帰テストを実行し始めます。\n"
"パッケージ内の名前が ``test_`` で始まる全モジュールを見つけ、それをインポートし、もしあるなら関数 :func:`test_main` を実行し、 ``test_main`` が無い場合は unittest.TestLoader.loadTestsFromModule からテストをロードしてテストを実行します。\n"
"実行するテストの名前もスクリプトに渡される可能性があります。\n"
"単一の回帰テストを指定 (:program:`python -m test test_spam`) すると、出力を最小限にし、テストが成功したかあるいは失敗したかだけを出力します。"

#: ../../library/test.rst:175
msgid ""
"Running :mod:`test` directly allows what resources are available for tests "
"to use to be set. You do this by using the ``-u`` command-line option. "
"Specifying ``all`` as the value for the ``-u`` option enables all possible "
"resources: :program:`python -m test -uall`. If all but one resource is "
"desired (a more common case), a comma-separated list of resources that are "
"not desired may be listed after ``all``. The command :program:`python -m "
"test -uall,-audio,-largefile` will run :mod:`test` with all resources except"
" the ``audio`` and ``largefile`` resources. For a list of all resources and "
"more command-line options, run :program:`python -m test -h`."
msgstr ""
"直接 :mod:`test` を実行すると、テストに利用するリソースを設定できます。これを行うには、 ``-u`` コマンドラインオプションを使います。"
" ``-u`` のオプションに ``all`` を指定すると、すべてのリソースを有効にします: :program:`python -m test "
"-uall` 。(よくある場合ですが) 何か一つを除く全てが必要な場合、カンマで区切った不要なリソースのリストを ``all`` "
"の後に並べます。コマンド :program:`python -m test -uall,-audio,-largefile` とすると、 "
"``audio`` と ``largefile`` リソースを除く全てのリソースを使って :mod:`test` "
"を実行します。すべてのリソースのリストと追加のコマンドラインオプションを出力するには、 :program:`python -m test -h` "
"を実行してください。"

#: ../../library/test.rst:186
msgid ""
"Some other ways to execute the regression tests depend on what platform the "
"tests are being executed on. On Unix, you can run :program:`make test` at "
"the top-level directory where Python was built. On Windows, executing "
":program:`rt.bat` from your :file:`PCbuild` directory will run all "
"regression tests."
msgstr ""
"テストを実行しようとするプラットフォームによっては、回帰テストを実行する別の方法があります。 Unix では、Python "
"をビルドしたトップレベルディレクトリで :program:`make test` を実行できます。 Windows上では、 "
":file:`PCbuild` ディレクトリから :program:`rt.bat` を実行すると、すべての回帰テストを実行します。"

#: ../../library/test.rst:194
msgid ":mod:`test.support` --- Utilities for the Python test suite"
msgstr ":mod:`test.support` --- テストのためのユーティリティ関数"

#: ../../library/test.rst:200
msgid ""
"The :mod:`test.support` module provides support for Python's regression test"
" suite."
msgstr ":mod:`test.support` モジュールでは、 Python の回帰テストに対するサポートを提供しています。"

#: ../../library/test.rst:205
msgid ""
":mod:`test.support` is not a public module.  It is documented here to help "
"Python developers write tests.  The API of this module is subject to change "
"without backwards compatibility concerns between releases."
msgstr ""
":mod:`test.support` はパブリックなモジュールではありません。\n"
"ここでドキュメント化されているのは Python 開発者がテストを書くのを助けるためです。\n"
"このモジュールの API はリリース間で後方非互換な変更がなされる可能性があります。"

#: ../../library/test.rst:210
msgid "This module defines the following exceptions:"
msgstr "このモジュールは次の例外を定義しています:"

#: ../../library/test.rst:214
msgid ""
"Exception to be raised when a test fails. This is deprecated in favor of "
":mod:`unittest`\\ -based tests and :class:`unittest.TestCase`'s assertion "
"methods."
msgstr ""
"テストが失敗したとき送出される例外です。これは、 :mod:`unittest` ベースのテストでは廃止予定で、 "
":class:`unittest.TestCase` の assertXXX メソッドが推奨されます。"

#: ../../library/test.rst:221
msgid ""
"Subclass of :exc:`unittest.SkipTest`. Raised when a resource (such as a "
"network connection) is not available. Raised by the :func:`requires` "
"function."
msgstr ""
":exc:`unittest.SkipTest` のサブクラスです。 (ネットワーク接続のような) リソースが利用できないとき送出されます。 "
":func:`requires` 関数によって送出されます。"

#: ../../library/test.rst:226
msgid "The :mod:`test.support` module defines the following constants:"
msgstr ":mod:`test.support` モジュールでは、以下の定数を定義しています:"

#: ../../library/test.rst:230
msgid ""
"``True`` when verbose output is enabled. Should be checked when more "
"detailed information is desired about a running test. *verbose* is set by "
":mod:`test.regrtest`."
msgstr ""
"冗長な出力が有効な場合は ``True`` です。実行中のテストについてのより詳細な情報が欲しいときにチェックします。 *verbose* は "
":mod:`test.regrtest` によって設定されます。"

#: ../../library/test.rst:237
msgid "``True`` if the running interpreter is Jython."
msgstr "実行中のインタプリタが Jython ならば ``True`` になります。"

#: ../../library/test.rst:242
msgid "``True`` if the system is Android."
msgstr "システムが Android の場合 ``True`` になります。"

#: ../../library/test.rst:247
msgid "Path for shell if not on Windows; otherwise ``None``."
msgstr "Windows 以外ではシェルのパスです; そうでない場合は ``None`` です。"

#: ../../library/test.rst:252
msgid "A non-ASCII character encodable by :func:`os.fsencode`."
msgstr ":func:`os.fsencode` でエンコードできる 非 ASCII 文字。"

#: ../../library/test.rst:257
msgid ""
"Set to a name that is safe to use as the name of a temporary file.  Any "
"temporary file that is created should be closed and unlinked (removed)."
msgstr ""
"テンポラリファイルの名前として安全に利用できる名前に設定されます。作成した一時ファイルは全て閉じ、unlink (削除) しなければなりません。"

#: ../../library/test.rst:263
msgid "Set to a non-ASCII name for a temporary file."
msgstr "非 ASCII 名を一時ファイルに設定します。"

#: ../../library/test.rst:268
msgid "Set to :func:`sys.getfilesystemencoding`."
msgstr ":func:`sys.getfilesystemencoding` を設定します。"

#: ../../library/test.rst:273
msgid ""
"Set to a filename (str type) that should not be able to be encoded by file "
"system encoding in strict mode.  It may be ``None`` if it's not possible to "
"generate such a filename."
msgstr ""

#: ../../library/test.rst:280
msgid ""
"Set to a filename (bytes type) that should not be able to be decoded by file"
" system encoding in strict mode.  It may be ``None`` if it's not possible to"
" generate such a filename."
msgstr ""

#: ../../library/test.rst:287
msgid "Set to a filename containing the :data:`FS_NONASCII` character."
msgstr ":data:`FS_NONASCII` 文字を含むファイル名を設定します。"

#: ../../library/test.rst:292
msgid "Set to ``True`` if IPV6 is enabled on this host, ``False`` otherwise."
msgstr "このホストで IPV6 が有効化されている場合 ``True`` に、そうでない場合 ``False`` に設定されます。"

#: ../../library/test.rst:297
msgid "Set to :func:`os.getcwd`."
msgstr ":func:`os.getcwd` に設定されます。"

#: ../../library/test.rst:302
msgid "Set when tests can be skipped when they are not useful for PGO."
msgstr "テストが PGO (Profile Guided Optimization) の役に立たないときにスキップできるなら設定します。"

#: ../../library/test.rst:307
msgid ""
"A constant that is likely larger than the underlying OS pipe buffer size, to"
" make writes blocking."
msgstr "書き込みをブロックするための、基底にある OS のパイプバッファサイズより大きいであろう定数。"

#: ../../library/test.rst:313
msgid ""
"A constant that is likely larger than the underlying OS socket buffer size, "
"to make writes blocking."
msgstr "書き込みをブロックするための、基底にある OS のソケットバッファサイズより大きいであろう定数。"

#: ../../library/test.rst:319
msgid "Set to the top level directory that contains :mod:`test.support`."
msgstr ":mod:`test.support` を含んだトップディレクトリを設定します。"

#: ../../library/test.rst:324
msgid "Set to the top level directory for the test package."
msgstr "テストパッケージのトップディレクトリを設定します。"

#: ../../library/test.rst:329
msgid "Set to the ``data`` directory within the test package."
msgstr "テストパッケージ内の ``data`` ディレクトリを設定します。"

#: ../../library/test.rst:334
msgid "Set to :data:`sys.maxsize` for big memory tests."
msgstr "大量のメモリを使うテストのための  :data:`sys.maxsize` を設定します。"

#: ../../library/test.rst:339
msgid ""
"Set by :func:`set_memlimit` as the memory limit for big memory tests. "
"Limited by :data:`MAX_Py_ssize_t`."
msgstr ""
"大量のメモリを使うテストのためのメモリ上限となる :func:`set_memlimit` を設定します。\n"
":data:`MAX_Py_ssize_t` が設定上限です。"

#: ../../library/test.rst:345
msgid ""
"Set by :func:`set_memlimit` as the memory limit for big memory tests.  Not "
"limited by :data:`MAX_Py_ssize_t`."
msgstr ""
"大量のメモリを使うテストのためのメモリ上限となる :func:`set_memlimit` を設定します。\n"
":data:`MAX_Py_ssize_t` の設定上限はありません。"

#: ../../library/test.rst:351
msgid ""
"Return ``True`` if running on CPython, not on Windows, and configuration not"
" set with ``WITH_DOC_STRINGS``."
msgstr ""
"CPython 上で実行されていて、Windows 上ではなく、 ``WITH_DOC_STRINGS`` が設定されていない場合に ``True`` "
"を返します。"

#: ../../library/test.rst:357
msgid "Check for presence of docstrings."
msgstr "docstring があるかを確認します。"

#: ../../library/test.rst:362
msgid "Define the URL of a dedicated HTTP server for the network tests."
msgstr "ネットワークテスト専用の HTTP サーバーの URL を定義します。"

#: ../../library/test.rst:367
msgid "Object that is equal to anything.  Used to test mixed type comparison."
msgstr ""

#: ../../library/test.rst:372
msgid ""
"Object that is greater than anything (except itself). Used to test mixed "
"type comparison."
msgstr ""

#: ../../library/test.rst:378
msgid ""
"Object that is less than anything (except itself). Used to test mixed type "
"comparison."
msgstr ""

#: ../../library/test.rst:382
msgid "The :mod:`test.support` module defines the following functions:"
msgstr ":mod:`test.support` モジュールでは、以下の関数を定義しています:"

#: ../../library/test.rst:386
msgid ""
"Remove the module named *module_name* from ``sys.modules`` and delete any "
"byte-compiled files of the module."
msgstr ""
"モジュール名 *module_name* を ``sys.modules`` から取り除き、モジュールのバイトコンパイル済みファイルを全て削除します。"

#: ../../library/test.rst:392
msgid "Delete *name* from ``sys.modules``."
msgstr "``sys.modules`` から *name* を削除します。"

#: ../../library/test.rst:397
msgid ""
"Call :func:`os.unlink` on *filename*.  On Windows platforms, this is wrapped"
" with a wait loop that checks for the existence fo the file."
msgstr ""

#: ../../library/test.rst:403
msgid ""
"Call :func:`os.rmdir` on *filename*.  On Windows platforms, this is wrapped "
"with a wait loop that checks for the existence of the file."
msgstr ""

#: ../../library/test.rst:409
msgid ""
"Call :func:`shutil.rmtree` on *path* or call :func:`os.lstat` and "
":func:`os.rmdir` to remove a path and its contents.  On Windows platforms, "
"this is wrapped with a wait loop that checks for the existence of the files."
msgstr ""

#: ../../library/test.rst:416
msgid ""
"Move a :pep:`3147`/:pep:`488` pyc file to its legacy pyc location and return"
" the file system path to the legacy pyc file.  The *source* value is the "
"file system path to the source file.  It does not need to exist, however the"
" PEP 3147/488 pyc file must exist."
msgstr ""

#: ../../library/test.rst:424
msgid ""
"Return ``True`` if *resource* is enabled and available. The list of "
"available resources is only set when :mod:`test.regrtest` is executing the "
"tests."
msgstr ""
"*resource* が有効で利用可能ならば ``True`` を返します。利用可能なリソースのリストは、 :mod:`test.regrtest` "
"がテストを実行している間のみ設定されます。"

#: ../../library/test.rst:431
msgid "Return ``True`` if Python was not built with ``-O0`` or ``-Og``."
msgstr ""

#: ../../library/test.rst:436
msgid "Return :data:`_testcapi.WITH_PYMALLOC`."
msgstr ""

#: ../../library/test.rst:441
msgid ""
"Raise :exc:`ResourceDenied` if *resource* is not available. *msg* is the "
"argument to :exc:`ResourceDenied` if it is raised. Always returns ``True`` "
"if called by a function whose ``__name__`` is ``'__main__'``. Used when "
"tests are executed by :mod:`test.regrtest`."
msgstr ""
"*resource* が利用できなければ、 :exc:`ResourceDenied` を送出します。その場合、 *msg* は "
":exc:`ResourceDenied` の引数になります。 ``__name__`` が ``'__main__'`` "
"である関数にから呼び出された場合には常に ``True`` を返します。テストを :mod:`test.regrtest` "
"から実行するときに使われます。"

#: ../../library/test.rst:449
msgid ""
"Raise :exc:`unittest.SkipTest` on TLS certification validation failures."
msgstr ""

#: ../../library/test.rst:454
msgid "Return a repr of *dict* with keys sorted."
msgstr ""

#: ../../library/test.rst:459
msgid ""
"Return the path to the file named *filename*. If no match is found "
"*filename* is returned. This does not equal a failure since it could be the "
"path to the file."
msgstr ""
"*filename* という名前のファイルへのパスを返します。一致するものが見つからなければ、 *filename* 自体を返します。 "
"*filename* 自体もファイルへのパスでありえるので、 *filename* が返っても失敗ではありません。"

#: ../../library/test.rst:463
msgid ""
"Setting *subdir* indicates a relative path to use to find the file rather "
"than looking directly in the path directories."
msgstr "*subdir* を設定することで、パスのディレクトリを直接見に行くのではなく、相対パスを使って見付けにいくように指示できます。"

#: ../../library/test.rst:469
msgid ""
"Create an empty file with *filename*.  If it already exists, truncate it."
msgstr ""

#: ../../library/test.rst:474
msgid "Count the number of open file descriptors."
msgstr ""

#: ../../library/test.rst:479
msgid "Match *test* to patterns set in :func:`set_match_tests`."
msgstr ""

#: ../../library/test.rst:484
msgid "Define match test with regular expression *patterns*."
msgstr ""

#: ../../library/test.rst:489
msgid ""
"Execute :class:`unittest.TestCase` subclasses passed to the function. The "
"function scans the classes for methods starting with the prefix ``test_`` "
"and executes the tests individually."
msgstr ""
"渡された :class:`unittest.TestCase` サブクラスを実行します。この関数は名前が ``test_`` "
"で始まるメソッドを探して、テストを個別に実行します。"

#: ../../library/test.rst:493
msgid ""
"It is also legal to pass strings as parameters; these should be keys in "
"``sys.modules``. Each associated module will be scanned by "
"``unittest.TestLoader.loadTestsFromModule()``. This is usually seen in the "
"following :func:`test_main` function::"
msgstr ""
"引数に文字列を渡すことも許可されています。その場合、文字列は ``sys.module`` のキーでなければなりません。指定された各モジュールは、 "
"``unittest.TestLoader.loadTestsFromModule()`` でスキャンされます。この関数は、よく次のような "
":func:`test_main` 関数の形で利用されます。 ::"

#: ../../library/test.rst:501
msgid "This will run all tests defined in the named module."
msgstr "この関数は、名前で指定されたモジュールの中の全ての定義されたテストを実行します。"

#: ../../library/test.rst:506
msgid ""
"Run :func:`doctest.testmod` on the given *module*.  Return ``(failure_count,"
" test_count)``."
msgstr ""
"与えられた *module* の :func:`doctest.testmod` を実行します。``(failure_count, "
"test_count)`` を返します。"

#: ../../library/test.rst:509
msgid ""
"If *verbosity* is ``None``, :func:`doctest.testmod` is run with verbosity "
"set to :data:`verbose`.  Otherwise, it is run with verbosity set to "
"``None``.  *optionflags* is passed as ``optionflags`` to "
":func:`doctest.testmod`."
msgstr ""

#: ../../library/test.rst:517
msgid ""
"Set the :func:`sys.setswitchinterval` to the given *interval*.  Defines a "
"minimum interval for Android systems to prevent the system from hanging."
msgstr ""

#: ../../library/test.rst:523
msgid ""
"Use this check to guard CPython's implementation-specific tests or to run "
"them only on the implementations guarded by the arguments::"
msgstr ""

#: ../../library/test.rst:533
msgid ""
"A convenience wrapper for :func:`warnings.catch_warnings()` that makes it "
"easier to test that a warning was correctly raised.  It is approximately "
"equivalent to calling ``warnings.catch_warnings(record=True)`` with "
":meth:`warnings.simplefilter` set to ``always`` and with the option to "
"automatically validate the results that are recorded."
msgstr ""
"warning が正しく発行されているかどうかチェックする、 :func:`warnings.catch_warnings()` "
"を使いやすくするラッパーです。これは、 :meth:`warnings.simplefilter` を ``always`` "
"に設定して、記録された結果を自動的に検証するオプションと共に ``warnings.catch_warnings(record=True)`` "
"を呼ぶのとほぼ同じです。"

#: ../../library/test.rst:539
msgid ""
"``check_warnings`` accepts 2-tuples of the form ``(\"message regexp\", "
"WarningCategory)`` as positional arguments. If one or more *filters* are "
"provided, or if the optional keyword argument *quiet* is ``False``, it "
"checks to make sure the warnings are as expected:  each specified filter "
"must match at least one of the warnings raised by the enclosed code or the "
"test fails, and if any warnings are raised that do not match any of the "
"specified filters the test fails.  To disable the first of these checks, set"
" *quiet* to ``True``."
msgstr ""
"``check_warnings`` は ``(\"message regexp\", WarningCategory)`` の形をした "
"2要素タプルを位置引数として受け取ります。1つ以上の *filters* が与えられた場合や、オプションのキーワード引数 *quiet* が "
"``False`` の場合、警告が期待通りであるかどうかをチェックします。指定された各 filter "
"は最低でも1回は囲われたコード内で発生した警告とマッチしなければテストが失敗しますし、指定されたどの filter "
"ともマッチしない警告が発生してもテストが失敗します。前者のチェックを無効にするには、*quiet* を ``True`` にします。"

#: ../../library/test.rst:548
msgid "If no arguments are specified, it defaults to::"
msgstr "引数が1つもない場合、デフォルトでは次のようになります::"

#: ../../library/test.rst:552
msgid "In this case all warnings are caught and no errors are raised."
msgstr "この場合、全ての警告は補足され、エラーは発生しません。"

#: ../../library/test.rst:554
msgid ""
"On entry to the context manager, a :class:`WarningRecorder` instance is "
"returned. The underlying warnings list from :func:`~warnings.catch_warnings`"
" is available via the recorder object's :attr:`warnings` attribute.  As a "
"convenience, the attributes of the object representing the most recent "
"warning can also be accessed directly through the recorder object (see "
"example below).  If no warning has been raised, then any of the attributes "
"that would otherwise be expected on an object representing a warning will "
"return ``None``."
msgstr ""
"コンテキストマネージャーに入る時、 :class:`WarningRecorder` インスタンスが返されます。このレコーダーオブジェクトの "
":attr:`warnings` 属性から、 :func:`~warnings.catch_warnings` "
"から得られる警告のリストを取得することができます。便利さのために、レコーダーオブジェクトから直接、一番最近に発生した警告を表すオブジェクトの属性にアクセスできます(以下にある例を参照してください)。警告が1つも発生しなかった場合、それらの全ての属性は"
" ``None`` を返します。"

#: ../../library/test.rst:563
msgid ""
"The recorder object also has a :meth:`reset` method, which clears the "
"warnings list."
msgstr "レコーダーオブジェクトの :meth:`reset` メソッドは警告リストをクリアします。"

#: ../../library/test.rst:566
msgid "The context manager is designed to be used like this::"
msgstr "コンテキストマネージャーは次のようにして使います::"

#: ../../library/test.rst:573
msgid ""
"In this case if either warning was not raised, or some other warning was "
"raised, :func:`check_warnings` would raise an error."
msgstr ""
"この場合、どちらの警告も発生しなかった場合や、それ以外の警告が発生した場合は、 :func:`check_warnings` はエラーを発生させます。"

#: ../../library/test.rst:576
msgid ""
"When a test needs to look more deeply into the warnings, rather than just "
"checking whether or not they occurred, code like this can be used::"
msgstr "警告が発生したかどうかだけでなく、もっと詳しいチェックが必要な場合は、次のようなコードになります::"

#: ../../library/test.rst:590
msgid ""
"Here all warnings will be caught, and the test code tests the captured "
"warnings directly."
msgstr "全ての警告をキャプチャし、テストコードがその警告を直接テストします。"

#: ../../library/test.rst:593
msgid "New optional arguments *filters* and *quiet*."
msgstr "新しいオプション引数 *filters* と *quiet*"

#: ../../library/test.rst:599
msgid ""
"Context manager to check that no :exc:`ResourceWarning` was raised.  You "
"must remove the object which may emit :exc:`ResourceWarning` before the end "
"of the context manager."
msgstr ""

#: ../../library/test.rst:606
msgid ""
"Set the values for :data:`max_memuse` and :data:`real_max_memuse` for big "
"memory tests."
msgstr ""

#: ../../library/test.rst:612
msgid ""
"Store the value from *stdout*.  It is meant to hold the stdout at the time "
"the regrtest began."
msgstr ""

#: ../../library/test.rst:618
msgid ""
"Return the original stdout set by :func:`record_original_stdout` or "
"``sys.stdout`` if it's not set."
msgstr ""

#: ../../library/test.rst:624
msgid ""
"Strip the *stderr* of a Python process from potential debug output emitted "
"by the interpreter.  This will typically be run on the result of "
":meth:`subprocess.Popen.communicate`."
msgstr ""

#: ../../library/test.rst:631
msgid ""
"Return a list of command line arguments reproducing the current settings in "
"``sys.flags`` and ``sys.warnoptions``."
msgstr ""

#: ../../library/test.rst:637
msgid ""
"Return a list of command line arguments reproducing the current optimization"
" settings in ``sys.flags``."
msgstr ""

#: ../../library/test.rst:645
msgid ""
"A context managers that temporarily replaces the named stream with "
":class:`io.StringIO` object."
msgstr "名前付きストリ－ムを :class:`io.StringIO` オブジェクトで一時的に置き換えるコンテキストマネージャです。"

#: ../../library/test.rst:648
msgid "Example use with output streams::"
msgstr "出力ストリームの使用例::"

#: ../../library/test.rst:656
msgid "Example use with input stream::"
msgstr "入力ストリ－ムの使用例::"

#: ../../library/test.rst:668
msgid ""
"A context manager that creates a temporary directory at *path* and yields "
"the directory."
msgstr "*path* に一時ディレクトリを作成し与えるコンテキストマネージャです。"

#: ../../library/test.rst:671
msgid ""
"If *path* is ``None``, the temporary directory is created using "
":func:`tempfile.mkdtemp`.  If *quiet* is ``False``, the context manager "
"raises an exception on error.  Otherwise, if *path* is specified and cannot "
"be created, only a warning is issued."
msgstr ""

#: ../../library/test.rst:679
msgid ""
"A context manager that temporarily changes the current working directory to "
"*path* and yields the directory."
msgstr "カレントディレクトリを一時的に *path* に変更し与えるコンテキストマネージャです。"

#: ../../library/test.rst:682
msgid ""
"If *quiet* is ``False``, the context manager raises an exception on error.  "
"Otherwise, it issues only a warning and keeps the current working directory "
"the same."
msgstr ""
"*quiet* が ``False`` の場合、コンテキストマネージャはエラーが起きると例外を送出します。\n"
"それ以外の場合には、警告を出すだけでカレントディレクトリは同じままにしておきます。"

#: ../../library/test.rst:689
msgid ""
"A context manager that temporarily creates a new directory and changes the "
"current working directory (CWD)."
msgstr ""
"一時的に新しいディレクトリを作成し、カレントディレクトリ (current working directory, CWD) "
"を変更するコンテキストマネージャです。"

#: ../../library/test.rst:692
msgid ""
"The context manager creates a temporary directory in the current directory "
"with name *name* before temporarily changing the current working directory."
"  If *name* is ``None``, the temporary directory is created using "
":func:`tempfile.mkdtemp`."
msgstr ""

#: ../../library/test.rst:697
msgid ""
"If *quiet* is ``False`` and it is not possible to create or change the CWD, "
"an error is raised.  Otherwise, only a warning is raised and the original "
"CWD is used."
msgstr ""
"*quiet* が ``False`` でカレントディレクトリの作成や変更ができない場合、例外を送出します。\n"
"それ以外の場合には、警告を出すだけで元のカレントディレクトリが使われます。"

#: ../../library/test.rst:704
msgid "A context manager that temporarily sets the process umask."
msgstr "一時的にプロセスの umask を設定するコンテキストマネージャ。"

#: ../../library/test.rst:709
msgid ""
"A context manager that raises :exc:`ResourceDenied` when various issues with"
" the internet connection manifest themselves as exceptions."
msgstr ""

#: ../../library/test.rst:715
msgid ""
"A context manager that replaces ``sys.stderr`` with ``sys.__stderr__``."
msgstr ""

#: ../../library/test.rst:720
msgid ""
"Force as many objects as possible to be collected.  This is needed because "
"timely deallocation is not guaranteed by the garbage collector.  This means "
"that ``__del__`` methods may be called later than expected and weakrefs may "
"remain alive for longer than expected."
msgstr ""

#: ../../library/test.rst:728
msgid ""
"A context manager that disables the garbage collector upon entry and "
"reenables it upon exit."
msgstr ""

#: ../../library/test.rst:734
msgid "Context manager to swap out an attribute with a new object."
msgstr ""

#: ../../library/test.rst:736 ../../library/test.rst:754
#: ../../library/test.rst:1117 ../../library/test.rst:1147
msgid "Usage::"
msgstr "使い方::"

#: ../../library/test.rst:741
msgid ""
"This will set ``obj.attr`` to 5 for the duration of the ``with`` block, "
"restoring the old value at the end of the block.  If ``attr`` doesn't exist "
"on ``obj``, it will be created and then deleted at the end of the block."
msgstr ""

#: ../../library/test.rst:746 ../../library/test.rst:764
msgid ""
"The old value (or ``None`` if it doesn't exist) will be assigned to the "
"target of the \"as\" clause, if there is one."
msgstr ""

#: ../../library/test.rst:752
msgid "Context manager to swap out an item with a new object."
msgstr ""

#: ../../library/test.rst:759
msgid ""
"This will set ``obj[\"item\"]`` to 5 for the duration of the ``with`` block,"
" restoring the old value at the end of the block. If ``item`` doesn't exist "
"on ``obj``, it will be created and then deleted at the end of the block."
msgstr ""

#: ../../library/test.rst:770
msgid ""
"Context manager to wait until all threads created in the ``with`` statement "
"exit."
msgstr ""

#: ../../library/test.rst:776
msgid ""
"Context manager to start *threads*.  It attempts to join the threads upon "
"exit."
msgstr ""

#: ../../library/test.rst:782
msgid ""
"Return :func:`struct.calcsize` for ``nP{fmt}0n`` or, if ``gettotalrefcount``"
" exists, ``2PnP{fmt}0P``."
msgstr ""

#: ../../library/test.rst:788
msgid ""
"Return :func:`struct.calcsize` for ``nPn{fmt}0n`` or, if "
"``gettotalrefcount`` exists, ``2PnPn{fmt}0P``."
msgstr ""

#: ../../library/test.rst:794
msgid ""
"For testcase *test*, assert that the ``sys.getsizeof`` for *o* plus the GC "
"header size equals *size*."
msgstr ""

#: ../../library/test.rst:800
msgid ""
"Return ``True`` if the OS supports symbolic links, ``False`` otherwise."
msgstr "OS がシンボリックリンクをサポートする場合 ``True`` を返し、その他の場合は ``False`` を返します。"

#: ../../library/test.rst:806
msgid "Return ``True`` if the OS supports xattr, ``False`` otherwise."
msgstr ""

#: ../../library/test.rst:812
msgid "A decorator for running tests that require support for symbolic links."
msgstr "シンボリックリンクのサポートが必要なテストを実行することを表すデコレータ。"

#: ../../library/test.rst:817
msgid "A decorator for running tests that require support for xattr."
msgstr ""

#: ../../library/test.rst:822
msgid ""
"A decorator for running tests that require a functional bind() for Unix "
"sockets."
msgstr ""

#: ../../library/test.rst:828
msgid ""
"A decorator to conditionally mark tests with "
":func:`unittest.expectedFailure`. Any use of this decorator should have an "
"associated comment identifying the relevant tracker issue."
msgstr ""
"ある条件で :func:`unittest.expectedFailure` の印をテストに付けるデコレータ。\n"
"このデコレータを使うときはいつも、関連する問題を指し示すコメントを付けておくべきです。"

#: ../../library/test.rst:835
msgid ""
"A decorator for running a function in a different locale, correctly "
"resetting it after it has finished.  *catstr* is the locale category as a "
"string (for example ``\"LC_ALL\"``).  The *locales* passed will be tried "
"sequentially, and the first valid locale will be used."
msgstr ""
"別のロケールで関数を実行し、完了したら適切に元の状態に戻すためのデコレータ。\n"
"*catstr* は (例えば ``\"LC_ALL\"`` のような) ロケールカテゴリを文字列で表したものです。\n"
"渡された *locales* が順々に試され、一番最初に出てきた妥当なロケールが使われます。"

#: ../../library/test.rst:843
msgid ""
"A decorator for running a function in a specific timezone, correctly "
"resetting it after it has finished."
msgstr ""

#: ../../library/test.rst:849
msgid ""
"Decorator for the minimum version when running test on FreeBSD.  If the "
"FreeBSD version is less than the minimum, raise :exc:`unittest.SkipTest`."
msgstr ""

#: ../../library/test.rst:855
msgid ""
"Decorator for the minimum version when running test on Linux.  If the Linux "
"version is less than the minimum, raise :exc:`unittest.SkipTest`."
msgstr ""

#: ../../library/test.rst:861
msgid ""
"Decorator for the minimum version when running test on Mac OS X.  If the MAC"
" OS X version is less than the minimum, raise :exc:`unittest.SkipTest`."
msgstr ""

#: ../../library/test.rst:867
msgid "Decorator for skipping tests on non-IEEE 754 platforms."
msgstr ""

#: ../../library/test.rst:872
msgid "Decorator for skipping tests if :mod:`zlib` doesn't exist."
msgstr ""

#: ../../library/test.rst:877
msgid "Decorator for skipping tests if :mod:`gzip` doesn't exist."
msgstr ""

#: ../../library/test.rst:882
msgid "Decorator for skipping tests if :mod:`bz2` doesn't exist."
msgstr ""

#: ../../library/test.rst:887
msgid "Decorator for skipping tests if :mod:`lzma` doesn't exist."
msgstr ""

#: ../../library/test.rst:892
msgid "Decorator for skipping tests if *resource* is not available."
msgstr ""

#: ../../library/test.rst:897
msgid "Decorator for only running the test if :data:`HAVE_DOCSTRINGS`."
msgstr ""

#: ../../library/test.rst:902
msgid "Decorator for tests only applicable to CPython."
msgstr ""

#: ../../library/test.rst:907
msgid ""
"Decorator for invoking :func:`check_impl_detail` on *guards*.  If that "
"returns ``False``, then uses *msg* as the reason for skipping the test."
msgstr ""

#: ../../library/test.rst:913
msgid ""
"Decorator to temporarily turn off tracing for the duration of the test."
msgstr ""

#: ../../library/test.rst:918
msgid ""
"Decorator for tests which involve reference counting.  The decorator does "
"not run the test if it is not run by CPython.  Any trace function is unset "
"for the duration of the test to prevent unexpected refcounts caused by the "
"trace function."
msgstr ""

#: ../../library/test.rst:926
msgid "Decorator to ensure the threads are cleaned up even if the test fails."
msgstr ""

#: ../../library/test.rst:931
msgid "Decorator for bigmem tests."
msgstr ""

#: ../../library/test.rst:933
msgid ""
"*size* is a requested size for the test (in arbitrary, test-interpreted "
"units.)  *memuse* is the number of bytes per unit for the test, or a good "
"estimate of it.  For example, a test that needs two byte buffers, of 4 GiB "
"each, could be decorated with ``@bigmemtest(size=_4G, memuse=2)``."
msgstr ""

#: ../../library/test.rst:938
msgid ""
"The *size* argument is normally passed to the decorated test method as an "
"extra argument.  If *dry_run* is ``True``, the value passed to the test "
"method may be less than the requested value.  If *dry_run* is ``False``, it "
"means the test doesn't support dummy runs when ``-M`` is not specified."
msgstr ""

#: ../../library/test.rst:946
msgid ""
"Decorator for tests that fill the address space.  *f* is the function to "
"wrap."
msgstr ""

#: ../../library/test.rst:952
msgid ""
"Create an invalid file descriptor by opening and closing a temporary file, "
"and returning its descriptor."
msgstr "一時ファイルを開いた後に閉じ、そのファイル記述子を返すことで無効な記述子を作成します。"

#: ../../library/test.rst:958
msgid ""
"Test for syntax errors in *statement* by attempting to compile *statement*. "
"*testcase* is the :mod:`unittest` instance for the test.  *errtext* is the "
"regular expression which should match the string representation of the "
"raised :exc:`SyntaxError`.  If *lineno* is not ``None``, compares to the "
"line of the exception.  If *offset* is not ``None``, compares to the offset "
"of the exception."
msgstr ""

#: ../../library/test.rst:968
msgid ""
"Test for syntax warning in *statement* by attempting to compile *statement*."
" Test also that the :exc:`SyntaxWarning` is emitted only once, and that it "
"will be converted to a :exc:`SyntaxError` when turned into error. *testcase*"
" is the :mod:`unittest` instance for the test.  *errtext* is the regular "
"expression which should match the string representation of the emitted "
":exc:`SyntaxWarning` and raised :exc:`SyntaxError`.  If *lineno* is not "
"``None``, compares to the line of the warning and exception. If *offset* is "
"not ``None``, compares to the offset of the exception."
msgstr ""

#: ../../library/test.rst:982
msgid "Open *url*.  If open fails, raises :exc:`TestFailed`."
msgstr ""

#: ../../library/test.rst:987
msgid ""
"This function imports and returns the named module. Unlike a normal import, "
"this function raises :exc:`unittest.SkipTest` if the module cannot be "
"imported."
msgstr ""
"この関数は *name* で指定されたモジュールをインポートして返します。通常のインポートと異なり、この関数はモジュールをインポートできなかった場合に "
":exc:`unittest.SkipTest` 例外を発生させます。"

#: ../../library/test.rst:991
msgid ""
"Module and package deprecation messages are suppressed during this import if"
" *deprecated* is ``True``.  If a module is required on a platform but "
"optional for others, set *required_on* to an iterable of platform prefixes "
"which will be compared against :data:`sys.platform`."
msgstr ""

#: ../../library/test.rst:1001
msgid ""
"This function imports and returns a fresh copy of the named Python module by"
" removing the named module from ``sys.modules`` before doing the import. "
"Note that unlike :func:`reload`, the original module is not affected by this"
" operation."
msgstr ""
"この関数は、 *name* で指定された Python モジュールを、インポート前に ``sys.modules`` "
"から削除することで新規にインポートしてそのコピーを返します。 :func:`reload` "
"関数と違い、もとのモジュールはこの操作によって影響をうけません。"

#: ../../library/test.rst:1006
msgid ""
"*fresh* is an iterable of additional module names that are also removed from"
" the ``sys.modules`` cache before doing the import."
msgstr "*fresh* は、同じようにインポート前に ``sys.modules`` から削除されるモジュール名の iterable です。"

#: ../../library/test.rst:1009
msgid ""
"*blocked* is an iterable of module names that are replaced with ``None`` in "
"the module cache during the import to ensure that attempts to import them "
"raise :exc:`ImportError`."
msgstr ""
"*blocked* もモジュール名のイテラブルで、インポート中にモジュールキャッシュ内でその名前を ``None`` "
"に置き換えることで、そのモジュールをインポートしようとすると :exc:`ImportError` を発生させます。"

#: ../../library/test.rst:1013
msgid ""
"The named module and any modules named in the *fresh* and *blocked* "
"parameters are saved before starting the import and then reinserted into "
"``sys.modules`` when the fresh import is complete."
msgstr ""
"指定されたモジュールと *fresh* や *blocked* 引数内のモジュール名はインポート前に保存され、フレッシュなインポートが完了したら "
"``sys.modules`` に戻されます。"

#: ../../library/test.rst:1017
msgid ""
"Module and package deprecation messages are suppressed during this import if"
" *deprecated* is ``True``."
msgstr "*deprecated* が ``True`` の場合、インポート中はモジュールとパッケージの廃止メッセージが抑制されます。"

#: ../../library/test.rst:1020
msgid ""
"This function will raise :exc:`ImportError` if the named module cannot be "
"imported."
msgstr "指定したモジュールがインポートできなかった場合に、この関数は :exc:`ImportError` を送出します。"

#: ../../library/test.rst:1023 ../../library/test.rst:1264
msgid "Example use::"
msgstr "使用例::"

#: ../../library/test.rst:1037
msgid "Return a copy of :data:`sys.modules`."
msgstr ""

#: ../../library/test.rst:1042
msgid ""
"Remove modules except for *oldmodules* and ``encodings`` in order to "
"preserve internal cache."
msgstr ""

#: ../../library/test.rst:1048
msgid "Return current thread count and copy of dangling threads."
msgstr ""

#: ../../library/test.rst:1053
msgid ""
"Cleanup up threads not specified in *original_values*.  Designed to emit a "
"warning if a test leaves running threads in the background."
msgstr ""

#: ../../library/test.rst:1059
msgid ""
"Join a *thread* within *timeout*.  Raise an :exc:`AssertionError` if thread "
"is still alive after *timeout* seconds."
msgstr ""

#: ../../library/test.rst:1065
msgid ""
"Use this at the end of ``test_main`` whenever sub-processes are started. "
"This will help ensure that no extra children (zombies) stick around to hog "
"resources and create problems when looking for refleaks."
msgstr ""

#: ../../library/test.rst:1072
msgid ""
"Get an attribute, raising :exc:`unittest.SkipTest` if :exc:`AttributeError` "
"is raised."
msgstr ""

#: ../../library/test.rst:1078
msgid ""
"Bind the socket to a free port and return the port number.  Relies on "
"ephemeral ports in order to ensure we are using an unbound port.  This is "
"important as many tests may be running simultaneously, especially in a "
"buildbot environment.  This method raises an exception if the "
"``sock.family`` is :const:`~socket.AF_INET` and ``sock.type`` is "
":const:`~socket.SOCK_STREAM`, and the socket has "
":const:`~socket.SO_REUSEADDR` or :const:`~socket.SO_REUSEPORT` set on it. "
"Tests should never set these socket options for TCP/IP sockets. The only "
"case for setting these options is testing multicasting via multiple UDP "
"sockets."
msgstr ""

#: ../../library/test.rst:1089
msgid ""
"Additionally, if the :const:`~socket.SO_EXCLUSIVEADDRUSE` socket option is "
"available (i.e. on Windows), it will be set on the socket.  This will "
"prevent anyone else from binding to our host/port for the duration of the "
"test."
msgstr ""

#: ../../library/test.rst:1097
msgid ""
"Bind a unix socket, raising :exc:`unittest.SkipTest` if "
":exc:`PermissionError` is raised."
msgstr ""

#: ../../library/test.rst:1103
msgid ""
"Context manager catching :class:`threading.Thread` exception using "
":func:`threading.excepthook`."
msgstr ""

#: ../../library/test.rst:1106
msgid "Attributes set when an exception is catched:"
msgstr ""

#: ../../library/test.rst:1108
msgid "``exc_type``"
msgstr ""

#: ../../library/test.rst:1109
msgid "``exc_value``"
msgstr ""

#: ../../library/test.rst:1110
msgid "``exc_traceback``"
msgstr ""

#: ../../library/test.rst:1111
msgid "``thread``"
msgstr ""

#: ../../library/test.rst:1113
msgid "See :func:`threading.excepthook` documentation."
msgstr ""

#: ../../library/test.rst:1115
msgid "These attributes are deleted at the context manager exit."
msgstr ""

#: ../../library/test.rst:1136
msgid ""
"Context manager catching unraisable exception using "
":func:`sys.unraisablehook`."
msgstr ""

#: ../../library/test.rst:1139
msgid ""
"Storing the exception value (``cm.unraisable.exc_value``) creates a "
"reference cycle. The reference cycle is broken explicitly when the context "
"manager exits."
msgstr ""

#: ../../library/test.rst:1143
msgid ""
"Storing the object (``cm.unraisable.object``) can resurrect it if it is set "
"to an object which is being finalized. Exiting the context manager clears "
"the stored object."
msgstr ""

#: ../../library/test.rst:1164
msgid ""
"Returns an unused port that should be suitable for binding.  This is "
"achieved by creating a temporary socket with the same family and type as the"
" ``sock`` parameter (default is :const:`~socket.AF_INET`, "
":const:`~socket.SOCK_STREAM`), and binding it to the specified host address "
"(defaults to ``0.0.0.0``) with the port set to 0, eliciting an unused "
"ephemeral port from the OS. The temporary socket is then closed and deleted,"
" and the ephemeral port is returned."
msgstr ""

#: ../../library/test.rst:1173
msgid ""
"Either this method or :func:`bind_port` should be used for any tests where a"
" server socket needs to be bound to a particular port for the duration of "
"the test. Which one to use depends on whether the calling code is creating a"
" Python socket, or if an unused port needs to be provided in a constructor "
"or passed to an external program (i.e. the ``-accept`` argument to openssl's"
" s_server mode).  Always prefer :func:`bind_port` over "
":func:`find_unused_port` where possible.  Using a hard coded port is "
"discouraged since it can make multiple instances of the test impossible to "
"run simultaneously, which is a problem for buildbots."
msgstr ""

#: ../../library/test.rst:1187
msgid ""
"Generic implementation of the :mod:`unittest` ``load_tests`` protocol for "
"use in test packages.  *pkg_dir* is the root directory of the package; "
"*loader*, *standard_tests*, and *pattern* are the arguments expected by "
"``load_tests``.  In simple cases, the test package's ``__init__.py`` can be "
"the following::"
msgstr ""

#: ../../library/test.rst:1202
msgid ""
"Return ``True`` if the file system for *directory* is case-insensitive."
msgstr ""

#: ../../library/test.rst:1207
msgid ""
"Returns the set of attributes, functions or methods of *ref_api* not found "
"on *other_api*, except for a defined list of items to be ignored in this "
"check specified in *ignore*."
msgstr ""

#: ../../library/test.rst:1211
msgid ""
"By default this skips private attributes beginning with '_' but includes all"
" magic methods, i.e. those starting and ending in '__'."
msgstr ""

#: ../../library/test.rst:1219
msgid ""
"Override *object_to_patch.attr_name* with *new_value*.  Also add cleanup "
"procedure to *test_instance* to restore *object_to_patch* for *attr_name*.  "
"The *attr_name* should be a valid attribute for *object_to_patch*."
msgstr ""

#: ../../library/test.rst:1227
msgid ""
"Run *code* in subinterpreter.  Raise :exc:`unittest.SkipTest` if "
":mod:`tracemalloc` is enabled."
msgstr ""

#: ../../library/test.rst:1233
msgid "Assert that *iter* is deallocated after iterating."
msgstr ""

#: ../../library/test.rst:1238
msgid ""
"Check for the existence of the compiler executables whose names are listed "
"in *cmd_names* or all the compiler executables when *cmd_names* is empty and"
" return the first missing executable or ``None`` when none is found missing."
msgstr ""

#: ../../library/test.rst:1246
msgid ""
"Assert that the ``__all__`` variable of *module* contains all public names."
msgstr ""

#: ../../library/test.rst:1248
msgid ""
"The module's public names (its API) are detected automatically based on "
"whether they match the public name convention and were defined in *module*."
msgstr ""

#: ../../library/test.rst:1252
msgid ""
"The *name_of_module* argument can specify (as a string or tuple thereof) "
"what module(s) an API could be defined in order to be detected as a public "
"API. One case for this is when *module* imports part of its public API from "
"other modules, possibly a C backend (like ``csv`` and its ``_csv``)."
msgstr ""

#: ../../library/test.rst:1257
msgid ""
"The *extra* argument can be a set of names that wouldn't otherwise be "
"automatically detected as \"public\", like objects without a proper "
"``__module__`` attribute. If provided, it will be added to the automatically"
" detected ones."
msgstr ""

#: ../../library/test.rst:1261
msgid ""
"The *blacklist* argument can be a set of names that must not be treated as "
"part of the public API even though their names indicate otherwise."
msgstr ""

#: ../../library/test.rst:1286
msgid "The :mod:`test.support` module defines the following classes:"
msgstr ":mod:`test.support` モジュールでは、以下のクラスを定義しています:"

#: ../../library/test.rst:1290
msgid ""
"Instances are a context manager that raises :exc:`ResourceDenied` if the "
"specified exception type is raised.  Any keyword arguments are treated as "
"attribute/value pairs to be compared against any exception raised within the"
" :keyword:`with` statement.  Only if all pairs match properly against "
"attributes on the exception is :exc:`ResourceDenied` raised."
msgstr ""
"このクラスのインスタンスはコンテキストマネージャーで、指定された型の例外が発生した場合に :exc:`ResourceDenied` "
"例外を発生させます。キーワード引数は全て、 :keyword:`with` "
"文の中で発生した全ての例外の属性名/属性値と比較されます。全てのキーワード引数が例外の属性に一致した場合に、 :exc:`ResourceDenied`"
" 例外が発生します。"

#: ../../library/test.rst:1299
msgid ""
"Class used to temporarily set or unset environment variables.  Instances can"
" be used as a context manager and have a complete dictionary interface for "
"querying/modifying the underlying ``os.environ``. After exit from the "
"context manager all changes to environment variables done through this "
"instance will be rolled back."
msgstr ""
"一時的に環境変数をセット・アンセットするためのクラスです。このクラスのインスタンスはコンテキストマネージャーとして利用されます。また、 "
"``os.environ`` "
"に対する参照・更新を行う完全な辞書のインタフェースを持ちます。コンテキストマネージャーが終了した時、このインスタンス経由で環境変数へ行った全ての変更はロールバックされます。"

#: ../../library/test.rst:1305
msgid "Added dictionary interface."
msgstr "辞書のインタフェースを追加しました。"

#: ../../library/test.rst:1310
msgid ""
"Temporarily set the environment variable ``envvar`` to the value of "
"``value``."
msgstr "一時的に、 ``envvar`` を ``value`` にセットします。"

#: ../../library/test.rst:1316
msgid "Temporarily unset the environment variable ``envvar``."
msgstr "一時的に ``envvar`` をアンセットします。"

#: ../../library/test.rst:1321
msgid ""
"A context manager used to try to prevent crash dialog popups on tests that "
"are expected to crash a subprocess."
msgstr ""

#: ../../library/test.rst:1324
msgid ""
"On Windows, it disables Windows Error Reporting dialogs using `SetErrorMode "
"<https://msdn.microsoft.com/en-us/library/windows/desktop/ms680621.aspx>`_."
msgstr ""

#: ../../library/test.rst:1327
msgid ""
"On UNIX, :func:`resource.setrlimit` is used to set "
":attr:`resource.RLIMIT_CORE`'s soft limit to 0 to prevent coredump file "
"creation."
msgstr ""

#: ../../library/test.rst:1331
msgid "On both platforms, the old value is restored by :meth:`__exit__`."
msgstr ""

#: ../../library/test.rst:1336
msgid ""
"A context manager to force import to return a new module reference.  This is"
" useful for testing module-level behaviors, such as the emission of a "
"DeprecationWarning on import.  Example usage::"
msgstr ""

#: ../../library/test.rst:1346
msgid "A context manager to temporarily add directories to sys.path."
msgstr ""

#: ../../library/test.rst:1348
msgid ""
"This makes a copy of :data:`sys.path`, appends any directories given as "
"positional arguments, then reverts :data:`sys.path` to the copied settings "
"when the context ends."
msgstr ""

#: ../../library/test.rst:1352
msgid ""
"Note that *all* :data:`sys.path` modifications in the body of the context "
"manager, including replacement of the object, will be reverted at the end of"
" the block."
msgstr ""

#: ../../library/test.rst:1359
msgid ""
"Class to save and restore signal handlers registered by the Python signal "
"handler."
msgstr ""

#: ../../library/test.rst:1367
msgid "Try to match a single dict with the supplied arguments."
msgstr ""

#: ../../library/test.rst:1372
msgid "Try to match a single stored value (*dv*) with a supplied value (*v*)."
msgstr ""

#: ../../library/test.rst:1377
msgid ""
"Class used to record warnings for unit tests. See documentation of "
":func:`check_warnings` above for more details."
msgstr ""
"ユニットテスト時に warning を記録するためのクラスです。上の、 :func:`check_warnings` のドキュメントを参照してください。"

#: ../../library/test.rst:1385
msgid "Run *test* and return the result."
msgstr ""

#: ../../library/test.rst:1390
msgid "Class for logging support."
msgstr ""

#: ../../library/test.rst:1395
msgid ""
"Simple :term:`path-like object`.  It implements the :meth:`__fspath__` "
"method which just returns the *path* argument.  If *path* is an exception, "
"it will be raised in :meth:`!__fspath__`."
msgstr ""

#: ../../library/test.rst:1401
msgid ""
":mod:`test.support.script_helper` --- Utilities for the Python execution "
"tests"
msgstr ""

#: ../../library/test.rst:1407
msgid ""
"The :mod:`test.support.script_helper` module provides support for Python's "
"script execution tests."
msgstr ""

#: ../../library/test.rst:1412
msgid ""
"Return ``True`` if ``sys.executable interpreter`` requires environment "
"variables in order to be able to run at all."
msgstr ""

#: ../../library/test.rst:1415
msgid ""
"This is designed to be used with ``@unittest.skipIf()`` to annotate tests "
"that need to use an ``assert_python*()`` function to launch an isolated mode"
" (``-I``) or no environment mode (``-E``) sub-interpreter process."
msgstr ""

#: ../../library/test.rst:1419
msgid ""
"A normal build & test does not run into this situation but it can happen "
"when trying to run the standard library test suite from an interpreter that "
"doesn't have an obvious home with Python's current home finding logic."
msgstr ""

#: ../../library/test.rst:1423
msgid ""
"Setting :envvar:`PYTHONHOME` is one way to get most of the testsuite to run "
"in that situation.  :envvar:`PYTHONPATH` or :envvar:`PYTHONUSERSITE` are "
"other common environment variables that might impact whether or not the "
"interpreter can start."
msgstr ""

#: ../../library/test.rst:1431
msgid ""
"Set up the environment based on *env_vars* for running the interpreter in a "
"subprocess.  The values can include ``__isolated``, ``__cleanenv``, "
"``__cwd``, and ``TERM``."
msgstr ""

#: ../../library/test.rst:1438
msgid ""
"Assert that running the interpreter with *args* and optional environment "
"variables *env_vars* succeeds (``rc == 0``) and return a ``(return code, "
"stdout, stderr)`` tuple."
msgstr ""

#: ../../library/test.rst:1442
msgid ""
"If the ``__cleanenv`` keyword is set, *env_vars* is used as a fresh "
"environment."
msgstr ""

#: ../../library/test.rst:1445
msgid ""
"Python is started in isolated mode (command line option ``-I``), except if "
"the ``__isolated`` keyword is set to ``False``."
msgstr ""

#: ../../library/test.rst:1451
msgid ""
"Assert that running the interpreter with *args* and optional environment "
"variables *env_vars* fails (``rc != 0``) and return a ``(return code, "
"stdout, stderr)`` tuple."
msgstr ""

#: ../../library/test.rst:1455
msgid "See :func:`assert_python_ok` for more options."
msgstr ""

#: ../../library/test.rst:1460
msgid "Run a Python subprocess with the given arguments."
msgstr ""

#: ../../library/test.rst:1462
msgid ""
"*kw* is extra keyword args to pass to :func:`subprocess.Popen`. Returns a "
":class:`subprocess.Popen` object."
msgstr ""

#: ../../library/test.rst:1468
msgid ""
"Run the given :class:`subprocess.Popen` process until completion and return "
"stdout."
msgstr ""

#: ../../library/test.rst:1474
msgid ""
"Create script containing *source* in path *script_dir* and "
"*script_basename*. If *omit_suffix* is ``False``, append ``.py`` to the "
"name.  Return the full script path."
msgstr ""

#: ../../library/test.rst:1481
msgid ""
"Create zip file at *zip_dir* and *zip_basename* with extension ``zip`` which"
" contains the files in *script_name*. *name_in_zip* is the archive name. "
"Return a tuple containing ``(full path, full path of archive name)``."
msgstr ""

#: ../../library/test.rst:1488
msgid ""
"Create a directory named *pkg_dir* containing an ``__init__`` file with "
"*init_source* as its contents."
msgstr ""

#: ../../library/test.rst:1495
msgid ""
"Create a zip package directory with a path of *zip_dir* and *zip_basename* "
"containing an empty ``__init__`` file and a file *script_basename* "
"containing the *source*.  If *compiled* is ``True``, both source files will "
"be compiled and added to the zip package.  Return a tuple of the full zip "
"path and the archive name for the zip file."
msgstr ""
