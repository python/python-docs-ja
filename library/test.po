# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2018
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:29+0000\n"
"Last-Translator: tomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/test.rst:2
msgid ":mod:`test` --- Regression tests package for Python"
msgstr ":mod:`test` --- Python 用回帰テストパッケージ"

#: ../../library/test.rst:10
msgid ""
"The :mod:`test` package is meant for internal use by Python only. It is "
"documented for the benefit of the core developers of Python. Any use of this "
"package outside of Python's standard library is discouraged as code "
"mentioned here can change or be removed without notice between releases of "
"Python."
msgstr ""
":mod:`test` パッケージは Python の内部利用専用です。\n"
"ドキュメント化されているのは Python の中心開発者のためです。\n"
"ここで述べられているコードは Python のリリースで予告なく変更されたり、削除さ"
"れる可能性があるため、Python 標準ライブラリー外でこのパッケージを使用すること"
"は推奨されません。"

#: ../../library/test.rst:18
msgid ""
"The :mod:`test` package contains all regression tests for Python as well as "
"the modules :mod:`test.support` and :mod:`test.regrtest`. :mod:`test."
"support` is used to enhance your tests while :mod:`test.regrtest` drives the "
"testing suite."
msgstr ""
":mod:`test` パッケージには、Python 用の全ての回帰テストの他に、 :mod:`test."
"support` モジュールと :mod:`test.regrtest` モジュールが入っています。 :mod:"
"`test.support` はテストを充実させるために使い、 :mod:`test.regrtest` はテスト"
"スイートを実行するのに使います。"

#: ../../library/test.rst:23
msgid ""
"Each module in the :mod:`test` package whose name starts with ``test_`` is a "
"testing suite for a specific module or feature. All new tests should be "
"written using the :mod:`unittest` or :mod:`doctest` module.  Some older "
"tests are written using a \"traditional\" testing style that compares output "
"printed to ``sys.stdout``; this style of test is considered deprecated."
msgstr ""
":mod:`test` パッケージ内のモジュールのうち、名前が ``test_`` で始まるものは、"
"特定のモジュールや機能に対するテストスイートです。新しいテストはすべて :mod:"
"`unittest` か :mod:`doctest` モジュールを使って書くようにしてください。古いテ"
"ストのいくつかは、 ``sys.stdout`` への出力を比較する「従来の」テスト形式に"
"なっていますが、この形式のテストは廃止予定です。"

#: ../../library/test.rst:33
msgid "Module :mod:`unittest`"
msgstr ":mod:`unittest` モジュール"

#: ../../library/test.rst:33
msgid "Writing PyUnit regression tests."
msgstr "PyUnit 回帰テストを書く。"

#: ../../library/test.rst:35
msgid "Module :mod:`doctest`"
msgstr ":mod:`doctest` モジュール"

#: ../../library/test.rst:36
msgid "Tests embedded in documentation strings."
msgstr "ドキュメンテーション文字列に埋め込まれたテスト。"

#: ../../library/test.rst:42
msgid "Writing Unit Tests for the :mod:`test` package"
msgstr ":mod:`test` パッケージのためのユニットテストを書く"

#: ../../library/test.rst:44
msgid ""
"It is preferred that tests that use the :mod:`unittest` module follow a few "
"guidelines. One is to name the test module by starting it with ``test_`` and "
"end it with the name of the module being tested. The test methods in the "
"test module should start with ``test_`` and end with a description of what "
"the method is testing. This is needed so that the methods are recognized by "
"the test driver as test methods. Also, no documentation string for the "
"method should be included. A comment (such as ``# Tests function returns "
"only True or False``) should be used to provide documentation for test "
"methods. This is done because documentation strings get printed out if they "
"exist and thus what test is being run is not stated."
msgstr ""
":mod:`unittest` モジュールを使ってテストを書く場合、幾つかのガイドラインに従"
"うことが推奨されます。 1つは、テストモジュールの名前を、 ``test_`` で始め、テ"
"スト対象となるモジュール名で終えることです。テストモジュール中のテストメソッ"
"ドは名前を ``test_`` で始めて、そのメソッドが何をテストしているかという説明で"
"終えます。これはテスト実行プログラムが、そのメソッドをテストメソッドとして認"
"識するために必要です。また、テストメソッドにはドキュメンテーション文字列を入"
"れるべきではありません。コメント（例えば ``# True あるいは False だけを返すテ"
"スト関数`` ）を使用して、テストメソッドのドキュメントを記述してください。これ"
"は、ドキュメンテーション文字列が存在する場合はその内容が出力されてしまうた"
"め、どのテストを実行しているのかをいちいち表示したくないからです。"

#: ../../library/test.rst:55
msgid "A basic boilerplate is often used::"
msgstr "以下のような決まり文句を使います::"

#: ../../library/test.rst:88
msgid ""
"This code pattern allows the testing suite to be run by :mod:`test."
"regrtest`, on its own as a script that supports the :mod:`unittest` CLI, or "
"via the ``python -m unittest`` CLI."
msgstr ""
"このコードのパターンを使うと :mod:`test.regrtest` からテストスイートを実行で"
"き、 :mod:`unittest` のコマンドラインインターフェースをサポートしているスクリ"
"プトとして自分自身を起動したり、 ``python -m unittest`` というコマンドライン"
"インターフェースを通して起動したりできます。"

#: ../../library/test.rst:92
msgid ""
"The goal for regression testing is to try to break code. This leads to a few "
"guidelines to be followed:"
msgstr ""
"回帰テストの目的はコードを解き明かすことです。そのためには以下のいくつかのガ"
"イドラインに従ってください:"

#: ../../library/test.rst:95
msgid ""
"The testing suite should exercise all classes, functions, and constants. "
"This includes not just the external API that is to be presented to the "
"outside world but also \"private\" code."
msgstr ""
"テストスイートから、すべてのクラス、関数および定数を実行するべきです。これに"
"は外部に公開される外部APIだけでなく「プライベートな」コードも含みます。"

#: ../../library/test.rst:99
msgid ""
"Whitebox testing (examining the code being tested when the tests are being "
"written) is preferred. Blackbox testing (testing only the published user "
"interface) is not complete enough to make sure all boundary and edge cases "
"are tested."
msgstr ""
"ホワイトボックス・テスト（対象のコードの詳細を元にテストを書くこと）を推奨し"
"ます。ブラックボックス・テスト（公開されるインタフェース仕様だけをテストする"
"こと）は、すべての境界条件を確実にテストするには完全ではありません。"

#: ../../library/test.rst:104
msgid ""
"Make sure all possible values are tested including invalid ones. This makes "
"sure that not only all valid values are acceptable but also that improper "
"values are handled correctly."
msgstr ""
"すべての取りうる値を、無効値も含めてテストするようにしてください。そのような"
"テストを書くことで、全ての有効値が通るだけでなく、不適切な値が正しく処理され"
"ることも確認できます。"

#: ../../library/test.rst:108
msgid ""
"Exhaust as many code paths as possible. Test where branching occurs and thus "
"tailor input to make sure as many different paths through the code are taken."
msgstr ""
"コード内のできる限り多くのパスを網羅してください。分岐するように入力を調整し"
"たテストを書くことで、コードの多くのパスをたどることができます。"

#: ../../library/test.rst:111
msgid ""
"Add an explicit test for any bugs discovered for the tested code. This will "
"make sure that the error does not crop up again if the code is changed in "
"the future."
msgstr ""
"テスト対象のコードにバグが発見された場合は、明示的にテスト追加するようにして"
"ください。そのようなテストを追加することで、将来コードを変更した際にエラーが"
"再発することを防止できます。"

#: ../../library/test.rst:115
msgid ""
"Make sure to clean up after your tests (such as close and remove all "
"temporary files)."
msgstr ""
"テストの後始末 (例えば一時ファイルをすべて閉じたり削除したりすること) を必ず"
"行ってください。"

#: ../../library/test.rst:118
msgid ""
"If a test is dependent on a specific condition of the operating system then "
"verify the condition already exists before attempting the test."
msgstr ""
"テストがオペレーティングシステムの特定の状況に依存する場合、テスト開始時に条"
"件を満たしているかを検証してください。"

#: ../../library/test.rst:121
msgid ""
"Import as few modules as possible and do it as soon as possible. This "
"minimizes external dependencies of tests and also minimizes possible "
"anomalous behavior from side-effects of importing a module."
msgstr ""
"インポートするモジュールをできるかぎり少なくし、可能な限り早期にインポートを"
"行ってください。そうすることで、テストの外部依存性を最小限にし、モジュールの"
"インポートによる副作用から生じる変則的な動作を最小限にできます。"

#: ../../library/test.rst:125
msgid ""
"Try to maximize code reuse. On occasion, tests will vary by something as "
"small as what type of input is used. Minimize code duplication by "
"subclassing a basic test class with a class that specifies the input::"
msgstr ""
"できる限りテストコードを再利用するようにしましょう。時として、入力の違いだけ"
"を記述すれば良くなるくらい、テストコードを小さくすることができます。例えば以"
"下のように、サブクラスで入力を指定することで、コードの重複を最小化することが"
"できます::"

#: ../../library/test.rst:145
msgid ""
"When using this pattern, remember that all classes that inherit from :class:"
"`unittest.TestCase` are run as tests.  The :class:`Mixin` class in the "
"example above does not have any data and so can't be run by itself, thus it "
"does not inherit from :class:`unittest.TestCase`."
msgstr ""
"このパターンを使うときには、 :class:`unittest.TestCase`  を継承した全てのクラ"
"スがテストとして実行されることを忘れないでください。\n"
"上の例の :class:`Mixin` クラスはテストデータを持っておらず、それ自身は実行で"
"きないので、 :class:`unittest.TestCase` を継承していません。"

#: ../../library/test.rst:153
msgid "Test Driven Development"
msgstr "Test Driven Development"

#: ../../library/test.rst:154
msgid "A book by Kent Beck on writing tests before code."
msgstr "コードより前にテストを書く方法論に関する Kent Beck の著書。"

#: ../../library/test.rst:160
msgid "Running tests using the command-line interface"
msgstr "コマンドラインインタフェースを利用してテストを実行する"

#: ../../library/test.rst:162
msgid ""
"The :mod:`test` package can be run as a script to drive Python's regression "
"test suite, thanks to the :option:`-m` option: :program:`python -m test`. "
"Under the hood, it uses :mod:`test.regrtest`; the call :program:`python -m "
"test.regrtest` used in previous Python versions still works.  Running the "
"script by itself automatically starts running all regression tests in the :"
"mod:`test` package. It does this by finding all modules in the package whose "
"name starts with ``test_``, importing them, and executing the function :func:"
"`test_main` if present or loading the tests via unittest.TestLoader."
"loadTestsFromModule if ``test_main`` does not exist.  The names of tests to "
"execute may also be passed to the script. Specifying a single regression "
"test (:program:`python -m test test_spam`) will minimize output and only "
"print whether the test passed or failed."
msgstr ""
":mod:`test` パッケージはスクリプトとして Python の回帰テストスイートを実行で"
"きます。\n"
":option:`-m` オプションを利用して、 :program:`python -m test.regrtest` として"
"実行します。\n"
"この仕組みの内部では :mod:`test.regrtest`; を使っています; 古いバージョンの "
"Python で使われている :program:`python -m test.regrtest` という呼び出しは今で"
"も上手く動きます。\n"
"スクリプトを実行すると、自動的に :mod:`test` パッケージ内のすべての回帰テスト"
"を実行し始めます。\n"
"パッケージ内の名前が ``test_`` で始まる全モジュールを見つけ、それをインポート"
"し、もしあるなら関数 :func:`test_main` を実行し、 ``test_main`` が無い場合は "
"unittest.TestLoader.loadTestsFromModule からテストをロードしてテストを実行し"
"ます。\n"
"実行するテストの名前もスクリプトに渡される可能性があります。\n"
"単一の回帰テストを指定 (:program:`python -m test test_spam`) すると、出力を最"
"小限にし、テストが成功したかあるいは失敗したかだけを出力します。"

#: ../../library/test.rst:175
msgid ""
"Running :mod:`test` directly allows what resources are available for tests "
"to use to be set. You do this by using the ``-u`` command-line option. "
"Specifying ``all`` as the value for the ``-u`` option enables all possible "
"resources: :program:`python -m test -uall`. If all but one resource is "
"desired (a more common case), a comma-separated list of resources that are "
"not desired may be listed after ``all``. The command :program:`python -m "
"test -uall,-audio,-largefile` will run :mod:`test` with all resources except "
"the ``audio`` and ``largefile`` resources. For a list of all resources and "
"more command-line options, run :program:`python -m test -h`."
msgstr ""
"直接 :mod:`test` を実行すると、テストに利用するリソースを設定できます。これを"
"行うには、 ``-u`` コマンドラインオプションを使います。 ``-u`` のオプションに "
"``all`` を指定すると、すべてのリソースを有効にします: :program:`python -m "
"test -uall` 。(よくある場合ですが) 何か一つを除く全てが必要な場合、カンマで区"
"切った不要なリソースのリストを ``all`` の後に並べます。コマンド :program:"
"`python -m test -uall,-audio,-largefile` とすると、 ``audio`` と "
"``largefile`` リソースを除く全てのリソースを使って :mod:`test` を実行します。"
"すべてのリソースのリストと追加のコマンドラインオプションを出力するには、 :"
"program:`python -m test -h` を実行してください。"

#: ../../library/test.rst:186
msgid ""
"Some other ways to execute the regression tests depend on what platform the "
"tests are being executed on. On Unix, you can run :program:`make test` at "
"the top-level directory where Python was built. On Windows, executing :"
"program:`rt.bat` from your :file:`PCBuild` directory will run all regression "
"tests."
msgstr ""
"テストを実行しようとするプラットフォームによっては、回帰テストを実行する別の"
"方法があります。 Unix では、Python をビルドしたトップレベルディレクトリで :"
"program:`make test` を実行できます。 Windows上では、 :file:`PCBuild` ディレク"
"トリから :program:`rt.bat` を実行すると、すべての回帰テストを実行します。"

#: ../../library/test.rst:194
msgid ":mod:`test.support` --- Utilities for the Python test suite"
msgstr ":mod:`test.support` --- テストのためのユーティリティ関数"

#: ../../library/test.rst:200
msgid ""
"The :mod:`test.support` module provides support for Python's regression test "
"suite."
msgstr ""
":mod:`test.support` モジュールでは、 Python の回帰テストに対するサポートを提"
"供しています。"

#: ../../library/test.rst:205
msgid ""
":mod:`test.support` is not a public module.  It is documented here to help "
"Python developers write tests.  The API of this module is subject to change "
"without backwards compatibility concerns between releases."
msgstr ""
":mod:`test.support` はパブリックなモジュールではありません。\n"
"ここでドキュメント化されているのは Python 開発者がテストを書くのを助けるため"
"です。\n"
"このモジュールの API はリリース間で後方非互換な変更がなされる可能性がありま"
"す。"

#: ../../library/test.rst:210
msgid "This module defines the following exceptions:"
msgstr "このモジュールは次の例外を定義しています:"

#: ../../library/test.rst:214
msgid ""
"Exception to be raised when a test fails. This is deprecated in favor of :"
"mod:`unittest`\\ -based tests and :class:`unittest.TestCase`'s assertion "
"methods."
msgstr ""
"テストが失敗したとき送出される例外です。これは、 :mod:`unittest` ベースのテス"
"トでは廃止予定で、 :class:`unittest.TestCase` の assertXXX メソッドが推奨され"
"ます。"

#: ../../library/test.rst:221
msgid ""
"Subclass of :exc:`unittest.SkipTest`. Raised when a resource (such as a "
"network connection) is not available. Raised by the :func:`requires` "
"function."
msgstr ""
":exc:`unittest.SkipTest` のサブクラスです。 (ネットワーク接続のような) リソー"
"スが利用できないとき送出されます。 :func:`requires` 関数によって送出されま"
"す。"

#: ../../library/test.rst:226
msgid "The :mod:`test.support` module defines the following constants:"
msgstr ":mod:`test.support` モジュールでは、以下の定数を定義しています:"

#: ../../library/test.rst:230
msgid ""
"``True`` when verbose output is enabled. Should be checked when more "
"detailed information is desired about a running test. *verbose* is set by :"
"mod:`test.regrtest`."
msgstr ""
"冗長な出力が有効な場合は ``True`` です。実行中のテストについてのより詳細な情"
"報が欲しいときにチェックします。 *verbose* は :mod:`test.regrtest` によって設"
"定されます。"

#: ../../library/test.rst:237
msgid "``True`` if the running interpreter is Jython."
msgstr "実行中のインタプリタが Jython ならば ``True`` になります。"

#: ../../library/test.rst:242
msgid ""
"Set to a name that is safe to use as the name of a temporary file.  Any "
"temporary file that is created should be closed and unlinked (removed)."
msgstr ""
"テンポラリファイルの名前として安全に利用できる名前に設定されます。作成した一"
"時ファイルは全て閉じ、unlink (削除) しなければなりません。"

#: ../../library/test.rst:246
msgid "The :mod:`test.support` module defines the following functions:"
msgstr ":mod:`test.support` モジュールでは、以下の関数を定義しています:"

#: ../../library/test.rst:250
msgid ""
"Remove the module named *module_name* from ``sys.modules`` and delete any "
"byte-compiled files of the module."
msgstr ""
"モジュール名 *module_name* を ``sys.modules`` から取り除き、モジュールのバイ"
"トコンパイル済みファイルを全て削除します。"

#: ../../library/test.rst:256
msgid ""
"Return ``True`` if *resource* is enabled and available. The list of "
"available resources is only set when :mod:`test.regrtest` is executing the "
"tests."
msgstr ""
"*resource* が有効で利用可能ならば ``True`` を返します。利用可能なリソースのリ"
"ストは、 :mod:`test.regrtest` がテストを実行している間のみ設定されます。"

#: ../../library/test.rst:263
msgid ""
"Raise :exc:`ResourceDenied` if *resource* is not available. *msg* is the "
"argument to :exc:`ResourceDenied` if it is raised. Always returns ``True`` "
"if called by a function whose ``__name__`` is ``'__main__'``. Used when "
"tests are executed by :mod:`test.regrtest`."
msgstr ""
"*resource* が利用できなければ、 :exc:`ResourceDenied` を送出します。その場"
"合、 *msg* は :exc:`ResourceDenied` の引数になります。 ``__name__`` が "
"``'__main__'`` である関数にから呼び出された場合には常に ``True`` を返します。"
"テストを :mod:`test.regrtest` から実行するときに使われます。"

#: ../../library/test.rst:271
msgid ""
"Return the path to the file named *filename*. If no match is found "
"*filename* is returned. This does not equal a failure since it could be the "
"path to the file."
msgstr ""
"*filename* という名前のファイルへのパスを返します。一致するものが見つからなけ"
"れば、 *filename* 自体を返します。 *filename* 自体もファイルへのパスでありえ"
"るので、 *filename* が返っても失敗ではありません。"

#: ../../library/test.rst:275
msgid ""
"Setting *subdir* indicates a relative path to use to find the file rather "
"than looking directly in the path directories."
msgstr ""
"*subdir* を設定することで、パスのディレクトリを直接見に行くのではなく、相対パ"
"スを使って見付けにいくように指示できます。"

#: ../../library/test.rst:281
msgid ""
"Execute :class:`unittest.TestCase` subclasses passed to the function. The "
"function scans the classes for methods starting with the prefix ``test_`` "
"and executes the tests individually."
msgstr ""
"渡された :class:`unittest.TestCase` サブクラスを実行します。この関数は名前が "
"``test_`` で始まるメソッドを探して、テストを個別に実行します。"

#: ../../library/test.rst:285
msgid ""
"It is also legal to pass strings as parameters; these should be keys in "
"``sys.modules``. Each associated module will be scanned by ``unittest."
"TestLoader.loadTestsFromModule()``. This is usually seen in the following :"
"func:`test_main` function::"
msgstr ""
"引数に文字列を渡すことも許可されています。その場合、文字列は ``sys.module`` "
"のキーでなければなりません。指定された各モジュールは、 ``unittest.TestLoader."
"loadTestsFromModule()`` でスキャンされます。この関数は、よく次のような :func:"
"`test_main` 関数の形で利用されます。 ::"

#: ../../library/test.rst:293
msgid "This will run all tests defined in the named module."
msgstr ""
"この関数は、名前で指定されたモジュールの中の全ての定義されたテストを実行しま"
"す。"

#: ../../library/test.rst:298
msgid ""
"Run :func:`doctest.testmod` on the given *module*.  Return ``(failure_count, "
"test_count)``."
msgstr ""
"与えられた *module* の :func:`doctest.testmod` を実行します。"
"``(failure_count, test_count)`` を返します。"

#: ../../library/test.rst:301
msgid ""
"If *verbosity* is ``None``, :func:`doctest.testmod` is run with verbosity "
"set to :data:`verbose`.  Otherwise, it is run with verbosity set to ``None``."
msgstr ""
"*verbosity* が ``None`` の場合、 :func:`doctest.testmod` は冗長性 "
"(verbosity) に :data:`verbose` を設定して実行されます。\n"
"そうでない場合は、冗長性に ``None`` を設定して実行されます。"

#: ../../library/test.rst:307
msgid ""
"A convenience wrapper for :func:`warnings.catch_warnings()` that makes it "
"easier to test that a warning was correctly raised.  It is approximately "
"equivalent to calling ``warnings.catch_warnings(record=True)`` with :meth:"
"`warnings.simplefilter` set to ``always`` and with the option to "
"automatically validate the results that are recorded."
msgstr ""
"warning が正しく発行されているかどうかチェックする、 :func:`warnings."
"catch_warnings()` を使いやすくするラッパーです。これは、 :meth:`warnings."
"simplefilter` を ``always`` に設定して、記録された結果を自動的に検証するオプ"
"ションと共に ``warnings.catch_warnings(record=True)`` を呼ぶのとほぼ同じで"
"す。"

#: ../../library/test.rst:313
msgid ""
"``check_warnings`` accepts 2-tuples of the form ``(\"message regexp\", "
"WarningCategory)`` as positional arguments. If one or more *filters* are "
"provided, or if the optional keyword argument *quiet* is ``False``, it "
"checks to make sure the warnings are as expected:  each specified filter "
"must match at least one of the warnings raised by the enclosed code or the "
"test fails, and if any warnings are raised that do not match any of the "
"specified filters the test fails.  To disable the first of these checks, set "
"*quiet* to ``True``."
msgstr ""
"``check_warnings`` は ``(\"message regexp\", WarningCategory)`` の形をした 2"
"要素タプルを位置引数として受け取ります。1つ以上の *filters* が与えられた場合"
"や、オプションのキーワード引数 *quiet* が ``False`` の場合、警告が期待通りで"
"あるかどうかをチェックします。指定された各 filter は最低でも1回は囲われたコー"
"ド内で発生した警告とマッチしなければテストが失敗しますし、指定されたどの "
"filter ともマッチしない警告が発生してもテストが失敗します。前者のチェックを無"
"効にするには、*quiet* を ``True`` にします。"

#: ../../library/test.rst:322
msgid "If no arguments are specified, it defaults to::"
msgstr "引数が1つもない場合、デフォルトでは次のようになります::"

#: ../../library/test.rst:326
msgid "In this case all warnings are caught and no errors are raised."
msgstr "この場合、全ての警告は補足され、エラーは発生しません。"

#: ../../library/test.rst:328
msgid ""
"On entry to the context manager, a :class:`WarningRecorder` instance is "
"returned. The underlying warnings list from :func:`~warnings.catch_warnings` "
"is available via the recorder object's :attr:`warnings` attribute.  As a "
"convenience, the attributes of the object representing the most recent "
"warning can also be accessed directly through the recorder object (see "
"example below).  If no warning has been raised, then any of the attributes "
"that would otherwise be expected on an object representing a warning will "
"return ``None``."
msgstr ""
"コンテキストマネージャーに入る時、 :class:`WarningRecorder` インスタンスが返"
"されます。このレコーダーオブジェクトの :attr:`warnings` 属性から、 :func:"
"`~warnings.catch_warnings` から得られる警告のリストを取得することができます。"
"便利さのために、レコーダーオブジェクトから直接、一番最近に発生した警告を表す"
"オブジェクトの属性にアクセスできます(以下にある例を参照してください)。警告が1"
"つも発生しなかった場合、それらの全ての属性は ``None`` を返します。"

#: ../../library/test.rst:337
msgid ""
"The recorder object also has a :meth:`reset` method, which clears the "
"warnings list."
msgstr ""
"レコーダーオブジェクトの :meth:`reset` メソッドは警告リストをクリアします。"

#: ../../library/test.rst:340
msgid "The context manager is designed to be used like this::"
msgstr "コンテキストマネージャーは次のようにして使います::"

#: ../../library/test.rst:347
msgid ""
"In this case if either warning was not raised, or some other warning was "
"raised, :func:`check_warnings` would raise an error."
msgstr ""
"この場合、どちらの警告も発生しなかった場合や、それ以外の警告が発生した場合"
"は、 :func:`check_warnings` はエラーを発生させます。"

#: ../../library/test.rst:350
msgid ""
"When a test needs to look more deeply into the warnings, rather than just "
"checking whether or not they occurred, code like this can be used::"
msgstr ""
"警告が発生したかどうかだけでなく、もっと詳しいチェックが必要な場合は、次のよ"
"うなコードになります::"

#: ../../library/test.rst:364
msgid ""
"Here all warnings will be caught, and the test code tests the captured "
"warnings directly."
msgstr "全ての警告をキャプチャし、テストコードがその警告を直接テストします。"

#: ../../library/test.rst:367
msgid "New optional arguments *filters* and *quiet*."
msgstr "新しいオプション引数 *filters* と *quiet*"

#: ../../library/test.rst:375
msgid ""
"A context managers that temporarily replaces the named stream with :class:"
"`io.StringIO` object."
msgstr ""
"名前付きストリ－ムを :class:`io.StringIO` オブジェクトで一時的に置き換えるコ"
"ンテクストマネージャです。"

#: ../../library/test.rst:378
msgid "Example use with output streams::"
msgstr "出力ストリームの使用例::"

#: ../../library/test.rst:386
msgid "Example use with input stream::"
msgstr "入力ストリ－ムの使用例::"

#: ../../library/test.rst:398
msgid ""
"A context manager that creates a temporary directory at *path* and yields "
"the directory."
msgstr "*path* に一時ディレクトリを作成し与えるコンテキストマネージャです。"

#: ../../library/test.rst:401
msgid ""
"If *path* is ``None``, the temporary directory is created using :func:"
"`tempfile.mkdtemp`.  If *quiet* is ``False``, the context manager raises an "
"exception on error.  Otherwise, if *path* is specified and cannot be "
"created, only a warning is issued."
msgstr ""

#: ../../library/test.rst:409
msgid ""
"A context manager that temporarily changes the current working directory to "
"*path* and yields the directory."
msgstr ""
"カレントディレクトリを一時的に *path* に変更し与えるコンテキストマネージャで"
"す。"

#: ../../library/test.rst:412
msgid ""
"If *quiet* is ``False``, the context manager raises an exception on error.  "
"Otherwise, it issues only a warning and keeps the current working directory "
"the same."
msgstr ""
"*quiet* が ``False`` の場合、コンテキストマネージャはエラーが起きると例外を送"
"出します。\n"
"それ以外の場合には、警告を出すだけでカレントディレクトリは同じままにしておき"
"ます。"

#: ../../library/test.rst:419
msgid ""
"A context manager that temporarily creates a new directory and changes the "
"current working directory (CWD)."
msgstr ""
"一時的に新しいディレクトリを作成し、カレントディレクトリ (current working "
"directory, CWD) を変更するコンテキストマネージャです。"

#: ../../library/test.rst:422
msgid ""
"The context manager creates a temporary directory in the current directory "
"with name *name* before temporarily changing the current working directory.  "
"If *name* is ``None``, the temporary directory is created using :func:"
"`tempfile.mkdtemp`."
msgstr ""

#: ../../library/test.rst:427
msgid ""
"If *quiet* is ``False`` and it is not possible to create or change the CWD, "
"an error is raised.  Otherwise, only a warning is raised and the original "
"CWD is used."
msgstr ""
"*quiet* が ``False`` でカレントディレクトリの作成や変更ができない場合、例外を"
"送出します。\n"
"それ以外の場合には、警告を出すだけで元のカレントディレクトリが使われます。"

#: ../../library/test.rst:434
msgid "A context manager that temporarily sets the process umask."
msgstr "一時的にプロセスの umask を設定するコンテキストマネージャ。"

#: ../../library/test.rst:439
msgid "Return ``True`` if the OS supports symbolic links, ``False`` otherwise."
msgstr ""
"OS がシンボリックリンクをサポートする場合 ``True`` を返し、その他の場合は "
"``False`` を返します。"

#: ../../library/test.rst:445
msgid "A decorator for running tests that require support for symbolic links."
msgstr ""
"シンボリックリンクのサポートが必要なテストを実行することを表すデコレータ。"

#: ../../library/test.rst:450
msgid ""
"A decorator to conditionally mark tests with :func:`unittest."
"expectedFailure`. Any use of this decorator should have an associated "
"comment identifying the relevant tracker issue."
msgstr ""
"ある条件で :func:`unittest.expectedFailure` の印をテストに付けるデコレー"
"タ。\n"
"このデコレータを使うときはいつも、関連する問題を指し示すコメントを付けておく"
"べきです。"

#: ../../library/test.rst:457
msgid ""
"A decorator for running a function in a different locale, correctly "
"resetting it after it has finished.  *catstr* is the locale category as a "
"string (for example ``\"LC_ALL\"``).  The *locales* passed will be tried "
"sequentially, and the first valid locale will be used."
msgstr ""
"別のロケールで関数を実行し、完了したら適切に元の状態に戻すためのデコレー"
"タ。\n"
"*catstr* は (例えば ``\"LC_ALL\"`` のような) ロケールカテゴリを文字列で表した"
"ものです。\n"
"渡された *locales* が順々に試され、一番最初に出てきた妥当なロケールが使われま"
"す。"

#: ../../library/test.rst:465
msgid ""
"Create an invalid file descriptor by opening and closing a temporary file, "
"and returning its descriptor."
msgstr ""
"一時ファイルを開いた後に閉じ、そのファイル記述子を返すことで無効な記述子を作"
"成します。"

#: ../../library/test.rst:471
msgid ""
"This function imports and returns the named module. Unlike a normal import, "
"this function raises :exc:`unittest.SkipTest` if the module cannot be "
"imported."
msgstr ""
"この関数は *name* で指定されたモジュールをインポートして返します。通常のイン"
"ポートと異なり、この関数はモジュールをインポートできなかった場合に :exc:"
"`unittest.SkipTest` 例外を発生させます。"

#: ../../library/test.rst:475 ../../library/test.rst:499
msgid ""
"Module and package deprecation messages are suppressed during this import if "
"*deprecated* is ``True``."
msgstr ""
"*deprecated* が ``True`` の場合、インポート中はモジュールとパッケージの廃止"
"メッセージが抑制されます。"

#: ../../library/test.rst:483
msgid ""
"This function imports and returns a fresh copy of the named Python module by "
"removing the named module from ``sys.modules`` before doing the import. Note "
"that unlike :func:`reload`, the original module is not affected by this "
"operation."
msgstr ""
"この関数は、 *name* で指定された Python モジュールを、インポート前に ``sys."
"modules`` から削除することで新規にインポートしてそのコピーを返します。 :func:"
"`reload` 関数と違い、もとのモジュールはこの操作によって影響をうけません。"

#: ../../library/test.rst:488
msgid ""
"*fresh* is an iterable of additional module names that are also removed from "
"the ``sys.modules`` cache before doing the import."
msgstr ""
"*fresh* は、同じようにインポート前に ``sys.modules`` から削除されるモジュール"
"名の iterable です。"

#: ../../library/test.rst:491
msgid ""
"*blocked* is an iterable of module names that are replaced with ``None`` in "
"the module cache during the import to ensure that attempts to import them "
"raise :exc:`ImportError`."
msgstr ""
"*blocked* もモジュール名のイテラブルで、インポート中にモジュールキャッシュ内"
"でその名前を ``None`` に置き換えることで、そのモジュールをインポートしようと"
"すると :exc:`ImportError` を発生させます。"

#: ../../library/test.rst:495
msgid ""
"The named module and any modules named in the *fresh* and *blocked* "
"parameters are saved before starting the import and then reinserted into "
"``sys.modules`` when the fresh import is complete."
msgstr ""
"指定されたモジュールと *fresh* や *blocked* 引数内のモジュール名はインポート"
"前に保存され、フレッシュなインポートが完了したら ``sys.modules`` に戻されま"
"す。"

#: ../../library/test.rst:502
msgid ""
"This function will raise :exc:`ImportError` if the named module cannot be "
"imported."
msgstr ""
"指定したモジュールがインポートできなかった場合に、この関数は :exc:"
"`ImportError` を送出します。"

#: ../../library/test.rst:505 ../../library/test.rst:606
msgid "Example use::"
msgstr "使用例::"

#: ../../library/test.rst:519
msgid ""
"Bind the socket to a free port and return the port number.  Relies on "
"ephemeral ports in order to ensure we are using an unbound port.  This is "
"important as many tests may be running simultaneously, especially in a "
"buildbot environment.  This method raises an exception if the ``sock."
"family`` is :const:`~socket.AF_INET` and ``sock.type`` is :const:`~socket."
"SOCK_STREAM`, and the socket has :const:`~socket.SO_REUSEADDR` or :const:"
"`~socket.SO_REUSEPORT` set on it. Tests should never set these socket "
"options for TCP/IP sockets. The only case for setting these options is "
"testing multicasting via multiple UDP sockets."
msgstr ""

#: ../../library/test.rst:530
msgid ""
"Additionally, if the :const:`~socket.SO_EXCLUSIVEADDRUSE` socket option is "
"available (i.e. on Windows), it will be set on the socket.  This will "
"prevent anyone else from binding to our host/port for the duration of the "
"test."
msgstr ""

#: ../../library/test.rst:538
msgid ""
"Returns an unused port that should be suitable for binding.  This is "
"achieved by creating a temporary socket with the same family and type as the "
"``sock`` parameter (default is :const:`~socket.AF_INET`, :const:`~socket."
"SOCK_STREAM`), and binding it to the specified host address (defaults to "
"``0.0.0.0``) with the port set to 0, eliciting an unused ephemeral port from "
"the OS. The temporary socket is then closed and deleted, and the ephemeral "
"port is returned."
msgstr ""

#: ../../library/test.rst:547
msgid ""
"Either this method or :func:`bind_port` should be used for any tests where a "
"server socket needs to be bound to a particular port for the duration of the "
"test. Which one to use depends on whether the calling code is creating a "
"python socket, or if an unused port needs to be provided in a constructor or "
"passed to an external program (i.e. the ``-accept`` argument to openssl's "
"s_server mode).  Always prefer :func:`bind_port` over :func:"
"`find_unused_port` where possible.  Using a hard coded port is discouraged "
"since it can make multiple instances of the test impossible to run "
"simultaneously, which is a problem for buildbots."
msgstr ""

#: ../../library/test.rst:561
msgid ""
"Generic implementation of the :mod:`unittest` ``load_tests`` protocol for "
"use in test packages.  *pkg_dir* is the root directory of the package; "
"*loader*, *standard_tests*, and *pattern* are the arguments expected by "
"``load_tests``.  In simple cases, the test package's ``__init__.py`` can be "
"the following::"
msgstr ""

#: ../../library/test.rst:576
msgid ""
"Returns the set of attributes, functions or methods of *ref_api* not found "
"on *other_api*, except for a defined list of items to be ignored in this "
"check specified in *ignore*."
msgstr ""

#: ../../library/test.rst:580
msgid ""
"By default this skips private attributes beginning with '_' but includes all "
"magic methods, i.e. those starting and ending in '__'."
msgstr ""

#: ../../library/test.rst:588
msgid ""
"Assert that the ``__all__`` variable of *module* contains all public names."
msgstr ""

#: ../../library/test.rst:590
msgid ""
"The module's public names (its API) are detected automatically based on "
"whether they match the public name convention and were defined in *module*."
msgstr ""

#: ../../library/test.rst:594
msgid ""
"The *name_of_module* argument can specify (as a string or tuple thereof) "
"what module(s) an API could be defined in in order to be detected as a "
"public API. One case for this is when *module* imports part of its public "
"API from other modules, possibly a C backend (like ``csv`` and its ``_csv``)."
msgstr ""

#: ../../library/test.rst:599
msgid ""
"The *extra* argument can be a set of names that wouldn't otherwise be "
"automatically detected as \"public\", like objects without a proper "
"``__module__`` attribute. If provided, it will be added to the automatically "
"detected ones."
msgstr ""

#: ../../library/test.rst:603
msgid ""
"The *blacklist* argument can be a set of names that must not be treated as "
"part of the public API even though their names indicate otherwise."
msgstr ""

#: ../../library/test.rst:628
msgid "The :mod:`test.support` module defines the following classes:"
msgstr ":mod:`test.support` モジュールでは、以下のクラスを定義しています:"

#: ../../library/test.rst:632
msgid ""
"Instances are a context manager that raises :exc:`ResourceDenied` if the "
"specified exception type is raised.  Any keyword arguments are treated as "
"attribute/value pairs to be compared against any exception raised within "
"the :keyword:`with` statement.  Only if all pairs match properly against "
"attributes on the exception is :exc:`ResourceDenied` raised."
msgstr ""
"このクラスのインスタンスはコンテキストマネージャーで、指定された型の例外が発"
"生した場合に :exc:`ResourceDenied` 例外を発生させます。キーワード引数は全"
"て、 :keyword:`with` 文の中で発生した全ての例外の属性名/属性値と比較されま"
"す。全てのキーワード引数が例外の属性に一致した場合に、 :exc:`ResourceDenied` "
"例外が発生します。"

#: ../../library/test.rst:641
msgid ""
"Class used to temporarily set or unset environment variables.  Instances can "
"be used as a context manager and have a complete dictionary interface for "
"querying/modifying the underlying ``os.environ``. After exit from the "
"context manager all changes to environment variables done through this "
"instance will be rolled back."
msgstr ""
"一時的に環境変数をセット・アンセットするためのクラスです。このクラスのインス"
"タンスはコンテキストマネージャーとして利用されます。また、 ``os.environ`` に"
"対する参照・更新を行う完全な辞書のインタフェースを持ちます。コンテキストマ"
"ネージャーが終了した時、このインスタンス経由で環境変数へ行った全ての変更は"
"ロールバックされます。"

#: ../../library/test.rst:647
msgid "Added dictionary interface."
msgstr "辞書のインタフェースを追加しました。"

#: ../../library/test.rst:652
msgid ""
"Temporarily set the environment variable ``envvar`` to the value of "
"``value``."
msgstr "一時的に、 ``envvar`` を ``value`` にセットします。"

#: ../../library/test.rst:658
msgid "Temporarily unset the environment variable ``envvar``."
msgstr "一時的に ``envvar`` をアンセットします。"

#: ../../library/test.rst:663
msgid ""
"A context manager used to try to prevent crash dialog popups on tests that "
"are expected to crash a subprocess."
msgstr ""

#: ../../library/test.rst:666
msgid ""
"On Windows, it disables Windows Error Reporting dialogs using `SetErrorMode "
"<https://msdn.microsoft.com/en-us/library/windows/desktop/ms680621.aspx>`_."
msgstr ""

#: ../../library/test.rst:669
msgid ""
"On UNIX, :func:`resource.setrlimit` is used to set :attr:`resource."
"RLIMIT_CORE`'s soft limit to 0 to prevent coredump file creation."
msgstr ""

#: ../../library/test.rst:673
msgid "On both platforms, the old value is restored by :meth:`__exit__`."
msgstr ""

#: ../../library/test.rst:678
msgid ""
"Class used to record warnings for unit tests. See documentation of :func:"
"`check_warnings` above for more details."
msgstr ""
"ユニットテスト時に warning を記録するためのクラスです。上の、 :func:"
"`check_warnings` のドキュメントを参照してください。"

#: ../../library/test.rst:684
msgid ""
"Simple :term:`path-like object`.  It implements the :meth:`__fspath__` "
"method which just returns the *path* argument.  If *path* is an exception, "
"it will be raised in :meth:`!__fspath__`."
msgstr ""
