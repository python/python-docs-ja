# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/gettext.rst:2
msgid ":mod:`gettext` --- Multilingual internationalization services"
msgstr ":mod:`gettext` --- 多言語対応に関する国際化サービス"

#: ../../library/gettext.rst:10
msgid "**Source code:** :source:`Lib/gettext.py`"
msgstr "**ソースコード:** :source:`Lib/gettext.py`"

#: ../../library/gettext.rst:14
msgid ""
"The :mod:`gettext` module provides internationalization (I18N) and "
"localization (L10N) services for your Python modules and applications. It "
"supports both the GNU :program:`gettext` message catalog API and a higher "
"level, class-based API that may be more appropriate for Python files.  The "
"interface described below allows you to write your module and application "
"messages in one natural language, and provide a catalog of translated "
"messages for running under different natural languages."
msgstr ""
":mod:`gettext` モジュールは、 Python のモジュールやアプリケーションの国際化 "
"(I18N, I-nternationalizatio-N) および地域化  (L10N, L-ocalizatio-N) サービス"
"を提供します。\n"
"このモジュールは GNU :program:`gettext` メッセージカタログの API と、より高水"
"準で Python ファイルに適しているクラス形式の API の両方をサポートしてます。\n"
"以下で述べるインターフェースを使うことで、モジュールやアプリケーションのメッ"
"セージをある自然言語で記述しておき、後から提供する翻訳されたメッセージのカタ"
"ログによって様々な自然言語環境で実行できます。"

#: ../../library/gettext.rst:22
msgid ""
"Some hints on localizing your Python modules and applications are also given."
msgstr ""
"ここでは Python のモジュールやアプリケーションを地域化するためのいくつかのヒ"
"ントも提供しています。"

#: ../../library/gettext.rst:26
msgid "GNU :program:`gettext` API"
msgstr "GNU :program:`gettext` API"

#: ../../library/gettext.rst:28
msgid ""
"The :mod:`gettext` module defines the following API, which is very similar "
"to the GNU :program:`gettext` API.  If you use this API you will affect the "
"translation of your entire application globally.  Often this is what you "
"want if your application is monolingual, with the choice of language "
"dependent on the locale of your user.  If you are localizing a Python "
"module, or if your application needs to switch languages on the fly, you "
"probably want to use the class-based API instead."
msgstr ""
":mod:`gettext` モジュールでは、以下の GNU :program:`gettext` API に非常に良く"
"似た API を提供しています。\n"
"この API を使う場合、アプリケーション全体の翻訳に影響します。\n"
"アプリケーションが単一の言語しか扱わず、ユーザのロケールに従って言語が選ばれ"
"るのなら、たいていはこの API が求めているものです。\n"
"Python モジュールを地域化していたり、アプリケーションの実行中に言語を切り替え"
"る必要がある場合は、この API ではなくおそらくクラス形式の API を使いたくなる"
"でしょう。"

#: ../../library/gettext.rst:39
msgid ""
"Bind the *domain* to the locale directory *localedir*.  More concretely, :"
"mod:`gettext` will look for binary :file:`.mo` files for the given domain "
"using the path (on Unix): :file:`{localedir}/{language}/LC_MESSAGES/{domain}."
"mo`, where *language* is searched for in the environment variables :envvar:"
"`LANGUAGE`, :envvar:`LC_ALL`, :envvar:`LC_MESSAGES`, and :envvar:`LANG` "
"respectively."
msgstr ""
"*domain* をロケールディレクトリ *localedir* に対応付けます。\n"
"具体的には、 :mod:`gettext` は与えられたドメインに対するバイナリ形式の :file:"
"`.mo` ファイルを探しに、(Unixでは) :file:`{localedir}/{language}/LC_MESSAGES/"
"{domain}.mo` というパスを見に行きます。\n"
"ここで *language* はそれぞれ環境変数 :envvar:`LANGUAGE` 、 :envvar:"
"`LC_ALL` 、 :envvar:`LC_MESSAGES` 、 :envvar:`LANG` の中から検索されます。"

#: ../../library/gettext.rst:45
msgid ""
"If *localedir* is omitted or ``None``, then the current binding for *domain* "
"is returned. [#]_"
msgstr ""
"*localedir* が省略されるか ``None`` の場合、現在 *domain* に対応付けられてい"
"るロケールディレクトリが返されます。 [#]_"

#: ../../library/gettext.rst:51
msgid ""
"Bind the *domain* to *codeset*, changing the encoding of byte strings "
"returned by the :func:`lgettext`, :func:`ldgettext`, :func:`lngettext` and :"
"func:`ldngettext` functions. If *codeset* is omitted, then the current "
"binding is returned."
msgstr ""
"*domain* を *codeset* に対応付け、 :func:`lgettext`, :func:`ldgettext`, :"
"func:`lngettext`, :func:`ldngettext` 関数が返すバイト文字列のエンコード方式を"
"変更します。\n"
"*codeset* が省略された場合は、現在 *domain* に対応付けられているコードセット"
"を返します。"

#: ../../library/gettext.rst:61
msgid ""
"Change or query the current global domain.  If *domain* is ``None``, then "
"the current global domain is returned, otherwise the global domain is set to "
"*domain*, which is returned."
msgstr ""
"現在のグローバルドメインを変更したり調べたりします。\n"
"*domain* が ``None`` の場合、現在のグローバルドメインが返されます。それ以外の"
"場合には、グローバルドメインに *domain* を設定し、その設定されたグローバルド"
"メインを返します。"

#: ../../library/gettext.rst:69
msgid ""
"Return the localized translation of *message*, based on the current global "
"domain, language, and locale directory.  This function is usually aliased "
"as :func:`_` in the local namespace (see examples below)."
msgstr ""
"現在のグローバルドメイン、言語、およびロケールディレクトリに基づいて、 "
"*message* の地域化された訳文を返します。\n"
"通常、この関数はローカルな名前空間にある :func:`_` という別名を持ちます (下の"
"例を参照してください)。"

#: ../../library/gettext.rst:76
msgid ""
"Like :func:`.gettext`, but look the message up in the specified *domain*."
msgstr ""
":func:`.gettext` と同様ですが、指定された *domain* からメッセージを探します。"

#: ../../library/gettext.rst:81
msgid ""
"Like :func:`.gettext`, but consider plural forms. If a translation is found, "
"apply the plural formula to *n*, and return the resulting message (some "
"languages have more than two plural forms). If no translation is found, "
"return *singular* if *n* is 1; return *plural* otherwise."
msgstr ""
":func:`.gettext` と同様ですが、複数形を考慮しています。\n"
"翻訳が見つかった場合、複数形の選択公式を *n* に適用し、その結果得られたメッ"
"セージを返します (言語によっては二つ以上の複数形があります)。\n"
"翻訳が見つからなかった場合、 *n* が 1 なら *singular* を返します; そうでない"
"場合 *plural* を返します。"

#: ../../library/gettext.rst:86
msgid ""
"The Plural formula is taken from the catalog header. It is a C or Python "
"expression that has a free variable *n*; the expression evaluates to the "
"index of the plural in the catalog. See `the GNU gettext documentation "
"<https://www.gnu.org/software/gettext/manual/gettext.html>`__ for the "
"precise syntax to be used in :file:`.po` files and the formulas for a "
"variety of languages."
msgstr ""
"複数形の選択公式はカタログのヘッダから取得されます。\n"
"選択公式は自由変数 *n* を持つ C または Python の式です;\n"
"その式の評価結果はカタログにある複数形のインデックスになります。\n"
":file:`.po` ファイルで用いられる詳細な文法と、様々な言語における選択公式につ"
"いては `GNU gettext ドキュメント <https://www.gnu.org/software/gettext/"
"manual/gettext.html>`__ を参照してください。"

#: ../../library/gettext.rst:96
msgid ""
"Like :func:`ngettext`, but look the message up in the specified *domain*."
msgstr ""
":func:`ngettext` と同様ですが、指定された *domain* からメッセージを探します。"

#: ../../library/gettext.rst:104
msgid ""
"Similar to the corresponding functions without the ``p`` in the prefix (that "
"is, :func:`gettext`, :func:`dgettext`, :func:`ngettext`, :func:`dngettext`), "
"but the translation is restricted to the given message *context*."
msgstr ""

#: ../../library/gettext.rst:116
msgid ""
"Equivalent to the corresponding functions without the ``l`` prefix (:func:`."
"gettext`, :func:`dgettext`, :func:`ngettext` and :func:`dngettext`), but the "
"translation is returned as a byte string encoded in the preferred system "
"encoding if no other encoding was explicitly set with :func:"
"`bind_textdomain_codeset`."
msgstr ""
"それぞれに対応する先頭の ``l`` が無い関数 (:func:`.gettext`, :func:"
"`dgettext`, :func:`ngettext`, :func:`dngettext`) と同じですが、エンコーディン"
"グが :func:`bind_textdomain_codeset` を使って明示的に設定されていない場合、翻"
"訳結果は優先システムエンコーディングでエンコードされたバイト文字列として返さ"
"れます。"

#: ../../library/gettext.rst:124
msgid ""
"These functions should be avoided in Python 3, because they return encoded "
"bytes.  It's much better to use alternatives which return Unicode strings "
"instead, since most Python applications will want to manipulate human "
"readable text as strings instead of bytes.  Further, it's possible that you "
"may get unexpected Unicode-related exceptions if there are encoding problems "
"with the translated strings."
msgstr ""
"これらの関数はエンコードされたバイト列を返すため Python 3 で使うのは避けるべ"
"きです。\n"
"ほとんどの Python アプリケーションでは、人間が読むテキストをバイト列ではなく"
"文字列として扱いたいので、 Unicode 文字列を返す代わりの関数を使う方が良いで"
"す。\n"
"さらに言うと、翻訳文字列にエンコーディング上の問題があった場合、 Unicode 関連"
"の予期しない例外を受け取るかもしれません。"

#: ../../library/gettext.rst:134
msgid ""
"Note that GNU :program:`gettext` also defines a :func:`dcgettext` method, "
"but this was deemed not useful and so it is currently unimplemented."
msgstr ""
"GNU :program:`gettext` では :func:`dcgettext` も定義していますが、このメソッ"
"ドはあまり有用ではないと思われるので、現在のところ実装されていません。"

#: ../../library/gettext.rst:137
msgid "Here's an example of typical usage for this API::"
msgstr "以下にこの API の典型的な使用法を示します::"

#: ../../library/gettext.rst:148
msgid "Class-based API"
msgstr "クラス形式の API"

#: ../../library/gettext.rst:150
msgid ""
"The class-based API of the :mod:`gettext` module gives you more flexibility "
"and greater convenience than the GNU :program:`gettext` API.  It is the "
"recommended way of localizing your Python applications and modules.  :mod:`!"
"gettext` defines a :class:`GNUTranslations` class which implements the "
"parsing of GNU :file:`.mo` format files, and has methods for returning "
"strings. Instances of this class can also install themselves in the built-in "
"namespace as the function :func:`_`."
msgstr ""
":mod:`gettext` モジュールのクラス形式の API は、 GNU :program:`gettext` API "
"よりも高い柔軟性と利便性を持っています。\n"
"Python のアプリケーションやモジュールを地域化するにはこちらを使うことをお勧め"
"します。\n"
":mod:`!gettext` には、GNU :file:`.mo` 形式のファイルを構文解析する処理の実装"
"と、文字列を返すメソッドを持つ :class:`GNUTranslations` クラスが定義されてい"
"ます。\n"
"このクラスのインスタンスも、自分自身を組み込み名前空間に関数  :func:`_` とし"
"て配置できます。"

#: ../../library/gettext.rst:160
msgid ""
"This function implements the standard :file:`.mo` file search algorithm.  It "
"takes a *domain*, identical to what :func:`textdomain` takes.  Optional "
"*localedir* is as in :func:`bindtextdomain`. Optional *languages* is a list "
"of strings, where each string is a language code."
msgstr ""
"この関数は標準的な :file:`.mo` ファイル検索アルゴリズムを実装しています。 :"
"func:`textdomain` と同じく、 *domain* を引数にとります。オプションの "
"*localedir* は :func:`bindtextdomain` と同じです。またオプションの "
"*languages* は文字列を列挙したリストで、各文字列は言語コードを表します。"

#: ../../library/gettext.rst:165
msgid ""
"If *localedir* is not given, then the default system locale directory is "
"used. [#]_  If *languages* is not given, then the following environment "
"variables are searched: :envvar:`LANGUAGE`, :envvar:`LC_ALL`, :envvar:"
"`LC_MESSAGES`, and :envvar:`LANG`.  The first one returning a non-empty "
"value is used for the *languages* variable. The environment variables should "
"contain a colon separated list of languages, which will be split on the "
"colon to produce the expected list of language code strings."
msgstr ""
"*localedir* が与えられていない場合、標準のシステムロケールディレクトリが使わ"
"れます。 [#]_ *languages* が与えられなかった場合、以下の環境変数: :envvar:"
"`LANGUAGE` 、 :envvar:`LC_ALL` 、 :envvar:`LC_MESSAGES` 、および :envvar:"
"`LANG` が検索されます。空でない値を返した最初の候補が *languages* 変数として"
"使われます。この環境変数は言語名をコロンで分かち書きしたリストを含んでいなけ"
"ればなりません。 :func:`find` はこの文字列をコロンで分割し、言語コードの候補"
"リストを生成します。"

#: ../../library/gettext.rst:173
msgid ""
":func:`find` then expands and normalizes the languages, and then iterates "
"through them, searching for an existing file built of these components:"
msgstr ""
":func:`find` は次に言語コードを展開および正規化し、リストの各要素について、以"
"下のパス構成:"

#: ../../library/gettext.rst:176
msgid ":file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`"
msgstr ":file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`"

#: ../../library/gettext.rst:178
msgid ""
"The first such file name that exists is returned by :func:`find`. If no such "
"file is found, then ``None`` is returned. If *all* is given, it returns a "
"list of all file names, in the order in which they appear in the languages "
"list or the environment variables."
msgstr ""
"からなる実在するファイルの探索を反復的に行います。 :func:`find` は上記のよう"
"な実在するファイルで最初に見つかったものを返します。該当するファイルが見つか"
"らなかった場合、 ``None`` が返されます。 *all* が与えられていれば、全ファイル"
"名のリストが言語リストまたは環境変数で指定されている順番に並べられたものを返"
"します。"

#: ../../library/gettext.rst:186
msgid ""
"Return a :class:`*Translations` instance based on the *domain*, *localedir*, "
"and *languages*, which are first passed to :func:`find` to get a list of the "
"associated :file:`.mo` file paths.  Instances with identical :file:`.mo` "
"file names are cached.  The actual class instantiated is *class_* if "
"provided, otherwise :class:`GNUTranslations`.  The class's constructor must "
"take a single :term:`file object` argument.  If provided, *codeset* will "
"change the charset used to encode translated strings in the :meth:"
"`~NullTranslations.lgettext` and :meth:`~NullTranslations.lngettext` methods."
msgstr ""
"*domain* 、 *localedir* 、 *languages* に基づいて :class:`*Translations` イン"
"スタンスを返します。\n"
"*domain* 、 *localedir* 、 *languages* はまず :func:`find` に渡され、関連付け"
"られている :file:`.mo` ファイルパスのリストを取得します。\n"
"同一の :file:`.mo` ファイル名を持つインスタンスはキャッシュされます。\n"
"実際にインスタンス化されるクラスは、 *class_* が与えられていた場合はそのクラ"
"スで、そうでない場合には :class:`GNUTranslations` です。\n"
"クラスのコンストラクタは単一の引数として :term:`file object` を取らなければな"
"りません。\n"
"*codeset* が与えられた場合、 :meth:`~NullTranslations.lgettext` メソッドおよ"
"び :meth:`~NullTranslations.lngettext` メソッドで翻訳文字列のエンコードに使う"
"文字集合を変更します。"

#: ../../library/gettext.rst:196
msgid ""
"If multiple files are found, later files are used as fallbacks for earlier "
"ones. To allow setting the fallback, :func:`copy.copy` is used to clone each "
"translation object from the cache; the actual instance data is still shared "
"with the cache."
msgstr ""
"複数の :file:`.mo` ファイルがあった場合、後ろのファイルは前のファイルのフォー"
"ルバックとして利用されます。\n"
"フォールバックの設定のために、 :func:`copy.copy` を使いキャッシュから翻訳オブ"
"ジェクトを複製します; こうすることで、実際のインスタンスデータはキャッシュの"
"ものと共有されたままになります。"

#: ../../library/gettext.rst:201
msgid ""
"If no :file:`.mo` file is found, this function raises :exc:`OSError` if "
"*fallback* is false (which is the default), and returns a :class:"
"`NullTranslations` instance if *fallback* is true."
msgstr ""
":file:`.mo` ファイルが見つからなかった場合、 *fallback* が偽 (デフォルト値) "
"ならこの関数は :exc:`OSError` を送出し、 *fallback* が真なら :class:"
"`NullTranslations` インスタンスが返されます。"

#: ../../library/gettext.rst:205
msgid ":exc:`IOError` used to be raised instead of :exc:`OSError`."
msgstr "以前は :exc:`OSError` の代わりに :exc:`IOError` が送出されていました。"

#: ../../library/gettext.rst:209 ../../library/gettext.rst:232
msgid "The *codeset* parameter."
msgstr "*codeset* 引数。"

#: ../../library/gettext.rst:214
msgid ""
"This installs the function :func:`_` in Python's builtins namespace, based "
"on *domain*, *localedir*, and *codeset* which are passed to the function :"
"func:`translation`."
msgstr ""
":func:`translation` に *domain* 、 *localedir* 、および *codeset* を渡してで"
"きる関数 :func:`_` を Python の組み込み名前空間に組み込みます。"

#: ../../library/gettext.rst:218
msgid ""
"For the *names* parameter, please see the description of the translation "
"object's :meth:`~NullTranslations.install` method."
msgstr ""
"*names* パラメータについては、翻訳オブジェクトの :meth:`~NullTranslations."
"install` メソッドの説明を参照ください。"

#: ../../library/gettext.rst:221
msgid ""
"As seen below, you usually mark the strings in your application that are "
"candidates for translation, by wrapping them in a call to the :func:`_` "
"function, like this::"
msgstr ""
"以下に示すように、通常はアプリケーション中の文字列を関数 :func:`_` の呼び出し"
"で包み込んで翻訳対象候補であることを示します::"

#: ../../library/gettext.rst:227
msgid ""
"For convenience, you want the :func:`_` function to be installed in Python's "
"builtins namespace, so it is easily accessible in all modules of your "
"application."
msgstr ""
"利便性を高めるためには、 :func:`_` 関数を Python の組み込み名前空間に組み入れ"
"る必要があります。こうすることで、アプリケーション内の全てのモジュールからア"
"クセスできるようになります。"

#: ../../library/gettext.rst:236
msgid "The :class:`NullTranslations` class"
msgstr ":class:`NullTranslations` クラス"

#: ../../library/gettext.rst:238
msgid ""
"Translation classes are what actually implement the translation of original "
"source file message strings to translated message strings. The base class "
"used by all translation classes is :class:`NullTranslations`; this provides "
"the basic interface you can use to write your own specialized translation "
"classes.  Here are the methods of :class:`!NullTranslations`:"
msgstr ""
"翻訳クラスは、元のソースファイル中のメッセージ文字列から翻訳されたメッセージ"
"文字列への変換処理が実際に実装されているクラスです。\n"
"全ての翻訳クラスで基底クラスとして使われているクラスが :class:"
"`NullTranslations` です; このクラスは、独自の翻訳クラスを実装するのに使える基"
"本的なインターフェースを提供しています。\n"
"以下に :class:`!NullTranslations` のメソッドを示します:"

#: ../../library/gettext.rst:247
msgid ""
"Takes an optional :term:`file object` *fp*, which is ignored by the base "
"class. Initializes \"protected\" instance variables *_info* and *_charset* "
"which are set by derived classes, as well as *_fallback*, which is set "
"through :meth:`add_fallback`.  It then calls ``self._parse(fp)`` if *fp* is "
"not ``None``."
msgstr ""
"オプションの :term:`ファイルオブジェクト <file object>` *fp* を取ります。この"
"引数は基底クラスでは無視されます。このメソッドは  \"保護された (protected)\" "
"インスタンス変数 *_info* および  *_charset* を初期化します。これらの変数の値"
"は派生クラスで設定することができます。同様に *_fallback* も初期化しますが、こ"
"の値は :meth:`add_fallback` で設定されます。その後、 *fp* が ``None`` でない"
"場合 ``self._parse(fp)`` を呼び出します。"

#: ../../library/gettext.rst:255
msgid ""
"No-op in the base class, this method takes file object *fp*, and reads the "
"data from the file, initializing its message catalog.  If you have an "
"unsupported message catalog file format, you should override this method to "
"parse your format."
msgstr ""
"基底クラスでは何もしない (no-op) ようになっています。このメソッドの役割はファ"
"イルオブジェクト *fp* を引数に取り、ファイルからデータを読み出し、メッセージ"
"カタログを初期化することです。サポートされていないメッセージカタログ形式を"
"使っている場合、その形式を解釈するためにはこのメソッドを上書きしなくてはなり"
"ません。"

#: ../../library/gettext.rst:263
msgid ""
"Add *fallback* as the fallback object for the current translation object. A "
"translation object should consult the fallback if it cannot provide a "
"translation for a given message."
msgstr ""
"*fallback* を現在の翻訳オブジェクトの代替オブジェクトとして追加します。翻訳オ"
"ブジェクトが与えられたメッセージに対して翻訳メッセージを提供できない場合、こ"
"の代替オブジェクトに問い合わせることになります。"

#: ../../library/gettext.rst:270
msgid ""
"If a fallback has been set, forward :meth:`!gettext` to the fallback. "
"Otherwise, return *message*.  Overridden in derived classes."
msgstr ""
"フォールバックが設定されている場合、フォールバックの :meth:`!gettext` に処理"
"を移譲します。\n"
"そうでない場合、引数として受け取った *message* を返します。\n"
"派生クラスで上書きするメソッドです。"

#: ../../library/gettext.rst:276
msgid ""
"If a fallback has been set, forward :meth:`!ngettext` to the fallback. "
"Otherwise, return *singular* if *n* is 1; return *plural* otherwise. "
"Overridden in derived classes."
msgstr ""
"フォールバックが設定されている場合、フォールバックの :meth:`!ngettext` に処理"
"を移譲します。\n"
"そうでない場合、 *n* が 1 なら *singular* を返します; それ以外なら *plural* "
"を返します。\n"
"派生クラスで上書きするメソッドです。"

#: ../../library/gettext.rst:283
msgid ""
"If a fallback has been set, forward :meth:`pgettext` to the fallback. "
"Otherwise, return the translated message.  Overridden in derived classes."
msgstr ""
"代替オブジェクトが設定されている場合、 :meth:`pgettext` を代替オブジェクトに"
"転送します。そうでない場合、翻訳されたメッセージを返します。派生クラスで上書"
"きするメソッドです。"

#: ../../library/gettext.rst:291
msgid ""
"If a fallback has been set, forward :meth:`npgettext` to the fallback. "
"Otherwise, return the translated message.  Overridden in derived classes."
msgstr ""
"代替オブジェクトが設定されている場合、 :meth:`npgettext` を代替オブジェクトに"
"転送します。そうでない場合、翻訳されたメッセージを返します。派生クラスで上書"
"きするメソッドです。"

#: ../../library/gettext.rst:300
msgid ""
"Equivalent to :meth:`.gettext` and :meth:`.ngettext`, but the translation is "
"returned as a byte string encoded in the preferred system encoding if no "
"encoding was explicitly set with :meth:`set_output_charset`. Overridden in "
"derived classes."
msgstr ""
":meth:`.gettext` および :meth:`.ngettext` と同じですが、エンコーディングが :"
"meth:`set_output_charset` で明示的に設定されていない場合、翻訳結果は優先シス"
"テムエンコーディングでエンコードされたバイト文字列として返されます。\n"
"派生クラスで上書きするメソッドです。"

#: ../../library/gettext.rst:307 ../../library/gettext.rst:463
msgid ""
"These methods should be avoided in Python 3.  See the warning for the :func:"
"`lgettext` function."
msgstr ""
"これらのメソッドは Python 3 で使うのは避けるべきです。\n"
":func:`lgettext` 関数に対する警告を参照してください。"

#: ../../library/gettext.rst:315
msgid ""
"Return the \"protected\" :attr:`_info` variable, a dictionary containing the "
"metadata found in the message catalog file."
msgstr ""

#: ../../library/gettext.rst:321
msgid "Return the encoding of the message catalog file."
msgstr "メッセージカタログファイルのエンコーディングを返します。"

#: ../../library/gettext.rst:326
msgid ""
"Return the encoding used to return translated messages in :meth:`.lgettext` "
"and :meth:`.lngettext`."
msgstr ""
":meth:`lgettext` と :meth:`lngettext` の返り値となる翻訳メッセージで使われて"
"いるエンコーディングを返します。"

#: ../../library/gettext.rst:334
msgid "Change the encoding used to return translated messages."
msgstr "返り値の翻訳メッセージで使われるエンコーディングを変更します。"

#: ../../library/gettext.rst:341
msgid ""
"This method installs :meth:`.gettext` into the built-in namespace, binding "
"it to ``_``."
msgstr ""
"このメソッドは :meth:`.gettext` を組み込み名前空間にインストールし、変数 "
"``_`` に束縛します。"

#: ../../library/gettext.rst:344
msgid ""
"If the *names* parameter is given, it must be a sequence containing the "
"names of functions you want to install in the builtins namespace in addition "
"to :func:`_`.  Supported names are ``'gettext'``, ``'ngettext'``, "
"``'pgettext'``, ``'npgettext'``, ``'lgettext'``, and ``'lngettext'``."
msgstr ""
"*names* パラメータを与える場合には、 :func:`_` 以外では組み込み名前空間に配置"
"したい関数名を列挙したシーケンスでなければなりません。\n"
"サポートされている名前は ``'gettext'``, ``'ngettext'``, ``'pgettext'``, "
"``'npgettext'``, ``'lgettext'``, ``'lngettext'`` です。"

#: ../../library/gettext.rst:349
msgid ""
"Note that this is only one way, albeit the most convenient way, to make the :"
"func:`_` function available to your application.  Because it affects the "
"entire application globally, and specifically the built-in namespace, "
"localized modules should never install :func:`_`. Instead, they should use "
"this code to make :func:`_` available to their module::"
msgstr ""
"この方法はアプリケーションで :func:`_` 関数を利用できるようにするための最も便"
"利な方法ですが、唯一の手段でもあるので注意してください。この関数はアプリケー"
"ション全体、とりわけ組み込み名前空間に影響するので、地域化されたモジュール"
"で :func:`_` を組み入れることができないのです。その代わりに、以下のコードを"
"使って :func:`_` を使えるようにしなければなりません。::"

#: ../../library/gettext.rst:359
msgid ""
"This puts :func:`_` only in the module's global namespace and so only "
"affects calls within this module."
msgstr ""
"この操作は :func:`_` をモジュール内だけのグローバル名前空間に組み入れるので、"
"モジュール内の :func:`_` の呼び出しだけに影響します。"

#: ../../library/gettext.rst:362
msgid "Added ``'pgettext'`` and ``'npgettext'``."
msgstr "``'pgettext'`` と ``'npgettext'`` が追加されました。"

#: ../../library/gettext.rst:367
msgid "The :class:`GNUTranslations` class"
msgstr ":class:`GNUTranslations` クラス"

#: ../../library/gettext.rst:369
msgid ""
"The :mod:`gettext` module provides one additional class derived from :class:"
"`NullTranslations`: :class:`GNUTranslations`.  This class overrides :meth:"
"`_parse` to enable reading GNU :program:`gettext` format :file:`.mo` files "
"in both big-endian and little-endian format."
msgstr ""
":mod:`gettext` モジュールでは :class:`NullTranslations` から派生したもう一つ"
"のクラス: :class:`GNUTranslations` を提供しています。このクラスはビッグエン"
"ディアン、およびリトルエンディアン両方のバイナリ形式の GNU :program:"
"`gettext` :file:`.mo` ファイルを読み出せるように :meth:`_parse` を上書きして"
"います。"

#: ../../library/gettext.rst:374
msgid ""
":class:`GNUTranslations` parses optional metadata out of the translation "
"catalog. It is convention with GNU :program:`gettext` to include metadata as "
"the translation for the empty string. This metadata is in :rfc:`822`\\ -"
"style ``key: value`` pairs, and should contain the ``Project-Id-Version`` "
"key.  If the key ``Content-Type`` is found, then the ``charset`` property is "
"used to initialize the \"protected\" :attr:`_charset` instance variable, "
"defaulting to ``None`` if not found.  If the charset encoding is specified, "
"then all message ids and message strings read from the catalog are converted "
"to Unicode using this encoding, else ASCII is assumed."
msgstr ""
":class:`GNUTranslations` はまた、翻訳カタログ以外に、オプションのメタデータを"
"読み込んで解釈します。GNU :program:`gettext` では、空の文字列に対する変換先と"
"してメタデータを取り込むことが慣習になっています。このメタデータは :rfc:"
"`822` 形式の ``key: value`` のペアになっており、 ``Project-Id-Version`` キー"
"を含んでいなければなりません。キー ``Content-Type`` があった場合、 "
"``charset`` の特性値 (property) は \"保護された\" :attr:`_charset` インスタン"
"ス変数を初期化するために用いられます。値がない場合には、デフォルトとして "
"``None`` が使われます。エンコードに用いられる文字セットが指定されている場合、"
"カタログから読み出された全てのメッセージ id とメッセージ文字列は、指定された"
"エンコードを用いて Unicode に変換され、そうでなければ ASCII とみなされます。"

#: ../../library/gettext.rst:384
msgid ""
"Since message ids are read as Unicode strings too, all :meth:`*gettext` "
"methods will assume message ids as Unicode strings, not byte strings."
msgstr ""
"メッセージ id もユニコード文字列として解釈されるので、すべての :meth:"
"`*gettext` メソッドはメッセージ id をバイト文字列ではなくユニコード文字列と仮"
"定するでしょう。"

#: ../../library/gettext.rst:387
msgid ""
"The entire set of key/value pairs are placed into a dictionary and set as "
"the \"protected\" :attr:`_info` instance variable."
msgstr ""
"key/value ペアの集合全体は辞書型データ中に配置され、\"保護された\" :attr:"
"`_info` インスタンス変数に設定されます。"

#: ../../library/gettext.rst:390
msgid ""
"If the :file:`.mo` file's magic number is invalid, the major version number "
"is unexpected, or if other problems occur while reading the file, "
"instantiating a :class:`GNUTranslations` class can raise :exc:`OSError`."
msgstr ""
":file:`.mo` ファイルのマジックナンバーが不正な場合や、メジャーバージョン番号"
"が予期されないものの場合、あるいはその他の問題がファイルの読み出し中に発生し"
"た場合、 :class:`GNUTranslations` クラスのインスタンス化で :exc:`OSError` が"
"送出されることがあります。"

#: ../../library/gettext.rst:396
msgid ""
"The following methods are overridden from the base class implementation:"
msgstr "以下のメソッドは基底クラスの実装からオーバライドされています:"

#: ../../library/gettext.rst:400
msgid ""
"Look up the *message* id in the catalog and return the corresponding message "
"string, as a Unicode string.  If there is no entry in the catalog for the "
"*message* id, and a fallback has been set, the look up is forwarded to the "
"fallback's :meth:`~NullTranslations.gettext` method.  Otherwise, the "
"*message* id is returned."
msgstr ""
"カタログから *message* id を検索して、対応するメッセージ文字列を Unicode でエ"
"ンコードして返します。\n"
"*message* id に対応するエントリがカタログに存在せず、フォールバックが設定され"
"ている場合、検索処理をフォールバックの :meth:`~NullTranslations.gettext` メ"
"ソッドに移譲します。\n"
"それ以外の場合は、 *message* id 自体が返されます。"

#: ../../library/gettext.rst:409
msgid ""
"Do a plural-forms lookup of a message id.  *singular* is used as the message "
"id for purposes of lookup in the catalog, while *n* is used to determine "
"which plural form to use.  The returned message string is a Unicode string."
msgstr ""
"メッセージ id に対する複数形を検索します。カタログに対する検索では "
"*singular* がメッセージ id として用いられ、 *n* にはどの複数形を用いるかを指"
"定します。返されるメッセージ文字列は Unicode 文字列です。"

#: ../../library/gettext.rst:413
msgid ""
"If the message id is not found in the catalog, and a fallback is specified, "
"the request is forwarded to the fallback's :meth:`~NullTranslations."
"ngettext` method.  Otherwise, when *n* is 1 *singular* is returned, and "
"*plural* is returned in all other cases."
msgstr ""
"メッセージ id がカタログ中に見つからず、フォールバックが指定されている場合"
"は、メッセージ検索要求はフォールバックの :meth:`~NullTranslations.ngettext` "
"メソッドに移譲されます。\n"
"それ以外の場合、 *n* が 1 ならば *singular* が返され、それ以外なら *plural* "
"が返されます。"

#: ../../library/gettext.rst:418
msgid "Here is an example::"
msgstr "以下に例を示します。::"

#: ../../library/gettext.rst:430
msgid ""
"Look up the *context* and *message* id in the catalog and return the "
"corresponding message string, as a Unicode string.  If there is no entry in "
"the catalog for the *message* id and *context*, and a fallback has been set, "
"the look up is forwarded to the fallback's :meth:`pgettext` method.  "
"Otherwise, the *message* id is returned."
msgstr ""
"カタログから *context* と *message* id を検索して、対応するメッセージ文字列"
"を、 Unicode でエンコードして返します。 *message* id と *context* に対するエ"
"ントリがカタログに存在せず、フォールバックが設定されている場合、フォールバッ"
"ク検索はオブジェクトの :meth:`pgettext` メソッドに転送されます。そうでない場"
"合、 *message* id 自体が返されます。"

#: ../../library/gettext.rst:441
msgid ""
"Do a plural-forms lookup of a message id.  *singular* is used as the message "
"id for purposes of lookup in the catalog, while *n* is used to determine "
"which plural form to use."
msgstr ""
"メッセージ id に対する複数形を検索します。カタログに対する検索では "
"*singular* がメッセージ id として用いられ、 *n* にはどの複数形を用いるかを指"
"定します。"

#: ../../library/gettext.rst:445
msgid ""
"If the message id for *context* is not found in the catalog, and a fallback "
"is specified, the request is forwarded to the fallback's :meth:`npgettext` "
"method.  Otherwise, when *n* is 1 *singular* is returned, and *plural* is "
"returned in all other cases."
msgstr ""
"*context* に対するメッセージ id がカタログ中に見つからず、フォールバックオブ"
"ジェクトが指定されている場合、メッセージ検索要求はフォールバックオブジェクト"
"の :meth:`npgettext` メソッドに転送されます。そうでない場合、 *n* が 1 なら"
"ば *singular* が返され、それ以外に対しては *plural* が返されます。"

#: ../../library/gettext.rst:456
msgid ""
"Equivalent to :meth:`.gettext` and :meth:`.ngettext`, but the translation is "
"returned as a byte string encoded in the preferred system encoding if no "
"encoding  was explicitly set with :meth:`~NullTranslations."
"set_output_charset`."
msgstr ""
":meth:`.gettext` および :meth:`.ngettext` と同じですが、エンコーディングが :"
"meth:`~NullTranslations.set_output_charset` で明示的に設定されていない場合、"
"翻訳結果は優先システムエンコーディングでエンコードされたバイト文字列として返"
"されます。"

#: ../../library/gettext.rst:470
msgid "Solaris message catalog support"
msgstr "Solaris メッセージカタログ機構のサポート"

#: ../../library/gettext.rst:472
msgid ""
"The Solaris operating system defines its own binary :file:`.mo` file format, "
"but since no documentation can be found on this format, it is not supported "
"at this time."
msgstr ""
"Solaris オペレーティングシステムでは、独自の :file:`.mo` バイナリファイル形式"
"を定義していますが、この形式に関するドキュメントが手に入らないため、現時点で"
"はサポートされていません。"

#: ../../library/gettext.rst:478
msgid "The Catalog constructor"
msgstr "Catalog コンストラクタ"

#: ../../library/gettext.rst:482
msgid ""
"GNOME uses a version of the :mod:`gettext` module by James Henstridge, but "
"this version has a slightly different API.  Its documented usage was::"
msgstr ""
"GNOME では、James Henstridge によるあるバージョンの :mod:`gettext` モジュール"
"を使っていますが、このバージョンは少し異なった API を持っています。ドキュメン"
"トに書かれている利用法は::"

#: ../../library/gettext.rst:490
msgid ""
"For compatibility with this older module, the function :func:`Catalog` is an "
"alias for the :func:`translation` function described above."
msgstr ""
"となっています。過去のモジュールとの互換性のために、 :func:`Catalog` は前述"
"の :func:`translation` 関数の別名になっています。"

#: ../../library/gettext.rst:493
msgid ""
"One difference between this module and Henstridge's: his catalog objects "
"supported access through a mapping API, but this appears to be unused and so "
"is not currently supported."
msgstr ""
"このモジュールと Henstridge のバージョンとの間には一つ相違点があります: 彼の"
"カタログオブジェクトはマップ型の API を介したアクセスがサポートされていました"
"が、この API は使われていないらしく、現在はサポートされていません。"

#: ../../library/gettext.rst:499
msgid "Internationalizing your programs and modules"
msgstr "プログラムやモジュールを国際化する"

#: ../../library/gettext.rst:501
msgid ""
"Internationalization (I18N) refers to the operation by which a program is "
"made aware of multiple languages.  Localization (L10N) refers to the "
"adaptation of your program, once internationalized, to the local language "
"and cultural habits. In order to provide multilingual messages for your "
"Python programs, you need to take the following steps:"
msgstr ""
"国際化 (I18N, I-nternationalizatio-N) とは、プログラムを複数の言語に対応させ"
"る操作を指します。地域化 (L10N, L-ocalizatio-N) とは、すでに国際化されている"
"プログラムを特定地域の言語や文化的な事情に対応させることを指します。Python プ"
"ログラムに多言語メッセージ機能を追加するには、以下の手順を踏む必要があります:"

#: ../../library/gettext.rst:507
msgid ""
"prepare your program or module by specially marking translatable strings"
msgstr ""
"プログラムやモジュールで翻訳対象とする文字列に特殊なマークをつけて準備します"

#: ../../library/gettext.rst:509
msgid ""
"run a suite of tools over your marked files to generate raw messages catalogs"
msgstr ""
"マークづけをしたファイルに一連のツールを走らせ、生のメッセージカタログを生成"
"します"

#: ../../library/gettext.rst:511
msgid "create language-specific translations of the message catalogs"
msgstr "特定の言語へのメッセージカタログの翻訳を作成します"

#: ../../library/gettext.rst:513
msgid ""
"use the :mod:`gettext` module so that message strings are properly translated"
msgstr ""
"メッセージ文字列を適切に変換するために :mod:`gettext` モジュールを使います"

#: ../../library/gettext.rst:515
msgid ""
"In order to prepare your code for I18N, you need to look at all the strings "
"in your files.  Any string that needs to be translated should be marked by "
"wrapping it in ``_('...')`` --- that is, a call to the function :func:`_`.  "
"For example::"
msgstr ""
"ソースコードを I18N 化する準備として、ファイル内の全ての文字列を探す必要があ"
"ります。翻訳を行う必要のある文字列はどれも ``_('...')`` --- すなわち関数 :"
"func:`_` の呼び出しで包むことでマーク付けしなくてはなりません。例えば以下のよ"
"うにします::"

#: ../../library/gettext.rst:524
msgid ""
"In this example, the string ``'writing a log message'`` is marked as a "
"candidate for translation, while the strings ``'mylog.txt'`` and ``'w'`` are "
"not."
msgstr ""
"この例では、文字列 ``'writing a log message'`` が翻訳対象候補としてマーク付け"
"されており、文字列 ``'mylog.txt'`` および ``'w'`` はされていません。"

#: ../../library/gettext.rst:527
msgid ""
"There are a few tools to extract the strings meant for translation. The "
"original GNU :program:`gettext` only supported C or C++ source code but its "
"extended version :program:`xgettext` scans code written in a number of "
"languages, including Python, to find strings marked as translatable.  `Babel "
"<https://babel.pocoo.org/>`__ is a Python internationalization library that "
"includes a :file:`pybabel` script to extract and compile message catalogs.  "
"François Pinard's program called :program:`xpot` does a similar job and is "
"available as part of his `po-utils package <https://github.com/pinard/po-"
"utils>`__."
msgstr ""
"翻訳対象の文字列を抽出するツールもあります。\n"
"オリジナルの GNU :program:`gettext` は C と C++ のソースコードしかサポートし"
"ませんが、拡張版の :program:`xgettext` は Python を含めた多くの言語で書かれた"
"コードを読み取り、翻訳できる文字列を発見します。\n"
"`Babel <https://babel.pocoo.org/>`__ は Python の国際化ライブラリで、翻訳文字"
"列の抽出とメッセージカタログのコンパイルを行う :file:`pybabel` スクリプトがあ"
"ります。\n"
"François Pinard が開発した :program:`xpot` と呼ばれるプログラムは同じような処"
"理を行え、彼の `po-utils package <https://github.com/pinard/po-utils>`__ の一"
"部として利用可能です。"

#: ../../library/gettext.rst:537
msgid ""
"(Python also includes pure-Python versions of these programs, called :"
"program:`pygettext.py` and :program:`msgfmt.py`; some Python distributions "
"will install them for you.  :program:`pygettext.py` is similar to :program:"
"`xgettext`, but only understands Python source code and cannot handle other "
"programming languages such as C or C++. :program:`pygettext.py` supports a "
"command-line interface similar to :program:`xgettext`; for details on its "
"use, run ``pygettext.py --help``.  :program:`msgfmt.py` is binary compatible "
"with GNU :program:`msgfmt`.  With these two programs, you may not need the "
"GNU :program:`gettext` package to internationalize your Python applications.)"
msgstr ""
"(Python には :program:`pygettext.py` および :program:`msgfmt.py` という名前"
"の pure-Python 版プログラムもあります;\n"
"これをインストールしてくれる Python ディストリビューションもあります。\n"
":program:`pygettext.py` は :program:`xgettext` に似たプログラムですが Python "
"のソースコードしか理解できず、 C や C++ のような他のプログラミング言語を扱え"
"ません。\n"
":program:`pygettext.py` は :program:`xgettext` と同様のコマンドラインインター"
"フェースをサポートしています;\n"
"詳しい使い方については ``pygettext.py --help`` と実行してください。\n"
":program:`msgfmt.py` は GNU :program:`msgfmt` とバイナリ互換性があります。\n"
"この2つのプログラムがあれば、 GNU :program:`gettext` パッケージを使わずに "
"Python アプリケーションを国際化できるでしょう。)"

#: ../../library/gettext.rst:549
msgid ""
":program:`xgettext`, :program:`pygettext`, and similar tools generate :file:"
"`.po` files that are message catalogs.  They are structured human-readable "
"files that contain every marked string in the source code, along with a "
"placeholder for the translated versions of these strings."
msgstr ""
":program:`xgettext` や :program:`pygettext` のようなツールは、メッセージカタ"
"ログである :file:`.po` ファイルを生成します。\n"
"このファイルは人間が判読可能な構造をしていて、ソースコード中のマークが着けら"
"れた文字列と、その文字列の仮置きの訳文が一緒に書き込まれています。"

#: ../../library/gettext.rst:555
msgid ""
"Copies of these :file:`.po` files are then handed over to the individual "
"human translators who write translations for every supported natural "
"language.  They send back the completed language-specific versions as a :"
"file:`<language-name>.po` file that's compiled into a machine-readable :file:"
"`.mo` binary catalog file using the :program:`msgfmt` program.  The :file:`."
"mo` files are used by the :mod:`gettext` module for the actual translation "
"processing at run-time."
msgstr ""
"生成された :file:`.po` ファイルは翻訳者個々人へ頒布され、サポート対象の各自然"
"言語への訳文が書き込まれます。\n"
"ある言語への飜訳が完了した :file:`<language-name>.po` ファイルは翻訳者により"
"返送され、 :program:`msgfmt` を使い機械が読み込みやすい :file:`.mo` バイナリ"
"カタログファイルへとコンパイルされます。\n"
"この :file:`.mo` が :mod:`gettext` モジュールによる実行時の実際の飜訳処理で使"
"われます。"

#: ../../library/gettext.rst:564
msgid ""
"How you use the :mod:`gettext` module in your code depends on whether you "
"are internationalizing a single module or your entire application. The next "
"two sections will discuss each case."
msgstr ""
":mod:`gettext` モジュールをソースコード中でどのように使うかは単一のモジュール"
"を国際化するのか、それともアプリケーション全体を国際化するのかによります。次"
"のふたつのセクションで、それぞれについて説明します。"

#: ../../library/gettext.rst:570
msgid "Localizing your module"
msgstr "モジュールを地域化する"

#: ../../library/gettext.rst:572
msgid ""
"If you are localizing your module, you must take care not to make global "
"changes, e.g. to the built-in namespace. You should not use the GNU :program:"
"`gettext` API but instead the class-based API."
msgstr ""
"モジュールを地域化する場合、グローバルな変更、例えば組み込み名前空間への変更"
"を行わないように注意しなければなりません。GNU :program:`gettext` API ではな"
"く、クラス形式の API を使うべきです。"

#: ../../library/gettext.rst:576
msgid ""
"Let's say your module is called \"spam\" and the module's various natural "
"language translation :file:`.mo` files reside in :file:`/usr/share/locale` "
"in GNU :program:`gettext` format.  Here's what you would put at the top of "
"your module::"
msgstr ""
"仮に対象のモジュール名を \"spam\" とし、モジュールの各言語における翻訳が収め"
"られた :file:`.mo` ファイルが :file:`/usr/share/locale` に GNU :program:"
"`gettext` 形式で置かれているとします。この場合、モジュールの最初で以下のよう"
"にします::"

#: ../../library/gettext.rst:587
msgid "Localizing your application"
msgstr "アプリケーションを地域化する"

#: ../../library/gettext.rst:589
msgid ""
"If you are localizing your application, you can install the :func:`_` "
"function globally into the built-in namespace, usually in the main driver "
"file of your application.  This will let all your application-specific files "
"just use ``_('...')`` without having to explicitly install it in each file."
msgstr ""
"アプリケーションを地域化するのなら、関数 :func:`_` をグローバルな組み込み名前"
"空間に組み入れなければならず、これは通常アプリケーションの主ドライバ (main "
"driver) ファイルで行います。この操作によって、アプリケーション独自のファイル"
"は明示的に各ファイルで :func:`_` の組み入れを行わなくても単に ``_('...')`` を"
"使うだけで済むようになります。"

#: ../../library/gettext.rst:594
msgid ""
"In the simple case then, you need only add the following bit of code to the "
"main driver file of your application::"
msgstr ""
"単純な場合では、単に以下の短いコードをアプリケーションの主ドライバファイルに"
"追加するだけです::"

#: ../../library/gettext.rst:600
msgid ""
"If you need to set the locale directory, you can pass it into the :func:"
"`install` function::"
msgstr ""
"ロケールの辞書を設定する必要がある場合、:func:`install` 関数に渡すことが出来"
"ます::"

#: ../../library/gettext.rst:608
msgid "Changing languages on the fly"
msgstr "動作中 (on the fly) に言語を切り替える"

#: ../../library/gettext.rst:610
msgid ""
"If your program needs to support many languages at the same time, you may "
"want to create multiple translation instances and then switch between them "
"explicitly, like so::"
msgstr ""
"多くの言語を同時にサポートする必要がある場合、複数の翻訳インスタンスを生成し"
"て、例えば以下のコードのように、インスタンスを明示的に切り替えてもかまいませ"
"ん。::"

#: ../../library/gettext.rst:631
msgid "Deferred translations"
msgstr "翻訳処理の遅延解決"

#: ../../library/gettext.rst:633
msgid ""
"In most coding situations, strings are translated where they are coded. "
"Occasionally however, you need to mark strings for translation, but defer "
"actual translation until later.  A classic example is::"
msgstr ""
"コードを書く上では、ほとんどの状況で文字列はコードされた場所で翻訳されます。"
"しかし場合によっては、翻訳対象として文字列をマークはするが、その後実際に翻訳"
"が行われるように遅延させる必要が生じます。古典的な例は以下のようなコートで"
"す::"

#: ../../library/gettext.rst:646
msgid ""
"Here, you want to mark the strings in the ``animals`` list as being "
"translatable, but you don't actually want to translate them until they are "
"printed."
msgstr ""
"ここで、リスト ``animals`` 内の文字列は翻訳対象としてマークはしたいが、文字列"
"が出力されるまで実際に翻訳を行うのは避けたいとします。"

#: ../../library/gettext.rst:650
msgid "Here is one way you can handle this situation::"
msgstr "こうした状況を処理する一つの方法を以下に示します::"

#: ../../library/gettext.rst:666
msgid ""
"This works because the dummy definition of :func:`_` simply returns the "
"string unchanged.  And this dummy definition will temporarily override any "
"definition of :func:`_` in the built-in namespace (until the :keyword:`del` "
"command). Take care, though if you have a previous definition of :func:`_` "
"in the local namespace."
msgstr ""
"ダミーの :func:`_` 定義が単に文字列をそのまま返すようになっているので、上の"
"コードはうまく動作します。かつ、このダミーの定義は、組み込み名前空間に置かれ"
"た :func:`_` の定義で (:keyword:`del` 命令を実行するまで) 一時的に上書きする"
"ことができます。もしそれまでに :func:`_` をローカルな名前空間に持っていたら注"
"意してください。"

#: ../../library/gettext.rst:672
msgid ""
"Note that the second use of :func:`_` will not identify \"a\" as being "
"translatable to the :program:`gettext` program, because the parameter is not "
"a string literal."
msgstr ""
"二つ目の例における :func:`_` の使い方では、パラメータが文字列リテラルではない"
"ので、 :program:`gettext` プログラムが翻訳可能だとは判定されないことに注意し"
"てください。"

#: ../../library/gettext.rst:676
msgid "Another way to handle this is with the following example::"
msgstr "もう一つの処理法は、以下の例のようなやり方です::"

#: ../../library/gettext.rst:690
msgid ""
"In this case, you are marking translatable strings with the function :func:"
"`N_`, which won't conflict with any definition of :func:`_`. However, you "
"will need to teach your message extraction program to look for translatable "
"strings marked with :func:`N_`. :program:`xgettext`, :program:`pygettext`, "
"``pybabel extract``, and :program:`xpot` all support this through the use of "
"the :option:`!-k` command-line switch. The choice of :func:`N_` here is "
"totally arbitrary; it could have just as easily been :func:"
"`MarkThisStringForTranslation`."
msgstr ""
"この例では、飜訳可能な文字列に :func:`N_` でマークを付けているために、 :func:"
"`_` の定義と衝突しません。\n"
"しかし、これではメッセージを抽出するプログラムに対して :func:`N_` でマークさ"
"れている飜訳可能な文字列を見付けるように教える必要が出てきます。\n"
":program:`xgettext`, :program:`pygettext`, ``pybabel extract``, :program:"
"`xpot` は全て、コマンドラインスイッチ :option:`!-k` を使ってその機能をサポー"
"トしています。\n"
"この例の :func:`N_` という名前は好きに選べます;\n"
":func:`MarkThisStringForTranslation` という名前にしてしまっても構いません。"

#: ../../library/gettext.rst:701
msgid "Acknowledgements"
msgstr "謝辞"

#: ../../library/gettext.rst:703
msgid ""
"The following people contributed code, feedback, design suggestions, "
"previous implementations, and valuable experience to the creation of this "
"module:"
msgstr ""
"以下の人々が、このモジュールのコード、フィードバック、設計に関する助言、過去"
"の実装、そして有益な経験談による貢献をしてくれました:"

#: ../../library/gettext.rst:706
msgid "Peter Funk"
msgstr "Peter Funk"

#: ../../library/gettext.rst:708
msgid "James Henstridge"
msgstr "James Henstridge"

#: ../../library/gettext.rst:710
msgid "Juan David Ibáñez Palomar"
msgstr "Juan David Ibáñez Palomar"

#: ../../library/gettext.rst:712
msgid "Marc-André Lemburg"
msgstr "Marc-André Lemburg"

#: ../../library/gettext.rst:714
msgid "Martin von Löwis"
msgstr "Martin von Löwis"

#: ../../library/gettext.rst:716
msgid "François Pinard"
msgstr "François Pinard"

#: ../../library/gettext.rst:718
msgid "Barry Warsaw"
msgstr "Barry Warsaw"

#: ../../library/gettext.rst:720
msgid "Gustavo Niemeyer"
msgstr "Gustavo Niemeyer"

#: ../../library/gettext.rst:723
msgid "Footnotes"
msgstr "脚注"

#: ../../library/gettext.rst:724
msgid ""
"The default locale directory is system dependent; for example, on RedHat "
"Linux it is :file:`/usr/share/locale`, but on Solaris it is :file:`/usr/lib/"
"locale`. The :mod:`gettext` module does not try to support these system "
"dependent defaults; instead its default is :file:`{sys.base_prefix}/share/"
"locale` (see :data:`sys.base_prefix`). For this reason, it is always best to "
"call :func:`bindtextdomain` with an explicit absolute path at the start of "
"your application."
msgstr ""
"標準でロケールが収められているディレクトリはシステム依存です; 例えば、RedHat "
"Linux では :file:`/usr/share/locale` ですが、 Solaris では :file:`/usr/lib/"
"locale` です。 :mod:`gettext` モジュールはこうしたシステム依存の標準設定をサ"
"ポートしません; その代わりに :file:`{sys.base_prefix}/share/locale` を標準の"
"設定とします(:data:`sys.base_prefix` を参照してください)。この理由から、常に"
"アプリケーションの開始時に絶対パスで明示的に指定して :func:`bindtextdomain` "
"を呼び出すのが最良のやり方ということになります。"

#: ../../library/gettext.rst:732
msgid "See the footnote for :func:`bindtextdomain` above."
msgstr "上の :func:`bindtextdomain` に関する脚注を参照してください。"
