# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/gettext.rst:2
msgid ":mod:`gettext` --- Multilingual internationalization services"
msgstr ":mod:`gettext` --- 多言語対応に関する国際化サービス"

#: ../../library/gettext.rst:9
msgid "**Source code:** :source:`Lib/gettext.py`"
msgstr "**ソースコード:** :source:`Lib/gettext.py`"

#: ../../library/gettext.rst:13
msgid ""
"The :mod:`gettext` module provides internationalization (I18N) and "
"localization (L10N) services for your Python modules and applications. It "
"supports both the GNU ``gettext`` message catalog API and a higher level, "
"class-based API that may be more appropriate for Python files.  The "
"interface described below allows you to write your module and application "
"messages in one natural language, and provide a catalog of translated "
"messages for running under different natural languages."
msgstr ""
":mod:`gettext` モジュールは、 Python によるモジュールやアプリケーションの国際"
"化 (I18N, I-nternationalizatio-N) および地域化 (L10N, L-ocalizatio-N) サービ"
"スを提供します。このモジュールは GNU ``gettext`` メッセージカタログへの API "
"と、より高レベルで Python ファイルに適しているクラスに基づいた API の両方をサ"
"ポートしてます。以下で述べるインタフェースを使うことで、モジュールやアプリ"
"ケーションのメッセージをある自然言語で記述しておき、翻訳されたメッセージのカ"
"タログを与えて他の異なる自然言語の環境下で動作させることができます。"

#: ../../library/gettext.rst:21
msgid ""
"Some hints on localizing your Python modules and applications are also given."
msgstr ""
"ここでは Python のモジュールやアプリケーションを地域化するためのいくつかのヒ"
"ントも提供しています。"

#: ../../library/gettext.rst:25
msgid "GNU :program:`gettext` API"
msgstr "GNU :program:`gettext` API"

#: ../../library/gettext.rst:27
msgid ""
"The :mod:`gettext` module defines the following API, which is very similar "
"to the GNU :program:`gettext` API.  If you use this API you will affect the "
"translation of your entire application globally.  Often this is what you "
"want if your application is monolingual, with the choice of language "
"dependent on the locale of your user.  If you are localizing a Python "
"module, or if your application needs to switch languages on the fly, you "
"probably want to use the class-based API instead."
msgstr ""
":mod:`gettext` モジュールでは、以下の GNU :program:`gettext` API に非常に良く"
"似た API を提供しています。この API を使う場合、メッセージ翻訳の影響はアプリ"
"ケーション全体に及ぼすことになります。アプリケーションが単一の言語しか扱わ"
"ず、各言語に依存する部分をユーザのロケール情報によって選ぶのなら、ほとんどの"
"場合この方法でやりたいことを実現できます。Python モジュールを地域化していた"
"り、アプリケーションの実行中に言語を切り替えたい場合、おそらくクラスに基づい"
"た API を使いたくなるでしょう。"

#: ../../library/gettext.rst:38
msgid ""
"Bind the *domain* to the locale directory *localedir*.  More concretely, :"
"mod:`gettext` will look for binary :file:`.mo` files for the given domain "
"using the path (on Unix): :file:`localedir/language/LC_MESSAGES/domain.mo`, "
"where *languages* is searched for in the environment variables :envvar:"
"`LANGUAGE`, :envvar:`LC_ALL`, :envvar:`LC_MESSAGES`, and :envvar:`LANG` "
"respectively."
msgstr ""
"*domain* をロケール辞書 *localedir* に結び付け (bind) ます。具体的には、 :"
"mod:`gettext` は与えられたドメインに対するバイナリ形式の :file:`.mo` ファイル"
"を、(Unixでは) :file:`localedir/language/LC_MESSAGES/domain.mo` から探しま"
"す。ここで *languages* はそれぞれ環境変数 :envvar:`LANGUAGE` 、 :envvar:"
"`LC_ALL` 、 :envvar:`LC_MESSAGES` 、および :envvar:`LANG` の中から検索されま"
"す。"

#: ../../library/gettext.rst:44
msgid ""
"If *localedir* is omitted or ``None``, then the current binding for *domain* "
"is returned. [#]_"
msgstr ""
"*localedir* が省略されるか ``None`` の場合、現在 *domain* に結び付けられてい"
"る内容が返されます。 [#]_"

#: ../../library/gettext.rst:50
msgid ""
"Bind the *domain* to *codeset*, changing the encoding of strings returned by "
"the :func:`gettext` family of functions. If *codeset* is omitted, then the "
"current binding is returned."
msgstr ""
"*domain* を *codeset* に結び付けて、 :func:`gettext` ファミリの関数が返す文字"
"列のエンコード方式を変更します。 *codeset* を省略すると、現在結び付けられてい"
"るコードセットを返します。"

#: ../../library/gettext.rst:59
msgid ""
"Change or query the current global domain.  If *domain* is ``None``, then "
"the current global domain is returned, otherwise the global domain is set to "
"*domain*, which is returned."
msgstr ""
"現在のグローバルドメインを調べたり変更したりします。 *domain* が ``None`` の"
"場合、現在のグローバルドメインが返されます。それ以外の場合にはグローバルドメ"
"インは *domain* に設定され、設定されたグローバルドメインを返します。"

#: ../../library/gettext.rst:66
msgid ""
"Return the localized translation of *message*, based on the current global "
"domain, language, and locale directory.  This function is usually aliased "
"as :func:`_` in the local namespace (see examples below)."
msgstr ""
"現在のグローバルドメイン、言語、およびロケール辞書に基づいて、 *message* の特"
"定地域向けの翻訳を返します。通常、ローカルな名前空間ではこの関数に :func:`_` "
"という別名をつけます (下の例を参照してください)。"

#: ../../library/gettext.rst:73
msgid ""
"Equivalent to :func:`gettext`, but the translation is returned in the "
"preferred system encoding, if no other encoding was explicitly set with :"
"func:`bind_textdomain_codeset`."
msgstr ""
":func:`gettext` と同じですが、 :func:`bind_textdomain_codeset` で特にエンコー"
"ドを指定しない限り、翻訳結果を優先システムエンコーディング (preferred system "
"encoding) で返します。"

#: ../../library/gettext.rst:82
msgid ""
"Like :func:`gettext`, but look the message up in the specified *domain*."
msgstr ""
":func:`gettext` と同様ですが、指定された *domain* からメッセージを探します。"

#: ../../library/gettext.rst:87
msgid ""
"Equivalent to :func:`dgettext`, but the translation is returned in the "
"preferred system encoding, if no other encoding was explicitly set with :"
"func:`bind_textdomain_codeset`."
msgstr ""
":func:`dgettext` と同じですが、 :func:`bind_textdomain_codeset` で特にエン"
"コードを指定しない限り、翻訳結果を優先システムエンコーディング (preferred "
"system encoding) で返します。"

#: ../../library/gettext.rst:96
msgid ""
"Like :func:`gettext`, but consider plural forms. If a translation is found, "
"apply the plural formula to *n*, and return the resulting message (some "
"languages have more than two plural forms). If no translation is found, "
"return *singular* if *n* is 1; return *plural* otherwise."
msgstr ""
":func:`gettext` と同様ですが、複数形の場合を考慮しています。翻訳文字列が見つ"
"かった場合、 *n* の様式を適用し、その結果得られたメッセージを返します (言語に"
"よっては二つ以上の複数形があります)。翻訳文字列が見つからなかった場合、 *n* "
"が 1 なら *singular* を返します; そうでない場合 *plural* を返します。"

#: ../../library/gettext.rst:101
msgid ""
"The Plural formula is taken from the catalog header. It is a C or Python "
"expression that has a free variable *n*; the expression evaluates to the "
"index of the plural in the catalog. See the GNU gettext documentation for "
"the precise syntax to be used in :file:`.po` files and the formulas for a "
"variety of languages."
msgstr ""
"複数形の様式はカタログのヘッダから取り出されます。様式は C または Python の式"
"で、自由な変数 *n* を持ちます; 式の評価値はカタログ中の複数形のインデクスとな"
"ります。 :file:`.po` ファイルで用いられる詳細な文法と、様々な言語における様式"
"については、GNU gettext ドキュメントを参照してください。"

#: ../../library/gettext.rst:112
msgid ""
"Equivalent to :func:`ngettext`, but the translation is returned in the "
"preferred system encoding, if no other encoding was explicitly set with :"
"func:`bind_textdomain_codeset`."
msgstr ""
":func:`ngettext` と同じですが、 :func:`bind_textdomain_codeset` で特にエン"
"コードを指定しない限り、翻訳結果を優先システムエンコーディング (preferred "
"system encoding) で返します。"

#: ../../library/gettext.rst:121
msgid ""
"Like :func:`ngettext`, but look the message up in the specified *domain*."
msgstr ""
":func:`ngettext` と同様ですが、指定された *domain* からメッセージを探します。"

#: ../../library/gettext.rst:128
msgid ""
"Equivalent to :func:`dngettext`, but the translation is returned in the "
"preferred system encoding, if no other encoding was explicitly set with :"
"func:`bind_textdomain_codeset`."
msgstr ""
":func:`dngettext` と同じですが、 :func:`bind_textdomain_codeset` で特にエン"
"コードを指定しない限り、翻訳結果を優先システムエンコーディング (preferred "
"system encoding) で返します。"

#: ../../library/gettext.rst:134
msgid ""
"Note that GNU :program:`gettext` also defines a :func:`dcgettext` method, "
"but this was deemed not useful and so it is currently unimplemented."
msgstr ""
"GNU :program:`gettext` では :func:`dcgettext` も定義していますが、このメソッ"
"ドはあまり有用ではないと思われるので、現在のところ実装されていません。"

#: ../../library/gettext.rst:137
msgid "Here's an example of typical usage for this API::"
msgstr "以下にこの API の典型的な使用法を示します::"

#: ../../library/gettext.rst:148
msgid "Class-based API"
msgstr "クラスに基づいた API"

#: ../../library/gettext.rst:150
msgid ""
"The class-based API of the :mod:`gettext` module gives you more flexibility "
"and greater convenience than the GNU :program:`gettext` API.  It is the "
"recommended way of localizing your Python applications and modules.  :mod:`!"
"gettext` defines a \"translations\" class which implements the parsing of "
"GNU :file:`.mo` format files, and has methods for returning either standard "
"8-bit strings or Unicode strings. Instances of this \"translations\" class "
"can also install themselves  in the built-in namespace as the function :func:"
"`_`."
msgstr ""

#: ../../library/gettext.rst:161
msgid ""
"This function implements the standard :file:`.mo` file search algorithm.  It "
"takes a *domain*, identical to what :func:`textdomain` takes.  Optional "
"*localedir* is as in :func:`bindtextdomain`  Optional *languages* is a list "
"of strings, where each string is a language code."
msgstr ""
"この関数は標準的な :file:`.mo` ファイル検索アルゴリズムを実装しています。 :"
"func:`textdomain` と同じく、 *domain* を引数にとります。オプションの "
"*localedir* は :func:`bindtextdomain` と同じです。またオプションの "
"*languages* は文字列を列挙したリストで、各文字列は言語コードを表します。"

#: ../../library/gettext.rst:166
msgid ""
"If *localedir* is not given, then the default system locale directory is "
"used. [#]_  If *languages* is not given, then the following environment "
"variables are searched: :envvar:`LANGUAGE`, :envvar:`LC_ALL`, :envvar:"
"`LC_MESSAGES`, and :envvar:`LANG`.  The first one returning a non-empty "
"value is used for the *languages* variable. The environment variables should "
"contain a colon separated list of languages, which will be split on the "
"colon to produce the expected list of language code strings."
msgstr ""
"*localedir* が与えられていない場合、標準のシステムロケールディレクトリが使わ"
"れます。 [#]_ *languages* が与えられなかった場合、以下の環境変数: :envvar:"
"`LANGUAGE` 、 :envvar:`LC_ALL` 、 :envvar:`LC_MESSAGES` 、および :envvar:"
"`LANG` が検索されます。空でない値を返した最初の候補が *languages* 変数として"
"使われます。この環境変数は言語名をコロンで分かち書きしたリストを含んでいなけ"
"ればなりません。 :func:`find` はこの文字列をコロンで分割し、言語コードの候補"
"リストを生成します。"

#: ../../library/gettext.rst:174
msgid ""
":func:`find` then expands and normalizes the languages, and then iterates "
"through them, searching for an existing file built of these components:"
msgstr ""
":func:`find` は次に言語コードを展開および正規化し、リストの各要素について、以"
"下のパス構成:"

#: ../../library/gettext.rst:177
msgid ":file:`localedir/language/LC_MESSAGES/domain.mo`"
msgstr ":file:`localedir/language/LC_MESSAGES/domain.mo`"

#: ../../library/gettext.rst:179
msgid ""
"The first such file name that exists is returned by :func:`find`. If no such "
"file is found, then ``None`` is returned. If *all* is given, it returns a "
"list of all file names, in the order in which they appear in the languages "
"list or the environment variables."
msgstr ""
"からなる実在するファイルの探索を反復的に行います。 :func:`find` は上記のよう"
"な実在するファイルで最初に見つかったものを返します。該当するファイルが見つか"
"らなかった場合、 ``None`` が返されます。 *all* が与えられていれば、全ファイル"
"名のリストが言語リストまたは環境変数で指定されている順番に並べられたものを返"
"します。"

#: ../../library/gettext.rst:187
msgid ""
"Return a :class:`Translations` instance based on the *domain*, *localedir*, "
"and *languages*, which are first passed to :func:`find` to get a list of the "
"associated :file:`.mo` file paths.  Instances with identical :file:`.mo` "
"file names are cached.  The actual class instantiated is either *class_* if "
"provided, otherwise :class:`GNUTranslations`.  The class's constructor must "
"take a single file object argument. If provided, *codeset* will change the "
"charset used to encode translated strings."
msgstr ""
":class:`Translations` インスタンスを *domain* 、 *localedir* 、および "
"*languages* に基づいて生成して返します。 *domain* 、 *localedir* 、および "
"*languages* はまず関連付けられている :file:`.mo` ファイルパスのリストを取得す"
"るために :func:`find` に渡されます。同じ :file:`.mo` ファイル名を持つインスタ"
"ンスはキャッシュされます。実際にインスタンス化されるクラスは *class_* が与え"
"られていればそのクラスが、そうでない時には :class:`GNUTranslations` です。ク"
"ラスのコンストラクタは単一の引数としてファイルオブジェクトを取らなくてはなり"
"ません。 *codeset* を指定した場合、翻訳文字列のエンコードに使う文字セットを変"
"更します。"

#: ../../library/gettext.rst:195
msgid ""
"If multiple files are found, later files are used as fallbacks for earlier "
"ones. To allow setting the fallback, :func:`copy.copy` is used to clone each "
"translation object from the cache; the actual instance data is still shared "
"with the cache."
msgstr ""
"複数のファイルが発見された場合、後で見つかったファイルは前に見つかったファイ"
"ルの代替でと見なされ、後で見つかった方が利用されます。代替の設定を可能にする"
"には、 :func:`copy.copy` を使ってキャッシュから翻訳オブジェクトを複製します; "
"こうすることで、実際のインスタンスデータはキャッシュのものと共有されます。"

#: ../../library/gettext.rst:200
msgid ""
"If no :file:`.mo` file is found, this function raises :exc:`IOError` if "
"*fallback* is false (which is the default), and returns a :class:"
"`NullTranslations` instance if *fallback* is true."
msgstr ""
":file:`.mo` ファイルが見つからなかった場合、 *fallback* が偽 (標準の設定で"
"す) ならこの関数は :exc:`IOError` を送出し、 *fallback* が真なら :class:"
"`NullTranslations` インスタンスが返されます。"

#: ../../library/gettext.rst:204 ../../library/gettext.rst:228
msgid "Added the *codeset* parameter."
msgstr "*codeset* パラメータを追加しました."

#: ../../library/gettext.rst:210
msgid ""
"This installs the function :func:`_` in Python's builtins namespace, based "
"on *domain*, *localedir*, and *codeset* which are passed to the function :"
"func:`translation`.  The *unicode* flag is passed to the resulting "
"translation object's :meth:`~NullTranslations.install` method."
msgstr ""
":func:`translation` に *domain* 、 *localedir* 、および *codeset* を渡してで"
"きる関数 :func:`_` を Python の組み込み名前空間に組み込みます。 *unicode* フ"
"ラグは :func:`translation` の返す翻訳オブジェクトの :meth:`~NullTranslations."
"install` メソッドに渡されます。"

#: ../../library/gettext.rst:215
msgid ""
"For the *names* parameter, please see the description of the translation "
"object's :meth:`~NullTranslations.install` method."
msgstr ""
"*names* パラメータについては、翻訳オブジェクトの :meth:`~NullTranslations."
"install` メソッドの説明を参照ください。"

#: ../../library/gettext.rst:218
msgid ""
"As seen below, you usually mark the strings in your application that are "
"candidates for translation, by wrapping them in a call to the :func:`_` "
"function, like this::"
msgstr ""
"以下に示すように、通常はアプリケーション中の文字列を関数 :func:`_` の呼び出し"
"で包み込んで翻訳対象候補であることを示します::"

#: ../../library/gettext.rst:224
msgid ""
"For convenience, you want the :func:`_` function to be installed in Python's "
"builtins namespace, so it is easily accessible in all modules of your "
"application."
msgstr ""
"利便性を高めるためには、 :func:`_` 関数を Python の組み込み名前空間に組み入れ"
"る必要があります。こうすることで、アプリケーション内の全てのモジュールからア"
"クセスできるようになります。"

#: ../../library/gettext.rst:231 ../../library/gettext.rst:372
msgid "Added the *names* parameter."
msgstr "*names* パラメータを追加しました."

#: ../../library/gettext.rst:236
msgid "The :class:`NullTranslations` class"
msgstr ":class:`NullTranslations` クラス"

#: ../../library/gettext.rst:238
msgid ""
"Translation classes are what actually implement the translation of original "
"source file message strings to translated message strings. The base class "
"used by all translation classes is :class:`NullTranslations`; this provides "
"the basic interface you can use to write your own specialized translation "
"classes.  Here are the methods of :class:`!NullTranslations`:"
msgstr ""
"翻訳クラスは、元のソースファイル中のメッセージ文字列から翻訳されたメッセージ"
"文字列への変換処理が実際に実装されているクラスです。\n"
"全ての翻訳クラスで基底クラスとして使われているクラスが :class:"
"`NullTranslations` です; このクラスは、独自の翻訳クラスを実装するのに使える基"
"本的なインタフェースを提供しています。\n"
"以下に :class:`!NullTranslations` のメソッドを示します:"

#: ../../library/gettext.rst:247
msgid ""
"Takes an optional file object *fp*, which is ignored by the base class. "
"Initializes \"protected\" instance variables *_info* and *_charset* which "
"are set by derived classes, as well as *_fallback*, which is set through :"
"meth:`add_fallback`.  It then calls ``self._parse(fp)`` if *fp* is not "
"``None``."
msgstr ""
"オプションのファイルオブジェクト *fp* を取ります。この引数は基底クラスでは無"
"視されます。このメソッドは \"保護された (protected)\" インスタンス変数 "
"*_info* および *_charset* を初期化します。これらの変数の値は派生クラスで設定"
"することができます。同様に *_fallback* も初期化しますが、この値は :meth:"
"`add_fallback` で設定されます。その後、 *fp* が ``None`` でない場合 ``self."
"_parse(fp)`` を呼び出します。"

#: ../../library/gettext.rst:256
msgid ""
"No-op'd in the base class, this method takes file object *fp*, and reads the "
"data from the file, initializing its message catalog.  If you have an "
"unsupported message catalog file format, you should override this method to "
"parse your format."
msgstr ""
"基底クラスでは何もしない (no-op) ようになっています。このメソッドの役割はファ"
"イルオブジェクト *fp* を引数に取り、ファイルからデータを読み出し、メッセージ"
"カタログを初期化することです。サポートされていないメッセージカタログ形式を"
"使っている場合、その形式を解釈するためにはこのメソッドを上書きしなくてはなり"
"ません。"

#: ../../library/gettext.rst:264
msgid ""
"Add *fallback* as the fallback object for the current translation object. A "
"translation object should consult the fallback if it cannot provide a "
"translation for a given message."
msgstr ""
"*fallback* を現在の翻訳オブジェクトの代替オブジェクトとして追加します。翻訳オ"
"ブジェクトが与えられたメッセージに対して翻訳メッセージを提供できない場合、こ"
"の代替オブジェクトに問い合わせることになります。"

#: ../../library/gettext.rst:271
msgid ""
"If a fallback has been set, forward :meth:`!gettext` to the fallback. "
"Otherwise, return the translated message.  Overridden in derived classes."
msgstr ""

#: ../../library/gettext.rst:278
msgid ""
"If a fallback has been set, forward :meth:`!lgettext` to the fallback. "
"Otherwise, return the translated message.  Overridden in derived classes."
msgstr ""

#: ../../library/gettext.rst:287
msgid ""
"If a fallback has been set, forward :meth:`!ugettext` to the fallback. "
"Otherwise, return the translated message as a Unicode string. Overridden in "
"derived classes."
msgstr ""

#: ../../library/gettext.rst:294
msgid ""
"If a fallback has been set, forward :meth:`!ngettext` to the fallback. "
"Otherwise, return the translated message.  Overridden in derived classes."
msgstr ""

#: ../../library/gettext.rst:303
msgid ""
"If a fallback has been set, forward :meth:`!lngettext` to the fallback. "
"Otherwise, return the translated message.  Overridden in derived classes."
msgstr ""

#: ../../library/gettext.rst:312
msgid ""
"If a fallback has been set, forward :meth:`!ungettext` to the fallback. "
"Otherwise, return the translated message as a Unicode string. Overridden in "
"derived classes."
msgstr ""

#: ../../library/gettext.rst:321
msgid "Return the \"protected\" :attr:`_info` variable."
msgstr "\"protected\" の :attr:`_info` 変数を返します。"

#: ../../library/gettext.rst:326
msgid "Return the \"protected\" :attr:`_charset` variable."
msgstr "\"protected\" の :attr:`_charset` 変数を返します。"

#: ../../library/gettext.rst:331
msgid ""
"Return the \"protected\" :attr:`_output_charset` variable, which defines the "
"encoding used to return translated messages."
msgstr ""
"翻訳メッセージとして返す文字列のエンコードを決める、 \"protected\" の :attr:"
"`_output_charset` 変数を返します。"

#: ../../library/gettext.rst:339
msgid ""
"Change the \"protected\" :attr:`_output_charset` variable, which defines the "
"encoding used to return translated messages."
msgstr ""
"翻訳メッセージとして返す文字列のエンコードを決める、 \"protected\" の変数 :"
"attr:`_output_charset` を変更します。"

#: ../../library/gettext.rst:347
msgid ""
"If the *unicode* flag is false, this method installs :meth:`self.gettext` "
"into the built-in namespace, binding it to ``_``.  If *unicode* is true, it "
"binds :meth:`self.ugettext` instead.  By default, *unicode* is false."
msgstr ""
"*unicode* フラグが偽の場合、このメソッドは :meth:`self.gettext` を組み込み名"
"前空間に組み入れ、 ``_`` と結び付けます。 *unicode* が真の場合、 :meth:`self."
"gettext` の代わりに :meth:`self.ugettext` を結び付けます。標準では *unicode* "
"は偽です。"

#: ../../library/gettext.rst:351
msgid ""
"If the *names* parameter is given, it must be a sequence containing the "
"names of functions you want to install in the builtins namespace in addition "
"to :func:`_`.  Supported names are ``'gettext'`` (bound to :meth:`self."
"gettext` or :meth:`self.ugettext` according to the *unicode* flag), "
"``'ngettext'`` (bound to :meth:`self.ngettext` or :meth:`self.ungettext` "
"according to the *unicode* flag), ``'lgettext'`` and ``'lngettext'``."
msgstr ""
"*names* パラメータには、 :func:`_` 以外に組み込みの名前空間にインストールした"
"い関数名のシーケンスを指定します。サポートしている名前は ``'gettext'`` "
"(*unicode* フラグの設定に応じて :meth:`self.gettext` あるいは :meth:`self."
"ugettext` のいずれかに対応します)、 ``'ngettext'`` (*unicode* フラグの設定に"
"応じて :meth:`self.ngettext` あるいは :meth:`self.ungettext` のいずれかに対応"
"します)、 ``'lgettext'`` および ``'lngettext'`` です。"

#: ../../library/gettext.rst:359
msgid ""
"Note that this is only one way, albeit the most convenient way, to make the :"
"func:`_` function available to your application.  Because it affects the "
"entire application globally, and specifically the built-in namespace, "
"localized modules should never install :func:`_`. Instead, they should use "
"this code to make :func:`_` available to their module::"
msgstr ""
"この方法はアプリケーションで :func:`_` 関数を利用できるようにするための最も便"
"利な方法ですが、唯一の手段でもあるので注意してください。この関数はアプリケー"
"ション全体、とりわけ組み込み名前空間に影響するので、地域化されたモジュール"
"で :func:`_` を組み入れることができないのです。その代わりに、以下のコードを"
"使って :func:`_` を使えるようにしなければなりません。::"

#: ../../library/gettext.rst:369
msgid ""
"This puts :func:`_` only in the module's global namespace and so only "
"affects calls within this module."
msgstr ""
"この操作は :func:`_` をモジュール内だけのグローバル名前空間に組み入れるので、"
"モジュール内の :func:`_` の呼び出しだけに影響します。"

#: ../../library/gettext.rst:377
msgid "The :class:`GNUTranslations` class"
msgstr ":class:`GNUTranslations` クラス"

#: ../../library/gettext.rst:379
msgid ""
"The :mod:`gettext` module provides one additional class derived from :class:"
"`NullTranslations`: :class:`GNUTranslations`.  This class overrides :meth:"
"`_parse` to enable reading GNU :program:`gettext` format :file:`.mo` files "
"in both big-endian and little-endian format. It also coerces both message "
"ids and message strings to Unicode."
msgstr ""
":mod:`gettext` モジュールでは :class:`NullTranslations` から派生したもう一つ"
"のクラス: :class:`GNUTranslations` を提供しています。このクラスはビッグエン"
"ディアン、およびリトルエンディアン両方のバイナリ形式の GNU :program:"
"`gettext` :file:`.mo` ファイルを読み出せるように :meth:`_parse` を上書きして"
"います。また、このクラスはメッセージ id とメッセージ文字列の両方を Unicode に"
"型強制します。"

#: ../../library/gettext.rst:385
msgid ""
":class:`GNUTranslations` parses optional meta-data out of the translation "
"catalog.  It is convention with GNU :program:`gettext` to include meta-data "
"as the translation for the empty string.  This meta-data is in :rfc:`822`\\ -"
"style ``key: value`` pairs, and should contain the ``Project-Id-Version`` "
"key.  If the key ``Content-Type`` is found, then the ``charset`` property is "
"used to initialize the \"protected\" :attr:`_charset` instance variable, "
"defaulting to ``None`` if not found.  If the charset encoding is specified, "
"then all message ids and message strings read from the catalog are converted "
"to Unicode using this encoding.  The :meth:`ugettext` method always returns "
"a Unicode, while the :meth:`gettext` returns an encoded 8-bit string.  For "
"the message id arguments of both methods, either Unicode strings or 8-bit "
"strings containing only US-ASCII characters are acceptable.  Note that the "
"Unicode version of the methods (i.e. :meth:`ugettext` and :meth:`ungettext`) "
"are the recommended interface to use for internationalized Python programs."
msgstr ""
"このクラスではまた、翻訳カタログ以外に、オプションのメタデータを読み込んで解"
"釈します。GNU :program:`gettext` では、空の文字列に対する変換先としてメタデー"
"タを取り込むことが慣習になっています。このメタデータは :rfc:`822` 形式の "
"``key: value`` のペアになっており、 ``Project-Id-Version`` キーを含んでいなけ"
"ればなりません。キー ``Content-Type`` があった場合、 ``charset`` の特性値 "
"(property) は \"保護された\" :attr:`_charset` インスタンス変数を初期化するた"
"めに用いられます。値がない場合には、デフォルトとして ``None`` が使われます。"
"エンコードに用いられる文字セットが指定されている場合、カタログから読み出され"
"た全てのメッセージ id とメッセージ文字列は、指定されたエンコードを用いて "
"Unicode に変換されます。 :meth:`ugettext` は常に Unicode を返し、 :meth:"
"`gettext` はエンコードされた 8 ビット文字列を返します。どちらのメソッドにおけ"
"る引数 id の場合も、Unicode 文字列か US-ASCII 文字のみを含む 8 ビット文字列だ"
"けが受理可能です。国際化されたPython プログラムでは、メソッドの Unicode 版 "
"(すなわち :meth:`ugettext` や :meth:`ungettext`) の利用が推奨されています。"

#: ../../library/gettext.rst:400
msgid ""
"The entire set of key/value pairs are placed into a dictionary and set as "
"the \"protected\" :attr:`_info` instance variable."
msgstr ""
"key/value ペアの集合全体は辞書型データ中に配置され、\"保護された\" :attr:"
"`_info` インスタンス変数に設定されます。"

#: ../../library/gettext.rst:403
msgid ""
"If the :file:`.mo` file's magic number is invalid, or if other problems "
"occur while reading the file, instantiating a :class:`GNUTranslations` class "
"can raise :exc:`IOError`."
msgstr ""
":file:`.mo` ファイルのマジックナンバーが不正な場合、あるいはその他の問題が"
"ファイルの読み出し中に発生した場合、 :class:`GNUTranslations` クラスのインス"
"タンス化で :exc:`IOError` が送出されることがあります。"

#: ../../library/gettext.rst:407
msgid ""
"The following methods are overridden from the base class implementation:"
msgstr "以下のメソッドは基底クラスの実装からオーバライドされています:"

#: ../../library/gettext.rst:412
msgid ""
"Look up the *message* id in the catalog and return the corresponding message "
"string, as an 8-bit string encoded with the catalog's charset encoding, if "
"known.  If there is no entry in the catalog for the *message* id, and a "
"fallback has been set, the look up is forwarded to the fallback's :meth:"
"`gettext` method. Otherwise, the *message* id is returned."
msgstr ""
"カタログから *message* id を検索して、対応するメッセージ文字列を、カタログの"
"文字セットが既知のエンコードの場合、エンコードされた 8 ビット文字列として返し"
"ます。 *message* id に対するエントリがカタログに存在せず、フォールバックが設"
"定されている場合、フォールバック検索はオブジェクトの :meth:`gettext` メソッド"
"に転送されます。そうでない場合、 *message* id 自体が返されます。"

#: ../../library/gettext.rst:421 ../../library/gettext.rst:452
msgid ""
"Equivalent to :meth:`gettext`, but the translation is returned in the "
"preferred system encoding, if no other encoding was explicitly set with :"
"meth:`set_output_charset`."
msgstr ""
":meth:`gettext` と同じですが、翻訳結果は :meth:`set_output_charset` で特にエ"
"ンコーディングが指定されていなければ、優先システムエンコーディングで返しま"
"す。"

#: ../../library/gettext.rst:430
msgid ""
"Look up the *message* id in the catalog and return the corresponding message "
"string, as a Unicode string.  If there is no entry in the catalog for the "
"*message* id, and a fallback has been set, the look up is forwarded to the "
"fallback's :meth:`ugettext` method.  Otherwise, the *message* id is returned."
msgstr ""
"カタログから *message* id を検索して、対応するメッセージ文字列を、 Unicode で"
"エンコードして返します。 *message* id に対するエントリがカタログに存在せず、"
"フォールバックが設定されている場合、フォールバック検索はオブジェクトの :meth:"
"`ugettext` メソッドに転送されます。そうでない場合、 *message* id 自体が返され"
"ます。"

#: ../../library/gettext.rst:438
msgid ""
"Do a plural-forms lookup of a message id.  *singular* is used as the message "
"id for purposes of lookup in the catalog, while *n* is used to determine "
"which plural form to use.  The returned message string is an 8-bit string "
"encoded with the catalog's charset encoding, if known."
msgstr ""
"メッセージ id に対する複数形を検索します。カタログに対する検索では "
"*singular* がメッセージ id として用いられ、 *n* にはどの複数形を用いるかを指"
"定します。返されるメッセージ文字列は 8 ビットの文字列で、カタログの文字セット"
"が既知の場合にはその文字列セットでエンコードされています。"

#: ../../library/gettext.rst:443
msgid ""
"If the message id is not found in the catalog, and a fallback is specified, "
"the request is forwarded to the fallback's :meth:`ngettext` method.  "
"Otherwise, when *n* is 1 *singular* is returned, and *plural* is returned in "
"all other cases."
msgstr ""
"メッセージ id がカタログ中に見つからず、フォールバックオブジェクトが指定され"
"ている場合、メッセージ検索要求はフォールバックオブジェクトの :meth:"
"`ngettext` メソッドに転送されます。そうでない場合、 *n* が 1 ならば "
"*singular* が返され、それ以外に対しては *plural* が返されます。"

#: ../../library/gettext.rst:461
msgid ""
"Do a plural-forms lookup of a message id.  *singular* is used as the message "
"id for purposes of lookup in the catalog, while *n* is used to determine "
"which plural form to use.  The returned message string is a Unicode string."
msgstr ""
"メッセージ id に対する複数形を検索します。カタログに対する検索では "
"*singular* がメッセージ id として用いられ、 *n* にはどの複数形を用いるかを指"
"定します。返されるメッセージ文字列は Unicode 文字列です。"

#: ../../library/gettext.rst:465
msgid ""
"If the message id is not found in the catalog, and a fallback is specified, "
"the request is forwarded to the fallback's :meth:`ungettext` method.  "
"Otherwise, when *n* is 1 *singular* is returned, and *plural* is returned in "
"all other cases."
msgstr ""
"メッセージ id がカタログ中に見つからず、フォールバックオブジェクトが指定され"
"ている場合、メッセージ検索要求はフォールバックオブジェクトの :meth:"
"`ungettext` メソッドに転送されます。そうでない場合、 *n* が 1 ならば "
"*singular* が返され、それ以外に対しては *plural* が返されます。"

#: ../../library/gettext.rst:470
msgid "Here is an example::"
msgstr "以下に例を示します。::"

#: ../../library/gettext.rst:483
msgid "Solaris message catalog support"
msgstr "Solaris メッセージカタログ機構のサポート"

#: ../../library/gettext.rst:485
msgid ""
"The Solaris operating system defines its own binary :file:`.mo` file format, "
"but since no documentation can be found on this format, it is not supported "
"at this time."
msgstr ""
"Solaris オペレーティングシステムでは、独自の :file:`.mo` バイナリファイル形式"
"を定義していますが、この形式に関するドキュメントが手に入らないため、現時点で"
"はサポートされていません。"

#: ../../library/gettext.rst:491
msgid "The Catalog constructor"
msgstr "Catalog コンストラクタ"

#: ../../library/gettext.rst:495
msgid ""
"GNOME uses a version of the :mod:`gettext` module by James Henstridge, but "
"this version has a slightly different API.  Its documented usage was::"
msgstr ""
"GNOME では、James Henstridge によるあるバージョンの :mod:`gettext` モジュール"
"を使っていますが、このバージョンは少し異なった API を持っています。ドキュメン"
"トに書かれている利用法は::"

#: ../../library/gettext.rst:503
msgid ""
"For compatibility with this older module, the function :func:`Catalog` is an "
"alias for the :func:`translation` function described above."
msgstr ""
"となっています。過去のモジュールとの互換性のために、 :func:`Catalog` は前述"
"の :func:`translation` 関数の別名になっています。"

#: ../../library/gettext.rst:506
msgid ""
"One difference between this module and Henstridge's: his catalog objects "
"supported access through a mapping API, but this appears to be unused and so "
"is not currently supported."
msgstr ""
"このモジュールと Henstridge のバージョンとの間には一つ相違点があります: 彼の"
"カタログオブジェクトはマップ型の API を介したアクセスがサポートされていました"
"が、この API は使われていないらしく、現在はサポートされていません。"

#: ../../library/gettext.rst:512
msgid "Internationalizing your programs and modules"
msgstr "プログラムやモジュールを国際化する"

#: ../../library/gettext.rst:514
msgid ""
"Internationalization (I18N) refers to the operation by which a program is "
"made aware of multiple languages.  Localization (L10N) refers to the "
"adaptation of your program, once internationalized, to the local language "
"and cultural habits. In order to provide multilingual messages for your "
"Python programs, you need to take the following steps:"
msgstr ""
"国際化 (I18N, I-nternationalizatio-N) とは、プログラムを複数の言語に対応させ"
"る操作を指します。地域化 (L10N, L-ocalizatio-N) とは、すでに国際化されている"
"プログラムを特定地域の言語や文化的な事情に対応させることを指します。Python プ"
"ログラムに多言語メッセージ機能を追加するには、以下の手順を踏む必要があります:"

#: ../../library/gettext.rst:520
msgid ""
"prepare your program or module by specially marking translatable strings"
msgstr ""
"プログラムやモジュールで翻訳対象とする文字列に特殊なマークをつけて準備します"

#: ../../library/gettext.rst:522
msgid ""
"run a suite of tools over your marked files to generate raw messages catalogs"
msgstr ""
"マークづけをしたファイルに一連のツールを走らせ、生のメッセージカタログを生成"
"します"

#: ../../library/gettext.rst:524
msgid "create language specific translations of the message catalogs"
msgstr "特定の言語へのメッセージカタログの翻訳を作成します"

#: ../../library/gettext.rst:526
msgid ""
"use the :mod:`gettext` module so that message strings are properly translated"
msgstr ""
"メッセージ文字列を適切に変換するために :mod:`gettext` モジュールを使います"

#: ../../library/gettext.rst:528
msgid ""
"In order to prepare your code for I18N, you need to look at all the strings "
"in your files.  Any string that needs to be translated should be marked by "
"wrapping it in ``_('...')`` --- that is, a call to the function :func:`_`.  "
"For example::"
msgstr ""
"ソースコードを I18N 化する準備として、ファイル内の全ての文字列を探す必要があ"
"ります。翻訳を行う必要のある文字列はどれも ``_('...')`` --- すなわち関数 :"
"func:`_` の呼び出しで包むことでマーク付けしなくてはなりません。例えば以下のよ"
"うにします::"

#: ../../library/gettext.rst:538
msgid ""
"In this example, the string ``'writing a log message'`` is marked as a "
"candidate for translation, while the strings ``'mylog.txt'`` and ``'w'`` are "
"not."
msgstr ""
"この例では、文字列 ``'writing a log message'`` が翻訳対象候補としてマーク付け"
"されており、文字列 ``'mylog.txt'`` および ``'w'`` はされていません。"

#: ../../library/gettext.rst:541
msgid ""
"The Python distribution comes with two tools which help you generate the "
"message catalogs once you've prepared your source code.  These may or may "
"not be available from a binary distribution, but they can be found in a "
"source distribution, in the :file:`Tools/i18n` directory."
msgstr ""
"Python の配布物には、ソースコードに準備作業を行った後でメッセージカタログの生"
"成を助ける 2 つのツールが付属します。これらはバイナリ配布の場合には付属してい"
"たりしなかったりしますが、ソースコード配布には入っており、 :file:`Tools/"
"i18n` ディレクトリにあります。"

#: ../../library/gettext.rst:546
msgid ""
"The :program:`pygettext` [#]_ program scans all your Python source code "
"looking for the strings you previously marked as translatable.  It is "
"similar to the GNU :program:`gettext` program except that it understands all "
"the intricacies of Python source code, but knows nothing about C or C++ "
"source code.  You don't need GNU ``gettext`` unless you're also going to be "
"translating C code (such as C extension modules)."
msgstr ""
":program:`pygettext` プログラム [#]_ は全ての Python ソースコードを走査し、予"
"め翻訳対象としてマークした文字列を探し出します。このツールは GNU :program:"
"`gettext` プログラムと同様ですが、Python ソースコードの機微について熟知してい"
"る反面、C 言語や C++言語のソースコードについては全く知りません。(C 言語による"
"拡張モジュールのように) C 言語のコードも翻訳対象にしたいのでない限り、 GNU "
"``gettext`` は必要ありません。"

#: ../../library/gettext.rst:553
msgid ""
":program:`pygettext` generates textual Uniforum-style human readable message "
"catalog :file:`.pot` files, essentially structured human readable files "
"which contain every marked string in the source code, along with a "
"placeholder for the translation strings. :program:`pygettext` is a command "
"line script that supports a similar command line interface as :program:"
"`xgettext`; for details on its use, run::"
msgstr ""
":program:`pygettext` は、テキスト形式 Uniforum スタイルによる人間が判読可能な"
"メッセージカタログ :file:`.pot` ファイル群を生成します。このファイル群はソー"
"スコード中でマークされた全ての文字列と、それに対応する翻訳文字列のためのプ"
"レースホルダを含むファイルで構成されています。 :program:`pygettext` はコマン"
"ドライン形式のスクリプトで、 :program:`xgettext` と同様のコマンドラインインタ"
"フェースをサポートします; 使用法についての詳細を見るには以下を起動してくださ"
"い。::"

#: ../../library/gettext.rst:562
msgid ""
"Copies of these :file:`.pot` files are then handed over to the individual "
"human translators who write language-specific versions for every supported "
"natural language.  They send you back the filled in language-specific "
"versions as a :file:`.po` file.  Using the :program:`msgfmt.py` [#]_ program "
"(in the :file:`Tools/i18n` directory), you take the :file:`.po` files from "
"your translators and generate the machine-readable :file:`.mo` binary "
"catalog files. The :file:`.mo` files are what the :mod:`gettext` module uses "
"for the actual translation processing during run-time."
msgstr ""
"これら :file:`.pot` ファイルのコピーは次に、サポート対象の各自然言語につい"
"て、言語ごとのバージョンを作成する個々の人間の翻訳者に頒布されます。翻訳者た"
"ちはプレースホルダ部分を埋めて言語ごとのバージョンをつくり、 :file:`.po` ファ"
"イルとして返します。(:file:`Tools/i18n` ディレクトリ内の) :program:`msgfmt."
"py` [#]_ プログラムを使い、翻訳者から返された :file:`.po` ファイルから機械可"
"読な :file:`.mo` バイナリカタログファイルを生成します。 :file:`.mo` ファイル"
"は、 :mod:`gettext` モジュールが実行時に実際の翻訳処理を行うために使われま"
"す。"

#: ../../library/gettext.rst:571
msgid ""
"How you use the :mod:`gettext` module in your code depends on whether you "
"are internationalizing a single module or your entire application. The next "
"two sections will discuss each case."
msgstr ""
":mod:`gettext` モジュールをソースコード中でどのように使うかは単一のモジュール"
"を国際化するのか、それともアプリケーション全体を国際化するのかによります。次"
"のふたつのセクションで、それぞれについて説明します。"

#: ../../library/gettext.rst:577
msgid "Localizing your module"
msgstr "モジュールを地域化する"

#: ../../library/gettext.rst:579
msgid ""
"If you are localizing your module, you must take care not to make global "
"changes, e.g. to the built-in namespace.  You should not use the GNU "
"``gettext`` API but instead the class-based API."
msgstr ""
"モジュールを地域化する場合、グローバルな変更、例えば組み込み名前空間への変更"
"を行わないように注意しなければなりません。GNU ``gettext`` API ではなく、クラ"
"スベースの API を使うべきです。"

#: ../../library/gettext.rst:583
msgid ""
"Let's say your module is called \"spam\" and the module's various natural "
"language translation :file:`.mo` files reside in :file:`/usr/share/locale` "
"in GNU :program:`gettext` format.  Here's what you would put at the top of "
"your module::"
msgstr ""
"仮に対象のモジュール名を \"spam\" とし、モジュールの各言語における翻訳が収め"
"られた :file:`.mo` ファイルが :file:`/usr/share/locale` に GNU :program:"
"`gettext` 形式で置かれているとします。この場合、モジュールの最初で以下のよう"
"にします::"

#: ../../library/gettext.rst:592
msgid ""
"If your translators were providing you with Unicode strings in their :file:`."
"po` files, you'd instead do::"
msgstr ""
"翻訳オブジェクトが :file:`.po` ファイル中の Unicode 文字列を返すようになって"
"いるのなら、上の代わりに以下のようにします::"

#: ../../library/gettext.rst:601
msgid "Localizing your application"
msgstr "アプリケーションを地域化する"

#: ../../library/gettext.rst:603
msgid ""
"If you are localizing your application, you can install the :func:`_` "
"function globally into the built-in namespace, usually in the main driver "
"file of your application.  This will let all your application-specific files "
"just use ``_('...')`` without having to explicitly install it in each file."
msgstr ""
"アプリケーションを地域化するのなら、関数 :func:`_` をグローバルな組み込み名前"
"空間に組み入れなければならず、これは通常アプリケーションの主ドライバ (main "
"driver) ファイルで行います。この操作によって、アプリケーション独自のファイル"
"は明示的に各ファイルで :func:`_` の組み入れを行わなくても単に ``_('...')`` を"
"使うだけで済むようになります。"

#: ../../library/gettext.rst:608
msgid ""
"In the simple case then, you need only add the following bit of code to the "
"main driver file of your application::"
msgstr ""
"単純な場合では、単に以下の短いコードをアプリケーションの主ドライバファイルに"
"追加するだけです::"

#: ../../library/gettext.rst:614
msgid ""
"If you need to set the locale directory or the *unicode* flag, you can pass "
"these into the :func:`install` function::"
msgstr ""
"ロケールディレクトリや *unicode* フラグを設定する必要がある場合、それらの値"
"を :func:`install` 関数に渡すことができます::"

#: ../../library/gettext.rst:622
msgid "Changing languages on the fly"
msgstr "動作中 (on the fly) に言語を切り替える"

#: ../../library/gettext.rst:624
msgid ""
"If your program needs to support many languages at the same time, you may "
"want to create multiple translation instances and then switch between them "
"explicitly, like so::"
msgstr ""
"多くの言語を同時にサポートする必要がある場合、複数の翻訳インスタンスを生成し"
"て、例えば以下のコードのように、インスタンスを明示的に切り替えてもかまいませ"
"ん。::"

#: ../../library/gettext.rst:645
msgid "Deferred translations"
msgstr "翻訳処理の遅延解決"

#: ../../library/gettext.rst:647
msgid ""
"In most coding situations, strings are translated where they are coded. "
"Occasionally however, you need to mark strings for translation, but defer "
"actual translation until later.  A classic example is::"
msgstr ""
"コードを書く上では、ほとんどの状況で文字列はコードされた場所で翻訳されます。"
"しかし場合によっては、翻訳対象として文字列をマークはするが、その後実際に翻訳"
"が行われるように遅延させる必要が生じます。古典的な例は以下のようなコートで"
"す::"

#: ../../library/gettext.rst:660
msgid ""
"Here, you want to mark the strings in the ``animals`` list as being "
"translatable, but you don't actually want to translate them until they are "
"printed."
msgstr ""
"ここで、リスト ``animals`` 内の文字列は翻訳対象としてマークはしたいが、文字列"
"が出力されるまで実際に翻訳を行うのは避けたいとします。"

#: ../../library/gettext.rst:664
msgid "Here is one way you can handle this situation::"
msgstr "こうした状況を処理する一つの方法を以下に示します::"

#: ../../library/gettext.rst:680
msgid ""
"This works because the dummy definition of :func:`_` simply returns the "
"string unchanged.  And this dummy definition will temporarily override any "
"definition of :func:`_` in the built-in namespace (until the :keyword:`del` "
"command). Take care, though if you have a previous definition of :func:`_` "
"in the local namespace."
msgstr ""
"ダミーの :func:`_` 定義が単に文字列をそのまま返すようになっているので、上の"
"コードはうまく動作します。かつ、このダミーの定義は、組み込み名前空間に置かれ"
"た :func:`_` の定義で (:keyword:`del` 命令を実行するまで) 一時的に上書きする"
"ことができます。もしそれまでに :func:`_` をローカルな名前空間に持っていたら注"
"意してください。"

#: ../../library/gettext.rst:686
msgid ""
"Note that the second use of :func:`_` will not identify \"a\" as being "
"translatable to the :program:`pygettext` program, since it is not a string."
msgstr ""
"二つ目の例における :func:`_` の使い方では、\"a\" は文字列リテラルではないの"
"で、 :program:`pygettext` プログラムが翻訳可能な対象として識別しません。"

#: ../../library/gettext.rst:689
msgid "Another way to handle this is with the following example::"
msgstr "もう一つの処理法は、以下の例のようなやり方です::"

#: ../../library/gettext.rst:703
msgid ""
"In this case, you are marking translatable strings with the function :func:"
"`N_`, [#]_ which won't conflict with any definition of :func:`_`.  However, "
"you will need to teach your message extraction program to look for "
"translatable strings marked with :func:`N_`. :program:`pygettext` and :"
"program:`xpot` both support this through the use of command line switches."
msgstr ""
"この例の場合では、翻訳可能な文字列を関数 :func:`N_` でマーク付けしており "
"[#]_ 、 :func:`_` の定義とは全く衝突しません。しかしメッセージ展開プログラム"
"には翻訳対象の文字列が :func:`N_` でマークされていることを教える必要が出てく"
"るでしょう。 :program:`pygettext` および :program:`xpot` は両方とも、コマンド"
"ライン上のスイッチでこの機能をサポートしています。"

#: ../../library/gettext.rst:711
msgid ":func:`gettext` vs. :func:`lgettext`"
msgstr ":func:`gettext` vs. :func:`lgettext`"

#: ../../library/gettext.rst:713
msgid ""
"In Python 2.4 the :func:`lgettext` family of functions were introduced. The "
"intention of these functions is to provide an alternative which is more "
"compliant with the current implementation of GNU gettext. Unlike :func:"
"`gettext`, which returns strings encoded with the same codeset used in the "
"translation file, :func:`lgettext` will return strings encoded with the "
"preferred system encoding, as returned by :func:`locale."
"getpreferredencoding`. Also notice that Python 2.4 introduces new functions "
"to explicitly choose the codeset used in translated strings. If a codeset is "
"explicitly set, even :func:`lgettext` will return translated strings in the "
"requested codeset, as would be expected in the GNU gettext implementation."
msgstr ""
"Python 2.4 からは、 :func:`lgettext` ファミリが導入されました。この関数の目的"
"は、現行の GNU gettext 実装によりよく準拠した別の関数を提供することにありま"
"す。翻訳メッセージファイル中で使われているのと同じコードセットを使って文字列"
"をエンコードして返す :func:`gettext` と違い、これらの関数は :func:`locale."
"getpreferredencoding` の返す優先システムエンコーディングを使って翻訳メッセー"
"ジ文字列をエンコードして返します。また、Python 2.4 では、翻訳メッセージ文字列"
"で使われているコードセットを明示的に選べるようにする関数が新たに導入されてい"
"ることにも注意してください。コードセットを明示的に設定すると、 :func:"
"`lgettext` でさえ、指定したコードセットで翻訳メッセージ文字列を返します。これ"
"は GNU gettext 実装が期待している仕様と同じです。"

#: ../../library/gettext.rst:726
msgid "Acknowledgements"
msgstr "謝辞"

#: ../../library/gettext.rst:728
msgid ""
"The following people contributed code, feedback, design suggestions, "
"previous implementations, and valuable experience to the creation of this "
"module:"
msgstr ""
"以下の人々が、このモジュールのコード、フィードバック、設計に関する助言、過去"
"の実装、そして有益な経験談による貢献をしてくれました:"

#: ../../library/gettext.rst:731
msgid "Peter Funk"
msgstr "Peter Funk"

#: ../../library/gettext.rst:733
msgid "James Henstridge"
msgstr "James Henstridge"

#: ../../library/gettext.rst:735
msgid "Juan David Ibáñez Palomar"
msgstr "Juan David Ibáñez Palomar"

#: ../../library/gettext.rst:737
msgid "Marc-André Lemburg"
msgstr "Marc-André Lemburg"

#: ../../library/gettext.rst:739
msgid "Martin von Löwis"
msgstr "Martin von Löwis"

#: ../../library/gettext.rst:741
msgid "François Pinard"
msgstr "François Pinard"

#: ../../library/gettext.rst:743
msgid "Barry Warsaw"
msgstr "Barry Warsaw"

#: ../../library/gettext.rst:745
msgid "Gustavo Niemeyer"
msgstr "Gustavo Niemeyer"

#: ../../library/gettext.rst:748
msgid "Footnotes"
msgstr "脚注"

#: ../../library/gettext.rst:749
msgid ""
"The default locale directory is system dependent; for example, on RedHat "
"Linux it is :file:`/usr/share/locale`, but on Solaris it is :file:`/usr/lib/"
"locale`. The :mod:`gettext` module does not try to support these system "
"dependent defaults; instead its default is :file:`sys.prefix/share/locale`. "
"For this reason, it is always best to call :func:`bindtextdomain` with an "
"explicit absolute path at the start of your application."
msgstr ""
"標準でロケールが収められているディレクトリはシステム依存です; 例えば、RedHat "
"Linux では :file:`/usr/share/locale` ですが、 Solaris では :file:`/usr/lib/"
"locale` です。 :mod:`gettext` モジュールはこうしたシステム依存の標準設定をサ"
"ポートしません; その代わりに :file:`sys.prefix/share/locale` を標準の設定とし"
"ます。この理由から、常にアプリケーションの開始時に絶対パスで明示的に指定し"
"て :func:`bindtextdomain` を呼び出すのが最良のやり方ということになります。"

#: ../../library/gettext.rst:756
msgid "See the footnote for :func:`bindtextdomain` above."
msgstr "上の :func:`bindtextdomain` に関する脚注を参照してください。"

#: ../../library/gettext.rst:758
msgid ""
"François Pinard has written a program called :program:`xpot` which does a "
"similar job.  It is available as part of his `po-utils package <https://"
"github.com/pinard/po-utils>`__."
msgstr ""
"同様の作業を行う :program:`xpot` と呼ばれるプログラムを François Pinard が書"
"いています。このプログラムは彼の `po-utils パッケージ <https://github.com/"
"pinard/po-utils>`__ の一部です。"

#: ../../library/gettext.rst:762
msgid ""
":program:`msgfmt.py` is binary compatible with GNU :program:`msgfmt` except "
"that it provides a simpler, all-Python implementation.  With this and :"
"program:`pygettext.py`, you generally won't need to install the GNU :program:"
"`gettext` package to internationalize your Python applications."
msgstr ""
":program:`msgfmt.py` は GNU :program:`msgfmt` とバイナリ互換ですが、より単純"
"で、Python だけを使った実装がされています。このプログラムと :program:"
"`pygettext.py` があれば、通常 Python プログラムを国際化するために GNU :"
"program:`gettext` パッケージをインストールする必要はありません。"

#: ../../library/gettext.rst:767
msgid ""
"The choice of :func:`N_` here is totally arbitrary; it could have just as "
"easily been :func:`MarkThisStringForTranslation`."
msgstr ""
"この :func:`N_` をどうするかは全くの自由です; :func:"
"`MarkThisStringForTranslation` などとしてもかまいません。"
