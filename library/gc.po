# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2017
# Inada Naoki <songofacandy@gmail.com>, 2017
# Arihiro TAKASE, 2017
# Osamu NAKAMURA, 2017
# tomo, 2019
# Tetsuo Koyama <tkoyama010@gmail.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 12:40+0000\n"
"PO-Revision-Date: 2017-02-16 23:12+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/gc.rst:2
msgid ":mod:`gc` --- Garbage Collector interface"
msgstr ":mod:`gc` --- ガベージコレクタインターフェース"

#: ../../library/gc.rst:12
msgid ""
"This module provides an interface to the optional garbage collector.  It "
"provides the ability to disable the collector, tune the collection "
"frequency, and set debugging options.  It also provides access to "
"unreachable objects that the collector found but cannot free.  Since the "
"collector supplements the reference counting already used in Python, you can"
" disable the collector if you are sure your program does not create "
"reference cycles.  Automatic collection can be disabled by calling "
"``gc.disable()``.  To debug a leaking program call "
"``gc.set_debug(gc.DEBUG_LEAK)``. Notice that this includes "
"``gc.DEBUG_SAVEALL``, causing garbage-collected objects to be saved in "
"gc.garbage for inspection."
msgstr ""
"このモジュールは、循環ガベージコレクタの無効化・検出頻度の調整・デバッグオブションの設定などを行うインターフェースを提供します。また、検出した到達不能オブジェクトのうち、解放する事ができないオブジェクトを参照する事もできます。循環ガベージコレクタはPyhonの参照カウントを補うためのものなので、もしプログラム中で循環参照が発生しない事が明らかな場合には検出をする必要はありません。自動検出は、"
" ``gc.disable()`` で停止する事ができます。メモリリークをデバッグするときには、 "
"``gc.set_debug(gc.DEBUG_LEAK)`` とします。これは ``gc.DEBUG_SAVEALL`` "
"を含んでいることに注意しましょう。ガベージとして検出されたオブジェクトは、インスペクション用に gc.garbage に保存されます。"

#: ../../library/gc.rst:23
msgid "The :mod:`gc` module provides the following functions:"
msgstr ":mod:`gc` モジュールは、以下の関数を提供しています:"

#: ../../library/gc.rst:28
msgid "Enable automatic garbage collection."
msgstr "自動ガベージコレクションを有効にします。"

#: ../../library/gc.rst:33
msgid "Disable automatic garbage collection."
msgstr "自動ガベージコレクションを無効にします。"

#: ../../library/gc.rst:38
msgid "Return ``True`` if automatic collection is enabled."
msgstr "自動ガベージコレクションが有効なら ``True`` を返します。"

#: ../../library/gc.rst:43
msgid ""
"With no arguments, run a full collection.  The optional argument "
"*generation* may be an integer specifying which generation to collect (from "
"0 to 2).  A :exc:`ValueError` is raised if the generation number  is "
"invalid. The number of unreachable objects found is returned."
msgstr ""
"引数を指定しない場合は、全ての検出を行います。オプション引数 *generation* は、どの世代を検出するかを (0 から 2 までの) "
"整数値で指定します。無効な世代番号を指定した場合は :exc:`ValueError` が発生します。検出した到達不可オブジェクトの数を返します。"

#: ../../library/gc.rst:48
msgid ""
"The free lists maintained for a number of built-in types are cleared "
"whenever a full collection or collection of the highest generation (2) is "
"run.  Not all items in some free lists may be freed due to the particular "
"implementation, in particular :class:`float`."
msgstr ""
"ビルトイン型が持っている free list は、フルGCか最高世代(2)のGCの時にクリアされます。 :class:`float` "
"など、実装によって幾つかの free list では全ての要素が解放されるわけではありません。"

#: ../../library/gc.rst:56
msgid ""
"Set the garbage collection debugging flags. Debugging information will be "
"written to ``sys.stderr``.  See below for a list of debugging flags which "
"can be combined using bit operations to control debugging."
msgstr ""
"ガベージコレクションのデバッグフラグを設定します。デバッグ情報は ``sys.stderr`` "
"に出力されます。デバッグフラグは、下の値の組み合わせを指定する事ができます。"

#: ../../library/gc.rst:63
msgid "Return the debugging flags currently set."
msgstr "現在のデバッグフラグを返します。"

#: ../../library/gc.rst:68
msgid ""
"Returns a list of all objects tracked by the collector, excluding the list "
"returned. If *generation* is not None, return only the objects tracked by "
"the collector that are in that generation."
msgstr ""

#: ../../library/gc.rst:72
msgid "New *generation* parameter."
msgstr "新しい *generation* パラメータ。"

#: ../../library/gc.rst:77
msgid ""
"Return a list of three per-generation dictionaries containing collection "
"statistics since interpreter start.  The number of keys may change in the "
"future, but currently each dictionary will contain the following items:"
msgstr ""
"インタプリタが開始してからの、世代ごと回収統計を持つ辞書の、3 "
"世代ぶんのリストを返します。キーの数は将来変わるかもしれませんが、現在のところそれぞれの辞書には以下の項目が含まれています:"

#: ../../library/gc.rst:82
msgid "``collections`` is the number of times this generation was collected;"
msgstr "``collections`` は、この世代が検出を行った回数です;"

#: ../../library/gc.rst:84
msgid ""
"``collected`` is the total number of objects collected inside this "
"generation;"
msgstr "``collected`` は、この世代内で回収されたオブジェクトの総数です;"

#: ../../library/gc.rst:87
msgid ""
"``uncollectable`` is the total number of objects which were found to be "
"uncollectable (and were therefore moved to the :data:`garbage` list) inside "
"this generation."
msgstr ""
"``uncollectable`` は、この世代内で回収不能であることがわかった (そしてそれゆえに :data:`garbage` リストに移動した)"
" オブジェクトの総数です。"

#: ../../library/gc.rst:96
msgid ""
"Set the garbage collection thresholds (the collection frequency). Setting "
"*threshold0* to zero disables collection."
msgstr "ガベージコレクションの閾値（検出頻度）を指定します。 *threshold0* を 0 にすると、検出は行われません。"

#: ../../library/gc.rst:99
msgid ""
"The GC classifies objects into three generations depending on how many "
"collection sweeps they have survived.  New objects are placed in the "
"youngest generation (generation ``0``).  If an object survives a collection "
"it is moved into the next older generation.  Since generation ``2`` is the "
"oldest generation, objects in that generation remain there after a "
"collection.  In order to decide when to run, the collector keeps track of "
"the number object allocations and deallocations since the last collection.  "
"When the number of allocations minus the number of deallocations exceeds "
"*threshold0*, collection starts.  Initially only generation ``0`` is "
"examined.  If generation ``0`` has been examined more than *threshold1* "
"times since generation ``1`` has been examined, then generation ``1`` is "
"examined as well.  Similarly, *threshold2* controls the number of "
"collections of generation ``1`` before collecting generation ``2``."
msgstr ""
"GCは、オブジェクトを走査された回数に従って3世代に分類します。新しいオブジェクトは最も若い(``0`` "
"世代)に分類されます。もし、そのオブジェクトがガベージコレクションで削除されなければ、次に古い世代に分類されます。もっとも古い世代は ``2`` "
"世代で、この世代に属するオブジェクトは他の世代に移動しません。ガベージコレクタは、最後に検出を行ってから生成・削除したオブジェクトの数をカウントしており、この数によって検出を開始します。オブジェクトの生成数"
" - 削除数が *threshold0* より大きくなると、検出を開始します。最初は ``0`` 世代のオブジェクトのみが検査されます。 ``0`` "
"世代の検査が *threshold1* 回実行されると、 ``1`` 世代のオブジェクトの検査を行います。同様に、 ``1`` 世代が "
"*threshold2* 回検査されると、 ``2`` 世代の検査を行います。"

#: ../../library/gc.rst:116
msgid ""
"Return the current collection  counts as a tuple of ``(count0, count1, "
"count2)``."
msgstr "現在の検出数を、 ``(count0, count1, count2)`` のタプルで返します。"

#: ../../library/gc.rst:122
msgid ""
"Return the current collection thresholds as a tuple of ``(threshold0, "
"threshold1, threshold2)``."
msgstr "現在の検出閾値を、 ``(threshold0, threshold1, threshold2)`` のタプルで返します。"

#: ../../library/gc.rst:128
msgid ""
"Return the list of objects that directly refer to any of objs. This function"
" will only locate those containers which support garbage collection; "
"extension types which do refer to other objects but do not support garbage "
"collection will not be found."
msgstr ""
"objsで指定したオブジェクトのいずれかを参照しているオブジェクトのリストを返します。この関数では、ガベージコレクションをサポートしているコンテナのみを返します。他のオブジェクトを参照していても、ガベージコレクションをサポートしていない拡張型は含まれません。"

#: ../../library/gc.rst:133
msgid ""
"Note that objects which have already been dereferenced, but which live in "
"cycles and have not yet been collected by the garbage collector can be "
"listed among the resulting referrers.  To get only currently live objects, "
"call :func:`collect` before calling :func:`get_referrers`."
msgstr ""
"尚、戻り値のリストには、すでに参照されなくなっているが、循環参照の一部でまだガベージコレクションで回収されていないオブジェクトも含まれるので注意が必要です。有効なオブジェクトのみを取得する場合、"
" :func:`get_referrers` の前に :func:`collect` を呼び出してください。"

#: ../../library/gc.rst:138
msgid ""
"Care must be taken when using objects returned by :func:`get_referrers` "
"because some of them could still be under construction and hence in a "
"temporarily invalid state. Avoid using :func:`get_referrers` for any purpose"
" other than debugging."
msgstr ""
":func:`get_referrers` から返されるオブジェクトは作りかけや利用できない状態である場合があるので、利用する際には注意が必要です。 "
":func:`get_referrers` をデバッグ以外の目的で利用するのは避けてください。"

#: ../../library/gc.rst:146
msgid ""
"Return a list of objects directly referred to by any of the arguments. The "
"referents returned are those objects visited by the arguments' C-level "
":c:member:`~PyTypeObject.tp_traverse` methods (if any), and may not be all "
"objects actually directly reachable.  :c:member:`~PyTypeObject.tp_traverse` "
"methods are supported only by objects that support garbage collection, and "
"are only required to visit objects that may be involved in a cycle.  So, for"
" example, if an integer is directly reachable from an argument, that integer"
" object may or may not appear in the result list."
msgstr ""
"引数で指定したオブジェクトのいずれかから参照されている、全てのオブジェクトのリストを返します。参照先のオブジェクトは、引数で指定したオブジェクトの "
"Cレベルメソッド :c:member:`~PyTypeObject.tp_traverse` "
"で取得し、全てのオブジェクトが直接到達可能な全てのオブジェクトを返すわけではありません。 "
":c:member:`~PyTypeObject.tp_traverse` "
"はガベージコレクションをサポートするオブジェクトのみが実装しており、ここで取得できるオブジェクトは循環参照の一部となる可能性のあるオブジェクトのみです。従って、例えば整数オブジェクトが直接到達可能であっても、このオブジェクトは戻り値には含まれません。"

#: ../../library/gc.rst:157
msgid ""
"Returns ``True`` if the object is currently tracked by the garbage "
"collector, ``False`` otherwise.  As a general rule, instances of atomic "
"types aren't tracked and instances of non-atomic types (containers, user-"
"defined objects...) are.  However, some type-specific optimizations can be "
"present in order to suppress the garbage collector footprint of simple "
"instances (e.g. dicts containing only atomic keys and values)::"
msgstr ""
"``obj`` がガベージコレクタに管理されていたら ``True`` を返し、それ以外の場合は ``False`` を返します。\n"
"一般的なルールとして、アトミックな (訳注: 他のオブジェクトを参照しないで単一で値を表す型。 int や str など) 型のインスタンスは管理されず、それ以外の型 (コンテナ型、ユーザー定義型など) のインスタンスは管理されます。\n"
"しかし、いくつかの型では専用の最適化を行い、シンプルなインスタンスの場合に GCのオーバーヘッドを減らしています。\n"
"(例: 全ての key と value がアトミック型の値である dict)"

#: ../../library/gc.rst:182
msgid ""
"Freeze all the objects tracked by gc - move them to a permanent generation "
"and ignore all the future collections. This can be used before a POSIX "
"fork() call to make the gc copy-on-write friendly or to speed up collection."
" Also collection before a POSIX fork() call may free pages for future "
"allocation which can cause copy-on-write too so it's advised to disable gc "
"in parent process and freeze before fork and enable gc in child process."
msgstr ""

#: ../../library/gc.rst:194
msgid ""
"Unfreeze the objects in the permanent generation, put them back into the "
"oldest generation."
msgstr "Permanent世代領域にあるオブジェクトを解凍します。つまり、最も古い世代へ戻します。"

#: ../../library/gc.rst:202
msgid "Return the number of objects in the permanent generation."
msgstr "Permanent世代領域にあるオブジェクトの数を返します。"

#: ../../library/gc.rst:207
msgid ""
"The following variables are provided for read-only access (you can mutate "
"the values but should not rebind them):"
msgstr "以下の変数は読み出し専用アクセスのために提供されています。(この変数を操作することはできますが、その値は記憶されません):"

#: ../../library/gc.rst:212
msgid ""
"A list of objects which the collector found to be unreachable but could not "
"be freed (uncollectable objects).  Starting with Python 3.4, this list "
"should be empty most of the time, except when using instances of C extension"
" types with a non-``NULL`` ``tp_del`` slot."
msgstr ""
"到達不能であることが検出されたが、解放する事ができないオブジェクトのリスト（回収不能オブジェクト）。Python 3.4 からは、``NULL`` "
"でない ``tp_del`` スロットを持つ C 拡張型のインスタンスを使っている場合を除き、このリストはほとんど常に空であるはずです。"

#: ../../library/gc.rst:217
msgid ""
"If :const:`DEBUG_SAVEALL` is set, then all unreachable objects will be added"
" to this list rather than freed."
msgstr ":const:`DEBUG_SAVEALL` が設定されている場合、全ての到達不能オブジェクトは解放されずにこのリストに格納されます。"

#: ../../library/gc.rst:220
msgid ""
"If this list is non-empty at :term:`interpreter shutdown`, a "
":exc:`ResourceWarning` is emitted, which is silent by default.  If "
":const:`DEBUG_UNCOLLECTABLE` is set, in addition all uncollectable objects "
"are printed."
msgstr ""
":term:`インタプリタシャットダウン <interpreter shutdown>` 時にこのリストが空でない場合、(デフォルトでは黙りますが) "
":exc:`ResourceWarning` が発行されます。 :const:`DEBUG_UNCOLLECTABLE` "
"がセットされていると、加えて回収不能オブジェクトを出力します。"

#: ../../library/gc.rst:226
msgid ""
"Following :pep:`442`, objects with a :meth:`__del__` method don't end up in "
":attr:`gc.garbage` anymore."
msgstr ""
":pep:`442` に従い、 :meth:`__del__` メソッドを持つオブジェクトはもう :attr:`gc.garbage` "
"に行き着くことはありません。"

#: ../../library/gc.rst:232
msgid ""
"A list of callbacks that will be invoked by the garbage collector before and"
" after collection.  The callbacks will be called with two arguments, *phase*"
" and *info*."
msgstr ""
"ガベージコレクタの起動前と終了後に呼び出されるコールバック関数のリスト。コールバックは *phase* と *info* の2つの引数で呼び出されます。"

#: ../../library/gc.rst:236
msgid "*phase* can be one of two values:"
msgstr "*phase* は以下 2 つのいずれかです:"

#: ../../library/gc.rst:238
msgid "\"start\": The garbage collection is about to start."
msgstr "\"start\": ガベージコレクションを始めます。"

#: ../../library/gc.rst:240
msgid "\"stop\": The garbage collection has finished."
msgstr "\"stop\": ガベージコレクションが終了しました。"

#: ../../library/gc.rst:242
msgid ""
"*info* is a dict providing more information for the callback.  The following"
" keys are currently defined:"
msgstr "*info* はコールバックに付加情報を提供する辞書です。現在のところ以下のキーが定義されています:"

#: ../../library/gc.rst:245
msgid "\"generation\": The oldest generation being collected."
msgstr "\"generation\": 回収される最も古い世代。"

#: ../../library/gc.rst:247
msgid ""
"\"collected\": When *phase* is \"stop\", the number of objects successfully "
"collected."
msgstr "\"collected\": *phase* が \"stop\" のとき、正常に回収されたオブジェクトの数。"

#: ../../library/gc.rst:250
msgid ""
"\"uncollectable\": When *phase* is \"stop\", the number of objects that "
"could not be collected and were put in :data:`garbage`."
msgstr ""
"\"uncollectable\": *phase* が \"stop\" のとき、回収出来ずに :data:`garbage` "
"リストに入れられたオブジェクトの数。"

#: ../../library/gc.rst:253
msgid ""
"Applications can add their own callbacks to this list.  The primary use "
"cases are:"
msgstr "アプリケーションは自身のコールバックをこのリストに追加出来ます。基本的なユースケースは以下のようなものでしょう:"

#: ../../library/gc.rst:256
msgid ""
"Gathering statistics about garbage collection, such as how often various "
"generations are collected, and how long the collection takes."
msgstr "世代が回収される頻度やガベージコレクションにかかった時間の長さといった、ガベージコレクションの統計情報を集めます。"

#: ../../library/gc.rst:260
msgid ""
"Allowing applications to identify and clear their own uncollectable types "
"when they appear in :data:`garbage`."
msgstr ":data:`garbage` に回収できない独自の型のオブジェクトが現れたとき、アプリケーションがそれらを特定し消去できるようにする。"

#: ../../library/gc.rst:266
msgid "The following constants are provided for use with :func:`set_debug`:"
msgstr "以下は :func:`set_debug` に指定することのできる定数です:"

#: ../../library/gc.rst:271
msgid ""
"Print statistics during collection.  This information can be useful when "
"tuning the collection frequency."
msgstr "検出中に統計情報を出力します。この情報は、検出頻度を最適化する際に有益です。"

#: ../../library/gc.rst:277
msgid "Print information on collectable objects found."
msgstr "見つかった回収可能オブジェクトの情報を出力します。"

#: ../../library/gc.rst:282
msgid ""
"Print information of uncollectable objects found (objects which are not "
"reachable but cannot be freed by the collector).  These objects will be "
"added to the ``garbage`` list."
msgstr ""
"見つかった回収不能オブジェクト（到達不能だが、ガベージコレクションで解放する事ができないオブジェクト）の情報を出力します。回収不能オブジェクトは、 "
"``garbage`` リストに追加されます。"

#: ../../library/gc.rst:286
msgid ""
"Also print the contents of the :data:`garbage` list at :term:`interpreter "
"shutdown`, if it isn't empty."
msgstr ""
":term:`インタプリタシャットダウン <interpreter shutdown>` 時に :data:`garbage` "
"リストが空でない場合に、その中身の出力も行います。"

#: ../../library/gc.rst:292
msgid ""
"When set, all unreachable objects found will be appended to *garbage* rather"
" than being freed.  This can be useful for debugging a leaking program."
msgstr ""
"設定されている場合、全ての到達不能オブジェクトは解放されずに *garbage* "
"に追加されます。これはプログラムのメモリリークをデバッグするときに便利です。"

#: ../../library/gc.rst:298
msgid ""
"The debugging flags necessary for the collector to print information about a"
" leaking program (equal to ``DEBUG_COLLECTABLE | DEBUG_UNCOLLECTABLE | "
"DEBUG_SAVEALL``)."
msgstr ""
"プログラムのメモリリークをデバッグするときに指定します（ ``DEBUG_COLLECTABLE | DEBUG_UNCOLLECTABLE | "
"DEBUG_SAVEALL`` と同じ）。"
