# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pprint.rst:2
msgid ":mod:`pprint` --- Data pretty printer"
msgstr ":mod:`pprint` --- データ出力の整然化"

#: ../../library/pprint.rst:9
msgid "**Source code:** :source:`Lib/pprint.py`"
msgstr "**ソースコード:** :source:`Lib/pprint.py`"

#: ../../library/pprint.rst:13
msgid ""
"The :mod:`pprint` module provides a capability to \"pretty-print\" arbitrary "
"Python data structures in a form which can be used as input to the "
"interpreter. If the formatted structures include objects which are not "
"fundamental Python types, the representation may not be loadable.  This may "
"be the case if objects such as files, sockets, classes, or instances are "
"included, as well as many other built-in objects which are not representable "
"as Python constants."
msgstr ""
":mod:`pprint` モジュールを使うと、Pythonの任意のデータ構造をインタープリタへ"
"の入力で使われる形式にして\"pretty-print\"できます。フォーマット化された構造"
"の中にPythonの基本的なタイプではないオブジェクトがあるなら、表示できないかも"
"しれません。 Pythonの定数として表現できない多くの組み込みオブジェクトと同様、"
"ファイル、ソケット、クラスあるいはインスタンスのようなオブジェクトが含まれて"
"いた場合は出力できません。"

#: ../../library/pprint.rst:20
msgid ""
"The formatted representation keeps objects on a single line if it can, and "
"breaks them onto multiple lines if they don't fit within the allowed width. "
"Construct :class:`PrettyPrinter` objects explicitly if you need to adjust "
"the width constraint."
msgstr ""
"可能であればオブジェクトをフォーマット化して1行に出力しますが、与えられた幅に"
"合わないなら複数行に分けて出力します。無理に幅を設定したいなら、 :class:"
"`PrettyPrinter` オブジェクトを作成して明示してください。"

#: ../../library/pprint.rst:25
msgid ""
"Dictionaries are sorted by key before the display is computed; before 2.5, a "
"dictionary was sorted only if its display required more than one line, "
"although that wasn't documented."
msgstr ""
"辞書は出力を計算する前にキーでソートされます。 2.5 以前では、辞書は 1 行以上"
"の出力が必要な場合にのみソートされていましたがドキュメントには書かれていませ"
"んでした。"

#: ../../library/pprint.rst:30
msgid "Added support for :class:`set` and :class:`frozenset`."
msgstr ":class:`set` と :class:`frozenset` がサポートされました。"

#: ../../library/pprint.rst:34
msgid "The :mod:`pprint` module defines one class:"
msgstr ":mod:`pprint` モジュールには1つのクラスが定義されています:"

#: ../../library/pprint.rst:41
msgid ""
"Construct a :class:`PrettyPrinter` instance.  This constructor understands "
"several keyword parameters.  An output stream may be set using the *stream* "
"keyword; the only method used on the stream object is the file protocol's :"
"meth:`write` method.  If not specified, the :class:`PrettyPrinter` adopts "
"``sys.stdout``.  Three additional parameters may be used to control the "
"formatted representation.  The keywords are *indent*, *depth*, and *width*.  "
"The amount of indentation added for each recursive level is specified by "
"*indent*; the default is one.  Other values can cause output to look a "
"little odd, but can make nesting easier to spot.  The number of levels which "
"may be printed is controlled by *depth*; if the data structure being printed "
"is too deep, the next contained level is replaced by ``...``.  By default, "
"there is no constraint on the depth of the objects being formatted.  The "
"desired output width is constrained using the *width* parameter; the default "
"is 80 characters.  If a structure cannot be formatted within the constrained "
"width, a best effort will be made."
msgstr ""
":class:`PrettyPrinter` インスタンスを作ります。このコンストラクタにはいくつか"
"のキーワードパラメータを設定できます。 *stream* キーワードで出力ストリームを"
"設定できます; このストリームに対して呼び出されるメソッドはファイルプロトコル"
"の :meth:`write` メソッドだけです。もし設定されなければ、 :class:"
"`PrettyPrinter` は ``sys.stdout`` を使用します。さらに3つのパラメータで出力"
"フォーマットをコントロールできます。そのキーワードは *indent* 、 *depth* と "
"*width* です。再帰的なレベルごとに加えるインデントの量は *indent* で設定でき"
"ます; デフォルト値は1です。他の値にすると出力が少しおかしく見えますが、ネスト"
"化されたところが見分け易くなります。出力されるレベルは *depth* で設定できま"
"す; 出力されるデータ構造が深いなら、指定以上の深いレベルのものは ``...`` で置"
"き換えられて表示されます。デフォルトでは、オブジェクトの深さを制限しません。 "
"*width* パラメータを使うと、出力する幅を望みの文字数に設定できます; デフォル"
"トでは80文字です。もし指定した幅にフォーマットできない場合は、できるだけ近づ"
"けます。"

#: ../../library/pprint.rst:74
msgid "The :class:`PrettyPrinter` class supports several derivative functions:"
msgstr ""
":class:`PrettyPrinter` クラスにはいくつかの派生する関数が提供されています:"

#: ../../library/pprint.rst:78
msgid ""
"Return the formatted representation of *object* as a string.  *indent*, "
"*width* and *depth* will be passed to the :class:`PrettyPrinter` constructor "
"as formatting parameters."
msgstr ""
"*object* をフォーマット化して文字列として返します。 *indent* 、 *width* と、 "
"*depth* は :class:`PrettyPrinter` コンストラクタにフォーマット指定引数として"
"渡されます。"

#: ../../library/pprint.rst:82 ../../library/pprint.rst:105
msgid "The parameters *indent*, *width* and *depth* were added."
msgstr "引数 *indent* 、 *width* と、 *depth* が追加されました."

#: ../../library/pprint.rst:88
msgid ""
"Prints the formatted representation of *object* on *stream*, followed by a "
"newline.  If *stream* is ``None``, ``sys.stdout`` is used.  This may be used "
"in the interactive interpreter instead of a :keyword:`print` statement for "
"inspecting values.    *indent*, *width* and *depth* will be passed to the :"
"class:`PrettyPrinter` constructor as formatting parameters."
msgstr ""
"*stream* 上に *object* のフォーマットされた表現を出力して、その後に newline "
"を続けます。 *stream* が ``None`` の場合、 ``sys.stdout`` が使用されます。こ"
"れは、対話型インタプリタの中で値を調査するために :keyword:`print` 文の代わり"
"に使用されることがあります。 *indent*, *width*, *depth* は、フォーマットパラ"
"メータとして :class:`PrettyPrinter` コンストラクタに渡されます。"

#: ../../library/pprint.rst:113
msgid ""
"Determine if the formatted representation of *object* is \"readable,\" or "
"can be used to reconstruct the value using :func:`eval`.  This always "
"returns ``False`` for recursive objects."
msgstr ""
"*object* をフォーマット化して出力できる（\"readable\"）か、あるいは :func:"
"`eval` を使って値を再構成できるかを返します。再帰的なオブジェクトに対しては常"
"に ``False`` を返します。"

#: ../../library/pprint.rst:123
msgid "Determine if *object* requires a recursive representation."
msgstr "*object* が再帰的な表現かどうかを返します。"

#: ../../library/pprint.rst:126
msgid "One more support function is also defined:"
msgstr "さらにもう1つ、関数が定義されています:"

#: ../../library/pprint.rst:130
msgid ""
"Return a string representation of *object*, protected against recursive data "
"structures.  If the representation of *object* exposes a recursive entry, "
"the recursive reference will be represented as ``<Recursion on typename with "
"id=number>``.  The representation is not otherwise formatted."
msgstr ""
"*object* の文字列表現を、再帰的なデータ構造から保護した形式で返します。もし "
"*object* の文字列表現が再帰的な要素を持っているなら、再帰的な参照は "
"``<Recursion on typename with id=number>`` で表示されます。出力は他と違って"
"フォーマット化されません。"

#: ../../library/pprint.rst:142
msgid "PrettyPrinter Objects"
msgstr "PrettyPrinter オブジェクト"

#: ../../library/pprint.rst:144
msgid ":class:`PrettyPrinter` instances have the following methods:"
msgstr ":class:`PrettyPrinter` インスタンスには以下のメソッドがあります:"

#: ../../library/pprint.rst:149
msgid ""
"Return the formatted representation of *object*.  This takes into account "
"the options passed to the :class:`PrettyPrinter` constructor."
msgstr ""
"*object* のフォーマット化した表現を返します。これは :class:`PrettyPrinter` の"
"コンストラクタに渡されたオプションを考慮してフォーマット化されます。"

#: ../../library/pprint.rst:155
msgid ""
"Print the formatted representation of *object* on the configured stream, "
"followed by a newline."
msgstr ""
"*object* のフォーマット化した表現を指定したストリームに出力し、最後に改行しま"
"す。"

#: ../../library/pprint.rst:158
msgid ""
"The following methods provide the implementations for the corresponding "
"functions of the same names.  Using these methods on an instance is slightly "
"more efficient since new :class:`PrettyPrinter` objects don't need to be "
"created."
msgstr ""
"以下のメソッドは、対応する同じ名前の関数と同じ機能を持っています。以下のメ"
"ソッドをインスタンスに対して使うと、新たに :class:`PrettyPrinter` オブジェク"
"トを作る必要がないのでちょっぴり効果的です。"

#: ../../library/pprint.rst:168
msgid ""
"Determine if the formatted representation of the object is \"readable,\" or "
"can be used to reconstruct the value using :func:`eval`.  Note that this "
"returns ``False`` for recursive objects.  If the *depth* parameter of the :"
"class:`PrettyPrinter` is set and the object is deeper than allowed, this "
"returns ``False``."
msgstr ""
"*object* をフォーマット化して出力できる（\"readable\"）か、あるいは :func:"
"`eval` を使って値を再構成できるかを返します。これは再帰的なオブジェクトに対し"
"て ``False`` を返すことに注意して下さい。もし :class:`PrettyPrinter` の "
"*depth* パラメータが設定されていて、オブジェクトのレベルが設定よりも深かった"
"ら、 ``False`` を返します。"

#: ../../library/pprint.rst:177
msgid "Determine if the object requires a recursive representation."
msgstr "オブジェクトが再帰的な表現かどうかを返します。"

#: ../../library/pprint.rst:179
msgid ""
"This method is provided as a hook to allow subclasses to modify the way "
"objects are converted to strings.  The default implementation uses the "
"internals of the :func:`saferepr` implementation."
msgstr ""
"このメソッドをフックとして、サブクラスがオブジェクトを文字列に変換する方法を"
"修正するのが可能になっています。デフォルトの実装では、内部で :func:"
"`saferepr` を呼び出しています。"

#: ../../library/pprint.rst:186
msgid ""
"Returns three values: the formatted version of *object* as a string, a flag "
"indicating whether the result is readable, and a flag indicating whether "
"recursion was detected.  The first argument is the object to be presented.  "
"The second is a dictionary which contains the :func:`id` of objects that are "
"part of the current presentation context (direct and indirect containers for "
"*object* that are affecting the presentation) as the keys; if an object "
"needs to be presented which is already represented in *context*, the third "
"return value should be ``True``.  Recursive calls to the :meth:`.format` "
"method should add additional entries for containers to this dictionary.  The "
"third argument, *maxlevels*, gives the requested limit to recursion; this "
"will be ``0`` if there is no requested limit.  This argument should be "
"passed unmodified to recursive calls. The fourth argument, *level*, gives "
"the current level; recursive calls should be passed a value less than that "
"of the current call."
msgstr ""
"次の3つの値を返します。*object* をフォーマット化して文字列にしたもの、その結"
"果が読み込み可能かどうかを示すフラグ、再帰が含まれているかどうかを示すフラ"
"グ。最初の引数は表示するオブジェクトです。 2つめの引数はオブジェクトの :func:"
"`id` をキーとして含むディクショナリで、オブジェクトを含んでいる現在の（直接、"
"間接に *object* のコンテナとして表示に影響を与える）環境です。ディクショナリ "
"*context* の中でどのオブジェクトが表示されたか表示する必要があるなら、3つめの"
"返り値は ``True`` になります。 :meth:`format` メソッドの再帰呼び出しではこの"
"ディクショナリのコンテナに対してさらにエントリを加えます。 3つめの引数 "
"*maxlevels* で再帰呼び出しのレベルを制限します。制限しない場合、 ``0`` になり"
"ます。この引数は再帰呼び出しでそのまま渡されます。 4つめの引数 *level* で現在"
"のレベルを設定します。再帰呼び出しでは、現在の呼び出しより小さい値が渡されま"
"す。"

#: ../../library/pprint.rst:205
msgid "pprint Example"
msgstr "pprint の例"

#: ../../library/pprint.rst:207
msgid ""
"This example demonstrates several uses of the :func:`pprint` function and "
"its parameters."
msgstr ""
"この例は :func:`pprint` 関数とその引数の幾つかの使い方を例示しています。"
