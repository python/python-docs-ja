# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/dis.rst:2
msgid ":mod:`dis` --- Disassembler for Python bytecode"
msgstr ":mod:`dis` --- Python バイトコードの逆アセンブラ"

#: ../../library/dis.rst:7
msgid "**Source code:** :source:`Lib/dis.py`"
msgstr "**Source code:** :source:`Lib/dis.py`"

#: ../../library/dis.rst:11
msgid ""
"The :mod:`dis` module supports the analysis of CPython :term:`bytecode` by "
"disassembling it. The CPython bytecode which this module takes as an input "
"is defined in the file :file:`Include/opcode.h` and used by the compiler and "
"the interpreter."
msgstr ""
":mod:`dis` モジュールは CPython バイトコード (:term:`bytecode`) を逆アセンブ"
"ルすることでバイトコードの解析をサポートします。 このモジュールが入力として受"
"け取る CPython バイトコードはファイル :file:`Include/opcode.h` に定義されてお"
"り、 コンパイラとインタプリタが使用しています。"

#: ../../library/dis.rst:18
msgid ""
"Bytecode is an implementation detail of the CPython interpreter!  No "
"guarantees are made that bytecode will not be added, removed, or changed "
"between versions of Python.  Use of this module should not be considered to "
"work across Python VMs or Python releases."
msgstr ""
"バイトコードは CPython インタプリタの実装詳細です! Python のバージョン 間でバ"
"イトコードの追加や、削除、変更がないという保証はありません。この モジュールを"
"使用することによって Python の異なる VM または異なるリリース の間で動作すると"
"考えるべきではありません。"

#: ../../library/dis.rst:23
msgid "Example: Given the function :func:`myfunc`::"
msgstr "例: 以下の関数 :func:`myfunc` を考えると"

#: ../../library/dis.rst:28
msgid ""
"the following command can be used to get the disassembly of :func:`myfunc`::"
msgstr ""
":func:`myfunc` の逆アセンブル結果を得るために次のコマンドを使うことができます"

#: ../../library/dis.rst:36
msgid "(The \"2\" is a line number)."
msgstr "(\"2\" は行番号です)。"

#: ../../library/dis.rst:38
msgid "The :mod:`dis` module defines the following functions and constants:"
msgstr ":mod:`dis` モジュールは次の関数と定数を定義します:"

#: ../../library/dis.rst:43
msgid ""
"Disassemble the *bytesource* object. *bytesource* can denote either a "
"module, a class, a method, a function, or a code object.  For a module, it "
"disassembles all functions.  For a class, it disassembles all methods.  For "
"a single code sequence, it prints one line per bytecode instruction.  If no "
"object is provided, it disassembles the last traceback."
msgstr ""
"*bytesource* オブジェクトを逆アセンブルします。 *bytesource* はモジュール、ク"
"ラス、関数、あるいはコードオブジェクトのいずれかを示します。 モジュールに対し"
"ては、すべての関数を逆アセンブルします。クラスに対しては、すべてのメソッドを"
"逆アセンブルします。 単一のコード列に対しては、バイトコード命令ごとに 1 行を"
"出力します。 オブジェクトが与えられない場合は、最後のトレースバックを逆アセン"
"ブルします。"

#: ../../library/dis.rst:52
msgid ""
"Disassembles the top-of-stack function of a traceback, using the last "
"traceback if none was passed.  The instruction causing the exception is "
"indicated."
msgstr ""
"トレースバックのスタックの先頭の関数を逆アセンブルします。 Noneが渡された場合"
"は最後のトレースバックを使います。例外を引き起こした命令が表示されます。"

#: ../../library/dis.rst:59
msgid ""
"Disassembles a code object, indicating the last instruction if *lasti* was "
"provided.  The output is divided in the following columns:"
msgstr ""
"コードオブジェクトを逆アセンブルします。 *lasti* が与えられた場合は、最後の命"
"令を示します。出力は次のようなカラムに分割されます:"

#: ../../library/dis.rst:62
msgid "the line number, for the first instruction of each line"
msgstr "各行の最初の命令に対する行番号。"

#: ../../library/dis.rst:63
msgid "the current instruction, indicated as ``-->``,"
msgstr "現在の命令。 ``-->`` として示されます。"

#: ../../library/dis.rst:64
msgid "a labelled instruction, indicated with ``>>``,"
msgstr "ラベル付けされた命令。 ``>>`` とともに表示されます。"

#: ../../library/dis.rst:65
msgid "the address of the instruction,"
msgstr "命令のアドレス。"

#: ../../library/dis.rst:66
msgid "the operation code name,"
msgstr "命令コード名。"

#: ../../library/dis.rst:67
msgid "operation parameters, and"
msgstr "命令パラメタ。"

#: ../../library/dis.rst:68
msgid "interpretation of the parameters in parentheses."
msgstr "パラメタの解釈を括弧で囲んだもの。"

#: ../../library/dis.rst:70
msgid ""
"The parameter interpretation recognizes local and global variable names, "
"constant values, branch targets, and compare operators."
msgstr ""
"パラメタの解釈は、ローカル変数とグローバル変数の名前、定数の値、 分岐先、比較"
"命令を認識します。"

#: ../../library/dis.rst:76
msgid ""
"A synonym for :func:`disassemble`.  It is more convenient to type, and kept "
"for compatibility with earlier Python releases."
msgstr ""
":func:`disassemble` の別名。よりタイプしやすく、以前の Python リリースと互換"
"性があります。"

#: ../../library/dis.rst:82
msgid ""
"This generator function uses the ``co_firstlineno`` and ``co_lnotab`` "
"attributes of the code object *code* to find the offsets which are starts of "
"lines in the source code.  They are generated as ``(offset, lineno)`` pairs."
msgstr ""
"このジェネレータ関数は、コードオブジェクト *code* の ``co_firstlineno`` と "
"``co_lnotab`` 属性を使い、ソースコード内の行が始まる場所であるオフセットを 求"
"めます。これらは ``(offset, lineno)`` の対として生成されます。"

#: ../../library/dis.rst:89
msgid ""
"Detect all offsets in the code object *code* which are jump targets, and "
"return a list of these offsets."
msgstr ""
"ジャンプ先であるコードオブジェクト *code* のすべてのオフセットを 求め、これら"
"のオフセットのリストを返します。"

#: ../../library/dis.rst:95
msgid "Sequence of operation names, indexable using the bytecode."
msgstr "命令コード名のリスト。バイトコードをインデクスに使って参照できます。"

#: ../../library/dis.rst:100
msgid "Dictionary mapping operation names to bytecodes."
msgstr "命令コード名をバイトコードに対応づける辞書。"

#: ../../library/dis.rst:105
msgid "Sequence of all compare operation names."
msgstr "すべての比較命令の名前のリスト。"

#: ../../library/dis.rst:110
msgid "Sequence of bytecodes that access a constant."
msgstr ""

#: ../../library/dis.rst:115
msgid "Sequence of bytecodes that access a free variable."
msgstr "自由変数にアクセスするバイトコードのリスト。"

#: ../../library/dis.rst:120
msgid "Sequence of bytecodes that access an attribute by name."
msgstr "名前によって属性にアクセスするバイトコードのリスト。"

#: ../../library/dis.rst:125
msgid "Sequence of bytecodes that have a relative jump target."
msgstr "相対ジャンプ先を持つバイトコードのリスト。"

#: ../../library/dis.rst:130
msgid "Sequence of bytecodes that have an absolute jump target."
msgstr "絶対ジャンプ先を持つバイトコードのリスト。"

#: ../../library/dis.rst:135
msgid "Sequence of bytecodes that access a local variable."
msgstr "ローカル変数にアクセスするバイトコードのリスト。"

#: ../../library/dis.rst:140
msgid "Sequence of bytecodes of Boolean operations."
msgstr "ブール命令のバイトコードのリスト。"

#: ../../library/dis.rst:146
msgid "Python Bytecode Instructions"
msgstr "Python バイトコード命令"

#: ../../library/dis.rst:148
msgid ""
"The Python compiler currently generates the following bytecode instructions."
msgstr "現在 Python コンパイラは次のバイトコード命令を生成します。"

#: ../../library/dis.rst:153
msgid "Indicates end-of-code to the compiler, not used by the interpreter."
msgstr "コンパイラにコードの終わりを知らせます。インタプリタでは使われません。"

#: ../../library/dis.rst:158
msgid "Do nothing code.  Used as a placeholder by the bytecode optimizer."
msgstr ""
"なにもしないコード。バイトコードオプティマイザでプレースホルダとして使われま"
"す。"

#: ../../library/dis.rst:163
msgid "Removes the top-of-stack (TOS) item."
msgstr "スタックの先頭 (TOS) の要素を取り除きます。"

#: ../../library/dis.rst:168
msgid "Swaps the two top-most stack items."
msgstr "スタックの先頭の 2 つの要素を入れ替えます。"

#: ../../library/dis.rst:173
msgid ""
"Lifts second and third stack item one position up, moves top down to "
"position three."
msgstr ""
"スタックの二番目と三番目の要素の位置を 1 つ上げ、先頭を三番目へ下げます。"

#: ../../library/dis.rst:179
msgid ""
"Lifts second, third and forth stack item one position up, moves top down to "
"position four."
msgstr ""
"スタックの二番目、三番目および四番目の位置を 1 つ上げ、先頭を四番目に下げま"
"す。"

#: ../../library/dis.rst:185
msgid "Duplicates the reference on top of the stack."
msgstr "スタックの先頭にある参照の複製を作ります。"

#: ../../library/dis.rst:187
msgid ""
"Unary Operations take the top of the stack, apply the operation, and push "
"the result back on the stack."
msgstr ""
"単項命令はスタックの先頭を取り出して操作を適用し、結果をスタックへプッシュし"
"戻します。"

#: ../../library/dis.rst:193
msgid "Implements ``TOS = +TOS``."
msgstr "``TOS = +TOS`` に対応します。"

#: ../../library/dis.rst:198
msgid "Implements ``TOS = -TOS``."
msgstr "``TOS = -TOS`` に対応します。"

#: ../../library/dis.rst:203
msgid "Implements ``TOS = not TOS``."
msgstr "``TOS = not TOS`` に対応します。"

#: ../../library/dis.rst:208
msgid "Implements ``TOS = `TOS```."
msgstr "``TOS = `TOS``` に対応します。"

#: ../../library/dis.rst:213
msgid "Implements ``TOS = ~TOS``."
msgstr "``TOS = ~TOS`` に対応します。"

#: ../../library/dis.rst:218
msgid "Implements ``TOS = iter(TOS)``."
msgstr "``TOS = iter(TOS)`` に対応します。"

#: ../../library/dis.rst:220
msgid ""
"Binary operations remove the top of the stack (TOS) and the second top-most "
"stack item (TOS1) from the stack.  They perform the operation, and put the "
"result back on the stack."
msgstr ""
"二項命令はスタックの先頭 (TOS) と先頭から二番目の要素をスタックから取り除きま"
"す。 命令を実行し、スタックへ結果をプッシュし戻します。"

#: ../../library/dis.rst:227
msgid "Implements ``TOS = TOS1 ** TOS``."
msgstr "``TOS = TOS1 ** TOS`` に対応します。"

#: ../../library/dis.rst:232
msgid "Implements ``TOS = TOS1 * TOS``."
msgstr "``TOS = TOS1 * TOS`` に対応します。"

#: ../../library/dis.rst:237
msgid ""
"Implements ``TOS = TOS1 / TOS`` when ``from __future__ import division`` is "
"not in effect."
msgstr ""
"``from __future__ import division`` が有効でないときの ``TOS = TOS1 / TOS`` "
"に対応します。"

#: ../../library/dis.rst:243
msgid "Implements ``TOS = TOS1 // TOS``."
msgstr "``TOS = TOS1 // TOS`` に対応します。"

#: ../../library/dis.rst:248
msgid ""
"Implements ``TOS = TOS1 / TOS`` when ``from __future__ import division`` is "
"in effect."
msgstr ""
"``from __future__ import division`` が有効なときの ``TOS = TOS1 / TOS`` に対"
"応します。"

#: ../../library/dis.rst:254
msgid "Implements ``TOS = TOS1 % TOS``."
msgstr "``TOS = TOS1 % TOS`` に対応します。"

#: ../../library/dis.rst:259
msgid "Implements ``TOS = TOS1 + TOS``."
msgstr "``TOS = TOS1 + TOS`` に対応します。"

#: ../../library/dis.rst:264
msgid "Implements ``TOS = TOS1 - TOS``."
msgstr "``TOS = TOS1 - TOS`` に対応します。"

#: ../../library/dis.rst:269
msgid "Implements ``TOS = TOS1[TOS]``."
msgstr "``TOS = TOS1[TOS]`` に対応します。"

#: ../../library/dis.rst:274
msgid "Implements ``TOS = TOS1 << TOS``."
msgstr "``TOS = TOS1 << TOS`` に対応します。"

#: ../../library/dis.rst:279
msgid "Implements ``TOS = TOS1 >> TOS``."
msgstr "``TOS = TOS1 >> TOS`` に対応します。"

#: ../../library/dis.rst:284
msgid "Implements ``TOS = TOS1 & TOS``."
msgstr "``TOS = TOS1 & TOS`` に対応します。"

#: ../../library/dis.rst:289
msgid "Implements ``TOS = TOS1 ^ TOS``."
msgstr "``TOS = TOS1 ^ TOS`` に対応します。"

#: ../../library/dis.rst:294
msgid "Implements ``TOS = TOS1 | TOS``."
msgstr "``TOS = TOS1 | TOS`` に対応します。"

#: ../../library/dis.rst:296
msgid ""
"In-place operations are like binary operations, in that they remove TOS and "
"TOS1, and push the result back on the stack, but the operation is done in-"
"place when TOS1 supports it, and the resulting TOS may be (but does not have "
"to be) the original TOS1."
msgstr ""
"インプレース命令は TOS と TOS1 を取り除いて結果をスタックへプッシュするという"
"点で二項命令と似ています。 しかし、TOS1 がインプレース命令をサポートしている"
"場合には操作が直接 TOS1 に行われます。 また、操作結果の TOS は (常に同じとい"
"うわけではありませんが) 元の TOS1 と同じオブジェクトになることが多いです。"

#: ../../library/dis.rst:304
msgid "Implements in-place ``TOS = TOS1 ** TOS``."
msgstr "インプレースの ``TOS = TOS1 ** TOS`` に対応します。"

#: ../../library/dis.rst:309
msgid "Implements in-place ``TOS = TOS1 * TOS``."
msgstr "インプレースの ``TOS = TOS1 * TOS`` に対応します。"

#: ../../library/dis.rst:314
msgid ""
"Implements in-place ``TOS = TOS1 / TOS`` when ``from __future__ import "
"division`` is not in effect."
msgstr ""
"``from __future__ import division`` が有効でないときのインプレースの ``TOS = "
"TOS1 / TOS`` に対応します。"

#: ../../library/dis.rst:320
msgid "Implements in-place ``TOS = TOS1 // TOS``."
msgstr "インプレースの ``TOS = TOS1 // TOS`` に対応します。"

#: ../../library/dis.rst:325
msgid ""
"Implements in-place ``TOS = TOS1 / TOS`` when ``from __future__ import "
"division`` is in effect."
msgstr ""
"``from __future__ import division`` が有効なときのインプレースの ``TOS = "
"TOS1 / TOS`` に対応します。"

#: ../../library/dis.rst:331
msgid "Implements in-place ``TOS = TOS1 % TOS``."
msgstr "インプレースの ``TOS = TOS1 % TOS`` に対応します。"

#: ../../library/dis.rst:336
msgid "Implements in-place ``TOS = TOS1 + TOS``."
msgstr "インプレースの ``TOS = TOS1 + TOS`` に対応します。"

#: ../../library/dis.rst:341
msgid "Implements in-place ``TOS = TOS1 - TOS``."
msgstr "インプレースの ``TOS = TOS1 - TOS`` に対応します。"

#: ../../library/dis.rst:346
msgid "Implements in-place ``TOS = TOS1 << TOS``."
msgstr "インプレースの ``TOS = TOS1 << TOS`` に対応します。"

#: ../../library/dis.rst:351
msgid "Implements in-place ``TOS = TOS1 >> TOS``."
msgstr "インプレースの ``TOS = TOS1 >> TOS`` に対応します。"

#: ../../library/dis.rst:356
msgid "Implements in-place ``TOS = TOS1 & TOS``."
msgstr "インプレースの ``TOS = TOS1 & TOS`` に対応します。"

#: ../../library/dis.rst:361
msgid "Implements in-place ``TOS = TOS1 ^ TOS``."
msgstr "インプレースの ``TOS = TOS1 ^ TOS`` に対応します。"

#: ../../library/dis.rst:366
msgid "Implements in-place ``TOS = TOS1 | TOS``."
msgstr "インプレースの ``TOS = TOS1 | TOS`` に対応します。"

#: ../../library/dis.rst:368
msgid "The slice opcodes take up to three parameters."
msgstr "スライス命令コードは最大 3 つのパラメタを取ります。"

#: ../../library/dis.rst:373
msgid "Implements ``TOS = TOS[:]``."
msgstr "``TOS = TOS[:]`` に対応します。"

#: ../../library/dis.rst:378
msgid "Implements ``TOS = TOS1[TOS:]``."
msgstr "``TOS = TOS1[TOS:]`` に対応します。"

#: ../../library/dis.rst:383
msgid "Implements ``TOS = TOS1[:TOS]``."
msgstr "``TOS = TOS1[:TOS]`` に対応します。"

#: ../../library/dis.rst:388
msgid "Implements ``TOS = TOS2[TOS1:TOS]``."
msgstr "``TOS = TOS2[TOS1:TOS]`` に対応します。"

#: ../../library/dis.rst:390
msgid ""
"Slice assignment needs even an additional parameter.  As any statement, they "
"put nothing on the stack."
msgstr ""
"スライス代入はさらにもう 1 つのパラメタを必要とします。 他の文と同じく、これ"
"らはスタックに何もプッシュしません。"

#: ../../library/dis.rst:396
msgid "Implements ``TOS[:] = TOS1``."
msgstr "``TOS[:] = TOS1`` に対応します。"

#: ../../library/dis.rst:401
msgid "Implements ``TOS1[TOS:] = TOS2``."
msgstr "``TOS1[TOS:] = TOS2`` に対応します。"

#: ../../library/dis.rst:406
msgid "Implements ``TOS1[:TOS] = TOS2``."
msgstr "``TOS1[:TOS] = TOS2`` に対応します。"

#: ../../library/dis.rst:411
msgid "Implements ``TOS2[TOS1:TOS] = TOS3``."
msgstr "``TOS2[TOS1:TOS] = TOS3`` に対応します。"

#: ../../library/dis.rst:416
msgid "Implements ``del TOS[:]``."
msgstr "``del TOS[:]`` に対応します。"

#: ../../library/dis.rst:421
msgid "Implements ``del TOS1[TOS:]``."
msgstr "``del TOS1[TOS:]`` に対応します。"

#: ../../library/dis.rst:426
msgid "Implements ``del TOS1[:TOS]``."
msgstr "``del TOS1[:TOS]`` に対応します。"

#: ../../library/dis.rst:431
msgid "Implements ``del TOS2[TOS1:TOS]``."
msgstr "``del TOS2[TOS1:TOS]`` に対応します。"

#: ../../library/dis.rst:436
msgid "Implements ``TOS1[TOS] = TOS2``."
msgstr "``TOS1[TOS] = TOS2`` に対応します。"

#: ../../library/dis.rst:441
msgid "Implements ``del TOS1[TOS]``."
msgstr "``del TOS1[TOS]`` に対応します。"

#: ../../library/dis.rst:443
msgid "Miscellaneous opcodes."
msgstr "その他の命令コード。"

#: ../../library/dis.rst:448
msgid ""
"Implements the expression statement for the interactive mode.  TOS is "
"removed from the stack and printed.  In non-interactive mode, an expression "
"statement is terminated with :opcode:`POP_TOP`."
msgstr ""
"対話モードのための式文に対応します。TOS はスタックから取り除かれ表示されま"
"す。 非対話モードにおいては、式文は :opcode:`POP_TOP` で終了しています。"

#: ../../library/dis.rst:455
msgid ""
"Prints TOS to the file-like object bound to ``sys.stdout``.  There is one "
"such instruction for each item in the :keyword:`print` statement."
msgstr ""
"``sys.stdout`` に束縛されたファイル互換オブジェクトに対して TOS を出力しま"
"す。 :keyword:`print` 文の各要素に対してこのような命令が一つずつあります。"

#: ../../library/dis.rst:461
msgid ""
"Like ``PRINT_ITEM``, but prints the item second from TOS to the file-like "
"object at TOS.  This is used by the extended print statement."
msgstr ""
"``PRINT_ITEM`` と似ていますが、TOS から二番目の要素を TOS にあるファイル互換"
"オブジェクトへ出力します。 これは拡張 print 文で使われます。"

#: ../../library/dis.rst:467
msgid ""
"Prints a new line on ``sys.stdout``.  This is generated as the last "
"operation of a :keyword:`print` statement, unless the statement ends with a "
"comma."
msgstr ""
"``sys.stdout`` へ改行を表示します。 これは :keyword:`print` 文がコンマで終"
"わっていない場合に :keyword:`print` 文の最後の命令として生成されます。"

#: ../../library/dis.rst:473
msgid ""
"Like ``PRINT_NEWLINE``, but prints the new line on the file-like object on "
"the TOS.  This is used by the extended print statement."
msgstr ""
"``PRINT_NEWLINE`` と似ていますが、TOSのファイル互換オブジェクトに改行を表示し"
"ます。 これは拡張 print 文で使われます。"

#: ../../library/dis.rst:479
msgid "Terminates a loop due to a :keyword:`break` statement."
msgstr ":keyword:`break` 文によってループを終了します。"

#: ../../library/dis.rst:484
msgid ""
"Continues a loop due to a :keyword:`continue` statement.  *target* is the "
"address to jump to (which should be a :opcode:`FOR_ITER` instruction)."
msgstr ""
":keyword:`continue` 文によってループを継続します。 *target* はジャンプするア"
"ドレスです (アドレスは :opcode:`FOR_ITER` 命令でなければなりません)。"

#: ../../library/dis.rst:490
msgid ""
"Calls ``list.append(TOS[-i], TOS)``.  Used to implement list comprehensions. "
"While the appended value is popped off, the list object remains on the stack "
"so that it is available for further iterations of the loop."
msgstr ""
"``list.append(TOS[-i], TOS)`` を呼びます。リスト内包表記を実装するために使わ"
"れます。 要素が取り除かれる間、リストオブジェクトはスタックに残るので、ループ"
"の 反復をさらに行えます。"

#: ../../library/dis.rst:497
msgid ""
"Pushes a reference to the locals of the current scope on the stack. This is "
"used in the code for a class definition: After the class body is evaluated, "
"the locals are passed to the class definition."
msgstr ""
"現在のスコープのローカルな名前空間 (locals) への参照をスタックにプッシュしま"
"す。 これはクラス定義のためのコードで使われます: クラス本体が評価された後、"
"locals はクラス定義へ渡されます。"

#: ../../library/dis.rst:504
msgid "Returns with TOS to the caller of the function."
msgstr "関数の呼び出し元へ TOS を返します。"

#: ../../library/dis.rst:509
msgid "Pops ``TOS`` and yields it from a :term:`generator`."
msgstr ""
"``TOS`` をポップし、それをジェネレータ (:term:`generator`) から yield しま"
"す。"

#: ../../library/dis.rst:514
msgid ""
"Loads all symbols not starting with ``'_'`` directly from the module TOS to "
"the local namespace. The module is popped after loading all names. This "
"opcode implements ``from module import *``."
msgstr ""
"``'_'`` で始まっていないすべてのシンボルをモジュール TOS から直接ローカル名前"
"空間へロードします。 モジュールはすべての名前をロードした後にポップされま"
"す。 この命令コードは ``from module import *`` に対応します。"

#: ../../library/dis.rst:521
msgid ""
"Implements ``exec TOS2,TOS1,TOS``.  The compiler fills missing optional "
"parameters with ``None``."
msgstr ""
"``exec TOS2,TOS1,TOS`` に対応します。コンパイラは指定されなかったオプションの"
"パラメタを ``None`` で埋めます。"

#: ../../library/dis.rst:527
msgid ""
"Removes one block from the block stack.  Per frame, there is a stack of "
"blocks, denoting nested loops, try statements, and such."
msgstr ""
"ブロックスタックからブロックを一つ取り除きます。 フレームごとにブロックのス"
"タックがあり、ネストしたループや try 文などを表しています。"

#: ../../library/dis.rst:533
msgid ""
"Terminates a :keyword:`finally` clause.  The interpreter recalls whether the "
"exception has to be re-raised, or whether the function returns, and "
"continues with the outer-next block."
msgstr ""
":keyword:`finally` 節を終了します。 インタプリタは例外を再送出しなければなら"
"ないかどうか、あるいは、 関数から return して外側の次のブロックに続くかどうか"
"を再度判断します。"

#: ../../library/dis.rst:540
msgid ""
"Creates a new class object.  TOS is the methods dictionary, TOS1 the tuple "
"of the names of the base classes, and TOS2 the class name."
msgstr ""
"新しいクラスオブジェクトを作成します。TOSはメソッド辞書、TOS1は基底クラスの名"
"前のタプル、TOS2はクラス名です。"

#: ../../library/dis.rst:546
msgid ""
"This opcode performs several operations before a with block starts.  First, "
"it loads :meth:`~object.__exit__` from the context manager and pushes it "
"onto the stack for later use by :opcode:`WITH_CLEANUP`.  Then, :meth:"
"`~object.__enter__` is called, and a finally block pointing to *delta* is "
"pushed.  Finally, the result of calling the enter method is pushed onto the "
"stack.  The next opcode will either ignore it (:opcode:`POP_TOP`), or store "
"it in (a) variable(s) (:opcode:`STORE_FAST`, :opcode:`STORE_NAME`, or :"
"opcode:`UNPACK_SEQUENCE`)."
msgstr ""
"この命令コードは、with ブロックが開始する前にいくつかの命令を行います。 ま"
"ず、コンテキストマネージャから :meth:`~object.__exit__` をロードし、 後から :"
"opcode:`WITH_CLEANUP` で使うためにスタックにプッシュします。 そして、 :meth:"
"`~object.__enter__` が呼び出され、 *delta* を指す finally ブロックがプッシュ"
"されます。最後に、enter メソッドを呼び出した 結果がスタックにプッシュされま"
"す。次の命令コードはこれを無視 (:opcode:`POP_TOP`) するか、変数に保存 (:"
"opcode:`STORE_FAST`, :opcode:`STORE_NAME`, または :opcode:`UNPACK_SEQUENCE`) "
"します。"

#: ../../library/dis.rst:558
msgid ""
"Cleans up the stack when a :keyword:`with` statement block exits.  On top of "
"the stack are 1--3 values indicating how/why the finally clause was entered:"
msgstr ""
":keyword:`with` 式ブロックを抜けるときに、スタックをクリーンアップします。 ス"
"タックの先頭は 1--3 個の値で、それらはなぜ/どのように finally 節に 到達したか"
"を表しています:"

#: ../../library/dis.rst:561
msgid "TOP = ``None``"
msgstr "TOP = ``None``"

#: ../../library/dis.rst:562
msgid "(TOP, SECOND) = (``WHY_{RETURN,CONTINUE}``), retval"
msgstr "(TOP, SECOND) = (``WHY_{RETURN,CONTINUE}``), retval"

#: ../../library/dis.rst:563
msgid "TOP = ``WHY_*``; no retval below it"
msgstr "TOP = ``WHY_*``; no retval below it"

#: ../../library/dis.rst:564
msgid "(TOP, SECOND, THIRD) = exc_info()"
msgstr "(TOP, SECOND, THIRD) = exc_info()"

#: ../../library/dis.rst:566
msgid ""
"Under them is EXIT, the context manager's :meth:`__exit__` bound method."
msgstr ""
"これらの値の下には、コンテキストマネージャーの :meth:`__exit__` 結合メソッド "
"(bound method) である EXIT があります。"

#: ../../library/dis.rst:568
msgid ""
"In the last case, ``EXIT(TOP, SECOND, THIRD)`` is called, otherwise "
"``EXIT(None, None, None)``."
msgstr ""
"最後のケースでは、 ``EXIT(TOP, SECOND, THIRD)`` が呼ばれ、それ以外では "
"``EXIT(None, None, None)`` が呼ばれます。"

#: ../../library/dis.rst:571
msgid ""
"EXIT is removed from the stack, leaving the values above it in the same "
"order. In addition, if the stack represents an exception, *and* the function "
"call returns a 'true' value, this information is \"zapped\", to prevent "
"``END_FINALLY`` from re-raising the exception.  (But non-local gotos should "
"still be resumed.)"
msgstr ""
"EXIT はスタックから取り除かれ、その上の値は順序を維持したまま残されます。 加"
"えて、スタックが例外処理中であることを示し、 *かつ* 関数呼び出しが *true* 値"
"を返した場合、 ``END_FINALLY`` が例外を再送出することを防ぐため、この情報は削"
"除されます (\"zapped\")。 (しかし、 non-local goto は再開されます)"

#: ../../library/dis.rst:580
msgid ""
"All of the following opcodes expect arguments.  An argument is two bytes, "
"with the more significant byte last."
msgstr ""
"以下の命令コードはすべて引数を必要とします。引数は 2 バイトで、最上位バイトが"
"後になります。"

#: ../../library/dis.rst:585
msgid ""
"Implements ``name = TOS``. *namei* is the index of *name* in the attribute :"
"attr:`co_names` of the code object. The compiler tries to use ``STORE_FAST`` "
"or ``STORE_GLOBAL`` if possible."
msgstr ""
"``name = TOS`` に対応します。 *namei* はコードオブジェクトの属性 :attr:"
"`co_names` における *name* のインデクスです。 コンパイラは可能ならば "
"``STORE_FAST`` または ``STORE_GLOBAL`` を使おうとします。"

#: ../../library/dis.rst:592
msgid ""
"Implements ``del name``, where *namei* is the index into :attr:`co_names` "
"attribute of the code object."
msgstr ""
"``del name`` に対応します。 *namei* はコードオブジェクトの :attr:`co_names` "
"属性へのインデクスです。"

#: ../../library/dis.rst:598
msgid ""
"Unpacks TOS into *count* individual values, which are put onto the stack "
"right-to-left."
msgstr ""
"TOS を *count* 個の個別の値にアンパックして、右から左の順にスタックに置きま"
"す。"

#: ../../library/dis.rst:604
msgid ""
"Duplicate *count* items, keeping them in the same order. Due to "
"implementation limits, *count* should be between 1 and 5 inclusive."
msgstr ""
"*count* 個の要素を順番を保ちながら複製します。 実装上の制限から、 *count* は "
"1以上 から 5 以下でなければなりません。"

#: ../../library/dis.rst:610
msgid ""
"Implements ``TOS.name = TOS1``, where *namei* is the index of name in :attr:"
"`co_names`."
msgstr ""
"``TOS.name = TOS1`` に対応します。 *namei* は :attr:`co_names` における名前の"
"インデクスです。"

#: ../../library/dis.rst:616
msgid ""
"Implements ``del TOS.name``, using *namei* as index into :attr:`co_names`."
msgstr ""
"``del TOS.name`` に対応します。 :attr:`co_names` へのインデクスとして "
"*namei* を使います。"

#: ../../library/dis.rst:621
msgid "Works as ``STORE_NAME``, but stores the name as a global."
msgstr ""
"``STORE_NAME`` と同じように動作しますが、 name をグローバルとして保存します。"

#: ../../library/dis.rst:626
msgid "Works as ``DELETE_NAME``, but deletes a global name."
msgstr ""
"``DELETE_NAME`` と同じように動作しますが、グローバルの name を削除します。"

#: ../../library/dis.rst:631
msgid "Pushes ``co_consts[consti]`` onto the stack."
msgstr "``co_consts[consti]`` をスタックにプッシュします。"

#: ../../library/dis.rst:636
msgid "Pushes the value associated with ``co_names[namei]`` onto the stack."
msgstr "``co_names[namei]`` に関連付けられた値をスタックにプッシュします。"

#: ../../library/dis.rst:641
msgid ""
"Creates a tuple consuming *count* items from the stack, and pushes the "
"resulting tuple onto the stack."
msgstr ""
"スタックから *count* 個の要素を消費してタプルを作り出し、できたタプルをスタッ"
"クにプッシュします。"

#: ../../library/dis.rst:647
msgid "Works as ``BUILD_TUPLE``, but creates a list."
msgstr "``BUILD_TUPLE`` と同じように動作しますが、リストを作り出します。"

#: ../../library/dis.rst:652
msgid "Works as ``BUILD_TUPLE``, but creates a set."
msgstr "``BUILD_TUPLE`` と同じように動作しますが、set を作り出します。"

#: ../../library/dis.rst:659
msgid ""
"Pushes a new dictionary object onto the stack.  The dictionary is pre-sized "
"to hold *count* entries."
msgstr ""
"スタックに新しい辞書オブジェクトをプッシュします。 辞書は *count* 個のエント"
"リを持つサイズに設定されます。"

#: ../../library/dis.rst:665
msgid "Replaces TOS with ``getattr(TOS, co_names[namei])``."
msgstr "TOS を ``getattr(TOS, co_names[namei])`` と入れ替えます。"

#: ../../library/dis.rst:670
msgid ""
"Performs a Boolean operation.  The operation name can be found in "
"``cmp_op[opname]``."
msgstr "ブール命令を実行します。命令名は ``cmp_op[opname]`` にあります。"

#: ../../library/dis.rst:676
msgid ""
"Imports the module ``co_names[namei]``.  TOS and TOS1 are popped and provide "
"the *fromlist* and *level* arguments of :func:`__import__`.  The module "
"object is pushed onto the stack.  The current namespace is not affected: for "
"a proper import statement, a subsequent ``STORE_FAST`` instruction modifies "
"the namespace."
msgstr ""
"モジュール ``co_names[namei]`` をインポートします。 TOS と TOS1 がポップさ"
"れ、 :func:`__import__` の *fromlist* と *level* 引数になります。 モジュール"
"オブジェクトはスタックへプッシュされます。現在の名前空間は影響されません: 適"
"切な import 文のためには、後続の ``STORE_FAST`` 命令が名前空間を変更します。"

#: ../../library/dis.rst:685
msgid ""
"Loads the attribute ``co_names[namei]`` from the module found in TOS. The "
"resulting object is pushed onto the stack, to be subsequently stored by a "
"``STORE_FAST`` instruction."
msgstr ""
"TOS にあるモジュールから属性 ``co_names[namei]`` をロードします。 作成された"
"オブジェクトはスタックにプッシュされ、後続の ``STORE_FAST`` 命令によって保存"
"されます。"

#: ../../library/dis.rst:692
msgid "Increments bytecode counter by *delta*."
msgstr "バイトコードカウンタを *delta* だけ増加させます。"

#: ../../library/dis.rst:697
msgid "If TOS is true, sets the bytecode counter to *target*.  TOS is popped."
msgstr ""
"TOS が真ならば、バイトコードカウンタを *target* に設定します。 TOS はポップさ"
"れます。"

#: ../../library/dis.rst:702
msgid "If TOS is false, sets the bytecode counter to *target*.  TOS is popped."
msgstr ""
"TOS が偽ならば、バイトコードカウンタを *target* に設定します。 TOS はポップさ"
"れます。"

#: ../../library/dis.rst:707
msgid ""
"If TOS is true, sets the bytecode counter to *target* and leaves TOS on the "
"stack.  Otherwise (TOS is false), TOS is popped."
msgstr ""
"TOS が真ならば、バイトコードカウンタを *target* に設定し、TOS は スタックに残"
"されます。そうでない (TOS が偽) なら、TOS はポップされます。"

#: ../../library/dis.rst:713
msgid ""
"If TOS is false, sets the bytecode counter to *target* and leaves TOS on the "
"stack.  Otherwise (TOS is true), TOS is popped."
msgstr ""
"TOS が偽ならば、バイトコードカウンタを *target* に設定し、TOS は スタックに残"
"されます。そうでない (TOS が真) なら、TOS はポップされます。"

#: ../../library/dis.rst:719
msgid "Set bytecode counter to *target*."
msgstr "バイトコードカウンタを *target* に設定します。"

#: ../../library/dis.rst:724
msgid ""
"``TOS`` is an :term:`iterator`.  Call its :meth:`!next` method.  If this "
"yields a new value, push it on the stack (leaving the iterator below it).  "
"If the iterator indicates it is exhausted ``TOS`` is popped, and the "
"bytecode counter is incremented by *delta*."
msgstr ""
"``TOS`` はイテレータです。その :meth:`!next` メソッドを呼び出します。 新しい"
"値が yield された場合は、それをスタックにプッシュします (イテレータはその下に"
"残されます)。 イテレータの呼び出しで要素が尽きたことが示された場合は、 "
"``TOS`` がポップされます。 そして、バイトコードカウンタが *delta* だけ増やさ"
"れます。"

#: ../../library/dis.rst:732
msgid "Loads the global named ``co_names[namei]`` onto the stack."
msgstr "``co_names[namei]`` という名前のグローバルをスタック上にロードします。"

#: ../../library/dis.rst:737
msgid ""
"Pushes a block for a loop onto the block stack.  The block spans from the "
"current instruction with a size of *delta* bytes."
msgstr ""
"ループのためのブロックをブロックスタックにプッシュします。 ブロックは現在の命"
"令から *delta* バイトの大きさを占めます。"

#: ../../library/dis.rst:743
msgid ""
"Pushes a try block from a try-except clause onto the block stack. *delta* "
"points to the first except block."
msgstr ""
"try-except 節から try ブロックをブロックスタックにプッシュします。 *delta* は"
"最初の except ブロックを指します。"

#: ../../library/dis.rst:749
msgid ""
"Pushes a try block from a try-except clause onto the block stack. *delta* "
"points to the finally block."
msgstr ""
"try-except 節から try ブロックをブロックスタックにプッシュします。 *delta* "
"は finally ブロックを指します。"

#: ../../library/dis.rst:754
msgid ""
"Store a key and value pair in a dictionary.  Pops the key and value while "
"leaving the dictionary on the stack."
msgstr ""
"key, value のペアを辞書に格納します。 key と value をポップする一方、辞書はス"
"タックに残されます。"

#: ../../library/dis.rst:759
msgid ""
"Pushes a reference to the local ``co_varnames[var_num]`` onto the stack."
msgstr ""
"ローカルな ``co_varnames[var_num]`` への参照をスタックにプッシュします。"

#: ../../library/dis.rst:764
msgid "Stores TOS into the local ``co_varnames[var_num]``."
msgstr "TOS をローカルな ``co_varnames[var_num]`` の中に保存します。"

#: ../../library/dis.rst:769
msgid "Deletes local ``co_varnames[var_num]``."
msgstr "ローカルな ``co_varnames[var_num]`` を削除します。"

#: ../../library/dis.rst:774
msgid ""
"Pushes a reference to the cell contained in slot *i* of the cell and free "
"variable storage.  The name of the variable is ``co_cellvars[i]`` if *i* is "
"less than the length of *co_cellvars*.  Otherwise it is ``co_freevars[i - "
"len(co_cellvars)]``."
msgstr ""
"セルと自由変数の記憶領域のスロット *i* に含まれるセルへの参照をプッシュしま"
"す。 *i* が *co_cellvars* の長さより小さければ、変数の名前は "
"``co_cellvars[i]`` です。 そうでなければ ``co_freevars[i - "
"len(co_cellvars)]`` です。"

#: ../../library/dis.rst:782
msgid ""
"Loads the cell contained in slot *i* of the cell and free variable storage. "
"Pushes a reference to the object the cell contains on the stack."
msgstr ""
"セルと自由変数の記憶領域のスロット *i* に含まれるセルをロードします。 セルが"
"持つオブジェクトへの参照をスタックにプッシュします。"

#: ../../library/dis.rst:788
msgid ""
"Stores TOS into the cell contained in slot *i* of the cell and free variable "
"storage."
msgstr ""
"セルと自由変数の記憶領域のスロット *i* に含まれるセルへTOSを保存します。"

#: ../../library/dis.rst:794
msgid "This opcode is obsolete."
msgstr "この命令コードは廃止されました。"

#: ../../library/dis.rst:799
msgid ""
"Raises an exception. *argc* indicates the number of arguments to the raise "
"statement, ranging from 0 to 3.  The handler will find the traceback as "
"TOS2, the parameter as TOS1, and the exception as TOS."
msgstr ""

#: ../../library/dis.rst:806
msgid ""
"Calls a callable object.  The low byte of *argc* indicates the number of "
"positional arguments, the high byte the number of keyword arguments. The "
"stack contains keyword arguments on top (if any), then the positional "
"arguments below that (if any), then the callable object to call below that. "
"Each keyword argument is represented with two values on the stack: the "
"argument's name, and its value, with the argument's value above the name on "
"the stack. The positional arguments are pushed in the order that they are "
"passed in to the callable object, with the right-most positional argument on "
"top. ``CALL_FUNCTION`` pops all arguments and the callable object off the "
"stack, calls the callable object with those arguments, and pushes the return "
"value returned by the callable object."
msgstr ""

#: ../../library/dis.rst:822
msgid ""
"Pushes a new function object on the stack.  TOS is the code associated with "
"the function.  The function object is defined to have *argc* default "
"parameters, which are found below TOS."
msgstr ""
"新しい関数オブジェクトをスタックにプッシュします。 TOS は関数に関連付けられた"
"コードです。 関数オブジェクトは TOS の下にある *argc* デフォルトパラメタをも"
"つように定義されます。"

#: ../../library/dis.rst:829
msgid ""
"Creates a new function object, sets its *func_closure* slot, and pushes it "
"on the stack.  TOS is the code associated with the function, TOS1 the tuple "
"containing cells for the closure's free variables.  The function also has "
"*argc* default parameters, which are found below the cells."
msgstr ""
"新しい関数オブジェクトを作り出し、その *func_closure* スロットを設定し、ス"
"タックにプッシュします。 TOS は関数に関連付けられたコードで、TOS1 はクロー"
"ジャの自由変数に対するセルを格納したタプルです。 関数はセルの前にある *argc* "
"デフォルトパラメタも持っています。"

#: ../../library/dis.rst:839
msgid ""
"Pushes a slice object on the stack.  *argc* must be 2 or 3.  If it is 2, "
"``slice(TOS1, TOS)`` is pushed; if it is 3, ``slice(TOS2, TOS1, TOS)`` is "
"pushed. See the :func:`slice` built-in function for more information."
msgstr ""
"スライスオブジェクトをスタックにプッシュします。 *argc* は2あるいは3でなけれ"
"ばなりません。 2 ならば ``slice(TOS1, TOS)`` がプッシュされます。 3 ならば "
"``slice(TOS2, TOS1, TOS)`` がプッシュされます。 これ以上の情報については、 :"
"func:`slice()` 組み込み関数を参照してください。"

#: ../../library/dis.rst:846
msgid ""
"Prefixes any opcode which has an argument too big to fit into the default "
"two bytes.  *ext* holds two additional bytes which, taken together with the "
"subsequent opcode's argument, comprise a four-byte argument, *ext* being the "
"two most-significant bytes."
msgstr ""
"デフォルトの 2 バイトに収まりきらない大きな引数を持つあらゆる命令コードの前に"
"置かれます。 *ext* は追加の 2 バイトを保持し、後続の命令コードの引数と組み合"
"わされます。 それらは 4 バイト引数を構成し、 *ext* はその最上位バイトです。"

#: ../../library/dis.rst:854
msgid ""
"Calls a callable object, similarly to :opcode:`CALL_FUNCTION`. *argc* "
"represents the number of keyword and positional arguments, identically to :"
"opcode:`CALL_FUNCTION`. The top of the stack contains an iterable object "
"containing additional positional arguments. Below that are keyword arguments "
"(if any), positional arguments (if any) and a callable object, identically "
"to :opcode:`CALL_FUNCTION`. Before the callable object is called, the "
"iterable object is \"unpacked\" and its contents are appended to the "
"positional arguments passed in. The iterable object is ignored when "
"computing the value of ``argc``."
msgstr ""

#: ../../library/dis.rst:870
msgid ""
"Calls a callable object, similarly to :opcode:`CALL_FUNCTION`. *argc* "
"represents the number of keyword and positional arguments, identically to :"
"opcode:`CALL_FUNCTION`. The top of the stack contains a mapping object "
"containing additional keyword arguments. Below that are keyword arguments "
"(if any), positional arguments (if any) and a callable object, identically "
"to :opcode:`CALL_FUNCTION`. Before the callable is called, the mapping "
"object at the top of the stack is \"unpacked\" and its contents are appended "
"to the keyword arguments passed in. The mapping object at the top of the "
"stack is ignored when computing the value of ``argc``."
msgstr ""

#: ../../library/dis.rst:885
msgid ""
"Calls a callable object, similarly to :opcode:`CALL_FUNCTION_VAR` and :"
"opcode:`CALL_FUNCTION_KW`. *argc* represents the number of keyword and "
"positional arguments, identically to :opcode:`CALL_FUNCTION`. The top of the "
"stack contains a mapping object, as per :opcode:`CALL_FUNCTION_KW`. Below "
"that is an iterable object, as per :opcode:`CALL_FUNCTION_VAR`. Below that "
"are keyword arguments (if any), positional arguments (if any) and a callable "
"object, identically to :opcode:`CALL_FUNCTION`. Before the callable is "
"called, the mapping object and iterable object are each \"unpacked\" and "
"their contents passed in as keyword and positional arguments respectively, "
"identically to :opcode:`CALL_FUNCTION_VAR` and :opcode:`CALL_FUNCTION_KW`. "
"The mapping object and iterable object are both ignored when computing the "
"value of ``argc``."
msgstr ""

#: ../../library/dis.rst:905
msgid ""
"This is not really an opcode.  It identifies the dividing line between "
"opcodes which don't take arguments ``< HAVE_ARGUMENT`` and those which do "
"``>= HAVE_ARGUMENT``."
msgstr ""
"これは実際の命令コードではありません。引数を取らない命令コード ``< "
"HAVE_ARGUMENT``  と、 引数を取る命令コード ``>= HAVE_ARGUMENT`` の分割行を表"
"します。"
