# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
# Inada Naoki <songofacandy@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2021-05-24 14:05+0000\n"
"Last-Translator: Takanori Suzuki <takanori@takanory.net>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/unittest.rst:2
msgid ":mod:`unittest` --- Unit testing framework"
msgstr ":mod:`unittest` --- ユニットテストフレームワーク"

#: ../../library/unittest.rst:13
msgid ""
"(If you are already familiar with the basic concepts of testing, you might "
"want to skip to :ref:`the list of assert methods <assert-methods>`.)"
msgstr ""
"(読者の方がすでにテストの基本概念についてなじみがあるようでしたら、この部分を"
"とばして :ref:`the list of assert methods <assert-methods>` に進むと良いで"
"しょう。)"

#: ../../library/unittest.rst:16
msgid ""
"The Python unit testing framework, sometimes referred to as \"PyUnit,\" is a "
"Python language version of JUnit, by Kent Beck and Erich Gamma. JUnit is, in "
"turn, a Java version of Kent's Smalltalk testing framework.  Each is the de "
"facto standard unit testing framework for its respective language."
msgstr ""
"この Python ユニットテストフレームワークは時に \"PyUnit\" とも呼ばれ、 Kent "
"Beck と Erich Gamma による JUnit の Python 版です。 JUnit はまた Kent の "
"Smalltalk 用テストフレームワークの Java 版で、どちらもそれぞれの言語で業界標"
"準のユニットテストフレームワークとなっています。"

#: ../../library/unittest.rst:21
msgid ""
":mod:`unittest` supports test automation, sharing of setup and shutdown code "
"for tests, aggregation of tests into collections, and independence of the "
"tests from the reporting framework.  The :mod:`unittest` module provides "
"classes that make it easy to support these qualities for a set of tests."
msgstr ""
":mod:`unittest` では、テストの自動化・初期設定と終了処理の共有・テストの分"
"類・テスト実行と結果レポートの分離などの機能を提供しており、 :mod:`unittest` "
"のクラスを使って簡単にたくさんのテストを開発できるようになっています。"

#: ../../library/unittest.rst:26
msgid "To achieve this, :mod:`unittest` supports some important concepts:"
msgstr ""
"これを実現するために、 :mod:`unittest` はいくつかの重要な概念をサポートしてい"
"ます:"

#: ../../library/unittest.rst:32
msgid "test fixture"
msgstr "テストフィクスチャ (test fixture)"

#: ../../library/unittest.rst:29
msgid ""
"A :dfn:`test fixture` represents the preparation needed to perform one or "
"more tests, and any associate cleanup actions.  This may involve, for "
"example, creating temporary or proxy databases, directories, or starting a "
"server process."
msgstr ""
":dfn:`test fixture` とは、テスト実行のために必要な準備や終了処理を指します。"
"例: テスト用データベースの作成・ディレクトリ・サーバプロセスの起動など。"

#: ../../library/unittest.rst:37
msgid "test case"
msgstr "テストケース (test case)"

#: ../../library/unittest.rst:35
msgid ""
"A :dfn:`test case` is the smallest unit of testing.  It checks for a "
"specific response to a particular set of inputs.  :mod:`unittest` provides a "
"base class, :class:`TestCase`, which may be used to create new test cases."
msgstr ""
":dfn:`test case` はテストの最小単位で、各入力に対する結果をチェックします。テ"
"ストケースを作成する場合は、 :mod:`unittest` が提供する :class:`TestCase` ク"
"ラスを基底クラスとして利用することができます。"

#: ../../library/unittest.rst:41
msgid "test suite"
msgstr "テストスイート (test suite)"

#: ../../library/unittest.rst:40
msgid ""
"A :dfn:`test suite` is a collection of test cases, test suites, or both.  It "
"is used to aggregate tests that should be executed together."
msgstr ""
":dfn:`test suite` はテストケースとテストスイートの集まりで、同時に実行しなけ"
"ればならないテストをまとめる場合に使用します。"

#: ../../library/unittest.rst:47
msgid "test runner"
msgstr "テストランナー (test runner)"

#: ../../library/unittest.rst:44
msgid ""
"A :dfn:`test runner` is a component which orchestrates the execution of "
"tests and provides the outcome to the user.  The runner may use a graphical "
"interface, a textual interface, or return a special value to indicate the "
"results of executing the tests."
msgstr ""
":dfn:`test runner` はテストの実行と結果表示を管理するコンポーネントです。ラン"
"ナーはグラフィカルインターフェースでもテキストインターフェースでも良いです"
"し、何も表示せずにテスト結果を示す値を返すだけの場合もあります。"

#: ../../library/unittest.rst:49
msgid ""
"The test case and test fixture concepts are supported through the :class:"
"`TestCase` and :class:`FunctionTestCase` classes; the former should be used "
"when creating new tests, and the latter can be used when integrating "
"existing test code with a :mod:`unittest`\\ -driven framework. When building "
"test fixtures using :class:`TestCase`, the :meth:`~TestCase.setUp` and :meth:"
"`~TestCase.tearDown` methods can be overridden to provide initialization and "
"cleanup for the fixture.  With :class:`FunctionTestCase`, existing functions "
"can be passed to the constructor for these purposes.  When the test is run, "
"the fixture initialization is run first; if it succeeds, the cleanup method "
"is run after the test has been executed, regardless of the outcome of the "
"test.  Each instance of the :class:`TestCase` will only be used to run a "
"single test method, so a new fixture is created for each test."
msgstr ""
":mod:`unittest` では、テストケースとテストフィクスチャーを、 :class:"
"`TestCase` クラスと :class:`FunctionTestCase` クラスで提供しています。 :"
"class:`TestCase` クラスは新規にテストを作成する場合に使用し、 :class:"
"`FunctionTestCase` は既存のテストを :mod:`unittest` に組み込む場合に使用しま"
"す。テストフィクスチャーの初期化処理と終了処理は、 :class:`TestCase` では :"
"meth:`~TestCase.setUp` メソッドと :meth:`~TestCase.tearDown` をオーバーライド"
"して記述し、 :class:`FunctionTestCase` では初期化・終了処理を行う既存の関数を"
"コンストラクタで指定します。テスト実行時、まずテストフィクスチャーの初期設定"
"が最初に実行されます。初期化処理が正常終了した場合、テスト実行後にはテスト結"
"果に関わらず終了処理が実行されます。 :class:`TestCase` の各インスタンスが実行"
"するテストは一つだけで、テストフィクスチャーは各テストごとに新しく作成されま"
"す。"

#: ../../library/unittest.rst:62
msgid ""
"Test suites are implemented by the :class:`TestSuite` class.  This class "
"allows individual tests and test suites to be aggregated; when the suite is "
"executed, all tests added directly to the suite and in \"child\" test suites "
"are run."
msgstr ""
"テストスイートは :class:`TestSuite` クラスで実装されており、複数のテストとテ"
"ストスイートをまとめる事ができます。テストスイートを実行すると、スイートと *"
"子* スイートに追加されている全てのテストが実行されます。"

#: ../../library/unittest.rst:66
msgid ""
"A test runner is an object that provides a single method, :meth:`~TestRunner."
"run`, which accepts a :class:`TestCase` or :class:`TestSuite` object as a "
"parameter, and returns a result object.  The class :class:`TestResult` is "
"provided for use as the result object. :mod:`unittest` provides the :class:"
"`TextTestRunner` as an example test runner which reports test results on the "
"standard error stream by default.  Alternate runners can be implemented for "
"other environments (such as graphical environments) without any need to "
"derive from a specific class."
msgstr ""
"テストランナーは :meth:`~TestRunner.run` メソッドを持つオブジェクトです。この"
"メソッドは引数として :class:`TestCase` か :class:`TestSuite` オブジェクトを受"
"け取り、テスト結果を :class:`TestResult` オブジェクトで戻します。 :mod:"
"`unittest` ではデフォルトでテスト結果を標準エラーに出力する :class:"
"`TextTestRunner` をサンプルとして実装しています。これ以外のランナー (グラ"
"フィックインターフェース用など) を実装する場合でも、特別なクラスから派生させ"
"て実装する必要はありません。"

#: ../../library/unittest.rst:79
msgid "Module :mod:`doctest`"
msgstr ":mod:`doctest` モジュール"

#: ../../library/unittest.rst:79
msgid "Another test-support module with a very different flavor."
msgstr ""
"もうひとつのテストをサポートするモジュールで、本モジュールと趣きが異なってい"
"ます。"

#: ../../library/unittest.rst:84
msgid ""
"`unittest2: A backport of new unittest features for Python 2.4-2.6 <https://"
"pypi.org/project/unittest2>`_"
msgstr ""

#: ../../library/unittest.rst:82
msgid ""
"Many new features were added to unittest in Python 2.7, including test "
"discovery. unittest2 allows you to use these features with earlier versions "
"of Python."
msgstr ""
"Python 2.7 になり多くの機能が unittest に追加されました。特に、テストディスカ"
"バリが追加されました。 unittest2 を導入する事で以前のバージョンの Python でも"
"これらの機能を使えます。"

#: ../../library/unittest.rst:88
msgid ""
"`Simple Smalltalk Testing: With Patterns <https://web.archive.org/"
"web/20150315073817/http://www.xprogramming.com/testfram.htm>`_"
msgstr ""
"`Simple Smalltalk Testing: With Patterns <https://web.archive.org/"
"web/20150315073817/http://www.xprogramming.com/testfram.htm>`_"

#: ../../library/unittest.rst:87
msgid ""
"Kent Beck's original paper on testing frameworks using the pattern shared "
"by :mod:`unittest`."
msgstr ""
"Kent Beck のテスティングフレームワークに関する原論文で、ここに記載されたパ"
"ターンを :mod:`unittest` が使用しています。"

#: ../../library/unittest.rst:92
msgid ""
"`Nose <https://nose.readthedocs.io/>`_ and `pytest <https://docs.pytest.org/"
">`_"
msgstr ""

#: ../../library/unittest.rst:91
msgid ""
"Third-party unittest frameworks with a lighter-weight syntax for writing "
"tests.  For example, ``assert func(10) == 42``."
msgstr ""
"サードパーティのユニットテストフレームワークで軽量な文法でテストを書くことが"
"できます。例えば、``assert func(10) == 42``  のように書きます。"

#: ../../library/unittest.rst:96
msgid ""
"`The Python Testing Tools Taxonomy <https://wiki.python.org/moin/"
"PythonTestingToolsTaxonomy>`_"
msgstr ""
"`The Python Testing Tools Taxonomy <https://wiki.python.org/moin/"
"PythonTestingToolsTaxonomy>`_"

#: ../../library/unittest.rst:95
msgid ""
"An extensive list of Python testing tools including functional testing "
"frameworks and mock object libraries."
msgstr ""
"多くの Python のテストツールが一覧で紹介されています。ファンクショナルテスト"
"のフレームワークやモックライブラリも掲載されています。"

#: ../../library/unittest.rst:99
msgid ""
"`Testing in Python Mailing List <http://lists.idyll.org/listinfo/testing-in-"
"python>`_"
msgstr ""
"`Testing in Python メーリングリスト <http://lists.idyll.org/listinfo/testing-"
"in-python>`_"

#: ../../library/unittest.rst:99
msgid ""
"A special-interest-group for discussion of testing, and testing tools, in "
"Python."
msgstr "Python でテストやテストツールについての議論に特化したグループです。"

#: ../../library/unittest.rst:106
msgid "Basic example"
msgstr "基礎的な例"

#: ../../library/unittest.rst:108
msgid ""
"The :mod:`unittest` module provides a rich set of tools for constructing and "
"running tests.  This section demonstrates that a small subset of the tools "
"suffice to meet the needs of most users."
msgstr ""
":mod:`unittest` モジュールには、テストの開発や実行の為の優れたツールが用意さ"
"れており、この節では、その一部を紹介します。ほとんどのユーザとっては、ここで"
"紹介するツールだけで十分でしょう。"

#: ../../library/unittest.rst:112
msgid "Here is a short script to test three string methods::"
msgstr "以下は、三つの文字列メソッドをテストするスクリプトです::"

#: ../../library/unittest.rst:136
msgid ""
"A testcase is created by subclassing :class:`unittest.TestCase`.  The three "
"individual tests are defined with methods whose names start with the letters "
"``test``.  This naming convention informs the test runner about which "
"methods represent tests."
msgstr ""
"テストケースは、 :class:`unittest.TestCase` のサブクラスとして作成します。メ"
"ソッド名が ``test`` で始まる三つのメソッドがテストです。テストランナーはこの"
"命名規約によってテストを行うメソッドを検索します。"

#: ../../library/unittest.rst:141
msgid ""
"The crux of each test is a call to :meth:`~TestCase.assertEqual` to check "
"for an expected result; :meth:`~TestCase.assertTrue` or :meth:`~TestCase."
"assertFalse` to verify a condition; or :meth:`~TestCase.assertRaises` to "
"verify that a specific exception gets raised.  These methods are used "
"instead of the :keyword:`assert` statement so the test runner can accumulate "
"all test results and produce a report."
msgstr ""
"これらのテスト内では、予定の結果が得られていることを確かめるために :meth:"
"`~TestCase.assertEqual` を、条件のチェックに :meth:`~TestCase.assertTrue` "
"や :meth:`~TestCase.assertFalse` を、例外が発生する事を確認するために :meth:"
"`~TestCase.assertRaises` をそれぞれ呼び出しています。 :keyword:`assert` 文の"
"代わりにこれらのメソッドを使用すると、テストランナーでテスト結果を集計してレ"
"ポートを作成する事ができます。"

#: ../../library/unittest.rst:148
msgid ""
"The :meth:`~TestCase.setUp` and :meth:`~TestCase.tearDown` methods allow you "
"to define instructions that will be executed before and after each test "
"method. They are covered in more detail in the section :ref:`organizing-"
"tests`."
msgstr ""
":meth:`~TestCase.setUp` および :meth:`~TestCase.tearDown` メソッドによって各"
"テストメソッドの前後に実行する命令を実装することが出来ます。\n"
"詳細は :ref:`organizing-tests` を参照してください。"

#: ../../library/unittest.rst:152
msgid ""
"The final block shows a simple way to run the tests. :func:`unittest.main` "
"provides a command-line interface to the test script.  When run from the "
"command line, the above script produces an output that looks like this::"
msgstr ""
"サンプルの末尾が、簡単なテストの実行方法です。 :func:`unittest.main` は、テス"
"トスクリプトのコマンドライン用インターフェースです。コマンドラインから起動さ"
"れた場合、上記のスクリプトから以下のような結果が出力されます::"

#: ../../library/unittest.rst:162
msgid ""
"Instead of :func:`unittest.main`, there are other ways to run the tests with "
"a finer level of control, less terse output, and no requirement to be run "
"from the command line.  For example, the last two lines may be replaced "
"with::"
msgstr ""
"簡略化した結果を出力したり、コマンドライン以外からも起動する等のより細かい制"
"御が必要であれば、 :func:`unittest.main` を使用せずに別の方法でテストを実行し"
"ます。コマンドラインから起動する必要もありません。例えば、上記サンプルの最後"
"の2行は以下のように書くことができます::"

#: ../../library/unittest.rst:169
msgid ""
"Running the revised script from the interpreter or another script produces "
"the following output::"
msgstr ""
"変更後のスクリプトをインタープリタや別のスクリプトから実行すると、以下の出力"
"が得られます::"

#: ../../library/unittest.rst:181
msgid ""
"The above examples show the most commonly used :mod:`unittest` features "
"which are sufficient to meet many everyday testing needs.  The remainder of "
"the documentation explores the full feature set from first principles."
msgstr ""
"以上が :mod:`unittest` モジュールでよく使われる機能で、ほとんどのテストではこ"
"れだけでも十分です。基礎となる概念や全ての機能については以降の章を参照してく"
"ださい。"

#: ../../library/unittest.rst:189
msgid "Command-Line Interface"
msgstr "コマンドラインインターフェイス"

#: ../../library/unittest.rst:191
msgid ""
"The unittest module can be used from the command line to run tests from "
"modules, classes or even individual test methods::"
msgstr ""
"ユニットテストモジュールはコマンドラインから使うこともできます。モジュール、"
"クラス、もしくは、特定のテストメソッドで定義されたテストを実行します::"

#: ../../library/unittest.rst:198
msgid ""
"You can pass in a list with any combination of module names, and fully "
"qualified class or method names."
msgstr ""
"引数として渡す事ができるのは、テストが定義されたモジュール名、もしくはクラ"
"ス、メソッドのフルパス名です。"

#: ../../library/unittest.rst:201
msgid ""
"You can run tests with more detail (higher verbosity) by passing in the -v "
"flag::"
msgstr "テスト実行時に (より冗長な) 詳細を表示するには -v フラグを渡します::"

#: ../../library/unittest.rst:205
msgid "For a list of all the command-line options::"
msgstr "コマンドラインプションの一覧を表示するには以下のコマンドを実行します::"

#: ../../library/unittest.rst:209
msgid ""
"In earlier versions it was only possible to run individual test methods and "
"not modules or classes."
msgstr ""
"以前のバージョンでは、個々のテストメソッドしか実行することができず、モジュー"
"ル単位やクラス単位で実行することは不可能でした。"

#: ../../library/unittest.rst:215
msgid "Command-line options"
msgstr "コマンドラインオプション"

#: ../../library/unittest.rst:217
msgid ":program:`unittest` supports these command-line options:"
msgstr ":program:`unittest` には以下のコマンドラインオプションがあります:"

#: ../../library/unittest.rst:223
msgid ""
"The standard output and standard error streams are buffered during the test "
"run. Output during a passing test is discarded. Output is echoed normally on "
"test fail or error and is added to the failure messages."
msgstr ""
"標準出力と標準エラーのストリームをテスト実行の間バッファリングします。テスト"
"が成功している間は結果の出力は破棄されます。テストが失敗、もしくはエラーが発"
"生した場合には、結果にエラーメッセージが追加されたうえで通常通り出力されま"
"す。"

#: ../../library/unittest.rst:229
msgid ""
":kbd:`Control-C` during the test run waits for the current test to end and "
"then reports all the results so far. A second :kbd:`Control-C` raises the "
"normal :exc:`KeyboardInterrupt` exception."
msgstr ""
":kbd:`Control-C` を実行中のテストが終了するまで遅延させ、そこまでの結果を出力"
"します。二回目の :kbd:`Control-C` は、通常通り :exc:`KeyboardInterrupt` の例"
"外を発生させます。"

#: ../../library/unittest.rst:233
msgid ""
"See `Signal Handling`_ for the functions that provide this functionality."
msgstr ""
"この機能の仕組みについては、`シグナルハンドリング`_ を参照してください。"

#: ../../library/unittest.rst:237
msgid "Stop the test run on the first error or failure."
msgstr "初回のエラーもしくは失敗の時にテストを停止します。"

#: ../../library/unittest.rst:239
msgid "The command-line options ``-b``, ``-c`` and ``-f`` were added."
msgstr "コマンドラインオプションの ``-b``、``-c``、``-f`` が追加されました。"

#: ../../library/unittest.rst:242
msgid ""
"The command line can also be used for test discovery, for running all of the "
"tests in a project or just a subset."
msgstr ""
"このコマンドラインは、プロジェクト内の全テストを実行したり、サブセットのみを"
"実行したりといった、テストディスカバリを使用することもできます。"

#: ../../library/unittest.rst:249
msgid "Test Discovery"
msgstr "テストディスカバリ"

#: ../../library/unittest.rst:253
msgid ""
"Unittest supports simple test discovery. In order to be compatible with test "
"discovery, all of the test files must be :ref:`modules <tut-modules>` or :"
"ref:`packages <tut-packages>` importable from the top-level directory of the "
"project (this means that their filenames must be valid :ref:`identifiers "
"<identifiers>`)."
msgstr ""
"unittest はシンプルなテストディスカバリをサポートします。このテストディスカバ"
"リに対応するために、テストが定義された全ファイルは :ref:`modules <tut-"
"modules>` もしくは :ref:`packages <tut-packages>` としてプロジェクトの最上位"
"のディスカバリでインポート可能である必要があります (つまり、これらのファイル"
"は :ref:`identifiers <identifiers>` として有効である必要があるということで"
"す)。"

#: ../../library/unittest.rst:259
msgid ""
"Test discovery is implemented in :meth:`TestLoader.discover`, but can also "
"be used from the command line. The basic command-line usage is::"
msgstr ""
"テストディスカバリは :meth:`TestLoader.discover` で実装されています。しかし、"
"コマンドラインからも使う事ができます。コマンドラインからは以下のように使用し"
"ます::"

#: ../../library/unittest.rst:265
msgid "The ``discover`` sub-command has the following options:"
msgstr "``discover`` サブコマンドには以下のオプションがあります:"

#: ../../library/unittest.rst:271
msgid "Verbose output"
msgstr "詳細な出力"

#: ../../library/unittest.rst:275
msgid "Directory to start discovery (``.`` default)"
msgstr "ディスカバリを開始するディレクトリ (デフォルトは ``.``)"

#: ../../library/unittest.rst:279
msgid "Pattern to match test files (``test*.py`` default)"
msgstr "テストファイル名を識別するパターン (デフォルトは ``test*.py``)"

#: ../../library/unittest.rst:283
msgid "Top level directory of project (defaults to start directory)"
msgstr ""
"プロジェクトの最上位のディスカバリのディレクトリ (デフォルトは開始のディレク"
"トリ)"

#: ../../library/unittest.rst:285
msgid ""
"The :option:`-s`, :option:`-p`, and :option:`-t` options can be passed in as "
"positional arguments in that order. The following two command lines are "
"equivalent::"
msgstr ""
":option:`-s` 、 :option:`-p` 、および :option:`-t` の各オプションは、この順番"
"で指定すれば位置固定の引数として指定する事ができます。以下の二つのコマンドは"
"同じ結果になります::"

#: ../../library/unittest.rst:292
msgid ""
"As well as being a path it is possible to pass a package name, for example "
"``myproject.subpackage.test``, as the start directory. The package name you "
"supply will then be imported and its location on the filesystem will be used "
"as the start directory."
msgstr ""
"パスを渡すのはもちろんのこと、例えば ``myproject.subpackage.test`` のように、"
"パッケージ名をスタートディレクトリとして渡すことができます。指定したパッケー"
"ジがインポートされ、そのパッケージのファイルシステム上のパスがスタートディレ"
"クトリになります。"

#: ../../library/unittest.rst:299
msgid ""
"Test discovery loads tests by importing them. Once test discovery has found "
"all the test files from the start directory you specify it turns the paths "
"into package names to import. For example :file:`foo/bar/baz.py` will be "
"imported as ``foo.bar.baz``."
msgstr ""
"テストディスカバリはテストをインポートすることで読み込みます。テストディスカ"
"バリは一度、指定した開始ディレクトリから全テストファイルを探索し、そのファイ"
"ルのパスをパッケージ名に変換してインポートします。例えば、 :file:`foo/bar/"
"baz.py` は ``foo.bar.baz`` としてインポートされます。"

#: ../../library/unittest.rst:304
msgid ""
"If you have a package installed globally and attempt test discovery on a "
"different copy of the package then the import *could* happen from the wrong "
"place. If this happens test discovery will warn you and exit."
msgstr ""
"もしパッケージをグローバルにインストールしていて、インストールしたのとは異な"
"るパッケージのコピーをディスカバリしようとすると、間違った場所からインポート"
"して *しまうかもしれません*。このような状態になるとテストディスカバリは警告を"
"出し、停止します。"

#: ../../library/unittest.rst:308
msgid ""
"If you supply the start directory as a package name rather than a path to a "
"directory then discover assumes that whichever location it imports from is "
"the location you intended, so you will not get the warning."
msgstr ""
"スタートディレクトリとしてディレクトリのパスではなくパッケージ名を指定した場"
"合は、いずれかの場所からインポートされます。この場合は警告が表示されません。"

#: ../../library/unittest.rst:313
msgid ""
"Test modules and packages can customize test loading and discovery by "
"through the `load_tests protocol`_."
msgstr ""
"テストモジュールとテストパッケージは、テストのロードとディスカバリをカスタマ"
"イズすることができます。そのために `load_tests プロトコル`_ を使用します。"

#: ../../library/unittest.rst:320
msgid "Organizing test code"
msgstr "テストの構成"

#: ../../library/unittest.rst:322
msgid ""
"The basic building blocks of unit testing are :dfn:`test cases` --- single "
"scenarios that must be set up and checked for correctness.  In :mod:"
"`unittest`, test cases are represented by instances of :mod:`unittest`'s :"
"class:`TestCase` class. To make your own test cases you must write "
"subclasses of :class:`TestCase`, or use :class:`FunctionTestCase`."
msgstr ""
"ユニットテストの基礎となる構築要素は、 :dfn:`test case` --- セットアップを行"
"い、正しさのチェックを行う、独立したシナリオ --- です。 :mod:`unittest` で"
"は、テストケースは :mod:`unittest` モジュールの :class:`TestCase` クラスのイ"
"ンスタンスで表現します。テストケースを作成するには :class:`TestCase` のサブク"
"ラスを記述するか、または :class:`FunctionTestCase` を使用します。"

#: ../../library/unittest.rst:328
msgid ""
"An instance of a :class:`TestCase`\\ -derived class is an object that can "
"completely run a single test method, together with optional set-up and tidy-"
"up code."
msgstr ""
":class:`TestCase` から派生したクラスのインスタンスは、このオブジェクトだけで"
"単独のテストメソッドをお膳立て (set-up) と後片付け (tidy-up / clean-up) を"
"伴って実行します。"

#: ../../library/unittest.rst:332
msgid ""
"The testing code of a :class:`TestCase` instance should be entirely self "
"contained, such that it can be run either in isolation or in arbitrary "
"combination with any number of other test cases."
msgstr ""
":class:`TestCase` インスタンスは外部から完全に独立し、単独で実行する事も、他"
"の任意のテストと一緒に実行する事もできなければなりません。"

#: ../../library/unittest.rst:336
msgid ""
"The simplest :class:`TestCase` subclass will simply override the :meth:"
"`~TestCase.runTest` method in order to perform specific testing code::"
msgstr ""
"以下のように、 :class:`TestCase` のサブクラスは :meth:`~TestCase.runTest` を"
"オーバライドし、必要なテスト処理を記述するだけで簡単に書くことができます::"

#: ../../library/unittest.rst:346
msgid ""
"Note that in order to test something, we use one of the :meth:`assert\\*` "
"methods provided by the :class:`TestCase` base class.  If the test fails, an "
"exception will be raised, and :mod:`unittest` will identify the test case as "
"a :dfn:`failure`.  Any other exceptions will be treated as :dfn:`errors`. "
"This helps you identify where the problem is: :dfn:`failures` are caused by "
"incorrect results - a 5 where you expected a 6. :dfn:`Errors` are caused by "
"incorrect code - e.g., a :exc:`TypeError` caused by an incorrect function "
"call."
msgstr ""
"何らかのテストを行う場合、ベースクラス :class:`TestCase` の :meth:"
"`assert\\*` 系メソッドのどれかを使用してください。テストが失敗すると例外が送"
"出され、 :mod:`unittest` はテスト結果を :dfn:`failure` とします。その他の例外"
"は :dfn:`error` となります。これによりどこに問題があるかが判ります。 :dfn:"
"`failure` は間違った結果 (6 になるはずが 5 だった) で発生します。 :dfn:"
"`error` は間違ったコード (たとえば間違った関数呼び出しによる :exc:"
"`TypeError`) で発生します。"

#: ../../library/unittest.rst:354
msgid ""
"The way to run a test case will be described later.  For now, note that to "
"construct an instance of such a test case, we call its constructor without "
"arguments::"
msgstr ""
"テストの実行方法については後述とし、まずはテストケースインスタンスの作成方法"
"を示します。テストケースインスタンスは、以下のように引数なしでコンストラクタ"
"を呼び出して作成します。::"

#: ../../library/unittest.rst:360
msgid ""
"Now, such test cases can be numerous, and their set-up can be repetitive.  "
"In the above case, constructing a :class:`Widget` in each of 100 Widget test "
"case subclasses would mean unsightly duplication."
msgstr ""
"さて、そのようなテストケースが夥しい数になってくると、セットアップ処理は繰り"
"返しになりがちです。例えば上記のような Widget のテストが 100 種類も必要な場"
"合、それぞれのサブクラスで :class:`Widget` オブジェクトを生成する処理を記述す"
"るのは好ましくありません。"

#: ../../library/unittest.rst:364
msgid ""
"Luckily, we can factor out such set-up code by implementing a method called :"
"meth:`~TestCase.setUp`, which the testing framework will automatically call "
"for us when we run the test::"
msgstr ""
"ラッキーですね、私たちは初期化処理を :meth:`~TestCase.setUp` メソッドに追い出"
"すことが出来ます。これでテスト実行時にテストフレームワークが、私たちのために"
"それを自動的に実行してくれます::"

#: ../../library/unittest.rst:385
msgid ""
"If the :meth:`~TestCase.setUp` method raises an exception while the test is "
"running, the framework will consider the test to have suffered an error, and "
"the :meth:`~TestCase.runTest` method will not be executed."
msgstr ""
"テスト中に :meth:`~TestCase.setUp` メソッドで例外が発生した場合、テストフレー"
"ムワークはテストを実行することができないとみなし、 :meth:`~TestCase.runTest` "
"を実行しません。"

#: ../../library/unittest.rst:389
msgid ""
"Similarly, we can provide a :meth:`~TestCase.tearDown` method that tidies up "
"after the :meth:`~TestCase.runTest` method has been run::"
msgstr ""
"同様に、終了処理を :meth:`~TestCase.tearDown` メソッドに記述すると、 :meth:"
"`~TestCase.runTest` メソッド終了後に実行されます::"

#: ../../library/unittest.rst:402
msgid ""
"If :meth:`~TestCase.setUp` succeeded, the :meth:`~TestCase.tearDown` method "
"will be run whether :meth:`~TestCase.runTest` succeeded or not."
msgstr ""
":meth:`~TestCase.setUp` が正常終了した場合、 :meth:`~TestCase.runTest` が成功"
"したかどうかに関わらず :meth:`~TestCase.tearDown` が実行されます。"

#: ../../library/unittest.rst:405
msgid ""
"Such a working environment for the testing code is called a :dfn:`fixture`."
msgstr "このような、テストを実行する環境を :dfn:`fixture` と呼びます。"

#: ../../library/unittest.rst:407
msgid ""
"Often, many small test cases will use the same fixture.  In this case, we "
"would end up subclassing :class:`SimpleWidgetTestCase` into many small one-"
"method classes such as :class:`DefaultWidgetSizeTestCase`.  This is time-"
"consuming and discouraging, so in the same vein as JUnit, :mod:`unittest` "
"provides a simpler mechanism::"
msgstr ""
"多数の小さなテストケース群が同じフィクスチャを使うことは良くあります。今の場"
"合だと私たちは結局 :class:`SimpleWidgetTestCase` を派生して、 :class:"
"`DefaultWidgetSizeTestCase` のような小さくて一つだけメソッドを持つクラスをた"
"くさん作る必要があるところでした。これは退屈で時間のかかるものです。ですから "
"JUnit と同じようなやり方で、 :mod:`unittest` ではより簡単なメカニズムを用意し"
"ています::"

#: ../../library/unittest.rst:432
msgid ""
"Here we have not provided a :meth:`~TestCase.runTest` method, but have "
"instead provided two different test methods.  Class instances will now each "
"run one of the :meth:`test_\\*` methods, with ``self.widget`` created and "
"destroyed separately for each instance.  When creating an instance we must "
"specify the test method it is to run.  We do this by passing the method name "
"in the constructor::"
msgstr ""
"この例では :meth:`~TestCase.runTest` がありませんが、二つのテストメソッドを定"
"義しています。このクラスのインスタンスは :meth:`test_\\*` メソッドのどちらか"
"一方の実行と、 ``self.widget`` の生成・解放を行います。この場合、テストケース"
"インスタンス生成時に、コンストラクタの引数として実行するメソッド名を指定しま"
"す::"

#: ../../library/unittest.rst:442
msgid ""
"Test case instances are grouped together according to the features they "
"test. :mod:`unittest` provides a mechanism for this: the :dfn:`test suite`, "
"represented by :mod:`unittest`'s :class:`TestSuite` class::"
msgstr ""
":mod:`unittest` では :class:`test suite` によってテストケースインスタンスをテ"
"スト対象の機能によってグループ化することができます。 :dfn:`test suite` は、 :"
"mod:`unittest` の :class:`TestSuite` クラスで作成します。::"

#: ../../library/unittest.rst:450
msgid ""
"For the ease of running tests, as we will see later, it is a good idea to "
"provide in each test module a callable object that returns a pre-built test "
"suite::"
msgstr ""
"各テストモジュールで、テストケースを組み込んだテストスイートオブジェクトを作"
"成する呼び出し可能オブジェクトを用意しておくと、テストの実行や参照が容易にな"
"ります::"

#: ../../library/unittest.rst:460
msgid "or even::"
msgstr "または::"

#: ../../library/unittest.rst:467
msgid ""
"Since it is a common pattern to create a :class:`TestCase` subclass with "
"many similarly named test functions, :mod:`unittest` provides a :class:"
"`TestLoader` class that can be used to automate the process of creating a "
"test suite and populating it with individual tests. For example, ::"
msgstr ""
"良く似た名前のテスト関数をたくさん定義した :class:`TestCase` のサブクラスを作"
"るのはよくあるパターンなので、 :mod:`unittest` ではテストスイートの作成と個々"
"のテストをそれを追加するのを自動化するのに使える、 :class:`TestLoader` を用意"
"しています。たとえば、::"

#: ../../library/unittest.rst:474
msgid ""
"will create a test suite that will run ``WidgetTestCase."
"test_default_size()`` and ``WidgetTestCase.test_resize``. :class:"
"`TestLoader` uses the ``'test'`` method name prefix to identify test methods "
"automatically."
msgstr ""
"は ``WidgetTestCase.test_default_size()`` と ``WidgetTestCase.test_resize`` "
"を走らせるテストスイートを作成します。 :class:`TestLoader` は自動的にテストメ"
"ソッドを識別するのに ``'test'`` というメソッド名の接頭辞を使います。"

#: ../../library/unittest.rst:478
msgid ""
"Note that the order in which the various test cases will be run is "
"determined by sorting the test function names with respect to the built-in "
"ordering for strings."
msgstr ""
"テストケースはテスト関数名を組み込みの文字列順に並べ替えた順序で実行されるこ"
"とに注意してください。"

#: ../../library/unittest.rst:482
msgid ""
"Often it is desirable to group suites of test cases together, so as to run "
"tests for the whole system at once.  This is easy, since :class:`TestSuite` "
"instances can be added to a :class:`TestSuite` just as :class:`TestCase` "
"instances can be added to a :class:`TestSuite`::"
msgstr ""
"システム全体のテストを一度に行う場合など、テストスイートをさらにグループ化し"
"たい場合がよくあります。これは簡単です。 :class:`TestSuite` インスタンスに"
"は :class:`TestCase`  インスタンスだけでなく :class:`TestSuite` も追加出来る"
"からです::"

#: ../../library/unittest.rst:491
msgid ""
"You can place the definitions of test cases and test suites in the same "
"modules as the code they are to test (such as :file:`widget.py`), but there "
"are several advantages to placing the test code in a separate module, such "
"as :file:`test_widget.py`:"
msgstr ""
"テストケースやテストスイートは (:file:`widget.py` のような) テスト対象のモ"
"ジュール内にも記述できますが、テストは (:file:`test_widget.py` のような) 独立"
"したモジュールに置いた方が以下のような点で有利です:"

#: ../../library/unittest.rst:496
msgid "The test module can be run standalone from the command line."
msgstr "テストモジュールだけをコマンドラインから実行することができる。"

#: ../../library/unittest.rst:498
msgid "The test code can more easily be separated from shipped code."
msgstr "テストコードと出荷するコードを分離する事ができる。"

#: ../../library/unittest.rst:500
msgid ""
"There is less temptation to change test code to fit the code it tests "
"without a good reason."
msgstr ""
"テストコードを、テスト対象のコードに合わせて修正する誘惑に駆られにくい。"

#: ../../library/unittest.rst:503
msgid ""
"Test code should be modified much less frequently than the code it tests."
msgstr "テストコードは、テスト対象コードほど頻繁に更新されない。"

#: ../../library/unittest.rst:505
msgid "Tested code can be refactored more easily."
msgstr "テストコードをより簡単にリファクタリングすることができる。"

#: ../../library/unittest.rst:507
msgid ""
"Tests for modules written in C must be in separate modules anyway, so why "
"not be consistent?"
msgstr ""
"Cで書いたモジュールのテストはどっちにしろ独立したモジュールとなるのだから、同"
"様にしない理由もない"

#: ../../library/unittest.rst:510
msgid ""
"If the testing strategy changes, there is no need to change the source code."
msgstr "テスト戦略を変更した場合でも、ソースコードを変更する必要がない。"

#: ../../library/unittest.rst:516
msgid "Re-using old test code"
msgstr "既存テストコードの再利用"

#: ../../library/unittest.rst:518
msgid ""
"Some users will find that they have existing test code that they would like "
"to run from :mod:`unittest`, without converting every old test function to "
"a :class:`TestCase` subclass."
msgstr ""
"既存のテストコードが有るとき、このテストを :mod:`unittest` で実行しようとする"
"ために古いテスト関数をいちいち :class:`TestCase` クラスのサブクラスに変換する"
"のは大変です。"

#: ../../library/unittest.rst:522
msgid ""
"For this reason, :mod:`unittest` provides a :class:`FunctionTestCase` class. "
"This subclass of :class:`TestCase` can be used to wrap an existing test "
"function.  Set-up and tear-down functions can also be provided."
msgstr ""
"このような場合は、 :mod:`unittest` では :class:`TestCase` のサブクラスであ"
"る :class:`FunctionTestCase` クラスを使い、既存のテスト関数をラップします。初"
"期設定と終了処理も行なえます。"

#: ../../library/unittest.rst:526
msgid "Given the following test function::"
msgstr "以下のテストコードがあった場合::"

#: ../../library/unittest.rst:533
msgid "one can create an equivalent test case instance as follows::"
msgstr "等価なテストケースインスタンスは次のように作成できます::"

#: ../../library/unittest.rst:537
msgid ""
"If there are additional set-up and tear-down methods that should be called "
"as part of the test case's operation, they can also be provided like so::"
msgstr ""
"テストケースの操作の部品として呼び出されるべき追加的なお膳立てと後片付けメ"
"ソッドを手持ちなのであれば、このようにして提供出来ます::"

#: ../../library/unittest.rst:544
msgid ""
"To make migrating existing test suites easier, :mod:`unittest` supports "
"tests raising :exc:`AssertionError` to indicate test failure. However, it is "
"recommended that you use the explicit :meth:`TestCase.fail\\*` and :meth:"
"`TestCase.assert\\*` methods instead, as future versions of :mod:`unittest` "
"may treat :exc:`AssertionError` differently."
msgstr ""
"既存のテストスイートからの移行を容易にするため、 :mod:`unittest` は :exc:"
"`AssertionError` の送出でテストの失敗を示すような書き方もサポートしています。"
"しかしながら、 :meth:`TestCase.fail\\*` および :meth:`TestCase.assert\\*` メ"
"ソッドを使って明確に書くことが推奨されています。 :mod:`unittest` の将来のバー"
"ジョンでは、 :exc:`AssertionError` は別の目的に使用される可能性があります。"

#: ../../library/unittest.rst:552
msgid ""
"Even though :class:`FunctionTestCase` can be used to quickly convert an "
"existing test base over to a :mod:`unittest`\\ -based system, this approach "
"is not recommended.  Taking the time to set up proper :class:`TestCase` "
"subclasses will make future test refactorings infinitely easier."
msgstr ""
":class:`FunctionTestCase` を使って既存のテストを :mod:`unittest` ベースのテス"
"ト体系に変換することができますが、この方法は推奨されません。時間を掛けて :"
"class:`TestCase` のサブクラスに書き直した方が将来的なテストのリファクタリング"
"が限りなく易しくなります。"

#: ../../library/unittest.rst:557
msgid ""
"In some cases, the existing tests may have been written using the :mod:"
"`doctest` module.  If so, :mod:`doctest` provides a :class:`DocTestSuite` "
"class that can automatically build :class:`unittest.TestSuite` instances "
"from the existing :mod:`doctest`\\ -based tests."
msgstr ""
"既存のテストが :mod:`doctest` を使って書かれている場合もあるでしょう。その場"
"合、 :mod:`doctest` は :class:`DocTestSuite` クラスを提供します。このクラス"
"は、既存の :mod:`doctest`\\ ベースのテストから、自動的に :class:`unittest."
"TestSuite` のインスタンスを作成します。"

#: ../../library/unittest.rst:566
msgid "Skipping tests and expected failures"
msgstr "テストのスキップと意図的な失敗"

#: ../../library/unittest.rst:570
msgid ""
"Unittest supports skipping individual test methods and even whole classes of "
"tests.  In addition, it supports marking a test as an \"expected failure,\" "
"a test that is broken and will fail, but shouldn't be counted as a failure "
"on a :class:`TestResult`."
msgstr ""
"unittest は特定のテストメソッドやテストクラス全体をスキップする仕組みを備えて"
"います。さらに、この機能はテスト結果を「意図的な失敗 (expected failure)」とす"
"ることができ、テストが失敗しても :class:`TestResult` の失敗数にはカウントされ"
"なくなります。"

#: ../../library/unittest.rst:575
msgid ""
"Skipping a test is simply a matter of using the :func:`skip` :term:"
"`decorator` or one of its conditional variants."
msgstr ""
"テストをスキップするには、単に :func:`skip` デコレータ(:term:`decorator`) を"
"使用するか、条件を表現するための :func:`skip` に類するデコレータを使用しま"
"す。"

#: ../../library/unittest.rst:578
msgid "Basic skipping looks like this::"
msgstr "スキップは以下のようになります::"

#: ../../library/unittest.rst:597
msgid "This is the output of running the example above in verbose mode::"
msgstr "このサンプルを詳細モードで実行すると以下のように出力されます::"

#: ../../library/unittest.rst:608
msgid "Classes can be skipped just like methods::"
msgstr "テストクラスは以下のようにメソッドをスキップすることができます::"

#: ../../library/unittest.rst:615
msgid ""
":meth:`TestCase.setUp` can also skip the test.  This is useful when a "
"resource that needs to be set up is not available."
msgstr ""
":meth:`TestCase.setUp` もスキップすることができます。この機能はセットアップの"
"対象のリソースが使用不可能な状態の時に便利です。"

#: ../../library/unittest.rst:618
msgid "Expected failures use the :func:`expectedFailure` decorator. ::"
msgstr ""
"意図的な失敗の機能を使用するには、 :func:`expectedFailure` デコレータを使いま"
"す。 ::"

#: ../../library/unittest.rst:625
msgid ""
"It's easy to roll your own skipping decorators by making a decorator that "
"calls :func:`skip` on the test when it wants it to be skipped.  This "
"decorator skips the test unless the passed object has a certain attribute::"
msgstr ""
"独自のスキップ用のデコレータも簡単に作成することができます。 そのためには、独"
"自のデコレータのスキップしたい時点で :func:`skip` を呼び出します。 以下のデコ"
"レータはオブジェクトに指定した属性が無い場合にテストをスキップします::"

#: ../../library/unittest.rst:634
msgid "The following decorators implement test skipping and expected failures:"
msgstr "以下のデコレータはテストのスキップと意図的な失敗を実装しています:"

#: ../../library/unittest.rst:638
msgid ""
"Unconditionally skip the decorated test.  *reason* should describe why the "
"test is being skipped."
msgstr ""
"デコレートしたテストを無条件でスキップします。*reason* にはテストをスキップし"
"た理由を記載します。"

#: ../../library/unittest.rst:643
msgid "Skip the decorated test if *condition* is true."
msgstr "*condition* が真の場合に、デコレートしたテストをスキップします。"

#: ../../library/unittest.rst:647
msgid "Skip the decorated test unless *condition* is true."
msgstr "*condition* が偽の場合に、デコレートしたテストをスキップします。"

#: ../../library/unittest.rst:651
msgid ""
"Mark the test as an expected failure.  If the test fails when run, the test "
"is not counted as a failure."
msgstr ""
"テストの失敗が意図的であることを表します。該当のテストが失敗しても、そのテス"
"トは失敗にカウントされません。"

#: ../../library/unittest.rst:656
msgid "This exception is raised to skip a test."
msgstr "この例外はテストをスキップするために送出されます。"

#: ../../library/unittest.rst:658
msgid ""
"Usually you can use :meth:`TestCase.skipTest` or one of the skipping "
"decorators instead of raising this directly."
msgstr ""
"ふつうはこれを直接送出する代わりに :meth:`TestCase.skipTest` やスキッピングデ"
"コレータの一つを使用出来ます。"

#: ../../library/unittest.rst:661
msgid ""
"Skipped tests will not have :meth:`setUp` or :meth:`tearDown` run around "
"them. Skipped classes will not have :meth:`setUpClass` or :meth:"
"`tearDownClass` run."
msgstr ""
"スキップしたテストの前後では、 :meth:`setUp` および :meth:`tearDown` は実行さ"
"れません。同様に、スキップしたテストクラスの前後では、 :meth:`setUpClass` お"
"よび :meth:`tearDownClass` は実行されません。"

#: ../../library/unittest.rst:668
msgid "Classes and functions"
msgstr "クラスと関数"

#: ../../library/unittest.rst:670
msgid "This section describes in depth the API of :mod:`unittest`."
msgstr "この節では、 :mod:`unittest` モジュールのAPIの詳細について説明します。"

#: ../../library/unittest.rst:676
msgid "Test cases"
msgstr "テストクラス"

#: ../../library/unittest.rst:680
msgid ""
"Instances of the :class:`TestCase` class represent the smallest testable "
"units in the :mod:`unittest` universe.  This class is intended to be used as "
"a base class, with specific tests being implemented by concrete subclasses.  "
"This class implements the interface needed by the test runner to allow it to "
"drive the test, and methods that the test code can use to check for and "
"report various kinds of failure."
msgstr ""
":class:`TestCase` クラスのインスタンスは、 :mod:`unittest` の世界におけるテス"
"トの最小実行単位を示します。このクラスをベースクラスとして使用し、必要なテス"
"トを具象サブクラスに実装します。 :class:`TestCase` クラスでは、テストランナー"
"がテストを実行するためのインターフェースと、各種のチェックやテスト失敗をレ"
"ポートするためのメソッドを実装しています。"

#: ../../library/unittest.rst:687
msgid ""
"Each instance of :class:`TestCase` will run a single test method: the method "
"named *methodName*.  If you remember, we had an earlier example that went "
"something like this::"
msgstr ""
"それぞれの :class:`TestCase` クラスのインスタンスはただ一つのテストメソッ"
"ド、 *methodName* という名のメソッドを実行します。既に次のような例を扱ったこ"
"とを憶えているでしょうか。::"

#: ../../library/unittest.rst:697
msgid ""
"Here, we create two instances of :class:`WidgetTestCase`, each of which runs "
"a single test."
msgstr ""
"ここでは、それぞれが一つずつのテストを実行するような :class:`WidgetTestCase` "
"の二つのインスタンスを作成しています。"

#: ../../library/unittest.rst:700
msgid "*methodName* defaults to :meth:`runTest`."
msgstr "*methodName* のデフォルトは :meth:`runTest` です。"

#: ../../library/unittest.rst:702
msgid ""
":class:`TestCase` instances provide three groups of methods: one group used "
"to run the test, another used by the test implementation to check conditions "
"and report failures, and some inquiry methods allowing information about the "
"test itself to be gathered."
msgstr ""
":class:`TestCase` のインスタンスのメソッドは3種類のグループに分けられます。 1"
"つ目のグループのメソッドはテストの実行で使用します。2つ目のグループのメソッド"
"は条件の確認および失敗のレポートといったテストの実装で使用されます。3つ目のグ"
"ループである問い合わせ用のメソッドはテスト自身の情報を収集するために使用しま"
"す。"

#: ../../library/unittest.rst:707
msgid "Methods in the first group (running the test) are:"
msgstr "はじめのグループ (テスト実行) に含まれるメソッドは以下の通りです:"

#: ../../library/unittest.rst:712
msgid ""
"Method called to prepare the test fixture.  This is called immediately "
"before calling the test method; other than :exc:`AssertionError` or :exc:"
"`SkipTest`, any exception raised by this method will be considered an error "
"rather than a test failure. The default implementation does nothing."
msgstr ""
"テストフィクスチャの準備のために呼び出されるメソッドです。テストメソッドの直"
"前に呼び出されます。このメソッドを実行中に :exc:`AssertionError` や :exc:"
"`SkipTest` 以外の例外が発生した場合、テストの失敗ではなくエラーとされます。デ"
"フォルトの実装では何も行いません。"

#: ../../library/unittest.rst:720
msgid ""
"Method called immediately after the test method has been called and the "
"result recorded.  This is called even if the test method raised an "
"exception, so the implementation in subclasses may need to be particularly "
"careful about checking internal state.  Any exception, other than :exc:"
"`AssertionError` or :exc:`SkipTest`, raised by this method will be "
"considered an additional error rather than a test failure (thus increasing "
"the total number of reported errors). This method will only be called if "
"the :meth:`setUp` succeeds, regardless of the outcome of the test method. "
"The default implementation does nothing."
msgstr ""
"テストメソッドが実行され、結果が記録された直後に呼び出されるメソッドです。\n"
"このメソッドはテストメソッドで例外が投げられても呼び出されます。\n"
"そのため、サブクラスでこのメソッドを実装する場合は、内部状態を確認することが"
"必要になるでしょう。\n"
"このメソッドで :exc:`AssertionError` や :exc:`SkipTest` 以外の例外が発生した"
"場合、テストの失敗とは別のエラーとみなされます (従って報告されるエラーの総数"
"は増えます)。\n"
"このメソッドは、テストの結果に関わらず :meth:`setUp` が成功した場合にのみ呼ば"
"れます。\n"
"デフォルトの実装では何も行いません。"

#: ../../library/unittest.rst:733
msgid ""
"A class method called before tests in an individual class are run. "
"``setUpClass`` is called with the class as the only argument and must be "
"decorated as a :func:`classmethod`::"
msgstr ""
"個別のクラス内のテストが実行される前に呼び出されるクラスメソッドです。 "
"``setUpClass`` はクラスを唯一の引数として取り、 :func:`classmethod` でデコ"
"レートされていなければなりません::"

#: ../../library/unittest.rst:741 ../../library/unittest.rst:756
msgid "See `Class and Module Fixtures`_ for more details."
msgstr "詳しくは `クラスとモジュールのフィクスチャ`_ を参照してください。"

#: ../../library/unittest.rst:748
msgid ""
"A class method called after tests in an individual class have run. "
"``tearDownClass`` is called with the class as the only argument and must be "
"decorated as a :meth:`classmethod`::"
msgstr ""
"クラス内に定義されたテストが実行された後に呼び出されるクラスメソッドです。 "
"``tearDownClass`` はクラスを唯一の引数として取り、 :func:`classmethod` でデコ"
"レートされている必要があります::"

#: ../../library/unittest.rst:763
msgid ""
"Run the test, collecting the result into the test result object passed as "
"*result*.  If *result* is omitted or ``None``, a temporary result object is "
"created (by calling the :meth:`defaultTestResult` method) and used. The "
"result object is not returned to :meth:`run`'s caller."
msgstr ""
"テストを実行し、テスト結果を *result* に指定されたテスト結果オブジェクトに渡"
"します。 *result* 省略されるか :const:`None` か渡された場合、一時的な結果オブ"
"ジェクトを ( :meth:`defaultTestCase` メソッドを呼んで) 生成して、それを使用し"
"ます。結果オブジェクトは :meth:`run` の呼び出し元には返されません。"

#: ../../library/unittest.rst:768
msgid ""
"The same effect may be had by simply calling the :class:`TestCase` instance."
msgstr ""
"このメソッドは、単に :class:`TestCase` インスタンスを呼び出した場合と同様に振"
"る舞います。"

#: ../../library/unittest.rst:774
msgid ""
"Calling this during a test method or :meth:`setUp` skips the current test.  "
"See :ref:`unittest-skipping` for more information."
msgstr ""
"現在のテストでテストクラスもしくは :meth:`setUp` をスキップする場合に呼ばれま"
"す。詳細については、 :ref:`unittest-skipping` を参照してください。"

#: ../../library/unittest.rst:782
msgid ""
"Run the test without collecting the result.  This allows exceptions raised "
"by the test to be propagated to the caller, and can be used to support "
"running tests under a debugger."
msgstr ""
"テスト結果を収集せずにテストを実行します。例外が呼び出し元に通知されます。ま"
"た、テストをデバッガで実行することができます。"

#: ../../library/unittest.rst:788
msgid ""
"The :class:`TestCase` class provides several assert methods to check for and "
"report failures.  The following table lists the most commonly used methods "
"(see the tables below for more assert methods):"
msgstr ""
":class:`TestCase` クラスは失敗の検査と報告を行う多くのメソッドを提供していま"
"す。\n"
"以下の表は最も一般的に使われるメソッドを列挙しています (より多くのアサートメ"
"ソッドについては表の下を見てください):"

#: ../../library/unittest.rst:793 ../../library/unittest.rst:908
#: ../../library/unittest.rst:970 ../../library/unittest.rst:1113
msgid "Method"
msgstr "Method"

#: ../../library/unittest.rst:793 ../../library/unittest.rst:908
#: ../../library/unittest.rst:970
msgid "Checks that"
msgstr "確認事項"

#: ../../library/unittest.rst:793 ../../library/unittest.rst:908
#: ../../library/unittest.rst:970 ../../library/unittest.rst:1113
msgid "New in"
msgstr "初出"

#: ../../library/unittest.rst:795
msgid ":meth:`assertEqual(a, b) <TestCase.assertEqual>`"
msgstr ":meth:`assertEqual(a, b) <TestCase.assertEqual>`"

#: ../../library/unittest.rst:795
msgid "``a == b``"
msgstr "``a == b``"

#: ../../library/unittest.rst:798
msgid ":meth:`assertNotEqual(a, b) <TestCase.assertNotEqual>`"
msgstr ":meth:`assertNotEqual(a, b) <TestCase.assertNotEqual>`"

#: ../../library/unittest.rst:798
msgid "``a != b``"
msgstr "``a != b``"

#: ../../library/unittest.rst:801
msgid ":meth:`assertTrue(x) <TestCase.assertTrue>`"
msgstr ":meth:`assertTrue(x) <TestCase.assertTrue>`"

#: ../../library/unittest.rst:801
msgid "``bool(x) is True``"
msgstr "``bool(x) is True``"

#: ../../library/unittest.rst:804
msgid ":meth:`assertFalse(x) <TestCase.assertFalse>`"
msgstr ":meth:`assertFalse(x) <TestCase.assertFalse>`"

#: ../../library/unittest.rst:804
msgid "``bool(x) is False``"
msgstr "``bool(x) is False``"

#: ../../library/unittest.rst:807
msgid ":meth:`assertIs(a, b) <TestCase.assertIs>`"
msgstr ":meth:`assertIs(a, b) <TestCase.assertIs>`"

#: ../../library/unittest.rst:807
msgid "``a is b``"
msgstr "``a is b``"

#: ../../library/unittest.rst:807 ../../library/unittest.rst:810
#: ../../library/unittest.rst:813 ../../library/unittest.rst:816
#: ../../library/unittest.rst:819 ../../library/unittest.rst:822
#: ../../library/unittest.rst:825 ../../library/unittest.rst:828
#: ../../library/unittest.rst:913 ../../library/unittest.rst:978
#: ../../library/unittest.rst:981 ../../library/unittest.rst:984
#: ../../library/unittest.rst:987 ../../library/unittest.rst:990
#: ../../library/unittest.rst:993 ../../library/unittest.rst:996
#: ../../library/unittest.rst:999 ../../library/unittest.rst:1115
#: ../../library/unittest.rst:1118 ../../library/unittest.rst:1121
#: ../../library/unittest.rst:1124 ../../library/unittest.rst:1127
#: ../../library/unittest.rst:1130
msgid "2.7"
msgstr "2.7"

#: ../../library/unittest.rst:810
msgid ":meth:`assertIsNot(a, b) <TestCase.assertIsNot>`"
msgstr ":meth:`assertIsNot(a, b) <TestCase.assertIsNot>`"

#: ../../library/unittest.rst:810
msgid "``a is not b``"
msgstr "``a is not b``"

#: ../../library/unittest.rst:813
msgid ":meth:`assertIsNone(x) <TestCase.assertIsNone>`"
msgstr ":meth:`assertIsNone(x) <TestCase.assertIsNone>`"

#: ../../library/unittest.rst:813
msgid "``x is None``"
msgstr "``x is None``"

#: ../../library/unittest.rst:816
msgid ":meth:`assertIsNotNone(x) <TestCase.assertIsNotNone>`"
msgstr ":meth:`assertIsNotNone(x) <TestCase.assertIsNotNone>`"

#: ../../library/unittest.rst:816
msgid "``x is not None``"
msgstr "``x is not None``"

#: ../../library/unittest.rst:819
msgid ":meth:`assertIn(a, b) <TestCase.assertIn>`"
msgstr ":meth:`assertIn(a, b) <TestCase.assertIn>`"

#: ../../library/unittest.rst:819
msgid "``a in b``"
msgstr "``a in b``"

#: ../../library/unittest.rst:822
msgid ":meth:`assertNotIn(a, b) <TestCase.assertNotIn>`"
msgstr ":meth:`assertNotIn(a, b) <TestCase.assertNotIn>`"

#: ../../library/unittest.rst:822
msgid "``a not in b``"
msgstr "``a not in b``"

#: ../../library/unittest.rst:825
msgid ":meth:`assertIsInstance(a, b) <TestCase.assertIsInstance>`"
msgstr ":meth:`assertIsInstance(a, b) <TestCase.assertIsInstance>`"

#: ../../library/unittest.rst:825
msgid "``isinstance(a, b)``"
msgstr "``isinstance(a, b)``"

#: ../../library/unittest.rst:828
msgid ":meth:`assertNotIsInstance(a, b) <TestCase.assertNotIsInstance>`"
msgstr ":meth:`assertNotIsInstance(a, b) <TestCase.assertNotIsInstance>`"

#: ../../library/unittest.rst:828
msgid "``not isinstance(a, b)``"
msgstr "``not isinstance(a, b)``"

#: ../../library/unittest.rst:832
msgid ""
"All the assert methods (except :meth:`assertRaises`, :meth:"
"`assertRaisesRegexp`) accept a *msg* argument that, if specified, is used as "
"the error message on failure (see also :data:`longMessage`)."
msgstr ""
"(:meth:`assertRaises` と :meth:`assertRaisesRegexp` を除く) すべてのアサート"
"メソッドには *msg* 引数を指定することができ、テストの失敗時のエラーメッセージ"
"で使用されます (:data:`longMessage` も参照してください)。"

#: ../../library/unittest.rst:839
msgid ""
"Test that *first* and *second* are equal.  If the values do not compare "
"equal, the test will fail."
msgstr ""
"*first* と *second* が等しいことをテストします。両者が比較出来ない場合は、テ"
"ストが失敗します。"

#: ../../library/unittest.rst:842
msgid ""
"In addition, if *first* and *second* are the exact same type and one of "
"list, tuple, dict, set, frozenset or unicode or any type that a subclass "
"registers with :meth:`addTypeEqualityFunc` the type-specific equality "
"function will be called in order to generate a more useful default error "
"message (see also the :ref:`list of type-specific methods <type-specific-"
"methods>`)."
msgstr ""
"さらに、 *first* と *second* が厳密に同じ型であり、その型が、list, tuple, "
"dict, set, frozenset もしくは unicode のいずれか、または :meth:"
"`addTypeEqualityFunc` で比較関数が登録されている型の場合には、より有益なデ"
"フォルトのエラーメッセージを生成するために、その型特有の比較関数が呼ばれます "
"(:ref:`list of type-specific methods <type-specific-methods>` も参照してくだ"
"さい)。"

#: ../../library/unittest.rst:849
msgid "Added the automatic calling of type-specific equality function."
msgstr "自動で型特有の比較関数が呼ばれるようになりました。"

#: ../../library/unittest.rst:855
msgid ""
"Test that *first* and *second* are not equal.  If the values do compare "
"equal, the test will fail."
msgstr ""
"*first* と *second* が等しくないことをテストします。両者が比較出来ない場合"
"は、テストが失敗します。"

#: ../../library/unittest.rst:861
msgid "Test that *expr* is true (or false)."
msgstr "*expr* が真 (偽) であることをテストします。"

#: ../../library/unittest.rst:863
msgid ""
"Note that this is equivalent to ``bool(expr) is True`` and not to ``expr is "
"True`` (use ``assertIs(expr, True)`` for the latter).  This method should "
"also be avoided when more specific methods are available (e.g. "
"``assertEqual(a, b)`` instead of ``assertTrue(a == b)``), because they "
"provide a better error message in case of failure."
msgstr ""
"このメソッドは、``bool(expr) is True`` と等価であり、``expr is True`` と等価"
"ではないことに注意が必要です (後者のためには、``assertIs(expr, True)`` が用意"
"されています)。また、専用のメソッドが使用できる場合には、そちらを使用してくだ"
"さい (例えば ``assertTrue(a == b)`` の代わりに ``assertEqual(a, b)`` を使用し"
"てください)。そうすることにより、テスト失敗時のエラーメッセージを詳細に表示す"
"ることができます。"

#: ../../library/unittest.rst:873
msgid ""
"Test that *first* and *second* evaluate (or don't evaluate) to the same "
"object."
msgstr ""
"*first* と *second* が同じオブジェクトであること (そうでないこと) をテストし"
"ます。"

#: ../../library/unittest.rst:881
msgid "Test that *expr* is (or is not) ``None``."
msgstr ""
"*expr* が ``None`` であること (および、そうでないこと) をテストします。"

#: ../../library/unittest.rst:889
msgid "Test that *first* is (or is not) in *second*."
msgstr "*first* が *second* に含まれること (そうでないこと) をテストします。"

#: ../../library/unittest.rst:897
msgid ""
"Test that *obj* is (or is not) an instance of *cls* (which can be a class or "
"a tuple of classes, as supported by :func:`isinstance`). To check for the "
"exact type, use :func:`assertIs(type(obj), cls) <assertIs>`."
msgstr ""
"*obj* が *cls* のインスタンスであること (あるいはそうでないこと) をテストしま"
"す (この *cls* は、 :func:`isinstance` が扱うことのできる、クラスもしくはクラ"
"スのタプルである必要があります)。正確な型をチェックするためには、 :func:"
"`assertIs(type(obj), cls) <assertIs>` を使用してください。"

#: ../../library/unittest.rst:904
msgid ""
"It is also possible to check that exceptions and warnings are raised using "
"the following methods:"
msgstr ""
"例外と例外発生時の警告を確認するために以下のメソッドを使用することができます:"

#: ../../library/unittest.rst:910
msgid ":meth:`assertRaises(exc, fun, *args, **kwds) <TestCase.assertRaises>`"
msgstr ":meth:`assertRaises(exc, fun, *args, **kwds) <TestCase.assertRaises>`"

#: ../../library/unittest.rst:910
msgid "``fun(*args, **kwds)`` raises *exc*"
msgstr "``fun(*args, **kwds)`` raises *exc*"

#: ../../library/unittest.rst:913
msgid ""
":meth:`assertRaisesRegexp(exc, r, fun, *args, **kwds) <TestCase."
"assertRaisesRegexp>`"
msgstr ""
":meth:`assertRaisesRegexp(exc, r, fun, *args, **kwds) <TestCase."
"assertRaisesRegexp>`"

#: ../../library/unittest.rst:913
msgid "``fun(*args, **kwds)`` raises *exc* and the message matches regex *r*"
msgstr ""
"``fun(*args, **kwds)`` が *exc* を raise してメッセージが正規表現 *r* とマッ"
"チすること"

#: ../../library/unittest.rst:920
msgid ""
"Test that an exception is raised when *callable* is called with any "
"positional or keyword arguments that are also passed to :meth:"
"`assertRaises`.  The test passes if *exception* is raised, is an error if "
"another exception is raised, or fails if no exception is raised. To catch "
"any of a group of exceptions, a tuple containing the exception classes may "
"be passed as *exception*."
msgstr ""
"*callable* を呼び出した時に例外が発生することをテストします。 :meth:"
"`assertRaises` で指定した位置パラメータとキーワードパラメータを該当メソッドに"
"渡します。 *exception* が投げられた場合にテストが成功します。また、他の例外が"
"投げられた場合はエラー、例外が投げられなかった場合は失敗になります。複数の例"
"外をキャッチする場合には、例外クラスのタプルを *exception* に指定してくださ"
"い。"

#: ../../library/unittest.rst:927
msgid ""
"If only the *exception* argument is given, returns a context manager so that "
"the code under test can be written inline rather than as a function::"
msgstr ""
"*exception* 引数のみが渡された場合には、コンテキストマネージャが返されます。"
"これにより関数名を渡す形式ではなく、インラインでテスト対象のコードを書くこと"
"ができます。 ::"

#: ../../library/unittest.rst:933
msgid ""
"The context manager will store the caught exception object in its :attr:"
"`exception` attribute.  This can be useful if the intention is to perform "
"additional checks on the exception raised::"
msgstr ""
"このコンテキストマネージャは :attr:`exception` で指定されたオブジェクトを格納"
"します。これにより、例外発生時の詳細な確認をおこなうことができます::"

#: ../../library/unittest.rst:943
msgid "Added the ability to use :meth:`assertRaises` as a context manager."
msgstr ""
":meth:`assertRaises` がコンテキストマネージャとして使えるようになりました。"

#: ../../library/unittest.rst:950
msgid ""
"Like :meth:`assertRaises` but also tests that *regexp* matches on the string "
"representation of the raised exception.  *regexp* may be a regular "
"expression object or a string containing a regular expression suitable for "
"use by :func:`re.search`.  Examples::"
msgstr ""
":meth:`assertRaises` と同等ですが、例外の文字列表現が *regexp* にマッチするこ"
"ともテストします。 *regexp* は正規表現オブジェクトか、 :func:`re.search` が扱"
"える正規表現が書かれた文字列である必要があります。例えば以下のようになりま"
"す::"

#: ../../library/unittest.rst:958
msgid "or::"
msgstr "もしくは::"

#: ../../library/unittest.rst:967
msgid ""
"There are also other methods used to perform more specific checks, such as:"
msgstr "さらに特有の確認を行うために以下のメソッドが用意されています:"

#: ../../library/unittest.rst:972
msgid ":meth:`assertAlmostEqual(a, b) <TestCase.assertAlmostEqual>`"
msgstr ":meth:`assertAlmostEqual(a, b) <TestCase.assertAlmostEqual>`"

#: ../../library/unittest.rst:972
msgid "``round(a-b, 7) == 0``"
msgstr "``round(a-b, 7) == 0``"

#: ../../library/unittest.rst:975
msgid ":meth:`assertNotAlmostEqual(a, b) <TestCase.assertNotAlmostEqual>`"
msgstr ":meth:`assertNotAlmostEqual(a, b) <TestCase.assertNotAlmostEqual>`"

#: ../../library/unittest.rst:975
msgid "``round(a-b, 7) != 0``"
msgstr "``round(a-b, 7) != 0``"

#: ../../library/unittest.rst:978
msgid ":meth:`assertGreater(a, b) <TestCase.assertGreater>`"
msgstr ":meth:`assertGreater(a, b) <TestCase.assertGreater>`"

#: ../../library/unittest.rst:978
msgid "``a > b``"
msgstr "``a > b``"

#: ../../library/unittest.rst:981
msgid ":meth:`assertGreaterEqual(a, b) <TestCase.assertGreaterEqual>`"
msgstr ":meth:`assertGreaterEqual(a, b) <TestCase.assertGreaterEqual>`"

#: ../../library/unittest.rst:981
msgid "``a >= b``"
msgstr "``a >= b``"

#: ../../library/unittest.rst:984
msgid ":meth:`assertLess(a, b) <TestCase.assertLess>`"
msgstr ":meth:`assertLess(a, b) <TestCase.assertLess>`"

#: ../../library/unittest.rst:984
msgid "``a < b``"
msgstr "``a < b``"

#: ../../library/unittest.rst:987
msgid ":meth:`assertLessEqual(a, b) <TestCase.assertLessEqual>`"
msgstr ":meth:`assertLessEqual(a, b) <TestCase.assertLessEqual>`"

#: ../../library/unittest.rst:987
msgid "``a <= b``"
msgstr "``a <= b``"

#: ../../library/unittest.rst:990
msgid ":meth:`assertRegexpMatches(s, r) <TestCase.assertRegexpMatches>`"
msgstr ":meth:`assertRegexpMatches(s, r) <TestCase.assertRegexpMatches>`"

#: ../../library/unittest.rst:990
msgid "``r.search(s)``"
msgstr "``r.search(s)``"

#: ../../library/unittest.rst:993
msgid ":meth:`assertNotRegexpMatches(s, r) <TestCase.assertNotRegexpMatches>`"
msgstr ":meth:`assertNotRegexpMatches(s, r) <TestCase.assertNotRegexpMatches>`"

#: ../../library/unittest.rst:993
msgid "``not r.search(s)``"
msgstr "``not r.search(s)``"

#: ../../library/unittest.rst:996
msgid ":meth:`assertItemsEqual(a, b) <TestCase.assertItemsEqual>`"
msgstr ":meth:`assertItemsEqual(a, b) <TestCase.assertItemsEqual>`"

#: ../../library/unittest.rst:996
msgid "sorted(a) == sorted(b) and works with unhashable objs"
msgstr ""
"意味的に ``sorted(a) == sorted(b)`` ですが、ハッシュ不能オブジェクトでも動作"

#: ../../library/unittest.rst:999
msgid ""
":meth:`assertDictContainsSubset(a, b) <TestCase.assertDictContainsSubset>`"
msgstr ""
":meth:`assertDictContainsSubset(a, b) <TestCase.assertDictContainsSubset>`"

#: ../../library/unittest.rst:999
msgid "all the key/value pairs in *a* exist in *b*"
msgstr "*a* の全てのキー/値ペアが *b* に存在すること"

#: ../../library/unittest.rst:1007
msgid ""
"Test that *first* and *second* are approximately (or not approximately) "
"equal by computing the difference, rounding to the given number of decimal "
"*places* (default 7), and comparing to zero.  Note that these methods round "
"the values to the given number of *decimal places* (i.e. like the :func:"
"`round` function) and not *significant digits*."
msgstr ""
"*first* と *second* が近似的に等しい (等しくない) ことをテストします。この比"
"較は、*places* (デフォルト7) で指定した小数位で丸めた差分をゼロと比べることで"
"おこないます。これらのメソッドは、 (:func:`round` と同様に) *小数位* を指定す"
"るのであって、*有効桁数* を指定するのではないことに注意してください。"

#: ../../library/unittest.rst:1013
msgid ""
"If *delta* is supplied instead of *places* then the difference between "
"*first* and *second* must be less or equal to (or greater than) *delta*."
msgstr ""
"*places* の代わりに *delta* が渡された場合には、*first* と *second* の差分が "
"*delta* 以下 (以上) であることをテストします。"

#: ../../library/unittest.rst:1016
msgid "Supplying both *delta* and *places* raises a ``TypeError``."
msgstr ""
"*delta* と *places* の両方が指定された場合は ``TypeError`` が投げられます。"

#: ../../library/unittest.rst:1018
msgid ""
":meth:`assertAlmostEqual` automatically considers almost equal objects that "
"compare equal.  :meth:`assertNotAlmostEqual` automatically fails if the "
"objects compare equal.  Added the *delta* keyword argument."
msgstr ""
":meth:`assertAlmostEqual` は、オブジェクトが等しい場合には自動で近似的に等し"
"いとみなすようになりました。 :meth:`assertNotAlmostEqual` は、オブジェクトが"
"等しい場合には自動的に失敗するようになりました。 *delta* 引数が追加されまし"
"た。"

#: ../../library/unittest.rst:1030
msgid ""
"Test that *first* is respectively >, >=, < or <= than *second* depending on "
"the method name.  If not, the test will fail::"
msgstr ""
"*first* が *second* と比べて、メソッド名に対応して >, >=, < もしくは <= であ"
"ることをテストします。そうでない場合はテストが失敗します::"

#: ../../library/unittest.rst:1041
msgid ""
"Test that a *regexp* search matches *text*.  In case of failure, the error "
"message will include the pattern and the *text* (or the pattern and the part "
"of *text* that unexpectedly matched).  *regexp* may be a regular expression "
"object or a string containing a regular expression suitable for use by :func:"
"`re.search`."
msgstr ""
"*regexp* の検索が *text* とマッチすることをテストします。テスト失敗時には、エ"
"ラーメッセージにパターンと *text* が表示されます (もしくは、パターンと意図し"
"ないかたちでマッチした *text* の一部が表示されます)。 *regexp* は正規表現オブ"
"ジェクトか、 :func:`re.search` が扱える正規表現が書かれた文字列である必要があ"
"ります。"

#: ../../library/unittest.rst:1052
msgid ""
"Verifies that a *regexp* search does not match *text*.  Fails with an error "
"message including the pattern and the part of *text* that matches.  *regexp* "
"may be a regular expression object or a string containing a regular "
"expression suitable for use by :func:`re.search`."
msgstr ""
"*regexp* の検索が *text* とマッチしないことをテストします。テスト失敗時には、"
"エラーメッセージにマッチしたパターンと *text* が表示されます。 *regexp* は正"
"規表現オブジェクトか、 :func:`re.search` が扱える正規表現が書かれた文字列であ"
"る必要があります。"

#: ../../library/unittest.rst:1062
msgid ""
"Test that sequence *expected* contains the same elements as *actual*, "
"regardless of their order. When they don't, an error message listing the "
"differences between the sequences will be generated."
msgstr ""
"シーケンス *expected* が *actual* と同じ要素を含んでいることをテストします。"
"要素の順序はテスト結果に影響しません。要素が含まれていない場合には、シーケン"
"スの差分がエラーメッセージとして表示されます。"

#: ../../library/unittest.rst:1066
msgid ""
"Duplicate elements are *not* ignored when comparing *actual* and *expected*. "
"It verifies if each element has the same count in both sequences. It is the "
"equivalent of ``assertEqual(sorted(expected), sorted(actual))`` but it works "
"with sequences of unhashable objects as well."
msgstr ""
"*actual* と *expected* の比較では、重複した要素は無視 *されません* 。両者に同"
"じ数の要素が含まれていることを検証します。このメソッドは "
"``assertEqual(sorted(expected), sorted(actual))`` と同等に振る舞うことに加え"
"て、ハッシュ化できないオブジェクトのシーケンスでも動作します。"

#: ../../library/unittest.rst:1072
msgid "In Python 3, this method is named ``assertCountEqual``."
msgstr ""
"Python 3 ではこのメソッドは ``assertCountEqual`` と名付けられています。"

#: ../../library/unittest.rst:1079
msgid ""
"Tests whether the key/value pairs in dictionary *actual* are a superset of "
"those in *expected*.  If not, an error message listing the missing keys and "
"mismatched values is generated."
msgstr ""
"辞書 *actual* のキー/値ペアが *expected* のスーパーセットになっているかどうか"
"をテストします。そうなっていない場合には、欠けたキーと不一致の値を一覧するエ"
"ラーメッセージが生成されます。"

#: ../../library/unittest.rst:1090
msgid ""
"The :meth:`assertEqual` method dispatches the equality check for objects of "
"the same type to different type-specific methods.  These methods are already "
"implemented for most of the built-in types, but it's also possible to "
"register new methods using :meth:`addTypeEqualityFunc`:"
msgstr ""
":meth:`assertEqual` メソッドは、同じ型のオブジェクトの等価性確認のために、型"
"ごとに特有のメソッドにディスパッチします。これらのメソッドは、ほとんどの組み"
"込み型用のメソッドは既に実装されています。さらに、 :meth:"
"`addTypeEqualityFunc` を使う事で新たなメソッドを登録することができます:"

#: ../../library/unittest.rst:1097
msgid ""
"Registers a type-specific method called by :meth:`assertEqual` to check if "
"two objects of exactly the same *typeobj* (not subclasses) compare equal.  "
"*function* must take two positional arguments and a third msg=None keyword "
"argument just as :meth:`assertEqual` does.  It must raise :data:`self."
"failureException(msg) <failureException>` when inequality between the first "
"two parameters is detected -- possibly providing useful information and "
"explaining the inequalities in details in the error message."
msgstr ""
":meth:`assertEqual` で呼び出される型特有のメソッドを登録します。登録するメ"
"ソッドは、比較する2つのオブジェクトの型が厳密に *typeobj* と同じ (サブクラス"
"でもいけません) の場合に等価性を確認します。 *function*  は :meth:"
"`assertEqual` と同様に、2つの位置固定引数と、3番目に msg=None のキーワード引"
"数を取れる必要があります。このメソッドは、始めの2つに指定したパラメータ間の差"
"分を検出した時に :data:`self.failureException(msg) <failureException>` の例外"
"を投げる必要があります。この例外を投げる際は、出来る限り、エラーの内容が分か"
"る有用な情報と差分の詳細をエラーメッセージに含めてください。"

#: ../../library/unittest.rst:1108
msgid ""
"The list of type-specific methods automatically used by :meth:`~TestCase."
"assertEqual` are summarized in the following table.  Note that it's usually "
"not necessary to invoke these methods directly."
msgstr ""
":meth:`~TestCase.assertEqual` が自動的に呼び出す型特有のメソッドの概要を以下"
"の表示に記載しています。これらのメソッドは通常は直接呼び出す必要がないことに"
"注意が必要です。"

#: ../../library/unittest.rst:1113
msgid "Used to compare"
msgstr "比較の対象"

#: ../../library/unittest.rst:1115
msgid ":meth:`assertMultiLineEqual(a, b) <TestCase.assertMultiLineEqual>`"
msgstr ":meth:`assertMultiLineEqual(a, b) <TestCase.assertMultiLineEqual>`"

#: ../../library/unittest.rst:1115
msgid "strings"
msgstr "文字列"

#: ../../library/unittest.rst:1118
msgid ":meth:`assertSequenceEqual(a, b) <TestCase.assertSequenceEqual>`"
msgstr ":meth:`assertSequenceEqual(a, b) <TestCase.assertSequenceEqual>`"

#: ../../library/unittest.rst:1118
msgid "sequences"
msgstr "シーケンス"

#: ../../library/unittest.rst:1121
msgid ":meth:`assertListEqual(a, b) <TestCase.assertListEqual>`"
msgstr ":meth:`assertListEqual(a, b) <TestCase.assertListEqual>`"

#: ../../library/unittest.rst:1121
msgid "lists"
msgstr "リスト"

#: ../../library/unittest.rst:1124
msgid ":meth:`assertTupleEqual(a, b) <TestCase.assertTupleEqual>`"
msgstr ":meth:`assertTupleEqual(a, b) <TestCase.assertTupleEqual>`"

#: ../../library/unittest.rst:1124
msgid "tuples"
msgstr "タプル"

#: ../../library/unittest.rst:1127
msgid ":meth:`assertSetEqual(a, b) <TestCase.assertSetEqual>`"
msgstr ":meth:`assertSetEqual(a, b) <TestCase.assertSetEqual>`"

#: ../../library/unittest.rst:1127
msgid "sets or frozensets"
msgstr "set または frozenset"

#: ../../library/unittest.rst:1130
msgid ":meth:`assertDictEqual(a, b) <TestCase.assertDictEqual>`"
msgstr ":meth:`assertDictEqual(a, b) <TestCase.assertDictEqual>`"

#: ../../library/unittest.rst:1130
msgid "dicts"
msgstr "辞書"

#: ../../library/unittest.rst:1138
msgid ""
"Test that the multiline string *first* is equal to the string *second*. When "
"not equal a diff of the two strings highlighting the differences will be "
"included in the error message. This method is used by default when comparing "
"Unicode strings with :meth:`assertEqual`."
msgstr ""

#: ../../library/unittest.rst:1148
msgid ""
"Tests that two sequences are equal.  If a *seq_type* is supplied, both "
"*seq1* and *seq2* must be instances of *seq_type* or a failure will be "
"raised.  If the sequences are different an error message is constructed that "
"shows the difference between the two."
msgstr ""
"2つのシーケンスが等しいことをテストします。 *seq_type* が指定された場合、 "
"*seq1* と *seq2* が *seq_type* のインスタンスで無い場合にはテストが失敗しま"
"す。シーケンスどうしが異なる場合には、両者の差分がエラーメッセージに表示され"
"ます。"

#: ../../library/unittest.rst:1153
msgid ""
"This method is not called directly by :meth:`assertEqual`, but it's used to "
"implement :meth:`assertListEqual` and :meth:`assertTupleEqual`."
msgstr ""
"このメソッドは直接 :meth:`assertEqual` からは呼ばれませんが、 :meth:"
"`assertListEqual` と :meth:`assertTupleEqual` の実装で使われています。"

#: ../../library/unittest.rst:1163
msgid ""
"Tests that two lists or tuples are equal.  If not, an error message is "
"constructed that shows only the differences between the two.  An error is "
"also raised if either of the parameters are of the wrong type. These methods "
"are used by default when comparing lists or tuples with :meth:`assertEqual`."
msgstr ""
"2つのリストまたはタプルが等しいかどうかをテストします。等しくない場合には、両"
"者の差分を表示します。2つのパラメータの型が異なる場合にはテストがエラーになり"
"ます。このメソッドは、デフォルトで、 :meth:`assertEqual` が list または "
"tuple を比較するときに自動的に使用します。"

#: ../../library/unittest.rst:1174
msgid ""
"Tests that two sets are equal.  If not, an error message is constructed that "
"lists the differences between the sets.  This method is used by default when "
"comparing sets or frozensets with :meth:`assertEqual`."
msgstr ""
"2つのセットが等しいかどうかをテストします。等しくない場合には、両者の差分を表"
"示します。このメソッドは、デフォルトで、 :meth:`assertEqual` が set もしくは "
"frozenset を比較するときに自動的に使用します。"

#: ../../library/unittest.rst:1178
msgid ""
"Fails if either of *set1* or *set2* does not have a :meth:`set.difference` "
"method."
msgstr ""
"*set1* or *set2* のいずれかに :meth:`set.difference` メソッドが無い場合にはテ"
"ストは失敗します。"

#: ../../library/unittest.rst:1186
msgid ""
"Test that two dictionaries are equal.  If not, an error message is "
"constructed that shows the differences in the dictionaries. This method will "
"be used by default to compare dictionaries in calls to :meth:`assertEqual`."
msgstr ""
"2つの辞書が等しいかどうかをテストします。等しくない場合には、両者の差分を表示"
"します。このメソッドは、デフォルトで、 :meth:`assertEqual` が dict を比較する"
"ときに自動的に使用します。"

#: ../../library/unittest.rst:1197
msgid ""
"Finally the :class:`TestCase` provides the following methods and attributes:"
msgstr "最後に、 :class:`TestCase` の残りのメソッドと属性を紹介します:"

#: ../../library/unittest.rst:1202
msgid ""
"Signals a test failure unconditionally, with *msg* or ``None`` for the error "
"message."
msgstr ""
"無条件にテストを失敗させます。エラーメッセージの表示に、*msg* または "
"``None`` が使われます。"

#: ../../library/unittest.rst:1208
msgid ""
"This class attribute gives the exception raised by the test method.  If a "
"test framework needs to use a specialized exception, possibly to carry "
"additional information, it must subclass this exception in order to \"play "
"fair\" with the framework.  The initial value of this attribute is :exc:"
"`AssertionError`."
msgstr ""
":meth:`test` メソッドが送出する例外を指定するクラス属性です。例えばテストフ"
"レームワークで追加情報を付した特殊な例外が必要になる場合、この例外のサブクラ"
"スとして作成します。この属性の初期値は :exc:`AssertionError` です。"

#: ../../library/unittest.rst:1217
msgid ""
"If set to ``True`` then any explicit failure message you pass in to the :ref:"
"`assert methods <assert-methods>` will be appended to the end of the normal "
"failure message.  The normal messages contain useful information about the "
"objects involved, for example the message from assertEqual shows you the "
"repr of the two unequal objects. Setting this attribute to ``True`` allows "
"you to have a custom error message in addition to the normal one."
msgstr ""
"この属性に ``True`` が設定された場合、 :ref:`assert methods <assert-"
"methods>` で指定したすべての明示的な失敗メッセージが、通常の失敗メッセージに"
"追加されます。通常の失敗メッセージには、オブジェクトに関する有用な情報が含ま"
"れています。例えば、 assertEqual は異なるオブジェクトの repr を表示します。こ"
"の属性を ``True`` にすることで、カスタマイズしたエラーメッセージを通常のメッ"
"セージに追加することができます。"

#: ../../library/unittest.rst:1225
msgid ""
"This attribute defaults to ``False``, meaning that a custom message passed "
"to an assert method will silence the normal message."
msgstr ""
"この属性はデフォルトで ``False`` になっていて、カスタムメッセージが渡されても"
"表示しないようになっています。"

#: ../../library/unittest.rst:1228
msgid ""
"The class setting can be overridden in individual tests by assigning an "
"instance attribute to ``True`` or ``False`` before calling the assert "
"methods."
msgstr ""
"アサートメソッドを呼び出す前に、インスタンス属性として ``True`` または "
"``False`` を指定することで、この設定をオーバーライドすることができます。"

#: ../../library/unittest.rst:1236
msgid ""
"This attribute controls the maximum length of diffs output by assert methods "
"that report diffs on failure. It defaults to 80*8 characters. Assert methods "
"affected by this attribute are :meth:`assertSequenceEqual` (including all "
"the sequence comparison methods that delegate to it), :meth:"
"`assertDictEqual` and :meth:`assertMultiLineEqual`."
msgstr ""
"この属性は、アサーションメソッドが失敗をレポートする時に表示する差分の長さを"
"コントロールします。デフォルトは 80*8 文字です。この属性が影響するメソッド"
"は、 :meth:`assertSequenceEqual` (およびこのメソッドに委譲するシーケンス比較"
"メソッド)、 :meth:`assertDictEqual` と :meth:`assertMultiLineEqual` です。"

#: ../../library/unittest.rst:1243
msgid ""
"Setting ``maxDiff`` to ``None`` means that there is no maximum length of "
"diffs."
msgstr "``maxDiff`` を ``None`` に設定すると差分表示の上限がなくなります。"

#: ../../library/unittest.rst:1249
msgid ""
"Testing frameworks can use the following methods to collect information on "
"the test:"
msgstr ""
"テストフレームワークは、テスト情報を収集するために以下のメソッドを使用します:"

#: ../../library/unittest.rst:1255
msgid ""
"Return the number of tests represented by this test object.  For :class:"
"`TestCase` instances, this will always be ``1``."
msgstr ""
"テストオブジェクトに含まれるテストの数を返します。 :class:`TestCase` インスタ"
"ンスは常に ``1`` を返します。"

#: ../../library/unittest.rst:1261
msgid ""
"Return an instance of the test result class that should be used for this "
"test case class (if no other result instance is provided to the :meth:`run` "
"method)."
msgstr ""
"このテストケースクラスで使われるテスト結果クラスのインスタンスを (もし :meth:"
"`run` メソッドに他の結果インスタンスが提供されないならば) 返します。"

#: ../../library/unittest.rst:1265
msgid ""
"For :class:`TestCase` instances, this will always be an instance of :class:"
"`TestResult`; subclasses of :class:`TestCase` should override this as "
"necessary."
msgstr ""
":class:`TestCase` インスタンスに対しては、いつも :class:`TestResult` のインス"
"タンスですので、 :class:`TestCase` のサブクラスでは必要に応じてこのメソッドを"
"オーバライドしてください。"

#: ../../library/unittest.rst:1272
msgid ""
"Return a string identifying the specific test case.  This is usually the "
"full name of the test method, including the module and class name."
msgstr ""
"テストケースを特定する文字列を返します。通常、*id* はモジュール名・クラス名を"
"含む、テストメソッドのフルネームを指定します。"

#: ../../library/unittest.rst:1278
msgid ""
"Returns a description of the test, or ``None`` if no description has been "
"provided.  The default implementation of this method returns the first line "
"of the test method's docstring, if available, or :const:`None`."
msgstr ""
"テストの説明を一行分、または説明がない場合には ``None`` を返します。デフォル"
"トでは、テストメソッドの docstring の先頭の一行、または ``None`` を返します。"

#: ../../library/unittest.rst:1287
msgid ""
"Add a function to be called after :meth:`tearDown` to cleanup resources used "
"during the test. Functions will be called in reverse order to the order they "
"are added (LIFO). They are called with any arguments and keyword arguments "
"passed into :meth:`addCleanup` when they are added."
msgstr ""
":meth:`tearDown` の後に呼び出される関数を追加します。この関数はリソースのク"
"リーンアップのために使用します。追加された関数は、追加された順と逆の順番で呼"
"び出されます (LIFO)。 :meth:`addCleanup` に渡された引数とキーワード引数が追加"
"された関数にも渡されます。"

#: ../../library/unittest.rst:1293
msgid ""
"If :meth:`setUp` fails, meaning that :meth:`tearDown` is not called, then "
"any cleanup functions added will still be called."
msgstr ""
":meth:`setUp` が失敗した場合、つまり :meth:`tearDown` が呼ばれなかった場合で"
"も、追加されたクリーンアップ関数は呼び出されます。"

#: ../../library/unittest.rst:1301
msgid ""
"This method is called unconditionally after :meth:`tearDown`, or after :meth:"
"`setUp` if :meth:`setUp` raises an exception."
msgstr ""
"このメソッドは、 :meth:`tearDown` の後、もしくは、 :meth:`setUp` が例外を投げ"
"た場合は :meth:`setUp` の後に、無条件で呼ばれます。"

#: ../../library/unittest.rst:1304
msgid ""
"It is responsible for calling all the cleanup functions added by :meth:"
"`addCleanup`. If you need cleanup functions to be called *prior* to :meth:"
"`tearDown` then you can call :meth:`doCleanups` yourself."
msgstr ""
"このメソッドは、 :meth:`addCleanup` で追加された関数を呼び出す責務を担いま"
"す。もし、クリーンアップ関数を :meth:`tearDown` より前に呼び出す必要がある場"
"合には、 :meth:`doCleanups` を明示的に呼び出してください。"

#: ../../library/unittest.rst:1309
msgid ""
":meth:`doCleanups` pops methods off the stack of cleanup functions one at a "
"time, so it can be called at any time."
msgstr ""
":meth:`doCleanups` は、どこで呼び出されても、クリーンアップ関数をスタックから"
"削除して実行します。"

#: ../../library/unittest.rst:1317
msgid ""
"This class implements the portion of the :class:`TestCase` interface which "
"allows the test runner to drive the test, but does not provide the methods "
"which test code can use to check and report errors.  This is used to create "
"test cases using legacy test code, allowing it to be integrated into a :mod:"
"`unittest`-based test framework."
msgstr ""
"このクラスでは :class:`TestCase` インターフェースの内、テストランナーがテスト"
"を実行するためのインターフェースだけを実装しており、テスト結果のチェックやレ"
"ポートに関するメソッドは実装していません。既存のテストコードを :mod:"
"`unittest` によるテストフレームワークに組み込むために使用します。"

#: ../../library/unittest.rst:1325
msgid "Deprecated aliases"
msgstr "廃止予定のエイリアス"

#: ../../library/unittest.rst:1327
msgid ""
"For historical reasons, some of the :class:`TestCase` methods had one or "
"more aliases that are now deprecated.  The following table lists the correct "
"names along with their deprecated aliases:"
msgstr ""
"歴史的な経緯で、 :class:`TestCase` のいくつかのエイリアスは廃止予定となりまし"
"た。以下の表に、廃止予定のエイリアスをまとめます:"

#: ../../library/unittest.rst:1332
msgid "Method Name"
msgstr "メソッド名"

#: ../../library/unittest.rst:1332
msgid "Deprecated alias(es)"
msgstr "廃止予定のエリアス"

#: ../../library/unittest.rst:1334
msgid ":meth:`.assertEqual`"
msgstr ":meth:`.assertEqual`"

#: ../../library/unittest.rst:1334
msgid "failUnlessEqual, assertEquals"
msgstr "failUnlessEqual, assertEquals"

#: ../../library/unittest.rst:1335
msgid ":meth:`.assertNotEqual`"
msgstr ":meth:`.assertNotEqual`"

#: ../../library/unittest.rst:1335
msgid "failIfEqual"
msgstr "failIfEqual"

#: ../../library/unittest.rst:1336
msgid ":meth:`.assertTrue`"
msgstr ":meth:`.assertTrue`"

#: ../../library/unittest.rst:1336
msgid "failUnless, assert\\_"
msgstr "failUnless, assert\\_"

#: ../../library/unittest.rst:1337
msgid ":meth:`.assertFalse`"
msgstr ":meth:`.assertFalse`"

#: ../../library/unittest.rst:1337
msgid "failIf"
msgstr "failIf"

#: ../../library/unittest.rst:1338
msgid ":meth:`.assertRaises`"
msgstr ":meth:`.assertRaises`"

#: ../../library/unittest.rst:1338
msgid "failUnlessRaises"
msgstr "failUnlessRaises"

#: ../../library/unittest.rst:1339
msgid ":meth:`.assertAlmostEqual`"
msgstr ":meth:`.assertAlmostEqual`"

#: ../../library/unittest.rst:1339
msgid "failUnlessAlmostEqual"
msgstr "failUnlessAlmostEqual"

#: ../../library/unittest.rst:1340
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ":meth:`.assertNotAlmostEqual`"

#: ../../library/unittest.rst:1340
msgid "failIfAlmostEqual"
msgstr "failIfAlmostEqual"

#: ../../library/unittest.rst:1343
msgid "the aliases listed in the second column"
msgstr "この表の「廃止予定」だったものが実際に廃止されました。"

#: ../../library/unittest.rst:1351
msgid "Grouping tests"
msgstr "テストのグルーピング"

#: ../../library/unittest.rst:1355
msgid ""
"This class represents an aggregation of individual test cases and test "
"suites. The class presents the interface needed by the test runner to allow "
"it to be run as any other test case.  Running a :class:`TestSuite` instance "
"is the same as iterating over the suite, running each test individually."
msgstr ""
"このクラスは、個々のテストケースやテストスイートの集約を示します。通常のテス"
"トケースと同じようにテストランナーで実行するためのインタフェースを備えていま"
"す。 :class:`TestSuite` インスタンスを実行することはスイートの繰り返しを使っ"
"て個々のテストを実行することと同じです。"

#: ../../library/unittest.rst:1360
msgid ""
"If *tests* is given, it must be an iterable of individual test cases or "
"other test suites that will be used to build the suite initially. Additional "
"methods are provided to add test cases and suites to the collection later on."
msgstr ""
"引数 *tests* が指定された場合、それはテストケースに亘る繰り返し可能オブジェク"
"トまたは内部でスイートを組み立てるための他のテストスイートでなければなりませ"
"ん。後からテストケースやスイートをコレクションに付け加えるためのメソッドも提"
"供されています。"

#: ../../library/unittest.rst:1364
msgid ""
":class:`TestSuite` objects behave much like :class:`TestCase` objects, "
"except they do not actually implement a test.  Instead, they are used to "
"aggregate tests into groups of tests that should be run together. Some "
"additional methods are available to add tests to :class:`TestSuite` "
"instances:"
msgstr ""
":class:`TestSuite` は :class:`TestCase` オブジェクトのように振る舞います。違"
"いは、スイートにはテストを実装しない点にあります。代わりに、テストをまとめて"
"グループ化して、同時に実行します。 :class:`TestSuite` のインスタンスにテスト"
"追加するためのメソッドが用意されています:"

#: ../../library/unittest.rst:1372
msgid "Add a :class:`TestCase` or :class:`TestSuite` to the suite."
msgstr ""
":class:`TestCase` 又は :class:`TestSuite` のインスタンスをスイートに追加しま"
"す。"

#: ../../library/unittest.rst:1377
msgid ""
"Add all the tests from an iterable of :class:`TestCase` and :class:"
"`TestSuite` instances to this test suite."
msgstr ""
"イテラブル *tests* に含まれる全ての :class:`TestCase` 又は :class:"
"`TestSuite` のインスタンスをスイートに追加します。"

#: ../../library/unittest.rst:1380
msgid ""
"This is equivalent to iterating over *tests*, calling :meth:`addTest` for "
"each element."
msgstr ""
"このメソッドは *tests* 上のイテレーションをしながらそれぞれの要素に :meth:"
"`addTest` を呼び出すのと等価です。"

#: ../../library/unittest.rst:1383
msgid ":class:`TestSuite` shares the following methods with :class:`TestCase`:"
msgstr ""
":class:`TestSuite` クラスは :class:`TestCase` と以下のメソッドを共有します:"

#: ../../library/unittest.rst:1388
msgid ""
"Run the tests associated with this suite, collecting the result into the "
"test result object passed as *result*.  Note that unlike :meth:`TestCase."
"run`, :meth:`TestSuite.run` requires the result object to be passed in."
msgstr ""
"スイート内のテストを実行し、結果を *result* で指定した結果オブジェクトに収集"
"します。 :meth:`TestCase.run` と異なり、 :meth:`TestSuite.run` では必ず結果オ"
"ブジェクトを指定する必要があります。"

#: ../../library/unittest.rst:1396
msgid ""
"Run the tests associated with this suite without collecting the result. This "
"allows exceptions raised by the test to be propagated to the caller and can "
"be used to support running tests under a debugger."
msgstr ""
"このスイートに関連づけられたテストを結果を収集せずに実行します。これによりテ"
"ストで送出された例外は呼び出し元に伝わるようになり、デバッガの下でのテスト実"
"行をサポートできるようになります。"

#: ../../library/unittest.rst:1403
msgid ""
"Return the number of tests represented by this test object, including all "
"individual tests and sub-suites."
msgstr ""
"このテストオブジェクトによって表現されるテストの数を返します。これには個別の"
"テストと下位のスイートも含まれます。"

#: ../../library/unittest.rst:1409
msgid ""
"Tests grouped by a :class:`TestSuite` are always accessed by iteration. "
"Subclasses can lazily provide tests by overriding :meth:`__iter__`. Note "
"that this method maybe called several times on a single suite (for example "
"when counting tests or comparing for equality) so the tests returned must be "
"the same for repeated iterations."
msgstr ""
":class:`TestSuite` でグループ化されたテストはイテレータでアクセスできます。サ"
"ブクラスは :meth:`__iter__` をオーバーライドすることで、テストへのアクセスを"
"定義します。1つのメソッド内でこのメソッドは何度も呼ばれる可能性があることに注"
"意してください (例えば、テスト数のカウントと等価性の比較)。そのため、イテレー"
"ションを繰り返しても同じテストを返すように実装してください。"

#: ../../library/unittest.rst:1415
msgid ""
"In earlier versions the :class:`TestSuite` accessed tests directly rather "
"than through iteration, so overriding :meth:`__iter__` wasn't sufficient for "
"providing tests."
msgstr ""
"以前のバージョンでは :class:`TestSuite` はイテレータではなく、直接テストにア"
"クセスしていました。そのため、 :meth:`__iter__` をオーバーラードしてもテスト"
"にアクセスできませんでした。"

#: ../../library/unittest.rst:1420
msgid ""
"In the typical usage of a :class:`TestSuite` object, the :meth:`run` method "
"is invoked by a :class:`TestRunner` rather than by the end-user test harness."
msgstr ""
"通常、 :class:`TestSuite` の :meth:`run` メソッドは :class:`TestRunner` が起"
"動するため、ユーザが直接実行する必要はありません。"

#: ../../library/unittest.rst:1425
msgid "Loading and running tests"
msgstr "テストのロードと起動"

#: ../../library/unittest.rst:1429
msgid ""
"The :class:`TestLoader` class is used to create test suites from classes and "
"modules.  Normally, there is no need to create an instance of this class; "
"the :mod:`unittest` module provides an instance that can be shared as :data:"
"`unittest.defaultTestLoader`.  Using a subclass or instance, however, allows "
"customization of some configurable properties."
msgstr ""
":class:`TestLoader` クラスはクラスとモジュールからテストスイートを生成しま"
"す。通常、このクラスのインスタンスを明示的に生成する必要はありません。 :mod:"
"`unittest` モジュールの :data:`unittest.defaultTestLoader` を共用インスタンス"
"として使用することができます。 しかし、このクラスのサブクラスやインスタンス"
"で、属性をカスタマイズすることができます。"

#: ../../library/unittest.rst:1435
msgid ":class:`TestLoader` objects have the following methods:"
msgstr ":class:`TestLoader` のオブジェクトには以下のメソッドがあります:"

#: ../../library/unittest.rst:1440
msgid ""
"Return a suite of all test cases contained in the :class:`TestCase`\\ -"
"derived :class:`testCaseClass`."
msgstr ""
":class:`TestCase` の派生クラス :class:`testCaseClass` に含まれる全テストケー"
"スのスイートを返します。"

#: ../../library/unittest.rst:1446
msgid ""
"Return a suite of all test cases contained in the given module. This method "
"searches *module* for classes derived from :class:`TestCase` and creates an "
"instance of the class for each test method defined for the class."
msgstr ""
"指定したモジュールに含まれる全テストケースのスイートを返します。このメソッド"
"は *module* 内の :class:`TestCase` 派生クラスを検索し、見つかったクラスのテス"
"トメソッドごとにクラスのインスタンスを作成します。"

#: ../../library/unittest.rst:1453
msgid ""
"While using a hierarchy of :class:`TestCase`\\ -derived classes can be "
"convenient in sharing fixtures and helper functions, defining test methods "
"on base classes that are not intended to be instantiated directly does not "
"play well with this method.  Doing so, however, can be useful when the "
"fixtures are different and defined in subclasses."
msgstr ""
":class:`TestCase` クラスを基底クラスとしてクラス階層を構築すると fixture や補"
"助的な関数をうまく共用することができますが、基底クラスに直接インスタンス化で"
"きないテストメソッドがあると、この :meth:`loadTestsFromModule` を使うことがで"
"きません。この場合でも、 fixture が全て別々で定義がサブクラスにある場合は使用"
"することができます。"

#: ../../library/unittest.rst:1459
msgid ""
"If a module provides a ``load_tests`` function it will be called to load the "
"tests. This allows modules to customize test loading. This is the "
"`load_tests protocol`_."
msgstr ""
"モジュールが ``load_tests`` 関数を用意している場合、この関数がテストのロード"
"に使われます。これによりテストのロードをカスタマイズできます。これが "
"`load_tests プロトコル`_ です。"

#: ../../library/unittest.rst:1463
msgid "Support for ``load_tests`` added."
msgstr "``load_tests`` のサポートが追加されました。"

#: ../../library/unittest.rst:1469
msgid "Return a suite of all test cases given a string specifier."
msgstr "文字列で指定される全テストケースを含むスイートを返します。"

#: ../../library/unittest.rst:1471
msgid ""
"The specifier *name* is a \"dotted name\" that may resolve either to a "
"module, a test case class, a test method within a test case class, a :class:"
"`TestSuite` instance, or a callable object which returns a :class:`TestCase` "
"or :class:`TestSuite` instance.  These checks are applied in the order "
"listed here; that is, a method on a possible test case class will be picked "
"up as \"a test method within a test case class\", rather than \"a callable "
"object\"."
msgstr ""
"*name* には \"ドット修飾名\" でモジュールかテストケースクラス、テストケースク"
"ラス内のメソッド、 :class:`TestSuite` インスタンスまたは :class:`TestCase` "
"か :class:`TestSuite` のインスタンスを返す呼び出し可能オブジェクトを指定しま"
"す。このチェックはここで挙げた順番に行なわれます。すなわち、候補テストケース"
"クラス内のメソッドは「呼び出し可能オブジェクト」としてではなく「テストケース"
"クラス内のメソッド」として拾い出されます。"

#: ../../library/unittest.rst:1479
msgid ""
"For example, if you have a module :mod:`SampleTests` containing a :class:"
"`TestCase`\\ -derived class :class:`SampleTestCase` with three test methods "
"(:meth:`test_one`, :meth:`test_two`, and :meth:`test_three`), the specifier "
"``'SampleTests.SampleTestCase'`` would cause this method to return a suite "
"which will run all three test methods. Using the specifier ``'SampleTests."
"SampleTestCase.test_two'`` would cause it to return a test suite which will "
"run only the :meth:`test_two` test method. The specifier can refer to "
"modules and packages which have not been imported; they will be imported as "
"a side-effect."
msgstr ""
"例えば :mod:`SampleTests` モジュールに :class:`TestCase` から派生した :class:"
"`SampleTestCase` クラスがあり、 :class:`SampleTestCase` にはテストメソッド :"
"meth:`test_one` ・ :meth:`test_two` ・ :meth:`test_three` があるとします。こ"
"の場合、 *name* に ``'SampleTests.SampleTestCase'`` と指定すると、 :class:"
"`SampleTestCase` の三つのテストメソッドを実行するテストスイートが作成されま"
"す。 ``'SampleTests.SampleTestCase.test_two'`` と指定すれば、 :meth:"
"`test_two` だけを実行するテストスイートが作成されます。インポートされていない"
"モジュールやパッケージ名を含んだ名前を指定した場合は自動的にインポートされま"
"す。"

#: ../../library/unittest.rst:1489
msgid "The method optionally resolves *name* relative to the given *module*."
msgstr "また、*module* を指定した場合、*module* 内の *name* を取得します。"

#: ../../library/unittest.rst:1494
msgid ""
"Similar to :meth:`loadTestsFromName`, but takes a sequence of names rather "
"than a single name.  The return value is a test suite which supports all the "
"tests defined for each name."
msgstr ""
":meth:`loadTestsFromName` と同じですが、名前を一つだけ指定するのではなく、複"
"数の名前のシーケンスを指定する事ができます。戻り値は *names* 中の名前で指定さ"
"れるテスト全てを含むテストスイートです。"

#: ../../library/unittest.rst:1501
msgid ""
"Return a sorted sequence of method names found within *testCaseClass*; this "
"should be a subclass of :class:`TestCase`."
msgstr ""
"*testCaseClass* 中の全てのメソッド名を含むソート済みシーケンスを返します。 "
"*testCaseClass* は :class:`TestCase` のサブクラスでなければなりません。"

#: ../../library/unittest.rst:1507
msgid ""
"Find all the test modules by recursing into subdirectories from the "
"specified start directory, and return a TestSuite object containing them. "
"Only test files that match *pattern* will be loaded. (Using shell style "
"pattern matching.) Only module names that are importable (i.e. are valid "
"Python identifiers) will be loaded."
msgstr ""
"指定された開始ディレクトリからサブディレクトリに再帰することですべてのテスト"
"モジュールを検索し、それらを含む TestSuite オブジェクトを返します。*pattern* "
"にマッチしたテストファイルだけがロードの対象になります。 (シェルスタイルのパ"
"ターンマッチングが使われます)。その中で、インポート可能なもジュール (つまり "
"Python の識別子として有効であるということです) がロードされます。"

#: ../../library/unittest.rst:1513
msgid ""
"All test modules must be importable from the top level of the project. If "
"the start directory is not the top level directory then the top level "
"directory must be specified separately."
msgstr ""
"すべてのテストモジュールはプロジェクトのトップレベルからインポート可能である"
"必要があります。開始ディレクトリがトップレベルディレクトリでない場合は、トッ"
"プレベルディレクトリが分離できなくてはいけません。"

#: ../../library/unittest.rst:1517
msgid ""
"If importing a module fails, for example due to a syntax error, then this "
"will be recorded as a single error and discovery will continue."
msgstr ""
"例えば、シンタックスエラーなどで、モジュールのインポートに失敗した場合、エ"
"ラーが記録され、ディスカバリ自体は続けられます。"

#: ../../library/unittest.rst:1520
msgid ""
"If a test package name (directory with :file:`__init__.py`) matches the "
"pattern then the package will be checked for a ``load_tests`` function. If "
"this exists then it will be called with *loader*, *tests*, *pattern*."
msgstr ""
"テストパッケージ名 (:file:`__init__.py` の置かれたディレクトリ名) がパターン"
"にマッチした場合、 ``load_tests`` 関数がチェックされます。この関数が存在して"
"いる場合、この関数に *loader*, *tests*, *pattern* が渡され呼び出されます。"

#: ../../library/unittest.rst:1525
msgid ""
"If load_tests exists then discovery does *not* recurse into the package, "
"``load_tests`` is responsible for loading all tests in the package."
msgstr ""
"load_tests が存在して、ディスカバリがパッケージ内を再帰的な検索を続けている途"
"中で *ない* 場合、 ``load_tests`` はそのパッケージ内の全てのテストをロードす"
"る責務を担います。"

#: ../../library/unittest.rst:1528
msgid ""
"The pattern is deliberately not stored as a loader attribute so that "
"packages can continue discovery themselves. *top_level_dir* is stored so "
"``load_tests`` does not need to pass this argument in to ``loader."
"discover()``."
msgstr ""
"意図的にパターンはローダの属性として保持されないようになっています。それによ"
"り、パッケージが自分自身のディスカバリを続ける事ができます。*top_level_dir* "
"は保持されるため、``load_tests`` はこの引数を ``loader.discover()`` に渡す必"
"要はありません。"

#: ../../library/unittest.rst:1533
msgid "*start_dir* can be a dotted module name as well as a directory."
msgstr "*start_dir* はドット付のモジュール名でもディレクトリでも構いません。"

#: ../../library/unittest.rst:1537
msgid ""
"The following attributes of a :class:`TestLoader` can be configured either "
"by subclassing or assignment on an instance:"
msgstr ""
"以下の属性は、サブクラス化またはインスタンスの属性値を変更して :class:"
"`TestLoader` をカスタマイズする場合に使用します:"

#: ../../library/unittest.rst:1543
msgid ""
"String giving the prefix of method names which will be interpreted as test "
"methods.  The default value is ``'test'``."
msgstr ""
"テストメソッドの名前と判断されるメソッド名の接頭語を示す文字列。デフォルト値"
"は ``'test'`` です。"

#: ../../library/unittest.rst:1546
msgid ""
"This affects :meth:`getTestCaseNames` and all the :meth:`loadTestsFrom\\*` "
"methods."
msgstr ""
"この値は :meth:`getTestCaseNames` と全ての :meth:`loadTestsFrom\\*` メソッド"
"に影響を与えます。"

#: ../../library/unittest.rst:1552
msgid ""
"Function to be used to compare method names when sorting them in :meth:"
"`getTestCaseNames` and all the :meth:`loadTestsFrom\\*` methods. The default "
"value is the built-in :func:`cmp` function; the attribute can also be set "
"to :const:`None` to disable the sort."
msgstr ""
":meth:`getTestCaseNames` および全ての :meth:`loadTestsFrom\\*` メソッドでメ"
"ソッド名をソートする際に使用する比較関数。デフォルト値は組み込み関数 :func:"
"`cmp` です。ソートを行なわないようにこの属性に :const:`None` を指定することも"
"できます。"

#: ../../library/unittest.rst:1560
msgid ""
"Callable object that constructs a test suite from a list of tests. No "
"methods on the resulting object are needed.  The default value is the :class:"
"`TestSuite` class."
msgstr ""
"テストのリストからテストスイートを構築する呼び出し可能オブジェクト。メソッド"
"を持つ必要はありません。デフォルト値は :class:`TestSuite` です。"

#: ../../library/unittest.rst:1564
msgid "This affects all the :meth:`loadTestsFrom\\*` methods."
msgstr "この値は全ての :meth:`loadTestsFrom\\*` メソッドに影響を与えます。"

#: ../../library/unittest.rst:1569
msgid ""
"This class is used to compile information about which tests have succeeded "
"and which have failed."
msgstr ""
"このクラスはどのテストが成功しどのテストが失敗したかという情報を収集するのに"
"使います。"

#: ../../library/unittest.rst:1572
msgid ""
"A :class:`TestResult` object stores the results of a set of tests.  The :"
"class:`TestCase` and :class:`TestSuite` classes ensure that results are "
"properly recorded; test authors do not need to worry about recording the "
"outcome of tests."
msgstr ""
":class:`TestResult` は、複数のテスト結果を記録します。 :class:`TestCase` クラ"
"スと :class:`TestSuite` クラスのテスト結果を正しく記録しますので、テスト開発"
"者が独自にテスト結果を管理する処理を開発する必要はありません。"

#: ../../library/unittest.rst:1577
msgid ""
"Testing frameworks built on top of :mod:`unittest` may want access to the :"
"class:`TestResult` object generated by running a set of tests for reporting "
"purposes; a :class:`TestResult` instance is returned by the :meth:"
"`TestRunner.run` method for this purpose."
msgstr ""
":mod:`unittest` を利用したテストフレームワークでは、 :meth:`TestRunner.run` "
"が返す :class:`TestResult` インスタンスを参照し、テスト結果をレポートします。"

#: ../../library/unittest.rst:1582
msgid ""
":class:`TestResult` instances have the following attributes that will be of "
"interest when inspecting the results of running a set of tests:"
msgstr ""
":class:`TestResult` インスタンスの以下の属性は、テストの実行結果を検査する際"
"に使用することができます:"

#: ../../library/unittest.rst:1588
msgid ""
"A list containing 2-tuples of :class:`TestCase` instances and strings "
"holding formatted tracebacks. Each tuple represents a test which raised an "
"unexpected exception."
msgstr ""
":class:`TestCase` と例外のトレースバック情報をフォーマットした文字列の 2 要素"
"タプルからなるリスト。それぞれのタプルは予想外の例外を送出したテストに対応し"
"ます。"

#: ../../library/unittest.rst:1592 ../../library/unittest.rst:1602
msgid "Contains formatted tracebacks instead of :func:`sys.exc_info` results."
msgstr ""
":func:`sys.exc_info` の結果ではなく、フォーマットしたトレースバックを保存する"
"ようにしました。"

#: ../../library/unittest.rst:1598
msgid ""
"A list containing 2-tuples of :class:`TestCase` instances and strings "
"holding formatted tracebacks. Each tuple represents a test where a failure "
"was explicitly signalled using the :meth:`TestCase.assert\\*` methods."
msgstr ""
":class:`TestCase` と例外のトレースバック情報をフォーマットした文字列の 2 要素"
"タプルからなるリスト。それぞれのタプルは :meth:`TestCase.assert\\*` メソッド"
"を使って見つけ出した失敗に対応します。"

#: ../../library/unittest.rst:1607
msgid ""
"A list containing 2-tuples of :class:`TestCase` instances and strings "
"holding the reason for skipping the test."
msgstr ""
":class:`TestCase` インスタンスと理由の文字列の2要素タプルからなるリストを保持"
"します。"

#: ../../library/unittest.rst:1614
msgid ""
"A list containing 2-tuples of :class:`TestCase` instances and strings "
"holding formatted tracebacks.  Each tuple represents an expected failure of "
"the test case."
msgstr ""
":class:`TestCase` と例外のトレースバック情報をフォーマットした文字列の 2 要素"
"タプルからなるリスト。それぞれのタプルは意図した失敗に対応します。"

#: ../../library/unittest.rst:1620
msgid ""
"A list containing :class:`TestCase` instances that were marked as expected "
"failures, but succeeded."
msgstr ""
"意図した失敗のマークが付いていながら成功してしまった :class:`TestCase` のイン"
"スタンスのリスト。"

#: ../../library/unittest.rst:1625
msgid ""
"Set to ``True`` when the execution of tests should stop by :meth:`stop`."
msgstr "``True`` が設定されると :meth:`stop` によりテストの実行が停止します。"

#: ../../library/unittest.rst:1630
msgid "The total number of tests run so far."
msgstr "これまでに実行したテストの総数です。"

#: ../../library/unittest.rst:1635
msgid ""
"If set to true, ``sys.stdout`` and ``sys.stderr`` will be buffered in "
"between :meth:`startTest` and :meth:`stopTest` being called. Collected "
"output will only be echoed onto the real ``sys.stdout`` and ``sys.stderr`` "
"if the test fails or errors. Any output is also attached to the failure / "
"error message."
msgstr ""
"``True`` が設定されると、 ``sys.stdout`` と ``sys.stderr`` は、 :meth:"
"`startTest` から :meth:`stopTest` が呼ばれるまでの間バッファリングされます。"
"実際に、結果が ``sys.stdout`` と ``sys.stderr`` に出力されるのは、テストが失"
"敗するかエラーが発生した時になります。表示の際には、全ての失敗 / エラーメッ"
"セージが表示されます。"

#: ../../library/unittest.rst:1645
msgid ""
"If set to true :meth:`stop` will be called on the first failure or error, "
"halting the test run."
msgstr ""
"``True`` が設定されると、 :meth:`stop` が始めの失敗もしくはエラーの時に呼び出"
"され、テストの実行が終了します。"

#: ../../library/unittest.rst:1653
msgid ""
"Return ``True`` if all tests run so far have passed, otherwise returns "
"``False``."
msgstr ""
"これまでに実行したテストが全て成功していれば ``True`` を、それ以外なら "
"``False`` を返します。"

#: ../../library/unittest.rst:1659
msgid ""
"This method can be called to signal that the set of tests being run should "
"be aborted by setting the :attr:`shouldStop` attribute to ``True``. :class:"
"`TestRunner` objects should respect this flag and return without running any "
"additional tests."
msgstr ""
"このメソッドを呼び出して :class:`TestResult` の :attr:`shouldStop` 属性に "
"``True`` をセットすることで、実行中のテストは中断しなければならないというシグ"
"ナルを送ることができます。 :class:`TestRunner` オブジェクトはこのフラグを尊重"
"してそれ以上のテストを実行することなく復帰しなければなりません。"

#: ../../library/unittest.rst:1664
msgid ""
"For example, this feature is used by the :class:`TextTestRunner` class to "
"stop the test framework when the user signals an interrupt from the "
"keyboard.  Interactive tools which provide :class:`TestRunner` "
"implementations can use this in a similar manner."
msgstr ""
"たとえばこの機能は、ユーザのキーボード割り込みを受け取って :class:"
"`TextTestRunner` クラスがテストフレームワークを停止させるのに使えます。 :"
"class:`TestRunner` の実装を提供する対話的なツールでも同じように使用することが"
"できます。"

#: ../../library/unittest.rst:1669
msgid ""
"The following methods of the :class:`TestResult` class are used to maintain "
"the internal data structures, and may be extended in subclasses to support "
"additional reporting requirements.  This is particularly useful in building "
"tools which support interactive reporting while tests are being run."
msgstr ""
":class:`TestResult` クラスの以下のメソッドは内部データ管理用のメソッドです"
"が、対話的にテスト結果をレポートするテストツールを開発する場合などにはサブク"
"ラスで拡張することができます。"

#: ../../library/unittest.rst:1677
msgid "Called when the test case *test* is about to be run."
msgstr "*test* を実行する直前に呼び出されます。"

#: ../../library/unittest.rst:1681
msgid ""
"Called after the test case *test* has been executed, regardless of the "
"outcome."
msgstr "*test* の実行直後に、テスト結果に関わらず呼び出されます。"

#: ../../library/unittest.rst:1686
msgid "Called once before any tests are executed."
msgstr "全てのテストが実行される前に一度だけ実行されます。"

#: ../../library/unittest.rst:1693
msgid "Called once after all tests are executed."
msgstr "全てのテストが実行された後に一度だけ実行されます。"

#: ../../library/unittest.rst:1700
msgid ""
"Called when the test case *test* raises an unexpected exception. *err* is a "
"tuple of the form returned by :func:`sys.exc_info`: ``(type, value, "
"traceback)``."
msgstr ""
"テスト *test* 実行中に、想定外の例外が発生した場合に呼び出されます。 *err* "
"は :func:`sys.exc_info` が返すタプル ``(type, value, traceback)`` です。"

#: ../../library/unittest.rst:1704
msgid ""
"The default implementation appends a tuple ``(test, formatted_err)`` to the "
"instance's :attr:`errors` attribute, where *formatted_err* is a formatted "
"traceback derived from *err*."
msgstr ""
"デフォルトの実装では、タプル、 ``(test, formatted_err)`` をインスタンスの :"
"attr:`errors` 属性に追加します。ここで、 *formatted_err* は、 *err* から導出"
"される、整形されたトレースバックです。"

#: ../../library/unittest.rst:1711
msgid ""
"Called when the test case *test* signals a failure. *err* is a tuple of the "
"form returned by :func:`sys.exc_info`: ``(type, value, traceback)``."
msgstr ""
"テストケース *test* が失敗した場合に呼び出されます。 *err* は :func:`sys."
"exc_info` が返すタプル ``(type, value, traceback)`` です。"

#: ../../library/unittest.rst:1714
msgid ""
"The default implementation appends a tuple ``(test, formatted_err)`` to the "
"instance's :attr:`failures` attribute, where *formatted_err* is a formatted "
"traceback derived from *err*."
msgstr ""
"デフォルトの実装では、タプル、 ``(test, formatted_err)`` をインスタンスの :"
"attr:`failures` 属性に追加します。ここで、 *formatted_err* は、 *err* から導"
"出される、整形されたトレースバックです。"

#: ../../library/unittest.rst:1721
msgid "Called when the test case *test* succeeds."
msgstr "テストケース *test* が成功した場合に呼び出されます。"

#: ../../library/unittest.rst:1723
msgid "The default implementation does nothing."
msgstr "デフォルトの実装では何もしません。"

#: ../../library/unittest.rst:1728
msgid ""
"Called when the test case *test* is skipped.  *reason* is the reason the "
"test gave for skipping."
msgstr ""
"*test* がスキップされた時に呼び出されます。*reason* はスキップの際に渡された"
"理由の文字列です。"

#: ../../library/unittest.rst:1731
msgid ""
"The default implementation appends a tuple ``(test, reason)`` to the "
"instance's :attr:`skipped` attribute."
msgstr ""
"デフォルトの実装では、 ``(test, reason)`` のタプルをインスタンスの :attr:"
"`skipped` 属性に追加します。"

#: ../../library/unittest.rst:1737
msgid ""
"Called when the test case *test* fails, but was marked with the :func:"
"`expectedFailure` decorator."
msgstr ""
":func:`expectedFailure` のデコレータでマークされた *test* が失敗した時に呼び"
"出されます。"

#: ../../library/unittest.rst:1740
msgid ""
"The default implementation appends a tuple ``(test, formatted_err)`` to the "
"instance's :attr:`expectedFailures` attribute, where *formatted_err* is a "
"formatted traceback derived from *err*."
msgstr ""
"デフォルトの実装では ``(test, formatted_err)`` のタプルをインスタンスの :"
"attr:`expectedFailures` に追加します。ここで *formatted_err* は *err* から派"
"生した整形されたトレースバックです。"

#: ../../library/unittest.rst:1747
msgid ""
"Called when the test case *test* was marked with the :func:`expectedFailure` "
"decorator, but succeeded."
msgstr ""
":func:`expectedFailure` のデコレータでマークされた *test* が成功した時に呼び"
"出されます。"

#: ../../library/unittest.rst:1750
msgid ""
"The default implementation appends the test to the instance's :attr:"
"`unexpectedSuccesses` attribute."
msgstr ""
"デフォルトの実装ではテストをインスタンスの :attr:`unexpectedSuccesses` 属性に"
"追加します。"

#: ../../library/unittest.rst:1755
msgid ""
"A concrete implementation of :class:`TestResult` used by the :class:"
"`TextTestRunner`."
msgstr ""
":class:`TextTestRunner` に使用される :class:`TestResult` の具象実装です。"

#: ../../library/unittest.rst:1758
msgid ""
"This class was previously named ``_TextTestResult``. The old name still "
"exists as an alias but is deprecated."
msgstr ""
"このクラスは以前 ``_TextTestResult`` という名前でした。以前の名前はエイリアス"
"として残っていますが非推奨です。"

#: ../../library/unittest.rst:1764
msgid ""
"Instance of the :class:`TestLoader` class intended to be shared.  If no "
"customization of the :class:`TestLoader` is needed, this instance can be "
"used instead of repeatedly creating new instances."
msgstr ""
":class:`TestLoader` のインスタンスで、共用することが目的です。 :class:"
"`TestLoader` をカスタマイズする必要がなければ、新しい :class:`TestLoader` オ"
"ブジェクトを作らずにこのインスタンスを使用します。"

#: ../../library/unittest.rst:1772
msgid ""
"A basic test runner implementation which prints results on standard error. "
"It has a few configurable parameters, but is essentially very simple.  "
"Graphical applications which run test suites should provide alternate "
"implementations."
msgstr ""
"実行結果を標準エラーに出力する、単純なテストランナー。いくつかの設定項目があ"
"りますが、非常に単純です。グラフィカルなテスト実行アプリケーションでは、独自"
"のテストランナーを作成してください。"

#: ../../library/unittest.rst:1778
msgid ""
"This method returns the instance of ``TestResult`` used by :meth:`run`. It "
"is not intended to be called directly, but can be overridden in subclasses "
"to provide a custom ``TestResult``."
msgstr ""
"このメソッドは :meth:`run` で使われる ``TestResult`` のインスタンスを返しま"
"す。このメソッドは明示的に呼び出す必要はありませんが、サブクラスで "
"``TestResult`` をカスタマイズすることができます。"

#: ../../library/unittest.rst:1782
msgid ""
"``_makeResult()`` instantiates the class or callable passed in the "
"``TextTestRunner`` constructor as the ``resultclass`` argument. It defaults "
"to :class:`TextTestResult` if no ``resultclass`` is provided. The result "
"class is instantiated with the following arguments::"
msgstr ""
"``_makeResult()`` は、 ``TextTestRunner`` のコンストラクタで ``resultclass`` "
"引数として渡されたクラスもしくはコーラブルオブジェクトをインスタンス化しま"
"す。 ``resultclass`` が指定されていない場合には、デフォルトで :class:"
"`TextTestResult` が使用されます。結果のクラスは以下の引数が渡されインスタンス"
"化されます::"

#: ../../library/unittest.rst:1792
msgid ""
"A command-line program that loads a set of tests from *module* and runs "
"them; this is primarily for making test modules conveniently executable. The "
"simplest use for this function is to include the following line at the end "
"of a test script::"
msgstr ""
"*module* から複数のテストを読み込んで実行するためのコマンドラインプログラム。"
"この関数を使えば、簡単に実行可能なテストモジュールを作成する事ができます。一"
"番簡単なこの関数の使い方は、以下の行をテストスクリプトの最後に置くことです::"

#: ../../library/unittest.rst:1800
msgid ""
"You can run tests with more detailed information by passing in the verbosity "
"argument::"
msgstr "より詳細な情報は verbosity 引数を指定して実行すると得られます::"

#: ../../library/unittest.rst:1806
msgid ""
"The *defaultTest* argument is the name of the test to run if no test names "
"are specified via *argv*.  If not specified or ``None`` and no test names "
"are provided via *argv*, all tests found in *module* are run."
msgstr ""
"*defaultTest* 引数は、 *argv* で指定されるテスト名がない場合に実行するテスト"
"名です。これを指定しないか ``None`` を指定し、また *argv* からも与えられない"
"場合は、 *module* 内で見つかる全てのテストを実行します。"

#: ../../library/unittest.rst:1810
msgid ""
"The *argv* argument can be a list of options passed to the program, with the "
"first element being the program name.  If not specified or ``None``, the "
"values of :data:`sys.argv` are used."
msgstr ""
"*argv* 引数には、プログラムに渡されたオプションのリストを、最初の要素がプログ"
"ラム名のままで渡せます。指定しないか ``None`` の場合は :data:`sys.argv` が使"
"われます。"

#: ../../library/unittest.rst:1814
msgid ""
"The *testRunner* argument can either be a test runner class or an already "
"created instance of it. By default ``main`` calls :func:`sys.exit` with an "
"exit code indicating success or failure of the tests run."
msgstr ""
"引数、 *testRunner* は、test runner class、あるいは、そのインスタンスのどちら"
"でも構いません。でフォルトでは ``main`` はテストが成功したか失敗したかに対応"
"した終了コードと共に :func:`sys.exit` を呼び出します。"

#: ../../library/unittest.rst:1818
msgid ""
"The *testLoader* argument has to be a :class:`TestLoader` instance, and "
"defaults to :data:`defaultTestLoader`."
msgstr ""
"*testLoader* 引数は :class:`TestLoader` インスタンスでなければなりません。デ"
"フォルトは :data:`defaultTestLoader` です。"

#: ../../library/unittest.rst:1821
msgid ""
"``main`` supports being used from the interactive interpreter by passing in "
"the argument ``exit=False``. This displays the result on standard output "
"without calling :func:`sys.exit`::"
msgstr ""
"``main`` は、 ``exit=False`` を指定する事で対話的なインタプリタから使用するこ"
"ともできます。この引数を指定すると、 :func:`sys.exit` を呼ばずに、結果のみを"
"出力します::"

#: ../../library/unittest.rst:1828
msgid ""
"The *failfast*, *catchbreak* and *buffer* parameters have the same effect as "
"the same-name `command-line options`_."
msgstr ""
"*failfast*, *catchbreak*, *buffer* は、`コマンドラインオプション`_ にある同名"
"のオプションと同じ効果のあるパラメータです。"

#: ../../library/unittest.rst:1831
msgid ""
"Calling ``main`` actually returns an instance of the ``TestProgram`` class. "
"This stores the result of the tests run as the ``result`` attribute."
msgstr ""
"``main`` を呼び出すと、``TestProgram`` のインスタンスが返されます。このインス"
"タンスは、``result`` 属性にテスト結果を保持します。"

#: ../../library/unittest.rst:1834
msgid ""
"The *exit*, *verbosity*, *failfast*, *catchbreak* and *buffer* parameters "
"were added."
msgstr ""
"パラメータ *exit*, *verbosity*, *failfast*, *catchbreak*, *buffer* が追加され"
"ました。"

#: ../../library/unittest.rst:1840
msgid "load_tests Protocol"
msgstr "load_tests プロトコル"

#: ../../library/unittest.rst:1844
msgid ""
"Modules or packages can customize how tests are loaded from them during "
"normal test runs or test discovery by implementing a function called "
"``load_tests``."
msgstr ""
"モジュールやパッケージには、``load_tests`` と呼ばれる関数を実装できます。これ"
"により、通常のテスト実行時やテストディスカバリ時のテストのロードされ方をカス"
"タマイズできます。"

#: ../../library/unittest.rst:1847
msgid ""
"If a test module defines ``load_tests`` it will be called by :meth:"
"`TestLoader.loadTestsFromModule` with the following arguments::"
msgstr ""
"テストモジュールが ``load_tests`` を定義していると、それが :meth:`TestLoader."
"loadTestsFromModule` から呼ばれます。引数は以下です::"

#: ../../library/unittest.rst:1852
msgid "It should return a :class:`TestSuite`."
msgstr "これは :class:`TestSuite` を返すべきです。"

#: ../../library/unittest.rst:1854
msgid ""
"*loader* is the instance of :class:`TestLoader` doing the loading. "
"*standard_tests* are the tests that would be loaded by default from the "
"module. It is common for test modules to only want to add or remove tests "
"from the standard set of tests. The third argument is used when loading "
"packages as part of test discovery."
msgstr ""
"*loader* はローディングを行う :class:`TestLoader` のインスタンスです。 "
"*standard_tests* は、そのモジュールからデフォルトでロードされるテストです。こ"
"れは、テストの標準セットのテストの追加や削除のみを行いたいテストモジュールに"
"一般に使われます。第三引数は、パッケージをテストディスカバリの一部としてロー"
"ドするときに使われます。"

#: ../../library/unittest.rst:1860
msgid ""
"A typical ``load_tests`` function that loads tests from a specific set of :"
"class:`TestCase` classes may look like::"
msgstr ""
"特定の :class:`TestCase` クラスのセットからテストをロードする典型的な "
"``load_tests`` 関数は、このようになります::"

#: ../../library/unittest.rst:1872
msgid ""
"If discovery is started, either from the command line or by calling :meth:"
"`TestLoader.discover`, with a pattern that matches a package name then the "
"package :file:`__init__.py` will be checked for ``load_tests``."
msgstr ""
"ディスカバリが開始されると、パッケージ名にマッチするパターンを、コマンドライ"
"ンまたは :meth:`TestLoader.discover` に与えることで、 :file:`__init__.py` に "
"``load_tests`` があるか調べられます。"

#: ../../library/unittest.rst:1878
msgid ""
"The default pattern is ``'test*.py'``. This matches all Python files that "
"start with ``'test'`` but *won't* match any test directories."
msgstr ""
"デフォルトのパターンは ``'test*.py'`` です。これは ``'test'`` で始まるすべて"
"の Python ファイルにマッチしますが、テストディレクトリにはマッチ *しません*。"

#: ../../library/unittest.rst:1881
msgid "A pattern like ``'test*'`` will match test packages as well as modules."
msgstr ""
"``'test*'`` のようなパターンは、モジュールだけでなくテストパッケージにもマッ"
"チします。"

#: ../../library/unittest.rst:1884
msgid ""
"If the package :file:`__init__.py` defines ``load_tests`` then it will be "
"called and discovery not continued into the package. ``load_tests`` is "
"called with the following arguments::"
msgstr ""
"パッケージ :file:`__init__.py` が ``load_tests`` を定義していると、それが呼び"
"出され、ディスカバリはそれ以上パッケージ内で続けられません。 ``load_tests`` "
"が以下の引数で呼び出されます::"

#: ../../library/unittest.rst:1890
msgid ""
"This should return a :class:`TestSuite` representing all the tests from the "
"package. (``standard_tests`` will only contain tests collected from :file:"
"`__init__.py`.)"
msgstr ""
"これはパッケージ内のすべてのテストを表す :class:`TestSuite` を返すべきです。 "
"(``standard_tests`` には、 :file:`__init__.py` から収集されたテストのみが含ま"
"れます。)"

#: ../../library/unittest.rst:1894
msgid ""
"Because the pattern is passed into ``load_tests`` the package is free to "
"continue (and potentially modify) test discovery. A 'do nothing' "
"``load_tests`` function for a test package would look like::"
msgstr ""
"パターンは ``load_tests`` に渡されるので、パッケージは自由にテストディスカバ"
"リを継続 (必要なら変更) できます。テストパッケージに '何もしない' "
"``load_tests`` 関数は次のようになります::"

#: ../../library/unittest.rst:1907
msgid "Class and Module Fixtures"
msgstr "クラスとモジュールのフィクスチャ"

#: ../../library/unittest.rst:1909
msgid ""
"Class and module level fixtures are implemented in :class:`TestSuite`. When "
"the test suite encounters a test from a new class then :meth:`tearDownClass` "
"from the previous class (if there is one) is called, followed by :meth:"
"`setUpClass` from the new class."
msgstr ""
"クラスレベルとモジュールレベルのフィクスチャが :class:`TestSuite` に実装され"
"ました。\n"
"テストスイートが新しいクラスのテストを始める時、以前のクラス (あれば)の :"
"meth:`tearDownClass` を呼び出し、その後に新しいクラスの :meth:`setUpClass` を"
"呼び出します。"

#: ../../library/unittest.rst:1914
msgid ""
"Similarly if a test is from a different module from the previous test then "
"``tearDownModule`` from the previous module is run, followed by "
"``setUpModule`` from the new module."
msgstr ""
"同様に、今回のテストのモジュールが前回のテストとは異なる場合、以前のモジュー"
"ルの ``tearDownModule`` を実行し、次に新しいモジュールの ``setUpModule`` を実"
"行します。"

#: ../../library/unittest.rst:1918
msgid ""
"After all the tests have run the final ``tearDownClass`` and "
"``tearDownModule`` are run."
msgstr ""
"すべてのテストが実行された後、最後の ``tearDownClass`` と ``tearDownModule`` "
"が実行されます。"

#: ../../library/unittest.rst:1921
msgid ""
"Note that shared fixtures do not play well with [potential] features like "
"test parallelization and they break test isolation. They should be used with "
"care."
msgstr ""
"なお、共有フィクスチャは、テストの並列化などの [潜在的な] 機能と同時にはうま"
"くいかず、テストの分離を壊すので、気をつけて使うべきです。"

#: ../../library/unittest.rst:1924
msgid ""
"The default ordering of tests created by the unittest test loaders is to "
"group all tests from the same modules and classes together. This will lead "
"to ``setUpClass`` / ``setUpModule`` (etc) being called exactly once per "
"class and module. If you randomize the order, so that tests from different "
"modules and classes are adjacent to each other, then these shared fixture "
"functions may be called multiple times in a single test run."
msgstr ""
"unittest テストローダによるテスト作成のデフォルトの順序では、同じモジュールや"
"クラスからのテストはすべて同じグループにまとめられます。これにより、"
"``setUpClass`` / ``setUpModule`` (など) は、一つのクラスやモジュールにつき一"
"度だけ呼ばれます。この順序をバラバラにし、異なるモジュールやクラスのテストが"
"並ぶようにすると、共有フィクスチャ関数は、一度のテストで複数回呼ばれるように"
"もなります。"

#: ../../library/unittest.rst:1931
msgid ""
"Shared fixtures are not intended to work with suites with non-standard "
"ordering. A ``BaseTestSuite`` still exists for frameworks that don't want to "
"support shared fixtures."
msgstr ""
"共有フィクスチャは標準でない順序で実行されることを意図していません。\n"
"共有フィクスチャをサポートしたくないフレームワークのために、"
"``BaseTestSuite`` がまだ存在しています。"

#: ../../library/unittest.rst:1935
msgid ""
"If there are any exceptions raised during one of the shared fixture "
"functions the test is reported as an error. Because there is no "
"corresponding test instance an ``_ErrorHolder`` object (that has the same "
"interface as a :class:`TestCase`) is created to represent the error. If you "
"are just using the standard unittest test runner then this detail doesn't "
"matter, but if you are a framework author it may be relevant."
msgstr ""
"共有フィクスチャ関数のいずれかで例外が発生した場合、そのテストはエラーとして"
"報告されます。\n"
"そのとき、対応するテストインスタンスが無いので(:class:`TestCase` と同じインタ"
"フェースの) ``_ErrorHolder`` オブジェクトが生成され、エラーを表します。\n"
"標準 unittest テストランナーを使っている場合はこの詳細は問題になりませんが、"
"あなたがフレームワークの作者である場合は注意してください。"

#: ../../library/unittest.rst:1944
msgid "setUpClass and tearDownClass"
msgstr "setUpClass と tearDownClass"

#: ../../library/unittest.rst:1946
msgid "These must be implemented as class methods::"
msgstr "これらはクラスメソッドとして実装されなければなりません::"

#: ../../library/unittest.rst:1959
msgid ""
"If you want the ``setUpClass`` and ``tearDownClass`` on base classes called "
"then you must call up to them yourself. The implementations in :class:"
"`TestCase` are empty."
msgstr ""
"基底クラスの ``setUpClass`` および ``tearDownClass`` を使いたいなら、それらを"
"自分で呼び出さなければなりません。 :class:`TestCase` の実装は空です。"

#: ../../library/unittest.rst:1963
msgid ""
"If an exception is raised during a ``setUpClass`` then the tests in the "
"class are not run and the ``tearDownClass`` is not run. Skipped classes will "
"not have ``setUpClass`` or ``tearDownClass`` run. If the exception is a :exc:"
"`SkipTest` exception then the class will be reported as having been skipped "
"instead of as an error."
msgstr ""
"``setUpClass`` の中で例外が送出されたら、クラス内のテストは実行されず、 "
"``tearDownClass`` も実行されません。スキップされたクラスは ``setUpClass`` も "
"``tearDownClass`` も実行されません。例外が :exc:`SkipTest` 例外であれば、その"
"クラスはエラーではなくスキップされたものとして報告されます。"

#: ../../library/unittest.rst:1971
msgid "setUpModule and tearDownModule"
msgstr "setUpModule と tearDownModule"

#: ../../library/unittest.rst:1973
msgid "These should be implemented as functions::"
msgstr "これらは関数として実装されなければなりません::"

#: ../../library/unittest.rst:1981
msgid ""
"If an exception is raised in a ``setUpModule`` then none of the tests in the "
"module will be run and the ``tearDownModule`` will not be run. If the "
"exception is a :exc:`SkipTest` exception then the module will be reported as "
"having been skipped instead of as an error."
msgstr ""
"``setUpModule`` の中で例外が送出されたら、モジュール内のテストは実行されず、 "
"``tearDownModule`` も実行されません。例外が :exc:`SkipTest` 例外であれば、そ"
"のモジュールはエラーではなくスキップされたものとして報告されます。"

#: ../../library/unittest.rst:1988
msgid "Signal Handling"
msgstr "シグナルハンドリング"

#: ../../library/unittest.rst:1990
msgid ""
"The :option:`-c/--catch <unittest -c>` command-line option to unittest, "
"along with the ``catchbreak`` parameter to :func:`unittest.main()`, provide "
"more friendly handling of control-C during a test run. With catch break "
"behavior enabled control-C will allow the currently running test to "
"complete, and the test run will then end and report all the results so far. "
"A second control-c will raise a :exc:`KeyboardInterrupt` in the usual way."
msgstr ""
"unittest の :option:`-c/--catch <unittest -c>` コマンドラインオプションや、 :"
"func:`unittest.main()` の ``catchbreak`` パラメタは、テスト実行中の control-"
"C の処理をよりフレンドリーにします。中断捕捉動作を有効である場合、 control-C "
"が押されると、現在実行されているテストまで完了され、そのテストランが終わると"
"今までの結果が報告されます。control-C がもう一度押されると、通常通り :exc:"
"`KeyboardInterrupt` が送出されます。"

#: ../../library/unittest.rst:1997
msgid ""
"The control-c handling signal handler attempts to remain compatible with "
"code or tests that install their own :const:`signal.SIGINT` handler. If the "
"``unittest`` handler is called but *isn't* the installed :const:`signal."
"SIGINT` handler, i.e. it has been replaced by the system under test and "
"delegated to, then it calls the default handler. This will normally be the "
"expected behavior by code that replaces an installed handler and delegates "
"to it. For individual tests that need ``unittest`` control-c handling "
"disabled the :func:`removeHandler` decorator can be used."
msgstr ""
"シグナルハンドラを処理する control-c は、独自の :const:`signal.SIGINT` ハンド"
"ラをインストールするコードやテストの互換性を保とうとします。 ``unittest`` ハ"
"ンドラが呼ばれ、それがインストールされた :const:`signal.SIGINT` ハンドラで *"
"なければ* 、すなわちテスト中のシステムに置き換えられて移譲されたなら、それは"
"デフォルトのハンドラを呼び出します。インストールされたハンドラを置き換えて委"
"譲するようなコードは、通常その動作を期待するからです。 ``unittest`` の "
"control-c 処理を無効にしたいような個別のテストには、 :func:`removeHandler` デ"
"コレータが使えます。"

#: ../../library/unittest.rst:2006
msgid ""
"There are a few utility functions for framework authors to enable control-c "
"handling functionality within test frameworks."
msgstr ""
"フレームワークの作者がテストフレームワーク内で control-c 処理を有効にするため"
"の、いくつかのユーティリティ関数があります。"

#: ../../library/unittest.rst:2011
msgid ""
"Install the control-c handler. When a :const:`signal.SIGINT` is received "
"(usually in response to the user pressing control-c) all registered results "
"have :meth:`~TestResult.stop` called."
msgstr ""
"control-c ハンドラをインストールします。(主にユーザが control-c を押したこと"
"により) :const:`signal.SIGINT` が受け取られると、登録した結果すべてに :meth:"
"`~TestResult.stop` が呼び出されます。"

#: ../../library/unittest.rst:2019
msgid ""
"Register a :class:`TestResult` object for control-c handling. Registering a "
"result stores a weak reference to it, so it doesn't prevent the result from "
"being garbage collected."
msgstr ""
"control-c 処理のために :class:`TestResult` を登録します。結果を登録するとそれ"
"に対する弱参照が格納されるので、結果がガベージコレクトされるのを妨げません。"

#: ../../library/unittest.rst:2023
msgid ""
"Registering a :class:`TestResult` object has no side-effects if control-c "
"handling is not enabled, so test frameworks can unconditionally register all "
"results they create independently of whether or not handling is enabled."
msgstr ""
"control-c 処理が有効でなければ、 :class:`TestResult` オブジェクトの登録には副"
"作用がありません。ですからテストフレームワークは、処理が有効か無効かにかかわ"
"らず、作成する全ての結果を無条件に登録できます。"

#: ../../library/unittest.rst:2031
msgid ""
"Remove a registered result. Once a result has been removed then :meth:"
"`~TestResult.stop` will no longer be called on that result object in "
"response to a control-c."
msgstr ""
"登録された結果を削除します。一旦結果が削除されると、control-c が押された際に"
"その結果オブジェクトに対して :meth:`~TestResult.stop` が呼び出されなくなりま"
"す。"

#: ../../library/unittest.rst:2039
msgid ""
"When called without arguments this function removes the control-c handler if "
"it has been installed. This function can also be used as a test decorator to "
"temporarily remove the handler while the test is being executed::"
msgstr ""
"引数なしで呼び出されると、この関数はCtrl+Cのシグナルハンドラを（それがインス"
"トールされていた場合）削除します。また、この関数はテストが実行されている間、"
"Ctrl+Cのハンドラを一時的に削除するテストデコレーターとしても使用できます。"
