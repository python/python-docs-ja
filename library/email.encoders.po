# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Tetsuo Koyama <tkoyama010@gmail.com>, 2021
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-13 14:16+0000\n"
"PO-Revision-Date: 2021-06-28 01:04+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.encoders.rst:2
msgid ":mod:`!email.encoders`: Encoders"
msgstr ":mod:`!email.encoders`: エンコーダー"

#: ../../library/email.encoders.rst:7
msgid "**Source code:** :source:`Lib/email/encoders.py`"
msgstr "**ソースコード:** :source:`Lib/email/encoders.py`"

#: ../../library/email.encoders.rst:11
msgid ""
"This module is part of the legacy (``Compat32``) email API.  In the new API "
"the functionality is provided by the *cte* parameter of the :meth:`~email."
"message.EmailMessage.set_content` method."
msgstr ""
"このモジュールは、レガシーな (``Compat32``) email APIの一部です。新しいAPIで"
"は、この機能は :meth:`~email.message.EmailMessage.set_content` メソッドの"
"*cte*パラメータによって提供されます。"

#: ../../library/email.encoders.rst:15
msgid ""
"This module is deprecated in Python 3.  The functions provided here should "
"not be called explicitly since the :class:`~email.mime.text.MIMEText` class "
"sets the content type and CTE header using the *_subtype* and *_charset* "
"values passed during the instantiation of that class."
msgstr ""
"このモジュールはPython3で非推奨になりました。 :class:`~email.mime.text."
"MIMEText` クラスはクラスのインスタンス化中に渡された *_subtype* と "
"*_charset* の値を使ってcontent typeとCTEヘッダを設定するので、ここで提供され"
"ている関数は明示的に呼び出すべきではありません。"

#: ../../library/email.encoders.rst:20
msgid ""
"The remaining text in this section is the original documentation of the "
"module."
msgstr "この節の以降のテキストはモジュールの元々のドキュメントです。"

#: ../../library/email.encoders.rst:22
msgid ""
"When creating :class:`~email.message.Message` objects from scratch, you "
"often need to encode the payloads for transport through compliant mail "
"servers. This is especially true for :mimetype:`image/\\*` and :mimetype:"
"`text/\\*` type messages containing binary data."
msgstr ""
"何もないところから :class:`~email.message.Message` を作成するときしばしば必要"
"になるのが、ペイロードをメールサーバに通すためにエンコードすることです。これ"
"はとくにバイナリデータを含んだ :mimetype:`image/\\*` や :mimetype:`text/\\*` "
"タイプのメッセージで必要です。"

#: ../../library/email.encoders.rst:27
msgid ""
"The :mod:`email` package provides some convenient encoders in its :mod:"
"`~email.encoders` module.  These encoders are actually used by the :class:"
"`~email.mime.audio.MIMEAudio` and :class:`~email.mime.image.MIMEImage` class "
"constructors to provide default encodings.  All encoder functions take "
"exactly one argument, the message object to encode.  They usually extract "
"the payload, encode it, and reset the payload to this newly encoded value.  "
"They should also set the :mailheader:`Content-Transfer-Encoding` header as "
"appropriate."
msgstr ""
":mod:`email` パッケージでは、 :mod:`~email.encoders` モジュールにおいていくか"
"の便宜的なエンコーダをサポートしています。実際にはこれらのエンコーダは :"
"class:`~email.mime.audio.MIMEAudio` および :class:`~email.mime.image."
"MIMEImage` クラスのコンストラクタでデフォルトエンコーダとして使われています。"
"すべてのエンコーディング関数は、エンコードするメッセージオブジェクトひとつだ"
"けを引数にとります。これらはふつうペイロードを取りだし、それをエンコードし"
"て、ペイロードをエンコードされたものにセットしなおします。これらはまた :"
"mailheader:`Content-Transfer-Encoding` ヘッダを適切な値に設定します。"

#: ../../library/email.encoders.rst:35
msgid ""
"Note that these functions are not meaningful for a multipart message.  They "
"must be applied to individual subparts instead, and will raise a :exc:"
"`TypeError` if passed a message whose type is multipart."
msgstr ""
"マルチパートメッセージにこれら関数を使うことは全く無意味です。それらは各々の"
"サブパートごとに適用されるべきものです。メッセージがマルチパートのものを渡す"
"と :exc:`TypeError` が発生します。"

#: ../../library/email.encoders.rst:39
msgid "Here are the encoding functions provided:"
msgstr "提供されているエンコーディング関数は以下のとおりです:"

#: ../../library/email.encoders.rst:44
msgid ""
"Encodes the payload into quoted-printable form and sets the :mailheader:"
"`Content-Transfer-Encoding` header to ``quoted-printable`` [#]_. This is a "
"good encoding to use when most of your payload is normal printable data, but "
"contains a few unprintable characters."
msgstr ""
"ペイロードを quoted-printable 形式にエンコードし、 :mailheader:`Content-"
"Transfer-Encoding` ヘッダを ``quoted-printable`` [#]_ に設定します。これはそ"
"のペイロードのほとんどが通常の印刷可能な文字からなっているが、印刷不可能な文"
"字がすこしだけあるときのエンコード方法として適しています。"

#: ../../library/email.encoders.rst:52
msgid ""
"Encodes the payload into base64 form and sets the :mailheader:`Content-"
"Transfer-Encoding` header to ``base64``.  This is a good encoding to use "
"when most of your payload is unprintable data since it is a more compact "
"form than quoted-printable.  The drawback of base64 encoding is that it "
"renders the text non-human readable."
msgstr ""
"ペイロードを base64 形式でエンコードし、 :mailheader:`Content-Transfer-"
"Encoding` ヘッダを ``base64`` に変更します。これはペイロード中のデータのほと"
"んどが印刷不可能な文字である場合に適しています。 quoted-printable 形式よりも"
"結果としてはコンパクトなサイズになるからです。 base64 形式の欠点は、これが人"
"間にはまったく読めないテキストになってしまうことです。"

#: ../../library/email.encoders.rst:61
msgid ""
"This doesn't actually modify the message's payload, but it does set the :"
"mailheader:`Content-Transfer-Encoding` header to either ``7bit`` or ``8bit`` "
"as appropriate, based on the payload data."
msgstr ""
"これは実際にはペイロードを変更はしませんが、ペイロードの形式に応じて :"
"mailheader:`Content-Transfer-Encoding` ヘッダを ``7bit`` あるいは ``8bit`` に"
"適した形に設定します。"

#: ../../library/email.encoders.rst:68
msgid ""
"This does nothing; it doesn't even set the :mailheader:`Content-Transfer-"
"Encoding` header."
msgstr ""
"これは何もしないエンコーダです。 :mailheader:`Content-Transfer-Encoding` ヘッ"
"ダを設定さえしません。"

#: ../../library/email.encoders.rst:72
msgid "Footnotes"
msgstr "脚注"

#: ../../library/email.encoders.rst:73
msgid ""
"Note that encoding with :meth:`encode_quopri` also encodes all tabs and "
"space characters in the data."
msgstr ""
"注意: :meth:`encode_quopri` を使ってエンコードすると、データ中のタブ文字や空"
"白文字もエンコードされます。"
