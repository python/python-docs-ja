# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/inspect.rst:2
msgid ":mod:`inspect` --- Inspect live objects"
msgstr ":mod:`inspect` --- 活動中のオブジェクトの情報を取得する"

#: ../../library/inspect.rst:12
msgid "**Source code:** :source:`Lib/inspect.py`"
msgstr "**ソースコード:** :source:`Lib/inspect.py`"

#: ../../library/inspect.rst:16
msgid ""
"The :mod:`inspect` module provides several useful functions to help get "
"information about live objects such as modules, classes, methods, functions, "
"tracebacks, frame objects, and code objects.  For example, it can help you "
"examine the contents of a class, retrieve the source code of a method, "
"extract and format the argument list for a function, or get all the "
"information you need to display a detailed traceback."
msgstr ""
":mod:`inspect` は、活動中のオブジェクト (モジュール、クラス、メソッド、関数、"
"トレースバック、フレームオブジェクト、コードオブジェクトなど) から情報を取得"
"する関数を定義しており、クラスの内容を調べたり、メソッドのソースコードを取得"
"したり、関数の引数リストを取り出して整形したり、詳細なトレースバックを表示す"
"るのに必要な情報を取得したりするために利用できます。"

#: ../../library/inspect.rst:23
msgid ""
"There are four main kinds of services provided by this module: type "
"checking, getting source code, inspecting classes and functions, and "
"examining the interpreter stack."
msgstr ""
"このモジュールの機能は4種類に分類することができます。型チェック、ソースコード"
"の情報取得、クラスや関数からの情報取得、インタープリタのスタック情報の調査で"
"す。"

#: ../../library/inspect.rst:31
msgid "Types and members"
msgstr "型とメンバー"

#: ../../library/inspect.rst:33
msgid ""
"The :func:`getmembers` function retrieves the members of an object such as a "
"class or module. The sixteen functions whose names begin with \"is\" are "
"mainly provided as convenient choices for the second argument to :func:"
"`getmembers`. They also help you determine when you can expect to find the "
"following special attributes:"
msgstr ""
":func:`getmembers` は、クラスやモジュールなどのオブジェクトからメンバーを取得"
"します。名前が\"is\"で始まる16個の関数は、主に :func:`getmembers` の第2引数と"
"して利用するために提供されています。以下のような特殊属性を参照できるかどうか"
"調べる時にも使えるでしょう:"

#: ../../library/inspect.rst:40
msgid "Type"
msgstr "型"

#: ../../library/inspect.rst:40
msgid "Attribute"
msgstr "属性"

#: ../../library/inspect.rst:40
msgid "Description"
msgstr "説明"

#: ../../library/inspect.rst:40
msgid "Notes"
msgstr "注釈"

#: ../../library/inspect.rst:42
msgid "module"
msgstr "モジュール"

#: ../../library/inspect.rst:42 ../../library/inspect.rst:47
#: ../../library/inspect.rst:52 ../../library/inspect.rst:68
#: ../../library/inspect.rst:208
msgid "__doc__"
msgstr "__doc__"

#: ../../library/inspect.rst:42 ../../library/inspect.rst:47
#: ../../library/inspect.rst:52 ../../library/inspect.rst:68
#: ../../library/inspect.rst:208
msgid "documentation string"
msgstr "ドキュメント文字列"

#: ../../library/inspect.rst:44
msgid "__file__"
msgstr "__file__"

#: ../../library/inspect.rst:44
msgid "filename (missing for built-in modules)"
msgstr "ファイル名 (組み込みモジュールには存在しません)"

#: ../../library/inspect.rst:47
msgid "class"
msgstr "クラス"

#: ../../library/inspect.rst:49
msgid "__module__"
msgstr "__module__"

#: ../../library/inspect.rst:49
msgid "name of module in which this class was defined"
msgstr "クラスを定義しているモジュールの名前"

#: ../../library/inspect.rst:52
msgid "method"
msgstr "メソッド"

#: ../../library/inspect.rst:54 ../../library/inspect.rst:70
#: ../../library/inspect.rst:210
msgid "__name__"
msgstr "__name__"

#: ../../library/inspect.rst:54
msgid "name with which this method was defined"
msgstr "メソッドが定義された時の名前"

#: ../../library/inspect.rst:57
msgid "im_class"
msgstr "im_class"

#: ../../library/inspect.rst:57
msgid "class object that asked for this method"
msgstr "このメソッドを要求したクラスオブジェクト"

#: ../../library/inspect.rst:57
msgid "\\(1)"
msgstr "\\(1)"

#: ../../library/inspect.rst:60
msgid "im_func or __func__"
msgstr "im_func または __func__"

#: ../../library/inspect.rst:60
msgid "function object containing implementation of method"
msgstr "メソッドを実装している関数オブジェクト"

#: ../../library/inspect.rst:64
msgid "im_self or __self__"
msgstr "im_self または __self__"

#: ../../library/inspect.rst:64
msgid "instance to which this method is bound, or ``None``"
msgstr "メソッドに結合しているインスタンス、または ``None``"

#: ../../library/inspect.rst:68
msgid "function"
msgstr "function"

#: ../../library/inspect.rst:70
msgid "name with which this function was defined"
msgstr "関数が定義された時の名前"

#: ../../library/inspect.rst:73
msgid "func_code"
msgstr "func_code"

#: ../../library/inspect.rst:73
msgid "code object containing compiled function :term:`bytecode`"
msgstr ""
"関数をコンパイルしたバイトコード (:term:`bytecode`) を格納するコードオブジェ"
"クト"

#: ../../library/inspect.rst:77
msgid "func_defaults"
msgstr "func_defaults"

#: ../../library/inspect.rst:77
msgid "tuple of any default values for arguments"
msgstr "引数のデフォルト値のタプル"

#: ../../library/inspect.rst:80
msgid "func_doc"
msgstr "func_doc"

#: ../../library/inspect.rst:80
msgid "(same as __doc__)"
msgstr "(__doc__ と同じ)"

#: ../../library/inspect.rst:82
msgid "func_globals"
msgstr "func_globals"

#: ../../library/inspect.rst:82
msgid "global namespace in which this function was defined"
msgstr "関数を定義した時のグローバル名前空間"

#: ../../library/inspect.rst:85
msgid "func_name"
msgstr "func_name"

#: ../../library/inspect.rst:85
msgid "(same as __name__)"
msgstr "(__name__ と同じ)"

#: ../../library/inspect.rst:87
msgid "generator"
msgstr "generator"

#: ../../library/inspect.rst:87
msgid "__iter__"
msgstr "__iter__"

#: ../../library/inspect.rst:87
msgid "defined to support iteration over container"
msgstr "コンテナを通したイテレーションのために定義されます"

#: ../../library/inspect.rst:90
msgid "close"
msgstr "close"

#: ../../library/inspect.rst:90
msgid ""
"raises new GeneratorExit exception inside the generator to terminate the "
"iteration"
msgstr ""
"イテレーションを停止するために、ジェネレータの内部で GeneratorExitexception "
"を発生させます"

#: ../../library/inspect.rst:95
msgid "gi_code"
msgstr "gi_code"

#: ../../library/inspect.rst:95
msgid "code object"
msgstr "コードオブジェクト"

#: ../../library/inspect.rst:97
msgid "gi_frame"
msgstr "gi_frame"

#: ../../library/inspect.rst:97
msgid "frame object or possibly ``None`` once the generator has been exhausted"
msgstr ""
"フレームオブジェクト。ジェネレータが終了したあとは ``None`` になることもあり"
"ます"

#: ../../library/inspect.rst:102
msgid "gi_running"
msgstr "gi_running"

#: ../../library/inspect.rst:102
msgid "set to 1 when generator is executing, 0 otherwise"
msgstr "ジェネレータが実行中の時は 1 それ以外の場合は 0"

#: ../../library/inspect.rst:105
msgid "next"
msgstr "next"

#: ../../library/inspect.rst:105
msgid "return the next item from the container"
msgstr "コンテナから次の要素を返します"

#: ../../library/inspect.rst:108
msgid "send"
msgstr "send"

#: ../../library/inspect.rst:108
msgid ""
"resumes the generator and \"sends\" a value that becomes the result of the "
"current yield-expression"
msgstr "ジェネレータを再開して、現在の yield 式の結果となる値を \"送り\" ます"

#: ../../library/inspect.rst:113
msgid "throw"
msgstr "throw"

#: ../../library/inspect.rst:113
msgid "used to raise an exception inside the generator"
msgstr "ジェネレータ内部で例外を発生させるために用います"

#: ../../library/inspect.rst:117
msgid "traceback"
msgstr "トレースバック"

#: ../../library/inspect.rst:117
msgid "tb_frame"
msgstr "tb_frame"

#: ../../library/inspect.rst:117
msgid "frame object at this level"
msgstr "このレベルのフレームオブジェクト"

#: ../../library/inspect.rst:120
msgid "tb_lasti"
msgstr "tb_lasti"

#: ../../library/inspect.rst:120 ../../library/inspect.rst:153
msgid "index of last attempted instruction in bytecode"
msgstr ""
"最後に実行しようとしたバイトコード中のインストラクションを示すインデックス"

#: ../../library/inspect.rst:123
msgid "tb_lineno"
msgstr "tb_lineno"

#: ../../library/inspect.rst:123 ../../library/inspect.rst:156
msgid "current line number in Python source code"
msgstr "現在の Python ソースコードの行番号"

#: ../../library/inspect.rst:126
msgid "tb_next"
msgstr "tb_next"

#: ../../library/inspect.rst:126
msgid "next inner traceback object (called by this level)"
msgstr ""
"このオブジェクトの内側 (このレベルから呼び出された) のトレースバックオブジェ"
"クト"

#: ../../library/inspect.rst:130
msgid "frame"
msgstr "frame"

#: ../../library/inspect.rst:130
msgid "f_back"
msgstr "f_back"

#: ../../library/inspect.rst:130
msgid "next outer frame object (this frame's caller)"
msgstr "外側 (このフレームを呼び出した) のフレームオブジェクト"

#: ../../library/inspect.rst:133
msgid "f_builtins"
msgstr "f_builtins"

#: ../../library/inspect.rst:133
msgid "builtins namespace seen by this frame"
msgstr "このフレームで参照している組み込み名前空間"

#: ../../library/inspect.rst:136
msgid "f_code"
msgstr "f_code"

#: ../../library/inspect.rst:136
msgid "code object being executed in this frame"
msgstr "このフレームで実行しているコードオブジェクト"

#: ../../library/inspect.rst:139
msgid "f_exc_traceback"
msgstr "f_exc_traceback"

#: ../../library/inspect.rst:139
msgid "traceback if raised in this frame, or ``None``"
msgstr ""
"このフレームで例外が発生した場合にはトレースバックオブジェクト、それ以外なら "
"``None``"

#: ../../library/inspect.rst:142
msgid "f_exc_type"
msgstr "f_exc_type"

#: ../../library/inspect.rst:142
msgid "exception type if raised in this frame, or ``None``"
msgstr "このフレームで例外が発生した場合には例外型、それ以外なら ``None``"

#: ../../library/inspect.rst:146
msgid "f_exc_value"
msgstr "f_exc_value"

#: ../../library/inspect.rst:146
msgid "exception value if raised in this frame, or ``None``"
msgstr "このフレームで例外が発生した場合には例外の値、それ以外なら ``None``"

#: ../../library/inspect.rst:150
msgid "f_globals"
msgstr "f_globals"

#: ../../library/inspect.rst:150
msgid "global namespace seen by this frame"
msgstr "このフレームで参照しているグローバル名前空間"

#: ../../library/inspect.rst:153
msgid "f_lasti"
msgstr "f_lasti"

#: ../../library/inspect.rst:156
msgid "f_lineno"
msgstr "f_lineno"

#: ../../library/inspect.rst:159
msgid "f_locals"
msgstr "f_locals"

#: ../../library/inspect.rst:159
msgid "local namespace seen by this frame"
msgstr "このフレームで参照しているローカル名前空間"

#: ../../library/inspect.rst:162
msgid "f_restricted"
msgstr "f_restricted"

#: ../../library/inspect.rst:162
msgid "0 or 1 if frame is in restricted execution mode"
msgstr "制限実行モードなら1、それ以外なら0"

#: ../../library/inspect.rst:165
msgid "f_trace"
msgstr "f_trace"

#: ../../library/inspect.rst:165
msgid "tracing function for this frame, or ``None``"
msgstr "このフレームのトレース関数、または ``None``"

#: ../../library/inspect.rst:168
msgid "code"
msgstr "コード"

#: ../../library/inspect.rst:168
msgid "co_argcount"
msgstr "co_argcount"

#: ../../library/inspect.rst:168
msgid "number of arguments (not including \\* or \\*\\* args)"
msgstr "引数の数 (\\* や \\*\\* 引数は含まない)"

#: ../../library/inspect.rst:172
msgid "co_code"
msgstr "co_code"

#: ../../library/inspect.rst:172
msgid "string of raw compiled bytecode"
msgstr "コンパイルされたバイトコードそのままの文字列"

#: ../../library/inspect.rst:175
msgid "co_consts"
msgstr "co_consts"

#: ../../library/inspect.rst:175
msgid "tuple of constants used in the bytecode"
msgstr "バイトコード中で使用している定数のタプル"

#: ../../library/inspect.rst:178
msgid "co_filename"
msgstr "co_filename"

#: ../../library/inspect.rst:178
msgid "name of file in which this code object was created"
msgstr "コードオブジェクトを生成したファイルのファイル名"

#: ../../library/inspect.rst:182
msgid "co_firstlineno"
msgstr "co_firstlineno"

#: ../../library/inspect.rst:182
msgid "number of first line in Python source code"
msgstr "Python ソースコードの先頭行"

#: ../../library/inspect.rst:185
msgid "co_flags"
msgstr "co_flags"

#: ../../library/inspect.rst:185
msgid "bitmap: 1=optimized ``|`` 2=newlocals ``|`` 4=\\*arg ``|`` 8=\\*\\*arg"
msgstr ""
"以下の値の組み合わせ: 1=optimized ``|`` 2=newlocals ``|`` 4=\\*arg ``|`` "
"8=\\*\\*arg"

#: ../../library/inspect.rst:189
msgid "co_lnotab"
msgstr "co_lnotab"

#: ../../library/inspect.rst:189
msgid "encoded mapping of line numbers to bytecode indices"
msgstr ""
"行番号からバイトコードインデックスへの変換表を文字列にエンコードしたもの"

#: ../../library/inspect.rst:193
msgid "co_name"
msgstr "co_name"

#: ../../library/inspect.rst:193
msgid "name with which this code object was defined"
msgstr "コードオブジェクトが定義されたときの名前"

#: ../../library/inspect.rst:196
msgid "co_names"
msgstr "co_names"

#: ../../library/inspect.rst:196
msgid "tuple of names of local variables"
msgstr "ローカル変数名のタプル"

#: ../../library/inspect.rst:199
msgid "co_nlocals"
msgstr "co_nlocals"

#: ../../library/inspect.rst:199
msgid "number of local variables"
msgstr "ローカル変数の数"

#: ../../library/inspect.rst:201
msgid "co_stacksize"
msgstr "co_stacksize"

#: ../../library/inspect.rst:201
msgid "virtual machine stack space required"
msgstr "必要とされる仮想マシンのスタックスペース"

#: ../../library/inspect.rst:204
msgid "co_varnames"
msgstr "co_varnames"

#: ../../library/inspect.rst:204
msgid "tuple of names of arguments and local variables"
msgstr "引数名とローカル変数名のタプル"

#: ../../library/inspect.rst:208
msgid "builtin"
msgstr "builtin"

#: ../../library/inspect.rst:210
msgid "original name of this function or method"
msgstr "関数、メソッドの元々の名前"

#: ../../library/inspect.rst:213
msgid "__self__"
msgstr "__self__"

#: ../../library/inspect.rst:213
msgid "instance to which a method is bound, or ``None``"
msgstr "メソッドが結合しているインスタンス、または ``None``"

#: ../../library/inspect.rst:218
msgid "Note:"
msgstr "注釈:"

#: ../../library/inspect.rst:221
msgid ":attr:`im_class` used to refer to the class that defined the method."
msgstr ""
":attr:`im_class` は、以前はメソッドを定義しているクラスを指していました。"

#: ../../library/inspect.rst:227
msgid ""
"Return all the members of an object in a list of (name, value) pairs sorted "
"by name.  If the optional *predicate* argument is supplied, only members for "
"which the predicate returns a true value are included."
msgstr ""
"オブジェクトの全メンバーを、(名前, 値) の組み合わせのリストで返します。リスト"
"はメンバー名でソートされています。*predicate* が指定されている場合、"
"predicate の戻り値が真となる値のみを返します。"

#: ../../library/inspect.rst:233
msgid ""
":func:`getmembers` does not return metaclass attributes when the argument is "
"a class (this behavior is inherited from the :func:`dir` function)."
msgstr ""
":func:`getmembers` は、引数がクラスの場合にメタクラス属性を返しません (この動"
"作は :func:`dir` 関数に合わせてあります)。"

#: ../../library/inspect.rst:239
msgid ""
"Return a tuple of values that describe how Python will interpret the file "
"identified by *path* if it is a module, or ``None`` if it would not be "
"identified as a module.  The return tuple is ``(name, suffix, mode, "
"module_type)``, where *name* is the name of the module without the name of "
"any enclosing package, *suffix* is the trailing part of the file name (which "
"may not be a dot-delimited extension), *mode* is the :func:`open` mode that "
"would be used (``'r'`` or ``'rb'``), and *module_type* is an integer giving "
"the type of the module.  *module_type* will have a value which can be "
"compared to the constants defined in the :mod:`imp` module; see the "
"documentation for that module for more information on module types."
msgstr ""
"*path* で指定したファイルがモジュールであれば、そのモジュールが Python でどの"
"ように解釈されるかを示す ``(name, suffix, mode, module_type)`` のタプルを返し"
"ます。モジュールでなければ ``None`` を返します。 *name* はパッケージ名を含ま"
"ないモジュール名、 *suffix* はファイル名からモジュール名を除いた残りの部分 "
"(ドット区切りの拡張子であってはなりません)、 *mode* は :func:`open` で指定さ"
"れるファイルモード (``'r'`` または ``'rb'``)、 *module_type* はモジュールタイ"
"プを示す整数で、 :mod:`imp` で定義している定数のいずれかが指定されます。モ"
"ジュールタイプについては :mod:`imp` を参照してください。"

#: ../../library/inspect.rst:250
msgid ""
"Returns a :term:`named tuple` ``ModuleInfo(name, suffix, mode, "
"module_type)``."
msgstr ""
"名前付きタプル (:term:`named tuple`) の ``ModuleInfo(name, suffix, mode, "
"module_type)`` を返します。"

#: ../../library/inspect.rst:257
msgid ""
"Return the name of the module named by the file *path*, without including "
"the names of enclosing packages.  This uses the same algorithm as the "
"interpreter uses when searching for modules.  If the name cannot be matched "
"according to the interpreter's rules, ``None`` is returned."
msgstr ""
"*path* で指定したファイルの、パッケージ名を含まないモジュール名を返します。こ"
"の処理は、インタープリタがモジュールを検索する時と同じアルゴリズムで行われま"
"す。ファイルがこのアルゴリズムで見つからない場合には ``None`` が返ります。"

#: ../../library/inspect.rst:265
msgid "Return true if the object is a module."
msgstr "オブジェクトがモジュールの場合は真を返します。"

#: ../../library/inspect.rst:270
msgid ""
"Return true if the object is a class, whether built-in or created in Python "
"code."
msgstr ""
"オブジェクトが、ビルトインもしくは Python で作られたクラスの場合に真を返しま"
"す。"

#: ../../library/inspect.rst:276
msgid ""
"Return true if the object is a bound or unbound method written in Python."
msgstr ""
"オブジェクトが Python で実装された束縛メソッドもしくは非束縛メソッドの場合は"
"真を返します。"

#: ../../library/inspect.rst:282
msgid ""
"Return true if the object is a Python function, which includes functions "
"created by a :term:`lambda` expression."
msgstr ""
"オブジェクトが Python の関数(:term:`lambda` 式で生成されたものを含む) である"
"場合に真を返します。"

#: ../../library/inspect.rst:288
msgid "Return true if the object is a Python generator function."
msgstr "*object* が Python のジェネレータ関数であるときに真を返します。"

#: ../../library/inspect.rst:295
msgid "Return true if the object is a generator."
msgstr "*object* がジェネレータであるときに真を返します。"

#: ../../library/inspect.rst:302
msgid "Return true if the object is a traceback."
msgstr "オブジェクトがトレースバックの場合は真を返します。"

#: ../../library/inspect.rst:307
msgid "Return true if the object is a frame."
msgstr "オブジェクトがフレームの場合は真を返します。"

#: ../../library/inspect.rst:312
msgid "Return true if the object is a code."
msgstr "オブジェクトがコードの場合は真を返します。"

#: ../../library/inspect.rst:317
msgid ""
"Return true if the object is a built-in function or a bound built-in method."
msgstr ""
"オブジェクトが組み込み関数か束縛済みのビルトインメソッドの場合に真を返しま"
"す。"

#: ../../library/inspect.rst:322
msgid ""
"Return true if the object is a user-defined or built-in function or method."
msgstr ""
"オブジェクトがユーザ定義か組み込みの関数またはメソッドの場合は真を返します。"

#: ../../library/inspect.rst:327
msgid "Return true if the object is an abstract base class."
msgstr "*object* が抽象規定型 (ABC) であるときに真を返します。"

#: ../../library/inspect.rst:334
msgid ""
"Return true if the object is a method descriptor, but not if :func:"
"`ismethod`, :func:`isclass`, :func:`isfunction` or :func:`isbuiltin` are "
"true."
msgstr ""
"オブジェクトがメソッドデスクリプタであり、 :func:`ismethod`, :func:"
"`isclass`, :func:`isfunction`, :func:`isbuiltin` でない場合に真を返します。"

#: ../../library/inspect.rst:338
msgid ""
"This is new as of Python 2.2, and, for example, is true of ``int.__add__``. "
"An object passing this test has a :meth:`~object.__get__` method but not a :"
"meth:`~object.__set__` method, but beyond that the set of attributes "
"varies.  A :attr:`~definition.__name__` attribute is usually sensible, and :"
"attr:`__doc__` often is."
msgstr ""
"この機能は Python 2.2 から新たに追加されたもので、例えば ``int.__add__`` は真"
"になります。\n"
"このテストをパスするオブジェクトは :meth:`~object.__get__` メソッドを持ちます"
"が :meth:`~object.__set__`  メソッドを持ちません。\n"
"それ以外の属性を持っているかもしれません。\n"
"通常 :attr:`~definition.__name__` 属性を持っていますし、たいていは :attr:"
"`__doc__` も持っています。"

#: ../../library/inspect.rst:345
msgid ""
"Methods implemented via descriptors that also pass one of the other tests "
"return false from the :func:`ismethoddescriptor` test, simply because the "
"other tests promise more -- you can, e.g., count on having the :attr:"
"`im_func` attribute (etc) when an object passes :func:`ismethod`."
msgstr ""
"デスクリプタを使って実装されたメソッドで、上記のいずれかのテストもパスしてい"
"るものは、 :func:`ismethoddescriptor` では偽を返します。これは単に他のテスト"
"の方がもっと確実だからです -- 例えば、 :func:`ismethod` をパスしたオブジェク"
"トは :attr:`im_func` 属性などを持っていると期待できます。"

#: ../../library/inspect.rst:353
msgid "Return true if the object is a data descriptor."
msgstr "オブジェクトがデータデスクリプタの場合に真を返します。"

#: ../../library/inspect.rst:355
msgid ""
"Data descriptors have both a :attr:`~object.__get__` and a :attr:`~object."
"__set__` method. Examples are properties (defined in Python), getsets, and "
"members.  The latter two are defined in C and there are more specific tests "
"available for those types, which is robust across Python implementations.  "
"Typically, data descriptors will also have :attr:`~definition.__name__` and :"
"attr:`__doc__` attributes (properties, getsets, and members have both of "
"these attributes), but this is not guaranteed."
msgstr ""
"データデスクリプタは :attr:`~object.__get__` および :attr:`~object.__set__` "
"属性の両方を持ちます。データデスクリプタの例は (Python 上で定義された) プロパ"
"ティや getset やメンバーです。後者のふたつは C で定義されており、個々の型に特"
"有のテストも行います。そのため、Python の実装よりもより確実です。通常、データ"
"デスクリプタは :attr:`~definition.__name__` や :attr:`__doc__`  属性を持ちま"
"す (プロパティ、 getset 、メンバーは両方の属性を持っています) が、保証されて"
"いるわけではありません。"

#: ../../library/inspect.rst:368
msgid "Return true if the object is a getset descriptor."
msgstr "オブジェクトが getset デスクリプタの場合に真を返します。"

#: ../../library/inspect.rst:372
msgid ""
"getsets are attributes defined in extension modules via :c:type:"
"`PyGetSetDef` structures.  For Python implementations without such types, "
"this method will always return ``False``."
msgstr ""
"getset とは、拡張モジュールで :c:type:`PyGetSetDef` 構造体を用いて定義された"
"属性のことです。そのような型を持たない Python 実装の場合は、このメソッドは常"
"に ``False`` を返します。"

#: ../../library/inspect.rst:381
msgid "Return true if the object is a member descriptor."
msgstr "オブジェクトがメンバーデスクリプタの場合に真を返します。"

#: ../../library/inspect.rst:385
msgid ""
"Member descriptors are attributes defined in extension modules via :c:type:"
"`PyMemberDef` structures.  For Python implementations without such types, "
"this method will always return ``False``."
msgstr ""
"メンバーデスクリプタとは、拡張モジュールで :c:type:`PyMemberDef` 構造体を用い"
"て定義された属性のことです。そのような型を持たない Python 実装の場合は、この"
"メソッドは常に ``False`` を返します。"

#: ../../library/inspect.rst:395
msgid "Retrieving source code"
msgstr "ソースコードの情報取得"

#: ../../library/inspect.rst:399
msgid ""
"Get the documentation string for an object, cleaned up with :func:`cleandoc`."
msgstr ""
":func:`cleandoc` でクリーンアップされた、オブジェクトのドキュメンテーション文"
"字列を取得します。"

#: ../../library/inspect.rst:404
msgid ""
"Return in a single string any lines of comments immediately preceding the "
"object's source code (for a class, function, or method), or at the top of "
"the Python source file (if the object is a module)."
msgstr ""
"オブジェクトがクラス、関数、メソッドのいずれかの場合は、オブジェクトのソース"
"コードの直後にあるコメント行 (複数行) を、単一の文字列として返します。オブ"
"ジェクトがモジュールの場合、ソースファイルの先頭にあるコメントを返します。"

#: ../../library/inspect.rst:411
msgid ""
"Return the name of the (text or binary) file in which an object was defined. "
"This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr ""
"オブジェクトを定義している (テキストまたはバイナリの) ファイルの名前を返しま"
"す。オブジェクトが組み込みモジュール、クラス、関数の場合は :exc:`TypeError` "
"例外が発生します。"

#: ../../library/inspect.rst:418
msgid "Try to guess which module an object was defined in."
msgstr "オブジェクトを定義しているモジュールを推測します。"

#: ../../library/inspect.rst:423
msgid ""
"Return the name of the Python source file in which an object was defined.  "
"This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr ""
"オブジェクトを定義している Python ソースファイルの名前を返します。オブジェク"
"トが組み込みのモジュール、クラス、関数の場合には、 :exc:`TypeError` 例外が発"
"生します。"

#: ../../library/inspect.rst:430
msgid ""
"Return a list of source lines and starting line number for an object. The "
"argument may be a module, class, method, function, traceback, frame, or code "
"object.  The source code is returned as a list of the lines corresponding to "
"the object and the line number indicates where in the original source file "
"the first line of code was found.  An :exc:`IOError` is raised if the source "
"code cannot be retrieved."
msgstr ""
"オブジェクトのソース行のリストと開始行番号を返します。引数にはモジュール、ク"
"ラス、メソッド、関数、トレースバック、フレーム、コードオブジェクトを指定する"
"ことができます。戻り値は指定したオブジェクトに対応するソースコードのソース行"
"リストと元のソースファイル上での開始行となります。ソースコードを取得できない"
"場合は :exc:`IOError` が発生します。"

#: ../../library/inspect.rst:440
msgid ""
"Return the text of the source code for an object. The argument may be a "
"module, class, method, function, traceback, frame, or code object.  The "
"source code is returned as a single string.  An :exc:`IOError` is raised if "
"the source code cannot be retrieved."
msgstr ""
"オブジェクトのソースコードテキストを返します。引数にはモジュール、クラス、メ"
"ソッド、関数、トレースバック、フレーム、コードオブジェクトを指定することがで"
"きます。ソースコードは単一の文字列で返します。ソースコードを取得できない場合"
"は :exc:`IOError` が発生します。"

#: ../../library/inspect.rst:448
msgid ""
"Clean up indentation from docstrings that are indented to line up with "
"blocks of code."
msgstr ""
"コードブロックと位置を合わせるためのインデントを docstring から削除します。"

#: ../../library/inspect.rst:451
msgid ""
"All leading whitespace is removed from the first line.  Any leading "
"whitespace that can be uniformly removed from the second line onwards is "
"removed.  Empty lines at the beginning and end are subsequently removed.  "
"Also, all tabs are expanded to spaces."
msgstr ""
"先頭行の行頭の空白文字は全て削除されます。\n"
"2行目以降では全行で同じ数の行頭の空白文字が、削除できるだけ削除されます。\n"
"その後、先頭と末尾の空白行が削除され、全てのタブが空白に展開されます。"

#: ../../library/inspect.rst:462
msgid "Classes and functions"
msgstr "クラスと関数"

#: ../../library/inspect.rst:467
msgid ""
"Arrange the given list of classes into a hierarchy of nested lists. Where a "
"nested list appears, it contains classes derived from the class whose entry "
"immediately precedes the list.  Each entry is a 2-tuple containing a class "
"and a tuple of its base classes.  If the *unique* argument is true, exactly "
"one entry appears in the returned structure for each class in the given "
"list.  Otherwise, classes using multiple inheritance and their descendants "
"will appear multiple times."
msgstr ""
"リストで指定したクラスの継承関係から、ネストしたリストを作成します。ネストし"
"たリストには、直前の要素から派生したクラスが格納されます。各要素は長さ2のタプ"
"ルで、クラスと基底クラスのタプルを格納しています。*unique* が真の場合、各クラ"
"スは戻り値のリスト内に一つだけしか格納されません。真でなければ、多重継承を利"
"用したクラスとその派生クラスは複数回格納される場合があります。"

#: ../../library/inspect.rst:478
msgid ""
"Get the names and default values of a Python function's arguments. A tuple "
"of four things is returned: ``(args, varargs, keywords, defaults)``. *args* "
"is a list of the argument names (it may contain nested lists). *varargs* and "
"*keywords* are the names of the ``*`` and ``**`` arguments or ``None``. "
"*defaults* is a tuple of default argument values or ``None`` if there are no "
"default arguments; if this tuple has *n* elements, they correspond to the "
"last *n* elements listed in *args*."
msgstr ""
"Python 関数の引数名とデフォルト値を取得します。戻り値は長さ4のタプルで、次の"
"値を返します: ``(args, varargs, keywords, defaults)`` 。 *args* は引数名のリ"
"ストです (ネストしたリストが格納される場合があります)。 *varargs* と "
"*keywords* は ``*`` 引数と ``**`` 引数の名前で、引数がなければ ``None`` とな"
"ります。 *defaults* は引数のデフォルト値のタプルか、デフォルト値がない場合は "
"``None`` です。このタプルに *n* 個の要素があれば、各要素は *args* の後ろから "
"*n* 個分の引数のデフォルト値となります。"

#: ../../library/inspect.rst:486
msgid ""
"Returns a :term:`named tuple` ``ArgSpec(args, varargs, keywords, defaults)``."
msgstr ""
"``ArgSpec(args, varargs, keywords, defaults)`` 形式の名前付きタプル (:term:"
"`named tuple`) を返します。"

#: ../../library/inspect.rst:493
msgid ""
"Get information about arguments passed into a particular frame. A tuple of "
"four things is returned: ``(args, varargs, keywords, locals)``. *args* is a "
"list of the argument names (it may contain nested lists). *varargs* and "
"*keywords* are the names of the ``*`` and ``**`` arguments or ``None``. "
"*locals* is the locals dictionary of the given frame."
msgstr ""
"指定したフレームに渡された引数の情報を取得します。戻り値は長さ4のタプルで、次"
"の値を返します: ``(args, varargs, keywords, locals)``. *args* は引数名のリス"
"トです (ネストしたリストが格納される場合があります)。 *varargs* と "
"*keywords* は ``*`` 引数と ``**`` 引数の名前で、引数がなければ ``None`` とな"
"ります。 *locals* は指定したフレームのローカル変数の辞書です。"

#: ../../library/inspect.rst:499
msgid ""
"Returns a :term:`named tuple` ``ArgInfo(args, varargs, keywords, locals)``."
msgstr ""
"``ArgInfo(args, varargs, keywords, locals)`` 形式の名前付きタプル (:term:"
"`named tuple`) を返します。"

#: ../../library/inspect.rst:506
msgid ""
"Format a pretty argument spec from the four values returned by :func:"
"`getargspec`.  The format\\* arguments are the corresponding optional "
"formatting functions that are called to turn names and values into strings."
msgstr ""
":func:`getargspec` で取得した4つの値を読みやすく整形します。 format\\* 引数は"
"オプションで、名前と値を文字列に変換する整形関数を指定することができます。"

#: ../../library/inspect.rst:513
msgid ""
"Format a pretty argument spec from the four values returned by :func:"
"`getargvalues`.  The format\\* arguments are the corresponding optional "
"formatting functions that are called to turn names and values into strings."
msgstr ""
":func:`getargvalues` で取得した4つの値を読みやすく整形します。 format\\* 引数"
"はオプションで、名前と値を文字列に変換する整形関数を指定することができます。"

#: ../../library/inspect.rst:520
msgid ""
"Return a tuple of class cls's base classes, including cls, in method "
"resolution order.  No class appears more than once in this tuple. Note that "
"the method resolution order depends on cls's type.  Unless a very peculiar "
"user-defined metatype is in use, cls will be the first element of the tuple."
msgstr ""
"*cls* クラスの基底クラス (*cls* 自身も含む) を、メソッドの優先順位順に並べた"
"タプルを返します。結果のリスト内で各クラスは一度だけ格納されます。メソッドの"
"優先順位はクラスの型によって異なります。非常に特殊なユーザ定義のメタクラスを"
"使用していない限り、*cls* が戻り値の先頭要素となります。"

#: ../../library/inspect.rst:528
msgid ""
"Bind the *args* and *kwds* to the argument names of the Python function or "
"method *func*, as if it was called with them. For bound methods, bind also "
"the first argument (typically named ``self``) to the associated instance. A "
"dict is returned, mapping the argument names (including the names of the "
"``*`` and ``**`` arguments, if any) to their values from *args* and *kwds*. "
"In case of invoking *func* incorrectly, i.e. whenever ``func(*args, "
"**kwds)`` would raise an exception because of incompatible signature, an "
"exception of the same type and the same or similar message is raised. For "
"example::"
msgstr ""
"*args* と *kwds* を、Python の関数もしくはメソッド *func* を呼び出した場合と"
"同じように引数名に束縛します。束縛済みメソッド(bound method)の場合、最初の引"
"数(慣習的に ``self`` という名前が付けられます)にも、関連づけられたインスタン"
"スを束縛します。引数名 (``*`` や ``**`` 引数が存在すればその名前も) に "
"*args* と *kwds* からの値をマップした辞書を返します。*func* を正しく呼び出せ"
"ない場合、つまり ``func(*args, **kwds)`` がシグネチャの不一致のために例外を投"
"げるような場合には、それと同じ型で同じか似ているメッセージの例外を発生させま"
"す。例::"

#: ../../library/inspect.rst:555
msgid "The interpreter stack"
msgstr "インタープリタスタック"

#: ../../library/inspect.rst:557
msgid ""
"When the following functions return \"frame records,\" each record is a "
"tuple of six items: the frame object, the filename, the line number of the "
"current line, the function name, a list of lines of context from the source "
"code, and the index of the current line within that list."
msgstr ""
"以下の関数には、戻り値として\"フレームレコード\"を返す関数があります。\"フ"
"レームレコード\"は長さ6のタプルで、以下の値を格納しています: フレームオブジェ"
"クト、ファイル名、実行中の行番号、関数名、コンテキストのソース行のリスト、"
"ソース行のリストにおける実行中の行のインデックス。"

#: ../../library/inspect.rst:564
msgid ""
"Keeping references to frame objects, as found in the first element of the "
"frame records these functions return, can cause your program to create "
"reference cycles.  Once a reference cycle has been created, the lifespan of "
"all objects which can be accessed from the objects which form the cycle can "
"become much longer even if Python's optional cycle detector is enabled.  If "
"such cycles must be created, it is important to ensure they are explicitly "
"broken to avoid the delayed destruction of objects and increased memory "
"consumption which occurs."
msgstr ""
"フレームレコードの最初の要素などのフレームオブジェクトへの参照を保存すると、"
"循環参照になってしまう場合があります。循環参照ができると、Python の循環参照検"
"出機能を有効にしていたとしても関連するオブジェクトが参照しているすべてのオブ"
"ジェクトが解放されにくくなり、明示的に参照を削除しないとメモリ消費量が増大す"
"る恐れがあります。"

#: ../../library/inspect.rst:572
msgid ""
"Though the cycle detector will catch these, destruction of the frames (and "
"local variables) can be made deterministic by removing the cycle in a :"
"keyword:`finally` clause.  This is also important if the cycle detector was "
"disabled when Python was compiled or using :func:`gc.disable`.  For example::"
msgstr ""
"参照の削除を Python の循環参照検出機能にまかせることもできますが、 :keyword:"
"`finally` 節で循環参照を解除すれば確実にフレーム (とそのローカル変数) は削除"
"されます。また、循環参照検出機能は Python のコンパイルオプションや :func:`gc."
"disable` で無効とされている場合がありますので注意が必要です。例::"

#: ../../library/inspect.rst:584
msgid ""
"The optional *context* argument supported by most of these functions "
"specifies the number of lines of context to return, which are centered "
"around the current line."
msgstr ""
"以下の関数でオプション引数 *context* には、戻り値のソース行リストに何行分の"
"ソースを含めるかを指定します。ソース行リストには、実行中の行を中心として指定"
"された行数分のリストを返します。"

#: ../../library/inspect.rst:591
msgid ""
"Get information about a frame or traceback object.  A 5-tuple is returned, "
"the last five elements of the frame's frame record."
msgstr ""
"フレームまたはトレースバックオブジェクトの情報を取得します。フレームレコード"
"の最後の 5 要素からなる長さ 5 のタプルを返します。"

#: ../../library/inspect.rst:594
msgid ""
"Returns a :term:`named tuple` ``Traceback(filename, lineno, function, "
"code_context, index)``."
msgstr ""
"``Traceback(filename, lineno, function, code_context, index)`` 形式の名前付き"
"タプル (:term:`named tuple`) を返します。"

#: ../../library/inspect.rst:601
msgid ""
"Get a list of frame records for a frame and all outer frames.  These frames "
"represent the calls that lead to the creation of *frame*. The first entry in "
"the returned list represents *frame*; the last entry represents the "
"outermost call on *frame*'s stack."
msgstr ""
"指定したフレームと、その外側の全フレームのフレームレコードを返します。外側の"
"フレームとは *frame* が生成されるまでのすべての関数呼び出しを示します。戻り値"
"のリストの先頭は *frame* のフレームレコードで、末尾の要素は *frame* のスタッ"
"クにある最も外側のフレームのフレームレコードとなります。"

#: ../../library/inspect.rst:609
msgid ""
"Get a list of frame records for a traceback's frame and all inner frames.  "
"These frames represent calls made as a consequence of *frame*.  The first "
"entry in the list represents *traceback*; the last entry represents where "
"the exception was raised."
msgstr ""
"指定したフレームと、その内側の全フレームのフレームレコードを返します。内のフ"
"レームとは *frame* から続く一連の関数呼び出しを示します。戻り値のリストの先頭"
"は *traceback* のフレームレコードで、末尾の要素は例外が発生した位置を示しま"
"す。"

#: ../../library/inspect.rst:617
msgid "Return the frame object for the caller's stack frame."
msgstr "呼び出し元のフレームオブジェクトを返します。"

#: ../../library/inspect.rst:621
msgid ""
"This function relies on Python stack frame support in the interpreter, which "
"isn't guaranteed to exist in all implementations of Python.  If running in "
"an implementation without Python stack frame support this function returns "
"``None``."
msgstr ""
"この関数はインタプリタの Python スタックフレームサポートに依存します。これは "
"Python のすべての実装に存在している保証はありません。Python スタックフレーム"
"サポートのない環境では、この関数は ``None`` を返します。"

#: ../../library/inspect.rst:629
msgid ""
"Return a list of frame records for the caller's stack.  The first entry in "
"the returned list represents the caller; the last entry represents the "
"outermost call on the stack."
msgstr ""
"呼び出し元スタックのフレームレコードのリストを返します。最初の要素は呼び出し"
"元のフレームレコードで、末尾の要素はスタックにある最も外側のフレームのフレー"
"ムレコードとなります。"

#: ../../library/inspect.rst:636
msgid ""
"Return a list of frame records for the stack between the current frame and "
"the frame in which an exception currently being handled was raised in.  The "
"first entry in the list represents the caller; the last entry represents "
"where the exception was raised."
msgstr ""
"実行中のフレームと処理中の例外が発生したフレームの間のフレームレコードのリス"
"トを返します。最初の要素は呼び出し元のフレームレコードで、末尾の要素は例外が"
"発生した位置を示します。"
