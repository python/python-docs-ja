# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# souma987, 2022
# Inada Naoki <songofacandy@gmail.com>, 2023
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2023
# tomo, 2023
# Arihiro TAKASE, 2023
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-13 14:16+0000\n"
"PO-Revision-Date: 2021-06-28 00:55+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/base64.rst:2
msgid ":mod:`!base64` --- Base16, Base32, Base64, Base85 Data Encodings"
msgstr ":mod:`!base64` --- Base16, Base32, Base64, Base85 データのエンコード"

#: ../../library/base64.rst:8
msgid "**Source code:** :source:`Lib/base64.py`"
msgstr "**ソースコード:** :source:`Lib/base64.py`"

#: ../../library/base64.rst:16
msgid ""
"This module provides functions for encoding binary data to printable ASCII "
"characters and decoding such encodings back to binary data. It provides "
"encoding and decoding functions for the encodings specified in :rfc:`4648`, "
"which defines the Base16, Base32, and Base64 algorithms, and for the de-"
"facto standard Ascii85 and Base85 encodings."
msgstr ""
"このモジュールは、バイナリデータを印刷可能なASCII文字列にエンコードして、また"
"逆にデコードするための関数を提供しています。:rfc:`4648` に定義されている "
"Base16、Base32、 Base64 に加えて事実上の標準となっている Ascii85 と Base 85 "
"をサポートしています。"

#: ../../library/base64.rst:22
msgid ""
"The :rfc:`4648` encodings are suitable for encoding binary data so that it "
"can be safely sent by email, used as parts of URLs, or included as part of "
"an HTTP POST request.  The encoding algorithm is not the same as the :"
"program:`uuencode` program."
msgstr ""
":rfc:`4648` エンコーディングは、email で安全に送信したり、 URL の一部として"
"使ったり、あるいは HTTP POST リクエストの一部に含めるために用いるのに適してい"
"ます。このエンコーディングで使われているアルゴリズムは :program:`uuencode` プ"
"ログラムで用いられているものとは同じではありません。"

#: ../../library/base64.rst:27
msgid ""
"There are two interfaces provided by this module.  The modern interface "
"supports encoding :term:`bytes-like objects <bytes-like object>` to ASCII :"
"class:`bytes`, and decoding :term:`bytes-like objects <bytes-like object>` "
"or strings containing ASCII to :class:`bytes`.  Both base-64 alphabets "
"defined in :rfc:`4648` (normal, and URL- and filesystem-safe) are supported."
msgstr ""
"このモジュールは、2つのインターフェースを提供します。このモダンなインター"
"フェースは、:term:`bytes-like object` を ASCII :class:`bytes` にエンコード"
"し、:term:`bytes-like object` か ASCII 文字列を、:class:`bytes` にデコードす"
"ることができます。:rfc:`4648` に定義されている base-64 アルファベット (一般"
"の、URL あるいはファイルシステムセーフなもの) の両方が使用できます。"

#: ../../library/base64.rst:33
msgid ""
"The legacy interface does not support decoding from strings, but it does "
"provide functions for encoding and decoding to and from :term:`file objects "
"<file object>`.  It only supports the Base64 standard alphabet, and it adds "
"newlines every 76 characters as per :rfc:`2045`.  Note that if you are "
"looking for :rfc:`2045` support you probably want to be looking at the :mod:"
"`email` package instead."
msgstr ""
"従来のインターフェースは文字列からのデコードができませんが、:term:`file "
"object` との間のエンコードとデコードが可能な関数を提供します。これは標準の "
"base64 アルファベットのみをサポートし、:rfc:`2045` の規定にあるように、76文字"
"ごとに改行されます。:rfc:`2045` のサポートのためには、代わりに :mod:`email` "
"パッケージを参照する必要があるかもしれません。"

#: ../../library/base64.rst:41
msgid ""
"ASCII-only Unicode strings are now accepted by the decoding functions of the "
"modern interface."
msgstr ""
"モダンなインターフェイスのデコード関数が ASCII のみの Unicode 文字列を受け付"
"けるようになりました。"

#: ../../library/base64.rst:45
msgid ""
"Any :term:`bytes-like objects <bytes-like object>` are now accepted by all "
"encoding and decoding functions in this module.  Ascii85/Base85 support "
"added."
msgstr ""
"このモジュールのすべてのエンコード・デコード関数が任意の :term:`bytes-like オ"
"ブジェクト <bytes-like object>` を受け取るようになりました。Ascii85/Base85 の"
"サポートが追加されました。"

#: ../../library/base64.rst:49
msgid "The modern interface provides:"
msgstr "モダンなインターフェイスは以下のものを提供します:"

#: ../../library/base64.rst:53
msgid ""
"Encode the :term:`bytes-like object` *s* using Base64 and return the "
"encoded :class:`bytes`."
msgstr ""
"Base64 を使って :term:`bytes-like object` の *s* をエンコードし、エンコードさ"
"れた :class:`bytes` を返します。"

#: ../../library/base64.rst:56
msgid ""
"Optional *altchars* must be a :term:`bytes-like object` of length 2 which "
"specifies an alternative alphabet for the ``+`` and ``/`` characters. This "
"allows an application to e.g. generate URL or filesystem safe Base64 "
"strings.  The default is ``None``, for which the standard Base64 alphabet is "
"used."
msgstr ""
"オプション引数 *altchars* は長さ 2 の :term:`bytes-like object` で 、``+`` "
"と ``/`` の代わりに使われる代替アルファベットを指定します。これにより、アプリ"
"ケーションはたとえば URL やファイルシステムの影響を受けない Base64 文字列を生"
"成できます。デフォルトは ``None`` で、標準の Base64 アルファベットが使われま"
"す。"

#: ../../library/base64.rst:61
msgid ""
"May assert or raise a :exc:`ValueError` if the length of *altchars* is not "
"2.  Raises a :exc:`TypeError` if *altchars* is not a :term:`bytes-like "
"object`."
msgstr ""
"*altchars* の長さが2でない場合は、 assert または :exc:`ValueError` が発生しま"
"す。 *altchars* が :term:`bytes-like object` でない場合は、 :exc:`TypeError` "
"が発生します。"

#: ../../library/base64.rst:67
msgid ""
"Decode the Base64 encoded :term:`bytes-like object` or ASCII string *s* and "
"return the decoded :class:`bytes`."
msgstr ""
"Base64 エンコードされた  :term:`bytes-like object` または ASCII 文字列 *s* を"
"デコードし、デコードされた :class:`bytes` を返します。"

#: ../../library/base64.rst:70
msgid ""
"Optional *altchars* must be a :term:`bytes-like object` or ASCII string of "
"length 2 which specifies the alternative alphabet used instead of the ``+`` "
"and ``/`` characters."
msgstr ""
"オプション引数の *altchars* は長さ 2 の :term:`bytes-like object`  または "
"ASCII 文字列で、``+`` と ``/`` の代わりに使われる代替アルファベットを指定しま"
"す。"

#: ../../library/base64.rst:74
msgid ""
"A :exc:`binascii.Error` exception is raised if *s* is incorrectly padded."
msgstr ""
"*s* が正しくパディングされていない場合は :exc:`binascii.Error` 例外を発生させ"
"ます。"

#: ../../library/base64.rst:77
msgid ""
"If *validate* is ``False`` (the default), characters that are neither in the "
"normal base-64 alphabet nor the alternative alphabet are discarded prior to "
"the padding check.  If *validate* is ``True``, these non-alphabet characters "
"in the input result in a :exc:`binascii.Error`."
msgstr ""
"*validate* が ``False`` (デフォルト) の場合、標準の base64 アルファベットでも"
"代替文字でもない文字はパディングチェックの前に無視されます。 *validate* が "
"``True`` の場合、入力に base64 アルファベット以外の文字があると :exc:"
"`binascii.Error` を発生させます。"

#: ../../library/base64.rst:83
msgid ""
"For more information about the strict base64 check, see :func:`binascii."
"a2b_base64`"
msgstr ""
"厳密な base64 チェックのについての詳細は :func:`binascii.a2b_base64` を参照し"
"てください"

#: ../../library/base64.rst:85
msgid ""
"May assert or raise a :exc:`ValueError` if the length of *altchars* is not 2."
msgstr ""

#: ../../library/base64.rst:89
msgid ""
"Encode :term:`bytes-like object` *s* using the standard Base64 alphabet and "
"return the encoded :class:`bytes`."
msgstr ""
"標準の base64 アルファベットを使用して  :term:`bytes-like object` の *s* をエ"
"ンコードし、エンコードされた :class:`bytes` を返します。"

#: ../../library/base64.rst:95
msgid ""
"Decode :term:`bytes-like object` or ASCII string *s* using the standard "
"Base64 alphabet and return the decoded :class:`bytes`."
msgstr ""
"標準の base64 アルファベットを使用した :term:`bytes-like object` または "
"ASCII 文字列 *s* をデコードし、デコードされた :class:`bytes` を返します。"

#: ../../library/base64.rst:101
msgid ""
"Encode :term:`bytes-like object` *s* using the URL- and filesystem-safe "
"alphabet, which substitutes ``-`` instead of ``+`` and ``_`` instead of ``/"
"`` in the standard Base64 alphabet, and return the encoded :class:`bytes`.  "
"The result can still contain ``=``."
msgstr ""
":term:`bytes-like object` *s* を URLとファイルシステムセーフなアルファベット"
"を利用してエンコードし、エンコードされた :class:`bytes` を返します。標準 "
"base64 アルファベットに比べて、``+`` の替わりに ``-`` を、``/`` の替わりに "
"``_`` を利用します。結果は ``=`` を含みます。 "

#: ../../library/base64.rst:110
msgid ""
"Decode :term:`bytes-like object` or ASCII string *s* using the URL- and "
"filesystem-safe alphabet, which substitutes ``-`` instead of ``+`` and ``_`` "
"instead of ``/`` in the standard Base64 alphabet, and return the decoded :"
"class:`bytes`."
msgstr ""
":term:`bytes-like object` または ASCII 文字列 *s* を URLとファイルシステム"
"セーフなアルファベットを利用してデコードし、デコードされた :class:`bytes` を"
"返します。標準 base64 アルファベットに比べて、``+`` の替わりに ``-`` を、``/"
"`` の替わりに ``_`` を置換します。"

#: ../../library/base64.rst:119
msgid ""
"Encode the :term:`bytes-like object` *s* using Base32 and return the "
"encoded :class:`bytes`."
msgstr ""
"Base32 を使って :term:`bytes-like object` の *s* をエンコードし、エンコードさ"
"れた :class:`bytes` を返します。"

#: ../../library/base64.rst:125
msgid ""
"Decode the Base32 encoded :term:`bytes-like object` or ASCII string *s* and "
"return the decoded :class:`bytes`."
msgstr ""
"Base32 エンコードされた  :term:`bytes-like object` または ASCII 文字列 *s* を"
"デコードし、デコードされた :class:`bytes` を返します。"

#: ../../library/base64.rst:128 ../../library/base64.rst:176
msgid ""
"Optional *casefold* is a flag specifying whether a lowercase alphabet is "
"acceptable as input.  For security purposes, the default is ``False``."
msgstr ""
"オプション引数 *casefold* は小文字のアルファベットを受けつけるかどうかを指定"
"します。セキュリティ上の理由により、デフォルトではこれは ``False`` になってい"
"ます。"

#: ../../library/base64.rst:132
msgid ""
":rfc:`4648` allows for optional mapping of the digit 0 (zero) to the letter "
"O (oh), and for optional mapping of the digit 1 (one) to either the letter I "
"(eye) or letter L (el).  The optional argument *map01* when not ``None``, "
"specifies which letter the digit 1 should be mapped to (when *map01* is not "
"``None``, the digit 0 is always mapped to the letter O).  For security "
"purposes the default is ``None``, so that 0 and 1 are not allowed in the "
"input."
msgstr ""
":rfc:`4648` は付加的なマッピングとして、数字の 0 (零) をアルファベットの O "
"(オー) に、数字の 1 (壱) をアルファベットの I (アイ) または L (エル) に対応さ"
"せることを許しています。オプション引数は *map01* は、 ``None`` でないときは、"
"数字の 1 をどの文字に対応づけるかを指定します (*map01* が ``None`` でないと"
"き、数字の 0 はつねにアルファベットの O (オー) に対応づけられます)。セキュリ"
"ティ上の理由により、これはデフォルトでは ``None`` になっているため、 0 およ"
"び 1 は入力として許可されていません。"

#: ../../library/base64.rst:139 ../../library/base64.rst:180
msgid ""
"A :exc:`binascii.Error` is raised if *s* is incorrectly padded or if there "
"are non-alphabet characters present in the input."
msgstr ""
"*s* が正しくパディングされていない場合や、入力にアルファベットでない文字が含"
"まれていた場合に、 :exc:`binascii.Error` 例外を発生させます。"

#: ../../library/base64.rst:146
msgid ""
"Similar to :func:`b32encode` but uses the Extended Hex Alphabet, as defined "
"in :rfc:`4648`."
msgstr ""

#: ../../library/base64.rst:154
msgid ""
"Similar to :func:`b32decode` but uses the Extended Hex Alphabet, as defined "
"in :rfc:`4648`."
msgstr ""

#: ../../library/base64.rst:157
msgid ""
"This version does not allow the digit 0 (zero) to the letter O (oh) and "
"digit 1 (one) to either the letter I (eye) or letter L (el) mappings, all "
"these characters are included in the Extended Hex Alphabet and are not "
"interchangeable."
msgstr ""

#: ../../library/base64.rst:167
msgid ""
"Encode the :term:`bytes-like object` *s* using Base16 and return the "
"encoded :class:`bytes`."
msgstr ""
"Base16 を使って :term:`bytes-like object` の *s* をエンコードし、エンコードさ"
"れた :class:`bytes` を返します。"

#: ../../library/base64.rst:173
msgid ""
"Decode the Base16 encoded :term:`bytes-like object` or ASCII string *s* and "
"return the decoded :class:`bytes`."
msgstr ""
"Base16 エンコードされた  :term:`bytes-like object` または ASCII 文字列 *s* を"
"デコードし、デコードされた :class:`bytes` を返します。"

#: ../../library/base64.rst:187
msgid ""
"Encode the :term:`bytes-like object` *b* using Ascii85 and return the "
"encoded :class:`bytes`."
msgstr ""
"Ascii85 を使って :term:`bytes-like object` の *b* をエンコードし、エンコード"
"された :class:`bytes` を返します。 "

#: ../../library/base64.rst:190
msgid ""
"*foldspaces* is an optional flag that uses the special short sequence 'y' "
"instead of 4 consecutive spaces (ASCII 0x20) as supported by 'btoa'. This "
"feature is not supported by the \"standard\" Ascii85 encoding."
msgstr ""
"*foldspaces* を使うと、4 つの連続した空白文字(ASCII 0x20)を 'btoa' によってサ"
"ポートされている短い特殊文字 'y' に置き換えます。この機能は \"標準\" Ascii85 "
"ではサポートされていません。"

#: ../../library/base64.rst:194
msgid ""
"*wrapcol* controls whether the output should have newline (``b'\\n'``) "
"characters added to it. If this is non-zero, each output line will be at "
"most this many characters long, excluding the trailing newline."
msgstr ""

#: ../../library/base64.rst:198
msgid ""
"*pad* controls whether the input is padded to a multiple of 4 before "
"encoding. Note that the ``btoa`` implementation always pads."
msgstr ""
"*pad* を指定すると、エンコード前に入力が 4 の倍数になるようにパディングされま"
"す。なお、 ``btoa`` の実装は常にパディングします。"

#: ../../library/base64.rst:201
msgid ""
"*adobe* controls whether the encoded byte sequence is framed with ``<~`` and "
"``~>``, which is used by the Adobe implementation."
msgstr ""
"*adobe* を指定すると、エンコードしたバイトシーケンスを ``<~`` と ``~>`` で囲"
"みます。これは Adobe の実装で使われています。"

#: ../../library/base64.rst:209
msgid ""
"Decode the Ascii85 encoded :term:`bytes-like object` or ASCII string *b* and "
"return the decoded :class:`bytes`."
msgstr ""
"Ascii85 エンコードされた :term:`bytes-like object` または ASCII 文字列 *b* を"
"デコードし、デコードされた :class:`bytes` を返します。 "

#: ../../library/base64.rst:212
msgid ""
"*foldspaces* is a flag that specifies whether the 'y' short sequence should "
"be accepted as shorthand for 4 consecutive spaces (ASCII 0x20). This feature "
"is not supported by the \"standard\" Ascii85 encoding."
msgstr ""
"*foldspaces* は、短い特殊文字 'y' を受け取って 4 つの連続した空白文字(ASCII "
"0x20)と解釈するかどうかを制御します。この機能は \"標準\" Ascii85 ではサポート"
"されていません。"

#: ../../library/base64.rst:216
msgid ""
"*adobe* controls whether the input sequence is in Adobe Ascii85 format (i.e. "
"is framed with <~ and ~>)."
msgstr ""
"*adobe* で、入力シーケンスが Adobe Ascii85 (つまり ``<~`` と ``~>`` で囲まれ"
"ている)かどうかを伝えます。"

#: ../../library/base64.rst:219
msgid ""
"*ignorechars* should be a :term:`bytes-like object` or ASCII string "
"containing characters to ignore from the input. This should only contain "
"whitespace characters, and by default contains all whitespace characters in "
"ASCII."
msgstr ""
"*ignorechars* には、入力に含まれていれば無視する文字で構成された :term:"
"`bytes-like object` または ASCII 文字列を指定してください。これは空白文字だけ"
"で構成されているべきです。デフォルトは ASCII における空白文字全てです。"

#: ../../library/base64.rst:229
msgid ""
"Encode the :term:`bytes-like object` *b* using base85 (as used in e.g. git-"
"style binary diffs) and return the encoded :class:`bytes`."
msgstr ""
"base85 (これは例えば git スタイルのバイナリ diff で用いられています) を使っ"
"て :term:`bytes-like object` の *b* をエンコードし、エンコードされた :class:"
"`bytes` を返します。"

#: ../../library/base64.rst:232
msgid ""
"If *pad* is true, the input is padded with ``b'\\0'`` so its length is a "
"multiple of 4 bytes before encoding."
msgstr ""
"*pad* が真ならば、エンコードに先立って、バイト数が 4 の倍数となるように入力"
"が ``b'\\0'`` でパディングされます。"

#: ../../library/base64.rst:240
msgid ""
"Decode the base85-encoded :term:`bytes-like object` or ASCII string *b* and "
"return the decoded :class:`bytes`.  Padding is implicitly removed, if "
"necessary."
msgstr ""
"base85でエンコードされた :term:`bytes-like object`  または ASCII 文字列の "
"*b* をデコードし、デコードされた :class:`bytes` を返します。パディングは、も"
"しあれば、暗黙に削除されます。"

#: ../../library/base64.rst:249
msgid ""
"Encode the :term:`bytes-like object` *s* using Z85 (as used in ZeroMQ) and "
"return the encoded :class:`bytes`.  See `Z85  specification <https://rfc."
"zeromq.org/spec/32/>`_ for more information."
msgstr ""

#: ../../library/base64.rst:258
msgid ""
"Decode the Z85-encoded :term:`bytes-like object` or ASCII string *s* and "
"return the decoded :class:`bytes`.  See `Z85  specification <https://rfc."
"zeromq.org/spec/32/>`_ for more information."
msgstr ""

#: ../../library/base64.rst:265
msgid "The legacy interface:"
msgstr "レガシーなインターフェイスは以下のものを提供します:"

#: ../../library/base64.rst:269
msgid ""
"Decode the contents of the binary *input* file and write the resulting "
"binary data to the *output* file. *input* and *output* must be :term:`file "
"objects <file object>`. *input* will be read until ``input.readline()`` "
"returns an empty bytes object."
msgstr ""
"*input* ファイルの中身をデコードし、結果のバイナリデータを *output* ファイル"
"に出力します。  *input* 、 *output* ともに :term:`file objects <file "
"object>` でなければなりません。 *input* は ``input.readline()`` が空バイト列"
"を返すまで読まれます。"

#: ../../library/base64.rst:277
msgid ""
"Decode the :term:`bytes-like object` *s*, which must contain one or more "
"lines of base64 encoded data, and return the decoded :class:`bytes`."
msgstr ""
":term:`bytes-like object` *s* をデコードし、デコードされた :class:`bytes` を"
"返します。 *s* には一行以上の base64 形式でエンコードされたデータが含まれてい"
"る必要があります。"

#: ../../library/base64.rst:285
msgid ""
"Encode the contents of the binary *input* file and write the resulting "
"base64 encoded data to the *output* file. *input* and *output* must be :term:"
"`file objects <file object>`. *input* will be read until ``input.read()`` "
"returns an empty bytes object. :func:`encode` inserts a newline character "
"(``b'\\n'``) after every 76 bytes of the output, as well as ensuring that "
"the output always ends with a newline, as per :rfc:`2045` (MIME)."
msgstr ""
"バイナリの *input* ファイルの中身を base64 形式でエンコードした結果を "
"*output* ファイルに出力します。 *input* 、 *output* ともに :term:`file "
"objects <file object>` でなければなりません。 *input* は ``input.read()`` が"
"空バイト列を返すまで読まれます。 :func:`encode` は76バイトの出力ごとに改行文"
"字(``b'\\n'``)を挿入し、:rfc:`2045` (MIME) の規定にあるように常に出力が新しい"
"行で終わることを保証します。"

#: ../../library/base64.rst:295
msgid ""
"Encode the :term:`bytes-like object` *s*, which can contain arbitrary binary "
"data, and return :class:`bytes` containing the base64-encoded data, with "
"newlines (``b'\\n'``) inserted after every 76 bytes of output, and ensuring "
"that there is a trailing newline, as per :rfc:`2045` (MIME)."
msgstr ""
":term:`bytes-like object` *s* (任意のバイナリデータを含むことができます) "
"を、:rfc:`2045` (MIME) に規定されるように末尾に新しい行のある、76バイトの出力"
"ごとに新しい行 (``b'\\n'``) が挿入された、base64 形式でエンコードしたデータを"
"含む :class:`bytes` を返します。"

#: ../../library/base64.rst:303
msgid "An example usage of the module:"
msgstr "モジュールの使用例:"

#: ../../library/base64.rst:316
msgid "Security Considerations"
msgstr "セキュリティで考慮すべき点"

#: ../../library/base64.rst:318
msgid ""
"A new security considerations section was added to :rfc:`4648` (section 12); "
"it's recommended to review the security section for any code deployed to "
"production."
msgstr ""

#: ../../library/base64.rst:323
msgid "Module :mod:`binascii`"
msgstr "モジュール :mod:`binascii`"

#: ../../library/base64.rst:324
msgid ""
"Support module containing ASCII-to-binary and binary-to-ASCII conversions."
msgstr ""
"ASCII からバイナリへ、バイナリから ASCII への変換をサポートするモジュール。"

#: ../../library/base64.rst:326
msgid ""
":rfc:`1521` - MIME (Multipurpose Internet Mail Extensions) Part One: "
"Mechanisms for Specifying and Describing the Format of Internet Message "
"Bodies"
msgstr ""
":rfc:`1521` - MIME (Multipurpose Internet Mail Extensions) Part One: "
"Mechanisms for Specifying and Describing the Format of Internet Message "
"Bodies"

#: ../../library/base64.rst:327
msgid ""
"Section 5.2, \"Base64 Content-Transfer-Encoding,\" provides the definition "
"of the base64 encoding."
msgstr ""
"Section 5.2, \"Base64 Content-Transfer-Encoding,\" provides the definition "
"of the base64 encoding."

#: ../../library/base64.rst:10
msgid "base64"
msgstr "base64"

#: ../../library/base64.rst:10
msgid "encoding"
msgstr "encoding"

#: ../../library/base64.rst:10
msgid "MIME"
msgstr "MIME"

#: ../../library/base64.rst:10
msgid "base64 encoding"
msgstr "base64 encoding"
