# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
# Yusuke Miyazaki <miyazaki.dev@gmail.com>, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:06+0000\n"
"PO-Revision-Date: 2020-05-30 11:58+0000\n"
"Last-Translator: Yusuke Miyazaki <miyazaki.dev@gmail.com>, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/copy.rst:2
msgid ":mod:`copy` --- Shallow and deep copy operations"
msgstr ":mod:`copy` --- 浅いコピーおよび深いコピー操作"

#: ../../library/copy.rst:7
msgid "**Source code:** :source:`Lib/copy.py`"
msgstr "**ソースコード:** :source:`Lib/copy.py`"

#: ../../library/copy.rst:11
msgid ""
"Assignment statements in Python do not copy objects, they create bindings "
"between a target and an object. For collections that are mutable or contain "
"mutable items, a copy is sometimes needed so one can change one copy without "
"changing the other. This module provides generic shallow and deep copy "
"operations (explained below)."
msgstr ""
"Python において代入文はオブジェクトをコピーしません。代入はターゲットとオブ"
"ジェクトの間に束縛を作ります。ミュータブルなコレクションまたはミュータブルな"
"アイテムを含むコレクションについては、元のオブジェクトを変更せずにコピーを変"
"更できるように、コピーが必要になることが時々あります。このモジュールは、汎用"
"的な浅い (shallow) コピーと深い (deep) コピーの操作 (以下で説明されます) を提"
"供します。"

#: ../../library/copy.rst:18
msgid "Interface summary:"
msgstr "以下にインタフェースをまとめます:"

#: ../../library/copy.rst:22
msgid "Return a shallow copy of *x*."
msgstr "*x* の浅い (shallow) コピーを返します。"

#: ../../library/copy.rst:27
msgid "Return a deep copy of *x*."
msgstr "*x* の深い (deep) コピーを返します。"

#: ../../library/copy.rst:32
msgid "Raised for module specific errors."
msgstr "モジュール特有のエラーを送出します。"

#: ../../library/copy.rst:36
msgid ""
"The difference between shallow and deep copying is only relevant for "
"compound objects (objects that contain other objects, like lists or class "
"instances):"
msgstr ""
"浅い (shallow) コピーと深い (deep) コピーの違いが関係するのは、複合オブジェク"
"ト (リストやクラスインスタンスのような他のオブジェクトを含むオブジェクト) だ"
"けです:"

#: ../../library/copy.rst:39
msgid ""
"A *shallow copy* constructs a new compound object and then (to the extent "
"possible) inserts *references* into it to the objects found in the original."
msgstr ""
"*浅いコピー (shallow copy)* は新たな複合オブジェクトを作成し、その後 (可能な"
"限り) 元のオブジェクト中に見つかったオブジェクトに対する *参照* を挿入しま"
"す。"

#: ../../library/copy.rst:42
msgid ""
"A *deep copy* constructs a new compound object and then, recursively, "
"inserts *copies* into it of the objects found in the original."
msgstr ""
"*深いコピー (deep copy)* は新たな複合オブジェクトを作成し、その後元のオブジェ"
"クト中に見つかったオブジェクトの *コピー* を挿入します。"

#: ../../library/copy.rst:45
msgid ""
"Two problems often exist with deep copy operations that don't exist with "
"shallow copy operations:"
msgstr ""
"深いコピー操作には、しばしば浅いコピー操作の時には存在しない 2 つの問題がつい"
"てまわります:"

#: ../../library/copy.rst:48
msgid ""
"Recursive objects (compound objects that, directly or indirectly, contain a "
"reference to themselves) may cause a recursive loop."
msgstr ""
"再帰的なオブジェクト (直接、間接に関わらず、自分自身に対する参照を持つ複合オ"
"ブジェクト) は再帰ループを引き起こします。"

#: ../../library/copy.rst:51
msgid ""
"Because deep copy copies everything it may copy too much, such as data which "
"is intended to be shared between copies."
msgstr ""
"深いコピーは何もかもコピーしてしまうため、例えば複数のコピー間で共有するつも"
"りだったデータも余分にコピーしてしまいます。"

#: ../../library/copy.rst:54
msgid "The :func:`deepcopy` function avoids these problems by:"
msgstr ""
":func:`deepcopy` 関数では、これらの問題を以下のようにして回避しています:"

#: ../../library/copy.rst:56
msgid ""
"keeping a ``memo`` dictionary of objects already copied during the current "
"copying pass; and"
msgstr ""
"現時点でのコピー過程ですでにコピーされたオブジェクトの ``memo`` 辞書を保持す"
"る。"

#: ../../library/copy.rst:59
msgid ""
"letting user-defined classes override the copying operation or the set of "
"components copied."
msgstr ""
"ユーザ定義のクラスでコピー操作やコピーされる内容の集合を上書きできるようにす"
"る。"

#: ../../library/copy.rst:62
msgid ""
"This module does not copy types like module, method, stack trace, stack "
"frame, file, socket, window, array, or any similar types.  It does \"copy\" "
"functions and classes (shallow and deeply), by returning the original object "
"unchanged; this is compatible with the way these are treated by the :mod:"
"`pickle` module."
msgstr ""
"このモジュールでは、モジュール、メソッド、スタックトレース、スタックフレー"
"ム、ファイル、ソケット、ウィンドウ、アレイ、その他これらに類似の型をコピーし"
"ません。このモジュールでは元のオブジェクトを変更せずに返すことで関数とクラス"
"を (浅くまたは深く)「コピー」します。これは :mod:`pickle` モジュールでの扱わ"
"れかたと同じです。"

#: ../../library/copy.rst:67
msgid ""
"Shallow copies of dictionaries can be made using :meth:`dict.copy`, and of "
"lists by assigning a slice of the entire list, for example, ``copied_list = "
"original_list[:]``."
msgstr ""
"辞書型の浅いコピーは :meth:`dict.copy` で、リストの浅いコピーはリスト全体を指"
"すスライス (例えば ``copied_list = original_list[:]``) でできます。"

#: ../../library/copy.rst:73
msgid ""
"Classes can use the same interfaces to control copying that they use to "
"control pickling.  See the description of module :mod:`pickle` for "
"information on these methods.  In fact, the :mod:`copy` module uses the "
"registered pickle functions from the :mod:`copyreg` module."
msgstr ""
"クラスは、コピーを制御するために pickle の制御に使用するのと同じインター"
"フェースを使用することができます。これらのメソッドについての情報はモジュー"
"ル :mod:`pickle` の説明を参照してください。実際、 :mod:`copy` モジュール"
"は、 :mod:`copyreg` モジュールによって登録された pickle 関数を使用します。"

#: ../../library/copy.rst:82
msgid ""
"In order for a class to define its own copy implementation, it can define "
"special methods :meth:`__copy__` and :meth:`__deepcopy__`.  The former is "
"called to implement the shallow copy operation; no additional arguments are "
"passed. The latter is called to implement the deep copy operation; it is "
"passed one argument, the ``memo`` dictionary.  If the :meth:`__deepcopy__` "
"implementation needs to make a deep copy of a component, it should call the :"
"func:`deepcopy` function with the component as first argument and the memo "
"dictionary as second argument."
msgstr ""
"クラス独自のコピー実装を定義するために、特殊メソッド :meth:`__copy__` およ"
"び :meth:`__deepcopy__` を定義することができます。前者は浅いコピー操作を実装"
"するために使われます; 追加の引数はありません。後者は深いコピー操作を実現する"
"ために呼び出されます; この関数には単一の引数として ``memo`` 辞書が渡されま"
"す。 :meth:`__deepcopy__` の実装で、内容のオブジェクトに対して深いコピーを生"
"成する必要がある場合、 :func:`deepcopy` を呼び出し、最初の引数にそのオブジェ"
"クトを、メモ辞書を二つ目の引数に与えなければなりません。"

#: ../../library/copy.rst:94
msgid "Module :mod:`pickle`"
msgstr ":mod:`pickle` モジュール"

#: ../../library/copy.rst:94
msgid ""
"Discussion of the special methods used to support object state retrieval and "
"restoration."
msgstr ""
"オブジェクト状態の取得と復元をサポートするために使われる特殊メソッドについて"
"議論されています。"
