# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/timeit.rst:2
msgid ":mod:`timeit` --- Measure execution time of small code snippets"
msgstr ":mod:`timeit` --- 小さなコード断片の実行時間計測"

#: ../../library/timeit.rst:14
msgid "**Source code:** :source:`Lib/timeit.py`"
msgstr "**ソースコード:** :source:`Lib/timeit.py`"

#: ../../library/timeit.rst:18
msgid ""
"This module provides a simple way to time small bits of Python code. It has "
"both a :ref:`timeit-command-line-interface` as well as a :ref:`callable "
"<python-interface>` one.  It avoids a number of common traps for measuring "
"execution times. See also Tim Peters' introduction to the \"Algorithms\" "
"chapter in the *Python Cookbook*, published by O'Reilly."
msgstr ""
"このモジュールは小さい Python コードをの時間を計測するシンプルな手段を提供し"
"ています。:ref:`timeit-command-line-interface` の他 :ref:`呼び出しも可能 "
"<python-interface>` です。このモジュールは実行時間を計測するときに共通するい"
"くつかの罠を回避します。O'Reilly 出版の *Python Cookbook* にある、Tim Peter "
"による \"Algorithms\" 章も参照してください。"

#: ../../library/timeit.rst:26
msgid "Basic Examples"
msgstr "基本的な例"

#: ../../library/timeit.rst:28
msgid ""
"The following example shows how the :ref:`timeit-command-line-interface` can "
"be used to compare three different expressions:"
msgstr ""
"次の例は :ref:`timeit-command-line-interface` を使って 3 つの異なる式の時間を"
"測定する方法を示しています。"

#: ../../library/timeit.rst:40
msgid "This can be achieved from the :ref:`python-interface` with::"
msgstr "同じ事を :ref:`python-interface` を使って実現することもできます::"

#: ../../library/timeit.rst:50
msgid ""
"Note however that :mod:`timeit` will automatically determine the number of "
"repetitions only when the command-line interface is used.  In the :ref:"
"`timeit-examples` section you can find more advanced examples."
msgstr ""
"ただし、:mod:`timeit` はコマンドラインインターフェイスを使った時だけ繰り返し"
"回数を自動で決定する事に注意してください。:ref:`timeit-examples` 節でより高度"
"な例を説明しています。"

#: ../../library/timeit.rst:58
msgid "Python Interface"
msgstr "Python インターフェイス"

#: ../../library/timeit.rst:60
msgid "The module defines three convenience functions and a public class:"
msgstr "このモジュールは 3 つの有用な関数と 1 つの公開クラスを持っています:"

#: ../../library/timeit.rst:65
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code and "
"*timer* function and run its :meth:`.timeit` method with *number* executions."
msgstr ""
"与えられた命令文、*setup* コードおよび *timer* 関数で :class:`Timer` インスタ"
"ンスを作成し、その :meth:`.timeit` メソッドを *number* 回実行します。"

#: ../../library/timeit.rst:73
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code and "
"*timer* function and run its :meth:`.repeat` method with the given *repeat* "
"count and *number* executions."
msgstr ""
"与えられた命令文、*setup* コードおよび *timer* 関数で :class:`Timer` インスタ"
"ンスを作成し、その :meth:`.repeat` メソッドを *number* 回実行することを "
"*repeat* 回繰り返します。"

#: ../../library/timeit.rst:82
msgid ""
"Define a default timer, in a platform-specific manner.  On Windows, :func:"
"`time.clock` has microsecond granularity, but :func:`time.time`'s "
"granularity is 1/60th of a second.  On Unix, :func:`time.clock` has 1/100th "
"of a second granularity, and :func:`time.time` is much more precise.  On "
"either platform, :func:`default_timer` measures wall clock time, not the CPU "
"time.  This means that other processes running on the same computer may "
"interfere with the timing."
msgstr ""
"プラットフォーム依存の方法でデフォルトのタイマを定義します。 Windows の場"
"合、 :func:`time.clock` はマイクロ秒の精度がありますが、 :func:`time.time` "
"は 1/60 秒の精度しかありません。一方 Unix の場合、 :func:`time.clock` でも "
"1/100 秒の精度があり、 :func:`time.time` はもっと正確です。いずれのプラット"
"フォームにおいても、 :func:`default_timer` 関数は CPU 時間ではなく通常の時間 "
"(wall clock time) を返します。つまり、同じコンピュータ上で別のプロセスが動い"
"ている場合、測定に干渉する可能性があるということです。"

#: ../../library/timeit.rst:93
msgid "Class for timing execution speed of small code snippets."
msgstr "小さなコード片の実行時間を計測するためのクラスです。"

#: ../../library/timeit.rst:95
msgid ""
"The constructor takes a statement to be timed, an additional statement used "
"for setup, and a timer function.  Both statements default to ``'pass'``; the "
"timer function is platform-dependent (see the module doc string). *stmt* and "
"*setup* may also contain multiple statements separated by ``;`` or newlines, "
"as long as they don't contain multi-line string literals."
msgstr ""
"コンストラクターは、計測する命令文、セットアップのための追加命令およびタイ"
"マー関数をとります。2つの命令文のデフォルトは ``'pass'`` です; タイマー関数は"
"プラットフォーム依存です (モジュールの doctring を参照)。*stmt* および  "
"*setup* には、複数行の文字列リテラルを含まない限り ``;`` や改行で区切ることで"
"複数の命令文を指定できます。"

#: ../../library/timeit.rst:101
msgid ""
"To measure the execution time of the first statement, use the :meth:`."
"timeit` method.  The :meth:`.repeat` method is a convenience to call :meth:`."
"timeit` multiple times and return a list of results."
msgstr ""
"最初の命令文の実行時間を計測するには、:meth:`.timeit` メソッドを使用します。:"
"meth:`.repeat` メソッドは :meth:`.timeit` を複数回呼び出したい時に使用し、結"
"果をリストで返します。"

#: ../../library/timeit.rst:105
msgid ""
"The *stmt* and *setup* parameters can now also take objects that are "
"callable without arguments.  This will embed calls to them in a timer "
"function that will then be executed by :meth:`.timeit`.  Note that the "
"timing overhead is a little larger in this case because of the extra "
"function calls."
msgstr ""
"*stmt* と *setup* 引数は、引数なしの呼び出し可能オブジェクトも受け取れるよう"
"になりました。オブジェクトを与えると、そのオブジェクトへの呼び出しがタイマー"
"関数に埋め込まれ、そしてその関数が :meth:`timeit` によって実行されます。この"
"場合、関数呼び出しが増えるために、オーバーヘッドが少し増えることに注意してく"
"ださい。"

#: ../../library/timeit.rst:115
msgid ""
"Time *number* executions of the main statement.  This executes the setup "
"statement once, and then returns the time it takes to execute the main "
"statement a number of times, measured in seconds as a float. The argument is "
"the number of times through the loop, defaulting to one million.  The main "
"statement, the setup statement and the timer function to be used are passed "
"to the constructor."
msgstr ""
"メイン文を *number* 回実行した時間を計測します。このメソッドはセットアップ文"
"を1回だけ実行し、メイン文を指定回数実行するのにかかった秒数を浮動小数で返しま"
"す。引数はループを何回実行するかの指定で、デフォルト値は 100万回です。メイン"
"文、セットアップ文、タイマー関数はコンストラクターで指定されたものを使用しま"
"す。"

#: ../../library/timeit.rst:124
msgid ""
"By default, :meth:`.timeit` temporarily turns off :term:`garbage collection` "
"during the timing.  The advantage of this approach is that it makes "
"independent timings more comparable.  This disadvantage is that GC may be an "
"important component of the performance of the function being measured.  If "
"so, GC can be re-enabled as the first statement in the *setup* string.  For "
"example::"
msgstr ""
"デフォルトでは、:meth:`.timeit` は計測中、一時的に :term:`ガベージコレクショ"
"ン<garbage collection>` を停止します。この手法の利点は個々の計測結果がより比"
"較しやすくなることです。欠点は、ガベージコレクションが関数の性能を計測するた"
"めの重要な要素である場合があることです。それに該当する場合、*setup* 文字列の"
"最初の命令文でガベージコレクションを有効にできます。以下に例を示します::"

#: ../../library/timeit.rst:136
msgid "Call :meth:`.timeit` a few times."
msgstr ":meth:`.timeit` を複数回繰り返します。"

#: ../../library/timeit.rst:138
msgid ""
"This is a convenience function that calls the :meth:`.timeit` repeatedly, "
"returning a list of results.  The first argument specifies how many times to "
"call :meth:`.timeit`.  The second argument specifies the *number* argument "
"for :meth:`.timeit`."
msgstr ""
"これは :meth:`.timeit` を繰り返し呼び出したい時に有用で、結果をリストにして返"
"します。最初の引数で何回 :meth:`.timeit` を呼ぶか指定します。第 2 引数で :"
"meth:`.timeit` の引数 *number* を指定します。"

#: ../../library/timeit.rst:145
msgid ""
"It's tempting to calculate mean and standard deviation from the result "
"vector and report these.  However, this is not very useful. In a typical "
"case, the lowest value gives a lower bound for how fast your machine can run "
"the given code snippet; higher values in the result vector are typically not "
"caused by variability in Python's speed, but by other processes interfering "
"with your timing accuracy. So the :func:`min` of the result is probably the "
"only number you should be interested in.  After that, you should look at the "
"entire vector and apply common sense rather than statistics."
msgstr ""
"結果のベクトルから平均値や標準偏差を計算して出力させたいと思うかもしれません"
"が、それはあまり意味がありません。多くの場合、最も低い値がそのマシンが与えら"
"れたコード断片を実行する場合の下限値です。結果のうち高めの値は、Python のス"
"ピードが一定しないために生じたものではなく、その他の計測精度に影響を及ぼすプ"
"ロセスによるものです。したがって、結果のうち :func:`min` だけが見るべき値とな"
"るでしょう。この点を押さえた上で、統計的な分析よりも常識的な判断で結果を見る"
"ようにしてください。"

#: ../../library/timeit.rst:158
msgid "Helper to print a traceback from the timed code."
msgstr "計測対象コードのトレースバックを出力するためのヘルパーです。"

#: ../../library/timeit.rst:160
msgid "Typical use::"
msgstr "利用例::"

#: ../../library/timeit.rst:168
msgid ""
"The advantage over the standard traceback is that source lines in the "
"compiled template will be displayed. The optional *file* argument directs "
"where the traceback is sent; it defaults to :data:`sys.stderr`."
msgstr ""
"これが標準のトレースバックよりも優れている点は、コンパイルしたテンプレートの"
"ソース行が表示されることです。オプションの引数 *file* にはトレースバックの出"
"力先を指定します。デフォルトは :data:`sys.stderr` になります。"

#: ../../library/timeit.rst:176
msgid "Command-Line Interface"
msgstr "コマンドラインインターフェイス"

#: ../../library/timeit.rst:178
msgid ""
"When called as a program from the command line, the following form is used::"
msgstr "コマンドラインからプログラムとして呼び出す場合は、次の書式を使います::"

#: ../../library/timeit.rst:182
msgid "Where the following options are understood:"
msgstr "以下のオプションが使用できます:"

#: ../../library/timeit.rst:188
msgid "how many times to execute 'statement'"
msgstr "'statement' を実行する回数"

#: ../../library/timeit.rst:192
msgid "how many times to repeat the timer (default 3)"
msgstr "タイマーを繰り返す回数 (デフォルトは 3)"

#: ../../library/timeit.rst:196
msgid "statement to be executed once initially (default ``pass``)"
msgstr "最初に1回だけ実行する文 (デフォルトは ``pass``)"

#: ../../library/timeit.rst:200
msgid "use :func:`time.time` (default on all platforms but Windows)"
msgstr ""
":func:`time.time` を使用する (Windows を除くすべてのプラットフォームのデフォ"
"ルト)"

#: ../../library/timeit.rst:204
msgid "use :func:`time.clock` (default on Windows)"
msgstr ":func:`time.clock` を使用する(Windows のデフォルト)"

#: ../../library/timeit.rst:208
msgid "print raw timing results; repeat for more digits precision"
msgstr "時間計測の結果をそのまま詳細な数値でくり返し表示する"

#: ../../library/timeit.rst:212
msgid "print a short usage message and exit"
msgstr "簡単な使い方を表示して終了する"

#: ../../library/timeit.rst:214
msgid ""
"A multi-line statement may be given by specifying each line as a separate "
"statement argument; indented lines are possible by enclosing an argument in "
"quotes and using leading spaces.  Multiple :option:`-s` options are treated "
"similarly."
msgstr ""
"文は複数行指定することもできます。その場合、各行は独立した文として引数に指定"
"されたものとして処理します。クォートと行頭のスペースを使って、インデントした"
"文を使うことも可能です。この複数行のオプションは  :option:`-s` においても同じ"
"形式で指定可能です。"

#: ../../library/timeit.rst:219
msgid ""
"If :option:`-n` is not given, a suitable number of loops is calculated by "
"trying successive powers of 10 until the total time is at least 0.2 seconds."
msgstr ""
"オプション :option:`-n` でループの回数が指定されていない場合、10 回から始め"
"て、所要時間が 0.2 秒になるまで回数を増やすことで適切なループ回数が自動計算さ"
"れるようになっています。"

#: ../../library/timeit.rst:222
msgid ""
":func:`default_timer` measurations can be affected by other programs running "
"on the same machine, so the best thing to do when accurate timing is "
"necessary is to repeat the timing a few times and use the best time.  The :"
"option:`-r` option is good for this; the default of 3 repetitions is "
"probably enough in most cases.  On Unix, you can use :func:`time.clock` to "
"measure CPU time."
msgstr ""
":func:`default_timer` の結果は同じコンピュータ上で動作している別のプロセスに"
"影響を受けることがあります。そのため、正確な時間を計測する必要がある場合に最"
"善の方法は、時間の取得を数回くり返してその中の最短の時間を採用することで"
"す。 :option:`-r` オプションはこれをおこなうもので、デフォルトのくり返し回数"
"は3回になっています。多くの場合はデフォルトのままで充分でしょう。 Unix の場"
"合 :func:`time.clock` を使って CPU 時間で測定することもできます。"

#: ../../library/timeit.rst:231
msgid ""
"There is a certain baseline overhead associated with executing a pass "
"statement. The code here doesn't try to hide it, but you should be aware of "
"it.  The baseline overhead can be measured by invoking the program without "
"arguments, and it might differ between Python versions.  Also, to fairly "
"compare older Python versions to Python 2.3, you may want to use Python's :"
"option:`!-O` option (see :ref:`Optimizations <using-on-optimizations>`) for "
"the older versions to avoid timing ``SET_LINENO`` instructions."
msgstr ""
"pass 文の実行による基本的なオーバーヘッドが存在することに注意してください。こ"
"こにあるコードはこの事実を隠そうとはしていませんが、注意する必要があります。"
"基本的なオーバーヘッドは引数なしでプログラムを起動することにより計測でき、そ"
"れは Python のバージョンによって異なるでしょう。 Python 2.3 とそれ以前の "
"Python の公平な比較をおこなう場合、古い Python では :option:`!-O` オプション "
"(:ref:`最適化 <using-on-optimizations>` を参照) を付けて起動して "
"``SET_LINENO`` 命令の実行時間が含まれないようにする必要があります。"

#: ../../library/timeit.rst:243
msgid "Examples"
msgstr "例"

#: ../../library/timeit.rst:245
msgid ""
"It is possible to provide a setup statement that is executed only once at "
"the beginning:"
msgstr "最初に 1 回だけ実行されるセットアップ文を指定することが可能です:"

#: ../../library/timeit.rst:262
msgid "The same can be done using the :class:`Timer` class and its methods::"
msgstr ""
"同じことは :class:`Timer` クラスとそのメソッドを使用して行うこともできます::"

#: ../../library/timeit.rst:272
msgid ""
"The following examples show how to time expressions that contain multiple "
"lines. Here we compare the cost of using :func:`hasattr` vs. :keyword:`try`/:"
"keyword:`except` to test for missing and present object attributes:"
msgstr ""
"以下の例は、複数行を含んだ式を計測する方法を示しています。ここでは、オブジェ"
"クトの存在する属性と存在しない属性に対してテストするために :func:`hasattr` "
"と :keyword:`try`/:keyword:`except` を使用した場合のコストを比較しています:"

#: ../../library/timeit.rst:317
msgid ""
"To give the :mod:`timeit` module access to functions you define, you can "
"pass a *setup* parameter which contains an import statement::"
msgstr ""
"定義した関数に :mod:`timeit` モジュールがアクセスできるようにするために、 "
"import 文の入った *setup* パラメーターを渡すことができます::"
