# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# E. Kawashima, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2017
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2017
# Masato HASHIMOTO <cabezon.hashimoto@gmail.com>, 2017
# Inada Naoki <songofacandy@gmail.com>, 2017
# Arihiro TAKASE, 2017
# Osamu NAKAMURA, 2017
# yuji takesue <taketakeyyy@gmail.com>, 2018
# tomo, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-03 13:46+0000\n"
"PO-Revision-Date: 2017-02-16 23:30+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/timeit.rst:2
msgid ":mod:`timeit` --- Measure execution time of small code snippets"
msgstr ":mod:`timeit` --- 小さなコード断片の実行時間計測"

#: ../../library/timeit.rst:7
msgid "**Source code:** :source:`Lib/timeit.py`"
msgstr "**ソースコード:** :source:`Lib/timeit.py`"

#: ../../library/timeit.rst:15
msgid ""
"This module provides a simple way to time small bits of Python code. It has "
"both a :ref:`timeit-command-line-interface` as well as a :ref:`callable "
"<python-interface>` one.  It avoids a number of common traps for measuring "
"execution times. See also Tim Peters' introduction to the \"Algorithms\" "
"chapter in the *Python Cookbook*, published by O'Reilly."
msgstr ""
"このモジュールは小さい Python コードをの時間を計測するシンプルな手段を提供しています。:ref:`timeit-command-line-"
"interface` の他 :ref:`呼び出しも可能 <python-interface>` "
"です。このモジュールは実行時間を計測するときに共通するいくつかの罠を回避します。O'Reilly 出版の *Python Cookbook* "
"にある、Tim Peter による \"Algorithms\" 章も参照してください。"

#: ../../library/timeit.rst:23
msgid "Basic Examples"
msgstr "基本的な例"

#: ../../library/timeit.rst:25
msgid ""
"The following example shows how the :ref:`timeit-command-line-interface` can"
" be used to compare three different expressions:"
msgstr ""
"次の例は :ref:`timeit-command-line-interface` を使って 3 つの異なる式の時間を測定する方法を示しています。"

#: ../../library/timeit.rst:37
msgid "This can be achieved from the :ref:`python-interface` with::"
msgstr "同じ事を :ref:`python-interface` を使って実現することもできます::"

#: ../../library/timeit.rst:47
msgid "A callable can also be passed from the :ref:`python-interface`::"
msgstr "呼び出し可能オブジェクトは :ref:`python-interface` から渡すこともできます::"

#: ../../library/timeit.rst:52
msgid ""
"Note however that :func:`.timeit` will automatically determine the number of"
" repetitions only when the command-line interface is used.  In the :ref"
":`timeit-examples` section you can find more advanced examples."
msgstr ""
"ただし、:func:`timeit` はコマンドラインインターフェイスを使った時だけ繰り返し回数を自動で決定する事に注意してください。:ref"
":`timeit-examples` 節でより高度な例を説明しています。"

#: ../../library/timeit.rst:60
msgid "Python Interface"
msgstr "Python インターフェイス"

#: ../../library/timeit.rst:62
msgid "The module defines three convenience functions and a public class:"
msgstr "このモジュールは 3 つの有用な関数と 1 つの公開クラスを持っています:"

#: ../../library/timeit.rst:67
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code and "
"*timer* function and run its :meth:`.timeit` method with *number* "
"executions. The optional *globals* argument specifies a namespace in which "
"to execute the code."
msgstr ""
"与えられた文、*setup* コードおよび *timer* 関数で :class:`Timer` インスタンスを作成し、その :meth:`.timeit` メソッドを *number* 回実行します。\n"
"任意の *globals* 引数はコードを実行する名前空間を指定します。"

#: ../../library/timeit.rst:72 ../../library/timeit.rst:83
#: ../../library/timeit.rst:120
msgid "The optional *globals* parameter was added."
msgstr "任意の *globals* 引数が追加されました。"

#: ../../library/timeit.rst:78
msgid ""
"Create a :class:`Timer` instance with the given statement, *setup* code and "
"*timer* function and run its :meth:`.repeat` method with the given *repeat* "
"count and *number* executions.  The optional *globals* argument specifies a "
"namespace in which to execute the code."
msgstr ""
"与えられた文、*setup* コードおよび *timer* 関数で :class:`Timer` インスタンスを作成し、その :meth:`.repeat` メソッドを *repeat* 回繰り返すのを *number* 回実行します。\n"
"任意の *globals* 引数はコードを実行する名前空間を指定します。"

#: ../../library/timeit.rst:86 ../../library/timeit.rst:181
msgid "Default value of *repeat* changed from 3 to 5."
msgstr "*repeat* のデフォルト値が 3 から 5 へ変更されました。"

#: ../../library/timeit.rst:91
msgid "The default timer, which is always :func:`time.perf_counter`."
msgstr "デフォルトのタイマーです。常に :func:`time.perf_counter` です。"

#: ../../library/timeit.rst:93
msgid ":func:`time.perf_counter` is now the default timer."
msgstr "デフォルトのタイマーが :func:`time.perf_counter` になりました。"

#: ../../library/timeit.rst:99
msgid "Class for timing execution speed of small code snippets."
msgstr "小さなコード片の実行時間を計測するためのクラスです。"

#: ../../library/timeit.rst:101
msgid ""
"The constructor takes a statement to be timed, an additional statement used "
"for setup, and a timer function.  Both statements default to ``'pass'``; the"
" timer function is platform-dependent (see the module doc string). *stmt* "
"and *setup* may also contain multiple statements separated by ``;`` or "
"newlines, as long as they don't contain multi-line string literals.  The "
"statement will by default be executed within timeit's namespace; this "
"behavior can be controlled by passing a namespace to *globals*."
msgstr ""
"コンストラクターは計測する文、セットアップのための追加の文、ならびにタイマー関数を取ります。\n"
"両文のデフォルトは ``'pass'`` です。\n"
"タイマー関数はプラットフォーム依存です (モジュールの doctring を参照)。\n"
"*stmt* および  *setup* には、複数行の文字列リテラルを含まない限り、 ``;`` や改行で区切られた複数の文でも構いません。\n"
"デフォルトでは文は timeit の名前空間内で実行されます。\n"
"この挙動は名前空間を *globals*  に渡すことで制御出来ます。"

#: ../../library/timeit.rst:109
msgid ""
"To measure the execution time of the first statement, use the "
":meth:`.timeit` method.  The :meth:`.repeat` and :meth:`.autorange` methods "
"are convenience methods to call :meth:`.timeit` multiple times."
msgstr ""
"最初の命令文の実行時間を計測するには、:meth:`.timeit` メソッドを使用します。:meth:`.repeat` "
"と:meth:`autorange`メソッドは :meth:`.timeit` を複数回呼び出したい時に使用します。"

#: ../../library/timeit.rst:113
msgid ""
"The execution time of *setup* is excluded from the overall timed execution "
"run."
msgstr "*setup* の実行時間は全実行時間から除外されています。"

#: ../../library/timeit.rst:115
msgid ""
"The *stmt* and *setup* parameters can also take objects that are callable "
"without arguments.  This will embed calls to them in a timer function that "
"will then be executed by :meth:`.timeit`.  Note that the timing overhead is "
"a little larger in this case because of the extra function calls."
msgstr ""
"*stmt* および *setup* "
"パラメータは、引数なしの呼び出し可能オブジェクトをとることもできます。呼び出し可能オブジェクトを指定すると、そのオブジェクトの呼び出しがタイマー関数に埋め込まれ、その関数が"
" :meth:`.timeit` "
"メソッドによって実行されます。この場合、関数呼び出しが増えるためにタイミングのオーバーヘッドが少し増える点に注意してください。"

#: ../../library/timeit.rst:125
msgid ""
"Time *number* executions of the main statement.  This executes the setup "
"statement once, and then returns the time it takes to execute the main "
"statement a number of times, measured in seconds as a float. The argument is"
" the number of times through the loop, defaulting to one million.  The main "
"statement, the setup statement and the timer function to be used are passed "
"to the constructor."
msgstr ""
"メイン文を *number* "
"回実行した時間を計測します。このメソッドはセットアップ文を1回だけ実行し、メイン文を指定回数実行するのにかかった秒数を浮動小数で返します。引数はループを何回実行するかの指定で、デフォルト値は"
" 100万回です。メイン文、セットアップ文、タイマー関数はコンストラクターで指定されたものを使用します。"

#: ../../library/timeit.rst:134
msgid ""
"By default, :meth:`.timeit` temporarily turns off :term:`garbage collection`"
" during the timing.  The advantage of this approach is that it makes "
"independent timings more comparable.  The disadvantage is that GC may be an "
"important component of the performance of the function being measured.  If "
"so, GC can be re-enabled as the first statement in the *setup* string.  For "
"example::"
msgstr ""
"デフォルトでは、:meth:`.timeit` は計測中、一時的に :term:`ガベージコレクション<garbage collection>` を停止します。\n"
"この手法の利点は個々の計測結果がより比較しやすくなることです。\n"
"欠点は、ガベージコレクションが計測される関数の性能の重要な要素である場合があることです。\n"
"その場合、*setup* 文字列の最初の文でガベージコレクションを有効にできます。\n"
"以下に例を示します::"

#: ../../library/timeit.rst:146
msgid "Automatically determine how many times to call :meth:`.timeit`."
msgstr ":meth:`.timeit` を呼び出す回数を自動的に決定します。"

#: ../../library/timeit.rst:148
msgid ""
"This is a convenience function that calls :meth:`.timeit` repeatedly so that"
" the total time >= 0.2 second, returning the eventual (number of loops, time"
" taken for that number of loops). It calls :meth:`.timeit` with increasing "
"numbers from the sequence 1, 2, 5, 10, 20, 50, ... until the time taken is "
"at least 0.2 second."
msgstr ""
"これは総時間が0.2秒以上になるように :meth:`.timeit` を繰り返し呼び出す便利な関数で、最終的な結果（ループ回数、ループ回数に要した時間）を返します。\n"
"要した時間が少なくとも0.2秒になるまで、シーケンス1, 2, 5, 10, 20, 50, ... から増加する回数で :meth:`.timeit` を呼び出します。"

#: ../../library/timeit.rst:154
msgid ""
"If *callback* is given and is not ``None``, it will be called after each "
"trial with two arguments: ``callback(number, time_taken)``."
msgstr ""
"*callback* が与えられ、Noneでない場合は、 callback(number, time_taken) "
"という2つの引数を指定して試行された後に呼び出されます。"

#: ../../library/timeit.rst:162
msgid "Call :meth:`.timeit` a few times."
msgstr ":meth:`.timeit` を複数回繰り返します。"

#: ../../library/timeit.rst:164
msgid ""
"This is a convenience function that calls the :meth:`.timeit` repeatedly, "
"returning a list of results.  The first argument specifies how many times to"
" call :meth:`.timeit`.  The second argument specifies the *number* argument "
"for :meth:`.timeit`."
msgstr ""
"これは :meth:`.timeit` を繰り返し呼び出したい時に有用で、結果をリストにして返します。最初の引数で何回 :meth:`.timeit` "
"を呼ぶか指定します。第 2 引数で :meth:`.timeit` の引数 *number* を指定します。"

#: ../../library/timeit.rst:171
msgid ""
"It's tempting to calculate mean and standard deviation from the result "
"vector and report these.  However, this is not very useful. In a typical "
"case, the lowest value gives a lower bound for how fast your machine can run"
" the given code snippet; higher values in the result vector are typically "
"not caused by variability in Python's speed, but by other processes "
"interfering with your timing accuracy. So the :func:`min` of the result is "
"probably the only number you should be interested in.  After that, you "
"should look at the entire vector and apply common sense rather than "
"statistics."
msgstr ""
"結果のベクトルから平均値や標準偏差を計算して出力させたいと思うかもしれませんが、それはあまり意味がありません。多くの場合、最も低い値がそのマシンが与えられたコード断片を実行する場合の下限値です。結果のうち高めの値は、Python"
" のスピードが一定しないために生じたものではなく、その他の計測精度に影響を及ぼすプロセスによるものです。したがって、結果のうち :func:`min` "
"だけが見るべき値となるでしょう。この点を押さえた上で、統計的な分析よりも常識的な判断で結果を見るようにしてください。"

#: ../../library/timeit.rst:187
msgid "Helper to print a traceback from the timed code."
msgstr "計測対象コードのトレースバックを出力するためのヘルパーです。"

#: ../../library/timeit.rst:189
msgid "Typical use::"
msgstr "利用例::"

#: ../../library/timeit.rst:197
msgid ""
"The advantage over the standard traceback is that source lines in the "
"compiled template will be displayed.  The optional *file* argument directs "
"where the traceback is sent; it defaults to :data:`sys.stderr`."
msgstr ""
"これの標準のトレースバックより優れた点は、コンパイルしたテンプレートのソース行が表示されることです。オプションの引数 *file* "
"にはトレースバックの出力先を指定します。デフォルトは :data:`sys.stderr` になります。"

#: ../../library/timeit.rst:205
msgid "Command-Line Interface"
msgstr "コマンドラインインターフェイス"

#: ../../library/timeit.rst:207
msgid ""
"When called as a program from the command line, the following form is used::"
msgstr "コマンドラインからプログラムとして呼び出す場合は、次の書式を使います::"

#: ../../library/timeit.rst:211
msgid "Where the following options are understood:"
msgstr "以下のオプションが使用できます:"

#: ../../library/timeit.rst:217
msgid "how many times to execute 'statement'"
msgstr "'statement' を実行する回数"

#: ../../library/timeit.rst:221
msgid "how many times to repeat the timer (default 5)"
msgstr "timer を繰り返す回数（デフォルトは5）"

#: ../../library/timeit.rst:225
msgid "statement to be executed once initially (default ``pass``)"
msgstr "最初に1回だけ実行する文 (デフォルトは ``pass``)"

#: ../../library/timeit.rst:229
msgid ""
"measure process time, not wallclock time, using :func:`time.process_time` "
"instead of :func:`time.perf_counter`, which is the default"
msgstr ""
"デフォルトの :func:`time.perf_counter` の代わり :func:`time.process_time` "
"を利用して、実時間ではなくプロセス時間を計測します"

#: ../../library/timeit.rst:236
msgid ""
"specify a time unit for timer output; can select nsec, usec, msec, or sec"
msgstr "timer 出力の時間の単位を指定します。 nsec、usec、msec、secを選択できます。"

#: ../../library/timeit.rst:242
msgid "print raw timing results; repeat for more digits precision"
msgstr "時間計測の結果をそのまま詳細な数値でくり返し表示する"

#: ../../library/timeit.rst:246
msgid "print a short usage message and exit"
msgstr "簡単な使い方を表示して終了する"

#: ../../library/timeit.rst:248
msgid ""
"A multi-line statement may be given by specifying each line as a separate "
"statement argument; indented lines are possible by enclosing an argument in "
"quotes and using leading spaces.  Multiple :option:`-s` options are treated "
"similarly."
msgstr ""
"文は複数行指定することもできます。その場合、各行は独立した文として引数に指定されたものとして処理します。クォートと行頭のスペースを使って、インデントした文を使うことも可能です。この複数行のオプションは"
"  :option:`-s` においても同じ形式で指定可能です。"

#: ../../library/timeit.rst:253
msgid ""
"If :option:`-n` is not given, a suitable number of loops is calculated by "
"trying increasing numbers from the sequence 1, 2, 5, 10, 20, 50, ... until "
"the total time is at least 0.2 seconds."
msgstr ""

#: ../../library/timeit.rst:257
msgid ""
":func:`default_timer` measurements can be affected by other programs running"
" on the same machine, so the best thing to do when accurate timing is "
"necessary is to repeat the timing a few times and use the best time.  The "
":option:`-r` option is good for this; the default of 5 repetitions is "
"probably enough in most cases.  You can use :func:`time.process_time` to "
"measure CPU time."
msgstr ""
":func:`default_timer` "
"の測定値は、同じマシン上で実行されている他のプログラムの影響を受ける可能性があるため、正確な時間計測が必要な場合は、計測を数回繰り返し、最適な時間を使用することをおすすめします。"
" :option:`-r` オプションはこれに適しています。ほとんどの場合、デフォルトの5回の繰り返しで十分でしょう。 "
":func:`time.process_time` を使用すればCPU時間を測定できます。"

#: ../../library/timeit.rst:265
msgid ""
"There is a certain baseline overhead associated with executing a pass "
"statement. The code here doesn't try to hide it, but you should be aware of "
"it.  The baseline overhead can be measured by invoking the program without "
"arguments, and it might differ between Python versions."
msgstr ""
"pass "
"文の実行には基本的なオーバーヘッドが存在します。ここにあるコードはこの事実を隠そうとはしていませんが、注意する必要があります。基本的なオーバーヘッドは引数なしでプログラムを起動することにより計測でき、それは"
" Python のバージョンによって異なるでしょう。"

#: ../../library/timeit.rst:274
msgid "Examples"
msgstr "使用例"

#: ../../library/timeit.rst:276
msgid ""
"It is possible to provide a setup statement that is executed only once at "
"the beginning:"
msgstr "最初に 1 回だけ実行されるセットアップ文を指定することが可能です:"

#: ../../library/timeit.rst:293
msgid "The same can be done using the :class:`Timer` class and its methods::"
msgstr "同じことは :class:`Timer` クラスとそのメソッドを使用して行うこともできます::"

#: ../../library/timeit.rst:303
msgid ""
"The following examples show how to time expressions that contain multiple "
"lines. Here we compare the cost of using :func:`hasattr` vs. "
":keyword:`try`/:keyword:`except` to test for missing and present object "
"attributes:"
msgstr ""
"以下の例は、複数行を含んだ式を計測する方法を示しています。ここでは、オブジェクトの存在する属性と存在しない属性に対してテストするために "
":func:`hasattr` と :keyword:`try`/:keyword:`except` を使用した場合のコストを比較しています:"

#: ../../library/timeit.rst:349
msgid ""
"To give the :mod:`timeit` module access to functions you define, you can "
"pass a *setup* parameter which contains an import statement::"
msgstr ""
"定義した関数に :mod:`timeit` モジュールがアクセスできるようにするために、 import 文の入った *setup* "
"パラメータを渡すことができます::"

#: ../../library/timeit.rst:360
msgid ""
"Another option is to pass :func:`globals` to the  *globals* parameter, which"
" will cause the code to be executed within your current global namespace.  "
"This can be more convenient than individually specifying imports::"
msgstr ""
"他のオプションは :func:`globals` を *globals* 引数に渡すことです。\n"
"これによりコードはあなたのグローバル名前空間内で実行されます。\n"
"これはそれぞれでインポートするより 便利です::"
