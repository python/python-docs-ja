# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Skydelta, 2023
# tomo, 2024
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-11 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:08+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/importlib.metadata.rst:5
msgid ":mod:`!importlib.metadata` -- Accessing package metadata"
msgstr ":mod:`!importlib.metadata` -- パッケージメタデータへのアクセス"

#: ../../library/importlib.metadata.rst:11
msgid "``importlib.metadata`` is no longer provisional."
msgstr "``importlib.metadata`` は暫定的なものではなくなりました。"

#: ../../library/importlib.metadata.rst:14
msgid "**Source code:** :source:`Lib/importlib/metadata/__init__.py`"
msgstr "**ソースコード:** :source:`Lib/importlib/metadata/__init__.py`"

#: ../../library/importlib.metadata.rst:16
msgid ""
"``importlib.metadata`` is a library that provides access to the metadata of "
"an installed `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_, such as its entry points or its top-"
"level names (`Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_\\s, modules, if any). Built in part on "
"Python's import system, this library intends to replace similar "
"functionality in the `entry point API`_ and `metadata API`_ of "
"``pkg_resources``.  Along with :mod:`importlib.resources`, this package can "
"eliminate the need to use the older and less efficient ``pkg_resources`` "
"package."
msgstr ""
"``importlib.metadata`` はインストールされた `配布パッケージ <https://"
"packaging.python.org/ja/latest/glossary/#term-Distribution-Package>`_ のエン"
"トリポイントやトップレベル名 (あれば、 `パッケージ <https://packaging.python."
"org/ja/latest/glossary/#term-Import-Package>`_ やモジュール) のようなメタデー"
"タへのアクセスを提供するライブラリです。Pythonのインポートシステムをベースに"
"構築されており、このライブラリは ``pkg_resources`` の `entry point API`_ と "
"`metadata API`_ にある同様の機能を置き換えることを目的としています。:mod:"
"`importlib.resources` と共に、このパッケージは古くて効率の悪い "
"``pkg_resources`` パッケージを使う必要性を無くすことができます。"

#: ../../library/importlib.metadata.rst:27
msgid ""
"``importlib.metadata`` operates on third-party *distribution packages* "
"installed into Python's ``site-packages`` directory via tools such as :pypi:"
"`pip`. Specifically, it works with distributions with discoverable ``dist-"
"info`` or ``egg-info`` directories, and metadata defined by the `Core "
"metadata specifications <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_."
msgstr ""
"``importlib.metadata`` は、Pythonの ``site-packages`` ディレクトリに :pypi:"
"`pip` などのツールでインストールしたサードパーティの *配布パッケージ* に対し"
"て動作します。具体的には、 ``dist-info`` や ``egg-info`` ディレクトリを持つ配"
"布物や、 `コアとなるメタデータの仕様 <https://packaging.python.org/ja/latest/"
"specifications/core-metadata/#core-metadata>`_ で定義されたメタデータを検出で"
"きるようにします。"

#: ../../library/importlib.metadata.rst:36
msgid ""
"These are *not* necessarily equivalent to or correspond 1:1 with the top-"
"level *import package* names that can be imported inside Python code. One "
"*distribution package* can contain multiple *import packages* (and single "
"modules), and one top-level *import package* may map to multiple "
"*distribution packages* if it is a namespace package. You can use :ref:"
"`packages_distributions() <package-distributions>` to get a mapping between "
"them."
msgstr ""
"これらはPythonコード内でインポートできるトップレベルの *パッケージ* 名と *必"
"ずしも* 同等であったり、1:1 で対応するものではありません。1つの *配布パッケー"
"ジ* は複数の *パッケージ* (および単一のモジュール) を含むことができ、1つの"
"トップレベルの *パッケージ* は、それが名前空間パッケージであれば複数の *配布"
"パッケージ* にマップすることができます。これらのマッピングを得るには :ref:"
"`packages_distributions() <package-distributions>`  を使用します。"

#: ../../library/importlib.metadata.rst:47
msgid ""
"By default, distribution metadata can live on the file system or in zip "
"archives on :data:`sys.path`.  Through an extension mechanism, the metadata "
"can live almost anywhere."
msgstr ""
"デフォルトでは、配布物のメタデータはファイルシステム上、または :data:`sys."
"path` のzipアーカイブに保存されます。拡張機構により、メタデータはほとんどどこ"
"にでも置くことができます。"

#: ../../library/importlib.metadata.rst:55
msgid "https://importlib-metadata.readthedocs.io/"
msgstr "https://importlib-metadata.readthedocs.io/"

#: ../../library/importlib.metadata.rst:56
msgid ""
"The documentation for ``importlib_metadata``, which supplies a backport of "
"``importlib.metadata``. This includes an `API reference <https://importlib-"
"metadata.readthedocs.io/en/latest/api.html>`__ for this module's classes and "
"functions, as well as a `migration guide <https://importlib-metadata."
"readthedocs.io/en/latest/migration.html>`__ for existing users of "
"``pkg_resources``."
msgstr ""
"``importlib_metadata`` のドキュメントは ``importlib.metadata`` のバックポート"
"です。これには、このモジュールのクラスと関数の `APIリファレンス <https://"
"importlib-metadata.readthedocs.io/en/latest/api.html>`__ と、 "
"``pkg_resources`` の既存のユーザーのための `移行ガイド <https://importlib-"
"metadata.readthedocs.io/en/latest/migration.html>`__ があります。"

#: ../../library/importlib.metadata.rst:67
msgid "Overview"
msgstr "概要"

#: ../../library/importlib.metadata.rst:69
msgid ""
"Let's say you wanted to get the version string for a `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ you've installed using ``pip``.  We start by creating a virtual "
"environment and installing something into it:"
msgstr ""
"例えば、``pip`` を使ってインストールした `配布パッケージ <https://packaging."
"python.org/ja/latest/glossary/#term-Distribution-Package>`_ のバージョン文字"
"列を取得したいとします。 まず、仮想環境を作成し、そこに何かをインストールする"
"ことから始めましょう:"

#: ../../library/importlib.metadata.rst:74
msgid ""
"$ python -m venv example\n"
"$ source example/bin/activate\n"
"(example) $ python -m pip install wheel"
msgstr ""

#: ../../library/importlib.metadata.rst:80
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr ""
"以下のように実行することで、``wheel`` のバージョン文字列を取得することができ"
"ます::"

#: ../../library/importlib.metadata.rst:82
msgid ""
"(example) $ python\n"
">>> from importlib.metadata import version  \n"
">>> version('wheel')  \n"
"'0.32.3'"
msgstr ""

#: ../../library/importlib.metadata.rst:89
msgid ""
"You can also get a collection of entry points selectable by properties of "
"the EntryPoint (typically 'group' or 'name'), such as ``console_scripts``, "
"``distutils.commands`` and others.  Each group contains a collection of :ref:"
"`EntryPoint <entry-points>` objects."
msgstr ""
"また、 ``console_scripts`` や ``distutils.commands`` などのエントリポイントの"
"プロパティ(通常は 'group' や 'name' )で選択可能なエントリポイントの集合を取得"
"することができます。 各グループは :ref:`エントリポイント <entry-points>` オブ"
"ジェクトの集合を含んでいます。"

#: ../../library/importlib.metadata.rst:93
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr ""
":ref:`ディストリビューションのメタデータ <metadata>` を取得することができま"
"す。::"

#: ../../library/importlib.metadata.rst:95
msgid ""
">>> list(metadata('wheel'))  \n"
"['Metadata-Version', 'Name', 'Version', 'Summary', 'Home-page', 'Author', "
"'Author-email', 'Maintainer', 'Maintainer-email', 'License', 'Project-URL', "
"'Project-URL', 'Project-URL', 'Keywords', 'Platform', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Requires-Python', 'Provides-Extra', 'Requires-Dist', "
"'Requires-Dist']"
msgstr ""

#: ../../library/importlib.metadata.rst:98
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list its :"
"ref:`constituent files <files>`, and get a list of the distribution's :ref:"
"`requirements`."
msgstr ""
"また、 :ref:`配布物のバージョン番号 <version>` を取得し、 :ref:`構成ファイル "
"<files>` をリストアップし、配布物の :ref:`requirements` のリストを取得するこ"
"とができます。"

#: ../../library/importlib.metadata.rst:105
msgid ""
"Subclass of :class:`ModuleNotFoundError` raised by several functions in this "
"module when queried for a distribution package which is not installed in the "
"current Python environment."
msgstr ""

#: ../../library/importlib.metadata.rst:111
msgid "Functional API"
msgstr "機能 API"

#: ../../library/importlib.metadata.rst:113
msgid "This package provides the following functionality via its public API."
msgstr "本パッケージは、公開APIを通じて以下の機能を提供します。"

#: ../../library/importlib.metadata.rst:119
msgid "Entry points"
msgstr "エントリポイント"

#: ../../library/importlib.metadata.rst:123
msgid ""
"Returns a :class:`EntryPoints` instance describing entry points for the "
"current environment. Any given keyword parameters are passed to the :meth:`!"
"select` method for comparison to the attributes of the individual entry "
"point definitions."
msgstr ""

#: ../../library/importlib.metadata.rst:128
msgid ""
"Note: it is not currently possible to query for entry points based on their :"
"attr:`!EntryPoint.dist` attribute (as different :class:`!Distribution` "
"instances do not currently compare equal, even if they have the same "
"attributes)"
msgstr ""

#: ../../library/importlib.metadata.rst:134
msgid "Details of a collection of installed entry points."
msgstr ""

#: ../../library/importlib.metadata.rst:136
msgid ""
"Also provides a ``.groups`` attribute that reports all identifed entry point "
"groups, and a ``.names`` attribute that reports all identified entry point "
"names."
msgstr ""

#: ../../library/importlib.metadata.rst:142
msgid "Details of an installed entry point."
msgstr ""

#: ../../library/importlib.metadata.rst:144
msgid ""
"Each :class:`!EntryPoint` instance has ``.name``, ``.group``, and ``.value`` "
"attributes and a ``.load()`` method to resolve the value. There are also ``."
"module``, ``.attr``, and ``.extras`` attributes for getting the components "
"of the ``.value`` attribute, and ``.dist`` for obtaining information "
"regarding the distribution package that provides the entry point."
msgstr ""

#: ../../library/importlib.metadata.rst:150
msgid "Query all entry points::"
msgstr "すべてのエントリポイントに問い合わせる::"

#: ../../library/importlib.metadata.rst:152
msgid ">>> eps = entry_points()  "
msgstr ""

#: ../../library/importlib.metadata.rst:154
msgid ""
"The :func:`!entry_points` function returns a :class:`!EntryPoints` object, a "
"collection of all :class:`!EntryPoint` objects with ``names`` and ``groups`` "
"attributes for convenience::"
msgstr ""

#: ../../library/importlib.metadata.rst:158
msgid ""
">>> sorted(eps.groups)  \n"
"['console_scripts', 'distutils.commands', 'distutils.setup_keywords', "
"'egg_info.writers', 'setuptools.installation']"
msgstr ""

#: ../../library/importlib.metadata.rst:161
msgid ""
":class:`!EntryPoints` has a :meth:`!select` method to select entry points "
"matching specific properties. Select entry points in the ``console_scripts`` "
"group::"
msgstr ""

#: ../../library/importlib.metadata.rst:165
msgid ">>> scripts = eps.select(group='console_scripts')  "
msgstr ""

#: ../../library/importlib.metadata.rst:167
msgid ""
"Equivalently, since :func:`!entry_points` passes keyword arguments through "
"to select::"
msgstr ""

#: ../../library/importlib.metadata.rst:170
msgid ">>> scripts = entry_points(group='console_scripts')  "
msgstr ""

#: ../../library/importlib.metadata.rst:172
msgid ""
"Pick out a specific script named \"wheel\" (found in the wheel project)::"
msgstr ""
"\"wheel\" という名前の特定のスクリプトを選択します。(wheelプロジェクトにあり"
"ます)::"

#: ../../library/importlib.metadata.rst:174
msgid ""
">>> 'wheel' in scripts.names  \n"
"True\n"
">>> wheel = scripts['wheel']  "
msgstr ""

#: ../../library/importlib.metadata.rst:178
msgid "Equivalently, query for that entry point during selection::"
msgstr "同様に、選択時にそのエントリポイントを問い合わせます::"

#: ../../library/importlib.metadata.rst:180
msgid ""
">>> (wheel,) = entry_points(group='console_scripts', name='wheel')  \n"
">>> (wheel,) = entry_points().select(group='console_scripts', name='wheel')  "
msgstr ""

#: ../../library/importlib.metadata.rst:183
msgid "Inspect the resolved entry point::"
msgstr "解決したエントリポイントを検証する::"

#: ../../library/importlib.metadata.rst:185
msgid ""
">>> wheel  \n"
"EntryPoint(name='wheel', value='wheel.cli:main', group='console_scripts')\n"
">>> wheel.module  \n"
"'wheel.cli'\n"
">>> wheel.attr  \n"
"'main'\n"
">>> wheel.extras  \n"
"[]\n"
">>> main = wheel.load()  \n"
">>> main  \n"
"<function main at 0x103528488>"
msgstr ""

#: ../../library/importlib.metadata.rst:197
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs <https://setuptools.pypa.io/en/"
"latest/userguide/entry_point.html>`_ for more information on entry points, "
"their definition, and usage."
msgstr ""
"``group`` と ``name`` はパッケージの作者によって定義された任意の値で、通常ク"
"ライアントは特定のグループのエントリポイントを解決したいと思うでしょう。エン"
"トリポイント、その他の定義、使用方法についての詳細は `setuptoolsのドキュメン"
"ト <https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_ を参照"
"してください。"

#: ../../library/importlib.metadata.rst:203
msgid ""
"The \"selectable\" entry points were introduced in ``importlib_metadata`` "
"3.6 and Python 3.10. Prior to those changes, ``entry_points`` accepted no "
"parameters and always returned a dictionary of entry points, keyed by group. "
"With ``importlib_metadata`` 5.0 and Python 3.12, ``entry_points`` always "
"returns an ``EntryPoints`` object. See :pypi:`backports."
"entry_points_selectable` for compatibility options."
msgstr ""

#: ../../library/importlib.metadata.rst:212
msgid ""
"``EntryPoint`` objects no longer present a tuple-like interface (:meth:"
"`~object.__getitem__`)."
msgstr ""

#: ../../library/importlib.metadata.rst:219
msgid "Distribution metadata"
msgstr "配布物メタデータ"

#: ../../library/importlib.metadata.rst:223
msgid ""
"Return the distribution metadata corresponding to the named distribution "
"package as a :class:`PackageMetadata` instance."
msgstr ""

#: ../../library/importlib.metadata.rst:226
#: ../../library/importlib.metadata.rst:274
#: ../../library/importlib.metadata.rst:295
#: ../../library/importlib.metadata.rst:358
#: ../../library/importlib.metadata.rst:409
msgid ""
"Raises :exc:`PackageNotFoundError` if the named distribution package is not "
"installed in the current Python environment."
msgstr ""

#: ../../library/importlib.metadata.rst:231
msgid "A concrete implementation of the"
msgstr ""

#: ../../library/importlib.metadata.rst:232
msgid ""
"`PackageMetadata protocol <https://importlib-metadata.readthedocs.io/en/"
"latest/api.html#importlib_metadata.PackageMetadata>`_."
msgstr ""

#: ../../library/importlib.metadata.rst:234
msgid ""
"In addition to providing the defined protocol methods and attributes, "
"subscripting the instance is equivalent to calling the :meth:`!get` method."
msgstr ""

#: ../../library/importlib.metadata.rst:237
msgid ""
"Every `Distribution Package <https://packaging.python.org/en/latest/glossary/"
"#term-Distribution-Package>`_ includes some metadata, which you can extract "
"using the :func:`!metadata` function::"
msgstr ""

#: ../../library/importlib.metadata.rst:240
msgid ">>> wheel_metadata = metadata('wheel')  "
msgstr ""

#: ../../library/importlib.metadata.rst:242
msgid ""
"The keys of the returned data structure name the metadata keywords, and the "
"values are returned unparsed from the distribution metadata::"
msgstr ""

#: ../../library/importlib.metadata.rst:245
msgid ""
">>> wheel_metadata['Requires-Python']  \n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"
msgstr ""

#: ../../library/importlib.metadata.rst:248
msgid ""
":class:`PackageMetadata` also presents a :attr:`!json` attribute that "
"returns all the metadata in a JSON-compatible form per :PEP:`566`::"
msgstr ""

#: ../../library/importlib.metadata.rst:251
msgid ""
">>> wheel_metadata.json['requires_python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"
msgstr ""

#: ../../library/importlib.metadata.rst:254
#: ../../library/importlib.metadata.rst:452
msgid ""
"The full set of available metadata is not described here. See the PyPA `Core "
"metadata specification <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_ for additional details."
msgstr ""

#: ../../library/importlib.metadata.rst:257
msgid ""
"The ``Description`` is now included in the metadata when presented through "
"the payload. Line continuation characters have been removed."
msgstr ""
"ペイロードを通して提示されるとき、 ``Description`` がメタデータに含まれるよう"
"になりました。行の継続文字は削除されました。"

#: ../../library/importlib.metadata.rst:261
msgid "The ``json`` attribute was added."
msgstr "``json`` 属性が追加されました。"

#: ../../library/importlib.metadata.rst:267
msgid "Distribution versions"
msgstr "配布物バージョン"

#: ../../library/importlib.metadata.rst:271
msgid ""
"Return the installed distribution package version for the named distribution "
"package."
msgstr ""

#: ../../library/importlib.metadata.rst:277
msgid ""
"The :func:`!version` function is the quickest way to get a `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_'s version number, as a string::"
msgstr ""

#: ../../library/importlib.metadata.rst:281
msgid ""
">>> version('wheel')  \n"
"'0.32.3'"
msgstr ""

#: ../../library/importlib.metadata.rst:288
msgid "Distribution files"
msgstr "配布物ファイル"

#: ../../library/importlib.metadata.rst:292
msgid ""
"Return the full set of files contained within the named distribution package."
msgstr ""

#: ../../library/importlib.metadata.rst:298
msgid ""
"Returns :const:`None` if the distribution is found but the installation "
"database records reporting the files associated with the distribuion package "
"are missing."
msgstr ""

#: ../../library/importlib.metadata.rst:304
msgid ""
"A :class:`pathlib.PurePath` derived object with additional ``dist``, "
"``size``, and ``hash`` properties corresponding to the distribution "
"package's installation metadata for that file."
msgstr ""

#: ../../library/importlib.metadata.rst:308
msgid ""
"The :func:`!files` function takes a `Distribution Package <https://packaging."
"python.org/en/latest/glossary/#term-Distribution-Package>`_ name and returns "
"all of the files installed by this distribution. Each file is reported as a :"
"class:`PackagePath` instance. For example::"
msgstr ""

#: ../../library/importlib.metadata.rst:313
msgid ""
">>> util = [p for p in files('wheel') if 'util.py' in str(p)][0]  \n"
">>> util  \n"
"PackagePath('wheel/util.py')\n"
">>> util.size  \n"
"859\n"
">>> util.dist  \n"
"<importlib.metadata._hooks.PathDistribution object at 0x101e0cef0>\n"
">>> util.hash  \n"
"<FileHash mode: sha256 value: bYkw5oMccfazVCoYQwKkkemoVyMAFoR34mmKBx8R1NI>"
msgstr ""

#: ../../library/importlib.metadata.rst:323
msgid "Once you have the file, you can also read its contents::"
msgstr "ファイルを取得したら、その内容を読むこともできます::"

#: ../../library/importlib.metadata.rst:325
msgid ""
">>> print(util.read_text())  \n"
"import base64\n"
"import sys\n"
"...\n"
"def as_bytes(s):\n"
"    if isinstance(s, text_type):\n"
"        return s.encode('utf-8')\n"
"    return s"
msgstr ""

#: ../../library/importlib.metadata.rst:334
msgid ""
"You can also use the :meth:`!locate` method to get the absolute path to the "
"file::"
msgstr ""

#: ../../library/importlib.metadata.rst:337
msgid ""
">>> util.locate()  \n"
"PosixPath('/home/gustav/example/lib/site-packages/wheel/util.py')"
msgstr ""

#: ../../library/importlib.metadata.rst:340
msgid ""
"In the case where the metadata file listing files (``RECORD`` or ``SOURCES."
"txt``) is missing, :func:`!files` will return :const:`None`. The caller may "
"wish to wrap calls to :func:`!files` in `always_iterable <https://more-"
"itertools.readthedocs.io/en/stable/api.html#more_itertools."
"always_iterable>`_ or otherwise guard against this condition if the target "
"distribution is not known to have the metadata present."
msgstr ""

#: ../../library/importlib.metadata.rst:351
msgid "Distribution requirements"
msgstr "配布物の要件"

#: ../../library/importlib.metadata.rst:355
msgid ""
"Return the declared dependency specifiers for the named distribution package."
msgstr ""

#: ../../library/importlib.metadata.rst:361
msgid ""
"To get the full set of requirements for a `Distribution Package <https://"
"packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_, use "
"the :func:`!requires` function::"
msgstr ""

#: ../../library/importlib.metadata.rst:365
msgid ""
">>> requires('wheel')  \n"
"[\"pytest (>=3.0.0) ; extra == 'test'\", \"pytest-cov ; extra == 'test'\"]"
msgstr ""

#: ../../library/importlib.metadata.rst:373
msgid "Mapping import to distribution packages"
msgstr ""

#: ../../library/importlib.metadata.rst:377
msgid ""
"Return a mapping from the top level module and import package names found "
"via :attr:`sys.meta_path` to the names of the distribution packages (if any) "
"that provide the corresponding files."
msgstr ""

#: ../../library/importlib.metadata.rst:381
msgid ""
"To allow for namespace packages (which may have members provided by multiple "
"distribution packages), each top level import name maps to a list of "
"distribution names rather than mapping directly to a single name."
msgstr ""

#: ../../library/importlib.metadata.rst:385
msgid ""
"A convenience method to resolve the `Distribution Package <https://packaging."
"python.org/en/latest/glossary/#term-Distribution-Package>`_ name (or names, "
"in the case of a namespace package) that provide each importable top-level "
"Python module or `Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_::"
msgstr ""
"インポート可能なトップレベルのPythonモジュールまたは `パッケージ <https://"
"packaging.python.org/ja/latest/glossary/#term-Import-Package>`_ を提供する `"
"配布パッケージ <https://packaging.python.org/en/latest/glossary/#term-"
"Distribution-Package>`_ 名(名前空間パッケージの場合はその名前)を解決する便利"
"なメソッドです::"

#: ../../library/importlib.metadata.rst:390
msgid ""
">>> packages_distributions()\n"
"{'importlib_metadata': ['importlib-metadata'], 'yaml': ['PyYAML'], 'jaraco': "
"['jaraco.classes', 'jaraco.functools'], ...}"
msgstr ""

#: ../../library/importlib.metadata.rst:393
msgid ""
"Some editable installs, `do not supply top-level names <https://github.com/"
"pypa/packaging-problems/issues/609>`_, and thus this function is not "
"reliable with such installs."
msgstr ""

#: ../../library/importlib.metadata.rst:402
msgid "Distributions"
msgstr ""

#: ../../library/importlib.metadata.rst:406
msgid ""
"Return a :class:`Distribution` instance describing the named distribution "
"package."
msgstr ""

#: ../../library/importlib.metadata.rst:414
msgid "Details of an installed distribution package."
msgstr ""

#: ../../library/importlib.metadata.rst:416
msgid ""
"Note: different :class:`!Distribution` instances do not currently compare "
"equal, even if they relate to the same installed distribution and "
"accordingly have the same attributes."
msgstr ""

#: ../../library/importlib.metadata.rst:420
msgid ""
"While the module level API described above is the most common and convenient "
"usage, you can get all of that information from the :class:`!Distribution` "
"class. :class:`!Distribution` is an abstract object that represents the "
"metadata for a Python `Distribution Package <https://packaging.python.org/en/"
"latest/glossary/#term-Distribution-Package>`_. You can get the concreate :"
"class:`!Distribution` subclass instance for an installed distribution "
"package by calling the :func:`distribution` function::"
msgstr ""

#: ../../library/importlib.metadata.rst:427
msgid ""
">>> from importlib.metadata import distribution  \n"
">>> dist = distribution('wheel')  \n"
">>> type(dist)  \n"
"<class 'importlib.metadata.PathDistribution'>"
msgstr ""

#: ../../library/importlib.metadata.rst:432
msgid ""
"Thus, an alternative way to get the version number is through the :class:`!"
"Distribution` instance::"
msgstr ""

#: ../../library/importlib.metadata.rst:435
msgid ""
">>> dist.version  \n"
"'0.32.3'"
msgstr ""

#: ../../library/importlib.metadata.rst:438
msgid ""
"There are all kinds of additional metadata available on :class:`!"
"Distribution` instances::"
msgstr ""

#: ../../library/importlib.metadata.rst:441
msgid ""
">>> dist.metadata['Requires-Python']  \n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'\n"
">>> dist.metadata['License']  \n"
"'MIT'"
msgstr ""

#: ../../library/importlib.metadata.rst:446
msgid ""
"For editable packages, an ``origin`` property may present :pep:`610` "
"metadata::"
msgstr ""

#: ../../library/importlib.metadata.rst:449
msgid ""
">>> dist.origin.url\n"
"'file:///path/to/wheel-0.32.3.editable-py3-none-any.whl'"
msgstr ""

#: ../../library/importlib.metadata.rst:455
msgid "The ``.origin`` property was added."
msgstr ""

#: ../../library/importlib.metadata.rst:459
msgid "Distribution Discovery"
msgstr ""

#: ../../library/importlib.metadata.rst:461
msgid ""
"By default, this package provides built-in support for discovery of metadata "
"for file system and zip file `Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_\\s. This metadata "
"finder search defaults to ``sys.path``, but varies slightly in how it "
"interprets those values from how other import machinery does. In particular:"
msgstr ""
"デフォルトでは、このパッケージは組み込みで、ファイルシステムおよび zip ファイ"
"ル `配布パッケージ <https://packaging.python.org/ja/latest/glossary/#term-"
"Distribution-Package>`_ のメタデータを発見するためのサポートを提供します。こ"
"のメタデータ検索のデフォルトは ``sys.path`` ですが、その値をどのように解釈す"
"るかは、他のインポート機構が行う方法とは若干異なります。具体的には:"

#: ../../library/importlib.metadata.rst:465
msgid ""
"``importlib.metadata`` does not honor :class:`bytes` objects on ``sys.path``."
msgstr ""
"``importlib.metadata`` は ``sys.path`` の :class:`bytes` オブジェクトを受け入"
"れません。"

#: ../../library/importlib.metadata.rst:466
msgid ""
"``importlib.metadata`` will incidentally honor :py:class:`pathlib.Path` "
"objects on ``sys.path`` even though such values will be ignored for imports."
msgstr ""
"``importlib.metadata`` は、インポート時には無視されますが、 ``sys.path`` 上"
"の :py:class:`pathlib.Path` オブジェクトを優先的に使用します。"

#: ../../library/importlib.metadata.rst:470
msgid "Extending the search algorithm"
msgstr "検索アルゴリズムの拡張"

#: ../../library/importlib.metadata.rst:472
msgid ""
"Because `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_ metadata is not available through :"
"data:`sys.path` searches, or package loaders directly, the metadata for a "
"distribution is found through import system :ref:`finders <finders-and-"
"loaders>`.  To find a distribution package's metadata, ``importlib."
"metadata`` queries the list of :term:`meta path finders <meta path finder>` "
"on :data:`sys.meta_path`."
msgstr ""

#: ../../library/importlib.metadata.rst:480
msgid ""
"By default ``importlib.metadata`` installs a finder for distribution "
"packages found on the file system. This finder doesn't actually find any "
"*distributions*, but it can find their metadata."
msgstr ""

#: ../../library/importlib.metadata.rst:485
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. ``importlib."
"metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path` "
"and presents this extended interface as the ``DistributionFinder`` abstract "
"base class, which defines this abstract method::"
msgstr ""
"抽象クラス :py:class:`importlib.abc.MetaPathFinder` はPythonの importシステム"
"によってファインダーに期待されるインターフェイスを定義しています。 "
"``importlib.metadata`` はこのプロトコルを拡張し、 :data:`sys.meta_path` から"
"ファインダーにオプションの ``find_distributions`` を呼び出すことができるよう"
"にし、この拡張インターフェースを ``DistributionFinder`` 抽象基底クラスとして"
"提示し、この抽象メソッドを定義しています::"

#: ../../library/importlib.metadata.rst:493
msgid ""
"@abc.abstractmethod\n"
"def find_distributions(context=DistributionFinder.Context()):\n"
"    \"\"\"Return an iterable of all Distribution instances capable of\n"
"    loading the metadata for packages for the indicated ``context``.\n"
"    \"\"\""
msgstr ""

#: ../../library/importlib.metadata.rst:499
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and ``.name`` "
"properties indicating the path to search and name to match and may supply "
"other relevant context."
msgstr ""
"``DistributionFinder.Context`` オブジェクトは、検索するパスと一致する名前を示"
"す ``.path`` と ``.name`` のプロパティを提供し、その他の関連するコンテキスト"
"を提供することもできます。"

#: ../../library/importlib.metadata.rst:503
msgid ""
"What this means in practice is that to support finding distribution package "
"metadata in locations other than the file system, subclass ``Distribution`` "
"and implement the abstract methods. Then from a custom finder, return "
"instances of this derived ``Distribution`` in the ``find_distributions()`` "
"method."
msgstr ""
"つまり、ファイルシステム以外の場所にある配布パッケージのメタデータを見つける"
"には、 ``Distribution`` をサブクラス化して抽象メソッドを実装します。そして、"
"カスタムファインダーから ``find_distributions()`` メソッドで、派生した "
"``Distribution`` のインスタンスを返します。"

#: ../../library/importlib.metadata.rst:510
msgid "Example"
msgstr "使用例"

#: ../../library/importlib.metadata.rst:512
msgid ""
"Consider for example a custom finder that loads Python modules from a "
"database::"
msgstr ""

#: ../../library/importlib.metadata.rst:515
msgid ""
"class DatabaseImporter(importlib.abc.MetaPathFinder):\n"
"    def __init__(self, db):\n"
"        self.db = db\n"
"\n"
"    def find_spec(self, fullname, target=None) -> ModuleSpec:\n"
"        return self.db.spec_from_name(fullname)\n"
"\n"
"sys.meta_path.append(DatabaseImporter(connect_db(...)))"
msgstr ""

#: ../../library/importlib.metadata.rst:524
msgid ""
"That importer now presumably provides importable modules from a database, "
"but it provides no metadata or entry points. For this custom importer to "
"provide metadata, it would also need to implement ``DistributionFinder``::"
msgstr ""

#: ../../library/importlib.metadata.rst:529
msgid ""
"from importlib.metadata import DistributionFinder\n"
"\n"
"class DatabaseImporter(DistributionFinder):\n"
"    ...\n"
"\n"
"    def find_distributions(self, context=DistributionFinder.Context()):\n"
"        query = dict(name=context.name) if context.name else {}\n"
"        for dist_record in self.db.query_distributions(query):\n"
"            yield DatabaseDistribution(dist_record)"
msgstr ""

#: ../../library/importlib.metadata.rst:539
msgid ""
"In this way, ``query_distributions`` would return records for each "
"distribution served by the database matching the query. For example, if "
"``requests-1.0`` is in the database, ``find_distributions`` would yield a "
"``DatabaseDistribution`` for ``Context(name='requests')`` or "
"``Context(name=None)``."
msgstr ""

#: ../../library/importlib.metadata.rst:545
msgid ""
"For the sake of simplicity, this example ignores ``context.path``\\. The "
"``path`` attribute defaults to ``sys.path`` and is the set of import paths "
"to be considered in the search. A ``DatabaseImporter`` could potentially "
"function without any concern for a search path. Assuming the importer does "
"no partitioning, the \"path\" would be irrelevant. In order to illustrate "
"the purpose of ``path``, the example would need to illustrate a more complex "
"``DatabaseImporter`` whose behavior varied depending on ``sys.path``/"
"``PYTHONPATH``. In that case, the ``find_distributions`` should honor the "
"``context.path`` and only yield ``Distribution``\\ s pertinent to that path."
msgstr ""

#: ../../library/importlib.metadata.rst:556
msgid "``DatabaseDistribution``, then, would look something like::"
msgstr ""

#: ../../library/importlib.metadata.rst:558
msgid ""
"class DatabaseDistribution(importlib.metadata.Distributon):\n"
"    def __init__(self, record):\n"
"        self.record = record\n"
"\n"
"    def read_text(self, filename):\n"
"        \"\"\"\n"
"        Read a file like \"METADATA\" for the current distribution.\n"
"        \"\"\"\n"
"        if filename == \"METADATA\":\n"
"            return f\"\"\"Name: {self.record.name}\n"
"Version: {self.record.version}\n"
"\"\"\"\n"
"        if filename == \"entry_points.txt\":\n"
"            return \"\\n\".join(\n"
"              f\"\"\"[{ep.group}]\\n{ep.name}={ep.value}\"\"\"\n"
"              for ep in self.record.entry_points)\n"
"\n"
"    def locate_file(self, path):\n"
"        raise RuntimeError(\"This distribution has no file system\")"
msgstr ""

#: ../../library/importlib.metadata.rst:578
msgid ""
"This basic implementation should provide metadata and entry points for "
"packages served by the ``DatabaseImporter``, assuming that the ``record`` "
"supplies suitable ``.name``, ``.version``, and ``.entry_points`` attributes."
msgstr ""

#: ../../library/importlib.metadata.rst:583
msgid ""
"The ``DatabaseDistribution`` may also provide other metadata files, like "
"``RECORD`` (required for ``Distribution.files``) or override the "
"implementation of ``Distribution.files``. See the source for more "
"inspiration."
msgstr ""
