# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Skydelta, 2023
# tomo, 2024
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:08+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/importlib.metadata.rst:5
msgid ":mod:`!importlib.metadata` -- Accessing package metadata"
msgstr ":mod:`!importlib.metadata` -- パッケージメタデータへのアクセス"

#: ../../library/importlib.metadata.rst:11
msgid "``importlib.metadata`` is no longer provisional."
msgstr "``importlib.metadata`` は暫定的なものではなくなりました。"

#: ../../library/importlib.metadata.rst:14
msgid "**Source code:** :source:`Lib/importlib/metadata/__init__.py`"
msgstr "**ソースコード:** :source:`Lib/importlib/metadata/__init__.py`"

#: ../../library/importlib.metadata.rst:16
msgid ""
"``importlib.metadata`` is a library that provides access to the metadata of "
"an installed `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_, such as its entry points or its top-"
"level names (`Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_\\s, modules, if any). Built in part on "
"Python's import system, this library intends to replace similar "
"functionality in the `entry point API`_ and `metadata API`_ of "
"``pkg_resources``.  Along with :mod:`importlib.resources`, this package can "
"eliminate the need to use the older and less efficient ``pkg_resources`` "
"package."
msgstr ""
"``importlib.metadata`` はインストールされた `配布パッケージ <https://"
"packaging.python.org/ja/latest/glossary/#term-Distribution-Package>`_ のエン"
"トリポイントやトップレベル名 (あれば、 `パッケージ <https://packaging.python."
"org/ja/latest/glossary/#term-Import-Package>`_ やモジュール) のようなメタデー"
"タへのアクセスを提供するライブラリです。Pythonのインポートシステムをベースに"
"構築されており、このライブラリは ``pkg_resources`` の `entry point API`_ と "
"`metadata API`_ にある同様の機能を置き換えることを目的としています。:mod:"
"`importlib.resources` と共に、このパッケージは古くて効率の悪い "
"``pkg_resources`` パッケージを使う必要性を無くすことができます。"

#: ../../library/importlib.metadata.rst:27
msgid ""
"``importlib.metadata`` operates on third-party *distribution packages* "
"installed into Python's ``site-packages`` directory via tools such as :pypi:"
"`pip`. Specifically, it works with distributions with discoverable ``dist-"
"info`` or ``egg-info`` directories, and metadata defined by the `Core "
"metadata specifications <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_."
msgstr ""
"``importlib.metadata`` は、Pythonの ``site-packages`` ディレクトリに :pypi:"
"`pip` などのツールでインストールしたサードパーティの *配布パッケージ* に対し"
"て動作します。具体的には、 ``dist-info`` や ``egg-info`` ディレクトリを持つ配"
"布物や、 `コアとなるメタデータの仕様 <https://packaging.python.org/ja/latest/"
"specifications/core-metadata/#core-metadata>`_ で定義されたメタデータを検出で"
"きるようにします。"

#: ../../library/importlib.metadata.rst:36
msgid ""
"These are *not* necessarily equivalent to or correspond 1:1 with the top-"
"level *import package* names that can be imported inside Python code. One "
"*distribution package* can contain multiple *import packages* (and single "
"modules), and one top-level *import package* may map to multiple "
"*distribution packages* if it is a namespace package. You can use :ref:"
"`packages_distributions() <package-distributions>` to get a mapping between "
"them."
msgstr ""
"これらはPythonコード内でインポートできるトップレベルの *パッケージ* 名と *必"
"ずしも* 同等であったり、1:1 で対応するものではありません。1つの *配布パッケー"
"ジ* は複数の *パッケージ* (および単一のモジュール) を含むことができ、1つの"
"トップレベルの *パッケージ* は、それが名前空間パッケージであれば複数の *配布"
"パッケージ* にマップすることができます。これらのマッピングを得るには :ref:"
"`packages_distributions() <package-distributions>`  を使用します。"

#: ../../library/importlib.metadata.rst:47
msgid ""
"By default, distribution metadata can live on the file system or in zip "
"archives on :data:`sys.path`.  Through an extension mechanism, the metadata "
"can live almost anywhere."
msgstr ""
"デフォルトでは、配布物のメタデータはファイルシステム上、または :data:`sys."
"path` のzipアーカイブに保存されます。拡張機構により、メタデータはほとんどどこ"
"にでも置くことができます。"

#: ../../library/importlib.metadata.rst:55
msgid "https://importlib-metadata.readthedocs.io/"
msgstr "https://importlib-metadata.readthedocs.io/"

#: ../../library/importlib.metadata.rst:56
msgid ""
"The documentation for ``importlib_metadata``, which supplies a backport of "
"``importlib.metadata``. This includes an `API reference <https://importlib-"
"metadata.readthedocs.io/en/latest/api.html>`__ for this module's classes and "
"functions, as well as a `migration guide <https://importlib-metadata."
"readthedocs.io/en/latest/migration.html>`__ for existing users of "
"``pkg_resources``."
msgstr ""
"``importlib_metadata`` のドキュメントは ``importlib.metadata`` のバックポート"
"です。これには、このモジュールのクラスと関数の `APIリファレンス <https://"
"importlib-metadata.readthedocs.io/en/latest/api.html>`__ と、 "
"``pkg_resources`` の既存のユーザーのための `移行ガイド <https://importlib-"
"metadata.readthedocs.io/en/latest/migration.html>`__ があります。"

#: ../../library/importlib.metadata.rst:67
msgid "Overview"
msgstr "概要"

#: ../../library/importlib.metadata.rst:69
msgid ""
"Let's say you wanted to get the version string for a `Distribution Package "
"<https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_ you've installed using ``pip``.  We start by creating a virtual "
"environment and installing something into it:"
msgstr ""
"例えば、``pip`` を使ってインストールした `配布パッケージ <https://packaging."
"python.org/ja/latest/glossary/#term-Distribution-Package>`_ のバージョン文字"
"列を取得したいとします。 まず、仮想環境を作成し、そこに何かをインストールする"
"ことから始めましょう:"

#: ../../library/importlib.metadata.rst:74
msgid ""
"$ python -m venv example\n"
"$ source example/bin/activate\n"
"(example) $ python -m pip install wheel"
msgstr ""

#: ../../library/importlib.metadata.rst:80
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr ""
"以下のように実行することで、``wheel`` のバージョン文字列を取得することができ"
"ます::"

#: ../../library/importlib.metadata.rst:82
msgid ""
"(example) $ python\n"
">>> from importlib.metadata import version  \n"
">>> version('wheel')  \n"
"'0.32.3'"
msgstr ""

#: ../../library/importlib.metadata.rst:89
msgid ""
"You can also get a collection of entry points selectable by properties of "
"the EntryPoint (typically 'group' or 'name'), such as ``console_scripts``, "
"``distutils.commands`` and others.  Each group contains a collection of :ref:"
"`EntryPoint <entry-points>` objects."
msgstr ""
"また、 ``console_scripts`` や ``distutils.commands`` などのエントリポイントの"
"プロパティ(通常は 'group' や 'name' )で選択可能なエントリポイントの集合を取得"
"することができます。 各グループは :ref:`エントリポイント <entry-points>` オブ"
"ジェクトの集合を含んでいます。"

#: ../../library/importlib.metadata.rst:93
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr ""
":ref:`ディストリビューションのメタデータ <metadata>` を取得することができま"
"す。::"

#: ../../library/importlib.metadata.rst:95
msgid ""
">>> list(metadata('wheel'))  \n"
"['Metadata-Version', 'Name', 'Version', 'Summary', 'Home-page', 'Author', "
"'Author-email', 'Maintainer', 'Maintainer-email', 'License', 'Project-URL', "
"'Project-URL', 'Project-URL', 'Keywords', 'Platform', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', "
"'Classifier', 'Requires-Python', 'Provides-Extra', 'Requires-Dist', "
"'Requires-Dist']"
msgstr ""

#: ../../library/importlib.metadata.rst:98
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list its :"
"ref:`constituent files <files>`, and get a list of the distribution's :ref:"
"`requirements`."
msgstr ""
"また、 :ref:`配布物のバージョン番号 <version>` を取得し、 :ref:`構成ファイル "
"<files>` をリストアップし、配布物の :ref:`requirements` のリストを取得するこ"
"とができます。"

#: ../../library/importlib.metadata.rst:104
msgid "Functional API"
msgstr "機能 API"

#: ../../library/importlib.metadata.rst:106
msgid "This package provides the following functionality via its public API."
msgstr "本パッケージは、公開APIを通じて以下の機能を提供します。"

#: ../../library/importlib.metadata.rst:112
msgid "Entry points"
msgstr "エントリポイント"

#: ../../library/importlib.metadata.rst:114
msgid ""
"The ``entry_points()`` function returns a collection of entry points. Entry "
"points are represented by ``EntryPoint`` instances; each ``EntryPoint`` has "
"a ``.name``, ``.group``, and ``.value`` attributes and a ``.load()`` method "
"to resolve the value.  There are also ``.module``, ``.attr``, and ``."
"extras`` attributes for getting the components of the ``.value`` attribute."
msgstr ""
"``entry_points()`` 関数は、エントリポイントの集合を返します。各 "
"``EntryPoint`` は ``.name``, ``.group``, ``.value`` 属性と値を解決する ``."
"load()`` メソッドを持っています。 また、 ``.value`` 属性の構成要素を取得する"
"ための ``.module``, ``.attr``, ``.extras`` 属性が存在します。"

#: ../../library/importlib.metadata.rst:121
msgid "Query all entry points::"
msgstr "すべてのエントリポイントに問い合わせる::"

#: ../../library/importlib.metadata.rst:123
msgid ">>> eps = entry_points()  "
msgstr ""

#: ../../library/importlib.metadata.rst:125
msgid ""
"The ``entry_points()`` function returns an ``EntryPoints`` object, a "
"collection of all ``EntryPoint`` objects with ``names`` and ``groups`` "
"attributes for convenience::"
msgstr ""
"``entry_points()`` 関数は、すべての ``EntryPoint`` オブジェクトを集めた "
"``EntryPoints`` オブジェクトを、便宜上 ``names`` と ``groups`` 属性を付けて返"
"します。"

#: ../../library/importlib.metadata.rst:129
msgid ""
">>> sorted(eps.groups)  \n"
"['console_scripts', 'distutils.commands', 'distutils.setup_keywords', "
"'egg_info.writers', 'setuptools.installation']"
msgstr ""

#: ../../library/importlib.metadata.rst:132
msgid ""
"``EntryPoints`` has a ``select`` method to select entry points matching "
"specific properties. Select entry points in the ``console_scripts`` group::"
msgstr ""
"``EntryPoints`` には、特定のプロパティに一致するエントリポイントを選択するた"
"めの ``select`` メソッドがあります。``console_scripts`` グループ内のエントリ"
"ポイントを選択する::"

#: ../../library/importlib.metadata.rst:136
msgid ">>> scripts = eps.select(group='console_scripts')  "
msgstr ""

#: ../../library/importlib.metadata.rst:138
msgid ""
"Equivalently, since ``entry_points`` passes keyword arguments through to "
"select::"
msgstr ""

#: ../../library/importlib.metadata.rst:141
msgid ">>> scripts = entry_points(group='console_scripts')  "
msgstr ""

#: ../../library/importlib.metadata.rst:143
msgid ""
"Pick out a specific script named \"wheel\" (found in the wheel project)::"
msgstr ""
"\"wheel\" という名前の特定のスクリプトを選択します。(wheelプロジェクトにあり"
"ます)::"

#: ../../library/importlib.metadata.rst:145
msgid ""
">>> 'wheel' in scripts.names  \n"
"True\n"
">>> wheel = scripts['wheel']  "
msgstr ""

#: ../../library/importlib.metadata.rst:149
msgid "Equivalently, query for that entry point during selection::"
msgstr "同様に、選択時にそのエントリポイントを問い合わせます::"

#: ../../library/importlib.metadata.rst:151
msgid ""
">>> (wheel,) = entry_points(group='console_scripts', name='wheel')  \n"
">>> (wheel,) = entry_points().select(group='console_scripts', name='wheel')  "
msgstr ""

#: ../../library/importlib.metadata.rst:154
msgid "Inspect the resolved entry point::"
msgstr "解決したエントリポイントを検証する::"

#: ../../library/importlib.metadata.rst:156
msgid ""
">>> wheel  \n"
"EntryPoint(name='wheel', value='wheel.cli:main', group='console_scripts')\n"
">>> wheel.module  \n"
"'wheel.cli'\n"
">>> wheel.attr  \n"
"'main'\n"
">>> wheel.extras  \n"
"[]\n"
">>> main = wheel.load()  \n"
">>> main  \n"
"<function main at 0x103528488>"
msgstr ""

#: ../../library/importlib.metadata.rst:168
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs <https://setuptools.pypa.io/en/"
"latest/userguide/entry_point.html>`_ for more information on entry points, "
"their definition, and usage."
msgstr ""
"``group`` と ``name`` はパッケージの作者によって定義された任意の値で、通常ク"
"ライアントは特定のグループのエントリポイントを解決したいと思うでしょう。エン"
"トリポイント、その他の定義、使用方法についての詳細は `setuptoolsのドキュメン"
"ト <https://setuptools.pypa.io/en/latest/userguide/entry_point.html>`_ を参照"
"してください。"

#: ../../library/importlib.metadata.rst:174
msgid ""
"The \"selectable\" entry points were introduced in ``importlib_metadata`` "
"3.6 and Python 3.10. Prior to those changes, ``entry_points`` accepted no "
"parameters and always returned a dictionary of entry points, keyed by group. "
"With ``importlib_metadata`` 5.0 and Python 3.12, ``entry_points`` always "
"returns an ``EntryPoints`` object. See :pypi:`backports."
"entry_points_selectable` for compatibility options."
msgstr ""

#: ../../library/importlib.metadata.rst:183
msgid ""
"``EntryPoint`` objects no longer present a tuple-like interface (:meth:"
"`~object.__getitem__`)."
msgstr ""

#: ../../library/importlib.metadata.rst:190
msgid "Distribution metadata"
msgstr "配布物メタデータ"

#: ../../library/importlib.metadata.rst:192
msgid ""
"Every `Distribution Package <https://packaging.python.org/en/latest/glossary/"
"#term-Distribution-Package>`_ includes some metadata, which you can extract "
"using the ``metadata()`` function::"
msgstr ""
"すべての `配布パッケージ <https://packaging.python.org/ja/latest/glossary/"
"#term-Distribution-Package>`_ にはメタデータが含まれており、 ``metadata()`` "
"関数を使って取得することができます::"

#: ../../library/importlib.metadata.rst:196
msgid ">>> wheel_metadata = metadata('wheel')  "
msgstr ""

#: ../../library/importlib.metadata.rst:198
msgid ""
"The keys of the returned data structure, a ``PackageMetadata``, name the "
"metadata keywords, and the values are returned unparsed from the "
"distribution metadata::"
msgstr ""
"返されたデータ構造である ``PackageMetadata`` のキーはメタデータのキーワードを"
"表し、値は配布パッケージのメタデータから解析されずに返されます::"

#: ../../library/importlib.metadata.rst:202
msgid ""
">>> wheel_metadata['Requires-Python']  \n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"
msgstr ""

#: ../../library/importlib.metadata.rst:205
msgid ""
"``PackageMetadata`` also presents a ``json`` attribute that returns all the "
"metadata in a JSON-compatible form per :PEP:`566`::"
msgstr ""
"``PackageMetadata`` には ``json`` 属性があり、 :PEP:`566` に従ってすべてのメ"
"タデータをJSON互換の形式で返します::"

#: ../../library/importlib.metadata.rst:208
msgid ""
">>> wheel_metadata.json['requires_python']\n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'"
msgstr ""

#: ../../library/importlib.metadata.rst:213
msgid ""
"The actual type of the object returned by ``metadata()`` is an "
"implementation detail and should be accessed only through the interface "
"described by the `PackageMetadata protocol <https://importlib-metadata."
"readthedocs.io/en/latest/api.html#importlib_metadata.PackageMetadata>`_."
msgstr ""
"``metadata()`` が返すオブジェクトの実際の型は実装の詳細であり、 "
"`PackageMetadataプロトコル <https://importlib-metadata.readthedocs.io/en/"
"latest/api.html#importlib_metadata.PackageMetadata>`_ が示すインターフェース"
"を通じてのみアクセスすることができます。"

#: ../../library/importlib.metadata.rst:218
msgid ""
"The ``Description`` is now included in the metadata when presented through "
"the payload. Line continuation characters have been removed."
msgstr ""
"ペイロードを通して提示されるとき、 ``Description`` がメタデータに含まれるよう"
"になりました。行の継続文字は削除されました。"

#: ../../library/importlib.metadata.rst:222
msgid "The ``json`` attribute was added."
msgstr "``json`` 属性が追加されました。"

#: ../../library/importlib.metadata.rst:228
msgid "Distribution versions"
msgstr "配布物バージョン"

#: ../../library/importlib.metadata.rst:230
msgid ""
"The ``version()`` function is the quickest way to get a `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_'s version number, as a string::"
msgstr ""
"``version()`` 関数は `配布パッケージ <https://packaging.python.org/ja/latest/"
"glossary/#term-Distribution-Package>`_ のバージョン番号を文字列で取得するもっ"
"とも簡単な方法です。::"

#: ../../library/importlib.metadata.rst:234
msgid ""
">>> version('wheel')  \n"
"'0.32.3'"
msgstr ""

#: ../../library/importlib.metadata.rst:241
msgid "Distribution files"
msgstr "配布物ファイル"

#: ../../library/importlib.metadata.rst:243
msgid ""
"You can also get the full set of files contained within a distribution.  The "
"``files()`` function takes a `Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_ name and returns all of "
"the files installed by this distribution.  Each file object returned is a "
"``PackagePath``, a :class:`pathlib.PurePath` derived object with additional "
"``dist``, ``size``, and ``hash`` properties as indicated by the metadata.  "
"For example::"
msgstr ""
"また、配布パッケージに含まれるファイルのフルセットを取得することもできます。"
"``files()`` 関数は `配布パッケージ <https://packaging.python.org/ja/latest/"
"glossary/#term-Distribution-Package>`_ 名を受け取り、この配布パッケージにイン"
"ストールされているすべてのファイルを返します。返される各ファイルオブジェクト"
"は ``PackagePath`` で、 :class:`pathlib.PurePath` から派生したオブジェクト"
"に、メタデータで示された ``dist``, ``size``, ``hash`` プロパティを追加してい"
"ます。 例えば::"

#: ../../library/importlib.metadata.rst:250
msgid ""
">>> util = [p for p in files('wheel') if 'util.py' in str(p)][0]  \n"
">>> util  \n"
"PackagePath('wheel/util.py')\n"
">>> util.size  \n"
"859\n"
">>> util.dist  \n"
"<importlib.metadata._hooks.PathDistribution object at 0x101e0cef0>\n"
">>> util.hash  \n"
"<FileHash mode: sha256 value: bYkw5oMccfazVCoYQwKkkemoVyMAFoR34mmKBx8R1NI>"
msgstr ""

#: ../../library/importlib.metadata.rst:260
msgid "Once you have the file, you can also read its contents::"
msgstr "ファイルを取得したら、その内容を読むこともできます::"

#: ../../library/importlib.metadata.rst:262
msgid ""
">>> print(util.read_text())  \n"
"import base64\n"
"import sys\n"
"...\n"
"def as_bytes(s):\n"
"    if isinstance(s, text_type):\n"
"        return s.encode('utf-8')\n"
"    return s"
msgstr ""

#: ../../library/importlib.metadata.rst:271
msgid ""
"You can also use the ``locate`` method to get a the absolute path to the "
"file::"
msgstr ""
"また、 ``locate`` メソッドを使用すると、ファイルへの絶対パスを取得することが"
"できます::"

#: ../../library/importlib.metadata.rst:274
msgid ""
">>> util.locate()  \n"
"PosixPath('/home/gustav/example/lib/site-packages/wheel/util.py')"
msgstr ""

#: ../../library/importlib.metadata.rst:277
msgid ""
"In the case where the metadata file listing files (RECORD or SOURCES.txt) is "
"missing, ``files()`` will return ``None``. The caller may wish to wrap calls "
"to ``files()`` in `always_iterable <https://more-itertools.readthedocs.io/en/"
"stable/api.html#more_itertools.always_iterable>`_ or otherwise guard against "
"this condition if the target distribution is not known to have the metadata "
"present."
msgstr ""

#: ../../library/importlib.metadata.rst:288
msgid "Distribution requirements"
msgstr "配布物の要件"

#: ../../library/importlib.metadata.rst:290
msgid ""
"To get the full set of requirements for a `Distribution Package <https://"
"packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_, use "
"the ``requires()`` function::"
msgstr ""
"`配布パッケージ <https://packaging.python.org/ja/latest/glossary/#term-"
"Distribution-Package>`_ に必要なすべての要件を取得するには、 ``requires()`` "
"関数を使用します::"

#: ../../library/importlib.metadata.rst:294
msgid ""
">>> requires('wheel')  \n"
"[\"pytest (>=3.0.0) ; extra == 'test'\", \"pytest-cov ; extra == 'test'\"]"
msgstr ""

#: ../../library/importlib.metadata.rst:302
msgid "Mapping import to distribution packages"
msgstr ""

#: ../../library/importlib.metadata.rst:304
msgid ""
"A convenience method to resolve the `Distribution Package <https://packaging."
"python.org/en/latest/glossary/#term-Distribution-Package>`_ name (or names, "
"in the case of a namespace package) that provide each importable top-level "
"Python module or `Import Package <https://packaging.python.org/en/latest/"
"glossary/#term-Import-Package>`_::"
msgstr ""
"インポート可能なトップレベルのPythonモジュールまたは `パッケージ <https://"
"packaging.python.org/ja/latest/glossary/#term-Import-Package>`_ を提供する `"
"配布パッケージ <https://packaging.python.org/en/latest/glossary/#term-"
"Distribution-Package>`_ 名(名前空間パッケージの場合はその名前)を解決する便利"
"なメソッドです::"

#: ../../library/importlib.metadata.rst:309
msgid ""
">>> packages_distributions()\n"
"{'importlib_metadata': ['importlib-metadata'], 'yaml': ['PyYAML'], 'jaraco': "
"['jaraco.classes', 'jaraco.functools'], ...}"
msgstr ""

#: ../../library/importlib.metadata.rst:312
msgid ""
"Some editable installs, `do not supply top-level names <https://github.com/"
"pypa/packaging-problems/issues/609>`_, and thus this function is not "
"reliable with such installs."
msgstr ""

#: ../../library/importlib.metadata.rst:321
msgid "Distributions"
msgstr ""

#: ../../library/importlib.metadata.rst:323
msgid ""
"While the above API is the most common and convenient usage, you can get all "
"of that information from the ``Distribution`` class.  A ``Distribution`` is "
"an abstract object that represents the metadata for a Python `Distribution "
"Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-"
"Package>`_.  You can get the ``Distribution`` instance::"
msgstr ""
"上記のAPIは最も一般的で便利な使い方ですが、 ``Distribution`` クラスからすべて"
"の情報を得ることができます。 ``Distribution`` はPython `配布パッケージ "
"<https://packaging.python.org/ja/latest/glossary/#term-Distribution-"
"Package>`_ のメタデータを表す抽象オブジェクトです。 ``Distribution`` のインス"
"タンスを取得することができます。"

#: ../../library/importlib.metadata.rst:329
msgid ""
">>> from importlib.metadata import distribution  \n"
">>> dist = distribution('wheel')  "
msgstr ""

#: ../../library/importlib.metadata.rst:332
msgid ""
"Thus, an alternative way to get the version number is through the "
"``Distribution`` instance::"
msgstr ""
"したがって、バージョン情報を取得する別の方法として、 ``Distribution`` インス"
"タンスを使用します::"

#: ../../library/importlib.metadata.rst:335
msgid ""
">>> dist.version  \n"
"'0.32.3'"
msgstr ""

#: ../../library/importlib.metadata.rst:338
msgid ""
"There are all kinds of additional metadata available on the ``Distribution`` "
"instance::"
msgstr ""
"``Distribution`` インスタンスには、あらゆる種類の追加メタデータが用意されてい"
"ます::"

#: ../../library/importlib.metadata.rst:341
msgid ""
">>> dist.metadata['Requires-Python']  \n"
"'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'\n"
">>> dist.metadata['License']  \n"
"'MIT'"
msgstr ""

#: ../../library/importlib.metadata.rst:346
msgid ""
"For editable packages, an ``origin`` property may present :pep:`610` "
"metadata::"
msgstr ""

#: ../../library/importlib.metadata.rst:349
msgid ""
">>> dist.origin.url\n"
"'file:///path/to/wheel-0.32.3.editable-py3-none-any.whl'"
msgstr ""

#: ../../library/importlib.metadata.rst:352
msgid ""
"The full set of available metadata is not described here. See the `Core "
"metadata specifications <https://packaging.python.org/en/latest/"
"specifications/core-metadata/#core-metadata>`_ for additional details."
msgstr ""
"利用可能なメタデータのフルセットは、ここでは説明しません。詳細は `コアとなる"
"メタデータの仕様 <https://packaging.python.org/ja/latest/specifications/core-"
"metadata/#core-metadata>`_ を参照してください。"

#: ../../library/importlib.metadata.rst:355
msgid "The ``.origin`` property was added."
msgstr ""

#: ../../library/importlib.metadata.rst:359
msgid "Distribution Discovery"
msgstr ""

#: ../../library/importlib.metadata.rst:361
msgid ""
"By default, this package provides built-in support for discovery of metadata "
"for file system and zip file `Distribution Package <https://packaging.python."
"org/en/latest/glossary/#term-Distribution-Package>`_\\s. This metadata "
"finder search defaults to ``sys.path``, but varies slightly in how it "
"interprets those values from how other import machinery does. In particular:"
msgstr ""
"デフォルトでは、このパッケージは組み込みで、ファイルシステムおよび zip ファイ"
"ル `配布パッケージ <https://packaging.python.org/ja/latest/glossary/#term-"
"Distribution-Package>`_ のメタデータを発見するためのサポートを提供します。こ"
"のメタデータ検索のデフォルトは ``sys.path`` ですが、その値をどのように解釈す"
"るかは、他のインポート機構が行う方法とは若干異なります。具体的には:"

#: ../../library/importlib.metadata.rst:365
msgid ""
"``importlib.metadata`` does not honor :class:`bytes` objects on ``sys.path``."
msgstr ""
"``importlib.metadata`` は ``sys.path`` の :class:`bytes` オブジェクトを受け入"
"れません。"

#: ../../library/importlib.metadata.rst:366
msgid ""
"``importlib.metadata`` will incidentally honor :py:class:`pathlib.Path` "
"objects on ``sys.path`` even though such values will be ignored for imports."
msgstr ""
"``importlib.metadata`` は、インポート時には無視されますが、 ``sys.path`` 上"
"の :py:class:`pathlib.Path` オブジェクトを優先的に使用します。"

#: ../../library/importlib.metadata.rst:370
msgid "Extending the search algorithm"
msgstr "検索アルゴリズムの拡張"

#: ../../library/importlib.metadata.rst:372
msgid ""
"Because `Distribution Package <https://packaging.python.org/en/latest/"
"glossary/#term-Distribution-Package>`_ metadata is not available through :"
"data:`sys.path` searches, or package loaders directly, the metadata for a "
"distribution is found through import system :ref:`finders <finders-and-"
"loaders>`.  To find a distribution package's metadata, ``importlib."
"metadata`` queries the list of :term:`meta path finders <meta path finder>` "
"on :data:`sys.meta_path`."
msgstr ""

#: ../../library/importlib.metadata.rst:380
msgid ""
"By default ``importlib.metadata`` installs a finder for distribution "
"packages found on the file system. This finder doesn't actually find any "
"*distributions*, but it can find their metadata."
msgstr ""

#: ../../library/importlib.metadata.rst:385
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. ``importlib."
"metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path` "
"and presents this extended interface as the ``DistributionFinder`` abstract "
"base class, which defines this abstract method::"
msgstr ""
"抽象クラス :py:class:`importlib.abc.MetaPathFinder` はPythonの importシステム"
"によってファインダーに期待されるインターフェイスを定義しています。 "
"``importlib.metadata`` はこのプロトコルを拡張し、 :data:`sys.meta_path` から"
"ファインダーにオプションの ``find_distributions`` を呼び出すことができるよう"
"にし、この拡張インターフェースを ``DistributionFinder`` 抽象基底クラスとして"
"提示し、この抽象メソッドを定義しています::"

#: ../../library/importlib.metadata.rst:393
msgid ""
"@abc.abstractmethod\n"
"def find_distributions(context=DistributionFinder.Context()):\n"
"    \"\"\"Return an iterable of all Distribution instances capable of\n"
"    loading the metadata for packages for the indicated ``context``.\n"
"    \"\"\""
msgstr ""

#: ../../library/importlib.metadata.rst:399
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and ``.name`` "
"properties indicating the path to search and name to match and may supply "
"other relevant context."
msgstr ""
"``DistributionFinder.Context`` オブジェクトは、検索するパスと一致する名前を示"
"す ``.path`` と ``.name`` のプロパティを提供し、その他の関連するコンテキスト"
"を提供することもできます。"

#: ../../library/importlib.metadata.rst:403
msgid ""
"What this means in practice is that to support finding distribution package "
"metadata in locations other than the file system, subclass ``Distribution`` "
"and implement the abstract methods. Then from a custom finder, return "
"instances of this derived ``Distribution`` in the ``find_distributions()`` "
"method."
msgstr ""
"つまり、ファイルシステム以外の場所にある配布パッケージのメタデータを見つける"
"には、 ``Distribution`` をサブクラス化して抽象メソッドを実装します。そして、"
"カスタムファインダーから ``find_distributions()`` メソッドで、派生した "
"``Distribution`` のインスタンスを返します。"

#: ../../library/importlib.metadata.rst:410
msgid "Example"
msgstr "使用例"

#: ../../library/importlib.metadata.rst:412
msgid ""
"Consider for example a custom finder that loads Python modules from a "
"database::"
msgstr ""

#: ../../library/importlib.metadata.rst:415
msgid ""
"class DatabaseImporter(importlib.abc.MetaPathFinder):\n"
"    def __init__(self, db):\n"
"        self.db = db\n"
"\n"
"    def find_spec(self, fullname, target=None) -> ModuleSpec:\n"
"        return self.db.spec_from_name(fullname)\n"
"\n"
"sys.meta_path.append(DatabaseImporter(connect_db(...)))"
msgstr ""

#: ../../library/importlib.metadata.rst:424
msgid ""
"That importer now presumably provides importable modules from a database, "
"but it provides no metadata or entry points. For this custom importer to "
"provide metadata, it would also need to implement ``DistributionFinder``::"
msgstr ""

#: ../../library/importlib.metadata.rst:429
msgid ""
"from importlib.metadata import DistributionFinder\n"
"\n"
"class DatabaseImporter(DistributionFinder):\n"
"    ...\n"
"\n"
"    def find_distributions(self, context=DistributionFinder.Context()):\n"
"        query = dict(name=context.name) if context.name else {}\n"
"        for dist_record in self.db.query_distributions(query):\n"
"            yield DatabaseDistribution(dist_record)"
msgstr ""

#: ../../library/importlib.metadata.rst:439
msgid ""
"In this way, ``query_distributions`` would return records for each "
"distribution served by the database matching the query. For example, if "
"``requests-1.0`` is in the database, ``find_distributions`` would yield a "
"``DatabaseDistribution`` for ``Context(name='requests')`` or "
"``Context(name=None)``."
msgstr ""

#: ../../library/importlib.metadata.rst:445
msgid ""
"For the sake of simplicity, this example ignores ``context.path``\\. The "
"``path`` attribute defaults to ``sys.path`` and is the set of import paths "
"to be considered in the search. A ``DatabaseImporter`` could potentially "
"function without any concern for a search path. Assuming the importer does "
"no partitioning, the \"path\" would be irrelevant. In order to illustrate "
"the purpose of ``path``, the example would need to illustrate a more complex "
"``DatabaseImporter`` whose behavior varied depending on ``sys.path``/"
"``PYTHONPATH``. In that case, the ``find_distributions`` should honor the "
"``context.path`` and only yield ``Distribution``\\ s pertinent to that path."
msgstr ""

#: ../../library/importlib.metadata.rst:456
msgid "``DatabaseDistribution``, then, would look something like::"
msgstr ""

#: ../../library/importlib.metadata.rst:458
msgid ""
"class DatabaseDistribution(importlib.metadata.Distributon):\n"
"    def __init__(self, record):\n"
"        self.record = record\n"
"\n"
"    def read_text(self, filename):\n"
"        \"\"\"\n"
"        Read a file like \"METADATA\" for the current distribution.\n"
"        \"\"\"\n"
"        if filename == \"METADATA\":\n"
"            return f\"\"\"Name: {self.record.name}\n"
"Version: {self.record.version}\n"
"\"\"\"\n"
"        if filename == \"entry_points.txt\":\n"
"            return \"\\n\".join(\n"
"              f\"\"\"[{ep.group}]\\n{ep.name}={ep.value}\"\"\"\n"
"              for ep in self.record.entry_points)\n"
"\n"
"    def locate_file(self, path):\n"
"        raise RuntimeError(\"This distribution has no file system\")"
msgstr ""

#: ../../library/importlib.metadata.rst:478
msgid ""
"This basic implementation should provide metadata and entry points for "
"packages served by the ``DatabaseImporter``, assuming that the ``record`` "
"supplies suitable ``.name``, ``.version``, and ``.entry_points`` attributes."
msgstr ""

#: ../../library/importlib.metadata.rst:483
msgid ""
"The ``DatabaseDistribution`` may also provide other metadata files, like "
"``RECORD`` (required for ``Distribution.files``) or override the "
"implementation of ``Distribution.files``. See the source for more "
"inspiration."
msgstr ""
