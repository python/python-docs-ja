# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2018-01-20 20:59+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/codeop.rst:3
msgid ":mod:`codeop` --- Compile Python code"
msgstr ":mod:`codeop` --- Pythonコードをコンパイルする"

#: ../../library/codeop.rst:10
msgid ""
"The :mod:`codeop` module provides utilities upon which the Python read-eval-"
"print loop can be emulated, as is done in the :mod:`code` module.  As a "
"result, you probably don't want to use the module directly; if you want to "
"include such a loop in your program you probably want to use the :mod:`code` "
"module instead."
msgstr ""
":mod:`codeop` モジュールは、 :mod:`code` モジュールで行われているようなPython"
"の read-eval-printループをエミュレートするユーティリティを提供します。そのた"
"め、このモジュールを直接利用する場面はあまり無いでしょう。プログラムにこのよ"
"うなループを含めたい場合は、 :mod:`code` モジュールの方が便利です。"

#: ../../library/codeop.rst:16
msgid "There are two parts to this job:"
msgstr "この仕事には二つの部分があります:"

#: ../../library/codeop.rst:18
msgid ""
"Being able to tell if a line of input completes a Python  statement: in "
"short, telling whether to print '``>>>``' or '``...``' next."
msgstr ""
"入力の一行がPythonの文として完全であるかどうかを見分けられること: 簡単に言え"
"ば、次が '``>>>``' か、あるいは '``...``' かどうかを見分けます。"

#: ../../library/codeop.rst:21
msgid ""
"Remembering which future statements the user has entered, so  subsequent "
"input can be compiled with these in effect."
msgstr ""
"どのfuture文をユーザが入力したのかを覚えていること。したがって、実質的にそれ"
"に続く入力をこれらとともにコンパイルすることができます。"

#: ../../library/codeop.rst:24
msgid ""
"The :mod:`codeop` module provides a way of doing each of these things, and a "
"way of doing them both."
msgstr ""
":mod:`codeop` モジュールはこうしたことのそれぞれを行う方法とそれら両方を行う"
"方法を提供します。"

#: ../../library/codeop.rst:27
msgid "To do just the former:"
msgstr "前者は実行するには:"

#: ../../library/codeop.rst:31
msgid ""
"Tries to compile *source*, which should be a string of Python code and "
"return a code object if *source* is valid Python code. In that case, the "
"filename attribute of the code object will be *filename*, which defaults to "
"``'<input>'``. Returns ``None`` if *source* is *not* valid Python code, but "
"is a prefix of valid Python code."
msgstr ""
"Pythonコードの文字列であるべき *source* をコンパイルしてみて、*source* が有効"
"なPythonコードの場合はコードオブジェクトを返します。このような場合、コードオ"
"ブジェクトのファイル名属性は、デフォルトで ``'<input>'`` である *filename* で"
"しょう。*source* が有効なPythonコードでは *ない* が、有効なPythonコードの接頭"
"語である場合には、``None`` を返します。"

#: ../../library/codeop.rst:37
msgid ""
"If there is a problem with *source*, an exception will be raised. :exc:"
"`SyntaxError` is raised if there is invalid Python syntax, and :exc:"
"`OverflowError` or :exc:`ValueError` if there is an invalid literal."
msgstr ""
"*source* に問題がある場合は、例外を発生させます。無効なPython構文がある場合"
"は、 :exc:`SyntaxError` を発生させます。また、無効なリテラルがある場合は、 :"
"exc:`OverflowError` または :exc:`ValueError` を発生させます。"

#: ../../library/codeop.rst:41
msgid ""
"The *symbol* argument determines whether *source* is compiled as a statement "
"(``'single'``, the default) or as an :term:`expression` (``'eval'``).  Any "
"other value will cause :exc:`ValueError` to  be raised."
msgstr ""
"*symbol* 引数は *source* が文としてコンパイルされるか(``'single'`` 、デフォル"
"ト) 、または :term:`式 <expression>` としてコンパイルされるかを決定します"
"(``'eval'``)。他のどんな値も :exc:`ValueError` を発生させる原因となります。"

#: ../../library/codeop.rst:47
msgid ""
"It is possible (but not likely) that the parser stops parsing with a "
"successful outcome before reaching the end of the source; in this case, "
"trailing symbols may be ignored instead of causing an error.  For example, a "
"backslash followed by two newlines may be followed by arbitrary garbage. "
"This will be fixed once the API for the parser is better."
msgstr ""
"ソースの終わりに達する前に、成功した結果をもってパーサは構文解析を止めること"
"があります。このような場合、後ろに続く記号はエラーとならずに無視されます。例"
"えば、バックスラッシュの後ろに改行が2つあって、その後ろにゴミがあるかもしれま"
"せん。パーサのAPIがより良くなればすぐに、この挙動は修正されるでしょう。"

#: ../../library/codeop.rst:56
msgid ""
"Instances of this class have :meth:`__call__` methods identical in signature "
"to the built-in function :func:`compile`, but with the difference that if "
"the instance compiles program text containing a :mod:`__future__` statement, "
"the instance 'remembers' and compiles all subsequent program texts with the "
"statement in force."
msgstr ""
"このクラスのインスタンスは組み込み関数 :func:`compile` とシグネチャが一致す"
"る :meth:`__call__` メソッドを持っていますが、インスタンスが :mod:"
"`__future__` 文を含むプログラムテキストをコンパイルする場合は、インスタンスは"
"有効なその文とともに続くすべてのプログラムテキストを'覚えていて'コンパイルす"
"るという違いがあります。"

#: ../../library/codeop.rst:65
msgid ""
"Instances of this class have :meth:`__call__` methods identical in signature "
"to :func:`compile_command`; the difference is that if the instance compiles "
"program text containing a ``__future__`` statement, the instance 'remembers' "
"and compiles all subsequent program texts with the statement in force."
msgstr ""
"このクラスのインスタンスは :func:`compile_command` とシグネチャが一致する :"
"meth:`__call__` メソッドを持っています。インスタンスが ``__future__`` 文を含"
"むプログラムテキストをコンパイルする場合に、インスタンスは有効なその文ととも"
"にそれに続くすべてのプログラムテキストを'覚えていて'コンパイルするという違い"
"があります。"

#: ../../library/codeop.rst:70
msgid ""
"A note on version compatibility: the :class:`Compile` and :class:"
"`CommandCompiler` are new in Python 2.2.  If you want to enable the future-"
"tracking features of 2.2 but also retain compatibility with 2.1 and earlier "
"versions of Python you can either write ::"
msgstr ""
"バージョン間の互換性についての注意: :class:`Compile` と :class:"
"`CommandCompiler` はPython 2.2 で導入されました。2.2 の future-tracking 機能"
"を有効にするだけでなく、 2.1 と Python のより以前のバージョンとの互換性も保ち"
"たい場合は、次のように書くことができます ::"

#: ../../library/codeop.rst:82
msgid ""
"which is a low-impact change, but introduces possibly unwanted global state "
"into your program, or you can write::"
msgstr ""
"これは影響の小さい変更ですが、あなたのプログラムにおそらく望まれないグローバ"
"ル状態を導入します。または、次のように書くこともできます::"

#: ../../library/codeop.rst:92
msgid ""
"and then call ``CommandCompiler`` every time you need a fresh compiler "
"object."
msgstr ""
"そして、新たなコンパイラオブジェクトが必要となるたびに ``CommandCompiler`` を"
"呼び出します。"
