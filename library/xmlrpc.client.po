# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Takanori Suzuki <takanori@takanory.net>, 2021
# tomo, 2021
# Osamu NAKAMURA, 2021
# Arihiro TAKASE, 2023
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:18+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xmlrpc.client.rst:2
msgid ":mod:`!xmlrpc.client` --- XML-RPC client access"
msgstr ":mod:`!xmlrpc.client` --- XML-RPC クライアントアクセス"

#: ../../library/xmlrpc.client.rst:10
msgid "**Source code:** :source:`Lib/xmlrpc/client.py`"
msgstr "**ソースコード:** :source:`Lib/xmlrpc/client.py`"

#: ../../library/xmlrpc.client.rst:17
msgid ""
"XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP(S) "
"as a transport.  With it, a client can call methods with parameters on a "
"remote server (the server is named by a URI) and get back structured data.  "
"This module supports writing XML-RPC client code; it handles all the details "
"of translating between conformable Python objects and XML on the wire."
msgstr ""
"XML-RPCはXMLを利用した遠隔手続き呼び出し(Remote Procedure Call)の一種で、"
"HTTP(S)をトランスポートとして使用します。XML- RPCでは、クライアントはリモート"
"サーバ(URIで指定されたサーバ)上のメソッドをパラメータを指定して呼び出し、構造"
"化されたデータを取得します。このモジュールは、XML-RPCクライアントの開発をサ"
"ポートしており、Pythonオブジェクトに適合する転送用XMLの変換の全てを行います。"

#: ../../library/xmlrpc.client.rst:26
msgid ""
"The :mod:`xmlrpc.client` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
":mod:`xmlrpc.client` モジュールは悪意を持って構築されたデータに対して安全では"
"ありません。信頼できないデータや認証されていないデータを解析する必要がある場"
"合は、:ref:`xml-vulnerabilities` を参照してください。"

#: ../../library/xmlrpc.client.rst:32
msgid ""
"For HTTPS URIs, :mod:`xmlrpc.client` now performs all the necessary "
"certificate and hostname checks by default."
msgstr ""
"HTTPS URI の場合、 :mod:`xmlrpc.client` は必要な証明書検証とホスト名チェック"
"を全てデフォルトで行います。"

#: ../../includes/wasm-notavail.rst:3
msgid ":ref:`Availability <availability>`: not WASI."
msgstr ":ref:`利用可能な環境 <availability>`: WASI 以外。"

#: ../../includes/wasm-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly. See :ref:`wasm-"
"availability` for more information."
msgstr ""
"このモジュールは WebAssembly では動作しないか、利用不可です。詳しくは、:ref:"
"`wasm-availability` を見てください。"

#: ../../library/xmlrpc.client.rst:41
msgid ""
"A :class:`ServerProxy` instance is an object that manages communication with "
"a remote XML-RPC server.  The required first argument is a URI (Uniform "
"Resource Indicator), and will normally be the URL of the server.  The "
"optional second argument is a transport factory instance; by default it is "
"an internal :class:`SafeTransport` instance for https: URLs and an internal "
"HTTP :class:`Transport` instance otherwise.  The optional third argument is "
"an encoding, by default UTF-8. The optional fourth argument is a debugging "
"flag."
msgstr ""
":class:`ServerProxy` は、リモートのXML-RPCサーバとの通信を管理するオブジェク"
"トです。最初のパラメータはURI(Uniform Resource Indicator)で、通常はサーバの"
"URLを指定します。2番目のパラメータにはトランスポート・ファクトリを指定する事"
"ができます。トランスポート・ファクトリを省略した場合、URLが https: ならモ"
"ジュール内部の :class:`SafeTransport` インスタンスを使用し、それ以外の場合に"
"はモジュール内部の :class:`Transport` インスタンスを使用します。オプションの "
"3 番目の引数はエンコード方法で、デフォルトでは UTF-8 です。オプションの 4 番"
"目の引数はデバッグフラグです。 "

#: ../../library/xmlrpc.client.rst:49
msgid ""
"The following parameters govern the use of the returned proxy instance. If "
"*allow_none* is true,  the Python constant ``None`` will be translated into "
"XML; the default behaviour is for ``None`` to raise a :exc:`TypeError`. This "
"is a commonly used extension to the XML-RPC specification, but isn't "
"supported by all clients and servers; see `http://ontosys.com/xml-rpc/"
"extensions.php <https://web.archive.org/web/20130120074804/http://ontosys."
"com/xml-rpc/extensions.php>`_ for a description. The *use_builtin_types* "
"flag can be used to cause date/time values to be presented as :class:"
"`datetime.datetime` objects and binary data to be presented as :class:"
"`bytes` objects; this flag is false by default. :class:`datetime.datetime`, :"
"class:`bytes` and :class:`bytearray` objects may be passed to calls. The "
"*headers* parameter is an optional sequence of HTTP headers to send with "
"each request, expressed as a sequence of 2-tuples representing the header "
"name and value. (e.g. ``[('Header-Name', 'value')]``). The obsolete "
"*use_datetime* flag is similar to *use_builtin_types* but it applies only to "
"date/time values."
msgstr ""

#: ../../library/xmlrpc.client.rst:67 ../../library/xmlrpc.client.rst:549
msgid "The *use_builtin_types* flag was added."
msgstr "*use_builtin_types* フラグが追加されました。"

#: ../../library/xmlrpc.client.rst:70
msgid "The *headers* parameter was added."
msgstr "*headers* 引数が追加されました。"

#: ../../library/xmlrpc.client.rst:73
msgid ""
"Both the HTTP and HTTPS transports support the URL syntax extension for HTTP "
"Basic Authentication: ``http://user:pass@host:port/path``.  The  ``user:"
"pass`` portion will be base64-encoded as an HTTP 'Authorization' header, and "
"sent to the remote server as part of the connection process when invoking an "
"XML-RPC method.  You only need to use this if the remote server requires a "
"Basic Authentication user and password. If an HTTPS URL is provided, "
"*context* may be :class:`ssl.SSLContext` and configures the SSL settings of "
"the underlying HTTPS connection."
msgstr ""
"HTTP及びHTTPS通信の両方で、 ``http://user:pass@host:port/path`` のようなHTTP"
"基本認証のための拡張URL構文をサポートしています。 ``user:pass`` はbase64でエ"
"ンコードしてHTTPの'Authorization 'ヘッダとなり、XML-RPCメソッド呼び出し時に接"
"続処理の一部としてリモートサーバに送信されます。リモートサーバが基本認証を要"
"求する場合のみ、この機能を利用する必要があります。HTTPS URL が与えられたな"
"ら、 *context* は :class:`ssl.SSLContext` にでき、基底のHTTP接続のSSL設定を設"
"定します。"

#: ../../library/xmlrpc.client.rst:82
msgid ""
"The returned instance is a proxy object with methods that can be used to "
"invoke corresponding RPC calls on the remote server.  If the remote server "
"supports the introspection API, the proxy can also be used to query the "
"remote server for the methods it supports (service discovery) and fetch "
"other server-associated metadata."
msgstr ""
"生成されるインスタンスはリモートサーバへのプロクシオブジェクトで、RPC呼び出し"
"を行う為のメソッドを持ちます。リモートサーバがイントロスペクション APIをサ"
"ポートしている場合は、リモートサーバのサポートするメソッドを検索 (サービス検"
"索)やサーバのメタデータの取得なども行えます。"

#: ../../library/xmlrpc.client.rst:88
msgid ""
"Types that are conformable (e.g. that can be marshalled through XML), "
"include the following (and except where noted, they are unmarshalled as the "
"same Python type):"
msgstr ""
"以下の型をXMLに変換(XMLを通じてマーシャルする)する事ができます (特別な指定が"
"ない限り、逆変換でも同じ型として変換されます):"

#: ../../library/xmlrpc.client.rst:95
msgid "XML-RPC type"
msgstr "XML-RPC の型"

#: ../../library/xmlrpc.client.rst:95
msgid "Python type"
msgstr "Python の型"

#: ../../library/xmlrpc.client.rst:97
msgid "``boolean``"
msgstr "``boolean``"

#: ../../library/xmlrpc.client.rst:97
msgid ":class:`bool`"
msgstr ":class:`bool`"

#: ../../library/xmlrpc.client.rst:99
msgid "``int``, ``i1``, ``i2``,  ``i4``, ``i8`` or ``biginteger``"
msgstr "``int``, ``i1``, ``i2``,  ``i4``, ``i8`` または ``biginteger``"

#: ../../library/xmlrpc.client.rst:99
msgid ""
":class:`int` in range from -2147483648 to 2147483647. Values get the "
"``<int>`` tag."
msgstr ""

#: ../../library/xmlrpc.client.rst:104
msgid "``double`` or ``float``"
msgstr "``double`` または ``float``"

#: ../../library/xmlrpc.client.rst:104
msgid ":class:`float`.  Values get the ``<double>`` tag."
msgstr ""

#: ../../library/xmlrpc.client.rst:107
msgid "``string``"
msgstr "``string``"

#: ../../library/xmlrpc.client.rst:107
msgid ":class:`str`"
msgstr ":class:`str`"

#: ../../library/xmlrpc.client.rst:109
msgid "``array``"
msgstr "``array``"

#: ../../library/xmlrpc.client.rst:109
msgid ""
":class:`list` or :class:`tuple` containing conformable elements.  Arrays are "
"returned as :class:`lists <list>`."
msgstr ""
"適合する要素を持つ :class:`list` または :class:`tuple`。array は :class:"
"`list` として返します。"

#: ../../library/xmlrpc.client.rst:113
msgid "``struct``"
msgstr "``struct``"

#: ../../library/xmlrpc.client.rst:113
msgid ""
":class:`dict`.  Keys must be strings, values may be any conformable type.  "
"Objects of user-defined classes can be passed in; only their :attr:`~object."
"__dict__` attribute is transmitted."
msgstr ""
":class:`dict` 。キーは文字列のみ。全ての値は変換可能でなくてはならない。ユー"
"ザー定義型を渡すこともできます。 :attr:`~object.__dict__` の属性のみ転送され"
"ます。"

#: ../../library/xmlrpc.client.rst:118
msgid "``dateTime.iso8601``"
msgstr "``dateTime.iso8601``"

#: ../../library/xmlrpc.client.rst:118
msgid ""
":class:`DateTime` or :class:`datetime.datetime`. Returned type depends on "
"values of *use_builtin_types* and *use_datetime* flags."
msgstr ""
":class:`DateTime` または :class:`datetime.datetime`。返される型は "
"*use_builtin_types* および *use_datetime* の値に依ります。"

#: ../../library/xmlrpc.client.rst:122
msgid "``base64``"
msgstr "``base64``"

#: ../../library/xmlrpc.client.rst:122
msgid ""
":class:`Binary`, :class:`bytes` or :class:`bytearray`.  Returned type "
"depends on the value of the *use_builtin_types* flag."
msgstr ""
":class:`Binary`、 :class:`bytes` または :class:`bytearray`。返される型は "
"*use_builtin_types* フラグの値に依ります。"

#: ../../library/xmlrpc.client.rst:126
msgid "``nil``"
msgstr "``nil``"

#: ../../library/xmlrpc.client.rst:126
msgid ""
"The ``None`` constant.  Passing is allowed only if *allow_none* is true."
msgstr "``None`` 定数。 *allow_none* が真の場合にのみ渡すことが出来ます。"

#: ../../library/xmlrpc.client.rst:129
msgid "``bigdecimal``"
msgstr "``bigdecimal``"

#: ../../library/xmlrpc.client.rst:129
msgid ":class:`decimal.Decimal`.  Returned type only."
msgstr ""

#: ../../library/xmlrpc.client.rst:132
msgid ""
"This is the full set of data types supported by XML-RPC.  Method calls may "
"also raise a special :exc:`Fault` instance, used to signal XML-RPC server "
"errors, or :exc:`ProtocolError` used to signal an error in the HTTP/HTTPS "
"transport layer. Both :exc:`Fault` and :exc:`ProtocolError` derive from a "
"base class called :exc:`Error`.  Note that the xmlrpc client module "
"currently does not marshal instances of subclasses of built-in types."
msgstr ""
"上記のXML-RPCでサポートする全データ型を使用することができます。メソッド呼び出"
"し時、XML- RPCサーバエラーが発生すると :exc:`Fault` インスタンスを送出し、"
"HTTP/HTTPSトランスポート層でエラーが発生した場合には :exc:`ProtocolError` を"
"送出します。 :exc:`Error` をベースとする :exc:`Fault` と :exc:"
"`ProtocolError` の両方が発生します。現在のところxmlrpclibでは組み込み型のサブ"
"クラスのインスタンスをマーシャルすることはできません。"

#: ../../library/xmlrpc.client.rst:139
msgid ""
"When passing strings, characters special to XML such as ``<``, ``>``, and "
"``&`` will be automatically escaped.  However, it's the caller's "
"responsibility to ensure that the string is free of characters that aren't "
"allowed in XML, such as the control characters with ASCII values between 0 "
"and 31 (except, of course, tab, newline and carriage return); failing to do "
"this will result in an XML-RPC request that isn't well-formed XML.  If you "
"have to pass arbitrary bytes via XML-RPC, use :class:`bytes` or :class:"
"`bytearray` classes or the :class:`Binary` wrapper class described below."
msgstr ""
"文字列を渡す場合、 ``<``, ``>``, ``&`` などのXMLで特殊な意味を持つ文字は自動"
"的にエスケープされます。しかし、ASCII値0〜31の制御文字(もちろん、タブ'TAB',改"
"行'LF',リターン'CR'は除く)などのXMLで使用することのできない文字を使用すること"
"はできず、使用するとそのXML-RPCリクエストはwell-formedなXMLとはなりません。そ"
"のようなバイト列を渡す必要がある場合は、 :class:`bytes`, :class:`bytearray` "
"クラスまたは後述の :class:`Binary` ラッパークラスを使用してください。"

#: ../../library/xmlrpc.client.rst:148
msgid ""
":class:`Server` is retained as an alias for :class:`ServerProxy` for "
"backwards compatibility.  New code should use :class:`ServerProxy`."
msgstr ""
":class:`Server` は、後方互換性の為に :class:`ServerProxy` の別名として残され"
"ています。新しいコードでは :class:`ServerProxy` を使用してください。"

#: ../../library/xmlrpc.client.rst:151
msgid "Added the *context* argument."
msgstr "*context* 引数が追加されました。"

#: ../../library/xmlrpc.client.rst:154
msgid ""
"Added support of type tags with prefixes (e.g. ``ex:nil``). Added support of "
"unmarshalling additional types used by Apache XML-RPC implementation for "
"numerics: ``i1``, ``i2``, ``i8``, ``biginteger``, ``float`` and "
"``bigdecimal``. See https://ws.apache.org/xmlrpc/types.html for a "
"description."
msgstr ""

#: ../../library/xmlrpc.client.rst:164
msgid "`XML-RPC HOWTO <https://tldp.org/HOWTO/XML-RPC-HOWTO/index.html>`_"
msgstr "`XML-RPC HOWTO <https://tldp.org/HOWTO/XML-RPC-HOWTO/index.html>`_"

#: ../../library/xmlrpc.client.rst:165
msgid ""
"A good description of XML-RPC operation and client software in several "
"languages. Contains pretty much everything an XML-RPC client developer needs "
"to know."
msgstr ""
"数種類のプログラミング言語で記述された XML-RPCの操作とクライアントソフトウェ"
"アの素晴らしい説明が掲載されています。 XML- RPCクライアントの開発者が知ってお"
"くべきことがほとんど全て記載されています。"

#: ../../library/xmlrpc.client.rst:168
msgid ""
"`XML-RPC Introspection <https://xmlrpc-c.sourceforge.net/introspection."
"html>`_"
msgstr ""
"`XML-RPC Introspection <https://xmlrpc-c.sourceforge.net/introspection."
"html>`_"

#: ../../library/xmlrpc.client.rst:169
msgid "Describes the XML-RPC protocol extension for introspection."
msgstr ""
"インストロペクションをサポートする、 XML-RPC プロトコルの拡張を解説していま"
"す。"

#: ../../library/xmlrpc.client.rst:171
msgid "`XML-RPC Specification <http://xmlrpc.scripting.com/spec.html>`_"
msgstr "`XML-RPC Specification <http://xmlrpc.scripting.com/spec.html>`_"

#: ../../library/xmlrpc.client.rst:172
msgid "The official specification."
msgstr "公式の仕様"

#: ../../library/xmlrpc.client.rst:177
msgid "ServerProxy Objects"
msgstr "ServerProxy オブジェクト"

#: ../../library/xmlrpc.client.rst:179
msgid ""
"A :class:`ServerProxy` instance has a method corresponding to each remote "
"procedure call accepted by the XML-RPC server.  Calling the method performs "
"an RPC, dispatched by both name and argument signature (e.g. the same method "
"name can be overloaded with multiple argument signatures).  The RPC finishes "
"by returning a value, which may be either returned data in a conformant type "
"or a :class:`Fault` or :class:`ProtocolError` object indicating an error."
msgstr ""
":class:`ServerProxy` インスタンスの各メソッドはそれぞれXML-RPCサーバの遠隔手"
"続き呼び出しに対応しており、メソッドが呼び出されると名前と引数をシグネチャと"
"してRPCを実行します(同じ名前のメソッドでも、異なる引数シグネチャによってオー"
"バロードされます)。RPC実行後、変換された値を返すか、または :class:`Fault` オ"
"ブジェクトもしくは :class:`ProtocolError` オブジェクトでエラーを通知します。"

#: ../../library/xmlrpc.client.rst:186
msgid ""
"Servers that support the XML introspection API support some common methods "
"grouped under the reserved :attr:`~ServerProxy.system` attribute:"
msgstr ""
"予約属性 :attr:`~ServerProxy.system` から、XMLイントロスペクションAPIの一般的"
"なメソッドを利用する事ができます:"

#: ../../library/xmlrpc.client.rst:192
msgid ""
"This method returns a list of strings, one for each (non-system) method "
"supported by the XML-RPC server."
msgstr ""
"XML-RPCサーバがサポートするメソッド名(system以外)を格納する文字列のリストを返"
"します。"

#: ../../library/xmlrpc.client.rst:198
msgid ""
"This method takes one parameter, the name of a method implemented by the XML-"
"RPC server. It returns an array of possible signatures for this method. A "
"signature is an array of types. The first of these types is the return type "
"of the method, the rest are parameters."
msgstr ""
"XML-RPCサーバで実装されているメソッドの名前を指定し、利用可能なシグネチャの配"
"列を取得します。シグネチャは型のリストで、先頭の型は戻り値の型を示し、以降は"
"パラメータの型を示します。"

#: ../../library/xmlrpc.client.rst:203
msgid ""
"Because multiple signatures (ie. overloading) is permitted, this method "
"returns a list of signatures rather than a singleton."
msgstr ""
"XML-RPCでは複数のシグネチャ(オーバロード)を使用することができるので、単独のシ"
"グネチャではなく、シグネチャのリストを返します。"

#: ../../library/xmlrpc.client.rst:206
msgid ""
"Signatures themselves are restricted to the top level parameters expected by "
"a method. For instance if a method expects one array of structs as a "
"parameter, and it returns a string, its signature is simply \"string, "
"array\". If it expects three integers and returns a string, its signature is "
"\"string, int, int, int\"."
msgstr ""
"シグネチャは、メソッドが使用する最上位のパラメータにのみ適用されます。例えば"
"あるメソッドのパラメータが構造体の配列で戻り値が文字列の場合、シグネチャは単"
"に\"string, array\" となります。パラメータが三つの整数で戻り値が文字列の場合"
"は\"string, int, int, int\"となります。"

#: ../../library/xmlrpc.client.rst:211
msgid ""
"If no signature is defined for the method, a non-array value is returned. In "
"Python this means that the type of the returned  value will be something "
"other than list."
msgstr ""
"メソッドにシグネチャが定義されていない場合、配列以外の値が返ります。 Pythonで"
"は、この値はlist以外の値となります。"

#: ../../library/xmlrpc.client.rst:218
msgid ""
"This method takes one parameter, the name of a method implemented by the XML-"
"RPC server.  It returns a documentation string describing the use of that "
"method. If no such string is available, an empty string is returned. The "
"documentation string may contain HTML markup."
msgstr ""
"XML-RPCサーバで実装されているメソッドの名前を指定し、そのメソッドを解説する文"
"書文字列を取得します。文書文字列を取得できない場合は空文字列を返します。文書"
"文字列にはHTMLマークアップが含まれます。"

#: ../../library/xmlrpc.client.rst:225
msgid ""
"Instances of :class:`ServerProxy` support the :term:`context manager` "
"protocol for closing the underlying transport."
msgstr ""

#: ../../library/xmlrpc.client.rst:229 ../../library/xmlrpc.client.rst:276
msgid "A working example follows. The server code::"
msgstr "以下は、動作する例です。サーバ側のコード::"

#: ../../library/xmlrpc.client.rst:231
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"\n"
"def is_even(n):\n"
"    return n % 2 == 0\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(is_even, \"is_even\")\n"
"server.serve_forever()"
msgstr ""

#: ../../library/xmlrpc.client.rst:241 ../../library/xmlrpc.client.rst:291
#: ../../library/xmlrpc.client.rst:401 ../../library/xmlrpc.client.rst:507
msgid "The client code for the preceding server::"
msgstr "上記のサーバーに対するクライアントコード::"

#: ../../library/xmlrpc.client.rst:243
msgid ""
"import xmlrpc.client\n"
"\n"
"with xmlrpc.client.ServerProxy(\"http://localhost:8000/\") as proxy:\n"
"    print(\"3 is even: %s\" % str(proxy.is_even(3)))\n"
"    print(\"100 is even: %s\" % str(proxy.is_even(100)))"
msgstr ""

#: ../../library/xmlrpc.client.rst:252
msgid "DateTime Objects"
msgstr "DateTime オブジェクト"

#: ../../library/xmlrpc.client.rst:256
msgid ""
"This class may be initialized with seconds since the epoch, a time tuple, an "
"ISO 8601 time/date string, or a :class:`datetime.datetime` instance.  It has "
"the following methods, supported mainly for internal use by the marshalling/"
"unmarshalling code:"
msgstr ""
"このクラスは、エポックからの秒数、タプルで表現された時刻、ISO 8601形式の時間/"
"日付文字列、 :class:`datetime.datetime`, のインスタンスのいずれかで初期化する"
"ことができます。このクラスには以下のメソッドがあり、主にコードをマーシャル/ア"
"ンマーシャルするための内部処理を行います:"

#: ../../library/xmlrpc.client.rst:264
msgid "Accept a string as the instance's new time value."
msgstr "文字列をインスタンスの新しい時間を示す値として指定します。"

#: ../../library/xmlrpc.client.rst:269
msgid ""
"Write the XML-RPC encoding of this :class:`DateTime` item to the *out* "
"stream object."
msgstr ""
"出力ストリームオブジェクト *out* に、XML-RPCエンコーディングの :class:"
"`DateTime` 値を出力します。"

#: ../../library/xmlrpc.client.rst:272
msgid ""
"It also supports certain of Python's built-in operators through :meth:`rich "
"comparison <object.__lt__>` and :meth:`~object.__repr__` methods."
msgstr ""

#: ../../library/xmlrpc.client.rst:278
msgid ""
"import datetime\n"
"from xmlrpc.server import SimpleXMLRPCServer\n"
"import xmlrpc.client\n"
"\n"
"def today():\n"
"    today = datetime.datetime.today()\n"
"    return xmlrpc.client.DateTime(today)\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(today, \"today\")\n"
"server.serve_forever()"
msgstr ""

#: ../../library/xmlrpc.client.rst:293
msgid ""
"import xmlrpc.client\n"
"import datetime\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"\n"
"today = proxy.today()\n"
"# convert the ISO8601 string to a datetime object\n"
"converted = datetime.datetime.strptime(today.value, \"%Y%m%dT%H:%M:%S\")\n"
"print(\"Today: %s\" % converted.strftime(\"%d.%m.%Y, %H:%M\"))"
msgstr ""

#: ../../library/xmlrpc.client.rst:306
msgid "Binary Objects"
msgstr "Binary オブジェクト"

#: ../../library/xmlrpc.client.rst:310
msgid ""
"This class may be initialized from bytes data (which may include NULs). The "
"primary access to the content of a :class:`Binary` object is provided by an "
"attribute:"
msgstr ""
"このクラスは、バイト列データ(NULを含む)で初期化することができます。 :class:"
"`Binary` の内容は、属性で参照します:"

#: ../../library/xmlrpc.client.rst:317
msgid ""
"The binary data encapsulated by the :class:`Binary` instance.  The data is "
"provided as a :class:`bytes` object."
msgstr ""
":class:`Binary` インスタンスがカプセル化しているバイナリデータ。このデータ"
"は :class:`bytes` オブジェクトです。"

#: ../../library/xmlrpc.client.rst:320
msgid ""
":class:`Binary` objects have the following methods, supported mainly for "
"internal use by the marshalling/unmarshalling code:"
msgstr ""
":class:`Binary` オブジェクトは以下のメソッドを持ち、主に内部的にマーシャル/ア"
"ンマーシャル時に使用されます:"

#: ../../library/xmlrpc.client.rst:326
msgid ""
"Accept a base64 :class:`bytes` object and decode it as the instance's new "
"data."
msgstr ""
"指定されたbase64 :class:`bytes` オブジェクトをデコードし、インスタンスのデー"
"タとします。"

#: ../../library/xmlrpc.client.rst:331
msgid ""
"Write the XML-RPC base 64 encoding of this binary item to the *out* stream "
"object."
msgstr ""
"バイナリ値をbase64でエンコードし、出力ストリームオブジェクト *out* に出力しま"
"す。"

#: ../../library/xmlrpc.client.rst:333
msgid ""
"The encoded data will have newlines every 76 characters as per :rfc:`RFC "
"2045 section 6.8 <2045#section-6.8>`, which was the de facto standard base64 "
"specification when the XML-RPC spec was written."
msgstr ""
"エンコードされたデータは、 :rfc:`RFC 2045 section 6.8 <2045#section-6.8>` に"
"ある通り、76文字ごとに改行されます。これは、XMC-RPC仕様が作成された時のデ・"
"ファクト・スタンダードのbase64です。"

#: ../../library/xmlrpc.client.rst:338
msgid ""
"It also supports certain of Python's built-in operators through :meth:"
"`~object.__eq__` and :meth:`~object.__ne__` methods."
msgstr ""

#: ../../library/xmlrpc.client.rst:341
msgid ""
"Example usage of the binary objects.  We're going to transfer an image over "
"XMLRPC::"
msgstr "バイナリオブジェクトの使用例です。 XML-RPCごしに画像を転送します。 ::"

#: ../../library/xmlrpc.client.rst:344
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"import xmlrpc.client\n"
"\n"
"def python_logo():\n"
"    with open(\"python_logo.jpg\", \"rb\") as handle:\n"
"        return xmlrpc.client.Binary(handle.read())\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(python_logo, 'python_logo')\n"
"\n"
"server.serve_forever()"
msgstr ""

#: ../../library/xmlrpc.client.rst:357
msgid "The client gets the image and saves it to a file::"
msgstr "クライアントは画像を取得して、ファイルに保存します。 ::"

#: ../../library/xmlrpc.client.rst:359
msgid ""
"import xmlrpc.client\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"with open(\"fetched_python_logo.jpg\", \"wb\") as handle:\n"
"    handle.write(proxy.python_logo().data)"
msgstr ""

#: ../../library/xmlrpc.client.rst:368
msgid "Fault Objects"
msgstr "Fault オブジェクト"

#: ../../library/xmlrpc.client.rst:372
msgid ""
"A :class:`Fault` object encapsulates the content of an XML-RPC fault tag. "
"Fault objects have the following attributes:"
msgstr ""
":class:`Fault` オブジェクトは、XML-RPCのfaultタグの内容をカプセル化しており、"
"以下の属性を持ちます:"

#: ../../library/xmlrpc.client.rst:378
msgid "An int indicating the fault type."
msgstr "失敗のタイプを示す整数。"

#: ../../library/xmlrpc.client.rst:383
msgid "A string containing a diagnostic message associated with the fault."
msgstr "失敗の診断メッセージを含む文字列。"

#: ../../library/xmlrpc.client.rst:385
msgid ""
"In the following example we're going to intentionally cause a :exc:`Fault` "
"by returning a complex type object.  The server code::"
msgstr ""
"以下のサンプルでは、複素数型のオブジェクトを返そうとして、故意に :exc:"
"`Fault` を起こしています。 ::"

#: ../../library/xmlrpc.client.rst:388
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"\n"
"# A marshalling error is going to occur because we're returning a\n"
"# complex number\n"
"def add(x, y):\n"
"    return x+y+0j\n"
"\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_function(add, 'add')\n"
"\n"
"server.serve_forever()"
msgstr ""

#: ../../library/xmlrpc.client.rst:403
msgid ""
"import xmlrpc.client\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"try:\n"
"    proxy.add(2, 5)\n"
"except xmlrpc.client.Fault as err:\n"
"    print(\"A fault occurred\")\n"
"    print(\"Fault code: %d\" % err.faultCode)\n"
"    print(\"Fault string: %s\" % err.faultString)"
msgstr ""

#: ../../library/xmlrpc.client.rst:418
msgid "ProtocolError Objects"
msgstr "ProtocolError オブジェクト"

#: ../../library/xmlrpc.client.rst:422
msgid ""
"A :class:`ProtocolError` object describes a protocol error in the underlying "
"transport layer (such as a 404 'not found' error if the server named by the "
"URI does not exist).  It has the following attributes:"
msgstr ""
":class:`ProtocolError` オブジェクトはトランスポート層で発生したエラー(URI で"
"指定したサーバが見つからなかった場合に発生する404 'not found'など)の内容を示"
"し、以下の属性を持ちます:"

#: ../../library/xmlrpc.client.rst:429
msgid "The URI or URL that triggered the error."
msgstr "エラーの原因となったURIまたはURL。"

#: ../../library/xmlrpc.client.rst:434
msgid "The error code."
msgstr "エラーコード。"

#: ../../library/xmlrpc.client.rst:439
msgid "The error message or diagnostic string."
msgstr "エラーメッセージまたは診断文字列。"

#: ../../library/xmlrpc.client.rst:444
msgid ""
"A dict containing the headers of the HTTP/HTTPS request that triggered the "
"error."
msgstr "エラーの原因となったHTTP/HTTPSリクエストを含む辞書。"

#: ../../library/xmlrpc.client.rst:447
msgid ""
"In the following example we're going to intentionally cause a :exc:"
"`ProtocolError` by providing an invalid URI::"
msgstr ""
"次の例では、不適切な URI を利用して、故意に :exc:`ProtocolError` を発生させて"
"います::"

#: ../../library/xmlrpc.client.rst:450
msgid ""
"import xmlrpc.client\n"
"\n"
"# create a ServerProxy with a URI that doesn't respond to XMLRPC requests\n"
"proxy = xmlrpc.client.ServerProxy(\"http://google.com/\")\n"
"\n"
"try:\n"
"    proxy.some_method()\n"
"except xmlrpc.client.ProtocolError as err:\n"
"    print(\"A protocol error occurred\")\n"
"    print(\"URL: %s\" % err.url)\n"
"    print(\"HTTP/HTTPS headers: %s\" % err.headers)\n"
"    print(\"Error code: %d\" % err.errcode)\n"
"    print(\"Error message: %s\" % err.errmsg)"
msgstr ""

#: ../../library/xmlrpc.client.rst:465
msgid "MultiCall Objects"
msgstr "MultiCall オブジェクト"

#: ../../library/xmlrpc.client.rst:467
msgid ""
"The :class:`MultiCall` object provides a way to encapsulate multiple calls "
"to a remote server into a single request [#]_."
msgstr ""
":class:`MultiCall` オブジェクトは遠隔のサーバに対する複数の呼び出しをひとつの"
"リクエストにカプセル化する方法を提供します [#]_。"

#: ../../library/xmlrpc.client.rst:473
msgid ""
"Create an object used to boxcar method calls. *server* is the eventual "
"target of the call. Calls can be made to the result object, but they will "
"immediately return ``None``, and only store the call name and parameters in "
"the :class:`MultiCall` object. Calling the object itself causes all stored "
"calls to be transmitted as a single ``system.multicall`` request. The result "
"of this call is a :term:`generator`; iterating over this generator yields "
"the individual results."
msgstr ""
"巨大な (boxcar) メソッド呼び出しに使えるオブジェクトを作成します。 *server* "
"には最終的に呼び出しを行う対象を指定します。作成した MultiCall オブジェクトを"
"使って呼び出しを行うと、即座に ``None`` を返し、呼び出したい手続き名とパラメ"
"タを :class:`MultiCall` オブジェクトに保存するだけに留まります。オブジェクト"
"自体を呼び出すと、それまでに保存しておいたすべての呼び出しを単一の ``system."
"multicall`` リクエストの形で伝送します。呼び出し結果は :term:`ジェネレータ "
"<generator>` になります。このジェネレータにわたってイテレーションを行うと、"
"個々の呼び出し結果を返します。"

#: ../../library/xmlrpc.client.rst:481
msgid "A usage example of this class follows.  The server code::"
msgstr "以下は、このクラスの使用例です。サーバ側のコード::"

#: ../../library/xmlrpc.client.rst:483
msgid ""
"from xmlrpc.server import SimpleXMLRPCServer\n"
"\n"
"def add(x, y):\n"
"    return x + y\n"
"\n"
"def subtract(x, y):\n"
"    return x - y\n"
"\n"
"def multiply(x, y):\n"
"    return x * y\n"
"\n"
"def divide(x, y):\n"
"    return x // y\n"
"\n"
"# A simple server with simple arithmetic functions\n"
"server = SimpleXMLRPCServer((\"localhost\", 8000))\n"
"print(\"Listening on port 8000...\")\n"
"server.register_multicall_functions()\n"
"server.register_function(add, 'add')\n"
"server.register_function(subtract, 'subtract')\n"
"server.register_function(multiply, 'multiply')\n"
"server.register_function(divide, 'divide')\n"
"server.serve_forever()"
msgstr ""

#: ../../library/xmlrpc.client.rst:509
msgid ""
"import xmlrpc.client\n"
"\n"
"proxy = xmlrpc.client.ServerProxy(\"http://localhost:8000/\")\n"
"multicall = xmlrpc.client.MultiCall(proxy)\n"
"multicall.add(7, 3)\n"
"multicall.subtract(7, 3)\n"
"multicall.multiply(7, 3)\n"
"multicall.divide(7, 3)\n"
"result = multicall()\n"
"\n"
"print(\"7+3=%d, 7-3=%d, 7*3=%d, 7//3=%d\" % tuple(result))"
msgstr ""

#: ../../library/xmlrpc.client.rst:523
msgid "Convenience Functions"
msgstr "補助関数"

#: ../../library/xmlrpc.client.rst:527
msgid ""
"Convert *params* into an XML-RPC request. or into a response if "
"*methodresponse* is true. *params* can be either a tuple of arguments or an "
"instance of the :exc:`Fault` exception class.  If *methodresponse* is true, "
"only a single value can be returned, meaning that *params* must be of length "
"1. *encoding*, if supplied, is the encoding to use in the generated XML; the "
"default is UTF-8. Python's :const:`None` value cannot be used in standard "
"XML-RPC; to allow using it via an extension,  provide a true value for "
"*allow_none*."
msgstr ""
"*params* を XML-RPC リクエストの形式に変換します。 *methodresponse* が真の場"
"合、XML-RPC レスポンスの形式に変換します。 *params* に指定できるのは、引数か"
"らなるタプルか :exc:`Fault` 例外クラスのインスタンスです。 *methodresponse* "
"が真の場合、単一の値だけを返します。従って、 *params* の長さも 1 でなければな"
"りません。 *encoding* を指定した場合、生成される XML のエンコード方式になりま"
"す。デフォルトは UTF-8 です。 Python の :const:`None` は標準の XML-RPC には利"
"用できません。 :const:`None` を使えるようにするには、 *allow_none* を真にし"
"て、拡張機能つきにしてください。"

#: ../../library/xmlrpc.client.rst:538
msgid ""
"Convert an XML-RPC request or response into Python objects, a ``(params, "
"methodname)``.  *params* is a tuple of argument; *methodname* is a string, "
"or ``None`` if no method name is present in the packet. If the XML-RPC "
"packet represents a fault condition, this function will raise a :exc:`Fault` "
"exception. The *use_builtin_types* flag can be used to cause date/time "
"values to be presented as :class:`datetime.datetime` objects and binary data "
"to be presented as :class:`bytes` objects; this flag is false by default."
msgstr ""
"XML-RPC リクエストまたはレスポンスを ``(params, methodname)`` の形式をとる "
"Python オブジェクトにします。 *params* は引数のタプルです。 *methodname* は文"
"字列で、パケット中にメソッド名がない場合には ``None`` になります。例外条件を"
"示す XML-RPC パケットの場合には、 :exc:`Fault` 例外を送出します。 "
"*use_builtin_types* フラグは :class:`datetime.datetime` のオブジェクトとして"
"日付/時刻を、 :class:`bytes` のオブジェクトとしてバイナリデータを表現する時に"
"使用し、デフォルトでは false に設定されています。"

#: ../../library/xmlrpc.client.rst:546
msgid ""
"The obsolete *use_datetime* flag is similar to *use_builtin_types* but it "
"applies only to date/time values."
msgstr ""
"非推奨となった *use_datetime* フラグは *use_builtin_types* に似ていますが "
"date/time 値にのみ適用されます。"

#: ../../library/xmlrpc.client.rst:556
msgid "Example of Client Usage"
msgstr "クライアントのサンプル"

#: ../../library/xmlrpc.client.rst:560
msgid ""
"# simple test program (from the XML-RPC specification)\n"
"from xmlrpc.client import ServerProxy, Error\n"
"\n"
"# server = ServerProxy(\"http://localhost:8000\") # local server\n"
"with ServerProxy(\"http://betty.userland.com\") as proxy:\n"
"\n"
"    print(proxy)\n"
"\n"
"    try:\n"
"        print(proxy.examples.getStateName(41))\n"
"    except Error as v:\n"
"        print(\"ERROR\", v)"
msgstr ""

#: ../../library/xmlrpc.client.rst:573
msgid ""
"To access an XML-RPC server through a HTTP proxy, you need to define a "
"custom transport.  The following example shows how::"
msgstr ""
"XML-RPC サーバに HTTP プロキシを経由して接続する場合、カスタムトランスポート"
"を定義する必要があります。以下に例を示します::"

#: ../../library/xmlrpc.client.rst:576
msgid ""
"import http.client\n"
"import xmlrpc.client\n"
"\n"
"class ProxiedTransport(xmlrpc.client.Transport):\n"
"\n"
"    def set_proxy(self, host, port=None, headers=None):\n"
"        self.proxy = host, port\n"
"        self.proxy_headers = headers\n"
"\n"
"    def make_connection(self, host):\n"
"        connection = http.client.HTTPConnection(*self.proxy)\n"
"        connection.set_tunnel(host, headers=self.proxy_headers)\n"
"        self._connection = host, connection\n"
"        return connection\n"
"\n"
"transport = ProxiedTransport()\n"
"transport.set_proxy('proxy-server', 8080)\n"
"server = xmlrpc.client.ServerProxy('http://betty.userland.com', "
"transport=transport)\n"
"print(server.examples.getStateName(41))"
msgstr ""

#: ../../library/xmlrpc.client.rst:598
msgid "Example of Client and Server Usage"
msgstr "クライアントとサーバーの利用例"

#: ../../library/xmlrpc.client.rst:600
msgid "See :ref:`simplexmlrpcserver-example`."
msgstr ":ref:`simplexmlrpcserver-example` を参照してください。"

#: ../../library/xmlrpc.client.rst:604
msgid "Footnotes"
msgstr "脚注"

#: ../../library/xmlrpc.client.rst:605
msgid ""
"This approach has been first presented in `a discussion on xmlrpc.com "
"<https://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/"
"msgReader$1208?mode=topic>`_."
msgstr ""
"このアプローチは `a discussion on xmlrpc.com <https://web.archive.org/"
"web/20060624230303/http://www.xmlrpc.com/discuss/msgReader$1208?"
"mode=topic>`_ にて最初に著されました。"
