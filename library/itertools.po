# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
# Tetsuo Koyama <tkoyama010@gmail.com>, 2020
# mollinaca, 2020
# Takanori Suzuki <takanori@takanory.net>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:06+0000\n"
"PO-Revision-Date: 2020-05-30 12:04+0000\n"
"Last-Translator: Takanori Suzuki <takanori@takanory.net>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/itertools.rst:2
msgid ":mod:`itertools` --- Functions creating iterators for efficient looping"
msgstr ":mod:`itertools` --- 効率的なループ実行のためのイテレータ生成関数"

#: ../../library/itertools.rst:16
msgid ""
"This module implements a number of :term:`iterator` building blocks inspired "
"by constructs from APL, Haskell, and SML.  Each has been recast in a form "
"suitable for Python."
msgstr ""
"このモジュールは :term:`イテレータ <iterator>` を構築する部品を実装していま"
"す。プログラム言語 APL, Haskell, SML からアイデアを得ていますが、 Python に適"
"した形に修正されています。"

#: ../../library/itertools.rst:20
msgid ""
"The module standardizes a core set of fast, memory efficient tools that are "
"useful by themselves or in combination.  Together, they form an \"iterator "
"algebra\" making it possible to construct specialized tools succinctly and "
"efficiently in pure Python."
msgstr ""
"このモジュールは、高速でメモリ効率に優れ、単独でも組合せても使用することので"
"きるツールを標準化したものです。同時に、このツール群は \"イテレータの代数\" "
"を構成していて、pure Python で簡潔かつ効率的なツールを作れるようにしていま"
"す。"

#: ../../library/itertools.rst:25
msgid ""
"For instance, SML provides a tabulation tool: ``tabulate(f)`` which produces "
"a sequence ``f(0), f(1), ...``.  The same effect can be achieved in Python "
"by combining :func:`map` and :func:`count` to form ``map(f, count())``."
msgstr ""
"例えば、SML の作表ツール ``tabulate(f)`` は ``f(0), f(1), ...`` のシーケンス"
"を作成します。同じことを Python では :func:`map` と :func:`count` を組合せて "
"``map(f, count())`` という形で実現できます。"

#: ../../library/itertools.rst:29
msgid ""
"These tools and their built-in counterparts also work well with the high-"
"speed functions in the :mod:`operator` module.  For example, the "
"multiplication operator can be mapped across two vectors to form an "
"efficient dot-product: ``sum(map(operator.mul, vector1, vector2))``."
msgstr ""
"これらのツールと組み込み関数は :mod:`operator` モジュール内の高速な関数ととも"
"に使うことで見事に動作します。例えば、乗算演算子を2つのベクトルにわたってマッ"
"プすることで効率的な内積計算を実現できます: ``sum(map(operator.mul, vector1, "
"vector2))`` 。"

#: ../../library/itertools.rst:35
msgid "**Infinite iterators:**"
msgstr "**無限イテレータ:**"

#: ../../library/itertools.rst:38 ../../library/itertools.rst:48
#: ../../library/itertools.rst:67
msgid "Iterator"
msgstr "イテレータ"

#: ../../library/itertools.rst:38 ../../library/itertools.rst:48
#: ../../library/itertools.rst:67
msgid "Arguments"
msgstr "引数"

#: ../../library/itertools.rst:38 ../../library/itertools.rst:48
#: ../../library/itertools.rst:67 ../../library/itertools.rst:76
msgid "Results"
msgstr "結果"

#: ../../library/itertools.rst:38 ../../library/itertools.rst:48
msgid "Example"
msgstr "使用例"

#: ../../library/itertools.rst:40
msgid ":func:`count`"
msgstr ":func:`count`"

#: ../../library/itertools.rst:40
msgid "start, [step]"
msgstr "start, [step]"

#: ../../library/itertools.rst:40
msgid "start, start+step, start+2*step, ..."
msgstr "start, start+step, start+2*step, ..."

#: ../../library/itertools.rst:40
msgid "``count(10) --> 10 11 12 13 14 ...``"
msgstr "``count(10) --> 10 11 12 13 14 ...``"

#: ../../library/itertools.rst:41
msgid ":func:`cycle`"
msgstr ":func:`cycle`"

#: ../../library/itertools.rst:41
msgid "p"
msgstr "p"

#: ../../library/itertools.rst:41
msgid "p0, p1, ... plast, p0, p1, ..."
msgstr "p0, p1, ... plast, p0, p1, ..."

#: ../../library/itertools.rst:41
msgid "``cycle('ABCD') --> A B C D A B C D ...``"
msgstr "``cycle('ABCD') --> A B C D A B C D ...``"

#: ../../library/itertools.rst:42
msgid ":func:`repeat`"
msgstr ":func:`repeat`"

#: ../../library/itertools.rst:42
msgid "elem [,n]"
msgstr "elem [,n]"

#: ../../library/itertools.rst:42
msgid "elem, elem, elem, ... endlessly or up to n times"
msgstr "elem, elem, elem, ... 無限もしくは n 回"

#: ../../library/itertools.rst:42
msgid "``repeat(10, 3) --> 10 10 10``"
msgstr "``repeat(10, 3) --> 10 10 10``"

#: ../../library/itertools.rst:45
msgid "**Iterators terminating on the shortest input sequence:**"
msgstr "**一番短い入力シーケンスで止まるイテレータ:**"

#: ../../library/itertools.rst:50
msgid ":func:`accumulate`"
msgstr ":func:`accumulate`"

#: ../../library/itertools.rst:50
msgid "p [,func]"
msgstr "p [,func]"

#: ../../library/itertools.rst:50
msgid "p0, p0+p1, p0+p1+p2, ..."
msgstr "p0, p0+p1, p0+p1+p2, ..."

#: ../../library/itertools.rst:50
msgid "``accumulate([1,2,3,4,5]) --> 1 3 6 10 15``"
msgstr "``accumulate([1,2,3,4,5]) --> 1 3 6 10 15``"

#: ../../library/itertools.rst:51
msgid ":func:`chain`"
msgstr ":func:`chain`"

#: ../../library/itertools.rst:51 ../../library/itertools.rst:61
msgid "p, q, ..."
msgstr "p, q, ..."

#: ../../library/itertools.rst:51 ../../library/itertools.rst:52
msgid "p0, p1, ... plast, q0, q1, ..."
msgstr "p0, p1, ... plast, q0, q1, ..."

#: ../../library/itertools.rst:51
msgid "``chain('ABC', 'DEF') --> A B C D E F``"
msgstr "``chain('ABC', 'DEF') --> A B C D E F``"

#: ../../library/itertools.rst:52
msgid ":func:`chain.from_iterable`"
msgstr ":func:`chain.from_iterable`"

#: ../../library/itertools.rst:52
msgid "iterable"
msgstr "iterable"

#: ../../library/itertools.rst:52
msgid "``chain.from_iterable(['ABC', 'DEF']) --> A B C D E F``"
msgstr "``chain.from_iterable(['ABC', 'DEF']) --> A B C D E F``"

#: ../../library/itertools.rst:53
msgid ":func:`compress`"
msgstr ":func:`compress`"

#: ../../library/itertools.rst:53
msgid "data, selectors"
msgstr "data, selectors"

#: ../../library/itertools.rst:53
msgid "(d[0] if s[0]), (d[1] if s[1]), ..."
msgstr "(d[0] if s[0]), (d[1] if s[1]), ..."

#: ../../library/itertools.rst:53
msgid "``compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F``"
msgstr "``compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F``"

#: ../../library/itertools.rst:54
msgid ":func:`dropwhile`"
msgstr ":func:`dropwhile`"

#: ../../library/itertools.rst:54 ../../library/itertools.rst:55
#: ../../library/itertools.rst:59
msgid "pred, seq"
msgstr "pred, seq"

#: ../../library/itertools.rst:54
msgid "seq[n], seq[n+1], starting when pred fails"
msgstr "seq[n], seq[n+1], pred が偽の場所から始まる"

#: ../../library/itertools.rst:54
msgid "``dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1``"
msgstr "``dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1``"

#: ../../library/itertools.rst:55
msgid ":func:`filterfalse`"
msgstr ":func:`filterfalse`"

#: ../../library/itertools.rst:55
msgid "elements of seq where pred(elem) is false"
msgstr "pred(elem) が偽になるseqの要素"

#: ../../library/itertools.rst:55
msgid "``filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8``"
msgstr "``filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8``"

#: ../../library/itertools.rst:56
msgid ":func:`groupby`"
msgstr ":func:`groupby`"

#: ../../library/itertools.rst:56
msgid "iterable[, key]"
msgstr "iterable[, key]"

#: ../../library/itertools.rst:56
msgid "sub-iterators grouped by value of key(v)"
msgstr "key(v) の値でグループ化したサブイテレータ"

#: ../../library/itertools.rst:57
msgid ":func:`islice`"
msgstr ":func:`islice`"

#: ../../library/itertools.rst:57
msgid "seq, [start,] stop [, step]"
msgstr "seq, [start,] stop [, step]"

#: ../../library/itertools.rst:57
msgid "elements from seq[start:stop:step]"
msgstr "seq[start:stop:step]"

#: ../../library/itertools.rst:57
msgid "``islice('ABCDEFG', 2, None) --> C D E F G``"
msgstr "``islice('ABCDEFG', 2, None) --> C D E F G``"

#: ../../library/itertools.rst:58
msgid ":func:`starmap`"
msgstr ":func:`starmap`"

#: ../../library/itertools.rst:58
msgid "func, seq"
msgstr "func, seq"

#: ../../library/itertools.rst:58
msgid "func(\\*seq[0]), func(\\*seq[1]), ..."
msgstr "func(\\*seq[0]), func(\\*seq[1]), ..."

#: ../../library/itertools.rst:58
msgid "``starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000``"
msgstr "``starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000``"

#: ../../library/itertools.rst:59
msgid ":func:`takewhile`"
msgstr ":func:`takewhile`"

#: ../../library/itertools.rst:59
msgid "seq[0], seq[1], until pred fails"
msgstr "seq[0], seq[1], pred が偽になるまで"

#: ../../library/itertools.rst:59
msgid "``takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4``"
msgstr "``takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4``"

#: ../../library/itertools.rst:60
msgid ":func:`tee`"
msgstr ":func:`tee`"

#: ../../library/itertools.rst:60
msgid "it, n"
msgstr "it, n"

#: ../../library/itertools.rst:60
msgid "it1, it2, ... itn  splits one iterator into n"
msgstr "it1, it2 , ... itn 一つのイテレータを n 個に分ける"

#: ../../library/itertools.rst:61
msgid ":func:`zip_longest`"
msgstr ":func:`zip_longest`"

#: ../../library/itertools.rst:61
msgid "(p[0], q[0]), (p[1], q[1]), ..."
msgstr "(p[0], q[0]), (p[1], q[1]), ..."

#: ../../library/itertools.rst:61
msgid "``zip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-``"
msgstr "``zip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-``"

#: ../../library/itertools.rst:64
msgid "**Combinatoric iterators:**"
msgstr "**組合せイテレータ:**"

#: ../../library/itertools.rst:69
msgid ":func:`product`"
msgstr ":func:`product`"

#: ../../library/itertools.rst:69
msgid "p, q, ... [repeat=1]"
msgstr "p, q, ... [repeat=1]"

#: ../../library/itertools.rst:69
msgid "cartesian product, equivalent to a nested for-loop"
msgstr "デカルト積、ネストしたforループと等価"

#: ../../library/itertools.rst:70
msgid ":func:`permutations`"
msgstr ":func:`permutations`"

#: ../../library/itertools.rst:70
msgid "p[, r]"
msgstr "p[, r]"

#: ../../library/itertools.rst:70
msgid "r-length tuples, all possible orderings, no repeated elements"
msgstr "長さrのタプル列、重複なしのあらゆる並び"

#: ../../library/itertools.rst:71
msgid ":func:`combinations`"
msgstr ":func:`combinations`"

#: ../../library/itertools.rst:71 ../../library/itertools.rst:72
msgid "p, r"
msgstr "p, r"

#: ../../library/itertools.rst:71
msgid "r-length tuples, in sorted order, no repeated elements"
msgstr "長さrのタプル列、ソートされた順で重複なし"

#: ../../library/itertools.rst:72
msgid ":func:`combinations_with_replacement`"
msgstr ":func:`combinations_with_replacement`"

#: ../../library/itertools.rst:72
msgid "r-length tuples, in sorted order, with repeated elements"
msgstr "長さrのタプル列、ソートされた順で重複あり"

#: ../../library/itertools.rst:76
msgid "Examples"
msgstr "使用例"

#: ../../library/itertools.rst:78
msgid "``product('ABCD', repeat=2)``"
msgstr "``product('ABCD', repeat=2)``"

#: ../../library/itertools.rst:78
msgid "``AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD``"
msgstr "``AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD``"

#: ../../library/itertools.rst:79
msgid "``permutations('ABCD', 2)``"
msgstr "``permutations('ABCD', 2)``"

#: ../../library/itertools.rst:79
msgid "``AB AC AD BA BC BD CA CB CD DA DB DC``"
msgstr "``AB AC AD BA BC BD CA CB CD DA DB DC``"

#: ../../library/itertools.rst:80
msgid "``combinations('ABCD', 2)``"
msgstr "``combinations('ABCD', 2)``"

#: ../../library/itertools.rst:80
msgid "``AB AC AD BC BD CD``"
msgstr "``AB AC AD BC BD CD``"

#: ../../library/itertools.rst:81
msgid "``combinations_with_replacement('ABCD', 2)``"
msgstr "``combinations_with_replacement('ABCD', 2)``"

#: ../../library/itertools.rst:81
msgid "``AA AB AC AD BB BC BD CC CD DD``"
msgstr "``AA AB AC AD BB BC BD CC CD DD``"

#: ../../library/itertools.rst:88
msgid "Itertool functions"
msgstr "Itertool関数"

#: ../../library/itertools.rst:90
msgid ""
"The following module functions all construct and return iterators. Some "
"provide streams of infinite length, so they should only be accessed by "
"functions or loops that truncate the stream."
msgstr ""
"以下の関数は全て、イテレータを作成して返します。無限長のストリームのイテレー"
"タを返す関数もあり、この場合にはストリームを中断するような関数かループ処理か"
"ら使用しなければなりません。"

#: ../../library/itertools.rst:96
msgid ""
"Make an iterator that returns accumulated sums, or accumulated results of "
"other binary functions (specified via the optional *func* argument)."
msgstr ""
"累計や加算ではない (*func* オプション引数で指定される) 2変数関数による累積結"
"果を返すイテレータを作成します。"

#: ../../library/itertools.rst:100
msgid ""
"If *func* is supplied, it should be a function of two arguments. Elements of "
"the input *iterable* may be any type that can be accepted as arguments to "
"*func*. (For example, with the default operation of addition, elements may "
"be any addable type including :class:`~decimal.Decimal` or :class:"
"`~fractions.Fraction`.)"
msgstr ""
"*func* が与えられた場合、2つの引数を取る関数でなければなりません。\n"
"入力 *iterable* の要素は、 *func* が引数として取れる型を持ちます。\n"
"(例えば、デフォルトの演算の加算では、要素は :class:`~decimal.Decimal` や :"
"class:`~fractions.Fraction` を含む、加算ができる型を持ちます。)"

#: ../../library/itertools.rst:107
msgid ""
"Usually, the number of elements output matches the input iterable. However, "
"if the keyword argument *initial* is provided, the accumulation leads off "
"with the *initial* value so that the output has one more element than the "
"input iterable."
msgstr ""

#: ../../library/itertools.rst:112 ../../library/itertools.rst:210
#: ../../library/itertools.rst:259 ../../library/itertools.rst:495
#: ../../library/itertools.rst:574 ../../library/itertools.rst:627
msgid "Roughly equivalent to::"
msgstr "およそ次と等価です::"

#: ../../library/itertools.rst:131
msgid ""
"There are a number of uses for the *func* argument.  It can be set to :func:"
"`min` for a running minimum, :func:`max` for a running maximum, or :func:"
"`operator.mul` for a running product.  Amortization tables can be built by "
"accumulating interest and applying payments.  First-order `recurrence "
"relations <https://en.wikipedia.org/wiki/Recurrence_relation>`_ can be "
"modeled by supplying the initial value in the iterable and using only the "
"accumulated total in *func* argument::"
msgstr ""
"*func* 引数の利用法はたくさんあります。最小値にするために :func:`min` を、最"
"大値にするために :func:`max` を、積にするために :func:`operator.mul` を使うこ"
"とができます。金利を累積し支払いを適用して償還表を作成することもできます。初"
"期値をイテラブルに与えて *func* 引数で累積和を利用するだけで一階の `漸化式 "
"<https://ja.wikipedia.org/wiki/%E6%BC%B8%E5%8C%96%E5%BC%8F>`_ をモデル化でき"
"ます::"

#: ../../library/itertools.rst:161
msgid ""
"See :func:`functools.reduce` for a similar function that returns only the "
"final accumulated value."
msgstr ""
"最終的な累積値だけを返す類似の関数については :func:`functools.reduce` を見て"
"ください。"

#: ../../library/itertools.rst:166
msgid "Added the optional *func* parameter."
msgstr "オプションの *func* 引数が追加されました。"

#: ../../library/itertools.rst:169
msgid "Added the optional *initial* parameter."
msgstr "オプションの *initial* パラメータが追加されました。"

#: ../../library/itertools.rst:174
msgid ""
"Make an iterator that returns elements from the first iterable until it is "
"exhausted, then proceeds to the next iterable, until all of the iterables "
"are exhausted.  Used for treating consecutive sequences as a single "
"sequence. Roughly equivalent to::"
msgstr ""
"先頭の iterable の全要素を返し、次に2番目の iterable の全要素を返し、と全 "
"iterable の要素を返すイテレータを作成します。連続したシーケンスを一つのシーケ"
"ンスとして扱う場合に使用します。およそ次と等価です::"

#: ../../library/itertools.rst:188
msgid ""
"Alternate constructor for :func:`chain`.  Gets chained inputs from a single "
"iterable argument that is evaluated lazily.  Roughly equivalent to::"
msgstr ""
":func:`chain` のためのもう一つのコンストラクタです。遅延評価される iterable "
"引数一つから連鎖した入力を受け取ります。この関数は、以下のコードとほぼ等価で"
"す::"

#: ../../library/itertools.rst:200
msgid "Return *r* length subsequences of elements from the input *iterable*."
msgstr "入力 *iterable* の要素からなる長さ *r* の部分列を返します。"

#: ../../library/itertools.rst:202 ../../library/itertools.rst:251
msgid ""
"The combination tuples are emitted in lexicographic ordering according to "
"the order of the input *iterable*. So, if the input *iterable* is sorted, "
"the combination tuples will be produced in sorted order."
msgstr ""
"組合せ(combination)は入力 *iterable* に応じた辞書式順序で出力されます。した"
"がって、入力 *iterable* がソートされていれば、出力される組合わせ(combination)"
"タプルもソートされた順番で生成されます。"

#: ../../library/itertools.rst:206
msgid ""
"Elements are treated as unique based on their position, not on their value.  "
"So if the input elements are unique, there will be no repeat values in each "
"combination."
msgstr ""
"各要素は場所に基づいて一意に取り扱われ、値にはよりません。入力された要素がバ"
"ラバラなら各組合せの中に重複した値は現れません。"

#: ../../library/itertools.rst:232
msgid ""
"The code for :func:`combinations` can be also expressed as a subsequence of :"
"func:`permutations` after filtering entries where the elements are not in "
"sorted order (according to their position in the input pool)::"
msgstr ""
":func:`combinations` のコードは :func:`permutations` のシーケンスから (入力"
"プールでの位置に応じた順序で) 要素がソートされていないものをフィルターしたよ"
"うにも表現できます::"

#: ../../library/itertools.rst:243
msgid ""
"The number of items returned is ``n! / r! / (n-r)!`` when ``0 <= r <= n`` or "
"zero when ``r > n``."
msgstr ""
"返される要素の数は、``0 <= r <= n`` の場合は、``n! / r! / (n-r)!`` で、``r > "
"n`` の場合は 0 です。"

#: ../../library/itertools.rst:248
msgid ""
"Return *r* length subsequences of elements from the input *iterable* "
"allowing individual elements to be repeated more than once."
msgstr ""
"入力 *iterable* から、それぞれの要素が複数回現れることを許して、長さ *r* の要"
"素の部分列を返します。"

#: ../../library/itertools.rst:255
msgid ""
"Elements are treated as unique based on their position, not on their value.  "
"So if the input elements are unique, the generated combinations will also be "
"unique."
msgstr ""
"要素は、値ではなく位置に基づいて一意に扱われます。ですから、入力の要素が一意"
"であれば、生成された組合せも一意になります。"

#: ../../library/itertools.rst:278
msgid ""
"The code for :func:`combinations_with_replacement` can be also expressed as "
"a subsequence of :func:`product` after filtering entries where the elements "
"are not in sorted order (according to their position in the input pool)::"
msgstr ""
":func:`combinations_with_replacement` のコードは、 :func:`product` の部分列か"
"ら、要素が (入力プールの位置に従って) ソートされた順になっていない項目をフィ"
"ルタリングしたものとしても表せます::"

#: ../../library/itertools.rst:289
msgid ""
"The number of items returned is ``(n+r-1)! / r! / (n-1)!`` when ``n > 0``."
msgstr "返される要素の数は、``n > 0`` のとき ``(n+r-1)! / r! / (n-1)!`` です。"

#: ../../library/itertools.rst:296
msgid ""
"Make an iterator that filters elements from *data* returning only those that "
"have a corresponding element in *selectors* that evaluates to ``True``. "
"Stops when either the *data* or *selectors* iterables has been exhausted. "
"Roughly equivalent to::"
msgstr ""
"*data* の要素から *selectors* の対応する要素が ``True`` と評価されるものだけ"
"をフィルタしたイテレータを作ります。*data* と *selectors* のいずれかが尽きた"
"ときに止まります。およそ次と等価です::"

#: ../../library/itertools.rst:310
msgid ""
"Make an iterator that returns evenly spaced values starting with number "
"*start*. Often used as an argument to :func:`map` to generate consecutive "
"data points. Also, used with :func:`zip` to add sequence numbers.  Roughly "
"equivalent to::"
msgstr ""
"数 *start* で始まる等間隔の値を返すイテレータを作成します。:func:`map` に渡し"
"て連続したデータを生成するのによく使われます。 また、 :func:`zip` に連続した"
"番号を追加するのにも使われます。 およそ次と等価です::"

#: ../../library/itertools.rst:322
msgid ""
"When counting with floating point numbers, better accuracy can sometimes be "
"achieved by substituting multiplicative code such as: ``(start + step * i "
"for i in count())``."
msgstr ""
"浮動小数点数でカウントするときは ``(start + step * i for i in count())`` のよ"
"うに掛け算を使ったコードに置き換えたほうが正確にできることがあります。"

#: ../../library/itertools.rst:326
msgid "Added *step* argument and allowed non-integer arguments."
msgstr "*step* 引数が追加され、非整数の引数が許されるようになりました。"

#: ../../library/itertools.rst:331
msgid ""
"Make an iterator returning elements from the iterable and saving a copy of "
"each. When the iterable is exhausted, return elements from the saved copy.  "
"Repeats indefinitely.  Roughly equivalent to::"
msgstr ""
"iterable から要素を取得し、そのコピーを保存するイテレータを作成します。"
"iterable の全要素を返すと、セーブされたコピーから要素を返します。これを無限に"
"繰り返します。およそ次と等価です::"

#: ../../library/itertools.rst:345
msgid ""
"Note, this member of the toolkit may require significant auxiliary storage "
"(depending on the length of the iterable)."
msgstr ""
":func:`cycle` は大きなメモリ領域を使用します。使用するメモリ量は iterable の"
"大きさに依存します。"

#: ../../library/itertools.rst:351
msgid ""
"Make an iterator that drops elements from the iterable as long as the "
"predicate is true; afterwards, returns every element.  Note, the iterator "
"does not produce *any* output until the predicate first becomes false, so it "
"may have a lengthy start-up time.  Roughly equivalent to::"
msgstr ""
"predicate (述語) が真である間は要素を飛ばし、その後は全ての要素を返すイテレー"
"タを作成します。このイテレータは、predicate が最初に偽になるまで *全く* 要素"
"を返さないため、要素を返し始めるまでに長い時間がかかる場合があります。およそ"
"次と等価です::"

#: ../../library/itertools.rst:368
msgid ""
"Make an iterator that filters elements from iterable returning only those "
"for which the predicate is ``False``. If *predicate* is ``None``, return the "
"items that are false. Roughly equivalent to::"
msgstr ""
"iterable から predicate が ``False`` となる要素だけを返すイテレータを作成しま"
"す。*predicate* が ``None`` の場合、偽の要素だけを返します。およそ次と等価で"
"す::"

#: ../../library/itertools.rst:383
msgid ""
"Make an iterator that returns consecutive keys and groups from the "
"*iterable*. The *key* is a function computing a key value for each element.  "
"If not specified or is ``None``, *key* defaults to an identity function and "
"returns the element unchanged.  Generally, the iterable needs to already be "
"sorted on the same key function."
msgstr ""
"同じキーをもつような要素からなる *iterable* 中のグループに対して、キーとグ"
"ループを返すようなイテレータを作成します。*key* は各要素に対するキー値を計算"
"する関数です。キーを指定しない場合や ``None`` にした場合、*key* 関数のデフォ"
"ルトは恒等関数になり要素をそのまま返します。通常、*iterable* は同じキー関数で"
"ソート済みである必要があります。"

#: ../../library/itertools.rst:389
msgid ""
"The operation of :func:`groupby` is similar to the ``uniq`` filter in Unix.  "
"It generates a break or new group every time the value of the key function "
"changes (which is why it is usually necessary to have sorted the data using "
"the same key function).  That behavior differs from SQL's GROUP BY which "
"aggregates common elements regardless of their input order."
msgstr ""
":func:`groupby` の操作は Unix の ``uniq`` フィルターと似ています。 key 関数の"
"値が変わるたびに休止または新しいグループを生成します (このために通常同じ key "
"関数でソートしておく必要があるのです)。この動作は SQL の入力順に関係なく共通"
"の要素を集約する GROUP BY とは違います。"

#: ../../library/itertools.rst:395
msgid ""
"The returned group is itself an iterator that shares the underlying iterable "
"with :func:`groupby`.  Because the source is shared, when the :func:"
"`groupby` object is advanced, the previous group is no longer visible.  So, "
"if that data is needed later, it should be stored as a list::"
msgstr ""
"返されるグループはそれ自体がイテレータで、 :func:`groupby` と *iterable* を共"
"有しています。もととなる *iterable* を共有しているため、 :func:`groupby` オブ"
"ジェクトの要素取り出しを先に進めると、それ以前の要素であるグループは見えなく"
"なってしまいます。従って、データが後で必要な場合にはリストの形で保存しておく"
"必要があります::"

#: ../../library/itertools.rst:407
msgid ":func:`groupby` is roughly equivalent to::"
msgstr ":func:`groupby` はおよそ次と等価です::"

#: ../../library/itertools.rst:440
msgid ""
"Make an iterator that returns selected elements from the iterable. If "
"*start* is non-zero, then elements from the iterable are skipped until start "
"is reached. Afterward, elements are returned consecutively unless *step* is "
"set higher than one which results in items being skipped.  If *stop* is "
"``None``, then iteration continues until the iterator is exhausted, if at "
"all; otherwise, it stops at the specified position.  Unlike regular "
"slicing, :func:`islice` does not support negative values for *start*, "
"*stop*, or *step*.  Can be used to extract related fields from data where "
"the internal structure has been flattened (for example, a multi-line report "
"may list a name field on every third line).  Roughly equivalent to::"
msgstr ""
"iterable から要素を選択して返すイテレータを作成します。 *start* が0でない場"
"合、iterable の要素は start に達するまでスキップされます。その後、\n"
"要素が順に返されます。\n"
" *step* が1以下なら連続した要素を返し、 1以上なら指定された値分の要素をスキッ"
"プします。\n"
"*stop* が ``None`` の場合、iterable が尽きるまでイテレーションは続きます。\n"
"それ以外の場合、指定された位置でイテレーションは停止します。\n"
"通常のスライスとは異なり、:func:`islice` は負の *start*、*stop*、*step* をサ"
"ポートしません。内部構造が平滑化されたデータから関連するフィールドを抽出する"
"のにに使用できます (たとえば、三行ごとに名前フィールドを列挙している複数行の"
"レポート)。およそ次と等価です::"

#: ../../library/itertools.rst:475
msgid ""
"If *start* is ``None``, then iteration starts at zero. If *step* is "
"``None``, then the step defaults to one."
msgstr ""
"*start* が ``None`` の場合、イテレーションは0から始まります。*step* が "
"``None`` の場合、ステップはデフォルトの1になります。"

#: ../../library/itertools.rst:481
msgid ""
"Return successive *r* length permutations of elements in the *iterable*."
msgstr ""
"*iterable* の要素からなる長さ *r* の順列 (permutation) を連続的に返します。"

#: ../../library/itertools.rst:483
msgid ""
"If *r* is not specified or is ``None``, then *r* defaults to the length of "
"the *iterable* and all possible full-length permutations are generated."
msgstr ""
"*r* が指定されない場合や ``None`` の場合、*r* はデフォルトで *iterable* の長"
"さとなり、可能な最長の順列の全てが生成されます。"

#: ../../library/itertools.rst:487
msgid ""
"The permutation tuples are emitted in lexicographic ordering according to "
"the order of the input *iterable*. So, if the input *iterable* is sorted, "
"the combination tuples will be produced in sorted order."
msgstr ""
"順列(permutation)は入力 *iterable* に応じた辞書式順序で出力されます。したがっ"
"て、入力 *iterable* がソートされていれば、出力される組合わせタプルもソートさ"
"れた順番で生成されます。"

#: ../../library/itertools.rst:491
msgid ""
"Elements are treated as unique based on their position, not on their value.  "
"So if the input elements are unique, there will be no repeat values in each "
"permutation."
msgstr ""
"要素は値ではなく位置に基づいて一意的に扱われます。したがって入力された要素が"
"全て異なっている場合、それぞれの順列に重複した要素が現れないことになります。"

#: ../../library/itertools.rst:522
msgid ""
"The code for :func:`permutations` can be also expressed as a subsequence of :"
"func:`product`, filtered to exclude entries with repeated elements (those "
"from the same position in the input pool)::"
msgstr ""
":func:`permutations` のコードは :func:`product` の列から重複 (それらは入力"
"プールの同じ位置から取られたものです) を除くようフィルタしたものとしても表現"
"できます::"

#: ../../library/itertools.rst:534
msgid ""
"The number of items returned is ``n! / (n-r)!`` when ``0 <= r <= n`` or zero "
"when ``r > n``."
msgstr ""
"返される要素の数は、``0 <= r <= n`` の場合 ``n! / (n-r)!`` で、``r > n`` の場"
"合は 0 です。"

#: ../../library/itertools.rst:539
msgid "Cartesian product of input iterables."
msgstr "入力イテラブルのデカルト積です。"

#: ../../library/itertools.rst:541
msgid ""
"Roughly equivalent to nested for-loops in a generator expression. For "
"example, ``product(A, B)`` returns the same as ``((x,y) for x in A for y in "
"B)``."
msgstr ""
"ジェネレータ式の入れ子になった for ループとおよそ等価です。たとえば "
"``product(A, B)`` は ``((x,y) for x in A for y in B)`` と同じものを返します。"

#: ../../library/itertools.rst:544
msgid ""
"The nested loops cycle like an odometer with the rightmost element advancing "
"on every iteration.  This pattern creates a lexicographic ordering so that "
"if the input's iterables are sorted, the product tuples are emitted in "
"sorted order."
msgstr ""
"入れ子ループは走行距離計と同じように右端の要素がイテレーションごとに更新され"
"ていきます。このパターンは辞書式順序を作り出し、入力のイテレート可能オブジェ"
"クトたちがソートされていれば、直積タプルもソートされた順に出てきます。"

#: ../../library/itertools.rst:549
msgid ""
"To compute the product of an iterable with itself, specify the number of "
"repetitions with the optional *repeat* keyword argument.  For example, "
"``product(A, repeat=4)`` means the same as ``product(A, A, A, A)``."
msgstr ""
"イテラブル自身との直積を計算するためには、オプションの *repeat* キーワード引"
"数に繰り返し回数を指定します。たとえば ``product(A, repeat=4)`` は  "
"``product(A, A, A, A)`` と同じ意味です。"

#: ../../library/itertools.rst:553
msgid ""
"This function is roughly equivalent to the following code, except that the "
"actual implementation does not build up intermediate results in memory::"
msgstr ""
"この関数は以下のコードとおよそ等価ですが、実際の実装ではメモリ中に中間結果を"
"作りません::"

#: ../../library/itertools.rst:569
msgid ""
"Make an iterator that returns *object* over and over again. Runs "
"indefinitely unless the *times* argument is specified. Used as argument to :"
"func:`map` for invariant parameters to the called function.  Also used with :"
"func:`zip` to create an invariant part of a tuple record."
msgstr ""
"繰り返し *object* を返すイテレータを作成します。 *times* 引数を指定しなけれ"
"ば、無限に値を返し続けます。:func:`map` の引数にして、呼び出された関数に同じ"
"引数を渡すのに使います。また :func:`zip` と使って、タプルの変わらない部分を作"
"ります。"

#: ../../library/itertools.rst:585
msgid ""
"A common use for *repeat* is to supply a stream of constant values to *map* "
"or *zip*::"
msgstr ""
"*repeat* は *map* や *zip* に定数のストリームを与えるためによく利用されます::"

#: ../../library/itertools.rst:593
msgid ""
"Make an iterator that computes the function using arguments obtained from "
"the iterable.  Used instead of :func:`map` when argument parameters are "
"already grouped in tuples from a single iterable (the data has been \"pre-"
"zipped\").  The difference between :func:`map` and :func:`starmap` parallels "
"the distinction between ``function(a,b)`` and ``function(*c)``. Roughly "
"equivalent to::"
msgstr ""
"iterable の要素を引数として funtion を計算するイテレータを作成します。 "
"function の引数が一つの iterable からタプルに既にグループ化されている (データ"
"が \"zip済み\") 場合、:func:`map` の代わりに使用します。:func:`map` と :func:"
"`starmap` の違いは ``function(a,b)`` と ``function(*c)`` の差に似ています。お"
"よそ次と等価です::"

#: ../../library/itertools.rst:607
msgid ""
"Make an iterator that returns elements from the iterable as long as the "
"predicate is true.  Roughly equivalent to::"
msgstr ""
"predicate が真である限り iterable から要素を返すイテレータを作成します。およ"
"そ次と等価です::"

#: ../../library/itertools.rst:621
msgid "Return *n* independent iterators from a single iterable."
msgstr "一つの iterable から *n* 個の独立したイテレータを返します。"

#: ../../library/itertools.rst:623
msgid ""
"The following Python code helps explain what *tee* does (although the actual "
"implementation is more complex and uses only a single underlying :abbr:`FIFO "
"(first-in, first-out)` queue)."
msgstr ""
"以下の Python コードは *tee* がすることについての理解を助けるでしょう (ただし"
"実際の実装はより複雑で、下層の :abbr:`FIFO (first-in, first-out)` キューを一"
"つしか使いませんが)。"

#: ../../library/itertools.rst:644
msgid ""
"Once :func:`tee` has made a split, the original *iterable* should not be "
"used anywhere else; otherwise, the *iterable* could get advanced without the "
"tee objects being informed."
msgstr ""
"一度 :func:`tee` でイテレータを分割すると、もとの *iterable* を他で使ってはい"
"けません。さもなければ、 :func:`tee` オブジェクトの知らない間に *iterable* が"
"先の要素に進んでしまうことになります。"

#: ../../library/itertools.rst:648
msgid ""
"``tee`` iterators are not threadsafe. A :exc:`RuntimeError` may be raised "
"when using simultaneously iterators returned by the same :func:`tee` call, "
"even if the original *iterable* is threadsafe."
msgstr ""

#: ../../library/itertools.rst:652
msgid ""
"This itertool may require significant auxiliary storage (depending on how "
"much temporary data needs to be stored). In general, if one iterator uses "
"most or all of the data before another iterator starts, it is faster to use :"
"func:`list` instead of :func:`tee`."
msgstr ""
":func:`tee` はかなり大きなメモリ領域を使用するかもしれません (使用するメモリ"
"量はiterableの大きさに依存します)。一般には、一つのイテレータが他のイテレータ"
"よりも先にほとんどまたは全ての要素を消費するような場合には、 :func:`tee` より"
"も :func:`list` を使った方が高速です。"

#: ../../library/itertools.rst:660
msgid ""
"Make an iterator that aggregates elements from each of the iterables. If the "
"iterables are of uneven length, missing values are filled-in with "
"*fillvalue*. Iteration continues until the longest iterable is exhausted.  "
"Roughly equivalent to::"
msgstr ""
"各 iterable の要素をまとめるイテレータを作成します。iterable の長さが違う場"
"合、足りない値は *fillvalue* で埋められます。最も長い itarable が尽きるまでイ"
"テレーションします。およそ次と等価です::"

#: ../../library/itertools.rst:684
msgid ""
"If one of the iterables is potentially infinite, then the :func:"
"`zip_longest` function should be wrapped with something that limits the "
"number of calls (for example :func:`islice` or :func:`takewhile`).  If not "
"specified, *fillvalue* defaults to ``None``."
msgstr ""
"iterables の1つが無限になりうる場合 :func:`zip_longest` は呼び出し回数を制限"
"するような何かでラップしなければいけません(例えば :func:`islice` or :func:"
"`takewhile`)。 *fillvalue* は指定しない場合のデフォルトは  ``None`` です。"

#: ../../library/itertools.rst:693
msgid "Itertools Recipes"
msgstr "Itertools レシピ"

#: ../../library/itertools.rst:695
msgid ""
"This section shows recipes for creating an extended toolset using the "
"existing itertools as building blocks."
msgstr ""
"この節では、既存の itertools を素材としてツールセットを拡張するためのレシピを"
"示します。"

#: ../../library/itertools.rst:698
msgid ""
"Substantially all of these recipes and many, many others can be installed "
"from the `more-itertools project <https://pypi.org/project/more-itertools/"
">`_ found on the Python Package Index::"
msgstr ""

#: ../../library/itertools.rst:704
msgid ""
"The extended tools offer the same high performance as the underlying "
"toolset. The superior memory performance is kept by processing elements one "
"at a time rather than bringing the whole iterable into memory all at once. "
"Code volume is kept small by linking the tools together in a functional "
"style which helps eliminate temporary variables.  High speed is retained by "
"preferring \"vectorized\" building blocks over the use of for-loops and :"
"term:`generator`\\s which incur interpreter overhead."
msgstr ""
"iterable 全体を一度にメモリ上に置くよりも、要素を一つづつ処理する方がメモリ効"
"率上の有利さを保てます。関数形式のままツールをリンクしてゆくと、コードのサイ"
"ズを減らし、一時変数を減らす助けになります。インタプリタのオーバヘッドをもた"
"らす for ループや :term:`ジェネレータ <generator>` を使わずに、 \"ベクトル化"
"された\" ビルディングブロックを使うと、高速な処理を実現できます。"
