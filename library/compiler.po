# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/compiler.rst:6
msgid "Python compiler package"
msgstr "Python コンパイラパッケージ"

#: ../../library/compiler.rst:8
msgid "The :mod:`compiler` package has been removed in Python 3."
msgstr ":mod:`compiler` モジュールは Python 3 で削除されました。"

#: ../../library/compiler.rst:14
msgid ""
"The Python compiler package is a tool for analyzing Python source code and "
"generating Python bytecode.  The compiler contains libraries to generate an "
"abstract syntax tree from Python source code and to generate Python :term:"
"`bytecode` from the tree."
msgstr ""
"Python コンパイラパッケージは Python のソースコードを分析したり Python バイト"
"コードを生成するためのツールです。compiler は Python のソースコードから抽象的"
"な構文木を生成し、その構文木から Python バイトコード (:term:`bytecode`) を生"
"成するライブラリをそなえています。"

#: ../../library/compiler.rst:19
msgid ""
"The :mod:`compiler` package is a Python source to bytecode translator "
"written in Python.  It uses the built-in parser and standard :mod:`parser` "
"module to generate a concrete syntax tree.  This tree is used to generate an "
"abstract syntax tree (AST) and then Python bytecode."
msgstr ""
":mod:`compiler` パッケージは、Python で書かれた Python ソースコードからバイト"
"コードへの変換プログラムです。これは組み込みの構文解析器と標準ライブラリの :"
"mod:`parser` モジュールを使って、具象構文木を生成します。この構文木から抽象構"
"文木 AST (Abstract Syntax Tree) が生成され、その後 Python バイトコードが得ら"
"れます。"

#: ../../library/compiler.rst:24
msgid ""
"The full functionality of the package duplicates the built-in compiler "
"provided with the Python interpreter.  It is intended to match its behavior "
"almost exactly.  Why implement another compiler that does the same thing?  "
"The package is useful for a variety of purposes.  It can be modified more "
"easily than the built-in compiler.  The AST it generates is useful for "
"analyzing Python source code."
msgstr ""
"このパッケージの機能は、Python インタプリタに内蔵されている組み込みのコンパイ"
"ラがすべて含んでいるものです。これはその機能と正確に同じものになるよう意図し"
"てつくられています。なぜ同じことをするコンパイラをもうひとつ作る必要があるの"
"でしょうか? このパッケージはいろいろな目的に使うことができるからです。これは"
"組み込みのコンパイラよりも簡単に変更できますし、これが生成する AST は Python "
"ソースコードを解析するのに有用です。"

#: ../../library/compiler.rst:31
msgid ""
"This chapter explains how the various components of the :mod:`compiler` "
"package work.  It blends reference material with a tutorial."
msgstr ""
"この章では :mod:`compiler` パッケージのいろいろなコンポーネントがどのように動"
"作するのかを説明します。そのため説明はリファレンスマニュアル的なものと、"
"チュートリアル的な要素がまざったものになっています。"

#: ../../library/compiler.rst:36
msgid "The basic interface"
msgstr "基本的なインターフェイス"

#: ../../library/compiler.rst:43
msgid ""
"The top-level of the package defines four functions.  If you import :mod:"
"`compiler`, you will get these functions and a collection of modules "
"contained in the package."
msgstr ""
"このパッケージのトップレベルでは 4 つの関数が定義されています。 :mod:"
"`compiler` モジュールを import すると、これらの関数およびこのパッケージに含ま"
"れている一連のモジュールが使用可能になります。"

#: ../../library/compiler.rst:50
msgid ""
"Returns an abstract syntax tree for the Python source code in *buf*. The "
"function raises :exc:`SyntaxError` if there is an error in the source code.  "
"The return value is a :class:`compiler.ast.Module` instance that contains "
"the tree."
msgstr ""
"*buf* 中の Python ソースコードから得られた抽象構文木 AST を返します。ソース"
"コード中にエラーがある場合、この関数は :exc:`SyntaxError` を発生させます。返"
"り値は :class:`compiler.ast.Module` インスタンスであり、この中に構文木が格納"
"されています。"

#: ../../library/compiler.rst:57
msgid ""
"Return an abstract syntax tree for the Python source code in the file "
"specified by *path*.  It is equivalent to ``parse(open(path).read())``."
msgstr ""
"*path* で指定されたファイル中の Python ソースコードから得られた抽象構文木 "
"AST を返します。これは ``parse(open(path).read())`` と等価な働きをします。"

#: ../../library/compiler.rst:63
msgid ""
"Do a pre-order walk over the abstract syntax tree *ast*.  Call the "
"appropriate method on the *visitor* instance for each node encountered."
msgstr ""
"*ast* に格納された抽象構文木の各ノードを先行順序 (pre-order) でたどっていきま"
"す。各ノードごとに *visitor* インスタンスの該当するメソッドが呼ばれます。"

#: ../../library/compiler.rst:69
msgid ""
"Compile the string *source*, a Python module, statement or expression, into "
"a code object that can be executed by the exec statement or :func:`eval`. "
"This function is a replacement for the built-in :func:`compile` function."
msgstr ""
"文字列 *source* 、Python モジュール、文あるいは式を :keyword:`exec` 文あるい"
"は :func:`eval` 関数で実行可能なバイトコードオブジェクトにコンパイルします。"
"この関数は組み込みの :func:`compile` 関数を置き換えるものです。"

#: ../../library/compiler.rst:73
msgid "The *filename* will be used for run-time error messages."
msgstr "*filename* は実行時のエラーメッセージに使用されます。"

#: ../../library/compiler.rst:75
msgid ""
"The *mode* must be 'exec' to compile a module, 'single' to compile a single "
"(interactive) statement, or 'eval' to compile an expression."
msgstr ""
"*mode* は、モジュールをコンパイルする場合は 'exec'、 (対話的に実行される) 単"
"一の文をコンパイルする場合は 'single'、式をコンパイルする場合には 'eval' を渡"
"します。"

#: ../../library/compiler.rst:78
msgid ""
"The *flags* and *dont_inherit* arguments affect future-related statements, "
"but are not supported yet."
msgstr ""
"引数 *flags* および *dont_inherit* は将来的に使用される文に影響しますが、いま"
"のところはサポートされていません。"

#: ../../library/compiler.rst:84
msgid "Compiles the file *source* and generates a .pyc file."
msgstr "ファイル *source* をコンパイルし、 :file:`.pyc` ファイルを生成します。"

#: ../../library/compiler.rst:86
msgid ""
"The :mod:`compiler` package contains the following modules: :mod:`ast`, :mod:"
"`consts`, :mod:`future`, :mod:`misc`, :mod:`pyassem`, :mod:`pycodegen`, :mod:"
"`symbols`, :mod:`transformer`, and :mod:`visitor`."
msgstr ""
":mod:`compiler` パッケージは以下のモジュールを含んでいます: :mod:`ast`, :mod:"
"`consts`, :mod:`future`, :mod:`misc`, :mod:`pyassem`, :mod:`pycodegen`, :mod:"
"`symbols`, :mod:`transformer`, そして :mod:`visitor` 。"

#: ../../library/compiler.rst:92
msgid "Limitations"
msgstr "制限"

#: ../../library/compiler.rst:94
msgid ""
"There are some problems with the error checking of the compiler package.  "
"The interpreter detects syntax errors in two distinct phases.  One set of "
"errors is detected by the interpreter's parser, the other set by the "
"compiler.  The compiler package relies on the interpreter's parser, so it "
"get the first phases of error checking for free.  It implements the second "
"phase itself, and that implementation is incomplete.  For example, the "
"compiler package does not raise an error if a name appears more than once in "
"an argument list:  ``def f(x, x): ...``"
msgstr ""
"compiler パッケージにはエラーチェックにいくつか問題が存在します。構文エラーは"
"インタープリタの 2 つの別々のフェーズによって認識されます。ひとつはインタープ"
"リタのパーザによって認識されるもので、もうひとつはコンパイラによって認識され"
"るものです。 compiler パッケージはインタープリタのパーザに依存しているので、"
"最初の段階のエラーチェックは労せずして実現できています。しかしその次の段階"
"は、実装されてはいますが、その実装は不完全です。たとえば compiler パッケージ"
"は引数に同じ名前が 2 度以上出てきていてもエラーを出しません: ``def f(x, "
"x): ...``"

#: ../../library/compiler.rst:103
msgid "A future version of the compiler should fix these problems."
msgstr "compiler の将来のバージョンでは、これらの問題は修正される予定です。"

#: ../../library/compiler.rst:107
msgid "Python Abstract Syntax"
msgstr "Python 抽象構文"

#: ../../library/compiler.rst:109
msgid ""
"The :mod:`compiler.ast` module defines an abstract syntax for Python.  In "
"the abstract syntax tree, each node represents a syntactic construct.  The "
"root of the tree is :class:`Module` object."
msgstr ""
":mod:`compiler.ast` モジュールは Python の抽象構文木 AST を定義します。 AST "
"では各ノードがそれぞれの構文要素をあらわします。木の根は :class:`Module` オブ"
"ジェクトです。"

#: ../../library/compiler.rst:113
msgid ""
"The abstract syntax offers a higher level interface to parsed Python source "
"code.  The :mod:`parser` module and the compiler written in C for the Python "
"interpreter use a concrete syntax tree.  The concrete syntax is tied closely "
"to the grammar description used for the Python parser.  Instead of a single "
"node for a construct, there are often several levels of nested nodes that "
"are introduced by Python's precedence rules."
msgstr ""
"抽象構文木 AST オブジェクトは、パーズされた Python ソースコードに対する高水準"
"のインターフェイスを提供します。 Python インタプリタにおける :mod:`parser` モ"
"ジュールとコンパイラは C で書かれおり、具象構文木を使っています。具象構文木"
"は Python のパーザ中で使われている構文と密接に関連しています。ひとつの要素に"
"単一のノードを割り当てる代わりに、ここでは Python の優先順位に従って、何層に"
"もわたるネストしたノードがしばしば使われています。"

#: ../../library/compiler.rst:120
msgid ""
"The abstract syntax tree is created by the :mod:`compiler.transformer` "
"module. The transformer relies on the built-in Python parser to generate a "
"concrete syntax tree.  It generates an abstract syntax tree from the "
"concrete tree."
msgstr ""
"抽象構文木 AST は、 :mod:`compiler.transformer` (変換器) モジュールによって生"
"成されます。 transformer は組み込みの Python パーザに依存しており、これを使っ"
"て具象構文木をまず生成します。つぎにそこから抽象構文木 AST を生成します。"

#: ../../library/compiler.rst:128
msgid ""
"The :mod:`transformer` module was created by Greg Stein and Bill Tutt for an "
"experimental Python-to-C compiler.  The current version contains a number of "
"modifications and improvements, but the basic form of the abstract syntax "
"and of the transformer are due to Stein and Tutt."
msgstr ""
":mod:`transformer` モジュールは、実験的な Python-to-C コンパイラ用に Greg "
"Stein と Bill Tutt によって作られました。現行のバージョンではいくつもの修正と"
"改良がなされていますが、抽象構文木 AST と transformer の基本的な構造は Stein "
"と Tutt によるものです。"

#: ../../library/compiler.rst:135
msgid "AST Nodes"
msgstr "AST ノード"

#: ../../library/compiler.rst:140
msgid ""
"The :mod:`compiler.ast` module is generated from a text file that describes "
"each node type and its elements.  Each node type is represented as a class "
"that inherits from the abstract base class :class:`compiler.ast.Node` and "
"defines a set of named attributes for child nodes."
msgstr ""
":mod:`compiler.ast` モジュールは、各ノードのタイプとその要素を記述したテキス"
"トファイルからつくられます。各ノードのタイプはクラスとして表現され、そのクラ"
"スは抽象基底クラス :class:`compiler.ast.Node` を継承し子ノードの名前属性を定"
"義しています。"

#: ../../library/compiler.rst:148
msgid ""
"The :class:`Node` instances are created automatically by the parser "
"generator. The recommended interface for specific :class:`Node` instances is "
"to use the public attributes to access child nodes.  A public attribute may "
"be bound to a single node or to a sequence of nodes, depending on the :class:"
"`Node` type.  For example, the :attr:`bases` attribute of the :class:`Class` "
"node, is bound to a list of base class nodes, and the :attr:`doc` attribute "
"is bound to a single node."
msgstr ""
":class:`Node` インスタンスはパーザジェネレータによって自動的に作成されます。"
"ある特定の :class:`Node` インスタンスに対する推奨されるインターフェイスとは、"
"子ノードにアクセスするために public な属性を使うことです。 public な属性は単"
"一のノード、あるいは一連のノードのシーケンスに束縛されているかもしれません"
"が、これは :class:`Node` のタイプによって違います。たとえば :class:`Class` "
"ノードの :attr:`bases` 属性は基底クラスのノードのリストに束縛されており、 :"
"attr:`doc` 属性は単一のノードのみに束縛されている、といった具合です。"

#: ../../library/compiler.rst:156
msgid ""
"Each :class:`Node` instance has a :attr:`lineno` attribute which may be "
"``None``.  XXX Not sure what the rules are for which nodes will have a "
"useful lineno."
msgstr ""
"各 :class:`Node` インスタンスは :attr:`lineno` 属性をもっており、これは "
"``None`` かもしれません。 XXX どういったノードが使用可能な lineno をもってい"
"るかの規則は定かではない。"

#: ../../library/compiler.rst:160
msgid "All :class:`Node` objects offer the following methods:"
msgstr "全ての :class:`Node` オブジェクトは以下のメソッドを提供します:"

#: ../../library/compiler.rst:165
msgid ""
"Returns a flattened list of the child nodes and objects in the order they "
"occur.  Specifically, the order of the nodes is the order in which they "
"appear in the Python grammar.  Not all of the children are :class:`Node` "
"instances.  The names of functions and classes, for example, are plain "
"strings."
msgstr ""
"子ノードと子オブジェクトを、これらが出てきた順で、平らなリスト形式にして返し"
"ます。とくにノードの順序は、 Python 文法中に現れるものと同じになっています。"
"すべての子が :class:`Node` インスタンスなわけではありません。たとえば関数名や"
"クラス名といったものは、ただの文字列として表されます。"

#: ../../library/compiler.rst:174
msgid ""
"Returns a flattened list of the child nodes in the order they occur.  This "
"method is like :meth:`getChildren`, except that it only returns those "
"children that are :class:`Node` instances."
msgstr ""
"子ノードをこれらが出てきた順で平らなリスト形式にして返します。このメソッド"
"は :meth:`getChildren` に似ていますが、 :class:`Node` インスタンスしか返さな"
"いという点で異なっています。"

#: ../../library/compiler.rst:179
msgid ""
"Two examples illustrate the general structure of :class:`Node` classes.  "
"The :keyword:`while` statement is defined by the following grammar "
"production::"
msgstr ""
":class:`Node` クラスの一般的な構造を説明するため、以下に 2 つの例を示しま"
"す。 :keyword:`while` 文は以下のような文法規則により定義されています::"

#: ../../library/compiler.rst:185
msgid ""
"The :class:`While` node has three attributes: :attr:`test`, :attr:`body`, "
"and :attr:`else_`.  (If the natural name for an attribute is also a Python "
"reserved word, it can't be used as an attribute name.  An underscore is "
"appended to the word to make it a legal identifier, hence :attr:`else_` "
"instead of :keyword:`else`.)"
msgstr ""
":class:`While` ノードは 3 つの属性をもっています: :attr:`test`, :attr:`body` "
"および :attr:`else_` です。 (ある属性にふさわしい名前が Python の予約語として"
"すでに使われているとき、その名前を属性名にすることはできません。そのため、こ"
"こでは名前が正規のものとして受けつけられるようにアンダースコアを後につけてあ"
"ります、そのため :attr:`else_` は :keyword:`else` のかわりです。)"

#: ../../library/compiler.rst:191
msgid ""
"The :keyword:`if` statement is more complicated because it can include "
"several tests.   ::"
msgstr ""
":keyword:`if` 文はもっとこみ入っています。なぜならこれはいくつもの条件判定を"
"含む可能性があるからです。 ::"

#: ../../library/compiler.rst:196
msgid ""
"The :class:`If` node only defines two attributes: :attr:`tests` and :attr:"
"`else_`.  The :attr:`tests` attribute is a sequence of test expression, "
"consequent body pairs.  There is one pair for each :keyword:`if`/:keyword:"
"`elif` clause.  The first element of the pair is the test expression.  The "
"second elements is a :class:`Stmt` node that contains the code to execute if "
"the test is true."
msgstr ""
":class:`If` ノードでは、 :attr:`tests` および :attr:`else_` の 2つだけの属性"
"が定義されています。 :attr:`tests` 属性には条件式とその後の動作のタプルがリス"
"ト形式で入っています。おのおのの :keyword:`if` / :keyword:`elif` 節ごとに 1 "
"タプルです。各タプルの最初の要素は条件式で、2 番目の要素はもしその式が真なら"
"ば実行されるコードをふくんだ :class:`Stmt` ノードになっています。"

#: ../../library/compiler.rst:203
msgid ""
"The :meth:`getChildren` method of :class:`If` returns a flat list of child "
"nodes.  If there are three :keyword:`if`/:keyword:`elif` clauses and no :"
"keyword:`else` clause, then :meth:`getChildren` will return a list of six "
"elements: the first test expression, the first :class:`Stmt`, the second "
"text expression, etc."
msgstr ""
":class:`If` の :meth:`getChildren` メソッドは、子ノードの平らなリストを返しま"
"す。 :keyword:`if` / :keyword:`elif` 節が 3 つあって :keyword:`else` 節がない"
"場合なら、 :meth:`getChildren` は 6 要素のリストを返すでしょう: 最初の条件"
"式、最初の :class:`Stmt` 、2 番目の条件式…といった具合です。"

#: ../../library/compiler.rst:209
msgid ""
"The following table lists each of the :class:`Node` subclasses defined in :"
"mod:`compiler.ast` and each of the public attributes available on their "
"instances.  The values of most of the attributes are themselves :class:"
"`Node` instances or sequences of instances.  When the value is something "
"other than an instance, the type is noted in the comment.  The attributes "
"are listed in the order in which they are returned by :meth:`getChildren` "
"and :meth:`getChildNodes`."
msgstr ""
"以下の表は :mod:`compiler.ast` で定義されている :class:`Node` サブクラスと、"
"それらのインスタンスに対して使用可能なパブリックな属性です。ほとんどの属性の"
"値自体は :class:`Node` インスタンスか、インスタンスのリストです。この値がイン"
"スタンス型以外の場合、その型は備考の中で記されています。これら属性の順序"
"は、 :meth:`getChildren` および :meth:`getChildNodes` が返す順です。"

#: ../../library/compiler.rst:218
msgid "Node type"
msgstr "ノード型"

#: ../../library/compiler.rst:218
msgid "Attribute"
msgstr "属性"

#: ../../library/compiler.rst:218
msgid "Value"
msgstr "値"

#: ../../library/compiler.rst:220
msgid ":class:`Add`"
msgstr ":class:`Add`"

#: ../../library/compiler.rst:220 ../../library/compiler.rst:304
#: ../../library/compiler.rst:318 ../../library/compiler.rst:390
#: ../../library/compiler.rst:408 ../../library/compiler.rst:418
#: ../../library/compiler.rst:430 ../../library/compiler.rst:450
#: ../../library/compiler.rst:466
msgid ":attr:`left`"
msgstr ":attr:`left`"

#: ../../library/compiler.rst:220
msgid "left operand"
msgstr "左オペランド"

#: ../../library/compiler.rst:222 ../../library/compiler.rst:306
#: ../../library/compiler.rst:320 ../../library/compiler.rst:392
#: ../../library/compiler.rst:410 ../../library/compiler.rst:420
#: ../../library/compiler.rst:432 ../../library/compiler.rst:452
#: ../../library/compiler.rst:468
msgid ":attr:`right`"
msgstr ":attr:`right`"

#: ../../library/compiler.rst:222
msgid "right operand"
msgstr "右オペランド"

#: ../../library/compiler.rst:224
msgid ":class:`And`"
msgstr ":class:`And`"

#: ../../library/compiler.rst:224 ../../library/compiler.rst:236
#: ../../library/compiler.rst:243 ../../library/compiler.rst:251
#: ../../library/compiler.rst:264 ../../library/compiler.rst:266
#: ../../library/compiler.rst:268 ../../library/compiler.rst:297
#: ../../library/compiler.rst:394 ../../library/compiler.rst:426
#: ../../library/compiler.rst:434 ../../library/compiler.rst:438
#: ../../library/compiler.rst:462 ../../library/compiler.rst:464
#: ../../library/compiler.rst:486
msgid ":attr:`nodes`"
msgstr ":attr:`nodes`"

#: ../../library/compiler.rst:224
msgid "list of operands"
msgstr "オペランドのリスト"

#: ../../library/compiler.rst:226
msgid ":class:`AssAttr`"
msgstr ":class:`AssAttr`"

#: ../../library/compiler.rst:226
msgid "*attribute as target of assignment*"
msgstr "*代入のターゲットとなる属性*"

#: ../../library/compiler.rst:229 ../../library/compiler.rst:254
#: ../../library/compiler.rst:260 ../../library/compiler.rst:262
#: ../../library/compiler.rst:289 ../../library/compiler.rst:302
#: ../../library/compiler.rst:312 ../../library/compiler.rst:360
#: ../../library/compiler.rst:364 ../../library/compiler.rst:376
#: ../../library/compiler.rst:380 ../../library/compiler.rst:396
#: ../../library/compiler.rst:424 ../../library/compiler.rst:454
#: ../../library/compiler.rst:470 ../../library/compiler.rst:488
#: ../../library/compiler.rst:490 ../../library/compiler.rst:498
msgid ":attr:`expr`"
msgstr ":attr:`expr`"

#: ../../library/compiler.rst:229
msgid "expression on the left-hand side of the dot"
msgstr "ドットの左側の式"

#: ../../library/compiler.rst:232 ../../library/compiler.rst:366
msgid ":attr:`attrname`"
msgstr ":attr:`attrname`"

#: ../../library/compiler.rst:232
msgid "the attribute name, a string"
msgstr "属性名, 文字列"

#: ../../library/compiler.rst:234 ../../library/compiler.rst:241
#: ../../library/compiler.rst:343 ../../library/compiler.rst:386
#: ../../library/compiler.rst:456 ../../library/compiler.rst:472
msgid ":attr:`flags`"
msgstr ":attr:`flags`"

#: ../../library/compiler.rst:234 ../../library/compiler.rst:241
msgid "XXX"
msgstr "XXX"

#: ../../library/compiler.rst:236
msgid ":class:`AssList`"
msgstr ":class:`AssList`"

#: ../../library/compiler.rst:236
msgid "list of list elements being assigned to"
msgstr "代入先のリスト要素のリスト"

#: ../../library/compiler.rst:239
msgid ":class:`AssName`"
msgstr ":class:`AssName`"

#: ../../library/compiler.rst:239 ../../library/compiler.rst:280
#: ../../library/compiler.rst:336 ../../library/compiler.rst:378
#: ../../library/compiler.rst:422
msgid ":attr:`name`"
msgstr ":attr:`name`"

#: ../../library/compiler.rst:239
msgid "name being assigned to"
msgstr "代入先の名前"

#: ../../library/compiler.rst:243
msgid ":class:`AssTuple`"
msgstr ":class:`AssTuple`"

#: ../../library/compiler.rst:243
msgid "list of tuple elements being assigned to"
msgstr "代入先のタプル要素のリスト"

#: ../../library/compiler.rst:246
msgid ":class:`Assert`"
msgstr ":class:`Assert`"

#: ../../library/compiler.rst:246 ../../library/compiler.rst:358
#: ../../library/compiler.rst:406 ../../library/compiler.rst:492
msgid ":attr:`test`"
msgstr ":attr:`test`"

#: ../../library/compiler.rst:246
msgid "the expression to be tested"
msgstr "テストされる式"

#: ../../library/compiler.rst:248
msgid ":attr:`fail`"
msgstr ":attr:`fail`"

#: ../../library/compiler.rst:248
msgid "the value of the :exc:`AssertionError`"
msgstr ":exc:`AssertionError` の値"

#: ../../library/compiler.rst:251
msgid ":class:`Assign`"
msgstr ":class:`Assign`"

#: ../../library/compiler.rst:251
msgid "a list of assignment targets, one per equal sign"
msgstr "代入ターゲットのリスト、等号ごとに一つ"

#: ../../library/compiler.rst:254
msgid "the value being assigned"
msgstr "代入される値"

#: ../../library/compiler.rst:256
msgid ":class:`AugAssign`"
msgstr ":class:`AugAssign`"

#: ../../library/compiler.rst:256 ../../library/compiler.rst:272
#: ../../library/compiler.rst:310 ../../library/compiler.rst:415
msgid ":attr:`node`"
msgstr ":attr:`node`"

#: ../../library/compiler.rst:258
msgid ":attr:`op`"
msgstr ":attr:`op`"

#: ../../library/compiler.rst:262
msgid ":class:`Backquote`"
msgstr ":class:`Backquote`"

#: ../../library/compiler.rst:264
msgid ":class:`Bitand`"
msgstr ":class:`Bitand`"

#: ../../library/compiler.rst:266
msgid ":class:`Bitor`"
msgstr ":class:`Bitor`"

#: ../../library/compiler.rst:268
msgid ":class:`Bitxor`"
msgstr ":class:`Bitxor`"

#: ../../library/compiler.rst:270
msgid ":class:`Break`"
msgstr ":class:`Break`"

#: ../../library/compiler.rst:272
msgid ":class:`CallFunc`"
msgstr ":class:`CallFunc`"

#: ../../library/compiler.rst:272
msgid "expression for the callee"
msgstr "呼び出される式"

#: ../../library/compiler.rst:274
msgid ":attr:`args`"
msgstr ":attr:`args`"

#: ../../library/compiler.rst:274
msgid "a list of arguments"
msgstr "引数のリスト"

#: ../../library/compiler.rst:276
msgid ":attr:`star_args`"
msgstr ":attr:`star_args`"

#: ../../library/compiler.rst:276
msgid "the extended \\*-arg value"
msgstr "拡張 \\*-引数の値"

#: ../../library/compiler.rst:278
msgid ":attr:`dstar_args`"
msgstr ":attr:`dstar_args`"

#: ../../library/compiler.rst:278
msgid "the extended \\*\\*-arg value"
msgstr "拡張 \\*\\*-引数の値"

#: ../../library/compiler.rst:280
msgid ":class:`Class`"
msgstr ":class:`Class`"

#: ../../library/compiler.rst:280
msgid "the name of the class, a string"
msgstr "クラス名, 文字列"

#: ../../library/compiler.rst:282
msgid ":attr:`bases`"
msgstr ":attr:`bases`"

#: ../../library/compiler.rst:282
msgid "a list of base classes"
msgstr "基底クラスのリスト"

#: ../../library/compiler.rst:284 ../../library/compiler.rst:345
#: ../../library/compiler.rst:412
msgid ":attr:`doc`"
msgstr ":attr:`doc`"

#: ../../library/compiler.rst:284 ../../library/compiler.rst:345
#: ../../library/compiler.rst:412
msgid "doc string, a string or ``None``"
msgstr "ドキュメント文字列, 文字列または ``None``"

#: ../../library/compiler.rst:287 ../../library/compiler.rst:348
#: ../../library/compiler.rst:350 ../../library/compiler.rst:388
msgid ":attr:`code`"
msgstr ":attr:`code`"

#: ../../library/compiler.rst:287
msgid "the body of the class statement"
msgstr "クラス文の本体"

#: ../../library/compiler.rst:289
msgid ":class:`Compare`"
msgstr ":class:`Compare`"

#: ../../library/compiler.rst:291
msgid ":attr:`ops`"
msgstr ":attr:`ops`"

#: ../../library/compiler.rst:293
msgid ":class:`Const`"
msgstr ":class:`Const`"

#: ../../library/compiler.rst:293 ../../library/compiler.rst:448
#: ../../library/compiler.rst:504
msgid ":attr:`value`"
msgstr ":attr:`value`"

#: ../../library/compiler.rst:295
msgid ":class:`Continue`"
msgstr ":class:`Continue`"

#: ../../library/compiler.rst:297
msgid ":class:`Decorators`"
msgstr ":class:`Decorators`"

#: ../../library/compiler.rst:297
msgid "List of function decorator expressions"
msgstr "関数デコレータ式のリスト"

#: ../../library/compiler.rst:300
msgid ":class:`Dict`"
msgstr ":class:`Dict`"

#: ../../library/compiler.rst:300
msgid ":attr:`items`"
msgstr ":attr:`items`"

#: ../../library/compiler.rst:302
msgid ":class:`Discard`"
msgstr ":class:`Discard`"

#: ../../library/compiler.rst:304
msgid ":class:`Div`"
msgstr ":class:`Div`"

#: ../../library/compiler.rst:308
msgid ":class:`Ellipsis`"
msgstr ":class:`Ellipsis`"

#: ../../library/compiler.rst:310
msgid ":class:`Expression`"
msgstr ":class:`Expression`"

#: ../../library/compiler.rst:312
msgid ":class:`Exec`"
msgstr ":class:`Exec`"

#: ../../library/compiler.rst:314
msgid ":attr:`locals`"
msgstr ":attr:`locals`"

#: ../../library/compiler.rst:316
msgid ":attr:`globals`"
msgstr ":attr:`globals`"

#: ../../library/compiler.rst:318
msgid ":class:`FloorDiv`"
msgstr ":class:`FloorDiv`"

#: ../../library/compiler.rst:322
msgid ":class:`For`"
msgstr ":class:`For`"

#: ../../library/compiler.rst:322 ../../library/compiler.rst:352
#: ../../library/compiler.rst:400
msgid ":attr:`assign`"
msgstr ":attr:`assign`"

#: ../../library/compiler.rst:324 ../../library/compiler.rst:402
msgid ":attr:`list`"
msgstr ":attr:`list`"

#: ../../library/compiler.rst:326 ../../library/compiler.rst:476
#: ../../library/compiler.rst:482 ../../library/compiler.rst:494
#: ../../library/compiler.rst:502
msgid ":attr:`body`"
msgstr ":attr:`body`"

#: ../../library/compiler.rst:328 ../../library/compiler.rst:372
#: ../../library/compiler.rst:480 ../../library/compiler.rst:496
msgid ":attr:`else_`"
msgstr ":attr:`else_`"

#: ../../library/compiler.rst:330
msgid ":class:`From`"
msgstr ":class:`From`"

#: ../../library/compiler.rst:330
msgid ":attr:`modname`"
msgstr ":attr:`modname`"

#: ../../library/compiler.rst:332 ../../library/compiler.rst:368
#: ../../library/compiler.rst:374
msgid ":attr:`names`"
msgstr ":attr:`names`"

#: ../../library/compiler.rst:334
msgid ":class:`Function`"
msgstr ":class:`Function`"

#: ../../library/compiler.rst:334
msgid ":attr:`decorators`"
msgstr ":attr:`decorators`"

#: ../../library/compiler.rst:334
msgid ":class:`Decorators` or ``None``"
msgstr ":class:`Decorators` または ``None``"

#: ../../library/compiler.rst:336
msgid "name used in def, a string"
msgstr "def に使われた名前, 文字列"

#: ../../library/compiler.rst:338 ../../library/compiler.rst:382
msgid ":attr:`argnames`"
msgstr ":attr:`argnames`"

#: ../../library/compiler.rst:338
msgid "list of argument names, as strings"
msgstr "引数名の文字列としてのリスト"

#: ../../library/compiler.rst:341 ../../library/compiler.rst:384
msgid ":attr:`defaults`"
msgstr ":attr:`defaults`"

#: ../../library/compiler.rst:341
msgid "list of default values"
msgstr "デフォルト値のリスト"

#: ../../library/compiler.rst:343
msgid "xxx"
msgstr "xxx"

#: ../../library/compiler.rst:348
msgid "the body of the function"
msgstr "関数の本体"

#: ../../library/compiler.rst:350
msgid ":class:`GenExpr`"
msgstr ":class:`GenExpr`"

#: ../../library/compiler.rst:352
msgid ":class:`GenExprFor`"
msgstr ":class:`GenExprFor`"

#: ../../library/compiler.rst:354
msgid ":attr:`iter`"
msgstr ":attr:`iter`"

#: ../../library/compiler.rst:356 ../../library/compiler.rst:404
msgid ":attr:`ifs`"
msgstr ":attr:`ifs`"

#: ../../library/compiler.rst:358
msgid ":class:`GenExprIf`"
msgstr ":class:`GenExprIf`"

#: ../../library/compiler.rst:360
msgid ":class:`GenExprInner`"
msgstr ":class:`GenExprInner`"

#: ../../library/compiler.rst:362 ../../library/compiler.rst:398
msgid ":attr:`quals`"
msgstr ":attr:`quals`"

#: ../../library/compiler.rst:364
msgid ":class:`Getattr`"
msgstr ":class:`Getattr`"

#: ../../library/compiler.rst:368
msgid ":class:`Global`"
msgstr ":class:`Global`"

#: ../../library/compiler.rst:370
msgid ":class:`If`"
msgstr ":class:`If`"

#: ../../library/compiler.rst:370
msgid ":attr:`tests`"
msgstr ":attr:`tests`"

#: ../../library/compiler.rst:374
msgid ":class:`Import`"
msgstr ":class:`Import`"

#: ../../library/compiler.rst:376
msgid ":class:`Invert`"
msgstr ":class:`Invert`"

#: ../../library/compiler.rst:378
msgid ":class:`Keyword`"
msgstr ":class:`Keyword`"

#: ../../library/compiler.rst:382
msgid ":class:`Lambda`"
msgstr ":class:`Lambda`"

#: ../../library/compiler.rst:390
msgid ":class:`LeftShift`"
msgstr ":class:`LeftShift`"

#: ../../library/compiler.rst:394
msgid ":class:`List`"
msgstr ":class:`List`"

#: ../../library/compiler.rst:396
msgid ":class:`ListComp`"
msgstr ":class:`ListComp`"

#: ../../library/compiler.rst:400
msgid ":class:`ListCompFor`"
msgstr ":class:`ListCompFor`"

#: ../../library/compiler.rst:406
msgid ":class:`ListCompIf`"
msgstr ":class:`ListCompIf`"

#: ../../library/compiler.rst:408
msgid ":class:`Mod`"
msgstr ":class:`Mod`"

#: ../../library/compiler.rst:412
msgid ":class:`Module`"
msgstr ":class:`Module`"

#: ../../library/compiler.rst:415
msgid "body of the module, a :class:`Stmt`"
msgstr "モジュールの本体, :class:`Stmt`"

#: ../../library/compiler.rst:418
msgid ":class:`Mul`"
msgstr ":class:`Mul`"

#: ../../library/compiler.rst:422
msgid ":class:`Name`"
msgstr ":class:`Name`"

#: ../../library/compiler.rst:424
msgid ":class:`Not`"
msgstr ":class:`Not`"

#: ../../library/compiler.rst:426
msgid ":class:`Or`"
msgstr ":class:`Or`"

#: ../../library/compiler.rst:428
msgid ":class:`Pass`"
msgstr ":class:`Pass`"

#: ../../library/compiler.rst:430
msgid ":class:`Power`"
msgstr ":class:`Power`"

#: ../../library/compiler.rst:434
msgid ":class:`Print`"
msgstr ":class:`Print`"

#: ../../library/compiler.rst:436 ../../library/compiler.rst:440
msgid ":attr:`dest`"
msgstr ":attr:`dest`"

#: ../../library/compiler.rst:438
msgid ":class:`Printnl`"
msgstr ":class:`Printnl`"

#: ../../library/compiler.rst:442
msgid ":class:`Raise`"
msgstr ":class:`Raise`"

#: ../../library/compiler.rst:442
msgid ":attr:`expr1`"
msgstr ":attr:`expr1`"

#: ../../library/compiler.rst:444
msgid ":attr:`expr2`"
msgstr ":attr:`expr2`"

#: ../../library/compiler.rst:446
msgid ":attr:`expr3`"
msgstr ":attr:`expr3`"

#: ../../library/compiler.rst:448
msgid ":class:`Return`"
msgstr ":class:`Return`"

#: ../../library/compiler.rst:450
msgid ":class:`RightShift`"
msgstr ":class:`RightShift`"

#: ../../library/compiler.rst:454
msgid ":class:`Slice`"
msgstr ":class:`Slice`"

#: ../../library/compiler.rst:458
msgid ":attr:`lower`"
msgstr ":attr:`lower`"

#: ../../library/compiler.rst:460
msgid ":attr:`upper`"
msgstr ":attr:`upper`"

#: ../../library/compiler.rst:462
msgid ":class:`Sliceobj`"
msgstr ":class:`Sliceobj`"

#: ../../library/compiler.rst:462
msgid "list of statements"
msgstr "文のリスト"

#: ../../library/compiler.rst:464
msgid ":class:`Stmt`"
msgstr ":class:`Stmt`"

#: ../../library/compiler.rst:466
msgid ":class:`Sub`"
msgstr ":class:`Sub`"

#: ../../library/compiler.rst:470
msgid ":class:`Subscript`"
msgstr ":class:`Subscript`"

#: ../../library/compiler.rst:474
msgid ":attr:`subs`"
msgstr ":attr:`subs`"

#: ../../library/compiler.rst:476
msgid ":class:`TryExcept`"
msgstr ":class:`TryExcept`"

#: ../../library/compiler.rst:478
msgid ":attr:`handlers`"
msgstr ":attr:`handlers`"

#: ../../library/compiler.rst:482
msgid ":class:`TryFinally`"
msgstr ":class:`TryFinally`"

#: ../../library/compiler.rst:484
msgid ":attr:`final`"
msgstr ":attr:`final`"

#: ../../library/compiler.rst:486
msgid ":class:`Tuple`"
msgstr ":class:`Tuple`"

#: ../../library/compiler.rst:488
msgid ":class:`UnaryAdd`"
msgstr ":class:`UnaryAdd`"

#: ../../library/compiler.rst:490
msgid ":class:`UnarySub`"
msgstr ":class:`UnarySub`"

#: ../../library/compiler.rst:492
msgid ":class:`While`"
msgstr ":class:`While`"

#: ../../library/compiler.rst:498
msgid ":class:`With`"
msgstr ":class:`With`"

#: ../../library/compiler.rst:500
msgid ":attr:`vars`"
msgstr ":attr:`vars`"

#: ../../library/compiler.rst:504
msgid ":class:`Yield`"
msgstr ":class:`Yield`"

#: ../../library/compiler.rst:509
msgid "Assignment nodes"
msgstr "代入ノード"

#: ../../library/compiler.rst:511
msgid ""
"There is a collection of nodes used to represent assignments.  Each "
"assignment statement in the source code becomes a single :class:`Assign` "
"node in the AST. The :attr:`nodes` attribute is a list that contains a node "
"for each assignment target.  This is necessary because assignment can be "
"chained, e.g. ``a = b = 2``. Each :class:`Node` in the list will be one of "
"the following classes: :class:`AssAttr`, :class:`AssList`, :class:`AssName`, "
"or :class:`AssTuple`."
msgstr ""
"代入をあらわすのに使われる一群のノードが存在します。ソースコードにおけるそれ"
"ぞれの代入文は、抽象構文木 AST では単一のノード :class:`Assign` になっていま"
"す。 :attr:`nodes` 属性は各代入の対象にたいするノードのリストです。これが必要"
"なのは、たとえば ``a = b = 2`` のように代入が連鎖的に起こるためです。このリス"
"ト中における各 :class:`Node` は、次のうちどれかのクラスになります: :class:"
"`AssAttr`, :class:`AssList`, :class:`AssName` または :class:`AssTuple` 。"

#: ../../library/compiler.rst:518
msgid ""
"Each target assignment node will describe the kind of object being assigned "
"to: :class:`AssName` for a simple name, e.g. ``a = 1``. :class:`AssAttr` for "
"an attribute assigned, e.g. ``a.x = 1``. :class:`AssList` and :class:"
"`AssTuple` for list and tuple expansion respectively, e.g. ``a, b, c = "
"a_tuple``."
msgstr ""
"代入対象の各ノードには代入されるオブジェクトの種類が記録されています。 :"
"class:`AssName` は ``a = 1`` などの単純な変数名、 :class:`AssAttr` は ``a.x "
"= 1`` などの属性に対する代入、 :class:`AssList` および :class:`AssTuple` はそ"
"れぞれ、 ``a, b, c = a_tuple`` などのようなリストとタプルの展開をあらわしま"
"す。"

#: ../../library/compiler.rst:523
msgid ""
"The target assignment nodes also have a :attr:`flags` attribute that "
"indicates whether the node is being used for assignment or in a delete "
"statement.  The :class:`AssName` is also used to represent a delete "
"statement, e.g. :class:`del x`."
msgstr ""
"代入対象ノードはまた、そのノードが代入で使われるのか、それとも削除文で使われ"
"るのかをあらわす属性 :attr:`flags` も持っています。 :class:`AssName` は "
"``del x`` などのような削除文をあらわすのにも使われます。"

#: ../../library/compiler.rst:528
msgid ""
"When an expression contains several attribute references, an assignment or "
"delete statement will contain only one :class:`AssAttr` node -- for the "
"final attribute reference.  The other attribute references will be "
"represented as :class:`Getattr` nodes in the :attr:`expr` attribute of the :"
"class:`AssAttr` instance."
msgstr ""
"ある式がいくつかの属性への参照をふくんでいるときは、代入あるいは削除文はただ"
"ひとつだけの :class:`AssAttr` ノードをもちます -- 最終的な属性への参照として"
"です。それ以外の属性への参照は :class:`AssAttr` インスタンスの :attr:`expr` "
"属性にある :class:`Getattr` ノードによってあらわされます。"

#: ../../library/compiler.rst:536
msgid "Examples"
msgstr "例"

#: ../../library/compiler.rst:538
msgid ""
"This section shows several simple examples of ASTs for Python source code.  "
"The examples demonstrate how to use the :func:`parse` function, what the "
"repr of an AST looks like, and how to access attributes of an AST node."
msgstr ""
"この節では、Python ソースコードに対する抽象構文木 AST のかんたんな例をいくつ"
"かご紹介します。これらの例では :func:`parse` 関数をどうやって使うか、AST の "
"repr 表現はどんなふうになっているか、そしてある AST ノードの属性にアクセスす"
"るにはどうするかを説明します。"

#: ../../library/compiler.rst:542
msgid ""
"The first module defines a single function.  Assume it is stored in :file:"
"`doublelib.py`.  ::"
msgstr ""
"最初のモジュールでは単一の関数を定義しています。かりにこれは :file:`/tmp/"
"doublelib.py` に格納されていると仮定しましょう。 ::"

#: ../../library/compiler.rst:554
msgid ""
"In the interactive interpreter session below, I have reformatted the long "
"AST reprs for readability.  The AST reprs use unqualified class names.  If "
"you want to create an instance from a repr, you must import the class names "
"from the :mod:`compiler.ast` module. ::"
msgstr ""
"以下の対話的インタプリタのセッションでは、見やすさのため長い AST の repr を整"
"形しなおしてあります。 AST の repr では qualify されていないクラス名が使われ"
"ています。 repr 表現からインスタンスを作成したい場合は、 :mod:`compiler.ast` "
"モジュールからそれらのクラス名を import しなければなりません。 ::"

#: ../../library/compiler.rst:588
msgid "Using Visitors to Walk ASTs"
msgstr "Visitor を使って AST をわたり歩く"

#: ../../library/compiler.rst:593
msgid ""
"The visitor pattern is ...  The :mod:`compiler` package uses a variant on "
"the visitor pattern that takes advantage of Python's introspection features "
"to eliminate the need for much of the visitor's infrastructure."
msgstr ""
"visitor パターンは… :mod:`compiler` パッケージは、Python のイントロスペクショ"
"ン機能を利用して visitor のために必要な大部分のインフラを省略した、visitor パ"
"ターンの変種を使っています。"

#: ../../library/compiler.rst:597
msgid ""
"The classes being visited do not need to be programmed to accept visitors.  "
"The visitor need only define visit methods for classes it is specifically "
"interested in; a default visit method can handle the rest."
msgstr ""
"visit されるクラスは、visitor を受け入れるようにプログラムされている必要はあ"
"りません。 visitor が必要なのはただそれがとくに興味あるクラスに対して visit "
"メソッドを定義することだけです。それ以外はデフォルトの visit メソッドが処理し"
"ます。"

#: ../../library/compiler.rst:601
msgid "XXX The magic :meth:`visit` method for visitors."
msgstr "XXX visitor 用の魔法の :meth:`visit` メソッド。"

#: ../../library/compiler.rst:609
msgid ""
"The :class:`ASTVisitor` is responsible for walking over the tree in the "
"correct order.  A walk begins with a call to :meth:`preorder`.  For each "
"node, it checks the *visitor* argument to :meth:`preorder` for a method "
"named 'visitNodeType,' where NodeType is the name of the node's class, e.g. "
"for a :class:`While` node a :meth:`visitWhile` would be called.  If the "
"method exists, it is called with the node as its first argument."
msgstr ""
":class:`ASTVisitor` は構文木を正しい順序でわたり歩くようにします。それぞれの"
"ノードはまず :meth:`preorder` の呼び出しではじまります。各ノードに対して、こ"
"れは 'visitNodeType' という名前のメソッドに対する :meth:`preorder` 関数への "
"*visitor* 引数をチェックします。ここで NodeType の部分はそのノードのクラス名"
"です。たとえば :class:`While` ノードなら、 :meth:`visitWhile` が呼ばれるわけ"
"です。もしそのメソッドが存在している場合、それはそのノードを第一引数として呼"
"び出されます。"

#: ../../library/compiler.rst:616
msgid ""
"The visitor method for a particular node type can control how child nodes "
"are visited during the walk.  The :class:`ASTVisitor` modifies the visitor "
"argument by adding a visit method to the visitor; this method can be used to "
"visit a particular child node.  If no visitor is found for a particular node "
"type, the :meth:`default` method is called."
msgstr ""
"ある特定のノード型に対する visitor メソッドでは、その子ノードをどのようにわた"
"り歩くかが制御できます。 :class:`ASTVisitor` は visitor に visit メソッドを追"
"加することで、その visitor 引数を修正します; このメソッドは特定の子ノードを訪"
"問するのに使われるでしょう。特定のノード型に対する visitor が存在しない場"
"合、 :meth:`default` メソッドが呼び出されます。"

#: ../../library/compiler.rst:622
msgid ":class:`ASTVisitor` objects have the following methods:"
msgstr ":class:`ASTVisitor` オブジェクトには以下のようなメソッドがあります:"

#: ../../library/compiler.rst:624
msgid "XXX describe extra arguments"
msgstr "XXX 追加の引数を記述"

#: ../../library/compiler.rst:637
msgid "Bytecode Generation"
msgstr "バイトコード生成"

#: ../../library/compiler.rst:639
msgid ""
"The code generator is a visitor that emits bytecodes.  Each visit method can "
"call the :meth:`emit` method to emit a new bytecode.  The basic code "
"generator is specialized for modules, classes, and functions.  An assembler "
"converts that emitted instructions to the low-level bytecode format.  It "
"handles things like generation of constant lists of code objects and "
"calculation of jump offsets."
msgstr ""
"バイトコード生成器はバイトコードを出力する visitor です。 visit メソッドが呼"
"ばれるたびにこれは :meth:`emit` メソッドを呼び出し、バイトコードを出力しま"
"す。基本的なバイトコード生成器はモジュール、クラス、および関数のために特殊化"
"されます。アセンブラがこれらの出力された命令を低レベルのバイトコードに変換し"
"ます。これはコードオブジェクトからなる定数のリスト生成や、分岐のオフセット計"
"算といった処理をおこないます。"
