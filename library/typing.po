# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`typing` --- 型ヒントのサポート"

#: ../../library/typing.rst:10
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**ソースコード:** :source:`Lib/typing.py`"

#: ../../library/typing.rst:14
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as type checkers, IDEs, linters, "
"etc."
msgstr ""
"Python ランタイムは、関数や変数の型アノテーションを強制しません。型アノテー"
"ションは、型チェッカー、IDE、linterなどのサードパーティーツールで使われます。"

#: ../../library/typing.rst:20
msgid ""
"This module provides runtime support for type hints. The most fundamental "
"support consists of the types :data:`Any`, :data:`Union`, :data:`Callable`, :"
"class:`TypeVar`, and :class:`Generic`. For a full specification, please see :"
"pep:`484`. For a simplified introduction to type hints, see :pep:`483`."
msgstr ""
"このモジュールは型のランタイムへのサポートを提供します。最も基本的な型として:"
"data:`Any`、:data:`Union`、:data:`Callable`:class:`TypeVar`、:class:"
"`Generic` が存在します。詳細な仕様は:pep:`484`に記載があります。型ヒントの導"
"入についての説明は:pep:`483`に記載があります。"

#: ../../library/typing.rst:26
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr ""
"以下の関数は文字列を受け取って文字列を返す関数で、次のようにアノテーションが"
"つけられます::"

#: ../../library/typing.rst:31
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as "
"arguments."
msgstr ""
"関数 ``greeting`` で、実引数 ``name`` の型は :class:`str` であり、返り値の型"
"は :class:`str` であることが期待されます。サブタイプも実引数として許容されま"
"す。"

#: ../../library/typing.rst:35
msgid ""
"New features are frequently added to the ``typing`` module. The "
"`typing_extensions <https://pypi.org/project/typing-extensions/>`_ package "
"provides backports of these new features to older versions of Python."
msgstr ""
"``typing`` モジュールには新しい機能が頻繁に追加されています。 "
"`typing_extensions <https://pypi.org/project/typing-extensions/>`_ パッケージ"
"は、古いバージョンの Python への新しい機能のバックポートを提供しています。"

#: ../../library/typing.rst:41
msgid ""
"The documentation at https://typing.readthedocs.io/ serves as useful "
"reference for type system features, useful typing related tools and typing "
"best practices."
msgstr ""

#: ../../library/typing.rst:47
msgid "Relevant PEPs"
msgstr "関連する PEP"

#: ../../library/typing.rst:49
msgid ""
"Since the initial introduction of type hints in :pep:`484` and :pep:`483`, a "
"number of PEPs have modified and enhanced Python's framework for type "
"annotations. These include:"
msgstr ""

#: ../../library/typing.rst:54
msgid ":pep:`526`: Syntax for Variable Annotations"
msgstr ":pep:`526`: Syntax for Variable Annotations"

#: ../../library/typing.rst:54
msgid ""
"*Introducing* syntax for annotating variables outside of function "
"definitions, and :data:`ClassVar`"
msgstr ""
"関数定義の外の変数と :data:`ClassVar` のための型アノテーションの構文の導入"

#: ../../library/typing.rst:57
msgid ":pep:`544`: Protocols: Structural subtyping (static duck typing)"
msgstr ":pep:`544`: Protocols: Structural subtyping (static duck typing)"

#: ../../library/typing.rst:57
msgid ""
"*Introducing* :class:`Protocol` and the :func:"
"`@runtime_checkable<runtime_checkable>` decorator"
msgstr ""
":class:`Protocol` と、 :func:`@runtime_checkable<runtime_checkable>` のデコ"
"レーターの導入"

#: ../../library/typing.rst:60
msgid ":pep:`585`: Type Hinting Generics In Standard Collections"
msgstr ":pep:`585`: Type Hinting Generics In Standard Collections"

#: ../../library/typing.rst:60
msgid ""
"*Introducing* :class:`types.GenericAlias` and the ability to use standard "
"library classes as :ref:`generic types<types-genericalias>`"
msgstr ""
":class:`types.GenericAlias` と、標準ライブラリのクラスを :ref:`ジェネリック型"
"<types-genericalias>` として利用する機能の導入"

#: ../../library/typing.rst:62
msgid ":pep:`586`: Literal Types"
msgstr ":pep:`586`: Literal Types"

#: ../../library/typing.rst:63
msgid "*Introducing* :data:`Literal`"
msgstr ":data:`Literal` の導入"

#: ../../library/typing.rst:64
msgid ""
":pep:`589`: TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys"
msgstr ""
":pep:`589`: TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys"

#: ../../library/typing.rst:65
msgid "*Introducing* :class:`TypedDict`"
msgstr ":class:`TypedDict` の導入"

#: ../../library/typing.rst:66
msgid ":pep:`591`: Adding a final qualifier to typing"
msgstr ":pep:`591`: Adding a final qualifier to typing"

#: ../../library/typing.rst:67
msgid "*Introducing* :data:`Final` and the :func:`@final<final>` decorator"
msgstr ":data:`Final` と、 :func:`@final<final>` デコレータの導入"

#: ../../library/typing.rst:68
msgid ":pep:`593`: Flexible function and variable annotations"
msgstr ":pep:`593`: Flexible function and variable annotations"

#: ../../library/typing.rst:69
msgid "*Introducing* :data:`Annotated`"
msgstr ":data:`Annotated` の導入"

#: ../../library/typing.rst:72
msgid ":pep:`604`: Allow writing union types as ``X | Y``"
msgstr ":pep:`604`: Allow writing union types as ``X | Y``"

#: ../../library/typing.rst:71
msgid ""
"*Introducing* :data:`types.UnionType` and the ability to use the binary-or "
"operator ``|`` to signify a :ref:`union of types<types-union>`"
msgstr ""
":data:`types.UnionType` と、二項論理和演算子 ``|`` で :ref:`ユニオン型<types-"
"union>` を表す機能の導入"

#: ../../library/typing.rst:74
msgid ":pep:`612`: Parameter Specification Variables"
msgstr ":pep:`612`: Parameter Specification Variables"

#: ../../library/typing.rst:75
msgid "*Introducing* :class:`ParamSpec` and :data:`Concatenate`"
msgstr ":class:`ParamSpec` と :data:`Concatenate` の導入"

#: ../../library/typing.rst:76
msgid ":pep:`613`: Explicit Type Aliases"
msgstr ":pep:`613`: Explicit Type Aliases"

#: ../../library/typing.rst:77
msgid "*Introducing* :data:`TypeAlias`"
msgstr ":data:`TypeAlias` の導入"

#: ../../library/typing.rst:79
msgid ":pep:`647`: User-Defined Type Guards"
msgstr ":pep:`647`: User-Defined Type Guards"

#: ../../library/typing.rst:79
msgid "*Introducing* :data:`TypeGuard`"
msgstr ":data:`TypeGuard` の導入"

#: ../../library/typing.rst:84
msgid "Type aliases"
msgstr "型エイリアス"

#: ../../library/typing.rst:86
msgid ""
"A type alias is defined by assigning the type to the alias. In this example, "
"``Vector`` and ``list[float]`` will be treated as interchangeable synonyms::"
msgstr ""
"型エイリアスは、型をエイリアスに割り当てて定義されます。\n"
"この例では、``Vector`` と ``list[float]`` が置き換え可能な同義語として扱われ"
"ます::"

#: ../../library/typing.rst:97
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr "型エイリアスは複雑な型シグネチャを単純化するのに有用です。例えば::"

#: ../../library/typing.rst:115
msgid ""
"Note that ``None`` as a type hint is a special case and is replaced by "
"``type(None)``."
msgstr ""
"型ヒントとしての ``None`` は特別なケースであり、 ``type(None)`` によって置き"
"換えられます。"

#: ../../library/typing.rst:121
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:123
msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr "異なる型を作るためには :class:`NewType` ヘルパークラスを使います::"

#: ../../library/typing.rst:130
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""
"静的型検査器は新しい型を元々の型のサブクラスのように扱います。この振る舞いは"
"論理的な誤りを見つける手助けとして役に立ちます。"

#: ../../library/typing.rst:142
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"``UserId`` 型の変数も ``int`` の全ての演算が行えますが、その結果は常に "
"``int`` 型になります。\n"
"この振る舞いにより、 ``int`` が期待されるところに ``UserId`` を渡せますが、不"
"正な方法で ``UserId`` を作ってしまうことを防ぎます。"

#: ../../library/typing.rst:150
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""
"これらのチェックは静的型検査器のみによって強制されるということに注意してくだ"
"さい。\n"
"実行時に ``Derived = NewType('Derived', Base)`` という文は渡された仮引数をた"
"だちに返す ``Derived`` callable を作ります。\n"
"つまり ``Derived(some_value)`` という式は新しいクラスを作ることはなく、通常の"
"関数呼び出しより多くのオーバーヘッドがないということを意味します。"

#: ../../library/typing.rst:156
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""
"より正確に言うと、式 ``some_value is Derived(some_value)`` は実行時に常に真を"
"返します。"

#: ../../library/typing.rst:159
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr "``Derived`` のサブタイプを作成することはできません"

#: ../../library/typing.rst:168
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""
"しかし、 'derived' である ``NewType`` をもとにした :class:`NewType` は作るこ"
"とが出来ます::"

#: ../../library/typing.rst:176
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "そして ``ProUserId`` に対する型検査は期待通りに動作します。"

#: ../../library/typing.rst:178
msgid "See :pep:`484` for more details."
msgstr "より詳しくは :pep:`484` を参照してください。"

#: ../../library/typing.rst:182
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``Alias = Original`` will make the static type checker "
"treat ``Alias`` as being *exactly equivalent* to ``Original`` in all cases. "
"This is useful when you want to simplify complex type signatures."
msgstr ""
"型エイリアスの使用は二つの型が互いに *等価* だと宣言している、ということを思"
"い出してください。 ``Alias = Original`` とすると、静的型検査器は ``Alias`` を"
"すべての場合において ``Original`` と *完全に等価* なものとして扱います。これ"
"は複雑な型シグネチャを単純化したい時に有用です。"

#: ../../library/typing.rst:187
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"これに対し、 ``NewType`` はある型をもう一方の型の *サブタイプ* として宣言しま"
"す。 ``Derived = NewType('Derived', Original)`` とすると静的型検査器は "
"``Derived`` を ``Original`` の *サブクラス* として扱います。つまり "
"``Original`` 型の値は ``Derived`` 型の値が期待される場所で使うことが出来ない"
"ということです。これは論理的な誤りを最小の実行時のコストで防ぎたい時に有用で"
"す。"

#: ../../library/typing.rst:196
msgid ""
"``NewType`` is now a class rather than a function.  There is some additional "
"runtime cost when calling ``NewType`` over a regular function.  However, "
"this cost will be reduced in 3.11.0."
msgstr ""

#: ../../library/typing.rst:203
msgid "Callable"
msgstr "呼び出し可能オブジェクト"

#: ../../library/typing.rst:205
msgid ""
"Frameworks expecting callback functions of specific signatures might be type "
"hinted using ``Callable[[Arg1Type, Arg2Type], ReturnType]``."
msgstr ""
"特定のシグネチャを持つコールバック関数を要求されるフレームワークでは、 "
"``Callable[[Arg1Type, Arg2Type], ReturnType]`` を使って型ヒントを付けます。"

#: ../../library/typing.rst:208 ../../library/typing.rst:1023
#: ../../library/typing.rst:2266
msgid "For example::"
msgstr "例えば::"

#: ../../library/typing.rst:223
msgid ""
"It is possible to declare the return type of a callable without specifying "
"the call signature by substituting a literal ellipsis for the list of "
"arguments in the type hint: ``Callable[..., ReturnType]``."
msgstr ""
"型ヒントの実引数の型を ellipsis で置き換えることで呼び出しシグニチャを指定せ"
"ずに callable の戻り値の型を宣言することができます: ``Callable[..., "
"ReturnType]``。"

#: ../../library/typing.rst:227 ../../library/typing.rst:714
msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form "
"``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""
"callable が別の callable を引数に取る場合は、:class:`ParamSpec` を使えば両者"
"のパラメータ引数の依存関係を表現することができます。\n"
"さらに、ある callable が別の callable から引数を追加したり削除したりする場合"
"は、 :data:`Concatenate` 演算子を使うことで表現できます。\n"
"その場合、callable の型は ``Callable[ParamSpecVariable, ReturnType]`` と "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` という形になります。"

#: ../../library/typing.rst:235 ../../library/typing.rst:726
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See :"
"pep:`612` for more details."
msgstr ""
"``Callable`` は :class:`ParamSpec` と :data:`Concatenate` をサポートしまし"
"た。詳細は :pep:`612` を参照してください。"

#: ../../library/typing.rst:240
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provides "
"examples of usage in ``Callable``."
msgstr ""
":class:`ParamSpec` と :class:`Concatenate` のドキュメントに、``Callable`` で"
"の使用例が記載されています。"

#: ../../library/typing.rst:246
msgid "Generics"
msgstr "ジェネリクス"

#: ../../library/typing.rst:248
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, abstract base classes have been extended to "
"support subscription to denote expected types for container elements."
msgstr ""
"コンテナ内のオブジェクトについての型情報は一般的な方法では静的に推論できない"
"ため、抽象基底クラスを継承したクラスが実装され、期待されるコンテナの要素の型"
"を示すために添字表記をサポートするようになりました。"

#: ../../library/typing.rst:259
msgid ""
"Generics can be parameterized by using a factory available in typing called :"
"class:`TypeVar`."
msgstr ""
"ジェネリクスは、 typing にある :class:`TypeVar` と呼ばれるファクトリを使って"
"パラメータ化することができます。"

#: ../../library/typing.rst:275
msgid "User-defined generic types"
msgstr "ユーザー定義のジェネリック型"

#: ../../library/typing.rst:277
msgid "A user-defined class can be defined as a generic class."
msgstr "ユーザー定義のクラスを、ジェネリッククラスとして定義できます。"

#: ../../library/typing.rst:303
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes a "
"single type parameter ``T`` . This also makes ``T`` valid as a type within "
"the class body."
msgstr ""
"``Generic[T]`` を基底クラスにすることで、 ``LoggedVar`` クラスが 1 つの型引"
"数 ``T`` をとる、と定義できます。\n"
"この定義により、クラスの本体の中でも ``T`` が型として有効になります。"

#: ../../library/typing.rst:307
msgid ""
"The :class:`Generic` base class defines :meth:`~object.__class_getitem__` so "
"that ``LoggedVar[T]`` is valid as a type::"
msgstr ""
":class:`Generic` 基底クラスは ``LoggedVar[T]`` が型として有効になるように :"
"meth:`~object.__class_getitem__` メソッドを定義しています::"

#: ../../library/typing.rst:316
msgid ""
"A generic type can have any number of type variables. All varieties of :"
"class:`TypeVar` are permissible as parameters for a generic type::"
msgstr ""

#: ../../library/typing.rst:328
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""
":class:`Generic` の引数のそれぞれの型変数は別のものでなければなりません。この"
"ため次のクラス定義は無効です::"

#: ../../library/typing.rst:339
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr ":class:`Generic` を用いて多重継承が可能です::"

#: ../../library/typing.rst:349
msgid ""
"When inheriting from generic classes, some type variables could be fixed::"
msgstr ""
"ジェネリッククラスを継承するとき、いくつかの型変数を固定することが出来ます::"

#: ../../library/typing.rst:359
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "この場合では ``MyDict`` は仮引数 ``T`` を 1 つとります。"

#: ../../library/typing.rst:361
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``::"
msgstr ""
"型引数を指定せずにジェネリッククラスを使う場合、それぞれの型引数に :data:"
"`Any` を与えられたものとして扱います。\n"
"次の例では、``MyIterable`` はジェネリックではありませんが ``Iterable[Any]`` "
"を暗黙的に継承しています::"

#: ../../library/typing.rst:369
msgid "User defined generic type aliases are also supported. Examples::"
msgstr "ユーザ定義のジェネリック型エイリアスもサポートされています。例::"

#: ../../library/typing.rst:386
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` にあった独自のメタクラスは無くなりました。"

#: ../../library/typing.rst:389
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``Generic[P]``.  The behavior "
"is consistent with type variables' described above as parameter "
"specification variables are treated by the typing module as a specialized "
"type variable.  The one exception to this is that a list of types can be "
"used to substitute a :class:`ParamSpec`::"
msgstr ""

#: ../../library/typing.rst:406
msgid ""
"Furthermore, a generic with only one parameter specification variable will "
"accept parameter lists in the forms ``X[[Type1, Type2, ...]]`` and also "
"``X[Type1, Type2, ...]`` for aesthetic reasons.  Internally, the latter is "
"converted to the former, so the following are equivalent::"
msgstr ""

#: ../../library/typing.rst:418
msgid ""
"Do note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""

#: ../../library/typing.rst:422
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See :"
"class:`ParamSpec` and :pep:`612` for more details."
msgstr ""

#: ../../library/typing.rst:426
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are "
"hashable and comparable for equality."
msgstr ""
"ユーザーが定義したジェネリッククラスはメタクラスの衝突を起こすことなく基底ク"
"ラスに抽象基底クラスをとれます。\n"
"ジェネリックメタクラスはサポートされません。\n"
"パラメータ化を行うジェネリクスの結果はキャッシュされていて、 typing モジュー"
"ルのほとんどの型はハッシュ化でき、等価比較できます。"

#: ../../library/typing.rst:433
msgid "The :data:`Any` type"
msgstr ":data:`Any` 型"

#: ../../library/typing.rst:435
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
":data:`Any` は特別な種類の型です。静的型検査器はすべての型を :data:`Any` と互"
"換として扱い、 :data:`Any` をすべての型と互換として扱います。"

#: ../../library/typing.rst:439
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""
"これは、 :data:`Any` 型の値では、任意の演算やメソッドの呼び出しが行えることを"
"意味します::"

#: ../../library/typing.rst:457
msgid ""
"Notice that no type checking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
":data:`Any` 型の値をより詳細な型に代入する時に型検査が行われないことに注意し"
"てください。例えば、静的型検査器は ``a`` を ``s`` に代入する時、``s`` が :"
"class:`str` 型として宣言されていて実行時に :class:`int` の値を受け取るとして"
"も、エラーを報告しません。"

#: ../../library/typing.rst:463
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""
"さらに、返り値や引数の型のないすべての関数は暗黙的に :data:`Any` を使用しま"
"す。"

#: ../../library/typing.rst:476
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""
"この挙動により、動的型付けと静的型付けが混在したコードを書かなければならない"
"時に :data:`Any` を *非常口* として使用することができます。"

#: ../../library/typing.rst:479
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
":data:`Any` の挙動と :class:`object` の挙動を対比しましょう。 :data:`Any` と"
"同様に、すべての型は :class:`object` のサブタイプです。しかしながら、 :data:"
"`Any` と異なり、逆は成り立ちません: :class:`object` はすべての他の型のサブタ"
"イプでは *ありません*。"

#: ../../library/typing.rst:484
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"これは、ある値の型が :class:`object` のとき、型検査器はこれについてのほとんど"
"すべての操作を拒否し、これをより特殊化された変数に代入する (または返り値とし"
"て利用する) ことは型エラーになることを意味します。例えば::"

#: ../../library/typing.rst:506
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""
":class:`object` は、ある値が型安全な方法で任意の型として使えることを示すため"
"に使用します。 :data:`Any` はある値が動的に型付けられることを示すために使用し"
"ます。"

#: ../../library/typing.rst:511
msgid "Nominal vs structural subtyping"
msgstr "名前的部分型 vs 構造的部分型"

#: ../../library/typing.rst:513
msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""
"初めは :pep:`484` は Python の静的型システムを *名前的部分型* を使って定義し"
"ていました。\n"
"名前的部分型とは、クラス ``B`` が期待されているところにクラス ``A`` が許容さ"
"れるのは ``A`` が ``B`` のサブクラスの場合かつその場合に限る、ということで"
"す。"

#: ../../library/typing.rst:517
msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""
"前出の必要条件は、:class:`~collections.abc.Iterable` などの抽象基底クラスにも"
"当て嵌まります。\n"
"この型付け手法の問題は、この手法をサポートするためにクラスに明確な型付けを行"
"う必要があることで、これは pythonic ではなく、普段行っている 慣用的な Python "
"コードへの動的型付けとは似ていません。\n"
"例えば、次のコードは :pep:`484` に従ったものです ::"

#: ../../library/typing.rst:530
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""
":pep:`544` によって上にあるようなクラス定義で基底クラスを明示しないコードを"
"ユーザーが書け、静的型チェッカーで ``Bucket`` が ``Sized`` と "
"``Iterable[int]`` 両方のサブタイプだと暗黙的に見なせるようになり、この問題が"
"解決しました。\n"
"これは *structural subtyping (構造的部分型)* (あるいは、静的ダックタイピン"
"グ) として知られています::"

#: ../../library/typing.rst:546
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""
"さらに、特別なクラス :class:`Protocol` のサブクラスを作ることで、新しい独自の"
"プロトコルを作って構造的部分型というものを満喫できます。"

#: ../../library/typing.rst:551
msgid "Module contents"
msgstr "モジュールの内容"

#: ../../library/typing.rst:553
msgid "The module defines the following classes, functions and decorators."
msgstr "このモジュールでは以下のクラス、関数、デコレータを定義します。"

#: ../../library/typing.rst:557
msgid ""
"This module defines several types that are subclasses of pre-existing "
"standard library classes which also extend :class:`Generic` to support type "
"variables inside ``[]``. These types became redundant in Python 3.9 when the "
"corresponding pre-existing classes were enhanced to support ``[]``."
msgstr ""
"このモジュールは、既存の標準ライブラリクラスのサブクラスかつ、 ``[]`` 内の型"
"変数をサポートするために :class:`Generic` を拡張している、いくつかの型を定義"
"しています。\n"
"これらの型は、既存の相当するクラスが ``[]`` をサポートするように拡張されたと"
"きに Python 3.9 で廃止になりました。"

#: ../../library/typing.rst:563
msgid ""
"The redundant types are deprecated as of Python 3.9 but no deprecation "
"warnings will be issued by the interpreter. It is expected that type "
"checkers will flag the deprecated types when the checked program targets "
"Python 3.9 or newer."
msgstr ""
"余計な型は Python 3.9 で非推奨になりましたが、非推奨の警告はどれもインタープ"
"リタから通告されません。\n"
"型チェッカーがチェックするプログラムの対照が Python 3.9 もしくはそれ以降のと"
"きに、非推奨の型に目印を付けることが期待されています。"

#: ../../library/typing.rst:568
msgid ""
"The deprecated types will be removed from the :mod:`typing` module in the "
"first Python version released 5 years after the release of Python 3.9.0. See "
"details in :pep:`585`—*Type Hinting Generics In Standard Collections*."
msgstr ""
"非推奨の型は、Python 3.9.0 のリリースから5年後の初めての Python バージョン"
"で :mod:`typing` モジュールから削除されます。\n"
"詳しいことは :pep:`585`—*Type Hinting Generics In Standard Collections* を参"
"照してください。"

#: ../../library/typing.rst:574
msgid "Special typing primitives"
msgstr "特殊型付けプリミティブ"

#: ../../library/typing.rst:577
msgid "Special types"
msgstr "特殊型"

#: ../../library/typing.rst:579
msgid "These can be used as types in annotations and do not support ``[]``."
msgstr ""
"これらはアノテーションの内部の型として使えますが、``[]`` はサポートしていませ"
"ん。"

#: ../../library/typing.rst:583
msgid "Special type indicating an unconstrained type."
msgstr "制約のない型であることを示す特別な型です。"

#: ../../library/typing.rst:585
msgid "Every type is compatible with :data:`Any`."
msgstr "任意の型は :data:`Any` と互換です。"

#: ../../library/typing.rst:586
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` は任意の型と互換です。"

#: ../../library/typing.rst:590
msgid "Special type indicating that a function never returns. For example::"
msgstr ""
"関数が返り値を持たないことを示す特別な型です。例えば次のように使います::"

#: ../../library/typing.rst:603
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`. For example::"
msgstr ""

#: ../../library/typing.rst:610
msgid "See :pep:`613` for more details about explicit type aliases."
msgstr ""

#: ../../library/typing.rst:615
msgid "Special forms"
msgstr "特殊形式"

#: ../../library/typing.rst:617
msgid ""
"These can be used as types in annotations using ``[]``, each having a unique "
"syntax."
msgstr ""
"これらは ``[]`` を使ったアノテーションの内部の型として使え、それぞれ固有の文"
"法があります。"

#: ../../library/typing.rst:621
msgid ""
"Tuple type; ``Tuple[X, Y]`` is the type of a tuple of two items with the "
"first item of type X and the second of type Y. The type of the empty tuple "
"can be written as ``Tuple[()]``."
msgstr ""
"タプル型; ``Tuple[X, Y]`` は、最初の要素の型が X で、2つ目の要素の型が Y であ"
"るような、2つの要素を持つタプルの型です。\n"
"空のタプルの型は ``Tuple[()]`` と書けます。"

#: ../../library/typing.rst:625
msgid ""
"Example: ``Tuple[T1, T2]`` is a tuple of two elements corresponding to type "
"variables T1 and T2.  ``Tuple[int, float, str]`` is a tuple of an int, a "
"float and a string."
msgstr ""
"例: ``Tuple[T1, T2]``  は型変数 T1 と T2 に対応する2つの要素を持つタプルで"
"す。``Tuple[int, float, str]`` は int と float、 string のタプルです。"

#: ../../library/typing.rst:629
msgid ""
"To specify a variable-length tuple of homogeneous type, use literal "
"ellipsis, e.g. ``Tuple[int, ...]``. A plain :data:`Tuple` is equivalent to "
"``Tuple[Any, ...]``, and in turn to :class:`tuple`."
msgstr ""
"同じ型の任意の長さのタプルを指定するには ellipsis リテラルを用います。例:  "
"``Tuple[int, ...]``。ただの :data:`Tuple` は ``Tuple[Any, ...]`` と等価で、さ"
"らに :class:`tuple` と等価です。."

#: ../../library/typing.rst:633
msgid ""
":class:`builtins.tuple <tuple>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.tuple <tuple>` は添字表記 (``[]``) をサポートするようになり"
"ました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:639
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or "
"Y."
msgstr ""
"ユニオン型; ``Union[X, Y]`` は ``X | Y`` と等価で X または Y を表します。"

#: ../../library/typing.rst:641
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr ""

#: ../../library/typing.rst:643
msgid "The arguments must be types and there must be at least one."
msgstr "引数は型でなければならず、少なくとも一つ必要です。"

#: ../../library/typing.rst:645
msgid "Unions of unions are flattened, e.g.::"
msgstr "ユニオン型のユニオン型は平滑化されます。例えば::"

#: ../../library/typing.rst:649
msgid "Unions of a single argument vanish, e.g.::"
msgstr "引数が一つのユニオン型は消えます。例えば::"

#: ../../library/typing.rst:653
msgid "Redundant arguments are skipped, e.g.::"
msgstr "冗長な実引数は飛ばされます。例えば::"

#: ../../library/typing.rst:657
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr "ユニオン型を比較するとき引数の順序は無視されます。例えば::"

#: ../../library/typing.rst:661
msgid "You cannot subclass or instantiate a ``Union``."
msgstr ""
"``Union`` のサブクラスを作成したり、インスタンスを作成することは出来ません。"

#: ../../library/typing.rst:663
msgid "You cannot write ``Union[X][Y]``."
msgstr "``Union[X][Y]`` と書くことは出来ません。"

#: ../../library/typing.rst:665
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr ""
"明示的に書かれているサブクラスを、実行時に直和型から取り除かなくなりました。"

#: ../../library/typing.rst:668
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"ユニオン型は ``X | Y`` のように書けるようになりました。 :ref:`union型の表現 "
"<types-union>` を参照ください。"

#: ../../library/typing.rst:674
msgid "Optional type."
msgstr "オプショナル型。"

#: ../../library/typing.rst:676
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr "``Optional[X]`` は ``X | None`` (や ``Union[X, None]``) と同等です。"

#: ../../library/typing.rst:678
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""
"これがデフォルト値を持つオプション引数とは同じ概念ではないということに注意し"
"てください。\n"
"デフォルト値を持つオプション引数はオプション引数であるために、型アノテーショ"
"ンに ``Optional`` 修飾子は必要ありません。\n"
"例えば次のようになります::"

#: ../../library/typing.rst:686
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""
"それとは逆に、 ``None`` という値が許されていることが明示されている場合は、引"
"数がオプションであろうとなかろうと、 ``Optional`` を使うのが好ましいです。\n"
"例えば次のようになります::"

#: ../../library/typing.rst:693
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"Optionalは ``X | None`` のように書けるようになりました。 ref:`union型の表現 "
"<types-union>` を参照ください。"

#: ../../library/typing.rst:699
msgid "Callable type; ``Callable[[int], str]`` is a function of (int) -> str."
msgstr "呼び出し可能型; ``Callable[[int], str]`` は (int) -> str の関数です。"

#: ../../library/typing.rst:701
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types or an ellipsis; the return type must be a single type."
msgstr ""
"添字表記は常に2つの値とともに使われなければなりません: 実引数のリストと返り値"
"の型です。\n"
"実引数のリストは型のリストか ellipsis でなければなりません; 返り値の型は単一"
"の型でなければなりません。"

#: ../../library/typing.rst:706
msgid ""
"There is no syntax to indicate optional or keyword arguments; such function "
"types are rarely used as callback types. ``Callable[..., ReturnType]`` "
"(literal ellipsis) can be used to type hint a callable taking any number of "
"arguments and returning ``ReturnType``.  A plain :data:`Callable` is "
"equivalent to ``Callable[..., Any]``, and in turn to :class:`collections.abc."
"Callable`."
msgstr ""
"オプショナル引数やキーワード引数を表すための文法はありません; そのような関数"
"型はコールバックの型として滅多に使われません。\n"
"``Callable[..., ReturnType]`` (リテラルの Ellipsis) は任意の個数の引数をとり "
"``ReturnType`` を返す型ヒントを与えるために使えます。\n"
"普通の :data:`Callable` は ``Callable[..., Any]`` と同等で、 :class:"
"`collections.abc.Callable` でも同様です。"

#: ../../library/typing.rst:722
msgid ""
":class:`collections.abc.Callable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Callable` は添字表記 (``[]``) をサポートするようにな"
"りました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:731
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provide "
"examples of usage with ``Callable``."
msgstr ""

#: ../../library/typing.rst:736
msgid ""
"Used with :data:`Callable` and :class:`ParamSpec` to type annotate a higher "
"order callable which adds, removes, or transforms parameters of another "
"callable.  Usage is in the form ``Concatenate[Arg1Type, Arg2Type, ..., "
"ParamSpecVariable]``. ``Concatenate`` is currently only valid when used as "
"the first argument to a :data:`Callable`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec`."
msgstr ""

#: ../../library/typing.rst:743
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a :class:"
"`threading.Lock` to the decorated function,  ``Concatenate`` can be used to "
"indicate that ``with_lock`` expects a callable which takes in a ``Lock`` as "
"the first argument, and returns a callable with a different type signature.  "
"In this case, the :class:`ParamSpec` indicates that the returned callable's "
"parameter types are dependent on the parameter types of the callable being "
"passed in::"
msgstr ""

#: ../../library/typing.rst:782 ../../library/typing.rst:1268
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)."
msgstr ""

#: ../../library/typing.rst:784
msgid ":class:`ParamSpec` and :class:`Callable`."
msgstr ""

#: ../../library/typing.rst:789
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``Type[C]`` may accept values that are "
"classes themselves -- specifically, it will accept the *class object* of "
"``C``. For example::"
msgstr ""
"``C`` と注釈が付けされた変数は ``C`` 型の値を受理します。一方で ``Type[C]`` "
"と注釈が付けられた変数は、そのクラス自身を受理します -- 具体的には、それは "
"``C`` の *クラスオブジェクト* を受理します。例::"

#: ../../library/typing.rst:798
msgid "Note that ``Type[C]`` is covariant::"
msgstr "``Type[C]`` は共変であることに注意してください::"

#: ../../library/typing.rst:810
msgid ""
"The fact that ``Type[C]`` is covariant implies that all subclasses of ``C`` "
"should implement the same constructor signature and class method signatures "
"as ``C``. The type checker should flag violations of this, but should also "
"allow constructor calls in subclasses that match the constructor calls in "
"the indicated base class. How the type checker is required to handle this "
"particular case may change in future revisions of :pep:`484`."
msgstr ""
"``Type[C]`` が共変だということは、 ``C`` の全てのサブクラスは、 ``C`` と同じ"
"シグネチャのコンストラクタとクラスメソッドを実装すべきだということになりま"
"す。\n"
"型チェッカーはこの規則への違反に印を付けるべきですが、サブクラスでのコンスト"
"ラクタ呼び出しで、指定された基底クラスのコンストラクタ呼び出しに適合するもの"
"は許可すべきです。\n"
"この特別な場合を型チェッカーがどう扱うべきかについては、 :pep:`484` の将来の"
"バージョンで変更されるかもしれません。"

#: ../../library/typing.rst:818
msgid ""
"The only legal parameters for :class:`Type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""
":class:`Type` で許されているパラメータは、クラス、 :data:`Any` 、 :ref:`型変"
"数 <generics>` あるいは、それらの直和型だけです。\n"
"例えば次のようになります::"

#: ../../library/typing.rst:824
msgid ""
"``Type[Any]`` is equivalent to ``Type`` which in turn is equivalent to "
"``type``, which is the root of Python's metaclass hierarchy."
msgstr ""
"``Type[Any]`` は ``Type`` と等価で、同様に ``Type`` は ``type`` と等価です。"
"``type`` は Python のメタクラス階層のルートです。"

#: ../../library/typing.rst:829
msgid ""
":class:`builtins.type <type>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.type <type>` は添字表記 (``[]``) をサポートするようになりま"
"した。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:835
msgid ""
"A type that can be used to indicate to type checkers that the corresponding "
"variable or function parameter has a value equivalent to the provided "
"literal (or one of several literals). For example::"
msgstr ""
"型チェッカーに、変数や関数引数と対応する与えられたリテラル (あるいはいくつか"
"あるリテラルのうちの 1 つ) が同等な値を持つことを表すのに使える型です。"

#: ../../library/typing.rst:849
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""
"``Literal[...]`` はサブクラスにはできません。\n"
"実行時に、任意の値が ``Literal[...]`` の型引数として使えますが、型チェッカー"
"が制約を課すことがあります。\n"
"リテラル型についてより詳しいことは :pep:`586` を参照してください。"

#: ../../library/typing.rst:855
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of "
"their parameters are not :term:`hashable`."
msgstr ""
"``Literal`` ではパラメータの重複を解消するようになりました。``Literal`` オブ"
"ジェクトの等値比較は順序に依存しないようになりました。``Literal`` オブジェク"
"トは、等値比較する際に、パラメータのうち 1 つでも :term:`hashable` でない場合"
"は :exc:`TypeError` を送出するようになりました。"

#: ../../library/typing.rst:863
msgid "Special type construct to mark class variables."
msgstr "クラス変数であることを示す特別な型構築子です。"

#: ../../library/typing.rst:865
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""
":pep:`526` で導入された通り、 ClassVar でラップされた変数アノテーションによっ"
"て、ある属性はクラス変数として使うつもりであり、そのクラスのインスタンスから"
"設定すべきではないということを示せます。使い方は次のようになります::"

#: ../../library/typing.rst:873
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ":data:`ClassVar` は型のみを受け入れ、それ以外は受け付けられません。"

#: ../../library/typing.rst:875
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""
":data:`ClassVar` はクラスそのものではなく、:func:`isinstance` や :func:"
"`issubclass` で使うべきではありません。\n"
":data:`ClassVar` は Python の実行時の挙動を変えませんが、サードパーティの型検"
"査器で使えます。\n"
"例えば、型チェッカーは次のコードをエラーとするかもしれません::"

#: ../../library/typing.rst:889
msgid ""
"A special typing construct to indicate to type checkers that a name cannot "
"be re-assigned or overridden in a subclass. For example::"
msgstr ""
"特別な型付けの構成要素で、名前の割り当て直しやサブクラスでのオーバーライドが"
"できないことを型チェッカーに示すためのものです。\n"
"例えば::"

#: ../../library/typing.rst:901 ../../library/typing.rst:2157
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""
"この機能は実行時には検査されません。詳細については :pep:`591` を参照してくだ"
"さい。"

#: ../../library/typing.rst:908
msgid ""
"A type, introduced in :pep:`593` (``Flexible function and variable "
"annotations``), to decorate existing types with context-specific metadata "
"(possibly multiple pieces of it, as ``Annotated`` is variadic). "
"Specifically, a type ``T`` can be annotated with metadata ``x`` via the "
"typehint ``Annotated[T, x]``. This metadata can be used for either static "
"analysis or at runtime. If a library (or tool) encounters a typehint "
"``Annotated[T, x]`` and has no special logic for metadata ``x``, it should "
"ignore it and simply treat the type as ``T``. Unlike the ``no_type_check`` "
"functionality that currently exists in the ``typing`` module which "
"completely disables typechecking annotations on a function or a class, the "
"``Annotated`` type allows for both static typechecking of ``T`` (which can "
"safely ignore ``x``) together with runtime access to ``x`` within a specific "
"application."
msgstr ""
":pep:`593` (``Flexible function and variable annotations``) で導入された型"
"で、コンテキストに特定のメタデータ (もしかすると、可変個引数の ``Annotated`` "
"になるメタデータの複数の破片) を持つ既存の型を装飾します。\n"
"具体的には、型 ``T`` は ``Annotated[T, x]`` という型ヒントでメタデータ ``x`` "
"の注釈を付けられます。\n"
"メタデータは静的解析でも実行時解析でも使用できます。\n"
"ライブラリ (あるいはツール) に型ヒント ``Annotated[T, x]`` が出てきて、メタ"
"データ ``x`` に特別なロジックが無い場合は、メタデータ ``x`` は無視され、この"
"型は ``T`` として扱われるだけです。\n"
"関数やクラス上のアノテーションの型検査を一切しなくなる現時点の ``typing`` モ"
"ジュールにある ``no_type_check`` の機能とは違って、 ``Annotated`` 型は ``T`` "
"の (安全に ``x`` を無視できる) 静的型検査も、特定のアプリケーション内の "
"``x`` への実行時のアクセスも許可されています。"

#: ../../library/typing.rst:922
msgid ""
"Ultimately, the responsibility of how to interpret the annotations (if at "
"all) is the responsibility of the tool or library encountering the "
"``Annotated`` type. A tool or library encountering an ``Annotated`` type can "
"scan through the annotations to determine if they are of interest (e.g., "
"using ``isinstance()``)."
msgstr ""

#: ../../library/typing.rst:928
msgid ""
"When a tool or a library does not support annotations or encounters an "
"unknown annotation it should just ignore it and treat annotated type as the "
"underlying type."
msgstr ""

#: ../../library/typing.rst:932
msgid ""
"It's up to the tool consuming the annotations to decide whether the client "
"is allowed to have several annotations on one type and how to merge those "
"annotations."
msgstr ""

#: ../../library/typing.rst:936
msgid ""
"Since the ``Annotated`` type allows you to put several annotations of the "
"same (or different) type(s) on any node, the tools or libraries consuming "
"those annotations are in charge of dealing with potential duplicates. For "
"example, if you are doing value range analysis you might allow this::"
msgstr ""

#: ../../library/typing.rst:945
msgid ""
"Passing ``include_extras=True`` to :func:`get_type_hints` lets one access "
"the extra annotations at runtime."
msgstr ""

#: ../../library/typing.rst:948
msgid "The details of the syntax:"
msgstr ""

#: ../../library/typing.rst:950
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr ""

#: ../../library/typing.rst:952
msgid ""
"Multiple type annotations are supported (``Annotated`` supports variadic "
"arguments)::"
msgstr ""

#: ../../library/typing.rst:957
msgid ""
"``Annotated`` must be called with at least two arguments "
"( ``Annotated[int]`` is not valid)"
msgstr ""

#: ../../library/typing.rst:960
msgid ""
"The order of the annotations is preserved and matters for equality checks::"
msgstr ""

#: ../../library/typing.rst:967
msgid ""
"Nested ``Annotated`` types are flattened, with metadata ordered starting "
"with the innermost annotation::"
msgstr ""

#: ../../library/typing.rst:974
msgid "Duplicated annotations are not removed::"
msgstr ""

#: ../../library/typing.rst:980
msgid "``Annotated`` can be used with nested and generic aliases::"
msgstr ""

#: ../../library/typing.rst:993
msgid ""
"Special typing form used to annotate the return type of a user-defined type "
"guard function.  ``TypeGuard`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean."
msgstr ""

#: ../../library/typing.rst:997
msgid ""
"``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static "
"type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type guard\"::"
msgstr ""

#: ../../library/typing.rst:1012
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a "
"type guard.  Such a function should use ``TypeGuard[...]`` as its return "
"type to alert static type checkers to this intention."
msgstr ""

#: ../../library/typing.rst:1016
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr ""

#: ../../library/typing.rst:1019
msgid "The return value is a boolean."
msgstr ""

#: ../../library/typing.rst:1020
msgid ""
"If the return value is ``True``, the type of its argument is the type inside "
"``TypeGuard``."
msgstr ""

#: ../../library/typing.rst:1037
msgid ""
"If ``is_str_list`` is a class or instance method, then the type in "
"``TypeGuard`` maps to the type of the second parameter after ``cls`` or "
"``self``."
msgstr ""

#: ../../library/typing.rst:1041
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...``, means "
"that if ``foo(arg)`` returns ``True``, then ``arg`` narrows from ``TypeA`` "
"to ``TypeB``."
msgstr ""

#: ../../library/typing.rst:1047
msgid ""
"``TypeB`` need not be a narrower form of ``TypeA`` -- it can even be a wider "
"form. The main reason is to allow for things like narrowing ``List[object]`` "
"to ``List[str]`` even though the latter is not a subtype of the former, "
"since ``List`` is invariant. The responsibility of writing type-safe type "
"guards is left to the user."
msgstr ""

#: ../../library/typing.rst:1053
msgid ""
"``TypeGuard`` also works with type variables.  See :pep:`647` for more "
"details."
msgstr ""

#: ../../library/typing.rst:1059
msgid "Building generic types"
msgstr ""

#: ../../library/typing.rst:1061
msgid ""
"These are not used in annotations. They are building blocks for creating "
"generic types."
msgstr ""

#: ../../library/typing.rst:1065
msgid "Abstract base class for generic types."
msgstr "ジェネリック型のための抽象基底クラスです。"

#: ../../library/typing.rst:1067
msgid ""
"A generic type is typically declared by inheriting from an instantiation of "
"this class with one or more type variables. For example, a generic mapping "
"type might be defined as::"
msgstr ""
"ジェネリック型は典型的にはこのクラスを1つ以上の型変数によってインスタンス化し"
"たものを継承することによって宣言されます。例えば、ジェネリックマップ型は次の"
"ように定義することが出来ます::"

#: ../../library/typing.rst:1076
msgid "This class can then be used as follows::"
msgstr "このクラスは次のように使用することが出来ます::"

#: ../../library/typing.rst:1089
msgid "Type variable."
msgstr "型変数です。"

#: ../../library/typing.rst:1091 ../../library/typing.rst:1197
#: ../../library/typing.rst:1374
msgid "Usage::"
msgstr "使い方::"

#: ../../library/typing.rst:1097
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function definitions.  See :class:`Generic` for more information on generic "
"types.  Generic functions work as follows::"
msgstr ""
"型変数は主として静的型検査器のために存在します。型変数はジェネリック型やジェ"
"ネリック関数の定義の引数として役に立ちます。ジェネリック型についての詳細は :"
"class:`Generic` を参照してください。ジェネリック関数は以下のように動作しま"
"す::"

#: ../../library/typing.rst:1117
msgid ""
"Note that type variables can be *bound*, *constrained*, or neither, but "
"cannot be both bound *and* constrained."
msgstr ""

#: ../../library/typing.rst:1120
msgid ""
"Constrained type variables and bound type variables have different semantics "
"in several important ways. Using a *constrained* type variable means that "
"the ``TypeVar`` can only ever be solved as being exactly one of the "
"constraints given::"
msgstr ""

#: ../../library/typing.rst:1130
msgid ""
"Using a *bound* type variable, however, means that the ``TypeVar`` will be "
"solved using the most specific type possible::"
msgstr ""

#: ../../library/typing.rst:1141
msgid ""
"Type variables can be bound to concrete types, abstract types (ABCs or "
"protocols), and even unions of types::"
msgstr ""

#: ../../library/typing.rst:1147
msgid ""
"Bound type variables are particularly useful for annotating :func:"
"`classmethods <classmethod>` that serve as alternative constructors. In the "
"following example (by `Raymond Hettinger <https://www.youtube.com/watch?"
"v=HTLu2DFOdTg>`_), the type variable ``C`` is bound to the ``Circle`` class "
"through the use of a forward reference. Using this type variable to annotate "
"the ``with_circumference`` classmethod, rather than hardcoding the return "
"type as ``Circle``, means that a type checker can correctly infer the return "
"type even if the method is called on a subclass::"
msgstr ""

#: ../../library/typing.rst:1185
msgid ""
"At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`.  In general, :"
"func:`isinstance` and :func:`issubclass` should not be used with types."
msgstr ""
"実行時に、``isinstance(x, T)`` は :exc:`TypeError` を送出するでしょう。一般的"
"に、:func:`isinstance` と :func:`issubclass` は型に対して使用するべきではあり"
"ません。"

#: ../../library/typing.rst:1188
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default, type variables are invariant."
msgstr ""

#: ../../library/typing.rst:1194
msgid ""
"Parameter specification variable.  A specialized version of :class:`type "
"variables <TypeVar>`."
msgstr ""

#: ../../library/typing.rst:1201
msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable "
"to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the "
"first argument to ``Callable``, or as parameters for user-defined Generics.  "
"See :class:`Generic` for more information on generic types."
msgstr ""

#: ../../library/typing.rst:1208
msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable "
"tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""

#: ../../library/typing.rst:1232
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with bound ``Callable[..., Any]``.  However this "
"causes two problems:"
msgstr ""

#: ../../library/typing.rst:1236
msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""

#: ../../library/typing.rst:1238
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""

#: ../../library/typing.rst:1245
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, ``P."
"args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` and :class:"
"`ParamSpecKwargs`."
msgstr ""

#: ../../library/typing.rst:1255
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to :class:"
"`TypeVar`.  However the actual semantics of these keywords are yet to be "
"decided."
msgstr ""

#: ../../library/typing.rst:1264
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr ""

#: ../../library/typing.rst:1270
msgid ":class:`Callable` and :class:`Concatenate`."
msgstr ""

#: ../../library/typing.rst:1275
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The ``P."
"args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``, and "
"``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended for "
"runtime introspection and have no special meaning to static type checkers."
msgstr ""

#: ../../library/typing.rst:1280
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``::"
msgstr ""

#: ../../library/typing.rst:1292
msgid ""
"``AnyStr`` is a :class:`constrained type variable <TypeVar>` defined as "
"``AnyStr = TypeVar('AnyStr', str, bytes)``."
msgstr ""

#: ../../library/typing.rst:1295
msgid ""
"It is meant to be used for functions that may accept any kind of string "
"without allowing different kinds of strings to mix. For example::"
msgstr ""
"他の種類の文字列を混ぜることなく、任意の種類の文字列を許す関数によって使われ"
"ることを意図しています。"

#: ../../library/typing.rst:1307
msgid ""
"Base class for protocol classes. Protocol classes are defined like this::"
msgstr ""
"プロトコルクラスの基底クラス。\n"
"プロトコルクラスは次のように定義されます::"

#: ../../library/typing.rst:1313
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""
"このようなクラスは主に構造的部分型 (静的ダックタイピング) を認識する静的型"
"チェッカーが使います。例えば::"

#: ../../library/typing.rst:1325
msgid ""
"See :pep:`544` for more details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures."
msgstr ""
"詳細については :pep:`544` を参照してください。\n"
":func:`runtime_checkable` (後で説明します) でデコレートされたプロトコルクラス"
"は、与えられたメソッドがあることだけを確認し、その型シグネチャは全く見ない安"
"直な動作をする実行時プロトコルとして振る舞います。"

#: ../../library/typing.rst:1330
msgid "Protocol classes can be generic, for example::"
msgstr "プロトコルクラスはジェネリックにもできます。例えば::"

#: ../../library/typing.rst:1340
msgid "Mark a protocol class as a runtime protocol."
msgstr ""

#: ../../library/typing.rst:1342
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`~collections.abc."
"Iterable`.  For example::"
msgstr ""

#: ../../library/typing.rst:1355
msgid ""
":func:`runtime_checkable` will check only the presence of the required "
"methods, not their type signatures. For example, :class:`ssl.SSLObject` is a "
"class, therefore it passes an :func:`issubclass` check against :data:"
"`Callable`.  However, the :meth:`ssl.SSLObject.__init__` method exists only "
"to raise a :exc:`TypeError` with a more informative message, therefore "
"making it impossible to call (instantiate) :class:`ssl.SSLObject`."
msgstr ""

#: ../../library/typing.rst:1366
msgid "Other special directives"
msgstr ""

#: ../../library/typing.rst:1368
msgid ""
"These are not used in annotations. They are building blocks for declaring "
"types."
msgstr ""

#: ../../library/typing.rst:1372
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ":func:`collections.namedtuple` の型付き版です。"

#: ../../library/typing.rst:1380
msgid "This is equivalent to::"
msgstr "これは次と等価です::"

#: ../../library/typing.rst:1384
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr "フィールドにデフォルト値を与えるにはクラス本体で代入してください::"

#: ../../library/typing.rst:1393
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""
"デフォルト値のあるフィールドはデフォルト値のないフィールドの後でなければなり"
"ません。"

#: ../../library/typing.rst:1395
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""
"最終的に出来上がるクラスには、フィールド名をフィールド型へ対応付ける辞書を提"
"供する ``__annotations__`` 属性が追加されています。\n"
"(フィールド名は ``_fields`` 属性に、デフォルト値は ``_field_defaults`` 属性に"
"格納されていて、両方とも :func:`~collections.namedtuple` API の一部分です。)"

#: ../../library/typing.rst:1401
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr "``NamedTuple`` のサブクラスは docstring やメソッドも持てます::"

#: ../../library/typing.rst:1411
msgid "Backward-compatible usage::"
msgstr "後方互換な使用法::"

#: ../../library/typing.rst:1415
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr ":pep:`526` 変数アノテーションのシンタックスが追加されました。"

#: ../../library/typing.rst:1418
msgid "Added support for default values, methods, and docstrings."
msgstr ""
"デフォルト値、メソッド、ドキュメンテーション文字列への対応が追加されました。"

#: ../../library/typing.rst:1421
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""
"``_field_types`` 属性および ``__annotations__`` 属性は ``OrderedDict`` インス"
"タンスではなく普通の辞書になりました。"

#: ../../library/typing.rst:1425
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""
"``_field_types`` 属性は削除されました。代わりに同じ情報を持つより標準的な "
"``__annotations__`` 属性を使ってください。"

#: ../../library/typing.rst:1431
msgid ""
"A helper class to indicate a distinct type to a typechecker, see :ref:"
"`distinct`. At runtime it returns an object that returns its argument when "
"called. Usage::"
msgstr ""

#: ../../library/typing.rst:1441
msgid "``NewType`` is now a class rather than a function."
msgstr ""

#: ../../library/typing.rst:1446
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr ""

#: ../../library/typing.rst:1449
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""
"``TypedDict`` は、その全てのインスタンスにおいてキーの集合が固定されていて、"
"各キーに対応する値が全てのインスタンスで同じ型を持つことが期待される辞書型を"
"宣言します。\n"
"この期待は実行時にはチェックされず、型チェッカーでのみ強制されます。\n"
"使用方法は次の通りです::"

#: ../../library/typing.rst:1465
msgid ""
"To allow using this feature with older versions of Python that do not "
"support :pep:`526`, ``TypedDict`` supports two additional equivalent "
"syntactic forms::"
msgstr ""

#: ../../library/typing.rst:1472
msgid ""
"The functional syntax should also be used when any of the keys are not "
"valid :ref:`identifiers <identifiers>`, for example because they are "
"keywords or contain hyphens. Example::"
msgstr ""

#: ../../library/typing.rst:1484
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"override this by specifying totality. Usage::"
msgstr ""

#: ../../library/typing.rst:1492
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""

#: ../../library/typing.rst:1497
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr ""

#: ../../library/typing.rst:1504
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr ""

#: ../../library/typing.rst:1512
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, notably "
"including :class:`Generic`. For example::"
msgstr ""

#: ../../library/typing.rst:1530
msgid ""
"A ``TypedDict`` can be introspected via annotations dicts (see :ref:"
"`annotations-howto` for more information on annotations best practices), :"
"attr:`__total__`, :attr:`__required_keys__`, and :attr:`__optional_keys__`."
msgstr ""

#: ../../library/typing.rst:1536
msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example::"
msgstr ""

#: ../../library/typing.rst:1556
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return :"
"class:`frozenset` objects containing required and non-required keys, "
"respectively. Currently the only way to declare both required and non-"
"required keys in the same ``TypedDict`` is mixed inheritance, declaring a "
"``TypedDict`` with one value for the ``total`` argument and then inheriting "
"it from another ``TypedDict`` with a different value for ``total``. Usage::"
msgstr ""

#: ../../library/typing.rst:1578
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr ""
"他の例や、 ``TypedDict`` を扱う詳細な規則については :pep:`589` を参照してくだ"
"さい。"

#: ../../library/typing.rst:1583
msgid "Generic concrete collections"
msgstr ""

#: ../../library/typing.rst:1586
msgid "Corresponding to built-in types"
msgstr ""

#: ../../library/typing.rst:1590
msgid ""
"A generic version of :class:`dict`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Mapping`."
msgstr ""
":class:`dict` のジェネリック版です。\n"
"返り値の型のアノテーションをつけることに便利です。\n"
"引数にアノテーションをつけるためには、 :class:`Mapping` のような抽象コレク"
"ション型を使うことが好ましいです。"

#: ../../library/typing.rst:1594
msgid "This type can be used as follows::"
msgstr "この型は次のように使えます::"

#: ../../library/typing.rst:1599
msgid ""
":class:`builtins.dict <dict>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.dict <dict>` は添字表記 (``[]``) をサポートするようになりま"
"した。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1605
msgid ""
"Generic version of :class:`list`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Sequence` or :class:`Iterable`."
msgstr ""
":class:`list` のジェネリック版です。\n"
"返り値の型のアノテーションをつけるのに便利です。\n"
"引数にアノテーションをつけるためには、 :class:`Sequence` や :class:"
"`Iterable` のような抽象コレクション型を使うことが好ましいです。"

#: ../../library/typing.rst:1610
msgid "This type may be used as follows::"
msgstr "この型は次のように使えます::"

#: ../../library/typing.rst:1620
msgid ""
":class:`builtins.list <list>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.list <list>` は添字表記 (``[]``) をサポートするようになりま"
"した。:pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1626
msgid ""
"A generic version of :class:`builtins.set <set>`. Useful for annotating "
"return types. To annotate arguments it is preferred to use an abstract "
"collection type such as :class:`AbstractSet`."
msgstr ""
":class:`builtins.set <set>` のジェネリック版です。\n"
"返り値の型のアノテーションをつけるのに便利です。\n"
"引数にアノテーションをつけるためには、 :class:`AbstractSet` のような抽象コレ"
"クション型を使うことが好ましいです。"

#: ../../library/typing.rst:1630
msgid ""
":class:`builtins.set <set>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.set <set>` は添字表記 (``[]``) をサポートするようになりまし"
"た。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1636
msgid "A generic version of :class:`builtins.frozenset <frozenset>`."
msgstr ":class:`builtins.frozenset <frozenset>` のジェネリック版です。"

#: ../../library/typing.rst:1638
msgid ""
":class:`builtins.frozenset <frozenset>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.frozenset <frozenset>` は添字表記 (``[]``) をサポートするよ"
"うになりました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1643
msgid ":data:`Tuple` is a special form."
msgstr ""

#: ../../library/typing.rst:1646
msgid "Corresponding to types in :mod:`collections`"
msgstr ""

#: ../../library/typing.rst:1650
msgid "A generic version of :class:`collections.defaultdict`."
msgstr ":class:`collections.defaultdict` のジェネリック版です。"

#: ../../library/typing.rst:1654
msgid ""
":class:`collections.defaultdict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.defaultdict` は添字表記 (``[]``) をサポートするようになり"
"ました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1660
msgid "A generic version of :class:`collections.OrderedDict`."
msgstr ":class:`collections.OrderedDict` のジェネリック版です。"

#: ../../library/typing.rst:1664
msgid ""
":class:`collections.OrderedDict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.OrderedDict` は添字表記 (``[]``) をサポートするようになり"
"ました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1670
msgid "A generic version of :class:`collections.ChainMap`."
msgstr ":class:`collections.ChainMap` のジェネリック版です。"

#: ../../library/typing.rst:1675
msgid ""
":class:`collections.ChainMap` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.ChainMap` は添字表記 (``[]``) をサポートするようになりま"
"した。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1681
msgid "A generic version of :class:`collections.Counter`."
msgstr ":class:`collections.Counter` のジェネリック版です。"

#: ../../library/typing.rst:1686
msgid ""
":class:`collections.Counter` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.Counter` は添字表記 (``[]``) をサポートするようになりまし"
"た。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1692
msgid "A generic version of :class:`collections.deque`."
msgstr ":class:`collections.deque` のジェネリック版です。"

#: ../../library/typing.rst:1697
msgid ""
":class:`collections.deque` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.deque` は添字表記 (``[]``) をサポートするようになりまし"
"た。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1702
msgid "Other concrete types"
msgstr ""

#: ../../library/typing.rst:1708
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""
"ジェネリック型 ``IO[AnyStr]`` とそのサブクラスの ``TextIO(IO[str])`` および "
"``BinaryIO(IO[bytes])`` は、 :func:`open` 関数が返すような I/O ストリームの型"
"を表します。"

#: ../../library/typing.rst:1715
msgid ""
"The ``typing.io`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:1720
msgid ""
"These type aliases correspond to the return types from :func:`re.compile` "
"and :func:`re.match`.  These types (and the corresponding functions) are "
"generic in ``AnyStr`` and can be made specific by writing ``Pattern[str]``, "
"``Pattern[bytes]``, ``Match[str]``, or ``Match[bytes]``."
msgstr ""
"これらの型エイリアスは :func:`re.compile` と :func:`re.match` の返り値の型に"
"対応します。\n"
"これらの型 (と対応する関数) は ``AnyStr`` についてジェネリックで、"
"``Pattern[str]`` 、 ``Pattern[bytes]`` 、 ``Match[str]`` 、 ``Match[bytes]`` "
"と書くことで具体型にできます。"

#: ../../library/typing.rst:1730
msgid ""
"The ``typing.re`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""

#: ../../library/typing.rst:1731
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:1737
msgid ""
"``Text`` is an alias for ``str``. It is provided to supply a forward "
"compatible path for Python 2 code: in Python 2, ``Text`` is an alias for "
"``unicode``."
msgstr ""
"``Text`` は ``str`` のエイリアスです。これは Python 2 のコードの前方互換性を"
"提供するために設けられています: Python 2 では ``Text`` は ``unicode`` のエイ"
"リアスです。"

#: ../../library/typing.rst:1741
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""
"``Text`` は Python 2 と Python 3 の両方と互換性のある方法で値が unicode 文字"
"列を含んでいなければならない場合に使用してください。"

#: ../../library/typing.rst:1750
msgid "Abstract Base Classes"
msgstr "抽象基底クラス"

#: ../../library/typing.rst:1753
msgid "Corresponding to collections in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:1757
msgid "A generic version of :class:`collections.abc.Set`."
msgstr ":class:`collections.abc.Set` のジェネリック版です。"

#: ../../library/typing.rst:1759
msgid ""
":class:`collections.abc.Set` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Set` は添字表記 (``[]``) をサポートするようになりまし"
"た。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1765
msgid "A generic version of :class:`collections.abc.ByteString`."
msgstr ":class:`collections.abc.ByteString` のジェネリック版です。"

#: ../../library/typing.rst:1767
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview` of byte sequences."
msgstr ""
"この型は :class:`bytes` と :class:`bytearray` 、バイト列の :class:"
"`memoryview` を表します。"

#: ../../library/typing.rst:1770
msgid ""
"As a shorthand for this type, :class:`bytes` can be used to annotate "
"arguments of any of the types mentioned above."
msgstr ""
"この型の省略形として、 :class:`bytes` を上に挙げた任意の型の引数にアノテー"
"ションをつけることに使えます。"

#: ../../library/typing.rst:1773
msgid ""
":class:`collections.abc.ByteString` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

#: ../../library/typing.rst:1779
msgid "A generic version of :class:`collections.abc.Collection`"
msgstr ":class:`collections.abc.Collection` のジェネリック版です。"

#: ../../library/typing.rst:1783
msgid ""
":class:`collections.abc.Collection` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Collection` は添字表記 (``[]``) をサポートするように"
"なりました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1789
msgid "A generic version of :class:`collections.abc.Container`."
msgstr ":class:`collections.abc.Container` のジェネリック版です。"

#: ../../library/typing.rst:1791
msgid ""
":class:`collections.abc.Container` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Container` は添字表記 (``[]``) をサポートするようにな"
"りました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1797
msgid "A generic version of :class:`collections.abc.ItemsView`."
msgstr ":class:`collections.abc.ItemsView` のジェネリック版です。"

#: ../../library/typing.rst:1799
msgid ""
":class:`collections.abc.ItemsView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ItemsView` は添字表記 (``[]``) をサポートするようにな"
"りました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1805
msgid "A generic version of :class:`collections.abc.KeysView`."
msgstr ":class:`collections.abc.KeysView` のジェネリック版です。"

#: ../../library/typing.rst:1807
msgid ""
":class:`collections.abc.KeysView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.KeysView` は添字表記 (``[]``) をサポートするようにな"
"りました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1813
msgid ""
"A generic version of :class:`collections.abc.Mapping`. This type can be used "
"as follows::"
msgstr ""
":class:`collections.abc.Mapping` のジェネリック版です。\n"
"この型は次のように使えます::"

#: ../../library/typing.rst:1819
msgid ""
":class:`collections.abc.Mapping` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Mapping` は添字表記 (``[]``) をサポートするようになり"
"ました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1825
msgid "A generic version of :class:`collections.abc.MappingView`."
msgstr ":class:`collections.abc.MappingView` のジェネリック版です。"

#: ../../library/typing.rst:1827
msgid ""
":class:`collections.abc.MappingView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MappingView` は添字表記 (``[]``) をサポートするように"
"なりました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1833
msgid "A generic version of :class:`collections.abc.MutableMapping`."
msgstr ":class:`collections.abc.MutableMapping` のジェネリック版です。"

#: ../../library/typing.rst:1835
msgid ""
":class:`collections.abc.MutableMapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableMapping` は添字表記 (``[]``) をサポートするよ"
"うになりました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1842
msgid "A generic version of :class:`collections.abc.MutableSequence`."
msgstr ":class:`collections.abc.MutableSequence` のジェネリック版です。"

#: ../../library/typing.rst:1844
msgid ""
":class:`collections.abc.MutableSequence` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSequence` は添字表記 (``[]``) をサポートするよ"
"うになりました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1851
msgid "A generic version of :class:`collections.abc.MutableSet`."
msgstr ":class:`collections.abc.MutableSet` のジェネリック版です。"

#: ../../library/typing.rst:1853
msgid ""
":class:`collections.abc.MutableSet` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSet` は添字表記 (``[]``) をサポートするように"
"なりました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1859
msgid "A generic version of :class:`collections.abc.Sequence`."
msgstr ":class:`collections.abc.Sequence` のジェネリック版です。"

#: ../../library/typing.rst:1861
msgid ""
":class:`collections.abc.Sequence` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Sequence` は添字表記 (``[]``) をサポートするようにな"
"りました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1867
msgid "A generic version of :class:`collections.abc.ValuesView`."
msgstr ":class:`collections.abc.ValuesView` のジェネリック版です。"

#: ../../library/typing.rst:1869
msgid ""
":class:`collections.abc.ValuesView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ValuesView` は添字表記 (``[]``) をサポートするように"
"なりました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1874
msgid "Corresponding to other types in :mod:`collections.abc`"
msgstr ""

#: ../../library/typing.rst:1878
msgid "A generic version of :class:`collections.abc.Iterable`."
msgstr ":class:`collections.abc.Iterable` のジェネリック版です。"

#: ../../library/typing.rst:1880
msgid ""
":class:`collections.abc.Iterable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterable` は添字表記 (``[]``) をサポートするようにな"
"りました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1886
msgid "A generic version of :class:`collections.abc.Iterator`."
msgstr ":class:`collections.abc.Iterator` のジェネリック版です。"

#: ../../library/typing.rst:1888
msgid ""
":class:`collections.abc.Iterator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterator` は添字表記 (``[]``) をサポートするようにな"
"りました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1894
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""
"ジェネレータはジェネリック型 ``Generator[YieldType, SendType, ReturnType]`` "
"によってアノテーションを付けられます。例えば::"

#: ../../library/typing.rst:1903
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""
"typing モジュールの多くの他のジェネリクスと違い :class:`Generator` の "
"``SendType`` は共変や不変ではなく、反変として扱われることに注意してください。"

#: ../../library/typing.rst:1907
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""
"もしジェネレータが値を返すだけの場合は、 ``SendType`` と ``ReturnType`` に "
"``None`` を設定してください::"

#: ../../library/typing.rst:1915
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""
"代わりに、ジェネレータを ``Iterable[YieldType]`` や ``Iterator[YieldType]`` "
"という返り値の型でアノテーションをつけることもできます::"

#: ../../library/typing.rst:1923
msgid ""
":class:`collections.abc.Generator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Generator` は添字表記 (``[]``) をサポートするようにな"
"りました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1929
msgid "An alias to :class:`collections.abc.Hashable`."
msgstr ":class:`collections.abc.Hashable` へのエイリアスです。"

#: ../../library/typing.rst:1933
msgid "A generic version of :class:`collections.abc.Reversible`."
msgstr ":class:`collections.abc.Reversible` のジェネリック版です。"

#: ../../library/typing.rst:1935
msgid ""
":class:`collections.abc.Reversible` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Reversible` は添字表記 (``[]``) をサポートするように"
"なりました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1941
msgid "An alias to :class:`collections.abc.Sized`."
msgstr ":class:`collections.abc.Sized` へのエイリアスです。"

#: ../../library/typing.rst:1944
msgid "Asynchronous programming"
msgstr ""

#: ../../library/typing.rst:1948
msgid ""
"A generic version of :class:`collections.abc.Coroutine`. The variance and "
"order of type variables correspond to those of :class:`Generator`, for "
"example::"
msgstr ""
":class:`collections.abc.Coroutine` のジェネリック版です。\n"
"変性と型変数の順序は :class:`Generator` のものと対応しています。例えば次のよ"
"うになります::"

#: ../../library/typing.rst:1960
msgid ""
":class:`collections.abc.Coroutine` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Coroutine` は添字表記 (``[]``) をサポートするようにな"
"りました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:1966
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""
"非同期ジェネレータはジェネリック型 ``AsyncGenerator[YieldType, SendType]`` に"
"よってアノテーションを付けられます。例えば::"

#: ../../library/typing.rst:1975
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""
"通常のジェネレータと違って非同期ジェネレータは値を返せないので、"
"``ReturnType`` 型引数はありません。:class:`Generator` と同様に、``SendType`` "
"は反変的に振る舞います。"

#: ../../library/typing.rst:1979
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr ""
"ジェネレータが値を yield するだけなら、``SendType`` を ``None`` にします::"

#: ../../library/typing.rst:1987
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""
"あるいは、ジェネレータが ``AsyncIterable[YieldType]`` と "
"``AsyncIterator[YieldType]`` のいずれかの戻り値型を持つとアノテートします::"

#: ../../library/typing.rst:1997
msgid ""
":class:`collections.abc.AsyncGenerator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncGenerator` は添字表記 (``[]``) をサポートするよ"
"うになりました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:2004
msgid "A generic version of :class:`collections.abc.AsyncIterable`."
msgstr ":class:`collections.abc.AsyncIterable` のジェネリック版です。"

#: ../../library/typing.rst:2008
msgid ""
":class:`collections.abc.AsyncIterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterable` は添字表記 (``[]``) をサポートするよう"
"になりました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:2014
msgid "A generic version of :class:`collections.abc.AsyncIterator`."
msgstr ":class:`collections.abc.AsyncIterator` のジェネリック版です。"

#: ../../library/typing.rst:2018
msgid ""
":class:`collections.abc.AsyncIterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterator` は添字表記 (``[]``) をサポートするよう"
"になりました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:2024
msgid "A generic version of :class:`collections.abc.Awaitable`."
msgstr ":class:`collections.abc.Awaitable` のジェネリック版です。"

#: ../../library/typing.rst:2028
msgid ""
":class:`collections.abc.Awaitable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Awaitable` は添字表記 (``[]``) をサポートするようにな"
"りました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:2034
msgid "Context manager types"
msgstr "コンテキストマネージャ型"

#: ../../library/typing.rst:2038
msgid "A generic version of :class:`contextlib.AbstractContextManager`."
msgstr ":class:`contextlib.AbstractContextManager` のジェネリック版です。"

#: ../../library/typing.rst:2043
msgid ""
":class:`contextlib.AbstractContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractContextManager` は添字表記 (``[]``) をサポートする"
"ようになりました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:2050
msgid "A generic version of :class:`contextlib.AbstractAsyncContextManager`."
msgstr ":class:`contextlib.AbstractAsyncContextManager` のジェネリック版です。"

#: ../../library/typing.rst:2055
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractAsyncContextManager` は添字表記 (``[]``) をサポー"
"トするようになりました。\n"
":pep:`585` と :ref:`types-genericalias` を参照してください。"

#: ../../library/typing.rst:2061
msgid "Protocols"
msgstr "プロトコル"

#: ../../library/typing.rst:2063
msgid "These protocols are decorated with :func:`runtime_checkable`."
msgstr ""

#: ../../library/typing.rst:2067
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr "返り値の型と共変な抽象メソッド ``__abs__`` を備えた ABC です。"

#: ../../library/typing.rst:2072
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "抽象メソッド ``__bytes__`` を備えた ABC です。"

#: ../../library/typing.rst:2076
msgid "An ABC with one abstract method ``__complex__``."
msgstr "抽象メソッド ``__complex__`` を備えた ABC です。"

#: ../../library/typing.rst:2080
msgid "An ABC with one abstract method ``__float__``."
msgstr "抽象メソッド ``__float__`` を備えた ABC です。"

#: ../../library/typing.rst:2084
msgid "An ABC with one abstract method ``__index__``."
msgstr "抽象メソッド ``__index__`` を備えた ABC です。"

#: ../../library/typing.rst:2090
msgid "An ABC with one abstract method ``__int__``."
msgstr "抽象メソッド ``__int__`` を備えた ABC です。"

#: ../../library/typing.rst:2094
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr "返り値の型と共変な抽象メソッド ``__round__`` を備えた ABC です。"

#: ../../library/typing.rst:2098
msgid "Functions and decorators"
msgstr ""

#: ../../library/typing.rst:2102
msgid "Cast a value to a type."
msgstr "値をある型にキャストします。"

#: ../../library/typing.rst:2104
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""
"この関数は値を変更せずに返します。\n"
"型検査器に対して、返り値が指定された型を持っていることを通知しますが、実行時"
"には意図的に何も検査しません。\n"
"(その理由は、処理をできる限り速くしたかったためです。)"

#: ../../library/typing.rst:2111
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method). The "
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition, while the latter is used at runtime but should be ignored by a "
"type checker.  At runtime, calling a ``@overload``-decorated function "
"directly will raise :exc:`NotImplementedError`. An example of overload that "
"gives a more precise type than can be expressed using a union or a type "
"variable::"
msgstr ""
"``@overload`` デコレータを使うと、引数の型の複数の組み合わせをサポートする関"
"数やメソッドを書けるようになります。\n"
"``@overload`` 付きの定義を並べた後ろに、(同じ関数やメソッドの) ``@overload`` "
"無しの定義が来なければなりません。\n"
"``@overload`` 付きの定義は型チェッカーのためでしかありません。\n"
"というのも、 ``@overload`` 付きの定義は ``@overload`` 無しの定義で上書きされ"
"るからです。\n"
"後者は実行時に使われますが、型チェッカーからは無視されるべきなのです。\n"
"実行時には、 ``@overload`` 付きの関数を直接呼び出すと :exc:"
"`NotImplementedError` を送出します。\n"
"次のコードはオーバーロードを使うことで直和型や型変数を使うよりもより正確な型"
"が表現できる例です::"

#: ../../library/typing.rst:2135
msgid ""
"See :pep:`484` for more details and comparison with other typing semantics."
msgstr "詳細と他の型付け意味論との比較は :pep:`484` を参照してください。"

#: ../../library/typing.rst:2139
msgid ""
"A decorator to indicate to type checkers that the decorated method cannot be "
"overridden, and the decorated class cannot be subclassed. For example::"
msgstr ""

#: ../../library/typing.rst:2164
msgid "Decorator to indicate that annotations are not type hints."
msgstr "アノテーションが型ヒントでないことを示すデコレータです。"

#: ../../library/typing.rst:2166
msgid ""
"This works as class or function :term:`decorator`.  With a class, it applies "
"recursively to all methods defined in that class (but not to methods defined "
"in its superclasses or subclasses)."
msgstr ""
"これはクラス :term:`decorator` または関数 :term:`decorator` として動作しま"
"す。クラス :term:`decorator` として動作する場合は、そのクラス内に定義されたす"
"べてのメソッドに対して再帰的に適用されます。（ただしスーパークラスやサブクラ"
"ス内に定義されたメソッドには適用されません。）"

#: ../../library/typing.rst:2170
msgid "This mutates the function(s) in place."
msgstr "これは関数を適切に変更します。"

#: ../../library/typing.rst:2174
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr "別のデコレータに :func:`no_type_check` の効果を与えるデコレータです。"

#: ../../library/typing.rst:2176
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr ""
"これは何かの関数をラップするデコレータを :func:`no_type_check` でラップしま"
"す。"

#: ../../library/typing.rst:2181
msgid "Decorator to mark a class or function to be unavailable at runtime."
msgstr "実行時に使えなくなるクラスや関数に印を付けるデコレータです。"

#: ../../library/typing.rst:2183
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""
"このデコレータ自身は実行時には使えません。\n"
"このデコレータは主に、実装がプライベートクラスのインスタンスを返す場合に、型"
"スタブファイルに定義されているクラスに対して印を付けるためのものです::"

#: ../../library/typing.rst:2194
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""
"プライベートクラスのインスタンスを返すのは推奨されません。\n"
"そのようなクラスは公開クラスにするのが望ましいです。"

#: ../../library/typing.rst:2198
msgid "Introspection helpers"
msgstr ""

#: ../../library/typing.rst:2202
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""
"関数、メソッド、モジュールまたはクラスのオブジェクトの型ヒントを含む辞書を返"
"します。"

#: ../../library/typing.rst:2205
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. If necessary, ``Optional[t]`` is "
"added for function and method annotations if a default value equal to "
"``None`` is set. For a class ``C``, return a dictionary constructed by "
"merging all the ``__annotations__`` along ``C.__mro__`` in reverse order."
msgstr ""
"この辞書はたいてい ``obj.__annotations__`` と同じものです。\n"
"それに加えて、文字列リテラルにエンコードされた順方向参照は ``globals`` 名前空"
"間および ``locals`` 名前空間で評価されます。\n"
"必要であれば、 ``None`` と等価なデフォルト値が設定されている場合に、関数とメ"
"ソッドのアノテーションに ``Optional[t]`` が追加されます。\n"
"クラス ``C`` については、 ``C.__mro__`` の逆順に沿って全ての "
"``__annotations__`` を合併して構築された辞書を返します。"

#: ../../library/typing.rst:2213
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example::"
msgstr ""

#: ../../library/typing.rst:2228
msgid ""
":func:`get_type_hints` does not work with imported :ref:`type aliases <type-"
"aliases>` that include forward references. Enabling postponed evaluation of "
"annotations (:pep:`563`) may remove the need for most forward references."
msgstr ""

#: ../../library/typing.rst:2233
msgid "Added ``include_extras`` parameter as part of :pep:`593`."
msgstr ""

#: ../../library/typing.rst:2236
msgid ""
"Calling ``get_type_hints()`` on a class no longer returns the annotations of "
"its base classes."
msgstr ""

#: ../../library/typing.rst:2243
msgid "Provide basic introspection for generic types and special typing forms."
msgstr "ジェネリック型や特殊な型付け形式についての基本的な内観を提供します。"

#: ../../library/typing.rst:2245
msgid ""
"For a typing object of the form ``X[Y, Z, ...]`` these functions return "
"``X`` and ``(Y, Z, ...)``. If ``X`` is a generic alias for a builtin or :mod:"
"`collections` class, it gets normalized to the original class. If ``X`` is a "
"union or :class:`Literal` contained in another generic type, the order of "
"``(Y, Z, ...)`` may be different from the order of the original arguments "
"``[Y, Z, ...]`` due to type caching. For unsupported objects return ``None`` "
"and ``()`` correspondingly. Examples::"
msgstr ""

#: ../../library/typing.rst:2264
msgid "Check if a type is a :class:`TypedDict`."
msgstr ""

#: ../../library/typing.rst:2279
msgid ""
"A class used for internal typing representation of string forward "
"references. For example, ``List[\"SomeClass\"]`` is implicitly transformed "
"into ``List[ForwardRef(\"SomeClass\")]``.  This class should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""
"文字列による前方参照の内部的な型付け表現に使われるクラスです。\n"
"例えば、 ``List[\"SomeClass\"]`` は暗黙的に "
"``List[ForwardRef(\"SomeClass\")]`` に変換されます。\n"
"このクラスはユーザーがインスタンス化するべきではなく、イントロスペクション"
"ツールに使われるものです。"

#: ../../library/typing.rst:2285
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""

#: ../../library/typing.rst:2292
msgid "Constant"
msgstr "定数"

#: ../../library/typing.rst:2296
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime. Usage::"
msgstr ""
"サードパーティーの静的型検査器が ``True`` と仮定する特別な定数です。 実行時に"
"は ``False`` になります。使用例::"

#: ../../library/typing.rst:2305
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""
" ``expensive_mod`` への参照をインタープリタランタイムから隠蔽するために、最初"
"の型アノーテーションはシングルクォートで囲んで \"前方参照\" にしなければなり"
"ません。局所変数に対する型アノーテーションは評価されないので、２つめの型ア"
"ノーテーションはシングルクォートで囲む必要はありません。"

#: ../../library/typing.rst:2312
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as strings "
"in ``__annotations__``. This makes it unnecessary to use quotes around the "
"annotation (see :pep:`563`)."
msgstr ""
"``from __future__ import annotations`` が使われた場合、アノーテーションは関数"
"定義時に評価されません。代わりにアノーテーションは ``__annotations__`` 属性に"
"文字列として保存されます。これによりアノーテーションをシングルクォートで囲む"
"必要がなくなります (:pep:`563` を参照してください)。"
