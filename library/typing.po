# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 03:30+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/typing.rst:2
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`typing` --- 型ヒントのサポート"

#: ../../library/typing.rst:9
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**ソースコード:** :source:`Lib/typing.py`"

#: ../../library/typing.rst:13
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as type checkers, IDEs, linters, "
"etc."
msgstr ""
"Python ランタイムは、関数や変数の型アノテーションを強制しません。\n"
"型アノテーションは、型チェッカー、IDE、linterなどのサードパーティーツールで使"
"われます。"

#: ../../library/typing.rst:19
msgid ""
"This module supports type hints as specified by :pep:`484` and :pep:`526`. "
"The most fundamental support consists of the types :data:`Any`, :data:"
"`Union`, :data:`Tuple`, :data:`Callable`, :class:`TypeVar`, and :class:"
"`Generic`.  For full specification please see :pep:`484`.  For a simplified "
"introduction to type hints see :pep:`483`."
msgstr ""
"このモジュールは :pep:`484` と :pep:`526` によって規定された型ヒントをサポー"
"トします。最も基本的なサポートとして :data:`Any`、 :data:`Union`、 :data:"
"`Tuple`、 :data:`Callable`、 :class:`TypeVar` および :class:`Generic` 型を含"
"みます。完全な仕様は :pep:`484` を参照してください。型ヒントの簡単な導入は :"
"pep:`483` を参照してください。"

#: ../../library/typing.rst:26
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr ""
"以下の関数は文字列を受け取って文字列を返す関数で、次のようにアノテーションが"
"つけられます::"

#: ../../library/typing.rst:31
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as "
"arguments."
msgstr ""
"関数 ``greeting`` で、実引数 ``name`` の型は :class:`str` であり、返り値の型"
"は :class:`str` であることが期待されます。サブタイプも実引数として許容されま"
"す。"

#: ../../library/typing.rst:36
msgid "Type aliases"
msgstr "型エイリアス"

#: ../../library/typing.rst:38
msgid ""
"A type alias is defined by assigning the type to the alias. In this example, "
"``Vector`` and ``List[float]`` will be treated as interchangeable synonyms::"
msgstr ""
"型エイリアスは型をエイリアスに代入することで定義されます。この例では "
"``Vector`` と ``List[float]`` は交換可能な同義語として扱われます。"

#: ../../library/typing.rst:50
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr "型エイリアスは複雑な型シグネチャを単純化するのに有用です。例えば::"

#: ../../library/typing.rst:68
msgid ""
"Note that ``None`` as a type hint is a special case and is replaced by "
"``type(None)``."
msgstr ""
"型ヒントとしての ``None`` は特別なケースであり、 ``type(None)`` によって置き"
"換えられます。"

#: ../../library/typing.rst:74
msgid "NewType"
msgstr "NewType"

#: ../../library/typing.rst:76
msgid "Use the :func:`NewType` helper function to create distinct types::"
msgstr "異なる型を作るためには :func:`NewType` ヘルパー関数を使います::"

#: ../../library/typing.rst:83
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""
"静的型検査器は新しい型を元々の型のサブクラスのように扱います。この振る舞いは"
"論理的な誤りを見つける手助けとして役に立ちます。"

#: ../../library/typing.rst:95
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"``UserId`` 型の変数も ``int`` の全ての演算が行えますが、その結果は常に "
"``int`` 型になります。\n"
"この振る舞いにより、 ``int`` が期待されるところに ``UserId`` を渡せますが、不"
"正な方法で ``UserId`` を作ってしまうことを防ぎます。"

#: ../../library/typing.rst:103
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a function that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce any overhead beyond that of a regular function call."
msgstr ""
"これらのチェックは静的型検査器のみによって強制されるということに注意してくだ"
"さい。実行時に ``Derived = NewType('Derived', Base)`` という文は渡された仮引"
"数をただちに返す ``Derived`` 関数を作ります。つまり ``Derived(some_value)`` "
"という式は新しいクラスを作ることはなく、通常の関数呼び出し以上のオーバーヘッ"
"ドがないということを意味します。"

#: ../../library/typing.rst:109
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""
"より正確に言うと、式 ``some_value is Derived(some_value)`` は実行時に常に真を"
"返します。"

#: ../../library/typing.rst:112
msgid ""
"This also means that it is not possible to create a subtype of ``Derived`` "
"since it is an identity function at runtime, not an actual type::"
msgstr ""
"これは ``Derived`` のサブタイプを作ることが出来ないということも意味していま"
"す。\n"
"``Derived`` は実行時には恒等関数になっていて、実際の型ではないからです::"

#: ../../library/typing.rst:122
msgid ""
"However, it is possible to create a :func:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""
"しかし、 'derived' である ``NewType`` をもとにした :func:`NewType` は作ること"
"が出来ます::"

#: ../../library/typing.rst:130
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr "そして ``ProUserId`` に対する型検査は期待通りに動作します。"

#: ../../library/typing.rst:132
msgid "See :pep:`484` for more details."
msgstr "より詳しくは :pep:`484` を参照をしてください。"

#: ../../library/typing.rst:136
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``Alias = Original`` will make the static type checker "
"treat ``Alias`` as being *exactly equivalent* to ``Original`` in all cases. "
"This is useful when you want to simplify complex type signatures."
msgstr ""
"型エイリアスの使用は二つの型が互いに *等価* だと宣言している、ということを思"
"い出してください。 ``Alias = Original`` とすると、静的型検査器は ``Alias`` を"
"すべての場合において ``Original`` と *完全に等価* なものとして扱います。これ"
"は複雑な型シグネチャを単純化したい時に有用です。"

#: ../../library/typing.rst:141
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"これに対し、 ``NewType`` はある型をもう一方の型の *サブタイプ* として宣言しま"
"す。 ``Derived = NewType('Derived', Original)`` とすると静的型検査器は "
"``Derived`` を ``Original`` の *サブクラス* として扱います。つまり "
"``Original`` 型の値は ``Derived`` 型の値が期待される場所で使うことが出来ない"
"ということです。これは論理的な誤りを最小の実行時のコストで防ぎたい時に有用で"
"す。"

#: ../../library/typing.rst:151
msgid "Callable"
msgstr "呼び出し可能オブジェクト"

#: ../../library/typing.rst:153
msgid ""
"Frameworks expecting callback functions of specific signatures might be type "
"hinted using ``Callable[[Arg1Type, Arg2Type], ReturnType]``."
msgstr ""
"特定のシグネチャを持つコールバック関数を要求されるフレームワークでは、 "
"``Callable[[Arg1Type, Arg2Type], ReturnType]`` を使って型ヒントを付けます。"

#: ../../library/typing.rst:156
msgid "For example::"
msgstr "例えば::"

#: ../../library/typing.rst:167
msgid ""
"It is possible to declare the return type of a callable without specifying "
"the call signature by substituting a literal ellipsis for the list of "
"arguments in the type hint: ``Callable[..., ReturnType]``."
msgstr ""
"型ヒントの実引数の型を ellipsis で置き換えることで呼び出しシグニチャを指定せ"
"ずに callable の戻り値の型を宣言することができます: ``Callable[..., "
"ReturnType]``。"

#: ../../library/typing.rst:174
msgid "Generics"
msgstr "ジェネリクス"

#: ../../library/typing.rst:176
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, abstract base classes have been extended to "
"support subscription to denote expected types for container elements."
msgstr ""
"コンテナ内のオブジェクトについての型情報は一般的な方法では静的に推論できない"
"ため、抽象基底クラスを継承したクラスが実装され、期待されるコンテナの要素の型"
"を示すために添字表記をサポートするようになりました。"

#: ../../library/typing.rst:187
msgid ""
"Generics can be parameterized by using a new factory available in typing "
"called :class:`TypeVar`."
msgstr ""
"ジェネリクスは、 typing にある :class:`TypeVar` と呼ばれる新しいファクトリを"
"使ってパラメータ化することができます。"

#: ../../library/typing.rst:201
msgid "User-defined generic types"
msgstr "ユーザー定義のジェネリック型"

#: ../../library/typing.rst:203
msgid "A user-defined class can be defined as a generic class."
msgstr "ユーザー定義のクラスを、ジェネリッククラスとして定義できます。"

#: ../../library/typing.rst:229
msgid ""
"``Generic[T]`` as a base class defines that the class ``LoggedVar`` takes a "
"single type parameter ``T`` . This also makes ``T`` valid as a type within "
"the class body."
msgstr ""
"``Generic[T]`` を基底クラスにすることで、 ``LoggedVar`` クラスが 1 つの型引"
"数 ``T`` をとる、と定義できます。\n"
"この定義により、クラスの本体の中でも ``T`` が型として有効になります。"

#: ../../library/typing.rst:233
msgid ""
"The :class:`Generic` base class defines :meth:`__class_getitem__` so that "
"``LoggedVar[t]`` is valid as a type::"
msgstr ""
"基底クラス :class:`Generic` には ``LoggedVar[t]`` が型として有効になるよう"
"に :meth:`__class_getitem__` メソッドが定義されています::"

#: ../../library/typing.rst:242
msgid ""
"A generic type can have any number of type variables, and type variables may "
"be constrained::"
msgstr ""
"ジェネリック型は任意の数の型変数をとれます、また型変数に制約をつけられます::"

#: ../../library/typing.rst:254
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""
":class:`Generic` の引数のそれぞれの型変数は別のものでなければなりません。この"
"ため次のクラス定義は無効です::"

#: ../../library/typing.rst:265
msgid "You can use multiple inheritance with :class:`Generic`::"
msgstr ":class:`Generic` を用いて多重継承が可能です::"

#: ../../library/typing.rst:274
msgid ""
"When inheriting from generic classes, some type variables could be fixed::"
msgstr ""
"ジェネリッククラスを継承するとき、いくつかの型変数を固定することが出来ます::"

#: ../../library/typing.rst:283
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "この場合では ``MyDict`` は仮引数 ``T`` を 1 つとります。"

#: ../../library/typing.rst:285
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``::"
msgstr ""
"型引数を指定せずにジェネリッククラスを使う場合、それぞれの型引数に :data:"
"`Any` を与えられたものとして扱います。\n"
"次の例では、``MyIterable`` はジェネリックではありませんが ``Iterable[Any]`` "
"を暗黙的に継承しています::"

#: ../../library/typing.rst:293
msgid "User defined generic type aliases are also supported. Examples::"
msgstr "ユーザ定義のジェネリック型エイリアスもサポートされています。例::"

#: ../../library/typing.rst:309
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` にあった独自のメタクラスは無くなりました。"

#: ../../library/typing.rst:312
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are "
"hashable and comparable for equality."
msgstr ""
"ユーザーが定義したジェネリッククラスはメタクラスの衝突を起こすことなく基底ク"
"ラスに抽象基底クラスをとれます。\n"
"ジェネリックメタクラスはサポートされません。\n"
"パラメータ化を行うジェネリクスの結果はキャッシュされていて、 typing モジュー"
"ルのほとんどの型はハッシュ化でき、等価比較できます。"

#: ../../library/typing.rst:319
msgid "The :data:`Any` type"
msgstr ":data:`Any` 型"

#: ../../library/typing.rst:321
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
":data:`Any` は特別な種類の型です。静的型検査器はすべての型を :data:`Any` と互"
"換として扱い、 :data:`Any` をすべての型と互換として扱います。"

#: ../../library/typing.rst:325
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type on :data:`Any` and assign it to any variable::"
msgstr ""
"つまり、 :data:`Any` 型の値に対し任意の演算やメソッド呼び出しができ、任意の変"
"数に代入できるということです。"

#: ../../library/typing.rst:343
msgid ""
"Notice that no typechecking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
":data:`Any` 型の値をより詳細な型に代入する時に型検査が行われないことに注意し"
"てください。例えば、静的型検査器は ``a`` を ``s`` に代入する時、``s`` が :"
"class:`str` 型として宣言されていて実行時に :class:`int` の値を受け取るとして"
"も、エラーを報告しません。"

#: ../../library/typing.rst:349
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""
"さらに、返り値や引数の型のないすべての関数は暗黙的に :data:`Any` を使用しま"
"す。"

#: ../../library/typing.rst:362
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""
"この挙動により、動的型付けと静的型付けが混在したコードを書かなければならない"
"時に :data:`Any` を *非常口* として使用することができます。"

#: ../../library/typing.rst:365
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
":data:`Any` の挙動と :class:`object` の挙動を対比しましょう。 :data:`Any` と"
"同様に、すべての型は :class:`object` のサブタイプです。しかしながら、 :data:"
"`Any` と異なり、逆は成り立ちません: :class:`object` はすべての他の型のサブタ"
"イプでは *ありません*。"

#: ../../library/typing.rst:370
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"これは、ある値の型が :class:`object` のとき、型検査器はこれについてのほとんど"
"すべての操作を拒否し、これをより特殊化された変数に代入する (または返り値とし"
"て利用する) ことは型エラーになることを意味します。例えば::"

#: ../../library/typing.rst:392
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""
":class:`object` は、ある値が型安全な方法で任意の型として使えることを示すため"
"に使用します。 :data:`Any` はある値が動的に型付けられることを示すために使用し"
"ます。"

#: ../../library/typing.rst:396
msgid "Classes, functions, and decorators"
msgstr "クラス、関数、およびデコレータ"

#: ../../library/typing.rst:398
msgid "The module defines the following classes, functions and decorators:"
msgstr "このモジュールでは以下のクラス、関数とデコレータを定義します:"

#: ../../library/typing.rst:402
msgid "Type variable."
msgstr "型変数です。"

#: ../../library/typing.rst:404 ../../library/typing.rst:833
msgid "Usage::"
msgstr "使い方::"

#: ../../library/typing.rst:409
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function definitions.  See class Generic for more information on generic "
"types.  Generic functions work as follows::"
msgstr ""
"型変数は主として静的型検査器のために存在します。型変数はジェネリック型やジェ"
"ネリック関数の定義の引数として役に立ちます。ジェネリック型についての詳細は "
"Generic クラスを参照してください。ジェネリック関数は以下のように動作します::"

#: ../../library/typing.rst:422
msgid ""
"The latter example's signature is essentially the overloading of ``(str, "
"str) -> str`` and ``(bytes, bytes) -> bytes``.  Also note that if the "
"arguments are instances of some subclass of :class:`str`, the return type is "
"still plain :class:`str`."
msgstr ""
"後者の例のシグネチャは本質的に ``(str, str) -> str`` と ``(bytes, bytes) -> "
"bytes`` のオーバーロードです。もし引数が :class:`str` のサブクラスのインスタ"
"ンスの場合、返り値は普通の :class:`str` であることに注意して下さい。"

#: ../../library/typing.rst:427
msgid ""
"At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`.  In general, :"
"func:`isinstance` and :func:`issubclass` should not be used with types."
msgstr ""
"実行時に、``isinstance(x, T)`` は :exc:`TypeError` を送出するでしょう。一般的"
"に、:func:`isinstance` と :func:`issubclass` は型に対して使用するべきではあり"
"ません。"

#: ../../library/typing.rst:430
msgid ""
"Type variables may be marked covariant or contravariant by passing "
"``covariant=True`` or ``contravariant=True``.  See :pep:`484` for more "
"details.  By default type variables are invariant.  Alternatively, a type "
"variable may specify an upper bound using ``bound=<type>``. This means that "
"an actual type substituted (explicitly or implicitly) for the type variable "
"must be a subclass of the boundary type, see :pep:`484`."
msgstr ""
"型変数は ``covariant=True`` または ``contravariant=True`` を渡すことによって"
"共変または反変であることを示せます。詳細は :pep:`484` を参照して下さい。デ"
"フォルトの型変数は不変です。あるいは、型変数は ``bound=<type>`` を使うことで"
"上界を指定することが出来ます。これは、型変数に (明示的または非明示的に) 代入"
"された実際の型が境界の型のサブクラスでなければならないということを意味しま"
"す、:pep:`484` も参照。"

#: ../../library/typing.rst:440
msgid "Abstract base class for generic types."
msgstr "ジェネリック型のための抽象基底クラスです。"

#: ../../library/typing.rst:442
msgid ""
"A generic type is typically declared by inheriting from an instantiation of "
"this class with one or more type variables. For example, a generic mapping "
"type might be defined as::"
msgstr ""
"ジェネリック型は典型的にはこのクラスを1つ以上の型変数によってインスタンス化し"
"たものを継承することによって宣言されます。例えば、ジェネリックマップ型は次の"
"ように定義することが出来ます::"

#: ../../library/typing.rst:451
msgid "This class can then be used as follows::"
msgstr "このクラスは次のように使用することが出来ます::"

#: ../../library/typing.rst:464
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``Type[C]`` may accept values that are "
"classes themselves -- specifically, it will accept the *class object* of "
"``C``. For example::"
msgstr ""
"``C`` と注釈が付けされた変数は ``C`` 型の値を受理します。一方で ``Type[C]`` "
"と注釈が付けられた変数は、そのクラス自身を受理します -- 具体的には、それは "
"``C`` の *クラスオブジェクト* を受理します。例::"

#: ../../library/typing.rst:473
msgid "Note that ``Type[C]`` is covariant::"
msgstr "``Type[C]`` は共変であることに注意してください::"

#: ../../library/typing.rst:485
msgid ""
"The fact that ``Type[C]`` is covariant implies that all subclasses of ``C`` "
"should implement the same constructor signature and class method signatures "
"as ``C``. The type checker should flag violations of this, but should also "
"allow constructor calls in subclasses that match the constructor calls in "
"the indicated base class. How the type checker is required to handle this "
"particular case may change in future revisions of :pep:`484`."
msgstr ""
"``Type[C]`` が共変だということは、 ``C`` の全てのサブクラスは、 ``C`` と同じ"
"シグネチャのコンストラクタとクラスメソッドを実装すべきだということになりま"
"す。\n"
"型チェッカーはこの規則への違反に印を付けるべきですが、サブクラスでのコンスト"
"ラクタ呼び出しで、指定された基底クラスのコンストラクタ呼び出しに適合するもの"
"は許可すべきです。\n"
"この特別な場合を型チェッカーがどう扱うべきかについては、 :pep:`484` の将来の"
"バージョンで変更されるかもしれません。"

#: ../../library/typing.rst:493
msgid ""
"The only legal parameters for :class:`Type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""
":class:`Type` で許されているパラメータは、クラス、 :data:`Any` 、 :ref:`型変"
"数 <generics>` あるいは、それらの直和型だけです。\n"
"例えば次のようになります::"

#: ../../library/typing.rst:499
msgid ""
"``Type[Any]`` is equivalent to ``Type`` which in turn is equivalent to "
"``type``, which is the root of Python's metaclass hierarchy."
msgstr ""
"``Type[Any]`` は ``Type`` と等価で、同様に ``Type`` は ``type`` と等価です。"
"``type`` は Python のメタクラス階層のルートです。"

#: ../../library/typing.rst:506
msgid "A generic version of :class:`collections.abc.Iterable`."
msgstr ":class:`collections.abc.Iterable` のジェネリック版です。"

#: ../../library/typing.rst:510
msgid "A generic version of :class:`collections.abc.Iterator`."
msgstr ":class:`collections.abc.Iterator` のジェネリック版です。"

#: ../../library/typing.rst:514
msgid "A generic version of :class:`collections.abc.Reversible`."
msgstr ":class:`collections.abc.Reversible` のジェネリック版です。"

#: ../../library/typing.rst:518
msgid "An ABC with one abstract method ``__int__``."
msgstr "抽象メソッド ``__int__`` を備えた ABC です。"

#: ../../library/typing.rst:522
msgid "An ABC with one abstract method ``__float__``."
msgstr "抽象メソッド ``__float__`` を備えた ABC です。"

#: ../../library/typing.rst:526
msgid "An ABC with one abstract method ``__complex__``."
msgstr "抽象メソッド ``__complex__`` を備えた ABC です。"

#: ../../library/typing.rst:530
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "抽象メソッド ``__bytes__`` を備えた ABC です。"

#: ../../library/typing.rst:534
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr "返り値の型と共変な抽象メソッド ``__abs__`` を備えた ABC です。"

#: ../../library/typing.rst:539
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr "返り値の型と共変な抽象メソッド ``__round__`` を備えた ABC です。"

#: ../../library/typing.rst:544
msgid "A generic version of :class:`collections.abc.Container`."
msgstr ":class:`collections.abc.Container` のジェネリック版です。"

#: ../../library/typing.rst:548
msgid "An alias to :class:`collections.abc.Hashable`"
msgstr ":class:`collections.abc.Hashable` へのエイリアス"

#: ../../library/typing.rst:552
msgid "An alias to :class:`collections.abc.Sized`"
msgstr ":class:`collections.abc.Sized` へのエイリアス"

#: ../../library/typing.rst:556
msgid "A generic version of :class:`collections.abc.Collection`"
msgstr ":class:`collections.abc.Collection` のジェネリック版です。"

#: ../../library/typing.rst:562
msgid "A generic version of :class:`collections.abc.Set`."
msgstr ":class:`collections.abc.Set` のジェネリック版です。"

#: ../../library/typing.rst:566
msgid "A generic version of :class:`collections.abc.MutableSet`."
msgstr ":class:`collections.abc.MutableSet` のジェネリック版です。"

#: ../../library/typing.rst:570
msgid ""
"A generic version of :class:`collections.abc.Mapping`. This type can be used "
"as follows::"
msgstr ""
":class:`collections.abc.Mapping` のジェネリック版です。\n"
"この型は次のように使えます::"

#: ../../library/typing.rst:578
msgid "A generic version of :class:`collections.abc.MutableMapping`."
msgstr ":class:`collections.abc.MutableMapping` のジェネリック版です。"

#: ../../library/typing.rst:582
msgid "A generic version of :class:`collections.abc.Sequence`."
msgstr ":class:`collections.abc.Sequence` のジェネリック版です。"

#: ../../library/typing.rst:586
msgid "A generic version of :class:`collections.abc.MutableSequence`."
msgstr ":class:`collections.abc.MutableSequence` のジェネリック版です。"

#: ../../library/typing.rst:590
msgid "A generic version of :class:`collections.abc.ByteString`."
msgstr ":class:`collections.abc.ByteString` のジェネリック版です。"

#: ../../library/typing.rst:592
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview`."
msgstr ""
"この型は :class:`bytes` と :class:`bytearray` 、 :class:`memoryview` を表しま"
"す。"

#: ../../library/typing.rst:595
msgid ""
"As a shorthand for this type, :class:`bytes` can be used to annotate "
"arguments of any of the types mentioned above."
msgstr ""
"この型の省略形として、 :class:`bytes` を上に挙げた任意の型の引数にアノテー"
"ションをつけることに使えます。"

#: ../../library/typing.rst:600
msgid "A generic version of :class:`collections.deque`."
msgstr ":class:`collections.deque` のジェネリック版です。"

#: ../../library/typing.rst:607
msgid ""
"Generic version of :class:`list`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Sequence` or :class:`Iterable`."
msgstr ""
":class:`list` のジェネリック版です。\n"
"返り値の型のアノテーションをつけるのに便利です。\n"
"引数にアノテーションをつけるためには、 :class:`Sequence` や :class:"
"`Iterable` のような抽象コレクション型を使うことが好ましいです。"

#: ../../library/typing.rst:612
msgid "This type may be used as follows::"
msgstr "この型は次のように使えます::"

#: ../../library/typing.rst:624
msgid ""
"A generic version of :class:`builtins.set <set>`. Useful for annotating "
"return types. To annotate arguments it is preferred to use an abstract "
"collection type such as :class:`AbstractSet`."
msgstr ""
":class:`builtins.set <set>` のジェネリック版です。\n"
"返り値の型のアノテーションをつけるのに便利です。\n"
"引数にアノテーションをつけるためには、 :class:`AbstractSet` のような抽象コレ"
"クション型を使うことが好ましいです。"

#: ../../library/typing.rst:630
msgid "A generic version of :class:`builtins.frozenset <frozenset>`."
msgstr ":class:`builtins.frozenset <frozenset>` のジェネリック版です。"

#: ../../library/typing.rst:634
msgid "A generic version of :class:`collections.abc.MappingView`."
msgstr ":class:`collections.abc.MappingView` のジェネリック版です。"

#: ../../library/typing.rst:638
msgid "A generic version of :class:`collections.abc.KeysView`."
msgstr ":class:`collections.abc.KeysView` のジェネリック版です。"

#: ../../library/typing.rst:642
msgid "A generic version of :class:`collections.abc.ItemsView`."
msgstr ":class:`collections.abc.ItemsView` のジェネリック版です。"

#: ../../library/typing.rst:646
msgid "A generic version of :class:`collections.abc.ValuesView`."
msgstr ":class:`collections.abc.ValuesView` のジェネリック版です。"

#: ../../library/typing.rst:650
msgid "A generic version of :class:`collections.abc.Awaitable`."
msgstr ":class:`collections.abc.Awaitable` のジェネリック版です。"

#: ../../library/typing.rst:656
msgid ""
"A generic version of :class:`collections.abc.Coroutine`. The variance and "
"order of type variables correspond to those of :class:`Generator`, for "
"example::"
msgstr ""
":class:`collections.abc.Coroutine` のジェネリック版です。\n"
"変性と型変数の順序は :class:`Generator` のものと対応しています。例えば次のよ"
"うになります::"

#: ../../library/typing.rst:671
msgid "A generic version of :class:`collections.abc.AsyncIterable`."
msgstr ":class:`collections.abc.AsyncIterable` のジェネリック版です。"

#: ../../library/typing.rst:677
msgid "A generic version of :class:`collections.abc.AsyncIterator`."
msgstr ":class:`collections.abc.AsyncIterator` のジェネリック版です。"

#: ../../library/typing.rst:683
msgid "A generic version of :class:`contextlib.AbstractContextManager`."
msgstr ":class:`contextlib.AbstractContextManager` のジェネリック版です。"

#: ../../library/typing.rst:690
msgid "A generic version of :class:`contextlib.AbstractAsyncContextManager`."
msgstr ":class:`contextlib.AbstractAsyncContextManager` のジェネリック版です。"

#: ../../library/typing.rst:697
msgid ""
"A generic version of :class:`dict`. Useful for annotating return types. To "
"annotate arguments it is preferred to use an abstract collection type such "
"as :class:`Mapping`."
msgstr ""
":class:`dict` のジェネリック版です。\n"
"返り値の型のアノテーションをつけることに便利です。\n"
"引数にアノテーションをつけるためには、 :class:`Mapping` のような抽象コレク"
"ション型を使うことが好ましいです。"

#: ../../library/typing.rst:701
msgid "This type can be used as follows::"
msgstr "この型は次のように使えます::"

#: ../../library/typing.rst:708
msgid "A generic version of :class:`collections.defaultdict`."
msgstr ":class:`collections.defaultdict` のジェネリック版です。"

#: ../../library/typing.rst:714
msgid "A generic version of :class:`collections.OrderedDict`."
msgstr ":class:`collections.OrderedDict` のジェネリック版です。"

#: ../../library/typing.rst:720
msgid "A generic version of :class:`collections.Counter`."
msgstr ":class:`collections.Counter` のジェネリック版です。"

#: ../../library/typing.rst:727
msgid "A generic version of :class:`collections.ChainMap`."
msgstr ":class:`collections.ChainMap` のジェネリック版です。"

#: ../../library/typing.rst:734
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""
"ジェネレータはジェネリック型 ``Generator[YieldType, SendType, ReturnType]`` "
"によってアノテーションを付けられます。例えば::"

#: ../../library/typing.rst:743
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""
"typing モジュールの多くの他のジェネリクスと違い :class:`Generator` の "
"``SendType`` は共変や不変ではなく、反変として扱われることに注意してください。"

#: ../../library/typing.rst:747
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""
"もしジェネレータが値を返すだけの場合は、 ``SendType`` と ``ReturnType`` に "
"``None`` を設定してください::"

#: ../../library/typing.rst:755
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""
"代わりに、ジェネレータを ``Iterable[YieldType]`` や ``Iterator[YieldType]`` "
"という返り値の型でアノテーションをつけることもできます::"

#: ../../library/typing.rst:765
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""
"非同期ジェネレータはジェネリック型 ``AsyncGenerator[YieldType, SendType]`` に"
"よってアノテーションを付けられます。例えば::"

#: ../../library/typing.rst:774
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""
"通常のジェネレータと違って非同期ジェネレータは値を返せないので、"
"``ReturnType`` 型引数はありません。:class:`Generator` と同様に、``SendType`` "
"は反変的に振る舞います。"

#: ../../library/typing.rst:778
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr ""
"ジェネレータが値を yield するだけなら、``SendType`` を ``None`` にします::"

#: ../../library/typing.rst:786
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""
"あるいは、ジェネレータが ``AsyncIterable[YieldType]`` と "
"``AsyncIterator[YieldType]`` のいずれかの戻り値型を持つとアノテートします::"

#: ../../library/typing.rst:798
msgid ""
"``Text`` is an alias for ``str``. It is provided to supply a forward "
"compatible path for Python 2 code: in Python 2, ``Text`` is an alias for "
"``unicode``."
msgstr ""
"``Text`` は ``str`` のエイリアスです。これは Python 2 のコードの前方互換性を"
"提供するために設けられています: Python 2 では ``Text`` は ``unicode`` のエイ"
"リアスです。"

#: ../../library/typing.rst:802
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""
"``Text`` は Python 2 と Python 3 の両方と互換性のある方法で値が unicode 文字"
"列を含んでいなければならない場合に使用してください。"

#: ../../library/typing.rst:814
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""
"ジェネリック型 ``IO[AnyStr]`` とそのサブクラスの ``TextIO(IO[str])`` および "
"``BinaryIO(IO[bytes])`` は、 :func:`open` 関数が返すような I/O ストリームの型"
"を表します。"

#: ../../library/typing.rst:822
msgid ""
"These type aliases correspond to the return types from :func:`re.compile` "
"and :func:`re.match`.  These types (and the corresponding functions) are "
"generic in ``AnyStr`` and can be made specific by writing ``Pattern[str]``, "
"``Pattern[bytes]``, ``Match[str]``, or ``Match[bytes]``."
msgstr ""
"これらの型エイリアスは :func:`re.compile` と :func:`re.match` の返り値の型に"
"対応します。\n"
"これらの型 (と対応する関数) は ``AnyStr`` についてジェネリックで、"
"``Pattern[str]`` 、 ``Pattern[bytes]`` 、 ``Match[str]`` 、 ``Match[bytes]`` "
"と書くことで具体型にできます。"

#: ../../library/typing.rst:831
msgid "Typed version of :func:`collections.namedtuple`."
msgstr ":func:`collections.namedtuple` の型付き版です。"

#: ../../library/typing.rst:839
msgid "This is equivalent to::"
msgstr "これは次と等価です::"

#: ../../library/typing.rst:843
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr "フィールドにデフォルト値を与えるにはクラス本体で代入してください::"

#: ../../library/typing.rst:852
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""
"デフォルト値のあるフィールドはデフォルト値のないフィールドの後でなければなり"
"ません。"

#: ../../library/typing.rst:854
msgid ""
"The resulting class has two extra attributes: ``_field_types``, giving a "
"dict mapping field names to types, and ``_field_defaults``, a dict mapping "
"field names to default values.  (The field names are in the ``_fields`` "
"attribute, which is part of the namedtuple API.)"
msgstr ""
"結果としてできるクラスは二つの追加の属性を持ちます。一つは ``_field_types`` "
"で、フィールド名を型に結びつける辞書です。\n"
"もう一つは ``_field_defaults`` で、フィールド名をデフォルト値に結びつける辞書"
"です。\n"
"(フィールド名は namedtuple API の一つである ``_fields`` 属性にあります。)"

#: ../../library/typing.rst:859
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr "``NamedTuple`` のサブクラスは docstring やメソッドも持てます::"

#: ../../library/typing.rst:869
msgid "Backward-compatible usage::"
msgstr "後方互換な使用法::"

#: ../../library/typing.rst:873
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr ":pep:`526` 変数アノテーションのシンタックスが追加されました。"

#: ../../library/typing.rst:876
msgid "Added support for default values, methods, and docstrings."
msgstr ""
"デフォルト値、メソッド、ドキュメンテーション文字列への対応が追加されました。"

#: ../../library/typing.rst:881
msgid ""
"A class used for internal typing representation of string forward "
"references. For example, ``List[\"SomeClass\"]`` is implicitly transformed "
"into ``List[ForwardRef(\"SomeClass\")]``.  This class should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""
"文字列による前方参照の内部的な型付け表現に使われるクラスです。\n"
"例えば、 ``List[\"SomeClass\"]`` は暗黙的に "
"``List[ForwardRef(\"SomeClass\")]`` に変換されます。\n"
"このクラスはユーザーがインスタンス化するべきではなく、イントロスペクション"
"ツールに使われるものです。"

#: ../../library/typing.rst:888
msgid ""
"A helper function to indicate a distinct types to a typechecker, see :ref:"
"`distinct`. At runtime it returns a function that returns its argument. "
"Usage::"
msgstr ""
"異なる型であることを型チェッカーに教えるためのヘルパー関数です。\n"
":ref:`distinct` を参照してください。\n"
"実行時には、その引数を返す関数を返します。\n"
"使い方は次のようになります::"

#: ../../library/typing.rst:899
msgid "Cast a value to a type."
msgstr "値をある型にキャストします。"

#: ../../library/typing.rst:901
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""
"この関数は値を変更せずに返します。\n"
"型検査器に対して、返り値が指定された型を持っていることを通知しますが、実行時"
"には意図的に何も検査しません。\n"
"(その理由は、処理をできる限り速くしたかったためです。)"

#: ../../library/typing.rst:908
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""
"関数、メソッド、モジュールまたはクラスのオブジェクトの型ヒントを含む辞書を返"
"します。"

#: ../../library/typing.rst:911
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. If necessary, ``Optional[t]`` is "
"added for function and method annotations if a default value equal to "
"``None`` is set. For a class ``C``, return a dictionary constructed by "
"merging all the ``__annotations__`` along ``C.__mro__`` in reverse order."
msgstr ""
"この辞書はたいてい ``obj.__annotations__`` と同じものです。\n"
"それに加えて、文字列リテラルにエンコードされた順方向参照は ``globals`` 名前空"
"間および ``locals`` 名前空間で評価されます。\n"
"必要であれば、 ``None`` と等価なデフォルト値が設定されている場合に、関数とメ"
"ソッドのアノテーションに ``Optional[t]`` が追加されます。\n"
"クラス ``C`` については、 ``C.__mro__`` の逆順に沿って全ての "
"``__annotations__`` を合併して構築された辞書を返します。"

#: ../../library/typing.rst:921
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method). The "
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition, while the latter is used at runtime but should be ignored by a "
"type checker.  At runtime, calling a ``@overload``-decorated function "
"directly will raise :exc:`NotImplementedError`. An example of overload that "
"gives a more precise type than can be expressed using a union or a type "
"variable::"
msgstr ""
"``@overload`` デコレータを使うと、引数の型の複数の組み合わせをサポートする関"
"数やメソッドを書けるようになります。\n"
"``@overload`` 付きの定義を並べた後ろに、(同じ関数やメソッドの) ``@overload`` "
"無しの定義が来なければなりません。\n"
"``@overload`` 付きの定義は型チェッカーのためでしかありません。\n"
"というのも、 ``@overload`` 付きの定義は ``@overload`` 無しの定義で上書きされ"
"るからです。\n"
"後者は実行時に使われますが、型チェッカーからは無視されるべきなのです。\n"
"実行時には、 ``@overload`` 付きの関数を直接呼び出すと :exc:"
"`NotImplementedError` を送出します。\n"
"次のコードはオーバーロードを使うことで直和型や型変数を使うよりもより正確な型"
"が表現できる例です::"

#: ../../library/typing.rst:945
msgid "See :pep:`484` for details and comparison with other typing semantics."
msgstr "詳細と他の型付け意味論との比較は :pep:`484` を参照してください。"

#: ../../library/typing.rst:949
msgid "Decorator to indicate that annotations are not type hints."
msgstr "アノテーションが型ヒントでないことを示すデコレータです。"

#: ../../library/typing.rst:951
msgid ""
"This works as class or function :term:`decorator`.  With a class, it applies "
"recursively to all methods defined in that class (but not to methods defined "
"in its superclasses or subclasses)."
msgstr ""
"これはクラス :term:`decorator` または関数 :term:`decorator` として動作しま"
"す。クラス :term:`decorator` として動作する場合は、そのクラス内に定義されたす"
"べてのメソッドに対して再帰的に適用されます。（ただしスーパークラスやサブクラ"
"ス内に定義されたメソッドには適用されません。）"

#: ../../library/typing.rst:955
msgid "This mutates the function(s) in place."
msgstr "これは関数を適切に変更します。"

#: ../../library/typing.rst:959
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr "別のデコレータに :func:`no_type_check` の効果を与えるデコレータです。"

#: ../../library/typing.rst:961
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr ""
"これは何かの関数をラップするデコレータを :func:`no_type_check` でラップしま"
"す。"

#: ../../library/typing.rst:966
msgid "Decorator to mark a class or function to be unavailable at runtime."
msgstr "実行時に使えなくなるクラスや関数に印を付けるデコレータです。"

#: ../../library/typing.rst:968
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""
"このデコレータ自身は実行時には使えません。\n"
"このデコレータは主に、実装がプライベートクラスのインスタンスを返す場合に、型"
"スタブファイルに定義されているクラスに対して印を付けるためのものです::"

#: ../../library/typing.rst:979
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""
"プライベートクラスのインスタンスを返すのは推奨されません。\n"
"そのようなクラスは公開クラスにするのが望ましいです。"

#: ../../library/typing.rst:984
msgid "Special type indicating an unconstrained type."
msgstr "制約のない型であることを示す特別な型です。"

#: ../../library/typing.rst:986
msgid "Every type is compatible with :data:`Any`."
msgstr "任意の型は :data:`Any` と互換です。"

#: ../../library/typing.rst:987
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` は任意の型と互換です。"

#: ../../library/typing.rst:991
msgid "Special type indicating that a function never returns. For example::"
msgstr ""
"関数が返り値を持たないことを示す特別な型です。例えば次のように使います::"

#: ../../library/typing.rst:1004
msgid "Union type; ``Union[X, Y]`` means either X or Y."
msgstr "ユニオン型; ``Union[X, Y]`` は X または Y を表します。"

#: ../../library/typing.rst:1006
msgid "To define a union, use e.g. ``Union[int, str]``.  Details:"
msgstr ""
"ユニオン型を定義します、例えば ``Union[int, str]`` のように使います。詳細:"

#: ../../library/typing.rst:1008
msgid "The arguments must be types and there must be at least one."
msgstr "引数は型でなければならず、少なくとも一つ必要です。"

#: ../../library/typing.rst:1010
msgid "Unions of unions are flattened, e.g.::"
msgstr "ユニオン型のユニオン型は平滑化されます。例えば::"

#: ../../library/typing.rst:1014
msgid "Unions of a single argument vanish, e.g.::"
msgstr "引数が一つのユニオン型は消えます。例えば::"

#: ../../library/typing.rst:1018
msgid "Redundant arguments are skipped, e.g.::"
msgstr "冗長な実引数は飛ばされます。例えば::"

#: ../../library/typing.rst:1022
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr "ユニオン型を比較するとき引数の順序は無視されます。例えば::"

#: ../../library/typing.rst:1026
msgid "You cannot subclass or instantiate a union."
msgstr ""
"ユニオン型のサブクラスを作成したり、インスタンスを作成することは出来ません。"

#: ../../library/typing.rst:1028
msgid "You cannot write ``Union[X][Y]``."
msgstr "``Union[X][Y]`` と書くことは出来ません。"

#: ../../library/typing.rst:1030
msgid "You can use ``Optional[X]`` as a shorthand for ``Union[X, None]``."
msgstr ""
"``Optional[X]`` を ``Union[X, None]`` の略記として利用することが出来ます。"

#: ../../library/typing.rst:1032
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr ""
"明示的に書かれているサブクラスを、実行時に直和型から取り除かなくなりました。"

#: ../../library/typing.rst:1037
msgid "Optional type."
msgstr "オプショナル型。"

#: ../../library/typing.rst:1039
msgid "``Optional[X]`` is equivalent to ``Union[X, None]``."
msgstr "``Optional[X]`` は ``Union[X, None]`` と同値です。"

#: ../../library/typing.rst:1041
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""
"これがデフォルト値を持つオプション引数とは同じ概念ではないということに注意し"
"てください。\n"
"デフォルト値を持つオプション引数はオプション引数であるために、型アノテーショ"
"ンに ``Optional`` 修飾子は必要ありません。\n"
"例えば次のようになります::"

#: ../../library/typing.rst:1049
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""
"それとは逆に、 ``None`` という値が許されていることが明示されている場合は、引"
"数がオプションであろうとなかろうと、 ``Optional`` を使うのが好ましいです。\n"
"例えば次のようになります::"

#: ../../library/typing.rst:1058
msgid ""
"Tuple type; ``Tuple[X, Y]`` is the type of a tuple of two items with the "
"first item of type X and the second of type Y. The type of the empty tuple "
"can be written as ``Tuple[()]``."
msgstr ""
"タプル型; ``Tuple[X, Y]`` は、最初の要素の型が X で、2つ目の要素の型が Y であ"
"るような、2つの要素を持つタプルの型です。\n"
"空のタプルの型は ``Tuple[()]`` と書けます。"

#: ../../library/typing.rst:1062
msgid ""
"Example: ``Tuple[T1, T2]`` is a tuple of two elements corresponding to type "
"variables T1 and T2.  ``Tuple[int, float, str]`` is a tuple of an int, a "
"float and a string."
msgstr ""
"例: ``Tuple[T1, T2]``  は型変数 T1 と T2 に対応する2つの要素を持つタプルで"
"す。``Tuple[int, float, str]`` は int と float、 string のタプルです。"

#: ../../library/typing.rst:1066
msgid ""
"To specify a variable-length tuple of homogeneous type, use literal "
"ellipsis, e.g. ``Tuple[int, ...]``. A plain :data:`Tuple` is equivalent to "
"``Tuple[Any, ...]``, and in turn to :class:`tuple`."
msgstr ""
"同じ型の任意の長さのタプルを指定するには ellipsis リテラルを用います。例:  "
"``Tuple[int, ...]``。ただの :data:`Tuple` は ``Tuple[Any, ...]`` と等価で、さ"
"らに :class:`tuple` と等価です。."

#: ../../library/typing.rst:1072
msgid "Callable type; ``Callable[[int], str]`` is a function of (int) -> str."
msgstr "呼び出し可能型; ``Callable[[int], str]`` は (int) -> str の関数です。"

#: ../../library/typing.rst:1074
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types or an ellipsis; the return type must be a single type."
msgstr ""
"添字表記は常に2つの値とともに使われなければなりません: 実引数のリストと返り値"
"の型です。\n"
"実引数のリストは型のリストか ellipsis でなければなりません; 返り値の型は単一"
"の型でなければなりません。"

#: ../../library/typing.rst:1079
msgid ""
"There is no syntax to indicate optional or keyword arguments; such function "
"types are rarely used as callback types. ``Callable[..., ReturnType]`` "
"(literal ellipsis) can be used to type hint a callable taking any number of "
"arguments and returning ``ReturnType``.  A plain :data:`Callable` is "
"equivalent to ``Callable[..., Any]``, and in turn to :class:`collections.abc."
"Callable`."
msgstr ""
"オプショナル引数やキーワード引数を表すための文法はありません; そのような関数"
"型はコールバックの型として滅多に使われません。\n"
"``Callable[..., ReturnType]`` (リテラルの Ellipsis) は任意の個数の引数をとり "
"``ReturnType`` を返す型ヒントを与えるために使えます。\n"
"普通の :data:`Callable` は ``Callable[..., Any]`` と同等で、 :class:"
"`collections.abc.Callable` でも同様です。"

#: ../../library/typing.rst:1089
msgid "Special type construct to mark class variables."
msgstr "クラス変数であることを示す特別な型構築子です。"

#: ../../library/typing.rst:1091
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""
":pep:`526` で導入された通り、 ClassVar でラップされた変数アノテーションによっ"
"て、ある属性はクラス変数として使うつもりであり、そのクラスのインスタンスから"
"設定すべきではないということを示せます。使い方は次のようになります::"

#: ../../library/typing.rst:1099
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ":data:`ClassVar` は型のみを受け入れ、それ以外は受け付けられません。"

#: ../../library/typing.rst:1101
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""
"ClassVar はクラスそのものではなく、:func:`isinstance` や :func:`issubclass` "
"で使うべきではありません。\n"
":data:`ClassVar` は Python の実行時の挙動を変えませんが、サードパーティの型検"
"査器で使えます。\n"
"例えば、型チェッカーは次のコードをエラーとするかもしれません::"

#: ../../library/typing.rst:1115
msgid ""
"``AnyStr`` is a type variable defined as ``AnyStr = TypeVar('AnyStr', str, "
"bytes)``."
msgstr ""
"``AnyStr`` は ``AnyStr = TypeVar('AnyStr', str, bytes)`` として定義される型変"
"数です。"

#: ../../library/typing.rst:1118
msgid ""
"It is meant to be used for functions that may accept any kind of string "
"without allowing different kinds of strings to mix. For example::"
msgstr ""
"他の種類の文字列を混ぜることなく、任意の種類の文字列を許す関数によって使われ"
"ることを意図しています。"

#: ../../library/typing.rst:1130
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime. Usage::"
msgstr ""
"サードパーティーの静的型検査器が ``True`` と仮定する特別な定数です。 実行時に"
"は ``False`` になります。使用例::"

#: ../../library/typing.rst:1139
msgid ""
"Note that the first type annotation must be enclosed in quotes, making it a "
"\"forward reference\", to hide the ``expensive_mod`` reference from the "
"interpreter runtime.  Type annotations for local variables are not "
"evaluated, so the second annotation does not need to be enclosed in quotes."
msgstr ""
"1つ目の型アノテーションは引用符で囲って \"前方参照 (forward reference)\" に"
"し、インタプリタのランタイムから ``expensive_mod`` への参照を隠さなければなり"
"ません。\n"
"ローカル変数への型アノテーションは評価されないので、2つ目のアノテーションは引"
"用符で囲う必要はありません。"
