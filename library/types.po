# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2018
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:24+0000\n"
"Last-Translator: tomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/types.rst:2
msgid ":mod:`types` --- Dynamic type creation and names for built-in types"
msgstr ":mod:`types` --- 動的な型生成と組み込み型に対する名前"

#: ../../library/types.rst:7
msgid "**Source code:** :source:`Lib/types.py`"
msgstr "**ソースコード:** :source:`Lib/types.py`"

#: ../../library/types.rst:11
msgid ""
"This module defines utility function to assist in dynamic creation of new "
"types."
msgstr ""
"このモジュールは新しい型の動的な生成を支援するユーティリティ関数を定義してい"
"ます。"

#: ../../library/types.rst:14
msgid ""
"It also defines names for some object types that are used by the standard "
"Python interpreter, but not exposed as builtins like :class:`int` or :class:"
"`str` are."
msgstr ""
"さらに、標準の Python インタプリタによって使用されているものの、 :class:"
"`int` や :class:`str` のように組み込みとして公開されていないようないくつかの"
"オブジェクト型の名前を定義しています。"

#: ../../library/types.rst:18
msgid ""
"Finally, it provides some additional type-related utility classes and "
"functions that are not fundamental enough to be builtins."
msgstr ""
"最後に、組み込みになるほど基本的でないような追加の型関連のユーティリティと関"
"数をいくつか提供しています。"

#: ../../library/types.rst:23
msgid "Dynamic Type Creation"
msgstr "動的な型生成"

#: ../../library/types.rst:27
msgid "Creates a class object dynamically using the appropriate metaclass."
msgstr "適切なメタクラスを使用して動的にクラスオブジェクトを生成します。"

#: ../../library/types.rst:29
msgid ""
"The first three arguments are the components that make up a class definition "
"header: the class name, the base classes (in order), the keyword arguments "
"(such as ``metaclass``)."
msgstr ""
"最初の3つの引数はクラス定義ヘッダーを構成する—クラス名、基底クラス (順番に)、"
"キーワード引数 (例えば ``metaclass``)—です。"

#: ../../library/types.rst:33
msgid ""
"The *exec_body* argument is a callback that is used to populate the freshly "
"created class namespace. It should accept the class namespace as its sole "
"argument and update the namespace directly with the class contents. If no "
"callback is provided, it has the same effect as passing in ``lambda ns: ns``."
msgstr ""
"*exec_body* 引数は、新規に生成されたクラスの名前空間を構築するために使用され"
"るコールバックです。それは唯一の引数としてクラスの名前空間を受け取り、クラス"
"の内容で名前空間を直接更新します。コールバックが渡されない場合、それは "
"``lambda ns: ns`` を渡すことと同じ効果があります。"

#: ../../library/types.rst:43
msgid "Calculates the appropriate metaclass and creates the class namespace."
msgstr "適切なメタクラスを計算してクラスの名前空間を生成します。"

#: ../../library/types.rst:45
msgid ""
"The arguments are the components that make up a class definition header: the "
"class name, the base classes (in order) and the keyword arguments (such as "
"``metaclass``)."
msgstr ""
"引数はクラス定義ヘッダーを構成する要素—クラス名、基底クラス (順番に)、キー"
"ワード引数 (例えば ``metaclass``)—です。"

#: ../../library/types.rst:49
msgid "The return value is a 3-tuple: ``metaclass, namespace, kwds``"
msgstr "返り値は ``metaclass, namespace, kwds`` の3要素のタプルです"

#: ../../library/types.rst:51
msgid ""
"*metaclass* is the appropriate metaclass, *namespace* is the prepared class "
"namespace and *kwds* is an updated copy of the passed in *kwds* argument "
"with any ``'metaclass'`` entry removed. If no *kwds* argument is passed in, "
"this will be an empty dict."
msgstr ""
"*metaclass* は適切なメタクラスです。*namespace* は用意されたクラスの名前空間"
"です。また *kwds* は、``'metaclass'`` エントリが削除された、渡された *kwds* "
"引数の更新されたコピーです。*kwds* 引数が渡されなければ、これは空の dict にな"
"ります。"

#: ../../library/types.rst:60
msgid ""
"The default value for the ``namespace`` element of the returned tuple has "
"changed.  Now an insertion-order-preserving mapping is used when the "
"metaclass does not have a ``__prepare__`` method,"
msgstr ""
"返されるタプルの ``namespace`` 要素のデフォルト値が変更されました。\n"
"現在では、メタクラスが ``__prepare__`` メソッドを持っていないときは、挿入順序"
"を保存するマッピングが使われます。"

#: ../../library/types.rst:67
msgid ":ref:`metaclasses`"
msgstr ":ref:`metaclasses`"

#: ../../library/types.rst:67
msgid "Full details of the class creation process supported by these functions"
msgstr "これらの関数によってサポートされるクラス生成プロセスの完全な詳細"

#: ../../library/types.rst:69
msgid ":pep:`3115` - Metaclasses in Python 3000"
msgstr ":pep:`3115` - Metaclasses in Python 3000"

#: ../../library/types.rst:70
msgid "Introduced the ``__prepare__`` namespace hook"
msgstr "``__prepare__`` 名前空間フックの導入"

#: ../../library/types.rst:74
msgid "Standard Interpreter Types"
msgstr "標準的なインタプリタ型"

#: ../../library/types.rst:76
msgid ""
"This module provides names for many of the types that are required to "
"implement a Python interpreter. It deliberately avoids including some of the "
"types that arise only incidentally during processing such as the "
"``listiterator`` type."
msgstr ""
"このモジュールは、Python インタプリタを実装するために必要な多くの型に対して名"
"前を提供します。それは、``listiterator`` 型のような、単に処理中に付随的に発生"
"するいくつかの型が含まれることを意図的に避けています。"

#: ../../library/types.rst:81
msgid ""
"Typical use of these names is for :func:`isinstance` or :func:`issubclass` "
"checks."
msgstr ""
"これらの名前は典型的に :func:`isinstance` や :func:`issubclass` によるチェッ"
"クに使われます。"

#: ../../library/types.rst:84
msgid "Standard names are defined for the following types:"
msgstr "以下の型に対して標準的な名前が定義されています:"

#: ../../library/types.rst:89
msgid ""
"The type of user-defined functions and functions created by :keyword:"
"`lambda`  expressions."
msgstr ""
"ユーザ定義の関数と :keyword:`lambda` 式によって生成された関数の型です。"

#: ../../library/types.rst:95
msgid ""
"The type of :term:`generator`-iterator objects, created by generator "
"functions."
msgstr ""
"ジェネレータ関数によって生成された :term:`ジェネレータ <generator>` イテレー"
"タオブジェクトの型です。"

#: ../../library/types.rst:101
msgid ""
"The type of :term:`coroutine` objects, created by :keyword:`async def` "
"functions."
msgstr ""
":keyword:`async def` 関数に生成される :term:`コルーチン <coroutine>` オブジェ"
"クトです。"

#: ../../library/types.rst:109
msgid ""
"The type of :term:`asynchronous generator`-iterator objects, created by "
"asynchronous generator functions."
msgstr ""
"非同期ジェネレータ関数によって作成された :term:`非同期ジェネレータ "
"<asynchronous generator>` イテレータオブジェクトの型です。"

#: ../../library/types.rst:119
msgid "The type for code objects such as returned by :func:`compile`."
msgstr ":func:`compile` 関数が返すようなコードオブジェクトの型です。"

#: ../../library/types.rst:124
msgid "The type of methods of user-defined class instances."
msgstr "ユーザー定義のクラスのインスタンスのメソッドの型です。"

#: ../../library/types.rst:130
msgid ""
"The type of built-in functions like :func:`len` or :func:`sys.exit`, and "
"methods of built-in classes.  (Here, the term \"built-in\" means \"written "
"in C\".)"
msgstr ""
":func:`len` や :func:`sys.exit` のような組み込み関数や、組み込み型のメソッド"
"の型です。 (ここでは \"組み込み\" という単語を \"Cで書かれた\" という意味で"
"使っています)"

#: ../../library/types.rst:137
msgid ""
"The type of :term:`modules <module>`. Constructor takes the name of the "
"module to be created and optionally its :term:`docstring`."
msgstr ""
":term:`module` の型です。コンストラクタは生成するモジュールの名前と任意でそ"
"の :term:`docstring` を受け取ります。"

#: ../../library/types.rst:141
msgid ""
"Use :func:`importlib.util.module_from_spec` to create a new module if you "
"wish to set the various import-controlled attributes."
msgstr ""
"インポートによりコントロールされる様々な属性を設定する場合、:func:`importlib."
"util.module_from_spec` を使用して新しいモジュールを作成してください。"

#: ../../library/types.rst:146
msgid "The :term:`docstring` of the module. Defaults to ``None``."
msgstr "モジュールの :term:`docstring` です。デフォルトは ``None`` です。"

#: ../../library/types.rst:150
msgid "The :term:`loader` which loaded the module. Defaults to ``None``."
msgstr ""
"モジュールをロードする :term:`loader` です。デフォルトは ``None`` です。"

#: ../../library/types.rst:152 ../../library/types.rst:166
msgid "Defaults to ``None``. Previously the attribute was optional."
msgstr "デフォルトが ``None`` になりました。以前はオプションでした。"

#: ../../library/types.rst:157
msgid "The name of the module."
msgstr "モジュールの名前です。"

#: ../../library/types.rst:161
msgid ""
"Which :term:`package` a module belongs to. If the module is top-level (i.e. "
"not a part of any specific package) then the attribute should be set to "
"``''``, else it should be set to the name of the package (which can be :attr:"
"`__name__` if the module is a package itself). Defaults to ``None``."
msgstr ""
"モジュールがどの :term:`package` に属しているかです。モジュールがトップレベル"
"である (すなわち、いかなる特定のパッケージの一部でもない) 場合、この属性は "
"``''`` に設定されます。そうでない場合、パッケージ名 (モジュールがパッケージ自"
"身なら :attr:`__name__`) に設定されます。デフォルトは ``None`` です。"

#: ../../library/types.rst:172
msgid "The type of traceback objects such as found in ``sys.exc_info()[2]``."
msgstr ""
"``sys.exc_info()[2]`` で得られるようなトレースバックオブジェクトの型です。"

#: ../../library/types.rst:177
msgid ""
"The type of frame objects such as found in ``tb.tb_frame`` if ``tb`` is a "
"traceback object."
msgstr ""
"フレームオブジェクトの型です。トレースバックオブジェクト ``tb`` の ``tb."
"tb_frame`` などです。"

#: ../../library/types.rst:183
msgid ""
"The type of objects defined in extension modules with ``PyGetSetDef``, such "
"as ``FrameType.f_locals`` or ``array.array.typecode``.  This type is used as "
"descriptor for object attributes; it has the same purpose as the :class:"
"`property` type, but for classes defined in extension modules."
msgstr ""
"``FrameType.f_locals`` や ``array.array.typecode`` のような、拡張モジュールに"
"おいて ``PyGetSetDef`` によって定義されたオブジェクトの型です。この型はオブ"
"ジェクト属性のディスクリプタとして利用されます。 :class:`property` 型と同じ目"
"的を持った型ですが、こちらは拡張モジュールで定義された型のためのものです。"

#: ../../library/types.rst:191
msgid ""
"The type of objects defined in extension modules with ``PyMemberDef``, such "
"as ``datetime.timedelta.days``.  This type is used as descriptor for simple "
"C data members which use standard conversion functions; it has the same "
"purpose as the :class:`property` type, but for classes defined in extension "
"modules."
msgstr ""
"``datetime.timedelta.days`` のような、拡張モジュールにおいて ``PyMemberDef`` "
"によって定義されたオブジェクトの型です。この型は、標準の変換関数を利用するよ"
"うな、Cのシンプルなデータメンバで利用されます。 :class:`property` 型と同じ目"
"的を持った型ですが、こちらは拡張モジュールで定義された型のためのものです。"

#: ../../library/types.rst:198
msgid ""
"In other implementations of Python, this type may be identical to "
"``GetSetDescriptorType``."
msgstr ""
"Pythonの他の実装では、この型は ``GetSetDescriptorType`` と同じかもしれませ"
"ん。"

#: ../../library/types.rst:203
msgid ""
"Read-only proxy of a mapping. It provides a dynamic view on the mapping's "
"entries, which means that when the mapping changes, the view reflects these "
"changes."
msgstr ""
"読み出し専用のマッピングのプロキシです。マッピングのエントリーに関する動的な"
"ビューを提供します。つまり、マッピングが変わった場合にビューがこれらの変更を"
"反映するということです。"

#: ../../library/types.rst:211
msgid ""
"Return ``True`` if the underlying mapping has a key *key*, else ``False``."
msgstr ""
"元になったマッピングが *key* というキーを持っている場合 ``True`` を返します。"
"そうでなければ ``False`` を返します。"

#: ../../library/types.rst:216
msgid ""
"Return the item of the underlying mapping with key *key*.  Raises a :exc:"
"`KeyError` if *key* is not in the underlying mapping."
msgstr ""
"元になったマッピングの *key* というキーに対応するアイテムを返します。 *key* "
"が存在しなければ、 :exc:`KeyError` が発生します。"

#: ../../library/types.rst:221
msgid ""
"Return an iterator over the keys of the underlying mapping.  This is a "
"shortcut for ``iter(proxy.keys())``."
msgstr ""
"元になったマッピングのキーを列挙するイテレータを返します。これは "
"``iter(proxy.keys())`` のショートカットです。"

#: ../../library/types.rst:226
msgid "Return the number of items in the underlying mapping."
msgstr "元になったマッピングに含まれるアイテムの数を返します。"

#: ../../library/types.rst:230
msgid "Return a shallow copy of the underlying mapping."
msgstr "元になったマッピングの浅いコピーを返します。"

#: ../../library/types.rst:234
msgid ""
"Return the value for *key* if *key* is in the underlying mapping, else "
"*default*.  If *default* is not given, it defaults to ``None``, so that this "
"method never raises a :exc:`KeyError`."
msgstr ""
"*key* が元になったマッピングに含まれている場合 *key* に対する値を返し、そうで"
"なければ *default* を返します。もし *default* が与えられない場合は、デフォル"
"ト値の ``None`` になります。そのため、このメソッドが :exc:`KeyError` を発生さ"
"せることはありません。"

#: ../../library/types.rst:240
msgid ""
"Return a new view of the underlying mapping's items (``(key, value)`` pairs)."
msgstr ""
"元になったマッピングの items (``(key, value)`` ペアの列) に対する新しいビュー"
"を返します。"

#: ../../library/types.rst:245
msgid "Return a new view of the underlying mapping's keys."
msgstr "元になったマッピングの keys に対する新しいビューを返します。"

#: ../../library/types.rst:249
msgid "Return a new view of the underlying mapping's values."
msgstr "元になったマッピングの values に対する新しいビューを返します。"

#: ../../library/types.rst:253
msgid "Additional Utility Classes and Functions"
msgstr "追加のユーティリティクラスと関数"

#: ../../library/types.rst:257
msgid ""
"A simple :class:`object` subclass that provides attribute access to its "
"namespace, as well as a meaningful repr."
msgstr ""
"名前空間への属性アクセスに加えて意味のある repr を提供するための、単純な :"
"class:`object` サブクラスです。"

#: ../../library/types.rst:260
msgid ""
"Unlike :class:`object`, with ``SimpleNamespace`` you can add and remove "
"attributes.  If a ``SimpleNamespace`` object is initialized with keyword "
"arguments, those are directly added to the underlying namespace."
msgstr ""
":class:`object` とは異なり、 ``SimpleNamespace`` は、属性を追加したり削除した"
"りすることができます。 ``SimpleNamespace`` オブジェクトがキーワード引数で初期"
"化される場合、それらは元になる名前空間に直接追加されます。"

#: ../../library/types.rst:264
msgid "The type is roughly equivalent to the following code::"
msgstr "この型は以下のコードとほぼ等価です::"

#: ../../library/types.rst:278
msgid ""
"``SimpleNamespace`` may be useful as a replacement for ``class NS: pass``. "
"However, for a structured record type use :func:`~collections.namedtuple` "
"instead."
msgstr ""
"``SimpleNamespace`` は ``class NS: pass`` を置き換えるものとして有用かもしれ"
"ません。ですが、構造化されたレコード型に対しては、これよりはむしろ :func:"
"`~collections.namedtuple` を使用してください。"

#: ../../library/types.rst:287
msgid "Route attribute access on a class to __getattr__."
msgstr "クラスの属性アクセスを __getattr__ に振り替えます。"

#: ../../library/types.rst:289
msgid ""
"This is a descriptor, used to define attributes that act differently when "
"accessed through an instance and through a class.  Instance access remains "
"normal, but access to an attribute through a class will be routed to the "
"class's __getattr__ method; this is done by raising AttributeError."
msgstr ""
"これは記述子で、インスタンス経由のアクセスとクラス経由のアクセスで振る舞いが"
"異なる属性を定義するのに使います。インスタンスアクセスは通常通りですが、クラ"
"ス経由の属性アクセスはクラスの __getattr__ メソッドに振り替えられます。これ"
"は AttributeError の送出により行われます。"

#: ../../library/types.rst:294
msgid ""
"This allows one to have properties active on an instance, and have virtual "
"attributes on the class with the same name (see Enum for an example)."
msgstr ""
"これによって、インスタンス上で有効なプロパティを持ち、クラス上で同名の仮想属"
"性を持つことができます (例については :class:`~enum.Enum` を参照してくださ"
"い)。"

#: ../../library/types.rst:301
msgid "Coroutine Utility Functions"
msgstr "コルーチンユーティリティ関数"

#: ../../library/types.rst:305
msgid ""
"This function transforms a :term:`generator` function into a :term:"
"`coroutine function` which returns a generator-based coroutine. The "
"generator-based coroutine is still a :term:`generator iterator`, but is also "
"considered to be a :term:`coroutine` object and is :term:`awaitable`.  "
"However, it may not necessarily implement the :meth:`__await__` method."
msgstr ""
"この関数は、 :term:`generator` 関数を、ジェネレータベースのコルーチンを返す :"
"term:`coroutine function` に変換します。返されるジェネレータベースのコルーチ"
"ンは依然として :term:`generator iterator` ですが、同時に :term:`coroutine` オ"
"ブジェクトかつ :term:`awaitable` であるとみなされます。ただし、必ずしも :"
"meth:`__await__` メソッドを実装する必要はありません。"

#: ../../library/types.rst:312
msgid "If *gen_func* is a generator function, it will be modified in-place."
msgstr "*gen_func* はジェネレータ関数で、インプレースに変更されます。"

#: ../../library/types.rst:314
msgid ""
"If *gen_func* is not a generator function, it will be wrapped. If it returns "
"an instance of :class:`collections.abc.Generator`, the instance will be "
"wrapped in an *awaitable* proxy object.  All other types of objects will be "
"returned as is."
msgstr ""
"*gen_func* がジェネレータ関数でない場合、この関数はラップされます。この関数"
"が :class:`collections.abc.Generator` のインスタンスを返す場合、このインスタ"
"ンスは *awaitable* なプロキシオブジェクトにラップされます。それ以外のすべての"
"型のオブジェクトは、そのまま返されます。"
