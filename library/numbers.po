# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/numbers.rst:2
msgid ":mod:`numbers` --- Numeric abstract base classes"
msgstr ":mod:`numbers` --- 数の抽象基底クラス"

#: ../../library/numbers.rst:10
msgid ""
"The :mod:`numbers` module (:pep:`3141`) defines a hierarchy of numeric :term:"
"`abstract base classes <abstract base class>` which progressively define "
"more operations.  None of the types defined in this module can be "
"instantiated."
msgstr ""
":mod:`numbers` モジュール (:pep:`3141`) は数の :term:`抽象基底クラス "
"<abstract base class>` の、順により多くの演算を定義していく階層を定義します。"
"このモジュールで定義される型はどれもインスタンス化できません。"

#: ../../library/numbers.rst:17
msgid ""
"The root of the numeric hierarchy. If you just want to check if an argument "
"*x* is a number, without caring what kind, use ``isinstance(x, Number)``."
msgstr ""
"数の階層の根。引数 *x* が、種類は何であれ、数であるということだけチェックした"
"い場合、``isinstance(x, Number)`` が使えます。"

#: ../../library/numbers.rst:22
msgid "The numeric tower"
msgstr "数値塔"

#: ../../library/numbers.rst:26
msgid ""
"Subclasses of this type describe complex numbers and include the operations "
"that work on the built-in :class:`complex` type. These are: conversions to :"
"class:`complex` and :class:`bool`, :attr:`.real`, :attr:`.imag`, ``+``, ``-"
"``, ``*``, ``/``, :func:`abs`, :meth:`conjugate`, ``==``, and ``!=``. All "
"except ``-`` and ``!=`` are abstract."
msgstr ""
"この型のサブクラスは複素数を表し、組み込みの :class:`complex` 型を受け付ける"
"演算を含みます。それらは: :class:`complex` および :class:`bool` への変換、 :"
"attr:`.real`, :attr:`.imag`, ``+``, ``-``, ``*``, ``/``, :func:`abs`, :meth:"
"`conjugate`, ``==``, ``!=`` です。 ``-`` と ``!=`` 以外の全てのものは抽象メ"
"ソッドや抽象プロパティです。"

#: ../../library/numbers.rst:34
msgid "Abstract. Retrieves the real component of this number."
msgstr "抽象プロパティ。この数の実部を取り出します。"

#: ../../library/numbers.rst:38
msgid "Abstract. Retrieves the imaginary component of this number."
msgstr "抽象プロパティ。この数の虚部を取り出します。"

#: ../../library/numbers.rst:42
msgid ""
"Abstract. Returns the complex conjugate. For example, ``(1+3j).conjugate() "
"== (1-3j)``."
msgstr ""
"抽象プロパティ。複素共役を返します。たとえば、``(1+3j).conjugate() == "
"(1-3j)`` です。"

#: ../../library/numbers.rst:47
msgid ""
"To :class:`Complex`, :class:`Real` adds the operations that work on real "
"numbers."
msgstr ""
":class:`Complex` の上に、 :class:`Real` は実数で意味を成す演算を加えます。"

#: ../../library/numbers.rst:50
msgid ""
"In short, those are: a conversion to :class:`float`, :func:`math.trunc`, :"
"func:`round`, :func:`math.floor`, :func:`math.ceil`, :func:`divmod`, ``//``, "
"``%``, ``<``, ``<=``, ``>``, and ``>=``."
msgstr ""
"簡潔に言うとそれらは: :class:`float` への変換, :func:`math.trunc`, :func:"
"`round`, :func:`math.floor`, :func:`math.ceil`, :func:`divmod`, ``//``, "
"``%``, ``<``, ``<=``, ``>`` および ``>=`` です。"

#: ../../library/numbers.rst:54
msgid ""
"Real also provides defaults for :func:`complex`, :attr:`~Complex.real`, :"
"attr:`~Complex.imag`, and :meth:`~Complex.conjugate`."
msgstr ""
"Real はまた :func:`complex`, :attr:`~Complex.real`, :attr:`~Complex.imag` お"
"よび :meth:`~Complex.conjugate` のデフォルトを提供します。"

#: ../../library/numbers.rst:60
msgid ""
"Subtypes :class:`Real` and adds :attr:`~Rational.numerator` and :attr:"
"`~Rational.denominator` properties, which should be in lowest terms. With "
"these, it provides a default for :func:`float`."
msgstr ""
":class:`Real` をサブタイプ化し :attr:`~Rational.numerator` と :attr:"
"`~Rational.denominator` のプロパティを加えたものです。これらは既約分数のもの"
"でなければなりません。この他に :func:`float` のデフォルトも提供します。"

#: ../../library/numbers.rst:67 ../../library/numbers.rst:71
msgid "Abstract."
msgstr "抽象プロパティ。"

#: ../../library/numbers.rst:76
msgid ""
"Subtypes :class:`Rational` and adds a conversion to :class:`int`.  Provides "
"defaults for :func:`float`, :attr:`~Rational.numerator`, and :attr:"
"`~Rational.denominator`.  Adds abstract methods for ``**`` and bit-string "
"operations: ``<<``, ``>>``, ``&``, ``^``, ``|``, ``~``."
msgstr ""
":class:`Rational` をサブタイプ化し :class:`int` への変換が加わります。 :func:"
"`float`, :attr:`~Rational.numerator`, :attr:`~Rational.denominator` のデフォ"
"ルトを提供します。 ``**`` に対する抽象メソッドと、ビット列演算 ``<<``, "
"``>>``, ``&``, ``^``, ``|``, ``~`` を追加します。"

#: ../../library/numbers.rst:83
msgid "Notes for type implementors"
msgstr "型実装者のための注意事項"

#: ../../library/numbers.rst:85
msgid ""
"Implementors should be careful to make equal numbers equal and hash them to "
"the same values. This may be subtle if there are two different extensions of "
"the real numbers. For example, :class:`fractions.Fraction` implements :func:"
"`hash` as follows::"
msgstr ""
"実装する人は等しい数が等しく扱われるように同じハッシュを与えるように気を付け"
"ねばなりません。これは二つの異なった実数の拡張があるような場合にはややこしい"
"ことになるかもしれません。たとえば、 :class:`fractions.Fraction` は :func:"
"`hash` を以下のように実装しています::"

#: ../../library/numbers.rst:104
msgid "Adding More Numeric ABCs"
msgstr "さらに数のABCを追加する"

#: ../../library/numbers.rst:106
msgid ""
"There are, of course, more possible ABCs for numbers, and this would be a "
"poor hierarchy if it precluded the possibility of adding those. You can add "
"``MyFoo`` between :class:`Complex` and :class:`Real` with::"
msgstr ""
"もちろん、他にも数に対する ABC が有り得ますし、そういったものを付け加える可能"
"性を閉ざしてしまうとすれば貧相な階層でしかありません。たとえば ``MyFoo`` を :"
"class:`Complex` と :class:`Real` の間に付け加えるには::"

#: ../../library/numbers.rst:116
msgid "Implementing the arithmetic operations"
msgstr "算術演算の実装"

#: ../../library/numbers.rst:118
msgid ""
"We want to implement the arithmetic operations so that mixed-mode operations "
"either call an implementation whose author knew about the types of both "
"arguments, or convert both to the nearest built in type and do the operation "
"there. For subtypes of :class:`Integral`, this means that :meth:`__add__` "
"and :meth:`__radd__` should be defined as::"
msgstr ""
"私たちは、混在型(mixed-mode)演算について作者が両方の引数の型について知ってい"
"るような実装を呼び出すか、両方を最も近い組み込み型に変換してそこで演算する"
"か、どちらかを行うように算術演算を実装したいのです。 :class:`Integral` のサブ"
"タイプに対して、このことは :meth:`__add__` と :meth:`__radd__` が次のように定"
"義されるべきであることを意味します::"

#: ../../library/numbers.rst:149
msgid ""
"There are 5 different cases for a mixed-type operation on subclasses of :"
"class:`Complex`. I'll refer to all of the above code that doesn't refer to "
"``MyIntegral`` and ``OtherTypeIKnowAbout`` as \"boilerplate\". ``a`` will be "
"an instance of ``A``, which is a subtype of :class:`Complex` (``a : A <: "
"Complex``), and ``b : B <: Complex``. I'll consider ``a + b``:"
msgstr ""
"ここには5つの異なる :class:`Complex` のサブクラス間の混在型の演算があります。"
"上のコードの中で ``MyIntegral`` と ``OtherTypeIKnowAbout`` に触れない部分を "
"\"ボイラープレート\" と呼ぶことにしましょう。 ``a`` を :class:`Complex` のサ"
"ブタイプである ``A`` のインスタンス (``a : A <: Complex``)、同様に ``b : B "
"<: Complex`` として、 ``a + b`` を考えます:"

#: ../../library/numbers.rst:156
msgid "If ``A`` defines an :meth:`__add__` which accepts ``b``, all is well."
msgstr ""
"``A`` が ``b`` を受け付ける :meth:`__add__` を定義している場合、何も問題はあ"
"りません。"

#: ../../library/numbers.rst:158
msgid ""
"If ``A`` falls back to the boilerplate code, and it were to return a value "
"from :meth:`__add__`, we'd miss the possibility that ``B`` defines a more "
"intelligent :meth:`__radd__`, so the boilerplate should return :const:"
"`NotImplemented` from :meth:`__add__`. (Or ``A`` may not implement :meth:"
"`__add__` at all.)"
msgstr ""
"``A`` でボイラープレート部分に落ち込み、その結果 :meth:`__add__` が値を返すな"
"らば、 ``B`` に良く考えられた :meth:`__radd__` が定義されている可能性を見逃し"
"てしまいますので、ボイラープレートは :meth:`__add__` から :const:"
"`NotImplemented` を返すのが良いでしょう。(若しくは、 ``A`` はまったく :meth:"
"`__add__` を実装すべきではなかったかもしれません。)"

#: ../../library/numbers.rst:164
msgid ""
"Then ``B``'s :meth:`__radd__` gets a chance. If it accepts ``a``, all is "
"well."
msgstr ""
"そうすると、 ``B`` の :meth:`__radd__` にチャンスが巡ってきます。ここで "
"``a`` が受け付けられるならば、結果は上々です。"

#: ../../library/numbers.rst:166
msgid ""
"If it falls back to the boilerplate, there are no more possible methods to "
"try, so this is where the default implementation should live."
msgstr ""
"ここでボイラープレートに落ち込むならば、もう他に試すべきメソッドはありません"
"ので、デフォルト実装の出番です。"

#: ../../library/numbers.rst:169
msgid ""
"If ``B <: A``, Python tries ``B.__radd__`` before ``A.__add__``. This is ok, "
"because it was implemented with knowledge of ``A``, so it can handle those "
"instances before delegating to :class:`Complex`."
msgstr ""
"もし ``B <: A`` ならば、Python は ``A.__add__`` の前に ``B.__radd__`` を試し"
"ます。これで良い理由は、 ``A`` についての知識を持って実装しており、 :class:"
"`Complex` に委ねる前にこれらのインスタンスを扱えるはずだからです。"

#: ../../library/numbers.rst:174
msgid ""
"If ``A <: Complex`` and ``B <: Real`` without sharing any other knowledge, "
"then the appropriate shared operation is the one involving the built in :"
"class:`complex`, and both :meth:`__radd__` s land there, so ``a+b == b+a``."
msgstr ""
"もし ``A <: Complex`` かつ ``B <: Real`` で他に共有された知識が無いならば、適"
"切な共通の演算は組み込みの :class:`complex` を使ったものになり、どちらの :"
"meth:`__radd__` ともそこに着地するでしょうから、 ``a+b == b+a`` です。"

#: ../../library/numbers.rst:179
msgid ""
"Because most of the operations on any given type will be very similar, it "
"can be useful to define a helper function which generates the forward and "
"reverse instances of any given operator. For example, :class:`fractions."
"Fraction` uses::"
msgstr ""
"ほとんどの演算はどのような型についても非常に良く似ていますので、与えられた演"
"算子について順結合(forward)および逆結合(reverse)のメソッドを生成する支援関数"
"を定義することは役に立ちます。たとえば、 :class:`fractions.Fraction` では次の"
"ようなものを利用しています::"
