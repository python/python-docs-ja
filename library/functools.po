# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2017
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2017
# Shun Sakurai, 2017
# Arihiro TAKASE, 2017
# E. Kawashima, 2017
# tomo, 2018
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-04 13:47+0000\n"
"PO-Revision-Date: 2017-02-16 23:12+0000\n"
"Last-Translator: tomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/functools.rst:2
msgid ""
":mod:`functools` --- Higher-order functions and operations on callable "
"objects"
msgstr ":mod:`functools` --- 高階関数と呼び出し可能オブジェクトの操作"

#: ../../library/functools.rst:13
msgid "**Source code:** :source:`Lib/functools.py`"
msgstr "**ソースコード:** :source:`Lib/functools.py`"

#: ../../library/functools.rst:17
msgid ""
"The :mod:`functools` module is for higher-order functions: functions that "
"act on or return other functions. In general, any callable object can be "
"treated as a function for the purposes of this module."
msgstr ""
":mod:`functools` "
"モジュールは高階関数、つまり関数に影響を及ぼしたり他の関数を返したりする関数のためのものです。一般に、どんな呼び出し可能オブジェクトでもこのモジュールの目的には関数として扱えます。"

#: ../../library/functools.rst:21
msgid "The :mod:`functools` module defines the following functions:"
msgstr "モジュール :mod:`functools` は以下の関数を定義します:"

#: ../../library/functools.rst:25
msgid ""
"Transform a method of a class into a property whose value is computed once "
"and then cached as a normal attribute for the life of the instance. Similar "
"to :func:`property`, with the addition of caching. Useful for expensive "
"computed properties of instances that are otherwise effectively immutable."
msgstr ""

#: ../../library/functools.rst:30 ../../library/functools.rst:70
#: ../../library/functools.rst:275
msgid "Example::"
msgstr "以下はプログラム例です::"

#: ../../library/functools.rst:48
msgid ""
"This decorator requires that the ``__dict__`` attribute on each instance be "
"a mutable mapping. This means it will not work with some types, such as "
"metaclasses (since the ``__dict__`` attributes on type instances are read-"
"only proxies for the class namespace), and those that specify ``__slots__`` "
"without including ``__dict__`` as one of the defined slots (as such classes "
"don't provide a ``__dict__`` attribute at all)."
msgstr ""

#: ../../library/functools.rst:58
msgid ""
"Transform an old-style comparison function to a :term:`key function`.  Used "
"with tools that accept key functions (such as :func:`sorted`, :func:`min`, "
":func:`max`, :func:`heapq.nlargest`, :func:`heapq.nsmallest`, "
":func:`itertools.groupby`).  This function is primarily used as a transition"
" tool for programs being converted from Python 2 which supported the use of "
"comparison functions."
msgstr ""
"古いスタイルの比較関数を :term:`key function` に変換します。key 関数を受け取るツール (:func:`sorted`, "
":func:`min`, :func:`max`, :func:`heapq.nlargest`, :func:`heapq.nsmallest`, "
":func:`itertools.groupby` など) と共に使用します。この関数は、主に比較関数を使っていた Python 2 "
"からプログラムの移行のための変換ツールとして使われます。"

#: ../../library/functools.rst:65
msgid ""
"A comparison function is any callable that accept two arguments, compares "
"them, and returns a negative number for less-than, zero for equality, or a "
"positive number for greater-than.  A key function is a callable that accepts"
" one argument and returns another value to be used as the sort key."
msgstr ""
"比較関数は2つの引数を受け取り、それらを比較し、 \"より小さい\" 場合は負の数を、同値の場合には 0 を、 \"より大きい\" "
"場合には正の数を返す、あらゆる呼び出し可能オブジェクトです。key "
"関数は呼び出し可能オブジェクトで、1つの引数を受け取り、ソートキーとして使われる値を返します。"

#: ../../library/functools.rst:74
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr "ソートの例と簡単なチュートリアルは :ref:`sortinghowto` を参照して下さい。"

#: ../../library/functools.rst:82
msgid ""
"Decorator to wrap a function with a memoizing callable that saves up to the "
"*maxsize* most recent calls.  It can save time when an expensive or I/O "
"bound function is periodically called with the same arguments."
msgstr ""
"関数をメモ化用の呼び出し可能オブジェクトでラップし、最近の呼び出し最大 *maxsize* 回まで保存するするデコレータです。高価な関数や I/O "
"に束縛されている関数を定期的に同じ引数で呼び出すときに、時間を節約できます。"

#: ../../library/functools.rst:86
msgid ""
"Since a dictionary is used to cache results, the positional and keyword "
"arguments to the function must be hashable."
msgstr "結果のキャッシュには辞書が使われるので、関数の位置引数およびキーワード引数はハッシュ可能でなくてはなりません。"

#: ../../library/functools.rst:89
msgid ""
"Distinct argument patterns may be considered to be distinct calls with "
"separate cache entries.  For example, `f(a=1, b=2)` and `f(b=2, a=1)` differ"
" in their keyword argument order and may have two separate cache entries."
msgstr ""
"引数のパターンが異なる場合は、異なる呼び出しと見なされ別々のキャッシュエントリーとなります。\n"
"例えば、 `f(a=1, b=2)` と `f(b=2, a=1)` はキーワード引数の順序が異なっているので、2つの別個のキャッシュエントリーになります。"

#: ../../library/functools.rst:94
msgid ""
"If *user_function* is specified, it must be a callable. This allows the "
"*lru_cache* decorator to be applied directly to a user function, leaving the"
" *maxsize* at its default value of 128::"
msgstr ""

#: ../../library/functools.rst:103
msgid ""
"If *maxsize* is set to ``None``, the LRU feature is disabled and the cache "
"can grow without bound."
msgstr ""

#: ../../library/functools.rst:106
msgid ""
"If *typed* is set to true, function arguments of different types will be "
"cached separately.  For example, ``f(3)`` and ``f(3.0)`` will be treated as "
"distinct calls with distinct results."
msgstr ""
"*typed* が真に設定された場合は、関数の異なる型の引数が別々にキャッシュされます。例えば、``f(3)`` と ``f(3.0)`` "
"は別の結果をもたらす別の呼び出しとして扱われます。"

#: ../../library/functools.rst:110
msgid ""
"To help measure the effectiveness of the cache and tune the *maxsize* "
"parameter, the wrapped function is instrumented with a :func:`cache_info` "
"function that returns a :term:`named tuple` showing *hits*, *misses*, "
"*maxsize* and *currsize*.  In a multi-threaded environment, the hits and "
"misses are approximate."
msgstr ""
"キャッシュ効率の測定や *maxsize* パラメータの調整をしやすくするため、ラップされた関数には :func:`cache_info` "
"関数が追加されます。この関数は *hits*, *misses*, *maxsize*, *currsize* を示す :term:`named "
"tuple` を返します。マルチスレッド環境では、hits と misses は概算です。"

#: ../../library/functools.rst:116
msgid ""
"The decorator also provides a :func:`cache_clear` function for clearing or "
"invalidating the cache."
msgstr "このデコレータは、キャッシュの削除と無効化のための :func:`cache_clear` 関数も提供します。"

#: ../../library/functools.rst:119
msgid ""
"The original underlying function is accessible through the "
":attr:`__wrapped__` attribute.  This is useful for introspection, for "
"bypassing the cache, or for rewrapping the function with a different cache."
msgstr ""
"元々の基底の関数には、 :attr:`__wrapped__` "
"属性を通してアクセスできます。これはキャッシュを回避して、または関数を別のキャッシュでラップして、内観するのに便利です。"

#: ../../library/functools.rst:123
msgid ""
"An `LRU (least recently used) cache "
"<https://en.wikipedia.org/wiki/Cache_algorithms#Examples>`_ works best when "
"the most recent calls are the best predictors of upcoming calls (for "
"example, the most popular articles on a news server tend to change each "
"day). The cache's size limit assures that the cache does not grow without "
"bound on long-running processes such as web servers."
msgstr ""
"`LRU (least recently used) キャッシュ "
"<https://ja.wikipedia.org/wiki/キャッシュアルゴリズム#.E4.BE.8B>`_ "
"は、最新の呼び出しが次も呼び出される可能性が最も高い場合 (例えば、ニュースサーバーの最も人気のある記事は、毎日変わる傾向にあります) "
"に最も効率が良くなります。キャッシュのサイズ制限は、キャッシュがウェブサーバーなどの長期間に渡るプロセスにおける限界を超えては大きくならないことを保証します。"

#: ../../library/functools.rst:130
msgid ""
"In general, the LRU cache should only be used when you want to reuse "
"previously computed values.  Accordingly, it doesn't make sense to cache "
"functions with side-effects, functions that need to create distinct mutable "
"objects on each call, or impure functions such as time() or random()."
msgstr ""
"一般的には、 LRU キャッシュは前回計算した値を再利用したいときにのみ使うべきです。\n"
"そのため、副作用のある関数、呼び出すごとに個別の可変なオブジェクトを作成する必要がある関数、 time() や random() のような純粋でない関数をキャッシュする意味はありません。"

#: ../../library/functools.rst:135
msgid "Example of an LRU cache for static web content::"
msgstr "静的 web コンテンツ の LRU キャッシュの例::"

#: ../../library/functools.rst:154
msgid ""
"Example of efficiently computing `Fibonacci numbers "
"<https://en.wikipedia.org/wiki/Fibonacci_number>`_ using a cache to "
"implement a `dynamic programming "
"<https://en.wikipedia.org/wiki/Dynamic_programming>`_ technique::"
msgstr ""
"キャッシュを使って `動的計画法 <https://ja.wikipedia.org/wiki/動的計画法>`_ の技法を実装し、`フィボナッチ数 "
"<https://ja.wikipedia.org/wiki/フィボナッチ数>`_ を効率よく計算する例::"

#: ../../library/functools.rst:174
msgid "Added the *typed* option."
msgstr "*typed* オプションが追加されました。"

#: ../../library/functools.rst:177
msgid "Added the *user_function* option."
msgstr ""

#: ../../library/functools.rst:182
msgid ""
"Given a class defining one or more rich comparison ordering methods, this "
"class decorator supplies the rest.  This simplifies the effort involved in "
"specifying all of the possible rich comparison operations:"
msgstr ""
"ひとつ以上の拡張順序比較メソッド (rich comparison ordering methods) "
"を定義したクラスを受け取り、残りを実装するクラスデコレータです。このデコレータは全ての拡張順序比較演算をサポートするための労力を軽減します:"

#: ../../library/functools.rst:186
msgid ""
"The class must define one of :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`,"
" or :meth:`__ge__`. In addition, the class should supply an :meth:`__eq__` "
"method."
msgstr ""
"引数のクラスは、 :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`, :meth:`__ge__` "
"の中からどれか1つと、 :meth:`__eq__` メソッドを定義する必要があります。"

#: ../../library/functools.rst:190
msgid "For example::"
msgstr "例えば::"

#: ../../library/functools.rst:210
msgid ""
"While this decorator makes it easy to create well behaved totally ordered "
"types, it *does* come at the cost of slower execution and more complex stack"
" traces for the derived comparison methods. If performance benchmarking "
"indicates this is a bottleneck for a given application, implementing all six"
" rich comparison methods instead is likely to provide an easy speed boost."
msgstr ""
"このデコレータにより、完全に順序の付いた振る舞いの良い型を簡単に作ることができますが、実行速度は遅くなり、派生した比較メソッドのスタックトレースは複雑になります。性能ベンチマークにより、これがアプリケーションのボトルネックになっていることがわかった場合は、代わりに"
" 6 つの拡張比較メソッドをすべて実装すれば、簡単にスピードアップを図れるでしょう。"

#: ../../library/functools.rst:219
msgid ""
"Returning NotImplemented from the underlying comparison function for "
"unrecognised types is now supported."
msgstr "認識できない型に対して下層の比較関数から NotImplemented を返すことがサポートされるようになりました。"

#: ../../library/functools.rst:225
msgid ""
"Return a new :ref:`partial object<partial-objects>` which when called will "
"behave like *func* called with the positional arguments *args* and keyword "
"arguments *keywords*. If more arguments are supplied to the call, they are "
"appended to *args*. If additional keyword arguments are supplied, they "
"extend and override *keywords*. Roughly equivalent to::"
msgstr ""
"新しい :ref:`partial オブジェクト<partial-objects>` を返します。このオブジェクトは呼び出されると位置引数 *args*"
" とキーワード引数 *keywords* 付きで呼び出された *func* のように振る舞います。呼び出しに際してさらなる引数が渡された場合、それらは "
"*args* に付け加えられます。追加のキーワード引数が渡された場合には、それらで *keywords* "
"を拡張または上書きします。おおよそ次のコードと等価です::"

#: ../../library/functools.rst:241
msgid ""
"The :func:`partial` is used for partial function application which "
"\"freezes\" some portion of a function's arguments and/or keywords resulting"
" in a new object with a simplified signature.  For example, :func:`partial` "
"can be used to create a callable that behaves like the :func:`int` function "
"where the *base* argument defaults to two:"
msgstr ""
"関数 :func:`partial` "
"は、関数の位置引数・キーワード引数の一部を「凍結」した部分適用として使われ、簡素化された引数形式をもった新たなオブジェクトを作り出します。例えば、 "
":func:`partial` を使って *base* 引数のデフォルトが 2 である :func:`int` "
"関数のように振る舞う呼び出し可能オブジェクトを作ることができます:"

#: ../../library/functools.rst:256
msgid ""
"Return a new :class:`partialmethod` descriptor which behaves like "
":class:`partial` except that it is designed to be used as a method "
"definition rather than being directly callable."
msgstr ""
":class:`partial` と似た動作をする新しい :class:`partialmethod` 記述子 (デスクリプタ) "
"を返します。直接呼び出しではなく、メソッド定義としての使用が目的であることのみが、partial とは異なります。"

#: ../../library/functools.rst:260
msgid ""
"*func* must be a :term:`descriptor` or a callable (objects which are both, "
"like normal functions, are handled as descriptors)."
msgstr ""
"*func* は、:term:`descriptor` または呼び出し可能オブジェクトである必要があります "
"(通常の関数など、両方の性質を持つオブジェクトは記述子として扱われます。)"

#: ../../library/functools.rst:263
msgid ""
"When *func* is a descriptor (such as a normal Python function, "
":func:`classmethod`, :func:`staticmethod`, :func:`abstractmethod` or another"
" instance of :class:`partialmethod`), calls to ``__get__`` are delegated to "
"the underlying descriptor, and an appropriate :ref:`partial object<partial-"
"objects>` returned as the result."
msgstr ""
"*func* が記述子 (Python の通常の関数、 "
":func:`classmethod`、:func:`staticmethod`、:func:`abstractmethod` または別の "
":class:`partialmethod` のインスタンスなど) の場合、 ``__get__`` "
"への呼び出しは下層の記述子に委譲され、返り値として適切な :ref:`partial オブジェクト<partial-objects>` が返されます。"

#: ../../library/functools.rst:269
msgid ""
"When *func* is a non-descriptor callable, an appropriate bound method is "
"created dynamically. This behaves like a normal Python function when used as"
" a method: the *self* argument will be inserted as the first positional "
"argument, even before the *args* and *keywords* supplied to the "
":class:`partialmethod` constructor."
msgstr ""
"*func* が記述子以外の呼び出し可能オブジェクトである場合、適切な束縛メソッドが動的に作成されます。この func "
"は、メソッドとして使用された場合、Python の通常の関数と同様に動作します。 :class:`partialmethod` コンストラクタに "
"*args* と *keywords* が渡されるよりも前に、 *self* 引数が最初の位置引数として挿入されます。"

#: ../../library/functools.rst:300
msgid ""
"Apply *function* of two arguments cumulatively to the items of *iterable*, "
"from left to right, so as to reduce the iterable to a single value.  For "
"example, ``reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])`` calculates "
"``((((1+2)+3)+4)+5)``. The left argument, *x*, is the accumulated value and "
"the right argument, *y*, is the update value from the *iterable*.  If the "
"optional *initializer* is present, it is placed before the items of the "
"iterable in the calculation, and serves as a default when the iterable is "
"empty.  If *initializer* is not given and *iterable* contains only one item,"
" the first item is returned."
msgstr ""

#: ../../library/functools.rst:309
msgid "Roughly equivalent to::"
msgstr "およそ次と等価です::"

#: ../../library/functools.rst:321
msgid ""
"See :func:`itertools.accumulate` for an iterator that yields all "
"intermediate values."
msgstr ""

#: ../../library/functools.rst:326
msgid ""
"Transform a function into a :term:`single-dispatch <single dispatch>` "
":term:`generic function`."
msgstr ""
"関数を :term:`シングルディスパッチ <single dispatch>` :term:`ジェネリック関数 <generic function>`"
" に変換します。"

#: ../../library/functools.rst:329
msgid ""
"To define a generic function, decorate it with the ``@singledispatch`` "
"decorator. Note that the dispatch happens on the type of the first argument,"
" create your function accordingly::"
msgstr ""
"ジェネリック関数を定義するには、 ``@singledispatch`` デコレータを付けます。ディスパッチは 1 "
"つ目の引数の型で行われることに注意して、関数を次のように作成してください::"

#: ../../library/functools.rst:340
msgid ""
"To add overloaded implementations to the function, use the :func:`register` "
"attribute of the generic function.  It is a decorator.  For functions "
"annotated with types, the decorator will infer the type of the first "
"argument automatically::"
msgstr ""
"関数にオーバーロード実装を追加するには、ジェネリック関数の :func:`register` 属性を使用します。\n"
"この属性はデコレータです。\n"
"型アノテーションが付いている関数については、このデコレータは1つ目の引数の型を自動的に推測します。"

#: ../../library/functools.rst:358
msgid ""
"For code which doesn't use type annotations, the appropriate type argument "
"can be passed explicitly to the decorator itself::"
msgstr "型アノテーションを使っていないコードについては、デコレータに適切な型引数を明示的に渡せます::"

#: ../../library/functools.rst:369
msgid ""
"To enable registering lambdas and pre-existing functions, the "
":func:`register` attribute can be used in a functional form::"
msgstr ":func:`register` 属性を関数形式で使用すると、lambda 関数と既存の関数の登録を有効にできます::"

#: ../../library/functools.rst:377
msgid ""
"The :func:`register` attribute returns the undecorated function which "
"enables decorator stacking, pickling, as well as creating unit tests for "
"each variant independently::"
msgstr ""
" :func:`register` 属性は、デコレートされていない関数を返します。この関数により、複層デコレータ、デコレータの pickle "
"化、各変数の独立なユニットテストの作成が可能です::"

#: ../../library/functools.rst:391
msgid ""
"When called, the generic function dispatches on the type of the first "
"argument::"
msgstr "汎用関数は、呼び出されると 1 つ目の引数の型でディスパッチします::"

#: ../../library/functools.rst:411
msgid ""
"Where there is no registered implementation for a specific type, its method "
"resolution order is used to find a more generic implementation. The original"
" function decorated with ``@singledispatch`` is registered for the base "
"``object`` type, which means it is used if no better implementation is "
"found."
msgstr ""
"特定の型について登録された実装が存在しない場合、その型のメソッド解決順序が、汎用の実装をさらに検索するために使用されます。``@singledispatch``"
" でデコレートされた元の関数は基底の ``object`` 型に登録されます。これは、他によりよい実装が見つからないことを意味します。"

#: ../../library/functools.rst:417
msgid ""
"To check which implementation will the generic function choose for a given "
"type, use the ``dispatch()`` attribute::"
msgstr "指定された型に対して、汎用関数がどの実装を選択するかを確認するには、``dispatch()``  属性を使用します::"

#: ../../library/functools.rst:425
msgid ""
"To access all registered implementations, use the read-only ``registry`` "
"attribute::"
msgstr "登録されたすべての実装にアクセスするには、読み出し専用の ``registry`` 属性を使用します::"

#: ../../library/functools.rst:439
msgid "The :func:`register` attribute supports using type annotations."
msgstr ":func:`register` 属性が型アノテーションの使用をサポートするようになりました。"

#: ../../library/functools.rst:445
msgid ""
"Transform a method into a :term:`single-dispatch <single dispatch>` "
":term:`generic function`."
msgstr ""

#: ../../library/functools.rst:448
msgid ""
"To define a generic method, decorate it with the ``@singledispatchmethod`` "
"decorator. Note that the dispatch happens on the type of the first non-self "
"or non-cls argument, create your function accordingly::"
msgstr ""

#: ../../library/functools.rst:465
msgid ""
"``@singledispatchmethod`` supports nesting with other decorators such as "
"``@classmethod``. Note that to allow for ``dispatcher.register``, "
"``singledispatchmethod`` must be the *outer most* decorator. Here is the "
"``Negator`` class with the ``neg`` methods being class bound::"
msgstr ""

#: ../../library/functools.rst:486
msgid ""
"The same pattern can be used for other similar decorators: ``staticmethod``,"
" ``abstractmethod``, and others."
msgstr ""

#: ../../library/functools.rst:494
msgid ""
"Update a *wrapper* function to look like the *wrapped* function. The "
"optional arguments are tuples to specify which attributes of the original "
"function are assigned directly to the matching attributes on the wrapper "
"function and which attributes of the wrapper function are updated with the "
"corresponding attributes from the original function. The default values for "
"these arguments are the module level constants ``WRAPPER_ASSIGNMENTS`` "
"(which assigns to the wrapper function's ``__module__``, ``__name__``, "
"``__qualname__``, ``__annotations__`` and ``__doc__``, the documentation "
"string) and ``WRAPPER_UPDATES`` (which updates the wrapper function's "
"``__dict__``, i.e. the instance dictionary)."
msgstr ""
"*wrapper* 関数を *wrapped* "
"関数に見えるようにアップデートします。オプション引数はタプルで、元の関数のどの属性がラッパー関数の対応する属性に直接代入されるか、またラッパー関数のどの属性が元の関数の対応する属性でアップデートされるか、を指定します。これらの引数のデフォルト値は、モジュールレベル定数"
" ``WRAPPER_ASSIGNMENTS`` (これはラッパー関数の ``__module__``, ``__name__``, "
"``__qualname__``, ``__annotations__`` そしてドキュメンテーション文字列 ``__doc__`` に代入する) と "
"``WRAPPER_UPDATES`` (これはラッパー関数の ``__dict__`` すなわちインスタンス辞書をアップデートする) です。"

#: ../../library/functools.rst:504
msgid ""
"To allow access to the original function for introspection and other "
"purposes (e.g. bypassing a caching decorator such as :func:`lru_cache`), "
"this function automatically adds a ``__wrapped__`` attribute to the wrapper "
"that refers to the function being wrapped."
msgstr ""
"内観や別の目的 (例えば、 :func:`lru_cache` のようなキャッシュするデコレータの回避) "
"のために元の関数にアクセスできるように、この関数はラップされている関数を参照するラッパーに自動的に ``__wrapped__`` 属性を追加します。"

#: ../../library/functools.rst:509
msgid ""
"The main intended use for this function is in :term:`decorator` functions "
"which wrap the decorated function and return the wrapper. If the wrapper "
"function is not updated, the metadata of the returned function will reflect "
"the wrapper definition rather than the original function definition, which "
"is typically less than helpful."
msgstr ""
"この関数は主に関数を包んでラッパーを返す :term:`デコレータ <decorator>` "
"関数の中で使われるよう意図されています。もしラッパー関数がアップデートされないとすると、返される関数のメタデータは元の関数の定義ではなくラッパー関数の定義を反映してしまい、これは通常あまり有益ではありません。"

#: ../../library/functools.rst:515
msgid ""
":func:`update_wrapper` may be used with callables other than functions. Any "
"attributes named in *assigned* or *updated* that are missing from the object"
" being wrapped are ignored (i.e. this function will not attempt to set them "
"on the wrapper function). :exc:`AttributeError` is still raised if the "
"wrapper function itself is missing any attributes named in *updated*."
msgstr ""
":func:`update_wrapper` は、関数以外の呼び出し可能オブジェクトにも使えます。 *assigned* または *updated* "
"で指名され、ラップされるオブジェクトに存在しない属性は、すべて無視されます "
"(すなわち、ラッパー関数にそれらの属性を設定しようとは試みられません)。しかし、 *updated* で指名された属性がラッパー関数自身に存在しないなら"
" :exc:`AttributeError` が送出されます。"

#: ../../library/functools.rst:521
msgid "Automatic addition of the ``__wrapped__`` attribute."
msgstr "``__wrapped__`` 属性の自動的な追加。"

#: ../../library/functools.rst:524
msgid "Copying of the ``__annotations__`` attribute by default."
msgstr "デフォルトで ``__annotations__`` 属性がコピーされます。"

#: ../../library/functools.rst:527
msgid "Missing attributes no longer trigger an :exc:`AttributeError`."
msgstr "存在しない属性によって :exc:`AttributeError` を発生しなくなりました。"

#: ../../library/functools.rst:530
msgid ""
"The ``__wrapped__`` attribute now always refers to the wrapped function, "
"even if that function defined a ``__wrapped__`` attribute. (see "
":issue:`17482`)"
msgstr ""
"ラップされた関数が ``__wrapped__`` を定義していない場合でも、 ``__wrapped__`` "
"が常にラップされた関数を参照するようになりました。(:issue:`17482` を参照)"

#: ../../library/functools.rst:538
msgid ""
"This is a convenience function for invoking :func:`update_wrapper` as a "
"function decorator when defining a wrapper function.  It is equivalent to "
"``partial(update_wrapper, wrapped=wrapped, assigned=assigned, "
"updated=updated)``. For example::"
msgstr ""
"これはラッパー関数を定義するときに :func:`update_wrapper` を関数デコレータとして呼び出す便宜関数です。これは "
"``partial(update_wrapper, wrapped=wrapped, assigned=assigned, "
"updated=updated)`` と等価です。例えば::"

#: ../../library/functools.rst:564
msgid ""
"Without the use of this decorator factory, the name of the example function "
"would have been ``'wrapper'``, and the docstring of the original "
":func:`example` would have been lost."
msgstr ""
"このデコレータ・ファクトリを使用しないと、上の例中の関数の名前は ``'wrapper'`` となり、元の :func:`example` "
"のドキュメンテーション文字列は失われてしまいます。"

#: ../../library/functools.rst:572
msgid ":class:`partial` Objects"
msgstr ":class:`partial` オブジェクト"

#: ../../library/functools.rst:574
msgid ""
":class:`partial` objects are callable objects created by :func:`partial`. "
"They have three read-only attributes:"
msgstr ""
":class:`partial` オブジェクトは、 :func:`partial` "
"関数によって作られる呼び出し可能オブジェクトです。オブジェクトには読み出し専用の属性が三つあります:"

#: ../../library/functools.rst:580
msgid ""
"A callable object or function.  Calls to the :class:`partial` object will be"
" forwarded to :attr:`func` with new arguments and keywords."
msgstr ""
"呼び出し可能オブジェクトまたは関数です。 :class:`partial` オブジェクトの呼び出しは新しい引数とキーワードと共に "
":attr:`func` に転送されます。"

#: ../../library/functools.rst:586
msgid ""
"The leftmost positional arguments that will be prepended to the positional "
"arguments provided to a :class:`partial` object call."
msgstr "最左の位置引数で、 :class:`partial` オブジェクトの呼び出し時にその呼び出しの際の位置引数の前に追加されます。"

#: ../../library/functools.rst:592
msgid ""
"The keyword arguments that will be supplied when the :class:`partial` object"
" is called."
msgstr ":class:`partial` オブジェクトの呼び出し時に渡されるキーワード引数です。"

#: ../../library/functools.rst:595
msgid ""
":class:`partial` objects are like :class:`function` objects in that they are"
" callable, weak referencable, and can have attributes.  There are some "
"important differences.  For instance, the :attr:`~definition.__name__` and "
":attr:`__doc__` attributes are not created automatically.  Also, "
":class:`partial` objects defined in classes behave like static methods and "
"do not transform into bound methods during instance attribute look-up."
msgstr ""
":class:`partial` オブジェクトは :class:`function` "
"オブジェクトのように呼び出し可能で、弱参照可能で、属性を持つことができます。重要な相違点もあります。例えば、 "
":attr:`~definition.__name__` と :attr:`__doc__` 両属性は自動では作られません。また、クラス中で定義された "
":class:`partial` オブジェクトはスタティックメソッドのように振る舞い、インスタンスの属性問い合わせの中で束縛メソッドに変換されません。"
