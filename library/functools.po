# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/functools.rst:2
msgid ""
":mod:`functools` --- Higher-order functions and operations on callable "
"objects"
msgstr ":mod:`functools` --- 高次関数と呼び出し可能オブジェクトの操作"

#: ../../library/functools.rst:13
msgid "**Source code:** :source:`Lib/functools.py`"
msgstr "**ソースコード:** :source:`Lib/functools.py`"

#: ../../library/functools.rst:17
msgid ""
"The :mod:`functools` module is for higher-order functions: functions that "
"act on or return other functions. In general, any callable object can be "
"treated as a function for the purposes of this module."
msgstr ""
":mod:`functools` モジュールは高次関数、つまり関数に影響を及ぼしたり他の関数を"
"返したりする関数、のためのものです。一般に、どんな呼び出し可能オブジェクトで"
"もこのモジュールの目的には関数として扱えます。"

#: ../../library/functools.rst:21
msgid "The :mod:`functools` module defines the following functions:"
msgstr "モジュール :mod:`functools` は以下の関数を定義します:"

#: ../../library/functools.rst:25
msgid ""
"Transform an old-style comparison function to a :term:`key function`.  Used "
"with tools that accept key functions (such as :func:`sorted`, :func:`min`, :"
"func:`max`, :func:`heapq.nlargest`, :func:`heapq.nsmallest`, :func:"
"`itertools.groupby`).  This function is primarily used as a transition tool "
"for programs being converted to Python 3 where comparison functions are no "
"longer supported."
msgstr ""
"古いスタイルの比較関数を :term:`key function` に変換します。 key 関数を受け取"
"る関数 (:func:`sorted`, :func:`min`, :func:`max`, :func:`heapq.nlargest`, :"
"func:`heapq.nsmallest`, :func:`itertools.groupby` など) と共に使用します。こ"
"の関数は、主に比較関数をサポートしていない Python 3 への移行のためのツールと"
"して用意されています。"

#: ../../library/functools.rst:32
msgid ""
"A comparison function is any callable that accept two arguments, compares "
"them, and returns a negative number for less-than, zero for equality, or a "
"positive number for greater-than.  A key function is a callable that accepts "
"one argument and returns another value to be used as the sort key."
msgstr ""
"比較関数は2つの引数を受け取り、それらを比較し、 \"より小さい\" 場合は負の数"
"を、同値の場合には 0 を、 \"より大きい\" 場合には正の数を返す、あらゆる呼び出"
"し可能オブジェクトです。key 関数は呼び出し可能オブジェクトで、1つの引数を受け"
"取り、ソートキーとして使われる値を返します。"

#: ../../library/functools.rst:37
msgid "Example::"
msgstr "例::"

#: ../../library/functools.rst:41
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr ""
"ソートの例と簡単なチュートリアルは :ref:`sortinghowto` を参照して下さい。"

#: ../../library/functools.rst:48
msgid ""
"Given a class defining one or more rich comparison ordering methods, this "
"class decorator supplies the rest.  This simplifies the effort involved in "
"specifying all of the possible rich comparison operations:"
msgstr ""
"ひとつ以上の拡張順序比較メソッド (rich comparison ordering methods) を定義し"
"たクラスを受け取り、残りを実装するクラスデコレータです。このデコレータは全て"
"の拡張順序比較演算をサポートするための労力を軽減します:"

#: ../../library/functools.rst:52
msgid ""
"The class must define one of :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`, "
"or :meth:`__ge__`. In addition, the class should supply an :meth:`__eq__` "
"method."
msgstr ""
"引数のクラスは、 :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`, :meth:"
"`__ge__` の中からどれか1つと、 :meth:`__eq__` メソッドを定義する必要がありま"
"す。"

#: ../../library/functools.rst:56
msgid "For example::"
msgstr "例えば::"

#: ../../library/functools.rst:71
msgid ""
"This is the same function as :func:`reduce`.  It is made available in this "
"module to allow writing code more forward-compatible with Python 3."
msgstr ""
"これは :func:`reduce` 関数と同じものです。このモジュールからも使えるようにし"
"たのは Python 3 と前方互換なコードを書けるようにするためです。"

#: ../../library/functools.rst:79
msgid ""
"Return a new :ref:`partial object<partial-objects>` which when called will "
"behave like *func* called with the positional arguments *args* and keyword "
"arguments *keywords*. If more arguments are supplied to the call, they are "
"appended to *args*. If additional keyword arguments are supplied, they "
"extend and override *keywords*. Roughly equivalent to::"
msgstr ""
"新しい :ref:`partial オブジェクト<partial-objects>` を返します。このオブジェ"
"クトは呼び出されると位置引数 *args* とキーワード引数 *keywords* 付きで呼び出"
"された *func* のように振る舞います。呼び出しに際してさらなる引数が渡された場"
"合、それらは *args* に付け加えられます。追加のキーワード引数が渡された場合に"
"は、それらで *keywords* を拡張または上書きします。おおよそ次のコードと等価で"
"す::"

#: ../../library/functools.rst:95
msgid ""
"The :func:`partial` is used for partial function application which "
"\"freezes\" some portion of a function's arguments and/or keywords resulting "
"in a new object with a simplified signature.  For example, :func:`partial` "
"can be used to create a callable that behaves like the :func:`int` function "
"where the *base* argument defaults to two:"
msgstr ""
"関数 :func:`partial` は、関数の位置引数・キーワード引数の一部を「凍結」した部"
"分適用として使われ、簡素化された引数形式をもった新たなオブジェクトを作り出し"
"ます。例えば、 :func:`partial` を使って *base* 引数のデフォルトが 2 である :"
"func:`int` 関数のように振る舞う呼び出し可能オブジェクトを作ることができます:"

#: ../../library/functools.rst:110
msgid ""
"Update a *wrapper* function to look like the *wrapped* function. The "
"optional arguments are tuples to specify which attributes of the original "
"function are assigned directly to the matching attributes on the wrapper "
"function and which attributes of the wrapper function are updated with the "
"corresponding attributes from the original function. The default values for "
"these arguments are the module level constants *WRAPPER_ASSIGNMENTS* (which "
"assigns to the wrapper function's *__name__*, *__module__* and *__doc__*, "
"the documentation string) and *WRAPPER_UPDATES* (which updates the wrapper "
"function's *__dict__*, i.e. the instance dictionary)."
msgstr ""
"*wrapper* 関数を *wrapped* 関数に見えるようにアップデートします。オプション引"
"数はタプルで、元の関数のどの属性がラッパ関数の対応する属性に直接代入される"
"か、またラッパ関数のどの属性が元の関数の対応する属性でアップデートされる"
"(updated)か、を指定します。これらの引数のデフォルト値はモジュールレベル定数 "
"*WRAPPER_ASSIGNMENTS* (ラッパ関数の *__name__* 、*__module__* 、そしてドキュ"
"メンテーション文字列 *__doc__* に代入します) と *WRAPPER_UPDATES* (ラッパ関数"
"の *__dict__* 、すなわちインスタンス辞書をアップデートします) です。"

#: ../../library/functools.rst:120
msgid ""
"The main intended use for this function is in :term:`decorator` functions "
"which wrap the decorated function and return the wrapper. If the wrapper "
"function is not updated, the metadata of the returned function will reflect "
"the wrapper definition rather than the original function definition, which "
"is typically less than helpful."
msgstr ""
"この関数は主に関数を包んでラッパを返すデコレータ (:term:`decorator`) 関数の中"
"で使われるよう意図されています。もしラッパ関数がアップデートされないとする"
"と、返される関数のメタデータは元の関数の定義ではなくラッパ関数の定義を反映し"
"てしまい、これは通常あまり有益ではありません。"

#: ../../library/functools.rst:129
msgid ""
"This is a convenience function for invoking :func:`update_wrapper` as a "
"function decorator when defining a wrapper function.  It is equivalent to "
"``partial(update_wrapper, wrapped=wrapped, assigned=assigned, "
"updated=updated)``. For example::"
msgstr ""
"これはラッパ関数を定義するときに :func:`update_wrapper` を関数デコレータとし"
"て呼び出す便宜関数です。これは ``partial(update_wrapper, wrapped=wrapped, "
"assigned=assigned, updated=updated)`` と等価です。例えば::"

#: ../../library/functools.rst:155
msgid ""
"Without the use of this decorator factory, the name of the example function "
"would have been ``'wrapper'``, and the docstring of the original :func:"
"`example` would have been lost."
msgstr ""
"このデコレータ・ファクトリーを使わなければ、上の例中の関数の名前は "
"``'wrapper'`` となり、元々の :func:`example` のドキュメンテーション文字列は失"
"われたところです。"

#: ../../library/functools.rst:163
msgid ":class:`partial` Objects"
msgstr ":class:`partial` オブジェクト"

#: ../../library/functools.rst:165
msgid ""
":class:`partial` objects are callable objects created by :func:`partial`. "
"They have three read-only attributes:"
msgstr ""
":class:`partial` オブジェクトは、 :func:`partial` 関数によって作られる呼び出"
"し可能オブジェクトです。オブジェクトには読み取り専用の属性が三つあります:"

#: ../../library/functools.rst:171
msgid ""
"A callable object or function.  Calls to the :class:`partial` object will be "
"forwarded to :attr:`func` with new arguments and keywords."
msgstr ""
"呼び出し可能オブジェクトまたは関数です。 :class:`partial` オブジェクトの呼び"
"出しは新しい引数とキーワードと共に :attr:`func` に転送されます。"

#: ../../library/functools.rst:177
msgid ""
"The leftmost positional arguments that will be prepended to the positional "
"arguments provided to a :class:`partial` object call."
msgstr ""
"最左の位置引数で、 :class:`partial` オブジェクトの呼び出し時にその呼び出しの"
"際の位置引数の前に追加されます。"

#: ../../library/functools.rst:183
msgid ""
"The keyword arguments that will be supplied when the :class:`partial` object "
"is called."
msgstr ""
":class:`partial` オブジェクトの呼び出し時に渡されるキーワード引数です。"

#: ../../library/functools.rst:186
msgid ""
":class:`partial` objects are like :class:`function` objects in that they are "
"callable, weak referencable, and can have attributes.  There are some "
"important differences.  For instance, the :attr:`~definition.__name__` and :"
"attr:`__doc__` attributes are not created automatically.  Also, :class:"
"`partial` objects defined in classes behave like static methods and do not "
"transform into bound methods during instance attribute look-up."
msgstr ""
":class:`partial` オブジェクトは :class:`function` オブジェクトのように呼び出"
"し可能で、弱参照可能で、属性を持つことができます。重要な相違点もあります。例"
"えば、 :attr:`~definition.__name__` と :attr:`__doc__` 両属性は自動では作られ"
"ません。また、クラス中で定義された :class:`partial` オブジェクトはスタティッ"
"クメソッドのように振る舞い、インスタンスの属性問い合わせの中で束縛メソッドに"
"変換されません。"
