# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/functools.rst:2
msgid ""
":mod:`functools` --- Higher-order functions and operations on callable "
"objects"
msgstr ":mod:`functools` --- 高階関数と呼び出し可能オブジェクトの操作"

#: ../../library/functools.rst:14
msgid "**Source code:** :source:`Lib/functools.py`"
msgstr "**ソースコード:** :source:`Lib/functools.py`"

#: ../../library/functools.rst:23
msgid ""
"The :mod:`functools` module is for higher-order functions: functions that "
"act on or return other functions. In general, any callable object can be "
"treated as a function for the purposes of this module."
msgstr ""
":mod:`functools` モジュールは高階関数、つまり関数に影響を及ぼしたり他の関数を"
"返したりする関数のためのものです。一般に、どんな呼び出し可能オブジェクトでも"
"このモジュールの目的には関数として扱えます。"

#: ../../library/functools.rst:27
msgid "The :mod:`functools` module defines the following functions:"
msgstr "モジュール :mod:`functools` は以下の関数を定義します:"

#: ../../library/functools.rst:31
msgid ""
"Simple lightweight unbounded function cache.  Sometimes called `\"memoize\" "
"<https://en.wikipedia.org/wiki/Memoization>`_."
msgstr ""
"簡単で軽量な無制限の関数キャッシュです。 `\"メモ化 (memoize)\" <https://en."
"wikipedia.org/wiki/Memoization>`_ とも呼ばれることがあります。"

#: ../../library/functools.rst:34
msgid ""
"Returns the same as ``lru_cache(maxsize=None)``, creating a thin wrapper "
"around a dictionary lookup for the function arguments.  Because it never "
"needs to evict old values, this is smaller and faster than :func:"
"`lru_cache()` with a size limit."
msgstr ""
"``lru_cache(maxsize=None)`` と同じ関数を返し、関数の引数に対するルックアップ"
"辞書を含む薄いラッパーを生成します。キャッシュ上の古い値を追い出す必要がない"
"ため、キャッシュサイズに制限のある :func:`lru_cache()` よりも軽量で高速です。"

#: ../../library/functools.rst:39 ../../library/functools.rst:264
msgid "For example::"
msgstr "例えば::"

#: ../../library/functools.rst:57
msgid ""
"Transform a method of a class into a property whose value is computed once "
"and then cached as a normal attribute for the life of the instance. Similar "
"to :func:`property`, with the addition of caching. Useful for expensive "
"computed properties of instances that are otherwise effectively immutable."
msgstr ""
"クラスのメソッドを、値を一度だけ計算して通常の属性としてキャッシュするプロパ"
"ティに変換します。キャッシュはインスタンスの生存期間にわたって有効です。:"
"func:`property` に似ていて、さらにキャッシュを行います。計算コストが高く、一"
"度計算すればその後は不変であるようなインスタンスのプロパティに対して有用で"
"す。"

#: ../../library/functools.rst:62 ../../library/functools.rst:127
#: ../../library/functools.rst:356
msgid "Example::"
msgstr "以下はプログラム例です::"

#: ../../library/functools.rst:73
msgid ""
"The mechanics of :func:`cached_property` are somewhat different from :func:"
"`property`.  A regular property blocks attribute writes unless a setter is "
"defined. In contrast, a *cached_property* allows writes."
msgstr ""
":func:`cached_property` のしくみは :func:`property` とやや異なります。通常の"
"プロパティは、セッター (setter) が定義されない限り書き込みを禁止します。対照"
"的に、 *cached_property* は書き込みを許します。"

#: ../../library/functools.rst:77
msgid ""
"The *cached_property* decorator only runs on lookups and only when an "
"attribute of the same name doesn't exist.  When it does run, the "
"*cached_property* writes to the attribute with the same name. Subsequent "
"attribute reads and writes take precedence over the *cached_property* method "
"and it works like a normal attribute."
msgstr ""
"*cached_property* デコレータはルックアップテーブルで、同名の属性が存在しない"
"場合のみ動作します。動作した場合、 *cached_property* は同名の属性に書き込みを"
"行います。その後の属性の読み込みと書き込みは *cached_property* メソッドより優"
"先され、通常の属性のように働きます。"

#: ../../library/functools.rst:83
msgid ""
"The cached value can be cleared by deleting the attribute.  This allows the "
"*cached_property* method to run again."
msgstr ""
"キャッシュされた値は属性を削除することで取り除くことができます。これにより "
"*cached_property* メソッドを再度実行することが可能になります。"

#: ../../library/functools.rst:86
msgid ""
"Note, this decorator interferes with the operation of :pep:`412` key-sharing "
"dictionaries.  This means that instance dictionaries can take more space "
"than usual."
msgstr ""
"このデコレータは :pep:`412` のキー共有辞書のインターフェースを持ちます。これ"
"は、インスタンス辞書がより多くのスペースを使う可能性があることを意味します。"

#: ../../library/functools.rst:90
msgid ""
"Also, this decorator requires that the ``__dict__`` attribute on each "
"instance be a mutable mapping. This means it will not work with some types, "
"such as metaclasses (since the ``__dict__`` attributes on type instances are "
"read-only proxies for the class namespace), and those that specify "
"``__slots__`` without including ``__dict__`` as one of the defined slots (as "
"such classes don't provide a ``__dict__`` attribute at all)."
msgstr ""
"また、このデコレータは各インスタンスの ``__dict__`` 属性が可変のマッピングで"
"あることを要求します。すなわち、このデコレータはいくつかの型、たとえばメタク"
"ラス (型インスタンスの ``__dict__`` 属性はクラスの名前空間に対する読み込み専"
"用のプロキシであるため) や、 ``__slots__`` を指定していてその中に "
"``__dict__`` を含まない型 (それ自体が ``__dict__`` 属性を提供しないため) に対"
"しては動作しないことを意味します。"

#: ../../library/functools.rst:97
msgid ""
"If a mutable mapping is not available or if space-efficient key sharing is "
"desired, an effect similar to :func:`cached_property` can be achieved by a "
"stacking :func:`property` on top of :func:`cache`::"
msgstr ""
"可変なマッピングを持たないか、またはスペース効率の良いキー共有が必要な場合"
"は、 :func:`cached_property` と似たような効果を :func:`cache` の上に :func:"
"`property` を重ねることで実現できます::"

#: ../../library/functools.rst:115
msgid ""
"Transform an old-style comparison function to a :term:`key function`.  Used "
"with tools that accept key functions (such as :func:`sorted`, :func:`min`, :"
"func:`max`, :func:`heapq.nlargest`, :func:`heapq.nsmallest`, :func:"
"`itertools.groupby`).  This function is primarily used as a transition tool "
"for programs being converted from Python 2 which supported the use of "
"comparison functions."
msgstr ""
"古いスタイルの比較関数を :term:`key function` に変換します。key 関数を受け取"
"るツール (:func:`sorted`, :func:`min`, :func:`max`, :func:`heapq.nlargest`, :"
"func:`heapq.nsmallest`, :func:`itertools.groupby` など) と共に使用します。こ"
"の関数は、主に比較関数を使っていた Python 2 からプログラムの移行のための変換"
"ツールとして使われます。"

#: ../../library/functools.rst:122
msgid ""
"A comparison function is any callable that accepts two arguments, compares "
"them, and returns a negative number for less-than, zero for equality, or a "
"positive number for greater-than.  A key function is a callable that accepts "
"one argument and returns another value to be used as the sort key."
msgstr ""

#: ../../library/functools.rst:131
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr ""
"ソートの例と簡単なチュートリアルは :ref:`sortinghowto` を参照して下さい。"

#: ../../library/functools.rst:139
msgid ""
"Decorator to wrap a function with a memoizing callable that saves up to the "
"*maxsize* most recent calls.  It can save time when an expensive or I/O "
"bound function is periodically called with the same arguments."
msgstr ""
"関数をメモ化用の呼び出し可能オブジェクトでラップし、最近の呼び出し最大 "
"*maxsize* 回まで保存するするデコレータです。高価な関数や I/O に束縛されている"
"関数を定期的に同じ引数で呼び出すときに、時間を節約できます。"

#: ../../library/functools.rst:143
msgid ""
"Since a dictionary is used to cache results, the positional and keyword "
"arguments to the function must be hashable."
msgstr ""
"結果のキャッシュには辞書が使われるので、関数の位置引数およびキーワード引数は"
"ハッシュ可能でなくてはなりません。"

#: ../../library/functools.rst:146
msgid ""
"Distinct argument patterns may be considered to be distinct calls with "
"separate cache entries.  For example, `f(a=1, b=2)` and `f(b=2, a=1)` differ "
"in their keyword argument order and may have two separate cache entries."
msgstr ""
"引数のパターンが異なる場合は、異なる呼び出しと見なされ別々のキャッシュエント"
"リーとなります。\n"
"例えば、 `f(a=1, b=2)` と `f(b=2, a=1)` はキーワード引数の順序が異なっている"
"ので、2つの別個のキャッシュエントリーになります。"

#: ../../library/functools.rst:151
msgid ""
"If *user_function* is specified, it must be a callable. This allows the "
"*lru_cache* decorator to be applied directly to a user function, leaving the "
"*maxsize* at its default value of 128::"
msgstr ""
"*user_function* が指定された場合、それは呼び出し可能でなければなりません。こ"
"れにより *lru_cache* デコレータがユーザー関数に直接適用できるようになります。"
"このとき *maxsize* の値はデフォルトの 128 となります::"

#: ../../library/functools.rst:159
msgid ""
"If *maxsize* is set to ``None``, the LRU feature is disabled and the cache "
"can grow without bound."
msgstr ""
"*maxsize* が ``None`` に設定された場合は、LRU 機能は無効化され、キャッシュは"
"際限無く大きくなります。"

#: ../../library/functools.rst:162
msgid ""
"If *typed* is set to true, function arguments of different types will be "
"cached separately.  If *typed* is false, the implementation will usually "
"regard them as equivalent calls and only cache a single result. (Some types "
"such as *str* and *int* may be cached separately even when *typed* is false.)"
msgstr ""

#: ../../library/functools.rst:168
msgid ""
"Note, type specificity applies only to the function's immediate arguments "
"rather than their contents.  The scalar arguments, ``Decimal(42)`` and "
"``Fraction(42)`` are be treated as distinct calls with distinct results. In "
"contrast, the tuple arguments ``('answer', Decimal(42))`` and ``('answer', "
"Fraction(42))`` are treated as equivalent."
msgstr ""

#: ../../library/functools.rst:174
msgid ""
"The wrapped function is instrumented with a :func:`cache_parameters` "
"function that returns a new :class:`dict` showing the values for *maxsize* "
"and *typed*.  This is for information purposes only.  Mutating the values "
"has no effect."
msgstr ""
"ラップされた関数には :func:`cache_parameters` 関数が定義されます。この関数は "
"*maxsize* と *typed* の値を含む :class:`dict` を新規に生成して 返します。これ"
"は通知目的のみであり、戻り値の変更は何の効果もありません。"

#: ../../library/functools.rst:179
msgid ""
"To help measure the effectiveness of the cache and tune the *maxsize* "
"parameter, the wrapped function is instrumented with a :func:`cache_info` "
"function that returns a :term:`named tuple` showing *hits*, *misses*, "
"*maxsize* and *currsize*."
msgstr ""

#: ../../library/functools.rst:184
msgid ""
"The decorator also provides a :func:`cache_clear` function for clearing or "
"invalidating the cache."
msgstr ""
"このデコレータは、キャッシュの削除と無効化のための :func:`cache_clear` 関数も"
"提供します。"

#: ../../library/functools.rst:187
msgid ""
"The original underlying function is accessible through the :attr:"
"`__wrapped__` attribute.  This is useful for introspection, for bypassing "
"the cache, or for rewrapping the function with a different cache."
msgstr ""
"元々の基底の関数には、 :attr:`__wrapped__` 属性を通してアクセスできます。これ"
"はキャッシュを回避して、または関数を別のキャッシュでラップして、内観するのに"
"便利です。"

#: ../../library/functools.rst:191
msgid ""
"The cache keeps references to the arguments and return values until they age "
"out of the cache or until the cache is cleared."
msgstr ""

#: ../../library/functools.rst:194
msgid ""
"An `LRU (least recently used) cache <https://en.wikipedia.org/wiki/"
"Cache_replacement_policies#Least_recently_used_(LRU)>`_ works best when the "
"most recent calls are the best predictors of upcoming calls (for example, "
"the most popular articles on a news server tend to change each day).  The "
"cache's size limit assures that the cache does not grow without bound on "
"long-running processes such as web servers."
msgstr ""
"`LRU (least recently used) キャッシュ <https://en.wikipedia.org/wiki/"
"Cache_replacement_policies#Least_recently_used_(LRU)>`_ は、最も新しい呼び出"
"しが次の呼び出しで最も現れやすいとき (例えば、最もニュースサーバの人気の記事"
"が日ごとに変わる傾向にある場合) に最も最も効率よくはたらきます。キャッシュの"
"サイズ制限は、キャッシュがウェブサーバの長期間に渡るプロセスにおける限界を超"
"えては大きくならないことを保証します。"

#: ../../library/functools.rst:201
msgid ""
"In general, the LRU cache should only be used when you want to reuse "
"previously computed values.  Accordingly, it doesn't make sense to cache "
"functions with side-effects, functions that need to create distinct mutable "
"objects on each call, or impure functions such as time() or random()."
msgstr ""
"一般的には、 LRU キャッシュは前回計算した値を再利用したいときにのみ使うべきで"
"す。\n"
"そのため、副作用のある関数、呼び出すごとに個別の可変なオブジェクトを作成する"
"必要がある関数、 time() や random() のような純粋でない関数をキャッシュする意"
"味はありません。"

#: ../../library/functools.rst:206
msgid "Example of an LRU cache for static web content::"
msgstr "静的 web コンテンツ の LRU キャッシュの例::"

#: ../../library/functools.rst:225
msgid ""
"Example of efficiently computing `Fibonacci numbers <https://en.wikipedia."
"org/wiki/Fibonacci_number>`_ using a cache to implement a `dynamic "
"programming <https://en.wikipedia.org/wiki/Dynamic_programming>`_ technique::"
msgstr ""
"キャッシュを使って `動的計画法 <https://ja.wikipedia.org/wiki/動的計画法>`_ "
"の技法を実装し、`フィボナッチ数 <https://ja.wikipedia.org/wiki/フィボナッチ数"
">`_ を効率よく計算する例::"

#: ../../library/functools.rst:245
msgid "Added the *typed* option."
msgstr "*typed* オプションが追加されました。"

#: ../../library/functools.rst:248
msgid "Added the *user_function* option."
msgstr "*user_function* オプションが追加されました。"

#: ../../library/functools.rst:251
msgid "Added the function :func:`cache_parameters`"
msgstr ":func:`cache_parameters` 関数が追加されました。"

#: ../../library/functools.rst:256
msgid ""
"Given a class defining one or more rich comparison ordering methods, this "
"class decorator supplies the rest.  This simplifies the effort involved in "
"specifying all of the possible rich comparison operations:"
msgstr ""
"ひとつ以上の拡張順序比較メソッド (rich comparison ordering methods) を定義し"
"たクラスを受け取り、残りを実装するクラスデコレータです。このデコレータは全て"
"の拡張順序比較演算をサポートするための労力を軽減します:"

#: ../../library/functools.rst:260
msgid ""
"The class must define one of :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`, "
"or :meth:`__ge__`. In addition, the class should supply an :meth:`__eq__` "
"method."
msgstr ""
"引数のクラスは、 :meth:`__lt__`, :meth:`__le__`, :meth:`__gt__`, :meth:"
"`__ge__` の中からどれか1つと、 :meth:`__eq__` メソッドを定義する必要がありま"
"す。"

#: ../../library/functools.rst:284
msgid ""
"While this decorator makes it easy to create well behaved totally ordered "
"types, it *does* come at the cost of slower execution and more complex stack "
"traces for the derived comparison methods. If performance benchmarking "
"indicates this is a bottleneck for a given application, implementing all six "
"rich comparison methods instead is likely to provide an easy speed boost."
msgstr ""
"このデコレータにより、完全に順序の付いた振る舞いの良い型を簡単に作ることがで"
"きますが、実行速度は遅くなり、派生した比較メソッドのスタックトレースは複雑に"
"なります。性能ベンチマークにより、これがアプリケーションのボトルネックになっ"
"ていることがわかった場合は、代わりに 6 つの拡張比較メソッドをすべて実装すれ"
"ば、簡単にスピードアップを図れるでしょう。"

#: ../../library/functools.rst:293
msgid ""
"This decorator makes no attempt to override methods that have been declared "
"in the class *or its superclasses*. Meaning that if a superclass defines a "
"comparison operator, *total_ordering* will not implement it again, even if "
"the original method is abstract."
msgstr ""

#: ../../library/functools.rst:300
msgid ""
"Returning NotImplemented from the underlying comparison function for "
"unrecognised types is now supported."
msgstr ""
"認識できない型に対して下層の比較関数から NotImplemented を返すことがサポート"
"されるようになりました。"

#: ../../library/functools.rst:306
msgid ""
"Return a new :ref:`partial object<partial-objects>` which when called will "
"behave like *func* called with the positional arguments *args* and keyword "
"arguments *keywords*. If more arguments are supplied to the call, they are "
"appended to *args*. If additional keyword arguments are supplied, they "
"extend and override *keywords*. Roughly equivalent to::"
msgstr ""
"新しい :ref:`partial オブジェクト<partial-objects>` を返します。このオブジェ"
"クトは呼び出されると位置引数 *args* とキーワード引数 *keywords* 付きで呼び出"
"された *func* のように振る舞います。呼び出しに際してさらなる引数が渡された場"
"合、それらは *args* に付け加えられます。追加のキーワード引数が渡された場合に"
"は、それらで *keywords* を拡張または上書きします。おおよそ次のコードと等価で"
"す::"

#: ../../library/functools.rst:322
msgid ""
"The :func:`partial` is used for partial function application which "
"\"freezes\" some portion of a function's arguments and/or keywords resulting "
"in a new object with a simplified signature.  For example, :func:`partial` "
"can be used to create a callable that behaves like the :func:`int` function "
"where the *base* argument defaults to two:"
msgstr ""
"関数 :func:`partial` は、関数の位置引数・キーワード引数の一部を「凍結」した部"
"分適用として使われ、簡素化された引数形式をもった新たなオブジェクトを作り出し"
"ます。例えば、 :func:`partial` を使って *base* 引数のデフォルトが 2 である :"
"func:`int` 関数のように振る舞う呼び出し可能オブジェクトを作ることができます:"

#: ../../library/functools.rst:337
msgid ""
"Return a new :class:`partialmethod` descriptor which behaves like :class:"
"`partial` except that it is designed to be used as a method definition "
"rather than being directly callable."
msgstr ""
":class:`partial` と似た動作をする新しい :class:`partialmethod` 記述子 (デスク"
"リプタ) を返します。直接呼び出しではなく、メソッド定義としての使用が目的であ"
"ることのみが、partial とは異なります。"

#: ../../library/functools.rst:341
msgid ""
"*func* must be a :term:`descriptor` or a callable (objects which are both, "
"like normal functions, are handled as descriptors)."
msgstr ""
"*func* は、:term:`descriptor` または呼び出し可能オブジェクトである必要があり"
"ます (通常の関数など、両方の性質を持つオブジェクトは記述子として扱われます。)"

#: ../../library/functools.rst:344
msgid ""
"When *func* is a descriptor (such as a normal Python function, :func:"
"`classmethod`, :func:`staticmethod`, :func:`abstractmethod` or another "
"instance of :class:`partialmethod`), calls to ``__get__`` are delegated to "
"the underlying descriptor, and an appropriate :ref:`partial object<partial-"
"objects>` returned as the result."
msgstr ""
"*func* が記述子 (Python の通常の関数、 :func:`classmethod`、:func:"
"`staticmethod`、:func:`abstractmethod` または別の :class:`partialmethod` のイ"
"ンスタンスなど) の場合、 ``__get__`` への呼び出しは下層の記述子に委譲され、返"
"り値として適切な :ref:`partial オブジェクト<partial-objects>` が返されます。"

#: ../../library/functools.rst:350
msgid ""
"When *func* is a non-descriptor callable, an appropriate bound method is "
"created dynamically. This behaves like a normal Python function when used as "
"a method: the *self* argument will be inserted as the first positional "
"argument, even before the *args* and *keywords* supplied to the :class:"
"`partialmethod` constructor."
msgstr ""
"*func* が記述子以外の呼び出し可能オブジェクトである場合、適切な束縛メソッドが"
"動的に作成されます。この func は、メソッドとして使用された場合、Python の通常"
"の関数と同様に動作します。 :class:`partialmethod` コンストラクタに *args* と "
"*keywords* が渡されるよりも前に、 *self* 引数が最初の位置引数として挿入されま"
"す。"

#: ../../library/functools.rst:381
msgid ""
"Apply *function* of two arguments cumulatively to the items of *iterable*, "
"from left to right, so as to reduce the iterable to a single value.  For "
"example, ``reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])`` calculates "
"``((((1+2)+3)+4)+5)``. The left argument, *x*, is the accumulated value and "
"the right argument, *y*, is the update value from the *iterable*.  If the "
"optional *initializer* is present, it is placed before the items of the "
"iterable in the calculation, and serves as a default when the iterable is "
"empty.  If *initializer* is not given and *iterable* contains only one item, "
"the first item is returned."
msgstr ""
"*iterable* の要素に対して、iterable を単一の値に短縮するような形で 2 つの引数"
"をもつ *function* を左から右に累積的に適用します。例えば、 ``reduce(lambda "
"x, y: x+y, [1, 2, 3, 4, 5])`` は ``((((1+2)+3)+4)+5)`` を計算します。左引数 "
"*x* は累計の値になり、右引数 *y* は ``iterable`` から取り出した更新値になりま"
"す。オプションの *initializer* が存在する場合、計算の際に iterable の先頭に置"
"かれます。また、 iterable が空の場合には標準の値になります。 *initializer* が"
"与えられておらず、 *iterable* が単一の要素しか持っていない場合、最初の要素が"
"返されます。"

#: ../../library/functools.rst:390
msgid "Roughly equivalent to::"
msgstr "およそ次と等価です::"

#: ../../library/functools.rst:402
msgid ""
"See :func:`itertools.accumulate` for an iterator that yields all "
"intermediate values."
msgstr ""
"全ての中間値を返すイテレータについては :func:`itertools.accumulate` を参照し"
"てください。"

#: ../../library/functools.rst:407
msgid ""
"Transform a function into a :term:`single-dispatch <single dispatch>` :term:"
"`generic function`."
msgstr ""
"関数を :term:`シングルディスパッチ <single dispatch>` :term:`ジェネリック関"
"数 <generic function>` に変換します。"

#: ../../library/functools.rst:410
msgid ""
"To define a generic function, decorate it with the ``@singledispatch`` "
"decorator. When defining a function using ``@singledispatch``, note that the "
"dispatch happens on the type of the first argument::"
msgstr ""

#: ../../library/functools.rst:421
msgid ""
"To add overloaded implementations to the function, use the :func:`register` "
"attribute of the generic function, which can be used as a decorator.  For "
"functions annotated with types, the decorator will infer the type of the "
"first argument automatically::"
msgstr ""

#: ../../library/functools.rst:439
msgid ""
"For code which doesn't use type annotations, the appropriate type argument "
"can be passed explicitly to the decorator itself::"
msgstr ""
"型アノテーションを使っていないコードについては、デコレータに適切な型引数を明"
"示的に渡せます::"

#: ../../library/functools.rst:450
msgid ""
"To enable registering :term:`lambdas<lambda>` and pre-existing functions, "
"the :func:`register` attribute can also be used in a functional form::"
msgstr ""

#: ../../library/functools.rst:458
msgid ""
"The :func:`register` attribute returns the undecorated function. This "
"enables decorator stacking, :mod:`pickling<pickle>`, and the creation of "
"unit tests for each variant independently::"
msgstr ""

#: ../../library/functools.rst:472
msgid ""
"When called, the generic function dispatches on the type of the first "
"argument::"
msgstr "汎用関数は、呼び出されると 1 つ目の引数の型でディスパッチします::"

#: ../../library/functools.rst:492
msgid ""
"Where there is no registered implementation for a specific type, its method "
"resolution order is used to find a more generic implementation. The original "
"function decorated with ``@singledispatch`` is registered for the base :"
"class:`object` type, which means it is used if no better implementation is "
"found."
msgstr ""

#: ../../library/functools.rst:498
msgid ""
"If an implementation is registered to an :term:`abstract base class`, "
"virtual subclasses of the base class will be dispatched to that "
"implementation::"
msgstr ""

#: ../../library/functools.rst:513
msgid ""
"To check which implementation the generic function will choose for a given "
"type, use the ``dispatch()`` attribute::"
msgstr ""

#: ../../library/functools.rst:521
msgid ""
"To access all registered implementations, use the read-only ``registry`` "
"attribute::"
msgstr ""
"登録されたすべての実装にアクセスするには、読み出し専用の ``registry`` 属性を"
"使用します::"

#: ../../library/functools.rst:535
msgid "The :func:`register` attribute now supports using type annotations."
msgstr ""

#: ../../library/functools.rst:541
msgid ""
"Transform a method into a :term:`single-dispatch <single dispatch>` :term:"
"`generic function`."
msgstr ""
"メソッドを :term:`シングルディスパッチ <single dispatch>` :term:`ジェネリック"
"関数 <generic function>` に変換します。"

#: ../../library/functools.rst:544
msgid ""
"To define a generic method, decorate it with the ``@singledispatchmethod`` "
"decorator. When defining a function using ``@singledispatchmethod``, note "
"that the dispatch happens on the type of the first non-*self* or non-*cls* "
"argument::"
msgstr ""

#: ../../library/functools.rst:562
msgid ""
"``@singledispatchmethod`` supports nesting with other decorators such as :"
"func:`@classmethod<classmethod>`. Note that to allow for ``dispatcher."
"register``, ``singledispatchmethod`` must be the *outer most* decorator. "
"Here is the ``Negator`` class with the ``neg`` methods bound to the class, "
"rather than an instance of the class::"
msgstr ""

#: ../../library/functools.rst:584
msgid ""
"The same pattern can be used for other similar decorators: :func:"
"`@staticmethod<staticmethod>`, :func:`@abstractmethod<abc.abstractmethod>`, "
"and others."
msgstr ""

#: ../../library/functools.rst:593
msgid ""
"Update a *wrapper* function to look like the *wrapped* function. The "
"optional arguments are tuples to specify which attributes of the original "
"function are assigned directly to the matching attributes on the wrapper "
"function and which attributes of the wrapper function are updated with the "
"corresponding attributes from the original function. The default values for "
"these arguments are the module level constants ``WRAPPER_ASSIGNMENTS`` "
"(which assigns to the wrapper function's ``__module__``, ``__name__``, "
"``__qualname__``, ``__annotations__`` and ``__doc__``, the documentation "
"string) and ``WRAPPER_UPDATES`` (which updates the wrapper function's "
"``__dict__``, i.e. the instance dictionary)."
msgstr ""
"*wrapper* 関数を *wrapped* 関数に見えるようにアップデートします。オプション引"
"数はタプルで、元の関数のどの属性がラッパー関数の対応する属性に直接代入される"
"か、またラッパー関数のどの属性が元の関数の対応する属性でアップデートされる"
"か、を指定します。これらの引数のデフォルト値は、モジュールレベル定数 "
"``WRAPPER_ASSIGNMENTS`` (これはラッパー関数の ``__module__``, ``__name__``, "
"``__qualname__``, ``__annotations__`` そしてドキュメンテーション文字列 "
"``__doc__`` に代入する) と ``WRAPPER_UPDATES`` (これはラッパー関数の "
"``__dict__`` すなわちインスタンス辞書をアップデートする) です。"

#: ../../library/functools.rst:603
msgid ""
"To allow access to the original function for introspection and other "
"purposes (e.g. bypassing a caching decorator such as :func:`lru_cache`), "
"this function automatically adds a ``__wrapped__`` attribute to the wrapper "
"that refers to the function being wrapped."
msgstr ""
"内観や別の目的 (例えば、 :func:`lru_cache` のようなキャッシュするデコレータの"
"回避) のために元の関数にアクセスできるように、この関数はラップされている関数"
"を参照するラッパーに自動的に ``__wrapped__`` 属性を追加します。"

#: ../../library/functools.rst:608
msgid ""
"The main intended use for this function is in :term:`decorator` functions "
"which wrap the decorated function and return the wrapper. If the wrapper "
"function is not updated, the metadata of the returned function will reflect "
"the wrapper definition rather than the original function definition, which "
"is typically less than helpful."
msgstr ""
"この関数は主に関数を包んでラッパーを返す :term:`デコレータ <decorator>` 関数"
"の中で使われるよう意図されています。もしラッパー関数がアップデートされないと"
"すると、返される関数のメタデータは元の関数の定義ではなくラッパー関数の定義を"
"反映してしまい、これは通常あまり有益ではありません。"

#: ../../library/functools.rst:614
msgid ""
":func:`update_wrapper` may be used with callables other than functions. Any "
"attributes named in *assigned* or *updated* that are missing from the object "
"being wrapped are ignored (i.e. this function will not attempt to set them "
"on the wrapper function). :exc:`AttributeError` is still raised if the "
"wrapper function itself is missing any attributes named in *updated*."
msgstr ""
":func:`update_wrapper` は、関数以外の呼び出し可能オブジェクトにも使えます。 "
"*assigned* または *updated* で指名され、ラップされるオブジェクトに存在しない"
"属性は、すべて無視されます (すなわち、ラッパー関数にそれらの属性を設定しよう"
"とは試みられません)。しかし、 *updated* で指名された属性がラッパー関数自身に"
"存在しないなら :exc:`AttributeError` が送出されます。"

#: ../../library/functools.rst:620
msgid "Automatic addition of the ``__wrapped__`` attribute."
msgstr "``__wrapped__`` 属性の自動的な追加。"

#: ../../library/functools.rst:623
msgid "Copying of the ``__annotations__`` attribute by default."
msgstr "デフォルトで ``__annotations__`` 属性がコピーされます。"

#: ../../library/functools.rst:626
msgid "Missing attributes no longer trigger an :exc:`AttributeError`."
msgstr "存在しない属性によって :exc:`AttributeError` を発生しなくなりました。"

#: ../../library/functools.rst:629
msgid ""
"The ``__wrapped__`` attribute now always refers to the wrapped function, "
"even if that function defined a ``__wrapped__`` attribute. (see :issue:"
"`17482`)"
msgstr ""
"ラップされた関数が ``__wrapped__`` を定義していない場合でも、 "
"``__wrapped__`` が常にラップされた関数を参照するようになりました。(:issue:"
"`17482` を参照)"

#: ../../library/functools.rst:637
msgid ""
"This is a convenience function for invoking :func:`update_wrapper` as a "
"function decorator when defining a wrapper function.  It is equivalent to "
"``partial(update_wrapper, wrapped=wrapped, assigned=assigned, "
"updated=updated)``. For example::"
msgstr ""
"これはラッパー関数を定義するときに :func:`update_wrapper` を関数デコレータと"
"して呼び出す便宜関数です。これは ``partial(update_wrapper, wrapped=wrapped, "
"assigned=assigned, updated=updated)`` と等価です。例えば::"

#: ../../library/functools.rst:663
msgid ""
"Without the use of this decorator factory, the name of the example function "
"would have been ``'wrapper'``, and the docstring of the original :func:"
"`example` would have been lost."
msgstr ""
"このデコレータ・ファクトリを使用しないと、上の例中の関数の名前は "
"``'wrapper'`` となり、元の :func:`example` のドキュメンテーション文字列は失わ"
"れてしまいます。"

#: ../../library/functools.rst:671
msgid ":class:`partial` Objects"
msgstr ":class:`partial` オブジェクト"

#: ../../library/functools.rst:673
msgid ""
":class:`partial` objects are callable objects created by :func:`partial`. "
"They have three read-only attributes:"
msgstr ""
":class:`partial` オブジェクトは、 :func:`partial` 関数によって作られる呼び出"
"し可能オブジェクトです。オブジェクトには読み出し専用の属性が三つあります:"

#: ../../library/functools.rst:679
msgid ""
"A callable object or function.  Calls to the :class:`partial` object will be "
"forwarded to :attr:`func` with new arguments and keywords."
msgstr ""
"呼び出し可能オブジェクトまたは関数です。 :class:`partial` オブジェクトの呼び"
"出しは新しい引数とキーワードと共に :attr:`func` に転送されます。"

#: ../../library/functools.rst:685
msgid ""
"The leftmost positional arguments that will be prepended to the positional "
"arguments provided to a :class:`partial` object call."
msgstr ""
"最左の位置引数で、 :class:`partial` オブジェクトの呼び出し時にその呼び出しの"
"際の位置引数の前に追加されます。"

#: ../../library/functools.rst:691
msgid ""
"The keyword arguments that will be supplied when the :class:`partial` object "
"is called."
msgstr ""
":class:`partial` オブジェクトの呼び出し時に渡されるキーワード引数です。"

#: ../../library/functools.rst:694
msgid ""
":class:`partial` objects are like :class:`function` objects in that they are "
"callable, weak referencable, and can have attributes.  There are some "
"important differences.  For instance, the :attr:`~definition.__name__` and :"
"attr:`__doc__` attributes are not created automatically.  Also, :class:"
"`partial` objects defined in classes behave like static methods and do not "
"transform into bound methods during instance attribute look-up."
msgstr ""
":class:`partial` オブジェクトは :class:`function` オブジェクトのように呼び出"
"し可能で、弱参照可能で、属性を持つことができます。重要な相違点もあります。例"
"えば、 :attr:`~definition.__name__` と :attr:`__doc__` 両属性は自動では作られ"
"ません。また、クラス中で定義された :class:`partial` オブジェクトはスタティッ"
"クメソッドのように振る舞い、インスタンスの属性問い合わせの中で束縛メソッドに"
"変換されません。"
