# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2021-05-25 13:43+0000\n"
"Last-Translator: Takanori Suzuki <takanori@takanory.net>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/sys.rst:2
msgid ":mod:`sys` --- System-specific parameters and functions"
msgstr ":mod:`sys` --- システムパラメータと関数"

#: ../../library/sys.rst:8
msgid ""
"This module provides access to some variables used or maintained by the "
"interpreter and to functions that interact strongly with the interpreter. It "
"is always available."
msgstr ""
"このモジュールでは、インタプリタで使用・管理している変数や、インタプリタの動"
"作に深く関連する関数を定義しています。このモジュールは常に利用可能です。"

#: ../../library/sys.rst:15
msgid ""
"The list of command line arguments passed to a Python script. ``argv[0]`` is "
"the script name (it is operating system dependent whether this is a full "
"pathname or not).  If the command was executed using the :option:`-c` "
"command line option to the interpreter, ``argv[0]`` is set to the string ``'-"
"c'``.  If no script name was passed to the Python interpreter, ``argv[0]`` "
"is the empty string."
msgstr ""
"Pythonスクリプトに渡されたコマンドライン引数のリスト。 ``argv[0]`` はスクリプ"
"トの名前となりますが、フルパス名かどうかは、OSによって異なります。コマンドラ"
"イン引数に :option:`-c` を付けて Pythonを起動した場合、 ``argv[0]`` は文字列 "
"``'-c'`` となります。スクリプト名なしでPythonを起動した場合、 ``argv[0]`` は"
"空文字列になります。"

#: ../../library/sys.rst:21
msgid ""
"To loop over the standard input, or the list of files given on the command "
"line, see the :mod:`fileinput` module."
msgstr ""
"標準入力もしくはコマンドライン引数で指定されたファイルのリストに渡ってループ"
"するには、 :mod:`fileinput` モジュールを参照してください。"

#: ../../library/sys.rst:27
msgid ""
"An indicator of the native byte order.  This will have the value ``'big'`` "
"on big-endian (most-significant byte first) platforms, and ``'little'`` on "
"little-endian (least-significant byte first) platforms."
msgstr ""
"プラットフォームのバイト順を示します。ビッグエンディアン (最上位バイトが先"
"頭) のプラットフォームでは ``'big'``, リトルエンディアン (最下位バイトが先"
"頭) では ``'little'`` となります。"

#: ../../library/sys.rst:36
msgid ""
"A tuple of strings giving the names of all modules that are compiled into "
"this Python interpreter.  (This information is not available in any other "
"way --- ``modules.keys()`` only lists the imported modules.)"
msgstr ""
"コンパイル時にPythonインタプリタに組み込まれた、全てのモジュール名のタプル(こ"
"の情報は、他の手段では取得することができません。 ``modules.keys()`` は、イン"
"ポートされたモジュールのみのリストを返します。)"

#: ../../library/sys.rst:43
msgid ""
"Call ``func(*args)``, while tracing is enabled.  The tracing state is saved, "
"and restored afterwards.  This is intended to be called from a debugger from "
"a checkpoint, to recursively debug some other code."
msgstr ""
"トレーシングが有効な間、 ``func(*args)`` を呼び出します。トレーシングの状態は"
"保存され、後で復元されます。これは、別のコードをチェックポイントから再帰的に"
"デバッグするために、デバッガから呼び出されることを意図しています。"

#: ../../library/sys.rst:50
msgid "A string containing the copyright pertaining to the Python interpreter."
msgstr "Python インタプリタの著作権を表示する文字列です。"

#: ../../library/sys.rst:55
msgid ""
"Clear the internal type cache. The type cache is used to speed up attribute "
"and method lookups. Use the function *only* to drop unnecessary references "
"during reference leak debugging."
msgstr ""
"内部の型キャッシュをクリアします。型キャッシュは属性とメソッドの検索を高速化"
"するために利用されます。この関数は、参照リークをデバッグするときに不要な参照"
"を削除するため **だけ** に利用してください。"

#: ../../library/sys.rst:59 ../../library/sys.rst:77
msgid ""
"This function should be used for internal and specialized purposes only."
msgstr "この関数は、内部的かつ特殊な目的にのみ利用されるべきです。"

#: ../../library/sys.rst:66
msgid ""
"Return a dictionary mapping each thread's identifier to the topmost stack "
"frame currently active in that thread at the time the function is called. "
"Note that functions in the :mod:`traceback` module can build the call stack "
"given such a frame."
msgstr ""
"各スレッドの識別子を関数が呼ばれた時点のそのスレッドでアクティブになっている"
"一番上のスタックフレームに結びつける辞書を返します。モジュール :mod:"
"`traceback` の関数を使えばそのように与えられたフレームのコールスタックを構築"
"できます。"

#: ../../library/sys.rst:71
msgid ""
"This is most useful for debugging deadlock:  this function does not require "
"the deadlocked threads' cooperation, and such threads' call stacks are "
"frozen for as long as they remain deadlocked.  The frame returned for a non-"
"deadlocked thread may bear no relationship to that thread's current activity "
"by the time calling code examines the frame."
msgstr ""
"この関数はデッドロックをデバッグするのに非常に有効です。デッドロック状態のス"
"レッドの協調動作を必要としませんし、そういったスレッドのコールスタックはデッ"
"ドロックである限りフリーズしたままです。デッドロックにないスレッドのフレーム"
"については、そのフレームを調べるコードを呼んだ時にはそのスレッドの現在の実行"
"状況とは関係ないところを指し示しているかもしれません。"

#: ../../library/sys.rst:84
msgid "Integer specifying the handle of the Python DLL. Availability: Windows."
msgstr "Python DLLのハンドルを示す整数です。利用できる環境: Windows。"

#: ../../library/sys.rst:89
msgid ""
"If *value* is not ``None``, this function prints it to ``sys.stdout``, and "
"saves it in ``__builtin__._``."
msgstr ""
"*value* が ``None`` 以外の場合、 ``value`` を ``sys.stdout`` に出力して "
"``__builtin__._`` に保存します。"

#: ../../library/sys.rst:92
msgid ""
"``sys.displayhook`` is called on the result of evaluating an :term:"
"`expression` entered in an interactive Python session.  The display of these "
"values can be customized by assigning another one-argument function to ``sys."
"displayhook``."
msgstr ""
"``sys.displayhook`` は、Pythonの対話セッションで入力された式(:term:"
"`expression`)が評価されたときに呼び出されます。対話セッションの出力をカスタマ"
"イズする場合、 ``sys.displayhook`` に引数の数が一つの関数を指定します。"

#: ../../library/sys.rst:99
msgid ""
"If this is true, Python won't try to write ``.pyc`` or ``.pyo`` files on the "
"import of source modules.  This value is initially set to ``True`` or "
"``False`` depending on the :option:`-B` command line option and the :envvar:"
"`PYTHONDONTWRITEBYTECODE` environment variable, but you can set it yourself "
"to control bytecode file generation."
msgstr ""
"この値が真の時、Python はソースモジュールをインポートする時に ``.pyc`` や ``."
"pyo`` ファイルを生成しません。この値は :option:`-B` コマンドラインオプション"
"と :envvar:`PYTHONDONTWRITEBYTECODE` 環境変数の値によって起動時に ``True`` "
"か ``False`` に設定されます。しかし、実行時にこの変数を変更して、バイトコード"
"生成を制御することもできます。"

#: ../../library/sys.rst:110
msgid ""
"This function prints out a given traceback and exception to ``sys.stderr``."
msgstr "指定したトレースバックと例外を ``sys.stderr`` に出力します。"

#: ../../library/sys.rst:112
msgid ""
"When an exception is raised and uncaught, the interpreter calls ``sys."
"excepthook`` with three arguments, the exception class, exception instance, "
"and a traceback object.  In an interactive session this happens just before "
"control is returned to the prompt; in a Python program this happens just "
"before the program exits.  The handling of such top-level exceptions can be "
"customized by assigning another three-argument function to ``sys."
"excepthook``."
msgstr ""
"例外が発生し、その例外が捕捉されない場合、インタプリタは例外クラス・例外イン"
"スタンス・トレースバックオブジェクトを引数として ``sys.excepthook`` を呼び出"
"します。対話セッション中に発生した場合はプロンプトに戻る直前に呼び出され、"
"Pythonプログラムの実行中に発生した場合はプログラムの終了直前に呼び出されま"
"す。このトップレベルでの例外情報出力処理をカスタマイズする場合、 ``sys."
"excepthook`` に引数の数が三つの関数を指定します。"

#: ../../library/sys.rst:123
msgid ""
"These objects contain the original values of ``displayhook`` and "
"``excepthook`` at the start of the program.  They are saved so that "
"``displayhook`` and ``excepthook`` can be restored in case they happen to "
"get replaced with broken objects."
msgstr ""
"それぞれ、起動時の ``displayhook`` と ``excepthook`` の値を保存しています。こ"
"の値は、 ``displayhook`` と ``excepthook`` に不正なオブジェクトが指定された場"
"合に、元の値に復旧するために使用します。"

#: ../../library/sys.rst:131
msgid ""
"This function returns a tuple of three values that give information about "
"the exception that is currently being handled.  The information returned is "
"specific both to the current thread and to the current stack frame.  If the "
"current stack frame is not handling an exception, the information is taken "
"from the calling stack frame, or its caller, and so on until a stack frame "
"is found that is handling an exception.  Here, \"handling an exception\" is "
"defined as \"executing or having executed an except clause.\"  For any stack "
"frame, only information about the most recently handled exception is "
"accessible."
msgstr ""
"この関数は、現在処理中の例外を示す三つの値のタプルを返します。この値は、現在"
"のスレッド・現在のスタックフレームのものです。現在のスタックフレームが例外処"
"理中でない場合、例外処理中のスタックフレームが見つかるまで次々とその呼び出し"
"元スタックフレームを調べます。ここで、\"例外処理中\" とは \"except 節を実行"
"中、または実行した\" フレームを指します。どのスタックフレームでも、最後に処理"
"した例外の情報のみを参照することができます。"

#: ../../library/sys.rst:142
msgid ""
"If no exception is being handled anywhere on the stack, a tuple containing "
"three ``None`` values is returned.  Otherwise, the values returned are "
"``(type, value, traceback)``.  Their meaning is: *type* gets the exception "
"type of the exception being handled (a class object); *value* gets the "
"exception parameter (its :dfn:`associated value` or the second argument to :"
"keyword:`raise`, which is always a class instance if the exception type is a "
"class object); *traceback* gets a traceback object (see the Reference "
"Manual) which encapsulates the call stack at the point where the exception "
"originally occurred."
msgstr ""
"スタック上で例外が発生していない場合、三つの ``None`` のタプルを返します。例"
"外が発生している場合、 ``(type, value, traceback)`` を返します。 *type* は、"
"処理中の例外の型を示します (クラスオブジェクト)。 *value* は、例外パラメータ "
"(例外に :dfn:`関連する値` または :keyword:`raise` の第二引数。 *type* がクラ"
"スオブジェクトの場合は常にクラスインスタンス) です。 *traceback* は、トレース"
"バックオブジェクトで、例外が発生した時点でのコールスタックをカプセル化したオ"
"ブジェクトです(リファレンスマニュアル参照)。"

#: ../../library/sys.rst:151
msgid ""
"If :func:`exc_clear` is called, this function will return three ``None`` "
"values until either another exception is raised in the current thread or the "
"execution stack returns to a frame where another exception is being handled."
msgstr ""
":func:`exc_clear` が呼び出されると、現在のスレッドで他の例外が発生するか、又"
"は別の例外を処理中のフレームに実行スタックが復帰するまで、 :func:`exc_info` "
"は三つの ``None`` を返します。"

#: ../../library/sys.rst:157
msgid ""
"Assigning the *traceback* return value to a local variable in a function "
"that is handling an exception will cause a circular reference.  This will "
"prevent anything referenced by a local variable in the same function or by "
"the traceback from being garbage collected.  Since most functions don't need "
"access to the traceback, the best solution is to use something like "
"``exctype, value = sys.exc_info()[:2]`` to extract only the exception type "
"and value.  If you do need the traceback, make sure to delete it after use "
"(best done with a :keyword:`try` ... :keyword:`finally` statement) or to "
"call :func:`exc_info` in a function that does not itself handle an exception."
msgstr ""
"例外処理中に戻り値の *traceback* をローカル変数に代入すると循環参照が発生し、"
"関数内のローカル変数やトレースバックが参照している全てのオブジェクトは解放さ"
"れなくなります。特にトレースバック情報が必要ではなければ ``exctype, value = "
"sys.exc_info()[:2]`` のように例外型と例外オブジェクトのみを取得するようにして"
"下さい。もしトレースバックが必要な場合には、処理終了後にdeleteして下さい。こ"
"のdeleteは、 :keyword:`try` ... :keyword:`finally` ...で行うと良いでしょう。"

#: ../../library/sys.rst:169
msgid ""
"Beginning with Python 2.2, such cycles are automatically reclaimed when "
"garbage collection is enabled and they become unreachable, but it remains "
"more efficient to avoid creating cycles."
msgstr ""
"Python 2.2 以降では、ガベージコレクションが有効であればこのような到達不能オブ"
"ジェクトは自動的に削除されます。しかし、循環参照を作らないようにしたほうが効"
"率的です。"

#: ../../library/sys.rst:176
msgid ""
"This function clears all information relating to the current or last "
"exception that occurred in the current thread.  After calling this "
"function, :func:`exc_info` will return three ``None`` values until another "
"exception is raised in the current thread or the execution stack returns to "
"a frame where another exception is being handled."
msgstr ""
"この関数は、現在のスレッドで処理中、又は最後に発生した例外の情報を全てクリア"
"します。この関数を呼び出すと、現在のスレッドで他の例外が発生するか、又は別の"
"例外を処理中のフレームに実行スタックが復帰するまで、 :func:`exc_info` は三つ"
"の ``None`` を返します。"

#: ../../library/sys.rst:182
msgid ""
"This function is only needed in only a few obscure situations.  These "
"include logging and error handling systems that report information on the "
"last or current exception.  This function can also be used to try to free "
"resources and trigger object finalization, though no guarantee is made as to "
"what objects will be freed, if any."
msgstr ""
"この関数が必要となることは滅多にありません。ロギングやエラー処理などで最後に"
"発生したエラーの報告を行う場合などに使用します。また、リソースを解放してオブ"
"ジェクトの終了処理を起動するために使用することもできますが、オブジェクトが実"
"際にされるかどうかは保障の限りではありません。"

#: ../../library/sys.rst:195
msgid "Use :func:`exc_info` instead."
msgstr ":func:`exc_info` を使用してください"

#: ../../library/sys.rst:198
msgid ""
"Since they are global variables, they are not specific to the current "
"thread, so their use is not safe in a multi-threaded program.  When no "
"exception is being handled, ``exc_type`` is set to ``None`` and the other "
"two are undefined."
msgstr ""
"これらの変数はグローバル変数なのでスレッド毎の情報を示すことができません。こ"
"の為、マルチスレッドなプログラムでは安全に参照することはできません。例外処理"
"中でない場合、 ``exc_type`` の値は ``None`` となり、 ``exc_value`` と "
"``exc_traceback`` は未定義となります。"

#: ../../library/sys.rst:205
msgid ""
"A string giving the site-specific directory prefix where the platform-"
"dependent Python files are installed; by default, this is also ``'/usr/"
"local'``.  This can be set at build time with the ``--exec-prefix`` argument "
"to the :program:`configure` script.  Specifically, all configuration files "
"(e.g. the :file:`pyconfig.h` header file) are installed in the directory :"
"file:`{exec_prefix}/lib/python{X.Y}/config`, and shared library modules are "
"installed in :file:`{exec_prefix}/lib/python{X.Y}/lib-dynload`, where *X.Y* "
"is the version number of Python, for example ``2.7``."
msgstr ""
"Python のプラットフォーム依存なファイルがインストールされているディレクトリ名"
"(サイト固有)。デフォルトでは、この値は ``'/usr/local'`` ですが、ビルド時に :"
"program:`configure` の ``--exec-prefix`` 引数で指定することができます。全ての"
"設定ファイル(:file:`pyconfig.h` など)は :file:`{exec_prefix}/lib/python{X.Y}/"
"config` に、共有ライブラリは :file:`{exec_prefix}/lib/python{X.Y}/lib-"
"dynload` にインストールされます。 *X.Y* は Python のバージョン番号で、例えば "
"``2.7`` です。"

#: ../../library/sys.rst:217
msgid ""
"A string giving the absolute path of the executable binary for the Python "
"interpreter, on systems where this makes sense. If Python is unable to "
"retrieve the real path to its executable, :data:`sys.executable` will be an "
"empty string or ``None``."
msgstr ""
"Python インタプリタの実行ファイルの絶対パスを示す文字列です。このような名前が"
"意味を持つシステムで利用可能です。Python が自身の実行ファイルの実際のパスを取"
"得できない場合、:data:`sys.executable` は空の文字列または ``None`` になりま"
"す。"

#: ../../library/sys.rst:225
msgid ""
"Exit from Python.  This is implemented by raising the :exc:`SystemExit` "
"exception, so cleanup actions specified by finally clauses of :keyword:`try` "
"statements are honored, and it is possible to intercept the exit attempt at "
"an outer level."
msgstr ""
"Python を終了します。 :func:`exit` は :exc:`SystemExit` を送出するので、 :"
"keyword:`try` ステートメントの :keyword:`finally` 節に終了処理を記述したり、"
"上位レベルで例外を捕捉して exit 処理を中断したりすることができます。"

#: ../../library/sys.rst:230
msgid ""
"The optional argument *arg* can be an integer giving the exit status "
"(defaulting to zero), or another type of object.  If it is an integer, zero "
"is considered \"successful termination\" and any nonzero value is considered "
"\"abnormal termination\" by shells and the like.  Most systems require it to "
"be in the range 0--127, and produce undefined results otherwise.  Some "
"systems have a convention for assigning specific meanings to specific exit "
"codes, but these are generally underdeveloped; Unix programs generally use 2 "
"for command line syntax errors and 1 for all other kind of errors.  If "
"another type of object is passed, ``None`` is equivalent to passing zero, "
"and any other object is printed to :data:`stderr` and results in an exit "
"code of 1.  In particular, ``sys.exit(\"some error message\")`` is a quick "
"way to exit a program when an error occurs."
msgstr ""
"オプション引数 *arg* には、終了ステータスとして整数 (デフォルトは0) や他の型"
"のオブジェクトを指定することができます。整数を指定した場合、シェル等は 0 は "
"\"正常終了\"、0 以外の整数を \"異常終了\" として扱います。多くのシステムで"
"は、有効な終了ステータスは 0--127 で、これ以外の値を返した場合の動作は未定義"
"です。システムによっては特定の終了コードに個別の意味を持たせている場合があり"
"ますが、このような定義は僅かしかありません。Unix プログラムでは構文エラーの場"
"合には 2 を、それ以外のエラーならば 1 を返します。*arg* に ``None`` を指定し"
"た場合は、数値の 0 を指定した場合と同じです。それ以外の型のオブジェクトを指定"
"すると、そのオブェクトが :data:`stderr` に出力され、終了コードとして 1 を返し"
"ます。エラー発生時には ``sys.exit(\"エラーメッセージ\")`` と書くと、簡単にプ"
"ログラムを終了することができます。"

#: ../../library/sys.rst:243
msgid ""
"Since :func:`exit` ultimately \"only\" raises an exception, it will only "
"exit the process when called from the main thread, and the exception is not "
"intercepted."
msgstr ""
"究極には、 :func:`exit` は例外を送出する \"だけ\" なので、これがメインスレッ"
"ドから呼び出されたときは、プロセスを終了するだけで、例外は遮断されません。"

#: ../../library/sys.rst:250
msgid ""
"This value is not actually defined by the module, but can be set by the user "
"(or by a program) to specify a clean-up action at program exit.  When set, "
"it should be a parameterless function.  This function will be called when "
"the interpreter exits.  Only one function may be installed in this way; to "
"allow multiple functions which will be called at termination, use the :mod:"
"`atexit` module."
msgstr ""
"この値はモジュールに存在しませんが、ユーザプログラムでプログラム終了時に呼び"
"出される終了処理関数として、引数の数が 0 の関数を設定することができます。この"
"関数は、インタプリタ終了時に呼び出されます。 ``exitfunc`` に指定することがで"
"きる終了処理関数は一つだけですので、複数のクリーンアップ処理が必要な場合は :"
"mod:`atexit` モジュールを使用してください。"

#: ../../library/sys.rst:258
msgid ""
"The exit function is not called when the program is killed by a signal, when "
"a Python fatal internal error is detected, or when ``os._exit()`` is called."
msgstr ""
"プログラムがシグナルで kill された場合、 Python 内部で致命的なエラーが発生し"
"た場合、 ``os._exit()`` が呼び出された場合には、終了処理関数は呼び出されませ"
"ん。"

#: ../../library/sys.rst:261
msgid "Use :mod:`atexit` instead."
msgstr ":mod:`atexit` を使ってください。"

#: ../../library/sys.rst:267
msgid ""
"The struct sequence *flags* exposes the status of command line flags. The "
"attributes are read only."
msgstr ""
"属性とシーケンスを利用して、コマンドラインフラグの状態を提供しています。属性"
"は読み込み専用になっています。"

#: ../../library/sys.rst:271 ../../library/sys.rst:308
msgid "attribute"
msgstr "属性"

#: ../../library/sys.rst:271
msgid "flag"
msgstr "フラグ"

#: ../../library/sys.rst:273
msgid ":const:`debug`"
msgstr ":const:`debug`"

#: ../../library/sys.rst:273
msgid ":option:`-d`"
msgstr ":option:`-d`"

#: ../../library/sys.rst:274
msgid ":const:`py3k_warning`"
msgstr ":const:`py3k_warning`"

#: ../../library/sys.rst:274
msgid ":option:`-3`"
msgstr ":option:`-3`"

#: ../../library/sys.rst:275
msgid ":const:`division_warning`"
msgstr ":const:`division_warning`"

#: ../../library/sys.rst:275
msgid ":option:`-Q`"
msgstr ":option:`-Q`"

#: ../../library/sys.rst:276
msgid ":const:`division_new`"
msgstr ":const:`division_new`"

#: ../../library/sys.rst:276
msgid ":option:`-Qnew <-Q>`"
msgstr ":option:`-Qnew <-Q>`"

#: ../../library/sys.rst:277
msgid ":const:`inspect`"
msgstr ":const:`inspect`"

#: ../../library/sys.rst:277 ../../library/sys.rst:278
msgid ":option:`-i`"
msgstr ":option:`-i`"

#: ../../library/sys.rst:278
msgid ":const:`interactive`"
msgstr ":const:`interactive`"

#: ../../library/sys.rst:279
msgid ":const:`optimize`"
msgstr ":const:`optimize`"

#: ../../library/sys.rst:279
msgid ":option:`-O` or :option:`-OO`"
msgstr ":option:`-O` または :option:`-OO`"

#: ../../library/sys.rst:280
msgid ":const:`dont_write_bytecode`"
msgstr ":const:`dont_write_bytecode`"

#: ../../library/sys.rst:280
msgid ":option:`-B`"
msgstr ":option:`-B`"

#: ../../library/sys.rst:281
msgid ":const:`no_user_site`"
msgstr ":const:`no_user_site`"

#: ../../library/sys.rst:281
msgid ":option:`-s`"
msgstr ":option:`-s`"

#: ../../library/sys.rst:282
msgid ":const:`no_site`"
msgstr ":const:`no_site`"

#: ../../library/sys.rst:282
msgid ":option:`-S`"
msgstr ":option:`-S`"

#: ../../library/sys.rst:283
msgid ":const:`ignore_environment`"
msgstr ":const:`ignore_environment`"

#: ../../library/sys.rst:283
msgid ":option:`-E`"
msgstr ":option:`-E`"

#: ../../library/sys.rst:284
msgid ":const:`tabcheck`"
msgstr ":const:`tabcheck`"

#: ../../library/sys.rst:284
msgid ":option:`-t` or :option:`-tt <-t>`"
msgstr ":option:`-t` または :option:`-tt <-t>`"

#: ../../library/sys.rst:285
msgid ":const:`verbose`"
msgstr ":const:`verbose`"

#: ../../library/sys.rst:285
msgid ":option:`-v`"
msgstr ":option:`-v`"

#: ../../library/sys.rst:286
msgid ":const:`unicode`"
msgstr ":const:`unicode`"

#: ../../library/sys.rst:286
msgid ":option:`-U`"
msgstr ":option:`-U`"

#: ../../library/sys.rst:287
msgid ":const:`bytes_warning`"
msgstr ":const:`bytes_warning`"

#: ../../library/sys.rst:287
msgid ":option:`-b`"
msgstr ":option:`-b`"

#: ../../library/sys.rst:288
msgid ":const:`hash_randomization`"
msgstr ":const:`hash_randomization`"

#: ../../library/sys.rst:288
msgid ":option:`-R`"
msgstr ":option:`-R`"

#: ../../library/sys.rst:293
msgid "The ``hash_randomization`` attribute."
msgstr "``hash_randomization`` 属性が追加されました。"

#: ../../library/sys.rst:298
msgid ""
"A structseq holding information about the float type. It contains low level "
"information about the precision and internal representation.  The values "
"correspond to the various floating-point constants defined in the standard "
"header file :file:`float.h` for the 'C' programming language; see section "
"5.2.4.2.2 of the 1999 ISO/IEC C standard [C99]_, 'Characteristics of "
"floating types', for details."
msgstr ""
"属性とシーケンスを利用して、 float 型に関する情報を提供します。精度と内部表現"
"に関する情報を含みます。プログラミング言語 'C' の標準ヘッダファイル :file:"
"`float.h` に定義された様々な浮動小数点定数に対応する値の詳細については、1999 "
"ISO/IEC C standard [C99]_ の 4.2.4.2.2 章を参照して下さい。"

#: ../../library/sys.rst:308
msgid "float.h macro"
msgstr "float.h のマクロ"

#: ../../library/sys.rst:308
msgid "explanation"
msgstr "説明"

#: ../../library/sys.rst:310
msgid ":const:`epsilon`"
msgstr ":const:`epsilon`"

#: ../../library/sys.rst:310
msgid "DBL_EPSILON"
msgstr "DBL_EPSILON"

#: ../../library/sys.rst:310
msgid ""
"difference between 1 and the least value greater than 1 that is "
"representable as a float"
msgstr "1と、その次の表現可能なfloat値の差"

#: ../../library/sys.rst:313
msgid ":const:`dig`"
msgstr ":const:`dig`"

#: ../../library/sys.rst:313
msgid "DBL_DIG"
msgstr "DBL_DIG"

#: ../../library/sys.rst:313
msgid ""
"maximum number of decimal digits that can be faithfully represented in a "
"float;  see below"
msgstr "浮動小数点数で正確に表示できる最大の10進数桁; 以下参照"

#: ../../library/sys.rst:316
msgid ":const:`mant_dig`"
msgstr ":const:`mant_dig`"

#: ../../library/sys.rst:316
msgid "DBL_MANT_DIG"
msgstr "DBL_MANT_DIG"

#: ../../library/sys.rst:316
msgid ""
"float precision: the number of base-``radix`` digits in the significand of a "
"float"
msgstr "浮動小数点精度: 浮動小数点数の主要部の桁 base-``radix``"

#: ../../library/sys.rst:319
msgid ":const:`max`"
msgstr ":const:`max`"

#: ../../library/sys.rst:319
msgid "DBL_MAX"
msgstr "DBL_MAX"

#: ../../library/sys.rst:319
msgid "maximum representable finite float"
msgstr "floatが表せる最大の(infiniteではない)値"

#: ../../library/sys.rst:321
msgid ":const:`max_exp`"
msgstr ":const:`max_exp`"

#: ../../library/sys.rst:321
msgid "DBL_MAX_EXP"
msgstr "DBL_MAX_EXP"

#: ../../library/sys.rst:321
msgid ""
"maximum integer e such that ``radix**(e-1)`` is a representable finite float"
msgstr "floatが ``radix**(e-1)`` で表現可能な、最大の整数 e"

#: ../../library/sys.rst:324
msgid ":const:`max_10_exp`"
msgstr ":const:`max_10_exp`"

#: ../../library/sys.rst:324
msgid "DBL_MAX_10_EXP"
msgstr "DBL_MAX_10_EXP"

#: ../../library/sys.rst:324
msgid ""
"maximum integer e such that ``10**e`` is in the range of representable "
"finite floats"
msgstr "float が ``10**e`` で表現可能な、最大の整数 e"

#: ../../library/sys.rst:327
msgid ":const:`min`"
msgstr ":const:`min`"

#: ../../library/sys.rst:327
msgid "DBL_MIN"
msgstr "DBL_MIN"

#: ../../library/sys.rst:327
msgid "minimum positive normalized float"
msgstr "float が表現可能な最小の正の値"

#: ../../library/sys.rst:329
msgid ":const:`min_exp`"
msgstr ":const:`min_exp`"

#: ../../library/sys.rst:329
msgid "DBL_MIN_EXP"
msgstr "DBL_MIN_EXP"

#: ../../library/sys.rst:329
msgid "minimum integer e such that ``radix**(e-1)`` is a normalized float"
msgstr "``radix**(e-1)`` が正規化floatであるような最小の整数 e"

#: ../../library/sys.rst:332
msgid ":const:`min_10_exp`"
msgstr ":const:`min_10_exp`"

#: ../../library/sys.rst:332
msgid "DBL_MIN_10_EXP"
msgstr "DBL_MIN_10_EXP"

#: ../../library/sys.rst:332
msgid "minimum integer e such that ``10**e`` is a normalized float"
msgstr "``10**e`` が正規化floatであるような最小の整数 e"

#: ../../library/sys.rst:335
msgid ":const:`radix`"
msgstr ":const:`radix`"

#: ../../library/sys.rst:335
msgid "FLT_RADIX"
msgstr "FLT_RADIX"

#: ../../library/sys.rst:335
msgid "radix of exponent representation"
msgstr "指数部の基数"

#: ../../library/sys.rst:337
msgid ":const:`rounds`"
msgstr ":const:`rounds`"

#: ../../library/sys.rst:337
msgid "FLT_ROUNDS"
msgstr "FLT_ROUNDS"

#: ../../library/sys.rst:337
msgid ""
"integer constant representing the rounding mode used for arithmetic "
"operations.  This reflects the value of the system FLT_ROUNDS macro at "
"interpreter startup time.  See section 5.2.4.2.2 of the C99 standard for an "
"explanation of the possible values and their meanings."
msgstr ""
"算術演算で利用される丸めモードを表す整数定数。これはインタプリタ起動時のシス"
"テムの FLT_ROUNDS マクロの値を示します。取りうる値とその意味については、C99 "
"標準の 5.2.4.2.2 節を参照してください。"

#: ../../library/sys.rst:345
msgid ""
"The attribute :attr:`sys.float_info.dig` needs further explanation.  If "
"``s`` is any string representing a decimal number with at most :attr:`sys."
"float_info.dig` significant digits, then converting ``s`` to a float and "
"back again will recover a string representing the same decimal value::"
msgstr ""
":attr:`sys.float_info.dig` に対してはさらに説明が必要です。もし、文字列 "
"``s`` が表す 10 進数の有効桁数が多くても :attr:`sys.float_info.dig` の時に"
"は、 ``s`` を浮動小数点数に変換して戻すと同じ 10 進数を表す文字列に復元されま"
"す::"

#: ../../library/sys.rst:358
msgid ""
"But for strings with more than :attr:`sys.float_info.dig` significant "
"digits, this isn't always true::"
msgstr ""
"ただし、文字列が有効桁数 :attr:`sys.float_info.dig` より大きい場合には、常に"
"復元されるとは限りません::"

#: ../../library/sys.rst:369
msgid ""
"A string indicating how the :func:`repr` function behaves for floats.  If "
"the string has value ``'short'`` then for a finite float ``x``, ``repr(x)`` "
"aims to produce a short string with the property that ``float(repr(x)) == "
"x``.  This is the usual behaviour in Python 2.7 and later.  Otherwise, "
"``float_repr_style`` has value ``'legacy'`` and ``repr(x)`` behaves in the "
"same way as it did in versions of Python prior to 2.7."
msgstr ""
":func:`repr` 関数が浮動小数点数に対してどう振る舞うかを指し示す文字列です。こ"
"の文字列が値 ``'short'`` を持てば、有限の浮動小数点数 ``x`` に対して、 "
"``repr(x)`` は ``float(repr(x)) == x`` を満たす短い文字列を返そうとします。こ"
"れは、 Python 2.7 以降での標準の振る舞いです。そうでなければ、 "
"``float_repr_style`` は値 ``'legacy'`` を持ち、 ``repr(x)`` は 2.7 以前のバー"
"ジョンの Python と同じように振る舞います。"

#: ../../library/sys.rst:382
msgid ""
"Return the interpreter's \"check interval\"; see :func:`setcheckinterval`."
msgstr ""
"インタプリタの \"チェックインターバル (check interval)\" を返します; :func:"
"`setcheckinterval` を参照してください。"

#: ../../library/sys.rst:389
msgid ""
"Return the name of the current default string encoding used by the Unicode "
"implementation."
msgstr "Unicode 実装で使用される現在のデフォルトエンコーディング名を返します。"

#: ../../library/sys.rst:397
msgid ""
"Return the current value of the flags that are used for :c:func:`dlopen` "
"calls. The flag constants are defined in the :mod:`dl` and :mod:`DLFCN` "
"modules. Availability: Unix."
msgstr ""
":c:func:`dlopen` で指定されるフラグを返します。このフラグは :mod:`dl` と :"
"mod:`DLFCN` で定義されています。"

#: ../../library/sys.rst:406
msgid ""
"Return the name of the encoding used to convert Unicode filenames into "
"system file names, or ``None`` if the system default encoding is used. The "
"result value depends on the operating system:"
msgstr ""
"Unicode ファイル名をシステムのファイル名に変換する際に使用するエンコード名を"
"返します。システムのデフォルトエンコーディングを使用する場合には ``None`` を"
"返します。"

#: ../../library/sys.rst:410
msgid "On Mac OS X, the encoding is ``'utf-8'``."
msgstr "Mac OS X では、エンコーディングは ``'utf-8'`` となります。"

#: ../../library/sys.rst:412
msgid ""
"On Unix, the encoding is the user's preference according to the result of "
"nl_langinfo(CODESET), or ``None`` if the ``nl_langinfo(CODESET)`` failed."
msgstr ""
"Unix では、エンコーディングは ``nl_langinfo(CODESET)`` が返すユーザの設定とな"
"ります。 ``nl_langinfo(CODESET)`` が失敗すると :const:`None` を返します。"

#: ../../library/sys.rst:416
msgid ""
"On Windows NT+, file names are Unicode natively, so no conversion is "
"performed. :func:`getfilesystemencoding` still returns ``'mbcs'``, as this "
"is the encoding that applications should use when they explicitly want to "
"convert Unicode strings to byte strings that are equivalent when used as "
"file names."
msgstr ""
"Windows NT+ では、Unicode をファイル名として使用できるので変換の必要はありま"
"せん。:func:`getfilesystemencoding` は ``'mbcs'`` を返しますが、これはある "
"Unicode 文字列をバイト文字列に明示的に変換して、ファイル名として使うと同じ"
"ファイルを指すようにしたい場合に、アプリケーションが使わなければならないエン"
"コーディングです。"

#: ../../library/sys.rst:422
msgid "On Windows 9x, the encoding is ``'mbcs'``."
msgstr "Windows 9x では、エンコーディングは ``'mbcs'`` となります。"

#: ../../library/sys.rst:429
msgid ""
"Return the reference count of the *object*.  The count returned is generally "
"one higher than you might expect, because it includes the (temporary) "
"reference as an argument to :func:`getrefcount`."
msgstr ""
"*object* の参照数を返します。 *object* は (一時的に) :func:`getrefcount` から"
"も参照されるため、参照数は予想される数よりも 1 多くなります。"

#: ../../library/sys.rst:436
msgid ""
"Return the current value of the recursion limit, the maximum depth of the "
"Python interpreter stack.  This limit prevents infinite recursion from "
"causing an overflow of the C stack and crashing Python.  It can be set by :"
"func:`setrecursionlimit`."
msgstr ""
"現在の最大再帰数を返します。最大再帰数は、Python インタプリタスタックの最大の"
"深さです。この制限は Python プログラムが無限に再帰し、C スタックがオーバーフ"
"ローしてクラッシュすることを防止するために設けられています。この値は :func:"
"`setrecursionlimit` で指定することができます。"

#: ../../library/sys.rst:444
msgid ""
"Return the size of an object in bytes. The object can be any type of object. "
"All built-in objects will return correct results, but this does not have to "
"hold true for third-party extensions as it is implementation specific."
msgstr ""
"*object* のサイズをバイト数で返します。*object* は任意の型のオブジェクトで"
"す。すべての組み込みオブジェクトは正しい値を返します。サードパーティー製の型"
"については実装依存になります。"

#: ../../library/sys.rst:449
msgid ""
"If given, *default* will be returned if the object does not provide means to "
"retrieve the size.  Otherwise a :exc:`TypeError` will be raised."
msgstr ""
"オブジェクトがサイズを取得する手段を提供していない時は *default* が返されま"
"す。*default* が指定されていない場合は :exc:`TypeError` が送出されます。"

#: ../../library/sys.rst:452
msgid ""
":func:`getsizeof` calls the object's ``__sizeof__`` method and adds an "
"additional garbage collector overhead if the object is managed by the "
"garbage collector."
msgstr ""
":func:`getsizeof` は *object* の ``__sizeof__`` メソッドを呼び出し、そのオブ"
"ジェクトがガベージコレクタに管理されていた場合はガベージコレクタのオーバー"
"ヘッドを増やします。"

#: ../../library/sys.rst:461
msgid ""
"Return a frame object from the call stack.  If optional integer *depth* is "
"given, return the frame object that many calls below the top of the stack.  "
"If that is deeper than the call stack, :exc:`ValueError` is raised.  The "
"default for *depth* is zero, returning the frame at the top of the call "
"stack."
msgstr ""
"コールスタックからフレームオブジェクトを返します。オプション引数 *depth* を指"
"定すると、スタックのトップから *depth* だけ下のフレームオブジェクトを取得しま"
"す。 *depth* がコールスタックよりも深ければ、 :exc:`ValueError` が発生しま"
"す。 *depth* のデフォルト値は 0 で、この場合はコールスタックのトップのフレー"
"ムを返します。"

#: ../../library/sys.rst:468
msgid ""
"This function should be used for internal and specialized purposes only. It "
"is not guaranteed to exist in all implementations of Python."
msgstr ""
"この関数は、内部的かつ特殊な目的にのみ利用されるべきです。全ての Python 実装"
"で存在することが保証されているわけではありません。"

#: ../../library/sys.rst:478
msgid "Get the profiler function as set by :func:`setprofile`."
msgstr ":func:`setprofile` 関数で設定したプロファイラ関数を取得します。"

#: ../../library/sys.rst:489
msgid "Get the trace function as set by :func:`settrace`."
msgstr ":func:`settrace` 関数で設定したトレース関数を取得します。"

#: ../../library/sys.rst:493
msgid ""
"The :func:`gettrace` function is intended only for implementing debuggers, "
"profilers, coverage tools and the like.  Its behavior is part of the "
"implementation platform, rather than part of the language definition, and "
"thus may not be available in all Python implementations."
msgstr ""
":func:`gettrace` 関数は、デバッガ、プロファイラ、カバレッジツールなどの実装に"
"使うことのみを想定しています。この関数の振る舞いは言語定義ではなく実装プラッ"
"トフォームの一部です。そのため、他の Python 実装では利用できないかもしれませ"
"ん。"

#: ../../library/sys.rst:503
msgid ""
"Return a named tuple describing the Windows version currently running.  The "
"named elements are *major*, *minor*, *build*, *platform*, *service_pack*, "
"*service_pack_minor*, *service_pack_major*, *suite_mask*, and "
"*product_type*. *service_pack* contains a string while all other values are "
"integers. The components can also be accessed by name, so ``sys."
"getwindowsversion()[0]`` is equivalent to ``sys.getwindowsversion().major``. "
"For compatibility with prior versions, only the first 5 elements are "
"retrievable by indexing."
msgstr ""
"実行中の Windows バージョンを示す、名前付きタプルを返します。名前付けされた要"
"素は、 *major*, *minor*, *build*, *platform*, *service_pack*, "
"*service_pack_minor*, *service_pack_major*, *suite_mask*, および "
"*product_type* です。 *service_pack* は、文字列を含み、それ以外は整数です。こ"
"の構成要素には名前でもアクセスできるので、 ``sys.getwindowsversion()[0]`` は "
"``sys.getwindowsversion().major`` と等価です。先行のバージョンとの互換性のた"
"め、最初の 5 要素がインデクシングで得られます。"

#: ../../library/sys.rst:513
msgid "*platform* may be one of the following values:"
msgstr "*platform* は、以下の値となります:"

#: ../../library/sys.rst:516 ../../library/sys.rst:530
msgid "Constant"
msgstr "定数"

#: ../../library/sys.rst:516
msgid "Platform"
msgstr "プラットフォーム"

#: ../../library/sys.rst:518
msgid ":const:`0 (VER_PLATFORM_WIN32s)`"
msgstr ":const:`0 (VER_PLATFORM_WIN32s)`"

#: ../../library/sys.rst:518
msgid "Win32s on Windows 3.1"
msgstr "Win32s on Windows 3.1"

#: ../../library/sys.rst:520
msgid ":const:`1 (VER_PLATFORM_WIN32_WINDOWS)`"
msgstr ":const:`1 (VER_PLATFORM_WIN32_WINDOWS)`"

#: ../../library/sys.rst:520
msgid "Windows 95/98/ME"
msgstr "Windows 95/98/ME"

#: ../../library/sys.rst:522
msgid ":const:`2 (VER_PLATFORM_WIN32_NT)`"
msgstr ":const:`2 (VER_PLATFORM_WIN32_NT)`"

#: ../../library/sys.rst:522
msgid "Windows NT/2000/XP/x64"
msgstr "Windows NT/2000/XP/x64"

#: ../../library/sys.rst:524
msgid ":const:`3 (VER_PLATFORM_WIN32_CE)`"
msgstr ":const:`3 (VER_PLATFORM_WIN32_CE)`"

#: ../../library/sys.rst:524
msgid "Windows CE"
msgstr "Windows CE"

#: ../../library/sys.rst:527
msgid "*product_type* may be one of the following values:"
msgstr "*product_type* は、以下の値のいずれかになります。:"

#: ../../library/sys.rst:530 ../../library/sys.rst:575
msgid "Meaning"
msgstr "意味"

#: ../../library/sys.rst:532
msgid ":const:`1 (VER_NT_WORKSTATION)`"
msgstr ":const:`1 (VER_NT_WORKSTATION)`"

#: ../../library/sys.rst:532
msgid "The system is a workstation."
msgstr "システムはワークステーションです。"

#: ../../library/sys.rst:534
msgid ":const:`2 (VER_NT_DOMAIN_CONTROLLER)`"
msgstr ":const:`2 (VER_NT_DOMAIN_CONTROLLER)`"

#: ../../library/sys.rst:534
msgid "The system is a domain controller."
msgstr "システムはドメインコントローラです。"

#: ../../library/sys.rst:537
msgid ":const:`3 (VER_NT_SERVER)`"
msgstr ":const:`3 (VER_NT_SERVER)`"

#: ../../library/sys.rst:537
msgid "The system is a server, but not a domain controller."
msgstr "システムはサーバですが、ドメインコントローラではありません。"

#: ../../library/sys.rst:542
msgid ""
"This function wraps the Win32 :c:func:`GetVersionEx` function; see the "
"Microsoft documentation on :c:func:`OSVERSIONINFOEX` for more information "
"about these fields."
msgstr ""
"この関数は、Win32 :c:func:`GetVersionEx` 関数を呼び出します。これらのフィール"
"ドに関する詳細は :c:func:`OSVERSIONINFOEX` についてのマイクロソフトのドキュメ"
"ントを参照してください。"

#: ../../library/sys.rst:546
msgid "Availability: Windows."
msgstr "利用出来る環境: Windows."

#: ../../library/sys.rst:549
msgid ""
"Changed to a named tuple and added *service_pack_minor*, "
"*service_pack_major*, *suite_mask*, and *product_type*."
msgstr ""
"名前付きタプルに変更され、 *service_pack_minor*, *service_pack_major*, "
"*suite_mask*, および *product_type* が追加されました。"

#: ../../library/sys.rst:556
msgid ""
"The version number encoded as a single integer.  This is guaranteed to "
"increase with each version, including proper support for non-production "
"releases.  For example, to test that the Python interpreter is at least "
"version 1.5.2, use::"
msgstr ""
"単精度整数にエンコードされたバージョン番号。この値は新バージョン(正規リリース"
"以外であっても)ごとにかならず増加します。例えば、Python 1.5.2 以降でのみ動作"
"するプログラムでは、以下のようなチェックを行います。 ::"

#: ../../library/sys.rst:567
msgid ""
"This is called ``hexversion`` since it only really looks meaningful when "
"viewed as the result of passing it to the built-in :func:`hex` function.  "
"The ``version_info`` value may be used for a more human-friendly encoding of "
"the same information."
msgstr ""
"``hexversion`` は :func:`hex` で16進数に変換しなければ値の意味がわかりませ"
"ん。より読みやすいバージョン番号が必要な場合には ``version_info`` を使用して"
"ください。"

#: ../../library/sys.rst:572
msgid "The ``hexversion`` is a 32-bit number with the following layout:"
msgstr "``hexversion`` は以下のレイアウトで表される 32-bit 数です:"

#: ../../library/sys.rst:575
msgid "Bits (big endian order)"
msgstr "ビット (ビッグエンディアンオーダ)"

#: ../../library/sys.rst:577
msgid ":const:`1-8`"
msgstr ":const:`1-8`"

#: ../../library/sys.rst:577
msgid "``PY_MAJOR_VERSION``  (the ``2`` in ``2.1.0a3``)"
msgstr "``PY_MAJOR_VERSION`` (``2.1.0a3`` の ``2``)"

#: ../../library/sys.rst:580
msgid ":const:`9-16`"
msgstr ":const:`9-16`"

#: ../../library/sys.rst:580
msgid "``PY_MINOR_VERSION``  (the ``1`` in ``2.1.0a3``)"
msgstr "``PY_MINOR_VERSION`` (``2.1.0a3`` の ``1``)"

#: ../../library/sys.rst:583
msgid ":const:`17-24`"
msgstr ":const:`17-24`"

#: ../../library/sys.rst:583
msgid "``PY_MICRO_VERSION``  (the ``0`` in ``2.1.0a3``)"
msgstr "``PY_MICRO_VERSION`` (``2.1.0a3`` の ``0``)"

#: ../../library/sys.rst:586
msgid ":const:`25-28`"
msgstr ":const:`25-28`"

#: ../../library/sys.rst:586
msgid ""
"``PY_RELEASE_LEVEL``  (``0xA`` for alpha, ``0xB`` for beta, ``0xC`` for "
"release candidate and ``0xF`` for final)"
msgstr ""
"``PY_RELEASE_LEVEL`` (アルファでは ``0xA`` 、ベータでは ``0xB`` 、リリース候"
"補では ``0xC`` 、そして最終版は ``0xF``)"

#: ../../library/sys.rst:590
msgid ":const:`29-32`"
msgstr ":const:`29-32`"

#: ../../library/sys.rst:590
msgid ""
"``PY_RELEASE_SERIAL``  (the ``3`` in ``2.1.0a3``, zero for final releases)"
msgstr ""
"``PY_RELEASE_SERIAL`` (the ``3`` in ``2.1.0a3`` の ``0`` 、最終リリースでは "
"0)"

#: ../../library/sys.rst:594
msgid "Thus ``2.1.0a3`` is hexversion ``0x020100a3``."
msgstr "従って、 ``2.1.0a3`` は hexversion で ``0x020100a3`` です。"

#: ../../library/sys.rst:601
msgid ""
"A struct sequence that holds information about Python's internal "
"representation of integers.  The attributes are read only."
msgstr ""
"Python における整数の内部表現に関する情報を保持する、構造体のシーケンスです。"
"この属性は読み込み専用です。"

#: ../../library/sys.rst:607
msgid "Attribute"
msgstr "属性"

#: ../../library/sys.rst:607
msgid "Explanation"
msgstr "説明"

#: ../../library/sys.rst:609
msgid ":const:`bits_per_digit`"
msgstr ":const:`bits_per_digit`"

#: ../../library/sys.rst:609
msgid ""
"number of bits held in each digit.  Python integers are stored internally in "
"base ``2**long_info.bits_per_digit``"
msgstr ""
"各桁に保持されるビットの数です。Python の整数は、内部的に ``2**long_info."
"bits_per_digit`` を基数として保存されます。"

#: ../../library/sys.rst:613
msgid ":const:`sizeof_digit`"
msgstr ":const:`sizeof_digit`"

#: ../../library/sys.rst:613
msgid "size in bytes of the C type used to represent a digit"
msgstr "桁を表すために使われる、C 型の大きさ (バイト) です"

#: ../../library/sys.rst:624
msgid ""
"These three variables are not always defined; they are set when an exception "
"is not handled and the interpreter prints an error message and a stack "
"traceback. Their intended use is to allow an interactive user to import a "
"debugger module and engage in post-mortem debugging without having to re-"
"execute the command that caused the error.  (Typical use is ``import pdb; "
"pdb.pm()`` to enter the post-mortem debugger; see chapter :ref:`debugger` "
"for more information.)"
msgstr ""
"通常は定義されておらず、捕捉されない例外が発生してインタプリタがエラーメッ"
"セージとトレースバックを出力した場合にのみ設定されます。この値は、対話セッ"
"ション中にエラーが発生したとき、デバッグモジュールをロード (例:``import pdb; "
"pdb.pm()`` など。詳細は :ref:`debugger` を参照)して発生したエラーを調査する場"
"合に利用します。デバッガをロードすると、プログラムを再実行せずに情報を取得す"
"ることができます。"

#: ../../library/sys.rst:632
msgid ""
"The meaning of the variables is the same as that of the return values from :"
"func:`exc_info` above.  (Since there is only one interactive thread, thread-"
"safety is not a concern for these variables, unlike for ``exc_type`` etc.)"
msgstr ""
"変数の意味は、上の :func:`exc_info` の戻り値と同じです。対話セッションを実行"
"するスレッドは常に1つだけなので、 ``exc_type`` のようにスレッドに関する問題は"
"発生しません。"

#: ../../library/sys.rst:640
msgid ""
"The largest positive integer supported by Python's regular integer type.  "
"This is at least 2\\*\\*31-1.  The largest negative integer is ``-maxint-1`` "
"--- the asymmetry results from the use of 2's complement binary arithmetic."
msgstr ""
"Pythonの整数型でサポートされる、最大の整数。この値は最低でも 2\\*\\*31-1 で"
"す。最大の負数は ``-maxint-1`` となります。正負の最大数が非対称ですが、これ"
"は 2 の補数計算を行うためです。"

#: ../../library/sys.rst:646
msgid ""
"The largest positive integer supported by the platform's Py_ssize_t type, "
"and thus the maximum size lists, strings, dicts, and many other containers "
"can have."
msgstr ""
"プラットフォームの Py_ssize_t 型がサポートしている最大の正の整数。したがっ"
"て、リスト、文字列、辞書、その他コンテナ型の最大のサイズ。"

#: ../../library/sys.rst:652
msgid ""
"An integer giving the largest supported code point for a Unicode character.  "
"The value of this depends on the configuration option that specifies whether "
"Unicode characters are stored as UCS-2 or UCS-4."
msgstr ""
"Unicode 文字の最大のコードポイントを示す整数。この値は、オプション設定で "
"Unicode 文字の保存形式として USC-2 と UCS-4 のいずれを指定したかによって異な"
"ります。"

#: ../../library/sys.rst:659
msgid ""
"A list of :term:`finder` objects that have their :meth:`find_module` methods "
"called to see if one of the objects can find the module to be imported. The :"
"meth:`find_module` method is called at least with the absolute name of the "
"module being imported. If the module to be imported is contained in package "
"then the parent package's :attr:`__path__` attribute is passed in as a "
"second argument. The method returns ``None`` if the module cannot be found, "
"else returns a :term:`loader`."
msgstr ""
":term:`finder` オブジェクトのリストです。:term:`finder` オブジェクトの :meth:"
"`find_module` メソッドは、インポートするモジュールを探すために呼び出されま"
"す。インポートするモジュールがパッケージに含まれる場合、親パッケージの :attr:"
"`__path__` 属性が第 2 引数として渡されます。そのメソッドは、モジュールが見つ"
"からなかった場合は ``None`` を、見つかった場合は :term:`loader` を返します。"

#: ../../library/sys.rst:667
msgid ""
":data:`sys.meta_path` is searched before any implicit default finders or :"
"data:`sys.path`."
msgstr ""
":data:`sys.meta_path` は、デフォルトの暗黙の finder や、 :data:`sys.path` よ"
"りも先に検索されます。"

#: ../../library/sys.rst:670
msgid "See :pep:`302` for the original specification."
msgstr "オリジナルの仕様については、 :pep:`302` を参照してください。"

#: ../../library/sys.rst:677
msgid ""
"This is a dictionary that maps module names to modules which have already "
"been loaded.  This can be manipulated to force reloading of modules and "
"other tricks. Note that removing a module from this dictionary is *not* the "
"same as calling :func:`reload` on the corresponding module object."
msgstr ""
"ロード済みモジュールのモジュール名とモジュールオブジェクトの辞書。強制的にモ"
"ジュールを再読み込みする場合などに使用します。この辞書からモジュールを削除す"
"るのは、 :func:`reload` の呼び出しと等価では *ありません* 。"

#: ../../library/sys.rst:687
msgid ""
"A list of strings that specifies the search path for modules. Initialized "
"from the environment variable :envvar:`PYTHONPATH`, plus an installation-"
"dependent default."
msgstr ""
"モジュールを検索するパスを示す文字列のリスト。 :envvar:`PYTHONPATH` 環境変数"
"と、インストール時に指定したデフォルトパスで初期化されます。"

#: ../../library/sys.rst:691
msgid ""
"As initialized upon program startup, the first item of this list, "
"``path[0]``, is the directory containing the script that was used to invoke "
"the Python interpreter.  If the script directory is not available (e.g.  if "
"the interpreter is invoked interactively or if the script is read from "
"standard input), ``path[0]`` is the empty string, which directs Python to "
"search modules in the current directory first.  Notice that the script "
"directory is inserted *before* the entries inserted as a result of :envvar:"
"`PYTHONPATH`."
msgstr ""
"起動時に初期化された後、リストの先頭 (``path[0]``) には Python インタプリタを"
"起動したスクリプトのあるディレクトリが挿入されます。スクリプトのディレクトリ"
"がない (インタプリタが対話セッションで起動された時や、スクリプトを標準入力か"
"ら読み込んだ場合など) 場合、 ``path[0]`` は空文字列となり、Python はカレント"
"ディレクトリからモジュールの検索を開始します。スクリプトディレクトリは、 :"
"envvar:`PYTHONPATH` で指定したディレクトリの *前* に挿入されますので注意が必"
"要です。"

#: ../../library/sys.rst:699
msgid "A program is free to modify this list for its own purposes."
msgstr "必要に応じて、プログラム内で自由に変更することができます。"

#: ../../library/sys.rst:701
msgid "Unicode strings are no longer ignored."
msgstr "Unicode 文字列が無視されなくなりました."

#: ../../library/sys.rst:705
msgid ""
"Module :mod:`site` This describes how to use .pth files to extend :data:`sys."
"path`."
msgstr ""
":mod:`site` モジュールのドキュメントで、 .pth ファイルを使って :data:`sys."
"path` を拡張する方法を解説しています。"

#: ../../library/sys.rst:711
msgid ""
"A list of callables that take a path argument to try to create a :term:"
"`finder` for the path. If a finder can be created, it is to be returned by "
"the callable, else raise :exc:`ImportError`."
msgstr ""
"path を引数にとって、その path に対する :term:`finder` の作成を試みる呼び出し"
"可能オブジェクトのリスト。 finder の作成に成功したら、その呼出可能オブジェク"
"トのは finder を返します。失敗した場合は、 :exc:`ImportError` を発生させま"
"す。"

#: ../../library/sys.rst:715 ../../library/sys.rst:727
msgid "Originally specified in :pep:`302`."
msgstr "オリジナルの仕様は :pep:`302` を参照してください。"

#: ../../library/sys.rst:720
msgid ""
"A dictionary acting as a cache for :term:`finder` objects. The keys are "
"paths that have been passed to :data:`sys.path_hooks` and the values are the "
"finders that are found. If a path is a valid file system path but no "
"explicit finder is found on :data:`sys.path_hooks` then ``None`` is stored "
"to represent the implicit default finder should be used. If the path is not "
"an existing path then :class:`imp.NullImporter` is set."
msgstr ""
":term:`finder` オブジェクトのキャッシュとなる辞書。キーは :data:`sys."
"path_hooks` に渡される path で、値は見つかった finder オブジェクト。 path が"
"有効なファイルシステムパスであり、かつ finder が :data:`sys.path_hooks` から"
"見つからない場合、暗黙のデフォルト finder を利用するという意味で ``None`` が"
"格納されます。 path が既存のパスではない場合、 :class:`imp.NullImporter` が格"
"納されます。"

#: ../../library/sys.rst:732
msgid ""
"This string contains a platform identifier that can be used to append "
"platform-specific components to :data:`sys.path`, for instance."
msgstr ""
"プラットフォームを識別する文字列で、:data:`sys.path` にプラットフォーム固有の"
"サブディレクトリを追加する場合などに利用します。"

#: ../../library/sys.rst:735
msgid ""
"For most Unix systems, this is the lowercased OS name as returned by ``uname "
"-s`` with the first part of the version as returned by ``uname -r`` "
"appended, e.g. ``'sunos5'``, *at the time when Python was built*.  Unless "
"you want to test for a specific system version, it is therefore recommended "
"to use the following idiom::"
msgstr ""
"Unix システムでは、この値は ``uname -s`` が返す小文字のOS名を前半に、 "
"``uname -r`` が返すバージョン名を後半に追加したものになります。例えば、 "
"``'sunos5'`` や ``'linux2'`` といった具合です。 *この値はPythonをビルドした時"
"のものです* 。それ以外のシステムでは、次のような値になります。 ::"

#: ../../library/sys.rst:746
msgid ""
"Since lots of code check for ``sys.platform == 'linux2'``, and there is no "
"essential change between Linux 2.x and 3.x, ``sys.platform`` is always set "
"to ``'linux2'``, even on Linux 3.x.  In Python 3.3 and later, the value will "
"always be set to ``'linux'``, so it is recommended to always use the "
"``startswith`` idiom presented above."
msgstr ""
"たくさんのコードが ``sys.platform == 'linux2'`` をチェックし、そして Linux 2."
"x と 3.x との間には本質的な違いもないことから、 ``sys.platform`` は Linux 3."
"x でさえも常に ``'linux2'`` をセットしています。Python 3.3 とそれ以降ではこの"
"値は常に ``'linux'`` ですので、 ``startswith`` イディオムを常に使うことをお奨"
"めします。"

#: ../../library/sys.rst:753
msgid "For other systems, the values are:"
msgstr "その他のシステムでは以下の値になります:"

#: ../../library/sys.rst:756
msgid "System"
msgstr "システム"

#: ../../library/sys.rst:756
msgid ":data:`platform` value"
msgstr ":data:`platform` の値"

#: ../../library/sys.rst:758
msgid "Linux (2.x *and* 3.x)"
msgstr "Linux (2.x *と* 3.x)"

#: ../../library/sys.rst:758
msgid "``'linux2'``"
msgstr "``'linux2'``"

#: ../../library/sys.rst:759
msgid "Windows"
msgstr "Windows"

#: ../../library/sys.rst:759
msgid "``'win32'``"
msgstr "``'win32'``"

#: ../../library/sys.rst:760
msgid "Windows/Cygwin"
msgstr "Windows/Cygwin"

#: ../../library/sys.rst:760
msgid "``'cygwin'``"
msgstr "``'cygwin'``"

#: ../../library/sys.rst:761
msgid "Mac OS X"
msgstr "Mac OS X"

#: ../../library/sys.rst:761
msgid "``'darwin'``"
msgstr "``'darwin'``"

#: ../../library/sys.rst:762
msgid "OS/2"
msgstr "OS/2"

#: ../../library/sys.rst:762
msgid "``'os2'``"
msgstr "``'os2'``"

#: ../../library/sys.rst:763
msgid "OS/2 EMX"
msgstr "OS/2 EMX"

#: ../../library/sys.rst:763
msgid "``'os2emx'``"
msgstr "``'os2emx'``"

#: ../../library/sys.rst:764
msgid "RiscOS"
msgstr "RiscOS"

#: ../../library/sys.rst:764
msgid "``'riscos'``"
msgstr "``'riscos'``"

#: ../../library/sys.rst:765
msgid "AtheOS"
msgstr "AtheOS"

#: ../../library/sys.rst:765
msgid "``'atheos'``"
msgstr "``'atheos'``"

#: ../../library/sys.rst:769
msgid ""
":attr:`os.name` has a coarser granularity.  :func:`os.uname` gives system-"
"dependent version information."
msgstr ""
":attr:`os.name` が持つ情報はおおざっぱな括りであり、:func:`os.uname` はシステ"
"ムに依存したバージョン情報になります。"

#: ../../library/sys.rst:772
msgid ""
"The :mod:`platform` module provides detailed checks for the system's "
"identity."
msgstr ""
":mod:`platform` モジュールはシステムの詳細な識別情報をチェックする機能を提供"
"しています。"

#: ../../library/sys.rst:777
msgid ""
"A string giving the site-specific directory prefix where the platform "
"independent Python files are installed; by default, this is the string ``'/"
"usr/local'``.  This can be set at build time with the ``--prefix`` argument "
"to the :program:`configure` script.  The main collection of Python library "
"modules is installed in the directory :file:`{prefix}/lib/python{X.Y}` while "
"the platform independent header files (all except :file:`pyconfig.h`) are "
"stored in :file:`{prefix}/include/python{X.Y}`, where *X.Y* is the version "
"number of Python, for example ``2.7``."
msgstr ""
"Python のプラットフォームに依存しないファイルがインストールされているディレク"
"トリ名(サイト固有)。デフォルトでは、この値は ``'/usr/local'`` ですが、ビルド"
"時に :program:`configure` の ``--prefix`` 引数で指定することができます。"
"Python ライブラリの主要なコレクションは :file:`{prefix}/lib/python{X.Y}` に、"
"プラットフォーム非依存のヘッダファイル (:file:`pyconfig.h` を除く全て) は :"
"file:`{prefix}/include/python{X.Y}` にインストールされます。 *X.Y* は Python "
"のバージョン番号で、例えば ``2.7`` です。"

#: ../../library/sys.rst:794
msgid ""
"Strings specifying the primary and secondary prompt of the interpreter.  "
"These are only defined if the interpreter is in interactive mode.  Their "
"initial values in this case are ``'>>> '`` and ``'... '``.  If a non-string "
"object is assigned to either variable, its :func:`str` is re-evaluated each "
"time the interpreter prepares to read a new interactive command; this can be "
"used to implement a dynamic prompt."
msgstr ""
"インタプリタの一次プロンプト、二次プロンプトを指定する文字列。対話モードで実"
"行中のみ定義され、初期値は ``'>>> '`` と ``'... '`` です。文字列以外のオブ"
"ジェクトを指定した場合、インタプリタが対話コマンドを読み込むごとにオブジェク"
"トの :func:`str` を評価します。この機能は、動的に変化するプロンプトを実装する"
"場合に利用します。"

#: ../../library/sys.rst:804
msgid ""
"Bool containing the status of the Python 3 warning flag. It's ``True`` when "
"Python is started with the -3 option.  (This should be considered read-only; "
"setting it to a different value doesn't have an effect on Python 3 warnings.)"
msgstr ""
"Python 3 warning flag の状態を格納する Bool 値。 Python が -3 オプションを付"
"けて起動された場合は ``True`` になります。 (この値は定数として扱ってくださ"
"い。この変数を変更しても、Python 3 warning の動作には影響しません)"

#: ../../library/sys.rst:814
msgid ""
"Set the interpreter's \"check interval\".  This integer value determines how "
"often the interpreter checks for periodic things such as thread switches and "
"signal handlers.  The default is ``100``, meaning the check is performed "
"every 100 Python virtual instructions. Setting it to a larger value may "
"increase performance for programs using threads.  Setting it to a value "
"``<=`` 0 checks every virtual instruction, maximizing responsiveness as well "
"as overhead."
msgstr ""
"インタプリタの \"チェック間隔\" を示す整数値を指定します。この値はスレッドス"
"イッチやシグナルハンドラのチェックを行う周期を決定します。デフォルト値は "
"``100`` で、この場合 100 の Python 仮想命令を実行するとチェックを行います。こ"
"の値を大きくすればスレッドを利用するプログラムのパフォーマンスが向上します。"
"この値が 0 ``以下`` の場合、各仮想命令を実行するたびにチェックを行い、レスポ"
"ンス速度が最大になりますがオーバヘッドもまた最大となります。"

#: ../../library/sys.rst:824
msgid ""
"Set the current default string encoding used by the Unicode implementation.  "
"If *name* does not match any available encoding, :exc:`LookupError` is "
"raised. This function is only intended to be used by the :mod:`site` module "
"implementation and, where needed, by :mod:`sitecustomize`.  Once used by "
"the :mod:`site` module, it is removed from the :mod:`sys` module's namespace."
msgstr ""
"現在の Unicode 処理のデフォルトエンコーディング名を設定します。 *name* に一致"
"するエンコーディングが見つからない場合、 :exc:`LookupError` が発生します。こ"
"の関数は、 :mod:`site` モジュールの実装が、 :mod:`sitecustomize` モジュールか"
"ら使用するためだけに定義されています。 :mod:`site` から呼び出された後、この関"
"数は :mod:`sys` から削除されます。"

#: ../../library/sys.rst:838
msgid ""
"Set the flags used by the interpreter for :c:func:`dlopen` calls, such as "
"when the interpreter loads extension modules.  Among other things, this will "
"enable a lazy resolving of symbols when importing a module, if called as "
"``sys.setdlopenflags(0)``.  To share symbols across extension modules, call "
"as ``sys.setdlopenflags(dl.RTLD_NOW | dl.RTLD_GLOBAL)``.  Symbolic names for "
"the flag modules can be either found in the :mod:`dl` module, or in the :mod:"
"`DLFCN` module. If :mod:`DLFCN` is not available, it can be generated from :"
"file:`/usr/include/dlfcn.h` using the :program:`h2py` script. Availability: "
"Unix."
msgstr ""
"インタプリタが拡張モジュールをロードする時、 :c:func:`dlopen` で使用するフラ"
"グを設定します。 ``sys.setdlopenflags(0)`` とすれば、モジュールインポート時に"
"シンボルの遅延解決を行う事ができます。シンボルを拡張モジュール間で共有する場"
"合には、 ``sys.setdlopenflags(dl.RTLD_NOW | dl.RTLD_GLOBAL)`` と指定します。"
"フラグの定義名は :mod:`dl` か :mod:`DLFCN` で定義されています。 :mod:`DLFCN` "
"が存在しない場合、 :program:`h2py` スクリプトを使って :file:`/usr/include/"
"dlfcn.h` から生成することができます。"

#: ../../library/sys.rst:857
msgid ""
"Set the system's profile function, which allows you to implement a Python "
"source code profiler in Python.  See chapter :ref:`profile` for more "
"information on the Python profiler.  The system's profile function is called "
"similarly to the system's trace function (see :func:`settrace`), but it is "
"called with different events, for example it isn't called for each executed "
"line of code (only on call and return, but the return event is reported even "
"when an exception has been set). The function is thread-specific, but there "
"is no way for the profiler to know about context switches between threads, "
"so it does not make sense to use this in the presence of multiple threads. "
"Also, its return value is not used, so it can simply return ``None``."
msgstr ""

#: ../../library/sys.rst:867
msgid ""
"Profile functions should have three arguments: *frame*, *event*, and *arg*. "
"*frame* is the current stack frame.  *event* is a string: ``'call'``, "
"``'return'``, ``'c_call'``, ``'c_return'``, or ``'c_exception'``. *arg* "
"depends on the event type."
msgstr ""
"Profile関数は 3 個の引数、*frame*、*event*、および *arg* を受け取る必要があり"
"ます。*frame* は現在のスタックフレームです。*event* は文字列で、``'call'``, "
"``'return'``, ``'c_call'``, ``'c_return'``, ``'c_exception'`` のどれかが渡さ"
"れます。*arg* はイベントの種類によって異なります。"

#: ../../library/sys.rst:872 ../../library/sys.rst:929
msgid "The events have the following meaning:"
msgstr "*event* には以下の意味があります。"

#: ../../library/sys.rst:876 ../../library/sys.rst:934
msgid "``'call'``"
msgstr "``'call'``"

#: ../../library/sys.rst:875
msgid ""
"A function is called (or some other code block entered).  The profile "
"function is called; *arg* is ``None``."
msgstr ""

#: ../../library/sys.rst:881 ../../library/sys.rst:947
msgid "``'return'``"
msgstr "``'return'``"

#: ../../library/sys.rst:879
msgid ""
"A function (or other code block) is about to return.  The profile function "
"is called; *arg* is the value that will be returned, or ``None`` if the "
"event is caused by an exception being raised."
msgstr ""

#: ../../library/sys.rst:885
msgid "``'c_call'``"
msgstr "``'c_call'``"

#: ../../library/sys.rst:884
msgid ""
"A C function is about to be called.  This may be an extension function or a "
"built-in.  *arg* is the C function object."
msgstr ""
"C 関数(拡張関数かビルトイン関数)が呼ばれようとしている。 *arg* は C 関数オブ"
"ジェクト。"

#: ../../library/sys.rst:888
msgid "``'c_return'``"
msgstr "``'c_return'``"

#: ../../library/sys.rst:888
msgid "A C function has returned. *arg* is the C function object."
msgstr "C 関数から戻った。 *arg* は C の関数オブジェクト。"

#: ../../library/sys.rst:890
msgid "``'c_exception'``"
msgstr "``'c_exception'``"

#: ../../library/sys.rst:891
msgid "A C function has raised an exception.  *arg* is the C function object."
msgstr "C 関数が例外を発生させた。 *arg* は C の関数オブジェクト。"

#: ../../library/sys.rst:895
msgid ""
"Set the maximum depth of the Python interpreter stack to *limit*.  This "
"limit prevents infinite recursion from causing an overflow of the C stack "
"and crashing Python."
msgstr ""
"Python インタプリタの、スタックの最大の深さを *limit* に設定します。この制限"
"は Python プログラムが無限に再帰し、 C スタックがオーバーフローしてクラッシュ"
"することを防止するために設けられています。"

#: ../../library/sys.rst:899
msgid ""
"The highest possible limit is platform-dependent.  A user may need to set "
"the limit higher when she has a program that requires deep recursion and a "
"platform that supports a higher limit.  This should be done with care, "
"because a too-high limit can lead to a crash."
msgstr ""
"*limit* の最大値はプラットフォームによって異なります。深い再帰処理が必要な場"
"合にはプラットフォームがサポートしている範囲内でより大きな値を指定することが"
"できますが、この値が大きすぎればクラッシュするので注意が必要です。"

#: ../../library/sys.rst:911
msgid ""
"Set the system's trace function, which allows you to implement a Python "
"source code debugger in Python.  The function is thread-specific; for a "
"debugger to support multiple threads, it must be registered using :func:"
"`settrace` for each thread being debugged."
msgstr ""
"システムのトレース関数を登録します。トレース関数は Python のソースデバッガを"
"実装するために使用できます。トレース関数はスレッド毎に設定することができるの"
"で、デバッグを行うすべてのスレッドで :func:`settrace` を呼び出し、トレース関"
"数を登録してください。"

#: ../../library/sys.rst:916
msgid ""
"Trace functions should have three arguments: *frame*, *event*, and *arg*. "
"*frame* is the current stack frame.  *event* is a string: ``'call'``, "
"``'line'``, ``'return'`` or ``'exception'``.  *arg* depends on the event "
"type."
msgstr ""

#: ../../library/sys.rst:921
msgid ""
"The trace function is invoked (with *event* set to ``'call'``) whenever a "
"new local scope is entered; it should return a reference to a local trace "
"function to be used that scope, or ``None`` if the scope shouldn't be traced."
msgstr ""
"trace 関数は (*event* に ``'call'`` を渡された状態で) 新しいローカルスコープ"
"に入るたびに呼ばれます。この場合、そのスコープで利用するローカルの trace 関数"
"への参照か、そのスコープを trace しないのであれば ``None`` を返します。"

#: ../../library/sys.rst:925
msgid ""
"The local trace function should return a reference to itself (or to another "
"function for further tracing in that scope), or ``None`` to turn off tracing "
"in that scope."
msgstr ""
"ローカル trace 関数は自身への参照 (もしくはそのスコープの以降の trace を行う"
"別の関数) を返すべきです。もしくは、そのスコープの trace を止めるために "
"``None`` を返します。"

#: ../../library/sys.rst:932
msgid ""
"A function is called (or some other code block entered).  The global trace "
"function is called; *arg* is ``None``; the return value specifies the local "
"trace function."
msgstr ""
"関数が呼び出された(もしくは、何かのコードブロックに入った)。グローバルの "
"trace 関数が呼ばれる。 *arg* は ``None`` が渡される。戻り値はローカルの "
"trace 関数。"

#: ../../library/sys.rst:941
msgid "``'line'``"
msgstr "``'line'``"

#: ../../library/sys.rst:937
msgid ""
"The interpreter is about to execute a new line of code or re-execute the "
"condition of a loop.  The local trace function is called; *arg* is ``None``; "
"the return value specifies the new local trace function.  See :file:`Objects/"
"lnotab_notes.txt` for a detailed explanation of how this works."
msgstr ""
"インタプリタがコードの新しい行を実行しようとしている、または、ループの条件で"
"再実行しようとしている。ローカルの trace 関数が呼ばれる。*arg* は ``None`` 。"
"返り値は新しいローカルの trace 関数。これがどのように動作するかの詳細な説明"
"は、 :file:`Objects/lnotab_notes.txt` を参照のこと。"

#: ../../library/sys.rst:944
msgid ""
"A function (or other code block) is about to return.  The local trace "
"function is called; *arg* is the value that will be returned, or ``None`` if "
"the event is caused by an exception being raised.  The trace function's "
"return value is ignored."
msgstr ""
"関数(あるいは別のコードブロック)から戻ろうとしている。ローカルの trace 関数が"
"呼ばれる。 *arg* は返されようとしている値、または、このイベントが例外が送出さ"
"れることによって起こったなら ``None`` 。 trace 関数の戻り値は無視される。"

#: ../../library/sys.rst:952
msgid "``'exception'``"
msgstr "``'exception'``"

#: ../../library/sys.rst:950
msgid ""
"An exception has occurred.  The local trace function is called; *arg* is a "
"tuple ``(exception, value, traceback)``; the return value specifies the new "
"local trace function."
msgstr ""
"例外が発生した。ローカルの trace 関数が呼ばれる。 *arg* は ``(exception, "
"value, traceback)`` のタプル。戻り値は新しいローカルの trace 関数。"

#: ../../library/sys.rst:954
msgid ""
"Note that as an exception is propagated down the chain of callers, an "
"``'exception'`` event is generated at each level."
msgstr ""
"例外が呼び出しチェインを辿って伝播していくことに注意してください。 "
"``'exception'`` イベントは各レベルで発生します。"

#: ../../library/sys.rst:957
msgid "For more information on code and frame objects, refer to :ref:`types`."
msgstr ""
"code と frame オブジェクトについては、 :ref:`types` を参照してください。"

#: ../../library/sys.rst:961
msgid ""
"The :func:`settrace` function is intended only for implementing debuggers, "
"profilers, coverage tools and the like.  Its behavior is part of the "
"implementation platform, rather than part of the language definition, and "
"thus may not be available in all Python implementations."
msgstr ""
":func:`settrace` 関数は、デバッガ、プロファイラ、カバレッジツール等で使うため"
"だけのものです。この関数の挙動は言語定義よりも実装プラットフォームの分野の問"
"題で、全ての Python 実装で利用できるとは限りません。"

#: ../../library/sys.rst:969
msgid ""
"Activate dumping of VM measurements using the Pentium timestamp counter, if "
"*on_flag* is true. Deactivate these dumps if *on_flag* is off. The function "
"is available only if Python was compiled with ``--with-tsc``. To understand "
"the output of this dump, read :file:`Python/ceval.c` in the Python sources."
msgstr ""
"*on_flag* が真の場合、Pentium タイムスタンプカウンタを使った VM 計測結果のダ"
"ンプ出力を有効にします。 *on_flag* をオフにするとダンプ出力を無効化します。こ"
"の関数は Python を ``--with-tsc`` つきでコンパイルしたときにのみ利用できま"
"す。ダンプの内容を理解したければ、 Python ソースコード中の :file:`Python/"
"ceval.c` を読んでください。"

#: ../../library/sys.rst:978
msgid ""
"This function is intimately bound to CPython implementation details and thus "
"not likely to be implemented elsewhere."
msgstr ""
"この関数は CPython の実装の詳細に密接に結びついています、そのため他の Python "
"実装では実装されていないでしょう。"

#: ../../library/sys.rst:990
msgid ""
"File objects corresponding to the interpreter's standard input, output and "
"error streams.  ``stdin`` is used for all interpreter input except for "
"scripts but including calls to :func:`input` and :func:`raw_input`.  "
"``stdout`` is used for the output of :keyword:`print` and :term:`expression` "
"statements and for the prompts of :func:`input` and :func:`raw_input`. The "
"interpreter's own prompts and (almost all of) its error messages go to "
"``stderr``.  ``stdout`` and ``stderr`` needn't be built-in file objects: any "
"object is acceptable as long as it has a :meth:`write` method that takes a "
"string argument.  (Changing these objects doesn't affect the standard I/O "
"streams of processes executed by :func:`os.popen`, :func:`os.system` or the :"
"func:`exec\\*` family of functions in the :mod:`os` module.)"
msgstr ""
"インタプリタの標準入力・標準出力・標準エラー出力に対応するファイルオブジェク"
"ト。 ``stdin`` はスクリプトの読み込みを除く全ての入力処理で使用され、 :func:"
"`input` や :func:`raw_input` も ``stdin`` から読み込みます。 ``stdout`` "
"は、 :keyword:`print` や式(:term:`expression`)の評価結果、 :func:`input`, :"
"func:`raw_input` のプロンプトの出力先となります。インタプリタのプロンプトは"
"(ほとんど) ``stderr`` に出力されます。 ``stdout`` と ``stderr`` は必ずしも組"
"み込みのファイルオブジェクトである必要はなく、 :meth:`write` メソッドを持つオ"
"ブジェクトであれば使用することができます。 ``stdout`` と ``stderr`` を別のオ"
"ブジェクトに置き換えても、 :func:`os.popen`, :func:`os.system`, :mod:`os` "
"の :func:`exec\\*` などから起動されたプロセスが使用する標準 I/O ストリームは"
"変更されません。"

#: ../../library/sys.rst:1007
msgid ""
"These objects contain the original values of ``stdin``, ``stderr`` and "
"``stdout`` at the start of the program.  They are used during finalization, "
"and could be useful to print to the actual standard stream no matter if the "
"``sys.std*`` object has been redirected."
msgstr ""
"それぞれ起動時の ``stdin``, ``stderr``, ``stdout`` の値を保存しています。終了"
"処理時に利用されます。また、 ``sys.std*`` オブジェクトが(訳注:別のファイルラ"
"イクオブジェクトに)リダイレクトされている場合でも、実際の標準ストリームへの出"
"力に利用できます。"

#: ../../library/sys.rst:1012
msgid ""
"It can also be used to restore the actual files to known working file "
"objects in case they have been overwritten with a broken object.  However, "
"the preferred way to do this is to explicitly save the previous stream "
"before replacing it, and restore the saved object."
msgstr ""
"また、標準ストリームが壊れたオブジェクトに置き換えられた場合に、動作する実際"
"のファイルを復元するために利用することもできます。しかし、明示的に置き換え前"
"のストリームを保存しておき、そのオブジェクトを復元る事を推奨します。"

#: ../../library/sys.rst:1020
msgid ""
"A triple (repo, branch, version) representing the Subversion information of "
"the Python interpreter. *repo* is the name of the repository, ``'CPython'``. "
"*branch* is a string of one of the forms ``'trunk'``, ``'branches/name'`` or "
"``'tags/name'``. *version* is the output of ``svnversion``, if the "
"interpreter was built from a Subversion checkout; it contains the revision "
"number (range) and possibly a trailing 'M' if there were local "
"modifications. If the tree was exported (or svnversion was not available), "
"it is the revision of ``Include/patchlevel.h`` if the branch is a tag. "
"Otherwise, it is ``None``."
msgstr ""
"3つ組 (repo, branch, version) で Python インタプリタの Subversion 情報を表し"
"ます。 *repo* はリポジトリの名前で、 ``'CPython'`` 。 *branch* は "
"``'trunk'``, ``'branches/name'`` または ``'tags/name'`` のいずれかの形式の文"
"字列です。 *version* はもしインタプリタが Subversion のチェックアウトからビル"
"ドされたものならば ``svnversion`` の出力であり、リビジョン番号 (範囲) とロー"
"カルでの変更がある場合には最後に 'M' が付きます。ツリーがエクスポートされたも"
"の (または svnversion が取得できない) で、 branch がタグならば ``Include/"
"patchlevel.h`` のリビジョンになります。それ以外の場合には ``None`` です。"

#: ../../library/sys.rst:1032
msgid ""
"Python is now `developed <https://docs.python.org/devguide/>`_ using Git.  "
"In recent Python 2.7 bugfix releases, :data:`subversion` therefore contains "
"placeholder information.  It is removed in Python 3.3."
msgstr ""

#: ../../library/sys.rst:1040
msgid ""
"When this variable is set to an integer value, it determines the maximum "
"number of levels of traceback information printed when an unhandled "
"exception occurs. The default is ``1000``.  When set to ``0`` or less, all "
"traceback information is suppressed and only the exception type and value "
"are printed."
msgstr ""
"捕捉されない例外が発生した時、出力されるトレースバック情報の最大レベル数を指"
"定する整数値(デフォルト値は ``1000``)。 ``0`` 以下の値が設定された場合、ト"
"レースバック情報は出力されず例外型と例外値のみが出力されます。"

#: ../../library/sys.rst:1048
msgid ""
"A string containing the version number of the Python interpreter plus "
"additional information on the build number and compiler used.  This string "
"is displayed when the interactive interpreter is started.  Do not extract "
"version information out of it, rather, use :data:`version_info` and the "
"functions provided by the :mod:`platform` module."
msgstr ""
"Python インタプリタのバージョン番号の他、ビルド番号や使用コンパイラなどの情報"
"を示す文字列です。この文字列は Python 対話型インタプリタが起動した時に表示さ"
"れます。バージョン情報はここから抜き出さずに、 :data:`version_info` および :"
"mod:`platform` が提供する関数を使って下さい。"

#: ../../library/sys.rst:1057
msgid ""
"The C API version for this interpreter.  Programmers may find this useful "
"when debugging version conflicts between Python and extension modules."
msgstr ""
"使用中のインタプリタの C API バージョン。 Python と拡張モジュール間の不整合を"
"デバッグする場合などに利用できます。"

#: ../../library/sys.rst:1065
msgid ""
"A tuple containing the five components of the version number: *major*, "
"*minor*, *micro*, *releaselevel*, and *serial*.  All values except "
"*releaselevel* are integers; the release level is ``'alpha'``, ``'beta'``, "
"``'candidate'``, or ``'final'``.  The ``version_info`` value corresponding "
"to the Python version 2.0 is ``(2, 0, 0, 'final', 0)``.  The components can "
"also be accessed by name, so ``sys.version_info[0]`` is equivalent to ``sys."
"version_info.major`` and so on."
msgstr ""
"バージョン番号を示す 5 要素タプル:*major*, *minor*, *micro*, *releaselevel*, "
"*serial* 。 *releaselevel* 以外は全て整数です。 *releaselevel* の値は、 "
"``'alpha'``, ``'beta'``, ``'candidate'``, ``'final'`` の何れかです。 Python "
"2.0 の ``version_info`` は、 ``(2, 0, 0, 'final', 0)`` となります。構成要素に"
"は名前でもアクセスできるので、 ``sys.version_info[0]`` は ``sys.version_info."
"major`` と等価、などになります。"

#: ../../library/sys.rst:1074
msgid "Added named component attributes"
msgstr "構成する属性に名前をつけました。"

#: ../../library/sys.rst:1080
msgid ""
"This is an implementation detail of the warnings framework; do not modify "
"this value.  Refer to the :mod:`warnings` module for more information on the "
"warnings framework."
msgstr ""
"この値は、warnings フレームワーク内部のみ使用され、変更することはできません。"
"詳細は :mod:`warnings` を参照してください。"

#: ../../library/sys.rst:1087
msgid ""
"The version number used to form registry keys on Windows platforms. This is "
"stored as string resource 1000 in the Python DLL.  The value is normally the "
"first three characters of :const:`version`.  It is provided in the :mod:"
"`sys` module for informational purposes; modifying this value has no effect "
"on the registry keys used by Python. Availability: Windows."
msgstr ""
"Windows プラットフォームで、レジストリのキーとなるバージョン番号。 Python "
"DLL の文字列リソース 1000 に設定されています。通常、この値は :const:"
"`version` の先頭三文字となります。この値は参照専用で、別の値を設定しても "
"Python が使用するレジストリキーを変更することはできません。利用できる環境: "
"Windows。"

#: ../../library/sys.rst:1094
msgid "Citations"
msgstr "出典"

#: ../../library/sys.rst:1095
msgid ""
"ISO/IEC 9899:1999.  \"Programming languages -- C.\"  A public draft of this "
"standard is available at http://www.open-std.org/jtc1/sc22/wg14/www/docs/"
"n1256.pdf\\ ."
msgstr ""
"ISO/IEC 9899:1999.  \"Programming languages -- C.\"  この標準のパブリックドラ"
"フトが参照できます: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256."
"pdf\\。"
