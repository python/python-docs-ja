# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
# Takanori Suzuki <takanori@takanory.net>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:06+0000\n"
"PO-Revision-Date: 2020-05-30 12:15+0000\n"
"Last-Translator: Takanori Suzuki <takanori@takanory.net>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xmlrpc.server.rst:2
msgid ":mod:`xmlrpc.server` --- Basic XML-RPC servers"
msgstr ":mod:`xmlrpc.server` --- 基本的なXML-RPCサーバー"

#: ../../library/xmlrpc.server.rst:10
msgid "**Source code:** :source:`Lib/xmlrpc/server.py`"
msgstr "**ソースコード:** :source:`Lib/xmlrpc/server.py`"

#: ../../library/xmlrpc.server.rst:14
msgid ""
"The :mod:`xmlrpc.server` module provides a basic server framework for XML-"
"RPC servers written in Python.  Servers can either be free standing, using :"
"class:`SimpleXMLRPCServer`, or embedded in a CGI environment, using :class:"
"`CGIXMLRPCRequestHandler`."
msgstr ""
":mod:`xmlrpc.server` モジュールはPythonで記述された基本的なXML-RPC サーバーフ"
"レームワークを提供します。サーバーはスタンドアロンであるか、 :class:"
"`SimpleXMLRPCServer` を使うか、 :class:`CGIXMLRPCRequestHandler` を使って "
"CGI 環境に組み込まれるかの、いずれかです。"

#: ../../library/xmlrpc.server.rst:22
msgid ""
"The :mod:`xmlrpc.server` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
":mod:`xmlrpc.server` モジュールは悪意を持って構築されたデータに対して安全では"
"ありません。信頼できないデータや認証されていないデータを解析する必要がある場"
"合は、 :ref:`xml-vulnerabilities` を参照してください。"

#: ../../library/xmlrpc.server.rst:31
msgid ""
"Create a new server instance.  This class provides methods for registration "
"of functions that can be called by the XML-RPC protocol.  The "
"*requestHandler* parameter should be a factory for request handler "
"instances; it defaults to :class:`SimpleXMLRPCRequestHandler`.  The *addr* "
"and *requestHandler* parameters are passed to the :class:`socketserver."
"TCPServer` constructor.  If *logRequests* is true (the default), requests "
"will be logged; setting this parameter to false will turn off logging.   The "
"*allow_none* and *encoding* parameters are passed on to :mod:`xmlrpc.client` "
"and control the XML-RPC responses that will be returned from the server. The "
"*bind_and_activate* parameter controls whether :meth:`server_bind` and :meth:"
"`server_activate` are called immediately by the constructor; it defaults to "
"true. Setting it to false allows code to manipulate the "
"*allow_reuse_address* class variable before the address is bound. The "
"*use_builtin_types* parameter is passed to the :func:`~xmlrpc.client.loads` "
"function and controls which types are processed when date/times values or "
"binary data are received; it defaults to false."
msgstr ""
"サーバーインスタンスを新たに作成します。\n"
"このクラスは XML-RPC プロトコルで呼ばれる関数の登録のためのメソッドを提供しま"
"す。\n"
"引数 *requestHandler* にはリクエストハンドラーインスタンスのファクトリーを設"
"定します。\n"
"デフォルトは :class:`SimpleXMLRPCRequestHandler` です。\n"
"引数 *addr* と *requestHandler* は :class:`socketserver.TCPServer` のコンスト"
"ラクターに渡されます。\n"
"*logRequests* が真の場合 (デフォルト)、 リクエストはログに記録されます。\n"
"この引数を偽にするとはログは記録されません。\n"
"引数 *allow_none* と *encoding* は :mod:`xmlrpc.client` に渡され、サーバーが"
"返す XML-RPC 応答を制御します。\n"
"*bind_and_activate* 引数はコンストラクタが直ちに :meth:`server_bind` と :"
"meth:`server_activate` を呼ぶかどうかを制御します。デフォルトでは真です。\n"
"この引数に ``False`` を設定することで、アドレスを束縛する前に "
"*allow_reuse_address* クラス変数を操作することが出来ます。 \n"
"*use_builtin_types* 引数は :func:`~xmlrpc.client.loads` 関数に渡されます。\n"
"この引数は日付/時刻の値やバイナリデータを受け取ったときにどの型が処理されるか"
"を制御します。デフォルトでは偽です。"

#: ../../library/xmlrpc.server.rst:47 ../../library/xmlrpc.server.rst:61
#: ../../library/xmlrpc.server.rst:373
msgid "The *use_builtin_types* flag was added."
msgstr "*use_builtin_types* フラグが追加されました。"

#: ../../library/xmlrpc.server.rst:54
msgid ""
"Create a new instance to handle XML-RPC requests in a CGI environment.  The "
"*allow_none* and *encoding* parameters are passed on to :mod:`xmlrpc.client` "
"and control the XML-RPC responses that will be returned from the server. The "
"*use_builtin_types* parameter is passed to the :func:`~xmlrpc.client.loads` "
"function and controls which types are processed when date/times values or "
"binary data are received; it defaults to false."
msgstr ""
"CGI 環境における XML-RPC リクエストハンドラーを新たに作成します。\n"
"引数 *allow_none* と *encoding* は :mod:`xmlrpc.client` に渡され、サーバーが"
"返す XML-RPC 応答を制御します。\n"
"*use_builtin_types* 引数は :func:`~xmlrpc.client.loads` 関数に渡されます。\n"
"この引数は日付/時刻の値やバイナリデータを受け取ったときにどの型が処理されるか"
"を制御します。デフォルトは偽です。"

#: ../../library/xmlrpc.server.rst:67
msgid ""
"Create a new request handler instance.  This request handler supports "
"``POST`` requests and modifies logging so that the *logRequests* parameter "
"to the :class:`SimpleXMLRPCServer` constructor parameter is honored."
msgstr ""
"リクエストハンドラーインスタンスを新たに作成します。このリクエストハンドラー"
"は ``POST`` リクエストをサポートし、 :class:`SimpleXMLRPCServer` コンストラク"
"ターの引数 *logRequests* に従ってログ出力を行います。"

#: ../../library/xmlrpc.server.rst:75
msgid "SimpleXMLRPCServer Objects"
msgstr "SimpleXMLRPCServer オブジェクト"

#: ../../library/xmlrpc.server.rst:77
msgid ""
"The :class:`SimpleXMLRPCServer` class is based on :class:`socketserver."
"TCPServer` and provides a means of creating simple, stand alone XML-RPC "
"servers."
msgstr ""
":class:`SimpleXMLRPCServer` クラスは :class:`socketserver.TCPServer` のサブク"
"ラスで、基本的なスタンドアロンの XML-RPC サーバーを作成する手段を提供します。"

#: ../../library/xmlrpc.server.rst:84 ../../library/xmlrpc.server.rst:298
msgid ""
"Register a function that can respond to XML-RPC requests.  If *name* is "
"given, it will be the method name associated with *function*, otherwise "
"``function.__name__`` will be used.  *name* is a string, and may contain "
"characters not legal in Python identifiers, including the period character."
msgstr ""
"XML- RPCリクエストに応じる関数を登録します。引数 *name* が与えられている場合"
"はその値が、関数 *function* に関連付けられます。これが与えられない場合は "
"``function.__name__`` の値が用いられます。引数 *name* は文字列で、Pythonで識"
"別子として正しくない文字(\" . \"ピリオドなど )を含んでいても構いません。"

#: ../../library/xmlrpc.server.rst:89 ../../library/xmlrpc.server.rst:303
msgid ""
"This method can also be used as a decorator.  When used as a decorator, "
"*name* can only be given as a keyword argument to register *function* under "
"*name*.  If no *name* is given, ``function.__name__`` will be used."
msgstr ""

#: ../../library/xmlrpc.server.rst:93 ../../library/xmlrpc.server.rst:307
msgid ":meth:`register_function` can be used as a decorator."
msgstr ""

#: ../../library/xmlrpc.server.rst:99
msgid ""
"Register an object which is used to expose method names which have not been "
"registered using :meth:`register_function`.  If *instance* contains a :meth:"
"`_dispatch` method, it is called with the requested method name and the "
"parameters from the request.  Its API is ``def _dispatch(self, method, "
"params)`` (note that *params* does not represent a variable argument list).  "
"If it calls an underlying function to perform its task, that function is "
"called as ``func(*params)``, expanding the parameter list. The return value "
"from :meth:`_dispatch` is returned to the client as the result.  If "
"*instance* does not have a :meth:`_dispatch` method, it is searched for an "
"attribute matching the name of the requested method."
msgstr ""
"オブジェクトを登録します。\n"
"オブジェクトは :meth:`register_function` を使用して登録されていないメソッド名"
"を公開するのに使われます。\n"
"*instance* に :meth:`_dispatch`  メソッドがあった場合、リクエストされたメソッ"
"ド名と引数で :meth:`_dispatch`  を呼び出します。\n"
"API は ``def _dispatch(self, method, params)`` (*params* 可変引数リストではな"
"いことに注意) です。\n"
"タスクを実行するのに下層の関数を呼び出す場合、その関数は ``func(*params)`` の"
"ように引数リストを展開して呼び出されます。\n"
":meth:`_dispatch` の返り値は結果としてクライアントに返されます。\n"
"*instance* に :meth:`_dispatch` メソッドがない場合、リクエストされたメソッド"
"名にマッチする属性を検索します。"

#: ../../library/xmlrpc.server.rst:110
msgid ""
"If the optional *allow_dotted_names* argument is true and the instance does "
"not have a :meth:`_dispatch` method, then if the requested method name "
"contains periods, each component of the method name is searched for "
"individually, with the effect that a simple hierarchical search is "
"performed.  The value found from this search is then called with the "
"parameters from the request, and the return value is passed back to the "
"client."
msgstr ""
"オプション引数 *allow_dotted_names* が真でインスタンスに :meth:`_dispatch` メ"
"ソッドがない場合、リクエストされたメソッド名がピリオドを含むなら、メソッド名"
"の各要素が個々に検索され、簡単な階層的検索が行われます。\n"
"その検索で発見された値をリクエストの引数で呼び出し、クライアントに返り値を返"
"します。"

#: ../../library/xmlrpc.server.rst:119
msgid ""
"Enabling the *allow_dotted_names* option allows intruders to access your "
"module's global variables and may allow intruders to execute arbitrary code "
"on your machine.  Only use this option on a secure, closed network."
msgstr ""
"*allow_dotted_names* オプションを有効にすると、侵入者はあなたのモジュールのグ"
"ローバル変数にアクセスすることができ、あなたのマシンで任意のコードを実行でき"
"る可能性があります。このオプションは閉じた安全なネットワークでのみお使い下さ"
"い。"

#: ../../library/xmlrpc.server.rst:126
msgid ""
"Registers the XML-RPC introspection functions ``system.listMethods``, "
"``system.methodHelp`` and ``system.methodSignature``."
msgstr ""
"XML-RPC のイントロスペクション関数、 ``system.listMethods`` 、 ``system."
"methodHelp`` 、 ``system.methodSignature`` を登録します。"

#: ../../library/xmlrpc.server.rst:132
msgid "Registers the XML-RPC multicall function system.multicall."
msgstr ""
"XML-RPC における複数の要求を処理する関数 system.multicall を登録します。"

#: ../../library/xmlrpc.server.rst:137
msgid ""
"An attribute value that must be a tuple listing valid path portions of the "
"URL for receiving XML-RPC requests.  Requests posted to other paths will "
"result in a 404 \"no such page\" HTTP error.  If this tuple is empty, all "
"paths will be considered valid. The default value is ``('/', '/RPC2')``."
msgstr ""
"この属性値はXML-RPCリクエストを受け付けるURLの有効なパス部分をリストするタプ"
"ルでなければなりません。これ以外のパスへのリクエストは404「そのようなページは"
"ありません」 HTTPエラーになります。このタプルが空の場合は全てのパスが有効であ"
"ると見なされます。デフォルト値は ``('/', '/RPC2')`` です。"

#: ../../library/xmlrpc.server.rst:146
msgid "SimpleXMLRPCServer Example"
msgstr "SimpleXMLRPCServer の例"

#: ../../library/xmlrpc.server.rst:147
msgid "Server code::"
msgstr "サーバーのコード::"

#: ../../library/xmlrpc.server.rst:181
msgid ""
"The following client code will call the methods made available by the "
"preceding server::"
msgstr ""
"以下のクライアントコードは上のサーバーで使えるようになったメソッドを呼び出し"
"ます::"

#: ../../library/xmlrpc.server.rst:194
msgid ""
":meth:`register_function` can also be used as a decorator. The previous "
"server example can register functions in a decorator way::"
msgstr ""

#: ../../library/xmlrpc.server.rst:225
msgid ""
"The following example included in the :file:`Lib/xmlrpc/server.py` module "
"shows a server allowing dotted names and registering a multicall function."
msgstr ""
":file:`Lib/xmlrpc/server.py` モジュール内にある以下の例はドット付名前を許容し"
"複数呼び出し関数を登録するサーバです。"

#: ../../library/xmlrpc.server.rst:230
msgid ""
"Enabling the *allow_dotted_names* option allows intruders to access your "
"module's global variables and may allow intruders to execute arbitrary code "
"on your machine.  Only use this example only within a secure, closed network."
msgstr ""
"*allow_dotted_names* オプションを有効にすると、侵入者はあなたのモジュールのグ"
"ローバル変数にアクセスすることができ、あなたのマシンで任意のコードを実行でき"
"る可能性があります。この例は閉じた安全なネットワークでのみお使い下さい。"

#: ../../library/xmlrpc.server.rst:259
msgid "This ExampleService demo can be invoked from the command line::"
msgstr ""
"この ExampleService デモはコマンドラインから起動することができます。 ::"

#: ../../library/xmlrpc.server.rst:264
msgid ""
"The client that interacts with the above server is included in `Lib/xmlrpc/"
"client.py`::"
msgstr ""
"上記のサーバとやりとりするクライアントは `Lib/xmlrpc/client.py` にあります::"

#: ../../library/xmlrpc.server.rst:284
msgid ""
"This client which interacts with the demo XMLRPC server can be invoked as::"
msgstr ""
"デモ XMLRPC サーバとやりとりするクライアントは以下のように呼び出します::"

#: ../../library/xmlrpc.server.rst:290
msgid "CGIXMLRPCRequestHandler"
msgstr "CGIXMLRPCRequestHandler"

#: ../../library/xmlrpc.server.rst:292
msgid ""
"The :class:`CGIXMLRPCRequestHandler` class can be used to handle XML-RPC "
"requests sent to Python CGI scripts."
msgstr ""
":class:`CGIXMLRPCRequestHandler` クラスは、Python の CGI スクリプトに送られ"
"た XML-RPC リクエストを処理するときに使用できます。"

#: ../../library/xmlrpc.server.rst:313
msgid ""
"Register an object which is used to expose method names  which have not been "
"registered using :meth:`register_function`. If  instance contains a :meth:"
"`_dispatch` method, it is called with the  requested method name and the "
"parameters from the  request; the return value is returned to the client as "
"the result. If instance does not have a :meth:`_dispatch` method, it is "
"searched for an attribute matching the name of the requested method; if  the "
"requested method name contains periods, each  component of the method name "
"is searched for individually,  with the effect that a simple hierarchical "
"search is performed. The value found from this search is then called with "
"the  parameters from the request, and the return value is passed  back to "
"the client."
msgstr ""
"オブジェクトを登録します。\n"
"オブジェクトは :meth:`register_function` を使用して登録されていないメソッド名"
"を公開するのに使われます。\n"
"*instance* に :meth:`_dispatch` メソッドがあった場合、リクエストされたメソッ"
"ド名と引数で :meth:`_dispatch` を呼び出します。\n"
"返り値は結果としてクライアントに返されます。\n"
"*instance* に :meth:`_dispatch` メソッドがなかった場合、リクエストされたメ"
"ソッド名にマッチする属性を検索します。\n"
"リクエストされたメソッド名がピリオドを含む場合、モジュール名の各要素が個々に"
"検索され、簡単な階層的検索が実行されます。\n"
"その検索で発見された値をリクエストの引数で呼び出し、クライアントに返り値を返"
"します。"

#: ../../library/xmlrpc.server.rst:327
msgid ""
"Register the XML-RPC introspection functions  ``system.listMethods``, "
"``system.methodHelp`` and  ``system.methodSignature``."
msgstr ""
"XML-RPC のイントロスペクション関数、 ``system.listMethods`` 、 ``system."
"methodHelp`` 、 ``system.methodSignature`` を登録します。"

#: ../../library/xmlrpc.server.rst:333
msgid "Register the XML-RPC multicall function ``system.multicall``."
msgstr "XML-RPC マルチコール関数 ``system.multicall`` を登録します。"

#: ../../library/xmlrpc.server.rst:338
msgid ""
"Handle an XML-RPC request. If *request_text* is given, it should be the POST "
"data provided by the HTTP server,  otherwise the contents of stdin will be "
"used."
msgstr ""
"XML-RPC リクエストを処理します。 与えられた場合、 *request_text* はHTTP サー"
"バが提供する POST データでなければなりません。\n"
"そうでない場合、標準入力の内容が使われます。"

#: ../../library/xmlrpc.server.rst:341
msgid "Example::"
msgstr "以下はプログラム例です::"

#: ../../library/xmlrpc.server.rst:357
msgid "Documenting XMLRPC server"
msgstr "XMLRPC サーバの文書化"

#: ../../library/xmlrpc.server.rst:359
msgid ""
"These classes extend the above classes to serve HTML documentation in "
"response to HTTP GET requests.  Servers can either be free standing, using :"
"class:`DocXMLRPCServer`, or embedded in a CGI environment, using :class:"
"`DocCGIXMLRPCRequestHandler`."
msgstr ""
"これらのクラスは HTTP GET 要求への応答内で HTML 文書となるよう上記クラスを拡"
"張します。\n"
"サーバは独立していても CGI 環境に埋め込まれていてもかまいません。\n"
"前者では :class:`DocXMLRPCServer` を、後者では :class:"
"`DocCGIXMLRPCRequestHandler` を使用します。"

#: ../../library/xmlrpc.server.rst:369
msgid ""
"Create a new server instance. All parameters have the same meaning as for :"
"class:`SimpleXMLRPCServer`; *requestHandler* defaults to :class:"
"`DocXMLRPCRequestHandler`."
msgstr ""
"サーバ・インスタンスを新たに生成します。全ての引数の意味は :class:"
"`SimpleXMLRPCServer` のものと同じですが、 *requestHandler* のデフォルトは :"
"class:`DocXMLRPCRequestHandler` になっています。"

#: ../../library/xmlrpc.server.rst:379
msgid "Create a new instance to handle XML-RPC requests in a CGI environment."
msgstr "CGI環境で XMR-RPC リクエストを処理するインスタンスを新たに生成します。"

#: ../../library/xmlrpc.server.rst:384
msgid ""
"Create a new request handler instance. This request handler supports XML-RPC "
"POST requests, documentation GET requests, and modifies logging so that the "
"*logRequests* parameter to the :class:`DocXMLRPCServer` constructor "
"parameter is honored."
msgstr ""
"リクエスト・ハンドラのインスタンスを新たに生成します。このリクエスト・ハンド"
"ラは XML-RPC POST 要求とドキュメントの GET 要求をサポートし、 :class:"
"`DocXMLRPCServer` コンストラクタに与えられた引数 *logRequests* を優先するため"
"にロギングを変更します。"

#: ../../library/xmlrpc.server.rst:393
msgid "DocXMLRPCServer Objects"
msgstr "DocXMLRPCServer オブジェクト"

#: ../../library/xmlrpc.server.rst:395
msgid ""
"The :class:`DocXMLRPCServer` class is derived from :class:"
"`SimpleXMLRPCServer` and provides a means of creating self-documenting, "
"stand alone XML-RPC servers. HTTP POST requests are handled as XML-RPC "
"method calls. HTTP GET requests are handled by generating pydoc-style HTML "
"documentation. This allows a server to provide its own web-based "
"documentation."
msgstr ""
":class:`DocXMLRPCServer` は :class:`SimpleXMLRPCServer` の派生クラスで、自己"
"文書化するスタンドアローン XML-RPC サーバの作成手段を提供します。\n"
"HTTP POST リクエストは XML-RPC メソッドの呼び出しとして処理されます。\n"
"HTTP GET リクエストは pydoc スタイルの HTML 文書の生成に処理されます。\n"
"これによりサーバは自身の web ベースの文書を提供できます。"

#: ../../library/xmlrpc.server.rst:404 ../../library/xmlrpc.server.rst:432
msgid ""
"Set the title used in the generated HTML documentation. This title will be "
"used inside the HTML \"title\" element."
msgstr ""
"生成する HTML 文書で使用されるタイトルを設定します。このタイトルは HTML の "
"title 要素内で使われます。"

#: ../../library/xmlrpc.server.rst:410 ../../library/xmlrpc.server.rst:438
msgid ""
"Set the name used in the generated HTML documentation. This name will appear "
"at the top of the generated documentation inside a \"h1\" element."
msgstr ""
"生成する HTML 文書内で使用される名前を設定します。この名前は生成した文書冒頭"
"の h1 要素内で使われます。"

#: ../../library/xmlrpc.server.rst:416 ../../library/xmlrpc.server.rst:444
msgid ""
"Set the description used in the generated HTML documentation. This "
"description will appear as a paragraph, below the server name, in the "
"documentation."
msgstr ""
"生成する HTML 文書内で使用される説明を設定します。この説明は文書中のサーバ名"
"の下にパラグラフとして出力されます。"

#: ../../library/xmlrpc.server.rst:421
msgid "DocCGIXMLRPCRequestHandler"
msgstr "DocCGIXMLRPCRequestHandler"

#: ../../library/xmlrpc.server.rst:423
msgid ""
"The :class:`DocCGIXMLRPCRequestHandler` class is derived from :class:"
"`CGIXMLRPCRequestHandler` and provides a means of creating self-documenting, "
"XML-RPC CGI scripts. HTTP POST requests are handled as XML-RPC method calls. "
"HTTP GET requests are handled by generating pydoc-style HTML documentation. "
"This allows a server to provide its own web-based documentation."
msgstr ""
":class:`DocCGIXMLRPCRequestHandler` は :class:`CGIXMLRPCRequestHandler` の派"
"生クラスで、自己文書化する XML-RPC CGI スクリプトの作成手段を提供します。\n"
"HTTP POST リクエストは XML-RCP メソッドの呼び出しとして処理されます。\n"
"HTTP GET リクエストは pydoc スタイルの HTML 文書の生成に処理されます。\n"
"これによりサーバは自身の web ベースの文書を提供できます。"
