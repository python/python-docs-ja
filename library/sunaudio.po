# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2017-09-22 17:56+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/sunaudio.rst:3
msgid ":mod:`sunaudiodev` --- Access to Sun audio hardware"
msgstr ":mod:`sunaudiodev` --- Sun オーディオハードウェアへのアクセス"

#: ../../library/sunaudio.rst:10
msgid "The :mod:`sunaudiodev` module has been removed in Python 3."
msgstr ":mod:`sunaudiodev` モジュールは Python 3 で削除されました。"

#: ../../library/sunaudio.rst:17
msgid ""
"This module allows you to access the Sun audio interface. The Sun audio "
"hardware is capable of recording and playing back audio data in u-LAW format "
"with a sample rate of 8K per second. A full description can be found in the :"
"manpage:`audio(7I)` manual page."
msgstr ""
"このモジュールを使うと、Sun のオーディオインターフェースにアクセスできます。 "
"Sun オーディオハードウェアは、1 秒あたり 8k のサンプリングレート、 u-LAW "
"フォーマットでオーディオデータを録音、再生できます。完全な説明文書はマニュア"
"ルページ :manpage:`audio(7I)` にあります。"

#: ../../library/sunaudio.rst:24
msgid ""
"The module :mod:`SUNAUDIODEV`  defines constants which may be used with this "
"module."
msgstr ""
"モジュール :mod:`SUNAUDIODEV` には、このモジュールで使われる定数が定義されて"
"います。"

#: ../../library/sunaudio.rst:27
msgid "This module defines the following variables and functions:"
msgstr "このモジュールには、以下の変数と関数が定義されています:"

#: ../../library/sunaudio.rst:32
msgid ""
"This exception is raised on all errors. The argument is a string describing "
"what went wrong."
msgstr ""
"この例外は、全てのエラーについて発生します。引数は誤りを説明する文字列です。"

#: ../../library/sunaudio.rst:38
msgid ""
"This function opens the audio device and returns a Sun audio device object. "
"This object can then be used to do I/O on. The *mode* parameter is one of "
"``'r'`` for record-only access, ``'w'`` for play-only access, ``'rw'`` for "
"both and ``'control'`` for access to the control device. Since only one "
"process is allowed to have the recorder or player open at the same time it "
"is a good idea to open the device only for the activity needed. See :manpage:"
"`audio(7I)` for details."
msgstr ""
"この関数はオーディオデバイスを開き、Sun オーディオデバイスのオブジェクトを返"
"します。こうすることで、オブジェクトが I/O に使用できるようになります。パラ"
"メータ *mode* は次のうちのいずれか一つで、録音のみには ``'r'`` 、再生のみに"
"は ``'w'`` 、録音と再生両方には ``'rw'`` 、コントロールデバイスへのアクセスに"
"は ``'control'`` です。レコーダーやプレーヤーには同時に  １つのプロセスしかア"
"クセスが許されていないので、必要な動作についてだけデバイスをオープンするのが"
"いい考えです。詳しくは :manpage:`audio(7I)` を参照してください。"

#: ../../library/sunaudio.rst:46
msgid ""
"As per the manpage, this module first looks in the environment variable "
"``AUDIODEV`` for the base audio device filename.  If not found, it falls "
"back to :file:`/dev/audio`.  The control device is calculated by appending "
"\"ctl\" to the base audio device."
msgstr ""
"マニュアルページにあるように、このモジュールは環境変数 ``AUDIODEV`` の中の"
"ベースオーディオデバイスファイルネームを初めに参照します。見つからない場合"
"は :file:`/dev/audio` を参照します。コントロールデバイスについては、ベース"
"オーディオデバイスに \"ctl\" を加えて扱われます。"

#: ../../library/sunaudio.rst:55
msgid "Audio Device Objects"
msgstr "オーディオデバイスオブジェクト"

#: ../../library/sunaudio.rst:57
msgid ""
"The audio device objects are returned by :func:`.open` define the following "
"methods (except ``control`` objects which only provide :meth:`getinfo`, :"
"meth:`setinfo`, :meth:`fileno`, and :meth:`drain`):"
msgstr ""
"オーディオデバイスオブジェクトは :func:`.open` で返され、このオブジェクトには"
"以下のメソッドが定義されています (``control`` オブジェクトは除きます。これに"
"は :meth:`getinfo` 、 :meth:`setinfo` 、 :meth:`fileno` 、 :meth:`drain` だけ"
"が定義されています）:"

#: ../../library/sunaudio.rst:64
msgid ""
"This method explicitly closes the device. It is useful in situations where "
"deleting the object does not immediately close it since there are other "
"references to it. A closed device should not be used again."
msgstr ""
"このメソッドはデバイスを明示的に閉じます。オブジェクトを削除しても、それを参"
"照しているものがあって、すぐに閉じてくれない場合に便利です。閉じられたデバイ"
"スを使うことはできません。"

#: ../../library/sunaudio.rst:71
msgid ""
"Returns the file descriptor associated with the device.  This can be used to "
"set up ``SIGPOLL`` notification, as described below."
msgstr ""
"デバイスに関連づけられたファイルディスクリプタを返します。これは、後述の "
"``SIGPOLL`` の通知を組み立てるのに使われます。"

#: ../../library/sunaudio.rst:77
msgid ""
"This method waits until all pending output is processed and then returns. "
"Calling this method is often not necessary: destroying the object will "
"automatically close the audio device and this will do an implicit drain."
msgstr ""
"このメソッドは全ての出力中のプロセスが終了するまで待って、それから制御が戻り"
"ます。このメソッドの呼び出しはそう必要ではありません：オブジェクトを削除する"
"と自動的にオーディオデバイスを閉じて、暗黙のうちに吐き出します。"

#: ../../library/sunaudio.rst:84
msgid ""
"This method discards all pending output. It can be used avoid the slow "
"response to a user's stop request (due to buffering of up to one second of "
"sound)."
msgstr ""
"このメソッドは全ての出力中のものを捨て去ります。ユーザの停止命令に対する反応"
"の遅れ（1 秒までの音声のバッファリングによって起こります）を避けるのに使われ"
"ます。"

#: ../../library/sunaudio.rst:90
msgid ""
"This method retrieves status information like input and output volume, etc. "
"and returns it in the form of an audio status object. This object has no "
"methods but it contains a number of attributes describing the current device "
"status. The names and meanings of the attributes are described in ``<sun/"
"audioio.h>`` and in the :manpage:`audio(7I)` manual page.  Member names are "
"slightly different from their C counterparts: a status object is only a "
"single structure. Members of the :c:data:`play` substructure have ``o_`` "
"prepended to their name and members of the :c:data:`record` structure have "
"``i_``. So, the C member :c:data:`play.sample_rate` is accessed as :attr:"
"`o_sample_rate`, :c:data:`record.gain` as :attr:`i_gain` and :c:data:"
"`monitor_gain` plainly as :attr:`monitor_gain`."
msgstr ""
"このメソッドは入出力のボリューム値などの情報を引き出して、オーディオステータ"
"スのオブジェクト形式で返します。このオブジェクトには何もメソッドはありません"
"が、現在のデバイスの状態を示す多くの属性が含まれます。属性の名称と意味は "
"``<sun/audioio.h>`` と :manpage:`audio(7I)` に記載があります。メンバー名は相"
"当する C のものとは少し違っています：ステータスオブジェクトは１つの構造体で"
"す。その中の構造体である :c:data:`play` のメンバーには名前の初めに ``o_`` が"
"ついていて、 :c:data:`record` には ``i_`` がついています。そのため、C のメン"
"バーである :c:data:`play.sample_rate` は :attr:`o_sample_rate` として、 :c:"
"data:`record.gain` は :attr:`i_gain` として参照され、 :c:data:`monitor_gain` "
"はそのまま :attr:`monitor_gain` で参照されます。"

#: ../../library/sunaudio.rst:105
msgid ""
"This method returns the number of samples that are buffered on the recording "
"side, i.e. the program will not block on a :func:`read` call of so many "
"samples."
msgstr ""
"このメソッドは録音側でバッファリングされるサンプル数を返します。つまり、プロ"
"グラムは同じ大きさのサンプルに対する :func:`read` の呼び出しをブロックしませ"
"ん。"

#: ../../library/sunaudio.rst:111
msgid ""
"This method returns the number of samples buffered on the playback side. "
"Unfortunately, this number cannot be used to determine a number of samples "
"that can be written without blocking since the kernel output queue length "
"seems to be variable."
msgstr ""
"このメソッドは再生側でバッファリングされるサンプル数を返します。残念ながら、"
"この数値はブロックなしに書き込めるサンプル数を調べるのには使えません。という"
"のは、カーネルの出力キューの長さは可変だからです。"

#: ../../library/sunaudio.rst:119
msgid ""
"This method reads *size* samples from the audio input and returns them as a "
"Python string. The function blocks until enough data is available."
msgstr ""
"このメソッドはオーディオ入力から *size* のサイズのサンプルを読み込んで、"
"Python の文字列として返します。この関数は必要なデータが得られるまで他の操作を"
"ブロックします。"

#: ../../library/sunaudio.rst:125
msgid ""
"This method sets the audio device status parameters. The *status* parameter "
"is a device status object as returned by :func:`getinfo` and possibly "
"modified by the program."
msgstr ""

#: ../../library/sunaudio.rst:132
msgid ""
"Write is passed a Python string containing audio samples to be played. If "
"there is enough buffer space free it will immediately return, otherwise it "
"will block."
msgstr ""
"パラメータとしてオーディオサンプルを Python 文字列を受け取り、再生します。も"
"し十分なバッファの空きがあればすぐに制御が戻り、そうでないならブロックされま"
"す。"

#: ../../library/sunaudio.rst:135
msgid ""
"The audio device supports asynchronous notification of various events, "
"through the SIGPOLL signal.  Here's an example of how you might enable this "
"in Python::"
msgstr ""
"オーディオデバイスは SIGPOLL を介して様々なイベントの非同期通知に対応していま"
"す。 Python でこれをどのようにしたらできるか、例を挙げます： ::"

#: ../../library/sunaudio.rst:148
msgid ":mod:`SUNAUDIODEV` --- Constants used with :mod:`sunaudiodev`"
msgstr ":mod:`SUNAUDIODEV` --- :mod:`sunaudiodev` で使われる定数"

#: ../../library/sunaudio.rst:155
msgid "The :mod:`SUNAUDIODEV` module has been removed in Python 3."
msgstr ":mod:`SUNAUDIODEV` モジュールは Python 3 で削除されました。"

#: ../../library/sunaudio.rst:162
msgid ""
"This is a companion module to :mod:`sunaudiodev` which defines useful "
"symbolic constants like :const:`MIN_GAIN`, :const:`MAX_GAIN`, :const:"
"`SPEAKER`, etc. The names of the constants are the same names as used in the "
"C include file ``<sun/audioio.h>``, with the leading string ``AUDIO_`` "
"stripped."
msgstr ""
"これは :mod:`sunaudiodev` に付随するモジュールで、 :const:`MIN_GAIN` 、 :"
"const:`MAX_GAIN` 、 :const:`SPEAKER` などの便利なシンボル定数を定義していま"
"す。定数の名前は C の include ファイル ``<sun/audioio.h>`` のものと同じで、初"
"めの文字列 ``AUDIO_`` を除いたものです。"
