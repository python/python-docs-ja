# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2022
# souma987, 2023
# TENMYO Masakazu, 2024
# 石井明久, 2024
# Takanori Suzuki <takanori@takanory.net>, 2024
# Takeshi Nakazato, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:56+0000\n"
"Last-Translator: Takeshi Nakazato, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/collections.abc.rst:2
msgid ":mod:`!collections.abc` --- Abstract Base Classes for Containers"
msgstr ":mod:`!collections.abc` --- コンテナの抽象基底クラス"

#: ../../library/collections.abc.rst:10
msgid "Formerly, this module was part of the :mod:`collections` module."
msgstr "以前はこのモジュールは :mod:`collections` モジュールの一部でした。"

#: ../../library/collections.abc.rst:13
msgid "**Source code:** :source:`Lib/_collections_abc.py`"
msgstr "**ソースコード:** :source:`Lib/_collections_abc.py`"

#: ../../library/collections.abc.rst:23
msgid ""
"This module provides :term:`abstract base classes <abstract base class>` "
"that can be used to test whether a class provides a particular interface; "
"for example, whether it is :term:`hashable` or whether it is a :term:"
"`mapping`."
msgstr ""
"このモジュールは、 :term:`抽象基底クラス <abstract base class>` を提供しま"
"す。抽象基底クラスは、クラスが特定のインターフェースを提供しているか、例え"
"ば :term:`ハッシュ可能 <hashable>` であるかや :term:`マッピング <mapping>` で"
"あるかを判定します。"

#: ../../library/collections.abc.rst:27
msgid ""
"An :func:`issubclass` or :func:`isinstance` test for an interface works in "
"one of three ways."
msgstr ""
":func:`issubclass` や :func:`isinstance` を使ったインターフェースに対するテス"
"トは、以下の3つのいずれかの方法で動作します。"

#: ../../library/collections.abc.rst:30
msgid ""
"1) A newly written class can inherit directly from one of the abstract base "
"classes.  The class must supply the required abstract methods.  The "
"remaining mixin methods come from inheritance and can be overridden if "
"desired.  Other methods may be added as needed:"
msgstr ""
"1） 新しく定義したクラスは抽象基底クラスのいずれかを直接継承することができま"
"す。その場合クラスは必要な抽象メソッドを提供しなければなりません。残りのミッ"
"クスインメソッドは継承により引き継がれますが、必要ならオーバーライドすること"
"ができます。その他のメソッドは必要に応じて追加することができます:"

#: ../../library/collections.abc.rst:35
msgid ""
"class C(Sequence):                      # Direct inheritance\n"
"    def __init__(self): ...             # Extra method not required by the "
"ABC\n"
"    def __getitem__(self, index):  ...  # Required abstract method\n"
"    def __len__(self):  ...             # Required abstract method\n"
"    def count(self, value): ...         # Optionally override a mixin method"
msgstr ""
"class C(Sequence):                      # Direct inheritance\n"
"    def __init__(self): ...             # Extra method not required by the "
"ABC\n"
"    def __getitem__(self, index):  ...  # Required abstract method\n"
"    def __len__(self):  ...             # Required abstract method\n"
"    def count(self, value): ...         # Optionally override a mixin method"

#: ../../library/collections.abc.rst:43
msgid ""
">>> issubclass(C, Sequence)\n"
"True\n"
">>> isinstance(C(), Sequence)\n"
"True"
msgstr ""
">>> issubclass(C, Sequence)\n"
"True\n"
">>> isinstance(C(), Sequence)\n"
"True"

#: ../../library/collections.abc.rst:50
msgid ""
"2) Existing classes and built-in classes can be registered as \"virtual "
"subclasses\" of the ABCs.  Those classes should define the full API "
"including all of the abstract methods and all of the mixin methods. This "
"lets users rely on :func:`issubclass` or :func:`isinstance` tests to "
"determine whether the full interface is supported.  The exception to this "
"rule is for methods that are automatically inferred from the rest of the API:"
msgstr ""
"2） 既存のクラスや組み込みのクラスを \"仮想派生クラス\" として ABC に登録する"
"ことができます。これらのクラスは、全ての抽象メソッドとミックスインメソッドを"
"含む完全な API を定義する必要があります。これにより、そのクラスが完全なイン"
"ターフェースをサポートしているかどうかを、ユーザーが :func:`issubclass` や :"
"func:`isinstance` で判断できるようになります。このルールの例外は、残りの API "
"から自動的に推測ができるようなメソッドです:"

#: ../../library/collections.abc.rst:58
msgid ""
"class D:                                 # No inheritance\n"
"    def __init__(self): ...              # Extra method not required by the "
"ABC\n"
"    def __getitem__(self, index):  ...   # Abstract method\n"
"    def __len__(self):  ...              # Abstract method\n"
"    def count(self, value): ...          # Mixin method\n"
"    def index(self, value): ...          # Mixin method\n"
"\n"
"Sequence.register(D)                     # Register instead of inherit"
msgstr ""
"class D:                                 # No inheritance\n"
"    def __init__(self): ...              # Extra method not required by the "
"ABC\n"
"    def __getitem__(self, index):  ...   # Abstract method\n"
"    def __len__(self):  ...              # Abstract method\n"
"    def count(self, value): ...          # Mixin method\n"
"    def index(self, value): ...          # Mixin method\n"
"\n"
"Sequence.register(D)                     # Register instead of inherit"

#: ../../library/collections.abc.rst:69
msgid ""
">>> issubclass(D, Sequence)\n"
"True\n"
">>> isinstance(D(), Sequence)\n"
"True"
msgstr ""
">>> issubclass(D, Sequence)\n"
"True\n"
">>> isinstance(D(), Sequence)\n"
"True"

#: ../../library/collections.abc.rst:76
msgid ""
"In this example, class :class:`!D` does not need to define ``__contains__``, "
"``__iter__``, and ``__reversed__`` because the :ref:`in-operator "
"<comparisons>`, the :term:`iteration <iterable>` logic, and the :func:"
"`reversed` function automatically fall back to using ``__getitem__`` and "
"``__len__``."
msgstr ""
"この例では、クラス :class:`!D` は ``__contains__``, ``__iter__``, "
"``__reversed__`` を定義する必要がありません。なぜなら :ref:`in 演算子 "
"<comparisons>`, the :term:`反復 <iterable>` ロジック, および :func:"
"`reversed` 関数は自動的に ``__getitem__`` と ``__len__`` を使うようにフォール"
"バックするからです。"

#: ../../library/collections.abc.rst:82
msgid ""
"3) Some simple interfaces are directly recognizable by the presence of the "
"required methods (unless those methods have been set to :const:`None`):"
msgstr ""
"3） いくつかの単純なインターフェースは、必要なメソッドの存在だけで (それらの"
"メソッドが :const:`None` に設定されていなければ) 直接認識されます:"

#: ../../library/collections.abc.rst:86
msgid ""
"class E:\n"
"    def __iter__(self): ...\n"
"    def __next__(self): ..."
msgstr ""
"class E:\n"
"    def __iter__(self): ...\n"
"    def __next__(self): ..."

#: ../../library/collections.abc.rst:92
msgid ""
">>> issubclass(E, Iterable)\n"
"True\n"
">>> isinstance(E(), Iterable)\n"
"True"
msgstr ""
">>> issubclass(E, Iterable)\n"
"True\n"
">>> isinstance(E(), Iterable)\n"
"True"

#: ../../library/collections.abc.rst:99
msgid ""
"Complex interfaces do not support this last technique because an interface "
"is more than just the presence of method names.  Interfaces specify "
"semantics and relationships between methods that cannot be inferred solely "
"from the presence of specific method names.  For example, knowing that a "
"class supplies ``__getitem__``, ``__len__``, and ``__iter__`` is "
"insufficient for distinguishing a :class:`Sequence` from a :class:`Mapping`."
msgstr ""
"複雑なインターフェースは、単に特定のメソッドが存在すること以上の定義を持つた"
"め、3番目のテクニックをサポートしていません。それらのインターフェースはメソッ"
"ドの意味やメソッド間の関係まで指定するので、特定のメソッド名の存在からだけで"
"はインターフェースの推測ができません。たとえば、あるクラスが "
"``__getitem__``, ``__len__``, および ``__iter__`` を提供するというだけで"
"は、 :class:`Sequence` と :class:`Mapping` を区別するには不十分です。"

#: ../../library/collections.abc.rst:107
msgid ""
"These abstract classes now support ``[]``. See :ref:`types-genericalias` "
"and :pep:`585`."
msgstr ""
"これらの抽象クラスは ``[]`` をサポートするようになりました。 :ref:`types-"
"genericalias` および :pep:`585` を参照してください。"

#: ../../library/collections.abc.rst:114
msgid "Collections Abstract Base Classes"
msgstr "コレクション抽象基底クラス"

#: ../../library/collections.abc.rst:116
msgid ""
"The collections module offers the following :term:`ABCs <abstract base "
"class>`:"
msgstr ""
"collections モジュールは以下の :term:`ABC (抽象基底クラス) <abstract base "
"class>` を提供します:"

#: ../../library/collections.abc.rst:121
msgid "ABC"
msgstr "ABC"

#: ../../library/collections.abc.rst:121
msgid "Inherits from"
msgstr "継承しているクラス"

#: ../../library/collections.abc.rst:121
msgid "Abstract Methods"
msgstr "抽象メソッド"

#: ../../library/collections.abc.rst:121
msgid "Mixin Methods"
msgstr "mixin メソッド"

#: ../../library/collections.abc.rst:123
msgid ":class:`Container` [1]_"
msgstr ":class:`Container` [1]_"

#: ../../library/collections.abc.rst:123
msgid "``__contains__``"
msgstr "``__contains__``"

#: ../../library/collections.abc.rst:124
msgid ":class:`Hashable` [1]_"
msgstr ":class:`Hashable` [1]_"

#: ../../library/collections.abc.rst:124
msgid "``__hash__``"
msgstr "``__hash__``"

#: ../../library/collections.abc.rst:125
msgid ":class:`Iterable` [1]_ [2]_"
msgstr ":class:`Iterable` [1]_ [2]_"

#: ../../library/collections.abc.rst:125 ../../library/collections.abc.rst:126
msgid "``__iter__``"
msgstr "``__iter__``"

#: ../../library/collections.abc.rst:126
msgid ":class:`Iterator` [1]_"
msgstr ":class:`Iterator` [1]_"

#: ../../library/collections.abc.rst:126 ../../library/collections.abc.rst:127
msgid ":class:`Iterable`"
msgstr ":class:`Iterable`"

#: ../../library/collections.abc.rst:126
msgid "``__next__``"
msgstr "``__next__``"

#: ../../library/collections.abc.rst:127
msgid ":class:`Reversible` [1]_"
msgstr ":class:`Reversible` [1]_"

#: ../../library/collections.abc.rst:127
msgid "``__reversed__``"
msgstr "``__reversed__``"

#: ../../library/collections.abc.rst:128
msgid ":class:`Generator`  [1]_"
msgstr ":class:`Generator`  [1]_"

#: ../../library/collections.abc.rst:128
msgid ":class:`Iterator`"
msgstr ":class:`Iterator`"

#: ../../library/collections.abc.rst:128 ../../library/collections.abc.rst:176
msgid "``send``, ``throw``"
msgstr "``send``, ``throw``"

#: ../../library/collections.abc.rst:128
msgid "``close``, ``__iter__``, ``__next__``"
msgstr "``close``, ``__iter__``, ``__next__``"

#: ../../library/collections.abc.rst:129
msgid ":class:`Sized`  [1]_"
msgstr ":class:`Sized`  [1]_"

#: ../../library/collections.abc.rst:129 ../../library/collections.abc.rst:168
msgid "``__len__``"
msgstr "``__len__``"

#: ../../library/collections.abc.rst:130
msgid ":class:`Callable`  [1]_"
msgstr ":class:`Callable`  [1]_"

#: ../../library/collections.abc.rst:130
msgid "``__call__``"
msgstr "``__call__``"

#: ../../library/collections.abc.rst:131
msgid ":class:`Collection`  [1]_"
msgstr ":class:`Collection`  [1]_"

#: ../../library/collections.abc.rst:131
msgid ":class:`Sized`, :class:`Iterable`, :class:`Container`"
msgstr ":class:`Sized`, :class:`Iterable`, :class:`Container`"

#: ../../library/collections.abc.rst:131 ../../library/collections.abc.rst:147
msgid "``__contains__``, ``__iter__``, ``__len__``"
msgstr "``__contains__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:135 ../../library/collections.abc.rst:138
#: ../../library/collections.abc.rst:144
msgid ":class:`Sequence`"
msgstr ":class:`Sequence`"

#: ../../library/collections.abc.rst:135
msgid ":class:`Reversible`, :class:`Collection`"
msgstr ":class:`Reversible`, :class:`Collection`"

#: ../../library/collections.abc.rst:135 ../../library/collections.abc.rst:144
msgid "``__getitem__``, ``__len__``"
msgstr "``__getitem__``, ``__len__``"

#: ../../library/collections.abc.rst:135
msgid ""
"``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"
msgstr "``__contains__``, ``__iter__``, ``__reversed__``, ``index``, ``count``"

#: ../../library/collections.abc.rst:138
msgid ":class:`MutableSequence`"
msgstr ":class:`MutableSequence`"

#: ../../library/collections.abc.rst:138
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"

#: ../../library/collections.abc.rst:138
msgid ""
"Inherited :class:`Sequence` methods and ``append``, ``clear``, ``reverse``, "
"``extend``, ``pop``, ``remove``, and ``__iadd__``"
msgstr ""
":class:`Sequence` から継承したメソッドと、 ``append``, ``clear``, "
"``reverse``, ``extend``, ``pop``, ``remove``, ``__iadd__``"

#: ../../library/collections.abc.rst:144
msgid ":class:`ByteString`"
msgstr ":class:`ByteString`"

#: ../../library/collections.abc.rst:144
msgid "Inherited :class:`Sequence` methods"
msgstr ":class:`Sequence` から継承したメソッド"

#: ../../library/collections.abc.rst:147 ../../library/collections.abc.rst:151
msgid ":class:`Set`"
msgstr ":class:`Set`"

#: ../../library/collections.abc.rst:147 ../../library/collections.abc.rst:157
msgid ":class:`Collection`"
msgstr ":class:`Collection`"

#: ../../library/collections.abc.rst:147
msgid ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"
msgstr ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, ``isdisjoint``"

#: ../../library/collections.abc.rst:151
msgid ":class:`MutableSet`"
msgstr ":class:`MutableSet`"

#: ../../library/collections.abc.rst:151
msgid "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"
msgstr "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"

#: ../../library/collections.abc.rst:151
msgid ""
"Inherited :class:`Set` methods and ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"
msgstr ""
":class:`Set` から継承したメソッドと、 ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, ``__isub__``"

#: ../../library/collections.abc.rst:157 ../../library/collections.abc.rst:161
msgid ":class:`Mapping`"
msgstr ":class:`Mapping`"

#: ../../library/collections.abc.rst:157
msgid "``__getitem__``, ``__iter__``, ``__len__``"
msgstr "``__getitem__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:157
msgid ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, and "
"``__ne__``"
msgstr ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, "
"``__ne__``"

#: ../../library/collections.abc.rst:161
msgid ":class:`MutableMapping`"
msgstr ":class:`MutableMapping`"

#: ../../library/collections.abc.rst:161
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, ``__len__``"

#: ../../library/collections.abc.rst:161
msgid ""
"Inherited :class:`Mapping` methods and ``pop``, ``popitem``, ``clear``, "
"``update``, and ``setdefault``"
msgstr ""
":class:`Mapping` から継承したメソッドと、 ``pop``, ``popitem``, ``clear``, "
"``update``, ``setdefault``"

#: ../../library/collections.abc.rst:168
msgid ":class:`MappingView`"
msgstr ":class:`MappingView`"

#: ../../library/collections.abc.rst:168
msgid ":class:`Sized`"
msgstr ":class:`Sized`"

#: ../../library/collections.abc.rst:169
msgid ":class:`ItemsView`"
msgstr ":class:`ItemsView`"

#: ../../library/collections.abc.rst:169 ../../library/collections.abc.rst:171
msgid ":class:`MappingView`, :class:`Set`"
msgstr ":class:`MappingView`, :class:`Set`"

#: ../../library/collections.abc.rst:169 ../../library/collections.abc.rst:171
#: ../../library/collections.abc.rst:173
msgid "``__contains__``, ``__iter__``"
msgstr "``__contains__``, ``__iter__``"

#: ../../library/collections.abc.rst:171
msgid ":class:`KeysView`"
msgstr ":class:`KeysView`"

#: ../../library/collections.abc.rst:173
msgid ":class:`ValuesView`"
msgstr ":class:`ValuesView`"

#: ../../library/collections.abc.rst:173
msgid ":class:`MappingView`, :class:`Collection`"
msgstr ":class:`MappingView`, :class:`Collection`"

#: ../../library/collections.abc.rst:175
msgid ":class:`Awaitable` [1]_"
msgstr ":class:`Awaitable` [1]_"

#: ../../library/collections.abc.rst:175
msgid "``__await__``"
msgstr "``__await__``"

#: ../../library/collections.abc.rst:176
msgid ":class:`Coroutine` [1]_"
msgstr ":class:`Coroutine` [1]_"

#: ../../library/collections.abc.rst:176
msgid ":class:`Awaitable`"
msgstr ":class:`Awaitable`"

#: ../../library/collections.abc.rst:176
msgid "``close``"
msgstr "``close``"

#: ../../library/collections.abc.rst:177
msgid ":class:`AsyncIterable` [1]_"
msgstr ":class:`AsyncIterable` [1]_"

#: ../../library/collections.abc.rst:177 ../../library/collections.abc.rst:178
msgid "``__aiter__``"
msgstr "``__aiter__``"

#: ../../library/collections.abc.rst:178
msgid ":class:`AsyncIterator` [1]_"
msgstr ":class:`AsyncIterator` [1]_"

#: ../../library/collections.abc.rst:178
msgid ":class:`AsyncIterable`"
msgstr ":class:`AsyncIterable`"

#: ../../library/collections.abc.rst:178
msgid "``__anext__``"
msgstr "``__anext__``"

#: ../../library/collections.abc.rst:179
msgid ":class:`AsyncGenerator` [1]_"
msgstr ":class:`AsyncGenerator` [1]_"

#: ../../library/collections.abc.rst:179
msgid ":class:`AsyncIterator`"
msgstr ":class:`AsyncIterator`"

#: ../../library/collections.abc.rst:179
msgid "``asend``, ``athrow``"
msgstr "``asend``, ``athrow``"

#: ../../library/collections.abc.rst:179
msgid "``aclose``, ``__aiter__``, ``__anext__``"
msgstr "``aclose``, ``__aiter__``, ``__anext__``"

#: ../../library/collections.abc.rst:180
msgid ":class:`Buffer` [1]_"
msgstr ":class:`Buffer` [1]_"

#: ../../library/collections.abc.rst:180
msgid "``__buffer__``"
msgstr "``__buffer__``"

#: ../../library/collections.abc.rst:185
msgid "Footnotes"
msgstr "脚注"

#: ../../library/collections.abc.rst:186
msgid ""
"These ABCs override :meth:`~abc.ABCMeta.__subclasshook__` to support testing "
"an interface by verifying the required methods are present and have not been "
"set to :const:`None`.  This only works for simple interfaces.  More complex "
"interfaces require registration or direct subclassing."
msgstr ""
"これらの抽象基底クラスは :meth:`~abc.ABCMeta.__subclasshook__` をオーバーライ"
"ドして、必要なメソッドが存在し、かつ :const:`None` に指定されていないことを確"
"かめることによってインターフェースをテストすることをサポートします。このテス"
"トは単純なインターフェースに対してのみ有効に働きます。より複雑なインター"
"フェースは基底クラスへの登録や直接派生することが必要になります。"

#: ../../library/collections.abc.rst:192
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`~container.__iter__` method, but "
"it does not detect classes that iterate with the :meth:`~object.__getitem__` "
"method.  The only reliable way to determine whether an object is :term:"
"`iterable` is to call ``iter(obj)``."
msgstr ""
"``isinstance(obj, Iterable)`` によるチェックは :class:`Iterable` として登録さ"
"れたクラスや :meth:`~container.__iter__` メソッドを持つクラスを検出します"
"が、 :meth:`~object.__getitem__` メソッドにより反復処理を行うクラスは検出しま"
"せん。オブジェクトがイテラブル (:term:`iterable`) かどうかを確認する唯一の信"
"頼できる方法は ``iter(obj)`` を呼び出すことです。"

#: ../../library/collections.abc.rst:200
msgid "Collections Abstract Base Classes -- Detailed Descriptions"
msgstr "コレクションの抽象基底クラス -- 詳細な説明"

#: ../../library/collections.abc.rst:205
msgid "ABC for classes that provide the :meth:`~object.__contains__` method."
msgstr ":meth:`~object.__contains__` メソッドを提供するクラスの ABC です。"

#: ../../library/collections.abc.rst:209
msgid "ABC for classes that provide the :meth:`~object.__hash__` method."
msgstr ":meth:`~object.__hash__` メソッドを提供するクラスの ABC です。"

#: ../../library/collections.abc.rst:213
msgid "ABC for classes that provide the :meth:`~object.__len__` method."
msgstr ":meth:`~object.__len__` メソッドを提供するクラスの ABC です。"

#: ../../library/collections.abc.rst:217
msgid "ABC for classes that provide the :meth:`~object.__call__` method."
msgstr ":meth:`~object.__call__` メソッドを提供するクラスの ABC です。"

#: ../../library/collections.abc.rst:219
msgid ""
"See :ref:`annotating-callables` for details on how to use :class:`!Callable` "
"in type annotations."
msgstr ""
":class:`!Callable` を型アノテーションで使う方法の詳細は、 :ref:`annotating-"
"callables` を参照してください。"

#: ../../library/collections.abc.rst:224
msgid "ABC for classes that provide the :meth:`~container.__iter__` method."
msgstr ":meth:`~container.__iter__` メソッドを提供するクラスの ABC です。"

#: ../../library/collections.abc.rst:226
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are registered "
"as :class:`Iterable` or that have an :meth:`~container.__iter__` method, but "
"it does not detect classes that iterate with the :meth:`~object.__getitem__` "
"method. The only reliable way to determine whether an object is :term:"
"`iterable` is to call ``iter(obj)``."
msgstr ""
"``isinstance(obj, Iterable)`` によるチェックは :class:`Iterable` として登録さ"
"れたクラスや :meth:`~container.__iter__` メソッドを持つクラスを検出します"
"が、 :meth:`~object.__getitem__` メソッドにより反復処理を行うクラスは検出しま"
"せん。オブジェクトがイテラブル (:term:`iterable`) かどうかを確認する唯一の信"
"頼できる方法は ``iter(obj)`` を呼び出すことです。"

#: ../../library/collections.abc.rst:235
msgid "ABC for sized iterable container classes."
msgstr "サイズ付きのイテラブルなコンテナクラスの ABC です。"

#: ../../library/collections.abc.rst:241
msgid ""
"ABC for classes that provide the :meth:`~iterator.__iter__` and :meth:"
"`~iterator.__next__` methods.  See also the definition of :term:`iterator`."
msgstr ""
":meth:`~iterator.__iter__` メソッドと :meth:`~iterator.__next__` メソッドを提"
"供するクラスの ABC です。 :term:`iterator` の定義も参照してください。"

#: ../../library/collections.abc.rst:247
msgid ""
"ABC for iterable classes that also provide the :meth:`~object.__reversed__` "
"method."
msgstr ""
":meth:`~object.__reversed__` メソッドを提供するイテラブルクラスの ABC です。"

#: ../../library/collections.abc.rst:254
msgid ""
"ABC for :term:`generator` classes that implement the protocol defined in :"
"pep:`342` that extends :term:`iterators <iterator>` with the :meth:"
"`~generator.send`, :meth:`~generator.throw` and :meth:`~generator.close` "
"methods."
msgstr ""
":pep:`342` で定義された、:term:`イテレータ <iterator>` を :meth:`~generator."
"send`, :meth:`~generator.throw`, :meth:`~generator.close` の各メソッドに拡張"
"するプロトコルを実装する、:term:`ジェネレータ <generator>` クラスの ABC で"
"す。"

#: ../../library/collections.abc.rst:259
msgid ""
"See :ref:`annotating-generators-and-coroutines` for details on using :class:"
"`!Generator` in type annotations."
msgstr ""
":class:`!Generator` を型アノテーションで使う方法の詳細は、 :ref:`annotating-"
"generators-and-coroutines` を参照してください。"

#: ../../library/collections.abc.rst:268
msgid "ABCs for read-only and mutable :term:`sequences <sequence>`."
msgstr ""
"読み出し専用の :term:`シーケンス <sequence>` およびミュータブルな :term:`シー"
"ケンス <sequence>` の ABC です。"

#: ../../library/collections.abc.rst:270
msgid ""
"Implementation note: Some of the mixin methods, such as :meth:`~container."
"__iter__`, :meth:`~object.__reversed__` and :meth:`index`, make repeated "
"calls to the underlying :meth:`~object.__getitem__` method. Consequently, "
"if :meth:`~object.__getitem__` is implemented with constant access speed, "
"the mixin methods will have linear performance; however, if the underlying "
"method is linear (as it would be with a linked list), the mixins will have "
"quadratic performance and will likely need to be overridden."
msgstr ""
"実装における注意: :meth:`~container.__iter__`, :meth:`~object."
"__reversed__`, :meth:`index` など、一部の mixin メソッドは、下層の :meth:"
"`~object.__getitem__` メソッドを繰り返し呼び出します。その結果、:meth:"
"`~object.__getitem__` が定数のアクセス速度で実装されている場合、mixin メソッ"
"ドは線形のパフォーマンスとなります。下層のメソッドが線形 (リンクされたリスト"
"の場合など) の場合、mixin は 2 乗のパフォーマンスとなるため、多くの場合上書き"
"する必要があるでしょう。"

#: ../../library/collections.abc.rst:279
msgid "The index() method added support for *stop* and *start* arguments."
msgstr "index() メソッドは *stop* と *start* 引数をサポートしました。"

#: ../../library/collections.abc.rst:283
msgid ""
"The :class:`ByteString` ABC has been deprecated. For use in typing, prefer a "
"union, like ``bytes | bytearray``, or :class:`collections.abc.Buffer`. For "
"use as an ABC, prefer :class:`Sequence` or :class:`collections.abc.Buffer`."
msgstr ""
"ABCの :class:`ByteString` は非推奨になりました。型ヒントでは ``bytes | "
"bytearray`` のようなユニオン型または :class:`collections.abc.Buffer` を使用し"
"てください。ABCとしての場合は :class:`Sequence` または :class:`collections."
"abc.Buffer` を使用してください。"

#: ../../library/collections.abc.rst:292
msgid "ABCs for read-only and mutable :ref:`sets <types-set>`."
msgstr "読み出し専用でミュータブルな :ref:`集合 <types-set>` の ABC です。"

#: ../../library/collections.abc.rst:297
msgid "ABCs for read-only and mutable :term:`mappings <mapping>`."
msgstr ""
"読み出し専用の :term:`マッピング <mapping>` およびミュータブルな :term:`マッ"
"ピング <mapping>` の ABC です。"

#: ../../library/collections.abc.rst:304
msgid ""
"ABCs for mapping, items, keys, and values :term:`views <dictionary view>`."
msgstr ""
"マッピング、要素、キー、値の :term:`ビュー <dictionary view>` の ABC です。"

#: ../../library/collections.abc.rst:308
msgid ""
"ABC for :term:`awaitable` objects, which can be used in :keyword:`await` "
"expressions.  Custom implementations must provide the :meth:`~object."
"__await__` method."
msgstr ""
":keyword:`await` で使用できる :term:`awaitable` オブジェクトの ABC です。カス"
"タムの実装は、:meth:`~object.__await__` メソッドを提供しなければなりません。"

#: ../../library/collections.abc.rst:312
msgid ""
":term:`Coroutine <coroutine>` objects and instances of the :class:"
"`~collections.abc.Coroutine` ABC are all instances of this ABC."
msgstr ""
":class:`~collections.abc.Coroutine` ABC の :term:`Coroutine <coroutine>` オブ"
"ジェクトとインスタンスは、すべてこの ABC のインスタンスです。"

#: ../../library/collections.abc.rst:316
msgid ""
"In CPython, generator-based coroutines (:term:`generators <generator>` "
"decorated with :func:`@types.coroutine <types.coroutine>`) are *awaitables*, "
"even though they do not have an :meth:`~object.__await__` method. Using "
"``isinstance(gencoro, Awaitable)`` for them will return ``False``. Use :func:"
"`inspect.isawaitable` to detect them."
msgstr ""
"CPython では、ジェネレータベースのコルーチン (:func:`@types.coroutine <types."
"coroutine>` で修飾された :term:`ジェネレータ <generator>`) は、 :meth:"
"`~object.__await__` メソッドを持たないにもかかわらず*待機可能* "
"(*awaitables*) です。 ``isinstance(gencoro, Awaitable)`` はそのようなコルーチ"
"ンに対して ``False`` を返します。そのようなコルーチンを検出するためには :"
"func:`inspect.isawaitable` を使ってください。"

#: ../../library/collections.abc.rst:326
msgid ""
"ABC for :term:`coroutine` compatible classes.  These implement the following "
"methods, defined in :ref:`coroutine-objects`: :meth:`~coroutine.send`, :meth:"
"`~coroutine.throw`, and :meth:`~coroutine.close`.  Custom implementations "
"must also implement :meth:`~object.__await__`.  All :class:`Coroutine` "
"instances are also instances of :class:`Awaitable`."
msgstr ""
":term:`コルーチン <coroutine>` と互換性のあるクラスの ABC です。これらは、:"
"ref:`coroutine-objects` で定義された :meth:`~coroutine.send`, :meth:"
"`~coroutine.throw`, :meth:`~coroutine.close` のメソッドを実装します。カスタム"
"の実装は、:meth:`~object.__await__` も実装しなければなりません。:class:"
"`Coroutine` のすべてのインスタンスは、 :class:`Awaitable` のインスタンスでも"
"あります。"

#: ../../library/collections.abc.rst:334
msgid ""
"In CPython, generator-based coroutines (:term:`generators <generator>` "
"decorated with :func:`@types.coroutine <types.coroutine>`) are *awaitables*, "
"even though they do not have an :meth:`~object.__await__` method. Using "
"``isinstance(gencoro, Coroutine)`` for them will return ``False``. Use :func:"
"`inspect.isawaitable` to detect them."
msgstr ""
"CPython では、ジェネレータベースのコルーチン (:func:`@types.coroutine <types."
"coroutine>` で修飾された :term:`ジェネレータ <generator>`) は、 :meth:"
"`~object.__await__` メソッドを持たないにもかかわらず*待機可能* "
"(*awaitables*) です。 ``isinstance(gencoro, Coroutine)`` はそのようなコルーチ"
"ンに対して ``False`` を返します。そのようなコルーチンを検出するためには :"
"func:`inspect.isawaitable` を使ってください。"

#: ../../library/collections.abc.rst:340
msgid ""
"See :ref:`annotating-generators-and-coroutines` for details on using :class:"
"`!Coroutine` in type annotations. The variance and order of type parameters "
"correspond to those of :class:`Generator`."
msgstr ""

#: ../../library/collections.abc.rst:349
msgid ""
"ABC for classes that provide an ``__aiter__`` method.  See also the "
"definition of :term:`asynchronous iterable`."
msgstr ""
"``__aiter__`` メソッドを提供するクラスの ABC です。:term:`asynchronous "
"iterable` の定義も参照してください。"

#: ../../library/collections.abc.rst:356
msgid ""
"ABC for classes that provide ``__aiter__`` and ``__anext__`` methods.  See "
"also the definition of :term:`asynchronous iterator`."
msgstr ""
"``__aiter__`` および ``__anext__`` メソッドを提供するクラスの ABC です。:"
"term:`asynchronous iterator` の定義も参照してください。"

#: ../../library/collections.abc.rst:363
msgid ""
"ABC for :term:`asynchronous generator` classes that implement the protocol "
"defined in :pep:`525` and :pep:`492`."
msgstr ""
":pep:`525` と :pep:`492` に定義されているプロトコルを実装した :term:`非同期"
"ジェネレータ <asynchronous generator>`  クラスの ABC です。"

#: ../../library/collections.abc.rst:366
msgid ""
"See :ref:`annotating-generators-and-coroutines` for details on using :class:"
"`!AsyncGenerator` in type annotations."
msgstr ""

#: ../../library/collections.abc.rst:373
msgid ""
"ABC for classes that provide the :meth:`~object.__buffer__` method, "
"implementing the :ref:`buffer protocol <bufferobjects>`. See :pep:`688`."
msgstr ""
":ref:`buffer protocol <bufferobjects>` を実装する :meth:`~object.__buffer__` "
"メソッドを提供するクラスのABCです。:pep:`688` を参照してください。"

#: ../../library/collections.abc.rst:379
msgid "Examples and Recipes"
msgstr "例とレシピ"

#: ../../library/collections.abc.rst:381
msgid ""
"ABCs allow us to ask classes or instances if they provide particular "
"functionality, for example::"
msgstr ""
"抽象基底クラスは、クラスやインスタンスが特定の機能を提供しているかどうかを調"
"べることを可能にします。例えば::"

#: ../../library/collections.abc.rst:384
msgid ""
"size = None\n"
"if isinstance(myvar, collections.abc.Sized):\n"
"    size = len(myvar)"
msgstr ""
"size = None\n"
"if isinstance(myvar, collections.abc.Sized):\n"
"    size = len(myvar)"

#: ../../library/collections.abc.rst:388
msgid ""
"Several of the ABCs are also useful as mixins that make it easier to develop "
"classes supporting container APIs.  For example, to write a class supporting "
"the full :class:`Set` API, it is only necessary to supply the three "
"underlying abstract methods: :meth:`~object.__contains__`, :meth:`~container."
"__iter__`, and :meth:`~object.__len__`. The ABC supplies the remaining "
"methods such as :meth:`!__and__` and :meth:`~frozenset.isdisjoint`::"
msgstr ""
"幾つかの ABC はコンテナ型 API を提供するクラスを開発するのを助ける mixin 型と"
"しても使えます。例えば、 :class:`Set` API を提供するクラスを作る場合、3つの基"
"本になる抽象メソッド :meth:`~object.__contains__`, :meth:`~container."
"__iter__`, :meth:`~object.__len__` だけが必要です。ABC が残りの :meth:`!"
"__and__` や :meth:`~frozenset.isdisjoint` といったメソッドを提供します::"

#: ../../library/collections.abc.rst:395
msgid ""
"class ListBasedSet(collections.abc.Set):\n"
"    ''' Alternate set implementation favoring space over speed\n"
"        and not requiring the set elements to be hashable. '''\n"
"    def __init__(self, iterable):\n"
"        self.elements = lst = []\n"
"        for value in iterable:\n"
"            if value not in lst:\n"
"                lst.append(value)\n"
"\n"
"    def __iter__(self):\n"
"        return iter(self.elements)\n"
"\n"
"    def __contains__(self, value):\n"
"        return value in self.elements\n"
"\n"
"    def __len__(self):\n"
"        return len(self.elements)\n"
"\n"
"s1 = ListBasedSet('abcdef')\n"
"s2 = ListBasedSet('defghi')\n"
"overlap = s1 & s2            # The __and__() method is supported "
"automatically"
msgstr ""
"class ListBasedSet(collections.abc.Set):\n"
"    ''' Alternate set implementation favoring space over speed\n"
"        and not requiring the set elements to be hashable. '''\n"
"    def __init__(self, iterable):\n"
"        self.elements = lst = []\n"
"        for value in iterable:\n"
"            if value not in lst:\n"
"                lst.append(value)\n"
"\n"
"    def __iter__(self):\n"
"        return iter(self.elements)\n"
"\n"
"    def __contains__(self, value):\n"
"        return value in self.elements\n"
"\n"
"    def __len__(self):\n"
"        return len(self.elements)\n"
"\n"
"s1 = ListBasedSet('abcdef')\n"
"s2 = ListBasedSet('defghi')\n"
"overlap = s1 & s2            # The __and__() method is supported "
"automatically"

#: ../../library/collections.abc.rst:417
msgid "Notes on using :class:`Set` and :class:`MutableSet` as a mixin:"
msgstr ""
":class:`Set` と :class:`MutableSet` を mixin 型として利用するときの注意点:"

#: ../../library/collections.abc.rst:420
msgid ""
"Since some set operations create new sets, the default mixin methods need a "
"way to create new instances from an :term:`iterable`. The class constructor "
"is assumed to have a signature in the form ``ClassName(iterable)``. That "
"assumption is factored-out to an internal :class:`classmethod` called :meth:"
"`!_from_iterable` which calls ``cls(iterable)`` to produce a new set. If "
"the :class:`Set` mixin is being used in a class with a different constructor "
"signature, you will need to override :meth:`!_from_iterable` with a "
"classmethod or regular method that can construct new instances from an "
"iterable argument."
msgstr ""
"幾つかの set の操作は新しい set を作るので、デフォルトの mixin メソッドは :"
"term:`イテラブル <iterable>` から新しいインスタンスを作成する方法を必要としま"
"す。クラスのコンストラクタは ``ClassName(iterable)`` の形のシグネチャを持つと"
"仮定されます。内部の :meth:`!_from_iterable` という :class:`classmethod` が "
"``cls(iterable)`` を呼び出して新しい set を作る部分でこの仮定が使われていま"
"す。コンストラクタのシグネチャが異なるクラスで :class:`Set` を使う場合は、 "
"iterable 引数から新しいインスタンスを生成できるクラスメソッドあるいは仕様に"
"沿ったメソッドで :meth:`!_from_iterable` をオーバーライドする必要があります。"

#: ../../library/collections.abc.rst:431
msgid ""
"To override the comparisons (presumably for speed, as the semantics are "
"fixed), redefine :meth:`~object.__le__` and :meth:`~object.__ge__`, then the "
"other operations will automatically follow suit."
msgstr ""
"(たぶん意味はそのままに速度を向上する目的で)比較をオーバーライドする場合、 :"
"meth:`~object.__le__` と :meth:`~object.__ge__` だけを再定義すれば、その他の"
"演算は自動的に追随します。"

#: ../../library/collections.abc.rst:437
msgid ""
"The :class:`Set` mixin provides a :meth:`!_hash` method to compute a hash "
"value for the set; however, :meth:`~object.__hash__` is not defined because "
"not all sets are :term:`hashable` or immutable.  To add set hashability "
"using mixins, inherit from both :meth:`Set` and :meth:`Hashable`, then "
"define ``__hash__ = Set._hash``."
msgstr ""
":class:`Set` mixin型は set のハッシュ値を計算する :meth:`!_hash` メソッドを提"
"供しますが、すべての set が :term:`hashable` や immutable とは限らないの"
"で、 :meth:`~object.__hash__` は提供しません。 mixin を使ってハッシュ可能な "
"set を作る場合は、 :class:`Set` と :meth:`Hashable` の両方を継承して、 "
"``__hash__ = Set._hash`` と定義してください。"

#: ../../library/collections.abc.rst:445
msgid ""
"`OrderedSet recipe <https://code.activestate.com/recipes/576694/>`_ for an "
"example built on :class:`MutableSet`."
msgstr ""
":class:`MutableSet` を使った例として `OrderedSet recipe <https://code."
"activestate.com/recipes/576694/>`_。"

#: ../../library/collections.abc.rst:448
msgid "For more about ABCs, see the :mod:`abc` module and :pep:`3119`."
msgstr ""
"ABCs についての詳細は、 :mod:`abc` モジュールと :pep:`3119` を参照してくださ"
"い。"
