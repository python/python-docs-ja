# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.generator.rst:2
msgid ":mod:`email.generator`: Generating MIME documents"
msgstr ":mod:`email.generator`: MIME 文書を生成する"

#: ../../library/email.generator.rst:8
msgid ""
"One of the most common tasks is to generate the flat text of the email "
"message represented by a message object structure.  You will need to do this "
"if you want to send your message via the :mod:`smtplib` module or the :mod:"
"`nntplib` module, or print the message on the console.  Taking a message "
"object structure and producing a flat text document is the job of the :class:"
"`Generator` class."
msgstr ""
"よくある作業のひとつは、メッセージオブジェクト構造からフラットな電子メールテ"
"キストを生成することです。この作業は :mod:`smtplib` や :mod:`nntplib` モ"
"ジュールを使ってメッセージを送信したり、メッセージをコンソールに出力したりす"
"るときに必要になります。あるメッセージオブジェクト構造をとってきて、そこから"
"フラットなテキスト文書を生成するのは :class:`Generator` クラスの仕事です。"

#: ../../library/email.generator.rst:14
msgid ""
"Again, as with the :mod:`email.parser` module, you aren't limited to the "
"functionality of the bundled generator; you could write one from scratch "
"yourself.  However the bundled generator knows how to generate most email in "
"a standards-compliant way, should handle MIME and non-MIME email messages "
"just fine, and is designed so that the transformation from flat text, to a "
"message structure via the :class:`~email.parser.Parser` class, and back to "
"flat text, is idempotent (the input is identical to the output) [#]_.  On "
"the other hand, using the Generator on a :class:`~email.message.Message` "
"constructed by program may result in changes to the :class:`~email.message."
"Message` object as defaults are filled in."
msgstr ""
"繰り返しになりますが、 :mod:`email.parser` モジュールと同じく、この機能はここ"
"での定義済みジェネレータに制限されるわけではありません。これらはご自身でゼロ"
"から作りあげることもできます。しかしながら、定義済みのジェネレータはほとんど"
"の電子メールを標準に沿ったやり方で生成する方法を知っていますし、MIME メッセー"
"ジも非 MIME メッセージもとても上手く扱えます。さらにこれはフラットなテキスト"
"から :class:`~email.parser.Parser` クラスを使ってメッセージ構造に変換し、それ"
"をまたフラットなテキストに戻しても、結果が冪等 (入力が出力と同じになる) [#]_ "
"になるよう設計されています。一方で、プログラムによって構成された :class:"
"`~email.message.Message` のジェネレータを使う場合、デフォルトの挿入によって :"
"class:`~email.message.Message` オブジェクトを変えてしまうかもしれません。"

#: ../../library/email.generator.rst:25
msgid ""
"Here are the public methods of the :class:`Generator` class, imported from "
"the :mod:`email.generator` module:"
msgstr ""
":mod:`email.generator` モジュールからインポートされる :class:`Generator` クラ"
"スで公開されているメソッドには、以下のようなものがあります:"

#: ../../library/email.generator.rst:31
msgid ""
"The constructor for the :class:`Generator` class takes a file-like object "
"called *outfp* for an argument.  *outfp* must support the :meth:`write` "
"method and be usable as the output file in a Python extended print statement."
msgstr ""
":class:`Generator` クラスのコンストラクタは *outfp* と呼ばれるストリーム形式 "
"(file-like) のオブジェクトひとつを引数にとります。 *outfp* は :meth:`write` "
"メソッドをサポートし、 Python 拡張 print 文の出力ファイルとして使えるように"
"なっている必要があります。"

#: ../../library/email.generator.rst:35
msgid ""
"Optional *mangle_from_* is a flag that, when ``True``, puts a ``>`` "
"character in front of any line in the body that starts exactly as ``From``, "
"i.e. ``From`` followed by a space at the beginning of the line.  This is the "
"only guaranteed portable way to avoid having such lines be mistaken for a "
"Unix mailbox format envelope header separator (see `WHY THE CONTENT-LENGTH "
"FORMAT IS BAD <https://www.jwz.org/doc/content-length.html>`_ for details).  "
"*mangle_from_* defaults to ``True``, but you might want to set this to "
"``False`` if you are not writing Unix mailbox format files."
msgstr ""
"オプション引数 *mangle_from_* はフラグで、``True`` のときはメッセージ本体の行"
"で厳密に ``From`` で始まるもの、つまり行の先頭が ``From`` でその後に空白が続"
"く行の前に ``>`` という文字を挿入します。これは、このような行が Unix の "
"mailbox 形式のエンペローブヘッダ区切り文字列として誤認識されるのを防ぐため"
"の、移植性ある唯一の方法です (詳しくは `WHY THE CONTENT-LENGTH FORMAT IS BAD "
"(なぜ Content-Length 形式が有害か) <https://www.jwz.org/doc/content-length."
"html>`_ を参照してください)。デフォルトでは *mangle_from_* は ``True`` になっ"
"ていますが、Unix の mailbox 形式ファイルに出力しないのならばこれは ``False`` "
"に設定してもかまいません。"

#: ../../library/email.generator.rst:44
msgid ""
"Optional *maxheaderlen* specifies the longest length for a non-continued "
"header. When a header line is longer than *maxheaderlen* (in characters, "
"with tabs expanded to 8 spaces), the header will be split as defined in the :"
"class:`~email.header.Header` class.  Set to zero to disable header wrapping. "
"The default is 78, as recommended (but not required) by :rfc:`2822`."
msgstr ""
"オプション引数 *maxheaderlen* は連続していないヘッダの最大長を指定します。ひ"
"とつのヘッダ行が *maxheaderlen* (これは文字数です、tab は空白 8文字に展開され"
"ます) よりも長い場合、ヘッダは :class:`~email.header.Header` クラスで定義され"
"ているように途中で折り返され、間にはセミコロンが挿入されます。もしセミコロン"
"が見つからない場合、そのヘッダは放置されます。ヘッダの折り返しを禁止するには"
"この値にゼロを指定してください。デフォルトは 78 文字で、 :rfc:`2822` で推奨さ"
"れている (ですが強制ではありません) 値です。"

#: ../../library/email.generator.rst:50
msgid "The other public :class:`Generator` methods are:"
msgstr "これ以外のパブリックな :class:`Generator` メソッドは以下のとおりです:"

#: ../../library/email.generator.rst:55
msgid ""
"Print the textual representation of the message object structure rooted at "
"*msg* to the output file specified when the :class:`Generator` instance was "
"created.  Subparts are visited depth-first and the resulting text will be "
"properly MIME encoded."
msgstr ""
"*msg* を基点とするメッセージオブジェクト構造体の文字表現を出力します。出力先"
"のファイルにはこの :class:`Generator` インスタンスが作成されたときに指定され"
"たものが使われます。各 subpart は深さ優先順序 (depth-first) で出力され、得ら"
"れるテキストは適切に MIME エンコードされたものになっています。"

#: ../../library/email.generator.rst:60
msgid ""
"Optional *unixfrom* is a flag that forces the printing of the envelope "
"header delimiter before the first :rfc:`2822` header of the root message "
"object.  If the root object has no envelope header, a standard one is "
"crafted.  By default, this is set to ``False`` to inhibit the printing of "
"the envelope delimiter."
msgstr ""
"オプション引数 *unixfrom* は、基点となるメッセージオブジェクトの最初の :rfc:"
"`2822` ヘッダが現れる前に、エンペローブヘッダ区切り文字列を出力することを強制"
"するフラグです。そのメッセージオブジェクトがエンペローブヘッダをもたない場"
"合、標準的なエンペローブヘッダが自動的に作成されます。デフォルトではこの値は "
"``False`` に設定されており、エンペローブヘッダ区切り文字列は出力されません。"

#: ../../library/email.generator.rst:66
msgid "Note that for subparts, no envelope header is ever printed."
msgstr "注意: 各 subpart に関しては、エンペローブヘッダは出力されません。"

#: ../../library/email.generator.rst:73
msgid ""
"Return an independent clone of this :class:`Generator` instance with the "
"exact same options."
msgstr ""
"この :class:`Generator` インスタンスの独立したクローンを生成し返します。オプ"
"ションはすべて同一になっています。"

#: ../../library/email.generator.rst:81
msgid ""
"Write the string *s* to the underlying file object, i.e. *outfp* passed to :"
"class:`Generator`'s constructor.  This provides just enough file-like API "
"for :class:`Generator` instances to be used in extended print statements."
msgstr ""
"文字列 *s* を既定のファイルに出力します。ここでいう出力先は :class:"
"`Generator` コンストラクタに渡した *outfp* のことをさします。この関数はただ単"
"に拡張 print 文で使われる :class:`Generator` インスタンスに対してファイル操作"
"風の API を提供するためだけのものです。"

#: ../../library/email.generator.rst:85
msgid ""
"As a convenience, see the methods :meth:`Message.as_string` and "
"``str(aMessage)``, a.k.a. :meth:`Message.__str__`, which simplify the "
"generation of a formatted string representation of a message object.  For "
"more detail, see :mod:`email.message`."
msgstr ""
"ユーザの便宜をはかるため、メソッド :meth:`Message.as_string` と "
"``str(aMessage)`` (つまり :meth:`Message.__str__` のことです) をつかえばメッ"
"セージオブジェクトを特定の書式でフォーマットされた文字列に簡単に変換すること"
"ができます。詳細は :mod:`email.message` を参照してください。"

#: ../../library/email.generator.rst:90
msgid ""
"The :mod:`email.generator` module also provides a derived class, called :"
"class:`DecodedGenerator` which is like the :class:`Generator` base class, "
"except that non-\\ :mimetype:`text` parts are substituted with a format "
"string representing the part."
msgstr ""
":mod:`email.generator` モジュールはひとつの派生クラスも提供しています。これ"
"は :class:`DecodedGenerator` と呼ばれるもので、 :class:`Generator` 基底クラス"
"と似ていますが、非 :mimetype:`text` 型の subpart を特定の書式でフォーマットさ"
"れた表現形式で置きかえるところが違っています。"

#: ../../library/email.generator.rst:98
msgid ""
"This class, derived from :class:`Generator` walks through all the subparts "
"of a message.  If the subpart is of main type :mimetype:`text`, then it "
"prints the decoded payload of the subpart. Optional *_mangle_from_* and "
"*maxheaderlen* are as with the :class:`Generator` base class."
msgstr ""
"このクラスは :class:`Generator` から派生したもので、メッセージの subpart をす"
"べて渡り歩きます。subpart の主形式が :mimetype:`text` だった場合、これはその "
"subpart のペイロードをデコードして出力します。オプション引数 *_mangle_from_* "
"および *maxheaderlen* の意味は基底クラス :class:`Generator` のそれと同じで"
"す。"

#: ../../library/email.generator.rst:103
msgid ""
"If the subpart is not of main type :mimetype:`text`, optional *fmt* is a "
"format string that is used instead of the message payload. *fmt* is expanded "
"with the following keywords, ``%(keyword)s`` format:"
msgstr ""
"Subpart の主形式が :mimetype:`text` ではない場合、オプション引数 *fmt* がその"
"メッセージペイロードのかわりのフォーマット文字列として使われます。 *fmt* は "
"``%(keyword)s`` のような形式を展開し、以下のキーワードを認識します:"

#: ../../library/email.generator.rst:107
msgid "``type`` -- Full MIME type of the non-\\ :mimetype:`text` part"
msgstr "``type`` -- 非 :mimetype:`text` 型 subpart の MIME 形式"

#: ../../library/email.generator.rst:109
msgid "``maintype`` -- Main MIME type of the non-\\ :mimetype:`text` part"
msgstr ""
"``maintype`` -- 非 :mimetype:`text` 型 subpart の MIME 主形式 (maintype)"

#: ../../library/email.generator.rst:111
msgid "``subtype`` -- Sub-MIME type of the non-\\ :mimetype:`text` part"
msgstr "``subtype`` -- 非 :mimetype:`text` 型 subpart の MIME 副形式 (subtype)"

#: ../../library/email.generator.rst:113
msgid "``filename`` -- Filename of the non-\\ :mimetype:`text` part"
msgstr "``filename`` -- 非 :mimetype:`text` 型 subpart のファイル名"

#: ../../library/email.generator.rst:115
msgid ""
"``description`` -- Description associated with the non-\\ :mimetype:`text` "
"part"
msgstr ""
"``description`` -- 非 :mimetype:`text` 型 subpart につけられた説明文字列"

#: ../../library/email.generator.rst:117
msgid ""
"``encoding`` -- Content transfer encoding of the non-\\ :mimetype:`text` part"
msgstr ""
"``encoding`` -- 非 :mimetype:`text` 型 subpart の Content-transfer-encoding"

#: ../../library/email.generator.rst:119
msgid "The default value for *fmt* is ``None``, meaning ::"
msgstr ""
"*fmt* のデフォルト値は ``None`` です。こうすると以下の形式で出力します ::"

#: ../../library/email.generator.rst:125
msgid "The previously deprecated method :meth:`__call__` was removed."
msgstr "以前の非推奨メソッド :meth:`__call__` は削除されました。"

#: ../../library/email.generator.rst:130
msgid "Footnotes"
msgstr "注記"

#: ../../library/email.generator.rst:131
msgid ""
"This statement assumes that you use the appropriate setting for the "
"``unixfrom`` argument, and that you set maxheaderlen=0 (which will preserve "
"whatever the input line lengths were).  It is also not strictly true, since "
"in many cases runs of whitespace in headers are collapsed into single "
"blanks.  The latter is a bug that will eventually be fixed."
msgstr ""
"ここではあなたが ``unixfrom`` 引数に適切な設定を使い、 maxheaderlen=0 (入力行"
"がどんな長さでも元のものを維持します) をセットしていることを前提にしていま"
"す。これでもなお厳密には正しくありません。多くの場合ヘッダの連続する空白が単"
"一の空白に置き換えられるからです。これはいずれは修正されるべきバグです。"
