# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Arihiro TAKASE, 2023
# Takanori Suzuki <takanori@takanory.net>, 2024
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:05+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/faulthandler.rst:2
msgid ":mod:`!faulthandler` --- Dump the Python traceback"
msgstr ":mod:`!faulthandler` --- Python トレースバックをダンプする"

#: ../../library/faulthandler.rst:11
msgid ""
"This module contains functions to dump Python tracebacks explicitly, on a "
"fault, after a timeout, or on a user signal. Call :func:`faulthandler."
"enable` to install fault handlers for the :const:`~signal.SIGSEGV`, :const:"
"`~signal.SIGFPE`, :const:`~signal.SIGABRT`, :const:`~signal.SIGBUS`, and :"
"const:`~signal.SIGILL` signals. You can also enable them at startup by "
"setting the :envvar:`PYTHONFAULTHANDLER` environment variable or by using "
"the :option:`-X` ``faulthandler`` command line option."
msgstr ""
"このモジュールは、例外発生時、タイムアウト時、ユーザシグナルの発生時などのタ"
"イミングでpython tracebackを明示的にダンプするための関数を含んでいます。これ"
"らのシグナル、:const:`~signal.SIGSEGV`、:const:`~signal.SIGFPE`、:const:"
"`~signal.SIGABRT`、:const:`~signal.SIGBUS`、:const:`~signal.SIGILL` に対する"
"フォールトハンドラをインストールするには :func:`faulthandler.enable` を実行し"
"てください。python起動時に有効にするには環境変数 :envvar:"
"`PYTHONFAULTHANDLER` を設定するか、コマンドライン引数に :option:`-X` "
"``faulthandler`` を指定してください。"

#: ../../library/faulthandler.rst:19
msgid ""
"The fault handler is compatible with system fault handlers like Apport or "
"the Windows fault handler. The module uses an alternative stack for signal "
"handlers if the :c:func:`!sigaltstack` function is available. This allows it "
"to dump the traceback even on a stack overflow."
msgstr ""
"Pythonのフォールトハンドラは、apportやWindowsのフォールトハンドラのようなシス"
"テムフォールトハンドラと互換性があります。このモジュールは :c:func:`!"
"sigaltstack` 関数が使用可能であればシグナルハンドラ用に代替スタックを利用しま"
"す。これによってスタックオーバーフロー時にもトレースバックを出力することがで"
"きます。"

#: ../../library/faulthandler.rst:24
msgid ""
"The fault handler is called on catastrophic cases and therefore can only use "
"signal-safe functions (e.g. it cannot allocate memory on the heap). Because "
"of this limitation traceback dumping is minimal compared to normal Python "
"tracebacks:"
msgstr ""
"フォールトハンドラは絶望的なケースで呼び出されます。そのためシグナルセーフな"
"関数しか使うことができません (例: ヒープメモリ上にメモリ確保はできません)。こ"
"の制限により、tracebackのダンプ機能は通常のPythonのtracebackと比べてごく僅か"
"なものです:"

#: ../../library/faulthandler.rst:29
msgid ""
"Only ASCII is supported. The ``backslashreplace`` error handler is used on "
"encoding."
msgstr ""
"ASCIIのみサポートされます。エンコード時には ``backslashreplace`` エラーハンド"
"ラを使用します。"

#: ../../library/faulthandler.rst:31
msgid "Each string is limited to 500 characters."
msgstr "すべての文字列は500文字以内に制限されています。"

#: ../../library/faulthandler.rst:32
msgid ""
"Only the filename, the function name and the line number are displayed. (no "
"source code)"
msgstr ""
"ファイル名、関数名、行数のみ表示します。(ソースコードの表示はありません)"

#: ../../library/faulthandler.rst:34
msgid "It is limited to 100 frames and 100 threads."
msgstr "100フレーム、100スレッドに制限されています。"

#: ../../library/faulthandler.rst:35
msgid "The order is reversed: the most recent call is shown first."
msgstr "順番は保持されます: 最新の呼び出しが最初に表示されます。"

#: ../../library/faulthandler.rst:37
msgid ""
"By default, the Python traceback is written to :data:`sys.stderr`. To see "
"tracebacks, applications must be run in the terminal. A log file can "
"alternatively be passed to :func:`faulthandler.enable`."
msgstr ""
"デフォルトでは、Pythonのtracebackは :data:`sys.stderr` に書き出されます。"
"tracebackを見るには、対象アプリケーションはターミナル上で実行しなければなりま"
"せん。 :func:`faulthandler.enable` に渡す引数によってログファイルを指定するこ"
"とができます。"

#: ../../library/faulthandler.rst:41
msgid ""
"The module is implemented in C, so tracebacks can be dumped on a crash or "
"when Python is deadlocked."
msgstr ""
"モジュールはC言語で実装されているので、アプリのクラッシュ時でもPythonがデッド"
"ロックした場合でもダンプができます。"

#: ../../library/faulthandler.rst:44
msgid ""
"The :ref:`Python Development Mode <devmode>` calls :func:`faulthandler."
"enable` at Python startup."
msgstr ""

#: ../../library/faulthandler.rst:49
msgid "Module :mod:`pdb`"
msgstr ""

#: ../../library/faulthandler.rst:50
msgid "Interactive source code debugger for Python programs."
msgstr ""

#: ../../library/faulthandler.rst:52
msgid "Module :mod:`traceback`"
msgstr ":mod:`traceback` モジュール"

#: ../../library/faulthandler.rst:53
msgid ""
"Standard interface to extract, format and print stack traces of Python "
"programs."
msgstr ""

#: ../../library/faulthandler.rst:56
msgid "Dumping the traceback"
msgstr "tracebackのダンプ"

#: ../../library/faulthandler.rst:60
msgid ""
"Dump the tracebacks of all threads into *file*. If *all_threads* is "
"``False``, dump only the current thread."
msgstr ""
"全スレッドのtracebackを *file* へダンプします。もし *all_threads* が "
"``False`` であれば、現在のスレッドのみダンプします。"

#: ../../library/faulthandler.rst:63
msgid ""
":func:`traceback.print_tb`, which can be used to print a traceback object."
msgstr ""

#: ../../library/faulthandler.rst:65 ../../library/faulthandler.rst:84
#: ../../library/faulthandler.rst:123 ../../library/faulthandler.rst:148
msgid "Added support for passing file descriptor to this function."
msgstr ""

#: ../../library/faulthandler.rst:70
msgid "Fault handler state"
msgstr "フォールトハンドラの状態"

#: ../../library/faulthandler.rst:74
msgid ""
"Enable the fault handler: install handlers for the :const:`~signal."
"SIGSEGV`, :const:`~signal.SIGFPE`, :const:`~signal.SIGABRT`, :const:`~signal."
"SIGBUS` and :const:`~signal.SIGILL` signals to dump the Python traceback. If "
"*all_threads* is ``True``, produce tracebacks for every running thread. "
"Otherwise, dump only the current thread."
msgstr ""

#: ../../library/faulthandler.rst:81
msgid ""
"The *file* must be kept open until the fault handler is disabled: see :ref:"
"`issue with file descriptors <faulthandler-fd>`."
msgstr ""

#: ../../library/faulthandler.rst:87
msgid "On Windows, a handler for Windows exception is also installed."
msgstr ""

#: ../../library/faulthandler.rst:90
msgid ""
"The dump now mentions if a garbage collector collection is running if "
"*all_threads* is true."
msgstr ""

#: ../../library/faulthandler.rst:96
msgid ""
"Disable the fault handler: uninstall the signal handlers installed by :func:"
"`enable`."
msgstr ""
"フォールトハンドラを無効にします: :func:`enable` によってインストールされたシ"
"グナルハンドラをアンインストールします。"

#: ../../library/faulthandler.rst:101
msgid "Check if the fault handler is enabled."
msgstr "フォールトハンドラが有効かどうかチェックします。"

#: ../../library/faulthandler.rst:105
msgid "Dumping the tracebacks after a timeout"
msgstr "タイムアウト後にtracebackをダンプする"

#: ../../library/faulthandler.rst:109
msgid ""
"Dump the tracebacks of all threads, after a timeout of *timeout* seconds, or "
"every *timeout* seconds if *repeat* is ``True``.  If *exit* is ``True``, "
"call :c:func:`!_exit` with status=1 after dumping the tracebacks.  (Note :c:"
"func:`!_exit` exits the process immediately, which means it doesn't do any "
"cleanup like flushing file buffers.) If the function is called twice, the "
"new call replaces previous parameters and resets the timeout. The timer has "
"a sub-second resolution."
msgstr ""

#: ../../library/faulthandler.rst:117
msgid ""
"The *file* must be kept open until the traceback is dumped or :func:"
"`cancel_dump_traceback_later` is called: see :ref:`issue with file "
"descriptors <faulthandler-fd>`."
msgstr ""

#: ../../library/faulthandler.rst:121
msgid "This function is implemented using a watchdog thread."
msgstr ""

#: ../../library/faulthandler.rst:126
msgid "This function is now always available."
msgstr ""

#: ../../library/faulthandler.rst:131
msgid "Cancel the last call to :func:`dump_traceback_later`."
msgstr ":func:`dump_traceback_later` の最新の呼び出しをキャンセルします。"

#: ../../library/faulthandler.rst:135
msgid "Dumping the traceback on a user signal"
msgstr "ユーザシグナルに対してtracebackをダンプする"

#: ../../library/faulthandler.rst:139
msgid ""
"Register a user signal: install a handler for the *signum* signal to dump "
"the traceback of all threads, or of the current thread if *all_threads* is "
"``False``, into *file*. Call the previous handler if chain is ``True``."
msgstr ""
"ユーザシグナルを登録します: すべてのスレッドでtracebackをダンプするために "
"*signum* シグナルをインストールします。ただし *all_threads* が ``False`` であ"
"れば現在のスレッドのみ *file* にダンプします。もし chain が ``True`` であれば"
"以前のハンドラも呼び出します。"

#: ../../library/faulthandler.rst:143
msgid ""
"The *file* must be kept open until the signal is unregistered by :func:"
"`unregister`: see :ref:`issue with file descriptors <faulthandler-fd>`."
msgstr ""

#: ../../library/faulthandler.rst:146 ../../library/faulthandler.rst:157
msgid "Not available on Windows."
msgstr "Windowsでは利用不可です。"

#: ../../library/faulthandler.rst:153
msgid ""
"Unregister a user signal: uninstall the handler of the *signum* signal "
"installed by :func:`register`. Return ``True`` if the signal was registered, "
"``False`` otherwise."
msgstr ""
"ユーザシグナルを登録解除します: :func:`register` でインストールした *signum* "
"シグナルハンドラをアンインストールします。シグナルが登録された場合は "
"``True`` を返し、そうでなければ ``False`` を返します。"

#: ../../library/faulthandler.rst:163
msgid "Issue with file descriptors"
msgstr "ファイル記述子の問題"

#: ../../library/faulthandler.rst:165
msgid ""
":func:`enable`, :func:`dump_traceback_later` and :func:`register` keep the "
"file descriptor of their *file* argument. If the file is closed and its file "
"descriptor is reused by a new file, or if :func:`os.dup2` is used to replace "
"the file descriptor, the traceback will be written into a different file. "
"Call these functions again each time that the file is replaced."
msgstr ""
":func:`enable`、:func:`dump_traceback_later` ならびに :func:`register` は引"
"数 *file* に渡されたファイル記述子を保持します。ファイルが閉じられファイル記"
"述子が新しいファイルで再利用された場合や、:func:`os.dup2` の使用でファイル記"
"述子が置き換えた場合、 traceback の結果は別のファイルへ書き込まれます。ファイ"
"ルが置き換えられた場合は、毎回これらの関数を呼び出しなおしてください。"

#: ../../library/faulthandler.rst:173
msgid "Example"
msgstr "使用例"

#: ../../library/faulthandler.rst:175
msgid ""
"Example of a segmentation fault on Linux with and without enabling the fault "
"handler:"
msgstr ""
"フォールトハンドラを有効化・無効化したときの Linuxでのセグメンテーション"
"フォールトの例:"

#: ../../library/faulthandler.rst:178
msgid ""
"$ python -c \"import ctypes; ctypes.string_at(0)\"\n"
"Segmentation fault\n"
"\n"
"$ python -q -X faulthandler\n"
">>> import ctypes\n"
">>> ctypes.string_at(0)\n"
"Fatal Python error: Segmentation fault\n"
"\n"
"Current thread 0x00007fb899f39700 (most recent call first):\n"
"  File \"/home/python/cpython/Lib/ctypes/__init__.py\", line 486 in "
"string_at\n"
"  File \"<stdin>\", line 1 in <module>\n"
"Segmentation fault"
msgstr ""
