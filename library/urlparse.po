# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2021-05-10 15:36+0000\n"
"Last-Translator: Takanori Suzuki <takanori@takanory.net>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/urlparse.rst:2
msgid ":mod:`urlparse` --- Parse URLs into components"
msgstr ":mod:`urlparse` --- URL を解析して構成要素にする"

#: ../../library/urlparse.rst:16
msgid ""
"The :mod:`urlparse` module is renamed to :mod:`urllib.parse` in Python 3. "
"The :term:`2to3` tool will automatically adapt imports when converting your "
"sources to Python 3."
msgstr ""
":mod:`urlparse` モジュールは、Python 3 では :mod:`urllib.parse` にリネームさ"
"れました。 :term:`2to3` ツールが自動的にソースコードの import を修正します。"

#: ../../library/urlparse.rst:20
msgid "**Source code:** :source:`Lib/urlparse.py`"
msgstr "**ソースコード:** :source:`Lib/urlparse.py`"

#: ../../library/urlparse.rst:24
msgid ""
"This module defines a standard interface to break Uniform Resource Locator "
"(URL) strings up in components (addressing scheme, network location, path "
"etc.), to combine the components back into a URL string, and to convert a "
"\"relative URL\" to an absolute URL given a \"base URL.\""
msgstr ""
"このモジュールでは URL (Uniform Resource Locator) 文字列をその構成要素 (アド"
"レススキーム、ネットワーク上の位置、パスその他) に分解したり、構成要素を URL "
"に組みなおしたり、\"相対 URL (relative URL)\" を指定した \"基底 URL (base "
"URL)\" に基づいて絶対 URL に変換するための標準的なインタフェースを定義してい"
"ます。"

#: ../../library/urlparse.rst:29
msgid ""
"The module has been designed to match the Internet RFC on Relative Uniform "
"Resource Locators. It supports the following URL schemes: ``file``, ``ftp``, "
"``gopher``, ``hdl``, ``http``, ``https``, ``imap``, ``mailto``, ``mms``, "
"``news``,  ``nntp``, ``prospero``, ``rsync``, ``rtsp``, ``rtspu``,  "
"``sftp``, ``shttp``, ``sip``, ``sips``, ``snews``, ``svn``,  ``svn+ssh``, "
"``telnet``, ``wais``."
msgstr ""
"このモジュールは Relative Uniform Resource Locators (相対 URL) に関する RFC "
"に適合するよう設計されていおり、次のスキームをサポートしています: ``file``, "
"``ftp``, ``gopher``, ``hdl``, ``http``, ``https``, ``imap``, ``mailto``, "
"``mms``, ``news``, ``nntp``, ``prospero``, ``rsync``, ``rtsp``, ``rtspu``, "
"``sftp``, ``shttp``, ``sip``, ``sips``, ``snews``, ``svn``, ``svn+ssh``, "
"``telnet``, ``wais``."

#: ../../library/urlparse.rst:36
msgid "Support for the ``sftp`` and ``sips`` schemes."
msgstr "``sftp`` および ``sips`` スキームのサポートが追加されました。"

#: ../../library/urlparse.rst:39
msgid "The :mod:`urlparse` module defines the following functions:"
msgstr ":mod:`urlparse` モジュールは以下の関数を定義しています:"

#: ../../library/urlparse.rst:44
msgid ""
"Parse a URL into six components, returning a 6-tuple.  This corresponds to "
"the general structure of a URL: ``scheme://netloc/path;parameters?"
"query#fragment``. Each tuple item is a string, possibly empty. The "
"components are not broken up in smaller parts (for example, the network "
"location is a single string), and % escapes are not expanded. The delimiters "
"as shown above are not part of the result, except for a leading slash in the "
"*path* component, which is retained if present.  For example:"
msgstr ""
"URL を解析して 6 つの構成要素にし、6 要素のタプルを返します。このタプルは "
"URL の一般的な構造: ``scheme://netloc/path;parameters?query#fragment`` に対応"
"しています。各タプル要素は文字列で、空の場合もあります。構成要素がさらに小さ"
"い要素に分解されることはありません (例えばネットワーク上の位置は単一の文字列"
"になります)。また % によるエスケープは展開されません。上で示された区切り文字"
"がタプルの各要素の一部分として含まれることはありませんが、*path* 要素の先頭の"
"スラッシュがある場合には例外です。たとえば以下のようになります:"

#: ../../library/urlparse.rst:65
msgid ""
"Following the syntax specifications in :rfc:`1808`, urlparse recognizes a "
"netloc only if it is properly introduced by '//'.  Otherwise the input is "
"presumed to be a relative URL and thus to start with a path component."
msgstr ""
":rfc:`1808` にある文法仕様に基づき、urlparse は '//' で始まる場合にのみ "
"netloc を認識します。それ以外の場合は、入力は相対URLであると推定され、path 部"
"分で始まることになります。"

#: ../../library/urlparse.rst:81
msgid ""
"If the *scheme* argument is specified, it gives the default addressing "
"scheme, to be used only if the URL does not specify one.  The default value "
"for this argument is the empty string."
msgstr ""
"*scheme* 引数が指定されている場合、標準のアドレススキームを表し、アドレスス"
"キームを指定していない URL に対してのみ使用されます。この引数の標準の値は空文"
"字列です。"

#: ../../library/urlparse.rst:85
msgid ""
"If the *allow_fragments* argument is false, fragment identifiers are not "
"recognized and parsed as part of the preceding component, even if the URL's "
"addressing scheme normally does support them.  The default value for this "
"argument is :const:`True`."
msgstr ""
"引数 *allow_fragments* が偽の場合、URL のアドレススキームがフラグメント指定を"
"サポートしていても、フラグメント識別子はURLのそれ以前の部分に続く構成要素とし"
"て認識、解析されません。この引数のデフォルトは :const:`True` です。"

#: ../../library/urlparse.rst:90 ../../library/urlparse.rst:216
msgid ""
"The return value is actually an instance of a subclass of :class:`tuple`.  "
"This class has the following additional read-only convenience attributes:"
msgstr ""
"戻り値は実際には :class:`tuple` のサブクラスのインスタンスです。このクラスに"
"は以下の読み出し専用の便利な属性が追加されています:"

#: ../../library/urlparse.rst:94 ../../library/urlparse.rst:220
msgid "Attribute"
msgstr "属性"

#: ../../library/urlparse.rst:94 ../../library/urlparse.rst:220
msgid "Index"
msgstr "インデックス"

#: ../../library/urlparse.rst:94 ../../library/urlparse.rst:220
msgid "Value"
msgstr "``値``"

#: ../../library/urlparse.rst:94 ../../library/urlparse.rst:220
msgid "Value if not present"
msgstr "指定されなかった場合の値"

#: ../../library/urlparse.rst:96 ../../library/urlparse.rst:222
msgid ":attr:`scheme`"
msgstr ":attr:`scheme`"

#: ../../library/urlparse.rst:96 ../../library/urlparse.rst:222
msgid "0"
msgstr "0"

#: ../../library/urlparse.rst:96 ../../library/urlparse.rst:222
msgid "URL scheme specifier"
msgstr "URL スキーム"

#: ../../library/urlparse.rst:96 ../../library/urlparse.rst:222
msgid "*scheme* parameter"
msgstr "*scheme* パラメータ"

#: ../../library/urlparse.rst:98 ../../library/urlparse.rst:224
msgid ":attr:`netloc`"
msgstr ":attr:`netloc`"

#: ../../library/urlparse.rst:98 ../../library/urlparse.rst:224
msgid "1"
msgstr "1"

#: ../../library/urlparse.rst:98 ../../library/urlparse.rst:224
msgid "Network location part"
msgstr "ネットワーク上の位置"

#: ../../library/urlparse.rst:98 ../../library/urlparse.rst:100
#: ../../library/urlparse.rst:102 ../../library/urlparse.rst:105
#: ../../library/urlparse.rst:107 ../../library/urlparse.rst:224
#: ../../library/urlparse.rst:226 ../../library/urlparse.rst:228
#: ../../library/urlparse.rst:230
msgid "empty string"
msgstr "空文字列"

#: ../../library/urlparse.rst:100 ../../library/urlparse.rst:226
msgid ":attr:`path`"
msgstr ":attr:`path`"

#: ../../library/urlparse.rst:100 ../../library/urlparse.rst:226
msgid "2"
msgstr "2"

#: ../../library/urlparse.rst:100 ../../library/urlparse.rst:226
msgid "Hierarchical path"
msgstr "階層的パス"

#: ../../library/urlparse.rst:102
msgid ":attr:`params`"
msgstr ":attr:`params`"

#: ../../library/urlparse.rst:102 ../../library/urlparse.rst:228
msgid "3"
msgstr "3"

#: ../../library/urlparse.rst:102
msgid "Parameters for last path element"
msgstr "最後のパス要素に対するパラメータ"

#: ../../library/urlparse.rst:105 ../../library/urlparse.rst:228
msgid ":attr:`query`"
msgstr ":attr:`query`"

#: ../../library/urlparse.rst:105 ../../library/urlparse.rst:230
msgid "4"
msgstr "4"

#: ../../library/urlparse.rst:105 ../../library/urlparse.rst:228
msgid "Query component"
msgstr "クエリ要素"

#: ../../library/urlparse.rst:107 ../../library/urlparse.rst:230
msgid ":attr:`fragment`"
msgstr ":attr:`fragment`"

#: ../../library/urlparse.rst:107
msgid "5"
msgstr "5"

#: ../../library/urlparse.rst:107 ../../library/urlparse.rst:230
msgid "Fragment identifier"
msgstr "フラグメント識別子"

#: ../../library/urlparse.rst:109 ../../library/urlparse.rst:232
msgid ":attr:`username`"
msgstr ":attr:`username`"

#: ../../library/urlparse.rst:109 ../../library/urlparse.rst:232
msgid "User name"
msgstr "ユーザ名"

#: ../../library/urlparse.rst:109 ../../library/urlparse.rst:111
#: ../../library/urlparse.rst:113 ../../library/urlparse.rst:115
#: ../../library/urlparse.rst:232 ../../library/urlparse.rst:234
#: ../../library/urlparse.rst:236 ../../library/urlparse.rst:238
msgid ":const:`None`"
msgstr ":const:`None`"

#: ../../library/urlparse.rst:111 ../../library/urlparse.rst:234
msgid ":attr:`password`"
msgstr ":attr:`password`"

#: ../../library/urlparse.rst:111 ../../library/urlparse.rst:234
msgid "Password"
msgstr "パスワード"

#: ../../library/urlparse.rst:113 ../../library/urlparse.rst:236
msgid ":attr:`hostname`"
msgstr ":attr:`hostname`"

#: ../../library/urlparse.rst:113 ../../library/urlparse.rst:236
msgid "Host name (lower case)"
msgstr "ホスト名 (小文字)"

#: ../../library/urlparse.rst:115 ../../library/urlparse.rst:238
msgid ":attr:`port`"
msgstr ":attr:`port`"

#: ../../library/urlparse.rst:115 ../../library/urlparse.rst:238
msgid "Port number as integer, if present"
msgstr "ポート番号を表わす整数 (もしあれば)"

#: ../../library/urlparse.rst:119 ../../library/urlparse.rst:242
msgid ""
"See section :ref:`urlparse-result-object` for more information on the result "
"object."
msgstr ""
"結果オブジェクトのより詳しい情報は :ref:`urlparse-result-object` 節を参照して"
"ください。"

#: ../../library/urlparse.rst:122 ../../library/urlparse.rst:245
msgid ""
"Characters in the :attr:`netloc` attribute that decompose under NFKC "
"normalization (as used by the IDNA encoding) into any of ``/``, ``?``, "
"``#``, ``@``, or ``:`` will raise a :exc:`ValueError`. If the URL is "
"decomposed before parsing, or is not a Unicode string, no error will be "
"raised."
msgstr ""

#: ../../library/urlparse.rst:128 ../../library/urlparse.rst:253
msgid "Added attributes to return value."
msgstr "戻り値に属性が追加されました。"

#: ../../library/urlparse.rst:131
msgid "Added IPv6 URL parsing capabilities."
msgstr "IPv6 URL の解析も行えるようになりました。"

#: ../../library/urlparse.rst:134 ../../library/urlparse.rst:256
msgid ""
"Characters that affect netloc parsing under NFKC normalization will now "
"raise :exc:`ValueError`."
msgstr ""

#: ../../library/urlparse.rst:141
msgid ""
"Parse a query string given as a string argument (data of type :mimetype:"
"`application/x-www-form-urlencoded`).  Data are returned as a dictionary.  "
"The dictionary keys are the unique query variable names and the values are "
"lists of values for each name."
msgstr ""
"文字列引数として渡されたクエリ文字列  (:mimetype:`application/x-www-form-"
"urlencoded` 型のデータ) を解析します。解析されたデータを辞書として返します。"
"辞書のキーは一意なクエリ変数名で、値は各変数名に対する値からなるリストです。"

#: ../../library/urlparse.rst:146 ../../library/urlparse.rst:175
msgid ""
"The optional argument *keep_blank_values* is a flag indicating whether blank "
"values in percent-encoded queries should be treated as blank strings.   A "
"true value indicates that blanks should be retained as  blank strings.  The "
"default false value indicates that blank values are to be ignored and "
"treated as if they were not included."
msgstr ""
"任意の引数 *keep_blank_values* は、パーセントエンコードされたクエリの中の値が"
"入っていないクエリの値を空白文字列と見なすかどうかを示すフラグです。値が真で"
"あれば、値の入っていないフィールドは空文字列のままになります。標準では偽で、"
"値の入っていないフィールドを無視し、そのフィールドはクエリに含まれていないも"
"のとして扱います。"

#: ../../library/urlparse.rst:152 ../../library/urlparse.rst:181
msgid ""
"The optional argument *strict_parsing* is a flag indicating what to do with "
"parsing errors.  If false (the default), errors are silently ignored.  If "
"true, errors raise a :exc:`ValueError` exception."
msgstr ""
"任意の引数 *strict_parsing* はパース時のエラーをどう扱うかを決めるフラグで"
"す。値が偽なら (デフォルトの設定です)、エラーは暗黙のうちに無視します。値が真"
"なら :exc:`ValueError` 例外を送出します。"

#: ../../library/urlparse.rst:156 ../../library/urlparse.rst:185
msgid ""
"The optional argument *max_num_fields* is the maximum number of fields to "
"read. If set, then throws a :exc:`ValueError` if there are more than "
"*max_num_fields* fields read."
msgstr ""

#: ../../library/urlparse.rst:160
msgid ""
"Use the :func:`urllib.urlencode` function to convert such dictionaries into "
"query strings."
msgstr ""
"辞書等をクエリ文字列に変換する場合は :func:`urllib.urlencode` 関数を使用して"
"ください。"

#: ../../library/urlparse.rst:163 ../../library/urlparse.rst:192
msgid "Copied from the :mod:`cgi` module."
msgstr ":mod:`cgi` モジュールからコピーされてきました。"

#: ../../library/urlparse.rst:166 ../../library/urlparse.rst:195
msgid "Added *max_num_fields* parameter."
msgstr "*max_num_fields* 引数が追加されました。"

#: ../../library/urlparse.rst:171
msgid ""
"Parse a query string given as a string argument (data of type :mimetype:"
"`application/x-www-form-urlencoded`).  Data are returned as a list of name, "
"value pairs."
msgstr ""
"文字列引数として渡されたクエリ文字列 (:mimetype:`application/x-www-form-"
"urlencoded` 型のデータ) を解析します。解析されたデータは名前と値のペアからな"
"るリストです。"

#: ../../library/urlparse.rst:189
msgid ""
"Use the :func:`urllib.urlencode` function to convert such lists of pairs "
"into query strings."
msgstr ""
"ペアのリストからクエリ文字列を生成する場合には :func:`urllib.urlencode` 関数"
"を使用します。"

#: ../../library/urlparse.rst:200
msgid ""
"Construct a URL from a tuple as returned by ``urlparse()``. The *parts* "
"argument can be any six-item iterable. This may result in a slightly "
"different, but equivalent URL, if the URL that was parsed originally had "
"unnecessary delimiters (for example, a ? with an empty query; the RFC states "
"that these are equivalent)."
msgstr ""
"``urlparse()`` が返すような形式のタプルから URL を構築します。 *parts* 引数は"
"任意の 6 要素イテラブルです。解析された元の URL が、不要な区切り文字を持って"
"いた場合には、多少違いはあるが等価な URL になるかもしれません (例えばクエリ内"
"容が空の ``?`` のようなもので、RFC はこれらを等価だと述べています)。"

#: ../../library/urlparse.rst:209
msgid ""
"This is similar to :func:`urlparse`, but does not split the params from the "
"URL. This should generally be used instead of :func:`urlparse` if the more "
"recent URL syntax allowing parameters to be applied to each segment of the "
"*path* portion of the URL (see :rfc:`2396`) is wanted.  A separate function "
"is needed to separate the path segments and parameters.  This function "
"returns a 5-tuple: (addressing scheme, network location, path, query, "
"fragment identifier)."
msgstr ""
":func:`urlparse` に似ていますが、URL から params を切り離しません。このメソッ"
"ドは通常、URL の *path* 部分において、各セグメントにパラメーター指定をできる"
"ようにした最近の URL 構文 (:rfc:`2396` 参照) が必要な場合に、 :func:"
"`urlparse` の代わりに使われます。パスセグメントとパラメーターを分割するために"
"は分割用の関数が必要です。この関数は 5 要素のタプル: (アドレススキーム、ネッ"
"トワーク上の位置、パス、クエリ、フラグメント識別子)  を返します。"

#: ../../library/urlparse.rst:263
msgid ""
"Combine the elements of a tuple as returned by :func:`urlsplit` into a "
"complete URL as a string. The *parts* argument can be any five-item "
"iterable. This may result in a slightly different, but equivalent URL, if "
"the URL that was parsed originally had unnecessary delimiters (for example, "
"a ? with an empty query; the RFC states that these are equivalent)."
msgstr ""
":func:`urlsplit` が返すような形式のタプル中のエレメントを組み合わせて、文字列"
"の完全な URL にします。 *parts* 引数は任意の 5 要素イテラブルです。解析された"
"元の URL が、不要な区切り文字を持っていた場合には、多少違いはあるが等価な "
"URL になるかもしれません (例えばクエリ内容が空の ? のようなもので、RFC はこれ"
"らを等価だと述べています)。"

#: ../../library/urlparse.rst:274
msgid ""
"Construct a full (\"absolute\") URL by combining a \"base URL\" (*base*) "
"with another URL (*url*).  Informally, this uses components of the base URL, "
"in particular the addressing scheme, the network location and (part of) the "
"path, to provide missing components in the relative URL.  For example:"
msgstr ""
"\"基底 URL\"(*base*)と別のURL(*url*)を組み合わせて、完全な URL (\"絶対 "
"URL\") を構成します。ぶっちゃけ、この関数は基底 URL の要素、特にアドレスス"
"キーム、ネットワーク上の位置、およびパス (の一部) を使って、相対 URL にない要"
"素を提供します。以下の例のようになります:"

#: ../../library/urlparse.rst:283
msgid ""
"The *allow_fragments* argument has the same meaning and default as for :func:"
"`urlparse`."
msgstr ""
"*allow_fragments* 引数は :func:`urlparse` における引数と同じ意味とデフォルト"
"を持ちます。"

#: ../../library/urlparse.rst:288
msgid ""
"If *url* is an absolute URL (that is, starting with ``//`` or ``scheme://"
"``), the *url*'s host name and/or scheme will be present in the result.  For "
"example:"
msgstr ""
"*url* が (``//`` か ``scheme://`` で始まっている) 絶対URLであれば、その "
"*url* のホスト名と / もしくは scheme は結果に反映されます。例えば:"

#: ../../library/urlparse.rst:297
msgid ""
"If you do not want that behavior, preprocess the *url* with :func:`urlsplit` "
"and :func:`urlunsplit`, removing possible *scheme* and *netloc* parts."
msgstr ""
"もしこの動作が望みのものでない場合は、 *url* を :func:`urlsplit` と :func:"
"`urlunsplit` で先に処理して、 *scheme* と *netloc* を削除してください。"

#: ../../library/urlparse.rst:303
msgid ""
"If *url* contains a fragment identifier, returns a modified version of *url* "
"with no fragment identifier, and the fragment identifier as a separate "
"string. If there is no fragment identifier in *url*, returns *url* "
"unmodified and an empty string."
msgstr ""
"*url* がフラグメント識別子を含む場合、フラグメント識別子を持たないバージョン"
"に修正された *url* と、別の文字列に分割されたフラグメント識別子を返します。 "
"*url* 中にフラグメント識別子がない場合、そのままの *url* と空文字列を返しま"
"す。"

#: ../../library/urlparse.rst:315
msgid ":rfc:`3986` - Uniform Resource Identifiers"
msgstr ":rfc:`3986` - Uniform Resource Identifiers"

#: ../../library/urlparse.rst:312
msgid ""
"This is the current standard (STD66). Any changes to urlparse module should "
"conform to this. Certain deviations could be observed, which are mostly for "
"backward compatibility purposes and for certain de-facto parsing "
"requirements as commonly observed in major browsers."
msgstr ""
"これが現在の標準規格 (STD66) です。urlparse モジュールに対するすべての変更は"
"この規格に準拠していなければなりませんが、若干の逸脱はありえます。これは主に"
"は後方互換性のため、また主要なブラウザで一般的に見られる、URL を解析する上で"
"のいくつかの事実上の要件を満たすためです。"

#: ../../library/urlparse.rst:318
msgid ":rfc:`2732` - Format for Literal IPv6 Addresses in URL's."
msgstr ":rfc:`2732` - Format for Literal IPv6 Addresses in URL's."

#: ../../library/urlparse.rst:318
msgid "This specifies the parsing requirements of IPv6 URLs."
msgstr "この規格は IPv6 の URL を解析するときの要求事項を記述しています。"

#: ../../library/urlparse.rst:322
msgid ":rfc:`2396` - Uniform Resource Identifiers (URI): Generic Syntax"
msgstr ":rfc:`2396` - Uniform Resource Identifiers (URI): Generic Syntax"

#: ../../library/urlparse.rst:321
msgid ""
"Document describing the generic syntactic requirements for both Uniform "
"Resource Names (URNs) and Uniform Resource Locators (URLs)."
msgstr ""
"この RFC では Uniform Resource Name (URN) と Uniform Resource Locator (URL) "
"の両方に対する一般的な文法的要求事項を記述しています。"

#: ../../library/urlparse.rst:325
msgid ":rfc:`2368` - The mailto URL scheme."
msgstr ":rfc:`2368` - The mailto URL scheme."

#: ../../library/urlparse.rst:325
msgid "Parsing requirements for mailto URL schemes."
msgstr "mailto URL スキームに対する文法的要求事項です。"

#: ../../library/urlparse.rst:330
msgid ":rfc:`1808` - Relative Uniform Resource Locators"
msgstr ":rfc:`1808` - Relative Uniform Resource Locators"

#: ../../library/urlparse.rst:328
msgid ""
"This Request For Comments includes the rules for joining an absolute and a "
"relative URL, including a fair number of \"Abnormal Examples\" which govern "
"the treatment of border cases."
msgstr ""
"この RFC には絶対 URL と相対 URL を結合するための規則がボーダケースの取扱い方"
"を決定する \"異常な例\" つきで収められています。"

#: ../../library/urlparse.rst:332
msgid ":rfc:`1738` - Uniform Resource Locators (URL)"
msgstr ":rfc:`1738` - Uniform Resource Locators (URL)"

#: ../../library/urlparse.rst:333
msgid "This specifies the formal syntax and semantics of absolute URLs."
msgstr "この RFC では絶対 URL の形式的な文法と意味付けを仕様化しています。"

#: ../../library/urlparse.rst:339
msgid "Results of :func:`urlparse` and :func:`urlsplit`"
msgstr ":func:`urlparse` および :func:`urlsplit` の結果"

#: ../../library/urlparse.rst:341
msgid ""
"The result objects from the :func:`urlparse` and :func:`urlsplit` functions "
"are subclasses of the :class:`tuple` type.  These subclasses add the "
"attributes described in those functions, as well as provide an additional "
"method:"
msgstr ""
":func:`urlparse` および :func:`urlsplit` から得られる結果オブジェクトはそれぞ"
"れ :class:`tuple` 型のサブクラスです。これらのクラスはそれぞれの関数の説明の"
"中で述べたような属性とともに、追加のメソッドを一つ提供しています。"

#: ../../library/urlparse.rst:348
msgid ""
"Return the re-combined version of the original URL as a string. This may "
"differ from the original URL in that the scheme will always be normalized to "
"lower case and empty components may be dropped. Specifically, empty "
"parameters, queries, and fragment identifiers will be removed."
msgstr ""
"再結合された形で元の URL の文字列を返します。この文字列は元の URL とは次のよ"
"うな点で異なるかもしれません。スキームは常に小文字に正規化されます。また空の"
"要素は省略されます。特に、空のパラメータ、クエリ、フラグメント識別子は取り除"
"かれます。"

#: ../../library/urlparse.rst:353
msgid ""
"The result of this method is a fixpoint if passed back through the original "
"parsing function:"
msgstr "加えた解析関数を逆に行えばこのメソッドの戻り値は元の URL になります:"

#: ../../library/urlparse.rst:369
msgid "The following classes provide the implementations of the parse results:"
msgstr "以下のクラスが解析結果の実装を提供します:"

#: ../../library/urlparse.rst:374
msgid "Concrete class for :func:`urlparse` results."
msgstr ":func:`urlparse` の返り値の具象クラス。"

#: ../../library/urlparse.rst:379
msgid "Concrete class for :func:`urlsplit` results."
msgstr ":func:`urlsplit` の返り値の具象クラス。"
