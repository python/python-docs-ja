# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:18+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xml.dom.pulldom.rst:2
msgid ":mod:`!xml.dom.pulldom` --- Support for building partial DOM trees"
msgstr ":mod:`!xml.dom.pulldom` --- 部分的な DOM ツリー構築のサポート"

#: ../../library/xml.dom.pulldom.rst:9
msgid "**Source code:** :source:`Lib/xml/dom/pulldom.py`"
msgstr "**Source code:** :source:`Lib/xml/dom/pulldom.py`"

#: ../../library/xml.dom.pulldom.rst:13
msgid ""
"The :mod:`xml.dom.pulldom` module provides a \"pull parser\" which can also "
"be asked to produce DOM-accessible fragments of the document where "
"necessary. The basic concept involves pulling \"events\" from a stream of "
"incoming XML and processing them. In contrast to SAX which also employs an "
"event-driven processing model together with callbacks, the user of a pull "
"parser is responsible for explicitly pulling events from the stream, looping "
"over those events until either processing is finished or an error condition "
"occurs."
msgstr ""
":mod:`xml.dom.pulldom` モジュールは \"プルパーザ\" を提供します。\n"
"プルパーザは必要に応じて文書の DOM アクセス可能な断片を生成することができま"
"す。\n"
"基本概念は、入力 XML のストリームから \"イベント\" を取り出し (pull し) て処"
"理することです。\n"
"SAX とは、コールバックつきのイベント駆動処理モデルを採用しているという点で同"
"様ですが、SAX とは対照的に、プルパーザの使用者には処理が完了するかエラー状態"
"が発生するまで、明示的にストリームからイベントを取り出し、イベントに対しルー"
"プを回す責任があります。"

#: ../../library/xml.dom.pulldom.rst:24
msgid ""
"The :mod:`xml.dom.pulldom` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
":mod:`xml.dom.pulldom` モジュールは悪意を持って作成されたデータに対して安全で"
"はありません。信頼できないデータや認証されていないデータをパースする必要があ"
"る場合は :ref:`xml-vulnerabilities` を参照してください。"

#: ../../library/xml.dom.pulldom.rst:30
msgid ""
"The SAX parser no longer processes general external entities by default to "
"increase security by default. To enable processing of external entities, "
"pass a custom parser instance in::"
msgstr ""
"SAXパーサーは、デフォルトでセキュリティーを向上させるために、一般的な外部エン"
"ティティーをデフォルトでは処理しなくなりました。外部エンティティの処理を有効"
"にするには、次の場所にカスタムパーサーインスタンスを渡します::"

#: ../../library/xml.dom.pulldom.rst:34
msgid ""
"from xml.dom.pulldom import parse\n"
"from xml.sax import make_parser\n"
"from xml.sax.handler import feature_external_ges\n"
"\n"
"parser = make_parser()\n"
"parser.setFeature(feature_external_ges, True)\n"
"parse(filename, parser=parser)"
msgstr ""

#: ../../library/xml.dom.pulldom.rst:43
msgid "Example::"
msgstr "以下はプログラム例です::"

#: ../../library/xml.dom.pulldom.rst:45
msgid ""
"from xml.dom import pulldom\n"
"\n"
"doc = pulldom.parse('sales_items.xml')\n"
"for event, node in doc:\n"
"    if event == pulldom.START_ELEMENT and node.tagName == 'item':\n"
"        if int(node.getAttribute('price')) > 50:\n"
"            doc.expandNode(node)\n"
"            print(node.toxml())"
msgstr ""

#: ../../library/xml.dom.pulldom.rst:54
msgid "``event`` is a constant and can be one of:"
msgstr "``event`` は定数で以下の内の一つです:"

#: ../../library/xml.dom.pulldom.rst:56
msgid ":data:`START_ELEMENT`"
msgstr ":data:`START_ELEMENT`"

#: ../../library/xml.dom.pulldom.rst:57
msgid ":data:`END_ELEMENT`"
msgstr ":data:`END_ELEMENT`"

#: ../../library/xml.dom.pulldom.rst:58
msgid ":data:`COMMENT`"
msgstr ":data:`COMMENT`"

#: ../../library/xml.dom.pulldom.rst:59
msgid ":data:`START_DOCUMENT`"
msgstr ":data:`START_DOCUMENT`"

#: ../../library/xml.dom.pulldom.rst:60
msgid ":data:`END_DOCUMENT`"
msgstr ":data:`END_DOCUMENT`"

#: ../../library/xml.dom.pulldom.rst:61
msgid ":data:`CHARACTERS`"
msgstr ":data:`CHARACTERS`"

#: ../../library/xml.dom.pulldom.rst:62
msgid ":data:`PROCESSING_INSTRUCTION`"
msgstr ":data:`PROCESSING_INSTRUCTION`"

#: ../../library/xml.dom.pulldom.rst:63
msgid ":data:`IGNORABLE_WHITESPACE`"
msgstr ":data:`IGNORABLE_WHITESPACE`"

#: ../../library/xml.dom.pulldom.rst:65
msgid ""
"``node`` is an object of type :class:`xml.dom.minidom.Document`, :class:`xml."
"dom.minidom.Element` or :class:`xml.dom.minidom.Text`."
msgstr ""
"``node`` は型 :class:`xml.dom.minidom.Document`、 :class:`xml.dom.minidom."
"Element` または :class:`xml.dom.minidom.Text` のオブジェクトです。"

#: ../../library/xml.dom.pulldom.rst:68
msgid ""
"Since the document is treated as a \"flat\" stream of events, the document "
"\"tree\" is implicitly traversed and the desired elements are found "
"regardless of their depth in the tree. In other words, one does not need to "
"consider hierarchical issues such as recursive searching of the document "
"nodes, although if the context of elements were important, one would either "
"need to maintain some context-related state (i.e. remembering where one is "
"in the document at any given point) or to make use of the :func:"
"`DOMEventStream.expandNode` method and switch to DOM-related processing."
msgstr ""
"文書はイベントの *フラットな* 流れとして扱われるため、文書の \"木\" は暗黙の"
"うちに全て読み込まれ、目的の要素は木の中の深さに依らずに見つけられます。つま"
"り、文書ノードの再帰的な検索のような階層的な問題を考える必要はありません。し"
"かしながら要素の前後関係が重要な場合は、前後関係の状態を維持する (すなわち文"
"章中の任意の点の場所を記憶する) か、 :func:`DOMEventStream.expandNode` メソッ"
"ドを使用して DOM 関連の処理に切り替える必要があります。"

#: ../../library/xml.dom.pulldom.rst:80 ../../library/xml.dom.pulldom.rst:85
msgid "Subclass of :class:`xml.sax.handler.ContentHandler`."
msgstr ":class:`xml.sax.handler.ContentHandler` のサブクラスです。"

#: ../../library/xml.dom.pulldom.rst:90
msgid ""
"Return a :class:`DOMEventStream` from the given input. *stream_or_string* "
"may be either a file name, or a file-like object. *parser*, if given, must "
"be an :class:`~xml.sax.xmlreader.XMLReader` object. This function will "
"change the document handler of the parser and activate namespace support; "
"other parser configuration (like setting an entity resolver) must have been "
"done in advance."
msgstr ""
"与えられた入力から :class:`DOMEventStream` を返します。*stream_or_string* は"
"ファイル名かファイル様オブジェクトのいずれかです。*parser* は、与えれた場"
"合、 :class:`~xml.sax.xmlreader.XMLReader` オブジェクトでなければなりません。"
"この関数はパーザの文書ハンドラを変えて名前空間のサポートを有効にします。パー"
"ザの他の設定 (例えばエンティティリゾルバ) は前もってしておかなければなりませ"
"ん。"

#: ../../library/xml.dom.pulldom.rst:97
msgid ""
"If you have XML in a string, you can use the :func:`parseString` function "
"instead:"
msgstr ""
"XML データを文字列で持っている場合、 :func:`parseString` を代わりに使うことが"
"できます:"

#: ../../library/xml.dom.pulldom.rst:101
msgid ""
"Return a :class:`DOMEventStream` that represents the (Unicode) *string*."
msgstr "(ユニコード) *string* を表す :class:`DOMEventStream` を返します。"

#: ../../library/xml.dom.pulldom.rst:105
msgid "Default value for the *bufsize* parameter to :func:`parse`."
msgstr ":func:`parse` の *bufsize* パラメタのデフォルト値です。"

#: ../../library/xml.dom.pulldom.rst:107
msgid ""
"The value of this variable can be changed before calling :func:`parse` and "
"the new value will take effect."
msgstr ""
"この変数の値は :func:`parse` を呼び出す前に変更することができます。その場合、"
"その新しい値が有効になります。"

#: ../../library/xml.dom.pulldom.rst:113
msgid "DOMEventStream Objects"
msgstr "DOMEventStream オブジェクト"

#: ../../library/xml.dom.pulldom.rst:117
msgid "Support for :meth:`~object.__getitem__` method has been removed."
msgstr ":meth:`~object.__getitem__` メソッドのサポートは削除されました。"

#: ../../library/xml.dom.pulldom.rst:122
msgid ""
"Return a tuple containing *event* and the current *node* as :class:`xml.dom."
"minidom.Document` if event equals :data:`START_DOCUMENT`, :class:`xml.dom."
"minidom.Element` if event equals :data:`START_ELEMENT` or :data:"
"`END_ELEMENT` or :class:`xml.dom.minidom.Text` if event equals :data:"
"`CHARACTERS`. The current node does not contain information about its "
"children, unless :func:`expandNode` is called."
msgstr ""
"event が :data:`START_DOCUMENT` の場合は *event* と :class:`xml.dom.minidom."
"Document` としての現在の *node* からなるタプルを、\n"
":data:`START_ELEMENT` か :data:`END_ELEMENT` の場合は :class:`xml.dom."
"minidom.Element` を、\n"
":data:`CHARACTERS` の場合は :class:`xml.dom.minidom.Text` を返します。\n"
":func:`expandNode` が呼ばれない限り、現在のノードは子ノードの情報を持ちませ"
"ん。 "

#: ../../library/xml.dom.pulldom.rst:132
msgid "Expands all children of *node* into *node*. Example::"
msgstr "*node* の全子ノードを *node* に展開します。例::"

#: ../../library/xml.dom.pulldom.rst:134
msgid ""
"from xml.dom import pulldom\n"
"\n"
"xml = '<html><title>Foo</title> <p>Some text <div>and more</div></p> </"
"html>'\n"
"doc = pulldom.parseString(xml)\n"
"for event, node in doc:\n"
"    if event == pulldom.START_ELEMENT and node.tagName == 'p':\n"
"        # Following statement only prints '<p/>'\n"
"        print(node.toxml())\n"
"        doc.expandNode(node)\n"
"        # Following statement prints node with all its children '<p>Some "
"text <div>and more</div></p>'\n"
"        print(node.toxml())"
msgstr ""
