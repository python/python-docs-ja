# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2018
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:32+0000\n"
"Last-Translator: tomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/modulefinder.rst:2
msgid ":mod:`modulefinder` --- Find modules used by a script"
msgstr ":mod:`modulefinder` --- スクリプト中で使われているモジュールを検索する"

#: ../../library/modulefinder.rst:9
msgid "**Source code:** :source:`Lib/modulefinder.py`"
msgstr "**ソースコード:** :source:`Lib/modulefinder.py`"

#: ../../library/modulefinder.rst:13
msgid ""
"This module provides a :class:`ModuleFinder` class that can be used to "
"determine the set of modules imported by a script. ``modulefinder.py`` can "
"also be run as a script, giving the filename of a Python script as its "
"argument, after which a report of the imported modules will be printed."
msgstr ""
"このモジュールでは、スクリプト中で import されているモジュールセットを調べる"
"ために使える :class:`ModuleFinder` クラスを提供しています。 ``modulefinder."
"py`` はまた、Python スクリプトのファイル名を引数に指定してスクリプトとして実"
"行し、 import されているモジュールのレポートを出力させることもできます。"

#: ../../library/modulefinder.rst:21
msgid ""
"Record that the package named *pkg_name* can be found in the specified "
"*path*."
msgstr ""
"*pkg_name* という名前のパッケージの在り処が *path* であることを記録します。"

#: ../../library/modulefinder.rst:26
msgid ""
"Allows specifying that the module named *oldname* is in fact the package "
"named *newname*."
msgstr ""
"実際にはパッケージ内で *oldname* という名前になっているモジュールを "
"*newname* という名前で指定できるようにします。"

#: ../../library/modulefinder.rst:32
msgid ""
"This class provides :meth:`run_script` and :meth:`report` methods to "
"determine the set of modules imported by a script. *path* can be a list of "
"directories to search for modules; if not specified, ``sys.path`` is used.  "
"*debug* sets the debugging level; higher values make the class print "
"debugging messages about what it's doing. *excludes* is a list of module "
"names to exclude from the analysis. *replace_paths* is a list of ``(oldpath, "
"newpath)`` tuples that will be replaced in module paths."
msgstr ""
"このクラスでは :meth:`run_script` および :meth:`report`  メソッドを提供してい"
"ます。これらのメソッドは何らかのスクリプト中で import されているモジュールの"
"集合を調べます。 *path* はモジュールを検索する先のディレクトリ名からなるリス"
"トです。 *path* を指定しない場合、 ``sys.path`` を使います。 *debug* にはデ"
"バッグレベルを設定します; 値を大きくすると、実行している内容を表すデバッグ"
"メッセージを出力します。 *excludes* は検索から除外するモジュール名です。 "
"*replace_paths* には、モジュールパス内で置き換えられるパスをタプル "
"``(oldpath, newpath)`` からなるリストで指定します。"

#: ../../library/modulefinder.rst:43
msgid ""
"Print a report to standard output that lists the modules imported by the "
"script and their paths, as well as modules that are missing or seem to be "
"missing."
msgstr ""
"スクリプトで import しているモジュールと、そのパスからなるリストを列挙したレ"
"ポートを標準出力に出力します。モジュールを見つけられなかったり、モジュールが"
"ないように見える場合にも報告します。"

#: ../../library/modulefinder.rst:49
msgid ""
"Analyze the contents of the *pathname* file, which must contain Python code."
msgstr ""
"*pathname* に指定したファイルの内容を解析します。ファイルには Python コードが"
"入っていなければなりません。"

#: ../../library/modulefinder.rst:54
msgid ""
"A dictionary mapping module names to modules. See :ref:`modulefinder-"
"example`."
msgstr ""
"モジュール名をモジュールに結びつける辞書。 :ref:`modulefinder-example` を参照"
"して下さい。"

#: ../../library/modulefinder.rst:61
msgid "Example usage of :class:`ModuleFinder`"
msgstr ":class:`ModuleFinder` の使用例"

#: ../../library/modulefinder.rst:63
msgid "The script that is going to get analyzed later on (bacon.py)::"
msgstr "解析対象のスクリプトはこれ (bacon.py) です::"

#: ../../library/modulefinder.rst:78
msgid "The script that will output the report of bacon.py::"
msgstr "bacon.py のレポートを出力するスクリプトです::"

#: ../../library/modulefinder.rst:94
msgid "Sample output (may vary depending on the architecture)::"
msgstr "出力例です (アーキテクチャに依って違ってくるかもしれません)::"
