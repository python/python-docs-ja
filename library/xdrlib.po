# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xdrlib.rst:2
msgid ":mod:`xdrlib` --- Encode and decode XDR data"
msgstr ":mod:`xdrlib` --- XDR データのエンコードおよびデコード"

#: ../../library/xdrlib.rst:8
msgid "**Source code:** :source:`Lib/xdrlib.py`"
msgstr "**ソースコード:** :source:`Lib/xdrlib.py`"

#: ../../library/xdrlib.rst:14
msgid ""
"The :mod:`xdrlib` module is deprecated (see :pep:`PEP 594 <594#xdrlib>` for "
"details)."
msgstr ""

#: ../../library/xdrlib.rst:20
msgid ""
"The :mod:`xdrlib` module supports the External Data Representation Standard "
"as described in :rfc:`1014`, written by Sun Microsystems, Inc. June 1987.  "
"It supports most of the data types described in the RFC."
msgstr ""
":mod:`xdrlib` モジュールは外部データ表現標準 (External Data  Representation "
"Standard) のサポートを実現します。この標準は 1987 年に Sun Microsystems, "
"Inc. によって書かれ、 :rfc:`1014` で定義されています。このモジュールでは RFC "
"で記述されているほとんどのデータ型をサポートしています。"

#: ../../library/xdrlib.rst:24
msgid ""
"The :mod:`xdrlib` module defines two classes, one for packing variables into "
"XDR representation, and another for unpacking from XDR representation.  "
"There are also two exception classes."
msgstr ""
":mod:`xdrlib` モジュールでは 2 つのクラスが定義されています。一つは変数を "
"XDR 表現にパックするためのクラスで、もう一方は XDR 表現からアンパックするため"
"のものです。2 つの例外クラスが同様にして定義されています。"

#: ../../library/xdrlib.rst:31
msgid ""
":class:`Packer` is the class for packing data into XDR representation. The :"
"class:`Packer` class is instantiated with no arguments."
msgstr ""
":class:`Packer` はデータを XDR 表現にパックするためのクラスです。 :class:"
"`Packer` クラスのインスタンス生成は引数なしで行われます。"

#: ../../library/xdrlib.rst:37
msgid ""
"``Unpacker`` is the complementary class which unpacks XDR data values from a "
"string buffer.  The input buffer is given as *data*."
msgstr ""
"``Unpacker`` は Packer と対をなしていて、文字列バッファから XDR をアンパック"
"するためのクラスです。入力バッファ *data* を引数に与えてインスタンスを生成し"
"ます。"

#: ../../library/xdrlib.rst:45
msgid ":rfc:`1014` - XDR: External Data Representation Standard"
msgstr ":rfc:`1014` - XDR: External Data Representation Standard"

#: ../../library/xdrlib.rst:44
msgid ""
"This RFC defined the encoding of data which was XDR at the time this module "
"was originally written.  It has apparently been obsoleted by :rfc:`1832`."
msgstr ""
"この RFC が、かつてこのモジュールが最初に書かれた当時に XDR 標準であったデー"
"タのエンコード方法を定義していました。現在は :rfc:`1832` に更新されているよう"
"です。"

#: ../../library/xdrlib.rst:47
msgid ":rfc:`1832` - XDR: External Data Representation Standard"
msgstr ":rfc:`1832` - XDR: External Data Representation Standard"

#: ../../library/xdrlib.rst:48
msgid "Newer RFC that provides a revised definition of XDR."
msgstr "こちらが新しい方のRFCで、XDR の改訂版が定義されています。"

#: ../../library/xdrlib.rst:54
msgid "Packer Objects"
msgstr "Packer オブジェクト"

#: ../../library/xdrlib.rst:56
msgid ":class:`Packer` instances have the following methods:"
msgstr ":class:`Packer` インスタンスには以下のメソッドがあります:"

#: ../../library/xdrlib.rst:61
msgid "Returns the current pack buffer as a string."
msgstr "現在のパック処理用バッファを文字列で返します。"

#: ../../library/xdrlib.rst:66
msgid "Resets the pack buffer to the empty string."
msgstr "パック処理用バッファをリセットして、空文字にします。"

#: ../../library/xdrlib.rst:68
msgid ""
"In general, you can pack any of the most common XDR data types by calling "
"the appropriate ``pack_type()`` method.  Each method takes a single "
"argument, the value to pack.  The following simple data type packing methods "
"are supported: :meth:`pack_uint`, :meth:`pack_int`, :meth:`pack_enum`, :meth:"
"`pack_bool`, :meth:`pack_uhyper`, and :meth:`pack_hyper`."
msgstr ""
"一般的には、適切な ``pack_type()`` メソッドを使えば、一般に用いられているほと"
"んどの XDR データをパックすることができます。各々のメソッドは一つの引数をと"
"り、パックしたい値を与えます。単純なデータ型をパックするメソッドとして、以下"
"のメソッド: :meth:`pack_uint` 、 :meth:`pack_int` 、 :meth:`pack_enum` 、 :"
"meth:`pack_bool` 、 :meth:`pack_uhyper` そして :meth:`pack_hyper` がサポート"
"されています。"

#: ../../library/xdrlib.rst:77
msgid "Packs the single-precision floating point number *value*."
msgstr "単精度 (single-precision) の浮動小数点数 *value* をパックします。"

#: ../../library/xdrlib.rst:82
msgid "Packs the double-precision floating point number *value*."
msgstr "倍精度 (double-precision) の浮動小数点数 *value* をパックします。"

#: ../../library/xdrlib.rst:84
msgid "The following methods support packing strings, bytes, and opaque data:"
msgstr ""
"以下のメソッドは文字列、バイト列、不透明データ (opaque data) のパック処理をサ"
"ポートします:"

#: ../../library/xdrlib.rst:89
msgid ""
"Packs a fixed length string, *s*.  *n* is the length of the string but it is "
"*not* packed into the data buffer.  The string is padded with null bytes if "
"necessary to guaranteed 4 byte alignment."
msgstr ""
"固定長の文字列、*s* をパックします。*n* は文字列の長さですが、この値自体は"
"データバッファにはパック *されません*。4 バイトのアラインメントを保証するため"
"に、文字列は必要に応じて null  バイト列でパディングされます。"

#: ../../library/xdrlib.rst:96
msgid ""
"Packs a fixed length opaque data stream, similarly to :meth:`pack_fstring`."
msgstr ""
":meth:`pack_fstring` と同じく、固定長の不透明データストリームをパックします。"

#: ../../library/xdrlib.rst:101
msgid ""
"Packs a variable length string, *s*.  The length of the string is first "
"packed as an unsigned integer, then the string data is packed with :meth:"
"`pack_fstring`."
msgstr ""
"可変長の文字列 *s* をパックします。文字列の長さが最初に符号なし整数でパックさ"
"れ、続いて :meth:`pack_fstring` を使って文字列データがパックされます。"

#: ../../library/xdrlib.rst:108
msgid ""
"Packs a variable length opaque data string, similarly to :meth:`pack_string`."
msgstr ""
":meth:`pack_string` と同じく、可変長の不透明データ文字列をパックします。"

#: ../../library/xdrlib.rst:113
msgid "Packs a variable length byte stream, similarly to :meth:`pack_string`."
msgstr ":meth:`pack_string` と同じく、可変長のバイトストリームをパックします。"

#: ../../library/xdrlib.rst:115
msgid "The following methods support packing arrays and lists:"
msgstr "以下のメソッドはアレイやリストのパック処理をサポートします:"

#: ../../library/xdrlib.rst:120
msgid ""
"Packs a *list* of homogeneous items.  This method is useful for lists with "
"an indeterminate size; i.e. the size is not available until the entire list "
"has been walked.  For each item in the list, an unsigned integer ``1`` is "
"packed first, followed by the data value from the list.  *pack_item* is the "
"function that is called to pack the individual item.  At the end of the "
"list, an unsigned integer ``0`` is packed."
msgstr ""
"一様な項目からなる *list* をパックします。このメソッドはサイズ不定、すなわ"
"ち、全てのリスト内容を網羅するまでサイズが分からないリストに対して有用です。"
"リストのすべての項目に対し、最初に符号無し整数 ``1`` がパックされ、続いてリス"
"ト中のデータがパックされます。*pack_item* は個々の項目をパックするために呼び"
"出される関数です。リストの末端に到達すると、符号無し整数 ``0`` がパックされま"
"す。"

#: ../../library/xdrlib.rst:127
msgid ""
"For example, to pack a list of integers, the code might appear like this::"
msgstr ""
"例えば、整数のリストをパックするには、コードは以下のようになるはずです::"

#: ../../library/xdrlib.rst:136
msgid ""
"Packs a fixed length list (*array*) of homogeneous items.  *n* is the length "
"of the list; it is *not* packed into the buffer, but a :exc:`ValueError` "
"exception is raised if ``len(array)`` is not equal to *n*.  As above, "
"*pack_item* is the function used to pack each element."
msgstr ""
"一様な項目からなる固定長のリスト (*array*) をパックします。 *n* はリストの長"
"さです。この値はデータバッファにパック *されません* が、 ``len(array)`` が "
"*n* と等しくない場合、例外 :exc:`ValueError` が送出されます。上と同様に、 "
"*pack_item* は個々の要素をパック処理するための関数です。"

#: ../../library/xdrlib.rst:144
msgid ""
"Packs a variable length *list* of homogeneous items.  First, the length of "
"the list is packed as an unsigned integer, then each element is packed as "
"in :meth:`pack_farray` above."
msgstr ""
"一様の項目からなる可変長の *list* をパックします。まず、リストの長さが符号無"
"し整数でパックされ、つづいて各要素が上の :meth:`pack_farray` と同じやり方で"
"パックされます。"

#: ../../library/xdrlib.rst:152
msgid "Unpacker Objects"
msgstr "Unpacker オブジェクト"

#: ../../library/xdrlib.rst:154
msgid "The :class:`Unpacker` class offers the following methods:"
msgstr ":class:`Unpacker` クラスは以下のメソッドを提供します:"

#: ../../library/xdrlib.rst:159
msgid "Resets the string buffer with the given *data*."
msgstr "文字列バッファを *data* でリセットします。"

#: ../../library/xdrlib.rst:164
msgid "Returns the current unpack position in the data buffer."
msgstr "データバッファ中の現在のアンパック処理位置を返します。"

#: ../../library/xdrlib.rst:169
msgid ""
"Sets the data buffer unpack position to *position*.  You should be careful "
"about using :meth:`get_position` and :meth:`set_position`."
msgstr ""
"データバッファ中のアンパック処理位置を *position* に設定します。 :meth:"
"`get_position` および :meth:`set_position` は注意して使わなければなりません。"

#: ../../library/xdrlib.rst:175
msgid "Returns the current unpack data buffer as a string."
msgstr "現在のアンパック処理用データバッファを文字列で返します。"

#: ../../library/xdrlib.rst:180
msgid ""
"Indicates unpack completion.  Raises an :exc:`Error` exception if all of the "
"data has not been unpacked."
msgstr ""
"アンパック処理を終了させます。全てのデータがまだアンパックされていなければ、"
"例外 :exc:`Error` が送出されます。"

#: ../../library/xdrlib.rst:183
msgid ""
"In addition, every data type that can be packed with a :class:`Packer`, can "
"be unpacked with an :class:`Unpacker`.  Unpacking methods are of the form "
"``unpack_type()``, and take no arguments.  They return the unpacked object."
msgstr ""
"上のメソッドに加えて、 :class:`Packer` でパック処理できるデータ型はいずれも :"
"class:`Unpacker` でアンパック処理できます。アンパック処理メソッドは "
"``unpack_type()`` の形式をとり、引数をとりません。これらのメソッドはアンパッ"
"クされたデータオブジェクトを返します。"

#: ../../library/xdrlib.rst:190
msgid "Unpacks a single-precision floating point number."
msgstr "単精度の浮動小数点数をアンパックします。"

#: ../../library/xdrlib.rst:195
msgid ""
"Unpacks a double-precision floating point number, similarly to :meth:"
"`unpack_float`."
msgstr ""
":meth:`unpack_float` と同様に、倍精度の浮動小数点数をアンパックします。"

#: ../../library/xdrlib.rst:198
msgid ""
"In addition, the following methods unpack strings, bytes, and opaque data:"
msgstr ""
"上のメソッドに加えて、文字列、バイト列、不透明データをアンパックする以下のメ"
"ソッドが提供されています:"

#: ../../library/xdrlib.rst:203
msgid ""
"Unpacks and returns a fixed length string.  *n* is the number of characters "
"expected.  Padding with null bytes to guaranteed 4 byte alignment is assumed."
msgstr ""
"固定長の文字列をアンパックして返します。*n* は予想される文字列の長さです。4 "
"バイトのアラインメントを保証するために null バイトによるパディングが行われて"
"いるものと仮定して処理を行います。"

#: ../../library/xdrlib.rst:209
msgid ""
"Unpacks and returns a fixed length opaque data stream, similarly to :meth:"
"`unpack_fstring`."
msgstr ""
":meth:`unpack_fstring` と同様に、固定長の不透明データストリームをアンパックし"
"て返します。"

#: ../../library/xdrlib.rst:215
msgid ""
"Unpacks and returns a variable length string.  The length of the string is "
"first unpacked as an unsigned integer, then the string data is unpacked "
"with :meth:`unpack_fstring`."
msgstr ""
"可変長の文字列をアンパックして返します。最初に文字列の長さが符号無し整数とし"
"てアンパックされ、次に :meth:`unpack_fstring` を使って文字列データがアンパッ"
"クされます。"

#: ../../library/xdrlib.rst:222
msgid ""
"Unpacks and returns a variable length opaque data string, similarly to :meth:"
"`unpack_string`."
msgstr ""
":meth:`unpack_string` と同様に、可変長の不透明データ文字列をアンパックして返"
"します。"

#: ../../library/xdrlib.rst:228
msgid ""
"Unpacks and returns a variable length byte stream, similarly to :meth:"
"`unpack_string`."
msgstr ""
":meth:`unpack_string` と同様に、可変長のバイトストリームをアンパックして返し"
"ます。"

#: ../../library/xdrlib.rst:231
msgid "The following methods support unpacking arrays and lists:"
msgstr "以下メソッドはアレイおよびリストのアンパック処理をサポートします:"

#: ../../library/xdrlib.rst:236
msgid ""
"Unpacks and returns a list of homogeneous items.  The list is unpacked one "
"element at a time by first unpacking an unsigned integer flag.  If the flag "
"is ``1``, then the item is unpacked and appended to the list.  A flag of "
"``0`` indicates the end of the list.  *unpack_item* is the function that is "
"called to unpack the items."
msgstr ""
"一様な項目からなるリストをアンパック処理して返します。リストは、まず符号無し"
"整数によるフラグをアンパックすることで、一度に 1 要素づつアンパック処理されま"
"す。フラグが ``1`` の場合、要素はアンパックされ、返り値のリストに追加されま"
"す。フラグが ``0`` の場合、リストの終端を示します。*unpack_item* は個々の項目"
"をアンパック処理するために呼び出される関数です。"

#: ../../library/xdrlib.rst:245
msgid ""
"Unpacks and returns (as a list) a fixed length array of homogeneous items.  "
"*n* is number of list elements to expect in the buffer. As above, "
"*unpack_item* is the function used to unpack each element."
msgstr ""
"一様な項目からなる固定長のアレイをアンパックして（リストとして）返します。"
"*n* はバッファ内に存在すると期待されるリストの要素数です。上と同様に、"
"*unpack_item* は各要素をアンパックするために使われる関数です。"

#: ../../library/xdrlib.rst:252
msgid ""
"Unpacks and returns a variable length *list* of homogeneous items. First, "
"the length of the list is unpacked as an unsigned integer, then each element "
"is unpacked as in :meth:`unpack_farray` above."
msgstr ""
"一様な項目からなる可変長の *list* をアンパックして返します。まず、リストの長"
"さが符号無し整数としてアンパックされ、続いて各要素が上の :meth:"
"`unpack_farray` のようにしてアンパック処理されます。"

#: ../../library/xdrlib.rst:260
msgid "Exceptions"
msgstr "例外"

#: ../../library/xdrlib.rst:262
msgid "Exceptions in this module are coded as class instances:"
msgstr "このモジュールでの例外はクラスインスタンスとしてコードされています:"

#: ../../library/xdrlib.rst:267
msgid ""
"The base exception class.  :exc:`Error` has a single public attribute :attr:"
"`msg` containing the description of the error."
msgstr ""
"ベースとなる例外クラスです。 :exc:`Error` public な属性として :attr:`msg` を"
"持ち、エラーの詳細が収められています。"

#: ../../library/xdrlib.rst:273
msgid ""
"Class derived from :exc:`Error`.  Contains no additional instance variables."
msgstr ""
":exc:`Error` から派生したクラスです。インスタンス変数は追加されていません。"

#: ../../library/xdrlib.rst:275
msgid "Here is an example of how you would catch one of these exceptions::"
msgstr "これらの例外を補足する方法を以下の例に示します::"
