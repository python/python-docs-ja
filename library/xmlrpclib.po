# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2015-2016
# Inada Naoki <songofacandy@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2021-05-24 13:29+0000\n"
"Last-Translator: Takanori Suzuki <takanori@takanory.net>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xmlrpclib.rst:2
msgid ":mod:`xmlrpclib` --- XML-RPC client access"
msgstr ":mod:`xmlrpclib` --- XML-RPC クライアントアクセス"

#: ../../library/xmlrpclib.rst:10
msgid ""
"The :mod:`xmlrpclib` module has been renamed to :mod:`xmlrpc.client` in "
"Python 3.  The :term:`2to3` tool will automatically adapt imports when "
"converting your sources to Python 3."
msgstr ""
":mod:`xmlrpclib` モジュールは、Python 3 では :mod:`xmlrpc.client` にリネーム"
"されました。 :term:`2to3` ツールは、自動的にソースコードのimportをPython 3用"
"に修正します。"

#: ../../library/xmlrpclib.rst:20
msgid "**Source code:** :source:`Lib/xmlrpclib.py`"
msgstr "**Source code:** :source:`Lib/xmlrpclib.py`"

#: ../../library/xmlrpclib.rst:24
msgid ""
"XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP(S) "
"as a transport.  With it, a client can call methods with parameters on a "
"remote server (the server is named by a URI) and get back structured data.  "
"This module supports writing XML-RPC client code; it handles all the details "
"of translating between conformable Python objects and XML on the wire."
msgstr ""
"XML-RPCはXMLを利用した遠隔手続き呼び出し(Remote Procedure Call)の一種で、"
"HTTP(S)をトランスポートとして使用します。XML- RPCでは、クライアントはリモート"
"サーバ(URIで指定されたサーバ)上のメソッドをパラメータを指定して呼び出し、構造"
"化されたデータを取得します。このモジュールは、XML-RPCクライアントの開発をサ"
"ポートしており、Pythonオブジェクトに適合する転送用XMLの変換の全てを行います。"

#: ../../library/xmlrpclib.rst:33
msgid ""
"The :mod:`xmlrpclib` module is not secure against maliciously constructed "
"data.  If you need to parse untrusted or unauthenticated data see :ref:`xml-"
"vulnerabilities`."
msgstr ""
":mod:`xmlrpclib` モジュールは悪意を持って構築されたデータに対して安全ではあり"
"ません。信頼できないデータや認証されていないデータを解析する必要があるばあい"
"は :ref:`xml-vulnerabilities` を参照してください。"

#: ../../library/xmlrpclib.rst:39
msgid ""
"For HTTPS URIs, :mod:`xmlrpclib` now performs all the necessary certificate "
"and hostname checks by default."
msgstr ""

#: ../../library/xmlrpclib.rst:44
msgid ""
"A :class:`ServerProxy` instance is an object that manages communication with "
"a remote XML-RPC server.  The required first argument is a URI (Uniform "
"Resource Indicator), and will normally be the URL of the server.  The "
"optional second argument is a transport factory instance; by default it is "
"an internal :class:`SafeTransport` instance for https: URLs and an internal "
"HTTP :class:`Transport` instance otherwise.  The optional third argument is "
"an encoding, by default UTF-8. The optional fourth argument is a debugging "
"flag."
msgstr ""
":class:`ServerProxy` は、リモートのXML-RPCサーバとの通信を管理するオブジェク"
"トです。最初のパラメータはURI(Uniform Resource Indicator)で、通常はサーバの"
"URLを指定します。2番目のパラメータにはトランスポート・ファクトリを指定する事"
"ができます。トランスポート・ファクトリを省略した場合、URLが https: ならモ"
"ジュール内部の :class:`SafeTransport` インスタンスを使用し、それ以外の場合に"
"はモジュール内部の :class:`Transport` インスタンスを使用します。オプションの "
"3 番目の引数はエンコード方法で、デフォルトでは UTF-8 です。オプションの 4 番"
"目の引数はデバッグフラグです。 "

#: ../../library/xmlrpclib.rst:52
msgid ""
"The following parameters govern the use of the returned proxy instance. If "
"*allow_none* is true,  the Python constant ``None`` will be translated into "
"XML; the default behaviour is for ``None`` to raise a :exc:`TypeError`. This "
"is a commonly-used extension to the XML-RPC specification, but isn't "
"supported by all clients and servers; see `http://ontosys.com/xml-rpc/"
"extensions.php <https://web.archive.org/web/20130120074804/http://ontosys."
"com/xml-rpc/extensions.php>`_ for a description. The *use_datetime* flag can "
"be used to cause date/time values to be presented as :class:`datetime."
"datetime` objects; this is false by default. :class:`datetime.datetime` "
"objects may be passed to calls."
msgstr ""

#: ../../library/xmlrpclib.rst:63
msgid ""
"Both the HTTP and HTTPS transports support the URL syntax extension for HTTP "
"Basic Authentication: ``http://user:pass@host:port/path``.  The ``user:"
"pass`` portion will be base64-encoded as an HTTP 'Authorization' header, and "
"sent to the remote server as part of the connection process when invoking an "
"XML-RPC method.  You only need to use this if the remote server requires a "
"Basic Authentication user and password. If an HTTPS URL is provided, "
"*context* may be :class:`ssl.SSLContext` and configures the SSL settings of "
"the underlying HTTPS connection."
msgstr ""

#: ../../library/xmlrpclib.rst:72
msgid ""
"The returned instance is a proxy object with methods that can be used to "
"invoke corresponding RPC calls on the remote server.  If the remote server "
"supports the introspection API, the proxy can also be used to query the "
"remote server for the methods it supports (service discovery) and fetch "
"other server-associated metadata."
msgstr ""
"生成されるインスタンスはリモートサーバへのプロクシオブジェクトで、RPC呼び出し"
"を行う為のメソッドを持ちます。リモートサーバがイントロスペクション APIをサ"
"ポートしている場合は、リモートサーバのサポートするメソッドを検索 (サービス検"
"索)やサーバのメタデータの取得なども行えます。"

#: ../../library/xmlrpclib.rst:78
msgid ""
"Types that are conformable (e.g. that can be marshalled through XML), "
"include the following (and except where noted, they are unmarshalled as the "
"same Python type):"
msgstr ""
"以下の型をXMLに変換(XMLを通じてマーシャルする)する事ができます (特別な指定が"
"ない限り、逆変換でも同じ型として変換されます):"

#: ../../library/xmlrpclib.rst:85
msgid "XML-RPC type"
msgstr "XML-RPC の型"

#: ../../library/xmlrpclib.rst:85
msgid "Python type"
msgstr "Python の型"

#: ../../library/xmlrpclib.rst:87
msgid "``boolean``"
msgstr "``boolean``"

#: ../../library/xmlrpclib.rst:87
msgid ":class:`bool`"
msgstr ":class:`bool`"

#: ../../library/xmlrpclib.rst:89
msgid "``int`` or ``i4``"
msgstr "``int`` または ``i4``"

#: ../../library/xmlrpclib.rst:89
msgid ":class:`int` or :class:`long` in range from -2147483648 to 2147483647."
msgstr ""

#: ../../library/xmlrpclib.rst:92
msgid "``double``"
msgstr "``double``"

#: ../../library/xmlrpclib.rst:92
msgid ":class:`float`"
msgstr ":class:`float`"

#: ../../library/xmlrpclib.rst:94
msgid "``string``"
msgstr "``string``"

#: ../../library/xmlrpclib.rst:94
msgid ":class:`str` or :class:`unicode`"
msgstr ""

#: ../../library/xmlrpclib.rst:96
msgid "``array``"
msgstr "``array``"

#: ../../library/xmlrpclib.rst:96
msgid ""
":class:`list` or :class:`tuple` containing conformable elements.  Arrays are "
"returned as :class:`lists <list>`."
msgstr ""
"適合する要素を持つ :class:`list` または :class:`tuple`。array は :class:"
"`list` として返します。"

#: ../../library/xmlrpclib.rst:100
msgid "``struct``"
msgstr "``struct``"

#: ../../library/xmlrpclib.rst:100
msgid ""
":class:`dict`.  Keys must be strings, values may be any conformable type.  "
"Objects of user-defined classes can be passed in; only their :attr:`~object."
"__dict__` attribute is transmitted."
msgstr ""
":class:`dict` 。キーは文字列のみ。全ての値は変換可能でなくてはならない。ユー"
"ザー定義型を渡すこともできます。 :attr:`~object.__dict__` の属性のみ転送され"
"ます。"

#: ../../library/xmlrpclib.rst:105
msgid "``dateTime.iso8601``"
msgstr "``dateTime.iso8601``"

#: ../../library/xmlrpclib.rst:105
msgid ""
":class:`DateTime` or :class:`datetime.datetime`. Returned type depends on "
"values of the *use_datetime* flags."
msgstr ""

#: ../../library/xmlrpclib.rst:109
msgid "``base64``"
msgstr "``base64``"

#: ../../library/xmlrpclib.rst:109
msgid ":class:`Binary`"
msgstr ""

#: ../../library/xmlrpclib.rst:111
msgid "``nil``"
msgstr "``nil``"

#: ../../library/xmlrpclib.rst:111
msgid ""
"The ``None`` constant.  Passing is allowed only if *allow_none* is true."
msgstr "``None`` 定数。 *allow_none* が真の場合にのみ渡すことが出来ます。"

#: ../../library/xmlrpclib.rst:115
msgid ""
"This is the full set of data types supported by XML-RPC.  Method calls may "
"also raise a special :exc:`Fault` instance, used to signal XML-RPC server "
"errors, or :exc:`ProtocolError` used to signal an error in the HTTP/HTTPS "
"transport layer. Both :exc:`Fault` and :exc:`ProtocolError` derive from a "
"base class called :exc:`Error`.  Note that even though starting with Python "
"2.2 you can subclass built-in types, the xmlrpclib module currently does not "
"marshal instances of such subclasses."
msgstr ""
"上記のXML-RPCでサポートする全データ型を使用することができます。メソッド呼び出"
"し時、XML- RPCサーバエラーが発生すると :exc:`Fault` インスタンスを送出し、"
"HTTP/HTTPSトランスポート層でエラーが発生した場合には :exc:`ProtocolError` を"
"送出します。 :exc:`Error` をベースとする :exc:`Fault` と :exc:"
"`ProtocolError` の両方が発生します。 Python 2.2以降では組み込み型のサブクラス"
"を作成する事ができますが、現在のところxmlrpclibではそのようなサブクラスのイン"
"スタンスをマーシャルすることはできません。"

#: ../../library/xmlrpclib.rst:123
msgid ""
"When passing strings, characters special to XML such as ``<``, ``>``, and "
"``&`` will be automatically escaped.  However, it's the caller's "
"responsibility to ensure that the string is free of characters that aren't "
"allowed in XML, such as the control characters with ASCII values between 0 "
"and 31 (except, of course, tab, newline and carriage return); failing to do "
"this will result in an XML-RPC request that isn't well-formed XML.  If you "
"have to pass arbitrary strings via XML-RPC, use the :class:`Binary` wrapper "
"class described below."
msgstr ""
"文字列を渡す場合、 ``<``, ``>``, ``&`` などのXMLで特殊な意味を持つ文字は自動"
"的にエスケープされます。しかし、ASCII値0〜31の制御文字(もちろん、タブ'TAB',改"
"行'LF',リターン'CR'は除く)などのXMLで使用することのできない文字を使用すること"
"はできず、使用するとそのXML-RPCリクエストはwell-formedなXMLとはなりません。そ"
"のような文字列を渡す必要がある場合は、後述の :class:`Binary` ラッパクラスを使"
"用してください。"

#: ../../library/xmlrpclib.rst:131
msgid ""
":class:`Server` is retained as an alias for :class:`ServerProxy` for "
"backwards compatibility.  New code should use :class:`ServerProxy`."
msgstr ""
":class:`Server` は、後方互換性の為に :class:`ServerProxy` の別名として残され"
"ています。新しいコードでは :class:`ServerProxy` を使用してください。"

#: ../../library/xmlrpclib.rst:134 ../../library/xmlrpclib.rst:557
msgid "The *use_datetime* flag was added."
msgstr "*use_datetime* フラグが追加されました"

#: ../../library/xmlrpclib.rst:137
msgid ""
"Instances of :term:`new-style class`\\es can be passed in if they have an "
"*__dict__* attribute and don't have a base class that is marshalled in a "
"special way."
msgstr ""
"ニュースタイルクラス(:term:`new-style class`)も、 *__dict__* 属性を持ってい"
"て、特別な方法でマーシャルされている親クラスを持っていなければ、渡すことがで"
"きます。"

#: ../../library/xmlrpclib.rst:142
msgid "Added the *context* argument."
msgstr "*context* 引数が追加されました。"

#: ../../library/xmlrpclib.rst:150
msgid "`XML-RPC HOWTO <http://www.tldp.org/HOWTO/XML-RPC-HOWTO/index.html>`_"
msgstr "`XML-RPC HOWTO <http://www.tldp.org/HOWTO/XML-RPC-HOWTO/index.html>`_"

#: ../../library/xmlrpclib.rst:149
msgid ""
"A good description of XML-RPC operation and client software in several "
"languages. Contains pretty much everything an XML-RPC client developer needs "
"to know."
msgstr ""
"数種類のプログラミング言語で記述された XML-RPCの操作とクライアントソフトウェ"
"アの素晴らしい説明が掲載されています。 XML- RPCクライアントの開発者が知ってお"
"くべきことがほとんど全て記載されています。"

#: ../../library/xmlrpclib.rst:153
msgid ""
"`XML-RPC Introspection <http://xmlrpc-c.sourceforge.net/introspection.html>`_"
msgstr ""
"`XML-RPC Introspection <http://xmlrpc-c.sourceforge.net/introspection.html>`_"

#: ../../library/xmlrpclib.rst:153
msgid "Describes the XML-RPC protocol extension for introspection."
msgstr ""
"インストロペクションをサポートする、 XML-RPC プロトコルの拡張を解説していま"
"す。"

#: ../../library/xmlrpclib.rst:156
msgid "`XML-RPC Specification <http://www.xmlrpc.com/spec>`_"
msgstr "`XML-RPC Specification <http://www.xmlrpc.com/spec>`_"

#: ../../library/xmlrpclib.rst:156
msgid "The official specification."
msgstr "公式の仕様"

#: ../../library/xmlrpclib.rst:161
msgid "`Unofficial XML-RPC Errata <http://effbot.org/zone/xmlrpc-errata.htm>`_"
msgstr "`XML-RPC 非公式正誤表 <http://effbot.org/zone/xmlrpc-errata.htm>`_"

#: ../../library/xmlrpclib.rst:159
msgid ""
"Fredrik Lundh's \"unofficial errata, intended to clarify certain details in "
"the XML-RPC specification, as well as hint at 'best practices' to use when "
"designing your own XML-RPC implementations.\""
msgstr ""
"Fredrik Lundh による \"unofficial errata, intended to clarify certain "
"details in the XML-RPC specification, as well as hint at 'best practices' to "
"use when designing your own XML-RPC implementations.\""

#: ../../library/xmlrpclib.rst:167
msgid "ServerProxy Objects"
msgstr "ServerProxy オブジェクト"

#: ../../library/xmlrpclib.rst:169
msgid ""
"A :class:`ServerProxy` instance has a method corresponding to each remote "
"procedure call accepted by the XML-RPC server.  Calling the method performs "
"an RPC, dispatched by both name and argument signature (e.g. the same method "
"name can be overloaded with multiple argument signatures).  The RPC finishes "
"by returning a value, which may be either returned data in a conformant type "
"or a :class:`Fault` or :class:`ProtocolError` object indicating an error."
msgstr ""
":class:`ServerProxy` インスタンスの各メソッドはそれぞれXML-RPCサーバの遠隔手"
"続き呼び出しに対応しており、メソッドが呼び出されると名前と引数をシグネチャと"
"してRPCを実行します(同じ名前のメソッドでも、異なる引数シグネチャによってオー"
"バロードされます)。RPC実行後、変換された値を返すか、または :class:`Fault` オ"
"ブジェクトもしくは :class:`ProtocolError` オブジェクトでエラーを通知します。"

#: ../../library/xmlrpclib.rst:176
msgid ""
"Servers that support the XML introspection API support some common methods "
"grouped under the reserved :attr:`~ServerProxy.system` attribute:"
msgstr ""
"予約属性 :attr:`~ServerProxy.system` から、XMLイントロスペクションAPIの一般的"
"なメソッドを利用する事ができます:"

#: ../../library/xmlrpclib.rst:182
msgid ""
"This method returns a list of strings, one for each (non-system) method "
"supported by the XML-RPC server."
msgstr ""
"XML-RPCサーバがサポートするメソッド名(system以外)を格納する文字列のリストを返"
"します。"

#: ../../library/xmlrpclib.rst:188
msgid ""
"This method takes one parameter, the name of a method implemented by the XML-"
"RPC server. It returns an array of possible signatures for this method. A "
"signature is an array of types. The first of these types is the return type "
"of the method, the rest are parameters."
msgstr ""
"XML-RPCサーバで実装されているメソッドの名前を指定し、利用可能なシグネチャの配"
"列を取得します。シグネチャは型のリストで、先頭の型は戻り値の型を示し、以降は"
"パラメータの型を示します。"

#: ../../library/xmlrpclib.rst:193
msgid ""
"Because multiple signatures (ie. overloading) is permitted, this method "
"returns a list of signatures rather than a singleton."
msgstr ""
"XML-RPCでは複数のシグネチャ(オーバロード)を使用することができるので、単独のシ"
"グネチャではなく、シグネチャのリストを返します。"

#: ../../library/xmlrpclib.rst:196
msgid ""
"Signatures themselves are restricted to the top level parameters expected by "
"a method. For instance if a method expects one array of structs as a "
"parameter, and it returns a string, its signature is simply \"string, "
"array\". If it expects three integers and returns a string, its signature is "
"\"string, int, int, int\"."
msgstr ""
"シグネチャは、メソッドが使用する最上位のパラメータにのみ適用されます。例えば"
"あるメソッドのパラメータが構造体の配列で戻り値が文字列の場合、シグネチャは単"
"に\"string, array\" となります。パラメータが三つの整数で戻り値が文字列の場合"
"は\"string, int, int, int\"となります。"

#: ../../library/xmlrpclib.rst:201
msgid ""
"If no signature is defined for the method, a non-array value is returned. In "
"Python this means that the type of the returned  value will be something "
"other than list."
msgstr ""
"メソッドにシグネチャが定義されていない場合、配列以外の値が返ります。 Pythonで"
"は、この値はlist以外の値となります。"

#: ../../library/xmlrpclib.rst:208
msgid ""
"This method takes one parameter, the name of a method implemented by the XML-"
"RPC server.  It returns a documentation string describing the use of that "
"method. If no such string is available, an empty string is returned. The "
"documentation string may contain HTML markup."
msgstr ""
"XML-RPCサーバで実装されているメソッドの名前を指定し、そのメソッドを解説する文"
"書文字列を取得します。文書文字列を取得できない場合は空文字列を返します。文書"
"文字列にはHTMLマークアップが含まれます。"

#: ../../library/xmlrpclib.rst:217
msgid "Boolean Objects"
msgstr "Boolean オブジェクト"

#: ../../library/xmlrpclib.rst:219
msgid ""
"This class may be initialized from any Python value; the instance returned "
"depends only on its truth value.  It supports various Python operators "
"through :meth:`__cmp__`, :meth:`__repr__`, :meth:`__int__`, and :meth:"
"`__nonzero__` methods, all implemented in the obvious ways."
msgstr ""
"このクラスは全てのPythonの値で初期化することができ、生成されるインスタンスは"
"指定した値の真偽値によってのみ決まります。Booleanという名前から想像される通り"
"に各種のPython演算子を実装しており、 :meth:`__cmp__`, :meth:`__repr__`, :"
"meth:`__int__`, :meth:`__nonzero__` で定義される演算子を使用することができま"
"す。"

#: ../../library/xmlrpclib.rst:224
msgid ""
"It also has the following method, supported mainly for internal use by the "
"unmarshalling code:"
msgstr "以下のメソッドは、主に内部的にアンマーシャル時に使用されます:"

#: ../../library/xmlrpclib.rst:230
msgid ""
"Write the XML-RPC encoding of this Boolean item to the out stream object."
msgstr ""
"出力ストリームオブジェクト ``out`` に、XML-RPCエンコーディングのBoolean値を出"
"力します。"

#: ../../library/xmlrpclib.rst:232 ../../library/xmlrpclib.rst:279
msgid "A working example follows. The server code::"
msgstr "動作する例です。サーバー側::"

#: ../../library/xmlrpclib.rst:245 ../../library/xmlrpclib.rst:294
#: ../../library/xmlrpclib.rst:404 ../../library/xmlrpclib.rst:512
msgid "The client code for the preceding server::"
msgstr "上記のサーバーに対するクライアント側::"

#: ../../library/xmlrpclib.rst:256
msgid "DateTime Objects"
msgstr "DateTime オブジェクト"

#: ../../library/xmlrpclib.rst:260
msgid ""
"This class may be initialized with seconds since the epoch, a time tuple, an "
"ISO 8601 time/date string, or a :class:`datetime.datetime` instance.  It has "
"the following methods, supported mainly for internal use by the marshalling/"
"unmarshalling code:"
msgstr ""
"このクラスは、エポックからの秒数、タプルで表現された時刻、ISO 8601形式の時間/"
"日付文字列、 :class:`datetime.datetime`, のインスタンスのいずれかで初期化する"
"ことができます。このクラスには以下のメソッドがあり、主にコードをマーシャル/ア"
"ンマーシャルするための内部処理を行います:"

#: ../../library/xmlrpclib.rst:268
msgid "Accept a string as the instance's new time value."
msgstr "文字列をインスタンスの新しい時間を示す値として指定します。"

#: ../../library/xmlrpclib.rst:273
msgid ""
"Write the XML-RPC encoding of this :class:`DateTime` item to the *out* "
"stream object."
msgstr ""
"出力ストリームオブジェクト *out* に、XML-RPCエンコーディングの :class:"
"`DateTime` 値を出力します。"

#: ../../library/xmlrpclib.rst:276
msgid ""
"It also supports certain of Python's built-in operators through :meth:"
"`__cmp__` and :meth:`__repr__` methods."
msgstr ""

#: ../../library/xmlrpclib.rst:309
msgid "Binary Objects"
msgstr "Binary オブジェクト"

#: ../../library/xmlrpclib.rst:313
msgid ""
"This class may be initialized from string data (which may include NULs). The "
"primary access to the content of a :class:`Binary` object is provided by an "
"attribute:"
msgstr ""
"このクラスは、文字列(NULを含む)で初期化することができます。 :class:`Binary` "
"の内容は、属性で参照します。"

#: ../../library/xmlrpclib.rst:320
msgid ""
"The binary data encapsulated by the :class:`Binary` instance.  The data is "
"provided as an 8-bit string."
msgstr ""
":class:`Binary` インスタンスがカプセル化しているバイナリデータ。このデータは"
"8bitクリーンです。"

#: ../../library/xmlrpclib.rst:323
msgid ""
":class:`Binary` objects have the following methods, supported mainly for "
"internal use by the marshalling/unmarshalling code:"
msgstr ""
":class:`Binary` オブジェクトは以下のメソッドを持ち、主に内部的にマーシャル/ア"
"ンマーシャル時に使用されます:"

#: ../../library/xmlrpclib.rst:329
msgid "Accept a base64 string and decode it as the instance's new data."
msgstr "指定されたbase64文字列をデコードし、インスタンスのデータとします。"

#: ../../library/xmlrpclib.rst:334
msgid ""
"Write the XML-RPC base 64 encoding of this binary item to the *out* stream "
"object."
msgstr ""
"バイナリ値をbase64でエンコードし、出力ストリームオブジェクト *out* に出力しま"
"す。"

#: ../../library/xmlrpclib.rst:336
msgid ""
"The encoded data will have newlines every 76 characters as per `RFC 2045 "
"section 6.8 <https://tools.ietf.org/html/rfc2045#section-6.8>`_, which was "
"the de facto standard base64 specification when the XML-RPC spec was written."
msgstr ""

#: ../../library/xmlrpclib.rst:341
msgid ""
"It also supports certain of Python's built-in operators through a :meth:"
"`__cmp__` method."
msgstr "また、 :meth:`__cmp__` で定義される演算子を使用することができます。"

#: ../../library/xmlrpclib.rst:344
msgid ""
"Example usage of the binary objects.  We're going to transfer an image over "
"XMLRPC::"
msgstr "バイナリオブジェクトの使用例です。 XML-RPCごしに画像を転送します。 ::"

#: ../../library/xmlrpclib.rst:360
msgid "The client gets the image and saves it to a file::"
msgstr "クライアント側は画像を取得して、ファイルに保存します。 ::"

#: ../../library/xmlrpclib.rst:371
msgid "Fault Objects"
msgstr "Fault オブジェクト"

#: ../../library/xmlrpclib.rst:375
msgid ""
"A :class:`Fault` object encapsulates the content of an XML-RPC fault tag. "
"Fault objects have the following attributes:"
msgstr ""
":class:`Fault` オブジェクトは、XML-RPCのfaultタグの内容をカプセル化しており、"
"以下の属性を持ちます:"

#: ../../library/xmlrpclib.rst:381
msgid "A string indicating the fault type."
msgstr "失敗のタイプを示す文字列。"

#: ../../library/xmlrpclib.rst:386
msgid "A string containing a diagnostic message associated with the fault."
msgstr "失敗の診断メッセージを含む文字列。"

#: ../../library/xmlrpclib.rst:388
msgid ""
"In the following example we're going to intentionally cause a :exc:`Fault` "
"by returning a complex type object.  The server code::"
msgstr ""
"以下のサンプルでは、複素数型のオブジェクトを返そうとして、故意に :exc:"
"`Fault` を起こしています。 ::"

#: ../../library/xmlrpclib.rst:421
msgid "ProtocolError Objects"
msgstr "ProtocolError オブジェクト"

#: ../../library/xmlrpclib.rst:425
msgid ""
"A :class:`ProtocolError` object describes a protocol error in the underlying "
"transport layer (such as a 404 'not found' error if the server named by the "
"URI does not exist).  It has the following attributes:"
msgstr ""
":class:`ProtocolError` オブジェクトはトランスポート層で発生したエラー(URI で"
"指定したサーバが見つからなかった場合に発生する404 'not found'など)の内容を示"
"し、以下の属性を持ちます:"

#: ../../library/xmlrpclib.rst:432
msgid "The URI or URL that triggered the error."
msgstr "エラーの原因となったURIまたはURL。"

#: ../../library/xmlrpclib.rst:437
msgid "The error code."
msgstr "エラーコード。"

#: ../../library/xmlrpclib.rst:442
msgid "The error message or diagnostic string."
msgstr "エラーメッセージまたは診断文字列。"

#: ../../library/xmlrpclib.rst:447
msgid ""
"A string containing the headers of the HTTP/HTTPS request that triggered the "
"error."
msgstr "エラーの原因となったHTTP/HTTPSリクエストを含む文字列。"

#: ../../library/xmlrpclib.rst:450
msgid ""
"In the following example we're going to intentionally cause a :exc:"
"`ProtocolError` by providing a URI that doesn't point to an XMLRPC server::"
msgstr ""

#: ../../library/xmlrpclib.rst:468
msgid "MultiCall Objects"
msgstr "MultiCall オブジェクト"

#: ../../library/xmlrpclib.rst:472
msgid ""
"The :class:`MultiCall` object provides a way to encapsulate multiple calls "
"to a remote server into a single request [#]_."
msgstr ""
"遠隔のサーバに対する複数の呼び出しをひとつのリクエストにカプセル化する方法"
"は、http://www.xmlrpc.com/discuss/msgReader%241208 で示されています。"

#: ../../library/xmlrpclib.rst:478
msgid ""
"Create an object used to boxcar method calls. *server* is the eventual "
"target of the call. Calls can be made to the result object, but they will "
"immediately return ``None``, and only store the call name and parameters in "
"the :class:`MultiCall` object. Calling the object itself causes all stored "
"calls to be transmitted as a single ``system.multicall`` request. The result "
"of this call is a :term:`generator`; iterating over this generator yields "
"the individual results."
msgstr ""
"巨大な (boxcar) メソッド呼び出しに使えるオブジェクトを作成します。 *server* "
"には最終的に呼び出しを行う対象を指定します。作成した MultiCall オブジェクトを"
"使って呼び出しを行うと、即座に ``None`` を返し、呼び出したい手続き名とパラメ"
"タを :class:`MultiCall` オブジェクトに保存するだけに留まります。オブジェクト"
"自体を呼び出すと、それまでに保存しておいたすべての呼び出しを単一の ``system."
"multicall`` リクエストの形で伝送します。呼び出し結果はジェネレータ(:term:"
"`generator`)になります。このジェネレータにわたってイテレーションを行うと、"
"個々の呼び出し結果を返します。"

#: ../../library/xmlrpclib.rst:486
msgid "A usage example of this class follows.  The server code ::"
msgstr "以下にこのクラスの使い方を示します。サーバー側のコード::"

#: ../../library/xmlrpclib.rst:528
msgid "Convenience Functions"
msgstr "補助関数"

#: ../../library/xmlrpclib.rst:533
msgid ""
"Convert any Python value to one of the XML-RPC Boolean constants, ``True`` "
"or ``False``."
msgstr ""
"Pythonの値を、XML-RPCのBoolean定数 ``True`` または ``False`` に変換します。"

#: ../../library/xmlrpclib.rst:539
msgid ""
"Convert *params* into an XML-RPC request. or into a response if "
"*methodresponse* is true. *params* can be either a tuple of arguments or an "
"instance of the :exc:`Fault` exception class.  If *methodresponse* is true, "
"only a single value can be returned, meaning that *params* must be of length "
"1. *encoding*, if supplied, is the encoding to use in the generated XML; the "
"default is UTF-8. Python's :const:`None` value cannot be used in standard "
"XML-RPC; to allow using it via an extension,  provide a true value for "
"*allow_none*."
msgstr ""
"*params* を XML-RPC リクエストの形式に変換します。 *methodresponse* が真の場"
"合、XML-RPC レスポンスの形式に変換します。 *params* に指定できるのは、引数か"
"らなるタプルか :exc:`Fault` 例外クラスのインスタンスです。 *methodresponse* "
"が真の場合、単一の値だけを返します。従って、 *params* の長さも 1 でなければな"
"りません。 *encoding* を指定した場合、生成される XML のエンコード方式になりま"
"す。デフォルトは UTF-8 です。 Python の :const:`None` は標準の XML-RPC には利"
"用できません。 :const:`None` を使えるようにするには、 *allow_none* を真にし"
"て、拡張機能つきにしてください。"

#: ../../library/xmlrpclib.rst:550
msgid ""
"Convert an XML-RPC request or response into Python objects, a ``(params, "
"methodname)``.  *params* is a tuple of argument; *methodname* is a string, "
"or ``None`` if no method name is present in the packet. If the XML-RPC "
"packet represents a fault condition, this function will raise a :exc:`Fault` "
"exception. The *use_datetime* flag can be used to cause date/time values to "
"be presented as :class:`datetime.datetime` objects; this is false by default."
msgstr ""
"XML-RPC リクエストまたはレスポンスを ``(params, methodname)`` の形式をとる "
"Python オブジェクトにします。 *params* は引数のタプルです。 *methodname* は文"
"字列で、パケット中にメソッド名がない場合には ``None`` になります。例外条件を"
"示す XML-RPC パケットの場合には、 :exc:`Fault` 例外を送出します。 "
"*use_datetime* フラグは :class:`datetime.datetime` のオブジェクトとして日付/"
"時刻を表現する時に使用し、デフォルトでは false に設定されています。"

#: ../../library/xmlrpclib.rst:564
msgid "Example of Client Usage"
msgstr "クライアントのサンプル"

#: ../../library/xmlrpclib.rst:581
msgid ""
"To access an XML-RPC server through a HTTP proxy, you need to define a "
"custom transport.  The following example shows how:"
msgstr ""
"XML-RPC サーバに HTTP プロキシを経由して接続する場合、カスタムトランスポート"
"を定義する必要があります。以下に例を示します:"

#: ../../library/xmlrpclib.rst:612
msgid "Example of Client and Server Usage"
msgstr "クライアントとサーバーの利用例"

#: ../../library/xmlrpclib.rst:614
msgid "See :ref:`simplexmlrpcserver-example`."
msgstr ":ref:`simplexmlrpcserver-example` を参照してください。"

#: ../../library/xmlrpclib.rst:618
msgid "Footnotes"
msgstr "脚注"

#: ../../library/xmlrpclib.rst:619
msgid ""
"This approach has been first presented in `a discussion on xmlrpc.com "
"<https://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/"
"msgReader$1208?mode=topic>`_."
msgstr ""
"このアプローチは `a discussion on xmlrpc.com `_ にて最初に著されました。"
