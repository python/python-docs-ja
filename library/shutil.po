# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Takeshi Nakazato, 2021
# Masato HASHIMOTO <cabezon.hashimoto@gmail.com>, 2023
# tomo, 2024
# 石井明久, 2024
# Takanori Suzuki <takanori@takanory.net>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# Arihiro TAKASE, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-27 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:13+0000\n"
"Last-Translator: Arihiro TAKASE, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/shutil.rst:2
msgid ":mod:`!shutil` --- High-level file operations"
msgstr ":mod:`!shutil` --- 高水準のファイル操作"

#: ../../library/shutil.rst:10
msgid "**Source code:** :source:`Lib/shutil.py`"
msgstr "**ソースコード:** :source:`Lib/shutil.py`"

#: ../../library/shutil.rst:18
msgid ""
"The :mod:`shutil` module offers a number of high-level operations on files "
"and collections of files.  In particular, functions are provided  which "
"support file copying and removal. For operations on individual files, see "
"also the :mod:`os` module."
msgstr ""
":mod:`shutil` モジュールはファイルやファイルの集まりに対する高水準の操作方法"
"を多数提供します。特にファイルのコピーや削除のための関数が用意されています。"
"個別のファイルに対する操作については、 :mod:`os` モジュールも参照してくださ"
"い。"

#: ../../library/shutil.rst:25
msgid ""
"Even the higher-level file copying functions (:func:`shutil.copy`, :func:"
"`shutil.copy2`) cannot copy all file metadata."
msgstr ""
"高水準のファイルコピー関数 (:func:`shutil.copy`, :func:`shutil.copy2`) でも、"
"ファイルのメタデータの全てをコピーすることはできません。"

#: ../../library/shutil.rst:28
msgid ""
"On POSIX platforms, this means that file owner and group are lost as well as "
"ACLs.  On Mac OS, the resource fork and other metadata are not used. This "
"means that resources will be lost and file type and creator codes will not "
"be correct. On Windows, file owners, ACLs and alternate data streams are not "
"copied."
msgstr ""
"POSIXプラットフォームでは、これはACLやファイルのオーナー、グループが失われる"
"ことを意味しています。 Mac OSでは、リソースフォーク(resource fork)やその他の"
"メタデータが利用されません。これは、リソースが失われ、ファイルタイプや生成者"
"コード(creator code)が正しくなくなることを意味しています。 Windowsでは、ファ"
"イルオーナー、ACL、代替データストリームがコピーされません。"

#: ../../library/shutil.rst:38
msgid "Directory and files operations"
msgstr "ディレクトリとファイルの操作"

#: ../../library/shutil.rst:42
msgid ""
"Copy the contents of the :term:`file-like object <file object>` *fsrc* to "
"the file-like object *fdst*. The integer *length*, if given, is the buffer "
"size. In particular, a negative *length* value means to copy the data "
"without looping over the source data in chunks; by default the data is read "
"in chunks to avoid uncontrolled memory consumption. Note that if the current "
"file position of the *fsrc* object is not 0, only the contents from the "
"current file position to the end of the file will be copied."
msgstr ""

#: ../../library/shutil.rst:53
msgid ""
"Copy the contents (no metadata) of the file named *src* to a file named "
"*dst* and return *dst* in the most efficient way possible. *src* and *dst* "
"are :term:`path-like objects <path-like object>` or path names given as "
"strings."
msgstr ""

#: ../../library/shutil.rst:57
msgid ""
"*dst* must be the complete target file name; look at :func:`~shutil.copy` "
"for a copy that accepts a target directory path.  If *src* and *dst* specify "
"the same file, :exc:`SameFileError` is raised."
msgstr ""
"*dst* は完全な対象ファイル名でなければなりません。対象としてディレクトリ名を"
"指定したい場合は :func:`~shutil.copy` を参照してください。 *src* と *dst* が"
"同じファイルだった場合、 :exc:`SameFileError` を送出します。"

#: ../../library/shutil.rst:61
msgid ""
"The destination location must be writable; otherwise, an :exc:`OSError` "
"exception will be raised. If *dst* already exists, it will be replaced. "
"Special files such as character or block devices and pipes cannot be copied "
"with this function."
msgstr ""
"*dst* は書き込み可能でなければなりません。そうでない場合、 :exc:`OSError` 例"
"外を送出します。 *dst* がすでに存在する場合、そのファイルは置き換えられます。"
"キャラクタデバイスやブロックデバイスなどの特殊なファイルとパイプをこの関数で"
"コピーすることはできません。"

#: ../../library/shutil.rst:66
msgid ""
"If *follow_symlinks* is false and *src* is a symbolic link, a new symbolic "
"link will be created instead of copying the file *src* points to."
msgstr ""
"*follow_symlinks* が偽で *src* がシンボリックリンクの場合、 *src* のリンク先"
"をコピーする代わりに新しいシンボリックリンクを作成します。"

#: ../../library/shutil.rst:70 ../../library/shutil.rst:177
#: ../../library/shutil.rst:208
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.copyfile`` with "
"arguments ``src``, ``dst``."
msgstr ""
"引数 ``src``, ``dst`` を指定して :ref:`監査イベント <auditing>` ``shutil."
"copyfile`` を送出します。 "

#: ../../library/shutil.rst:72
msgid ""
":exc:`IOError` used to be raised instead of :exc:`OSError`. Added "
"*follow_symlinks* argument. Now returns *dst*."
msgstr ""
"以前は :exc:`OSError` の代わりに :exc:`IOError` が送出されていました。 "
"*follow_symlinks* 引数が追加されました。 *dst* を返すようになりました。"

#: ../../library/shutil.rst:77
msgid ""
"Raise :exc:`SameFileError` instead of :exc:`Error`.  Since the former is a "
"subclass of the latter, this change is backward compatible."
msgstr ""
":exc:`Error` の代わりに :exc:`SameFileError` を送出します。後者は前者のサブク"
"ラスなのでこの変更は後方互換です。"

#: ../../library/shutil.rst:81 ../../library/shutil.rst:185
#: ../../library/shutil.rst:217 ../../library/shutil.rst:287
#: ../../library/shutil.rst:396
msgid ""
"Platform-specific fast-copy syscalls may be used internally in order to copy "
"the file more efficiently. See :ref:`shutil-platform-dependent-efficient-"
"copy-operations` section."
msgstr ""
"ファイルのコピーをより効率的に行うため、プラットフォーム特有の高速なコピーを"
"行うシステムコールが利用されることがあります。 :ref:`shutil-platform-"
"dependent-efficient-copy-operations` を参照してください。"

#: ../../library/shutil.rst:88
msgid ""
"This exception is raised if source and destination in :func:`copyfile` are "
"the same file."
msgstr ":func:`copyfile` のコピー元と先が同じファイルの場合送出されます。"

#: ../../library/shutil.rst:96
msgid ""
"Copy the permission bits from *src* to *dst*.  The file contents, owner, and "
"group are unaffected.  *src* and *dst* are :term:`path-like objects <path-"
"like object>` or path names given as strings. If *follow_symlinks* is false, "
"and both *src* and *dst* are symbolic links, :func:`copymode` will attempt "
"to modify the mode of *dst* itself (rather than the file it points to).  "
"This functionality is not available on every platform; please see :func:"
"`copystat` for more information.  If :func:`copymode` cannot modify symbolic "
"links on the local platform, and it is asked to do so, it will do nothing "
"and return."
msgstr ""

#: ../../library/shutil.rst:106 ../../library/shutil.rst:179
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.copymode`` with "
"arguments ``src``, ``dst``."
msgstr ""
"引数 ``src``, ``dst`` を指定して :ref:`監査イベント <auditing>` ``shutil."
"copymode`` を送出します。 "

#: ../../library/shutil.rst:108
msgid "Added *follow_symlinks* argument."
msgstr "*follow_symlinks* 引数が追加されました。"

#: ../../library/shutil.rst:113
msgid ""
"Copy the permission bits, last access time, last modification time, and "
"flags from *src* to *dst*.  On Linux, :func:`copystat` also copies the "
"\"extended attributes\" where possible.  The file contents, owner, and group "
"are unaffected.  *src* and *dst* are :term:`path-like objects <path-like "
"object>` or path names given as strings."
msgstr ""

#: ../../library/shutil.rst:119
msgid ""
"If *follow_symlinks* is false, and *src* and *dst* both refer to symbolic "
"links, :func:`copystat` will operate on the symbolic links themselves rather "
"than the files the symbolic links refer to—reading the information from the "
"*src* symbolic link, and writing the information to the *dst* symbolic link."
msgstr ""
"*follow_symlinks* が偽の場合、 *src* と *dst* の両方がシンボリックリンクであ"
"れば、 :func:`copystat` はリンク先ではなくてシンボリックリンク自体を操作しま"
"す。 *src* からシンボリックリンクの情報を読み込み、 *dst* のシンボリックリン"
"クにその情報を書き込みます。"

#: ../../library/shutil.rst:128
msgid ""
"Not all platforms provide the ability to examine and modify symbolic links.  "
"Python itself can tell you what functionality is locally available."
msgstr ""
"すべてのプラットフォームでシンボリックリンクの検査と変更ができるわけではあり"
"ません。 Python はその機能が利用かどうかを調べる方法を用意しています。"

#: ../../library/shutil.rst:132
msgid ""
"If ``os.chmod in os.supports_follow_symlinks`` is ``True``, :func:`copystat` "
"can modify the permission bits of a symbolic link."
msgstr ""
"``os.chmod in os.supports_follow_symlinks`` が ``True`` の場合 :func:"
"`copystat` はシンボリックリンクのパーミッションを変更できます。"

#: ../../library/shutil.rst:136
msgid ""
"If ``os.utime in os.supports_follow_symlinks`` is ``True``, :func:`copystat` "
"can modify the last access and modification times of a symbolic link."
msgstr ""
"``os.utime in os.supports_follow_symlinks`` が ``True`` の場合 :func:"
"`copystat` はシンボリックリンクの最終アクセス時間と最終変更時間を変更できま"
"す。"

#: ../../library/shutil.rst:140
msgid ""
"If ``os.chflags in os.supports_follow_symlinks`` is ``True``, :func:"
"`copystat` can modify the flags of a symbolic link.  (``os.chflags`` is not "
"available on all platforms.)"
msgstr ""
"``os.chflags in os.supports_follow_symlinks`` が ``True`` の場合 :func:"
"`copystat` はシンボリックリンクのフラグを変更できます。 (``os.chflags`` がな"
"いプラットフォームもあります。)"

#: ../../library/shutil.rst:145
msgid ""
"On platforms where some or all of this functionality is unavailable, when "
"asked to modify a symbolic link, :func:`copystat` will copy everything it "
"can. :func:`copystat` never returns failure."
msgstr ""
"機能の幾つか、もしくは全てが利用できないプラットフォームでシンボリックリンク"
"を変更しようとした場合、 :func:`copystat` は可能な限り全てをコピーします。:"
"func:`copystat` が失敗を返すことはありません。"

#: ../../library/shutil.rst:150
msgid "Please see :data:`os.supports_follow_symlinks` for more information."
msgstr ""
"より詳しい情報は :data:`os.supports_follow_symlinks` を参照して下さい。"

#: ../../library/shutil.rst:153 ../../library/shutil.rst:210
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.copystat`` with "
"arguments ``src``, ``dst``."
msgstr ""
"引数 ``src``, ``dst`` を指定して :ref:`監査イベント <auditing>` ``shutil."
"copystat`` を送出します。 "

#: ../../library/shutil.rst:155
msgid ""
"Added *follow_symlinks* argument and support for Linux extended attributes."
msgstr "*follow_symlinks* 引数と Linux の拡張属性がサポートされました。"

#: ../../library/shutil.rst:160
msgid ""
"Copies the file *src* to the file or directory *dst*.  *src* and *dst* "
"should be :term:`path-like objects <path-like object>` or strings.  If *dst* "
"specifies a directory, the file will be copied into *dst* using the base "
"filename from *src*. If *dst* specifies a file that already exists, it will "
"be replaced. Returns the path to the newly created file."
msgstr ""
"ファイル *src* をファイルまたはディレクトリ *dst* にコピーします。 *src* と "
"*dst* は両方共 :term:`path-like object` または文字列でなければなりません。 "
"*dst* がディレクトリを指定している場合、ファイルは *dst* の中に、 *src* の"
"ベースファイル名を使ってコピーされます。*dst* が既に存在するファイルを指定し"
"ている場合、それは置き換えられます。新しく作成したファイルのパスを返します。"

#: ../../library/shutil.rst:166
msgid ""
"If *follow_symlinks* is false, and *src* is a symbolic link, *dst* will be "
"created as a symbolic link.  If *follow_symlinks* is true and *src* is a "
"symbolic link, *dst* will be a copy of the file *src* refers to."
msgstr ""
"*follow_symlinks* が偽で、 *src* がシンボリックリンクの場合、 *dst* はシンボ"
"リックリンクとして作成されます。 *follow_symlinks* が真で *src* がシンボリッ"
"クリンクの場合、 *dst* には *src* のリンク先のファイルがコピーされます。"

#: ../../library/shutil.rst:171
msgid ""
":func:`~shutil.copy` copies the file data and the file's permission mode "
"(see :func:`os.chmod`).  Other metadata, like the file's creation and "
"modification times, is not preserved. To preserve all file metadata from the "
"original, use :func:`~shutil.copy2` instead."
msgstr ""
":func:`~shutil.copy` はファイルのデータとパーミッションをコピーします。 (:"
"func:`os.chmod` を参照)\n"
"その他の、ファイルの作成時間や変更時間などのメタデータはコピーしません。\n"
"コピー元のファイルのメタデータを保存したい場合は、 :func:`~shutils.copy2` を"
"利用してください。"

#: ../../library/shutil.rst:181
msgid ""
"Added *follow_symlinks* argument. Now returns path to the newly created file."
msgstr ""
"*follow_symlinks* 引数が追加されました。新しく作成されたファイルのパスを返す"
"ようになりました。"

#: ../../library/shutil.rst:192
msgid ""
"Identical to :func:`~shutil.copy` except that :func:`copy2` also attempts to "
"preserve file metadata."
msgstr ""
":func:`copy2` はファイルのメタデータを保持しようとすることを除けば :func:"
"`~shutil.copy` と等価です。"

#: ../../library/shutil.rst:195
msgid ""
"When *follow_symlinks* is false, and *src* is a symbolic link, :func:`copy2` "
"attempts to copy all metadata from the *src* symbolic link to the newly "
"created *dst* symbolic link. However, this functionality is not available on "
"all platforms. On platforms where some or all of this functionality is "
"unavailable, :func:`copy2` will preserve all the metadata it can; :func:"
"`copy2` never raises an exception because it cannot preserve file metadata."
msgstr ""

#: ../../library/shutil.rst:204
msgid ""
":func:`copy2` uses :func:`copystat` to copy the file metadata. Please see :"
"func:`copystat` for more information about platform support for modifying "
"symbolic link metadata."
msgstr ""
":func:`copy2` はファイルのメタデータをコピーするために :func:`copystat` を利"
"用します。シンボリックリンクのメタデータを変更するためのプラットフォームサ"
"ポートについては :func:`copystat` を参照して下さい。"

#: ../../library/shutil.rst:212
msgid ""
"Added *follow_symlinks* argument, try to copy extended file system "
"attributes too (currently Linux only). Now returns path to the newly created "
"file."
msgstr ""
"*follow_symlinks* 引数が追加されました。 拡張ファイルシステム属性もコピーしよ"
"うと試みます (現在は Linux のみ)。新しく作成されたファイルへのパスを返すよう"
"になりました。"

#: ../../library/shutil.rst:224
msgid ""
"This factory function creates a function that can be used as a callable for :"
"func:`copytree`\\'s *ignore* argument, ignoring files and directories that "
"match one of the glob-style *patterns* provided.  See the example below."
msgstr ""
"このファクトリ関数は、 :func:`copytree` 関数の *ignore* 引数に渡すための呼び"
"出し可能オブジェクトを作成します。 glob形式の *patterns* にマッチするファイル"
"やディレクトリが無視されます。下の例を参照してください。"

#: ../../library/shutil.rst:233
msgid ""
"Recursively copy an entire directory tree rooted at *src* to a directory "
"named *dst* and return the destination directory.  All intermediate "
"directories needed to contain *dst* will also be created by default."
msgstr ""

#: ../../library/shutil.rst:237
msgid ""
"Permissions and times of directories are copied with :func:`copystat`, "
"individual files are copied using :func:`~shutil.copy2`."
msgstr ""
"各ディレクトリのパーミッション、最終アクセス時間、最終変更時間は :func:"
"`copystat` でコピーされます。それぞれのファイルは :func:`~shutil.copy2` でコ"
"ピーされます。"

#: ../../library/shutil.rst:240
msgid ""
"If *symlinks* is true, symbolic links in the source tree are represented as "
"symbolic links in the new tree and the metadata of the original links will "
"be copied as far as the platform allows; if false or omitted, the contents "
"and metadata of the linked files are copied to the new tree."
msgstr ""
"*symlinks* が真の場合、ソースツリー内のシンボリックリンクは新しいツリーでもシ"
"ンボリックになり、元のシンボリックリンクのメタデータはプラットフォームが許す"
"限りコピーされます。偽の場合や省略された場合、リンク先のファイルの内容とメタ"
"データが新しいツリーにコピーされます。"

#: ../../library/shutil.rst:245
msgid ""
"When *symlinks* is false, if the file pointed to by the symlink doesn't "
"exist, an exception will be added in the list of errors raised in an :exc:"
"`Error` exception at the end of the copy process. You can set the optional "
"*ignore_dangling_symlinks* flag to true if you want to silence this "
"exception. Notice that this option has no effect on platforms that don't "
"support :func:`os.symlink`."
msgstr ""

#: ../../library/shutil.rst:252
msgid ""
"If *ignore* is given, it must be a callable that will receive as its "
"arguments the directory being visited by :func:`copytree`, and a list of its "
"contents, as returned by :func:`os.listdir`.  Since :func:`copytree` is "
"called recursively, the *ignore* callable will be called once for each "
"directory that is copied.  The callable must return a sequence of directory "
"and file names relative to the current directory (i.e. a subset of the items "
"in its second argument); these names will then be ignored in the copy "
"process.  :func:`ignore_patterns` can be used to create such a callable that "
"ignores names based on glob-style patterns."
msgstr ""
"*ignore* は :func:`copytree` が走査しているディレクトリと :func:`os.listdir` "
"が返すその内容のリストを引数として受け取ることのできる呼び出し可能オブジェク"
"トでなければなりません。 :func:`copytree` は再帰的に呼び出されるので、 "
"*ignore* はコピーされる各ディレクトリ毎に呼び出されます。 *ignore* の戻り値は"
"カレントディレクトリに相対的なディレクトリ名およびファイル名のシーケンス（す"
"なわち第二引数の項目のサブセット）でなければなりません。それらの名前はコピー"
"中に無視されます。 :func:`ignore_patterns` を用いて glob 形式のパターンによっ"
"て無視する呼び出し可能オブジェクトを作成することが出来ます。"

#: ../../library/shutil.rst:262
msgid ""
"If exception(s) occur, an :exc:`Error` is raised with a list of reasons."
msgstr "例外が発生した場合、理由のリストとともに :exc:`Error` を送出します。"

#: ../../library/shutil.rst:264
msgid ""
"If *copy_function* is given, it must be a callable that will be used to copy "
"each file. It will be called with the source path and the destination path "
"as arguments. By default, :func:`~shutil.copy2` is used, but any function "
"that supports the same signature (like :func:`~shutil.copy`) can be used."
msgstr ""
"*copy_function* は各ファイルをコピーするために利用される呼び出し可能オブジェ"
"クトでなければなりません。*copy_function* はコピー元のパスとコピー先のパスを"
"引数に呼び出されます。デフォルトでは :func:`~shutil.copy2` が利用されますが、"
"同じ特徴を持つ関数 (:func:`shutil.copy` など) ならどれでも利用可能です。"

#: ../../library/shutil.rst:269
msgid ""
"If *dirs_exist_ok* is false (the default) and *dst* already exists, a :exc:"
"`FileExistsError` is raised. If *dirs_exist_ok* is true, the copying "
"operation will continue if it encounters existing directories, and files "
"within the *dst* tree will be overwritten by corresponding files from the "
"*src* tree."
msgstr ""

#: ../../library/shutil.rst:275
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.copytree`` with "
"arguments ``src``, ``dst``."
msgstr ""
"引数 ``src``, ``dst`` を指定して :ref:`監査イベント <auditing>` ``shutil."
"copytree`` を送出します。 "

#: ../../library/shutil.rst:277
msgid ""
"Added the *copy_function* argument to be able to provide a custom copy "
"function. Added the *ignore_dangling_symlinks* argument to silence dangling "
"symlinks errors when *symlinks* is false."
msgstr ""

#: ../../library/shutil.rst:283
msgid "Copy metadata when *symlinks* is false. Now returns *dst*."
msgstr ""
"*symlinks* が偽の場合メタデータをコピーします。 *dst* を返すようになりまし"
"た。"

#: ../../library/shutil.rst:292
msgid "Added the *dirs_exist_ok* parameter."
msgstr ""

#: ../../library/shutil.rst:299
msgid ""
"Delete an entire directory tree; *path* must point to a directory (but not a "
"symbolic link to a directory).  If *ignore_errors* is true, errors resulting "
"from failed removals will be ignored; if false or omitted, such errors are "
"handled by calling a handler specified by *onexc* or *onerror* or, if both "
"are omitted, exceptions are propagated to the caller."
msgstr ""

#: ../../library/shutil.rst:305
msgid ""
"This function can support :ref:`paths relative to directory descriptors "
"<dir_fd>`."
msgstr ""
"この関数は :ref:`ディレクトリ記述子への相対パス <dir_fd>` をサポートしていま"
"す。"

#: ../../library/shutil.rst:310
msgid ""
"On platforms that support the necessary fd-based functions a symlink attack "
"resistant version of :func:`rmtree` is used by default.  On other platforms, "
"the :func:`rmtree` implementation is susceptible to a symlink attack: given "
"proper timing and circumstances, attackers can manipulate symlinks on the "
"filesystem to delete files they wouldn't be able to access otherwise.  "
"Applications can use the :data:`rmtree.avoids_symlink_attacks` function "
"attribute to determine which case applies."
msgstr ""
"必要な fd ベースの関数をサポートしているプラットフォームでは、 シンボリックリ"
"ンク攻撃に耐性のあるバージョンの :func:`rmtree` がデフォルトで利用されます。"
"それ以外のプラットフォームでは、 :func:`rmtree` の実装はシンボリックリンク攻"
"撃の影響を受けます。適当なタイミングと環境で攻撃者はファイルシステム上のシン"
"ボリックリンクを操作して、それ以外の方法ではアクセス不可能なファイルを削除す"
"ることが出来ます。アプリケーションは、どちらのバージョンの :func:`rmtree` が"
"利用されているかを知るために関数のデータ属性 :data:`rmtree."
"avoids_symlink_attacks` を利用することができます。"

#: ../../library/shutil.rst:318
msgid ""
"If *onexc* is provided, it must be a callable that accepts three parameters: "
"*function*, *path*, and *excinfo*."
msgstr ""

#: ../../library/shutil.rst:321
msgid ""
"The first parameter, *function*, is the function which raised the exception; "
"it depends on the platform and implementation.  The second parameter, "
"*path*, will be the path name passed to *function*.  The third parameter, "
"*excinfo*, is the exception that was raised. Exceptions raised by *onexc* "
"will not be caught."
msgstr ""

#: ../../library/shutil.rst:327
msgid ""
"The deprecated *onerror* is similar to *onexc*, except that the third "
"parameter it receives is the tuple returned from :func:`sys.exc_info`."
msgstr ""

#: ../../library/shutil.rst:330
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.rmtree`` with arguments "
"``path``, ``dir_fd``."
msgstr ""
"引数 ``path``, ``dir_fd`` を指定して :ref:`監査イベント <auditing>` ``shutil."
"rmtree`` を送出します。 "

#: ../../library/shutil.rst:332
msgid ""
"Added a symlink attack resistant version that is used automatically if "
"platform supports fd-based functions."
msgstr ""
"プラットフォームが fd ベースの関数をサポートする場合に自動的に使用されるシン"
"ボリックリンク攻撃に耐性のあるバージョンが追加されました。"

#: ../../library/shutil.rst:336
msgid ""
"On Windows, will no longer delete the contents of a directory junction "
"before removing the junction."
msgstr ""
"Windows では、ディレクトリへのジャンクションを削除する際にリンク先ディレクト"
"リにあるファイルを削除しなくなりました。"

#: ../../library/shutil.rst:340
msgid "Added the *dir_fd* parameter."
msgstr "引数 *dir_fd* を追加しました。"

#: ../../library/shutil.rst:343
msgid "Added the *onexc* parameter, deprecated *onerror*."
msgstr ""

#: ../../library/shutil.rst:346
msgid ""
":func:`!rmtree` now ignores :exc:`FileNotFoundError` exceptions for all but "
"the top-level path. Exceptions other than :exc:`OSError` and subclasses of :"
"exc:`!OSError` are now always propagated to the caller."
msgstr ""

#: ../../library/shutil.rst:354
msgid ""
"Indicates whether the current platform and implementation provides a symlink "
"attack resistant version of :func:`rmtree`.  Currently this is only true for "
"platforms supporting fd-based directory access functions."
msgstr ""
"プラットフォームと実装がシンボリックリンク攻撃に耐性のあるバージョンの :func:"
"`rmtree` を提供しているかどうかを示します。現在のところ、この属性は fd ベース"
"のディレクトリアクセス関数をサポートしているプラットフォームでのみ真になりま"
"す。"

#: ../../library/shutil.rst:363
msgid ""
"Recursively move a file or directory (*src*) to another location and return "
"the destination."
msgstr ""

#: ../../library/shutil.rst:366
msgid ""
"If *dst* is an existing directory or a symlink to a directory, then *src* is "
"moved inside that directory. The destination path in that directory must not "
"already exist."
msgstr ""

#: ../../library/shutil.rst:370
msgid ""
"If *dst* already exists but is not a directory, it may be overwritten "
"depending on :func:`os.rename` semantics."
msgstr ""

#: ../../library/shutil.rst:373
msgid ""
"If the destination is on the current filesystem, then :func:`os.rename` is "
"used. Otherwise, *src* is copied to the destination using *copy_function* "
"and then removed.  In case of symlinks, a new symlink pointing to the target "
"of *src* will be created as the destination and *src* will be removed."
msgstr ""

#: ../../library/shutil.rst:378
msgid ""
"If *copy_function* is given, it must be a callable that takes two arguments, "
"*src* and the destination, and will be used to copy *src* to the destination "
"if :func:`os.rename` cannot be used.  If the source is a directory, :func:"
"`copytree` is called, passing it the *copy_function*. The default "
"*copy_function* is :func:`copy2`.  Using :func:`~shutil.copy` as the "
"*copy_function* allows the move to succeed when it is not possible to also "
"copy the metadata, at the expense of not copying any of the metadata."
msgstr ""

#: ../../library/shutil.rst:386
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.move`` with arguments "
"``src``, ``dst``."
msgstr ""
"引数 ``src``, ``dst`` を指定して :ref:`監査イベント <auditing>` ``shutil."
"move`` を送出します。 "

#: ../../library/shutil.rst:388
msgid ""
"Added explicit symlink handling for foreign filesystems, thus adapting it to "
"the behavior of GNU's :program:`mv`. Now returns *dst*."
msgstr ""
"異なるファイルシステムに対する明示的なシンボリックリンク処理が追加されまし"
"た。これにより GNU :program:`mv` の振る舞いに適応するようになります。 *dst* "
"を返すようになりました。"

#: ../../library/shutil.rst:393
msgid "Added the *copy_function* keyword argument."
msgstr "キーワード引数 *copy_function* が追加されました。"

#: ../../library/shutil.rst:401
msgid "Accepts a :term:`path-like object` for both *src* and *dst*."
msgstr ""
"*src* と *dst* が両方とも :term:`path-like object` を受け付けるようになりまし"
"た。"

#: ../../library/shutil.rst:406
msgid ""
"Return disk usage statistics about the given path as a :term:`named tuple` "
"with the attributes *total*, *used* and *free*, which are the amount of "
"total, used and free space, in bytes. *path* may be a file or a directory."
msgstr ""
"指定されたパスについて、ディスクの利用状況を、名前付きタプル (:term:`named "
"tuple`) で返します。このタプルには *total*, *used*, *free* という属性があり、"
"それぞれトータル、使用中、空きの容量をバイト単位で示します。 *path* はファイ"
"ルまたはディレクトリです。"

#: ../../library/shutil.rst:413
msgid ""
"On Unix filesystems, *path* must point to a path within a **mounted** "
"filesystem partition. On those platforms, CPython doesn't attempt to "
"retrieve disk usage information from non-mounted filesystems."
msgstr ""

#: ../../library/shutil.rst:419
msgid "On Windows, *path* can now be a file or directory."
msgstr ""
"Windowsにおいても *path* にディレクトリだけでなくファイルを指定できるようにな"
"りました。"

#: ../../library/shutil.rst:422
msgid ":ref:`Availability <availability>`: Unix, Windows."
msgstr ":ref:`Availability <availability>`: Unix, Windows。"

#: ../../library/shutil.rst:427
msgid "Change owner *user* and/or *group* of the given *path*."
msgstr "指定された *path* のオーナー *user* と/または *group* を変更します。"

#: ../../library/shutil.rst:429
msgid ""
"*user* can be a system user name or a uid; the same applies to *group*. At "
"least one argument is required."
msgstr ""
"*user* はシステムのユーザー名か uid です。 *group* も同じです。少なくともどち"
"らかの引数を指定する必要があります。"

#: ../../library/shutil.rst:432
msgid "See also :func:`os.chown`, the underlying function."
msgstr "内部で利用している :func:`os.chown` も参照してください。"

#: ../../library/shutil.rst:434
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.chown`` with arguments "
"``path``, ``user``, ``group``."
msgstr ""
"引数 ``path``, ``user``, ``group`` を指定して :ref:`監査イベント <auditing>` "
"``shutil.chown`` を送出します。 "

#: ../../library/shutil.rst:436
msgid ":ref:`Availability <availability>`: Unix."
msgstr ":ref:`利用可能な環境 <availability>`: Unix。"

#: ../../library/shutil.rst:440
msgid "Added *dir_fd* and *follow_symlinks* parameters."
msgstr ""

#: ../../library/shutil.rst:446
msgid ""
"Return the path to an executable which would be run if the given *cmd* was "
"called.  If no *cmd* would be called, return ``None``."
msgstr ""
"*cmd* を実行しようとした時に実行される実行ファイルのパスを返します。 *cmd* を"
"呼び出せない場合は ``None`` を返します。"

#: ../../library/shutil.rst:449
msgid ""
"*mode* is a permission mask passed to :func:`os.access`, by default "
"determining if the file exists and is executable."
msgstr ""

#: ../../library/shutil.rst:452
msgid ""
"*path* is a \"``PATH`` string\" specifying the directories to look in, "
"delimited by :data:`os.pathsep`. When no *path* is specified, the :envvar:"
"`PATH` environment variable is read from :data:`os.environ`, falling back "
"to :data:`os.defpath` if it is not set."
msgstr ""

#: ../../library/shutil.rst:457
msgid ""
"On Windows, the current directory is prepended to the *path* if *mode* does "
"not include ``os.X_OK``. When the *mode* does include ``os.X_OK``, the "
"Windows API ``NeedCurrentDirectoryForExePathW`` will be consulted to "
"determine if the current directory should be prepended to *path*. To avoid "
"consulting the current working directory for executables: set the "
"environment variable ``NoDefaultCurrentDirectoryInExePath``."
msgstr ""

#: ../../library/shutil.rst:464
msgid ""
"Also on Windows, the :envvar:`PATHEXT` environment variable is used to "
"resolve commands that may not already include an extension. For example, if "
"you call ``shutil.which(\"python\")``, :func:`which` will search ``PATHEXT`` "
"to know that it should look for ``python.exe`` within the *path* "
"directories. For example, on Windows::"
msgstr ""

#: ../../library/shutil.rst:470
msgid ""
">>> shutil.which(\"python\")\n"
"'C:\\\\Python33\\\\python.EXE'"
msgstr ""

#: ../../library/shutil.rst:473
msgid ""
"This is also applied when *cmd* is a path that contains a directory "
"component::"
msgstr ""

#: ../../library/shutil.rst:476
msgid ""
">> shutil.which(\"C:\\\\Python33\\\\python\")\n"
"'C:\\\\Python33\\\\python.EXE'"
msgstr ""

#: ../../library/shutil.rst:481
msgid ""
"The :class:`bytes` type is now accepted.  If *cmd* type is :class:`bytes`, "
"the result type is also :class:`bytes`."
msgstr ""
":class:`bytes` 型も使用できるようになりました。 *cmd* が :class:`bytes` 型の"
"場合、戻り値も :class:`bytes` 型です。"

#: ../../library/shutil.rst:485
msgid ""
"On Windows, the current directory is no longer prepended to the search path "
"if *mode* includes ``os.X_OK`` and WinAPI "
"``NeedCurrentDirectoryForExePathW(cmd)`` is false, else the current "
"directory is prepended even if it is already in the search path; ``PATHEXT`` "
"is used now even when *cmd* includes a directory component or ends with an "
"extension that is in ``PATHEXT``; and filenames that have no extension can "
"now be found."
msgstr ""

#: ../../library/shutil.rst:494
msgid ""
"On Windows, if *mode* includes ``os.X_OK``, executables with an extension in "
"``PATHEXT`` will be preferred over executables without a matching extension. "
"This brings behavior closer to that of Python 3.11."
msgstr ""

#: ../../library/shutil.rst:502
msgid ""
"This exception collects exceptions that are raised during a multi-file "
"operation. For :func:`copytree`, the exception argument is a list of 3-"
"tuples (*srcname*, *dstname*, *exception*)."
msgstr ""
"この例外は複数ファイルの操作を行っているときに生じる例外をまとめたもので"
"す。 :func:`copytree` に対しては例外の引数は3つのタプル(*srcname*, "
"*dstname*, *exception*)からなるリストです。"

#: ../../library/shutil.rst:509
msgid "Platform-dependent efficient copy operations"
msgstr "プラットフォーム依存の効率的なコピー操作"

#: ../../library/shutil.rst:511
msgid ""
"Starting from Python 3.8, all functions involving a file copy (:func:"
"`copyfile`, :func:`~shutil.copy`, :func:`copy2`, :func:`copytree`, and :func:"
"`move`) may use platform-specific \"fast-copy\" syscalls in order to copy "
"the file more efficiently (see :issue:`33671`). \"fast-copy\" means that the "
"copying operation occurs within the kernel, avoiding the use of userspace "
"buffers in Python as in \"``outfd.write(infd.read())``\"."
msgstr ""
"Python 3.8 から、ファイルのコピーを伴う全ての関数 (:func:`copyfile`, :func:"
"`~shutil.copy`, :func:`copy2`, :func:`copytree`, および :func:`move`) はより"
"効率的なファイルのコピーのためにプラットフォーム特有の \"高速なコピー\" を行"
"うことがあります (:issue:`33671` を参照してください). ここで \"高速なコピー"
"\" とは、  \"``outfd.write(infd.read())``\" のようにPython が管理するユーザー"
"空間のバッファを利用することを避け、コピー操作がカーネル空間内で行われること"
"を意味します。"

#: ../../library/shutil.rst:519
msgid "On macOS `fcopyfile`_ is used to copy the file content (not metadata)."
msgstr ""
"macOS では `fcopyfile`_ がファイルの内容（メタデータを除く）をコピーするため"
"に利用されます。"

#: ../../library/shutil.rst:521
msgid "On Linux :func:`os.sendfile` is used."
msgstr "Linux では :func:`os.sendfile` が利用されます。"

#: ../../library/shutil.rst:523
msgid ""
"On Windows :func:`shutil.copyfile` uses a bigger default buffer size (1 MiB "
"instead of 64 KiB) and a :func:`memoryview`-based variant of :func:`shutil."
"copyfileobj` is used."
msgstr ""
"Windows では :func:`shutil.copyfile` はより大きなバッファサイズをデフォルトと"
"して使います (6 KiB の代わりに 1 MiB が使われます)。また、 :func:"
"`memoryview` ベースの変形である :func:`shutil.copyfileobj` が使われます。"

#: ../../library/shutil.rst:527
msgid ""
"If the fast-copy operation fails and no data was written in the destination "
"file then shutil will silently fallback on using less efficient :func:"
"`copyfileobj` function internally."
msgstr ""
"高速なコピー操作が失敗して出力ファイルにデータが書き込まれなかった場合、"
"shutil はユーザーへの通知なしでより効率の低い :func:`copyfileobj` 関数に"
"フォールバックします。"

#: ../../library/shutil.rst:536
msgid "copytree example"
msgstr "copytree の例"

#: ../../library/shutil.rst:538
msgid "An example that uses the :func:`ignore_patterns` helper::"
msgstr ":func:`ignore_patterns` ヘルパ関数を利用する例です::"

#: ../../library/shutil.rst:540
msgid ""
"from shutil import copytree, ignore_patterns\n"
"\n"
"copytree(source, destination, ignore=ignore_patterns('*.pyc', 'tmp*'))"
msgstr ""

#: ../../library/shutil.rst:544
msgid ""
"This will copy everything except ``.pyc`` files and files or directories "
"whose name starts with ``tmp``."
msgstr ""
"この例では、 ``.pyc`` ファイルと、 ``tmp`` で始まる全てのファイルやディレクト"
"リを除いて、全てをコピーします。"

#: ../../library/shutil.rst:547
msgid "Another example that uses the *ignore* argument to add a logging call::"
msgstr "*ignore* 引数にロギングさせる別の例です。 ::"

#: ../../library/shutil.rst:549
msgid ""
"from shutil import copytree\n"
"import logging\n"
"\n"
"def _logpath(path, names):\n"
"    logging.info('Working in %s', path)\n"
"    return []   # nothing will be ignored\n"
"\n"
"copytree(source, destination, ignore=_logpath)"
msgstr ""

#: ../../library/shutil.rst:562
msgid "rmtree example"
msgstr "rmtree の例"

#: ../../library/shutil.rst:564
msgid ""
"This example shows how to remove a directory tree on Windows where some of "
"the files have their read-only bit set. It uses the onexc callback to clear "
"the readonly bit and reattempt the remove. Any subsequent failure will "
"propagate. ::"
msgstr ""

#: ../../library/shutil.rst:569
msgid ""
"import os, stat\n"
"import shutil\n"
"\n"
"def remove_readonly(func, path, _):\n"
"    \"Clear the readonly bit and reattempt the removal\"\n"
"    os.chmod(path, stat.S_IWRITE)\n"
"    func(path)\n"
"\n"
"shutil.rmtree(directory, onexc=remove_readonly)"
msgstr ""

#: ../../library/shutil.rst:582
msgid "Archiving operations"
msgstr "アーカイブ化操作"

#: ../../library/shutil.rst:586
msgid "Added support for the *xztar* format."
msgstr "*xztar* 形式のサポートが追加されました。"

#: ../../library/shutil.rst:590
msgid ""
"High-level utilities to create and read compressed and archived files are "
"also provided.  They rely on the :mod:`zipfile` and :mod:`tarfile` modules."
msgstr ""
"圧縮とアーカイブ化されているファイルの読み書きの高水準なユーティリティも提供"
"されています。これらは :mod:`zipfile` 、 :mod:`tarfile` モジュールに依拠して"
"います。"

#: ../../library/shutil.rst:595
msgid "Create an archive file (such as zip or tar) and return its name."
msgstr "アーカイブファイル (zip や tar) を作成してその名前を返します。"

#: ../../library/shutil.rst:597
msgid ""
"*base_name* is the name of the file to create, including the path, minus any "
"format-specific extension."
msgstr ""

#: ../../library/shutil.rst:600
msgid ""
"*format* is the archive format: one of \"zip\" (if the :mod:`zlib` module is "
"available), \"tar\", \"gztar\" (if the :mod:`zlib` module is available), "
"\"bztar\" (if the :mod:`bz2` module is available), or \"xztar\" (if the :mod:"
"`lzma` module is available)."
msgstr ""

#: ../../library/shutil.rst:605
msgid ""
"*root_dir* is a directory that will be the root directory of the archive, "
"all paths in the archive will be relative to it; for example, we typically "
"chdir into *root_dir* before creating the archive."
msgstr ""
"*root_dir* はアーカイブファイルのルートとなるディレクトリです。アーカイブに含"
"まれる全てのパスは *root_dir* からの相対パスになります。これは、アーカイブ"
"ファイルを生成する前に *root_dir* へ移動することに相当します。"

#: ../../library/shutil.rst:609
msgid ""
"*base_dir* is the directory where we start archiving from; i.e. *base_dir* "
"will be the common prefix of all files and directories in the archive.  "
"*base_dir* must be given relative to *root_dir*.  See :ref:`shutil-archiving-"
"example-with-basedir` for how to use *base_dir* and *root_dir* together."
msgstr ""
"*base_dir* はアーカイブを開始するディレクトリです。すなわち、 *base_dir* アー"
"カイブに含まれるファイルとディレクトリに対する共通のプレフィックスになりま"
"す。 *base_dir* は *root_dir* からの相対パスでなければなりません。 "
"*base_dir* と *root_dir* を組み合わせて使う方法については :ref:`shutil-"
"archiving-example-with-basedir` を参照してください。"

#: ../../library/shutil.rst:615
msgid "*root_dir* and *base_dir* both default to the current directory."
msgstr ""
"*root_dir* と *base_dir* のどちらも、デフォルトはカレントディレクトリです。"

#: ../../library/shutil.rst:617
msgid ""
"If *dry_run* is true, no archive is created, but the operations that would "
"be executed are logged to *logger*."
msgstr ""
"*dry_run* が真の場合、アーカイブは作成されませんが実行される操作は *logger* "
"に記録されます。"

#: ../../library/shutil.rst:620
msgid ""
"*owner* and *group* are used when creating a tar archive. By default, uses "
"the current owner and group."
msgstr ""
"*owner* と *group* は、tar アーカイブを作成するときに使われます。デフォルトで"
"は、カレントのオーナーとグループを使います。"

#: ../../library/shutil.rst:623
msgid ""
"*logger* must be an object compatible with :pep:`282`, usually an instance "
"of :class:`logging.Logger`."
msgstr ""
"*logger* は :pep:`282` に互換なオブジェクトでなければなりません。これは普通"
"は :class:`logging.Logger` のインスタンスです。"

#: ../../library/shutil.rst:626
msgid "The *verbose* argument is unused and deprecated."
msgstr "*verbose* 引数は使用されず、非推奨です。"

#: ../../library/shutil.rst:628
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.make_archive`` with "
"arguments ``base_name``, ``format``, ``root_dir``, ``base_dir``."
msgstr ""
"引数 `base_name``, ``format``, ``root_dir``, ``base_dir``を指定して :ref:`監"
"査イベント <auditing>` ``shutil.make_archive`` を送出します。 "

#: ../../library/shutil.rst:632
msgid ""
"This function is not thread-safe when custom archivers registered with :func:"
"`register_archive_format` do not support the *root_dir* argument.  In this "
"case it temporarily changes the current working directory of the process to "
"*root_dir* to perform archiving."
msgstr ""

#: ../../library/shutil.rst:638
msgid ""
"The modern pax (POSIX.1-2001) format is now used instead of the legacy GNU "
"format for archives created with ``format=\"tar\"``."
msgstr ""
"``format=\"tar\"`` で作成されたアーカイブでは、レガシーなGNU形式に代わってモ"
"ダンな pax (POSIX.1-2001) 形式が使われます。"

#: ../../library/shutil.rst:642
msgid ""
"This function is now made thread-safe during creation of standard ``.zip`` "
"and tar archives."
msgstr ""

#: ../../library/shutil.rst:648
msgid ""
"Return a list of supported formats for archiving. Each element of the "
"returned sequence is a tuple ``(name, description)``."
msgstr ""
"アーカイブ化をサポートしているフォーマットのリストを返します。返されるシーケ"
"ンスのそれぞれの要素は、タプル ``(name, description)`` です。"

#: ../../library/shutil.rst:651 ../../library/shutil.rst:762
msgid "By default :mod:`shutil` provides these formats:"
msgstr "デフォルトでは、 :mod:`shutil` は次のフォーマットを提供しています。"

#: ../../library/shutil.rst:653
msgid "*zip*: ZIP file (if the :mod:`zlib` module is available)."
msgstr "*zip*: ZIP ファイル (:mod:`zlib` モジュールが利用可能な場合)。"

#: ../../library/shutil.rst:654
msgid ""
"*tar*: Uncompressed tar file. Uses POSIX.1-2001 pax format for new archives."
msgstr "*tar*: 非圧縮の tar ファイル。 POSIX.1-2001 pax 形式が使われます。"

#: ../../library/shutil.rst:655 ../../library/shutil.rst:767
msgid "*gztar*: gzip'ed tar-file (if the :mod:`zlib` module is available)."
msgstr ""
"*gztar*: gzip で圧縮された tar ファイル (:mod:`zlib` モジュールが利用可能な場"
"合)。"

#: ../../library/shutil.rst:656 ../../library/shutil.rst:768
msgid "*bztar*: bzip2'ed tar-file (if the :mod:`bz2` module is available)."
msgstr ""
"*bztar*: bzip2 で圧縮された tar ファイル (:mod:`bz2` モジュールが利用可能な場"
"合)。"

#: ../../library/shutil.rst:657 ../../library/shutil.rst:769
msgid "*xztar*: xz'ed tar-file (if the :mod:`lzma` module is available)."
msgstr ""
"*xztar*: xz で圧縮された tar ファイル (:mod:`lzma` モジュールが利用可能な場"
"合)。"

#: ../../library/shutil.rst:659
msgid ""
"You can register new formats or provide your own archiver for any existing "
"formats, by using :func:`register_archive_format`."
msgstr ""
":func:`register_archive_format` を使って、新しいフォーマットを登録したり、既"
"存のフォーマットに独自のアーカイバを提供したりできます。"

#: ../../library/shutil.rst:665
msgid "Register an archiver for the format *name*."
msgstr "アーカイバをフォーマット *name* に登録します。"

#: ../../library/shutil.rst:667
msgid ""
"*function* is the callable that will be used to unpack archives. The "
"callable will receive the *base_name* of the file to create, followed by the "
"*base_dir* (which defaults to :data:`os.curdir`) to start archiving from. "
"Further arguments are passed as keyword arguments: *owner*, *group*, "
"*dry_run* and *logger* (as passed in :func:`make_archive`)."
msgstr ""
"*function* はアーカイブのアンパックに使用される呼び出し可能オブジェクトです。"
"*funciton* は作成するファイルの *base_name*、続いてアーカイブを開始する元の "
"*base_dir* (デフォルトは :data:`os.curdir`) を受け取ります。さらなる引数は、"
"次のキーワード引数として渡されます: *owner*, *group*, *dry_run* ならびに "
"*logger* (:func:`make_archive` に渡されます)。"

#: ../../library/shutil.rst:673
msgid ""
"If *function* has the custom attribute ``function.supports_root_dir`` set to "
"``True``, the *root_dir* argument is passed as a keyword argument. Otherwise "
"the current working directory of the process is temporarily changed to "
"*root_dir* before calling *function*. In this case :func:`make_archive` is "
"not thread-safe."
msgstr ""

#: ../../library/shutil.rst:679
msgid ""
"If given, *extra_args* is a sequence of ``(name, value)`` pairs that will be "
"used as extra keywords arguments when the archiver callable is used."
msgstr ""
"*extra_args* は、与えられた場合、 ``(name, value)`` の対のシーケンスで、アー"
"カイバ呼び出し可能オブジェクトが使われるときに追加のキーワード引数として使わ"
"れます。"

#: ../../library/shutil.rst:682
msgid ""
"*description* is used by :func:`get_archive_formats` which returns the list "
"of archivers.  Defaults to an empty string."
msgstr ""
"*description* は、アーカイバのリストを返す :func:`get_archive_formats` で使わ"
"れます。デフォルトでは空の文字列です。"

#: ../../library/shutil.rst:685
msgid "Added support for functions supporting the *root_dir* argument."
msgstr ""

#: ../../library/shutil.rst:691
msgid "Remove the archive format *name* from the list of supported formats."
msgstr ""
"アーカイブフォーマット *name* を、サポートされているフォーマットのリストから"
"取り除きます。"

#: ../../library/shutil.rst:696
msgid "Unpack an archive. *filename* is the full path of the archive."
msgstr "アーカイブをアンパックします。 *filename* はアーカイブのフルパスです。"

#: ../../library/shutil.rst:698
msgid ""
"*extract_dir* is the name of the target directory where the archive is "
"unpacked. If not provided, the current working directory is used."
msgstr ""
"*extract_dir* はアーカイブをアンパックする先のディレクトリ名です。指定されな"
"かった場合は現在の作業ディレクトリを利用します。"

#: ../../library/shutil.rst:701
msgid ""
"*format* is the archive format: one of \"zip\", \"tar\", \"gztar\", "
"\"bztar\", or \"xztar\".  Or any other format registered with :func:"
"`register_unpack_format`.  If not provided, :func:`unpack_archive` will use "
"the archive file name extension and see if an unpacker was registered for "
"that extension.  In case none is found, a :exc:`ValueError` is raised."
msgstr ""
"*format* はアーカイブフォーマットで、 \"zip\", \"tar\", \"gztar\", "
"\"bztar\", \"xztar\" あるいは :func:`register_unpack_format` で登録したその他"
"のフォーマットのどれかです。\n"
"指定されなかった場合、 :func:`unpack_archive` はアーカイブファイル名の拡張子"
"に対して登録されたアンパッカーを利用します。\n"
"アンパッカーが見つからなかった場合、 :exc:`ValueError` を発生させます。"

#: ../../library/shutil.rst:708
msgid ""
"The keyword-only *filter* argument is passed to the underlying unpacking "
"function. For zip files, *filter* is not accepted. For tar files, it is "
"recommended to set it to ``'data'``, unless using features specific to tar "
"and UNIX-like filesystems. (See :ref:`tarfile-extraction-filter` for "
"details.) The ``'data'`` filter will become the default for tar files in "
"Python 3.14."
msgstr ""

#: ../../library/shutil.rst:716
msgid ""
"Raises an :ref:`auditing event <auditing>` ``shutil.unpack_archive`` with "
"arguments ``filename``, ``extract_dir``, ``format``."
msgstr ""
"引数 ``filename``, ``extract_dir``, ``format`` を指定して :ref:`監査イベント "
"<auditing>` ``shutil.unpack_archive`` を送出します。 "

#: ../../library/shutil.rst:720
msgid ""
"Never extract archives from untrusted sources without prior inspection. It "
"is possible that files are created outside of the path specified in the "
"*extract_dir* argument, e.g. members that have absolute filenames starting "
"with \"/\" or filenames with two dots \"..\"."
msgstr ""

#: ../../library/shutil.rst:725
msgid "Accepts a :term:`path-like object` for *filename* and *extract_dir*."
msgstr ""
"*filename* と *extract_dir* が :term:`path-like object` を受け付けるようにな"
"りました。"

#: ../../library/shutil.rst:728
msgid "Added the *filter* argument."
msgstr ""

#: ../../library/shutil.rst:733
msgid ""
"Registers an unpack format. *name* is the name of the format and "
"*extensions* is a list of extensions corresponding to the format, like ``."
"zip`` for Zip files."
msgstr ""
"アンパック用のフォーマットを登録します。 *name* はフォーマット名で、 "
"*extensions* はそのフォーマットに対応する拡張子 (例えば Zip ファイルに対して "
"``.zip``) のリストです。"

#: ../../library/shutil.rst:737
msgid ""
"*function* is the callable that will be used to unpack archives. The "
"callable will receive:"
msgstr ""

#: ../../library/shutil.rst:740
msgid "the path of the archive, as a positional argument;"
msgstr ""

#: ../../library/shutil.rst:741
msgid ""
"the directory the archive must be extracted to, as a positional argument;"
msgstr ""

#: ../../library/shutil.rst:742
msgid ""
"possibly a *filter* keyword argument, if it was given to :func:"
"`unpack_archive`;"
msgstr ""

#: ../../library/shutil.rst:744
msgid ""
"additional keyword arguments, specified by *extra_args* as a sequence of "
"``(name, value)`` tuples."
msgstr ""

#: ../../library/shutil.rst:747
msgid ""
"*description* can be provided to describe the format, and will be returned "
"by the :func:`get_unpack_formats` function."
msgstr ""
"フォーマットの説明として *description* を指定することができます。これは :"
"func:`get_unpack_formats` 関数によって返されます。"

#: ../../library/shutil.rst:753
msgid "Unregister an unpack format. *name* is the name of the format."
msgstr ""
"アンパックフォーマットを登録解除します。 *name* はフォーマットの名前です。"

#: ../../library/shutil.rst:758
msgid ""
"Return a list of all registered formats for unpacking. Each element of the "
"returned sequence is a tuple ``(name, extensions, description)``."
msgstr ""
"登録されているすべてのアンパックフォーマットをリストで返します。戻り値のリス"
"トの各要素は ``(name, extensions, description)`` の形のタプルです。"

#: ../../library/shutil.rst:764
msgid ""
"*zip*: ZIP file (unpacking compressed files works only if the corresponding "
"module is available)."
msgstr ""
"*zip*: ZIP ファイル (対応するモジュールが利用可能な場合にのみ圧縮ファイルはア"
"ンパックされます)。"

#: ../../library/shutil.rst:766
msgid "*tar*: uncompressed tar file."
msgstr "*tar*: 圧縮されていない tar ファイル。"

#: ../../library/shutil.rst:771
msgid ""
"You can register new formats or provide your own unpacker for any existing "
"formats, by using :func:`register_unpack_format`."
msgstr ""
":func:`register_unpack_format` を使って新しいフォーマットや既存のフォーマット"
"に対する別のアンパッカーを登録することができます。"

#: ../../library/shutil.rst:778
msgid "Archiving example"
msgstr "アーカイブ化の例"

#: ../../library/shutil.rst:780
msgid ""
"In this example, we create a gzip'ed tar-file archive containing all files "
"found in the :file:`.ssh` directory of the user::"
msgstr ""
"この例では、ユーザの :file:`.ssh` ディレクトリにあるすべてのファイルを含む、 "
"gzip された tar ファイルアーカイブを作成します::"

#: ../../library/shutil.rst:783
msgid ""
">>> from shutil import make_archive\n"
">>> import os\n"
">>> archive_name = os.path.expanduser(os.path.join('~', 'myarchive'))\n"
">>> root_dir = os.path.expanduser(os.path.join('~', '.ssh'))\n"
">>> make_archive(archive_name, 'gztar', root_dir)\n"
"'/Users/tarek/myarchive.tar.gz'"
msgstr ""

#: ../../library/shutil.rst:790
msgid "The resulting archive contains:"
msgstr "結果のアーカイブは、以下のものを含みます:"

#: ../../library/shutil.rst:792
msgid ""
"$ tar -tzvf /Users/tarek/myarchive.tar.gz\n"
"drwx------ tarek/staff       0 2010-02-01 16:23:40 ./\n"
"-rw-r--r-- tarek/staff     609 2008-06-09 13:26:54 ./authorized_keys\n"
"-rwxr-xr-x tarek/staff      65 2008-06-09 13:26:54 ./config\n"
"-rwx------ tarek/staff     668 2008-06-09 13:26:54 ./id_dsa\n"
"-rwxr-xr-x tarek/staff     609 2008-06-09 13:26:54 ./id_dsa.pub\n"
"-rw------- tarek/staff    1675 2008-06-09 13:26:54 ./id_rsa\n"
"-rw-r--r-- tarek/staff     397 2008-06-09 13:26:54 ./id_rsa.pub\n"
"-rw-r--r-- tarek/staff   37192 2010-02-06 18:23:10 ./known_hosts"
msgstr ""

#: ../../library/shutil.rst:808
msgid "Archiving example with *base_dir*"
msgstr "*base_dir* を使ったアーカイブ化の例"

#: ../../library/shutil.rst:810
msgid ""
"In this example, similar to the `one above <shutil-archiving-example_>`_, we "
"show how to use :func:`make_archive`, but this time with the usage of "
"*base_dir*.  We now have the following directory structure:"
msgstr ""
"この例では、 `上記の例 <shutil-archiving-example_>`_ と同じく :func:"
"`make_archive` の使い方を示しますが、ここでは特に *base_dir* の使い方を説明し"
"ます。以下のようなディレクトリ構造があるとします。"

#: ../../library/shutil.rst:814
msgid ""
"$ tree tmp\n"
"tmp\n"
"└── root\n"
"    └── structure\n"
"        ├── content\n"
"            └── please_add.txt\n"
"        └── do_not_add.txt"
msgstr ""

#: ../../library/shutil.rst:824
msgid ""
"In the final archive, :file:`please_add.txt` should be included, but :file:"
"`do_not_add.txt` should not.  Therefore we use the following::"
msgstr ""
"作成するアーカイブには :file:`please_add.txt` が含まれますが、いっぽう :file:"
"`do_not_add.txt` は含まないようにします。この場合以下のようにします。"

#: ../../library/shutil.rst:827
msgid ""
">>> from shutil import make_archive\n"
">>> import os\n"
">>> archive_name = os.path.expanduser(os.path.join('~', 'myarchive'))\n"
">>> make_archive(\n"
"...     archive_name,\n"
"...     'tar',\n"
"...     root_dir='tmp/root',\n"
"...     base_dir='structure/content',\n"
"... )\n"
"'/Users/tarek/my_archive.tar'"
msgstr ""

#: ../../library/shutil.rst:838
msgid "Listing the files in the resulting archive gives us:"
msgstr "アーカイブに含まれるファイルをリストすると、以下のようになります。"

#: ../../library/shutil.rst:840
msgid ""
"$ python -m tarfile -l /Users/tarek/myarchive.tar\n"
"structure/content/\n"
"structure/content/please_add.txt"
msgstr ""

#: ../../library/shutil.rst:848
msgid "Querying the size of the output terminal"
msgstr "出力ターミナルのサイズの取得"

#: ../../library/shutil.rst:852
msgid "Get the size of the terminal window."
msgstr "ターミナルウィンドウのサイズを取得します。"

#: ../../library/shutil.rst:854
msgid ""
"For each of the two dimensions, the environment variable, ``COLUMNS`` and "
"``LINES`` respectively, is checked. If the variable is defined and the value "
"is a positive integer, it is used."
msgstr ""
"幅と高さについて、それぞれ ``COLUMNS`` と ``LINES`` という環境変数をチェック"
"します。その変数が定義されていて値が正の整数であればそれを利用します。"

#: ../../library/shutil.rst:858
msgid ""
"When ``COLUMNS`` or ``LINES`` is not defined, which is the common case, the "
"terminal connected to :data:`sys.__stdout__` is queried by invoking :func:"
"`os.get_terminal_size`."
msgstr ""
"典型的な ``COLUMNS`` や ``LINES`` が定義されていない場合には、 :data:`sys."
"__stdout__` に接続されているターミナルに :func:`os.get_terminal_size` を呼び"
"出して問い合わせます。"

#: ../../library/shutil.rst:862
msgid ""
"If the terminal size cannot be successfully queried, either because the "
"system doesn't support querying, or because we are not connected to a "
"terminal, the value given in ``fallback`` parameter is used. ``fallback`` "
"defaults to ``(80, 24)`` which is the default size used by many terminal "
"emulators."
msgstr ""
"システムが対応していない場合やターミナルに接続していないなどの理由でターミナ"
"ルサイズの問い合わせに失敗した場合、 ``fallback`` 引数に与えられた値を利用し"
"ます。 ``fallback`` のデフォルト値は ``(80, 24)`` で、これは多くのターミナル"
"エミュレーターが利用しているデフォルトサイズです。"

#: ../../library/shutil.rst:868
msgid "The value returned is a named tuple of type :class:`os.terminal_size`."
msgstr "戻り値は :class:`os.terminal_size` 型の名前付きタプルです。"

#: ../../library/shutil.rst:870
msgid ""
"See also: The Single UNIX Specification, Version 2, `Other Environment "
"Variables`_."
msgstr ""
"参考: The Single UNIX Specification, Version 2, `Other Environment "
"Variables`_."

#: ../../library/shutil.rst:875
msgid ""
"The ``fallback`` values are also used if :func:`os.get_terminal_size` "
"returns zeroes."
msgstr ""

#: ../../library/shutil.rst:12
msgid "file"
msgstr "ファイル"

#: ../../library/shutil.rst:12
msgid "copying"
msgstr "コピー"

#: ../../library/shutil.rst:12
msgid "copying files"
msgstr "ファイルのコピー"

#: ../../library/shutil.rst:297
msgid "directory"
msgstr "ディレクトリ"

#: ../../library/shutil.rst:297
msgid "deleting"
msgstr "削除"
