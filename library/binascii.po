# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/binascii.rst:3
msgid ":mod:`binascii` --- Convert between binary and ASCII"
msgstr ":mod:`binascii` --- バイナリデータと ASCII データとの間での変換"

#: ../../library/binascii.rst:15
msgid ""
"The :mod:`binascii` module contains a number of methods to convert between "
"binary and various ASCII-encoded binary representations. Normally, you will "
"not use these functions directly but use wrapper modules like :mod:`uu`, :"
"mod:`base64`, or :mod:`binhex` instead. The :mod:`binascii` module contains "
"low-level functions written in C for greater speed that are used by the "
"higher-level modules."
msgstr ""
":mod:`binascii` モジュールにはバイナリと ASCII コード化されたバイナリ表現との"
"間の変換を行うための多数のメソッドが含まれています。通常、これらの関数を直接"
"使う必要はなく、 :mod:`uu` 、 :mod:`base64` や :mod:`binhex` といった、ラッ"
"パ (wrapper) モジュールを使うことになるでしょう。 :mod:`binascii` モジュール"
"は、高レベルなモジュールで利用される、高速な C で書かれた低レベル関数を提供し"
"ています。"

#: ../../library/binascii.rst:22
msgid "The :mod:`binascii` module defines the following functions:"
msgstr ":mod:`binascii` モジュールでは以下の関数を定義します:"

#: ../../library/binascii.rst:27
msgid ""
"Convert a single line of uuencoded data back to binary and return the binary "
"data. Lines normally contain 45 (binary) bytes, except for the last line. "
"Line data may be followed by whitespace."
msgstr ""
"uuencode された 1 行のデータをバイナリに変換し、変換後のバイナリデータを返し"
"ます。最後の行を除いて、通常 1 行には (バイナリデータで) 45 バイトが含まれま"
"す。入力データの先頭には空白文字が連続していてもかまいません。"

#: ../../library/binascii.rst:34
msgid ""
"Convert binary data to a line of ASCII characters, the return value is the "
"converted line, including a newline char. The length of *data* should be at "
"most 45."
msgstr ""
"バイナリデータを uuencode して 1 行の ASCII 文字列に変換します。戻り値は変換"
"後の 1 行の文字列で、改行を含みます。 *data* の長さは 45 バイト以下でなければ"
"なりません。"

#: ../../library/binascii.rst:41
msgid ""
"Convert a block of base64 data back to binary and return the binary data. "
"More than one line may be passed at a time."
msgstr ""
"base64 でエンコードされたデータのブロックをバイナリに変換し、変換後のバイナリ"
"データを返します。一度に 1 行以上のデータを与えてもかまいません。"

#: ../../library/binascii.rst:47
msgid ""
"Convert binary data to a line of ASCII characters in base64 coding. The "
"return value is the converted line, including a newline char.  The newline "
"is added because the original use case for this function was to feed it a "
"series of 57 byte input lines to get output lines that conform to the MIME-"
"base64 standard.  Otherwise the output conforms to :rfc:`3548`."
msgstr ""
"バイナリデータを base64 でエンコードして 1 行の ASCII 文字列に変換します。戻"
"り値は変換後の 1 行の文字列で、改行文字を含みます。出力には改行コードが追加さ"
"れます。これはこの関数の元々のユースケースが、MIME-base64 標準に準拠するため"
"の出力行を得るために 57 バイトずつ data を読んで都度出力を供給する、というも"
"のであったためです。このユースケースでの利用でないならば、出力は :rfc:`3548` "
"に準拠します(---訳注: MIME-base64: :rfc:`1521` 、 base64: :rfc:`3548` ---)。"

#: ../../library/binascii.rst:56
msgid ""
"Convert a block of quoted-printable data back to binary and return the "
"binary data. More than one line may be passed at a time. If the optional "
"argument *header* is present and true, underscores will be decoded as spaces."
msgstr ""
"quoted-printable 形式のデータをバイナリに変換し、バイナリデータを返します。一"
"度に 1 行以上のデータを渡すことができます。オプション引数 *header* が与えられ"
"ており、かつその値が真であれば、アンダースコアは空白文字にデコードされます。"

#: ../../library/binascii.rst:63
msgid ""
"Convert binary data to a line(s) of ASCII characters in quoted-printable "
"encoding.  The return value is the converted line(s). If the optional "
"argument *quotetabs* is present and true, all tabs and spaces will be "
"encoded.   If the optional argument *istext* is present and true, newlines "
"are not encoded but trailing whitespace will be encoded. If the optional "
"argument *header* is present and true, spaces will be encoded as underscores "
"per RFC1522. If the optional argument *header* is present and false, newline "
"characters will be encoded as well; otherwise linefeed conversion might "
"corrupt the binary data stream."
msgstr ""
"バイナリデータを quoted-printable 形式でエンコードして 1 行から複数行の "
"ASCII 文字列に変換します。変換後の文字列を返します。オプション引数 "
"*quptetabs* が存在し、かつその値が真であれば、全てのタブおよび空白文字もエン"
"コードされます。オプション引数 *istext* が存在し、かつその値が真であれば、改"
"行はエンコードされませんが、行末の空白文字はエンコードされます。オプション引"
"数 *header* が存在し、かつその値が真である場合、空白文字は RFC1522 にしたがっ"
"てアンダースコアにエンコードされます。オプション引数 *header* が存在し、かつ"
"その値が偽である場合、改行文字も同様にエンコードされます。そうでない場合、復"
"帰 (linefeed) 文字の変換によってバイナリデータストリームが破損してしまうかも"
"しれません。"

#: ../../library/binascii.rst:76
msgid ""
"Convert binhex4 formatted ASCII data to binary, without doing RLE-"
"decompression. The string should contain a complete number of binary bytes, "
"or (in case of the last portion of the binhex4 data) have the remaining bits "
"zero."
msgstr ""
"binhex4 形式の ASCII 文字列データを RLE 展開を行わないでバイナリに変換しま"
"す。文字列はバイナリのバイトデータを完全に含むような長さか、または (binhex4 "
"データの最後の部分の場合) 余白のビットがゼロになっていなければなりません。"

#: ../../library/binascii.rst:83
msgid ""
"Perform RLE-decompression on the data, as per the binhex4 standard. The "
"algorithm uses ``0x90`` after a byte as a repeat indicator, followed by a "
"count. A count of ``0`` specifies a byte value of ``0x90``. The routine "
"returns the decompressed data, unless data input data ends in an orphaned "
"repeat indicator, in which case the :exc:`Incomplete` exception is raised."
msgstr ""
"*data* に対し、 binhex4 標準に従って RLE 展開を行います。このアルゴリズムで"
"は、あるバイトの後ろに ``0x90`` がきた場合、そのバイトの反復を指示しており、"
"さらにその後ろに反復カウントが続きます。カウントが ``0`` の場合 ``0x90`` 自体"
"を示します。このルーチンは入力データの末端における反復指定が不完全でないかぎ"
"り解凍されたデータを返しますが、不完全な場合、例外 :exc:`Incomplete` が送出さ"
"れます。"

#: ../../library/binascii.rst:92
msgid "Perform binhex4 style RLE-compression on *data* and return the result."
msgstr "binhex4 方式の RLE 圧縮を *data* に対して行い、その結果を返します。"

#: ../../library/binascii.rst:97
msgid ""
"Perform hexbin4 binary-to-ASCII translation and return the resulting string. "
"The argument should already be RLE-coded, and have a length divisible by 3 "
"(except possibly the last fragment)."
msgstr ""
"バイナリを hexbin4 エンコードして ASCII 文字列に変換し、変換後の文字列を返し"
"ます。引数の *data* はすでに RLE エンコードされていなければならず、その長さ"
"は (最後のフラグメントを除いて) 3 で割り切れなければなりません。"

#: ../../library/binascii.rst:104
msgid ""
"Compute a 16-bit CRC value of *data*, starting with an initial *crc* and "
"returning the result.  This uses the CRC-CCITT polynomial *x*:sup:`16` + *x*:"
"sup:`12` + *x*:sup:`5` + 1, often represented as 0x1021.  This CRC is used "
"in the binhex4 format."
msgstr ""
"*crc* を初期値として *data* の 16 ビット CRC 値を計算し、その結果を返しま"
"す。\n"
"この関数は、よく 0x1021 と表現される CRC-CCITT 多項式 *x*:sup:`16` + *x*:sup:"
"`12` + *x*:sup:`5` + 1 を使います。\n"
"この CRC は binhex4 形式で使われています。"

#: ../../library/binascii.rst:112
msgid ""
"Compute CRC-32, the 32-bit checksum of data, starting with an initial crc.  "
"This is consistent with the ZIP file checksum.  Since the algorithm is "
"designed for use as a checksum algorithm, it is not suitable for use as a "
"general hash algorithm.  Use as follows::"
msgstr ""
"32 ビットチェックサムである CRC-32 を *data* に対して計算します。初期値は "
"*crc* です。これは ZIP ファイルのチェックサムと同じです。このアルゴリズムは"
"チェックサムアルゴリズムとして設計されたもので、一般的なハッシュアルゴリズム"
"には向きません。以下のようにして使います::"

#: ../../library/binascii.rst:124
msgid ""
"To generate the same numeric value across all Python versions and platforms "
"use crc32(data) & 0xffffffff.  If you are only using the checksum in packed "
"binary format this is not necessary as the return value is the correct 32bit "
"binary representation regardless of sign."
msgstr ""
"全ての Python のバージョン、全てのプラットフォームに渡って同じ数値を生成しよ"
"うとするならば、 ``crc32(data) & 0xffffffff`` を使って下さい。チェックサムを"
"バイナリ形式そのままでだけ扱うならばこのような細工は必要ありません。返値は符"
"号に関係なく正しい32ビットのバイナリ表現だからです。"

#: ../../library/binascii.rst:130
msgid ""
"The return value is in the range [-2**31, 2**31-1] regardless of platform.  "
"In the past the value would be signed on some platforms and unsigned on "
"others.  Use & 0xffffffff on the value if you want it to match Python 3 "
"behavior."
msgstr ""
"返値はどのプラットフォームでも [-2**31, 2**31-1] の範囲の値です。過去において"
"は返値はあるプラットフォームでは符号付きでまた別のところでは符号無しでした。 "
"3.0 における振る舞いに合わせるためには & 0xffffffff を施して下さい。"

#: ../../library/binascii.rst:136
msgid ""
"The return value is unsigned and in the range [0, 2**32-1] regardless of "
"platform."
msgstr ""
"戻り値の範囲は、プラットフォームに関係なく [0, 2**32-1] の範囲の符号無しで"
"す。"

#: ../../library/binascii.rst:144
msgid ""
"Return the hexadecimal representation of the binary *data*.  Every byte of "
"*data* is converted into the corresponding 2-digit hex representation.  The "
"resulting string is therefore twice as long as the length of *data*."
msgstr ""
"バイナリデータ *data* の 16 進数表現を返します。 *data* の各バイトは対応する "
"2 桁の 16 進数表現に変換されます。従って、変換結果の文字列は *data* の 2 倍の"
"長さになります。"

#: ../../library/binascii.rst:152
msgid ""
"Return the binary data represented by the hexadecimal string *hexstr*.  This "
"function is the inverse of :func:`b2a_hex`. *hexstr* must contain an even "
"number of hexadecimal digits (which can be upper or lower case), otherwise "
"a :exc:`TypeError` is raised."
msgstr ""
"16 進数表記の文字列 *hexstr* の表すバイナリデータを返します。この関数は :"
"func:`b2a_hex` の逆です。 *hexstr* は 16 進数字 (大文字でも小文字でもかまいま"
"せん) を偶数個含んでいなければなりません。そうでないばあい、例外 :exc:"
"`TypeError` が送出されます。"

#: ../../library/binascii.rst:160
msgid "Exception raised on errors. These are usually programming errors."
msgstr "エラーが発生した際に送出される例外です。通常はプログラムのエラーです。"

#: ../../library/binascii.rst:165
msgid ""
"Exception raised on incomplete data. These are usually not programming "
"errors, but may be handled by reading a little more data and trying again."
msgstr ""
"変換するデータが不完全な場合に送出される例外です。通常はプログラムのエラーで"
"はなく、多少追加読み込みを行って再度変換を試みることで対処できます。"

#: ../../library/binascii.rst:172
msgid "Module :mod:`base64`"
msgstr ":mod:`base64` モジュール"

#: ../../library/binascii.rst:172
msgid "Support for RFC compliant base64-style encoding in base 16, 32, and 64."
msgstr "RFC 準拠の base64 形式の、底が 16、32、64 のエンコーディング。"

#: ../../library/binascii.rst:175
msgid "Module :mod:`binhex`"
msgstr ":mod:`binhex` モジュール"

#: ../../library/binascii.rst:175
msgid "Support for the binhex format used on the Macintosh."
msgstr "Macintosh で使われる binhex フォーマットのサポート。"

#: ../../library/binascii.rst:178
msgid "Module :mod:`uu`"
msgstr ":mod:`uu` モジュール"

#: ../../library/binascii.rst:178
msgid "Support for UU encoding used on Unix."
msgstr "Unix で使われる UU エンコードのサポート。"

#: ../../library/binascii.rst:180
msgid "Module :mod:`quopri`"
msgstr ":mod:`quopri` モジュール"

#: ../../library/binascii.rst:181
msgid "Support for quoted-printable encoding used in MIME email messages."
msgstr ""
"MIME 電子メールメッセージで使われる quoted-printable エンコードのサポート。"
