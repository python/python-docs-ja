# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 03:16+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-subprocess.rst:7
msgid "Subprocesses"
msgstr "サブプロセス"

#: ../../library/asyncio-subprocess.rst:9
msgid ""
"This section describes high-level async/await asyncio APIs to create and "
"manage subprocesses."
msgstr ""
"このセクションはサブプロセスの生成と管理を行う高水準の async/await asyncio "
"API について説明します。"

#: ../../library/asyncio-subprocess.rst:14
msgid ""
"Here's an example of how asyncio can run a shell command and obtain its "
"result::"
msgstr ""
"以下は、 asyncio モジュールがどのようにシェルコマンドを実行し、結果を取得でき"
"るかを示す例です::"

#: ../../library/asyncio-subprocess.rst:35
msgid "will print::"
msgstr "このサンプルコードは以下を出力します::"

#: ../../library/asyncio-subprocess.rst:41
msgid ""
"Because all asyncio subprocess functions are asynchronous and asyncio "
"provides many tools to work with such functions, it is easy to execute and "
"monitor multiple subprocesses in parallel.  It is indeed trivial to modify "
"the above example to run several commands simultaneously::"
msgstr ""

#: ../../library/asyncio-subprocess.rst:53
msgid "See also the `Examples`_ subsection."
msgstr ""

#: ../../library/asyncio-subprocess.rst:57
msgid "Creating Subprocesses"
msgstr ""

#: ../../library/asyncio-subprocess.rst:63
msgid "Create a subprocess."
msgstr "サブプロセスを作成します。"

#: ../../library/asyncio-subprocess.rst:65
#: ../../library/asyncio-subprocess.rst:80
msgid ""
"The *limit* argument sets the buffer limit for :class:`StreamReader` "
"wrappers for :attr:`Process.stdout` and :attr:`Process.stderr` (if :attr:"
"`subprocess.PIPE` is passed to *stdout* and *stderr* arguments)."
msgstr ""

#: ../../library/asyncio-subprocess.rst:69
#: ../../library/asyncio-subprocess.rst:84
msgid "Return a :class:`~asyncio.subprocess.Process` instance."
msgstr ":class:`~asyncio.subprocess.Process` のインスタンスを返します。"

#: ../../library/asyncio-subprocess.rst:71
msgid ""
"See the documentation of :meth:`loop.subprocess_exec` for other parameters."
msgstr ""

#: ../../library/asyncio-subprocess.rst:78
msgid "Run the *cmd* shell command."
msgstr ""

#: ../../library/asyncio-subprocess.rst:86
msgid ""
"See the documentation of :meth:`loop.subprocess_shell` for other parameters."
msgstr ""

#: ../../library/asyncio-subprocess.rst:91
msgid ""
"It is the application's responsibility to ensure that all whitespace and "
"special characters are quoted appropriately to avoid `shell injection "
"<https://en.wikipedia.org/wiki/Shell_injection#Shell_injection>`_ "
"vulnerabilities. The :func:`shlex.quote` function can be used to properly "
"escape whitespace and special shell characters in strings that are going to "
"be used to construct shell commands."
msgstr ""

#: ../../library/asyncio-subprocess.rst:100
msgid ""
"The default asyncio event loop implementation on **Windows** does not "
"support subprocesses. Subprocesses are available for Windows if a :class:"
"`ProactorEventLoop` is used. See :ref:`Subprocess Support on Windows "
"<asyncio-windows-subprocess>` for details."
msgstr ""

#: ../../library/asyncio-subprocess.rst:108
msgid ""
"asyncio also has the following *low-level* APIs to work with subprocesses: :"
"meth:`loop.subprocess_exec`, :meth:`loop.subprocess_shell`, :meth:`loop."
"connect_read_pipe`, :meth:`loop.connect_write_pipe`, as well as the :ref:"
"`Subprocess Transports <asyncio-subprocess-transports>` and :ref:`Subprocess "
"Protocols <asyncio-subprocess-protocols>`."
msgstr ""

#: ../../library/asyncio-subprocess.rst:116
msgid "Constants"
msgstr "定数"

#: ../../library/asyncio-subprocess.rst:120
msgid "Can be passed to the *stdin*, *stdout* or *stderr* parameters."
msgstr ""

#: ../../library/asyncio-subprocess.rst:122
msgid ""
"If *PIPE* is passed to *stdin* argument, the :attr:`Process.stdin <asyncio."
"subprocess.Process.stdin>` attribute will point to a :class:`StreamWriter` "
"instance."
msgstr ""

#: ../../library/asyncio-subprocess.rst:126
msgid ""
"If *PIPE* is passed to *stdout* or *stderr* arguments, the :attr:`Process."
"stdout <asyncio.subprocess.Process.stdout>` and :attr:`Process.stderr "
"<asyncio.subprocess.Process.stderr>` attributes will point to :class:"
"`StreamReader` instances."
msgstr ""

#: ../../library/asyncio-subprocess.rst:133
msgid ""
"Special value that can be used as the *stderr* argument and indicates that "
"standard error should be redirected into standard output."
msgstr ""

#: ../../library/asyncio-subprocess.rst:138
msgid ""
"Special value that can be used as the *stdin*, *stdout* or *stderr* argument "
"to process creation functions.  It indicates that the special file :data:`os."
"devnull` will be used for the corresponding subprocess stream."
msgstr ""

#: ../../library/asyncio-subprocess.rst:144
msgid "Interacting with Subprocesses"
msgstr ""

#: ../../library/asyncio-subprocess.rst:146
msgid ""
"Both :func:`create_subprocess_exec` and :func:`create_subprocess_shell` "
"functions return instances of the *Process* class.  *Process* is a high-"
"level wrapper that allows communicating with subprocesses and watching for "
"their completion."
msgstr ""

#: ../../library/asyncio-subprocess.rst:153
msgid ""
"An object that wraps OS processes created by the :func:"
"`create_subprocess_exec` and :func:`create_subprocess_shell` functions."
msgstr ""

#: ../../library/asyncio-subprocess.rst:157
msgid ""
"This class is designed to have a similar API to the :class:`subprocess."
"Popen` class, but there are some notable differences:"
msgstr ""

#: ../../library/asyncio-subprocess.rst:161
msgid ""
"unlike Popen, Process instances do not have an equivalent to the :meth:"
"`~subprocess.Popen.poll` method;"
msgstr ""

#: ../../library/asyncio-subprocess.rst:164
msgid ""
"the :meth:`~asyncio.subprocess.Process.communicate` and :meth:`~asyncio."
"subprocess.Process.wait` methods don't have a *timeout* parameter: use the :"
"func:`wait_for` function;"
msgstr ""

#: ../../library/asyncio-subprocess.rst:168
msgid ""
"the :meth:`Process.wait() <asyncio.subprocess.Process.wait>` method is "
"asynchronous, whereas :meth:`subprocess.Popen.wait` method is implemented as "
"a blocking busy loop;"
msgstr ""

#: ../../library/asyncio-subprocess.rst:172
msgid "the *universal_newlines* parameter is not supported."
msgstr ""

#: ../../library/asyncio-subprocess.rst:174
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""
"このクラスは :ref:`スレッド安全ではありません <asyncio-multithreading>`。"

#: ../../library/asyncio-subprocess.rst:176
msgid ""
"See also the :ref:`Subprocess and Threads <asyncio-subprocess-threads>` "
"section."
msgstr ""
":ref:`サブプロセスとスレッド <asyncio-subprocess-threads>` 節も参照してくださ"
"い。"

#: ../../library/asyncio-subprocess.rst:181
msgid "Wait for the child process to terminate."
msgstr ""

#: ../../library/asyncio-subprocess.rst:183
msgid "Set and return the :attr:`returncode` attribute."
msgstr ""

#: ../../library/asyncio-subprocess.rst:187
msgid ""
"This method can deadlock when using ``stdout=PIPE`` or ``stderr=PIPE`` and "
"the child process generates so much output that it blocks waiting for the OS "
"pipe buffer to accept more data. Use the :meth:`communicate` method when "
"using pipes to avoid this condition."
msgstr ""

#: ../../library/asyncio-subprocess.rst:195
msgid "Interact with process:"
msgstr ""

#: ../../library/asyncio-subprocess.rst:197
msgid "send data to *stdin* (if *input* is not ``None``);"
msgstr ""

#: ../../library/asyncio-subprocess.rst:198
msgid "read data from *stdout* and *stderr*, until EOF is reached;"
msgstr ""

#: ../../library/asyncio-subprocess.rst:199
msgid "wait for process to terminate."
msgstr ""

#: ../../library/asyncio-subprocess.rst:201
msgid ""
"The optional *input* argument is the data (:class:`bytes` object) that will "
"be sent to the child process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:204
msgid "Return a tuple ``(stdout_data, stderr_data)``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:206
msgid ""
"If either :exc:`BrokenPipeError` or :exc:`ConnectionResetError` exception is "
"raised when writing *input* into *stdin*, the exception is ignored.  This "
"condition occurs when the process exits before all data are written into "
"*stdin*."
msgstr ""

#: ../../library/asyncio-subprocess.rst:211
msgid ""
"If it is desired to send data to the process' *stdin*, the process needs to "
"be created with ``stdin=PIPE``.  Similarly, to get anything other than "
"``None`` in the result tuple, the process has to be created with "
"``stdout=PIPE`` and/or ``stderr=PIPE`` arguments."
msgstr ""

#: ../../library/asyncio-subprocess.rst:217
msgid ""
"Note, that the data read is buffered in memory, so do not use this method if "
"the data size is large or unlimited."
msgstr ""

#: ../../library/asyncio-subprocess.rst:222
msgid "Sends the signal *signal* to the child process."
msgstr "子プロセスにシグナル *signal* を送信します。"

#: ../../library/asyncio-subprocess.rst:226
msgid ""
"On Windows, :py:data:`SIGTERM` is an alias for :meth:`terminate`. "
"``CTRL_C_EVENT`` and ``CTRL_BREAK_EVENT`` can be sent to processes started "
"with a *creationflags* parameter which includes ``CREATE_NEW_PROCESS_GROUP``."
msgstr ""
"Windows では、:py:data:`SIGTERM` は :meth:`terminate` の別名になります。"
"``CTRL_C_EVENT`` および ``CTRL_BREAK_EVENT`` で、*creationflags* で始まり、"
"``CREATE_NEW_PROCESS_GROUP`` を含むパラメータをプロセスに送信することができま"
"す。"

#: ../../library/asyncio-subprocess.rst:233
msgid "Stop the child process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:235
msgid ""
"On POSIX systems this method sends :py:data:`signal.SIGTERM` to the child "
"process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:238
msgid ""
"On Windows the Win32 API function :c:func:`TerminateProcess` is called to "
"stop the child process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:243
msgid "Kill the child."
msgstr ""

#: ../../library/asyncio-subprocess.rst:245
msgid ""
"On POSIX systems this method sends :py:data:`SIGKILL` to the child process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:248
msgid "On Windows this method is an alias for :meth:`terminate`."
msgstr ""

#: ../../library/asyncio-subprocess.rst:252
msgid ""
"Standard input stream (:class:`StreamWriter`) or ``None`` if the process was "
"created with ``stdin=None``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:257
msgid ""
"Standard output stream (:class:`StreamReader`) or ``None`` if the process "
"was created with ``stdout=None``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:262
msgid ""
"Standard error stream (:class:`StreamReader`) or ``None`` if the process was "
"created with ``stderr=None``."
msgstr ""

#: ../../library/asyncio-subprocess.rst:267
msgid ""
"Use the :meth:`communicate` method rather than :attr:`process.stdin.write() "
"<stdin>`, :attr:`await process.stdout.read() <stdout>` or :attr:`await "
"process.stderr.read <stderr>`. This avoids deadlocks due to streams pausing "
"reading or writing and blocking the child process."
msgstr ""

#: ../../library/asyncio-subprocess.rst:276
msgid "Process identification number (PID)."
msgstr ""

#: ../../library/asyncio-subprocess.rst:278
msgid ""
"Note that for processes created by the :func:`create_subprocess_shell` "
"function, this attribute is the PID of the spawned shell."
msgstr ""

#: ../../library/asyncio-subprocess.rst:283
msgid "Return code of the process when it exits."
msgstr ""

#: ../../library/asyncio-subprocess.rst:285
msgid "A ``None`` value indicates that the process has not terminated yet."
msgstr ""

#: ../../library/asyncio-subprocess.rst:287
msgid ""
"A negative value ``-N`` indicates that the child was terminated by signal "
"``N`` (POSIX only)."
msgstr ""
"負の値 ``-N`` は子プロセスがシグナル ``N`` により中止させられたことを示しま"
"す (POSIX のみ)。"

#: ../../library/asyncio-subprocess.rst:294
msgid "Subprocess and Threads"
msgstr ""

#: ../../library/asyncio-subprocess.rst:296
msgid ""
"Standard asyncio event loop supports running subprocesses from different "
"threads, but there are limitations:"
msgstr ""

#: ../../library/asyncio-subprocess.rst:299
msgid "An event loop must run in the main thread."
msgstr ""

#: ../../library/asyncio-subprocess.rst:301
msgid ""
"The child watcher must be instantiated in the main thread before executing "
"subprocesses from other threads. Call the :func:`get_child_watcher` function "
"in the main thread to instantiate the child watcher."
msgstr ""

#: ../../library/asyncio-subprocess.rst:306
msgid ""
"Note that alternative event loop implementations might not share the above "
"limitations; please refer to their documentation."
msgstr ""

#: ../../library/asyncio-subprocess.rst:311
msgid ""
"The :ref:`Concurrency and multithreading in asyncio <asyncio-"
"multithreading>` section."
msgstr ":ref:`asyncio-multithreading`"

#: ../../library/asyncio-subprocess.rst:316
msgid "Examples"
msgstr "使用例"

#: ../../library/asyncio-subprocess.rst:318
msgid ""
"An example using the :class:`~asyncio.subprocess.Process` class to control a "
"subprocess and the :class:`StreamReader` class to read from its standard "
"output."
msgstr ""

#: ../../library/asyncio-subprocess.rst:324
msgid ""
"The subprocess is created by the :func:`create_subprocess_exec` function::"
msgstr ""

#: ../../library/asyncio-subprocess.rst:355
msgid ""
"See also the :ref:`same example <asyncio_example_subprocess_proto>` written "
"using low-level APIs."
msgstr ""
