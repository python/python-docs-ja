# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2018
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:26+0000\n"
"Last-Translator: tomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-stream.rst:7
msgid "Streams (coroutine based API)"
msgstr "ストリーム (コルーチンベースの API)"

#: ../../library/asyncio-stream.rst:9
msgid "**Source code:** :source:`Lib/asyncio/streams.py`"
msgstr "**ソースコード:** :source:`Lib/asyncio/streams.py`"

#: ../../library/asyncio-stream.rst:12
msgid "Stream functions"
msgstr "ストリーム関数"

#: ../../library/asyncio-stream.rst:16
msgid ""
"The top-level functions in this module are meant as convenience wrappers "
"only; there's really nothing special there, and if they don't do exactly "
"what you want, feel free to copy their code."
msgstr ""
"このモジュール内のトップレベル関数は、便利なラッパーとしてのみ意図されていま"
"す。特別なことは何もありませんし、それらが思い通りに動作しない場合は、ご自由"
"にコードをコピーしてください。"

#: ../../library/asyncio-stream.rst:23
msgid ""
"A wrapper for :meth:`~AbstractEventLoop.create_connection()` returning a "
"(reader, writer) pair."
msgstr ""
":meth:`~AbstractEventLoop.create_connection()` のラッパーで (reader, writer) "
"ペアを返します。"

#: ../../library/asyncio-stream.rst:26
msgid ""
"The reader returned is a :class:`StreamReader` instance; the writer is a :"
"class:`StreamWriter` instance."
msgstr ""
"返されたリーダーは :class:`StreamReader` のインスタンスで、ライターは :class:"
"`StreamWriter` のインスタンスです。"

#: ../../library/asyncio-stream.rst:29
msgid ""
"The arguments are all the usual arguments to :meth:`AbstractEventLoop."
"create_connection` except *protocol_factory*; most common are positional "
"host and port, with various optional keyword arguments following."
msgstr ""
"引数は *protocol_factory* を除き、 :meth:`AbstractEventLoop."
"create_connection` の通常の引数です; 最も一般的なものは位置引数のホストとポー"
"トで、その後にオプションのキーワード引数が続きます。"

#: ../../library/asyncio-stream.rst:34 ../../library/asyncio-stream.rst:58
msgid ""
"Additional optional keyword arguments are *loop* (to set the event loop "
"instance to use) and *limit* (to set the buffer limit passed to the :class:"
"`StreamReader`)."
msgstr ""
"追加のキーワード引数 *loop* には使用するイベントループインスタンスを、"
"*limit* には :class:`StreamReader` に渡すバッファーリミットを設定します。"

#: ../../library/asyncio-stream.rst:38 ../../library/asyncio-stream.rst:62
#: ../../library/asyncio-stream.rst:72 ../../library/asyncio-stream.rst:83
msgid "This function is a :ref:`coroutine <coroutine>`."
msgstr "この関数は :ref:`コルーチン <coroutine>` です。"

#: ../../library/asyncio-stream.rst:42
msgid ""
"Start a socket server, with a callback for each client connected. The return "
"value is the same as :meth:`~AbstractEventLoop.create_server()`."
msgstr ""
"各クライアントが接続するコールバックでソケットサーバーを開始します。戻り値"
"は :meth:`~AbstractEventLoop.create_server()` と同じです。"

#: ../../library/asyncio-stream.rst:45
msgid ""
"The *client_connected_cb* parameter is called with two parameters: "
"*client_reader*, *client_writer*.  *client_reader* is a :class:"
"`StreamReader` object, while *client_writer* is a :class:`StreamWriter` "
"object.  The *client_connected_cb* parameter can either be a plain callback "
"function or a :ref:`coroutine function <coroutine>`; if it is a coroutine "
"function, it will be automatically converted into a :class:`Task`."
msgstr ""
"*client_connected_cb* 引数は *client_reader* と *client_writer*  という 2 個"
"の引数で呼び出されます。\n"
"*client_reader* は :class:`StreamReader` オブジェクトで、*client_writer* は :"
"class:`StreamWriter` オブジェクトです。\n"
"*client_connected_cb* 引数には単純なコールバック関数か :ref:`コルーチン関数 "
"<coroutine>` のどちらかを指定できます; コルーチン関数の場合、自動的に :class:"
"`Task` に変換されます。"

#: ../../library/asyncio-stream.rst:53
msgid ""
"The rest of the arguments are all the usual arguments to :meth:"
"`~AbstractEventLoop.create_server()` except *protocol_factory*; most common "
"are positional *host* and *port*, with various optional keyword arguments "
"following."
msgstr ""
"残りの引数は *protocol_factory* を除きすべて :meth:`~AbstractEventLoop."
"create_server()` の通常の引数です; 最も一般的なのは位置引数 *host* と *port* "
"で、さまざまなオプションのキーワード引数が続きます。"

#: ../../library/asyncio-stream.rst:66
msgid ""
"A wrapper for :meth:`~AbstractEventLoop.create_unix_connection()` returning "
"a (reader, writer) pair."
msgstr ""
":meth:`~AbstractEventLoop.create_unix_connection()` のラッパーで (reader, "
"writer) ペアを返します。"

#: ../../library/asyncio-stream.rst:69
msgid ""
"See :func:`open_connection` for information about return value and other "
"details."
msgstr ""
"戻り値やその他詳細については :func:`open_connection` を参照してください。"

#: ../../library/asyncio-stream.rst:74 ../../library/asyncio-stream.rst:85
msgid "Availability: UNIX."
msgstr "利用できる環境: UNIX。"

#: ../../library/asyncio-stream.rst:78
msgid ""
"Start a UNIX Domain Socket server, with a callback for each client connected."
msgstr ""
"接続された各クライアントごとのコールバックとともに UNIX ドメインソケットサー"
"バーを開始します。"

#: ../../library/asyncio-stream.rst:80
msgid ""
"See :func:`start_server` for information about return value and other "
"details."
msgstr "戻り値やその他詳細については :func:`start_server` を参照してください。"

#: ../../library/asyncio-stream.rst:89
msgid "StreamReader"
msgstr "StreamReader"

#: ../../library/asyncio-stream.rst:93 ../../library/asyncio-stream.rst:191
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""
"このクラスは :ref:`スレッド安全ではありません <asyncio-multithreading>`。"

#: ../../library/asyncio-stream.rst:95
msgid ""
"The *limit* argument's default value is set to _DEFAULT_LIMIT which is 2**16 "
"(64 KiB)"
msgstr ""

#: ../../library/asyncio-stream.rst:99
msgid "Get the exception."
msgstr "例外を取得します。"

#: ../../library/asyncio-stream.rst:103
msgid "Acknowledge the EOF."
msgstr "EOF の肯定応答を行います。"

#: ../../library/asyncio-stream.rst:107
msgid ""
"Feed *data* bytes in the internal buffer.  Any operations waiting for the "
"data will be resumed."
msgstr ""
"バイト列 *data* を内部バッファーに取り込みます。データを待っているあらゆる処"
"理が再開されます。"

#: ../../library/asyncio-stream.rst:112
msgid "Set the exception."
msgstr "例外を設定します。"

#: ../../library/asyncio-stream.rst:116
msgid "Set the transport."
msgstr "トランスポートを設定します。"

#: ../../library/asyncio-stream.rst:120
msgid ""
"Read up to *n* bytes.  If *n* is not provided, or set to ``-1``, read until "
"EOF and return all read bytes."
msgstr ""
"*n* バイト読み込みます。*n* が指定されないか ``-1`` が指定されていた場合 EOF "
"になるまで読み込み、全データを返します。"

#: ../../library/asyncio-stream.rst:123 ../../library/asyncio-stream.rst:135
msgid ""
"If the EOF was received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr ""
"EOF に達しており内部バッファーが空であれば、空の ``bytes`` オブジェクトを返し"
"ます。"

#: ../../library/asyncio-stream.rst:126 ../../library/asyncio-stream.rst:138
#: ../../library/asyncio-stream.rst:147 ../../library/asyncio-stream.rst:225
msgid "This method is a :ref:`coroutine <coroutine>`."
msgstr "このメソッドは :ref:`コルーチン <coroutine>` です。"

#: ../../library/asyncio-stream.rst:130
msgid ""
"Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""
"1 行読み込みます。 \"行\" とは、``\\n`` で終了するバイト列のシーケンスです。"

#: ../../library/asyncio-stream.rst:132
msgid ""
"If EOF is received, and ``\\n`` was not found, the method will return the "
"partial read bytes."
msgstr ""
"EOF を受信し、かつ ``\\n`` が見つからない場合、このメソッドは読み込んだ分の不"
"完全なバイト列を返します。"

#: ../../library/asyncio-stream.rst:142
msgid ""
"Read exactly *n* bytes. Raise an :exc:`IncompleteReadError` if the end of "
"the stream is reached before *n* can be read, the :attr:`IncompleteReadError."
"partial` attribute of the exception contains the partial read bytes."
msgstr ""
"厳密に *n* バイト読み込みます。*n* バイト読み込む前にストリームの終端に達した"
"とき、:exc:`IncompleteReadError` を送出します。例外の :attr:"
"`IncompleteReadError.partial` 属性に、読み込んだ分の不完全なバイト列が格納さ"
"れます。"

#: ../../library/asyncio-stream.rst:151
msgid "Read data from the stream until ``separator`` is found."
msgstr "``separator`` が見つかるまでストリームからデータを読み込みます。"

#: ../../library/asyncio-stream.rst:153
msgid ""
"On success, the data and separator will be removed from the internal buffer "
"(consumed). Returned data will include the separator at the end."
msgstr ""
"成功時には、データと区切り文字は内部バッファから削除されます (消費されます)。"
"返されるデータの最後には区切り文字が含まれます。"

#: ../../library/asyncio-stream.rst:157
msgid ""
"Configured stream limit is used to check result. Limit sets the maximal "
"length of data that can be returned, not counting the separator."
msgstr ""
"設定したストリームの制限は、結果を検証するために使用されます。制限により、返"
"すことのできるデータの最大長さ (区切り文字を含まず) が設定されます。"

#: ../../library/asyncio-stream.rst:161
msgid ""
"If an EOF occurs and the complete separator is still not found, an :exc:"
"`IncompleteReadError` exception will be raised, and the internal buffer will "
"be reset.  The :attr:`IncompleteReadError.partial` attribute may contain the "
"separator partially."
msgstr ""
"EOF が発生し、完全な区切り文字が見つからない場合には、:exc:"
"`IncompleteReadError` 例外が創出されるとともに、内部バッファはリセットされま"
"す。 :attr:`IncompleteReadError.partial` 属性に、区切り文字が部分的に含まれる"
"場合があります。"

#: ../../library/asyncio-stream.rst:167
msgid ""
"If the data cannot be read because of over limit, a :exc:`LimitOverrunError` "
"exception  will be raised, and the data will be left in the internal buffer, "
"so it can be read again."
msgstr ""
"制限超過のためにデータを読み取ることができない場合、:exc:"
"`LimitOverrunError` 例外が送出され、データは内部バッファ内に残ります。そのた"
"め、データを再度読み取ることができます。"

#: ../../library/asyncio-stream.rst:175
msgid "Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr ""
"バッファーが空で :meth:`feed_eof` が呼ばれていた場合 ``True`` を返します。"

#: ../../library/asyncio-stream.rst:179
msgid "StreamWriter"
msgstr "StreamWriter"

#: ../../library/asyncio-stream.rst:183
msgid "Wraps a Transport."
msgstr "トランスポートをラップします。"

#: ../../library/asyncio-stream.rst:185
msgid ""
"This exposes :meth:`write`, :meth:`writelines`, :meth:`can_write_eof()`, :"
"meth:`write_eof`, :meth:`get_extra_info` and :meth:`close`.  It adds :meth:"
"`drain` which returns an optional :class:`Future` on which you can wait for "
"flow control.  It also adds a transport attribute which references the :"
"class:`Transport` directly."
msgstr ""
"これは :meth:`write`、:meth:`writelines`、:meth:`can_write_eof()`、:meth:"
"`write_eof`、:meth:`get_extra_info` および :meth:`close` メソッドを提供しま"
"す。フロー制御を待機できる任意の :class:`Future` を返す :meth:`drain` メソッ"
"ドを追加します。また、:class:`Transport` を直接参照する transport 属性も追加"
"します。"

#: ../../library/asyncio-stream.rst:195
msgid "Transport."
msgstr "トランスポートです。"

#: ../../library/asyncio-stream.rst:199
msgid ""
"Return :const:`True` if the transport supports :meth:`write_eof`, :const:"
"`False` if not. See :meth:`WriteTransport.can_write_eof`."
msgstr ""
"トランスポートが :meth:`write_eof` をサポートしている場合は :const:`True` "
"を、していない場合は :const:`False` を返します。:meth:`WriteTransport."
"can_write_eof` を参照してください。"

#: ../../library/asyncio-stream.rst:204
msgid "Close the transport: see :meth:`BaseTransport.close`."
msgstr ""
"トランスポートを閉じます: :meth:`BaseTransport.close` を参照してください。"

#: ../../library/asyncio-stream.rst:208
msgid ""
"Let the write buffer of the underlying transport a chance to be flushed."
msgstr ""
"下層のトランスポートの書き込みバッファーがフラッシュされる機会を与えます。"

#: ../../library/asyncio-stream.rst:210
msgid "The intended use is to write::"
msgstr "意図されている用途は書き込みです::"

#: ../../library/asyncio-stream.rst:215
msgid ""
"When the size of the transport buffer reaches the high-water limit (the "
"protocol is paused), block until the size of the buffer is drained down to "
"the low-water limit and the protocol is resumed. When there is nothing to "
"wait for, the yield-from continues immediately."
msgstr ""
"トランスポートバッファのサイズが最高水位点に達した場合 (プロトコルが一時停止"
"された場合)、バッファサイズが最低水位点まで引き出されて、プロトコルが再開され"
"るまで、ブロックします。待機するものがなくなると、直ちに yield-from を続行し"
"ます。"

#: ../../library/asyncio-stream.rst:220
msgid ""
"Yielding from :meth:`drain` gives the opportunity for the loop to schedule "
"the write operation and flush the buffer. It should especially be used when "
"a possibly large amount of data is written to the transport, and the "
"coroutine does not yield-from between calls to :meth:`write`."
msgstr ""
":meth:`drain` から yield することにより、ループは書き込み操作をスケジュール"
"し、バッファのフラッシュを行うことができます。このことは、トランスポートに大"
"量のデータが書き込まれる可能性がある場合に非常に有用で、コルーチンは :meth:"
"`write` 呼び出しの間に yield-from を行いません。"

#: ../../library/asyncio-stream.rst:229
msgid ""
"Return optional transport information: see :meth:`BaseTransport."
"get_extra_info`."
msgstr ""
"オプションのトランスポート情報を返します: :meth:`BaseTransport."
"get_extra_info` を参照してください。"

#: ../../library/asyncio-stream.rst:234
msgid ""
"Write some *data* bytes to the transport: see :meth:`WriteTransport.write`."
msgstr ""
"トランスポートにバイト列 *data* を書き込みます: :meth:`WriteTransport.write` "
"を参照してください。"

#: ../../library/asyncio-stream.rst:239
msgid ""
"Write a list (or any iterable) of data bytes to the transport: see :meth:"
"`WriteTransport.writelines`."
msgstr ""
"バイト列のデータのリスト (またはリテラブル) をトランスポートに書き込みます: :"
"meth:`WriteTransport.writelines` を参照してください。"

#: ../../library/asyncio-stream.rst:244
msgid ""
"Close the write end of the transport after flushing buffered data: see :meth:"
"`WriteTransport.write_eof`."
msgstr ""
"バッファーされたデータをフラッシュした後送信側のトランスポートをクローズしま"
"す: :meth:`WriteTransport.write_eof` を参照してください。"

#: ../../library/asyncio-stream.rst:249
msgid "StreamReaderProtocol"
msgstr "StreamReaderProtocol"

#: ../../library/asyncio-stream.rst:253
msgid ""
"Trivial helper class to adapt between :class:`Protocol` and :class:"
"`StreamReader`. Subclass of :class:`Protocol`."
msgstr ""
":class:`Protocol` と :class:`StreamReader` を適合させる些末なヘルパークラスで"
"す。:class:`Protocol` のサブクラスです。"

#: ../../library/asyncio-stream.rst:256
msgid ""
"*stream_reader* is a :class:`StreamReader` instance, *client_connected_cb* "
"is an optional function called with (stream_reader, stream_writer) when a "
"connection is made, *loop* is the event loop instance to use."
msgstr ""
"*stream_reader* は :class:`StreamReader` のインスタンスです。"
"*client_connected_cb* は接続されたときに (stream_reader, stream_writer) を引"
"数として呼び出されるオプションの関数です。*loop* は使用するイベントループのイ"
"ンスタンスです。"

#: ../../library/asyncio-stream.rst:260
msgid ""
"(This is a helper class instead of making :class:`StreamReader` itself a :"
"class:`Protocol` subclass, because the :class:`StreamReader` has other "
"potential uses, and to prevent the user of the :class:`StreamReader` from "
"accidentally calling inappropriate methods of the protocol.)"
msgstr ""
"(これは :class:`StreamReader` 自身を :class:`Protocol` のサブクラスとする代わ"
"りのヘルパークラスです。:class:`StreamReader` はその他の潜在的な用途を持つた"
"め、そして :class:`StreamReader` の利用者が誤って不適切なプロトコルのメソッド"
"を呼び出すことを回避するためこのように実装されています)"

#: ../../library/asyncio-stream.rst:267
msgid "IncompleteReadError"
msgstr "IncompleteReadError"

#: ../../library/asyncio-stream.rst:271
msgid "Incomplete read error, subclass of :exc:`EOFError`."
msgstr "不完全な読み込みエラーです。:exc:`EOFError` のサブクラスです。"

#: ../../library/asyncio-stream.rst:275
msgid "Total number of expected bytes (:class:`int`)."
msgstr "想定されていたバイト数 (:class:`int`) です。"

#: ../../library/asyncio-stream.rst:279
msgid ""
"Read bytes string before the end of stream was reached (:class:`bytes`)."
msgstr ""
"ストリームの終端に達する前に読み込んだバイト文字列 (:class:`bytes`) です。"

#: ../../library/asyncio-stream.rst:283
msgid "LimitOverrunError"
msgstr "LimitOverrunError"

#: ../../library/asyncio-stream.rst:287
msgid "Reached the buffer limit while looking for a separator."
msgstr "区切り文字を探している間にバッファリミットに到達しました。"

#: ../../library/asyncio-stream.rst:291
msgid "Total number of to be consumed bytes."
msgstr "未消費のバイトの合計数。"

#: ../../library/asyncio-stream.rst:295
msgid "Stream examples"
msgstr "ストリームの例"

#: ../../library/asyncio-stream.rst:300
msgid "TCP echo client using streams"
msgstr "ストリームを使った TCP Echo クライアント"

#: ../../library/asyncio-stream.rst:302
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr ""
":func:`asyncio.open_connection` 関数を使った TCP Echo クライアントです::"

#: ../../library/asyncio-stream.rst:327
msgid ""
"The :ref:`TCP echo client protocol <asyncio-tcp-echo-client-protocol>` "
"example uses the :meth:`AbstractEventLoop.create_connection` method."
msgstr ""
":meth:`AbstractEventLoop.create_connection` メソッドを使った :ref:`TCP Echo "
"クライアントプロトコル <asyncio-tcp-echo-client-protocol>` の例"

#: ../../library/asyncio-stream.rst:334
msgid "TCP echo server using streams"
msgstr "ストリームを使った TCP Echo サーバー"

#: ../../library/asyncio-stream.rst:336
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr ":func:`asyncio.start_server` 関数を使った TCP Echo サーバーです::"

#: ../../library/asyncio-stream.rst:372
msgid ""
"The :ref:`TCP echo server protocol <asyncio-tcp-echo-server-protocol>` "
"example uses the :meth:`AbstractEventLoop.create_server` method."
msgstr ""
":meth:`AbstractEventLoop.create_server` メソッドを使った :ref:`TCP Echo サー"
"バープロトコル <asyncio-tcp-echo-server-protocol>` の例"

#: ../../library/asyncio-stream.rst:377
msgid "Get HTTP headers"
msgstr "HTTP ヘッダーの取得"

#: ../../library/asyncio-stream.rst:379
msgid ""
"Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""
"コマンドラインから渡された URL の HTTP ヘッダーを問い合わせる簡単な例です::"

#: ../../library/asyncio-stream.rst:414
msgid "Usage::"
msgstr "使い方::"

#: ../../library/asyncio-stream.rst:418
msgid "or with HTTPS::"
msgstr "または HTTPS を使用::"

#: ../../library/asyncio-stream.rst:425
msgid "Register an open socket to wait for data using streams"
msgstr "ストリームを使ってデータを待つオープンソケットの登録"

#: ../../library/asyncio-stream.rst:427
msgid ""
"Coroutine waiting until a socket receives data using the :func:"
"`open_connection` function::"
msgstr ""
":func:`open_connection` 関数を使ってソケットがデータを受信するまで待つコルー"
"チンです::"

#: ../../library/asyncio-stream.rst:463
msgid ""
"The :ref:`register an open socket to wait for data using a protocol <asyncio-"
"register-socket>` example uses a low-level protocol created by the :meth:"
"`AbstractEventLoop.create_connection` method."
msgstr ""
":ref:`プロトコルを使ってデータを待つオープンソケットの登録 <asyncio-register-"
"socket>` の例では :meth:`AbstractEventLoop.create_connection` メソッドによっ"
"て作成された低レベルプロトコルを使用しています。"

#: ../../library/asyncio-stream.rst:467
msgid ""
"The :ref:`watch a file descriptor for read events <asyncio-watch-read-"
"event>` example uses the low-level :meth:`AbstractEventLoop.add_reader` "
"method to register the file descriptor of a socket."
msgstr ""
":ref:`読み込みイベント用のファイル記述子の監視 <asyncio-watch-read-event>` の"
"例では、ソケットのファイル記述子を登録するのに低水準の :meth:"
"`AbstractEventLoop.add_reader` メソッドを使用しています。"
