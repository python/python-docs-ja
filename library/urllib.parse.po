# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/urllib.parse.rst:2
msgid ":mod:`urllib.parse` --- Parse URLs into components"
msgstr ":mod:`urllib.parse` --- URL を解析して構成要素にする"

#: ../../library/urllib.parse.rst:7
msgid "**Source code:** :source:`Lib/urllib/parse.py`"
msgstr "**ソースコード:** :source:`Lib/urllib/parse.py`"

#: ../../library/urllib.parse.rst:18
msgid ""
"This module defines a standard interface to break Uniform Resource Locator "
"(URL) strings up in components (addressing scheme, network location, path "
"etc.), to combine the components back into a URL string, and to convert a "
"\"relative URL\" to an absolute URL given a \"base URL.\""
msgstr ""
"このモジュールでは URL (Uniform Resource Locator) 文字列をその構成要素 (アド"
"レススキーム、ネットワーク上の位置、パスその他) に分解したり、構成要素を URL "
"に組みなおしたり、 \"相対 URL (relative URL)\" を指定した \"基底 URL (base "
"URL)\" に基づいて絶対 URL に変換するための標準的なインターフェースを定義して"
"います。"

#: ../../library/urllib.parse.rst:23
msgid ""
"The module has been designed to match the internet RFC on Relative Uniform "
"Resource Locators. It supports the following URL schemes: ``file``, ``ftp``, "
"``gopher``, ``hdl``, ``http``, ``https``, ``imap``, ``mailto``, ``mms``, "
"``news``, ``nntp``, ``prospero``, ``rsync``, ``rtsp``, ``rtspu``, ``sftp``, "
"``shttp``, ``sip``, ``sips``, ``snews``, ``svn``, ``svn+ssh``, ``telnet``, "
"``wais``, ``ws``, ``wss``."
msgstr ""
"このモジュールは Relative Uniform Resource Locators (相対 URL) に関するイン"
"ターネット RFC に適合するよう設計されており、次の URL スキームをサポートして"
"います: ``file``, ``ftp``, ``gopher``, ``hdl``, ``http``, ``https``, "
"``imap``, ``mailto``, ``mms``, ``news``, ``nntp``, ``prospero``, ``rsync``, "
"``rtsp``, ``rtspu``, ``sftp``, ``shttp``, ``sip``, ``sips``, ``snews``, "
"``svn``, ``svn+ssh``, ``telnet``, ``wais``, ``ws``, ``wss``"

#: ../../library/urllib.parse.rst:30
msgid ""
"The :mod:`urllib.parse` module defines functions that fall into two broad "
"categories: URL parsing and URL quoting. These are covered in detail in the "
"following sections."
msgstr ""
":mod:`urllib.parse` モジュールは、大きく分けると URL の解析を行う関数と URL "
"のクオートを行う関数を定義しています。以下にこれらの詳細を説明します。"

#: ../../library/urllib.parse.rst:35
msgid "URL Parsing"
msgstr "URL の解析"

#: ../../library/urllib.parse.rst:37
msgid ""
"The URL parsing functions focus on splitting a URL string into its "
"components, or on combining URL components into a URL string."
msgstr ""
"URL 解析関数は、URL 文字列を各構成要素に分割するか、あるいは URL の構成要素を"
"組み合わせて URL 文字列を生成します。"

#: ../../library/urllib.parse.rst:42
msgid ""
"Parse a URL into six components, returning a 6-item :term:`named tuple`.  "
"This corresponds to the general structure of a URL: ``scheme://netloc/path;"
"parameters?query#fragment``. Each tuple item is a string, possibly empty. "
"The components are not broken up into smaller parts (for example, the "
"network location is a single string), and % escapes are not expanded. The "
"delimiters as shown above are not part of the result, except for a leading "
"slash in the *path* component, which is retained if present.  For example:"
msgstr ""
"URL を解析して 6 つの構成要素にし、6 要素の :term:`named tuple` を返します。"
"このタプルは URL の一般的な構造: ``scheme://netloc/path;parameters?"
"query#fragment`` に対応しています。各タプル要素は文字列で、空の場合もありま"
"す。構成要素がさらに小さい要素に分解されることはありません (例えばネットワー"
"ク上の位置は単一の文字列になります)。また % によるエスケープは展開されませ"
"ん。上で示された区切り文字がタプルの各要素の一部分として含まれることはありま"
"せんが、*path* 要素の先頭のスラッシュがある場合には例外です。たとえば以下のよ"
"うになります:"

#: ../../library/urllib.parse.rst:75
msgid ""
"Following the syntax specifications in :rfc:`1808`, urlparse recognizes a "
"netloc only if it is properly introduced by '//'.  Otherwise the input is "
"presumed to be a relative URL and thus to start with a path component."
msgstr ""
":rfc:`1808` にある文法仕様に基づき、urlparse は '//' で始まる場合にのみ "
"netloc を認識します。それ以外の場合は、入力は相対URLであると推定され、path 部"
"分で始まることになります。"

#: ../../library/urllib.parse.rst:94
msgid ""
"The *scheme* argument gives the default addressing scheme, to be used only "
"if the URL does not specify one.  It should be the same type (text or bytes) "
"as *urlstring*, except that the default value ``''`` is always allowed, and "
"is automatically converted to ``b''`` if appropriate."
msgstr ""
"*scheme* 引数によってデフォルトのアドレススキームを与えると、アドレススキーム"
"を指定していない URL のみに使用されます。常に許されるデフォルトの ``''`` "
"(``b''`` に自動変換出来る)を除き、 *urlstring* と同じ型(テキストもしくはバイ"
"ト列)であるべきです。"

#: ../../library/urllib.parse.rst:99
msgid ""
"If the *allow_fragments* argument is false, fragment identifiers are not "
"recognized.  Instead, they are parsed as part of the path, parameters or "
"query component, and :attr:`fragment` is set to the empty string in the "
"return value."
msgstr ""
"引数 *allow_fragments* が false の場合、フラグメント識別子は認識されません。"
"その代わり、それはパス、パラメータ、またはクエリ要素の一部として解析され、戻"
"り値の :attr:`fragment` は空文字に設定されます。"

#: ../../library/urllib.parse.rst:104
msgid ""
"The return value is a :term:`named tuple`, which means that its items can be "
"accessed by index or as named attributes, which are:"
msgstr ""
"戻り値は :term:`名前付きタプル <named tuple>` です。これは、インデックス指定"
"もしくは以下のような名前属性で要素にアクセスできることを意味します:"

#: ../../library/urllib.parse.rst:108 ../../library/urllib.parse.rst:293
#: ../../library/urllib.parse.rst:397
msgid "Attribute"
msgstr "属性"

#: ../../library/urllib.parse.rst:108 ../../library/urllib.parse.rst:293
#: ../../library/urllib.parse.rst:397
msgid "Index"
msgstr "インデックス"

#: ../../library/urllib.parse.rst:108 ../../library/urllib.parse.rst:293
#: ../../library/urllib.parse.rst:397
msgid "Value"
msgstr "値"

#: ../../library/urllib.parse.rst:108 ../../library/urllib.parse.rst:293
#: ../../library/urllib.parse.rst:397
msgid "Value if not present"
msgstr "指定されなかった場合の値"

#: ../../library/urllib.parse.rst:110 ../../library/urllib.parse.rst:295
msgid ":attr:`scheme`"
msgstr ":attr:`scheme`"

#: ../../library/urllib.parse.rst:110 ../../library/urllib.parse.rst:295
#: ../../library/urllib.parse.rst:399
msgid "0"
msgstr "0"

#: ../../library/urllib.parse.rst:110 ../../library/urllib.parse.rst:295
msgid "URL scheme specifier"
msgstr "URL スキーム"

#: ../../library/urllib.parse.rst:110 ../../library/urllib.parse.rst:295
msgid "*scheme* parameter"
msgstr "*scheme* パラメータ"

#: ../../library/urllib.parse.rst:112 ../../library/urllib.parse.rst:297
msgid ":attr:`netloc`"
msgstr ":attr:`netloc`"

#: ../../library/urllib.parse.rst:112 ../../library/urllib.parse.rst:297
#: ../../library/urllib.parse.rst:401
msgid "1"
msgstr "1"

#: ../../library/urllib.parse.rst:112 ../../library/urllib.parse.rst:297
msgid "Network location part"
msgstr "ネットワーク上の位置"

#: ../../library/urllib.parse.rst:112 ../../library/urllib.parse.rst:114
#: ../../library/urllib.parse.rst:116 ../../library/urllib.parse.rst:119
#: ../../library/urllib.parse.rst:121 ../../library/urllib.parse.rst:297
#: ../../library/urllib.parse.rst:299 ../../library/urllib.parse.rst:301
#: ../../library/urllib.parse.rst:303 ../../library/urllib.parse.rst:399
#: ../../library/urllib.parse.rst:401
msgid "empty string"
msgstr "空文字列"

#: ../../library/urllib.parse.rst:114 ../../library/urllib.parse.rst:299
msgid ":attr:`path`"
msgstr ":attr:`path`"

#: ../../library/urllib.parse.rst:114 ../../library/urllib.parse.rst:299
msgid "2"
msgstr "2"

#: ../../library/urllib.parse.rst:114 ../../library/urllib.parse.rst:299
msgid "Hierarchical path"
msgstr "階層的パス"

#: ../../library/urllib.parse.rst:116
msgid ":attr:`params`"
msgstr ":attr:`params`"

#: ../../library/urllib.parse.rst:116 ../../library/urllib.parse.rst:301
msgid "3"
msgstr "3"

#: ../../library/urllib.parse.rst:116
msgid "Parameters for last path element"
msgstr "最後のパス要素に対するパラメータ"

#: ../../library/urllib.parse.rst:119 ../../library/urllib.parse.rst:301
msgid ":attr:`query`"
msgstr ":attr:`query`"

#: ../../library/urllib.parse.rst:119 ../../library/urllib.parse.rst:303
msgid "4"
msgstr "4"

#: ../../library/urllib.parse.rst:119 ../../library/urllib.parse.rst:301
msgid "Query component"
msgstr "クエリ要素"

#: ../../library/urllib.parse.rst:121 ../../library/urllib.parse.rst:303
#: ../../library/urllib.parse.rst:401
msgid ":attr:`fragment`"
msgstr ":attr:`fragment`"

#: ../../library/urllib.parse.rst:121
msgid "5"
msgstr "5"

#: ../../library/urllib.parse.rst:121 ../../library/urllib.parse.rst:303
#: ../../library/urllib.parse.rst:401
msgid "Fragment identifier"
msgstr "フラグメント識別子"

#: ../../library/urllib.parse.rst:123 ../../library/urllib.parse.rst:305
msgid ":attr:`username`"
msgstr ":attr:`username`"

#: ../../library/urllib.parse.rst:123 ../../library/urllib.parse.rst:305
msgid "User name"
msgstr "ユーザ名"

#: ../../library/urllib.parse.rst:123 ../../library/urllib.parse.rst:125
#: ../../library/urllib.parse.rst:127 ../../library/urllib.parse.rst:129
#: ../../library/urllib.parse.rst:305 ../../library/urllib.parse.rst:307
#: ../../library/urllib.parse.rst:309 ../../library/urllib.parse.rst:311
msgid ":const:`None`"
msgstr ":const:`None`"

#: ../../library/urllib.parse.rst:125 ../../library/urllib.parse.rst:307
msgid ":attr:`password`"
msgstr ":attr:`password`"

#: ../../library/urllib.parse.rst:125 ../../library/urllib.parse.rst:307
msgid "Password"
msgstr "パスワード"

#: ../../library/urllib.parse.rst:127 ../../library/urllib.parse.rst:309
msgid ":attr:`hostname`"
msgstr ":attr:`hostname`"

#: ../../library/urllib.parse.rst:127 ../../library/urllib.parse.rst:309
msgid "Host name (lower case)"
msgstr "ホスト名 (小文字)"

#: ../../library/urllib.parse.rst:129 ../../library/urllib.parse.rst:311
msgid ":attr:`port`"
msgstr ":attr:`port`"

#: ../../library/urllib.parse.rst:129 ../../library/urllib.parse.rst:311
msgid "Port number as integer, if present"
msgstr "ポート番号を表わす整数 (もしあれば)"

#: ../../library/urllib.parse.rst:133 ../../library/urllib.parse.rst:315
msgid ""
"Reading the :attr:`port` attribute will raise a :exc:`ValueError` if an "
"invalid port is specified in the URL.  See section :ref:`urlparse-result-"
"object` for more information on the result object."
msgstr ""
"URL中で不正なポートが指定されている場合、 :attr:`port` 属性を読みだすと、:"
"exc:`ValueError` を送出します。結果オブジェクトのより詳しい情報は :ref:"
"`urlparse-result-object` 節を参照してください。"

#: ../../library/urllib.parse.rst:137 ../../library/urllib.parse.rst:319
msgid ""
"Unmatched square brackets in the :attr:`netloc` attribute will raise a :exc:"
"`ValueError`."
msgstr ""
":attr:`netloc` 属性にマッチしなかった角括弧があると :exc:`ValueError` を送出"
"します。"

#: ../../library/urllib.parse.rst:140 ../../library/urllib.parse.rst:322
msgid ""
"Characters in the :attr:`netloc` attribute that decompose under NFKC "
"normalization (as used by the IDNA encoding) into any of ``/``, ``?``, "
"``#``, ``@``, or ``:`` will raise a :exc:`ValueError`. If the URL is "
"decomposed before parsing, no error will be raised."
msgstr ""

#: ../../library/urllib.parse.rst:145
msgid ""
"As is the case with all named tuples, the subclass has a few additional "
"methods and attributes that are particularly useful. One such method is :"
"meth:`_replace`. The :meth:`_replace` method will return a new ParseResult "
"object replacing specified fields with new values."
msgstr ""

#: ../../library/urllib.parse.rst:163
msgid "Added IPv6 URL parsing capabilities."
msgstr "IPv6 URL の解析も行えるようになりました。"

#: ../../library/urllib.parse.rst:166
msgid ""
"The fragment is now parsed for all URL schemes (unless *allow_fragment* is "
"false), in accordance with :rfc:`3986`.  Previously, an allowlist of schemes "
"that support fragments existed."
msgstr ""

#: ../../library/urllib.parse.rst:171 ../../library/urllib.parse.rst:330
msgid ""
"Out-of-range port numbers now raise :exc:`ValueError`, instead of returning :"
"const:`None`."
msgstr ""
"範囲外のポート番号を指定すると、 :const:`None` を返す代わりに、:exc:"
"`ValueError` を送出するようになりました。"

#: ../../library/urllib.parse.rst:175 ../../library/urllib.parse.rst:334
msgid ""
"Characters that affect netloc parsing under NFKC normalization will now "
"raise :exc:`ValueError`."
msgstr ""

#: ../../library/urllib.parse.rst:182
msgid ""
"Parse a query string given as a string argument (data of type :mimetype:"
"`application/x-www-form-urlencoded`).  Data are returned as a dictionary.  "
"The dictionary keys are the unique query variable names and the values are "
"lists of values for each name."
msgstr ""
"文字列引数として渡されたクエリ文字列  (:mimetype:`application/x-www-form-"
"urlencoded` 型のデータ) を解析します。解析されたデータを辞書として返します。"
"辞書のキーは一意なクエリ変数名で、値は各変数名に対する値からなるリストです。"

#: ../../library/urllib.parse.rst:187 ../../library/urllib.parse.rst:232
msgid ""
"The optional argument *keep_blank_values* is a flag indicating whether blank "
"values in percent-encoded queries should be treated as blank strings. A true "
"value indicates that blanks should be retained as  blank strings.  The "
"default false value indicates that blank values are to be ignored and "
"treated as if they were not included."
msgstr ""
"任意の引数 *keep_blank_values* は、パーセントエンコードされたクエリの中の値が"
"入っていないクエリの値を空白文字列と見なすかどうかを示すフラグです。値が真で"
"あれば、値の入っていないフィールドは空文字列のままになります。標準では偽で、"
"値の入っていないフィールドを無視し、そのフィールドはクエリに含まれていないも"
"のとして扱います。"

#: ../../library/urllib.parse.rst:193 ../../library/urllib.parse.rst:238
msgid ""
"The optional argument *strict_parsing* is a flag indicating what to do with "
"parsing errors.  If false (the default), errors are silently ignored.  If "
"true, errors raise a :exc:`ValueError` exception."
msgstr ""
"任意の引数 *strict_parsing* はパース時のエラーをどう扱うかを決めるフラグで"
"す。値が偽なら (デフォルトの設定です)、エラーは暗黙のうちに無視します。値が真"
"なら :exc:`ValueError` 例外を送出します。"

#: ../../library/urllib.parse.rst:197 ../../library/urllib.parse.rst:242
msgid ""
"The optional *encoding* and *errors* parameters specify how to decode "
"percent-encoded sequences into Unicode characters, as accepted by the :meth:"
"`bytes.decode` method."
msgstr ""
"任意のパラメータ *encoding* および *errors* はパーセントエンコードされたシー"
"ケンスを Unicode 文字にデコードする方法を指定します。これは :meth:`bytes."
"decode` メソッドに渡されます。"

#: ../../library/urllib.parse.rst:201 ../../library/urllib.parse.rst:246
msgid ""
"The optional argument *max_num_fields* is the maximum number of fields to "
"read. If set, then throws a :exc:`ValueError` if there are more than "
"*max_num_fields* fields read."
msgstr ""

#: ../../library/urllib.parse.rst:205 ../../library/urllib.parse.rst:250
msgid ""
"The optional argument *separator* is the symbol to use for separating the "
"query arguments. It defaults to ``&``."
msgstr ""

#: ../../library/urllib.parse.rst:208
msgid ""
"Use the :func:`urllib.parse.urlencode` function (with the ``doseq`` "
"parameter set to ``True``) to convert such dictionaries into query strings."
msgstr ""
"このような辞書をクエリ文字列に変換するには :func:`urllib.parse.urlencode` 関"
"数を (``doseq`` パラメータに ``True`` を指定して) 使用します。"

#: ../../library/urllib.parse.rst:213 ../../library/urllib.parse.rst:256
msgid "Add *encoding* and *errors* parameters."
msgstr "*encoding* および *errors* パラメータが追加されました。"

#: ../../library/urllib.parse.rst:216 ../../library/urllib.parse.rst:259
msgid "Added *max_num_fields* parameter."
msgstr "*max_num_fields* パラメータが追加されました。"

#: ../../library/urllib.parse.rst:219 ../../library/urllib.parse.rst:262
msgid ""
"Added *separator* parameter with the default value of ``&``. Python versions "
"earlier than Python 3.10 allowed using both ``;`` and ``&`` as query "
"parameter separator. This has been changed to allow only a single separator "
"key, with ``&`` as the default separator."
msgstr ""

#: ../../library/urllib.parse.rst:228
msgid ""
"Parse a query string given as a string argument (data of type :mimetype:"
"`application/x-www-form-urlencoded`).  Data are returned as a list of name, "
"value pairs."
msgstr ""
"文字列引数として渡されたクエリ文字列 (:mimetype:`application/x-www-form-"
"urlencoded` 型のデータ) を解析します。解析されたデータは名前と値のペアからな"
"るリストです。"

#: ../../library/urllib.parse.rst:253
msgid ""
"Use the :func:`urllib.parse.urlencode` function to convert such lists of "
"pairs into query strings."
msgstr ""
"ペアのリストからクエリ文字列を生成する場合には :func:`urllib.parse."
"urlencode` 関数を使用します。"

#: ../../library/urllib.parse.rst:271
msgid ""
"Construct a URL from a tuple as returned by ``urlparse()``. The *parts* "
"argument can be any six-item iterable. This may result in a slightly "
"different, but equivalent URL, if the URL that was parsed originally had "
"unnecessary delimiters (for example, a ``?`` with an empty query; the RFC "
"states that these are equivalent)."
msgstr ""
"``urlparse()`` が返すような形式のタプルから URL を構築します。*parts* 引数は"
"任意の 6 要素イテラブルです。解析された元の URL が、不要な区切り文字を持って"
"いた場合には、多少違いはあるが等価な URL になるかもしれません (例えばクエリ内"
"容が空の ``?`` のようなもので、RFC はこれらを等価だと述べています)。"

#: ../../library/urllib.parse.rst:280
msgid ""
"This is similar to :func:`urlparse`, but does not split the params from the "
"URL. This should generally be used instead of :func:`urlparse` if the more "
"recent URL syntax allowing parameters to be applied to each segment of the "
"*path* portion of the URL (see :rfc:`2396`) is wanted.  A separate function "
"is needed to separate the path segments and parameters.  This function "
"returns a 5-item :term:`named tuple`::"
msgstr ""
":func:`urlparse` に似ていますが、URL から params を切り離しません。このメソッ"
"ドは通常、URL の *path* 部分において、各セグメントにパラメータ指定をできるよ"
"うにした最近の URL 構文 (:rfc:`2396` 参照) が必要な場合に、 :func:`urlparse` "
"の代わりに使われます。パスセグメントとパラメータを分割するためには分割用の関"
"数が必要です。この関数は 5 要素の :term:`named tuple` を返します::"

#: ../../library/urllib.parse.rst:289 ../../library/urllib.parse.rst:393
msgid ""
"The return value is a :term:`named tuple`, its items can be accessed by "
"index or as named attributes:"
msgstr ""

#: ../../library/urllib.parse.rst:327
msgid ""
"Following the `WHATWG spec`_ that updates RFC 3986, ASCII newline ``\\n``, "
"``\\r`` and tab ``\\t`` characters are stripped from the URL."
msgstr ""

#: ../../library/urllib.parse.rst:338
msgid "ASCII newline and tab characters are stripped from the URL."
msgstr ""

#: ../../library/urllib.parse.rst:345
msgid ""
"Combine the elements of a tuple as returned by :func:`urlsplit` into a "
"complete URL as a string. The *parts* argument can be any five-item "
"iterable. This may result in a slightly different, but equivalent URL, if "
"the URL that was parsed originally had unnecessary delimiters (for example, "
"a ? with an empty query; the RFC states that these are equivalent)."
msgstr ""
":func:`urlsplit` が返すような形式のタプル中のエレメントを組み合わせて、文字列"
"の完全な URL にします。 *parts* 引数は任意の 5 要素イテラブルです。解析された"
"元の URL が、不要な区切り文字を持っていた場合には、多少違いはあるが等価な "
"URL になるかもしれません (例えばクエリ内容が空の ? のようなもので、RFC はこれ"
"らを等価だと述べています)。"

#: ../../library/urllib.parse.rst:354
msgid ""
"Construct a full (\"absolute\") URL by combining a \"base URL\" (*base*) "
"with another URL (*url*).  Informally, this uses components of the base URL, "
"in particular the addressing scheme, the network location and (part of) the "
"path, to provide missing components in the relative URL.  For example:"
msgstr ""
"\"基底 URL\"(*base*)と別のURL(*url*)を組み合わせて、完全な URL (\"絶対 "
"URL\") を構成します。くだけて言えば、この関数は相対 URL にない要素を提供する"
"ために基底 URL の要素、特にアドレススキーム、ネットワーク上の位置、およびパ"
"ス (の一部) を使います。例えば:"

#: ../../library/urllib.parse.rst:363
msgid ""
"The *allow_fragments* argument has the same meaning and default as for :func:"
"`urlparse`."
msgstr ""
"*allow_fragments* 引数は :func:`urlparse` における引数と同じ意味とデフォルト"
"を持ちます。"

#: ../../library/urllib.parse.rst:368
msgid ""
"If *url* is an absolute URL (that is, it starts with ``//`` or ``scheme://"
"``), the *url*'s hostname and/or scheme will be present in the result.  For "
"example:"
msgstr ""
"*url* が (``//`` か ``scheme://`` で始まる) 絶対URLであれば、その *url* のホ"
"スト名と / もしくは scheme は結果に反映されます。例えば:"

#: ../../library/urllib.parse.rst:377
msgid ""
"If you do not want that behavior, preprocess the *url* with :func:`urlsplit` "
"and :func:`urlunsplit`, removing possible *scheme* and *netloc* parts."
msgstr ""
"もしこの動作が望みのものでない場合は、 *url* を :func:`urlsplit` と :func:"
"`urlunsplit` で先に処理して、 *scheme* と *netloc* を削除してください。"

#: ../../library/urllib.parse.rst:383
msgid "Behavior updated to match the semantics defined in :rfc:`3986`."
msgstr ""
":rfc:`3986` で定義された意味論とマッチするように挙動がアップデートされまし"
"た。"

#: ../../library/urllib.parse.rst:388
msgid ""
"If *url* contains a fragment identifier, return a modified version of *url* "
"with no fragment identifier, and the fragment identifier as a separate "
"string.  If there is no fragment identifier in *url*, return *url* "
"unmodified and an empty string."
msgstr ""
"*url* がフラグメント識別子を含む場合、フラグメント識別子を持たないバージョン"
"に修正された *url* と、別の文字列に分割されたフラグメント識別子を返します。"
"*url* 中にフラグメント識別子がない場合、そのままの *url* と空文字列を返しま"
"す。"

#: ../../library/urllib.parse.rst:399
msgid ":attr:`url`"
msgstr ":attr:`url`"

#: ../../library/urllib.parse.rst:399
msgid "URL with no fragment"
msgstr "フラグメントのない URL"

#: ../../library/urllib.parse.rst:404
msgid ""
"See section :ref:`urlparse-result-object` for more information on the result "
"object."
msgstr ""
"結果オブジェクトのより詳しい情報は :ref:`urlparse-result-object` 節を参照して"
"ください。"

#: ../../library/urllib.parse.rst:407
msgid "Result is a structured object rather than a simple 2-tuple."
msgstr ""
"結果はシンプルな 2 要素のタプルから構造化オブジェクトに変更されました。"

#: ../../library/urllib.parse.rst:412
msgid ""
"Extract the url from a wrapped URL (that is, a string formatted as ``<URL:"
"scheme://host/path>``, ``<scheme://host/path>``, ``URL:scheme://host/path`` "
"or ``scheme://host/path``). If *url* is not a wrapped URL, it is returned "
"without changes."
msgstr ""

#: ../../library/urllib.parse.rst:420
msgid "Parsing ASCII Encoded Bytes"
msgstr "ASCII エンコードバイト列の解析"

#: ../../library/urllib.parse.rst:422
msgid ""
"The URL parsing functions were originally designed to operate on character "
"strings only. In practice, it is useful to be able to manipulate properly "
"quoted and encoded URLs as sequences of ASCII bytes. Accordingly, the URL "
"parsing functions in this module all operate on :class:`bytes` and :class:"
"`bytearray` objects in addition to :class:`str` objects."
msgstr ""
"URL を解析する関数は元々文字列のみ操作するよう設計されていました。実際のとこ"
"ろ、それは URL が正しくクオートされエンコードされた ASCII バイト列を操作でき"
"た方が有用でした。結果的にこのモジュールの URL 解析関数はすべて :class:"
"`bytes` および :class:`bytearray` オブジェクトに加えて :class:`str` オブジェ"
"クトでも処理するようになりました。"

#: ../../library/urllib.parse.rst:428
msgid ""
"If :class:`str` data is passed in, the result will also contain only :class:"
"`str` data. If :class:`bytes` or :class:`bytearray` data is passed in, the "
"result will contain only :class:`bytes` data."
msgstr ""
":class:`str` データが渡された場合、戻り値は :class:`str` データのみを含んだも"
"のになります。:class:`bytes` あるいは :class:`bytearray` が渡された場合、戻り"
"値は :class:`bytes` データのみを含んだものになります。"

#: ../../library/urllib.parse.rst:432
msgid ""
"Attempting to mix :class:`str` data with :class:`bytes` or :class:"
"`bytearray` in a single function call will result in a :exc:`TypeError` "
"being raised, while attempting to pass in non-ASCII byte values will "
"trigger :exc:`UnicodeDecodeError`."
msgstr ""
"単一の関数を呼び出す時に :class:`bytes` または :class:`bytearray` が混在し"
"た :class:`str` を渡した場合、:exc:`TypeError` が、非 ASCII バイト値が渡され"
"た場合 :exc:`UnicodeDecodeError` が送出されます。"

#: ../../library/urllib.parse.rst:437
msgid ""
"To support easier conversion of result objects between :class:`str` and :"
"class:`bytes`, all return values from URL parsing functions provide either "
"an :meth:`encode` method (when the result contains :class:`str` data) or a :"
"meth:`decode` method (when the result contains :class:`bytes` data). The "
"signatures of these methods match those of the corresponding :class:`str` "
"and :class:`bytes` methods (except that the default encoding is ``'ascii'`` "
"rather than ``'utf-8'``). Each produces a value of a corresponding type that "
"contains either :class:`bytes` data (for :meth:`encode` methods) or :class:"
"`str` data (for :meth:`decode` methods)."
msgstr ""
":class:`str` と :class:`bytes` 間で容易に変換を行えるよう、すべての URL 解析"
"関数は :meth:`encode` メソッド (結果に :class:`str` データが含まれる時用) "
"か :meth:`decode` メソッド (結果に :class:`bytes` データが含まれる時用) のど"
"ちらかを提供しています。これらメソッドの動作は対応する :class:`str` と :"
"class:`bytes` メソッドが持つものと同じです (ただしデフォルトのエンコーディン"
"グは ``'utf-8'`` ではなく ``'ascii'`` になります)。それぞれは :meth:`encode` "
"メソッドを持つ :class:`bytes` データか :meth:`decode` メソッドを持つ :class:"
"`str` データのどちらかに対応した型を生成します。"

#: ../../library/urllib.parse.rst:448
msgid ""
"Applications that need to operate on potentially improperly quoted URLs that "
"may contain non-ASCII data will need to do their own decoding from bytes to "
"characters before invoking the URL parsing methods."
msgstr ""
"非 ASCII データを含むなど、不適切にクオートされた URL を操作する可能性のある"
"アプリケーションでは、URL 解析メソッドを呼び出す前に独自にバイト列から文字列"
"にデコードする必要があります。"

#: ../../library/urllib.parse.rst:452
msgid ""
"The behaviour described in this section applies only to the URL parsing "
"functions. The URL quoting functions use their own rules when producing or "
"consuming byte sequences as detailed in the documentation of the individual "
"URL quoting functions."
msgstr ""
"この項で説明された挙動は URL 解析関数にのみ該当します。URL クオート関数でバイ"
"トシーケンスを生成もしくは消化する際には、別にURL クオート関数の項で詳説され"
"ている通りのルールに従います。"

#: ../../library/urllib.parse.rst:457
msgid "URL parsing functions now accept ASCII encoded byte sequences"
msgstr ""
"URL 解析関数は ASCII エンコードバイトシーケンスも受け付けるようになりました"

#: ../../library/urllib.parse.rst:464
msgid "Structured Parse Results"
msgstr "構造化された解析結果"

#: ../../library/urllib.parse.rst:466
msgid ""
"The result objects from the :func:`urlparse`, :func:`urlsplit`  and :func:"
"`urldefrag` functions are subclasses of the :class:`tuple` type. These "
"subclasses add the attributes listed in the documentation for those "
"functions, the encoding and decoding support described in the previous "
"section, as well as an additional method:"
msgstr ""
":func:`urlparse`、:func:`urlsplit`、および :func:`urldefrag` 関数が返すオブ"
"ジェクトは :class:`tuple` 型のサブクラスになります。これらサブクラスにはそれ"
"ぞれの関数で説明されている属性が追加されており、前述のとおりエンコーディング"
"とデコーディングをサポートしています:"

#: ../../library/urllib.parse.rst:474
msgid ""
"Return the re-combined version of the original URL as a string. This may "
"differ from the original URL in that the scheme may be normalized to lower "
"case and empty components may be dropped. Specifically, empty parameters, "
"queries, and fragment identifiers will be removed."
msgstr ""
"オリジナルの URL を再結合した場合は文字列で返されます。これはスキームが小文字"
"に正規化されていたり、空の構成要素が除去されるなど、オリジナルの URL とは異な"
"る場合があります。特に、空のパラメータ、クエリ、およびフラグメント識別子は削"
"除されます。"

#: ../../library/urllib.parse.rst:479
msgid ""
"For :func:`urldefrag` results, only empty fragment identifiers will be "
"removed. For :func:`urlsplit` and :func:`urlparse` results, all noted "
"changes will be made to the URL returned by this method."
msgstr ""
":func:`urldefrag` の戻り値では、空のフラグメント識別子のみ削除されます。:"
"func:`urlsplit` および :func:`urlparse` の戻り値では、このメソッドが返す URL "
"には説明されているすべての変更が加えられます。"

#: ../../library/urllib.parse.rst:483
msgid ""
"The result of this method remains unchanged if passed back through the "
"original parsing function:"
msgstr "加えた解析関数を逆に行えばこのメソッドの戻り値は元の URL になります:"

#: ../../library/urllib.parse.rst:496
msgid ""
"The following classes provide the implementations of the structured parse "
"results when operating on :class:`str` objects:"
msgstr ""
"以下のクラスは :class:`str` オブジェクトを操作した場合、構造化された解析結果"
"の実装を提供します:"

#: ../../library/urllib.parse.rst:501
msgid ""
"Concrete class for :func:`urldefrag` results containing :class:`str` data. "
"The :meth:`encode` method returns a :class:`DefragResultBytes` instance."
msgstr ""
":func:`urldefrag` の具象クラスの結果には :class:`str` データが含まれます。:"
"meth:`encode` メソッドは :class:`DefragResultBytes` インスタンスを返します。"

#: ../../library/urllib.parse.rst:509
msgid ""
"Concrete class for :func:`urlparse` results containing :class:`str` data. "
"The :meth:`encode` method returns a :class:`ParseResultBytes` instance."
msgstr ""
":func:`urlparse` の具象クラスの結果には :class:`str` データが含まれます。:"
"meth:`encode` メソッドは :class:`ParseResultBytes` インスタンスを返します。"

#: ../../library/urllib.parse.rst:515
msgid ""
"Concrete class for :func:`urlsplit` results containing :class:`str` data. "
"The :meth:`encode` method returns a :class:`SplitResultBytes` instance."
msgstr ""
":func:`urlsplit` の具象クラスの結果には :class:`str` データが含まれます。:"
"meth:`encode` メソッドは :class:`SplitResultBytes` インスタンスを返します。"

#: ../../library/urllib.parse.rst:520
msgid ""
"The following classes provide the implementations of the parse results when "
"operating on :class:`bytes` or :class:`bytearray` objects:"
msgstr ""
"以下のクラスは :class:`bytes` または :class:`bytearray` オブジェクトを操作し"
"た時に解析結果の実装を提供します:"

#: ../../library/urllib.parse.rst:525
msgid ""
"Concrete class for :func:`urldefrag` results containing :class:`bytes` data. "
"The :meth:`decode` method returns a :class:`DefragResult` instance."
msgstr ""
":func:`urldefrag` の具象クラスの結果には :class:`bytes` データが含まれます。:"
"meth:`decode` メソッドは :class:`DefragResult` インスタンスを返します。"

#: ../../library/urllib.parse.rst:533
msgid ""
"Concrete class for :func:`urlparse` results containing :class:`bytes` data. "
"The :meth:`decode` method returns a :class:`ParseResult` instance."
msgstr ""
":func:`urlparse` の具象クラスの結果には :class:`bytes` が含まれます。:meth:"
"`decode` メソッドは :class:`ParseResult` インスタンスを返します。"

#: ../../library/urllib.parse.rst:541
msgid ""
"Concrete class for :func:`urlsplit` results containing :class:`bytes` data. "
"The :meth:`decode` method returns a :class:`SplitResult` instance."
msgstr ""
":func:`urlsplit` の具象クラスの結果には :class:`bytes` データが含まれます。:"
"meth:`decode` メソッドは :class:`SplitResult` インスタンスを返します。"

#: ../../library/urllib.parse.rst:549
msgid "URL Quoting"
msgstr "URL のクオート"

#: ../../library/urllib.parse.rst:551
msgid ""
"The URL quoting functions focus on taking program data and making it safe "
"for use as URL components by quoting special characters and appropriately "
"encoding non-ASCII text. They also support reversing these operations to "
"recreate the original data from the contents of a URL component if that task "
"isn't already covered by the URL parsing functions above."
msgstr ""
"URL クオート関数は、プログラムデータを取り URL 構成要素として使用できるよう特"
"殊文字をクオートしたり非 ASCII 文字を適切にエンコードすることに焦点を当ててい"
"ます。これらは上述の URL 解析関数でカバーされていない URL 構成要素からオリジ"
"ナルデータの再作成もサポートしています。"

#: ../../library/urllib.parse.rst:559
msgid ""
"Replace special characters in *string* using the ``%xx`` escape. Letters, "
"digits, and the characters ``'_.-~'`` are never quoted. By default, this "
"function is intended for quoting the path section of a URL. The optional "
"*safe* parameter specifies additional ASCII characters that should not be "
"quoted --- its default value is ``'/'``."
msgstr ""
"*string* 内の特殊文字を ``%xx`` を使用してエスケープします。文字、数字、およ"
"び ``'_.-~'`` はクオートされません。デフォルトでは、この関数は URL のパス部分"
"のクオートのために用意されています。任意のパラメータ *safe* を指定すると、指"
"定した ASCII 文字もクオートされません。デフォルトは ``'/'`` です。"

#: ../../library/urllib.parse.rst:565 ../../library/urllib.parse.rst:611
#: ../../library/urllib.parse.rst:640
msgid "*string* may be either a :class:`str` or a :class:`bytes` object."
msgstr ""
"*string* に使用できるのは :class:`str` か :class:`bytes` オブジェクトです。"

#: ../../library/urllib.parse.rst:567
msgid ""
"Moved from :rfc:`2396` to :rfc:`3986` for quoting URL strings. \"~\" is now "
"included in the set of unreserved characters."
msgstr ""

#: ../../library/urllib.parse.rst:571
msgid ""
"The optional *encoding* and *errors* parameters specify how to deal with non-"
"ASCII characters, as accepted by the :meth:`str.encode` method. *encoding* "
"defaults to ``'utf-8'``. *errors* defaults to ``'strict'``, meaning "
"unsupported characters raise a :class:`UnicodeEncodeError`. *encoding* and "
"*errors* must not be supplied if *string* is a :class:`bytes`, or a :class:"
"`TypeError` is raised."
msgstr ""
"任意のパラメータ *encoding* と *errors* は :meth:`str.encode` で受け付けられ"
"る非 ASCII 文字への対処法を指定します。*encoding* のデフォルトは "
"``'utf-8'``、*errors* のデフォルトは ``'strict'`` で、非サポート文字がある"
"と :class:`UnicodeEncodeError` を送出します。*string* が :class:`bytes` の場"
"合 *encoding* と *errors* を指定してはいけません。指定すると :class:"
"`TypeError` が送出されます。"

#: ../../library/urllib.parse.rst:579
msgid ""
"Note that ``quote(string, safe, encoding, errors)`` is equivalent to "
"``quote_from_bytes(string.encode(encoding, errors), safe)``."
msgstr ""
"``quote(string, safe, encoding, errors)`` は ``quote_from_bytes(string."
"encode(encoding, errors), safe)`` と等価であることに留意してください。"

#: ../../library/urllib.parse.rst:582
msgid "Example: ``quote('/El Niño/')`` yields ``'/El%20Ni%C3%B1o/'``."
msgstr "例: ``quote('/El Niño/')`` は ``'/El%20Ni%C3%B1o/'`` を返します。"

#: ../../library/urllib.parse.rst:587
msgid ""
"Like :func:`quote`, but also replace spaces with plus signs, as required for "
"quoting HTML form values when building up a query string to go into a URL. "
"Plus signs in the original string are escaped unless they are included in "
"*safe*.  It also does not have *safe* default to ``'/'``."
msgstr ""

#: ../../library/urllib.parse.rst:592
msgid "Example: ``quote_plus('/El Niño/')`` yields ``'%2FEl+Ni%C3%B1o%2F'``."
msgstr ""
"例: ``quote_plus('/El Niño/')`` は ``'%2FEl+Ni%C3%B1o%2F'`` を返します。"

#: ../../library/urllib.parse.rst:597
msgid ""
"Like :func:`quote`, but accepts a :class:`bytes` object rather than a :class:"
"`str`, and does not perform string-to-bytes encoding."
msgstr ""
":func:`quote` と似ていますが、:class:`str` ではなく :class:`bytes` オブジェク"
"トを取り、文字列からバイト列へのエンコードを行いません。"

#: ../../library/urllib.parse.rst:600
msgid "Example: ``quote_from_bytes(b'a&\\xef')`` yields ``'a%26%EF'``."
msgstr "例: ``quote_from_bytes(b'a&\\xef')`` は ``'a%26%EF'`` を返します。"

#: ../../library/urllib.parse.rst:606
msgid ""
"Replace ``%xx`` escapes with their single-character equivalent. The optional "
"*encoding* and *errors* parameters specify how to decode percent-encoded "
"sequences into Unicode characters, as accepted by the :meth:`bytes.decode` "
"method."
msgstr ""
"エスケープされた ``%xx`` をそれに対応した単一文字に置き換えます。オプション引"
"数の *encoding* と *errors* は :meth:`bytes.decode` メソッドで受け付けられる"
"パーセントエンコードされたシーケンスから Unicode 文字へのデコード法を指定しま"
"す。"

#: ../../library/urllib.parse.rst:613
msgid ""
"*encoding* defaults to ``'utf-8'``. *errors* defaults to ``'replace'``, "
"meaning invalid sequences are replaced by a placeholder character."
msgstr ""
"*encoding* のデフォルトは ``'utf-8'``、*errors* のデフォルトは ``'replace'`` "
"で、不正なシーケンスはプレースホルダー文字に置き換えられます。"

#: ../../library/urllib.parse.rst:617
msgid "Example: ``unquote('/El%20Ni%C3%B1o/')`` yields ``'/El Niño/'``."
msgstr "例: ``unquote('/El%20Ni%C3%B1o/')`` は ``'/El Niño/'`` を返します。"

#: ../../library/urllib.parse.rst:619
msgid ""
"*string* parameter supports bytes and str objects (previously only str)."
msgstr ""

#: ../../library/urllib.parse.rst:627
msgid ""
"Like :func:`unquote`, but also replace plus signs with spaces, as required "
"for unquoting HTML form values."
msgstr ""
":func:`unquote` と似ていますが、HTML フォームの値のアンクオートのために「+」"
"を空白に置き換えます。"

#: ../../library/urllib.parse.rst:630
msgid "*string* must be a :class:`str`."
msgstr "*string* は :class:`str` でなければなりません。"

#: ../../library/urllib.parse.rst:632
msgid "Example: ``unquote_plus('/El+Ni%C3%B1o/')`` yields ``'/El Niño/'``."
msgstr "例: ``unquote_plus('/El+Ni%C3%B1o/')`` は ``'/El Niño/'`` を返します。"

#: ../../library/urllib.parse.rst:637
msgid ""
"Replace ``%xx`` escapes with their single-octet equivalent, and return a :"
"class:`bytes` object."
msgstr ""
"スケープされた ``%xx`` をそれに対応した 1 オクテットに置き換え、:class:"
"`bytes` オブジェクトを返します。"

#: ../../library/urllib.parse.rst:642
msgid ""
"If it is a :class:`str`, unescaped non-ASCII characters in *string* are "
"encoded into UTF-8 bytes."
msgstr ""
":class:`str` だった場合、*string* 内のエスケープされていない非 ASCII 文字は "
"UTF-8 バイト列にエンコードされます。"

#: ../../library/urllib.parse.rst:645
msgid "Example: ``unquote_to_bytes('a%26%EF')`` yields ``b'a&\\xef'``."
msgstr "例: ``unquote_to_bytes('a%26%EF')`` は ``b'a&\\xef'`` を返します。"

#: ../../library/urllib.parse.rst:651
msgid ""
"Convert a mapping object or a sequence of two-element tuples, which may "
"contain :class:`str` or :class:`bytes` objects, to a percent-encoded ASCII "
"text string.  If the resultant string is to be used as a *data* for POST "
"operation with the :func:`~urllib.request.urlopen` function, then it should "
"be encoded to bytes, otherwise it would result in a :exc:`TypeError`."
msgstr ""
"マッピング型オブジェクトまたは 2 個の要素からなるタプルのシーケンス (:class:"
"`str` か :class:`bytes` オブジェクトが含まれているかもしれません) を、パーセ"
"ントエンコードされた ASCII 文字列に変換します。戻り値の文字列が :func:"
"`~urllib.request.urlopen` 関数での POST 操作の *data* で使用される場合はバイ"
"ト列にエンコードしなければなりません。そうでない場合は :exc:`TypeError` が送"
"出されます。"

#: ../../library/urllib.parse.rst:658
msgid ""
"The resulting string is a series of ``key=value`` pairs separated by ``'&'`` "
"characters, where both *key* and *value* are quoted using the *quote_via* "
"function.  By default, :func:`quote_plus` is used to quote the values, which "
"means spaces are quoted as a ``'+'`` character and '/' characters are "
"encoded as ``%2F``, which follows the standard for GET requests "
"(``application/x-www-form-urlencoded``).  An alternate function that can be "
"passed as *quote_via* is :func:`quote`, which will encode spaces as ``%20`` "
"and not encode '/' characters.  For maximum control of what is quoted, use "
"``quote`` and specify a value for *safe*."
msgstr ""
"戻り値は ``'&'`` 文字で区切られた ``key=value`` のペアからなる一組の文字列に"
"なります。 *key* と *value* は *quote_via* を使用してクオートされます。デフォ"
"ルトで、値をクォートするために :func:`quote_plus` が使用されます。つまり、ス"
"ペースは ``'+'`` 文字に、 '/' 文字は ``%2F`` にクォートされます。これは GET "
"リクエストの標準に準拠します (``application/x-www-form-urlencoded``)。 "
"*quote_via* として渡すことができる別の関数は :func:`quote` です。それはスペー"
"スを ``%20`` にエンコードし、 '/' をエンコードしません。何がクォートされるか"
"を最大限コントロールしたければ、 ``quote`` を使って *safe* に値を指定してくだ"
"さい。"

#: ../../library/urllib.parse.rst:668
msgid ""
"When a sequence of two-element tuples is used as the *query* argument, the "
"first element of each tuple is a key and the second is a value. The value "
"element in itself can be a sequence and in that case, if the optional "
"parameter *doseq* evaluates to ``True``, individual ``key=value`` pairs "
"separated by ``'&'`` are generated for each element of the value sequence "
"for the key.  The order of parameters in the encoded string will match the "
"order of parameter tuples in the sequence."
msgstr ""
"引数 *query* が 2 要素のタプルのシーケンスの場合、各タプルの第一要素はキー"
"に、第二要素は値になります。\n"
"値となる要素はシーケンスを取ることもでき、この場合、オプションのパラメーター "
"*doseq* が ``True`` と評価されるのであれば、キーに対し値シーケンスの各要素を"
"個別に結び付けた ``key=value`` のペアを、 ``'&'`` 文字でつないだものを生成し"
"ます。\n"
"エンコードされた文字列内のパラメーターの順序はシーケンス内のパラメータータプ"
"ルの順序と一致します。"

#: ../../library/urllib.parse.rst:676
msgid ""
"The *safe*, *encoding*, and *errors* parameters are passed down to "
"*quote_via* (the *encoding* and *errors* parameters are only passed when a "
"query element is a :class:`str`)."
msgstr ""
"*safe*, *encoding*, および *errors* パラメータは *quote_via* にそのまま渡され"
"ます (クエリ要素が :class:`str` の場合は、 *encoding* と *errors* パラメータ"
"だけが渡されます)。"

#: ../../library/urllib.parse.rst:680
msgid ""
"To reverse this encoding process, :func:`parse_qs` and :func:`parse_qsl` are "
"provided in this module to parse query strings into Python data structures."
msgstr ""
"このエンコード処理の逆を行うには、このモジュールで提供されている :func:"
"`parse_qs` と :func:`parse_qsl` を使用して、クエリ文字列を Python データ構造"
"に変換できます。"

#: ../../library/urllib.parse.rst:683
msgid ""
"Refer to :ref:`urllib examples <urllib-examples>` to find out how the :func:"
"`urllib.parse.urlencode` method can be used for generating the query string "
"of a URL or data for a POST request."
msgstr ""
"POST リクエストのデータ、あるいは URL クエリ文字列を生成するために、 :func:"
"`urllib.parse.urlencode` メソッドをどのように使えばよいかを見るには、:ref:"
"`urllib の使用例 <urllib-examples>` を参照してください。"

#: ../../library/urllib.parse.rst:687
msgid "*query* supports bytes and string objects."
msgstr "*query* はバイト列と文字列オブジェクトをサポートします。"

#: ../../library/urllib.parse.rst:690
msgid "*quote_via* parameter."
msgstr "*quote_via* 引数。"

#: ../../library/urllib.parse.rst:698
msgid "`WHATWG`_ -  URL Living standard"
msgstr ""

#: ../../library/urllib.parse.rst:697
msgid ""
"Working Group for the URL Standard that defines URLs, domains, IP addresses, "
"the application/x-www-form-urlencoded format, and their API."
msgstr ""

#: ../../library/urllib.parse.rst:704
msgid ":rfc:`3986` - Uniform Resource Identifiers"
msgstr ":rfc:`3986` - Uniform Resource Identifiers"

#: ../../library/urllib.parse.rst:701
msgid ""
"This is the current standard (STD66). Any changes to urllib.parse module "
"should conform to this. Certain deviations could be observed, which are "
"mostly for backward compatibility purposes and for certain de-facto parsing "
"requirements as commonly observed in major browsers."
msgstr ""
"これが現在の標準規格 (STD66) です。urllib.parse モジュールに対するすべての変"
"更はこの規格に準拠していなければなりませんが、若干の逸脱はありえます。これは"
"主には後方互換性のため、また主要なブラウザで一般的に見られる、URL を解析する"
"上でのいくつかの事実上の要件を満たすためです。"

#: ../../library/urllib.parse.rst:707
msgid ":rfc:`2732` - Format for Literal IPv6 Addresses in URL's."
msgstr ":rfc:`2732` - Format for Literal IPv6 Addresses in URL's."

#: ../../library/urllib.parse.rst:707
msgid "This specifies the parsing requirements of IPv6 URLs."
msgstr "この規格は IPv6 の URL を解析するときの要求事項を記述しています。"

#: ../../library/urllib.parse.rst:711
msgid ":rfc:`2396` - Uniform Resource Identifiers (URI): Generic Syntax"
msgstr ":rfc:`2396` - Uniform Resource Identifiers (URI): Generic Syntax"

#: ../../library/urllib.parse.rst:710
msgid ""
"Document describing the generic syntactic requirements for both Uniform "
"Resource Names (URNs) and Uniform Resource Locators (URLs)."
msgstr ""
"この RFC では Uniform Resource Name (URN) と Uniform Resource Locator (URL) "
"の両方に対する一般的な文法的要求事項を記述しています。"

#: ../../library/urllib.parse.rst:714
msgid ":rfc:`2368` - The mailto URL scheme."
msgstr ":rfc:`2368` - The mailto URL scheme."

#: ../../library/urllib.parse.rst:714
msgid "Parsing requirements for mailto URL schemes."
msgstr "mailto URL スキームに対する文法的要求事項です。"

#: ../../library/urllib.parse.rst:719
msgid ":rfc:`1808` - Relative Uniform Resource Locators"
msgstr ":rfc:`1808` - Relative Uniform Resource Locators"

#: ../../library/urllib.parse.rst:717
msgid ""
"This Request For Comments includes the rules for joining an absolute and a "
"relative URL, including a fair number of \"Abnormal Examples\" which govern "
"the treatment of border cases."
msgstr ""
"この RFC には絶対 URL と相対 URL を結合するための規則がボーダケースの取扱い方"
"を決定する \"異常な例\" つきで収められています。"

#: ../../library/urllib.parse.rst:721
msgid ":rfc:`1738` - Uniform Resource Locators (URL)"
msgstr ":rfc:`1738` - Uniform Resource Locators (URL)"

#: ../../library/urllib.parse.rst:722
msgid "This specifies the formal syntax and semantics of absolute URLs."
msgstr "この RFC では絶対 URL の形式的な文法と意味付けを仕様化しています。"
