# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Osamu NAKAMURA, 2021
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-11 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:08+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/intro.rst:5
msgid "Introduction"
msgstr "はじめに"

#: ../../library/intro.rst:7
msgid "The \"Python library\" contains several different kinds of components."
msgstr "この \"Python ライブラリ\" には様々な内容が収録されています。"

#: ../../library/intro.rst:9
msgid ""
"It contains data types that would normally be considered part of the "
"\"core\" of a language, such as numbers and lists.  For these types, the "
"Python language core defines the form of literals and places some "
"constraints on their semantics, but does not fully define the semantics.  "
"(On the other hand, the language core does define syntactic properties like "
"the spelling and priorities of operators.)"
msgstr ""
"このライブラリには、数値型やリスト型のような、通常は言語の \"核\" をなす部分"
"とみなされるデータ型が含まれています。Python 言語のコア部分では、これらの型に"
"対してリテラル表現形式を与え、意味づけ上のいくつかの制約を与えていますが、完"
"全にその意味づけを定義しているわけではありません。(一方で、言語のコア部分では"
"演算子のスペルや優先順位のような構文法的な属性を定義しています。)"

#: ../../library/intro.rst:15
msgid ""
"The library also contains built-in functions and exceptions --- objects that "
"can be used by all Python code without the need of an :keyword:`import` "
"statement. Some of these are defined by the core language, but many are not "
"essential for the core semantics and are only described here."
msgstr ""
"このライブラリにはまた、組み込み関数と例外が納められています --- 組み込み関数"
"および例外は、全ての Python で書かれたコード上で、 :keyword:`import` 文を使わ"
"ずに使うことができるオブジェクトです。これらの組み込み要素のうちいくつかは言"
"語のコア部分で定義されていますが、大半は言語コアの意味づけ上不可欠なものでは"
"ないのでここでしか記述されていません。"

#: ../../library/intro.rst:20
msgid ""
"The bulk of the library, however, consists of a collection of modules. There "
"are many ways to dissect this collection.  Some modules are written in C and "
"built in to the Python interpreter; others are written in Python and "
"imported in source form.  Some modules provide interfaces that are highly "
"specific to Python, like printing a stack trace; some provide interfaces "
"that are specific to particular operating systems, such as access to "
"specific hardware; others provide interfaces that are specific to a "
"particular application domain, like the World Wide Web. Some modules are "
"available in all versions and ports of Python; others are only available "
"when the underlying system supports or requires them; yet others are "
"available only when a particular configuration option was chosen at the time "
"when Python was compiled and installed."
msgstr ""
"とはいえ、このライブラリの大部分に収録されているのはモジュールのコレクション"
"です。このコレクションを細分化する方法はいろいろあります。あるモジュールは C "
"言語で書かれ、Python インタプリタに組み込まれています; 一方別のモジュールは "
"Python で書かれ、ソースコードの形式で取り込まれます。またあるモジュールは、例"
"えば実行スタックの追跡結果を出力するといった、Python に非常に特化したインター"
"フェースを提供し、一方他のモジュールでは、特定のハードウェアにアクセスすると"
"いった、特定のオペレーティングシステムに特化したインターフェースを提供し、さ"
"らに別のモジュールでは WWW (ワールドワイドウェブ) のような特定のアプリケー"
"ション分野に特化したインターフェースを提供しています。モジュールによっては全"
"てのバージョン、全ての移植版の Python で利用することができたり、背後にあるシ"
"ステムがサポートしている場合にのみ使えたり、Python をコンパイルしてインストー"
"ルする際に特定の設定オプションを選んだときにのみ利用できたりします。"

#: ../../library/intro.rst:32
msgid ""
"This manual is organized \"from the inside out:\" it first describes the "
"built-in functions, data types and exceptions, and finally the modules, "
"grouped in chapters of related modules."
msgstr ""
"このマニュアルは \"内部から外部へ\" と構成されています。つまり、最初に組み込"
"みの関数を記述し、組み込みのデータ型、例外、そして最後に各モジュールと続きま"
"す。モジュールは関係のあるものでグループ化して一つの章にしています。"

#: ../../library/intro.rst:36
msgid ""
"This means that if you start reading this manual from the start, and skip to "
"the next chapter when you get bored, you will get a reasonable overview of "
"the available modules and application areas that are supported by the Python "
"library.  Of course, you don't *have* to read it like a novel --- you can "
"also browse the table of contents (in front of the manual), or look for a "
"specific function, module or term in the index (in the back).  And finally, "
"if you enjoy learning about random subjects, you choose a random page number "
"(see module :mod:`random`) and read a section or two.  Regardless of the "
"order in which you read the sections of this manual, it helps to start with "
"chapter :ref:`built-in-funcs`, as the remainder of the manual assumes "
"familiarity with this material."
msgstr ""
"つまり、このマニュアルを最初から読み始め、読み飽きたところで次の章に進めば、 "
"Python ライブラリで利用できるモジュールやサポートしているアプリケーション領域"
"の概要をそこそこ理解できるということです。もちろん、このマニュアルを小説のよ"
"うに読む必要は *ありません* --- (マニュアルの先頭部分にある) 目次にざっと目を"
"通したり、 (最後尾にある) 索引でお目当ての関数やモジュール、用語を探すこと"
"だってできます。もしランダムな項目について勉強してみたいのなら、ランダムに"
"ページを選び (:mod:`random` 参照)、そこから 1, 2 節読むこともできます。このマ"
"ニュアルの各節をどんな順番で読むかに関わらず、 :ref:`built-in-funcs` の章から"
"始めるとよいでしょう。マニュアルの他の部分は、この節の内容について知っている"
"ものとして書かれているからです。"

#: ../../library/intro.rst:48
msgid "Let the show begin!"
msgstr "それでは、ショーの始まりです！"

#: ../../library/intro.rst:54
msgid "Notes on availability"
msgstr "利用可能性について"

#: ../../library/intro.rst:56
msgid ""
"An \"Availability: Unix\" note means that this function is commonly found on "
"Unix systems.  It does not make any claims about its existence on a specific "
"operating system."
msgstr ""
"「利用できる環境 : Unix 」の意味はこの関数が Unix システムにあることが多いと"
"いうことです。このことは特定の OS における存在を主張するものではありません。"

#: ../../library/intro.rst:60
msgid ""
"If not separately noted, all functions that claim \"Availability: Unix\" are "
"supported on macOS, iOS and Android, all of which build on a Unix core."
msgstr ""

#: ../../library/intro.rst:63
msgid ""
"If an availability note contains both a minimum Kernel version and a minimum "
"libc version, then both conditions must hold. For example a feature with "
"note *Availability: Linux >= 3.17 with glibc >= 2.27* requires both Linux "
"3.17 or newer and glibc 2.27 or newer."
msgstr ""
"利用可能性の注釈に最小カーネルバージョンと最小 libc バージョンの両方が含まれ"
"ている場合は、両方の条件を満たさなければなりません。例えば、 *Availability: "
"Linux >= 3.17 with glibc >= 2.27* という注釈付きの機能には、 Linux 3.17 以上"
"と、 glibc 2.27 以上の両方が必要です。"

#: ../../library/intro.rst:71
msgid "WebAssembly platforms"
msgstr "WebAssembly プラットフォーム"

#: ../../library/intro.rst:73
msgid ""
"The `WebAssembly`_ platforms ``wasm32-emscripten`` (`Emscripten`_) and "
"``wasm32-wasi`` (`WASI`_) provide a subset of POSIX APIs. WebAssembly "
"runtimes and browsers are sandboxed and have limited access to the host and "
"external resources. Any Python standard library module that uses processes, "
"threading, networking, signals, or other forms of inter-process "
"communication (IPC), is either not available or may not work as on other "
"Unix-like systems. File I/O, file system, and Unix permission-related "
"functions are restricted, too. Emscripten does not permit blocking I/O. "
"Other blocking operations like :func:`~time.sleep` block the browser event "
"loop."
msgstr ""
"`WebAssembly`_ プラットフォームである ``wasm32-emscripten`` (`Emscripten`_) "
"と ``wasm32-wasi`` (`WASI`_) は、 POSIX API のサブセットを提供します。 "
"WebAssembly ランタイムとブラウザーはサンドボックス化されており、ホストや外部"
"リソースへのアクセスが制限されています。プロセス、スレッド、ネットワーク、シ"
"グナル、または他の形のプロセス間通信 (IPC) を使用する標準ライブラリモジュール"
"は、利用不可か、他の Unix ライクなシステムのようには動作しません。ファイル I/"
"O 、ファイルシステム、 Unix の権限関係の機能も制限されています。 Emscripten "
"はブロッキング I/O を許可しません。 :func:`~time.sleep` のような他のブロッキ"
"ング操作は、ブラウザーのイベントループをブロックします。"

#: ../../library/intro.rst:83
msgid ""
"The properties and behavior of Python on WebAssembly platforms depend on the "
"`Emscripten`_-SDK or `WASI`_-SDK version, WASM runtimes (browser, NodeJS, "
"`wasmtime`_), and Python build time flags. WebAssembly, Emscripten, and WASI "
"are evolving standards; some features like networking may be supported in "
"the future."
msgstr ""
"WebAssembly プラットフォーム上での Python の 性質と振る舞いは、 "
"`Emscripten`_-SDK や `WASI`_-SDK のバージョン、 WASM ランタイム (ブラウザ、 "
"NodeJS 、 `wasmtime`_) 、Python のビルド時フラグによって決まります。 "
"WebAssembly や Emscripten 、 WASI は標準を発展させており、ネットワークなどの"
"機能は将来的にサポートされるかもしれません"

#: ../../library/intro.rst:89
msgid ""
"For Python in the browser, users should consider `Pyodide`_ or `PyScript`_. "
"PyScript is built on top of Pyodide, which itself is built on top of CPython "
"and Emscripten. Pyodide provides access to browsers' JavaScript and DOM APIs "
"as well as limited networking capabilities with JavaScript's "
"``XMLHttpRequest`` and ``Fetch`` APIs."
msgstr ""
"ブラウザ上の Python では、ユーザーは  `Pyodide`_ や `PyScript`_ を検討すべき"
"でしょう。 PyScript は、 Pyodide をもとにして構築されており、 Pyodide 自体は "
"CPython や Emscripten 上に構築されています。 Pyodide は、ブラウザの "
"JavaScript と DOM API だけでなく、 JavaScript の ``XMLHttpRequest`` や "
"``Fetch`` API による制限されたネットワーク機能へのアクセスを提供します。"

#: ../../library/intro.rst:95
msgid ""
"Process-related APIs are not available or always fail with an error. That "
"includes APIs that spawn new processes (:func:`~os.fork`, :func:`~os."
"execve`), wait for processes (:func:`~os.waitpid`), send signals (:func:`~os."
"kill`), or otherwise interact with processes. The :mod:`subprocess` is "
"importable but does not work."
msgstr ""
"プロセス関連の API は利用不可能か、常にエラーにより失敗します。これには、新し"
"いプロセスを作成 (:func:`~os.fork` や :func:`~os.execve`) 、プロセスを待機 (:"
"func:`~os.waitpid`) 、シグナルを送信 (:func:`~os.kill`) 、もしくはプロセスと"
"通信する API が含まれます。 :mod:`subprocess` はインポート可能ですが、機能し"
"ません。"

#: ../../library/intro.rst:101
msgid ""
"The :mod:`socket` module is available, but is limited and behaves "
"differently from other platforms. On Emscripten, sockets are always non-"
"blocking and require additional JavaScript code and helpers on the server to "
"proxy TCP through WebSockets; see `Emscripten Networking`_ for more "
"information. WASI snapshot preview 1 only permits sockets from an existing "
"file descriptor."
msgstr ""

#: ../../library/intro.rst:108
msgid ""
"Some functions are stubs that either don't do anything and always return "
"hardcoded values."
msgstr ""

#: ../../library/intro.rst:111
msgid ""
"Functions related to file descriptors, file permissions, file ownership, and "
"links are limited and don't support some operations. For example, WASI does "
"not permit symlinks with absolute file names."
msgstr ""

#: ../../library/intro.rst:127
msgid "Mobile platforms"
msgstr ""

#: ../../library/intro.rst:129
msgid ""
"Android and iOS are, in most respects, POSIX operating systems. File I/O, "
"socket handling, and threading all behave as they would on any POSIX "
"operating system. However, there are several major differences:"
msgstr ""

#: ../../library/intro.rst:133
msgid ""
"Mobile platforms can only use Python in \"embedded\" mode. There is no "
"Python REPL, and no ability to use separate executables such as :program:"
"`python` or :program:`pip`. To add Python code to your mobile app, you must "
"use the :ref:`Python embedding API <embedding>`. For more details, see :ref:"
"`using-android` and :ref:`using-ios`."
msgstr ""

#: ../../library/intro.rst:139
msgid "Subprocesses:"
msgstr ""

#: ../../library/intro.rst:141
msgid ""
"On Android, creating subprocesses is possible but `officially unsupported "
"<https://issuetracker.google.com/issues/128554619#comment4>`__. In "
"particular, Android does not support any part of the System V IPC API, so :"
"mod:`multiprocessing` is not available."
msgstr ""

#: ../../library/intro.rst:146
msgid ""
"An iOS app cannot use any form of subprocessing, multiprocessing, or inter-"
"process communication. If an iOS app attempts to create a subprocess, the "
"process creating the subprocess will either lock up, or crash. An iOS app "
"has no visibility of other applications that are running, nor any ability to "
"communicate with other running applications, outside of the iOS-specific "
"APIs that exist for this purpose."
msgstr ""

#: ../../library/intro.rst:153
msgid ""
"Mobile apps have limited access to modify system resources (such as the "
"system clock). These resources will often be *readable*, but attempts to "
"modify those resources will usually fail."
msgstr ""

#: ../../library/intro.rst:157
msgid "Console input and output:"
msgstr ""

#: ../../library/intro.rst:159
msgid ""
"On Android, the native ``stdout`` and ``stderr`` are not connected to "
"anything, so Python installs its own streams which redirect messages to the "
"system log. These can be seen under the tags ``python.stdout`` and ``python."
"stderr`` respectively."
msgstr ""

#: ../../library/intro.rst:164
msgid ""
"iOS apps have a limited concept of console output. ``stdout`` and ``stderr`` "
"*exist*, and content written to ``stdout`` and ``stderr`` will be visible in "
"logs when running in Xcode, but this content *won't* be recorded in the "
"system log. If a user who has installed your app provides their app logs as "
"a diagnostic aid, they will not include any detail written to ``stdout`` or "
"``stderr``."
msgstr ""

#: ../../library/intro.rst:171
msgid ""
"Mobile apps have no usable ``stdin`` at all. While apps can display an on-"
"screen keyboard, this is a software feature, not something that is attached "
"to ``stdin``."
msgstr ""

#: ../../library/intro.rst:175
msgid ""
"As a result, Python modules that involve console manipulation (such as :mod:"
"`curses` and :mod:`readline`) are not available on mobile platforms."
msgstr ""
