# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Arihiro TAKASE, 2017
# Shun Sakurai, 2017
# E. Kawashima, 2017
# Ryuichi Takano <ryuichi.takano@sinewave.onmicrosoft.com>, 2017
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2017
# Inada Naoki <songofacandy@gmail.com>, 2017
# Masato HASHIMOTO <cabezon.hashimoto@gmail.com>, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2017
# tomo, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-25 13:16+0000\n"
"PO-Revision-Date: 2017-02-16 23:17+0000\n"
"Last-Translator: tomo, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/logging.rst:2
msgid ":mod:`logging` --- Logging facility for Python"
msgstr ":mod:`logging` --- Python 用ロギング機能"

#: ../../library/logging.rst:10
msgid "**Source code:** :source:`Lib/logging/__init__.py`"
msgstr "**ソースコード:** :source:`Lib/logging/__init__.py`"

#: ../../library/logging.rst:16
msgid ""
"This page contains the API reference information. For tutorial information "
"and discussion of more advanced topics, see"
msgstr "このページには、リファレンス情報だけが含まれています。チュートリアルは、以下のページを参照してください"

#: ../../library/logging.rst:19
msgid ":ref:`Basic Tutorial <logging-basic-tutorial>`"
msgstr ":ref:`基本チュートリアル <logging-basic-tutorial>`"

#: ../../library/logging.rst:20
msgid ":ref:`Advanced Tutorial <logging-advanced-tutorial>`"
msgstr ":ref:`上級チュートリアル <logging-advanced-tutorial>`"

#: ../../library/logging.rst:21
msgid ":ref:`Logging Cookbook <logging-cookbook>`"
msgstr ":ref:`ロギングクックブック <logging-cookbook>`"

#: ../../library/logging.rst:25
msgid ""
"This module defines functions and classes which implement a flexible event "
"logging system for applications and libraries."
msgstr ""
"このモジュールは、アプリケーションやライブラリのための柔軟なエラーログ記録 (logging) システムを実装するための関数やクラスを定義しています。"

#: ../../library/logging.rst:28
msgid ""
"The key benefit of having the logging API provided by a standard library "
"module is that all Python modules can participate in logging, so your "
"application log can include your own messages integrated with messages from "
"third-party modules."
msgstr ""
"標準ライブラリモジュールとしてログ記録 API が提供される利点は、すべての Python "
"モジュールがログ記録に参加できることであり、これによってあなたが書くアプリケーションのログにサードパーティーのモジュールが出力するメッセージを含ませることができます。"

#: ../../library/logging.rst:33
msgid ""
"The module provides a lot of functionality and flexibility.  If you are "
"unfamiliar with logging, the best way to get to grips with it is to see the "
"tutorials (see the links on the right)."
msgstr ""
"このモジュールは、多くの機能性と柔軟性を提供します。ロギングに慣れていないなら、つかむのに一番いいのはチュートリアルを読むことです "
"(右のリンクを参照してください)。"

#: ../../library/logging.rst:37
msgid ""
"The basic classes defined by the module, together with their functions, are "
"listed below."
msgstr "モジュールで定義されている基本的なクラスと関数を、以下に列挙します。"

#: ../../library/logging.rst:40
msgid "Loggers expose the interface that application code directly uses."
msgstr "ロガーは、アプリケーションコードが直接使うインタフェースを公開します。"

#: ../../library/logging.rst:41
msgid ""
"Handlers send the log records (created by loggers) to the appropriate "
"destination."
msgstr "ハンドラは、(ロガーによって生成された) ログ記録を適切な送信先に送ります。"

#: ../../library/logging.rst:43
msgid ""
"Filters provide a finer grained facility for determining which log records "
"to output."
msgstr "フィルタは、どのログ記録を出力するかを決定する、きめ細かい機能を提供します。"

#: ../../library/logging.rst:45
msgid "Formatters specify the layout of log records in the final output."
msgstr "フォーマッタは、ログ記録が最終的に出力されるレイアウトを指定します。"

#: ../../library/logging.rst:51
msgid "Logger Objects"
msgstr "ロガーオブジェクト"

#: ../../library/logging.rst:53
msgid ""
"Loggers have the following attributes and methods.  Note that Loggers should"
" *NEVER* be instantiated directly, but always through the module-level "
"function ``logging.getLogger(name)``.  Multiple calls to :func:`getLogger` "
"with the same name will always return a reference to the same Logger object."
msgstr ""
"ロガーには以下のような属性とメソッドがあります。\n"
"ロガーを直接インスタンス化することは *絶対に* してはならず、常にモジュール関数 ``logging.getLogger(name)`` を介してインスタンス化することに注意してください。\n"
"同じ name で :func:`getLogger` を複数回呼び出すと、常に同じロガー・オブジェクトへの参照が返されます。"

#: ../../library/logging.rst:58
msgid ""
"The ``name`` is potentially a period-separated hierarchical value, like "
"``foo.bar.baz`` (though it could also be just plain ``foo``, for example). "
"Loggers that are further down in the hierarchical list are children of "
"loggers higher up in the list.  For example, given a logger with a name of "
"``foo``, loggers with names of ``foo.bar``, ``foo.bar.baz``, and ``foo.bam``"
" are all descendants of ``foo``.  The logger name hierarchy is analogous to "
"the Python package hierarchy, and identical to it if you organise your "
"loggers on a per-module basis using the recommended construction "
"``logging.getLogger(__name__)``.  That's because in a module, ``__name__`` "
"is the module's name in the Python package namespace."
msgstr ""
"``name`` は ``foo.bar.baz`` のようにピリオドで分割された (ただし単なるプレーンな ``foo`` もありえます) "
"潜在的に階層的な値です。階層リスト中でより下位のロガーは、上位のロガーの子です。例えば、``foo`` "
"という名前を持つロガーがあるとき、``foo.bar``, ``foo.bar.baz``, ``foo.bam`` という名前を持つロガーはすべて "
"``foo`` の子孫です。ロガー名の階層は Python パッケージ階層と類似していて、推奨される構築方法 "
"``logging.getLogger(__name__)`` を使用してロガーをモジュール単位で構成すれば、Python "
"パッケージ階層と同一になります。これは、モジュールの中では ``__name__`` が Python "
"パッケージ名前空間におけるモジュール名だからです。"

#: ../../library/logging.rst:74
msgid ""
"If this attribute evaluates to true, events logged to this logger will be "
"passed to the handlers of higher level (ancestor) loggers, in addition to "
"any handlers attached to this logger. Messages are passed directly to the "
"ancestor loggers' handlers - neither the level nor filters of the ancestor "
"loggers in question are considered."
msgstr ""
"この属性が真と評価された場合、このロガーに記録されたイベントは、このロガーに取り付けられた全てのハンドラに加え、上位 (祖先) ロガーのハンドラにも渡されます。\n"
"メッセージは、祖先ロガーのハンドラに直接渡されます - 今問題にしている祖先ロガーのレベルもフィルタも、どちらも考慮されません。"

#: ../../library/logging.rst:80
msgid ""
"If this evaluates to false, logging messages are not passed to the handlers "
"of ancestor loggers."
msgstr "この値の評価結果が偽になる場合、ロギングメッセージは祖先ロガーのハンドラに渡されません。"

#: ../../library/logging.rst:83
msgid "The constructor sets this attribute to ``True``."
msgstr "コンストラクタはこの属性を ``True`` に設定します。"

#: ../../library/logging.rst:85
msgid ""
"If you attach a handler to a logger *and* one or more of its ancestors, it "
"may emit the same record multiple times. In general, you should not need to "
"attach a handler to more than one logger - if you just attach it to the "
"appropriate logger which is highest in the logger hierarchy, then it will "
"see all events logged by all descendant loggers, provided that their "
"propagate setting is left set to ``True``. A common scenario is to attach "
"handlers only to the root logger, and to let propagation take care of the "
"rest."
msgstr ""
"ハンドラを、あるロガー *と* "
"その祖先のロガーに接続した場合、同一レコードが複数回発行される場合があります。一般的に、ハンドラを複数のロガーに接続する必要はありません。propagate"
" 設定が ``True`` "
"のままになっていれば、ロガーの階層において最上位にある適切なロガーにハンドラを接続するだけで、そのハンドラは全ての子孫ロガーが記録する全てのイベントを確認することができます。一般的なシナリオでは、ハンドラをルートロガーに対してのみ接続し、残りは"
" propagate にすべて委ねます。"

#: ../../library/logging.rst:96
msgid ""
"Sets the threshold for this logger to *level*. Logging messages which are "
"less severe than *level* will be ignored; logging messages which have "
"severity *level* or higher will be emitted by whichever handler or handlers "
"service this logger, unless a handler's level has been set to a higher "
"severity level than *level*."
msgstr ""
"このロガーの閾値を *level* に設定します。\n"
"*level* よりも深刻でないログメッセージは無視されます; 深刻さが *level* 以上のログメッセージは、ハンドラのレベルが *level* より上に設定されていない限り、このロガーに取り付けられているハンドラによって投げられます。"

#: ../../library/logging.rst:101
msgid ""
"When a logger is created, the level is set to :const:`NOTSET` (which causes "
"all messages to be processed when the logger is the root logger, or "
"delegation to the parent when the logger is a non-root logger). Note that "
"the root logger is created with level :const:`WARNING`."
msgstr ""
"ロガーが生成された際、レベルは :const:`NOTSET` (これによりすべてのメッセージについて、ロガーがルートロガーであれば処理される、そうでなくてロガーが非ルートロガーの場合には親ロガーに委譲させる) に設定されます。\n"
"ルートロガーは :const:`WARNING` レベルで生成されることに注意してください。"

#: ../../library/logging.rst:106
msgid ""
"The term 'delegation to the parent' means that if a logger has a level of "
"NOTSET, its chain of ancestor loggers is traversed until either an ancestor "
"with a level other than NOTSET is found, or the root is reached."
msgstr ""
"「親ロガーに委譲」という用語の意味は、もしロガーのレベルが NOTSET ならば、祖先ロガーの系列の中を NOTSET "
"以外のレベルの祖先を見つけるかルートに到達するまで辿っていく、ということです。"

#: ../../library/logging.rst:110
msgid ""
"If an ancestor is found with a level other than NOTSET, then that ancestor's"
" level is treated as the effective level of the logger where the ancestor "
"search began, and is used to determine how a logging event is handled."
msgstr ""
"もし NOTSET "
"以外のレベルの祖先が見つかったなら、その祖先のレベルが探索を開始したロガーの実効レベルとして扱われ、ログイベントがどのように処理されるかを決めるのに使われます。"

#: ../../library/logging.rst:114
msgid ""
"If the root is reached, and it has a level of NOTSET, then all messages will"
" be processed. Otherwise, the root's level will be used as the effective "
"level."
msgstr ""
"ルートに到達した場合、ルートのレベルが NOTSET ならばすべてのメッセージは処理されます。そうでなければルートのレベルが実効レベルとして使われます。"

#: ../../library/logging.rst:117 ../../library/logging.rst:426
msgid "See :ref:`levels` for a list of levels."
msgstr "レベルの一覧については :ref:`levels` を参照してください。"

#: ../../library/logging.rst:119
msgid ""
"The *level* parameter now accepts a string representation of the level such "
"as 'INFO' as an alternative to the integer constants such as :const:`INFO`. "
"Note, however, that levels are internally stored as integers, and methods "
"such as e.g. :meth:`getEffectiveLevel` and :meth:`isEnabledFor` will "
"return/expect to be passed integers."
msgstr ""
"*level* パラメータは、 :const:`INFO` のような整数定数の代わりに 'INFO' "
"のようなレベルの文字列表現も受け付けるようになりました。ただし、レベルは内部で整数として保存されますし、 "
":meth:`getEffectiveLevel` や :meth:`isEnabledFor` "
"といったメソッドは、整数を返し、また渡されるものと期待します。"

#: ../../library/logging.rst:129
msgid ""
"Indicates if a message of severity *level* would be processed by this "
"logger. This method checks first the module-level level set by "
"``logging.disable(level)`` and then the logger's effective level as "
"determined by :meth:`getEffectiveLevel`."
msgstr ""

#: ../../library/logging.rst:137
msgid ""
"Indicates the effective level for this logger. If a value other than "
":const:`NOTSET` has been set using :meth:`setLevel`, it is returned. "
"Otherwise, the hierarchy is traversed towards the root until a value other "
"than :const:`NOTSET` is found, and that value is returned. The value "
"returned is an integer, typically one of :const:`logging.DEBUG`, "
":const:`logging.INFO` etc."
msgstr ""
"このロガーの実効レベルを示します。 :const:`NOTSET` 以外の値が :meth:`setLevel` "
"で設定されていた場合、その値が返されます。そうでない場合、 :const:`NOTSET` "
"以外の値が見つかるまでロガーの階層をルートロガーの方向に追跡します。見つかった場合、その値が返されます。返される値は整数で、典型的には "
":const:`logging.DEBUG`, :const:`logging.INFO` 等のうち一つです。"

#: ../../library/logging.rst:147
msgid ""
"Returns a logger which is a descendant to this logger, as determined by the "
"suffix. Thus, ``logging.getLogger('abc').getChild('def.ghi')`` would return "
"the same logger as would be returned by "
"``logging.getLogger('abc.def.ghi')``. This is a convenience method, useful "
"when the parent logger is named using e.g. ``__name__`` rather than a "
"literal string."
msgstr ""
"このロガーの子であるロガーを、接頭辞によって決定し、返します。従って、``logging.getLogger('abc').getChild('def.ghi')``"
" は、``logging.getLogger('abc.def.ghi')`` "
"によって返されるのと同じロガーを返すことになります。これは簡便なメソッドで、親ロガーがリテラルでなく ``__name__`` "
"などを使って名付けられているときに便利です。"

#: ../../library/logging.rst:158
msgid ""
"Logs a message with level :const:`DEBUG` on this logger. The *msg* is the "
"message format string, and the *args* are the arguments which are merged "
"into *msg* using the string formatting operator. (Note that this means that "
"you can use keywords in the format string, together with a single dictionary"
" argument.) No % formatting operation is performed on *msg* when no *args* "
"are supplied."
msgstr ""

#: ../../library/logging.rst:164
msgid ""
"There are four keyword arguments in *kwargs* which are inspected: "
"*exc_info*, *stack_info*, *stacklevel* and *extra*."
msgstr ""

#: ../../library/logging.rst:167
msgid ""
"If *exc_info* does not evaluate as false, it causes exception information to"
" be added to the logging message. If an exception tuple (in the format "
"returned by :func:`sys.exc_info`) or an exception instance is provided, it "
"is used; otherwise, :func:`sys.exc_info` is called to get the exception "
"information."
msgstr ""
"*exc_info* は、この値の評価値が false "
"でない場合、例外情報がロギングメッセージに追加されます。もし例外情報をあらわすタプル(:func:`sys.exc_info` "
"関数によって戻されるフォーマットにおいて)、または、例外情報をあらわすインスタンスが与えられていれば、それが使用されることになります。それ以外の場合には、"
" :func:`sys.exc_info` を呼び出して例外情報を取得します。"

#: ../../library/logging.rst:172 ../../library/logging.rst:960
msgid ""
"The second optional keyword argument is *stack_info*, which defaults to "
"``False``. If true, stack information is added to the logging message, "
"including the actual logging call. Note that this is not the same stack "
"information as that displayed through specifying *exc_info*: The former is "
"stack frames from the bottom of the stack up to the logging call in the "
"current thread, whereas the latter is information about stack frames which "
"have been unwound, following an exception, while searching for exception "
"handlers."
msgstr ""
"2つ目の省略可能なキーワード引数は *stack_info* で、デフォルトは ``False`` "
"です。真の場合、実際のロギング呼び出しを含むスタック情報がロギングメッセージに追加されます。これは *exc_info* "
"指定によって表示されるスタック情報と同じものではないことに注意してください: "
"前者はカレントスレッド内での、一番下からロギング呼び出しまでのスタックフレームですが、後者は例外に呼応して、例外ハンドラが見つかるところまで巻き戻されたスタックフレームの情報です。"

#: ../../library/logging.rst:181 ../../library/logging.rst:969
msgid ""
"You can specify *stack_info* independently of *exc_info*, e.g. to just show "
"how you got to a certain point in your code, even when no exceptions were "
"raised. The stack frames are printed following a header line which says:"
msgstr ""
"*exc_info* とは独立に *stack_info* を指定することもできます "
"(例えば、例外が上げられなかった場合でも、コード中のある地点にどのように到着したかを単に示すために)。スタックフレームは、次のようなヘッダー行に続いて表示されます:"

#: ../../library/logging.rst:189 ../../library/logging.rst:977
msgid ""
"This mimics the ``Traceback (most recent call last):`` which is used when "
"displaying exception frames."
msgstr ""
"これは、例外フレームを表示する場合に使用される ``Traceback (most recent call last):`` を模倣します。"

#: ../../library/logging.rst:192
msgid ""
"The third optional keyword argument is *stacklevel*, which defaults to "
"``1``. If greater than 1, the corresponding number of stack frames are "
"skipped when computing the line number and function name set in the "
":class:`LogRecord` created for the logging event. This can be used in "
"logging helpers so that the function name, filename and line number recorded"
" are not the information for the helper function/method, but rather its "
"caller. The name of this parameter mirrors the equivalent one in the "
":mod:`warnings` module."
msgstr ""

#: ../../library/logging.rst:200
msgid ""
"The fourth keyword argument is *extra* which can be used to pass a "
"dictionary which is used to populate the __dict__ of the :class:`LogRecord` "
"created for the logging event with user-defined attributes. These custom "
"attributes can then be used as you like. For example, they could be "
"incorporated into logged messages. For example::"
msgstr ""

#: ../../library/logging.rst:212
msgid "would print something like"
msgstr "これは以下のような出力を行います"

#: ../../library/logging.rst:218 ../../library/logging.rst:997
msgid ""
"The keys in the dictionary passed in *extra* should not clash with the keys "
"used by the logging system. (See the :class:`Formatter` documentation for "
"more information on which keys are used by the logging system.)"
msgstr ""
"*extra* で渡される辞書のキーはロギングシステムで使われているものと衝突しないようにしなければなりません。 "
"(どのキーがロギングシステムで使われているかについての詳細は :class:`Formatter` のドキュメントを参照してください。)"

#: ../../library/logging.rst:222
msgid ""
"If you choose to use these attributes in logged messages, you need to "
"exercise some care. In the above example, for instance, the "
":class:`Formatter` has been set up with a format string which expects "
"'clientip' and 'user' in the attribute dictionary of the :class:`LogRecord`."
" If these are missing, the message will not be logged because a string "
"formatting exception will occur. So in this case, you always need to pass "
"the *extra* dictionary with these keys."
msgstr ""

#: ../../library/logging.rst:229 ../../library/logging.rst:1008
msgid ""
"While this might be annoying, this feature is intended for use in "
"specialized circumstances, such as multi-threaded servers where the same "
"code executes in many contexts, and interesting conditions which arise are "
"dependent on this context (such as remote client IP address and "
"authenticated user name, in the above example). In such circumstances, it is"
" likely that specialized :class:`Formatter`\\ s would be used with "
"particular :class:`Handler`\\ s."
msgstr ""
"このようなことは煩わしいかもしれませんが、この機能は限定された場面で使われるように意図しているものなのです。たとえば同じコードがいくつものコンテキストで実行されるマルチスレッドのサーバで、興味のある条件が現れるのがそのコンテキストに依存している"
" (上の例で言えば、リモートのクライアント IP アドレスや認証されたユーザ名など)、というような場合です。そういった場面では、それ用の "
":class:`Formatter` が特定の :class:`Handler` と共に使われるというのはよくあることです。"

#: ../../library/logging.rst:236 ../../library/logging.rst:1015
msgid "The *stack_info* parameter was added."
msgstr "*stack_info* パラメータが追加されました。"

#: ../../library/logging.rst:239
msgid "The *exc_info* parameter can now accept exception instances."
msgstr "*exc_info* パラメータは例外インスタンスを受け入れることが可能です。"

#: ../../library/logging.rst:242
msgid "The *stacklevel* parameter was added."
msgstr ""

#: ../../library/logging.rst:248
msgid ""
"Logs a message with level :const:`INFO` on this logger. The arguments are "
"interpreted as for :meth:`debug`."
msgstr "レベル :const:`INFO` のメッセージをこのロガーで記録します。引数は :meth:`debug` と同じように解釈されます。"

#: ../../library/logging.rst:254
msgid ""
"Logs a message with level :const:`WARNING` on this logger. The arguments are"
" interpreted as for :meth:`debug`."
msgstr ""
"レベル :const:`WARNING` のメッセージをこのロガーで記録します。引数は :meth:`debug` と同じように解釈されます。"

#: ../../library/logging.rst:257
msgid ""
"There is an obsolete method ``warn`` which is functionally identical to "
"``warning``. As ``warn`` is deprecated, please do not use it - use "
"``warning`` instead."
msgstr ""
"``warning`` と機能的に等価な古いメソッド ``warn`` があります。``warn`` は廃止予定なので使わないでください - 代わりに "
"``warning`` を使ってください。"

#: ../../library/logging.rst:263
msgid ""
"Logs a message with level :const:`ERROR` on this logger. The arguments are "
"interpreted as for :meth:`debug`."
msgstr "レベル :const:`ERROR` のメッセージをこのロガーで記録します。引数は :meth:`debug` と同じように解釈されます。"

#: ../../library/logging.rst:269
msgid ""
"Logs a message with level :const:`CRITICAL` on this logger. The arguments "
"are interpreted as for :meth:`debug`."
msgstr ""
"レベル :const:`CRITICAL` のメッセージをこのロガーで記録します。引数は :meth:`debug` と同じように解釈されます。"

#: ../../library/logging.rst:275
msgid ""
"Logs a message with integer level *level* on this logger. The other "
"arguments are interpreted as for :meth:`debug`."
msgstr ""

#: ../../library/logging.rst:281
msgid ""
"Logs a message with level :const:`ERROR` on this logger. The arguments are "
"interpreted as for :meth:`debug`. Exception info is added to the logging "
"message. This method should only be called from an exception handler."
msgstr ""
"レベル :const:`ERROR` のメッセージをこのロガーで記録します。引数は :meth:`debug` "
"と同じように解釈されます。例外情報がログメッセージに追加されます。このメソッドは例外ハンドラからのみ呼び出されるべきです。"

#: ../../library/logging.rst:288
msgid "Adds the specified filter *filter* to this logger."
msgstr "指定されたフィルタ *filter* をこのロガーに追加します。"

#: ../../library/logging.rst:293
msgid "Removes the specified filter *filter* from this logger."
msgstr "指定されたフィルタ *filter* をこのロガーから取り除きます。"

#: ../../library/logging.rst:298
msgid ""
"Apply this logger's filters to the record and return ``True`` if the record "
"is to be processed. The filters are consulted in turn, until one of them "
"returns a false value. If none of them return a false value, the record will"
" be processed (passed to handlers). If one returns a false value, no further"
" processing of the record occurs."
msgstr ""

#: ../../library/logging.rst:307
msgid "Adds the specified handler *hdlr* to this logger."
msgstr "指定されたハンドラ *hdlr* をこのロガーに追加します。"

#: ../../library/logging.rst:312
msgid "Removes the specified handler *hdlr* from this logger."
msgstr "指定されたハンドラ *hdlr* をこのロガーから取り除きます。"

#: ../../library/logging.rst:317
msgid ""
"Finds the caller's source filename and line number. Returns the filename, "
"line number, function name and stack information as a 4-element tuple. The "
"stack information is returned as ``None`` unless *stack_info* is ``True``."
msgstr ""
"呼び出し元のソースファイル名と行番号を調べます。ファイル名と行番号、関数名、スタック情報を 4 要素のタプルで返します。*stack_info* が "
"``True`` でなければ、スタック情報は ``None`` が返されます。"

#: ../../library/logging.rst:321
msgid ""
"The *stacklevel* parameter is passed from code calling the :meth:`debug` and"
" other APIs. If greater than 1, the excess is used to skip stack frames "
"before determining the values to be returned. This will generally be useful "
"when calling logging APIs from helper/wrapper code, so that the information "
"in the event log refers not to the helper/wrapper code, but to the code that"
" calls it."
msgstr ""

#: ../../library/logging.rst:331
msgid ""
"Handles a record by passing it to all handlers associated with this logger "
"and its ancestors (until a false value of *propagate* is found). This method"
" is used for unpickled records received from a socket, as well as those "
"created locally. Logger-level filtering is applied using "
":meth:`~Logger.filter`."
msgstr ""
"レコードを、このロガーおよびその上位ロガー (ただし *propagate* の値が false になったところまで) "
"に関連付けられているすべてのハンドラに渡して処理します。このメソッドは、ローカルで生成されたレコードだけでなく、ソケットから受信した unpickle "
"されたレコードに対しても同様に用いられます。 :meth:`~Logger.filter` によって、ロガーレベルでのフィルタが適用されます。"

#: ../../library/logging.rst:339
msgid ""
"This is a factory method which can be overridden in subclasses to create "
"specialized :class:`LogRecord` instances."
msgstr ""
"このメソッドは、特殊な :class:`LogRecord` インスタンスを生成するためにサブクラスでオーバライドできるファクトリメソッドです。"

#: ../../library/logging.rst:344
msgid ""
"Checks to see if this logger has any handlers configured. This is done by "
"looking for handlers in this logger and its parents in the logger hierarchy."
" Returns ``True`` if a handler was found, else ``False``. The method stops "
"searching up the hierarchy whenever a logger with the 'propagate' attribute "
"set to false is found - that will be the last logger which is checked for "
"the existence of handlers."
msgstr ""
"このロガーにハンドラが設定されているかどうかを調べます。\n"
"そのために、このロガーとロガー階層におけるその祖先についてハンドラ探していきます。\n"
"ハンドラが見つかれば ``True`` 、そうでなければ ``False`` を返します。\n"
"このメソッドは、'propagate' 属性が偽に設定されたロガーを見つけると、さらに上位の探索をやめます - そのロガーが、ハンドラが存在するかどうかチェックされる最後のロガー、という意味です。"

#: ../../library/logging.rst:353
msgid "Loggers can now be pickled and unpickled."
msgstr "ロガーの pickle 化と unpickle 化ができるようになりました。"

#: ../../library/logging.rst:359
msgid "Logging Levels"
msgstr "ロギングレベル"

#: ../../library/logging.rst:361
msgid ""
"The numeric values of logging levels are given in the following table. These"
" are primarily of interest if you want to define your own levels, and need "
"them to have specific values relative to the predefined levels. If you "
"define a level with the same numeric value, it overwrites the predefined "
"value; the predefined name is lost."
msgstr ""
"ログレベルの数値は以下の表のように与えられています。これらは基本的に自分でレベルを定義したい人のためのもので、定義するレベルを既存のレベルの間に位置づけるためには具体的な値が必要になります。もし数値が他のレベルと同じだったら、既存の値は上書きされその名前は失われます。"

#: ../../library/logging.rst:368
msgid "Level"
msgstr "レベル"

#: ../../library/logging.rst:368
msgid "Numeric value"
msgstr "数値"

#: ../../library/logging.rst:370
msgid "``CRITICAL``"
msgstr "``CRITICAL``"

#: ../../library/logging.rst:370
msgid "50"
msgstr "50"

#: ../../library/logging.rst:372
msgid "``ERROR``"
msgstr "``ERROR``"

#: ../../library/logging.rst:372
msgid "40"
msgstr "40"

#: ../../library/logging.rst:374
msgid "``WARNING``"
msgstr "``WARNING``"

#: ../../library/logging.rst:374
msgid "30"
msgstr "30"

#: ../../library/logging.rst:376
msgid "``INFO``"
msgstr "``INFO``"

#: ../../library/logging.rst:376
msgid "20"
msgstr "20"

#: ../../library/logging.rst:378
msgid "``DEBUG``"
msgstr "``DEBUG``"

#: ../../library/logging.rst:378
msgid "10"
msgstr "10"

#: ../../library/logging.rst:380
msgid "``NOTSET``"
msgstr "``NOTSET``"

#: ../../library/logging.rst:380
msgid "0"
msgstr "0"

#: ../../library/logging.rst:387
msgid "Handler Objects"
msgstr "ハンドラオブジェクト"

#: ../../library/logging.rst:389
msgid ""
"Handlers have the following attributes and methods. Note that "
":class:`Handler` is never instantiated directly; this class acts as a base "
"for more useful subclasses. However, the :meth:`__init__` method in "
"subclasses needs to call :meth:`Handler.__init__`."
msgstr ""
"ハンドラ (Handler) は以下の属性とメソッドを持ちます。 :class:`Handler` は直接インスタンス化されることはありません; "
"このクラスはより便利なサブクラスの基底クラスとして働きます。しかしながら、サブクラスにおける :meth:`__init__` メソッドでは、 "
":meth:`Handler.__init__` を呼び出す必要があります。"

#: ../../library/logging.rst:398
msgid ""
"Initializes the :class:`Handler` instance by setting its level, setting the "
"list of filters to the empty list and creating a lock (using "
":meth:`createLock`) for serializing access to an I/O mechanism."
msgstr ""
"レベルを設定して、 :class:`Handler` インスタンスを初期化します。空のリストを使ってフィルタを設定し、 I/O "
"機構へのアクセスを直列化するために (:meth:`createLock` を使って) ロックを生成します。"

#: ../../library/logging.rst:405
msgid ""
"Initializes a thread lock which can be used to serialize access to "
"underlying I/O functionality which may not be threadsafe."
msgstr ""
"スレッドセーフでない背後の I/O 機能に対するアクセスを直列化するために用いられるスレッドロック (thread lock) を初期化します。"

#: ../../library/logging.rst:411
msgid "Acquires the thread lock created with :meth:`createLock`."
msgstr ":meth:`createLock` で生成されたスレッドロックを獲得します。"

#: ../../library/logging.rst:416
msgid "Releases the thread lock acquired with :meth:`acquire`."
msgstr ":meth:`acquire` で獲得したスレッドロックを解放します。"

#: ../../library/logging.rst:421
msgid ""
"Sets the threshold for this handler to *level*. Logging messages which are "
"less severe than *level* will be ignored. When a handler is created, the "
"level is set to :const:`NOTSET` (which causes all messages to be processed)."
msgstr ""
"このハンドラに対する閾値を *level* に設定します。\n"
"*level* よりも深刻でないログメッセージは無視されます。\n"
"ハンドラが生成された際、レベルは :const:`NOTSET` (すべてのメッセージが処理される) に設定されます。"

#: ../../library/logging.rst:428
msgid ""
"The *level* parameter now accepts a string representation of the level such "
"as 'INFO' as an alternative to the integer constants such as :const:`INFO`."
msgstr ""
"*level* パラメータは、 :const:`INFO` のような整数定数の代わりに 'INFO' "
"のようなレベルの文字列表現も受け付けるようになりました。"

#: ../../library/logging.rst:436
msgid "Sets the :class:`Formatter` for this handler to *fmt*."
msgstr "このハンドラのフォーマッタを *fmt* に設定します。"

#: ../../library/logging.rst:441
msgid "Adds the specified filter *filter* to this handler."
msgstr "指定されたフィルタ *filter* をこのハンドラに追加します。"

#: ../../library/logging.rst:446
msgid "Removes the specified filter *filter* from this handler."
msgstr "指定されたフィルタ *filter* をこのハンドラから除去します。"

#: ../../library/logging.rst:451
msgid ""
"Apply this handler's filters to the record and return ``True`` if the record"
" is to be processed. The filters are consulted in turn, until one of them "
"returns a false value. If none of them return a false value, the record will"
" be emitted. If one returns a false value, the handler will not emit the "
"record."
msgstr ""

#: ../../library/logging.rst:460
msgid ""
"Ensure all logging output has been flushed. This version does nothing and is"
" intended to be implemented by subclasses."
msgstr "すべてのログ出力がフラッシュされるようにします。このクラスのバージョンではなにも行わず、サブクラスで実装するためのものです。"

#: ../../library/logging.rst:466
msgid ""
"Tidy up any resources used by the handler. This version does no output but "
"removes the handler from an internal list of handlers which is closed when "
":func:`shutdown` is called. Subclasses should ensure that this gets called "
"from overridden :meth:`close` methods."
msgstr ""
"ハンドラで使われているすべてのリソースの後始末を行います。このバージョンでは何も出力せず、 :func:`shutdown` "
"が呼ばれたときに閉じられたハンドラを内部リストから削除します。サブクラスではオーバライドされた :meth:`close` "
"メソッドからこのメソッドが必ず呼ばれるようにしてください。"

#: ../../library/logging.rst:474
msgid ""
"Conditionally emits the specified logging record, depending on filters which"
" may have been added to the handler. Wraps the actual emission of the record"
" with acquisition/release of the I/O thread lock."
msgstr ""
"ハンドラに追加されたフィルタの条件に応じて、指定されたログレコードを出力します。このメソッドは I/O "
"スレッドロックの獲得/解放を伴う実際のログ出力をラップします。"

#: ../../library/logging.rst:481
msgid ""
"This method should be called from handlers when an exception is encountered "
"during an :meth:`emit` call. If the module-level attribute "
"``raiseExceptions`` is ``False``, exceptions get silently ignored. This is "
"what is mostly wanted for a logging system - most users will not care about "
"errors in the logging system, they are more interested in application "
"errors. You could, however, replace this with a custom handler if you wish. "
"The specified record is the one which was being processed when the exception"
" occurred. (The default value of ``raiseExceptions`` is ``True``, as that is"
" more useful during development)."
msgstr ""
"このメソッドは :meth:`emit` の呼び出し中に例外に遭遇した際にハンドラから呼び出されます。モジュールレベル属性 "
"``raiseExceptions`` が ``False`` "
"の場合、例外は暗黙のまま無視されます。ほとんどの場合、これがロギングシステムの望ましい動作です - "
"というのは、ほとんどのユーザはロギングシステム自体のエラーは気にせず、むしろアプリケーションのエラーに興味があるからです。しかしながら、望むならこのメソッドを自作のハンドラと置き換えることもできます。"
" *record* には、例外発生時に処理されていたレコードが入ります。 (*raiseExceptions* のデフォルト値は ``True`` "
"です。これは開発中はその方が便利だからです)。"

#: ../../library/logging.rst:494
msgid ""
"Do formatting for a record - if a formatter is set, use it. Otherwise, use "
"the default formatter for the module."
msgstr ""
"レコードに対する書式化を行います - "
"フォーマッタが設定されていれば、それを使います。そうでない場合、モジュールにデフォルト指定されたフォーマッタを使います。"

#: ../../library/logging.rst:500
msgid ""
"Do whatever it takes to actually log the specified logging record. This "
"version is intended to be implemented by subclasses and so raises a "
":exc:`NotImplementedError`."
msgstr ""
"指定されたログ記録レコードを実際にログ記録する際のすべての処理を行います。このメソッドはサブクラスで実装されることを意図しており、そのためこのクラスのバージョンは"
" :exc:`NotImplementedError` を送出します。"

#: ../../library/logging.rst:504
msgid ""
"For a list of handlers included as standard, see :mod:`logging.handlers`."
msgstr "標準として含まれているハンドラについては、 :mod:`logging.handlers` を参照してください。"

#: ../../library/logging.rst:509
msgid "Formatter Objects"
msgstr "フォーマッタオブジェクト"

#: ../../library/logging.rst:513
msgid ""
":class:`Formatter` objects have the following attributes and methods. They "
"are responsible for converting a :class:`LogRecord` to (usually) a string "
"which can be interpreted by either a human or an external system. The base "
":class:`Formatter` allows a formatting string to be specified. If none is "
"supplied, the default value of ``'%(message)s'`` is used, which just "
"includes the message in the logging call. To have additional items of "
"information in the formatted output (such as a timestamp), keep reading."
msgstr ""
":class:`Formatter` オブジェクトは以下の属性とメソッドを持っています。 :class:`Formatter` は "
":class:`LogRecord` を (通常は) 人間か外部のシステムで解釈できる文字列に変換する役割を担っています。基底クラスの "
":class:`Formatter` では書式文字列を指定することができます。何も指定されなかった場合、ロギングコール中のメッセージ以外の情報だけを持つ"
" ``'%(message)s'`` の値が使われます。フォーマットされた出力に情報の要素 (タイムスタンプなど) "
"を追加したいなら、このまま読み進めてください。"

#: ../../library/logging.rst:521
msgid ""
"A Formatter can be initialized with a format string which makes use of "
"knowledge of the :class:`LogRecord` attributes - such as the default value "
"mentioned above making use of the fact that the user's message and arguments"
" are pre-formatted into a :class:`LogRecord`'s *message* attribute.  This "
"format string contains standard Python %-style mapping keys. See section "
":ref:`old-string-formatting` for more information on string formatting."
msgstr ""
"Formatter は :class:`LogRecord` "
"属性の知識を利用できるような書式文字列を用いて初期化することができます。例えば、上で言及したデフォルト値では、ユーザによるメッセージと引数はあらかじめフォーマットされて、"
" :class:`LogRecord` の *message* 属性に入っていることを利用しています。この書式文字列は、 Python 標準の % "
"を使った変換文字列で構成されます。文字列整形に関する詳細は :ref:`old-string-formatting` を参照してください。"

#: ../../library/logging.rst:528
msgid ""
"The useful mapping keys in a :class:`LogRecord` are given in the section on "
":ref:`logrecord-attributes`."
msgstr ""
":class:`LogRecord` の便利なマッピングキーは、 :ref:`logrecord-attributes` の節で与えられます。"

#: ../../library/logging.rst:534
msgid ""
"Returns a new instance of the :class:`Formatter` class.  The instance is "
"initialized with a format string for the message as a whole, as well as a "
"format string for the date/time portion of a message.  If no *fmt* is "
"specified, ``'%(message)s'`` is used.  If no *datefmt* is specified, a "
"format is used which is described in the :meth:`formatTime` documentation."
msgstr ""
":class:`Formatter` "
"クラスの新たなインスタンスを返します。インスタンスは全体としてのメッセージに対する書式文字列と、メッセージの日付/時刻部分のための書式文字列を伴って初期化されます。"
" *fmt* が指定されない場合、 ``'%(message)s'`` が使われます。 *datefmt* が指定されない場合、 "
":meth:`formatTime` ドキュメントで解説されている書式が使われます。"

#: ../../library/logging.rst:540
msgid ""
"The *style* parameter can be one of '%', '{' or '$' and determines how the "
"format string will be merged with its data: using one of %-formatting, "
":meth:`str.format` or :class:`string.Template`. See :ref:`formatting-styles`"
" for more information on using {- and $-formatting for log messages."
msgstr ""
"*style* パラメータは '%',  '{', '$' のうちのいずれかで、書式文字列がどのようにデータとマージされるかを決めます: "
"%-format 、 :meth:`str.format` 、 :class:`string.Template` "
"のうちのどれかが使用されます。ログメッセージに使用する { および $ 形式のフォーマットの情報は :ref:`formatting-styles` "
"を参照してください。"

#: ../../library/logging.rst:545
msgid "The *style* parameter was added."
msgstr "*style* パラメータが追加されました。"

#: ../../library/logging.rst:548
msgid ""
"The *validate* parameter was added. Incorrect or mismatched style and fmt "
"will raise a ``ValueError``. For example: ``logging.Formatter('%(asctime)s -"
" %(message)s', style='{')``."
msgstr ""

#: ../../library/logging.rst:555
msgid ""
"The record's attribute dictionary is used as the operand to a string "
"formatting operation. Returns the resulting string. Before formatting the "
"dictionary, a couple of preparatory steps are carried out. The *message* "
"attribute of the record is computed using *msg* % *args*. If the formatting "
"string contains ``'(asctime)'``, :meth:`formatTime` is called to format the "
"event time. If there is exception information, it is formatted using "
":meth:`formatException` and appended to the message. Note that the formatted"
" exception information is cached in attribute *exc_text*. This is useful "
"because the exception information can be pickled and sent across the wire, "
"but you should be careful if you have more than one :class:`Formatter` "
"subclass which customizes the formatting of exception information. In this "
"case, you will have to clear the cached value after a formatter has done its"
" formatting, so that the next formatter to handle the event doesn't use the "
"cached value but recalculates it afresh."
msgstr ""
"レコードの属性辞書が、文字列を書式化する演算で被演算子として使われます。書式化された結果の文字列を返します。辞書を書式化する前に、二つの準備段階を経ます。レコードの"
" *message* 属性が *msg* % *args* を使って処理されます。書式化された文字列が ``'(asctime)'`` を含むなら、 "
":meth:`formatTime` が呼び出され、イベントの発生時刻を書式化します。例外情報が存在する場合、 "
":meth:`formatException` を使って書式化され、メッセージに追加されます。ここで注意していただきたいのは、書式化された例外情報は "
"*exc_text* にキャッシュされるという点です。これが有用なのは例外情報がピックル化されて回線上を送ることができるからですが、しかし二つ以上の "
":class:`Formatter` "
"サブクラスで例外情報の書式化をカスタマイズしている場合には注意が必要になります。この場合、フォーマッタが書式化を終えるごとにキャッシュをクリアして、次のフォーマッタがキャッシュされた値を使わずに新鮮な状態で再計算するようにしなければならないことになります。"

#: ../../library/logging.rst:571
msgid ""
"If stack information is available, it's appended after the exception "
"information, using :meth:`formatStack` to transform it if necessary."
msgstr ""
"スタック情報が利用可能な場合、(必要ならば :meth:`formatStack` を使って整形した上で) スタック情報が例外情報の後に追加されます。"

#: ../../library/logging.rst:577
msgid ""
"This method should be called from :meth:`format` by a formatter which wants "
"to make use of a formatted time. This method can be overridden in formatters"
" to provide for any specific requirement, but the basic behavior is as "
"follows: if *datefmt* (a string) is specified, it is used with "
":func:`time.strftime` to format the creation time of the record. Otherwise, "
"the format '%Y-%m-%d %H:%M:%S,uuu' is used, where the uuu part is a "
"millisecond value and the other letters are as per the :func:`time.strftime`"
" documentation.  An example time in this format is ``2003-01-23 "
"00:29:50,411``.  The resulting string is returned."
msgstr ""
"このメソッドは、フォーマッタが書式化された時間を利用したい際に、 :meth:`format` から呼び出されます。\n"
"このメソッドは特定の要求を提供するためにフォーマッタで上書きすることができますが、基本的な振る舞いは以下のようになります: *datefmt* (文字列) が指定された場合、レコードが生成された時刻を書式化するために :func:`time.strftime` で使われます。\n"
"そうでない場合、 '%Y-%m-%d %H:%M:%S,uuu' というフォーマットが使われます。 uuu 部分はミリ秒値で、それ以外の文字は :func:`time.strftime` ドキュメントに従います。\n"
"このフォーマットの時刻の例は ``2003-01-23 00:29:50,411`` です。\n"
"結果の文字列が返されます。"

#: ../../library/logging.rst:587
msgid ""
"This function uses a user-configurable function to convert the creation time"
" to a tuple. By default, :func:`time.localtime` is used; to change this for "
"a particular formatter instance, set the ``converter`` attribute to a "
"function with the same signature as :func:`time.localtime` or "
":func:`time.gmtime`. To change it for all formatters, for example if you "
"want all logging times to be shown in GMT, set the ``converter`` attribute "
"in the ``Formatter`` class."
msgstr ""
"この関数は、ユーザが設定できる関数を使って、生成時刻をタプルに変換します。デフォルトでは、 :func:`time.localtime` "
"が使われます。特定のフォーマッタインスタンスに対してこれを変更するには、 ``converter`` 属性を "
":func:`time.localtime` や :func:`time.gmtime` "
"と同じ署名をもつ関数に設定してください。すべてのフォーマッタインスタンスに対してこれを変更するには、例えば全てのロギング時刻を GMT で表示するには、"
" ``Formatter`` クラスの ``converter`` 属性を設定してください。"

#: ../../library/logging.rst:595
msgid ""
"Previously, the default format was hard-coded as in this example: "
"``2010-09-06 22:38:15,292`` where the part before the comma is handled by a "
"strptime format string (``'%Y-%m-%d %H:%M:%S'``), and the part after the "
"comma is a millisecond value. Because strptime does not have a format "
"placeholder for milliseconds, the millisecond value is appended using "
"another format string, ``'%s,%03d'`` --- and both of these format strings "
"have been hardcoded into this method. With the change, these strings are "
"defined as class-level attributes which can be overridden at the instance "
"level when desired. The names of the attributes are ``default_time_format`` "
"(for the strptime format string) and ``default_msec_format`` (for appending "
"the millisecond value)."
msgstr ""
"以前は、デフォルトのフォーマットがこの例のようにハードコーディングされていました: ``2010-09-06 22:38:15,292`` "
"ここで、コンマの前の部分は strptime フォーマット文字列 (``'%Y-%m-%d %H:%M:%S'``) "
"によって扱われる部分で、コンマの後の部分はミリ秒値です。strptime "
"にミリ秒のフォーマットプレースホルダーがないので、ミリ秒値は別のフォーマット文字列 ``'%s,%03d'`` "
"を使用して追加されます。そして、これらのフォーマット文字列は両方ともこのメソッドでハードコーディングされていました。変更後は、これらの文字列はクラスレベル属性として定義され、必要ならインスタンスレベルでオーバーライドすることができます。属性の名前は"
" ``default_time_format`` (strptime 書式文字列用) と ``default_msec_format`` "
"(ミリ秒値の追加用) です。"

#: ../../library/logging.rst:610
msgid ""
"Formats the specified exception information (a standard exception tuple as "
"returned by :func:`sys.exc_info`) as a string. This default implementation "
"just uses :func:`traceback.print_exception`. The resulting string is "
"returned."
msgstr ""
"指定された例外情報 (:func:`sys.exc_info` が返すような標準例外のタプル) を文字列として書式化します。デフォルトの実装は単に "
":func:`traceback.print_exception` を使います。結果の文字列が返されます。"

#: ../../library/logging.rst:617
msgid ""
"Formats the specified stack information (a string as returned by "
":func:`traceback.print_stack`, but with the last newline removed) as a "
"string. This default implementation just returns the input value."
msgstr ""
"指定されたスタック情報を文字列としてフォーマットします (:func:`traceback.print_stack` "
"によって返される文字列ですが、最後の改行が取り除かれています)。このデフォルト実装は、単に入力値をそのまま返します。"

#: ../../library/logging.rst:624
msgid "Filter Objects"
msgstr "フィルタオブジェクト"

#: ../../library/logging.rst:626
msgid ""
"``Filters`` can be used by ``Handlers`` and ``Loggers`` for more "
"sophisticated filtering than is provided by levels. The base filter class "
"only allows events which are below a certain point in the logger hierarchy. "
"For example, a filter initialized with 'A.B' will allow events logged by "
"loggers 'A.B', 'A.B.C', 'A.B.C.D', 'A.B.D' etc. but not 'A.BB', 'B.A.B' etc."
" If initialized with the empty string, all events are passed."
msgstr ""
"``フィルタ (Filter)`` は、``ハンドラ`` や ``ロガー`` "
"によって使われ、レベルによって提供されるのよりも洗練されたフィルタリングを実現します。基底のフィルタクラスは、ロガー階層構造内の特定地点の配下にあるイベントだけを許可します。例えば、'A.B'"
" で初期化されたフィルタは、ロガー 'A.B', 'A.B.C', 'A.B.C.D', 'A.B.D' "
"等によって記録されたイベントは許可しますが、'A.BB', 'B.A.B' "
"などは許可しません。空の文字列で初期化された場合、すべてのイベントを通過させます。"

#: ../../library/logging.rst:636
msgid ""
"Returns an instance of the :class:`Filter` class. If *name* is specified, it"
" names a logger which, together with its children, will have its events "
"allowed through the filter. If *name* is the empty string, allows every "
"event."
msgstr ""
":class:`Filter` クラスのインスタンスを返します。 *name* が指定されていれば、 *name* "
"はロガーの名前を表します。指定されたロガーとその子ロガーのイベントがフィルタを通過できるようになります。 *name* "
"が指定されなければ、すべてのイベントを通過させます。"

#: ../../library/logging.rst:643
msgid ""
"Is the specified record to be logged? Returns zero for no, nonzero for yes. "
"If deemed appropriate, the record may be modified in-place by this method."
msgstr ""
"指定されたレコードがログされるべきか？no ならばばゼロを、yes "
"ならばゼロでない値を返します。適切と判断されれば、このメソッドによってレコードはその場で修正されることがあります。"

#: ../../library/logging.rst:647
msgid ""
"Note that filters attached to handlers are consulted before an event is "
"emitted by the handler, whereas filters attached to loggers are consulted "
"whenever an event is logged (using :meth:`debug`, :meth:`info`, etc.), "
"before sending an event to handlers. This means that events which have been "
"generated by descendant loggers will not be filtered by a logger's filter "
"setting, unless the filter has also been applied to those descendant "
"loggers."
msgstr ""
"ハンドラに対するフィルタはハンドラがイベントを発行する前に試され、一方ではロガーに対するフィルタは、イベントが(:meth:`debug`, "
":meth:`info` "
"などによって)ロギングされる際には、ハンドラにイベントが送信される前にはいつでも試されることに注意してください。そのフィルタがそれら子孫ロガーにも適用されていない限り、子孫ロガーによって生成されたイベントはロガーのフィルタ設定によってフィルタされることはありません。"

#: ../../library/logging.rst:654
msgid ""
"You don't actually need to subclass ``Filter``: you can pass any instance "
"which has a ``filter`` method with the same semantics."
msgstr ""
"実際には、``Filter`` をサブクラス化する必要はありません。同じ意味の ``filter`` メソッドを持つ、すべてのインスタンスを通せます。"

#: ../../library/logging.rst:657
msgid ""
"You don't need to create specialized ``Filter`` classes, or use other "
"classes with a ``filter`` method: you can use a function (or other callable)"
" as a filter. The filtering logic will check to see if the filter object has"
" a ``filter`` attribute: if it does, it's assumed to be a ``Filter`` and its"
" :meth:`~Filter.filter` method is called. Otherwise, it's assumed to be a "
"callable and called with the record as the single parameter. The returned "
"value should conform to that returned by :meth:`~Filter.filter`."
msgstr ""
"特殊な ``Filter`` クラスを作ったり、 ``filter`` メソッドを持つ他のクラスを使う必要はありません: 関数 (あるいは他の "
"callable) をフィルタとして使用することができます。フィルタロジックは、フィルタオブジェクトが ``filter`` "
"属性を持っているかどうかチェックします: もし ``filter`` 属性を持っていたら、それは ``Filter`` であると仮定され、その "
":meth:`~Filter.filter` メソッドが呼び出されます。そうでなければ、それは callable "
"であると仮定され、レコードを単一のパラメータとして呼び出されます。返される値は :meth:`~Filter.filter` "
"によって返されるものと一致すべきです。"

#: ../../library/logging.rst:667
msgid ""
"Although filters are used primarily to filter records based on more "
"sophisticated criteria than levels, they get to see every record which is "
"processed by the handler or logger they're attached to: this can be useful "
"if you want to do things like counting how many records were processed by a "
"particular logger or handler, or adding, changing or removing attributes in "
"the :class:`LogRecord` being processed. Obviously changing the LogRecord "
"needs to be done with some care, but it does allow the injection of "
"contextual information into logs (see :ref:`filters-contextual`)."
msgstr ""

#: ../../library/logging.rst:679
msgid "LogRecord Objects"
msgstr "LogRecord オブジェクト"

#: ../../library/logging.rst:681
msgid ""
":class:`LogRecord` instances are created automatically by the "
":class:`Logger` every time something is logged, and can be created manually "
"via :func:`makeLogRecord` (for example, from a pickled event received over "
"the wire)."
msgstr ""
":class:`LogRecord` インスタンスは、何かをログ記録するたびに :class:`Logger` によって生成されます。また、 "
":func:`makeLogRecord` を通して (例えば、ワイヤを通して受け取られた pickle 化されたイベントから) "
"手動で生成することも出来ます。"

#: ../../library/logging.rst:689
msgid "Contains all the information pertinent to the event being logged."
msgstr "ロギングされているイベントに適切なすべての情報を含みます。"

#: ../../library/logging.rst:691
msgid ""
"The primary information is passed in :attr:`msg` and :attr:`args`, which are"
" combined using ``msg % args`` to create the :attr:`message` field of the "
"record."
msgstr ""
"基本的な情報は :attr:`msg` と :attr:`args` に渡され、レコードの :attr:`message` フィールドは ``msg %"
" args`` による結合で生成されます。"

#: ../../library/logging.rst:0 ../../library/logging.rst:0
msgid "Parameters"
msgstr "パラメーター"

#: ../../library/logging.rst:695
msgid ""
"The name of the logger used to log the event represented by this LogRecord. "
"Note that this name will always have this value, even though it may be "
"emitted by a handler attached to a different (ancestor) logger."
msgstr ""
"この LogRecord "
"で表されるイベントをロギングするのに使われるロガーの名前です。ここで与える名前が、たとえ他の(祖先の)ロガーに結び付けられたハンドラによって発せられるとしても、与えたこの値のままであることに注意してください。"

#: ../../library/logging.rst:699
msgid ""
"The numeric level of the logging event (one of DEBUG, INFO etc.) Note that "
"this is converted to *two* attributes of the LogRecord: ``levelno`` for the "
"numeric value and ``levelname`` for the corresponding level name."
msgstr ""
"このロギングイベントの数値のレベル (DEBUG, INFO などのいずれか) です。なお、これは LogRecord の *2つの* "
"属性に変換されます。数値 ``levelno`` と、対応するレベル名 ``levelname`` です。"

#: ../../library/logging.rst:703
msgid "The full pathname of the source file where the logging call was made."
msgstr "ロギングの呼び出しが発せられたファイルの完全なパス名。"

#: ../../library/logging.rst:705
msgid "The line number in the source file where the logging call was made."
msgstr "ロギングの呼び出しが発せられたソース行番号。"

#: ../../library/logging.rst:707
msgid ""
"The event description message, possibly a format string with placeholders "
"for variable data."
msgstr "イベント記述メッセージで、これは変数データのプレースホルダを持つフォーマット文字列になり得ます。"

#: ../../library/logging.rst:709
msgid ""
"Variable data to merge into the *msg* argument to obtain the event "
"description."
msgstr "*msg* 引数と組み合わせてイベント記述を得るための変数データです。"

#: ../../library/logging.rst:711
msgid ""
"An exception tuple with the current exception information, or ``None`` if no"
" exception information is available."
msgstr "現在の例外情報を含む例外タプルか、利用できる例外情報がない場合は ``None`` です。"

#: ../../library/logging.rst:713
msgid ""
"The name of the function or method from which the logging call was invoked."
msgstr "ロギングの呼び出しを行った関数またはメソッドの名前です。"

#: ../../library/logging.rst:715
msgid ""
"A text string representing stack information from the base of the stack in "
"the current thread, up to the logging call."
msgstr "現在のスレッドのスタックベースからログ呼び出しまでの間のスタック情報を表わすテキスト文字列。"

#: ../../library/logging.rst:720
msgid ""
"Returns the message for this :class:`LogRecord` instance after merging any "
"user-supplied arguments with the message. If the user-supplied message "
"argument to the logging call is not a string, :func:`str` is called on it to"
" convert it to a string. This allows use of user-defined classes as "
"messages, whose ``__str__`` method can return the actual format string to be"
" used."
msgstr ""
"ユーザが提供した引数をメッセージに交ぜた後、この :class:`LogRecord` "
"インスタンスへのメッセージを返します。ユーザがロギングの呼び出しに与えた引数が文字列でなければ、その引数に :func:`str` "
"が呼ばれ、文字列に変換されます。これにより、 ``__str__`` "
"メソッドが実際のフォーマット文字列を返せるようなユーザ定義のクラスをメッセージとして使えます。"

#: ../../library/logging.rst:727
msgid ""
"The creation of a :class:`LogRecord` has been made more configurable by "
"providing a factory which is used to create the record. The factory can be "
"set using :func:`getLogRecordFactory` and :func:`setLogRecordFactory` (see "
"this for the factory's signature)."
msgstr ""

#: ../../library/logging.rst:733
msgid ""
"This functionality can be used to inject your own values into a "
":class:`LogRecord` at creation time. You can use the following pattern::"
msgstr ""

#: ../../library/logging.rst:745
msgid ""
"With this pattern, multiple factories could be chained, and as long as they "
"don't overwrite each other's attributes or unintentionally overwrite the "
"standard attributes listed above, there should be no surprises."
msgstr ""
"このパターンでは複数のファクトリをつなぐこともできます。それらが互いの属性を上書きしたりせず、また上にリストされた標準属性を意図せず上書きしたりしない限り、驚くようなことは何も起こりません"
" (there should be no surprises)。"

#: ../../library/logging.rst:754
msgid "LogRecord attributes"
msgstr "LogRecord 属性"

#: ../../library/logging.rst:756
msgid ""
"The LogRecord has a number of attributes, most of which are derived from the"
" parameters to the constructor. (Note that the names do not always "
"correspond exactly between the LogRecord constructor parameters and the "
"LogRecord attributes.) These attributes can be used to merge data from the "
"record into the format string. The following table lists (in alphabetical "
"order) the attribute names, their meanings and the corresponding placeholder"
" in a %-style format string."
msgstr ""
"LogRecord には幾つかの属性があり、そのほとんどはコンストラクタの引数から得られます。(なお、LogRecord コンストラクタの引数と "
"LogRecord 属性が常に厳密に対応するわけではありません。) "
"これらの属性は、レコードからのデータをフォーマット文字列に統合するのに使えます。以下のテーブルに、属性名、意味、そして % "
"形式フォーマット文字列における対応するプレースホルダを (アルファベット順に) 列挙します。"

#: ../../library/logging.rst:764
msgid ""
"If you are using {}-formatting (:func:`str.format`), you can use "
"``{attrname}`` as the placeholder in the format string. If you are using "
"$-formatting (:class:`string.Template`), use the form ``${attrname}``. In "
"both cases, of course, replace ``attrname`` with the actual attribute name "
"you want to use."
msgstr ""
"{}-フォーマット (:func:`str.format`) を使用していれば、書式文字列の中でプレースホールダーとして ``{attrname}`` "
"を使うことができます。 $-フォーマット (:class:`string.Template`) を使用している場合は、 ``${attrname}`` "
"形式にしてください。もちろん、両方の場合で ``attrname`` は使用したい実際の属性名に置き換えてください。"

#: ../../library/logging.rst:770
msgid ""
"In the case of {}-formatting, you can specify formatting flags by placing "
"them after the attribute name, separated from it with a colon. For example: "
"a placeholder of ``{msecs:03d}`` would format a millisecond value of ``4`` "
"as ``004``. Refer to the :meth:`str.format` documentation for full details "
"on the options available to you."
msgstr ""
"{}-フォーマットの場合には、属性名の後にフォーマットフラグを指定することができます。属性名とフォーマットフラグの間はコロンで分割します。例: "
"プレースホールダー ``{msecs:03d}`` は、ミリセカンド値 ``4`` を ``004`` "
"としてフォーマットします。利用可能なオプション上の全詳細に関しては :meth:`str.format` ドキュメンテーションを参照してください。"

#: ../../library/logging.rst:777
msgid "Attribute name"
msgstr "属性名"

#: ../../library/logging.rst:777 ../../library/logging.rst:1153
msgid "Format"
msgstr "フォーマット"

#: ../../library/logging.rst:777 ../../library/logging.rst:1153
msgid "Description"
msgstr "説明"

#: ../../library/logging.rst:779 ../../library/logging.rst:0
msgid "args"
msgstr "``args``"

#: ../../library/logging.rst:779 ../../library/logging.rst:793
#: ../../library/logging.rst:821 ../../library/logging.rst:839
msgid "You shouldn't need to format this yourself."
msgstr "このフォーマットを自分で使う必要はないでしょう。"

#: ../../library/logging.rst:779
msgid ""
"The tuple of arguments merged into ``msg`` to produce ``message``, or a dict"
" whose values are used for the merge (when there is only one argument, and "
"it is a dictionary)."
msgstr ""
"``msg`` に組み合わせて ``message`` "
"を生成するための引数のタプル、または、マージに用いられる辞書(引数が一つしかなく、かつそれが辞書の場合)。"

#: ../../library/logging.rst:784
msgid "asctime"
msgstr "asctime"

#: ../../library/logging.rst:784
msgid "``%(asctime)s``"
msgstr "``%(asctime)s``"

#: ../../library/logging.rst:784
msgid ""
"Human-readable time when the :class:`LogRecord` was created.  By default "
"this is of the form '2003-07-08 16:49:45,896' (the numbers after the comma "
"are millisecond portion of the time)."
msgstr ""
":class:`LogRecord` が生成された時刻を人間が読める書式で表したもの。デフォルトでは \"2003-07-08 "
"16:49:45,896\" 形式 (コンマ以降の数字は時刻のミリ秒部分) です。"

#: ../../library/logging.rst:790
msgid "created"
msgstr "created"

#: ../../library/logging.rst:790
msgid "``%(created)f``"
msgstr "``%(created)f``"

#: ../../library/logging.rst:790
msgid ""
"Time when the :class:`LogRecord` was created (as returned by "
":func:`time.time`)."
msgstr ":class:`LogRecord` が生成された時刻 (:func:`time.time` によって返される形式で)。"

#: ../../library/logging.rst:793 ../../library/logging.rst:0
msgid "exc_info"
msgstr "exc_info"

#: ../../library/logging.rst:793
msgid ""
"Exception tuple (à la ``sys.exc_info``) or, if no exception has occurred, "
"``None``."
msgstr "(``sys.exc_info`` 風の) 例外タプルか、例外が起こっていない場合は ``None``。"

#: ../../library/logging.rst:796
msgid "filename"
msgstr "ファイル名"

#: ../../library/logging.rst:796
msgid "``%(filename)s``"
msgstr "``%(filename)s``"

#: ../../library/logging.rst:796
msgid "Filename portion of ``pathname``."
msgstr "``pathname`` のファイル名部分。"

#: ../../library/logging.rst:798
msgid "funcName"
msgstr "funcName"

#: ../../library/logging.rst:798
msgid "``%(funcName)s``"
msgstr "``%(funcName)s``"

#: ../../library/logging.rst:798
msgid "Name of function containing the logging call."
msgstr "ロギングの呼び出しを含む関数の名前。"

#: ../../library/logging.rst:800
msgid "levelname"
msgstr "levelname"

#: ../../library/logging.rst:800
msgid "``%(levelname)s``"
msgstr "``%(levelname)s``"

#: ../../library/logging.rst:800
msgid ""
"Text logging level for the message (``'DEBUG'``, ``'INFO'``, ``'WARNING'``, "
"``'ERROR'``, ``'CRITICAL'``)."
msgstr ""
"メッセージのための文字のロギングレベル (``'DEBUG'``, ``'INFO'``, ``'WARNING'``, ``'ERROR'``, "
"``'CRITICAL'``)。"

#: ../../library/logging.rst:804
msgid "levelno"
msgstr "levelno"

#: ../../library/logging.rst:804
msgid "``%(levelno)s``"
msgstr "``%(levelno)s``"

#: ../../library/logging.rst:804
msgid ""
"Numeric logging level for the message (:const:`DEBUG`, :const:`INFO`, "
":const:`WARNING`, :const:`ERROR`, :const:`CRITICAL`)."
msgstr ""
"メッセージのための数値のロギングレベル (:const:`DEBUG`, :const:`INFO`, :const:`WARNING`, "
":const:`ERROR`, :const:`CRITICAL`)。"

#: ../../library/logging.rst:809
msgid "lineno"
msgstr "lineno"

#: ../../library/logging.rst:809
msgid "``%(lineno)d``"
msgstr "``%(lineno)d``"

#: ../../library/logging.rst:809
msgid "Source line number where the logging call was issued (if available)."
msgstr "ロギングの呼び出しが発せられたソース行番号 (利用できる場合のみ)。"

#: ../../library/logging.rst:812
msgid "message"
msgstr "message"

#: ../../library/logging.rst:812
msgid "``%(message)s``"
msgstr "``%(message)s``"

#: ../../library/logging.rst:812
msgid ""
"The logged message, computed as ``msg % args``. This is set when "
":meth:`Formatter.format` is invoked."
msgstr ""
"``msg % args`` として求められた、ログメッセージ。 :meth:`Formatter.format` が呼び出されたときに設定されます。"

#: ../../library/logging.rst:816
msgid "module"
msgstr "module"

#: ../../library/logging.rst:816
msgid "``%(module)s``"
msgstr "``%(module)s``"

#: ../../library/logging.rst:816
msgid "Module (name portion of ``filename``)."
msgstr "モジュール (``filename`` の名前部分)。"

#: ../../library/logging.rst:818
msgid "msecs"
msgstr "msecs"

#: ../../library/logging.rst:818
msgid "``%(msecs)d``"
msgstr "``%(msecs)d``"

#: ../../library/logging.rst:818
msgid ""
"Millisecond portion of the time when the :class:`LogRecord` was created."
msgstr ":class:`LogRecord` が生成された時刻のミリ秒部分。"

#: ../../library/logging.rst:821 ../../library/logging.rst:0
msgid "msg"
msgstr "msg"

#: ../../library/logging.rst:821
msgid ""
"The format string passed in the original logging call. Merged with ``args`` "
"to produce ``message``, or an arbitrary object (see :ref:`arbitrary-object-"
"messages`)."
msgstr ""
"元のロギングの呼び出しで渡されたフォーマット文字列。 ``args`` と合わせて、 ``message`` 、または任意のオブジェクトを生成します "
"(:ref:`arbitrary-object-messages` 参照)。"

#: ../../library/logging.rst:826 ../../library/logging.rst:0
msgid "name"
msgstr "name"

#: ../../library/logging.rst:826
msgid "``%(name)s``"
msgstr "``%(name)s``"

#: ../../library/logging.rst:826
msgid "Name of the logger used to log the call."
msgstr "ロギングに使われたロガーの名前。"

#: ../../library/logging.rst:828
msgid "pathname"
msgstr "pathname"

#: ../../library/logging.rst:828
msgid "``%(pathname)s``"
msgstr "``%(pathname)s``"

#: ../../library/logging.rst:828
msgid ""
"Full pathname of the source file where the logging call was issued (if "
"available)."
msgstr "ロギングの呼び出しが発せられたファイルの完全なパス名 (利用できる場合のみ)。"

#: ../../library/logging.rst:831
msgid "process"
msgstr "process"

#: ../../library/logging.rst:831
msgid "``%(process)d``"
msgstr "``%(process)d``"

#: ../../library/logging.rst:831
msgid "Process ID (if available)."
msgstr "プロセス ID (利用可能な場合のみ)。"

#: ../../library/logging.rst:833
msgid "processName"
msgstr "processName"

#: ../../library/logging.rst:833
msgid "``%(processName)s``"
msgstr "``%(processName)s``"

#: ../../library/logging.rst:833
msgid "Process name (if available)."
msgstr "プロセス名 (利用可能な場合のみ)。"

#: ../../library/logging.rst:835
msgid "relativeCreated"
msgstr "relativeCreated"

#: ../../library/logging.rst:835
msgid "``%(relativeCreated)d``"
msgstr "``%(relativeCreated)d``"

#: ../../library/logging.rst:835
msgid ""
"Time in milliseconds when the LogRecord was created, relative to the time "
"the logging module was loaded."
msgstr "logging モジュールが読み込まれた時刻に対する、LogRecord が生成された時刻を、ミリ秒で表したもの。"

#: ../../library/logging.rst:839
msgid "stack_info"
msgstr "stack_info"

#: ../../library/logging.rst:839
msgid ""
"Stack frame information (where available) from the bottom of the stack in "
"the current thread, up to and including the stack frame of the logging call "
"which resulted in the creation of this record."
msgstr "現在のスレッドでのスタックの底からこのレコードの生成に帰着したログ呼び出しまでのスタックフレーム情報 (利用可能な場合)。"

#: ../../library/logging.rst:845
msgid "thread"
msgstr "thread"

#: ../../library/logging.rst:845
msgid "``%(thread)d``"
msgstr "``%(thread)d``"

#: ../../library/logging.rst:845
msgid "Thread ID (if available)."
msgstr "スレッド ID (利用可能な場合のみ)。"

#: ../../library/logging.rst:847
msgid "threadName"
msgstr "threadName"

#: ../../library/logging.rst:847
msgid "``%(threadName)s``"
msgstr "``%(threadName)s``"

#: ../../library/logging.rst:847
msgid "Thread name (if available)."
msgstr "スレッド名 (利用可能な場合のみ)。"

#: ../../library/logging.rst:850
msgid "*processName* was added."
msgstr "*processName* が追加されました。"

#: ../../library/logging.rst:857
msgid "LoggerAdapter Objects"
msgstr "LoggerAdapter オブジェクト"

#: ../../library/logging.rst:859
msgid ""
":class:`LoggerAdapter` instances are used to conveniently pass contextual "
"information into logging calls. For a usage example, see the section on "
":ref:`adding contextual information to your logging output <context-info>`."
msgstr ""
":class:`LoggerAdapter` インスタンスは文脈情報をログ記録呼び出しに渡すのを簡単にするために使われます。使い方の例は "
":ref:`コンテキスト情報をログ記録出力に付加する <context-info>` を参照してください。"

#: ../../library/logging.rst:865
msgid ""
"Returns an instance of :class:`LoggerAdapter` initialized with an underlying"
" :class:`Logger` instance and a dict-like object."
msgstr ""
"内部で使う :class:`Logger` インスタンスと辞書風 (dict-like) オブジェクトで初期化した "
":class:`LoggerAdapter` のインスタンスを返します。"

#: ../../library/logging.rst:870
msgid ""
"Modifies the message and/or keyword arguments passed to a logging call in "
"order to insert contextual information. This implementation takes the object"
" passed as *extra* to the constructor and adds it to *kwargs* using key "
"'extra'. The return value is a (*msg*, *kwargs*) tuple which has the "
"(possibly modified) versions of the arguments passed in."
msgstr ""
"文脈情報を挿入するために、ログ記録呼び出しに渡されたメッセージおよび/またはキーワード引数に変更を加えます。ここでの実装は *extra* "
"としてコンストラクタに渡されたオブジェクトを取り、'extra' キーを使って *kwargs* に加えます。返り値は (*msg*, "
"*kwargs*) というタプルで、(変更されているはずの) 渡された引数を含みます。"

#: ../../library/logging.rst:876
msgid ""
"In addition to the above, :class:`LoggerAdapter` supports the following "
"methods of :class:`Logger`: :meth:`~Logger.debug`, :meth:`~Logger.info`, "
":meth:`~Logger.warning`, :meth:`~Logger.error`, :meth:`~Logger.exception`, "
":meth:`~Logger.critical`, :meth:`~Logger.log`, :meth:`~Logger.isEnabledFor`,"
" :meth:`~Logger.getEffectiveLevel`, :meth:`~Logger.setLevel` and "
":meth:`~Logger.hasHandlers`. These methods have the same signatures as their"
" counterparts in :class:`Logger`, so you can use the two types of instances "
"interchangeably."
msgstr ""
":class:`LoggerAdapter` は上記に加え :class:`Logger` のメソッド :meth:`~Logger.debug`, "
":meth:`~Logger.info`, :meth:`~Logger.warning`, :meth:`~Logger.error`, "
":meth:`~Logger.exception`, :meth:`~Logger.critical`, :meth:`~Logger.log`, "
":meth:`~Logger.isEnabledFor`, :meth:`~Logger.getEffectiveLevel`, "
":meth:`~Logger.setLevel`, :meth:`~Logger.hasHandlers` をサポートします。これらは "
":class:`Logger` の対応するメソッドと同じシグニチャを持つため、2つのインスタンスは区別せずに利用出来ます。"

#: ../../library/logging.rst:885
msgid ""
"The :meth:`~Logger.isEnabledFor`, :meth:`~Logger.getEffectiveLevel`, "
":meth:`~Logger.setLevel` and :meth:`~Logger.hasHandlers` methods were added "
"to :class:`LoggerAdapter`.  These methods delegate to the underlying logger."
msgstr ""
":meth:`~Logger.isEnabledFor`, :meth:`~Logger.getEffectiveLevel`, "
":meth:`~Logger.setLevel`, :meth:`~Logger.hasHandlers` が "
":class:`LoggerAdapter` に追加されました。これらメソッドは元のロガーに処理を委譲します。"

#: ../../library/logging.rst:892
msgid "Thread Safety"
msgstr "スレッドセーフ性"

#: ../../library/logging.rst:894
msgid ""
"The logging module is intended to be thread-safe without any special work "
"needing to be done by its clients. It achieves this though using threading "
"locks; there is one lock to serialize access to the module's shared data, "
"and each handler also creates a lock to serialize access to its underlying "
"I/O."
msgstr ""
"logging "
"モジュールは、クライアントで特殊な作業を必要としない限りスレッドセーフになっています。このスレッドセーフ性はスレッドロックによって達成されています; "
"モジュールの共有データへのアクセスを直列化するためのロックが一つ存在し、各ハンドラでも背後にある I/O "
"へのアクセスを直列化するためにロックを生成します。"

#: ../../library/logging.rst:899
msgid ""
"If you are implementing asynchronous signal handlers using the :mod:`signal`"
" module, you may not be able to use logging from within such handlers. This "
"is because lock implementations in the :mod:`threading` module are not "
"always re-entrant, and so cannot be invoked from such signal handlers."
msgstr ""
":mod:`signal` "
"モジュールを使用して非同期シグナルハンドラを実装している場合、そのようなハンドラからはログ記録を使用できないかもしれません。これは、 "
":mod:`threading` "
"モジュールにおけるロック実装が常にリエントラントではなく、そのようなシグナルハンドラから呼び出すことができないからです。"

#: ../../library/logging.rst:906
msgid "Module-Level Functions"
msgstr "モジュールレベルの関数"

#: ../../library/logging.rst:908
msgid ""
"In addition to the classes described above, there are a number of module-"
"level functions."
msgstr "上で述べたクラスに加えて、いくつかのモジュールレベルの関数が存在します。"

#: ../../library/logging.rst:914
msgid ""
"Return a logger with the specified name or, if name is ``None``, return a "
"logger which is the root logger of the hierarchy. If specified, the name is "
"typically a dot-separated hierarchical name like *'a'*, *'a.b'* or "
"*'a.b.c.d'*. Choice of these names is entirely up to the developer who is "
"using logging."
msgstr ""
"指定された名前のロガーを返します。名前が ``None`` であれば、ロガー階層のルート (root) にあるロガーを返します。*name* "
"を指定する場合には、通常は *'a'*, *'a.b'*, *'a.b.c.d'* "
"といったドット区切りの階層的な名前にします。名前の付け方はログ機能を使う開発者次第です。"

#: ../../library/logging.rst:919
msgid ""
"All calls to this function with a given name return the same logger "
"instance. This means that logger instances never need to be passed between "
"different parts of an application."
msgstr ""
"与えられた名前に対して、この関数はどの呼び出しでも同じロガーインスタンスを返します。したがって、ロガーインスタンスをアプリケーションの各部でやりとりする必要はありません。"

#: ../../library/logging.rst:926
msgid ""
"Return either the standard :class:`Logger` class, or the last class passed "
"to :func:`setLoggerClass`. This function may be called from within a new "
"class definition, to ensure that installing a customized :class:`Logger` "
"class will not undo customizations already applied by other code. For "
"example::"
msgstr ""
"標準の :class:`Logger` クラスか、最後に :func:`setLoggerClass` "
"に渡したクラスを返します。この関数は、新たなクラス定義の中で呼び出して、カスタマイズした :class:`Logger` "
"クラスのインストールが既に他のコードで適用したカスタマイズを取り消さないことを保証するために使われることがあります。例えば以下のようにします::"

#: ../../library/logging.rst:937
msgid "Return a callable which is used to create a :class:`LogRecord`."
msgstr ":class:`LogRecord` を生成するのに使われる callable を返します。"

#: ../../library/logging.rst:939
msgid ""
"This function has been provided, along with :func:`setLogRecordFactory`, to "
"allow developers more control over how the :class:`LogRecord` representing a"
" logging event is constructed."
msgstr ""
"この関数は、ログイベントを表現する :class:`LogRecord` の構築方法に関して開発者により多くのコントロールを与えるため、 "
":func:`setLogRecordFactory` とともに提供されました。"

#: ../../library/logging.rst:944
msgid ""
"See :func:`setLogRecordFactory` for more information about the how the "
"factory is called."
msgstr "このファクトリがどのように呼ばれるかに関する詳細は :func:`setLogRecordFactory` を参照してください。"

#: ../../library/logging.rst:949
msgid ""
"Logs a message with level :const:`DEBUG` on the root logger. The *msg* is "
"the message format string, and the *args* are the arguments which are merged"
" into *msg* using the string formatting operator. (Note that this means that"
" you can use keywords in the format string, together with a single "
"dictionary argument.)"
msgstr ""
"レベル :const:`DEBUG` のメッセージをルートロガーで記録します。 *msg* はメッセージの書式文字列で、 *args* は *msg* "
"に文字列書式化演算子を使って取り込むための引数です。 "
"(これは、書式文字列の中でキーワードを使い、引数として単一の辞書を渡すことができる、ということを意味します。)"

#: ../../library/logging.rst:954
msgid ""
"There are three keyword arguments in *kwargs* which are inspected: "
"*exc_info* which, if it does not evaluate as false, causes exception "
"information to be added to the logging message. If an exception tuple (in "
"the format returned by :func:`sys.exc_info`) or an exception instance is "
"provided, it is used; otherwise, :func:`sys.exc_info` is called to get the "
"exception information."
msgstr ""
"キーワード引数 *kwargs* からは 3 つのキーワードが調べられます。一つ目は *exc_info* で、この値の評価値が false "
"でない場合、例外情報をログメッセージに追加します。 (:func:`sys.exc_info` の返す形式の) "
"例外情報を表すタプルや例外インスタンスが与えられていれば、それをメッセージに使います。それ以外の場合には、 :func:`sys.exc_info` "
"を呼び出して例外情報を取得します。"

#: ../../library/logging.rst:980
msgid ""
"The third optional keyword argument is *extra* which can be used to pass a "
"dictionary which is used to populate the __dict__ of the LogRecord created "
"for the logging event with user-defined attributes. These custom attributes "
"can then be used as you like. For example, they could be incorporated into "
"logged messages. For example::"
msgstr ""
"3番目のキーワード引数は *extra* で、当該ログイベント用に作られる LogRecoed の __dict__ "
"にユーザー定義属性を加えるのに使われる辞書を渡すために用いられます。これらの属性は好きなように使えます。たとえば、ログメッセージの一部にすることもできます。以下の例を見てください::"

#: ../../library/logging.rst:991
msgid "would print something like:"
msgstr "これは以下のような出力を行います:"

#: ../../library/logging.rst:1001
msgid ""
"If you choose to use these attributes in logged messages, you need to "
"exercise some care. In the above example, for instance, the "
":class:`Formatter` has been set up with a format string which expects "
"'clientip' and 'user' in the attribute dictionary of the LogRecord. If these"
" are missing, the message will not be logged because a string formatting "
"exception will occur. So in this case, you always need to pass the *extra* "
"dictionary with these keys."
msgstr ""
"これらの属性をログメッセージに使うことにしたなら、少し注意が必要です。上の例では、 'clientip' と 'user' が LogRecord "
"の属性辞書に含まれていることを期待した書式文字列で :class:`Formatter` "
"がセットアップされています。もしこれらが欠けていると、書式化例外が発生してしまうためメッセージはログに残りません。したがってこの場合、常にこれらのキーを含む"
" *extra* 辞書を渡す必要があります。"

#: ../../library/logging.rst:1020
msgid ""
"Logs a message with level :const:`INFO` on the root logger. The arguments "
"are interpreted as for :func:`debug`."
msgstr "レベル :const:`INFO` のメッセージをルートロガーで記録します。引数は :func:`debug` と同じように解釈されます。"

#: ../../library/logging.rst:1026
msgid ""
"Logs a message with level :const:`WARNING` on the root logger. The arguments"
" are interpreted as for :func:`debug`."
msgstr ""
"レベル :const:`WARNING` のメッセージをルートロガーで記録します。引数は :func:`debug` と同じように解釈されます。"

#: ../../library/logging.rst:1029
msgid ""
"There is an obsolete function ``warn`` which is functionally identical to "
"``warning``. As ``warn`` is deprecated, please do not use it - use "
"``warning`` instead."
msgstr ""
"``warning`` と機能的に等価な古い関数 ``warn`` があります。``warn`` は廃止予定なので使わないでください - 代わりに "
"``warning`` を使ってください。"

#: ../../library/logging.rst:1036
msgid ""
"Logs a message with level :const:`ERROR` on the root logger. The arguments "
"are interpreted as for :func:`debug`."
msgstr ""
"レベル :const:`ERROR` のメッセージをルートロガーで記録します。引数は :func:`debug` と同じように解釈されます。"

#: ../../library/logging.rst:1042
msgid ""
"Logs a message with level :const:`CRITICAL` on the root logger. The "
"arguments are interpreted as for :func:`debug`."
msgstr ""
"レベル :const:`CRITICAL` のメッセージをルートロガーで記録します。引数は :func:`debug` と同じように解釈されます。"

#: ../../library/logging.rst:1048
msgid ""
"Logs a message with level :const:`ERROR` on the root logger. The arguments "
"are interpreted as for :func:`debug`. Exception info is added to the logging"
" message. This function should only be called from an exception handler."
msgstr ""
"レベル :const:`ERROR` のメッセージをルートロガーで記録します。引数は :func:`debug` "
"と同じように解釈されます。例外情報がログメッセージに追加されます。このメソッドは例外ハンドラからのみ呼び出されます。"

#: ../../library/logging.rst:1054
msgid ""
"Logs a message with level *level* on the root logger. The other arguments "
"are interpreted as for :func:`debug`."
msgstr "レベル *level* のメッセージをルートロガーで記録します。その他の引数は :func:`debug` と同じように解釈されます。"

#: ../../library/logging.rst:1057
msgid ""
"The above module-level convenience functions, which delegate to the root "
"logger, call :func:`basicConfig` to ensure that at least one handler is "
"available. Because of this, they should *not* be used in threads, in "
"versions of Python earlier than 2.7.1 and 3.2, unless at least one handler "
"has been added to the root logger *before* the threads are started. In "
"earlier versions of Python, due to a thread safety shortcoming in "
":func:`basicConfig`, this can (under rare circumstances) lead to handlers "
"being added multiple times to the root logger, which can in turn lead to "
"multiple messages for the same event."
msgstr ""
"上述の便利なルートロガーに処理を委譲するモジュールレベル関数は :func:`basicConfig` を呼び出して、少なくとも 1 "
"つのハンドラが利用できることを保証します。これにより Python の 2.7.1 以前や 3.2 以前のバージョンでは、スレッドが開始される *前に*"
" 少なくともひとつのハンドラがルートロガーに加えられるのでない限り、スレッド内で使うべき *ではありません* 。以前のバージョンの Python では、"
" :func:`basicConfig` "
"のスレッドセーフ性の欠陥により、(珍しい状況下とはいえ)ハンドラがルートロガーに複数回加えられることがあり、ログ内のメッセージが重複するという予期しない結果をもたらすことがあります。"

#: ../../library/logging.rst:1069
msgid ""
"Provides an overriding level *level* for all loggers which takes precedence "
"over the logger's own level. When the need arises to temporarily throttle "
"logging output down across the whole application, this function can be "
"useful. Its effect is to disable all logging calls of severity *level* and "
"below, so that if you call it with a value of INFO, then all INFO and DEBUG "
"events would be discarded, whereas those of severity WARNING and above would"
" be processed according to the logger's effective level. If "
"``logging.disable(logging.NOTSET)`` is called, it effectively removes this "
"overriding level, so that logging output again depends on the effective "
"levels of individual loggers."
msgstr ""

#: ../../library/logging.rst:1080
msgid ""
"Note that if you have defined any custom logging level higher than "
"``CRITICAL`` (this is not recommended), you won't be able to rely on the "
"default value for the *level* parameter, but will have to explicitly supply "
"a suitable value."
msgstr ""

#: ../../library/logging.rst:1085
msgid ""
"The *level* parameter was defaulted to level ``CRITICAL``. See Issue #28524 "
"for more information about this change."
msgstr ""

#: ../../library/logging.rst:1091
msgid ""
"Associates level *level* with text *levelName* in an internal dictionary, "
"which is used to map numeric levels to a textual representation, for example"
" when a :class:`Formatter` formats a message. This function can also be used"
" to define your own levels. The only constraints are that all levels used "
"must be registered using this function, levels should be positive integers "
"and they should increase in increasing order of severity."
msgstr ""

#: ../../library/logging.rst:1098
msgid ""
"If you are thinking of defining your own levels, please see the section on "
":ref:`custom-levels`."
msgstr "独自のレベルを定義したい場合、 :ref:`custom-levels` のセクションを参照してください。"

#: ../../library/logging.rst:1103
msgid ""
"Returns the textual representation of logging level *level*. If the level is"
" one of the predefined levels :const:`CRITICAL`, :const:`ERROR`, "
":const:`WARNING`, :const:`INFO` or :const:`DEBUG` then you get the "
"corresponding string. If you have associated levels with names using "
":func:`addLevelName` then the name you have associated with *level* is "
"returned. If a numeric value corresponding to one of the defined levels is "
"passed in, the corresponding string representation is returned. Otherwise, "
"the string 'Level %s' % level is returned."
msgstr ""

#: ../../library/logging.rst:1111
msgid ""
"Levels are internally integers (as they need to be compared in the logging "
"logic). This function is used to convert between an integer level and the "
"level name displayed in the formatted log output by means of the "
"``%(levelname)s`` format specifier (see :ref:`logrecord-attributes`)."
msgstr ""
"レベルは内部的には整数です(これはロギングのロジックが大小比較をする必要があるからです)。この関数は、数値のレベルを、書式記述子 "
"``%(levelname)s`` (:ref:`logrecord-attributes` "
"参照)によって書式化されるログ出力の表示用レベル名に変換するのに使用されます。"

#: ../../library/logging.rst:1116
msgid ""
"In Python versions earlier than 3.4, this function could also be passed a "
"text level, and would return the corresponding numeric value of the level. "
"This undocumented behaviour was considered a mistake, and was removed in "
"Python 3.4, but reinstated in 3.4.2 due to retain backward compatibility."
msgstr ""
"Python "
"3.4以前のバージョンでは、この関数にはテキストのレベルも渡すことが出来、これは対応する数字レベルに読み替えられていました。このドキュメントされていなかった振る舞いは誤りであると判断され、Python"
" 3.4 で一度削除されました。ただし後方互換性のために、これは 3.4.2 で元に戻されました。"

#: ../../library/logging.rst:1124
msgid ""
"Creates and returns a new :class:`LogRecord` instance whose attributes are "
"defined by *attrdict*. This function is useful for taking a pickled "
":class:`LogRecord` attribute dictionary, sent over a socket, and "
"reconstituting it as a :class:`LogRecord` instance at the receiving end."
msgstr ""
"属性が *attrdict* で定義された、新しい :class:`LogRecord` インスタンスを生成して返します。この関数は、 pickle "
"された :class:`LogRecord` 属性の辞書をソケットを介して送信し、受信端で :class:`LogRecord` "
"インスタンスとして再構成する場合に便利です。"

#: ../../library/logging.rst:1132
msgid ""
"Does basic configuration for the logging system by creating a "
":class:`StreamHandler` with a default :class:`Formatter` and adding it to "
"the root logger. The functions :func:`debug`, :func:`info`, :func:`warning`,"
" :func:`error` and :func:`critical` will call :func:`basicConfig` "
"automatically if no handlers are defined for the root logger."
msgstr ""
"デフォルトの :class:`Formatter` を持つ :class:`StreamHandler` "
"を生成してルートロガーに追加し、ロギングシステムの基本的な環境設定を行います。関数 :func:`debug`, :func:`info`, "
":func:`warning`, :func:`error`, :func:`critical` "
"は、ルートロガーにハンドラが定義されていない場合に自動的に :func:`basicConfig` を呼び出します。"

#: ../../library/logging.rst:1138
msgid ""
"This function does nothing if the root logger already has handlers "
"configured, unless the keyword argument *force* is set to ``True``."
msgstr ""

#: ../../library/logging.rst:1141
msgid ""
"This function should be called from the main thread before other threads are"
" started. In versions of Python prior to 2.7.1 and 3.2, if this function is "
"called from multiple threads, it is possible (in rare circumstances) that a "
"handler will be added to the root logger more than once, leading to "
"unexpected results such as messages being duplicated in the log."
msgstr ""
"この関数は、他のスレッドが開始される前にメインスレッドから呼び出されるべきです。Python の 2.7.1 や 3.2 "
"以前のバージョンでは、この関数が複数のスレッドから呼ばれると(珍しい状況下とはいえ)ハンドラがルートロガーに複数回加えられることがあり、ログ内のメッセージが重複するという予期しない結果をもたらすことがあります。"

#: ../../library/logging.rst:1148
msgid "The following keyword arguments are supported."
msgstr "以下のキーワード引数がサポートされます。"

#: ../../library/logging.rst:1155
msgid "*filename*"
msgstr "*filename*"

#: ../../library/logging.rst:1155
msgid ""
"Specifies that a FileHandler be created, using the specified filename, "
"rather than a StreamHandler."
msgstr "StreamHandler ではなく指定された名前で FileHandler が作られます。"

#: ../../library/logging.rst:1159
msgid "*filemode*"
msgstr "*filemode*"

#: ../../library/logging.rst:1159
msgid ""
"If *filename* is specified, open the file in this :ref:`mode <filemodes>`. "
"Defaults to ``'a'``."
msgstr ""
"*filename* が指定された場合、この :ref:`モード <filemodes>` でファイルが開かれます。\n"
"デフォルトは  ``'a'`` です。"

#: ../../library/logging.rst:1163
msgid "*format*"
msgstr "*format*"

#: ../../library/logging.rst:1163
msgid "Use the specified format string for the handler."
msgstr "指定された書式文字列をハンドラで使います。"

#: ../../library/logging.rst:1166
msgid "*datefmt*"
msgstr "*datefmt*"

#: ../../library/logging.rst:1166
msgid ""
"Use the specified date/time format, as accepted by :func:`time.strftime`."
msgstr "指定された日時の書式で :func:`time.strftime` が受け付けるものを使います。"

#: ../../library/logging.rst:1169
msgid "*style*"
msgstr "*style*"

#: ../../library/logging.rst:1169
msgid ""
"If *format* is specified, use this style for the format string. One of "
"``'%'``, ``'{'`` or ``'$'`` for :ref:`printf-style <old-string-formatting>`,"
" :meth:`str.format` or :class:`string.Template` respectively. Defaults to "
"``'%'``."
msgstr ""
"*format* が指定された場合、書式文字列にこのスタイルを仕様します。\n"
"``'%'``, ``'{'``, ``'$'`` のうち1つで、それぞれ :ref:`printf-style <old-string-formatting>`, :meth:`str.format`, :class:`string.Template` に対応します。\n"
"デフォルトは ``'%'`` です。"

#: ../../library/logging.rst:1177
msgid "*level*"
msgstr "*level*"

#: ../../library/logging.rst:1177
msgid "Set the root logger level to the specified :ref:`level <levels>`."
msgstr "ルートロガーのレベルを指定された :ref:`レベル <levels>` に設定します。"

#: ../../library/logging.rst:1180
msgid "*stream*"
msgstr "*stream*"

#: ../../library/logging.rst:1180
msgid ""
"Use the specified stream to initialize the StreamHandler. Note that this "
"argument is incompatible with *filename* - if both are present, a "
"``ValueError`` is raised."
msgstr ""
"指定されたストリームを StreamHandler の初期化に使います。\n"
"この引数は *filename* と同時には使えないことに注意してください。\n"
"両方が指定されたときには ``ValueError`` が送出されます。"

#: ../../library/logging.rst:1185
msgid "*handlers*"
msgstr "*handlers*"

#: ../../library/logging.rst:1185
msgid ""
"If specified, this should be an iterable of already created handlers to add "
"to the root logger. Any handlers which don't already have a formatter set "
"will be assigned the default formatter created in this function. Note that "
"this argument is incompatible with *filename* or *stream* - if both are "
"present, a ``ValueError`` is raised."
msgstr ""
"もし指定されれば、 これは root "
"ロガーに追加される既に作られたハンドラのイテラブルになります。まだフォーマッタがセットされていないすべてのハンドラは、この関数で作られたデフォルトフォーマッタが割り当てられることになります。この引数は"
" *filename* や *stream* と互換性がないことに注意してください。両方が存在する場合 ``ValueError`` が上げられます。"

#: ../../library/logging.rst:1194
msgid "*force*"
msgstr ""

#: ../../library/logging.rst:1194
msgid ""
"If this keyword argument is specified as true, any existing handlers "
"attached to the root logger are removed and closed, before carrying out the "
"configuration as specified by the other arguments."
msgstr ""

#: ../../library/logging.rst:1201
msgid "The *style* argument was added."
msgstr "*style* 引数が追加されました。"

#: ../../library/logging.rst:1204
msgid ""
"The *handlers* argument was added. Additional checks were added to catch "
"situations where incompatible arguments are specified (e.g. *handlers* "
"together with *stream* or *filename*, or *stream* together with *filename*)."
msgstr ""
"互換性のない引数が指定された状況 (例えば *handlers* が *stream* や *filename* と一緒に指定されたり、*stream*"
" が *filename* と一緒に指定された場合) を捕捉するために、追加のチェックが加えられました。"

#: ../../library/logging.rst:1210
msgid "The *force* argument was added."
msgstr ""

#: ../../library/logging.rst:1215
msgid ""
"Informs the logging system to perform an orderly shutdown by flushing and "
"closing all handlers. This should be called at application exit and no "
"further use of the logging system should be made after this call."
msgstr ""
"ロギングシステムに対して、バッファのフラッシュを行い、すべてのハンドラを閉じることで順次シャットダウンを行うように告知します。この関数はアプリケーションの終了時に呼ばれるべきであり、また呼び出し以降はそれ以上ロギングシステムを使ってはなりません。"

#: ../../library/logging.rst:1219
msgid ""
"When the logging module is imported, it registers this function as an exit "
"handler (see :mod:`atexit`), so normally there's no need to do that "
"manually."
msgstr ""

#: ../../library/logging.rst:1226
msgid ""
"Tells the logging system to use the class *klass* when instantiating a "
"logger. The class should define :meth:`__init__` such that only a name "
"argument is required, and the :meth:`__init__` should call "
":meth:`Logger.__init__`. This function is typically called before any "
"loggers are instantiated by applications which need to use custom logger "
"behavior. After this call, as at any other time, do not instantiate loggers "
"directly using the subclass: continue to use the :func:`logging.getLogger` "
"API to get your loggers."
msgstr ""
"ロギングシステムに対して、ロガーをインスタンス化する際にクラス *klass* を使うように指示します。\n"
"指定するクラスは引数として名前だけをとるようなメソッド :meth:`__init__` を定義していなければならず、 :meth:`__init__` では :meth:`Logger.__init__` を呼び出さなければなりません。\n"
"この関数が呼び出されるのはたいてい、独自の振る舞いをするロガーを使う必要のあるアプリケーションでロガーがインスタンス化される前です。\n"
"呼び出された後は、いつでもそのサブクラスを使ってロガーのインスタンス化をしてはいけません: 引き続き :func:`logging.getLogger` API を使用してロガーを取得してください。"

#: ../../library/logging.rst:1237
msgid "Set a callable which is used to create a :class:`LogRecord`."
msgstr ":class:`LogRecord` を生成するのに使われる callable をセットします。"

#: ../../library/logging.rst:1239
msgid "The factory callable to be used to instantiate a log record."
msgstr "ログレコードを生成するファクトリとして振舞う callable。"

#: ../../library/logging.rst:1241
msgid ""
"This function has been provided, along with :func:`getLogRecordFactory`, to "
"allow developers more control over how the :class:`LogRecord` representing a"
" logging event is constructed."
msgstr ""
"この関数は、ログイベントを表現する :class:`LogRecord` の構築方法に関して開発者により多くのコントロールを与えるため、 "
":func:`getLogRecordFactory` とともに提供されました。"

#: ../../library/logging.rst:1246
msgid "The factory has the following signature:"
msgstr "ファクトリは以下のようなシグネチャを持っています:"

#: ../../library/logging.rst:1248
msgid ""
"``factory(name, level, fn, lno, msg, args, exc_info, func=None, sinfo=None, "
"**kwargs)``"
msgstr ""
"``factory(name, level, fn, lno, msg, args, exc_info, func=None, sinfo=None, "
"**kwargs)``"

#: ../../library/logging.rst:1250
msgid "The logger name."
msgstr "ロガーの名前。"

#: ../../library/logging.rst:0
msgid "level"
msgstr "level"

#: ../../library/logging.rst:1251
msgid "The logging level (numeric)."
msgstr "ログレベル (数値)。"

#: ../../library/logging.rst:0
msgid "fn"
msgstr "fn"

#: ../../library/logging.rst:1252
msgid "The full pathname of the file where the logging call was made."
msgstr "ログ呼び出しが行われたファイルのフルパス名。"

#: ../../library/logging.rst:0
msgid "lno"
msgstr "lno"

#: ../../library/logging.rst:1253
msgid "The line number in the file where the logging call was made."
msgstr "ログ呼び出しが行われたファイルの行数。"

#: ../../library/logging.rst:1254
msgid "The logging message."
msgstr "ログメッセージ。"

#: ../../library/logging.rst:1255
msgid "The arguments for the logging message."
msgstr "ログメッセージに対する引数。"

#: ../../library/logging.rst:1256
msgid "An exception tuple, or ``None``."
msgstr "例外タプルまたは ``None``。"

#: ../../library/logging.rst:0
msgid "func"
msgstr "func"

#: ../../library/logging.rst:1257
msgid "The name of the function or method which invoked the logging call."
msgstr "ログ呼び出しを起動した関数またはメソッドの名前。"

#: ../../library/logging.rst:0
msgid "sinfo"
msgstr "sinfo"

#: ../../library/logging.rst:1259
msgid ""
"A stack traceback such as is provided by :func:`traceback.print_stack`, "
"showing the call hierarchy."
msgstr ":func:`traceback.print_stack` で提供されるような、呼び出し階層を示すスタックトレースバック。"

#: ../../library/logging.rst:0
msgid "kwargs"
msgstr "``kwargs``"

#: ../../library/logging.rst:1261
msgid "Additional keyword arguments."
msgstr "追加のキーワード引数。"

#: ../../library/logging.rst:1265
msgid "Module-Level Attributes"
msgstr "モジュールレベル属性"

#: ../../library/logging.rst:1269
msgid ""
"A \"handler of last resort\" is available through this attribute. This is a "
":class:`StreamHandler` writing to ``sys.stderr`` with a level of "
"``WARNING``, and is used to handle logging events in the absence of any "
"logging configuration. The end result is to just print the message to "
"``sys.stderr``. This replaces the earlier error message saying that \"no "
"handlers could be found for logger XYZ\". If you need the earlier behaviour "
"for some reason, ``lastResort`` can be set to ``None``."
msgstr ""
"「最後の手段のハンドラ」が、この属性で利用可能です。これは :class:`StreamHandler` が ``sys.stderr`` に "
"``WARNING`` "
"レベルで書き出しているのがそうですし、ロギングの設定がなにか不在のロギングイベントを扱う場合に使われます。最終的な結果は、メッセージを単に "
"``sys.stderr`` に出力することです。これはかつて「logger XYZ "
"についてのハンドラが見つかりません」と言っていたエラーメッセージを置き換えています。もしも何らかの理由でその昔の振る舞いが必要な場合は、 "
"``lastResort`` に ``None`` をセットすれば良いです。"

#: ../../library/logging.rst:1280
msgid "Integration with the warnings module"
msgstr "warnings モジュールとの統合"

#: ../../library/logging.rst:1282
msgid ""
"The :func:`captureWarnings` function can be used to integrate :mod:`logging`"
" with the :mod:`warnings` module."
msgstr ""
":func:`captureWarnings` 関数を使って、 :mod:`logging` を :mod:`warnings` "
"モジュールと統合できます。"

#: ../../library/logging.rst:1287
msgid ""
"This function is used to turn the capture of warnings by logging on and off."
msgstr "この関数は、logging による警告の補足を、有効にまたは無効にします。"

#: ../../library/logging.rst:1290
msgid ""
"If *capture* is ``True``, warnings issued by the :mod:`warnings` module will"
" be redirected to the logging system. Specifically, a warning will be "
"formatted using :func:`warnings.formatwarning` and the resulting string "
"logged to a logger named ``'py.warnings'`` with a severity of "
":const:`WARNING`."
msgstr ""
"*capture* が ``True`` なら、 :mod:`warnings` "
"モジュールに発せられた警告は、ロギングシステムにリダイレクトされるようになります。具体的には、警告が "
":func:`warnings.formatwarning` でフォーマット化され、結果の文字列が ``'py.warnings'`` "
"という名のロガーに、 :const:`WARNING` の重大度でロギングされるようになります。"

#: ../../library/logging.rst:1295
msgid ""
"If *capture* is ``False``, the redirection of warnings to the logging system"
" will stop, and warnings will be redirected to their original destinations "
"(i.e. those in effect before ``captureWarnings(True)`` was called)."
msgstr ""
"*capture* が ``False`` なら、警告のロギングシステムに対するリダイレクトは止められ、警告は元の "
"(すなわち、``captureWarnings(True)`` が呼び出される前に有効だった) 送信先にリダイレクトされるようになります。"

#: ../../library/logging.rst:1303
msgid "Module :mod:`logging.config`"
msgstr ":mod:`logging.config` モジュール"

#: ../../library/logging.rst:1303
msgid "Configuration API for the logging module."
msgstr "logging モジュールの環境設定 API です。"

#: ../../library/logging.rst:1306
msgid "Module :mod:`logging.handlers`"
msgstr ":mod:`logging.handlers` モジュール"

#: ../../library/logging.rst:1306
msgid "Useful handlers included with the logging module."
msgstr "logging モジュールに含まれる、便利なハンドラです。"

#: ../../library/logging.rst:1310
msgid ":pep:`282` - A Logging System"
msgstr ":pep:`282` - ログシステム"

#: ../../library/logging.rst:1309
msgid ""
"The proposal which described this feature for inclusion in the Python "
"standard library."
msgstr "この機能を Python 標準ライブラリに含めることを述べた提案です。"

#: ../../library/logging.rst:1315
msgid ""
"`Original Python logging package <https://www.red-"
"dove.com/python_logging.html>`_"
msgstr ""
"`Original Python logging package <https://www.red-"
"dove.com/python_logging.html>`_"

#: ../../library/logging.rst:1313
msgid ""
"This is the original source for the :mod:`logging` package.  The version of "
"the package available from this site is suitable for use with Python 1.5.2, "
"2.1.x and 2.2.x, which do not include the :mod:`logging` package in the "
"standard library."
msgstr ""
"これは、 :mod:`logging` パッケージのオリジナルのソースです。このサイトから利用できるバージョンのパッケージは、 "
":mod:`logging` パッケージを標準ライブラリに含まない、 Python 1.5.2, 2.1.x および 2.2.x "
"で使うのに適しています。"
