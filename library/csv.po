# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2017
# Hano, 2017
# Arihiro TAKASE, 2017
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2017
# Nakamura Masahito <randomstep@gmail.com>, 2018
# tomo, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-25 13:16+0000\n"
"PO-Revision-Date: 2017-02-16 23:04+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/csv.rst:2
msgid ":mod:`csv` --- CSV File Reading and Writing"
msgstr ":mod:`csv` --- CSV ファイルの読み書き"

#: ../../library/csv.rst:9
msgid "**Source code:** :source:`Lib/csv.py`"
msgstr "**ソースコード:** :source:`Lib/csv.py`"

#: ../../library/csv.rst:17
msgid ""
"The so-called CSV (Comma Separated Values) format is the most common import "
"and export format for spreadsheets and databases.  CSV format was used for "
"many years prior to attempts to describe the format in a standardized way in"
" :rfc:`4180`.  The lack of a well-defined standard means that subtle "
"differences often exist in the data produced and consumed by different "
"applications.  These differences can make it annoying to process CSV files "
"from multiple sources. Still, while the delimiters and quoting characters "
"vary, the overall format is similar enough that it is possible to write a "
"single module which can efficiently manipulate such data, hiding the details"
" of reading and writing the data from the programmer."
msgstr ""
"CSV (Comma Separated Values、カンマ区切り値列) と呼ばれる形式は、 "
"スプレッドシートやデータベース間でのデータのインポートやエクスポートにおける最も一般的な形式です。 CSVフォーマットは、 :rfc:`4180` "
"によって標準的な方法でフォーマットを記述する試みが行われる以前から長年使用されました。明確に定義された標準がないということは、異なるアプリケーション "
"によって生成されたり取り込まれたりするデータ間では、しばしば微妙な違いが発生するということを意味します。こうした違いのために、複数のデータ源から得られた"
" CSV ファイルを処理する作業が鬱陶しいものになることがあります。とはいえ、デリミタ (delimiter) やクオート文字の "
"相違はあっても、全体的な形式は十分似通っているため、こうしたデータを効率的に操作し、データの読み書きにおける細々としたことをプログラマ "
"から隠蔽するような単一のモジュールを書くことは可能です。"

#: ../../library/csv.rst:28
msgid ""
"The :mod:`csv` module implements classes to read and write tabular data in "
"CSV format.  It allows programmers to say, \"write this data in the format "
"preferred by Excel,\" or \"read data from this file which was generated by "
"Excel,\" without knowing the precise details of the CSV format used by "
"Excel.  Programmers can also describe the CSV formats understood by other "
"applications or define their own special-purpose CSV formats."
msgstr ""
":mod:`csv` モジュールでは、CSV "
"形式で書かれたテーブル状のデータを読み書きするためのクラスを実装しています。このモジュールを使うことで、プログラマは Excel で使われている CSV"
"  形式に関して詳しい知識をもっていなくても、 \"このデータを Excel で推奨されている形式で書いてください\" とか、 \"データを Excel"
" で作成されたこのファイルから読み出してください\" と言うことができます。プログラマはまた、他のアプリケーションが解釈できる CSV "
"形式を記述したり、独自の特殊な目的をもった CSV 形式を定義することができます。"

#: ../../library/csv.rst:35
msgid ""
"The :mod:`csv` module's :class:`reader` and :class:`writer` objects read and"
" write sequences.  Programmers can also read and write data in dictionary "
"form using the :class:`DictReader` and :class:`DictWriter` classes."
msgstr ""
":mod:`csv` モジュールの :class:`reader` および :class:`writer` "
"オブジェクトはシーケンス型を読み書きします。プログラマは :class:`DictReader` や :class:`DictWriter` "
"クラスを使うことで、データを辞書形式で読み書きすることもできます。"

#: ../../library/csv.rst:41
msgid ":pep:`305` - CSV File API"
msgstr ":pep:`305` - CSV File API"

#: ../../library/csv.rst:42
msgid ""
"The Python Enhancement Proposal which proposed this addition to Python."
msgstr ""
"Python へのこのモジュールの追加を提案している Python 改良案 (PEP: Python Enhancement Proposal)。"

#: ../../library/csv.rst:48
msgid "Module Contents"
msgstr "モジュールコンテンツ"

#: ../../library/csv.rst:50
msgid "The :mod:`csv` module defines the following functions:"
msgstr ":mod:`csv` モジュールでは以下の関数を定義しています:"

#: ../../library/csv.rst:58
msgid ""
"Return a reader object which will iterate over lines in the given *csvfile*."
" *csvfile* can be any object which supports the :term:`iterator` protocol "
"and returns a string each time its :meth:`!__next__` method is called --- "
":term:`file objects <file object>` and list objects are both suitable.   If "
"*csvfile* is a file object, it should be opened with ``newline=''``. [1]_  "
"An optional *dialect* parameter can be given which is used to define a set "
"of parameters specific to a particular CSV dialect.  It may be an instance "
"of a subclass of the :class:`Dialect` class or one of the strings returned "
"by the :func:`list_dialects` function.  The other optional *fmtparams* "
"keyword arguments can be given to override individual formatting parameters "
"in the current dialect.  For full details about the dialect and formatting "
"parameters, see section :ref:`csv-fmt-params`."
msgstr ""
"与えられた *csvfile* 内の行を反復処理するような reader  オブジェクトを返します。 *csvfile* は :term:`イテレータ "
"<iterator>` プロトコルをサポートし、 :meth:`!__next__` "
"メソッドが呼ばれた際に常に文字列を返すような任意のオブジェクトにすることができます --- :term:`ファイルオブジェクト <file "
"object>` でもリストでも構いません。 *csvfile* がファイルオブジェクトの場合、 ``newline=''`` として開くべきです。 "
"[1]_ オプションとして *dialect* パラメータを与えることができ、特定の CSV 表現形式 (dialect) "
"特有のパラメータの集合を定義するために使われます。 *dialect* 引数は :class:`Dialect` クラスのサブクラスのインスタンスか、 "
":func:`list_dialects` 関数が返す文字列の一つにすることができます。別のオプションである *fmtparams* "
"キーワード引数は、現在の表現形式における個々の書式パラメータを上書きするために与えることができます。表現形式および書式化パラメータの詳細については、 "
":ref:`csv-fmt-params` 節を参照してください。"

#: ../../library/csv.rst:71
msgid ""
"Each row read from the csv file is returned as a list of strings.  No "
"automatic data type conversion is performed unless the ``QUOTE_NONNUMERIC`` "
"format option is specified (in which case unquoted fields are transformed "
"into floats)."
msgstr ""
"csv ファイルから読み込まれた各行は、文字列のリストとして返されます。``QUOTE_NONNUMERIC`` "
"フォーマットオプションが指定された場合を除き、データ型の変換が自動的に行われることはありません "
"(このオプションが指定された場合、クォートされていないフィールドは浮動小数点数に変換されます)。"

#: ../../library/csv.rst:75 ../../library/csv.rst:105
#: ../../library/csv.rst:173 ../../library/csv.rst:209
msgid "A short usage example::"
msgstr "短い利用例::"

#: ../../library/csv.rst:88
msgid ""
"Return a writer object responsible for converting the user's data into "
"delimited strings on the given file-like object.  *csvfile* can be any "
"object with a :func:`write` method.  If *csvfile* is a file object, it "
"should be opened with ``newline=''`` [1]_.  An optional *dialect* parameter "
"can be given which is used to define a set of parameters specific to a "
"particular CSV dialect.  It may be an instance of a subclass of the "
":class:`Dialect` class or one of the strings returned by the "
":func:`list_dialects` function.  The other optional *fmtparams* keyword "
"arguments can be given to override individual formatting parameters in the "
"current dialect.  For full details about the dialect and formatting "
"parameters, see section :ref:`csv-fmt-params`. To make it as easy as "
"possible to interface with modules which implement the DB API, the value "
":const:`None` is written as the empty string.  While this isn't a reversible"
" transformation, it makes it easier to dump SQL NULL data values to CSV "
"files without preprocessing the data returned from a ``cursor.fetch*`` call."
" All other non-string data are stringified with :func:`str` before being "
"written."
msgstr ""
"ユーザが与えたデータをデリミタで区切られた文字列に変換し、与えられたファイルオブジェクトに書き込むための writer オブジェクトを返します。 "
"*csvfile* は :func:`write` メソッドを持つ任意のオブジェクトです。 *csvfile* がファイルオブジェクトの場合、 "
"``newline=''`` として開くべきです [1]_ 。オプションとして *dialect* "
"引数を与えることができ、利用するCSV表現形式(dialect)を指定することができます。 *dialect* パラメータは "
":class:`Dialect` クラスのサブクラスのインスタンスか、 :func:`list_dialects` "
"関数が返す文字列の1つにすることができます。別のオプション引数である *fmtparams* "
"キーワード引数は、現在の表現形式における個々の書式パラメータを上書きするために与えることができます。dialect と書式パラメータについての詳細は、 "
":ref:`csv-fmt-params` 節を参照してください。 DB API を実装するモジュールとのインタフェースを可能な限り容易にするために、 "
":const:`None` は空文字列として書き込まれます。この処理は可逆な変換ではありませんが、SQL で NULL データ値を CSV "
"にダンプする処理を、 ``cursor.fetch*`` "
"呼び出しによって返されたデータを前処理することなく簡単に行うことができます。他の非文字列データは、書き出される前に :func:`str` "
"を使って文字列に変換されます。"

#: ../../library/csv.rst:117
msgid ""
"Associate *dialect* with *name*.  *name* must be a string. The dialect can "
"be specified either by passing a sub-class of :class:`Dialect`, or by "
"*fmtparams* keyword arguments, or both, with keyword arguments overriding "
"parameters of the dialect. For full details about the dialect and formatting"
" parameters, see section :ref:`csv-fmt-params`."
msgstr ""
"*dialect* を *name* と関連付けます。 *name* は文字列でなければなりません。表現形式(dialect)は "
":class:`Dialect` のサブクラスを渡すか、またはキーワード引数 *fmtparams* "
"、もしくは両方で指定できますが、キーワード引数の方が優先されます。表現形式と書式化パラメータについての詳細は、 :ref:`csv-fmt-"
"params` 節を参照してください。"

#: ../../library/csv.rst:126
msgid ""
"Delete the dialect associated with *name* from the dialect registry.  An "
":exc:`Error` is raised if *name* is not a registered dialect name."
msgstr ""
"*name* に関連づけられた表現形式を表現形式レジストリから削除します。 *name* が表現形式名でない場合には :exc:`Error` "
"を送出します。"

#: ../../library/csv.rst:132
msgid ""
"Return the dialect associated with *name*.  An :exc:`Error` is raised if "
"*name* is not a registered dialect name.  This function returns an immutable"
" :class:`Dialect`."
msgstr ""
"*name* に関連づけられた表現形式を返します。 *name* が表現形式名でない場合には :exc:`Error` を送出します。この関数は不変の "
":class:`Dialect` を返します。"

#: ../../library/csv.rst:138
msgid "Return the names of all registered dialects."
msgstr "登録されている全ての表現形式を返します。"

#: ../../library/csv.rst:143
msgid ""
"Returns the current maximum field size allowed by the parser. If *new_limit*"
" is given, this becomes the new limit."
msgstr "パーサが許容する現在の最大フィールドサイズを返します。 *new_limit* が渡されたときは、その値が新しい上限になります。"

#: ../../library/csv.rst:147
msgid "The :mod:`csv` module defines the following classes:"
msgstr ":mod:`csv` モジュールでは以下のクラスを定義しています:"

#: ../../library/csv.rst:152
msgid ""
"Create an object that operates like a regular reader but maps the "
"information in each row to a :class:`dict` whose keys are given by the "
"optional *fieldnames* parameter."
msgstr ""

#: ../../library/csv.rst:156
msgid ""
"The *fieldnames* parameter is a :term:`sequence`.  If *fieldnames* is "
"omitted, the values in the first row of file *f* will be used as the "
"fieldnames.  Regardless of how the fieldnames are determined, the dictionary"
" preserves their original ordering."
msgstr ""

#: ../../library/csv.rst:161
msgid ""
"If a row has more fields than fieldnames, the remaining data is put in a "
"list and stored with the fieldname specified by *restkey* (which defaults to"
" ``None``).  If a non-blank row has fewer fields than fieldnames, the "
"missing values are filled-in with the value of *restval* (which defaults to "
"``None``)."
msgstr ""

#: ../../library/csv.rst:167
msgid ""
"All other optional or keyword arguments are passed to the underlying "
":class:`reader` instance."
msgstr "その他の省略可能またはキーワード形式のパラメータは、ベースになっている :class:`reader` インスタンスに渡されます。"

#: ../../library/csv.rst:170
msgid "Returned rows are now of type :class:`dict`."
msgstr ""

#: ../../library/csv.rst:191
msgid ""
"Create an object which operates like a regular writer but maps dictionaries "
"onto output rows.  The *fieldnames* parameter is a :mod:`sequence "
"<collections.abc>` of keys that identify the order in which values in the "
"dictionary passed to the :meth:`writerow` method are written to file *f*.  "
"The optional *restval* parameter specifies the value to be written if the "
"dictionary is missing a key in *fieldnames*.  If the dictionary passed to "
"the :meth:`writerow` method contains a key not found in *fieldnames*, the "
"optional *extrasaction* parameter indicates what action to take. If it is "
"set to ``'raise'``, the default value, a :exc:`ValueError` is raised. If it "
"is set to ``'ignore'``, extra values in the dictionary are ignored. Any "
"other optional or keyword arguments are passed to the underlying "
":class:`writer` instance."
msgstr ""
"通常の writer のように動作しますが、辞書を出力行にマップするオブジェクトを生成します。 *fieldnames* "
"パラメータは、:meth:`writerow` メソッドに渡された辞書の値がどのような順番でファイル *f* に書かれるかを指定するキーの "
":mod:`sequence <collections.abc>` です。 :meth:`writerow` メソッドに渡された辞書に "
"*fieldnames* には存在しないキーが含まれている場合、オプションの *extrasaction* "
"パラメータによってどんな動作を行うかが指定されます。この値がデフォルト値である ``'raise'`` に設定されている場合、 "
":exc:`ValueError` が送出されます。 ``'ignore'`` "
"に設定されている場合、辞書の余分な値は無視されます。その他のパラメータはベースになっている :class:`writer` インスタンスに渡されます。"

#: ../../library/csv.rst:206
msgid ""
"Note that unlike the :class:`DictReader` class, the *fieldnames* parameter "
"of the :class:`DictWriter` class is not optional."
msgstr ""
":class:`DictReader` クラスとは異なり、 :class:`DictWriter` の *fieldnames* "
"パラメータは省略可能ではありません。"

#: ../../library/csv.rst:225
msgid ""
"The :class:`Dialect` class is a container class relied on primarily for its "
"attributes, which are used to define the parameters for a specific "
":class:`reader` or :class:`writer` instance."
msgstr ""
":class:`Dialect` クラスはコンテナクラスで、基本的な用途としては、その属性を特定の :class:`reader` や "
":class:`writer` インスタンスのパラメータを定義するために用います。"

#: ../../library/csv.rst:232
msgid ""
"The :class:`excel` class defines the usual properties of an Excel-generated "
"CSV file.  It is registered with the dialect name ``'excel'``."
msgstr ""
":class:`excel` クラスは Excel で生成される CSV ファイルの通常のプロパティを定義します。これは ``'excel'`` "
"という名前の dialect として登録されています。"

#: ../../library/csv.rst:238
msgid ""
"The :class:`excel_tab` class defines the usual properties of an Excel-"
"generated TAB-delimited file.  It is registered with the dialect name "
"``'excel-tab'``."
msgstr ""
":class:`excel_tab` クラスは Excel で生成されるタブ分割ファイルの通常のプロパティを定義します。これは ``'excel-"
"tab'`` という名前の dialect として登録されています。"

#: ../../library/csv.rst:244
msgid ""
"The :class:`unix_dialect` class defines the usual properties of a CSV file "
"generated on UNIX systems, i.e. using ``'\\n'`` as line terminator and "
"quoting all fields.  It is registered with the dialect name ``'unix'``."
msgstr ""
":class:`unix_dialect` クラスは UNIX システムで生成される CSV ファイルの通常のプロパティ (行終端記号として "
"``'\\n'`` を用い全てのフィールドをクォートするもの) を定義します。これは ``'unix'`` という名前の dialect "
"として登録されています。"

#: ../../library/csv.rst:253
msgid "The :class:`Sniffer` class is used to deduce the format of a CSV file."
msgstr ":class:`Sniffer` クラスは CSV ファイルの書式を推理するために用いられるクラスです。"

#: ../../library/csv.rst:255
msgid "The :class:`Sniffer` class provides two methods:"
msgstr ":class:`Sniffer` クラスではメソッドを二つ提供しています:"

#: ../../library/csv.rst:259
msgid ""
"Analyze the given *sample* and return a :class:`Dialect` subclass reflecting"
" the parameters found.  If the optional *delimiters* parameter is given, it "
"is interpreted as a string containing possible valid delimiter characters."
msgstr ""
"与えられた *sample* を解析し、発見されたパラメータを反映した :class:`Dialect` サブクラスを返します。オプションの "
"*delimiters* パラメータを与えた場合、有効なデリミタ文字を含んでいるはずの文字列として解釈されます。"

#: ../../library/csv.rst:267
msgid ""
"Analyze the sample text (presumed to be in CSV format) and return "
":const:`True` if the first row appears to be a series of column headers."
msgstr ""
"(CSV 形式と仮定される) サンプルテキストを解析して、最初の行がカラムヘッダの羅列のように推察される場合 :const:`True` を返します。"

#: ../../library/csv.rst:270
msgid "An example for :class:`Sniffer` use::"
msgstr ":class:`Sniffer` の利用例::"

#: ../../library/csv.rst:279
msgid "The :mod:`csv` module defines the following constants:"
msgstr ":mod:`csv` モジュールでは以下の定数を定義しています:"

#: ../../library/csv.rst:283
msgid "Instructs :class:`writer` objects to quote all fields."
msgstr ":class:`writer` オブジェクトに対し、全てのフィールドをクオートするように指示します。"

#: ../../library/csv.rst:288
msgid ""
"Instructs :class:`writer` objects to only quote those fields which contain "
"special characters such as *delimiter*, *quotechar* or any of the characters"
" in *lineterminator*."
msgstr ""
":class:`writer` オブジェクトに対し、 *delimiter* 、 *quotechar* または *lineterminator* "
"に含まれる任意の文字のような特別な文字を含むフィールドだけをクオートするように指示します。"

#: ../../library/csv.rst:295
msgid "Instructs :class:`writer` objects to quote all non-numeric fields."
msgstr ":class:`writer` オブジェクトに対し、全ての非数値フィールドをクオートするように指示します。"

#: ../../library/csv.rst:297
msgid "Instructs the reader to convert all non-quoted fields to type *float*."
msgstr ":class:`reader` に対しては、クオートされていない全てのフィールドを *float* 型に変換するよう指示します。"

#: ../../library/csv.rst:302
msgid ""
"Instructs :class:`writer` objects to never quote fields.  When the current "
"*delimiter* occurs in output data it is preceded by the current *escapechar*"
" character.  If *escapechar* is not set, the writer will raise :exc:`Error` "
"if any characters that require escaping are encountered."
msgstr ""
":class:`writer` オブジェクトに対し、フィールドを決してクオートしないように指示します。現在の *delimiter* "
"が出力データ中に現れた場合、現在設定されている *escapechar* 文字が前に付けられます。 *escapechar* "
"がセットされていない場合、エスケープが必要な文字に遭遇した writer は :exc:`Error` を送出します。"

#: ../../library/csv.rst:307
msgid ""
"Instructs :class:`reader` to perform no special processing of quote "
"characters."
msgstr ":class:`reader` に対しては、クオート文字の特別扱いをしないように指示します。"

#: ../../library/csv.rst:309
msgid "The :mod:`csv` module defines the following exception:"
msgstr ":mod:`csv` モジュールでは以下の例外を定義しています:"

#: ../../library/csv.rst:314
msgid "Raised by any of the functions when an error is detected."
msgstr "全ての関数において、エラーが検出された際に送出される例外です。"

#: ../../library/csv.rst:319
msgid "Dialects and Formatting Parameters"
msgstr "Dialect クラスと書式化パラメータ"

#: ../../library/csv.rst:321
msgid ""
"To make it easier to specify the format of input and output records, "
"specific formatting parameters are grouped together into dialects.  A "
"dialect is a subclass of the :class:`Dialect` class having a set of specific"
" methods and a single :meth:`validate` method.  When creating "
":class:`reader` or :class:`writer` objects, the programmer can specify a "
"string or a subclass of the :class:`Dialect` class as the dialect parameter."
"  In addition to, or instead of, the *dialect* parameter, the programmer can"
" also specify individual formatting parameters, which have the same names as"
" the attributes defined below for the :class:`Dialect` class."
msgstr ""
"レコードに対する入出力形式の指定をより簡単にするために、特定の書式化パラメータは表現形式 (dialect) にまとめてグループ化されます。表現形式は "
":class:`Dialect` クラスのサブクラスで、様々なクラス特有のメソッドと、 :meth:`validate` メソッドを一つ持っています。 "
":class:`reader` または :class:`writer` オブジェクトを生成するとき、プログラマは文字列または "
":class:`Dialect` クラスのサブクラスを表現形式パラメータとして渡さなければなりません。さらに、 *dialect* "
"パラメータの代りに、プログラマは上で定義されている属性と同じ名前を持つ個々の書式化パラメータを :class:`Dialect` "
"クラスに指定することができます。"

#: ../../library/csv.rst:331
msgid "Dialects support the following attributes:"
msgstr "Dialect は以下の属性をサポートしています:"

#: ../../library/csv.rst:336
msgid ""
"A one-character string used to separate fields.  It defaults to ``','``."
msgstr "フィールド間を分割するのに用いられる 1 文字からなる文字列です。デフォルトでは ``','`` です。"

#: ../../library/csv.rst:341
msgid ""
"Controls how instances of *quotechar* appearing inside a field should "
"themselves be quoted.  When :const:`True`, the character is doubled. When "
":const:`False`, the *escapechar* is used as a prefix to the *quotechar*.  It"
" defaults to :const:`True`."
msgstr ""
"フィールド内に現れた *quotechar* "
"のインスタンスで、クオートではないその文字自身でなければならない文字をどのようにクオートするかを制御します。 :const:`True` "
"の場合、この文字は二重化されます。 :const:`False` の場合、 *escapechar* は *quotechar* "
"の前に置かれます。デフォルトでは :const:`True` です。"

#: ../../library/csv.rst:346
msgid ""
"On output, if *doublequote* is :const:`False` and no *escapechar* is set, "
":exc:`Error` is raised if a *quotechar* is found in a field."
msgstr ""
"出力においては、 *doublequote* が :const:`False` で *escapechar* がセットされていない場合、フィールド内に "
"*quotechar* が現れると :exc:`Error` が送出されます。"

#: ../../library/csv.rst:352
msgid ""
"A one-character string used by the writer to escape the *delimiter* if "
"*quoting* is set to :const:`QUOTE_NONE` and the *quotechar* if *doublequote*"
" is :const:`False`. On reading, the *escapechar* removes any special meaning"
" from the following character. It defaults to :const:`None`, which disables "
"escaping."
msgstr ""
"writer が、 *quoting* が :const:`QUOTE_NONE` に設定されている場合に *delimiter* "
"をエスケープするため、および、 *doublequote* が :const:`False` の場合に *quotechar* "
"をエスケープするために用いられる、 1 文字からなる文字列です。読み込み時には *escapechar* "
"はそれに引き続く文字の特別な意味を取り除きます。デフォルトでは :const:`None` で、エスケープを行ないません。"

#: ../../library/csv.rst:360
msgid ""
"The string used to terminate lines produced by the :class:`writer`. It "
"defaults to ``'\\r\\n'``."
msgstr ":class:`writer` が作り出す各行を終端する際に用いられる文字列です。デフォルトでは ``'\\r\\n'`` です。"

#: ../../library/csv.rst:365
msgid ""
"The :class:`reader` is hard-coded to recognise either ``'\\r'`` or ``'\\n'``"
" as end-of-line, and ignores *lineterminator*. This behavior may change in "
"the future."
msgstr ""
":class:`reader` は ``'\\r'`` または ``'\\n'`` のどちらかを行末と認識するようにハードコードされており、 "
"*lineterminator* を無視します。この振る舞いは将来変更されるかもしれません。"

#: ../../library/csv.rst:372
msgid ""
"A one-character string used to quote fields containing special characters, "
"such as the *delimiter* or *quotechar*, or which contain new-line "
"characters.  It defaults to ``'\"'``."
msgstr ""
"*delimiter* や *quotechar* といった特殊文字を含むか、改行文字を含むフィールドをクオートする際に用いられる 1 "
"文字からなる文字列です。デフォルトでは ``'\"'`` です。"

#: ../../library/csv.rst:379
msgid ""
"Controls when quotes should be generated by the writer and recognised by the"
" reader.  It can take on any of the :const:`QUOTE_\\*` constants (see "
"section :ref:`csv-contents`) and defaults to :const:`QUOTE_MINIMAL`."
msgstr ""
"クオートがいつ writer によって生成されるか、また reader によって認識されるかを制御します。 :const:`QUOTE_\\*` "
"定数のいずれか (:ref:`csv-contents` 節参照) をとることができ、デフォルトでは :const:`QUOTE_MINIMAL` "
"です。"

#: ../../library/csv.rst:386
msgid ""
"When :const:`True`, whitespace immediately following the *delimiter* is "
"ignored. The default is :const:`False`."
msgstr ""
":const:`True` の場合、 *delimiter* の直後に続く空白は無視されます。デフォルトでは :const:`False` です。"

#: ../../library/csv.rst:392
msgid ""
"When ``True``, raise exception :exc:`Error` on bad CSV input. The default is"
" ``False``."
msgstr ""
"``True`` の場合、 不正な CSV 入力に対して :exc:`Error` を送出します。デフォルトでは ``False`` です。"

#: ../../library/csv.rst:396
msgid "Reader Objects"
msgstr "reader オブジェクト"

#: ../../library/csv.rst:398
msgid ""
"Reader objects (:class:`DictReader` instances and objects returned by the "
":func:`reader` function) have the following public methods:"
msgstr ""
"reader オブジェクト(:class:`DictReader` インスタンス、および :func:`reader` "
"関数によって返されたオブジェクト) は、以下の public なメソッドを持っています:"

#: ../../library/csv.rst:403
msgid ""
"Return the next row of the reader's iterable object as a list (if the object"
" was returned from :func:`reader`) or a dict (if it is a :class:`DictReader`"
" instance), parsed according to the current dialect.  Usually you should "
"call this as ``next(reader)``."
msgstr ""
"reader の反復可能なオブジェクトから、現在の表現形式に基づいて次の行を解析してリスト（オブジェクトが :func:`reader` "
"から返された場合）または辞書 （ :class:`DictReader` のインスタンスの場合）として返します。通常は ``next(reader)``"
" のようにして呼び出すことになります。"

#: ../../library/csv.rst:409
msgid "Reader objects have the following public attributes:"
msgstr "reader オブジェクトには以下の公開属性があります:"

#: ../../library/csv.rst:413
msgid "A read-only description of the dialect in use by the parser."
msgstr "パーサで使われる表現形式の読み出し専用の記述です。"

#: ../../library/csv.rst:418
msgid ""
"The number of lines read from the source iterator. This is not the same as "
"the number of records returned, as records can span multiple lines."
msgstr "ソースイテレータから読んだ行数です。この数は返されるレコードの数とは、レコードが複数行に亘ることがあるので、一致しません。"

#: ../../library/csv.rst:422
msgid "DictReader objects have the following public attribute:"
msgstr "DictReader オブジェクトは、以下の public な属性を持っています:"

#: ../../library/csv.rst:426
msgid ""
"If not passed as a parameter when creating the object, this attribute is "
"initialized upon first access or when the first record is read from the "
"file."
msgstr "オブジェクトを生成するときに渡されなかった場合、この属性は最初のアクセス時か、ファイルから最初のレコードを読み出したときに初期化されます。"

#: ../../library/csv.rst:433
msgid "Writer Objects"
msgstr "writer オブジェクト"

#: ../../library/csv.rst:435
msgid ""
":class:`Writer` objects (:class:`DictWriter` instances and objects returned "
"by the :func:`writer` function) have the following public methods.  A *row* "
"must be an iterable of strings or numbers for :class:`Writer` objects and a "
"dictionary mapping fieldnames to strings or numbers (by passing them through"
" :func:`str` first) for :class:`DictWriter` objects.  Note that complex "
"numbers are written out surrounded by parens. This may cause some problems "
"for other programs which read CSV files (assuming they support complex "
"numbers at all)."
msgstr ""
":class:`Writer` オブジェクト(:class:`DictWriter` インスタンス、および  :func:`writer` "
"関数によって返されたオブジェクト) は、以下の public なメソッドを持っています: *row* には、 :class:`Writer` "
"オブジェクトの場合には文字列か数値のイテラブルを指定し、 :class:`DictWriter` "
"オブジェクトの場合はフィールド名をキーとして対応する文字列か数値を格納した辞書オブジェクトを指定します(数値は :func:`str` "
"で変換されます)。複素数を出力する場合、値をかっこで囲んで出力します。このため、CSV "
"ファイルを読み込むアプリケーションで（そのアプリケーションが複素数をサポートしていたとしても）問題が発生する場合があります。"

#: ../../library/csv.rst:446
msgid ""
"Write the *row* parameter to the writer's file object, formatted according "
"to the current dialect. Return the return value of the call to the *write* "
"method of the underlying file object."
msgstr ""

#: ../../library/csv.rst:450
msgid "Added support of arbitrary iterables."
msgstr "任意のイテラブルのサポートの追加。"

#: ../../library/csv.rst:455
msgid ""
"Write all elements in *rows* (an iterable of *row* objects as described "
"above) to the writer's file object, formatted according to the current "
"dialect."
msgstr ""
"*rows* 引数 (上で解説した *row* オブジェクトのイテラブル) の全ての要素を現在の表現形式に基づいて書式化し、writer "
"のファイルオブジェクトに書き込みます。"

#: ../../library/csv.rst:459
msgid "Writer objects have the following public attribute:"
msgstr "writer オブジェクトには以下の公開属性があります:"

#: ../../library/csv.rst:464
msgid "A read-only description of the dialect in use by the writer."
msgstr "writer で使われる表現形式の読み出し専用の記述です。"

#: ../../library/csv.rst:467
msgid "DictWriter objects have the following public method:"
msgstr "DictWriter のオブジェクトは以下の public メソッドを持っています:"

#: ../../library/csv.rst:472
msgid ""
"Write a row with the field names (as specified in the constructor) to the "
"writer's file object, formatted according to the current dialect. Return the"
" return value of the :meth:`csvwriter.writerow` call used internally."
msgstr ""

#: ../../library/csv.rst:477
msgid ""
":meth:`writeheader` now also returns the value returned by the "
":meth:`csvwriter.writerow` method it uses internally."
msgstr ""

#: ../../library/csv.rst:485
msgid "Examples"
msgstr "使用例"

#: ../../library/csv.rst:487
msgid "The simplest example of reading a CSV file::"
msgstr "最も簡単な CSV ファイル読み込みの例です::"

#: ../../library/csv.rst:495
msgid "Reading a file with an alternate format::"
msgstr "別の書式での読み込み::"

#: ../../library/csv.rst:503
msgid "The corresponding simplest possible writing example is::"
msgstr "上に対して、単純な書き込みのプログラム例は以下のようになります。 ::"

#: ../../library/csv.rst:510
msgid ""
"Since :func:`open` is used to open a CSV file for reading, the file will by "
"default be decoded into unicode using the system default encoding (see "
":func:`locale.getpreferredencoding`).  To decode a file using a different "
"encoding, use the ``encoding`` argument of open::"
msgstr ""
":func:`open` が CSV "
"ファイルの読み込みに使われるため、ファイルはデフォルトではシステムのデフォルトエンコーディングでユニコード文字列にデコードされます "
"(:func:`locale.getpreferredencoding` を参照)。他のエンコーディングを用いてデコードするには、open の引数 "
"``encoding`` を設定して、以下のようにします::"

#: ../../library/csv.rst:521
msgid ""
"The same applies to writing in something other than the system default "
"encoding: specify the encoding argument when opening the output file."
msgstr ""
"システムのデフォルトエンコーディング以外で書き込む場合も同様です。出力ファイルを開く際に引数 ``encoding`` を明示してください。"

#: ../../library/csv.rst:524
msgid "Registering a new dialect::"
msgstr "新しい表現形式の登録::"

#: ../../library/csv.rst:531
msgid ""
"A slightly more advanced use of the reader --- catching and reporting "
"errors::"
msgstr "もう少し手の込んだ reader の使い方 --- エラーを捉えてレポートします。 ::"

#: ../../library/csv.rst:543
msgid ""
"And while the module doesn't directly support parsing strings, it can easily"
" be done::"
msgstr "このモジュールは文字列の解析は直接サポートしませんが、簡単にできます。 ::"

#: ../../library/csv.rst:552
msgid "Footnotes"
msgstr "脚注"

#: ../../library/csv.rst:553
msgid ""
"If ``newline=''`` is not specified, newlines embedded inside quoted fields "
"will not be interpreted correctly, and on platforms that use ``\\r\\n`` "
"linendings on write an extra ``\\r`` will be added.  It should always be "
"safe to specify ``newline=''``, since the csv module does its own "
"(:term:`universal <universal newlines>`) newline handling."
msgstr ""
"``newline=''`` が指定されない場合、クォートされたフィールド内の改行は適切に解釈されず、書き込み時に ``\\r\\n`` "
"を行末に用いる処理系では余分な ``\\r`` が追加されてしまいます。csv モジュールは独自 (:term:`universal "
"<universal newlines>`) の改行処理を行うため、``newline=''`` を指定することは常に安全です。"
