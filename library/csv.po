# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# mollinaca, 2021
# tomo, 2023
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2023
# souma987, 2023
# Takanori Suzuki <takanori@takanory.net>, 2024
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:03+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/csv.rst:2
msgid ":mod:`!csv` --- CSV File Reading and Writing"
msgstr ":mod:`!csv` --- CSV ファイルの読み書き"

#: ../../library/csv.rst:9
msgid "**Source code:** :source:`Lib/csv.py`"
msgstr "**ソースコード:** :source:`Lib/csv.py`"

#: ../../library/csv.rst:17
msgid ""
"The so-called CSV (Comma Separated Values) format is the most common import "
"and export format for spreadsheets and databases.  CSV format was used for "
"many years prior to attempts to describe the format in a standardized way "
"in :rfc:`4180`.  The lack of a well-defined standard means that subtle "
"differences often exist in the data produced and consumed by different "
"applications.  These differences can make it annoying to process CSV files "
"from multiple sources. Still, while the delimiters and quoting characters "
"vary, the overall format is similar enough that it is possible to write a "
"single module which can efficiently manipulate such data, hiding the details "
"of reading and writing the data from the programmer."
msgstr ""
"CSV (Comma Separated Values、カンマ区切り値列) と呼ばれる形式は、 スプレッド"
"シートやデータベース間でのデータのインポートやエクスポートにおける最も一般的"
"な形式です。 CSVフォーマットは、 :rfc:`4180` によって標準的な方法でフォーマッ"
"トを記述する試みが行われる以前から長年使用されました。明確に定義された標準が"
"ないということは、異なるアプリケーション によって生成されたり取り込まれたりす"
"るデータ間では、しばしば微妙な違いが発生するということを意味します。こうした"
"違いのために、複数のデータ源から得られた CSV ファイルを処理する作業が鬱陶しい"
"ものになることがあります。とはいえ、デリミタ (delimiter) やクオート文字の 相"
"違はあっても、全体的な形式は十分似通っているため、こうしたデータを効率的に操"
"作し、データの読み書きにおける細々としたことをプログラマ から隠蔽するような単"
"一のモジュールを書くことは可能です。"

#: ../../library/csv.rst:28
msgid ""
"The :mod:`csv` module implements classes to read and write tabular data in "
"CSV format.  It allows programmers to say, \"write this data in the format "
"preferred by Excel,\" or \"read data from this file which was generated by "
"Excel,\" without knowing the precise details of the CSV format used by "
"Excel.  Programmers can also describe the CSV formats understood by other "
"applications or define their own special-purpose CSV formats."
msgstr ""
":mod:`csv` モジュールでは、CSV 形式で書かれたテーブル状のデータを読み書きする"
"ためのクラスを実装しています。このモジュールを使うことで、プログラマは Excel "
"で使われている CSV  形式に関して詳しい知識をもっていなくても、 \"このデータ"
"を Excel で推奨されている形式で書いてください\" とか、 \"データを Excel で作"
"成されたこのファイルから読み出してください\" と言うことができます。プログラマ"
"はまた、他のアプリケーションが解釈できる CSV 形式を記述したり、独自の特殊な目"
"的をもった CSV 形式を定義することができます。"

#: ../../library/csv.rst:35
msgid ""
"The :mod:`csv` module's :class:`reader` and :class:`writer` objects read and "
"write sequences.  Programmers can also read and write data in dictionary "
"form using the :class:`DictReader` and :class:`DictWriter` classes."
msgstr ""
":mod:`csv` モジュールの :class:`reader` および :class:`writer` オブジェクトは"
"シーケンス型を読み書きします。プログラマは :class:`DictReader` や :class:"
"`DictWriter` クラスを使うことで、データを辞書形式で読み書きすることもできま"
"す。"

#: ../../library/csv.rst:41
msgid ":pep:`305` - CSV File API"
msgstr ":pep:`305` - CSV File API"

#: ../../library/csv.rst:42
msgid "The Python Enhancement Proposal which proposed this addition to Python."
msgstr ""
"Python へのこのモジュールの追加を提案している Python 改良案 (PEP: Python "
"Enhancement Proposal)。"

#: ../../library/csv.rst:48
msgid "Module Contents"
msgstr "モジュールコンテンツ"

#: ../../library/csv.rst:50
msgid "The :mod:`csv` module defines the following functions:"
msgstr ":mod:`csv` モジュールでは以下の関数を定義しています:"

#: ../../library/csv.rst:58
msgid ""
"Return a :ref:`reader object <reader-objects>` that will process lines from "
"the given *csvfile*.  A csvfile must be an iterable of strings, each in the "
"reader's defined csv format. A csvfile is most commonly a file-like object "
"or list. If *csvfile* is a file object, it should be opened with "
"``newline=''``. [1]_  An optional *dialect* parameter can be given which is "
"used to define a set of parameters specific to a particular CSV dialect.  It "
"may be an instance of a subclass of the :class:`Dialect` class or one of the "
"strings returned by the :func:`list_dialects` function.  The other optional "
"*fmtparams* keyword arguments can be given to override individual formatting "
"parameters in the current dialect.  For full details about the dialect and "
"formatting parameters, see section :ref:`csv-fmt-params`."
msgstr ""

#: ../../library/csv.rst:72
msgid ""
"Each row read from the csv file is returned as a list of strings.  No "
"automatic data type conversion is performed unless the ``QUOTE_NONNUMERIC`` "
"format option is specified (in which case unquoted fields are transformed "
"into floats)."
msgstr ""
"csv ファイルから読み込まれた各行は、文字列のリストとして返されます。"
"``QUOTE_NONNUMERIC`` フォーマットオプションが指定された場合を除き、データ型の"
"変換が自動的に行われることはありません (このオプションが指定された場合、"
"クォートされていないフィールドは浮動小数点数に変換されます)。"

#: ../../library/csv.rst:76 ../../library/csv.rst:106 ../../library/csv.rst:181
#: ../../library/csv.rst:219
msgid "A short usage example::"
msgstr "短い利用例::"

#: ../../library/csv.rst:78
msgid ""
">>> import csv\n"
">>> with open('eggs.csv', newline='') as csvfile:\n"
"...     spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')\n"
"...     for row in spamreader:\n"
"...         print(', '.join(row))\n"
"Spam, Spam, Spam, Spam, Spam, Baked Beans\n"
"Spam, Lovely Spam, Wonderful Spam"
msgstr ""

#: ../../library/csv.rst:89
msgid ""
"Return a writer object responsible for converting the user's data into "
"delimited strings on the given file-like object.  *csvfile* can be any "
"object with a :meth:`~io.TextIOBase.write` method.  If *csvfile* is a file "
"object, it should be opened with ``newline=''`` [1]_.  An optional *dialect* "
"parameter can be given which is used to define a set of parameters specific "
"to a particular CSV dialect.  It may be an instance of a subclass of the :"
"class:`Dialect` class or one of the strings returned by the :func:"
"`list_dialects` function.  The other optional *fmtparams* keyword arguments "
"can be given to override individual formatting parameters in the current "
"dialect.  For full details about dialects and formatting parameters, see "
"the :ref:`csv-fmt-params` section. To make it as easy as possible to "
"interface with modules which implement the DB API, the value :const:`None` "
"is written as the empty string.  While this isn't a reversible "
"transformation, it makes it easier to dump SQL NULL data values to CSV files "
"without preprocessing the data returned from a ``cursor.fetch*`` call. All "
"other non-string data are stringified with :func:`str` before being written."
msgstr ""
"ユーザが与えたデータをデリミタで区切られた文字列に変換し、与えられたファイル"
"オブジェクトに書き込むための writer オブジェクトを返します。 *csvfile* は :"
"meth:`~io.TextIOBase.write` メソッドを持つ任意のオブジェクトです。 *csvfile* "
"がファイルオブジェクトの場合、 ``newline=''`` として開くべきです [1]_ 。オプ"
"ションとして *dialect* 引数を与えることができ、利用するCSV表現形式(dialect)を"
"指定することができます。 *dialect* パラメータは :class:`Dialect` クラスのサブ"
"クラスのインスタンスか、 :func:`list_dialects` 関数が返す文字列の1つにするこ"
"とができます。別のオプション引数である *fmtparams* キーワード引数は、現在の表"
"現形式における個々の書式パラメータを上書きするために与えることができます。"
"dialect と書式パラメータについての詳細は、 :ref:`csv-fmt-params` 節を参照して"
"ください。 DB API を実装するモジュールとのインターフェースを可能な限り容易に"
"するために、 :const:`None` は空文字列として書き込まれます。この処理は可逆な変"
"換ではありませんが、SQL で NULL データ値を CSV にダンプする処理を、 ``cursor."
"fetch*`` 呼び出しによって返されたデータを前処理することなく簡単に行うことがで"
"きます。他の非文字列データは、書き出される前に :func:`str` を使って文字列に変"
"換されます。"

#: ../../library/csv.rst:108
msgid ""
"import csv\n"
"with open('eggs.csv', 'w', newline='') as csvfile:\n"
"    spamwriter = csv.writer(csvfile, delimiter=' ',\n"
"                            quotechar='|', quoting=csv.QUOTE_MINIMAL)\n"
"    spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])\n"
"    spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])"
msgstr ""

#: ../../library/csv.rst:118
msgid ""
"Associate *dialect* with *name*.  *name* must be a string. The dialect can "
"be specified either by passing a sub-class of :class:`Dialect`, or by "
"*fmtparams* keyword arguments, or both, with keyword arguments overriding "
"parameters of the dialect. For full details about dialects and formatting "
"parameters, see section :ref:`csv-fmt-params`."
msgstr ""
"*dialect* を *name* と関連付けます。 *name* は文字列でなければなりません。表"
"現形式(dialect)は :class:`Dialect` のサブクラスを渡すか、またはキーワード引"
"数 *fmtparams* 、もしくは両方で指定できますが、キーワード引数の方が優先されま"
"す。表現形式と書式化パラメータについての詳細は、 :ref:`csv-fmt-params` 節を参"
"照してください。"

#: ../../library/csv.rst:127
msgid ""
"Delete the dialect associated with *name* from the dialect registry.  An :"
"exc:`Error` is raised if *name* is not a registered dialect name."
msgstr ""
"*name* に関連づけられた表現形式を表現形式レジストリから削除します。 *name* が"
"表現形式名でない場合には :exc:`Error` を送出します。"

#: ../../library/csv.rst:133
msgid ""
"Return the dialect associated with *name*.  An :exc:`Error` is raised if "
"*name* is not a registered dialect name.  This function returns an "
"immutable :class:`Dialect`."
msgstr ""
"*name* に関連づけられた表現形式を返します。 *name* が表現形式名でない場合に"
"は :exc:`Error` を送出します。この関数は不変の :class:`Dialect` を返します。"

#: ../../library/csv.rst:139
msgid "Return the names of all registered dialects."
msgstr "登録されている全ての表現形式を返します。"

#: ../../library/csv.rst:144
msgid ""
"Returns the current maximum field size allowed by the parser. If *new_limit* "
"is given, this becomes the new limit."
msgstr ""
"パーサが許容する現在の最大フィールドサイズを返します。 *new_limit* が渡された"
"ときは、その値が新しい上限になります。"

#: ../../library/csv.rst:148
msgid "The :mod:`csv` module defines the following classes:"
msgstr ":mod:`csv` モジュールでは以下のクラスを定義しています:"

#: ../../library/csv.rst:153
msgid ""
"Create an object that operates like a regular reader but maps the "
"information in each row to a :class:`dict` whose keys are given by the "
"optional *fieldnames* parameter."
msgstr ""
"通常の reader のように動作しますが、個々の行の情報を :class:`dict` にマップす"
"るオブジェクトを生成します。マップのキーは省略可能な *fieldnames* パラメータ"
"で与えられます。"

#: ../../library/csv.rst:157
msgid ""
"The *fieldnames* parameter is a :term:`sequence`.  If *fieldnames* is "
"omitted, the values in the first row of file *f* will be used as the "
"fieldnames and will be omitted from the results. If *fieldnames* is "
"provided, they will be used and the first row will be included in the "
"results.  Regardless of how the fieldnames are determined, the dictionary "
"preserves their original ordering."
msgstr ""

#: ../../library/csv.rst:164
msgid ""
"If a row has more fields than fieldnames, the remaining data is put in a "
"list and stored with the fieldname specified by *restkey* (which defaults to "
"``None``).  If a non-blank row has fewer fields than fieldnames, the missing "
"values are filled-in with the value of *restval* (which defaults to "
"``None``)."
msgstr ""
"行がフィールド名より多くのフィールドを持っていた場合、残りのデータはリストに"
"入れられて、 *restkey* により指定されたフィールド名 (デフォルトでは "
"``None``) で保存されます。空白でない行がフィールド名よりも少ないフィールドし"
"か持たない場合、足りない値は *restval* の値 (デフォルトは ``None`` ) によって"
"埋められます。"

#: ../../library/csv.rst:170
msgid ""
"All other optional or keyword arguments are passed to the underlying :class:"
"`reader` instance."
msgstr ""
"その他の省略可能またはキーワード形式のパラメータは、ベースになっている :"
"class:`reader` インスタンスに渡されます。"

#: ../../library/csv.rst:173 ../../library/csv.rst:217
msgid ""
"If the argument passed to *fieldnames* is an iterator, it will be coerced to "
"a :class:`list`."
msgstr ""
"*fieldnames* に渡された引数がイテレータの場合、 :class:`list` に変換されま"
"す。"

#: ../../library/csv.rst:175
msgid "Returned rows are now of type :class:`OrderedDict`."
msgstr "返される行の型は :class:`OrderedDict` になりました。"

#: ../../library/csv.rst:178
msgid "Returned rows are now of type :class:`dict`."
msgstr "返される行の型は :class:`dict` になりました。"

#: ../../library/csv.rst:183
msgid ""
">>> import csv\n"
">>> with open('names.csv', newline='') as csvfile:\n"
"...     reader = csv.DictReader(csvfile)\n"
"...     for row in reader:\n"
"...         print(row['first_name'], row['last_name'])\n"
"...\n"
"Eric Idle\n"
"John Cleese\n"
"\n"
">>> print(row)\n"
"{'first_name': 'John', 'last_name': 'Cleese'}"
msgstr ""

#: ../../library/csv.rst:199
msgid ""
"Create an object which operates like a regular writer but maps dictionaries "
"onto output rows.  The *fieldnames* parameter is a :mod:`sequence "
"<collections.abc>` of keys that identify the order in which values in the "
"dictionary passed to the :meth:`~csvwriter.writerow` method are written to "
"file *f*.  The optional *restval* parameter specifies the value to be "
"written if the dictionary is missing a key in *fieldnames*.  If the "
"dictionary passed to the :meth:`~csvwriter.writerow` method contains a key "
"not found in *fieldnames*, the optional *extrasaction* parameter indicates "
"what action to take. If it is set to ``'raise'``, the default value, a :exc:"
"`ValueError` is raised. If it is set to ``'ignore'``, extra values in the "
"dictionary are ignored. Any other optional or keyword arguments are passed "
"to the underlying :class:`writer` instance."
msgstr ""
"通常の writer のように動作しますが、辞書を出力行にマップするオブジェクトを生"
"成します。 *fieldnames* パラメータは、:meth:`~csvwriter.writerow` メソッドに"
"渡された辞書の値がどのような順番でファイル *f* に書かれるかを指定するキーの :"
"mod:`sequence <collections.abc>` です。 :meth:`~csvwriter.writerow` メソッド"
"に渡された辞書に *fieldnames* には存在しないキーが含まれている場合、オプショ"
"ンの *extrasaction* パラメータによってどんな動作を行うかが指定されます。この"
"値がデフォルト値である ``'raise'`` に設定されている場合、 :exc:`ValueError` "
"が送出されます。 ``'ignore'`` に設定されている場合、辞書の余分な値は無視され"
"ます。その他のパラメータはベースになっている :class:`writer` インスタンスに渡"
"されます。"

#: ../../library/csv.rst:214
msgid ""
"Note that unlike the :class:`DictReader` class, the *fieldnames* parameter "
"of the :class:`DictWriter` class is not optional."
msgstr ""
":class:`DictReader` クラスとは異なり、 :class:`DictWriter` の *fieldnames* パ"
"ラメータは省略可能ではありません。"

#: ../../library/csv.rst:221
msgid ""
"import csv\n"
"\n"
"with open('names.csv', 'w', newline='') as csvfile:\n"
"    fieldnames = ['first_name', 'last_name']\n"
"    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n"
"\n"
"    writer.writeheader()\n"
"    writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})\n"
"    writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'})\n"
"    writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'})"
msgstr ""

#: ../../library/csv.rst:235
msgid ""
"The :class:`Dialect` class is a container class whose attributes contain "
"information for how to handle doublequotes, whitespace, delimiters, etc. Due "
"to the lack of a strict CSV specification, different applications produce "
"subtly different CSV data.  :class:`Dialect` instances define how :class:"
"`reader` and :class:`writer` instances behave."
msgstr ""
":class:`Dialect` クラスはコンテナクラスです。その属性に、ダブルクォート、空白"
"文字、デリミタなどの扱い方に関する情報を含みます。CSV には厳密な規格がないた"
"め、アプリケーションによって生成される CSV データはそれぞれ僅かに異なりま"
"す。 :class:`Dialect` クラスのインスタンスは :class:`reader` と :class:"
"`writer` のインスタンスの挙動を定義します。"

#: ../../library/csv.rst:241
msgid ""
"All available :class:`Dialect` names are returned by :func:`list_dialects`, "
"and they can be registered with specific :class:`reader` and :class:`writer` "
"classes through their initializer (``__init__``) functions like this::"
msgstr ""

#: ../../library/csv.rst:245
msgid ""
"import csv\n"
"\n"
"with open('students.csv', 'w', newline='') as csvfile:\n"
"    writer = csv.writer(csvfile, dialect='unix')"
msgstr ""

#: ../../library/csv.rst:253
msgid ""
"The :class:`excel` class defines the usual properties of an Excel-generated "
"CSV file.  It is registered with the dialect name ``'excel'``."
msgstr ""
":class:`excel` クラスは Excel で生成される CSV ファイルの通常のプロパティを定"
"義します。これは ``'excel'`` という名前の dialect として登録されています。"

#: ../../library/csv.rst:259
msgid ""
"The :class:`excel_tab` class defines the usual properties of an Excel-"
"generated TAB-delimited file.  It is registered with the dialect name "
"``'excel-tab'``."
msgstr ""
":class:`excel_tab` クラスは Excel で生成されるタブ分割ファイルの通常のプロパ"
"ティを定義します。これは ``'excel-tab'`` という名前の dialect として登録され"
"ています。"

#: ../../library/csv.rst:265
msgid ""
"The :class:`unix_dialect` class defines the usual properties of a CSV file "
"generated on UNIX systems, i.e. using ``'\\n'`` as line terminator and "
"quoting all fields.  It is registered with the dialect name ``'unix'``."
msgstr ""
":class:`unix_dialect` クラスは UNIX システムで生成される CSV ファイルの通常の"
"プロパティ (行終端記号として ``'\\n'`` を用い全てのフィールドをクォートするも"
"の) を定義します。これは ``'unix'`` という名前の dialect として登録されていま"
"す。"

#: ../../library/csv.rst:274
msgid "The :class:`Sniffer` class is used to deduce the format of a CSV file."
msgstr ""
":class:`Sniffer` クラスは CSV ファイルの書式を推理するために用いられるクラス"
"です。"

#: ../../library/csv.rst:276
msgid "The :class:`Sniffer` class provides two methods:"
msgstr ":class:`Sniffer` クラスではメソッドを二つ提供しています:"

#: ../../library/csv.rst:280
msgid ""
"Analyze the given *sample* and return a :class:`Dialect` subclass reflecting "
"the parameters found.  If the optional *delimiters* parameter is given, it "
"is interpreted as a string containing possible valid delimiter characters."
msgstr ""
"与えられた *sample* を解析し、発見されたパラメータを反映した :class:"
"`Dialect` サブクラスを返します。オプションの *delimiters* パラメータを与えた"
"場合、有効なデリミタ文字を含んでいるはずの文字列として解釈されます。"

#: ../../library/csv.rst:288
msgid ""
"Analyze the sample text (presumed to be in CSV format) and return :const:"
"`True` if the first row appears to be a series of column headers. Inspecting "
"each column, one of two key criteria will be considered to estimate if the "
"sample contains a header:"
msgstr ""

#: ../../library/csv.rst:293
msgid "the second through n-th rows contain numeric values"
msgstr "2番目からn番目の行は数値を含みます。"

#: ../../library/csv.rst:294
msgid ""
"the second through n-th rows contain strings where at least one value's "
"length differs from that of the putative header of that column."
msgstr ""

#: ../../library/csv.rst:297
msgid ""
"Twenty rows after the first row are sampled; if more than half of columns + "
"rows meet the criteria, :const:`True` is returned."
msgstr ""
"1 行目の後の 20 行がサンプリングされます。半分以上の行 + 列が条件を満たす場"
"合、 :const:`True` が返されます。"

#: ../../library/csv.rst:302
msgid ""
"This method is a rough heuristic and may produce both false positives and "
"negatives."
msgstr ""
"このメソッドは大雑把なヒューリスティックであり、結果が偽陽性や偽陰性である可"
"能性があります。"

#: ../../library/csv.rst:305
msgid "An example for :class:`Sniffer` use::"
msgstr ":class:`Sniffer` の利用例::"

#: ../../library/csv.rst:307
msgid ""
"with open('example.csv', newline='') as csvfile:\n"
"    dialect = csv.Sniffer().sniff(csvfile.read(1024))\n"
"    csvfile.seek(0)\n"
"    reader = csv.reader(csvfile, dialect)\n"
"    # ... process CSV file contents here ..."
msgstr ""

#: ../../library/csv.rst:316
msgid "The :mod:`csv` module defines the following constants:"
msgstr ":mod:`csv` モジュールでは以下の定数を定義しています:"

#: ../../library/csv.rst:320
msgid "Instructs :class:`writer` objects to quote all fields."
msgstr ""
":class:`writer` オブジェクトに対し、全てのフィールドをクオートするように指示"
"します。"

#: ../../library/csv.rst:325
msgid ""
"Instructs :class:`writer` objects to only quote those fields which contain "
"special characters such as *delimiter*, *quotechar* or any of the characters "
"in *lineterminator*."
msgstr ""
":class:`writer` オブジェクトに対し、 *delimiter* 、 *quotechar* または "
"*lineterminator* に含まれる任意の文字のような特別な文字を含むフィールドだけを"
"クオートするように指示します。"

#: ../../library/csv.rst:332
msgid "Instructs :class:`writer` objects to quote all non-numeric fields."
msgstr ""
":class:`writer` オブジェクトに対し、全ての非数値フィールドをクオートするよう"
"に指示します。"

#: ../../library/csv.rst:334
msgid ""
"Instructs :class:`reader` objects to convert all non-quoted fields to type "
"*float*."
msgstr ""
":class:`reader` オブジェクトに、クォーテーションで囲まれていないすべての"
"フィールドを *float* 型に変換するよう指示します。"

#: ../../library/csv.rst:339
msgid ""
"Instructs :class:`writer` objects to never quote fields.  When the current "
"*delimiter* occurs in output data it is preceded by the current *escapechar* "
"character.  If *escapechar* is not set, the writer will raise :exc:`Error` "
"if any characters that require escaping are encountered."
msgstr ""
":class:`writer` オブジェクトに対し、フィールドを決してクオートしないように指"
"示します。現在の *delimiter* が出力データ中に現れた場合、現在設定されている "
"*escapechar* 文字が前に付けられます。 *escapechar* がセットされていない場合、"
"エスケープが必要な文字に遭遇した writer は :exc:`Error` を送出します。"

#: ../../library/csv.rst:344
msgid ""
"Instructs :class:`reader` objects to perform no special processing of quote "
"characters."
msgstr ""
":class:`reader` オブジェクトに、クオート文字に対する特殊処理を行わないよう指"
"示します。"

#: ../../library/csv.rst:348
msgid ""
"Instructs :class:`writer` objects to quote all fields which are not "
"``None``.  This is similar to :data:`QUOTE_ALL`, except that if a field "
"value is ``None`` an empty (unquoted) string is written."
msgstr ""

#: ../../library/csv.rst:352
msgid ""
"Instructs :class:`reader` objects to interpret an empty (unquoted) field as "
"``None`` and to otherwise behave as :data:`QUOTE_ALL`."
msgstr ""

#: ../../library/csv.rst:359
msgid ""
"Instructs :class:`writer` objects to always place quotes around fields which "
"are strings.  This is similar to :data:`QUOTE_NONNUMERIC`, except that if a "
"field value is ``None`` an empty (unquoted) string is written."
msgstr ""

#: ../../library/csv.rst:363
msgid ""
"Instructs :class:`reader` objects to interpret an empty (unquoted) string as "
"``None`` and to otherwise behave as :data:`QUOTE_NONNUMERIC`."
msgstr ""

#: ../../library/csv.rst:368
msgid "The :mod:`csv` module defines the following exception:"
msgstr ":mod:`csv` モジュールでは以下の例外を定義しています:"

#: ../../library/csv.rst:373
msgid "Raised by any of the functions when an error is detected."
msgstr "全ての関数において、エラーが検出された際に送出される例外です。"

#: ../../library/csv.rst:378
msgid "Dialects and Formatting Parameters"
msgstr "Dialect クラスと書式化パラメータ"

#: ../../library/csv.rst:380
msgid ""
"To make it easier to specify the format of input and output records, "
"specific formatting parameters are grouped together into dialects.  A "
"dialect is a subclass of the :class:`Dialect` class containing various "
"attributes describing the format of the CSV file.  When creating :class:"
"`reader` or :class:`writer` objects, the programmer can specify a string or "
"a subclass of the :class:`Dialect` class as the dialect parameter.  In "
"addition to, or instead of, the *dialect* parameter, the programmer can also "
"specify individual formatting parameters, which have the same names as the "
"attributes defined below for the :class:`Dialect` class."
msgstr ""

#: ../../library/csv.rst:390
msgid "Dialects support the following attributes:"
msgstr "Dialect は以下の属性をサポートしています:"

#: ../../library/csv.rst:395
msgid ""
"A one-character string used to separate fields.  It defaults to ``','``."
msgstr ""
"フィールド間を分割するのに用いられる 1 文字からなる文字列です。デフォルトで"
"は ``','`` です。"

#: ../../library/csv.rst:400
msgid ""
"Controls how instances of *quotechar* appearing inside a field should "
"themselves be quoted.  When :const:`True`, the character is doubled. When :"
"const:`False`, the *escapechar* is used as a prefix to the *quotechar*.  It "
"defaults to :const:`True`."
msgstr ""
"フィールド内に現れた *quotechar* のインスタンスで、クオートではないその文字自"
"身でなければならない文字をどのようにクオートするかを制御します。 :const:"
"`True` の場合、この文字は二重化されます。 :const:`False` の場合、 "
"*escapechar* は *quotechar* の前に置かれます。デフォルトでは :const:`True` で"
"す。"

#: ../../library/csv.rst:405
msgid ""
"On output, if *doublequote* is :const:`False` and no *escapechar* is set, :"
"exc:`Error` is raised if a *quotechar* is found in a field."
msgstr ""
"出力においては、 *doublequote* が :const:`False` で *escapechar* がセットされ"
"ていない場合、フィールド内に *quotechar* が現れると :exc:`Error` が送出されま"
"す。"

#: ../../library/csv.rst:411
msgid ""
"A one-character string used by the writer to escape the *delimiter* if "
"*quoting* is set to :const:`QUOTE_NONE` and the *quotechar* if *doublequote* "
"is :const:`False`. On reading, the *escapechar* removes any special meaning "
"from the following character. It defaults to :const:`None`, which disables "
"escaping."
msgstr ""
"writer が、 *quoting* が :const:`QUOTE_NONE` に設定されている場合に "
"*delimiter* をエスケープするため、および、 *doublequote* が :const:`False` の"
"場合に *quotechar* をエスケープするために用いられる、 1 文字からなる文字列で"
"す。読み込み時には *escapechar* はそれに引き続く文字の特別な意味を取り除きま"
"す。デフォルトでは :const:`None` で、エスケープを行ないません。"

#: ../../library/csv.rst:416
msgid "An empty *escapechar* is not allowed."
msgstr "空の *escapechar* は許可されていません。"

#: ../../library/csv.rst:421
msgid ""
"The string used to terminate lines produced by the :class:`writer`. It "
"defaults to ``'\\r\\n'``."
msgstr ""
":class:`writer` が作り出す各行を終端する際に用いられる文字列です。デフォルト"
"では ``'\\r\\n'`` です。"

#: ../../library/csv.rst:426
msgid ""
"The :class:`reader` is hard-coded to recognise either ``'\\r'`` or ``'\\n'`` "
"as end-of-line, and ignores *lineterminator*. This behavior may change in "
"the future."
msgstr ""
":class:`reader` は ``'\\r'`` または ``'\\n'`` のどちらかを行末と認識するよう"
"にハードコードされており、 *lineterminator* を無視します。この振る舞いは将来"
"変更されるかもしれません。"

#: ../../library/csv.rst:433
msgid ""
"A one-character string used to quote fields containing special characters, "
"such as the *delimiter* or *quotechar*, or which contain new-line "
"characters.  It defaults to ``'\"'``."
msgstr ""
"*delimiter* や *quotechar* といった特殊文字を含むか、改行文字を含むフィールド"
"をクオートする際に用いられる 1 文字からなる文字列です。デフォルトでは "
"``'\"'`` です。"

#: ../../library/csv.rst:437
msgid "An empty *quotechar* is not allowed."
msgstr "空の *quotechar* は許可されていません。"

#: ../../library/csv.rst:442
msgid ""
"Controls when quotes should be generated by the writer and recognised by the "
"reader.  It can take on any of the :ref:`QUOTE_\\* constants <csv-"
"constants>` and defaults to :const:`QUOTE_MINIMAL`."
msgstr ""
"クオートがいつ writer によって生成されるか、また reader によって認識されるか"
"を制御します。:ref:`QUOTE_\\* constants <csv-constants>`  のいずれかをとるこ"
"とができ、デフォルトでは :const:`QUOTE_MINIMAL` です。"

#: ../../library/csv.rst:449
msgid ""
"When :const:`True`, spaces immediately following the *delimiter* are "
"ignored. The default is :const:`False`."
msgstr ""
":const:`True` の場合、 *delimiter* の直後に続く空白は無視されます。デフォルト"
"では :const:`False` です。"

#: ../../library/csv.rst:455
msgid ""
"When ``True``, raise exception :exc:`Error` on bad CSV input. The default is "
"``False``."
msgstr ""
"``True`` の場合、 不正な CSV 入力に対して :exc:`Error` を送出します。デフォル"
"トでは ``False`` です。"

#: ../../library/csv.rst:461
msgid "Reader Objects"
msgstr "reader オブジェクト"

#: ../../library/csv.rst:463
msgid ""
"Reader objects (:class:`DictReader` instances and objects returned by the :"
"func:`reader` function) have the following public methods:"
msgstr ""
"reader オブジェクト(:class:`DictReader` インスタンス、および :func:`reader` "
"関数によって返されたオブジェクト) は、以下の public なメソッドを持っています:"

#: ../../library/csv.rst:468
msgid ""
"Return the next row of the reader's iterable object as a list (if the object "
"was returned from :func:`reader`) or a dict (if it is a :class:`DictReader` "
"instance), parsed according to the current :class:`Dialect`.  Usually you "
"should call this as ``next(reader)``."
msgstr ""
"reader の反復可能なオブジェクトから、現在の表現形式 (:class:`Dialect`) に基づ"
"いて次の行を解析してリスト（オブジェクトが :func:`reader` から返された場合）"
"または辞書 （ :class:`DictReader` のインスタンスの場合）として返します。通常"
"は ``next(reader)`` のようにして呼び出すことになります。"

#: ../../library/csv.rst:474
msgid "Reader objects have the following public attributes:"
msgstr "reader オブジェクトには以下の公開属性があります:"

#: ../../library/csv.rst:478
msgid "A read-only description of the dialect in use by the parser."
msgstr "パーサで使われる表現形式の読み出し専用の記述です。"

#: ../../library/csv.rst:483
msgid ""
"The number of lines read from the source iterator. This is not the same as "
"the number of records returned, as records can span multiple lines."
msgstr ""
"ソースイテレータから読んだ行数です。この数は返されるレコードの数とは、レコー"
"ドが複数行に亘ることがあるので、一致しません。"

#: ../../library/csv.rst:487
msgid "DictReader objects have the following public attribute:"
msgstr "DictReader オブジェクトは、以下の public な属性を持っています:"

#: ../../library/csv.rst:491
msgid ""
"If not passed as a parameter when creating the object, this attribute is "
"initialized upon first access or when the first record is read from the file."
msgstr ""
"オブジェクトを生成するときに渡されなかった場合、この属性は最初のアクセス時"
"か、ファイルから最初のレコードを読み出したときに初期化されます。"

#: ../../library/csv.rst:498
msgid "Writer Objects"
msgstr "writer オブジェクト"

#: ../../library/csv.rst:500
msgid ""
":class:`writer` objects (:class:`DictWriter` instances and objects returned "
"by the :func:`writer` function) have the following public methods.  A *row* "
"must be an iterable of strings or numbers for :class:`writer` objects and a "
"dictionary mapping fieldnames to strings or numbers (by passing them "
"through :func:`str` first) for :class:`DictWriter` objects.  Note that "
"complex numbers are written out surrounded by parens. This may cause some "
"problems for other programs which read CSV files (assuming they support "
"complex numbers at all)."
msgstr ""
":class:`writer` オブジェクト(:class:`DictWriter` インスタンス、および  :func:"
"`writer` 関数によって返されたオブジェクト) は、以下の public なメソッドを持っ"
"ています: *row* には、 :class:`writer` オブジェクトの場合には文字列か数値のイ"
"テラブルを指定し、 :class:`DictWriter` オブジェクトの場合はフィールド名をキー"
"として対応する文字列か数値を格納した辞書オブジェクトを指定します(数値は :"
"func:`str` で変換されます)。複素数を出力する場合、値をかっこで囲んで出力しま"
"す。このため、CSV ファイルを読み込むアプリケーションで（そのアプリケーション"
"が複素数をサポートしていたとしても）問題が発生する場合があります。"

#: ../../library/csv.rst:511
msgid ""
"Write the *row* parameter to the writer's file object, formatted according "
"to the current :class:`Dialect`. Return the return value of the call to the "
"*write* method of the underlying file object."
msgstr ""
"現在の表現形式 (:class:`Dialect`.)に沿ってフォーマットされた *row* パラメータ"
"を writer のファイルオブジェクトに書き込みます。ファイルオブジェクトの "
"*write* メソッドを呼び出した際の戻り値を返します。"

#: ../../library/csv.rst:515
msgid "Added support of arbitrary iterables."
msgstr "任意のイテラブルのサポートの追加。"

#: ../../library/csv.rst:520
msgid ""
"Write all elements in *rows* (an iterable of *row* objects as described "
"above) to the writer's file object, formatted according to the current "
"dialect."
msgstr ""
"*rows* 引数 (上で解説した *row* オブジェクトのイテラブル) の全ての要素を現在"
"の表現形式に基づいて書式化し、writer のファイルオブジェクトに書き込みます。"

#: ../../library/csv.rst:524
msgid "Writer objects have the following public attribute:"
msgstr "writer オブジェクトには以下の公開属性があります:"

#: ../../library/csv.rst:529
msgid "A read-only description of the dialect in use by the writer."
msgstr "writer で使われる表現形式の読み出し専用の記述です。"

#: ../../library/csv.rst:532
msgid "DictWriter objects have the following public method:"
msgstr "DictWriter のオブジェクトは以下の public メソッドを持っています:"

#: ../../library/csv.rst:537
msgid ""
"Write a row with the field names (as specified in the constructor) to the "
"writer's file object, formatted according to the current dialect. Return the "
"return value of the :meth:`csvwriter.writerow` call used internally."
msgstr ""

#: ../../library/csv.rst:542
msgid ""
":meth:`writeheader` now also returns the value returned by the :meth:"
"`csvwriter.writerow` method it uses internally."
msgstr ""
":meth:`writeheader` は内部的に利用している :meth:`csvwriter.writerow` メソッ"
"ドの返り値を返すようになりました。"

#: ../../library/csv.rst:550
msgid "Examples"
msgstr "使用例"

#: ../../library/csv.rst:552
msgid "The simplest example of reading a CSV file::"
msgstr "最も簡単な CSV ファイル読み込みの例です::"

#: ../../library/csv.rst:554
msgid ""
"import csv\n"
"with open('some.csv', newline='') as f:\n"
"    reader = csv.reader(f)\n"
"    for row in reader:\n"
"        print(row)"
msgstr ""

#: ../../library/csv.rst:560
msgid "Reading a file with an alternate format::"
msgstr "別の書式での読み込み::"

#: ../../library/csv.rst:562
msgid ""
"import csv\n"
"with open('passwd', newline='') as f:\n"
"    reader = csv.reader(f, delimiter=':', quoting=csv.QUOTE_NONE)\n"
"    for row in reader:\n"
"        print(row)"
msgstr ""

#: ../../library/csv.rst:568
msgid "The corresponding simplest possible writing example is::"
msgstr "上に対して、単純な書き込みのプログラム例は以下のようになります。 ::"

#: ../../library/csv.rst:570
msgid ""
"import csv\n"
"with open('some.csv', 'w', newline='') as f:\n"
"    writer = csv.writer(f)\n"
"    writer.writerows(someiterable)"
msgstr ""

#: ../../library/csv.rst:575
msgid ""
"Since :func:`open` is used to open a CSV file for reading, the file will by "
"default be decoded into unicode using the system default encoding (see :func:"
"`locale.getencoding`).  To decode a file using a different encoding, use the "
"``encoding`` argument of open::"
msgstr ""
":func:`open` が CSV ファイルの読み込みに使われるため、ファイルはデフォルトで"
"はシステムのデフォルトエンコーディングでユニコード文字列にデコードされます (:"
"func:`locale.getencoding` を参照)。他のエンコーディングを用いてデコードするに"
"は、open の引数 ``encoding`` を設定して、以下のようにします::"

#: ../../library/csv.rst:580
msgid ""
"import csv\n"
"with open('some.csv', newline='', encoding='utf-8') as f:\n"
"    reader = csv.reader(f)\n"
"    for row in reader:\n"
"        print(row)"
msgstr ""

#: ../../library/csv.rst:586
msgid ""
"The same applies to writing in something other than the system default "
"encoding: specify the encoding argument when opening the output file."
msgstr ""
"システムのデフォルトエンコーディング以外で書き込む場合も同様です。出力ファイ"
"ルを開く際に引数 ``encoding`` を明示してください。"

#: ../../library/csv.rst:589
msgid "Registering a new dialect::"
msgstr "新しい表現形式の登録::"

#: ../../library/csv.rst:591
msgid ""
"import csv\n"
"csv.register_dialect('unixpwd', delimiter=':', quoting=csv.QUOTE_NONE)\n"
"with open('passwd', newline='') as f:\n"
"    reader = csv.reader(f, 'unixpwd')"
msgstr ""

#: ../../library/csv.rst:596
msgid ""
"A slightly more advanced use of the reader --- catching and reporting "
"errors::"
msgstr ""
"もう少し手の込んだ reader の使い方 --- エラーを捉えてレポートします。 ::"

#: ../../library/csv.rst:598
msgid ""
"import csv, sys\n"
"filename = 'some.csv'\n"
"with open(filename, newline='') as f:\n"
"    reader = csv.reader(f)\n"
"    try:\n"
"        for row in reader:\n"
"            print(row)\n"
"    except csv.Error as e:\n"
"        sys.exit('file {}, line {}: {}'.format(filename, reader.line_num, e))"
msgstr ""

#: ../../library/csv.rst:608
msgid ""
"And while the module doesn't directly support parsing strings, it can easily "
"be done::"
msgstr ""
"このモジュールは文字列の解析は直接サポートしませんが、簡単にできます。 ::"

#: ../../library/csv.rst:611
msgid ""
"import csv\n"
"for row in csv.reader(['one,two,three']):\n"
"    print(row)"
msgstr ""

#: ../../library/csv.rst:617
msgid "Footnotes"
msgstr "脚注"

#: ../../library/csv.rst:618
msgid ""
"If ``newline=''`` is not specified, newlines embedded inside quoted fields "
"will not be interpreted correctly, and on platforms that use ``\\r\\n`` "
"linendings on write an extra ``\\r`` will be added.  It should always be "
"safe to specify ``newline=''``, since the csv module does its own (:term:"
"`universal <universal newlines>`) newline handling."
msgstr ""
"``newline=''`` が指定されない場合、クォートされたフィールド内の改行は適切に解"
"釈されず、書き込み時に ``\\r\\n`` を行末に用いる処理系では余分な ``\\r`` が追"
"加されてしまいます。csv モジュールは独自 (:term:`universal <universal "
"newlines>`) の改行処理を行うため、``newline=''`` を指定することは常に安全で"
"す。"

#: ../../library/csv.rst:11
msgid "csv"
msgstr "csv"

#: ../../library/csv.rst:11
msgid "data"
msgstr "データ"

#: ../../library/csv.rst:11
msgid "tabular"
msgstr "表形式"

#: ../../library/csv.rst:53
msgid "universal newlines"
msgstr "universal newlines"

#: ../../library/csv.rst:53
msgid "csv.reader function"
msgstr "csv.reader 関数"
