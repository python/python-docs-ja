# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/csv.rst:3
msgid ":mod:`csv` --- CSV File Reading and Writing"
msgstr ":mod:`csv` --- CSV ファイルの読み書き"

#: ../../library/csv.rst:16
msgid ""
"The so-called CSV (Comma Separated Values) format is the most common import "
"and export format for spreadsheets and databases.  There is no \"CSV "
"standard\", so the format is operationally defined by the many applications "
"which read and write it.  The lack of a standard means that subtle "
"differences often exist in the data produced and consumed by different "
"applications.  These differences can make it annoying to process CSV files "
"from multiple sources.  Still, while the delimiters and quoting characters "
"vary, the overall format is similar enough that it is possible to write a "
"single module which can efficiently manipulate such data, hiding the details "
"of reading and writing the data from the programmer."
msgstr ""
"CSV (Comma Separated Values、カンマ区切り値列) と呼ばれる形式は、 スプレッド"
"シートやデータベース間でのデータのインポートやエクスポートにおける最も一般的"
"な形式です。\"CSV 標準\" は存在しないため、 CSV 形式はデータを読み書きする多"
"くのアプリケーション上の操作に応じて定義されているにすぎません。標準がないと"
"いうことは、異なるアプリケーション によって生成されたり取り込まれたりするデー"
"タ間では、しばしば微妙な違いが発生するということを意味します。こうした違いの"
"ために、複数のデータ源から得られた CSV ファイルを処理する作業が鬱陶しいものに"
"なることがあります。とはいえ、デリミタ (delimiter) やクオート文字の 相違は"
"あっても、全体的な形式は十分似通っているため、こうしたデータを効率的に操作"
"し、データの読み書きにおける細々としたことをプログラマ から隠蔽するような単一"
"のモジュールを書くことは可能です。"

#: ../../library/csv.rst:27
msgid ""
"The :mod:`csv` module implements classes to read and write tabular data in "
"CSV format.  It allows programmers to say, \"write this data in the format "
"preferred by Excel,\" or \"read data from this file which was generated by "
"Excel,\" without knowing the precise details of the CSV format used by "
"Excel.  Programmers can also describe the CSV formats understood by other "
"applications or define their own special-purpose CSV formats."
msgstr ""
":mod:`csv` モジュールでは、CSV 形式で書かれたテーブル状のデータを読み書きする"
"ためのクラスを実装しています。このモジュールを使うことで、プログラマは Excel "
"で使われている CSV  形式に関して詳しい知識をもっていなくても、 \"このデータ"
"を Excel で推奨されている形式で書いてください\" とか、 \"データを Excel で作"
"成されたこのファイルから読み出してください\" と言うことができます。プログラマ"
"はまた、他のアプリケーションが解釈できる CSV 形式を記述したり、独自の特殊な目"
"的をもった CSV 形式を定義することができます。"

#: ../../library/csv.rst:34
msgid ""
"The :mod:`csv` module's :class:`reader` and :class:`writer` objects read and "
"write sequences.  Programmers can also read and write data in dictionary "
"form using the :class:`DictReader` and :class:`DictWriter` classes."
msgstr ""
":mod:`csv` モジュールの :class:`reader` および :class:`writer` オブジェクトは"
"シーケンス型を読み書きします。プログラマは :class:`DictReader` や :class:"
"`DictWriter` クラスを使うことで、データを辞書形式で読み書きすることもできま"
"す。"

#: ../../library/csv.rst:40
msgid ""
"This version of the :mod:`csv` module doesn't support Unicode input.  Also, "
"there are currently some issues regarding ASCII NUL characters.  "
"Accordingly, all input should be UTF-8 or printable ASCII to be safe; see "
"the examples in section :ref:`csv-examples`."
msgstr ""
"このバージョンの :mod:`csv` モジュールは Unicode 入力をサポートしていません。"
"また、現在のところ、 ASCII NUL 文字に関連したいくつかの問題があります。従っ"
"て、安全を期すには、全ての入力を UTF-8 または印字可能な ASCII にしなければな"
"りません。これについては :ref:`csv-examples` 節の例を参照してください。"

#: ../../library/csv.rst:48
msgid ":pep:`305` - CSV File API"
msgstr ":pep:`305` - CSV File API"

#: ../../library/csv.rst:49
msgid "The Python Enhancement Proposal which proposed this addition to Python."
msgstr ""
"Python へのこのモジュールの追加を提案している Python 改良案 (PEP: Python "
"Enhancement Proposal)。"

#: ../../library/csv.rst:55
msgid "Module Contents"
msgstr "モジュールコンテンツ"

#: ../../library/csv.rst:57
msgid "The :mod:`csv` module defines the following functions:"
msgstr ":mod:`csv` モジュールでは以下の関数を定義しています:"

#: ../../library/csv.rst:62
msgid ""
"Return a reader object which will iterate over lines in the given *csvfile*. "
"*csvfile* can be any object which supports the :term:`iterator` protocol and "
"returns a string each time its :meth:`!next` method is called --- file "
"objects and list objects are both suitable.   If *csvfile* is a file object, "
"it must be opened with the 'b' flag on platforms where that makes a "
"difference.  An optional *dialect* parameter can be given which is used to "
"define a set of parameters specific to a particular CSV dialect.  It may be "
"an instance of a subclass of the :class:`Dialect` class or one of the "
"strings returned by the :func:`list_dialects` function.  The other optional "
"*fmtparams* keyword arguments can be given to override individual formatting "
"parameters in the current dialect.  For full details about the dialect and "
"formatting parameters, see section :ref:`csv-fmt-params`."
msgstr ""
"与えられた *csvfile* 内の行を反復処理するような reader  オブジェクトを返しま"
"す。 *csvfile* はイテレータ(:term:`iterator`)プロトコル をサポートし、 :meth:"
"`!next` メソッドが呼ばれた際に常に文字列を返すような任意のオブジェクトにする"
"ことができます --- ファイルオブジェクトでも リストでも構いません。 *csvfile* "
"がファイルオブジェクトの場合、ファイルオブジェクトの形式に違いがあるようなプ"
"ラットフォームでは 'b' フラグを付けて開かなければなりません。オプションとし"
"て *dialect* パラメタを与えることができ、特定の CSV 表現形式 (dialect) 特有の"
"パラメタの集合を定義するために使われます。 *dialect* パラメタは :class:"
"`Dialect` クラスのサブクラス のインスタンスか、 :func:`list_dialects` 関数が"
"返す文字列の一つにすることができます。別のオプションである *fmtparams* キー"
"ワード引数は、現在の表現形式における個々の書式パラメタを上書きするために与え"
"ることができます。表現形式および書式化パラメタの詳細については、 :ref:`csv-"
"fmt-params` 節を参照してください。"

#: ../../library/csv.rst:75
msgid ""
"Each row read from the csv file is returned as a list of strings.  No "
"automatic data type conversion is performed."
msgstr ""
"csv ファイルから読み込まれた各行は、文字列のリストとして返されます。 データ型"
"の変換が自動的に行われることはありません。"

#: ../../library/csv.rst:78 ../../library/csv.rst:118 ../../library/csv.rst:184
#: ../../library/csv.rst:218
msgid "A short usage example::"
msgstr "短い利用例::"

#: ../../library/csv.rst:88
msgid ""
"The parser is now stricter with respect to multi-line quoted fields. "
"Previously, if a line ended within a quoted field without a terminating "
"newline character, a newline would be inserted into the returned field. This "
"behavior caused problems when reading files which contained carriage return "
"characters within fields. The behavior was changed to return the field "
"without inserting newlines. As a consequence, if newlines embedded within "
"fields are important, the input should be split into lines in a manner which "
"preserves the newline characters."
msgstr ""
"パーサが複数行に亘るクオートされたフィールドに関して厳格になりました。以前"
"は、クオートされたフィールドの中で終端の改行文字無しに行が終わった場合、 返さ"
"れるフィールドには改行が挿入されていましたが、この振る舞いはフィールドの中に"
"復帰文字を含むようなファイルを読むときに問題を起こしていました。そこでフィー"
"ルドに改行文字を挿入せずに返すように改められました。この結果、フィールドに埋"
"め込まれた改行文字が重要ならば、入力は改行文字を保存するような仕方で複数行に"
"分割されるはずです。"

#: ../../library/csv.rst:100
msgid ""
"Return a writer object responsible for converting the user's data into "
"delimited strings on the given file-like object.  *csvfile* can be any "
"object with a :func:`write` method.  If *csvfile* is a file object, it must "
"be opened with the 'b' flag on platforms where that makes a difference.  An "
"optional *dialect* parameter can be given which is used to define a set of "
"parameters specific to a particular CSV dialect.  It may be an instance of a "
"subclass of the :class:`Dialect` class or one of the strings returned by "
"the :func:`list_dialects` function.  The other optional *fmtparams* keyword "
"arguments can be given to override individual formatting parameters in the "
"current dialect.  For full details about the dialect and formatting "
"parameters, see section :ref:`csv-fmt-params`. To make it as easy as "
"possible to interface with modules which implement the DB API, the value :"
"const:`None` is written as the empty string.  While this isn't a reversible "
"transformation, it makes it easier to dump SQL NULL data values to CSV files "
"without preprocessing the data returned from a ``cursor.fetch*`` call. "
"Floats are stringified with :func:`repr` before being written. All other non-"
"string data are stringified with :func:`str` before being written."
msgstr ""
"ユーザが与えたデータをデリミタで区切られた文字列に変換し、与えられたファイル"
"オブジェクトに書き込むための writer オブジェクトを返します。\n"
"*csvfile* は :func:`write` メソッドを持つ任意のオブジェクトです。\n"
"*csvfile* がファイルオブジェクトの場合、 'b' フラグが意味を持つプラットフォー"
"ムでは 'b' フラグを付けて開かなければなりません。\n"
"オプションとして *dialect* 引数を与えることができ、利用する CSV 表現形式 "
"(dialect) を指定することができます。\n"
"*dialect* パラメタは :class:`Dialect` クラスのサブクラスのインスタンスか、 :"
"func:`list_dialects` 関数が返す文字列の 1 つにすることができます。\n"
"別のオプション引数である *fmtparams* キーワード引数は、現在の表現形式における"
"個々の書式パラメタを上書きするために与えることができます。\n"
"*dialect* と書式パラメタについての詳細は、 :ref:`csv-fmt-params` 節を参照して"
"ください。\n"
"DB API を実装するモジュールとのインタフェースを可能な限り容易にするために、 :"
"const:`None` は空文字列として書き込まれます。\n"
"この処理は可逆な変換ではありませんが、SQL で NULL データ値を CSV にダンプする"
"処理を、 ``cursor.fetch*`` 呼び出しによって 返されたデータを前処理することな"
"く簡単に行うことができます。\n"
"浮動小数点数は、書き出される前に :func:`repr` を使って文字列に変換されま"
"す。\n"
"他の非文字列データは、書き出される前に :func:`str` を使って文字列に変換されま"
"す。"

#: ../../library/csv.rst:130
msgid ""
"Associate *dialect* with *name*.  *name* must be a string or Unicode object. "
"The dialect can be specified either by passing a sub-class of :class:"
"`Dialect`, or by *fmtparams* keyword arguments, or both, with keyword "
"arguments overriding parameters of the dialect. For full details about the "
"dialect and formatting parameters, see section :ref:`csv-fmt-params`."
msgstr ""
"*dialect* を *name* と関連付けます。 *name* は文字列か Unicode オブジェクトで"
"なければなりません。表現形式(dialect)は :class:`Dialect` のサブクラスを渡す"
"か、またはキーワード引数 *fmtparams* 、もしくは両方で指定できますが、 キー"
"ワード引数の方が優先されます。表現形式と書式化パラメタについての詳細は、 :"
"ref:`csv-fmt-params` 節を参照してください。"

#: ../../library/csv.rst:139
msgid ""
"Delete the dialect associated with *name* from the dialect registry.  An :"
"exc:`Error` is raised if *name* is not a registered dialect name."
msgstr ""
"*name* に関連づけられた表現形式を表現形式レジストリから削除します。 *name* が"
"表現形式名でない場合には :exc:`Error` を送出します。"

#: ../../library/csv.rst:145
msgid ""
"Return the dialect associated with *name*.  An :exc:`Error` is raised if "
"*name* is not a registered dialect name."
msgstr ""
"*name* に関連づけられた表現形式を返します。 *name* が表現形式名でない場合に"
"は :exc:`Error` を送出します。"

#: ../../library/csv.rst:148
msgid ""
"This function now returns an immutable :class:`Dialect`.  Previously an "
"instance of the requested dialect was returned.  Users could modify the "
"underlying class, changing the behavior of active readers and writers."
msgstr ""
"この関数は :term:`immutable` な :class:`Dialect` クラスを返します。 以前は、"
"要求された dialect のインスタンスが返されていました。 ユーザーはクラスを操作"
"すうることで、アクティブな reader や writer の動作を変更することができます。"

#: ../../library/csv.rst:155
msgid "Return the names of all registered dialects."
msgstr "登録されている全ての表現形式を返します。"

#: ../../library/csv.rst:160
msgid ""
"Returns the current maximum field size allowed by the parser. If *new_limit* "
"is given, this becomes the new limit."
msgstr ""
"パーサが許容する現在の最大フィールドサイズを返します。 *new_limit* が渡された"
"ときは、その値が新しい上限になります。"

#: ../../library/csv.rst:165
msgid "The :mod:`csv` module defines the following classes:"
msgstr ":mod:`csv` モジュールでは以下のクラスを定義しています:"

#: ../../library/csv.rst:171
msgid ""
"Create an object which operates like a regular reader but maps the "
"information read into a dict whose keys are given by the optional "
"*fieldnames* parameter.  The *fieldnames* parameter is a :ref:`sequence "
"<collections-abstract-base-classes>` whose elements are associated with the "
"fields of the input data in order. These elements become the keys of the "
"resulting dictionary.  If the *fieldnames* parameter is omitted, the values "
"in the first row of the file *f* will be used as the fieldnames.  If the row "
"read has more fields than the fieldnames sequence, the remaining data is "
"added as a sequence keyed by the value of *restkey*.  If the row read has "
"fewer fields than the fieldnames sequence, the remaining keys take the value "
"of the optional *restval* parameter.  Any other optional or keyword "
"arguments are passed to the underlying :class:`reader` instance."
msgstr ""

#: ../../library/csv.rst:200
msgid ""
"Create an object which operates like a regular writer but maps dictionaries "
"onto output rows.  The *fieldnames* parameter is a :ref:`sequence "
"<collections-abstract-base-classes>` of keys that identify the order in "
"which values in the dictionary passed to the :meth:`writerow` method are "
"written to the file *f*.  The optional *restval* parameter specifies the "
"value to be written if the dictionary is missing a key in *fieldnames*.  If "
"the dictionary passed to the :meth:`writerow` method contains a key not "
"found in *fieldnames*, the optional *extrasaction* parameter indicates what "
"action to take.  If it is set to ``'raise'`` a :exc:`ValueError` is raised. "
"If it is set to ``'ignore'``, extra values in the dictionary are ignored. "
"Any other optional or keyword arguments are passed to the underlying :class:"
"`writer` instance."
msgstr ""

#: ../../library/csv.rst:213
msgid ""
"Note that unlike the :class:`DictReader` class, the *fieldnames* parameter "
"of the :class:`DictWriter` is not optional.  Since Python's :class:`dict` "
"objects are not ordered, there is not enough information available to deduce "
"the order in which the row should be written to the file *f*."
msgstr ""

#: ../../library/csv.rst:234
msgid ""
"The :class:`Dialect` class is a container class relied on primarily for its "
"attributes, which are used to define the parameters for a specific :class:"
"`reader` or :class:`writer` instance."
msgstr ""
":class:`Dialect` クラスはコンテナクラスで、基本的な用途としては、その属性を特"
"定の :class:`reader` や :class:`writer` インスタンスのパラメタを定義するため"
"に用います。"

#: ../../library/csv.rst:241
msgid ""
"The :class:`excel` class defines the usual properties of an Excel-generated "
"CSV file.  It is registered with the dialect name ``'excel'``."
msgstr ""
":class:`excel` クラスは Excel で生成される CSV ファイルの通常のプロパティを定"
"義します。これは ``'excel'`` という名前の dialect として登録されています。"

#: ../../library/csv.rst:247
msgid ""
"The :class:`excel_tab` class defines the usual properties of an Excel-"
"generated TAB-delimited file.  It is registered with the dialect name "
"``'excel-tab'``."
msgstr ""
":class:`excel_tab` クラスは Excel で生成されるタブ分割ファイルの通常のプロパ"
"ティを定義します。これは ``'excel-tab'`` という名前の dialect として登録され"
"ています。"

#: ../../library/csv.rst:253
msgid "The :class:`Sniffer` class is used to deduce the format of a CSV file."
msgstr ""
":class:`Sniffer` クラスは CSV ファイルの書式を推理するために用いられるクラス"
"です。"

#: ../../library/csv.rst:255
msgid "The :class:`Sniffer` class provides two methods:"
msgstr ":class:`Sniffer` クラスではメソッドを二つ提供しています:"

#: ../../library/csv.rst:259
msgid ""
"Analyze the given *sample* and return a :class:`Dialect` subclass reflecting "
"the parameters found.  If the optional *delimiters* parameter is given, it "
"is interpreted as a string containing possible valid delimiter characters."
msgstr ""
"与えられた *sample* を解析し、発見されたパラメタを反映した :class:`Dialect` "
"サブクラスを返します。オプションの *delimiters* パラメタを与えた場合、有効な"
"デリミタ文字を含んでいるはずの文字列として解釈されます。"

#: ../../library/csv.rst:267
msgid ""
"Analyze the sample text (presumed to be in CSV format) and return :const:"
"`True` if the first row appears to be a series of column headers."
msgstr ""
"(CSV 形式と仮定される) サンプルテキストを解析して、最初の行がカラムヘッダの羅"
"列のように推察される場合 :const:`True` を返します。"

#: ../../library/csv.rst:270
msgid "An example for :class:`Sniffer` use::"
msgstr ":class:`Sniffer` の利用例::"

#: ../../library/csv.rst:279
msgid "The :mod:`csv` module defines the following constants:"
msgstr ":mod:`csv` モジュールでは以下の定数を定義しています:"

#: ../../library/csv.rst:283
msgid "Instructs :class:`writer` objects to quote all fields."
msgstr ""
":class:`writer` オブジェクトに対し、全てのフィールドをクオートするように指示"
"します。"

#: ../../library/csv.rst:288
msgid ""
"Instructs :class:`writer` objects to only quote those fields which contain "
"special characters such as *delimiter*, *quotechar* or any of the characters "
"in *lineterminator*."
msgstr ""
":class:`writer` オブジェクトに対し、 *delimiter* 、 *quotechar* または "
"*lineterminator* に含まれる任意の文字のような特別な文字を含むフィールドだけを"
"クオートするように指示します。"

#: ../../library/csv.rst:295
msgid "Instructs :class:`writer` objects to quote all non-numeric fields."
msgstr ""
":class:`writer` オブジェクトに対し、全ての非数値フィールドをクオートするよう"
"に指示します。"

#: ../../library/csv.rst:297
msgid "Instructs the reader to convert all non-quoted fields to type *float*."
msgstr ""
":class:`reader` に対しては、クオートされていない全てのフィールドを *float* 型"
"に変換するよう指示します。"

#: ../../library/csv.rst:302
msgid ""
"Instructs :class:`writer` objects to never quote fields.  When the current "
"*delimiter* occurs in output data it is preceded by the current *escapechar* "
"character.  If *escapechar* is not set, the writer will raise :exc:`Error` "
"if any characters that require escaping are encountered."
msgstr ""
":class:`writer` オブジェクトに対し、フィールドを決してクオートしないように指"
"示します。現在の *delimiter* が出力データ中に現れた場合、現在設定されている "
"*escapechar* 文字が前に付けられます。 *escapechar* がセットされていない場合、"
"エスケープが必要な文字に遭遇した writer は :exc:`Error` を送出します。"

#: ../../library/csv.rst:307
msgid ""
"Instructs :class:`reader` to perform no special processing of quote "
"characters."
msgstr ""
":class:`reader` に対しては、クオート文字の特別扱いをしないように指示します。"

#: ../../library/csv.rst:309
msgid "The :mod:`csv` module defines the following exception:"
msgstr ":mod:`csv` モジュールでは以下の例外を定義しています:"

#: ../../library/csv.rst:314
msgid "Raised by any of the functions when an error is detected."
msgstr "全ての関数において、エラーが検出された際に送出される例外です。"

#: ../../library/csv.rst:320
msgid "Dialects and Formatting Parameters"
msgstr "Dialect クラスと書式化パラメタ"

#: ../../library/csv.rst:322
msgid ""
"To make it easier to specify the format of input and output records, "
"specific formatting parameters are grouped together into dialects.  A "
"dialect is a subclass of the :class:`Dialect` class having a set of specific "
"methods and a single :meth:`validate` method.  When creating :class:`reader` "
"or :class:`writer` objects, the programmer can specify a string or a "
"subclass of the :class:`Dialect` class as the dialect parameter.  In "
"addition to, or instead of, the *dialect* parameter, the programmer can also "
"specify individual formatting parameters, which have the same names as the "
"attributes defined below for the :class:`Dialect` class."
msgstr ""
"レコードに対する入出力形式の指定をより簡単にするために、特定の書式化パラメタ"
"は表現形式 (dialect) にまとめてグループ化されます。表現形式は :class:"
"`Dialect` クラスのサブクラスで、様々なクラス特有のメソッドと、 :meth:"
"`validate` メソッドを一つ持っています。 :class:`reader` または :class:"
"`writer` オブジェクトを生成するとき、プログラマは文字列または :class:"
"`Dialect` クラスのサブクラスを表現形式パラメタとして渡さなければなりません。"
"さらに、 *dialect* パラメタの代りに、プログラマは上で定義されている属性と同じ"
"名前を持つ個々の書式化パラメタを :class:`Dialect` クラスに指定することができ"
"ます。"

#: ../../library/csv.rst:332
msgid "Dialects support the following attributes:"
msgstr "Dialect は以下の属性をサポートしています:"

#: ../../library/csv.rst:337
msgid ""
"A one-character string used to separate fields.  It defaults to ``','``."
msgstr ""
"フィールド間を分割するのに用いられる 1 文字からなる文字列です。デフォルトで"
"は ``','`` です。"

#: ../../library/csv.rst:342
msgid ""
"Controls how instances of *quotechar* appearing inside a field should "
"themselves be quoted.  When :const:`True`, the character is doubled. When :"
"const:`False`, the *escapechar* is used as a prefix to the *quotechar*.  It "
"defaults to :const:`True`."
msgstr ""
"フィールド内に現れた *quotechar* のインスタンスで、クオートではないその文字自"
"身でなければならない文字をどのようにクオートするかを制御します。 :const:"
"`True` の場合、この文字は二重化されます。 :const:`False` の場合、 "
"*escapechar* は *quotechar* の前に置かれます。デフォルトでは :const:`True` で"
"す。"

#: ../../library/csv.rst:347
msgid ""
"On output, if *doublequote* is :const:`False` and no *escapechar* is set, :"
"exc:`Error` is raised if a *quotechar* is found in a field."
msgstr ""
"出力においては、 *doublequote* が :const:`False` で *escapechar* がセットされ"
"ていない場合、フィールド内に *quotechar* が現れると :exc:`Error` が送出されま"
"す。"

#: ../../library/csv.rst:353
msgid ""
"A one-character string used by the writer to escape the *delimiter* if "
"*quoting* is set to :const:`QUOTE_NONE` and the *quotechar* if *doublequote* "
"is :const:`False`. On reading, the *escapechar* removes any special meaning "
"from the following character. It defaults to :const:`None`, which disables "
"escaping."
msgstr ""
"writer が、 *quoting* が :const:`QUOTE_NONE` に設定されている場合に "
"*delimiter* をエスケープするため、および、 *doublequote* が :const:`False` の"
"場合に *quotechar* をエスケープするために用いられる、 1 文字からなる文字列で"
"す。読み込み時には *escapechar* はそれに引き続く文字の特別な意味を取り除きま"
"す。デフォルトでは :const:`None` で、エスケープを行ないません。"

#: ../../library/csv.rst:361
msgid ""
"The string used to terminate lines produced by the :class:`writer`. It "
"defaults to ``'\\r\\n'``."
msgstr ""
":class:`writer` が作り出す各行を終端する際に用いられる文字列です。デフォルト"
"では ``'\\r\\n'`` です。"

#: ../../library/csv.rst:366
msgid ""
"The :class:`reader` is hard-coded to recognise either ``'\\r'`` or ``'\\n'`` "
"as end-of-line, and ignores *lineterminator*. This behavior may change in "
"the future."
msgstr ""
":class:`reader` は ``'\\r'`` または ``'\\n'`` のどちらかを行末と認識するよう"
"にハードコードされており、 *lineterminator* を無視します。この振る舞いは将来"
"変更されるかもしれません。"

#: ../../library/csv.rst:373
msgid ""
"A one-character string used to quote fields containing special characters, "
"such as the *delimiter* or *quotechar*, or which contain new-line "
"characters.  It defaults to ``'\"'``."
msgstr ""
"*delimiter* や *quotechar* といった特殊文字を含むか、改行文字を含むフィールド"
"をクオートする際に用いられる 1 文字からなる文字列です。デフォルトでは "
"``'\"'`` です。"

#: ../../library/csv.rst:380
msgid ""
"Controls when quotes should be generated by the writer and recognised by the "
"reader.  It can take on any of the :const:`QUOTE_\\*` constants (see "
"section :ref:`csv-contents`) and defaults to :const:`QUOTE_MINIMAL`."
msgstr ""
"クオートがいつ writer によって生成されるか、また reader によって認識されるか"
"を制御します。 :const:`QUOTE_\\*` 定数のいずれか (:ref:`csv-contents` 節参"
"照) をとることができ、デフォルトでは :const:`QUOTE_MINIMAL` です。"

#: ../../library/csv.rst:387
msgid ""
"When :const:`True`, whitespace immediately following the *delimiter* is "
"ignored. The default is :const:`False`."
msgstr ""
":const:`True` の場合、 *delimiter* の直後に続く空白は無視されます。デフォルト"
"では :const:`False` です。"

#: ../../library/csv.rst:393
msgid ""
"When ``True``, raise exception :exc:`Error` on bad CSV input. The default is "
"``False``."
msgstr ""
"``True`` の場合、 不正な CSV 入力に対して :exc:`Error` を送出します。デフォル"
"トでは ``False`` です。"

#: ../../library/csv.rst:397
msgid "Reader Objects"
msgstr "reader オブジェクト"

#: ../../library/csv.rst:399
msgid ""
"Reader objects (:class:`DictReader` instances and objects returned by the :"
"func:`reader` function) have the following public methods:"
msgstr ""
"reader オブジェクト(:class:`DictReader` インスタンス、および :func:`reader` "
"関数によって返されたオブジェクト) は、以下の public なメソッドを持っています:"

#: ../../library/csv.rst:405
msgid ""
"Return the next row of the reader's iterable object as a list, parsed "
"according to the current dialect."
msgstr ""
"reader の反復可能なオブジェクトから、現在の表現形式に基づいて次の行を解析して"
"返します。"

#: ../../library/csv.rst:408
msgid "Reader objects have the following public attributes:"
msgstr "reader オブジェクトには以下の公開属性があります:"

#: ../../library/csv.rst:413
msgid "A read-only description of the dialect in use by the parser."
msgstr "パーサで使われる表現形式の読み取り専用の記述です。"

#: ../../library/csv.rst:418
msgid ""
"The number of lines read from the source iterator. This is not the same as "
"the number of records returned, as records can span multiple lines."
msgstr ""
"ソースイテレータから読んだ行数です。この数は返されるレコードの数とは、レコー"
"ドが複数行に亘ることがあるので、一致しません。"

#: ../../library/csv.rst:424
msgid "DictReader objects have the following public attribute:"
msgstr "DictReader オブジェクトは、以下の public な属性を持っています:"

#: ../../library/csv.rst:429
msgid ""
"If not passed as a parameter when creating the object, this attribute is "
"initialized upon first access or when the first record is read from the file."
msgstr ""
"オブジェクトを生成するときに渡されなかった場合、この属性は最初のアクセス時"
"か、ファイルから最初のレコードを読み出したときに初期化されます。"

#: ../../library/csv.rst:437
msgid "Writer Objects"
msgstr "writer オブジェクト"

#: ../../library/csv.rst:439
msgid ""
":class:`Writer` objects (:class:`DictWriter` instances and objects returned "
"by the :func:`writer` function) have the following public methods.  A *row* "
"must be a sequence of strings or numbers for :class:`Writer` objects and a "
"dictionary mapping fieldnames to strings or numbers (by passing them "
"through :func:`str` first) for :class:`DictWriter` objects.  Note that "
"complex numbers are written out surrounded by parens. This may cause some "
"problems for other programs which read CSV files (assuming they support "
"complex numbers at all)."
msgstr ""
":class:`Writer` オブジェクト (:class:`DictWriter` インスタンス、および :func:"
"`writer` 関数によって返されたオブジェクト) は、以下の public なメソッドを持っ"
"ています: *row* には、 :class:`Writer` オブジェクトの場合には文字列か数値の"
"シーケンスを指定し、 :class:`DictWriter` オブジェクトの場合はフィールド名を"
"キーとして対応する文字列か数値を格納した辞書オブジェクトを指定します(数値は :"
"func:`str` で変換されます)。複素数を出力する場合、値をかっこで囲んで出力しま"
"す。このため、CSV ファイルを読み込むアプリケーションで（そのアプリケーション"
"が複素数をサポートしていたとしても）問題が発生する場合があります。"

#: ../../library/csv.rst:450
msgid ""
"Write the *row* parameter to the writer's file object, formatted according "
"to the current dialect."
msgstr ""
"*row* パラメタを現在の表現形式に基づいて書式化し、 writer のファイルオブジェ"
"クトに書き込みます。"

#: ../../library/csv.rst:456
msgid ""
"Write all elements in *rows* (an iterable of *row* objects as described "
"above) to the writer's file object, formatted according to the current "
"dialect."
msgstr ""
"*rows* 引数 (上で解説した *row* オブジェクトのイテラブル) の全ての要素を現在"
"の表現形式に基づいて書式化し、writer のファイルオブジェクトに書き込みます。"

#: ../../library/csv.rst:460
msgid "Writer objects have the following public attribute:"
msgstr "writer オブジェクトには以下の公開属性があります:"

#: ../../library/csv.rst:465
msgid "A read-only description of the dialect in use by the writer."
msgstr "writer で使われる表現形式の読み取り専用の記述です。"

#: ../../library/csv.rst:468
msgid "DictWriter objects have the following public method:"
msgstr "DictWriter のオブジェクトは以下の public メソッドを持っています:"

#: ../../library/csv.rst:473
msgid "Write a row with the field names (as specified in the constructor)."
msgstr "(コンストラクタで指定された)フィールド名の行を出力します。"

#: ../../library/csv.rst:481
msgid "Examples"
msgstr "使用例"

#: ../../library/csv.rst:483
msgid "The simplest example of reading a CSV file::"
msgstr "最も簡単な CSV ファイル読み込みの例です::"

#: ../../library/csv.rst:491
msgid "Reading a file with an alternate format::"
msgstr "別の書式での読み込み::"

#: ../../library/csv.rst:499
msgid "The corresponding simplest possible writing example is::"
msgstr "上に対して、単純な書き込みのプログラム例は以下のようになります。 ::"

#: ../../library/csv.rst:506
msgid "Registering a new dialect::"
msgstr "新しい表現形式の登録::"

#: ../../library/csv.rst:513
msgid ""
"A slightly more advanced use of the reader --- catching and reporting "
"errors::"
msgstr ""
"もう少し手の込んだ reader の使い方 --- エラーを捉えてレポートします。 ::"

#: ../../library/csv.rst:525
msgid ""
"And while the module doesn't directly support parsing strings, it can easily "
"be done::"
msgstr ""
"このモジュールは文字列の解析は直接サポートしませんが、簡単にできます。 ::"

#: ../../library/csv.rst:532
msgid ""
"The :mod:`csv` module doesn't directly support reading and writing Unicode, "
"but it is 8-bit-clean save for some problems with ASCII NUL characters.  So "
"you can write functions or classes that handle the encoding and decoding for "
"you as long as you avoid encodings like UTF-16 that use NULs.  UTF-8 is "
"recommended."
msgstr ""
":mod:`csv` モジュールは直接は Unicode の読み書きをサポートしませんが、 ASCII "
"NUL 文字に関わる問題のために8ビットクリーンに書き込みます。ですから、NUL を使"
"う UTF-16 のようなエンコーディングを避ける限り エンコード・デコードを行なう関"
"数やクラスを書くことができます。 UTF-8 がお勧めです。"

#: ../../library/csv.rst:537
msgid ""
":func:`unicode_csv_reader` below is a :term:`generator` that wraps :class:"
"`csv.reader` to handle Unicode CSV data (a list of Unicode strings).  :func:"
"`utf_8_encoder` is a :term:`generator` that encodes the Unicode strings as "
"UTF-8, one string (or row) at a time.  The encoded strings are parsed by the "
"CSV reader, and :func:`unicode_csv_reader` decodes the UTF-8-encoded cells "
"back into Unicode::"
msgstr ""
"以下の :func:`unicode_csv_reader` は Unicode の CSV データ (Unicode 文字列の"
"リスト)を扱うための :class:`csv.reader` をラップするジェネレータ(:term:"
"`generator`)です。 :func:`utf_8_encoder` は一度に 1 文字列(または行) ずつ "
"Unicode 文字列を UTF-8 としてエンコードするジェネレータです。エンコードされた"
"文字列は CSV reader により分解され、 :func:`unicode_csv_reader` が UTF-8 エン"
"コードの分解された文字列をデコードして Unicode に戻します。 ::"

#: ../../library/csv.rst:557
msgid ""
"For all other encodings the following :class:`UnicodeReader` and :class:"
"`UnicodeWriter` classes can be used. They take an additional *encoding* "
"parameter in their constructor and make sure that the data passes the real "
"reader or writer encoded as UTF-8::"
msgstr ""
"その他のエンコーディングには以下の :class:`UnicodeReader` クラスと :class:"
"`UnicodeWriter` クラスが使えます。二つのクラスは *encoding* パラメータをコン"
"ストラクタで取り、本物の reader や writer に渡されるデータが UTF-8 でエンコー"
"ドされていることを保証します。 ::"
