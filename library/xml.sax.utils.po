# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xml.sax.utils.rst:2
msgid ":mod:`xml.sax.saxutils` --- SAX Utilities"
msgstr ":mod:`xml.sax.saxutils` --- SAX ユーティリティ"

#: ../../library/xml.sax.utils.rst:10
msgid "**Source code:** :source:`Lib/xml/sax/saxutils.py`"
msgstr "**ソースコード:** :source:`Lib/xml/sax/saxutils.py`"

#: ../../library/xml.sax.utils.rst:14
msgid ""
"The module :mod:`xml.sax.saxutils` contains a number of classes and "
"functions that are commonly useful when creating SAX applications, either in "
"direct use, or as base classes."
msgstr ""
"モジュール :mod:`xml.sax.saxutils` には SAX アプリケーションの作成に役立つ多"
"くの関数やクラスも含まれており、直接利用したり、基底クラスとして使うことがで"
"きます。"

#: ../../library/xml.sax.utils.rst:21
msgid "Escape ``'&'``, ``'<'``, and ``'>'`` in a string of data."
msgstr "文字列データ内の ``'&'``, ``'<'``, ``'>'`` をエスケープします。"

#: ../../library/xml.sax.utils.rst:23
msgid ""
"You can escape other strings of data by passing a dictionary as the optional "
"*entities* parameter.  The keys and values must all be strings; each key "
"will be replaced with its corresponding value.  The characters ``'&'``, "
"``'<'`` and ``'>'`` are always escaped, even if *entities* is provided."
msgstr ""
"オプションの *entities* 引数に辞書を渡すことで、そのほかの文字列データをエス"
"ケープすることも可能です。辞書のキーと値はすべて文字列で、キーは対応する値に"
"置換されます。*entities* が与えられている場合でも、 ``'&'``, ``'<'``, "
"``'>'`` は常にエスケープされます。"

#: ../../library/xml.sax.utils.rst:31
msgid "Unescape ``'&amp;'``, ``'&lt;'``, and ``'&gt;'`` in a string of data."
msgstr ""
"エスケープされた文字列 ``'&amp;'``, ``'&lt;'``, ``'&gt;'`` を元の文字に戻しま"
"す。"

#: ../../library/xml.sax.utils.rst:33
msgid ""
"You can unescape other strings of data by passing a dictionary as the "
"optional *entities* parameter.  The keys and values must all be strings; "
"each key will be replaced with its corresponding value.  ``'&amp'``, "
"``'&lt;'``, and ``'&gt;'`` are always unescaped, even if *entities* is "
"provided."
msgstr ""
"オプションの *entities* 引数に辞書を渡すことで、そのほかの文字列データをエス"
"ケープ解除することも可能です。辞書のキーと値はすべて文字列で、キーは対応する"
"値に置換されます。*entities* が与えられている場合でも、``'&amp'``, "
"``'&lt;'``, and ``'&gt;'`` は常に元の文字に戻されます。"

#: ../../library/xml.sax.utils.rst:41
msgid ""
"Similar to :func:`escape`, but also prepares *data* to be used as an "
"attribute value.  The return value is a quoted version of *data* with any "
"additional required replacements. :func:`quoteattr` will select a quote "
"character based on the content of *data*, attempting to avoid encoding any "
"quote characters in the string.  If both single- and double-quote characters "
"are already in *data*, the double-quote characters will be encoded and "
"*data* will be wrapped in double-quotes.  The resulting string can be used "
"directly as an attribute value::"
msgstr ""
":func:`escape` に似ていますが、 *data* は属性値の作成に使われます。戻り値は"
"クォート済みの *data* で、置換する文字の追加も可能です。 :func:`quoteattr` は"
"クォートすべき文字を *data* の文脈から判断し、クォートすべき文字を残さないよ"
"うに文字列をエンコードします。 *data* の中にシングル・クォート、ダブル・"
"クォートがあれば、両方ともエンコードし、全体をダブルクォートで囲みます。戻り"
"値の文字列はそのままで属性値として利用できます::"

#: ../../library/xml.sax.utils.rst:53
msgid ""
"This function is useful when generating attribute values for HTML or any "
"SGML using the reference concrete syntax."
msgstr ""
"この関数は参照具象構文を使って、 HTML や SGML の属性値を生成するのに便利で"
"す。"

#: ../../library/xml.sax.utils.rst:59
msgid ""
"This class implements the :class:`~xml.sax.handler.ContentHandler` interface "
"by writing SAX events back into an XML document. In other words, using an :"
"class:`XMLGenerator` as the content handler will reproduce the original "
"document being parsed. *out* should be a file-like object which will default "
"to *sys.stdout*. *encoding* is the encoding of the output stream which "
"defaults to ``'iso-8859-1'``. *short_empty_elements* controls the formatting "
"of elements that contain no content:  if ``False`` (the default) they are "
"emitted as a pair of start/end tags, if set to ``True`` they are emitted as "
"a single self-closed tag."
msgstr ""
"このクラスは SAX イベントを XML 文書に書き戻すことで :class:`~xml.sax."
"handler.ContentHandler` インターフェースを実装しています。\n"
"つまり、 :class:`XMLGenerator` をコンテントハンドラとして用いることで、パース"
"している元々の文書を複製することが出来ます。\n"
"*out* にはファイル様オブジェクトでなければなりません。\n"
"デフォルトは *sys.stdout* です。\n"
"*encoding* は出力ストリームのエンコーディングで、デフォルトは "
"``'iso-8859-1'`` です。\n"
"*short_empty_elements* は\n"
"内容を持たない要素のフォーマットを制御します。\n"
"``False`` (デフォルト) の場合、開始/終了タグのペアとなり、 ``True`` の場合、1"
"つの空タグになります。"

#: ../../library/xml.sax.utils.rst:69
msgid "The *short_empty_elements* parameter."
msgstr "*short_empty_elements* 引数。"

#: ../../library/xml.sax.utils.rst:75
msgid ""
"This class is designed to sit between an :class:`~xml.sax.xmlreader."
"XMLReader` and the client application's event handlers.  By default, it does "
"nothing but pass requests up to the reader and events on to the handlers "
"unmodified, but subclasses can override specific methods to modify the event "
"stream or the configuration requests as they pass through."
msgstr ""
"このクラスは :class:`~xml.sax.xmlreader.XMLReader` とクライアント・アプリケー"
"ションのイベント・ハンドラとの間に位置するものとして設計されています。デフォ"
"ルトでは何もせず、ただリクエストをリーダに、イベントをハンドラに、それぞれ加"
"工せず渡すだけです。しかし、サブクラスでメソッドをオーバーライドすると、イベ"
"ント・ストリームやリクエストを加工してから渡すように変更可能です。"

#: ../../library/xml.sax.utils.rst:85
msgid ""
"This function takes an input source and an optional base URL and returns a "
"fully resolved :class:`~xml.sax.xmlreader.InputSource` object ready for "
"reading.  The input source can be given as a string, a file-like object, or "
"an :class:`~xml.sax.xmlreader.InputSource` object; parsers will use this "
"function to implement the polymorphic *source* argument to their :meth:"
"`parse` method."
msgstr ""
"この関数は引数に入力ソース、オプションとして URL を取り、読み取り可能な解決済"
"み :class:`~xml.sax.xmlreader.InputSource` オブジェクトを返します。入力ソース"
"は文字列、ファイル風オブジェクト、 :class:`~xml.sax.xmlreader.InputSource` の"
"いずれでも良く、この関数を使うことで、パーサは様々な *source* パラメータを :"
"meth:`parse` に渡すことが可能になります。"
