# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
# Takanori Suzuki <takanori@takanory.net>, 2021
# Shuuji Mihara <s.tk345@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 03:12+0000\n"
"Last-Translator: Shuuji Mihara <s.tk345@gmail.com>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/warnings.rst:2
msgid ":mod:`warnings` --- Warning control"
msgstr ":mod:`warnings` --- 警告の制御"

#: ../../library/warnings.rst:7
msgid "**Source code:** :source:`Lib/warnings.py`"
msgstr "**ソースコード:** :source:`Lib/warnings.py`"

#: ../../library/warnings.rst:13
msgid ""
"Warning messages are typically issued in situations where it is useful to "
"alert the user of some condition in a program, where that condition "
"(normally) doesn't warrant raising an exception and terminating the "
"program.  For example, one might want to issue a warning when a program uses "
"an obsolete module."
msgstr ""
"警告メッセージは一般に、ユーザに警告しておいた方がよいような状況下にプログラ"
"ムが置かれているが、その状況は (通常は) 例外を送出したりそのプログラムを終了"
"させるほどの正当な理由がないといった状況で発されます。例えば、プログラムが古"
"いモジュールを使っている場合には警告を発したくなるかもしれません。"

#: ../../library/warnings.rst:18
msgid ""
"Python programmers issue warnings by calling the :func:`warn` function "
"defined in this module.  (C programmers use :c:func:`PyErr_WarnEx`; see :ref:"
"`exceptionhandling` for details)."
msgstr ""
"Python プログラマは、このモジュールの :func:`warn` 関数を使って警告を発するこ"
"とができます。(C 言語のプログラマは :c:func:`PyErr_WarnEx` を使います; 詳細"
"は :ref:`exceptionhandling` を参照してください)。"

#: ../../library/warnings.rst:22
msgid ""
"Warning messages are normally written to ``sys.stderr``, but their "
"disposition can be changed flexibly, from ignoring all warnings to turning "
"them into exceptions.  The disposition of warnings can vary based on the "
"warning category (see below), the text of the warning message, and the "
"source location where it is issued.  Repetitions of a particular warning for "
"the same source location are typically suppressed."
msgstr ""
"警告メッセージは通常 ``sys.stderr`` に出力されますが、その処理方法は柔軟に変"
"更することができます。すべての警告を無視することも、警告を例外に変更すること"
"もできます。警告の処理方法は警告カテゴリ (以下参照)、警告メッセージテキスト、"
"そして警告を発したソースコード上の場所に基づいて変更することができます。ソー"
"スコード上の同じ場所に対して特定の警告が繰り返された場合、通常は抑制されま"
"す。"

#: ../../library/warnings.rst:29
msgid ""
"There are two stages in warning control: first, each time a warning is "
"issued, a determination is made whether a message should be issued or not; "
"next, if a message is to be issued, it is formatted and printed using a user-"
"settable hook."
msgstr ""
"警告制御には 2 つの段階 (stage) があります: 第一に、警告が発されるたびに、"
"メッセージを出力すべきかどうかの決定が行われます; 次に、メッセージを出力する"
"なら、メッセージはユーザによって設定が可能なフックを使って書式化され印字され"
"ます。"

#: ../../library/warnings.rst:33
msgid ""
"The determination whether to issue a warning message is controlled by the "
"warning filter, which is a sequence of matching rules and actions. Rules can "
"be added to the filter by calling :func:`filterwarnings` and reset to its "
"default state by calling :func:`resetwarnings`."
msgstr ""
"警告メッセージを出力するかどうかの決定は、警告フィルタによって制御されます。"
"警告フィルタは一致規則 (matching rule)と動作からなるシーケンスです。 :func:"
"`filterwarnings` を呼び出して一致規則をフィルタに追加することができ、 :func:"
"`resetwarnings` を呼び出してフィルタを標準設定の状態にリセットすることができ"
"ます。"

#: ../../library/warnings.rst:38
msgid ""
"The printing of warning messages is done by calling :func:`showwarning`, "
"which may be overridden; the default implementation of this function formats "
"the message by calling :func:`formatwarning`, which is also available for "
"use by custom implementations."
msgstr ""
"警告メッセージの印字は :func:`showwarning` を呼び出して行うことができ、この関"
"数は上書きすることができます; この関数の標準の実装では、 :func:"
"`formatwarning` を呼び出して警告メッセージを書式化しますが、この関数について"
"も自作の実装を使うことができます。"

#: ../../library/warnings.rst:44
msgid ""
":func:`logging.captureWarnings` allows you to handle all warnings with the "
"standard logging infrastructure."
msgstr ""
":func:`logging.captureWarnings` を使うことで、標準ロギング基盤ですべての警告"
"を扱うことができます。"

#: ../../library/warnings.rst:51
msgid "Warning Categories"
msgstr "警告カテゴリ"

#: ../../library/warnings.rst:53
msgid ""
"There are a number of built-in exceptions that represent warning categories. "
"This categorization is useful to be able to filter out groups of warnings."
msgstr ""
"警告カテゴリを表現する組み込み例外は数多くあります。このカテゴリ化は警告をグ"
"ループごとフィルタする上で便利です。"

#: ../../library/warnings.rst:56
msgid ""
"While these are technically :ref:`built-in exceptions <warning-categories-as-"
"exceptions>`, they are documented here, because conceptually they belong to "
"the warnings mechanism."
msgstr ""
"これらは厳密に言えば :ref:`組み込み例外 <warning-categories-as-exceptions>` "
"ですが、概念的には警告メカニズムに属しているのでここで記述されています。"

#: ../../library/warnings.rst:60
msgid ""
"User code can define additional warning categories by subclassing one of the "
"standard warning categories.  A warning category must always be a subclass "
"of the :exc:`Warning` class."
msgstr ""
"標準の警告カテゴリをユーザの作成したコード上でサブクラス化することで、さらに"
"別の警告カテゴリを定義することができます。警告カテゴリは常に :exc:`Warning` "
"クラスのサブクラスでなければなりません。"

#: ../../library/warnings.rst:64
msgid "The following warnings category classes are currently defined:"
msgstr "現在以下の警告カテゴリクラスが定義されています:"

#: ../../library/warnings.rst:69
msgid "Class"
msgstr "Class"

#: ../../library/warnings.rst:69
msgid "Description"
msgstr "説明"

#: ../../library/warnings.rst:71
msgid ":exc:`Warning`"
msgstr ":exc:`Warning`"

#: ../../library/warnings.rst:71
msgid ""
"This is the base class of all warning category classes.  It is a subclass "
"of :exc:`Exception`."
msgstr ""
"すべての警告カテゴリクラスの基底クラスです。 :exc:`Exception` のサブクラスで"
"す。"

#: ../../library/warnings.rst:75
msgid ":exc:`UserWarning`"
msgstr ":exc:`UserWarning`"

#: ../../library/warnings.rst:75
msgid "The default category for :func:`warn`."
msgstr ":func:`warn` の標準のカテゴリです。"

#: ../../library/warnings.rst:77
msgid ":exc:`DeprecationWarning`"
msgstr ":exc:`DeprecationWarning`"

#: ../../library/warnings.rst:77
msgid ""
"Base category for warnings about deprecated features when those warnings are "
"intended for other Python developers (ignored by default, unless triggered "
"by code in ``__main__``)."
msgstr ""
"他の Python 開発者へ向けて警告を発するときの、廃止予定の機能についての警告の"
"基底カテゴリです。(``__main__`` によって引き起こされない限り通常は無視されま"
"す)"

#: ../../library/warnings.rst:82
msgid ":exc:`SyntaxWarning`"
msgstr ":exc:`SyntaxWarning`"

#: ../../library/warnings.rst:82
msgid "Base category for warnings about dubious syntactic features."
msgstr "その文法機能があいまいであることを示す警告カテゴリの基底クラスです。"

#: ../../library/warnings.rst:85
msgid ":exc:`RuntimeWarning`"
msgstr ":exc:`RuntimeWarning`"

#: ../../library/warnings.rst:85
msgid "Base category for warnings about dubious runtime features."
msgstr ""
"そのランタイム機能があいまいであることを示す警告カテゴリの基底クラスです。"

#: ../../library/warnings.rst:88
msgid ":exc:`FutureWarning`"
msgstr ":exc:`FutureWarning`"

#: ../../library/warnings.rst:88
msgid ""
"Base category for warnings about deprecated features when those warnings are "
"intended for end users of applications that are written in Python."
msgstr ""
"Python で書かれたアプリケーションのエンドユーザーへ向けて警告を発するときの、"
"非推奨の機能についての警告の基底カテゴリです。"

#: ../../library/warnings.rst:93
msgid ":exc:`PendingDeprecationWarning`"
msgstr ":exc:`PendingDeprecationWarning`"

#: ../../library/warnings.rst:93
msgid ""
"Base category for warnings about features that will be deprecated in the "
"future (ignored by default)."
msgstr ""
"将来その機能が廃止されることを示す警告カテゴリの基底クラスです(デフォルトでは"
"無視されます)。"

#: ../../library/warnings.rst:97
msgid ":exc:`ImportWarning`"
msgstr ":exc:`ImportWarning`"

#: ../../library/warnings.rst:97
msgid ""
"Base category for warnings triggered during the process of importing a "
"module (ignored by default)."
msgstr ""
"モジュールのインポート処理中に引き起こされる警告カテゴリの基底クラスです(デ"
"フォルトでは無視されます)。"

#: ../../library/warnings.rst:101
msgid ":exc:`UnicodeWarning`"
msgstr ":exc:`UnicodeWarning`"

#: ../../library/warnings.rst:101
msgid "Base category for warnings related to Unicode."
msgstr "Unicode に関係した警告カテゴリの基底クラスです。"

#: ../../library/warnings.rst:104
msgid ":exc:`BytesWarning`"
msgstr ":exc:`BytesWarning`"

#: ../../library/warnings.rst:104
msgid ""
"Base category for warnings related to :class:`bytes` and :class:`bytearray`."
msgstr ""
":class:`bytes` や :class:`bytearray` に関連した警告カテゴリの基底クラスです。"

#: ../../library/warnings.rst:107
msgid ":exc:`ResourceWarning`"
msgstr ":exc:`ResourceWarning`"

#: ../../library/warnings.rst:107
msgid "Base category for warnings related to resource usage."
msgstr "リソースの使用に関連した警告カテゴリの基底クラスです。"

#: ../../library/warnings.rst:111
msgid ""
"Previously :exc:`DeprecationWarning` and :exc:`FutureWarning` were "
"distinguished based on whether a feature was being removed entirely or "
"changing its behaviour. They are now distinguished based on their intended "
"audience and the way they're handled by the default warnings filters."
msgstr ""

#: ../../library/warnings.rst:122
msgid "The Warnings Filter"
msgstr "警告フィルタ"

#: ../../library/warnings.rst:124
msgid ""
"The warnings filter controls whether warnings are ignored, displayed, or "
"turned into errors (raising an exception)."
msgstr ""
"警告フィルタは、ある警告を無視すべきか、表示すべきか、あるいは (例外を送出す"
"る) エラーにするべきかを制御します。"

#: ../../library/warnings.rst:127
msgid ""
"Conceptually, the warnings filter maintains an ordered list of filter "
"specifications; any specific warning is matched against each filter "
"specification in the list in turn until a match is found; the filter "
"determines the disposition of the match.  Each entry is a tuple of the form "
"(*action*, *message*, *category*, *module*, *lineno*), where:"
msgstr ""
"概念的には、警告フィルタは複数のフィルタ仕様からなる順番リストを維持していま"
"す; 何らかの特定の警告が生じると、一致するものが見つかるまでリスト中の各フィ"
"ルタとの照合が行われます; 一致したフィルタ仕様がその警告の処理方法を決定しま"
"す。フィルタの各エントリは (*action*, *message*, *category*, *module*, "
"*lineno*) からなるタプルです。ここで:"

#: ../../library/warnings.rst:133
msgid "*action* is one of the following strings:"
msgstr "*action* は以下の文字列のうちの一つです:"

#: ../../library/warnings.rst:136
msgid "Value"
msgstr "値"

#: ../../library/warnings.rst:136
msgid "Disposition"
msgstr "処理方法"

#: ../../library/warnings.rst:138
msgid "``\"default\"``"
msgstr "``\"default\"``"

#: ../../library/warnings.rst:138
msgid ""
"print the first occurrence of matching warnings for each location (module + "
"line number) where the warning is issued"
msgstr ""

#: ../../library/warnings.rst:142
msgid "``\"error\"``"
msgstr "``\"error\"``"

#: ../../library/warnings.rst:142
msgid "turn matching warnings into exceptions"
msgstr "一致した警告を例外に変えます"

#: ../../library/warnings.rst:144
msgid "``\"ignore\"``"
msgstr "``\"ignore\"``"

#: ../../library/warnings.rst:144
msgid "never print matching warnings"
msgstr "一致した警告を出力しません"

#: ../../library/warnings.rst:146
msgid "``\"always\"``"
msgstr "``\"always\"``"

#: ../../library/warnings.rst:146
msgid "always print matching warnings"
msgstr "一致した警告を常に出力します"

#: ../../library/warnings.rst:148
msgid "``\"module\"``"
msgstr "``\"module\"``"

#: ../../library/warnings.rst:148
msgid ""
"print the first occurrence of matching warnings for each module where the "
"warning is issued (regardless of line number)"
msgstr ""

#: ../../library/warnings.rst:152
msgid "``\"once\"``"
msgstr "``\"once\"``"

#: ../../library/warnings.rst:152
msgid ""
"print only the first occurrence of matching warnings, regardless of location"
msgstr ""
"一致した警告のうち、警告の原因になった場所にかかわらず最初の警告のみ出力しま"
"す"

#: ../../library/warnings.rst:156
msgid ""
"*message* is a string containing a regular expression that the start of the "
"warning message must match.  The expression is compiled to always be case-"
"insensitive."
msgstr ""
"*message* は正規表現を含む文字列で、警告メッセージの先頭はこのパターンに一致"
"しなければなりません。正規表現は常に大小文字の区別をしないようにコンパイルさ"
"れます。"

#: ../../library/warnings.rst:160
msgid ""
"*category* is a class (a subclass of :exc:`Warning`) of which the warning "
"category must be a subclass in order to match."
msgstr ""
"*category* はクラス (:exc:`Warning` のサブクラス) です。警告クラスはこのクラ"
"スのサブクラスに一致しなければなりません。"

#: ../../library/warnings.rst:163
msgid ""
"*module* is a string containing a regular expression that the module name "
"must match.  The expression is compiled to be case-sensitive."
msgstr ""
"*module* は正規表現を含む文字列で、モジュール名はこのパターンに一致しなければ"
"なりません。正規表現は常に大小文字の区別をしないようにコンパイルされます。"

#: ../../library/warnings.rst:166
msgid ""
"*lineno* is an integer that the line number where the warning occurred must "
"match, or ``0`` to match all line numbers."
msgstr ""
"*lineno* は整数で、警告が発生した場所の行番号に一致しなければなりません。"
"``0`` の場合はすべての行と一致します。"

#: ../../library/warnings.rst:169
msgid ""
"Since the :exc:`Warning` class is derived from the built-in :exc:`Exception` "
"class, to turn a warning into an error we simply raise ``category(message)``."
msgstr ""
":exc:`Warning` クラスは組み込みの :exc:`Exception` クラスから派生しているの"
"で、警告をエラーに変換するには単に ``category(message)`` を ``raise`` しま"
"す。"

#: ../../library/warnings.rst:172
msgid ""
"If a warning is reported and doesn't match any registered filter then the "
"\"default\" action is applied (hence its name)."
msgstr ""

#: ../../library/warnings.rst:179
msgid "Describing Warning Filters"
msgstr ""

#: ../../library/warnings.rst:181
msgid ""
"The warnings filter is initialized by :option:`-W` options passed to the "
"Python interpreter command line and the :envvar:`PYTHONWARNINGS` environment "
"variable. The interpreter saves the arguments for all supplied entries "
"without interpretation in ``sys.warnoptions``; the :mod:`warnings` module "
"parses these when it is first imported (invalid options are ignored, after "
"printing a message to ``sys.stderr``)."
msgstr ""

#: ../../library/warnings.rst:188
msgid ""
"Individual warnings filters are specified as a sequence of fields separated "
"by colons::"
msgstr ""

#: ../../library/warnings.rst:193
msgid ""
"The meaning of each of these fields is as described in :ref:`warning-"
"filter`. When listing multiple filters on a single line (as for :envvar:"
"`PYTHONWARNINGS`), the individual filters are separated by commas,and the "
"filters listed later take precedence over those listed before them (as "
"they're applied left-to-right, and the most recently applied filters take "
"precedence over earlier ones)."
msgstr ""

#: ../../library/warnings.rst:200
msgid ""
"Commonly used warning filters apply to either all warnings, warnings in a "
"particular category, or warnings raised by particular modules or packages. "
"Some examples::"
msgstr ""

#: ../../library/warnings.rst:217
msgid "Default Warning Filter"
msgstr "デフォルトの警告フィルタ"

#: ../../library/warnings.rst:219
msgid ""
"By default, Python installs several warning filters, which can be overridden "
"by the :option:`-W` command-line option, the :envvar:`PYTHONWARNINGS` "
"environment variable and calls to :func:`filterwarnings`."
msgstr ""

#: ../../library/warnings.rst:223
msgid ""
"In regular release builds, the default warning filter has the following "
"entries (in order of precedence)::"
msgstr ""

#: ../../library/warnings.rst:232
msgid "In debug builds, the list of default warning filters is empty."
msgstr ""

#: ../../library/warnings.rst:234
msgid ""
":exc:`DeprecationWarning` is now ignored by default in addition to :exc:"
"`PendingDeprecationWarning`."
msgstr ""
":exc:`PendingDeprecationWarning` に加えて、 :exc:`DeprecationWarning` もデ"
"フォルトで無視されるようになりました。"

#: ../../library/warnings.rst:238
msgid ""
":exc:`DeprecationWarning` is once again shown by default when triggered "
"directly by code in ``__main__``."
msgstr ""

#: ../../library/warnings.rst:242
msgid ""
":exc:`BytesWarning` no longer appears in the default filter list and is "
"instead configured via :data:`sys.warnoptions` when :option:`-b` is "
"specified twice."
msgstr ""

#: ../../library/warnings.rst:251
msgid "Overriding the default filter"
msgstr ""

#: ../../library/warnings.rst:253
msgid ""
"Developers of applications written in Python may wish to hide *all* Python "
"level warnings from their users by default, and only display them when "
"running tests or otherwise working on the application. The :data:`sys."
"warnoptions` attribute used to pass filter configurations to the interpreter "
"can be used as a marker to indicate whether or not warnings should be "
"disabled::"
msgstr ""

#: ../../library/warnings.rst:265
msgid ""
"Developers of test runners for Python code are advised to instead ensure "
"that *all* warnings are displayed by default for the code under test, using "
"code like::"
msgstr ""

#: ../../library/warnings.rst:276
msgid ""
"Finally, developers of interactive shells that run user code in a namespace "
"other than ``__main__`` are advised to ensure that :exc:`DeprecationWarning` "
"messages are made visible by default, using code like the following (where "
"``user_ns`` is the module used to execute code entered interactively)::"
msgstr ""

#: ../../library/warnings.rst:289
msgid "Temporarily Suppressing Warnings"
msgstr "一時的に警告を抑制する"

#: ../../library/warnings.rst:291
msgid ""
"If you are using code that you know will raise a warning, such as a "
"deprecated function, but do not want to see the warning (even when warnings "
"have been explicitly configured via the command line), then it is possible "
"to suppress the warning using the :class:`catch_warnings` context manager::"
msgstr ""

#: ../../library/warnings.rst:305
msgid ""
"While within the context manager all warnings will simply be ignored. This "
"allows you to use known-deprecated code without having to see the warning "
"while not suppressing the warning for other code that might not be aware of "
"its use of deprecated code.  Note: this can only be guaranteed in a single-"
"threaded application. If two or more threads use the :class:`catch_warnings` "
"context manager at the same time, the behavior is undefined."
msgstr ""
"このサンプルのコンテキストマネージャーの中では、すべての警告が無視されていま"
"す。これで、他の廃止予定のコードを含まない(つもりの)部分まで警告を抑止せず"
"に、廃止予定だと分かっているコードだけ警告を表示させないようにすることができ"
"ます。注意: これが保証できるのはシングルスレッドのアプリケーションだけです。 "
"2つ以上のスレッドが同時に :class:`catch_warnings` コンテキストマネージャーを"
"使用した場合、動作は未定義です。"

#: ../../library/warnings.rst:317
msgid "Testing Warnings"
msgstr "警告のテスト"

#: ../../library/warnings.rst:319
msgid ""
"To test warnings raised by code, use the :class:`catch_warnings` context "
"manager. With it you can temporarily mutate the warnings filter to "
"facilitate your testing. For instance, do the following to capture all "
"raised warnings to check::"
msgstr ""
"コードが警告を発生させることをテストするには、 :class:`catch_warnings` コンテ"
"キストマネージャーを利用します。このクラスを使うと、一時的に警告フィルタを操"
"作してテストに利用できます。例えば、次のコードでは、発生したすべての警告を取"
"得してチェックしています::"

#: ../../library/warnings.rst:339
msgid ""
"One can also cause all warnings to be exceptions by using ``error`` instead "
"of ``always``. One thing to be aware of is that if a warning has already "
"been raised because of a ``once``/``default`` rule, then no matter what "
"filters are set the warning will not be seen again unless the warnings "
"registry related to the warning has been cleared."
msgstr ""
"``always`` の代わりに ``error`` を利用することで、すべての警告で例外を発生さ"
"せることができます。1つ気をつけないといけないのは、一度 ``once``/``default`` "
"ルールによって発生した警告は、フィルタに何をセットしているかにかかわらず、警"
"告レジストリをクリアしない限りは 2度と発生しません。"

#: ../../library/warnings.rst:345
msgid ""
"Once the context manager exits, the warnings filter is restored to its state "
"when the context was entered. This prevents tests from changing the warnings "
"filter in unexpected ways between tests and leading to indeterminate test "
"results. The :func:`showwarning` function in the module is also restored to "
"its original value.  Note: this can only be guaranteed in a single-threaded "
"application. If two or more threads use the :class:`catch_warnings` context "
"manager at the same time, the behavior is undefined."
msgstr ""
"コンテキストマネージャーが終了したら、警告フィルタはコンテキストマネージャー"
"に入る前のものに戻されます。これは、テスト中に予期しない方法で警告フィルタが"
"変更され、テスト結果が中途半端になる事を予防します。このモジュールの :func:"
"`showwarning` 関数も元の値に戻されます。注意: これが保証できるのはシングルス"
"レッドのアプリケーションだけです。 2つ以上のスレッドが同時に :class:"
"`catch_warnings` コンテキストマネージャを使用した場合、動作は未定義です。"

#: ../../library/warnings.rst:353
msgid ""
"When testing multiple operations that raise the same kind of warning, it is "
"important to test them in a manner that confirms each operation is raising a "
"new warning (e.g. set warnings to be raised as exceptions and check the "
"operations raise exceptions, check that the length of the warning list "
"continues to increase after each operation, or else delete the previous "
"entries from the warnings list before each new operation)."
msgstr ""
"同じ種類の警告を発生させる複数の操作をテストする場合、各操作が新しい警告を発"
"生させている事を確認するのは大切な事です (例えば、警告を例外として発生させて"
"各操作が例外を発生させることを確認したり、警告リストの長さが各操作で増加して"
"いることを確認したり、警告リストを各操作の前に毎回クリアする事ができます)。"

#: ../../library/warnings.rst:364
msgid "Updating Code For New Versions of Dependencies"
msgstr ""

#: ../../library/warnings.rst:366
msgid ""
"Warning categories that are primarily of interest to Python developers "
"(rather than end users of applications written in Python) are ignored by "
"default."
msgstr ""

#: ../../library/warnings.rst:369
msgid ""
"Notably, this \"ignored by default\" list includes :exc:`DeprecationWarning` "
"(for every module except ``__main__``), which means developers should make "
"sure to test their code with typically ignored warnings made visible in "
"order to receive timely notifications of future breaking API changes "
"(whether in the standard library or third party packages)."
msgstr ""

#: ../../library/warnings.rst:375
msgid ""
"In the ideal case, the code will have a suitable test suite, and the test "
"runner will take care of implicitly enabling all warnings when running tests "
"(the test runner provided by the :mod:`unittest` module does this)."
msgstr ""

#: ../../library/warnings.rst:379
msgid ""
"In less ideal cases, applications can be checked for use of deprecated "
"interfaces by passing :option:`-Wd <-W>` to the Python interpreter (this is "
"shorthand for :option:`!-W default`) or setting ``PYTHONWARNINGS=default`` "
"in the environment. This enables default handling for all warnings, "
"including those that are ignored by default. To change what action is taken "
"for encountered warnings you can change what argument is passed to :option:`-"
"W` (e.g. :option:`!-W error`). See the :option:`-W` flag for more details on "
"what is possible."
msgstr ""

#: ../../library/warnings.rst:392
msgid "Available Functions"
msgstr "利用可能な関数"

#: ../../library/warnings.rst:397
msgid ""
"Issue a warning, or maybe ignore it or raise an exception.  The *category* "
"argument, if given, must be a warning category class (see above); it "
"defaults to :exc:`UserWarning`.  Alternatively *message* can be a :exc:"
"`Warning` instance, in which case *category* will be ignored and ``message."
"__class__`` will be used. In this case the message text will be "
"``str(message)``. This function raises an exception if the particular "
"warning issued is changed into an error by the warnings filter see above.  "
"The *stacklevel* argument can be used by wrapper functions written in "
"Python, like this::"
msgstr ""
"警告を発するか、無視するか、あるいは例外を送出します。 *category* 引数が与え"
"られた場合、警告カテゴリクラスでなければなりません (上記を参照してください); "
"標準の値は :exc:`UserWarning` です。 *message* を :exc:`Warning` インスタンス"
"で代用することもできますが、この場合 *category* は無視され、 ``message."
"__class__`` が使われ、メッセージ文は ``str(message)`` になります。発された例"
"外が前述した警告フィルタによってエラーに変更された場合、この関数は例外を送出"
"します。引数 *stacklevel* は Python でラッパー関数を書く際に利用することがで"
"きます。例えば::"

#: ../../library/warnings.rst:409
msgid ""
"This makes the warning refer to :func:`deprecation`'s caller, rather than to "
"the source of :func:`deprecation` itself (since the latter would defeat the "
"purpose of the warning message)."
msgstr ""
"こうすることで、警告が参照するソースコード部分を、 :func:`deprecation` 自身で"
"はなく :func:`deprecation` を呼び出した側にできます (というのも、前者の場合は"
"警告メッセージの目的を台無しにしてしまうからです)。"

#: ../../library/warnings.rst:413 ../../library/warnings.rst:436
msgid ""
"*source*, if supplied, is the destroyed object which emitted a :exc:"
"`ResourceWarning`."
msgstr ""
"*source* 引数が与えられた場合、これは :exc:`ResourceWarning` を発生させた破壊"
"されたオブジェクトです。"

#: ../../library/warnings.rst:416
msgid "Added *source* parameter."
msgstr "*source* 引数を追加しました。"

#: ../../library/warnings.rst:422
msgid ""
"This is a low-level interface to the functionality of :func:`warn`, passing "
"in explicitly the message, category, filename and line number, and "
"optionally the module name and the registry (which should be the "
"``__warningregistry__`` dictionary of the module).  The module name defaults "
"to the filename with ``.py`` stripped; if no registry is passed, the warning "
"is never suppressed. *message* must be a string and *category* a subclass "
"of :exc:`Warning` or *message* may be a :exc:`Warning` instance, in which "
"case *category* will be ignored."
msgstr ""
":func:`warn` の機能に対する低レベルのインタフェースで、メッセージ、警告カテゴ"
"リ、ファイル名および行番号、そしてオプションのモジュール名およびレジストリ情"
"報 (モジュールの  ``__warningregistry__`` 辞書) を明示的に渡します。モジュー"
"ル名は標準で ``.py`` が取り去られたファイル名になります; レジストリが渡されな"
"かった場合、警告が抑制されることはありません。 *message* が文字列のとき、 "
"*category* は :exc:`Warning` のサブクラスでなければなりません。また "
"*message* は :exc:`Warning` のインスタンスであってもよく、この場合 "
"*category* は無視されます。"

#: ../../library/warnings.rst:431
msgid ""
"*module_globals*, if supplied, should be the global namespace in use by the "
"code for which the warning is issued.  (This argument is used to support "
"displaying source for modules found in zipfiles or other non-filesystem "
"import sources)."
msgstr ""
"*module_globals* は、もし与えられるならば、警告が発せられるコードが使っている"
"グローバル名前空間でなければなりません (この引数は zipfile やその他の非ファイ"
"ルシステムのインポート元の中にあるモジュールのソースを表示することをサポート"
"するためのものです)。"

#: ../../library/warnings.rst:439
msgid "Add the *source* parameter."
msgstr "*source* 引数を追加しました。"

#: ../../library/warnings.rst:445
msgid ""
"Write a warning to a file.  The default implementation calls "
"``formatwarning(message, category, filename, lineno, line)`` and writes the "
"resulting string to *file*, which defaults to ``sys.stderr``.  You may "
"replace this function with any callable by assigning to ``warnings."
"showwarning``. *line* is a line of source code to be included in the warning "
"message; if *line* is not supplied, :func:`showwarning` will try to read the "
"line specified by *filename* and *lineno*."
msgstr ""
"警告をファイルに書き込みます。標準の実装では、 ``formatwarning(message, "
"category, filename, lineno, line)`` を呼び出し、返された文字列を *file* に書"
"き込みます。 *file* は標準では ``sys.stderr`` です。この関数は ``warnings."
"showwarning`` に任意の呼び出し可能オブジェクトを代入して置き換えることができ"
"ます。 *line* は警告メッセージに含めるソースコードの1行です。 *line* が与えら"
"れない場合、 :func:`showwarning` は *filename* と *lineno* から行を取得するこ"
"とを試みます。"

#: ../../library/warnings.rst:456
msgid ""
"Format a warning the standard way.  This returns a string which may contain "
"embedded newlines and ends in a newline.  *line* is a line of source code to "
"be included in the warning message; if *line* is not supplied, :func:"
"`formatwarning` will try to read the line specified by *filename* and "
"*lineno*."
msgstr ""
"警告を通常の方法で書式化します。返される文字列内には改行が埋め込まれている可"
"能性があり、かつ文字列は改行で終端されています。 *line* は警告メッセージに含"
"まれるソースコードの1行です。 *line* が渡されない場合、 :func:"
"`formatwarning` は *filename* と *lineno* から行の取得を試みます。"

#: ../../library/warnings.rst:465
msgid ""
"Insert an entry into the list of :ref:`warnings filter specifications "
"<warning-filter>`.  The entry is inserted at the front by default; if "
"*append* is true, it is inserted at the end.  This checks the types of the "
"arguments, compiles the *message* and *module* regular expressions, and "
"inserts them as a tuple in the list of warnings filters.  Entries closer to "
"the front of the list override entries later in the list, if both match a "
"particular warning.  Omitted arguments default to a value that matches "
"everything."
msgstr ""
":ref:`警告フィルタ仕様 <warning-filter>` のリストにエントリを一つ挿入します。"
"標準ではエントリは先頭に挿入されます; *append* が真ならば、末尾に挿入されま"
"す。この関数は引数の型をチェックし、 *message* および *module* の正規表現をコ"
"ンパイルしてから、これらをタプルにして警告フィルタのリストに挿入します。二つ"
"のエントリが特定の警告に合致した場合、リストの先頭に近い方のエントリが後方に"
"あるエントリに優先します。引数が省略されると、標準ではすべてにマッチする値に"
"設定されます。"

#: ../../library/warnings.rst:477
msgid ""
"Insert a simple entry into the list of :ref:`warnings filter specifications "
"<warning-filter>`.  The meaning of the function parameters is as for :func:"
"`filterwarnings`, but regular expressions are not needed as the filter "
"inserted always matches any message in any module as long as the category "
"and line number match."
msgstr ""
"単純なエントリを :ref:`警告フィルタ仕様 <warning-filter>` のリストに挿入しま"
"す。引数の意味は :func:`filterwarnings` と同じですが、この関数により挿入され"
"るフィルタはカテゴリと行番号が一致していればすべてのモジュールのすべてのメッ"
"セージに合致しますので、正規表現は必要ありません。"

#: ../../library/warnings.rst:486
msgid ""
"Reset the warnings filter.  This discards the effect of all previous calls "
"to :func:`filterwarnings`, including that of the :option:`-W` command line "
"options and calls to :func:`simplefilter`."
msgstr ""
"警告フィルタをリセットします。これにより、 :option:`-W` コマンドラインオプ"
"ションによるもの :func:`simplefilter` 呼び出しによるものを含め、 :func:"
"`filterwarnings` の呼び出しによる影響はすべて無効化されます。"

#: ../../library/warnings.rst:492
msgid "Available Context Managers"
msgstr "利用可能なコンテキストマネージャー"

#: ../../library/warnings.rst:496
msgid ""
"A context manager that copies and, upon exit, restores the warnings filter "
"and the :func:`showwarning` function. If the *record* argument is :const:"
"`False` (the default) the context manager returns :class:`None` on entry. If "
"*record* is :const:`True`, a list is returned that is progressively "
"populated with objects as seen by a custom :func:`showwarning` function "
"(which also suppresses output to ``sys.stdout``). Each object in the list "
"has attributes with the same names as the arguments to :func:`showwarning`."
msgstr ""
"警告フィルタと :func:`showwarning` 関数をコピーし、終了時に復元するコンテキス"
"トマネージャーです。 *record* 引数が :const:`False` (デフォルト値)だった場"
"合、コンテキスト開始時には :const:`None` を返します。もし *record* が :const:"
"`True` だった場合、リストを返します。このリストにはカスタムの :func:"
"`showwarning` 関数(この関数は同時に ``sys.stdout`` への出力を抑制します)に"
"よってオブジェクトが継続的に追加されます。リストの中の各オブジェクトは、 :"
"func:`showwarning` 関数の引数と同じ名前の属性を持っています。"

#: ../../library/warnings.rst:505
msgid ""
"The *module* argument takes a module that will be used instead of the module "
"returned when you import :mod:`warnings` whose filter will be protected. "
"This argument exists primarily for testing the :mod:`warnings` module itself."
msgstr ""
"*module* 引数は、保護したいフィルタを持つモジュールを取ります。 :mod:"
"`warnings` を import して得られるモジュールの代わりに利用されます。この引数"
"は、主に :mod:`warnings` モジュール自体をテストする目的で追加されました。"

#: ../../library/warnings.rst:512
msgid ""
"The :class:`catch_warnings` manager works by replacing and then later "
"restoring the module's :func:`showwarning` function and internal list of "
"filter specifications.  This means the context manager is modifying global "
"state and therefore is not thread-safe."
msgstr ""
":class:`catch_warnings` マネージャーは、モジュールの :func:`showwarning` 関数"
"と内部のフィルタ仕様のリストを置き換え、その後復元することによって動作してい"
"ます。これは、コンテキストマネージャーがグローバルな状態を変更していることを"
"意味していて、したがってスレッドセーフではありません。"
