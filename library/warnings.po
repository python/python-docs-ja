# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/warnings.rst:2
msgid ":mod:`warnings` --- Warning control"
msgstr ":mod:`warnings` --- 警告の制御"

#: ../../library/warnings.rst:12
msgid "**Source code:** :source:`Lib/warnings.py`"
msgstr "**ソースコード:** :source:`Lib/warnings.py`"

#: ../../library/warnings.rst:16
msgid ""
"Warning messages are typically issued in situations where it is useful to "
"alert the user of some condition in a program, where that condition "
"(normally) doesn't warrant raising an exception and terminating the "
"program.  For example, one might want to issue a warning when a program uses "
"an obsolete module."
msgstr ""
"警告メッセージは一般に、ユーザに警告しておいた方がよいような状況下にプログラ"
"ムが置かれているが、その状況は (通常は) 例外を送出したりそのプログラムを終了"
"させるほどの正当な理由がないといった状況で発されます。例えば、プログラムが古"
"いモジュールを使っている場合には警告を発したくなるかもしれません。"

#: ../../library/warnings.rst:21
msgid ""
"Python programmers issue warnings by calling the :func:`warn` function "
"defined in this module.  (C programmers use :c:func:`PyErr_WarnEx`; see :ref:"
"`exceptionhandling` for details)."
msgstr ""
"Python プログラマは、このモジュールの :func:`warn` 関数を使って警告を発するこ"
"とができます。(C 言語のプログラマは :c:func:`PyErr_WarnEx` を使います; 詳細"
"は :ref:`exceptionhandling` を参照してください)。"

#: ../../library/warnings.rst:25
msgid ""
"Warning messages are normally written to ``sys.stderr``, but their "
"disposition can be changed flexibly, from ignoring all warnings to turning "
"them into exceptions.  The disposition of warnings can vary based on the "
"warning category (see below), the text of the warning message, and the "
"source location where it is issued.  Repetitions of a particular warning for "
"the same source location are typically suppressed."
msgstr ""
"警告メッセージは通常 ``sys.stderr`` に出力されますが、その処理方法は柔軟に変"
"更することができます。すべての警告を無視することも、警告を例外に変更すること"
"もできます。警告の処理方法は警告カテゴリ (以下参照)、警告メッセージテキスト、"
"そして警告を発したソースコード上の場所に基づいて変更することができます。ソー"
"スコード上の同じ場所に対して特定の警告が繰り返された場合、通常は抑制されま"
"す。"

#: ../../library/warnings.rst:32
msgid ""
"There are two stages in warning control: first, each time a warning is "
"issued, a determination is made whether a message should be issued or not; "
"next, if a message is to be issued, it is formatted and printed using a user-"
"settable hook."
msgstr ""
"警告制御には 2 つの段階 (stage) があります: 第一に、警告が発されるたびに、"
"メッセージを出力すべきかどうかの決定が行われます; 次に、メッセージを出力する"
"なら、メッセージはユーザによって設定が可能なフックを使って書式化され印字され"
"ます。"

#: ../../library/warnings.rst:36
msgid ""
"The determination whether to issue a warning message is controlled by the "
"warning filter, which is a sequence of matching rules and actions. Rules can "
"be added to the filter by calling :func:`filterwarnings` and reset to its "
"default state by calling :func:`resetwarnings`."
msgstr ""
"警告メッセージを出力するかどうかの決定は、警告フィルタによって制御されます。"
"警告フィルタは一致規則 (matching rule)と動作からなるシーケンスです。 :func:"
"`filterwarnings` を呼び出して一致規則をフィルタに追加することができ、 :func:"
"`resetwarnings` を呼び出してフィルタを標準設定の状態にリセットすることができ"
"ます。"

#: ../../library/warnings.rst:41
msgid ""
"The printing of warning messages is done by calling :func:`showwarning`, "
"which may be overridden; the default implementation of this function formats "
"the message by calling :func:`formatwarning`, which is also available for "
"use by custom implementations."
msgstr ""
"警告メッセージの印字は :func:`showwarning` を呼び出して行うことができ、この関"
"数は上書きすることができます; この関数の標準の実装では、 :func:"
"`formatwarning` を呼び出して警告メッセージを書式化しますが、この関数について"
"も自作の実装を使うことができます。"

#: ../../library/warnings.rst:47
msgid ""
":func:`logging.captureWarnings` allows you to handle all warnings with the "
"standard logging infrastructure."
msgstr ""
":func:`logging.captureWarnings` を使うことで、標準ロギング基盤ですべての警告"
"を扱うことができます。"

#: ../../library/warnings.rst:54
msgid "Warning Categories"
msgstr "警告カテゴリ"

#: ../../library/warnings.rst:56
msgid ""
"There are a number of built-in exceptions that represent warning categories. "
"This categorization is useful to be able to filter out groups of warnings.  "
"The following warnings category classes are currently defined:"
msgstr ""
"警告カテゴリを表現する組み込み例外は数多くあります。このカテゴリ化は警告をグ"
"ループごとフィルタする上で便利です。現在以下の警告カテゴリクラスが定義されて"
"います:"

#: ../../library/warnings.rst:63
msgid "Class"
msgstr "Class"

#: ../../library/warnings.rst:63
msgid "Description"
msgstr "説明"

#: ../../library/warnings.rst:65
msgid ":exc:`Warning`"
msgstr ":exc:`Warning`"

#: ../../library/warnings.rst:65
msgid ""
"This is the base class of all warning category classes.  It is a subclass "
"of :exc:`Exception`."
msgstr ""
"すべての警告カテゴリクラスの基底クラスです。 :exc:`Exception` のサブクラスで"
"す。"

#: ../../library/warnings.rst:69
msgid ":exc:`UserWarning`"
msgstr ":exc:`UserWarning`"

#: ../../library/warnings.rst:69
msgid "The default category for :func:`warn`."
msgstr ":func:`warn` の標準のカテゴリです。"

#: ../../library/warnings.rst:71
msgid ":exc:`DeprecationWarning`"
msgstr ":exc:`DeprecationWarning`"

#: ../../library/warnings.rst:71
msgid ""
"Base category for warnings about deprecated features (ignored by default)."
msgstr ""
"その機能が廃止されていることを示す警告カテゴリの基底クラスです (デフォルトで"
"は無視されます)。"

#: ../../library/warnings.rst:74
msgid ":exc:`SyntaxWarning`"
msgstr ":exc:`SyntaxWarning`"

#: ../../library/warnings.rst:74
msgid "Base category for warnings about dubious syntactic features."
msgstr "その文法機能があいまいであることを示す警告カテゴリの基底クラスです。"

#: ../../library/warnings.rst:77
msgid ":exc:`RuntimeWarning`"
msgstr ":exc:`RuntimeWarning`"

#: ../../library/warnings.rst:77
msgid "Base category for warnings about dubious runtime features."
msgstr ""
"そのランタイム機能があいまいであることを示す警告カテゴリの基底クラスです。"

#: ../../library/warnings.rst:80
msgid ":exc:`FutureWarning`"
msgstr ":exc:`FutureWarning`"

#: ../../library/warnings.rst:80
msgid ""
"Base category for warnings about constructs that will change semantically in "
"the future."
msgstr ""
"その構文の意味付けが将来変更される予定であることを示す警告カテゴリの基底クラ"
"スです。"

#: ../../library/warnings.rst:83
msgid ":exc:`PendingDeprecationWarning`"
msgstr ":exc:`PendingDeprecationWarning`"

#: ../../library/warnings.rst:83
msgid ""
"Base category for warnings about features that will be deprecated in the "
"future (ignored by default)."
msgstr ""
"将来その機能が廃止されることを示す警告カテゴリの基底クラスです(デフォルトでは"
"無視されます)。"

#: ../../library/warnings.rst:87
msgid ":exc:`ImportWarning`"
msgstr ":exc:`ImportWarning`"

#: ../../library/warnings.rst:87
msgid ""
"Base category for warnings triggered during the process of importing a "
"module (ignored by default)."
msgstr ""
"モジュールのインポート処理中に引き起こされる警告カテゴリの基底クラスです(デ"
"フォルトでは無視されます)。"

#: ../../library/warnings.rst:91
msgid ":exc:`UnicodeWarning`"
msgstr ":exc:`UnicodeWarning`"

#: ../../library/warnings.rst:91
msgid "Base category for warnings related to Unicode."
msgstr "Unicode に関係した警告カテゴリの基底クラスです。"

#: ../../library/warnings.rst:94
msgid ":exc:`BytesWarning`"
msgstr ":exc:`BytesWarning`"

#: ../../library/warnings.rst:94
msgid "Base category for warnings related to bytes and bytearray."
msgstr ""

#: ../../library/warnings.rst:98
msgid ""
"While these are technically built-in exceptions, they are documented here, "
"because conceptually they belong to the warnings mechanism."
msgstr ""
"これらは厳密に言えば組み込み例外ですが、概念的には警告メカニズムに属している"
"のでここで記述されています。"

#: ../../library/warnings.rst:101
msgid ""
"User code can define additional warning categories by subclassing one of the "
"standard warning categories.  A warning category must always be a subclass "
"of the :exc:`Warning` class."
msgstr ""
"標準の警告カテゴリをユーザの作成したコード上でサブクラス化することで、さらに"
"別の警告カテゴリを定義することができます。警告カテゴリは常に :exc:`Warning` "
"クラスのサブクラスでなければなりません。"

#: ../../library/warnings.rst:105
msgid ":exc:`DeprecationWarning` is ignored by default."
msgstr ":exc:`DeprecationWarning` はデフォルトでは無視されます。"

#: ../../library/warnings.rst:112
msgid "The Warnings Filter"
msgstr "警告フィルタ"

#: ../../library/warnings.rst:114
msgid ""
"The warnings filter controls whether warnings are ignored, displayed, or "
"turned into errors (raising an exception)."
msgstr ""
"警告フィルタは、ある警告を無視すべきか、表示すべきか、あるいは (例外を送出す"
"る) エラーにするべきかを制御します。"

#: ../../library/warnings.rst:117
msgid ""
"Conceptually, the warnings filter maintains an ordered list of filter "
"specifications; any specific warning is matched against each filter "
"specification in the list in turn until a match is found; the match "
"determines the disposition of the match.  Each entry is a tuple of the form "
"(*action*, *message*, *category*, *module*, *lineno*), where:"
msgstr ""
"概念的には、警告フィルタは複数のフィルタ仕様からなる順番リストを維持していま"
"す; 何らかの特定の警告が生じると、一致するものが見つかるまでリスト中の各フィ"
"ルタとの照合が行われます; 一致したフィルタ仕様がその警告の処理方法を決定しま"
"す。フィルタの各エントリは (*action*, *message*, *category*, *module*, "
"*lineno*) からなるタプルです。ここで:"

#: ../../library/warnings.rst:123
msgid "*action* is one of the following strings:"
msgstr "*action* は以下の文字列のうちの一つです:"

#: ../../library/warnings.rst:126
msgid "Value"
msgstr "``値``"

#: ../../library/warnings.rst:126
msgid "Disposition"
msgstr "処理方法"

#: ../../library/warnings.rst:128
msgid "``\"error\"``"
msgstr "``\"error\"``"

#: ../../library/warnings.rst:128
msgid "turn matching warnings into exceptions"
msgstr "一致した警告を例外に変えます"

#: ../../library/warnings.rst:130
msgid "``\"ignore\"``"
msgstr "``\"ignore\"``"

#: ../../library/warnings.rst:130
msgid "never print matching warnings"
msgstr "一致した警告を出力しません"

#: ../../library/warnings.rst:132
msgid "``\"always\"``"
msgstr "``\"always\"``"

#: ../../library/warnings.rst:132
msgid "always print matching warnings"
msgstr "一致した警告を常に出力します"

#: ../../library/warnings.rst:134
msgid "``\"default\"``"
msgstr "``\"default\"``"

#: ../../library/warnings.rst:134
msgid ""
"print the first occurrence of matching warnings for each location where the "
"warning is issued"
msgstr ""
"一致した警告のうち、警告の原因になったソースコード上の場所ごとに、最初の警告"
"のみ出力します"

#: ../../library/warnings.rst:138
msgid "``\"module\"``"
msgstr "``\"module\"``"

#: ../../library/warnings.rst:138
msgid ""
"print the first occurrence of matching warnings for each module where the "
"warning is issued"
msgstr ""
"一致した警告のうち、警告の原因になったモジュールごとに、最初の警告のみ出力し"
"ます"

#: ../../library/warnings.rst:142
msgid "``\"once\"``"
msgstr "``\"once\"``"

#: ../../library/warnings.rst:142
msgid ""
"print only the first occurrence of matching warnings, regardless of location"
msgstr ""
"一致した警告のうち、警告の原因になった場所にかかわらず最初の警告のみ出力しま"
"す"

#: ../../library/warnings.rst:146
msgid ""
"*message* is a string containing a regular expression that the start of the "
"warning message must match.  The expression is compiled to always be case-"
"insensitive."
msgstr ""
"*message* は正規表現を含む文字列で、警告メッセージの先頭はこのパターンに一致"
"しなければなりません。正規表現は常に大小文字の区別をしないようにコンパイルさ"
"れます。"

#: ../../library/warnings.rst:150
msgid ""
"*category* is a class (a subclass of :exc:`Warning`) of which the warning "
"category must be a subclass in order to match."
msgstr ""
"*category* はクラス (:exc:`Warning` のサブクラス) です。警告クラスはこのクラ"
"スのサブクラスに一致しなければなりません。"

#: ../../library/warnings.rst:153
msgid ""
"*module* is a string containing a regular expression that the module name "
"must match.  The expression is compiled to be case-sensitive."
msgstr ""
"*module* は正規表現を含む文字列で、モジュール名はこのパターンに一致しなければ"
"なりません。正規表現は常に大小文字の区別をしないようにコンパイルされます。"

#: ../../library/warnings.rst:156
msgid ""
"*lineno* is an integer that the line number where the warning occurred must "
"match, or ``0`` to match all line numbers."
msgstr ""
"*lineno* は整数で、警告が発生した場所の行番号に一致しなければなりません。"
"``0`` の場合はすべての行と一致します。"

#: ../../library/warnings.rst:159
msgid ""
"Since the :exc:`Warning` class is derived from the built-in :exc:`Exception` "
"class, to turn a warning into an error we simply raise ``category(message)``."
msgstr ""
":exc:`Warning` クラスは組み込みの :exc:`Exception` クラスから派生しているの"
"で、警告をエラーに変換するには単に ``category(message)`` を ``raise`` しま"
"す。"

#: ../../library/warnings.rst:162
msgid ""
"The warnings filter is initialized by :option:`-W` options passed to the "
"Python interpreter command line.  The interpreter saves the arguments for "
"all :option:`-W` options without interpretation in ``sys.warnoptions``; the :"
"mod:`warnings` module parses these when it is first imported (invalid "
"options are ignored, after printing a message to ``sys.stderr``)."
msgstr ""
"警告フィルタは Python インタプリタのコマンドラインに渡される :option:`-W` オ"
"プションで初期化されます。インタプリタは :option:`-W` オプションに渡されるす"
"べての引数を ``sys.warnoptions`` に変換せずに保存します; :mod:`warnings` モ"
"ジュールは最初に ``import`` された際にこれらの引数を解釈します (無効なオプ"
"ションは ``sys.stderr`` にメッセージを出力した上で無視されます)。"

#: ../../library/warnings.rst:170
msgid "Default Warning Filters"
msgstr "デフォルトの警告フィルタ"

#: ../../library/warnings.rst:172
msgid ""
"By default, Python installs several warning filters, which can be overridden "
"by the command-line options passed to :option:`-W` and calls to :func:"
"`filterwarnings`."
msgstr ""
"デフォルトで、 Python はいくつかの警告フィルタをインストールします。これはコ"
"マンドラインオプション :option:`-W` か :func:`filterwarnings` 関数でオーバー"
"ライドできます。"

#: ../../library/warnings.rst:176
msgid ""
":exc:`DeprecationWarning` and :exc:`PendingDeprecationWarning`, and :exc:"
"`ImportWarning` are ignored."
msgstr ""
":exc:`DeprecationWarning`, :exc:`PendingDeprecationWarning`, :exc:"
"`ImportWarning` は無視されます。"

#: ../../library/warnings.rst:179
msgid ""
":exc:`BytesWarning` is ignored unless the :option:`-b` option is given once "
"or twice; in this case this warning is either printed (``-b``) or turned "
"into an exception (``-bb``)."
msgstr ""
":option:`-b` オプションが1度か2度指定されない限り、 :exc:`BytesWarning` は無"
"視されます。 ``-b`` の時は警告が表示され、 ``-bb`` の時は例外になります。"

#: ../../library/warnings.rst:187
msgid "Temporarily Suppressing Warnings"
msgstr "一時的に警告を抑制する"

#: ../../library/warnings.rst:189
msgid ""
"If you are using code that you know will raise a warning, such as a "
"deprecated function, but do not want to see the warning, then it is possible "
"to suppress the warning using the :class:`catch_warnings` context manager::"
msgstr ""
"廃止予定の関数など、警告を発生させることが分かっているコードを利用する場合"
"に、そのような警告を表示したくなければ、 :class:`catch_warnings` コンテキスト"
"マネージャーを使って警告を抑制することができます::"

#: ../../library/warnings.rst:202
msgid ""
"While within the context manager all warnings will simply be ignored. This "
"allows you to use known-deprecated code without having to see the warning "
"while not suppressing the warning for other code that might not be aware of "
"its use of deprecated code.  Note: this can only be guaranteed in a single-"
"threaded application. If two or more threads use the :class:`catch_warnings` "
"context manager at the same time, the behavior is undefined."
msgstr ""
"このサンプルのコンテキストマネージャーの中では、すべての警告が無視されていま"
"す。これで、他の廃止予定のコードを含まない(つもりの)部分まで警告を抑止せず"
"に、廃止予定だと分かっているコードだけ警告を表示させないようにすることができ"
"ます。注意: これが保証できるのはシングルスレッドのアプリケーションだけです。 "
"2つ以上のスレッドが同時に :class:`catch_warnings` コンテキストマネージャーを"
"使用した場合、動作は未定義です。"

#: ../../library/warnings.rst:214
msgid "Testing Warnings"
msgstr "警告のテスト"

#: ../../library/warnings.rst:216
msgid ""
"To test warnings raised by code, use the :class:`catch_warnings` context "
"manager. With it you can temporarily mutate the warnings filter to "
"facilitate your testing. For instance, do the following to capture all "
"raised warnings to check::"
msgstr ""
"コードが警告を発生させることをテストするには、 :class:`catch_warnings` コンテ"
"キストマネージャーを利用します。このクラスを使うと、一時的に警告フィルタを操"
"作してテストに利用できます。例えば、次のコードでは、発生したすべての警告を取"
"得してチェックしています::"

#: ../../library/warnings.rst:236
msgid ""
"One can also cause all warnings to be exceptions by using ``error`` instead "
"of ``always``. One thing to be aware of is that if a warning has already "
"been raised because of a ``once``/``default`` rule, then no matter what "
"filters are set the warning will not be seen again unless the warnings "
"registry related to the warning has been cleared."
msgstr ""
"``always`` の代わりに ``error`` を利用することで、すべての警告で例外を発生さ"
"せることができます。1つ気をつけないといけないのは、一度 ``once``/``default`` "
"ルールによって発生した警告は、フィルタに何をセットしているかにかかわらず、警"
"告レジストリをクリアしない限りは 2度と発生しません。"

#: ../../library/warnings.rst:242
msgid ""
"Once the context manager exits, the warnings filter is restored to its state "
"when the context was entered. This prevents tests from changing the warnings "
"filter in unexpected ways between tests and leading to indeterminate test "
"results. The :func:`showwarning` function in the module is also restored to "
"its original value.  Note: this can only be guaranteed in a single-threaded "
"application. If two or more threads use the :class:`catch_warnings` context "
"manager at the same time, the behavior is undefined."
msgstr ""
"コンテキストマネージャーが終了したら、警告フィルタはコンテキストマネージャー"
"に入る前のものに戻されます。これは、テスト中に予期しない方法で警告フィルタが"
"変更され、テスト結果が中途半端になる事を予防します。このモジュールの :func:"
"`showwarning` 関数も元の値に戻されます。注意: これが保証できるのはシングルス"
"レッドのアプリケーションだけです。 2つ以上のスレッドが同時に :class:"
"`catch_warnings` コンテキストマネージャを使用した場合、動作は未定義です。"

#: ../../library/warnings.rst:250
msgid ""
"When testing multiple operations that raise the same kind of warning, it is "
"important to test them in a manner that confirms each operation is raising a "
"new warning (e.g. set warnings to be raised as exceptions and check the "
"operations raise exceptions, check that the length of the warning list "
"continues to increase after each operation, or else delete the previous "
"entries from the warnings list before each new operation)."
msgstr ""
"同じ種類の警告を発生させる複数の操作をテストする場合、各操作が新しい警告を発"
"生させている事を確認するのは大切な事です (例えば、警告を例外として発生させて"
"各操作が例外を発生させることを確認したり、警告リストの長さが各操作で増加して"
"いることを確認したり、警告リストを各操作の前に毎回クリアする事ができます)。"

#: ../../library/warnings.rst:259
msgid "Updating Code For New Versions of Python"
msgstr "コードを新しいバージョンの Python のために更新する"

#: ../../library/warnings.rst:261
msgid ""
"Warnings that are only of interest to the developer are ignored by default. "
"As such you should make sure to test your code with typically ignored "
"warnings made visible. You can do this from the command-line by passing :"
"option:`-Wd <-W>` to the interpreter (this is shorthand for :option:`!-W "
"default`).  This enables default handling for all warnings, including those "
"that are ignored by default. To change what action is taken for encountered "
"warnings you simply change what argument is passed to :option:`-W`, e.g. :"
"option:`!-W error`. See the :option:`-W` flag for more details on what is "
"possible."
msgstr ""
"開発者にしか興味の無い警告はデフォルトでは無視されるようになりました。なの"
"で、通常、コードをテストするときには無視されている例外を表示するようにするべ"
"きです。これは :option:`!-Wd <-W>` コマンドライン引数 (:option:`-W default` "
"の省略形) をインタプリタに指定することで可能です。これはデフォルトでは無視さ"
"れているものも含めた全ての警告に対して、デフォルトの動作を有効にします。この"
"動作を変更するためには、 :option:`!-W` への引数を変更します。例えば、 :"
"option:`!-W error` のようにします。何が可能かについての詳細は、 :option:`!-"
"W` フラグを参照してください。"

#: ../../library/warnings.rst:270
msgid "To programmatically do the same as :option:`!-Wd`, use::"
msgstr "プログラムから :option:`!-Wd` と同じ事をするには、次のようにします::"

#: ../../library/warnings.rst:274
msgid ""
"Make sure to execute this code as soon as possible. This prevents the "
"registering of what warnings have been raised from unexpectedly influencing "
"how future warnings are treated."
msgstr ""
"このコードは可能な限り早く実行してください。そうすることで、どの警告を発生さ"
"せるかの登録が、将来の警告がどう扱われるかについて思わぬ影響を与えることを避"
"けることができます。"

#: ../../library/warnings.rst:278
msgid ""
"Having certain warnings ignored by default is done to prevent a user from "
"seeing warnings that are only of interest to the developer. As you do not "
"necessarily have control over what interpreter a user uses to run their "
"code, it is possible that a new version of Python will be released between "
"your release cycles.  The new interpreter release could trigger new warnings "
"in your code that were not there in an older interpreter, e.g. :exc:"
"`DeprecationWarning` for a module that you are using. While you as a "
"developer want to be notified that your code is using a deprecated module, "
"to a user this information is essentially noise and provides no benefit to "
"them."
msgstr ""
"いくつかの警告がデフォルトで無視されているのは、開発者向けの警告をユーザーに"
"見せることを避けるためです。ユーザーがどのインタプリタを使ってコードを実行す"
"るのかを必ずしも制御できるわけではないので、自分のコードのリリースサイクルの"
"間に新しいバージョンの Python がリリースされるかもしれません。新しいインタプ"
"リタは、古いインタプリタが出さなかった新しい警告を発生させるかもしれません。"
"例えば、利用しているモジュールに対して :exc:`DeprecationWarning` が発生される"
"ことがあります。開発者としては、廃止予定のモジュールを利用していることに対す"
"る通知は有益ですが、一般ユーザーにとってはこの情報はノイズでしか無く、何の役"
"にも立ちません。"

#: ../../library/warnings.rst:292
msgid "Available Functions"
msgstr "利用可能な関数"

#: ../../library/warnings.rst:297
msgid ""
"Issue a warning, or maybe ignore it or raise an exception.  The *category* "
"argument, if given, must be a warning category class (see above); it "
"defaults to :exc:`UserWarning`.  Alternatively *message* can be a :exc:"
"`Warning` instance, in which case *category* will be ignored and ``message."
"__class__`` will be used. In this case the message text will be "
"``str(message)``. This function raises an exception if the particular "
"warning issued is changed into an error by the warnings filter see above.  "
"The *stacklevel* argument can be used by wrapper functions written in "
"Python, like this::"
msgstr ""
"警告を発するか、無視するか、あるいは例外を送出します。 *category* 引数が与え"
"られた場合、警告カテゴリクラスでなければなりません (上記を参照してください); "
"標準の値は :exc:`UserWarning` です。 *message* を :exc:`Warning` インスタンス"
"で代用することもできますが、この場合 *category* は無視され、 ``message."
"__class__`` が使われ、メッセージ文は ``str(message)`` になります。発された例"
"外が前述した警告フィルタによってエラーに変更された場合、この関数は例外を送出"
"します。引数 *stacklevel* は Python でラッパー関数を書く際に利用することがで"
"きます。例えば::"

#: ../../library/warnings.rst:309
msgid ""
"This makes the warning refer to :func:`deprecation`'s caller, rather than to "
"the source of :func:`deprecation` itself (since the latter would defeat the "
"purpose of the warning message)."
msgstr ""
"こうすることで、警告が参照するソースコード部分を、 :func:`deprecation` 自身で"
"はなく :func:`deprecation` を呼び出した側にできます (というのも、前者の場合は"
"警告メッセージの目的を台無しにしてしまうからです)。"

#: ../../library/warnings.rst:316
msgid ""
"This is a low-level interface to the functionality of :func:`warn`, passing "
"in explicitly the message, category, filename and line number, and "
"optionally the module name and the registry (which should be the "
"``__warningregistry__`` dictionary of the module).  The module name defaults "
"to the filename with ``.py`` stripped; if no registry is passed, the warning "
"is never suppressed. *message* must be a string and *category* a subclass "
"of :exc:`Warning` or *message* may be a :exc:`Warning` instance, in which "
"case *category* will be ignored."
msgstr ""
":func:`warn` の機能に対する低レベルのインタフェースで、メッセージ、警告カテゴ"
"リ、ファイル名および行番号、そしてオプションのモジュール名およびレジストリ情"
"報 (モジュールの  ``__warningregistry__`` 辞書) を明示的に渡します。モジュー"
"ル名は標準で ``.py`` が取り去られたファイル名になります; レジストリが渡されな"
"かった場合、警告が抑制されることはありません。 *message* が文字列のとき、 "
"*category* は :exc:`Warning` のサブクラスでなければなりません。また "
"*message* は :exc:`Warning` のインスタンスであってもよく、この場合 "
"*category* は無視されます。"

#: ../../library/warnings.rst:325
msgid ""
"*module_globals*, if supplied, should be the global namespace in use by the "
"code for which the warning is issued.  (This argument is used to support "
"displaying source for modules found in zipfiles or other non-filesystem "
"import sources)."
msgstr ""
"*module_globals* は、もし与えられるならば、警告が発せられるコードが使っている"
"グローバル名前空間でなければなりません (この引数は zipfile やその他の非ファイ"
"ルシステムのインポート元の中にあるモジュールのソースを表示することをサポート"
"するためのものです)。"

#: ../../library/warnings.rst:330
msgid "Added the *module_globals* parameter."
msgstr "*module_globals* パラメータが追加されました。"

#: ../../library/warnings.rst:336
msgid ""
"Issue a warning related to Python 3.x deprecation. Warnings are only shown "
"when Python is started with the -3 option. Like :func:`warn` *message* must "
"be a string and *category* a subclass of :exc:`Warning`. :func:`warnpy3k` is "
"using :exc:`DeprecationWarning` as default warning class."
msgstr ""
"Python 3.x で廃止予定についての警告を発生させます。 Pythonが -3 オプション付"
"きで実行されているときのみ警告が表示されます。 :func:`warn` と同じく、 "
"*message* は文字列で、 *category* は :exc:`Warning` のサブクラスである必要が"
"あります。 :func:`warnpy3k` は :exc:`DeprecationWarning` をデフォルトの"
"warning クラスとして利用しています。"

#: ../../library/warnings.rst:346
msgid ""
"Write a warning to a file.  The default implementation calls "
"``formatwarning(message, category, filename, lineno, line)`` and writes the "
"resulting string to *file*, which defaults to ``sys.stderr``.  You may "
"replace this function with an alternative implementation by assigning to "
"``warnings.showwarning``. *line* is a line of source code to be included in "
"the warning message; if *line* is not supplied, :func:`showwarning` will try "
"to read the line specified by *filename* and *lineno*."
msgstr ""
"警告をファイルに書き込みます。標準の実装では、 ``formatwarning(message, "
"category, filename, lineno, line)`` を呼び出し、返された文字列を *file* に書"
"き込みます。 *file* は標準では ``sys.stderr`` です。この関数は ``warnings."
"showwarning`` に別の実装を代入して置き換えることができます。 *line* は警告"
"メッセージに含めるソースコードの1行です。 *line* が与えられない場合、 :func:"
"`showwarning` は *filename* と *lineno* から行を取得することを試みます。"

#: ../../library/warnings.rst:355
msgid "The *line* argument is required to be supported."
msgstr "*line* 引数のサポートが必須になりました。"

#: ../../library/warnings.rst:361
msgid ""
"Format a warning the standard way.  This returns a string which may contain "
"embedded newlines and ends in a newline.  *line* is a line of source code to "
"be included in the warning message; if *line* is not supplied, :func:"
"`formatwarning` will try to read the line specified by *filename* and "
"*lineno*."
msgstr ""
"警告を通常の方法で書式化します。返される文字列内には改行が埋め込まれている可"
"能性があり、かつ文字列は改行で終端されています。 *line* は警告メッセージに含"
"まれるソースコードの1行です。 *line* が渡されない場合、 :func:"
"`formatwarning` は *filename* と *lineno* から行の取得を試みます。"

#: ../../library/warnings.rst:367
msgid "Added the *line* argument."
msgstr "*line* 引数が追加されました。"

#: ../../library/warnings.rst:373
msgid ""
"Insert an entry into the list of :ref:`warnings filter specifications "
"<warning-filter>`.  The entry is inserted at the front by default; if "
"*append* is true, it is inserted at the end.  This checks the types of the "
"arguments, compiles the *message* and *module* regular expressions, and "
"inserts them as a tuple in the list of warnings filters.  Entries closer to "
"the front of the list override entries later in the list, if both match a "
"particular warning.  Omitted arguments default to a value that matches "
"everything."
msgstr ""
":ref:`警告フィルタ仕様 <warning-filter>` のリストにエントリを一つ挿入します。"
"標準ではエントリは先頭に挿入されます; *append* が真ならば、末尾に挿入されま"
"す。この関数は引数の型をチェックし、 *message* および *module* の正規表現をコ"
"ンパイルしてから、これらをタプルにして警告フィルタのリストに挿入します。二つ"
"のエントリが特定の警告に合致した場合、リストの先頭に近い方のエントリが後方に"
"あるエントリに優先します。引数が省略されると、標準ではすべてにマッチする値に"
"設定されます。"

#: ../../library/warnings.rst:385
msgid ""
"Insert a simple entry into the list of :ref:`warnings filter specifications "
"<warning-filter>`.  The meaning of the function parameters is as for :func:"
"`filterwarnings`, but regular expressions are not needed as the filter "
"inserted always matches any message in any module as long as the category "
"and line number match."
msgstr ""
"単純なエントリを :ref:`警告フィルタ仕様 <warning-filter>` のリストに挿入しま"
"す。引数の意味は :func:`filterwarnings` と同じですが、この関数により挿入され"
"るフィルタはカテゴリと行番号が一致していればすべてのモジュールのすべてのメッ"
"セージに合致しますので、正規表現は必要ありません。"

#: ../../library/warnings.rst:394
msgid ""
"Reset the warnings filter.  This discards the effect of all previous calls "
"to :func:`filterwarnings`, including that of the :option:`-W` command line "
"options and calls to :func:`simplefilter`."
msgstr ""
"警告フィルタをリセットします。これにより、 :option:`-W` コマンドラインオプ"
"ションによるもの :func:`simplefilter` 呼び出しによるものを含め、 :func:"
"`filterwarnings` の呼び出しによる影響はすべて無効化されます。"

#: ../../library/warnings.rst:400
msgid "Available Context Managers"
msgstr "利用可能なコンテキストマネージャー"

#: ../../library/warnings.rst:404
msgid ""
"A context manager that copies and, upon exit, restores the warnings filter "
"and the :func:`showwarning` function. If the *record* argument is :const:"
"`False` (the default) the context manager returns :class:`None` on entry. If "
"*record* is :const:`True`, a list is returned that is progressively "
"populated with objects as seen by a custom :func:`showwarning` function "
"(which also suppresses output to ``sys.stdout``). Each object in the list "
"has attributes with the same names as the arguments to :func:`showwarning`."
msgstr ""
"警告フィルタと :func:`showwarning` 関数をコピーし、終了時に復元するコンテキス"
"トマネージャーです。 *record* 引数が :const:`False` (デフォルト値)だった場"
"合、コンテキスト開始時には :const:`None` を返します。もし *record* が :const:"
"`True` だった場合、リストを返します。このリストにはカスタムの :func:"
"`showwarning` 関数(この関数は同時に ``sys.stdout`` への出力を抑制します)に"
"よってオブジェクトが継続的に追加されます。リストの中の各オブジェクトは、 :"
"func:`showwarning` 関数の引数と同じ名前の属性を持っています。"

#: ../../library/warnings.rst:413
msgid ""
"The *module* argument takes a module that will be used instead of the module "
"returned when you import :mod:`warnings` whose filter will be protected. "
"This argument exists primarily for testing the :mod:`warnings` module itself."
msgstr ""
"*module* 引数は、保護したいフィルタを持つモジュールを取ります。 :mod:"
"`warnings` を import して得られるモジュールの代わりに利用されます。この引数"
"は、主に :mod:`warnings` モジュール自体をテストする目的で追加されました。"

#: ../../library/warnings.rst:420
msgid ""
"The :class:`catch_warnings` manager works by replacing and then later "
"restoring the module's :func:`showwarning` function and internal list of "
"filter specifications.  This means the context manager is modifying global "
"state and therefore is not thread-safe."
msgstr ""
":class:`catch_warnings` マネージャーは、モジュールの :func:`showwarning` 関数"
"と内部のフィルタ仕様のリストを置き換え、その後復元することによって動作してい"
"ます。これは、コンテキストマネージャーがグローバルな状態を変更していることを"
"意味していて、したがってスレッドセーフではありません。"

#: ../../library/warnings.rst:428
msgid ""
"In Python 3, the arguments to the constructor for :class:`catch_warnings` "
"are keyword-only arguments."
msgstr ""
"Python 3 では、 :class:`catch_warnings` コンストラクタの引数はキーワード引数"
"のみになりました。"
