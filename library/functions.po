# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-10-18 09:02+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/functions.rst:5 ../../library/functions.rst:11
msgid "Built-in Functions"
msgstr "組み込み関数"

#: ../../library/functions.rst:7
msgid ""
"The Python interpreter has a number of functions built into it that are "
"always available.  They are listed here in alphabetical order."
msgstr ""
"Python インタプリタは数多くの組み込み関数を持っていて、いつでも利用することが"
"できます。それらの関数をアルファベット順に挙げます。"

#: ../../library/functions.rst:13
msgid ":func:`abs`"
msgstr ":func:`abs`"

#: ../../library/functions.rst:13
msgid ":func:`divmod`"
msgstr ":func:`divmod`"

#: ../../library/functions.rst:13
msgid ":func:`input`"
msgstr ":func:`input`"

#: ../../library/functions.rst:13
msgid ":func:`open`"
msgstr ":func:`open`"

#: ../../library/functions.rst:13
msgid ":func:`staticmethod`"
msgstr ":func:`staticmethod`"

#: ../../library/functions.rst:14
msgid ":func:`all`"
msgstr ":func:`all`"

#: ../../library/functions.rst:14
msgid ":func:`enumerate`"
msgstr ":func:`enumerate`"

#: ../../library/functions.rst:14
msgid ":func:`int`"
msgstr ":func:`int`"

#: ../../library/functions.rst:14
msgid ":func:`ord`"
msgstr ":func:`ord`"

#: ../../library/functions.rst:14
msgid ":func:`str`"
msgstr ":func:`str`"

#: ../../library/functions.rst:15
msgid ":func:`any`"
msgstr ":func:`any`"

#: ../../library/functions.rst:15
msgid ":func:`eval`"
msgstr ":func:`eval`"

#: ../../library/functions.rst:15
msgid ":func:`isinstance`"
msgstr ":func:`isinstance`"

#: ../../library/functions.rst:15
msgid ":func:`pow`"
msgstr ":func:`pow`"

#: ../../library/functions.rst:15
msgid ":func:`sum`"
msgstr ":func:`sum`"

#: ../../library/functions.rst:16
msgid ":func:`basestring`"
msgstr ":func:`basestring`"

#: ../../library/functions.rst:16
msgid ":func:`execfile`"
msgstr ":func:`execfile`"

#: ../../library/functions.rst:16
msgid ":func:`issubclass`"
msgstr ":func:`issubclass`"

#: ../../library/functions.rst:16
msgid ":func:`print`"
msgstr ":func:`print`"

#: ../../library/functions.rst:16
msgid ":func:`super`"
msgstr ":func:`super`"

#: ../../library/functions.rst:17
msgid ":func:`bin`"
msgstr ":func:`bin`"

#: ../../library/functions.rst:17
msgid ":func:`file`"
msgstr ":func:`file`"

#: ../../library/functions.rst:17
msgid ":func:`iter`"
msgstr ":func:`iter`"

#: ../../library/functions.rst:17
msgid ":func:`property`"
msgstr ":func:`property`"

#: ../../library/functions.rst:17
msgid ":func:`tuple`"
msgstr ":func:`tuple`"

#: ../../library/functions.rst:18
msgid ":func:`bool`"
msgstr ":func:`bool`"

#: ../../library/functions.rst:18
msgid ":func:`filter`"
msgstr ":func:`filter`"

#: ../../library/functions.rst:18
msgid ":func:`len`"
msgstr ":func:`len`"

#: ../../library/functions.rst:18
msgid ":func:`range`"
msgstr ":func:`range`"

#: ../../library/functions.rst:18
msgid ":func:`type`"
msgstr ":func:`type`"

#: ../../library/functions.rst:19
msgid ":func:`bytearray`"
msgstr ":func:`bytearray`"

#: ../../library/functions.rst:19
msgid ":func:`float`"
msgstr ":func:`float`"

#: ../../library/functions.rst:19
msgid "|func-list|_"
msgstr "|func-list|_"

#: ../../library/functions.rst:19
msgid ":func:`raw_input`"
msgstr ":func:`raw_input`"

#: ../../library/functions.rst:19
msgid ":func:`unichr`"
msgstr ":func:`unichr`"

#: ../../library/functions.rst:20
msgid ":func:`callable`"
msgstr ":func:`callable`"

#: ../../library/functions.rst:20
msgid ":func:`format`"
msgstr ":func:`format`"

#: ../../library/functions.rst:20
msgid ":func:`locals`"
msgstr ":func:`locals`"

#: ../../library/functions.rst:20
msgid ":func:`reduce`"
msgstr ":func:`reduce`"

#: ../../library/functions.rst:20
msgid ":func:`unicode`"
msgstr ":func:`unicode`"

#: ../../library/functions.rst:21
msgid ":func:`chr`"
msgstr ":func:`chr`"

#: ../../library/functions.rst:21
msgid "|func-frozenset|_"
msgstr "|func-frozenset|_"

#: ../../library/functions.rst:21
msgid ":func:`long`"
msgstr ":func:`long`"

#: ../../library/functions.rst:21
msgid ":func:`reload`"
msgstr ":func:`reload`"

#: ../../library/functions.rst:21
msgid ":func:`vars`"
msgstr ":func:`vars`"

#: ../../library/functions.rst:22
msgid ":func:`classmethod`"
msgstr ":func:`classmethod`"

#: ../../library/functions.rst:22
msgid ":func:`getattr`"
msgstr ":func:`getattr`"

#: ../../library/functions.rst:22
msgid ":func:`map`"
msgstr ":func:`map`"

#: ../../library/functions.rst:22
msgid "|func-repr|_"
msgstr "|func-repr|_"

#: ../../library/functions.rst:22
msgid ":func:`xrange`"
msgstr ":func:`xrange`"

#: ../../library/functions.rst:23
msgid ":func:`cmp`"
msgstr ":func:`cmp`"

#: ../../library/functions.rst:23
msgid ":func:`globals`"
msgstr ":func:`globals`"

#: ../../library/functions.rst:23
msgid ":func:`max`"
msgstr ":func:`max`"

#: ../../library/functions.rst:23
msgid ":func:`reversed`"
msgstr ":func:`reversed`"

#: ../../library/functions.rst:23
msgid ":func:`zip`"
msgstr ":func:`zip`"

#: ../../library/functions.rst:24
msgid ":func:`compile`"
msgstr ":func:`compile`"

#: ../../library/functions.rst:24
msgid ":func:`hasattr`"
msgstr ":func:`hasattr`"

#: ../../library/functions.rst:24
msgid "|func-memoryview|_"
msgstr "|func-memoryview|_"

#: ../../library/functions.rst:24
msgid ":func:`round`"
msgstr ":func:`round`"

#: ../../library/functions.rst:24
msgid ":func:`__import__`"
msgstr ":func:`__import__`"

#: ../../library/functions.rst:25
msgid ":func:`complex`"
msgstr ":func:`complex`"

#: ../../library/functions.rst:25
msgid ":func:`hash`"
msgstr ":func:`hash`"

#: ../../library/functions.rst:25
msgid ":func:`min`"
msgstr ":func:`min`"

#: ../../library/functions.rst:25
msgid "|func-set|_"
msgstr "|func-set|_"

#: ../../library/functions.rst:26
msgid ":func:`delattr`"
msgstr ":func:`delattr`"

#: ../../library/functions.rst:26
msgid ":func:`help`"
msgstr ":func:`help`"

#: ../../library/functions.rst:26
msgid ":func:`next`"
msgstr ":func:`next`"

#: ../../library/functions.rst:26
msgid ":func:`setattr`"
msgstr ":func:`setattr`"

#: ../../library/functions.rst:27
msgid "|func-dict|_"
msgstr "|func-dict|_"

#: ../../library/functions.rst:27
msgid ":func:`hex`"
msgstr ":func:`hex`"

#: ../../library/functions.rst:27
msgid ":func:`object`"
msgstr ":func:`object`"

#: ../../library/functions.rst:27
msgid ":func:`slice`"
msgstr ":func:`slice`"

#: ../../library/functions.rst:28
msgid ":func:`dir`"
msgstr ":func:`dir`"

#: ../../library/functions.rst:28
msgid ":func:`id`"
msgstr ":func:`id`"

#: ../../library/functions.rst:28
msgid ":func:`oct`"
msgstr ":func:`oct`"

#: ../../library/functions.rst:28
msgid ":func:`sorted`"
msgstr ":func:`sorted`"

#: ../../library/functions.rst:31
msgid ""
"In addition, there are other four built-in functions that are no longer "
"considered essential: :func:`apply`, :func:`buffer`, :func:`coerce`, and :"
"func:`intern`.  They are documented in the :ref:`non-essential-built-in-"
"funcs` section."
msgstr ""
"これらに加えて、今では不可欠なものとは考えることがなくなった 4 つの組み込み関"
"数があります: :func:`apply`, :func:`buffer`, :func:`coerce`, :func:`intern` "
"です。これらは :ref:`non-essential-built-in-funcs`  セクションで説明していま"
"す。"

#: ../../library/functions.rst:49
msgid ""
"Return the absolute value of a number.  The argument may be a plain or long "
"integer or a floating point number.  If the argument is a complex number, "
"its magnitude is returned."
msgstr ""
"数値の絶対値を返します。引数として通常の整数、長整数、浮動小数点数をとること"
"ができます。引数が複素数の場合、その大きさ (magnitude) が返されます。"

#: ../../library/functions.rst:56
msgid ""
"Return ``True`` if all elements of the *iterable* are true (or if the "
"iterable is empty).  Equivalent to::"
msgstr ""
"*iterable* の全ての要素が真ならば (もしくは *iterable* が空ならば) ``True`` "
"を返します。以下のコードと等価です::"

#: ../../library/functions.rst:70
msgid ""
"Return ``True`` if any element of the *iterable* is true.  If the iterable "
"is empty, return ``False``.  Equivalent to::"
msgstr ""
"*iterable* のいずれかの要素が真ならば ``True`` を返します。*iterable* が空な"
"ら ``False`` を返します。以下のコードと等価です::"

#: ../../library/functions.rst:84
msgid ""
"This abstract type is the superclass for :class:`str` and :class:`unicode`. "
"It cannot be called or instantiated, but it can be used to test whether an "
"object is an instance of :class:`str` or :class:`unicode`. ``isinstance(obj, "
"basestring)`` is equivalent to ``isinstance(obj, (str, unicode))``."
msgstr ""
"この抽象型は、 :class:`str` および :class:`unicode` の スーパークラスです。 "
"この型は呼び出したりインスタンス化したりはできませんが、オブジェクトが :"
"class:`str` や :class:`unicode` の インスタンスであるかどうかを調べる際に利用"
"できます。 ``isinstance(obj, basestring)`` は ``isinstance(obj, (str, "
"unicode))`` と等価です。"

#: ../../library/functions.rst:94
msgid ""
"Convert an integer number to a binary string. The result is a valid Python "
"expression.  If *x* is not a Python :class:`int` object, it has to define "
"an :meth:`__index__` method that returns an integer."
msgstr ""
"整数を二進文字列に変換します。結果は Python の式としても使える形式になりま"
"す。 *x* が Python の :class:`int` オブジェクトでない場合、整数値を返す :"
"meth:`__index__` メソッドが定義されていなければなりません。"

#: ../../library/functions.rst:103
msgid ""
"Return a Boolean value, i.e. one of ``True`` or ``False``.  *x* is converted "
"using the standard truth testing procedure.  If *x* is false or omitted, "
"this returns :const:`False`; otherwise it returns :const:`True`. :class:"
"`bool` is also a class, which is a subclass of :class:`int`. Class :class:"
"`bool` cannot be subclassed further.  Its only instances are :const:`False` "
"and :const:`True`."
msgstr ""
"ブール値、即ち ``True`` または ``False`` のどちらかを返します。 *x* は標準"
"の :ref:`真理値判定プロシージャ <truth>` を用いて変換されます。 *x* が偽また"
"は省略されている場合、この関数は ``False`` を返します。それ以外の場合、 "
"``True`` を返します。 :class:`bool` クラスは :class:`int` クラスの派生クラス"
"です。 :class:`bool`  からさらに派生することはできません。ブール値のインスタ"
"ンスは :const:`False` と :const:`True` のみです。"

#: ../../library/functions.rst:114
msgid "If no argument is given, this function returns :const:`False`."
msgstr "引数が与えられなかった場合、この関数は :const:`False` を返します。"

#: ../../library/functions.rst:120
msgid ""
"Return a new array of bytes.  The :class:`bytearray` class is a mutable "
"sequence of integers in the range 0 <= x < 256.  It has most of the usual "
"methods of mutable sequences, described in :ref:`typesseq-mutable`, as well "
"as most methods that the :class:`str` type has, see :ref:`string-methods`."
msgstr ""
"新しいバイト配列を返します。 :class:`bytearray` クラスは0 <= x < 256の範囲の"
"整数からなる :term:`mutable` なシーケンスです。 :ref:`typesseq-mutable` に記"
"述されている  :term:`mutable`  なシーケンスに対する普通のメソッドの大半を備え"
"ています。また、 :class:`str` 型が持つメソッドの大半も備えています（:ref:"
"`string-methods` 参照）。"

#: ../../library/functions.rst:125
msgid ""
"The optional *source* parameter can be used to initialize the array in a few "
"different ways:"
msgstr ""
"オプションの *source* パラメタは、配列を異なる方法で初期化するのに使われます:"

#: ../../library/functions.rst:128
msgid ""
"If it is *unicode*, you must also give the *encoding* (and optionally, "
"*errors*) parameters; :func:`bytearray` then converts the unicode to bytes "
"using :meth:`unicode.encode`."
msgstr ""
"それが *unicode* なら、 *encoding* (と、オプションの *errors*) パラメタも与え"
"なければなりません。このとき :func:`bytearray` は unicode を :meth:`unicode."
"encode` でバイトに変換して返します。"

#: ../../library/functions.rst:132
msgid ""
"If it is an *integer*, the array will have that size and will be initialized "
"with null bytes."
msgstr ""
"これが *整数* なら、配列はそのサイズになり、null バイトで初期化されます。"

#: ../../library/functions.rst:135
msgid ""
"If it is an object conforming to the *buffer* interface, a read-only buffer "
"of the object will be used to initialize the bytes array."
msgstr ""
"これが *バッファ* インタフェースに適合するオブジェクトなら、そのオブジェクト"
"の読み込み専用バッファがバイト配列の初期化に使われます。"

#: ../../library/functions.rst:138
msgid ""
"If it is an *iterable*, it must be an iterable of integers in the range ``0 "
"<= x < 256``, which are used as the initial contents of the array."
msgstr ""
"これが *イテラブル* なら、それは範囲 ``0 <= x < 256`` 内の整数のイテラブルで"
"あることが必要で、それらが配列の初期の内容になります。"

#: ../../library/functions.rst:141
msgid "Without an argument, an array of size 0 is created."
msgstr "引数がなければ、長さ 0 の配列が生成されます。"

#: ../../library/functions.rst:148
msgid ""
"Return :const:`True` if the *object* argument appears callable, :const:"
"`False` if not.  If this returns true, it is still possible that a call "
"fails, but if it is false, calling *object* will never succeed.  Note that "
"classes are callable (calling a class returns a new instance); class "
"instances are callable if they have a :meth:`__call__` method."
msgstr ""
"引数 *object* が呼び出し可能オブジェクトであれば、 :const:`True` を返します。"
"そうでなければ、 :const:`False` を返します。この関数が真を返しても *object* "
"の呼び出しは失敗する可能性がありますが、偽を返した場合は決して成功することは"
"ありません。クラスは呼び 出し可能 (クラスを呼び出すと新しいインスタンスを返し"
"ます) なことと、クラスのインスタンスがメソッド :meth:`__call__` を持つ場合に"
"は呼び出しが可能なことに注意してください。"

#: ../../library/functions.rst:158
msgid ""
"Return a string of one character whose ASCII code is the integer *i*.  For "
"example, ``chr(97)`` returns the string ``'a'``. This is the inverse of :"
"func:`ord`.  The argument must be in the range [0..255], inclusive; :exc:"
"`ValueError` will be raised if *i* is outside that range. See also :func:"
"`unichr`."
msgstr ""
"ASCII コードが整数 *i* となるような文字 1 字からなる文字列を返します。例え"
"ば、 ``chr(97)`` は文字列 ``'a'`` を返します。この関数は :func:`ord` の逆で"
"す。引数は [0..255] の両端を含む範囲内に収まらなければなりません; *i* が範囲"
"外の値のときには :exc:`ValueError` が送出されます。 :func:`unichr` も参照下さ"
"い。"

#: ../../library/functions.rst:167
msgid "Return a class method for *function*."
msgstr "*function* のクラスメソッドを返します。"

#: ../../library/functions.rst:169
msgid ""
"A class method receives the class as implicit first argument, just like an "
"instance method receives the instance. To declare a class method, use this "
"idiom::"
msgstr ""
"クラスメソッドは、インスタンスメソッドが暗黙の第一引数としてインスタンスをと"
"るように、第一引数としてクラスをとります。クラスメソッドを宣言するには、以下"
"のイディオムを使います::"

#: ../../library/functions.rst:178
msgid ""
"The ``@classmethod`` form is a function :term:`decorator` -- see :ref:"
"`function` for details."
msgstr ""
"``@classmethod`` 形式は関数デコレータ (:term:`decorator`) です。詳しくは :"
"ref:`function` を参照してください。"

#: ../../library/functions.rst:181
msgid ""
"A class method can be called either on the class (such as ``C.f()``) or on "
"an instance (such as ``C().f()``).  The instance is ignored except for its "
"class. If a class method is called for a derived class, the derived class "
"object is passed as the implied first argument."
msgstr ""
"クラスメソッドは、(``C.f()`` のように) クラスから呼び出すことも、(``C()."
"f()`` のように) インスタンスから呼び出すこともできます。\n"
"インスタンスはそのクラスが何であるかを除いて無視されます。\n"
"クラスメソッドが派生クラスから呼び出される場合は、その派生クラスオブジェクト"
"が暗黙の第一引数として渡されます。"

#: ../../library/functions.rst:186
msgid ""
"Class methods are different than C++ or Java static methods. If you want "
"those, see :func:`staticmethod`."
msgstr ""
"クラスメソッドは C++ や Java の静的メソッドとは異なります。\n"
"それが欲しければ、 :func:`staticmethod` を参照してください。"

#: ../../library/functions.rst:189
msgid "For more information on class methods, see :ref:`types`."
msgstr "クラスメソッドについて詳しい情報は :ref:`types` を参照してください。"

#: ../../library/functions.rst:193 ../../library/functions.rst:1368
msgid "Function decorator syntax added."
msgstr "関数デコレータ構文を追加しました."

#: ../../library/functions.rst:199
msgid ""
"Compare the two objects *x* and *y* and return an integer according to the "
"outcome.  The return value is negative if ``x < y``, zero if ``x == y`` and "
"strictly positive if ``x > y``."
msgstr ""
"二つのオブジェクト *x* および *y* を比較し、その結果に従って整数を返します。"
"戻り値は ``x`` < ``y`` のときには負、 ``x == y`` の時にはゼロ、 ``x > y`` に"
"は厳密に正の値になります。"

#: ../../library/functions.rst:206
msgid ""
"Compile the *source* into a code or AST object.  Code objects can be "
"executed by an :keyword:`exec` statement or evaluated by a call to :func:"
"`eval`. *source* can either be a Unicode string, a *Latin-1* encoded string "
"or an AST object. Refer to the :mod:`ast` module documentation for "
"information on how to work with AST objects."
msgstr ""
"*source* をコードオブジェクト、もしくは、 AST オブジェクトにコンパイルしま"
"す。 コードオブジェクトは :keyword:`exec` 文で実行したり、 :func:`eval` 呼び"
"出しで評価できます。 *source* は Unicode 文字列、 *Latin-1*  エンコードのバイ"
"ト列、 AST オブジェクトのいずれでもかまいません。 AST オブジェクトへの、ま"
"た、 AST オブジェクトからのコンパイルの方法は、 :mod:`ast` モジュールのドキュ"
"メントを参照してください。"

#: ../../library/functions.rst:213
msgid ""
"The *filename* argument should give the file from which the code was read; "
"pass some recognizable value if it wasn't read from a file (``'<string>'`` "
"is commonly used)."
msgstr ""
"*filename* 引数には、コードの読み出し元のファイルを与えなければなりません; "
"ファイルから読み出されるのでなければ、認識可能な値を渡して下さい "
"(``'<string>'`` が一般的に使われます)。"

#: ../../library/functions.rst:217
msgid ""
"The *mode* argument specifies what kind of code must be compiled; it can be "
"``'exec'`` if *source* consists of a sequence of statements, ``'eval'`` if "
"it consists of a single expression, or ``'single'`` if it consists of a "
"single interactive statement (in the latter case, expression statements that "
"evaluate to something other than ``None`` will be printed)."
msgstr ""
"*mode* 引数は、コンパイルされるコードの種類を指定します; *source* が一連の文"
"から成るなら ``'exec'`` 、単一の式から成るなら ``'eval'`` 、単一の対話的文の"
"場合 ``'single'`` です。(後者の場合、評価が ``None`` 以外である式文が印字され"
"ます)。"

#: ../../library/functions.rst:223
msgid ""
"The optional arguments *flags* and *dont_inherit* control which future "
"statements (see :pep:`236`) affect the compilation of *source*.  If neither "
"is present (or both are zero) the code is compiled with those future "
"statements that are in effect in the code that is calling :func:`compile`.  "
"If the *flags* argument is given and *dont_inherit* is not (or is zero) then "
"the future statements specified by the *flags* argument are used in addition "
"to those that would be used anyway. If *dont_inherit* is a non-zero integer "
"then the *flags* argument is it -- the future statements in effect around "
"the call to compile are ignored."
msgstr ""
"オプション引数 *flags* および *dont_inherit* は、 *source* のコンパイルにど"
"の future 文 (:pep:`236` 参照) を作用させるかを制御します。どちらも与えらてい"
"ない (または両方ともゼロ) ならば、 :func:`compile` を呼び出している側のコード"
"で有効な future 文を有効にしてコードをコンパイルします。 *flags* が与えられて"
"いて、*dont_inherit* は与えられていない (またはゼロ) ならば、それに加えて "
"*flags* に指定された future 文が使われます。 *dont_inherit* がゼロでない整数"
"ならば、 *flags* の値そのものが使われ、コンパイルの呼び出して周辺で有効な "
"future 文は無視されます。"

#: ../../library/functions.rst:233
msgid ""
"Future statements are specified by bits which can be bitwise ORed together "
"to specify multiple statements.  The bitfield required to specify a given "
"feature can be found as the :attr:`~__future__._Feature.compiler_flag` "
"attribute on the :class:`~__future__._Feature` instance in the :mod:"
"`__future__` module."
msgstr ""
"future 文はビットフィールドで指定されます。ビットフィールドはビット単位の OR "
"を取ることで複数の文を指定することができます。特定の機能を指定するために必要"
"なビットフィールドは、:mod:`__future__` モジュールの :class:`~__future__."
"_Feature` インスタンスにおける :attr:`~__future__._Feature.compiler_flag` 属"
"性で得られます。"

#: ../../library/functions.rst:238
msgid ""
"This function raises :exc:`SyntaxError` if the compiled source is invalid, "
"and :exc:`TypeError` if the source contains null bytes."
msgstr ""
"この関数は、コンパイルするソースが不正である場合 :exc:`SyntaxError` を、ソー"
"スがヌルバイトを含む場合 :exc:`TypeError` を送出します。"

#: ../../library/functions.rst:241
msgid ""
"If you want to parse Python code into its AST representation, see :func:`ast."
"parse`."
msgstr ""
"Python コードをパースしてその AST 表現を得たいのであれば、 :func:`ast.parse` "
"を参照してください。"

#: ../../library/functions.rst:246
msgid ""
"When compiling a string with multi-line code in ``'single'`` or ``'eval'`` "
"mode, input must be terminated by at least one newline character.  This is "
"to facilitate detection of incomplete and complete statements in the :mod:"
"`code` module."
msgstr ""
"複数行に渡るコードの文字列を ``'single'`` や ``'eval'`` モードでコンパイルす"
"るとき、入力は一つ以上の改行文字で終端されなければなりません。これは、 :mod:"
"`code` モジュールで不完全な文と完全な文を検知しやすくするためです。"

#: ../../library/functions.rst:253
msgid ""
"It is possible to crash the Python interpreter with a sufficiently large/"
"complex string when compiling to an AST object due to stack depth "
"limitations in Python's AST compiler."
msgstr ""
"AST オブジェクトにコンパイルしているときに、十分に大きい文字列や複雑な文字列"
"によって Python の抽象構文木コンパイラのスタックが深さの限界を越えることで、 "
"Python インタプリタをクラッシュさせられます。"

#: ../../library/functions.rst:257
msgid "The *flags* and *dont_inherit* arguments were added."
msgstr "*flags* と *dont_inherit* 引数が追加されました。"

#: ../../library/functions.rst:260
msgid "Support for compiling AST objects."
msgstr "AST オブジェクトのコンパイルをサポートしました。"

#: ../../library/functions.rst:263
msgid ""
"Allowed use of Windows and Mac newlines.  Also input in ``'exec'`` mode does "
"not have to end in a newline anymore."
msgstr ""
"Windows や Mac の改行文字を使えるようになりました。また、 ``'exec'`` モードで"
"改行文字は必要なくなりました。 *optimize* パラメタを追加しました。"

#: ../../library/functions.rst:270
msgid ""
"Return a complex number with the value *real* + *imag*\\*1j or convert a "
"string or number to a complex number.  If the first parameter is a string, "
"it will be interpreted as a complex number and the function must be called "
"without a second parameter.  The second parameter can never be a string. "
"Each argument may be any numeric type (including complex). If *imag* is "
"omitted, it defaults to zero and the function serves as a numeric conversion "
"function like :func:`int`, :func:`long` and :func:`float`.  If both "
"arguments are omitted, returns ``0j``."
msgstr ""
"値 *real* + *imag*\\*1j の複素数を生成するか、文字列や数を複素数に変換しま"
"す。第一引数が文字列なら、それが複素数と解釈され、この関数は第二引数無しで呼"
"び出されなければなりません。第二引数は文字列であってはなりません。それぞれの"
"引数は (複素数を含む) 任意の数値型です。 *imag* が省略された場合、標準の値は"
"ゼロで、この関数は :func:`int`, :func:`long` や :func:`float` のような数値変"
"換関数としてはたらきます。両方の引数が省略された場合、 ``0j`` を返します。"

#: ../../library/functions.rst:280
msgid ""
"When converting from a string, the string must not contain whitespace around "
"the central ``+`` or ``-`` operator.  For example, ``complex('1+2j')`` is "
"fine, but ``complex('1 + 2j')`` raises :exc:`ValueError`."
msgstr ""
"文字列から変換するとき、その文字列は中央の ``+`` や ``-`` 演算子の周りに空白"
"を含んではなりません。例えば、``complex('1+2j')`` はいいですが、``complex('1 "
"+ 2j')`` は :exc:`ValueError` を送出します。"

#: ../../library/functions.rst:285
msgid "The complex type is described in :ref:`typesnumeric`."
msgstr "複素数型については :ref:`typesnumeric` に説明があります。"

#: ../../library/functions.rst:290
msgid ""
"This is a relative of :func:`setattr`.  The arguments are an object and a "
"string.  The string must be the name of one of the object's attributes.  The "
"function deletes the named attribute, provided the object allows it.  For "
"example, ``delattr(x, 'foobar')`` is equivalent to ``del x.foobar``."
msgstr ""
":func:`setattr` の親戚です。引数はオブジェクトと文字列です。文字列はオブジェ"
"クトの属性のうち一つの名前でなければなりません。この関数は、オブジェクトが許"
"すなら、指名された属性を削除します。例えば、 ``delattr(x, 'foobar')`` は "
"``del x.foobar`` と等価です。"

#: ../../library/functions.rst:302
msgid ""
"Create a new dictionary.  The :class:`dict` object is the dictionary class. "
"See :class:`dict` and :ref:`typesmapping` for documentation about this class."
msgstr ""
"新しい辞書を作成します。 :class:`dict` オブジェクトは辞書クラスです。このクラ"
"スに関するドキュメンテーションは :class:`dict` と :ref:`typesmapping` を参照"
"してください。"

#: ../../library/functions.rst:305
msgid ""
"For other containers see the built-in :class:`list`, :class:`set`, and :"
"class:`tuple` classes, as well as the :mod:`collections` module."
msgstr ""
"他のコンテナについては、 ビルトインの :class:`list`, :class:`set`, :class:"
"`tuple` クラスおよび :mod:`collections` モジュールを参照してください。"

#: ../../library/functions.rst:311
msgid ""
"Without arguments, return the list of names in the current local scope.  "
"With an argument, attempt to return a list of valid attributes for that "
"object."
msgstr ""
"引数がない場合、現在のローカルスコープにある名前のリストを返します。引数があ"
"る場合、そのオブジェクトの有効な属性のリストを返そうと試みます。"

#: ../../library/functions.rst:314
msgid ""
"If the object has a method named :meth:`__dir__`, this method will be called "
"and must return the list of attributes. This allows objects that implement a "
"custom :func:`__getattr__` or :func:`__getattribute__` function to customize "
"the way :func:`dir` reports their attributes."
msgstr ""
"オブジェクトが :meth:`__dir__` という名のメソッドを持つなら、そのメソッドが呼"
"び出され、属性のリストを返さなければなりません。これにより、カスタムの :func:"
"`__getattr__` や :func:`__getattribute__` 関数を実装するオブジェクトは、:"
"func:`dir` が属性を報告するやり方をカスタマイズできます。"

#: ../../library/functions.rst:319
msgid ""
"If the object does not provide :meth:`__dir__`, the function tries its best "
"to gather information from the object's :attr:`~object.__dict__` attribute, "
"if defined, and from its type object.  The resulting list is not necessarily "
"complete, and may be inaccurate when the object has a custom :func:"
"`__getattr__`."
msgstr ""
"オブジェクトが :meth:`__dir__` を提供していない場合、定義されていればオブジェ"
"クトの :attr:`~object.__dict__` 属性から、そして型オブジェクトから、情報を収"
"集しようと試みます。結果のリストは完全であるとは限らず、また、カスタムの :"
"func:`__getattr__` を持つ場合、不正確になるかもしれません。"

#: ../../library/functions.rst:324
msgid ""
"The default :func:`dir` mechanism behaves differently with different types "
"of objects, as it attempts to produce the most relevant, rather than "
"complete, information:"
msgstr ""
"デフォルトの :func:`dir` メカニズムは、完全というより最重要な情報を作成しよう"
"とするため、異なる型のオブジェクトでは異なって振る舞います:"

#: ../../library/functions.rst:328
msgid ""
"If the object is a module object, the list contains the names of the "
"module's attributes."
msgstr ""
"オブジェクトがモジュールオブジェクトの場合、リストにはモジュールの属性の名前"
"が含まれます。"

#: ../../library/functions.rst:331
msgid ""
"If the object is a type or class object, the list contains the names of its "
"attributes, and recursively of the attributes of its bases."
msgstr ""
"オブジェクトが型オブジェクトやクラスオブジェクトの場合、リストにはその属性"
"と、再帰的にたどったその基底クラスの属性が含まれます。"

#: ../../library/functions.rst:334
msgid ""
"Otherwise, the list contains the object's attributes' names, the names of "
"its class's attributes, and recursively of the attributes of its class's "
"base classes."
msgstr ""
"それ以外の場合には、リストにはオブジェクトの属性名、クラス属性名、再帰的にた"
"どった基底クラスの属性名が含まれます。"

#: ../../library/functions.rst:338
msgid "The resulting list is sorted alphabetically.  For example:"
msgstr "返されるリストはアルファベット順に並べられています。例えば:"

#: ../../library/functions.rst:356
msgid ""
"Because :func:`dir` is supplied primarily as a convenience for use at an "
"interactive prompt, it tries to supply an interesting set of names more than "
"it tries to supply a rigorously or consistently defined set of names, and "
"its detailed behavior may change across releases.  For example, metaclass "
"attributes are not in the result list when the argument is a class."
msgstr ""
":func:`dir` は主に対話プロンプトでの使用に便利なように提供されているので、厳"
"密性や一貫性を重視して定義された名前のセットというよりも、むしろ興味を引くよ"
"うな名前のセットを返そうとします。また、この関数の細かい動作はリリース間で変"
"わる可能性があります。例えば、引数がクラスであるとき、メタクラス属性は結果の"
"リストに含まれません。"

#: ../../library/functions.rst:365
msgid ""
"Take two (non complex) numbers as arguments and return a pair of numbers "
"consisting of their quotient and remainder when using long division.  With "
"mixed operand types, the rules for binary arithmetic operators apply.  For "
"plain and long integers, the result is the same as ``(a // b, a % b)``. For "
"floating point numbers the result is ``(q, a % b)``, where *q* is usually "
"``math.floor(a / b)`` but may be 1 less than that.  In any case ``q * b + a "
"% b`` is very close to *a*, if ``a % b`` is non-zero it has the same sign as "
"*b*, and ``0 <= abs(a % b) < abs(b)``."
msgstr ""
"2 つの (複素数でない) 数値を引数として取り、整数の除法を行ったときの商と剰余"
"からなるペアを返します。被演算子が型混合である場合、 2 進算術演算子での規則が"
"適用されます。通常の整数と長整数の場合、結果は  ``(a // b, a % b)`` と同じで"
"す。浮動小数点数の場合、結果は ``(q, a % b)`` であり、 *q* は通常 ``math."
"floor(a / b)`` ですが、そうではなく 1 になることもあります。いずれにせよ、 "
"``q * b + a % b`` は *a* に非常に近い値になり、 ``a % b`` がゼロでない値の場"
"合、その符号は *b* と同じで、 ``0 <= abs(a % b) < abs(b)`` になります。"

#: ../../library/functions.rst:374
msgid "Using :func:`divmod` with complex numbers is deprecated."
msgstr "複素数に対する :func:`divmod` の使用は廃用されました。"

#: ../../library/functions.rst:380
msgid ""
"Return an enumerate object. *sequence* must be a sequence, an :term:"
"`iterator`, or some other object which supports iteration.  The :meth:`!"
"next` method of the iterator returned by :func:`enumerate` returns a tuple "
"containing a count (from *start* which defaults to 0) and the values "
"obtained from iterating over *sequence*::"
msgstr ""
"列挙オブジェクトを返します。 *sequence* はシーケンス型、イテレータ型、反復を"
"サポートする他のオブジェクト型のいずれかでなければなりま せん。 :func:"
"`enumerate` が返すイテレータの :meth:`!next` メソッドは、 (ゼロから始まる) カ"
"ウント値と、値だけ *sequence* を反復操作して得ら れる、対応するオブジェクトを"
"含むタプルを返します。 :func:`enumerate` はインデクス付けされた値の列: ``(0, "
"seq[0])``, ``(1, seq[1])``, ``(2, seq[2])``, ... を得るのに便利です。 例 ::"

#: ../../library/functions.rst:392
msgid "Equivalent to::"
msgstr "次と等価です::"

#: ../../library/functions.rst:401
msgid "The *start* parameter was added."
msgstr "*start* 引数が追加されました。"

#: ../../library/functions.rst:407
msgid ""
"The arguments are a Unicode or *Latin-1* encoded string and optional globals "
"and locals.  If provided, *globals* must be a dictionary. If provided, "
"*locals* can be any mapping object."
msgstr ""
"引数には、Unicode 文字列または *Latin-1*  エンコードのバイト文字列と、オプ"
"ションの引数 *globals* 、 *locals* をとります。 *globals* を与える場合は辞書"
"でなくてはなりません。 *locals* を与える場合は任意のマッピングオブジェクトに"
"できます。"

#: ../../library/functions.rst:411 ../../library/functions.rst:459
msgid "formerly *locals* was required to be a dictionary."
msgstr "以前は *locals* も辞書でなければなりませんでした."

#: ../../library/functions.rst:414
msgid ""
"The *expression* argument is parsed and evaluated as a Python expression "
"(technically speaking, a condition list) using the *globals* and *locals* "
"dictionaries as global and local namespace.  If the *globals* dictionary is "
"present and lacks '__builtins__', the current globals are copied into "
"*globals* before *expression* is parsed.  This means that *expression* "
"normally has full access to the standard :mod:`__builtin__` module and "
"restricted environments are propagated.  If the *locals* dictionary is "
"omitted it defaults to the *globals* dictionary.  If both dictionaries are "
"omitted, the expression is executed in the environment where :func:`eval` is "
"called.  The return value is the result of the evaluated expression. Syntax "
"errors are reported as exceptions.  Example:"
msgstr ""
"引数 *expression* は Python の表現式 (技術的にいうと、条件のリストです) とし"
"て構文解釈され、評価されます。このとき辞書 *globals* およ び *locals* はそれ"
"ぞれグローバルおよびローカルな名前空間として使われます。 *global* 辞書が存在"
"するが、 '__builtins__' が欠けている場 合、 *expression* を解析する前に現在の"
"グローバル変数を *globals* にコピーします。このことから、 *expression* は通"
"常、標準の :mod:`__builtin__` モジュールへの完全なアクセスを有し、制限された"
"環境が伝播するようになっています。 *locals* 辞書が省略された場合、標 準の値と"
"して *globals* に設定されます。辞書が両方とも省略された場合、 表現式は :func:"
"`eval` が呼び出されている環境の下で実行されます。 構文エラーは例外として報告"
"されます。以下に例を示します :"

#: ../../library/functions.rst:429
msgid ""
"This function can also be used to execute arbitrary code objects (such as "
"those created by :func:`compile`).  In this case pass a code object instead "
"of a string.  If the code object has been compiled with ``'exec'`` as the "
"*mode* argument, :func:`eval`\\'s return value will be ``None``."
msgstr ""
"この関数は (:func:`compile` で生成されるような) 任意のコードオブジェクトを実"
"行するのにも利用できます。この場合、文字列の代わりにコードオブジェクトを渡し"
"ます。このコードオブジェクトが、引数 *mode* を ``'exec'`` としてコンパイルさ"
"れている場合、 :func:`eval` が返す値は ``None`` になります。"

#: ../../library/functions.rst:434
msgid ""
"Hints: dynamic execution of statements is supported by the :keyword:`exec` "
"statement.  Execution of statements from a file is supported by the :func:"
"`execfile` function.  The :func:`globals` and :func:`locals` functions "
"returns the current global and local dictionary, respectively, which may be "
"useful to pass around for use by :func:`eval` or :func:`execfile`."
msgstr ""
"ヒント: 文の動的な実行は :keyword:`exec` 文でサポートされています。 ファイル"
"からの文の実行は関数 :func:`execfile` でサポートされています。関数 :func:"
"`globals` および :func:`locals` は、それぞれ現在のグローバルおよびローカルな"
"辞書を返すので、 :func:`eval` や :func:`execfile` で使うことができます。"

#: ../../library/functions.rst:440
msgid ""
"See :func:`ast.literal_eval` for a function that can safely evaluate strings "
"with expressions containing only literals."
msgstr ""
"リテラルだけを含む式の文字列を安全に評価できる関数、 :func:`ast."
"literal_eval` も参照してください。"

#: ../../library/functions.rst:446
msgid ""
"This function is similar to the :keyword:`exec` statement, but parses a file "
"instead of a string.  It is different from the :keyword:`import` statement "
"in that it does not use the module administration --- it reads the file "
"unconditionally and does not create a new module. [#]_"
msgstr ""
"この関数は :keyword:`exec` 文に似ていますが、文字列の代わりにファイルに対して"
"構文解釈を行います。 :keyword:`import` 文と違って、モジュー ル管理機構を使い"
"ません --- この関数はファイルを無条件に読み込み、新 たなモジュールを生成しま"
"せん。 [#]_"

#: ../../library/functions.rst:451
msgid ""
"The arguments are a file name and two optional dictionaries.  The file is "
"parsed and evaluated as a sequence of Python statements (similarly to a "
"module) using the *globals* and *locals* dictionaries as global and local "
"namespace. If provided, *locals* can be any mapping object.  Remember that "
"at module level, globals and locals are the same dictionary. If two separate "
"objects are passed as *globals* and *locals*, the code will be executed as "
"if it were embedded in a class definition."
msgstr ""
"引数は、ファイル名と、2 つのオプショナルな辞書です。ファイルはパースされて、"
"(モジュールに対してそうするのと同じように) Python ステートメントのシーケンス"
"として評価されます。この際 *globals* と *locals* がそれぞれグローバル名前空"
"間、ローカル名前空間として使われます。 *locals* を指定する場合は何らかのマッ"
"プ型オブジェクトでなければなりません。モジュールレベルではグローバルとローカ"
"ルは同じ辞書であることを忘れないで下さい。 *globals* と *locals* として別々に"
"オブジェクトを渡す場合、コードはクラス定義に埋め込まれたかのように実行されま"
"す。"

#: ../../library/functions.rst:462
msgid ""
"If the *locals* dictionary is omitted it defaults to the *globals* "
"dictionary. If both dictionaries are omitted, the expression is executed in "
"the environment where :func:`execfile` is called.  The return value is "
"``None``."
msgstr ""
"*locals* 辞書が省略された場合、標準の値として *globals* に設定されます。辞書"
"が両方とも省略された場合、表現式は :func:`execfiles` が呼び出されている環境の"
"下で実行されます。戻り値は ``None`` です。"

#: ../../library/functions.rst:468
msgid ""
"The default *locals* act as described for function :func:`locals` below: "
"modifications to the default *locals* dictionary should not be attempted.  "
"Pass an explicit *locals* dictionary if you need to see effects of the code "
"on *locals* after function :func:`execfile` returns.  :func:`execfile` "
"cannot be used reliably to modify a function's locals."
msgstr ""
"標準では *locals* は後に述べる関数 :func:`locals` のように動作します: 標準の "
"*locals* 辞書に対する変更を試みてはいけません。 :func:`execfile` の呼び出しが"
"返る時にコードが *locals* に与える影響を知りたいなら、明示的に *loacals* 辞書"
"を渡してください。 :func:`execfile` は関数のローカルを変更するための信頼性の"
"ある方法として使うことはできません。"

#: ../../library/functions.rst:477
msgid ""
"Constructor function for the :class:`file` type, described further in "
"section :ref:`bltin-file-objects`.  The constructor's arguments are the same "
"as those of the :func:`open` built-in function described below."
msgstr ""
":class:`file` 型のコンストラクタです。詳しくは :ref:`bltin-file-objects` 節を"
"参照してください。コンストラクタの引数 は後述の :func:`open` 組み込み関数と同"
"じです。"

#: ../../library/functions.rst:481
msgid ""
"When opening a file, it's preferable to use :func:`open` instead of  "
"invoking this constructor directly.  :class:`file` is more suited to type "
"testing (for example, writing ``isinstance(f, file)``)."
msgstr ""
"ファイルを開くときは、このコンストラクタを直接呼ばずに :func:`open` を呼び出"
"すのが望ましい方法です。 :class:`file` は型テストにより適し ています (たとえ"
"ば ``isinstance(f, file)`` と書くような)。"

#: ../../library/functions.rst:490
msgid ""
"Construct a list from those elements of *iterable* for which *function* "
"returns true.  *iterable* may be either a sequence, a container which "
"supports iteration, or an iterator.  If *iterable* is a string or a tuple, "
"the result also has that type; otherwise it is always a list.  If *function* "
"is ``None``, the identity function is assumed, that is, all elements of "
"*iterable* that are false are removed."
msgstr ""
"*iterable* のうち、 *function* が真を返すような要素からなるリストを構築しま"
"す。 *iterable* はシーケンスか、反復をサポートするコンテナか、イテレータで"
"す。 *iterable* が文字列型かタプル型の場合、結果も同じ型になります。そうでな"
"い場合はリストとなります。 *function* が ``None`` の場合、恒等関数を仮定しま"
"す。すなわち、 *iterable* の偽となる要素は除去されます。"

#: ../../library/functions.rst:497
msgid ""
"Note that ``filter(function, iterable)`` is equivalent to ``[item for item "
"in iterable if function(item)]`` if function is not ``None`` and ``[item for "
"item in iterable if item]`` if function is ``None``."
msgstr ""
"function が ``None`` ではない場合、 ``filter(function, iterable)`` は "
"``[item for item in iterable if function(item)]`` と同等です。 function が "
"``None`` の場合 ``[item for item in iterable if item]`` と同等です。"

#: ../../library/functions.rst:501
msgid ""
"See :func:`itertools.ifilter` and :func:`itertools.ifilterfalse` for "
"iterator versions of this function, including a variation that filters for "
"elements where the *function* returns false."
msgstr ""
"この関数のイテレータ版である :func:`itertools.ifilter` と :func:`itertools."
"ifilterfalse` についても参照して下さい、 変種として *function* が false を返"
"す場合に要素を返す変種も含んでいます。"

#: ../../library/functions.rst:508
msgid "Return a floating point number constructed from a number or string *x*."
msgstr "数または文字列 *x* から生成された浮動小数点数を返します。"

#: ../../library/functions.rst:510
msgid ""
"If the argument is a string, it must contain a possibly signed decimal or "
"floating point number, possibly embedded in whitespace. The argument may "
"also be [+|-]nan or [+|-]inf. Otherwise, the argument may be a plain or long "
"integer or a floating point number, and a floating point number with the "
"same value (within Python's floating point precision) is returned.  If no "
"argument is given, returns ``0.0``."
msgstr ""
"引数が文字列の場合、十進の数または浮動小数点数を含んでいなければなりません。"
"符号が付いていてもかまいません。また、空白文字中に埋め込まれていてもかまいま"
"せん。引数は [+|-]nan 、 [+|-]inf であっても構いません。それ以外の場合、引数"
"は通常整数、長整数、または浮動小数点数をとることができ、同じ値の浮動小数点数"
"が (Python の浮動小数点精度で) 返されます。引数が指定されなかった場合、 0.0 "
"を返します。"

#: ../../library/functions.rst:524
msgid ""
"When passing in a string, values for NaN and Infinity may be returned, "
"depending on the underlying C library.  Float accepts the strings nan, inf "
"and -inf for NaN and positive or negative infinity. The case and a leading + "
"are ignored as well as a leading - is ignored for NaN. Float always "
"represents NaN and infinity as nan, inf or -inf."
msgstr ""
"文字列で値を渡す際、背後の C ライブラリによって NaN および Infinity が返され"
"るかもしれません。 float は文字列、 nan 、 inf 、および -inf を、それぞれ、 "
"NaN 、正の無限大、負の無限大として 解釈します。大文字小文字の違い、 + 記号、"
"および、 nan に対する - 記号は無視されます。"

#: ../../library/functions.rst:530
msgid "The float type is described in :ref:`typesnumeric`."
msgstr "浮動小数点数型については、 :ref:`typesnumeric` も参照下さい。"

#: ../../library/functions.rst:539
msgid ""
"Convert a *value* to a \"formatted\" representation, as controlled by "
"*format_spec*.  The interpretation of *format_spec* will depend on the type "
"of the *value* argument, however there is a standard formatting syntax that "
"is used by most built-in types: :ref:`formatspec`."
msgstr ""
"*value* を *format_spec* で制御される \"フォーマット化\" 表現に変換します。 "
"*format_spec* の解釈は *value* 引数の型に依存しますが、ほとんどの組み込み型で"
"使われる標準的な構文が存在します: :ref:`formatspec` 。"

#: ../../library/functions.rst:546
msgid ""
"``format(value, format_spec)`` merely calls ``value."
"__format__(format_spec)``."
msgstr ""
"``format(value, format_spec)`` は単に ``value.__format__(format_spec)`` を呼"
"び出すだけです。"

#: ../../library/functions.rst:556
msgid ""
"Return a new :class:`frozenset` object, optionally with elements taken from "
"*iterable*.  ``frozenset`` is a built-in class.  See :class:`frozenset` and :"
"ref:`types-set` for documentation about this class."
msgstr ""
"新しい :class:`frozenset` オブジェクトを返します。オプションで *iterable* か"
"ら得られた要素を含みます。 ``frozenset`` はビルトインクラスです。このクラスに"
"関するドキュメントは :class:`frozenset` と :ref:`types-set` を参照してくださ"
"い。"

#: ../../library/functions.rst:560
msgid ""
"For other containers see the built-in :class:`set`, :class:`list`, :class:"
"`tuple`, and :class:`dict` classes, as well as the :mod:`collections` module."
msgstr ""
"他のコンテナについては、ビルトインクラス :class:`set`, :class:`list`, :class:"
"`tuple`, :class:`dict` や :mod:`collections` モジュールを見てください。"

#: ../../library/functions.rst:569
msgid ""
"Return the value of the named attribute of *object*.  *name* must be a "
"string. If the string is the name of one of the object's attributes, the "
"result is the value of that attribute.  For example, ``getattr(x, "
"'foobar')`` is equivalent to ``x.foobar``.  If the named attribute does not "
"exist, *default* is returned if provided, otherwise :exc:`AttributeError` is "
"raised."
msgstr ""
"*object* の指名された属性の値を返します。 *name* は文字列でなくてはなりませ"
"ん。文字列がオブジェクトの属性の一つの名前であった場合、戻り値はその属性の値"
"になります。例えば、 ``getattr(x, 'foobar')`` は ``x.foobar`` と等価です。指"
"名された属性が存在しない場合、 *default* が与えられていればそれが返され、そう"
"でない場合には :exc:`AttributeError` が送出されます。"

#: ../../library/functions.rst:578
msgid ""
"Return a dictionary representing the current global symbol table. This is "
"always the dictionary of the current module (inside a function or method, "
"this is the module where it is defined, not the module from which it is "
"called)."
msgstr ""
"現在のグローバルシンボルテーブルを表す辞書を返します。これは常に現在のモ"
"ジュール (関数やメソッドの中では、それを呼び出したモジュールではなく、それを"
"定義しているモジュール) の辞書です。"

#: ../../library/functions.rst:585
msgid ""
"The arguments are an object and a string.  The result is ``True`` if the "
"string is the name of one of the object's attributes, ``False`` if not. "
"(This is implemented by calling ``getattr(object, name)`` and seeing whether "
"it raises an exception or not.)"
msgstr ""
"引数はオブジェクトと文字列です。文字列がオブジェクトの属性名の一つ であった場"
"合 ``True`` を、そうでない場合 ``False`` を返します (この 関数は "
"``getattr(object, name)`` を呼び出し、例外を送出するかどうか を調べることで実"
"装されています)。"

#: ../../library/functions.rst:593
msgid ""
"Return the hash value of the object (if it has one).  Hash values are "
"integers. They are used to quickly compare dictionary keys during a "
"dictionary lookup. Numeric values that compare equal have the same hash "
"value (even if they are of different types, as is the case for 1 and 1.0)."
msgstr ""
"オブジェクトのハッシュ値を (存在すれれば) 返します。ハッシュ値は整数です。こ"
"れらは辞書を検索する際に辞書のキーを高速に比較するために 使われます。等しい値"
"となる数値は等しいハッシュ値を持ちます (1 と 1.0 のように型が異なっていてもで"
"す)。"

#: ../../library/functions.rst:601
msgid ""
"Invoke the built-in help system.  (This function is intended for interactive "
"use.)  If no argument is given, the interactive help system starts on the "
"interpreter console.  If the argument is a string, then the string is looked "
"up as the name of a module, function, class, method, keyword, or "
"documentation topic, and a help page is printed on the console.  If the "
"argument is any other kind of object, a help page on the object is generated."
msgstr ""
"組み込みヘルプシステムを起動します。(この関数は対話的な使用のためのもので"
"す)。引数が与えられていない場合、対話的ヘルプシステムはインタプリタコンソール"
"上で起動します。引数が文字列の場合、文字列はモジュール、関数、クラス、メソッ"
"ド、キーワード、またはドキュメントの項目名として検索され、ヘルプページがコン"
"ソール上に印字されます。引数がその他のオブジェクトの場合、そのオブジェクトに"
"関するヘルプページが生成されます。"

#: ../../library/functions.rst:608
msgid ""
"This function is added to the built-in namespace by the :mod:`site` module."
msgstr ""
"この関数は、 :mod:`site` モジュールから、組み込みの名前空間に移されました。"

#: ../../library/functions.rst:615
msgid ""
"Convert an integer number (of any size) to a lowercase hexadecimal string "
"prefixed with \"0x\", for example:"
msgstr ""
"(任意のサイズの) 整数を、先頭に \"0x\" が付いた小文字の16進数文字列に変換しま"
"す。例えば:"

#: ../../library/functions.rst:625
msgid ""
"If x is not a Python :class:`int` or :class:`long` object, it has to define "
"a __hex__() method that returns a string."
msgstr ""
"x が Python の :class:`int` オブジェクトでも :class:`long` オブジェクトでもな"
"い場合、文字列を返す :meth:`__hex__()` メソッドを定義していなければなりませ"
"ん。"

#: ../../library/functions.rst:628
msgid ""
"See also :func:`int` for converting a hexadecimal string to an integer using "
"a base of 16."
msgstr ""
"16を底として16進数文字列を整数に変換するには :func:`int` も参照してください。"

#: ../../library/functions.rst:633
msgid ""
"To obtain a hexadecimal string representation for a float, use the :meth:"
"`float.hex` method."
msgstr ""
"浮動小数点数の16進文字列表記を得たい場合には、 :meth:`float.hex` メソッドを"
"使って下さい。"

#: ../../library/functions.rst:636 ../../library/functions.rst:877
msgid "Formerly only returned an unsigned literal."
msgstr "以前は符号なしのリテラルしか返しませんでした."

#: ../../library/functions.rst:642
msgid ""
"Return the \"identity\" of an object.  This is an integer (or long integer) "
"which is guaranteed to be unique and constant for this object during its "
"lifetime. Two objects with non-overlapping lifetimes may have the same :func:"
"`id` value."
msgstr ""
"オブジェクトの \"識別値\" を返します。この値は整数 (または長整数) で、 このオ"
"ブジェクトの有効期間は一意かつ定数であることが保証されていま す。 オブジェク"
"トの有効期間が重ならない 2 つのオブジェクトは同じ :func:`id` 値を持つかもしれ"
"ません。"

#: ../../library/functions.rst:652
msgid "Equivalent to ``eval(raw_input(prompt))``."
msgstr "``eval(raw_input(prompt))`` と同じです。"

#: ../../library/functions.rst:654
msgid ""
"This function does not catch user errors. If the input is not syntactically "
"valid, a :exc:`SyntaxError` will be raised. Other exceptions may be raised "
"if there is an error during evaluation."
msgstr ""
"この関数はユーザエラーを捕捉しません。入力が構文的に正しくない場合、 :exc:"
"`SyntaxError` が送出されます。式を評価する際にエラーが生じた場合、他の例外も"
"送出されるかもしれません。"

#: ../../library/functions.rst:658
msgid ""
"If the :mod:`readline` module was loaded, then :func:`input` will use it to "
"provide elaborate line editing and history features."
msgstr ""
":mod:`readline` モジュールが読み込まれていれば、 :func:`input` はそれを使って"
"精緻な行編集やヒストリ機能を提供します。"

#: ../../library/functions.rst:661
msgid ""
"Consider using the :func:`raw_input` function for general input from users."
msgstr ""
"一般的なユーザからの入力のための関数としては :func:`raw_input` を使うことを検"
"討してください。"

#: ../../library/functions.rst:667
msgid ""
"Return an integer object constructed from a number or string *x*, or return "
"``0`` if no arguments are given.  If *x* is a number, it can be a plain "
"integer, a long integer, or a floating point number.  If *x* is floating "
"point, the conversion truncates towards zero.  If the argument is outside "
"the integer range, the function returns a long object instead."
msgstr ""
"数値または文字列 *x* から生成された整数を返します。引数が与えられない場合に"
"は ``0`` を返します。  *x* が数値である場合は、通常整数、長整数、または浮動小"
"数点数を返します。浮動小数点数については、これは 0 に向かう方向へ切り詰めま"
"す。引数が整数で通常整数の範囲外であれば、長整数を代わりに返します。"

#: ../../library/functions.rst:673
msgid ""
"If *x* is not a number or if *base* is given, then *x* must be a string or "
"Unicode object representing an :ref:`integer literal <integers>` in radix "
"*base*.  Optionally, the literal can be preceded by ``+`` or ``-`` (with no "
"space in between) and surrounded by whitespace.  A base-n literal consists "
"of the digits 0 to n-1, with ``a`` to ``z`` (or ``A`` to ``Z``) having "
"values 10 to 35.  The default *base* is 10. The allowed values are 0 and "
"2--36. Base-2, -8, and -16 literals can be optionally prefixed with ``0b``/"
"``0B``, ``0o``/``0O``/``0``, or ``0x``/``0X``, as with integer literals in "
"code. Base 0 means to interpret the string exactly as an integer literal, so "
"that the actual base is 2, 8, 10, or 16."
msgstr ""
"*x* が数値でない場合、あるいは *base* が与えられた場合、 *x* は基数 *base* "
"の :ref:`integer literal <integers>` で表された、バイト文字列または Unicode "
"文字列、 のインスタンスでなければなりません。オプションで、リテラルの前に "
"``+`` あるいは ``-`` を (中間のスペースなしで) 付けることができます。また、リ"
"テラルは余白で囲むことができます。基数 n のリテラルの各桁は 0 から n-1 の数"
"を、値 10-35 を持つ ``a`` から ``z`` (または ``A`` から ``Z``) を含んで表現し"
"ます。デフォルトの *base* は 10 です。許される値は 0 と 2-36 です。基数 2, "
"8, 16 のリテラルは、オプションでコード中の整数リテラルのように  ``0b``/"
"``0B``, ``0o``/``0O``/``0``, ``0x``/``0X`` を前に付けることができます。基数 "
"0 を渡すと、文字列を、実際の基数 2, 8, 10, 16 のどれかで整数リテラルとして正"
"確に解釈します。"

#: ../../library/functions.rst:685
msgid "The integer type is described in :ref:`typesnumeric`."
msgstr "整数型については、 :ref:`typesnumeric` も参照下さい。"

#: ../../library/functions.rst:690
msgid ""
"Return true if the *object* argument is an instance of the *classinfo* "
"argument, or of a (direct, indirect or :term:`virtual <abstract base "
"class>`) subclass thereof.  Also return true if *classinfo* is a type object "
"(new-style class) and *object* is an object of that type or of a (direct, "
"indirect or :term:`virtual <abstract base class>`) subclass thereof.  If "
"*object* is not a class instance or an object of the given type, the "
"function always returns false. If *classinfo* is a tuple of class or type "
"objects (or recursively, other such tuples), return true if *object* is an "
"instance of any of the classes or types.  If *classinfo* is not a class, "
"type, or tuple of classes, types, and such tuples, a :exc:`TypeError` "
"exception is raised."
msgstr ""
"引数 *object* が引数 *classinfo* のインスタンスであるか、 (直接または間接的"
"な、もしくは :term:`virtual <abstract base class>` の) サブクラスのインスタン"
"スの場合に真を返します。また、 *classinfo* が型オブジェクト (新スタイルクラ"
"ス) であり、 *object* がその型のオブジェクトであるか、または、 (直接または間"
"接的な、もしくは :term:`virtual <abstract base class>` の) サブクラスの場合に"
"も真を返します。 *object* がクラスインスタンスや与えられた型のオブジェクトで"
"ない場合、この関数は常に偽を返します。*classinfo* がクラスや型オブジェクトの"
"タプル (あるいはそういったタプルを再帰的に含むタプル) の場合、 *object* がそ"
"れらクラスや型のいずれかのインスタンスであれば真を返します。 *classinfo* がク"
"ラス、型、クラスや型からなるタプル、そういったタプルが再帰構造をとっているタ"
"プルのいずれでもない場合、例外 :exc:`TypeError` が送出されます。"

#: ../../library/functions.rst:702 ../../library/functions.rst:714
msgid "Support for a tuple of type information was added."
msgstr "型情報からなるタプルへのサポートが追加されました。"

#: ../../library/functions.rst:708
msgid ""
"Return true if *class* is a subclass (direct, indirect or :term:`virtual "
"<abstract base class>`) of *classinfo*.  A class is considered a subclass of "
"itself. *classinfo* may be a tuple of class objects, in which case every "
"entry in *classinfo* will be checked. In any other case, a :exc:`TypeError` "
"exception is raised."
msgstr ""
"*class* が *classinfo* の (直接または間接的な、あるいは :term:`virtual "
"<abstract base class>`) サブクラスである場合に真を返します。クラスはそれ自身"
"のサブクラスとみなされます。 *classinfo* はクラスオブジェクトからなるタプルで"
"もよく、この場合には *classinfo* のすべてのエントリが調べられます。その他の場"
"合では、例外 :exc:`TypeError` が送出されます。"

#: ../../library/functions.rst:720
msgid ""
"Return an :term:`iterator` object.  The first argument is interpreted very "
"differently depending on the presence of the second argument. Without a "
"second argument, *o* must be a collection object which supports the "
"iteration protocol (the :meth:`__iter__` method), or it must support the "
"sequence protocol (the :meth:`__getitem__` method with integer arguments "
"starting at ``0``).  If it does not support either of those protocols, :exc:"
"`TypeError` is raised. If the second argument, *sentinel*, is given, then "
"*o* must be a callable object.  The iterator created in this case will call "
"*o* with no arguments for each call to its :meth:`~iterator.next` method; if "
"the value returned is equal to *sentinel*, :exc:`StopIteration` will be "
"raised, otherwise the value will be returned."
msgstr ""
":term:`iterator` (イテレータ)オブジェクトを返します。 2 つ目の引数があるかど"
"うかで、最初の引数の解釈は非常に異なります。 2 つ目の引数 がない場合、 *o* は"
"反復プロトコル (:meth:`__iter__` メソッド) か、シーケンス型プロトコル (引数"
"が ``0`` から開始する :meth:`__getitem__` メソッド) をサポートする集合オブ"
"ジェクトでなければなりません。これらのプロトコルが両方ともサポートされていな"
"い場 合、 :exc:`TypeError` が送出されます。 2 つ目の引数 *sentinel* が与えら"
"れていれば、 *o* は呼び出し可能なオ ブジェクトでなければなりません。この場合"
"に生成されるイテレータは、 :meth:`~iterator.next` を呼ぶ毎に *o* を引数無しで"
"呼び出します。返された値が *sentinel* と等しければ、 :exc:`StopIteration` が"
"送出されます。そう でない場合、戻り値がそのまま返されます。"

#: ../../library/functions.rst:731
msgid ""
"One useful application of the second form of :func:`iter` is to read lines "
"of a file until a certain line is reached.  The following example reads a "
"file until the :meth:`~io.TextIOBase.readline` method returns an empty "
"string::"
msgstr ""
":func:`iter` の2つめの形式の便利な使用法の一つは、ファイルの行を特定の行まで"
"読み進めることです。以下の例では :meth:`~io.TextIOBase.readline` が空文字列を"
"返すまでファイルを読み進めます::"

#: ../../library/functions.rst:744
msgid ""
"Return the length (the number of items) of an object.  The argument may be a "
"sequence (such as a string, bytes, tuple, list, or range) or a collection "
"(such as a dictionary, set, or frozen set)."
msgstr ""
"オブジェクトの長さ (要素の数) を返します。引数はシーケンス (文字列、バイト"
"列、タプル、リスト、range 等) かコレクション (辞書、集合、凍結集合等) です。"

#: ../../library/functions.rst:753
msgid ""
"Return a list whose items are the same and in the same order as *iterable*'s "
"items.  *iterable* may be either a sequence, a container that supports "
"iteration, or an iterator object.  If *iterable* is already a list, a copy "
"is made and returned, similar to ``iterable[:]``.  For instance, "
"``list('abc')`` returns ``['a', 'b', 'c']`` and ``list( (1, 2, 3) )`` "
"returns ``[1, 2, 3]``.  If no argument is given, returns a new empty list, "
"``[]``."
msgstr ""
"*iterable* の要素と同じ要素をもち、かつ順番も同じなリストを返します。 "
"*iterable* はシーケンス、反復処理をサポートするコンテナ、あるいはイテレータオ"
"ブジェクトです。 *sequence* がすでにリストの場合、 ``iterable[:]`` と同様にコ"
"ピーを作成して返します。 例えば、 ``list('abc')`` は ``['a', 'b', 'c']`` およ"
"び ``list((1, 2, 3))`` は ``[1, 2, 3]`` を返します。引数が与えられなかった場"
"合、新 しい空のリスト ``[]`` を返します。"

#: ../../library/functions.rst:760
msgid ""
":class:`list` is a mutable sequence type, as documented in :ref:`typesseq`. "
"For other containers see the built in :class:`dict`, :class:`set`, and :"
"class:`tuple` classes, and the :mod:`collections` module."
msgstr ""
":class:`list` は変更可能なシーケンス型であり、 :ref:`typesseq` に記 述があり"
"ます。他のコンテナ型については組み込み型の :class:`dict`, :class:`set`, およ"
"び :class:`tuple` クラスと、 :mod:`collections` モジュールを参照下さい。"

#: ../../library/functions.rst:767
msgid ""
"Update and return a dictionary representing the current local symbol table. "
"Free variables are returned by :func:`locals` when it is called in function "
"blocks, but not in class blocks."
msgstr ""
"現在のローカルシンボルテーブルを表す辞書を更新して返します。関数ブロックで :"
"func:`locals` を呼び出した場合自由変数が返されます、クラスブロックでは返され"
"ません。"

#: ../../library/functions.rst:773
msgid ""
"The contents of this dictionary should not be modified; changes may not "
"affect the values of local and free variables used by the interpreter."
msgstr ""
"この辞書の内容は変更してはいけません; 変更しても、インタプリタが使うローカル"
"変数や自由変数の値には影響しません。"

#: ../../library/functions.rst:780
msgid ""
"Return a long integer object constructed from a string or number *x*. If the "
"argument is a string, it must contain a possibly signed number of arbitrary "
"size, possibly embedded in whitespace. The *base* argument is interpreted in "
"the same way as for :func:`int`, and may only be given when *x* is a string. "
"Otherwise, the argument may be a plain or long integer or a floating point "
"number, and a long integer with the same value is returned.    Conversion of "
"floating point numbers to integers truncates (towards zero).  If no "
"arguments are given, returns ``0L``."
msgstr ""
"文字列または数値 *x* から長整数オブジェクトを構築して返します。引数が文字列の"
"場合は、任意サイズの符号付の数を表していなければなりません。空白で囲まれてい"
"ても構いません。 *base* 引数は :func:`int` のものと同じように解釈され、ま"
"た、 *x* が文字列の時だけ与えることができます。文字列以外の引数では通常整数、"
"長整数、浮動小数点数を与えることが出来、同じ値としての長整数を返します。浮動"
"小数点数から整数への変換では、(ゼロに向かう方向へ) 切り詰められます。引数が与"
"えられなければ ``0L`` を返します。"

#: ../../library/functions.rst:789
msgid "The long type is described in :ref:`typesnumeric`."
msgstr "長整数型については、 :ref:`typesnumeric` も参照下さい。"

#: ../../library/functions.rst:794
msgid ""
"Apply *function* to every item of *iterable* and return a list of the "
"results. If additional *iterable* arguments are passed, *function* must take "
"that many arguments and is applied to the items from all iterables in "
"parallel.  If one iterable is shorter than another it is assumed to be "
"extended with ``None`` items.  If *function* is ``None``, the identity "
"function is assumed; if there are multiple arguments, :func:`map` returns a "
"list consisting of tuples containing the corresponding items from all "
"iterables (a kind of transpose operation).  The *iterable* arguments may be "
"a sequence  or any iterable object; the result is always a list."
msgstr ""
"*function* を *iterable* の全ての要素に適用し、返された値からなるリ ストを返"
"します。追加の *iterable* 引数を与えた場合、 *function* は それらを引数として"
"取らなければならず、関数はそのリストの全ての要素 について個別に適用されます; "
"他のリストより短いリストがある場合、要 素 ``None`` で延長されます。 "
"*function* が ``None`` の場合、恒等関 数であると仮定されます; すなわち、複数"
"のリスト引数が存在する場合、 :func:`map` は全てのリスト引数に対し、対応する要"
"素からなるタプルか らなるリストを返します (転置操作のようなものです)。 "
"*list* 引数はど のようなシーケンス型でもかまいません; 結果は常にリストになり"
"ます。"

#: ../../library/functions.rst:808
msgid ""
"Return the largest item in an iterable or the largest of two or more "
"arguments."
msgstr ""
"iterable の中で最大の要素、または2つ以上の引数の中で最大のものを返します。"

#: ../../library/functions.rst:811
msgid ""
"If one positional argument is provided, *iterable* must be a non-empty "
"iterable (such as a non-empty string, tuple or list).  The largest item in "
"the iterable is returned.  If two or more positional arguments are provided, "
"the largest of the positional arguments is returned."
msgstr ""
"キーワード無しの引数が 1 つだけ与えられた場合、 *iterable* は空でない  (文字"
"列、タプル、リストなどの) iterable でなくてはいけません。iterable の最大の要"
"素が返されます。\n"
"2 つ以上のキーワード無しの引数が与えられた場合、その引数の中で最大のものが返"
"されます。"

#: ../../library/functions.rst:816
msgid ""
"The optional *key* argument specifies a one-argument ordering function like "
"that used for :meth:`list.sort`.  The *key* argument, if supplied, must be "
"in keyword form (for example, ``max(a,b,c,key=func)``)."
msgstr ""
"オプションの *key* 引数には :meth:`list.sort` で使われるのと同じような 1 引数"
"の順序付け関数を指定します。 *key* を指定する場合はキーワード形式でなければな"
"りません (たとえば ``max(a,b,c,key=func)``)。"

#: ../../library/functions.rst:820 ../../library/functions.rst:846
msgid "Added support for the optional *key* argument."
msgstr "オプションの *key* 引数が追加されました."

#: ../../library/functions.rst:827
msgid ""
"Return a \"memory view\" object created from the given argument.  See :ref:"
"`typememoryview` for more information."
msgstr ""
"与えられたオブジェクトから作られた \"メモリビュー\" オブジェクトを返します。"
"詳しくは :ref:`typememoryview` を参照してください。"

#: ../../library/functions.rst:834
msgid ""
"Return the smallest item in an iterable or the smallest of two or more "
"arguments."
msgstr ""
"iterable の中で最小の要素、または2つ以上の引数の中で最小のものを返します。"

#: ../../library/functions.rst:837
msgid ""
"If one positional argument is provided, *iterable* must be a non-empty "
"iterable (such as a non-empty string, tuple or list).  The smallest item in "
"the iterable is returned.  If two or more positional arguments are provided, "
"the smallest of the positional arguments is returned."
msgstr ""
"キーワード無しの引数が1つだけ与えられた場合、 *iterable* は空でない  (文字"
"列、タプル、リストなどの) iterable でなくてはいけません。\n"
"iterable の最小の要素が返されます。\n"
"2 つ以上のキーワード無しの引数が与えられた場合、その引数の中で最小のものが返"
"されます。"

#: ../../library/functions.rst:842
msgid ""
"The optional *key* argument specifies a one-argument ordering function like "
"that used for :meth:`list.sort`.  The *key* argument, if supplied, must be "
"in keyword form (for example, ``min(a,b,c,key=func)``)."
msgstr ""
"オプションの *key* 引数には :meth:`list.sort` で使われるのと同じような 1 引数"
"の順序付け関数を指定します。 *key* を指定する場合はキーワード形式でなければな"
"りません (たとえば ``min(a,b,c,key=func)``)。"

#: ../../library/functions.rst:852
msgid ""
"Retrieve the next item from the *iterator* by calling its :meth:`~iterator."
"next` method.  If *default* is given, it is returned if the iterator is "
"exhausted, otherwise :exc:`StopIteration` is raised."
msgstr ""
"*iterator* から、 :meth:`~iterator.next` メソッドにより、次の要素を取得しま"
"す。 もし、 *default* が与えられると、イテレータが空である場合に、それが返さ"
"れます。それ以外の場合は、 :exc:`StopIteration` が送出されます。"

#: ../../library/functions.rst:861
msgid ""
"Return a new featureless object.  :class:`object` is a base for all new "
"style classes.  It has the methods that are common to all instances of new "
"style classes."
msgstr ""
"ユーザ定義の属性やメソッドを持たない、新しいオブジェクトを返します。 :class:"
"`object()` は新スタイルのクラスの、基底クラスです。これは、新スタイルのクラス"
"のインスタンスに共通のメソッド群を持ちます。"

#: ../../library/functions.rst:867
msgid ""
"This function does not accept any arguments. Formerly, it accepted arguments "
"but ignored them."
msgstr ""
"この関数はいかなる引数も受け付けません。以前は、引数を受理しましたが無視して"
"いました。"

#: ../../library/functions.rst:874
msgid ""
"Convert an integer number (of any size) to an octal string.  The result is a "
"valid Python expression."
msgstr ""
"(任意のサイズの) 整数を 8 進の文字列に変換します。結果は Python の 式としても"
"使える形式になります。"

#: ../../library/functions.rst:883
msgid ""
"Open a file, returning an object of the :class:`file` type described in "
"section :ref:`bltin-file-objects`.  If the file cannot be opened, :exc:"
"`IOError` is raised.  When opening a file, it's preferable to use :func:"
"`open` instead of invoking the :class:`file` constructor directly."
msgstr ""
"ファイルを開いて、  :ref:`bltin-file-objects` にて説明される、 :class:`file` "
"オブジェクトを返します。もし、ファイルが開けないなら、 :exc:`IOError` が送出"
"されます。ファイルを開くときは :class:`file` のコンストラクタを直接呼ばずに :"
"func:`open` を使うのが望ましい方法です。"

#: ../../library/functions.rst:888
msgid ""
"The first two arguments are the same as for ``stdio``'s :c:func:`fopen`: "
"*name* is the file name to be opened, and *mode* is a string indicating how "
"the file is to be opened."
msgstr ""
"最初の 2 つの引数は ``stdio`` の :c:func:`fopen` と同じです: *filename* は開"
"きたいファイルの名前で、 *mode* はファイルをどのようにして開くかを指定しま"
"す。"

#: ../../library/functions.rst:892
msgid ""
"The most commonly-used values of *mode* are ``'r'`` for reading, ``'w'`` for "
"writing (truncating the file if it already exists), and ``'a'`` for "
"appending (which on *some* Unix systems means that *all* writes append to "
"the end of the file regardless of the current seek position).  If *mode* is "
"omitted, it defaults to ``'r'``.  The default is to use text mode, which may "
"convert ``'\\n'`` characters to a platform-specific representation on "
"writing and back on reading.  Thus, when opening a binary file, you should "
"append ``'b'`` to the *mode* value to open the file in binary mode, which "
"will improve portability.  (Appending ``'b'`` is useful even on systems that "
"don't treat binary and text files differently, where it serves as "
"documentation.)  See below for more possible values of *mode*."
msgstr ""
"最もよく使われる *mode* の値は、読み出しの ``'r'`` 、書き込み (ファイルがすで"
"に存在すれば切り詰められます) の ``'w'`` 、追記書き込みの ``'a'`` です ( *い"
"くつかの* Unix システムでは、 *全て* の書き込みが 現在のファイルシーク位置に"
"関係なくファイルの末尾に追加されます)。 *mode* が省略された場合、標準の値は "
"``'r'`` になります。デフォルトではテキストモードでファイルを開きます。 "
"``'\\n'`` 文字は、プラットフォームでの改行の表現に変換されます。移植性を高め"
"るために、バイナ リファイルを開くときには、 *mode* の値に ``'b'`` を追加しな"
"ければなりません。(バイナリファイルとテキストファイルを区別なく扱うようなシス"
"テムでも、ドキュメンテーションの代わりになるので便利です。) 他に *mode* に与"
"えられる可能性のある値については後述します。"

#: ../../library/functions.rst:910
msgid ""
"The optional *buffering* argument specifies the file's desired buffer size: "
"0 means unbuffered, 1 means line buffered, any other positive value means "
"use a buffer of (approximately) that size (in bytes).  A negative "
"*buffering* means to use the system default, which is usually line buffered "
"for tty devices and fully buffered for other files.  If omitted, the system "
"default is used. [#]_"
msgstr ""
"オプションの *buffering* 引数は、ファイルのために必要とするバッファのサイズを"
"指定します: 0 は非バッファリング、1 は行単位バッファリング、その他の正の値は"
"指定した値 (の近似値) の (バイト)サイズをもつバッファを使用することを意味しま"
"す。 *buffering* の値が負の場合、システムの標準を使います。通常、tty 端末は行"
"単位のバッファリングであり、その他のファイルは完全なバッファリングです。省略"
"された場合、システムの標準の値が使われます。 [#]_"

#: ../../library/functions.rst:916
msgid ""
"Modes ``'r+'``, ``'w+'`` and ``'a+'`` open the file for updating (reading "
"and writing); note that ``'w+'`` truncates the file.  Append ``'b'`` to the "
"mode to open the file in binary mode, on systems that differentiate between "
"binary and text files; on systems that don't have this distinction, adding "
"the ``'b'`` has no effect."
msgstr ""
"``'r+'``, ``'w+'``, および ``'a+'`` はファイルを更新のために開きます (開いて"
"読み書きします); ``'w+'`` はファイルがすでに存在すれば切り詰めるので注意して"
"ください。バイナリとテキストファイルを区別するシステムでは、ファイルをバイナ"
"リモードで開くためには ``'b'`` を追加してください; 区別しないシステムでは "
"``'b'`` は無視されます。"

#: ../../library/functions.rst:924
msgid ""
"In addition to the standard :c:func:`fopen` values *mode* may be ``'U'`` or "
"``'rU'``.  Python is usually built with :term:`universal newlines` support; "
"supplying ``'U'`` opens the file as a text file, but lines may be terminated "
"by any of the following: the Unix end-of-line convention ``'\\n'``,  the "
"Macintosh convention ``'\\r'``, or the Windows convention ``'\\r\\n'``. All "
"of these external representations are seen as ``'\\n'`` by the Python "
"program. If Python is built without universal newlines support a *mode* with "
"``'U'`` is the same as normal text mode.  Note that file objects so opened "
"also have an attribute called :attr:`newlines` which has a value of ``None`` "
"(if no newlines have yet been seen), ``'\\n'``, ``'\\r'``, ``'\\r\\n'``, or "
"a tuple containing all the newline types seen."
msgstr ""
"標準の :c:func:`fopen` における *mode* の値に加えて、 ``'U'`` または "
"``'rU'`` を使うことができます。Python が :term:`universal newlines` サポート"
"を行っている (標準ではしています) 場合、ファイルがテキストファイルで開かれま"
"すが、行末文字として Unix における慣行である ``'\\n'`` 、Macintosh における慣"
"行である ``'\\r'`` 、 Windows における慣行である ``'\\r\\n'`` のいずれを使う"
"こともできます。これらの改行文字の外部表現はどれも、Python プログラムからは "
"``'\\n'`` に見えます。 Python が :term:`universal newlines` サポートなしで構"
"築されている場合、 *mode* ``'U'`` は通常のテキストモードと同様になります。開"
"かれたファイルオブジェクトはまた、 :attr:`newlines` と呼ばれる属性を持ってお"
"り、その値は ``None`` (改行が見つからなかった場合)、 ``'\\n'``, ``'\\r'``, "
"``'\\r\\n'``, または見つかった全ての改行タイプを含むタプルになります。"

#: ../../library/functions.rst:936
msgid ""
"Python enforces that the mode, after stripping ``'U'``, begins with ``'r'``, "
"``'w'`` or ``'a'``."
msgstr ""
"``'U'`` を取り除いた後のモードは ``'r'``, ``'w'``, ``'a'`` のいずれかで始ま"
"る、というのが Python における規則です。"

#: ../../library/functions.rst:939
msgid ""
"Python provides many file handling modules including :mod:`fileinput`, :mod:"
"`os`, :mod:`os.path`, :mod:`tempfile`, and :mod:`shutil`."
msgstr ""
"Python では、 :mod:`fileinput`, :mod:`os`, :mod:`os.path`, :mod:`tempfile`, :"
"mod:`shutil` などの多数のファイル操作モジュールが提供されています。"

#: ../../library/functions.rst:943
msgid "Restriction on first letter of mode string introduced."
msgstr "モード文字列の先頭についての制限が導入されました."

#: ../../library/functions.rst:949
msgid ""
"Given a string of length one, return an integer representing the Unicode "
"code point of the character when the argument is a unicode object, or the "
"value of the byte when the argument is an 8-bit string. For example, "
"``ord('a')`` returns the integer ``97``, ``ord(u'\\u2020')`` returns "
"``8224``.  This is the inverse of :func:`chr` for 8-bit strings and of :func:"
"`unichr` for unicode objects.  If a unicode argument is given and Python was "
"built with UCS2 Unicode, then the character's code point must be in the "
"range [0..65535] inclusive; otherwise the string length is two, and a :exc:"
"`TypeError` will be raised."
msgstr ""
"長さ 1 の与えられた文字列に対し、その文字列が unicode オブジェクトならば "
"Unicode コードポイントを表す整数を、 8 ビット文字列ならばそのバイトの値を返し"
"ます。たとえば、 ``ord('a')`` は整数 ``97`` を返し、 ``ord(u'\\u2020')`` は "
"``8224`` を返します。この値は 8 ビット文字列に対する :func:`chr` の逆であ"
"り、 unicode オブジェクトに対する :func:`unichr` の逆です。引数が unicode で "
"Python が UCS2 Unicode 対応版ならば、その文字のコードポイントは両端を含めて "
"[0..65535] の範囲に入っていなければなりません。この範囲から外れると文字列の長"
"さが 2 になり、 :exc:`TypeError` が送出されることになります。"

#: ../../library/functions.rst:961
msgid ""
"Return *x* to the power *y*; if *z* is present, return *x* to the power *y*, "
"modulo *z* (computed more efficiently than ``pow(x, y) % z``). The two-"
"argument form ``pow(x, y)`` is equivalent to using the power operator: "
"``x**y``."
msgstr ""
"*x* の *y* 乗を返します; *z* があれば、*x* の *y* 乗に対する *z* のモジュロを"
"返します (``pow(x, y) % z`` より効率よく計算されます)。二引数の形式 ``pow(x, "
"y)`` は、冪乗演算子を使った ``x**y`` と等価です。"

#: ../../library/functions.rst:965
msgid ""
"The arguments must have numeric types.  With mixed operand types, the "
"coercion rules for binary arithmetic operators apply.  For int and long int "
"operands, the result has the same type as the operands (after coercion) "
"unless the second argument is negative; in that case, all arguments are "
"converted to float and a float result is delivered.  For example, ``10**2`` "
"returns ``100``, but ``10**-2`` returns ``0.01``.  (This last feature was "
"added in Python 2.2.  In Python 2.1 and before, if both arguments were of "
"integer types and the second argument was negative, an exception was "
"raised.) If the second argument is negative, the third argument must be "
"omitted. If *z* is present, *x* and *y* must be of integer types, and *y* "
"must be non-negative.  (This restriction was added in Python 2.2.  In Python "
"2.1 and before, floating 3-argument ``pow()`` returned platform-dependent "
"results depending on floating-point rounding accidents.)"
msgstr ""
"引数は数値型でなくてはなりません。型混合の場合、 2 進算術演算におけ る型強制"
"規則が適用されます。通常整数、および、長整数の被演算子に対しては、二つ目の引"
"数が負の数でない限り、結果は (型強制後の) 被演算子と同じ型になります; 負の場"
"合、全ての引数は浮動小数点型に変換され、浮動小数点型の結果が 返されます。例え"
"ば、 ``10**2`` は ``100`` を返しますが、 ``10**-2`` は ``0.01`` を返します。 "
"(最後に述べた機能は Python 2.2 で追加され たものです。 Python 2.1 以前では、"
"双方の引数が整数で二つ目の値が負の場合、例外が送出されます。) 二つ目の引数が"
"負の場合、三つめの引数 は無視されます。 *z* がある場合、 *x* および *y* は整"
"数型でなければならず、 *y* は非負の値でなくてはなりません (この制限は Python "
"2.2 で追加されました。 Python 2.1 以前では、 3 つの浮動小数点引数を持つ "
"``pow()`` は浮動小数点の丸めに関する偶発誤差により、プラットフォー ム依存の結"
"果を返します)。"

#: ../../library/functions.rst:982
msgid ""
"Print *objects* to the stream *file*, separated by *sep* and followed by "
"*end*.  *sep*, *end* and *file*, if present, must be given as keyword "
"arguments."
msgstr ""
"*object* (複数でも可) を *sep* で区切りながらストリーム *file* に表示し、最後"
"に *end* を表示します。 *sep*, *end* そして *file* が与えられる場合、キーワー"
"ド引数として与えられる必要があります。"

#: ../../library/functions.rst:986
msgid ""
"All non-keyword arguments are converted to strings like :func:`str` does and "
"written to the stream, separated by *sep* and followed by *end*.  Both *sep* "
"and *end* must be strings; they can also be ``None``, which means to use the "
"default values.  If no *objects* are given, :func:`print` will just write "
"*end*."
msgstr ""
"キーワードなしの引数はすべて、 :func:`str` がするように文字列に変換され、 "
"*sep* で区切られながらストリームに書き出され、最後に *end* が続きます。 "
"*sep* と *end* の両方とも、文字列でなければなりません; または ``None`` にすれ"
"ば、デフォルトの値が使われます。 *objects* が与えられなければ、 :func:"
"`print` は *end* だけを書き出します。"

#: ../../library/functions.rst:992
msgid ""
"The *file* argument must be an object with a ``write(string)`` method; if it "
"is not present or ``None``, :data:`sys.stdout` will be used.  Output "
"buffering is determined by *file*.  Use ``file.flush()`` to ensure, for "
"instance, immediate appearance on a screen."
msgstr ""
"*file* 引数は、 ``write(string)`` メソッドを持つオブジェクトでなければなりま"
"せん。指定されないか、 ``None`` であった場合には、 :data:`sys.stdout` が使わ"
"れます。出力のバッファリングは *file* により決定されます。たとえば即座に画面"
"に現れて欲しければ、 ``file.flush()`` を使ってそれを保障してください。"

#: ../../library/functions.rst:999
msgid ""
"This function is not normally available as a built-in since the name "
"``print`` is recognized as the :keyword:`print` statement.  To disable the "
"statement and use the :func:`print` function, use this future statement at "
"the top of your module::"
msgstr ""
"この関数は ``print`` という名前が :keyword:`print` ステートメン トとして解釈"
"されるため、通常は使用できません。ステートメントを無効化して、 :func:`print` "
"関数を使うためには、以下の future ステートメントをモジュールの最初に書いて下"
"さい。::"

#: ../../library/functions.rst:1011
msgid ""
"Return a property attribute for :term:`new-style class`\\es (classes that "
"derive from :class:`object`)."
msgstr ""
":term:`new-style class` (新しい形式のクラス) (:class:`object` から派生したク"
"ラス) における property 属性を返します。"

#: ../../library/functions.rst:1014
msgid ""
"*fget* is a function for getting an attribute value.  *fset* is a function "
"for setting an attribute value. *fdel* is a function for deleting an "
"attribute value.  And *doc* creates a docstring for the attribute."
msgstr ""
"*fget* は属性値を取得するための関数です。*fset* は属性値を設定するための関数"
"です。*fdel* は属性値を削除するための関数です。*doc* は属性の docstring を作"
"成します。"

#: ../../library/functions.rst:1018
msgid "A typical use is to define a managed attribute ``x``::"
msgstr "典型的な使用法は、属性 ``x`` の処理の定義です::"

#: ../../library/functions.rst:1035
msgid ""
"If *c* is an instance of *C*, ``c.x`` will invoke the getter, ``c.x = "
"value`` will invoke the setter and ``del c.x`` the deleter."
msgstr ""
"*c* が *C* のインスタンスならば、``c.x`` は getter を呼び出し、``c.x = "
"value`` は setter を、``del c.x`` は deleter を呼び出します。"

#: ../../library/functions.rst:1038
msgid ""
"If given, *doc* will be the docstring of the property attribute. Otherwise, "
"the property will copy *fget*'s docstring (if it exists).  This makes it "
"possible to create read-only properties easily using :func:`property` as a :"
"term:`decorator`::"
msgstr ""
"*doc* は、与えられれば property 属性のドキュメント文字列になります。与えられ"
"なければ、 property は *fget* のドキュメント文字列(もしあれば)をコピーしま"
"す。そのため、 :func:`property` をデコレータ (:term:`decorator`) として使え"
"ば、読み取り専用 property を作るのは容易です::"

#: ../../library/functions.rst:1051
msgid ""
"The ``@property`` decorator turns the :meth:`voltage` method into a "
"\"getter\" for a read-only attribute with the same name, and it sets the "
"docstring for *voltage* to \"Get the current voltage.\""
msgstr ""
"``@property`` デコレータは :meth:`voltage` を同じ名前のまま 読み取り専用属性"
"の \"getter\" にし、*voltage* のドキュメント文字列を \"Get the current "
"voltage.\" に設定します。"

#: ../../library/functions.rst:1055
msgid ""
"A property object has :attr:`~property.getter`, :attr:`~property.setter`, "
"and :attr:`~property.deleter` methods usable as decorators that create a "
"copy of the property with the corresponding accessor function set to the "
"decorated function.  This is best explained with an example::"
msgstr ""
"property オブジェクトは :attr:`~property.getter`, :attr:`~property.setter`, :"
"attr:`~property.deleter` メソッドを持っています。これらのメソッドをデコレータ"
"として使うと、対応するアクセサ関数がデコレートされた関数に設定された、 "
"property のコピーを作成できます。これを一番分かりやすく説明する例があります::"

#: ../../library/functions.rst:1077
msgid ""
"This code is exactly equivalent to the first example.  Be sure to give the "
"additional functions the same name as the original property (``x`` in this "
"case.)"
msgstr ""
"このコードは最初の例と等価です。追加の関数には、必ず元の property と同じ名前 "
"(この例では ``x``) を与えて下さい。"

#: ../../library/functions.rst:1081
msgid ""
"The returned property object also has the attributes ``fget``, ``fset``, and "
"``fdel`` corresponding to the constructor arguments."
msgstr ""
"返される property オブジェクトも、コンストラクタの引数に対応した ``fget``, "
"``fset``, および ``fdel`` 属性を持ちます。"

#: ../../library/functions.rst:1086
msgid "Use *fget*'s docstring if no *doc* given."
msgstr "*doc* が与えられない場合に *fget* のドキュメント文字列を使う。"

#: ../../library/functions.rst:1089
msgid "The ``getter``, ``setter``, and ``deleter`` attributes were added."
msgstr "``getter``, ``setter`` そして ``deleter`` 属性が追加されました。"

#: ../../library/functions.rst:1096
msgid ""
"This is a versatile function to create lists containing arithmetic "
"progressions. It is most often used in :keyword:`for` loops.  The arguments "
"must be plain integers.  If the *step* argument is omitted, it defaults to "
"``1``.  If the *start* argument is omitted, it defaults to ``0``.  The full "
"form returns a list of plain integers ``[start, start + step, start + 2 * "
"step, ...]``.  If *step* is positive, the last element is the largest "
"``start + i * step`` less than *stop*; if *step* is negative, the last "
"element is the smallest ``start + i * step`` greater than *stop*.  *step* "
"must not be zero (or else :exc:`ValueError` is raised).  Example:"
msgstr ""
"等差数列を含むリストを生成するための多機能関数です。 :keyword:`for` ループで"
"よく使われます。引数は通常の整数でなければなりません。 *step* 引数が無視され"
"た場合、標準の値 ``1`` になります。 *start* 引数が省 略された場合、標準の値 "
"``0`` になります。完全な形式では、通常の整数列 ``[start, start + step, start "
"+ 2 * step, ...]`` を返します。 *step* が正の値の場合、最後の要素は *stop* よ"
"りも小さい ``start + i * step`` の最大値になります; *step* が負の値の場合、最"
"後の要素は *stop* よりも大きい ``start + i * step`` の最小値になります。 "
"*step* はゼロであってはなりません (さもなければ :exc:`ValueError` が送出され"
"ます)。以下に例を示します。::"

#: ../../library/functions.rst:1124
msgid ""
"If the *prompt* argument is present, it is written to standard output "
"without a trailing newline.  The function then reads a line from input, "
"converts it to a string (stripping a trailing newline), and returns that. "
"When EOF is read, :exc:`EOFError` is raised. Example::"
msgstr ""
"引数 *prompt* が存在する場合、末尾の改行を除いて標準出力に出力されます。次"
"に、この関数は入力から 1 行を読み込んで文字列に変換して (末尾の改行を除いて) "
"返します。 EOF が読み込まれると :exc:`EOFError` が送出されます。以下に例を示"
"します。::"

#: ../../library/functions.rst:1134
msgid ""
"If the :mod:`readline` module was loaded, then :func:`raw_input` will use it "
"to provide elaborate line editing and history features."
msgstr ""
":mod:`readline` モジュールが読み込まれていれば、 :func:`raw_input` は精緻な行"
"編集およびヒストリ機能を提供します。"

#: ../../library/functions.rst:1140
msgid ""
"Apply *function* of two arguments cumulatively to the items of *iterable*, "
"from left to right, so as to reduce the iterable to a single value.  For "
"example, ``reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])`` calculates "
"``((((1+2)+3)+4)+5)``. The left argument, *x*, is the accumulated value and "
"the right argument, *y*, is the update value from the *iterable*.  If the "
"optional *initializer* is present, it is placed before the items of the "
"iterable in the calculation, and serves as a default when the iterable is "
"empty.  If *initializer* is not given and *iterable* contains only one item, "
"the first item is returned. Roughly equivalent to::"
msgstr ""
"*iterable* の要素に対して、iterable を単一の値に短縮するような形で 2 つの引数"
"をもつ *function* を左から右に累積的に適用します。例えば、 ``reduce(lambda "
"x, y: x+y, [1, 2, 3, 4, 5])`` は ``((((1+2)+3)+4)+5)`` を計算します。左引数 "
"*x* は累計の値になり、右引数 *y* は ``iterable`` から取り出した更新値になりま"
"す。オプションの *initializer* が存在する場合、計算の際に iterable の先頭に置"
"かれます。また、 iterable が空の場合には標準の値になります。 *initializer* が"
"与えられておらず、 *iterable* が単一の要素しか持っていない場合、最初の要素が"
"返されます。これは大体以下と等価です::"

#: ../../library/functions.rst:1164
msgid ""
"Reload a previously imported *module*.  The argument must be a module "
"object, so it must have been successfully imported before.  This is useful "
"if you have edited the module source file using an external editor and want "
"to try out the new version without leaving the Python interpreter.  The "
"return value is the module object (the same as the *module* argument)."
msgstr ""
"すでにインポートされた *module* を再解釈し、再初期化します。引数はモジュール"
"オブジェクトでなければならないので、予めインポートに成功していなければなりま"
"せん。この関数はモジュールのソースコードファイルを外部エディタで編集して、"
"Python インタプリタから離れることなく新しいバージョンを試したい際に有効です。"
"戻り値は (*module* 引数と同じ) モジュールオブジェクトです。"

#: ../../library/functions.rst:1170
msgid "When ``reload(module)`` is executed:"
msgstr "``reload(module)`` を実行すると、以下の処理が行われます:"

#: ../../library/functions.rst:1172
msgid ""
"Python modules' code is recompiled and the module-level code reexecuted, "
"defining a new set of objects which are bound to names in the module's "
"dictionary.  The ``init`` function of extension modules is not called a "
"second time."
msgstr ""
"Python モジュールのコードは再コンパイルされ、モジュールレベルのコードは再度実"
"行されます。モジュールの辞書中にある、何らかの名前に結び付けられたオブジェク"
"トを新たに定義します。拡張モジュール中の ``init`` 関数が二度呼び出されること"
"はありません。"

#: ../../library/functions.rst:1177
msgid ""
"As with all other objects in Python the old objects are only reclaimed after "
"their reference counts drop to zero."
msgstr ""
"Python における他のオブジェクトと同様、以前のオブジェクトのメモリ領域は、参照"
"カウントがゼロにならないかぎり再利用されません。"

#: ../../library/functions.rst:1180
msgid ""
"The names in the module namespace are updated to point to any new or changed "
"objects."
msgstr ""
"モジュール名前空間内の名前は新しいオブジェクト (または更新されたオブジェク"
"ト) を指すよう更新されます。"

#: ../../library/functions.rst:1183
msgid ""
"Other references to the old objects (such as names external to the module) "
"are not rebound to refer to the new objects and must be updated in each "
"namespace where they occur if that is desired."
msgstr ""
"以前のオブジェクトが (外部の他のモジュールなどからの) 参照を受けている場合、"
"それらを新たなオブジェクトに再束縛し直すことはないので、必要なら自分で名前空"
"間を更新しなければなりません。"

#: ../../library/functions.rst:1187
msgid "There are a number of other caveats:"
msgstr "いくつか補足説明があります:"

#: ../../library/functions.rst:1189
msgid ""
"When a module is reloaded, its dictionary (containing the module's global "
"variables) is retained.  Redefinitions of names will override the old "
"definitions, so this is generally not a problem.  If the new version of a "
"module does not define a name that was defined by the old version, the old "
"definition remains.  This feature can be used to the module's advantage if "
"it maintains a global table or cache of objects --- with a :keyword:`try` "
"statement it can test for the table's presence and skip its initialization "
"if desired::"
msgstr ""
"モジュールが再ロードされた際、その辞書 (モジュールのグローバル変数を含みま"
"す) はそのまま残ります。名前の再定義を行うと、以前の定義を上書きするので、一"
"般的には問題はありません。新たなバージョンのモジュールが古いバージョンで定義"
"された名前を定義していない場合、古い定義がそのまま残ります。辞書がグローバル"
"テーブルやオブジェクトのキャッシュを維持していれば、この機能をモジュールを有"
"効性を引き出すために使うことができます --- つまり、 :keyword:`try` 文を使え"
"ば、必要に応じてテーブルがあるかどうかをテストし、その初期化を飛ばすことがで"
"きます::"

#: ../../library/functions.rst:1202
msgid ""
"It is generally not very useful to reload built-in or dynamically loaded "
"modules.  Reloading :mod:`sys`, :mod:`__main__`, :mod:`builtins` and other "
"key modules is not recommended.  In many cases extension modules are not "
"designed to be initialized more than once, and may fail in arbitrary ways "
"when reloaded."
msgstr ""
"組み込みモジュールや動的にロードされるモジュールを再ロードすることは、一般的"
"にそれほど便利ではありません。 :mod:`sys`, :mod:`__main__`, :mod:`builtins` "
"やその他重要なモジュールの再ロードはお勧め出来ません。多くの場合、拡張モ"
"ジュールは 1 度以上初期化されるようには設計されておらず、再ロードされた場合に"
"は何らかの理由で失敗するかもしれません。"

#: ../../library/functions.rst:1208
msgid ""
"If a module imports objects from another module using :keyword:`from` ... :"
"keyword:`import` ..., calling :func:`reload` for the other module does not "
"redefine the objects imported from it --- one way around this is to re-"
"execute the :keyword:`from` statement, another is to use :keyword:`import` "
"and qualified names (*module*.*name*) instead."
msgstr ""
"一方のモジュールが :keyword:`from` ... :keyword:`import` ... を使って、オブ"
"ジェクトを他方のモジュールからインポートしているなら、他方のモジュールを :"
"func:`reload` で呼び出しても、そのモジュールからインポートされたオブジェクト"
"を再定義することはできません --- この問題を回避する一つの方法は、 :keyword:"
"`from` 文を再度実行することで、もう一つの方法は :keyword:`from` 文の代わり"
"に :keyword:`import` と限定的な名前 (*module*.\\*name*) を使うことです。"

#: ../../library/functions.rst:1214
msgid ""
"If a module instantiates instances of a class, reloading the module that "
"defines the class does not affect the method definitions of the instances "
"--- they continue to use the old class definition.  The same is true for "
"derived classes."
msgstr ""
"あるモジュールがクラスのインスタンスを生成している場合、そのクラスを定義して"
"いるモジュールの再ロードはそれらインスタンスのメソッド定義に影響しません --- "
"それらは古いクラス定義を使い続けます。これは派生クラスの場合でも同じです。"

#: ../../library/functions.rst:1222
msgid ""
"Return a string containing a printable representation of an object.  This is "
"the same value yielded by conversions (reverse quotes).  It is sometimes "
"useful to be able to access this operation as an ordinary function.  For "
"many types, this function makes an attempt to return a string that would "
"yield an object with the same value when passed to :func:`eval`, otherwise "
"the representation is a string enclosed in angle brackets that contains the "
"name of the type of the object together with additional information often "
"including the name and address of the object.  A class can control what this "
"function returns for its instances by defining a :meth:`__repr__` method."
msgstr ""
"オブジェクトの印字可能な表現を含む文字列を返します。これは型変換で得られる "
"(逆クオートの) 値と同じです。通常の関数としてこの操作にアクセスできるとたまに"
"便利です。この関数は多くの型について、 :func:`eval` に渡されたときに同じ値を"
"持つようなオブジェクトを表す文字列を生成しようとします。そうでない場合は、角"
"括弧に囲まれたオブジェクトの型の名前と追加の情報 (大抵の場合はオブジェクトの"
"名前とアドレスを含みます) を返します。クラスは、 :meth:`__repr__` メソッドを"
"定義することで、この関数によりそのクラスのインスタンスが返すものを制御するこ"
"とができます。"

#: ../../library/functions.rst:1235
msgid ""
"Return a reverse :term:`iterator`.  *seq* must be an object which has a :"
"meth:`__reversed__` method or supports the sequence protocol (the :meth:"
"`__len__` method and the :meth:`__getitem__` method with integer arguments "
"starting at ``0``)."
msgstr ""
"要素を逆順に取り出すイテレータ (reverse :term:`iterator`) を返します。 *seq* "
"は :meth:`__reversed__` メソッドを持つか、シーケンス型プロトコル (:meth:"
"`__len__` メソッド、および、 ``0`` 以上の整数を引数とする :meth:"
"`__getitem__` メソッド) をサポートするオブジェクトでなければなりません。"

#: ../../library/functions.rst:1242
msgid "Added the possibility to write a custom :meth:`__reversed__` method."
msgstr "カスタムの :meth:`__reversed__` メソッドが使えるようになりました。"

#: ../../library/functions.rst:1248
msgid ""
"Return the floating point value *number* rounded to *ndigits* digits after "
"the decimal point.  If *ndigits* is omitted, it defaults to zero. The result "
"is a floating point number.  Values are rounded to the closest multiple of "
"10 to the power minus *ndigits*; if two multiples are equally close, "
"rounding is done away from 0 (so, for example, ``round(0.5)`` is ``1.0`` and "
"``round(-0.5)`` is ``-1.0``)."
msgstr ""
"*number* を小数点以下 *ndigits* 桁で丸めた浮動小数点数の値を返します。 "
"*ndigits* が省略されると、デフォルトはゼロになります。結果は浮動小数点数で"
"す。値は最も近い 10 のマイナス *ndigits* 乗の倍数に丸められます。二つの倍数と"
"の距離が等しい場合、ゼロから離れる方向に丸められます (従って、例えば "
"``round(0.5)`` は ``1.0`` になり、 ``round(-0.5)`` は ``-1.0`` になります)。"

#: ../../library/functions.rst:1258
msgid ""
"The behavior of :func:`round` for floats can be surprising: for example, "
"``round(2.675, 2)`` gives ``2.67`` instead of the expected ``2.68``. This is "
"not a bug: it's a result of the fact that most decimal fractions can't be "
"represented exactly as a float.  See :ref:`tut-fp-issues` for more "
"information."
msgstr ""
"浮動小数点数に対する :func:`round` の振る舞いは意外なものかもしれません: 例え"
"ば、 ``round(2.675, 2)`` は予想通りの ``2.68`` ではなく ``2.67`` を与えます。"
"これはバグではありません: これはほとんどの小数が浮動小数点数で正確に表せない"
"ことの結果です。詳しくは :ref:`tut-fp-issues` を参照してください。"

#: ../../library/functions.rst:1269
msgid ""
"Return a new :class:`set` object, optionally with elements taken from "
"*iterable*.  ``set`` is a built-in class.  See :class:`set` and :ref:`types-"
"set` for documentation about this class."
msgstr ""
"オプションで *iterable* の要素を持つ、新しい :class:`set` オブジェクトを返し"
"ます。 ``set`` は組み込みクラスです。このクラスについて詳しい情報は :class:"
"`set` や :ref:`types-set` を参照してください。"

#: ../../library/functions.rst:1273
msgid ""
"For other containers see the built-in :class:`frozenset`, :class:`list`, :"
"class:`tuple`, and :class:`dict` classes, as well as the :mod:`collections` "
"module."
msgstr ""
"他のコンテナについては :mod:`collections` モジュールや組み込みの :class:"
"`frozenset` 、 :class:`list` 、 :class:`tuple` 、 :class:`dict` クラスを参照"
"してください。"

#: ../../library/functions.rst:1282
msgid ""
"This is the counterpart of :func:`getattr`.  The arguments are an object, a "
"string and an arbitrary value.  The string may name an existing attribute or "
"a new attribute.  The function assigns the value to the attribute, provided "
"the object allows it.  For example, ``setattr(x, 'foobar', 123)`` is "
"equivalent to ``x.foobar = 123``."
msgstr ""
":func:`getattr` の相方です。引数はオブジェクト、文字列、それから任意の値で"
"す。文字列は既存の属性または新たな属性の名前にできます。この関数は指定したオ"
"ブジェクトが許せば、値を属性に関連付けます。例えば、 ``setattr(x, 'foobar', "
"123)`` は ``x.foobar = 123`` と等価です。"

#: ../../library/functions.rst:1294
msgid ""
"Return a :term:`slice` object representing the set of indices specified by "
"``range(start, stop, step)``.  The *start* and *step* arguments default to "
"``None``.  Slice objects have read-only data attributes :attr:`~slice."
"start`, :attr:`~slice.stop` and :attr:`~slice.step` which merely return the "
"argument values (or their default).  They have no other explicit "
"functionality; however they are used by Numerical Python and other third "
"party extensions. Slice objects are also generated when extended indexing "
"syntax is used.  For example: ``a[start:stop:step]`` or ``a[start:stop, "
"i]``.  See :func:`itertools.islice` for an alternate version that returns an "
"iterator."
msgstr ""
"``range(start, stop, step)`` で指定されるインデクスの集合を表す、スライス (:"
"term:`slice`) オブジェクトを返します。引数 *start* および *step* はデフォルト"
"では ``None`` です。スライスオブジェクトは読み出し専用の属性 :attr:`~slice."
"start`、:attr:`~slice.stop` および :attr:`~slice.step` を持ち、これらは単に引"
"数で使われた 値 (またはデフォルト値) を返します。これらの値には、その他のはっ"
"きりと した機能はありません。しかしながら、これらの値は Numerical Python およ"
"び、その他のサードパーティによる拡張で利用されています。スライスオブジェクト"
"は拡張されたインデクス指定構文が使われる際にも生成されます。例えば ``a[start:"
"stop:step]`` や ``a[start:stop, i]`` です。この関数の代替となるイテレータを返"
"す関数、:func:`itertools.islice` も参照してください。"

#: ../../library/functions.rst:1307
msgid "Return a new sorted list from the items in *iterable*."
msgstr "*iterable* の要素を並べ替えた新たなリストを返します。"

#: ../../library/functions.rst:1309
msgid ""
"The optional arguments *cmp*, *key*, and *reverse* have the same meaning as "
"those for the :meth:`list.sort` method (described in section :ref:`typesseq-"
"mutable`)."
msgstr ""
"オプション引数 *cmp*, *key*, および *reverse* の意味は :meth:`list.sort` メ"
"ソッドと同じです。 (:ref:`typesseq-mutable` 節に説明があります。)"

#: ../../library/functions.rst:1313
msgid ""
"*cmp* specifies a custom comparison function of two arguments (iterable "
"elements) which should return a negative, zero or positive number depending "
"on whether the first argument is considered smaller than, equal to, or "
"larger than the second argument: ``cmp=lambda x,y: cmp(x.lower(), y."
"lower())``.  The default value is ``None``."
msgstr ""
"*cmp* は2つの引数 (iterable の要素) からなるカスタムの比較関数を指定します。 "
"これは始めの引数が 2 つ目の引数に比べて小さい、等しい、大きいかに応じて負数、"
"ゼロ、正数を返します。 ``cmp=lambda x,y: cmp(x.lower(), y.lower())`` 。デフォ"
"ルト値は ``None`` です。"

#: ../../library/functions.rst:1319
msgid ""
"*key* specifies a function of one argument that is used to extract a "
"comparison key from each list element: ``key=str.lower``.  The default value "
"is ``None`` (compare the elements directly)."
msgstr ""
"*key* は 1 つの引数からなる関数を指定します。これはリストの各要素から比較の"
"キーを取り出すのに使われます: ``key=str.lower`` 。デフォルト値は ``None`` で"
"す (要素を直接比較します)。"

#: ../../library/functions.rst:1323
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the list elements "
"are sorted as if each comparison were reversed."
msgstr ""
"*reverse* は真偽値です。 ``True`` がセットされた場合、リストの要素は個々の比"
"較が反転したものとして並び替えられます。"

#: ../../library/functions.rst:1326
msgid ""
"In general, the *key* and *reverse* conversion processes are much faster "
"than specifying an equivalent *cmp* function.  This is because *cmp* is "
"called multiple times for each list element while *key* and *reverse* touch "
"each element only once.  Use :func:`functools.cmp_to_key` to convert an old-"
"style *cmp* function to a *key* function."
msgstr ""
"一般的に、 *key* および *reverse* の変換プロセスは同等の *cmp* 関数を指定する"
"より早く動作します。これは *key* および *reverse* がそれぞれの要素に一度だけ"
"触れる間に、 *cmp* はリストのそれぞれの要素に対して複数回呼ばれることによるも"
"のです。旧式の *cmp* 関数を *key* 関数に変換するには :func:`functools."
"cmp_to_key` を使用してください。"

#: ../../library/functions.rst:1332
msgid ""
"The built-in :func:`sorted` function is guaranteed to be stable. A sort is "
"stable if it guarantees not to change the relative order of elements that "
"compare equal --- this is helpful for sorting in multiple passes (for "
"example, sort by department, then by salary grade)."
msgstr ""
"組み込みの :meth:`sort` 関数は安定なことが保証されています。同等な要素の相対"
"順序を変更しないことが保証されていれば、ソートは安定です。これは複数のパスで"
"ソートを行なうのに役立ちます（例えば部署でソートしてから給与の等級でソートす"
"る場合）。"

#: ../../library/functions.rst:1337
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr ""
"ソートの例と簡単なチュートリアルは :ref:`sortinghowto` を参照して下さい。"

#: ../../library/functions.rst:1344
msgid "Return a static method for *function*."
msgstr "*function* の静的メソッドを返します。"

#: ../../library/functions.rst:1346
msgid ""
"A static method does not receive an implicit first argument. To declare a "
"static method, use this idiom::"
msgstr ""
"静的メソッドは暗黙の第一引数を受け取りません。静的メソッドを宣言するには、こ"
"のイディオムを使ってください::"

#: ../../library/functions.rst:1354
msgid ""
"The ``@staticmethod`` form is a function :term:`decorator` -- see :ref:"
"`function` for details."
msgstr ""
"``@staticmethod`` 形式は関数デコレータ (:term:`decorator`) です。詳しくは :"
"ref:`function` を参照してください。"

#: ../../library/functions.rst:1357
msgid ""
"A static method can be called either on the class (such as ``C.f()``) or on "
"an instance (such as ``C().f()``)."
msgstr ""
"静的メソッドは (``C.f()`` のよう) クラスから呼び出したり、 (``C().f()`` のよ"
"うに) インスタンスから呼び出したりできます。"

#: ../../library/functions.rst:1360
msgid ""
"Static methods in Python are similar to those found in Java or C++. Also "
"see :func:`classmethod` for a variant that is useful for creating alternate "
"class constructors."
msgstr ""
"Python における静的メソッドは Java や C++ における静的メソッドと類似していま"
"す。クラスコンストラクタの代替を生成するのに役立つ変種、 :func:`classmethod` "
"も参照してください。"

#: ../../library/functions.rst:1364
msgid "For more information on static methods, see :ref:`types`."
msgstr "静的メソッドについて詳しい情報は :ref:`types` を参照してください。"

#: ../../library/functions.rst:1374
msgid ""
"Return a string containing a nicely printable representation of an object.  "
"For strings, this returns the string itself.  The difference with "
"``repr(object)`` is that ``str(object)`` does not always attempt to return a "
"string that is acceptable to :func:`eval`; its goal is to return a printable "
"string.  If no argument is given, returns the empty string, ``''``."
msgstr ""
"オブジェクトをうまく印字可能な形に表現したものを含む文字列を返します。文字列"
"に対してはその文字列自体を返します。 ``repr(object)`` との違いは、 "
"``str(object)`` は常に :func:`eval` が受理できるような文字列を返そうと試みる"
"わけではないという点です; この関数の目的は印字可能な文字列を返すところにあり"
"ます。引数が与えられなかった場合、空の文字列 ``''`` を返します。"

#: ../../library/functions.rst:1380
msgid ""
"For more information on strings see :ref:`typesseq` which describes sequence "
"functionality (strings are sequences), and also the string-specific methods "
"described in the :ref:`string-methods` section. To output formatted strings "
"use template strings or the ``%`` operator described in the :ref:`string-"
"formatting` section. In addition see the :ref:`stringservices` section. See "
"also :func:`unicode`."
msgstr ""
"文字列についての詳細は、シーケンスの機能についての説明、 :ref:`typesseq` を参"
"照下さい(文字列はシーケンスです)。 また、文字列特有のメソッドについては、 :"
"ref:`string-methods` を参照下さい。整形した文字列を出力するためには、テンプ"
"レート文字列か、 :ref:`string-formatting` にて説明される ``%`` 演算子を使用し"
"て下さい。さらには、 :ref:`stringservices` と :func:`unicode` も参照下さい。"

#: ../../library/functions.rst:1390
msgid ""
"Sums *start* and the items of an *iterable* from left to right and returns "
"the total.  *start* defaults to ``0``. The *iterable*'s items are normally "
"numbers, and the start value is not allowed to be a string."
msgstr ""
"*start* と *iterable* の要素を左から右へ合計し、総和を返します。 *start* はデ"
"フォルトで ``0`` です。 *iterable* の要素は通常は数値で、start の値は文字列で"
"あってはなりません。"

#: ../../library/functions.rst:1394
msgid ""
"For some use cases, there are good alternatives to :func:`sum`. The "
"preferred, fast way to concatenate a sequence of strings is by calling ``''."
"join(sequence)``.  To add floating point values with extended precision, "
"see :func:`math.fsum`\\.  To concatenate a series of iterables, consider "
"using :func:`itertools.chain`."
msgstr ""
"使う場面によっては、 :func:`sum` よりもいい選択肢があります。文字列からなる"
"シーケンスを結合する高速かつ望ましい方法は ``''.join(sequence)`` を呼ぶことで"
"す。浮動小数点数値を拡張された精度で加算するには、 :func:`math.fsum` を参照下"
"さい。一連のイテラブルを連結するには、 :func:`itertools.chain` の使用を考えて"
"ください。"

#: ../../library/functions.rst:1405
msgid ""
"Return a proxy object that delegates method calls to a parent or sibling "
"class of *type*.  This is useful for accessing inherited methods that have "
"been overridden in a class. The search order is same as that used by :func:"
"`getattr` except that the *type* itself is skipped."
msgstr ""
"メソッドの呼び出しを *type* の親または兄弟クラスに委譲するプロキシオブジェク"
"トを返します。これはクラスの中でオーバーライドされた継承メソッドにアクセスす"
"るのに便利です。探索の順序は、 *type* 自身が飛ばされるのをのぞいて :func:"
"`getattr` で使われるのと同じです。"

#: ../../library/functions.rst:1410
msgid ""
"The :attr:`~class.__mro__` attribute of the *type* lists the method "
"resolution search order used by both :func:`getattr` and :func:`super`.  The "
"attribute is dynamic and can change whenever the inheritance hierarchy is "
"updated."
msgstr ""
"*type* の :attr:`~class.__mro__` 属性は、 :func:`getattr` と :func:`super` "
"の 両方で使われる、メソッド解決の探索順序を列記します。 この属性は動的で、継"
"承の階層構造が更新されれば、随時変化します。"

#: ../../library/functions.rst:1415
msgid ""
"If the second argument is omitted, the super object returned is unbound.  If "
"the second argument is an object, ``isinstance(obj, type)`` must be true.  "
"If the second argument is a type, ``issubclass(type2, type)`` must be true "
"(this is useful for classmethods)."
msgstr ""
"第 2 引数が省かれたなら、返されるスーパーオブジェクトは束縛されません。第 2 "
"引数がオブジェクトであれば、 ``isinstance(obj, type)`` は真でなければなりませ"
"ん。第 2 引数が型であれば、 ``issubclass(type2, type)`` は真でなければなりま"
"せん (これはクラスメソッドに役に立つでしょう)。"

#: ../../library/functions.rst:1421
msgid ":func:`super` only works for :term:`new-style class`\\es."
msgstr ":func:`super` は :term:`new-style class` に対してのみ動作します。"

#: ../../library/functions.rst:1423
msgid ""
"There are two typical use cases for *super*.  In a class hierarchy with "
"single inheritance, *super* can be used to refer to parent classes without "
"naming them explicitly, thus making the code more maintainable.  This use "
"closely parallels the use of *super* in other programming languages."
msgstr ""
"*super* の典型的な用途は 2 つあります。単一の継承をしているクラス階層構造で"
"は、 *super* は名前を明示することなく親クラスを参照するのに使え、これでコード"
"はメンテナンスしやすくなります。この用途の *super* は他のプログラミング言語で"
"見られるものと近い方向性です。"

#: ../../library/functions.rst:1428
msgid ""
"The second use case is to support cooperative multiple inheritance in a "
"dynamic execution environment.  This use case is unique to Python and is not "
"found in statically compiled languages or languages that only support single "
"inheritance.  This makes it possible to implement \"diamond diagrams\" where "
"multiple base classes implement the same method.  Good design dictates that "
"this method have the same calling signature in every case (because the order "
"of calls is determined at runtime, because that order adapts to changes in "
"the class hierarchy, and because that order can include sibling classes that "
"are unknown prior to runtime)."
msgstr ""
"2 つ目の用途は、動的な実行環境下での複数の継承の共同をサポートすることです。"
"この用途は Python 特有で、静的にコンパイルされる言語や、単一の継承しかサポー"
"トしない言語では見られないものです。これは複数の基底クラスが同じメソッドを実"
"装する \"diamond diagram\" を実装できるようにします。良い設計のために、このメ"
"ソッドがすべての場合に同じ形式で呼び出せるべきです (呼び出しの順序が実行時に"
"決定されることや、順序がクラスの階層の変更に対応することや、その順序には実行"
"時まで未知の兄弟クラスが含まれえることが理由です)。"

#: ../../library/functions.rst:1438
msgid "For both use cases, a typical superclass call looks like this::"
msgstr ""
"両方のケースにおいて、典型的なスーパークラスの呼び出しはこのようになるでしょ"
"う。 ::"

#: ../../library/functions.rst:1444
msgid ""
"Note that :func:`super` is implemented as part of the binding process for "
"explicit dotted attribute lookups such as ``super().__getitem__(name)``. It "
"does so by implementing its own :meth:`__getattribute__` method for "
"searching classes in a predictable order that supports cooperative multiple "
"inheritance. Accordingly, :func:`super` is undefined for implicit lookups "
"using statements or operators such as ``super()[name]``."
msgstr ""
"なお、:func:`super` は ``super().__getitem__(name)`` のような明示的なドット表"
"記属性探索の束縛処理の一部として使うように実装されています。これは、 :meth:"
"`__getattribute__` メソッドを予測可能な順序でクラスを検索するように実装し、協"
"調的な多重継承をサポートすることで実現されています。従って、 :func:`super` "
"は ``super()[name]`` のような文や演算子を使った暗黙の探索向けには定義されてい"
"ません。"

#: ../../library/functions.rst:1451
msgid ""
"Also note that :func:`super` is not limited to use inside methods.  The two "
"argument form specifies the arguments exactly and makes the appropriate "
"references."
msgstr ""
"また、 :func:`super` の使用がメソッド内部に限定されないことにも注目して 下さ"
"い。引数を2つ渡す形式の呼び出しは、必要な要素を正確に指定するので、 適当な参"
"照を作ることができます。"

#: ../../library/functions.rst:1455
msgid ""
"For practical suggestions on how to design cooperative classes using :func:"
"`super`, see `guide to using super() <https://rhettinger.wordpress."
"com/2011/05/26/super-considered-super/>`_."
msgstr ""
":func:`super` を用いて協調的なクラスを設計する方法の実践的な提案は、 `guide "
"to using super() <https://rhettinger.wordpress.com/2011/05/26/super-"
"considered-super/>`_ を参照してください。"

#: ../../library/functions.rst:1464
msgid ""
"Return a tuple whose items are the same and in the same order as "
"*iterable*'s items.  *iterable* may be a sequence, a container that supports "
"iteration, or an iterator object. If *iterable* is already a tuple, it is "
"returned unchanged. For instance, ``tuple('abc')`` returns ``('a', 'b', "
"'c')`` and ``tuple([1, 2, 3])`` returns ``(1, 2, 3)``.  If no argument is "
"given, returns a new empty tuple, ``()``."
msgstr ""
"*iterable* の要素と要素が同じで、かつ順番も同じになるタプルを返します。 "
"*iterable* はシーケンス型、反復をサポートするコンテナ型、およびイテレータオブ"
"ジェクトをとることができます。 *iterable* がすでにタプルの場合、そのタプルを"
"変更せずに返します。 例えば、 ``tuple('abc')`` は ``('a', 'b', 'c')`` を返"
"し、 ``tuple([1, 2, 3])`` は ``(1, 2, 3)`` を返します。"

#: ../../library/functions.rst:1471
msgid ""
":class:`tuple` is an immutable sequence type, as documented in :ref:"
"`typesseq`. For other containers see the built in :class:`dict`, :class:"
"`list`, and :class:`set` classes, and the :mod:`collections` module."
msgstr ""
":class:`tuple` クラスは、不変のシーケンス型で、 :ref:`typesseq` にて説明され"
"ます。他のコンテナ型については、組み込みクラスの :class:`dict`, :class:"
"`list`, および :class:`set` と、 :mod:`collections` モジュールを参照下さい。"

#: ../../library/functions.rst:1481
msgid ""
"With one argument, return the type of an *object*.  The return value is a "
"type object.  The :func:`isinstance` built-in function is recommended for "
"testing the type of an object."
msgstr ""
"一つの引数を取り、 *object* の型を返します。戻り値は型オブジェクトです。オブ"
"ジェクトの型の検査には :func:`isinstance` 組み込み関数を使うことが推奨されま"
"す。"

#: ../../library/functions.rst:1485
msgid ""
"With three arguments, return a new type object.  This is essentially a "
"dynamic form of the :keyword:`class` statement. The *name* string is the "
"class name and becomes the :attr:`~definition.__name__` attribute; the "
"*bases* tuple itemizes the base classes and becomes the :attr:`~class."
"__bases__` attribute; and the *dict* dictionary is the namespace containing "
"definitions for class body and becomes the :attr:`~object.__dict__`  "
"attribute.  For example, the following two statements create identical :"
"class:`type` objects:"
msgstr ""
"引数が 3 つの場合、新しい型オブジェクトを返します。本質的には :keyword:"
"`class` 文の動的な形式です。 *name* 文字列はクラス名で、 :attr:`~definition."
"__name__` 属性になります。 *bases* タプルは基底クラスの羅列で、 :attr:"
"`~class.__bases__` 属性になります。 *dict* 辞書はクラス本体の定義を含む名前空"
"間で、 :attr:`~object.__dict__` 属性になります。たとえば、以下の二つの文は同"
"じ :class:`type` オブジェクトを作ります:"

#: ../../library/functions.rst:1503
msgid ""
"Return the Unicode string of one character whose Unicode code is the integer "
"*i*.  For example, ``unichr(97)`` returns the string ``u'a'``.  This is the "
"inverse of :func:`ord` for Unicode strings.  The valid range for the "
"argument depends how Python was configured -- it may be either UCS2 "
"[0..0xFFFF] or UCS4 [0..0x10FFFF]. :exc:`ValueError` is raised otherwise. "
"For ASCII and 8-bit strings see :func:`chr`."
msgstr ""
"Unicode におけるコードが整数 *i* になるような文字 1 文字からなる Unicode 文字"
"列を返します。例えば、 ``unichr(97)`` は文字列 ``u'a'`` を返します。この関数"
"は Unicode 文字列に対する :func:`ord` の逆です。 引数の正当な範囲は Python が"
"どのように構成されているかに依存しています --- UCS2 ならば [0..0xFFFF] であ"
"り UCS4 ならば [0..0x10FFFF] であり、このどちらかです。それ以外の値に対して"
"は :exc:`ValueError` が送出されます。ASCII の 8 ビットの文字列に対しては、 :"
"func:`chr` を参照下さい。"

#: ../../library/functions.rst:1516
msgid ""
"Return the Unicode string version of *object* using one of the following "
"modes:"
msgstr ""
"以下のモードのうち一つを使って、 *object* の Unicode 文字列バージョンを返しま"
"す:"

#: ../../library/functions.rst:1518
msgid ""
"If *encoding* and/or *errors* are given, ``unicode()`` will decode the "
"object which can either be an 8-bit string or a character buffer using the "
"codec for *encoding*. The *encoding* parameter is a string giving the name "
"of an encoding; if the encoding is not known, :exc:`LookupError` is raised. "
"Error handling is done according to *errors*; this specifies the treatment "
"of characters which are invalid in the input encoding.  If *errors* is "
"``'strict'`` (the default), a :exc:`ValueError` is raised on errors, while a "
"value of ``'ignore'`` causes errors to be silently ignored, and a value of "
"``'replace'`` causes the official Unicode replacement character, ``U+FFFD``, "
"to be used to replace input characters which cannot be decoded.  See also "
"the :mod:`codecs` module."
msgstr ""
"もし *encoding* かつ/または *errors* が与えられていれば、 ``unicode()`` は 8 "
"ビットの文字列または文字列バッファになっているオ ブジェクトを *encoding* の "
"codec を使ってデコードします。 *encoding* 引数はエンコーディング名を与える文"
"字列です; 未知のエンコーディングの場合、 :exc:`LookupError` が送出されます。"
"エラー処理は *errors* に従って行われます; このパラメータは入力エンコーディン"
"グ中で無効な文字の扱い方を指定します。 *errors* が ``'strict'`` (標準の設定で"
"す) の場合、エラー発生時には :exc:`ValueError` が送出されます。一方、 "
"``'ignore'`` では、エラーは暗黙のうちに無視されるようになり、 ``'replace'`` "
"では公式の置換文字、 ``U+FFFD`` を使って、デコードできなかった文字を置き換え"
"ます。 :mod:`codecs` モジュールについても参照してください。"

#: ../../library/functions.rst:1529
msgid ""
"If no optional parameters are given, ``unicode()`` will mimic the behaviour "
"of ``str()`` except that it returns Unicode strings instead of 8-bit "
"strings. More precisely, if *object* is a Unicode string or subclass it will "
"return that Unicode string without any additional decoding applied."
msgstr ""
"オプションのパラメータが与えられていない場合、 ``unicode()`` は ``str()`` の"
"動作をまねます。ただし、8 ビット文字列ではなく、 Unicode 文字列を返します。"
"もっと詳しくいえば、 *object* が Unicode 文字列かそのサブクラスなら、デコード"
"処理を一切介することなく Unicode 文字列を返すということです。"

#: ../../library/functions.rst:1534
msgid ""
"For objects which provide a :meth:`__unicode__` method, it will call this "
"method without arguments to create a Unicode string. For all other objects, "
"the 8-bit string version or representation is requested and then converted "
"to a Unicode string using the codec for the default encoding in ``'strict'`` "
"mode."
msgstr ""
":meth:`__unicode__` メソッドを提供しているオブジェクトの場合、 :func:"
"`unicode` はこのメソッドを引数なしで呼び出して Unicode 文字列を生成します。そ"
"れ以外のオブジェクトの場合、 8 ビットの文字列か、オ ブジェクトのデータ表現 "
"(representation) を呼び出し、その後デフォルトエンコーディングで ``'strict'`` "
"モードの codec を使って Unicode 文字列に変換します。"

#: ../../library/functions.rst:1539
msgid ""
"For more information on Unicode strings see :ref:`typesseq` which describes "
"sequence functionality (Unicode strings are sequences), and also the string-"
"specific methods described in the :ref:`string-methods` section. To output "
"formatted strings use template strings or the ``%`` operator described in "
"the :ref:`string-formatting` section. In addition see the :ref:"
"`stringservices` section. See also :func:`str`."
msgstr ""
"Unicode 文字列についてのさらなる情報については、シーケンス型の機能 についての"
"説明、 :ref:`typesseq` を参照下さい(Unicode 文字列はシー ケンスです)。また、"
"文字列特有のメソッドについては、 :ref:`string-methods` を参照下さい。整形した"
"文字列を出力するために は、テンプレート文字列か、 :ref:`string-formatting` に"
"て説明される ``%`` 演算子を使用して下さい。さらには、 :ref:`stringservices` "
"と :func:`str` も参照下さい。"

#: ../../library/functions.rst:1548
msgid "Support for :meth:`__unicode__` added."
msgstr ":meth:`__unicode__` のサポートが追加されました."

#: ../../library/functions.rst:1554
msgid ""
"Return the :attr:`~object.__dict__` attribute for a module, class, instance, "
"or any other object with a :attr:`~object.__dict__` attribute."
msgstr ""
"モジュール、クラス、インスタンス、あるいはそれ以外の :attr:`~object."
"__dict__` 属性を持つオブジェクトの、 :attr:`~object.__dict__` 属性を返しま"
"す。"

#: ../../library/functions.rst:1557
msgid ""
"Objects such as modules and instances have an updateable :attr:`~object."
"__dict__` attribute; however, other objects may have write restrictions on "
"their :attr:`~object.__dict__` attributes (for example, new-style classes "
"use a dictproxy to prevent direct dictionary updates)."
msgstr ""
"モジュールやインスタンスのようなオブジェクトには、更新可能な :attr:`~object."
"__dict__` 属性があります。しかし、それ以外のオブジェクトでは :attr:`~object."
"__dict__` 属性への書き込みに制限があるかもしれません。(例えば新スタイルクラス"
"は、辞書を直接更新されることを防ぐために dictproxy を使っています。)"

#: ../../library/functions.rst:1562
msgid ""
"Without an argument, :func:`vars` acts like :func:`locals`.  Note, the "
"locals dictionary is only useful for reads since updates to the locals "
"dictionary are ignored."
msgstr ""
"引数がなければ、:func:`vars` は :func:`locals` のように振る舞います。ただし、"
"辞書 locals への更新は無視されるため、辞書 locals は読み出し時のみ有用である"
"ことに注意してください。"

#: ../../library/functions.rst:1570
msgid ""
"This function is very similar to :func:`range`, but returns an :ref:`xrange "
"object <typesseq-xrange>` instead of a list.  This is an opaque sequence "
"type which yields the same values as the corresponding list, without "
"actually storing them all simultaneously. The advantage of :func:`xrange` "
"over :func:`range` is minimal (since :func:`xrange` still has to create the "
"values when asked for them) except when a very large range is used on a "
"memory-starved machine or when all of the range's elements are never used "
"(such as when the loop is usually terminated with :keyword:`break`).  For "
"more information on xrange objects, see :ref:`typesseq-xrange` and :ref:"
"`typesseq`."
msgstr ""
"この関数は :func:`range` に非常によく似ていますが、リストの代わりに :ref:"
"`xrange object <typesseq-xrange>` を返します。このオブジェクトは不透明なシー"
"ケンス型で、対応するリストと同じ値を持ちますが、それらの値全てを同時に記憶し"
"ません。 :func:`ragne` に対する :func:`xrange` の利点は微々たるものです (:"
"func:`xrange` は要求に応じて値を生成するからです) ただし、メモリ量の厳しい計"
"算機で巨大な範囲の値を使う時や、(ループがよく :keyword:`break` で中断されると"
"いったように) 範囲中の全ての値を使うとは限らない場合はその限りではありませ"
"ん。xrange オブジェクトについてのさらに詳しい情報については、 :ref:`typesseq-"
"xrange` と :ref:`typesseq` を参照して下さい。"

#: ../../library/functions.rst:1583
msgid ""
":func:`xrange` is intended to be simple and fast.  Implementations may "
"impose restrictions to achieve this.  The C implementation of Python "
"restricts all arguments to native C longs (\"short\" Python integers), and "
"also requires that the number of elements fit in a native C long.  If a "
"larger range is needed, an alternate version can be crafted using the :mod:"
"`itertools` module: ``islice(count(start, step), (stop-"
"start+step-1+2*(step<0))//step)``."
msgstr ""
":func:`xrange` はシンプルさと速度のために定義されている関数であり、その実現の"
"ために実装上の制限を課している場合があります。 Python の C 実装では、全ての引"
"数をネイティブの C long 型 (Python の \"short\" 整数型) に制限しており、要素"
"数がネイティブの C long 型の範囲内に収まるよう要求しています。もし大きな範囲"
"が必要ならば、別の実装である :mod:`itertools` モジュールの、 "
"``islice(count(start, step), (stop-start+step-1+2*(step<0))//step)`` を使うの"
"が巧い方法かも知れません。"

#: ../../library/functions.rst:1594
msgid ""
"This function returns a list of tuples, where the *i*-th tuple contains the "
"*i*-th element from each of the argument sequences or iterables. The "
"returned list is truncated in length to the length of the shortest argument "
"sequence. When there are multiple arguments which are all of the same "
"length, :func:`zip` is similar to :func:`map` with an initial argument of "
"``None``. With a single sequence argument, it returns a list of 1-tuples. "
"With no arguments, it returns an empty list."
msgstr ""
"この関数はタプルのリストを返します。このリストの *i* 番目のタプルは各引数の"
"シーケンスまたはイテレート可能オブジェクト中の *i* 番目の要素を含みます。 返"
"されるリストは引数のシーケンスのうち長さが最小のものの長さに切り詰められま"
"す。引数が全て同じ長さの際には、 :func:`zip` は初期値引数が ``None`` の :"
"func:`map` と似ています。引数が単一のシーケンスの場合、1 要素のタプルからなる"
"リストを返します。引数を指定しない場合、空のリストを返します。"

#: ../../library/functions.rst:1602
msgid ""
"The left-to-right evaluation order of the iterables is guaranteed. This "
"makes possible an idiom for clustering a data series into n-length groups "
"using ``zip(*[iter(s)]*n)``."
msgstr ""
"イテラブルの左から右への評価順序が保証されます。そのため "
"``zip(*[iter(s)]*n)`` を使ってデータ系列を n 長のグループにクラスタリングでき"
"ます。"

#: ../../library/functions.rst:1606
msgid ""
":func:`zip` in conjunction with the ``*`` operator can be used to unzip a "
"list::"
msgstr ""
":func:`zip` に続けて ``*`` 演算子を使うと、zip したリストを元に戻せます::"

#: ../../library/functions.rst:1620
msgid ""
"Formerly, :func:`zip` required at least one argument and ``zip()`` raised a :"
"exc:`TypeError` instead of returning an empty list."
msgstr ""
"これまでは、 :func:`zip` は少なくとも一つの引数を要求しており、空のリストを返"
"す代わりに :exc:`TypeError` を送出していました。"

#: ../../library/functions.rst:1633
msgid ""
"This is an advanced function that is not needed in everyday Python "
"programming, unlike :func:`importlib.import_module`."
msgstr ""
"これは :func:`importlib.import_module` とは違い、日常の Python プログラミング"
"では必要ない高等な関数です。"

#: ../../library/functions.rst:1636
msgid ""
"This function is invoked by the :keyword:`import` statement.  It can be "
"replaced (by importing the :mod:`__builtin__` module and assigning to "
"``__builtin__.__import__``) in order to change semantics of the :keyword:"
"`import` statement, but nowadays it is usually simpler to use import hooks "
"(see :pep:`302`).  Direct use of :func:`__import__` is rare, except in cases "
"where you want to import a module whose name is only known at runtime."
msgstr ""
"この関数は :keyword:`import` ステートメントにより呼び出されます。これは (:"
"mod:`__builtin__` モジュールをインポートし、 ``__builtin__.__import__`` を割"
"り当てることで) :keyword:`import` ステートメントの意味を変更するための置き換"
"えが可能ですが、今では、フックをインポートするほうが、大抵の場合簡単です (:"
"pep:`302` を参照下さい)。 :func:`__import__` を直接使用することは稀で、例外"
"は、実行時に名前が決定するモジュールをインポートするときです。"

#: ../../library/functions.rst:1643
msgid ""
"The function imports the module *name*, potentially using the given "
"*globals* and *locals* to determine how to interpret the name in a package "
"context. The *fromlist* gives the names of objects or submodules that should "
"be imported from the module given by *name*.  The standard implementation "
"does not use its *locals* argument at all, and uses its *globals* only to "
"determine the package context of the :keyword:`import` statement."
msgstr ""
"この関数は、モジュール *name* をインポートし、 *globals* と *locals* が与えら"
"れれば、パッケージのコンテキストで名前をどう解釈するか決定するのに使います。 "
"*fromlist* は *name* で与えられるモジュールからインポートされるべきオブジェク"
"トまたはサブモジュールの名前を与ます。標準の実装では *locals* 引数はまったく"
"使われず、 *globals* は :keyword:`import` 文のパッケージコンテキストを決定す"
"るためにのみ使われます。"

#: ../../library/functions.rst:1650
msgid ""
"*level* specifies whether to use absolute or relative imports.  The default "
"is ``-1`` which indicates both absolute and relative imports will be "
"attempted.  ``0`` means only perform absolute imports.  Positive values for "
"*level* indicate the number of parent directories to search relative to the "
"directory of the module calling :func:`__import__`."
msgstr ""
"*level* は絶対、もしくは、相対のどちらのインポートを使うかを指定します。デ"
"フォルトは ``-1`` で絶対、相対インポートの両方を試みます。 ``0`` は絶対イン"
"ポートのみ実行します。正の *level* の値は、 :func:`__import__` を呼び出した"
"ディレクトリから検索対象となる親ディレクトリの階層を示します。"

#: ../../library/functions.rst:1656
msgid ""
"When the *name* variable is of the form ``package.module``, normally, the "
"top-level package (the name up till the first dot) is returned, *not* the "
"module named by *name*.  However, when a non-empty *fromlist* argument is "
"given, the module named by *name* is returned."
msgstr ""
"*name* 変数が ``package.module`` 形式であるとき、通常は、*name* で指名された"
"モジュール *ではなく*、最上位のパッケージ (最初のドットまでの名前) が返されま"
"す。しかしながら、空でない *fromlist* 引数が与えられると、 *name* で指名され"
"たモジュールが返されます。"

#: ../../library/functions.rst:1661
msgid ""
"For example, the statement ``import spam`` results in bytecode resembling "
"the following code::"
msgstr ""
"例えば、文 ``import spam`` は、以下のコードのようなバイトコードに帰結します::"

#: ../../library/functions.rst:1666
msgid "The statement ``import spam.ham`` results in this call::"
msgstr "文 ``import spam.ham`` は、この呼び出しになります::"

#: ../../library/functions.rst:1670
msgid ""
"Note how :func:`__import__` returns the toplevel module here because this is "
"the object that is bound to a name by the :keyword:`import` statement."
msgstr ""
"ここで :func:`__import__` がどのように最上位モジュールを返しているかに注意し"
"て下さい。 :keyword:`import` 文により名前が束縛されたオブジェクトになっていま"
"す。"

#: ../../library/functions.rst:1673
msgid ""
"On the other hand, the statement ``from spam.ham import eggs, sausage as "
"saus`` results in ::"
msgstr ""
"一方で、文 ``from spam.ham import eggs, sausage as saus`` は、以下となりま"
"す ::"

#: ../../library/functions.rst:1680
msgid ""
"Here, the ``spam.ham`` module is returned from :func:`__import__`.  From "
"this object, the names to import are retrieved and assigned to their "
"respective names."
msgstr ""
"ここで、:func:`__import__` から ``spam.ham`` モジュールが返されます。このオブ"
"ジェクトから、インポートされる名前が取り出され、それぞれの名前として代入され"
"ます。"

#: ../../library/functions.rst:1684
msgid ""
"If you simply want to import a module (potentially within a package) by "
"name, use :func:`importlib.import_module`."
msgstr ""
"単純に名前からモジュール (パッケージの範囲内であるかも知れません) をインポー"
"トしたいなら、 :func:`importlib.import_module` を使ってください。"

#: ../../library/functions.rst:1688
msgid "The level parameter was added."
msgstr "level パラメータが追加されました。"

#: ../../library/functions.rst:1691
msgid "Keyword support for parameters was added."
msgstr "Keyword サポートパラメータが追加されました。"

#: ../../library/functions.rst:1700
msgid "Non-essential Built-in Functions"
msgstr "非必須組み込み関数 (Non-essential Built-in Functions)"

#: ../../library/functions.rst:1702
msgid ""
"There are several built-in functions that are no longer essential to learn, "
"know or use in modern Python programming.  They have been kept here to "
"maintain backwards compatibility with programs written for older versions of "
"Python."
msgstr ""
"いくつかの組み込み関数は、現代的な Python プログラミングを行う場合には、必ず"
"しも学習したり、知っていたり、使ったりする必要がなくなりました。こうした関数"
"は古いバージョンの Python 向け書かれたプログラムとの互換性を維持するだけの目"
"的で残されています。"

#: ../../library/functions.rst:1706
msgid ""
"Python programmers, trainers, students and book writers should feel free to "
"bypass these functions without concerns about missing something important."
msgstr ""
"Python のプログラマ、教官、学生、そして本の著者は、こうした関数を飛ばしてもか"
"まわず、その際に何か重要なことを忘れていると思う必要もありません。"

#: ../../library/functions.rst:1712
msgid ""
"The *function* argument must be a callable object (a user-defined or built-"
"in function or method, or a class object) and the *args* argument must be a "
"sequence.  The *function* is called with *args* as the argument list; the "
"number of arguments is the length of the tuple. If the optional *keywords* "
"argument is present, it must be a dictionary whose keys are strings.  It "
"specifies keyword arguments to be added to the end of the argument list. "
"Calling :func:`apply` is different from just calling ``function(args)``, "
"since in that case there is always exactly one argument.  The use of :func:"
"`apply` is equivalent to ``function(*args, **keywords)``."
msgstr ""
"引数 *function* は呼び出しができるオブジェクト (ユーザ定義および組み込みの関"
"数またはメソッド、またはクラスオブジェクト) でなければなりません。 *args* は"
"シーケンス型でなくてはなりません。 *function* は引数リスト *args* を使って呼"
"び出されます; 引数の数はタプルの長さになります。オプションの引数 *keywords* "
"を与 える場合、 *keywords* は文字列のキーを持つ辞書でなければなりません。 こ"
"れは引数リストの最後に追加されるキーワード引数です。 :func:`apply` の呼び出し"
"は、単なる ``function(args)`` の呼び出しとは異なります。というのは、 :func:"
"`apply` の場合、引数は常に一つだからです。 :func:`apply` は "
"``function(*args, **keywords)`` を使うのと等価です。"

#: ../../library/functions.rst:1722
msgid ""
"Use ``function(*args, **keywords)`` instead of ``apply(function, args, "
"keywords)`` (see :ref:`tut-unpacking-arguments`)."
msgstr ""
"``apply(function, args, keywords)`` ではなく ``function(*args, **keywords)`` "
"を使ってください  (:ref:`tut-unpacking-arguments` 参照)。"

#: ../../library/functions.rst:1729
msgid ""
"The *object* argument must be an object that supports the buffer call "
"interface (such as strings, arrays, and buffers).  A new buffer object will "
"be created which references the *object* argument. The buffer object will be "
"a slice from the beginning of *object* (or from the specified *offset*). The "
"slice will extend to the end of *object* (or will have a length given by the "
"*size* argument)."
msgstr ""
"引数 *object* は (文字列、アレイ、バッファといった) バッファ呼び出しインタ"
"フェースをサポートするオブジェクトでなければなりません。引数 *object* を参照"
"する新たなバッファオブジェクトが生成されます。 返されるバッファオブジェクト"
"は *object* の先頭 (または *offset*) から のスライスになります。スライスの末"
"端は *object* の末端まで (または引数 *size* で与えられた長さになるまで) で"
"す。"

#: ../../library/functions.rst:1739
msgid ""
"Return a tuple consisting of the two numeric arguments converted to a common "
"type, using the same rules as used by arithmetic operations. If coercion is "
"not possible, raise :exc:`TypeError`."
msgstr ""
"二つの数値型の引数を共通の型に変換して、変換後の値からなるタプルを返します。"
"変換に使われる規則は算術演算における規則と同じです。型変換が不可能である場"
"合、 :exc:`TypeError` を送出します。"

#: ../../library/functions.rst:1746
msgid ""
"Enter *string* in the table of \"interned\" strings and return the interned "
"string -- which is *string* itself or a copy. Interning strings is useful to "
"gain a little performance on dictionary lookup -- if the keys in a "
"dictionary are interned, and the lookup key is interned, the key comparisons "
"(after hashing) can be done by a pointer compare instead of a string "
"compare.  Normally, the names used in Python programs are automatically "
"interned, and the dictionaries used to hold module, class or instance "
"attributes have interned keys."
msgstr ""
"*string* を \"隔離\" された文字列のテーブルに入力し、隔離された文字列を返しま"
"す -- この文字列は *string* 自体かコピーです。隔離された文字列は辞書検索のパ"
"フォーマンスを少しだけ向上させるのに有効です -- 辞書中のキーが隔離されてお"
"り、検索するキーが隔離されている場合、(ハッシュ化後の) キーの比較は文字列の比"
"較ではなくポインタの比較で行うことができるからです。通常、Python プログラム内"
"で利用されている名前は自動的に隔離され、モジュール、クラス、またはインスタン"
"ス属性を保持するための辞書は隔離されたキーを持っています。"

#: ../../library/functions.rst:1754
msgid ""
"Interned strings are not immortal (like they used to be in Python 2.2 and "
"before); you must keep a reference to the return value of :func:`intern` "
"around to benefit from it."
msgstr ""
"隔離された文字列の有効期限は (Python 2.2 またはそれ以前は永続的でしたが) 永続"
"的ではなくなりました; :func:`intern` の恩恵を受けるためには、 :func:`intern` "
"の返す値に対する参照を保持しなければなりません。"

#: ../../library/functions.rst:1760
msgid "Footnotes"
msgstr "脚注"

#: ../../library/functions.rst:1761
msgid ""
"It is used relatively rarely so does not warrant being made into a statement."
msgstr ""
"この関数は比較的利用されない関数なので、構文になるかどうかは保証できません。"

#: ../../library/functions.rst:1763
msgid ""
"Specifying a buffer size currently has no effect on systems that don't have :"
"c:func:`setvbuf`.  The interface to specify the buffer size is not done "
"using a method that calls :c:func:`setvbuf`, because that may dump core when "
"called after any I/O has been performed, and there's no reliable way to "
"determine whether this is the case."
msgstr ""
"現状では、 :c:func:`setvbuf` を持っていないシステムでは、バッファサイズを指定"
"しても効果はありません。バッファサイズを指定するためのインタフェースは :c:"
"func:`setvbuf` を使っては行われていません。何らかの I/O が実行された後で呼び"
"出されるとコアダンプすることがあり、どのような場合にそうなるかを決定する信頼"
"性のある方法がないからです。"

#: ../../library/functions.rst:1769
msgid ""
"In the current implementation, local variable bindings cannot normally be "
"affected this way, but variables retrieved from other scopes (such as "
"modules) can be.  This may change."
msgstr ""
"現在の実装では、ローカルな値のバインディングは通常は影響を受けませんが、 (モ"
"ジュールのような) 他のスコープから取り出した値は影響を受けるかもしれません。"
"またこの実装は変更されるかもしれません。"
