# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/functions.rst:5 ../../library/functions.rst:11
msgid "Built-in Functions"
msgstr "組み込み関数"

#: ../../library/functions.rst:7
msgid ""
"The Python interpreter has a number of functions and types built into it "
"that are always available.  They are listed here in alphabetical order."
msgstr ""
"Python インタプリタには数多くの関数と型が組み込まれており、いつでも利用できま"
"す。それらをここにアルファベット順に挙げます。"

#: ../../library/functions.rst:0
msgid "**A**"
msgstr "**A**"

#: ../../library/functions.rst:0
msgid ":func:`abs`"
msgstr ":func:`abs`"

#: ../../library/functions.rst:0
msgid ":func:`aiter`"
msgstr ":func:`aiter`"

#: ../../library/functions.rst:0
msgid ":func:`all`"
msgstr ":func:`all`"

#: ../../library/functions.rst:0
msgid ":func:`any`"
msgstr ":func:`any`"

#: ../../library/functions.rst:0
msgid ":func:`anext`"
msgstr ":func:`anext`"

#: ../../library/functions.rst:0
msgid ":func:`ascii`"
msgstr ":func:`ascii`"

#: ../../library/functions.rst:0
msgid "**B**"
msgstr "**B**"

#: ../../library/functions.rst:0
msgid ":func:`bin`"
msgstr ":func:`bin`"

#: ../../library/functions.rst:0
msgid ":func:`bool`"
msgstr ":func:`bool`"

#: ../../library/functions.rst:0
msgid ":func:`breakpoint`"
msgstr ":func:`breakpoint`"

#: ../../library/functions.rst:0
msgid "|func-bytearray|_"
msgstr "|func-bytearray|_"

#: ../../library/functions.rst:0
msgid "|func-bytes|_"
msgstr "|func-bytes|_"

#: ../../library/functions.rst:0
msgid "**C**"
msgstr "**C**"

#: ../../library/functions.rst:0
msgid ":func:`callable`"
msgstr ":func:`callable`"

#: ../../library/functions.rst:0
msgid ":func:`chr`"
msgstr ":func:`chr`"

#: ../../library/functions.rst:0
msgid ":func:`classmethod`"
msgstr ":func:`classmethod`"

#: ../../library/functions.rst:0
msgid ":func:`compile`"
msgstr ":func:`compile`"

#: ../../library/functions.rst:0
msgid ":func:`complex`"
msgstr ":func:`complex`"

#: ../../library/functions.rst:0
msgid "**D**"
msgstr "**D**"

#: ../../library/functions.rst:0
msgid ":func:`delattr`"
msgstr ":func:`delattr`"

#: ../../library/functions.rst:0
msgid "|func-dict|_"
msgstr "|func-dict|_"

#: ../../library/functions.rst:0
msgid ":func:`dir`"
msgstr ":func:`dir`"

#: ../../library/functions.rst:0
msgid ":func:`divmod`"
msgstr ":func:`divmod`"

#: ../../library/functions.rst:0
msgid "**E**"
msgstr "**E**"

#: ../../library/functions.rst:0
msgid ":func:`enumerate`"
msgstr ":func:`enumerate`"

#: ../../library/functions.rst:0
msgid ":func:`eval`"
msgstr ":func:`eval`"

#: ../../library/functions.rst:0
msgid ":func:`exec`"
msgstr ":func:`exec`"

#: ../../library/functions.rst:0
msgid "**F**"
msgstr "**F**"

#: ../../library/functions.rst:0
msgid ":func:`filter`"
msgstr ":func:`filter`"

#: ../../library/functions.rst:0
msgid ":func:`float`"
msgstr ":func:`float`"

#: ../../library/functions.rst:0
msgid ":func:`format`"
msgstr ":func:`format`"

#: ../../library/functions.rst:0
msgid "|func-frozenset|_"
msgstr "|func-frozenset|_"

#: ../../library/functions.rst:0
msgid "**G**"
msgstr "**G**"

#: ../../library/functions.rst:0
msgid ":func:`getattr`"
msgstr ":func:`getattr`"

#: ../../library/functions.rst:0
msgid ":func:`globals`"
msgstr ":func:`globals`"

#: ../../library/functions.rst:0
msgid "**H**"
msgstr "**H**"

#: ../../library/functions.rst:0
msgid ":func:`hasattr`"
msgstr ":func:`hasattr`"

#: ../../library/functions.rst:0
msgid ":func:`hash`"
msgstr ":func:`hash`"

#: ../../library/functions.rst:0
msgid ":func:`help`"
msgstr ":func:`help`"

#: ../../library/functions.rst:0
msgid ":func:`hex`"
msgstr ":func:`hex`"

#: ../../library/functions.rst:0
msgid "**I**"
msgstr "**I**"

#: ../../library/functions.rst:0
msgid ":func:`id`"
msgstr ":func:`id`"

#: ../../library/functions.rst:0
msgid ":func:`input`"
msgstr ":func:`input`"

#: ../../library/functions.rst:0
msgid ":func:`int`"
msgstr ":func:`int`"

#: ../../library/functions.rst:0
msgid ":func:`isinstance`"
msgstr ":func:`isinstance`"

#: ../../library/functions.rst:0
msgid ":func:`issubclass`"
msgstr ":func:`issubclass`"

#: ../../library/functions.rst:0
msgid ":func:`iter`"
msgstr ":func:`iter`"

#: ../../library/functions.rst:0
msgid "**L**"
msgstr "**L**"

#: ../../library/functions.rst:0
msgid ":func:`len`"
msgstr ":func:`len`"

#: ../../library/functions.rst:0
msgid "|func-list|_"
msgstr "|func-list|_"

#: ../../library/functions.rst:0
msgid ":func:`locals`"
msgstr ":func:`locals`"

#: ../../library/functions.rst:0
msgid "**M**"
msgstr "**M**"

#: ../../library/functions.rst:0
msgid ":func:`map`"
msgstr ":func:`map`"

#: ../../library/functions.rst:0
msgid ":func:`max`"
msgstr ":func:`max`"

#: ../../library/functions.rst:0
msgid "|func-memoryview|_"
msgstr "|func-memoryview|_"

#: ../../library/functions.rst:0
msgid ":func:`min`"
msgstr ":func:`min`"

#: ../../library/functions.rst:0
msgid "**N**"
msgstr "**N**"

#: ../../library/functions.rst:0
msgid ":func:`next`"
msgstr ":func:`next`"

#: ../../library/functions.rst:0
msgid "**O**"
msgstr "**O**"

#: ../../library/functions.rst:0
msgid ":func:`object`"
msgstr ":func:`object`"

#: ../../library/functions.rst:0
msgid ":func:`oct`"
msgstr ":func:`oct`"

#: ../../library/functions.rst:0
msgid ":func:`open`"
msgstr ":func:`open`"

#: ../../library/functions.rst:0
msgid ":func:`ord`"
msgstr ":func:`ord`"

#: ../../library/functions.rst:0
msgid "**P**"
msgstr "**P**"

#: ../../library/functions.rst:0
msgid ":func:`pow`"
msgstr ":func:`pow`"

#: ../../library/functions.rst:0
msgid ":func:`print`"
msgstr ":func:`print`"

#: ../../library/functions.rst:0
msgid ":func:`property`"
msgstr ":func:`property`"

#: ../../library/functions.rst:0
msgid "**R**"
msgstr "**R**"

#: ../../library/functions.rst:0
msgid "|func-range|_"
msgstr "|func-range|_"

#: ../../library/functions.rst:0
msgid ":func:`repr`"
msgstr ":func:`repr`"

#: ../../library/functions.rst:0
msgid ":func:`reversed`"
msgstr ":func:`reversed`"

#: ../../library/functions.rst:0
msgid ":func:`round`"
msgstr ":func:`round`"

#: ../../library/functions.rst:0
msgid "**S**"
msgstr "**S**"

#: ../../library/functions.rst:0
msgid "|func-set|_"
msgstr "|func-set|_"

#: ../../library/functions.rst:0
msgid ":func:`setattr`"
msgstr ":func:`setattr`"

#: ../../library/functions.rst:0
msgid ":func:`slice`"
msgstr ":func:`slice`"

#: ../../library/functions.rst:0
msgid ":func:`sorted`"
msgstr ":func:`sorted`"

#: ../../library/functions.rst:0
msgid ":func:`staticmethod`"
msgstr ":func:`staticmethod`"

#: ../../library/functions.rst:0
msgid "|func-str|_"
msgstr "|func-str|_"

#: ../../library/functions.rst:0
msgid ":func:`sum`"
msgstr ":func:`sum`"

#: ../../library/functions.rst:0
msgid ":func:`super`"
msgstr ":func:`super`"

#: ../../library/functions.rst:0
msgid "**T**"
msgstr "**T**"

#: ../../library/functions.rst:0
msgid "|func-tuple|_"
msgstr "|func-tuple|_"

#: ../../library/functions.rst:0
msgid ":func:`type`"
msgstr ":func:`type`"

#: ../../library/functions.rst:0
msgid "**V**"
msgstr "**V**"

#: ../../library/functions.rst:0
msgid ":func:`vars`"
msgstr ":func:`vars`"

#: ../../library/functions.rst:0
msgid "**Z**"
msgstr "**Z**"

#: ../../library/functions.rst:0
msgid ":func:`zip`"
msgstr ":func:`zip`"

#: ../../library/functions.rst:0
msgid "**_**"
msgstr "**_**"

#: ../../library/functions.rst:0
msgid ":func:`__import__`"
msgstr ":func:`__import__`"

#: ../../library/functions.rst:59
msgid ""
"Return the absolute value of a number.  The argument may be an integer, a "
"floating point number, or an object implementing :meth:`__abs__`. If the "
"argument is a complex number, its magnitude is returned."
msgstr ""
"数の絶対値を返します。引数は整数、浮動小数点数または :meth:`__abs__` が実装さ"
"れたオブジェクトです。引数が複素数なら、その絶対値 (magnitude) が返されます。"

#: ../../library/functions.rst:66
msgid ""
"Return an :term:`asynchronous iterator` for an :term:`asynchronous "
"iterable`. Equivalent to calling ``x.__aiter__()``."
msgstr ""
":term:`asynchronous iterable`から :term:`asynchronous iterator`を返します。"
"``x.__aiter__()``を呼び出すのと等価です。"

#: ../../library/functions.rst:69
msgid "Note: Unlike :func:`iter`, :func:`aiter` has no 2-argument variant."
msgstr "なお、:func:`iter`とは異なり、:func:`aiter`は第二引数を持ちません。"

#: ../../library/functions.rst:75
msgid ""
"Return ``True`` if all elements of the *iterable* are true (or if the "
"iterable is empty).  Equivalent to::"
msgstr ""
"*iterable* の全ての要素が真ならば (もしくは *iterable* が空ならば) ``True`` "
"を返します。以下のコードと等価です::"

#: ../../library/functions.rst:87
msgid ""
"When awaited, return the next item from the given :term:`asynchronous "
"iterator`, or *default* if given and the iterator is exhausted."
msgstr ""
"待ち受け中に、与えられた非同期イテレータ (:term:`asynchronous iterator`) を返"
"します。イテレータが枯渇した場合、 *default* が与えられていれば *default* を"
"返します。"

#: ../../library/functions.rst:90
msgid ""
"This is the async variant of the :func:`next` builtin, and behaves similarly."
msgstr ""
"これは組み込みの :func:`next` 関数の非同期版であり、同じように動作します。"

#: ../../library/functions.rst:93
msgid ""
"This calls the :meth:`~object.__anext__` method of *async_iterator*, "
"returning an :term:`awaitable`. Awaiting this returns the next value of the "
"iterator. If *default* is given, it is returned if the iterator is "
"exhausted, otherwise :exc:`StopAsyncIteration` is raised."
msgstr ""
"これは *async_iterator* の :meth:`~object.__anext__` メソッドを呼び出し、待ち"
"受け可能オブジェクト (:term:`awaitable`) を返します。待ち受けることによりイテ"
"レータの次の値を返します。 *default* が与えられた場合、イテレータが枯渇したと"
"きにその値が返されます。 *default* が与えられない場合は :exc:"
"`StopAsyncIteration` が送出されます。"

#: ../../library/functions.rst:102
msgid ""
"Return ``True`` if any element of the *iterable* is true.  If the iterable "
"is empty, return ``False``.  Equivalent to::"
msgstr ""
"*iterable* のいずれかの要素が真ならば ``True`` を返します。*iterable* が空な"
"ら ``False`` を返します。以下のコードと等価です::"

#: ../../library/functions.rst:114
msgid ""
"As :func:`repr`, return a string containing a printable representation of an "
"object, but escape the non-ASCII characters in the string returned by :func:"
"`repr` using ``\\x``, ``\\u``, or ``\\U`` escapes.  This generates a string "
"similar to that returned by :func:`repr` in Python 2."
msgstr ""
":func:`repr` と同様、オブジェクトの印字可能な表現を含む文字列を返しますが、:"
"func:`repr` によって返された文字列中の非 ASCII 文字は ``\\x`` 、 ``\\u`` 、 "
"``\\U`` エスケープを使ってエスケープされます。これは Python 2 の :func:"
"`repr` によって返されるのと同じ文字列を作ります。"

#: ../../library/functions.rst:122
msgid ""
"Convert an integer number to a binary string prefixed with \"0b\". The "
"result is a valid Python expression. If *x* is not a Python :class:`int` "
"object, it has to define an :meth:`__index__` method that returns an "
"integer. Some examples:"
msgstr ""
"整数を先頭に \"0b\" が付いた 2 進文字列に変換します。\n"
"結果は Python の式としても使える形式になります。\n"
" *x* が Python の :class:`int` オブジェクトでない場合、整数を返す :meth:"
"`__index__` メソッドが定義されていなければなりません。\n"
"いくつかの例を示します:"

#: ../../library/functions.rst:132
msgid ""
"If the prefix \"0b\" is desired or not, you can use either of the following "
"ways."
msgstr ""
"先頭に \"0b\" が付いて欲しい、もしくは付いて欲しくない場合には、次の方法のど"
"ちらでも使えます。"

#: ../../library/functions.rst:139 ../../library/functions.rst:811
#: ../../library/functions.rst:1115
msgid "See also :func:`format` for more information."
msgstr "より詳しいことは :func:`format` も参照してください。"

#: ../../library/functions.rst:144
msgid ""
"Return a Boolean value, i.e. one of ``True`` or ``False``.  *x* is converted "
"using the standard :ref:`truth testing procedure <truth>`.  If *x* is false "
"or omitted, this returns ``False``; otherwise, it returns ``True``.  The :"
"class:`bool` class is a subclass of :class:`int` (see :ref:`typesnumeric`). "
"It cannot be subclassed further.  Its only instances are ``False`` and "
"``True`` (see :ref:`bltin-boolean-values`)."
msgstr ""
"真偽値、すなわち ``True`` か ``False`` のいずれかを返します。 *x* は標準の :"
"ref:`真偽値判定手続き <truth>` を用いて変換されます。 *x* が偽かまたは省略さ"
"れた場合、この関数は ``False`` を返します。それ以外の場合は ``True`` を返しま"
"す。 :class:`bool` クラスは :class:`int` クラスの派生クラスです (:ref:"
"`typesnumeric` を参照してください)。このクラスからさらに派生することはできま"
"せん。このクラスのインスタンスは ``False`` と ``True`` の身です (:ref:`bltin-"
"boolean-values` を参照してください)。"

#: ../../library/functions.rst:153 ../../library/functions.rst:678
#: ../../library/functions.rst:895
msgid "*x* is now a positional-only parameter."
msgstr "*x* は位置専用引数になりました。"

#: ../../library/functions.rst:158
msgid ""
"This function drops you into the debugger at the call site.  Specifically, "
"it calls :func:`sys.breakpointhook`, passing ``args`` and ``kws`` straight "
"through.  By default, ``sys.breakpointhook()`` calls :func:`pdb.set_trace()` "
"expecting no arguments.  In this case, it is purely a convenience function "
"so you don't have to explicitly import :mod:`pdb` or type as much code to "
"enter the debugger.  However, :func:`sys.breakpointhook` can be set to some "
"other function and :func:`breakpoint` will automatically call that, allowing "
"you to drop into the debugger of choice. If :func:`sys.breakpointhook` is "
"not accessible, this function will raise :exc:`RuntimeError`."
msgstr ""
"この関数は、呼び出された箇所から処理をデバッガに移行します。より具体的には、"
"この関数は :func:`sys.breakpointhook` を ``args`` と ``kws`` をそのまま渡して"
"呼び出します。デフォルトでは、 ``sys.breakpointhook()`` は引数なしで :func:"
"`pdb.set_trace()` を呼び出すだけです。そのような場合、この関数は :mod:`pdb` "
"を明示的にインポートしたり、デバッガに処理を移行するためのコードを書いたりし"
"なくても済むようにするだけの、ただの便利な関数です。しかし :func:`sys."
"breakpointhook` を別の関数に設定して :func:`breakpoint` が自動的に呼び出させ"
"るようにすると、自分好みのデバッガに処理を移行させることができます。 :func:"
"`sys.breakpointhook` にアクセスできない場合、この関数は :exc:`RuntimeError` "
"を送出します。"

#: ../../library/functions.rst:170
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.breakpoint`` with "
"argument ``breakpointhook``."
msgstr ""
"引数 ``breakpointhook`` 付きで :ref:`監査イベント <auditing>` ``builtins."
"breakpoint`` を送出します。"

#: ../../library/functions.rst:178
msgid ""
"Return a new array of bytes.  The :class:`bytearray` class is a mutable "
"sequence of integers in the range 0 <= x < 256.  It has most of the usual "
"methods of mutable sequences, described in :ref:`typesseq-mutable`, as well "
"as most methods that the :class:`bytes` type has, see :ref:`bytes-methods`."
msgstr ""
"新しいバイト配列を返します。:class:`bytearray` クラスは0 <= x < 256の範囲の整"
"数からなる変更可能な配列です。:ref:`typesseq-mutable` に記述されている変更可"
"能な配列に対する普通のメソッドの大半を備えています。また、:class:`bytes` 型が"
"持つメソッドの大半も備えています（see :ref:`bytes-methods`)。"

#: ../../library/functions.rst:183
msgid ""
"The optional *source* parameter can be used to initialize the array in a few "
"different ways:"
msgstr ""
"オプションの *source* 引数は、配列を異なる方法で初期化するのに使われます:"

#: ../../library/functions.rst:186
msgid ""
"If it is a *string*, you must also give the *encoding* (and optionally, "
"*errors*) parameters; :func:`bytearray` then converts the string to bytes "
"using :meth:`str.encode`."
msgstr ""
"*文字列* の場合、 *encoding* (と、オプションの *errors*) 引数も与えなければな"
"りません。このとき :func:`bytearray` は文字列を :meth:`str.encode` でバイトに"
"変換して返します。"

#: ../../library/functions.rst:190
msgid ""
"If it is an *integer*, the array will have that size and will be initialized "
"with null bytes."
msgstr "*整数* の場合、配列はそのサイズになり、null バイトで初期化されます。"

#: ../../library/functions.rst:193
msgid ""
"If it is an object conforming to the :ref:`buffer interface "
"<bufferobjects>`, a read-only buffer of the object will be used to "
"initialize the bytes array."
msgstr ""
":ref:`バッファインターフェース <bufferobjects>` に適合するオブジェクトの場"
"合、そのオブジェクトの読み出し専用バッファがバイト配列の初期化に使われます。"

#: ../../library/functions.rst:196
msgid ""
"If it is an *iterable*, it must be an iterable of integers in the range ``0 "
"<= x < 256``, which are used as the initial contents of the array."
msgstr ""
"*イテラブル* の場合、範囲 ``0 <= x < 256`` 内の整数のイテラブルでなければなら"
"ず、それらが配列の初期の内容として使われます。"

#: ../../library/functions.rst:199
msgid "Without an argument, an array of size 0 is created."
msgstr "引数がなければ、長さ 0 の配列が生成されます。"

#: ../../library/functions.rst:201
msgid "See also :ref:`binaryseq` and :ref:`typebytearray`."
msgstr ":ref:`binaryseq` と :ref:`typebytearray` も参照してください。"

#: ../../library/functions.rst:208
msgid ""
"Return a new \"bytes\" object which is an immutable sequence of integers in "
"the range ``0 <= x < 256``.  :class:`bytes` is an immutable version of :"
"class:`bytearray` -- it has the same non-mutating methods and the same "
"indexing and slicing behavior."
msgstr ""
"範囲 ``0 <= x < 256`` の整数のイミュータブルなシーケンスである \"bytes\" オブ"
"ジェクトを返します。 :class:`bytes` は :class:`bytearray` のイミュータブル版"
"であり、オブジェクトを変化させないメソッドや、インデックス指定、オブジェクト"
"のスライスについてのふるまいは同じです。"

#: ../../library/functions.rst:213
msgid ""
"Accordingly, constructor arguments are interpreted as for :func:`bytearray`."
msgstr ""
"従って、コンストラクタ引数は :func:`bytearray` のものと同様に解釈されます。"

#: ../../library/functions.rst:215
msgid "Bytes objects can also be created with literals, see :ref:`strings`."
msgstr ""
"バイト列オブジェクトはリテラルでも生成できます。 :ref:`strings` を参照してく"
"ださい。"

#: ../../library/functions.rst:217
msgid "See also :ref:`binaryseq`, :ref:`typebytes`, and :ref:`bytes-methods`."
msgstr ""
":ref:`binaryseq`, :ref:`typebytes`, :ref:`bytes-methods` も参照してください。"

#: ../../library/functions.rst:222
msgid ""
"Return :const:`True` if the *object* argument appears callable, :const:"
"`False` if not.  If this returns ``True``, it is still possible that a call "
"fails, but if it is ``False``, calling *object* will never succeed. Note "
"that classes are callable (calling a class returns a new instance); "
"instances are callable if their class has a :meth:`__call__` method."
msgstr ""
"*object* 引数が呼び出し可能オブジェクトであれば :const:`True` を、そうでなけ"
"れば :const:`False` を返します。この関数が ``True`` を返しても、呼び出しは失"
"敗する可能性がありますが、``False`` であれば、 *object* の呼び出しは決して成"
"功しません。なお、クラスは呼び出し可能 (クラスを呼び出すと新しいインスタンス"
"を返します) です。また、インスタンスはクラスが :meth:`__call__` メソッドを持"
"つなら呼び出し可能です。"

#: ../../library/functions.rst:228
msgid ""
"This function was first removed in Python 3.0 and then brought back in "
"Python 3.2."
msgstr ""
"この関数は Python 3.0 で一度取り除かれましたが、Python 3.2 で復活しました。"

#: ../../library/functions.rst:235
msgid ""
"Return the string representing a character whose Unicode code point is the "
"integer *i*.  For example, ``chr(97)`` returns the string ``'a'``, while "
"``chr(8364)`` returns the string ``'€'``. This is the inverse of :func:`ord`."
msgstr ""
"Unicode コードポイントが整数 *i* である文字を表す文字列を返します。例えば "
"``chr(97)`` は文字列 ``'a'`` を、 ``chr(8364)`` は文字列 ``'€'`` を返しま"
"す。 :func:`ord` の逆です。"

#: ../../library/functions.rst:239
msgid ""
"The valid range for the argument is from 0 through 1,114,111 (0x10FFFF in "
"base 16).  :exc:`ValueError` will be raised if *i* is outside that range."
msgstr ""
"引数の有効な範囲は 0 から 1,114,111 (16 進数で 0x10FFFF) です。 *i* が範囲外"
"の場合 :exc:`ValueError` が送出されます。"

#: ../../library/functions.rst:245
msgid "Transform a method into a class method."
msgstr "メソッドをクラスメソッドへ変換します。"

#: ../../library/functions.rst:247
msgid ""
"A class method receives the class as an implicit first argument, just like "
"an instance method receives the instance. To declare a class method, use "
"this idiom::"
msgstr ""
"クラスメソッドは、インスタンスメソッドが暗黙の第一引数としてインスタンスをと"
"るように、第一引数としてクラスをとります。クラスメソッドを宣言するには、以下"
"のイディオムを使います::"

#: ../../library/functions.rst:255
msgid ""
"The ``@classmethod`` form is a function :term:`decorator` -- see :ref:"
"`function` for details."
msgstr ""
"``@classmethod`` 形式は関数 :term:`デコレータ <decorator>` です。詳しくは :"
"ref:`function` を参照してください。"

#: ../../library/functions.rst:258
msgid ""
"A class method can be called either on the class (such as ``C.f()``) or on "
"an instance (such as ``C().f()``).  The instance is ignored except for its "
"class. If a class method is called for a derived class, the derived class "
"object is passed as the implied first argument."
msgstr ""
"クラスメソッドは、(``C.f()`` のように) クラスから呼び出すことも、(``C()."
"f()`` のように) インスタンスから呼び出すこともできます。\n"
"インスタンスはそのクラスが何であるかを除いて無視されます。\n"
"クラスメソッドが派生クラスから呼び出される場合は、その派生クラスオブジェクト"
"が暗黙の第一引数として渡されます。"

#: ../../library/functions.rst:263
msgid ""
"Class methods are different than C++ or Java static methods. If you want "
"those, see :func:`staticmethod` in this section. For more information on "
"class methods, see :ref:`types`."
msgstr ""
"クラスメソッドは C++ や Java の静的メソッドとは異なります。静的メソッドは、こ"
"の節の :func:`staticmethod` を参照してください。クラスメソッドについてより詳"
"しいことは  :ref:`types` を参照してください。"

#: ../../library/functions.rst:267
msgid ""
"Class methods can now wrap other :term:`descriptors <descriptor>` such as :"
"func:`property`."
msgstr ""
"クラスメソッドは :func:`property` など、他の :term:`デスクリプタ "
"<descriptor>` をラップすることができるようになりました。"

#: ../../library/functions.rst:271
msgid ""
"Class methods now inherit the method attributes (``__module__``, "
"``__name__``, ``__qualname__``, ``__doc__`` and ``__annotations__``) and "
"have a new ``__wrapped__`` attribute."
msgstr ""
"クラスメソッドはメソッド属性 (``__module__``, ``__name__``, "
"``__qualname__``, ``__doc__`` や ``__annotations__``) を引き継ぐようになりま"
"した。また、新たに ``__wrapped__`` 属性を持つようになりました。"

#: ../../library/functions.rst:278
msgid ""
"Compile the *source* into a code or AST object.  Code objects can be "
"executed by :func:`exec` or :func:`eval`.  *source* can either be a normal "
"string, a byte string, or an AST object.  Refer to the :mod:`ast` module "
"documentation for information on how to work with AST objects."
msgstr ""
"*source* をコードオブジェクト、もしくは、 AST オブジェクトにコンパイルしま"
"す。 コードオブジェクトは :func:`exec` 文で実行したり、 :func:`eval` 呼び出し"
"で評価できます。 *source* は通常の文字列、 バイト列、 AST オブジェクトのいず"
"れでもかまいません。 AST オブジェクトへの、また、 AST オブジェクトからのコン"
"パイルの方法は、 :mod:`ast` モジュールのドキュメントを参照してください。"

#: ../../library/functions.rst:283
msgid ""
"The *filename* argument should give the file from which the code was read; "
"pass some recognizable value if it wasn't read from a file (``'<string>'`` "
"is commonly used)."
msgstr ""
"*filename* 引数には、コードの読み出し元のファイルを与えなければなりません; "
"ファイルから読み出されるのでなければ、認識可能な値を渡して下さい "
"(``'<string>'`` が一般的に使われます)。"

#: ../../library/functions.rst:287
msgid ""
"The *mode* argument specifies what kind of code must be compiled; it can be "
"``'exec'`` if *source* consists of a sequence of statements, ``'eval'`` if "
"it consists of a single expression, or ``'single'`` if it consists of a "
"single interactive statement (in the latter case, expression statements that "
"evaluate to something other than ``None`` will be printed)."
msgstr ""
"*mode* 引数は、コンパイルされるコードの種類を指定します; *source* が一連の文"
"から成るなら ``'exec'`` 、単一の式から成るなら ``'eval'`` 、単一の対話的文の"
"場合 ``'single'`` です。(後者の場合、評価が ``None`` 以外である式文が印字され"
"ます)。"

#: ../../library/functions.rst:293
msgid ""
"The optional arguments *flags* and *dont_inherit* control which :ref:"
"`compiler options <ast-compiler-flags>` should be activated and which :ref:"
"`future features <future>` should be allowed. If neither is present (or both "
"are zero) the code is compiled with the same flags that affect the code that "
"is calling :func:`compile`. If the *flags* argument is given and "
"*dont_inherit* is not (or is zero) then the compiler options and the future "
"statements specified by the *flags* argument are used in addition to those "
"that would be used anyway. If *dont_inherit* is a non-zero integer then the "
"*flags* argument is it -- the flags (future features and compiler options) "
"in the surrounding code are ignored."
msgstr ""
"オプション引数 *flags* と *dont_inherit* は、どの :ref:`コンパイラオプション "
"<ast-compiler-flags>` を有効化するか、 :ref:`将来の機能 <future>` のどれを許"
"可するかを制御します。どちらの引数も存在しない (またはどちらもゼロである) 場"
"合は、 :func:`compile` の呼び出し元のコードに作用したものと同じフラグでコンパ"
"イルされます。 *flags* 引数が与えられて *dont_inherit* が与えられない (または"
"ゼロ) の場合、上記に加えて *flags* 引数で与えられたコンパイラオプションと "
"future 文が使われます。 *dont_inherit* がゼロでない整数の場合、 *flags* 引数"
"で指定されたオプションだけが有効です -- 呼び出し元コードに適用されたフラグ "
"(将来の機能とコンパイラオプション) は無視されます。"

#: ../../library/functions.rst:304
msgid ""
"Compiler options and future statements are specified by bits which can be "
"bitwise ORed together to specify multiple options. The bitfield required to "
"specify a given future feature can be found as the :attr:`~__future__."
"_Feature.compiler_flag` attribute on the :class:`~__future__._Feature` "
"instance in the :mod:`__future__` module. :ref:`Compiler flags <ast-compiler-"
"flags>` can be found in :mod:`ast` module, with ``PyCF_`` prefix."
msgstr ""
"有効化するコンパイラオプションと future 文はビットフィールドで指定可能で、"
"ビット単位の OR をとることで複数のオプションを一緒に指定することができます。"
"特定の future 機能を指定するために必要なビットフィールドの情報は、 :mod:"
"`__future__` モジュールにおける :class:`~__future__._Feature` インスタンス"
"の :attr:`~__future__._Feature.compiler_flag` 属性で得ることができます。 :"
"ref:`コンパイラフラグ <ast-compiler-flags>` の情報は :mod:`ast` モジュールの "
"``PyCF_`` で始まるフラグで得ることができます。"

#: ../../library/functions.rst:312
msgid ""
"The argument *optimize* specifies the optimization level of the compiler; "
"the default value of ``-1`` selects the optimization level of the "
"interpreter as given by :option:`-O` options.  Explicit levels are ``0`` (no "
"optimization; ``__debug__`` is true), ``1`` (asserts are removed, "
"``__debug__`` is false) or ``2`` (docstrings are removed too)."
msgstr ""
"引数 *optimize* は、コンパイラの最適化レベルを指定します; デフォルトの値 "
"``-1`` は、インタプリタの :option:`-O` オプションで与えられるのと同じ最適化レ"
"ベルを選びます。明示的なレベルは、 ``0`` (最適化なし、 ``__debug__`` は真)、 "
"``1`` (assert は取り除かれ、 ``__debug__`` は偽)、 ``2`` (docstring も取り除"
"かれる) です。"

#: ../../library/functions.rst:318
msgid ""
"This function raises :exc:`SyntaxError` if the compiled source is invalid, "
"and :exc:`ValueError` if the source contains null bytes."
msgstr ""
"この関数は、コンパイルされたソースが不正である場合 :exc:`SyntaxError` を、"
"ソースがヌルバイトを含む場合 :exc:`ValueError` を送出します。"

#: ../../library/functions.rst:321
msgid ""
"If you want to parse Python code into its AST representation, see :func:`ast."
"parse`."
msgstr ""
"Python コードをパースしてその AST 表現を得たいのであれば、 :func:`ast.parse` "
"を参照してください。"

#: ../../library/functions.rst:324
msgid ""
"Raises an :ref:`auditing event <auditing>` ``compile`` with arguments "
"``source``, ``filename``."
msgstr ""
"引数 ``source``, ``filename`` を指定して :ref:`監査イベント <auditing>` "
"``compile`` を送出します。 "

#: ../../library/functions.rst:326
msgid ""
"Raises an :ref:`auditing event <auditing>` ``compile`` with arguments "
"``source`` and ``filename``. This event may also be raised by implicit "
"compilation."
msgstr ""
"引数 ``source`` と ``filename`` を指定して :ref:`監査イベント <auditing>` "
"``compile`` を送出します。これは、暗黙に行われるコンパイルでも送出される可能"
"性があります。"

#: ../../library/functions.rst:332
msgid ""
"When compiling a string with multi-line code in ``'single'`` or ``'eval'`` "
"mode, input must be terminated by at least one newline character.  This is "
"to facilitate detection of incomplete and complete statements in the :mod:"
"`code` module."
msgstr ""
"複数行に渡るコードの文字列を ``'single'`` や ``'eval'`` モードでコンパイルす"
"るとき、入力は一つ以上の改行文字で終端されなければなりません。これは、 :mod:"
"`code` モジュールで不完全な文と完全な文を検知しやすくするためです。"

#: ../../library/functions.rst:339
msgid ""
"It is possible to crash the Python interpreter with a sufficiently large/"
"complex string when compiling to an AST object due to stack depth "
"limitations in Python's AST compiler."
msgstr ""
"AST オブジェクトにコンパイルしているときに、十分に大きい文字列や複雑な文字列"
"によって Python の抽象構文木コンパイラのスタックが深さの限界を越えることで、 "
"Python インタプリタをクラッシュさせられます。"

#: ../../library/functions.rst:343
msgid ""
"Allowed use of Windows and Mac newlines.  Also, input in ``'exec'`` mode "
"does not have to end in a newline anymore.  Added the *optimize* parameter."
msgstr ""
"Windows や Mac の改行も受け付けます。また ``'exec'`` モードでの入力が改行で終"
"わっている必要もありません。*optimize* 引数が追加されました。"

#: ../../library/functions.rst:347
msgid ""
"Previously, :exc:`TypeError` was raised when null bytes were encountered in "
"*source*."
msgstr ""
"以前は *source* にヌルバイトがあったときに :exc:`TypeError` を送出していまし"
"た。"

#: ../../library/functions.rst:351
msgid ""
"``ast.PyCF_ALLOW_TOP_LEVEL_AWAIT`` can now be passed in flags to enable "
"support for top-level ``await``, ``async for``, and ``async with``."
msgstr ""
"``ast.PyCF_ALLOW_TOP_LEVEL_AWAIT`` フラグを渡してトップレベルの ``await``, "
"``async for``, および ``async with`` のサポートを有効化することができるように"
"なりました。"

#: ../../library/functions.rst:358
msgid ""
"Return a complex number with the value *real* + *imag*\\*1j or convert a "
"string or number to a complex number.  If the first parameter is a string, "
"it will be interpreted as a complex number and the function must be called "
"without a second parameter.  The second parameter can never be a string. "
"Each argument may be any numeric type (including complex).  If *imag* is "
"omitted, it defaults to zero and the constructor serves as a numeric "
"conversion like :class:`int` and :class:`float`.  If both arguments are "
"omitted, returns ``0j``."
msgstr ""
"値 *real* + *imag*\\*1j の複素数を返すか、文字列や数を複素数に変換します。第"
"一引数が文字列なら、それが複素数と解釈され、この関数は第二引数無しで呼び出さ"
"れなければなりません。第二引数は文字列であってはなりません。それぞれの引数は "
"(複素数を含む) 任意の数値型です。 *imag* が省略された場合、標準の値はゼロで、"
"このコンストラクタは :class:`int` や :class:`float` のような数値変換としては"
"たらきます。両方の引数が省略された場合、 ``0j`` を返します。"

#: ../../library/functions.rst:367
msgid ""
"For a general Python object ``x``, ``complex(x)`` delegates to ``x."
"__complex__()``.  If ``__complex__()`` is not defined then it falls back to :"
"meth:`__float__`.  If ``__float__()`` is not defined then it falls back to :"
"meth:`__index__`."
msgstr ""
"一般的な Python オブジェクト ``x`` に対して、 ``complex(x)`` は ``x."
"__complex__()`` に処理を委譲します。 ``__complex__()`` が定義されていない場合"
"は :meth:`__float__` にフォールバックします。 ``__float__()`` も定義されてい"
"ない場合は :meth:`__index__` にフォールバックします。"

#: ../../library/functions.rst:374
msgid ""
"When converting from a string, the string must not contain whitespace around "
"the central ``+`` or ``-`` operator.  For example, ``complex('1+2j')`` is "
"fine, but ``complex('1 + 2j')`` raises :exc:`ValueError`."
msgstr ""
"文字列から変換するとき、その文字列は中央の ``+`` や ``-`` 演算子の周りに空白"
"を含んではなりません。例えば、``complex('1+2j')`` はいいですが、``complex('1 "
"+ 2j')`` は :exc:`ValueError` を送出します。"

#: ../../library/functions.rst:379
msgid "The complex type is described in :ref:`typesnumeric`."
msgstr "複素数型については :ref:`typesnumeric` に説明があります。"

#: ../../library/functions.rst:381 ../../library/functions.rst:675
#: ../../library/functions.rst:892
msgid "Grouping digits with underscores as in code literals is allowed."
msgstr "コードリテラル中で桁をグループ化するのにアンダースコアを利用できます。"

#: ../../library/functions.rst:384
msgid ""
"Falls back to :meth:`__index__` if :meth:`__complex__` and :meth:`__float__` "
"are not defined."
msgstr ""
":meth:`__complex__` と :meth:`__float__` が定義されていない場合、:meth:"
"`__index__` へフォールバックします。"

#: ../../library/functions.rst:391
msgid ""
"This is a relative of :func:`setattr`.  The arguments are an object and a "
"string.  The string must be the name of one of the object's attributes.  The "
"function deletes the named attribute, provided the object allows it.  For "
"example, ``delattr(x, 'foobar')`` is equivalent to ``del x.foobar``. *name* "
"need not be a Python identifier (see :func:`setattr`)."
msgstr ""
":func:`setattr` の親戚です。引数はオブジェクトと文字列です。文字列はオブジェ"
"クトの属性名のいずれかでなければなりません。対象のオブジェクトが許可する場合"
"に限り、この関数は指定された名前の属性を削除します。たとえば、 ``delattr(x, "
"'foobar')`` は ``del x.foobar`` と等価です。 *name* は Python の識別子である"
"必要はありません (:func:`setattr` を参照してください)。"

#: ../../library/functions.rst:404
msgid ""
"Create a new dictionary.  The :class:`dict` object is the dictionary class. "
"See :class:`dict` and :ref:`typesmapping` for documentation about this class."
msgstr ""
"新しい辞書を作成します。 :class:`dict` オブジェクトは辞書クラスです。このクラ"
"スに関するドキュメンテーションは :class:`dict` と :ref:`typesmapping` を参照"
"してください。"

#: ../../library/functions.rst:407
msgid ""
"For other containers see the built-in :class:`list`, :class:`set`, and :"
"class:`tuple` classes, as well as the :mod:`collections` module."
msgstr ""
"他のコンテナについては、 ビルトインの :class:`list`, :class:`set`, :class:"
"`tuple` クラスおよび :mod:`collections` モジュールを参照してください。"

#: ../../library/functions.rst:413
msgid ""
"Without arguments, return the list of names in the current local scope.  "
"With an argument, attempt to return a list of valid attributes for that "
"object."
msgstr ""
"引数がない場合、現在のローカルスコープにある名前のリストを返します。引数があ"
"る場合、そのオブジェクトの有効な属性のリストを返そうと試みます。"

#: ../../library/functions.rst:416
msgid ""
"If the object has a method named :meth:`__dir__`, this method will be called "
"and must return the list of attributes. This allows objects that implement a "
"custom :func:`__getattr__` or :func:`__getattribute__` function to customize "
"the way :func:`dir` reports their attributes."
msgstr ""
"オブジェクトが :meth:`__dir__` という名のメソッドを持つなら、そのメソッドが呼"
"び出され、属性のリストを返さなければなりません。これにより、カスタムの :func:"
"`__getattr__` や :func:`__getattribute__` 関数を実装するオブジェクトは、:"
"func:`dir` が属性を報告するやり方をカスタマイズできます。"

#: ../../library/functions.rst:421
msgid ""
"If the object does not provide :meth:`__dir__`, the function tries its best "
"to gather information from the object's :attr:`~object.__dict__` attribute, "
"if defined, and from its type object.  The resulting list is not necessarily "
"complete and may be inaccurate when the object has a custom :func:"
"`__getattr__`."
msgstr ""
"オブジェクトが :meth:`__dir__` を提供しない場合、その型オブジェクトと、定義さ"
"れていればオブジェクトの :attr:`~object.__dict__` 属性から、できるだけ情報を"
"集めようとします。結果のリストは必ずしも完全ではなく、カスタムの :func:"
"`__getattr__` を持つ場合は不正確かもしれません。"

#: ../../library/functions.rst:426
msgid ""
"The default :func:`dir` mechanism behaves differently with different types "
"of objects, as it attempts to produce the most relevant, rather than "
"complete, information:"
msgstr ""
"デフォルトの :func:`dir` メカニズムは、完全というより最重要な情報を作成しよう"
"とするため、異なる型のオブジェクトでは異なって振る舞います:"

#: ../../library/functions.rst:430
msgid ""
"If the object is a module object, the list contains the names of the "
"module's attributes."
msgstr ""
"オブジェクトがモジュールオブジェクトの場合、リストにはモジュールの属性の名前"
"が含まれます。"

#: ../../library/functions.rst:433
msgid ""
"If the object is a type or class object, the list contains the names of its "
"attributes, and recursively of the attributes of its bases."
msgstr ""
"オブジェクトが型オブジェクトやクラスオブジェクトの場合、リストにはその属性の"
"名前と、再帰的にたどったその基底クラスの属性が含まれます。"

#: ../../library/functions.rst:436
msgid ""
"Otherwise, the list contains the object's attributes' names, the names of "
"its class's attributes, and recursively of the attributes of its class's "
"base classes."
msgstr ""
"それ以外の場合には、リストにはオブジェクトの属性名、クラス属性名、再帰的にた"
"どった基底クラスの属性名が含まれます。"

#: ../../library/functions.rst:440
msgid "The resulting list is sorted alphabetically.  For example:"
msgstr "返されるリストはアルファベット順に並べられています。例えば:"

#: ../../library/functions.rst:459
msgid ""
"Because :func:`dir` is supplied primarily as a convenience for use at an "
"interactive prompt, it tries to supply an interesting set of names more than "
"it tries to supply a rigorously or consistently defined set of names, and "
"its detailed behavior may change across releases.  For example, metaclass "
"attributes are not in the result list when the argument is a class."
msgstr ""
":func:`dir` は主に対話プロンプトでの使用に便利なように提供されているので、厳"
"密性や一貫性を重視して定義された名前のセットというよりも、むしろ興味を引くよ"
"うな名前のセットを返そうとします。また、この関数の細かい動作はリリース間で変"
"わる可能性があります。例えば、引数がクラスであるとき、メタクラス属性は結果の"
"リストに含まれません。"

#: ../../library/functions.rst:469
msgid ""
"Take two (non-complex) numbers as arguments and return a pair of numbers "
"consisting of their quotient and remainder when using integer division.  "
"With mixed operand types, the rules for binary arithmetic operators apply.  "
"For integers, the result is the same as ``(a // b, a % b)``. For floating "
"point numbers the result is ``(q, a % b)``, where *q* is usually ``math."
"floor(a / b)`` but may be 1 less than that.  In any case ``q * b + a % b`` "
"is very close to *a*, if ``a % b`` is non-zero it has the same sign as *b*, "
"and ``0 <= abs(a % b) < abs(b)``."
msgstr ""
"2つの (複素数でない) 数を引数としてとり、整数の除法を行ったときの商と剰余から"
"なる2つの数のペアを返します。被演算子の型が混ざっている場合、二項算術演算子で"
"の規則が適用されます。整数に対する結果は ``(a // b, a % b)`` と同じです。浮動"
"小数点数では、結果は ``(q, a % b)`` とあらわされます。ただし *q* は通常 "
"``math.floor(a / b)`` で、それより 1 だけ小さくなることもあります。いずれにせ"
"よ ``q * b + a % b`` は *a* に非常に近い値になります。もし ``a % b`` がゼロで"
"ないときは、その符号は *b* と同じであり、かつ ``0 <= abs(a % b) < abs(b)`` を"
"満たします。"

#: ../../library/functions.rst:481
msgid ""
"Return an enumerate object. *iterable* must be a sequence, an :term:"
"`iterator`, or some other object which supports iteration. The :meth:"
"`~iterator.__next__` method of the iterator returned by :func:`enumerate` "
"returns a tuple containing a count (from *start* which defaults to 0) and "
"the values obtained from iterating over *iterable*."
msgstr ""
"enumerate オブジェクトを返します。 *iterable* は、シーケンスか :term:"
"`iterator` か、あるいはイテレーションをサポートするその他のオブジェクトでなけ"
"ればなりません。 :func:`enumerate` によって返されたイテレータの :meth:"
"`~iterator.__next__` メソッドは、 (デフォルトでは 0 となる *start* からの) カ"
"ウントと、 *iterable* 上のイテレーションによって得られた値を含むタプルを返し"
"ます。"

#: ../../library/functions.rst:493
msgid "Equivalent to::"
msgstr "次と等価です::"

#: ../../library/functions.rst:504
msgid ""
"The arguments are a string and optional globals and locals.  If provided, "
"*globals* must be a dictionary.  If provided, *locals* can be any mapping "
"object."
msgstr ""
"文字列とオプションの引数 *globals*、*locals* をとります。*globals* を与える場"
"合は辞書でなくてはなりません。*locals* を与える場合は任意のマッピングオブジェ"
"クトにできます。"

#: ../../library/functions.rst:508
msgid ""
"The *expression* argument is parsed and evaluated as a Python expression "
"(technically speaking, a condition list) using the *globals* and *locals* "
"dictionaries as global and local namespace.  If the *globals* dictionary is "
"present and does not contain a value for the key ``__builtins__``, a "
"reference to the dictionary of the built-in module :mod:`builtins` is "
"inserted under that key before *expression* is parsed.  That way you can "
"control what builtins are available to the executed code by inserting your "
"own ``__builtins__`` dictionary into *globals* before passing it to :func:"
"`eval`.  If the *locals* dictionary is omitted it defaults to the *globals* "
"dictionary.  If both dictionaries are omitted, the expression is executed "
"with the *globals* and *locals* in the environment where :func:`eval` is "
"called.  Note, *eval()* does not have access to the :term:`nested scopes "
"<nested scope>` (non-locals) in the enclosing environment."
msgstr ""
"*globals* と *locals* の2つの辞書をそれぞれグローバルとローカルの名前空間と"
"し、*expression* 引数が Python 式 (技術的な言葉では条件のリスト) として評価さ"
"れます。 *globals* 辞書が存在し、 ``__builtins__`` をキーとして持たない場合"
"は、そのキーの値として 組み込みモジュール :mod:`builtins` の辞書への参照が、"
"*expression* が解析される前に挿入されます。これにより、 :func:`eval` に渡す前"
"の *globals* に自身で定義した ``__builtins__`` を定義することで、実行される"
"コードで利用可能な組み込み関数を制御することができます。 *locals* 辞書が省略"
"された場合、 *globals* 辞書がデフォルトとして使われます。どちらの辞書も省略さ"
"れた場合、 :func:`eval` が呼び出された環境における *globals* と *locals* のも"
"とで式が評価されます。 *eval()* は、その実行環境において、 :term:`ネストされ"
"たスコープ <nested scope>` (ローカルでないオブジェクト) へのアクセスを持たな"
"いことに注意してください。"

#: ../../library/functions.rst:523
msgid ""
"The return value is the result of the evaluated expression. Syntax errors "
"are reported as exceptions.  Example:"
msgstr ""
"返される値は、式が評価された結果になります。構文エラーは例外として報告されま"
"す。例:"

#: ../../library/functions.rst:530
msgid ""
"This function can also be used to execute arbitrary code objects (such as "
"those created by :func:`compile`).  In this case, pass a code object instead "
"of a string.  If the code object has been compiled with ``'exec'`` as the "
"*mode* argument, :func:`eval`\\'s return value will be ``None``."
msgstr ""
"この関数は (:func:`compile` で生成されるような) 任意のコードオブジェクトを実"
"行するのにも利用できます。この場合、文字列の代わりにコードオブジェクトを渡し"
"てください。このコードオブジェクトが、引数 *mode* を ``'exec'`` としてコンパ"
"イルされている場合、 :func:`eval` の戻り値は ``None`` になります。"

#: ../../library/functions.rst:535
msgid ""
"Hints: dynamic execution of statements is supported by the :func:`exec` "
"function.  The :func:`globals` and :func:`locals` functions return the "
"current global and local dictionary, respectively, which may be useful to "
"pass around for use by :func:`eval` or :func:`exec`."
msgstr ""
"ヒント: :func:`exec` 関数により文の動的な実行がサポートされています。:func:"
"`globals` および :func:`locals` 関数は、それぞれ現在のグローバルおよびローカ"
"ルな辞書を返すので、それらを :func:`eval` や :func:`exec` に渡して使うことが"
"できます。"

#: ../../library/functions.rst:540
msgid ""
"If the given source is a string, then leading and trailing spaces and tabs "
"are stripped."
msgstr ""
"ソースコードとして文字列が与えられた場合、先頭と末尾の空白文字およびタブは取"
"り去られます。"

#: ../../library/functions.rst:543
msgid ""
"See :func:`ast.literal_eval` for a function that can safely evaluate strings "
"with expressions containing only literals."
msgstr ""
"リテラルだけを含む式の文字列を安全に評価できる関数、 :func:`ast."
"literal_eval` も参照してください。"

#: ../../library/functions.rst:546 ../../library/functions.rst:582
msgid ""
"Raises an :ref:`auditing event <auditing>` ``exec`` with argument "
"``code_object``."
msgstr ""
"引数 ``code_object`` を指定して :ref:`監査イベント <auditing>` ``exec`` を送"
"出します。 "

#: ../../library/functions.rst:548 ../../library/functions.rst:584
msgid ""
"Raises an :ref:`auditing event <auditing>` ``exec`` with the code object as "
"the argument. Code compilation events may also be raised."
msgstr ""
"コードオブジェクトを引数として :ref:`監査イベント <auditing>` ``exec`` を送出"
"します。コードコンパイルのイベントも送出されることがあります。"

#: ../../library/functions.rst:555
msgid ""
"This function supports dynamic execution of Python code. *object* must be "
"either a string or a code object.  If it is a string, the string is parsed "
"as a suite of Python statements which is then executed (unless a syntax "
"error occurs). [#]_ If it is a code object, it is simply executed.  In all "
"cases, the code that's executed is expected to be valid as file input (see "
"the section :ref:`file-input` in the Reference Manual). Be aware that the :"
"keyword:`nonlocal`, :keyword:`yield`,  and :keyword:`return` statements may "
"not be used outside of function definitions even within the context of code "
"passed to the :func:`exec` function. The return value is ``None``."
msgstr ""
"この関数は Python コードの動的な実行をサポートします。 *object* は文字列か"
"コードオブジェクトでなければなりません。文字列の場合、その文字列は一連の "
"Python 文として解析され、そして (構文エラーにならない限り) 実行されます。 "
"[#]_ コードオブジェクトの場合は、単純に実行されます。どの場合でも、実行される"
"コードはファイル入力形式として有効であることが期待されます (リファレンスマ"
"ニュアルの :ref:`file-input` 節を参照してください)。  :keyword:`nonlocal`, :"
"keyword:`yield`,  および :keyword:`return` 文は、 :func:`exec` 関数に渡された"
"コードの文脈中でさえ、関数定義の外側で使うことはできません。戻り値は "
"``None`` です。"

#: ../../library/functions.rst:566
msgid ""
"In all cases, if the optional parts are omitted, the code is executed in the "
"current scope.  If only *globals* is provided, it must be a dictionary (and "
"not a subclass of dictionary), which will be used for both the global and "
"the local variables.  If *globals* and *locals* are given, they are used for "
"the global and local variables, respectively.  If provided, *locals* can be "
"any mapping object.  Remember that at the module level, globals and locals "
"are the same dictionary. If exec gets two separate objects as *globals* and "
"*locals*, the code will be executed as if it were embedded in a class "
"definition."
msgstr ""
"どの場合でも、オプションの部分が省略されると、コードは現在のスコープ内で実行"
"されます。 *globals* だけが与えられた場合、その値は辞書でなければならず (かつ"
"辞書のサブクラスであってはならず)、グローバル変数とローカル変数の両方に使われ"
"ます。 *globals* と *locals* の両方が与えられた場合、それぞれグローバル変数と"
"ローカル変数に使われます。 *locals* を指定する場合、その値はマップ型オブジェ"
"クトでなければなりません。モジュールレベルでは globals と locals は同じ辞書で"
"あることに留意してください。もし exec が *globals* と *locals* に異なる2つの"
"オブジェクトを受け取った場合、コードはクラス定義に埋め込まれたかのように実行"
"されます。"

#: ../../library/functions.rst:576
msgid ""
"If the *globals* dictionary does not contain a value for the key "
"``__builtins__``, a reference to the dictionary of the built-in module :mod:"
"`builtins` is inserted under that key.  That way you can control what "
"builtins are available to the executed code by inserting your own "
"``__builtins__`` dictionary into *globals* before passing it to :func:`exec`."
msgstr ""
"*globals* 辞書がキー ``__builtins__`` に対する値を含まなければ、そのキーに対"
"して、組み込みモジュール :mod:`builtins` の辞書への参照が挿入されます。ですか"
"ら、実行されるコードを :func:`exec` に渡す前に、 *globals* に自作の "
"``__builtins__`` 辞書を挿入することで、コードがどの組み込みを利用できるか制御"
"できます。"

#: ../../library/functions.rst:589
msgid ""
"The built-in functions :func:`globals` and :func:`locals` return the current "
"global and local dictionary, respectively, which may be useful to pass "
"around for use as the second and third argument to :func:`exec`."
msgstr ""
"組み込み関数 :func:`globals` および :func:`locals` は、それぞれ現在のグローバ"
"ルおよびローカルの辞書を返すので、それらを :func:`exec` の第二、第三引数にそ"
"のまま渡して使うと便利なことがあります。"

#: ../../library/functions.rst:595
msgid ""
"The default *locals* act as described for function :func:`locals` below: "
"modifications to the default *locals* dictionary should not be attempted. "
"Pass an explicit *locals* dictionary if you need to see effects of the code "
"on *locals* after function :func:`exec` returns."
msgstr ""
"標準では *locals* は後に述べる関数 :func:`locals` のように動作します: 標準の "
"*locals* 辞書に対する変更を試みてはいけません。 :func:`exec` の呼び出しが返る"
"時にコードが *locals* に与える影響を知りたいなら、明示的に *locals* 辞書を渡"
"してください。"

#: ../../library/functions.rst:603
msgid ""
"Construct an iterator from those elements of *iterable* for which *function* "
"returns true.  *iterable* may be either a sequence, a container which "
"supports iteration, or an iterator.  If *function* is ``None``, the identity "
"function is assumed, that is, all elements of *iterable* that are false are "
"removed."
msgstr ""
"*iterable* の要素のうち *function* が真を返すものでイテレータを構築します。"
"*iterable* はシーケンスか、反復をサポートするコンテナか、イテレータです。"
"*function* が ``None`` なら、恒等関数を仮定します。すなわち、*iterable* の偽"
"である要素がすべて除去されます。"

#: ../../library/functions.rst:609
msgid ""
"Note that ``filter(function, iterable)`` is equivalent to the generator "
"expression ``(item for item in iterable if function(item))`` if function is "
"not ``None`` and ``(item for item in iterable if item)`` if function is "
"``None``."
msgstr ""
"なお、``filter(function, iterable)`` は、関数が ``None`` でなければジェネレー"
"タ式 ``(item for item in iterable if function(item))`` と同等で、関数が "
"``None`` なら ``(item for item in iterable if item)`` と同等です。"

#: ../../library/functions.rst:614
msgid ""
"See :func:`itertools.filterfalse` for the complementary function that "
"returns elements of *iterable* for which *function* returns false."
msgstr ""
"*function* が偽を返すような *iterable* の各要素を返す補完的関数は、 :func:"
"`itertools.filterfalse` を参照してください。"

#: ../../library/functions.rst:624
msgid "Return a floating point number constructed from a number or string *x*."
msgstr "数または文字列 *x* から生成された浮動小数点数を返します。"

#: ../../library/functions.rst:626
msgid ""
"If the argument is a string, it should contain a decimal number, optionally "
"preceded by a sign, and optionally embedded in whitespace.  The optional "
"sign may be ``'+'`` or ``'-'``; a ``'+'`` sign has no effect on the value "
"produced.  The argument may also be a string representing a NaN (not-a-"
"number), or positive or negative infinity.  More precisely, the input must "
"conform to the ``floatvalue`` production rule in the following grammar, "
"after leading and trailing whitespace characters are removed:"
msgstr ""
"引数が文字列の場合、10進数でなければなりません。先頭に符号または空白を含んで"
"もかまいません。符号は ``'+'`` か ``'-'`` のいずれかです。正符号 ``'+'`` は生"
"成される値に対して何の効果もありません。引数は NaN (not-a-number) や正または"
"負の無限大をあらわす文字列でもかまいません。より正確にいうと、入力は先頭と末"
"尾の空白文字を除き、以下に示す ``floatvalue`` の生成規則に従う必要があります:"

#: ../../library/functions.rst:644
msgid ""
"Here ``digit`` is a Unicode decimal digit (character in the Unicode general "
"category ``Nd``). Case is not significant, so, for example, \"inf\", "
"\"Inf\", \"INFINITY\", and \"iNfINity\" are all acceptable spellings for "
"positive infinity."
msgstr ""
"ここで ``digit`` は、ユニコードでの10進数の数字 (ユニコードの一般カテゴリ "
"``Nd`` に含まれる文字) です。大文字と小文字の区別はありません。したがって、例"
"えば \"inf\", \"Inf\", \"INFINITY\", そして \"iNfINity\" は全て正の無限大とし"
"て有効な書き方です。"

#: ../../library/functions.rst:649
msgid ""
"Otherwise, if the argument is an integer or a floating point number, a "
"floating point number with the same value (within Python's floating point "
"precision) is returned.  If the argument is outside the range of a Python "
"float, an :exc:`OverflowError` will be raised."
msgstr ""
"一方で、引数が整数または浮動小数点数なら、(Python の浮動小数点数の精度で) 同"
"じ値の浮動小数点数が返されます。引数が Python の浮動小数点数の範囲外なら、 :"
"exc:`OverflowError` が送出されます。"

#: ../../library/functions.rst:654
msgid ""
"For a general Python object ``x``, ``float(x)`` delegates to ``x."
"__float__()``.  If ``__float__()`` is not defined then it falls back to :"
"meth:`__index__`."
msgstr ""
"一般の Python オブジェクト ``x`` に対して、``float(x)`` は ``x.__float__()`` "
"に委譲します。 :meth:`__float__()` が定義されていない場合、:meth:`__index__` "
"へフォールバックします。"

#: ../../library/functions.rst:658
msgid "If no argument is given, ``0.0`` is returned."
msgstr "引数が与えられなければ、``0.0`` が返されます。"

#: ../../library/functions.rst:660
msgid "Examples::"
msgstr "例::"

#: ../../library/functions.rst:673
msgid "The float type is described in :ref:`typesnumeric`."
msgstr "浮動小数点数型については、 :ref:`typesnumeric` も参照してください。"

#: ../../library/functions.rst:681
msgid "Falls back to :meth:`__index__` if :meth:`__float__` is not defined."
msgstr ""
":meth:`__float__` が定義されていない場合、:meth:`__index__` へフォールバック"
"します。"

#: ../../library/functions.rst:691
msgid ""
"Convert a *value* to a \"formatted\" representation, as controlled by "
"*format_spec*.  The interpretation of *format_spec* will depend on the type "
"of the *value* argument; however, there is a standard formatting syntax that "
"is used by most built-in types: :ref:`formatspec`."
msgstr ""
"*value* を *format_spec* で指示された通りに \"整形\" した文字列表現に変換しま"
"す。 *format_spec* の解釈は *value* 引数の型に依存しますが、ほとんどの組み込"
"み型で使われる標準的な構文が存在します: :ref:`formatspec`。"

#: ../../library/functions.rst:696
msgid ""
"The default *format_spec* is an empty string which usually gives the same "
"effect as calling :func:`str(value) <str>`."
msgstr ""
"デフォルトの *format_spec* は空の文字列です。それは通常 :func:`str(value) "
"<str>` の呼び出しと同じ結果になります。"

#: ../../library/functions.rst:699
msgid ""
"A call to ``format(value, format_spec)`` is translated to ``type(value)."
"__format__(value, format_spec)`` which bypasses the instance dictionary when "
"searching for the value's :meth:`__format__` method.  A :exc:`TypeError` "
"exception is raised if the method search reaches :mod:`object` and the "
"*format_spec* is non-empty, or if either the *format_spec* or the return "
"value are not strings."
msgstr ""
"``format(value, format_spec)`` の呼び出しは、 ``type(value)."
"__format__(value, format_spec)`` に翻訳され、これは value の :meth:"
"`__format__` メソッドの検索をするとき、インスタンス辞書を回避します。このメ"
"ソッドの探索が :mod:`object` に到達しても *format_spec* が空にならなかった"
"り、 *format_spec* や返り値が文字列でなかったりした場合、 :exc:`TypeError` が"
"送出されます。"

#: ../../library/functions.rst:706
msgid ""
"``object().__format__(format_spec)`` raises :exc:`TypeError` if "
"*format_spec* is not an empty string."
msgstr ""
"*format_spec* が空の文字列でない場合 ``object().__format__(format_spec)`` "
"は :exc:`TypeError` を送出します。"

#: ../../library/functions.rst:715
msgid ""
"Return a new :class:`frozenset` object, optionally with elements taken from "
"*iterable*.  ``frozenset`` is a built-in class.  See :class:`frozenset` and :"
"ref:`types-set` for documentation about this class."
msgstr ""
"新しい :class:`frozenset` オブジェクトを返します。オプションで *iterable* か"
"ら得られた要素を含みます。 ``frozenset`` はビルトインクラスです。このクラスに"
"関するドキュメントは :class:`frozenset` と :ref:`types-set` を参照してくださ"
"い。"

#: ../../library/functions.rst:719
msgid ""
"For other containers see the built-in :class:`set`, :class:`list`, :class:"
"`tuple`, and :class:`dict` classes, as well as the :mod:`collections` module."
msgstr ""
"他のコンテナについては、ビルトインクラス :class:`set`, :class:`list`, :class:"
"`tuple`, :class:`dict` や :mod:`collections` モジュールを見てください。"

#: ../../library/functions.rst:726
msgid ""
"Return the value of the named attribute of *object*.  *name* must be a "
"string. If the string is the name of one of the object's attributes, the "
"result is the value of that attribute.  For example, ``getattr(x, "
"'foobar')`` is equivalent to ``x.foobar``.  If the named attribute does not "
"exist, *default* is returned if provided, otherwise :exc:`AttributeError` is "
"raised. *name* need not be a Python identifier (see :func:`setattr`)."
msgstr ""
"*object* の指定された属性の値を返します。 *name* は文字列でなければなりませ"
"ん。与えられた文字列がオブジェクトの属性名のうちいずれかに一致すれば、戻り値"
"はその属性の値になります。たとえば、 ``getattr(x, 'foobar')`` は ``x."
"foobar`` と等価です。もし指定された属性が存在しない場合、 *default* が指定さ"
"れていればその値が返されます。そうでない場合は :exc:`AttributeError` が送出さ"
"れます。 *name* は Python 識別子である必要はありません (:func:`setattr` を参"
"照してください)。"

#: ../../library/functions.rst:735
msgid ""
"Since :ref:`private name mangling <private-name-mangling>` happens at "
"compilation time, one must manually mangle a private attribute's (attributes "
"with two leading underscores) name in order to retrieve it with :func:"
"`getattr`."
msgstr ""
":ref:`プライベートな名前のマングリング <private-name-mangling>` はコンパイル"
"時に行われます。そのため、プライベートな属性 (先頭に2つのアンダースコアを伴う"
"名前を持つ属性) の値を :func:`getattr` で取り出すためには、属性名を手動でマン"
"グリングする必要があります。"

#: ../../library/functions.rst:743
msgid ""
"Return the dictionary implementing the current module namespace. For code "
"within functions, this is set when the function is defined and remains the "
"same regardless of where the function is called."
msgstr ""
"現在のモジュールの名前空間を実装した辞書を返します。関数内のコードに対して"
"は、関数が定義されるときに辞書が設定され、その関数がどこから呼ばれたかにかか"
"わらず同じ内容になります。"

#: ../../library/functions.rst:750
msgid ""
"The arguments are an object and a string.  The result is ``True`` if the "
"string is the name of one of the object's attributes, ``False`` if not. "
"(This is implemented by calling ``getattr(object, name)`` and seeing whether "
"it raises an :exc:`AttributeError` or not.)"
msgstr ""
"引数はオブジェクトと文字列です。文字列がオブジェクトの属性名の一つであった場"
"合 ``True`` を、そうでない場合 ``False`` を返します。 (この関数は、 "
"``getattr(object, name)`` を呼び出して :exc:`AttributeError` を送出するかどう"
"かを見ることで実装されています。)"

#: ../../library/functions.rst:758
msgid ""
"Return the hash value of the object (if it has one).  Hash values are "
"integers.  They are used to quickly compare dictionary keys during a "
"dictionary lookup.  Numeric values that compare equal have the same hash "
"value (even if they are of different types, as is the case for 1 and 1.0)."
msgstr ""
"オブジェクトのハッシュ値を (存在すれば) 返します。ハッシュ値は整数です。これ"
"らは辞書を検索する際に辞書のキーを高速に比較するために使われます。等しい値と"
"なる数値は等しいハッシュ値を持ちます (1 と 1.0 のように型が異なっていてもで"
"す)。"

#: ../../library/functions.rst:765
msgid ""
"For objects with custom :meth:`__hash__` methods, note that :func:`hash` "
"truncates the return value based on the bit width of the host machine. See :"
"meth:`__hash__` for details."
msgstr ""
"独自の :meth:`__hash__` メソッドを実装したオブジェクトを使う場合、:func:"
"`hash` が実行するマシンのビット幅に合わせて戻り値を切り捨てることに注意してく"
"ださい。詳しくは :meth:`__hash__` を参照してください。"

#: ../../library/functions.rst:771
msgid ""
"Invoke the built-in help system.  (This function is intended for interactive "
"use.)  If no argument is given, the interactive help system starts on the "
"interpreter console.  If the argument is a string, then the string is looked "
"up as the name of a module, function, class, method, keyword, or "
"documentation topic, and a help page is printed on the console.  If the "
"argument is any other kind of object, a help page on the object is generated."
msgstr ""
"組み込みヘルプシステムを起動します。(この関数は対話的な使用のためのもので"
"す。) 引数が与えられていない場合、対話的ヘルプシステムはインタプリタコンソー"
"ル上で起動します。引数が文字列の場合、文字列はモジュール、関数、クラス、メ"
"ソッド、キーワード、またはドキュメントの項目名として検索され、ヘルプページが"
"コンソール上に印字されます。引数がその他のオブジェクトの場合、そのオブジェク"
"トに関するヘルプページが生成されます。"

#: ../../library/functions.rst:778
msgid ""
"Note that if a slash(/) appears in the parameter list of a function when "
"invoking :func:`help`, it means that the parameters prior to the slash are "
"positional-only. For more info, see :ref:`the FAQ entry on positional-only "
"parameters <faq-positional-only-arguments>`."
msgstr ""
":func:`help` を呼び出したときに関数の引数リストにスラッシュ (/) が現れた場合"
"は、スラッシュより前の引数が位置専用引数だという意味であることに注意してくだ"
"さい。より詳しい情報は、 :ref:`位置専用引数についての FAQ の項目 <faq-"
"positional-only-arguments>` を参照してください。"

#: ../../library/functions.rst:783
msgid ""
"This function is added to the built-in namespace by the :mod:`site` module."
msgstr ""
"この関数は、 :mod:`site` モジュールから、組み込みの名前空間に移されました。"

#: ../../library/functions.rst:785
msgid ""
"Changes to :mod:`pydoc` and :mod:`inspect` mean that the reported signatures "
"for callables are now more comprehensive and consistent."
msgstr ""
":mod:`pydoc` と :mod:`inspect` への変更により、呼び出し可能オブジェクトの報告"
"されたシグニチャがより包括的で一貫性のあるものになりました。"

#: ../../library/functions.rst:792
msgid ""
"Convert an integer number to a lowercase hexadecimal string prefixed with "
"\"0x\". If *x* is not a Python :class:`int` object, it has to define an :"
"meth:`__index__` method that returns an integer. Some examples:"
msgstr ""
"整数を先頭に \"0x\" が付いた小文字の 16 進文字列に変換します。\n"
" *x* が Python の :class:`int` オブジェクトでない場合、整数を返す :meth:"
"`__index__` メソッドが定義されていなければなりません。\n"
"いくつかの例を示します:"

#: ../../library/functions.rst:801
msgid ""
"If you want to convert an integer number to an uppercase or lower "
"hexadecimal string with prefix or not, you can use either of the following "
"ways:"
msgstr ""
"整数を大文字の 16 進文字列や小文字の 16 進文字列、先頭の \"0x\" 付きや "
"\"0x\" 無しに変換したい場合は、次に挙げる方法が使えます:"

#: ../../library/functions.rst:813
msgid ""
"See also :func:`int` for converting a hexadecimal string to an integer using "
"a base of 16."
msgstr ""
"16を底として16進数文字列を整数に変換するには :func:`int` も参照してください。"

#: ../../library/functions.rst:818
msgid ""
"To obtain a hexadecimal string representation for a float, use the :meth:"
"`float.hex` method."
msgstr ""
"浮動小数点数の16進文字列表記を得たい場合には、 :meth:`float.hex` メソッドを"
"使って下さい。"

#: ../../library/functions.rst:824
msgid ""
"Return the \"identity\" of an object.  This is an integer which is "
"guaranteed to be unique and constant for this object during its lifetime. "
"Two objects with non-overlapping lifetimes may have the same :func:`id` "
"value."
msgstr ""
"オブジェクトの \"識別値\" を返します。この値は整数で、このオブジェクトの有効"
"期間中は一意かつ定数であることが保証されています。有効期間が重ならない 2 つの"
"オブジェクトは同じ :func:`id` 値を持つかもしれません。"

#: ../../library/functions.rst:829
msgid "This is the address of the object in memory."
msgstr "これはオブジェクトのメモリアドレスです。"

#: ../../library/functions.rst:831
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.id`` with argument "
"``id``."
msgstr ""
"引数 ``id`` を指定して :ref:`監査イベント <auditing>` ``builtins.id`` を送出"
"します。 "

#: ../../library/functions.rst:836
msgid ""
"If the *prompt* argument is present, it is written to standard output "
"without a trailing newline.  The function then reads a line from input, "
"converts it to a string (stripping a trailing newline), and returns that.  "
"When EOF is read, :exc:`EOFError` is raised.  Example::"
msgstr ""
"引数 *prompt* が存在すれば、それが末尾の改行を除いて標準出力に書き出されま"
"す。次に、この関数は入力から 1 行を読み込み、文字列に変換して (末尾の改行を除"
"いて) 返します。 EOF が読み込まれたとき、 :exc:`EOFError` が送出されます。"
"例::"

#: ../../library/functions.rst:846
msgid ""
"If the :mod:`readline` module was loaded, then :func:`input` will use it to "
"provide elaborate line editing and history features."
msgstr ""
":mod:`readline` モジュールが読み込まれていれば、 :func:`input` はそれを使って"
"精緻な行編集やヒストリ機能を提供します。"

#: ../../library/functions.rst:849
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.input`` with argument "
"``prompt``."
msgstr ""
"引数 ``prompt`` 付きで :ref:`監査イベント <auditing>` ``builtins.input`` を送"
"出します。"

#: ../../library/functions.rst:851
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.input`` with argument "
"``prompt`` before reading input"
msgstr ""
"入力を読み込む前に、引数 ``prompt`` 付きで :ref:`監査イベント <auditing>` "
"``builtins.input`` を送出します。"

#: ../../library/functions.rst:854
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.input/result`` with "
"argument ``result``."
msgstr ""
"引数 ``result`` 付きで :ref:`監査イベント <auditing>` ``builtins.input/"
"result`` を送出します。"

#: ../../library/functions.rst:856
msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.input/result`` with "
"the result after successfully reading input."
msgstr ""
"入力の読み込みに成功した後に、その結果付きで :ref:`監査イベント <auditing>` "
"``builtins.input/result`` を送出します。"

#: ../../library/functions.rst:863
msgid ""
"Return an integer object constructed from a number or string *x*, or return "
"``0`` if no arguments are given.  If *x* defines :meth:`__int__`, ``int(x)`` "
"returns ``x.__int__()``.  If *x* defines :meth:`__index__`, it returns ``x."
"__index__()``.  If *x* defines :meth:`__trunc__`, it returns ``x."
"__trunc__()``. For floating point numbers, this truncates towards zero."
msgstr ""
"数値または文字列 *x* から作成された整数オブジェクトを返します。引数が与えられ"
"ない場合には ``0`` を返します。\n"
"*x* に :meth:`__int__` が定義されている場合は、 ``int(x)`` は ``x."
"__int__()`` を返します。\n"
"*x* に :meth:`__index__` が定義されている場合は、 ```x.__index__()`` を返しま"
"す。\n"
"*x* に :meth:`__trunc__` が定義されている場合は、 ```x.__trunc__()`` を返しま"
"す。\n"
"浮動小数点数については、これは 0 に近い側へ切り捨てます。"

#: ../../library/functions.rst:870
msgid ""
"If *x* is not a number or if *base* is given, then *x* must be a string, :"
"class:`bytes`, or :class:`bytearray` instance representing an :ref:`integer "
"literal <integers>` in radix *base*.  Optionally, the literal can be "
"preceded by ``+`` or ``-`` (with no space in between) and surrounded by "
"whitespace.  A base-n literal consists of the digits 0 to n-1, with ``a`` to "
"``z`` (or ``A`` to ``Z``) having values 10 to 35.  The default *base* is 10. "
"The allowed values are 0 and 2--36. Base-2, -8, and -16 literals can be "
"optionally prefixed with ``0b``/``0B``, ``0o``/``0O``, or ``0x``/``0X``, as "
"with integer literals in code.  Base 0 means to interpret exactly as a code "
"literal, so that the actual base is 2, 8, 10, or 16, and so that "
"``int('010', 0)`` is not legal, while ``int('010')`` is, as well as "
"``int('010', 8)``."
msgstr ""
"*x* が数値でない、あるいは *base* が与えられた場合、 *x* は文字列、 :class:"
"`bytes` インスタンス、 :class:`bytearray` インスタンスのいずれかで、基数 "
"*base* の :ref:`整数リテラル <integers>` で表されたものでなければなりませ"
"ん。\n"
"オプションで、リテラルの前に ``+`` あるいは ``-`` を (中間のスペースなしで) "
"付けることができます。\n"
"また、リテラルは余白で囲むことができます。\n"
"基数 n のリテラルは、 0 から n-1 の数字に値 10-35 を持つ ``a`` から ``z`` (ま"
"たは ``A`` から ``Z``) を加えたもので構成されます。\n"
"デフォルトの *base* は 10 です。\n"
"許される値は 0 と 2--36 です。\n"
"基数 2, 8, 16 のリテラルは、別の記法としてコード中の整数リテラルのように "
"``0b``/``0B``, ``0o``/``0O``, ``0x``/``0X`` を前に付けることができます。\n"
"基数 0 はコードリテラルとして厳密に解釈することを意味します。\n"
"その結果、実際の基数は 2, 8, 10, 16 のどれかになります。\n"
"したがって ``int('010', 0)`` は有効ではありませんが、 ``int('010')`` や "
"``int('010', 8)`` は有効です。"

#: ../../library/functions.rst:883
msgid "The integer type is described in :ref:`typesnumeric`."
msgstr "整数型については、 :ref:`typesnumeric` も参照してください。"

#: ../../library/functions.rst:885
msgid ""
"If *base* is not an instance of :class:`int` and the *base* object has a :"
"meth:`base.__index__ <object.__index__>` method, that method is called to "
"obtain an integer for the base.  Previous versions used :meth:`base.__int__ "
"<object.__int__>` instead of :meth:`base.__index__ <object.__index__>`."
msgstr ""
"*base* が :class:`int` のインスタンスでなく、*base* オブジェクトが :meth:"
"`base.__index__ <object.__index__>` メソッドを持っている場合、そのメソッドを"
"呼んで底に対する整数を得ることができます。以前のバージョンでは :meth:`base."
"__index__ <object.__index__>` ではなく :meth:`base.__int__ <object.__int__>` "
"を使用していました。"

#: ../../library/functions.rst:898
msgid "Falls back to :meth:`__index__` if :meth:`__int__` is not defined."
msgstr ""
":meth:`__int__` が定義されていない場合、:meth:`__index__` へフォールバックし"
"ます。"

#: ../../library/functions.rst:901
msgid ""
":class:`int` string inputs and string representations can be limited to help "
"avoid denial of service attacks. A :exc:`ValueError` is raised when the "
"limit is exceeded while converting a string *x* to an :class:`int` or when "
"converting an :class:`int` into a string would exceed the limit. See the :"
"ref:`integer string conversion length limitation <int_max_str_digits>` "
"documentation."
msgstr ""
":class:`int` への文字列入力やその文字列表現は、サービス拒否攻撃 (DoS 攻撃) を"
"避けるために制限されることがあります。文字列 *x* を :class:`int` に変換した"
"り :class:`int` を文字列に変換したりする際にその制限を超えた場合、 :exc:"
"`ValueError` が送出されます。詳しくは :ref:`整数文字列の変換における長さ制限 "
"<int_max_str_digits>` を参照してください。"

#: ../../library/functions.rst:912
msgid ""
"Return ``True`` if the *object* argument is an instance of the *classinfo* "
"argument, or of a (direct, indirect, or :term:`virtual <abstract base "
"class>`) subclass thereof.  If *object* is not an object of the given type, "
"the function always returns ``False``. If *classinfo* is a tuple of type "
"objects (or recursively, other such tuples) or a :ref:`types-union` of "
"multiple types, return ``True`` if *object* is an instance of any of the "
"types. If *classinfo* is not a type or tuple of types and such tuples, a :"
"exc:`TypeError` exception is raised."
msgstr ""

#: ../../library/functions.rst:922 ../../library/functions.rst:936
msgid "*classinfo* can be a :ref:`types-union`."
msgstr "*classinfo* に :ref:`types-union` を指定できるようになりました。"

#: ../../library/functions.rst:928
msgid ""
"Return ``True`` if *class* is a subclass (direct, indirect, or :term:"
"`virtual <abstract base class>`) of *classinfo*.  A class is considered a "
"subclass of itself. *classinfo* may be a tuple of class objects (or "
"recursively, other such tuples) or a :ref:`types-union`, in which case "
"return ``True`` if *class* is a subclass of any entry in *classinfo*.  In "
"any other case, a :exc:`TypeError` exception is raised."
msgstr ""
"*class* が *classinfo* の (直接、間接、または :term:`仮想 <abstract base "
"class>` の) サブクラスである場合に ``True`` を返します。クラスは自身のサブク"
"ラスとみなされます。 *classinfo* はクラスオブジェクトのタプル (または再帰的に"
"そのようなタプルを含むタプル) やクラスオブジェクトの :ref:`types-union` でも"
"よく、この場合は *class* が *classinfo* のいずれかのクラスのサブクラスであれ"
"ば ``True`` を返します。上記以外の値が指定された場合、 :exc:`TypeError` 例外"
"が送出されます。"

#: ../../library/functions.rst:942
msgid ""
"Return an :term:`iterator` object.  The first argument is interpreted very "
"differently depending on the presence of the second argument. Without a "
"second argument, *object* must be a collection object which supports the :"
"term:`iterable` protocol (the :meth:`__iter__` method), or it must support "
"the sequence protocol (the :meth:`__getitem__` method with integer arguments "
"starting at ``0``).  If it does not support either of those protocols, :exc:"
"`TypeError` is raised. If the second argument, *sentinel*, is given, then "
"*object* must be a callable object.  The iterator created in this case will "
"call *object* with no arguments for each call to its :meth:`~iterator."
"__next__` method; if the value returned is equal to *sentinel*, :exc:"
"`StopIteration` will be raised, otherwise the value will be returned."
msgstr ""
":term:`iterator` オブジェクトを返します。第二引数があるかどうかによって第一引"
"数の解釈は大きく異なります。第二引数がない場合、 *object* は :term:"
"`iterable` プロトコル (:meth:`__iter__` メソッド) をサポートするコレクション"
"オブジェクトか、またはシーケンスプロトコル (``0`` から始まる整数を引数にと"
"る :meth:`__getitem__` メソッド) をサポートするオブジェクトでなければなりませ"
"ん。第一引数がどちらのプロトコルもサポートしない場合は :exc:`TypeError` 例外"
"が送出されます。第二引数 *sentinel* が与えられた場合、 *object* は呼び出し可"
"能オブジェクトでなければなりません。この場合に生成されるイテレータは :meth:"
"`~iterator.__next__` メソッドを呼び出すごとに引数なしで *object* を呼び出しま"
"す; 戻り値が *sentinel* と等しければ、 :exc:`StopIteration` が送出されます。"
"それ以外の場合は戻り値がそのまま返されます。"

#: ../../library/functions.rst:955
msgid "See also :ref:`typeiter`."
msgstr ":ref:`typeiter` も見てください。"

#: ../../library/functions.rst:957
msgid ""
"One useful application of the second form of :func:`iter` is to build a "
"block-reader. For example, reading fixed-width blocks from a binary database "
"file until the end of file is reached::"
msgstr ""
"2引数形式の :func:`iter` の便利な利用方法の1つは、ブロックリーダーの構築で"
"す。\n"
"例えば、バイナリのデータベースファイルから固定幅のブロックをファイルの終端に"
"到達するまで読み出すには次のようにします::"

#: ../../library/functions.rst:969
msgid ""
"Return the length (the number of items) of an object.  The argument may be a "
"sequence (such as a string, bytes, tuple, list, or range) or a collection "
"(such as a dictionary, set, or frozen set)."
msgstr ""
"オブジェクトの長さ (要素の数) を返します。引数はシーケンス (文字列、バイト"
"列、タプル、リスト、range 等) かコレクション (辞書、集合、凍結集合等) です。"

#: ../../library/functions.rst:975
msgid ""
"``len`` raises :exc:`OverflowError` on lengths larger than :data:`sys."
"maxsize`, such as :class:`range(2 ** 100) <range>`."
msgstr ""
"``len`` は、例えば :class:`range(2 ** 100) <range>` のような、 :data:`sys."
"maxsize` を超える長さに対して :exc:`OverflowError` を送出します。"

#: ../../library/functions.rst:983
msgid ""
"Rather than being a function, :class:`list` is actually a mutable sequence "
"type, as documented in :ref:`typesseq-list` and :ref:`typesseq`."
msgstr ""
":class:`list` は、実際には関数ではなくミュータブルなシーケンス型で、 :ref:"
"`typesseq-list` と :ref:`typesseq` にドキュメント化されています。"

#: ../../library/functions.rst:989
msgid ""
"Update and return a dictionary representing the current local symbol table. "
"Free variables are returned by :func:`locals` when it is called in function "
"blocks, but not in class blocks. Note that at the module level, :func:"
"`locals` and :func:`globals` are the same dictionary."
msgstr ""
"現在のローカルシンボルテーブルを表す辞書を更新して返します。\n"
"関数ブロックで :func:`locals` を呼び出したときは自由変数が返されますが、クラ"
"スブロックでは返されません。\n"
"モジュールレベルでは、 :func:`locals` と :func:`globals` は同じ辞書であること"
"に注意してください。"

#: ../../library/functions.rst:995
msgid ""
"The contents of this dictionary should not be modified; changes may not "
"affect the values of local and free variables used by the interpreter."
msgstr ""
"この辞書の内容は変更してはいけません; 変更しても、インタプリタが使うローカル"
"変数や自由変数の値には影響しません。"

#: ../../library/functions.rst:1000
msgid ""
"Return an iterator that applies *function* to every item of *iterable*, "
"yielding the results.  If additional *iterable* arguments are passed, "
"*function* must take that many arguments and is applied to the items from "
"all iterables in parallel.  With multiple iterables, the iterator stops when "
"the shortest iterable is exhausted.  For cases where the function inputs are "
"already arranged into argument tuples, see :func:`itertools.starmap`\\."
msgstr ""
"*function* を、結果を返しながら *iterable* の全ての要素に適用するイテレータを"
"返します。追加の *iterable* 引数が渡されたなら、 *function* はその数だけの引"
"数を取らなければならず、全てのイテラブルから並行して取られた要素に適用されま"
"す。複数のイテラブルが与えられたら、このイテレータはその中の最短のイテラブル"
"が尽きた時点で止まります。関数の入力がすでに引数タプルに配置されている場合"
"は、 :func:`itertools.starmap` を参照してください。"

#: ../../library/functions.rst:1011
msgid ""
"Return the largest item in an iterable or the largest of two or more "
"arguments."
msgstr ""
"iterable の中で最大の要素、または2つ以上の引数の中で最大のものを返します。"

#: ../../library/functions.rst:1014
msgid ""
"If one positional argument is provided, it should be an :term:`iterable`. "
"The largest item in the iterable is returned.  If two or more positional "
"arguments are provided, the largest of the positional arguments is returned."
msgstr ""
"位置引数が1つだけ与えられた場合、それは空でない :term:`iterable` でなくてはい"
"けません。その iterable の最大の要素が返されます。2 つ以上のキーワード無しの"
"位置引数が与えられた場合、その位置引数の中で最大のものが返されます。"

#: ../../library/functions.rst:1019 ../../library/functions.rst:1056
msgid ""
"There are two optional keyword-only arguments. The *key* argument specifies "
"a one-argument ordering function like that used for :meth:`list.sort`. The "
"*default* argument specifies an object to return if the provided iterable is "
"empty. If the iterable is empty and *default* is not provided, a :exc:"
"`ValueError` is raised."
msgstr ""
"任意のキーワード専用引数が 2 つあります。\n"
"*key* 引数は引数を 1 つ取る順序関数 (:meth:`list.sort` のもののように) を指定"
"します。\n"
"*default* 引数は与えられたイテラブルが空の場合に返すオブジェクトを指定しま"
"す。\n"
"イテラブルが空で *default* が与えられていない場合 :exc:`ValueError` が送出さ"
"れます。"

#: ../../library/functions.rst:1025
msgid ""
"If multiple items are maximal, the function returns the first one "
"encountered.  This is consistent with other sort-stability preserving tools "
"such as ``sorted(iterable, key=keyfunc, reverse=True)[0]`` and ``heapq."
"nlargest(1, iterable, key=keyfunc)``."
msgstr ""
"最大の要素が複数あるとき、この関数はそのうち最初に現れたものを返します。これ"
"は、``sorted(iterable, key=keyfunc, reverse=True)[0]`` や ``heapq."
"nlargest(1, iterable, key=keyfunc)`` のような、他のソート安定性を維持するツー"
"ルと両立します。"

#: ../../library/functions.rst:1030 ../../library/functions.rst:1067
msgid "The *default* keyword-only argument."
msgstr "*default* キーワード専用引数。"

#: ../../library/functions.rst:1033 ../../library/functions.rst:1070
msgid "The *key* can be ``None``."
msgstr "*key* 引数が ``None`` であることを許容します。"

#: ../../library/functions.rst:1041
msgid ""
"Return a \"memory view\" object created from the given argument.  See :ref:"
"`typememoryview` for more information."
msgstr ""
"与えられたオブジェクトから作られた \"メモリビュー\" オブジェクトを返します。"
"詳しくは :ref:`typememoryview` を参照してください。"

#: ../../library/functions.rst:1048
msgid ""
"Return the smallest item in an iterable or the smallest of two or more "
"arguments."
msgstr ""
"iterable の中で最小の要素、または2つ以上の引数の中で最小のものを返します。"

#: ../../library/functions.rst:1051
msgid ""
"If one positional argument is provided, it should be an :term:`iterable`. "
"The smallest item in the iterable is returned.  If two or more positional "
"arguments are provided, the smallest of the positional arguments is returned."
msgstr ""
"位置引数が1つだけ与えられた場合、それは空でない :term:`iterable` でなくてはい"
"けません。その iterable の最小の要素が返されます。2 つ以上のキーワード無しの"
"位置引数が与えられた場合、その位置引数の中で最小のものが返されます。"

#: ../../library/functions.rst:1062
msgid ""
"If multiple items are minimal, the function returns the first one "
"encountered.  This is consistent with other sort-stability preserving tools "
"such as ``sorted(iterable, key=keyfunc)[0]`` and ``heapq.nsmallest(1, "
"iterable, key=keyfunc)``."
msgstr ""
"最小の要素が複数あるとき、この関数はそのうち最初に現れたものを返します。これ"
"は、``sorted(iterable, key=keyfunc)[0]`` や ``heapq.nsmallest(1, iterable, "
"key=keyfunc)`` のような、他のソート安定性を維持するツールと両立します。"

#: ../../library/functions.rst:1076
msgid ""
"Retrieve the next item from the :term:`iterator` by calling its :meth:"
"`~iterator.__next__` method.  If *default* is given, it is returned if the "
"iterator is exhausted, otherwise :exc:`StopIteration` is raised."
msgstr ""
":term:`iterator` の :meth:`~iterator.__next__` メソッドを呼び出すことにより、"
"次の要素を取得します。イテレータが使い尽くされた場合、 *default* が与えられて"
"いればその値が返されます。そうでない場合は :exc:`StopIteration` が送出されま"
"す。"

#: ../../library/functions.rst:1083
msgid ""
"Return a new featureless object.  :class:`object` is a base for all classes. "
"It has methods that are common to all instances of Python classes.  This "
"function does not accept any arguments."
msgstr ""
"何の機能も持たない新しいオブジェクトを返します。 :class:`object` は全てのクラ"
"スの基底クラスです。これは、全ての Python クラスのインスタンスに共通のメソッ"
"ド群を持ちます。この関数はいかなる引数も受け付けません。"

#: ../../library/functions.rst:1089
msgid ""
":class:`object` does *not* have a :attr:`~object.__dict__`, so you can't "
"assign arbitrary attributes to an instance of the :class:`object` class."
msgstr ""
":class:`object` は :attr:`~object.__dict__` を *持たない* ので、 :class:"
"`object`  クラスのインスタンスに任意の属性を代入することはできません。"

#: ../../library/functions.rst:1095
msgid ""
"Convert an integer number to an octal string prefixed with \"0o\".  The "
"result is a valid Python expression. If *x* is not a Python :class:`int` "
"object, it has to define an :meth:`__index__` method that returns an "
"integer. For example:"
msgstr ""
"整数を先頭に \"0o\" が付いた 8 進文字列に変換します。\n"
"結果は Python の式としても使える形式になります。\n"
" *x* が Python の :class:`int` オブジェクトでない場合、整数を返す :meth:"
"`__index__` メソッドが定義されていなければなりません。\n"
"例えば、次のようになります:"

#: ../../library/functions.rst:1105
msgid ""
"If you want to convert an integer number to an octal string either with the "
"prefix \"0o\" or not, you can use either of the following ways."
msgstr ""
"整数を接頭辞 \"0o\" 付きや \"0o\" 無しの 8 進文字列に変換したい場合は、次に挙"
"げる方法のいずれかを使ってください。"

#: ../../library/functions.rst:1122
msgid ""
"Open *file* and return a corresponding :term:`file object`.  If the file "
"cannot be opened, an :exc:`OSError` is raised. See :ref:`tut-files` for more "
"examples of how to use this function."
msgstr ""
"*file* を開き、対応する :term:`ファイルオブジェクト <file object>` を返しま"
"す。ファイルを開くことができなければ、:exc:`OSError` が送出されます。\n"
"この関数の利用例について、 :ref:`tut-files` を参照してください。"

#: ../../library/functions.rst:1126
msgid ""
"*file* is a :term:`path-like object` giving the pathname (absolute or "
"relative to the current working directory) of the file to be opened or an "
"integer file descriptor of the file to be wrapped.  (If a file descriptor is "
"given, it is closed when the returned I/O object is closed unless *closefd* "
"is set to ``False``.)"
msgstr ""
"*file* は :term:`path-like object` で、開くファイルのパス名 (絶対パスまたは現"
"在の作業ディレクトリからの相対パス) あるいはラップするファイルの整数のファイ"
"ルデスクリプタを与えます。 (ファイルデスクリプタが与えられた場合、 *closefd* "
"が ``False`` に設定されていないかぎり、この関数が返す I/O オブジェクトがク"
"ローズされるときにファイルデスクリプタもクローズされます。)"

#: ../../library/functions.rst:1132
msgid ""
"*mode* is an optional string that specifies the mode in which the file is "
"opened.  It defaults to ``'r'`` which means open for reading in text mode. "
"Other common values are ``'w'`` for writing (truncating the file if it "
"already exists), ``'x'`` for exclusive creation, and ``'a'`` for appending "
"(which on *some* Unix systems, means that *all* writes append to the end of "
"the file regardless of the current seek position).  In text mode, if "
"*encoding* is not specified the encoding used is platform-dependent: "
"``locale.getpreferredencoding(False)`` is called to get the current locale "
"encoding. (For reading and writing raw bytes use binary mode and leave "
"*encoding* unspecified.)  The available modes are:"
msgstr ""

#: ../../library/functions.rst:1149
msgid "Character"
msgstr "文字"

#: ../../library/functions.rst:1149
msgid "Meaning"
msgstr "意味"

#: ../../library/functions.rst:1151
msgid "``'r'``"
msgstr "``'r'``"

#: ../../library/functions.rst:1151
msgid "open for reading (default)"
msgstr "読み込み用に開く (デフォルト)"

#: ../../library/functions.rst:1152
msgid "``'w'``"
msgstr "``'w'``"

#: ../../library/functions.rst:1152
msgid "open for writing, truncating the file first"
msgstr "書き込み用に開き、まずファイルを切り詰める"

#: ../../library/functions.rst:1153
msgid "``'x'``"
msgstr "``'x'``"

#: ../../library/functions.rst:1153
msgid "open for exclusive creation, failing if the file already exists"
msgstr "排他的な生成に開き、ファイルが存在する場合は失敗する"

#: ../../library/functions.rst:1154
msgid "``'a'``"
msgstr "``'a'``"

#: ../../library/functions.rst:1154
msgid "open for writing, appending to the end of file if it exists"
msgstr "書き込み用に開き、ファイルが存在する場合には末尾に追記する"

#: ../../library/functions.rst:1155
msgid "``'b'``"
msgstr "``'b'``"

#: ../../library/functions.rst:1155
msgid "binary mode"
msgstr "バイナリモード"

#: ../../library/functions.rst:1156
msgid "``'t'``"
msgstr "``'t'``"

#: ../../library/functions.rst:1156
msgid "text mode (default)"
msgstr "テキストモード (デフォルト)"

#: ../../library/functions.rst:1157
msgid "``'+'``"
msgstr "``'+'``"

#: ../../library/functions.rst:1157
msgid "open for updating (reading and writing)"
msgstr "更新用に開く (読み込み・書き込み用)"

#: ../../library/functions.rst:1160
msgid ""
"The default mode is ``'r'`` (open for reading text, a synonym of ``'rt'``). "
"Modes ``'w+'`` and ``'w+b'`` open and truncate the file.  Modes ``'r+'`` and "
"``'r+b'`` open the file with no truncation."
msgstr ""
"デフォルトのモードは ``'r'`` (テキストの読み込み用に開く、 ``'rt'`` と同義) "
"です。 ``'w+'`` と ``'w+b'`` はファイルを開いて上書きします。 ``'r+'`` と "
"``'r+b'`` はファイルを上書きせずに開きます。"

#: ../../library/functions.rst:1164
msgid ""
"As mentioned in the :ref:`io-overview`, Python distinguishes between binary "
"and text I/O.  Files opened in binary mode (including ``'b'`` in the *mode* "
"argument) return contents as :class:`bytes` objects without any decoding.  "
"In text mode (the default, or when ``'t'`` is included in the *mode* "
"argument), the contents of the file are returned as :class:`str`, the bytes "
"having been first decoded using a platform-dependent encoding or using the "
"specified *encoding* if given."
msgstr ""
":ref:`io-overview` で触れられているように、Python はバイナリとテキストの I/O "
"を区別します。(*mode* 引数に ``'b'`` を含めて) バイナリモードで開かれたファイ"
"ルは、内容をいかなるデコーディングもせずに :class:`bytes`  オブジェクトとして"
"返します。(デフォルトや、 *mode* 引数に ``'t'`` が含まれたときの) テキスト"
"モードでは、ファイルの内容は :class:`str` として返され、バイト列はまず、プ"
"ラットフォーム依存のエンコーディングか、*encoding* が指定された場合は指定され"
"たエンコーディングを使ってデコードされます。"

#: ../../library/functions.rst:1172
msgid ""
"There is an additional mode character permitted, ``'U'``, which no longer "
"has any effect, and is considered deprecated. It previously enabled :term:"
"`universal newlines` in text mode, which became the default behavior in "
"Python 3.0. Refer to the documentation of the :ref:`newline <open-newline-"
"parameter>` parameter for further details."
msgstr ""

#: ../../library/functions.rst:1180
msgid ""
"Python doesn't depend on the underlying operating system's notion of text "
"files; all the processing is done by Python itself, and is therefore "
"platform-independent."
msgstr ""
"Python は、下層のオペレーティングシステムがテキストファイルをどう認識するかに"
"は依存しません; すべての処理は Python 自身で行われ、よってプラットフォーム非"
"依存です。"

#: ../../library/functions.rst:1184
msgid ""
"*buffering* is an optional integer used to set the buffering policy.  Pass 0 "
"to switch buffering off (only allowed in binary mode), 1 to select line "
"buffering (only usable in text mode), and an integer > 1 to indicate the "
"size in bytes of a fixed-size chunk buffer. Note that specifying a buffer "
"size this way applies for binary buffered I/O, but ``TextIOWrapper`` (i.e., "
"files opened with ``mode='r+'``) would have another buffering. To disable "
"buffering in ``TextIOWrapper``, consider using the ``write_through`` flag "
"for :func:`io.TextIOWrapper.reconfigure`. When no *buffering* argument is "
"given, the default buffering policy works as follows:"
msgstr ""
"*buffering* はオプションの整数で、バッファリングのポリシーを設定するために使"
"われます。  バッファリングを無効化するためには0を渡してください (バイナリモー"
"ドでのみ設定可能です)。また行単位でのバッファリングには1を設定してください "
"(テキストモードでのみ有効です)。固定サイズのチャンクバッファに対するサイズを"
"バイト単位で指定したい場合は、1より大きい整数を渡してください。この形式でバッ"
"ファサイズを指定した場合、バイナリ形式でバッファリングをサポートする I/O "
"(buffered I/O) にはそのまま適用されますが、 ``TextIOWrapper`` (すなわち "
"``mode='r+'`` のモードでオープンされたファイル) では別のバッファリングを行う"
"かもしれません。 ``TextIOWrapper`` でバッファリングを無効化するには、 :func:"
"`io.TextIOWrapper.reconfigure` で ``write_through`` フラグを使うことを検討し"
"てください。 *buffering* 引数が与えられなかった場合、デフォルトのバッファリン"
"グポリシーは以下のように動作します:"

#: ../../library/functions.rst:1194
msgid ""
"Binary files are buffered in fixed-size chunks; the size of the buffer is "
"chosen using a heuristic trying to determine the underlying device's \"block "
"size\" and falling back on :attr:`io.DEFAULT_BUFFER_SIZE`.  On many systems, "
"the buffer will typically be 4096 or 8192 bytes long."
msgstr ""
"バイナリファイルは固定サイズのチャンクでバッファリングされます。バッファサイ"
"ズは、下層のデバイスの「ブロックサイズ」を決定するヒューリスティックを用いて"
"選択され、それが不可能な場合は代わりに :attr:`io.DEFAULT_BUFFER_SIZE` が使わ"
"れます。多くのシステムでは、典型的なバッファサイズは 4096 か 8192 バイト長に"
"なるでしょう。"

#: ../../library/functions.rst:1199
msgid ""
"\"Interactive\" text files (files for which :meth:`~io.IOBase.isatty` "
"returns ``True``) use line buffering.  Other text files use the policy "
"described above for binary files."
msgstr ""
"「対話的な」テキストファイル (:meth:`~io.IOBase.isatty` が ``True`` を返す"
"ファイル) は行バッファリングを使用します。 その他のテキストファイルは、上で説"
"明したバイナリファイル用の方針を使用します。"

#: ../../library/functions.rst:1203
msgid ""
"*encoding* is the name of the encoding used to decode or encode the file. "
"This should only be used in text mode.  The default encoding is platform "
"dependent (whatever :func:`locale.getpreferredencoding` returns), but any :"
"term:`text encoding` supported by Python can be used.  See the :mod:`codecs` "
"module for the list of supported encodings."
msgstr ""
"*encoding* はファイルのエンコードやデコードに使われる :term:`text encoding` "
"の名前です。このオプションはテキストモードでのみ使用してください。デフォルト"
"エンコーディングはプラットフォーム依存 (:func:`locale.getpreferredencoding` "
"が返すもの) ですが、Pythonでサポートされているエンコーディングはどれでも使え"
"ます。詳しくは :mod:`codecs` モジュール内のサポートしているエンコーディングの"
"リストを参照してください。"

#: ../../library/functions.rst:1210
msgid ""
"*errors* is an optional string that specifies how encoding and decoding "
"errors are to be handled—this cannot be used in binary mode. A variety of "
"standard error handlers are available (listed under :ref:`error-handlers`), "
"though any error handling name that has been registered with :func:`codecs."
"register_error` is also valid.  The standard names include:"
msgstr ""
"*errors* はオプションの文字列で、エンコードやデコードでのエラーをどのように扱"
"うかを指定するものです。バイナリモードでは使用できません。様々な標準のエラー"
"ハンドラが使用可能です (:ref:`error-handlers` に列記されています) が、 :func:"
"`codecs.register_error` に登録されているエラー処理の名前も使用可能です。標準"
"のエラーハンドラの名前には、以下のようなものがあります:"

#: ../../library/functions.rst:1218
msgid ""
"``'strict'`` to raise a :exc:`ValueError` exception if there is an encoding "
"error.  The default value of ``None`` has the same effect."
msgstr ""
"``'strict'`` はエンコーディングエラーがあると例外 :exc:`ValueError` を発生さ"
"せます。デフォルト値である ``None`` も同じ効果です。"

#: ../../library/functions.rst:1222
msgid ""
"``'ignore'`` ignores errors.  Note that ignoring encoding errors can lead to "
"data loss."
msgstr ""
"``'ignore'`` はエラーを無視します。エンコーディングエラーを無視することで、"
"データが失われる可能性があることに注意してください。"

#: ../../library/functions.rst:1225
msgid ""
"``'replace'`` causes a replacement marker (such as ``'?'``) to be inserted "
"where there is malformed data."
msgstr ""
"``'replace'`` は、不正な形式のデータが存在した場所に(``'?'`` のような) 置換"
"マーカーを挿入します。"

#: ../../library/functions.rst:1228
msgid ""
"``'surrogateescape'`` will represent any incorrect bytes as low surrogate "
"code units ranging from U+DC80 to U+DCFF. These surrogate code units will "
"then be turned back into the same bytes when the ``surrogateescape`` error "
"handler is used when writing data.  This is useful for processing files in "
"an unknown encoding."
msgstr ""

#: ../../library/functions.rst:1235
msgid ""
"``'xmlcharrefreplace'`` is only supported when writing to a file. Characters "
"not supported by the encoding are replaced with the appropriate XML "
"character reference ``&#nnn;``."
msgstr ""
"``'xmlcharrefreplace'`` はファイルへの書き込み時のみサポートされます。そのエ"
"ンコーディングでサポートされない文字は、``&#nnn;`` 形式の適切な XML 文字参照"
"で置換されます。"

#: ../../library/functions.rst:1239
msgid ""
"``'backslashreplace'`` replaces malformed data by Python's backslashed "
"escape sequences."
msgstr ""
"``'backslashreplace'`` は不正なデータを Python のバックスラッシュ付きのエス"
"ケープシーケンスで置換します。"

#: ../../library/functions.rst:1242
msgid ""
"``'namereplace'`` (also only supported when writing) replaces unsupported "
"characters with ``\\N{...}`` escape sequences."
msgstr ""
"``'namereplace'`` (書き込み時のみサポートされています) はサポートされていない"
"文字を ``\\N{...}`` エスケープシーケンスで置換します。"

#: ../../library/functions.rst:1250
msgid ""
"*newline* determines how to parse newline characters from the stream. It can "
"be ``None``, ``''``, ``'\\n'``, ``'\\r'``, and ``'\\r\\n'``.  It works as "
"follows:"
msgstr ""

#: ../../library/functions.rst:1254
msgid ""
"When reading input from the stream, if *newline* is ``None``, universal "
"newlines mode is enabled.  Lines in the input can end in ``'\\n'``, "
"``'\\r'``, or ``'\\r\\n'``, and these are translated into ``'\\n'`` before "
"being returned to the caller.  If it is ``''``, universal newlines mode is "
"enabled, but line endings are returned to the caller untranslated.  If it "
"has any of the other legal values, input lines are only terminated by the "
"given string, and the line ending is returned to the caller untranslated."
msgstr ""
"ストリームからの入力の読み込み時、*newline* が ``None`` の場合、ユニバーサル"
"改行モードが有効になります。入力中の行は ``'\\n'``, ``'\\r'``, または "
"``'\\r\\n'`` で終わり、呼び出し元に返される前に ``'\\n'`` に変換されます。 "
"``''`` の場合、ユニバーサル改行モードは有効になりますが、行末は変換されずに呼"
"び出し元に返されます。その他の正当な値の場合、入力行は与えられた文字列でのみ"
"終わり、行末は変換されずに呼び出し元に返されます。"

#: ../../library/functions.rst:1262
msgid ""
"When writing output to the stream, if *newline* is ``None``, any ``'\\n'`` "
"characters written are translated to the system default line separator, :"
"data:`os.linesep`.  If *newline* is ``''`` or ``'\\n'``, no translation "
"takes place.  If *newline* is any of the other legal values, any ``'\\n'`` "
"characters written are translated to the given string."
msgstr ""
"ストリームへの出力の書き込み時、*newline* が ``None`` の場合、全ての "
"``'\\n'`` 文字はシステムのデフォルトの行セパレータ :data:`os.linesep` に変換"
"されます。 *newline* が ``''`` または ``'\\n'`` の場合は変換されません。"
"*newline* がその他の正当な値の場合、全ての ``'\\n'`` 文字は与えられた文字列に"
"変換されます。"

#: ../../library/functions.rst:1268
msgid ""
"If *closefd* is ``False`` and a file descriptor rather than a filename was "
"given, the underlying file descriptor will be kept open when the file is "
"closed.  If a filename is given *closefd* must be ``True`` (the default); "
"otherwise, an error will be raised."
msgstr ""
"*closefd* が ``False`` で、ファイル名ではなくてファイル記述子が与えられた場"
"合、下層のファイル記述子はファイルが閉じられた後も開いたままとなります。\n"
"ファイル名が与えられた場合、*closefd* は ``True`` (デフォルト値) でなければな"
"りません。\n"
"そうでない場合エラーが送出されます。"

#: ../../library/functions.rst:1273
msgid ""
"A custom opener can be used by passing a callable as *opener*. The "
"underlying file descriptor for the file object is then obtained by calling "
"*opener* with (*file*, *flags*). *opener* must return an open file "
"descriptor (passing :mod:`os.open` as *opener* results in functionality "
"similar to passing ``None``)."
msgstr ""
"呼び出し可能オブジェクトを *opener* として与えることで、カスタムのオープナー"
"が使えます。そしてファイルオブジェクトの下層のファイル記述子は、*opener* を "
"(*file*, *flags*) で呼び出して得られます。*opener* は開いたファイル記述子を返"
"さなければなりません。 (:mod:`os.open` を *opener* として渡すと、``None`` を"
"渡したのと同様の機能になります)。"

#: ../../library/functions.rst:1279
msgid "The newly created file is :ref:`non-inheritable <fd_inheritance>`."
msgstr "新たに作成されたファイルは :ref:`継承不可 <fd_inheritance>`  です。"

#: ../../library/functions.rst:1281
msgid ""
"The following example uses the :ref:`dir_fd <dir_fd>` parameter of the :func:"
"`os.open` function to open a file relative to a given directory::"
msgstr ""
"次の例は :func:`os.open` 関数の :ref:`dir_fd <dir_fd>` 引数を使い、与えられた"
"ディレクトリからの相対パスで指定されたファイルを開きます::"

#: ../../library/functions.rst:1294
msgid ""
"The type of :term:`file object` returned by the :func:`open` function "
"depends on the mode.  When :func:`open` is used to open a file in a text "
"mode (``'w'``, ``'r'``, ``'wt'``, ``'rt'``, etc.), it returns a subclass of :"
"class:`io.TextIOBase` (specifically :class:`io.TextIOWrapper`).  When used "
"to open a file in a binary mode with buffering, the returned class is a "
"subclass of :class:`io.BufferedIOBase`.  The exact class varies: in read "
"binary mode, it returns an :class:`io.BufferedReader`; in write binary and "
"append binary modes, it returns an :class:`io.BufferedWriter`, and in read/"
"write mode, it returns an :class:`io.BufferedRandom`.  When buffering is "
"disabled, the raw stream, a subclass of :class:`io.RawIOBase`, :class:`io."
"FileIO`, is returned."
msgstr ""
":func:`open` 関数が返す :term:`file object` の型はモードに依存します。 :func:"
"`open` をファイルをテキストモード (``'w'``, ``'r'``, ``'wt'``, ``'rt'``, な"
"ど) で開くのに使ったときは :class:`io.TextIOBase` (特に :class:`io."
"TextIOWrapper`) のサブクラスを返します。\n"
"ファイルをバッファリング付きのバイナリモードで開くのに使ったときは :class:"
"`io.BufferedIOBase` のサブクラスを返します。\n"
"実際のクラスは様々です。\n"
"読み込みバイナリモードでは :class:`io.BufferedReader` を返します。\n"
"書き込みバイナリモードや追記バイナリモードでは :class:`io.BufferedWriter` を"
"返します。\n"
"読み書きモードでは :class:`io.BufferedRandom` を返します。\n"
"バッファリングが無効なときはrawストリーム、すなわち :class:`io.RawIOBase` の"
"サブクラスである :class:`io.FileIO` を返します。"

#: ../../library/functions.rst:1315
msgid ""
"See also the file handling modules, such as :mod:`fileinput`, :mod:`io` "
"(where :func:`open` is declared), :mod:`os`, :mod:`os.path`, :mod:"
"`tempfile`, and :mod:`shutil`."
msgstr ""
":mod:`fileinput` 、(:func:`open` が宣言された場所である) :mod:`io` 、 :mod:"
"`os` 、 :mod:`os.path` 、 :mod:`tempfile` 、 :mod:`shutil` などの、ファイル操"
"作モジュールも参照してください。"

#: ../../library/functions.rst:1319
msgid ""
"Raises an :ref:`auditing event <auditing>` ``open`` with arguments ``file``, "
"``mode``, ``flags``."
msgstr ""
"引数 ``file``, ``mode``, ``flags`` を指定して :ref:`監査イベント <auditing>` "
"``open`` を送出します。 "

#: ../../library/functions.rst:1321
msgid ""
"The ``mode`` and ``flags`` arguments may have been modified or inferred from "
"the original call."
msgstr ""

#: ../../library/functions.rst:1327
msgid "The *opener* parameter was added."
msgstr "*opener* 引数を追加しました。"

#: ../../library/functions.rst:1328
msgid "The ``'x'`` mode was added."
msgstr "``'x'`` モードを追加しました。"

#: ../../library/functions.rst:1329
msgid ":exc:`IOError` used to be raised, it is now an alias of :exc:`OSError`."
msgstr ""
"以前は :exc:`IOError` が送出されました; それは現在 :exc:`OSError` のエイリア"
"スです。"

#: ../../library/functions.rst:1330
msgid ""
":exc:`FileExistsError` is now raised if the file opened in exclusive "
"creation mode (``'x'``) already exists."
msgstr ""
"既存のファイルを 排他的生成モード(``'x'``)で開いた場合、 :exc:"
"`FileExistsError` を送出するようになりました。"

#: ../../library/functions.rst:1336
msgid "The file is now non-inheritable."
msgstr "ファイルが継承不可になりました。"

#: ../../library/functions.rst:1340
msgid "The ``'U'`` mode."
msgstr "``'U'`` モード。"

#: ../../library/functions.rst:1345
msgid ""
"If the system call is interrupted and the signal handler does not raise an "
"exception, the function now retries the system call instead of raising an :"
"exc:`InterruptedError` exception (see :pep:`475` for the rationale)."
msgstr ""
"システムコールが中断されシグナルハンドラが例外を送出しなかった場合、この関数"
"は :exc:`InterruptedError` 例外を送出する代わりにシステムコールを再試行するよ"
"うになりました (論拠については :pep:`475` を参照してください)。"

#: ../../library/functions.rst:1348
msgid "The ``'namereplace'`` error handler was added."
msgstr "``'namereplace'`` エラーハンドラが追加されました。"

#: ../../library/functions.rst:1353
msgid "Support added to accept objects implementing :class:`os.PathLike`."
msgstr ""
":class:`os.PathLike` を実装したオブジェクトを受け入れるようになりました。"

#: ../../library/functions.rst:1354
msgid ""
"On Windows, opening a console buffer may return a subclass of :class:`io."
"RawIOBase` other than :class:`io.FileIO`."
msgstr ""
"Windowsでは、コンソールバッファのオープンは、:class:`io.FileIO` ではなく、:"
"class:`io.RawIOBase` のサブクラスを返すでしょう。"

#: ../../library/functions.rst:1359
msgid ""
"Given a string representing one Unicode character, return an integer "
"representing the Unicode code point of that character.  For example, "
"``ord('a')`` returns the integer ``97`` and ``ord('€')`` (Euro sign) returns "
"``8364``.  This is the inverse of :func:`chr`."
msgstr ""
"1 文字の Unicode 文字を表す文字列に対し、その文字の Unicode コードポイントを"
"表す整数を返します。例えば、 ``ord('a')`` は整数 ``97`` を返し、 "
"``ord('€')`` (ユーロ記号) は ``8364`` を返します。これは :func:`chr` の逆で"
"す。"

#: ../../library/functions.rst:1367
msgid ""
"Return *base* to the power *exp*; if *mod* is present, return *base* to the "
"power *exp*, modulo *mod* (computed more efficiently than ``pow(base, exp) % "
"mod``). The two-argument form ``pow(base, exp)`` is equivalent to using the "
"power operator: ``base**exp``."
msgstr ""
"*base* の *exp* 乗を返します; *mod* があれば、*base* の *exp* 乗に対する "
"*mod* の剰余を返します (``pow(base, exp) % mod`` より効率よく計算されます)。"
"二引数の形式 ``pow(base, exp)`` は、冪乗演算子を使った ``base**exp`` と等価で"
"す。"

#: ../../library/functions.rst:1372
msgid ""
"The arguments must have numeric types.  With mixed operand types, the "
"coercion rules for binary arithmetic operators apply.  For :class:`int` "
"operands, the result has the same type as the operands (after coercion) "
"unless the second argument is negative; in that case, all arguments are "
"converted to float and a float result is delivered.  For example, ``pow(10, "
"2)`` returns ``100``, but ``pow(10, -2)`` returns ``0.01``.  For a negative "
"base of type :class:`int` or :class:`float` and a non-integral exponent, a "
"complex result is delivered.  For example, ``pow(-9, 0.5)`` returns a value "
"close to ``3j``."
msgstr ""

#: ../../library/functions.rst:1382
msgid ""
"For :class:`int` operands *base* and *exp*, if *mod* is present, *mod* must "
"also be of integer type and *mod* must be nonzero. If *mod* is present and "
"*exp* is negative, *base* must be relatively prime to *mod*. In that case, "
"``pow(inv_base, -exp, mod)`` is returned, where *inv_base* is an inverse to "
"*base* modulo *mod*."
msgstr ""

#: ../../library/functions.rst:1388
msgid "Here's an example of computing an inverse for ``38`` modulo ``97``::"
msgstr ""

#: ../../library/functions.rst:1395
msgid ""
"For :class:`int` operands, the three-argument form of ``pow`` now allows the "
"second argument to be negative, permitting computation of modular inverses."
msgstr ""

#: ../../library/functions.rst:1400
msgid ""
"Allow keyword arguments.  Formerly, only positional arguments were supported."
msgstr ""

#: ../../library/functions.rst:1407
msgid ""
"Print *objects* to the text stream *file*, separated by *sep* and followed "
"by *end*.  *sep*, *end*, *file*, and *flush*, if present, must be given as "
"keyword arguments."
msgstr ""
"*objects* を *sep* で区切りながらテキストストリーム *file* に表示し、最後に "
"*end* を表示します。*sep* 、 *end* 、 *file* 、 *flush* を与える場合、キー"
"ワード引数として与える必要があります。"

#: ../../library/functions.rst:1411
msgid ""
"All non-keyword arguments are converted to strings like :func:`str` does and "
"written to the stream, separated by *sep* and followed by *end*.  Both *sep* "
"and *end* must be strings; they can also be ``None``, which means to use the "
"default values.  If no *objects* are given, :func:`print` will just write "
"*end*."
msgstr ""
"キーワードなしの引数はすべて、 :func:`str` がするように文字列に変換され、 "
"*sep* で区切られながらストリームに書き出され、最後に *end* が続きます。 "
"*sep* と *end* の両方とも、文字列でなければなりません。これらを ``None`` にす"
"ると、デフォルトの値が使われます。 *objects* が与えられなければ、 :func:"
"`print` は *end* だけを書き出します。"

#: ../../library/functions.rst:1417
msgid ""
"The *file* argument must be an object with a ``write(string)`` method; if it "
"is not present or ``None``, :data:`sys.stdout` will be used.  Since printed "
"arguments are converted to text strings, :func:`print` cannot be used with "
"binary mode file objects.  For these, use ``file.write(...)`` instead."
msgstr ""
"*file* 引数は、 ``write(string)`` メソッドを持つオブジェクトでなければなりま"
"せん。指定されないか、 ``None`` である場合、 :data:`sys.stdout` が使われま"
"す。表示される引数は全てテキスト文字列に変換されますから、 :func:`print` はバ"
"イナリモードファイルオブジェクトには使用できません。代わりに ``file."
"write(...)`` を使ってください。"

#: ../../library/functions.rst:1422
msgid ""
"Whether the output is buffered is usually determined by *file*, but if the "
"*flush* keyword argument is true, the stream is forcibly flushed."
msgstr ""
"出力がバッファ化されるかどうかは通常 *file* で決まりますが、*flush* キーワー"
"ド引数が真ならストリームは強制的にフラッシュされます。"

#: ../../library/functions.rst:1425
msgid "Added the *flush* keyword argument."
msgstr "キーワード引数 *flush* が追加されました。"

#: ../../library/functions.rst:1431
msgid "Return a property attribute."
msgstr "property 属性を返します。"

#: ../../library/functions.rst:1433
msgid ""
"*fget* is a function for getting an attribute value.  *fset* is a function "
"for setting an attribute value. *fdel* is a function for deleting an "
"attribute value.  And *doc* creates a docstring for the attribute."
msgstr ""
"*fget* は属性値を取得するための関数です。*fset* は属性値を設定するための関数"
"です。*fdel* は属性値を削除するための関数です。*doc* は属性の docstring を作"
"成します。"

#: ../../library/functions.rst:1437
msgid "A typical use is to define a managed attribute ``x``::"
msgstr "典型的な使用法は、属性 ``x`` の処理の定義です::"

#: ../../library/functions.rst:1454
msgid ""
"If *c* is an instance of *C*, ``c.x`` will invoke the getter, ``c.x = "
"value`` will invoke the setter, and ``del c.x`` the deleter."
msgstr ""
"*c* が *C* のインスタンスならば、``c.x`` は getter を呼び出し、``c.x = "
"value`` は setter を、``del c.x`` は deleter を呼び出します。"

#: ../../library/functions.rst:1457
msgid ""
"If given, *doc* will be the docstring of the property attribute. Otherwise, "
"the property will copy *fget*'s docstring (if it exists).  This makes it "
"possible to create read-only properties easily using :func:`property` as a :"
"term:`decorator`::"
msgstr ""
"*doc* は、与えられれば property 属性のドキュメント文字列になります。\n"
"与えられなければ、 property は *fget* のドキュメント文字列 (もしあれば) をコ"
"ピーします。\n"
"そのため :func:`property` を :term:`デコレータ <decorator>` として使えば、読"
"み出し専用 property を作るのは容易です::"

#: ../../library/functions.rst:1470
msgid ""
"The ``@property`` decorator turns the :meth:`voltage` method into a "
"\"getter\" for a read-only attribute with the same name, and it sets the "
"docstring for *voltage* to \"Get the current voltage.\""
msgstr ""
"``@property`` デコレータは :meth:`voltage` を同じ名前のまま 読み出し専用属性"
"の \"getter\" にし、*voltage* のドキュメント文字列を \"Get the current "
"voltage.\" に設定します。"

#: ../../library/functions.rst:1474
msgid ""
"A property object has :attr:`~property.getter`, :attr:`~property.setter`, "
"and :attr:`~property.deleter` methods usable as decorators that create a "
"copy of the property with the corresponding accessor function set to the "
"decorated function.  This is best explained with an example::"
msgstr ""
"property オブジェクトは :attr:`~property.getter`, :attr:`~property.setter`, :"
"attr:`~property.deleter` メソッドを持っています。これらのメソッドをデコレータ"
"として使うと、対応するアクセサ関数がデコレートされた関数に設定された、 "
"property のコピーを作成できます。これを一番分かりやすく説明する例があります::"

#: ../../library/functions.rst:1496
msgid ""
"This code is exactly equivalent to the first example.  Be sure to give the "
"additional functions the same name as the original property (``x`` in this "
"case.)"
msgstr ""
"このコードは最初の例と等価です。追加の関数には、必ず元の property と同じ名前 "
"(この例では ``x``) を与えて下さい。"

#: ../../library/functions.rst:1500
msgid ""
"The returned property object also has the attributes ``fget``, ``fset``, and "
"``fdel`` corresponding to the constructor arguments."
msgstr ""
"返される property オブジェクトも、コンストラクタの引数に対応した ``fget``, "
"``fset``, および ``fdel`` 属性を持ちます。"

#: ../../library/functions.rst:1503
msgid "The docstrings of property objects are now writeable."
msgstr "属性オブジェクトのドックストリングが書き込み可能になりました。"

#: ../../library/functions.rst:1512
msgid ""
"Rather than being a function, :class:`range` is actually an immutable "
"sequence type, as documented in :ref:`typesseq-range` and :ref:`typesseq`."
msgstr ""
":class:`range` は、実際には関数ではなくイミュータブルなシーケンス型で、 :ref:"
"`typesseq-range` と :ref:`typesseq` にドキュメント化されています。"

#: ../../library/functions.rst:1518
msgid ""
"Return a string containing a printable representation of an object.  For "
"many types, this function makes an attempt to return a string that would "
"yield an object with the same value when passed to :func:`eval`; otherwise, "
"the representation is a string enclosed in angle brackets that contains the "
"name of the type of the object together with additional information often "
"including the name and address of the object.  A class can control what this "
"function returns for its instances by defining a :meth:`__repr__` method. "
"If :func:`sys.displayhook` is not accessible, this function will raise :exc:"
"`RuntimeError`."
msgstr ""
"オブジェクトの印字可能な表現を含む文字列を返します。この関数は多くの型につい"
"て、 :func:`eval` に渡されたときと同じ値を持つようなオブジェクトを表す文字列"
"を生成しようとします。そうでない場合は、山括弧に囲まれたオブジェクトの型の名"
"前と追加の情報 (大抵の場合はオブジェクトの名前とアドレスを含みます) を返しま"
"す。クラスは、 :meth:`__repr__` メソッドを定義することで、この関数によりその"
"クラスのインスタンスが返すものを制御することができます。:func:`sys."
"displayhook` にアクセスできない場合、この関数は :exc:`RuntimeError` を送出し"
"ます。"

#: ../../library/functions.rst:1531
msgid ""
"Return a reverse :term:`iterator`.  *seq* must be an object which has a :"
"meth:`__reversed__` method or supports the sequence protocol (the :meth:"
"`__len__` method and the :meth:`__getitem__` method with integer arguments "
"starting at ``0``)."
msgstr ""
"要素を逆順に取り出すイテレータ (reverse :term:`iterator`) を返します。 *seq* "
"は :meth:`__reversed__` メソッドを持つか、シーケンス型プロトコル (:meth:"
"`__len__` メソッド、および、 ``0`` 以上の整数を引数とする :meth:"
"`__getitem__` メソッド) をサポートするオブジェクトでなければなりません。"

#: ../../library/functions.rst:1539
msgid ""
"Return *number* rounded to *ndigits* precision after the decimal point.  If "
"*ndigits* is omitted or is ``None``, it returns the nearest integer to its "
"input."
msgstr ""
"*number* の小数部を *ndigists* 桁に丸めた値を返します。*ndigits* が省略された"
"り、``None`` だった場合、入力値に最も近い整数を返します。"

#: ../../library/functions.rst:1543
msgid ""
"For the built-in types supporting :func:`round`, values are rounded to the "
"closest multiple of 10 to the power minus *ndigits*; if two multiples are "
"equally close, rounding is done toward the even choice (so, for example, "
"both ``round(0.5)`` and ``round(-0.5)`` are ``0``, and ``round(1.5)`` is "
"``2``).  Any integer value is valid for *ndigits* (positive, zero, or "
"negative).  The return value is an integer if *ndigits* is omitted or "
"``None``. Otherwise, the return value has the same type as *number*."
msgstr ""
":func:`round` をサポートする組み込み型では、値は 10 のマイナス *ndigits* 乗の"
"倍数の中で最も近いものに丸められます; 二つの倍数が同じだけ近いなら、偶数を選"
"ぶ方に (そのため、例えば ``round(0.5)`` と ``round(-0.5)`` は両方とも ``0`` "
"に、 ``round(1.5)`` は ``2`` に) 丸められます。\n"
"*ndigits* には任意の整数値が有効となります (正の整数、ゼロ、負の整数)。\n"
"返り値は *ndigits* が指定されていないか ``None`` の場合は整数、そうでなければ"
"返り値は *number* と同じ型です。"

#: ../../library/functions.rst:1552
msgid ""
"For a general Python object ``number``, ``round`` delegates to ``number."
"__round__``."
msgstr ""
"一般的な Python オブジェクト ``number`` に対して、``round`` は処理を `number."
"__round__` に移譲します。"

#: ../../library/functions.rst:1557
msgid ""
"The behavior of :func:`round` for floats can be surprising: for example, "
"``round(2.675, 2)`` gives ``2.67`` instead of the expected ``2.68``. This is "
"not a bug: it's a result of the fact that most decimal fractions can't be "
"represented exactly as a float.  See :ref:`tut-fp-issues` for more "
"information."
msgstr ""
"浮動小数点数に対する :func:`round` の振る舞いは意外なものかもしれません: 例え"
"ば、 ``round(2.675, 2)`` は予想通りの ``2.68`` ではなく ``2.67`` を与えます。"
"これはバグではありません: これはほとんどの小数が浮動小数点数で正確に表せない"
"ことの結果です。詳しくは :ref:`tut-fp-issues` を参照してください。"

#: ../../library/functions.rst:1568
msgid ""
"Return a new :class:`set` object, optionally with elements taken from "
"*iterable*.  ``set`` is a built-in class.  See :class:`set` and :ref:`types-"
"set` for documentation about this class."
msgstr ""
"オプションで *iterable* の要素を持つ、新しい :class:`set` オブジェクトを返し"
"ます。 ``set`` は組み込みクラスです。このクラスについて詳しい情報は :class:"
"`set` や :ref:`types-set` を参照してください。"

#: ../../library/functions.rst:1572
msgid ""
"For other containers see the built-in :class:`frozenset`, :class:`list`, :"
"class:`tuple`, and :class:`dict` classes, as well as the :mod:`collections` "
"module."
msgstr ""
"他のコンテナについては :mod:`collections` モジュールや組み込みの :class:"
"`frozenset` 、 :class:`list` 、 :class:`tuple` 、 :class:`dict` クラスを参照"
"してください。"

#: ../../library/functions.rst:1579
msgid ""
"This is the counterpart of :func:`getattr`.  The arguments are an object, a "
"string, and an arbitrary value.  The string may name an existing attribute "
"or a new attribute.  The function assigns the value to the attribute, "
"provided the object allows it.  For example, ``setattr(x, 'foobar', 123)`` "
"is equivalent to ``x.foobar = 123``."
msgstr ""
":func:`getattr` の相方です。引数はオブジェクト、文字列、それから任意の値で"
"す。文字列は既存の属性または新たな属性の名前にできます。この関数は指定したオ"
"ブジェクトが許せば、値を属性に関連付けます。例えば、 ``setattr(x, 'foobar', "
"123)`` は ``x.foobar = 123`` と等価です。"

#: ../../library/functions.rst:1585
msgid ""
"*name* need not be a Python identifier as defined in :ref:`identifiers` "
"unless the object chooses to enforce that, for example in a custom :meth:"
"`~object.__getattribute__` or via :attr:`~object.__slots__`. An attribute "
"whose name is not an identifier will not be accessible using the dot "
"notation, but is accessible through :func:`getattr` etc.."
msgstr ""

#: ../../library/functions.rst:1593
msgid ""
"Since :ref:`private name mangling <private-name-mangling>` happens at "
"compilation time, one must manually mangle a private attribute's (attributes "
"with two leading underscores) name in order to set it with :func:`setattr`."
msgstr ""
":ref:`プライベートな名前のマングリング <private-name-mangling>` はコンパイル"
"時に行われます。そのため、プライベートな属性 (先頭に2つのアンダースコアを伴う"
"名前を持つ属性) の値を :func:`setattr` でセットするためには、属性名を手動でマ"
"ングリングする必要があります。"

#: ../../library/functions.rst:1602
msgid ""
"Return a :term:`slice` object representing the set of indices specified by "
"``range(start, stop, step)``.  The *start* and *step* arguments default to "
"``None``.  Slice objects have read-only data attributes :attr:`~slice."
"start`, :attr:`~slice.stop`, and :attr:`~slice.step` which merely return the "
"argument values (or their default).  They have no other explicit "
"functionality; however, they are used by NumPy and other third-party "
"packages. Slice objects are also generated when extended indexing syntax is "
"used.  For example: ``a[start:stop:step]`` or ``a[start:stop, i]``.  See :"
"func:`itertools.islice` for an alternate version that returns an iterator."
msgstr ""
"``range(start, stop, step)`` で指定されるインデクスの集合を表す、 :term:`スラ"
"イス <slice>` オブジェクトを返します。引数 *start* および *step* はデフォルト"
"では ``None`` です。スライスオブジェクトは読み出し専用の属性 :attr:`~slice."
"start`、:attr:`~slice.stop` および :attr:`~slice.step` を持ち、これらは単に引"
"数で使われた 値 (またはデフォルト値) を返します。これらの値には、その他のはっ"
"きりと した機能はありません。しかしながら、これらの値は NumPy および、その他"
"のサードパーティ製パッケージで利用されています。スライスオブジェクトは拡張さ"
"れたインデクス指定構文が使われる際にも生成されます。例えば ``a[start:stop:"
"step]`` や ``a[start:stop, i]`` です。この関数の代替となるイテレータを返す関"
"数、:func:`itertools.islice` も参照してください。"

#: ../../library/functions.rst:1615
msgid "Return a new sorted list from the items in *iterable*."
msgstr "*iterable* の要素を並べ替えた新たなリストを返します。"

#: ../../library/functions.rst:1617
msgid ""
"Has two optional arguments which must be specified as keyword arguments."
msgstr ""
"2 つのオプション引数があり、これらはキーワード引数として指定されなければなり"
"ません。"

#: ../../library/functions.rst:1619
msgid ""
"*key* specifies a function of one argument that is used to extract a "
"comparison key from each element in *iterable* (for example, ``key=str."
"lower``).  The default value is ``None`` (compare the elements directly)."
msgstr ""
"*key* には 1 引数関数を指定します。これは *iterable* の各要素から比較キーを展"
"開するのに使われます (例えば、 ``key=str.lower`` のように指定します)。\n"
"デフォルト値は ``None`` です (要素を直接比較します)。"

#: ../../library/functions.rst:1623
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the list elements "
"are sorted as if each comparison were reversed."
msgstr ""
"*reverse* は真偽値です。 ``True`` がセットされた場合、リストの要素は個々の比"
"較が反転したものとして並び替えられます。"

#: ../../library/functions.rst:1626
msgid ""
"Use :func:`functools.cmp_to_key` to convert an old-style *cmp* function to a "
"*key* function."
msgstr ""
"旧式の *cmp* 関数を *key* 関数に変換するには :func:`functools.cmp_to_key` を"
"使用してください。"

#: ../../library/functions.rst:1629
msgid ""
"The built-in :func:`sorted` function is guaranteed to be stable. A sort is "
"stable if it guarantees not to change the relative order of elements that "
"compare equal --- this is helpful for sorting in multiple passes (for "
"example, sort by department, then by salary grade)."
msgstr ""
"組み込みの :func:`sorted` 関数は安定なことが保証されています。同等な要素の相"
"対順序を変更しないことが保証されていれば、ソートは安定です。これは複数のパス"
"でソートを行なうのに役立ちます（例えば部署でソートしてから給与の等級でソート"
"する場合）。"

#: ../../library/functions.rst:1634
msgid ""
"The sort algorithm uses only ``<`` comparisons between items.  While "
"defining an :meth:`~object.__lt__` method will suffice for sorting, :PEP:`8` "
"recommends that all six :ref:`rich comparisons <comparisons>` be "
"implemented.  This will help avoid bugs when using the same data with other "
"ordering tools such as :func:`max` that rely on a different underlying "
"method.  Implementing all six comparisons also helps avoid confusion for "
"mixed type comparisons which can call reflected the :meth:`~object.__gt__` "
"method."
msgstr ""

#: ../../library/functions.rst:1643
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr ""
"ソートの例と簡単なチュートリアルは :ref:`sortinghowto` を参照して下さい。"

#: ../../library/functions.rst:1647
msgid "Transform a method into a static method."
msgstr "メソッドを静的メソッドへ変換します。"

#: ../../library/functions.rst:1649
msgid ""
"A static method does not receive an implicit first argument. To declare a "
"static method, use this idiom::"
msgstr ""
"静的メソッドは暗黙の第一引数を受け取りません。静的メソッドを宣言するには、こ"
"のイディオムを使ってください::"

#: ../../library/functions.rst:1656
msgid ""
"The ``@staticmethod`` form is a function :term:`decorator` -- see :ref:"
"`function` for details."
msgstr ""
"``@staticmethod`` 形式は関数 :term:`デコレータ <decorator>` です。詳しくは :"
"ref:`function` を参照してください。"

#: ../../library/functions.rst:1659
msgid ""
"A static method can be called either on the class (such as ``C.f()``) or on "
"an instance (such as ``C().f()``). Moreover, they can be called as regular "
"functions (such as ``f()``)."
msgstr ""

#: ../../library/functions.rst:1663
msgid ""
"Static methods in Python are similar to those found in Java or C++. Also, "
"see :func:`classmethod` for a variant that is useful for creating alternate "
"class constructors."
msgstr ""
"Python における静的メソッドは Java や C++ における静的メソッドと類似していま"
"す。クラスコンストラクタの代替を生成するのに役立つ変種、 :func:`classmethod` "
"も参照してください。"

#: ../../library/functions.rst:1667
msgid ""
"Like all decorators, it is also possible to call ``staticmethod`` as a "
"regular function and do something with its result.  This is needed in some "
"cases where you need a reference to a function from a class body and you "
"want to avoid the automatic transformation to instance method.  For these "
"cases, use this idiom::"
msgstr ""
"あらゆるデコレータと同じく、 ``staticmethod`` は普通の関数のように呼べ、その"
"返り値で処理が行えます。\n"
"この機能は、クラス本体から関数を参照する必要があり、かつ、インスタンスメソッ"
"ドに自動変換されるのを避けたいケースで必要になります。\n"
"そのようなケースでは、このイディオムが使えます::"

#: ../../library/functions.rst:1679
msgid "For more information on static methods, see :ref:`types`."
msgstr "静的メソッドについて詳しい情報は :ref:`types` を参照してください。"

#: ../../library/functions.rst:1681
msgid ""
"Static methods now inherit the method attributes (``__module__``, "
"``__name__``, ``__qualname__``, ``__doc__`` and ``__annotations__``), have a "
"new ``__wrapped__`` attribute, and are now callable as regular functions."
msgstr ""

#: ../../library/functions.rst:1696
msgid ""
"Return a :class:`str` version of *object*.  See :func:`str` for details."
msgstr ""
"*object* の :class:`str` 版を返します。詳細は :func:`str` を参照してくださ"
"い。"

#: ../../library/functions.rst:1698
msgid ""
"``str`` is the built-in string :term:`class`.  For general information about "
"strings, see :ref:`textseq`."
msgstr ""
"``str`` は組み込みの文字列 :term:`クラス<class>` です。文字列に関する一般的な"
"情報は、:ref:`textseq` を参照してください。"

#: ../../library/functions.rst:1704
msgid ""
"Sums *start* and the items of an *iterable* from left to right and returns "
"the total.  The *iterable*'s items are normally numbers, and the start value "
"is not allowed to be a string."
msgstr ""
"*start* と *iterable* の要素を左から右へ合計し、総和を返します。 *iterable* "
"の要素は通常は数値で、start の値は文字列であってはなりません。"

#: ../../library/functions.rst:1708
msgid ""
"For some use cases, there are good alternatives to :func:`sum`. The "
"preferred, fast way to concatenate a sequence of strings is by calling ``''."
"join(sequence)``.  To add floating point values with extended precision, "
"see :func:`math.fsum`\\.  To concatenate a series of iterables, consider "
"using :func:`itertools.chain`."
msgstr ""
"使う場面によっては、 :func:`sum` よりもいい選択肢があります。文字列からなる"
"シーケンスを結合する高速かつ望ましい方法は ``''.join(sequence)`` を呼ぶことで"
"す。浮動小数点数値を拡張された精度で加算するには、 :func:`math.fsum` を参照し"
"てください。一連のイテラブルを連結するには、 :func:`itertools.chain` の使用を"
"考えてください。"

#: ../../library/functions.rst:1714
msgid "The *start* parameter can be specified as a keyword argument."
msgstr ""
"*start* パラメータをキーワード引数として指定することができるようになりまし"
"た。"

#: ../../library/functions.rst:1719
msgid ""
"Return a proxy object that delegates method calls to a parent or sibling "
"class of *type*.  This is useful for accessing inherited methods that have "
"been overridden in a class."
msgstr ""
"メソッドの呼び出しを *type* の親または兄弟クラスに委譲するプロキシオブジェク"
"トを返します。これはクラスの中でオーバーライドされた継承メソッドにアクセスす"
"るのに便利です。"

#: ../../library/functions.rst:1723
msgid ""
"The *object-or-type* determines the :term:`method resolution order` to be "
"searched.  The search starts from the class right after the *type*."
msgstr ""

#: ../../library/functions.rst:1727
msgid ""
"For example, if :attr:`~class.__mro__` of *object-or-type* is ``D -> B -> C -"
"> A -> object`` and the value of *type* is ``B``, then :func:`super` "
"searches ``C -> A -> object``."
msgstr ""

#: ../../library/functions.rst:1731
msgid ""
"The :attr:`~class.__mro__` attribute of the *object-or-type* lists the "
"method resolution search order used by both :func:`getattr` and :func:"
"`super`.  The attribute is dynamic and can change whenever the inheritance "
"hierarchy is updated."
msgstr ""
"*object-or-type* の :attr:`~class.__mro__` 属性は、 :func:`getattr` と :func:"
"`super` の 両方で使われる、メソッド解決の探索順序を列記します。 この属性は動"
"的で、継承の階層構造が更新されれば、随時変化します。"

#: ../../library/functions.rst:1736
msgid ""
"If the second argument is omitted, the super object returned is unbound.  If "
"the second argument is an object, ``isinstance(obj, type)`` must be true.  "
"If the second argument is a type, ``issubclass(type2, type)`` must be true "
"(this is useful for classmethods)."
msgstr ""
"第 2 引数が省かれたなら、返されるスーパーオブジェクトは束縛されません。第 2 "
"引数がオブジェクトであれば、 ``isinstance(obj, type)`` は真でなければなりませ"
"ん。第 2 引数が型であれば、 ``issubclass(type2, type)`` は真でなければなりま"
"せん (これはクラスメソッドに役に立つでしょう)。"

#: ../../library/functions.rst:1741
msgid ""
"There are two typical use cases for *super*.  In a class hierarchy with "
"single inheritance, *super* can be used to refer to parent classes without "
"naming them explicitly, thus making the code more maintainable.  This use "
"closely parallels the use of *super* in other programming languages."
msgstr ""
"*super* の典型的な用途は 2 つあります。第一に、単継承のクラス階層構造で "
"*super* は名前を明示することなく親クラスを参照するのに使え、それゆえコードを"
"メンテナンスしやすくなります。この用途は他のプログラミング言語で見られる "
"*super* の用途によく似ています。"

#: ../../library/functions.rst:1746
msgid ""
"The second use case is to support cooperative multiple inheritance in a "
"dynamic execution environment.  This use case is unique to Python and is not "
"found in statically compiled languages or languages that only support single "
"inheritance.  This makes it possible to implement \"diamond diagrams\" where "
"multiple base classes implement the same method.  Good design dictates that "
"such implementations have the same calling signature in every case (because "
"the order of calls is determined at runtime, because that order adapts to "
"changes in the class hierarchy, and because that order can include sibling "
"classes that are unknown prior to runtime)."
msgstr ""

#: ../../library/functions.rst:1756
msgid "For both use cases, a typical superclass call looks like this::"
msgstr ""
"両方の用途において、典型的なスーパークラスの呼び出しは次のようになります::"

#: ../../library/functions.rst:1763
msgid ""
"In addition to method lookups, :func:`super` also works for attribute "
"lookups.  One possible use case for this is calling :term:`descriptors "
"<descriptor>` in a parent or sibling class."
msgstr ""

#: ../../library/functions.rst:1767
msgid ""
"Note that :func:`super` is implemented as part of the binding process for "
"explicit dotted attribute lookups such as ``super().__getitem__(name)``. It "
"does so by implementing its own :meth:`__getattribute__` method for "
"searching classes in a predictable order that supports cooperative multiple "
"inheritance. Accordingly, :func:`super` is undefined for implicit lookups "
"using statements or operators such as ``super()[name]``."
msgstr ""
"なお、:func:`super` は ``super().__getitem__(name)`` のような明示的なドット表"
"記属性探索の束縛処理の一部として実装されています。これは、 :meth:"
"`__getattribute__` メソッドを予測可能な順序でクラスを検索するように実装し、協"
"調的な多重継承をサポートすることで実現されています。従って、 :func:`super` は"
"文や ``super()[name]`` のような演算子を使った暗黙の探索向けには定義されていま"
"せん。"

#: ../../library/functions.rst:1774
msgid ""
"Also note that, aside from the zero argument form, :func:`super` is not "
"limited to use inside methods.  The two argument form specifies the "
"arguments exactly and makes the appropriate references.  The zero argument "
"form only works inside a class definition, as the compiler fills in the "
"necessary details to correctly retrieve the class being defined, as well as "
"accessing the current instance for ordinary methods."
msgstr ""
"また、 :func:`super` の使用は引数無しの形式を除きメソッド内部に限定されないこ"
"とにも注目して下さい。2引数の形式は、必要な要素を正確に指定するので、適当な参"
"照を作ることができます。クラス定義中における引数無しの形式は、定義されている"
"クラスを取り出すのに必要な詳細を、通常の方法で現在のインスタンスにアクセスす"
"るようにコンパイラが埋めるのではたらきます。"

#: ../../library/functions.rst:1781
msgid ""
"For practical suggestions on how to design cooperative classes using :func:"
"`super`, see `guide to using super() <https://rhettinger.wordpress."
"com/2011/05/26/super-considered-super/>`_."
msgstr ""
":func:`super` を用いて協調的なクラスを設計する方法の実践的な提案は、 `guide "
"to using super() <https://rhettinger.wordpress.com/2011/05/26/super-"
"considered-super/>`_ を参照してください。"

#: ../../library/functions.rst:1790
msgid ""
"Rather than being a function, :class:`tuple` is actually an immutable "
"sequence type, as documented in :ref:`typesseq-tuple` and :ref:`typesseq`."
msgstr ""
":class:`tuple` は、実際は関数ではなくイミュータブルなシーケンス型で、:ref:"
"`typesseq-tuple` と :ref:`typesseq` にドキュメント化されています。"

#: ../../library/functions.rst:1799
msgid ""
"With one argument, return the type of an *object*.  The return value is a "
"type object and generally the same object as returned by :attr:`object."
"__class__ <instance.__class__>`."
msgstr ""
"引数が1つだけの場合、*object* の型を返します。返り値は型オブジェクトで、一般"
"に :attr:`object.__class__ <instance.__class__>` によって返されるのと同じオブ"
"ジェクトです。"

#: ../../library/functions.rst:1803
msgid ""
"The :func:`isinstance` built-in function is recommended for testing the type "
"of an object, because it takes subclasses into account."
msgstr ""
"オブジェクトの型の判定には、 :func:`isinstance` 組み込み関数を使うことが推奨"
"されます。これはサブクラスを考慮するからです。"

#: ../../library/functions.rst:1807
msgid ""
"With three arguments, return a new type object.  This is essentially a "
"dynamic form of the :keyword:`class` statement. The *name* string is the "
"class name and becomes the :attr:`~definition.__name__` attribute. The "
"*bases* tuple contains the base classes and becomes the :attr:`~class."
"__bases__` attribute; if empty, :class:`object`, the ultimate base of all "
"classes, is added.  The *dict* dictionary contains attribute and method "
"definitions for the class body; it may be copied or wrapped before becoming "
"the :attr:`~object.__dict__` attribute. The following two statements create "
"identical :class:`type` objects:"
msgstr ""

#: ../../library/functions.rst:1822
msgid "See also :ref:`bltin-type-objects`."
msgstr ":ref:`bltin-type-objects` も参照してください。"

#: ../../library/functions.rst:1824
msgid ""
"Keyword arguments provided to the three argument form are passed to the "
"appropriate metaclass machinery (usually :meth:`~object.__init_subclass__`) "
"in the same way that keywords in a class definition (besides *metaclass*) "
"would."
msgstr ""

#: ../../library/functions.rst:1829
msgid "See also :ref:`class-customization`."
msgstr ":ref:`class-customization` も参照してください。"

#: ../../library/functions.rst:1831
msgid ""
"Subclasses of :class:`type` which don't override ``type.__new__`` may no "
"longer use the one-argument form to get the type of an object."
msgstr ""
"``type.__new__`` をオーバーライドしていない :class:`type` のサブクラスは、オ"
"ブジェクトの型を得るのに１引数形式を利用することができません。"

#: ../../library/functions.rst:1837
msgid ""
"Return the :attr:`~object.__dict__` attribute for a module, class, instance, "
"or any other object with a :attr:`~object.__dict__` attribute."
msgstr ""
"モジュール、クラス、インスタンス、あるいはそれ以外の :attr:`~object."
"__dict__` 属性を持つオブジェクトの、 :attr:`~object.__dict__` 属性を返しま"
"す。"

#: ../../library/functions.rst:1840
msgid ""
"Objects such as modules and instances have an updateable :attr:`~object."
"__dict__` attribute; however, other objects may have write restrictions on "
"their :attr:`~object.__dict__` attributes (for example, classes use a :class:"
"`types.MappingProxyType` to prevent direct dictionary updates)."
msgstr ""
"モジュールやインスタンスのようなオブジェクトは、更新可能な :attr:`~object."
"__dict__` 属性を持っています。ただし、それ以外のオブジェクトでは :attr:"
"`~object.__dict__` 属性への書き込みが制限されている場合があります。書き込みに"
"制限がある例としては、辞書を直接更新されることを防ぐために :class:`types."
"MappingProxyType` を使っているクラスがあります。"

#: ../../library/functions.rst:1845
msgid ""
"Without an argument, :func:`vars` acts like :func:`locals`.  Note, the "
"locals dictionary is only useful for reads since updates to the locals "
"dictionary are ignored."
msgstr ""
"引数がなければ、:func:`vars` は :func:`locals` のように振る舞います。ただし、"
"辞書 locals への更新は無視されるため、辞書 locals は読み出し時のみ有用である"
"ことに注意してください。"

#: ../../library/functions.rst:1849
msgid ""
"A :exc:`TypeError` exception is raised if an object is specified but it "
"doesn't have a :attr:`~object.__dict__` attribute (for example, if its class "
"defines the :attr:`~object.__slots__` attribute)."
msgstr ""

#: ../../library/functions.rst:1855
msgid ""
"Iterate over several iterables in parallel, producing tuples with an item "
"from each one."
msgstr ""

#: ../../library/functions.rst:1858
msgid "Example::"
msgstr "以下はプログラム例です::"

#: ../../library/functions.rst:1867
msgid ""
"More formally: :func:`zip` returns an iterator of tuples, where the *i*-th "
"tuple contains the *i*-th element from each of the argument iterables."
msgstr ""

#: ../../library/functions.rst:1870
msgid ""
"Another way to think of :func:`zip` is that it turns rows into columns, and "
"columns into rows.  This is similar to `transposing a matrix <https://en."
"wikipedia.org/wiki/Transpose>`_."
msgstr ""

#: ../../library/functions.rst:1874
msgid ""
":func:`zip` is lazy: The elements won't be processed until the iterable is "
"iterated on, e.g. by a :keyword:`!for` loop or by wrapping in a :class:"
"`list`."
msgstr ""

#: ../../library/functions.rst:1878
msgid ""
"One thing to consider is that the iterables passed to :func:`zip` could have "
"different lengths; sometimes by design, and sometimes because of a bug in "
"the code that prepared these iterables.  Python offers three different "
"approaches to dealing with this issue:"
msgstr ""

#: ../../library/functions.rst:1883
msgid ""
"By default, :func:`zip` stops when the shortest iterable is exhausted. It "
"will ignore the remaining items in the longer iterables, cutting off the "
"result to the length of the shortest iterable::"
msgstr ""

#: ../../library/functions.rst:1890
msgid ""
":func:`zip` is often used in cases where the iterables are assumed to be of "
"equal length.  In such cases, it's recommended to use the ``strict=True`` "
"option. Its output is the same as regular :func:`zip`::"
msgstr ""

#: ../../library/functions.rst:1897
msgid ""
"Unlike the default behavior, it raises a :exc:`ValueError` if one iterable "
"is exhausted before the others:"
msgstr ""

#: ../../library/functions.rst:1915
msgid ""
"Without the ``strict=True`` argument, any bug that results in iterables of "
"different lengths will be silenced, possibly manifesting as a hard-to-find "
"bug in another part of the program."
msgstr ""

#: ../../library/functions.rst:1919
msgid ""
"Shorter iterables can be padded with a constant value to make all the "
"iterables have the same length.  This is done by :func:`itertools."
"zip_longest`."
msgstr ""

#: ../../library/functions.rst:1923
msgid ""
"Edge cases: With a single iterable argument, :func:`zip` returns an iterator "
"of 1-tuples.  With no arguments, it returns an empty iterator."
msgstr ""

#: ../../library/functions.rst:1926
msgid "Tips and tricks:"
msgstr ""

#: ../../library/functions.rst:1928
msgid ""
"The left-to-right evaluation order of the iterables is guaranteed. This "
"makes possible an idiom for clustering a data series into n-length groups "
"using ``zip(*[iter(s)]*n, strict=True)``.  This repeats the *same* iterator "
"``n`` times so that each output tuple has the result of ``n`` calls to the "
"iterator. This has the effect of dividing the input into n-length chunks."
msgstr ""
"イテラブルの左から右への評価順序は保証されています。そのため "
"``zip(*[iter(s)]*n, strict=True)`` を使ってデータ系列を長さ n のグループにク"
"ラスタリングするイディオムが使えます。これは、各出力タプルがイテレータを "
"``n`` 回呼び出した結果となるよう、 *同じ* イテレータを ``n`` 回繰り返します。"
"これは入力を長さ n のチャンクに分割する効果があります。"

#: ../../library/functions.rst:1934
msgid ""
":func:`zip` in conjunction with the ``*`` operator can be used to unzip a "
"list::"
msgstr ""
":func:`zip` に続けて ``*`` 演算子を使うと、zip したリストを元に戻せます::"

#: ../../library/functions.rst:1945
msgid "Added the ``strict`` argument."
msgstr "``strict`` 引数が追加されました。"

#: ../../library/functions.rst:1957
msgid ""
"This is an advanced function that is not needed in everyday Python "
"programming, unlike :func:`importlib.import_module`."
msgstr ""
"これは :func:`importlib.import_module` とは違い、日常の Python プログラミング"
"では必要ない高等な関数です。"

#: ../../library/functions.rst:1960
msgid ""
"This function is invoked by the :keyword:`import` statement.  It can be "
"replaced (by importing the :mod:`builtins` module and assigning to "
"``builtins.__import__``) in order to change semantics of the :keyword:`!"
"import` statement, but doing so is **strongly** discouraged as it is usually "
"simpler to use import hooks (see :pep:`302`) to attain the same goals and "
"does not cause issues with code which assumes the default import "
"implementation is in use.  Direct use of :func:`__import__` is also "
"discouraged in favor of :func:`importlib.import_module`."
msgstr ""
"この関数は :keyword:`import` 文により呼び出されます。 (:mod:`builtins` モ"
"ジュールをインポートして ``builtins.__import__`` に代入することで) この関数を"
"置き換えて :keyword:`!import` 文のセマンティクスを変更することができますが、"
"同様のことをするのに通常はインポートフック (:pep:`302` 参照) を利用する方が簡"
"単で、かつデフォルトのインポート実装が使用されていることを仮定するコードとの"
"間で問題が起きないので、このやり方は *強く* 推奨されません。 :func:"
"`__import__` を直接使用することも推奨されず、 :func:`importlib."
"import_module` の方が好まれます。"

#: ../../library/functions.rst:1969
msgid ""
"The function imports the module *name*, potentially using the given "
"*globals* and *locals* to determine how to interpret the name in a package "
"context. The *fromlist* gives the names of objects or submodules that should "
"be imported from the module given by *name*.  The standard implementation "
"does not use its *locals* argument at all and uses its *globals* only to "
"determine the package context of the :keyword:`import` statement."
msgstr ""
"この関数は、モジュール *name* をインポートし、 *globals* と *locals* が与えら"
"れれば、パッケージのコンテキストで名前をどう解釈するか決定するのに使います。 "
"*fromlist* は *name* で与えられるモジュールからインポートされるべきオブジェク"
"トまたはサブモジュールの名前を与ます。標準の実装では *locals* 引数はまったく"
"使われず、 *globals* は :keyword:`import` 文のパッケージコンテキストを決定す"
"るためにのみ使われます。"

#: ../../library/functions.rst:1976
msgid ""
"*level* specifies whether to use absolute or relative imports. ``0`` (the "
"default) means only perform absolute imports.  Positive values for *level* "
"indicate the number of parent directories to search relative to the "
"directory of the module calling :func:`__import__` (see :pep:`328` for the "
"details)."
msgstr ""
"*level* は絶対と相対どちらのインポートを使うかを指定します。 ``0`` (デフォル"
"ト) は絶対インポートのみ実行します。正の *level* の値は、 :func:`__import__` "
"を呼び出したディレクトリから検索対象となる親ディレクトリの数を示します (詳細"
"は :pep:`328` を参照してください)。"

#: ../../library/functions.rst:1982
msgid ""
"When the *name* variable is of the form ``package.module``, normally, the "
"top-level package (the name up till the first dot) is returned, *not* the "
"module named by *name*.  However, when a non-empty *fromlist* argument is "
"given, the module named by *name* is returned."
msgstr ""
"*name* 変数が ``package.module`` 形式であるとき、通常は、*name* で指名された"
"モジュール *ではなく*、最上位のパッケージ (最初のドットまでの名前) が返されま"
"す。しかしながら、空でない *fromlist* 引数が与えられると、 *name* で指名され"
"たモジュールが返されます。"

#: ../../library/functions.rst:1987
msgid ""
"For example, the statement ``import spam`` results in bytecode resembling "
"the following code::"
msgstr ""
"例えば、文 ``import spam`` は、以下のコードのようなバイトコードに帰結します::"

#: ../../library/functions.rst:1992
msgid "The statement ``import spam.ham`` results in this call::"
msgstr "文 ``import spam.ham`` は、この呼び出しになります::"

#: ../../library/functions.rst:1996
msgid ""
"Note how :func:`__import__` returns the toplevel module here because this is "
"the object that is bound to a name by the :keyword:`import` statement."
msgstr ""
"ここで :func:`__import__` がどのように最上位モジュールを返しているかに注意し"
"て下さい。 :keyword:`import` 文により名前が束縛されたオブジェクトになっていま"
"す。"

#: ../../library/functions.rst:1999
msgid ""
"On the other hand, the statement ``from spam.ham import eggs, sausage as "
"saus`` results in ::"
msgstr ""
"一方で、文 ``from spam.ham import eggs, sausage as saus`` は、以下となりま"
"す ::"

#: ../../library/functions.rst:2006
msgid ""
"Here, the ``spam.ham`` module is returned from :func:`__import__`.  From "
"this object, the names to import are retrieved and assigned to their "
"respective names."
msgstr ""
"ここで、:func:`__import__` から ``spam.ham`` モジュールが返されます。このオブ"
"ジェクトから、インポートされる名前が取り出され、それぞれの名前として代入され"
"ます。"

#: ../../library/functions.rst:2010
msgid ""
"If you simply want to import a module (potentially within a package) by "
"name, use :func:`importlib.import_module`."
msgstr ""
"単純に名前からモジュール (パッケージの範囲内であるかも知れません) をインポー"
"トしたいなら、 :func:`importlib.import_module` を使ってください。"

#: ../../library/functions.rst:2013
msgid ""
"Negative values for *level* are no longer supported (which also changes the "
"default value to 0)."
msgstr ""
"負の *level* の値はサポートされなくなりました (デフォルト値の 0 に変更されま"
"す)。"

#: ../../library/functions.rst:2017
msgid ""
"When the command line options :option:`-E` or :option:`-I` are being used, "
"the environment variable :envvar:`PYTHONCASEOK` is now ignored."
msgstr ""
"コマンドラインオプション :option:`-E` or :option:`-I` が指定された場合、環境"
"変数 :envvar:`PYTHONCASEOK` は無視されるようになりました。"

#: ../../library/functions.rst:2022
msgid "Footnotes"
msgstr "脚注"

#: ../../library/functions.rst:2023
msgid ""
"Note that the parser only accepts the Unix-style end of line convention. If "
"you are reading the code from a file, make sure to use newline conversion "
"mode to convert Windows or Mac-style newlines."
msgstr ""
"なお、パーサは Unix スタイルの行末の記法しか受け付けません。コードをファイル"
"から読んでいるなら、必ず、改行変換モードで Windows や Mac スタイルの改行を変"
"換してください。"
