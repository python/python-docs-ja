# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/traceback.rst:2
msgid ":mod:`traceback` --- Print or retrieve a stack traceback"
msgstr ":mod:`traceback` --- スタックトレースの表示または取得"

#: ../../library/traceback.rst:8
msgid ""
"This module provides a standard interface to extract, format and print stack "
"traces of Python programs.  It exactly mimics the behavior of the Python "
"interpreter when it prints a stack trace.  This is useful when you want to "
"print stack traces under program control, such as in a \"wrapper\" around "
"the interpreter."
msgstr ""
"このモジュールは Python プログラムのスタックトレースを抽出し、書式を整え、表"
"示するための標準インターフェースを提供します。モジュールがスタックトレースを"
"表示するとき、Python インタープリタの動作を正確に模倣します。インタープリタの"
"\"ラッパー\"の場合のように、プログラムの制御の元でスタックトレースを表示した"
"いと思ったときに役に立ちます。"

#: ../../library/traceback.rst:16
msgid ""
"The module uses traceback objects --- this is the object type that is stored "
"in the variables :data:`sys.exc_traceback` (deprecated) and :data:`sys."
"last_traceback` and returned as the third item from :func:`sys.exc_info`."
msgstr ""
"モジュールは traceback オブジェクトを使います --- これは変数 :data:`sys."
"exc_traceback` (非推奨)と :data:`sys.last_traceback` に保存され、 :func:`sys."
"exc_info` から三番目の項目として返されるオブジェクト型です。"

#: ../../library/traceback.rst:21
msgid "The module defines the following functions:"
msgstr "このモジュールでは以下の関数を定義しています:"

#: ../../library/traceback.rst:26
msgid ""
"Print up to *limit* stack trace entries from the traceback object *tb*. If "
"*limit* is omitted or ``None``, all entries are printed. If *file* is "
"omitted or ``None``, the output goes to ``sys.stderr``; otherwise it should "
"be an open file or file-like object to receive the output."
msgstr ""
"トレースバックオブジェクト *tb* から *limit* までのスタックトレース項目を出力"
"します。 *limit* が省略されるか ``None`` の場合は、すべての項目が表示されま"
"す。 *file* が省略されるか ``None`` の場合は、 ``sys.stderr`` へ出力されま"
"す。それ以外の場合は、出力を受けるためのオープンされたファイルまたはファイル"
"風 (file-like) オブジェクトでなければなりません。"

#: ../../library/traceback.rst:34
msgid ""
"Print exception information and up to *limit* stack trace entries from the "
"traceback *tb* to *file*. This differs from :func:`print_tb` in the "
"following ways: (1) if *tb* is not ``None``, it prints a header ``Traceback "
"(most recent call last):``; (2) it prints the exception *etype* and *value* "
"after the stack trace; (3) if *etype* is :exc:`SyntaxError` and *value* has "
"the appropriate format, it prints the line where the syntax error occurred "
"with a caret indicating the approximate position of the error."
msgstr ""
"例外情報とトレースバック *tb* から *limit* までのスタックトレース項目を "
"*file* へ出力します。これは以下のような点で :func:`print_tb` とは異なります: "
"(1) *tb* が ``None`` でない場合は、ヘッダ ``Traceback (most recent call "
"last):`` を出力します。 (2) スタックトレースの後に例外 *etype* と *value* を"
"出力します。 (3) *etype* が :exc:`SyntaxError` であり、 *value* が適切な形式"
"の場合は、エラーのおおよその位置を示すカレットを付けて構文エラーが起きた行を"
"出力します。"

#: ../../library/traceback.rst:45
msgid ""
"This is a shorthand for ``print_exception(sys.exc_type, sys.exc_value, sys."
"exc_traceback, limit, file)``.  (In fact, it uses :func:`sys.exc_info` to "
"retrieve the same information in a thread-safe way instead of using the "
"deprecated variables.)"
msgstr ""
"これは ``print_exception(sys.exc_type, sys.exc_value, sys.exc_traceback, "
"limit, file)`` の省略表現です。 (非推奨の変数を使う代わりにスレッドセーフな方"
"法で同じ情報を引き出すために、実際には :func:`sys.exc_info` を使います。)"

#: ../../library/traceback.rst:53
msgid ""
"This is like ``print_exc(limit)`` but returns a string instead of printing "
"to a file."
msgstr ""
"これは、``print_exc(limit)`` に似ていますが、ファイルに出力する代わりに文字列"
"を返します。"

#: ../../library/traceback.rst:61
msgid ""
"This is a shorthand for ``print_exception(sys.last_type, sys.last_value, sys."
"last_traceback, limit, file)``.  In general it will work only after an "
"exception has reached an interactive prompt (see :data:`sys.last_type`)."
msgstr ""
"``print_exception(sys.last_type, sys.last_value, sys.last_traceback, limit, "
"file)`` の省略表現です。一般に、例外が対話的なプロンプトに達した後にだけ機能"
"します (:data:`sys.last_type` 参照)。"

#: ../../library/traceback.rst:68
msgid ""
"This function prints a stack trace from its invocation point. The optional "
"*f* argument can be used to specify an alternate stack frame to start. The "
"optional *limit* and *file* arguments have the same meaning as for :func:"
"`print_exception`."
msgstr ""

#: ../../library/traceback.rst:76
msgid ""
"Return a list of up to *limit* \"pre-processed\" stack trace entries "
"extracted from the traceback object *tb*.  It is useful for alternate "
"formatting of stack traces.  If *limit* is omitted or ``None``, all entries "
"are extracted. A \"pre-processed\" stack trace entry is a 4-tuple "
"(*filename*, *line number*, function name*, *text*) representing the "
"information that is usually printed for a stack trace.  The *text* is a "
"string with leading and trailing whitespace stripped; if the source is not "
"available it is ``None``."
msgstr ""
"トレースバックオブジェクト *tb* から *limit* まで取り出された\"前処理済み\"ス"
"タックトレース項目のリストを返します。スタックトレースの代わりの書式設定を行"
"うために役に立ちます。*limit* が省略されるか ``None`` の場合は、すべての項目"
"が取り出されます。\"前処理済み\"スタックトレース項目とは4要素のタプル "
"(*filename*, *line number*, *function name*, *text*) で、スタックトレースに対"
"して通常出力される情報を表しています。*text* は前後の空白を取り除いた文字列で"
"す。ソースが利用できない場合は ``None`` です。"

#: ../../library/traceback.rst:87
msgid ""
"Extract the raw traceback from the current stack frame.  The return value "
"has the same format as for :func:`extract_tb`.  The optional *f* and *limit* "
"arguments have the same meaning as for :func:`print_stack`."
msgstr ""
"現在のスタックフレームから生のトレースバックを取り出します。戻り値は :func:"
"`extract_tb` と同じ形式です。オプションの *f* と *limit* 引数は :func:"
"`print_stack` と同じ意味を持ちます。"

#: ../../library/traceback.rst:94
msgid ""
"Given a list of tuples as returned by :func:`extract_tb` or :func:"
"`extract_stack`, return a list of strings ready for printing.  Each string "
"in the resulting list corresponds to the item with the same index in the "
"argument list.  Each string ends in a newline; the strings may contain "
"internal newlines as well, for those items whose source text line is not "
"``None``."
msgstr ""
":func:`extract_tb` または :func:`extract_stack` が返すタプルのリストが与えら"
"れると、出力の準備を整えた文字列のリストを返します。結果として生じるリストの"
"中の各文字列は、引数リストの中の同じインデックスの要素に対応します。各文字列"
"は末尾に改行が付いています。さらに、ソーステキスト行が ``None`` でないそれら"
"の要素に対しては、文字列は内部に改行を含んでいるかもしれません。"

#: ../../library/traceback.rst:104
msgid ""
"Format the exception part of a traceback.  The arguments are the exception "
"type, *etype* and *value* such as given by ``sys.last_type`` and ``sys."
"last_value``.  The return value is a list of strings, each ending in a "
"newline.  Normally, the list contains a single string; however, for :exc:"
"`SyntaxError` exceptions, it contains several lines that (when printed) "
"display detailed information about where the syntax error occurred.  The "
"message indicating which exception occurred is the always last string in the "
"list."
msgstr ""
"トレースバックの例外部分をフォーマットします。\n"
"引数は ``sys.last_type`` と ``sys.last_value`` で与えられるような、例外の型 "
"*etype* と値 *value* です。\n"
"戻り値はそれぞれが改行で終わっている文字列のリストです。\n"
"通常、リストは一つの文字列を含んでいます。\n"
"しかし、 :exc:`SyntaxError` 例外に対しては、 (出力されるときに) 構文エラーが"
"起きた場所についての詳細な情報を示す行をいくつか含んでいます。\n"
"どの例外が起きたのかを示すメッセージは、常にリストの最後の文字列です。"

#: ../../library/traceback.rst:116
msgid ""
"Format a stack trace and the exception information.  The arguments  have the "
"same meaning as the corresponding arguments to :func:`print_exception`.  The "
"return value is a list of strings, each ending in a newline and some "
"containing internal newlines.  When these lines are concatenated and "
"printed, exactly the same text is printed as does :func:`print_exception`."
msgstr ""
"スタックトレースと例外情報を書式化します。引数は :func:`print_exception` の対"
"応する引数と同じ意味を持ちます。戻り値は文字列のリストで、それぞれの文字列は"
"改行で終わり、そのいくつかは内部に改行を含みます。これらの行が連結されて出力"
"される場合は、厳密に :func:`print_exception` と同じテキストが出力されます。"

#: ../../library/traceback.rst:125
msgid "A shorthand for ``format_list(extract_tb(tb, limit))``."
msgstr "``format_list(extract_tb(tb, limit))`` の省略表現です。"

#: ../../library/traceback.rst:130
msgid "A shorthand for ``format_list(extract_stack(f, limit))``."
msgstr "``format_list(extract_stack(f, limit))`` の省略表現です。"

#: ../../library/traceback.rst:135
msgid ""
"This function returns the current line number set in the traceback object. "
"This function was necessary because in versions of Python prior to 2.3 when "
"the :option:`-O` flag was passed to Python the ``tb.tb_lineno`` was not "
"updated correctly.  This function has no use in versions past 2.3."
msgstr ""
"トレースバックオブジェクトに設定された現在の行番号を返します。 Python 2.3より"
"前のバージョンでは、 :option:`-O` フラグが渡されたときに ``tb.tb_lineno`` が"
"正しく更新されなかったため、この関数は必要でした。 2.3以降のバージョンでは不"
"要です。"

#: ../../library/traceback.rst:144
msgid "Traceback Examples"
msgstr "トレースバックの例"

#: ../../library/traceback.rst:146
msgid ""
"This simple example implements a basic read-eval-print loop, similar to (but "
"less useful than) the standard Python interactive interpreter loop.  For a "
"more complete implementation of the interpreter loop, refer to the :mod:"
"`code` module. ::"
msgstr ""
"この簡単な例では基本的な read-eval-print ループを実装しています。標準的な "
"Python の対話インタープリタループに似ていますが、 Python のものより便利ではあ"
"りません。インタープリタループのより完全な実装については、 :mod:`code` モ"
"ジュールを参照してください。 ::"

#: ../../library/traceback.rst:168
msgid ""
"The following example demonstrates the different ways to print and format "
"the exception and traceback::"
msgstr "次の例は例外とトレースバックの出力並びに形式が異なることを示します::"

#: ../../library/traceback.rst:204
msgid "The output for the example would look similar to this::"
msgstr "この例の出力は次のようになります::"

#: ../../library/traceback.rst:243
msgid ""
"The following example shows the different ways to print and format the "
"stack::"
msgstr "次の例は、スタックの print と format の違いを示しています::"

#: ../../library/traceback.rst:269
msgid "This last example demonstrates the final few formatting functions:"
msgstr "最後の例は、残りの幾つかの関数のデモをします:"
