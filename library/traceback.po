# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/traceback.rst:2
msgid ":mod:`traceback` --- Print or retrieve a stack traceback"
msgstr ":mod:`traceback` --- スタックトレースの表示または取得"

#: ../../library/traceback.rst:7
msgid "**Source code:** :source:`Lib/traceback.py`"
msgstr "**ソースコード:** :source:`Lib/traceback.py`"

#: ../../library/traceback.rst:11
msgid ""
"This module provides a standard interface to extract, format and print stack "
"traces of Python programs.  It exactly mimics the behavior of the Python "
"interpreter when it prints a stack trace.  This is useful when you want to "
"print stack traces under program control, such as in a \"wrapper\" around "
"the interpreter."
msgstr ""
"このモジュールは Python プログラムのスタックトレースを抽出し、書式を整え、表"
"示するための標準インターフェースを提供します。モジュールがスタックトレースを"
"表示するとき、Python インタープリタの動作を正確に模倣します。インタープリタの"
"\"ラッパー\"の場合のように、プログラムの制御の元でスタックトレースを表示した"
"いと思ったときに役に立ちます。"

#: ../../library/traceback.rst:19
msgid ""
"The module uses traceback objects --- this is the object type that is stored "
"in the :data:`sys.last_traceback` variable and returned as the third item "
"from :func:`sys.exc_info`."
msgstr ""
"モジュールはトレースバックオブジェクトを使用します。このオブジェクトの型は :"
"data:`sys.last_traceback` 変数に格納され、:func:`sys.exc_info` の三番目に返さ"
"れます。"

#: ../../library/traceback.rst:23
msgid "The module defines the following functions:"
msgstr "このモジュールには、以下の関数が定義されています:"

#: ../../library/traceback.rst:28
msgid ""
"Print up to *limit* stack trace entries from traceback object *tb* (starting "
"from the caller's frame) if *limit* is positive.  Otherwise, print the last "
"``abs(limit)`` entries.  If *limit* is omitted or ``None``, all entries are "
"printed.  If *file* is omitted or ``None``, the output goes to ``sys."
"stderr``; otherwise it should be an open file or file-like object to receive "
"the output."
msgstr ""
"*limit* が正の場合、トレースバックオブジェクト *tb* から *limit* までのスタッ"
"クトレース項目 (呼び出し側のフレームから開始) を出力します。\n"
"そうでない場合、最新 ``abs(limit)`` 項目を出力します。\n"
"*limit* が省略されるか ``None`` の場合、すべての項目が出力されます。\n"
"*file* が省略されるか ``None`` の場合は、 ``sys.stderr`` へ出力されます。\n"
"そうでない場合、 *file* は出力を受け取る開いたファイルまたは file-like オブ"
"ジェクトでなければなりません。"

#: ../../library/traceback.rst:35 ../../library/traceback.rst:98
msgid "Added negative *limit* support."
msgstr "負の *limit* がサポートされました。"

#: ../../library/traceback.rst:42
msgid ""
"Print exception information and stack trace entries from traceback object "
"*tb* to *file*. This differs from :func:`print_tb` in the following ways:"
msgstr ""
"トレースバックオブジェクト *tb* から例外の情報とスタックトレースの項目を "
"*file* に出力します。\n"
"この関数は以下の点で :func:`print_tb` と異なります:"

#: ../../library/traceback.rst:46
msgid ""
"if *tb* is not ``None``, it prints a header ``Traceback (most recent call "
"last):``"
msgstr ""
"*tb* が ``None`` でない場合ヘッダ ``Traceback (most recent call last):`` を出"
"力します"

#: ../../library/traceback.rst:49
msgid "it prints the exception type and *value* after the stack trace"
msgstr ""

#: ../../library/traceback.rst:53
msgid ""
"if *type(value)* is :exc:`SyntaxError` and *value* has the appropriate "
"format, it prints the line where the syntax error occurred with a caret "
"indicating the approximate position of the error."
msgstr ""
"*type(value)* が :exc:`SyntaxError` であり、 *value* が適切な形式を持っていれ"
"ば、そのエラーのおおよその位置を示すマークと共にシンタックスエラーが発生した"
"行が表示されます。"

#: ../../library/traceback.rst:57
msgid ""
"Since Python 3.10, instead of passing *value* and *tb*, an exception object "
"can be passed as the first argument. If *value* and *tb* are provided, the "
"first argument is ignored in order to provide backwards compatibility."
msgstr ""

#: ../../library/traceback.rst:61
msgid ""
"The optional *limit* argument has the same meaning as for :func:`print_tb`. "
"If *chain* is true (the default), then chained exceptions (the :attr:"
"`__cause__` or :attr:`__context__` attributes of the exception) will be "
"printed as well, like the interpreter itself does when printing an unhandled "
"exception."
msgstr ""
"オプション引数 *limit* の意味は  :func:`print_tb` のものと同じです。\n"
"*chain* が真の場合 (デフォルト)、連鎖した例外 (例外の :attr:`__cause__` か :"
"attr:`__context__` 属性) も出力されます。\n"
"これはインタープリタ自身が処理されていない例外を出力するときと同じです。"

#: ../../library/traceback.rst:67 ../../library/traceback.rst:160
msgid "The *etype* argument is ignored and inferred from the type of *value*."
msgstr "引数 *etype* は無視され、 *value* の型から推論されます。"

#: ../../library/traceback.rst:70 ../../library/traceback.rst:147
msgid ""
"The *etype* parameter has been renamed to *exc* and is now positional-only."
msgstr ""

#: ../../library/traceback.rst:77
msgid ""
"This is a shorthand for ``print_exception(*sys.exc_info(), limit, file, "
"chain)``."
msgstr ""
"``print_exception(*sys.exc_info(), limit, file, chain)`` の省略表現です。"

#: ../../library/traceback.rst:83
msgid ""
"This is a shorthand for ``print_exception(sys.last_type, sys.last_value, sys."
"last_traceback, limit, file, chain)``.  In general it will work only after "
"an exception has reached an interactive prompt (see :data:`sys.last_type`)."
msgstr ""
"``print_exception(sys.last_type, sys.last_value, sys.last_traceback, limit, "
"file, chain)`` の省略表現です。\n"
"一般に、例外が対話的なプロンプトに達した後にのみ機能します (:data:`sys."
"last_type` 参照)。"

#: ../../library/traceback.rst:91
msgid ""
"Print up to *limit* stack trace entries (starting from the invocation point) "
"if *limit* is positive.  Otherwise, print the last ``abs(limit)`` entries.  "
"If *limit* is omitted or ``None``, all entries are printed. The optional *f* "
"argument can be used to specify an alternate stack frame to start.  The "
"optional *file* argument has the same meaning as for :func:`print_tb`."
msgstr ""
"*limit* が正の場合、最大 *limit* 個のスタックトレース項目 (呼び出し地点から開"
"始) を出力します。 そうでない場合、最新の ``abs(limit)`` 個を出力します。 "
"*limit* が省略されるか ``None`` の場合、すべての項目が出力されます。オプショ"
"ンの *f* 引数は、開始するスタックフレームを指定するために用いることができま"
"す。オプションの *file* 引数は :func:`print_tb` の *file* 引数と同様の意味を"
"持っています。"

#: ../../library/traceback.rst:104
msgid ""
"Return a :class:`StackSummary` object representing a list of \"pre-"
"processed\" stack trace entries extracted from the traceback object *tb*.  "
"It is useful for alternate formatting of stack traces.  The optional *limit* "
"argument has the same meaning as for :func:`print_tb`.  A \"pre-processed\" "
"stack trace entry is a :class:`FrameSummary` object containing attributes :"
"attr:`~FrameSummary.filename`, :attr:`~FrameSummary.lineno`, :attr:"
"`~FrameSummary.name`, and :attr:`~FrameSummary.line` representing the "
"information that is usually printed for a stack trace.  The :attr:"
"`~FrameSummary.line` is a string with leading and trailing whitespace "
"stripped; if the source is not available it is ``None``."
msgstr ""

#: ../../library/traceback.rst:118
msgid ""
"Extract the raw traceback from the current stack frame.  The return value "
"has the same format as for :func:`extract_tb`.  The optional *f* and *limit* "
"arguments have the same meaning as for :func:`print_stack`."
msgstr ""
"現在のスタックフレームから生のトレースバックを取り出します。戻り値は :func:"
"`extract_tb` と同じ形式です。オプションの *f* と *limit* 引数は :func:"
"`print_stack` と同じ意味を持ちます。"

#: ../../library/traceback.rst:125
msgid ""
"Given a list of tuples or :class:`FrameSummary` objects as returned by :func:"
"`extract_tb` or :func:`extract_stack`, return a list of strings ready for "
"printing.  Each string in the resulting list corresponds to the item with "
"the same index in the argument list.  Each string ends in a newline; the "
"strings may contain internal newlines as well, for those items whose source "
"text line is not ``None``."
msgstr ""
":func:`extract_tb` または :func:`extract_stack` が返すタプルのリストまたは :"
"class:`FrameSummary` オブジェクトが与えられると、出力の準備を整えた文字列のリ"
"ストを返します。結果として生じるリストの中の各文字列は、引数リストの中の同じ"
"インデックスの要素に対応します。各文字列は末尾に改行が付いています。さらに、"
"ソーステキスト行が ``None`` でないそれらの要素に対しては、文字列は内部に改行"
"を含んでいるかもしれません。"

#: ../../library/traceback.rst:135
msgid ""
"Format the exception part of a traceback using an exception value such as "
"given by ``sys.last_value``.  The return value is a list of strings, each "
"ending in a newline.  Normally, the list contains a single string; however, "
"for :exc:`SyntaxError` exceptions, it contains several lines that (when "
"printed) display detailed information about where the syntax error occurred. "
"The message indicating which exception occurred is the always last string in "
"the list."
msgstr ""

#: ../../library/traceback.rst:143
msgid ""
"Since Python 3.10, instead of passing *value*, an exception object can be "
"passed as the first argument.  If *value* is provided, the first argument is "
"ignored in order to provide backwards compatibility."
msgstr ""

#: ../../library/traceback.rst:154
msgid ""
"Format a stack trace and the exception information.  The arguments  have the "
"same meaning as the corresponding arguments to :func:`print_exception`.  The "
"return value is a list of strings, each ending in a newline and some "
"containing internal newlines.  When these lines are concatenated and "
"printed, exactly the same text is printed as does :func:`print_exception`."
msgstr ""
"スタックトレースと例外情報を書式化します。引数は :func:`print_exception` の対"
"応する引数と同じ意味を持ちます。戻り値は文字列のリストで、それぞれの文字列は"
"改行で終わり、そのいくつかは内部に改行を含みます。これらの行が連結されて出力"
"される場合は、厳密に :func:`print_exception` と同じテキストが出力されます。"

#: ../../library/traceback.rst:163
msgid ""
"This function's behavior and signature were modified to match :func:"
"`print_exception`."
msgstr ""

#: ../../library/traceback.rst:170
msgid ""
"This is like ``print_exc(limit)`` but returns a string instead of printing "
"to a file."
msgstr ""
"これは、``print_exc(limit)`` に似ていますが、ファイルに出力する代わりに文字列"
"を返します。"

#: ../../library/traceback.rst:176
msgid "A shorthand for ``format_list(extract_tb(tb, limit))``."
msgstr "``format_list(extract_tb(tb, limit))`` の省略表現です。"

#: ../../library/traceback.rst:181
msgid "A shorthand for ``format_list(extract_stack(f, limit))``."
msgstr "``format_list(extract_stack(f, limit))`` の省略表現です。"

#: ../../library/traceback.rst:185
msgid ""
"Clears the local variables of all the stack frames in a traceback *tb* by "
"calling the :meth:`clear` method of each frame object."
msgstr ""
"各フレームオブジェクトの :meth:`clear` メソッドを呼んでトレースバック *tb* 内"
"の全スタックフレームの局所変数を消去します。"

#: ../../library/traceback.rst:192
msgid ""
"Walk a stack following ``f.f_back`` from the given frame, yielding the frame "
"and line number for each frame. If *f* is ``None``, the current stack is "
"used. This helper is used with :meth:`StackSummary.extract`."
msgstr ""

#: ../../library/traceback.rst:200
msgid ""
"Walk a traceback following ``tb_next`` yielding the frame and line number "
"for each frame. This helper is used with :meth:`StackSummary.extract`."
msgstr ""

#: ../../library/traceback.rst:205
msgid "The module also defines the following classes:"
msgstr "このモジュールは以下のクラスも定義しています:"

#: ../../library/traceback.rst:208
msgid ":class:`TracebackException` Objects"
msgstr ":class:`TracebackException` オブジェクト"

#: ../../library/traceback.rst:212
msgid ""
":class:`TracebackException` objects are created from actual exceptions to "
"capture data for later printing in a lightweight fashion."
msgstr ""
":class:`TracebackException` オブジェクトは実際の例外から作られ、後の出力のた"
"めに軽量な方法でデータをキャプチャします。"

#: ../../library/traceback.rst:217 ../../library/traceback.rst:269
msgid ""
"Capture an exception for later rendering. *limit*, *lookup_lines* and "
"*capture_locals* are as for the :class:`StackSummary` class."
msgstr ""
"後のレンダリングのために例外をキャプチャします。\n"
"*limit*、*lookup_lines*、*capture_locals* は :class:`StackSummary` class のも"
"のです。"

#: ../../library/traceback.rst:220
msgid ""
"If *compact* is true, only data that is required by :class:"
"`TracebackException`'s ``format`` method is saved in the class attributes. "
"In particular, the ``__context__`` field is calculated only if ``__cause__`` "
"is ``None`` and ``__suppress_context__`` is false."
msgstr ""

#: ../../library/traceback.rst:225 ../../library/traceback.rst:272
msgid ""
"Note that when locals are captured, they are also shown in the traceback."
msgstr ""
"局所変数がキャプチャされたとき、それらはトレースバックに表示されることに注意"
"してください。"

#: ../../library/traceback.rst:229
msgid "A :class:`TracebackException` of the original ``__cause__``."
msgstr "元々の ``__cause__`` の :class:`TracebackException`。"

#: ../../library/traceback.rst:233
msgid "A :class:`TracebackException` of the original ``__context__``."
msgstr "元々の ``__context__`` の :class:`TracebackException`。"

#: ../../library/traceback.rst:237
msgid "The ``__suppress_context__`` value from the original exception."
msgstr "元々の例外からの ``__suppress_context__``。"

#: ../../library/traceback.rst:241
msgid "A :class:`StackSummary` representing the traceback."
msgstr "トレースバックを表す :class:`StackSummary`。"

#: ../../library/traceback.rst:245
msgid "The class of the original traceback."
msgstr "元々のトレースバックのクラス。"

#: ../../library/traceback.rst:249
msgid "For syntax errors - the file name where the error occurred."
msgstr "構文エラー用 - エラーが発生したファイルの名前。"

#: ../../library/traceback.rst:253
msgid "For syntax errors - the line number where the error occurred."
msgstr "構文エラー用 - エラーが発生した行番号。"

#: ../../library/traceback.rst:257
msgid "For syntax errors - the text where the error occurred."
msgstr "構文エラー用 - エラーが発生したテクスト。"

#: ../../library/traceback.rst:261
msgid "For syntax errors - the offset into the text where the error occurred."
msgstr "構文エラー用 - エラーが発生したテクストへのオフセット。"

#: ../../library/traceback.rst:265
msgid "For syntax errors - the compiler error message."
msgstr "構文エラー用 - コンパイラのエラーメッセージ。"

#: ../../library/traceback.rst:276
msgid "Format the exception."
msgstr "例外を書式化します。"

#: ../../library/traceback.rst:278
msgid ""
"If *chain* is not ``True``, ``__cause__`` and ``__context__`` will not be "
"formatted."
msgstr ""
"*chain* が ``True`` でない場合 ``__cause__`` と ``__context__`` は書式化され"
"ません。"

#: ../../library/traceback.rst:281
msgid ""
"The return value is a generator of strings, each ending in a newline and "
"some containing internal newlines. :func:`~traceback.print_exception` is a "
"wrapper around this method which just prints the lines to a file."
msgstr ""
"返り値は文字列のジェネレータで、それぞれ改行で終わりますが、内部に改行を持つ"
"ものもあります。\n"
":func:`~traceback.print_exception` はこのメソッドのラッパで、単にファイルに出"
"力します。"

#: ../../library/traceback.rst:285 ../../library/traceback.rst:299
msgid ""
"The message indicating which exception occurred is always the last string in "
"the output."
msgstr "例外発生を指すメッセージは常に出力の最後の文字列です。"

#: ../../library/traceback.rst:290
msgid "Format the exception part of the traceback."
msgstr "トレースバックの例外部を書式化します。"

#: ../../library/traceback.rst:292
msgid "The return value is a generator of strings, each ending in a newline."
msgstr "返り値は文字列のジェネレータで、それぞれ改行で終わります。"

#: ../../library/traceback.rst:294
msgid ""
"Normally, the generator emits a single string; however, for :exc:"
"`SyntaxError` exceptions, it emits several lines that (when printed) display "
"detailed information about where the syntax error occurred."
msgstr ""
"通常、ジェネレータが出す文字列は一つです。\n"
"しかしながら :exc:`SyntaxError` 例外の場合、構文例外が発生した箇所の詳細な情"
"報を表す行を複数出します。"

#: ../../library/traceback.rst:302
msgid "Added the *compact* parameter."
msgstr "*compact* 引数が追加されました。"

#: ../../library/traceback.rst:307
msgid ":class:`StackSummary` Objects"
msgstr ":class:`StackSummary` オブジェクト"

#: ../../library/traceback.rst:311
msgid ""
":class:`StackSummary` objects represent a call stack ready for formatting."
msgstr ""
":class:`StackSummary` オブジェクトは書式化の準備ができているコールスタックを"
"表します。"

#: ../../library/traceback.rst:317
msgid ""
"Construct a :class:`StackSummary` object from a frame generator (such as is "
"returned by :func:`~traceback.walk_stack` or :func:`~traceback.walk_tb`)."
msgstr ""
"ジェネレータ (例えば :func:`~traceback.walk_stack` や :func:`~traceback."
"walk_tb` が返すもの) から :class:`StackSummary` を構築します。"

#: ../../library/traceback.rst:321
msgid ""
"If *limit* is supplied, only this many frames are taken from *frame_gen*. If "
"*lookup_lines* is ``False``, the returned :class:`FrameSummary` objects will "
"not have read their lines in yet, making the cost of creating the :class:"
"`StackSummary` cheaper (which may be valuable if it may not actually get "
"formatted). If *capture_locals* is ``True`` the local variables in each :"
"class:`FrameSummary` are captured as object representations."
msgstr ""

#: ../../library/traceback.rst:331
msgid ""
"Construct a :class:`StackSummary` object from a supplied list of :class:"
"`FrameSummary` objects or old-style list of tuples.  Each tuple should be a "
"4-tuple with filename, lineno, name, line as the elements."
msgstr ""

#: ../../library/traceback.rst:337
msgid ""
"Returns a list of strings ready for printing.  Each string in the resulting "
"list corresponds to a single frame from the stack. Each string ends in a "
"newline; the strings may contain internal newlines as well, for those items "
"with source text lines."
msgstr ""

#: ../../library/traceback.rst:342
msgid ""
"For long sequences of the same frame and line, the first few repetitions are "
"shown, followed by a summary line stating the exact number of further "
"repetitions."
msgstr ""

#: ../../library/traceback.rst:346
msgid "Long sequences of repeated frames are now abbreviated."
msgstr ""

#: ../../library/traceback.rst:351
msgid ":class:`FrameSummary` Objects"
msgstr ":class:`FrameSummary` オブジェクト"

#: ../../library/traceback.rst:355
msgid ":class:`FrameSummary` objects represent a single frame in a traceback."
msgstr ""
":class:`FrameSummary` オブジェクトトレースバック内の単一のフレームを表しま"
"す。"

#: ../../library/traceback.rst:359
msgid ""
"Represent a single frame in the traceback or stack that is being formatted "
"or printed. It may optionally have a stringified version of the frames "
"locals included in it. If *lookup_line* is ``False``, the source code is not "
"looked up until the :class:`FrameSummary` has the :attr:`~FrameSummary.line` "
"attribute accessed (which also happens when casting it to a tuple). :attr:"
"`~FrameSummary.line` may be directly provided, and will prevent line lookups "
"happening at all. *locals* is an optional local variable dictionary, and if "
"supplied the variable representations are stored in the summary for later "
"display."
msgstr ""

#: ../../library/traceback.rst:372
msgid "Traceback Examples"
msgstr "トレースバックの例"

#: ../../library/traceback.rst:374
msgid ""
"This simple example implements a basic read-eval-print loop, similar to (but "
"less useful than) the standard Python interactive interpreter loop.  For a "
"more complete implementation of the interpreter loop, refer to the :mod:"
"`code` module. ::"
msgstr ""
"この簡単な例では基本的な read-eval-print ループを実装しています。標準的な "
"Python の対話インタープリタループに似ていますが、 Python のものより便利ではあ"
"りません。インタープリタループのより完全な実装については、 :mod:`code` モ"
"ジュールを参照してください。 ::"

#: ../../library/traceback.rst:396
msgid ""
"The following example demonstrates the different ways to print and format "
"the exception and traceback:"
msgstr "次の例は例外とトレースバックの出力並びに形式が異なることを示します:"

#: ../../library/traceback.rst:431
msgid "The output for the example would look similar to this:"
msgstr "この例の出力は次のようになります:"

#: ../../library/traceback.rst:473
msgid ""
"The following example shows the different ways to print and format the "
"stack::"
msgstr "次の例は、スタックの print と format の違いを示しています::"

#: ../../library/traceback.rst:499
msgid "This last example demonstrates the final few formatting functions:"
msgstr "最後の例は、残りの幾つかの関数のデモをします:"
