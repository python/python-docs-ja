# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2017
# Shun Sakurai, 2017
# Inada Naoki <songofacandy@gmail.com>, 2017
# Arihiro TAKASE, 2017
# E. Kawashima, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2017
# yudetamago <yudetamago.orz@gmail.com>, 2018
# Osamu NAKAMURA, 2019
# tomo, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-02 13:46+0000\n"
"PO-Revision-Date: 2017-02-16 23:15+0000\n"
"Last-Translator: tomo, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/io.rst:2
msgid ":mod:`io` --- Core tools for working with streams"
msgstr ":mod:`io` --- ストリームを扱うコアツール"

#: ../../library/io.rst:15
msgid "**Source code:** :source:`Lib/io.py`"
msgstr "**ソースコード:** :source:`Lib/io.py`"

#: ../../library/io.rst:22
msgid "Overview"
msgstr "概要"

#: ../../library/io.rst:27
msgid ""
"The :mod:`io` module provides Python's main facilities for dealing with "
"various types of I/O.  There are three main types of I/O: *text I/O*, "
"*binary I/O* and *raw I/O*.  These are generic categories, and various "
"backing stores can be used for each of them.  A concrete object belonging to"
" any of these categories is called a :term:`file object`.  Other common "
"terms are *stream* and *file-like object*."
msgstr ""
":mod:`io` モジュールは様々な種類の I/O を扱う Python の主要な機能を提供しています。 I/O には主に3つの種類があります; "
"*テキスト I/O*, *バイナリ I/O*, *raw I/O* "
"です。これらは汎用的なカテゴリで、各カテゴリには様々なストレージが利用されます。これらのいずれかのカテゴリに属する具象オブジェクトは全て "
":term:`file object` と呼ばれます。他によく使われる用語として *ストリーム* と *file-like オブジェクト* があります。"

#: ../../library/io.rst:34
msgid ""
"Independent of its category, each concrete stream object will also have "
"various capabilities: it can be read-only, write-only, or read-write. It can"
" also allow arbitrary random access (seeking forwards or backwards to any "
"location), or only sequential access (for example in the case of a socket or"
" pipe)."
msgstr ""
"それぞれの具象ストリームオブジェクトは、カテゴリに応じた機能を持ちます。ストリームは読み込み専用、書き込み専用、読み書き可能のいずかになります。任意のランダムアクセス（前方、後方の任意の場所にシークする）が可能かもしれませんし、シーケンシャルアクセスしかできないかもしれません（例えばソケットやパイプなど）。"

#: ../../library/io.rst:40
msgid ""
"All streams are careful about the type of data you give to them.  For "
"example giving a :class:`str` object to the ``write()`` method of a binary "
"stream will raise a :exc:`TypeError`.  So will giving a :class:`bytes` "
"object to the ``write()`` method of a text stream."
msgstr ""
"全てのストリームは、与えられたデータの型に対して厳密です。例えば、バイナリストリームの ``write()`` メソッドに対して "
":class:`str` オブジェクトを渡すと :exc:`TypeError` 例外を発生させます。テキストストリームの ``write()`` "
"メソッドに :class:`bytes` オブジェクトを渡しても同じです。"

#: ../../library/io.rst:45
msgid ""
"Operations that used to raise :exc:`IOError` now raise :exc:`OSError`, since"
" :exc:`IOError` is now an alias of :exc:`OSError`."
msgstr ""
"以前 :exc:`IOError` を送出していた操作が :exc:`OSError` を送出するようになりました。 :exc:`IOError` "
"は今は :exc:`OSError` の別名です。"

#: ../../library/io.rst:51 ../../library/io.rst:777 ../../library/io.rst:1032
msgid "Text I/O"
msgstr "テキスト I/O"

#: ../../library/io.rst:53
msgid ""
"Text I/O expects and produces :class:`str` objects.  This means that "
"whenever the backing store is natively made of bytes (such as in the case of"
" a file), encoding and decoding of data is made transparently as well as "
"optional translation of platform-specific newline characters."
msgstr ""
"テキスト I/O は、 :class:`str` オブジェクトを受け取り、生成します。すなわち、背後にあるストレージがバイト列 (例えばファイルなど) "
"を格納するときは常に、透過的にデータのエンコード・デコードを行ない、オプションでプラットフォーム依存の改行文字変換を行います。"

#: ../../library/io.rst:58
msgid ""
"The easiest way to create a text stream is with :meth:`open()`, optionally "
"specifying an encoding::"
msgstr "テキストストリームを作る一番簡単な方法は、オプションでエンコーディングを指定して、 :meth:`open()` を利用することです::"

#: ../../library/io.rst:63
msgid ""
"In-memory text streams are also available as :class:`StringIO` objects::"
msgstr ":class:`StringIO` オブジェクトはインメモリーのテキストストリームです::"

#: ../../library/io.rst:67
msgid ""
"The text stream API is described in detail in the documentation of "
":class:`TextIOBase`."
msgstr "テキストストリームの API は :class:`TextIOBase` のドキュメントで詳しく解説します。"

#: ../../library/io.rst:72 ../../library/io.rst:1020
msgid "Binary I/O"
msgstr "バイナリ I/O"

#: ../../library/io.rst:74
msgid ""
"Binary I/O (also called *buffered I/O*) expects :term:`bytes-like objects "
"<bytes-like object>` and produces :class:`bytes` objects.  No encoding, "
"decoding, or newline translation is performed.  This category of streams can"
" be used for all kinds of non-text data, and also when manual control over "
"the handling of text data is desired."
msgstr ""
"バイナリー I/O (*buffered I/O* とも呼ばれます) は :term:`bytes-like オブジェクト <bytes-like "
"object>` を受け取り :class:`bytes` "
"オブジェクトを生成します。エンコード、デコード、改行文字変換は一切行いません。このカテゴリのストリームは全ての非テキストデータや、テキストデータの扱いを手動で管理したい場合に利用することができます。"

#: ../../library/io.rst:80
msgid ""
"The easiest way to create a binary stream is with :meth:`open()` with "
"``'b'`` in the mode string::"
msgstr ""
"バイナリーストリームを生成する一番簡単な方法は、 :meth:`open()` の mode 文字列に ``'b'`` を指定することです::"

#: ../../library/io.rst:85
msgid ""
"In-memory binary streams are also available as :class:`BytesIO` objects::"
msgstr ":class:`BytesIO` はインメモリーのバイナリストリームです::"

#: ../../library/io.rst:89
msgid ""
"The binary stream API is described in detail in the docs of "
":class:`BufferedIOBase`."
msgstr "バイナリーストリーム API は :class:`BufferedIOBase` のドキュメントで詳しく解説します。"

#: ../../library/io.rst:92
msgid ""
"Other library modules may provide additional ways to create text or binary "
"streams.  See :meth:`socket.socket.makefile` for example."
msgstr ""
"他のライブラリモジュールが、別のテキスト・バイナリーストリームを生成する方法を提供しています。例えば "
":meth:`socket.socket.makefile` などです。"

#: ../../library/io.rst:97
msgid "Raw I/O"
msgstr "Raw I/O"

#: ../../library/io.rst:99
msgid ""
"Raw I/O (also called *unbuffered I/O*) is generally used as a low-level "
"building-block for binary and text streams; it is rarely useful to directly "
"manipulate a raw stream from user code.  Nevertheless, you can create a raw "
"stream by opening a file in binary mode with buffering disabled::"
msgstr ""
"Raw I/O (*unbuffered I/O* とも呼ばれます) "
"は、バイナリーストリームやテキストストリームの低水準の部品としてよく利用されます。ユーザーコードで直接 raw "
"ストリームを扱うべき場面は滅多にありません。とはいえ、バッファリングを無効にしてファイルをバイナリーモードで開くことで raw "
"ストリームを作ることができます::"

#: ../../library/io.rst:106
msgid ""
"The raw stream API is described in detail in the docs of :class:`RawIOBase`."
msgstr "raw ストリーム API は :class:`RawIOBase` のドキュメントで詳しく解説します。"

#: ../../library/io.rst:110
msgid "High-level Module Interface"
msgstr "高水準のモジュールインターフェイス"

#: ../../library/io.rst:114
msgid ""
"An int containing the default buffer size used by the module's buffered I/O "
"classes.  :func:`open` uses the file's blksize (as obtained by "
":func:`os.stat`) if possible."
msgstr ""
"このモジュールの buffered I/O クラスで利用されるデフォルトのバッファーサイズを表す整数です。可能であれば、:func:`open` は "
"file の blksize (:func:`os.stat` で取得される) を利用します。"

#: ../../library/io.rst:121
msgid "This is an alias for the builtin :func:`open` function."
msgstr "組み込みの :func:`open` 関数のエイリアスです。"

#: ../../library/io.rstNone
msgid ""
"Raises an :ref:`auditing event <auditing>` ``open`` with arguments ``path``,"
" ``mode``, ``flags``."
msgstr ""
"引数 ``path``, ``mode``, ``flags`` を指定して :ref:`監査イベント <auditing>` ``open`` "
"を送出します。 "

#: ../../library/io.rst:125
msgid ""
"This function raises an :ref:`auditing event <auditing>` ``open`` with "
"arguments ``path``, ``mode`` and ``flags``. The ``mode`` and ``flags`` "
"arguments may have been modified or inferred from the original call."
msgstr ""

#: ../../library/io.rst:132
msgid ""
"Opens the provided file with mode ``'rb'``. This function should be used "
"when the intent is to treat the contents as executable code."
msgstr ""

#: ../../library/io.rst:135
msgid "``path`` should be a :class:`str` and an absolute path."
msgstr ""

#: ../../library/io.rst:137
msgid ""
"The behavior of this function may be overridden by an earlier call to the "
":c:func:`PyFile_SetOpenCodeHook`. However, assuming that ``path`` is a "
":class:`str` and an absolute path, ``open_code(path)`` should always behave "
"the same as ``open(path, 'rb')``. Overriding the behavior is intended for "
"additional validation or preprocessing of the file."
msgstr ""

#: ../../library/io.rst:148
msgid ""
"This is a compatibility alias for the builtin :exc:`BlockingIOError` "
"exception."
msgstr "互換性のための、組み込みの :exc:`BlockingIOError` 例外のエイリアスです。"

#: ../../library/io.rst:154
msgid ""
"An exception inheriting :exc:`OSError` and :exc:`ValueError` that is raised "
"when an unsupported operation is called on a stream."
msgstr ""
":exc:`OSError` と :exc:`ValueError` "
"を継承した例外です。ストリームがサポートしていない操作を行おうとした時に送出されます。 "

#: ../../library/io.rst:159
msgid "In-memory streams"
msgstr "インメモリー ストリーム"

#: ../../library/io.rst:161
msgid ""
"It is also possible to use a :class:`str` or :term:`bytes-like object` as a "
"file for both reading and writing.  For strings :class:`StringIO` can be "
"used like a file opened in text mode.  :class:`BytesIO` can be used like a "
"file opened in binary mode.  Both provide full read-write capabilities with "
"random access."
msgstr ""
":class:`str` や :term:`bytes-like オブジェクト <bytes-like object>` "
"を、読み書き可能なファイルのように扱うことができます。 :class:`StringIO` "
"は文字列に対して、テキストモードで開かれたファイルのように使うことができます。 :class:`BytesIO` "
"はバイナリーモードで開いたファイルのように扱うことができます。この2つのクラスは、読み書き可能で、ランダムアクセス可能です。"

#: ../../library/io.rst:171
msgid ":mod:`sys`"
msgstr ":mod:`sys`"

#: ../../library/io.rst:171
msgid ""
"contains the standard IO streams: :data:`sys.stdin`, :data:`sys.stdout`, and"
" :data:`sys.stderr`."
msgstr ""
"標準 IO ストリームを持っています: :data:`sys.stdin`, :data:`sys.stdout`, "
":data:`sys.stderr`。"

#: ../../library/io.rst:176
msgid "Class hierarchy"
msgstr "クラス階層"

#: ../../library/io.rst:178
msgid ""
"The implementation of I/O streams is organized as a hierarchy of classes.  "
"First :term:`abstract base classes <abstract base class>` (ABCs), which are "
"used to specify the various categories of streams, then concrete classes "
"providing the standard stream implementations."
msgstr ""
"I/O ストリームの実装はクラス階層に分けて整理されています。まずストリームのカテゴリを分類するための :term:`抽象基底クラス <abstract"
" base class>` (ABC) があり、続いて標準のストリーム実装を行う具象クラス群があります。"

#: ../../library/io.rst:185
msgid ""
"The abstract base classes also provide default implementations of some "
"methods in order to help implementation of concrete stream classes.  For "
"example, :class:`BufferedIOBase` provides unoptimized implementations of "
":meth:`~IOBase.readinto` and :meth:`~IOBase.readline`."
msgstr ""
"抽象基底クラス群は、具象ストリームクラスの実装を助けるために、いくつかのデフォルトの実装を提供しています。例えば、 "
":class:`BufferedIOBase` は :meth:`~IOBase.readinto` と "
":meth:`~IOBase.readline` の最適化されていない実装を提供しています。"

#: ../../library/io.rst:190
msgid ""
"At the top of the I/O hierarchy is the abstract base class :class:`IOBase`."
"  It defines the basic interface to a stream.  Note, however, that there is "
"no separation between reading and writing to streams; implementations are "
"allowed to raise :exc:`UnsupportedOperation` if they do not support a given "
"operation."
msgstr ""
"I/O 階層の最上位には抽象基底クラスの :class:`IOBase` があります。 :class:`IOBase` "
"ではストリームに対して基本的なインタフェースを定義しています。 "
"しかしながら、ストリームに対する読み込みと書き込みが分離されていないことに注意してください。 実装においては与えられた操作をサポートしない場合は "
":exc:`UnsupportedOperation` を送出することが許されています。"

#: ../../library/io.rst:195
msgid ""
"The :class:`RawIOBase` ABC extends :class:`IOBase`.  It deals with the "
"reading and writing of bytes to a stream.  :class:`FileIO` subclasses "
":class:`RawIOBase` to provide an interface to files in the machine's file "
"system."
msgstr ""
":class:`RawIOBase` ABC は :class:`IOBase` を拡張します。このクラスはストリームからの bytes "
"の読み書きを扱います。 :class:`FileIO` は、 :class:`RawIOBase` "
"を継承してマシンのファイルシステム中のファイルへのインタフェースを提供します。"

#: ../../library/io.rst:199
msgid ""
"The :class:`BufferedIOBase` ABC deals with buffering on a raw byte stream "
"(:class:`RawIOBase`).  Its subclasses, :class:`BufferedWriter`, "
":class:`BufferedReader`, and :class:`BufferedRWPair` buffer streams that are"
" readable, writable, and both readable and writable.  "
":class:`BufferedRandom` provides a buffered interface to random access "
"streams.  Another :class:`BufferedIOBase` subclass, :class:`BytesIO`, is a "
"stream of in-memory bytes."
msgstr ""
":class:`BufferedIOBase` ABC は生のバイトストリーム (:class:`RawIOBase`) "
"上にバッファ処理を追加します。そのサブクラスの :class:`BufferedWriter`, :class:`BufferedReader`, "
":class:`BufferedRWPair` では、 それぞれ読み込み専用、書き込み専用、読み書き可能なストリームをバッファします。 "
":class:`BufferedRandom` ではランダムアクセスストリームに対してバッファされたインタフェースを提供します。 "
":class:`BytesIO` も :class:`BufferedIOBase` のサブクラスで、インメモリのバイト列へのシンプルなストリームです。"

#: ../../library/io.rst:207
msgid ""
"The :class:`TextIOBase` ABC, another subclass of :class:`IOBase`, deals with"
" streams whose bytes represent text, and handles encoding and decoding to "
"and from strings. :class:`TextIOWrapper`, which extends it, is a buffered "
"text interface to a buffered raw stream (:class:`BufferedIOBase`). Finally, "
":class:`StringIO` is an in-memory stream for text."
msgstr ""
"もう一つの :class:`IOBase` のサブクラスである :class:`TextIOBase` ABC は、 "
"テキストを表すバイトストリームを扱い、文字列とのエンコードやデコードといった処理を行います。 :class:`TextIOWrapper` "
"はその拡張で、バッファ付き raw ストリーム (:class:`BufferedIOBase`) へのバッファされたテキストインタフェースです。 "
"最後に :class:`StringIO` はテキストに対するインメモリストリームです。"

#: ../../library/io.rst:213
msgid ""
"Argument names are not part of the specification, and only the arguments of "
":func:`open` are intended to be used as keyword arguments."
msgstr "引数名は規約に含まれていません。 そして :func:`open` の引数だけがキーワード引数として用いられることが意図されています。"

#: ../../library/io.rst:216
msgid ""
"The following table summarizes the ABCs provided by the :mod:`io` module:"
msgstr "次のテーブルは :mod:`io` モジュールが提供する ABC の概要です:"

#: ../../library/io.rst:221
msgid "ABC"
msgstr "ABC"

#: ../../library/io.rst:221
msgid "Inherits"
msgstr "継承元"

#: ../../library/io.rst:221
msgid "Stub Methods"
msgstr "スタブメソッド"

#: ../../library/io.rst:221
msgid "Mixin Methods and Properties"
msgstr "Mixin するメソッドとプロパティ"

#: ../../library/io.rst:223 ../../library/io.rst:228 ../../library/io.rst:230
#: ../../library/io.rst:232
msgid ":class:`IOBase`"
msgstr ":class:`IOBase`"

#: ../../library/io.rst:223
msgid "``fileno``, ``seek``, and ``truncate``"
msgstr "``fileno``, ``seek``, ``truncate``"

#: ../../library/io.rst:223
msgid ""
"``close``, ``closed``, ``__enter__``, ``__exit__``, ``flush``, ``isatty``, "
"``__iter__``, ``__next__``, ``readable``, ``readline``, ``readlines``, "
"``seekable``, ``tell``, ``writable``, and ``writelines``"
msgstr ""
"``close``, ``closed``, ``__enter__``, ``__exit__``, ``flush``, ``isatty``, "
"``__iter__``, ``__next__``, ``readable``, ``readline``, ``readlines``, "
"``seekable``, ``tell``, ``writable``, ``writelines``"

#: ../../library/io.rst:228
msgid ":class:`RawIOBase`"
msgstr ":class:`RawIOBase`"

#: ../../library/io.rst:228
msgid "``readinto`` and ``write``"
msgstr "``readinto``, ``write``"

#: ../../library/io.rst:228
msgid "Inherited :class:`IOBase` methods, ``read``, and ``readall``"
msgstr ":class:`IOBase` から継承したメソッド、 ``read``, ``readall``"

#: ../../library/io.rst:230
msgid ":class:`BufferedIOBase`"
msgstr ":class:`BufferedIOBase`"

#: ../../library/io.rst:230
msgid "``detach``, ``read``, ``read1``, and ``write``"
msgstr "``detach``, ``read``, ``read1``, ``write``"

#: ../../library/io.rst:230
msgid "Inherited :class:`IOBase` methods, ``readinto``, and ``readinto1``"
msgstr ":class:`IOBase` から継承したメソッド、 ``readinto``, ``readinto1``"

#: ../../library/io.rst:232
msgid ":class:`TextIOBase`"
msgstr ":class:`TextIOBase`"

#: ../../library/io.rst:232
msgid "``detach``, ``read``, ``readline``, and ``write``"
msgstr "``detach``, ``read``, ``readline``, ``write``"

#: ../../library/io.rst:232
msgid ""
"Inherited :class:`IOBase` methods, ``encoding``, ``errors``, and "
"``newlines``"
msgstr ":class:`IOBase` から継承したメソッド、 ``encoding``, ``errors``, ``newlines``"

#: ../../library/io.rst:239
msgid "I/O Base Classes"
msgstr "I/O 基底クラス"

#: ../../library/io.rst:243
msgid ""
"The abstract base class for all I/O classes, acting on streams of bytes. "
"There is no public constructor."
msgstr "すべての I/O クラスの抽象基底クラスです。バイトストリームへの操作を行います。パブリックなコンストラクタはありません。"

#: ../../library/io.rst:246
msgid ""
"This class provides empty abstract implementations for many methods that "
"derived classes can override selectively; the default implementations "
"represent a file that cannot be read, written or seeked."
msgstr ""
"継承先のクラスが選択的にオーバライドできるように、このクラスは多くのメソッドに空の抽象実装をしています。デフォルトの実装では、読み込み、書き込み、シークができないファイルを表現します。"

#: ../../library/io.rst:251
msgid ""
"Even though :class:`IOBase` does not declare :meth:`read` or :meth:`write` "
"because their signatures will vary, implementations and clients should "
"consider those methods part of the interface.  Also, implementations may "
"raise a :exc:`ValueError` (or :exc:`UnsupportedOperation`) when operations "
"they do not support are called."
msgstr ""
":class:`IOBase` では :meth:`read`, :meth:`write` が宣言されていませんが、これはシグナチャが変化するためで、実装やクライアントはこれらのメソッドをインタフェースの一部として考えるべきです。\n"
"また、実装はサポートしていない操作を呼び出されたときは :exc:`ValueError` (または :exc:`UnsupportedOperation`) を発生させるかもしれません。"

#: ../../library/io.rst:257
msgid ""
"The basic type used for binary data read from or written to a file is "
":class:`bytes`.  Other :term:`bytes-like objects <bytes-like object>` are "
"accepted as method arguments too.  Text I/O classes work with :class:`str` "
"data."
msgstr ""
"ファイルへのバイナリデータの読み書きに用いられる基本型は :class:`bytes` です。\n"
"他の :term:`bytes-like オブジェクト <bytes-like object>` もメソッドの引数として受け付けられます。\n"
"テキスト I/O クラスは :class:`str` データを扱います。"

#: ../../library/io.rst:261
msgid ""
"Note that calling any method (even inquiries) on a closed stream is "
"undefined.  Implementations may raise :exc:`ValueError` in this case."
msgstr ""
"閉じられたストリームに対するメソッド呼び出しは (問い合わせであっても) 未定義です。この場合、実装は :exc:`ValueError` "
"を送出することがあります。"

#: ../../library/io.rst:264
msgid ""
":class:`IOBase` (and its subclasses) supports the iterator protocol, meaning"
" that an :class:`IOBase` object can be iterated over yielding the lines in a"
" stream.  Lines are defined slightly differently depending on whether the "
"stream is a binary stream (yielding bytes), or a text stream (yielding "
"character strings).  See :meth:`~IOBase.readline` below."
msgstr ""
":class:`IOBase` (とそのサブクラス) はイテレータプロトコルをサポートします。 :class:`IOBase` "
"オブジェクトをイテレートすると、ストリーム内の行が yield されます。ストリーム内の行の定義は、そのストリームが (バイト列を yield する) "
"バイナリストリームか (文字列を yield する) テキストストリームかによって、 少し異なります。下の "
":meth:`~IOBase.readline` を参照してください。"

#: ../../library/io.rst:270
msgid ""
":class:`IOBase` is also a context manager and therefore supports the "
":keyword:`with` statement.  In this example, *file* is closed after the "
":keyword:`!with` statement's suite is finished---even if an exception "
"occurs::"
msgstr ""
":class:`IOBase` はコンテキストマネージャでもあります。そのため :keyword:`with` 構文をサポートします。 次の例では、 "
":keyword:`!with` 構文が終わった後で---たとえ例外が発生した場合でも、 *file* は閉じられます。"

#: ../../library/io.rst:277
msgid ":class:`IOBase` provides these data attributes and methods:"
msgstr ":class:`IOBase` は以下のデータ属性とメソッドを提供します:"

#: ../../library/io.rst:281
msgid ""
"Flush and close this stream. This method has no effect if the file is "
"already closed. Once the file is closed, any operation on the file (e.g. "
"reading or writing) will raise a :exc:`ValueError`."
msgstr ""
"このストリームをフラッシュして閉じます。このメソッドはファイルが既に閉じられていた場合は特に何の効果もありません。いったんファイルが閉じられると、すべてのファイルに対する操作"
" (例えば読み込みや書き込み) で :exc:`ValueError` が発生します。"

#: ../../library/io.rst:285
msgid ""
"As a convenience, it is allowed to call this method more than once; only the"
" first call, however, will have an effect."
msgstr "利便性のためにこのメソッドを複数回呼ぶことは許されています。しかし、効果があるのは最初の1回だけです。"

#: ../../library/io.rst:290
msgid "``True`` if the stream is closed."
msgstr "ストリームが閉じられていた場合 ``True`` になります。"

#: ../../library/io.rst:294
msgid ""
"Return the underlying file descriptor (an integer) of the stream if it "
"exists.  An :exc:`OSError` is raised if the IO object does not use a file "
"descriptor."
msgstr ""
"ストリームが保持しているファイル記述子 (整数値) が存在する場合はそれを返します。もし IO オブジェクトがファイル記述子を使っていない場合は "
":exc:`OSError` が発生します。"

#: ../../library/io.rst:300
msgid ""
"Flush the write buffers of the stream if applicable.  This does nothing for "
"read-only and non-blocking streams."
msgstr "適用可能であればストリームの書き込みバッファをフラッシュします。読み出し専用や非ブロッキングストリームでは何もしません。"

#: ../../library/io.rst:305
msgid ""
"Return ``True`` if the stream is interactive (i.e., connected to a "
"terminal/tty device)."
msgstr "ストリームが対話的であれば (つまりターミナルや tty デバイスにつながっている場合) ``True`` を返します。"

#: ../../library/io.rst:310
msgid ""
"Return ``True`` if the stream can be read from.  If ``False``, :meth:`read` "
"will raise :exc:`OSError`."
msgstr ""
"ストリームが読み込める場合 ``True`` を返します。 ``False`` の場合は :meth:`read` は :exc:`OSError` "
"を発生させます。"

#: ../../library/io.rst:315
msgid ""
"Read and return one line from the stream.  If *size* is specified, at most "
"*size* bytes will be read."
msgstr "ストリームから 1 行読み込んで返します。もし *size* が指定された場合、最大で *size* バイトが読み込まれます。"

#: ../../library/io.rst:318
msgid ""
"The line terminator is always ``b'\\n'`` for binary files; for text files, "
"the *newline* argument to :func:`open` can be used to select the line "
"terminator(s) recognized."
msgstr ""
"バイナリファイルでは行末文字は常に ``b'\\n'`` となります。テキストファイルでは、認識される行末文字を選択するために :func:`open`"
" に対する *newline* 引数が使われます。"

#: ../../library/io.rst:324
msgid ""
"Read and return a list of lines from the stream.  *hint* can be specified to"
" control the number of lines read: no more lines will be read if the total "
"size (in bytes/characters) of all lines so far exceeds *hint*."
msgstr ""
"ストリームから行のリストを読み込んで返します。 *hint* を指定することで、読み込む行数を制御できます。もし読み込んだすべての行のサイズ "
"(バイト数、もしくは文字数) が *hint* の値を超えた場合、読み込みをそこで終了します。"

#: ../../library/io.rst:328
msgid ""
"Note that it's already possible to iterate on file objects using ``for line "
"in file: ...`` without calling ``file.readlines()``."
msgstr ""
"ただし、 ``file.readlines()`` を呼びださなくても ``for line in file: ...`` のように file "
"オブジェクトを直接イテレートすることができます。"

#: ../../library/io.rst:333
msgid ""
"Change the stream position to the given byte *offset*.  *offset* is "
"interpreted relative to the position indicated by *whence*.  The default "
"value for *whence* is :data:`SEEK_SET`.  Values for *whence* are:"
msgstr ""
"ストリーム位置を指定された *offset* バイトに変更します。*offset* は *whence* "
"で指定された位置からの相対位置として解釈されます。 *whence* のデフォルト値は :data:`SEEK_SET` です。 *whence* "
"に指定できる値は:"

#: ../../library/io.rst:337
msgid ""
":data:`SEEK_SET` or ``0`` -- start of the stream (the default); *offset* "
"should be zero or positive"
msgstr ""
":data:`SEEK_SET` または ``0`` -- ストリームの先頭 (デフォルト)。 *offset* は 0 "
"もしくは正の値でなければなりません。"

#: ../../library/io.rst:339
msgid ""
":data:`SEEK_CUR` or ``1`` -- current stream position; *offset* may be "
"negative"
msgstr ":data:`SEEK_CUR` または ``1`` -- 現在のストリーム位置。 *offset* は負の値も可能です。"

#: ../../library/io.rst:341
msgid ""
":data:`SEEK_END` or ``2`` -- end of the stream; *offset* is usually negative"
msgstr ":data:`SEEK_END` または ``2`` -- ストリームの末尾。 *offset* は通常負の値です。"

#: ../../library/io.rst:344
msgid "Return the new absolute position."
msgstr "新しい絶対位置を返します。"

#: ../../library/io.rst:346 ../../library/io.rst:853
msgid "The ``SEEK_*`` constants."
msgstr "``SEEK_*`` 定数."

#: ../../library/io.rst:349
msgid ""
"Some operating systems could support additional values, like "
":data:`os.SEEK_HOLE` or :data:`os.SEEK_DATA`. The valid values for a file "
"could depend on it being open in text or binary mode."
msgstr ""
"一部のオペレーティングシステムは :data:`os.SEEK_HOLE` や :data:`os.SEEK_DATA` "
"など、追加の値をサポートすることがあります。ファイルに対して利用できる値は、そのファイルがテキストモードで開かれたかバイナリモードで開かれたかに依存します。"

#: ../../library/io.rst:356
msgid ""
"Return ``True`` if the stream supports random access.  If ``False``, "
":meth:`seek`, :meth:`tell` and :meth:`truncate` will raise :exc:`OSError`."
msgstr ""
"ストリームがランダムアクセスをサポートしている場合、 ``True`` を返します。 ``False`` の場合、 :meth:`seek`\\ 、 "
":meth:`tell`\\ 、 :meth:`truncate` を使用すると :exc:`OSError` を発生させます。"

#: ../../library/io.rst:361
msgid "Return the current stream position."
msgstr "現在のストリーム位置を返します。"

#: ../../library/io.rst:365
msgid ""
"Resize the stream to the given *size* in bytes (or the current position if "
"*size* is not specified).  The current stream position isn't changed. This "
"resizing can extend or reduce the current file size.  In case of extension, "
"the contents of the new file area depend on the platform (on most systems, "
"additional bytes are zero-filled).  The new file size is returned."
msgstr ""
"ストリームのサイズを、指定された *size* バイト (または *size* が指定されていない場合、現在位置) "
"に変更します。現在のストリーム位置は変更されません。このサイズ変更により、現在のファイルサイズを拡大または縮小させることができます。拡大の場合には、新しいファイル領域の内容はプラットホームによって異なります"
" (ほとんどのシステムでは、追加のバイトが 0 で埋められます)。新しいファイルサイズが返されます。"

#: ../../library/io.rst:372
msgid "Windows will now zero-fill files when extending."
msgstr "Windows で、拡大時に追加領域を 0 で埋めるようになりました。"

#: ../../library/io.rst:377
msgid ""
"Return ``True`` if the stream supports writing.  If ``False``, :meth:`write`"
" and :meth:`truncate` will raise :exc:`OSError`."
msgstr ""
"ストリームが書き込みをサポートしている場合 ``True`` を返します。 ``False`` の場合は :meth:`write`\\ 、 "
":meth:`truncate` は :exc:`OSError` を返します。"

#: ../../library/io.rst:382
msgid ""
"Write a list of lines to the stream.  Line separators are not added, so it "
"is usual for each of the lines provided to have a line separator at the end."
msgstr "ストリームに行のリストを書き込みます。行区切り文字は追加されないので、書き込む各行の行末に行区切り文字を含ませるのが一般的です。"

#: ../../library/io.rst:388
msgid ""
"Prepare for object destruction. :class:`IOBase` provides a default "
"implementation of this method that calls the instance's "
":meth:`~IOBase.close` method."
msgstr ""
"オブジェクトの破壊の用意をします。このメソッドはインスタンスの :meth:`~IOBase.close` メソッドを呼びます。 "
":class:`IOBase` はこのメソッドのデフォルトの実装を提供します"

#: ../../library/io.rst:395
msgid ""
"Base class for raw binary I/O.  It inherits :class:`IOBase`.  There is no "
"public constructor."
msgstr "生のバイナリ I/O への基底クラスです。 :class:`IOBase` を継承しています。パブリックコンストラクタはありません。"

#: ../../library/io.rst:398
msgid ""
"Raw binary I/O typically provides low-level access to an underlying OS "
"device or API, and does not try to encapsulate it in high-level primitives "
"(this is left to Buffered I/O and Text I/O, described later in this page)."
msgstr ""
"raw バイナリ I/O は典型的に、下にある OS デバイスや API への低水準のアクセスを提供し、高水準の基本要素へとカプセル化しようとはしません"
" (これはこのページで後述する Buffered I/O や Text I/O に任せます)。"

#: ../../library/io.rst:402
msgid ""
"In addition to the attributes and methods from :class:`IOBase`, "
":class:`RawIOBase` provides the following methods:"
msgstr ":class:`IOBase` の属性やメソッドに加えて、 :class:`RawIOBase` は次のメソッドを提供します:"

#: ../../library/io.rst:407
msgid ""
"Read up to *size* bytes from the object and return them.  As a convenience, "
"if *size* is unspecified or -1, all bytes until EOF are returned. Otherwise,"
" only one system call is ever made.  Fewer than *size* bytes may be returned"
" if the operating system call returns fewer than *size* bytes."
msgstr ""
"オブジェクトを *size* バイトまで読み込み、それを返します。\n"
"簡単のため、 *size* が指定されていないか -1 の場合は、 EOF までの全てのバイトを返します。\n"
"そうでない場合は、システムコール呼び出しが一度だけ行われます。\n"
"オペレーティングシステムコールから返ってきたものが *size* バイトより少なければ、 *size* バイトより少ない返り値になることがあります。"

#: ../../library/io.rst:412
msgid ""
"If 0 bytes are returned, and *size* was not 0, this indicates end of file. "
"If the object is in non-blocking mode and no bytes are available, ``None`` "
"is returned."
msgstr ""
"*size* が 0 でないのに 0 バイトが返った場合、それはファイルの終端を表します。オブジェクトがノンブロッキングモードで、1 "
"バイトも読み込めなければ、``None`` が返されます。"

#: ../../library/io.rst:416
msgid ""
"The default implementation defers to :meth:`readall` and :meth:`readinto`."
msgstr "デフォルトの実装は :meth:`readall` と :meth:`readinto` に従います。"

#: ../../library/io.rst:421
msgid ""
"Read and return all the bytes from the stream until EOF, using multiple "
"calls to the stream if necessary."
msgstr "EOF までストリームからすべてのバイトを読み込みます。必要な場合はストリームに対して複数の呼び出しをします。"

#: ../../library/io.rst:426
msgid ""
"Read bytes into a pre-allocated, writable :term:`bytes-like object` *b*, and"
" return the number of bytes read.  For example, *b* might be a "
":class:`bytearray`. If the object is in non-blocking mode and no bytes are "
"available, ``None`` is returned."
msgstr ""
"あらかじめ確保された書き込み可能な :term:`bytes 類オブジェクト <bytes-like object>` *b* にバイト列を読み込み、読み込んだバイト数を返します。\n"
"例えば、 *b* は :class:`bytearray` です。\n"
"オブジェクトがノンブロッキングモードで、 1 バイトも読み込めなければ、 ``None`` が返されます。"

#: ../../library/io.rst:434
msgid ""
"Write the given :term:`bytes-like object`, *b*, to the underlying raw "
"stream, and return the number of bytes written.  This can be less than the "
"length of *b* in bytes, depending on specifics of the underlying raw stream,"
" and especially if it is in non-blocking mode.  ``None`` is returned if the "
"raw stream is set not to block and no single byte could be readily written "
"to it.  The caller may release or mutate *b* after this method returns, so "
"the implementation should only access *b* during the method call."
msgstr ""
"与えられた :term:`bytes-like オブジェクト <bytes-like object>` *b* "
"を生ストリームに書き込み、書き込んだバイト数を返します。これは、根底の生ストリームの性質や、特にノンブロッキングである場合に、 *b* "
"のバイト数より小さくなることがあります。生ストリームがブロックされないように設定されていて、かつ1バイトも即座に書き込むことができなければ、 "
"``None`` が返されます。このメソッドから返った後で呼び出し元は *b* "
"を解放したり変更したりするかもしれないので、実装はメソッド呼び出しの間だけ *b* にアクセスすべきです。"

#: ../../library/io.rst:447
msgid ""
"Base class for binary streams that support some kind of buffering. It "
"inherits :class:`IOBase`. There is no public constructor."
msgstr ""
"何らかのバッファリングをサポートするバイナリストリームの基底クラスです。 :class:`IOBase` "
"を継承します。パブリックなコンストラクタはありません。"

#: ../../library/io.rst:450
msgid ""
"The main difference with :class:`RawIOBase` is that methods :meth:`read`, "
":meth:`readinto` and :meth:`write` will try (respectively) to read as much "
"input as requested or to consume all given output, at the expense of making "
"perhaps more than one system call."
msgstr ""
":class:`RawIOBase` との主な違いは、メソッド :meth:`read`、 :meth:`readinto` および "
":meth:`write` は 、ことによると複数回のシステムコールを行って、(それぞれ) "
"要求されただけの入力を読み込もうとしたり与えられた出力の全てを消費しようとしたりする点です。"

#: ../../library/io.rst:455
msgid ""
"In addition, those methods can raise :exc:`BlockingIOError` if the "
"underlying raw stream is in non-blocking mode and cannot take or give enough"
" data; unlike their :class:`RawIOBase` counterparts, they will never return "
"``None``."
msgstr ""
"加えて、元になる生ストリームが非ブロッキングモードでかつ準備ができていない場合に、これらのメソッドは、 :exc:`BlockingIOError` "
"を送出するかもしれません。対応する :class:`RawIOBase` バージョンと違って、 ``None`` を返すことはありません。"

#: ../../library/io.rst:460
msgid ""
"Besides, the :meth:`read` method does not have a default implementation that"
" defers to :meth:`readinto`."
msgstr "さらに、 :meth:`read` メソッドは、 :meth:`readinto` に従うデフォルト実装を持ちません。"

#: ../../library/io.rst:463
msgid ""
"A typical :class:`BufferedIOBase` implementation should not inherit from a "
":class:`RawIOBase` implementation, but wrap one, like "
":class:`BufferedWriter` and :class:`BufferedReader` do."
msgstr ""
"通常の :class:`BufferedIOBase` 実装は :class:`RawIOBase` 実装を継承せずに、 "
":class:`BufferedWriter` と :class:`BufferedReader` がするようにこれをラップすべきです。"

#: ../../library/io.rst:467
msgid ""
":class:`BufferedIOBase` provides or overrides these methods and attribute in"
" addition to those from :class:`IOBase`:"
msgstr ""
":class:`BufferedIOBase` は :class:`IOBase` "
"からのメソッドと属性に加えて、以下のメソッドを提供もしくはオーバーライドします:"

#: ../../library/io.rst:472
msgid ""
"The underlying raw stream (a :class:`RawIOBase` instance) that "
":class:`BufferedIOBase` deals with.  This is not part of the "
":class:`BufferedIOBase` API and may not exist on some implementations."
msgstr ""
":class:`BufferedIOBase` が扱う根底の生ストリーム (:class:`RawIOBase` インスタンス) を返します。これは "
":class:`BufferedIOBase` API には含まれず、よって実装に含まれないことがあります。"

#: ../../library/io.rst:478
msgid "Separate the underlying raw stream from the buffer and return it."
msgstr "根底の生ストリームをバッファから分離して返します。"

#: ../../library/io.rst:480
msgid ""
"After the raw stream has been detached, the buffer is in an unusable state."
msgstr "生ストリームが取り外された後、バッファは使用不能状態になります。"

#: ../../library/io.rst:483
msgid ""
"Some buffers, like :class:`BytesIO`, do not have the concept of a single raw"
" stream to return from this method.  They raise :exc:`UnsupportedOperation`."
msgstr ""
"バッファには、 :class:`BytesIO` など、このメソッドで返される単体のストリームという概念を持たないものがあります。これらは "
":exc:`UnsupportedOperation` を送出します。"

#: ../../library/io.rst:491
msgid ""
"Read and return up to *size* bytes.  If the argument is omitted, ``None``, "
"or negative, data is read and returned until EOF is reached.  An empty "
":class:`bytes` object is returned if the stream is already at EOF."
msgstr ""
"最大で *size* バイト読み込んで返します。 引数が省略されるか、 ``None`` か、または負の値であった場合、 データは EOF "
"に到達するまで読み込まれます。 ストリームが既に EOF に到達していた場合は空の :class:`bytes` オブジェクトが返されます。"

#: ../../library/io.rst:495
msgid ""
"If the argument is positive, and the underlying raw stream is not "
"interactive, multiple raw reads may be issued to satisfy the byte count "
"(unless EOF is reached first).  But for interactive raw streams, at most one"
" raw read will be issued, and a short result does not imply that EOF is "
"imminent."
msgstr ""
"引数が正で、元になる生ストリームが対話的でなければ、必要なバイト数を満たすように複数回の生 read が発行されるかもしれません (先に EOF "
"に到達しない限りは)。対話的な場合は、最大で一回の raw read しか発行されず、短い結果でも EOF に達したことを意味しません。"

#: ../../library/io.rst:501 ../../library/io.rst:524 ../../library/io.rst:534
msgid ""
"A :exc:`BlockingIOError` is raised if the underlying raw stream is in non "
"blocking-mode, and has no data available at the moment."
msgstr ""
"元になる生ストリームがノンブロッキングモードで、呼び出された時点でデータを持っていなければ、 :exc:`BlockingIOError` "
"が送出されます。"

#: ../../library/io.rst:506
msgid ""
"Read and return up to *size* bytes, with at most one call to the underlying "
"raw stream's :meth:`~RawIOBase.read` (or :meth:`~RawIOBase.readinto`) "
"method.  This can be useful if you are implementing your own buffering on "
"top of a :class:`BufferedIOBase` object."
msgstr ""
"根底の raw ストリームの :meth:`~RawIOBase.read` (または :meth:`~RawIOBase.readinto` ) "
"メソッドを高々 1 回呼び出し、最大で *size* バイト読み込み、返します。これは、 :class:`BufferedIOBase` "
"オブジェクトの上に独自のバッファリングを実装するときに便利です。"

#: ../../library/io.rst:512
msgid ""
"If *size* is ``-1`` (the default), an arbitrary number of bytes are returned"
" (more than zero unless EOF is reached)."
msgstr ""
"*size* に ``-1``（デフォルト値)を指定すると任意バイト長を返します（EOFに到達していなければ返されるバイト数は 0 より大きくなります）"

#: ../../library/io.rst:517
msgid ""
"Read bytes into a pre-allocated, writable :term:`bytes-like object` *b* and "
"return the number of bytes read. For example, *b* might be a "
":class:`bytearray`."
msgstr ""
"あらかじめ確保された書き込み可能な :term:`bytes 類オブジェクト <bytes-like object>` *b* にバイト列を読み込み、読み込んだバイト数を返します。\n"
"例えば、 *b* は :class:`bytearray` です。"

#: ../../library/io.rst:521
msgid ""
"Like :meth:`read`, multiple reads may be issued to the underlying raw "
"stream, unless the latter is interactive."
msgstr ""
":meth:`read` と同様に、下層の raw ストリームが対話的でない限り、複数の読み込みは下層の raw ストリームに与えられるかもしれません。"

#: ../../library/io.rst:529
msgid ""
"Read bytes into a pre-allocated, writable :term:`bytes-like object` *b*, "
"using at most one call to the underlying raw stream's "
":meth:`~RawIOBase.read` (or :meth:`~RawIOBase.readinto`) method. Return the "
"number of bytes read."
msgstr ""
"根底の raw ストリームの :meth:`~RawIOBase.read` (または :meth:`~RawIOBase.readinto`) "
"メソッドを高々 1 回呼び出し、あらかじめ確保された書き込み可能な :term:`bytes-like オブジェクト <bytes-like "
"object>` *b* にバイト列を読み込みます。読み込んだバイト数を返します。"

#: ../../library/io.rst:541
msgid ""
"Write the given :term:`bytes-like object`, *b*, and return the number of "
"bytes written (always equal to the length of *b* in bytes, since if the "
"write fails an :exc:`OSError` will be raised).  Depending on the actual "
"implementation, these bytes may be readily written to the underlying stream,"
" or held in a buffer for performance and latency reasons."
msgstr ""
"与えられた :term:`bytes-like オブジェクト <bytes-like object>` *b* を書き込み、書き込んだバイト数を返します"
" (これは常に *b* のバイト数と等しくなります。なぜなら、もし書き込みに失敗した場合は :exc:`OSError` "
"が発生するからです)。実際の実装に依存して、これらのバイト列は根底のストリームに即座に書き込まれることもあれば、パフォーマンスやレイテンシの関係でバッファに保持されることもあります。"

#: ../../library/io.rst:548
msgid ""
"When in non-blocking mode, a :exc:`BlockingIOError` is raised if the data "
"needed to be written to the raw stream but it couldn't accept all the data "
"without blocking."
msgstr ""
"ノンブロッキングモードであるとき、バッファが満杯で根底の生ストリームが書き込み時点でさらなるデータを受け付けられない場合 "
":exc:`BlockingIOError` が送出されます。"

#: ../../library/io.rst:552
msgid ""
"The caller may release or mutate *b* after this method returns, so the "
"implementation should only access *b* during the method call."
msgstr ""
"このメソッドが戻った後で、呼び出し元は *b* を解放、または変更するかもしれないので、実装はメソッド呼び出しの間だけ *b* にアクセスすべきです。"

#: ../../library/io.rst:557
msgid "Raw File I/O"
msgstr "生ファイルI/O"

#: ../../library/io.rst:561
msgid ""
":class:`FileIO` represents an OS-level file containing bytes data. It "
"implements the :class:`RawIOBase` interface (and therefore the "
":class:`IOBase` interface, too)."
msgstr ""
":class:`FileIO` はバイトデータを含む OS レベルのファイルを表します。 :class:`RawIOBase` インタフェースを "
"(したがって :class:`IOBase` インタフェースも) 実装しています。"

#: ../../library/io.rst:565
msgid "The *name* can be one of two things:"
msgstr "*name* は、次の 2 つのいずれかです。"

#: ../../library/io.rst:567
msgid ""
"a character string or :class:`bytes` object representing the path to the "
"file which will be opened. In this case closefd must be ``True`` (the "
"default) otherwise an error will be raised."
msgstr ""
"開くファイルへのパスを表す文字列または :class:`bytes` オブジェクト。\n"
"この場合、closefd は ``True`` (デフォルト) でなければなりません。\n"
"``True`` でない場合、エラーが送出されます。"

#: ../../library/io.rst:570
msgid ""
"an integer representing the number of an existing OS-level file descriptor "
"to which the resulting :class:`FileIO` object will give access. When the "
"FileIO object is closed this fd will be closed as well, unless *closefd* is "
"set to ``False``."
msgstr ""
"結果の :class:`FileIO` オブジェクトがアクセスを与える、既存の OS レベルファイル記述子の数を表す整数。FileIO "
"オブジェクトが閉じられると、*closefd* が ``False`` に設定されていない場合、この fd も閉じられます。"

#: ../../library/io.rst:575
msgid ""
"The *mode* can be ``'r'``, ``'w'``, ``'x'`` or ``'a'`` for reading "
"(default), writing, exclusive creation or appending. The file will be "
"created if it doesn't exist when opened for writing or appending; it will be"
" truncated when opened for writing. :exc:`FileExistsError` will be raised if"
" it already exists when opened for creating. Opening a file for creating "
"implies writing, so this mode behaves in a similar way to ``'w'``. Add a "
"``'+'`` to the mode to allow simultaneous reading and writing."
msgstr ""
"*mode* は 読み込み（デフォルト）、書き込み、排他的作成、追記に対し ``'r'`` 、 ``'w'`` 、 ``'x'`` 、 ``'a'`` "
"です。ファイルは書き込みや追記で開かれたときに存在しない場合作成されます。書き込みのときにファイルの内容は破棄されます。作成時に既に存在する場合は "
":exc:`FileExistsError` が送出されます。作成のためにファイルを開くのは暗黙的に書き込みなので、このモードは ``'w'`` "
"と同じように振る舞います。読み込みと書き込みを同時に許可するにはモードに ``'+'`` を加えてください。"

#: ../../library/io.rst:583
msgid ""
"The :meth:`read` (when called with a positive argument), :meth:`readinto` "
"and :meth:`write` methods on this class will only make one system call."
msgstr ""
"このクラスの :meth:`read` (正の引数で呼び出されたとき), :meth:`readinto` および :meth:`write` "
"メソッドは、単にシステムコールを一度呼び出します。"

#: ../../library/io.rst:586
msgid ""
"A custom opener can be used by passing a callable as *opener*. The "
"underlying file descriptor for the file object is then obtained by calling "
"*opener* with (*name*, *flags*). *opener* must return an open file "
"descriptor (passing :mod:`os.open` as *opener* results in functionality "
"similar to passing ``None``)."
msgstr ""
"呼び出し可能オブジェクトを *opener* "
"として与えることで、カスタムのオープナーが使えます。そしてファイルオブジェクトの基底のファイルディスクリプタは、*opener* を (*name*, "
"*flags*) で呼び出して得られます。*opener* は開いたファイルディスクリプタを返さなければなりません。 (:mod:`os.open` を"
" *opener* として渡すと、``None`` を渡したのと同様の機能になります。)"

#: ../../library/io.rst:592
msgid "The newly created file is :ref:`non-inheritable <fd_inheritance>`."
msgstr "新たに作成されたファイルは :ref:`継承不可 <fd_inheritance>`  です。"

#: ../../library/io.rst:594
msgid ""
"See the :func:`open` built-in function for examples on using the *opener* "
"parameter."
msgstr "*opener* 引数を使う例については :func:`open` 組み込み関数を参照してください。"

#: ../../library/io.rst:597
msgid "The *opener* parameter was added. The ``'x'`` mode was added."
msgstr "*opener* 引数が追加されました。``'x'`` モードが追加されました。"

#: ../../library/io.rst:601
msgid "The file is now non-inheritable."
msgstr "ファイルが継承不可になりました。"

#: ../../library/io.rst:604
msgid ""
"In addition to the attributes and methods from :class:`IOBase` and "
":class:`RawIOBase`, :class:`FileIO` provides the following data attributes:"
msgstr ""
":class:`IOBase` と :class:`RawIOBase` の属性やメソッドに加え、:class:`FileIO` "
"は以下のデータ属性を提供します:"

#: ../../library/io.rst:610
msgid "The mode as given in the constructor."
msgstr "コンストラクタに渡されたモードです。"

#: ../../library/io.rst:614
msgid ""
"The file name.  This is the file descriptor of the file when no name is "
"given in the constructor."
msgstr "ファイル名。コンストラクタに名前が渡されなかったときはファイル記述子になります。"

#: ../../library/io.rst:619
msgid "Buffered Streams"
msgstr "バッファ付きストリーム"

#: ../../library/io.rst:621
msgid ""
"Buffered I/O streams provide a higher-level interface to an I/O device than "
"raw I/O does."
msgstr "バッファ付き I/O ストリームは、I/O デバイスに生 I/O より高レベルなインタフェースを提供します。"

#: ../../library/io.rst:626
msgid ""
"A stream implementation using an in-memory bytes buffer.  It inherits "
":class:`BufferedIOBase`.  The buffer is discarded when the "
":meth:`~IOBase.close` method is called."
msgstr ""
"インメモリの bytes バッファを利用したストリームの実装です。 :class:`BufferedIOBase` を継承します。バッファは "
":meth:`~IOBase.close` メソッドが呼び出された際に破棄されます。"

#: ../../library/io.rst:630
msgid ""
"The optional argument *initial_bytes* is a :term:`bytes-like object` that "
"contains initial data."
msgstr ""
"省略可能な引数 *initial_bytes* は、初期データを含んだ :term:`bytes-like オブジェクト <bytes-like "
"object>` です。"

#: ../../library/io.rst:633
msgid ""
":class:`BytesIO` provides or overrides these methods in addition to those "
"from :class:`BufferedIOBase` and :class:`IOBase`:"
msgstr ""
":class:`BytesIO` は :class:`BufferedIOBase` または :class:`IOBase` "
"からのメソッドに加えて、以下のメソッドを提供もしくはオーバーライドします:"

#: ../../library/io.rst:638
msgid ""
"Return a readable and writable view over the contents of the buffer without "
"copying them.  Also, mutating the view will transparently update the "
"contents of the buffer::"
msgstr ""
"バッファの内容をコピーすることなく、その内容の上に、読み込み及び書き込みが可能なビューを返します。また、このビューを変更すると、バッファの内容は透過的に更新されます::"

#: ../../library/io.rst:649
msgid ""
"As long as the view exists, the :class:`BytesIO` object cannot be resized or"
" closed."
msgstr "ビューが存在する限り、:class:`BytesIO` オブジェクトはリサイズやクローズされません。"

#: ../../library/io.rst:656
msgid "Return :class:`bytes` containing the entire contents of the buffer."
msgstr "バッファの全内容を含む :class:`bytes` を返します。"

#: ../../library/io.rst:661
msgid "In :class:`BytesIO`, this is the same as :meth:`~BufferedIOBase.read`."
msgstr ":class:`BytesIO` においては、このメソッドは :meth:`~BufferedIOBase.read` と同じです。"

#: ../../library/io.rst:663 ../../library/io.rst:704
msgid "The *size* argument is now optional."
msgstr "*size* 引数が任意になりました。"

#: ../../library/io.rst:668
msgid ""
"In :class:`BytesIO`, this is the same as :meth:`~BufferedIOBase.readinto`."
msgstr ""
":class:`BytesIO` においては、このメソッドは :meth:`~BufferedIOBase.readinto` と同じです。"

#: ../../library/io.rst:674
msgid ""
"A buffer providing higher-level access to a readable, sequential "
":class:`RawIOBase` object.  It inherits :class:`BufferedIOBase`. When "
"reading data from this object, a larger amount of data may be requested from"
" the underlying raw stream, and kept in an internal buffer. The buffered "
"data can then be returned directly on subsequent reads."
msgstr ""
"読み込み可能でシーケンシャルな :class:`RawIOBase` オブジェクトへの高水準のアクセスを提供するバッファです。 "
":class:`BufferedIOBase` を継承します。このオブジェクトからデータを読み込むとき、より大きい量のデータが根底の raw "
"ストリームから要求され、内部バッファに保存される場合があります。バッファされたデータは、その次の読み込み時に直接返されます。"

#: ../../library/io.rst:680
msgid ""
"The constructor creates a :class:`BufferedReader` for the given readable "
"*raw* stream and *buffer_size*.  If *buffer_size* is omitted, "
":data:`DEFAULT_BUFFER_SIZE` is used."
msgstr ""
"このコンストラクタは与えられた *raw* ストリームと *buffer_size* に対し :class:`BufferedReader` "
"を生成します。 *buffer_size* が省略された場合、代わりに :data:`DEFAULT_BUFFER_SIZE` が使われます。"

#: ../../library/io.rst:684
msgid ""
":class:`BufferedReader` provides or overrides these methods in addition to "
"those from :class:`BufferedIOBase` and :class:`IOBase`:"
msgstr ""
":class:`BufferedReader` は :class:`BufferedIOBase` または :class:`IOBase` "
"からのメソッドに加えて、以下のメソッドを提供もしくはオーバーライドします:"

#: ../../library/io.rst:689
msgid ""
"Return bytes from the stream without advancing the position.  At most one "
"single read on the raw stream is done to satisfy the call. The number of "
"bytes returned may be less or more than requested."
msgstr ""
"位置を進めずにストリームからバイト列を返します。これを果たすために生ストリームに対して行われる read "
"は高々一度だけです。返されるバイト数は、要求より少ないかもしれませんし、多いかもしれません。"

#: ../../library/io.rst:695
msgid ""
"Read and return *size* bytes, or if *size* is not given or negative, until "
"EOF or if the read call would block in non-blocking mode."
msgstr ""
"*size* バイトを読み込んで返します。*size* が与えられないか負の値ならば、EOF まで、または非ブロッキングモード中で read "
"呼び出しがブロックされるまでを返します。"

#: ../../library/io.rst:700
msgid ""
"Read and return up to *size* bytes with only one call on the raw stream. If "
"at least one byte is buffered, only buffered bytes are returned. Otherwise, "
"one raw stream read call is made."
msgstr ""
"raw ストリームに対しただ一度の呼び出しで最大 *size* バイトを読み込んで返します。少なくとも 1 "
"バイトがバッファされていれば、バッファされているバイト列だけが返されます。それ以外の場合は raw ストリームの読み込みが一回呼び出されます。"

#: ../../library/io.rst:710
msgid ""
"A buffer providing higher-level access to a writeable, sequential "
":class:`RawIOBase` object.  It inherits :class:`BufferedIOBase`. When "
"writing to this object, data is normally placed into an internal buffer.  "
"The buffer will be written out to the underlying :class:`RawIOBase` object "
"under various conditions, including:"
msgstr ""
"書き込み可能でシーケンシャルな :class:`RawIOBase` オブジェクトへの、高レベルなアクセスを提供するバッファです。 "
":class:`BufferedIOBase` "
"を継承します。このオブジェクトに書き込むとき、データは通常内部バッファに保持されます。このバッファは、以下のような種々の状況で根底の "
":class:`RawIOBase` オブジェクトに書き込まれます。"

#: ../../library/io.rst:716
msgid "when the buffer gets too small for all pending data;"
msgstr "保留中の全データに対してバッファが足りなくなったとき;"

#: ../../library/io.rst:717
msgid "when :meth:`flush()` is called;"
msgstr ":meth:`flush()` が呼び出されたとき;"

#: ../../library/io.rst:718
msgid ""
"when a :meth:`seek()` is requested (for :class:`BufferedRandom` objects);"
msgstr ":meth:`seek()` が (:class:`BufferedRandom` オブジェクトに対して) 呼び出されたとき;"

#: ../../library/io.rst:719
msgid "when the :class:`BufferedWriter` object is closed or destroyed."
msgstr ":class:`BufferedWriter` オブジェクトが閉じられたり破棄されたりしたとき。"

#: ../../library/io.rst:721
msgid ""
"The constructor creates a :class:`BufferedWriter` for the given writeable "
"*raw* stream.  If the *buffer_size* is not given, it defaults to "
":data:`DEFAULT_BUFFER_SIZE`."
msgstr ""
"このコンストラクタは与えられた書き込み可能な *raw* ストリームに対し :class:`BufferedWriter` を生成します。 "
"*buffer_size* が省略された場合、 :data:`DEFAULT_BUFFER_SIZE` がデフォルトになります。"

#: ../../library/io.rst:725
msgid ""
":class:`BufferedWriter` provides or overrides these methods in addition to "
"those from :class:`BufferedIOBase` and :class:`IOBase`:"
msgstr ""
":class:`BufferedWriter` は :class:`BufferedIOBase` または :class:`IOBase` "
"からのメソッドに加えて、以下のメソッドを提供もしくはオーバーライドします:"

#: ../../library/io.rst:730
msgid ""
"Force bytes held in the buffer into the raw stream.  A "
":exc:`BlockingIOError` should be raised if the raw stream blocks."
msgstr ""
"バッファに保持されたバイト列を生ストリームに強制的に流し込みます。生ストリームがブロックした場合 :exc:`BlockingIOError` "
"が送出されます。"

#: ../../library/io.rst:735
msgid ""
"Write the :term:`bytes-like object`, *b*, and return the number of bytes "
"written.  When in non-blocking mode, a :exc:`BlockingIOError` is raised if "
"the buffer needs to be written out but the raw stream blocks."
msgstr ""
":term:`bytes-like オブジェクト <bytes-like object>` *b* "
"を書き込み、書き込んだバイト数を返します。ノンブロッキング時、バッファが書き込まれるべきなのに生ストリームがブロックした場合 "
":exc:`BlockingIOError` が送出されます。"

#: ../../library/io.rst:743
msgid ""
"A buffered interface to random access streams.  It inherits "
":class:`BufferedReader` and :class:`BufferedWriter`."
msgstr ""

#: ../../library/io.rst:746
msgid ""
"The constructor creates a reader and writer for a seekable raw stream, given"
" in the first argument.  If the *buffer_size* is omitted it defaults to "
":data:`DEFAULT_BUFFER_SIZE`."
msgstr ""
"このコンストラクタは第一引数として与えられるシーク可能な生ストリームに対し、リーダーおよびライターを作成します。 *buffer_size* "
"が省略された場合、 :data:`DEFAULT_BUFFER_SIZE` がデフォルトになります。"

#: ../../library/io.rst:750
msgid ""
":class:`BufferedRandom` is capable of anything :class:`BufferedReader` or "
":class:`BufferedWriter` can do.  In addition, :meth:`seek` and :meth:`tell` "
"are guaranteed to be implemented."
msgstr ""

#: ../../library/io.rst:757
msgid ""
"A buffered I/O object combining two unidirectional :class:`RawIOBase` "
"objects -- one readable, the other writeable -- into a single bidirectional "
"endpoint.  It inherits :class:`BufferedIOBase`."
msgstr ""
"2つの単方向 :class:`RawIOBase` オブジェクト -- 一つは読み込み可能、他方が書き込み可能 -- を組み合わせてバッファ付きの双方向"
" I/O オブジェクトにしたものです。 :class:`BufferedIOBase` を継承しています。"

#: ../../library/io.rst:761
msgid ""
"*reader* and *writer* are :class:`RawIOBase` objects that are readable and "
"writeable respectively.  If the *buffer_size* is omitted it defaults to "
":data:`DEFAULT_BUFFER_SIZE`."
msgstr ""
"*reader* と *writer* はそれぞれ読み込み可能、書き込み可能な :class:`RawIOBase` オブジェクトです。 "
"*buffer_size* が省略された場合 :data:`DEFAULT_BUFFER_SIZE` がデフォルトになります。"

#: ../../library/io.rst:765
msgid ""
":class:`BufferedRWPair` implements all of :class:`BufferedIOBase`\\'s "
"methods except for :meth:`~BufferedIOBase.detach`, which raises "
":exc:`UnsupportedOperation`."
msgstr ""
":class:`BufferedRWPair` は、 :exc:`UnsupportedOperation` を送出する "
":meth:`~BufferedIOBase.detach` を除く、 :class:`BufferedIOBase` の全てのメソッドを実装します。"

#: ../../library/io.rst:771
msgid ""
":class:`BufferedRWPair` does not attempt to synchronize accesses to its "
"underlying raw streams.  You should not pass it the same object as reader "
"and writer; use :class:`BufferedRandom` instead."
msgstr ""
":class:`BufferedRWPair` "
"は下層の生ストリームのアクセスを同期しようとはしません。同じオブジェクトをリーダとライタとして渡してはいけません。その場合は代わりに "
":class:`BufferedRandom` を使用してください。"

#: ../../library/io.rst:781
msgid ""
"Base class for text streams.  This class provides a character and line based"
" interface to stream I/O.  It inherits :class:`IOBase`. There is no public "
"constructor."
msgstr ""
"テキストストリームの基底クラスです。\n"
"このクラスはストリーム I/O への、文字と行に基づいたインタフェースを提供します。\n"
":class:`IOBase` を継承します。\n"
"パブリックなコンストラクタはありません。"

#: ../../library/io.rst:785
msgid ""
":class:`TextIOBase` provides or overrides these data attributes and methods "
"in addition to those from :class:`IOBase`:"
msgstr ""
":class:`IOBase` から継承した属性とメソッドに加えて、 :class:`TextIOBase` "
"は以下のデータ属性とメソッドを提供しています:"

#: ../../library/io.rst:790
msgid ""
"The name of the encoding used to decode the stream's bytes into strings, and"
" to encode strings into bytes."
msgstr "エンコーディング名で、ストリームのバイト列を文字列にデコードするとき、また文字列をバイト列にエンコードするときに使われます。"

#: ../../library/io.rst:795
msgid "The error setting of the decoder or encoder."
msgstr "このエンコーダやデコーダのエラー設定です。"

#: ../../library/io.rst:799
msgid ""
"A string, a tuple of strings, or ``None``, indicating the newlines "
"translated so far.  Depending on the implementation and the initial "
"constructor flags, this may not be available."
msgstr ""
"文字列、文字列のタプル、または ``None`` "
"で、改行がどのように読み換えられるかを指定します。実装や内部コンストラクタのフラグに依って、これは利用できないことがあります。"

#: ../../library/io.rst:805
msgid ""
"The underlying binary buffer (a :class:`BufferedIOBase` instance) that "
":class:`TextIOBase` deals with.  This is not part of the :class:`TextIOBase`"
" API and may not exist in some implementations."
msgstr ""
":class:`TextIOBase` が扱う根底のバイナリバッファ (:class:`BufferedIOBase` インスタンス) です。これは "
":class:`TextIOBase` API には含まれず、よって実装に含まれない場合があります。"

#: ../../library/io.rst:811
msgid ""
"Separate the underlying binary buffer from the :class:`TextIOBase` and "
"return it."
msgstr "根底のバイナリバッファを :class:`TextIOBase` から分離して返します。"

#: ../../library/io.rst:814
msgid ""
"After the underlying buffer has been detached, the :class:`TextIOBase` is in"
" an unusable state."
msgstr "根底のバッファが取り外された後、 :class:`TextIOBase` は使用不能状態になります。"

#: ../../library/io.rst:817
msgid ""
"Some :class:`TextIOBase` implementations, like :class:`StringIO`, may not "
"have the concept of an underlying buffer and calling this method will raise "
":exc:`UnsupportedOperation`."
msgstr ""
":class:`TextIOBase` 実装には、 :class:`StringIO` "
"など、根底のバッファという概念を持たないものがあります。これらを呼び出すと :exc:`UnsupportedOperation` を送出します。"

#: ../../library/io.rst:825
msgid ""
"Read and return at most *size* characters from the stream as a single "
":class:`str`.  If *size* is negative or ``None``, reads until EOF."
msgstr ""
"最大 *size* 文字をストリームから読み込み、一つの :class:`str` にして返します。 *size* が負の値または ``None`` "
"ならば、 EOF まで読みます。"

#: ../../library/io.rst:830
msgid ""
"Read until newline or EOF and return a single ``str``.  If the stream is "
"already at EOF, an empty string is returned."
msgstr "改行または EOF まで読み込み、一つの ``str`` を返します。ストリームが既に EOF に到達している場合、空文字列が返されます。"

#: ../../library/io.rst:833
msgid "If *size* is specified, at most *size* characters will be read."
msgstr "*size* が指定された場合、最大 *size* 文字が読み込まれます。"

#: ../../library/io.rst:837
msgid ""
"Change the stream position to the given *offset*.  Behaviour depends on the "
"*whence* parameter.  The default value for *whence* is :data:`SEEK_SET`."
msgstr ""
"指定された *offset* にストリーム位置を変更します。 挙動は *whence* 引数によります。 *whence* のデフォルト値は "
":data:`SEEK_SET` です。:"

#: ../../library/io.rst:841
msgid ""
":data:`SEEK_SET` or ``0``: seek from the start of the stream (the default); "
"*offset* must either be a number returned by :meth:`TextIOBase.tell`, or "
"zero.  Any other *offset* value produces undefined behaviour."
msgstr ""
":data:`SEEK_SET` または ``0``: ストリームの先頭からシークします (デフォルト)。 *offset* は "
":meth:`TextIOBase.tell` が返す数か0のどちらかでなければなりません。それ以外の *offset* 値は未定義の挙動を起こします。"

#: ../../library/io.rst:845
msgid ""
":data:`SEEK_CUR` or ``1``: \"seek\" to the current position; *offset* must "
"be zero, which is a no-operation (all other values are unsupported)."
msgstr ""
":data:`SEEK_CUR` または ``1``: 現在の位置に \"シークします\"。 *offset* は 0 "
"でなければなりません。つまり何もしません (他の値はサポートされていません)。"

#: ../../library/io.rst:848
msgid ""
":data:`SEEK_END` or ``2``: seek to the end of the stream; *offset* must be "
"zero (all other values are unsupported)."
msgstr ""
":data:`SEEK_END` または ``2``: ストリーム終端へシークします。 *offset* は 0 でなければなりません "
"(他の値はサポートされていません)．"

#: ../../library/io.rst:851
msgid "Return the new absolute position as an opaque number."
msgstr "新しい絶対位置を、不透明な数値で返します。"

#: ../../library/io.rst:858
msgid ""
"Return the current stream position as an opaque number.  The number does not"
" usually represent a number of bytes in the underlying binary storage."
msgstr "ストリームの現在位置を不透明な数値で返します。この値は根底のバイナリストレージ内でのバイト数を表すとは限りません。"

#: ../../library/io.rst:864
msgid ""
"Write the string *s* to the stream and return the number of characters "
"written."
msgstr "文字列 *s* をストリームに書き出し、書き出された文字数を返します。"

#: ../../library/io.rst:871
msgid ""
"A buffered text stream over a :class:`BufferedIOBase` binary stream. It "
"inherits :class:`TextIOBase`."
msgstr ""
":class:`BufferedIOBase` バイナリストリーム上のバッファ付きテキストストリーム。 :class:`TextIOBase` "
"を継承します。"

#: ../../library/io.rst:874
msgid ""
"*encoding* gives the name of the encoding that the stream will be decoded or"
" encoded with.  It defaults to :func:`locale.getpreferredencoding(False) "
"<locale.getpreferredencoding>`."
msgstr ""
"*encoding* はストリームがエンコードやデコードされるエンコード名です。デフォルトは "
":func:`locale.getpreferredencoding(False) <locale.getpreferredencoding>` です。"

#: ../../library/io.rst:878
msgid ""
"*errors* is an optional string that specifies how encoding and decoding "
"errors are to be handled.  Pass ``'strict'`` to raise a :exc:`ValueError` "
"exception if there is an encoding error (the default of ``None`` has the "
"same effect), or pass ``'ignore'`` to ignore errors.  (Note that ignoring "
"encoding errors can lead to data loss.)  ``'replace'`` causes a replacement "
"marker (such as ``'?'``) to be inserted where there is malformed data. "
"``'backslashreplace'`` causes malformed data to be replaced by a backslashed"
" escape sequence.  When writing, ``'xmlcharrefreplace'`` (replace with the "
"appropriate XML character reference)  or ``'namereplace'`` (replace with "
"``\\N{...}`` escape sequences) can be used.  Any other error handling name "
"that has been registered with :func:`codecs.register_error` is also valid."
msgstr ""
"*errors* はオプションの文字列で、エンコードやデコードの際のエラーをどのように扱うかを指定します。エンコードエラーがあったときに "
":exc:`ValueError` 例外を送出させるには ``'strict'`` を渡します (デフォルトの ``None`` "
"でも同じです)。エラーを無視させるには ``'ignore'`` を渡します。 "
"(エンコーディングエラーを無視するとデータを喪失する可能性があることに注意してください。) ``'replace'`` "
"は不正な形式の文字の代わりにマーカ (たとえば ``'?'``) を挿入させます。``'backslashreplace'`` "
"を指定すると、不正な形式のデータをバックスラッシュ付きのエスケープシーケンスに置換します。書き込み時には ``'xmlcharrefreplace'``"
" (適切な XML 文字参照に置換) や ``'namereplace'`` (``\\N{...}`` エスケープシーケンスに置換) "
"も使えます。他にも :func:`codecs.register_error` で登録されたエラー処理名が有効です。"

#: ../../library/io.rst:894
msgid ""
"*newline* controls how line endings are handled.  It can be ``None``, "
"``''``, ``'\\n'``, ``'\\r'``, and ``'\\r\\n'``.  It works as follows:"
msgstr ""
"*newline* は行末をどのように処理するかを制御します 。``None``, ``''``, ``'\\n'``, ``'\\r'``, "
"``'\\r\\n'`` のいずれかです。これは以下のように動作します:"

#: ../../library/io.rst:897
msgid ""
"When reading input from the stream, if *newline* is ``None``, "
":term:`universal newlines` mode is enabled.  Lines in the input can end in "
"``'\\n'``, ``'\\r'``, or ``'\\r\\n'``, and these are translated into "
"``'\\n'`` before being returned to the caller.  If it is ``''``, universal "
"newlines mode is enabled, but line endings are returned to the caller "
"untranslated. If it has any of the other legal values, input lines are only "
"terminated by the given string, and the line ending is returned to the "
"caller untranslated."
msgstr ""
"ストリームからの入力を読み込んでいる時、*newline* が ``None`` の場合、:term:`universal newlines` "
"モードが有効になります。入力中の行は ``'\\n'``、``'\\r'``、または ``'\\r\\n'`` で終わり、呼び出し元に返される前に "
"``'\\n'`` に変換されます。 ``''`` "
"の場合、ユニバーサル改行モードは有効になりますが、行末は変換されずに呼び出し元に返されます。その他の合法な値の場合、入力行は与えられた文字列でのみ終わり、行末は変換されずに呼び出し元に返されます。"

#: ../../library/io.rst:906
msgid ""
"When writing output to the stream, if *newline* is ``None``, any ``'\\n'`` "
"characters written are translated to the system default line separator, "
":data:`os.linesep`.  If *newline* is ``''`` or ``'\\n'``, no translation "
"takes place.  If *newline* is any of the other legal values, any ``'\\n'`` "
"characters written are translated to the given string."
msgstr ""
"ストリームへの出力の書き込み時、*newline* が ``None`` の場合、全ての ``'\\n'`` 文字はシステムのデフォルトの行セパレータ "
":data:`os.linesep` に変換されます。 *newline* が ``''`` または ``'\\n'`` "
"の場合は変換されません。*newline* がその他の正当な値の場合、全ての ``'\\n'`` 文字は与えられた文字列に変換されます。"

#: ../../library/io.rst:912
msgid ""
"If *line_buffering* is ``True``, :meth:`flush` is implied when a call to "
"write contains a newline character or a carriage return."
msgstr ""
"*line_buffering* が ``True`` の場合、 write への呼び出しが改行文字もしくはキャリッジリターンを含んでいれば、暗黙的に "
":meth:`flush` が呼び出されます。"

#: ../../library/io.rst:915
msgid ""
"If *write_through* is ``True``, calls to :meth:`write` are guaranteed not to"
" be buffered: any data written on the :class:`TextIOWrapper` object is "
"immediately handled to its underlying binary *buffer*."
msgstr ""
"*write_through* が ``True`` の場合、:meth:`write` の呼び出しはバッファされないことが保証されます。 "
":class:`TextIOWrapper` オブジェクトに書かれた全てのデータは直ちに下層のバイナリ *buffer* に処理されます。"

#: ../../library/io.rst:919
msgid "The *write_through* argument has been added."
msgstr "*write_through* 引数が追加されました。"

#: ../../library/io.rst:922
msgid ""
"The default *encoding* is now ``locale.getpreferredencoding(False)`` instead"
" of ``locale.getpreferredencoding()``. Don't change temporary the locale "
"encoding using :func:`locale.setlocale`, use the current locale encoding "
"instead of the user preferred encoding."
msgstr ""
"*encoding* の規定値が ``locale.getpreferredencoding()`` から ``locale.getpreferredencoding(False)`` になりました。\n"
":func:`locale.setlocale` を用いてロケールのエンコーディングを一時的に変更してはいけません。ユーザが望むエンコーディングではなく現在のロケールのエンコーディングを使用してください。"

#: ../../library/io.rst:928
msgid ""
":class:`TextIOWrapper` provides these members in addition to those of "
":class:`TextIOBase` and its parents:"
msgstr ""
":class:`TextIOBase` とその親クラスのメンバーに加えて、:class:`TextIOWrapper` "
"は以下のメンバーを提供しています:"

#: ../../library/io.rst:933
msgid "Whether line buffering is enabled."
msgstr "行バッファリングが有効かどうか。"

#: ../../library/io.rst:937
msgid "Whether writes are passed immediately to the underlying binary buffer."
msgstr "書き込みが、根柢のバイナリバッファに即座に渡されるかどうか。"

#: ../../library/io.rst:945
msgid ""
"Reconfigure this text stream using new settings for *encoding*, *errors*, "
"*newline*, *line_buffering* and *write_through*."
msgstr ""
"このテキストストリームを *encoding*, *errors*, *newline*, *line_buffering* と "
"*write_through* を新しい設定として再設定します。"

#: ../../library/io.rst:948
msgid ""
"Parameters not specified keep current settings, except ``errors='strict'`` "
"is used when *encoding* is specified but *errors* is not specified."
msgstr ""
"*encoding* が指定されており、*errors* が指定されていないときに、 ``errors='strict'`` "
"が使われている場合を除き、指定されなかったパラメータは現在の設定が保持されます。"

#: ../../library/io.rst:952
msgid ""
"It is not possible to change the encoding or newline if some data has "
"already been read from the stream. On the other hand, changing encoding "
"after write is possible."
msgstr ""
"ストリームからすでにデータが読み出されていた場合、encodingとnewlineは変更できません。一方で、書き込み後にencodingを変更することはできます。"

#: ../../library/io.rst:956
msgid ""
"This method does an implicit stream flush before setting the new parameters."
msgstr "このメソッドは、新しい設定を適用するまえにストリームをフラッシュします。"

#: ../../library/io.rst:964
msgid ""
"An in-memory stream for text I/O.  The text buffer is discarded when the "
":meth:`~IOBase.close` method is called."
msgstr ""
"テキストIO のためのインメモリストリーム。テキストバッファは :meth:`~IOBase.close` メソッドが呼び出された際に破棄されます。"

#: ../../library/io.rst:967
msgid ""
"The initial value of the buffer can be set by providing *initial_value*. If "
"newline translation is enabled, newlines will be encoded as if by "
":meth:`~TextIOBase.write`.  The stream is positioned at the start of the "
"buffer."
msgstr ""
"バッファの初期値を *initial_value* で与えることが出来ます。改行変換を有効にすると、改行コードは "
":meth:`~TextIOBase.write` によってエンコードされます。ストリームはバッファの開始位置に配置されます。"

#: ../../library/io.rst:972
msgid ""
"The *newline* argument works like that of :class:`TextIOWrapper`. The "
"default is to consider only ``\\n`` characters as ends of lines and to do no"
" newline translation.  If *newline* is set to ``None``, newlines are written"
" as ``\\n`` on all platforms, but universal newline decoding is still "
"performed when reading."
msgstr ""
"*newline* 引数は :class:`TextIOWrapper` のものと同じように働きます。デフォルトでは ``\\n`` "
"文字だけを行末とみなし、また、改行の変換は行いません。 *newline* に ``None`` をセットすると改行コードを全てのプラットフォームで "
"``\\n`` で書き込みますが、読み込み時にはそれでもユニバーサル改行としてのデコードは実行されます。"

#: ../../library/io.rst:978
msgid ""
":class:`StringIO` provides this method in addition to those from "
":class:`TextIOBase` and its parents:"
msgstr ""
":class:`TextIOBase` およびその親クラスから継承したメソッドに加えて :class:`StringIO` "
"は以下のメソッドを提供しています:"

#: ../../library/io.rst:983
msgid ""
"Return a ``str`` containing the entire contents of the buffer. Newlines are "
"decoded as if by :meth:`~TextIOBase.read`, although the stream position is "
"not changed."
msgstr ""
"バッファの全内容を含む ``str`` を返します。改行コードのデコードは :meth:`~TextIOBase.read` "
"によって行われますが、これによるストリーム位置の変更は起こりません。"

#: ../../library/io.rst:987
msgid "Example usage::"
msgstr "使用例::"

#: ../../library/io.rst:1009
msgid ""
"A helper codec that decodes newlines for :term:`universal newlines` mode. It"
" inherits :class:`codecs.IncrementalDecoder`."
msgstr ""
"改行を :term:`universal newlines` モードにデコードするヘルパーコーデックです。 "
":class:`codecs.IncrementalDecoder` を継承しています。"

#: ../../library/io.rst:1014
msgid "Performance"
msgstr "性能"

#: ../../library/io.rst:1016
msgid ""
"This section discusses the performance of the provided concrete I/O "
"implementations."
msgstr "このセクションでは与えられた具体的な I/O 実装の性能について議論します。"

#: ../../library/io.rst:1022
msgid ""
"By reading and writing only large chunks of data even when the user asks for"
" a single byte, buffered I/O hides any inefficiency in calling and executing"
" the operating system's unbuffered I/O routines.  The gain depends on the OS"
" and the kind of I/O which is performed.  For example, on some modern OSes "
"such as Linux, unbuffered disk I/O can be as fast as buffered I/O.  The "
"bottom line, however, is that buffered I/O offers predictable performance "
"regardless of the platform and the backing device.  Therefore, it is almost "
"always preferable to use buffered I/O rather than unbuffered I/O for binary "
"data."
msgstr ""
"バッファ付き I/O は、ユーザが 1 "
"バイトだけ要求した場合でさえ、データを大きな塊でのみ読み書きします。これにより、オペレーティングシステムのバッファ無し I/O "
"ルーチンを呼び出して実行する非効率性はすべて隠されます。その成果は、OS と、実行される I/O の種類によって異なります。例えば、Linux "
"のような現行の OS では、バッファ無しディスク I/O がバッファ付き I/O "
"と同じくらい早いことがあります。しかし、どのプラットフォームとデバイスにおいても、バッファ付き I/O "
"は最低でも予測可能なパフォーマンスを提供します。ですから、バイナリデータに対しては、バッファ無し I/O を使用するより、バッファ付きの I/O "
"を使用するほうが望ましい場合がほとんどです。"

#: ../../library/io.rst:1034
msgid ""
"Text I/O over a binary storage (such as a file) is significantly slower than"
" binary I/O over the same storage, because it requires conversions between "
"unicode and binary data using a character codec.  This can become noticeable"
" handling huge amounts of text data like large log files.  Also, "
":meth:`TextIOWrapper.tell` and :meth:`TextIOWrapper.seek` are both quite "
"slow due to the reconstruction algorithm used."
msgstr ""
"(ファイルなどの) バイナリストレージ上のテキスト I/O は、同じストレージ上のバイナリ I/O "
"より非常に遅いです。なぜならこれには、文字コーデックを使った Unicode "
"とバイナリデータ間の変換を必要とするからです。これは大量のテキストデータ、例えば大きなログファイルを扱うときに顕著に成り得ます。同様に、 "
":meth:`TextIOWrapper.tell` や :meth:`TextIOWrapper.seek` "
"はどちらも、使われている復元アルゴリズムのために遅くなります。"

#: ../../library/io.rst:1041
msgid ""
":class:`StringIO`, however, is a native in-memory unicode container and will"
" exhibit similar speed to :class:`BytesIO`."
msgstr ""
"しかし :class:`StringIO` は、ネイティブなインメモリ Unicode コンテナで、 :class:`BytesIO` "
"と同程度の速度を示します。"

#: ../../library/io.rst:1045
msgid "Multi-threading"
msgstr "マルチスレッディング"

#: ../../library/io.rst:1047
msgid ""
":class:`FileIO` objects are thread-safe to the extent that the operating "
"system calls (such as ``read(2)`` under Unix) they wrap are thread-safe too."
msgstr ""
"(Unix における ``read(2)`` のような) "
"オペレーティングシステムコールの、それがラッピングするものがスレッドセーフであるような範囲内では、 :class:`FileIO` "
"オブジェクトもまた、スレッドセーフです。"

#: ../../library/io.rst:1050
msgid ""
"Binary buffered objects (instances of :class:`BufferedReader`, "
":class:`BufferedWriter`, :class:`BufferedRandom` and "
":class:`BufferedRWPair`) protect their internal structures using a lock; it "
"is therefore safe to call them from multiple threads at once."
msgstr ""
"バイナリバッファ付きオブジェクト (:class:`BufferedReader`, :class:`BufferedWriter`, "
":class:`BufferedRandom` および :class:`BufferedRWPair` のインスタンス) "
"は、その内部構造をロックを使って保護します。このため、これらを複数のスレッドから同時に呼び出しても安全です。"

#: ../../library/io.rst:1055
msgid ":class:`TextIOWrapper` objects are not thread-safe."
msgstr ":class:`TextIOWrapper` オブジェクトはスレッドセーフではありません。"

#: ../../library/io.rst:1058
msgid "Reentrancy"
msgstr "リエントラント性"

#: ../../library/io.rst:1060
msgid ""
"Binary buffered objects (instances of :class:`BufferedReader`, "
":class:`BufferedWriter`, :class:`BufferedRandom` and "
":class:`BufferedRWPair`) are not reentrant.  While reentrant calls will not "
"happen in normal situations, they can arise from doing I/O in a "
":mod:`signal` handler.  If a thread tries to re-enter a buffered object "
"which it is already accessing, a :exc:`RuntimeError` is raised.  Note this "
"doesn't prohibit a different thread from entering the buffered object."
msgstr ""
"バイナリバッファ付きオブジェクト (:class:`BufferedReader`, :class:`BufferedWriter`, "
":class:`BufferedRandom` および :class:`BufferedRWPair` のインスタンス) は、リエントラント "
"(再入可能) ではありません。リエントラントな呼び出しは普通の状況では起こりませんが、 I/O を :mod:`signal` "
"ハンドラで行なっているときに起こりえます。スレッドが、すでにアクセスしているバッファ付きオブジェクトに再び入ろうとすると "
":exc:`RuntimeError` が送出されます。これは、バッファ付きオブジェクトに複数のスレッドから入ることを禁止するわけではありません。"

#: ../../library/io.rst:1068
msgid ""
"The above implicitly extends to text files, since the :func:`open()` "
"function will wrap a buffered object inside a :class:`TextIOWrapper`.  This "
"includes standard streams and therefore affects the built-in function "
":func:`print()` as well."
msgstr ""
":func:`open()` 関数は :class:`TextIOWrapper` "
"内部のバッファ付きオブジェクトをラップするため、テキストファイルにも暗黙に拡張されます。これは、標準ストリームを含むので、組み込み関数 "
":func:`print()` にも同様に影響します。"
