# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2018
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:35+0000\n"
"Last-Translator: tomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/xml.dom.minidom.rst:2
msgid ":mod:`xml.dom.minidom` --- Minimal DOM implementation"
msgstr ":mod:`xml.dom.minidom` --- 最小限の DOM の実装"

#: ../../library/xml.dom.minidom.rst:11
msgid "**Source code:** :source:`Lib/xml/dom/minidom.py`"
msgstr "**ソースコード:** :source:`Lib/xml/dom/minidom.py`"

#: ../../library/xml.dom.minidom.rst:15
msgid ""
":mod:`xml.dom.minidom` is a minimal implementation of the Document Object "
"Model interface, with an API similar to that in other languages.  It is "
"intended to be simpler than the full DOM and also significantly smaller.  "
"Users who are not already proficient with the DOM should consider using the :"
"mod:`xml.etree.ElementTree` module for their XML processing instead."
msgstr ""
":mod:`xml.dom.minidom` は、 Document Object Model インタフェースの最小の実装"
"です。他言語の実装と似た API を持ちます。このモジュールは、完全な DOM に比べ"
"て単純で、非常に小さくなるように意図されています。 DOM について既に熟知してい"
"るユーザを除き、 XML 処理には代わりに :mod:`xml.etree.ElementTree` モジュール"
"を使うことを検討すべきです。"

#: ../../library/xml.dom.minidom.rst:24
msgid ""
"The :mod:`xml.dom.minidom` module is not secure against maliciously "
"constructed data.  If you need to parse untrusted or unauthenticated data "
"see :ref:`xml-vulnerabilities`."
msgstr ""
":mod:`xml.dom.minidom` モジュールは悪意を持って作成されたデータに対して安全で"
"はありません。信頼できないデータや認証されていないデータをパースする必要があ"
"る場合は :ref:`xml-vulnerabilities` を参照してください。"

#: ../../library/xml.dom.minidom.rst:29
msgid ""
"DOM applications typically start by parsing some XML into a DOM.  With :mod:"
"`xml.dom.minidom`, this is done through the parse functions::"
msgstr ""
"DOM アプリケーションは通常、XML を DOM に解析 (parse) することで開始しま"
"す。 :mod:`xml.dom.minidom` では、以下のような解析用の関数を介して行います::"

#: ../../library/xml.dom.minidom.rst:41
msgid ""
"The :func:`parse` function can take either a filename or an open file object."
msgstr ""
":func:`parse` 関数はファイル名か、開かれたファイルオブジェクトを引数にとるこ"
"とができます。"

#: ../../library/xml.dom.minidom.rst:46
msgid ""
"Return a :class:`Document` from the given input. *filename_or_file* may be "
"either a file name, or a file-like object. *parser*, if given, must be a "
"SAX2 parser object. This function will change the document handler of the "
"parser and activate namespace support; other parser configuration (like "
"setting an entity resolver) must have been done in advance."
msgstr ""
"与えられた入力から :class:`Document` を返します。 *filename_or_file* はファイ"
"ル名でもファイルオブジェクトでもかまいません。 *parser* を指定する場合、SAX2 "
"パーザオブジェクトでなければなりません。この関数はパーザの文書ハンドラを変更"
"し、名前空間サポートを有効にします; (エンティティリゾルバ (entity resolver) "
"のような) 他のパーザ設定は前もっておこなわなければなりません。"

#: ../../library/xml.dom.minidom.rst:52
msgid ""
"If you have XML in a string, you can use the :func:`parseString` function "
"instead:"
msgstr ""
"XML データを文字列で持っている場合、 :func:`parseString` を代わりに使うことが"
"できます:"

#: ../../library/xml.dom.minidom.rst:58
msgid ""
"Return a :class:`Document` that represents the *string*. This method creates "
"an :class:`io.StringIO` object for the string and passes that on to :func:"
"`parse`."
msgstr ""
"*string* を表わす :class:`Document` を返します。このメソッドは、文字列に対す"
"る :class:`io.StringIO` オブジェクトを作成し、それを :func:`parse` に渡しま"
"す。"

#: ../../library/xml.dom.minidom.rst:61
msgid ""
"Both functions return a :class:`Document` object representing the content of "
"the document."
msgstr ""
"これらの関数は両方とも、文書の内容を表現する :class:`Document` オブジェクトを"
"返します。"

#: ../../library/xml.dom.minidom.rst:64
msgid ""
"What the :func:`parse` and :func:`parseString` functions do is connect an "
"XML parser with a \"DOM builder\" that can accept parse events from any SAX "
"parser and convert them into a DOM tree.  The name of the functions are "
"perhaps misleading, but are easy to grasp when learning the interfaces.  The "
"parsing of the document will be completed before these functions return; "
"it's simply that these functions do not provide a parser implementation "
"themselves."
msgstr ""
":func:`parse` や :func:`parseString` といった関数が行うのは、 XML パーザを、"
"何らかの SAX パーザからくる解析イベント (parse event) を受け取って DOM ツリー"
"に変換できるような \"DOM ビルダ (DOM builder)\" に結合することです。関数は誤"
"解を招くような名前になっているかもしれませんが、インタフェースについて学んで"
"いるときには理解しやすいでしょう。文書の解析はこれらの関数が戻るより前に完結"
"します; 要するに、これらの関数自体はパーザ実装を提供しないということです。"

#: ../../library/xml.dom.minidom.rst:71
msgid ""
"You can also create a :class:`Document` by calling a method on a \"DOM "
"Implementation\" object.  You can get this object either by calling the :"
"func:`getDOMImplementation` function in the :mod:`xml.dom` package or the :"
"mod:`xml.dom.minidom` module.  Once you have a :class:`Document`, you can "
"add child nodes to it to populate the DOM::"
msgstr ""
"\"DOM 実装\" オブジェクトのメソッドを呼び出して :class:`Document` を生成する"
"こともできます。このオブジェクトは、 :mod:`xml.dom`  パッケージ、または :mod:"
"`xml.dom.minidom` モジュールの :func:`getDOMImplementation` 関数を呼び出して"
"取得できます。 :class:`Document` を取得したら、DOM を構成するために子ノードを"
"追加していくことができます::"

#: ../../library/xml.dom.minidom.rst:86
msgid ""
"Once you have a DOM document object, you can access the parts of your XML "
"document through its properties and methods.  These properties are defined "
"in the DOM specification.  The main property of the document object is the :"
"attr:`documentElement` property.  It gives you the main element in the XML "
"document: the one that holds all others.  Here is an example program::"
msgstr ""
"DOM 文書オブジェクトを手にしたら、XML 文書のプロパティやメソッドを使って、文"
"書の一部にアクセスすることができます。これらのプロパティは DOM 仕様で定義され"
"ています。文書オブジェクトの主要なプロパティは :attr:`documentElement` プロパ"
"ティです。このプロパティは XML 文書の主要な要素、つまり他の全ての要素を保持す"
"る要素を与えます。以下にプログラム例を示します。"

#: ../../library/xml.dom.minidom.rst:95
msgid ""
"When you are finished with a DOM tree, you may optionally call the :meth:"
"`unlink` method to encourage early cleanup of the now-unneeded objects.  :"
"meth:`unlink` is an :mod:`xml.dom.minidom`\\ -specific extension to the DOM "
"API that renders the node and its descendants are essentially useless.  "
"Otherwise, Python's garbage collector will eventually take care of the "
"objects in the tree."
msgstr ""
"DOM ツリーを使い終えたとき、 :meth:`unlink` メソッドを呼び出して不要になった"
"オブジェクトが早く片付けられるように働きかけることができます。 :meth:"
"`unlink` は、 DOM API に対する :mod:`xml.dom.minidom`  特有の拡張です。ノード"
"に対して :meth:`unlink` を呼び出した後は、ノードとその下位ノードは本質的には"
"無意味なものとなります。このメソッドを呼び出さなくても、 Python のガベージコ"
"レクタがいつかはツリーのオブジェクトを後片付けします。"

#: ../../library/xml.dom.minidom.rst:104
msgid ""
"`Document Object Model (DOM) Level 1 Specification <https://www.w3.org/TR/"
"REC-DOM-Level-1/>`_"
msgstr ""
"`Document Object Model (DOM) Level 1 Specification <https://www.w3.org/TR/"
"REC-DOM-Level-1/>`_"

#: ../../library/xml.dom.minidom.rst:105
msgid "The W3C recommendation for the DOM supported by :mod:`xml.dom.minidom`."
msgstr ":mod:`xml.dom.minidom` でサポートされている W3C の DOM に関する勧告。"

#: ../../library/xml.dom.minidom.rst:111
msgid "DOM Objects"
msgstr "DOM オブジェクト"

#: ../../library/xml.dom.minidom.rst:113
msgid ""
"The definition of the DOM API for Python is given as part of the :mod:`xml."
"dom` module documentation.  This section lists the differences between the "
"API and :mod:`xml.dom.minidom`."
msgstr ""
"Python の DOM API 定義は :mod:`xml.dom` モジュールドキュメントの一部として与"
"えられています。この節では、 :mod:`xml.dom` の API と :mod:`xml.dom.minidom` "
"との違いについて列挙します。"

#: ../../library/xml.dom.minidom.rst:120
msgid ""
"Break internal references within the DOM so that it will be garbage "
"collected on versions of Python without cyclic GC.  Even when cyclic GC is "
"available, using this can make large amounts of memory available sooner, so "
"calling this on DOM objects as soon as they are no longer needed is good "
"practice.  This only needs to be called on the :class:`Document` object, but "
"may be called on child nodes to discard children of that node."
msgstr ""
"DOM との内部的な参照を破壊して、循環参照ガベージコレクションを持たないバー"
"ジョンの Python でもガベージコレクションされるようにします。循環参照ガベージ"
"コレクションが利用できる場合でも、このメソッドを使えば大量のメモリをすぐに使"
"えるようにできるため、不要になったらすぐに DOM オブジェクトに対してこのメソッ"
"ドを呼ぶのが良い習慣です。このメソッドは :class:`Document` オブジェクトに対し"
"て呼び出すだけでよいのですが、あるノードの子ノードを破棄するために子ノードに"
"対して呼び出してもかまいません。"

#: ../../library/xml.dom.minidom.rst:127
msgid ""
"You can avoid calling this method explicitly by using the :keyword:`with` "
"statement. The following code will automatically unlink *dom* when the :"
"keyword:`with` block is exited::"
msgstr ""
":keyword:`with` 文を使用することで、このメソッドを明示的に呼ばないようにでき"
"ます。 :keyword:`with` ブロックから出る時に自動的に次のコードが *dom* を "
"unlink します::"

#: ../../library/xml.dom.minidom.rst:137
msgid ""
"Write XML to the writer object.  The writer should have a :meth:`write` "
"method which matches that of the file object interface.  The *indent* "
"parameter is the indentation of the current node.  The *addindent* parameter "
"is the incremental indentation to use for subnodes of the current one.  The "
"*newl* parameter specifies the string to use to terminate newlines."
msgstr ""
"XML を *writer* オブジェクトに書き込みます。 *writer* は、ファイルオブジェク"
"トインタフェースの :meth:`write` に該当するメソッドを持たなければなりませ"
"ん。 *indent* 引数には現在のノードのインデントを指定します。 *addindent* 引数"
"には現在のノードの下にサブノードを追加する際のインデント増分を指定します。 "
"*newl* には、改行時に行末を終端する文字列を指定します。"

#: ../../library/xml.dom.minidom.rst:143
msgid ""
"For the :class:`Document` node, an additional keyword argument *encoding* "
"can be used to specify the encoding field of the XML header."
msgstr ""
":class:`Document` ノードでは、追加のキーワード引数 *encoding* を使って XML "
"ヘッダの encoding フィールドを指定することができます。"

#: ../../library/xml.dom.minidom.rst:149
msgid ""
"Return a string or byte string containing the XML represented by the DOM "
"node."
msgstr ""
"DOM ノードによって表わされる XML を含んだ文字列またはバイト文字列を返します。"

#: ../../library/xml.dom.minidom.rst:152
msgid ""
"With an explicit *encoding* [1]_ argument, the result is a byte string in "
"the specified encoding. With no *encoding* argument, the result is a Unicode "
"string, and the XML declaration in the resulting string does not specify an "
"encoding. Encoding this string in an encoding other than UTF-8 is likely "
"incorrect, since UTF-8 is the default encoding of XML."
msgstr ""
"明示的に *encoding* [1]_ 引数を渡すと、結果は指定されたエンコードのバイト文字"
"列になります。*encoding* 引数なしだと、結果は unicode 文字列です。また、結果"
"として生じる文字列の中の XML 宣言はエンコーディングを指定しません。XML のデ"
"フォルトエンコーディングは UTF-8 なので、この文字列を UTF-8 以外でエンコード"
"することはおそらく正しくありません。"

#: ../../library/xml.dom.minidom.rst:161
msgid ""
"Return a pretty-printed version of the document. *indent* specifies the "
"indentation string and defaults to a tabulator; *newl* specifies the string "
"emitted at the end of each line and defaults to ``\\n``."
msgstr ""
"文書の整形されたバージョンを返します。 *indent* はインデントを行うための文字"
"で、デフォルトはタブです; *newl* には行末で出力される文字列を指定し、デフォル"
"トは ``\\n`` です。"

#: ../../library/xml.dom.minidom.rst:165
msgid ""
"The *encoding* argument behaves like the corresponding argument of :meth:"
"`toxml`."
msgstr "*encoding* 引数は :meth:`toxml` の対応する引数と同様に振る舞います。"

#: ../../library/xml.dom.minidom.rst:172
msgid "DOM Example"
msgstr "DOM の例"

#: ../../library/xml.dom.minidom.rst:174
msgid ""
"This example program is a fairly realistic example of a simple program. In "
"this particular case, we do not take much advantage of the flexibility of "
"the DOM."
msgstr ""
"以下のプログラム例は、単純なプログラムのかなり現実的な例です。特にこの例に関"
"しては、DOM の柔軟性をあまり活用してはいません。"

#: ../../library/xml.dom.minidom.rst:183
msgid "minidom and the DOM standard"
msgstr "minidom と DOM 標準"

#: ../../library/xml.dom.minidom.rst:185
msgid ""
"The :mod:`xml.dom.minidom` module is essentially a DOM 1.0-compatible DOM "
"with some DOM 2 features (primarily namespace features)."
msgstr ""
":mod:`xml.dom.minidom` モジュールは、本質的には DOM 1.0 互換の DOM に、いくつ"
"かの DOM 2 機能 (主に名前空間機能) を追加したものです。"

#: ../../library/xml.dom.minidom.rst:188
msgid ""
"Usage of the DOM interface in Python is straight-forward.  The following "
"mapping rules apply:"
msgstr ""
"Python における DOM インタフェースは率直なものです。以下の対応付け規則が適用"
"されます:"

#: ../../library/xml.dom.minidom.rst:191
msgid ""
"Interfaces are accessed through instance objects. Applications should not "
"instantiate the classes themselves; they should use the creator functions "
"available on the :class:`Document` object. Derived interfaces support all "
"operations (and attributes) from the base interfaces, plus any new "
"operations."
msgstr ""
"インタフェースはインスタンスオブジェクトを介してアクセスされます。アプリケー"
"ション自身から、クラスをインスタンス化してはなりません; :class:`Document` オ"
"ブジェクト上で利用可能な生成関数 (creator function) を使わなければなりませ"
"ん。派生インタフェースでは基底インタフェースの全ての演算 (および属性) に加"
"え、新たな演算をサポートします。"

#: ../../library/xml.dom.minidom.rst:196
msgid ""
"Operations are used as methods. Since the DOM uses only :keyword:`in` "
"parameters, the arguments are passed in normal order (from left to right). "
"There are no optional arguments. ``void`` operations return ``None``."
msgstr ""
"演算はメソッドとして使われます。DOM では :keyword:`in` パラメタのみを使うの"
"で、引数は通常の順番 (左から右へ) で渡されます。オプション引数はありませ"
"ん。  ``void`` 演算は ``None`` を返します。"

#: ../../library/xml.dom.minidom.rst:200
msgid ""
"IDL attributes map to instance attributes. For compatibility with the OMG "
"IDL language mapping for Python, an attribute ``foo`` can also be accessed "
"through accessor methods :meth:`_get_foo` and :meth:`_set_foo`.  "
"``readonly`` attributes must not be changed; this is not enforced at runtime."
msgstr ""
"IDL 属性はインスタンス属性に対応付けられます。OMG IDL 言語における Python へ"
"の対応付けとの互換性のために、属性 ``foo`` はアクセサメソッド :meth:"
"`_get_foo` および :meth:`_set_foo` でもアクセスできます。 ``readonly`` 属性は"
"変更してはなりません; とはいえ、これは実行時には強制されません。"

#: ../../library/xml.dom.minidom.rst:205
msgid ""
"The types ``short int``, ``unsigned int``, ``unsigned long long``, and "
"``boolean`` all map to Python integer objects."
msgstr ""
"``short int`` 、 ``unsigned int`` 、 ``unsigned long long`` 、および "
"``boolean`` 型は、全て Python 整数オブジェクトに対応付けられます。"

#: ../../library/xml.dom.minidom.rst:208
msgid ""
"The type ``DOMString`` maps to Python strings. :mod:`xml.dom.minidom` "
"supports either bytes or strings, but will normally produce strings. Values "
"of type ``DOMString`` may also be ``None`` where allowed to have the IDL "
"``null`` value by the DOM specification from the W3C."
msgstr ""
"``DOMString`` 型は Python 文字列型に対応付けられます。 :mod:`xml.dom."
"minidom` ではバイト列か文字列のどちらかに対応づけられますが、通常文字列を生成"
"します。 ``DOMString`` 型の値は、W3C の DOM 仕様で、IDL ``null`` 値になっても"
"よいとされている場所では ``None`` になることもあります。"

#: ../../library/xml.dom.minidom.rst:213
msgid ""
"``const`` declarations map to variables in their respective scope (e.g. "
"``xml.dom.minidom.Node.PROCESSING_INSTRUCTION_NODE``); they must not be "
"changed."
msgstr ""
"``const`` 宣言を行うと、 (``xml.dom.minidom.Node."
"PROCESSING_INSTRUCTION_NODE`` のように) 対応するスコープ内の変数に対応付けを"
"行います; これらは変更してはなりません。"

#: ../../library/xml.dom.minidom.rst:216
msgid ""
"``DOMException`` is currently not supported in :mod:`xml.dom.minidom`. "
"Instead, :mod:`xml.dom.minidom` uses standard Python exceptions such as :exc:"
"`TypeError` and :exc:`AttributeError`."
msgstr ""
"``DOMException`` は現状では :mod:`xml.dom.minidom` でサポートされていません。"
"その代わり、 :mod:`xml.dom.minidom` は、 :exc:`TypeError` や :exc:"
"`AttributeError` といった標準の Python 例外を使います。"

#: ../../library/xml.dom.minidom.rst:220
msgid ""
":class:`NodeList` objects are implemented using Python's built-in list type. "
"These objects provide the interface defined in the DOM specification, but "
"with earlier versions of Python they do not support the official API.  They "
"are, however, much more \"Pythonic\" than the interface defined in the W3C "
"recommendations."
msgstr ""
":class:`NodeList` オブジェクトは Python の組み込みのリスト型を使って実装され"
"ています。これらのオブジェクトは DOM 仕様で定義されたインタフェースを提供して"
"いますが、以前のバージョンの Python では、公式の API をサポートしていません。"
"しかしながら、これらの API は W3C 勧告で定義されたインタフェースよりも "
"\"Python 的な\" ものになっています。"

#: ../../library/xml.dom.minidom.rst:226
msgid ""
"The following interfaces have no implementation in :mod:`xml.dom.minidom`:"
msgstr ""
"以下のインタフェースは :mod:`xml.dom.minidom` では全く実装されていません:"

#: ../../library/xml.dom.minidom.rst:228
msgid ":class:`DOMTimeStamp`"
msgstr ":class:`DOMTimeStamp`"

#: ../../library/xml.dom.minidom.rst:230
msgid ":class:`DocumentType`"
msgstr ":class:`DocumentType`"

#: ../../library/xml.dom.minidom.rst:232
msgid ":class:`DOMImplementation`"
msgstr ":class:`DOMImplementation`"

#: ../../library/xml.dom.minidom.rst:234
msgid ":class:`CharacterData`"
msgstr ":class:`CharacterData`"

#: ../../library/xml.dom.minidom.rst:236
msgid ":class:`CDATASection`"
msgstr ":class:`CDATASection`"

#: ../../library/xml.dom.minidom.rst:238
msgid ":class:`Notation`"
msgstr ":class:`Notation`"

#: ../../library/xml.dom.minidom.rst:240
msgid ":class:`Entity`"
msgstr ":class:`Entity`"

#: ../../library/xml.dom.minidom.rst:242
msgid ":class:`EntityReference`"
msgstr ":class:`EntityReference`"

#: ../../library/xml.dom.minidom.rst:244
msgid ":class:`DocumentFragment`"
msgstr ":class:`DocumentFragment`"

#: ../../library/xml.dom.minidom.rst:246
msgid ""
"Most of these reflect information in the XML document that is not of general "
"utility to most DOM users."
msgstr ""
"これらの大部分は、ほとんどの DOM のユーザにとって一般的な用途として有用とはな"
"らないような XML 文書内の情報を反映しています。"

#: ../../library/xml.dom.minidom.rst:250
msgid "Footnotes"
msgstr "脚注"

#: ../../library/xml.dom.minidom.rst:251
msgid ""
"The encoding name included in the XML output should conform to the "
"appropriate standards. For example, \"UTF-8\" is valid, but \"UTF8\" is not "
"valid in an XML document's declaration, even though Python accepts it as an "
"encoding name. See https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-"
"EncodingDecl and https://www.iana.org/assignments/character-sets/character-"
"sets.xhtml."
msgstr ""
"XML 出力に含まれるエンコード名は適切な規格に従っていなければなりません。例え"
"ば \"UTF-8\" は有効ですが、 \"UTF8\" は XML 文書の宣言では有効ではありませ"
"ん。後者はエンコード名として Python に認められるとしてもです。https://www.w3."
"org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl と https://www.iana.org/"
"assignments/character-sets/character-sets.xhtml を参照してください。"
