# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.compat32-message.rst:4
msgid ""
":mod:`email.message.Message`: Representing an email message using the :data:"
"`~email.policy.compat32` API"
msgstr ""
":mod:`email.message.Message`: :data:`~email.policy.compat32` API を使用した電"
"子メールメッセージの表現"

#: ../../library/email.compat32-message.rst:12
msgid ""
"The :class:`Message` class is very similar to the :class:`~email.message."
"EmailMessage` class, without the methods added by that class, and with the "
"default behavior of certain other methods being slightly different.  We also "
"document here some methods that, while supported by the :class:`~email."
"message.EmailMessage` class, are not recommended unless you are dealing with "
"legacy code."
msgstr ""

#: ../../library/email.compat32-message.rst:19
msgid "The philosophy and structure of the two classes is otherwise the same."
msgstr ""

#: ../../library/email.compat32-message.rst:21
msgid ""
"This document describes the behavior under the default (for :class:"
"`Message`) policy :attr:`~email.policy.Compat32`.  If you are going to use "
"another policy, you should be using the :class:`~email.message.EmailMessage` "
"class instead."
msgstr ""

#: ../../library/email.compat32-message.rst:25
msgid ""
"An email message consists of *headers* and a *payload*.  Headers must be :"
"rfc:`5322` style names and values, where the field name and value are "
"separated by a colon.  The colon is not part of either the field name or the "
"field value.  The payload may be a simple text message, or a binary object, "
"or a structured sequence of sub-messages each with their own set of headers "
"and their own payload.  The latter type of payload is indicated by the "
"message having a MIME type such as :mimetype:`multipart/\\*` or :mimetype:"
"`message/rfc822`."
msgstr ""

#: ../../library/email.compat32-message.rst:34
msgid ""
"The conceptual model provided by a :class:`Message` object is that of an "
"ordered dictionary of headers with additional methods for accessing both "
"specialized information from the headers, for accessing the payload, for "
"generating a serialized version of the message, and for recursively walking "
"over the object tree.  Note that duplicate headers are supported but special "
"methods must be used to access them."
msgstr ""

#: ../../library/email.compat32-message.rst:41
msgid ""
"The :class:`Message` pseudo-dictionary is indexed by the header names, which "
"must be ASCII values.  The values of the dictionary are strings that are "
"supposed to contain only ASCII characters; there is some special handling "
"for non-ASCII input, but it doesn't always produce the correct results.  "
"Headers are stored and returned in case-preserving form, but field names are "
"matched case-insensitively.  There may also be a single envelope header, "
"also known as the *Unix-From* header or the ``From_`` header.  The *payload* "
"is either a string or bytes, in the case of simple message objects, or a "
"list of :class:`Message` objects, for MIME container documents (e.g. :"
"mimetype:`multipart/\\*` and :mimetype:`message/rfc822`)."
msgstr ""

#: ../../library/email.compat32-message.rst:52
msgid "Here are the methods of the :class:`Message` class:"
msgstr ":class:`Message` クラスのメソッドは以下のとおりです:"

#: ../../library/email.compat32-message.rst:57
msgid ""
"If *policy* is specified (it must be an instance of a :mod:`~email.policy` "
"class) use the rules it specifies to update and serialize the representation "
"of the message.  If *policy* is not set, use the :class:`compat32 <email."
"policy.Compat32>` policy, which maintains backward compatibility with the "
"Python 3.2 version of the email package.  For more information see the :mod:"
"`~email.policy` documentation."
msgstr ""

#: ../../library/email.compat32-message.rst:64
msgid "The *policy* keyword argument was added."
msgstr "キーワード引数 *policy* が追加されました。"

#: ../../library/email.compat32-message.rst:69
msgid ""
"Return the entire message flattened as a string.  When optional *unixfrom* "
"is true, the envelope header is included in the returned string. *unixfrom* "
"defaults to ``False``.  For backward compatibility reasons, *maxheaderlen* "
"defaults to ``0``, so if you want a different value you must override it "
"explicitly (the value specified for *max_line_length* in the policy will be "
"ignored by this method).  The *policy* argument may be used to override the "
"default policy obtained from the message instance. This can be used to "
"control some of the formatting produced by the method, since the specified "
"*policy* will be passed to the ``Generator``."
msgstr ""

#: ../../library/email.compat32-message.rst:79
#: ../../library/email.compat32-message.rst:121
msgid ""
"Flattening the message may trigger changes to the :class:`Message` if "
"defaults need to be filled in to complete the transformation to a string "
"(for example, MIME boundaries may be generated or modified)."
msgstr ""
"もし、文字列への変換を完全に行うためにデフォルト値を埋める必要がある場合、"
"メッセージのフラット化は :class:`Message` の変更を引き起こす可能性があります "
"(例えば、MIME の境界が生成される、変更される等)。"

#: ../../library/email.compat32-message.rst:83
msgid ""
"Note that this method is provided as a convenience and may not always format "
"the message the way you want.  For example, by default it does not do the "
"mangling of lines that begin with ``From`` that is required by the Unix mbox "
"format.  For more flexibility, instantiate a :class:`~email.generator."
"Generator` instance and use its :meth:`~email.generator.Generator.flatten` "
"method directly.  For example::"
msgstr ""

#: ../../library/email.compat32-message.rst:97
msgid ""
"If the message object contains binary data that is not encoded according to "
"RFC standards, the non-compliant data will be replaced by unicode \"unknown "
"character\" code points.  (See also :meth:`.as_bytes` and :class:`~email."
"generator.BytesGenerator`.)"
msgstr ""

#: ../../library/email.compat32-message.rst:102
msgid "the *policy* keyword argument was added."
msgstr "*policy* キーワード引数が追加されました。"

#: ../../library/email.compat32-message.rst:107
msgid ""
"Equivalent to :meth:`.as_string()`.  Allows ``str(msg)`` to produce a string "
"containing the formatted message."
msgstr ""
":meth:`.as_string()` と等価です。これにより ``str(msg)`` は書式化されたメッ"
"セージの文字列を作ります。"

#: ../../library/email.compat32-message.rst:113
msgid ""
"Return the entire message flattened as a bytes object.  When optional "
"*unixfrom* is true, the envelope header is included in the returned string.  "
"*unixfrom* defaults to ``False``.  The *policy* argument may be used to "
"override the default policy obtained from the message instance. This can be "
"used to control some of the formatting produced by the method, since the "
"specified *policy* will be passed to the ``BytesGenerator``."
msgstr ""

#: ../../library/email.compat32-message.rst:125
msgid ""
"Note that this method is provided as a convenience and may not always format "
"the message the way you want.  For example, by default it does not do the "
"mangling of lines that begin with ``From`` that is required by the Unix mbox "
"format.  For more flexibility, instantiate a :class:`~email.generator."
"BytesGenerator` instance and use its :meth:`~email.generator.BytesGenerator."
"flatten` method directly. For example::"
msgstr ""

#: ../../library/email.compat32-message.rst:145
msgid ""
"Equivalent to :meth:`.as_bytes()`.  Allows ``bytes(msg)`` to produce a bytes "
"object containing the formatted message."
msgstr ""
":meth:`.as_bytes()` と等価です。これにより ``bytes(msg)`` は書式化されたメッ"
"セージの bytes オブジェクトを作ります。"

#: ../../library/email.compat32-message.rst:153
msgid ""
"Return ``True`` if the message's payload is a list of sub-\\ :class:"
"`Message` objects, otherwise return ``False``.  When :meth:`is_multipart` "
"returns ``False``, the payload should be a string object (which might be a "
"CTE encoded binary payload).  (Note that :meth:`is_multipart` returning "
"``True`` does not necessarily mean that \"msg.get_content_maintype() == "
"'multipart'\" will return the ``True``. For example, ``is_multipart`` will "
"return ``True`` when the :class:`Message` is of type ``message/rfc822``.)"
msgstr ""

#: ../../library/email.compat32-message.rst:165
msgid ""
"Set the message's envelope header to *unixfrom*, which should be a string."
msgstr ""
"メッセージのエンベロープヘッダを *unixfrom* に設定します。これは文字列でなけ"
"ればなりません。"

#: ../../library/email.compat32-message.rst:170
msgid ""
"Return the message's envelope header.  Defaults to ``None`` if the envelope "
"header was never set."
msgstr ""
"メッセージのエンベロープヘッダを返します。エンベロープヘッダが設定されていな"
"い場合は ``None`` が返されます。"

#: ../../library/email.compat32-message.rst:176
msgid ""
"Add the given *payload* to the current payload, which must be ``None`` or a "
"list of :class:`Message` objects before the call. After the call, the "
"payload will always be a list of :class:`Message` objects.  If you want to "
"set the payload to a scalar object (e.g. a string), use :meth:`set_payload` "
"instead."
msgstr ""
"与えられた *payload* を現在のペイロードに追加します。この時点でのペイロード"
"は ``None`` か、あるいは :class:`Message` オブジェクトのリストである必要があ"
"ります。このメソッドの実行後、ペイロードは必ず :class:`Message` オブジェクト"
"のリストになります。ペイロードにスカラーオブジェクト (文字列など) を格納した"
"い場合は、かわりに :meth:`set_payload` を使ってください。"

#: ../../library/email.compat32-message.rst:182
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by :meth:`~email.message.EmailMessage."
"set_content` and the related ``make`` and ``add`` methods."
msgstr ""

#: ../../library/email.compat32-message.rst:190
msgid ""
"Return the current payload, which will be a list of :class:`Message` objects "
"when :meth:`is_multipart` is ``True``, or a string when :meth:`is_multipart` "
"is ``False``.  If the payload is a list and you mutate the list object, you "
"modify the message's payload in place."
msgstr ""
"現在のペイロードへの参照を返します。これは :meth:`is_multipart` が ``True`` "
"の場合 :class:`Message` オブジェクトのリストになり、 :meth:`is_multipart` が "
"``False`` の場合は文字列になります。ペイロードがリストの場合、リストを変更す"
"ることはそのメッセージのペイロードを変更することになります。"

#: ../../library/email.compat32-message.rst:195
msgid ""
"With optional argument *i*, :meth:`get_payload` will return the *i*-th "
"element of the payload, counting from zero, if :meth:`is_multipart` is "
"``True``.  An :exc:`IndexError` will be raised if *i* is less than 0 or "
"greater than or equal to the number of items in the payload.  If the payload "
"is a string (i.e.  :meth:`is_multipart` is ``False``) and *i* is given, a :"
"exc:`TypeError` is raised."
msgstr ""
"オプション引数の *i* がある場合、 :meth:`is_multipart` が ``True`` ならば :"
"meth:`get_payload` はペイロード中で 0 から数えて *i* 番目の要素を返します。 "
"*i* が 0 より小さい場合、あるいはペイロードの個数以上の場合は :exc:"
"`IndexError` が発生します。ペイロードが文字列 (つまり :meth:`is_multipart` "
"が ``False``) にもかかわらず *i* が与えられたときは :exc:`TypeError` が発生し"
"ます。"

#: ../../library/email.compat32-message.rst:202
msgid ""
"Optional *decode* is a flag indicating whether the payload should be decoded "
"or not, according to the :mailheader:`Content-Transfer-Encoding` header. "
"When ``True`` and the message is not a multipart, the payload will be "
"decoded if this header's value is ``quoted-printable`` or ``base64``. If "
"some other encoding is used, or :mailheader:`Content-Transfer-Encoding` "
"header is missing, the payload is returned as-is (undecoded).  In all cases "
"the returned value is binary data.  If the message is a multipart and the "
"*decode* flag is ``True``, then ``None`` is returned.  If the payload is "
"base64 and it was not perfectly formed (missing padding, characters outside "
"the base64 alphabet), then an appropriate defect will be added to the "
"message's defect property (:class:`~email.errors.InvalidBase64PaddingDefect` "
"or :class:`~email.errors.InvalidBase64CharactersDefect`, respectively)."
msgstr ""

#: ../../library/email.compat32-message.rst:216
msgid ""
"When *decode* is ``False`` (the default) the body is returned as a string "
"without decoding the :mailheader:`Content-Transfer-Encoding`.  However, for "
"a :mailheader:`Content-Transfer-Encoding` of 8bit, an attempt is made to "
"decode the original bytes using the ``charset`` specified by the :mailheader:"
"`Content-Type` header, using the ``replace`` error handler. If no "
"``charset`` is specified, or if the ``charset`` given is not recognized by "
"the email package, the body is decoded using the default ASCII charset."
msgstr ""

#: ../../library/email.compat32-message.rst:225
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by :meth:`~email.message.EmailMessage."
"get_content` and :meth:`~email.message.EmailMessage.iter_parts`."
msgstr ""

#: ../../library/email.compat32-message.rst:233
msgid ""
"Set the entire message object's payload to *payload*.  It is the client's "
"responsibility to ensure the payload invariants.  Optional *charset* sets "
"the message's default character set; see :meth:`set_charset` for details."
msgstr ""
"メッセージオブジェクト全体のペイロードを *payload* に設定します。クライアント"
"はペイロードを変更してはいけません。オプションの *charset* はメッセージのデ"
"フォルト文字セットを設定します。詳しくは :meth:`set_charset` を参照してくださ"
"い。"

#: ../../library/email.compat32-message.rst:237
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by :meth:`~email.message.EmailMessage."
"set_content`."
msgstr ""

#: ../../library/email.compat32-message.rst:244
msgid ""
"Set the character set of the payload to *charset*, which can either be a :"
"class:`~email.charset.Charset` instance (see :mod:`email.charset`), a string "
"naming a character set, or ``None``.  If it is a string, it will be "
"converted to a :class:`~email.charset.Charset` instance.  If *charset* is "
"``None``, the ``charset`` parameter will be removed from the :mailheader:"
"`Content-Type` header (the message will not be otherwise modified).  "
"Anything else will generate a :exc:`TypeError`."
msgstr ""
"ペイロードの文字セットを *charset* に変更します。これは :class:`~email."
"charset.Charset` インスタンス (:mod:`email.charset` 参照)、文字セット名を表す"
"文字列、あるいは ``None`` のいずれかです。文字列を指定した場合は :class:"
"`~email.charset.Charset` インスタンスに変換されます。 *charset* が ``None`` "
"の場合、 ``charset`` 引数は :mailheader:`Content-Type` ヘッダから除去されま"
"す (それ以外にメッセージは変更されません)。これら以外のものを文字セットとして"
"指定した場合、 :exc:`TypeError` を送出します。"

#: ../../library/email.compat32-message.rst:252
msgid ""
"If there is no existing :mailheader:`MIME-Version` header one will be "
"added.  If there is no existing :mailheader:`Content-Type` header, one will "
"be added with a value of :mimetype:`text/plain`.  Whether the :mailheader:"
"`Content-Type` header already exists or not, its ``charset`` parameter will "
"be set to *charset.output_charset*.   If *charset.input_charset* and "
"*charset.output_charset* differ, the payload will be re-encoded to the "
"*output_charset*.  If there is no existing :mailheader:`Content-Transfer-"
"Encoding` header, then the payload will be transfer-encoded, if needed, "
"using the specified :class:`~email.charset.Charset`, and a header with the "
"appropriate value will be added.  If a :mailheader:`Content-Transfer-"
"Encoding` header already exists, the payload is assumed to already be "
"correctly encoded using that :mailheader:`Content-Transfer-Encoding` and is "
"not modified."
msgstr ""
":mailheader:`MIME-Version` ヘッダが存在しなければ、追加されます。 :"
"mailheader:`Content-Type` ヘッダが存在しなければ、 :mimetype:`text/plain` を"
"値として追加されます。 :mailheader:`Content-Type` が存在していてもいなくて"
"も、 ``charset`` パラメタは *charset.output_charset* に設定されます。 "
"*charset.input_charset* と *charset.output_charset* が異なるなら、ペイロード"
"は *output_charset* に再エンコードされます。 :mailheader:`Content-Transfer-"
"Encoding` ヘッダが存在しなければ、ペイロードは、必要なら指定された :class:"
"`~email.charset.Charset` を使って transfer エンコードされ、適切な値のヘッダが"
"追加されます。 :mailheader:`Content-Transfer-Encoding` ヘッダがすでに存在すれ"
"ば、ペイロードはすでにその :mailheader:`Content-Transfer-Encoding` によって正"
"しくエンコードされたものと見なされ、変形されません。"

#: ../../library/email.compat32-message.rst:266
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by the *charset* parameter of the :meth:"
"`email.emailmessage.EmailMessage.set_content` method."
msgstr ""

#: ../../library/email.compat32-message.rst:274
msgid ""
"Return the :class:`~email.charset.Charset` instance associated with the "
"message's payload."
msgstr ""
"そのメッセージ中のペイロードの :class:`~email.charset.Charset` インスタンスを"
"返します。"

#: ../../library/email.compat32-message.rst:277
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class it always returns ``None``."
msgstr ""

#: ../../library/email.compat32-message.rst:282
msgid ""
"The following methods implement a mapping-like interface for accessing the "
"message's :rfc:`2822` headers.  Note that there are some semantic "
"differences between these methods and a normal mapping (i.e. dictionary) "
"interface.  For example, in a dictionary there are no duplicate keys, but "
"here there may be duplicate message headers.  Also, in dictionaries there is "
"no guaranteed order to the keys returned by :meth:`keys`, but in a :class:"
"`Message` object, headers are always returned in the order they appeared in "
"the original message, or were added to the message later.  Any header "
"deleted and then re-added are always appended to the end of the header list."
msgstr ""
"以下のメソッドは、メッセージの :rfc:`2822` ヘッダにアクセスするためのマップ "
"(辞書) 形式のインタフェイスを実装したものです。これらのメソッドと、通常のマッ"
"プ (辞書) 型はまったく同じ意味をもつわけではないことに注意してください。たと"
"えば辞書型では、同じキーが複数あることは許されていませんが、ここでは同じメッ"
"セージヘッダが複数ある場合があります。また、辞書型では :meth:`keys` で返され"
"るキーの順序は保証されていませんが、 :class:`Message` オブジェクト内のヘッダ"
"はつねに元のメッセージ中に現れた順序、あるいはそのあとに追加された順序で返さ"
"れます。削除され、その後ふたたび追加されたヘッダはリストの一番最後に現れま"
"す。"

#: ../../library/email.compat32-message.rst:292
msgid ""
"These semantic differences are intentional and are biased toward maximal "
"convenience."
msgstr ""
"こういった意味のちがいは意図的なもので、最大の利便性をもつようにつくられてい"
"ます。"

#: ../../library/email.compat32-message.rst:295
msgid ""
"Note that in all cases, any envelope header present in the message is not "
"included in the mapping interface."
msgstr ""
"注意: どんな場合も、メッセージ中のエンベロープヘッダはこのマップ形式のインタ"
"フェイスには含まれません。"

#: ../../library/email.compat32-message.rst:298
msgid ""
"In a model generated from bytes, any header values that (in contravention of "
"the RFCs) contain non-ASCII bytes will, when retrieved through this "
"interface, be represented as :class:`~email.header.Header` objects with a "
"charset of ``unknown-8bit``."
msgstr ""

#: ../../library/email.compat32-message.rst:306
msgid "Return the total number of headers, including duplicates."
msgstr "複製されたものもふくめてヘッダ数の合計を返します。"

#: ../../library/email.compat32-message.rst:311
msgid ""
"Return ``True`` if the message object has a field named *name*. Matching is "
"done case-insensitively and *name* should not include the trailing colon. "
"Used for the ``in`` operator, e.g.::"
msgstr ""
"メッセージオブジェクトが *name* という名前のフィールドを持っていれば "
"``True`` を返します。この検査では名前の大文字小文字は区別されません。*name* "
"は最後にコロンをふくんでいてはいけません。このメソッドは以下のように ``in`` "
"演算子で使われます::"

#: ../../library/email.compat32-message.rst:321
msgid ""
"Return the value of the named header field.  *name* should not include the "
"colon field separator.  If the header is missing, ``None`` is returned; a :"
"exc:`KeyError` is never raised."
msgstr ""
"指定された名前のヘッダフィールドの値を返します。 *name* は最後にコロンをふく"
"んでいてはいけません。そのヘッダがない場合は ``None`` が返され、 :exc:"
"`KeyError` 例外は発生しません。"

#: ../../library/email.compat32-message.rst:325
msgid ""
"Note that if the named field appears more than once in the message's "
"headers, exactly which of those field values will be returned is undefined.  "
"Use the :meth:`get_all` method to get the values of all the extant named "
"headers."
msgstr ""
"注意: 指定された名前のフィールドがメッセージのヘッダに2回以上現れている場合、"
"どちらの値が返されるかは未定義です。ヘッダに存在するフィールドの値をすべて取"
"り出したい場合は :meth:`get_all` メソッドを使ってください。"

#: ../../library/email.compat32-message.rst:333
msgid ""
"Add a header to the message with field name *name* and value *val*.  The "
"field is appended to the end of the message's existing fields."
msgstr ""
"メッセージヘッダに *name* という名前の *val* という値をもつフィールドをあらた"
"に追加します。このフィールドは現在メッセージに存在するフィールドのいちばん後"
"に追加されます。"

#: ../../library/email.compat32-message.rst:336
msgid ""
"Note that this does *not* overwrite or delete any existing header with the "
"same name.  If you want to ensure that the new header is the only one "
"present in the message with field name *name*, delete the field first, e.g.::"
msgstr ""
"注意: このメソッドでは、すでに同一の名前で存在するフィールドは上書き *されま"
"せん*。もしメッセージが名前 *name* をもつフィールドをひとつしか持たないように"
"したければ、最初にそれを除去してください。たとえば::"

#: ../../library/email.compat32-message.rst:346
msgid ""
"Delete all occurrences of the field with name *name* from the message's "
"headers.  No exception is raised if the named field isn't present in the "
"headers."
msgstr ""
"メッセージのヘッダから、*name* という名前をもつフィールドをすべて除去します。"
"たとえこの名前をもつヘッダが存在していなくても例外は発生しません。"

#: ../../library/email.compat32-message.rst:353
msgid "Return a list of all the message's header field names."
msgstr "メッセージ中にあるすべてのヘッダのフィールド名のリストを返します。"

#: ../../library/email.compat32-message.rst:358
msgid "Return a list of all the message's field values."
msgstr "メッセージ中にあるすべてのフィールドの値のリストを返します。"

#: ../../library/email.compat32-message.rst:363
msgid ""
"Return a list of 2-tuples containing all the message's field headers and "
"values."
msgstr ""
"メッセージ中にあるすべてのヘッダのフィールド名とその値を 2-タプルのリストとし"
"て返します。"

#: ../../library/email.compat32-message.rst:369
msgid ""
"Return the value of the named header field.  This is identical to :meth:"
"`__getitem__` except that optional *failobj* is returned if the named header "
"is missing (defaults to ``None``)."
msgstr ""
"指定された名前をもつフィールドの値を返します。これは指定された名前がないとき"
"にオプション引数の *failobj* (デフォルトでは ``None``) を返すことをのぞけ"
"ば、 :meth:`__getitem__` と同じです。"

#: ../../library/email.compat32-message.rst:373
msgid "Here are some additional useful methods:"
msgstr "さらに、役に立つメソッドをいくつか紹介します:"

#: ../../library/email.compat32-message.rst:378
msgid ""
"Return a list of all the values for the field named *name*. If there are no "
"such named headers in the message, *failobj* is returned (defaults to "
"``None``)."
msgstr ""
"*name* の名前をもつフィールドのすべての値からなるリストを返します。該当する名"
"前のヘッダがメッセージ中に含まれていない場合は *failobj* (デフォルトでは "
"``None``) が返されます。"

#: ../../library/email.compat32-message.rst:385
msgid ""
"Extended header setting.  This method is similar to :meth:`__setitem__` "
"except that additional header parameters can be provided as keyword "
"arguments.  *_name* is the header field to add and *_value* is the *primary* "
"value for the header."
msgstr ""
"拡張ヘッダ設定。このメソッドは :meth:`__setitem__` と似ていますが、追加のヘッ"
"ダ・パラメータをキーワード引数で指定できるところが違っています。 *_name* に追"
"加するヘッダフィールドを、 *_value* にそのヘッダの *最初の* 値を渡します。"

#: ../../library/email.compat32-message.rst:390
msgid ""
"For each item in the keyword argument dictionary *_params*, the key is taken "
"as the parameter name, with underscores converted to dashes (since dashes "
"are illegal in Python identifiers).  Normally, the parameter will be added "
"as ``key=\"value\"`` unless the value is ``None``, in which case only the "
"key will be added.  If the value contains non-ASCII characters, it can be "
"specified as a three tuple in the format ``(CHARSET, LANGUAGE, VALUE)``, "
"where ``CHARSET`` is a string naming the charset to be used to encode the "
"value, ``LANGUAGE`` can usually be set to ``None`` or the empty string (see :"
"rfc:`2231` for other possibilities), and ``VALUE`` is the string value "
"containing non-ASCII code points.  If a three tuple is not passed and the "
"value contains non-ASCII characters, it is automatically encoded in :rfc:"
"`2231` format using a ``CHARSET`` of ``utf-8`` and a ``LANGUAGE`` of "
"``None``."
msgstr ""
"キーワード引数辞書 *_params* の各項目ごとに、そのキーがパラメータ名として扱わ"
"れ、キー名にふくまれるアンダースコアはハイフンに置換されます (アンダースコア"
"は、Python 識別子としてハイフンを使えないための代替です)。ふつう、パラメータ"
"の値が ``None`` 以外のときは、 ``key=\"value\"`` の形で追加されます。パラメー"
"タの値が ``None`` のときはキーのみが追加されます。値が非 ASCII 文字を含むな"
"ら、それは ``(CHARSET, LANGUAGE, VALUE)`` の形式の 3 タプルにすることが出来ま"
"す。ここで ``CHARSET`` はその値をエンコードするのに使われる文字セットを指示す"
"る文字列で、 ``LANGUAGE`` は通常 ``None`` か空文字列にでき (これら以外で指定"
"出来るものについては :RFC:`2231` を参照してください)、 ``VALUE`` は非 ASCII "
"コードポイントを含む文字列値です。この 3 タプルではなく非 ASCII 文字を含む値"
"が渡された場合は、 ``CHARSET`` に ``utf-8`` 、 ``LANGUAGE`` に ``None`` を"
"使って :rfc:`2231` 形式に自動的にエンコードされます。"

#: ../../library/email.compat32-message.rst:404
msgid "Here's an example::"
msgstr "以下はこの使用例です::"

#: ../../library/email.compat32-message.rst:408
msgid "This will add a header that looks like ::"
msgstr "こうするとヘッダには以下のように追加されます ::"

#: ../../library/email.compat32-message.rst:412
msgid "An example with non-ASCII characters::"
msgstr "非 ASCII 文字を使った例::"

#: ../../library/email.compat32-message.rst:417
msgid "Which produces ::"
msgstr "は、以下のようになります ::"

#: ../../library/email.compat32-message.rst:424
msgid ""
"Replace a header.  Replace the first header found in the message that "
"matches *_name*, retaining header order and field name case.  If no matching "
"header was found, a :exc:`KeyError` is raised."
msgstr ""
"ヘッダの置換。 *_name* と一致するヘッダで最初に見つかったものを置き換えます。"
"このときヘッダの順序とフィールド名の大文字小文字は保存されます。一致するヘッ"
"ダがない場合、 :exc:`KeyError` が発生します。"

#: ../../library/email.compat32-message.rst:431
msgid ""
"Return the message's content type.  The returned string is coerced to lower "
"case of the form :mimetype:`maintype/subtype`.  If there was no :mailheader:"
"`Content-Type` header in the message the default type as given by :meth:"
"`get_default_type` will be returned.  Since according to :rfc:`2045`, "
"messages always have a default type, :meth:`get_content_type` will always "
"return a value."
msgstr ""
"そのメッセージの content-type を返します。返された文字列は強制的に小文字で :"
"mimetype:`maintype/subtype` の形式に変換されます。メッセージ中に :mailheader:"
"`Content-Type` ヘッダがない場合、デフォルトの content-type は :meth:"
"`get_default_type` が返す値によって与えられます。 :rfc:`2045` によればメッ"
"セージはつねにデフォルトの content-type をもっているので、 :meth:"
"`get_content_type` はつねになんらかの値を返すはずです。"

#: ../../library/email.compat32-message.rst:438
msgid ""
":rfc:`2045` defines a message's default type to be :mimetype:`text/plain` "
"unless it appears inside a :mimetype:`multipart/digest` container, in which "
"case it would be :mimetype:`message/rfc822`.  If the :mailheader:`Content-"
"Type` header has an invalid type specification, :rfc:`2045` mandates that "
"the default type be :mimetype:`text/plain`."
msgstr ""
":rfc:`2045` はメッセージのデフォルト content-type を、それが :mimetype:"
"`multipart/digest` コンテナに現れているとき以外は :mimetype:`text/plain` に規"
"定しています。あるメッセージが :mimetype:`multipart/digest` コンテナ中にある"
"場合、その content-type は :mimetype:`message/rfc822` になります。もし :"
"mailheader:`Content-Type` ヘッダが適切でない content-type 書式だった場合、 :"
"rfc:`2045` はそれのデフォルトを :mimetype:`text/plain` として扱うよう定めてい"
"ます。"

#: ../../library/email.compat32-message.rst:447
msgid ""
"Return the message's main content type.  This is the :mimetype:`maintype` "
"part of the string returned by :meth:`get_content_type`."
msgstr ""
"そのメッセージの主 content-type を返します。これは :meth:`get_content_type` "
"によって返される文字列の :mimetype:`maintype` 部分です。"

#: ../../library/email.compat32-message.rst:453
msgid ""
"Return the message's sub-content type.  This is the :mimetype:`subtype` part "
"of the string returned by :meth:`get_content_type`."
msgstr ""
"そのメッセージの副 content-type (sub content-type、subtype) を返します。これ"
"は :meth:`get_content_type` によって返される文字列の :mimetype:`subtype` 部分"
"です。"

#: ../../library/email.compat32-message.rst:459
msgid ""
"Return the default content type.  Most messages have a default content type "
"of :mimetype:`text/plain`, except for messages that are subparts of :"
"mimetype:`multipart/digest` containers.  Such subparts have a default "
"content type of :mimetype:`message/rfc822`."
msgstr ""
"デフォルトの content-type を返します。ほどんどのメッセージではデフォルトの "
"content-type は :mimetype:`text/plain` ですが、メッセージが :mimetype:"
"`multipart/digest` コンテナに含まれているときだけ例外的に :mimetype:`message/"
"rfc822` になります。"

#: ../../library/email.compat32-message.rst:467
msgid ""
"Set the default content type.  *ctype* should either be :mimetype:`text/"
"plain` or :mimetype:`message/rfc822`, although this is not enforced.  The "
"default content type is not stored in the :mailheader:`Content-Type` header."
msgstr ""
"デフォルトの content-type を設定します。 *ctype* は :mimetype:`text/plain` あ"
"るいは :mimetype:`message/rfc822` である必要がありますが、強制ではありませ"
"ん。デフォルトの content-type はヘッダの :mailheader:`Content-Type` には格納"
"されません。"

#: ../../library/email.compat32-message.rst:475
msgid ""
"Return the message's :mailheader:`Content-Type` parameters, as a list. The "
"elements of the returned list are 2-tuples of key/value pairs, as split on "
"the ``'='`` sign.  The left hand side of the ``'='`` is the key, while the "
"right hand side is the value.  If there is no ``'='`` sign in the parameter "
"the value is the empty string, otherwise the value is as described in :meth:"
"`get_param` and is unquoted if optional *unquote* is ``True`` (the default)."
msgstr ""
"メッセージの :mailheader:`Content-Type` パラメータをリストとして返します。返"
"されるリストはキー/値の組からなる2要素タプルが連なったものであり、これらは "
"``'='`` 記号で分離されています。 ``'='`` の左側はキーになり、右側は値になりま"
"す。パラメータ中に ``'='`` がなかった場合、値の部分は空文字列になり、そうでな"
"ければその値は :meth:`get_param` で説明されている形式になります。また、オプ"
"ション引数 *unquote* が ``True`` (デフォルト) である場合、この値は unquote さ"
"れます。"

#: ../../library/email.compat32-message.rst:483
msgid ""
"Optional *failobj* is the object to return if there is no :mailheader:"
"`Content-Type` header.  Optional *header* is the header to search instead "
"of :mailheader:`Content-Type`."
msgstr ""
"オプション引数 *failobj* は、 :mailheader:`Content-Type` ヘッダが存在しなかっ"
"た場合に返すオブジェクトです。オプション引数 *header* には :mailheader:"
"`Content-Type` のかわりに検索すべきヘッダを指定します。"

#: ../../library/email.compat32-message.rst:487
#: ../../library/email.compat32-message.rst:525
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by the *params* property of the "
"individual header objects returned by the header access methods."
msgstr ""

#: ../../library/email.compat32-message.rst:495
msgid ""
"Return the value of the :mailheader:`Content-Type` header's parameter "
"*param* as a string.  If the message has no :mailheader:`Content-Type` "
"header or if there is no such parameter, then *failobj* is returned "
"(defaults to ``None``)."
msgstr ""
"メッセージの :mailheader:`Content-Type` ヘッダ中のパラメータ *param* を文字列"
"として返します。そのメッセージ中に :mailheader:`Content-Type` ヘッダが存在し"
"なかった場合、 *failobj*  (デフォルトは ``None``) が返されます。"

#: ../../library/email.compat32-message.rst:500
msgid ""
"Optional *header* if given, specifies the message header to use instead of :"
"mailheader:`Content-Type`."
msgstr ""
"オプション引数 *header* が与えられた場合、 :mailheader:`Content-Type` のかわ"
"りにそのヘッダが使用されます。"

#: ../../library/email.compat32-message.rst:503
msgid ""
"Parameter keys are always compared case insensitively.  The return value can "
"either be a string, or a 3-tuple if the parameter was :rfc:`2231` encoded.  "
"When it's a 3-tuple, the elements of the value are of the form ``(CHARSET, "
"LANGUAGE, VALUE)``.  Note that both ``CHARSET`` and ``LANGUAGE`` can be "
"``None``, in which case you should consider ``VALUE`` to be encoded in the "
"``us-ascii`` charset.  You can usually ignore ``LANGUAGE``."
msgstr ""
"パラメータのキー比較は常に大文字小文字を区別しません。返り値は文字列か 3 要素"
"のタプルで、タプルになるのはパラメータが :rfc:`2231` エンコードされている場合"
"です。3 要素タプルの場合、各要素の値は ``(CHARSET, LANGUAGE, VALUE)`` の形式"
"になっています。 ``CHARSET`` と ``LAGUAGE`` は ``None`` になることがあり、そ"
"の場合 ``VALUE`` は ``us-ascii`` 文字セットでエンコードされているとみなさなけ"
"ればならないので注意してください。普段は ``LANGUAGE`` を無視できます。"

#: ../../library/email.compat32-message.rst:511
msgid ""
"If your application doesn't care whether the parameter was encoded as in :"
"rfc:`2231`, you can collapse the parameter value by calling :func:`email."
"utils.collapse_rfc2231_value`, passing in the return value from :meth:"
"`get_param`.  This will return a suitably decoded Unicode string when the "
"value is a tuple, or the original string unquoted if it isn't.  For example::"
msgstr ""
"この関数を使うアプリケーションが、パラメータが :rfc:`2231` 形式でエンコードさ"
"れているかどうかを気にしないのであれば、 :func:`email.utils."
"collapse_rfc2231_value` に :meth:`get_param` の返り値を渡して呼び出すことで、"
"このパラメータをひとつにまとめることができます。この値がタプルならばこの関数"
"は適切にデコードされた Unicode 文字列を返し、そうでない場合は unquote された"
"元の文字列を返します。たとえば::"

#: ../../library/email.compat32-message.rst:521
msgid ""
"In any case, the parameter value (either the returned string, or the "
"``VALUE`` item in the 3-tuple) is always unquoted, unless *unquote* is set "
"to ``False``."
msgstr ""
"いずれの場合もパラメータの値は (文字列であれ3要素タプルの ``VALUE`` 項目であ"
"れ) つねに unquote されます。ただし、*unquote* が ``False`` に指定されている"
"場合は unquote されません。"

#: ../../library/email.compat32-message.rst:534
msgid ""
"Set a parameter in the :mailheader:`Content-Type` header.  If the parameter "
"already exists in the header, its value will be replaced with *value*.  If "
"the :mailheader:`Content-Type` header as not yet been defined for this "
"message, it will be set to :mimetype:`text/plain` and the new parameter "
"value will be appended as per :rfc:`2045`."
msgstr ""
":mailheader:`Content-Type` ヘッダ中のパラメータを設定します。指定されたパラ"
"メータがヘッダ中にすでに存在する場合、その値は *value* に置き換えられます。 :"
"mailheader:`Content-Type` ヘッダがまだこのメッセージ中に存在していない場"
"合、 :rfc:`2045` にしたがいこの値には :mimetype:`text/plain` が設定され、新し"
"いパラメータ値が末尾に追加されます。"

#: ../../library/email.compat32-message.rst:540
msgid ""
"Optional *header* specifies an alternative header to :mailheader:`Content-"
"Type`, and all parameters will be quoted as necessary unless optional "
"*requote* is ``False`` (the default is ``True``)."
msgstr ""
"オプション引数 *header* が与えられた場合、 :mailheader:`Content-Type` のかわ"
"りにそのヘッダが使用されます。オプション引数 *requote* が ``False`` でない限"
"り、この値は quote されます (デフォルトは ``True``)。"

#: ../../library/email.compat32-message.rst:544
msgid ""
"If optional *charset* is specified, the parameter will be encoded according "
"to :rfc:`2231`. Optional *language* specifies the RFC 2231 language, "
"defaulting to the empty string.  Both *charset* and *language* should be "
"strings."
msgstr ""
"オプション引数 *charset* が与えられると、そのパラメータは :rfc:`2231` に従っ"
"てエンコードされます。オプション引数 *language* は RFC 2231 の言語を指定しま"
"すが、デフォルトではこれは空文字列となります。 *charset* と *language* はどち"
"らも文字列である必要があります。"

#: ../../library/email.compat32-message.rst:549
msgid ""
"If *replace* is ``False`` (the default) the header is moved to the end of "
"the list of headers.  If *replace* is ``True``, the header will be updated "
"in place."
msgstr ""

#: ../../library/email.compat32-message.rst:553
msgid "``replace`` keyword was added."
msgstr "``replace`` キーワードが追加されました。"

#: ../../library/email.compat32-message.rst:558
msgid ""
"Remove the given parameter completely from the :mailheader:`Content-Type` "
"header.  The header will be re-written in place without the parameter or its "
"value.  All values will be quoted as necessary unless *requote* is ``False`` "
"(the default is ``True``).  Optional *header* specifies an alternative to :"
"mailheader:`Content-Type`."
msgstr ""
"指定されたパラメータを :mailheader:`Content-Type` ヘッダ中から完全にとりのぞ"
"きます。ヘッダはそのパラメータと値がない状態に書き換えられます。 *requote* "
"が ``False`` でない限り (デフォルトでは ``True`` です)、すべての値は必要に応"
"じて quote されます。オプション変数 *header* が与えられた場合、 :mailheader:"
"`Content-Type` のかわりにそのヘッダが使用されます。"

#: ../../library/email.compat32-message.rst:567
msgid ""
"Set the main type and subtype for the :mailheader:`Content-Type` header. "
"*type* must be a string in the form :mimetype:`maintype/subtype`, otherwise "
"a :exc:`ValueError` is raised."
msgstr ""
":mailheader:`Content-Type` ヘッダの maintype と subtype を設定します。 "
"*type* は :mimetype:`maintype/subtype` という形の文字列でなければなりません。"
"それ以外の場合は :exc:`ValueError` が発生します。"

#: ../../library/email.compat32-message.rst:571
msgid ""
"This method replaces the :mailheader:`Content-Type` header, keeping all the "
"parameters in place.  If *requote* is ``False``, this leaves the existing "
"header's quoting as is, otherwise the parameters will be quoted (the "
"default)."
msgstr ""
"このメソッドは :mailheader:`Content-Type` ヘッダを置き換えますが、すべてのパ"
"ラメータはそのままにします。 *requote* が ``False`` の場合、これはすでに存在"
"するヘッダを quote せず放置しますが、そうでない場合は自動的に quote します "
"(デフォルト動作)。"

#: ../../library/email.compat32-message.rst:576
msgid ""
"An alternative header can be specified in the *header* argument. When the :"
"mailheader:`Content-Type` header is set a :mailheader:`MIME-Version` header "
"is also added."
msgstr ""
"オプション変数 *header* が与えられた場合、 :mailheader:`Content-Type` のかわ"
"りにそのヘッダが使用されます。 :mailheader:`Content-Type` ヘッダが設定される"
"場合には、 :mailheader:`MIME-Version` ヘッダも同時に付加されます。"

#: ../../library/email.compat32-message.rst:580
msgid ""
"This is a legacy method.  On the :class:`~email.emailmessage.EmailMessage` "
"class its functionality is replaced by the ``make_`` and ``add_`` methods."
msgstr ""

#: ../../library/email.compat32-message.rst:587
msgid ""
"Return the value of the ``filename`` parameter of the :mailheader:`Content-"
"Disposition` header of the message.  If the header does not have a "
"``filename`` parameter, this method falls back to looking for the ``name`` "
"parameter on the :mailheader:`Content-Type` header.  If neither is found, or "
"the header is missing, then *failobj* is returned. The returned string will "
"always be unquoted as per :func:`email.utils.unquote`."
msgstr ""
"そのメッセージ中の :mailheader:`Content-Disposition` ヘッダにある、 "
"``filename`` パラメータの値を返します。目的のヘッダに ``filename`` パラメータ"
"がない場合には :mailheader:`Content-Type` ヘッダにある ``name`` パラメータを"
"探します。それも無い場合またはヘッダが無い場合には *failobj* が返されます。返"
"される文字列はつねに :func:`email.utils.unquote` によって unquote されます。"

#: ../../library/email.compat32-message.rst:598
msgid ""
"Return the value of the ``boundary`` parameter of the :mailheader:`Content-"
"Type` header of the message, or *failobj* if either the header is missing, "
"or has no ``boundary`` parameter.  The returned string will always be "
"unquoted as per :func:`email.utils.unquote`."
msgstr ""
"そのメッセージ中の :mailheader:`Content-Type` ヘッダにある、 ``boundary`` パ"
"ラメータの値を返します。目的のヘッダが欠けていたり、 ``boundary`` パラメータ"
"がない場合には *failobj* が返されます。返される文字列はつねに :func:`email."
"utils.unquote` によって unquote されます。"

#: ../../library/email.compat32-message.rst:606
msgid ""
"Set the ``boundary`` parameter of the :mailheader:`Content-Type` header to "
"*boundary*.  :meth:`set_boundary` will always quote *boundary* if "
"necessary.  A :exc:`~email.errors.HeaderParseError` is raised if the message "
"object has no :mailheader:`Content-Type` header."
msgstr ""
"メッセージ中の :mailheader:`Content-Type` ヘッダにある、 ``boundary`` パラ"
"メータに値を設定します。 :meth:`set_boundary` は必要に応じて *boundary* を "
"quote します。そのメッセージが :mailheader:`Content-Type` ヘッダを含んでいな"
"い場合、 :exc:`~email.errors.HeaderParseError` が発生します。"

#: ../../library/email.compat32-message.rst:611
msgid ""
"Note that using this method is subtly different than deleting the old :"
"mailheader:`Content-Type` header and adding a new one with the new boundary "
"via :meth:`add_header`, because :meth:`set_boundary` preserves the order of "
"the :mailheader:`Content-Type` header in the list of headers. However, it "
"does *not* preserve any continuation lines which may have been present in "
"the original :mailheader:`Content-Type` header."
msgstr ""
"注意: このメソッドを使うのは、古い :mailheader:`Content-Type` ヘッダを削除し"
"て新しい boundary をもったヘッダを :meth:`add_header` で足すのとは少し違いま"
"す。 :meth:`set_boundary` は一連のヘッダ中での :mailheader:`Content-Type` "
"ヘッダの位置を保つからです。しかし、これは元の :mailheader:`Content-Type` "
"ヘッダ中に存在していた連続する行の順番までは *保ちません* 。"

#: ../../library/email.compat32-message.rst:621
msgid ""
"Return the ``charset`` parameter of the :mailheader:`Content-Type` header, "
"coerced to lower case.  If there is no :mailheader:`Content-Type` header, or "
"if that header has no ``charset`` parameter, *failobj* is returned."
msgstr ""
"そのメッセージ中の :mailheader:`Content-Type` ヘッダにある、 ``charset`` パラ"
"メータの値を返します。値はすべて小文字に変換されます。メッセージ中に :"
"mailheader:`Content-Type` がなかったり、このヘッダ中に ``charaset`` パラメー"
"タがない場合には *failobj* が返されます。"

#: ../../library/email.compat32-message.rst:625
msgid ""
"Note that this method differs from :meth:`get_charset` which returns the :"
"class:`~email.charset.Charset` instance for the default encoding of the "
"message body."
msgstr ""
"注意: これは :meth:`get_charset` メソッドとは異なります。こちらのほうは文字列"
"のかわりに、そのメッセージボディのデフォルトエンコーディングの :class:"
"`~email.charset.Charset` インスタンスを返します。"

#: ../../library/email.compat32-message.rst:631
msgid ""
"Return a list containing the character set names in the message.  If the "
"message is a :mimetype:`multipart`, then the list will contain one element "
"for each subpart in the payload, otherwise, it will be a list of length 1."
msgstr ""
"メッセージ中に含まれる文字セットの名前をすべてリストにして返します。そのメッ"
"セージが :mimetype:`multipart` である場合、返されるリストの各要素がそれぞれ"
"の subpart のペイロードに対応します。それ以外の場合、これは長さ 1 のリストを"
"返します。"

#: ../../library/email.compat32-message.rst:635
msgid ""
"Each item in the list will be a string which is the value of the ``charset`` "
"parameter in the :mailheader:`Content-Type` header for the represented "
"subpart.  However, if the subpart has no :mailheader:`Content-Type` header, "
"no ``charset`` parameter, or is not of the :mimetype:`text` main MIME type, "
"then that item in the returned list will be *failobj*."
msgstr ""
"リスト中の各要素は文字列であり、これは対応する subpart 中のそれぞれの :"
"mailheader:`Content-Type` ヘッダにある ``charset`` の値です。しかし、その "
"subpart が :mailheader:`Content-Type` をもってないか、 ``charset`` がないか、"
"あるいは MIME maintype が :mimetype:`text` でないいずれかの場合には、リストの"
"要素として *failobj* が返されます。"

#: ../../library/email.compat32-message.rst:645
msgid ""
"Return the lowercased value (without parameters) of the message's :"
"mailheader:`Content-Disposition` header if it has one, or ``None``.  The "
"possible values for this method are *inline*, *attachment* or ``None`` if "
"the message follows :rfc:`2183`."
msgstr ""

#: ../../library/email.compat32-message.rst:654
msgid ""
"The :meth:`walk` method is an all-purpose generator which can be used to "
"iterate over all the parts and subparts of a message object tree, in depth-"
"first traversal order.  You will typically use :meth:`walk` as the iterator "
"in a ``for`` loop; each iteration returns the next subpart."
msgstr ""
":meth:`walk` メソッドは多目的のジェネレータで、これはあるメッセージオブジェク"
"トツリー中のすべての part および subpart をわたり歩くのに使えます。順序は深さ"
"優先です。おそらく典型的な用法は、 :meth:`walk` を ``for`` ループ中でのイテ"
"レータとして使うことでしょう。ループを一回まわるごとに、次の subpart が返され"
"るのです。"

#: ../../library/email.compat32-message.rst:659
msgid ""
"Here's an example that prints the MIME type of every part of a multipart "
"message structure:"
msgstr ""
"以下の例は、 multipart メッセージのすべての part において、その MIME タイプを"
"表示していくものです。 :"

#: ../../library/email.compat32-message.rst:685
msgid ""
"``walk`` iterates over the subparts of any part where :meth:`is_multipart` "
"returns ``True``, even though ``msg.get_content_maintype() == 'multipart'`` "
"may return ``False``.  We can see this in our example by making use of the "
"``_structure`` debug helper function:"
msgstr ""

#: ../../library/email.compat32-message.rst:712
msgid ""
"Here the ``message`` parts are not ``multiparts``, but they do contain "
"subparts. ``is_multipart()`` returns ``True`` and ``walk`` descends into the "
"subparts."
msgstr ""

#: ../../library/email.compat32-message.rst:717
msgid ""
":class:`Message` objects can also optionally contain two instance "
"attributes, which can be used when generating the plain text of a MIME "
"message."
msgstr ""
":class:`Message` オブジェクトはオプションとして 2つのインスタンス属性をとるこ"
"とができます。これはある MIME メッセージからプレーンテキストを生成するのに使"
"うことができます。"

#: ../../library/email.compat32-message.rst:723
msgid ""
"The format of a MIME document allows for some text between the blank line "
"following the headers, and the first multipart boundary string. Normally, "
"this text is never visible in a MIME-aware mail reader because it falls "
"outside the standard MIME armor.  However, when viewing the raw text of the "
"message, or when viewing the message in a non-MIME aware reader, this text "
"can become visible."
msgstr ""
"MIME ドキュメントの形式では、ヘッダ直後にくる空行と最初の multipart 境界をあ"
"らわす文字列のあいだにいくらかのテキスト (訳注: preamble, 序文) を埋めこむこ"
"とを許しています。このテキストは標準的な MIME の範疇からはみ出しているので、"
"MIME 形式を認識するメールソフトからこれらは通常まったく見えません。しかしメッ"
"セージのテキストを生で見る場合、あるいはメッセージを MIME 対応していないメー"
"ルソフトで見る場合、このテキストは目に見えることになります。"

#: ../../library/email.compat32-message.rst:730
msgid ""
"The *preamble* attribute contains this leading extra-armor text for MIME "
"documents.  When the :class:`~email.parser.Parser` discovers some text after "
"the headers but before the first boundary string, it assigns this text to "
"the message's *preamble* attribute.  When the :class:`~email.generator."
"Generator` is writing out the plain text representation of a MIME message, "
"and it finds the message has a *preamble* attribute, it will write this text "
"in the area between the headers and the first boundary.  See :mod:`email."
"parser` and :mod:`email.generator` for details."
msgstr ""
"*preamble* 属性は MIME ドキュメントに加えるこの最初の MIME 範囲外テキストを含"
"んでいます。 :class:`~email.parser.Parser` があるテキストをヘッダ以降に発見し"
"たが、それはまだ最初の MIME 境界文字列が現れる前だった場合、パーザはそのテキ"
"ストをメッセージの *preamble* 属性に格納します。 :class:`~email.generator."
"Generator` がある MIME メッセージからプレーンテキスト形式を生成するときメッ"
"セージが *preamble* 属性を持つことが発見されれば、これはそのテキストをヘッダ"
"と最初の MIME 境界の間に挿入します。詳細は :mod:`email.parser` および :mod:"
"`email.generator` を参照してください。"

#: ../../library/email.compat32-message.rst:740
msgid ""
"Note that if the message object has no preamble, the *preamble* attribute "
"will be ``None``."
msgstr ""
"注意: そのメッセージに preamble がない場合、*preamble* 属性には ``None`` が格"
"納されます。"

#: ../../library/email.compat32-message.rst:746
msgid ""
"The *epilogue* attribute acts the same way as the *preamble* attribute, "
"except that it contains text that appears between the last boundary and the "
"end of the message."
msgstr ""
"*epilogue* 属性はメッセージの最後の MIME 境界文字列からメッセージ末尾までのテ"
"キストを含むもので、それ以外は *preamble* 属性と同じです。"

#: ../../library/email.compat32-message.rst:750
msgid ""
"You do not need to set the epilogue to the empty string in order for the :"
"class:`~email.generator.Generator` to print a newline at the end of the file."
msgstr ""
":class:`~email.generator.Generator` でファイル終端に改行を出力するため、 "
"epilogue に空文字列を設定する必要はなくなりました。"

#: ../../library/email.compat32-message.rst:757
msgid ""
"The *defects* attribute contains a list of all the problems found when "
"parsing this message.  See :mod:`email.errors` for a detailed description of "
"the possible parsing defects."
msgstr ""
"*defects* 属性はメッセージを解析する途中で検出されたすべての問題点 (defect、"
"障害) のリストを保持しています。解析中に発見されうる障害についてのより詳細な"
"説明は :mod:`email.errors` を参照してください。"
