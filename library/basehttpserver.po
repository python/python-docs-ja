# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/basehttpserver.rst:2
msgid ":mod:`BaseHTTPServer` --- Basic HTTP server"
msgstr ":mod:`BaseHTTPServer` --- 基本的な機能を持つ HTTP サーバ"

#: ../../library/basehttpserver.rst:8
msgid ""
"The :mod:`BaseHTTPServer` module has been merged into :mod:`http.server` in "
"Python 3.  The :term:`2to3` tool will automatically adapt imports when "
"converting your sources to Python 3."
msgstr ""
":mod:`BaseHTTPServer` モジュールは、Python 3 では :mod:`http.server` モジュー"
"ルに統合されました。 :term:`2to3` ツールが自動的にソースコード内の import を"
"修正します。"

#: ../../library/basehttpserver.rst:21
msgid "**Source code:** :source:`Lib/BaseHTTPServer.py`"
msgstr "**ソースコード:** :source:`Lib/BaseHTTPServer.py`"

#: ../../library/basehttpserver.rst:25
msgid ""
"This module defines two classes for implementing HTTP servers (Web servers). "
"Usually, this module isn't used directly, but is used as a basis for "
"building functioning Web servers. See the :mod:`SimpleHTTPServer` and :mod:"
"`CGIHTTPServer` modules."
msgstr ""
"このモジュールでは、 HTTP サーバ (Web サーバ) を実装するための二つののクラス"
"を定義しています。通常、このモジュールが直接使用されることはなく、特定の機能"
"を持つ Web サーバを構築するために使われます。 :mod:`SimpleHTTPServer` およ"
"び :mod:`CGIHTTPServer` モジュールを参照してください。"

#: ../../library/basehttpserver.rst:30
msgid ""
"The first class, :class:`HTTPServer`, is a :class:`SocketServer.TCPServer` "
"subclass, and therefore implements the :class:`SocketServer.BaseServer` "
"interface.  It creates and listens at the HTTP socket, dispatching the "
"requests to a handler.  Code to create and run the server looks like this::"
msgstr ""
"最初のクラス :class:`HTTPServer` は :class:`SocketServer.TCPServer` のサブク"
"ラスで、従って :class:`SocketServer.BaseServer` インタフェースを実装していま"
"す。 :class:`HTTPServer` は HTTP ソケットを生成してリクエスト待ち (listen) を"
"行い、リクエストをハンドラに渡します。サーバを作成して動作させるためのコード"
"は以下のようになります::"

#: ../../library/basehttpserver.rst:44
msgid ""
"This class builds on the :class:`TCPServer` class by storing the server "
"address as instance variables named :attr:`server_name` and :attr:"
"`server_port`. The server is accessible by the handler, typically through "
"the handler's :attr:`server` instance variable."
msgstr ""
"このクラスは :class:`TCPServer` 型のクラスの上に構築されており、サーバのアド"
"レスをインスタンス変数 :attr:`server_name` および :attr:`server_port` に記憶"
"します。サーバはハンドラからアクセス可能で、通常 :attr:`server` インスタンス"
"変数でアクセスします。"

#: ../../library/basehttpserver.rst:52
msgid ""
"This class is used to handle the HTTP requests that arrive at the server. By "
"itself, it cannot respond to any actual HTTP requests; it must be subclassed "
"to handle each request method (e.g. GET or POST). :class:"
"`BaseHTTPRequestHandler` provides a number of class and instance variables, "
"and methods for use by subclasses."
msgstr ""
"このクラスはサーバに到着したリクエストを処理します。このメソッド自体では、実"
"際のリクエストに応答することはできません; (GET や POST のような) 各リクエスト"
"メソッドを処理するためにはサブクラス化しなければなりません。 :class:"
"`BaseHTTPRequestHandler` では、サブクラスで使うためのクラスやインスタンス変"
"数、メソッド群を数多く提供しています。"

#: ../../library/basehttpserver.rst:58
msgid ""
"The handler will parse the request and the headers, then call a method "
"specific to the request type. The method name is constructed from the "
"request. For example, for the request method ``SPAM``, the :meth:`do_SPAM` "
"method will be called with no arguments. All of the relevant information is "
"stored in instance variables of the handler.  Subclasses should not need to "
"override or extend the :meth:`__init__` method."
msgstr ""
"このハンドラはリクエストを解釈し、次いでリクエスト形式ごとに固有のメソッドを"
"呼び出します。メソッド名はリクエストの名称から構成されます。例えば、リクエス"
"トメソッド ``SPAM`` に対しては、 :meth:`do_SPAM` メソッドが引数なしで呼び出さ"
"れます。リクエストに関連する情報は全て、ハンドラのインスタンス変数に記憶され"
"ています。サブクラスでは :meth:`__init__` メソッドを上書きしたり拡張したりす"
"る必要はありません。"

#: ../../library/basehttpserver.rst:65
msgid ":class:`BaseHTTPRequestHandler` has the following instance variables:"
msgstr ""
":class:`BaseHTTPRequestHandler` は以下のインスタンス変数を持っています:"

#: ../../library/basehttpserver.rst:70
msgid ""
"Contains a tuple of the form ``(host, port)`` referring to the client's "
"address."
msgstr ""
"HTTP クライアントのアドレスを参照している、``(host, port)`` の形式をとるタプ"
"ルが入っています。"

#: ../../library/basehttpserver.rst:76
msgid "Contains the server instance."
msgstr "server インスタンスが入っています。"

#: ../../library/basehttpserver.rst:81
msgid "Contains the command (request type). For example, ``'GET'``."
msgstr "HTTP 命令 (リクエスト形式) が入っています。例えば ``'GET'`` です。"

#: ../../library/basehttpserver.rst:86
msgid "Contains the request path."
msgstr "リクエストされたパスが入っています。"

#: ../../library/basehttpserver.rst:91
msgid ""
"Contains the version string from the request. For example, ``'HTTP/1.0'``."
msgstr ""
"リクエストのバージョン文字列が入っています。例えば ``'HTTP/1.0'`` です。"

#: ../../library/basehttpserver.rst:96
msgid ""
"Holds an instance of the class specified by the :attr:`MessageClass` class "
"variable. This instance parses and manages the headers in the HTTP request."
msgstr ""
":attr:`MessageClass` クラス変数で指定されたクラスのインスタンスを保持していま"
"す。このインスタンスは HTTP リクエストのヘッダを解釈し、管理しています。"

#: ../../library/basehttpserver.rst:103
msgid ""
"Contains an input stream, positioned at the start of the optional input data."
msgstr ""
"入力ストリームが入っており、そのファイルポインタはオプション入力データ部の先"
"頭を指しています。"

#: ../../library/basehttpserver.rst:109
msgid ""
"Contains the output stream for writing a response back to the client. Proper "
"adherence to the HTTP protocol must be used when writing to this stream."
msgstr ""
"クライアントに返送する応答を書き込むための出力ストリームが入っています。この"
"ストリームに書き込む際には、HTTP プロトコルに従った形式をとらなければなりませ"
"ん。"

#: ../../library/basehttpserver.rst:114
msgid ":class:`BaseHTTPRequestHandler` has the following class variables:"
msgstr ":class:`BaseHTTPRequestHandler` は以下のクラス変数を持っています:"

#: ../../library/basehttpserver.rst:119
msgid ""
"Specifies the server software version.  You may want to override this. The "
"format is multiple whitespace-separated strings, where each string is of the "
"form name[/version]. For example, ``'BaseHTTP/0.2'``."
msgstr ""
"サーバのソフトウェアバージョンを指定します。この値は上書きする必要が生じるか"
"もしれません。書式は複数の文字列を空白で分割したもので、各文字列はソフトウェ"
"ア名[/バージョン] の形式をとります。例えば、``'BaseHTTP/0.2'`` です。"

#: ../../library/basehttpserver.rst:126
msgid ""
"Contains the Python system version, in a form usable by the :attr:"
"`version_string` method and the :attr:`server_version` class variable. For "
"example, ``'Python/1.4'``."
msgstr ""
"Python 処理系のバージョンが, :attr:`version_string` メソッドや :attr:"
"`server_version` クラス変数で利用可能な形式で入っています。例えば "
"``'Python/1.4'`` です。"

#: ../../library/basehttpserver.rst:133
msgid ""
"Specifies a format string for building an error response to the client. It "
"uses parenthesized, keyed format specifiers, so the format operand must be a "
"dictionary. The *code* key should be an integer, specifying the numeric HTTP "
"error code value. *message* should be a string containing a (detailed) error "
"message of what occurred, and *explain* should be an explanation of the "
"error code number. Default *message* and *explain* values can found in the "
"*responses* class variable."
msgstr ""
"クライアントに返すエラー応答を構築するための書式化文字列を指定します。この文"
"字列は丸括弧で囲ったキー文字列で指定する形式を使うので、書式化の対象となる値"
"は辞書でなければなりません。キー *code* は整数で、HTTP エラーコードを特定する"
"数値です。 *message* は文字列で、何が発生したかを表す (詳細な) エラーメッセー"
"ジが入ります。 *explain* はエラーコード番号の説明です。 *message* および "
"*explain* の標準の値は *response* クラス変数でみつけることができます。"

#: ../../library/basehttpserver.rst:144
msgid ""
"Specifies the Content-Type HTTP header of error responses sent to the "
"client.  The default value is ``'text/html'``."
msgstr ""
"エラーレスポンスをクライアントに送信する時に使う Content-Type HTTP ヘッダを指"
"定します。デフォルトでは ``'text/html'`` です。"

#: ../../library/basehttpserver.rst:147
msgid "Previously, the content type was always ``'text/html'``."
msgstr "以前は、 Content-Type は常に ``'text/html'`` でした。"

#: ../../library/basehttpserver.rst:153
msgid ""
"This specifies the HTTP protocol version used in responses.  If set to "
"``'HTTP/1.1'``, the server will permit HTTP persistent connections; however, "
"your server *must* then include an accurate ``Content-Length`` header "
"(using :meth:`send_header`) in all of its responses to clients. For "
"backwards compatibility, the setting defaults to ``'HTTP/1.0'``."
msgstr ""
"この値には応答に使われる HTTP プロトコルのバージョンを指定します。 "
"``'HTTP/1.1'`` に設定されると、サーバは持続的 HTTP 接続を許可します; しかしそ"
"の場合、サーバは全てのクライアントに対する応答に、正確な値を持つ ``Content-"
"Length`` ヘッダを (:meth:`send_header` を使って) 含め *なければなりません* 。"
"以前のバージョンとの互換性を保つため、標準の設定値は ``'HTTP/1.0'`` です。"

#: ../../library/basehttpserver.rst:164
msgid ""
"Specifies a :class:`rfc822.Message`\\ -like class to parse HTTP headers. "
"Typically, this is not overridden, and it defaults to :class:`mimetools."
"Message`."
msgstr ""
"HTTP ヘッダを解釈するための :class:`rfc822.Message` 類似のクラスを指定しま"
"す。通常この値が上書きされることはなく、標準の値 :class:`mimetools.Message` "
"になっています。"

#: ../../library/basehttpserver.rst:171
msgid ""
"This variable contains a mapping of error code integers to two-element "
"tuples containing a short and long message. For example, ``{code: "
"(shortmessage, longmessage)}``. The *shortmessage* is usually used as the "
"*message* key in an error response, and *longmessage* as the *explain* key "
"(see the :attr:`error_message_format` class variable)."
msgstr ""
"この変数はエラーコードを表す整数を二つの要素をもつタプルに対応付けます。タプ"
"ルには短いメッセージと長いメッセージが入っています。例えば、 ``{code: "
"(shortmessage, longmessage)}`` といったようになります。 *shortmessage* は通"
"常、エラー応答における *message* キーの値として使われ、 *longmessage* は "
"*explain* キーの値として使われます (:attr:`error_message_format` クラス変数を"
"参照してください) 。"

#: ../../library/basehttpserver.rst:178
msgid "A :class:`BaseHTTPRequestHandler` instance has the following methods:"
msgstr ""
":class:`BaseHTTPRequestHandler` インスタンスは以下のメソッドを持っています:"

#: ../../library/basehttpserver.rst:183
msgid ""
"Calls :meth:`handle_one_request` once (or, if persistent connections are "
"enabled, multiple times) to handle incoming HTTP requests. You should never "
"need to override it; instead, implement appropriate :meth:`do_\\*` methods."
msgstr ""
":meth:`handle_one_request` を一度だけ (持続的接続が有効になっている場合には複"
"数回) 呼び出して、HTTPリクエストを処理します。このメソッドを上書きする必要は"
"まったくありません; そうする代わりに適切な :meth:`do_\\*` を実装してくださ"
"い。"

#: ../../library/basehttpserver.rst:191
msgid ""
"This method will parse and dispatch the request to the appropriate :meth:"
"`do_\\*` method.  You should never need to override it."
msgstr ""
"このメソッドはリクエストを解釈し、適切な :meth:`do_\\*` メソッドに転送しま"
"す。このメソッドを上書きする必要はまったくありません。"

#: ../../library/basehttpserver.rst:197
msgid ""
"Sends and logs a complete error reply to the client. The numeric *code* "
"specifies the HTTP error code, with *message* as optional, more specific "
"text. A complete set of headers is sent, followed by text composed using "
"the :attr:`error_message_format` class variable. The body will be empty if "
"the method is HEAD or the response code is one of the following: ``1xx``, "
"``204 No Content``, ``205 Reset Content``, ``304 Not Modified``."
msgstr ""
"完全なエラー応答をクライアントに送信し、ログ記録します。\n"
"*code* は数値型で、HTTP エラーコードを指定します。\n"
"*message* はオプションで、より詳細なメッセージテキストです。\n"
"完全なヘッダのセットが送信された後、 :attr:`error_message_format` クラス変数"
"を使って組み立てられたテキストが送られます。\n"
"メソッドが HEAD もしくはレスポンスコードが次のどれかの場合はボディは空です: "
"``1xx``, ``204 No Content``, ``205 Reset Content``, ``304 Not Modified`` 。"

#: ../../library/basehttpserver.rst:208
msgid ""
"Sends a response header and logs the accepted request. The HTTP response "
"line is sent, followed by *Server* and *Date* headers. The values for these "
"two headers are picked up from the :meth:`version_string` and :meth:"
"`date_time_string` methods, respectively."
msgstr ""
"応答ヘッダを送信し、受理したリクエストをログ記録します。HTTP 応答行が送られた"
"後、 *Server* および *Date* ヘッダが送られます。これら二つのヘッダはそれぞ"
"れ :meth:`version_string`  および :meth:`date_time_string` メソッドで取り出し"
"ます。"

#: ../../library/basehttpserver.rst:216
msgid ""
"Writes a specific HTTP header to the output stream. *keyword* should specify "
"the header keyword, with *value* specifying its value."
msgstr ""
"出力ストリームに特定の HTTP ヘッダを書き込みます。 *keyword* はヘッダのキー"
"ワードを指定し、 *value* にはその値を指定します。"

#: ../../library/basehttpserver.rst:222
msgid ""
"Sends a blank line, indicating the end of the HTTP headers in the response."
msgstr "応答中の HTTP ヘッダの終了を示す空行を送信します。"

#: ../../library/basehttpserver.rst:228
msgid ""
"Logs an accepted (successful) request. *code* should specify the numeric "
"HTTP code associated with the response. If a size of the response is "
"available, then it should be passed as the *size* parameter."
msgstr ""
"受理された (成功した) リクエストをログに記録します。*code* にはこの応答に関連"
"付けられた HTTP コード番号を指定します。応答メッセージの大きさを知ることがで"
"きる場合、*size* パラメタに渡すとよいでしょう。"

#: ../../library/basehttpserver.rst:235
msgid ""
"Logs an error when a request cannot be fulfilled. By default, it passes the "
"message to :meth:`log_message`, so it takes the same arguments (*format* and "
"additional values)."
msgstr ""
"リクエストを遂行できなかった際に、エラーをログに記録します。標準では、メッ"
"セージを :meth:`log_message` に渡します。従って同じ引数 (*format* と追加の"
"値) を取ります。"

#: ../../library/basehttpserver.rst:242
msgid ""
"Logs an arbitrary message to ``sys.stderr``. This is typically overridden to "
"create custom error logging mechanisms. The *format* argument is a standard "
"printf-style format string, where the additional arguments to :meth:"
"`log_message` are applied as inputs to the formatting. The client ip address "
"and current date and time are prefixed to every message logged."
msgstr ""
"任意のメッセージを ``sys.stderr`` にログ記録します。このメソッドは通常、カス"
"タムのエラーログ記録機構を作成するために上書きされます。 *format* 引数は標準"
"の printf 形式の書式化文字列で、 :meth:`log_message` に渡された追加の引数は書"
"式化の入力として適用されます。ログ記録される全てのメッセージには、クライアン"
"トの IP アドレスおよび現在の日付、時刻が先頭に付けられます。"

#: ../../library/basehttpserver.rst:251
msgid ""
"Returns the server software's version string. This is a combination of the :"
"attr:`server_version` and :attr:`sys_version` class variables."
msgstr ""
"サーバソフトウェアのバージョン文字列を返します。この文字列はクラス変数 :attr:"
"`server_version` および :attr:`sys_version` を組み合わせたものです。"

#: ../../library/basehttpserver.rst:257
msgid ""
"Returns the date and time given by *timestamp* (which must be in the format "
"returned by :func:`time.time`), formatted for a message header. If "
"*timestamp* is omitted, it uses the current date and time."
msgstr ""
"メッセージヘッダ向けに書式化された、 *timestamp* (:func:`time.time` のフォー"
"マットである必要があります)で与えられた日時を返します。もし *timestamp* が省"
"略された場合には、現在の日時が使われます。"

#: ../../library/basehttpserver.rst:261
msgid "The result looks like ``'Sun, 06 Nov 1994 08:49:37 GMT'``."
msgstr "出力は ``'Sun, 06 Nov 1994 08:49:37 GMT'`` のようになります。"

#: ../../library/basehttpserver.rst:263
msgid "The *timestamp* parameter."
msgstr "*timestamp* パラメータ."

#: ../../library/basehttpserver.rst:269
msgid "Returns the current date and time, formatted for logging."
msgstr "ログ記録向けに書式化された、現在の日付および時刻を返します。"

#: ../../library/basehttpserver.rst:274
msgid ""
"Returns the client address, formatted for logging. A name lookup is "
"performed on the client's IP address."
msgstr ""
"ログ記録向けに書式化された、クライアントのアドレスを返します。このときクライ"
"アントの IP アドレスに対する名前解決を行います。"

#: ../../library/basehttpserver.rst:279
msgid "More examples"
msgstr "他の例"

#: ../../library/basehttpserver.rst:281
msgid ""
"To create a server that doesn't run forever, but until some condition is "
"fulfilled::"
msgstr ""
"永遠ではなく、何かの条件が満たされるまでの間実行するサーバーを作るには::"

#: ../../library/basehttpserver.rst:300
msgid "Module :mod:`CGIHTTPServer`"
msgstr ":mod:`CGIHTTPServer` モジュール"

#: ../../library/basehttpserver.rst:300
msgid "Extended request handler that supports CGI scripts."
msgstr "CGI スクリプトをサポートするように拡張されたリクエストハンドラ。"

#: ../../library/basehttpserver.rst:303
msgid "Module :mod:`SimpleHTTPServer`"
msgstr ":mod:`SimpleHTTPServer` モジュール"

#: ../../library/basehttpserver.rst:303
msgid ""
"Basic request handler that limits response to files actually under the "
"document root."
msgstr ""
"ドキュメントルートの下にあるファイルに対する要求への応答のみに制限した基本リ"
"クエストハンドラ。"
