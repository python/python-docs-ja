# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# yuji takesue <taketakeyyy@gmail.com>, 2018
# tomo, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:25+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.header.rst:2
msgid ":mod:`email.header`: Internationalized headers"
msgstr ":mod:`email.header`: 国際化されたヘッダ"

#: ../../library/email.header.rst:7
msgid "**Source code:** :source:`Lib/email/header.py`"
msgstr "**ソースコード:** :source:`Lib/email/header.py`"

#: ../../library/email.header.rst:11
msgid ""
"This module is part of the legacy (``Compat32``) email API.  In the current "
"API encoding and decoding of headers is handled transparently by the "
"dictionary-like API of the :class:`~email.message.EmailMessage` class.  In "
"addition to uses in legacy code, this module can be useful in applications "
"that need to completely control the character sets used when encoding "
"headers."
msgstr ""
"このモジュールはレガシー(``Compat32``)な電子メールAPIの一部です。現在のAPIで"
"はヘッダのエンコードとデコードは:class:`~email.message.EmailMessage`クラスの"
"辞書的なAPIによって透過的に処理されます。レガシーコードでの使用に加えて、この"
"モジュールは、ヘッダーをエンコードする際に使用される文字セットを完全に制御す"
"る必要があるアプリケーションで役立ちます"

#: ../../library/email.header.rst:17
msgid ""
"The remaining text in this section is the original documentation of the "
"module."
msgstr "この節の以降のテキストはモジュールの元々のドキュメントです。"

#: ../../library/email.header.rst:19
msgid ""
":rfc:`2822` is the base standard that describes the format of email "
"messages. It derives from the older :rfc:`822` standard which came into "
"widespread use at a time when most email was composed of ASCII characters "
"only.  :rfc:`2822` is a specification written assuming email contains only 7-"
"bit ASCII characters."
msgstr ""
":rfc:`2822` は電子メールメッセージの形式を規定する基本規格です。これはほとん"
"どの電子メールが ASCII 文字のみで構成されていたころ普及した :rfc:`822` 標準か"
"ら発展したものです。 :rfc:`2822` は電子メールがすべて 7-bit ASCII 文字のみか"
"ら構成されていると仮定して作られた仕様です。"

#: ../../library/email.header.rst:24
msgid ""
"Of course, as email has been deployed worldwide, it has become "
"internationalized, such that language specific character sets can now be "
"used in email messages.  The base standard still requires email messages to "
"be transferred using only 7-bit ASCII characters, so a slew of RFCs have "
"been written describing how to encode email containing non-ASCII characters "
"into :rfc:`2822`\\ -compliant format. These RFCs include :rfc:`2045`, :rfc:"
"`2046`, :rfc:`2047`, and :rfc:`2231`. The :mod:`email` package supports "
"these standards in its :mod:`email.header` and :mod:`email.charset` modules."
msgstr ""
"もちろん、電子メールが世界的に普及するにつれ、この仕様は国際化されてきまし"
"た。今では電子メールに言語依存の文字集合を使うことができます。基本規格では、"
"まだ電子メールメッセージを 7-bit ASCII 文字のみを使って転送するよう要求してい"
"ますので、多くの RFC でどうやって非ASCII の電子メールを :rfc:`2822` 準拠な形"
"式にエンコードするかが記述されています。これらの RFC は以下のものを含みま"
"す: :rfc:`2045` 、 :rfc:`2046` 、 :rfc:`2047` 、および :rfc:`2231` 。 :mod:"
"`email` パッケージは、 :mod:`email.header` および :mod:`email.charset` モ"
"ジュールでこれらの規格をサポートしています。"

#: ../../library/email.header.rst:33
msgid ""
"If you want to include non-ASCII characters in your email headers, say in "
"the :mailheader:`Subject` or :mailheader:`To` fields, you should use the :"
"class:`Header` class and assign the field in the :class:`~email.message."
"Message` object to an instance of :class:`Header` instead of using a string "
"for the header value.  Import the :class:`Header` class from the :mod:`email."
"header` module. For example::"
msgstr ""
"ご自分の電子メールヘッダ、たとえば :mailheader:`Subject` や :mailheader:`To` "
"などのフィールドに非ASCII文字を入れたい場合、 :class:`Header` クラスを使う必"
"要があります。 :class:`~email.message.Message` オブジェクトの該当フィールドに"
"文字列ではなく、 :class:`Header` インスタンスを使うのです。 :class:`Header` "
"クラスは :mod:`email.header` モジュールからインポートしてください。たとえば::"

#: ../../library/email.header.rst:50
msgid ""
"Notice here how we wanted the :mailheader:`Subject` field to contain a non-"
"ASCII character?  We did this by creating a :class:`Header` instance and "
"passing in the character set that the byte string was encoded in.  When the "
"subsequent :class:`~email.message.Message` instance was flattened, the :"
"mailheader:`Subject` field was properly :rfc:`2047` encoded.  MIME-aware "
"mail readers would show this header using the embedded ISO-8859-1 character."
msgstr ""
":mailheader:`Subject` フィールドに非ASCII文字を含めていることに注目してくださ"
"い。ここでは、含めたいバイト列がエンコードされている文字集合を指定して :"
"class:`Header` インスタンスを作成することによって実現しています。のちにこの :"
"class:`~email.message.Message` インスタンスからフラットなテキストを生成する際"
"に、この :mailheader:`Subject` フィールドは :rfc:`2047` 準拠の適切な形式にエ"
"ンコードされます。MIME 機能のあるメーラなら、このヘッダに埋めこまれた "
"ISO-8859-1 文字を正しく表示するでしょう。"

#: ../../library/email.header.rst:57
msgid "Here is the :class:`Header` class description:"
msgstr "以下は :class:`Header` クラスの説明です:"

#: ../../library/email.header.rst:62
msgid ""
"Create a MIME-compliant header that can contain strings in different "
"character sets."
msgstr "別の文字集合の文字列を含む MIME 準拠なヘッダを作成します。"

#: ../../library/email.header.rst:65
msgid ""
"Optional *s* is the initial header value.  If ``None`` (the default), the "
"initial header value is not set.  You can later append to the header with :"
"meth:`append` method calls.  *s* may be an instance of :class:`bytes` or :"
"class:`str`, but see the :meth:`append` documentation for semantics."
msgstr ""
"オプション引数 *s* はヘッダの値の初期値です。これが ``None`` の場合 (デフォル"
"ト)、ヘッダの初期値は設定されません。この値はあとから :meth:`append` メソッド"
"を呼びだすことによって追加することができます。 *s* は :class:`bytes` または :"
"class:`str` のインスタンスにできます。このセマンティクスについては :meth:"
"`append` の項を参照してください。"

#: ../../library/email.header.rst:70
msgid ""
"Optional *charset* serves two purposes: it has the same meaning as the "
"*charset* argument to the :meth:`append` method.  It also sets the default "
"character set for all subsequent :meth:`append` calls that omit the "
"*charset* argument.  If *charset* is not provided in the constructor (the "
"default), the ``us-ascii`` character set is used both as *s*'s initial "
"charset and as the default for subsequent :meth:`append` calls."
msgstr ""
"オプション引数 *charset* には 2 つの目的があります。ひとつは :meth:`append` "
"メソッドにおける *charset* 引数と同じものです。もうひとつは、これ以降 "
"*charset* 引数を省略した :meth:`append` メソッド呼び出しすべてにおける、デ"
"フォルト文字集合を決定するものです。コンストラクタに *charset* が与えられない"
"場合 (デフォルト)、初期値の *s* および以後の :meth:`append` 呼び出しにおける"
"文字集合として ``us-ascii`` が使われます。"

#: ../../library/email.header.rst:77
msgid ""
"The maximum line length can be specified explicitly via *maxlinelen*.  For "
"splitting the first line to a shorter value (to account for the field header "
"which isn't included in *s*, e.g. :mailheader:`Subject`) pass in the name of "
"the field in *header_name*.  The default *maxlinelen* is 76, and the default "
"value for *header_name* is ``None``, meaning it is not taken into account "
"for the first line of a long, split header."
msgstr ""
"行の最大長は *maxlinelen* によって明示的に指定できます。最初の行を (:"
"mailheader:`Subject` などの *s* に含まれないフィールドヘッダの責任をとるた"
"め) 短く切りとる場合、 *header_name* にそのフィールド名を指定してください。 "
"*maxlinelen* のデフォルト値は 76 であり、 *header_name* のデフォルト値は "
"``None`` です。これはその最初の行を長い、切りとられたヘッダとして扱わないこと"
"を意味します。"

#: ../../library/email.header.rst:84
msgid ""
"Optional *continuation_ws* must be :rfc:`2822`\\ -compliant folding "
"whitespace, and is usually either a space or a hard tab character.  This "
"character will be prepended to continuation lines.  *continuation_ws* "
"defaults to a single space character."
msgstr ""
"オプション引数 *continuation_ws* は :rfc:`2822` 準拠の折り返し用余白文字で、"
"ふつうこれは空白か、ハードタブ文字 (hard tab) である必要があります。ここで指"
"定された文字は複数にわたる行の行頭に挿入されます。 *continuation_ws* のデフォ"
"ルト値は 1 つのスペース文字です。"

#: ../../library/email.header.rst:89
msgid ""
"Optional *errors* is passed straight through to the :meth:`append` method."
msgstr ""
"オプション引数 *errors* は、 :meth:`append` メソッドにそのまま渡されます。"

#: ../../library/email.header.rst:94
msgid "Append the string *s* to the MIME header."
msgstr "この MIME ヘッダに文字列 *s* を追加します。"

#: ../../library/email.header.rst:96
msgid ""
"Optional *charset*, if given, should be a :class:`~email.charset.Charset` "
"instance (see :mod:`email.charset`) or the name of a character set, which "
"will be converted to a :class:`~email.charset.Charset` instance.  A value of "
"``None`` (the default) means that the *charset* given in the constructor is "
"used."
msgstr ""
"オプション引数 *charset* がもし与えられた場合、これは :class:`~email.charset."
"Charset` インスタンス (:mod:`email.charset` を参照) か、あるいは文字集合の名"
"前でなければなりません。この場合は :class:`~email.charset.Charset` インスタン"
"スに変換されます。この値が ``None`` の場合 (デフォルト)、コンストラクタで与え"
"られた *charset* が使われます。"

#: ../../library/email.header.rst:102
msgid ""
"*s* may be an instance of :class:`bytes` or :class:`str`.  If it is an "
"instance of :class:`bytes`, then *charset* is the encoding of that byte "
"string, and a :exc:`UnicodeError` will be raised if the string cannot be "
"decoded with that character set."
msgstr ""
"*s* は :class:`bytes` または :class:`str` のインスタンスです。 :class:"
"`bytes` のインスタンスの場合、 *charset* はその文字列のエンコーディングであ"
"り、この文字セットでデコードできないときは :exc:`UnicodeError` が発生します。"

#: ../../library/email.header.rst:107
msgid ""
"If *s* is an instance of :class:`str`, then *charset* is a hint specifying "
"the character set of the characters in the string."
msgstr ""
"*s* が :class:`str` のインスタンスの場合、 *charset* はその文字列の文字セット"
"を決定するためのヒントとして使われます。"

#: ../../library/email.header.rst:110
msgid ""
"In either case, when producing an :rfc:`2822`\\ -compliant header using :rfc:"
"`2047` rules, the string will be encoded using the output codec of the "
"charset.  If the string cannot be encoded using the output codec, a "
"UnicodeError will be raised."
msgstr ""
"いずれの場合でも、 :rfc:`2822` 準拠のヘッダを :rfc:`2047` の規則を用いて生成"
"する際、文字列は指定された文字セットの出力コーデックを用いてエンコードされま"
"す。出力コーデックを用いて文字列がエンコードできないときは :exc:"
"`UnicodeError` が発生します。"

#: ../../library/email.header.rst:115
msgid ""
"Optional *errors* is passed as the errors argument to the decode call if *s* "
"is a byte string."
msgstr ""
"オプションの *errors* は、 *s* がバイト文字列だった場合のデコード呼び出しに "
"errors 引数として渡されます。"

#: ../../library/email.header.rst:121
msgid ""
"Encode a message header into an RFC-compliant format, possibly wrapping long "
"lines and encapsulating non-ASCII parts in base64 or quoted-printable "
"encodings."
msgstr ""
"メッセージヘッダを RFC に沿ったやり方でエンコードします。おそらく長い行は折り"
"返され、非 ASCII 部分は base64 または quoted-printable エンコーディングで包含"
"されるでしょう。"

#: ../../library/email.header.rst:125
msgid ""
"Optional *splitchars* is a string containing characters which should be "
"given extra weight by the splitting algorithm during normal header "
"wrapping.  This is in very rough support of :RFC:`2822`\\'s 'higher level "
"syntactic breaks':  split points preceded by a splitchar are preferred "
"during line splitting, with the characters preferred in the order in which "
"they appear in the string.  Space and tab may be included in the string to "
"indicate whether preference should be given to one over the other as a split "
"point when other split chars do not appear in the line being split.  "
"Splitchars does not affect :RFC:`2047` encoded lines."
msgstr ""
"オプション引数 *splitchars* は、通常のヘッダーの折り返し処理の間に分割アルゴ"
"リズムによって特別な重みが与えられるべき文字を含む文字列です。これは、 :RFC:"
"`2822` の 'higher level syntactic breaks' の非常に荒いサポートです: "
"splitchar の後の分割点は、行分割において優先されます。 分割文字は文字列中での"
"出現順に優先されます。スペースとタブは、分割しようとする行に他の分割文字が出"
"現しない時に、分割点として他の文字と比べてどのような優先順位が与えられるべき"
"かを示すために、文字列に含めることができます。 Splitchars は :RFC:`2047` エン"
"コードされた行には影響しません。"

#: ../../library/email.header.rst:135
msgid ""
"*maxlinelen*, if given, overrides the instance's value for the maximum line "
"length."
msgstr ""
"与えられた場合、*maxlinelen* はインスタンスの最大行長の値を上書きします。"

#: ../../library/email.header.rst:138
msgid ""
"*linesep* specifies the characters used to separate the lines of the folded "
"header.  It defaults to the most useful value for Python application code "
"(``\\n``), but ``\\r\\n`` can be specified in order to produce headers with "
"RFC-compliant line separators."
msgstr ""
"*linesep* は、折り返しヘッダの行を区切る文字を指定します。デフォルトでは"
"Pythonアプリケーションコード（ `` \\ n``）に最も有用な値になりますが、RFC準拠"
"の行区切り文字でヘッダを生成するために `` \\ r \\ n``を指定することができま"
"す。"

#: ../../library/email.header.rst:143
msgid "Added the *linesep* argument."
msgstr "*linesep* 引数が追加されました。"

#: ../../library/email.header.rst:147
msgid ""
"The :class:`Header` class also provides a number of methods to support "
"standard operators and built-in functions."
msgstr ""
":class:`Header` クラスは、標準の演算子や組み込み関数をサポートするためのメ"
"ソッドもいくつか提供しています。"

#: ../../library/email.header.rst:152
msgid ""
"Returns an approximation of the :class:`Header` as a string, using an "
"unlimited line length.  All pieces are converted to unicode using the "
"specified encoding and joined together appropriately.  Any pieces with a "
"charset of ``'unknown-8bit'`` are decoded as ASCII using the ``'replace'`` "
"error handler."
msgstr ""
":class:`Header` の概要を文字列として返します。無制限の行長を使用します。すべ"
"ての箇所は、指定されたエンコーディングを使用してUnicodeに変換され、適切に結合"
"されます。文字セット ``'unknown-8bit'`` を持つ箇所は、 ``'replace'`` エラーハ"
"ンドラを使ってASCIIとしてデコードされます。"

#: ../../library/email.header.rst:158
msgid "Added handling for the ``'unknown-8bit'`` charset."
msgstr "``'unknown-8bit'`` 文字集合の処理が追加されました。"

#: ../../library/email.header.rst:164
msgid ""
"This method allows you to compare two :class:`Header` instances for equality."
msgstr ""
"このメソッドは、ふたつの :class:`Header` インスタンスどうしが等しいかどうか判"
"定するのに使えます。"

#: ../../library/email.header.rst:170
msgid ""
"This method allows you to compare two :class:`Header` instances for "
"inequality."
msgstr ""
"このメソッドは、ふたつの :class:`Header` インスタンスどうしが異なっているかど"
"うかを判定するのに使えます。"

#: ../../library/email.header.rst:173
msgid ""
"The :mod:`email.header` module also provides the following convenient "
"functions."
msgstr ""
"さらに、 :mod:`email.header` モジュールは以下のような簡易関数も提供していま"
"す。"

#: ../../library/email.header.rst:178
msgid ""
"Decode a message header value without converting the character set. The "
"header value is in *header*."
msgstr ""
"文字集合を変換せずにメッセージのヘッダをデコードします。ヘッダの値は "
"*header* にあります。"

#: ../../library/email.header.rst:181
msgid ""
"This function returns a list of ``(decoded_string, charset)`` pairs "
"containing each of the decoded parts of the header.  *charset* is ``None`` "
"for non-encoded parts of the header, otherwise a lower case string "
"containing the name of the character set specified in the encoded string."
msgstr ""
"この関数はヘッダのそれぞれのデコードされた部分ごとに、``(decoded_string, "
"charset)`` という形式の 2要素タプルからなるリストを返します。*charset* はヘッ"
"ダのエンコードされていない部分に対しては ``None`` を、それ以外の場合はエン"
"コードされた文字列が指定している文字集合の名前を小文字からなる文字列で返しま"
"す。"

#: ../../library/email.header.rst:186
msgid "Here's an example::"
msgstr "以下はこの使用例です::"

#: ../../library/email.header.rst:195
msgid ""
"Create a :class:`Header` instance from a sequence of pairs as returned by :"
"func:`decode_header`."
msgstr ""
":func:`decode_header` によって返される 2要素タプルのリストから :class:"
"`Header` インスタンスを作成します。"

#: ../../library/email.header.rst:198
msgid ""
":func:`decode_header` takes a header value string and returns a sequence of "
"pairs of the format ``(decoded_string, charset)`` where *charset* is the "
"name of the character set."
msgstr ""
":func:`decode_header` はヘッダの値をとってきて、 ``(decoded_string, "
"charset)`` という形式の 2要素タプルからなるリストを返します。ここで "
"*decoded_string* はデコードされた文字列、 *charset* はその文字集合です。"

#: ../../library/email.header.rst:202
msgid ""
"This function takes one of those sequence of pairs and returns a :class:"
"`Header` instance.  Optional *maxlinelen*, *header_name*, and "
"*continuation_ws* are as in the :class:`Header` constructor."
msgstr ""
"この関数はこれらのリストの項目から、 :class:`Header` インスタンスを返します。"
"オプション引数 *maxlinelen* 、 *header_name* および *continuation_ws* は :"
"class:`Header` コンストラクタに与えるものと同じです。"
