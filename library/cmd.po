# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/cmd.rst:2
msgid ":mod:`cmd` --- Support for line-oriented command interpreters"
msgstr ":mod:`cmd` --- 行指向のコマンドインタープリタのサポート"

#: ../../library/cmd.rst:9
msgid "**Source code:** :source:`Lib/cmd.py`"
msgstr "**ソースコード:** :source:`Lib/cmd.py`"

#: ../../library/cmd.rst:13
msgid ""
"The :class:`Cmd` class provides a simple framework for writing line-oriented "
"command interpreters.  These are often useful for test harnesses, "
"administrative tools, and prototypes that will later be wrapped in a more "
"sophisticated interface."
msgstr ""
":class:`Cmd` クラスでは、行指向のコマンドインタープリタを書くための簡単なフ"
"レームワークを提供します。テストハーネスや管理ツール、そして、後により洗練さ"
"れたインターフェイスでラップするプロトタイプとして、こうしたインタープリタは"
"よく役に立ちます。"

#: ../../library/cmd.rst:20
msgid ""
"A :class:`Cmd` instance or subclass instance is a line-oriented interpreter "
"framework.  There is no good reason to instantiate :class:`Cmd` itself; "
"rather, it's useful as a superclass of an interpreter class you define "
"yourself in order to inherit :class:`Cmd`'s methods and encapsulate action "
"methods."
msgstr ""
":class:`Cmd` インスタンス、あるいはサブクラスのインスタンスは、行指向のイン"
"タープリタ・フレームワークです。 :class:`Cmd` 自身をインスタンス化することは"
"ありません。むしろ、 :class:`Cmd` のメソッドを継承したり、アクションメソッド"
"をカプセル化するために、あなたが自分で定義するインタープリタクラスのスーパー"
"クラスとしての便利です。"

#: ../../library/cmd.rst:25
msgid ""
"The optional argument *completekey* is the :mod:`readline` name of a "
"completion key; it defaults to :kbd:`Tab`. If *completekey* is not :const:"
"`None` and :mod:`readline` is available, command completion is done "
"automatically."
msgstr ""
"オプション引数 *completekey* は、補完キーの :mod:`readline` 名です。デフォル"
"トは :kbd:`Tab` です。 *completekey* が :const:`None` でなく、 :mod:"
"`readline` が利用できるならば、コマンド補完は自動的に行われます。"

#: ../../library/cmd.rst:29
msgid ""
"The optional arguments *stdin* and *stdout* specify the  input and output "
"file objects that the Cmd instance or subclass  instance will use for input "
"and output. If not specified, they will default to :data:`sys.stdin` and :"
"data:`sys.stdout`."
msgstr ""
"オプション引数の *stdin* と *stdout* には、Cmd またはそのサブクラスのインスタ"
"ンスが入出力に使用するファイルオブジェクトを指定します。省略時には :data:"
"`sys.stdin` と :data:`sys.stdout` が使用されます。"

#: ../../library/cmd.rst:34
msgid ""
"If you want a given *stdin* to be used, make sure to set the instance's :"
"attr:`use_rawinput` attribute to ``False``, otherwise *stdin* will be "
"ignored."
msgstr ""
"引数に渡した *stdin* を使いたい場合は、インスタンスの :attr:`use_rawinput` 属"
"性を ``False`` にセットしてください。そうしないと *stdin* は無視されます。"

#: ../../library/cmd.rst:42
msgid "Cmd Objects"
msgstr "Cmdオブジェクト"

#: ../../library/cmd.rst:44
msgid "A :class:`Cmd` instance has the following methods:"
msgstr ":class:`Cmd` インスタンスは、次のメソッドを持ちます:"

#: ../../library/cmd.rst:49
msgid ""
"Repeatedly issue a prompt, accept input, parse an initial prefix off the "
"received input, and dispatch to action methods, passing them the remainder "
"of the line as argument."
msgstr ""
"プロンプトを繰り返し出力し、入力を受け取り、受け取った入力から取り去った先頭"
"の語を解析し、その行の残りを引数としてアクションメソッドへディスパッチしま"
"す。"

#: ../../library/cmd.rst:53
msgid ""
"The optional argument is a banner or intro string to be issued before the "
"first prompt (this overrides the :attr:`intro` class attribute)."
msgstr ""
"オプションの引数は、最初のプロンプトの前に表示されるバナーあるいはイントロ用"
"の文字列です (これはクラス属性 :attr:`intro` をオーバーライドします)。"

#: ../../library/cmd.rst:56
msgid ""
"If the :mod:`readline` module is loaded, input will automatically inherit :"
"program:`bash`\\ -like history-list editing (e.g. :kbd:`Control-P` scrolls "
"back to the last command, :kbd:`Control-N` forward to the next one, :kbd:"
"`Control-F` moves the cursor to the right non-destructively, :kbd:`Control-"
"B` moves the cursor to the left non-destructively, etc.)."
msgstr ""
":mod:`readline` モジュールがロードされているなら、入力は自動的に :program:"
"`bash` のような履歴リスト編集機能を受け継ぎます(例えば、 :kbd:`Control-P` は"
"直前のコマンドへのスクロールバック、 :kbd:`Control-N` は次のものへ進む、 :"
"kbd:`Control-F` はカーソルを右へ非破壊的に進める、 :kbd:`Control-B` はカーソ"
"ルを非破壊的に左へ移動させる等)。"

#: ../../library/cmd.rst:62
msgid "An end-of-file on input is passed back as the string ``'EOF'``."
msgstr "入力のファイル終端は、文字列 ``'EOF'`` として渡されます。"

#: ../../library/cmd.rst:68
msgid ""
"An interpreter instance will recognize a command name ``foo`` if and only if "
"it has a method :meth:`do_foo`.  As a special case, a line beginning with "
"the character ``'?'`` is dispatched to the method :meth:`do_help`.  As "
"another special case, a line beginning with the character ``'!'`` is "
"dispatched to the method :meth:`do_shell` (if such a method is defined)."
msgstr ""
"メソッド :meth:`do_foo` を持っている場合に限って、インタープリタのインスタン"
"スはコマンド名 ``foo`` を認識します。特別な場合として、文字 ``'?'`` で始まる"
"行はメソッド :meth:`do_help` へディスパッチします。他の特別な場合として、文"
"字 ``'!'`` で始まる行はメソッド :meth:`do_shell` へディスパッチします(このよ"
"うなメソッドが定義されている場合)。"

#: ../../library/cmd.rst:74
msgid ""
"This method will return when the :meth:`postcmd` method returns a true "
"value. The *stop* argument to :meth:`postcmd` is the return value from the "
"command's corresponding :meth:`do_\\*` method."
msgstr ""
"このメソッドは :meth:`postcmd` メソッドが真を返したときに return します。 :"
"meth:`postcmd` に対する *stop* 引数は、このコマンドが対応する :meth:`do_\\*` "
"メソッドからの返り値です。"

#: ../../library/cmd.rst:78
msgid ""
"If completion is enabled, completing commands will be done automatically, "
"and completing of commands args is done by calling :meth:`complete_foo` with "
"arguments *text*, *line*, *begidx*, and *endidx*.  *text* is the string "
"prefix we are attempting to match: all returned matches must begin with it. "
"*line* is the current input line with leading whitespace removed, *begidx* "
"and *endidx* are the beginning and ending indexes of the prefix text, which "
"could be used to provide different completion depending upon which position "
"the argument is in."
msgstr ""
"補完が有効になっているなら、コマンドの補完が自動的に行われます。また、コマン"
"ド引数の補完は、引数 *text*, *line*, *begidx*, および *endidx* と共に :meth:"
"`complete_foo` を呼び出すことによって行われます。 *text* は、マッチしようとし"
"ている文字列の先頭の語です。返されるマッチは全てそれで始まっていなければなり"
"ません。 *line* は始めの空白を除いた現在の入力行です。 *begidx* と *endidx* "
"は先頭のテキストの始まりと終わりのインデックスで、引数の位置に依存した異なる"
"補完を提供するのに使えます。"

#: ../../library/cmd.rst:86
msgid ""
"All subclasses of :class:`Cmd` inherit a predefined :meth:`do_help`.  This "
"method, called with an argument ``'bar'``, invokes the corresponding method :"
"meth:`help_bar`, and if that is not present, prints the docstring of :meth:"
"`do_bar`, if available.  With no argument, :meth:`do_help` lists all "
"available help topics (that is, all commands with corresponding :meth:"
"`help_\\*` methods or commands that have docstrings), and also lists any "
"undocumented commands."
msgstr ""
":class:`Cmd` のすべてのサブクラスは、定義済みの :meth:`do_help` を継承しま"
"す。このメソッドは、(引数 ``'bar'`` と共に呼ばれたとすると)対応するメソッド :"
"meth:`help_bar` を呼び出します。そのメソッドが存在しない場合、 :meth:"
"`do_bar` の docstring があればそれを表示します。引数がなければ、 :meth:"
"`do_help` は、すべての利用可能なヘルプ見出し(すなわち、対応する :meth:"
"`help_\\*` メソッドを持つすべてのコマンドまたは docstring を持つコマンド)をリ"
"ストアップします。また、文書化されていないコマンドでも、すべてリストアップし"
"ます。"

#: ../../library/cmd.rst:97
msgid ""
"Interpret the argument as though it had been typed in response to the "
"prompt. This may be overridden, but should not normally need to be; see the :"
"meth:`precmd` and :meth:`postcmd` methods for useful execution hooks.  The "
"return value is a flag indicating whether interpretation of commands by the "
"interpreter should stop.  If there is a :meth:`do_\\*` method for the "
"command *str*, the return value of that method is returned, otherwise the "
"return value from the :meth:`default` method is returned."
msgstr ""
"プロンプトに答えてタイプしたかのように引数を解釈実行します。これをオーバーラ"
"イドすることがあるかもしれませんが、通常は必要ないでしょう。便利な実行フック"
"については、 :meth:`precmd` と :meth:`postcmd` メソッドを参照してください。戻"
"り値は、インタープリタによるコマンドの解釈実行をやめるかどうかを示すフラグで"
"す。コマンド *str* に対応する :meth:`do_\\*` メソッドがある場合、そのメソッド"
"の返り値が返されます。そうでない場合は :meth:`default` メソッドからの返り値が"
"返されます。"

#: ../../library/cmd.rst:108
msgid ""
"Method called when an empty line is entered in response to the prompt. If "
"this method is not overridden, it repeats the last nonempty command entered."
msgstr ""
"プロンプトに空行が入力されたときに呼び出されるメソッド。このメソッドがオー"
"バーライドされていないなら、最後に入力された空行でないコマンドが繰り返されま"
"す。"

#: ../../library/cmd.rst:114
msgid ""
"Method called on an input line when the command prefix is not recognized. If "
"this method is not overridden, it prints an error message and returns."
msgstr ""
"コマンドの先頭の語が認識されないときに、入力行に対して呼び出されます。このメ"
"ソッドがオーバーライドされていないなら、エラーメッセージを表示して戻ります。"

#: ../../library/cmd.rst:120
msgid ""
"Method called to complete an input line when no command-specific :meth:"
"`complete_\\*` method is available.  By default, it returns an empty list."
msgstr ""
"利用可能なコマンド固有の :meth:`complete_\\*` が存在しないときに、入力行を補"
"完するために呼び出されるメソッド。デフォルトでは、空行を返します。"

#: ../../library/cmd.rst:126
msgid ""
"Hook method executed just before the command line *line* is interpreted, but "
"after the input prompt is generated and issued.  This method is a stub in :"
"class:`Cmd`; it exists to be overridden by subclasses.  The return value is "
"used as the command which will be executed by the :meth:`onecmd` method; "
"the :meth:`precmd` implementation may re-write the command or simply return "
"*line* unchanged."
msgstr ""
"コマンド行 *line* が解釈実行される直前、しかし入力プロンプトが作られ表示され"
"た後に実行されるフックメソッド。このメソッドは :class:`Cmd` 内のスタブであっ"
"て、サブクラスでオーバーライドされるために存在します。戻り値は :meth:"
"`onecmd` メソッドが実行するコマンドとして使われます。 :meth:`precmd` の実装で"
"は、コマンドを書き換えるかもしれないし、あるいは単に変更していない *line* を"
"返すかもしれません。"

#: ../../library/cmd.rst:136
msgid ""
"Hook method executed just after a command dispatch is finished.  This method "
"is a stub in :class:`Cmd`; it exists to be overridden by subclasses.  *line* "
"is the command line which was executed, and *stop* is a flag which indicates "
"whether execution will be terminated after the call to :meth:`postcmd`; this "
"will be the return value of the :meth:`onecmd` method.  The return value of "
"this method will be used as the new value for the internal flag which "
"corresponds to *stop*; returning false will cause interpretation to continue."
msgstr ""
"コマンドディスパッチが終わった直後に実行されるフックメソッド。このメソッド"
"は :class:`Cmd` 内のスタブで、サブクラスでオーバーライドされるために存在しま"
"す。 *line* は実行されたコマンド行で、 *stop* は :meth:`postcmd` の呼び出しの"
"後に実行を停止するかどうかを示すフラグです。これは :meth:`onecmd` メソッドの"
"戻り値です。このメソッドの戻り値は、 *stop* に対応する内部フラグの新しい値と"
"して使われます。偽を返すと、実行を続けます。"

#: ../../library/cmd.rst:147
msgid ""
"Hook method executed once when :meth:`cmdloop` is called.  This method is a "
"stub in :class:`Cmd`; it exists to be overridden by subclasses."
msgstr ""
":meth:`cmdloop` が呼び出されたときに一度だけ実行されるフックメソッド。このメ"
"ソッドは :class:`Cmd` 内のスタブであって、サブクラスでオーバーライドされるた"
"めに存在します。"

#: ../../library/cmd.rst:153
msgid ""
"Hook method executed once when :meth:`cmdloop` is about to return. This "
"method is a stub in :class:`Cmd`; it exists to be overridden by subclasses."
msgstr ""
":meth:`cmdloop` が戻る直前に一度だけ実行されるフックメソッド。このメソッド"
"は :class:`Cmd` 内のスタブであって、サブクラスでオーバーライドされるために存"
"在します。"

#: ../../library/cmd.rst:157
msgid ""
"Instances of :class:`Cmd` subclasses have some public instance variables:"
msgstr ""
":class:`Cmd` のサブクラスのインスタンスは、公開されたインスタンス変数をいくつ"
"か持っています:"

#: ../../library/cmd.rst:161
msgid "The prompt issued to solicit input."
msgstr "入力を求めるために表示されるプロンプト。"

#: ../../library/cmd.rst:166
msgid "The string of characters accepted for the command prefix."
msgstr "コマンドの先頭の語として受け入れられる文字の文字列。"

#: ../../library/cmd.rst:171
msgid "The last nonempty command prefix seen."
msgstr "最後の空でないコマンド接頭辞。"

#: ../../library/cmd.rst:176
msgid ""
"A list of queued input lines.  The cmdqueue list is checked in :meth:"
"`cmdloop` when new input is needed; if it is nonempty, its elements will be "
"processed in order, as if entered at the prompt."
msgstr ""
"キューに入れられた入力行のリスト。cmdqueue リストは新たな入力が必要な際に :"
"meth:`cmdloop` 内でチェックされます; これが空でない場合、その要素は、あたかも"
"プロンプトから入力されたかのように順に処理されます。"

#: ../../library/cmd.rst:183
msgid ""
"A string to issue as an intro or banner.  May be overridden by giving the :"
"meth:`cmdloop` method an argument."
msgstr ""
"イントロあるいはバナーとして表示される文字列。 :meth:`cmdloop` メソッドに引数"
"を与えるために、オーバーライドされるかもしれません。"

#: ../../library/cmd.rst:189
msgid ""
"The header to issue if the help output has a section for documented commands."
msgstr ""
"ヘルプ出力に文書化されたコマンドのセクションがある場合に表示するヘッダ。"

#: ../../library/cmd.rst:194
msgid ""
"The header to issue if the help output has a section for miscellaneous  help "
"topics (that is, there are :meth:`help_\\*` methods without corresponding :"
"meth:`do_\\*` methods)."
msgstr ""
"ヘルプの出力にその他のヘルプ見出しがある(すなわち、 :meth:`do_\\*` メソッドに"
"対応していない :meth:`help_\\*` メソッドが存在する)場合に表示するヘッダ。"

#: ../../library/cmd.rst:201
msgid ""
"The header to issue if the help output has a section for undocumented  "
"commands (that is, there are :meth:`do_\\*` methods without corresponding :"
"meth:`help_\\*` methods)."
msgstr ""
"ヘルプ出力に文書化されていないコマンドのセクションがある(すなわち、対応する :"
"meth:`help_\\*` メソッドを持たない :meth:`do_\\*` メソッドが存在する)場合に表"
"示するヘッダ。"

#: ../../library/cmd.rst:208
msgid ""
"The character used to draw separator lines under the help-message headers.  "
"If empty, no ruler line is drawn.  It defaults to ``'='``."
msgstr ""
"ヘルプメッセージのヘッダの下に、区切り行を表示するために使われる文字。空のと"
"きは、ルーラ行が表示されません。デフォルトでは、``'='`` です。"

#: ../../library/cmd.rst:214
msgid ""
"A flag, defaulting to true.  If true, :meth:`cmdloop` uses :func:`input` to "
"display a prompt and read the next command; if false, :meth:`sys.stdout."
"write` and :meth:`sys.stdin.readline` are used. (This means that by "
"importing :mod:`readline`, on systems that support it, the interpreter will "
"automatically support :program:`Emacs`\\ -like line editing  and command-"
"history keystrokes.)"
msgstr ""
"フラグで、デフォルトでは真です。真ならば、 :meth:`cmdloop` はプロンプトを表示"
"して次のコマンド読み込むために :func:`input` を使います。偽ならば、 :meth:"
"`sys.stdout.write` と :meth:`sys.stdin.readline` が使われます。 (これが意味す"
"るのは、 :mod:`readline` を import することによって、それをサポートするシステ"
"ム上では、インタープリタが自動的に :program:`Emacs` 形式の行編集とコマンド履"
"歴のキーストロークをサポートするということです。)"

#: ../../library/cmd.rst:224
msgid "Cmd Example"
msgstr "Cmd の例"

#: ../../library/cmd.rst:228
msgid ""
"The :mod:`cmd` module is mainly useful for building custom shells that let a "
"user work with a program interactively."
msgstr ""
":mod:`cmd` モジュールは、ユーザーがプログラムと対話的に連携できるカスタムシェ"
"ルを構築するのに主に役立ちます。"

#: ../../library/cmd.rst:231
msgid ""
"This section presents a simple example of how to build a shell around a few "
"of the commands in the :mod:`turtle` module."
msgstr ""
"この節では、:mod:`turtle` モジュールのいくつかのコマンドを持ったシェルの作成"
"方法の簡単な例を示します。"

#: ../../library/cmd.rst:234
msgid ""
"Basic turtle commands such as :meth:`~turtle.forward` are added to a :class:"
"`Cmd` subclass with method named :meth:`do_forward`.  The argument is "
"converted to a number and dispatched to the turtle module.  The docstring is "
"used in the help utility provided by the shell."
msgstr ""
":meth:`~turtle.forward` のような基本的な turtle コマンドは\n"
":class:`Cmd` のサブクラスに :meth:`do_forward` と名付けられたメソッドで追加さ"
"れます。\n"
"引数は数値に変換され、 turtle モジュールに振り分けられます。ドキュメント文字"
"列はシェルによって提供されるヘルプユーティリティで使用されます。"

#: ../../library/cmd.rst:239
msgid ""
"The example also includes a basic record and playback facility implemented "
"with the :meth:`~Cmd.precmd` method which is responsible for converting the "
"input to lowercase and writing the commands to a file.  The :meth:"
"`do_playback` method reads the file and adds the recorded commands to the :"
"attr:`cmdqueue` for immediate playback::"
msgstr ""
"この例には、基本的な記録機能と再実行機能が含まれていて、入力を小文字に変換し"
"コマンドをファイルに書き込む責務を持たせた :meth:`~Cmd.precmd` メソッドに実装"
"されています。\n"
":meth:`do_playback` メソッドはファイルを読み込み、そこに記録されているコマン"
"ドをすぐに再実行するために :attr:`cmdqueue` に追加します::"

#: ../../library/cmd.rst:320
msgid ""
"Here is a sample session with the turtle shell showing the help functions, "
"using blank lines to repeat commands, and the simple record and playback "
"facility:"
msgstr ""
"以下は、turtle シェルでの機能のヘルプ表示、空行によるコマンドの繰り返し、単純"
"な記録と再実行のセッション例です:"
