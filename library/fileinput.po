# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Takanori Suzuki <takanori@takanory.net>, 2021
# tomo, 2021
# Osamu NAKAMURA, 2021
# Arihiro TAKASE, 2023
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:06+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/fileinput.rst:2
msgid ":mod:`!fileinput` --- Iterate over lines from multiple input streams"
msgstr ":mod:`!fileinput` --- 複数の入力ストリームをまたいだ行を反復する"

#: ../../library/fileinput.rst:10
msgid "**Source code:** :source:`Lib/fileinput.py`"
msgstr "**ソースコード:** :source:`Lib/fileinput.py`"

#: ../../library/fileinput.rst:14
msgid ""
"This module implements a helper class and functions to quickly write a loop "
"over standard input or a list of files. If you just want to read or write "
"one file see :func:`open`."
msgstr ""
"このモジュールは標準入力やファイルの並びにまたがるループを素早く書くためのヘ"
"ルパークラスと関数を提供しています。単一のファイルを読み書きしたいだけな"
"ら、 :func:`open` を参照してください。"

#: ../../library/fileinput.rst:18
msgid "The typical use is::"
msgstr "典型的な使い方は以下の通りです::"

#: ../../library/fileinput.rst:20
msgid ""
"import fileinput\n"
"for line in fileinput.input(encoding=\"utf-8\"):\n"
"    process(line)"
msgstr ""

#: ../../library/fileinput.rst:24
msgid ""
"This iterates over the lines of all files listed in ``sys.argv[1:]``, "
"defaulting to ``sys.stdin`` if the list is empty.  If a filename is ``'-'``, "
"it is also replaced by ``sys.stdin`` and the optional arguments *mode* and "
"*openhook* are ignored.  To specify an alternative list of filenames, pass "
"it as the first argument to :func:`.input`.  A single file name is also "
"allowed."
msgstr ""
"このスクリプトは ``sys.argv[1:]`` に列挙されている全てのファイルの行に渡って"
"反復処理を行います。もし列挙されているものがなければ、 ``sys.stdin`` がデフォ"
"ルトとして扱われます。\n"
"ファイル名として ``'-'`` が与えられた場合も、 ``sys.stdin`` に置き換えられ、 "
"*mode* と *openhook* は無視されます。\n"
"別のファイル名リストを使いたい時には、そのリストを :func:`.input` の最初の引"
"数に与えます。\n"
"ファイル名が 1 つでも受け付けます。"

#: ../../library/fileinput.rst:30
msgid ""
"All files are opened in text mode by default, but you can override this by "
"specifying the *mode* parameter in the call to :func:`.input` or :class:"
"`FileInput`.  If an I/O error occurs during opening or reading a file, :exc:"
"`OSError` is raised."
msgstr ""
"全てのファイルはデフォルトでテキストモードでオープンされます。しかし、 :func:"
"`.input` や :class:`FileInput` をコールする際に *mode* パラメータを指定すれ"
"ば、これをオーバーライドすることができます。オープン中あるいは読み込み中にI/O"
"エラーが発生した場合には、 :exc:`OSError` が発生します。"

#: ../../library/fileinput.rst:35
msgid ":exc:`IOError` used to be raised; it is now an alias of :exc:`OSError`."
msgstr ""
"以前は :exc:`IOError` が送出されました; それは現在 :exc:`OSError` のエイリア"
"スです。"

#: ../../library/fileinput.rst:38
msgid ""
"If ``sys.stdin`` is used more than once, the second and further use will "
"return no lines, except perhaps for interactive use, or if it has been "
"explicitly reset (e.g. using ``sys.stdin.seek(0)``)."
msgstr ""
"``sys.stdin`` が2回以上使われた場合は、2回目以降は行を返しません。ただしイン"
"タラクティブに利用している時や明示的にリセット (``sys.stdin.seek(0)`` を使"
"う) を行った場合はその限りではありません。"

#: ../../library/fileinput.rst:42
msgid ""
"Empty files are opened and immediately closed; the only time their presence "
"in the list of filenames is noticeable at all is when the last file opened "
"is empty."
msgstr ""
"空のファイルは開いた後すぐ閉じられます。空のファイルはファイル名リストの最後"
"にある場合にしか外部に影響を与えません。"

#: ../../library/fileinput.rst:46
msgid ""
"Lines are returned with any newlines intact, which means that the last line "
"in a file may not have one."
msgstr ""
"ファイルの各行は、各種改行文字まで含めて返されます。ファイルの最後が改行文字"
"で終っていない場合には、改行文字で終わらない行が返されます。"

#: ../../library/fileinput.rst:49
msgid ""
"You can control how files are opened by providing an opening hook via the "
"*openhook* parameter to :func:`fileinput.input` or :func:`FileInput`. The "
"hook must be a function that takes two arguments, *filename* and *mode*, and "
"returns an accordingly opened file-like object. If *encoding* and/or "
"*errors* are specified, they will be passed to the hook as additional "
"keyword arguments. This module provides a :func:`hook_compressed` to support "
"compressed files."
msgstr ""

#: ../../library/fileinput.rst:56
msgid "The following function is the primary interface of this module:"
msgstr "以下の関数がこのモジュールの基本的なインターフェースです:"

#: ../../library/fileinput.rst:61
msgid ""
"Create an instance of the :class:`FileInput` class.  The instance will be "
"used as global state for the functions of this module, and is also returned "
"to use during iteration.  The parameters to this function will be passed "
"along to the constructor of the :class:`FileInput` class."
msgstr ""
":class:`FileInput` クラスのインスタンスを作ります。生成されたインスタンスは、"
"このモジュールの関数群が利用するグローバルな状態として利用されます。この関数"
"への引数は :class:`FileInput` クラスのコンストラクタへ渡されます。"

#: ../../library/fileinput.rst:66
msgid ""
"The :class:`FileInput` instance can be used as a context manager in the :"
"keyword:`with` statement.  In this example, *input* is closed after the :"
"keyword:`!with` statement is exited, even if an exception occurs::"
msgstr ""
":class:`FileInput` のインスタンスは :keyword:`with` 文の中でコンテキストマ"
"ネージャーとして使用できます。\n"
"次の例では、仮に例外が生じたとしても :keyword:`!with` 文から抜けた後で "
"*input* は閉じられます::"

#: ../../library/fileinput.rst:70
msgid ""
"with fileinput.input(files=('spam.txt', 'eggs.txt'), encoding=\"utf-8\") as "
"f:\n"
"    for line in f:\n"
"        process(line)"
msgstr ""

#: ../../library/fileinput.rst:74 ../../library/fileinput.rst:170
msgid "Can be used as a context manager."
msgstr "コンテキストマネージャとして使うことができるようになりました。"

#: ../../library/fileinput.rst:77
msgid "The keyword parameters *mode* and *openhook* are now keyword-only."
msgstr ""
"キーワード引数 *mode* と *openhook* は、キーワード専用引数になりました。"

#: ../../library/fileinput.rst:80 ../../library/fileinput.rst:176
#: ../../library/fileinput.rst:210
msgid "The keyword-only parameter *encoding* and *errors* are added."
msgstr ""

#: ../../library/fileinput.rst:84
msgid ""
"The following functions use the global state created by :func:`fileinput."
"input`; if there is no active state, :exc:`RuntimeError` is raised."
msgstr ""
"以下の関数は :func:`fileinput.input` 関数によって作られたグローバルな状態を利"
"用します。アクティブな状態が無い場合には、 :exc:`RuntimeError` が発生します。"

#: ../../library/fileinput.rst:90
msgid ""
"Return the name of the file currently being read.  Before the first line has "
"been read, returns ``None``."
msgstr ""
"現在読み込み中のファイル名を返します。一行目が読み込まれる前は ``None`` を返"
"します。"

#: ../../library/fileinput.rst:96
msgid ""
"Return the integer \"file descriptor\" for the current file. When no file is "
"opened (before the first line and between files), returns ``-1``."
msgstr ""
"現在のファイルの \"ファイル記述子\" を整数値で返します。ファイルがオープンさ"
"れていない場合 (最初の行の前、ファイルとファイルの間) は ``-1`` を返します。"

#: ../../library/fileinput.rst:102
msgid ""
"Return the cumulative line number of the line that has just been read.  "
"Before the first line has been read, returns ``0``.  After the last line of "
"the last file has been read, returns the line number of that line."
msgstr ""
"最後に読み込まれた行の、累積した行番号を返します。1行目が読み込まれる前は "
"``0`` を返します。最後のファイルの最終行が読み込まれた後には、その行の行番号"
"を返します。"

#: ../../library/fileinput.rst:109
msgid ""
"Return the line number in the current file.  Before the first line has been "
"read, returns ``0``.  After the last line of the last file has been read, "
"returns the line number of that line within the file."
msgstr ""
"現在のファイル中での行番号を返します。1行目が読み込まれる前は ``0`` を返しま"
"す。最後のファイルの最終行が読み込まれた後には、その行のファイル中での行番号"
"を返します。"

#: ../../library/fileinput.rst:116
msgid ""
"Return ``True`` if the line just read is the first line of its file, "
"otherwise return ``False``."
msgstr ""
"最後に読み込まれた行がファイルの1行目なら ``True`` 、そうでなければ "
"``False`` を返します。"

#: ../../library/fileinput.rst:122
msgid ""
"Return ``True`` if the last line was read from ``sys.stdin``, otherwise "
"return ``False``."
msgstr ""
"最後に読み込まれた行が ``sys.stdin`` から読み込まれていれば ``True`` 、そうで"
"なければ  ``False`` を返します。"

#: ../../library/fileinput.rst:128
msgid ""
"Close the current file so that the next iteration will read the first line "
"from the next file (if any); lines not read from the file will not count "
"towards the cumulative line count.  The filename is not changed until after "
"the first line of the next file has been read.  Before the first line has "
"been read, this function has no effect; it cannot be used to skip the first "
"file.  After the last line of the last file has been read, this function has "
"no effect."
msgstr ""
"現在のファイルを閉じます。次の繰り返しでは(存在すれば)次のファイルの最初の行"
"が読み込まれます。閉じたファイルの読み込まれなかった行は、累積の行数にカウン"
"トされません。ファイル名は次のファイルの最初の行が読み込まれるまで変更されま"
"せん。最初の行の読み込みが行われるまでは、この関数は呼び出されても何もしませ"
"んので、最初のファイルをスキップするために利用することはできません。最後の"
"ファイルの最終行が読み込まれた後にも、この関数は呼び出されても何もしません。"

#: ../../library/fileinput.rst:138
msgid "Close the sequence."
msgstr "シーケンスを閉じます。"

#: ../../library/fileinput.rst:140
msgid ""
"The class which implements the sequence behavior provided by the module is "
"available for subclassing as well:"
msgstr ""
"このモジュールのシーケンスの振舞いを実装しているクラスのサブクラスを作ること"
"もできます:"

#: ../../library/fileinput.rst:146
msgid ""
"Class :class:`FileInput` is the implementation; its methods :meth:"
"`filename`, :meth:`fileno`, :meth:`lineno`, :meth:`filelineno`, :meth:"
"`isfirstline`, :meth:`isstdin`, :meth:`nextfile` and :meth:`close` "
"correspond to the functions of the same name in the module. In addition it "
"is :term:`iterable` and has a :meth:`~io.TextIOBase.readline` method which "
"returns the next input line. The sequence must be accessed in strictly "
"sequential order; random access and :meth:`~io.TextIOBase.readline` cannot "
"be mixed."
msgstr ""
":class:`FileInput` クラスはモジュールの関数に対応するメソッド :meth:"
"`filename` 、 :meth:`fileno` 、 :meth:`lineno` 、 :meth:`filelineno` 、 :"
"meth:`isfirstline` 、 :meth:`isstdin` 、 :meth:`nextfile` および :meth:"
"`close` を実装しています。:term:`イテラブル <iterable>` であることに加えて、"
"次の入力行を返す :meth:`~io.TextIOBase.readline` メソッドがあります。シーケン"
"スはシーケンシャルに読み込むことしかできません。つまりランダムアクセスと :"
"meth:`~io.TextIOBase.readline` を混在させることはできません。"

#: ../../library/fileinput.rst:154
msgid ""
"With *mode* you can specify which file mode will be passed to :func:`open`. "
"It must be one of ``'r'`` and ``'rb'``."
msgstr ""
"*mode* を使用すると、 :func:`open` に渡すファイルモードを指定することができま"
"す。これは ``'r'`` および ``'rb'`` のうちのいずれかとなります。"

#: ../../library/fileinput.rst:157
msgid ""
"The *openhook*, when given, must be a function that takes two arguments, "
"*filename* and *mode*, and returns an accordingly opened file-like object. "
"You cannot use *inplace* and *openhook* together."
msgstr ""
"*openhook* を指定する場合は、ふたつの引数 *filename* と *mode* をとる関数でな"
"ければなりません。この関数の返り値は、オープンしたファイルオブジェクトとなり"
"ます。*inplace* と *openhook* を同時に使うことはできません。"

#: ../../library/fileinput.rst:161
msgid ""
"You can specify *encoding* and *errors* that is passed to :func:`open` or "
"*openhook*."
msgstr ""

#: ../../library/fileinput.rst:163
msgid ""
"A :class:`FileInput` instance can be used as a context manager in the :"
"keyword:`with` statement.  In this example, *input* is closed after the :"
"keyword:`!with` statement is exited, even if an exception occurs::"
msgstr ""
":class:`FileInput` のインスタンスは :keyword:`with` 文の中でコンテキストマ"
"ネージャーとして使用できます。\n"
"次の例では、仮に例外が生じたとしても :keyword:`!with` 文から抜けた後で "
"*input* は閉じられます::"

#: ../../library/fileinput.rst:167
msgid ""
"with FileInput(files=('spam.txt', 'eggs.txt')) as input:\n"
"    process(input)"
msgstr ""

#: ../../library/fileinput.rst:173
msgid "The keyword parameter *mode* and *openhook* are now keyword-only."
msgstr ""
"キーワード引数 *mode* と *openhook* は、キーワード専用引数になりました。"

#: ../../library/fileinput.rst:179
msgid ""
"The ``'rU'`` and ``'U'`` modes and the :meth:`!__getitem__` method have been "
"removed."
msgstr ""

#: ../../library/fileinput.rst:184
msgid ""
"**Optional in-place filtering:** if the keyword argument ``inplace=True`` is "
"passed to :func:`fileinput.input` or to the :class:`FileInput` constructor, "
"the file is moved to a backup file and standard output is directed to the "
"input file (if a file of the same name as the backup file already exists, it "
"will be replaced silently).  This makes it possible to write a filter that "
"rewrites its input file in place.  If the *backup* parameter is given "
"(typically as ``backup='.<some extension>'``), it specifies the extension "
"for the backup file, and the backup file remains around; by default, the "
"extension is ``'.bak'`` and it is deleted when the output file is closed.  "
"In-place filtering is disabled when standard input is read."
msgstr ""
"**インプレース(in-place)フィルタオプション:** キーワード引数 "
"``inplace=True`` が :func:`fileinput.input` か :class:`FileInput` クラスのコ"
"ンストラクタに渡された場合には、入力ファイルはバックアップファイルに移動さ"
"れ、標準出力が入力ファイルに設定されます(バックアップファイルと同じ名前のファ"
"イルが既に存在していた場合には、警告無しに置き替えられます)。これによって入力"
"ファイルをその場で書き替えるフィルタを書くことができます。キーワード引数 "
"*backup* (通常は ``backup='.<拡張子>'`` という形で利用します)が与えられていた"
"場合、バックアップファイルの拡張子として利用され、バックアップファイルは削除"
"されずに残ります。デフォルトでは、拡張子は ``'.bak'`` になっていて、出力先の"
"ファイルが閉じられればバックアップファイルも消されます。インプレースフィルタ"
"機能は、標準入力を読み込んでいる間は無効にされます。"

#: ../../library/fileinput.rst:196
msgid "The two following opening hooks are provided by this module:"
msgstr "このモジュールには、次のふたつのオープン時フックが用意されています:"

#: ../../library/fileinput.rst:200
msgid ""
"Transparently opens files compressed with gzip and bzip2 (recognized by the "
"extensions ``'.gz'`` and ``'.bz2'``) using the :mod:`gzip` and :mod:`bz2` "
"modules.  If the filename extension is not ``'.gz'`` or ``'.bz2'``, the file "
"is opened normally (ie, using :func:`open` without any decompression)."
msgstr ""
"gzip や bzip2 で圧縮された (拡張子が ``'.gz'`` や ``'.bz2'`` の) ファイル"
"を、 :mod:`gzip` モジュールや :mod:`bz2` モジュールを使って透過的にオープンし"
"ます。ファイルの拡張子が ``'.gz'`` や ``'.bz2'`` でない場合は、通常通りファイ"
"ルをオープンします (つまり、 :func:`open` をコールする際に伸長を行いません)。"

#: ../../library/fileinput.rst:205
msgid ""
"The *encoding* and *errors* values are passed to :class:`io.TextIOWrapper` "
"for compressed files and open for normal files."
msgstr ""

#: ../../library/fileinput.rst:208
msgid ""
"Usage example:  ``fi = fileinput.FileInput(openhook=fileinput."
"hook_compressed, encoding=\"utf-8\")``"
msgstr ""
"使用例: ``fi = fileinput.FileInput(openhook=fileinput.hook_compressed, "
"encoding=\"utf-8\")``"

#: ../../library/fileinput.rst:216
msgid ""
"Returns a hook which opens each file with :func:`open`, using the given "
"*encoding* and *errors* to read the file."
msgstr ""
"各ファイルを :func:`open` でオープンするフックを返します。指定した "
"*encoding* および *errors* でファイルを読み込みます。"

#: ../../library/fileinput.rst:219
msgid ""
"Usage example: ``fi = fileinput.FileInput(openhook=fileinput."
"hook_encoded(\"utf-8\", \"surrogateescape\"))``"
msgstr ""
"使用例: ``fi = fileinput.FileInput(openhook=fileinput."
"hook_encoded(\"utf-8\", \"surrogateescape\"))``"

#: ../../library/fileinput.rst:223
msgid "Added the optional *errors* parameter."
msgstr "オプションの *errors* 引数が追加されました。"

#: ../../library/fileinput.rst:226
msgid ""
"This function is deprecated since :func:`fileinput.input` and :class:"
"`FileInput` now have *encoding* and *errors* parameters."
msgstr ""
