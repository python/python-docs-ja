# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/audioop.rst:2
msgid ":mod:`audioop` --- Manipulate raw audio data"
msgstr ":mod:`audioop` --- 生の音声データを操作する"

#: ../../library/audioop.rst:8
msgid ""
"The :mod:`audioop` module is deprecated (see :pep:`PEP 594 <594#audioop>` "
"for details)."
msgstr ""
":mod:`audioop` モジュールは非推奨です (詳細は :pep:`PEP 594 <594#audioop>` 参"
"照)。"

#: ../../library/audioop.rst:14
msgid ""
"The :mod:`audioop` module contains some useful operations on sound "
"fragments. It operates on sound fragments consisting of signed integer "
"samples 8, 16, 24 or 32 bits wide, stored in :term:`bytes-like objects "
"<bytes-like object>`.  All scalar items are integers, unless specified "
"otherwise."
msgstr ""
":mod:`audioop`  モジュールは音声データの便利な操作を含んでいます。このモ"
"ジュールは、 :term:`bytes-like オブジェクト <bytes-like object>` に保存され"
"た、符号付き整数の、ビット幅が 8, 16, 24, あるいは 32 ビットの音声データを対"
"象として操作します。特に指定されていない限り、すべての波形データ（スカラー要"
"素）は整数です。"

#: ../../library/audioop.rst:19
msgid ""
"Support for 24-bit samples was added. All functions now accept any :term:"
"`bytes-like object`. String input now results in an immediate error."
msgstr ""
"24 bit サンプルのサポートが追加されました。すべての関数はどんな :term:`bytes-"
"like object` でも使用できます。文字列の入力は即座にエラーになります。"

#: ../../library/audioop.rst:30
msgid ""
"This module provides support for a-LAW, u-LAW and Intel/DVI ADPCM encodings."
msgstr ""
"このモジュールはa-LAW、u-LAWそしてIntel/DVI ADPCMエンコードをサポートしていま"
"す。"

#: ../../library/audioop.rst:34
msgid ""
"A few of the more complicated operations only take 16-bit samples, otherwise "
"the sample size (in bytes) is always a parameter of the operation."
msgstr ""
"複雑な操作のうちいくつかはサンプル幅が 16 ビットのデータに対してのみ働きます"
"が、それ以外は常にサンプル幅を操作のパラメタとして (バイト単位で) 渡します。"

#: ../../library/audioop.rst:37
msgid "The module defines the following variables and functions:"
msgstr "このモジュールでは以下の変数と関数を定義しています:"

#: ../../library/audioop.rst:42
msgid ""
"This exception is raised on all errors, such as unknown number of bytes per "
"sample, etc."
msgstr ""
"この例外は、未知のサンプル当たりのバイト数を指定した時など、全般的なエラーに"
"対して送出されます。"

#: ../../library/audioop.rst:48
msgid ""
"Return a fragment which is the addition of the two samples passed as "
"parameters. *width* is the sample width in bytes, either ``1``, ``2``, ``3`` "
"or ``4``.  Both fragments should have the same length.  Samples are "
"truncated in case of overflow."
msgstr ""
"パラメータとして渡された2つのサンプルの和のデータを返します。*width* はバイト"
"単位のサンプル幅で、``1``, ``2``, ``3``, ``4`` のいずれかです。両方のデータは"
"同じ長さでなければなりません。オーバーフローした場合は、切り捨てされます。"

#: ../../library/audioop.rst:55
msgid ""
"Decode an Intel/DVI ADPCM coded fragment to a linear fragment.  See the "
"description of :func:`lin2adpcm` for details on ADPCM coding. Return a tuple "
"``(sample, newstate)`` where the sample has the width specified in *width*."
msgstr ""
"Intel/DVI ADPCM 形式のデータをリニア (linear) 形式にデコードします。 ADPCM 符"
"号化方式の詳細については :func:`lin2adpcm` の説明を参照して下さい。 "
"``(sample, newstate)`` からなるタプルを返し、サンプルは *width* に指定した幅"
"になります。"

#: ../../library/audioop.rst:62
msgid ""
"Convert sound fragments in a-LAW encoding to linearly encoded sound "
"fragments. a-LAW encoding always uses 8 bits samples, so *width* refers only "
"to the sample width of the output fragment here."
msgstr ""
"a-LAW形式のデータをリニア (linear) 形式に変換します。a-LAW形式は常に 8 ビット"
"のサンプルを使用するので、ここでは *width* は単に出力データのサンプル幅となり"
"ます。"

#: ../../library/audioop.rst:69
msgid "Return the average over all samples in the fragment."
msgstr "データ中の全サンプルの平均値を返します。"

#: ../../library/audioop.rst:74
msgid ""
"Return the average peak-peak value over all samples in the fragment. No "
"filtering is done, so the usefulness of this routine is questionable."
msgstr ""
"データ中の全サンプルの平均 peak-peak 振幅を返します。フィルタリングを行ってい"
"ない場合、このルーチンの有用性は疑問です。"

#: ../../library/audioop.rst:80
msgid ""
"Return a fragment that is the original fragment with a bias added to each "
"sample.  Samples wrap around in case of overflow."
msgstr ""
"元の音声データの各サンプルにバイアスを加算した音声データを返します。オーバー"
"フローした場合はラップアラウンドされます。"

#: ../../library/audioop.rst:86
msgid ""
"\"Byteswap\" all samples in a fragment and returns the modified fragment. "
"Converts big-endian samples to little-endian and vice versa."
msgstr ""
"fragment のすべてのサンプルを \"byteswap\" して、修正された fragment を返しま"
"す。ビッグエンディアンのサンプルをリトルエンディアンに、またはその逆に変換し"
"ます。"

#: ../../library/audioop.rst:94
msgid ""
"Return the number of zero crossings in the fragment passed as an argument."
msgstr "引数に渡したデータ中のゼロ交差回数を返します。"

#: ../../library/audioop.rst:99
msgid ""
"Return a factor *F* such that ``rms(add(fragment, mul(reference, -F)))`` is "
"minimal, i.e., return the factor with which you should multiply *reference* "
"to make it match as well as possible to *fragment*.  The fragments should "
"both contain 2-byte samples."
msgstr ""
"``rms(add(fragment, mul(reference, -F)))`` を最小にするような係数 *F*、すなわ"
"ち、*reference* に乗算したときにもっとも *fragment* に近くなるような値を返し"
"ます。*fragment* と *reference* のサンプル幅はいずれも 2バイトでなければなり"
"ません。"

#: ../../library/audioop.rst:104
msgid "The time taken by this routine is proportional to ``len(fragment)``."
msgstr "このルーチンの実行に要する時間は ``len(fragment)`` に比例します。"

#: ../../library/audioop.rst:109
msgid ""
"Try to match *reference* as well as possible to a portion of *fragment* "
"(which should be the longer fragment).  This is (conceptually) done by "
"taking slices out of *fragment*, using :func:`findfactor` to compute the "
"best match, and minimizing the result.  The fragments should both contain 2-"
"byte samples. Return a tuple ``(offset, factor)`` where *offset* is the "
"(integer) offset into *fragment* where the optimal match started and "
"*factor* is the (floating-point) factor as per :func:`findfactor`."
msgstr ""
"*reference* を可能な限り *fragment* に一致させようとします (*fragment* は "
"*reference* より長くなければなりません)。この処理は (概念的には) *fragment* "
"からスライスをいくつか取り出し、それぞれについて :func:`findfactor` を使って"
"最良な一致を計算し、誤差が最小の結果を選ぶことで実現します。 *fragment* と "
"*reference* のサンプル幅は両方とも2バイトでなければなりません。 ``(offset, "
"factor)`` からなるタプルを返します。 *offset* は最適な一致箇所が始まる "
"*fragment* のオフセット値（整数）で、 *factor* は :func:`findfactor` の返す係"
"数 (浮動小数点数) です。"

#: ../../library/audioop.rst:120
msgid ""
"Search *fragment* for a slice of length *length* samples (not bytes!) with "
"maximum energy, i.e., return *i* for which ``rms(fragment[i*2:"
"(i+length)*2])`` is maximal.  The fragments should both contain 2-byte "
"samples."
msgstr ""
"*fragment* から、長さが *length* サンプル (バイトではありません!) で最大のエ"
"ネルギーを持つスライス、すなわち、``rms(fragment[i*2:(i+length)* 2])`` を最大"
"にするようなスライスを探し、*i* を返します。データのはサンプル幅は 2バイトで"
"なければなりません。"

#: ../../library/audioop.rst:124
msgid "The routine takes time proportional to ``len(fragment)``."
msgstr "このルーチンの実行に要する時間は ``len(fragment)`` に比例します。"

#: ../../library/audioop.rst:129
msgid "Return the value of sample *index* from the fragment."
msgstr "データ中の *index* サンプル目の値を返します。"

#: ../../library/audioop.rst:134
msgid ""
"Convert samples to 4 bit Intel/DVI ADPCM encoding.  ADPCM coding is an "
"adaptive coding scheme, whereby each 4 bit number is the difference between "
"one sample and the next, divided by a (varying) step.  The Intel/DVI ADPCM "
"algorithm has been selected for use by the IMA, so it may well become a "
"standard."
msgstr ""
"データを 4 ビットの Intel/DVI ADPCM 符号化方式に変換します。ADPCM 符号化方式"
"とは適応符号化方式の一つで、あるサンプルと (可変の) ステップだけ離れたその次"
"のサンプルとの差を 4 ビットの整数で表現する方式です。Intel/DVI ADPCMアルゴリ"
"ズムは IMA  (国際MIDI協会) に採用されているので、おそらく標準になるはずです。"

#: ../../library/audioop.rst:139
msgid ""
"*state* is a tuple containing the state of the coder.  The coder returns a "
"tuple ``(adpcmfrag, newstate)``, and the *newstate* should be passed to the "
"next call of :func:`lin2adpcm`.  In the initial call, ``None`` can be passed "
"as the state. *adpcmfrag* is the ADPCM coded fragment packed 2 4-bit values "
"per byte."
msgstr ""
"*state* はエンコーダの内部状態が入ったタプルです。エンコーダは ``(adpcmfrag, "
"newstate)`` のタプルを返し、次に :func:`lin2adpcm` を呼び出す時に *newstate* "
"を渡さねばなりません。最初に呼び出す時には *state* に ``None`` を渡してもかま"
"いません。 *adpcmfrag* は ADPCMで符号化されたデータで、バイト当たり 2 つの4"
"ビット値がパックされています。"

#: ../../library/audioop.rst:147
msgid ""
"Convert samples in the audio fragment to a-LAW encoding and return this as a "
"bytes object.  a-LAW is an audio encoding format whereby you get a dynamic "
"range of about 13 bits using only 8 bit samples.  It is used by the Sun "
"audio hardware, among others."
msgstr ""
"音声データのサンプルを a-LAW エンコーディングに変換し、バイトオブジェクトとし"
"て返します。a-LAW とは 13ビットのダイナミックレンジを 8bit だけで表現できる音"
"声エンコーディングです。Sun の音声ハードウェアなどで使われています。"

#: ../../library/audioop.rst:155
msgid "Convert samples between 1-, 2-, 3- and 4-byte formats."
msgstr "サンプル幅を 1、2、3、4 バイト形式の間で変換します。"

#: ../../library/audioop.rst:159
msgid ""
"In some audio formats, such as .WAV files, 16, 24 and 32 bit samples are "
"signed, but 8 bit samples are unsigned.  So when converting to 8 bit wide "
"samples for these formats, you need to also add 128 to the result::"
msgstr ""
".WAV ファイルのような幾つかのオーディオフォーマットでは、16、24 と 32 bit の"
"サンプルは符号付きですが、8 bit のサンプルは符号なしです。そのため、そのよう"
"なフォーマットで 8 bit に変換する場合は、変換結果に128を足さなければなりませ"
"ん::"

#: ../../library/audioop.rst:166
msgid ""
"The same, in reverse, has to be applied when converting from 8 to 16, 24 or "
"32 bit width samples."
msgstr "逆に、8 bit から 16、24、32 bit に変換する場合も、同じことが言えます。"

#: ../../library/audioop.rst:172
msgid ""
"Convert samples in the audio fragment to u-LAW encoding and return this as a "
"bytes object.  u-LAW is an audio encoding format whereby you get a dynamic "
"range of about 14 bits using only 8 bit samples.  It is used by the Sun "
"audio hardware, among others."
msgstr ""
"音声データのサンプルを u-LAW エンコーディングに変換し、バイトオブジェクトとし"
"て返します。u-LAW とは 14ビットのダイナミックレンジを 8bit だけで表現できる音"
"声エンコーディングです。Sun の音声ハードウェアなどで使われています。"

#: ../../library/audioop.rst:180
msgid ""
"Return the maximum of the *absolute value* of all samples in a fragment."
msgstr "音声データ全サンプルの *絶対値* の最大値を返します。"

#: ../../library/audioop.rst:185
msgid "Return the maximum peak-peak value in the sound fragment."
msgstr "音声データの最大 peak-peak 振幅を返します。"

#: ../../library/audioop.rst:190
msgid ""
"Return a tuple consisting of the minimum and maximum values of all samples "
"in the sound fragment."
msgstr "音声データ全サンプル中における最小値と最大値からなるタプルを返します。"

#: ../../library/audioop.rst:196
msgid ""
"Return a fragment that has all samples in the original fragment multiplied "
"by the floating-point value *factor*.  Samples are truncated in case of "
"overflow."
msgstr ""
"元の音声データの各サンプルに浮動小数点数 *factor* を乗算した音声データを返し"
"ます。オーバーフローした場合は切り捨てられます。"

#: ../../library/audioop.rst:202
msgid "Convert the frame rate of the input fragment."
msgstr "入力したデータのフレームレートを変換します。"

#: ../../library/audioop.rst:204
msgid ""
"*state* is a tuple containing the state of the converter.  The converter "
"returns a tuple ``(newfragment, newstate)``, and *newstate* should be passed "
"to the next call of :func:`ratecv`.  The initial call should pass ``None`` "
"as the state."
msgstr ""
"*state* は変換ルーチンの内部状態を入れたタプルです。変換ルーチンは "
"``(newfragment, newstate)`` を返し、次に :func:`ratecv` を呼び出す時には "
"*newstate* を渡さなねばなりません。最初の呼び出しでは ``None`` を渡します。"

#: ../../library/audioop.rst:208
msgid ""
"The *weightA* and *weightB* arguments are parameters for a simple digital "
"filter and default to ``1`` and ``0`` respectively."
msgstr ""
"引数 *weightA* と *weightB* は単純なデジタルフィルタのパラメタで、デフォルト"
"値はそれぞれ ``1`` と ``0`` です。"

#: ../../library/audioop.rst:214
msgid "Reverse the samples in a fragment and returns the modified fragment."
msgstr "データ内のサンプルの順序を逆転し、変更されたデータを返します。"

#: ../../library/audioop.rst:219
msgid ""
"Return the root-mean-square of the fragment, i.e. ``sqrt(sum(S_i^2)/n)``."
msgstr ""
"データの自乗平均根(root-mean-square)、すなわち ``sqrt(sum(S_i^2)/n)`` を返し"
"ます。"

#: ../../library/audioop.rst:221
msgid "This is a measure of the power in an audio signal."
msgstr "これはオーディオ信号の強度 (power) を測る一つの目安です。"

#: ../../library/audioop.rst:226
msgid ""
"Convert a stereo fragment to a mono fragment.  The left channel is "
"multiplied by *lfactor* and the right channel by *rfactor* before adding the "
"two channels to give a mono signal."
msgstr ""
"ステレオ音声データをモノラル音声データに変換します。左チャネルのデータに "
"*lfactor*、右チャネルのデータに *rfactor* を掛けた後、二つのチャネルの値を加"
"算して単一チャネルの信号を生成します。"

#: ../../library/audioop.rst:233
msgid ""
"Generate a stereo fragment from a mono fragment.  Each pair of samples in "
"the stereo fragment are computed from the mono sample, whereby left channel "
"samples are multiplied by *lfactor* and right channel samples by *rfactor*."
msgstr ""
"モノラル音声データをステレオ音声データに変換します。ステレオ音声データの各サ"
"ンプル対は、モノラル音声データの各サンプルをそれぞれ左チャネルは *lfactor* "
"倍、右チャネルは *rfactor* 倍して生成します。"

#: ../../library/audioop.rst:240
msgid ""
"Convert sound fragments in u-LAW encoding to linearly encoded sound "
"fragments. u-LAW encoding always uses 8 bits samples, so *width* refers only "
"to the sample width of the output fragment here."
msgstr ""
"u-LAW で符号化されている音声データを線形に符号化された音声データに変換しま"
"す。u-LAW 符号化は常にサンプル当たり 8 ビットを使うため、*width* は出力音声"
"データのサンプル幅にしか使われません。"

#: ../../library/audioop.rst:244
msgid ""
"Note that operations such as :func:`.mul` or :func:`.max` make no "
"distinction between mono and stereo fragments, i.e. all samples are treated "
"equal.  If this is a problem the stereo fragment should be split into two "
"mono fragments first and recombined later.  Here is an example of how to do "
"that::"
msgstr ""
":func:`.mul` や :func:`.max` といった操作はモノラルとステレオを区別しない、す"
"なわち全てのデータを平等に扱うということに注意してください。この仕様が問題に"
"なるようなら、あらかじめステレオ音声データを二つのモノラル音声データに分割し"
"ておき、操作後に再度統合してください。そのような例を以下に示します::"

#: ../../library/audioop.rst:258
msgid ""
"If you use the ADPCM coder to build network packets and you want your "
"protocol to be stateless (i.e. to be able to tolerate packet loss) you "
"should not only transmit the data but also the state.  Note that you should "
"send the *initial* state (the one you passed to :func:`lin2adpcm`) along to "
"the decoder, not the final state (as returned by the coder).  If you want to "
"use :class:`struct.Struct` to store the state in binary you can code the "
"first element (the predicted value) in 16 bits and the second (the delta "
"index) in 8."
msgstr ""
"もし ADPCM 符号をネットワークパケットの構築に使って独自のプロトコルをステート"
"レスにしたい場合 (つまり、パケットロスを許容したい場合)は、データだけを送信し"
"て、ステートを送信すべきではありません。デコーダに従って *initial* ステート "
"(:func:`lin2adpcm` に渡される値) を送るべきで、最終状態 (符号化器が返す値) を"
"送るべきではないことに注意してください。 もし、:class:`struct.Struct` をバイ"
"ナリでの状態保存に使いたい場合は、最初の要素 (予測値) を 16bit で符号化し、２"
"番目の要素 (デルタインデックス) を 8bit で符号化できます。"

#: ../../library/audioop.rst:266
msgid ""
"The ADPCM coders have never been tried against other ADPCM coders, only "
"against themselves.  It could well be that I misinterpreted the standards in "
"which case they will not be interoperable with the respective standards."
msgstr ""
"このモジュールの ADPCM 符号のテストは自分自身に対してのみ行っており、他の "
"ADPCM 符号との間では行っていません。作者が仕様を誤解している部分もあるかもし"
"れず、それぞれの標準との間で相互運用できない場合もあり得ます。"

#: ../../library/audioop.rst:270
msgid ""
"The :func:`find\\*` routines might look a bit funny at first sight. They are "
"primarily meant to do echo cancellation.  A reasonably fast way to do this "
"is to pick the most energetic piece of the output sample, locate that in the "
"input sample and subtract the whole output sample from the input sample::"
msgstr ""
":func:`find\\*` ルーチンは一見滑稽に見えるかもしれません。これらの関数の主な"
"目的はエコー除去 (echo cancellation) にあります。エコー除去を十分高速に行うに"
"は、出力サンプル中から最も大きなエネルギーを持った部分を取り出し、この部分が"
"入力サンプル中のどこにあるかを調べ、入力サンプルから出力サンプル自体を減算し"
"ます::"
