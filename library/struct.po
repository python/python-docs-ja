# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/struct.rst:2
msgid ":mod:`struct` --- Interpret bytes as packed binary data"
msgstr ":mod:`struct` --- バイト列をパックされたバイナリデータとして解釈する"

#: ../../library/struct.rst:7
msgid "**Source code:** :source:`Lib/struct.py`"
msgstr "**ソースコード:** :source:`Lib/struct.py`"

#: ../../library/struct.rst:15
msgid ""
"This module converts between Python values and C structs represented as "
"Python :class:`bytes` objects.  Compact :ref:`format strings <struct-format-"
"strings>` describe the intended conversions to/from Python values. The "
"module's functions and objects can be used for two largely distinct "
"applications, data exchange with external sources (files or network "
"connections), or data transfer between the Python application and the C "
"layer."
msgstr ""

#: ../../library/struct.rst:25
msgid ""
"When no prefix character is given, native mode is the default. It packs or "
"unpacks data based on the platform and compiler on which the Python "
"interpreter was built. The result of packing a given C struct includes pad "
"bytes which maintain proper alignment for the C types involved; similarly, "
"alignment is taken into account when unpacking.  In contrast, when "
"communicating data between external sources, the programmer is responsible "
"for defining byte ordering and padding between elements. See :ref:`struct-"
"alignment` for details."
msgstr ""

#: ../../library/struct.rst:35
msgid ""
"Several :mod:`struct` functions (and methods of :class:`Struct`) take a "
"*buffer* argument.  This refers to objects that implement the :ref:"
"`bufferobjects` and provide either a readable or read-writable buffer.  The "
"most common types used for that purpose are :class:`bytes` and :class:"
"`bytearray`, but many other types that can be viewed as an array of bytes "
"implement the buffer protocol, so that they can be read/filled without "
"additional copying from a :class:`bytes` object."
msgstr ""
"いくつかの :mod:`struct` の関数 (および :class:`Struct` のメソッド) は "
"*buffer* 引数を取ります。 これは :ref:`bufferobjects` を実装していて読み取り"
"可能または読み書き可能なバッファを提供するオブジェクトのことです。この目的の"
"ために使われる最も一般的な型は :class:`bytes` と :class:`bytearray` ですが、"
"バイトの配列とみなすことができるような他の多くの型がバッファプロトコルを実装"
"しています。そのため、それらは :class:`bytes` オブジェクトから追加のコピーな"
"しで読み出しや書き込みができます。"

#: ../../library/struct.rst:44
msgid "Functions and Exceptions"
msgstr "関数と例外"

#: ../../library/struct.rst:46
msgid "The module defines the following exception and functions:"
msgstr "このモジュールは以下の例外と関数を定義しています:"

#: ../../library/struct.rst:51
msgid ""
"Exception raised on various occasions; argument is a string describing what "
"is wrong."
msgstr ""
"様々な状況で送出される例外です。引数は何が問題なのかを記述する文字列です。"

#: ../../library/struct.rst:57
msgid ""
"Return a bytes object containing the values *v1*, *v2*, ... packed according "
"to the format string *format*.  The arguments must match the values required "
"by the format exactly."
msgstr ""

#: ../../library/struct.rst:64
msgid ""
"Pack the values *v1*, *v2*, ... according to the format string *format* and "
"write the packed bytes into the writable buffer *buffer* starting at "
"position *offset*.  Note that *offset* is a required argument."
msgstr ""

#: ../../library/struct.rst:71
msgid ""
"Unpack from the buffer *buffer* (presumably packed by ``pack(format, ...)``) "
"according to the format string *format*.  The result is a tuple even if it "
"contains exactly one item.  The buffer's size in bytes must match the size "
"required by the format, as reflected by :func:`calcsize`."
msgstr ""

#: ../../library/struct.rst:79
msgid ""
"Unpack from *buffer* starting at position *offset*, according to the format "
"string *format*.  The result is a tuple even if it contains exactly one "
"item.  The buffer's size in bytes, starting at position *offset*, must be at "
"least the size required by the format, as reflected by :func:`calcsize`."
msgstr ""

#: ../../library/struct.rst:87
msgid ""
"Iteratively unpack from the buffer *buffer* according to the format string "
"*format*.  This function returns an iterator which will read equally sized "
"chunks from the buffer until all its contents have been consumed.  The "
"buffer's size in bytes must be a multiple of the size required by the "
"format, as reflected by :func:`calcsize`."
msgstr ""

#: ../../library/struct.rst:93
msgid "Each iteration yields a tuple as specified by the format string."
msgstr "イテレーション毎に書式文字列で指定されたタプルを yield します。"

#: ../../library/struct.rst:100
msgid ""
"Return the size of the struct (and hence of the bytes object produced by "
"``pack(format, ...)``) corresponding to the format string *format*."
msgstr ""

#: ../../library/struct.rst:107
msgid "Format Strings"
msgstr "書式文字列"

#: ../../library/struct.rst:109
msgid ""
"Format strings describe the data layout when packing and unpacking data.  "
"They are built up from :ref:`format characters<format-characters>`, which "
"specify the type of data being packed/unpacked.  In addition, special "
"characters control the :ref:`byte order, size and alignment<struct-"
"alignment>`. Each format string consists of an optional prefix character "
"which describes the overall properties of the data and one or more format "
"characters which describe the actual data values and padding."
msgstr ""

#: ../../library/struct.rst:121
msgid "Byte Order, Size, and Alignment"
msgstr "バイトオーダ、サイズ、アラインメント"

#: ../../library/struct.rst:123
msgid ""
"By default, C types are represented in the machine's native format and byte "
"order, and properly aligned by skipping pad bytes if necessary (according to "
"the rules used by the C compiler). This behavior is chosen so that the bytes "
"of a packed struct correspond exactly to the memory layout of the "
"corresponding C struct. Whether to use native byte ordering and padding or "
"standard formats depends on the application."
msgstr ""

#: ../../library/struct.rst:139
msgid ""
"Alternatively, the first character of the format string can be used to "
"indicate the byte order, size and alignment of the packed data, according to "
"the following table:"
msgstr ""
"これに代わって、フォーマット文字列の最初の文字を使って、バイトオーダやサイ"
"ズ、アラインメントを指定することができます。指定できる文字を以下のテーブルに"
"示します:"

#: ../../library/struct.rst:144
msgid "Character"
msgstr "文字"

#: ../../library/struct.rst:144
msgid "Byte order"
msgstr "バイトオーダ"

#: ../../library/struct.rst:144
msgid "Size"
msgstr "サイズ"

#: ../../library/struct.rst:144
msgid "Alignment"
msgstr "アラインメント"

#: ../../library/struct.rst:146
msgid "``@``"
msgstr "``@``"

#: ../../library/struct.rst:146 ../../library/struct.rst:148
msgid "native"
msgstr "native"

#: ../../library/struct.rst:148
msgid "``=``"
msgstr "``=``"

#: ../../library/struct.rst:148 ../../library/struct.rst:150
#: ../../library/struct.rst:152 ../../library/struct.rst:154
msgid "standard"
msgstr "standard"

#: ../../library/struct.rst:148 ../../library/struct.rst:150
#: ../../library/struct.rst:152 ../../library/struct.rst:154
msgid "none"
msgstr "none"

#: ../../library/struct.rst:150
msgid "``<``"
msgstr "``<``"

#: ../../library/struct.rst:150
msgid "little-endian"
msgstr "リトルエンディアン"

#: ../../library/struct.rst:152
msgid "``>``"
msgstr "``>``"

#: ../../library/struct.rst:152
msgid "big-endian"
msgstr "ビッグエンディアン"

#: ../../library/struct.rst:154
msgid "``!``"
msgstr "``!``"

#: ../../library/struct.rst:154
msgid "network (= big-endian)"
msgstr "ネットワーク (= ビッグエンディアン)"

#: ../../library/struct.rst:157
msgid "If the first character is not one of these, ``'@'`` is assumed."
msgstr ""
"フォーマット文字列の最初の文字が上のいずれかでない場合、``'@'`` であるとみな"
"されます。"

#: ../../library/struct.rst:159
msgid ""
"Native byte order is big-endian or little-endian, depending on the host "
"system. For example, Intel x86, AMD64 (x86-64), and Apple M1 are little-"
"endian; IBM z and many legacy architectures are big-endian. Use :data:`sys."
"byteorder` to check the endianness of your system."
msgstr ""

#: ../../library/struct.rst:164
msgid ""
"Native size and alignment are determined using the C compiler's ``sizeof`` "
"expression.  This is always combined with native byte order."
msgstr ""
"ネイティブのサイズおよびアラインメントは C コンパイラの ``sizeof`` 式で決定さ"
"れます。ネイティブのサイズおよびアラインメントはネイティブのバイトオーダと同"
"時に使われます。"

#: ../../library/struct.rst:167
msgid ""
"Standard size depends only on the format character;  see the table in the :"
"ref:`format-characters` section."
msgstr ""
"標準のサイズはフォーマット文字だけで決まります。 :ref:`format-characters` の"
"表を参照して下さい。"

#: ../../library/struct.rst:170
msgid ""
"Note the difference between ``'@'`` and ``'='``: both use native byte order, "
"but the size and alignment of the latter is standardized."
msgstr ""
"``'@'`` と ``'='`` の違いに注意してください: 両方ともネイティブのバイトオーダ"
"ですが、後者のバイトサイズとアラインメントは標準のものに合わせてあります。"

#: ../../library/struct.rst:173
msgid ""
"The form ``'!'`` represents the network byte order which is always big-"
"endian as defined in `IETF RFC 1700 <IETF RFC 1700_>`_."
msgstr ""

#: ../../library/struct.rst:176
msgid ""
"There is no way to indicate non-native byte order (force byte-swapping); use "
"the appropriate choice of ``'<'`` or ``'>'``."
msgstr ""
"バイトオーダに関して、「(強制的にバイトスワップを行う)ネイティブの逆」を指定"
"する方法はありません。``'<'`` または ``'>'`` のうちふさわしい方を選んでくださ"
"い。"

#: ../../library/struct.rst:179 ../../library/struct.rst:258
msgid "Notes:"
msgstr "注釈:"

#: ../../library/struct.rst:181
msgid ""
"Padding is only automatically added between successive structure members. No "
"padding is added at the beginning or the end of the encoded struct."
msgstr ""
"パディングは構造体のメンバの並びの中にだけ自動で追加されます。最初や最後にパ"
"ディングが追加されることはありません。"

#: ../../library/struct.rst:184
msgid ""
"No padding is added when using non-native size and alignment, e.g. with '<', "
"'>', '=', and '!'."
msgstr ""
"ネイティブでないサイズおよびアラインメントが使われる場合にはパディングは行わ"
"れません (たとえば '<', '>', '=', '!' を使った場合です)。"

#: ../../library/struct.rst:187
msgid ""
"To align the end of a structure to the alignment requirement of a particular "
"type, end the format with the code for that type with a repeat count of "
"zero.  See :ref:`struct-examples`."
msgstr ""
"特定の型によるアラインメント要求に従うように構造体の末端をそろえるには、繰り"
"返し回数をゼロにした特定の型でフォーマットを終端します。 :ref:`struct-"
"examples` を参照して下さい。"

#: ../../library/struct.rst:195
msgid "Format Characters"
msgstr "書式指定文字"

#: ../../library/struct.rst:197
msgid ""
"Format characters have the following meaning; the conversion between C and "
"Python values should be obvious given their types.  The 'Standard size' "
"column refers to the size of the packed value in bytes when using standard "
"size; that is, when the format string starts with one of ``'<'``, ``'>'``, "
"``'!'`` or ``'='``.  When using native size, the size of the packed value is "
"platform-dependent."
msgstr ""
"フォーマット文字 (format character) は以下の意味を持っています; C と Python "
"の間の変換では、値は正確に以下に指定された型でなくてはなりません: 「標準のサ"
"イズ」列は standard サイズ使用時にパックされた値が何バイトかを示します。つま"
"り、フォーマット文字列が ``'<'``, ``'>'``, ``'!'``, ``'='`` のいずれかで始"
"まっている場合のものです。native サイズ使用時にはパックされた値の大きさはプ"
"ラットフォーム依存です。"

#: ../../library/struct.rst:205
msgid "Format"
msgstr "フォーマット"

#: ../../library/struct.rst:205
msgid "C Type"
msgstr "C の型"

#: ../../library/struct.rst:205
msgid "Python type"
msgstr "Python の型"

#: ../../library/struct.rst:205
msgid "Standard size"
msgstr "標準のサイズ"

#: ../../library/struct.rst:205
msgid "Notes"
msgstr "注釈"

#: ../../library/struct.rst:207
msgid "``x``"
msgstr "``x``"

#: ../../library/struct.rst:207
msgid "pad byte"
msgstr "パディングバイト"

#: ../../library/struct.rst:207
msgid "no value"
msgstr "値なし"

#: ../../library/struct.rst:207
msgid "\\(7)"
msgstr "\\(7)"

#: ../../library/struct.rst:209
msgid "``c``"
msgstr "``c``"

#: ../../library/struct.rst:209
msgid ":c:expr:`char`"
msgstr ""

#: ../../library/struct.rst:209
msgid "bytes of length 1"
msgstr "長さ 1 のバイト列"

#: ../../library/struct.rst:209 ../../library/struct.rst:211
#: ../../library/struct.rst:213 ../../library/struct.rst:215
msgid "1"
msgstr "1"

#: ../../library/struct.rst:211
msgid "``b``"
msgstr "``b``"

#: ../../library/struct.rst:211
msgid ":c:expr:`signed char`"
msgstr ""

#: ../../library/struct.rst:211 ../../library/struct.rst:213
#: ../../library/struct.rst:217 ../../library/struct.rst:219
#: ../../library/struct.rst:221 ../../library/struct.rst:223
#: ../../library/struct.rst:225 ../../library/struct.rst:227
#: ../../library/struct.rst:229 ../../library/struct.rst:231
#: ../../library/struct.rst:234 ../../library/struct.rst:236
#: ../../library/struct.rst:248
msgid "integer"
msgstr "整数"

#: ../../library/struct.rst:211
msgid "\\(1), \\(2)"
msgstr "\\(1), \\(2)"

#: ../../library/struct.rst:213
msgid "``B``"
msgstr "``B``"

#: ../../library/struct.rst:213
msgid ":c:expr:`unsigned char`"
msgstr ""

#: ../../library/struct.rst:213 ../../library/struct.rst:217
#: ../../library/struct.rst:219 ../../library/struct.rst:221
#: ../../library/struct.rst:223 ../../library/struct.rst:225
#: ../../library/struct.rst:227 ../../library/struct.rst:229
#: ../../library/struct.rst:231
msgid "\\(2)"
msgstr "\\(2)"

#: ../../library/struct.rst:215
msgid "``?``"
msgstr "``?``"

#: ../../library/struct.rst:215
msgid ":c:expr:`_Bool`"
msgstr ""

#: ../../library/struct.rst:215
msgid "bool"
msgstr "真偽値型(bool)"

#: ../../library/struct.rst:215
msgid "\\(1)"
msgstr "\\(1)"

#: ../../library/struct.rst:217
msgid "``h``"
msgstr "``h``"

#: ../../library/struct.rst:217
msgid ":c:expr:`short`"
msgstr ""

#: ../../library/struct.rst:217 ../../library/struct.rst:219
#: ../../library/struct.rst:238
msgid "2"
msgstr "2"

#: ../../library/struct.rst:219
msgid "``H``"
msgstr "``H``"

#: ../../library/struct.rst:219
msgid ":c:expr:`unsigned short`"
msgstr ""

#: ../../library/struct.rst:221
msgid "``i``"
msgstr "``i``"

#: ../../library/struct.rst:221
msgid ":c:expr:`int`"
msgstr ""

#: ../../library/struct.rst:221 ../../library/struct.rst:223
#: ../../library/struct.rst:225 ../../library/struct.rst:227
#: ../../library/struct.rst:240
msgid "4"
msgstr "4"

#: ../../library/struct.rst:223
msgid "``I``"
msgstr "``I``"

#: ../../library/struct.rst:223
msgid ":c:expr:`unsigned int`"
msgstr ""

#: ../../library/struct.rst:225
msgid "``l``"
msgstr "``l``"

#: ../../library/struct.rst:225
msgid ":c:expr:`long`"
msgstr ""

#: ../../library/struct.rst:227
msgid "``L``"
msgstr "``L``"

#: ../../library/struct.rst:227
msgid ":c:expr:`unsigned long`"
msgstr ""

#: ../../library/struct.rst:229
msgid "``q``"
msgstr "``q``"

#: ../../library/struct.rst:229
msgid ":c:expr:`long long`"
msgstr ""

#: ../../library/struct.rst:229 ../../library/struct.rst:231
#: ../../library/struct.rst:242
msgid "8"
msgstr "8"

#: ../../library/struct.rst:231
msgid "``Q``"
msgstr "``Q``"

#: ../../library/struct.rst:231
msgid ":c:expr:`unsigned long long`"
msgstr ""

#: ../../library/struct.rst:234
msgid "``n``"
msgstr "``n``"

#: ../../library/struct.rst:234
msgid ":c:expr:`ssize_t`"
msgstr ""

#: ../../library/struct.rst:234 ../../library/struct.rst:236
msgid "\\(3)"
msgstr "\\(3)"

#: ../../library/struct.rst:236
msgid "``N``"
msgstr "``N``"

#: ../../library/struct.rst:236
msgid ":c:expr:`size_t`"
msgstr ""

#: ../../library/struct.rst:238
msgid "``e``"
msgstr "``e``"

#: ../../library/struct.rst:238
msgid "\\(6)"
msgstr "\\(6)"

#: ../../library/struct.rst:238 ../../library/struct.rst:240
#: ../../library/struct.rst:242
msgid "float"
msgstr "浮動小数点数"

#: ../../library/struct.rst:238 ../../library/struct.rst:240
#: ../../library/struct.rst:242
msgid "\\(4)"
msgstr "\\(4)"

#: ../../library/struct.rst:240
msgid "``f``"
msgstr "``f``"

#: ../../library/struct.rst:240
msgid ":c:expr:`float`"
msgstr ""

#: ../../library/struct.rst:242
msgid "``d``"
msgstr "``d``"

#: ../../library/struct.rst:242
msgid ":c:expr:`double`"
msgstr ""

#: ../../library/struct.rst:244
msgid "``s``"
msgstr "``s``"

#: ../../library/struct.rst:244 ../../library/struct.rst:246
msgid ":c:expr:`char[]`"
msgstr ""

#: ../../library/struct.rst:244 ../../library/struct.rst:246
msgid "bytes"
msgstr "bytes"

#: ../../library/struct.rst:244
msgid "\\(9)"
msgstr "\\(9)"

#: ../../library/struct.rst:246
msgid "``p``"
msgstr "``p``"

#: ../../library/struct.rst:246
msgid "\\(8)"
msgstr "\\(8)"

#: ../../library/struct.rst:248
msgid "``P``"
msgstr "``P``"

#: ../../library/struct.rst:248
msgid ":c:expr:`void \\*`"
msgstr ""

#: ../../library/struct.rst:248
msgid "\\(5)"
msgstr "\\(5)"

#: ../../library/struct.rst:251
msgid "Added support for the ``'n'`` and ``'N'`` formats."
msgstr "``'n'`` および ``'N'`` フォーマットのサポートが追加されました。"

#: ../../library/struct.rst:254
msgid "Added support for the ``'e'`` format."
msgstr "``'e'`` フォーマットのサポートが追加されました。"

#: ../../library/struct.rst:263
msgid ""
"The ``'?'`` conversion code corresponds to the :c:expr:`_Bool` type defined "
"by C99. If this type is not available, it is simulated using a :c:expr:"
"`char`. In standard mode, it is always represented by one byte."
msgstr ""

#: ../../library/struct.rst:268
msgid ""
"When attempting to pack a non-integer using any of the integer conversion "
"codes, if the non-integer has a :meth:`__index__` method then that method is "
"called to convert the argument to an integer before packing."
msgstr ""
"非整数を整数の変換コードを使ってパックしようとすると、非整数が :meth:"
"`__index__` メソッドを持っていた場合は、整数に変換するためにパックする前にそ"
"のメソッドが呼ばれます。"

#: ../../library/struct.rst:272
msgid "Added use of the :meth:`__index__` method for non-integers."
msgstr ""

#: ../../library/struct.rst:276
msgid ""
"The ``'n'`` and ``'N'`` conversion codes are only available for the native "
"size (selected as the default or with the ``'@'`` byte order character). For "
"the standard size, you can use whichever of the other integer formats fits "
"your application."
msgstr ""
"``'n'`` および ``'N'`` 変換コードは (デフォルトもしくはバイトオーダ文字 "
"``'@'`` 付きで選択される) native サイズ使用時のみ利用できます。standard サイ"
"ズ使用時には、自身のアプリケーションに適する他の整数フォーマットを使うことが"
"できます。"

#: ../../library/struct.rst:282
msgid ""
"For the ``'f'``, ``'d'`` and ``'e'`` conversion codes, the packed "
"representation uses the IEEE 754 binary32, binary64 or binary16 format (for "
"``'f'``, ``'d'`` or ``'e'`` respectively), regardless of the floating-point "
"format used by the platform."
msgstr ""
"``'f'`` 、 ``'d'`` および ``'e'`` 変換コードについて、パックされた表現は "
"IEEE 754 binary32 (``'f'`` の場合) 、 binary64 (``'d'`` の場合) 、または"
"binary16(``'e'`` の場合) フォーマットが、プラットフォームにおける浮動小数点数"
"のフォーマットに関係なく使われます。"

#: ../../library/struct.rst:288
msgid ""
"The ``'P'`` format character is only available for the native byte ordering "
"(selected as the default or with the ``'@'`` byte order character). The byte "
"order character ``'='`` chooses to use little- or big-endian ordering based "
"on the host system. The struct module does not interpret this as native "
"ordering, so the ``'P'`` format is not available."
msgstr ""
"``'P'`` フォーマット文字はネイティブバイトオーダでのみ利用可能です (デフォル"
"トのネットワークバイトオーダに設定するか、``'@'`` バイトオーダ指定文字を指定"
"しなければなりません)。``'='`` を指定した場合、ホスト計算機のバイトオーダに基"
"づいてリトルエンディアンとビッグエンディアンのどちらを使うかを決めます。"
"struct モジュールはこの設定をネイティブのオーダ設定として解釈しないので、"
"``'P'`` を使うことはできません。"

#: ../../library/struct.rst:295
msgid ""
"The IEEE 754 binary16 \"half precision\" type was introduced in the 2008 "
"revision of the `IEEE 754 standard <ieee 754 standard_>`_. It has a sign "
"bit, a 5-bit exponent and 11-bit precision (with 10 bits explicitly stored), "
"and can represent numbers between approximately ``6.1e-05`` and ``6.5e+04`` "
"at full precision. This type is not widely supported by C compilers: on a "
"typical machine, an unsigned short can be used for storage, but not for math "
"operations. See the Wikipedia page on the `half-precision floating-point "
"format <half precision format_>`_ for more information."
msgstr ""
"IEEE 754 の binary16 \"半精度\" 型は、 `IEEE 754 standard <ieee 754 "
"standard_>`_ の2008 年の改訂で導入されました。\n"
"半精度型は、符号 bit 、5 bit の指数部、 11 bit の精度 (明示的には 10 bit が保"
"存される) を持ち、おおよそ ``6.1e-05`` から ``6.5e+04`` までの数を完全な精度"
"で表現できます。\n"
"この型は C コンパイラでは広くはサポートされていません: たいていのマシンでは、"
"保存するのに unsigned short が使えますが、数学の演算には使えません。\n"
"詳しいことは Wikipedia の `half-precision floating-point format <half "
"precision format_>`_ のページを参照してください。"

#: ../../library/struct.rst:305
msgid "When packing, ``'x'`` inserts one NUL byte."
msgstr ""

#: ../../library/struct.rst:308
msgid ""
"The ``'p'`` format character encodes a \"Pascal string\", meaning a short "
"variable-length string stored in a *fixed number of bytes*, given by the "
"count. The first byte stored is the length of the string, or 255, whichever "
"is smaller.  The bytes of the string follow.  If the string passed in to :"
"func:`pack` is too long (longer than the count minus 1), only the leading "
"``count-1`` bytes of the string are stored.  If the string is shorter than "
"``count-1``, it is padded with null bytes so that exactly count bytes in all "
"are used.  Note that for :func:`unpack`, the ``'p'`` format character "
"consumes ``count`` bytes, but that the string returned can never contain "
"more than 255 bytes."
msgstr ""
"フォーマット文字 ``'p'`` は \"Pascal 文字列 (pascal string)\"  をコードしま"
"す。Pascal 文字列は count で与えられる *固定長のバイト列* に収められた短い可"
"変長の文字列です。このデータの先頭の 1 バイトには文字列の長さか255 のうち、小"
"さい方の数が収められます。その後に文字列のバイトデータが続きます。 :func:"
"`pack` に渡された Pascal 文字列の長さが長すぎた (count-1 よりも長い) 場合、先"
"頭の ``count-1`` バイトが書き込まれます。文字列が ``count-1`` よりも短い場"
"合、指定した count バイトに達するまでの残りの部分はヌルで埋められます。 :"
"func:`unpack` では、フォーマット文字 ``'p'`` は指定された ``count`` バイトだ"
"けデータを読み込みますが、返される文字列は決して 255 文字を超えることはないの"
"で注意してください。"

#: ../../library/struct.rst:320
msgid ""
"For the ``'s'`` format character, the count is interpreted as the length of "
"the bytes, not a repeat count like for the other format characters; for "
"example, ``'10s'`` means a single 10-byte string mapping to or from a single "
"Python byte string, while ``'10c'`` means 10 separate one byte character "
"elements (e.g., ``cccccccccc``) mapping to or from ten different Python byte "
"objects. (See :ref:`struct-examples` for a concrete demonstration of the "
"difference.) If a count is not given, it defaults to 1.  For packing, the "
"string is truncated or padded with null bytes as appropriate to make it fit. "
"For unpacking, the resulting bytes object always has exactly the specified "
"number of bytes.  As a special case, ``'0s'`` means a single, empty string "
"(while ``'0c'`` means 0 characters)."
msgstr ""

#: ../../library/struct.rst:333
msgid ""
"A format character may be preceded by an integral repeat count.  For "
"example, the format string ``'4h'`` means exactly the same as ``'hhhh'``."
msgstr ""
"フォーマット文字の前に整数をつけ、繰り返し回数 (count) を指定することができま"
"す。例えば、フォーマット文字列 ``'4h'`` は ``'hhhh'`` と全く同じ意味です。"

#: ../../library/struct.rst:336
msgid ""
"Whitespace characters between formats are ignored; a count and its format "
"must not contain whitespace though."
msgstr ""
"フォーマット文字間の空白文字は無視されます; count とフォーマット文字の間には"
"スペースを入れてはいけません。"

#: ../../library/struct.rst:339
msgid ""
"When packing a value ``x`` using one of the integer formats (``'b'``, "
"``'B'``, ``'h'``, ``'H'``, ``'i'``, ``'I'``, ``'l'``, ``'L'``, ``'q'``, "
"``'Q'``), if ``x`` is outside the valid range for that format then :exc:"
"`struct.error` is raised."
msgstr ""
"整数フォーマット (``'b'``, ``'B'``, ``'h'``, ``'H'``, ``'i'``, ``'I'``, "
"``'l'``, ``'L'``, ``'q'``, ``'Q'``) のいずれかを使って値 ``x`` をパックすると"
"き ``x`` がフォーマットの適切な値の範囲に無い場合、 :exc:`struct.error` が送"
"出されます。"

#: ../../library/struct.rst:344
msgid ""
"Previously, some of the integer formats wrapped out-of-range values and "
"raised :exc:`DeprecationWarning` instead of :exc:`struct.error`."
msgstr ""

#: ../../library/struct.rst:350
msgid ""
"For the ``'?'`` format character, the return value is either :const:`True` "
"or :const:`False`. When packing, the truth value of the argument object is "
"used. Either 0 or 1 in the native or standard bool representation will be "
"packed, and any non-zero value will be ``True`` when unpacking."
msgstr ""
"``'?'`` フォーマット文字では、返り値は :const:`True` または :const:`False` で"
"す。パックするときには、引数オブジェクトの論理値としての値が使われます。 0 ま"
"たは 1 のネイティブや標準の真偽値表現でパックされ、アンパックされるときはゼロ"
"でない値は ``True`` になります。"

#: ../../library/struct.rst:360
msgid "Examples"
msgstr "使用例"

#: ../../library/struct.rst:363
msgid ""
"Native byte order examples (designated by the ``'@'`` format prefix or lack "
"of any prefix character) may not match what the reader's machine produces as "
"that depends on the platform and compiler."
msgstr ""

#: ../../library/struct.rst:368
msgid ""
"Pack and unpack integers of three different sizes, using big endian "
"ordering::"
msgstr ""

#: ../../library/struct.rst:379
msgid "Attempt to pack an integer which is too large for the defined field::"
msgstr ""

#: ../../library/struct.rst:386
msgid ""
"Demonstrate the difference between ``'s'`` and ``'c'`` format characters::"
msgstr ""

#: ../../library/struct.rst:394
msgid ""
"Unpacked fields can be named by assigning them to variables or by wrapping "
"the result in a named tuple::"
msgstr ""
"アンパックした結果のフィールドは、変数に割り当てるか named tuple でラップする"
"ことによって名前を付けることができます::"

#: ../../library/struct.rst:405
msgid ""
"The ordering of format characters may have an impact on size in native mode "
"since padding is implicit. In standard mode, the user is responsible for "
"inserting any desired padding. Note in the first ``pack`` call below that "
"three NUL bytes were added after the packed ``'#'`` to align the following "
"integer on a four-byte boundary. In this example, the output was produced on "
"a little endian machine::"
msgstr ""

#: ../../library/struct.rst:422
msgid ""
"The following format ``'llh0l'`` results in two pad bytes being added at the "
"end, assuming the platform's longs are aligned on 4-byte boundaries::"
msgstr ""

#: ../../library/struct.rst:432
msgid "Module :mod:`array`"
msgstr ":mod:`array` モジュール"

#: ../../library/struct.rst:432
msgid "Packed binary storage of homogeneous data."
msgstr "一様なデータ型からなるバイナリ記録データのパック。"

#: ../../library/struct.rst:435
msgid "Module :mod:`json`"
msgstr ":mod:`json` モジュール"

#: ../../library/struct.rst:435
msgid "JSON encoder and decoder."
msgstr ""

#: ../../library/struct.rst:437
msgid "Module :mod:`pickle`"
msgstr ":mod:`pickle` モジュール"

#: ../../library/struct.rst:438
msgid "Python object serialization."
msgstr ""

#: ../../library/struct.rst:444
msgid "Applications"
msgstr ""

#: ../../library/struct.rst:446
msgid ""
"Two main applications for the :mod:`struct` module exist, data interchange "
"between Python and C code within an application or another application "
"compiled using the same compiler (:ref:`native formats<struct-native-"
"formats>`), and data interchange between applications using agreed upon data "
"layout (:ref:`standard formats<struct-standard-formats>`).  Generally "
"speaking, the format strings constructed for these two domains are distinct."
msgstr ""

#: ../../library/struct.rst:457
msgid "Native Formats"
msgstr ""

#: ../../library/struct.rst:459
msgid ""
"When constructing format strings which mimic native layouts, the compiler "
"and machine architecture determine byte ordering and padding. In such cases, "
"the ``@`` format character should be used to specify native byte ordering "
"and data sizes.  Internal pad bytes are normally inserted automatically.  It "
"is possible that a zero-repeat format code will be needed at the end of a "
"format string to round up to the correct byte boundary for proper alignment "
"of consective chunks of data."
msgstr ""

#: ../../library/struct.rst:467
msgid ""
"Consider these two simple examples (on a 64-bit, little-endian machine)::"
msgstr ""

#: ../../library/struct.rst:475
msgid ""
"Data is not padded to an 8-byte boundary at the end of the second format "
"string without the use of extra padding.  A zero-repeat format code solves "
"that problem::"
msgstr ""

#: ../../library/struct.rst:482
msgid ""
"The ``'x'`` format code can be used to specify the repeat, but for native "
"formats it is better to use a zero-repeat format like ``'0l'``."
msgstr ""

#: ../../library/struct.rst:485
msgid ""
"By default, native byte ordering and alignment is used, but it is better to "
"be explicit and use the ``'@'`` prefix character."
msgstr ""

#: ../../library/struct.rst:492
msgid "Standard Formats"
msgstr ""

#: ../../library/struct.rst:494
msgid ""
"When exchanging data beyond your process such as networking or storage, be "
"precise.  Specify the exact byte order, size, and alignment.  Do not assume "
"they match the native order of a particular machine. For example, network "
"byte order is big-endian, while many popular CPUs are little-endian.  By "
"defining this explicitly, the user need not care about the specifics of the "
"platform their code is running on. The first character should typically be "
"``<`` or ``>`` (or ``!``).  Padding is the responsibility of the "
"programmer.  The zero-repeat format character won't work.  Instead, the user "
"must explicitly add ``'x'`` pad bytes where needed.  Revisiting the examples "
"from the previous section, we have::"
msgstr ""

#: ../../library/struct.rst:521
msgid ""
"The above results (executed on a 64-bit machine) aren't guaranteed to match "
"when executed on different machines.  For example, the examples below were "
"executed on a 32-bit machine::"
msgstr ""

#: ../../library/struct.rst:536
msgid "Classes"
msgstr "クラス"

#: ../../library/struct.rst:538
msgid "The :mod:`struct` module also defines the following type:"
msgstr ":mod:`struct` モジュールは次の型を定義します:"

#: ../../library/struct.rst:543
msgid ""
"Return a new Struct object which writes and reads binary data according to "
"the format string *format*.  Creating a ``Struct`` object once and calling "
"its methods is more efficient than calling module-level functions with the "
"same format since the format string is only compiled once."
msgstr ""

#: ../../library/struct.rst:550
msgid ""
"The compiled versions of the most recent format strings passed to :class:"
"`Struct` and the module-level functions are cached, so programs that use "
"only a few format strings needn't worry about reusing a single :class:"
"`Struct` instance."
msgstr ""

#: ../../library/struct.rst:555
msgid "Compiled Struct objects support the following methods and attributes:"
msgstr ""
"コンパイルされた Struct オブジェクトは以下のメソッドと属性をサポートします:"

#: ../../library/struct.rst:559
msgid ""
"Identical to the :func:`pack` function, using the compiled format. "
"(``len(result)`` will equal :attr:`size`.)"
msgstr ""
":func:`pack` 関数と同じ、コンパイルされたフォーマットを利用するメソッドで"
"す。 (``len(result)`` は :attr:`size` と等しいでしょう)"

#: ../../library/struct.rst:565
msgid "Identical to the :func:`pack_into` function, using the compiled format."
msgstr ""
":func:`pack_into` 関数と同じ、コンパイルされたフォーマットを利用するメソッド"
"です。"

#: ../../library/struct.rst:570
msgid ""
"Identical to the :func:`unpack` function, using the compiled format. The "
"buffer's size in bytes must equal :attr:`size`."
msgstr ""
":func:`unpack` 関数と同じ、コンパイルされたフォーマットを利用するメソッドで"
"す。 (buffer のバイト数は :attr:`size` と等しくなければなりません)。"

#: ../../library/struct.rst:576
msgid ""
"Identical to the :func:`unpack_from` function, using the compiled format. "
"The buffer's size in bytes, starting at position *offset*, must be at least :"
"attr:`size`."
msgstr ""

#: ../../library/struct.rst:583
msgid ""
"Identical to the :func:`iter_unpack` function, using the compiled format. "
"The buffer's size in bytes must be a multiple of :attr:`size`."
msgstr ""
":func:`iter_unpack` 関数と同じ、コンパイルされたフォーマットを利用するメソッ"
"ドです。 (buffer のバイト数は :attr:`size` の倍数でなければなりません)。"

#: ../../library/struct.rst:590
msgid "The format string used to construct this Struct object."
msgstr ""
"この Struct オブジェクトを作成する時に利用されたフォーマット文字列です。"

#: ../../library/struct.rst:592
msgid "The format string type is now :class:`str` instead of :class:`bytes`."
msgstr ""

#: ../../library/struct.rst:597
msgid ""
"The calculated size of the struct (and hence of the bytes object produced by "
"the :meth:`pack` method) corresponding to :attr:`format`."
msgstr ""
":attr:`format` 属性に対応する構造体の (従って :meth:`pack` メソッドによって作"
"成されるバイト列オブジェクトの) サイズです。"
