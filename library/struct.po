# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# E. Kawashima, 2017
# Masato HASHIMOTO <cabezon.hashimoto@gmail.com>, 2017
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2017
# Shun Sakurai, 2017
# ごはんですよ <uchida@turbare.net>, 2017
# Arihiro TAKASE, 2017
# Inada Naoki <songofacandy@gmail.com>, 2017
# Osamu NAKAMURA, 2017
# tomo, 2019
# 秘湯 <xwhhsprings@gmail.com>, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 05:02+0000\n"
"PO-Revision-Date: 2017-02-16 23:28+0000\n"
"Last-Translator: 秘湯 <xwhhsprings@gmail.com>, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/struct.rst:2
msgid ":mod:`struct` --- Interpret bytes as packed binary data"
msgstr ":mod:`struct` --- バイト列をパックされたバイナリデータとして解釈する"

#: ../../library/struct.rst:7
msgid "**Source code:** :source:`Lib/struct.py`"
msgstr "**ソースコード:** :source:`Lib/struct.py`"

#: ../../library/struct.rst:15
msgid ""
"This module performs conversions between Python values and C structs "
"represented as Python :class:`bytes` objects.  This can be used in handling "
"binary data stored in files or from network connections, among other "
"sources.  It uses :ref:`struct-format-strings` as compact descriptions of "
"the layout of the C structs and the intended conversion to/from Python "
"values."
msgstr ""
"このモジュールは、 Python の値と Python :class:`bytes` オブジェクトとして表さ"
"れる C の構造体データとの間の変換を実現します。このモジュールは特に、ファイル"
"に保存されたり、ネットワーク接続を経由したバイナリデータを扱うときに使われま"
"す。このモジュールでは、C 構造体のレイアウトおよび Python の値との間で行いた"
"い変換をコンパクトに表現するために、 :ref:`struct-format-strings` を使いま"
"す。"

#: ../../library/struct.rst:23
msgid ""
"By default, the result of packing a given C struct includes pad bytes in "
"order to maintain proper alignment for the C types involved; similarly, "
"alignment is taken into account when unpacking.  This behavior is chosen so "
"that the bytes of a packed struct correspond exactly to the layout in memory "
"of the corresponding C struct.  To handle platform-independent data formats "
"or omit implicit pad bytes, use ``standard`` size and alignment instead of "
"``native`` size and alignment: see :ref:`struct-alignment` for details."
msgstr ""
"デフォルトでは、与えられた C の構造体をパックする際に、関連する C データ型を"
"適切にアラインメント(alignment)するために数バイトのパディングを行うことがあり"
"ます。この挙動が選択されたのは、パックされた構造体のバイト表現を対応する C 構"
"造体のメモリレイアウトに正確に対応させるためです。プラットフォーム独立のデー"
"タフォーマットを扱ったり、隠れたパディングを排除したりするには、サイズ及びア"
"ラインメントとして ``native`` の代わりに ``standard`` を使うようにします: 詳"
"しくは :ref:`struct-alignment` を参照して下さい。"

#: ../../library/struct.rst:31
msgid ""
"Several :mod:`struct` functions (and methods of :class:`Struct`) take a "
"*buffer* argument.  This refers to objects that implement the :ref:"
"`bufferobjects` and provide either a readable or read-writable buffer.  The "
"most common types used for that purpose are :class:`bytes` and :class:"
"`bytearray`, but many other types that can be viewed as an array of bytes "
"implement the buffer protocol, so that they can be read/filled without "
"additional copying from a :class:`bytes` object."
msgstr ""
"いくつかの :mod:`struct` の関数 (および :class:`Struct` のメソッド) は "
"*buffer* 引数を取ります。 これは :ref:`bufferobjects` を実装していて読み取り"
"可能または読み書き可能なバッファを提供するオブジェクトのことです。この目的の"
"ために使われる最も一般的な型は :class:`bytes` と :class:`bytearray` ですが、"
"バイトの配列とみなすことができるような他の多くの型がバッファプロトコルを実装"
"しています。そのため、それらは :class:`bytes` オブジェクトから追加のコピーな"
"しで読み出しや書き込みができます。"

#: ../../library/struct.rst:40
msgid "Functions and Exceptions"
msgstr "関数と例外"

#: ../../library/struct.rst:42
msgid "The module defines the following exception and functions:"
msgstr "このモジュールは以下の例外と関数を定義しています:"

#: ../../library/struct.rst:47
msgid ""
"Exception raised on various occasions; argument is a string describing what "
"is wrong."
msgstr ""
"様々な状況で送出される例外です。引数は何が問題なのかを記述する文字列です。"

#: ../../library/struct.rst:53
msgid ""
"Return a bytes object containing the values *v1*, *v2*, ... packed according "
"to the format string *format*.  The arguments must match the values required "
"by the format exactly."
msgstr ""
"フォーマット文字列 *format* に従い値 *v1*, *v2*, ...  をパックして、バイト列"
"オブジェクトを返します。引数は指定したフォーマットが要求する型と正確に一致し"
"ていなければなりません。"

#: ../../library/struct.rst:60
msgid ""
"Pack the values *v1*, *v2*, ... according to the format string *format* and "
"write the packed bytes into the writable buffer *buffer* starting at "
"position *offset*.  Note that *offset* is a required argument."
msgstr ""
"フォーマット文字列 *format* に従い値 *v1*, *v2*, ...  をパックしてバイト列に"
"し、書き込み可能な *buffer* のオフセット *offset* 位置より書き込みます。オフ"
"セットは省略出来ません。"

#: ../../library/struct.rst:67
msgid ""
"Unpack from the buffer *buffer* (presumably packed by ``pack(format, ...)``) "
"according to the format string *format*.  The result is a tuple even if it "
"contains exactly one item.  The buffer's size in bytes must match the size "
"required by the format, as reflected by :func:`calcsize`."
msgstr ""
"(``pack(format, ...)`` でパックされたであろう) バッファ *buffer* を、書式文字"
"列 *format* に従ってアンパックします。\n"
"値が一つしかない場合を含め、結果はタプルで返されます。\n"
"バッファのバイトサイズは、 :func:`calcsize` の返り値である書式文字列が要求す"
"るサイズと一致しなければなりません。"

#: ../../library/struct.rst:75
msgid ""
"Unpack from *buffer* starting at position *offset*, according to the format "
"string *format*.  The result is a tuple even if it contains exactly one "
"item.  The buffer's size in bytes, starting at position *offset*, must be at "
"least the size required by the format, as reflected by :func:`calcsize`."
msgstr ""
"バッファ *buffer* を、 *offset* の位置から書式文字列 *format* に従ってアン"
"パックします。\n"
"値が一つしかない場合を含め、結果はタプルで返されます。\n"
"*offset* を始点とするバッファのバイトサイズは、少なくとも :func:`calcsize` の"
"返り値である書式文字列が要求するサイズでなければなりません。"

#: ../../library/struct.rst:83
msgid ""
"Iteratively unpack from the buffer *buffer* according to the format string "
"*format*.  This function returns an iterator which will read equally-sized "
"chunks from the buffer until all its contents have been consumed.  The "
"buffer's size in bytes must be a multiple of the size required by the "
"format, as reflected by :func:`calcsize`."
msgstr ""

#: ../../library/struct.rst:89
msgid "Each iteration yields a tuple as specified by the format string."
msgstr "イテレーション毎に書式文字列で指定されたタプルを yield します。"

#: ../../library/struct.rst:96
msgid ""
"Return the size of the struct (and hence of the bytes object produced by "
"``pack(format, ...)``) corresponding to the format string *format*."
msgstr ""
"書式文字列 *format* に従って、構造体 (それと ``pack(format, ...)`` によって作"
"成されるバイト列オブジェクト) のサイズを返します。"

#: ../../library/struct.rst:103
msgid "Format Strings"
msgstr "書式文字列"

#: ../../library/struct.rst:105
msgid ""
"Format strings are the mechanism used to specify the expected layout when "
"packing and unpacking data.  They are built up from :ref:`format-"
"characters`, which specify the type of data being packed/unpacked.  In "
"addition, there are special characters for controlling the :ref:`struct-"
"alignment`."
msgstr ""
"書式文字列はデータをパックしたりアンパックしたりするときの期待されるレイアウ"
"トを指定するためのメカニズムです。文字列はパック/アンパックされるデータの型を"
"指定する :ref:`format-characters` から組み立てられます。さらに、 :ref:"
"`struct-alignment` を制御するための特殊文字もあります。"

#: ../../library/struct.rst:114
msgid "Byte Order, Size, and Alignment"
msgstr "バイトオーダ、サイズ、アラインメント"

#: ../../library/struct.rst:116
msgid ""
"By default, C types are represented in the machine's native format and byte "
"order, and properly aligned by skipping pad bytes if necessary (according to "
"the rules used by the C compiler)."
msgstr ""
"デフォルトでは、C での型はマシンのネイティブ (native) の形式およびバイトオー"
"ダ (byte order) で表され、適切にアラインメント (alignment) するために、必要に"
"応じて数バイトのパディングを行ってスキップします (これは C コンパイラが用いる"
"ルールに従います)。"

#: ../../library/struct.rst:127
msgid ""
"Alternatively, the first character of the format string can be used to "
"indicate the byte order, size and alignment of the packed data, according to "
"the following table:"
msgstr ""
"これに代わって、フォーマット文字列の最初の文字を使って、バイトオーダやサイ"
"ズ、アラインメントを指定することができます。指定できる文字を以下のテーブルに"
"示します:"

#: ../../library/struct.rst:132
msgid "Character"
msgstr "文字"

#: ../../library/struct.rst:132
msgid "Byte order"
msgstr "バイトオーダ"

#: ../../library/struct.rst:132
msgid "Size"
msgstr "サイズ"

#: ../../library/struct.rst:132
msgid "Alignment"
msgstr "アラインメント"

#: ../../library/struct.rst:134
msgid "``@``"
msgstr "``@``"

#: ../../library/struct.rst:134 ../../library/struct.rst:136
msgid "native"
msgstr "native"

#: ../../library/struct.rst:136
msgid "``=``"
msgstr "``=``"

#: ../../library/struct.rst:136 ../../library/struct.rst:138
#: ../../library/struct.rst:140 ../../library/struct.rst:142
msgid "standard"
msgstr "standard"

#: ../../library/struct.rst:136 ../../library/struct.rst:138
#: ../../library/struct.rst:140 ../../library/struct.rst:142
msgid "none"
msgstr "none"

#: ../../library/struct.rst:138
msgid "``<``"
msgstr "``<``"

#: ../../library/struct.rst:138
msgid "little-endian"
msgstr "リトルエンディアン"

#: ../../library/struct.rst:140
msgid "``>``"
msgstr "``>``"

#: ../../library/struct.rst:140
msgid "big-endian"
msgstr "ビッグエンディアン"

#: ../../library/struct.rst:142
msgid "``!``"
msgstr "``!``"

#: ../../library/struct.rst:142
msgid "network (= big-endian)"
msgstr "ネットワーク (= ビッグエンディアン)"

#: ../../library/struct.rst:145
msgid "If the first character is not one of these, ``'@'`` is assumed."
msgstr ""
"フォーマット文字列の最初の文字が上のいずれかでない場合、``'@'`` であるとみな"
"されます。"

#: ../../library/struct.rst:147
msgid ""
"Native byte order is big-endian or little-endian, depending on the host "
"system. For example, Intel x86 and AMD64 (x86-64) are little-endian; "
"Motorola 68000 and PowerPC G5 are big-endian; ARM and Intel Itanium feature "
"switchable endianness (bi-endian). Use ``sys.byteorder`` to check the "
"endianness of your system."
msgstr ""
"ネイティブのバイトオーダはビッグエンディアンかリトルエンディアンで、ホスト計"
"算機に依存します。例えば、Intel x86 および AMD64 (x86-64) はリトルエンディア"
"ンです。Motorola 68000 および PowerPC G5 はビッグエンディアンです。ARM およ"
"び Intel Itanium はエンディアンを切り替えられる機能を備えています (バイエン"
"ディアン)。使っているシステムでのエンディアンは ``sys.byteorder`` を使って調"
"べて下さい。"

#: ../../library/struct.rst:153
msgid ""
"Native size and alignment are determined using the C compiler's ``sizeof`` "
"expression.  This is always combined with native byte order."
msgstr ""
"ネイティブのサイズおよびアラインメントは C コンパイラの ``sizeof`` 式で決定さ"
"れます。ネイティブのサイズおよびアラインメントはネイティブのバイトオーダと同"
"時に使われます。"

#: ../../library/struct.rst:156
msgid ""
"Standard size depends only on the format character;  see the table in the :"
"ref:`format-characters` section."
msgstr ""
"標準のサイズはフォーマット文字だけで決まります。 :ref:`format-characters` の"
"表を参照して下さい。"

#: ../../library/struct.rst:159
msgid ""
"Note the difference between ``'@'`` and ``'='``: both use native byte order, "
"but the size and alignment of the latter is standardized."
msgstr ""
"``'@'`` と ``'='`` の違いに注意してください: 両方ともネイティブのバイトオーダ"
"ですが、後者のバイトサイズとアラインメントは標準のものに合わせてあります。"

#: ../../library/struct.rst:162
msgid ""
"The form ``'!'`` represents the network byte order which is always big-"
"endian as defined in `IETF RFC 1700 <IETF RFC 1700_>`_."
msgstr ""

#: ../../library/struct.rst:165
msgid ""
"There is no way to indicate non-native byte order (force byte-swapping); use "
"the appropriate choice of ``'<'`` or ``'>'``."
msgstr ""
"バイトオーダに関して、「(強制的にバイトスワップを行う)ネイティブの逆」を指定"
"する方法はありません。``'<'`` または ``'>'`` のうちふさわしい方を選んでくださ"
"い。"

#: ../../library/struct.rst:168 ../../library/struct.rst:247
msgid "Notes:"
msgstr "注釈:"

#: ../../library/struct.rst:170
msgid ""
"Padding is only automatically added between successive structure members. No "
"padding is added at the beginning or the end of the encoded struct."
msgstr ""
"パディングは構造体のメンバの並びの中にだけ自動で追加されます。最初や最後にパ"
"ディングが追加されることはありません。"

#: ../../library/struct.rst:173
msgid ""
"No padding is added when using non-native size and alignment, e.g. with '<', "
"'>', '=', and '!'."
msgstr ""
"ネイティブでないサイズおよびアラインメントが使われる場合にはパディングは行わ"
"れません (たとえば '<', '>', '=', '!' を使った場合です)。"

#: ../../library/struct.rst:176
msgid ""
"To align the end of a structure to the alignment requirement of a particular "
"type, end the format with the code for that type with a repeat count of "
"zero.  See :ref:`struct-examples`."
msgstr ""
"特定の型によるアラインメント要求に従うように構造体の末端をそろえるには、繰り"
"返し回数をゼロにした特定の型でフォーマットを終端します。 :ref:`struct-"
"examples` を参照して下さい。"

#: ../../library/struct.rst:184
msgid "Format Characters"
msgstr "書式指定文字"

#: ../../library/struct.rst:186
msgid ""
"Format characters have the following meaning; the conversion between C and "
"Python values should be obvious given their types.  The 'Standard size' "
"column refers to the size of the packed value in bytes when using standard "
"size; that is, when the format string starts with one of ``'<'``, ``'>'``, "
"``'!'`` or ``'='``.  When using native size, the size of the packed value is "
"platform-dependent."
msgstr ""
"フォーマット文字 (format character) は以下の意味を持っています; C と Python "
"の間の変換では、値は正確に以下に指定された型でなくてはなりません: 「標準のサ"
"イズ」列は standard サイズ使用時にパックされた値が何バイトかを示します。つま"
"り、フォーマット文字列が ``'<'``, ``'>'``, ``'!'``, ``'='`` のいずれかで始"
"まっている場合のものです。native サイズ使用時にはパックされた値の大きさはプ"
"ラットフォーム依存です。"

#: ../../library/struct.rst:194
msgid "Format"
msgstr "フォーマット"

#: ../../library/struct.rst:194
msgid "C Type"
msgstr "C の型"

#: ../../library/struct.rst:194
msgid "Python type"
msgstr "Python の型"

#: ../../library/struct.rst:194
msgid "Standard size"
msgstr "標準のサイズ"

#: ../../library/struct.rst:194
msgid "Notes"
msgstr "注釈"

#: ../../library/struct.rst:196
msgid "``x``"
msgstr "``x``"

#: ../../library/struct.rst:196
msgid "pad byte"
msgstr "パディングバイト"

#: ../../library/struct.rst:196
msgid "no value"
msgstr "値なし"

#: ../../library/struct.rst:198
msgid "``c``"
msgstr "``c``"

#: ../../library/struct.rst:198
msgid ":c:type:`char`"
msgstr ":c:type:`char`"

#: ../../library/struct.rst:198
msgid "bytes of length 1"
msgstr "長さ 1 のバイト列"

#: ../../library/struct.rst:198 ../../library/struct.rst:200
#: ../../library/struct.rst:202 ../../library/struct.rst:204
msgid "1"
msgstr "1"

#: ../../library/struct.rst:200
msgid "``b``"
msgstr "``b``"

#: ../../library/struct.rst:200
msgid ":c:type:`signed char`"
msgstr ":c:type:`signed char`"

#: ../../library/struct.rst:200 ../../library/struct.rst:202
#: ../../library/struct.rst:206 ../../library/struct.rst:208
#: ../../library/struct.rst:210 ../../library/struct.rst:212
#: ../../library/struct.rst:214 ../../library/struct.rst:216
#: ../../library/struct.rst:218 ../../library/struct.rst:220
#: ../../library/struct.rst:223 ../../library/struct.rst:225
#: ../../library/struct.rst:237
msgid "integer"
msgstr "整数"

#: ../../library/struct.rst:200
msgid "\\(1), \\(2)"
msgstr "\\(1), \\(2)"

#: ../../library/struct.rst:202
msgid "``B``"
msgstr "``B``"

#: ../../library/struct.rst:202
msgid ":c:type:`unsigned char`"
msgstr ":c:type:`unsigned char`"

#: ../../library/struct.rst:202 ../../library/struct.rst:206
#: ../../library/struct.rst:208 ../../library/struct.rst:210
#: ../../library/struct.rst:212 ../../library/struct.rst:214
#: ../../library/struct.rst:216 ../../library/struct.rst:218
#: ../../library/struct.rst:220
msgid "\\(2)"
msgstr "\\(2)"

#: ../../library/struct.rst:204
msgid "``?``"
msgstr "``?``"

#: ../../library/struct.rst:204
msgid ":c:type:`_Bool`"
msgstr ":c:type:`_Bool`"

#: ../../library/struct.rst:204
msgid "bool"
msgstr "真偽値型(bool)"

#: ../../library/struct.rst:204
msgid "\\(1)"
msgstr "\\(1)"

#: ../../library/struct.rst:206
msgid "``h``"
msgstr "``h``"

#: ../../library/struct.rst:206
msgid ":c:type:`short`"
msgstr ":c:type:`short`"

#: ../../library/struct.rst:206 ../../library/struct.rst:208
#: ../../library/struct.rst:227
msgid "2"
msgstr "2"

#: ../../library/struct.rst:208
msgid "``H``"
msgstr "``H``"

#: ../../library/struct.rst:208
msgid ":c:type:`unsigned short`"
msgstr ":c:type:`unsigned short`"

#: ../../library/struct.rst:210
msgid "``i``"
msgstr "``i``"

#: ../../library/struct.rst:210
msgid ":c:type:`int`"
msgstr ":c:type:`int`"

#: ../../library/struct.rst:210 ../../library/struct.rst:212
#: ../../library/struct.rst:214 ../../library/struct.rst:216
#: ../../library/struct.rst:229
msgid "4"
msgstr "4"

#: ../../library/struct.rst:212
msgid "``I``"
msgstr "``I``"

#: ../../library/struct.rst:212
msgid ":c:type:`unsigned int`"
msgstr ":c:type:`unsigned int`"

#: ../../library/struct.rst:214
msgid "``l``"
msgstr "``l``"

#: ../../library/struct.rst:214
msgid ":c:type:`long`"
msgstr ":c:type:`long`"

#: ../../library/struct.rst:216
msgid "``L``"
msgstr "``L``"

#: ../../library/struct.rst:216
msgid ":c:type:`unsigned long`"
msgstr ":c:type:`unsigned long`"

#: ../../library/struct.rst:218
msgid "``q``"
msgstr "``q``"

#: ../../library/struct.rst:218
msgid ":c:type:`long long`"
msgstr ":c:type:`long long`"

#: ../../library/struct.rst:218 ../../library/struct.rst:220
#: ../../library/struct.rst:231
msgid "8"
msgstr "8"

#: ../../library/struct.rst:220
msgid "``Q``"
msgstr "``Q``"

#: ../../library/struct.rst:220
msgid ":c:type:`unsigned long long`"
msgstr ":c:type:`unsigned long long`"

#: ../../library/struct.rst:223
msgid "``n``"
msgstr "``n``"

#: ../../library/struct.rst:223
msgid ":c:type:`ssize_t`"
msgstr ":c:type:`ssize_t`"

#: ../../library/struct.rst:223 ../../library/struct.rst:225
msgid "\\(3)"
msgstr "\\(3)"

#: ../../library/struct.rst:225
msgid "``N``"
msgstr "``N``"

#: ../../library/struct.rst:225
msgid ":c:type:`size_t`"
msgstr ":c:type:`size_t`"

#: ../../library/struct.rst:227
msgid "``e``"
msgstr "``e``"

#: ../../library/struct.rst:227
msgid "\\(6)"
msgstr "\\(6)"

#: ../../library/struct.rst:227 ../../library/struct.rst:229
#: ../../library/struct.rst:231
msgid "float"
msgstr "浮動小数点数"

#: ../../library/struct.rst:227 ../../library/struct.rst:229
#: ../../library/struct.rst:231
msgid "\\(4)"
msgstr "\\(4)"

#: ../../library/struct.rst:229
msgid "``f``"
msgstr "``f``"

#: ../../library/struct.rst:229
msgid ":c:type:`float`"
msgstr ":c:type:`float`"

#: ../../library/struct.rst:231
msgid "``d``"
msgstr "``d``"

#: ../../library/struct.rst:231
msgid ":c:type:`double`"
msgstr ":c:type:`double`"

#: ../../library/struct.rst:233
msgid "``s``"
msgstr "``s``"

#: ../../library/struct.rst:233 ../../library/struct.rst:235
msgid ":c:type:`char[]`"
msgstr ":c:type:`char[]`"

#: ../../library/struct.rst:233 ../../library/struct.rst:235
msgid "bytes"
msgstr "bytes"

#: ../../library/struct.rst:235
msgid "``p``"
msgstr "``p``"

#: ../../library/struct.rst:237
msgid "``P``"
msgstr "``P``"

#: ../../library/struct.rst:237
msgid ":c:type:`void \\*`"
msgstr ":c:type:`void \\*`"

#: ../../library/struct.rst:237
msgid "\\(5)"
msgstr "\\(5)"

#: ../../library/struct.rst:240
msgid "Added support for the ``'n'`` and ``'N'`` formats."
msgstr "``'n'`` および ``'N'`` フォーマットのサポートが追加されました。"

#: ../../library/struct.rst:243
msgid "Added support for the ``'e'`` format."
msgstr "``'e'`` フォーマットのサポートが追加されました。"

#: ../../library/struct.rst:252
msgid ""
"The ``'?'`` conversion code corresponds to the :c:type:`_Bool` type defined "
"by C99. If this type is not available, it is simulated using a :c:type:"
"`char`. In standard mode, it is always represented by one byte."
msgstr ""
"``'?'`` 変換コードは C99 で定義された :c:type:`_Bool` 型に対応します。その型"
"が利用できない場合は、 :c:type:`char` で代用されます。標準モードでは常に1バイ"
"トで表現されます。"

#: ../../library/struct.rst:257
msgid ""
"When attempting to pack a non-integer using any of the integer conversion "
"codes, if the non-integer has a :meth:`__index__` method then that method is "
"called to convert the argument to an integer before packing."
msgstr ""
"非整数を整数の変換コードを使ってパックしようとすると、非整数が :meth:"
"`__index__` メソッドを持っていた場合は、整数に変換するためにパックする前にそ"
"のメソッドが呼ばれます。"

#: ../../library/struct.rst:261
msgid "Added use of the :meth:`__index__` method for non-integers."
msgstr ""

#: ../../library/struct.rst:265
msgid ""
"The ``'n'`` and ``'N'`` conversion codes are only available for the native "
"size (selected as the default or with the ``'@'`` byte order character). For "
"the standard size, you can use whichever of the other integer formats fits "
"your application."
msgstr ""
"``'n'`` および ``'N'`` 変換コードは (デフォルトもしくはバイトオーダ文字 "
"``'@'`` 付きで選択される) native サイズ使用時のみ利用できます。standard サイ"
"ズ使用時には、自身のアプリケーションに適する他の整数フォーマットを使うことが"
"できます。"

#: ../../library/struct.rst:271
msgid ""
"For the ``'f'``, ``'d'`` and ``'e'`` conversion codes, the packed "
"representation uses the IEEE 754 binary32, binary64 or binary16 format (for "
"``'f'``, ``'d'`` or ``'e'`` respectively), regardless of the floating-point "
"format used by the platform."
msgstr ""
"``'f'`` 、 ``'d'`` および ``'e'`` 変換コードについて、パックされた表現は "
"IEEE 754 binary32 (``'f'`` の場合) 、 binary64 (``'d'`` の場合) 、または"
"binary16(``'e'`` の場合) フォーマットが、プラットフォームにおける浮動小数点数"
"のフォーマットに関係なく使われます。"

#: ../../library/struct.rst:277
msgid ""
"The ``'P'`` format character is only available for the native byte ordering "
"(selected as the default or with the ``'@'`` byte order character). The byte "
"order character ``'='`` chooses to use little- or big-endian ordering based "
"on the host system. The struct module does not interpret this as native "
"ordering, so the ``'P'`` format is not available."
msgstr ""
"``'P'`` フォーマット文字はネイティブバイトオーダでのみ利用可能です (デフォル"
"トのネットワークバイトオーダに設定するか、``'@'`` バイトオーダ指定文字を指定"
"しなければなりません)。``'='`` を指定した場合、ホスト計算機のバイトオーダに基"
"づいてリトルエンディアンとビッグエンディアンのどちらを使うかを決めます。"
"struct モジュールはこの設定をネイティブのオーダ設定として解釈しないので、"
"``'P'`` を使うことはできません。"

#: ../../library/struct.rst:284
msgid ""
"The IEEE 754 binary16 \"half precision\" type was introduced in the 2008 "
"revision of the `IEEE 754 standard <ieee 754 standard_>`_. It has a sign "
"bit, a 5-bit exponent and 11-bit precision (with 10 bits explicitly stored), "
"and can represent numbers between approximately ``6.1e-05`` and ``6.5e+04`` "
"at full precision. This type is not widely supported by C compilers: on a "
"typical machine, an unsigned short can be used for storage, but not for math "
"operations. See the Wikipedia page on the `half-precision floating-point "
"format <half precision format_>`_ for more information."
msgstr ""
"IEEE 754 の binary16 \"半精度\" 型は、 `IEEE 754 standard <ieee 754 "
"standard_>`_ の2008 年の改訂で導入されました。\n"
"半精度型は、符号 bit 、5 bit の指数部、 11 bit の精度 (明示的には 10 bit が保"
"存される) を持ち、おおよそ ``6.1e-05`` から ``6.5e+04`` までの数を完全な精度"
"で表現できます。\n"
"この型は C コンパイラでは広くはサポートされていません: たいていのマシンでは、"
"保存するのに unsigned short が使えますが、数学の演算には使えません。\n"
"詳しいことは Wikipedia の `half-precision floating-point format <half "
"precision format_>`_ のページを参照してください。"

#: ../../library/struct.rst:294
msgid ""
"A format character may be preceded by an integral repeat count.  For "
"example, the format string ``'4h'`` means exactly the same as ``'hhhh'``."
msgstr ""
"フォーマット文字の前に整数をつけ、繰り返し回数 (count) を指定することができま"
"す。例えば、フォーマット文字列 ``'4h'`` は ``'hhhh'`` と全く同じ意味です。"

#: ../../library/struct.rst:297
msgid ""
"Whitespace characters between formats are ignored; a count and its format "
"must not contain whitespace though."
msgstr ""
"フォーマット文字間の空白文字は無視されます; count とフォーマット文字の間には"
"スペースを入れてはいけません。"

#: ../../library/struct.rst:300
msgid ""
"For the ``'s'`` format character, the count is interpreted as the length of "
"the bytes, not a repeat count like for the other format characters; for "
"example, ``'10s'`` means a single 10-byte string, while ``'10c'`` means 10 "
"characters. If a count is not given, it defaults to 1.  For packing, the "
"string is truncated or padded with null bytes as appropriate to make it fit. "
"For unpacking, the resulting bytes object always has exactly the specified "
"number of bytes.  As a special case, ``'0s'`` means a single, empty string "
"(while ``'0c'`` means 0 characters)."
msgstr ""
"``'s'`` フォーマット文字での繰り返し回数 (count) は、他のフォーマット文字のよ"
"うな繰り返し回数ではなく、バイト長として解釈されます。例えば、``'10s'`` は単"
"一の 10 バイトの文字列を意味し、``'10c'`` は 10 個の文字を意味します。繰り返"
"し回数が指定されなかった場合は、デフォルト値の 1 とみなされます。パックでは、"
"文字列はサイズに合うように切り詰められたり null バイトで埋められたりします。"
"アンパックでは、返されるバイトオブジェクトのバイト数は、正確に指定した通りに"
"なります。特殊な場合として、``'0s'`` は単一の空文字列を意味し、``'0c'`` は 0 "
"個の文字を意味します。"

#: ../../library/struct.rst:309
msgid ""
"When packing a value ``x`` using one of the integer formats (``'b'``, "
"``'B'``, ``'h'``, ``'H'``, ``'i'``, ``'I'``, ``'l'``, ``'L'``, ``'q'``, "
"``'Q'``), if ``x`` is outside the valid range for that format then :exc:"
"`struct.error` is raised."
msgstr ""
"整数フォーマット (``'b'``, ``'B'``, ``'h'``, ``'H'``, ``'i'``, ``'I'``, "
"``'l'``, ``'L'``, ``'q'``, ``'Q'``) のいずれかを使って値 ``x`` をパックすると"
"き ``x`` がフォーマットの適切な値の範囲に無い場合、 :exc:`struct.error` が送"
"出されます。"

#: ../../library/struct.rst:314
msgid ""
"Previously, some of the integer formats wrapped out-of-range values and "
"raised :exc:`DeprecationWarning` instead of :exc:`struct.error`."
msgstr ""
"以前は、いくつかの整数フォーマットが適切な範囲にない値を覆い隠して、 :exc:"
"`struct.error` の代わりに :exc:`DeprecationWarning` を送出していました。"

#: ../../library/struct.rst:318
msgid ""
"The ``'p'`` format character encodes a \"Pascal string\", meaning a short "
"variable-length string stored in a *fixed number of bytes*, given by the "
"count. The first byte stored is the length of the string, or 255, whichever "
"is smaller.  The bytes of the string follow.  If the string passed in to :"
"func:`pack` is too long (longer than the count minus 1), only the leading "
"``count-1`` bytes of the string are stored.  If the string is shorter than "
"``count-1``, it is padded with null bytes so that exactly count bytes in all "
"are used.  Note that for :func:`unpack`, the ``'p'`` format character "
"consumes ``count`` bytes, but that the string returned can never contain "
"more than 255 bytes."
msgstr ""
"フォーマット文字 ``'p'`` は \"Pascal 文字列 (pascal string)\"  をコードしま"
"す。Pascal 文字列は count で与えられる *固定長のバイト列* に収められた短い可"
"変長の文字列です。このデータの先頭の 1 バイトには文字列の長さか255 のうち、小"
"さい方の数が収められます。その後に文字列のバイトデータが続きます。 :func:"
"`pack` に渡された Pascal 文字列の長さが長すぎた (count-1 よりも長い) 場合、先"
"頭の ``count-1`` バイトが書き込まれます。文字列が ``count-1`` よりも短い場"
"合、指定した count バイトに達するまでの残りの部分はヌルで埋められます。 :"
"func:`unpack` では、フォーマット文字 ``'p'`` は指定された ``count`` バイトだ"
"けデータを読み込みますが、返される文字列は決して 255 文字を超えることはないの"
"で注意してください。"

#: ../../library/struct.rst:331
msgid ""
"For the ``'?'`` format character, the return value is either :const:`True` "
"or :const:`False`. When packing, the truth value of the argument object is "
"used. Either 0 or 1 in the native or standard bool representation will be "
"packed, and any non-zero value will be ``True`` when unpacking."
msgstr ""
"``'?'`` フォーマット文字では、返り値は :const:`True` または :const:`False` で"
"す。パックするときには、引数オブジェクトの論理値としての値が使われます。 0 ま"
"たは 1 のネイティブや標準の真偽値表現でパックされ、アンパックされるときはゼロ"
"でない値は ``True`` になります。"

#: ../../library/struct.rst:341
msgid "Examples"
msgstr "使用例"

#: ../../library/struct.rst:344
msgid ""
"All examples assume a native byte order, size, and alignment with a big-"
"endian machine."
msgstr ""
"全ての例は、ビッグエンディアンのマシンで、ネイティブのバイトオーダ、サイズお"
"よびアラインメントを仮定します。"

#: ../../library/struct.rst:347
msgid "A basic example of packing/unpacking three integers::"
msgstr "基本的な例として、三つの整数をパック/アンパックします::"

#: ../../library/struct.rst:357
msgid ""
"Unpacked fields can be named by assigning them to variables or by wrapping "
"the result in a named tuple::"
msgstr ""
"アンパックした結果のフィールドは、変数に割り当てるか named tuple でラップする"
"ことによって名前を付けることができます::"

#: ../../library/struct.rst:368
msgid ""
"The ordering of format characters may have an impact on size since the "
"padding needed to satisfy alignment requirements is different::"
msgstr ""
"アラインメントの要求を満たすために必要なパディングが異なるという理由により、"
"フォーマット文字の順番がサイズの違いを生み出すことがあります::"

#: ../../library/struct.rst:380
msgid ""
"The following format ``'llh0l'`` specifies two pad bytes at the end, "
"assuming longs are aligned on 4-byte boundaries::"
msgstr ""
"以下のフォーマット ``'llh0l'`` は、long 型が 4 バイトを境界としてそろえられて"
"いると仮定して、末端に 2 バイトをパディングします::"

#: ../../library/struct.rst:386
msgid ""
"This only works when native size and alignment are in effect; standard size "
"and alignment does not enforce any alignment."
msgstr ""
"この例はネイティブのサイズとアラインメントが使われているときだけ思った通りに"
"動きます。標準のサイズとアラインメントはアラインメントの設定ではいかなるアラ"
"インメントも行いません。"

#: ../../library/struct.rst:393
msgid "Module :mod:`array`"
msgstr ":mod:`array` モジュール"

#: ../../library/struct.rst:393
msgid "Packed binary storage of homogeneous data."
msgstr "一様なデータ型からなるバイナリ記録データのパック。"

#: ../../library/struct.rst:395
msgid "Module :mod:`xdrlib`"
msgstr ":mod:`xdrlib` モジュール"

#: ../../library/struct.rst:396
msgid "Packing and unpacking of XDR data."
msgstr "XDR データのパックおよびアンパック。"

#: ../../library/struct.rst:402
msgid "Classes"
msgstr "クラス"

#: ../../library/struct.rst:404
msgid "The :mod:`struct` module also defines the following type:"
msgstr ":mod:`struct` モジュールは次の型を定義します:"

#: ../../library/struct.rst:409
msgid ""
"Return a new Struct object which writes and reads binary data according to "
"the format string *format*.  Creating a Struct object once and calling its "
"methods is more efficient than calling the :mod:`struct` functions with the "
"same format since the format string only needs to be compiled once."
msgstr ""
"フォーマット文字列 *format* に従ってバイナリデータを読み書きする、新しい "
"Struct オブジェクトを返します。 Struct オブジェクトを一度作ってからそのメソッ"
"ドを使うと、フォーマット文字列のコンパイルが一度で済むので、 :mod:`struct` モ"
"ジュールの関数を同じフォーマットで何度も呼び出すよりも効率的です。"

#: ../../library/struct.rst:416
msgid ""
"The compiled versions of the most recent format strings passed to :class:"
"`Struct` and the module-level functions are cached, so programs that use "
"only a few format strings needn't worry about reusing a single :class:"
"`Struct` instance."
msgstr ""

#: ../../library/struct.rst:421
msgid "Compiled Struct objects support the following methods and attributes:"
msgstr ""
"コンパイルされた Struct オブジェクトは以下のメソッドと属性をサポートします:"

#: ../../library/struct.rst:425
msgid ""
"Identical to the :func:`pack` function, using the compiled format. "
"(``len(result)`` will equal :attr:`size`.)"
msgstr ""
":func:`pack` 関数と同じ、コンパイルされたフォーマットを利用するメソッドで"
"す。 (``len(result)`` は :attr:`size` と等しいでしょう)"

#: ../../library/struct.rst:431
msgid "Identical to the :func:`pack_into` function, using the compiled format."
msgstr ""
":func:`pack_into` 関数と同じ、コンパイルされたフォーマットを利用するメソッド"
"です。"

#: ../../library/struct.rst:436
msgid ""
"Identical to the :func:`unpack` function, using the compiled format. The "
"buffer's size in bytes must equal :attr:`size`."
msgstr ""
":func:`unpack` 関数と同じ、コンパイルされたフォーマットを利用するメソッドで"
"す。 (buffer のバイト数は :attr:`size` と等しくなければなりません)。"

#: ../../library/struct.rst:442
msgid ""
"Identical to the :func:`unpack_from` function, using the compiled format. "
"The buffer's size in bytes, starting at position *offset*, must be at least :"
"attr:`size`."
msgstr ""
":func:`unpack_from` 関数と同じ、コンパイルされたフォーマットを利用するメソッ"
"ドです。 (*offset* を始点とする buffer のバイト数は少なくとも :attr:`size` 以"
"上でなければなりません)。"

#: ../../library/struct.rst:449
msgid ""
"Identical to the :func:`iter_unpack` function, using the compiled format. "
"The buffer's size in bytes must be a multiple of :attr:`size`."
msgstr ""
":func:`iter_unpack` 関数と同じ、コンパイルされたフォーマットを利用するメソッ"
"ドです。 (buffer のバイト数は :attr:`size` の倍数でなければなりません)。"

#: ../../library/struct.rst:456
msgid "The format string used to construct this Struct object."
msgstr ""
"この Struct オブジェクトを作成する時に利用されたフォーマット文字列です。"

#: ../../library/struct.rst:458
msgid "The format string type is now :class:`str` instead of :class:`bytes`."
msgstr ""

#: ../../library/struct.rst:463
msgid ""
"The calculated size of the struct (and hence of the bytes object produced by "
"the :meth:`pack` method) corresponding to :attr:`format`."
msgstr ""
":attr:`format` 属性に対応する構造体の (従って :meth:`pack` メソッドによって作"
"成されるバイト列オブジェクトの) サイズです。"
