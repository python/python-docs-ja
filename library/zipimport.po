# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Arihiro TAKASE, 2023
# Rafael Fontenelle <rffontenelle@gmail.com>, 2023
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-04 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:18+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/zipimport.rst:2
msgid ":mod:`!zipimport` --- Import modules from Zip archives"
msgstr ":mod:`!zipimport` --- Zip アーカイブからモジュールをインポートする"

#: ../../library/zipimport.rst:9
msgid "**Source code:** :source:`Lib/zipimport.py`"
msgstr "**ソースコード:** :source:`Lib/zipimport.py`"

#: ../../library/zipimport.rst:13
msgid ""
"This module adds the ability to import Python modules (:file:`\\*.py`, :file:"
"`\\*.pyc`) and packages from ZIP-format archives. It is usually not needed "
"to use the :mod:`zipimport` module explicitly; it is automatically used by "
"the built-in :keyword:`import` mechanism for :data:`sys.path` items that are "
"paths to ZIP archives."
msgstr ""
"このモジュールは、 Python モジュール (:file:`\\*.py`, :file:`\\*.pyc`) やパッ"
"ケージを ZIP 形式のアーカイブから import できるようにします。通常、 :mod:"
"`zipimport` を明示的に使う必要はありません; 組み込みの :keyword:`import` "
"は、 :data:`sys.path` の要素が ZIP アーカイブへのパスを指している場合にこのモ"
"ジュールを自動的に使います。"

#: ../../library/zipimport.rst:19
msgid ""
"Typically, :data:`sys.path` is a list of directory names as strings.  This "
"module also allows an item of :data:`sys.path` to be a string naming a ZIP "
"file archive. The ZIP archive can contain a subdirectory structure to "
"support package imports, and a path within the archive can be specified to "
"only import from a subdirectory.  For example, the path :file:`example.zip/"
"lib/` would only import from the :file:`lib/` subdirectory within the "
"archive."
msgstr ""
"普通、 :data:`sys.path` はディレクトリ名の文字列からなるリストです。このモ"
"ジュールを使うと、 :data:`sys.path` の要素に ZIP ファイルアーカイブを示す文字"
"列を使えるようになります。ZIP アーカイブにはサブディレクトリ構造を含めること"
"ができ、パッケージの import をサポートさせたり、アーカイブ内のパスを指定して"
"サブディレクトリ下から import を行わせたりできます。例えば、 :file:`example."
"zip/lib/` のように指定すると、アーカイブ中の  :file:`lib/` サブディレクトリ下"
"だけから import を行います。"

#: ../../library/zipimport.rst:26
msgid ""
"Any files may be present in the ZIP archive, but importers are only invoked "
"for :file:`.py` and :file:`.pyc` files.  ZIP import of dynamic modules (:"
"file:`.pyd`, :file:`.so`) is disallowed. Note that if an archive only "
"contains :file:`.py` files, Python will not attempt to modify the archive by "
"adding the corresponding :file:`.pyc` file, meaning that if a ZIP archive "
"doesn't contain :file:`.pyc` files, importing may be rather slow."
msgstr ""
"ZIP アーカイブ内にはどんなファイルを置いてもかまいませんが、インポートは :"
"file:`.py` および :file:`.pyc` ファイルにのみ呼び出されます。動的モジュール "
"(:file:`.pyd`, :file:`.so`) の ZIP インポートは行えません。アーカイブ内に :"
"file:`.py` ファイルしかない場合、 Python は対応する :file:`.pyc` ファイルを追"
"加してアーカイブを変更しようとはしません。つまり、 ZIP アーカイブ内に :file:"
"`.pyc` がない場合は、インポートが多少遅くなるかもしれないので注意してくださ"
"い。"

#: ../../library/zipimport.rst:33
msgid "ZIP64 is supported"
msgstr ""

#: ../../library/zipimport.rst:36
msgid "Previously, ZIP archives with an archive comment were not supported."
msgstr ""
"以前は、アーカイブコメント付きの ZIP アーカイブはサポートされていませんでし"
"た。"

#: ../../library/zipimport.rst:41
msgid ""
"`PKZIP Application Note <https://pkware.cachefly.net/webdocs/casestudies/"
"APPNOTE.TXT>`_"
msgstr ""
"`PKZIP Application Note <https://pkware.cachefly.net/webdocs/casestudies/"
"APPNOTE.TXT>`_"

#: ../../library/zipimport.rst:42
msgid ""
"Documentation on the ZIP file format by Phil Katz, the creator of the format "
"and algorithms used."
msgstr ""
"ZIP ファイルフォーマットおよびアルゴリズムを作成した Phil Katz によるドキュメ"
"ント。"

#: ../../library/zipimport.rst:45
msgid ":pep:`273` - Import Modules from Zip Archives"
msgstr ":pep:`273` - Zip アーカイブからモジュールをインポートする"

#: ../../library/zipimport.rst:46
msgid ""
"Written by James C. Ahlstrom, who also provided an implementation. Python "
"2.3 follows the specification in :pep:`273`, but uses an implementation "
"written by Just van Rossum that uses the import hooks described in :pep:"
"`302`."
msgstr ""
"このモジュールの実装も行った、James C. Ahlstrom による PEP です。Python 2.3 "
"は :pep:`273` の仕様に従っていますが、Just van Rossum の書いた import フック"
"による実装を使っています。インポートフックは :pep:`302` で解説されています。"

#: ../../library/zipimport.rst:50
msgid ":mod:`importlib` - The implementation of the import machinery"
msgstr ":mod:`importlib` - :keyword:`import` の実装"

#: ../../library/zipimport.rst:51
msgid ""
"Package providing the relevant protocols for all importers to implement."
msgstr ""

#: ../../library/zipimport.rst:55
msgid "This module defines an exception:"
msgstr "このモジュールでは例外を一つ定義しています:"

#: ../../library/zipimport.rst:59
msgid ""
"Exception raised by zipimporter objects. It's a subclass of :exc:"
"`ImportError`, so it can be caught as :exc:`ImportError`, too."
msgstr ""
"zipimporter オブジェクトが送出する例外です。 :exc:`ImportError` のサブクラス"
"なので、 :exc:`ImportError` としても捕捉できます。"

#: ../../library/zipimport.rst:66
msgid "zipimporter Objects"
msgstr "zipimporter オブジェクト"

#: ../../library/zipimport.rst:68
msgid ":class:`zipimporter` is the class for importing ZIP files."
msgstr ":class:`zipimporter` は ZIP ファイルを import するためのクラスです。"

#: ../../library/zipimport.rst:72
msgid ""
"Create a new zipimporter instance. *archivepath* must be a path to a ZIP "
"file, or to a specific path within a ZIP file.  For example, an "
"*archivepath* of :file:`foo/bar.zip/lib` will look for modules in the :file:"
"`lib` directory inside the ZIP file :file:`foo/bar.zip` (provided that it "
"exists)."
msgstr ""
"新たな zipimporter インスタンスを生成します。 *archivepath* は ZIP ファイルへ"
"のパスまたは ZIP ファイル中の特定のパスへのパスでなければなりません。たとえ"
"ば、 :file:`foo/bar.zip/lib` という *archivepath* の場合、 :file:`foo/bar."
"zip` という ZIP ファイルの中の :file:`lib` ディレクトリにあるモジュールを (存"
"在するものとして) 検索します。"

#: ../../library/zipimport.rst:77
msgid ""
":exc:`ZipImportError` is raised if *archivepath* doesn't point to a valid "
"ZIP archive."
msgstr ""
"*archivepath* が有効な ZIP アーカイブを指していない場合、 :exc:"
"`ZipImportError` を送出します。"

#: ../../library/zipimport.rst:82
msgid ""
"Methods ``find_loader()`` and ``find_module()``, deprecated in 3.10 are now "
"removed.  Use :meth:`find_spec` instead."
msgstr ""

#: ../../library/zipimport.rst:87
msgid ""
"Implementation of :meth:`importlib.abc.Loader.create_module` that returns :"
"const:`None` to explicitly request the default semantics."
msgstr ""

#: ../../library/zipimport.rst:95
msgid "Implementation of :meth:`importlib.abc.Loader.exec_module`."
msgstr ":meth:`importlib.abc.Loader.exec_module` の実装です。"

#: ../../library/zipimport.rst:102
msgid "An implementation of :meth:`importlib.abc.PathEntryFinder.find_spec`."
msgstr ":meth:`importlib.abc.PathEntryFinder.find_spec` の実装です。"

#: ../../library/zipimport.rst:109
msgid ""
"Return the code object for the specified module. Raise :exc:`ZipImportError` "
"if the module couldn't be imported."
msgstr ""
"*fullname* に指定したモジュールのコードオブジェクトを返します。モジュールがイ"
"ンポートできなかった場合には :exc:`ZipImportError` を送出します。"

#: ../../library/zipimport.rst:115
msgid ""
"Return the data associated with *pathname*. Raise :exc:`OSError` if the file "
"wasn't found."
msgstr ""
"*pathname* に関連付けられたデータを返します。該当するファイルが見つからなかっ"
"た場合には :exc:`OSError` を送出します。"

#: ../../library/zipimport.rst:118
msgid ":exc:`IOError` used to be raised, it is now an alias of :exc:`OSError`."
msgstr ""
"以前は :exc:`IOError` が送出されました; それは現在 :exc:`OSError` のエイリア"
"スです。"

#: ../../library/zipimport.rst:124
msgid ""
"Return the value ``__file__`` would be set to if the specified module was "
"imported. Raise :exc:`ZipImportError` if the module couldn't be imported."
msgstr ""
"指定されたモジュールが import された場合、そのモジュールに設定した "
"``__file__`` の値を返します。モジュールがインポートできなかった場合、 :exc:"
"`ZipImportError` を送出します。"

#: ../../library/zipimport.rst:133
msgid ""
"Return the source code for the specified module. Raise :exc:`ZipImportError` "
"if the module couldn't be found, return :const:`None` if the archive does "
"contain the module, but has no source for it."
msgstr ""
"*fullname* で指定されたモジュールのソースコードを返します。モジュールが見つか"
"らない場合、:exc:`ZipImportError` を送出します。アーカイブにはモジュールがあ"
"るもののソースコードがない場合、 :const:`None` を返します。"

#: ../../library/zipimport.rst:141
msgid ""
"Return ``True`` if the module specified by *fullname* is a package. Raise :"
"exc:`ZipImportError` if the module couldn't be found."
msgstr ""
"*fullname* で指定されたモジュールがパッケージの場合 ``True`` を返します。モ"
"ジュールを見つけられない場合 :exc:`ZipImportError` を送出します。"

#: ../../library/zipimport.rst:147
msgid ""
"Load the module specified by *fullname*. *fullname* must be the fully "
"qualified (dotted) module name. Returns the imported module on success, "
"raises :exc:`ZipImportError` on failure."
msgstr ""

#: ../../library/zipimport.rst:153
msgid "Use :meth:`exec_module` instead."
msgstr "代わりに :meth:`exec_module` を使用してください。"

#: ../../library/zipimport.rst:158
msgid ""
"Clear out the internal cache of information about files found within the ZIP "
"archive."
msgstr ""

#: ../../library/zipimport.rst:166
msgid ""
"The file name of the importer's associated ZIP file, without a possible "
"subpath."
msgstr ""
"importer に関連付けられた ZIP ファイルのファイル名です。サブパスは含まれませ"
"ん。"

#: ../../library/zipimport.rst:172
msgid ""
"The subpath within the ZIP file where modules are searched.  This is the "
"empty string for zipimporter objects which point to the root of the ZIP file."
msgstr ""
"モジュールを検索する ZIP ファイル中のサブパスです。この文字列は ZIP ファイル"
"のルートを指している zipimporter オブジェクトでは空です。"

#: ../../library/zipimport.rst:176
msgid ""
"The :attr:`archive` and :attr:`prefix` attributes, when combined with a "
"slash, equal the original *archivepath* argument given to the :class:"
"`zipimporter` constructor."
msgstr ""
"スラッシュでつなげると、:attr:`archive` と :attr:`prefix` 属性は :class:"
"`zipimporter` コンストラクタに渡された元々の *archivepath* 引数と等しくなりま"
"す。"

#: ../../library/zipimport.rst:184
msgid "Examples"
msgstr "使用例"

#: ../../library/zipimport.rst:186
msgid ""
"Here is an example that imports a module from a ZIP archive - note that the :"
"mod:`zipimport` module is not explicitly used."
msgstr ""
"モジュールを ZIP アーカイブから import する例を以下に示します - :mod:"
"`zipimport` モジュールが明示的に使われていないことに注意してください。"

#: ../../library/zipimport.rst:189
msgid ""
"$ unzip -l example.zip\n"
"Archive:  example.zip\n"
"  Length     Date   Time    Name\n"
" --------    ----   ----    ----\n"
"     8467  11-26-02 22:30   jwzthreading.py\n"
" --------                   -------\n"
"     8467                   1 file\n"
"$ ./python\n"
"Python 2.3 (#1, Aug 1 2003, 19:54:32)\n"
">>> import sys\n"
">>> sys.path.insert(0, 'example.zip')  # Add .zip file to front of path\n"
">>> import jwzthreading\n"
">>> jwzthreading.__file__\n"
"'example.zip/jwzthreading.py'"
msgstr ""
