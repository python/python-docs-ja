# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/imp.rst:2
msgid ":mod:`imp` --- Access the :ref:`import <importsystem>` internals"
msgstr ":mod:`imp` --- :ref:`import <importsystem>` 内部へのアクセス"

#: ../../library/imp.rst:8
msgid "**Source code:** :source:`Lib/imp.py`"
msgstr "**ソースコード:** :source:`Lib/imp.py`"

#: ../../library/imp.rst:10
msgid "The :mod:`imp` module is deprecated in favor of :mod:`importlib`."
msgstr ""
":mod:`imp` モジュールは :mod:`importlib` を後継として非推奨にされました。"

#: ../../library/imp.rst:17
msgid ""
"This module provides an interface to the mechanisms used to implement the :"
"keyword:`import` statement.  It defines the following constants and "
"functions:"
msgstr ""
"このモジュールは :keyword:`import` 文を実装するために使われているメカニズムへ"
"のインターフェイスを提供します。次の定数と関数が定義されています:"

#: ../../library/imp.rst:25
msgid ""
"Return the magic string value used to recognize byte-compiled code files (:"
"file:`.pyc` files).  (This value may be different for each Python version.)"
msgstr ""
"バイトコンパイルされたコードファイル(:file:`.pyc` ファイル)を認識するために使"
"われるマジック文字列値を返します。 (この値は Python の各バージョンで異なりま"
"す。)"

#: ../../library/imp.rst:28
msgid "Use :attr:`importlib.util.MAGIC_NUMBER` instead."
msgstr "代わりに :attr:`importlib.util.MAGIC_NUMBER` を使用してください。"

#: ../../library/imp.rst:34
msgid ""
"Return a list of 3-element tuples, each describing a particular type of "
"module. Each triple has the form ``(suffix, mode, type)``, where *suffix* is "
"a string to be appended to the module name to form the filename to search "
"for, *mode* is the mode string to pass to the built-in :func:`open` function "
"to open the file (this can be ``'r'`` for text files or ``'rb'`` for binary "
"files), and *type* is the file type, which has one of the values :const:"
"`PY_SOURCE`, :const:`PY_COMPILED`, or :const:`C_EXTENSION`, described below."
msgstr ""
"3要素のタプルのリストを返します。それぞれのタプルは特定の種類のモジュールを説"
"明しています。各タプルは ``(suffix, mode, type)`` という形式です。ここで、 "
"*suffix* は探すファイル名を作るためにモジュール名に追加する文字列です。その"
"ファイルをオープンするために、 *mode* は組み込み :func:`open` 関数へ渡される"
"モード文字列です (これはテキストファイル対しては ``'r'`` 、バイナリファイルに"
"対しては ``'rb'`` となります)。 *type* はファイル型で、以下で説明する値 :"
"const:`PY_SOURCE`, :const:`PY_COMPILED` あるいは、 :const:`C_EXTENSION` の一"
"つを取ります。"

#: ../../library/imp.rst:43
msgid "Use the constants defined on :mod:`importlib.machinery` instead."
msgstr "代わりに :mod:`importlib.machinery` で定義された定数を使ってください。"

#: ../../library/imp.rst:49
msgid ""
"Try to find the module *name*.  If *path* is omitted or ``None``, the list "
"of directory names given by ``sys.path`` is searched, but first a few "
"special places are searched: the function tries to find a built-in module "
"with the given name (:const:`C_BUILTIN`), then a frozen module (:const:"
"`PY_FROZEN`), and on some systems some other places are looked in as well "
"(on Windows, it looks in the registry which may point to a specific file)."
msgstr ""
"モジュール *name* を見つけようとします。 *path* が省略されるか ``None`` なら"
"ば、 ``sys.path`` によって与えられるディレクトリ名のリストが検索されます。し"
"かし、最初にいくつか特別な場所を検索します。まず、所定の名前をもつ組み込みモ"
"ジュール(:const:`C_BUILTIN`)を見つけようとします。それから、フリーズされたモ"
"ジュール(:const:`PY_FROZEN`)、そしていくつかのシステムでは他の場所が同様に検"
"索されます (Windowsでは、特定のファイルを指すレジストリの中を見ます)。"

#: ../../library/imp.rst:56
msgid ""
"Otherwise, *path* must be a list of directory names; each directory is "
"searched for files with any of the suffixes returned by :func:`get_suffixes` "
"above.  Invalid names in the list are silently ignored (but all list items "
"must be strings)."
msgstr ""
"それ以外の場合、 *path* はディレクトリ名のリストでなければなりません。上の :"
"func:`get_suffixes` が返す拡張子のいずれかを伴ったファイルを各ディレクトリの"
"中で検索します。リスト内の有効でない名前は黙って無視されます(しかし、すべての"
"リスト項目は文字列でなければなりません)。"

#: ../../library/imp.rst:61
msgid ""
"If search is successful, the return value is a 3-element tuple ``(file, "
"pathname, description)``:"
msgstr ""
"検索が成功すれば、戻り値は3要素のタプル ``(file, pathname, description)`` で"
"す:"

#: ../../library/imp.rst:64
msgid ""
"*file* is an open :term:`file object` positioned at the beginning, "
"*pathname* is the pathname of the file found, and *description* is a 3-"
"element tuple as contained in the list returned by :func:`get_suffixes` "
"describing the kind of module found."
msgstr ""
"*file* は先頭に位置合わせされたオープン :term:`ファイルオブジェクト <file "
"object>` で、 *pathname* は見つかったファイルのパス名です。そして、 "
"*description* は :func:`get_suffixes` が返すリストに含まれているような3要素の"
"タプルで、見つかったモジュールの種類を説明しています。"

#: ../../library/imp.rst:69
msgid ""
"If the module is built-in or frozen then *file* and *pathname* are both "
"``None`` and the *description* tuple contains empty strings for its suffix "
"and mode; the module type is indicated as given in parentheses above.  If "
"the search is unsuccessful, :exc:`ImportError` is raised.  Other exceptions "
"indicate problems with the arguments or environment."
msgstr ""
"モジュールが組み込みモジュールか frozen なモジュールの場合、 *file* と "
"*pathname* のどちらも ``None`` になり、 *description* タプルの要素の接尾辞 "
"(拡張子) とモードは空文字列になります。モジュール型は上の括弧の中に示されま"
"す。\n"
"検索に失敗した場合は、 :exc:`ImportError` が発生します。\n"
"他の例外は引数または環境に問題があることを示しています。"

#: ../../library/imp.rst:75
msgid ""
"If the module is a package, *file* is ``None``, *pathname* is the package "
"path and the last item in the *description* tuple is :const:`PKG_DIRECTORY`."
msgstr ""
"モジュールがパッケージならば、 *file* は ``None`` で、 *pathname* はパッケー"
"ジのパスで *description* タプルの最後の項目は :const:`PKG_DIRECTORY` です。"

#: ../../library/imp.rst:78
msgid ""
"This function does not handle hierarchical module names (names containing "
"dots).  In order to find *P.M*, that is, submodule *M* of package *P*, use :"
"func:`find_module` and :func:`load_module` to find and load package *P*, and "
"then use :func:`find_module` with the *path* argument set to ``P.__path__``. "
"When *P* itself has a dotted name, apply this recipe recursively."
msgstr ""
"この関数は階層的なモジュール名(ドットを含む名前)を扱いません。 *P.M* 、すなわ"
"ちパッケージ *P* のサブモジュール *M* を見つけるためには、まず :func:"
"`find_module` と :func:`load_module` を使用してパッケージ *P* を見つけてロー"
"ドして、次に ``P.__path__`` を *path* 引数にして :func:`find_module` を呼び出"
"してください。もし *P* 自体がドット付きの名前を持つ場合、このレシピを再帰的に"
"適用してください。"

#: ../../library/imp.rst:84
msgid ""
"Use :func:`importlib.util.find_spec` instead unless Python 3.3 compatibility "
"is required, in which case use :func:`importlib.find_loader`. For example "
"usage of the former case, see the :ref:`importlib-examples` section of the :"
"mod:`importlib` documentation."
msgstr ""
"Python 3.3 との互換性が不要であれば、:func:`importlib.util.find_spec` を使用"
"してください, 互換性が必要な場合は :func:`importlib.find_loader` を使用してく"
"ださい。前者の使用例は、:mod:`importlib` ドキュメントの:ref:`importlib-"
"examples` セクションを参照してください。"

#: ../../library/imp.rst:94
msgid ""
"Load a module that was previously found by :func:`find_module` (or by an "
"otherwise conducted search yielding compatible results).  This function does "
"more than importing the module: if the module was already imported, it will "
"reload the module!  The *name* argument indicates the full module name "
"(including the package name, if this is a submodule of a package).  The "
"*file* argument is an open file, and *pathname* is the corresponding file "
"name; these can be ``None`` and ``''``, respectively, when the module is a "
"package or not being loaded from a file.  The *description* argument is a "
"tuple, as would be returned by :func:`get_suffixes`, describing what kind of "
"module must be loaded."
msgstr ""
":func:`find_module` を使って(あるいは、互換性のある結果を作り出す検索を行っ"
"て)以前見つけたモジュールをロードします。この関数はモジュールをインポートする"
"という以上のことを行います: モジュールが既にインポートされているならば、リ"
"ロードします! *name* 引数は(これがパッケージのサブモジュールならばパッケージ"
"名を含む)完全なモジュール名を示します。 *file* 引数はオープンしたファイル"
"で、 *pathname* は対応するファイル名です。モジュールがパッケージであるかファ"
"イルからロードされようとしていないとき、これらはそれぞれ ``None`` と ``''`` "
"であっても構いません。 :func:`get_suffixes` が返すように *description* 引数は"
"タプルで、どの種類のモジュールがロードされなければならないかを説明するもので"
"す。"

#: ../../library/imp.rst:105
msgid ""
"If the load is successful, the return value is the module object; otherwise, "
"an exception (usually :exc:`ImportError`) is raised."
msgstr ""
"ロードが成功したならば、戻り値はモジュールオブジェクトです。そうでなければ、"
"例外(たいていは :exc:`ImportError`)が発生します。"

#: ../../library/imp.rst:108
msgid ""
"**Important:** the caller is responsible for closing the *file* argument, if "
"it was not ``None``, even when an exception is raised.  This is best done "
"using a :keyword:`try` ... :keyword:`finally` statement."
msgstr ""
"**重要:** *file* 引数が ``None`` でなければ、例外が発生した場合でも呼び出し側"
"にはそれを閉じる責任があります。これを行うには、 :keyword:`try` ... :keyword:"
"`finally` 文を使うことが最も良いです。"

#: ../../library/imp.rst:112
msgid ""
"If previously used in conjunction with :func:`imp.find_module` then consider "
"using :func:`importlib.import_module`, otherwise use the loader returned by "
"the replacement you chose for :func:`imp.find_module`. If you called :func:"
"`imp.load_module` and related functions directly with file path arguments "
"then use a combination of :func:`importlib.util.spec_from_file_location` "
"and :func:`importlib.util.module_from_spec`. See the :ref:`importlib-"
"examples` section of the :mod:`importlib` documentation for details of the "
"various approaches."
msgstr ""
"もし以前は :func:`imp.find_module` と一緒に使っていたのなら、 :func:"
"`importlib.import_module` を使うことを検討してください。\n"
"そうでなければ、 :func:`imp.find_module` に対して選択した代替手段によって返さ"
"れるローダーを使用してください。\n"
"もし :func:`imp.load_module` とそれに関連する関数を path 引数付きで直接呼んで"
"いたのなら、 :func:`importlib.util.spec_from_file_location` と :func:"
"`importlib.util.module_from_spec` を組み合わせて使ってください。\n"
"様々な手法の詳細については :mod:`importlib` ドキュメントの :ref:`importlib-"
"examples` 節を参照してください。"

#: ../../library/imp.rst:126
msgid ""
"Return a new empty module object called *name*.  This object is *not* "
"inserted in ``sys.modules``."
msgstr ""
"*name* という名前の新しい空モジュールオブジェクトを返します。このオブジェクト"
"は ``sys.modules`` に挿入され *ません* 。"

#: ../../library/imp.rst:129
msgid "Use :func:`importlib.util.module_from_spec` instead."
msgstr "代わりに:func:`importlib.util.module_from_spec` を使用してください。"

#: ../../library/imp.rst:135
msgid ""
"Reload a previously imported *module*.  The argument must be a module "
"object, so it must have been successfully imported before.  This is useful "
"if you have edited the module source file using an external editor and want "
"to try out the new version without leaving the Python interpreter.  The "
"return value is the module object (the same as the *module* argument)."
msgstr ""
"すでにインポートされた *module* を再解釈し、再初期化します。引数はモジュール"
"オブジェクトでなければならないので、予めインポートに成功していなければなりま"
"せん。この関数はモジュールのソースコードファイルを外部エディタで編集して、"
"Python インタプリタから離れることなく新しいバージョンを試したい際に有効です。"
"戻り値は (*module* 引数と同じ) モジュールオブジェクトです。"

#: ../../library/imp.rst:141
msgid "When ``reload(module)`` is executed:"
msgstr "``reload(module)`` を実行すると、以下の処理が行われます:"

#: ../../library/imp.rst:143
msgid ""
"Python modules' code is recompiled and the module-level code reexecuted, "
"defining a new set of objects which are bound to names in the module's "
"dictionary.  The ``init`` function of extension modules is not called a "
"second time."
msgstr ""
"Python モジュールのコードは再コンパイルされ、モジュールレベルのコードは再度実"
"行されます。モジュールの辞書中にある、何らかの名前に結び付けられたオブジェク"
"トを新たに定義します。拡張モジュール中の ``init`` 関数が二度呼び出されること"
"はありません。"

#: ../../library/imp.rst:148
msgid ""
"As with all other objects in Python the old objects are only reclaimed after "
"their reference counts drop to zero."
msgstr ""
"Python における他のオブジェクトと同様、以前のオブジェクトのメモリ領域は、参照"
"カウントがゼロにならないかぎり再利用されません。"

#: ../../library/imp.rst:151
msgid ""
"The names in the module namespace are updated to point to any new or changed "
"objects."
msgstr ""
"モジュール名前空間内の名前は新しいオブジェクト (または更新されたオブジェク"
"ト) を指すよう更新されます。"

#: ../../library/imp.rst:154
msgid ""
"Other references to the old objects (such as names external to the module) "
"are not rebound to refer to the new objects and must be updated in each "
"namespace where they occur if that is desired."
msgstr ""
"以前のオブジェクトが (外部の他のモジュールなどからの) 参照を受けている場合、"
"それらを新たなオブジェクトに再束縛し直すことはないので、必要なら自分で名前空"
"間を更新しなければなりません。"

#: ../../library/imp.rst:158
msgid "There are a number of other caveats:"
msgstr "いくつか補足説明があります:"

#: ../../library/imp.rst:160
msgid ""
"When a module is reloaded, its dictionary (containing the module's global "
"variables) is retained.  Redefinitions of names will override the old "
"definitions, so this is generally not a problem.  If the new version of a "
"module does not define a name that was defined by the old version, the old "
"definition remains.  This feature can be used to the module's advantage if "
"it maintains a global table or cache of objects --- with a :keyword:`try` "
"statement it can test for the table's presence and skip its initialization "
"if desired::"
msgstr ""
"モジュールが再ロードされた際、その辞書 (モジュールのグローバル変数を含みま"
"す) はそのまま残ります。名前の再定義を行うと、以前の定義を上書きするので、一"
"般的には問題はありません。新たなバージョンのモジュールが古いバージョンで定義"
"された名前を定義していない場合、古い定義がそのまま残ります。辞書がグローバル"
"テーブルやオブジェクトのキャッシュを維持していれば、この機能をモジュールを有"
"効性を引き出すために使うことができます --- つまり、 :keyword:`try` 文を使え"
"ば、必要に応じてテーブルがあるかどうかをテストし、その初期化を飛ばすことがで"
"きます::"

#: ../../library/imp.rst:173
msgid ""
"It is legal though generally not very useful to reload built-in or "
"dynamically loaded modules, except for :mod:`sys`, :mod:`__main__` and :mod:"
"`builtins`. In many cases, however, extension modules are not designed to be "
"initialized more than once, and may fail in arbitrary ways when reloaded."
msgstr ""
"ビルトインのモジュールや動的にロードされたモジュールをリロードすることは、 :"
"mod:`sys`, :mod:`__main__`, :mod:`builtins` を除いて一般にはそれほど有用では"
"ありませんが、合法です。しかし、多くの場合、拡張モジュールは二度以上初期化さ"
"れるようには作られておらず、リロードされた時に無作為な方法で失敗するかもしれ"
"ません。"

#: ../../library/imp.rst:178
msgid ""
"If a module imports objects from another module using :keyword:`from` ... :"
"keyword:`import` ..., calling :func:`reload` for the other module does not "
"redefine the objects imported from it --- one way around this is to re-"
"execute the :keyword:`!from` statement, another is to use :keyword:`!import` "
"and qualified names (*module*.*name*) instead."
msgstr ""
"一方のモジュールが :keyword:`from` ... :keyword:`import` ... を使って、オブ"
"ジェクトを他方のモジュールからインポートしているなら、他方のモジュールを :"
"func:`reload` で呼び出しても、そのモジュールからインポートされたオブジェクト"
"を再定義することはできません --- この問題を回避する一つの方法は、 :keyword:"
"`from` 文を再度実行することで、もう一つの方法は :keyword:`!from` 文の代わり"
"に :keyword:`!import` と限定的な名前 (*module*.\\*name*) を使うことです。"

#: ../../library/imp.rst:184
msgid ""
"If a module instantiates instances of a class, reloading the module that "
"defines the class does not affect the method definitions of the instances "
"--- they continue to use the old class definition.  The same is true for "
"derived classes."
msgstr ""
"あるモジュールがクラスのインスタンスを生成している場合、そのクラスを定義して"
"いるモジュールの再ロードはそれらインスタンスのメソッド定義に影響しません --- "
"それらは古いクラス定義を使い続けます。これは派生クラスの場合でも同じです。"

#: ../../library/imp.rst:188
msgid ""
"Relies on both ``__name__`` and ``__loader__`` being defined on the module "
"being reloaded instead of just ``__name__``."
msgstr ""
"リロードされるモジュール上で、``__name__`` だけでなく ``__name__`` と "
"``__loader__`` の両方が定義されていることに依存します。"

#: ../../library/imp.rst:192
msgid "Use :func:`importlib.reload` instead."
msgstr "代わりに :func:`importlib.reload` を使用してください。"

#: ../../library/imp.rst:196
msgid ""
"The following functions are conveniences for handling :pep:`3147` byte-"
"compiled file paths."
msgstr ""
"以下は、 :pep:`3147` のバイトコンパイルされたファイルパスを扱うために便利な関"
"数です。"

#: ../../library/imp.rst:203
msgid ""
"Return the :pep:`3147` path to the byte-compiled file associated with the "
"source *path*.  For example, if *path* is ``/foo/bar/baz.py`` the return "
"value would be ``/foo/bar/__pycache__/baz.cpython-32.pyc`` for Python 3.2. "
"The ``cpython-32`` string comes from the current magic tag (see :func:"
"`get_tag`; if :attr:`sys.implementation.cache_tag` is not defined then :exc:"
"`NotImplementedError` will be raised). By passing in ``True`` or ``False`` "
"for *debug_override* you can override the system's value for ``__debug__``, "
"leading to optimized bytecode."
msgstr ""
"ソース *path* に関連付けられたバイトコンパイルされたファイルの :pep:`3147` パ"
"スを返します。例えば、 *path* が ``/foo/bar/baz.py`` なら、 Python 3.2 の場合"
"返り値は ``/foo/bar/__pycache__/baz.cpython-32.pyc`` になります。 "
"``cpython-32`` という文字列は、現在のマジックタグから得られます (マジックタグ"
"については :func:`get_tag` を参照; :attr:`sys.implementation.cache_tag` が未"
"定義なら :exc:`NotImplementedError` が送出されます)。 *debug_override* に "
"``True`` あるいは ``False`` を渡すことによって、 ``__debug__`` システム値を"
"オーバーライドして最適化されたバイトコードを得ることができます。"

#: ../../library/imp.rst:212
msgid "*path* need not exist."
msgstr "*path* は存在している必要はありません。"

#: ../../library/imp.rst:214
msgid ""
"If :attr:`sys.implementation.cache_tag` is ``None``, then :exc:"
"`NotImplementedError` is raised."
msgstr ""
":attr:`sys.implementation.cache_tag` が ``None`` の場合、 :exc:"
"`NotImplementedError` が上げられます。"

#: ../../library/imp.rst:218
msgid "Use :func:`importlib.util.cache_from_source` instead."
msgstr "代わりに :func:`importlib.util.cache_from_source` を使用してください。"

#: ../../library/imp.rst:221
msgid "The *debug_override* parameter no longer creates a ``.pyo`` file."
msgstr ""
"*debug_override* 引数は ``.pyo`` ファイルを作成することはもうありません。"

#: ../../library/imp.rst:227
msgid ""
"Given the *path* to a :pep:`3147` file name, return the associated source "
"code file path.  For example, if *path* is ``/foo/bar/__pycache__/baz."
"cpython-32.pyc`` the returned path would be ``/foo/bar/baz.py``.  *path* "
"need not exist, however if it does not conform to :pep:`3147` format, a :exc:"
"`ValueError` is raised. If :attr:`sys.implementation.cache_tag` is not "
"defined, :exc:`NotImplementedError` is raised."
msgstr ""
":pep:`3147` ファイル名への *path* が与えられると、関連するソースコードのファ"
"イルパスを返します。例えば、 *path* が ``/foo/bar/__pycache__/baz.cpython-32."
"pyc`` なら、返されるパスは ``/foo/bar/baz.py`` になります。 *path* は存在する"
"必要はありませんが、 :pep:`3147` フォーマットに一致しない場合は :exc:"
"`ValueError` が送出されます。 :attr:`sys.implementation.cache_tag` が定義され"
"ていない場合、 :exc:`NotImplementedError` が送出されます。"

#: ../../library/imp.rst:235
msgid ""
"Raise :exc:`NotImplementedError` when :attr:`sys.implementation.cache_tag` "
"is not defined."
msgstr ""
":attr:`sys.implementation.cache_tag` が定義されていない場合、 :exc:"
"`NotImplementedError` が上げられます。"

#: ../../library/imp.rst:239
msgid "Use :func:`importlib.util.source_from_cache` instead."
msgstr "代わりに :func:`importlib.util.source_from_cache` を使用してください。"

#: ../../library/imp.rst:245
msgid ""
"Return the :pep:`3147` magic tag string matching this version of Python's "
"magic number, as returned by :func:`get_magic`."
msgstr ""
":func:`get_magic` によって返されるのと同じ、このバージョンの Python のマジッ"
"クナンバーと一致する :pep:`3147` のマジックタグ文字列を返します。"

#: ../../library/imp.rst:248
msgid ""
"Use :attr:`sys.implementation.cache_tag` directly starting in Python 3.3."
msgstr ""
"Python 3.3 からは :attr:`sys.implementation.cache_tag`  を直接使ってくださ"
"い。"

#: ../../library/imp.rst:253
msgid ""
"The following functions help interact with the import system's internal "
"locking mechanism.  Locking semantics of imports are an implementation "
"detail which may vary from release to release.  However, Python ensures that "
"circular imports work without any deadlocks."
msgstr ""
"以下の関数はインポートシステムの内部ロックメカニズムとのやりとりをサポートし"
"ます。インポートのロックセマンティクスはリリース毎に変わる可能性のある実装詳"
"細です。ただし、Python は循環インポートがデッドロックなしで動作することを保証"
"しています。"

#: ../../library/imp.rst:261
msgid ""
"Return ``True`` if the global import lock is currently held, else ``False``. "
"On platforms without threads, always return ``False``."
msgstr ""
"現在グローバルなインポートロックが保持されている場合 ``True`` を返し、そうで"
"なければ ``False`` を返します。スレッドのないプラットフォームでは常に "
"``False`` を返します。"

#: ../../library/imp.rst:264
msgid ""
"On platforms with threads, a thread executing an import first holds a global "
"import lock, then sets up a per-module lock for the rest of the import.  "
"This blocks other threads from importing the same module until the original "
"import completes, preventing other threads from seeing incomplete module "
"objects constructed by the original thread.  An exception is made for "
"circular imports, which by construction have to expose an incomplete module "
"object at some point."
msgstr ""
"スレッドを持つプラットフォームでは、まずインポートを実行するスレッドがグロー"
"バルなインポートロックを保持し、次にインポートの残りの部分を実行するためにモ"
"ジュール単位のロックをセットアップします。これは、他のスレッドが同じモジュー"
"ルをインポートするのをオリジナルのインポートが完了するまでブロックして、他の"
"スレッドがオリジナルのスレッドによって構築された不完全なモジュールオブジェク"
"トを見てしまわないようにします。循環インポートに対しては例外が発生します。こ"
"れは、そのようなモジュールを構築するためには、どこかの時点で不完全なモジュー"
"ルオブジェクトを露出しなければならないためです。"

#: ../../library/imp.rst:272 ../../library/imp.rst:292
#: ../../library/imp.rst:305
msgid ""
"The locking scheme has changed to per-module locks for the most part.  A "
"global import lock is kept for some critical tasks, such as initializing the "
"per-module locks."
msgstr ""
"ロックスキームは、大部分がモジュール毎のロックに変わりました。グローバルなイ"
"ンポートロックは、モジュール毎のロックを初期化するようないくつかのクリティカ"
"ルタスクのために維持されます。"

#: ../../library/imp.rst:282
msgid ""
"Acquire the interpreter's global import lock for the current thread. This "
"lock should be used by import hooks to ensure thread-safety when importing "
"modules."
msgstr ""
"現在のスレッドに対するインタープリタのグローバルなインポートロックを獲得しま"
"す。このロックは、モジュールをインポートする際にスレッドセーフ性を保証するた"
"めに、インポートフックによって使用されるべきです。"

#: ../../library/imp.rst:286
msgid ""
"Once a thread has acquired the import lock, the same thread may acquire it "
"again without blocking; the thread must release it once for each time it has "
"acquired it."
msgstr ""
"一旦スレッドがインポートロックを取得したら、その同じスレッドはブロックされる"
"ことなくそのロックを再度取得できます。スレッドはロックを取得するのと同じだけ"
"解放しなければなりません。"

#: ../../library/imp.rst:290
msgid "On platforms without threads, this function does nothing."
msgstr "スレッドのないプラットホームではこの関数は何もしません。"

#: ../../library/imp.rst:302
msgid ""
"Release the interpreter's global import lock. On platforms without threads, "
"this function does nothing."
msgstr ""
"インタープリタのグローバルなインポートロックを解放します。スレッドのないプ"
"ラットフォームでは何もしません。"

#: ../../library/imp.rst:313
msgid ""
"The following constants with integer values, defined in this module, are "
"used to indicate the search result of :func:`find_module`."
msgstr ""
"整数値をもつ次の定数はこのモジュールの中で定義されており、 :func:"
"`find_module` の検索結果を表すために使われます。"

#: ../../library/imp.rst:319
msgid "The module was found as a source file."
msgstr "ソースファイルとしてモジュールが発見された。"

#: ../../library/imp.rst:326
msgid "The module was found as a compiled code object file."
msgstr ""
"コンパイルされたコードオブジェクトファイルとしてモジュールが発見された。"

#: ../../library/imp.rst:333
msgid "The module was found as dynamically loadable shared library."
msgstr "動的にロード可能な共有ライブラリとしてモジュールが発見された。"

#: ../../library/imp.rst:340
msgid "The module was found as a package directory."
msgstr "パッケージディレクトリとしてモジュールが発見された。"

#: ../../library/imp.rst:347
msgid "The module was found as a built-in module."
msgstr "モジュールが組み込みモジュールとして発見された。"

#: ../../library/imp.rst:354
msgid "The module was found as a frozen module."
msgstr "モジュールが frozen モジュールとして発見された。"

#: ../../library/imp.rst:361
msgid ""
"The :class:`NullImporter` type is a :pep:`302` import hook that handles non-"
"directory path strings by failing to find any modules.  Calling this type "
"with an existing directory or empty string raises :exc:`ImportError`. "
"Otherwise, a :class:`NullImporter` instance is returned."
msgstr ""
":class:`NullImporter` 型は :pep:`302` インポートフックで、何もモジュールが見"
"つからなかったときの非ディレクトリパス文字列を処理します。この型を既存のディ"
"レクトリや空文字列に対してコールすると :exc:`ImportError` が発生します。それ"
"以外の場合は :class:`NullImporter` のインスタンスが返されます。"

#: ../../library/imp.rst:366
msgid "Instances have only one method:"
msgstr "インスタンスはたった一つのメソッドを持ちます:"

#: ../../library/imp.rst:370
msgid ""
"This method always returns ``None``, indicating that the requested module "
"could not be found."
msgstr ""
"このメソッドは常に ``None`` を返し、要求されたモジュールが見つからなかったこ"
"とを表します。"

#: ../../library/imp.rst:373
msgid ""
"``None`` is inserted into ``sys.path_importer_cache`` instead of an instance "
"of :class:`NullImporter`."
msgstr ""
":class:`NullImporter` のインスタンスの代わりに ``None`` が ``sys."
"path_importer_cache`` に挿入されます。"

#: ../../library/imp.rst:377
msgid "Insert ``None`` into ``sys.path_importer_cache`` instead."
msgstr "代わりに ``None`` を ``sys.path_importer_cache`` に挿入してください。"

#: ../../library/imp.rst:384
msgid "Examples"
msgstr "使用例"

#: ../../library/imp.rst:386
msgid ""
"The following function emulates what was the standard import statement up to "
"Python 1.4 (no hierarchical module names).  (This *implementation* wouldn't "
"work in that version, since :func:`find_module` has been extended and :func:"
"`load_module` has been added in 1.4.) ::"
msgstr ""
"次の関数は Python 1.4 までの標準 import 文(階層的なモジュール名がない)をエ"
"ミュレートします。 (この *実装* はそのバージョンでは動作しないでしょう。なぜ"
"なら、 :func:`find_module` は拡張されており、また :func:`load_module` が 1.4 "
"で追加されているからです。) ::"
