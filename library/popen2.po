# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/popen2.rst:3
msgid ":mod:`popen2` --- Subprocesses with accessible I/O streams"
msgstr ":mod:`popen2` --- アクセス可能な I/O ストリームを持つサブプロセス生成"

#: ../../library/popen2.rst:11
msgid ""
"This module is obsolete.  Use the :mod:`subprocess` module.  Check "
"especially the :ref:`subprocess-replacements` section."
msgstr ""
"このモジュールは時代遅れです。 :mod:`subprocess` モジュールを利用してくださ"
"い。特に :ref:`subprocess-replacements` 節を参照してください。"

#: ../../library/popen2.rst:15
msgid ""
"This module allows you to spawn processes and connect to their input/output/"
"error pipes and obtain their return codes under Unix and Windows."
msgstr ""
"このモジュールにより、Unix および Windows でプロセスを起動し、その入力／出力"
"／エラー出力パイプに接続し、そのリターンコードを取得することができます。"

#: ../../library/popen2.rst:18
msgid ""
"The :mod:`subprocess` module provides more powerful facilities for spawning "
"new processes and retrieving their results.  Using the :mod:`subprocess` "
"module is preferable to using the :mod:`popen2` module."
msgstr ""
":mod:`subprocess` モジュールは、新しいプロセスを実行して結果を取得するための"
"より強力な機能を提供しています。  :mod:`popen2` の代わりに :mod:`subprocess` "
"モジュールを利用することが推奨されています。"

#: ../../library/popen2.rst:22
msgid ""
"The primary interface offered by this module is a trio of factory functions. "
"For each of these, if *bufsize* is specified,  it specifies the buffer size "
"for the I/O pipes.  *mode*, if provided, should be the string ``'b'`` or "
"``'t'``; on Windows this is needed to determine whether the file objects "
"should be opened in binary or text mode.  The default value for *mode* is "
"``'t'``."
msgstr ""
"このモジュールで提供されている第一のインタフェースは 3 つのファクトリ関数で"
"す。これらの関数のいずれも、 *bufsize* を指定した場合、 I/O パイプのバッファ"
"サイズを決定します。 *mode* を指定する場合、文字列 ``'b'`` または ``'t'`` で"
"なければなりません; Windows では、ファイルオブジェクトをバイナリあるいはテキ"
"ストモードのどちらで開くかを決めなければなりません。 *mode* の標準の値は "
"``'t'`` です。"

#: ../../library/popen2.rst:28
msgid ""
"On Unix, *cmd* may be a sequence, in which case arguments will be passed "
"directly to the program without shell intervention (as with :func:`os."
"spawnv`). If *cmd* is a string it will be passed to the shell (as with :func:"
"`os.system`)."
msgstr ""
"Unix では *cmd* はシーケンスでもよく、その場合には (:func:`os.spawnv` のよう"
"に) 引数はシェルを介在させずプログラムに直接渡されます。 *cmd* が文字列の場"
"合、(:func:`os.system` のように) シェルに渡されます。"

#: ../../library/popen2.rst:32
msgid ""
"The only way to retrieve the return codes for the child processes is by "
"using the :meth:`poll` or :meth:`wait` methods on the :class:`Popen3` and :"
"class:`Popen4` classes; these are only available on Unix.  This information "
"is not available when using the :func:`popen2`, :func:`popen3`, and :func:"
"`popen4` functions, or the equivalent functions in the :mod:`os` module. "
"(Note that the tuples returned by the :mod:`os` module's functions are in a "
"different order from the ones returned by the :mod:`popen2` module.)"
msgstr ""
"子プロセスからのリターンコードを取得するには、 :class:`Popen3` および :class:"
"`Popen4` クラスの :meth:`poll` あるいは :meth:`wait` メソッドを使うしかありま"
"せん; これらの機能は Unix でしか利用できません。この情報は :func:"
"`popen2` 、 :func:`popen3` 、および :func:`popen4` 関数、あるいは :mod:`os` "
"モジュールにおける同等の関数の使用によっては得ることができません。 (:mod:"
"`os` モジュールの関数から返されるタプルは :mod:`popen2` モジュールの関数から"
"返されるものとは違う順序です。)"

#: ../../library/popen2.rst:43
msgid ""
"Executes *cmd* as a sub-process.  Returns the file objects ``(child_stdout, "
"child_stdin)``."
msgstr ""
"*cmd* をサブプロセスとして実行します。ファイルオブジェクト ``(child_stdout, "
"child_stdin)`` を返します。"

#: ../../library/popen2.rst:49
msgid ""
"Executes *cmd* as a sub-process.  Returns the file objects ``(child_stdout, "
"child_stdin, child_stderr)``."
msgstr ""
"*cmd* をサブプロセスとして実行します。ファイルオブジェクト ``(child_stdout, "
"child_stdin, child_stderr)`` を返します。"

#: ../../library/popen2.rst:55
msgid ""
"Executes *cmd* as a sub-process.  Returns the file objects "
"``(child_stdout_and_stderr, child_stdin)``."
msgstr ""
"*cmd* をサブプロセスとして実行します。ファイルオブジェクト "
"``(child_stdout_and_stderr, child_stdin)`` を返します。"

#: ../../library/popen2.rst:60
msgid ""
"On Unix, a class defining the objects returned by the factory functions is "
"also available.  These are not used for the Windows implementation, and are "
"not available on that platform."
msgstr ""
"Unix では、ファクトリ関数によって返されるオブジェクトを定義しているクラスも利"
"用することができます。これらのオブジェクトは Windows 実装で使われていないた"
"め、そのプラットフォーム上で使うことはできません。"

#: ../../library/popen2.rst:67
msgid ""
"This class represents a child process.  Normally, :class:`Popen3` instances "
"are created using the :func:`popen2` and :func:`popen3` factory functions "
"described above."
msgstr ""
"このクラスは子プロセスを表現します。通常、 :class:`Popen3` インスタンスは上で"
"述べた :func:`popen2` および :func:`popen3` ファクトリ関数を使って生成されま"
"す。"

#: ../../library/popen2.rst:71
msgid ""
"If not using one of the helper functions to create :class:`Popen3` objects, "
"the parameter *cmd* is the shell command to execute in a sub-process.  The "
"*capturestderr* flag, if true, specifies that the object should capture "
"standard error output of the child process. The default is false.  If the "
"*bufsize* parameter is specified, it specifies the size of the I/O buffers "
"to/from the child process."
msgstr ""
":class:`Popen3` オブジェクトを生成するためにいずれかのヘルパー関数を使ってい"
"ないのなら、 *cmd* パラメタはサブプロセスで実行するシェルコマンドになりま"
"す。 *capturestderr* フラグに真を与えることで、このオブジェクトが子プロセスの"
"標準エラー出力をキャプチャすべきであることを指示します。標準の値は偽です。 "
"*bufsize* パラメタを指定すると、子プロセスへの／からの I/O バッファサイズとし"
"て使われます。"

#: ../../library/popen2.rst:81
msgid ""
"Similar to :class:`Popen3`, but always captures standard error into the same "
"file object as standard output.  These are typically created using :func:"
"`popen4`."
msgstr ""
":class:`Popen3` に似ていますが、標準エラー出力を標準出力と同じファイルオブ"
"ジェクトでキャプチャします。このオブジェクトは通常 :func:`popen4` で生成され"
"ます。"

#: ../../library/popen2.rst:91
msgid "Popen3 and Popen4 Objects"
msgstr "Popen3 および Popen4 オブジェクト"

#: ../../library/popen2.rst:93
msgid ""
"Instances of the :class:`Popen3` and :class:`Popen4` classes have the "
"following methods:"
msgstr ""
":class:`Popen3` および :class:`Popen4` クラスのインスタンスは以下のメソッドを"
"持ちます:"

#: ../../library/popen2.rst:99
msgid ""
"Returns ``-1`` if child process hasn't completed yet, or its status code "
"(see :meth:`wait`) otherwise."
msgstr ""
"子プロセスがまだ終了していない際には ``-1`` を、そうでない場合にはステータス"
"コード (:meth:`wait` を参照) を返します。"

#: ../../library/popen2.rst:105
msgid ""
"Waits for and returns the status code of the child process.  The status code "
"encodes both the return code of the process and information about whether it "
"exited using the :c:func:`exit` system call or died due to a signal.  "
"Functions to help interpret the status code are defined in the :mod:`os` "
"module; see section :ref:`os-process` for the :func:`W\\*` family of "
"functions."
msgstr ""
"子プロセスの状態コード出力を待機して返します。状態コードでは子プロセスのリ"
"ターンコードと、プロセスが :c:func:`exit` によって終了したか、あるいはシグナ"
"ルによって死んだかについての情報を符号化しています。状態コードの解釈を助ける"
"ための関数は :mod:`os` モジュールで定義されています; :ref:`os-process` 節の :"
"func:`W\\*` 関数ファミリを参照してください。"

#: ../../library/popen2.rst:111
msgid "The following attributes are also available:"
msgstr "以下の属性も利用可能です:"

#: ../../library/popen2.rst:116
msgid ""
"A file object that provides output from the child process.  For :class:"
"`Popen4` instances, this will provide both the standard output and standard "
"error streams."
msgstr ""
"子プロセスからの出力を提供するファイルオブジェクトです。 :class:`Poepn4` イン"
"スタンスの場合、この値は標準出力と標準エラー出力の両方を提供するオブジェクト"
"になります。"

#: ../../library/popen2.rst:123
msgid "A file object that provides input to the child process."
msgstr "子プロセスへの入力を提供するファイルオブジェクトです。"

#: ../../library/popen2.rst:128
msgid ""
"A file object that provides error output from the child process, if "
"*capturestderr* was true for the constructor, otherwise ``None``.  This will "
"always be ``None`` for :class:`Popen4` instances."
msgstr ""
"コンストラクタに *capturestderr* を渡した際には子プロセスからの標準エラー出力"
"を提供するファイルオブジェクトで、そうでない場合 ``None`` になります。 :"
"class:`Popen4` インスタンスでは、この値は常に ``None`` になります。"

#: ../../library/popen2.rst:135
msgid "The process ID of the child process."
msgstr "子プロセスのプロセス番号です。"

#: ../../library/popen2.rst:141
msgid "Flow Control Issues"
msgstr "フロー制御の問題"

#: ../../library/popen2.rst:143
msgid ""
"Any time you are working with any form of inter-process communication, "
"control flow needs to be carefully thought out.  This remains the case with "
"the file objects provided by this module (or the :mod:`os` module "
"equivalents)."
msgstr ""
"何らかの形式でプロセス間通信を利用している際には常に、制御フローについて注意"
"深く考える必要があります。これはこのモジュール (あるいは :mod:`os` モジュール"
"における等価な機能) で生成されるファイルオブジェクトの場合にもあてはまりま"
"す。"

#: ../../library/popen2.rst:147
msgid ""
"When reading output from a child process that writes a lot of data to "
"standard error while the parent is reading from the child's standard output, "
"a deadlock can occur.  A similar situation can occur with other combinations "
"of reads and writes.  The essential factors are that more than :const:"
"`_PC_PIPE_BUF` bytes are being written by one process in a blocking fashion, "
"while the other process is reading from the first process, also in a "
"blocking fashion."
msgstr ""
"親プロセスが子プロセスの標準出力を読み出している一方で、子プロセスが大量の"
"データを標準エラー出力に書き込んでいる場合、この子プロセスから出力を読み出そ"
"うとするとデッドロックが発生します。同様の状況は読み書きの他の組み合わせでも"
"生じます。本質的な要因は、一方のプロセスが別のプロセスでブロック型の読み出し"
"をしている際に、 :const:`_PC_PIPE_BUF` バイトを超えるデータがブロック型の入出"
"力を行うプロセスによって書き込まれることにあります。"

#: ../../library/popen2.rst:158
msgid "There are several ways to deal with this situation."
msgstr "こうした状況を扱うには幾つかのやりかたがあります。"

#: ../../library/popen2.rst:160
msgid ""
"The simplest application change, in many cases, will be to follow this model "
"in the parent process::"
msgstr ""
"多くの場合、もっとも単純なアプリケーションに対する変更は、親プロセスで以下の"
"ようなモデル::"

#: ../../library/popen2.rst:172
msgid "with code like this in the child::"
msgstr "に従うようにし、子プロセスで以下のようなコードにすることでしょう::"

#: ../../library/popen2.rst:184
msgid ""
"In particular, note that ``sys.stderr`` must be closed after writing all "
"data, or :meth:`readlines` won't return.  Also note that :func:`os.close` "
"must be used, as ``sys.stderr.close()`` won't close ``stderr`` (otherwise "
"assigning to ``sys.stderr`` will silently close it, so no further errors can "
"be printed)."
msgstr ""
"とりわけ、 ``sys.stderr`` は全てのデータを書き込んた後に閉じられなければなら"
"ないということに注意してください。さもなければ、 :meth:`readlines` は返ってき"
"ません。また、 ``sys.stderr.close()`` が ``stderr`` を閉じないように :func:"
"`os.close` を使わなければならないことにも注意してください。 (そうでなく "
"``sys.stderr`` に関連付けると、暗黙のうちに閉じられてしまうので、それ以降のエ"
"ラーが出力されません)。"

#: ../../library/popen2.rst:189
msgid ""
"Applications which need to support a more general approach should integrate "
"I/O over pipes with their :func:`select` loops, or use separate threads to "
"read each of the individual files provided by whichever :func:`popen\\*` "
"function or :class:`Popen\\*` class was used."
msgstr ""
"より一般的なアプローチをサポートする必要があるアプリケーションでは、パイプ経"
"由の I/O を :func:`select` ループでまとめるか、個々の :func:`popen\\ *` 関数"
"や :class:`Popen\\*` クラスが提供する各々のファイルに対して、個別のスレッドを"
"使って読み出しを行います。"

#: ../../library/popen2.rst:197
msgid "Module :mod:`subprocess`"
msgstr ":mod:`subprocess` モジュール"

#: ../../library/popen2.rst:198
msgid "Module for spawning and managing subprocesses."
msgstr "サブプロセスの生成と管理のためのモジュール。"
