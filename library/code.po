# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Tetsuo Koyama <tkoyama010@gmail.com>, 2021
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-13 14:16+0000\n"
"PO-Revision-Date: 2021-06-28 00:56+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/code.rst:2
msgid ":mod:`!code` --- Interpreter base classes"
msgstr ":mod:`!code` --- インタープリター基底クラス"

#: ../../library/code.rst:7
msgid "**Source code:** :source:`Lib/code.py`"
msgstr "**ソースコード:** :source:`Lib/code.py`"

#: ../../library/code.rst:11
msgid ""
"The ``code`` module provides facilities to implement read-eval-print loops "
"in Python.  Two classes and convenience functions are included which can be "
"used to build applications which provide an interactive interpreter prompt."
msgstr ""
"``code`` モジュールはread-eval-print (読み込み-評価-表示)ループをPythonで実装"
"するための機能を提供します。対話的なインタプリタプロンプトを提供するアプリ"
"ケーションを作るために使える二つのクラスと便利な関数が含まれています。"

#: ../../library/code.rst:18
msgid ""
"This class deals with parsing and interpreter state (the user's namespace); "
"it does not deal with input buffering or prompting or input file naming (the "
"filename is always passed in explicitly). The optional *locals* argument "
"specifies a mapping to use as the namespace in which code will be executed; "
"it defaults to a newly created dictionary with key ``'__name__'`` set to "
"``'__console__'`` and key ``'__doc__'`` set to ``None``."
msgstr ""
"このクラスは構文解析とインタープリター状態(ユーザの名前空間)を取り扱います。"
"入力バッファリングやプロンプト出力、または入力ファイル指定を扱いません(ファイ"
"ル名は常に明示的に渡されます)。オプションの *locals* 引数はその中でコードが実"
"行される名前空間として使用されるマッピングを指定します。その初期値は、キー "
"``'__name__'`` が ``'__console__'`` に設定され、キー ``'__doc__'`` が "
"``None`` に設定された新しく作られた辞書です。"

#: ../../library/code.rst:28
msgid ""
"Closely emulate the behavior of the interactive Python interpreter. This "
"class builds on :class:`InteractiveInterpreter` and adds prompting using the "
"familiar ``sys.ps1`` and ``sys.ps2``, and input buffering. If *local_exit* "
"is true, ``exit()`` and ``quit()`` in the console will not raise :exc:"
"`SystemExit`, but instead return to the calling code."
msgstr ""
"Python の対話型インタープリターの振る舞いを忠実にエミュレートします。このクラ"
"スは :class:`InteractiveInterpreter` を継承しており、よく知られた ``sys."
"ps1`` と ``sys.ps2`` を使用してプロンプトと入力バッファリングを追加します。 "
"*local_exit* が真の場合、コンソールでの ``exit()`` と ``quit()`` は :exc:"
"`SystemExit` を送出せず、代わりに呼び出し元のコードに戻ります。"

#: ../../library/code.rst:34 ../../library/code.rst:52
msgid "Added *local_exit* parameter."
msgstr "*local_exit* 引数が追加されました。"

#: ../../library/code.rst:39
msgid ""
"Convenience function to run a read-eval-print loop.  This creates a new "
"instance of :class:`InteractiveConsole` and sets *readfunc* to be used as "
"the :meth:`InteractiveConsole.raw_input` method, if provided.  If *local* is "
"provided, it is passed to the :class:`InteractiveConsole` constructor for "
"use as the default namespace for the interpreter loop.  If *local_exit* is "
"provided, it is passed to the :class:`InteractiveConsole` constructor.  The :"
"meth:`~InteractiveConsole.interact` method of the instance is then run with "
"*banner* and *exitmsg* passed as the banner and exit message to use, if "
"provided.  The console object is discarded after use."
msgstr ""
"read-eval-print ループを実行するための便利な関数。これは :class:"
"`InteractiveConsole` の新しいインスタンスを作り、 *readfunc* が与えられた場合"
"は :meth:`InteractiveConsole.raw_input` メソッドとして使われるように設定しま"
"す。 *local* が与えられた場合は、インタープリターループのデフォルト名前空間と"
"して使うために :class:`InteractiveConsole` コンストラクタへ渡されます。 "
"*local_exit* が与えられた場合は、 :class:`InteractiveConsole` コンストラクタ"
"へ渡されます。そして、インスタンスの :meth:`~InteractiveConsole.interact` メ"
"ソッドは、もし提供されていれば、見出しと終了メッセージして使うために "
"*banner* と *exitmsg* を受け取り実行されます。コンソールオブジェクトは使われ"
"た後捨てられます。"

#: ../../library/code.rst:49
msgid "Added *exitmsg* parameter."
msgstr "*exitmsg* 引数が追加されました."

#: ../../library/code.rst:57
msgid ""
"This function is useful for programs that want to emulate Python's "
"interpreter main loop (a.k.a. the read-eval-print loop).  The tricky part is "
"to determine when the user has entered an incomplete command that can be "
"completed by entering more text (as opposed to a complete command or a "
"syntax error).  This function *almost* always makes the same decision as the "
"real interpreter main loop."
msgstr ""
"この関数はPythonのインタプリタメインループ(別名、read-eval-printループ)をエ"
"ミュレートしようとするプログラムにとって役に立ちます。扱いにくい部分は、ユー"
"ザが(完全なコマンドや構文エラーではなく)さらにテキストを入力すれば完全になり"
"うる不完全なコマンドを入力したときを決定することです。この関数は *ほとんど* "
"の場合に実際のインタプリタメインループと同じ決定を行います。"

#: ../../library/code.rst:64
msgid ""
"*source* is the source string; *filename* is the optional filename from "
"which source was read, defaulting to ``'<input>'``; and *symbol* is the "
"optional grammar start symbol, which should be ``'single'`` (the default), "
"``'eval'`` or ``'exec'``."
msgstr ""
"*source* はソース文字列です。*filename* はオプションのソースが読み出された"
"ファイル名で、デフォルトで ``'<input>'`` です。*symbol* はオプションの文法の"
"開始記号で、``'single'`` (デフォルト)または ``'eval'`` か ``'exec'`` にすべき"
"です。"

#: ../../library/code.rst:69
msgid ""
"Returns a code object (the same as ``compile(source, filename, symbol)``) if "
"the command is complete and valid; ``None`` if the command is incomplete; "
"raises :exc:`SyntaxError` if the command is complete and contains a syntax "
"error, or raises :exc:`OverflowError` or :exc:`ValueError` if the command "
"contains an invalid literal."
msgstr ""
"コマンドが完全で有効ならば、コードオブジェクトを返します(``compile(source, "
"filename, symbol)`` と同じ)。コマンドが完全でないならば、 ``None`` を返しま"
"す。コマンドが完全で構文エラーを含む場合は、 :exc:`SyntaxError` を発生させま"
"す。または、コマンドが無効なリテラルを含む場合は、 :exc:`OverflowError` もし"
"くは :exc:`ValueError` を発生させます。"

#: ../../library/code.rst:79
msgid "Interactive Interpreter Objects"
msgstr "対話的なインタプリタオブジェクト"

#: ../../library/code.rst:84
msgid ""
"Compile and run some source in the interpreter. Arguments are the same as "
"for :func:`compile_command`; the default for *filename* is ``'<input>'``, "
"and for *symbol* is ``'single'``.  One of several things can happen:"
msgstr ""
"インタプリタ内のあるソースをコンパイルし実行します。引数は :func:"
"`compile_command` のものと同じです。 *filename* のデフォルトは ``'<input>'`` "
"で、 *symbol* は ``'single'`` です。あるいくつかのことが起きる可能性がありま"
"す:"

#: ../../library/code.rst:88
msgid ""
"The input is incorrect; :func:`compile_command` raised an exception (:exc:"
"`SyntaxError` or :exc:`OverflowError`).  A syntax traceback will be printed "
"by calling the :meth:`showsyntaxerror` method.  :meth:`runsource` returns "
"``False``."
msgstr ""
"入力が不正。 :func:`compile_command` が例外(:exc:`SyntaxError` か :exc:"
"`OverflowError`)を起こした場合。 :meth:`showsyntaxerror` メソッドの呼び出に"
"よって、構文トレースバックが表示されるでしょう。 :meth:`runsource` は "
"``False`` を返します。"

#: ../../library/code.rst:93
msgid ""
"The input is incomplete, and more input is required; :func:`compile_command` "
"returned ``None``. :meth:`runsource` returns ``True``."
msgstr ""
"入力が完全でなく、さらに入力が必要。 :func:`compile_command` が ``None`` を返"
"した場合。 :meth:`runsource` は ``True`` を返します。"

#: ../../library/code.rst:96
msgid ""
"The input is complete; :func:`compile_command` returned a code object.  The "
"code is executed by calling the :meth:`runcode` (which also handles run-time "
"exceptions, except for :exc:`SystemExit`). :meth:`runsource` returns "
"``False``."
msgstr ""
"入力が完全。 :func:`compile_command` がコードオブジェクトを返した場合。 (:"
"exc:`SystemExit` を除く実行時例外も処理する) :meth:`runcode` を呼び出すことに"
"よって、コードは実行されます。 :meth:`runsource` は ``False`` を返します。"

#: ../../library/code.rst:100
msgid ""
"The return value can be used to decide whether to use ``sys.ps1`` or ``sys."
"ps2`` to prompt the next line."
msgstr ""
"戻り値は、次の行のプロンプトに ``sys.ps1`` か ``sys.ps2`` のどちらを使うのか"
"判断するために使えます。"

#: ../../library/code.rst:106
msgid ""
"Execute a code object. When an exception occurs, :meth:`showtraceback` is "
"called to display a traceback.  All exceptions are caught except :exc:"
"`SystemExit`, which is allowed to propagate."
msgstr ""
"コードオブジェクトを実行します。例外が生じたときは、トレースバックを表示する"
"ために :meth:`showtraceback` が呼び出されます。伝搬することが許されている :"
"exc:`SystemExit` を除くすべての例外が捉えられます。"

#: ../../library/code.rst:110
msgid ""
"A note about :exc:`KeyboardInterrupt`: this exception may occur elsewhere in "
"this code, and may not always be caught.  The caller should be prepared to "
"deal with it."
msgstr ""
":exc:`KeyboardInterrupt` についての注意。このコードの他の場所でこの例外が生じ"
"る可能性がありますし、常に捕らえることができるとは限りません。呼び出し側はそ"
"れを処理するために準備しておくべきです。"

#: ../../library/code.rst:117
msgid ""
"Display the syntax error that just occurred.  This does not display a stack "
"trace because there isn't one for syntax errors. If *filename* is given, it "
"is stuffed into the exception instead of the default filename provided by "
"Python's parser, because it always uses ``'<string>'`` when reading from a "
"string. The output is written by the :meth:`write` method."
msgstr ""
"起きたばかりの構文エラーを表示します。複数の構文エラーに対して一つあるのでは"
"ないため、これはスタックトレースを表示しません。 *filename* が与えられた場合"
"は、Pythonのパーサが与えるデフォルトのファイル名の代わりに例外の中へ入れられ"
"ます。なぜなら、文字列から読み込んでいるときはパーサは常に ``'<string>'`` を"
"使うからです。出力は :meth:`write` メソッドによって書き込まれます。"

#: ../../library/code.rst:126
msgid ""
"Display the exception that just occurred.  We remove the first stack item "
"because it is within the interpreter object implementation. The output is "
"written by the :meth:`write` method."
msgstr ""
"起きたばかりの例外を表示します。スタックの最初の項目を取り除きます。なぜな"
"ら、それはインタプリタオブジェクトの実装の内部にあるからです。出力は :meth:"
"`write` メソッドによって書き込まれます。"

#: ../../library/code.rst:130
msgid ""
"The full chained traceback is displayed instead of just the primary "
"traceback."
msgstr ""
"最初のトレースバックではなく、完全なトレースバックの連鎖が表示されます。"

#: ../../library/code.rst:136
msgid ""
"Write a string to the standard error stream (``sys.stderr``). Derived "
"classes should override this to provide the appropriate output handling as "
"needed."
msgstr ""
"文字列を標準エラーストリーム(``sys.stderr``)へ書き込みます。必要に応じて適切"
"な出力処理を提供するために、派生クラスはこれをオーバーライドすべきです。"

#: ../../library/code.rst:143
msgid "Interactive Console Objects"
msgstr "対話的なコンソールオブジェクト"

#: ../../library/code.rst:145
msgid ""
"The :class:`InteractiveConsole` class is a subclass of :class:"
"`InteractiveInterpreter`, and so offers all the methods of the interpreter "
"objects as well as the following additions."
msgstr ""
":class:`InteractiveConsole` クラスは :class:`InteractiveInterpreter` のサブク"
"ラスです。以下の追加メソッドだけでなく、インタプリタオブジェクトのすべてのメ"
"ソッドも提供します。"

#: ../../library/code.rst:152
msgid ""
"Closely emulate the interactive Python console. The optional *banner* "
"argument specify the banner to print before the first interaction; by "
"default it prints a banner similar to the one printed by the standard Python "
"interpreter, followed by the class name of the console object in parentheses "
"(so as not to confuse this with the real interpreter -- since it's so "
"close!)."
msgstr ""
"対話的な Python コンソールをそっくりにエミュレートします。オプションの "
"*banner* 引数は最初のやりとりの前に表示するバナーを指定します。デフォルトで"
"は、標準 Python インタプリタが表示するものと同じようなバナーを表示します。そ"
"れに続けて、実際のインタプリタと混乱しないように (とても似ているから!) 括弧の"
"中にコンソールオブジェクトのクラス名を表示します。"

#: ../../library/code.rst:158
msgid ""
"The optional *exitmsg* argument specifies an exit message printed when "
"exiting. Pass the empty string to suppress the exit message. If *exitmsg* is "
"not given or ``None``, a default message is printed."
msgstr ""
"オプション引数の *exitmsg* は、終了時に出力される終了メッセージを指定します。"
"空文字列を渡すと、出力メッセージを抑止します。もし、 *exitmsg* が与えられない"
"か、``None`` の場合は、デフォルトのメッセージが出力されます。"

#: ../../library/code.rst:162
msgid "To suppress printing any banner, pass an empty string."
msgstr "バナーの表示を抑制するには、空の文字列を渡してください。"

#: ../../library/code.rst:165
msgid "Print an exit message when exiting."
msgstr "終了時に、終了メッセージを表示します。"

#: ../../library/code.rst:171
msgid ""
"Push a line of source text to the interpreter. The line should not have a "
"trailing newline; it may have internal newlines.  The line is appended to a "
"buffer and the interpreter's :meth:`~InteractiveInterpreter.runsource` "
"method is called with the concatenated contents of the buffer as source.  If "
"this indicates that the command was executed or invalid, the buffer is "
"reset; otherwise, the command is incomplete, and the buffer is left as it "
"was after the line was appended.  The return value is ``True`` if more input "
"is required, ``False`` if the line was dealt with in some way (this is the "
"same as :meth:`!runsource`)."
msgstr ""
"ソーステキストの一行をインタープリターへ送ります。その行の末尾に改行がついて"
"いてはいけません。内部に改行を持っているかもしれません。その行はバッファへ追"
"加され、ソースとして連結されたバッファの内容が渡されインタープリターの :meth:"
"`~InteractiveInterpreter.runsource` メソッドが呼び出されます。コマンドが実行"
"されたか、有効であることをこれが示している場合は、バッファはリセットされま"
"す。そうでなければ、コマンドが不完全で、その行が付加された後のままバッファは"
"残されます。さらに入力が必要ならば、戻り値は ``True`` です。その行がある方法"
"で処理されたならば、 ``False`` です(これは :meth:`!runsource` と同じです)。"

#: ../../library/code.rst:183
msgid "Remove any unhandled source text from the input buffer."
msgstr "入力バッファから処理されていないソーステキストを取り除きます。"

#: ../../library/code.rst:188
msgid ""
"Write a prompt and read a line.  The returned line does not include the "
"trailing newline.  When the user enters the EOF key sequence, :exc:"
"`EOFError` is raised. The base implementation reads from ``sys.stdin``; a "
"subclass may replace this with a different implementation."
msgstr ""
"プロンプトを書き込み、一行を読み込みます。返る行は末尾に改行を含みません。"
"ユーザがEOFキーシーケンスを入力したときは、 :exc:`EOFError` を発生させます。"
"基本実装では、 ``sys.stdin`` から読み込みます。サブクラスはこれを異なる実装と"
"置き換えるかもしれません。"
