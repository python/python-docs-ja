# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/dl.rst:3
msgid ":mod:`dl` --- Call C functions in shared objects"
msgstr ":mod:`dl` --- 共有オブジェクトの C 関数の呼び出し"

#: ../../library/dl.rst:10
msgid ""
"The :mod:`dl` module has been removed in Python 3. Use the :mod:`ctypes` "
"module instead."
msgstr ""
":mod:`dl` モジュールは Python 3 で削除されました。代わりに :mod:`ctypes` モ"
"ジュールを使ってください。"

#: ../../library/dl.rst:16
msgid ""
"The :mod:`dl` module defines an interface to the :c:func:`dlopen` function, "
"which is the most common interface on Unix platforms for handling "
"dynamically linked libraries. It allows the program to call arbitrary "
"functions in such a library."
msgstr ""
":mod:`dl` モジュールは :c:func:`dlopen` 関数へのインタフェースを定義します。"
"これはダイナミックリンクライブラリを処理するための Unix プラットフォーム上の"
"最も一般的なインタフェースです。これによりそのライブラリの任意の関数を呼ぶプ"
"ログラムが書けます。"

#: ../../library/dl.rst:22
msgid ""
"The :mod:`dl` module bypasses the Python type system and  error handling. If "
"used incorrectly it may cause segmentation faults, crashes or other "
"incorrect behaviour."
msgstr ""
":mod:`dl` モジュールは Python の型システムとエラー処理をバイパスしています。"
"もし間違って使用すれば、セグメンテーションフォルト、クラッシュ、その他の不正"
"な動作を起こします。"

#: ../../library/dl.rst:28
msgid ""
"This module will not work unless ``sizeof(int) == sizeof(long) == "
"sizeof(char *)`` If this is not the case, :exc:`SystemError` will be raised "
"on import."
msgstr ""
"このモジュールは ``sizeof(int) == sizeof(long) == sizeof(char *)`` でなければ"
"働きません。そうでなければ import するときに :exc:`SystemError` が送出される"
"でしょう。"

#: ../../library/dl.rst:31
msgid "The :mod:`dl` module defines the following function:"
msgstr ":mod:`dl` モジュールは次の関数を定義します:"

#: ../../library/dl.rst:36
msgid ""
"Open a shared object file, and return a handle. Mode signifies late binding "
"(:const:`RTLD_LAZY`) or immediate binding (:const:`RTLD_NOW`). Default is :"
"const:`RTLD_LAZY`. Note that some systems do not support :const:`RTLD_NOW`."
msgstr ""
"共有オブジェクトファイルを開いて、ハンドルを返します。モードは遅延結合 (:"
"const:`RTLD_LAZY`) または即時結合 (:const:`RTLD_NOW`)  を表します。デフォルト"
"は :const:`RTLD_LAZY` です。いくつかのシステムは :const:`RTLD_NOW` をサポート"
"していないことに注意してください。"

#: ../../library/dl.rst:40
msgid "Return value is a :class:`dlobject`."
msgstr "返り値は :class:`dlobject` です。"

#: ../../library/dl.rst:42
msgid "The :mod:`dl` module defines the following constants:"
msgstr ":mod:`dl` モジュールは次の定数を定義します:"

#: ../../library/dl.rst:47
msgid "Useful as an argument to :func:`.open`."
msgstr ":func:`.open` の引数として使います。"

#: ../../library/dl.rst:52
msgid ""
"Useful as an argument to :func:`.open`.  Note that on systems which do not "
"support immediate binding, this constant will not appear in the module. For "
"maximum portability, use :func:`hasattr` to determine if the system supports "
"immediate binding."
msgstr ""
":func:`.open` の引数として使います。即時結合をサポートしないシステムでは、こ"
"の定数がモジュールに現われないことに注意してください。最大のポータビリティを"
"求めるならば、システムが即時結合をサポートするかどうかを決定するために :func:"
"`hasattr` を使用してください。"

#: ../../library/dl.rst:57
msgid "The :mod:`dl` module defines the following exception:"
msgstr ":mod:`dl` モジュールは次の例外を定義します:"

#: ../../library/dl.rst:62
msgid ""
"Exception raised when an error has occurred inside the dynamic loading and "
"linking routines."
msgstr ""
"動的なロードやリンクルーチンの内部でエラーが生じたときに送出される例外です。"

#: ../../library/dl.rst:65
msgid "Example::"
msgstr "例::"

#: ../../library/dl.rst:72
msgid ""
"This example was tried on a Debian GNU/Linux system, and is a good example "
"of the fact that using this module is usually a bad alternative."
msgstr ""
"この例は Debian GNU/Linux システム上で行なったもので、このモジュールの使用は"
"たいてい悪い選択肢であるという事実のよい例です。"

#: ../../library/dl.rst:79
msgid "Dl Objects"
msgstr "Dl オブジェクト"

#: ../../library/dl.rst:81
msgid ""
"Dl objects, as returned by :func:`.open` above, have the following methods:"
msgstr ""
":func:`.open` によって返されたDlオブジェクトは次のメソッドを持っています:"

#: ../../library/dl.rst:86
msgid "Free all resources, except the memory."
msgstr "メモリーを除く全てのリソースを解放します。"

#: ../../library/dl.rst:91
msgid ""
"Return the pointer for the function named *name*, as a number, if it exists "
"in the referenced shared object, otherwise ``None``. This is useful in code "
"like::"
msgstr ""
"*name* という名前の関数が参照された共有オブジェクトに存在する場合、そのポイン"
"タ (整数値) を返します。存在しない場合 ``None`` を返します。これは次のように"
"使えます::"

#: ../../library/dl.rst:99
msgid ""
"(Note that this function will return a non-zero number, as zero is the "
"*NULL* pointer)"
msgstr ""
"(0 は *NULL* ポインターであるので、この関数は 0 でない数を返すだろうというこ"
"とに注意してください)"

#: ../../library/dl.rst:105
msgid ""
"Call the function named *name* in the referenced shared object. The "
"arguments must be either Python integers, which will be  passed as is, "
"Python strings, to which a pointer will be passed,  or ``None``, which will "
"be passed as *NULL*. Note that  strings should only be passed to functions "
"as :c:type:`const char\\*`, as Python will not like its string mutated."
msgstr ""
"参照された共有オブジェクトの *name* という名前の関数を呼出します。引数は、"
"Python 整数 (そのまま渡される)、Python文字列 (ポインターが渡される)、 "
"``None`` (*NULL* として渡される)  のどれかでなければいけません。 Python はそ"
"の文字列が変化させられるのを好まないので、文字列は :c:type:`const char*` とし"
"て関数に渡されるべきであることに注意してください。"

#: ../../library/dl.rst:111
msgid ""
"There must be at most 10 arguments, and arguments not given will be treated "
"as ``None``. The function's return value must be a C :c:type:`long`, which "
"is a Python integer."
msgstr ""
"最大で 10 個の引数が渡すことができ、与えられない引数は ``None`` として扱われ"
"ます。関数の返り値は C :c:type:`long` (Python整数である) です。"
