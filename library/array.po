# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
# Takanori Suzuki <takanori@takanory.net>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-26 17:13+0000\n"
"PO-Revision-Date: 2020-05-30 11:56+0000\n"
"Last-Translator: Takanori Suzuki <takanori@takanory.net>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/array.rst:2
msgid ":mod:`array` --- Efficient arrays of numeric values"
msgstr ":mod:`array` --- 効率のよい数値アレイ"

#: ../../library/array.rst:11
msgid ""
"This module defines an object type which can compactly represent an array of "
"basic values: characters, integers, floating point numbers.  Arrays are "
"sequence types and behave very much like lists, except that the type of "
"objects stored in them is constrained.  The type is specified at object "
"creation time by using a :dfn:`type code`, which is a single character.  The "
"following type codes are defined:"
msgstr ""
"このモジュールでは、基本的な値 (文字、整数、浮動小数点数) のアレイ (array、配"
"列) をコンパクトに表現できるオブジェクト型を定義しています。アレイはシーケン"
"ス (sequence) 型であり、中に入れるオブジェクトの型に制限があることを除けば、"
"リストとまったく同じように振る舞います。オブジェクト生成時に一文字の :dfn:`型"
"コード` を用いて型を指定します。次の型コードが定義されています:"

#: ../../library/array.rst:19
msgid "Type code"
msgstr "型コード"

#: ../../library/array.rst:19
msgid "C Type"
msgstr "C の型"

#: ../../library/array.rst:19
msgid "Python Type"
msgstr "Python の型"

#: ../../library/array.rst:19
msgid "Minimum size in bytes"
msgstr "最小サイズ (バイト単位)"

#: ../../library/array.rst:19
msgid "Notes"
msgstr "注釈"

#: ../../library/array.rst:21
msgid "``'b'``"
msgstr "``'b'``"

#: ../../library/array.rst:21
msgid "signed char"
msgstr "signed char"

#: ../../library/array.rst:21 ../../library/array.rst:23
#: ../../library/array.rst:27 ../../library/array.rst:29
#: ../../library/array.rst:31 ../../library/array.rst:33
#: ../../library/array.rst:35 ../../library/array.rst:37
#: ../../library/array.rst:39 ../../library/array.rst:41
msgid "int"
msgstr "int"

#: ../../library/array.rst:21 ../../library/array.rst:23
msgid "1"
msgstr "1"

#: ../../library/array.rst:23
msgid "``'B'``"
msgstr "``'B'``"

#: ../../library/array.rst:23
msgid "unsigned char"
msgstr "unsigned char"

#: ../../library/array.rst:25
msgid "``'u'``"
msgstr "``'u'``"

#: ../../library/array.rst:25
msgid "Py_UNICODE"
msgstr "Py_UNICODE"

#: ../../library/array.rst:25
msgid "Unicode character"
msgstr "Unicode文字(unicode型)"

#: ../../library/array.rst:25 ../../library/array.rst:27
#: ../../library/array.rst:29 ../../library/array.rst:31
#: ../../library/array.rst:33
msgid "2"
msgstr "2"

#: ../../library/array.rst:25
msgid "\\(1)"
msgstr "\\(1)"

#: ../../library/array.rst:27
msgid "``'h'``"
msgstr "``'h'``"

#: ../../library/array.rst:27
msgid "signed short"
msgstr "signed short"

#: ../../library/array.rst:29
msgid "``'H'``"
msgstr "``'H'``"

#: ../../library/array.rst:29
msgid "unsigned short"
msgstr "unsigned short"

#: ../../library/array.rst:31
msgid "``'i'``"
msgstr "``'i'``"

#: ../../library/array.rst:31
msgid "signed int"
msgstr "signed int"

#: ../../library/array.rst:33
msgid "``'I'``"
msgstr "``'I'``"

#: ../../library/array.rst:33
msgid "unsigned int"
msgstr "unsigned int"

#: ../../library/array.rst:35
msgid "``'l'``"
msgstr "``'l'``"

#: ../../library/array.rst:35
msgid "signed long"
msgstr "signed long"

#: ../../library/array.rst:35 ../../library/array.rst:37
#: ../../library/array.rst:43
msgid "4"
msgstr "4"

#: ../../library/array.rst:37
msgid "``'L'``"
msgstr "``'L'``"

#: ../../library/array.rst:37
msgid "unsigned long"
msgstr "unsigned long"

#: ../../library/array.rst:39
msgid "``'q'``"
msgstr "``'q'``"

#: ../../library/array.rst:39
msgid "signed long long"
msgstr "signed long long"

#: ../../library/array.rst:39 ../../library/array.rst:41
#: ../../library/array.rst:45
msgid "8"
msgstr "8"

#: ../../library/array.rst:41
msgid "``'Q'``"
msgstr "``'Q'``"

#: ../../library/array.rst:41
msgid "unsigned long long"
msgstr "unsigned long long"

#: ../../library/array.rst:43
msgid "``'f'``"
msgstr "``'f'``"

#: ../../library/array.rst:43 ../../library/array.rst:45
msgid "float"
msgstr "浮動小数点数"

#: ../../library/array.rst:45
msgid "``'d'``"
msgstr "``'d'``"

#: ../../library/array.rst:45
msgid "double"
msgstr "double"

#: ../../library/array.rst:48
msgid "Notes:"
msgstr "注釈:"

#: ../../library/array.rst:51
msgid ""
"The ``'u'`` type code corresponds to Python's obsolete unicode character (:c:"
"type:`Py_UNICODE` which is :c:type:`wchar_t`). Depending on the platform, it "
"can be 16 bits or 32 bits."
msgstr ""
"タイプコード ``'u'`` は Python の古い Unicode 文字 (:c:type:`Py_UNICODE` ある"
"いは :c:type:`wchar_t`) を表します。プラットフォームに依存して、これは 16bit "
"か 32bit になります。"

#: ../../library/array.rst:55
msgid ""
"``'u'`` will be removed together with the rest of the :c:type:`Py_UNICODE` "
"API."
msgstr ""
"``'u'`` は将来的に他の :c:type:`Py_UNICODE` API と一緒に削除されるでしょう。"

#: ../../library/array.rst:60
msgid ""
"The actual representation of values is determined by the machine "
"architecture (strictly speaking, by the C implementation).  The actual size "
"can be accessed through the :attr:`itemsize` attribute."
msgstr ""
"値の実際の表現はマシンアーキテクチャ (厳密に言うとCの実装) によって決まりま"
"す。値の実際のサイズは :attr:`itemsize` 属性から得られます。"

#: ../../library/array.rst:64
msgid "The module defines the following type:"
msgstr "このモジュールでは次の型を定義しています:"

#: ../../library/array.rst:69
msgid ""
"A new array whose items are restricted by *typecode*, and initialized from "
"the optional *initializer* value, which must be a list, a :term:`bytes-like "
"object`, or iterable over elements of the appropriate type."
msgstr ""
"要素のデータ型が *typecode* に限定される新しいアレイで、 オプションの値 "
"*initializer* を渡すと初期値になりますが、 リスト、 :term:`bytes-like "
"object` または適当な型のイテレーション可能オブジェクトでなければなりません。"

#: ../../library/array.rst:74
msgid ""
"If given a list or string, the initializer is passed to the new array's :"
"meth:`fromlist`, :meth:`frombytes`, or :meth:`fromunicode` method (see "
"below) to add initial items to the array.  Otherwise, the iterable "
"initializer is passed to the :meth:`extend` method."
msgstr ""
"リストか文字列を渡した場合、initializer は新たに作成されたアレイの :meth:"
"`fromlist` 、 :meth:`frombytes` あるいは :meth:`fromunicode` メソッド (以下を"
"参照) に渡され、アレイに初期項目を追加します。それ以外の場合には、イテラブル"
"の *initializer* は :meth:`extend` メソッドに渡されます。"

#: ../../library/array.rst:79
msgid ""
"Raises an :ref:`auditing event <auditing>` ``array.__new__`` with arguments "
"``typecode``, ``initializer``."
msgstr ""
"引数 ``typecode``, ``initializer`` 付きで :ref:`監査イベント <auditing>` "
"``array.__new__`` を送出します。"

#: ../../library/array.rst:83
msgid "A string with all available type codes."
msgstr "すべての利用可能なタイプコードを含む文字列"

#: ../../library/array.rst:85
msgid ""
"Array objects support the ordinary sequence operations of indexing, slicing, "
"concatenation, and multiplication.  When using slice assignment, the "
"assigned value must be an array object with the same type code; in all other "
"cases, :exc:`TypeError` is raised. Array objects also implement the buffer "
"interface, and may be used wherever :term:`bytes-like objects <bytes-like "
"object>` are supported."
msgstr ""
"アレイオブジェクトでは、インデクス指定、スライス、連結および反復といった、 通"
"常のシーケンスの演算をサポートしています。スライス代入を使うときは、 代入値は"
"同じ型コードのアレイオブジェクトでなければなりません。 それ以外のオブジェクト"
"を指定すると :exc:`TypeError` を送出します。 アレイオブジェクトはバッファイン"
"タフェースを実装しており、 :term:`bytes-like objects <bytes-like object>` を"
"サポートしている場所ならどこでも利用できます。"

#: ../../library/array.rst:91
msgid "The following data items and methods are also supported:"
msgstr "次のデータ要素やメソッドもサポートされています:"

#: ../../library/array.rst:95
msgid "The typecode character used to create the array."
msgstr "アレイを作るときに使う型コード文字です。"

#: ../../library/array.rst:100
msgid "The length in bytes of one array item in the internal representation."
msgstr "アレイの要素 1 つの内部表現に使われるバイト長です。"

#: ../../library/array.rst:105
msgid "Append a new item with value *x* to the end of the array."
msgstr "値 *x* の新たな要素をアレイの末尾に追加します。"

#: ../../library/array.rst:110
msgid ""
"Return a tuple ``(address, length)`` giving the current memory address and "
"the length in elements of the buffer used to hold array's contents.  The "
"size of the memory buffer in bytes can be computed as ``array.buffer_info()"
"[1] * array.itemsize``.  This is occasionally useful when working with low-"
"level (and inherently unsafe) I/O interfaces that require memory addresses, "
"such as certain :c:func:`ioctl` operations.  The returned numbers are valid "
"as long as the array exists and no length-changing operations are applied to "
"it."
msgstr ""
"アレイの内容を記憶するために使っているバッファの、現在のメモリアドレスと要素"
"数の入ったタプル ``(address, length)`` を返します。バイト単位で表したメモリ"
"バッファの大きさは ``array.buffer_info()[1] * array.itemsize`` で計算できま"
"す。例えば :c:func:`ioctl` 操作のような、メモリアドレスを必要とする低レベル"
"な (そして、本質的に危険な) I/Oインタフェースを使って作業する場合に、ときどき"
"便利です。アレイ自体が存在し、長さを変えるような演算を適用しない限り、有効な"
"値を返します。"

#: ../../library/array.rst:120
msgid ""
"When using array objects from code written in C or C++ (the only way to "
"effectively make use of this information), it makes more sense to use the "
"buffer interface supported by array objects.  This method is maintained for "
"backward compatibility and should be avoided in new code.  The buffer "
"interface is documented in :ref:`bufferobjects`."
msgstr ""
"C やC++ で書いたコードからアレイオブジェクトを使う場合 (:meth:`buffer_info` "
"の情報を使う意味のある唯一の方法です) は、アレイオブジェクトでサポートしてい"
"るバッファインタフェースを使う方がより理にかなっています。このメソッドは後方"
"互換性のために保守されており、新しいコードでの使用は避けるべきです。バッファ"
"インタフェースの説明は :ref:`bufferobjects` にあります。"

#: ../../library/array.rst:129
msgid ""
"\"Byteswap\" all items of the array.  This is only supported for values "
"which are 1, 2, 4, or 8 bytes in size; for other types of values, :exc:"
"`RuntimeError` is raised.  It is useful when reading data from a file "
"written on a machine with a different byte order."
msgstr ""
"アレイのすべての要素に対して「バイトスワップ」 (リトルエンディアンとビッグエ"
"ンディアンの変換) を行います。このメソッドは大きさが 1、2、4 および 8 バイト"
"の値のみをサポートしています。他の種類の値に使うと :exc:`RuntimeError` を送出"
"します。異なるバイトオーダを使うマシンで書かれたファイルからデータを読み込む"
"ときに役に立ちます。"

#: ../../library/array.rst:137
msgid "Return the number of occurrences of *x* in the array."
msgstr "シーケンス中の *x* の出現回数を返します。"

#: ../../library/array.rst:142
msgid ""
"Append items from *iterable* to the end of the array.  If *iterable* is "
"another array, it must have *exactly* the same type code; if not, :exc:"
"`TypeError` will be raised.  If *iterable* is not an array, it must be "
"iterable and its elements must be the right type to be appended to the array."
msgstr ""
"*iterable* から要素を取り出し、アレイの末尾に要素を追加します。 *iterable* が"
"別のアレイ型である場合、二つのアレイは *全く* 同じ型コードでなければなりませ"
"ん。それ以外の場合には :exc:`TypeError` を送出します。 *iterable* がアレイで"
"ない場合、アレイに値を追加できるような正しい型の要素からなるイテレーション可"
"能オブジェクトでなければなりません。"

#: ../../library/array.rst:150
msgid ""
"Appends items from the string, interpreting the string as an array of "
"machine values (as if it had been read from a file using the :meth:"
"`fromfile` method)."
msgstr ""
"文字列から要素を追加します。文字列は、 (ファイルから :meth:`fromfile` メソッ"
"ドを使って値を読み込んだときのように) マシンのデータ形式で表された値の配列と"
"して解釈されます。"

#: ../../library/array.rst:153
msgid ":meth:`fromstring` is renamed to :meth:`frombytes` for clarity."
msgstr ""
"明確化のため :meth:`fromstring` の名前が :meth:`frombytes` に変更されました。"

#: ../../library/array.rst:159
msgid ""
"Read *n* items (as machine values) from the :term:`file object` *f* and "
"append them to the end of the array.  If less than *n* items are available, :"
"exc:`EOFError` is raised, but the items that were available are still "
"inserted into the array."
msgstr ""
":term:`ファイルオブジェクト <file object>` *f* から (マシンのデータ形式そのま"
"まで) *n* 個の要素を読み出し、アレイの末尾に要素を追加します。 *n* 個未満の要"
"素しか読めなかった場合は :exc:`EOFError` を送出しますが、それまでに読み出せた"
"値はアレイに追加されます。"

#: ../../library/array.rst:167
msgid ""
"Append items from the list.  This is equivalent to ``for x in list: a."
"append(x)`` except that if there is a type error, the array is unchanged."
msgstr ""
"リストから要素を追加します。型に関するエラーが発生した場合にアレイが変更され"
"ないことを除き、 ``for x in list: a.append(x)`` と同じです。"

#: ../../library/array.rst:173
msgid "Deprecated alias for :meth:`frombytes`."
msgstr ":meth:`frombytes` に対する廃止予定のエイリアス"

#: ../../library/array.rst:180
msgid ""
"Extends this array with data from the given unicode string.  The array must "
"be a type ``'u'`` array; otherwise a :exc:`ValueError` is raised.  Use "
"``array.frombytes(unicodestring.encode(enc))`` to append Unicode data to an "
"array of some other type."
msgstr ""
"指定した Unicode 文字列のデータを使ってアレイを拡張します。アレイの型コード"
"は ``'u'`` でなければなりません。それ以外の場合には、 :exc:`ValueError` を送"
"出します。他の型のアレイに Unicode 型のデータを追加するには、 ``array."
"frombytes(unicodestring.encode(enc))`` を使ってください。"

#: ../../library/array.rst:188
msgid ""
"Return the smallest *i* such that *i* is the index of the first occurrence "
"of *x* in the array."
msgstr "アレイ中で *x* が出現するインデクスのうち最小の値 *i* を返します。"

#: ../../library/array.rst:194
msgid ""
"Insert a new item with value *x* in the array before position *i*. Negative "
"values are treated as being relative to the end of the array."
msgstr ""
"アレイ中の位置 *i* の前に値 *x* をもつ新しい要素を挿入します。 *i* の値が負の"
"場合、アレイの末尾からの相対位置として扱います。"

#: ../../library/array.rst:200
msgid ""
"Removes the item with the index *i* from the array and returns it. The "
"optional argument defaults to ``-1``, so that by default the last item is "
"removed and returned."
msgstr ""
"アレイからインデクスが *i* の要素を取り除いて返します。オプションの引数はデ"
"フォルトで ``-1`` になっていて、最後の要素を取り除いて返すようになっていま"
"す。"

#: ../../library/array.rst:207
msgid "Remove the first occurrence of *x* from the array."
msgstr "アレイ中の *x* のうち、最初に現れたものを取り除きます。"

#: ../../library/array.rst:212
msgid "Reverse the order of the items in the array."
msgstr "アレイの要素の順番を逆にします。"

#: ../../library/array.rst:217
msgid ""
"Convert the array to an array of machine values and return the bytes "
"representation (the same sequence of bytes that would be written to a file "
"by the :meth:`tofile` method.)"
msgstr ""
"array をマシンの値の array に変換して、 bytes の形で返します (:meth:`tofile` "
"メソッドを使ってファイルに書かれるバイト列と同じです)。"

#: ../../library/array.rst:221
msgid ":meth:`tostring` is renamed to :meth:`tobytes` for clarity."
msgstr ""
"明確化のため :meth:`tostring` の名前が :meth:`tobytes` に変更されました。"

#: ../../library/array.rst:227
msgid "Write all items (as machine values) to the :term:`file object` *f*."
msgstr ""
"すべての要素を (マシンの値の形式で) :term:`file object` *f* に書き込みます。"

#: ../../library/array.rst:232
msgid "Convert the array to an ordinary list with the same items."
msgstr "アレイを同じ要素を持つ普通のリストに変換します。"

#: ../../library/array.rst:237
msgid "Deprecated alias for :meth:`tobytes`."
msgstr ":meth:`tobytes` に対する廃止予定のエイリアス"

#: ../../library/array.rst:244
msgid ""
"Convert the array to a unicode string.  The array must be a type ``'u'`` "
"array; otherwise a :exc:`ValueError` is raised. Use ``array.tobytes()."
"decode(enc)`` to obtain a unicode string from an array of some other type."
msgstr ""
"アレイを Unicode 文字列に変換します。アレイの型コードは ``'u'`` でなければな"
"りません。それ以外の場合には :exc:`ValueError` を送出します。他の型のアレイか"
"ら Unicode 文字列を得るには、 ``array.tobytes().decode(enc)`` を使ってくださ"
"い。"

#: ../../library/array.rst:249
msgid ""
"When an array object is printed or converted to a string, it is represented "
"as ``array(typecode, initializer)``.  The *initializer* is omitted if the "
"array is empty, otherwise it is a string if the *typecode* is ``'u'``, "
"otherwise it is a list of numbers.  The string is guaranteed to be able to "
"be converted back to an array with the same type and value using :func:"
"`eval`, so long as the :class:`~array.array` class has been imported using "
"``from array import array``. Examples::"
msgstr ""
"アレイオブジェクトを表示したり文字列に変換したりすると、 ``array(typecode, "
"initializer)`` という形式で表現されます。\n"
"アレイが空の場合、 *initializer* の表示を省略します。\n"
"アレイが空でなければ、 *typecode* が ``'u'`` の場合には文字列に、それ以外の場"
"合には数値のリストになります。\n"
":class:`~array.array` クラスが ``from array import array`` というふうにイン"
"ポートされている限り、変換後の文字列に :func:`eval` を用いると元のアレイオブ"
"ジェクトと同じデータ型と値を持つアレイに逆変換できることが保証されています。"
"文字列表現の例を以下に示します::"

#: ../../library/array.rst:266
msgid "Module :mod:`struct`"
msgstr ":mod:`struct` モジュール"

#: ../../library/array.rst:266
msgid "Packing and unpacking of heterogeneous binary data."
msgstr "異なる種類のバイナリデータのパックおよびアンパック。"

#: ../../library/array.rst:270
msgid "Module :mod:`xdrlib`"
msgstr ":mod:`xdrlib` モジュール"

#: ../../library/array.rst:269
msgid ""
"Packing and unpacking of External Data Representation (XDR) data as used in "
"some remote procedure call systems."
msgstr ""
"遠隔手続き呼び出しシステムで使われる外部データ表現仕様 (External Data "
"Representation, XDR) のデータのパックおよびアンパック。"

#: ../../library/array.rst:273
msgid "`The Numerical Python Documentation <https://docs.scipy.org/doc/>`_"
msgstr "`Numerical Python ドキュメント <https://docs.scipy.org/doc/>`_"

#: ../../library/array.rst:273
msgid ""
"The Numeric Python extension (NumPy) defines another array type; see http://"
"www.numpy.org/ for further information about Numerical Python."
msgstr ""
"Numeric Python 拡張モジュール (NumPy) では、別の方法でシーケンス型を定義して"
"います。 Numerical Python に関する詳しい情報は http://www.numpy.org/ を参照し"
"てください。"
