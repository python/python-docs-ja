# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2018
# Takanori Suzuki <takanori@takanory.net>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:26+0000\n"
"Last-Translator: Takanori Suzuki <takanori@takanory.net>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/contextlib.rst:2
msgid ""
":mod:`contextlib` --- Utilities for :keyword:`with`\\ -statement contexts"
msgstr ":mod:`contextlib` --- :keyword:`with` 文コンテキスト用ユーティリティ"

#: ../../library/contextlib.rst:7
msgid "**Source code:** :source:`Lib/contextlib.py`"
msgstr "**ソースコード:** :source:`Lib/contextlib.py`"

#: ../../library/contextlib.rst:11
msgid ""
"This module provides utilities for common tasks involving the :keyword:"
"`with` statement. For more information see also :ref:`typecontextmanager` "
"and :ref:`context-managers`."
msgstr ""
"このモジュールは :keyword:`with` 文に関わる一般的なタスクのためのユーティリ"
"ティを提供します。詳しい情報は、 :ref:`typecontextmanager` と :ref:`context-"
"managers` を参照してください。"

#: ../../library/contextlib.rst:17
msgid "Utilities"
msgstr "ユーティリティ"

#: ../../library/contextlib.rst:19
msgid "Functions and classes provided:"
msgstr "以下の関数とクラスを提供しています:"

#: ../../library/contextlib.rst:23
msgid ""
"An :term:`abstract base class` for classes that implement :meth:`object."
"__enter__` and :meth:`object.__exit__`. A default implementation for :meth:"
"`object.__enter__` is provided which returns ``self`` while :meth:`object."
"__exit__` is an abstract method which by default returns ``None``. See also "
"the definition of :ref:`typecontextmanager`."
msgstr ""

#: ../../library/contextlib.rst:35
msgid ""
"This function is a :term:`decorator` that can be used to define a factory "
"function for :keyword:`with` statement context managers, without needing to "
"create a class or separate :meth:`__enter__` and :meth:`__exit__` methods."
msgstr ""
"この関数は :keyword:`with` 文コンテキストマネージャのファクトリ関数を定義する"
"ために利用できる :term:`デコレータ <decorator>` です。新しいクラスや :meth:"
"`__enter__` と :meth:`__exit__` メソッドを別々に定義しなくても、ファクトリ関"
"数を定義することができます。"

#: ../../library/contextlib.rst:39
msgid ""
"While many objects natively support use in with statements, sometimes a "
"resource needs to be managed that isn't a context manager in its own right, "
"and doesn't implement a ``close()`` method for use with ``contextlib."
"closing``"
msgstr ""

#: ../../library/contextlib.rst:43
msgid ""
"An abstract example would be the following to ensure correct resource "
"management::"
msgstr ""

#: ../../library/contextlib.rst:62
msgid ""
"The function being decorated must return a :term:`generator`-iterator when "
"called. This iterator must yield exactly one value, which will be bound to "
"the targets in the :keyword:`with` statement's :keyword:`as` clause, if any."
msgstr ""
"デコレート対象の関数は呼び出されたときに :term:`ジェネレータ <generator>`-イ"
"テレータを返す必要があります。このイテレータは必ず値を1つ yield しなければな"
"りません。 :keyword:`with` 文の :keyword:`as` 節が存在するなら、その値は as "
"節のターゲットへ束縛されることになります。"

#: ../../library/contextlib.rst:66
msgid ""
"At the point where the generator yields, the block nested in the :keyword:"
"`with` statement is executed.  The generator is then resumed after the block "
"is exited. If an unhandled exception occurs in the block, it is reraised "
"inside the generator at the point where the yield occurred.  Thus, you can "
"use a :keyword:`try`...\\ :keyword:`except`...\\ :keyword:`finally` "
"statement to trap the error (if any), or ensure that some cleanup takes "
"place. If an exception is trapped merely in order to log it or to perform "
"some action (rather than to suppress it entirely), the generator must "
"reraise that exception. Otherwise the generator context manager will "
"indicate to the :keyword:`with` statement that the exception has been "
"handled, and execution will resume with the statement immediately following "
"the :keyword:`with` statement."
msgstr ""
"ジェネレータが yield を実行した箇所で :keyword:`with` 文のネストされたブロッ"
"クが実行されます。ブロックから抜けた後でジェネレータは再開されます。ブロック"
"内で処理されない例外が発生した場合は、ジェネレータ内部の yield を実行した箇所"
"で例外が再送出されます。なので、(もしあれば) エラーを捕捉したり、クリーンアッ"
"プ処理を確実に実行したりするために、:keyword:`try`...\\ :keyword:`except`..."
"\\ :keyword:`finally` 構文を使用できます。例外を捕捉する目的が、(完全に例外を"
"抑制してしまうのではなく) 単に例外のログをとるため、もしくはあるアクションを"
"実行するためなら、ジェネレータはその例外を再送出しなければなりません。例外を"
"再送出しない場合、ジェネレータのコンテキストマネージャは :keyword:`with` 文に"
"対して例外が処理されたことを示し、:keyword:`with` 文の直後の文から実行を再開"
"します。"

#: ../../library/contextlib.rst:78
msgid ""
":func:`contextmanager` uses :class:`ContextDecorator` so the context "
"managers it creates can be used as decorators as well as in :keyword:`with` "
"statements. When used as a decorator, a new generator instance is implicitly "
"created on each function call (this allows the otherwise \"one-shot\" "
"context managers created by :func:`contextmanager` to meet the requirement "
"that context managers support multiple invocations in order to be used as "
"decorators)."
msgstr ""
":func:`contextmanager` は :class:`ContextDecorator` を使っているので、 :func:"
"`contextmanager` で作ったコンテキストマネージャは :keyword:`with` 文だけでな"
"くデコレータとしても利用できます。デコレーターとして利用された場合、新しい "
"generator インスタンスが関数呼び出しのたびに暗黙に生成されます (このことに"
"よって、 :func:`contextmanager` によって作られたなにがしか「単発」コンテキス"
"トマネージャを、コンテキストマネージャがデコレータとして使われるためには多重"
"に呼び出されることをサポートする必要がある、という要件に合致させることが出来"
"ます。)"

#: ../../library/contextlib.rst:85
msgid "Use of :class:`ContextDecorator`."
msgstr ":class:`ContextDecorator` の使用。"

#: ../../library/contextlib.rst:91
msgid ""
"Return a context manager that closes *thing* upon completion of the block.  "
"This is basically equivalent to::"
msgstr ""
"ブロックの完了時に *thing* を close するコンテキストマネージャを返します。こ"
"れは基本的に以下と等価です::"

#: ../../library/contextlib.rst:103
msgid "And lets you write code like this::"
msgstr ""
"そして、明示的に ``page`` を close する必要なしに、次のように書くことができま"
"す::"

#: ../../library/contextlib.rst:112
msgid ""
"without needing to explicitly close ``page``.  Even if an error occurs, "
"``page.close()`` will be called when the :keyword:`with` block is exited."
msgstr ""
"``page`` を明示的に close する必要は無く、エラーが発生した場合でも、 :"
"keyword:`with` ブロックを出るときに ``page.close()`` が呼ばれます。"

#: ../../library/contextlib.rst:118
msgid ""
"Return a context manager that suppresses any of the specified exceptions if "
"they occur in the body of a with statement and then resumes execution with "
"the first statement following the end of the with statement."
msgstr ""
"任意の例外リストを受け取り、with ブロック内でいずれかが起こると with ブロック"
"の直後から黙って実行を再開するコンテキストマネージャを返します。"

#: ../../library/contextlib.rst:122
msgid ""
"As with any other mechanism that completely suppresses exceptions, this "
"context manager should be used only to cover very specific errors where "
"silently continuing with program execution is known to be the right thing to "
"do."
msgstr ""
"ほかの完全に例外を抑制するメカニズム同様、このコンテキストマネージャは、黙っ"
"てプログラム実行を続けることが正しいことであるとわかっている、非常に限定的な"
"エラーをカバーする以上の使い方はしてはいけません。"

#: ../../library/contextlib.rst:127
msgid "For example::"
msgstr "例えば::"

#: ../../library/contextlib.rst:137
msgid "This code is equivalent to::"
msgstr "これは以下と等価です::"

#: ../../library/contextlib.rst:149 ../../library/contextlib.rst:188
#: ../../library/contextlib.rst:198
msgid "This context manager is :ref:`reentrant <reentrant-cms>`."
msgstr ""
"このコンテキストマネージャは :ref:`再入可能(リエントラント) <reentrant-cms>` "
"です。"

#: ../../library/contextlib.rst:156
msgid ""
"Context manager for temporarily redirecting :data:`sys.stdout` to another "
"file or file-like object."
msgstr ""

#: ../../library/contextlib.rst:159
msgid ""
"This tool adds flexibility to existing functions or classes whose output is "
"hardwired to stdout."
msgstr ""

#: ../../library/contextlib.rst:162
msgid ""
"For example, the output of :func:`help` normally is sent to *sys.stdout*. "
"You can capture that output in a string by redirecting the output to an :"
"class:`io.StringIO` object::"
msgstr ""

#: ../../library/contextlib.rst:171
msgid ""
"To send the output of :func:`help` to a file on disk, redirect the output to "
"a regular file::"
msgstr ""

#: ../../library/contextlib.rst:178
msgid "To send the output of :func:`help` to *sys.stderr*::"
msgstr ""

#: ../../library/contextlib.rst:183
msgid ""
"Note that the global side effect on :data:`sys.stdout` means that this "
"context manager is not suitable for use in library code and most threaded "
"applications. It also has no effect on the output of subprocesses. However, "
"it is still a useful approach for many utility scripts."
msgstr ""

#: ../../library/contextlib.rst:195
msgid ""
"Similar to :func:`~contextlib.redirect_stdout` but redirecting :data:`sys."
"stderr` to another file or file-like object."
msgstr ""

#: ../../library/contextlib.rst:205
msgid ""
"A base class that enables a context manager to also be used as a decorator."
msgstr ""
"コンテキストマネージャをデコレータとしても使用できるようにする基底クラスで"
"す。"

#: ../../library/contextlib.rst:207
msgid ""
"Context managers inheriting from ``ContextDecorator`` have to implement "
"``__enter__`` and ``__exit__`` as normal. ``__exit__`` retains its optional "
"exception handling even when used as a decorator."
msgstr ""
"``ContextDecorator`` から継承したコンテキストマネージャは、通常のコンテキスト"
"マネージャーと同じく ``__enter__`` および ``__exit__`` を実装する必要がありま"
"す。``__exit__`` はデコレータとして使用された場合でも例外をオプションの引数と"
"して受け取ります。"

#: ../../library/contextlib.rst:211
msgid ""
"``ContextDecorator`` is used by :func:`contextmanager`, so you get this "
"functionality automatically."
msgstr ""
":func:`contextmanager` は ``ContextDecorator`` を利用しているので、自動的にデ"
"コレーターとしても利用できるようになります。"

#: ../../library/contextlib.rst:214
msgid "Example of ``ContextDecorator``::"
msgstr "``ContextDecorator`` の例::"

#: ../../library/contextlib.rst:243
msgid ""
"This change is just syntactic sugar for any construct of the following form::"
msgstr "これは次のような形のコードに対するシンタックスシュガーになります::"

#: ../../library/contextlib.rst:249
msgid "``ContextDecorator`` lets you instead write::"
msgstr "``ContextDecorator`` を使うと代わりに次のように書けます::"

#: ../../library/contextlib.rst:255
msgid ""
"It makes it clear that the ``cm`` applies to the whole function, rather than "
"just a piece of it (and saving an indentation level is nice, too)."
msgstr ""
"デコレーターを使うと、``cm`` が関数の一部ではなく全体に適用されていることが明"
"確になります (インデントレベルを1つ節約できるのもメリットです)。"

#: ../../library/contextlib.rst:258
msgid ""
"Existing context managers that already have a base class can be extended by "
"using ``ContextDecorator`` as a mixin class::"
msgstr ""
"すでに基底クラスを持っているコンテキストマネージャーも、``ContextDecorator`` "
"を mixin クラスとして利用することで拡張できます::"

#: ../../library/contextlib.rst:271
msgid ""
"As the decorated function must be able to be called multiple times, the "
"underlying context manager must support use in multiple :keyword:`with` "
"statements. If this is not the case, then the original construct with the "
"explicit :keyword:`with` statement inside the function should be used."
msgstr ""
"デコレートされた関数が複数回呼び出せるように、内部のコンテキストマネージャー"
"は複数の :keyword:`with` 文に対応する必要があります。そうでないなら、明示的"
"な :keyword:`with` 文を関数内で利用するべきです。"

#: ../../library/contextlib.rst:281
msgid ""
"A context manager that is designed to make it easy to programmatically "
"combine other context managers and cleanup functions, especially those that "
"are optional or otherwise driven by input data."
msgstr ""
"他の、特にオプションであったり入力に依存するようなコンテキストマネージャーや"
"クリーンアップ関数を動的に組み合わせるためのコンテキストマネージャーです。"

#: ../../library/contextlib.rst:285
msgid ""
"For example, a set of files may easily be handled in a single with statement "
"as follows::"
msgstr "例えば、複数のファイルを1つの with 文で簡単に扱うことができます::"

#: ../../library/contextlib.rst:294
msgid ""
"Each instance maintains a stack of registered callbacks that are called in "
"reverse order when the instance is closed (either explicitly or implicitly "
"at the end of a :keyword:`with` statement). Note that callbacks are *not* "
"invoked implicitly when the context stack instance is garbage collected."
msgstr ""
"各インスタンスは登録されたコールバックのスタックを管理し、インスタンスが (明"
"示的に、あるいは :keyword:`with` 文の終わりに暗黙的に)  close されるときに逆"
"順でそれを呼び出します。コンテキストスタックのインスタンスが暗黙的にガベージ"
"コレクトされたときには callback は呼び出され **ません** 。"

#: ../../library/contextlib.rst:299
msgid ""
"This stack model is used so that context managers that acquire their "
"resources in their ``__init__`` method (such as file objects) can be handled "
"correctly."
msgstr ""
"このスタックモデルは、(file オブジェクトのように) ``__init__`` メソッドでリ"
"ソースを確保するコンテキストマネージャーを正しく扱うためのものです。"

#: ../../library/contextlib.rst:303
msgid ""
"Since registered callbacks are invoked in the reverse order of registration, "
"this ends up behaving as if multiple nested :keyword:`with` statements had "
"been used with the registered set of callbacks. This even extends to "
"exception handling - if an inner callback suppresses or replaces an "
"exception, then outer callbacks will be passed arguments based on that "
"updated state."
msgstr ""
"登録されたコールバックが登録の逆順で実行されるので、複数のネストされた :"
"keyword:`with` 文を利用するのと同じ振る舞いをします。これは例外処理にも適用さ"
"れます。内側のコールバックが例外を抑制したり置き換えたりした場合、外側のコー"
"ルバックには更新された状態に応じた引数が渡されます。"

#: ../../library/contextlib.rst:310
msgid ""
"This is a relatively low level API that takes care of the details of "
"correctly unwinding the stack of exit callbacks. It provides a suitable "
"foundation for higher level context managers that manipulate the exit stack "
"in application specific ways."
msgstr ""
"これは正しく exit callback の stack を巻き戻すための、比較的低レベルな API で"
"す。アプリケーション独自のより高レベルなコンテキストマネージャーを作るための"
"基板として使うのに適しています。"

#: ../../library/contextlib.rst:319
msgid ""
"Enters a new context manager and adds its :meth:`__exit__` method to the "
"callback stack. The return value is the result of the context manager's own :"
"meth:`__enter__` method."
msgstr ""
"新しいコンテキストマネージャーに enter し、その :meth:`__exit__` method を"
"コールバックスタックに追加します。渡されたコンテキストマネージャーの :meth:"
"`__enter__` メソッドの戻り値を返します。"

#: ../../library/contextlib.rst:323
msgid ""
"These context managers may suppress exceptions just as they normally would "
"if used directly as part of a :keyword:`with` statement."
msgstr ""
"コンテキストマネージャーは、普段 :keyword:`with` 文で利用された時と同じよう"
"に、例外を抑制することができます。"

#: ../../library/contextlib.rst:328
msgid "Adds a context manager's :meth:`__exit__` method to the callback stack."
msgstr ""
"コンテキストマネージャーの :meth:`__exit__` メソッドをコールバックスタックに"
"追加します。"

#: ../../library/contextlib.rst:330
msgid ""
"As ``__enter__`` is *not* invoked, this method can be used to cover part of "
"an :meth:`__enter__` implementation with a context manager's own :meth:"
"`__exit__` method."
msgstr ""
"このメソッドは ``__enter__`` を **呼び出さない** ので、コンテキストマネー"
"ジャーを実装するときに、 :meth:`__enter__` の実装の一部を自身の :meth:"
"`__exit__` メソッドでカバーするために利用できます。"

#: ../../library/contextlib.rst:334
msgid ""
"If passed an object that is not a context manager, this method assumes it is "
"a callback with the same signature as a context manager's :meth:`__exit__` "
"method and adds it directly to the callback stack."
msgstr ""
"コンテキストマネージャーではないオブジェクトが渡された場合、このメソッドはそ"
"のオブジェクトをコンテキストマネージャーの :meth:`__exit__` メソッドと同じシ"
"グネチャを持つコールバック関数だと仮定して、直接コールバックスタックに追加し"
"ます。"

#: ../../library/contextlib.rst:338
msgid ""
"By returning true values, these callbacks can suppress exceptions the same "
"way context manager :meth:`__exit__` methods can."
msgstr ""
"それらのコールバック関数も、コンテキストマネージャーの :meth:`__exit__` と同"
"じく、 true 値を返すことで例外を抑制することができます。"

#: ../../library/contextlib.rst:341
msgid ""
"The passed in object is returned from the function, allowing this method to "
"be used as a function decorator."
msgstr ""
"この関数はデコレータとしても使えるように、受け取ったオブジェクトをそのまま返"
"します。"

#: ../../library/contextlib.rst:346
msgid ""
"Accepts an arbitrary callback function and arguments and adds it to the "
"callback stack."
msgstr "任意の関数と引数を受け取り、コールバックスタックに追加します。"

#: ../../library/contextlib.rst:349
msgid ""
"Unlike the other methods, callbacks added this way cannot suppress "
"exceptions (as they are never passed the exception details)."
msgstr ""
"他のメソッドと異なり、このメソッドで追加されたコールバックは例外を抑制しませ"
"ん (例外の詳細も渡されません)。"

#: ../../library/contextlib.rst:352
msgid ""
"The passed in callback is returned from the function, allowing this method "
"to be used as a function decorator."
msgstr ""
"この関数はデコレータとしても使えるように、受け取った callback をそのまま返し"
"ます。"

#: ../../library/contextlib.rst:357
msgid ""
"Transfers the callback stack to a fresh :class:`ExitStack` instance and "
"returns it. No callbacks are invoked by this operation - instead, they will "
"now be invoked when the new stack is closed (either explicitly or implicitly "
"at the end of a :keyword:`with` statement)."
msgstr ""
"コールバックスタックを新しい :class:`ExitStack` インスタンスに移して、それを"
"返します。このメソッドは callback を実行しません。代わりに、新しい stack が "
"(明示的に、あるいは :keyword:`with` 文の終わりに暗黙的に) close されるときに"
"実行されます。"

#: ../../library/contextlib.rst:362
msgid ""
"For example, a group of files can be opened as an \"all or nothing\" "
"operation as follows::"
msgstr ""
"例えば、複数のファイルを \"all or nothing\" に開く処理を次のように書けます::"

#: ../../library/contextlib.rst:376
msgid ""
"Immediately unwinds the callback stack, invoking callbacks in the reverse "
"order of registration. For any context managers and exit callbacks "
"registered, the arguments passed in will indicate that no exception occurred."
msgstr ""
"すぐにコールバックスタックを巻き戻し、コールバック関数を登録の逆順に呼び出し"
"ます。登録されたすべてのコンテキストマネージャーと終了 callback に、例外が起"
"こらなかった場合の引数が渡されます。"

#: ../../library/contextlib.rst:383
msgid "Examples and Recipes"
msgstr "例とレシピ"

#: ../../library/contextlib.rst:385
msgid ""
"This section describes some examples and recipes for making effective use of "
"the tools provided by :mod:`contextlib`."
msgstr ""
"このセクションでは、 :mod:`contextlib` が提供するツールの効果的な使い方を示す"
"例とレシピを紹介します。"

#: ../../library/contextlib.rst:390
msgid "Supporting a variable number of context managers"
msgstr "可変数個のコンテキストマネージャーをサポートする"

#: ../../library/contextlib.rst:392
msgid ""
"The primary use case for :class:`ExitStack` is the one given in the class "
"documentation: supporting a variable number of context managers and other "
"cleanup operations in a single :keyword:`with` statement. The variability "
"may come from the number of context managers needed being driven by user "
"input (such as opening a user specified collection of files), or from some "
"of the context managers being optional::"
msgstr ""
":class:`ExitStack` の第一のユースケースは、クラスのドキュメントにかかれている"
"通り、一つの :keyword:`with` 文で可変数個のコンテキストマネージャーや他のク"
"リーンアップ関数をサポートすることです。ユーザーの入力 (指定された複数個の"
"ファイルを開く場合など) に応じて複数個のコンテキストマネージャーが必要となる"
"場合や、いくつかのコンテキストマネージャーがオプションとなる場合に、可変数個"
"のコンテキストマネージャーが必要になります::"

#: ../../library/contextlib.rst:407
msgid ""
"As shown, :class:`ExitStack` also makes it quite easy to use :keyword:`with` "
"statements to manage arbitrary resources that don't natively support the "
"context management protocol."
msgstr ""
"上の例にあるように、 :class:`ExitStack` はコンテキストマネージャープロトコル"
"をサポートしていないリソースの管理を :keyword:`with` 文を使って簡単に行えるよ"
"うにします。"

#: ../../library/contextlib.rst:413
msgid "Simplifying support for single optional context managers"
msgstr "1つのオプションのコンテキストマネージャーを簡潔にサポートする"

#: ../../library/contextlib.rst:415
msgid ""
"In the specific case of a single optional context manager, :class:"
"`ExitStack` instances can be used as a \"do nothing\" context manager, "
"allowing a context manager to easily be omitted without affecting the "
"overall structure of the source code::"
msgstr ""
"1つのオプションのコンテキストマネージャーを使う場合、 :class:`ExitStack` を何"
"もしないコンテキストマネージャーとして利用することで、ソースコードの構造を変"
"更することなく1つのコンテキストマネージャーを省略することができます::"

#: ../../library/contextlib.rst:431
msgid "Catching exceptions from ``__enter__`` methods"
msgstr "``__enter__`` メソッドからの例外をキャッチする"

#: ../../library/contextlib.rst:433
msgid ""
"It is occasionally desirable to catch exceptions from an ``__enter__`` "
"method implementation, *without* inadvertently catching exceptions from the :"
"keyword:`with` statement body or the context manager's ``__exit__`` method. "
"By using :class:`ExitStack` the steps in the context management protocol can "
"be separated slightly in order to allow this::"
msgstr ""
"稀に、 ``__enter__`` メソッドからの例外を、 :keyword:`with` 文の body やコン"
"テキストマネージャーの ``__exit__`` メソッドからの例外は間違えて捕まえないよ"
"うに、 catch したい場合があります。 :class:`ExitStack` を使って、コンテキスト"
"マネージャープロトコル内のステップを分離することができます::"

#: ../../library/contextlib.rst:448
msgid ""
"Actually needing to do this is likely to indicate that the underlying API "
"should be providing a direct resource management interface for use with :"
"keyword:`try`/:keyword:`except`/:keyword:`finally` statements, but not all "
"APIs are well designed in that regard. When a context manager is the only "
"resource management API provided, then :class:`ExitStack` can make it easier "
"to handle various situations that can't be handled directly in a :keyword:"
"`with` statement."
msgstr ""
"実際のところ、このようなコードが必要になるのならば、利用している API 側で :"
"keyword:`try`/:keyword:`except`/:keyword:`finally` 文を使った直接的なリソース"
"管理インタフェースを提供するべきです。しかし、すべての API がそのようによく設"
"計されているとは限りません。もしコンテキストマネージャーが提供されている唯一"
"のリソース管理APIであるなら、 :class:`ExitStack` を使って :keyword:`with` 文"
"を使って処理することができない様々なシチュエーションの処理をすることができま"
"す。"

#: ../../library/contextlib.rst:458
msgid "Cleaning up in an ``__enter__`` implementation"
msgstr "``__enter__`` 実装内のクリーンアップ"

#: ../../library/contextlib.rst:460
msgid ""
"As noted in the documentation of :meth:`ExitStack.push`, this method can be "
"useful in cleaning up an already allocated resource if later steps in the :"
"meth:`__enter__` implementation fail."
msgstr ""
":meth:`ExitStack.push` のドキュメントで言及したとおり、このメソッドはすでに獲"
"得したリソースを、 :meth:`__enter__` メソッドの残りのステップが失敗した時にク"
"リーンアップするために利用することができます。"

#: ../../library/contextlib.rst:464
msgid ""
"Here's an example of doing this for a context manager that accepts resource "
"acquisition and release functions, along with an optional validation "
"function, and maps them to the context management protocol::"
msgstr ""
"次の例では、リソースの確保と開放の関数に加えて、オプションのバリデーション関"
"数を受け取るコンテキストマネージャーで、この方法を使ってコンテキストマネー"
"ジャープロトコルを提供しています::"

#: ../../library/contextlib.rst:504
msgid "Replacing any use of ``try-finally`` and flag variables"
msgstr "``try-finally`` + flag 変数パターンを置き換える"

#: ../../library/contextlib.rst:506
msgid ""
"A pattern you will sometimes see is a ``try-finally`` statement with a flag "
"variable to indicate whether or not the body of the ``finally`` clause "
"should be executed. In its simplest form (that can't already be handled just "
"by using an ``except`` clause instead), it looks something like this::"
msgstr ""
"``try-finally`` 文に、``finally`` 句の内容を実行するかどうかを示すフラグ変数"
"を組み合わせたパターンを目にすることがあるかもしれません。一番シンプルな (単"
"に ``except`` 句を使うだけでは処理できない) ケースでは次のようなコードになり"
"ます::"

#: ../../library/contextlib.rst:520
msgid ""
"As with any ``try`` statement based code, this can cause problems for "
"development and review, because the setup code and the cleanup code can end "
"up being separated by arbitrarily long sections of code."
msgstr ""
"``try`` 文を使ったコードでは、セットアップとクリーンアップのコードが任意の長"
"さのコードで分離してしまうので、開発者やレビューアにとって問題になりえます。"

#: ../../library/contextlib.rst:524
msgid ""
":class:`ExitStack` makes it possible to instead register a callback for "
"execution at the end of a ``with`` statement, and then later decide to skip "
"executing that callback::"
msgstr ""
":class:`ExitStack` を使えば、代わりに ``with`` 文の終わりに実行されるコール"
"バックを登録し、後でそのコールバックをスキップするかどうかを決定できます::"

#: ../../library/contextlib.rst:536
msgid ""
"This allows the intended cleanup up behaviour to be made explicit up front, "
"rather than requiring a separate flag variable."
msgstr ""
"これにより、別のフラグ変数を使う代わりに、必要なクリーンアップ処理を手前に明"
"示しておくことができます。"

#: ../../library/contextlib.rst:539
msgid ""
"If a particular application uses this pattern a lot, it can be simplified "
"even further by means of a small helper class::"
msgstr ""
"もしあるアプリケーションがこのパターンを多用するのであれば、小さいヘルパーク"
"ラスを導入してよりシンプルにすることができます::"

#: ../../library/contextlib.rst:557
msgid ""
"If the resource cleanup isn't already neatly bundled into a standalone "
"function, then it is still possible to use the decorator form of :meth:"
"`ExitStack.callback` to declare the resource cleanup in advance::"
msgstr ""
"もしリソースのクリーンアップが単体の関数にまとまってない場合でも、 :meth:"
"`ExitStack.callback` のデコレーター形式を利用してリソース開放処理を宣言するこ"
"とができます::"

#: ../../library/contextlib.rst:572
msgid ""
"Due to the way the decorator protocol works, a callback function declared "
"this way cannot take any parameters. Instead, any resources to be released "
"must be accessed as closure variables."
msgstr ""
"デコレータープロトコルの使用上、このように宣言されたコールバック関数は引数を"
"取ることができません。その代わりに、リリースするリソースをクロージャー変数と"
"してアクセスできる必要があります。"

#: ../../library/contextlib.rst:578
msgid "Using a context manager as a function decorator"
msgstr "コンテキストマネージャーを関数デコレーターとして使う"

#: ../../library/contextlib.rst:580
msgid ""
":class:`ContextDecorator` makes it possible to use a context manager in both "
"an ordinary ``with`` statement and also as a function decorator."
msgstr ""
":class:`ContextDecorator` はコンテキストマネージャーを通常の ``with`` 文に加"
"えて関数デコレーターとしても利用できるようにします。"

#: ../../library/contextlib.rst:583
msgid ""
"For example, it is sometimes useful to wrap functions or groups of "
"statements with a logger that can track the time of entry and time of exit.  "
"Rather than writing both a function decorator and a context manager for the "
"task, inheriting from :class:`ContextDecorator` provides both capabilities "
"in a single definition::"
msgstr ""
"例えば、関数やまとまった文を、そこに入った時と出た時の時間をトラックするロ"
"ガーでラップしたい場合があります。そのために関数デコレーターとコンテキストマ"
"ネージャーを別々に書く代わりに、 :class:`ContextDecorator` を継承すると1つの"
"定義で両方の機能を提供できます::"

#: ../../library/contextlib.rst:604
msgid "Instances of this class can be used as both a context manager::"
msgstr "このクラスのインスタンスはコンテキストマネージャーとしても利用でき::"

#: ../../library/contextlib.rst:610
msgid "And also as a function decorator::"
msgstr "また関数デコレーターとしても利用できます::"

#: ../../library/contextlib.rst:617
msgid ""
"Note that there is one additional limitation when using context managers as "
"function decorators: there's no way to access the return value of :meth:"
"`__enter__`. If that value is needed, then it is still necessary to use an "
"explicit ``with`` statement."
msgstr ""
"コンテキストマネージャーを関数デコレーターとして使う場合、 :meth:`__enter__` "
"メソッドの戻り値にアクセスする手段がないという制限があることに注意してくださ"
"い。もしその値が必要であれば、明示的な ``with`` 文を使う必要があります。"

#: ../../library/contextlib.rst:625
msgid ":pep:`343` - The \"with\" statement"
msgstr ":pep:`343` - \"with\" ステートメント"

#: ../../library/contextlib.rst:625
msgid ""
"The specification, background, and examples for the Python :keyword:`with` "
"statement."
msgstr "Python の :keyword:`with` 文の仕様、背景、および例が記載されています。"

#: ../../library/contextlib.rst:631
msgid "Single use, reusable and reentrant context managers"
msgstr ""

#: ../../library/contextlib.rst:633
msgid ""
"Most context managers are written in a way that means they can only be used "
"effectively in a :keyword:`with` statement once. These single use context "
"managers must be created afresh each time they're used - attempting to use "
"them a second time will trigger an exception or otherwise not work correctly."
msgstr ""

#: ../../library/contextlib.rst:639
msgid ""
"This common limitation means that it is generally advisable to create "
"context managers directly in the header of the :keyword:`with` statement "
"where they are used (as shown in all of the usage examples above)."
msgstr ""

#: ../../library/contextlib.rst:643
msgid ""
"Files are an example of effectively single use context managers, since the "
"first :keyword:`with` statement will close the file, preventing any further "
"IO operations using that file object."
msgstr ""

#: ../../library/contextlib.rst:647
msgid ""
"Context managers created using :func:`contextmanager` are also single use "
"context managers, and will complain about the underlying generator failing "
"to yield if an attempt is made to use them a second time::"
msgstr ""

#: ../../library/contextlib.rst:675
msgid "Reentrant context managers"
msgstr ""

#: ../../library/contextlib.rst:677
msgid ""
"More sophisticated context managers may be \"reentrant\". These context "
"managers can not only be used in multiple :keyword:`with` statements, but "
"may also be used *inside* a :keyword:`with` statement that is already using "
"the same context manager."
msgstr ""

#: ../../library/contextlib.rst:682
msgid ""
":class:`threading.RLock` is an example of a reentrant context manager, as "
"are :func:`suppress` and :func:`redirect_stdout`. Here's a very simple "
"example of reentrant use::"
msgstr ""

#: ../../library/contextlib.rst:701
msgid ""
"Real world examples of reentrancy are more likely to involve multiple "
"functions calling each other and hence be far more complicated than this "
"example."
msgstr ""

#: ../../library/contextlib.rst:705
msgid ""
"Note also that being reentrant is *not* the same thing as being thread "
"safe. :func:`redirect_stdout`, for example, is definitely not thread safe, "
"as it makes a global modification to the system state by binding :data:`sys."
"stdout` to a different stream."
msgstr ""

#: ../../library/contextlib.rst:714
msgid "Reusable context managers"
msgstr ""

#: ../../library/contextlib.rst:716
msgid ""
"Distinct from both single use and reentrant context managers are "
"\"reusable\" context managers (or, to be completely explicit, \"reusable, "
"but not reentrant\" context managers, since reentrant context managers are "
"also reusable). These context managers support being used multiple times, "
"but will fail (or otherwise not work correctly) if the specific context "
"manager instance has already been used in a containing with statement."
msgstr ""

#: ../../library/contextlib.rst:723
msgid ""
":class:`threading.Lock` is an example of a reusable, but not reentrant, "
"context manager (for a reentrant lock, it is necessary to use :class:"
"`threading.RLock` instead)."
msgstr ""

#: ../../library/contextlib.rst:727
msgid ""
"Another example of a reusable, but not reentrant, context manager is :class:"
"`ExitStack`, as it invokes *all* currently registered callbacks when leaving "
"any with statement, regardless of where those callbacks were added::"
msgstr ""

#: ../../library/contextlib.rst:758
msgid ""
"As the output from the example shows, reusing a single stack object across "
"multiple with statements works correctly, but attempting to nest them will "
"cause the stack to be cleared at the end of the innermost with statement, "
"which is unlikely to be desirable behaviour."
msgstr ""

#: ../../library/contextlib.rst:763
msgid ""
"Using separate :class:`ExitStack` instances instead of reusing a single "
"instance avoids that problem::"
msgstr ""
