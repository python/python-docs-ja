# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:06+0000\n"
"PO-Revision-Date: 2020-05-30 11:57+0000\n"
"Last-Translator: tomo, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/chunk.rst:2
msgid ":mod:`chunk` --- Read IFF chunked data"
msgstr ":mod:`chunk` --- IFFチャンクデータの読み込み"

#: ../../library/chunk.rst:10
msgid "**Source code:** :source:`Lib/chunk.py`"
msgstr "**ソースコード:** :source:`Lib/chunk.py`"

#: ../../library/chunk.rst:21
msgid ""
"This module provides an interface for reading files that use EA IFF 85 "
"chunks. [#]_  This format is used in at least the Audio Interchange File "
"Format (AIFF/AIFF-C) and the Real Media File Format (RMFF).  The WAVE audio "
"file format is closely related and can also be read using this module."
msgstr ""
"このモジュールはEA IFF 85チャンクを使用しているファイルの読み込みのためのイン"
"ターフェースを提供します。[#]_ このフォーマットは少なくとも、Audio "
"Interchange File Format (AIFF/AIFF-C) とReal Media File Format (RMFF)で使われ"
"ています。WAVEオーディオファイルフォーマットも厳密に対応しているので、このモ"
"ジュールで読み込みできます。"

#: ../../library/chunk.rst:26
msgid "A chunk has the following structure:"
msgstr "チャンクは以下の構造を持っています:"

#: ../../library/chunk.rst:29
msgid "Offset"
msgstr "Offset値"

#: ../../library/chunk.rst:29
msgid "Length"
msgstr "長さ"

#: ../../library/chunk.rst:29
msgid "Contents"
msgstr "内容"

#: ../../library/chunk.rst:31
msgid "0"
msgstr "0"

#: ../../library/chunk.rst:31 ../../library/chunk.rst:33
msgid "4"
msgstr "4"

#: ../../library/chunk.rst:31
msgid "Chunk ID"
msgstr "チャンクID"

#: ../../library/chunk.rst:33
msgid "Size of chunk in big-endian byte order, not including the header"
msgstr "big- endianで示したチャンクのサイズで、ヘッダは含みません"

#: ../../library/chunk.rst:37
msgid "8"
msgstr "8"

#: ../../library/chunk.rst:37
msgid "*n*"
msgstr "*n*"

#: ../../library/chunk.rst:37
msgid "Data bytes, where *n* is the size given in the preceding field"
msgstr "バイトデータで、*n* はこれより先のフィールドのサイズ"

#: ../../library/chunk.rst:41
msgid "8 + *n*"
msgstr "8 + *n*"

#: ../../library/chunk.rst:41
msgid "0 or 1"
msgstr "0 or 1"

#: ../../library/chunk.rst:41
msgid "Pad byte needed if *n* is odd and chunk alignment is used"
msgstr "*n* が奇数ならチャンクの整頓のために埋められるバイト"

#: ../../library/chunk.rst:45
msgid "The ID is a 4-byte string which identifies the type of chunk."
msgstr "IDはチャンクの種類を識別する4バイトの文字列です。"

#: ../../library/chunk.rst:47
msgid ""
"The size field (a 32-bit value, encoded using big-endian byte order) gives "
"the size of the chunk data, not including the 8-byte header."
msgstr ""
"サイズフィールド（big-endianでエンコードされた32ビット値）は、8バイトのヘッダ"
"を含まないチャンクデータのサイズを示します。"

#: ../../library/chunk.rst:50
msgid ""
"Usually an IFF-type file consists of one or more chunks.  The proposed usage "
"of the :class:`Chunk` class defined here is to instantiate an instance at "
"the start of each chunk and read from the instance until it reaches the end, "
"after which a new instance can be instantiated. At the end of the file, "
"creating a new instance will fail with an :exc:`EOFError` exception."
msgstr ""
"普通、IFFタイプのファイルは1個かそれ以上のチャンクからなります。このモジュー"
"ルで定義される :class:`Chunk` クラスの使い方として提案しているのは、それぞれ"
"のチャンクの始めにインスタンスを作り、終わりに達するまでそのインスタンスから"
"読み取り、その後で新しいインスタンスを作るということです。ファイルの終わりで"
"新しいインスタンスを作ろうとすると、 :exc:`EOFError` の例外が発生して失敗しま"
"す。"

#: ../../library/chunk.rst:59
msgid ""
"Class which represents a chunk.  The *file* argument is expected to be a "
"file-like object.  An instance of this class is specifically allowed.  The "
"only method that is needed is :meth:`~io.IOBase.read`.  If the methods :meth:"
"`~io.IOBase.seek` and :meth:`~io.IOBase.tell` are present and don't raise an "
"exception, they are also used. If these methods are present and raise an "
"exception, they are expected to not have altered the object.  If the "
"optional argument *align* is true, chunks are assumed to be aligned on 2-"
"byte boundaries.  If *align* is false, no alignment is assumed.  The default "
"value is true.  If the optional argument *bigendian* is false, the chunk "
"size is assumed to be in little-endian order. This is needed for WAVE audio "
"files. The default value is true.  If the optional argument *inclheader* is "
"true, the size given in the chunk header includes the size of the header.  "
"The default value is false."
msgstr ""
"チャンクを表わすクラス。 *file* 引数はファイル風オブジェクトであると期待され"
"ます。このクラスのインスタンスは特別に許可されます。唯一の必要なメソッドは :"
"meth:`~io.IOBase.read` です。メソッド :meth:`~io.IOBase.seek` および :meth:"
"`~io.IOBase.tell` が存在し、例外を上げない場合、それらも使用されます。これら"
"のメソッドが存在し、例外を上げる場合、それらのメソッドはオブジェクトを変更し"
"ないことが想定されます。オプションの引数 *align* が true の場合、チャンクは2"
"バイト境界上で整列されていると仮定されます。 *align* が false の場合、整列は"
"仮定されません。デフォルト値は true です。オプションの引数 *bigendian* が "
"false の場合、チャンクサイズはリトルエンディアン順になっていると仮定されま"
"す。これは WAVE オーディオファイルに必要とされます。デフォルト値は true で"
"す。オプションの引数 *inclheader* が true の場合、チャンクヘッダ中で与えられ"
"たサイズはヘッダのサイズを含んでいます。デフォルト値は false です。"

#: ../../library/chunk.rst:73
msgid "A :class:`Chunk` object supports the following methods:"
msgstr ":class:`Chunk` オブジェクトには以下のメソッドが定義されています:"

#: ../../library/chunk.rst:78
msgid ""
"Returns the name (ID) of the chunk.  This is the first 4 bytes of the chunk."
msgstr "チャンクの名前（ID）を返します。これはチャンクの始めの4バイトです。"

#: ../../library/chunk.rst:84
msgid "Returns the size of the chunk."
msgstr "チャンクのサイズを返します。"

#: ../../library/chunk.rst:89
msgid ""
"Close and skip to the end of the chunk.  This does not close the underlying "
"file."
msgstr ""
"オブジェクトを閉じて、チャンクの終わりまで飛びます。これは元のファイル自体は"
"閉じません。"

#: ../../library/chunk.rst:92
msgid ""
"The remaining methods will raise :exc:`OSError` if called after the :meth:"
"`close` method has been called.  Before Python 3.3, they used to raise :exc:"
"`IOError`, now an alias of :exc:`OSError`."
msgstr ""
":meth:`close` メソッドが呼ばれた後で他のメソッドを呼ぶと :exc:`OSError` が送"
"出されます。 Python 3.3 以前は :exc:`IOError` (現在は :exc:`OSError` の別名) "
"が送出されていました。"

#: ../../library/chunk.rst:99
msgid "Returns ``False``."
msgstr "``False`` を返します。"

#: ../../library/chunk.rst:104
msgid ""
"Set the chunk's current position.  The *whence* argument is optional and "
"defaults to ``0`` (absolute file positioning); other values are ``1`` (seek "
"relative to the current position) and ``2`` (seek relative to the file's "
"end).  There is no return value. If the underlying file does not allow seek, "
"only forward seeks are allowed."
msgstr ""
"チャンクの現在位置を設定します。引数 *whence* は省略可能で、デフォルト値は "
"``0`` （ファイルの絶対位置）です; 他に ``1`` （現在位置から相対的にシークしま"
"す）と ``2`` （ファイルの末尾から相対的にシークします）の値を取ります。何も値"
"は返しません。もし元のファイルがシークに対応していなければ、前方へのシークの"
"みが可能です。"

#: ../../library/chunk.rst:113
msgid "Return the current position into the chunk."
msgstr "チャンク内の現在位置を返します。"

#: ../../library/chunk.rst:118
msgid ""
"Read at most *size* bytes from the chunk (less if the read hits the end of "
"the chunk before obtaining *size* bytes).  If the *size* argument is "
"negative or omitted, read all data until the end of the chunk.  An empty "
"bytes object is returned when the end of the chunk is encountered "
"immediately."
msgstr ""
"チャンクから最大で *size* バイト読み込みます ( *size* バイトを読み込むより前"
"にチャンクの最後に行き着いたら、それより少なくなります) 。もし引数 *size* が"
"負か省略されたら、チャンクの最後まで全てのデータを読み込みます。チャンクの最"
"後に行き着いたら、空の bytes オブジェクトを返します。"

#: ../../library/chunk.rst:127
msgid ""
"Skip to the end of the chunk.  All further calls to :meth:`read` for the "
"chunk will return ``b''``.  If you are not interested in the contents of the "
"chunk, this method should be called so that the file points to the start of "
"the next chunk."
msgstr ""
"チャンクの最後まで飛びます。さらにチャンクの :meth:`read` を呼び出すと、 "
"``b''`` が返されます。もしチャンクの内容に興味がないなら、このメソッドを呼び"
"出してファイルポインタを次のチャンクの始めに設定します。"

#: ../../library/chunk.rst:134
msgid "Footnotes"
msgstr "脚注"

#: ../../library/chunk.rst:135
msgid ""
"\"EA IFF 85\" Standard for Interchange Format Files, Jerry Morrison, "
"Electronic Arts, January 1985."
msgstr ""
"\"EA IFF 85\" Standard for Interchange Format Files, Jerry Morrison, "
"Electronic Arts, January 1985."
