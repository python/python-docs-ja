# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
# Takanori Suzuki <takanori@takanory.net>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 03:17+0000\n"
"Last-Translator: Takanori Suzuki <takanori@takanory.net>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/profile.rst:5
msgid "The Python Profilers"
msgstr "Python プロファイラ"

#: ../../library/profile.rst:7
msgid "**Source code:** :source:`Lib/profile.py` and :source:`Lib/pstats.py`"
msgstr "**ソースコード:** :source:`Lib/profile.py` と :source:`Lib/pstats.py`"

#: ../../library/profile.rst:14
msgid "Introduction to the profilers"
msgstr "プロファイラとは"

#: ../../library/profile.rst:20
msgid ""
":mod:`cProfile` and :mod:`profile` provide :dfn:`deterministic profiling` of "
"Python programs. A :dfn:`profile` is a set of statistics that describes how "
"often and for how long various parts of the program executed. These "
"statistics can be formatted into reports via the :mod:`pstats` module."
msgstr ""
":mod:`cProfile` と :mod:`profile` は :dfn:`決定論的プロファイリング "
"(deterministic profiling)` を行います。 :dfn:`プロファイル (profile)` とは、"
"プログラムの各部分がどれだけ頻繁に呼ばれたか、そして実行にどれだけ時間がか"
"かったかという統計情報です。 :mod:`pstats` モジュールを使ってこの統計情報を"
"フォーマットし表示することができます。"

#: ../../library/profile.rst:25
msgid ""
"The Python standard library provides two different implementations of the "
"same profiling interface:"
msgstr ""
"Python 標準ライブラリは同じインターフェイスを提供するプロファイラの実装を2つ"
"提供しています:"

#: ../../library/profile.rst:28
msgid ""
":mod:`cProfile` is recommended for most users; it's a C extension with "
"reasonable overhead that makes it suitable for profiling long-running "
"programs.  Based on :mod:`lsprof`, contributed by Brett Rosen and Ted "
"Czotter."
msgstr ""
":mod:`cProfile` はほとんどのユーザーに推奨されるモジュールです。 C言語で書か"
"れた拡張モジュールで、オーバーヘッドが少ないため長時間実行されるプログラムの"
"プロファイルに適しています。 Brett Rosen と Ted Czotter によって提供された :"
"mod:`lsprof` に基づいています。"

#: ../../library/profile.rst:33
msgid ""
":mod:`profile`, a pure Python module whose interface is imitated by :mod:"
"`cProfile`, but which adds significant overhead to profiled programs. If "
"you're trying to extend the profiler in some way, the task might be easier "
"with this module.  Originally designed and written by Jim Roskind."
msgstr ""
":mod:`profile` はピュア Python モジュールで、 :mod:`cProfile` モジュールはこ"
"のモジュールのインタフェースを真似ています。対象プログラムに相当のオーバー"
"ヘッドが生じます。もしプロファイラに何らかの拡張をしたいのであれば、こちらの"
"モジュールを拡張する方が簡単でしょう。このモジュールはもともと Jim Roskind に"
"より設計、実装されました。"

#: ../../library/profile.rst:40
msgid ""
"The profiler modules are designed to provide an execution profile for a "
"given program, not for benchmarking purposes (for that, there is :mod:"
"`timeit` for reasonably accurate results).  This particularly applies to "
"benchmarking Python code against C code: the profilers introduce overhead "
"for Python code, but not for C-level functions, and so the C code would seem "
"faster than any Python one."
msgstr ""
"2つのプロファイラモジュールは、与えられたプログラムの実行時プロファイルを取得"
"するために設計されており、ベンチマークのためのものではありません (ベンチマー"
"ク用途には :mod:`timeit` のほうが正確な計測結果を求められます)。これは "
"Python コードと C で書かれたコードをベンチマークするときに特に大きく影響しま"
"す。プロファイラは Python コードに対してオーバーヘッドを発生しますが、C言語レ"
"ベルの関数に対してはオーバーヘッドを生じません。なのでC言語で書かれたコード"
"が、実際の速度と関係なく、Pythonで書かれたコードより速く見えるでしょう。"

#: ../../library/profile.rst:51
msgid "Instant User's Manual"
msgstr "かんたんユーザマニュアル"

#: ../../library/profile.rst:53
msgid ""
"This section is provided for users that \"don't want to read the manual.\" "
"It provides a very brief overview, and allows a user to rapidly perform "
"profiling on an existing application."
msgstr ""
"この節は \"マニュアルなんか読みたくない人\"のために書かれています。ここではき"
"わめて簡単な概要説明とアプリケーションのプロファイリングを手っ取り早く行う方"
"法だけを解説します。"

#: ../../library/profile.rst:57
msgid "To profile a function that takes a single argument, you can do::"
msgstr "1つの引数を取る関数をプロファイルしたい場合、次のようにできます::"

#: ../../library/profile.rst:63
msgid ""
"(Use :mod:`profile` instead of :mod:`cProfile` if the latter is not "
"available on your system.)"
msgstr ""
"(お使いのシステムで :mod:`cProfile` が使えないときは代わりに :mod:`profile` "
"を使って下さい)"

#: ../../library/profile.rst:66
msgid ""
"The above action would run :func:`re.compile` and print profile results like "
"the following::"
msgstr ""
"上のコードは :func:`re.compile` を実行して、プロファイル結果を次のように表示"
"します::"

#: ../../library/profile.rst:82
msgid ""
"The first line indicates that 197 calls were monitored.  Of those calls, 192 "
"were :dfn:`primitive`, meaning that the call was not induced via recursion. "
"The next line: ``Ordered by: standard name``, indicates that the text string "
"in the far right column was used to sort the output. The column headings "
"include:"
msgstr ""
"最初の行は 197 回の呼び出しを測定したことを示しています。その中で 192 回は :"
"dfn:`プリミティブ` です。すなわち呼び出しが再帰によってなされてはいません。次"
"の行は ``Ordered by: standard name`` は一番右の列の文字列が出力のソートに用い"
"られたことを示します。列の見出しは以下を含みます:"

#: ../../library/profile.rst:88
msgid "ncalls"
msgstr "ncalls"

#: ../../library/profile.rst:88
msgid "for the number of calls."
msgstr "呼び出し回数"

#: ../../library/profile.rst:92
msgid "tottime"
msgstr "tottime"

#: ../../library/profile.rst:91
msgid ""
"for the total time spent in the given function (and excluding time made in "
"calls to sub-functions)"
msgstr ""
"与えられた関数に消費された合計時間 (sub-function の呼び出しで消費された時間は"
"除外されています)"

#: ../../library/profile.rst:95 ../../library/profile.rst:102
msgid "percall"
msgstr "percall"

#: ../../library/profile.rst:95
msgid "is the quotient of ``tottime`` divided by ``ncalls``"
msgstr "``tottime`` を ``ncalls`` で割った値"

#: ../../library/profile.rst:99
msgid "cumtime"
msgstr "cumtime"

#: ../../library/profile.rst:98
msgid ""
"is the cumulative time spent in this and all subfunctions (from invocation "
"till exit). This figure is accurate *even* for recursive functions."
msgstr ""
"この関数と全ての subfunction に消費された累積時間 (起動から終了まで)。この数"
"字は再帰関数に *ついても* 正確です。"

#: ../../library/profile.rst:102
msgid "is the quotient of ``cumtime`` divided by primitive calls"
msgstr "``cumtime`` をプリミティブな呼び出し回数で割った値"

#: ../../library/profile.rst:105
msgid "filename:lineno(function)"
msgstr "filename:lineno(function)"

#: ../../library/profile.rst:105
msgid "provides the respective data of each function"
msgstr "その関数のファイル名、行番号、関数名"

#: ../../library/profile.rst:107
msgid ""
"When there are two numbers in the first column (for example ``3/1``), it "
"means that the function recursed.  The second value is the number of "
"primitive calls and the former is the total number of calls.  Note that when "
"the function does not recurse, these two values are the same, and only the "
"single figure is printed."
msgstr ""
"最初の行に 2 つの数字がある場合 (たとえば ``3/1``) は、関数が再帰的に呼び出さ"
"れたということです。2 つ目の数字はプリミティブな呼び出しの回数で、1 つ目の数"
"字は総呼び出し回数です。関数が再帰的に呼び出されなかった場合、それらは同じ値"
"で数字は 1 つしか表示されないことに留意してください。"

#: ../../library/profile.rst:113
msgid ""
"Instead of printing the output at the end of the profile run, you can save "
"the results to a file by specifying a filename to the :func:`run` function::"
msgstr ""
":func:`run` 関数でファイル名を指定することで、プロファイル実行の終了時に出力"
"を表示する代わりに、ファイルに保存することが出来ます。"

#: ../../library/profile.rst:120
msgid ""
"The :class:`pstats.Stats` class reads profile results from a file and "
"formats them in various ways."
msgstr ""
":class:`pstats.Stats` クラスはファイルからプロファイルの結果を読み込んで様々"
"な書式に整えます。"

#: ../../library/profile.rst:123
msgid ""
"The file :mod:`cProfile` can also be invoked as a script to profile another "
"script.  For example::"
msgstr ""
"ファイル :mod:`cProfile` は他のスクリプトをプロファイルするためのスクリプトと"
"して起動することも出来ます。例えば::"

#: ../../library/profile.rst:128
msgid "``-o`` writes the profile results to a file instead of to stdout"
msgstr ""
"``-o`` はプロファイルの結果を標準出力の代わりにファイルに書き出します。"

#: ../../library/profile.rst:130
msgid ""
"``-s`` specifies one of the :func:`~pstats.Stats.sort_stats` sort values to "
"sort the output by. This only applies when ``-o`` is not supplied."
msgstr ""
"``-s`` は出力を :func:`~pstats.Stats.sort_stats` で出力をソートする値を指定し"
"ます。``-o`` がない場合に有効です。"

#: ../../library/profile.rst:133
msgid "``-m`` specifies that a module is being profiled instead of a script."
msgstr ""

#: ../../library/profile.rst:135
msgid "Added the ``-m`` option."
msgstr ""

#: ../../library/profile.rst:138
msgid ""
"The :mod:`pstats` module's :class:`~pstats.Stats` class has a variety of "
"methods for manipulating and printing the data saved into a profile results "
"file::"
msgstr ""
":mod:`pstats` モジュールの :class:`~pstats.Stats` クラスにはプロファイル結果"
"のファイルに保存されているデータを処理して出力するための様々なメソッドがあり"
"ます。"

#: ../../library/profile.rst:146
msgid ""
"The :meth:`~pstats.Stats.strip_dirs` method removed the extraneous path from "
"all the module names. The :meth:`~pstats.Stats.sort_stats` method sorted all "
"the entries according to the standard module/line/name string that is "
"printed. The :meth:`~pstats.Stats.print_stats` method printed out all the "
"statistics.  You might try the following sort calls::"
msgstr ""
":meth:`~pstats.Stats.strip_dirs` メソッドによって全モジュール名から無関係なパ"
"スが取り除かれました。:meth:`~pstats.Stats.sort_stats` メソッドにより、出力さ"
"れる標準的な モジュール/行/名前 文字列にしたがって全項目がソートされました。:"
"meth:`~pstats.Stats.print_stats` メソッドによって全統計が出力されました。以下"
"のようなソート呼び出しを試すことができます::"

#: ../../library/profile.rst:155
msgid ""
"The first call will actually sort the list by function name, and the second "
"call will print out the statistics.  The following are some interesting "
"calls to experiment with::"
msgstr ""
"最初の行ではリストを関数名でソートしています。2行目で情報を出力しています。さ"
"らに次の内容も試してください::"

#: ../../library/profile.rst:161
msgid ""
"This sorts the profile by cumulative time in a function, and then only "
"prints the ten most significant lines.  If you want to understand what "
"algorithms are taking time, the above line is what you would use."
msgstr ""
"このようにすると、関数が消費した累計時間でソートして、さらにその上位10件だけ"
"を表示します。どのアルゴリズムが時間を多く消費しているのか知りたいときは、こ"
"の方法が役に立つはずです。"

#: ../../library/profile.rst:165
msgid ""
"If you were looking to see what functions were looping a lot, and taking a "
"lot of time, you would do::"
msgstr ""
"ループで多くの時間を消費している関数はどれか調べたいときは、次のようにしま"
"す::"

#: ../../library/profile.rst:170
msgid ""
"to sort according to time spent within each function, and then print the "
"statistics for the top ten functions."
msgstr ""
"上記はそれぞれの関数で消費された時間でソートして、上位10件の関数の情報が表示"
"されます。"

#: ../../library/profile.rst:173
msgid "You might also try::"
msgstr "次の内容も試してください::"

#: ../../library/profile.rst:177
msgid ""
"This will sort all the statistics by file name, and then print out "
"statistics for only the class init methods (since they are spelled with "
"``__init__`` in them).  As one final example, you could try::"
msgstr ""
"このようにするとファイル名でソートされ、そのうちクラスの初期化メソッド (メ"
"ソッド名 ``__init__``) に関する統計情報だけが表示されます::"

#: ../../library/profile.rst:183
msgid ""
"This line sorts statistics with a primary key of time, and a secondary key "
"of cumulative time, and then prints out some of the statistics. To be "
"specific, the list is first culled down to 50% (re: ``.5``) of its original "
"size, then only lines containing ``init`` are maintained, and that sub-sub-"
"list is printed."
msgstr ""
"上記は時間 (time) をプライマリキー、累計時間 (cumulative time) をセカンダリ"
"キーにしてソートした後でさらに条件を絞って統計情報を出力します。 ``.5`` は上"
"位 50% だけを選択することを意味し、さらにその中から文字列 ``init`` を含むもの"
"だけが表示されます。"

#: ../../library/profile.rst:188
msgid ""
"If you wondered what functions called the above functions, you could now "
"(``p`` is still sorted according to the last criteria) do::"
msgstr ""
"どの関数がどの関数を呼び出しているのかを知りたければ、次のようにします "
"(``p`` は最後に実行したときの状態でソートされています)::"

#: ../../library/profile.rst:193
msgid "and you would get a list of callers for each of the listed functions."
msgstr "このようにすると、関数ごとの呼び出し側関数の一覧が得られます。"

#: ../../library/profile.rst:195
msgid ""
"If you want more functionality, you're going to have to read the manual, or "
"guess what the following functions do::"
msgstr ""
"さらに詳しい機能を知りたければマニュアルを読むか、次の関数の実行結果から内容"
"を推察してください::"

#: ../../library/profile.rst:201
msgid ""
"Invoked as a script, the :mod:`pstats` module is a statistics browser for "
"reading and examining profile dumps.  It has a simple line-oriented "
"interface (implemented using :mod:`cmd`) and interactive help."
msgstr ""
"スクリプトとして起動した場合、 :mod:`pstats` モジュールはプロファイルのダンプ"
"を読み込み、分析するための統計ブラウザとして動きます。シンプルな行指向のイン"
"タフェース (:mod:`cmd` を使って実装) とヘルプ機能を備えています。"

#: ../../library/profile.rst:206
msgid ":mod:`profile` and :mod:`cProfile` Module Reference"
msgstr "リファレンスマニュアル -- :mod:`profile` と :mod:`cProfile`"

#: ../../library/profile.rst:212
msgid ""
"Both the :mod:`profile` and :mod:`cProfile` modules provide the following "
"functions:"
msgstr ""
":mod:`profile` および :mod:`cProfile` モジュールは以下の関数を提供します:"

#: ../../library/profile.rst:217
msgid ""
"This function takes a single argument that can be passed to the :func:`exec` "
"function, and an optional file name.  In all cases this routine executes::"
msgstr ""
"この関数は :func:`exec` 関数に渡せる一つの引数と、オプション引数としてファイ"
"ル名を指定できます。全ての場合でこのルーチンは以下を実行します::"

#: ../../library/profile.rst:222
msgid ""
"and gathers profiling statistics from the execution. If no file name is "
"present, then this function automatically creates a :class:`~pstats.Stats` "
"instance and prints a simple profiling report. If the sort value is "
"specified, it is passed to this :class:`~pstats.Stats` instance to control "
"how the results are sorted."
msgstr ""
"そして実行結果からプロファイル情報を収集します。\n"
"ファイル名が指定されていない場合は、 :class:`~pstats.Stats` のインスタンスが"
"自動的に作られ、簡単なプロファイルレポートが表示されます。\n"
"*sort* が指定されている場合は、 :class:`~pstats.Stats` インスタンスに渡され、"
"結果をどのように並び替えるかを制御します。"

#: ../../library/profile.rst:230
msgid ""
"This function is similar to :func:`run`, with added arguments to supply the "
"globals and locals dictionaries for the *command* string. This routine "
"executes::"
msgstr ""
"この関数は :func:`run` に似ていますが、 globals、 locals 辞書を *command* の"
"ために与えるための追加引数を取ります。このルーチンは以下を実行します::"

#: ../../library/profile.rst:236
msgid "and gathers profiling statistics as in the :func:`run` function above."
msgstr "そしてプロファイル統計情報を :func:`run` 同様に収集します。"

#: ../../library/profile.rst:240
msgid ""
"This class is normally only used if more precise control over profiling is "
"needed than what the :func:`cProfile.run` function provides."
msgstr ""
"このクラスは普通、プロファイリングを :func:`cProfile.run` 関数が提供するもの"
"以上に正確に制御したい場合にのみ使われます。"

#: ../../library/profile.rst:243
msgid ""
"A custom timer can be supplied for measuring how long code takes to run via "
"the *timer* argument. This must be a function that returns a single number "
"representing the current time. If the number is an integer, the *timeunit* "
"specifies a multiplier that specifies the duration of each unit of time. For "
"example, if the timer returns times measured in thousands of seconds, the "
"time unit would be ``.001``."
msgstr ""
"*timer* 引数に、コードの実行時間を計測するためのカスタムな時刻取得用関数を渡"
"せます。これは現在時刻を表す単一の数値を返す関数でなければなりません。もしこ"
"れが整数を返す関数ならば、 *timeunit* には単位時間当たりの実際の持続時間を指"
"定します。たとえば関数が 1000 分の 1 秒単位で計測した時間を返すとすると、 "
"*timeunit* は ``.001`` でしょう。"

#: ../../library/profile.rst:250
msgid ""
"Directly using the :class:`Profile` class allows formatting profile results "
"without writing the profile data to a file::"
msgstr ""
":class:`Profile` クラスを直接使うと、プロファイルデータをファイルに書き出すこ"
"となしに結果をフォーマット出来ます::"

#: ../../library/profile.rst:267
msgid "Start collecting profiling data."
msgstr "プロファイリングデータの収集を開始します。"

#: ../../library/profile.rst:271
msgid "Stop collecting profiling data."
msgstr "プロファイリングデータの収集を停止します。"

#: ../../library/profile.rst:275
msgid ""
"Stop collecting profiling data and record the results internally as the "
"current profile."
msgstr ""
"プロファイリングデータの収集を停止し、現在のプロファイルとして結果を内部で記"
"録します。"

#: ../../library/profile.rst:280
msgid ""
"Create a :class:`~pstats.Stats` object based on the current profile and "
"print the results to stdout."
msgstr ""
"現在のプロファイルに基づいて :class:`~pstats.Stats` オブジェクトを作成し、結"
"果を標準出力に出力します。"

#: ../../library/profile.rst:285
msgid "Write the results of the current profile to *filename*."
msgstr "現在のプロファイルの結果を *filename* に書き出します。"

#: ../../library/profile.rst:289
msgid "Profile the cmd via :func:`exec`."
msgstr ":func:`exec` を用いて cmd をプロファイルします。"

#: ../../library/profile.rst:293
msgid ""
"Profile the cmd via :func:`exec` with the specified global and local "
"environment."
msgstr ""
":func:`exec` を用いて指定されたグローバルおよびローカルな環境で cmd をプロ"
"ファイルします。"

#: ../../library/profile.rst:298
msgid "Profile ``func(*args, **kwargs)``"
msgstr "``func(*args, **kwargs)`` をプロファイルします。"

#: ../../library/profile.rst:300
msgid ""
"Note that profiling will only work if the called command/function actually "
"returns.  If the interpreter is terminated (e.g. via a :func:`sys.exit` call "
"during the called command/function execution) no profiling results will be "
"printed."
msgstr ""

#: ../../library/profile.rst:308
msgid "The :class:`Stats` Class"
msgstr ":class:`Stats` クラス"

#: ../../library/profile.rst:310
msgid ""
"Analysis of the profiler data is done using the :class:`~pstats.Stats` class."
msgstr ""
":class:`~pstats.Stats` クラスを使用してプロファイラデータを解析します。"

#: ../../library/profile.rst:317
msgid ""
"This class constructor creates an instance of a \"statistics object\" from a "
"*filename* (or list of filenames) or from a :class:`Profile` instance. "
"Output will be printed to the stream specified by *stream*."
msgstr ""
"このコンストラクタは *filename* で指定した (単一または複数の) ファイルもしく"
"は :class:`Profile` のインスタンスから \"統計情報オブジェクト\" のインスタン"
"スを生成します。出力は *stream* で指定したストリームに出力されます。"

#: ../../library/profile.rst:321
msgid ""
"The file selected by the above constructor must have been created by the "
"corresponding version of :mod:`profile` or :mod:`cProfile`.  To be specific, "
"there is *no* file compatibility guaranteed with future versions of this "
"profiler, and there is no compatibility with files produced by other "
"profilers, or the same profiler run on a different operating system.  If "
"several files are provided, all the statistics for identical functions will "
"be coalesced, so that an overall view of several processes can be considered "
"in a single report.  If additional files need to be combined with data in an "
"existing :class:`~pstats.Stats` object, the :meth:`~pstats.Stats.add` method "
"can be used."
msgstr ""

#: ../../library/profile.rst:332
msgid ""
"Instead of reading the profile data from a file, a :class:`cProfile.Profile` "
"or :class:`profile.Profile` object can be used as the profile data source."
msgstr ""
"プロファイルデータをファイルから読み込む代わりに、 :class:`cProfile.Profile` "
"または :class:`profile.Profile` オブジェクトをプロファイルデータのソースとし"
"て使うことができます。"

#: ../../library/profile.rst:335
msgid ":class:`Stats` objects have the following methods:"
msgstr ":class:`Stats` には次のメソッドがあります:"

#: ../../library/profile.rst:339
msgid ""
"This method for the :class:`Stats` class removes all leading path "
"information from file names.  It is very useful in reducing the size of the "
"printout to fit within (close to) 80 columns.  This method modifies the "
"object, and the stripped information is lost.  After performing a strip "
"operation, the object is considered to have its entries in a \"random\" "
"order, as it was just after object initialization and loading. If :meth:"
"`~pstats.Stats.strip_dirs` causes two function names to be indistinguishable "
"(they are on the same line of the same filename, and have the same function "
"name), then the statistics for these two entries are accumulated into a "
"single entry."
msgstr ""
":class:`Stats` クラスのこのメソッドは、ファイル名の前に付いているすべてのパス"
"情報を取り除くためのものです。出力の幅を80文字以内に収めたいときに重宝しま"
"す。このメソッドはオブジェクトを変更するため、取り除いたパス情報は失われま"
"す。パス情報除去の操作後、オブジェクトが保持するデータエントリは、オブジェク"
"トの初期化、ロード直後と同じように \"ランダムに\" 並んでいます。 :meth:"
"`~pstats.Stats.strip_dirs` を実行した結果、2つの関数名が区別できない (両者が"
"同じファイルの同じ行番号で同じ関数名となった) 場合、一つのエントリに合算され"
"されます。"

#: ../../library/profile.rst:353
msgid ""
"This method of the :class:`Stats` class accumulates additional profiling "
"information into the current profiling object.  Its arguments should refer "
"to filenames created by the corresponding version of :func:`profile.run` or :"
"func:`cProfile.run`. Statistics for identically named (re: file, line, name) "
"functions are automatically accumulated into single function statistics."
msgstr ""
":class:`Stats` クラスのこのメソッドは、既存のプロファイリングオブジェクトに情"
"報を追加します。引数は対応するバージョンの :func:`profile.run` または :func:"
"`cProfile.run` によって生成されたファイルの名前でなくてはなりません。関数の名"
"前が区別できない (ファイル名、行番号、関数名が同じ) 場合、一つの関数の統計情"
"報として合算されます。"

#: ../../library/profile.rst:363
msgid ""
"Save the data loaded into the :class:`Stats` object to a file named "
"*filename*.  The file is created if it does not exist, and is overwritten if "
"it already exists.  This is equivalent to the method of the same name on "
"the :class:`profile.Profile` and :class:`cProfile.Profile` classes."
msgstr ""
":class:`Stats` オブジェクトに読み込まれたデータを、ファイル名 *filename* の"
"ファイルに保存します。ファイルが存在しない場合は新たに作成され、すでに存在す"
"る場合には上書きされます。このメソッドは :class:`profile.Profile` クラスおよ"
"び :class:`cProfile.Profile` クラスの同名のメソッドと等価です。"

#: ../../library/profile.rst:371
msgid ""
"This method modifies the :class:`Stats` object by sorting it according to "
"the supplied criteria.  The argument can be either a string or a SortKey "
"enum identifying the basis of a sort (example: ``'time'``, ``'name'``, "
"``SortKey.TIME`` or ``SortKey.NAME``). The SortKey enums argument have "
"advantage over the string argument in that it is more robust and less error "
"prone."
msgstr ""

#: ../../library/profile.rst:378
msgid ""
"When more than one key is provided, then additional keys are used as "
"secondary criteria when there is equality in all keys selected before them.  "
"For example, ``sort_stats(SortKey.NAME, SortKey.FILE)`` will sort all the "
"entries according to their function name, and resolve all ties (identical "
"function names) by sorting by file name."
msgstr ""
"2つ以上のキーが指定された場合、2つ目以降のキーは、それ以前のキーで等価となっ"
"たデータエントリの再ソートに使われます。たとえば ``sort_stats(SortKey.NAME, "
"SortKey.FILE)`` とした場合、まずすべてのエントリが関数名でソートされた後、同"
"じ関数名で複数のエントリがあればファイル名でソートされます。"

#: ../../library/profile.rst:384
msgid ""
"For the string argument, abbreviations can be used for any key names, as "
"long as the abbreviation is unambiguous."
msgstr ""

#: ../../library/profile.rst:387
msgid "The following are the valid string and SortKey:"
msgstr ""

#: ../../library/profile.rst:390
msgid "Valid String Arg"
msgstr ""

#: ../../library/profile.rst:390
msgid "Valid enum Arg"
msgstr ""

#: ../../library/profile.rst:390
msgid "Meaning"
msgstr "意味"

#: ../../library/profile.rst:392
msgid "``'calls'``"
msgstr "``'calls'``"

#: ../../library/profile.rst:392
msgid "SortKey.CALLS"
msgstr "SortKey.CALLS"

#: ../../library/profile.rst:392 ../../library/profile.rst:404
msgid "call count"
msgstr "呼び出し数"

#: ../../library/profile.rst:394
msgid "``'cumulative'``"
msgstr "``'cumulative'``"

#: ../../library/profile.rst:394
msgid "SortKey.CUMULATIVE"
msgstr "SortKey.CUMULATIVE"

#: ../../library/profile.rst:394 ../../library/profile.rst:396
msgid "cumulative time"
msgstr "累積時間"

#: ../../library/profile.rst:396
msgid "``'cumtime'``"
msgstr "``'cumtime'``"

#: ../../library/profile.rst:396 ../../library/profile.rst:398
#: ../../library/profile.rst:402 ../../library/profile.rst:404
#: ../../library/profile.rst:418
msgid "N/A"
msgstr "N/A"

#: ../../library/profile.rst:398
msgid "``'file'``"
msgstr "``'file'``"

#: ../../library/profile.rst:398 ../../library/profile.rst:400
#: ../../library/profile.rst:402
msgid "file name"
msgstr "ファイル名"

#: ../../library/profile.rst:400
msgid "``'filename'``"
msgstr "``'filename'``"

#: ../../library/profile.rst:400
msgid "SortKey.FILENAME"
msgstr "SortKey.FILENAME"

#: ../../library/profile.rst:402
msgid "``'module'``"
msgstr "``'module'``"

#: ../../library/profile.rst:404
msgid "``'ncalls'``"
msgstr "``'ncalls'``"

#: ../../library/profile.rst:406
msgid "``'pcalls'``"
msgstr "``'pcalls'``"

#: ../../library/profile.rst:406
msgid "SortKey.PCALLS"
msgstr "SortKey.PCALLS"

#: ../../library/profile.rst:406
msgid "primitive call count"
msgstr "プリミティブな呼び出し回数"

#: ../../library/profile.rst:408
msgid "``'line'``"
msgstr "``'line'``"

#: ../../library/profile.rst:408
msgid "SortKey.LINE"
msgstr "SortKey.LINE"

#: ../../library/profile.rst:408
msgid "line number"
msgstr "行番号"

#: ../../library/profile.rst:410
msgid "``'name'``"
msgstr "``'name'``"

#: ../../library/profile.rst:410
msgid "SortKey.NAME"
msgstr "SortKey.NAME"

#: ../../library/profile.rst:410
msgid "function name"
msgstr "関数名"

#: ../../library/profile.rst:412
msgid "``'nfl'``"
msgstr "``'nfl'``"

#: ../../library/profile.rst:412
msgid "SortKey.NFL"
msgstr "SortKey.NFL"

#: ../../library/profile.rst:412
msgid "name/file/line"
msgstr "関数名/ファイル名/行番号"

#: ../../library/profile.rst:414
msgid "``'stdname'``"
msgstr "``'stdname'``"

#: ../../library/profile.rst:414
msgid "SortKey.STDNAME"
msgstr "SortKey.STDNAME"

#: ../../library/profile.rst:414
msgid "standard name"
msgstr "標準名"

#: ../../library/profile.rst:416
msgid "``'time'``"
msgstr "``'time'``"

#: ../../library/profile.rst:416
msgid "SortKey.TIME"
msgstr "SortKey.TIME"

#: ../../library/profile.rst:416 ../../library/profile.rst:418
msgid "internal time"
msgstr "内部時間"

#: ../../library/profile.rst:418
msgid "``'tottime'``"
msgstr "``'tottime'``"

#: ../../library/profile.rst:421
msgid ""
"Note that all sorts on statistics are in descending order (placing most time "
"consuming items first), where as name, file, and line number searches are in "
"ascending order (alphabetical). The subtle distinction between ``SortKey."
"NFL`` and ``SortKey.STDNAME`` is that the standard name is a sort of the "
"name as printed, which means that the embedded line numbers get compared in "
"an odd way.  For example, lines 3, 20, and 40 would (if the file names were "
"the same) appear in the string order 20, 3 and 40. In contrast, ``SortKey."
"NFL`` does a numeric compare of the line numbers. In fact, "
"``sort_stats(SortKey.NFL)`` is the same as ``sort_stats(SortKey.NAME, "
"SortKey.FILENAME, SortKey.LINE)``."
msgstr ""
"すべての統計情報のソート結果は降順 (最も多く時間を消費したものが一番上に来"
"る) となることに注意してください。ただし、関数名、ファイル名、行数に関しては"
"昇順 (アルファベット順) になります。 ``SortKey.NFL`` と ``SortKey.STDNAME`` "
"には微妙な違いがあります。標準名 (standard name) とは表示された名前によるソー"
"トで、埋め込まれた行番号のソート順が特殊です。たとえば、 (ファイル名が同じ"
"で) 3、20、40という行番号のエントリがあった場合、20、3、40 の順に表示されま"
"す。一方 ``SortKey.NFL`` は行番号を数値として比較します。要するに、 "
"``sort_stats(SortKey.NFL)`` は ``sort_stats(SortKey.NAME, SortKey.FILENAME, "
"SortKey.LINE)`` と指定した場合と同じになります。"

#: ../../library/profile.rst:432
msgid ""
"For backward-compatibility reasons, the numeric arguments ``-1``, ``0``, "
"``1``, and ``2`` are permitted.  They are interpreted as ``'stdname'``, "
"``'calls'``, ``'time'``, and ``'cumulative'`` respectively.  If this old "
"style format (numeric) is used, only one sort key (the numeric key) will be "
"used, and additional arguments will be silently ignored."
msgstr ""
"後方互換性のため、数値を引数に使った ``-1``, ``0``, ``1``, ``2`` の形式もサ"
"ポートしています。それぞれ ``'stdname'``, ``'calls'``, ``'time'``, "
"``'cumulative'`` として処理されます。引数をこの旧スタイルで指定した場合、最初"
"のキー (数値キー) だけが使われ、複数のキーを指定しても2番目以降は無視されま"
"す。"

#: ../../library/profile.rst:440
msgid "Added the SortKey enum."
msgstr ""

#: ../../library/profile.rst:445
msgid ""
"This method for the :class:`Stats` class reverses the ordering of the basic "
"list within the object.  Note that by default ascending vs descending order "
"is properly selected based on the sort key of choice."
msgstr ""
":class:`Stats` クラスのこのメソッドは、オブジェクト内の情報のリストを逆順に"
"ソートします。デフォルトでは選択したキーに応じて昇順、降順が適切に選ばれるこ"
"とに注意してください。"

#: ../../library/profile.rst:455
msgid ""
"This method for the :class:`Stats` class prints out a report as described in "
"the :func:`profile.run` definition."
msgstr ""
":class:`Stats` クラスのこのメソッドは、 :func:`profile.run` の項で述べたプロ"
"ファイルのレポートを出力します。"

#: ../../library/profile.rst:458
msgid ""
"The order of the printing is based on the last :meth:`~pstats.Stats."
"sort_stats` operation done on the object (subject to caveats in :meth:"
"`~pstats.Stats.add` and :meth:`~pstats.Stats.strip_dirs`)."
msgstr ""
"出力するデータの順序はオブジェクトに対し最後に行った :meth:`~pstats.Stats."
"sort_stats` による操作に基づきます (:meth:`~pstats.Stats.add` と :meth:"
"`~pstats.Stats.strip_dirs` による制限にも支配されます)。"

#: ../../library/profile.rst:463
msgid ""
"The arguments provided (if any) can be used to limit the list down to the "
"significant entries.  Initially, the list is taken to be the complete set of "
"profiled functions.  Each restriction is either an integer (to select a "
"count of lines), or a decimal fraction between 0.0 and 1.0 inclusive (to "
"select a percentage of lines), or a string that will interpreted as a "
"regular expression (to pattern match the standard name that is printed). If "
"several restrictions are provided, then they are applied sequentially. For "
"example::"
msgstr ""
"引数は (もし与えられると) リストを重要なエントリのみに制限するために使われま"
"す。初期段階でリストはプロファイルした関数の完全な情報を持っています。制限の"
"指定は、 (行数を指定する) 整数、 (行のパーセンテージを指定する) 0.0 から 1.0 "
"までの割合を指定する小数、 (出力する standard name にマッチする) 正規表現とし"
"て解釈される文字列のいずれかを使って行います。複数の制限が指定された場合、指"
"定の順に適用されます。たとえば次のようになります::"

#: ../../library/profile.rst:474
msgid ""
"would first limit the printing to first 10% of list, and then only print "
"functions that were part of filename :file:`.\\*foo:`.  In contrast, the "
"command::"
msgstr ""
"上記の場合まず出力するリストは全体の10%に制限され、さらにファイル名の一部に文"
"字列 :file:`.\\*foo:` を持つ関数だけが出力されます::"

#: ../../library/profile.rst:480
msgid ""
"would limit the list to all functions having file names :file:`.\\*foo:`, "
"and then proceed to only print the first 10% of them."
msgstr ""
"こちらの例の場合、リストはまずファイル名に :file:`.\\*foo:` を持つ関数だけに"
"制限され、その中の最初の 10% だけが出力されます。"

#: ../../library/profile.rst:486
msgid ""
"This method for the :class:`Stats` class prints a list of all functions that "
"called each function in the profiled database.  The ordering is identical to "
"that provided by :meth:`~pstats.Stats.print_stats`, and the definition of "
"the restricting argument is also identical.  Each caller is reported on its "
"own line.  The format differs slightly depending on the profiler that "
"produced the stats:"
msgstr ""
":class:`Stats` クラスのこのメソッドは、プロファイルのデータベースの中から何ら"
"かの関数呼び出しを行った関数をすべて出力します。出力の順序は :meth:`~pstats."
"Stats.print_stats` によって与えられるものと同じです。出力を制限する引数も同じ"
"です。各呼び出し側関数についてそれぞれ一行ずつ表示されます。フォーマットは統"
"計を作り出したプロファイラごとに微妙に異なります:"

#: ../../library/profile.rst:493
msgid ""
"With :mod:`profile`, a number is shown in parentheses after each caller to "
"show how many times this specific call was made.  For convenience, a second "
"non-parenthesized number repeats the cumulative time spent in the function "
"at the right."
msgstr ""
":mod:`profile` の場合、呼び出し側関数の後に括弧で囲まれて表示される数値はその"
"呼び出しが何回行われたかを示しています。利便性のため、 2番目の括弧なしで表示"
"される数値によって、関数が消費した累積時間を表しています。"

#: ../../library/profile.rst:498
msgid ""
"With :mod:`cProfile`, each caller is preceded by three numbers: the number "
"of times this specific call was made, and the total and cumulative times "
"spent in the current function while it was invoked by this specific caller."
msgstr ""
":mod:`cProfile` の場合、各呼び出し側関数の後に3つの数字が付きます。呼び出しが"
"何回行われたかと、この呼び出し側関数からの呼び出しによって現在の関数内で消費"
"された合計時間および累積時間です。"

#: ../../library/profile.rst:506
msgid ""
"This method for the :class:`Stats` class prints a list of all function that "
"were called by the indicated function.  Aside from this reversal of "
"direction of calls (re: called vs was called by), the arguments and ordering "
"are identical to the :meth:`~pstats.Stats.print_callers` method."
msgstr ""
":class:`Stats` クラスのこのメソッドは、指定した関数から呼び出された関数のリス"
"トを出力します。呼び出し側、呼び出される側の方向は逆ですが、引数と出力の順序"
"に関しては :meth:`~pstats.Stats.print_callers` と同じです。"

#: ../../library/profile.rst:515
msgid "What Is Deterministic Profiling?"
msgstr "決定論的プロファイリングとは"

#: ../../library/profile.rst:517
msgid ""
":dfn:`Deterministic profiling` is meant to reflect the fact that all "
"*function call*, *function return*, and *exception* events are monitored, "
"and precise timings are made for the intervals between these events (during "
"which time the user's code is executing).  In contrast, :dfn:`statistical "
"profiling` (which is not done by this module) randomly samples the effective "
"instruction pointer, and deduces where time is being spent.  The latter "
"technique traditionally involves less overhead (as the code does not need to "
"be instrumented), but provides only relative indications of where time is "
"being spent."
msgstr ""
":dfn:`決定論的プロファイリング` とは、すべての *関数呼び出し*, *関数からのリ"
"ターン*, *例外発生* をモニターし、正確なタイミングを記録することで、イベント"
"間の時間、つまりどの時間にユーザコードが実行されているのかを計測するやり方で"
"す。もう一方の :dfn:`統計的プロファイリング` (このモジュールでこの方法は採用"
"していません) とは、有効なインストラクションポインタからランダムにサンプリン"
"グを行い、プログラムのどこで時間が使われているかを推定する方法です。後者の方"
"法は、オーバヘッドが少ないものの、プログラムのどこで多くの時間が使われている"
"か、その相対的な示唆に留まります。"

#: ../../library/profile.rst:526
msgid ""
"In Python, since there is an interpreter active during execution, the "
"presence of instrumented code is not required to do deterministic "
"profiling.  Python automatically provides a :dfn:`hook` (optional callback) "
"for each event.  In addition, the interpreted nature of Python tends to add "
"so much overhead to execution, that deterministic profiling tends to only "
"add small processing overhead in typical applications.  The result is that "
"deterministic profiling is not that expensive, yet provides extensive run "
"time statistics about the execution of a Python program."
msgstr ""
"Python の場合、実行中は必ずインタプリタが動作しているため、決定論的プロファイ"
"リングを行うにあたり、計測用にコードを追加する必要はありません。 Python は自"
"動的に各イベントに :dfn:`フック` (オプションのコールバック) を提供します。加"
"えて Python のインタプリタという性質によって、実行時に大きなオーバーヘッドを"
"伴う傾向がありますが、それに比べると一般的なアプリケーションでは決定論的プロ"
"ファイリングで追加される処理のオーバーヘッドは少ない傾向にあります。結果的"
"に、決定論的プロファイリングは少ないコストで Python プログラムの実行時間に関"
"する詳細な統計を得られる方法となっているのです。"

#: ../../library/profile.rst:535
msgid ""
"Call count statistics can be used to identify bugs in code (surprising "
"counts), and to identify possible inline-expansion points (high call "
"counts).  Internal time statistics can be used to identify \"hot loops\" "
"that should be carefully optimized.  Cumulative time statistics should be "
"used to identify high level errors in the selection of algorithms.  Note "
"that the unusual handling of cumulative times in this profiler allows "
"statistics for recursive implementations of algorithms to be directly "
"compared to iterative implementations."
msgstr ""
"呼び出し回数はコード中のバグ発見にも使用できます (とんでもない数の呼び出しが"
"行われている部分)。インライン拡張の対象とすべき部分を見つけるためにも使えま"
"す (呼び出し頻度の高い部分)。内部時間の統計は、注意深く最適化すべき\"ホット"
"ループ\"の発見にも役立ちます。累積時間の統計は、アルゴリズム選択に関連した高"
"レベルのエラー検知に役立ちます。なお、このプロファイラは再帰的なアルゴリズム"
"実装の累計時間を計ることが可能で、通常のループを使った実装と直接比較すること"
"もできるようになっています。"

#: ../../library/profile.rst:548
msgid "Limitations"
msgstr "制限事項"

#: ../../library/profile.rst:550
msgid ""
"One limitation has to do with accuracy of timing information. There is a "
"fundamental problem with deterministic profilers involving accuracy.  The "
"most obvious restriction is that the underlying \"clock\" is only ticking at "
"a rate (typically) of about .001 seconds.  Hence no measurements will be "
"more accurate than the underlying clock.  If enough measurements are taken, "
"then the \"error\" will tend to average out. Unfortunately, removing this "
"first error induces a second source of error."
msgstr ""
"一つの制限はタイミング情報の正確さに関するものです。決定論的プロファイラには"
"正確さに関する根本的問題があります。最も明白な制限は、 (一般に) \"クロック"
"\"は .001 秒の精度しかないということです。これ以上の精度で計測することはでき"
"ません。仮に充分な精度が得られたとしても、\"誤差\"が計測の平均値に影響を及ぼ"
"すことがあります。この最初の誤差を取り除いたとしても、それがまた別の誤差を引"
"き起こす原因となります。"

#: ../../library/profile.rst:558
msgid ""
"The second problem is that it \"takes a while\" from when an event is "
"dispatched until the profiler's call to get the time actually *gets* the "
"state of the clock.  Similarly, there is a certain lag when exiting the "
"profiler event handler from the time that the clock's value was obtained "
"(and then squirreled away), until the user's code is once again executing.  "
"As a result, functions that are called many times, or call many functions, "
"will typically accumulate this error. The error that accumulates in this "
"fashion is typically less than the accuracy of the clock (less than one "
"clock tick), but it *can* accumulate and become very significant."
msgstr ""
"もう一つの問題として、イベントを検知してからプロファイラがその時刻を実際に *"
"取得* するまでに \"いくらかの時間がかかる\" ことです。同様に、イベントハンド"
"ラが終了する時にも、時刻を取得して (そしてその値を保存して) から、ユーザコー"
"ドが処理を再開するまでの間に遅延が発生します。結果的に多く呼び出される関数ま"
"たは多数の関数から呼び出される関数の情報にはこの種の誤差が蓄積する傾向にあり"
"ます。このようにして蓄積される誤差は、典型的にはクロックの精度を下回ります (1"
"クロック以下) が、一方でこの時間が累計して非常に大きな値になることも *あり得"
"ます* 。"

#: ../../library/profile.rst:568
msgid ""
"The problem is more important with :mod:`profile` than with the lower-"
"overhead :mod:`cProfile`.  For this reason, :mod:`profile` provides a means "
"of calibrating itself for a given platform so that this error can be "
"probabilistically (on the average) removed. After the profiler is "
"calibrated, it will be more accurate (in a least square sense), but it will "
"sometimes produce negative numbers (when call counts are exceptionally low, "
"and the gods of probability work against you :-). )  Do *not* be alarmed by "
"negative numbers in the profile.  They should *only* appear if you have "
"calibrated your profiler, and the results are actually better than without "
"calibration."
msgstr ""
"この問題はオーバーヘッドの小さい :mod:`cProfile` よりも :mod:`profile` におい"
"てより重要です。そのため、 :mod:`profile` は誤差が確率的に (平均値で) 減少す"
"るようにプラットフォームごとに補正する機能を備えています。プロファイラに補正"
"を施すと (最小二乗の意味で) 正確さが増しますが、ときには数値が負の値になって"
"しまうこともあります (呼び出し回数が極めて少なく、確率の神があなたに意地悪を"
"したとき :-) )。プロファイルの結果に負の値が出力されても *驚かないでください"
"* 。これは補正を行った場合にのみ生じることで、補正を行わない場合に比べて計測"
"結果は実際にはより正確になっているはずだからです。"

#: ../../library/profile.rst:582
msgid "Calibration"
msgstr "キャリブレーション (補正)"

#: ../../library/profile.rst:584
msgid ""
"The profiler of the :mod:`profile` module subtracts a constant from each "
"event handling time to compensate for the overhead of calling the time "
"function, and socking away the results.  By default, the constant is 0. The "
"following procedure can be used to obtain a better constant for a given "
"platform (see :ref:`profile-limitations`). ::"
msgstr ""
":mod:`profile` のプロファイラは time 関数呼び出しおよびその値を保存するための"
"オーバーヘッドを補正するために、各イベントの処理時間から定数を引きます。デ"
"フォルトでこの定数の値は 0 です。以下の手順で、プラットフォームに合った、より"
"適切な定数が得られます (:ref:`profile-limitations` 参照)。 ::"

#: ../../library/profile.rst:595
msgid ""
"The method executes the number of Python calls given by the argument, "
"directly and again under the profiler, measuring the time for both. It then "
"computes the hidden overhead per profiler event, and returns that as a "
"float.  For example, on a 1.8Ghz Intel Core i5 running Mac OS X, and using "
"Python's time.process_time() as the timer, the magical number is about "
"4.04e-6."
msgstr ""
"calibrate メソッドは引数として与えられた数だけ Python の呼び出しを行います。"
"直接呼び出す場合と、プロファイラを使って呼び出す場合の両方が実施され、それぞ"
"れの時間が計測されます。その結果、プロファイラのイベントに隠されたオーバー"
"ヘッドが計算され、その値は浮動小数として返されます。たとえば、 1.8 GHz の "
"Intel Core i5 で Mac OS X を使用、 Python の time.process_time() をタイマとし"
"て使った場合、値はおよそ 4.04e-6 となります。"

#: ../../library/profile.rst:601
msgid ""
"The object of this exercise is to get a fairly consistent result. If your "
"computer is *very* fast, or your timer function has poor resolution, you "
"might have to pass 100000, or even 1000000, to get consistent results."
msgstr ""
"この手順で使用しているオブジェクトはほぼ一定の結果を返します。 *非常に* 早い"
"コンピュータを使う場合、もしくはタイマの性能が貧弱な場合は、一定の結果を得る"
"ために引数に 100000 や 1000000 といった大きな値を指定する必要があるかもしれま"
"せん。"

#: ../../library/profile.rst:605
msgid ""
"When you have a consistent answer, there are three ways you can use it::"
msgstr "一定の結果が得られたら、それを使う方法には3通りあります::"

#: ../../library/profile.rst:619
msgid ""
"If you have a choice, you are better off choosing a smaller constant, and "
"then your results will \"less often\" show up as negative in profile "
"statistics."
msgstr ""
"選択肢がある場合は、補正値は小さめに設定した方が良いでしょう。プロファイルの"
"結果に負の値が表われる\"頻度が低く\"なるはずです。"

#: ../../library/profile.rst:625
msgid "Using a custom timer"
msgstr "カスタムな時刻取得用関数を使う"

#: ../../library/profile.rst:627
msgid ""
"If you want to change how current time is determined (for example, to force "
"use of wall-clock time or elapsed process time), pass the timing function "
"you want to the :class:`Profile` class constructor::"
msgstr ""
"プロファイラが時刻を取得する方法を変更したいなら (たとえば、実測時間やプロセ"
"スの経過時間を使いたい場合)、時刻取得用の関数を :class:`Profile` クラスのコン"
"ストラクタに指定することができます::"

#: ../../library/profile.rst:633
msgid ""
"The resulting profiler will then call ``your_time_func``. Depending on "
"whether you are using :class:`profile.Profile` or :class:`cProfile.Profile`, "
"``your_time_func``'s return value will be interpreted differently:"
msgstr ""
"この結果生成されるプロファイラは時刻取得に :func:`your_time_func` を呼び出す"
"ようになります。 :class:`profile.Profile` と :class:`cProfile.Profile` のどち"
"らを使っているかにより、 ``your_time_func`` の戻り値は異なって解釈されます:"

#: ../../library/profile.rst:651
msgid ":class:`profile.Profile`"
msgstr ":class:`profile.Profile`"

#: ../../library/profile.rst:638
msgid ""
"``your_time_func`` should return a single number, or a list of numbers whose "
"sum is the current time (like what :func:`os.times` returns).  If the "
"function returns a single time number, or the list of returned numbers has "
"length 2, then you will get an especially fast version of the dispatch "
"routine."
msgstr ""
":func:`your_time_func` は単一の数値、あるいは (:func:`os.times` と同じよう"
"に) その合計が累計時間を示すリストを返すようになっていなければなりません。関"
"数が1つの数値、あるいは長さ2の数値のリストを返すようになっていれば、ディス"
"パッチルーチンには特別な高速化バージョンが使われます。"

#: ../../library/profile.rst:644
msgid ""
"Be warned that you should calibrate the profiler class for the timer "
"function that you choose (see :ref:`profile-calibration`).  For most "
"machines, a timer that returns a lone integer value will provide the best "
"results in terms of low overhead during profiling.  (:func:`os.times` is "
"*pretty* bad, as it returns a tuple of floating point values).  If you want "
"to substitute a better timer in the cleanest fashion, derive a class and "
"hardwire a replacement dispatch method that best handles your timer call, "
"along with the appropriate calibration constant."
msgstr ""
"あなたが選択した時刻取得関数のために、プロファイラのクラスを補正すべきである"
"ことを警告しておきます (:ref:`profile-calibration` 参照)。ほとんどのマシンで"
"は、プロファイル時のオーバヘッドの小ささという意味においては、時刻取得関数が"
"長整数値を返すのが最も良い結果を生みます。 (:func:`os.times` は浮動小数点数の"
"タプルを返すので *かなり悪い* です。) 綺麗な手段でより良い時刻取得関数に置き"
"換えたいと望むなら、クラスを派生して、ディスパッチメソッドを置き換えてあなた"
"の関数を一番いいように処理するように固定化してしまってください。補正定数の調"
"整もお忘れなく。"

#: ../../library/profile.rst:665
msgid ":class:`cProfile.Profile`"
msgstr ":class:`cProfile.Profile`"

#: ../../library/profile.rst:654
msgid ""
"``your_time_func`` should return a single number.  If it returns integers, "
"you can also invoke the class constructor with a second argument specifying "
"the real duration of one unit of time.  For example, if "
"``your_integer_time_func`` returns times measured in thousands of seconds, "
"you would construct the :class:`Profile` instance as follows::"
msgstr ""
":func:`your_time_func` は単一の数値を返すようになっていなければなりません。単"
"一の整数を返すのであれば、クラスコンストラクタの第二引数に単位時間当たりの実"
"際の持続時間を渡せます。例えば ``your_integer_time_func`` が 1000 分の 1 秒単"
"位で計測した時間を返すとすると、 :class:`Profile` インスタンスを以下のように"
"構築出来ます::"

#: ../../library/profile.rst:662
msgid ""
"As the :class:`cProfile.Profile` class cannot be calibrated, custom timer "
"functions should be used with care and should be as fast as possible.  For "
"the best results with a custom timer, it might be necessary to hard-code it "
"in the C source of the internal :mod:`_lsprof` module."
msgstr ""
":class:`cProfile.Profile` クラスはキャリブレーションができないので、自前のタ"
"イマ関数は注意を払って使う必要があり、またそれは可能な限り速くなければなりま"
"せん。自前のタイマ関数で最高の結果を得るには、 :mod:`_lsprof` 内部モジュール"
"の C ソースファイルにハードコードする必要があるかもしれません。"

#: ../../library/profile.rst:667
msgid ""
"Python 3.3 adds several new functions in :mod:`time` that can be used to "
"make precise measurements of process or wall-clock time. For example, see :"
"func:`time.perf_counter`."
msgstr ""
"Python 3.3 で :mod:`time` に、プロセス時間や実時間の精密な計測に使える新しい"
"関数が追加されました。\n"
"例えば、 :func:`time.perf_counter` を参照してください。"
