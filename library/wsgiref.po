# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/wsgiref.rst:2
msgid ":mod:`wsgiref` --- WSGI Utilities and Reference Implementation"
msgstr ":mod:`wsgiref` --- WSGI ユーティリティとリファレンス実装"

#: ../../library/wsgiref.rst:10
msgid "**Source code:** :source:`Lib/wsgiref`"
msgstr "**ソースコード:** :source:`Lib/wsgiref`"

#: ../../library/wsgiref.rst:14
msgid ""
"The Web Server Gateway Interface (WSGI) is a standard interface between web "
"server software and web applications written in Python. Having a standard "
"interface makes it easy to use an application that supports WSGI with a "
"number of different web servers."
msgstr ""
"Web Server Gateway Interface (WSGI) は、Web サーバソフトウェアと Python で記"
"述された Web アプリケーションとの標準インターフェースです。標準インターフェー"
"スを持つことで、WSGI をサポートするアプリケーションを幾つもの異なる Web サー"
"バで使うことが容易になります。"

#: ../../library/wsgiref.rst:19
msgid ""
"Only authors of web servers and programming frameworks need to know every "
"detail and corner case of the WSGI design.  You don't need to understand "
"every detail of WSGI just to install a WSGI application or to write a web "
"application using an existing framework."
msgstr ""
"Web サーバとプログラミングフレームワークの作者だけが、WSGI デザインのあらゆる"
"細部や特例などを知る必要があります。WSGI アプリケーションをインストールした"
"り、既存のフレームワークを使ったアプリケーションを記述するだけの皆さんは、す"
"べてについて理解する必要はありません。"

#: ../../library/wsgiref.rst:24
msgid ""
":mod:`wsgiref` is a reference implementation of the WSGI specification that "
"can be used to add WSGI support to a web server or framework.  It provides "
"utilities for manipulating WSGI environment variables and response headers, "
"base classes for implementing WSGI servers, a demo HTTP server that serves "
"WSGI applications, and a validation tool that checks WSGI servers and "
"applications for conformance to the WSGI specification (:pep:`3333`)."
msgstr ""
":mod:`wsgiref` は WSGI 仕様のリファレンス実装で、これは Web サーバやフレーム"
"ワークに WSGI サポートを加えるのに利用できます。これは WSGI 環境変数やレスポ"
"ンスヘッダを操作するユーティリティ、 WSGI サーバ実装時のベースクラス、WSGI ア"
"プリケーションを提供する  デモ用 HTTP サーバ、それと WSGI サーバとアプリケー"
"ションの WSGI 仕様 (:pep:`3333`) 準拠のバリデーションツールを提供します。"

#: ../../library/wsgiref.rst:31
msgid ""
"See `wsgi.readthedocs.io <https://wsgi.readthedocs.io/>`_ for more "
"information about WSGI, and links to tutorials and other resources."
msgstr ""
"`wsgi.readthedocs.io <https://wsgi.readthedocs.io/>`_ に、WSGIに関するさらな"
"る情報と、チュートリアルやその他のリソースへのリンクがあります。"

#: ../../library/wsgiref.rst:38
msgid ":mod:`wsgiref.util` -- WSGI environment utilities"
msgstr ":mod:`wsgiref.util` -- WSGI 環境のユーティリティ"

#: ../../library/wsgiref.rst:44
msgid ""
"This module provides a variety of utility functions for working with WSGI "
"environments.  A WSGI environment is a dictionary containing HTTP request "
"variables as described in :pep:`3333`.  All of the functions taking an "
"*environ* parameter expect a WSGI-compliant dictionary to be supplied; "
"please see :pep:`3333` for a detailed specification."
msgstr ""
"このモジュールは WSGI 環境で使う様々なユーティリティ関数を提供します。 WSGI "
"環境は :pep:`3333` で記述されているような HTTP リクエスト変数を含む辞書です。"
"すべての *environ* パラメータを取る関数は WSGI 準拠の辞書を与えられることを期"
"待しています; 細かい仕様については :pep:`3333` を参照してください。"

#: ../../library/wsgiref.rst:53
msgid ""
"Return a guess for whether ``wsgi.url_scheme`` should be \"http\" or "
"\"https\", by checking for a ``HTTPS`` environment variable in the *environ* "
"dictionary.  The return value is a string."
msgstr ""
"*environ* 辞書の ``HTTPS`` 環境変数を調べることで ``wsgi.url_scheme`` が "
"\"http\" か \"https\" のどちらであるべきか推測し、その結果を返します。戻り値"
"は文字列です。"

#: ../../library/wsgiref.rst:57
msgid ""
"This function is useful when creating a gateway that wraps CGI or a CGI-like "
"protocol such as FastCGI.  Typically, servers providing such protocols will "
"include a ``HTTPS`` variable with a value of \"1\", \"yes\", or \"on\" when "
"a request is received via SSL.  So, this function returns \"https\" if such "
"a value is found, and \"http\" otherwise."
msgstr ""
"この関数は、CGI や FastCGI のような CGI に似たプロトコルをラップするゲート"
"ウェイを作成する場合に便利です。典型的には、それらのプロトコルを提供するサー"
"バが SSL 経由でリクエストを受け取った場合には ``HTTPS`` 変数に値 \"1\", "
"\"yes\" または \"on\" を持つでしょう。そのため、この関数はそのような値が見つ"
"かった場合には \"https\" を返し、そうでなければ \"http\" を返します。"

#: ../../library/wsgiref.rst:66
msgid ""
"Return the full request URI, optionally including the query string, using "
"the algorithm found in the \"URL Reconstruction\" section of :pep:`3333`.  "
"If *include_query* is false, the query string is not included in the "
"resulting URI."
msgstr ""
"リクエスト URI 全体 (オプションでクエリ文字列を含む) を、 :pep:`3333` の "
"\"URL 再構築(URL Reconstruction)\" にあるアルゴリズムを使って返します。 "
"*include_query* が false の場合、クエリ文字列は結果となる文字列には含まれませ"
"ん。"

#: ../../library/wsgiref.rst:73
msgid ""
"Similar to :func:`request_uri`, except that the ``PATH_INFO`` and "
"``QUERY_STRING`` variables are ignored.  The result is the base URI of the "
"application object addressed by the request."
msgstr ""
"``PATH_INFO`` と ``QUERY_STRING`` 変数が無視されることを除けば :func:"
"`request_uri` に似ています。結果はリクエストによって指定されたアプリケーショ"
"ンオブジェクトのベース URI です。"

#: ../../library/wsgiref.rst:80
msgid ""
"Shift a single name from ``PATH_INFO`` to ``SCRIPT_NAME`` and return the "
"name. The *environ* dictionary is *modified* in-place; use a copy if you "
"need to keep the original ``PATH_INFO`` or ``SCRIPT_NAME`` intact."
msgstr ""
"``PATH_INFO`` から ``SCRIPT_NAME`` に一つの名前をシフトしてその名前を返しま"
"す。*environ* 辞書は *変更されます* \\。``PATH_INFO`` や ``SCRIPT_NAME`` のオ"
"リジナルをそのまま残したい場合にはコピーを使ってください。"

#: ../../library/wsgiref.rst:84
msgid ""
"If there are no remaining path segments in ``PATH_INFO``, ``None`` is "
"returned."
msgstr ""
"``PATH_INFO`` にパスセグメントが何も残っていなければ、``None`` が返されます。"

#: ../../library/wsgiref.rst:86
msgid ""
"Typically, this routine is used to process each portion of a request URI "
"path, for example to treat the path as a series of dictionary keys. This "
"routine modifies the passed-in environment to make it suitable for invoking "
"another WSGI application that is located at the target URI. For example, if "
"there is a WSGI application at ``/foo``, and the request URI path is ``/foo/"
"bar/baz``, and the WSGI application at ``/foo`` calls :func:"
"`shift_path_info`, it will receive the string \"bar\", and the environment "
"will be updated to be suitable for passing to a WSGI application at ``/foo/"
"bar``.  That is, ``SCRIPT_NAME`` will change from ``/foo`` to ``/foo/bar``, "
"and ``PATH_INFO`` will change from ``/bar/baz`` to ``/baz``."
msgstr ""
"典型的なこのルーチンの使い方はリクエスト URI のそれぞれの要素の処理で、例えば"
"パスを一連の辞書のキーとして取り扱う場合です。このルーチンは、渡された環境"
"を、ターゲット URL で示される別の WSGI アプリケーションの呼び出しに合うように"
"調整します。例えば、 ``/foo`` に WSGI アプリケーションがあったとして、そして"
"リクエスト URL パスが ``/foo/bar/baz`` で、 ``/foo`` の WSGI アプリケーション"
"が :func:`shift_path_info` を呼んだ場合、これは \"bar\" 文字列を受け取り、 "
"environ は ``/foo/bar`` の WSGI アプリケーションへの受け渡しに適するように更"
"新されます。つまり、 ``SCRIPT_NAME`` は ``/foo`` から ``/foo/bar`` に変わっ"
"て、 ``PATH_INFO`` は ``/bar/baz`` から ``/baz`` に変化するのです。"

#: ../../library/wsgiref.rst:97
msgid ""
"When ``PATH_INFO`` is just a \"/\", this routine returns an empty string and "
"appends a trailing slash to ``SCRIPT_NAME``, even though empty path segments "
"are normally ignored, and ``SCRIPT_NAME`` doesn't normally end in a slash.  "
"This is intentional behavior, to ensure that an application can tell the "
"difference between URIs ending in ``/x`` from ones ending in ``/x/`` when "
"using this routine to do object traversal."
msgstr ""
"``PATH_INFO`` が単に \"/\" の場合、このルーチンは空の文字列を返し、"
"``SCRIPT_NAME`` の末尾にスラッシュを加えます、これはたとえ空のパスセグメント"
"が通常は無視され、そして ``SCRIPT_NAME`` は通常スラッシュで終わる事が無かった"
"としてもです。これは意図的な振る舞いで、このルーチンでオブジェクト巡回"
"(object traversal) をした場合に ``/x`` で終わる URI と ``/x/`` で終わるものを"
"アプリケーションが識別できることを保証するためのものです。"

#: ../../library/wsgiref.rst:107
msgid "Update *environ* with trivial defaults for testing purposes."
msgstr "*environ* をテスト用に自明なデフォルト値で更新します。"

#: ../../library/wsgiref.rst:109
msgid ""
"This routine adds various parameters required for WSGI, including "
"``HTTP_HOST``, ``SERVER_NAME``, ``SERVER_PORT``, ``REQUEST_METHOD``, "
"``SCRIPT_NAME``, ``PATH_INFO``, and all of the :pep:`3333`\\ -defined ``wsgi."
"*`` variables.  It only supplies default values, and does not replace any "
"existing settings for these variables."
msgstr ""
"このルーチンは WSGI に必要な様々なパラメータを追加します。そのようなパラメー"
"タとして ``HTTP_HOST`` 、 ``SERVER_NAME`` 、 ``SERVER_PORT`` 、 "
"``REQUEST_METHOD`` 、 ``SCRIPT_NAME`` 、 ``PATH_INFO`` 、そして :pep:`3333` "
"で定義されている ``wsgi.*`` 変数群が含まれます。このルーチンはデフォルト値を"
"提供するだけで、これらの変数の既存設定は一切置きかえません。"

#: ../../library/wsgiref.rst:115
msgid ""
"This routine is intended to make it easier for unit tests of WSGI servers "
"and applications to set up dummy environments.  It should NOT be used by "
"actual WSGI servers or applications, since the data is fake!"
msgstr ""
"このルーチンは、ダミー環境をセットアップすることによって WSGI サーバとアプリ"
"ケーションのユニットテストを容易にすることを意図しています。これは実際の "
"WSGI サーバやアプリケーションで使うべきではありません。なぜならこのデータは偽"
"物なのです！"

#: ../../library/wsgiref.rst:119 ../../library/wsgiref.rst:166
#: ../../library/wsgiref.rst:288 ../../library/wsgiref.rst:420
msgid "Example usage::"
msgstr "使用例::"

#: ../../library/wsgiref.rst:143
msgid ""
"In addition to the environment functions above, the :mod:`wsgiref.util` "
"module also provides these miscellaneous utilities:"
msgstr ""
"上記の環境用関数に加えて、 :mod:`wsgiref.util` モジュールも以下のようなその他"
"のユーティリティを提供します:"

#: ../../library/wsgiref.rst:149
msgid ""
"Return ``True`` if 'header_name' is an HTTP/1.1 \"Hop-by-Hop\" header, as "
"defined by :rfc:`2616`."
msgstr ""
"'header_name' が :rfc:`2616` で定義されている HTTP/1.1 の \"Hop-by-Hop\" ヘッ"
"ダの場合に ``True`` を返します。"

#: ../../library/wsgiref.rst:155
msgid ""
"A wrapper to convert a file-like object to an :term:`iterator`.  The "
"resulting objects support both :meth:`__getitem__` and :meth:`__iter__` "
"iteration styles, for compatibility with Python 2.1 and Jython. As the "
"object is iterated over, the optional *blksize* parameter will be repeatedly "
"passed to the *filelike* object's :meth:`read` method to obtain bytestrings "
"to yield.  When :meth:`read` returns an empty bytestring, iteration is ended "
"and is not resumable."
msgstr ""
"ファイル風オブジェクトを :term:`イテレータ <iterator>` に変換するラッパーで"
"す。結果のオブジェクトは :meth:`__getitem__` と :meth:`__iter__` 両方をサポー"
"トしますが、これは Python 2.1 と Jython の互換性のためです。オブジェクトがイ"
"テレートされる間、オプションの *blksize* パラメータがくり返し *filelike* オブ"
"ジェクトの :meth:`read` メソッドに渡されて受け渡すバイト文字列を取得しま"
"す。 :meth:`read` が空バイト文字列を返した場合、イテレーションは終了して再開"
"されることはありません。"

#: ../../library/wsgiref.rst:162
msgid ""
"If *filelike* has a :meth:`close` method, the returned object will also have "
"a :meth:`close` method, and it will invoke the *filelike* object's :meth:"
"`close` method when called."
msgstr ""
"*filelike* に :meth:`close` メソッドがある場合、返されたオブジェクトも :meth:"
"`close` メソッドを持ち、これが呼ばれた場合には *filelike* オブジェクトの :"
"meth:`close` メソッドを呼び出します。"

#: ../../library/wsgiref.rst:178
msgid "Support for :meth:`sequence protocol <__getitem__>` is deprecated."
msgstr ""
":meth:`シーケンスプロトコル <__getitem__>` のサポートは非推奨になりました。"

#: ../../library/wsgiref.rst:183
msgid ":mod:`wsgiref.headers` -- WSGI response header tools"
msgstr ":mod:`wsgiref.headers` -- WSGI レスポンスヘッダツール群"

#: ../../library/wsgiref.rst:189
msgid ""
"This module provides a single class, :class:`Headers`, for convenient "
"manipulation of WSGI response headers using a mapping-like interface."
msgstr ""
"このモジュールは単一のクラス、 :class:`Headers` を提供し、WSGI レスポンスヘッ"
"ダの操作をマップに似たインターフェースで便利にします。"

#: ../../library/wsgiref.rst:195
msgid ""
"Create a mapping-like object wrapping *headers*, which must be a list of "
"header name/value tuples as described in :pep:`3333`. The default value of "
"*headers* is an empty list."
msgstr ""
"*headers* をラップするマップ風オブジェクトを生成します。これは :pep:`3333` に"
"定義されるようなヘッダの名前／値のタプルのリストです。 *headers* のデフォルト"
"値は空のリストです。"

#: ../../library/wsgiref.rst:199
msgid ""
":class:`Headers` objects support typical mapping operations including :meth:"
"`__getitem__`, :meth:`get`, :meth:`__setitem__`, :meth:`setdefault`, :meth:"
"`__delitem__` and :meth:`__contains__`.  For each of these methods, the key "
"is the header name (treated case-insensitively), and the value is the first "
"value associated with that header name.  Setting a header deletes any "
"existing values for that header, then adds a new value at the end of the "
"wrapped header list.  Headers' existing order is generally maintained, with "
"new headers added to the end of the wrapped list."
msgstr ""
":class:`Headers` オブジェクトは典型的なマッピング操作をサポートし、これには :"
"meth:`__getitem__` 、 :meth:`get` 、 :meth:`__setitem__` 、 :meth:"
"`setdefault` 、 :meth:`__delitem__` 、 :meth:`__contains__` を含みます。これ"
"らメソッドのそれぞれにおいて、キーはヘッダ名で（大文字小文字は区別しませ"
"ん）、値はそのヘッダ名に関連づけられた最初の値です。ヘッダを設定すると既存の"
"ヘッダ値は削除され、ラップされたヘッダのリストの末尾に新しい値が加えられま"
"す。既存のヘッダの順番は一般に維持され、ラップされたリストの最後に新しいヘッ"
"ダが追加されます。"

#: ../../library/wsgiref.rst:208
msgid ""
"Unlike a dictionary, :class:`Headers` objects do not raise an error when you "
"try to get or delete a key that isn't in the wrapped header list. Getting a "
"nonexistent header just returns ``None``, and deleting a nonexistent header "
"does nothing."
msgstr ""
"辞書とは違って、 :class:`Headers` オブジェクトはラップされたヘッダリストに存"
"在しないキーを取得または削除しようとした場合にもエラーを発生しません。単に、"
"存在しないヘッダの取得は ``None`` を返し、存在しないヘッダの削除は何もしませ"
"ん。"

#: ../../library/wsgiref.rst:213
msgid ""
":class:`Headers` objects also support :meth:`keys`, :meth:`values`, and :"
"meth:`items` methods.  The lists returned by :meth:`keys` and :meth:`items` "
"can include the same key more than once if there is a multi-valued header.  "
"The ``len()`` of a :class:`Headers` object is the same as the length of its :"
"meth:`items`, which is the same as the length of the wrapped header list.  "
"In fact, the :meth:`items` method just returns a copy of the wrapped header "
"list."
msgstr ""
":class:`Headers` オブジェクトは :meth:`keys` 、 :meth:`values` 、 :meth:"
"`items` メソッドもサポートします。複数の値を持つヘッダがある場合には、 :meth:"
"`keys` と :meth:`items` で返されるリストは同じキーを一つ以上含むことがありま"
"す。 :class:`Headers` オブジェクトの ``len()`` は、その :meth:`items` の長さ"
"と同じであり、ラップされたヘッダリストの長さと同じです。実際、 :meth:`items` "
"メソッドは単にラップされたヘッダリストのコピーを返しているだけです。"

#: ../../library/wsgiref.rst:220
msgid ""
"Calling ``bytes()`` on a :class:`Headers` object returns a formatted "
"bytestring suitable for transmission as HTTP response headers.  Each header "
"is placed on a line with its value, separated by a colon and a space. Each "
"line is terminated by a carriage return and line feed, and the bytestring is "
"terminated with a blank line."
msgstr ""
":class:`Headers` オブジェクトに対して ``bytes()`` を呼ぶと、HTTP レスポンス"
"ヘッダとして送信するのに適した形に整形されたバイト文字列を返します。それぞれ"
"のヘッダはコロンとスペースで区切られた値と共に一列に並んでいます。それぞれの"
"行はキャリッジリターンとラインフィードで終了し、バイト文字列は空行で終了して"
"います。"

#: ../../library/wsgiref.rst:226
msgid ""
"In addition to their mapping interface and formatting features, :class:"
"`Headers` objects also have the following methods for querying and adding "
"multi-valued headers, and for adding headers with MIME parameters:"
msgstr ""
"これらのマッピングインターフェースと整形機能に加えて、 :class:`Headers` オブ"
"ジェクトは複数の値を持つヘッダの取得と追加、MIME パラメータでヘッダを追加する"
"ための以下のようなメソッド群も持っています:"

#: ../../library/wsgiref.rst:233
msgid "Return a list of all the values for the named header."
msgstr "指定されたヘッダのすべての値のリストを返します。"

#: ../../library/wsgiref.rst:235
msgid ""
"The returned list will be sorted in the order they appeared in the original "
"header list or were added to this instance, and may contain duplicates.  Any "
"fields deleted and re-inserted are always appended to the header list.  If "
"no fields exist with the given name, returns an empty list."
msgstr ""
"返されるリストは、元々のヘッダリストに現れる順、またはこのインスタンスに追加"
"された順に並んでいて、重複を含む場合があります。削除されて加えられたフィール"
"ドはすべてヘッダリストの末尾に付きます。与えられた name に対するフィールドが"
"何もなければ、空のリストが返ります。"

#: ../../library/wsgiref.rst:243
msgid ""
"Add a (possibly multi-valued) header, with optional MIME parameters "
"specified via keyword arguments."
msgstr ""
"(複数の値を持つ可能性のある) ヘッダを、キーワード引数を通じて指定するオプショ"
"ンの MIME パラメータと共に追加します。"

#: ../../library/wsgiref.rst:246
msgid ""
"*name* is the header field to add.  Keyword arguments can be used to set "
"MIME parameters for the header field.  Each parameter must be a string or "
"``None``. Underscores in parameter names are converted to dashes, since "
"dashes are illegal in Python identifiers, but many MIME parameter names "
"include dashes.  If the parameter value is a string, it is added to the "
"header value parameters in the form ``name=\"value\"``. If it is ``None``, "
"only the parameter name is added. (This is used for MIME parameters without "
"a value.)  Example usage::"
msgstr ""
"*name* は追加するヘッダフィールドです。このヘッダフィールドに MIME パラメータ"
"を設定するためにキーワード引数を使うことができます。それぞれのパラメータは文"
"字列か ``None`` でなければいけません。パラメータ中のアンダースコアはダッシュ "
"(-) に変換されます。これは、ダッシュが Python の識別子としては不正なのです"
"が、多くの MIME パラメータはダッシュを含むためです。パラメータ値が文字列の場"
"合、これはヘッダ値のパラメータに ``name=\"value\"`` の形で追加されます。この"
"値がもし ``None`` の場合、パラメータ名だけが追加されます。（これは値なしの "
"MIME パラメータの場合に使われます。）使い方の例は::"

#: ../../library/wsgiref.rst:256
msgid "The above will add a header that looks like this::"
msgstr "上記はこのようなヘッダを追加します::"

#: ../../library/wsgiref.rst:261
msgid "*headers* parameter is optional."
msgstr "*headers* 引数が任意になりました。"

#: ../../library/wsgiref.rst:266
msgid ":mod:`wsgiref.simple_server` -- a simple WSGI HTTP server"
msgstr ":mod:`wsgiref.simple_server` -- シンプルな WSGI HTTP サーバ"

#: ../../library/wsgiref.rst:272
msgid ""
"This module implements a simple HTTP server (based on :mod:`http.server`) "
"that serves WSGI applications.  Each server instance serves a single WSGI "
"application on a given host and port.  If you want to serve multiple "
"applications on a single host and port, you should create a WSGI application "
"that parses ``PATH_INFO`` to select which application to invoke for each "
"request.  (E.g., using the :func:`shift_path_info` function from :mod:"
"`wsgiref.util`.)"
msgstr ""
"このモジュールは WSGI アプリケーションを提供するシンプルな HTTP サーバです (:"
"mod:`http.server` がベースです)。個々のサーバインスタンスは単一の WSGI アプリ"
"ケーションを、特定のホストとポート上で提供します。もし一つのホストとポート上"
"で複数のアプリケーションを提供したいならば、 ``PATH_INFO`` をパースして個々の"
"リクエストでどのアプリケーションを呼び出すか選択するような WSGI アプリケー"
"ションを作る必要があります。（例えば、 :mod:`wsgiref.util` から :func:"
"`shift_path_info` を利用します。）"

#: ../../library/wsgiref.rst:283
msgid ""
"Create a new WSGI server listening on *host* and *port*, accepting "
"connections for *app*.  The return value is an instance of the supplied "
"*server_class*, and will process requests using the specified "
"*handler_class*.  *app* must be a WSGI application object, as defined by :"
"pep:`3333`."
msgstr ""
"*host* と *port* 上で待機し、 *app* へのコネクションを受け付ける  WSGI サーバ"
"を作成します。戻り値は与えられた *server_class* のインスタンスで、指定された "
"*handler_class* を使ってリクエストを処理します。 *app* は :pep:`3333` で定義"
"されるところの WSGI アプリケーションでなければいけません。"

#: ../../library/wsgiref.rst:304
msgid ""
"This function is a small but complete WSGI application that returns a text "
"page containing the message \"Hello world!\" and a list of the key/value "
"pairs provided in the *environ* parameter.  It's useful for verifying that a "
"WSGI server (such as :mod:`wsgiref.simple_server`) is able to run a simple "
"WSGI application correctly."
msgstr ""
"この関数は小規模ながら完全な WSGI アプリケーションで、 \"Hello world!\" メッ"
"セージと、 *environ* パラメータに提供されているキー／値のペアを含むテキスト"
"ページを返します。これは WSGI サーバ (:mod:`wsgiref.simple_server` のような) "
"がシンプルな WSGI アプリケーションを正しく実行できるかを確かめるのに便利で"
"す。"

#: ../../library/wsgiref.rst:313
msgid ""
"Create a :class:`WSGIServer` instance.  *server_address* should be a ``(host,"
"port)`` tuple, and *RequestHandlerClass* should be the subclass of :class:"
"`http.server.BaseHTTPRequestHandler` that will be used to process requests."
msgstr ""
":class:`WSGIServer` インスタンスを作成します。 *server_address* は ``(host,"
"port)`` のタプル、そして *RequestHandlerClass* はリクエストの処理に使われる :"
"class:`http.server.BaseHTTPRequestHandler` のサブクラスでなければいけません。"

#: ../../library/wsgiref.rst:318
msgid ""
"You do not normally need to call this constructor, as the :func:"
"`make_server` function can handle all the details for you."
msgstr ""
":func:`make_server` が細かい調整をやってくれるので、通常はこのコンストラクタ"
"を呼ぶ必要はありません。"

#: ../../library/wsgiref.rst:321
msgid ""
":class:`WSGIServer` is a subclass of :class:`http.server.HTTPServer`, so all "
"of its methods (such as :meth:`serve_forever` and :meth:`handle_request`) "
"are available. :class:`WSGIServer` also provides these WSGI-specific methods:"
msgstr ""
":class:`WSGIServer` は :class:`http.server.HTTPServer` のサブクラスなので、そ"
"のすべてのメソッド (:meth:`serve_forever` や :meth:`handle_request` のよう"
"な) が利用できます。 :class:`WSGIServer` も以下のような WSGI 固有メソッドを提"
"供します:"

#: ../../library/wsgiref.rst:328
msgid ""
"Sets the callable *application* as the WSGI application that will receive "
"requests."
msgstr ""
"呼び出し可能 (callable) な *application* をリクエストを受け取る WSGI アプリ"
"ケーションとして設定します。"

#: ../../library/wsgiref.rst:334
msgid "Returns the currently set application callable."
msgstr ""

#: ../../library/wsgiref.rst:336
msgid ""
"Normally, however, you do not need to use these additional methods, as :meth:"
"`set_app` is normally called by :func:`make_server`, and the :meth:`get_app` "
"exists mainly for the benefit of request handler instances."
msgstr ""
"しかしながら、通常はこれらの追加されたメソッドを使う必要はありません。 :meth:"
"`set_app` は普通は :func:`make_server` によって呼ばれ、 :meth:`get_app` は主"
"にリクエストハンドラインスタンスの便宜上存在するからです。"

#: ../../library/wsgiref.rst:343
msgid ""
"Create an HTTP handler for the given *request* (i.e. a socket), "
"*client_address* (a ``(host,port)`` tuple), and *server* (:class:"
"`WSGIServer` instance)."
msgstr ""
"与えられた *request* （すなわちソケット）の HTTP ハンドラ、 *client_address* "
"(``(host,port)`` のタプル)、 *server* (:class:`WSGIServer` インスタンス) の "
"HTTP ハンドラを作成します。"

#: ../../library/wsgiref.rst:346
msgid ""
"You do not need to create instances of this class directly; they are "
"automatically created as needed by :class:`WSGIServer` objects.  You can, "
"however, subclass this class and supply it as a *handler_class* to the :func:"
"`make_server` function.  Some possibly relevant methods for overriding in "
"subclasses:"
msgstr ""
"このクラスのインスタンスを直接生成する必要はありません; これらは必要に応じ"
"て :class:`WSGIServer` オブジェクトによって自動的に生成されます。しかしなが"
"ら、このクラスをサブクラス化し、 :func:`make_server` 関数に *handler_class* "
"として与えることは可能でしょう。サブクラスにおいてオーバーライドする意味のあ"
"りそうなものは:"

#: ../../library/wsgiref.rst:355
msgid ""
"Returns a dictionary containing the WSGI environment for a request.  The "
"default implementation copies the contents of the :class:`WSGIServer` "
"object's :attr:`base_environ` dictionary attribute and then adds various "
"headers derived from the HTTP request.  Each call to this method should "
"return a new dictionary containing all of the relevant CGI environment "
"variables as specified in :pep:`3333`."
msgstr ""
"リクエストに対する WSGI 環境を含む辞書を返します。デフォルト実装では :class:"
"`WSGIServer` オブジェクトの :attr:`base_environ` 辞書属性のコンテンツをコピー"
"し、それから HTTP リクエスト由来の様々なヘッダを追加しています。このメソッド"
"呼び出し毎に、 :pep:`3333` に指定されている関連する CGI 環境変数をすべて含む"
"新規の辞書を返さなければいけません。"

#: ../../library/wsgiref.rst:365
msgid ""
"Return the object that should be used as the ``wsgi.errors`` stream. The "
"default implementation just returns ``sys.stderr``."
msgstr ""
"``wsgi.errors`` ストリームとして使われるオブジェクトを返します。デフォルト実"
"装では単に ``sys.stderr`` を返します。"

#: ../../library/wsgiref.rst:371
msgid ""
"Process the HTTP request.  The default implementation creates a handler "
"instance using a :mod:`wsgiref.handlers` class to implement the actual WSGI "
"application interface."
msgstr ""
"HTTP リクエストを処理します。デフォルト実装では実際の WGI アプリケーションイ"
"ンターフェースを実装するのに :mod:`wsgiref.handlers` クラスを使ってハンドライ"
"ンスタンスを作成します。"

#: ../../library/wsgiref.rst:377
msgid ":mod:`wsgiref.validate` --- WSGI conformance checker"
msgstr ":mod:`wsgiref.validate` --- WSGI 準拠チェッカー"

#: ../../library/wsgiref.rst:383
msgid ""
"When creating new WSGI application objects, frameworks, servers, or "
"middleware, it can be useful to validate the new code's conformance using :"
"mod:`wsgiref.validate`.  This module provides a function that creates WSGI "
"application objects that validate communications between a WSGI server or "
"gateway and a WSGI application object, to check both sides for protocol "
"conformance."
msgstr ""
"WSGI アプリケーションのオブジェクト、フレームワーク、サーバまたはミドルウェア"
"の作成時には、その新規のコードを :mod:`wsgiref.validate` を使って準拠の検証を"
"すると便利です。このモジュールは WSGI サーバやゲートウェイと WSGI アプリケー"
"ションオブジェクト間の通信を検証する WSGI アプリケーションオブジェクトを作成"
"する関数を提供し、双方のプロトコル準拠をチェックします。"

#: ../../library/wsgiref.rst:390
msgid ""
"Note that this utility does not guarantee complete :pep:`3333` compliance; "
"an absence of errors from this module does not necessarily mean that errors "
"do not exist.  However, if this module does produce an error, then it is "
"virtually certain that either the server or application is not 100% "
"compliant."
msgstr ""
"このユーティリティは完全な :pep:`3333` 準拠を保証するものでないことは注意して"
"ください; このモジュールでエラーが出ないことは必ずしもエラーが存在しないこと"
"を意味しません。しかしこのモジュールがエラーを出したならば、ほぼ確実にサーバ"
"かアプリケーションのどちらかが 100% 準拠ではありません。"

#: ../../library/wsgiref.rst:395
msgid ""
"This module is based on the :mod:`paste.lint` module from Ian Bicking's "
"\"Python Paste\" library."
msgstr ""
"このモジュールは lan Bicking の \"Python Paste\" ライブラリの :mod:`paste."
"lint` モジュールをベースにしています。"

#: ../../library/wsgiref.rst:401
msgid ""
"Wrap *application* and return a new WSGI application object.  The returned "
"application will forward all requests to the original *application*, and "
"will check that both the *application* and the server invoking it are "
"conforming to the WSGI specification and to :rfc:`2616`."
msgstr ""
"*application* をラップし、新しい WSGI アプリケーションオブジェクトを返しま"
"す。返されたアプリケーションは全てのリクエストを元々の *application* に転送"
"し、*application* とそれを呼び出すサーバの両方が WSGI 仕様と :rfc:`2616` の両"
"方に準拠しているかをチェックします。"

#: ../../library/wsgiref.rst:406
msgid ""
"Any detected nonconformance results in an :exc:`AssertionError` being "
"raised; note, however, that how these errors are handled is server-"
"dependent.  For example, :mod:`wsgiref.simple_server` and other servers "
"based on :mod:`wsgiref.handlers` (that don't override the error handling "
"methods to do something else) will simply output a message that an error has "
"occurred, and dump the traceback to ``sys.stderr`` or some other error "
"stream."
msgstr ""
"何らかの非準拠が検出されると、 :exc:`AssertionError` 例外が送出されます; しか"
"し、このエラーがどう扱われるかはサーバ依存であることに注意してください。例え"
"ば、 :mod:`wsgiref.simple_server` とその他 :mod:`wsgiref.handlers` ベースの"
"サーバ（エラー処理メソッドが他のことをするようにオーバライドしていないもの）"
"は単純にエラーが発生したというメッセージとトレースバックのダンプを ``sys."
"stderr`` やその他のエラーストリームに出力します。"

#: ../../library/wsgiref.rst:413
msgid ""
"This wrapper may also generate output using the :mod:`warnings` module to "
"indicate behaviors that are questionable but which may not actually be "
"prohibited by :pep:`3333`.  Unless they are suppressed using Python command-"
"line options or the :mod:`warnings` API, any such warnings will be written "
"to ``sys.stderr`` (*not* ``wsgi.errors``, unless they happen to be the same "
"object)."
msgstr ""
"このラッパーは、疑わしいものの実際には :pep:`3333` で禁止されていないかもしれ"
"ない挙動を指摘するために :mod:`warnings` モジュールを使って出力を生成します。"
"これらは Python のコマンドラインオプションや :mod:`warnings` API で抑制されな"
"ければ、 ``sys.stderr`` (``wsgi.errors`` では *ありません* 。ただし、たまたま"
"同一のオブジェクトだった場合を除く)に書き出されます。"

#: ../../library/wsgiref.rst:445
msgid ":mod:`wsgiref.handlers` -- server/gateway base classes"
msgstr ":mod:`wsgiref.handlers` -- サーバ／ゲートウェイのベースクラス"

#: ../../library/wsgiref.rst:451
msgid ""
"This module provides base handler classes for implementing WSGI servers and "
"gateways.  These base classes handle most of the work of communicating with "
"a WSGI application, as long as they are given a CGI-like environment, along "
"with input, output, and error streams."
msgstr ""
"このモジュールは WSGI サーバとゲートウェイ実装のベースハンドラクラスを提供し"
"ます。これらのベースクラスは、CGI 風の環境と、それに加えて入力、出力そしてエ"
"ラーストリームが与えられることで、WSGI アプリケーションとの通信の大部分を処理"
"します。"

#: ../../library/wsgiref.rst:459
msgid ""
"CGI-based invocation via ``sys.stdin``, ``sys.stdout``, ``sys.stderr`` and "
"``os.environ``.  This is useful when you have a WSGI application and want to "
"run it as a CGI script.  Simply invoke ``CGIHandler().run(app)``, where "
"``app`` is the WSGI application object you wish to invoke."
msgstr ""
"``sys.stdin``、``sys.stdout``、``sys.stderr`` そして ``os.environ`` 経由での "
"CGI ベースの呼び出しです。これは、もしあなたが WSGI アプリケーションを持って"
"いて、これを CGI スクリプトとして実行したい場合に有用です。単に "
"``CGIHandler().run(app)`` を起動してください。``app`` はあなたが起動したい "
"WSGI アプリケーションオブジェクトです。"

#: ../../library/wsgiref.rst:464
msgid ""
"This class is a subclass of :class:`BaseCGIHandler` that sets ``wsgi."
"run_once`` to true, ``wsgi.multithread`` to false, and ``wsgi.multiprocess`` "
"to true, and always uses :mod:`sys` and :mod:`os` to obtain the necessary "
"CGI streams and environment."
msgstr ""
"このクラスは :class:`BaseCGIHandler` のサブクラスで、これは ``wsgi."
"run_once`` を true、 ``wsgi.multithread`` を false、そして ``wsgi."
"multiprocess`` を true にセットし、常に :mod:`sys` と :mod:`os` を、必要な "
"CGI ストリームと環境を取得するために使用します。"

#: ../../library/wsgiref.rst:472
msgid ""
"A specialized alternative to :class:`CGIHandler`, for use when deploying on "
"Microsoft's IIS web server, without having set the config allowPathInfo "
"option (IIS>=7) or metabase allowPathInfoForScriptMappings (IIS<7)."
msgstr ""
"(IIS 7 以降の) 設定オプションの allowPathInfo や (IIS 7 より前の) メタベース"
"の allowPathInfoForScriptMappings を設定せずに Microsoft の IIS Web サーバに"
"デプロイするときに使う、 :class:`CGIHandler` クラス以外の専用の選択肢です。"

#: ../../library/wsgiref.rst:476
msgid ""
"By default, IIS gives a ``PATH_INFO`` that duplicates the ``SCRIPT_NAME`` at "
"the front, causing problems for WSGI applications that wish to implement "
"routing. This handler strips any such duplicated path."
msgstr ""

#: ../../library/wsgiref.rst:480
msgid ""
"IIS can be configured to pass the correct ``PATH_INFO``, but this causes "
"another bug where ``PATH_TRANSLATED`` is wrong. Luckily this variable is "
"rarely used and is not guaranteed by WSGI. On IIS<7, though, the setting can "
"only be made on a vhost level, affecting all other script mappings, many of "
"which break when exposed to the ``PATH_TRANSLATED`` bug. For this reason "
"IIS<7 is almost never deployed with the fix (Even IIS7 rarely uses it "
"because there is still no UI for it.)."
msgstr ""

#: ../../library/wsgiref.rst:488
msgid ""
"There is no way for CGI code to tell whether the option was set, so a "
"separate handler class is provided.  It is used in the same way as :class:"
"`CGIHandler`, i.e., by calling ``IISCGIHandler().run(app)``, where ``app`` "
"is the WSGI application object you wish to invoke."
msgstr ""

#: ../../library/wsgiref.rst:498
msgid ""
"Similar to :class:`CGIHandler`, but instead of using the :mod:`sys` and :mod:"
"`os` modules, the CGI environment and I/O streams are specified explicitly. "
"The *multithread* and *multiprocess* values are used to set the ``wsgi."
"multithread`` and ``wsgi.multiprocess`` flags for any applications run by "
"the handler instance."
msgstr ""
":class:`CGIHandler` に似ていますが、 :mod:`sys` と :mod:`os` モジュールを使う"
"代わりに CGI 環境と I/O ストリームを明示的に指定します。 *multithread* と "
"*multiprocess* の値は、ハンドラインスタンスにより実行されるアプリケーション"
"の ``wsgi.multithread`` と ``wsgi.multiprocess`` フラグの設定に使われます。"

#: ../../library/wsgiref.rst:504
msgid ""
"This class is a subclass of :class:`SimpleHandler` intended for use with "
"software other than HTTP \"origin servers\".  If you are writing a gateway "
"protocol implementation (such as CGI, FastCGI, SCGI, etc.) that uses a "
"``Status:`` header to send an HTTP status, you probably want to subclass "
"this instead of :class:`SimpleHandler`."
msgstr ""
"このクラスは :class:`SimpleHandler` のサブクラスで、HTTP の \"本サーバ\" でな"
"いソフトウェアと使うことを意図しています。もしあなたが ``Status:`` ヘッダを "
"HTTP ステータスを送信するのに使うようなゲートウェイプロトコルの実装（CGI、"
"FastCGI、SCGIなど）を書いている場合、おそらく :class:`SimpleHandler` ではなく"
"このクラスをサブクラス化するとよいでしょう。"

#: ../../library/wsgiref.rst:513
msgid ""
"Similar to :class:`BaseCGIHandler`, but designed for use with HTTP origin "
"servers.  If you are writing an HTTP server implementation, you will "
"probably want to subclass this instead of :class:`BaseCGIHandler`."
msgstr ""
":class:`BaseCGIHandler` と似ていますが、HTTP の本サーバと使うためにデザインさ"
"れています。もしあなたが HTTP サーバ実装を書いている場合、おそらく :class:"
"`BaseCGIHandler` ではなくこのクラスをサブクラス化するとよいでしょう。"

#: ../../library/wsgiref.rst:517
msgid ""
"This class is a subclass of :class:`BaseHandler`.  It overrides the :meth:"
"`__init__`, :meth:`get_stdin`, :meth:`get_stderr`, :meth:`add_cgi_vars`, :"
"meth:`_write`, and :meth:`_flush` methods to support explicitly setting the "
"environment and streams via the constructor.  The supplied environment and "
"streams are stored in the :attr:`stdin`, :attr:`stdout`, :attr:`stderr`, "
"and :attr:`environ` attributes."
msgstr ""
"このクラスは :class:`BaseHandler` のサブクラスです。これは :meth:"
"`__init__` 、 :meth:`get_stdin` 、 :meth:`get_stderr` 、 :meth:"
"`add_cgi_vars` 、 :meth:`_write` 、 :meth:`_flush` をオーバーライドして、コン"
"ストラクタから明示的に環境とストリームを設定するようにしています。与えられた"
"環境とストリームは :attr:`stdin` 、 :attr:`stdout` 、 :attr:`stderr` それに :"
"attr:`environ` 属性に保存されています。"

#: ../../library/wsgiref.rst:524
msgid ""
"The :meth:`~io.BufferedIOBase.write` method of *stdout* should write each "
"chunk in full, like :class:`io.BufferedIOBase`."
msgstr ""

#: ../../library/wsgiref.rst:530
msgid ""
"This is an abstract base class for running WSGI applications.  Each instance "
"will handle a single HTTP request, although in principle you could create a "
"subclass that was reusable for multiple requests."
msgstr ""
"これは WSGI アプリケーションを実行するための抽象ベースクラスです。それぞれの"
"インスタンスは一つの HTTP リクエストを処理します。しかし原理上は複数のリクエ"
"スト用に再利用可能なサブクラスを作成することができます。"

#: ../../library/wsgiref.rst:534
msgid ""
":class:`BaseHandler` instances have only one method intended for external "
"use:"
msgstr ""
":class:`BaseHandler` インスタンスは外部から利用されるたった一つのメソッドを持"
"ちます:"

#: ../../library/wsgiref.rst:539
msgid "Run the specified WSGI application, *app*."
msgstr "指定された WSGI アプリケーション、*app* を実行します。"

#: ../../library/wsgiref.rst:541
msgid ""
"All of the other :class:`BaseHandler` methods are invoked by this method in "
"the process of running the application, and thus exist primarily to allow "
"customizing the process."
msgstr ""
"その他のすべての :class:`BaseHandler` のメソッドはアプリケーション実行プロセ"
"スでこのメソッドから呼ばれます。したがって、それらは主にそのプロセスのカスタ"
"マイズのために存在しています。"

#: ../../library/wsgiref.rst:545
msgid "The following methods MUST be overridden in a subclass:"
msgstr "以下のメソッドはサブクラスでオーバーライドされなければいけません:"

#: ../../library/wsgiref.rst:550
msgid ""
"Buffer the bytes *data* for transmission to the client.  It's okay if this "
"method actually transmits the data; :class:`BaseHandler` just separates "
"write and flush operations for greater efficiency when the underlying system "
"actually has such a distinction."
msgstr ""
"バイト列の *data* をクライアントへの転送用にバッファします。このメソッドが実"
"際にデータを転送しても OK です: 下部システムが実際にそのような区別をしている"
"場合に効率をより良くするために、 :class:`BaseHandler` は書き出しとフラッシュ"
"操作を分けているからです。"

#: ../../library/wsgiref.rst:558
msgid ""
"Force buffered data to be transmitted to the client.  It's okay if this "
"method is a no-op (i.e., if :meth:`_write` actually sends the data)."
msgstr ""
"バッファされたデータをクライアントに強制的に転送します。このメソッドは何もし"
"なくても OK です（すなわち、 :meth:`_write` が実際にデータを送る場合）。"

#: ../../library/wsgiref.rst:564
msgid ""
"Return an input stream object suitable for use as the ``wsgi.input`` of the "
"request currently being processed."
msgstr ""
"現在処理中のリクエストの ``wsgi.input`` としての利用に適当な入力ストリームオ"
"ブジェクトを返します。"

#: ../../library/wsgiref.rst:570
msgid ""
"Return an output stream object suitable for use as the ``wsgi.errors`` of "
"the request currently being processed."
msgstr ""
"現在処理中のリクエストの ``wsgi.errors`` としての利用に適当な出力ストリームオ"
"ブジェクトを返します。"

#: ../../library/wsgiref.rst:576
msgid ""
"Insert CGI variables for the current request into the :attr:`environ` "
"attribute."
msgstr "現在のリクエストの CGI 変数を :attr:`environ` 属性に追加します。"

#: ../../library/wsgiref.rst:578
msgid ""
"Here are some other methods and attributes you may wish to override. This "
"list is only a summary, however, and does not include every method that can "
"be overridden.  You should consult the docstrings and source code for "
"additional information before attempting to create a customized :class:"
"`BaseHandler` subclass."
msgstr ""
"オーバーライドされることの多いメソッド及び属性を以下に挙げます。しかし、この"
"リストは単にサマリであり、オーバーライド可能なすべてのメソッドは含んでいませ"
"ん。カスタマイズした :class:`BaseHandler` サブクラスを作成しようとする前に "
"docstring やソースコードでさらなる情報を調べてください。"

#: ../../library/wsgiref.rst:584
msgid "Attributes and methods for customizing the WSGI environment:"
msgstr "WSGI 環境のカスタマイズのための属性とメソッド:"

#: ../../library/wsgiref.rst:589
msgid ""
"The value to be used for the ``wsgi.multithread`` environment variable.  It "
"defaults to true in :class:`BaseHandler`, but may have a different default "
"(or be set by the constructor) in the other subclasses."
msgstr ""
"``wsgi.multithread`` 環境変数で使われる値。 :class:`BaseHandler` ではデフォル"
"トが true ですが、別のサブクラスではデフォルトで（またはコンストラクタによっ"
"て設定されて）異なる値を持つことがあります。"

#: ../../library/wsgiref.rst:596
msgid ""
"The value to be used for the ``wsgi.multiprocess`` environment variable.  It "
"defaults to true in :class:`BaseHandler`, but may have a different default "
"(or be set by the constructor) in the other subclasses."
msgstr ""
"``wsgi.multiprocess`` 環境変数で使われる値。 :class:`BaseHandler` ではデフォ"
"ルトが true ですが、別のサブクラスではデフォルトで（またはコンストラクタに"
"よって設定されて）異なる値を持つことがあります。"

#: ../../library/wsgiref.rst:603
msgid ""
"The value to be used for the ``wsgi.run_once`` environment variable.  It "
"defaults to false in :class:`BaseHandler`, but :class:`CGIHandler` sets it "
"to true by default."
msgstr ""
"``wsgi.run_once`` 環境変数で使われる値。 :class:`BaseHandler` ではデフォルト"
"が false ですが、 :class:`CGIHandler` はデフォルトでこれを true に設定しま"
"す。"

#: ../../library/wsgiref.rst:610
msgid ""
"The default environment variables to be included in every request's WSGI "
"environment.  By default, this is a copy of ``os.environ`` at the time that :"
"mod:`wsgiref.handlers` was imported, but subclasses can either create their "
"own at the class or instance level.  Note that the dictionary should be "
"considered read-only, since the default value is shared between multiple "
"classes and instances."
msgstr ""
"すべてのリクエストの WSGI 環境に含まれるデフォルトの環境変数。デフォルトで"
"は :mod:`wsgiref.handlers` がインポートされた時点の ``os.environ`` のコピーで"
"すが、サブクラスはクラスまたはインスタンスレベルでそれら自身のものを作ること"
"ができます。デフォルト値は複数のクラスとインスタンスで共有されるため、この辞"
"書は読み出し専用と考えるべきだという点に注意してください。"

#: ../../library/wsgiref.rst:620
msgid ""
"If the :attr:`origin_server` attribute is set, this attribute's value is "
"used to set the default ``SERVER_SOFTWARE`` WSGI environment variable, and "
"also to set a default ``Server:`` header in HTTP responses.  It is ignored "
"for handlers (such as :class:`BaseCGIHandler` and :class:`CGIHandler`) that "
"are not HTTP origin servers."
msgstr ""
":attr:`origin_server` 属性が設定されている場合、この属性の値がデフォルトの "
"``SERVER_SOFTWARE`` WSGI 環境変数の設定や HTTP レスポンス中のデフォルトの "
"``Server:`` ヘッダの設定に使われます。これは (:class:`BaseCGIHandler` や :"
"class:`CGIHandler` のような) HTTP オリジンサーバでないハンドラでは無視されま"
"す。"

#: ../../library/wsgiref.rst:626
msgid ""
"The term \"Python\" is replaced with implementation specific term like "
"\"CPython\", \"Jython\" etc."
msgstr ""
"\"Python\" という語は \"CPython\" や \"Jython\" などのような個別実装の語に置"
"き換えられました。"

#: ../../library/wsgiref.rst:632
msgid ""
"Return the URL scheme being used for the current request.  The default "
"implementation uses the :func:`guess_scheme` function from :mod:`wsgiref."
"util` to guess whether the scheme should be \"http\" or \"https\", based on "
"the current request's :attr:`environ` variables."
msgstr ""
"現在のリクエストで使われている URL スキームを返します。デフォルト実装は :mod:"
"`wsgiref.util` の :func:`guess_scheme` を使い、現在のリクエストの :attr:"
"`environ` 変数に基づいてスキームが\"http\" か \"https\" かを推測します。"

#: ../../library/wsgiref.rst:640
msgid ""
"Set the :attr:`environ` attribute to a fully populated WSGI environment.  "
"The default implementation uses all of the above methods and attributes, "
"plus the :meth:`get_stdin`, :meth:`get_stderr`, and :meth:`add_cgi_vars` "
"methods and the :attr:`wsgi_file_wrapper` attribute.  It also inserts a "
"``SERVER_SOFTWARE`` key if not present, as long as the :attr:`origin_server` "
"attribute is a true value and the :attr:`server_software` attribute is set."
msgstr ""
":attr:`environ` 属性を、フル実装 (fully populated) の WSGI 環境に設定します。"
"デフォルトの実装は、上記すべてのメソッドと属性、加えて :meth:`get_stdin` 、 :"
"meth:`get_stderr` 、 :meth:`add_cgi_vars` メソッドと :attr:"
"`wsgi_file_wrapper` 属性を利用します。これは、キーが存在せず、 :attr:"
"`origin_server` 属性が true 値で :attr:`server_software` 属性も設定されている"
"場合に ``SERVER_SOFTWARE`` を挿入します。"

#: ../../library/wsgiref.rst:647
msgid "Methods and attributes for customizing exception handling:"
msgstr "例外処理のカスタマイズのためのメソッドと属性:"

#: ../../library/wsgiref.rst:652
msgid ""
"Log the *exc_info* tuple in the server log.  *exc_info* is a ``(type, value, "
"traceback)`` tuple.  The default implementation simply writes the traceback "
"to the request's ``wsgi.errors`` stream and flushes it.  Subclasses can "
"override this method to change the format or retarget the output, mail the "
"traceback to an administrator, or whatever other action may be deemed "
"suitable."
msgstr ""
"*exc_info* タプルをサーバログに記録します。*exc_info* は ``(type, value, "
"traceback)`` のタプルです。デフォルトの実装は単純にトレースバックをリクエスト"
"の ``wsgi.errors`` ストリームに書き出してフラッシュします。サブクラスはこのメ"
"ソッドをオーバーライドしてフォーマットを変更したり出力先の変更、トレースバッ"
"クを管理者にメールしたりその他適切と思われるいかなるアクションも取ることがで"
"きます。"

#: ../../library/wsgiref.rst:661
msgid ""
"The maximum number of frames to include in tracebacks output by the default :"
"meth:`log_exception` method.  If ``None``, all frames are included."
msgstr ""
"デフォルトの :meth:`log_exception` メソッドで出力されるトレースバック出力に含"
"まれる最大のフレーム数です。 ``None`` ならば、すべてのフレームが含まれます。"

#: ../../library/wsgiref.rst:667
msgid ""
"This method is a WSGI application to generate an error page for the user.  "
"It is only invoked if an error occurs before headers are sent to the client."
msgstr ""
"このメソッドは、ユーザに対してエラーページを出力する WSGI アプリケーションで"
"す。これはクライアントにヘッダが送出される前にエラーが発生した場合にのみ呼び"
"出されます。"

#: ../../library/wsgiref.rst:670
msgid ""
"This method can access the current error information using ``sys."
"exc_info()``, and should pass that information to *start_response* when "
"calling it (as described in the \"Error Handling\" section of :pep:`3333`)."
msgstr ""
"このメソッドは ``sys.exc_info()`` を使って現在のエラー情報にアクセスでき、そ"
"の情報はこれを呼ぶときに *start_response* に渡すべきです (:pep:`3333` の "
"\"Error Handling\" セクションに記述があります)。"

#: ../../library/wsgiref.rst:674
msgid ""
"The default implementation just uses the :attr:`error_status`, :attr:"
"`error_headers`, and :attr:`error_body` attributes to generate an output "
"page.  Subclasses can override this to produce more dynamic error output."
msgstr ""
"デフォルト実装は単に :attr:`error_status` 、 :attr:`error_headers` 、 :attr:"
"`error_body` 属性を出力ページの生成に使います。サブクラスではこれをオーバーラ"
"イドしてもっと動的なエラー出力をすることができます。"

#: ../../library/wsgiref.rst:678
msgid ""
"Note, however, that it's not recommended from a security perspective to spit "
"out diagnostics to any old user; ideally, you should have to do something "
"special to enable diagnostic output, which is why the default implementation "
"doesn't include any."
msgstr ""
"しかし、セキュリティの観点からは診断をあらゆるユーザに吐き出すことは推奨され"
"ないことに気をつけてください; 理想的には、診断的な出力を有効にするには何らか"
"の特別なことをする必要があるようにすべきで、これがデフォルト実装では何も含ま"
"れていない理由です。"

#: ../../library/wsgiref.rst:686
msgid ""
"The HTTP status used for error responses.  This should be a status string as "
"defined in :pep:`3333`; it defaults to a 500 code and message."
msgstr ""
"エラーレスポンスで使われる HTTP ステータスです。これは :pep:`3333` で定義され"
"ているステータス文字列です; デフォルトは 500 コードとメッセージです。"

#: ../../library/wsgiref.rst:692
msgid ""
"The HTTP headers used for error responses.  This should be a list of WSGI "
"response headers (``(name, value)`` tuples), as described in :pep:`3333`.  "
"The default list just sets the content type to ``text/plain``."
msgstr ""
"エラーレスポンスで使われる HTTP ヘッダです。これは :pep:`3333` で述べられてい"
"るような、 WSGI レスポンスヘッダ (``(name, value)`` タプル) のリストであるべ"
"きです。デフォルトのリストはコンテントタイプを ``text/plain`` にセットしてい"
"るだけです。"

#: ../../library/wsgiref.rst:699
msgid ""
"The error response body.  This should be an HTTP response body bytestring. "
"It defaults to the plain text, \"A server error occurred.  Please contact "
"the administrator.\""
msgstr ""
"エラーレスポンスボディ。これは HTTP レスポンスのボディバイト文字列であるべき"
"です。これはデフォルトではプレーンテキストで \"A server error occurred.  "
"Please contact the administrator.\" です。"

#: ../../library/wsgiref.rst:703
msgid ""
"Methods and attributes for :pep:`3333`'s \"Optional Platform-Specific File "
"Handling\" feature:"
msgstr ""
":pep:`3333` の \"オプションのプラットフォーム固有のファイルハンドリング\" 機"
"能のためのメソッドと属性:"

#: ../../library/wsgiref.rst:709
msgid ""
"A ``wsgi.file_wrapper`` factory, or ``None``.  The default value of this "
"attribute is the :class:`wsgiref.util.FileWrapper` class."
msgstr ""
"``wsgi.file_wrapper`` ファクトリ、または ``None`` です。この属性のデフォルト"
"値は :class:`wsgiref.util.FileWrapper` クラスです。"

#: ../../library/wsgiref.rst:715
msgid ""
"Override to implement platform-specific file transmission.  This method is "
"called only if the application's return value is an instance of the class "
"specified by the :attr:`wsgi_file_wrapper` attribute.  It should return a "
"true value if it was able to successfully transmit the file, so that the "
"default transmission code will not be executed. The default implementation "
"of this method just returns a false value."
msgstr ""
"オーバーライドしてプラットフォーム固有のファイル転送を実装します。このメソッ"
"ドはアプリケーションの戻り値が :attr:`wsgi_file_wrapper` 属性で指定されたクラ"
"スのインスタンスの場合にのみ呼ばれます。これはファイルの転送が成功できた場合"
"には true を返して、デフォルトの転送コードが実行されないようにするべきです。"
"このデフォルトの実装は単に false 値を返します。"

#: ../../library/wsgiref.rst:722
msgid "Miscellaneous methods and attributes:"
msgstr "その他のメソッドと属性:"

#: ../../library/wsgiref.rst:727
msgid ""
"This attribute should be set to a true value if the handler's :meth:`_write` "
"and :meth:`_flush` are being used to communicate directly to the client, "
"rather than via a CGI-like gateway protocol that wants the HTTP status in a "
"special ``Status:`` header."
msgstr ""
"この属性はハンドラの :meth:`_write` と :meth:`_flush` が、特別に ``Status:`` "
"ヘッダに HTTP ステータスを求めるような CGI 風のゲートウェイプロトコル経由でな"
"く、クライアントと直接通信をするような場合には true 値に設定されているべきで"
"す。"

#: ../../library/wsgiref.rst:732
msgid ""
"This attribute's default value is true in :class:`BaseHandler`, but false "
"in :class:`BaseCGIHandler` and :class:`CGIHandler`."
msgstr ""
"この属性のデフォルト値は :class:`BaseHandler` では true ですが、 :class:"
"`BaseCGIHandler` と :class:`CGIHandler` では false です。"

#: ../../library/wsgiref.rst:738
msgid ""
"If :attr:`origin_server` is true, this string attribute is used to set the "
"HTTP version of the response set to the client.  It defaults to ``\"1.0\"``."
msgstr ""
":attr:`origin_server` が true の場合、この文字列属性はクライアントへのレスポ"
"ンスセットの HTTP バージョンの設定に使われます。デフォルトは ``\"1.0\"`` で"
"す。"

#: ../../library/wsgiref.rst:744
msgid ""
"Transcode CGI variables from ``os.environ`` to :pep:`3333` \"bytes in "
"unicode\" strings, returning a new dictionary.  This function is used by :"
"class:`CGIHandler` and :class:`IISCGIHandler` in place of directly using "
"``os.environ``, which is not necessarily WSGI-compliant on all platforms and "
"web servers using Python 3 -- specifically, ones where the OS's actual "
"environment is Unicode (i.e. Windows), or ones where the environment is "
"bytes, but the system encoding used by Python to decode it is anything other "
"than ISO-8859-1 (e.g. Unix systems using UTF-8)."
msgstr ""

#: ../../library/wsgiref.rst:753
msgid ""
"If you are implementing a CGI-based handler of your own, you probably want "
"to use this routine instead of just copying values out of ``os.environ`` "
"directly."
msgstr ""

#: ../../library/wsgiref.rst:761
msgid "Examples"
msgstr "使用例"

#: ../../library/wsgiref.rst:763
msgid "This is a working \"Hello World\" WSGI application::"
msgstr "これは動作する \"Hello World\" WSGIアプリケーションです::"

#: ../../library/wsgiref.rst:788
msgid ""
"Example of a WSGI application serving the current directory, accept optional "
"directory and port number (default: 8000) on the command line:"
msgstr ""
