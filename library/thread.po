# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/thread.rst:2
msgid ":mod:`thread` --- Multiple threads of control"
msgstr ":mod:`thread` --- マルチスレッドのコントロール"

#: ../../library/thread.rst:8
msgid ""
"The :mod:`thread` module has been renamed to :mod:`_thread` in Python 3. "
"The :term:`2to3` tool will automatically adapt imports when converting your "
"sources to Python 3; however, you should consider using the high-level :mod:"
"`threading` module instead."
msgstr ""
"Python 3 では :mod:`thread` モジュールは :mod:`_thread` に改名されました。 :"
"term:`2to3` ツールは、 3 コードへの変換時に、自動的に import 宣言を適合させま"
"す。しかしながら、上位の :mod:`threading` モジュールを使うことを検討して下さ"
"い。"

#: ../../library/thread.rst:20
msgid ""
"This module provides low-level primitives for working with multiple threads "
"(also called :dfn:`light-weight processes` or :dfn:`tasks`) --- multiple "
"threads of control sharing their global data space.  For synchronization, "
"simple locks (also called :dfn:`mutexes` or :dfn:`binary semaphores`) are "
"provided. The :mod:`threading` module provides an easier to use and higher-"
"level threading API built on top of this module."
msgstr ""
"このモジュールはマルチスレッド (別名 :dfn:`軽量プロセス` (:dfn:`light-weight "
"processes`)または :dfn:`タスク` (:dfn:`tasks`)) に用いられる低レベルプリミ"
"ティブを提供します --- グローバルデータ空間を共有するマルチスレッドを制御しま"
"す。同期のための単純なロック (別名 :dfn:`mutexes` またはバイナリセマフォ (:"
"dfn:`binary semaphores`))が提供されています。 :mod:`threading` モジュールは、"
"このモジュール上で、より使い易く高級なスレッディングの API を提供します。"

#: ../../library/thread.rst:31
msgid ""
"The module is optional.  It is supported on Windows, Linux, SGI IRIX, "
"Solaris 2.x, as well as on systems that have a POSIX thread (a.k.a. "
"\"pthread\") implementation.  For systems lacking the :mod:`thread` module, "
"the :mod:`dummy_thread` module is available. It duplicates this module's "
"interface and can be used as a drop-in replacement."
msgstr ""
"このモジュールはオプションです。 Windows, Linux, SGI IRIX, Solaris 2.x、そし"
"て同じようなPOSIXスレッド (別名 \"pthread\" ) 実装のシステム上でサポートされ"
"ます。 :mod:`thread` を使用することのできないシステムでは、 :mod:"
"`dummy_thread` が用意されています。 :mod:`dummy_thread` はこのモジュールと同"
"じインターフェースを持ち、置き換えて使用することができます。"

#: ../../library/thread.rst:37
msgid "It defines the following constant and functions:"
msgstr "定数と関数は以下のように定義されています:"

#: ../../library/thread.rst:42
msgid "Raised on thread-specific errors."
msgstr "スレッド特有の例外です。"

#: ../../library/thread.rst:47
msgid "This is the type of lock objects."
msgstr "これはロックオブジェクトのタイプです。"

#: ../../library/thread.rst:52
msgid ""
"Start a new thread and return its identifier.  The thread executes the "
"function *function* with the argument list *args* (which must be a tuple).  "
"The optional *kwargs* argument specifies a dictionary of keyword arguments. "
"When the function returns, the thread silently exits.  When the function "
"terminates with an unhandled exception, a stack trace is printed and then "
"the thread exits (but other threads continue to run)."
msgstr ""
"新しいスレッドを開始して、そのIDを返します。スレッドは引数リスト *args* (タプ"
"ルでなければなりません)の関数 *function* を実行します。オプション引数 "
"*kwargs* はキーワード引数の辞書を指定します。関数が戻るとき、スレッドは黙って"
"終了します。関数が未定義の例外でターミネートしたとき、スタックトレースが表示"
"され、そしてスレッドが終了します (しかし他のスレッドは走り続けます)。"

#: ../../library/thread.rst:62
msgid ""
"Raise a :exc:`KeyboardInterrupt` exception in the main thread.  A subthread "
"can use this function to interrupt the main thread."
msgstr ""
"メインスレッドで :exc:`KeyboardInterrupt` を送出します。サブスレッドはこの関"
"数を使ってメインスレッドに割り込みをかけることができます。"

#: ../../library/thread.rst:70
msgid ""
"Raise the :exc:`SystemExit` exception.  When not caught, this will cause the "
"thread to exit silently."
msgstr ""
":exc:`SystemExit` を送出します。それが捕えられないときは、黙ってスレッドを終"
"了させます。"

#: ../../library/thread.rst:84
msgid ""
"Return a new lock object.  Methods of locks are described below.  The lock "
"is initially unlocked."
msgstr ""
"新しいロックオブジェクトを返します。ロックのメソッドはこの後に記述されます。"
"ロックは初期状態としてアンロック状態です。"

#: ../../library/thread.rst:90
msgid ""
"Return the 'thread identifier' of the current thread.  This is a nonzero "
"integer.  Its value has no direct meaning; it is intended as a magic cookie "
"to be used e.g. to index a dictionary of thread-specific data.  Thread "
"identifiers may be recycled when a thread exits and another thread is "
"created."
msgstr ""
"現在のスレッドの 'スレッドID' を返します。非ゼロの整数です。この値は直接の意"
"味を持っていません; 例えばスレッド特有のデータの辞書に索引をつけるためのよう"
"な、マジッククッキーとして意図されています。スレッドが終了し、他のスレッドが"
"作られたとき、スレッド ID は再利用されるかもしれません。"

#: ../../library/thread.rst:98
msgid ""
"Return the thread stack size used when creating new threads.  The optional "
"*size* argument specifies the stack size to be used for subsequently created "
"threads, and must be 0 (use platform or configured default) or a positive "
"integer value of at least 32,768 (32kB). If *size* is not specified, 0 is "
"used. If changing the thread stack size is unsupported, the :exc:`error` "
"exception is raised.  If the specified stack size is invalid, a :exc:"
"`ValueError` is raised and the stack size is unmodified.  32kB is currently "
"the minimum supported stack size value to guarantee sufficient stack space "
"for the interpreter itself.  Note that some platforms may have particular "
"restrictions on values for the stack size, such as requiring a minimum stack "
"size > 32kB or requiring allocation in multiples of the system memory page "
"size - platform documentation should be referred to for more information "
"(4kB pages are common; using multiples of 4096 for the stack size is the "
"suggested approach in the absence of more specific information). "
"Availability: Windows, systems with POSIX threads."
msgstr ""
"新しいスレッドが作られる際に使われるスレッドのスタックサイズを返します。オプ"
"ションの *size* 引数は次に作られるスレッドに対するスタックサイズを指定するも"
"のですが、 0 (プラットフォームまたは設定されたデフォルト) または少なくとも "
"32,768 (32kB) であるような正の整数でなければなりません。 *size* に指定がなけ"
"れば 0 が使われます。もしスタックサイズの変更がサポートされていなければ :exc:"
"`ThreadError` が送出されます。また指定されたスタックサイズが条件を満たしてい"
"なければ :exc:`ValueError` が送出されスタックサイズは変更されないままになりま"
"す。 32kB は今のところインタプリタ自体に十分なスタックスペースを保証するため"
"の値としてサポートされる最小のスタックサイズです。プラットフォームによっては"
"スタックサイズの値に固有の制限が課されることもあります。たとえば 32kB より大"
"きな最小スタックサイズを要求されたり、システムメモリサイズの倍数の割り当てを"
"要求されるなどです - より詳しい情報はプラットフォームごとの文書で確認してくだ"
"さい (4kB ページは一般的ですので、情報が見当たらないときには 4096 の倍数を指"
"定しておくといいかもしれません)。利用可能: Windows, POSIX スレッドのあるシス"
"テム。"

#: ../../library/thread.rst:117
msgid "Lock objects have the following methods:"
msgstr "ロックオブジェクトは次のようなメソッドを持っています:"

#: ../../library/thread.rst:122
msgid ""
"Without the optional argument, this method acquires the lock "
"unconditionally, if necessary waiting until it is released by another thread "
"(only one thread at a time can acquire a lock --- that's their reason for "
"existence).  If the integer *waitflag* argument is present, the action "
"depends on its value: if it is zero, the lock is only acquired if it can be "
"acquired immediately without waiting, while if it is nonzero, the lock is "
"acquired unconditionally as before.  The return value is ``True`` if the "
"lock is acquired successfully, ``False`` if not."
msgstr ""
"オプションの引数なしで使用すると、このメソッドは他のスレッドがロックしている"
"かどうかにかかわらずロックを獲得します。ただし、他のスレッドがすでにロックし"
"ている場合には解除されるまで待ってからロックを獲得します (同時にロックを獲得"
"できるスレッドはひとつだけであり、これこそがロックの存在理由です)。整数の引"
"数 *waitflag* を指定すると、その値によって動作が変わります。引数が ``0`` のと"
"きは、待たずにすぐ獲得できる場合にだけロックを獲得します。 ``0`` 以外の値を与"
"えると、先の例と同様、ロックの状態にかかわらず獲得をおこないます。なお、ロッ"
"クを獲得すると ``True`` 、できなかったときには ``False`` を返します。"

#: ../../library/thread.rst:133
msgid ""
"Releases the lock.  The lock must have been acquired earlier, but not "
"necessarily by the same thread."
msgstr ""
"ロックを解放します。そのロックは既に獲得されたものでなければなりませんが、し"
"かし同じスレッドによって獲得されたものである必要はありません。"

#: ../../library/thread.rst:139
msgid ""
"Return the status of the lock: ``True`` if it has been acquired by some "
"thread, ``False`` if not."
msgstr ""
"ロックの状態を返します: 同じスレッドによって獲得されたものなら ``True`` 、違"
"うのなら ``False`` を返します。"

#: ../../library/thread.rst:142
msgid ""
"In addition to these methods, lock objects can also be used via the :keyword:"
"`with` statement, e.g.::"
msgstr ""
"これらのメソッドに加えて、ロックオブジェクトは :keyword:`with` 文を通じて以下"
"の例のように使うこともできます。 ::"

#: ../../library/thread.rst:152
msgid "**Caveats:**"
msgstr "**警告:**"

#: ../../library/thread.rst:156
msgid ""
"Threads interact strangely with interrupts: the :exc:`KeyboardInterrupt` "
"exception will be received by an arbitrary thread.  (When the :mod:`signal` "
"module is available, interrupts always go to the main thread.)"
msgstr ""
"スレッドは割り込みと奇妙な相互作用をします: :exc:`KeyboardInterrupt` 例外は任"
"意のスレッドによって受け取られます。 (:mod:`signal` モジュールが利用可能なと"
"き、割り込みは常にメインスレッドへ行きます。)"

#: ../../library/thread.rst:160
msgid ""
"Calling :func:`sys.exit` or raising the :exc:`SystemExit` exception is "
"equivalent to calling :func:`thread.exit`."
msgstr ""
":func:`sys.exit` を呼び出す、あるいは :exc:`SystemExit` 例外を送出すること"
"は、 :func:`thread.exit` を呼び出すことと同じです。"

#: ../../library/thread.rst:163
msgid ""
"It is not possible to interrupt the :meth:`acquire` method on a lock --- "
"the :exc:`KeyboardInterrupt` exception will happen after the lock has been "
"acquired."
msgstr ""
"ロックの :meth:`acquire` メソッドに割り込むことはできません --- :exc:"
"`KeyboardInterrupt` 例外は、ロックが獲得された後に発生します。"

#: ../../library/thread.rst:168
msgid ""
"When the main thread exits, it is system defined whether the other threads "
"survive.  On SGI IRIX using the native thread implementation, they survive.  "
"On most other systems, they are killed without executing :keyword:`try` ... :"
"keyword:`finally` clauses or executing object destructors."
msgstr ""
"メインスレッドが終了したとき、他のスレッドが生き残るかどうかは、システムに依"
"存します。ネイティブスレッド実装を使う SGI, IRIX では生き残ります。その他の多"
"くのシステムでは、 :keyword:`try` ... :keyword:`finally` 節や、オブジェクトデ"
"ストラクタを実行せずに終了されます。"

#: ../../library/thread.rst:173
msgid ""
"When the main thread exits, it does not do any of its usual cleanup (except "
"that :keyword:`try` ... :keyword:`finally` clauses are honored), and the "
"standard I/O files are not flushed."
msgstr ""
"メインスレッドが終了したとき、それの通常のクリーンアップは行なわれず、 (:"
"keyword:`try` ... :keyword:`finally` 節が尊重されることは除きます)、標準 I/O "
"ファイルはフラッシュされません。"
