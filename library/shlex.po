# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/shlex.rst:2
msgid ":mod:`shlex` --- Simple lexical analysis"
msgstr ":mod:`shlex` --- 単純な字句解析"

#: ../../library/shlex.rst:14
msgid "**Source code:** :source:`Lib/shlex.py`"
msgstr "**ソースコード:** :source:`Lib/shlex.py`"

#: ../../library/shlex.rst:19
msgid ""
"The :class:`~shlex.shlex` class makes it easy to write lexical analyzers for "
"simple syntaxes resembling that of the Unix shell.  This will often be "
"useful for writing minilanguages, (for example, in run control files for "
"Python applications) or for parsing quoted strings."
msgstr ""
":class:`~shlex.shlex` クラスは Unix シェルを思わせる単純な構文に対する字句解"
"析器を簡単に書けるようにします。このクラスはしばしば、 Python アプリケーショ"
"ンのための実行制御ファイルのような小規模言語を書く上で便利です。"

#: ../../library/shlex.rst:24
msgid "Prior to Python 2.7.3, this module did not support Unicode input."
msgstr ""
"Python 2.7.3 以前はこのモジュールは今のところ Unicode 入力をサポートしていま"
"せんでした。"

#: ../../library/shlex.rst:26
msgid "The :mod:`shlex` module defines the following functions:"
msgstr ":mod:`shlex` モジュールは以下の関数を定義します。"

#: ../../library/shlex.rst:31
msgid ""
"Split the string *s* using shell-like syntax. If *comments* is :const:"
"`False` (the default), the parsing of comments in the given string will be "
"disabled (setting the :attr:`~shlex.commenters` attribute of the :class:"
"`~shlex.shlex` instance to the empty string).  This function operates in "
"POSIX mode by default, but uses non-POSIX mode if the *posix* argument is "
"false."
msgstr ""
"シェル類似の文法を使って、文字列 *s* を分割します。 *comments* が :const:"
"`False` (デフォルト値) の場合、受理した文字列内のコメントを解析しません (:"
"class:`~shlex.shlex` インスタンスの :attr:`~shlex.commenters` メンバの値を空"
"文字列にします)。この関数はデフォルトでは POSIX モードで動作し、 *posix* 引数"
"が false の場合は non-POSIX モードで動作します。"

#: ../../library/shlex.rst:40
msgid "Added the *posix* parameter."
msgstr "*posix* パラメータを追加。"

#: ../../library/shlex.rst:45
msgid ""
"Since the :func:`split` function instantiates a :class:`~shlex.shlex` "
"instance, passing ``None`` for *s* will read the string to split from "
"standard input."
msgstr ""
":func:`split` 関数は :class:`~shlex.shlex` クラスのインスタンスを利用するの"
"で、 *s* に ``None`` を渡すと標準入力から分割する文字列を読み込みます。"

#: ../../library/shlex.rst:49
msgid "The :mod:`shlex` module defines the following class:"
msgstr ":mod:`shlex` モジュールは以下のクラスを定義します。"

#: ../../library/shlex.rst:54
msgid ""
"A :class:`~shlex.shlex` instance or subclass instance is a lexical analyzer "
"object.  The initialization argument, if present, specifies where to read "
"characters from. It must be a file-/stream-like object with :meth:`~io."
"TextIOBase.read` and :meth:`~io.TextIOBase.readline` methods, or a string "
"(strings are accepted since Python 2.3).  If no argument is given, input "
"will be taken from ``sys.stdin``.  The second optional argument is a "
"filename string, which sets the initial value of the :attr:`~shlex.infile` "
"attribute.  If the *instream* argument is omitted or equal to ``sys.stdin``, "
"this second argument defaults to \"stdin\".  The *posix* argument was "
"introduced in Python 2.3, and defines the operational mode.  When *posix* is "
"not true (default), the :class:`~shlex.shlex` instance will operate in "
"compatibility mode.  When operating in POSIX mode, :class:`~shlex.shlex` "
"will try to be as close as possible to the POSIX shell parsing rules."
msgstr ""
":class:`~shlex.shlex` クラスとサブクラスのインスタンスは、字句解析器オブジェ"
"クトです。初期化引数を与えると、どこから文字を読み込むかを指定できます。指定"
"先は :meth:`~io.TextIOBase.read` メソッドと :meth:`~io.TextIOBase.readline` "
"メソッドを持つファイル/ストリーム類似オブジェクトか、文字列でなくてはいけませ"
"ん（文字列が受理されるようになったのは Python 2.3 以降）。引数が与えられなけ"
"れば、 ``sys.stdin`` から入力を受け付けます。第 2 引数は、ファイル名を表す文"
"字列で、 :attr:`~shlex.infile` メンバの値の初期値を決定します。 *instream* 引"
"数が省略された場合や、この値が ``sys.stdin`` である場合、第2引数のデフォルト"
"値は \"stdin\" になります。 *posix* 引数は Python 2.3 で導入されました。これ"
"は動作モードを定義します。 *posix* が真でない場合（デフォルト）、 :class:"
"`~shlex.shlex` インスタンスは互換モードで動作します。 POSIX モードで動作"
"中、 :class:`~shlex.shlex` は、できる限り POSIX シェルの解析規則に似せようと"
"します。"

#: ../../library/shlex.rst:71
msgid "Module :mod:`ConfigParser`"
msgstr ":mod:`ConfigParser` モジュール"

#: ../../library/shlex.rst:72
msgid ""
"Parser for configuration files similar to the Windows :file:`.ini` files."
msgstr "Windows :file:`.ini` ファイルに似た設定ファイルのパーザ。"

#: ../../library/shlex.rst:78
msgid "shlex Objects"
msgstr "shlex オブジェクト"

#: ../../library/shlex.rst:80
msgid "A :class:`~shlex.shlex` instance has the following methods:"
msgstr ":class:`~shlex.shlex` インスタンスは以下のメソッドを持っています:"

#: ../../library/shlex.rst:85
msgid ""
"Return a token.  If tokens have been stacked using :meth:`push_token`, pop a "
"token off the stack.  Otherwise, read one from the input stream.  If reading "
"encounters an immediate end-of-file, :attr:`eof` is returned (the empty "
"string (``''``) in non-POSIX mode, and ``None`` in POSIX mode)."
msgstr ""
"トークンを一つ返します。トークンが :meth:`push_token` で使ってスタックに積ま"
"れていた場合、トークンをスタックからポップします。そうでない場合、トークンを"
"一つ入力ストリームから読み出します。読み出し即時にファイル終了子に遭遇した場"
"合、 :attr:`eof` (非 POSIX モードでは空文字列 (``''``)、POSIX モードでは "
"``None``) が返されます。"

#: ../../library/shlex.rst:93
msgid "Push the argument onto the token stack."
msgstr "トークンスタックに引数文字列をスタックします。"

#: ../../library/shlex.rst:98
msgid ""
"Read a raw token.  Ignore the pushback stack, and do not interpret source "
"requests.  (This is not ordinarily a useful entry point, and is documented "
"here only for the sake of completeness.)"
msgstr ""
"生 (raw) のトークンを読み出します。プッシュバックスタックを無視し、かつソース"
"リクエストを解釈しません (通常これは便利なエントリポイントではありません。完"
"全性のためにここで記述されています)。"

#: ../../library/shlex.rst:105
msgid ""
"When :class:`~shlex.shlex` detects a source request (see :attr:`source` "
"below) this method is given the following token as argument, and expected to "
"return a tuple consisting of a filename and an open file-like object."
msgstr ""
":class:`~shlex.shlex` がソースリクエスト (下の :attr:`source` を参照してくだ"
"さい) を検出した際、このメソッドはその後に続くトークンを引数として渡され、"
"ファイル名と開かれたファイル類似オブジェクトからなるタプルを返すとされていま"
"す。"

#: ../../library/shlex.rst:109
msgid ""
"Normally, this method first strips any quotes off the argument.  If the "
"result is an absolute pathname, or there was no previous source request in "
"effect, or the previous source was a stream (such as ``sys.stdin``), the "
"result is left alone.  Otherwise, if the result is a relative pathname, the "
"directory part of the name of the file immediately before it on the source "
"inclusion stack is prepended (this behavior is like the way the C "
"preprocessor handles ``#include \"file.h\"``)."
msgstr ""
"通常、このメソッドはまず引数から何らかのクオートを剥ぎ取ります。処理後の引数"
"が絶対パス名であった場合か、以前に有効になったソースリクエストが存在しない場"
"合か、以前のソースが (``sys.stdin`` のような) ストリームであった場合、この結"
"果はそのままにされます。そうでない場合で、処理後の引数が相対パス名の場合、"
"ソースインクルードスタックにある直前のファイル名からディレクトリ部分が取り出"
"され、相対パスの前の部分に追加されます (この動作は C 言語プリプロセッサにおけ"
"る ``#include \"file.h\"`` の扱いと同様です) 。"

#: ../../library/shlex.rst:117
msgid ""
"The result of the manipulations is treated as a filename, and returned as "
"the first component of the tuple, with :func:`open` called on it to yield "
"the second component. (Note: this is the reverse of the order of arguments "
"in instance initialization!)"
msgstr ""
"これらの操作の結果はファイル名として扱われ、タプルの最初の要素として返されま"
"す。同時にこのファイル名で :func:`open` を呼び出した結果が二つ目の要素になり"
"ます (注意: インスタンス初期化のときとは引数の並びが逆になっています！)"

#: ../../library/shlex.rst:122
msgid ""
"This hook is exposed so that you can use it to implement directory search "
"paths, addition of file extensions, and other namespace hacks. There is no "
"corresponding 'close' hook, but a shlex instance will call the :meth:`~io."
"IOBase.close` method of the sourced input stream when it returns EOF."
msgstr ""
"このフックはディレクトリサーチパスや、ファイル拡張子の追加、その他の名前空間"
"に関するハックを実装できるようにするために公開されています。 'close' フックに"
"対応するものはありませんが、shlex インスタンスはソースリクエストされている入"
"力ストリームが EOF を返した時には :meth:`~io.IOBase.close` を呼び出します。"

#: ../../library/shlex.rst:128
msgid ""
"For more explicit control of source stacking, use the :meth:`push_source` "
"and :meth:`pop_source` methods."
msgstr ""
"ソーススタックをより明示的に操作するには、 :meth:`push_source` および :meth:"
"`pop_source` メソッドを使ってください。"

#: ../../library/shlex.rst:134
msgid ""
"Push an input source stream onto the input stack.  If the filename argument "
"is specified it will later be available for use in error messages.  This is "
"the same method used internally by the :meth:`sourcehook` method."
msgstr ""
"入力ソースストリームを入力スタックにプッシュします。ファイル名引数が指定され"
"た場合、以後のエラーメッセージ中で利用することができます。 :meth:"
"`sourcehook` メソッドが内部で使用しているのと同じメソッドです。"

#: ../../library/shlex.rst:143
msgid ""
"Pop the last-pushed input source from the input stack. This is the same "
"method used internally when the lexer reaches EOF on a stacked input stream."
msgstr ""
"最後にプッシュされた入力ソースを入力スタックからポップします。字句解析器がス"
"タック上の入力ストリームの EOF に到達した際に利用するメソッドと同じです。"

#: ../../library/shlex.rst:151
msgid ""
"This method generates an error message leader in the format of a Unix C "
"compiler error label; the format is ``'\"%s\", line %d: '``, where the "
"``%s`` is replaced with the name of the current source file and the ``%d`` "
"with the current input line number (the optional arguments can be used to "
"override these)."
msgstr ""
"このメソッドはエラーメッセージの論述部分を Unix C コンパイラエラーラベルの形"
"式で生成します; この書式は ``'\"%s\", line %d: '`` で、 ``%s`` は現在のソース"
"ファイル名で置き換えられ、 ``%d`` は現在の入力行番号で置き換えられます (オプ"
"ションの引数を使ってこれらを上書きすることもできます)。"

#: ../../library/shlex.rst:156
msgid ""
"This convenience is provided to encourage :mod:`shlex` users to generate "
"error messages in the standard, parseable format understood by Emacs and "
"other Unix tools."
msgstr ""
"このやり方は、 :mod:`shlex` のユーザに対して、Emacs やその他の Unix ツール群"
"が解釈できる一般的な書式でのメッセージを生成することを推奨するために提供され"
"ています。"

#: ../../library/shlex.rst:160
msgid ""
"Instances of :class:`~shlex.shlex` subclasses have some public instance "
"variables which either control lexical analysis or can be used for debugging:"
msgstr ""
":class:`~shlex.shlex` サブクラスのインスタンスは、字句解析を制御したり、デ"
"バッグに使えるような public なインスタンス変数を持っています:"

#: ../../library/shlex.rst:166
msgid ""
"The string of characters that are recognized as comment beginners. All "
"characters from the comment beginner to end of line are ignored. Includes "
"just ``'#'`` by default."
msgstr ""
"コメントの開始として認識される文字列です。コメントの開始から行末までのすべて"
"のキャラクタ文字は無視されます。標準では単に ``'#'`` が入っています。"

#: ../../library/shlex.rst:173
msgid ""
"The string of characters that will accumulate into multi-character tokens.  "
"By default, includes all ASCII alphanumerics and underscore."
msgstr ""
"複数文字からなるトークンを構成するためにバッファに蓄積していくような文字から"
"なる文字列です。標準では、全ての ASCII 英数字およびアンダースコアが入っていま"
"す。"

#: ../../library/shlex.rst:179
msgid ""
"Characters that will be considered whitespace and skipped.  Whitespace "
"bounds tokens.  By default, includes space, tab, linefeed and carriage-"
"return."
msgstr ""
"空白と見なされ、読み飛ばされる文字群です。空白はトークンの境界を作ります。標"
"準では、スペース、タブ、改行 (linefeed) および復帰 (carriage-return) が入って"
"います。"

#: ../../library/shlex.rst:185
msgid ""
"Characters that will be considered as escape. This will be only used in "
"POSIX mode, and includes just ``'\\'`` by default."
msgstr ""
"エスケープ文字と見なされる文字群です。これは POSIX モードでのみ使われ、デフォ"
"ルトでは ``'\\'`` だけが入っています。"

#: ../../library/shlex.rst:193
msgid ""
"Characters that will be considered string quotes.  The token accumulates "
"until the same quote is encountered again (thus, different quote types "
"protect each other as in the shell.)  By default, includes ASCII single and "
"double quotes."
msgstr ""
"文字列引用符と見なされる文字群です。トークンを構成する際、同じクオートが再び"
"出現するまで文字をバッファに蓄積します (すなわち、異なるクオート形式はシェル"
"中で互いに保護し合う関係にあります)。標準では、ASCII 単引用符および二重引用符"
"が入っています。"

#: ../../library/shlex.rst:200
msgid ""
"Characters in :attr:`quotes` that will interpret escape characters defined "
"in :attr:`escape`.  This is only used in POSIX mode, and includes just "
"``'\"'`` by default."
msgstr ""
":attr:`quotes` のうち、 :attr:`escape` で定義されたエスケープ文字を解釈する文"
"字群です。これは POSIX モードでのみ使われ、デフォルトでは ``'\"'`` だけが入っ"
"ています。"

#: ../../library/shlex.rst:209
msgid ""
"If ``True``, tokens will only be split in whitespaces. This is useful, for "
"example, for parsing command lines with :class:`~shlex.shlex`, getting "
"tokens in a similar way to shell arguments."
msgstr ""
"この値が ``True`` であれば、トークンは空白文字でのみで分割されます。たとえ"
"ば :class:`~shlex.shlex` がシェル引数と同じ方法で、コマンドラインを解析するの"
"に便利です。"

#: ../../library/shlex.rst:218
msgid ""
"The name of the current input file, as initially set at class instantiation "
"time or stacked by later source requests.  It may be useful to examine this "
"when constructing error messages."
msgstr ""
"現在の入力ファイル名です。クラスのインスタンス化時に初期設定されるか、その後"
"のソースリクエストでスタックされます。エラーメッセージを構成する際にこの値を"
"調べると便利なことがあります。"

#: ../../library/shlex.rst:225
msgid ""
"The input stream from which this :class:`~shlex.shlex` instance is reading "
"characters."
msgstr ""
":class:`~shlex.shlex` インスタンスが文字を読み出している入力ストリームです。"

#: ../../library/shlex.rst:231
msgid ""
"This attribute is ``None`` by default.  If you assign a string to it, that "
"string will be recognized as a lexical-level inclusion request similar to "
"the ``source`` keyword in various shells.  That is, the immediately "
"following token will be opened as a filename and input will be taken from "
"that stream until EOF, at which point the :meth:`~io.IOBase.close` method of "
"that stream will be called and the input source will again become the "
"original input stream.  Source requests may be stacked any number of levels "
"deep."
msgstr ""
"このメンバ変数は標準で :const:`None` を取ります。この値に文字列を代入すると、"
"その文字列は多くのシェルにおける ``source`` キーワードに似た、字句解析レベル"
"でのインクルード要求として認識されます。すなわち、その直後に現れるトークンを"
"ファイル名として新たなストリームを開き、そのストリームを入力として、EOF に到"
"達するまで読み込まれます。新たなストリームの EOF に到達した時点で :meth:`~io."
"IOBase.close` が呼び出され、入力は元の入力ストリームに戻されます。ソースリク"
"エストは任意のレベルの深さまでスタックしてかまいません。"

#: ../../library/shlex.rst:243
msgid ""
"If this attribute is numeric and ``1`` or more, a :class:`~shlex.shlex` "
"instance will print verbose progress output on its behavior.  If you need to "
"use this, you can read the module source code to learn the details."
msgstr ""
"このメンバ変数が数値で、かつ ``1`` またはそれ以上の値の場合、 :class:`~shlex."
"shlex` インスタンスは動作に関する冗長な進捗報告を出力します。この出力を使いた"
"いなら、モジュールのソースコードを読めば詳細を学ぶことができます。"

#: ../../library/shlex.rst:250
msgid "Source line number (count of newlines seen so far plus one)."
msgstr "ソース行番号 (遭遇した改行の数に 1 を加えたもの) です。"

#: ../../library/shlex.rst:255
msgid ""
"The token buffer.  It may be useful to examine this when catching exceptions."
msgstr ""
"トークンバッファです。例外を捕捉した際にこの値を調べると便利なことがありま"
"す。"

#: ../../library/shlex.rst:260
msgid ""
"Token used to determine end of file. This will be set to the empty string "
"(``''``), in non-POSIX mode, and to ``None`` in POSIX mode."
msgstr ""
"ファイルの終端を決定するのに使われるトークンです。非 POSIX モードでは空文字"
"列 (``''``) 、POSIX モードでは ``None`` が入ります。"

#: ../../library/shlex.rst:269
msgid "Parsing Rules"
msgstr "解析規則"

#: ../../library/shlex.rst:271
msgid ""
"When operating in non-POSIX mode, :class:`~shlex.shlex` will try to obey to "
"the following rules."
msgstr ""
"非 POSIX モードで動作中の :class:`~shlex.shlex` は以下の規則に従おうとしま"
"す。"

#: ../../library/shlex.rst:274
msgid ""
"Quote characters are not recognized within words (``Do\"Not\"Separate`` is "
"parsed as the single word ``Do\"Not\"Separate``);"
msgstr ""
"ワード内の引用符を認識しない (``Do\"Not\"Separate`` は単一ワード "
"``Do\"Not\"Separate`` として解析されます)"

#: ../../library/shlex.rst:277
msgid "Escape characters are not recognized;"
msgstr "エスケープ文字を認識しない"

#: ../../library/shlex.rst:279
msgid ""
"Enclosing characters in quotes preserve the literal value of all characters "
"within the quotes;"
msgstr "引用符で囲まれた文字列は、引用符内の全ての文字リテラルを保持する"

#: ../../library/shlex.rst:282
msgid ""
"Closing quotes separate words (``\"Do\"Separate`` is parsed as ``\"Do\"`` "
"and ``Separate``);"
msgstr ""
"閉じ引用符でワードを区切る (``\"Do\"Separate`` は、 ``\"Do\"`` と "
"``Separate`` であると解析されます)"

#: ../../library/shlex.rst:285
msgid ""
"If :attr:`~shlex.whitespace_split` is ``False``, any character not declared "
"to be a word character, whitespace, or a quote will be returned as a single-"
"character token. If it is ``True``, :class:`~shlex.shlex` will only split "
"words in whitespaces;"
msgstr ""
":attr:`~shlex.whitespace_split` が ``False`` の場合、wordchar、 whitespace ま"
"たは quote として宣言されていない全ての文字を、単一の文字トークンとして返"
"す。 ``True`` の場合、 :class:`~shlex.shlex` は空白文字でのみ単語を区切る。"

#: ../../library/shlex.rst:290
msgid "EOF is signaled with an empty string (``''``);"
msgstr "空文字列 (``''``) で EOF を送出する"

#: ../../library/shlex.rst:292
msgid "It's not possible to parse empty strings, even if quoted."
msgstr "引用符に囲んであっても、空文字列を解析しない"

#: ../../library/shlex.rst:294
msgid ""
"When operating in POSIX mode, :class:`~shlex.shlex` will try to obey to the "
"following parsing rules."
msgstr ""
"POSIX モードで動作中の :class:`~shlex.shlex` は以下の解析規則に従おうとしま"
"す。"

#: ../../library/shlex.rst:297
msgid ""
"Quotes are stripped out, and do not separate words "
"(``\"Do\"Not\"Separate\"`` is parsed as the single word ``DoNotSeparate``);"
msgstr ""
"引用符を取り除き、引用符で単語を分解しない (``\"Do\"Not\"Separate\"`` は単一"
"ワード ``DoNotSeparate`` として解析されます)"

#: ../../library/shlex.rst:300
msgid ""
"Non-quoted escape characters (e.g. ``'\\'``) preserve the literal value of "
"the next character that follows;"
msgstr ""
"引用符で囲まれないエスケープ文字群 (``'\\'`` など) は直後に続く文字のリテラル"
"値を保持する"

#: ../../library/shlex.rst:303
msgid ""
"Enclosing characters in quotes which are not part of :attr:`~shlex."
"escapedquotes` (e.g. ``\"'\"``) preserve the literal value of all characters "
"within the quotes;"
msgstr ""
":attr:`~shlex.escapedquotes` でない引用符文字 (``\"'\"`` など) で囲まれている"
"全ての文字のリテラル値を保持する"

#: ../../library/shlex.rst:307
msgid ""
"Enclosing characters in quotes which are part of :attr:`~shlex."
"escapedquotes` (e.g. ``'\"'``) preserves the literal value of all characters "
"within the quotes, with the exception of the characters mentioned in :attr:"
"`~shlex.escape`.  The escape characters retain its special meaning only when "
"followed by the quote in use, or the escape character itself. Otherwise the "
"escape character will be considered a normal character."
msgstr ""
"引用符に囲まれた :attr:`~shlex.escapedquotes` に含まれる文字 (``'\"'`` など) "
"は、 :attr:`~shlex.escape` に含まれる文字を除き、全ての文字のリテラル値を保持"
"する。エスケープ文字群は使用中の引用符、または、そのエスケープ文字自身が直後"
"にある場合のみ、特殊な機能を保持する。他の場合にはエスケープ文字は普通の文字"
"とみなされる。"

#: ../../library/shlex.rst:315
msgid "EOF is signaled with a :const:`None` value;"
msgstr ":const:`None` で EOF を送出する"

#: ../../library/shlex.rst:317
msgid "Quoted empty strings (``''``) are allowed;"
msgstr "引用符に囲まれた空文字列 (``''``) を許す"
