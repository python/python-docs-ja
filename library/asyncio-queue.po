# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Takeshi Nakazato, 2022
# Arihiro TAKASE, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:55+0000\n"
"Last-Translator: Arihiro TAKASE, 2023\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-queue.rst:7
msgid "Queues"
msgstr "キュー"

#: ../../library/asyncio-queue.rst:9
msgid "**Source code:** :source:`Lib/asyncio/queues.py`"
msgstr "**ソースコード:** :source:`Lib/asyncio/queues.py`"

#: ../../library/asyncio-queue.rst:13
msgid ""
"asyncio queues are designed to be similar to classes of the :mod:`queue` "
"module.  Although asyncio queues are not thread-safe, they are designed to "
"be used specifically in async/await code."
msgstr ""
"asyncio キューは :mod:`queue` モジュールのクラス群と同じ形になるように設計さ"
"れています。 asyncio キューはスレッドセーフではありませんが、それらは async/"
"await コードから使われるために特別に設計されています。"

#: ../../library/asyncio-queue.rst:17
msgid ""
"Note that methods of asyncio queues don't have a *timeout* parameter; use :"
"func:`asyncio.wait_for` function to do queue operations with a timeout."
msgstr ""
"asyncio キューのメソッドは *timeout* パラメータを持たないことに注意してくださ"
"い; タイムアウトを伴うキューを使った処理を行うには :func:`asyncio.wait_for` "
"関数を使ってください。"

#: ../../library/asyncio-queue.rst:21
msgid "See also the `Examples`_ section below."
msgstr "下記の `使用例`_ 節も参照してください。"

#: ../../library/asyncio-queue.rst:24
msgid "Queue"
msgstr "Queue"

#: ../../library/asyncio-queue.rst:28
msgid "A first in, first out (FIFO) queue."
msgstr "先入れ先出し (FIFO) キューです。"

#: ../../library/asyncio-queue.rst:30
msgid ""
"If *maxsize* is less than or equal to zero, the queue size is infinite.  If "
"it is an integer greater than ``0``, then ``await put()`` blocks when the "
"queue reaches *maxsize* until an item is removed by :meth:`get`."
msgstr ""
"*maxsize* がゼロ以下の場合、キューは無限長になります。 ``0`` より大きい整数の"
"場合、キューが *maxsize* に達すると ``await put()`` は :meth:`get` によって"
"キューの要素が除去されるまでブロックします。"

#: ../../library/asyncio-queue.rst:35
msgid ""
"Unlike the standard library threading :mod:`queue`, the size of the queue is "
"always known and can be returned by calling the :meth:`qsize` method."
msgstr ""
"標準ライブラリにおけるスレッドベースの :mod:`queue` モジュールと異なり、"
"キューのサイズは常に既知であり、 :meth:`qsize` メソッドを呼び出すことによって"
"取得することができます。"

#: ../../library/asyncio-queue.rst:39
msgid "Removed the *loop* parameter."
msgstr "*loop* パラメータが削除されました。"

#: ../../library/asyncio-queue.rst:43
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""
"このクラスは :ref:`スレッド安全ではありません <asyncio-multithreading>`。"

#: ../../library/asyncio-queue.rst:47
msgid "Number of items allowed in the queue."
msgstr "キューに追加できるアイテム数です。"

#: ../../library/asyncio-queue.rst:51
msgid "Return ``True`` if the queue is empty, ``False`` otherwise."
msgstr "キューが空ならば ``True`` を、そうでなければ ``False`` を返します。"

#: ../../library/asyncio-queue.rst:55
msgid "Return ``True`` if there are :attr:`maxsize` items in the queue."
msgstr "キューに要素が :attr:`maxsize` 個あれば ``True`` を返します。"

#: ../../library/asyncio-queue.rst:57
msgid ""
"If the queue was initialized with ``maxsize=0`` (the default), then :meth:"
"`full` never returns ``True``."
msgstr ""

#: ../../library/asyncio-queue.rst:62
msgid ""
"Remove and return an item from the queue. If queue is empty, wait until an "
"item is available."
msgstr ""
"キューから要素を削除して返します。キューが空の場合項目が利用可能になるまで待"
"機します。"

#: ../../library/asyncio-queue.rst:65
msgid ""
"Raises :exc:`QueueShutDown` if the queue has been shut down and is empty, or "
"if the queue has been shut down immediately."
msgstr ""

#: ../../library/asyncio-queue.rst:70
msgid ""
"Return an item if one is immediately available, else raise :exc:`QueueEmpty`."
msgstr ""
"直ちに利用できるアイテムがあるときはそれを、そうでなければ :exc:`QueueEmpty` "
"を返します。"

#: ../../library/asyncio-queue.rst:75
msgid "Block until all items in the queue have been received and processed."
msgstr "キューにある全ての要素が取得され、処理されるまでブロックします。"

#: ../../library/asyncio-queue.rst:77
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue. The count goes down whenever a consumer coroutine calls :meth:"
"`task_done` to indicate that the item was retrieved and all work on it is "
"complete.  When the count of unfinished tasks drops to zero, :meth:`join` "
"unblocks."
msgstr ""
"未完了のタスクのカウント値は、キューにアイテムが追加されるときは常に加算さ"
"れ、キューの要素を消費するコルーチンが要素を取り出し、処理を完了したことを通"
"知するために :meth:`task_done` を呼び出すと減算されます。未完了のタスクのカウ"
"ント値がゼロになると、 :meth:`join` のブロックは解除されます。"

#: ../../library/asyncio-queue.rst:85
msgid ""
"Put an item into the queue. If the queue is full, wait until a free slot is "
"available before adding the item."
msgstr ""
"要素をキューに入力します。キューが満杯の場合、要素を追加する前に空きスロット"
"が利用できるようになるまで待機します。"

#: ../../library/asyncio-queue.rst:88
msgid "Raises :exc:`QueueShutDown` if the queue has been shut down."
msgstr ""

#: ../../library/asyncio-queue.rst:92
msgid "Put an item into the queue without blocking."
msgstr "ブロックせずにアイテムをキューに追加します。"

#: ../../library/asyncio-queue.rst:94
msgid "If no free slot is immediately available, raise :exc:`QueueFull`."
msgstr "直ちに利用できるスロットがない場合、:exc:`QueueFull` を送出します。"

#: ../../library/asyncio-queue.rst:98
msgid "Return the number of items in the queue."
msgstr "キュー内の要素数を返します。"

#: ../../library/asyncio-queue.rst:102
msgid ""
"Shut down the queue, making :meth:`~Queue.get` and :meth:`~Queue.put` raise :"
"exc:`QueueShutDown`."
msgstr ""

#: ../../library/asyncio-queue.rst:105
msgid ""
"By default, :meth:`~Queue.get` on a shut down queue will only raise once the "
"queue is empty. Set *immediate* to true to make :meth:`~Queue.get` raise "
"immediately instead."
msgstr ""

#: ../../library/asyncio-queue.rst:109
msgid ""
"All blocked callers of :meth:`~Queue.put` and :meth:`~Queue.get` will be "
"unblocked. If *immediate* is true, a task will be marked as done for each "
"remaining item in the queue, which may unblock callers of :meth:`~Queue."
"join`."
msgstr ""

#: ../../library/asyncio-queue.rst:118
msgid "Indicate that a formerly enqueued task is complete."
msgstr "キューに入っていたタスクが完了したことを示します。"

#: ../../library/asyncio-queue.rst:120
msgid ""
"Used by queue consumers. For each :meth:`~Queue.get` used to fetch a task, a "
"subsequent call to :meth:`task_done` tells the queue that the processing on "
"the task is complete."
msgstr ""
"キューコンシューマーによって使用されます。タスクの取得に :meth:`~Queue.get` "
"を使用し、その後の :meth:`task_done` の呼び出しでタスクの処理が完了したことを"
"キューに通知します。"

#: ../../library/asyncio-queue.rst:124
msgid ""
"If a :meth:`join` is currently blocking, it will resume when all items have "
"been processed (meaning that a :meth:`task_done` call was received for every "
"item that had been :meth:`~Queue.put` into the queue)."
msgstr ""
":meth:`join` が現在ブロック中だった場合、全アイテムが処理されたとき (:meth:"
"`~Queue.put` でキューに追加された全アイテムの :meth:`task_done` の呼び出しを"
"受信したとき) に再開します。"

#: ../../library/asyncio-queue.rst:129
msgid ""
"``shutdown(immediate=True)`` calls :meth:`task_done` for each remaining item "
"in the queue."
msgstr ""

#: ../../library/asyncio-queue.rst:132
msgid ""
"Raises :exc:`ValueError` if called more times than there were items placed "
"in the queue."
msgstr ""
"キューに追加されているアイテム数以上の呼び出しが行われたときに :exc:"
"`ValueError` を送出します。"

#: ../../library/asyncio-queue.rst:137
msgid "Priority Queue"
msgstr "優先度付きのキュー"

#: ../../library/asyncio-queue.rst:141
msgid ""
"A variant of :class:`Queue`; retrieves entries in priority order (lowest "
"first)."
msgstr ""
":class:`Queue` の変種です; 優先順位にしたがって要素を取り出します (最低順位が"
"最初に取り出されます)。"

#: ../../library/asyncio-queue.rst:144
msgid "Entries are typically tuples of the form ``(priority_number, data)``."
msgstr "項目は典型的には ``(priority_number, data)`` 形式のタプルです。"

#: ../../library/asyncio-queue.rst:149
msgid "LIFO Queue"
msgstr "LIFO キュー"

#: ../../library/asyncio-queue.rst:153
msgid ""
"A variant of :class:`Queue` that retrieves most recently added entries first "
"(last in, first out)."
msgstr ""
":class:`Queue` の変種で、最後に追加された項目を最初に取り出します (後入れ先出"
"し、またはスタック)。"

#: ../../library/asyncio-queue.rst:158
msgid "Exceptions"
msgstr "例外"

#: ../../library/asyncio-queue.rst:162
msgid ""
"This exception is raised when the :meth:`~Queue.get_nowait` method is called "
"on an empty queue."
msgstr ""
"この例外は :meth:`~Queue.get_nowait` メソッドが空のキューに対して呼ばれたとき"
"に送出されます。"

#: ../../library/asyncio-queue.rst:168
msgid ""
"Exception raised when the :meth:`~Queue.put_nowait` method is called on a "
"queue that has reached its *maxsize*."
msgstr ""
"サイズが *maxsize* に達したキューに対して :meth:`~Queue.put_nowait` メソッド"
"が 呼ばれたときに送出される例外です。"

#: ../../library/asyncio-queue.rst:174
msgid ""
"Exception raised when :meth:`~Queue.put` or :meth:`~Queue.get` is called on "
"a queue which has been shut down."
msgstr ""

#: ../../library/asyncio-queue.rst:181
msgid "Examples"
msgstr "使用例"

#: ../../library/asyncio-queue.rst:185
msgid ""
"Queues can be used to distribute workload between several concurrent tasks::"
msgstr ""
"キューを使って、並行処理を行う複数のタスクにワークロードを分散させることがで"
"きます::"

#: ../../library/asyncio-queue.rst:188
msgid ""
"import asyncio\n"
"import random\n"
"import time\n"
"\n"
"\n"
"async def worker(name, queue):\n"
"    while True:\n"
"        # Get a \"work item\" out of the queue.\n"
"        sleep_for = await queue.get()\n"
"\n"
"        # Sleep for the \"sleep_for\" seconds.\n"
"        await asyncio.sleep(sleep_for)\n"
"\n"
"        # Notify the queue that the \"work item\" has been processed.\n"
"        queue.task_done()\n"
"\n"
"        print(f'{name} has slept for {sleep_for:.2f} seconds')\n"
"\n"
"\n"
"async def main():\n"
"    # Create a queue that we will use to store our \"workload\".\n"
"    queue = asyncio.Queue()\n"
"\n"
"    # Generate random timings and put them into the queue.\n"
"    total_sleep_time = 0\n"
"    for _ in range(20):\n"
"        sleep_for = random.uniform(0.05, 1.0)\n"
"        total_sleep_time += sleep_for\n"
"        queue.put_nowait(sleep_for)\n"
"\n"
"    # Create three worker tasks to process the queue concurrently.\n"
"    tasks = []\n"
"    for i in range(3):\n"
"        task = asyncio.create_task(worker(f'worker-{i}', queue))\n"
"        tasks.append(task)\n"
"\n"
"    # Wait until the queue is fully processed.\n"
"    started_at = time.monotonic()\n"
"    await queue.join()\n"
"    total_slept_for = time.monotonic() - started_at\n"
"\n"
"    # Cancel our worker tasks.\n"
"    for task in tasks:\n"
"        task.cancel()\n"
"    # Wait until all worker tasks are cancelled.\n"
"    await asyncio.gather(*tasks, return_exceptions=True)\n"
"\n"
"    print('====')\n"
"    print(f'3 workers slept in parallel for {total_slept_for:.2f} seconds')\n"
"    print(f'total expected sleep time: {total_sleep_time:.2f} seconds')\n"
"\n"
"\n"
"asyncio.run(main())"
msgstr ""
