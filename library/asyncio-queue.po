# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2018
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:26+0000\n"
"Last-Translator: tomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-queue.rst:4
msgid "Queues"
msgstr "キュー"

#: ../../library/asyncio-queue.rst:6
msgid "**Source code:** :source:`Lib/asyncio/queues.py`"
msgstr "**ソースコード:** :source:`Lib/asyncio/queues.py`"

#: ../../library/asyncio-queue.rst:8
msgid "Queues:"
msgstr "キュー:"

#: ../../library/asyncio-queue.rst:10
msgid ":class:`Queue`"
msgstr ":class:`Queue`"

#: ../../library/asyncio-queue.rst:11
msgid ":class:`PriorityQueue`"
msgstr ":class:`PriorityQueue`"

#: ../../library/asyncio-queue.rst:12
msgid ":class:`LifoQueue`"
msgstr ":class:`LifoQueue`"

#: ../../library/asyncio-queue.rst:14
msgid ""
"asyncio queue API was designed to be close to classes of the :mod:`queue` "
"module (:class:`~queue.Queue`, :class:`~queue.PriorityQueue`, :class:`~queue."
"LifoQueue`), but it has no *timeout* parameter. The :func:`asyncio.wait_for` "
"function can be used to cancel a task after a timeout."
msgstr ""
"asyncio queue API は :mod:`queue` モジュールのクラス (:class:`~queue."
"Queue`, :class:`~queue.PriorityQueue`, :class:`~queue.LifoQueue`) に近くなる"
"よう設計されましたが、 *timeout* 引数はありません。\n"
":func:`asyncio.wait_for` 関数を用いてタイムアオウト後にタスクをキャンセルする"
"ことが出来ます。"

#: ../../library/asyncio-queue.rst:20
msgid "Queue"
msgstr "Queue"

#: ../../library/asyncio-queue.rst:24
msgid "A queue, useful for coordinating producer and consumer coroutines."
msgstr "プロデューサーおよびコンシューマーコルーチンの連係に役立つキューです。"

#: ../../library/asyncio-queue.rst:26
msgid ""
"If *maxsize* is less than or equal to zero, the queue size is infinite. If "
"it is an integer greater than ``0``, then ``yield from put()`` will block "
"when the queue reaches *maxsize*, until an item is removed by :meth:`get`."
msgstr ""
"*maxsize* がゼロ以下であれば、キューの長さは無限になります。``0`` より大きい"
"整数の場合、キューの長さが *maxsize* に達すると ``yield from put()`` はアイテ"
"ムが :meth:`get` で除去されるまでブロックします。"

#: ../../library/asyncio-queue.rst:30
msgid ""
"Unlike the standard library :mod:`queue`, you can reliably know this Queue's "
"size with :meth:`qsize`, since your single-threaded asyncio application "
"won't be interrupted between calling :meth:`qsize` and doing an operation on "
"the Queue."
msgstr ""
"標準ライブラリの :mod:`queue` とは異なり、:meth:`qsize` で確実にキューの長さ"
"を確認できます。シングルスレッドの asyncio アプリケーションは :meth:`qsize` "
"の呼び出しと Queue に対する操作の間に割り込まれることはありません。"

#: ../../library/asyncio-queue.rst:35
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""
"このクラスは :ref:`スレッド安全ではありません <asyncio-multithreading>`。"

#: ../../library/asyncio-queue.rst:37
msgid "New :meth:`join` and :meth:`task_done` methods."
msgstr "新たなメソッド :meth:`join` ならびに :meth:`task_done`。"

#: ../../library/asyncio-queue.rst:42
msgid "Return ``True`` if the queue is empty, ``False`` otherwise."
msgstr "キューが空ならば ``True`` を、そうでなければ ``False`` を返します。"

#: ../../library/asyncio-queue.rst:46
msgid "Return ``True`` if there are :attr:`maxsize` items in the queue."
msgstr "キューに要素が :attr:`maxsize` 個あれば ``True`` を返します。"

#: ../../library/asyncio-queue.rst:50
msgid ""
"If the Queue was initialized with ``maxsize=0`` (the default), then :meth:"
"`full()` is never ``True``."
msgstr ""
"Queue が ``maxsize=0`` (デフォルト) で初期化された場合、:meth:`full()` が "
"``True`` を返すことはありません。"

#: ../../library/asyncio-queue.rst:55
msgid ""
"Remove and return an item from the queue. If queue is empty, wait until an "
"item is available."
msgstr ""
"キューから要素を削除して返します。キューが空の場合項目が利用可能になるまで待"
"機します。"

#: ../../library/asyncio-queue.rst:58 ../../library/asyncio-queue.rst:81
#: ../../library/asyncio-queue.rst:90
msgid "This method is a :ref:`coroutine <coroutine>`."
msgstr "このメソッドは :ref:`コルーチン <coroutine>` です。"

#: ../../library/asyncio-queue.rst:62
msgid "The :meth:`empty` method."
msgstr ":meth:`empty` メソッド。"

#: ../../library/asyncio-queue.rst:66
msgid "Remove and return an item from the queue."
msgstr "キューから要素を削除して返します。"

#: ../../library/asyncio-queue.rst:68
msgid ""
"Return an item if one is immediately available, else raise :exc:`QueueEmpty`."
msgstr ""
"直ちに利用できるアイテムがあるときはそれを、そうでなければ :exc:`QueueEmpty` "
"を返します。"

#: ../../library/asyncio-queue.rst:73
msgid "Block until all items in the queue have been gotten and processed."
msgstr ""
"キューにあるすべてのアイテムが取り出されて処理されるまでブロックします。"

#: ../../library/asyncio-queue.rst:75
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue. The count goes down whenever a consumer thread calls :meth:"
"`task_done` to indicate that the item was retrieved and all work on it is "
"complete.  When the count of unfinished tasks drops to zero, :meth:`join` "
"unblocks."
msgstr ""
"未完了のタスクのカウント値はキューにアイテムが追加されるときは常に加算され、"
"コンシューマースレッドが :meth:`task_done` を呼び出してアイテムの回収とその全"
"処理の完了が示されるときは常に減算されます。未完了のタスクのカウント値がゼロ"
"になった場合、:meth:`join` のブロックが解除されます。"

#: ../../library/asyncio-queue.rst:87
msgid ""
"Put an item into the queue. If the queue is full, wait until a free slot is "
"available before adding item."
msgstr ""
"要素をキューに入れます。キューがいっぱいの場合、要素を追加する前にスロットが"
"利用できるまで待機します。"

#: ../../library/asyncio-queue.rst:94
msgid "The :meth:`full` method."
msgstr ":meth:`full` メソッド。"

#: ../../library/asyncio-queue.rst:98
msgid "Put an item into the queue without blocking."
msgstr "ブロックせずにアイテムをキューに追加します。"

#: ../../library/asyncio-queue.rst:100
msgid "If no free slot is immediately available, raise :exc:`QueueFull`."
msgstr "直ちに利用できるスロットがない場合、:exc:`QueueFull` を送出します。"

#: ../../library/asyncio-queue.rst:104
msgid "Number of items in the queue."
msgstr "キュー内のアイテム数です。"

#: ../../library/asyncio-queue.rst:108
msgid "Indicate that a formerly enqueued task is complete."
msgstr "キューに入っていたタスクが完了したことを示します。"

#: ../../library/asyncio-queue.rst:110
msgid ""
"Used by queue consumers. For each :meth:`~Queue.get` used to fetch a task, a "
"subsequent call to :meth:`task_done` tells the queue that the processing on "
"the task is complete."
msgstr ""
"キューコンシューマーによって使用されます。タスクの取得に :meth:`~Queue.get` "
"を使用し、その後の :meth:`task_done` の呼び出しでタスクの処理が完了したことを"
"キューに通知します。"

#: ../../library/asyncio-queue.rst:114
msgid ""
"If a :meth:`join` is currently blocking, it will resume when all items have "
"been processed (meaning that a :meth:`task_done` call was received for every "
"item that had been :meth:`~Queue.put` into the queue)."
msgstr ""
":meth:`join` が現在ブロック中だった場合、全アイテムが処理されたとき (:meth:"
"`~Queue.put` でキューに追加された全アイテムの :meth:`task_done` の呼び出しを"
"受信したとき) に再開します。"

#: ../../library/asyncio-queue.rst:118
msgid ""
"Raises :exc:`ValueError` if called more times than there were items placed "
"in the queue."
msgstr ""
"キューに追加されているアイテム数以上の呼び出しが行われたときに :exc:"
"`ValueError` を送出します。"

#: ../../library/asyncio-queue.rst:125
msgid "Number of items allowed in the queue."
msgstr "キューに追加できるアイテム数です。"

#: ../../library/asyncio-queue.rst:129
msgid "PriorityQueue"
msgstr "PriorityQueue"

#: ../../library/asyncio-queue.rst:133
msgid ""
"A subclass of :class:`Queue`; retrieves entries in priority order (lowest "
"first)."
msgstr ""
":class:`Queue` のサブクラスです; 優先順位に従ってエントリを回収します (最低が"
"最初)。"

#: ../../library/asyncio-queue.rst:136
msgid "Entries are typically tuples of the form: (priority number, data)."
msgstr "エントリは、(優先順位, データ) 形式のタプルです。"

#: ../../library/asyncio-queue.rst:140
msgid "LifoQueue"
msgstr "LifoQueue"

#: ../../library/asyncio-queue.rst:144
msgid ""
"A subclass of :class:`Queue` that retrieves most recently added entries "
"first."
msgstr ""
":class:`Queue` のサブクラスです。エントリは最後に追加されたものから回収されま"
"す。"

#: ../../library/asyncio-queue.rst:149
msgid "Exceptions"
msgstr "例外"

#: ../../library/asyncio-queue.rst:153
msgid ""
"Exception raised when the :meth:`~Queue.get_nowait` method is called on a :"
"class:`Queue` object which is empty."
msgstr ""
":meth:`~Queue.get_nowait` メソッドが空の :class:`Queue` オブジェクトに対して"
"呼ばれたときに送出されます。"

#: ../../library/asyncio-queue.rst:159
msgid ""
"Exception raised when the :meth:`~Queue.put_nowait` method is called on a :"
"class:`Queue` object which is full."
msgstr ""
":meth:`~Queue.put_nowait` メソッドが full の :class:`Queue` オブジェクトに対"
"して呼ばれたときに送出されます。"
