# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2018
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:39+0000\n"
"Last-Translator: tomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-eventloops.rst:4
msgid "Event loops"
msgstr "イベントループ"

#: ../../library/asyncio-eventloops.rst:6
msgid "**Source code:** :source:`Lib/asyncio/events.py`"
msgstr "**ソースコード:** :source:`Lib/asyncio/events.py`"

#: ../../library/asyncio-eventloops.rst:9
msgid "Event loop functions"
msgstr "イベントループ関数"

#: ../../library/asyncio-eventloops.rst:11
msgid ""
"The following functions are convenient shortcuts to accessing the methods of "
"the global policy. Note that this provides access to the default policy, "
"unless an alternative policy was set by calling :func:"
"`set_event_loop_policy` earlier in the execution of the process."
msgstr ""
"以下の関数は、グローバルポリシーのメソッドにアクセスするための便利なショート"
"カットです。これらはデフォルトポリシーへのアクセス手段を提供するものであり、"
"プロセスの実行前に :func:`set_event_loop_policy` を呼び出して設定された代替ポ"
"リシーには適用できないことに注意してください。"

#: ../../library/asyncio-eventloops.rst:18
msgid "Equivalent to calling ``get_event_loop_policy().get_event_loop()``."
msgstr "``get_event_loop_policy().get_event_loop()`` の呼び出しと等価です。"

#: ../../library/asyncio-eventloops.rst:22
msgid "Equivalent to calling ``get_event_loop_policy().set_event_loop(loop)``."
msgstr ""
"``get_event_loop_policy().set_event_loop(loop)`` の呼び出しと等価です。"

#: ../../library/asyncio-eventloops.rst:26
msgid "Equivalent to calling ``get_event_loop_policy().new_event_loop()``."
msgstr "``get_event_loop_policy().new_event_loop()`` の呼び出しと等価です。"

#: ../../library/asyncio-eventloops.rst:32
msgid "Available event loops"
msgstr "利用可能なイベントループ"

#: ../../library/asyncio-eventloops.rst:34
msgid ""
"asyncio currently provides two implementations of event loops: :class:"
"`SelectorEventLoop` and :class:`ProactorEventLoop`."
msgstr ""
"asyncio は現在 2 種類の実装のイベントループ、:class:`SelectorEventLoop` と :"
"class:`ProactorEventLoop` を提供しています。"

#: ../../library/asyncio-eventloops.rst:39
msgid ""
"Event loop based on the :mod:`selectors` module. Subclass of :class:"
"`AbstractEventLoop`."
msgstr ""
":mod:`selectors` モジュールベースのイベントループで、:class:"
"`AbstractEventLoop` のサブクラスです。"

#: ../../library/asyncio-eventloops.rst:42
msgid "Use the most efficient selector available on the platform."
msgstr "プラットフォームで利用できる最も効率的なセレクターを使用します。"

#: ../../library/asyncio-eventloops.rst:44
msgid ""
"On Windows, only sockets are supported (ex: pipes are not supported): see "
"the `MSDN documentation of select <https://msdn.microsoft.com/en-us/library/"
"windows/desktop/ms740141%28v=vs.85%29.aspx>`_."
msgstr ""
"Windows ではソケットのみサポートされています (例えばパイプは未サポート): "
"`MSDN の select のドキュメント <https://msdn.microsoft.com/en-us/library/"
"windows/desktop/ms740141%28v=vs.85%29.aspx>`_ を参照してください。"

#: ../../library/asyncio-eventloops.rst:50
msgid ""
"Proactor event loop for Windows using \"I/O Completion Ports\" aka IOCP. "
"Subclass of :class:`AbstractEventLoop`."
msgstr ""
"\"I/O Completion Ports\" (IOCP) を使用した Windows 用のプロアクターイベント"
"ループで、:class:`AbstractEventLoop` のサブクラスです。"

#: ../../library/asyncio-eventloops.rst:53
msgid "Availability: Windows."
msgstr "利用できる環境 : Windows."

#: ../../library/asyncio-eventloops.rst:57
msgid ""
"`MSDN documentation on I/O Completion Ports <https://msdn.microsoft.com/en-"
"us/library/windows/desktop/aa365198%28v=vs.85%29.aspx>`_."
msgstr ""
"`MSDN の I/O Completion Ports のドキュメント <https://msdn.microsoft.com/en-"
"us/library/windows/desktop/aa365198%28v=vs.85%29.aspx>`_。"

#: ../../library/asyncio-eventloops.rst:60
msgid "Example to use a :class:`ProactorEventLoop` on Windows::"
msgstr "Windows で :class:`ProactorEventLoop` を使用した例::"

#: ../../library/asyncio-eventloops.rst:71
msgid "Platform support"
msgstr "プラットフォームでのサポート"

#: ../../library/asyncio-eventloops.rst:73
msgid ""
"The :mod:`asyncio` module has been designed to be portable, but each "
"platform still has subtle differences and may not support all :mod:`asyncio` "
"features."
msgstr ""
":mod:`asyncio` モジュールは移植性を考慮して設計されていますが、プラットフォー"
"ムごとにわずかな違いがあり、:mod:`asyncio` の全機能をサポートしているわけでは"
"ありません。"

#: ../../library/asyncio-eventloops.rst:77
msgid "Windows"
msgstr "Windows"

#: ../../library/asyncio-eventloops.rst:79
msgid "Common limits of Windows event loops:"
msgstr "Windows のイベントループでの共通の制限:"

#: ../../library/asyncio-eventloops.rst:81
msgid ""
":meth:`~AbstractEventLoop.create_unix_connection` and :meth:"
"`~AbstractEventLoop.create_unix_server` are not supported: the socket "
"family :data:`socket.AF_UNIX` is specific to UNIX"
msgstr ""
":meth:`~AbstractEventLoop.create_unix_connection` および :meth:"
"`~AbstractEventLoop.create_unix_server` はサポートされていません: ソケット"
"ファミリー :data:`socket.AF_UNIX` は UNIX 固有です"

#: ../../library/asyncio-eventloops.rst:84
msgid ""
":meth:`~AbstractEventLoop.add_signal_handler` and :meth:`~AbstractEventLoop."
"remove_signal_handler` are not supported"
msgstr ""
":meth:`~AbstractEventLoop.add_signal_handler` と :meth:`~AbstractEventLoop."
"remove_signal_handler` はサポートされていません"

#: ../../library/asyncio-eventloops.rst:86
msgid ""
":meth:`EventLoopPolicy.set_child_watcher` is not supported. :class:"
"`ProactorEventLoop` supports subprocesses. It has only one implementation to "
"watch child processes, there is no need to configure it."
msgstr ""
":meth:`EventLoopPolicy.set_child_watcher` は未サポート: :class:"
"`ProactorEventLoop` はサブプロセスをサポートします。これは子プロセスを監視で"
"きる唯一の実装で、構成設定を必要としません。"

#: ../../library/asyncio-eventloops.rst:90
msgid ":class:`SelectorEventLoop` specific limits:"
msgstr ":class:`SelectorEventLoop` 固有の制限:"

#: ../../library/asyncio-eventloops.rst:92
msgid ""
":class:`~selectors.SelectSelector` is used which only supports sockets and "
"is limited to 512 sockets."
msgstr ""
":class:`~selectors.SelectSelector` が使用されるがサポートしているのはソケット"
"のみで 512 ソケットに制限される"

#: ../../library/asyncio-eventloops.rst:94
msgid ""
":meth:`~AbstractEventLoop.add_reader` and :meth:`~AbstractEventLoop."
"add_writer` only accept file descriptors of sockets"
msgstr ""
":meth:`~AbstractEventLoop.add_reader` および :meth:`~AbstractEventLoop."
"add_writer` はソケットのファイル記述子受け取るだけです"

#: ../../library/asyncio-eventloops.rst:96
msgid ""
"Pipes are not supported (ex: :meth:`~AbstractEventLoop.connect_read_pipe`, :"
"meth:`~AbstractEventLoop.connect_write_pipe`)"
msgstr ""
"パイプは未サポート (例: :meth:`~AbstractEventLoop.connect_read_pipe`, :meth:"
"`~AbstractEventLoop.connect_write_pipe`)"

#: ../../library/asyncio-eventloops.rst:99
msgid ""
":ref:`Subprocesses <asyncio-subprocess>` are not supported (ex: :meth:"
"`~AbstractEventLoop.subprocess_exec`, :meth:`~AbstractEventLoop."
"subprocess_shell`)"
msgstr ""
":ref:`サブプロセス <asyncio-subprocess>` は未サポート (例: :meth:"
"`~AbstractEventLoop.subprocess_exec`, :meth:`~AbstractEventLoop."
"subprocess_shell`)"

#: ../../library/asyncio-eventloops.rst:103
msgid ":class:`ProactorEventLoop` specific limits:"
msgstr ":class:`ProactorEventLoop` 固有の制限:"

#: ../../library/asyncio-eventloops.rst:105
msgid ""
":meth:`~AbstractEventLoop.create_datagram_endpoint` (UDP) is not supported"
msgstr ":meth:`~AbstractEventLoop.create_datagram_endpoint` (UDP) は未サポート"

#: ../../library/asyncio-eventloops.rst:106
msgid ""
":meth:`~AbstractEventLoop.add_reader` and :meth:`~AbstractEventLoop."
"add_writer` are not supported"
msgstr ""
":meth:`~AbstractEventLoop.add_reader` および :meth:`~AbstractEventLoop."
"add_writer` は未サポート"

#: ../../library/asyncio-eventloops.rst:109
msgid ""
"The resolution of the monotonic clock on Windows is usually around 15.6 "
"msec. The best resolution is 0.5 msec. The resolution depends on the "
"hardware (availability of `HPET <https://en.wikipedia.org/wiki/"
"High_Precision_Event_Timer>`_) and on the Windows configuration. See :ref:"
"`asyncio delayed calls <asyncio-delayed-calls>`."
msgstr ""
"Windows のモノトニック時計の時間分解能は、通常約 15.6 秒です。\n"
"最高分解能は 0.5 秒です。\n"
"分解能はハードウェア (`HPET <https://ja.wikipedia.org/wiki/"
"High_Precision_Event_Timer>`_ の可否) および Windows の設定に依存します。\n"
":ref:`asyncio 遅延呼び出し <asyncio-delayed-calls>` を参照してください。"

#: ../../library/asyncio-eventloops.rst:117
msgid ":class:`ProactorEventLoop` now supports SSL."
msgstr ":class:`ProactorEventLoop` は SSL をサポートしました。"

#: ../../library/asyncio-eventloops.rst:121
msgid "Mac OS X"
msgstr "Mac OS X"

#: ../../library/asyncio-eventloops.rst:123
msgid ""
"Character devices like PTY are only well supported since Mavericks (Mac OS "
"10.9). They are not supported at all on Mac OS 10.5 and older."
msgstr ""
"PTY のようなキャラクターデバイスは Mavericks (Mac OS 10.9) 以降でのみ十分サ"
"ポートされています。Mac OS 10.5 以前ではサポートされていません。"

#: ../../library/asyncio-eventloops.rst:126
msgid ""
"On Mac OS 10.6, 10.7 and 10.8, the default event loop is :class:"
"`SelectorEventLoop` which uses :class:`selectors.KqueueSelector`. :class:"
"`selectors.KqueueSelector` does not support character devices on these "
"versions.  The :class:`SelectorEventLoop` can be used with :class:"
"`~selectors.SelectSelector` or :class:`~selectors.PollSelector` to support "
"character devices on these versions of Mac OS X. Example::"
msgstr ""
"Mac OS 10.6、10.7 および 10.8 では、デフォルトのイベントループは :class:"
"`SelectorEventLoop` で、:class:`selectors.KqueueSelector` を使用します。:"
"class:`selectors.KqueueSelector` はこれらのバージョンではキャラクターデバイス"
"をサポートしていません。これらのバージョンでキャラクターデバイスをサポートす"
"るには :class:`SelectorEventLoop` で :class:`~selectors.SelectSelector` また"
"は :class:`~selectors.PollSelector` を使用します。例::"

#: ../../library/asyncio-eventloops.rst:142
msgid "Event loop policies and the default policy"
msgstr "イベントループのポリシーとデフォルトポリシー"

#: ../../library/asyncio-eventloops.rst:144
msgid ""
"Event loop management is abstracted with a *policy* pattern, to provide "
"maximal flexibility for custom platforms and frameworks. Throughout the "
"execution of a process, a single global policy object manages the event "
"loops available to the process based on the calling context. A policy is an "
"object implementing the :class:`AbstractEventLoopPolicy` interface."
msgstr ""
"イベントループの管理は、カスタムプラットフォームやフレームワークのために最大"
"限の柔軟性を提供するため *ポリシー* パターンによって抽象化されます。プロセス"
"の実行中、単一のポリシーオブジェクトが、コンテキスト呼び出しベースのプロセス"
"から利用可能なイベントループを管理します。一つのポリシーは一つの :class:"
"`AbstractEventLoopPolicy` インターフェースを実装するオブジェクトです。"

#: ../../library/asyncio-eventloops.rst:150
msgid ""
"For most users of :mod:`asyncio`, policies never have to be dealt with "
"explicitly, since the default global policy is sufficient (see below)."
msgstr ""

#: ../../library/asyncio-eventloops.rst:153
msgid ""
"The module-level functions :func:`get_event_loop` and :func:`set_event_loop` "
"provide convenient access to event loops managed by the default policy."
msgstr ""

#: ../../library/asyncio-eventloops.rst:159
msgid "Event loop policy interface"
msgstr "イベントループポリシーインターフェース"

#: ../../library/asyncio-eventloops.rst:161
msgid "An event loop policy must implement the following interface:"
msgstr ""
"イベントループのポリシーは以下のインターフェースを実装しなければなりません:"

#: ../../library/asyncio-eventloops.rst:165
msgid "Event loop policy."
msgstr "イベントループポリシーです。"

#: ../../library/asyncio-eventloops.rst:169
msgid "Get the event loop for the current context."
msgstr "現在のコンテクストのイベントループを取得します。"

#: ../../library/asyncio-eventloops.rst:171
msgid ""
"Returns an event loop object implementing the :class:`AbstractEventLoop` "
"interface. In case called from coroutine, it returns the currently running "
"event loop."
msgstr ""

#: ../../library/asyncio-eventloops.rst:175
msgid ""
"Raises an exception in case no event loop has been set for the current "
"context and the current policy does not specify to create one. It must never "
"return ``None``."
msgstr ""
"現在のコンテキストに設定されているイベントループが存在しない場合やイベント"
"ループを作成するためのポリシーが指定されていない場合には例外を送出します。\n"
"``None`` を返すことがあってはなりません。"

#: ../../library/asyncio-eventloops.rst:183
msgid "Set the event loop for the current context to *loop*."
msgstr "現在のコンテキストにイベントループ *loop* を設定します。"

#: ../../library/asyncio-eventloops.rst:187
msgid ""
"Create and return a new event loop object according to this policy's rules."
msgstr "このポリシーのルールに従った新しいイベントループを作成して返します。"

#: ../../library/asyncio-eventloops.rst:190
msgid ""
"If there's need to set this loop as the event loop for the current context, :"
"meth:`set_event_loop` must be called explicitly."
msgstr ""
"このループを現在のコンテキストのイベントループとして設定する必要がある場合"
"は、:meth:`set_event_loop` が明示的に呼び出されなくてはなりません。"

#: ../../library/asyncio-eventloops.rst:194
msgid ""
"The default policy defines context as the current thread, and manages an "
"event loop per thread that interacts with :mod:`asyncio`.  If the current "
"thread doesn't already have an event loop associated with it, the default "
"policy's :meth:`~AbstractEventLoopPolicy.get_event_loop` method creates one "
"when called from the main thread, but raises :exc:`RuntimeError` otherwise."
msgstr ""

#: ../../library/asyncio-eventloops.rst:202
msgid "Access to the global loop policy"
msgstr "グローバルループポリシーへのアクセス"

#: ../../library/asyncio-eventloops.rst:206
msgid "Get the current event loop policy."
msgstr "現在のイベントループポリシーを取得します。"

#: ../../library/asyncio-eventloops.rst:210
msgid ""
"Set the current event loop policy. If *policy* is ``None``, the default "
"policy is restored."
msgstr ""
"現在のイベントループポリシーを設定します。*policy* が ``None`` の場合、デフォ"
"ルトポリシーが復元されます。"

#: ../../library/asyncio-eventloops.rst:215
msgid "Customizing the event loop policy"
msgstr ""

#: ../../library/asyncio-eventloops.rst:217
msgid ""
"To implement a new event loop policy, it is recommended you subclass the "
"concrete default event loop policy :class:`DefaultEventLoopPolicy` and "
"override the methods for which you want to change behavior, for example::"
msgstr ""
