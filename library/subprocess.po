# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/subprocess.rst:3
msgid ":mod:`subprocess` --- Subprocess management"
msgstr ":mod:`subprocess` --- サブプロセス管理"

#: ../../library/subprocess.rst:13
msgid ""
"The :mod:`subprocess` module allows you to spawn new processes, connect to "
"their input/output/error pipes, and obtain their return codes.  This module "
"intends to replace several older modules and functions::"
msgstr ""
":mod:`subprocess` モジュールは新しいプロセスの開始、入力/出力/エラーパイプの"
"接続、リターンコードの取得を可能とします。このモジュールはいくつかの古いモ"
"ジュールや関数を置き換えることを意図しています："

#: ../../library/subprocess.rst:23
msgid ""
"Information about how this module can be used to replace the older functions "
"can be found in the subprocess-replacements_ section."
msgstr ""
"これらの古いモジュールや関数の代わりに、 このモジュールをどのように使うかにつ"
"いては `古い関数を subprocess モジュールで置き換える`_ で説明します。"

#: ../../library/subprocess.rst:28
msgid ""
"POSIX users (Linux, BSD, etc.) are strongly encouraged to install and use "
"the much more recent subprocess32_ module instead of the version included "
"with python 2.7.  It is a drop in replacement with better behavior in many "
"situations."
msgstr ""
"POSIX (Linux, BSD など) ユーザは Python 2.7 にバンドルされているバージョンよ"
"りも遥かに新しい subprocess32_ モジュールをインストールして使うことを強くお勧"
"めします。これは多くの状況においてより良い振る舞いをする差し替えです。"

#: ../../library/subprocess.rst:33
msgid ":pep:`324` -- PEP proposing the subprocess module"
msgstr ":pep:`324` -- subprocess モジュールを提案している PEP"

#: ../../library/subprocess.rst:38
msgid "Using the :mod:`subprocess` Module"
msgstr ":mod:`subprocess` モジュールを使う"

#: ../../library/subprocess.rst:40
msgid ""
"The recommended way to launch subprocesses is to use the following "
"convenience functions.  For more advanced use cases when these do not meet "
"your needs, use the underlying :class:`Popen` interface."
msgstr ""
"サブプロセスを起動するのにお奨めなのは、以下の簡易関数を使うことです。それで"
"満足できないような高度なユースケースがあるなら、背後にある :class:`Popen` イ"
"ンターフェイスを直接使ってください。"

#: ../../library/subprocess.rst:47
msgid ""
"Run the command described by *args*.  Wait for command to complete, then "
"return the :attr:`returncode` attribute."
msgstr ""
"*args* で指定された引数でコマンドを実行します。コマンドの完了を待って、 :"
"attr:`returncode` を返します。"

#: ../../library/subprocess.rst:50 ../../library/subprocess.rst:84
msgid ""
"The arguments shown above are merely the most common ones, described below "
"in :ref:`frequently-used-arguments` (hence the slightly odd notation in the "
"abbreviated signature). The full function signature is the same as that of "
"the :class:`Popen` constructor - this functions passes all supplied "
"arguments directly through to that interface."
msgstr ""
"ここでは引数は :ref:`frequently-used-arguments` で説明している一番良く使うも"
"のだけ示しています (ですのでシグニチャは省略して少々変わった書き方をしていま"
"す)。完全な関数シグネチャは :class:`Popen` コンストラクタと同じです。この関数"
"は引数を直接そのインターフェースへ渡します。"

#: ../../library/subprocess.rst:56 ../../library/subprocess.rst:90
#: ../../library/subprocess.rst:131
msgid "Examples::"
msgstr "例::"

#: ../../library/subprocess.rst:66 ../../library/subprocess.rst:104
#: ../../library/subprocess.rst:154
msgid ""
"Using ``shell=True`` can be a security hazard.  See the warning under :ref:"
"`frequently-used-arguments` for details."
msgstr ""
"``shell=True`` を使うことはセキュリティ上の脅威となり得ます。詳細については :"
"ref:`frequently-used-arguments` に含まれる警告を参照してください。"

#: ../../library/subprocess.rst:71 ../../library/subprocess.rst:109
msgid ""
"Do not use ``stdout=PIPE`` or ``stderr=PIPE`` with this function as that can "
"deadlock based on the child process output volume. Use :class:`Popen` with "
"the :meth:`communicate` method when you need pipes."
msgstr ""
"この関数では ``stderr=PIPE`` および ``stderr=PIPE`` を使用しないでください。"
"子プロセスが生成する出力の大きさによってはデッドロックしうるからです。パイプ"
"が必要なのであれば :class:`Popen` の :meth:`communicate` メソッドを使ってくだ"
"さい。"

#: ../../library/subprocess.rst:79
msgid ""
"Run command with arguments.  Wait for command to complete. If the return "
"code was zero then return, otherwise raise :exc:`CalledProcessError`. The :"
"exc:`CalledProcessError` object will have the return code in the :attr:"
"`~CalledProcessError.returncode` attribute."
msgstr ""
"指定された引数でコマンドを実行し、完了を待ちます。コマンドのリターンコードが"
"ゼロならば return しますが、そうでなければ :exc:`CalledProcessError` 例外を送"
"出します。 :exc:`CalledProcessError` オブジェクトにはリターンコードが :attr:"
"`~CalledProcessError.returncode` 属性として収められています。"

#: ../../library/subprocess.rst:117
msgid "Run command with arguments and return its output as a byte string."
msgstr "引数でコマンドを実行し、その出力をバイト文字列として返します。"

#: ../../library/subprocess.rst:119
msgid ""
"If the return code was non-zero it raises a :exc:`CalledProcessError`. The :"
"exc:`CalledProcessError` object will have the return code in the :attr:"
"`~CalledProcessError.returncode` attribute and any output in the :attr:"
"`~CalledProcessError.output` attribute."
msgstr ""
"コマンドのリターンコードが非ゼロならば :exc:`CalledProcessError` 例外を送出し"
"ます。 :exc:`CalledProcessError` オブジェクトには、リターンコードが :attr:"
"`~CalledProcessError.returncode` 属性に、コマンドからの出力が  :attr:"
"`~CalledProcessError.output` 属性に、それぞれ収められています。"

#: ../../library/subprocess.rst:124
msgid ""
"The arguments shown above are merely the most common ones, described below "
"in :ref:`frequently-used-arguments` (hence the slightly odd notation in the "
"abbreviated signature). The full function signature is largely the same as "
"that of the :class:`Popen` constructor, except that *stdout* is not "
"permitted as it is used internally. All other supplied arguments are passed "
"directly through to the :class:`Popen` constructor."
msgstr ""
"ここでは引数は :ref:`frequently-used-arguments` で説明している一番良く使うも"
"のだけ示しています (ですのでシグニチャは省略して少々変わった書き方をしていま"
"す)。完全な関数シグネチャは :class:`Popen` コンストラクタとほぼ同じで、 "
"*stdout* だけはこの関数が内部利用で使うので指定は許されません。その他の引数"
"は :class:`Popen` コンストラクタにそのまま渡されます。"

#: ../../library/subprocess.rst:141
msgid ""
"To also capture standard error in the result, use ``stderr=subprocess."
"STDOUT``::"
msgstr ""
"標準エラーも結果に含めるには、``stderr=subprocess.STDOUT`` を使います::"

#: ../../library/subprocess.rst:159
msgid ""
"Do not use ``stderr=PIPE`` with this function as that can deadlock based on "
"the child process error volume.  Use :class:`Popen` with the :meth:"
"`communicate` method when you need a stderr pipe."
msgstr ""
"この関数では ``stderr=PIPE`` を使用しないでください。子プロセスが生成するエ"
"ラー出力の大きさによってはデッドロックしうるからです。標準エラー出力のパイプ"
"が必要なのであれば :class:`Popen` の :meth:`communicate` メソッドを使ってくだ"
"さい。"

#: ../../library/subprocess.rst:166
msgid ""
"Special value that can be used as the *stdin*, *stdout* or *stderr* argument "
"to :class:`Popen` and indicates that a pipe to the standard stream should be "
"opened."
msgstr ""
":class:`Popen` の *stdin*, *stdout*, *stderr* 引数に渡して、標準ストリームに"
"対するパイプを開くことを指定するための特別な値."

#: ../../library/subprocess.rst:173
msgid ""
"Special value that can be used as the *stderr* argument to :class:`Popen` "
"and indicates that standard error should go into the same handle as standard "
"output."
msgstr ""
":class:`Popen` の *stderr* 引数に渡して、標準エラーが標準出力と同じハンドルに"
"出力されるように指定するための特殊な値です."

#: ../../library/subprocess.rst:180
msgid ""
"Exception raised when a process run by :func:`check_call` or :func:"
"`check_output` returns a non-zero exit status."
msgstr ""
":func:`check_call` または :func:`check_output` によって実行されるプロセスが非"
"ゼロの終了ステータスを返す場合に送出される例外です。"

#: ../../library/subprocess.rst:185
msgid "Exit status of the child process."
msgstr "子プロセスの終了ステータスです。"

#: ../../library/subprocess.rst:189
msgid "Command that was used to spawn the child process."
msgstr "子プロセスを spawn するために使用されるコマンドです。"

#: ../../library/subprocess.rst:193
msgid ""
"Output of the child process if this exception is raised by :func:"
"`check_output`.  Otherwise, ``None``."
msgstr ""
"この例外が :func:`check_output` によって送出された場合は子プロセスの出力で"
"す。そうでなければ ``None`` です。"

#: ../../library/subprocess.rst:201
msgid "Frequently Used Arguments"
msgstr "よく使われる引数"

#: ../../library/subprocess.rst:203
msgid ""
"To support a wide variety of use cases, the :class:`Popen` constructor (and "
"the convenience functions) accept a large number of optional arguments. For "
"most typical use cases, many of these arguments can be safely left at their "
"default values. The arguments that are most commonly needed are:"
msgstr ""
"幅広い使用例をサポートするために、 :class:`Popen` コンストラクタ (とその他の"
"簡易関数) は、多くのオプション引数を受け付けます。典型的な使用例については、"
"これらの引数の多くはデフォルト値のままで問題ありません。一般的に必要とされる"
"引数は以下の通りです:"

#: ../../library/subprocess.rst:208
msgid ""
"*args* is required for all calls and should be a string, or a sequence of "
"program arguments. Providing a sequence of arguments is generally preferred, "
"as it allows the module to take care of any required escaping and quoting of "
"arguments (e.g. to permit spaces in file names). If passing a single string, "
"either *shell* must be :const:`True` (see below) or else the string must "
"simply name the program to be executed without specifying any arguments."
msgstr ""
"*args* は全ての呼び出しに必要で、文字列あるいはプログラム引数のシーケンスでな"
"ければなりません。一般に、引数のシーケンスを渡す方が望ましいです。なぜなら、"
"モジュールが必要な引数のエスケープやクオート (例えばファイル名中のスペースを"
"許すこと) の面倒を見ることができるためです。単一の文字列を渡す場合、 *shell* "
"は :const:`True` でなければなりません (以下を参照)。もしくは、その文字列は引"
"数を指定せずに実行される単なるプログラムの名前でなければなりません。"

#: ../../library/subprocess.rst:216 ../../library/subprocess.rst:372
msgid ""
"*stdin*, *stdout* and *stderr* specify the executed program's standard "
"input, standard output and standard error file handles, respectively.  Valid "
"values are :data:`PIPE`, an existing file descriptor (a positive integer), "
"an existing file object, and ``None``.  :data:`PIPE` indicates that a new "
"pipe to the child should be created.  With the default settings of ``None``, "
"no redirection will occur; the child's file handles will be inherited from "
"the parent.  Additionally, *stderr* can be :data:`STDOUT`, which indicates "
"that the stderr data from the child process should be captured into the same "
"file handle as for stdout."
msgstr ""
"*stdin*, *stdout* および *stderr* には、実行するプログラムの標準入力、標準出"
"力、および標準エラー出力のファイルハンドルをそれぞれ指定します。有効な値は :"
"data:`PIPE` 、既存のファイルデスクリプタ (正の整数)、既存のファイルオブジェク"
"ト、そして ``None`` です。 :data:`PIPE` を指定すると新しいパイプが子プロセス"
"に向けて作られます。デフォルト設定の ``None`` を指定するとリダイレクトは起こ"
"りません。子プロセスのファイルハンドルはすべて親から受け継がれます。 加え"
"て、 *stderr* を :data:`STDOUT` にすると、子プロセスの標準エラー出力からの出"
"力は *stdout* と同じファイルハンドルに出力されます。"

#: ../../library/subprocess.rst:229
msgid ""
"When *stdout* or *stderr* are pipes and *universal_newlines* is ``True`` "
"then all line endings will be converted to ``'\\n'`` as described for the :"
"term:`universal newlines` ``'U'`` mode argument to :func:`open`."
msgstr ""
"*stdout* か *stdout* がパイプで *universal_newlines* が ``True`` の場合 :"
"func:`open` 関数への ``'U'`` モードとして説明されている :term:`universal "
"newlines` モードで動作し、全ての行終端コードが ``'\\n'`` に変換されます。"

#: ../../library/subprocess.rst:233
msgid ""
"If *shell* is ``True``, the specified command will be executed through the "
"shell.  This can be useful if you are using Python primarily for the "
"enhanced control flow it offers over most system shells and still want "
"convenient access to other shell features such as shell pipes, filename "
"wildcards, environment variable expansion, and expansion of ``~`` to a "
"user's home directory.  However, note that Python itself offers "
"implementations of many shell-like features (in particular, :mod:`glob`, :"
"mod:`fnmatch`, :func:`os.walk`, :func:`os.path.expandvars`, :func:`os.path."
"expanduser`, and :mod:`shutil`)."
msgstr ""
"*shell* が ``True`` なら、指定されたコマンドはシェルによって実行されます。あ"
"なたが Python を主として (ほとんどのシステムシェル以上の) 強化された制御フ"
"ローのために使用していて、さらにシェルパイプ、ファイル名ワイルドカード、環境"
"変数展開、``~`` のユーザホームディレクトリへの展開のような他のシェル機能への"
"簡単なアクセスを望むなら、これは有用かもしれません。しかしながら、 Python 自"
"身が多くのシェル的な機能の実装を提供していることに注意してください (特に :"
"mod:`glob`, :mod:`fnmatch`, :func:`os.walk`, :func:`os.path.expandvars`, :"
"func:`os.path.expanduser`, :mod:`shutil`)。"

#: ../../library/subprocess.rst:245
msgid ""
"Executing shell commands that incorporate unsanitized input from an "
"untrusted source makes a program vulnerable to `shell injection <http://en."
"wikipedia.org/wiki/Shell_injection#Shell_injection>`_, a serious security "
"flaw which can result in arbitrary command execution. For this reason, the "
"use of ``shell=True`` is **strongly discouraged** in cases where the command "
"string is constructed from external input::"
msgstr ""
"信頼されていないソースからのサニタイズされていない入力を組み込んだシェルコマ"
"ンドを実行すると、任意のコマンドを実行されることになるセキュリティ上の重大な"
"欠陥 `シェルインジェクション(en) <http://en.wikipedia.org/wiki/"
"Shell_injection#Shell_injection>`_ に対して脆弱になります。この理由から、コマ"
"ンド文字列が外部入力から構成される場合、 ``shell=True`` は *絶対に使うべきで"
"はありません*::"

#: ../../library/subprocess.rst:258
msgid ""
"``shell=False`` disables all shell based features, but does not suffer from "
"this vulnerability; see the Note in the :class:`Popen` constructor "
"documentation for helpful hints in getting ``shell=False`` to work."
msgstr ""
"``shell=False`` はシェルに基づくすべての機能を無効にしますが、この脆弱性の影"
"響を受けません; ``shell=False`` を動かすのに役立つヒントについては :class:"
"`Popen` コンストラクタのドキュメント中の注釈を参照してください。"

#: ../../library/subprocess.rst:262
msgid ""
"When using ``shell=True``, :func:`pipes.quote` can be used to properly "
"escape whitespace and shell metacharacters in strings that are going to be "
"used to construct shell commands."
msgstr ""
"``shell=True`` を使用する場合、シェルコマンドを構築するために使用される文字列"
"中の空白とシェルのメタ文字を適切にエスケープするために :func:`pipes.quote` を"
"使用することができます。"

#: ../../library/subprocess.rst:266
msgid ""
"These options, along with all of the other options, are described in more "
"detail in the :class:`Popen` constructor documentation."
msgstr ""
"これらのオプションは、他の全てのオプションとともに :class:`Popen` コンストラ"
"クタのドキュメンテーションの中で、より詳細に説明されています。"

#: ../../library/subprocess.rst:271
msgid "Popen Constructor"
msgstr "Popen コンストラクタ"

#: ../../library/subprocess.rst:273
msgid ""
"The underlying process creation and management in this module is handled by "
"the :class:`Popen` class. It offers a lot of flexibility so that developers "
"are able to handle the less common cases not covered by the convenience "
"functions."
msgstr ""
"このモジュールの中で、根底のプロセス生成と管理は :class:`Popen` クラスによっ"
"て扱われます。簡易関数によってカバーされないあまり一般的でないケースを開発者"
"が扱えるように、 :class:`Popen` クラスは多くの柔軟性を提供しています。"

#: ../../library/subprocess.rst:284
msgid ""
"Execute a child program in a new process.  On Unix, the class uses :meth:`os."
"execvp`-like behavior to execute the child program.  On Windows, the class "
"uses the Windows ``CreateProcess()`` function.  The arguments to :class:"
"`Popen` are as follows."
msgstr ""
"新しいプロセスで子のプログラムを実行します。Unix においては、子のプログラムを"
"実行するために、このクラスは :meth:`os.execvp` のような振る舞いを使用しま"
"す。 Windows においては、このクラスは Windows の ``CreateProcess()`` 関数を使"
"用します。 :class:`Popen` への引数は以下の通りです。"

#: ../../library/subprocess.rst:289
msgid ""
"*args* should be a sequence of program arguments or else a single string. By "
"default, the program to execute is the first item in *args* if *args* is a "
"sequence.  If *args* is a string, the interpretation is platform-dependent "
"and described below.  See the *shell* and *executable* arguments for "
"additional differences from the default behavior.  Unless otherwise stated, "
"it is recommended to pass *args* as a sequence."
msgstr ""
"*args* はプログラム引数のシーケンスか、単一の文字列でなければなりません。デ"
"フォルトでは、*args* がシーケンスの場合に実行されるプログラムは *args* の最初"
"の要素です。*args* が文字列の場合、解釈はプラットフォーム依存であり、下記に説"
"明されます。デフォルトの挙動からの追加の違いについては *shell* および "
"*executable* 引数を参照してください。特に明記されない限り、*args* をシーケン"
"スとして渡すことが推奨されます。"

#: ../../library/subprocess.rst:296
msgid ""
"On Unix, if *args* is a string, the string is interpreted as the name or "
"path of the program to execute.  However, this can only be done if not "
"passing arguments to the program."
msgstr ""
"Unix 上では、 *args* が文字列の場合、その文字列は実行すべきプログラムの名前ま"
"たはパスとして解釈されます。しかし、これはプログラムに引数を渡さない場合にの"
"み可能です。"

#: ../../library/subprocess.rst:302
msgid ""
":meth:`shlex.split` can be useful when determining the correct tokenization "
"for *args*, especially in complex cases::"
msgstr ""
"*args* を正しくトークン化するには、 :meth:`shlex.split` が便利です。このメ"
"ソッドは特に複雑な状況で活躍します::"

#: ../../library/subprocess.rst:313
msgid ""
"Note in particular that options (such as *-input*) and arguments (such as "
"*eggs.txt*) that are separated by whitespace in the shell go in separate "
"list elements, while arguments that need quoting or backslash escaping when "
"used in the shell (such as filenames containing spaces or the *echo* command "
"shown above) are single list elements."
msgstr ""
"特に注意すべき点は、シェル内でスペースで区切られたオプション (*-input* など) "
"と引数 (*eggs.txt* など) はリストの別々の要素になるのに対し、シェル内で (上記"
"のスペースを含むファイル名や *echo* コマンドのように) クォーティングやバック"
"スラッシュエスケープが必要なものは単一のリスト要素であることです。"

#: ../../library/subprocess.rst:319
msgid ""
"On Windows, if *args* is a sequence, it will be converted to a string in a "
"manner described in :ref:`converting-argument-sequence`.  This is because "
"the underlying ``CreateProcess()`` operates on strings."
msgstr ""
"Windows 上では、 *args* がシーケンスなら :ref:`converting-argument-sequence` "
"に記述された方法で文字列に変換されます。これは根底の ``CreateProcess()`` が文"
"字列上で動作するからです。"

#: ../../library/subprocess.rst:323
msgid ""
"The *shell* argument (which defaults to ``False``) specifies whether to use "
"the shell as the program to execute.  If *shell* is ``True``, it is "
"recommended to pass *args* as a string rather than as a sequence."
msgstr ""
"*shell* 引数 (デフォルトでは ``False``) は、実行するプログラムとしてシェルを"
"使用するかどうかを指定します。 *shell* が ``True`` の場合、 *args* をシーケン"
"スとしてではなく文字列として渡すことが推奨されます。"

#: ../../library/subprocess.rst:327
msgid ""
"On Unix with ``shell=True``, the shell defaults to :file:`/bin/sh`.  If "
"*args* is a string, the string specifies the command to execute through the "
"shell.  This means that the string must be formatted exactly as it would be "
"when typed at the shell prompt.  This includes, for example, quoting or "
"backslash escaping filenames with spaces in them.  If *args* is a sequence, "
"the first item specifies the command string, and any additional items will "
"be treated as additional arguments to the shell itself.  That is to say, :"
"class:`Popen` does the equivalent of::"
msgstr ""
"Unix で ``shell=True`` の場合、シェルのデフォルトは :file:`/bin/sh` になりま"
"す。 *args* が文字列の場合、この文字列はシェルを介して実行されるコマンドを指"
"定します。したがって、文字列は厳密にシェルプロンプトで打つ形式と一致しなけれ"
"ばなりません。例えば、文字列の中にスペースを含むファイル名がある場合は、"
"クォーティングかバックスラッシュエスケープが必要です。 *args* がシーケンスの"
"場合には、最初の要素はコマンド名を表わす文字列として、残りの要素は追加の引数"
"としてシェルに渡されます。つまり、以下の :class:`Popen` と等価ということで"
"す::"

#: ../../library/subprocess.rst:338
msgid ""
"On Windows with ``shell=True``, the :envvar:`COMSPEC` environment variable "
"specifies the default shell.  The only time you need to specify "
"``shell=True`` on Windows is when the command you wish to execute is built "
"into the shell (e.g. :command:`dir` or :command:`copy`).  You do not need "
"``shell=True`` to run a batch file or console-based executable."
msgstr ""
"Windows で ``shell=True`` とすると、 :envvar:`COMSPEC` 環境変数がデフォルト"
"シェルを指定します。 Windows で ``shell=True`` を指定する必要があるのは、実行"
"したいコマンドがシェルに組み込みの場合だけです (例えば :command:`dir` や :"
"command:`copy`)。バッチファイルやコンソールベースの実行ファイルを実行するため"
"に ``shell=True`` は必要ありません。"

#: ../../library/subprocess.rst:346
msgid ""
"Passing ``shell=True`` can be a security hazard if combined with untrusted "
"input.  See the warning under :ref:`frequently-used-arguments` for details."
msgstr ""
"``shell=True`` を渡すことは、信頼されていない入力と組み合わせるとセキュリティ"
"上の脅威となり得ます。詳細については :ref:`frequently-used-arguments` に含ま"
"れる警告を参照してください。"

#: ../../library/subprocess.rst:350
msgid ""
"*bufsize*, if given, has the same meaning as the corresponding argument to "
"the built-in open() function: :const:`0` means unbuffered, :const:`1` means "
"line buffered, any other positive value means use a buffer of "
"(approximately) that size.  A negative *bufsize* means to use the system "
"default, which usually means fully buffered.  The default value for "
"*bufsize* is :const:`0` (unbuffered)."
msgstr ""
"*bufsize* は、もしこれが与えられた場合、ビルトインの open() 関数の該当する引"
"数と同じ意味をもちます: :const:`0` はバッファされないことを意味し、 :const:"
"`1` は行ごとにバッファされることを、それ以外の正の値は (ほぼ) その大きさの"
"バッファが使われることを意味します。負の *bufsize* はシステムのデフォルト値が"
"使われることを意味し、通常これはバッファがすべて有効となります。 *bufsize* の"
"デフォルト値は :const:`0` (バッファされない) です。"

#: ../../library/subprocess.rst:358
msgid ""
"If you experience performance issues, it is recommended that you try to "
"enable buffering by setting *bufsize* to either -1 or a large enough "
"positive value (such as 4096)."
msgstr ""
"パフォーマンス上の問題がある場合、 *bufsize* を -1 か十分大きな正の値 (例え"
"ば 4096) に設定し、バッファを有効にすることを勧めます。"

#: ../../library/subprocess.rst:362
msgid ""
"The *executable* argument specifies a replacement program to execute.   It "
"is very seldom needed.  When ``shell=False``, *executable* replaces the "
"program to execute specified by *args*.  However, the original *args* is "
"still passed to the program.  Most programs treat the program specified by "
"*args* as the command name, which can then be different from the program "
"actually executed.  On Unix, the *args* name becomes the display name for "
"the executable in utilities such as :program:`ps`.  If ``shell=True``, on "
"Unix the *executable* argument specifies a replacement shell for the "
"default :file:`/bin/sh`."
msgstr ""
"*executable* 引数は、実行される置換プログラムを指定します。これが必要になるの"
"は極めて稀です。 ``shell=False`` のときは、 *executable* は *args* で指定され"
"ている実行プログラムを置換します。しかし、オリジナルの *args* は依然としてプ"
"ログラムに渡されます。ほとんどのプログラムは、 *args* で指定されたプログラム"
"をコマンド名として扱います。そして、それは実際に実行されたプログラムとは異な"
"る可能性があります。 Unix において、 *ps* のようなユーティリティの中では、 "
"*args* 名が実行ファイルの表示名になります。 ``shell=True`` の場合、 Unix にお"
"いて *executable* 引数はデフォルトの :file:`/bin/sh` に対する置換シェルを指定"
"します。"

#: ../../library/subprocess.rst:382
msgid ""
"If *preexec_fn* is set to a callable object, this object will be called in "
"the child process just before the child is executed. (Unix only)"
msgstr ""
"*preexec_fn* に callable オブジェクトが指定されている場合、このオブジェクトは"
"子プロセスが起動されてから、プログラムが exec される直前に呼ばれます。(Unixの"
"み)"

#: ../../library/subprocess.rst:385
msgid ""
"If *close_fds* is true, all file descriptors except :const:`0`, :const:`1` "
"and :const:`2` will be closed before the child process is executed. (Unix "
"only). Or, on Windows, if *close_fds* is true then no handles will be "
"inherited by the child process.  Note that on Windows, you cannot set "
"*close_fds* to true and also redirect the standard handles by setting "
"*stdin*, *stdout* or *stderr*."
msgstr ""
"*close_fds* が true の場合、子プロセスが実行される前に :const:`0`, :const:"
"`1`, :const:`2` 以外のすべてのファイルデスクリプタが閉じられます (Unixの"
"み)。 Windows では *close_fds* が true の場合、すべてのファイルハンドルは子プ"
"ロセスに引き継がれません。 Windows の場合、 *close_fds* を true にしながら、 "
"*stdin*, *stdout*, *stderr* を利用して標準ハンドルをリダイレクトすることはで"
"きません。"

#: ../../library/subprocess.rst:391
msgid ""
"If *cwd* is not ``None``, the child's current directory will be changed to "
"*cwd* before it is executed.  Note that this directory is not considered "
"when searching the executable, so you can't specify the program's path "
"relative to *cwd*."
msgstr ""
"*cwd* が ``None`` 以外の場合、子プロセスのカレントディレクトリが実行される前"
"に *cwd* に変更されます。このディレクトリは実行ファイルを探す段階では考慮され"
"ませんので、プログラムのパスを *cwd* に対する相対パスで指定することはできな"
"い、ということに注意してください。"

#: ../../library/subprocess.rst:396
msgid ""
"If *env* is not ``None``, it must be a mapping that defines the environment "
"variables for the new process; these are used instead of inheriting the "
"current process' environment, which is the default behavior."
msgstr ""
"*env* が ``None`` 以外の場合、これは新しいプロセスでの環境変数を定義します。"
"デフォルトでは、子プロセスは現在のプロセスの環境変数を引き継ぎます。"

#: ../../library/subprocess.rst:402
msgid ""
"If specified, *env* must provide any variables required for the program to "
"execute.  On Windows, in order to run a `side-by-side assembly`_ the "
"specified *env* **must** include a valid :envvar:`SystemRoot`."
msgstr ""
"*env* を特定の値として与える場合、プログラムを実行するのに必要な変数全てを与"
"えなければなりません。 Windows で `side-by-side assembly`_ を実行するために"
"は、 *env* は正しい :envvar:`SystemRoot` を **含まなければいけません** 。"

#: ../../library/subprocess.rst:409
msgid ""
"If *universal_newlines* is ``True``, the file objects *stdout* and *stderr* "
"are opened as text files in :term:`universal newlines` mode.  Lines may be "
"terminated by any of ``'\\n'``, the Unix end-of-line convention, ``'\\r'``, "
"the old Macintosh convention or ``'\\r\\n'``, the Windows convention. All of "
"these external representations are seen as ``'\\n'`` by the Python program."
msgstr ""
"*universal_newlines* を ``True`` にすると、ファイルオブジェクト *stdout*, "
"*stderr* が :term:`universal newlines` モードのテキストファイルとして開きま"
"す。行は Unix 慣習の ``'\\r\\n'`` 、古い Macintosh 慣習の ``'\\r'`` 、 "
"Windows 慣習の ``'\\r\\n'`` のいずれでも終端するでしょうが、どの外部化表現で"
"あれ Python プログラムからは ``'\\n'`` に見えるようになります。"

#: ../../library/subprocess.rst:417
msgid ""
"This feature is only available if Python is built with universal newline "
"support (the default).  Also, the newlines attribute of the file objects :"
"attr:`stdout`, :attr:`stdin` and :attr:`stderr` are not updated by the "
"communicate() method."
msgstr ""
"この機能は Python に universal newline がサポートされている場合 (デフォルト) "
"にのみ有効です。また、 :attr:`stdout`, :attr:`stdin` および :attr:`stderr` の"
"ファイルオブジェクトの newlines 属性は communicate() メソッドでは更新されませ"
"ん。"

#: ../../library/subprocess.rst:422
msgid ""
"If given, *startupinfo* will be a :class:`STARTUPINFO` object, which is "
"passed to the underlying ``CreateProcess`` function. *creationflags*, if "
"given, can be :data:`CREATE_NEW_CONSOLE` or :data:"
"`CREATE_NEW_PROCESS_GROUP`. (Windows only)"
msgstr ""
"*startupinfo* は、根底の ``CreateProcess`` 関数に渡される :class:"
"`STARTUPINFO` オブジェクトになります。 *creationflags* は、与えられるなら、 :"
"data:`CREATE_NEW_CONSOLE` または :data:`CREATE_NEW_PROCESS_GROUP` にできま"
"す。(Windows のみ)"

#: ../../library/subprocess.rst:429
msgid "Exceptions"
msgstr "例外"

#: ../../library/subprocess.rst:431
msgid ""
"Exceptions raised in the child process, before the new program has started "
"to execute, will be re-raised in the parent.  Additionally, the exception "
"object will have one extra attribute called :attr:`child_traceback`, which "
"is a string containing traceback information from the child's point of view."
msgstr ""
"子プロセス内で送出された例外は、新しいプログラムの実行開始の前に親プロセスで"
"再送出されます。さらに、この例外オブジェクトには :attr:`child_traceback` とい"
"う属性が追加されています。この属性は子プロセスの視点からの traceback 情報が格"
"納された文字列です。"

#: ../../library/subprocess.rst:436
msgid ""
"The most common exception raised is :exc:`OSError`.  This occurs, for "
"example, when trying to execute a non-existent file.  Applications should "
"prepare for :exc:`OSError` exceptions."
msgstr ""
"最も一般的に起こる例外は :exc:`OSError` です。これは、たとえば存在しないファ"
"イルを実行しようとしたときなどに発生します。アプリケーションは :exc:"
"`OSError` 例外に備えておかなければなりません。"

#: ../../library/subprocess.rst:440
msgid ""
"A :exc:`ValueError` will be raised if :class:`Popen` is called with invalid "
"arguments."
msgstr ""
"不正な引数で :class:`Popen` が呼ばれた場合は、 :exc:`ValueError` が発生しま"
"す。"

#: ../../library/subprocess.rst:443
msgid ""
":func:`check_call` and :func:`check_output` will raise :exc:"
"`CalledProcessError` if the called process returns a non-zero return code."
msgstr ""
"呼び出されたプロセスがゼロでないリターンコードを返した場合 :func:"
"`check_call` や :func:`check_output` は :exc:`CalledProcessError` を送出しま"
"す。"

#: ../../library/subprocess.rst:449
msgid "Security"
msgstr "セキュリティ"

#: ../../library/subprocess.rst:451
msgid ""
"Unlike some other popen functions, this implementation will never call a "
"system shell implicitly.  This means that all characters, including shell "
"metacharacters, can safely be passed to child processes. Obviously, if the "
"shell is invoked explicitly, then it is the application's responsibility to "
"ensure that all whitespace and metacharacters are quoted appropriately."
msgstr ""
"ほかの popen 関数とは異なり、この実装は決して暗黙のうちにシステムシェルを実行"
"しません。これはシェルのメタ文字を含むすべての文字が子プロセスに安全に渡され"
"るということを意味しています。明らかに、シェルが明示的に起動される場合は、空"
"白とメタキャラクターがすべて適切にクオートされていることを保証するのはアプリ"
"ケーションの責任です。"

#: ../../library/subprocess.rst:459
msgid "Popen Objects"
msgstr "Popen オブジェクト"

#: ../../library/subprocess.rst:461
msgid "Instances of the :class:`Popen` class have the following methods:"
msgstr ""
":class:`Popen` クラスのインスタンスには、以下のようなメソッドがあります:"

#: ../../library/subprocess.rst:466
msgid ""
"Check if child process has terminated.  Set and return :attr:`~Popen."
"returncode` attribute."
msgstr ""
"子プロセスが終了しているかどうかを調べます。 :attr:`~Popen.returncode` 属性を"
"設定して返します。"

#: ../../library/subprocess.rst:472
msgid ""
"Wait for child process to terminate.  Set and return :attr:`~Popen."
"returncode` attribute."
msgstr ""
"子プロセスが終了するまで待ちます。 :attr:`~Popen.returncode` 属性を設定して返"
"します。"

#: ../../library/subprocess.rst:477
msgid ""
"This will deadlock when using ``stdout=PIPE`` and/or ``stderr=PIPE`` and the "
"child process generates enough output to a pipe such that it blocks waiting "
"for the OS pipe buffer to accept more data.  Use :meth:`communicate` to "
"avoid that."
msgstr ""
"これは、子プロセスが十分な出力を生成したのに、出力先が、 OS パイプバッファが"
"それ以上のデータを受け付けるのを待っているような場合に、デッドロックになりま"
"す。これを避けるために、 :meth:`communicate` を利用してください。"

#: ../../library/subprocess.rst:485
msgid ""
"Interact with process: Send data to stdin.  Read data from stdout and "
"stderr, until end-of-file is reached.  Wait for process to terminate. The "
"optional *input* argument should be a string to be sent to the child "
"process, or ``None``, if no data should be sent to the child."
msgstr ""
"プロセスと通信します: end-of-file に到達するまでデータを stdin に送信し、"
"stdout および stderr からデータを受信します。プロセスが終了するまで待ちます。"
"オプション引数 *input* には子プロセスに送られる文字列か、あるいはデータを送ら"
"ない場合は ``None`` を指定します。"

#: ../../library/subprocess.rst:490
msgid ":meth:`communicate` returns a tuple ``(stdoutdata, stderrdata)``."
msgstr ":meth:`communicate` はタプル ``(stdoutdata, stderrdata)`` を返します。"

#: ../../library/subprocess.rst:492
msgid ""
"Note that if you want to send data to the process's stdin, you need to "
"create the Popen object with ``stdin=PIPE``.  Similarly, to get anything "
"other than ``None`` in the result tuple, you need to give ``stdout=PIPE`` "
"and/or ``stderr=PIPE`` too."
msgstr ""
"子プロセスの標準入力にデータを送りたい場合は、 Popen オブジェクトを "
"``stdin=PIPE`` と指定して作成しなければなりません。同じく、戻り値のタプルか"
"ら ``None`` ではない値を取得するためには、 ``stdout=PIPE`` かつ/または "
"``stderr=PIPE`` を指定しなければなりません。"

#: ../../library/subprocess.rst:499
msgid ""
"The data read is buffered in memory, so do not use this method if the data "
"size is large or unlimited."
msgstr ""
"受信したデータはメモリにバッファーされます。そのため、返されるデータが大きい"
"かあるいは制限がないような場合はこのメソッドを使うべきではありません。"

#: ../../library/subprocess.rst:505
msgid "Sends the signal *signal* to the child."
msgstr "*signal* シグナルを子プロセスに送ります。"

#: ../../library/subprocess.rst:509
msgid ""
"On Windows, SIGTERM is an alias for :meth:`terminate`. CTRL_C_EVENT and "
"CTRL_BREAK_EVENT can be sent to processes started with a *creationflags* "
"parameter which includes `CREATE_NEW_PROCESS_GROUP`."
msgstr ""
"Windows では、 SIGTERM は :meth:`terminate` のエイリアスです。 CTRL_C_EVENT "
"と CTRL_BREAK_EVENT を、 `CREATE_NEW_PROCESS_GROUP` を含む *creationflags* で"
"始まった、プロセスに送れます。"

#: ../../library/subprocess.rst:518
msgid ""
"Stop the child. On Posix OSs the method sends SIGTERM to the child. On "
"Windows the Win32 API function :c:func:`TerminateProcess` is called to stop "
"the child."
msgstr ""
"子プロセスを止めます。 Posix OS では、このメソッドは SIGTERM シグナルを子プロ"
"セスに送ります。 Windows では、 Win32 API の :c:func:`TerminateProcess` 関数"
"を利用して子プロセスを止めます。"

#: ../../library/subprocess.rst:527
msgid ""
"Kills the child. On Posix OSs the function sends SIGKILL to the child. On "
"Windows :meth:`kill` is an alias for :meth:`terminate`."
msgstr ""
"子プロセスを kill します。 Posix OS では SIGKILL シグナルを子プロセスに送りま"
"す。 Windows では、 :meth:`kill` は :meth:`terminate` のエイリアスです。"

#: ../../library/subprocess.rst:533
msgid "The following attributes are also available:"
msgstr "以下の属性も利用可能です:"

#: ../../library/subprocess.rst:537
msgid ""
"Use :meth:`~Popen.communicate` rather than :attr:`.stdin.write <Popen."
"stdin>`, :attr:`.stdout.read <Popen.stdout>` or :attr:`.stderr.read <Popen."
"stderr>` to avoid deadlocks due to any of the other OS pipe buffers filling "
"up and blocking the child process."
msgstr ""
":attr:`.stdin.write <Popen.stdin>`, :attr:`.stdout.read <Popen.stdout>`, :"
"attr:`.stderr.read <Popen.stderr>` を利用すると、別のパイプのOSパイプバッファ"
"がいっぱいになってデッドロックする恐れがあります。これを避けるためには :meth:"
"`~Popen.communicate` を利用してください。"

#: ../../library/subprocess.rst:545
msgid ""
"If the *stdin* argument was :data:`PIPE`, this attribute is a file object "
"that provides input to the child process.  Otherwise, it is ``None``."
msgstr ""
"*stdin* 引数が :data:`PIPE` の場合、この属性には子プロセスの入力に使われる"
"ファイルオブジェクトになります。そうでない場合は ``None`` です。"

#: ../../library/subprocess.rst:551
msgid ""
"If the *stdout* argument was :data:`PIPE`, this attribute is a file object "
"that provides output from the child process.  Otherwise, it is ``None``."
msgstr ""
"*stdout* 引数が :data:`PIPE` の場合、この属性には子プロセスの出力に使われる"
"ファイルオブジェクトになります。そうでない場合は ``None`` です。"

#: ../../library/subprocess.rst:557
msgid ""
"If the *stderr* argument was :data:`PIPE`, this attribute is a file object "
"that provides error output from the child process.  Otherwise, it is "
"``None``."
msgstr ""
"*stderr* 引数が :data:`PIPE` の場合、この属性には子プロセスのエラー出力に使わ"
"れるファイルオブジェクトになります。そうでない場合は ``None`` です。"

#: ../../library/subprocess.rst:564
msgid "The process ID of the child process."
msgstr "子プロセスのプロセス ID が入ります。"

#: ../../library/subprocess.rst:566
msgid ""
"Note that if you set the *shell* argument to ``True``, this is the process "
"ID of the spawned shell."
msgstr ""
"*shell* 引数を ``True`` にセットした場合は、生成されたシェルのプロセス ID に"
"なります。"

#: ../../library/subprocess.rst:572
msgid ""
"The child return code, set by :meth:`poll` and :meth:`wait` (and indirectly "
"by :meth:`communicate`).  A ``None`` value indicates that the process hasn't "
"terminated yet."
msgstr ""
":meth:`poll` か :meth:`wait` (か、間接的に :meth:`communicate`)から設定され"
"た、子プロセスの終了ステータスが入ります。 ``None`` はまだその子プロセスが終"
"了していないことを示します。"

#: ../../library/subprocess.rst:576
msgid ""
"A negative value ``-N`` indicates that the child was terminated by signal "
"``N`` (Unix only)."
msgstr ""
"負の値 ``-N`` は子プロセスがシグナル ``N`` により中止させられたことを示しま"
"す (Unix のみ)。"

#: ../../library/subprocess.rst:581
msgid "Windows Popen Helpers"
msgstr "Windows Popen ヘルパ"

#: ../../library/subprocess.rst:583
msgid ""
"The :class:`STARTUPINFO` class and following constants are only available on "
"Windows."
msgstr ""
":class:`STARTUPINFO` クラスと以下の定数は、Windows でいつでも利用できます。"

#: ../../library/subprocess.rst:588
msgid ""
"Partial support of the Windows `STARTUPINFO <https://msdn.microsoft.com/en-"
"us/library/ms686331(v=vs.85).aspx>`__ structure is used for :class:`Popen` "
"creation."
msgstr ""
":class:`Popen` の生成に使われる Windows `STARTUPINFO <https://msdn.microsoft."
"com/en-us/library/ms686331(v=vs.85).aspx>`__ 構造の部分的なサポートです。"

#: ../../library/subprocess.rst:594
msgid ""
"A bit field that determines whether certain :class:`STARTUPINFO` attributes "
"are used when the process creates a window. ::"
msgstr ""
"特定の :class:`STARTUPINFO` の属性が、プロセスがウィンドウを生成するときに使"
"われるかを決定するビットフィールドです::"

#: ../../library/subprocess.rst:602
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this attribute is "
"the standard input handle for the process. If :data:`STARTF_USESTDHANDLES` "
"is not specified, the default for standard input is the keyboard buffer."
msgstr ""
":attr:`dwFlags` が :data:`STARTF_USESTDHANDLES` を指定すれば、この属性がプロ"
"セスの標準入力処理です。 :data:`STARTF_USESTDHANDLES` が指定されなければ、標"
"準入力のデフォルトはキーボードバッファです。"

#: ../../library/subprocess.rst:609
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this attribute is "
"the standard output handle for the process. Otherwise, this attribute is "
"ignored and the default for standard output is the console window's buffer."
msgstr ""
":attr:`dwFlags` が :data:`STARTF_USESTDHANDLES` を指定すれば、この属性がプロ"
"セスの標準出力処理です。そうでなければ、この属性は無視され、標準出力のデフォ"
"ルトはコンソールウィンドウのバッファです。"

#: ../../library/subprocess.rst:616
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESTDHANDLES`, this attribute is "
"the standard error handle for the process. Otherwise, this attribute is "
"ignored and the default for standard error is the console window's buffer."
msgstr ""
":attr:`dwFlags` が :data:`STARTF_USESTDHANDLES` を指定すれば、この属性がプロ"
"セスの標準エラー処理です。そうでなければ、この属性は無視され、標準エラーのデ"
"フォルトはコンソールウィンドウのバッファです。"

#: ../../library/subprocess.rst:622
msgid ""
"If :attr:`dwFlags` specifies :data:`STARTF_USESHOWWINDOW`, this attribute "
"can be any of the values that can be specified in the ``nCmdShow`` parameter "
"for the `ShowWindow <https://msdn.microsoft.com/en-us/library/"
"ms633548(v=vs.85).aspx>`__ function, except for ``SW_SHOWDEFAULT``. "
"Otherwise, this attribute is ignored."
msgstr ""
":attr:`dwFlags` が :data:`STARTF_USESHOWWINDOW` を指定すれば、この属性は "
"`ShowWindow <https://msdn.microsoft.com/en-us/library/ms633548(v=vs.85)."
"aspx>`__ 関数の ``nCmdShow`` 引数で指定された値なら、 ``SW_SHOWDEFAULT`` 以外"
"の任意のものにできます。しかし、この属性は無視されます。"

#: ../../library/subprocess.rst:629
msgid ""
":data:`SW_HIDE` is provided for this attribute. It is used when :class:"
"`Popen` is called with ``shell=True``."
msgstr ""
"この属性には :data:`SW_HIDE` が提供されています。これは、 :class:`Popen` が "
"``shell=True`` として呼び出されたときに使われます。"

#: ../../library/subprocess.rst:634
msgid "Constants"
msgstr "定数"

#: ../../library/subprocess.rst:636
msgid "The :mod:`subprocess` module exposes the following constants."
msgstr ":mod:`subprocess` モジュールは、以下の定数を公開します。"

#: ../../library/subprocess.rst:640
msgid ""
"The standard input device. Initially, this is the console input buffer, "
"``CONIN$``."
msgstr ""
"標準入力デバイスです。この初期値は、コンソール入力バッファ、 ``CONIN$`` で"
"す。"

#: ../../library/subprocess.rst:645
msgid ""
"The standard output device. Initially, this is the active console screen "
"buffer, ``CONOUT$``."
msgstr ""
"標準出力デバイスです。この初期値は、アクティブコンソールスクリーン、 "
"``CONOUT$`` です。"

#: ../../library/subprocess.rst:650
msgid ""
"The standard error device. Initially, this is the active console screen "
"buffer, ``CONOUT$``."
msgstr ""
"標準エラーデバイスです。この初期値は、アクティブコンソールスクリーン、 "
"``CONOUT$`` です。"

#: ../../library/subprocess.rst:655
msgid "Hides the window. Another window will be activated."
msgstr "ウィンドウを隠します。別のウィンドウが活性化します。"

#: ../../library/subprocess.rst:659
msgid ""
"Specifies that the :attr:`STARTUPINFO.hStdInput`, :attr:`STARTUPINFO."
"hStdOutput`, and :attr:`STARTUPINFO.hStdError` attributes contain additional "
"information."
msgstr ""
"追加情報を保持する、 :attr:`STARTUPINFO.hStdInput`, :attr:`STARTUPINFO."
"hStdOutput`, および :attr:`STARTUPINFO.hStdError` 属性を指定します。"

#: ../../library/subprocess.rst:665
msgid ""
"Specifies that the :attr:`STARTUPINFO.wShowWindow` attribute contains "
"additional information."
msgstr ""
"追加情報を保持する、 :attr:`STARTUPINFO.wShowWindow` 属性を指定します。"

#: ../../library/subprocess.rst:670
msgid ""
"The new process has a new console, instead of inheriting its parent's "
"console (the default)."
msgstr ""
"新しいプロセスが、親プロセスのコンソールを継承する (デフォルト) のではなく、"
"新しいコンソールを持ちます。"

#: ../../library/subprocess.rst:673
msgid ""
"This flag is always set when :class:`Popen` is created with ``shell=True``."
msgstr ""
":class:`Popen` が ``shell=True`` として生成されたとき、このフラグは必ず設定さ"
"れます。"

#: ../../library/subprocess.rst:677
msgid ""
"A :class:`Popen` ``creationflags`` parameter to specify that a new process "
"group will be created. This flag is necessary for using :func:`os.kill` on "
"the subprocess."
msgstr ""
"新しいプロセスグループが生成されることを指定する :class:`Popen` "
"``creationflags`` パラメタです。このフラグは、サブプロセスで :func:`os.kill` "
"を使うのに必要です。"

#: ../../library/subprocess.rst:681
msgid "This flag is ignored if :data:`CREATE_NEW_CONSOLE` is specified."
msgstr ""
":data:`CREATE_NEW_CONSOLE` が指定されていたら、このフラグは無視されます。"

#: ../../library/subprocess.rst:687
msgid "Replacing Older Functions with the :mod:`subprocess` Module"
msgstr "古い関数を :mod:`subprocess` モジュールで置き換える"

#: ../../library/subprocess.rst:689
msgid ""
"In this section, \"a becomes b\" means that b can be used as a replacement "
"for a."
msgstr ""
"この節では、 \"a が b になる\" と書かれているものは a の代替として b が使える"
"ということを表します。"

#: ../../library/subprocess.rst:693
msgid ""
"All \"a\" functions in this section fail (more or less) silently if the "
"executed program cannot be found; the \"b\" replacements raise :exc:"
"`OSError` instead."
msgstr ""
"この節で紹介されている \"a\" 関数は全て、実行するプログラムが見つからないとき"
"は (概ね) 静かに終了します。それに対して \"b\" 代替手段は :exc:`OSError` 例外"
"を送出します。"

#: ../../library/subprocess.rst:697
msgid ""
"In addition, the replacements using :func:`check_output` will fail with a :"
"exc:`CalledProcessError` if the requested operation produces a non-zero "
"return code. The output is still available as the :attr:`~CalledProcessError."
"output` attribute of the raised exception."
msgstr ""
"また、要求された操作が非ゼロの終了コードを返した場合、 :func:`check_output` "
"を使用した置き換えは :exc:`CalledProcessError` で失敗します。その出力は、送出"
"された例外の :attr:`~CalledProcessError.output` 属性として利用可能です。"

#: ../../library/subprocess.rst:702
msgid ""
"In the following examples, we assume that the relevant functions have "
"already been imported from the :mod:`subprocess` module."
msgstr ""
"以下の例では、適切な関数が :mod:`subprocess` モジュールからすでにインポートさ"
"れていることを前提としています。"

#: ../../library/subprocess.rst:707
msgid "Replacing /bin/sh shell backquote"
msgstr "/bin/sh シェルのバッククォートを置き換える"

#: ../../library/subprocess.rst:713 ../../library/subprocess.rst:724
#: ../../library/subprocess.rst:741
msgid "becomes::"
msgstr "これは以下のようになります::"

#: ../../library/subprocess.rst:718
msgid "Replacing shell pipeline"
msgstr "シェルのパイプラインを置き換える"

#: ../../library/subprocess.rst:731
msgid ""
"The p1.stdout.close() call after starting the p2 is important in order for "
"p1 to receive a SIGPIPE if p2 exits before p1."
msgstr ""
"p2 を開始した後の p1.stdout.close() の呼び出しは、p1 が p2 の前に存在した場合"
"に、p1 が SIGPIPE を受け取るために重要です。"

#: ../../library/subprocess.rst:734
msgid ""
"Alternatively, for trusted input, the shell's own pipeline support may still "
"be used directly:"
msgstr ""
"あるいは、信頼された入力に対しては、シェル自身のパイプラインサポートを直接使"
"用することもできます:"

#: ../../library/subprocess.rst:747
msgid "Replacing :func:`os.system`"
msgstr ":func:`os.system` を置き換える"

#: ../../library/subprocess.rst:755
msgid "Notes:"
msgstr "注釈:"

#: ../../library/subprocess.rst:757
msgid "Calling the program through the shell is usually not required."
msgstr "このプログラムは普通シェル経由で呼び出す必要はありません。"

#: ../../library/subprocess.rst:759
msgid "A more realistic example would look like this::"
msgstr "より現実的な例ではこうなるでしょう::"

#: ../../library/subprocess.rst:772
msgid "Replacing the :func:`os.spawn <os.spawnl>` family"
msgstr ":func:`os.spawn <os.spawnl>` 関数群を置き換える"

#: ../../library/subprocess.rst:774
msgid "P_NOWAIT example::"
msgstr "P_NOWAIT の例::"

#: ../../library/subprocess.rst:780
msgid "P_WAIT example::"
msgstr "P_WAIT の例::"

#: ../../library/subprocess.rst:786
msgid "Vector example::"
msgstr "シーケンスを使った例::"

#: ../../library/subprocess.rst:792
msgid "Environment example::"
msgstr "環境変数を使った例::"

#: ../../library/subprocess.rst:800
msgid "Replacing :func:`os.popen`, :func:`os.popen2`, :func:`os.popen3`"
msgstr ":func:`os.popen`, :func:`os.popen2`, :func:`os.popen3` を置き換える"

#: ../../library/subprocess.rst:843
msgid ""
"On Unix, os.popen2, os.popen3 and os.popen4 also accept a sequence as the "
"command to execute, in which case arguments will be passed directly to the "
"program without shell intervention.  This usage can be replaced as follows::"
msgstr ""
"Unix では、 os.popen2、os.popen3、os.popen4 は実行するコマンドとしてシーケン"
"スも受け入れます。どちらにせよ、引数はシェルの干渉を受けることなく直接渡され"
"ます。この使い方は以下のように置き換えられます。"

#: ../../library/subprocess.rst:854
msgid "Return code handling translates as follows::"
msgstr "終了コードハンドリングは以下のように解釈します::"

#: ../../library/subprocess.rst:870
msgid "Replacing functions from the :mod:`popen2` module"
msgstr ":mod:`popen2` モジュールの関数群を置き換える"

#: ../../library/subprocess.rst:880
msgid ""
"On Unix, popen2 also accepts a sequence as the command to execute, in which "
"case arguments will be passed directly to the program without shell "
"intervention.  This usage can be replaced as follows::"
msgstr ""
"Unix では、 popen2 は実行するコマンドとしてシーケンスも受け入れます。どちらに"
"せよ、引数はシェルの干渉を受けることなく、直接渡されます。この使い方は、以下"
"のように置き換えられます。"

#: ../../library/subprocess.rst:891
msgid ""
":class:`popen2.Popen3` and :class:`popen2.Popen4` basically work as :class:"
"`subprocess.Popen`, except that:"
msgstr ""
":class:`popen2.Popen3` および :class:`popen2.Popen4` は以下の点を除けば、基本"
"的に :class:`subprocess.Popen` と同じです:"

#: ../../library/subprocess.rst:894
msgid ":class:`Popen` raises an exception if the execution fails."
msgstr ":class:`Popen` は実行が失敗した場合に例外を送出します。"

#: ../../library/subprocess.rst:896
msgid "the *capturestderr* argument is replaced with the *stderr* argument."
msgstr "*capturestderr* 引数は *stderr* 引数に代わりました。"

#: ../../library/subprocess.rst:898
msgid "``stdin=PIPE`` and ``stdout=PIPE`` must be specified."
msgstr "``stdin=PIPE`` および ``stdout=PIPE`` を指定する必要があります。"

#: ../../library/subprocess.rst:900
msgid ""
"popen2 closes all file descriptors by default, but you have to specify "
"``close_fds=True`` with :class:`Popen`."
msgstr ""
"popen2 はデフォルトですべてのファイル記述子を閉じますが、 :class:`Popen` では"
"明示的に ``close_fds=True`` を指定する必要があります。"

#: ../../library/subprocess.rst:905
msgid "Notes"
msgstr "注釈"

#: ../../library/subprocess.rst:910
msgid "Converting an argument sequence to a string on Windows"
msgstr "Windows における引数シーケンスから文字列への変換"

#: ../../library/subprocess.rst:912
msgid ""
"On Windows, an *args* sequence is converted to a string that can be parsed "
"using the following rules (which correspond to the rules used by the MS C "
"runtime):"
msgstr ""
"Windows では、 *args* シーケンスは以下の (MS C ランタイムで使われる規則に対応"
"する) 規則を使って解析できる文字列に変換されます:"

#: ../../library/subprocess.rst:916
msgid ""
"Arguments are delimited by white space, which is either a space or a tab."
msgstr "引数は、スペースかタブのどちらかの空白で分けられます。"

#: ../../library/subprocess.rst:919
msgid ""
"A string surrounded by double quotation marks is interpreted as a single "
"argument, regardless of white space contained within.  A quoted string can "
"be embedded in an argument."
msgstr ""
"ダブルクオーテーションマークで囲まれた文字列は、空白が含まれていたとしても 1 "
"つの引数として解釈されます。クオートされた文字列は引数に埋め込めます。"

#: ../../library/subprocess.rst:924
msgid ""
"A double quotation mark preceded by a backslash is interpreted as a literal "
"double quotation mark."
msgstr ""
"バックスラッシュに続くダブルクオーテーションマークは、リテラルのダブルクオー"
"テーションマークと解釈されます。"

#: ../../library/subprocess.rst:927
msgid ""
"Backslashes are interpreted literally, unless they immediately precede a "
"double quotation mark."
msgstr ""
"バックスラッシュは、ダブルクオーテーションが続かない限り、リテラルとして解釈"
"されます。"

#: ../../library/subprocess.rst:930
msgid ""
"If backslashes immediately precede a double quotation mark, every pair of "
"backslashes is interpreted as a literal backslash.  If the number of "
"backslashes is odd, the last backslash escapes the next double quotation "
"mark as described in rule 3."
msgstr ""
"複数のバックスラッシュにダブルクオーテーションマークが続くなら、バックスラッ"
"シュ 2 つで 1 つのバックスラッシュ文字と解釈されます。バックスラッシュの数が"
"奇数なら、最後のバックスラッシュは規則 3 に従って続くダブルクオーテーション"
"マークをエスケープします。"
