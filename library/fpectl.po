# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/fpectl.rst:3
msgid ":mod:`fpectl` --- Floating point exception control"
msgstr ":mod:`fpectl` --- 浮動小数点例外の制御"

#: ../../library/fpectl.rst:14
msgid ""
"The :mod:`fpectl` module is not built by default, and its usage is "
"discouraged and may be dangerous except in the hands of experts.  See also "
"the section :ref:`fpectl-limitations` on limitations for more details."
msgstr ""
":mod:`fpectl` モジュールはデフォルトではビルドされません。このモジュールの利"
"用は推奨されておらず、熟練者以外がこのモジュールを使うのは危険です。このモ"
"ジュールの制限についての詳細は、 :ref:`fpectl-limitations` 節を参照してくださ"
"い。"

#: ../../library/fpectl.rst:20
msgid ""
"Most computers carry out floating point operations in conformance with the "
"so-called IEEE-754 standard. On any real computer, some floating point "
"operations produce results that cannot be expressed as a normal floating "
"point value. For example, try ::"
msgstr ""
"ほとんどのコンピュータはいわゆるIEEE-754標準に準拠した浮動小数点演算を実行し"
"ます。実際のどんなコンピュータでも、浮動小数点演算が普通の浮動小数点数では表"
"せない結果になることがあります。例えば、次を試してください ::"

#: ../../library/fpectl.rst:31
msgid ""
"(The example above will work on many platforms. DEC Alpha may be one "
"exception.) \"Inf\" is a special, non-numeric value in IEEE-754 that stands "
"for \"infinity\", and \"nan\" means \"not a number.\" Note that, other than "
"the non-numeric results, nothing special happened when you asked Python to "
"carry out those calculations. That is in fact the default behaviour "
"prescribed in the IEEE-754 standard, and if it works for you, stop reading "
"now."
msgstr ""
"(上の例は多くのプラットホームで動作します。DEC Alphaは例外かもしれません。) "
"\"Inf\"は\"infinity(無限)\"を意味するIEEE-754における特殊な非数値の値"
"で、\"nan\"は\"not a number(数ではない)\"を意味します。ここで留意すべき点は、"
"その計算を行うようにPythonに求めたときに非数値の結果以外に特別なことは何も起"
"きないというです。事実、それはIEEE-754標準に規定されたデフォルトのふるまい"
"で、それで良ければここで読むのを止めてください。"

#: ../../library/fpectl.rst:38
msgid ""
"In some circumstances, it would be better to raise an exception and stop "
"processing at the point where the faulty operation was attempted. The :mod:"
"`fpectl` module is for use in that situation. It provides control over "
"floating point units from several hardware manufacturers, allowing the user "
"to turn on the generation of :const:`SIGFPE` whenever any of the IEEE-754 "
"exceptions Division by Zero, Overflow, or Invalid Operation occurs. In "
"tandem with a pair of wrapper macros that are inserted into the C code "
"comprising your python system, :const:`SIGFPE` is trapped and converted into "
"the Python :exc:`FloatingPointError` exception."
msgstr ""
"いくつかの環境では、誤った演算がなされたところで例外を発生し、処理を止めるこ"
"とがより良いでしょう。 :mod:`fpectl` モジュールはそんな状況で使うためのもので"
"す。いくつかのハードウェア製造メーカーの浮動小数点ユニットを制御できるように"
"します。つまり、IEEE-754例外Division by Zero、OverflowあるいはInvalid "
"Operationが起きたときはいつでも :const:`SIGFPE` が生成させるように、ユーザが"
"切り替えられるようにします。あなたのpythonシステムを構成しているCコードの中へ"
"挿入される一組のラッパーマクロと協力して、 :const:`SIGFPE` は捕捉され、"
"Python :exc:`FloatingPointError` 例外へ変換されます。"

#: ../../library/fpectl.rst:48
msgid ""
"The :mod:`fpectl` module defines the following functions and may raise the "
"given exception:"
msgstr ""
":mod:`fpectl` モジュールは次の関数を定義しています。また、所定の例外を発生し"
"ます:"

#: ../../library/fpectl.rst:54
msgid ""
"Turn on the generation of :const:`SIGFPE`, and set up an appropriate signal "
"handler."
msgstr ""
":const:`SIGFPE` を生成するように切り替え、適切なシグナルハンドラを設定しま"
"す。"

#: ../../library/fpectl.rst:60
msgid "Reset default handling of floating point exceptions."
msgstr "浮動小数点例外のデフォルトの処理に再設定します。"

#: ../../library/fpectl.rst:65
msgid ""
"After :func:`turnon_sigfpe` has been executed, a floating point operation "
"that raises one of the IEEE-754 exceptions Division by Zero, Overflow, or "
"Invalid operation will in turn raise this standard Python exception."
msgstr ""
":func:`turnon_sigfpe` が実行された後に、IEEE-754例外であるDivision by Zero、"
"OverflowまたはInvalid operationの一つを発生する浮動小数点演算は、次にこの標準"
"Python例外を発生します。"

#: ../../library/fpectl.rst:73
msgid "Example"
msgstr "例"

#: ../../library/fpectl.rst:75
msgid ""
"The following example demonstrates how to start up and test operation of "
"the :mod:`fpectl` module. ::"
msgstr ""
"以下の例は :mod:`fpectl` モジュールの使用を開始する方法とモジュールのテスト演"
"算について示しています。 ::"

#: ../../library/fpectl.rst:98
msgid "Limitations and other considerations"
msgstr "制限と他に考慮すべきこと"

#: ../../library/fpectl.rst:100
msgid ""
"Setting up a given processor to trap IEEE-754 floating point errors "
"currently requires custom code on a per-architecture basis. You may have to "
"modify :mod:`fpectl` to control your particular hardware."
msgstr ""
"特定のプロセッサをIEEE-754浮動小数点エラーを捕らえるように設定することは、現"
"在アーキテクチャごとの基準に基づきカスタムコードを必要とします。あなたの特殊"
"なハードウェアを制御するために :mod:`fpectl` を修正することもできます。"

#: ../../library/fpectl.rst:104
msgid ""
"Conversion of an IEEE-754 exception to a Python exception requires that the "
"wrapper macros ``PyFPE_START_PROTECT`` and ``PyFPE_END_PROTECT`` be inserted "
"into your code in an appropriate fashion.  Python itself has been modified "
"to support the :mod:`fpectl` module, but many other codes of interest to "
"numerical analysts have not."
msgstr ""
"IEEE-754例外のPython例外への変換には、ラッパーマクロ ``PyFPE_START_PROTECT`` "
"と ``PyFPE_END_PROTECT`` があなたのコードに適切な方法で挿入されていることが必"
"要です。Python自身は :mod:`fpectl` モジュールをサポートするために修正されてい"
"ますが、数値解析にとって興味ある多くの他のコードはそうではありません。"

#: ../../library/fpectl.rst:110
msgid "The :mod:`fpectl` module is not thread-safe."
msgstr ":mod:`fpectl` モジュールはスレッドセーフではありません。"

#: ../../library/fpectl.rst:115
msgid ""
"Some files in the source distribution may be interesting in learning more "
"about how this module operates. The include file :source:`Include/pyfpe.h` "
"discusses the implementation of this module at some length. :source:`Modules/"
"fpetestmodule.c` gives several examples of use. Many additional examples can "
"be found in :source:`Objects/floatobject.c`."
msgstr ""
"このモジュールがどのように動作するのかについてより学習するときに、ソースディ"
"ストリビューションの中のいくつかのファイルは興味を引くものでしょう。インク"
"ルードファイル :file:`Include/pyfpe.h` では、このモジュールの実装について同じ"
"長さで議論されています。 :file:`Modules/fpetestmodule.c` には、いくつかの使い"
"方の例があります。多くの追加の例が :file:`Objects/floatobject.c` にあります。"
