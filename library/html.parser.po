# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# ごはんですよ <uchida@turbare.net>, 2023
# Arihiro TAKASE, 2023
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-04 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:07+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/html.parser.rst:2
msgid ":mod:`!html.parser` --- Simple HTML and XHTML parser"
msgstr ":mod:`!html.parser` --- HTML と XHTML のシンプルなパーサー"

#: ../../library/html.parser.rst:7
msgid "**Source code:** :source:`Lib/html/parser.py`"
msgstr "**ソースコード:** :source:`Lib/html/parser.py`"

#: ../../library/html.parser.rst:15
msgid ""
"This module defines a class :class:`HTMLParser` which serves as the basis "
"for parsing text files formatted in HTML (HyperText Mark-up Language) and "
"XHTML."
msgstr ""
"このモジュールでは :class:`HTMLParser` クラスを定義します。このクラスは HTML "
"(ハイパーテキスト記述言語、HyperText Mark-up Language) および XHTML で書式化"
"されているテキストファイルを解釈するための基礎となります。"

#: ../../library/html.parser.rst:20
msgid "Create a parser instance able to parse invalid markup."
msgstr "不正なマークアップをパースできるパーサーインスタンスを作成します。"

#: ../../library/html.parser.rst:22
msgid ""
"If *convert_charrefs* is ``True`` (the default), all character references "
"(except the ones in ``script``/``style`` elements) are automatically "
"converted to the corresponding Unicode characters."
msgstr ""
"*convert_charrefs* が (デフォルトの) ``True`` である場合、全ての文字参照 "
"(``script``/``style`` 要素にあるものは除く) は自動的に対応する Unicode 文字に"
"変換されます。"

#: ../../library/html.parser.rst:26
msgid ""
"An :class:`.HTMLParser` instance is fed HTML data and calls handler methods "
"when start tags, end tags, text, comments, and other markup elements are "
"encountered.  The user should subclass :class:`.HTMLParser` and override its "
"methods to implement the desired behavior."
msgstr ""
":class:`.HTMLParser` インスタンスは、HTML データが入力されると、開始タグ、終"
"了タグ、およびその他の要素が見つかる度にハンドラーメソッドを呼び出します。各"
"メソッドの挙動を実装するには :class:`.HTMLParser` サブクラスを使ってそれぞれ"
"を上書きして行います。"

#: ../../library/html.parser.rst:31
msgid ""
"This parser does not check that end tags match start tags or call the end-"
"tag handler for elements which are closed implicitly by closing an outer "
"element."
msgstr ""
"このパーサーは終了タグが開始タグと一致しているか調べたり、外側のタグ要素が閉"
"じるときに内側で明示的に閉じられていないタグ要素のタグ終了ハンドラーを呼び出"
"したりはしません。"

#: ../../library/html.parser.rst:34
msgid "*convert_charrefs* keyword argument added."
msgstr "キーワード引数 *convert_charrefs* を追加。"

#: ../../library/html.parser.rst:37
msgid "The default value for argument *convert_charrefs* is now ``True``."
msgstr "*convert_charrefs* のデフォルト値は ``True`` になりました。"

#: ../../library/html.parser.rst:42
msgid "Example HTML Parser Application"
msgstr "HTML パーサーアプリケーションの例"

#: ../../library/html.parser.rst:44
msgid ""
"As a basic example, below is a simple HTML parser that uses the :class:"
"`HTMLParser` class to print out start tags, end tags, and data as they are "
"encountered::"
msgstr ""
"基礎的な例として、:class:`HTMLParser` クラスを使い、発見した開始タグ、終了タ"
"グ、およびデータを出力する、シンプルな HTML パーサーを以下に示します::"

#: ../../library/html.parser.rst:48
msgid ""
"from html.parser import HTMLParser\n"
"\n"
"class MyHTMLParser(HTMLParser):\n"
"    def handle_starttag(self, tag, attrs):\n"
"        print(\"Encountered a start tag:\", tag)\n"
"\n"
"    def handle_endtag(self, tag):\n"
"        print(\"Encountered an end tag :\", tag)\n"
"\n"
"    def handle_data(self, data):\n"
"        print(\"Encountered some data  :\", data)\n"
"\n"
"parser = MyHTMLParser()\n"
"parser.feed('<html><head><title>Test</title></head>'\n"
"            '<body><h1>Parse me!</h1></body></html>')"
msgstr ""

#: ../../library/html.parser.rst:64
msgid "The output will then be:"
msgstr "出力は以下のようになります:"

#: ../../library/html.parser.rst:66
msgid ""
"Encountered a start tag: html\n"
"Encountered a start tag: head\n"
"Encountered a start tag: title\n"
"Encountered some data  : Test\n"
"Encountered an end tag : title\n"
"Encountered an end tag : head\n"
"Encountered a start tag: body\n"
"Encountered a start tag: h1\n"
"Encountered some data  : Parse me!\n"
"Encountered an end tag : h1\n"
"Encountered an end tag : body\n"
"Encountered an end tag : html"
msgstr ""

#: ../../library/html.parser.rst:83
msgid ":class:`.HTMLParser` Methods"
msgstr ":class:`.HTMLParser` メソッド"

#: ../../library/html.parser.rst:85
msgid ":class:`HTMLParser` instances have the following methods:"
msgstr ":class:`HTMLParser` インスタンスは以下のメソッドを提供します:"

#: ../../library/html.parser.rst:90
msgid ""
"Feed some text to the parser.  It is processed insofar as it consists of "
"complete elements; incomplete data is buffered until more data is fed or :"
"meth:`close` is called.  *data* must be :class:`str`."
msgstr ""
"パーサーにテキストを入力します。入力が完全なタグ要素で構成されている場合に限"
"り処理が行われます; 不完全なデータであった場合、新たにデータが入力されるか、:"
"meth:`close` が呼び出されるまでバッファーされます。 *data* は :class:`str` で"
"なければなりません。"

#: ../../library/html.parser.rst:97
msgid ""
"Force processing of all buffered data as if it were followed by an end-of-"
"file mark.  This method may be redefined by a derived class to define "
"additional processing at the end of the input, but the redefined version "
"should always call the :class:`HTMLParser` base class method :meth:`close`."
msgstr ""
"全てのバッファーされているデータについて、その後にファイル終端マークが続いて"
"いるとみなして強制的に処理を行います。このメソッドは入力データの終端で行う追"
"加処理を定義するために、派生クラスで再定義することができます。しかし、再定義"
"されたバージョンでは、常に :class:`HTMLParser` 基底クラスのメソッド :meth:"
"`close` を呼び出さなくてはなりません。"

#: ../../library/html.parser.rst:105
msgid ""
"Reset the instance.  Loses all unprocessed data.  This is called implicitly "
"at instantiation time."
msgstr ""
"インスタンスをリセットします。未処理のデータはすべて失われます。インスタンス"
"化の際に暗黙的に呼び出されます。"

#: ../../library/html.parser.rst:111
msgid "Return current line number and offset."
msgstr "現在の行番号およびオフセット値を返します。"

#: ../../library/html.parser.rst:116
msgid ""
"Return the text of the most recently opened start tag.  This should not "
"normally be needed for structured processing, but may be useful in dealing "
"with HTML \"as deployed\" or for re-generating input with minimal changes "
"(whitespace between attributes can be preserved, etc.)."
msgstr ""
"最も最近開かれた開始タグのテキスト部分を返します。このテキストは必ずしも元"
"データを構造化する上で必須ではありませんが、 \"広く知られている (as "
"deployed)\" HTML を扱ったり、入力を最小限の変更で再生成 (属性間の空白をそのま"
"まにする、など) したりする場合に便利なことがあります。"

#: ../../library/html.parser.rst:122
msgid ""
"The following methods are called when data or markup elements are "
"encountered and they are meant to be overridden in a subclass.  The base "
"class implementations do nothing (except for :meth:`~HTMLParser."
"handle_startendtag`):"
msgstr ""
"以下のメソッドはデータまたはマークアップ要素が見つかる度に呼び出されます。こ"
"れらはサブクラスで上書きされることを想定されています。基底クラスの実装は (:"
"meth:`~HTMLParser.handle_startendtag` を除き) 何もしません:"

#: ../../library/html.parser.rst:129
msgid ""
"This method is called to handle the start tag of an element (e.g. ``<div "
"id=\"main\">``)."
msgstr ""
"このメソッドは要素の開始タグを扱うために呼び出されます (例: ``<div "
"id=\"main\">``)。"

#: ../../library/html.parser.rst:131
msgid ""
"The *tag* argument is the name of the tag converted to lower case. The "
"*attrs* argument is a list of ``(name, value)`` pairs containing the "
"attributes found inside the tag's ``<>`` brackets.  The *name* will be "
"translated to lower case, and quotes in the *value* have been removed, and "
"character and entity references have been replaced."
msgstr ""
"引数 *tag* はタグの名前で、小文字に変換されます。引数 *attrs* は ``(name, "
"value)`` のペアからなるリストで、タグの ``<>`` 括弧内にある属性が収められてい"
"ます。*name* は小文字に変換され、*value* 内の引用符は取り除かれ、文字参照と実"
"態参照は置き換えられます。"

#: ../../library/html.parser.rst:137
msgid ""
"For instance, for the tag ``<A HREF=\"https://www.cwi.nl/\">``, this method "
"would be called as ``handle_starttag('a', [('href', 'https://www.cwi."
"nl/')])``."
msgstr ""
"例えば、タグ ``<A HREF=\"https://www.cwi.nl/\">`` を処理する場合、このメソッ"
"ドは ``handle_starttag('a', [('href', 'https://www.cwi.nl/')])`` として呼び出"
"されます。"

#: ../../library/html.parser.rst:140
msgid ""
"All entity references from :mod:`html.entities` are replaced in the "
"attribute values."
msgstr ""
":mod:`html.entities` からのすべての実態参照は、属性値に置き換えられます。"

#: ../../library/html.parser.rst:146
msgid ""
"This method is called to handle the end tag of an element (e.g. ``</div>``)."
msgstr ""
"このメソッドは要素の終了タグを扱うために呼び出されます (例: ``</div>``)。"

#: ../../library/html.parser.rst:148
msgid "The *tag* argument is the name of the tag converted to lower case."
msgstr "引数 *tag* はタグの名前で、小文字に変換されます。"

#: ../../library/html.parser.rst:153
msgid ""
"Similar to :meth:`handle_starttag`, but called when the parser encounters an "
"XHTML-style empty tag (``<img ... />``).  This method may be overridden by "
"subclasses which require this particular lexical information; the default "
"implementation simply calls :meth:`handle_starttag` and :meth:"
"`handle_endtag`."
msgstr ""
":meth:`handle_starttag` と似ていますが、パーサーが XHTML 形式の空タグ "
"(``<img ... />``) を見つける度に呼び出されます。この特定の字句情報が必要な場"
"合にこのメソッドをサブクラスで上書きすることができます; 既定の実装では、単"
"に :meth:`handle_starttag` および :meth:`handle_endtag` を呼び出します。"

#: ../../library/html.parser.rst:161
msgid ""
"This method is called to process arbitrary data (e.g. text nodes and the "
"content of ``<script>...</script>`` and ``<style>...</style>``)."
msgstr ""
"このメソッドは任意のデータを処理するために呼び出されます (例: テキストノード"
"および ``<script>...</script>`` aや ``<style>...</style>`` の内容)。"

#: ../../library/html.parser.rst:167
msgid ""
"This method is called to process a named character reference of the form "
"``&name;`` (e.g. ``&gt;``), where *name* is a general entity reference (e.g. "
"``'gt'``).  This method is never called if *convert_charrefs* is ``True``."
msgstr ""
"このメソッドは ``&name;`` 形式の名前指定文字参照 (例: ``&gt;``) を処理するた"
"めに呼び出されます。*name* は一般実体参照になります (例: ``'gt'``)。このメ"
"ソッドは *convert_charrefs* が ``True`` なら呼び出されることはありません。"

#: ../../library/html.parser.rst:175
msgid ""
"This method is called to process decimal and hexadecimal numeric character "
"references of the form :samp:`&#{NNN};` and :samp:`&#x{NNN};`.  For example, "
"the decimal equivalent for ``&gt;`` is ``&#62;``, whereas the hexadecimal is "
"``&#x3E;``; in this case the method will receive ``'62'`` or ``'x3E'``.  "
"This method is never called if *convert_charrefs* is ``True``."
msgstr ""
"このメソッドは :samp:`&#{NNN};` あるいは :samp:`&#x{NNN};` 形式の 10進および "
"16 進数値文字参照を処理するために呼び出されます。例えば、``&gt;`` と等価な "
"10 進数は ``&#62;`` で、16進数は ``&#x3E;`` になります。この場合、メソッドは "
"``'62'`` あるいは ``'x3E'`` を受け取ります。このメソッドは "
"*convert_charrefs* が ``True`` なら呼び出されることはありません。"

#: ../../library/html.parser.rst:184
msgid ""
"This method is called when a comment is encountered (e.g. ``<!--comment--"
">``)."
msgstr ""
"このメソッドはコメントが見つかった場合に呼び出されます (例: ``<!--comment--"
">``)。"

#: ../../library/html.parser.rst:186
msgid ""
"For example, the comment ``<!-- comment -->`` will cause this method to be "
"called with the argument ``' comment '``."
msgstr ""
"例えば、コメント ``<!-- comment -->`` があると。このメソッドを引数 ``' "
"comment '`` で呼び出されます。"

#: ../../library/html.parser.rst:189
msgid ""
"The content of Internet Explorer conditional comments (condcoms) will also "
"be sent to this method, so, for ``<!--[if IE 9]>IE9-specific content<!"
"[endif]-->``, this method will receive ``'[if IE 9]>IE9-specific content<!"
"[endif]'``."
msgstr ""
"Internet Explorer 独自拡張の条件付きコメント (condcoms) はこのメソッドに送る"
"ことができます。``<!--[if IE 9]>IE9-specific content<![endif]-->`` の場合、こ"
"のメソッドは ``'[if IE 9]>IE9-specific content<![endif]'`` を受け取ります。"

#: ../../library/html.parser.rst:196
msgid ""
"This method is called to handle an HTML doctype declaration (e.g. ``<!"
"DOCTYPE html>``)."
msgstr ""
"このメソッドは HTML doctype 宣言を扱うために呼び出されます (例: ``<!DOCTYPE "
"html>``)。"

#: ../../library/html.parser.rst:199
msgid ""
"The *decl* parameter will be the entire contents of the declaration inside "
"the ``<!...>`` markup (e.g. ``'DOCTYPE html'``)."
msgstr ""
"引数 *decl* は ``<!...>`` マークアップ内の宣言の内容全体になります (例: "
"``'DOCTYPE html'``)。"

#: ../../library/html.parser.rst:205
msgid ""
"Method called when a processing instruction is encountered.  The *data* "
"parameter will contain the entire processing instruction. For example, for "
"the processing instruction ``<?proc color='red'>``, this method would be "
"called as ``handle_pi(\"proc color='red'\")``.  It is intended to be "
"overridden by a derived class; the base class implementation does nothing."
msgstr ""
"処理指令が見つかった場合に呼び出されます。*data* には、処理指令全体が含まれ、"
"例えば ``<?proc color='red'>`` という処理指令の場合、``handle_pi(\"proc "
"color='red'\")`` のように呼び出されます。このメソッドは派生クラスで上書きする"
"ためのメソッドです; 基底クラスの実装では何も行いません。"

#: ../../library/html.parser.rst:213
msgid ""
"The :class:`HTMLParser` class uses the SGML syntactic rules for processing "
"instructions.  An XHTML processing instruction using the trailing ``'?'`` "
"will cause the ``'?'`` to be included in *data*."
msgstr ""
":class:`HTMLParser` クラスでは、処理指令に SGML の構文を使用します。末尾に "
"``'?'`` がある XHTML の処理指令では、 ``'?'`` が *data* に含まれることになり"
"ます。"

#: ../../library/html.parser.rst:220
msgid ""
"This method is called when an unrecognized declaration is read by the parser."
msgstr "このメソッドはパーサーが未知の宣言を読み込んだ時に呼び出されます。"

#: ../../library/html.parser.rst:222
msgid ""
"The *data* parameter will be the entire contents of the declaration inside "
"the ``<![...]>`` markup.  It is sometimes useful to be overridden by a "
"derived class.  The base class implementation does nothing."
msgstr ""
"パラメータ *data* は ``<![...]>`` マークアップ内の宣言の内容全体になりま"
"す。\n"
"これは派生クラスで上書きする時に役立つことがあります。\n"
"基底クラスの実装では何もしません。"

#: ../../library/html.parser.rst:230
msgid "Examples"
msgstr "使用例"

#: ../../library/html.parser.rst:232
msgid ""
"The following class implements a parser that will be used to illustrate more "
"examples::"
msgstr "以下のクラスは、より多くの例を示すのに用いられるパーサーの実装です::"

#: ../../library/html.parser.rst:235
msgid ""
"from html.parser import HTMLParser\n"
"from html.entities import name2codepoint\n"
"\n"
"class MyHTMLParser(HTMLParser):\n"
"    def handle_starttag(self, tag, attrs):\n"
"        print(\"Start tag:\", tag)\n"
"        for attr in attrs:\n"
"            print(\"     attr:\", attr)\n"
"\n"
"    def handle_endtag(self, tag):\n"
"        print(\"End tag  :\", tag)\n"
"\n"
"    def handle_data(self, data):\n"
"        print(\"Data     :\", data)\n"
"\n"
"    def handle_comment(self, data):\n"
"        print(\"Comment  :\", data)\n"
"\n"
"    def handle_entityref(self, name):\n"
"        c = chr(name2codepoint[name])\n"
"        print(\"Named ent:\", c)\n"
"\n"
"    def handle_charref(self, name):\n"
"        if name.startswith('x'):\n"
"            c = chr(int(name[1:], 16))\n"
"        else:\n"
"            c = chr(int(name))\n"
"        print(\"Num ent  :\", c)\n"
"\n"
"    def handle_decl(self, data):\n"
"        print(\"Decl     :\", data)\n"
"\n"
"parser = MyHTMLParser()"
msgstr ""

#: ../../library/html.parser.rst:269
msgid "Parsing a doctype::"
msgstr "doctype をパースします::"

#: ../../library/html.parser.rst:271
msgid ""
">>> parser.feed('<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" '\n"
"...             '\"http://www.w3.org/TR/html4/strict.dtd\">')\n"
"Decl     : DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3."
"org/TR/html4/strict.dtd\""
msgstr ""

#: ../../library/html.parser.rst:275
msgid "Parsing an element with a few attributes and a title::"
msgstr "要素のタイトルと一部属性をパースします::"

#: ../../library/html.parser.rst:277
msgid ""
">>> parser.feed('<img src=\"python-logo.png\" alt=\"The Python logo\">')\n"
"Start tag: img\n"
"     attr: ('src', 'python-logo.png')\n"
"     attr: ('alt', 'The Python logo')\n"
">>>\n"
">>> parser.feed('<h1>Python</h1>')\n"
"Start tag: h1\n"
"Data     : Python\n"
"End tag  : h1"
msgstr ""

#: ../../library/html.parser.rst:287
msgid ""
"The content of ``script`` and ``style`` elements is returned as is, without "
"further parsing::"
msgstr ""
"それ以上のパースを行わずに、``script`` と ``style`` 要素の内容をそのまま返し"
"ます::"

#: ../../library/html.parser.rst:290
msgid ""
">>> parser.feed('<style type=\"text/css\">#python { color: green }</"
"style>')\n"
"Start tag: style\n"
"     attr: ('type', 'text/css')\n"
"Data     : #python { color: green }\n"
"End tag  : style\n"
"\n"
">>> parser.feed('<script type=\"text/javascript\">'\n"
"...             'alert(\"<strong>hello!</strong>\");</script>')\n"
"Start tag: script\n"
"     attr: ('type', 'text/javascript')\n"
"Data     : alert(\"<strong>hello!</strong>\");\n"
"End tag  : script"
msgstr ""

#: ../../library/html.parser.rst:303
msgid "Parsing comments::"
msgstr "コメントをパースします::"

#: ../../library/html.parser.rst:305
msgid ""
">>> parser.feed('<!-- a comment -->'\n"
"...             '<!--[if IE 9]>IE-specific content<![endif]-->')\n"
"Comment  :  a comment\n"
"Comment  : [if IE 9]>IE-specific content<![endif]"
msgstr ""

#: ../../library/html.parser.rst:310
msgid ""
"Parsing named and numeric character references and converting them to the "
"correct char (note: these 3 references are all equivalent to ``'>'``)::"
msgstr ""
"名前指定および数値文字参照をパースし、正しい文字に変換します (注: これら 3 個"
"の参照はすべて ``'>'`` と等価です)::"

#: ../../library/html.parser.rst:313
msgid ""
">>> parser.feed('&gt;&#62;&#x3E;')\n"
"Named ent: >\n"
"Num ent  : >\n"
"Num ent  : >"
msgstr ""

#: ../../library/html.parser.rst:318
msgid ""
"Feeding incomplete chunks to :meth:`~HTMLParser.feed` works, but :meth:"
"`~HTMLParser.handle_data` might be called more than once (unless "
"*convert_charrefs* is set to ``True``)::"
msgstr ""
"不完全なチャンクを :meth:`~HTMLParser.feed` に入力しても、"
"(*convert_charrefs* が ``True`` に設定されていない限り) :meth:`~HTMLParser."
"handle_data` は 1 回以上呼び出される場合があります::"

#: ../../library/html.parser.rst:322
msgid ""
">>> for chunk in ['<sp', 'an>buff', 'ered ', 'text</s', 'pan>']:\n"
"...     parser.feed(chunk)\n"
"...\n"
"Start tag: span\n"
"Data     : buff\n"
"Data     : ered\n"
"Data     : text\n"
"End tag  : span"
msgstr ""

#: ../../library/html.parser.rst:331
msgid "Parsing invalid HTML (e.g. unquoted attributes) also works::"
msgstr ""
"不正な HTML (例えば属性が引用符で括られていない) のパースも動作します::"

#: ../../library/html.parser.rst:333
msgid ""
">>> parser.feed('<p><a class=link href=#main>tag soup</p ></a>')\n"
"Start tag: p\n"
"Start tag: a\n"
"     attr: ('class', 'link')\n"
"     attr: ('href', '#main')\n"
"Data     : tag soup\n"
"End tag  : p\n"
"End tag  : a"
msgstr ""

#: ../../library/html.parser.rst:9
msgid "HTML"
msgstr "HTML"

#: ../../library/html.parser.rst:9
msgid "XHTML"
msgstr "XHTML"
