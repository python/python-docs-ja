# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2018
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:22+0000\n"
"Last-Translator: tomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/tokenize.rst:2
msgid ":mod:`tokenize` --- Tokenizer for Python source"
msgstr ":mod:`tokenize` --- Pythonソースのためのトークナイザ"

#: ../../library/tokenize.rst:10
msgid "**Source code:** :source:`Lib/tokenize.py`"
msgstr "**ソースコード:** :source:`Lib/tokenize.py`"

#: ../../library/tokenize.rst:14
msgid ""
"The :mod:`tokenize` module provides a lexical scanner for Python source "
"code, implemented in Python.  The scanner in this module returns comments as "
"tokens as well, making it useful for implementing \"pretty-printers,\" "
"including colorizers for on-screen displays."
msgstr ""
":mod:`tokenize` モジュールでは、Python で実装された Python ソースコードの字句"
"解析器を提供します。さらに、このモジュールの字句解析器はコメントもトークンと"
"して返します。このため、このモジュールはスクリーン上で表示する際の色付け機能 "
"(colorizers) を含む \"清書出力器 (pretty-printer)\" を実装する上で便利です。"

#: ../../library/tokenize.rst:19
msgid ""
"To simplify token stream handling, all :ref:`operator <operators>` and :ref:"
"`delimiter <delimiters>` tokens and :data:`Ellipsis` are returned using the "
"generic :data:`~token.OP` token type.  The exact type can be determined by "
"checking the ``exact_type`` property on the :term:`named tuple` returned "
"from :func:`tokenize.tokenize`."
msgstr ""

#: ../../library/tokenize.rst:26
msgid "Tokenizing Input"
msgstr "入力のトークナイズ"

#: ../../library/tokenize.rst:28
msgid "The primary entry point is a :term:`generator`:"
msgstr "第一のエントリポイントはジェネレータ(:term:`generator`)です:"

#: ../../library/tokenize.rst:32
msgid ""
"The :func:`.tokenize` generator requires one argument, *readline*, which "
"must be a callable object which provides the same interface as the :meth:`io."
"IOBase.readline` method of file objects.  Each call to the function should "
"return one line of input as bytes."
msgstr ""

#: ../../library/tokenize.rst:37
msgid ""
"The generator produces 5-tuples with these members: the token type; the "
"token string; a 2-tuple ``(srow, scol)`` of ints specifying the row and "
"column where the token begins in the source; a 2-tuple ``(erow, ecol)`` of "
"ints specifying the row and column where the token ends in the source; and "
"the line on which the token was found. The line passed (the last tuple item) "
"is the *logical* line; continuation lines are included.  The 5 tuple is "
"returned as a :term:`named tuple` with the field names: ``type string start "
"end line``."
msgstr ""
"このジェネレータは次の5要素のタプルを返します; トークンタイプ; トークン文字"
"列; ソース内でそのトークンがどの行、列で開始するかを示す int の ``(srow, "
"scol)`` タプル; どの行、列で終了するかを示す int の ``(erow, ecol)`` タプル; "
"トークンが見つかった行。 (タプルの最後の要素にある) 行は *論理* 行で、継続行"
"が含まれます。この5要素のタプルは :term:`named tuple` として返され、フィール"
"ド名は ``type string start end line`` になります。"

#: ../../library/tokenize.rst:46
msgid ""
"The returned :term:`named tuple` has an additional property named "
"``exact_type`` that contains the exact operator type for :data:`token.OP` "
"tokens.  For all other token types ``exact_type`` equals the named tuple "
"``type`` field."
msgstr ""

#: ../../library/tokenize.rst:51
msgid "Added support for named tuples."
msgstr "named tuple のサポートを追加。"

#: ../../library/tokenize.rst:54
msgid "Added support for ``exact_type``."
msgstr "``exact_type`` のサポートを追加。"

#: ../../library/tokenize.rst:57
msgid ""
":func:`.tokenize` determines the source encoding of the file by looking for "
"a UTF-8 BOM or encoding cookie, according to :pep:`263`."
msgstr ""

#: ../../library/tokenize.rst:61
msgid ""
"All constants from the :mod:`token` module are also exported from :mod:"
"`tokenize`, as are three additional token type values:"
msgstr ""
":mod:`token` モジュールの全ての定数は :mod:`tokenize` モジュールからも公開さ"
"れており、加えて次の3つトークンタイプが公開されています:"

#: ../../library/tokenize.rst:66
msgid "Token value used to indicate a comment."
msgstr "コメントであることを表すために使われるトークン値です。"

#: ../../library/tokenize.rst:71
msgid ""
"Token value used to indicate a non-terminating newline.  The NEWLINE token "
"indicates the end of a logical line of Python code; NL tokens are generated "
"when a logical line of code is continued over multiple physical lines."
msgstr ""
"終わりではない改行を表すために使われるトークン値。NEWLINE トークンは Python"
"コードの論理行の終わりを表します。NLトークンはコードの論理行が複数の物理行に"
"わたって続いているときに作られます。"

#: ../../library/tokenize.rst:78
msgid ""
"Token value that indicates the encoding used to decode the source bytes into "
"text. The first token returned by :func:`.tokenize` will always be an "
"ENCODING token."
msgstr ""

#: ../../library/tokenize.rst:83
msgid ""
"Another function is provided to reverse the tokenization process. This is "
"useful for creating tools that tokenize a script, modify the token stream, "
"and write back the modified script."
msgstr ""
"もう一つの関数がトークン化プロセスを逆転するために提供されています。これは、"
"スクリプトを字句解析し、トークンのストリームに変更を加え、変更されたスクリプ"
"トを書き戻すようなツールを作成する際に便利です。"

#: ../../library/tokenize.rst:90
msgid ""
"Converts tokens back into Python source code.  The *iterable* must return "
"sequences with at least two elements, the token type and the token string. "
"Any additional sequence elements are ignored."
msgstr ""
"トークンの列を Python ソースコードに変換します。 *iterable* は少なくとも二つ"
"の要素、トークンタイプおよびトークン文字列、からなるシーケンスを返さなければ"
"いけません。 その他のシーケンスの要素は無視されます。"

#: ../../library/tokenize.rst:94
msgid ""
"The reconstructed script is returned as a single string.  The result is "
"guaranteed to tokenize back to match the input so that the conversion is "
"lossless and round-trips are assured.  The guarantee applies only to the "
"token type and token string as the spacing between tokens (column positions) "
"may change."
msgstr ""
"再構築されたスクリプトは一つの文字列として返されます。得られる結果はもう一度"
"字句解析すると入力と一致することが保証されるので、変換がロスレスでありラウン"
"ドトリップできることは間違いありません。この保証はトークン型およびトークン文"
"字列に対してのものでトークン間のスペース (コラム位置)のようなものは変わること"
"があり得ます。"

#: ../../library/tokenize.rst:100
msgid ""
"It returns bytes, encoded using the ENCODING token, which is the first token "
"sequence output by :func:`.tokenize`."
msgstr ""

#: ../../library/tokenize.rst:104
msgid ""
":func:`.tokenize` needs to detect the encoding of source files it tokenizes. "
"The function it uses to do this is available:"
msgstr ""

#: ../../library/tokenize.rst:109
msgid ""
"The :func:`detect_encoding` function is used to detect the encoding that "
"should be used to decode a Python source file. It requires one argument, "
"readline, in the same way as the :func:`.tokenize` generator."
msgstr ""

#: ../../library/tokenize.rst:113
msgid ""
"It will call readline a maximum of twice, and return the encoding used (as a "
"string) and a list of any lines (not decoded from bytes) it has read in."
msgstr ""
"readline を最大2回呼び出し、利用するエンコーディング (文字列として) と、読み"
"込んだ行を (bytes からデコードされないままの状態で) 返します。"

#: ../../library/tokenize.rst:117
msgid ""
"It detects the encoding from the presence of a UTF-8 BOM or an encoding "
"cookie as specified in :pep:`263`. If both a BOM and a cookie are present, "
"but disagree, a SyntaxError will be raised. Note that if the BOM is found, "
"``'utf-8-sig'`` will be returned as an encoding."
msgstr ""
"UTF-8 BOM か :pep:`263` で定義されている encoding cookie からエンコーディング"
"を検出します。BOMと cookie の両方が存在し、一致していない場合、 SyntaxError "
"例外を発生させます。 BOM が見つかった場合はエンコーディングとして ``'utf-8-"
"sig'`` が返されます。"

#: ../../library/tokenize.rst:122
msgid ""
"If no encoding is specified, then the default of ``'utf-8'`` will be "
"returned."
msgstr ""
"エンコーディングが指定されていない場合、デフォルトの ``'utf-8'`` が返されま"
"す。"

#: ../../library/tokenize.rst:125
msgid ""
"Use :func:`.open` to open Python source files: it uses :func:"
"`detect_encoding` to detect the file encoding."
msgstr ""

#: ../../library/tokenize.rst:131
msgid ""
"Open a file in read only mode using the encoding detected by :func:"
"`detect_encoding`."
msgstr ""
":func:`detect_encoding` を使って検出したエンコーディングを利用して、ファイル"
"を読み出し専用モードで開きます。"

#: ../../library/tokenize.rst:138
msgid ""
"Raised when either a docstring or expression that may be split over several "
"lines is not completed anywhere in the file, for example::"
msgstr ""
"docstring や複数行にわたることが許される式がファイル内のどこかで終わっていな"
"い場合に送出されます。例えば::"

#: ../../library/tokenize.rst:144
msgid "or::"
msgstr "もしくは::"

#: ../../library/tokenize.rst:150
msgid ""
"Note that unclosed single-quoted strings do not cause an error to be raised. "
"They are tokenized as ``ERRORTOKEN``, followed by the tokenization of their "
"contents."
msgstr ""
"閉じていないシングルクォート文字列は送出されるべきエラーの原因とならないこと"
"に注意してください。それらは ``ERRORTOKEN`` とトークン化され、続いてその内容"
"がトークン化されます。"

#: ../../library/tokenize.rst:158
msgid "Command-Line Usage"
msgstr "コマンドラインからの使用"

#: ../../library/tokenize.rst:162
msgid ""
"The :mod:`tokenize` module can be executed as a script from the command "
"line. It is as simple as:"
msgstr ""
":mod:`tokenize` モジュールはコマンドラインからスクリプトとして実行することが"
"できます。次のようにシンプルに利用できます:"

#: ../../library/tokenize.rst:169
msgid "The following options are accepted:"
msgstr "以下のオプションが使用できます:"

#: ../../library/tokenize.rst:175
msgid "show this help message and exit"
msgstr "このヘルプメッセージを出力して終了します"

#: ../../library/tokenize.rst:179
msgid "display token names using the exact type"
msgstr "exact type を使ってトークン名を表示します"

#: ../../library/tokenize.rst:181
msgid ""
"If :file:`filename.py` is specified its contents are tokenized to stdout. "
"Otherwise, tokenization is performed on stdin."
msgstr ""
":file:`filename.py` が指定された場合、その内容がトークナイズされ stdout に出"
"力されます。指定されなかった場合は stdin からトークナイズします。"

#: ../../library/tokenize.rst:185
msgid "Examples"
msgstr "使用例"

#: ../../library/tokenize.rst:187
msgid ""
"Example of a script rewriter that transforms float literals into Decimal "
"objects::"
msgstr ""
"スクリプト書き換えの例で、浮動小数点数リテラルを Decimal オブジェクトに変換し"
"ます::"

#: ../../library/tokenize.rst:229
msgid "Example of tokenizing from the command line.  The script::"
msgstr "コマンドラインからトークナイズする例。次のスクリプトが::"

#: ../../library/tokenize.rst:236
msgid ""
"will be tokenized to the following output where the first column is the "
"range of the line/column coordinates where the token is found, the second "
"column is the name of the token, and the final column is the value of the "
"token (if any)"
msgstr ""
"トークナイズされて次のような出力になります。最初のカラムはトークンが現れた行"
"／カラム、次のカラムはトークンの名前、最後のカラムは (あれば) トークンの値で"
"す"

#: ../../library/tokenize.rst:264
msgid "The exact token type names can be displayed using the ``-e`` option:"
msgstr "トークンの exact_type 名は ``-e`` オプションで表示できます:"
