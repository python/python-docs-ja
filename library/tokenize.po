# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/tokenize.rst:2
msgid ":mod:`tokenize` --- Tokenizer for Python source"
msgstr ":mod:`tokenize` --- Pythonソースのためのトークナイザ"

#: ../../library/tokenize.rst:9
msgid "**Source code:** :source:`Lib/tokenize.py`"
msgstr "**ソースコード:** :source:`Lib/tokenize.py`"

#: ../../library/tokenize.rst:13
msgid ""
"The :mod:`tokenize` module provides a lexical scanner for Python source "
"code, implemented in Python.  The scanner in this module returns comments as "
"tokens as well, making it useful for implementing \"pretty-printers,\" "
"including colorizers for on-screen displays."
msgstr ""
":mod:`tokenize` モジュールでは、Python で実装された Python ソースコードの字句"
"解析器を提供します。さらに、このモジュールの字句解析器はコメントもトークンと"
"して返します。このため、このモジュールはスクリーン上で表示する際の色付け機能 "
"(colorizers) を含む \"清書出力器 (pretty-printer)\" を実装する上で便利です。"

#: ../../library/tokenize.rst:18
msgid ""
"To simplify token stream handling, all :ref:`operators` and :ref:"
"`delimiters` tokens are returned using the generic :data:`token.OP` token "
"type.  The exact type can be determined by checking the second field "
"(containing the actual token string matched) of the tuple returned from :"
"func:`tokenize.generate_tokens` for the character sequence that identifies a "
"specific operator token."
msgstr ""
"トークンストリームの扱いをシンプルにするために、全ての :ref:`operators` と :"
"ref:`delimiters` トークンはジェネリックな :data:`token.OP` トークンタイプとし"
"て返されます。正確な型は :func:`tokenize.generate_tokens` からの戻り値のタプ"
"ルの 2 番目のフィールド (実際のマッチしたトークン文字列を含んでいます) を特定"
"の演算子トークンを識別する文字シーケンスかチェックすれば決定出来ます。"

#: ../../library/tokenize.rst:25
msgid "The primary entry point is a :term:`generator`:"
msgstr "第一のエントリポイントはジェネレータ(:term:`generator`)です:"

#: ../../library/tokenize.rst:29
msgid ""
"The :func:`generate_tokens` generator requires one argument, *readline*, "
"which must be a callable object which provides the same interface as the :"
"meth:`~file.readline` method of built-in file objects (see section :ref:"
"`bltin-file-objects`).  Each call to the function should return one line of "
"input as a string. Alternately, *readline* may be a callable object that "
"signals completion by raising :exc:`StopIteration`."
msgstr ""
":func:`generate_tokens` ジェネレータは一つの引数 *readline* を必要とします。"
"この引数は呼び出し可能オブジェクトで、組み込みファイルオブジェクトにおける :"
"meth:`~file.readline` メソッドと同じインタフェースを提供していなければなりま"
"せん (:ref:`bltin-file-objects` 節を参照してください)。この関数は呼び出しのた"
"びに入力内の一行を文字列で返さなければなりません。もしくは、 *readline* を :"
"exc:`StopIteration` を送出することで完了を知らせる呼び出し可能オブジェクトと"
"することもできます。"

#: ../../library/tokenize.rst:36
msgid ""
"The generator produces 5-tuples with these members: the token type; the "
"token string; a 2-tuple ``(srow, scol)`` of ints specifying the row and "
"column where the token begins in the source; a 2-tuple ``(erow, ecol)`` of "
"ints specifying the row and column where the token ends in the source; and "
"the line on which the token was found.  The line passed (the last tuple "
"item) is the *logical* line; continuation lines are included."
msgstr ""
"このジェネレータは次の 5 要素のタプルを返します; トークンタイプ; トークン文字"
"列; ソース内でそのトークンがどの行、列で開始するかを示す int の ``(srow, "
"scol)`` タプル; どの行、列で終了するかを示す int の ``(erow, ecol)`` タプル; "
"トークンが見つかった行。 (タプルの最後の要素にある) 行は *論理* 行で、継続行"
"が含まれます。"

#: ../../library/tokenize.rst:45
msgid "An older entry point is retained for backward compatibility:"
msgstr "後方互換性のために古いエントリポイントが残されています:"

#: ../../library/tokenize.rst:50
msgid ""
"The :func:`.tokenize` function accepts two parameters: one representing the "
"input stream, and one providing an output mechanism for :func:`.tokenize`."
msgstr ""
":func:`.tokenize` 関数は二つのパラメータを取ります: 一つは入力ストリームを表"
"し、もう一つは :func:`.tokenize` のための出力メカニズムを与えます。"

#: ../../library/tokenize.rst:53
msgid ""
"The first parameter, *readline*, must be a callable object which provides "
"the same interface as the :meth:`~file.readline` method of built-in file "
"objects (see section :ref:`bltin-file-objects`).  Each call to the function "
"should return one line of input as a string. Alternately, *readline* may be "
"a callable object that signals completion by raising :exc:`StopIteration`."
msgstr ""
"最初のパラメータ、 *readline* は、組み込みファイルオブジェクトの :meth:"
"`~file.readline` メソッドと同じインタフェイスを提供する呼び出し可能オブジェク"
"トでなければなりません ( :ref:`bltin-file-objects` 節を参照)。この関数は呼び"
"出しのたびに入力内の一行を文字列で返さなければなりません。もしくは、 "
"*readline* を :exc:`StopIteration` を送出することで完了を知らせる呼び出し可能"
"オブジェクトとすることもできます。"

#: ../../library/tokenize.rst:59
msgid "Added :exc:`StopIteration` support."
msgstr ":exc:`StopIteration` サポートの追加。"

#: ../../library/tokenize.rst:62
msgid ""
"The second parameter, *tokeneater*, must also be a callable object.  It is "
"called once for each token, with five arguments, corresponding to the tuples "
"generated by :func:`generate_tokens`."
msgstr ""
"二番目のパラメータ *tokeneater* も呼び出し可能オブジェクトでなければなりませ"
"ん。この関数は各トークンに対して一度だけ呼び出され、 :func:`generate_tokens` "
"が生成するタプルに対応する 5 つの引数をとります。"

#: ../../library/tokenize.rst:66
msgid ""
"All constants from the :mod:`token` module are also exported from :mod:"
"`tokenize`, as are two additional token type values that might be passed to "
"the *tokeneater* function by :func:`.tokenize`:"
msgstr ""
":mod:`token` モジュールの全ての定数は :mod:`tokenize` でも公開されており、こ"
"れに加え、以下の二つのトークン値が :func:`.tokenize` の *tokeneater* 関数に渡"
"される可能性があります:"

#: ../../library/tokenize.rst:73
msgid "Token value used to indicate a comment."
msgstr "コメントであることを表すために使われるトークン値です。"

#: ../../library/tokenize.rst:78
msgid ""
"Token value used to indicate a non-terminating newline.  The NEWLINE token "
"indicates the end of a logical line of Python code; NL tokens are generated "
"when a logical line of code is continued over multiple physical lines."
msgstr ""
"終わりではない改行を表すために使われるトークン値。NEWLINE トークンは Python"
"コードの論理行の終わりを表します。NLトークンはコードの論理行が複数の物理行に"
"わたって続いているときに作られます。"

#: ../../library/tokenize.rst:82
msgid ""
"Another function is provided to reverse the tokenization process. This is "
"useful for creating tools that tokenize a script, modify the token stream, "
"and write back the modified script."
msgstr ""
"もう一つの関数がトークン化プロセスを逆転するために提供されています。これは、"
"スクリプトを字句解析し、トークンのストリームに変更を加え、変更されたスクリプ"
"トを書き戻すようなツールを作成する際に便利です。"

#: ../../library/tokenize.rst:89
msgid ""
"Converts tokens back into Python source code.  The *iterable* must return "
"sequences with at least two elements, the token type and the token string.  "
"Any additional sequence elements are ignored."
msgstr ""
"トークンの列を Python ソースコードに変換します。 *iterable* は少なくとも二つ"
"の要素、トークンタイプおよびトークン文字列、からなるシーケンスを返さなければ"
"いけません。 その他のシーケンスの要素は無視されます。"

#: ../../library/tokenize.rst:93
msgid ""
"The reconstructed script is returned as a single string.  The result is "
"guaranteed to tokenize back to match the input so that the conversion is "
"lossless and round-trips are assured.  The guarantee applies only to the "
"token type and token string as the spacing between tokens (column positions) "
"may change."
msgstr ""
"再構築されたスクリプトは一つの文字列として返されます。得られる結果はもう一度"
"字句解析すると入力と一致することが保証されるので、変換がロスレスでありラウン"
"ドトリップできることは間違いありません。この保証はトークン型およびトークン文"
"字列に対してのものでトークン間のスペース (コラム位置)のようなものは変わること"
"があり得ます。"

#: ../../library/tokenize.rst:103
msgid ""
"Raised when either a docstring or expression that may be split over several "
"lines is not completed anywhere in the file, for example::"
msgstr ""
"docstring や複数行にわたることが許される式がファイル内のどこかで終わっていな"
"い場合に送出されます。例えば::"

#: ../../library/tokenize.rst:109
msgid "or::"
msgstr "もしくは::"

#: ../../library/tokenize.rst:115
msgid ""
"Note that unclosed single-quoted strings do not cause an error to be raised. "
"They are tokenized as ``ERRORTOKEN``, followed by the tokenization of their "
"contents."
msgstr ""
"閉じていないシングルクォート文字列は送出されるべきエラーの原因とならないこと"
"に注意してください。それらは ``ERRORTOKEN`` とトークン化され、続いてその内容"
"がトークン化されます。"

#: ../../library/tokenize.rst:119
msgid ""
"Example of a script re-writer that transforms float literals into Decimal "
"objects::"
msgstr ""
"スクリプト書き換えの例で、浮動小数点数リテラルを Decimal オブジェクトに変換し"
"ます::"
