# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Takanori Suzuki <takanori@takanory.net>, 2023
# souma987, 2023
# Masato HASHIMOTO <cabezon.hashimoto@gmail.com>, 2023
# Arihiro TAKASE, 2023
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:17+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/venv.rst:2
msgid ":mod:`!venv` --- Creation of virtual environments"
msgstr ":mod:`!venv` --- 仮想環境の作成"

#: ../../library/venv.rst:12
msgid "**Source code:** :source:`Lib/venv/`"
msgstr "**ソースコード:** :source:`Lib/venv/`"

#: ../../library/venv.rst:21
msgid ""
"The :mod:`!venv` module supports creating lightweight \"virtual "
"environments\", each with their own independent set of Python packages "
"installed in their :mod:`site` directories. A virtual environment is created "
"on top of an existing Python installation, known as the virtual "
"environment's \"base\" Python, and may optionally be isolated from the "
"packages in the base environment, so only those explicitly installed in the "
"virtual environment are available."
msgstr ""
":mod:`!venv` モジュールは、軽量な仮想環境の作成を行います。それぞれの仮想環境"
"は、:mod:`site` ディレクトリに独立した Python パッケージの集合を持っていま"
"す。仮想環境は、ベース Python とも呼ばれる、すでにインストールされている "
"Python の上に作成され、明示的にインストールしたパッケージのみが利用可能となる"
"よう、ベース Python から隔離することもできます。"

#: ../../library/venv.rst:29
msgid ""
"When used from within a virtual environment, common installation tools such "
"as :pypi:`pip` will install Python packages into a virtual environment "
"without needing to be told to do so explicitly."
msgstr ""
"仮想環境の中から使われると、 :pypi:`pip` のような一般的なインストールツールは"
"明示的に指定しなくても仮想環境に Python パッケージをインストールします。"

#: ../../library/venv.rst:33
msgid "A virtual environment is (amongst other things):"
msgstr ""

#: ../../library/venv.rst:35
msgid ""
"Used to contain a specific Python interpreter and software libraries and "
"binaries which are needed to support a project (library or application). "
"These are by default isolated from software in other virtual environments "
"and Python interpreters and libraries installed in the operating system."
msgstr ""

#: ../../library/venv.rst:40
msgid ""
"Contained in a directory, conventionally either named ``venv`` or ``.venv`` "
"in the project directory, or under a container directory for lots of virtual "
"environments, such as ``~/.virtualenvs``."
msgstr ""

#: ../../library/venv.rst:44
msgid "Not checked into source control systems such as Git."
msgstr ""

#: ../../library/venv.rst:46
msgid ""
"Considered as disposable -- it should be simple to delete and recreate it "
"from scratch. You don't place any project code in the environment"
msgstr ""

#: ../../library/venv.rst:49
msgid ""
"Not considered as movable or copyable -- you just recreate the same "
"environment in the target location."
msgstr ""

#: ../../library/venv.rst:52
msgid "See :pep:`405` for more background on Python virtual environments."
msgstr ""
"Python仮想環境の背景についてより詳しくは :pep:`405` を参照してください。"

#: ../../library/venv.rst:56
msgid ""
"`Python Packaging User Guide: Creating and using virtual environments "
"<https://packaging.python.org/guides/installing-using-pip-and-virtual-"
"environments/#create-and-use-virtual-environments>`__"
msgstr ""
"`Python Packaging User Guide: Creating and using virtual environments "
"<https://packaging.python.org/guides/installing-using-pip-and-virtual-"
"environments/#create-and-use-virtual-environments>`__"

#: ../../includes/wasm-ios-notavail.rst:3
msgid ":ref:`Availability <availability>`: not WASI, not iOS."
msgstr ":ref:`利用可能な環境 <availability>`: WASI 及び iOS 以外。"

#: ../../includes/wasm-ios-notavail.rst:5
msgid ""
"This module does not work or is not available on WebAssembly platforms, or "
"on iOS. See :ref:`wasm-availability` for more information on WASM "
"availability; see :ref:`iOS-availability` for more information on iOS "
"availability."
msgstr ""
"このモジュールは WebAssembly プラットフォームと iOS では動作しないか、利用不"
"可です。 WASM 上での利用可能性についてのさらなる情報は :ref:`wasm-"
"availability` を、 iOS 上での利用可能性についてのさらなる情報は :ref:`iOS-"
"availability` を見てください。"

#: ../../library/venv.rst:62
msgid "Creating virtual environments"
msgstr "仮想環境の作成"

#: ../../using/venv-create.inc:1
msgid ""
"Creation of :ref:`virtual environments <venv-def>` is done by executing the "
"command ``venv``::"
msgstr ""
":ref:`仮想環境 <venv-def>` を作成するには ``venv`` コマンドを実行します::"

#: ../../using/venv-create.inc:4
msgid "python -m venv /path/to/new/virtual/environment"
msgstr ""

#: ../../using/venv-create.inc:6
msgid ""
"Running this command creates the target directory (creating any parent "
"directories that don't exist already) and places a ``pyvenv.cfg`` file in it "
"with a ``home`` key pointing to the Python installation from which the "
"command was run (a common name for the target directory is ``.venv``).  It "
"also creates a ``bin`` (or ``Scripts`` on Windows) subdirectory containing a "
"copy/symlink of the Python binary/binaries (as appropriate for the platform "
"or arguments used at environment creation time). It also creates an "
"(initially empty) ``lib/pythonX.Y/site-packages`` subdirectory (on Windows, "
"this is ``Lib\\site-packages``). If an existing directory is specified, it "
"will be re-used."
msgstr ""
"このコマンドを実行すると、ターゲットディレクトリ (および必要なだけの親ディレ"
"クトリ) が作成され、その中に ``pyvenv.cfg`` ファイルが置かれます。\n"
"そのファイルの ``home`` キーはこのコマンドを呼び出した Python のインストール"
"場所を指します (よく使われるターゲットディレクトリの名前は ``.venv`` で"
"す)。\n"
"このコマンドはまた、 Python バイナリのコピーまたはシンボリックリンク (のプ"
"ラットフォームあるいは仮想環境作成時に使われた引数に対して適切な方) を含む "
"``bin``  (Windows では ``Scripts``) サブディレクトリを作成します。\n"
"さらに、 ``lib/pythonX.Y/site-packages`` (Windows では ``Lib\\site-"
"packages``) サブディレクトリも (最初は空の状態で) 作成します。指定したディレ"
"クトリが存在している場合は、それが再利用されます。"

#: ../../using/venv-create.inc:17
msgid ""
"The use of ``venv`` is now recommended for creating virtual environments."
msgstr "仮想環境の作成には、 ``venv`` の使用が今は推奨されています。"

#: ../../using/venv-create.inc:20
msgid ""
"``pyvenv`` was the recommended tool for creating virtual environments for "
"Python 3.3 and 3.4, and is :ref:`deprecated in Python 3.6 <whatsnew36-venv>`."
msgstr ""
"Python 3.3 と 3.4 では仮想環境の作成に ``pyvenv`` が推奨されていましたが、:"
"ref:`Python 3.6 で非推奨になりました<whatsnew36-venv>`。"

#: ../../using/venv-create.inc:27
msgid "On Windows, invoke the ``venv`` command as follows::"
msgstr "Windows では、 ``venv`` コマンドは次のように実行します::"

#: ../../using/venv-create.inc:29
msgid "c:\\>Python35\\python -m venv c:\\path\\to\\myenv"
msgstr ""

#: ../../using/venv-create.inc:31
msgid ""
"Alternatively, if you configured the ``PATH`` and ``PATHEXT`` variables for "
"your :ref:`Python installation <using-on-windows>`::"
msgstr ""
"あるいは、 :ref:`インストールされている Python <using-on-windows>` のために "
"``PATH`` 変数や ``PATHEXT`` 変数が設定してある場合は次のコマンドでも実行でき"
"ます::"

#: ../../using/venv-create.inc:34
msgid "c:\\>python -m venv c:\\path\\to\\myenv"
msgstr ""

#: ../../using/venv-create.inc:36
msgid "The command, if run with ``-h``, will show the available options::"
msgstr ""
"このコマンドを ``-h`` をつけて実行すると利用できるオプションが表示されます::"

#: ../../using/venv-create.inc:38
msgid ""
"usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]\n"
"            [--upgrade] [--without-pip] [--prompt PROMPT] [--upgrade-deps]\n"
"            [--without-scm-ignore-file]\n"
"            ENV_DIR [ENV_DIR ...]\n"
"\n"
"Creates virtual Python environments in one or more target directories.\n"
"\n"
"positional arguments:\n"
"ENV_DIR               A directory to create the environment in.\n"
"\n"
"options:\n"
"-h, --help            show this help message and exit\n"
"--system-site-packages\n"
"                        Give the virtual environment access to the system\n"
"                        site-packages dir.\n"
"--symlinks            Try to use symlinks rather than copies, when\n"
"                        symlinks are not the default for the platform.\n"
"--copies              Try to use copies rather than symlinks, even when\n"
"                        symlinks are the default for the platform.\n"
"--clear               Delete the contents of the environment directory if\n"
"                        it already exists, before environment creation.\n"
"--upgrade             Upgrade the environment directory to use this\n"
"                        version of Python, assuming Python has been "
"upgraded\n"
"                        in-place.\n"
"--without-pip         Skips installing or upgrading pip in the virtual\n"
"                        environment (pip is bootstrapped by default)\n"
"--prompt PROMPT       Provides an alternative prompt prefix for this\n"
"                        environment.\n"
"--upgrade-deps        Upgrade core dependencies (pip) to the latest\n"
"                        version in PyPI\n"
"--without-scm-ignore-file\n"
"                        Skips adding the default SCM ignore file to the\n"
"                        environment directory (the default is a .gitignore\n"
"                        file).\n"
"\n"
"Once an environment has been created, you may wish to activate it, e.g. by\n"
"sourcing an activate script in its bin directory."
msgstr ""

#: ../../using/venv-create.inc:78
msgid ""
"``--without-scm-ignore-file`` was added along with creating an ignore file "
"for ``git`` by default."
msgstr ""

#: ../../library/venv.rst:323 ../../using/venv-create.inc:83
msgid "``setuptools`` is no longer a core venv dependency."
msgstr ""

#: ../../using/venv-create.inc:85
msgid ""
"Add ``--upgrade-deps`` option to upgrade pip + setuptools to the latest on "
"PyPI"
msgstr ""
"pip と setuptools を PyPI での最新版に更新するには、``--upgrade-deps`` オプ"
"ションを追加してください。"

#: ../../using/venv-create.inc:88
msgid ""
"Installs pip by default, added the ``--without-pip``  and ``--copies`` "
"options"
msgstr ""
"デフォルトで pip をインストールします。``--without-pip`` と ``--copies`` オプ"
"ションを追加しました。"

#: ../../using/venv-create.inc:92
msgid ""
"In earlier versions, if the target directory already existed, an error was "
"raised, unless the ``--clear`` or ``--upgrade`` option was provided."
msgstr ""
"以前のバージョンでは、対象となるディレクトリが既に存在していた場合は、 ``--"
"clear`` オプションや ``--upgrade`` オプションを付けない限りはエラーを送出して"
"いました。"

#: ../../using/venv-create.inc:97
msgid ""
"While symlinks are supported on Windows, they are not recommended. Of "
"particular note is that double-clicking ``python.exe`` in File Explorer will "
"resolve the symlink eagerly and ignore the virtual environment."
msgstr ""
"Windows でもシンボリックリンクはサポートされていますが、シンボリックリンクを"
"使うのは推奨されません。\n"
"特に注目すべきなのは、ファイルエクスプローラ上で ``python.exe`` をダブルク"
"リックすると、シンボリックリンクを貪欲に解決し仮想環境を無視するということで"
"す。"

#: ../../using/venv-create.inc:102
msgid ""
"On Microsoft Windows, it may be required to enable the ``Activate.ps1`` "
"script by setting the execution policy for the user. You can do this by "
"issuing the following PowerShell command:"
msgstr ""
"Microsoft Windows では、ユーザー向けの実行ポリシーを設定して ``Activate."
"ps1`` スクリプトが使えるようにする必要があるかもしれません。\n"
"この設定は次の PowerShell コマンドでできます:"

#: ../../using/venv-create.inc:106
msgid ""
"PS C:\\> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser"
msgstr ""
"PS C:\\> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser"

#: ../../using/venv-create.inc:108
msgid ""
"See `About Execution Policies <https://go.microsoft.com/fwlink/?"
"LinkID=135170>`_ for more information."
msgstr ""
"さらに詳しくは `About Execution Policies <https://go.microsoft.com/fwlink/?"
"LinkID=135170>`_ を参照してください。"

#: ../../using/venv-create.inc:112
msgid ""
"The created ``pyvenv.cfg`` file also includes the ``include-system-site-"
"packages`` key, set to ``true`` if ``venv`` is run with the ``--system-site-"
"packages`` option, ``false`` otherwise."
msgstr ""
"作成された ``pyvenv.cfg`` ファイルには、``include-system-site-packages`` キー"
"も含まれます。これは ``venv`` が ``--system-site-packages`` オプションをつけ"
"て実行されたなら ``true`` で、そうでなければ ``false`` です。"

#: ../../using/venv-create.inc:116
msgid ""
"Unless the ``--without-pip`` option is given, :mod:`ensurepip` will be "
"invoked to bootstrap ``pip`` into the virtual environment."
msgstr ""
"``--without-pip`` オプションが与えられない限り、``pip`` を仮想環境でブートす"
"るために :mod:`ensurepip` が呼ばれます。"

#: ../../using/venv-create.inc:119
msgid ""
"Multiple paths can be given to ``venv``, in which case an identical virtual "
"environment will be created, according to the given options, at each "
"provided path."
msgstr ""
"``venv`` には複数のパスを渡すことができ、その場合はそれぞれのパスに同一の仮想"
"環境が作成されます。"

#: ../../library/venv.rst:69
msgid "How venvs work"
msgstr "仮想環境のしくみ"

#: ../../library/venv.rst:71
msgid ""
"When a Python interpreter is running from a virtual environment, :data:`sys."
"prefix` and :data:`sys.exec_prefix` point to the directories of the virtual "
"environment, whereas :data:`sys.base_prefix` and :data:`sys."
"base_exec_prefix` point to those of the base Python used to create the "
"environment. It is sufficient to check ``sys.prefix != sys.base_prefix`` to "
"determine if the current interpreter is running from a virtual environment."
msgstr ""
"Python インタプリタが仮想環境で実行しているとき、:data:`sys.prefix` と :data:"
"`sys.exec_prefix` は仮想環境のディレクトリを指し示し、 :data:`sys."
"base_prefix` と :data:`sys.base_exec_prefix` は仮想環境の作成に使われたベー"
"ス Python のディレクトリを指し示します。``sys.prefix != sys.base_prefix`` を"
"調べれば、現在のインタプリタが仮想環境で実行しているかを判定できます。"

#: ../../library/venv.rst:80
msgid ""
"A virtual environment may be \"activated\" using a script in its binary "
"directory (``bin`` on POSIX; ``Scripts`` on Windows). This will prepend that "
"directory to your :envvar:`PATH`, so that running :program:`python` will "
"invoke the environment's Python interpreter and you can run installed "
"scripts without having to use their full path. The invocation of the "
"activation script is platform-specific (:samp:`{<venv>}` must be replaced by "
"the path to the directory containing the virtual environment):"
msgstr ""

#: ../../library/venv.rst:90
msgid "Platform"
msgstr "プラットフォーム"

#: ../../library/venv.rst:90
msgid "Shell"
msgstr "シェル"

#: ../../library/venv.rst:90
msgid "Command to activate virtual environment"
msgstr "仮想環境を有効化するためのコマンド"

#: ../../library/venv.rst:92
msgid "POSIX"
msgstr "POSIX"

#: ../../library/venv.rst:92
msgid "bash/zsh"
msgstr "bash/zsh"

#: ../../library/venv.rst:92
msgid ":samp:`$ source {<venv>}/bin/activate`"
msgstr ":samp:`$ source {<venv>}/bin/activate`"

#: ../../library/venv.rst:94
msgid "fish"
msgstr "fish"

#: ../../library/venv.rst:94
msgid ":samp:`$ source {<venv>}/bin/activate.fish`"
msgstr ":samp:`$ source {<venv>}/bin/activate.fish`"

#: ../../library/venv.rst:96
msgid "csh/tcsh"
msgstr "csh/tcsh"

#: ../../library/venv.rst:96
msgid ":samp:`$ source {<venv>}/bin/activate.csh`"
msgstr ":samp:`$ source {<venv>}/bin/activate.csh`"

#: ../../library/venv.rst:98 ../../library/venv.rst:102
msgid "PowerShell"
msgstr "PowerShell"

#: ../../library/venv.rst:98
msgid ":samp:`$ {<venv>}/bin/Activate.ps1`"
msgstr ":samp:`$ {<venv>}/bin/Activate.ps1`"

#: ../../library/venv.rst:100
msgid "Windows"
msgstr "Windows"

#: ../../library/venv.rst:100
msgid "cmd.exe"
msgstr "cmd.exe"

#: ../../library/venv.rst:100
msgid ":samp:`C:\\\\> {<venv>}\\\\Scripts\\\\activate.bat`"
msgstr ":samp:`C:\\\\> {<venv>}\\\\Scripts\\\\activate.bat`"

#: ../../library/venv.rst:102
msgid ":samp:`PS C:\\\\> {<venv>}\\\\Scripts\\\\Activate.ps1`"
msgstr ":samp:`PS C:\\\\> {<venv>}\\\\Scripts\\\\Activate.ps1`"

#: ../../library/venv.rst:105
msgid ":program:`fish` and :program:`csh` activation scripts."
msgstr ":program:`fish` および :program:`csh` の有効化スクリプト。"

#: ../../library/venv.rst:108
msgid ""
"PowerShell activation scripts installed under POSIX for PowerShell Core "
"support."
msgstr ""
"PowerShell Core のサポートのために POSIX 環境にインストールされた、"
"PowerShell 有効化スクリプト。"

#: ../../library/venv.rst:112
msgid ""
"You don't specifically *need* to activate a virtual environment, as you can "
"just specify the full path to that environment's Python interpreter when "
"invoking Python. Furthermore, all scripts installed in the environment "
"should be runnable without activating it."
msgstr ""
"Python を呼び出すときに仮想環境の Python インタプリタへのフルパスを指定すれば"
"良いだけなので、仮想環境をアクティベートする *必要* はありません。さらに、仮"
"想環境にインストールされたすべてのスクリプトはアクティベートせずとも実行可能"
"なはずです。"

#: ../../library/venv.rst:118
msgid ""
"In order to achieve this, scripts installed into virtual environments have a "
"\"shebang\" line which points to the environment's Python interpreter, i.e. :"
"samp:`#!/{<path-to-venv>}/bin/python`. This means that the script will run "
"with that interpreter regardless of the value of :envvar:`PATH`. On Windows, "
"\"shebang\" line processing is supported if you have the :ref:`launcher` "
"installed. Thus, double-clicking an installed script in a Windows Explorer "
"window should run it with the correct interpreter without the environment "
"needing to be activated or on the :envvar:`PATH`."
msgstr ""
"これを達成するため、仮想環境にインストールされたスクリプトは、仮想環境の "
"Python インタープリターを指し示す \"shebang\" の行を含みます i.e. :samp:`#!/"
"{<path-to-venv>}/bin/python` 。つまり、:envvar:`PATH` の値に関係なくそのスク"
"リプトはそのインタープリターを使って実行されます。Windows では、\"shebang\" "
"の行の処理は :ref:`launcher` がインストールされていれば可能です。したがって、"
"Windows のエクスプローラのウィンドウで、インストールされたスクリプトをダブル"
"クリックすると、仮想環境をアクティベートしたり :envvar:`PATH` を編集したりし"
"なくても、正しいインタープリターでスクリプトが実行されるはずです。"

#: ../../library/venv.rst:127
msgid ""
"When a virtual environment has been activated, the :envvar:`!VIRTUAL_ENV` "
"environment variable is set to the path of the environment. Since explicitly "
"activating a virtual environment is not required to use it, :envvar:`!"
"VIRTUAL_ENV` cannot be relied upon to determine whether a virtual "
"environment is being used."
msgstr ""
"仮想環境がアクティベートされると、:envvar:`!VIRTUAL_ENV` 環境変数の値が仮想環"
"境へのパスに設定されます。アクティベートしなくても仮想環境を使うことは可能な"
"ため、仮想環境が使われているか否かの判断を :envvar:`!VIRTUAL_ENV` に頼ること"
"はできません。"

#: ../../library/venv.rst:133
msgid ""
"Because scripts installed in environments should not expect the environment "
"to be activated, their shebang lines contain the absolute paths to their "
"environment's interpreters. Because of this, environments are inherently non-"
"portable, in the general case. You should always have a simple means of "
"recreating an environment (for example, if you have a requirements file "
"``requirements.txt``, you can invoke ``pip install -r requirements.txt`` "
"using the environment's ``pip`` to install all of the packages needed by the "
"environment). If for any reason you need to move the environment to a new "
"location, you should recreate it at the desired location and delete the one "
"at the old location. If you move an environment because you moved a parent "
"directory of it, you should recreate the environment in its new location. "
"Otherwise, software installed into the environment may not work as expected."
msgstr ""
"仮想環境にインストールされたスクリプトは仮想環境がアクティベートされているこ"
"とを前提とすべきではないため、shebang の行は仮想環境のインタプリタへの絶対パ"
"スを含みます。このため、本質的に、仮想環境は一般の場合ポータブルではありませ"
"ん。いつでも仮想環境を再作成できる簡単な方法を持っておくべきです（例えば、"
"``requirements.txt`` という requirements ファイルがあれば、仮想環境の "
"``pip`` を用いて、``pip install -r requirements.txt`` を呼び出すことで、仮想"
"環境が必要とするすべてのパッケージをインストールできます）。何らかの理由で仮"
"想環境を別の場所に移動する必要がある場合は、新しい場所で仮想環境を再作成し、"
"古い場所にある仮想環境を削除してください。仮想環境の親ディレクトリを移動した"
"ため仮想環境も移動された場合は、新しい場所で仮想環境を再作成する必要がありま"
"す。さもなくば、仮想環境にインストールされたソフトウェアが想定通りに動作しな"
"い可能性があります。"

#: ../../library/venv.rst:147
msgid ""
"You can deactivate a virtual environment by typing ``deactivate`` in your "
"shell. The exact mechanism is platform-specific and is an internal "
"implementation detail (typically, a script or shell function will be used)."
msgstr ""
"シェルで ``deactivate`` と入力することで仮想環境を無効化できます。\n"
"厳密な仕組みはプラットフォーム固有であり、内部の実装詳細です (たいていはスク"
"リプトかシェル関数が使われます)。"

#: ../../library/venv.rst:155
msgid "API"
msgstr "API"

#: ../../library/venv.rst:159
msgid ""
"The high-level method described above makes use of a simple API which "
"provides mechanisms for third-party virtual environment creators to "
"customize environment creation according to their needs, the :class:"
"`EnvBuilder` class."
msgstr ""
"上述の高水準のメソッドは、サードパーティの仮想環境の作成者が環境の作成を必要"
"に応じてカスタマイズするための機構を提供する簡素な API を利用します。それが :"
"class:`EnvBuilder` クラスです。"

#: ../../library/venv.rst:168
msgid ""
"The :class:`EnvBuilder` class accepts the following keyword arguments on "
"instantiation:"
msgstr ""
":class:`EnvBuilder` クラスを実体化するときに、以下のキーワード引数を受け取り"
"ます:"

#: ../../library/venv.rst:171
msgid ""
"``system_site_packages`` -- a Boolean value indicating that the system "
"Python site-packages should be available to the environment (defaults to "
"``False``)."
msgstr ""
"``system_site_packages`` -- 真偽値で、システムの Python の site-packages を仮"
"想環境から利用できるかどうかを示します (デフォルト: ``False``)。"

#: ../../library/venv.rst:174
msgid ""
"``clear`` -- a Boolean value which, if true, will delete the contents of any "
"existing target directory, before creating the environment."
msgstr ""
"``clear`` -- 真偽値で、真の場合環境を作成する前に既存の対象ディレクトリの中身"
"を削除します。"

#: ../../library/venv.rst:177
msgid ""
"``symlinks`` -- a Boolean value indicating whether to attempt to symlink the "
"Python binary rather than copying."
msgstr ""
"``symlinks`` -- 真偽値で、Python のバイナリをコピーせずにシンボリックの作成を"
"試みるかどうかを示します。"

#: ../../library/venv.rst:180
msgid ""
"``upgrade`` -- a Boolean value which, if true, will upgrade an existing "
"environment with the running Python - for use when that Python has been "
"upgraded in-place (defaults to ``False``)."
msgstr ""
"``upgrade`` -- 真偽値で、真の場合実行中の Python で既存の環境をアップグレード"
"します。その Python がインプレースでアップグレードされたときに用います。デ"
"フォルトは ``False`` です。"

#: ../../library/venv.rst:184
msgid ""
"``with_pip`` -- a Boolean value which, if true, ensures pip is installed in "
"the virtual environment. This uses :mod:`ensurepip` with the ``--default-"
"pip`` option."
msgstr ""
"``with_pip`` -- 真偽値で、真の場合仮想環境に pip がインストールされていること"
"を保証します。``--default-pip`` オプションで  :mod:`ensurepip` を使用します。"

#: ../../library/venv.rst:188
msgid ""
"``prompt`` -- a String to be used after virtual environment is activated "
"(defaults to ``None`` which means directory name of the environment would be "
"used). If the special string ``\".\"`` is provided, the basename of the "
"current directory is used as the prompt."
msgstr ""
"``prompt`` -- 仮想環境がアクティベートされたときに使う文字列（デフォルトは "
"``None`` のため、仮想環境のディレクトリ名が使われます）。もし特殊な文字列 "
"``\".\"`` が渡された場合、カレントディレクトリのベース名がプロンプトとして用"
"いられます。"

#: ../../library/venv.rst:193
msgid "``upgrade_deps`` -- Update the base venv modules to the latest on PyPI"
msgstr ""
"``upgrade_deps`` -- venv のベースのモジュールを PyPI での最新版にアップデート"
"します。"

#: ../../library/venv.rst:195
msgid ""
"``scm_ignore_files`` -- Create ignore files based for the specified source "
"control managers (SCM) in the iterable. Support is defined by having a "
"method named ``create_{scm}_ignore_file``. The only value supported by "
"default is ``\"git\"`` via :meth:`create_git_ignore_file`."
msgstr ""

#: ../../library/venv.rst:201 ../../library/venv.rst:389
msgid "Added the ``with_pip`` parameter"
msgstr "``with_pip`` 引数が追加されました。"

#: ../../library/venv.rst:204 ../../library/venv.rst:392
msgid "Added the ``prompt`` parameter"
msgstr "``prompt`` 引数が追加されました。"

#: ../../library/venv.rst:207 ../../library/venv.rst:395
msgid "Added the ``upgrade_deps`` parameter"
msgstr "``upgrade_deps`` 引数が追加されました。"

#: ../../library/venv.rst:210 ../../library/venv.rst:398
msgid "Added the ``scm_ignore_files`` parameter"
msgstr ""

#: ../../library/venv.rst:213
msgid ""
"Creators of third-party virtual environment tools will be free to use the "
"provided :class:`EnvBuilder` class as a base class."
msgstr ""
"サードパーティーの仮想環境ツールの作成者は、 :class:`EnvBuilder` を継承して使"
"うことができます。"

#: ../../library/venv.rst:216
msgid "The returned env-builder is an object which has a method, ``create``:"
msgstr ""
"返される env-builder オブジェクトには ``create`` というメソッドがあります:"

#: ../../library/venv.rst:220
msgid ""
"Create a virtual environment by specifying the target directory (absolute or "
"relative to the current directory) which is to contain the virtual "
"environment.  The ``create`` method will either create the environment in "
"the specified directory, or raise an appropriate exception."
msgstr ""
"仮想環境を持つことになるターゲットディレクトリ (絶対パスあるいは現在のディレ"
"クトリからの相対パス) を指定し、仮想環境を作成します。\n"
"``create`` メソッドは、指定されたディレクトリに仮想環境を構築するか、適切な例"
"外を送出します。"

#: ../../library/venv.rst:226
msgid ""
"The ``create`` method of the :class:`EnvBuilder` class illustrates the hooks "
"available for subclass customization::"
msgstr ""
":class:`EnvBuilder` クラスの ``create`` メソッドは、サブクラスのカスタマイズ"
"に使えるフックを説明します::"

#: ../../library/venv.rst:229
msgid ""
"def create(self, env_dir):\n"
"    \"\"\"\n"
"    Create a virtualized Python environment in a directory.\n"
"    env_dir is the target directory to create an environment in.\n"
"    \"\"\"\n"
"    env_dir = os.path.abspath(env_dir)\n"
"    context = self.ensure_directories(env_dir)\n"
"    self.create_configuration(context)\n"
"    self.setup_python(context)\n"
"    self.setup_scripts(context)\n"
"    self.post_setup(context)"
msgstr ""

#: ../../library/venv.rst:241
msgid ""
"Each of the methods :meth:`ensure_directories`, :meth:"
"`create_configuration`, :meth:`setup_python`, :meth:`setup_scripts` and :"
"meth:`post_setup` can be overridden."
msgstr ""
"メソッド :meth:`ensure_directories`, :meth:`create_configuration`, :meth:"
"`setup_python`, :meth:`setup_scripts`, :meth:`post_setup` はそれぞれオーバー"
"ライドできます。"

#: ../../library/venv.rst:247
msgid ""
"Creates the environment directory and all necessary subdirectories that "
"don't already exist, and returns a context object.  This context object is "
"just a holder for attributes (such as paths) for use by the other methods.  "
"If the :class:`EnvBuilder` is created with the arg ``clear=True``, contents "
"of the environment directory will be cleared and then all necessary "
"subdirectories will be recreated."
msgstr ""
"仮想環境のディレクトリとすべての必要なサブディレクトリのうちまだ存在しないも"
"のを作成し、コンテキストオブジェクトを返します。このコンテキストオブジェクト"
"は他のメソッドで使うために（パスなどの）属性を保持しているだけです。もし :"
"class:`EnvBuilder` が ``clear=True`` の引数で作成された場合、仮想環境のディレ"
"クトリの中身は消去され、すべての必要なサブディレクトリが再作成されます。"

#: ../../library/venv.rst:254
msgid ""
"The returned context object is a :class:`types.SimpleNamespace` with the "
"following attributes:"
msgstr ""
"返されるコンテキストオブジェクトは以下の属性を持った :class:`types."
"SimpleNamespace` です:"

#: ../../library/venv.rst:257
msgid ""
"``env_dir`` - The location of the virtual environment. Used for "
"``__VENV_DIR__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""
"``env_dir`` - 仮想環境の場所。アクティベートスクリプトの中の "
"``__VENV_DIR__`` で使われます（:meth:`install_scripts` を参照してください）。"

#: ../../library/venv.rst:260
msgid ""
"``env_name`` - The name of the virtual environment. Used for "
"``__VENV_NAME__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""
"``env_name`` - 仮想環境の名前。アクティベートスクリプトの中の "
"``__VENV_NAME__`` で使われます（:meth:`install_scripts` を参照してくださ"
"い）。"

#: ../../library/venv.rst:263
msgid ""
"``prompt`` - The prompt to be used by the activation scripts. Used for "
"``__VENV_PROMPT__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""
"``prompt`` - アクティベートスクリプトで使われるプロンプト。アクティベートスク"
"リプトの中の ``__VENV_PROMPT__`` で使われます（:meth:`install_scripts` を参照"
"してください）。"

#: ../../library/venv.rst:266
msgid ""
"``executable`` - The underlying Python executable used by the virtual "
"environment. This takes into account the case where a virtual environment is "
"created from another virtual environment."
msgstr ""
"``executable`` - 仮想環境の元になっている Python 実行可能ファイル。これは仮想"
"環境が別の仮想環境から作られた場合も考慮に入れます。"

#: ../../library/venv.rst:270
msgid "``inc_path`` - The include path for the virtual environment."
msgstr "``inc_path`` - 仮想環境の include パス。"

#: ../../library/venv.rst:272
msgid "``lib_path`` - The purelib path for the virtual environment."
msgstr "``lib_path`` - 仮想環境の purelib パス。"

#: ../../library/venv.rst:274
msgid "``bin_path`` - The script path for the virtual environment."
msgstr "``bin_path`` - 仮想環境のスクリプトのパス。"

#: ../../library/venv.rst:276
msgid ""
"``bin_name`` - The name of the script path relative to the virtual "
"environment location. Used for ``__VENV_BIN_NAME__`` in activation scripts "
"(see :meth:`install_scripts`)."
msgstr ""
"``bin_name`` - 仮想環境の場所に相対的な、スクリプトのパス。アクティベートスク"
"リプトの中の ``__VENV_BIN_NAME__`` で使われます（:meth:`install_scripts` を参"
"照してください）。"

#: ../../library/venv.rst:280
msgid ""
"``env_exe`` - The name of the Python interpreter in the virtual environment. "
"Used for ``__VENV_PYTHON__`` in activation scripts (see :meth:"
"`install_scripts`)."
msgstr ""
"``env_exe`` - 仮想環境の中の Python インタプリタの名前。アクティベートスクリ"
"プトの中の ``__VENV_PYTHON__`` で使われます（:meth:`install_scripts` を参照し"
"てください）。"

#: ../../library/venv.rst:284
msgid ""
"``env_exec_cmd`` - The name of the Python interpreter, taking into account "
"filesystem redirections. This can be used to run Python in the virtual "
"environment."
msgstr ""
"``env_exec_cmd`` - ファイルシステムのリダイレクトを考慮に入れた、Python イン"
"タプリタの名前。これは仮想環境の中で Python を実行するのに使えます。"

#: ../../library/venv.rst:289
msgid ""
"The *venv* :ref:`sysconfig installation scheme <installation_paths>` is used "
"to construct the paths of the created directories."
msgstr ""
"*venv* :ref:`システム構成インストールスキーム <installation_paths>` は作成さ"
"れたディレクトリのパスを構築するために使われます。"

#: ../../library/venv.rst:294
msgid ""
"The attribute ``lib_path`` was added to the context, and the context object "
"was documented."
msgstr ""
"コンテキストに ``lib_path`` 属性が追加され、コンテキストオブジェクトがドキュ"
"メントに追加されました。"

#: ../../library/venv.rst:300
msgid "Creates the ``pyvenv.cfg`` configuration file in the environment."
msgstr "仮想環境に ``pyvenv.cfg`` 設定ファイルを作成します。"

#: ../../library/venv.rst:304
msgid ""
"Creates a copy or symlink to the Python executable in the environment. On "
"POSIX systems, if a specific executable ``python3.x`` was used, symlinks to "
"``python`` and ``python3`` will be created pointing to that executable, "
"unless files with those names already exist."
msgstr ""
"Python 実行ファイルのコピーまたはシンボリックリンクを仮想環境に作成します。\n"
"POSIX システムで、特定の ``python3.x`` 実行ファイルが使われている場合、同じ名"
"前のファイルが既に存在していない限り、 ``python`` および ``python3`` へのシン"
"ボリックリンクがその実行ファイルを指すように作成されます。"

#: ../../library/venv.rst:311
msgid ""
"Installs activation scripts appropriate to the platform into the virtual "
"environment."
msgstr ""
"プラットフォームに対応した有効化スクリプトを仮想環境にインストールします。"

#: ../../library/venv.rst:316
msgid ""
"Upgrades the core venv dependency packages (currently ``pip``) in the "
"environment. This is done by shelling out to the ``pip`` executable in the "
"environment."
msgstr ""

#: ../../library/venv.rst:327
msgid ""
"A placeholder method which can be overridden in third party implementations "
"to pre-install packages in the virtual environment or perform other post-"
"creation steps."
msgstr ""
"サードパーティーライブラリがオーバーライドするための空のメソッドです。このメ"
"ソッドをオーバーライドして、仮想環境構築後にパッケージのプリインストールなど"
"のステップを実装できます。"

#: ../../library/venv.rst:331
msgid ""
"Windows now uses redirector scripts for ``python[w].exe`` instead of copying "
"the actual binaries. In 3.7.2 only :meth:`setup_python` does nothing unless "
"running from a build in the source tree."
msgstr ""
"Windows では、バイナリそのものをコピーするのではなく、``python[w].exe`` にリ"
"ダイレクトを行うスクリプトを使うようになりました。\n"
"3.7.2 でのみ、ソース群でビルドを実行しているのでなければ  :meth:"
"`setup_python` だけは何もしません。"

#: ../../library/venv.rst:336
msgid ""
"Windows copies the redirector scripts as part of :meth:`setup_python` "
"instead of :meth:`setup_scripts`. This was not the case in 3.7.2. When using "
"symlinks, the original executables will be linked."
msgstr ""
"Windows では、 :meth:`setup_scripts` の代わりに :meth:`setup_python` の一部と"
"してリダイレクトを行うスクリプトをコピーします。\n"
"これは 3.7.2 には当てはまりません。\n"
"シンボリックリンクを使ったときは、オリジナルの実行ファイルをコピーします。"

#: ../../library/venv.rst:341
msgid ""
"In addition, :class:`EnvBuilder` provides this utility method that can be "
"called from :meth:`setup_scripts` or :meth:`post_setup` in subclasses to "
"assist in installing custom scripts into the virtual environment."
msgstr ""
"これらに加えて、 :class:`EnvBuilder` は :meth:`setup_scripts` やサブクラス"
"の :meth:`post_setup` が仮想環境にスクリプトをインストールするためのユーティ"
"リティーメソッドを提供しています。"

#: ../../library/venv.rst:347
msgid ""
"*path* is the path to a directory that should contain subdirectories "
"\"common\", \"posix\", \"nt\", each containing scripts destined for the bin "
"directory in the environment.  The contents of \"common\" and the directory "
"corresponding to :data:`os.name` are copied after some text replacement of "
"placeholders:"
msgstr ""
"*path* は \"common\", \"posix\", \"nt\" ディレクトリを格納したディレクトリへ"
"のパスです。各サブディレクトリには仮想環境の bin ディレクトリにインストールす"
"るスクリプトを格納します。 \"common\" の中身と、 :data:`os.name` に一致する"
"ディレクトリの中身を、以下の置換処理を行いながらコピーします:"

#: ../../library/venv.rst:353
msgid ""
"``__VENV_DIR__`` is replaced with the absolute path of the environment "
"directory."
msgstr "``__VENV_DIR__`` は仮想環境ディレクトリの絶対パスに置換されます。"

#: ../../library/venv.rst:356
msgid ""
"``__VENV_NAME__`` is replaced with the environment name (final path segment "
"of environment directory)."
msgstr ""
"``__VENV_NAME__`` は仮想環境の名前 (仮想環境ディレクトリのパスの最後の部分) "
"に置換されます。"

#: ../../library/venv.rst:359
msgid ""
"``__VENV_PROMPT__`` is replaced with the prompt (the environment name "
"surrounded by parentheses and with a following space)"
msgstr ""
"``__VENV_PROMPT__`` はプロンプトに置換されます (括弧で囲まれ空白が続く環境"
"名)。"

#: ../../library/venv.rst:362
msgid ""
"``__VENV_BIN_NAME__`` is replaced with the name of the bin directory (either "
"``bin`` or ``Scripts``)."
msgstr ""
"``__VENV_BIN_NAME__`` は bin ディレクトリ名 (``bin`` か ``Scripts``) に置換さ"
"れます。"

#: ../../library/venv.rst:365
msgid ""
"``__VENV_PYTHON__`` is replaced with the absolute path of the environment's "
"executable."
msgstr ""
"``__VENV_PYTHON__`` は仮想環境の Python 実行ファイルの絶対パスに置換されま"
"す。"

#: ../../library/venv.rst:368
msgid ""
"The directories are allowed to exist (for when an existing environment is "
"being upgraded)."
msgstr "(既存環境のアップグレード中は) ディレクトリは存在しても構いません。"

#: ../../library/venv.rst:373
msgid ""
"Creates a ``.gitignore`` file within the virtual environment that causes the "
"entire directory to be ignored by the ``git`` source control manager."
msgstr ""

#: ../../library/venv.rst:378
msgid "There is also a module-level convenience function:"
msgstr "モジュールレベルの簡易関数もあります:"

#: ../../library/venv.rst:384
msgid ""
"Create an :class:`EnvBuilder` with the given keyword arguments, and call "
"its :meth:`~EnvBuilder.create` method with the *env_dir* argument."
msgstr ""
":class:`EnvBuilder` を指定されたキーワード引数を使って作成し、その :meth:"
"`~EnvBuilder.create` メソッドに *env_dir* 引数を渡して実行します。"

#: ../../library/venv.rst:402
msgid "An example of extending ``EnvBuilder``"
msgstr "``EnvBuilder`` を拡張する例"

#: ../../library/venv.rst:404
msgid ""
"The following script shows how to extend :class:`EnvBuilder` by implementing "
"a subclass which installs setuptools and pip into a created virtual "
"environment::"
msgstr ""
"次のスクリプトで、作成された仮想環境に setuptools と pip をインストールするサ"
"ブクラスを実装して :class:`EnvBuilder` を拡張する方法を示します::"

#: ../../library/venv.rst:407
msgid ""
"import os\n"
"import os.path\n"
"from subprocess import Popen, PIPE\n"
"import sys\n"
"from threading import Thread\n"
"from urllib.parse import urlparse\n"
"from urllib.request import urlretrieve\n"
"import venv\n"
"\n"
"class ExtendedEnvBuilder(venv.EnvBuilder):\n"
"    \"\"\"\n"
"    This builder installs setuptools and pip so that you can pip or\n"
"    easy_install other packages into the created virtual environment.\n"
"\n"
"    :param nodist: If true, setuptools and pip are not installed into the\n"
"                   created virtual environment.\n"
"    :param nopip: If true, pip is not installed into the created\n"
"                  virtual environment.\n"
"    :param progress: If setuptools or pip are installed, the progress of "
"the\n"
"                     installation can be monitored by passing a progress\n"
"                     callable. If specified, it is called with two\n"
"                     arguments: a string indicating some progress, and a\n"
"                     context indicating where the string is coming from.\n"
"                     The context argument can have one of three values:\n"
"                     'main', indicating that it is called from virtualize()\n"
"                     itself, and 'stdout' and 'stderr', which are obtained\n"
"                     by reading lines from the output streams of a "
"subprocess\n"
"                     which is used to install the app.\n"
"\n"
"                     If a callable is not specified, default progress\n"
"                     information is output to sys.stderr.\n"
"    \"\"\"\n"
"\n"
"    def __init__(self, *args, **kwargs):\n"
"        self.nodist = kwargs.pop('nodist', False)\n"
"        self.nopip = kwargs.pop('nopip', False)\n"
"        self.progress = kwargs.pop('progress', None)\n"
"        self.verbose = kwargs.pop('verbose', False)\n"
"        super().__init__(*args, **kwargs)\n"
"\n"
"    def post_setup(self, context):\n"
"        \"\"\"\n"
"        Set up any packages which need to be pre-installed into the\n"
"        virtual environment being created.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        os.environ['VIRTUAL_ENV'] = context.env_dir\n"
"        if not self.nodist:\n"
"            self.install_setuptools(context)\n"
"        # Can't install pip without setuptools\n"
"        if not self.nopip and not self.nodist:\n"
"            self.install_pip(context)\n"
"\n"
"    def reader(self, stream, context):\n"
"        \"\"\"\n"
"        Read lines from a subprocess' output stream and either pass to a "
"progress\n"
"        callable (if specified) or write progress information to sys."
"stderr.\n"
"        \"\"\"\n"
"        progress = self.progress\n"
"        while True:\n"
"            s = stream.readline()\n"
"            if not s:\n"
"                break\n"
"            if progress is not None:\n"
"                progress(s, context)\n"
"            else:\n"
"                if not self.verbose:\n"
"                    sys.stderr.write('.')\n"
"                else:\n"
"                    sys.stderr.write(s.decode('utf-8'))\n"
"                sys.stderr.flush()\n"
"        stream.close()\n"
"\n"
"    def install_script(self, context, name, url):\n"
"        _, _, path, _, _, _ = urlparse(url)\n"
"        fn = os.path.split(path)[-1]\n"
"        binpath = context.bin_path\n"
"        distpath = os.path.join(binpath, fn)\n"
"        # Download script into the virtual environment's binaries folder\n"
"        urlretrieve(url, distpath)\n"
"        progress = self.progress\n"
"        if self.verbose:\n"
"            term = '\\n'\n"
"        else:\n"
"            term = ''\n"
"        if progress is not None:\n"
"            progress('Installing %s ...%s' % (name, term), 'main')\n"
"        else:\n"
"            sys.stderr.write('Installing %s ...%s' % (name, term))\n"
"            sys.stderr.flush()\n"
"        # Install in the virtual environment\n"
"        args = [context.env_exe, fn]\n"
"        p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=binpath)\n"
"        t1 = Thread(target=self.reader, args=(p.stdout, 'stdout'))\n"
"        t1.start()\n"
"        t2 = Thread(target=self.reader, args=(p.stderr, 'stderr'))\n"
"        t2.start()\n"
"        p.wait()\n"
"        t1.join()\n"
"        t2.join()\n"
"        if progress is not None:\n"
"            progress('done.', 'main')\n"
"        else:\n"
"            sys.stderr.write('done.\\n')\n"
"        # Clean up - no longer needed\n"
"        os.unlink(distpath)\n"
"\n"
"    def install_setuptools(self, context):\n"
"        \"\"\"\n"
"        Install setuptools in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = \"https://bootstrap.pypa.io/ez_setup.py\"\n"
"        self.install_script(context, 'setuptools', url)\n"
"        # clear up the setuptools archive which gets downloaded\n"
"        pred = lambda o: o.startswith('setuptools-') and o.endswith('.tar."
"gz')\n"
"        files = filter(pred, os.listdir(context.bin_path))\n"
"        for f in files:\n"
"            f = os.path.join(context.bin_path, f)\n"
"            os.unlink(f)\n"
"\n"
"    def install_pip(self, context):\n"
"        \"\"\"\n"
"        Install pip in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = 'https://bootstrap.pypa.io/get-pip.py'\n"
"        self.install_script(context, 'pip', url)\n"
"\n"
"\n"
"def main(args=None):\n"
"    import argparse\n"
"\n"
"    parser = argparse.ArgumentParser(prog=__name__,\n"
"                                     description='Creates virtual Python '\n"
"                                                 'environments in one or '\n"
"                                                 'more target '\n"
"                                                 'directories.')\n"
"    parser.add_argument('dirs', metavar='ENV_DIR', nargs='+',\n"
"                        help='A directory in which to create the '\n"
"                             'virtual environment.')\n"
"    parser.add_argument('--no-setuptools', default=False,\n"
"                        action='store_true', dest='nodist',\n"
"                        help=\"Don't install setuptools or pip in the \"\n"
"                             \"virtual environment.\")\n"
"    parser.add_argument('--no-pip', default=False,\n"
"                        action='store_true', dest='nopip',\n"
"                        help=\"Don't install pip in the virtual \"\n"
"                             \"environment.\")\n"
"    parser.add_argument('--system-site-packages', default=False,\n"
"                        action='store_true', dest='system_site',\n"
"                        help='Give the virtual environment access to the '\n"
"                             'system site-packages dir.')\n"
"    if os.name == 'nt':\n"
"        use_symlinks = False\n"
"    else:\n"
"        use_symlinks = True\n"
"    parser.add_argument('--symlinks', default=use_symlinks,\n"
"                        action='store_true', dest='symlinks',\n"
"                        help='Try to use symlinks rather than copies, '\n"
"                             'when symlinks are not the default for '\n"
"                             'the platform.')\n"
"    parser.add_argument('--clear', default=False, action='store_true',\n"
"                        dest='clear', help='Delete the contents of the '\n"
"                                           'virtual environment '\n"
"                                           'directory if it already '\n"
"                                           'exists, before virtual '\n"
"                                           'environment creation.')\n"
"    parser.add_argument('--upgrade', default=False, action='store_true',\n"
"                        dest='upgrade', help='Upgrade the virtual '\n"
"                                             'environment directory to '\n"
"                                             'use this version of '\n"
"                                             'Python, assuming Python '\n"
"                                             'has been upgraded '\n"
"                                             'in-place.')\n"
"    parser.add_argument('--verbose', default=False, action='store_true',\n"
"                        dest='verbose', help='Display the output '\n"
"                                             'from the scripts which '\n"
"                                             'install setuptools and pip.')\n"
"    options = parser.parse_args(args)\n"
"    if options.upgrade and options.clear:\n"
"        raise ValueError('you cannot supply --upgrade and --clear "
"together.')\n"
"    builder = ExtendedEnvBuilder(system_site_packages=options.system_site,\n"
"                                   clear=options.clear,\n"
"                                   symlinks=options.symlinks,\n"
"                                   upgrade=options.upgrade,\n"
"                                   nodist=options.nodist,\n"
"                                   nopip=options.nopip,\n"
"                                   verbose=options.verbose)\n"
"    for d in options.dirs:\n"
"        builder.create(d)\n"
"\n"
"if __name__ == '__main__':\n"
"    rc = 1\n"
"    try:\n"
"        main()\n"
"        rc = 0\n"
"    except Exception as e:\n"
"        print('Error: %s' % e, file=sys.stderr)\n"
"    sys.exit(rc)"
msgstr ""

#: ../../library/venv.rst:615
msgid ""
"This script is also available for download `online <https://gist.github.com/"
"vsajip/4673395>`_."
msgstr ""
"このスクリプトは `オンライン <https://gist.github.com/vsajip/4673395>`_ より"
"ダウンロードすることも可能です。"

#: ../../library/venv.rst:14
msgid "Environments"
msgstr "環境"

#: ../../library/venv.rst:14
msgid "virtual"
msgstr "仮想"
