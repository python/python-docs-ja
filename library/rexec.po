# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2017-09-22 17:57+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/rexec.rst:2
msgid ":mod:`rexec` --- Restricted execution framework"
msgstr ":mod:`rexec` --- 制限実行のフレームワーク"

#: ../../library/rexec.rst:8
msgid "The :mod:`rexec` module has been removed in Python 3."
msgstr ":mod:`rexec` モジュールは Python 3 で削除されました。"

#: ../../library/rexec.rst:11
msgid "Disabled module."
msgstr "モジュールは無効化され、使えなくなりました。"

#: ../../library/rexec.rst:16
msgid ""
"The documentation has been left in place to help in reading old code that "
"uses the module."
msgstr ""
"このドキュメントは、 :mod:`rexec` モジュールを使用している古いコードを読む際"
"の参照用として残されています。"

#: ../../library/rexec.rst:19
msgid ""
"This module contains the :class:`RExec` class, which supports :meth:"
"`r_eval`, :meth:`r_execfile`, :meth:`r_exec`, and :meth:`r_import` methods, "
"which are restricted versions of the standard Python functions :meth:"
"`eval`, :meth:`execfile` and the :keyword:`exec` and :keyword:`import` "
"statements. Code executed in this restricted environment will only have "
"access to modules and functions that are deemed safe; you can subclass :"
"class:`RExec` to add or remove capabilities as desired."
msgstr ""
"このモジュールには :class:`RExec` クラスが含まれています。このクラスは、 :"
"meth:`r_eval` 、 :meth:`r_execfile` 、 :meth:`r_exec` および :meth:"
"`r_import` メソッドをサポートし、これらは標準の Python 関数 :meth:`eval` 、 :"
"meth:`execfile` および :keyword:`exec` と :keyword:`import` 文の制限された"
"バージョンです。この制限された環境で実行されるコードは、安全であると見なされ"
"たモジュールや関数だけにアクセスします; :class:`RExec` をサブクラス化すれば、"
"望むように能力を追加および削除できます。"

#: ../../library/rexec.rst:29
msgid ""
"While the :mod:`rexec` module is designed to perform as described below, it "
"does have a few known vulnerabilities which could be exploited by carefully "
"written code.  Thus it should not be relied upon in situations requiring "
"\"production ready\" security.  In such situations, execution via sub-"
"processes or very careful \"cleansing\" of both code and data to be "
"processed may be necessary. Alternatively, help in patching known :mod:"
"`rexec` vulnerabilities would be welcomed."
msgstr ""
":mod:`rexec` モジュールは、下記のように動作するべく設計されてはいますが、注意"
"深く書かれたコードなら利用できてしまうかもしれない、既知の脆弱性がいくつかあ"
"ります。従って、\"製品レベル\" のセキュリティを要する状況では、 :mod:`rexec` "
"の動作をあてにするべきではありません。製品レベルのセキュリティを求めるなら、"
"サブプロセスを介した実行や、あるいは処理するコードとデータの両方に対する非常"
"に注意深い \"浄化\" が必要でしょう。上記の代わりに、 :mod:`rexec` の既知の脆"
"弱性に対するパッチ当ての手伝いも歓迎します。"

#: ../../library/rexec.rst:39
msgid ""
"The :class:`RExec` class can prevent code from performing unsafe operations "
"like reading or writing disk files, or using TCP/IP sockets.  However, it "
"does not protect against code using extremely large amounts of memory or "
"processor time."
msgstr ""
":class:`RExec` クラスは、プログラムコードによるディスクファイルの読み書きや "
"TCP/IP ソケットの利用といった、安全でない操作の実行を防ぐことができます。しか"
"し、プログラムコードよる非常に大量のメモリや処理時間の消費に対して防御するこ"
"とはできません。"

#: ../../library/rexec.rst:46
msgid "Returns an instance of the :class:`RExec` class."
msgstr ":class:`RExec` クラスのインスタンスを返します。"

#: ../../library/rexec.rst:48
msgid ""
"*hooks* is an instance of the :class:`RHooks` class or a subclass of it. If "
"it is omitted or ``None``, the default :class:`RHooks` class is "
"instantiated. Whenever the :mod:`rexec` module searches for a module (even a "
"built-in one) or reads a module's code, it doesn't actually go out to the "
"file system itself. Rather, it calls methods of an :class:`RHooks` instance "
"that was passed to or created by its constructor.  (Actually, the :class:"
"`RExec` object doesn't make these calls --- they are made by a module loader "
"object that's part of the :class:`RExec` object.  This allows another level "
"of flexibility, which can be useful when changing the mechanics of :keyword:"
"`import` within the restricted environment.)"
msgstr ""
"*hooks* は、 :class:`RHooks` クラスあるいはそのサブクラスのインスタンスで"
"す。 *hooks* が省略されているか ``None`` であれば、デフォルトの :class:"
"`RHooks` クラスがインスタンス化されます。 :mod:`rexec` モジュールが (組み込み"
"モジュールを含む) あるモジュールを探したり、あるモジュールのコードを読んだり"
"する時は常に、 :mod:`rexec` がじかにファイルシステムに出て行くことはありませ"
"ん。その代わり、あらかじめ :class:`RHooks` クラスに渡しておいたり、コンストラ"
"クタで生成された :class:`RHooks` インスタンスのメソッドを呼び出します。 (実際"
"には、 :class:`RExec` オブジェクトはこれらを呼び出しません --- 呼び出しは、 :"
"class:`RExec` オブジェクトの一部であるモジュールローダオブジェクトによって行"
"われます。これによって別のレベルの柔軟性が実現されます。この柔軟性は、制限さ"
"れた環境内で :keyword:`import` 機構を変更する時に役に立ちます。 )"

#: ../../library/rexec.rst:59
msgid ""
"By providing an alternate :class:`RHooks` object, we can control the file "
"system accesses made to import a module, without changing the actual "
"algorithm that controls the order in which those accesses are made.  For "
"instance, we could substitute an :class:`RHooks` object that passes all "
"filesystem requests to a file server elsewhere, via some RPC mechanism such "
"as ILU.  Grail's applet loader uses this to support importing applets from a "
"URL for a directory."
msgstr ""
"代替の :class:`RHooks` オブジェクトを提供することで、モジュールをインポートす"
"る際に行われるファイルシステムへのアクセスを制御することができます。このと"
"き、各々のアクセスが行われる順番を制御する実際のアルゴリズムは変更されませ"
"ん。例えば、 :class:`RHooks` オブジェクトを置き換えて、ILU のようなある種の "
"RPC メカニズムを介することで、全てのファイルシステムの要求をどこかにあるファ"
"イルサーバに渡すことができます。 Grail のアプレットローダは、アプレットを "
"URL からディレクトリ上に import する際にこの機構を使っています。"

#: ../../library/rexec.rst:66
msgid ""
"If *verbose* is true, additional debugging output may be sent to standard "
"output."
msgstr ""
"もし *verbose* が true であれば、追加のデバッグ出力が標準出力に送られます。"

#: ../../library/rexec.rst:69
msgid ""
"It is important to be aware that code running in a restricted environment "
"can still call the :func:`sys.exit` function.  To disallow restricted code "
"from exiting the interpreter, always protect calls that cause restricted "
"code to run with a :keyword:`try`/:keyword:`except` statement that catches "
"the :exc:`SystemExit` exception.  Removing the :func:`sys.exit` function "
"from the restricted environment is not sufficient --- the restricted code "
"could still use ``raise SystemExit``.  Removing :exc:`SystemExit` is not a "
"reasonable option; some library code makes use of this and would break were "
"it not available."
msgstr ""
"制限された環境で実行するコードも、やはり :func:`sys.exit` 関数を呼ぶことがで"
"きることを知っておくことは大事なことです。制限されたコードがインタプリタから"
"抜けだすことを許さないためには、いつでも、制限されたコードが、 :exc:"
"`SystemExit` 例外をキャッチする :keyword:`try` / :keyword:`except` 文とともに"
"実行するように、呼び出しを防御します。制限された環境から :func:`sys.exit` 関"
"数を除去するだけでは不十分です -- 制限されたコードは、やはり ``raise "
"SystemExit`` を使うことができてしまいます。 :exc:`SystemExit` を取り除くこと"
"も、合理的なオプションではありません; いくつかのライブラリコードはこれを使っ"
"ていますし、これが利用できなくなると中断してしまうでしょう。"

#: ../../library/rexec.rst:83
msgid "`Grail Home Page <http://grail.sourceforge.net/>`_"
msgstr "`Grail Home Page <http://grail.sourceforge.net/>`_"

#: ../../library/rexec.rst:82
msgid ""
"Grail is a Web browser written entirely in Python.  It uses the :mod:`rexec` "
"module as a foundation for supporting Python applets, and can be used as an "
"example usage of this module."
msgstr ""
"Grail はすべて Python で書かれた Web ブラウザです。これは、 :mod:`rexec` モ"
"ジュールを、Python アプレットをサポートするのに使っていて、このモジュールの使"
"用例として使うことができます。"

#: ../../library/rexec.rst:90
msgid "RExec Objects"
msgstr "RExec オブジェクト"

#: ../../library/rexec.rst:92
msgid ":class:`RExec` instances support the following methods:"
msgstr ":class:`RExec` インスタンスには以下のメソッドがあります:"

#: ../../library/rexec.rst:97
msgid ""
"*code* must either be a string containing a Python expression, or a compiled "
"code object, which will be evaluated in the restricted environment's :mod:"
"`__main__` module.  The value of the expression or code object will be "
"returned."
msgstr ""
"*code* は、Python の式を含む文字列か、あるいはコンパイルされたコードオブジェ"
"クトのどちらかでなければなりません。そしてこれらは制限された環境の :mod:"
"`__main__` モジュールで評価されます。式あるいはコードオブジェクトの値が返され"
"ます。"

#: ../../library/rexec.rst:105
msgid ""
"*code* must either be a string containing one or more lines of Python code, "
"or a compiled code object, which will be executed in the restricted "
"environment's :mod:`__main__` module."
msgstr ""
"*code* は、1行以上の Python コードを含む文字列か、コンパイルされたコードオブ"
"ジェクトのどちらかでなければなりません。そしてこれらは、制限された環境の :"
"mod:`__main__` モジュールで実行されます。"

#: ../../library/rexec.rst:112
msgid ""
"Execute the Python code contained in the file *filename* in the restricted "
"environment's :mod:`__main__` module."
msgstr ""
"ファイル *filename* 内の Python コードを、制限された環境の :mod:`__main__` モ"
"ジュールで実行します。"

#: ../../library/rexec.rst:115
msgid ""
"Methods whose names begin with ``s_`` are similar to the functions beginning "
"with ``r_``, but the code will be granted access to restricted versions of "
"the standard I/O streams ``sys.stdin``, ``sys.stderr``, and ``sys.stdout``."
msgstr ""
"名前が ``s_`` で始まるメソッドは、 ``r_`` で始まる関数と同様ですが、そのコー"
"ドは、標準 I/O ストリーム ``sys.stdin`` 、 ``sys.stderr`` および ``sys."
"stdout`` の制限されたバージョンへのアクセスが許されています。"

#: ../../library/rexec.rst:122
msgid ""
"*code* must be a string containing a Python expression, which will be "
"evaluated in the restricted environment."
msgstr ""
"*code* は、Python 式を含む文字列でなければなりません。そして制限された環境で"
"評価されます。"

#: ../../library/rexec.rst:128
msgid ""
"*code* must be a string containing one or more lines of Python code, which "
"will be executed in the restricted environment."
msgstr ""
"*code* は、1 行以上の Python コードを含む文字列でなければなりません。そして制"
"限された環境で実行されます。"

#: ../../library/rexec.rst:134
msgid ""
"Execute the Python code contained in the file *filename* in the restricted "
"environment."
msgstr ""
"ファイル *filename* に含まれた Python コードを制限された環境で実行します。"

#: ../../library/rexec.rst:137
msgid ""
":class:`RExec` objects must also support various methods which will be "
"implicitly called by code executing in the restricted environment. "
"Overriding these methods in a subclass is used to change the policies "
"enforced by a restricted environment."
msgstr ""
":class:`RExec` オブジェクトは、制限された環境で実行されるコードによって暗黙の"
"うちに呼ばれる、さまざまなメソッドもサポートしなければなりません。これらのメ"
"ソッドをサブクラス内でオーバライドすることによって、制限された環境が強制する"
"ポリシーを変更します。"

#: ../../library/rexec.rst:145 ../../library/rexec.rst:174
msgid ""
"Import the module *modulename*, raising an :exc:`ImportError` exception if "
"the module is considered unsafe."
msgstr ""
"モジュール *modulename* をインポートし、もしそのモジュールが安全でないとみな"
"されるなら、 :exc:`ImportError` 例外を発生します。"

#: ../../library/rexec.rst:151
msgid ""
"Method called when :func:`open` is called in the restricted environment.  "
"The arguments are identical to those of :func:`open`, and a file object (or "
"a class instance compatible with file objects) should be returned.  :class:"
"`RExec`'s default behaviour is allow opening any file for reading, but "
"forbidding any attempt to write a file.  See the example below for an "
"implementation of a less restrictive :meth:`r_open`."
msgstr ""
":func:`open` が制限された環境で呼ばれるとき、呼ばれるメソッドです。引数は :"
"func:`open` のものと同じであり、ファイルオブジェクト (あるいはファイルオブ"
"ジェクトと互換性のあるクラスインスタンス) が返されます。 :class:`RExec` のデ"
"フォルトの動作は、任意のファイルを読み取り用にオープンすることを許可します"
"が、ファイルに書き込もうとすることは許しません。より制限の少ない :meth:"
"`r_open` の実装については、以下の例を見て下さい。"

#: ../../library/rexec.rst:161 ../../library/rexec.rst:180
msgid "Reload the module object *module*, re-parsing and re-initializing it."
msgstr ""
"モジュールオブジェクト *module* を再ロードして、それを再解析し再初期化しま"
"す。"

#: ../../library/rexec.rst:166
msgid ""
"Unload the module object *module* (remove it from the restricted "
"environment's ``sys.modules`` dictionary)."
msgstr ""
"モジュールオブジェクト *module* をアンロードします (それを制限された環境の "
"``sys.modules`` 辞書から取りのぞきます)。"

#: ../../library/rexec.rst:169
msgid "And their equivalents with access to restricted standard I/O streams:"
msgstr "および制限された標準 I/O ストリームへのアクセスが可能な同等のもの:"

#: ../../library/rexec.rst:185
msgid "Unload the module object *module*."
msgstr "モジュールオブジェクト *module* をアンロードします。"

#: ../../library/rexec.rst:193
msgid "Defining restricted environments"
msgstr "制限された環境を定義する"

#: ../../library/rexec.rst:195
msgid ""
"The :class:`RExec` class has the following class attributes, which are used "
"by the :meth:`__init__` method.  Changing them on an existing instance won't "
"have any effect; instead, create a subclass of :class:`RExec` and assign "
"them new values in the class definition. Instances of the new class will "
"then use those new values.  All these attributes are tuples of strings."
msgstr ""
":class:`RExec` クラスには以下のクラス属性があります。それらは、 :meth:"
"`__init__` メソッドが使います。それらを既存のインスタンス上で変更しても何の効"
"果もありません; そうする代わりに、 :class:`RExec` のサブクラスを作成して、そ"
"のクラス定義でそれらに新しい値を割り当てます。そうすると、新しいクラスのイン"
"スタンスは、これらの新しい値を使用します。これらの属性のすべては、文字列のタ"
"プルです。"

#: ../../library/rexec.rst:204
msgid ""
"Contains the names of built-in functions which will *not* be available to "
"programs running in the restricted environment.  The value for :class:"
"`RExec` is ``('open', 'reload', '__import__')``. (This gives the exceptions, "
"because by far the majority of built-in functions are harmless.  A subclass "
"that wants to override this variable should probably start with the value "
"from the base class and concatenate additional forbidden functions --- when "
"new dangerous built-in functions are added to Python, they will also be "
"added to this module.)"
msgstr ""
"制限された環境で実行するプログラムでは利用 *できない* であろう、組み込み関数"
"の名前を格納しています。 :class:`RExec` に対する値は、 ``('open', 'reload', "
"'__import__')`` です。 (これは例外です。というのは、組み込み関数のほとんど大"
"多数は無害だからです。この変数をオーバライドしたいサブクラスは、基本クラスか"
"らの値から始めて、追加した許されない関数を連結していかなければなりません -- "
"危険な関数が新しく Python に追加された時は、それらも、このモジュールに追加し"
"ます。)"

#: ../../library/rexec.rst:215
msgid ""
"Contains the names of built-in modules which can be safely imported. The "
"value for :class:`RExec` is ``('audioop', 'array', 'binascii', 'cmath', "
"'errno', 'imageop', 'marshal', 'math', 'md5', 'operator', 'parser', 'regex', "
"'select', 'sha', '_sre', 'strop', 'struct', 'time')``.  A similar remark "
"about overriding this variable applies --- use the value from the base class "
"as a starting point."
msgstr ""
"安全にインポートできる組み込みモジュールの名前を格納しています。 :class:"
"`RExec` に対する値は、 ``('audioop', 'array', 'binascii', 'cmath', 'errno', "
"'imageop', 'marshal', 'math', 'md5', 'operator', 'parser', 'regex', "
"'select', 'sha', '_sre', 'strop', 'struct', 'time')`` です。この変数をオー"
"バーライドする場合も、同様な注意が適用されます -- 基本クラスからの値を使って"
"始めます。"

#: ../../library/rexec.rst:224
msgid ""
"Contains the directories which will be searched when an :keyword:`import` is "
"performed in the restricted environment.   The value for :class:`RExec` is "
"the same as ``sys.path`` (at the time the module is loaded) for unrestricted "
"code."
msgstr ""
":keyword:`import` が制限された環境で実行される時に検索されるディレクトリーを"
"格納しています。 :class:`RExec` に対する値は、(モジュールがロードされた時は) "
"制限されないコードの ``sys.path`` と同一です。"

#: ../../library/rexec.rst:231
msgid ""
"Contains the names of the functions in the :mod:`os` module which will be "
"available to programs running in the restricted environment.  The value for :"
"class:`RExec` is ``('error', 'fstat', 'listdir', 'lstat', 'readlink', "
"'stat', 'times', 'uname', 'getpid', 'getppid', 'getcwd', 'getuid', 'getgid', "
"'geteuid', 'getegid')``."
msgstr ""
"制限された環境で実行するプログラムで利用できる、 :mod:`os` モジュール内の関数"
"の名前を格納しています。 :class:`RExec` に対する値は、 ``('error', 'fstat', "
"'listdir', 'lstat', 'readlink', 'stat', 'times', 'uname', 'getpid', "
"'getppid', 'getcwd', 'getuid', 'getgid', 'geteuid', 'getegid')`` です。"

#: ../../library/rexec.rst:242
msgid ""
"Contains the names of the functions and variables in the :mod:`sys` module "
"which will be available to programs running in the restricted environment.  "
"The value for :class:`RExec` is ``('ps1', 'ps2', 'copyright', 'version', "
"'platform', 'exit', 'maxint')``."
msgstr ""
"制限された環境で実行するプログラムで利用できる、 :mod:`sys` モジュール内の関"
"数名と変数名を格納しています。 :class:`RExec` に対する値は、 ``('ps1', "
"'ps2', 'copyright', 'version', 'platform', 'exit', 'maxint')`` です。"

#: ../../library/rexec.rst:250
msgid ""
"Contains the file types from which modules are allowed to be loaded. Each "
"file type is an integer constant defined in the :mod:`imp` module. The "
"meaningful values are :const:`PY_SOURCE`, :const:`PY_COMPILED`, and :const:"
"`C_EXTENSION`. The value for :class:`RExec` is ``(C_EXTENSION, "
"PY_SOURCE)``.  Adding :const:`PY_COMPILED` in subclasses is not recommended; "
"an attacker could exit the restricted execution mode by putting a forged "
"byte-compiled file (:file:`.pyc`) anywhere in your file system, for example "
"by writing it to :file:`/tmp` or uploading it to the :file:`/incoming` "
"directory of your public FTP server."
msgstr ""
"モジュールがロードすることを許されているファイルタイプを格納しています。各"
"ファイルタイプは、 :mod:`imp` モジュールで定義された整数定数です。意味のある"
"値は、 :const:`PY_SOURCE` 、 :const:`PY_COMPILED` および :const:"
"`C_EXTENSION` です。 :class:`RExec` に対する値は、 ``(C_EXTENSION, "
"PY_SOURCE)`` です。サブクラスで :const:`PY_COMPILED` を追加することは推奨され"
"ません; 攻撃者が、バイトコンパイルしたでっちあげのファイル(:file:`.pyc`)を、"
"例えば、あなたの公開 FTP サーバの :file:`/tmp` に書いたり、 :file:`/"
"incoming` にアップロードしたりして、とにかくあなたのファイルシステム内に置く"
"ことで、制限された実行モードから抜け出ることができるかもしれないからです。"

#: ../../library/rexec.rst:262
msgid "An example"
msgstr "例"

#: ../../library/rexec.rst:264
msgid ""
"Let us say that we want a slightly more relaxed policy than the standard :"
"class:`RExec` class.  For example, if we're willing to allow files in :file:"
"`/tmp` to be written, we can subclass the :class:`RExec` class::"
msgstr ""
"標準の :class:`RExec` クラスよりも、若干、もっと緩めたポリシーを望んでいると"
"しましょう。例えば、もし :file:`/tmp` 内のファイルへの書き込みを喜んで許すな"
"らば、 :class:`RExec` クラスを次のようにサブクラス化できます::"

#: ../../library/rexec.rst:282
msgid ""
"Notice that the above code will occasionally forbid a perfectly valid "
"filename; for example, code in the restricted environment won't be able to "
"open a file called :file:`/tmp/foo/../bar`.  To fix this, the :meth:`r_open` "
"method would have to simplify the filename to :file:`/tmp/bar`, which would "
"require splitting apart the filename and performing various operations on "
"it.  In cases where security is at stake, it may be preferable to write "
"simple code which is sometimes overly restrictive, instead of more general "
"code that is also more complex and may harbor a subtle security hole."
msgstr ""
"上のコードは、完全に正しいファイル名でも、時には禁止する場合があることに注意"
"して下さい; 例えば、制限された環境でのコードでは、 :file:`/tmp/foo/../bar` と"
"いうファイルはオープンできないかもしれません。これを修正するには、 :meth:"
"`r_open` メソッドが、そのファイル名を :file:`/tmp/bar` に単純化しなければなり"
"ません。そのためには、ファイル名を分割して、それにさまざまな操作を行う必要が"
"あります。セキュリティが重大な場合には、より複雑で微妙なセキュリティホールを"
"抱え込むかもしれない一般性のあるコードよりも、制限が余りにあり過ぎるとしても"
"単純なコードを書く方が、望ましいでしょう。"
