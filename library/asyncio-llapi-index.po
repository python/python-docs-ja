# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-llapi-index.rst:6
msgid "Low-level API Index"
msgstr "低水準の API インデックス"

#: ../../library/asyncio-llapi-index.rst:8
msgid "This page lists all low-level asyncio APIs."
msgstr "このページでは低水準の asyncio API を全てリストしています。"

#: ../../library/asyncio-llapi-index.rst:12
msgid "Obtaining the Event Loop"
msgstr "イベントループの取得"

#: ../../library/asyncio-llapi-index.rst:18
msgid ":func:`asyncio.get_running_loop`"
msgstr ":func:`asyncio.get_running_loop`"

#: ../../library/asyncio-llapi-index.rst:19
msgid "The **preferred** function to get the running event loop."
msgstr "実行中のイベントループを取得するために **利用が推奨される** 関数です。"

#: ../../library/asyncio-llapi-index.rst:21
msgid ":func:`asyncio.get_event_loop`"
msgstr ":func:`asyncio.get_event_loop`"

#: ../../library/asyncio-llapi-index.rst:22
msgid "Get an event loop instance (running or current via the current policy)."
msgstr ""

#: ../../library/asyncio-llapi-index.rst:24
msgid ":func:`asyncio.set_event_loop`"
msgstr ":func:`asyncio.set_event_loop`"

#: ../../library/asyncio-llapi-index.rst:25
msgid "Set the event loop as current via the current policy."
msgstr ""
"ポリシーに基づいて引数のイベントループを \"カレント\" (current event loop) に"
"設定します。"

#: ../../library/asyncio-llapi-index.rst:27
msgid ":func:`asyncio.new_event_loop`"
msgstr ":func:`asyncio.new_event_loop`"

#: ../../library/asyncio-llapi-index.rst:28
msgid "Create a new event loop."
msgstr "新しいイベントループのインスタンスを生成します。"

#: ../../library/asyncio-llapi-index.rst:32
#: ../../library/asyncio-llapi-index.rst:260
msgid "Examples"
msgstr "使用例"

#: ../../library/asyncio-llapi-index.rst:33
msgid ":ref:`Using asyncio.get_running_loop() <asyncio_example_future>`."
msgstr ":ref:`asyncio.get_running_loop() を使う <asyncio_example_future> `。"

#: ../../library/asyncio-llapi-index.rst:37
msgid "Event Loop Methods"
msgstr "イベントループのメソッド"

#: ../../library/asyncio-llapi-index.rst:39
msgid ""
"See also the main documentation section about the :ref:`asyncio-event-loop-"
"methods`."
msgstr ""

#: ../../library/asyncio-llapi-index.rst:42
msgid "Lifecycle"
msgstr "ライフサイクル"

#: ../../library/asyncio-llapi-index.rst:47
msgid ":meth:`loop.run_until_complete`"
msgstr ":meth:`loop.run_until_complete`"

#: ../../library/asyncio-llapi-index.rst:48
msgid "Run a Future/Task/awaitable until complete."
msgstr "Future/Task/awaitable が完了するまで実行します。"

#: ../../library/asyncio-llapi-index.rst:50
msgid ":meth:`loop.run_forever`"
msgstr ":meth:`loop.run_forever`"

#: ../../library/asyncio-llapi-index.rst:51
msgid "Run the event loop forever."
msgstr "イベントループを永久に実行します。"

#: ../../library/asyncio-llapi-index.rst:53
msgid ":meth:`loop.stop`"
msgstr ":meth:`loop.stop`"

#: ../../library/asyncio-llapi-index.rst:54
msgid "Stop the event loop."
msgstr "イベントループを停止します。"

#: ../../library/asyncio-llapi-index.rst:56
msgid ":meth:`loop.close`"
msgstr ":meth:`loop.close`"

#: ../../library/asyncio-llapi-index.rst:57
msgid "Close the event loop."
msgstr "イベントループをクローズします。"

#: ../../library/asyncio-llapi-index.rst:59
msgid ":meth:`loop.is_running()`"
msgstr ":meth:`loop.is_running()`"

#: ../../library/asyncio-llapi-index.rst:60
msgid "Return ``True`` if the event loop is running."
msgstr "イベントループが実行中の場合 ``True`` を返します。"

#: ../../library/asyncio-llapi-index.rst:62
msgid ":meth:`loop.is_closed()`"
msgstr ":meth:`loop.is_closed()`"

#: ../../library/asyncio-llapi-index.rst:63
msgid "Return ``True`` if the event loop is closed."
msgstr "イベントループがクローズされている場合 ``True`` を返します。"

#: ../../library/asyncio-llapi-index.rst:65
msgid "``await`` :meth:`loop.shutdown_asyncgens`"
msgstr "``await`` :meth:`loop.shutdown_asyncgens`"

#: ../../library/asyncio-llapi-index.rst:66
msgid "Close asynchronous generators."
msgstr "非同期ジェネレータをクローズします。"

#: ../../library/asyncio-llapi-index.rst:69
msgid "Debugging"
msgstr "デバッグ"

#: ../../library/asyncio-llapi-index.rst:74
msgid ":meth:`loop.set_debug`"
msgstr ":meth:`loop.set_debug`"

#: ../../library/asyncio-llapi-index.rst:75
msgid "Enable or disable the debug mode."
msgstr "デバッグモードを有効化または無効化します。"

#: ../../library/asyncio-llapi-index.rst:77
msgid ":meth:`loop.get_debug`"
msgstr ":meth:`loop.get_debug`"

#: ../../library/asyncio-llapi-index.rst:78
msgid "Get the current debug mode."
msgstr "現在のデバッグモードを取得します。"

#: ../../library/asyncio-llapi-index.rst:81
msgid "Scheduling Callbacks"
msgstr "コールバックのスケジューリング"

#: ../../library/asyncio-llapi-index.rst:86
msgid ":meth:`loop.call_soon`"
msgstr ":meth:`loop.call_soon`"

#: ../../library/asyncio-llapi-index.rst:87
msgid "Invoke a callback soon."
msgstr "コールバックを即座に実行します。"

#: ../../library/asyncio-llapi-index.rst:89
msgid ":meth:`loop.call_soon_threadsafe`"
msgstr ":meth:`loop.call_soon_threadsafe`"

#: ../../library/asyncio-llapi-index.rst:90
msgid "A thread-safe variant of :meth:`loop.call_soon`."
msgstr ":meth:`loop.call_soon` のスレッドセーフ版です。"

#: ../../library/asyncio-llapi-index.rst:92
msgid ":meth:`loop.call_later`"
msgstr ":meth:`loop.call_later`"

#: ../../library/asyncio-llapi-index.rst:93
msgid "Invoke a callback *after* the given time."
msgstr "与えられた遅延時間の *経過後* にコールバックを実行します。"

#: ../../library/asyncio-llapi-index.rst:95
msgid ":meth:`loop.call_at`"
msgstr ":meth:`loop.call_at`"

#: ../../library/asyncio-llapi-index.rst:96
msgid "Invoke a callback *at* the given time."
msgstr "*与えられた時刻に* コールバックを実行します。"

#: ../../library/asyncio-llapi-index.rst:99
msgid "Thread/Process Pool"
msgstr "スレッドプール／プロセスプール"

#: ../../library/asyncio-llapi-index.rst:104
msgid "``await`` :meth:`loop.run_in_executor`"
msgstr "``await`` :meth:`loop.run_in_executor`"

#: ../../library/asyncio-llapi-index.rst:105
msgid ""
"Run a CPU-bound or other blocking function in a :mod:`concurrent.futures` "
"executor."
msgstr ""
"CPUバウンドなブロッキング関数、またはその他のブロッキング関数を :mod:"
"`concurrent.futures` 実行オブジェクト (executor) 上で実行します。"

#: ../../library/asyncio-llapi-index.rst:108
msgid ":meth:`loop.set_default_executor`"
msgstr ":meth:`loop.set_default_executor`"

#: ../../library/asyncio-llapi-index.rst:109
msgid "Set the default executor for :meth:`loop.run_in_executor`."
msgstr ""
":meth:`loop.run_in_executor` のデフォルト実行オブジェクト (executor) を設定し"
"ます。"

#: ../../library/asyncio-llapi-index.rst:112
msgid "Tasks and Futures"
msgstr "タスクとフューチャー"

#: ../../library/asyncio-llapi-index.rst:117
msgid ":meth:`loop.create_future`"
msgstr ":meth:`loop.create_future`"

#: ../../library/asyncio-llapi-index.rst:118
msgid "Create a :class:`Future` object."
msgstr ":class:`Future` オブジェクトを生成します。"

#: ../../library/asyncio-llapi-index.rst:120
msgid ":meth:`loop.create_task`"
msgstr ":meth:`loop.create_task`"

#: ../../library/asyncio-llapi-index.rst:121
msgid "Schedule coroutine as a :class:`Task`."
msgstr "コルーチンを :class:`Task` としてスケジュールします。"

#: ../../library/asyncio-llapi-index.rst:123
msgid ":meth:`loop.set_task_factory`"
msgstr ":meth:`loop.set_task_factory`"

#: ../../library/asyncio-llapi-index.rst:124
msgid ""
"Set a factory used by :meth:`loop.create_task` to create :class:`Tasks "
"<Task>`."
msgstr ""
":meth:`loop.create_task` が :class:`Tasks <Task>` を生成する際に使われるファ"
"クトリを設定します。"

#: ../../library/asyncio-llapi-index.rst:127
msgid ":meth:`loop.get_task_factory`"
msgstr ":meth:`loop.get_task_factory`"

#: ../../library/asyncio-llapi-index.rst:128
msgid ""
"Get the factory :meth:`loop.create_task` uses to create :class:`Tasks "
"<Task>`."
msgstr ""
":meth:`loop.create_task` が :class:`Tasks <Task>` を生成するファクトリを取得"
"します。"

#: ../../library/asyncio-llapi-index.rst:132
msgid "DNS"
msgstr "DNS"

#: ../../library/asyncio-llapi-index.rst:137
msgid "``await`` :meth:`loop.getaddrinfo`"
msgstr "``await`` :meth:`loop.getaddrinfo`"

#: ../../library/asyncio-llapi-index.rst:138
msgid "Asynchronous version of :meth:`socket.getaddrinfo`."
msgstr ":meth:`socket.getaddrinfo` の非同期版です。"

#: ../../library/asyncio-llapi-index.rst:140
msgid "``await`` :meth:`loop.getnameinfo`"
msgstr "``await`` :meth:`loop.getnameinfo`"

#: ../../library/asyncio-llapi-index.rst:141
msgid "Asynchronous version of :meth:`socket.getnameinfo`."
msgstr ":meth:`socket.getnameinfo` の非同期版です。"

#: ../../library/asyncio-llapi-index.rst:144
msgid "Networking and IPC"
msgstr "ネットワークとプロセス間通信 (IPC)"

#: ../../library/asyncio-llapi-index.rst:149
msgid "``await`` :meth:`loop.create_connection`"
msgstr "``await`` :meth:`loop.create_connection`"

#: ../../library/asyncio-llapi-index.rst:150
msgid "Open a TCP connection."
msgstr "TCP接続を確立します。"

#: ../../library/asyncio-llapi-index.rst:152
msgid "``await`` :meth:`loop.create_server`"
msgstr "``await`` :meth:`loop.create_server`"

#: ../../library/asyncio-llapi-index.rst:153
msgid "Create a TCP server."
msgstr "TCPサーバーを起動します。"

#: ../../library/asyncio-llapi-index.rst:155
msgid "``await`` :meth:`loop.create_unix_connection`"
msgstr "``await`` :meth:`loop.create_unix_connection`"

#: ../../library/asyncio-llapi-index.rst:156
msgid "Open a Unix socket connection."
msgstr "Unix のソケット接続を確立します。"

#: ../../library/asyncio-llapi-index.rst:158
msgid "``await`` :meth:`loop.create_unix_server`"
msgstr "``await`` :meth:`loop.create_unix_server`"

#: ../../library/asyncio-llapi-index.rst:159
msgid "Create a Unix socket server."
msgstr " Unix のソケットサーバーを起動します。"

#: ../../library/asyncio-llapi-index.rst:161
msgid "``await`` :meth:`loop.connect_accepted_socket`"
msgstr "``await`` :meth:`loop.connect_accepted_socket`"

#: ../../library/asyncio-llapi-index.rst:162
msgid "Wrap a :class:`~socket.socket` into a ``(transport, protocol)`` pair."
msgstr ""
":class:`~socket.socket` を ``(transport, protocol)`` のペアでラップします。"

#: ../../library/asyncio-llapi-index.rst:165
msgid "``await`` :meth:`loop.create_datagram_endpoint`"
msgstr "``await`` :meth:`loop.create_datagram_endpoint`"

#: ../../library/asyncio-llapi-index.rst:166
msgid "Open a datagram (UDP) connection."
msgstr "データグラム (UDP) 接続を確立します。"

#: ../../library/asyncio-llapi-index.rst:168
msgid "``await`` :meth:`loop.sendfile`"
msgstr "``await`` :meth:`loop.sendfile`"

#: ../../library/asyncio-llapi-index.rst:169
msgid "Send a file over a transport."
msgstr "確立した接続 (transport) を通じてファイルを送信します。"

#: ../../library/asyncio-llapi-index.rst:171
msgid "``await`` :meth:`loop.start_tls`"
msgstr "``await`` :meth:`loop.start_tls`"

#: ../../library/asyncio-llapi-index.rst:172
msgid "Upgrade an existing connection to TLS."
msgstr "既存の接続を TLS にアップグレードします。"

#: ../../library/asyncio-llapi-index.rst:174
msgid "``await`` :meth:`loop.connect_read_pipe`"
msgstr "``await`` :meth:`loop.connect_read_pipe`"

#: ../../library/asyncio-llapi-index.rst:175
msgid "Wrap a read end of a pipe into a ``(transport, protocol)`` pair."
msgstr "パイプの読み出し側を ``(transport, protocol)`` のペアでラップします。"

#: ../../library/asyncio-llapi-index.rst:177
msgid "``await`` :meth:`loop.connect_write_pipe`"
msgstr "``await`` :meth:`loop.connect_write_pipe`"

#: ../../library/asyncio-llapi-index.rst:178
msgid "Wrap a write end of a pipe into a ``(transport, protocol)`` pair."
msgstr "パイプの書き込み側を ``(transport, protocol)`` のペアでラップします。"

#: ../../library/asyncio-llapi-index.rst:181
msgid "Sockets"
msgstr "ソケット"

#: ../../library/asyncio-llapi-index.rst:186
msgid "``await`` :meth:`loop.sock_recv`"
msgstr "``await`` :meth:`loop.sock_recv`"

#: ../../library/asyncio-llapi-index.rst:187
msgid "Receive data from the :class:`~socket.socket`."
msgstr ":class:`~socket.socket` からデータを受信します。"

#: ../../library/asyncio-llapi-index.rst:189
msgid "``await`` :meth:`loop.sock_recv_into`"
msgstr "``await`` :meth:`loop.sock_recv_into`"

#: ../../library/asyncio-llapi-index.rst:190
msgid "Receive data from the :class:`~socket.socket` into a buffer."
msgstr ":class:`~socket.socket` からデータを受信し、バッファに送信します。"

#: ../../library/asyncio-llapi-index.rst:192
msgid "``await`` :meth:`loop.sock_sendall`"
msgstr "``await`` :meth:`loop.sock_sendall`"

#: ../../library/asyncio-llapi-index.rst:193
msgid "Send data to the :class:`~socket.socket`."
msgstr ":class:`~socket.socket` にデータを送信します。"

#: ../../library/asyncio-llapi-index.rst:195
msgid "``await`` :meth:`loop.sock_connect`"
msgstr "``await`` :meth:`loop.sock_connect`"

#: ../../library/asyncio-llapi-index.rst:196
msgid "Connect the :class:`~socket.socket`."
msgstr ":class:`~socket.socket` を接続します。"

#: ../../library/asyncio-llapi-index.rst:198
msgid "``await`` :meth:`loop.sock_accept`"
msgstr "``await`` :meth:`loop.sock_accept`"

#: ../../library/asyncio-llapi-index.rst:199
msgid "Accept a :class:`~socket.socket` connection."
msgstr ":class:`~socket.socket` の接続を受け入れます。"

#: ../../library/asyncio-llapi-index.rst:201
msgid "``await`` :meth:`loop.sock_sendfile`"
msgstr "``await`` :meth:`loop.sock_sendfile`"

#: ../../library/asyncio-llapi-index.rst:202
msgid "Send a file over the :class:`~socket.socket`."
msgstr "Send a file over the :class:`~socket.socket`."

#: ../../library/asyncio-llapi-index.rst:204
msgid ":meth:`loop.add_reader`"
msgstr ":meth:`loop.add_reader`"

#: ../../library/asyncio-llapi-index.rst:205
msgid "Start watching a file descriptor for read availability."
msgstr "ファイル記述子が読み込み可能かどうかの監視を開始します。"

#: ../../library/asyncio-llapi-index.rst:207
msgid ":meth:`loop.remove_reader`"
msgstr ":meth:`loop.remove_reader`"

#: ../../library/asyncio-llapi-index.rst:208
msgid "Stop watching a file descriptor for read availability."
msgstr "ファイル記述子が読み込み可能かどうかの監視を停止します。"

#: ../../library/asyncio-llapi-index.rst:210
msgid ":meth:`loop.add_writer`"
msgstr ":meth:`loop.add_writer`"

#: ../../library/asyncio-llapi-index.rst:211
msgid "Start watching a file descriptor for write availability."
msgstr "ファイル記述子が書き込み可能かどうかの監視を開始します。"

#: ../../library/asyncio-llapi-index.rst:213
msgid ":meth:`loop.remove_writer`"
msgstr ":meth:`loop.remove_writer`"

#: ../../library/asyncio-llapi-index.rst:214
msgid "Stop watching a file descriptor for write availability."
msgstr "ファイル記述子が書き込み可能かどうかの監視を停止します。"

#: ../../library/asyncio-llapi-index.rst:217
msgid "Unix Signals"
msgstr "Unix シグナル"

#: ../../library/asyncio-llapi-index.rst:222
msgid ":meth:`loop.add_signal_handler`"
msgstr ":meth:`loop.add_signal_handler`"

#: ../../library/asyncio-llapi-index.rst:223
msgid "Add a handler for a :mod:`signal`."
msgstr ":mod:`signal` 用のハンドラーを追加します。"

#: ../../library/asyncio-llapi-index.rst:225
msgid ":meth:`loop.remove_signal_handler`"
msgstr ":meth:`loop.remove_signal_handler`"

#: ../../library/asyncio-llapi-index.rst:226
msgid "Remove a handler for a :mod:`signal`."
msgstr ":mod:`signal` 用のハンドラーを削除します。"

#: ../../library/asyncio-llapi-index.rst:229
msgid "Subprocesses"
msgstr "サブプロセス"

#: ../../library/asyncio-llapi-index.rst:234
msgid ":meth:`loop.subprocess_exec`"
msgstr ":meth:`loop.subprocess_exec`"

#: ../../library/asyncio-llapi-index.rst:235
msgid "Spawn a subprocess."
msgstr "サブプロセスを生成します。"

#: ../../library/asyncio-llapi-index.rst:237
msgid ":meth:`loop.subprocess_shell`"
msgstr ":meth:`loop.subprocess_shell`"

#: ../../library/asyncio-llapi-index.rst:238
msgid "Spawn a subprocess from a shell command."
msgstr "シェルコマンドからサブプロセスを生成します。"

#: ../../library/asyncio-llapi-index.rst:241
msgid "Error Handling"
msgstr "エラー処理"

#: ../../library/asyncio-llapi-index.rst:246
msgid ":meth:`loop.call_exception_handler`"
msgstr ":meth:`loop.call_exception_handler`"

#: ../../library/asyncio-llapi-index.rst:247
msgid "Call the exception handler."
msgstr "例外ハンドラを呼び出します。"

#: ../../library/asyncio-llapi-index.rst:249
msgid ":meth:`loop.set_exception_handler`"
msgstr ":meth:`loop.set_exception_handler`"

#: ../../library/asyncio-llapi-index.rst:250
msgid "Set a new exception handler."
msgstr "新しい例外ハンドラーを設定します。"

#: ../../library/asyncio-llapi-index.rst:252
msgid ":meth:`loop.get_exception_handler`"
msgstr ":meth:`loop.get_exception_handler`"

#: ../../library/asyncio-llapi-index.rst:253
msgid "Get the current exception handler."
msgstr "現在の例外ハンドラーを取得します。"

#: ../../library/asyncio-llapi-index.rst:255
msgid ":meth:`loop.default_exception_handler`"
msgstr ":meth:`loop.default_exception_handler`"

#: ../../library/asyncio-llapi-index.rst:256
msgid "The default exception handler implementation."
msgstr "デフォルトの例外ハンドラー実装です。"

#: ../../library/asyncio-llapi-index.rst:261
msgid ""
":ref:`Using asyncio.get_event_loop() and loop.run_forever() "
"<asyncio_example_lowlevel_helloworld>`."
msgstr ""
":ref:`Using asyncio.get_event_loop() や loop.run_forever() を使う"
"<asyncio_example_lowlevel_helloworld> `。"

#: ../../library/asyncio-llapi-index.rst:264
msgid ":ref:`Using loop.call_later() <asyncio_example_call_later>`."
msgstr ":ref:`loop.call_later() を使う <asyncio_example_call_later>`。"

#: ../../library/asyncio-llapi-index.rst:266
msgid ""
"Using ``loop.create_connection()`` to implement :ref:`an echo-client "
"<asyncio_example_tcp_echo_client_protocol>`."
msgstr ""
"``loop.create_connection()`` を使って :ref:`an echo-client "
"<asyncio_example_tcp_echo_client_protocol>` を実装する。"

#: ../../library/asyncio-llapi-index.rst:269
msgid ""
"Using ``loop.create_connection()`` to :ref:`connect a socket "
"<asyncio_example_create_connection>`."
msgstr ""
"``loop.create_connection()`` を使って :ref:`ソケットに接続する "
"<asyncio_example_create_connection>`。"

#: ../../library/asyncio-llapi-index.rst:272
msgid ""
":ref:`Using add_reader() to watch an FD for read events "
"<asyncio_example_watch_fd>`."
msgstr ""
":ref:`add_reader() を使ってファイルデスクリプタの読み込みイベントを監視する "
"<asyncio_example_watch_fd>`。"

#: ../../library/asyncio-llapi-index.rst:275
msgid ":ref:`Using loop.add_signal_handler() <asyncio_example_unix_signals>`."
msgstr ""
":ref:`loop.add_signal_handler() を使う <asyncio_example_unix_signals>`。"

#: ../../library/asyncio-llapi-index.rst:277
msgid ":ref:`Using loop.subprocess_exec() <asyncio_example_subprocess_proto>`."
msgstr ""
":ref:`loop.subprocess_exec() を使う <asyncio_example_subprocess_proto>`。"

#: ../../library/asyncio-llapi-index.rst:281
msgid "Transports"
msgstr "トランスポート"

#: ../../library/asyncio-llapi-index.rst:283
msgid "All transports implement the following methods:"
msgstr "全てのトランスポートは以下のメソッドを実装します:"

#: ../../library/asyncio-llapi-index.rst:289
msgid ":meth:`transport.close() <BaseTransport.close>`"
msgstr ":meth:`transport.close() <BaseTransport.close>`"

#: ../../library/asyncio-llapi-index.rst:290
msgid "Close the transport."
msgstr "トランスポートをクローズします。"

#: ../../library/asyncio-llapi-index.rst:292
msgid ":meth:`transport.is_closing() <BaseTransport.is_closing>`"
msgstr ":meth:`transport.is_closing() <BaseTransport.is_closing>`"

#: ../../library/asyncio-llapi-index.rst:293
msgid "Return ``True`` if the transport is closing or is closed."
msgstr "トランスポートを閉じている最中か閉じていた場合 ``True`` を返します。"

#: ../../library/asyncio-llapi-index.rst:295
msgid ":meth:`transport.get_extra_info() <BaseTransport.get_extra_info>`"
msgstr ":meth:`transport.get_extra_info() <BaseTransport.get_extra_info>`"

#: ../../library/asyncio-llapi-index.rst:296
msgid "Request for information about the transport."
msgstr "トランスポートについての情報をリクエストします。"

#: ../../library/asyncio-llapi-index.rst:298
msgid ":meth:`transport.set_protocol() <BaseTransport.set_protocol>`"
msgstr ":meth:`transport.set_protocol() <BaseTransport.set_protocol>`"

#: ../../library/asyncio-llapi-index.rst:299
msgid "Set a new protocol."
msgstr "トランスポートに新しいプロトコルを設定します。"

#: ../../library/asyncio-llapi-index.rst:301
msgid ":meth:`transport.get_protocol() <BaseTransport.get_protocol>`"
msgstr ":meth:`transport.get_protocol() <BaseTransport.get_protocol>`"

#: ../../library/asyncio-llapi-index.rst:302
msgid "Return the current protocol."
msgstr "現在のプロトコルを返します。"

#: ../../library/asyncio-llapi-index.rst:305
msgid ""
"Transports that can receive data (TCP and Unix connections, pipes, etc).  "
"Returned from methods like :meth:`loop.create_connection`, :meth:`loop."
"create_unix_connection`, :meth:`loop.connect_read_pipe`, etc:"
msgstr ""
"データを受信できるトランスポート (TCP 接続、 Unix 接続、パイプなど) のメソッ"
"ドです。該当するトランスポートは :meth:`loop.create_connection`, :meth:`loop."
"create_unix_connection`, :meth:`loop.connect_read_pipe` などの戻り値です:"

#: ../../library/asyncio-llapi-index.rst:310
msgid "Read Transports"
msgstr "読み込みトランスポート"

#: ../../library/asyncio-llapi-index.rst:315
msgid ":meth:`transport.is_reading() <ReadTransport.is_reading>`"
msgstr ":meth:`transport.is_reading() <ReadTransport.is_reading>`"

#: ../../library/asyncio-llapi-index.rst:316
msgid "Return ``True`` if the transport is receiving."
msgstr "トランスポートがデータを受信中の場合 ``True`` を返します。"

#: ../../library/asyncio-llapi-index.rst:318
msgid ":meth:`transport.pause_reading() <ReadTransport.pause_reading>`"
msgstr ":meth:`transport.pause_reading() <ReadTransport.pause_reading>`"

#: ../../library/asyncio-llapi-index.rst:319
msgid "Pause receiving."
msgstr "データの受信を停止します。"

#: ../../library/asyncio-llapi-index.rst:321
msgid ":meth:`transport.resume_reading() <ReadTransport.resume_reading>`"
msgstr ":meth:`transport.resume_reading() <ReadTransport.resume_reading>`"

#: ../../library/asyncio-llapi-index.rst:322
msgid "Resume receiving."
msgstr "データの受信を再開します。"

#: ../../library/asyncio-llapi-index.rst:325
msgid ""
"Transports that can Send data (TCP and Unix connections, pipes, etc).  "
"Returned from methods like :meth:`loop.create_connection`, :meth:`loop."
"create_unix_connection`, :meth:`loop.connect_write_pipe`, etc:"
msgstr ""
"データを送信できるトランスポート (TCP 接続、 Unix 接続、パイプなど) のメソッ"
"ドです。該当するトランスポートは :meth:`loop.create_connection`, :meth:`loop."
"create_unix_connection`, :meth:`loop.connect_write_pipe` などの戻り値です:"

#: ../../library/asyncio-llapi-index.rst:330
msgid "Write Transports"
msgstr "トランスポートにデータを書き込みます。"

#: ../../library/asyncio-llapi-index.rst:335
msgid ":meth:`transport.write() <WriteTransport.write>`"
msgstr ":meth:`transport.write() <WriteTransport.write>`"

#: ../../library/asyncio-llapi-index.rst:336
msgid "Write data to the transport."
msgstr "トランスポートにデータを書き込みます。"

#: ../../library/asyncio-llapi-index.rst:338
msgid ":meth:`transport.writelines() <WriteTransport.writelines>`"
msgstr ":meth:`transport.writelines() <WriteTransport.writelines>`"

#: ../../library/asyncio-llapi-index.rst:339
msgid "Write buffers to the transport."
msgstr "トランスポートにバッファの内容を書き込みます。"

#: ../../library/asyncio-llapi-index.rst:341
msgid ":meth:`transport.can_write_eof() <WriteTransport.can_write_eof>`"
msgstr ":meth:`transport.can_write_eof() <WriteTransport.can_write_eof>`"

#: ../../library/asyncio-llapi-index.rst:342
msgid "Return :const:`True` if the transport supports sending EOF."
msgstr ""
"トランスポートが 終端 (EOF) の送信をサポートしている場合 :const:`True` を返し"
"ます。"

#: ../../library/asyncio-llapi-index.rst:344
msgid ":meth:`transport.write_eof() <WriteTransport.write_eof>`"
msgstr ":meth:`transport.write_eof() <WriteTransport.write_eof>`"

#: ../../library/asyncio-llapi-index.rst:345
msgid "Close and send EOF after flushing buffered data."
msgstr ""
"バッファに残っているデータをフラッシュしてから終端 (EOF) を送信して、トランス"
"ポートをクローズします。"

#: ../../library/asyncio-llapi-index.rst:347
msgid ":meth:`transport.abort() <WriteTransport.abort>`"
msgstr ":meth:`transport.abort() <WriteTransport.abort>`"

#: ../../library/asyncio-llapi-index.rst:348
#: ../../library/asyncio-llapi-index.rst:374
msgid "Close the transport immediately."
msgstr "トランスポートを即座にクローズします。"

#: ../../library/asyncio-llapi-index.rst:350
msgid ""
":meth:`transport.get_write_buffer_size() <WriteTransport."
"get_write_buffer_size>`"
msgstr ""
":meth:`transport.get_write_buffer_size() <WriteTransport."
"get_write_buffer_size>`"

#: ../../library/asyncio-llapi-index.rst:352
msgid "Return the current size of the output buffer."
msgstr ""

#: ../../library/asyncio-llapi-index.rst:354
msgid ""
":meth:`transport.get_write_buffer_limits() <WriteTransport."
"get_write_buffer_limits>`"
msgstr ""

#: ../../library/asyncio-llapi-index.rst:356
msgid "Return high and low water marks for write flow control."
msgstr "書き込みフロー制御の高水位点と低水位点を取得します。"

#: ../../library/asyncio-llapi-index.rst:358
msgid ""
":meth:`transport.set_write_buffer_limits() <WriteTransport."
"set_write_buffer_limits>`"
msgstr ""
":meth:`transport.set_write_buffer_limits() <WriteTransport."
"set_write_buffer_limits>`"

#: ../../library/asyncio-llapi-index.rst:360
msgid "Set new high and low water marks for write flow control."
msgstr "書き込みフロー制御の高水位点と低水位点を設定します。"

#: ../../library/asyncio-llapi-index.rst:363
msgid "Transports returned by :meth:`loop.create_datagram_endpoint`:"
msgstr ":meth:`loop.create_datagram_endpoint` が返すトランスポート:"

#: ../../library/asyncio-llapi-index.rst:365
msgid "Datagram Transports"
msgstr "データグラムトランスポート"

#: ../../library/asyncio-llapi-index.rst:370
msgid ":meth:`transport.sendto() <DatagramTransport.sendto>`"
msgstr ":meth:`transport.sendto() <DatagramTransport.sendto>`"

#: ../../library/asyncio-llapi-index.rst:371
msgid "Send data to the remote peer."
msgstr "リモートピアにデータを送信します。"

#: ../../library/asyncio-llapi-index.rst:373
msgid ":meth:`transport.abort() <DatagramTransport.abort>`"
msgstr ":meth:`transport.abort() <DatagramTransport.abort>`"

#: ../../library/asyncio-llapi-index.rst:377
msgid ""
"Low-level transport abstraction over subprocesses. Returned by :meth:`loop."
"subprocess_exec` and :meth:`loop.subprocess_shell`:"
msgstr ""
"サブプロセスに対するトランスポートの低レベルな抽象化です。 :meth:`loop."
"subprocess_exec` や :meth:`loop.subprocess_shell` の戻り値です:"

#: ../../library/asyncio-llapi-index.rst:381
msgid "Subprocess Transports"
msgstr "サブプロセス化されたトランスポート"

#: ../../library/asyncio-llapi-index.rst:386
msgid ":meth:`transport.get_pid() <SubprocessTransport.get_pid>`"
msgstr ":meth:`transport.get_pid() <SubprocessTransport.get_pid>`"

#: ../../library/asyncio-llapi-index.rst:387
msgid "Return the subprocess process id."
msgstr "サブプロセスのプロセス ID を返します。"

#: ../../library/asyncio-llapi-index.rst:389
msgid ""
":meth:`transport.get_pipe_transport() <SubprocessTransport."
"get_pipe_transport>`"
msgstr ""
":meth:`transport.get_pipe_transport() <SubprocessTransport."
"get_pipe_transport>`"

#: ../../library/asyncio-llapi-index.rst:391
msgid ""
"Return the transport for the requested communication pipe (*stdin*, "
"*stdout*, or *stderr*)."
msgstr ""
"リクエストされた通信パイプ (標準入力 *stdin*, 標準出力 *stdout*, または標準エ"
"ラー出力 *stderr*) のためのトランスポートを返します。"

#: ../../library/asyncio-llapi-index.rst:394
msgid ":meth:`transport.get_returncode() <SubprocessTransport.get_returncode>`"
msgstr ""
":meth:`transport.get_returncode() <SubprocessTransport.get_returncode>`"

#: ../../library/asyncio-llapi-index.rst:395
msgid "Return the subprocess return code."
msgstr "サブプロセスの終了ステータスを返します。"

#: ../../library/asyncio-llapi-index.rst:397
msgid ":meth:`transport.kill() <SubprocessTransport.kill>`"
msgstr ":meth:`transport.kill() <SubprocessTransport.kill>`"

#: ../../library/asyncio-llapi-index.rst:398
msgid "Kill the subprocess."
msgstr "サブプロセスを強制終了 (kill) します。"

#: ../../library/asyncio-llapi-index.rst:400
msgid ":meth:`transport.send_signal() <SubprocessTransport.send_signal>`"
msgstr ":meth:`transport.send_signal() <SubprocessTransport.send_signal>`"

#: ../../library/asyncio-llapi-index.rst:401
msgid "Send a signal to the subprocess."
msgstr "サブプロセスにシグナルを送信します。"

#: ../../library/asyncio-llapi-index.rst:403
msgid ":meth:`transport.terminate() <SubprocessTransport.terminate>`"
msgstr ":meth:`transport.terminate() <SubprocessTransport.terminate>`"

#: ../../library/asyncio-llapi-index.rst:404
msgid "Stop the subprocess."
msgstr "サブプロセスを停止します。"

#: ../../library/asyncio-llapi-index.rst:406
msgid ":meth:`transport.close() <SubprocessTransport.close>`"
msgstr ":meth:`transport.close() <SubprocessTransport.close>`"

#: ../../library/asyncio-llapi-index.rst:407
msgid "Kill the subprocess and close all pipes."
msgstr "サブプロセスを強制終了 (kill) し、全てのパイプをクローズします。"

#: ../../library/asyncio-llapi-index.rst:411
msgid "Protocols"
msgstr "プロトコル"

#: ../../library/asyncio-llapi-index.rst:413
msgid "Protocol classes can implement the following **callback methods**:"
msgstr ""
"プロトコルクラスは以下の **コールバックメソッド** を実装することができます:"

#: ../../library/asyncio-llapi-index.rst:419
msgid "``callback`` :meth:`connection_made() <BaseProtocol.connection_made>`"
msgstr "``callback`` :meth:`connection_made() <BaseProtocol.connection_made>`"

#: ../../library/asyncio-llapi-index.rst:420
msgid "Called when a connection is made."
msgstr "コネクションが作成されたときに呼び出されます。"

#: ../../library/asyncio-llapi-index.rst:422
msgid "``callback`` :meth:`connection_lost() <BaseProtocol.connection_lost>`"
msgstr "``callback`` :meth:`connection_lost() <BaseProtocol.connection_lost>`"

#: ../../library/asyncio-llapi-index.rst:423
msgid "Called when the connection is lost or closed."
msgstr "コネクションが失われた、あるいはクローズされたときに呼び出されます。"

#: ../../library/asyncio-llapi-index.rst:425
msgid "``callback`` :meth:`pause_writing() <BaseProtocol.pause_writing>`"
msgstr "``callback`` :meth:`pause_writing() <BaseProtocol.pause_writing>`"

#: ../../library/asyncio-llapi-index.rst:426
msgid "Called when the transport's buffer goes over the high water mark."
msgstr ""
"トランスポートのバッファーサイズが最高水位点 (High-Water Mark) を超えたときに"
"呼び出されます。"

#: ../../library/asyncio-llapi-index.rst:428
msgid "``callback`` :meth:`resume_writing() <BaseProtocol.resume_writing>`"
msgstr "``callback`` :meth:`resume_writing() <BaseProtocol.resume_writing>`"

#: ../../library/asyncio-llapi-index.rst:429
msgid "Called when the transport's buffer drains below the low water mark."
msgstr ""
"トランスポートのバッファーサイズが最低水位点 (Low-Water Mark) に達したきに呼"
"び出されます。"

#: ../../library/asyncio-llapi-index.rst:432
msgid "Streaming Protocols (TCP, Unix Sockets, Pipes)"
msgstr "ストリーミングプロトコル (TCP, Unix ソケット, パイプ)"

#: ../../library/asyncio-llapi-index.rst:437
msgid "``callback`` :meth:`data_received() <Protocol.data_received>`"
msgstr "``callback`` :meth:`data_received() <Protocol.data_received>`"

#: ../../library/asyncio-llapi-index.rst:438
msgid "Called when some data is received."
msgstr "データを受信したときに呼び出されます。"

#: ../../library/asyncio-llapi-index.rst:440
msgid "``callback`` :meth:`eof_received() <Protocol.eof_received>`"
msgstr "``callback`` :meth:`eof_received() <Protocol.eof_received>`"

#: ../../library/asyncio-llapi-index.rst:441
#: ../../library/asyncio-llapi-index.rst:456
msgid "Called when an EOF is received."
msgstr "終端 (EOF) を受信したときに呼び出されます。"

#: ../../library/asyncio-llapi-index.rst:444
msgid "Buffered Streaming Protocols"
msgstr "バッファリングされたストリーミングプロトコル"

#: ../../library/asyncio-llapi-index.rst:449
msgid "``callback`` :meth:`get_buffer() <BufferedProtocol.get_buffer>`"
msgstr "``callback`` :meth:`get_buffer() <BufferedProtocol.get_buffer>`"

#: ../../library/asyncio-llapi-index.rst:450
msgid "Called to allocate a new receive buffer."
msgstr "新しい受信バッファを割り当てるために呼び出します。"

#: ../../library/asyncio-llapi-index.rst:452
msgid "``callback`` :meth:`buffer_updated() <BufferedProtocol.buffer_updated>`"
msgstr ""
"``callback`` :meth:`buffer_updated() <BufferedProtocol.buffer_updated>`"

#: ../../library/asyncio-llapi-index.rst:453
msgid "Called when the buffer was updated with the received data."
msgstr "受信データによりバッファが更新された場合に呼び出されます。"

#: ../../library/asyncio-llapi-index.rst:455
msgid "``callback`` :meth:`eof_received() <BufferedProtocol.eof_received>`"
msgstr "``callback`` :meth:`eof_received() <BufferedProtocol.eof_received>`"

#: ../../library/asyncio-llapi-index.rst:459
msgid "Datagram Protocols"
msgstr "データグラムプロトコル"

#: ../../library/asyncio-llapi-index.rst:464
msgid ""
"``callback`` :meth:`datagram_received() <DatagramProtocol.datagram_received>`"
msgstr ""
"``callback`` :meth:`datagram_received() <DatagramProtocol.datagram_received>`"

#: ../../library/asyncio-llapi-index.rst:466
msgid "Called when a datagram is received."
msgstr "データグラムを受信したときに呼び出されます。"

#: ../../library/asyncio-llapi-index.rst:468
msgid "``callback`` :meth:`error_received() <DatagramProtocol.error_received>`"
msgstr ""
"``callback`` :meth:`error_received() <DatagramProtocol.error_received>`"

#: ../../library/asyncio-llapi-index.rst:469
msgid ""
"Called when a previous send or receive operation raises an :class:`OSError`."
msgstr ""
"直前の送信あるいは受信が :class:`OSError` を送出したときに呼び出されます。"

#: ../../library/asyncio-llapi-index.rst:473
msgid "Subprocess Protocols"
msgstr "サブプロセスプロトコル"

#: ../../library/asyncio-llapi-index.rst:478
msgid ""
"``callback`` :meth:`pipe_data_received() <SubprocessProtocol."
"pipe_data_received>`"
msgstr ""
"``callback`` :meth:`pipe_data_received() <SubprocessProtocol."
"pipe_data_received>`"

#: ../../library/asyncio-llapi-index.rst:480
msgid ""
"Called when the child process writes data into its *stdout* or *stderr* pipe."
msgstr ""
"子プロセスが標準出力 (*stdout*) または標準エラー出力 (*stderr*) のパイプに"
"データを書き込んだときに呼び出されます。"

#: ../../library/asyncio-llapi-index.rst:483
msgid ""
"``callback`` :meth:`pipe_connection_lost() <SubprocessProtocol."
"pipe_connection_lost>`"
msgstr ""
"``callback`` :meth:`pipe_connection_lost() <SubprocessProtocol."
"pipe_connection_lost>`"

#: ../../library/asyncio-llapi-index.rst:485
msgid ""
"Called when one of the pipes communicating with the child process is closed."
msgstr ""
"子プロセスと通信するパイプのいずれかがクローズされたときに呼び出されます。"

#: ../../library/asyncio-llapi-index.rst:488
msgid ""
"``callback`` :meth:`process_exited() <SubprocessProtocol.process_exited>`"
msgstr ""
"``callback`` :meth:`process_exited() <SubprocessProtocol.process_exited>`"

#: ../../library/asyncio-llapi-index.rst:490
msgid "Called when the child process has exited."
msgstr "子プロセスが終了したときに呼び出されます。"

#: ../../library/asyncio-llapi-index.rst:494
msgid "Event Loop Policies"
msgstr "イベントループのポリシー"

#: ../../library/asyncio-llapi-index.rst:496
msgid ""
"Policies is a low-level mechanism to alter the behavior of functions like :"
"func:`asyncio.get_event_loop`.  See also the main :ref:`policies section "
"<asyncio-policies>` for more details."
msgstr ""
"ポリシーは :func:`asyncio.get_event_loop` などの関数の振る舞いを変更する低レ"
"ベルなメカニズムです。詳細は :ref:`ポリシーについてのセクション <asyncio-"
"policies>` を参照してください。"

#: ../../library/asyncio-llapi-index.rst:502
msgid "Accessing Policies"
msgstr "ポリシーへのアクセス"

#: ../../library/asyncio-llapi-index.rst:507
msgid ":meth:`asyncio.get_event_loop_policy`"
msgstr ":meth:`asyncio.get_event_loop_policy`"

#: ../../library/asyncio-llapi-index.rst:508
msgid "Return the current process-wide policy."
msgstr "プロセス全体にわたる現在のポリシーを返します。"

#: ../../library/asyncio-llapi-index.rst:510
msgid ":meth:`asyncio.set_event_loop_policy`"
msgstr ":meth:`asyncio.set_event_loop_policy`"

#: ../../library/asyncio-llapi-index.rst:511
msgid "Set a new process-wide policy."
msgstr "新たなプロセス全体にわたるポリシーを設定します。"

#: ../../library/asyncio-llapi-index.rst:513
msgid ":class:`AbstractEventLoopPolicy`"
msgstr ":class:`AbstractEventLoopPolicy`"

#: ../../library/asyncio-llapi-index.rst:514
msgid "Base class for policy objects."
msgstr "ポリシーオブジェクトの基底クラスです。"
