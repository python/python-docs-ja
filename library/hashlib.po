# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/hashlib.rst:2
msgid ":mod:`hashlib` --- Secure hashes and message digests"
msgstr ":mod:`hashlib` --- セキュアハッシュおよびメッセージダイジェスト"

#: ../../library/hashlib.rst:16
msgid "**Source code:** :source:`Lib/hashlib.py`"
msgstr "**ソースコード:** :source:`Lib/hashlib.py`"

#: ../../library/hashlib.rst:20
msgid ""
"This module implements a common interface to many different secure hash and "
"message digest algorithms.  Included are the FIPS secure hash algorithms "
"SHA1, SHA224, SHA256, SHA384, and SHA512 (defined in FIPS 180-2) as well as "
"RSA's MD5 algorithm (defined in Internet :rfc:`1321`). The terms secure hash "
"and message digest are interchangeable.  Older algorithms were called "
"message digests.  The modern term is secure hash."
msgstr ""
"このモジュールは、セキュアハッシュやメッセージダイジェスト用のさまざまなアル"
"ゴリズムを実装したものです。FIPSのセキュアなハッシュアルゴリズムである SHA1、"
"SHA224、SHA256、SHA384およびSHA512 (FIPS 180-2 で定義されているもの) だけでな"
"くRSAのMD5アルゴリズム (Internet :rfc:`1321` で定義されています)も実装してい"
"ます。「セキュアなハッシュ」と「メッセージダイジェスト」はどちらも同じ意味で"
"す。古くからあるアルゴリズムは「メッセージダイジェスト」と呼ばれていますが、"
"最近は「セキュアハッシュ」という用語が用いられています。"

#: ../../library/hashlib.rst:29
msgid ""
"If you want the adler32 or crc32 hash functions, they are available in the :"
"mod:`zlib` module."
msgstr ""
"adler32 や crc32 ハッシュ関数は :mod:`zlib` モジュールで提供されています。"

#: ../../library/hashlib.rst:34
msgid ""
"Some algorithms have known hash collision weaknesses, refer to the \"See "
"also\" section at the end."
msgstr ""
"幾つかのアルゴリズムはハッシュの衝突に弱いことが知られています。最後の \"参考"
"\" セクションを見てください。"

#: ../../library/hashlib.rst:37
msgid ""
"There is one constructor method named for each type of :dfn:`hash`.  All "
"return a hash object with the same simple interface. For example: use :func:"
"`sha1` to create a SHA1 hash object. You can now feed this object with "
"arbitrary strings using the :meth:`update` method.  At any point you can ask "
"it for the :dfn:`digest` of the concatenation of the strings fed to it so "
"far using the :meth:`digest` or :meth:`hexdigest` methods."
msgstr ""
"各 :dfn:`hash` の名前が付いたコンストラクタがあります。いずれも同一で簡単なイ"
"ンターフェイスのあるハッシュオブジェクトを返します。例えば、SHA1 ハッシュオブ"
"ジェクトを作るには :func:`sha1` を使います。このオブジェクトには :meth:"
"`update` を用いて任意の文字列を渡すことが出来ます。:meth:`digest` や :meth:"
"`hexdigest` メソッドを用いて、それまでに渡したデータを連結したものの :dfn:"
"`digest` をいつでも要求することが出来ます。"

#: ../../library/hashlib.rst:46
msgid ""
"Constructors for hash algorithms that are always present in this module are :"
"func:`md5`, :func:`sha1`, :func:`sha224`, :func:`sha256`, :func:`sha384`, "
"and :func:`sha512`.  Additional algorithms may also be available depending "
"upon the OpenSSL library that Python uses on your platform."
msgstr ""
"このモジュールで常に使用できるハッシュアルゴリズムのコンストラクタは :func:"
"`md5` 、 :func:`sha1` 、 :func:`sha224` 、 :func:`sha256` 、 :func:`sha384` "
"および :func:`sha512` です。それ以外のアルゴリズムが使用できるかどうかは、"
"Python が使用している OpenSSL ライブラリに依存します。"

#: ../../library/hashlib.rst:51
msgid ""
"For example, to obtain the digest of the string ``'Nobody inspects the "
"spammish repetition'``:"
msgstr ""
"たとえば、``'Nobody inspects the spammish repetition'`` というバイト文字列の"
"ダイジェストを取得するには次のようにします::"

#: ../../library/hashlib.rst:65
msgid "More condensed:"
msgstr "もっと簡潔に書くと、このようになります:"

#: ../../library/hashlib.rst:70
msgid ""
"A generic :func:`new` constructor that takes the string name of the desired "
"algorithm as its first parameter also exists to allow access to the above "
"listed hashes as well as any other algorithms that your OpenSSL library may "
"offer.  The named constructors are much faster than :func:`new` and should "
"be preferred."
msgstr ""
"一般的な :func:`new` コンストラクタで、第一引数にアルゴリズム名を文字列で受け"
"取ります。他にも、上記ハッシュだけでなく OpenSSL ライブラリーが提供するような"
"他のアルゴリズムにアクセスすることが出来ます。名前のあるコンストラクタの方"
"が :func:`new` よりもずっと速いので望ましいです。"

#: ../../library/hashlib.rst:75
msgid "Using :func:`new` with an algorithm provided by OpenSSL:"
msgstr ":func:`new` にOpenSSLのアルゴリズムを指定する例です:"

#: ../../library/hashlib.rst:82
msgid "This module provides the following constant attribute:"
msgstr "このモジュールは以下の定数属性を提供しています:"

#: ../../library/hashlib.rst:86
msgid ""
"A tuple providing the names of the hash algorithms guaranteed to be "
"supported by this module."
msgstr ""
"このモジュールによってサポートされていることが保証されるハッシュアルゴリズム"
"の名前が入ったタプル。"

#: ../../library/hashlib.rst:93
msgid ""
"A set containing the names of the hash algorithms guaranteed to be supported "
"by this module on all platforms."
msgstr ""
"このモジュールによってすべてのプラットフォームでサポートされていることが保証"
"されるハッシュアルゴリズムの名前を含む集合です。"

#: ../../library/hashlib.rst:100
msgid ""
"A set containing the names of the hash algorithms that are available in the "
"running Python interpreter.  These names will be recognized when passed to :"
"func:`new`.  :attr:`algorithms_guaranteed` will always be a subset.  The "
"same algorithm may appear multiple times in this set under different names "
"(thanks to OpenSSL)."
msgstr ""
"実行中の Python インタープリタで利用可能なハッシュアルゴリズム名の set です。"
"これらの名前は :func:`new` に渡すことが出来ます。:attr:"
"`algorithms_guaranteed` は常にサブセットです。この set の中に同じアルゴリズム"
"が違う名前で複数回現れることがあります (OpenSSL 由来)。"

#: ../../library/hashlib.rst:109
msgid ""
"The following values are provided as constant attributes of the hash objects "
"returned by the constructors:"
msgstr ""
"コンストラクタが返すハッシュオブジェクトには、次のような定数属性が用意されて"
"います:"

#: ../../library/hashlib.rst:115
msgid "The size of the resulting hash in bytes."
msgstr "生成されたハッシュのバイト数。"

#: ../../library/hashlib.rst:119
msgid "The internal block size of the hash algorithm in bytes."
msgstr "内部で使われるハッシュアルゴリズムのブロックのバイト数。"

#: ../../library/hashlib.rst:121
msgid "A hash object has the following methods:"
msgstr "ハッシュオブジェクトには次のようなメソッドがあります:"

#: ../../library/hashlib.rst:126
msgid ""
"Update the hash object with the string *arg*.  Repeated calls are equivalent "
"to a single call with the concatenation of all the arguments: ``m.update(a); "
"m.update(b)`` is equivalent to ``m.update(a+b)``."
msgstr ""
"文字列 *arg* でハッシュオブジェクトを更新します。繰り返し呼び出すことは引数全"
"ての連結で一回呼び出すことと等価です。例えば ``m.update(a); m.update(b)`` は "
"``m.update(a+b)`` と等価です。"

#: ../../library/hashlib.rst:130
msgid ""
"The Python GIL is released to allow other threads to run while hash updates "
"on data larger than 2048 bytes is taking place when using hash algorithms "
"supplied by OpenSSL."
msgstr ""
"ハッシュアルゴリズムが OpenSSL によって提供されていて、データが 2048 バイトを"
"超えている場合には、ハッシュの更新が実行中でも他のスレッドが実行出来るよう"
"に、Python :term:`GIL` が解放されます。"

#: ../../library/hashlib.rst:138
msgid ""
"Return the digest of the strings passed to the :meth:`update` method so far. "
"This is a string of :attr:`digest_size` bytes which may contain non-ASCII "
"characters, including null bytes."
msgstr ""
"これまでに :meth:`update` メソッドに渡した文字列のダイジェストを返します。こ"
"れは :attr:`digest_size` バイトの文字列であり、非ASCII文字やnull バイトを含む"
"こともあります。"

#: ../../library/hashlib.rst:145
msgid ""
"Like :meth:`digest` except the digest is returned as a string of double "
"length, containing only hexadecimal digits.  This may  be used to exchange "
"the value safely in email or other non-binary environments."
msgstr ""
":meth:`digest` と似ていますが、倍の長さの、16進形式文字列を返します。これは、"
"電子メールなどの非バイナリ環境で値を交換する場合に便利です。"

#: ../../library/hashlib.rst:152
msgid ""
"Return a copy (\"clone\") of the hash object.  This can be used to "
"efficiently compute the digests of strings that share a common initial "
"substring."
msgstr ""
"ハッシュオブジェクトのコピー (\"クローン\") を返します。これは、共通部分を持"
"つ複数の文字列のダイジェストを効率的に計算するために使用します。"

#: ../../library/hashlib.rst:157
msgid "Key derivation"
msgstr "鍵導出"

#: ../../library/hashlib.rst:159
msgid ""
"Key derivation and key stretching algorithms are designed for secure "
"password hashing. Naive algorithms such as ``sha1(password)`` are not "
"resistant against brute-force attacks. A good password hashing function must "
"be tunable, slow, and include a `salt <https://en.wikipedia.org/wiki/"
"Salt_%28cryptography%29>`_."
msgstr ""
"鍵の導出【derivation】と引き伸ばし【stretching】のアルゴリズムはセキュアなパ"
"スワードのハッシュ化のために設計されました。 ``sha1(password)`` のようなうぶ"
"なアルゴリズムは、ブルートフォース攻撃への抵抗者にはなりません。良いパスワー"
"ドハッシュ化は調節可能で、遅くて、 `salt <https://en.wikipedia.org/wiki/"
"Salt_%28cryptography%29>`_ を含まなければなりません。"

#: ../../library/hashlib.rst:167
msgid ""
"The function provides PKCS#5 password-based key derivation function 2. It "
"uses HMAC as pseudorandom function."
msgstr ""
"この関数は PKCS#5 のパスワードに基づいた鍵導出関数 2 を提供しています。疑似乱"
"数関数として HMAC を使用しています。"

#: ../../library/hashlib.rst:170
msgid ""
"The string *name* is the desired name of the hash digest algorithm for HMAC, "
"e.g. 'sha1' or 'sha256'. *password* and *salt* are interpreted as buffers of "
"bytes. Applications and libraries should limit *password* to a sensible "
"value (e.g. 1024). *salt* should be about 16 or more bytes from a proper "
"source, e.g. :func:`os.urandom`."
msgstr ""
"文字列 *name* は、HMAC のハッシュダイジェストに使いたいアルゴリズムの名前で、"
"例えば 'sha1' や 'sha256' です。 *password* と *salt* はバイト列のバッファと"
"して解釈されます。アプリケーションとライブラリは *password* に相応しい値 (例"
"えば 1024) に制限すべきです。 *salt* は :func:`os.urandom` のような適切な所源"
"から得た、およそ 16 かそれよりも多いバイト列でなければなりません。"

#: ../../library/hashlib.rst:176
msgid ""
"The number of *rounds* should be chosen based on the hash algorithm and "
"computing power. As of 2013, at least 100,000 rounds of SHA-256 is suggested."
msgstr ""
"*rounds* 数はハッシュアルゴリズムと計算機の能力に基いて決められるべきです。"
"2013 年現在の場合、 SHA-256 に対して最低でも 100,000 ラウンドをお奨めします。"

#: ../../library/hashlib.rst:179
msgid ""
"*dklen* is the length of the derived key. If *dklen* is ``None`` then the "
"digest size of the hash algorithm *name* is used, e.g. 64 for SHA-512."
msgstr ""
"*dklen* が ``None`` の場合、ハッシュアルゴリズム *name* のダイジェストサイズ"
"が使われます。例えば SHA-512 では 64 です。"

#: ../../library/hashlib.rst:191
msgid ""
"A fast implementation of *pbkdf2_hmac* is available with OpenSSL.  The "
"Python implementation uses an inline version of :mod:`hmac`. It is about "
"three times slower and doesn't release the GIL."
msgstr ""
"*pbkdf2_hmac* の高速な実装は OpenSSL 使用版で利用可能です。Python 実装は :"
"mod:`hmac` のインラインバージョンを使います。それはおよそ 3 倍遅く、GIL を解"
"放しません。"

#: ../../library/hashlib.rst:199
msgid "Module :mod:`hmac`"
msgstr ":mod:`hmac` モジュール"

#: ../../library/hashlib.rst:199
msgid "A module to generate message authentication codes using hashes."
msgstr "ハッシュを用いてメッセージ認証コードを生成するモジュールです。"

#: ../../library/hashlib.rst:202
msgid "Module :mod:`base64`"
msgstr ":mod:`base64` モジュール"

#: ../../library/hashlib.rst:202
msgid "Another way to encode binary hashes for non-binary environments."
msgstr ""
"バイナリハッシュを非バイナリ環境用にエンコードするもうひとつの方法です。"

#: ../../library/hashlib.rst:205
msgid "http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf"
msgstr "http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf"

#: ../../library/hashlib.rst:205
msgid "The FIPS 180-2 publication on Secure Hash Algorithms."
msgstr "FIPS 180-2 のセキュアハッシュアルゴリズムについての説明。"

#: ../../library/hashlib.rst:208
msgid ""
"https://en.wikipedia.org/wiki/"
"Cryptographic_hash_function#Cryptographic_hash_algorithms"
msgstr ""
"https://ja.wikipedia.org/wiki/"
"%E6%9A%97%E5%8F%B7%E5%AD%A6%E7%9A%84%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E9%96%A2%E6%95%B0"

#: ../../library/hashlib.rst:208
msgid ""
"Wikipedia article with information on which algorithms have known issues and "
"what that means regarding their use."
msgstr ""
"どのアルゴリズムにどんな既知の問題があって、それが実際に利用する際にどう影響"
"するかについての Wikipedia の記事。"
