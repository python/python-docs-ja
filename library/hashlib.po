# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/hashlib.rst:2
msgid ":mod:`hashlib` --- Secure hashes and message digests"
msgstr ":mod:`hashlib` --- セキュアハッシュおよびメッセージダイジェスト"

#: ../../library/hashlib.rst:10
msgid "**Source code:** :source:`Lib/hashlib.py`"
msgstr "**ソースコード:** :source:`Lib/hashlib.py`"

#: ../../library/hashlib.rst:23
msgid ""
"This module implements a common interface to many different secure hash and "
"message digest algorithms.  Included are the FIPS secure hash algorithms "
"SHA1, SHA224, SHA256, SHA384, and SHA512 (defined in FIPS 180-2) as well as "
"RSA's MD5 algorithm (defined in internet :rfc:`1321`).  The terms \"secure "
"hash\" and \"message digest\" are interchangeable.  Older algorithms were "
"called message digests.  The modern term is secure hash."
msgstr ""
"このモジュールは、セキュアハッシュやメッセージダイジェスト用のさまざまなアル"
"ゴリズムを実装したものです。FIPSのセキュアなハッシュアルゴリズムである SHA1、"
"SHA224、SHA256、SHA384およびSHA512 (FIPS 180-2 で定義されているもの) だけでな"
"くRSAのMD5アルゴリズム (インターネットの :rfc:`1321` で定義されています)も実"
"装しています。「セキュアなハッシュ」と「メッセージダイジェスト」はどちらも同"
"じ意味です。古くからあるアルゴリズムは「メッセージダイジェスト」と呼ばれてい"
"ますが、最近は「セキュアハッシュ」という用語が用いられています。"

#: ../../library/hashlib.rst:32
msgid ""
"If you want the adler32 or crc32 hash functions, they are available in the :"
"mod:`zlib` module."
msgstr ""
"adler32 や crc32 ハッシュ関数は :mod:`zlib` モジュールで提供されています。"

#: ../../library/hashlib.rst:37
msgid ""
"Some algorithms have known hash collision weaknesses, refer to the \"See "
"also\" section at the end."
msgstr ""
"幾つかのアルゴリズムはハッシュの衝突に弱いことが知られています。最後の \"参考"
"\" セクションを見てください。"

#: ../../library/hashlib.rst:44
msgid "Hash algorithms"
msgstr "ハッシュアルゴリズム"

#: ../../library/hashlib.rst:46
msgid ""
"There is one constructor method named for each type of :dfn:`hash`.  All "
"return a hash object with the same simple interface. For example: use :func:"
"`sha256` to create a SHA-256 hash object. You can now feed this object with :"
"term:`bytes-like objects <bytes-like object>` (normally :class:`bytes`) "
"using the :meth:`update` method. At any point you can ask it for the :dfn:"
"`digest` of the concatenation of the data fed to it so far using the :meth:"
"`digest` or :meth:`hexdigest` methods."
msgstr ""
"各 :dfn:`hash` の名前が付いたコンストラクタがあります。いずれも同一で簡単なイ"
"ンターフェイスのあるハッシュオブジェクトを返します。例えば、SHA-256 ハッシュ"
"オブジェクトを作るには :func:`sha256` を使います。このオブジェクトには :meth:"
"`update` メソッドを用いて :term:`bytes-like オブジェクト <bytes-like "
"object>` (通常 :class:`bytes`) を渡すことができます。:meth:`digest` や :meth:"
"`hexdigest` メソッドを用いて、それまでに渡したデータを連結したものの :dfn:"
"`digest` をいつでも要求することができます。"

#: ../../library/hashlib.rst:56
msgid ""
"For better multithreading performance, the Python :term:`GIL` is released "
"for data larger than 2047 bytes at object creation or on update."
msgstr ""
"マルチスレッドにおける良好なパフォーマンスを得るために、オブジェクトの生成時"
"または更新時に与えるデータが 2047 バイトを超えている場合、Python :term:`GIL` "
"が解除されます。"

#: ../../library/hashlib.rst:61
msgid ""
"Feeding string objects into :meth:`update` is not supported, as hashes work "
"on bytes, not on characters."
msgstr ""
"文字列オブジェクトを :meth:`update` に渡すのはサポートされていません。ハッ"
"シュはバイトには機能しますが、文字には機能しないからです。"

#: ../../library/hashlib.rst:66
msgid ""
"Constructors for hash algorithms that are always present in this module are :"
"func:`sha1`, :func:`sha224`, :func:`sha256`, :func:`sha384`, :func:"
"`sha512`, :func:`blake2b`, and :func:`blake2s`. :func:`md5` is normally "
"available as well, though it may be missing or blocked if you are using a "
"rare \"FIPS compliant\" build of Python. Additional algorithms may also be "
"available depending upon the OpenSSL library that Python uses on your "
"platform. On most platforms the :func:`sha3_224`, :func:`sha3_256`, :func:"
"`sha3_384`, :func:`sha3_512`, :func:`shake_128`, :func:`shake_256` are also "
"available."
msgstr ""

#: ../../library/hashlib.rst:76
msgid ""
"SHA3 (Keccak) and SHAKE constructors :func:`sha3_224`, :func:`sha3_256`, :"
"func:`sha3_384`, :func:`sha3_512`, :func:`shake_128`, :func:`shake_256`."
msgstr ""
"SHA3 (Keccak) ならびに SHAKE コンストラクタ :func:`sha3_224`, :func:"
"`sha3_256`, :func:`sha3_384`, :func:`sha3_512`, :func:`shake_128`, :func:"
"`shake_256`。"

#: ../../library/hashlib.rst:80
msgid ":func:`blake2b` and :func:`blake2s` were added."
msgstr ":func:`blake2b` と :func:`blake2s` が追加されました。"

#: ../../library/hashlib.rst:85
msgid ""
"All hashlib constructors take a keyword-only argument *usedforsecurity* with "
"default value ``True``. A false value allows the use of insecure and blocked "
"hashing algorithms in restricted environments. ``False`` indicates that the "
"hashing algorithm is not used in a security context, e.g. as a non-"
"cryptographic one-way compression function."
msgstr ""

#: ../../library/hashlib.rst:92
msgid "Hashlib now uses SHA3 and SHAKE from OpenSSL 1.1.1 and newer."
msgstr ""

#: ../../library/hashlib.rst:94
msgid ""
"For example, to obtain the digest of the byte string ``b'Nobody inspects the "
"spammish repetition'``::"
msgstr ""
"たとえば、``b'Nobody inspects the spammish repetition'`` というバイト文字列の"
"ダイジェストを取得するには次のようにします::"

#: ../../library/hashlib.rst:108
msgid "More condensed:"
msgstr "もっと簡潔に書くと、このようになります:"

#: ../../library/hashlib.rst:115
msgid ""
"Is a generic constructor that takes the string *name* of the desired "
"algorithm as its first parameter.  It also exists to allow access to the "
"above listed hashes as well as any other algorithms that your OpenSSL "
"library may offer.  The named constructors are much faster than :func:`new` "
"and should be preferred."
msgstr ""
"一般的なコンストラクタで、第一引数にアルゴリズム名を文字列 *name* で受け取り"
"ます。他にも、前述のハッシュアルゴリズムだけでなく OpenSSL ライブラリーが提供"
"するような他のアルゴリズムにアクセスすることができます。名前のあるコンストラ"
"クタの方が :func:`new` よりもずっと速いので望ましいです。"

#: ../../library/hashlib.rst:121
msgid "Using :func:`new` with an algorithm provided by OpenSSL:"
msgstr ":func:`new` にOpenSSLのアルゴリズムを指定する例です:"

#: ../../library/hashlib.rst:128
msgid "Hashlib provides the following constant attributes:"
msgstr "Hashlib は以下の定数属性を提供しています:"

#: ../../library/hashlib.rst:132
msgid ""
"A set containing the names of the hash algorithms guaranteed to be supported "
"by this module on all platforms.  Note that 'md5' is in this list despite "
"some upstream vendors offering an odd \"FIPS compliant\" Python build that "
"excludes it."
msgstr ""
"このモジュールによってすべてのプラットフォームでサポートされていることが保証"
"されるハッシュアルゴリズムの名前を含む集合です。一部のアップストリームのベン"
"ダーが提供する奇妙な \"FIPS準拠の\" Pythonビルドではmd5のサポートを除外してい"
"ますが、その場合であっても 'md5' がリストに含まれることに注意してください。"

#: ../../library/hashlib.rst:141
msgid ""
"A set containing the names of the hash algorithms that are available in the "
"running Python interpreter.  These names will be recognized when passed to :"
"func:`new`.  :attr:`algorithms_guaranteed` will always be a subset.  The "
"same algorithm may appear multiple times in this set under different names "
"(thanks to OpenSSL)."
msgstr ""
"実行中の Python インタープリタで利用可能なハッシュアルゴリズム名の set です。"
"これらの名前は :func:`new` に渡すことができます。:attr:"
"`algorithms_guaranteed` は常にサブセットです。この set の中に同じアルゴリズム"
"が違う名前で複数回現れることがあります (OpenSSL 由来)。"

#: ../../library/hashlib.rst:149
msgid ""
"The following values are provided as constant attributes of the hash objects "
"returned by the constructors:"
msgstr ""
"コンストラクタが返すハッシュオブジェクトには、次のような定数属性が用意されて"
"います:"

#: ../../library/hashlib.rst:155
msgid "The size of the resulting hash in bytes."
msgstr "生成されたハッシュのバイト数。"

#: ../../library/hashlib.rst:159
msgid "The internal block size of the hash algorithm in bytes."
msgstr "内部で使われるハッシュアルゴリズムのブロックのバイト数。"

#: ../../library/hashlib.rst:161
msgid "A hash object has the following attributes:"
msgstr "ハッシュオブジェクトには次のような属性があります:"

#: ../../library/hashlib.rst:165
msgid ""
"The canonical name of this hash, always lowercase and always suitable as a "
"parameter to :func:`new` to create another hash of this type."
msgstr ""
"このハッシュの正規名です。常に小文字で、:func:`new` の引数として渡してこのタ"
"イプの別のハッシュを生成することができます。"

#: ../../library/hashlib.rst:168
msgid ""
"The name attribute has been present in CPython since its inception, but "
"until Python 3.4 was not formally specified, so may not exist on some "
"platforms."
msgstr ""
"name 属性は CPython には最初からありましたが、Python 3.4 までは正式に明記され"
"ていませんでした。そのため、プラットフォームによっては存在しないかもしれませ"
"ん。"

#: ../../library/hashlib.rst:173
msgid "A hash object has the following methods:"
msgstr "ハッシュオブジェクトには次のようなメソッドがあります:"

#: ../../library/hashlib.rst:178
msgid ""
"Update the hash object with the :term:`bytes-like object`. Repeated calls "
"are equivalent to a single call with the concatenation of all the arguments: "
"``m.update(a); m.update(b)`` is equivalent to ``m.update(a+b)``."
msgstr ""
"hash オブジェクトを :term:`bytes-like object` で更新します。このメソッドの呼"
"出しの繰り返しは、それらの引数を全て結合した引数で単一の呼び出しをした際と同"
"じになります。すなわち ``m.update(a); m.update(b)``  は ``m.update(a + b)`` "
"と等価です。"

#: ../../library/hashlib.rst:183
msgid ""
"The Python GIL is released to allow other threads to run while hash updates "
"on data larger than 2047 bytes is taking place when using hash algorithms "
"supplied by OpenSSL."
msgstr ""
"ハッシュアルゴリズムが OpenSSL によって提供されていて、データが 2047 バイトを"
"超えている場合には、ハッシュの更新が実行中でも他のスレッドが実行できるよう"
"に、Python :term:`GIL` が解放されます。"

#: ../../library/hashlib.rst:191
msgid ""
"Return the digest of the data passed to the :meth:`update` method so far. "
"This is a bytes object of size :attr:`digest_size` which may contain bytes "
"in the whole range from 0 to 255."
msgstr ""
"これまで :meth:`update` メソッドに渡されたデータのダイジェスト値を返します。"
"これは :attr:`digest_size` と同じ長さの、0 から 255 の範囲全てを含み得るバイ"
"トの列です。"

#: ../../library/hashlib.rst:198 ../../library/hashlib.rst:226
msgid ""
"Like :meth:`digest` except the digest is returned as a string object of "
"double length, containing only hexadecimal digits.  This may be used to "
"exchange the value safely in email or other non-binary environments."
msgstr ""
":meth:`digest` と似ていますが、倍の長さの、16進形式文字列を返します。これは、"
"電子メールなどの非バイナリ環境で値を交換する場合に便利です。"

#: ../../library/hashlib.rst:205
msgid ""
"Return a copy (\"clone\") of the hash object.  This can be used to "
"efficiently compute the digests of data sharing a common initial substring."
msgstr ""
"ハッシュオブジェクトのコピー (\"クローン\") を返します。これは、最初の部分文"
"字列が共通なデータのダイジェストを効率的に計算するために使用します。"

#: ../../library/hashlib.rst:210
msgid "SHAKE variable length digests"
msgstr "SHAKE 可変長ダイジェスト"

#: ../../library/hashlib.rst:212
msgid ""
"The :func:`shake_128` and :func:`shake_256` algorithms provide variable "
"length digests with length_in_bits//2 up to 128 or 256 bits of security. As "
"such, their digest methods require a length. Maximum length is not limited "
"by the SHAKE algorithm."
msgstr ""

#: ../../library/hashlib.rst:219
msgid ""
"Return the digest of the data passed to the :meth:`update` method so far. "
"This is a bytes object of size *length* which may contain bytes in the whole "
"range from 0 to 255."
msgstr ""
"これまで :meth:`update` メソッドに渡されたデータのダイジェスト値を返します。"
"これは *length* と同じ長さの、0 から 255 の範囲全てを含み得るバイトの列です。"

#: ../../library/hashlib.rst:232
msgid "Key derivation"
msgstr "鍵導出"

#: ../../library/hashlib.rst:234
msgid ""
"Key derivation and key stretching algorithms are designed for secure "
"password hashing. Naive algorithms such as ``sha1(password)`` are not "
"resistant against brute-force attacks. A good password hashing function must "
"be tunable, slow, and include a `salt <https://en.wikipedia.org/wiki/"
"Salt_%28cryptography%29>`_."
msgstr ""
"鍵の導出 (derivation) と引き伸ばし (stretching) のアルゴリズムはセキュアなパ"
"スワードのハッシュ化のために設計されました。 ``sha1(password)`` のような甘い"
"アルゴリズムは、ブルートフォース攻撃に抵抗できません。良いパスワードハッシュ"
"化は調節可能で、遅くて、 `salt <https://en.wikipedia.org/wiki/"
"Salt_%28cryptography%29>`_ を含まなければなりません。"

#: ../../library/hashlib.rst:242
msgid ""
"The function provides PKCS#5 password-based key derivation function 2. It "
"uses HMAC as pseudorandom function."
msgstr ""
"この関数は PKCS#5 のパスワードに基づいた鍵導出関数 2 を提供しています。疑似乱"
"数関数として HMAC を使用しています。"

#: ../../library/hashlib.rst:245
msgid ""
"The string *hash_name* is the desired name of the hash digest algorithm for "
"HMAC, e.g. 'sha1' or 'sha256'. *password* and *salt* are interpreted as "
"buffers of bytes. Applications and libraries should limit *password* to a "
"sensible length (e.g. 1024). *salt* should be about 16 or more bytes from a "
"proper source, e.g. :func:`os.urandom`."
msgstr ""
"文字列 *hash_name* は、HMAC のハッシュダイジェストアルゴリズムの望ましい名前"
"で、例えば 'sha1' や 'sha256' です。 *password* と *salt* はバイト列のバッ"
"ファとして解釈されます。アプリケーションとライブラリは、 *password* を適切な"
"長さ (例えば 1024) に制限すべきです。 *salt* は :func:`os.urandom` のような適"
"切なソースからの、およそ 16 バイトかそれ以上のバイト列にするべきです。"

#: ../../library/hashlib.rst:251
msgid ""
"The number of *iterations* should be chosen based on the hash algorithm and "
"computing power. As of 2022, hundreds of thousands of iterations of SHA-256 "
"are suggested. For rationale as to why and how to choose what is best for "
"your application, read *Appendix A.2.2* of NIST-SP-800-132_. The answers on "
"the `stackexchange pbkdf2 iterations question`_ explain in detail."
msgstr ""

#: ../../library/hashlib.rst:257
msgid ""
"*dklen* is the length of the derived key. If *dklen* is ``None`` then the "
"digest size of the hash algorithm *hash_name* is used, e.g. 64 for SHA-512."
msgstr ""
"*dklen* は、導出された鍵の長さです。 *dklen* が ``None`` の場合、ハッシュアル"
"ゴリズム *hash_name* のダイジェストサイズが使われます。例えば SHA-512 では "
"64 です。"

#: ../../library/hashlib.rst:270
msgid ""
"A fast implementation of *pbkdf2_hmac* is available with OpenSSL.  The "
"Python implementation uses an inline version of :mod:`hmac`. It is about "
"three times slower and doesn't release the GIL."
msgstr ""
"*pbkdf2_hmac* の高速な実装は OpenSSL 使用版で利用可能です。Python 実装は :"
"mod:`hmac` のインラインバージョンを使います。それはおよそ 3 倍遅く、GIL を解"
"放しません。"

#: ../../library/hashlib.rst:276
msgid ""
"Slow Python implementation of *pbkdf2_hmac* is deprecated. In the future the "
"function will only be available when Python is compiled with OpenSSL."
msgstr ""

#: ../../library/hashlib.rst:282
msgid ""
"The function provides scrypt password-based key derivation function as "
"defined in :rfc:`7914`."
msgstr ""
"この関数は、 :rfc:`7914` で定義されるscrypt のパスワードに基づいた鍵導出関数"
"を提供します。"

#: ../../library/hashlib.rst:285
msgid ""
"*password* and *salt* must be :term:`bytes-like objects <bytes-like "
"object>`.  Applications and libraries should limit *password* to a sensible "
"length (e.g. 1024).  *salt* should be about 16 or more bytes from a proper "
"source, e.g. :func:`os.urandom`."
msgstr ""
"*password* と *salt* は :term:`bytes-like object` でなければなりません。アプ"
"リケーションとライブラリは、 *password* を適切な長さ (例えば 1024) に制限すべ"
"きです。 *salt* は :func:`os.urandom` のような適切なソースからの、およそ 16 "
"バイトかそれ以上のバイト列にするべきです。"

#: ../../library/hashlib.rst:290
msgid ""
"*n* is the CPU/Memory cost factor, *r* the block size, *p* parallelization "
"factor and *maxmem* limits memory (OpenSSL 1.1.0 defaults to 32 MiB). "
"*dklen* is the length of the derived key."
msgstr ""

#: ../../library/hashlib.rst:298
msgid "BLAKE2"
msgstr "BLAKE2"

#: ../../library/hashlib.rst:305
msgid ""
"BLAKE2_ is a cryptographic hash function defined in :rfc:`7693` that comes "
"in two flavors:"
msgstr ""

#: ../../library/hashlib.rst:308
msgid ""
"**BLAKE2b**, optimized for 64-bit platforms and produces digests of any size "
"between 1 and 64 bytes,"
msgstr ""

#: ../../library/hashlib.rst:311
msgid ""
"**BLAKE2s**, optimized for 8- to 32-bit platforms and produces digests of "
"any size between 1 and 32 bytes."
msgstr ""

#: ../../library/hashlib.rst:314
msgid ""
"BLAKE2 supports **keyed mode** (a faster and simpler replacement for HMAC_), "
"**salted hashing**, **personalization**, and **tree hashing**."
msgstr ""

#: ../../library/hashlib.rst:317
msgid ""
"Hash objects from this module follow the API of standard library's :mod:"
"`hashlib` objects."
msgstr ""
"このモジュールのハッシュオブジェクトは標準ライブラリーの :mod:`hashlib` オブ"
"ジェクトの API に従います。"

#: ../../library/hashlib.rst:322
msgid "Creating hash objects"
msgstr "ハッシュオブジェクトの作成"

#: ../../library/hashlib.rst:324
msgid "New hash objects are created by calling constructor functions:"
msgstr ""
"新しいハッシュオブジェクトは、コンストラクタ関数を呼び出すことで生成されます:"

#: ../../library/hashlib.rst:338
msgid ""
"These functions return the corresponding hash objects for calculating "
"BLAKE2b or BLAKE2s. They optionally take these general parameters:"
msgstr ""

#: ../../library/hashlib.rst:341
msgid ""
"*data*: initial chunk of data to hash, which must be :term:`bytes-like "
"object`.  It can be passed only as positional argument."
msgstr ""

#: ../../library/hashlib.rst:344
msgid "*digest_size*: size of output digest in bytes."
msgstr "*digest_size*: 出力するダイジェストのバイト数。"

#: ../../library/hashlib.rst:346
msgid ""
"*key*: key for keyed hashing (up to 64 bytes for BLAKE2b, up to 32 bytes for "
"BLAKE2s)."
msgstr ""

#: ../../library/hashlib.rst:349
msgid ""
"*salt*: salt for randomized hashing (up to 16 bytes for BLAKE2b, up to 8 "
"bytes for BLAKE2s)."
msgstr ""

#: ../../library/hashlib.rst:352
msgid ""
"*person*: personalization string (up to 16 bytes for BLAKE2b, up to 8 bytes "
"for BLAKE2s)."
msgstr ""

#: ../../library/hashlib.rst:355
msgid "The following table shows limits for general parameters (in bytes):"
msgstr "下の表は一般的なパラメータの上限 (バイト単位) です:"

#: ../../library/hashlib.rst:358
msgid "Hash"
msgstr "Hash"

#: ../../library/hashlib.rst:358
msgid "digest_size"
msgstr "digest_size"

#: ../../library/hashlib.rst:358
msgid "len(key)"
msgstr "len(key)"

#: ../../library/hashlib.rst:358
msgid "len(salt)"
msgstr "len(salt)"

#: ../../library/hashlib.rst:358
msgid "len(person)"
msgstr "len(person)"

#: ../../library/hashlib.rst:360
msgid "BLAKE2b"
msgstr "BLAKE2b"

#: ../../library/hashlib.rst:360
msgid "64"
msgstr "64"

#: ../../library/hashlib.rst:360
msgid "16"
msgstr "16"

#: ../../library/hashlib.rst:361
msgid "BLAKE2s"
msgstr "BLAKE2s"

#: ../../library/hashlib.rst:361
msgid "32"
msgstr "32"

#: ../../library/hashlib.rst:361
msgid "8"
msgstr "8"

#: ../../library/hashlib.rst:366
msgid ""
"BLAKE2 specification defines constant lengths for salt and personalization "
"parameters, however, for convenience, this implementation accepts byte "
"strings of any size up to the specified length. If the length of the "
"parameter is less than specified, it is padded with zeros, thus, for "
"example, ``b'salt'`` and ``b'salt\\x00'`` is the same value. (This is not "
"the case for *key*.)"
msgstr ""

#: ../../library/hashlib.rst:373
msgid "These sizes are available as module `constants`_ described below."
msgstr "これらのサイズは以下に述べるモジュール `constants`_ で利用できます。"

#: ../../library/hashlib.rst:375
msgid ""
"Constructor functions also accept the following tree hashing parameters:"
msgstr "コンストラクタ関数は以下のツリーハッシングパラメタを受け付けます:"

#: ../../library/hashlib.rst:377
msgid "*fanout*: fanout (0 to 255, 0 if unlimited, 1 in sequential mode)."
msgstr ""

#: ../../library/hashlib.rst:379
msgid ""
"*depth*: maximal depth of tree (1 to 255, 255 if unlimited, 1 in sequential "
"mode)."
msgstr ""
"*depth*: ツリーの深さの最大値（1から255までの値で、無制限であれば255、シーケ"
"ンスモードでは1）。"

#: ../../library/hashlib.rst:382
msgid ""
"*leaf_size*: maximal byte length of leaf (0 to ``2**32-1``, 0 if unlimited "
"or in sequential mode)."
msgstr ""

#: ../../library/hashlib.rst:385
msgid ""
"*node_offset*: node offset (0 to ``2**64-1`` for BLAKE2b, 0 to ``2**48-1`` "
"for BLAKE2s, 0 for the first, leftmost, leaf, or in sequential mode)."
msgstr ""

#: ../../library/hashlib.rst:388
msgid ""
"*node_depth*: node depth (0 to 255, 0 for leaves, or in sequential mode)."
msgstr ""

#: ../../library/hashlib.rst:390
msgid ""
"*inner_size*: inner digest size (0 to 64 for BLAKE2b, 0 to 32 for BLAKE2s, 0 "
"in sequential mode)."
msgstr ""

#: ../../library/hashlib.rst:393
msgid ""
"*last_node*: boolean indicating whether the processed node is the last one "
"(``False`` for sequential mode)."
msgstr ""

#: ../../library/hashlib.rst:399
msgid ""
"See section 2.10 in `BLAKE2 specification <https://blake2.net/"
"blake2_20130129.pdf>`_ for comprehensive review of tree hashing."
msgstr ""

#: ../../library/hashlib.rst:405
msgid "Constants"
msgstr "定数"

#: ../../library/hashlib.rst:410
msgid "Salt length (maximum length accepted by constructors)."
msgstr "ソルト長（コンストラクタが受け付けれる最大長）"

#: ../../library/hashlib.rst:416
msgid ""
"Personalization string length (maximum length accepted by constructors)."
msgstr ""

#: ../../library/hashlib.rst:422
msgid "Maximum key size."
msgstr "最大キー長"

#: ../../library/hashlib.rst:428
msgid "Maximum digest size that the hash function can output."
msgstr "ハッシュ関数が出力しうるダイジェストの最大長"

#: ../../library/hashlib.rst:432
msgid "Examples"
msgstr "使用例"

#: ../../library/hashlib.rst:435
msgid "Simple hashing"
msgstr "簡単なハッシュ化"

#: ../../library/hashlib.rst:437
msgid ""
"To calculate hash of some data, you should first construct a hash object by "
"calling the appropriate constructor function (:func:`blake2b` or :func:"
"`blake2s`), then update it with the data by calling :meth:`update` on the "
"object, and, finally, get the digest out of the object by calling :meth:"
"`digest` (or :meth:`hexdigest` for hex-encoded string)."
msgstr ""

#: ../../library/hashlib.rst:450
msgid ""
"As a shortcut, you can pass the first chunk of data to update directly to "
"the constructor as the positional argument:"
msgstr ""

#: ../../library/hashlib.rst:457
msgid ""
"You can call :meth:`hash.update` as many times as you need to iteratively "
"update the hash:"
msgstr ""

#: ../../library/hashlib.rst:470
msgid "Using different digest sizes"
msgstr ""

#: ../../library/hashlib.rst:472
msgid ""
"BLAKE2 has configurable size of digests up to 64 bytes for BLAKE2b and up to "
"32 bytes for BLAKE2s. For example, to replace SHA-1 with BLAKE2b without "
"changing the size of output, we can tell BLAKE2b to produce 20-byte digests:"
msgstr ""
"BLAKE2 はダイジェストの長さを、BLAKE2bでは64バイトまで、BLAKE2sでは32バイトま"
"でのダイジェスト長を指定できます。例えばSHA-1を、出力を同じ長さのままで"
"BLAKE2bで置き換えるには、BLAKE2bに20バイトのダイジェストを生成するように指示"
"できます:"

#: ../../library/hashlib.rst:486
msgid ""
"Hash objects with different digest sizes have completely different outputs "
"(shorter hashes are *not* prefixes of longer hashes); BLAKE2b and BLAKE2s "
"produce different outputs even if the output length is the same:"
msgstr ""

#: ../../library/hashlib.rst:502
msgid "Keyed hashing"
msgstr ""

#: ../../library/hashlib.rst:504
msgid ""
"Keyed hashing can be used for authentication as a faster and simpler "
"replacement for `Hash-based message authentication code <https://en."
"wikipedia.org/wiki/HMAC>`_ (HMAC). BLAKE2 can be securely used in prefix-MAC "
"mode thanks to the indifferentiability property inherited from BLAKE."
msgstr ""

#: ../../library/hashlib.rst:510
msgid ""
"This example shows how to get a (hex-encoded) 128-bit authentication code "
"for message ``b'message data'`` with key ``b'pseudorandom key'``::"
msgstr ""

#: ../../library/hashlib.rst:520
msgid ""
"As a practical example, a web application can symmetrically sign cookies "
"sent to users and later verify them to make sure they weren't tampered with::"
msgstr ""

#: ../../library/hashlib.rst:549
msgid ""
"Even though there's a native keyed hashing mode, BLAKE2 can, of course, be "
"used in HMAC construction with :mod:`hmac` module::"
msgstr ""

#: ../../library/hashlib.rst:560
msgid "Randomized hashing"
msgstr ""

#: ../../library/hashlib.rst:562
msgid ""
"By setting *salt* parameter users can introduce randomization to the hash "
"function. Randomized hashing is useful for protecting against collision "
"attacks on the hash function used in digital signatures."
msgstr ""

#: ../../library/hashlib.rst:566
msgid ""
"Randomized hashing is designed for situations where one party, the message "
"preparer, generates all or part of a message to be signed by a second party, "
"the message signer. If the message preparer is able to find cryptographic "
"hash function collisions (i.e., two messages producing the same hash value), "
"then they might prepare meaningful versions of the message that would "
"produce the same hash value and digital signature, but with different "
"results (e.g., transferring $1,000,000 to an account, rather than $10). "
"Cryptographic hash functions have been designed with collision resistance as "
"a major goal, but the current concentration on attacking cryptographic hash "
"functions may result in a given cryptographic hash function providing less "
"collision resistance than expected. Randomized hashing offers the signer "
"additional protection by reducing the likelihood that a preparer can "
"generate two or more messages that ultimately yield the same hash value "
"during the digital signature generation process --- even if it is practical "
"to find collisions for the hash function. However, the use of randomized "
"hashing may reduce the amount of security provided by a digital signature "
"when all portions of the message are prepared by the signer."
msgstr ""

#: ../../library/hashlib.rst:585
msgid ""
"(`NIST SP-800-106 \"Randomized Hashing for Digital Signatures\" <https://"
"csrc.nist.gov/publications/detail/sp/800-106/final>`_)"
msgstr ""

#: ../../library/hashlib.rst:588
msgid ""
"In BLAKE2 the salt is processed as a one-time input to the hash function "
"during initialization, rather than as an input to each compression function."
msgstr ""

#: ../../library/hashlib.rst:593
msgid ""
"*Salted hashing* (or just hashing) with BLAKE2 or any other general-purpose "
"cryptographic hash function, such as SHA-256, is not suitable for hashing "
"passwords.  See `BLAKE2 FAQ <https://blake2.net/#qa>`_ for more information."
msgstr ""

#: ../../library/hashlib.rst:616
msgid "Personalization"
msgstr ""

#: ../../library/hashlib.rst:618
msgid ""
"Sometimes it is useful to force hash function to produce different digests "
"for the same input for different purposes. Quoting the authors of the Skein "
"hash function:"
msgstr ""

#: ../../library/hashlib.rst:622
msgid ""
"We recommend that all application designers seriously consider doing this; "
"we have seen many protocols where a hash that is computed in one part of the "
"protocol can be used in an entirely different part because two hash "
"computations were done on similar or related data, and the attacker can "
"force the application to make the hash inputs the same. Personalizing each "
"hash function used in the protocol summarily stops this type of attack."
msgstr ""

#: ../../library/hashlib.rst:629
msgid ""
"(`The Skein Hash Function Family <https://www.schneier.com/wp-content/"
"uploads/2016/02/skein.pdf>`_, p. 21)"
msgstr ""

#: ../../library/hashlib.rst:633
msgid "BLAKE2 can be personalized by passing bytes to the *person* argument::"
msgstr "BLAKE2は *person* 引数にバイト列を渡すことでパーソナライズできます::"

#: ../../library/hashlib.rst:647
msgid ""
"Personalization together with the keyed mode can also be used to derive "
"different keys from a single one."
msgstr ""

#: ../../library/hashlib.rst:661
msgid "Tree mode"
msgstr "ツリーモード"

#: ../../library/hashlib.rst:663
msgid "Here's an example of hashing a minimal tree with two leaf nodes::"
msgstr "これが二つの葉ノードからなる最小の木をハッシュする例です::"

#: ../../library/hashlib.rst:669
msgid ""
"This example uses 64-byte internal digests, and returns the 32-byte final "
"digest::"
msgstr ""
"次の例では、64バイトの内部桁が使われ、32バイトの最終的なダイジェストを返して"
"います::"

#: ../../library/hashlib.rst:699
msgid "Credits"
msgstr "クレジット::"

#: ../../library/hashlib.rst:701
msgid ""
"BLAKE2_ was designed by *Jean-Philippe Aumasson*, *Samuel Neves*, *Zooko "
"Wilcox-O'Hearn*, and *Christian Winnerlein* based on SHA-3_ finalist BLAKE_ "
"created by *Jean-Philippe Aumasson*, *Luca Henzen*, *Willi Meier*, and "
"*Raphael C.-W. Phan*."
msgstr ""
"BLAKE2_ は*Jean-Philippe Aumasson*、 *Luca Henzen*、 *Willi Meier* そして "
"*Raphael C.-W. Phan* によって作成された SHA-3_ の最終候補である BLAKE_  を元"
"に、*Jean-Philippe Aumasson*、 *Samuel Neves*、 *Zooko Wilcox-O'Hearn*, そし"
"て *Christian Winnerlein* によって設計されました。"

#: ../../library/hashlib.rst:706
msgid ""
"It uses core algorithm from ChaCha_ cipher designed by *Daniel J.  "
"Bernstein*."
msgstr ""
"それは、 *Daniel J.  Bernstein* によって設計されたChaCha_ 暗号由来のアルゴリ"
"ズムを用いています。"

#: ../../library/hashlib.rst:708
msgid ""
"The stdlib implementation is based on pyblake2_ module. It was written by "
"*Dmitry Chestnykh* based on C implementation written by *Samuel Neves*. The "
"documentation was copied from pyblake2_ and written by *Dmitry Chestnykh*."
msgstr ""
"標準ライブラリは pyblake2_ モジュールを基礎として実装されています。\n"
"このモジュールは *Dmitry Chestnykh* によって、*Samuel Neves* が作成した C実装"
"を元に書かれました。\n"
"このドキュメントは、pyblake2_ からコピーされ、*Dmitry Chestnykh* によって書か"
"れました。"

#: ../../library/hashlib.rst:712
msgid "The C code was partly rewritten for Python by *Christian Heimes*."
msgstr ""
"*Christian Heimes* によって、一部のCコードがPython向けに書き直されました。"

#: ../../library/hashlib.rst:714
msgid ""
"The following public domain dedication applies for both C hash function "
"implementation, extension code, and this documentation:"
msgstr ""
"以下の public domain dedicationが、Cのハッシュ関数実装と、拡張コードと、この"
"ドキュメントに適用されます:"

#: ../../library/hashlib.rst:717
msgid ""
"To the extent possible under law, the author(s) have dedicated all copyright "
"and related and neighboring rights to this software to the public domain "
"worldwide. This software is distributed without any warranty."
msgstr ""

#: ../../library/hashlib.rst:721
msgid ""
"You should have received a copy of the CC0 Public Domain Dedication along "
"with this software. If not, see https://creativecommons.org/publicdomain/"
"zero/1.0/."
msgstr ""

#: ../../library/hashlib.rst:725
msgid ""
"The following people have helped with development or contributed their "
"changes to the project and the public domain according to the Creative "
"Commons Public Domain Dedication 1.0 Universal:"
msgstr ""

#: ../../library/hashlib.rst:729
msgid "*Alexandr Sokolovskiy*"
msgstr "*Alexandr Sokolovskiy*"

#: ../../library/hashlib.rst:744
msgid "Module :mod:`hmac`"
msgstr ":mod:`hmac` モジュール"

#: ../../library/hashlib.rst:744
msgid "A module to generate message authentication codes using hashes."
msgstr "ハッシュを用いてメッセージ認証コードを生成するモジュールです。"

#: ../../library/hashlib.rst:747
msgid "Module :mod:`base64`"
msgstr ":mod:`base64` モジュール"

#: ../../library/hashlib.rst:747
msgid "Another way to encode binary hashes for non-binary environments."
msgstr ""
"バイナリハッシュを非バイナリ環境用にエンコードするもうひとつの方法です。"

#: ../../library/hashlib.rst:750
msgid "https://blake2.net"
msgstr "https://blake2.net"

#: ../../library/hashlib.rst:750
msgid "Official BLAKE2 website."
msgstr "BLAKE2 の公式ウェブサイト"

#: ../../library/hashlib.rst:753
msgid ""
"https://csrc.nist.gov/csrc/media/publications/fips/180/2/archive/2002-08-01/"
"documents/fips180-2.pdf"
msgstr ""

#: ../../library/hashlib.rst:753
msgid "The FIPS 180-2 publication on Secure Hash Algorithms."
msgstr "FIPS 180-2 のセキュアハッシュアルゴリズムについての説明。"

#: ../../library/hashlib.rst:757
msgid ""
"https://en.wikipedia.org/wiki/"
"Cryptographic_hash_function#Cryptographic_hash_algorithms"
msgstr ""
"https://en.wikipedia.org/wiki/"
"Cryptographic_hash_function#Cryptographic_hash_algorithms (日本語版: https://"
"暗号学的ハッシュ関数)"

#: ../../library/hashlib.rst:756
msgid ""
"Wikipedia article with information on which algorithms have known issues and "
"what that means regarding their use."
msgstr ""
"どのアルゴリズムにどんな既知の問題があって、それが実際に利用する際にどう影響"
"するかについての Wikipedia の記事。"

#: ../../library/hashlib.rst:760
msgid "https://www.ietf.org/rfc/rfc8018.txt"
msgstr ""

#: ../../library/hashlib.rst:760
msgid "PKCS #5: Password-Based Cryptography Specification Version 2.1"
msgstr ""

#: ../../library/hashlib.rst:762
msgid ""
"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf"
msgstr ""

#: ../../library/hashlib.rst:763
msgid "NIST Recommendation for Password-Based Key Derivation."
msgstr ""
