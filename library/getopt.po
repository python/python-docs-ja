# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Osamu NAKAMURA, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:06+0000\n"
"Last-Translator: Osamu NAKAMURA, 2021\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/getopt.rst:2
msgid ":mod:`!getopt` --- C-style parser for command line options"
msgstr ""

#: ../../library/getopt.rst:8
msgid "**Source code:** :source:`Lib/getopt.py`"
msgstr "**ソースコード:** :source:`Lib/getopt.py`"

#: ../../library/getopt.rst:10
msgid ""
"The :mod:`getopt` module is :term:`soft deprecated` and will not be "
"developed further; development will continue with the :mod:`argparse` module."
msgstr ""

#: ../../library/getopt.rst:17
msgid ""
"The :mod:`getopt` module is a parser for command line options whose API is "
"designed to be familiar to users of the C :c:func:`!getopt` function. Users "
"who are unfamiliar with the C :c:func:`!getopt` function or who would like "
"to write less code and get better help and error messages should consider "
"using the :mod:`argparse` module instead."
msgstr ""

#: ../../library/getopt.rst:25
msgid ""
"This module helps scripts to parse the command line arguments in ``sys."
"argv``. It supports the same conventions as the Unix :c:func:`!getopt` "
"function (including the special meanings of arguments of the form '``-``' "
"and '``--``').  Long options similar to those supported by GNU software may "
"be used as well via an optional third argument."
msgstr ""

#: ../../library/getopt.rst:31
msgid "This module provides two functions and an exception:"
msgstr "このモジュールは2つの関数と1つの例外を提供しています:"

#: ../../library/getopt.rst:37
msgid ""
"Parses command line options and parameter list.  *args* is the argument list "
"to be parsed, without the leading reference to the running program. "
"Typically, this means ``sys.argv[1:]``. *shortopts* is the string of option "
"letters that the script wants to recognize, with options that require an "
"argument followed by a colon (``':'``; i.e., the same format that Unix :c:"
"func:`!getopt` uses)."
msgstr ""

#: ../../library/getopt.rst:45
msgid ""
"Unlike GNU :c:func:`!getopt`, after a non-option argument, all further "
"arguments are considered also non-options. This is similar to the way non-"
"GNU Unix systems work."
msgstr ""

#: ../../library/getopt.rst:49
msgid ""
"*longopts*, if specified, must be a list of strings with the names of the "
"long options which should be supported.  The leading ``'--'`` characters "
"should not be included in the option name.  Long options which require an "
"argument should be followed by an equal sign (``'='``).  Optional arguments "
"are not supported.  To accept only long options, *shortopts* should be an "
"empty string.  Long options on the command line can be recognized so long as "
"they provide a prefix of the option name that matches exactly one of the "
"accepted options.  For example, if *longopts* is ``['foo', 'frob']``, the "
"option ``--fo`` will match as ``--foo``, but ``--f`` will not match "
"uniquely, so :exc:`GetoptError` will be raised."
msgstr ""
"*longopts* は長形式のオプションの名前を示す文字列のリストです。名前には、先頭"
"の ``'--'`` は含めません。引数が必要な場合には名前の最後に等号 (``'='``) を入"
"れます。オプション引数はサポートしていません。長形式のオプションだけを受けつ"
"けるためには、*shortopts* は空文字列である必要があります。長形式のオプション"
"は、該当するオプションを一意に決定できる長さまで入力されていれば認識されま"
"す。たとえば、*longopts* が ``['foo', 'frob']`` の場合、``--fo`` は ``--"
"foo`` にマッチしますが、``--f`` では一意に決定できないので、:exc:"
"`GetoptError` が送出されます。"

#: ../../library/getopt.rst:60
msgid ""
"The return value consists of two elements: the first is a list of ``(option, "
"value)`` pairs; the second is the list of program arguments left after the "
"option list was stripped (this is a trailing slice of *args*).  Each option-"
"and-value pair returned has the option as its first element, prefixed with a "
"hyphen for short options (e.g., ``'-x'``) or two hyphens for long options (e."
"g., ``'--long-option'``), and the option argument as its second element, or "
"an empty string if the option has no argument.  The options occur in the "
"list in the same order in which they were found, thus allowing multiple "
"occurrences.  Long and short options may be mixed."
msgstr ""
"返り値は2つの要素から成っています: 最初は ``(option, value)`` のタプルのリス"
"ト、2つ目はオプションリストを取り除いたあとに残ったプログラムの引数リストで"
"す (*args* の末尾部分のスライスになります)。それぞれの引数と値のタプルの最初"
"の要素は、短形式の時はハイフン 1つで始まる文字列 (例: ``'-x'``)、長形式の時は"
"ハイフン2つで始まる文字列 (例: ``'--long-option'``) となり、引数が2番目の要素"
"になります。引数をとらない場合には空文字列が入ります。オプションは見つかった"
"順に並んでいて、複数回同じオプションを指定できます。長形式と短形式のオプショ"
"ンは混在できます。"

#: ../../library/getopt.rst:73
msgid ""
"This function works like :func:`getopt`, except that GNU style scanning mode "
"is used by default. This means that option and non-option arguments may be "
"intermixed. The :func:`getopt` function stops processing options as soon as "
"a non-option argument is encountered."
msgstr ""
"この関数はデフォルトで GNU スタイルのスキャンモードを使う以外は :func:"
"`getopt` と同じように動作します。つまり、オプションとオプションでない引数とを"
"混在させることができます。:func:`getopt` 関数はオプションでない引数を見つける"
"と解析を停止します。"

#: ../../library/getopt.rst:78
msgid ""
"If the first character of the option string is ``'+'``, or if the "
"environment variable :envvar:`!POSIXLY_CORRECT` is set, then option "
"processing stops as soon as a non-option argument is encountered."
msgstr ""

#: ../../library/getopt.rst:85
msgid ""
"This is raised when an unrecognized option is found in the argument list or "
"when an option requiring an argument is given none. The argument to the "
"exception is a string indicating the cause of the error.  For long options, "
"an argument given to an option which does not require one will also cause "
"this exception to be raised.  The attributes :attr:`!msg` and :attr:`!opt` "
"give the error message and related option; if there is no specific option to "
"which the exception relates, :attr:`!opt` is an empty string."
msgstr ""

#: ../../library/getopt.rst:96
msgid "Alias for :exc:`GetoptError`; for backward compatibility."
msgstr ""
":exc:`GetoptError` へのエイリアスです。後方互換性のために残されています。"

#: ../../library/getopt.rst:98
msgid "An example using only Unix style options:"
msgstr "Unix スタイルのオプションを使った例です:"

#: ../../library/getopt.rst:110
msgid "Using long option names is equally easy:"
msgstr "長形式のオプションを使っても同様です:"

#: ../../library/getopt.rst:123
msgid "In a script, typical usage is something like this::"
msgstr "スクリプト中での典型的な使い方は以下のようになります::"

#: ../../library/getopt.rst:125
msgid ""
"import getopt, sys\n"
"\n"
"def main():\n"
"    try:\n"
"        opts, args = getopt.getopt(sys.argv[1:], \"ho:v\", [\"help\", "
"\"output=\"])\n"
"    except getopt.GetoptError as err:\n"
"        # print help information and exit:\n"
"        print(err)  # will print something like \"option -a not "
"recognized\"\n"
"        usage()\n"
"        sys.exit(2)\n"
"    output = None\n"
"    verbose = False\n"
"    for o, a in opts:\n"
"        if o == \"-v\":\n"
"            verbose = True\n"
"        elif o in (\"-h\", \"--help\"):\n"
"            usage()\n"
"            sys.exit()\n"
"        elif o in (\"-o\", \"--output\"):\n"
"            output = a\n"
"        else:\n"
"            assert False, \"unhandled option\"\n"
"    # ...\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()"
msgstr ""

#: ../../library/getopt.rst:152
msgid ""
"Note that an equivalent command line interface could be produced with less "
"code and more informative help and error messages by using the :mod:"
"`argparse` module::"
msgstr ""
":mod:`argparse` モジュールを使えば、より良いヘルプメッセージとエラーメッセー"
"ジを持った同じコマンドラインインターフェースをより少ないコードで実現できま"
"す::"

#: ../../library/getopt.rst:155
msgid ""
"import argparse\n"
"\n"
"if __name__ == '__main__':\n"
"    parser = argparse.ArgumentParser()\n"
"    parser.add_argument('-o', '--output')\n"
"    parser.add_argument('-v', dest='verbose', action='store_true')\n"
"    args = parser.parse_args()\n"
"    # ... do something with args.output ...\n"
"    # ... do something with args.verbose .."
msgstr ""

#: ../../library/getopt.rst:167
msgid "Module :mod:`argparse`"
msgstr ":mod:`argparse` モジュール"

#: ../../library/getopt.rst:168
msgid "Alternative command line option and argument parsing library."
msgstr "別のコマンドラインオプションと引数の解析ライブラリ。"
