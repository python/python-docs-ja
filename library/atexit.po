# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2018-01-20 20:58+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/atexit.rst:2
msgid ":mod:`atexit` --- Exit handlers"
msgstr ":mod:`atexit` --- 終了ハンドラ"

#: ../../library/atexit.rst:12
msgid "**Source code:** :source:`Lib/atexit.py`"
msgstr "**ソースコード:** :source:`Lib/atexit.py`"

#: ../../library/atexit.rst:16
msgid ""
"The :mod:`atexit` module defines a single function to register cleanup "
"functions.  Functions thus registered are automatically executed upon normal "
"interpreter termination.  :mod:`atexit` runs these functions in the "
"*reverse* order in which they were registered; if you register ``A``, ``B``, "
"and ``C``, at interpreter termination time they will be run in the order "
"``C``, ``B``, ``A``."
msgstr ""
":mod:`atexit` モジュールは、クリーンアップ関数の登録を行う関数を定義します。"
"登録された関数はインタプリタの通常終了時に自動的に実行されます。:mod:"
"`atexit` はそれら関数を登録した順と *逆に* 実行します; ``A``、``B``、``C`` の"
"順に登録した場合、インタプリタ終了時に ``C``、``B``、``A`` の順に実行されま"
"す。"

#: ../../library/atexit.rst:23
msgid ""
"**Note:** The functions registered via this module are not called when the "
"program is killed by a signal not handled by Python, when a Python fatal "
"internal error is detected, or when :func:`os._exit` is called."
msgstr ""
"**注意:** このモジュールを使用して登録された関数は、プログラムが Python が扱"
"わないシグナルによって kill された場合、Python 内部で致命的なエラーが検出され"
"た場合、あるいは :func:`os._exit` が呼び出された場合は実行されません。"

#: ../../library/atexit.rst:29
msgid ""
"This is an alternate interface to the functionality provided by the :func:"
"`sys.exitfunc` variable."
msgstr ""
"このモジュールは、 ``sys.exitfunc`` 変数の提供していた機能の代用となるインタ"
"フェースです。"

#: ../../library/atexit.rst:32
msgid ""
"Note: This module is unlikely to work correctly when used with other code "
"that sets ``sys.exitfunc``.  In particular, other core Python modules are "
"free to use :mod:`atexit` without the programmer's knowledge.  Authors who "
"use ``sys.exitfunc`` should convert their code to use :mod:`atexit` "
"instead.  The simplest way to convert code that sets ``sys.exitfunc`` is to "
"import :mod:`atexit` and register the function that had been bound to ``sys."
"exitfunc``."
msgstr ""
"**注意**: ``sys.exitfunc`` を設定する他のコードとともに使用した場合には、この"
"モジュールは正しく動作しないでしょう。特に、他のコア Python モジュールでは、"
"プログラマの意図を知らなくても :mod:`atexit` を自由に使えます。 ``sys."
"exitfunc`` を使っている人は、代わりに :mod:`atexit` を使うコードに変換してく"
"ださい。 ``sys.exitfunc`` を設定するコードを変換するには、 :mod:`atexit` を "
"import し、 ``sys.exitfunc`` へ束縛されていた関数を登録するのが最も簡単です。"

#: ../../library/atexit.rst:42
msgid ""
"Register *func* as a function to be executed at termination.  Any optional "
"arguments that are to be passed to *func* must be passed as arguments to :"
"func:`register`.  It is possible to register the same function and arguments "
"more than once."
msgstr ""
"*func* を終了時に実行する関数として登録します。*func* に渡す引数は :func:"
"`register` の引数として指定しなければなりません。同じ関数を同じ引数で複数回登"
"録できます。"

#: ../../library/atexit.rst:47
msgid ""
"At normal program termination (for instance, if :func:`sys.exit` is called "
"or the main module's execution completes), all functions registered are "
"called in last in, first out order.  The assumption is that lower level "
"modules will normally be imported before higher level modules and thus must "
"be cleaned up later."
msgstr ""
"通常のプログラムの終了時、例えば :func:`sys.exit` が呼び出されるとき、あるい"
"は、メインモジュールの実行が完了したときに、登録された全ての関数を、最後に登"
"録されたものから順に呼び出します。通常、より低レベルのモジュールはより高レベ"
"ルのモジュールより前に import されるので、後で後始末が行われるという仮定に基"
"づいています。"

#: ../../library/atexit.rst:53
msgid ""
"If an exception is raised during execution of the exit handlers, a traceback "
"is printed (unless :exc:`SystemExit` is raised) and the exception "
"information is saved.  After all exit handlers have had a chance to run the "
"last exception to be raised is re-raised."
msgstr ""
"終了ハンドラの実行中に例外が発生すると、(:exc:`SystemExit` 以外の場合は)ト"
"レースバックを表示して、例外の情報を保存します。全ての終了ハンドラに動作する"
"チャンスを与えた後に、最後に送出された例外を再送出します。"

#: ../../library/atexit.rst:58
msgid ""
"This function now returns *func*, which makes it possible to use it as a "
"decorator."
msgstr ""
"この関数は *func* を返すようになったので、これをデコレータとして利用できま"
"す。"

#: ../../library/atexit.rst:65
msgid "Module :mod:`readline`"
msgstr ":mod:`readline` モジュール"

#: ../../library/atexit.rst:66
msgid ""
"Useful example of :mod:`atexit` to read and write :mod:`readline` history "
"files."
msgstr ""
":mod:`readline` ヒストリファイルを読み書きするための :mod:`atexit` の有用な例"
"です。"

#: ../../library/atexit.rst:72
msgid ":mod:`atexit` Example"
msgstr ":mod:`atexit` の例"

#: ../../library/atexit.rst:74
msgid ""
"The following simple example demonstrates how a module can initialize a "
"counter from a file when it is imported and save the counter's updated value "
"automatically when the program terminates without relying on the application "
"making an explicit call into this module at termination. ::"
msgstr ""
"次の簡単な例では、あるモジュールを import した時にカウンタを初期化しておき、"
"プログラムが終了するときにアプリケーションがこのモジュールを明示的に呼び出さ"
"なくてもカウンタが更新されるようにする方法を示しています。 ::"

#: ../../library/atexit.rst:94
msgid ""
"Positional and keyword arguments may also be passed to :func:`register` to "
"be passed along to the registered function when it is called::"
msgstr ""
":func:`register` に指定した位置引数とキーワード引数は登録した関数を呼び出す際"
"に渡されます::"

#: ../../library/atexit.rst:106
msgid "Usage as a :term:`decorator`::"
msgstr ":term:`デコレータ <decorator>` として利用する例::"

#: ../../library/atexit.rst:114
msgid "This only works with functions that can be called without arguments."
msgstr ""
"デコレータとして利用できるのは、その関数が引数なしで呼び出された場合に限られ"
"ます。"
