# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Shin Saito, 2021
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:55+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/atexit.rst:2
msgid ":mod:`!atexit` --- Exit handlers"
msgstr ":mod:`!atexit` --- 終了ハンドラー"

#: ../../library/atexit.rst:12
msgid ""
"The :mod:`atexit` module defines functions to register and unregister "
"cleanup functions.  Functions thus registered are automatically executed "
"upon normal interpreter termination.  :mod:`atexit` runs these functions in "
"the *reverse* order in which they were registered; if you register ``A``, "
"``B``, and ``C``, at interpreter termination time they will be run in the "
"order ``C``, ``B``, ``A``."
msgstr ""
":mod:`atexit` モジュールは、クリーンアップ関数の登録およびその解除を行う関数"
"を定義します。登録された関数はインタプリタの通常終了時に自動的に実行されま"
"す。:mod:`atexit` はそれら関数を登録した順と *逆に* 実行します; ``A``、"
"``B``、``C`` の順に登録した場合、インタプリタ終了時に ``C``、``B``、``A`` の"
"順に実行されます。"

#: ../../library/atexit.rst:19
msgid ""
"**Note:** The functions registered via this module are not called when the "
"program is killed by a signal not handled by Python, when a Python fatal "
"internal error is detected, or when :func:`os._exit` is called."
msgstr ""
"**注意:** このモジュールを使用して登録された関数は、プログラムが Python が扱"
"わないシグナルによって kill された場合、Python 内部で致命的なエラーが検出され"
"た場合、あるいは :func:`os._exit` が呼び出された場合は実行されません。"

#: ../../library/atexit.rst:23
msgid ""
"**Note:** The effect of registering or unregistering functions from within a "
"cleanup function is undefined."
msgstr ""
"**注意:** クリーンアップ関数内からの関数の登録・登録解除効果は定義されていま"
"せん。"

#: ../../library/atexit.rst:26
msgid ""
"When used with C-API subinterpreters, registered functions are local to the "
"interpreter they were registered in."
msgstr ""
"C-API のサブインタープリタで使われているとき、登録された関数は登録先のイン"
"タープリタのローカルな関数になります。"

#: ../../library/atexit.rst:32
msgid ""
"Register *func* as a function to be executed at termination.  Any optional "
"arguments that are to be passed to *func* must be passed as arguments to :"
"func:`register`.  It is possible to register the same function and arguments "
"more than once."
msgstr ""
"*func* を終了時に実行する関数として登録します。*func* に渡す引数は :func:"
"`register` の引数として指定しなければなりません。同じ関数を同じ引数で複数回登"
"録できます。"

#: ../../library/atexit.rst:37
msgid ""
"At normal program termination (for instance, if :func:`sys.exit` is called "
"or the main module's execution completes), all functions registered are "
"called in last in, first out order.  The assumption is that lower level "
"modules will normally be imported before higher level modules and thus must "
"be cleaned up later."
msgstr ""
"通常のプログラムの終了時、例えば :func:`sys.exit` が呼び出されるとき、あるい"
"は、メインモジュールの実行が完了したときに、登録された全ての関数を、最後に登"
"録されたものから順に呼び出します。通常、より低レベルのモジュールはより高レベ"
"ルのモジュールより前に import されるので、後で後始末が行われるという仮定に基"
"づいています。"

#: ../../library/atexit.rst:43
msgid ""
"If an exception is raised during execution of the exit handlers, a traceback "
"is printed (unless :exc:`SystemExit` is raised) and the exception "
"information is saved.  After all exit handlers have had a chance to run, the "
"last exception to be raised is re-raised."
msgstr ""
"終了ハンドラの実行中に例外が発生すると、(:exc:`SystemExit` 以外の場合は)ト"
"レースバックを表示して、例外の情報を保存します。全ての終了ハンドラに動作する"
"チャンスを与えた後に、最後に送出された例外を再送出します。"

#: ../../library/atexit.rst:48
msgid ""
"This function returns *func*, which makes it possible to use it as a "
"decorator."
msgstr "この関数は *func* を返し、これをデコレータとして利用できます。"

#: ../../library/atexit.rst:52
msgid ""
"Starting new threads or calling :func:`os.fork` from a registered function "
"can lead to race condition between the main Python runtime thread freeing "
"thread states while internal :mod:`threading` routines or the new process "
"try to use that state. This can lead to crashes rather than clean shutdown."
msgstr ""
"登録された関数から新しいスレッドを開始したり、 :func:`os.fork` を呼び出したり"
"すると、メインの Python ランタイムスレッドがスレッド状態を開放する一方で、内"
"部の :mod:`threading` ルーチンや新しいプロセスがそのスレッド状態を使用しよう"
"と試みる競合が発生します。これはクリーンなシャットダウンではなく、クラッシュ"
"につながる恐れがあります。"

#: ../../library/atexit.rst:58
msgid ""
"Attempts to start a new thread or :func:`os.fork` a new process in a "
"registered function now leads to :exc:`RuntimeError`."
msgstr ""
"登録された関数から新しいスレッドの開始または新しいプロセスの :func:`os.fork` "
"が試みられた場合は、 :exc:`RuntimeError` が発生するようになりました。"

#: ../../library/atexit.rst:64
msgid ""
"Remove *func* from the list of functions to be run at interpreter shutdown. :"
"func:`unregister` silently does nothing if *func* was not previously "
"registered.  If *func* has been registered more than once, every occurrence "
"of that function in the :mod:`atexit` call stack will be removed.  Equality "
"comparisons (``==``) are used internally during unregistration, so function "
"references do not need to have matching identities."
msgstr ""
"関数 *func* をインタプリタ終了時に実行する関数のリストから削除します。*func* "
"が登録されていなければ、:func:`unregister` は何もしません。*func* が2回以上登"
"録されている場合は :mod:`atexit` のコールスタックにおける *func* のすべての出"
"現が削除されます。削除の際の比較には等価比較 (``==``) が使われます。したがっ"
"て削除したいものと同一の関数を *func* に指定する必要はありません。"

#: ../../library/atexit.rst:74
msgid "Module :mod:`readline`"
msgstr ":mod:`readline` モジュール"

#: ../../library/atexit.rst:75
msgid ""
"Useful example of :mod:`atexit` to read and write :mod:`readline` history "
"files."
msgstr ""
":mod:`readline` ヒストリファイルを読み書きするための :mod:`atexit` の有用な例"
"です。"

#: ../../library/atexit.rst:82
msgid ":mod:`atexit` Example"
msgstr ":mod:`atexit` の例"

#: ../../library/atexit.rst:84
msgid ""
"The following simple example demonstrates how a module can initialize a "
"counter from a file when it is imported and save the counter's updated value "
"automatically when the program terminates without relying on the application "
"making an explicit call into this module at termination. ::"
msgstr ""
"次の簡単な例では、あるモジュールを import した時にカウンタを初期化しておき、"
"プログラムが終了するときにアプリケーションがこのモジュールを明示的に呼び出さ"
"なくてもカウンタが更新されるようにする方法を示しています。 ::"

#: ../../library/atexit.rst:89
msgid ""
"try:\n"
"    with open('counterfile') as infile:\n"
"        _count = int(infile.read())\n"
"except FileNotFoundError:\n"
"    _count = 0\n"
"\n"
"def incrcounter(n):\n"
"    global _count\n"
"    _count = _count + n\n"
"\n"
"def savecounter():\n"
"    with open('counterfile', 'w') as outfile:\n"
"        outfile.write('%d' % _count)\n"
"\n"
"import atexit\n"
"\n"
"atexit.register(savecounter)"
msgstr ""

#: ../../library/atexit.rst:107
msgid ""
"Positional and keyword arguments may also be passed to :func:`register` to "
"be passed along to the registered function when it is called::"
msgstr ""
":func:`register` に指定した位置引数とキーワード引数は登録した関数を呼び出す際"
"に渡されます::"

#: ../../library/atexit.rst:110
msgid ""
"def goodbye(name, adjective):\n"
"    print('Goodbye %s, it was %s to meet you.' % (name, adjective))\n"
"\n"
"import atexit\n"
"\n"
"atexit.register(goodbye, 'Donny', 'nice')\n"
"# or:\n"
"atexit.register(goodbye, adjective='nice', name='Donny')"
msgstr ""

#: ../../library/atexit.rst:119
msgid "Usage as a :term:`decorator`::"
msgstr ":term:`デコレータ <decorator>` として利用する例::"

#: ../../library/atexit.rst:121
msgid ""
"import atexit\n"
"\n"
"@atexit.register\n"
"def goodbye():\n"
"    print('You are now leaving the Python sector.')"
msgstr ""

#: ../../library/atexit.rst:127
msgid "This only works with functions that can be called without arguments."
msgstr ""
"デコレータとして利用できるのは、その関数が引数なしで呼び出された場合に限られ"
"ます。"
