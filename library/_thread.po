# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2018
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:24+0000\n"
"Last-Translator: tomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/_thread.rst:2
msgid ":mod:`_thread` --- Low-level threading API"
msgstr ":mod:`_thread` --- 低水準の スレッド API"

#: ../../library/_thread.rst:15
msgid ""
"This module provides low-level primitives for working with multiple threads "
"(also called :dfn:`light-weight processes` or :dfn:`tasks`) --- multiple "
"threads of control sharing their global data space.  For synchronization, "
"simple locks (also called :dfn:`mutexes` or :dfn:`binary semaphores`) are "
"provided. The :mod:`threading` module provides an easier to use and higher-"
"level threading API built on top of this module."
msgstr ""
"このモジュールはマルチスレッド (別名 :dfn:`軽量プロセス` (:dfn:`light-weight "
"processes`)または :dfn:`タスク` (:dfn:`tasks`)) に用いられる低水準プリミティ"
"ブを提供します --- グローバルデータ空間を共有するマルチスレッドを制御します。"
"同期のための単純なロック (別名 :dfn:`mutexes` またはバイナリセマフォ (:dfn:"
"`binary semaphores`))が提供されています。 :mod:`threading` モジュールは、この"
"モジュール上で、より使い易く高級なスレッディングの API を提供します。"

#: ../../library/_thread.rst:26
msgid ""
"The module is optional.  It is supported on Windows, Linux, SGI IRIX, "
"Solaris 2.x, as well as on systems that have a POSIX thread (a.k.a. "
"\"pthread\") implementation.  For systems lacking the :mod:`_thread` module, "
"the :mod:`_dummy_thread` module is available. It duplicates this module's "
"interface and can be used as a drop-in replacement."
msgstr ""
"このモジュールはオプションです。 Windows、Linux、SGI IRIX、Solaris 2.x、そし"
"て POSIX スレッド (別名 \"pthread\") を実装するシステム上でサポートされま"
"す。 :mod:`_thread` を使用することのできないシステムでは、 :mod:"
"`_dummy_thread` が用意されています。 :mod:`dummy_thread` はこのモジュールと同"
"じインターフェースを持ち、置き換えて使用することができます。"

#: ../../library/_thread.rst:32
msgid "It defines the following constants and functions:"
msgstr "定数と関数は以下のように定義されています:"

#: ../../library/_thread.rst:37
msgid "Raised on thread-specific errors."
msgstr "スレッド固有の例外です。"

#: ../../library/_thread.rst:39
msgid "This is now a synonym of the built-in :exc:`RuntimeError`."
msgstr "現在は組み込みの :exc:`RuntimeError` の別名です。"

#: ../../library/_thread.rst:45
msgid "This is the type of lock objects."
msgstr "これはロックオブジェクトのタイプです。"

#: ../../library/_thread.rst:50
msgid ""
"Start a new thread and return its identifier.  The thread executes the "
"function *function* with the argument list *args* (which must be a tuple).  "
"The optional *kwargs* argument specifies a dictionary of keyword arguments. "
"When the function returns, the thread silently exits.  When the function "
"terminates with an unhandled exception, a stack trace is printed and then "
"the thread exits (but other threads continue to run)."
msgstr ""
"新しいスレッドを開始して、そのIDを返します。スレッドは引数リスト *args* (タプ"
"ルでなければなりません)の関数 *function* を実行します。オプション引数 "
"*kwargs* はキーワード引数の辞書を指定します。関数が戻るとき、スレッドは静かに"
"終了します。関数が未定義の例外でターミネートしたとき、スタックトレースが表示"
"され、そしてスレッドが終了します (しかし他のスレッドは走り続けます)。"

#: ../../library/_thread.rst:60
msgid ""
"Raise a :exc:`KeyboardInterrupt` exception in the main thread.  A subthread "
"can use this function to interrupt the main thread."
msgstr ""
"メインスレッドで :exc:`KeyboardInterrupt` を送出します。サブスレッドはこの関"
"数を使ってメインスレッドに割り込みをかけることができます。"

#: ../../library/_thread.rst:66
msgid ""
"Raise the :exc:`SystemExit` exception.  When not caught, this will cause the "
"thread to exit silently."
msgstr ""
":exc:`SystemExit` を送出します。それが捕えられないときは、静かにスレッドを終"
"了させます。"

#: ../../library/_thread.rst:80
msgid ""
"Return a new lock object.  Methods of locks are described below.  The lock "
"is initially unlocked."
msgstr ""
"新しいロックオブジェクトを返します。ロックのメソッドはこの後に記述されます。"
"ロックは初期状態としてアンロック状態です。"

#: ../../library/_thread.rst:86
msgid ""
"Return the 'thread identifier' of the current thread.  This is a nonzero "
"integer.  Its value has no direct meaning; it is intended as a magic cookie "
"to be used e.g. to index a dictionary of thread-specific data.  Thread "
"identifiers may be recycled when a thread exits and another thread is "
"created."
msgstr ""
"現在のスレッドの 'スレッドID' を返します。非ゼロの整数です。この値は直接の意"
"味を持っていません; 例えばスレッド特有のデータの辞書に索引をつけるためのよう"
"な、マジッククッキーとして意図されています。スレッドが終了し、他のスレッドが"
"作られたとき、スレッド ID は再利用されるかもしれません。"

#: ../../library/_thread.rst:94
msgid ""
"Return the thread stack size used when creating new threads.  The optional "
"*size* argument specifies the stack size to be used for subsequently created "
"threads, and must be 0 (use platform or configured default) or a positive "
"integer value of at least 32,768 (32 KiB). If *size* is not specified, 0 is "
"used.  If changing the thread stack size is unsupported, a :exc:"
"`RuntimeError` is raised.  If the specified stack size is invalid, a :exc:"
"`ValueError` is raised and the stack size is unmodified.  32 KiB is "
"currently the minimum supported stack size value to guarantee sufficient "
"stack space for the interpreter itself.  Note that some platforms may have "
"particular restrictions on values for the stack size, such as requiring a "
"minimum stack size > 32 KiB or requiring allocation in multiples of the "
"system memory page size - platform documentation should be referred to for "
"more information (4 KiB pages are common; using multiples of 4096 for the "
"stack size is the suggested approach in the absence of more specific "
"information). Availability: Windows, systems with POSIX threads."
msgstr ""
"新しいスレッドを作るときのスレッドスタックサイズを返します。オプションの "
"*size* 引数にはこれ以降に作成するスレッドのスタックサイズを指定し、0 (プラッ"
"トフォームのデフォルト値または設定されたデフォルト値) か、 32,768 (32 KiB) 以"
"上の正の整数でなければなりません。*size* が指定されない場合 0 が使われます。"
"スレッドのスタックサイズの変更がサポートされていない場合、 :exc:"
"`RuntimeError` を送出します。不正なスタックサイズが指定された場合、 :exc:"
"`ValueError` を送出して、スタックサイズは変更されません。32 KiB は現在のイン"
"タープリタ自身のために十分であると保証された最小のスタックサイズです。いくつ"
"かのプラットフォームではスタックサイズに対して制限があることに注意してくださ"
"い。例えば最小のスタックサイズが 32 KiB より大きかったり、システムのメモリ"
"ページサイズ の整数倍の必要があるなどです。この制限についてはプラットフォーム"
"のドキュメントを参照してください (一般的なページサイズは 4 KiB なので、プラッ"
"トフォームに関する情報がない場合は 4096 の整数倍のスタックサイズを選ぶといい"
"かもしれません)。利用可能な環境: Windows、POSIX スレッドに対応したシステム。"

#: ../../library/_thread.rst:113
msgid ""
"The maximum value allowed for the *timeout* parameter of :meth:`Lock."
"acquire`. Specifying a timeout greater than this value will raise an :exc:"
"`OverflowError`."
msgstr ""
":meth:`Lock.acquire` の *timeout* 引数に許される最大値です。これ以上の値を "
"timeout に指定すると :exc:`OverflowError` を発生させます。"

#: ../../library/_thread.rst:120
msgid "Lock objects have the following methods:"
msgstr "ロックオブジェクトは次のようなメソッドを持っています:"

#: ../../library/_thread.rst:125
msgid ""
"Without any optional argument, this method acquires the lock "
"unconditionally, if necessary waiting until it is released by another thread "
"(only one thread at a time can acquire a lock --- that's their reason for "
"existence)."
msgstr ""
"オプションの引数なしで使用すると、このメソッドは他のスレッドがロックしている"
"かどうかにかかわらずロックを獲得します。ただし、他のスレッドがすでにロックし"
"ている場合には解除されるまで待ってからロックを獲得します (同時にロックを獲得"
"できるスレッドはひとつだけであり、これこそがロックの存在理由です)。"

#: ../../library/_thread.rst:129
msgid ""
"If the integer *waitflag* argument is present, the action depends on its "
"value: if it is zero, the lock is only acquired if it can be acquired "
"immediately without waiting, while if it is nonzero, the lock is acquired "
"unconditionally as above."
msgstr ""
"整数の引数 *waitflag* を指定すると、その値によって動作が変わります。引数が "
"``0`` のときは、待たずにすぐ獲得できる場合にだけロックを獲得します。``0`` 以"
"外の値を与えると、先の例と同様、ロックの状態にかかわらず獲得をおこないます。"

#: ../../library/_thread.rst:134
msgid ""
"If the floating-point *timeout* argument is present and positive, it "
"specifies the maximum wait time in seconds before returning.  A negative "
"*timeout* argument specifies an unbounded wait.  You cannot specify a "
"*timeout* if *waitflag* is zero."
msgstr ""
"*timeout* 引数に正の float 値が指定された場合、返る前に待つ最大の時間を秒数で"
"指定します。負の *timeout* 引数は無制限に待つことを指定します。*waitflag* が "
"0 の時は *timeout* を指定することはできません。"

#: ../../library/_thread.rst:139
msgid ""
"The return value is ``True`` if the lock is acquired successfully, ``False`` "
"if not."
msgstr ""
"なお、ロックを獲得できた場合は ``True``、できなかった場合は ``False`` を返し"
"ます。"

#: ../../library/_thread.rst:142
msgid "The *timeout* parameter is new."
msgstr "新しい *timeout* 引数。"

#: ../../library/_thread.rst:145
msgid "Lock acquires can now be interrupted by signals on POSIX."
msgstr "POSIX ではロックの取得がシグナルに割り込まれるようになりました。"

#: ../../library/_thread.rst:151
msgid ""
"Releases the lock.  The lock must have been acquired earlier, but not "
"necessarily by the same thread."
msgstr ""
"ロックを解放します。そのロックは既に獲得されたものでなければなりませんが、し"
"かし同じスレッドによって獲得されたものである必要はありません。"

#: ../../library/_thread.rst:157
msgid ""
"Return the status of the lock: ``True`` if it has been acquired by some "
"thread, ``False`` if not."
msgstr ""
"ロックの状態を返します: 同じスレッドによって獲得されたものなら ``True`` 、違"
"うのなら ``False`` を返します。"

#: ../../library/_thread.rst:160
msgid ""
"In addition to these methods, lock objects can also be used via the :keyword:"
"`with` statement, e.g.::"
msgstr ""
"これらのメソッドに加えて、ロックオブジェクトは :keyword:`with` 文を通じて以下"
"の例のように使うこともできます。 ::"

#: ../../library/_thread.rst:170
msgid "**Caveats:**"
msgstr "**警告:**"

#: ../../library/_thread.rst:174
msgid ""
"Threads interact strangely with interrupts: the :exc:`KeyboardInterrupt` "
"exception will be received by an arbitrary thread.  (When the :mod:`signal` "
"module is available, interrupts always go to the main thread.)"
msgstr ""
"スレッドは割り込みと奇妙な相互作用をします: :exc:`KeyboardInterrupt` 例外は任"
"意のスレッドによって受け取られます。 (:mod:`signal` モジュールが利用可能なと"
"き、割り込みは常にメインスレッドへ行きます。)"

#: ../../library/_thread.rst:178
msgid ""
"Calling :func:`sys.exit` or raising the :exc:`SystemExit` exception is "
"equivalent to calling :func:`_thread.exit`."
msgstr ""
":func:`sys.exit` を呼び出す、あるいは :exc:`SystemExit` 例外を送出すること"
"は、 :func:`_thread.exit` を呼び出すことと同じです。"

#: ../../library/_thread.rst:181
msgid ""
"It is not possible to interrupt the :meth:`acquire` method on a lock --- "
"the :exc:`KeyboardInterrupt` exception will happen after the lock has been "
"acquired."
msgstr ""
"ロックの :meth:`acquire` メソッドに割り込むことはできません --- :exc:"
"`KeyboardInterrupt` 例外は、ロックが獲得された後に発生します。"

#: ../../library/_thread.rst:184
msgid ""
"When the main thread exits, it is system defined whether the other threads "
"survive.  On most systems, they are killed without executing :keyword:"
"`try` ... :keyword:`finally` clauses or executing object destructors."
msgstr ""
"メインスレッドが終了したとき、他のスレッドが生き残るかどうかは、システムに依"
"存します。多くのシステムでは、 :keyword:`try` ... :keyword:`finally` 節や、オ"
"ブジェクトデストラクタを実行せずに終了されます。"

#: ../../library/_thread.rst:189
msgid ""
"When the main thread exits, it does not do any of its usual cleanup (except "
"that :keyword:`try` ... :keyword:`finally` clauses are honored), and the "
"standard I/O files are not flushed."
msgstr ""
"メインスレッドが終了したとき、それの通常のクリーンアップは行なわれず、 (:"
"keyword:`try` ... :keyword:`finally` 節が尊重されることは除きます)、標準 I/O "
"ファイルはフラッシュされません。"
