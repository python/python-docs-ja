# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2015-2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:22+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/os.rst:2
msgid ":mod:`os` --- Miscellaneous operating system interfaces"
msgstr ":mod:`os` --- 雑多なオペレーティングシステムインタフェース"

#: ../../library/os.rst:8
msgid ""
"This module provides a portable way of using operating system dependent "
"functionality.  If you just want to read or write a file see :func:`open`, "
"if you want to manipulate paths, see the :mod:`os.path` module, and if you "
"want to read all the lines in all the files on the command line see the :mod:"
"`fileinput` module.  For creating temporary files and directories see the :"
"mod:`tempfile` module, and for high-level file and directory handling see "
"the :mod:`shutil` module."
msgstr ""
"このモジュールは、 OS 依存の機能を利用するポータブルな方法を提供します。単純"
"なファイルの読み書きについては、 :func:`open` を参照してください。パス操作に"
"ついては、 :mod:`os.path` モジュールを参照してください。コマンドラインに与え"
"られたすべてのファイルから行を読み込んでいくには、 :mod:`fileinput` モジュー"
"ルを参照してください。一時ファイルや一時ディレクトリの作成については、 :mod:"
"`tempfile` モジュールを参照してください。高レベルなファイルとディレクトリの操"
"作については、 :mod:`shutil` モジュールを参照してください。"

#: ../../library/os.rst:16
msgid "Notes on the availability of these functions:"
msgstr "利用可能性に関する注意 :"

#: ../../library/os.rst:18
msgid ""
"The design of all built-in operating system dependent modules of Python is "
"such that as long as the same functionality is available, it uses the same "
"interface; for example, the function ``os.stat(path)`` returns stat "
"information about *path* in the same format (which happens to have "
"originated with the POSIX interface)."
msgstr ""
"Python の、すべての OS 依存モジュールの設計方針は、可能な限り同一のインタ"
"フェースで同一の機能を利用できるようにする、というものです。例えば、 ``os."
"stat(path)`` は *path* に関する stat 情報を、 (POSIX を元にした ) 同じフォー"
"マットで返します。"

#: ../../library/os.rst:24
msgid ""
"Extensions peculiar to a particular operating system are also available "
"through the :mod:`os` module, but using them is of course a threat to "
"portability."
msgstr ""
"特定のオペレーティングシステム固有の拡張も :mod:`os` を介して利用することがで"
"きますが、これらの利用はもちろん、可搬性を脅かします。"

#: ../../library/os.rst:28
msgid ""
"An \"Availability: Unix\" note means that this function is commonly found on "
"Unix systems.  It does not make any claims about its existence on a specific "
"operating system."
msgstr ""
"「利用できる環境 : Unix 」の意味はこの関数が Unix システムにあることが多いと"
"いうことです。このことは特定の OS における存在を主張するものではありません。"

#: ../../library/os.rst:32
msgid ""
"If not separately noted, all functions that claim \"Availability: Unix\" are "
"supported on Mac OS X, which builds on a Unix core."
msgstr ""
"特に記述がない場合、「利用できる環境 : Unix 」と書かれている関数は、 Unix を"
"コアにしている Mac OS X でも利用することができます。"

#: ../../library/os.rst:40
msgid ""
"All functions in this module raise :exc:`OSError` in the case of invalid or "
"inaccessible file names and paths, or other arguments that have the correct "
"type, but are not accepted by the operating system."
msgstr ""
"このモジュール内のすべての関数は、間違った、あるいはアクセス出来ないファイル"
"名やファイルパス、その他型が合っていても OS が受理しない引数に対して、 :exc:"
"`OSError` を送出します。"

#: ../../library/os.rst:47
msgid "An alias for the built-in :exc:`OSError` exception."
msgstr "組み込みの :exc:`OSError` 例外に対するエイリアスです。"

#: ../../library/os.rst:52
msgid ""
"The name of the operating system dependent module imported.  The following "
"names have currently been registered: ``'posix'``, ``'nt'``, ``'os2'``, "
"``'ce'``, ``'java'``, ``'riscos'``."
msgstr ""
"import されているオペレーティング・システム依存モジュールの名前です。現在次の"
"名前が登録されています : ``'posix'``, ``'nt'``, ``'os2'``, ``'ce'``, "
"``'java'``, ``'riscos'``."

#: ../../library/os.rst:57
msgid ""
":attr:`sys.platform` has a finer granularity.  :func:`os.uname` gives system-"
"dependent version information."
msgstr ""
":attr:`sys.platform` はより細かな粒度を持っています。 :func:`os.uname` はシス"
"テム依存のバージョン情報を提供します。"

#: ../../library/os.rst:60
msgid ""
"The :mod:`platform` module provides detailed checks for the system's "
"identity."
msgstr ""
":mod:`platform` モジュールはシステムの詳細な識別情報をチェックする機能を提供"
"しています。"

#: ../../library/os.rst:67
msgid "Process Parameters"
msgstr "プロセスのパラメーター"

#: ../../library/os.rst:69
msgid ""
"These functions and data items provide information and operate on the "
"current process and user."
msgstr ""
"これらの関数とデータアイテムは、現在のプロセスおよびユーザーに対する情報提供"
"および操作のための機能を提供しています。"

#: ../../library/os.rst:75
msgid ""
"A :term:`mapping` object representing the string environment. For example, "
"``environ['HOME']`` is the pathname of your home directory (on some "
"platforms), and is equivalent to ``getenv(\"HOME\")`` in C."
msgstr ""
":term:`マップ型 <mapping>` オブジェクトは文字の環境を表します。例えば、 "
"``environ['HOME']`` はホームディレクトリのパス名であり、 C における "
"``getenv(\"HOME\")`` と等価です。"

#: ../../library/os.rst:79
msgid ""
"This mapping is captured the first time the :mod:`os` module is imported, "
"typically during Python startup as part of processing :file:`site.py`.  "
"Changes to the environment made after this time are not reflected in ``os."
"environ``, except for changes made by modifying ``os.environ`` directly."
msgstr ""
"このマップ型の内容は、 :mod:`os` モジュールの最初の import の時点、通常は "
"Python の起動時に :file:`site.py` が処理される中で取り込まれます。それ以後に"
"変更された環境変数は ``os.environ`` を直接変更しない限り ``os.environ`` には"
"反映されません。"

#: ../../library/os.rst:84
msgid ""
"If the platform supports the :func:`putenv` function, this mapping may be "
"used to modify the environment as well as query the environment.  :func:"
"`putenv` will be called automatically when the mapping is modified."
msgstr ""
"プラットフォーム上で :func:`putenv` がサポートされている場合、このマップ型オ"
"ブジェクトは環境変数に対する変更に使うこともできます。 :func:`putenv` はマッ"
"プ型オブジェクトが修正される時に、自動的に呼ばれることになります。"

#: ../../library/os.rst:90
msgid ""
"Calling :func:`putenv` directly does not change ``os.environ``, so it's "
"better to modify ``os.environ``."
msgstr ""
":func:`putenv` を直接呼び出しても ``os.environ`` の内容は変わらないので、 "
"``os.environ`` を直接変更する方がベターです。"

#: ../../library/os.rst:95
msgid ""
"On some platforms, including FreeBSD and Mac OS X, setting ``environ`` may "
"cause memory leaks.  Refer to the system documentation for :c:func:`putenv`."
msgstr ""
"FreeBSD と Mac OS X を含む一部のプラットフォームでは、 ``environ`` の値を変更"
"するとメモリリークの原因になる場合があります。システムの :c:func:`putenv` に"
"関するドキュメントを参照してください。"

#: ../../library/os.rst:99
msgid ""
"If :func:`putenv` is not provided, a modified copy of this mapping  may be "
"passed to the appropriate process-creation functions to cause  child "
"processes to use a modified environment."
msgstr ""
":func:`putenv` が提供されていない場合、このマップ型オブジェクトに変更を加えた"
"コピーを適切なプロセス生成機能に渡すことで、生成された子プロセスが変更された"
"環境変数を利用するようにできます。"

#: ../../library/os.rst:103
msgid ""
"If the platform supports the :func:`unsetenv` function, you can delete items "
"in this mapping to unset environment variables. :func:`unsetenv` will be "
"called automatically when an item is deleted from ``os.environ``, and when "
"one of the :meth:`pop` or :meth:`clear` methods is called."
msgstr ""
"プラットフォームが :func:`unsetenv` 関数をサポートしている場合、このマップ型"
"オブジェクトからアイテムを削除することで環境変数を消すことができます。 :func:"
"`unsetenv` は ``os.environ`` からアイテムが取り除かれた時に自動的に呼ばれま"
"す。 :meth:`pop` または :meth:`clear` が呼ばれた時も同様です。"

#: ../../library/os.rst:108
msgid ""
"Also unset environment variables when calling :meth:`os.environ.clear` and :"
"meth:`os.environ.pop`."
msgstr ""
":meth:`os.environ.clear` か :meth:`os.environ.pop` を呼び出した時も、 "
"(delete した時と同様に ) 環境変数を削除するようになりました。"

#: ../../library/os.rst:118
msgid "These functions are described in :ref:`os-file-dir`."
msgstr "これらの関数は、 :ref:`os-file-dir` 節で説明されています。"

#: ../../library/os.rst:123
msgid ""
"Return the filename corresponding to the controlling terminal of the process."
msgstr "プロセスの制御端末に対応するファイル名を返します。"

#: ../../library/os.rst:125 ../../library/os.rst:133 ../../library/os.rst:142
#: ../../library/os.rst:151 ../../library/os.rst:158 ../../library/os.rst:183
#: ../../library/os.rst:196 ../../library/os.rst:204 ../../library/os.rst:215
#: ../../library/os.rst:233 ../../library/os.rst:241 ../../library/os.rst:251
#: ../../library/os.rst:262 ../../library/os.rst:298 ../../library/os.rst:305
#: ../../library/os.rst:312 ../../library/os.rst:321 ../../library/os.rst:335
#: ../../library/os.rst:344 ../../library/os.rst:351 ../../library/os.rst:358
#: ../../library/os.rst:367 ../../library/os.rst:376 ../../library/os.rst:383
#: ../../library/os.rst:392 ../../library/os.rst:401 ../../library/os.rst:659
#: ../../library/os.rst:669 ../../library/os.rst:679 ../../library/os.rst:700
#: ../../library/os.rst:715 ../../library/os.rst:735 ../../library/os.rst:830
#: ../../library/os.rst:838 ../../library/os.rst:847 ../../library/os.rst:1012
#: ../../library/os.rst:1051 ../../library/os.rst:1106
#: ../../library/os.rst:1114 ../../library/os.rst:1125
#: ../../library/os.rst:1135 ../../library/os.rst:1144
#: ../../library/os.rst:1176 ../../library/os.rst:1282
#: ../../library/os.rst:1303 ../../library/os.rst:1501
#: ../../library/os.rst:1511 ../../library/os.rst:1782
#: ../../library/os.rst:1792 ../../library/os.rst:1801
#: ../../library/os.rst:1810 ../../library/os.rst:1819
#: ../../library/os.rst:1828 ../../library/os.rst:1837
#: ../../library/os.rst:1846 ../../library/os.rst:1856
#: ../../library/os.rst:1866 ../../library/os.rst:1875
#: ../../library/os.rst:1884 ../../library/os.rst:1895
#: ../../library/os.rst:1905 ../../library/os.rst:1915
#: ../../library/os.rst:1924 ../../library/os.rst:1933
#: ../../library/os.rst:1950 ../../library/os.rst:1992
#: ../../library/os.rst:2001 ../../library/os.rst:2009
#: ../../library/os.rst:2207 ../../library/os.rst:2247
#: ../../library/os.rst:2260 ../../library/os.rst:2270
#: ../../library/os.rst:2288 ../../library/os.rst:2302
#: ../../library/os.rst:2312 ../../library/os.rst:2322
#: ../../library/os.rst:2330 ../../library/os.rst:2338
#: ../../library/os.rst:2346 ../../library/os.rst:2353
#: ../../library/os.rst:2360 ../../library/os.rst:2396
#: ../../library/os.rst:2405 ../../library/os.rst:2417
#: ../../library/os.rst:2426
msgid "Availability: Unix."
msgstr "利用できる環境 : Unix 。"

#: ../../library/os.rst:130
msgid ""
"Return the effective group id of the current process.  This corresponds to "
"the \"set id\" bit on the file being executed in the current process."
msgstr ""
"現在のプロセスの実効グループ id を返します。この id は現在のプロセスで実行さ"
"れているファイルの \"set id\" ビットに対応します。"

#: ../../library/os.rst:140
msgid "Return the current process's effective user id."
msgstr "現在のプロセスの実効ユーザー id を返します。"

#: ../../library/os.rst:149
msgid "Return the real group id of the current process."
msgstr "現在のプロセスの実グループ id を返します。"

#: ../../library/os.rst:156
msgid ""
"Return list of supplemental group ids associated with the current process."
msgstr "現在のプロセスに関連づけられた従属グループ id のリストを返します。"

#: ../../library/os.rst:162
msgid ""
"On Mac OS X, :func:`getgroups` behavior differs somewhat from other Unix "
"platforms. If the Python interpreter was built with a deployment target of :"
"const:`10.5` or earlier, :func:`getgroups` returns the list of effective "
"group ids associated with the current user process; this list is limited to "
"a system-defined number of entries, typically 16, and may be modified by "
"calls to :func:`setgroups` if suitably privileged. If built with a "
"deployment target greater than :const:`10.5`, :func:`getgroups` returns the "
"current group access list for the user associated with the effective user id "
"of the process; the group access list may change over the lifetime of the "
"process, it is not affected by calls to :func:`setgroups`, and its length is "
"not limited to 16.  The deployment target value, :const:"
"`MACOSX_DEPLOYMENT_TARGET`, can be obtained with :func:`sysconfig."
"get_config_var`."
msgstr ""
"Mac OS X では :func:`getgroups` の挙動は他の Unix プラットフォームとはいくぶ"
"ん異なります。 Python の Deployment Target が :const:`10.5` 以前でビルドされ"
"ている場合、 :func:`getgroups` は現在のユーザープロセスに関連付けられている実"
"効グループ id を返します ; このリストはシステムで定義されたエントリ数 ( 通常"
"は 16) に制限され、適切な特権があれば :func:`setgroups` の呼び出しによって変"
"更される場合があります。 Deployment Target が :const:`10.5` より新しい場"
"合、 :func:`getgroups` はプロセスの実効ユーザー id に関連付けられたユーザーの"
"現在のグループアクセスリストを返します ; グループアクセスリストはプロセスのラ"
"イフタイムで変更される可能性があり、 :func:`setgroups` の呼び出しの影響を受け"
"ず、長さ 16 の制限を受けません。 Deployment Target の値 :const:"
"`MACOSX_DEPLOYMENT_TARGET` は、 :func:`sysconfig.get_config_var` で取得するこ"
"とができます。"

#: ../../library/os.rst:179
msgid ""
"Call the system initgroups() to initialize the group access list with all of "
"the groups of which the specified username is a member, plus the specified "
"group id."
msgstr ""
"システムの initgroups() を呼び出し、指定された *username* がメンバーである全"
"グループと *gid* で指定されたグループでグループアクセスリストを初期化します。"

#: ../../library/os.rst:190
msgid ""
"Return the name of the user logged in on the controlling terminal of the "
"process.  For most purposes, it is more useful to use the environment "
"variable :envvar:`LOGNAME` to find out who the user is, or ``pwd.getpwuid(os."
"getuid())[0]`` to get the login name of the process's real user id."
msgstr ""
"現在のプロセスの制御端末にログインしているユーザ名を返します。ほとんどの場"
"合、ユーザが誰かを知りたいときには環境変数 :envvar:`LOGNAME` を、プロセスの実"
"ユーザ ID のログイン名を知りたいときには ``pwd.getpwuid(os.getuid())[0]`` を"
"使うほうが便利です。"

#: ../../library/os.rst:201
msgid ""
"Return the process group id of the process with process id *pid*. If *pid* "
"is 0, the process group id of the current process is returned."
msgstr ""
"プロセス id *pid* のプロセスのプロセスグループ id を返します。もし *pid* が "
"0 ならば、現在のプロセスのプロセスグループ id を返します。"

#: ../../library/os.rst:213
msgid "Return the id of the current process group."
msgstr "現在のプロセスグループの id を返します。"

#: ../../library/os.rst:222
msgid "Return the current process id."
msgstr "現在のプロセス id を返します。"

#: ../../library/os.rst:224 ../../library/os.rst:411 ../../library/os.rst:418
#: ../../library/os.rst:470 ../../library/os.rst:493 ../../library/os.rst:512
#: ../../library/os.rst:550 ../../library/os.rst:564 ../../library/os.rst:578
#: ../../library/os.rst:614 ../../library/os.rst:635 ../../library/os.rst:644
#: ../../library/os.rst:651 ../../library/os.rst:707 ../../library/os.rst:752
#: ../../library/os.rst:779 ../../library/os.rst:805 ../../library/os.rst:814
#: ../../library/os.rst:855 ../../library/os.rst:938 ../../library/os.rst:1003
#: ../../library/os.rst:1021 ../../library/os.rst:1028
#: ../../library/os.rst:1091 ../../library/os.rst:1154
#: ../../library/os.rst:1239 ../../library/os.rst:1315
#: ../../library/os.rst:1345 ../../library/os.rst:1369
#: ../../library/os.rst:1448 ../../library/os.rst:1532
#: ../../library/os.rst:1567 ../../library/os.rst:1586
#: ../../library/os.rst:1703 ../../library/os.rst:1752
#: ../../library/os.rst:1760 ../../library/os.rst:2097
#: ../../library/os.rst:2110 ../../library/os.rst:2184
msgid "Availability: Unix, Windows."
msgstr "利用できる環境 : Unix 、 Windows 。"

#: ../../library/os.rst:231
msgid "Return the parent's process id."
msgstr "親プロセスの id を返します。"

#: ../../library/os.rst:238
msgid ""
"Return a tuple (ruid, euid, suid) denoting the current process's real, "
"effective, and saved user ids."
msgstr ""
"現在のプロセスの実ユーザー id 、実効ユーザー id 、および保存ユーザー id を示"
"す、 (ruid, euid, suid) のタプルを返します。"

#: ../../library/os.rst:248
msgid ""
"Return a tuple (rgid, egid, sgid) denoting the current process's real, "
"effective, and saved group ids."
msgstr ""
"現在のプロセスの実グループ id 、実効グループ id 、および保存グループ id を示"
"す、 (rgid, egid, sgid) のタプルを返します。"

#: ../../library/os.rst:260
msgid "Return the current process's real user id."
msgstr "現在のプロセスの実ユーザー id を返します。"

#: ../../library/os.rst:267
msgid ""
"Return the value of the environment variable *varname* if it exists, or "
"*value* if it doesn't.  *value* defaults to ``None``."
msgstr ""
"環境変数 *varname* が存在する場合にはその値を返し、存在しない場合には "
"*value* を返します。 *value* のデフォルト値は ``None`` です。"

#: ../../library/os.rst:270 ../../library/os.rst:281 ../../library/os.rst:450
msgid "Availability: most flavors of Unix, Windows."
msgstr "利用できる環境 : 主な Unix 互換環境、 Windows 。"

#: ../../library/os.rst:277
msgid ""
"Set the environment variable named *varname* to the string *value*.  Such "
"changes to the environment affect subprocesses started with :func:`os."
"system`, :func:`popen` or :func:`fork` and :func:`execv`."
msgstr ""
"*varname* と名づけられた環境変数の値を文字列 *value* に設定します。このような"
"環境変数への変更は、 :func:`os.system`, :func:`popen` , :func:`fork` および :"
"func:`execv` により起動された子プロセスに影響します。"

#: ../../library/os.rst:285
msgid ""
"On some platforms, including FreeBSD and Mac OS X, setting ``environ`` may "
"cause memory leaks. Refer to the system documentation for putenv."
msgstr ""
"FreeBSD と Mac OS X を含む一部のプラットフォームでは、 ``environ`` の値を変更"
"するとメモリリークの原因になる場合があります。システムの putenv に関するド"
"キュメントを参照してください。"

#: ../../library/os.rst:288
msgid ""
"When :func:`putenv` is supported, assignments to items in ``os.environ`` are "
"automatically translated into corresponding calls to :func:`putenv`; "
"however, calls to :func:`putenv` don't update ``os.environ``, so it is "
"actually preferable to assign to items of ``os.environ``."
msgstr ""
":func:`putenv` がサポートされている場合、 ``os.environ`` のアイテムに対する代"
"入を行うと自動的に :func:`putenv` が呼び出されます ; 直接 :func:`putenv` を呼"
"び出した場合 ``os.environ`` は更新されないため、実際には ``os.environ`` のア"
"イテムに代入する方が望ましい操作です。"

#: ../../library/os.rst:296
msgid "Set the current process's effective group id."
msgstr "現在のプロセスに実効グループ id をセットします。"

#: ../../library/os.rst:303
msgid "Set the current process's effective user id."
msgstr "現在のプロセスに実効ユーザー id をセットします。"

#: ../../library/os.rst:310
msgid "Set the current process' group id."
msgstr "現在のプロセスにグループ id をセットします。"

#: ../../library/os.rst:317
msgid ""
"Set the list of supplemental group ids associated with the current process "
"to *groups*. *groups* must be a sequence, and each element must be an "
"integer identifying a group. This operation is typically available only to "
"the superuser."
msgstr ""
"現在のグループに関連付けられた従属グループ id のリストを *groups* に設定しま"
"す。 *groups* はシーケンス型でなくてはならず、各要素はグループを特定する整数"
"でなくてはなりません。通常、この操作はスーパユーザーしか利用できません。"

#: ../../library/os.rst:325
msgid ""
"On Mac OS X, the length of *groups* may not exceed the system-defined "
"maximum number of effective group ids, typically 16. See the documentation "
"for :func:`getgroups` for cases where it may not return the same group list "
"set by calling setgroups()."
msgstr ""
"Mac OS X では、 *groups* の長さはシステムで定義された実効グループ id の最大"
"数 ( 通常は 16) を超えない場合があります。 setgroups() 呼び出しで設定されたも"
"のと同じグループリストが返されないケースについては、 :func:`getgroups` のド"
"キュメントを参照してください。"

#: ../../library/os.rst:332
msgid ""
"Call the system call :c:func:`setpgrp` or ``setpgrp(0, 0)`` depending on "
"which version is implemented (if any).  See the Unix manual for the "
"semantics."
msgstr ""
"システムコール :c:func:`setpgrp` か ``setpgrp(0, 0)`` のどちらか(実装されてい"
"るもの)を呼び出します。機能については UNIX マニュアルを参照して下さい。"

#: ../../library/os.rst:340
msgid ""
"Call the system call :c:func:`setpgid` to set the process group id of the "
"process with id *pid* to the process group with id *pgrp*.  See the Unix "
"manual for the semantics."
msgstr ""
"システムコール :c:func:`setpgid` を呼び出してプロセス id *pid* のプロセスのプ"
"ロセスグループ id を *pgrp* に設定します。この動作に関しては Unix のマニュア"
"ルを参照してください。"

#: ../../library/os.rst:349
msgid "Set the current process's real and effective group ids."
msgstr "現在のプロセスの実グループ id および実効グループ id を設定します。"

#: ../../library/os.rst:356
msgid "Set the current process's real, effective, and saved group ids."
msgstr ""
"現在のプロセスの、実グループ id 、実効グループ id 、および保存グループ id を"
"設定します。"

#: ../../library/os.rst:365
msgid "Set the current process's real, effective, and saved user ids."
msgstr ""
"現在のプロセスの実ユーザー id 、実効ユーザー id 、および保存ユーザー id を設"
"定します。"

#: ../../library/os.rst:374
msgid "Set the current process's real and effective user ids."
msgstr "現在のプロセスの実ユーザー id および実効ユーザー id を設定します。"

#: ../../library/os.rst:381
msgid ""
"Call the system call :c:func:`getsid`.  See the Unix manual for the "
"semantics."
msgstr ""
":c:func:`getsid` システムコールを呼び出します。機能については Unix のマニュア"
"ルを参照してください。"

#: ../../library/os.rst:390
msgid ""
"Call the system call :c:func:`setsid`.  See the Unix manual for the "
"semantics."
msgstr ""
":c:func:`setsid` システムコールを呼び出します。機能については Unix のマニュア"
"ルを参照してください。"

#: ../../library/os.rst:399
msgid "Set the current process's user id."
msgstr "現在のプロセスのユーザー id を設定します。"

#: ../../library/os.rst:407
msgid ""
"Return the error message corresponding to the error code in *code*. On "
"platforms where :c:func:`strerror` returns ``NULL`` when given an unknown "
"error number, :exc:`ValueError` is raised."
msgstr ""
"エラーコード *code* に対応するエラーメッセージを返します。未知のエラーコード"
"の対して :c:func:`strerror` が ``NULL`` を返すプラットフォームでは、 :exc:"
"`ValueError` が送出されます。"

#: ../../library/os.rst:416
msgid "Set the current numeric umask and return the previous umask."
msgstr "現在の数値 umask を設定し、以前の umask 値を返します。"

#: ../../library/os.rst:427
msgid ""
"Return a 5-tuple containing information identifying the current operating "
"system.  The tuple contains 5 strings: ``(sysname, nodename, release, "
"version, machine)``.  Some systems truncate the nodename to 8 characters or "
"to the leading component; a better way to get the hostname is :func:`socket."
"gethostname`  or even ``socket.gethostbyaddr(socket.gethostname())``."
msgstr ""
"現在のオペレーティングシステムを特定する情報の入った 5 要素のタプルを返しま"
"す。このタプルには 5 つの文字列 : ``(sysname, nodename, release, version, "
"machine)`` が入っています。システムによっては、ノード名を 8 文字、または先頭"
"の要素だけに切り詰めます ; ホスト名を取得する方法としては、 :func:`socket."
"gethostname` を使う方がよいでしょう、あるいは ``socket.gethostbyaddr(socket."
"gethostname())`` でもかまいません。"

#: ../../library/os.rst:434
msgid "Availability: recent flavors of Unix."
msgstr "利用できる環境 : Unix 互換環境。"

#: ../../library/os.rst:441
msgid ""
"Unset (delete) the environment variable named *varname*. Such changes to the "
"environment affect subprocesses started with :func:`os.system`, :func:"
"`popen` or :func:`fork` and :func:`execv`."
msgstr ""
"*varname* という名前の環境変数を取り消します。このような環境の変化は :func:"
"`os.system`, :func:`popen` または :func:`fork` と :func:`execv` で開始される"
"サブプロセスに影響を与えます。"

#: ../../library/os.rst:445
msgid ""
"When :func:`unsetenv` is supported, deletion of items in ``os.environ`` is "
"automatically translated into a corresponding call to :func:`unsetenv`; "
"however, calls to :func:`unsetenv` don't update ``os.environ``, so it is "
"actually preferable to delete items of ``os.environ``."
msgstr ""
":func:`unsetenv` がサポートされている場合、 ``os.environ`` のアイテムの削除を"
"行うと自動的に :func:`unsetenv` が呼び出されます。直接 :func:`unsetenv` を呼"
"び出した場合 ``os.environ`` は更新されないため、実際には ``os.environ`` のア"
"イテムを削除する方が望ましい操作です。"

#: ../../library/os.rst:456
msgid "File Object Creation"
msgstr "ファイルオブジェクトの生成"

#: ../../library/os.rst:458
msgid "These functions create new file objects. (See also :func:`open`.)"
msgstr ""
"以下の関数は新しいファイルオブジェクトを作成します。 (:func:`open` も参照して"
"ください )"

#: ../../library/os.rst:465
msgid ""
"Return an open file object connected to the file descriptor *fd*.  The "
"*mode* and *bufsize* arguments have the same meaning as the corresponding "
"arguments to the built-in :func:`open` function.  If :func:`fdopen` raises "
"an exception, it leaves *fd* untouched (unclosed)."
msgstr ""
"ファイル記述子 *fd* に接続している、開かれたファイルオブジェクトを返します。"
"引数 *mode* および *bufsize* は、組み込み関数 :func:`open` における対応する引"
"数と同じ意味を持ちます。 :func:`fdopen` が例外を起こした場合は、 *fd* はその"
"ままにされます(クローズされません)。"

#: ../../library/os.rst:472
msgid ""
"When specified, the *mode* argument must now start with one of the letters "
"``'r'``, ``'w'``, or ``'a'``, otherwise a :exc:`ValueError` is raised."
msgstr ""
"引数 *mode* は、指定されるならば、 ``'r'``, ``'w'``, ``'a'`` のいずれかの文字"
"で始まらなければなりません。そうでなければ :exc:`ValueError` が送出されます ."

#: ../../library/os.rst:476
msgid ""
"On Unix, when the *mode* argument starts with ``'a'``, the *O_APPEND* flag "
"is set on the file descriptor (which the :c:func:`fdopen` implementation "
"already does on most platforms)."
msgstr ""
"Unix では、引数 *mode* が ``'a'`` で始まる時には *O_APPEND* フラグがファイル"
"記述子に設定されます。 ( ほとんどのプラットフォームで :c:func:`fdopen` 実装が"
"既に行なっていることです )."

#: ../../library/os.rst:484
msgid ""
"Open a pipe to or from *command*.  The return value is an open file object "
"connected to the pipe, which can be read or written depending on whether "
"*mode* is ``'r'`` (default) or ``'w'``. The *bufsize* argument has the same "
"meaning as the corresponding argument to the built-in :func:`open` "
"function.  The exit status of the command (encoded in the format specified "
"for :func:`wait`) is available as the return value of the :meth:`~file."
"close` method of the file object, except that when the exit status is zero "
"(termination without errors), ``None`` is returned."
msgstr ""
"*command* への、または *command* からのパイプ入出力を開きます。戻り値はパイプ"
"に接続されている開かれたファイルオブジェクトで、 *mode* が ``'r'`` ( 標準の設"
"定です ) または ``'w'`` かによって読み出しまたは書き込みを行うことができま"
"す。引数 *bufsize* は、組み込み関数 :func:`open` における対応する引数と同じ意"
"味を持ちます。 *command* の終了ステータス (:func:`wait` で指定された書式で"
"コード化されています ) は、 :meth:`close` メソッドの戻り値として取得すること"
"ができます。例外は終了ステータスがゼロ ( すなわちエラーなしで終了 ) の場合"
"で、このときには ``None`` を返します。"

#: ../../library/os.rst:495 ../../library/os.rst:546 ../../library/os.rst:560
#: ../../library/os.rst:574
msgid ""
"This function is obsolete.  Use the :mod:`subprocess` module.  Check "
"especially the :ref:`subprocess-replacements` section."
msgstr ""
"この関数は廃止予定です。 :mod:`subprocess` モジュールを使用してください。特"
"に :ref:`subprocess-replacements` セクションをチェックしてください。"

#: ../../library/os.rst:499
msgid ""
"This function worked unreliably under Windows in earlier versions of Python. "
"This was due to the use of the :c:func:`_popen` function from the libraries "
"provided with Windows.  Newer versions of Python do not use the broken "
"implementation from the Windows libraries."
msgstr ""
"この関数は、 Python の初期のバージョンでは、 Windows 環境下で信頼できない動作"
"をしていました。これは Windows に付属して提供されるライブラリの :c:func:"
"`_popen` 関数を利用したことによるものです。新しいバージョンの Python では、 "
"Windows 付属のライブラリにある壊れた実装を利用しません。"

#: ../../library/os.rst:508
msgid ""
"Return a new file object opened in update mode (``w+b``).  The file has no "
"directory entries associated with it and will be automatically deleted once "
"there are no file descriptors for the file."
msgstr ""
"更新モード (``w+b``) で開かれた新しいファイルオブジェクトを返します。このファ"
"イルはディレクトリエントリ登録に関連付けられておらず、このファイルに対する"
"ファイル記述子がなくなると自動的に削除されます。"

#: ../../library/os.rst:514
msgid ""
"There are a number of different :func:`popen\\*` functions that provide "
"slightly different ways to create subprocesses."
msgstr ""
"幾つかの少し異なった方法で子プロセスを作成するために、幾つかの :func:"
"`popen\\*` 関数が提供されています。"

#: ../../library/os.rst:517
msgid ""
"All of the :func:`popen\\*` functions are obsolete. Use the :mod:"
"`subprocess` module."
msgstr ""
"全ての :func:`popen\\*` 関数は撤廃されました。代わりに :mod:`subprocess` モ"
"ジュールを利用してください。"

#: ../../library/os.rst:521
msgid ""
"For each of the :func:`popen\\*` variants, if *bufsize* is specified, it "
"specifies the buffer size for the I/O pipes. *mode*, if provided, should be "
"the string ``'b'`` or ``'t'``; on Windows this is needed to determine "
"whether the file objects should be opened in binary or text mode.  The "
"default value for *mode* is ``'t'``."
msgstr ""
":func:`popen\\*` の変種はどれも、 *bufsize* が指定されている場合には I/O パイ"
"プのバッファサイズを表します。 *mode* を指定する場合には、文字列 ``'b'`` また"
"は ``'t'`` でなければなりません ; これは、 Windows でファイルをバイナリモード"
"で開くかテキストモードで開くかを決めるために必要です。 *mode* の標準の設定値"
"は ``'t'`` です。"

#: ../../library/os.rst:527
msgid ""
"Also, for each of these variants, on Unix, *cmd* may be a sequence, in which "
"case arguments will be passed directly to the program without shell "
"intervention (as with :func:`os.spawnv`). If *cmd* is a string it will be "
"passed to the shell (as with :func:`os.system`)."
msgstr ""
"また Unix ではこれらの変種はいずれも *cmd* をシーケンスにできます。その場合、"
"引数はシェルの介在なしに直接 (:func:`os.spawnv` のように ) 渡されます。 "
"*cmd* が文字列の場合、引数は ( :func:`os.system` のように ) シェルに渡されま"
"す。"

#: ../../library/os.rst:532
msgid ""
"These methods do not make it possible to retrieve the exit status from the "
"child processes.  The only way to control the input and output streams and "
"also retrieve the return codes is to use the :mod:`subprocess` module; these "
"are only available on Unix."
msgstr ""
"以下のメソッドは子プロセスから終了ステータスを取得できるようにはしていませ"
"ん。入出力ストリームを制御し、かつ終了コードの取得も行える唯一の方法は、 :"
"mod:`subprocess` モジュールを利用する事です。以下のメソッドは Unix でのみ利用"
"可能です。"

#: ../../library/os.rst:537
msgid ""
"For a discussion of possible deadlock conditions related to the use of these "
"functions, see :ref:`popen2-flow-control`."
msgstr ""
"これらの関数の利用に関係して起きうるデッドロック状態についての議論は、 :ref:"
"`popen2-flow-control` 節を参照してください。"

#: ../../library/os.rst:543
msgid ""
"Execute *cmd* as a sub-process and return the file objects ``(child_stdin, "
"child_stdout)``."
msgstr ""
"*cmd* を子プロセスとして実行します。ファイル・オブジェクト ``(child_stdin, "
"child_stdout)`` を返します。"

#: ../../library/os.rst:557
msgid ""
"Execute *cmd* as a sub-process and return the file objects ``(child_stdin, "
"child_stdout, child_stderr)``."
msgstr ""
"*cmd* を子プロセスとして実行します。ファイルオブジェクト ``(child_stdin, "
"child_stdout, child_stderr)`` を返します。"

#: ../../library/os.rst:571
msgid ""
"Execute *cmd* as a sub-process and return the file objects ``(child_stdin, "
"child_stdout_and_stderr)``."
msgstr ""
"*cmd* を子プロセスとして実行します。ファイルオブジェクト ``(child_stdin, "
"child_stdout_and_stderr)`` を返します。"

#: ../../library/os.rst:582
msgid ""
"(Note that ``child_stdin, child_stdout, and child_stderr`` are named from "
"the point of view of the child process, so *child_stdin* is the child's "
"standard input.)"
msgstr ""
"(``child_stdin, child_stdout, および child_stderr`` は子プロセスの視点で名付"
"けられているので注意してください。すなわち、 *child_stdin* とは子プロセスの標"
"準入力を意味します。 )"

#: ../../library/os.rst:586
msgid ""
"This functionality is also available in the :mod:`popen2` module using "
"functions of the same names, but the return values of those functions have a "
"different order."
msgstr ""
"この機能は :mod:`popen2` モジュール内の同じ名前の関数を使っても実現できます"
"が、これらの関数の戻り値は異なる順序を持っています。"

#: ../../library/os.rst:594
msgid "File Descriptor Operations"
msgstr "ファイル記述子の操作"

#: ../../library/os.rst:596
msgid ""
"These functions operate on I/O streams referenced using file descriptors."
msgstr ""
"これらの関数は、ファイル記述子を使って参照されている I/O ストリームを操作しま"
"す。"

#: ../../library/os.rst:598
msgid ""
"File descriptors are small integers corresponding to a file that has been "
"opened by the current process.  For example, standard input is usually file "
"descriptor 0, standard output is 1, and standard error is 2.  Further files "
"opened by a process will then be assigned 3, 4, 5, and so forth.  The name "
"\"file descriptor\" is slightly deceptive; on Unix platforms, sockets and "
"pipes are also referenced by file descriptors."
msgstr ""
"ファイル記述子とは現在のプロセスで開かれたファイルに対応する小さな整数です。"
"例えば、標準入力のファイル記述子は常に 0 で、標準出力は 1 、標準エラーは 2 で"
"す。プロセスから開かれたその他のファイルには 3 、 4 、 5 、などが割り振られま"
"す。「ファイル記述子」という名称は少し誤解を与えるものかもしれませんが、 "
"Unix プラットフォームにおいて、ソケットやパイプもファイル記述子によって参照さ"
"れます。"

#: ../../library/os.rst:605
msgid ""
"The :meth:`~file.fileno` method can be used to obtain the file descriptor "
"associated with a file object when required.  Note that using the file "
"descriptor directly will bypass the file object methods, ignoring aspects "
"such as internal buffering of data."
msgstr ""
"ファイルオブジェクトに紐付けられたファイル記述子は :meth:`~file.fileno` メ"
"ソッドによって取得可能です。ただし、ファイル記述子を直接使うとファイルオブ"
"ジェクトのメソッドは経由しませんので、内部でバッファするかどうかといったファ"
"イルオブジェクトの都合は無視されます。"

#: ../../library/os.rst:612
msgid "Close file descriptor *fd*."
msgstr "ファイル記述子 *fd* をクローズします。"

#: ../../library/os.rst:618
msgid ""
"This function is intended for low-level I/O and must be applied to a file "
"descriptor as returned by :func:`os.open` or :func:`pipe`.  To close a "
"\"file object\" returned by the built-in function :func:`open` or by :func:"
"`popen` or :func:`fdopen`, use its :meth:`~io.IOBase.close` method."
msgstr ""
"この関数は低水準の I/O 向けのもので、 :func:`os.open` や :func:`pipe` が返す"
"ファイル記述子に対して使用しなければなりません。組み込み関数 :func:`open` "
"や :func:`popen` 、 :func:`fdopen` が返す \" ファイルオブジェクト \" を閉じる"
"には、オブジェクトの :meth:`~io.IOBase.close` メソッドを使用してください。"

#: ../../library/os.rst:626
msgid ""
"Close all file descriptors from *fd_low* (inclusive) to *fd_high* "
"(exclusive), ignoring errors. Equivalent to::"
msgstr ""
"*fd_low* ( を含む ) から *fd_high* ( 含まない ) までの全てのファイル記述子"
"を、エラーを無視しながら閉じます。次のコードと等価です ::"

#: ../../library/os.rst:642
msgid "Return a duplicate of file descriptor *fd*."
msgstr "ファイル記述子 *fd* の複製を返します。"

#: ../../library/os.rst:649
msgid ""
"Duplicate file descriptor *fd* to *fd2*, closing the latter first if "
"necessary."
msgstr ""
"ファイル記述子を *fd* から *fd2* に複製し、必要なら後者の記述子を前もって閉じ"
"ておきます。"

#: ../../library/os.rst:656
msgid ""
"Change the mode of the file given by *fd* to the numeric *mode*.  See the "
"docs for :func:`chmod` for possible values of *mode*."
msgstr ""
"*fd* で指定されたファイルのモードを *mode* に変更します。 *mode* に指定できる"
"値については、 :func:`chmod` のドキュメントを参照してください。"

#: ../../library/os.rst:666
msgid ""
"Change the owner and group id of the file given by *fd* to the numeric *uid* "
"and *gid*.  To leave one of the ids unchanged, set it to -1."
msgstr ""
"*fd* で指定されたファイルの owner id と group id を、 *uid* と *gid* に変更し"
"ます。どちらかの id を変更しない場合は、 -1 を渡してください。"

#: ../../library/os.rst:676
msgid ""
"Force write of file with filedescriptor *fd* to disk. Does not force update "
"of metadata."
msgstr ""
"ファイル記述子 *fd* を持つファイルのディスクへの書き込みを強制します。メタ"
"データの更新は強制しません。"

#: ../../library/os.rst:682
msgid "This function is not available on MacOS."
msgstr "この関数は MacOS では利用できません。"

#: ../../library/os.rst:687
msgid ""
"Return system configuration information relevant to an open file. *name* "
"specifies the configuration value to retrieve; it may be a string which is "
"the name of a defined system value; these names are specified in a number of "
"standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define "
"additional names as well.  The names known to the host operating system are "
"given in the ``pathconf_names`` dictionary.  For configuration variables not "
"included in that mapping, passing an integer for *name* is also accepted."
msgstr ""
"オープンしているファイルに関連するシステム設定情報を返します。 *name* には取"
"得したい設定名を指定します ; これは定義済みのシステム値名の文字列で、多くの標"
"準 (POSIX.1 、 Unix 95 、 Unix 98 その他 ) で定義されています。プラットフォー"
"ムによっては別の名前も定義されています。ホストオペレーティングシステムの関知"
"する名前は ``pathconf_names`` 辞書で与えられています。このマップ型オブジェク"
"トに入っていない設定変数については、 *name* に整数を渡してもかまいません。"

#: ../../library/os.rst:695 ../../library/os.rst:1277
msgid ""
"If *name* is a string and is not known, :exc:`ValueError` is raised.  If a "
"specific value for *name* is not supported by the host system, even if it is "
"included in ``pathconf_names``, an :exc:`OSError` is raised with :const:"
"`errno.EINVAL` for the error number."
msgstr ""
"もし *name* が文字列でかつ不明である場合、 :exc:`ValueError` を送出します。 "
"*name* の指定値がホストシステムでサポートされておらず、 ``pathconf_names`` に"
"も入っていない場合、 :const:`errno.EINVAL` をエラー番号として :exc:`OSError` "
"を送出します。"

#: ../../library/os.rst:705
msgid "Return status for file descriptor *fd*, like :func:`~os.stat`."
msgstr ":func:`~os.stat` のようにファイル記述子 *fd* の状態を返します。"

#: ../../library/os.rst:712
msgid ""
"Return information about the filesystem containing the file associated with "
"file descriptor *fd*, like :func:`statvfs`."
msgstr ""
":func:`statvfs` のように、ファイル記述子 *fd* に関連づけられたファイルが入っ"
"ているファイルシステムに関する情報を返します。"

#: ../../library/os.rst:720
msgid ""
"Force write of file with filedescriptor *fd* to disk.  On Unix, this calls "
"the native :c:func:`fsync` function; on Windows, the MS :c:func:`_commit` "
"function."
msgstr ""
"ファイル記述子 *fd* を持つファイルのディスクへの書き込みを強制します。 Unix "
"では、ネイティブの :c:func:`fsync` 関数を、 Windows では :c:func:`_commit` 関"
"数を呼び出します。"

#: ../../library/os.rst:723
msgid ""
"If you're starting with a Python file object *f*, first do ``f.flush()``, "
"and then do ``os.fsync(f.fileno())``, to ensure that all internal buffers "
"associated with *f* are written to disk."
msgstr ""
"Python のファイルオブジェクト *f* を使う場合、 *f* の内部バッファを確実にディ"
"スクに書き込むために、まず ``f.flush()`` を実行し、それから ``os.fsync(f."
"fileno())`` してください。"

#: ../../library/os.rst:727
msgid "Availability: Unix, and Windows starting in 2.2.3."
msgstr "利用できる環境 : Unix, Windows (2.2.3 以降 )"

#: ../../library/os.rst:732
msgid ""
"Truncate the file corresponding to file descriptor *fd*, so that it is at "
"most *length* bytes in size."
msgstr ""
"ファイル記述子 *fd* に対応するファイルを、サイズが最大で *length* バイトにな"
"るように切り詰めます。"

#: ../../library/os.rst:740
msgid ""
"Return ``True`` if the file descriptor *fd* is open and connected to a tty(-"
"like) device, else ``False``."
msgstr ""
"ファイル記述子 *fd* がオープンされていて、 tty ( のような ) デバイスに接続さ"
"れている場合、 ``True`` を返します。そうでない場合は ``False`` を返します。"

#: ../../library/os.rst:746
msgid ""
"Set the current position of file descriptor *fd* to position *pos*, modified "
"by *how*: :const:`SEEK_SET` or ``0`` to set the position relative to the "
"beginning of the file; :const:`SEEK_CUR` or ``1`` to set it relative to the "
"current position; :const:`SEEK_END` or ``2`` to set it relative to the end "
"of the file. Return the new cursor position in bytes, starting from the "
"beginning."
msgstr ""
"ファイル記述子 *fd* の現在の位置を *pos* に設定します。 *pos* の意味は *how* "
"で修飾されます : ファイルの先頭からの相対には :const:`SEEK_SET` か ``0`` を設"
"定します ; 現在の位置からの相対には :const:`SEEK_CUR` か ``1`` を設定しま"
"す ; ファイルの末尾からの相対には :const:`SEEK_END` か ``2`` を設定します。戻"
"り値は開始位置からの、バイトで数えた新しいカーソル位置です。"

#: ../../library/os.rst:759
msgid ""
"Parameters to the :func:`lseek` function. Their values are 0, 1, and 2, "
"respectively."
msgstr ":func:`lseek` 関数に渡すパラメーター。値は順に 0, 1, 2 です。"

#: ../../library/os.rst:762
msgid "Availability: Windows, Unix."
msgstr "利用出来る環境 : Windows, Unix"

#: ../../library/os.rst:769
msgid ""
"Open the file *file* and set various flags according to *flags* and possibly "
"its mode according to *mode*. The default *mode* is ``0777`` (octal), and "
"the current umask value is first masked out.  Return the file descriptor for "
"the newly opened file."
msgstr ""
"ファイル *file* を開き、 *flag* に従って様々なフラグを設定し、可能なら "
"*mode* に従ってファイルモードを設定します。 *mode* の標準の設定値は ``0777`` "
"(8 進表現 ) で、先に現在の umask を使ってマスクを掛けます。新たに開かれたファ"
"イルのファイル記述子を返します。"

#: ../../library/os.rst:774
msgid ""
"For a description of the flag and mode values, see the C run-time "
"documentation; flag constants (like :const:`O_RDONLY` and :const:`O_WRONLY`) "
"are defined in this module too (see :ref:`open-constants`).  In particular, "
"on Windows adding :const:`O_BINARY` is needed to open files in binary mode."
msgstr ""
"フラグとファイルモードの値についての詳細は C ランタイムのドキュメントを参照し"
"てください ; (:const:`O_RDONLY` や :const:`O_WRONLY` のような ) フラグ定数は"
"このモジュールでも定義されています (:ref:`open-constants` を参照してくださ"
"い ) 。特に、 Windows ではバイナリモードでファイルを開く時に :const:"
"`O_BINARY` を加える必要があります。"

#: ../../library/os.rst:783
msgid ""
"This function is intended for low-level I/O.  For normal usage, use the "
"built-in function :func:`open`, which returns a \"file object\" with :meth:"
"`~file.read` and :meth:`~file.write` methods (and many more).  To wrap a "
"file descriptor in a \"file object\", use :func:`fdopen`."
msgstr ""
"この関数は低レベルの I/O のためのものです。通常の利用では、 :meth:`~file."
"read` や :meth:`~file.write` ( やその他多くの ) メソッドを持つ「ファイルオブ"
"ジェクト」を返す、組み込み関数 :func:`open` を使ってください。ファイル記述子"
"を「ファイルオブジェクト」でラップするには :func:`fdopen` を使ってください。"

#: ../../library/os.rst:793
msgid ""
"Open a new pseudo-terminal pair. Return a pair of file descriptors "
"``(master, slave)`` for the pty and the tty, respectively. For a (slightly) "
"more portable approach, use the :mod:`pty` module."
msgstr ""
"新しい擬似端末のペアを開きます。ファイル記述子のペア ``(master, slave)`` を返"
"し、それぞれ pty および tty を表します。 ( 少しだけ ) より可搬性のあるアプ"
"ローチとしては、 :mod:`pty` モジュールを使用してください。"

#: ../../library/os.rst:797 ../../library/os.rst:1961
msgid "Availability: some flavors of Unix."
msgstr "利用できる環境 : 一部の Unix 互換環境。"

#: ../../library/os.rst:802
msgid ""
"Create a pipe.  Return a pair of file descriptors ``(r, w)`` usable for "
"reading and writing, respectively."
msgstr ""
"パイプを作成します。ファイル記述子のペア ``(r, w)`` を返し、それぞれ読み込"
"み、書き出し用に使うことができます。"

#: ../../library/os.rst:810
msgid ""
"Read at most *n* bytes from file descriptor *fd*. Return a string containing "
"the bytes read.  If the end of the file referred to by *fd* has been "
"reached, an empty string is returned."
msgstr ""
"ファイル記述子 *fd* から最大で *n* バイト読み出します。読み出されたバイト列の"
"入った文字列を返します。 *fd* が参照しているファイルの終端に達した場合、空の"
"文字列が返されます。"

#: ../../library/os.rst:818
msgid ""
"This function is intended for low-level I/O and must be applied to a file "
"descriptor as returned by :func:`os.open` or :func:`pipe`.  To read a \"file "
"object\" returned by the built-in function :func:`open` or by :func:`popen` "
"or :func:`fdopen`, or :data:`sys.stdin`, use its :meth:`~file.read` or :meth:"
"`~file.readline` methods."
msgstr ""
"この関数は低水準の I/O 向けのもので、 :func:`os.open` や :func:`pipe` が返す"
"ファイル記述子に対して使用されなければなりません。組み込み関数 :func:`open` "
"や :func:`popen` 、 :func:`fdopen` 、あるいは :data:`sys.stdin` が返す \" "
"ファイルオブジェクト \" を読み込むには、オブジェクトの :meth:`~file.read` "
"か :meth:`~file.readline` メソッドを使用してください。"

#: ../../library/os.rst:827
msgid ""
"Return the process group associated with the terminal given by *fd* (an open "
"file descriptor as returned by :func:`os.open`)."
msgstr ""
"*fd* (:func:`os.open` が返すオープンしたファイル記述子 ) で与えられる端末に関"
"連付けられたプロセスグループを返します。"

#: ../../library/os.rst:835
msgid ""
"Set the process group associated with the terminal given by *fd* (an open "
"file descriptor as returned by :func:`os.open`) to *pg*."
msgstr ""
"*fd* (:func:`os.open` が返すオープンしたファイル記述子 ) で与えられる端末に関"
"連付けられたプロセスグループを *pg* に設定します。"

#: ../../library/os.rst:843
msgid ""
"Return a string which specifies the terminal device associated with file "
"descriptor *fd*.  If *fd* is not associated with a terminal device, an "
"exception is raised."
msgstr ""
"ファイル記述子 *fd* に関連付けられている端末デバイスを特定する文字列を返しま"
"す。 *fd* が端末に関連付けられていない場合、例外が送出されます。"

#: ../../library/os.rst:852
msgid ""
"Write the string *str* to file descriptor *fd*. Return the number of bytes "
"actually written."
msgstr ""
"ファイル記述子 *fd* に文字列 *str* を書き込みます。実際に書き込まれたバイト数"
"を返します。"

#: ../../library/os.rst:859
msgid ""
"This function is intended for low-level I/O and must be applied to a file "
"descriptor as returned by :func:`os.open` or :func:`pipe`.  To write a "
"\"file object\" returned by the built-in function :func:`open` or by :func:"
"`popen` or :func:`fdopen`, or :data:`sys.stdout` or :data:`sys.stderr`, use "
"its :meth:`~file.write` method."
msgstr ""
"この関数は低水準の I/O 向けのもので、 :func:`os.open` や :func:`pipe` が返す"
"ファイル記述子に対して使用しなければなりません。組み込み関数 :func:`open` "
"や :func:`popen` 、 :func:`fdopen` 、あるいは :data:`sys.stdout` や :data:"
"`sys.stderr` が返す \" ファイルオブジェクト \" に書き込むには、オブジェクト"
"の :meth:`~file.write` メソッドを使用してください。"

#: ../../library/os.rst:869
msgid "``open()`` flag constants"
msgstr "``open()`` フラグ定数"

#: ../../library/os.rst:871
msgid ""
"The following constants are options for the *flags* parameter to the :func:"
"`~os.open` function.  They can be combined using the bitwise OR operator ``|"
"``.  Some of them are not available on all platforms.  For descriptions of "
"their availability and use, consult the :manpage:`open(2)` manual page on "
"Unix or `the MSDN <http://msdn.microsoft.com/en-us/library/z0kc8e3z.aspx>`_ "
"on Windows."
msgstr ""
"以下の定数は :func:`~os.open` 関数の *flags* 引数に利用します。これらの定数"
"は、ビット単位に OR 演算子 ``|`` で組み合わせることができます。一部、すべての"
"プラットフォームでは使用できない定数があります。利用可能かどうかや使い方につ"
"いては、 Unix では :manpage:`open(2)` 、 Windows では `MSDN <http://msdn."
"microsoft.com/en-us/library/z0kc8e3z.aspx>`_ を参照してください。"

#: ../../library/os.rst:886
msgid "The above constants are available on Unix and Windows."
msgstr "上記の定数は Unix および Windows で利用可能です。"

#: ../../library/os.rst:896
msgid "The above constants are only available on Unix."
msgstr "上記の定数は Unix でのみ利用可能です。"

#: ../../library/os.rst:907
msgid "The above constants are only available on Windows."
msgstr "上記の定数は Windows でのみ利用可能です。"

#: ../../library/os.rst:918
msgid ""
"The above constants are extensions and not present if they are not defined "
"by the C library."
msgstr ""
"上記の定数は拡張仕様であり、Cライブラリで定義されていない場合は利用できませ"
"ん。"

#: ../../library/os.rst:925
msgid "Files and Directories"
msgstr "ファイルとディレクトリ"

#: ../../library/os.rst:929
msgid ""
"Use the real uid/gid to test for access to *path*.  Note that most "
"operations will use the effective uid/gid, therefore this routine can be "
"used in a suid/sgid environment to test if the invoking user has the "
"specified access to *path*.  *mode* should be :const:`F_OK` to test the "
"existence of *path*, or it can be the inclusive OR of one or more of :const:"
"`R_OK`, :const:`W_OK`, and :const:`X_OK` to test permissions.  Return :const:"
"`True` if access is allowed, :const:`False` if not. See the Unix man page :"
"manpage:`access(2)` for more information."
msgstr ""
"実 uid/gid を使って *path* に対するアクセスが可能か調べます。ほとんどのオペ"
"レーティングシステムは実効 uid/gid を使うため、このルーチンは suid/sgid 環境"
"において、プログラムを起動したユーザーが *path* に対するアクセス権をもってい"
"るかを調べるために使われます。 *path* が存在するかどうかを調べるには *mode* "
"を :const:`F_OK` にします。ファイルアクセス権限 ( パーミッション ) を調べるに"
"は、 :const:`R_OK`, :const:`W_OK`, :const:`X_OK` から一つまたはそれ以上のフラ"
"グを論理和指定でとることもできます。アクセスが許可されている場合 :const:"
"`True` を、そうでない場合 :const:`False` を返します。詳細は :manpage:"
"`access(2)` の Unix マニュアルページを参照してください。"

#: ../../library/os.rst:942
msgid ""
"Using :func:`access` to check if a user is authorized to e.g. open a file "
"before actually doing so using :func:`open` creates a security hole, because "
"the user might exploit the short time interval between checking and opening "
"the file to manipulate it. It's preferable to use :term:`EAFP` techniques. "
"For example::"
msgstr ""
"ユーザーが、例えばファイルを開く権限を持っているかどうかを調べるために実際"
"に :func:`open` を行う前に :func:`access` を使用することはセキュリティホール"
"の原因になります。なぜなら、調べた時点とオープンした時点との時間差を利用して"
"そのユーザーがファイルを不当に操作してしまうかもしれないからです。その場合"
"は :term:`EAFP` テクニックを利用するのが望ましいやり方です。例えば ::"

#: ../../library/os.rst:953
msgid "is better written as::"
msgstr "このコードは次のように書いたほうが良いです ::"

#: ../../library/os.rst:968
msgid ""
"I/O operations may fail even when :func:`access` indicates that they would "
"succeed, particularly for operations on network filesystems which may have "
"permissions semantics beyond the usual POSIX permission-bit model."
msgstr ""
"I/O 操作は :func:`access` が成功を示した時でも失敗することがあります。特に"
"ネットワークファイルシステムが通常の POSIX のパーミッションビットモデルをはみ"
"出すアクセス権限操作を備える場合にはそのようなことが起こりえます。"

#: ../../library/os.rst:975
msgid ""
"Value to pass as the *mode* parameter of :func:`access` to test the "
"existence of *path*."
msgstr ""
":func:`access` の *mode* に渡すための値で、 *path* が存在するかどうかを調べま"
"す。"

#: ../../library/os.rst:981
msgid ""
"Value to include in the *mode* parameter of :func:`access` to test the "
"readability of *path*."
msgstr ""
":func:`access` の *mode* に渡すための値で、 *path* が読み出し可能かどうかを調"
"べます。"

#: ../../library/os.rst:987
msgid ""
"Value to include in the *mode* parameter of :func:`access` to test the "
"writability of *path*."
msgstr ""
":func:`access` の *mode* に渡すための値で、 *path* が書き込み可能かどうかを調"
"べます。"

#: ../../library/os.rst:993
msgid ""
"Value to include in the *mode* parameter of :func:`access` to determine if "
"*path* can be executed."
msgstr ""
":func:`access` の *mode* に渡すための値で、 *path* が実行可能かどうかを調べま"
"す。"

#: ../../library/os.rst:1001
msgid "Change the current working directory to *path*."
msgstr "現在の作業ディレクトリを *path* に設定します。"

#: ../../library/os.rst:1008
msgid ""
"Change the current working directory to the directory represented by the "
"file descriptor *fd*.  The descriptor must refer to an opened directory, not "
"an open file."
msgstr ""
"現在の作業ディレクトリをファイル記述子 *fd* が表すディレクトリに変更します。"
"記述子はオープンしているファイルではなく、オープンしたディレクトリを参照して"
"いなければなりません。"

#: ../../library/os.rst:1019
msgid "Return a string representing the current working directory."
msgstr "現在の作業ディレクトリを表す文字列を返します。"

#: ../../library/os.rst:1026
msgid "Return a Unicode object representing the current working directory."
msgstr "現在の作業ディレクトリを表現するユニコードオブジェクトを返します。"

#: ../../library/os.rst:1035
msgid ""
"Set the flags of *path* to the numeric *flags*. *flags* may take a "
"combination (bitwise OR) of the following values (as defined in the :mod:"
"`stat` module):"
msgstr ""
"*path* のフラグを *flags* に変更します。 *flags* は、以下の値 (:mod:`stat` モ"
"ジュールで定義されているもの ) をビット単位の論理和で組み合わせることができま"
"す :"

#: ../../library/os.rst:1038
msgid ":data:`stat.UF_NODUMP`"
msgstr ":data:`stat.UF_NODUMP`"

#: ../../library/os.rst:1039
msgid ":data:`stat.UF_IMMUTABLE`"
msgstr ":data:`stat.UF_IMMUTABLE`"

#: ../../library/os.rst:1040
msgid ":data:`stat.UF_APPEND`"
msgstr ":data:`stat.UF_APPEND`"

#: ../../library/os.rst:1041
msgid ":data:`stat.UF_OPAQUE`"
msgstr ":data:`stat.UF_OPAQUE`"

#: ../../library/os.rst:1042
msgid ":data:`stat.UF_NOUNLINK`"
msgstr ":data:`stat.UF_NOUNLINK`"

#: ../../library/os.rst:1043
msgid ":data:`stat.UF_COMPRESSED`"
msgstr ":data:`stat.UF_COMPRESSED`"

#: ../../library/os.rst:1044
msgid ":data:`stat.UF_HIDDEN`"
msgstr ":data:`stat.UF_HIDDEN`"

#: ../../library/os.rst:1045
msgid ":data:`stat.SF_ARCHIVED`"
msgstr ":data:`stat.SF_ARCHIVED`"

#: ../../library/os.rst:1046
msgid ":data:`stat.SF_IMMUTABLE`"
msgstr ":data:`stat.SF_IMMUTABLE`"

#: ../../library/os.rst:1047
msgid ":data:`stat.SF_APPEND`"
msgstr ":data:`stat.SF_APPEND`"

#: ../../library/os.rst:1048
msgid ":data:`stat.SF_NOUNLINK`"
msgstr ":data:`stat.SF_NOUNLINK`"

#: ../../library/os.rst:1049
msgid ":data:`stat.SF_SNAPSHOT`"
msgstr ":data:`stat.SF_SNAPSHOT`"

#: ../../library/os.rst:1058
msgid ""
"Change the root directory of the current process to *path*. Availability: "
"Unix."
msgstr ""
"現在のプロセスに対してルートディレクトリを *path* に変更します。 利用出来る環"
"境: Unix。"

#: ../../library/os.rst:1066
msgid ""
"Change the mode of *path* to the numeric *mode*. *mode* may take one of the "
"following values (as defined in the :mod:`stat` module) or bitwise ORed "
"combinations of them:"
msgstr ""
"*path* のモードを数値 *mode* に変更します。 *mode* は、 (:mod:`stat` モジュー"
"ルで定義されている ) 以下の値のいずれかまたはビット単位の論理和で組み合わせた"
"値を取り得ます :"

#: ../../library/os.rst:1071
msgid ":data:`stat.S_ISUID`"
msgstr ":data:`stat.S_ISUID`"

#: ../../library/os.rst:1072
msgid ":data:`stat.S_ISGID`"
msgstr ":data:`stat.S_ISGID`"

#: ../../library/os.rst:1073
msgid ":data:`stat.S_ENFMT`"
msgstr ":data:`stat.S_ENFMT`"

#: ../../library/os.rst:1074
msgid ":data:`stat.S_ISVTX`"
msgstr ":data:`stat.S_ISVTX`"

#: ../../library/os.rst:1075
msgid ":data:`stat.S_IREAD`"
msgstr ":data:`stat.S_IREAD`"

#: ../../library/os.rst:1076
msgid ":data:`stat.S_IWRITE`"
msgstr ":data:`stat.S_IWRITE`"

#: ../../library/os.rst:1077
msgid ":data:`stat.S_IEXEC`"
msgstr ":data:`stat.S_IEXEC`"

#: ../../library/os.rst:1078
msgid ":data:`stat.S_IRWXU`"
msgstr ":data:`stat.S_IRWXU`"

#: ../../library/os.rst:1079
msgid ":data:`stat.S_IRUSR`"
msgstr ":data:`stat.S_IRUSR`"

#: ../../library/os.rst:1080
msgid ":data:`stat.S_IWUSR`"
msgstr ":data:`stat.S_IWUSR`"

#: ../../library/os.rst:1081
msgid ":data:`stat.S_IXUSR`"
msgstr ":data:`stat.S_IXUSR`"

#: ../../library/os.rst:1082
msgid ":data:`stat.S_IRWXG`"
msgstr ":data:`stat.S_IRWXG`"

#: ../../library/os.rst:1083
msgid ":data:`stat.S_IRGRP`"
msgstr ":data:`stat.S_IRGRP`"

#: ../../library/os.rst:1084
msgid ":data:`stat.S_IWGRP`"
msgstr ":data:`stat.S_IWGRP`"

#: ../../library/os.rst:1085
msgid ":data:`stat.S_IXGRP`"
msgstr ":data:`stat.S_IXGRP`"

#: ../../library/os.rst:1086
msgid ":data:`stat.S_IRWXO`"
msgstr ":data:`stat.S_IRWXO`"

#: ../../library/os.rst:1087
msgid ":data:`stat.S_IROTH`"
msgstr ":data:`stat.S_IROTH`"

#: ../../library/os.rst:1088
msgid ":data:`stat.S_IWOTH`"
msgstr ":data:`stat.S_IWOTH`"

#: ../../library/os.rst:1089
msgid ":data:`stat.S_IXOTH`"
msgstr ":data:`stat.S_IXOTH`"

#: ../../library/os.rst:1095
msgid ""
"Although Windows supports :func:`chmod`, you can only  set the file's read-"
"only flag with it (via the ``stat.S_IWRITE``  and ``stat.S_IREAD`` constants "
"or a corresponding integer value).  All other bits are ignored."
msgstr ""
"Windows でも :func:`chmod` はサポートされていますが、ファイルの読み込み専用フ"
"ラグを ( 定数 ``S_IWRITE`` と ``S_IREAD``, または対応する整数値を通して ) 設"
"定できるだけです。他のビットは全て無視されます。"

#: ../../library/os.rst:1103
msgid ""
"Change the owner and group id of *path* to the numeric *uid* and *gid*. To "
"leave one of the ids unchanged, set it to -1."
msgstr ""
"*path* の所有者 (owner) id とグループ id を、数値 *uid* および *gid* に変更し"
"ます。いずれかの id を変更せずにおくには、その値として -1 をセットします。"

#: ../../library/os.rst:1111
msgid ""
"Set the flags of *path* to the numeric *flags*, like :func:`chflags`, but do "
"not follow symbolic links."
msgstr ""
"*path* のフラグを数値 *flags* に設定します。 :func:`chflags` に似ていますが、"
"シンボリックリンクをたどりません。"

#: ../../library/os.rst:1121
msgid ""
"Change the mode of *path* to the numeric *mode*. If path is a symlink, this "
"affects the symlink rather than the target. See the docs for :func:`chmod` "
"for possible values of *mode*."
msgstr ""
"*path* のモードを数値 *mode* に変更します。パスがシンボリックリンクの場合はそ"
"のリンク先ではなくシンボリックリンクそのものに対して作用します。*mode* に指定"
"できる値については :func:`chmod` のドキュメントを参照してください。"

#: ../../library/os.rst:1132
msgid ""
"Change the owner and group id of *path* to the numeric *uid* and *gid*. This "
"function will not follow symbolic links."
msgstr ""
"*path* の所有者 (owner) id とグループ id を、数値 *uid* および *gid* に変更し"
"ます。この関数はシンボリックリンクをたどりません。"

#: ../../library/os.rst:1142
msgid "Create a hard link pointing to *source* named *link_name*."
msgstr "*source* を指しているハードリンク *link_name* を作成します。"

#: ../../library/os.rst:1149
msgid ""
"Return a list containing the names of the entries in the directory given by "
"*path*.  The list is in arbitrary order.  It does not include the special "
"entries ``'.'`` and ``'..'`` even if they are present in the directory."
msgstr ""
"*path* で指定されたディレクトリ内のエントリ名が入ったリストを返します。リスト"
"内の順番は不定です。特殊エントリ ``'.'`` および ``'..'`` は、それらがディレク"
"トリに入っていてもリストには含められません。"

#: ../../library/os.rst:1156
msgid ""
"On Windows NT/2k/XP and Unix, if *path* is a Unicode object, the result will "
"be a list of Unicode objects. Undecodable filenames will still be returned "
"as string objects."
msgstr ""
"Windows NT/2k/XP と Unix では、 *path* が Unicode オブジェクトの場合、 "
"Unicode オブジェクトのリストが返されます。デコード不可能なファイル名は依然と"
"して string オブジェクトになります。"

#: ../../library/os.rst:1164
msgid ""
"Perform the equivalent of an :c:func:`lstat` system call on the given path. "
"Similar to :func:`~os.stat`, but does not follow symbolic links.  On "
"platforms that do not support symbolic links, this is an alias for :func:"
"`~os.stat`."
msgstr ""
"与えられたパスに対して :c:func:`lstat` システムコールと同じ処理を行います。:"
"func:`~os.stat` と似ていますが、シンボリックリンクをたどりません。シンボリッ"
"クリンクをサポートしていないプラットフォームでは :func:`~os.stat` の別名で"
"す。"

#: ../../library/os.rst:1172
msgid ""
"Create a FIFO (a named pipe) named *path* with numeric mode *mode*.  The "
"default *mode* is ``0666`` (octal).  The current umask value is first masked "
"out from the mode."
msgstr ""
"数値で指定されたモード *mode* を持つ FIFO ( 名前付きパイプ ) を *path* に作成"
"します。 *mode* の標準の値は ``0666`` (8 進 ) です。現在の umask 値が前もっ"
"て *mode* からマスクされます。"

#: ../../library/os.rst:1178
msgid ""
"FIFOs are pipes that can be accessed like regular files.  FIFOs exist until "
"they are deleted (for example with :func:`os.unlink`). Generally, FIFOs are "
"used as rendezvous between \"client\" and \"server\" type processes: the "
"server opens the FIFO for reading, and the client opens it for writing.  "
"Note that :func:`mkfifo` doesn't open the FIFO --- it just creates the "
"rendezvous point."
msgstr ""
"FIFO は通常のファイルのようにアクセスできるパイプです。 FIFO は ( 例えば :"
"func:`os.unlink` を使って ) 削除されるまで存在しつづけます。一般的に、 FIFO "
"は \" クライアント \" と \" サーバー \" 形式のプロセス間でランデブーを行うた"
"めに使われます : この時、サーバーは FIFO を読み込み用に、クライアントは書き出"
"し用にオープンします。 :func:`mkfifo` は FIFO をオープンしない --- 単にランデ"
"ブーポイントを作成するだけ --- なので注意してください。"

#: ../../library/os.rst:1187
msgid ""
"Create a filesystem node (file, device special file or named pipe) named "
"*filename*. *mode* specifies both the permissions to use and the type of "
"node to be created, being combined (bitwise OR) with one of ``stat."
"S_IFREG``, ``stat.S_IFCHR``, ``stat.S_IFBLK``, and ``stat.S_IFIFO`` (those "
"constants are available in :mod:`stat`). For ``stat.S_IFCHR`` and ``stat."
"S_IFBLK``, *device* defines the newly created device special file (probably "
"using :func:`os.makedev`), otherwise it is ignored."
msgstr ""
"*filename* という名前で、ファイルシステム・ノード ( ファイル、デバイス特殊"
"ファイル、または、名前つきパイプ ) を作ります。 *mode* は、作ろうとするノード"
"の使用権限とタイプを、 ``stat.S_IFREG``, ``stat.S_IFCHR``, ``stat.S_IFBLK``, "
"``stat.S_IFIFO`` ( これらの定数は :mod:`stat` で使用可能 ) のいずれかと（ビッ"
"ト OR で）組み合わせて指定します。 ``S_IFCHR`` と ``S_IFBLK`` を指定すると、 "
"*device* は新しく作られたデバイス特殊ファイルを ( おそらく :func:`os."
"makedev` を使って ) 定義し、指定しなかった場合には無視します。"

#: ../../library/os.rst:1201
msgid ""
"Extract the device major number from a raw device number (usually the :attr:"
"`st_dev` or :attr:`st_rdev` field from :c:type:`stat`)."
msgstr ""
"RAW デバイス番号から、デバイスのメジャー番号を取り出します ( 通常 :c:type:"
"`stat` の :attr:`st_dev` か :attr:`st_rdev` フィールドです ) 。"

#: ../../library/os.rst:1209
msgid ""
"Extract the device minor number from a raw device number (usually the :attr:"
"`st_dev` or :attr:`st_rdev` field from :c:type:`stat`)."
msgstr ""
"RAW デバイス番号から、デバイスのマイナー番号を取り出します ( 通常 :c:type:"
"`stat` の :attr:`st_dev` か :attr:`st_rdev` フィールドです ) 。"

#: ../../library/os.rst:1217
msgid "Compose a raw device number from the major and minor device numbers."
msgstr ""
"メジャーおよびマイナーデバイス番号から、新しく RAW デバイス番号を作成します。"

#: ../../library/os.rst:1224
msgid ""
"Create a directory named *path* with numeric mode *mode*. The default *mode* "
"is ``0777`` (octal).  If the directory already exists, :exc:`OSError` is "
"raised."
msgstr ""
"数値で指定されたモード *mode* をもつディレクトリ *path* を作成します。\n"
"*mode* の標準の値は ``0777`` (8 進) です。\n"
"指定されたディレクトリがすでに存在する場合は :exc:`OSError` 例外が送出されま"
"す。"

#: ../../library/os.rst:1230
msgid ""
"On some systems, *mode* is ignored.  Where it is used, the current umask "
"value is first masked out.  If bits other than the last 9 (i.e. the last 3 "
"digits of the octal representation of the *mode*) are set, their meaning is "
"platform-dependent.  On some platforms, they are ignored and you should "
"call :func:`chmod` explicitly to set them."
msgstr ""
"いくつかのシステムにおいては *mode* は無視されます。それが使われる時には、最"
"初に現在の umask 値でマスクされます。もし最後の 9 ビット (つまり *mode* の8進"
"法表記の最後の3桁) を除いたビットが設定されていたら、それらの意味はプラット"
"フォームに依存します。いくつかのプラットフォームではそれらは無視され、それら"
"を設定するためには明示的に :func:`chmod` を呼ぶ必要があるでしょう。"

#: ../../library/os.rst:1236
msgid ""
"It is also possible to create temporary directories; see the :mod:`tempfile` "
"module's :func:`tempfile.mkdtemp` function."
msgstr ""
"一時ディレクトリを作成することもできます : :mod:`tempfile` モジュールの :"
"func:`tempfile.mkdtemp` 関数を参照してください。"

#: ../../library/os.rst:1248
msgid ""
"Recursive directory creation function.  Like :func:`mkdir`, but makes all "
"intermediate-level directories needed to contain the leaf directory.  Raises "
"an :exc:`error` exception if the leaf directory already exists or cannot be "
"created.  The default *mode* is ``0777`` (octal)."
msgstr ""
"再帰的なディレクトリ作成関数です。 :func:`mkdir` に似ていますが、末端 (leaf) "
"となるディレクトリを作成するために必要な中間の全てのディレクトリを作成しま"
"す。末端ディレクトリがすでに存在する場合や、作成ができなかった場合には :exc:"
"`error` 例外を送出します。 *mode* の標準の値は ``0777`` (8 進) です。"

#: ../../library/os.rst:1253
msgid ""
"The *mode* parameter is passed to :func:`mkdir`; see :ref:`the mkdir() "
"description <mkdir_modebits>` for how it is interpreted."
msgstr ""
"*mode* パラメータは :func:`mkdir` に渡されます; それがどのように解釈されるか"
"は :ref:`mkdir() の説明 <mkdir_modebits>` を見てください。"

#: ../../library/os.rst:1258
msgid ""
":func:`makedirs` will become confused if the path elements to create "
"include :data:`os.pardir`."
msgstr ""
":func:`makedirs` は作り出すパス要素が :data:`os.pardir` を含むと混乱すること"
"になります。"

#: ../../library/os.rst:1263
msgid "This function now handles UNC paths correctly."
msgstr "この関数は UNC パスを正しく扱えるようになりました ."

#: ../../library/os.rst:1269
msgid ""
"Return system configuration information relevant to a named file. *name* "
"specifies the configuration value to retrieve; it may be a string which is "
"the name of a defined system value; these names are specified in a number of "
"standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define "
"additional names as well.  The names known to the host operating system are "
"given in the ``pathconf_names`` dictionary.  For configuration variables not "
"included in that mapping, passing an integer for *name* is also accepted."
msgstr ""
"名前付きファイルに関連するシステム設定情報を返します。 *name* には取得したい"
"設定名を指定します ; これは定義済みのシステム値名の文字列で、多くの標準 "
"(POSIX.1 、 Unix 95 、 Unix 98 その他 ) で定義されています。プラットフォーム"
"によっては別の名前も定義しています。ホストオペレーティングシステムの関知する"
"名前は ``pathconf_names`` 辞書で与えられています。このマップ型オブジェクトに"
"入っていない設定変数については、 *name* に整数を渡してもかまいません。"

#: ../../library/os.rst:1287
msgid ""
"Dictionary mapping names accepted by :func:`pathconf` and :func:`fpathconf` "
"to the integer values defined for those names by the host operating system.  "
"This can be used to determine the set of names known to the system. "
"Availability: Unix."
msgstr ""
":func:`pathconf` および :func:`fpathconf` が受理するシステム設定名を、ホスト"
"オペレーティングシステムで定義されている整数値に対応付けている辞書です。この"
"辞書はシステムでどの設定名が定義されているかを決定するために利用できます。利"
"用出来る環境 : Unix 。"

#: ../../library/os.rst:1295
msgid ""
"Return a string representing the path to which the symbolic link points.  "
"The result may be either an absolute or relative pathname; if it is "
"relative, it may be converted to an absolute pathname using ``os.path."
"join(os.path.dirname(path), result)``."
msgstr ""
"シンボリックリンクが指しているパスを表す文字列を返します。返される値は絶対パ"
"スにも、相対パスにもなり得ます ; 相対パスの場合、 ``os.path.join(os.path."
"dirname(path), result)`` を使って絶対パスに変換することができます。"

#: ../../library/os.rst:1300
msgid ""
"If the *path* is a Unicode object the result will also be a Unicode object."
msgstr ""
"*path* が unicode オブジェクトだった場合、戻り値も unicode オブジェクトになり"
"ます。"

#: ../../library/os.rst:1308
msgid ""
"Remove (delete) the file *path*.  If *path* is a directory, :exc:`OSError` "
"is raised; see :func:`rmdir` below to remove a directory.  This is identical "
"to the :func:`unlink` function documented below.  On Windows, attempting to "
"remove a file that is in use causes an exception to be raised; on Unix, the "
"directory entry is removed but the storage allocated to the file is not made "
"available until the original file is no longer in use."
msgstr ""
"ファイル *path* を削除 ( 消去 ) します。 *path* がディレクトリの場合、 :exc:"
"`OSError` が送出されます ; ディレクトリの削除については :func:`rmdir` を参照"
"してください。この関数は下で述べられている :func:`unlink` 関数と同一です。 "
"Windows では、使用中のファイルを削除しようと試みると例外を送出します ; Unix "
"では、ディレクトリエントリは削除されますが、記憶装置上にアロケーションされた"
"ファイル領域は元のファイルが使われなくなるまで残されます。"

#: ../../library/os.rst:1322
msgid ""
"Remove directories recursively.  Works like :func:`rmdir` except that, if "
"the leaf directory is successfully removed, :func:`removedirs`  tries to "
"successively remove every parent directory mentioned in  *path* until an "
"error is raised (which is ignored, because it generally means that a parent "
"directory is not empty). For example, ``os.removedirs('foo/bar/baz')`` will "
"first remove the directory ``'foo/bar/baz'``, and then remove ``'foo/bar'`` "
"and ``'foo'`` if they are empty. Raises :exc:`OSError` if the leaf directory "
"could not be successfully removed."
msgstr ""
"再帰的なディレクトリ削除関数です。 :func:`rmdir` と同じように動作しますが、末"
"端ディレクトリがうまく削除できるかぎり、 :func:`removedirs` は *path* に現れ"
"る親ディレクトリをエラーが送出されるまで ( このエラーは通常、指定したディレク"
"トリの親ディレクトリが空でないことを意味するだけなので無視されます ) 順に削除"
"することを試みます。例えば、 ``os.removedirs('foo/bar/baz')`` では最初にディ"
"レクトリ ``'foo/bar/baz'`` を削除し、次に ``'foo/bar'`` さらに ``'foo'`` をそ"
"れらが空ならば削除します。末端のディレクトリが削除できなかった場合には :exc:"
"`OSError` が送出されます。"

#: ../../library/os.rst:1336
msgid ""
"Rename the file or directory *src* to *dst*.  If *dst* is a directory, :exc:"
"`OSError` will be raised.  On Unix, if *dst* exists and is a file, it will "
"be replaced silently if the user has permission.  The operation may fail on "
"some Unix flavors if *src* and *dst* are on different filesystems.  If "
"successful, the renaming will be an atomic operation (this is a POSIX "
"requirement).  On Windows, if *dst* already exists, :exc:`OSError` will be "
"raised even if it is a file; there may be no way to implement an atomic "
"rename when *dst* names an existing file."
msgstr ""
"ファイルまたはディレクトリ *src* を *dst* に名前変更します。 *dst* がディレク"
"トリの場合、 :exc:`OSError` が送出されます。 Unix では、 *dst* が存在し、かつ"
"ファイルの場合、ユーザの権限があるかぎり暗黙のうちに元のファイルが置き換えら"
"れます。この操作はいくつかの Unix 系システムにおいて、 *src* と *dst* が異な"
"るファイルシステム上にあると失敗することがあります。ファイル名の変更が成功す"
"る場合、この操作は原子的 (atomic) 操作となります ( これは POSIX 要求仕様で"
"す ) 。 Windows では、 *dst* が既に存在する場合には、たとえファイルの場合で"
"も :exc:`OSError` が送出されます ; これは *dst* が既に存在するファイル名の場"
"合、名前変更の原子的操作を実装する手段がないからです。"

#: ../../library/os.rst:1350
msgid ""
"Recursive directory or file renaming function. Works like :func:`rename`, "
"except creation of any intermediate directories needed to make the new "
"pathname good is attempted first. After the rename, directories "
"corresponding to rightmost path segments of the old name will be pruned away "
"using :func:`removedirs`."
msgstr ""
"再帰的にディレクトリやファイル名を変更する関数です。 :func:`rename` のように"
"動作しますが、新たなパス名を持つファイルを配置するために必要な途中のディレク"
"トリ構造をまず作成しようと試みます。名前変更の後、元のファイル名のパス要素"
"は :func:`removedirs` を使って右側から順に削除されます。"

#: ../../library/os.rst:1359
msgid ""
"This function can fail with the new directory structure made if you lack "
"permissions needed to remove the leaf directory or file."
msgstr ""
"この関数はコピー元の末端のディレクトリまたはファイルを削除する権限がない場合"
"には失敗します。"

#: ../../library/os.rst:1365
msgid ""
"Remove (delete) the directory *path*.  Only works when the directory is "
"empty, otherwise, :exc:`OSError` is raised.  In order to remove whole "
"directory trees, :func:`shutil.rmtree` can be used."
msgstr ""
"ディレクトリ *path* を削除します。ディレクトリが空の場合にだけ正常に動作しま"
"す。そうでなければ :exc:`OSError` が送出されます。ディレクトリツリー全体を削"
"除するには :func:`shutil.rmtree` を使います。"

#: ../../library/os.rst:1374
msgid ""
"Perform the equivalent of a :c:func:`stat` system call on the given path. "
"(This function follows symlinks; to stat a symlink use :func:`lstat`.)"
msgstr ""
"与えられた *path* に対して :c:func:`stat` システムコール相当の処理を実行しま"
"す。 ( この関数はシンボリックリンクをたどります。シンボリックリンクに対して "
"stat したい場合は :func:`lstat` を利用してください )"

#: ../../library/os.rst:1377
msgid ""
"The return value is an object whose attributes correspond to the members of "
"the :c:type:`stat` structure, namely:"
msgstr ""
"返り値はオブジェクトになり、その属性はおおむね :c:type:`stat` 構造体のメン"
"バーに対応します:"

#: ../../library/os.rst:1380
msgid ":attr:`st_mode` - protection bits,"
msgstr ":attr:`st_mode` - 保護ビット"

#: ../../library/os.rst:1381
msgid ":attr:`st_ino` - inode number,"
msgstr ":attr:`st_ino` - inode 番号"

#: ../../library/os.rst:1382
msgid ":attr:`st_dev` - device,"
msgstr ":attr:`st_dev` - デバイス"

#: ../../library/os.rst:1383
msgid ":attr:`st_nlink` - number of hard links,"
msgstr ":attr:`st_nlink` - ハードリンクの数"

#: ../../library/os.rst:1384
msgid ":attr:`st_uid` - user id of owner,"
msgstr ":attr:`st_uid` - 所有者のユーザー id"

#: ../../library/os.rst:1385
msgid ":attr:`st_gid` - group id of owner,"
msgstr ":attr:`st_gid` - 所有者のグループ id"

#: ../../library/os.rst:1386
msgid ":attr:`st_size` - size of file, in bytes,"
msgstr ":attr:`st_size` - ファイルのサイズ ( 単位 : バイト )"

#: ../../library/os.rst:1387
msgid ":attr:`st_atime` - time of most recent access,"
msgstr ":attr:`st_atime` - 最近にアクセスされた時間 ,"

#: ../../library/os.rst:1388
msgid ":attr:`st_mtime` - time of most recent content modification,"
msgstr ":attr:`st_mtime` - 最近に内容を変更した時間 ,"

#: ../../library/os.rst:1389
msgid ""
":attr:`st_ctime` - platform dependent; time of most recent metadata change "
"on Unix, or the time of creation on Windows)"
msgstr ""
":attr:`st_ctime` - プラットフォーム依存 ; Unix では最近のメタデータ変更時"
"間、 Windows ではファイルが生成された時間"

#: ../../library/os.rst:1392
msgid ""
"If :func:`stat_float_times` returns ``True``, the time values are floats, "
"measuring seconds. Fractions of a second may be reported if the system "
"supports that. See :func:`stat_float_times` for further discussion."
msgstr ""
"もし :func:`stat_float_times` が ``True`` を返す場合、時間値は浮動小数点で秒"
"を計ります。ファイルシステムがサポートしていれば、秒の小数点以下の桁も含めて"
"返されます。詳細な説明は :func:`stat_float_times` を参照してください。"

#: ../../library/os.rst:1397
msgid ""
"On some Unix systems (such as Linux), the following attributes may also be "
"available:"
msgstr ""
"(Linux のような ) 一部の Unix システムでは、以下の属性が利用できる場合があり"
"ます :"

#: ../../library/os.rst:1400
msgid ":attr:`st_blocks` - number of 512-byte blocks allocated for file"
msgstr ""
":attr:`st_blocks` - ファイルの大きさを 512 バイトのブロックサイズ単位で示す"

#: ../../library/os.rst:1401
msgid ":attr:`st_blksize` - filesystem blocksize for efficient file system I/O"
msgstr ""
":attr:`st_blksize` - 効率的にファイルシステム I/O ができる好ましいファイルシ"
"ステムのブロックサイズ "

#: ../../library/os.rst:1402
msgid ":attr:`st_rdev` - type of device if an inode device"
msgstr ":attr:`st_rdev` - i ノードデバイスの場合、デバイスのタイプ"

#: ../../library/os.rst:1403
msgid ":attr:`st_flags` - user defined flags for file"
msgstr ":attr:`st_flags` - ファイルに対するユーザー定義のフラグ"

#: ../../library/os.rst:1405
msgid ""
"On other Unix systems (such as FreeBSD), the following attributes may be "
"available (but may be only filled out if root tries to use them):"
msgstr ""
"他の (FreeBSD のような ) Unix システムでは、以下の属性が利用できる場合があり"
"ます ( ただし root ユーザ以外が使うと値が入っていない場合があります ):"

#: ../../library/os.rst:1408
msgid ":attr:`st_gen` - file generation number"
msgstr ":attr:`st_gen` - ファイル生成番号"

#: ../../library/os.rst:1409
msgid ":attr:`st_birthtime` - time of file creation"
msgstr ":attr:`st_birthtime` - ファイル作成時刻"

#: ../../library/os.rst:1411
msgid "On RISCOS systems, the following attributes are also available:"
msgstr "RISCOS システムでは、以下の属性も利用できます :"

#: ../../library/os.rst:1413
msgid ":attr:`st_ftype` (file type)"
msgstr ":attr:`st_ftype` (file type),"

#: ../../library/os.rst:1414
msgid ":attr:`st_attrs` (attributes)"
msgstr ":attr:`st_attrs` (attributes),"

#: ../../library/os.rst:1415
msgid ":attr:`st_obtype` (object type)."
msgstr ":attr:`st_obtype` (object type)"

#: ../../library/os.rst:1419
msgid ""
"The exact meaning and resolution of the :attr:`st_atime`, :attr:`st_mtime`, "
"and :attr:`st_ctime` attributes depend on the operating system and the file "
"system. For example, on Windows systems using the FAT or FAT32 file "
"systems, :attr:`st_mtime` has 2-second resolution, and :attr:`st_atime` has "
"only 1-day resolution.  See your operating system documentation for details."
msgstr ""
":attr:`st_atime` 、 :attr:`st_mtime` 、および :attr:`st_ctime` 属性の厳密な意"
"味や精度はオペレーティングシステムやファイルシステムによって変わります。例え"
"ば、 FAT や FAT32 ファイルシステムを使用している Windows システムでは、 :"
"attr:`st_mtime` の精度は 2 秒であり、 :attr:`st_atime` の精度は 1 日に過ぎま"
"せん。詳しくはお使いのオペレーティングシステムのドキュメントを参照してくださ"
"い。"

#: ../../library/os.rst:1426
msgid ""
"For backward compatibility, the return value of :func:`~os.stat` is also "
"accessible as a tuple of at least 10 integers giving the most important (and "
"portable) members of the :c:type:`stat` structure, in the order :attr:"
"`st_mode`, :attr:`st_ino`, :attr:`st_dev`, :attr:`st_nlink`, :attr:"
"`st_uid`, :attr:`st_gid`, :attr:`st_size`, :attr:`st_atime`, :attr:"
"`st_mtime`, :attr:`st_ctime`. More items may be added at the end by some "
"implementations."
msgstr ""
"後方互換性のため、 :func:`~os.stat` の返り値は :c:type:`stat` 構造体の最も重"
"要な ( そして移植性の高い ) メンバーを表すタプルとしてもアクセス可能です。こ"
"れは少なくとも 10 個の整数からなり、 :attr:`st_mode` 、 :attr:`st_ino` 、 :"
"attr:`st_dev` 、 :attr:`st_nlink` 、 :attr:`st_uid` 、 :attr:`st_gid` 、 :"
"attr:`st_size` 、 :attr:`st_atime` 、 :attr:`st_mtime` 、 :attr:`st_ctime` の"
"順になります。実装によってはそれ以上のアイテムが末尾に追加されます。"

#: ../../library/os.rst:1435
msgid ""
"The standard module :mod:`stat` defines functions and constants that are "
"useful for extracting information from a :c:type:`stat` structure. (On "
"Windows, some items are filled with dummy values.)"
msgstr ""
"標準モジュール :mod:`stat` は :c:type:`stat` 構造体からの情報の取り出しに役立"
"つ関数と定数を定義しています。 (Windows では、一部のアイテムにダミー値が入り"
"ます )"

#: ../../library/os.rst:1439
msgid "Example::"
msgstr "例 ::"

#: ../../library/os.rst:1450 ../../library/os.rst:1503
msgid "Added access to values as attributes of the returned object."
msgstr "値へのアクセスを戻り値の属性として追加しました。"

#: ../../library/os.rst:1453
msgid "Added :attr:`st_gen` and :attr:`st_birthtime`."
msgstr ":attr:`st_gen` および :attr:`st_birthtime` 属性が追加されました。"

#: ../../library/os.rst:1459
msgid ""
"Determine whether :class:`stat_result` represents time stamps as float "
"objects. If *newvalue* is ``True``, future calls to :func:`~os.stat` return "
"floats, if it is ``False``, future calls return ints. If *newvalue* is "
"omitted, return the current setting."
msgstr ""
":class:`stat_result` がタイムスタンプに浮動小数点オブジェクトを使うかどうかを"
"決定します。 *newvalue* が ``True`` の場合、以後の :func:`~os.stat` 呼び出し"
"は浮動小数点を返し、 ``False`` の場合には以後整数を返します。 *newvalue* が省"
"略された場合、現在の設定どおりの返り値になります。"

#: ../../library/os.rst:1464
msgid ""
"For compatibility with older Python versions, accessing :class:`stat_result` "
"as a tuple always returns integers."
msgstr ""
"古いバージョンの Python と互換性を保つため、 :class:`stat_result` にタプルと"
"してアクセスすると、常に整数が返されます。"

#: ../../library/os.rst:1467
msgid ""
"Python now returns float values by default. Applications which do not work "
"correctly with floating point time stamps can use this function to restore "
"the old behaviour."
msgstr ""
"Python は現在デフォルトで浮動小数点値を返します。タイムスタンプが浮動小数点で"
"は正常に動作しないアプリケーションは、この関数で古い挙動を利用できます。"

#: ../../library/os.rst:1472
msgid ""
"The resolution of the timestamps (that is the smallest possible fraction) "
"depends on the system. Some systems only support second resolution; on these "
"systems, the fraction will always be zero."
msgstr ""
"タイムスタンプの精度 ( すなわち最小の小数部分 ) はシステム依存です。システム"
"によっては秒単位の精度しかサポートしません。そういったシステムでは小数部分は"
"常に 0 です。"

#: ../../library/os.rst:1476
msgid ""
"It is recommended that this setting is only changed at program startup time "
"in the *__main__* module; libraries should never change this setting. If an "
"application uses a library that works incorrectly if floating point time "
"stamps are processed, this application should turn the feature off until the "
"library has been corrected."
msgstr ""
"この設定の変更は、プログラムの起動時に、 *__main__* モジュールの中でのみ行う"
"ことを推奨します。ライブラリは決してこの設定を変更すべきではありません。浮動"
"小数点型のタイムスタンプを処理すると不正確な動作をするようなライブラリを使う"
"場合、ライブラリが修正されるまで、その機能を停止させておくべきです。"

#: ../../library/os.rst:1485
msgid ""
"Perform a :c:func:`statvfs` system call on the given path.  The return value "
"is an object whose attributes describe the filesystem on the given path, and "
"correspond to the members of the :c:type:`statvfs` structure, namely: :attr:"
"`f_bsize`, :attr:`f_frsize`, :attr:`f_blocks`, :attr:`f_bfree`, :attr:"
"`f_bavail`, :attr:`f_files`, :attr:`f_ffree`, :attr:`f_favail`, :attr:"
"`f_flag`, :attr:`f_namemax`."
msgstr ""
"与えられたパスに対して :c:func:`statvfs` システムコールを実行します。返り値は"
"オブジェクトで、その属性は与えられたパスが格納されているファイルシステムにつ"
"いて記述したものです。各属性は :c:type:`statvfs` 構造体のメンバーに対応しま"
"す : :attr:`f_bsize`, :attr:`f_frsize`, :attr:`f_blocks`, :attr:`f_bfree`, :"
"attr:`f_bavail`, :attr:`f_files`, :attr:`f_ffree`, :attr:`f_favail`, :attr:"
"`f_flag`, :attr:`f_namemax` 。"

#: ../../library/os.rst:1494
msgid ""
"For backward compatibility, the return value is also accessible as a tuple "
"whose values correspond to the attributes, in the order given above. The "
"standard module :mod:`statvfs` defines constants that are useful for "
"extracting information from a :c:type:`statvfs` structure when accessing it "
"as a sequence; this remains useful when writing code that needs to work with "
"versions of Python that don't support accessing the fields as attributes."
msgstr ""
"後方互換性のために、戻り値は上の順にそれぞれ対応する属性値が並んだタプルとし"
"てアクセスすることもできます。標準モジュール :mod:`statvfs` では、シーケンス"
"としてアクセスする場合に、 :c:type:`statvfs` 構造体から情報を引き出す上便利な"
"関数や定数を定義しています ; これは属性として各フィールドにアクセスできない"
"バージョンの Python で動作する必要のあるコードを書く際に便利です。"

#: ../../library/os.rst:1509
msgid "Create a symbolic link pointing to *source* named *link_name*."
msgstr "*source* を指すシンボリックリンク *link_name* を作成します。"

#: ../../library/os.rst:1516
msgid ""
"Return a unique path name that is reasonable for creating a temporary file. "
"This will be an absolute path that names a potential directory entry in the "
"directory *dir* or a common location for temporary files if *dir* is omitted "
"or ``None``.  If given and not ``None``, *prefix* is used to provide a short "
"prefix to the filename.  Applications are responsible for properly creating "
"and managing files created using paths returned by :func:`tempnam`; no "
"automatic cleanup is provided. On Unix, the environment variable :envvar:"
"`TMPDIR` overrides *dir*, while on Windows :envvar:`TMP` is used.  The "
"specific behavior of this function depends on the C library implementation; "
"some aspects are underspecified in system documentation."
msgstr ""
"一時ファイル (temporary file) を生成する上でファイル名として相応しい一意なパ"
"ス名を返します。この値は一時的なディレクトリエントリを表す絶対パスで、 *dir* "
"ディレクトリの下か、*dir* が省略されたり ``None`` の場合には一時ファイルを置"
"くための共通のディレクトリの下になります。 *prefix* が与えられており、かつ "
"``None`` でない場合、ファイル名の先頭につけられる短い接頭辞になります。アプリ"
"ケーションは :func:`tempnam` が返したパス名を使って正しくファイルを生成し、生"
"成したファイルを管理する責任があります; 一時ファイルの自動消去機能は提供され"
"ていません。Unix では、環境変数 :envvar:`TMPDIR` が *dir* を上書きし、"
"Windows では環境変数 :envvar:`TMP` が使われます。これら関数の固有の振る舞いに"
"ついては C ライブラリの実装に依存しています; いくつかの側面についてはシステム"
"のドキュメントで曖昧です。"

#: ../../library/os.rst:1529
msgid ""
"Use of :func:`tempnam` is vulnerable to symlink attacks; consider using :"
"func:`tmpfile` (section :ref:`os-newstreams`) instead."
msgstr ""
":func:`tempnam` を使うと、 symlink 攻撃に対して脆弱になります ; 代りに :func:"
"`tmpfile` (:ref:`os-newstreams`) を使うよう検討してください。"

#: ../../library/os.rst:1537
msgid ""
"Return a unique path name that is reasonable for creating a temporary file. "
"This will be an absolute path that names a potential directory entry in a "
"common location for temporary files.  Applications are responsible for "
"properly creating and managing files created using paths returned by :func:"
"`tmpnam`; no automatic cleanup is provided."
msgstr ""
"一時ファイル (temporary file) を生成する上でファイル名として相応しい一意なパ"
"ス名を返します。この値は一時ファイルを置くための共通のディレクトリ下の一時的"
"なディレクトリエントリを表す絶対パスです。アプリケーションは :func:`tmpnam` "
"が返したパス名を使って正しくファイルを生成し、生成したファイルを管理する責任"
"があります ; 一時ファイルの自動消去機能は提供されていません。"

#: ../../library/os.rst:1545
msgid ""
"Use of :func:`tmpnam` is vulnerable to symlink attacks; consider using :func:"
"`tmpfile` (section :ref:`os-newstreams`) instead."
msgstr ""
":func:`tmpnam` を使うと、 symlink 攻撃に対して脆弱になります ; 代りに :func:"
"`tmpfile` (:ref:`os-newstreams`) を使うよう検討してください。"

#: ../../library/os.rst:1548
msgid ""
"Availability: Unix, Windows.  This function probably shouldn't be used on "
"Windows, though: Microsoft's implementation of :func:`tmpnam` always creates "
"a name in the root directory of the current drive, and that's generally a "
"poor location for a temp file (depending on privileges, you may not even be "
"able to open a file using this name)."
msgstr ""
"利用できる環境 : Unix, Windows 。この関数はおそらく Windows では使うべきでは"
"ないでしょう ; Micorosoft の :func:`tmpnam` 実装では、常に現在のドライブの"
"ルートディレクトリ下のファイル名を生成しますが、これは一般的にはテンポラリ"
"ファイルを置く場所としてはひどい場所です ( アクセス権限によっては、この名前を"
"つかってファイルを開くことすらできないかもしれません ) 。"

#: ../../library/os.rst:1557
msgid ""
"The maximum number of unique names that :func:`tmpnam` will generate before "
"reusing names."
msgstr ""
":func:`tmpnam` がテンポラリ名を再利用し始めるまでに生成できる一意な名前の最大"
"数です。"

#: ../../library/os.rst:1563
msgid ""
"Remove (delete) the file *path*.  This is the same function as :func:"
"`remove`; the :func:`unlink` name is its traditional Unix name."
msgstr ""
"ファイル *path* を削除します。 :func:`remove` と同じです ; :func:`unlink` の"
"名前は伝統的な Unix の関数名です。"

#: ../../library/os.rst:1572
msgid ""
"Set the access and modified times of the file specified by *path*. If "
"*times* is ``None``, then the file's access and modified times are set to "
"the current time. (The effect is similar to running the Unix program :"
"program:`touch` on the path.)  Otherwise, *times* must be a 2-tuple of "
"numbers, of the form ``(atime, mtime)`` which is used to set the access and "
"modified times, respectively. Whether a directory can be given for *path* "
"depends on whether the operating system implements directories as files (for "
"example, Windows does not).  Note that the exact times you set here may not "
"be returned by a subsequent :func:`~os.stat` call, depending on the "
"resolution with which your operating system records access and modification "
"times; see :func:`~os.stat`."
msgstr ""
"*path* で指定されたファイルに最終アクセス時刻および最終修正時刻を設定しま"
"す。 *times* が ``None`` の場合、ファイルの最終アクセス時刻および最終更新時刻"
"は現在の時刻になります。 ( この動作は、その *path* に対して Unix の :program:"
"`touch` プログラムを実行するのに似ています ) 。そうでない場合、 *times* は 2 "
"要素のタプルで、 ``(atime, mtime)`` の形式をとらなくてはなりません。これらは"
"それぞれアクセス時刻および修正時刻を設定するために使われます。 *path* にディ"
"レクトリを指定できるかどうかは、オペレーティングシステムがディレクトリをファ"
"イルの一種として実装しているかどうかに依存します ( 例えば、 Windows はそうで"
"はありません ) 。ここで設定した時刻の値は、オペレーティングシステムがアクセス"
"時刻や更新時刻を記録する際の精度によっては、後で :func:`~os.stat` 呼び出した"
"ときの値と同じにならないかも知れないので注意してください。 :func:`~os.stat` "
"も参照してください。"

#: ../../library/os.rst:1583
msgid "Added support for ``None`` for *times*."
msgstr "*times* として ``None`` をサポートするようにしました ."

#: ../../library/os.rst:1595
msgid ""
"Generate the file names in a directory tree by walking the tree either top-"
"down or bottom-up. For each directory in the tree rooted at directory *top* "
"(including *top* itself), it yields a 3-tuple ``(dirpath, dirnames, "
"filenames)``."
msgstr ""
"ディレクトリツリー以下のファイル名を、ツリーをトップダウンもしくはボトムアッ"
"プに走査することで作成します。ディレクトリ *top* を根に持つディレクトリツリー"
"に含まれる、各ディレクトリ (*top* 自身を含む ) ごとに、タプル ``(dirpath, "
"dirnames, filenames)`` を yield します。"

#: ../../library/os.rst:1600
msgid ""
"*dirpath* is a string, the path to the directory.  *dirnames* is a list of "
"the names of the subdirectories in *dirpath* (excluding ``'.'`` and "
"``'..'``). *filenames* is a list of the names of the non-directory files in "
"*dirpath*. Note that the names in the lists contain no path components.  To "
"get a full path (which begins with *top*) to a file or directory in "
"*dirpath*, do ``os.path.join(dirpath, name)``."
msgstr ""
"*dirpath* は文字列で、ディレクトリへのパスです。 *dirnames* は *dirpath* 内の"
"サブディレクトリ名のリスト (``'.'`` と ``'..'`` は除く）です。 *filenames* "
"は *dirpath* 内の非ディレクトリ・ファイル名のリストです。このリスト内の名前に"
"はファイル名までのパスが含まれません。 *dirpath* 内のファイルやディレクトリへ"
"の (*top* からたどった ) フルパスを得るには、 ``os.path.join(dirpath, "
"name)`` を使用してください。"

#: ../../library/os.rst:1607
msgid ""
"If optional argument *topdown* is ``True`` or not specified, the triple for "
"a directory is generated before the triples for any of its subdirectories "
"(directories are generated top-down).  If *topdown* is ``False``, the triple "
"for a directory is generated after the triples for all of its subdirectories "
"(directories are generated bottom-up). No matter the value of *topdown*, the "
"list of subdirectories is retrieved before the tuples for the directory and "
"its subdirectories are generated."
msgstr ""
"オプション引数 *topdown* が ``True`` であるか、指定されなかった場合、各ディレ"
"クトリからタプルを生成した後で、サブディレクトリからタプルを生成します。 "
"( ディレクトリはトップダウンで生成 ) 。 *topdown* が ``False`` の場合、ディレ"
"クトリに対応するタプルは、そのディレクトリ以下の全てのサブディレクトリに対応"
"するタプルの後で ( ボトムアップで ) 生成されます。 *topdown* の値によらず、サ"
"ブディレクトリのリストは、ディレクトリとそのサブディレクトリのタプルを生成す"
"る前に取り出されます。"

#: ../../library/os.rst:1615
msgid ""
"When *topdown* is ``True``, the caller can modify the *dirnames* list in-"
"place (perhaps using :keyword:`del` or slice assignment), and :func:`walk` "
"will only recurse into the subdirectories whose names remain in *dirnames*; "
"this can be used to prune the search, impose a specific order of visiting, "
"or even to inform :func:`walk` about directories the caller creates or "
"renames before it resumes :func:`walk` again.  Modifying *dirnames* when "
"*topdown* is ``False`` has no effect on the behavior of the walk, because in "
"bottom-up mode the directories in *dirnames* are generated before *dirpath* "
"itself is generated."
msgstr ""
"*topdown* が ``True`` のとき、呼び出し側は *dirnames* リストを、インプレース"
"で ( たとえば、 :keyword:`del` やスライスを使った代入で ) 変更でき、 :func:"
"`walk` は *dirnames* に残っているサブディレクトリ内のみを再帰します。これによ"
"り、検索を省略したり、特定の訪問順序を強制したり、呼び出し側が :func:`walk` "
"を再開する前に、呼び出し側が作った、または名前を変更したディレクトリを、 :"
"func:`walk` に知らせたりすることができます。 *topdown* が ``False`` のときに "
"*dirnames* を変更しても効果はありません。ボトムアップモードでは *dirpath* 自"
"身が生成される前に *dirnames* 内のディレクトリの情報が生成されるからです。"

#: ../../library/os.rst:1624
msgid ""
"By default, errors from the :func:`listdir` call are ignored.  If optional "
"argument *onerror* is specified, it should be a function; it will be called "
"with one argument, an :exc:`OSError` instance.  It can report the error to "
"continue with the walk, or raise the exception to abort the walk.  Note that "
"the filename is available as the ``filename`` attribute of the exception "
"object."
msgstr ""
"デフォルトでは、 :func:`listdir` 呼び出しからのエラーは無視されます。オプショ"
"ン引数の *onerror* を指定する場合は関数でなければなりません ; この関数は単一"
"の引数として :exc:`OSError` インスタンスを伴って呼び出されます。この関数でエ"
"ラーを報告して走査を継続したり、例外を送出して走査を中止したりできます。ファ"
"イル名は例外オブジェクトの ``filename`` 属性として利用できます。"

#: ../../library/os.rst:1630
msgid ""
"By default, :func:`walk` will not walk down into symbolic links that resolve "
"to directories. Set *followlinks* to ``True`` to visit directories pointed "
"to by symlinks, on systems that support them."
msgstr ""
"デフォルトでは、 :func:`walk` はディレクトリへのシンボリックリンクをたどりま"
"せん。 *followlinks* に ``True`` を指定すると、ディレクトリへのシンボリックリ"
"ンクをサポートしているシステムでは、シンボリックリンクの指しているディレクト"
"リを走査します。"

#: ../../library/os.rst:1634
msgid "The *followlinks* parameter."
msgstr "*followlinks* 引数"

#: ../../library/os.rst:1639
msgid ""
"Be aware that setting *followlinks* to ``True`` can lead to infinite "
"recursion if a link points to a parent directory of itself. :func:`walk` "
"does not keep track of the directories it visited already."
msgstr ""
"*followlinks* に ``True`` を指定すると、シンボリックリンクが親ディレクトリを"
"指していた場合に、無限ループになることに注意してください。 :func:`walk` はす"
"でにたどったディレクトリを管理したりはしません。"

#: ../../library/os.rst:1645
msgid ""
"If you pass a relative pathname, don't change the current working directory "
"between resumptions of :func:`walk`.  :func:`walk` never changes the current "
"directory, and assumes that its caller doesn't either."
msgstr ""
"相対パスを渡した場合、 :func:`walk` が再開されるまでの間に現在の作業ディレク"
"トリを変更しないでください。 :func:`walk` はカレントディレクトリを変更しませ"
"んし、呼び出し側もカレントディレクトリを変更しないと仮定しています。"

#: ../../library/os.rst:1649
msgid ""
"This example displays the number of bytes taken by non-directory files in "
"each directory under the starting directory, except that it doesn't look "
"under any CVS subdirectory::"
msgstr ""
"以下の例では、最初のディレクトリ以下にある各ディレクトリに含まれる、非ディレ"
"クトリファイルのバイト数を表示します。ただし、 CVS サブディレクトリ以下は見に"
"行きません ::"

#: ../../library/os.rst:1662
msgid ""
"In the next example, walking the tree bottom-up is essential: :func:`rmdir` "
"doesn't allow deleting a directory before the directory is empty::"
msgstr ""
"次の例では、ツリーをボトムアップで走査することが不可欠になります ; :func:"
"`rmdir` はディレクトリが空になるまで削除を許さないからです ::"

#: ../../library/os.rst:1682
msgid "Process Management"
msgstr "プロセス管理"

#: ../../library/os.rst:1684
msgid "These functions may be used to create and manage processes."
msgstr "以下の関数はプロセスの生成や管理に利用できます。"

#: ../../library/os.rst:1686
msgid ""
"The various :func:`exec\\* <execl>` functions take a list of arguments for "
"the new program loaded into the process.  In each case, the first of these "
"arguments is passed to the new program as its own name rather than as an "
"argument a user may have typed on a command line.  For the C programmer, "
"this is the ``argv[0]`` passed to a program's :c:func:`main`.  For example, "
"``os.execv('/bin/echo', ['foo', 'bar'])`` will only print ``bar`` on "
"standard output; ``foo`` will seem to be ignored."
msgstr ""
"さまざまな :func:`exec\\* <execl>` 関数は、プロセス内にロードされる新しいプロ"
"グラムに与えるための、引数のリストを取ります。どの関数の場合でも、新しいプロ"
"グラムに渡されるリストの最初の引数は、ユーザがコマンドラインで入力する引数で"
"はなく、そのプログラム自体の名前です。 C プログラマならば、プログラムの :c:"
"func:`main` に渡される ``argv[0]`` だと考えれば良いでしょう。たとえば、 ``os."
"execv('/bin/echo', ['foo', 'bar'])`` が標準出力に出力するのは ``bar`` だけ"
"で、 ``foo`` は無視されたかのように見えることになります。"

#: ../../library/os.rst:1697
msgid ""
"Generate a :const:`SIGABRT` signal to the current process.  On Unix, the "
"default behavior is to produce a core dump; on Windows, the process "
"immediately returns an exit code of ``3``.  Be aware that calling this "
"function will not call the Python signal handler registered for :const:"
"`SIGABRT` with :func:`signal.signal`."
msgstr ""
":const:`SIGABRT` シグナルを現在のプロセスに対して生成します。 Unix では、デ"
"フォルトの動作はコアダンプの生成です ; Windows では、プロセスは即座に終了コー"
"ド ``3`` を返します。この関数の呼び出しは :func:`signal.signal` を使って :"
"const:`SIGABRT` に対し登録された Python シグナルハンドラーを呼び出さないこと"
"に注意してください。"

#: ../../library/os.rst:1715
msgid ""
"These functions all execute a new program, replacing the current process; "
"they do not return.  On Unix, the new executable is loaded into the current "
"process, and will have the same process id as the caller.  Errors will be "
"reported as :exc:`OSError` exceptions."
msgstr ""
"これらの関数はすべて、現在のプロセスを置き換える形で新たなプログラムを実行し"
"ます ; 現在のプロセスは返り値を返しません。 Unix では、新たに実行される実行"
"コードは現在のプロセス内に読み込まれ、呼び出し側と同じプロセス ID を持つこと"
"になります。エラーは :exc:`OSError` 例外として報告されます。"

#: ../../library/os.rst:1720
msgid ""
"The current process is replaced immediately. Open file objects and "
"descriptors are not flushed, so if there may be data buffered on these open "
"files, you should flush them using :func:`sys.stdout.flush` or :func:`os."
"fsync` before calling an :func:`exec\\* <execl>` function."
msgstr ""
"現在のプロセスは瞬時に置き換えられます。開かれているファイルオブジェクトや"
"ファイル記述子はフラッシュされません。そのため、バッファ内にデータが残ってい"
"るかもしれない場合、 :func:`exec\\* <execl>` 関数を実行する前に :func:`sys."
"stdout.flush` か :func:`os.fsync` を利用してバッファをフラッシュしておく必要"
"があります。"

#: ../../library/os.rst:1726
msgid ""
"The \"l\" and \"v\" variants of the :func:`exec\\* <execl>` functions differ "
"in how command-line arguments are passed.  The \"l\" variants are perhaps "
"the easiest to work with if the number of parameters is fixed when the code "
"is written; the individual parameters simply become additional parameters to "
"the :func:`execl\\*` functions.  The \"v\" variants are good when the number "
"of parameters is variable, with the arguments being passed in a list or "
"tuple as the *args* parameter.  In either case, the arguments to the child "
"process should start with the name of the command being run, but this is not "
"enforced."
msgstr ""
"\"l\" および \"v\" のついた :func:`exec\\* <execl>` 関数は、コマンドライン引"
"数をどのように渡すかが異なります。 \"l\" 型は、コードを書くときにパラメタ数が"
"決まっている場合に、おそらくもっとも簡単に利用できます。個々のパラメタは単"
"に :func:`execl\\*` 関数の追加パラメタとなります。 \"v\" 型は、パラメタの数が"
"可変の時に便利で、リストかタプルの引数が *args* パラメタとして渡されます。ど"
"ちらの場合も、子プロセスに渡す引数は動作させようとしているコマンドの名前から"
"始まるべきですが、これは強制されません。"

#: ../../library/os.rst:1735
msgid ""
"The variants which include a \"p\" near the end (:func:`execlp`, :func:"
"`execlpe`, :func:`execvp`, and :func:`execvpe`) will use the :envvar:`PATH` "
"environment variable to locate the program *file*.  When the environment is "
"being replaced (using one of the :func:`exec\\*e <execl>` variants, "
"discussed in the next paragraph), the new environment is used as the source "
"of the :envvar:`PATH` variable. The other variants, :func:`execl`, :func:"
"`execle`, :func:`execv`, and :func:`execve`, will not use the :envvar:`PATH` "
"variable to locate the executable; *path* must contain an appropriate "
"absolute or relative path."
msgstr ""
"末尾近くに \"p\" をもつ型 (:func:`execlp`, :func:`execlpe`, :func:`execvp`, "
"および :func:`execvpe`) は、プログラム *file* を探すために環境変数 :envvar:"
"`PATH` を利用します。環境変数が ( 次の段で述べる :func:`exec\\*e <execl>` 型"
"関数で ) 置き換えられる場合、環境変数は :envvar:`PATH` を決定する上の情報源と"
"して使われます。その他の型、 :func:`execl`, :func:`execle`, :func:`execv`, お"
"よび :func:`execve` では、実行コードを探すために :envvar:`PATH` を使いませ"
"ん。 *path* には適切に設定された絶対パスまたは相対パスが入っていなくてはなり"
"ません。"

#: ../../library/os.rst:1745
msgid ""
"For :func:`execle`, :func:`execlpe`, :func:`execve`, and :func:`execvpe` "
"(note that these all end in \"e\"), the *env* parameter must be a mapping "
"which is used to define the environment variables for the new process (these "
"are used instead of the current process' environment); the functions :func:"
"`execl`, :func:`execlp`, :func:`execv`, and :func:`execvp` all cause the new "
"process to inherit the environment of the current process."
msgstr ""
":func:`execle` 、 :func:`execlpe` 、 :func:`execve` 、および :func:`execvpe` "
"( すべて末尾に \"e\" がついています ) では、 *env* パラメーターは新たなプロセ"
"スで利用される環境変数を定義するためのマップ型でなくてはなりません ( 現在のプ"
"ロセスの環境変数の代わりに利用されます ); :func:`execl` 、 :func:"
"`execlp` 、 :func:`execv` 、および :func:`execvp` では、すべて新たなプロセス"
"は現在のプロセスの環境を引き継ぎます。"

#: ../../library/os.rst:1757
msgid ""
"Exit the process with status *n*, without calling cleanup handlers, flushing "
"stdio buffers, etc."
msgstr ""
"終了ステータス *n* でプロセスを終了します。この時クリーンアップハンドラーの呼"
"び出しや、標準入出力バッファーのフラッシュなどは行いません。"

#: ../../library/os.rst:1764
msgid ""
"The standard way to exit is ``sys.exit(n)``.  :func:`_exit` should normally "
"only be used in the child process after a :func:`fork`."
msgstr ""
"終了する標準的な方法は ``sys.exit(n)`` です。 :func:`_exit` は通常、 :func:"
"`fork` された後の子プロセスでのみ使われます。"

#: ../../library/os.rst:1767
msgid ""
"The following exit codes are defined and can be used with :func:`_exit`, "
"although they are not required.  These are typically used for system "
"programs written in Python, such as a mail server's external command "
"delivery program."
msgstr ""
"以下の終了コードは必須ではありませんが :func:`_exit` で使うことができます。一"
"般に、メールサーバーの外部コマンド配送プログラムのような、 Python で書かれた"
"システムプログラムに使います。"

#: ../../library/os.rst:1773
msgid ""
"Some of these may not be available on all Unix platforms, since there is "
"some variation.  These constants are defined where they are defined by the "
"underlying platform."
msgstr ""
"いくつかのバリエーションがあって、これらのすべてがすべての Unix プラット"
"フォームで使えるわけではありません。以下の定数は下層のプラットフォームで定義"
"されていれば定義されます。"

#: ../../library/os.rst:1780
msgid "Exit code that means no error occurred."
msgstr "エラーが起きなかったことを表す終了コード。"

#: ../../library/os.rst:1789
msgid ""
"Exit code that means the command was used incorrectly, such as when the "
"wrong number of arguments are given."
msgstr ""
"誤った個数の引数が渡された時など、コマンドが間違って使われたことを表す終了"
"コード。"

#: ../../library/os.rst:1799
msgid "Exit code that means the input data was incorrect."
msgstr "入力データが誤っていたことを表す終了コード。"

#: ../../library/os.rst:1808
msgid "Exit code that means an input file did not exist or was not readable."
msgstr ""
"入力ファイルが存在しなかった、または、読み込み不可だったことを表す終了コー"
"ド。"

#: ../../library/os.rst:1817
msgid "Exit code that means a specified user did not exist."
msgstr "指定されたユーザーが存在しなかったことを表す終了コード。"

#: ../../library/os.rst:1826
msgid "Exit code that means a specified host did not exist."
msgstr "指定されたホストが存在しなかったことを表す終了コード。"

#: ../../library/os.rst:1835
msgid "Exit code that means that a required service is unavailable."
msgstr "要求されたサービスが利用できないことを表す終了コード。"

#: ../../library/os.rst:1844
msgid "Exit code that means an internal software error was detected."
msgstr "内部ソフトウェアエラーが検出されたことを表す終了コード。"

#: ../../library/os.rst:1853
msgid ""
"Exit code that means an operating system error was detected, such as the "
"inability to fork or create a pipe."
msgstr ""
"fork できない、 pipe の作成ができないなど、オペレーティングシステムのエラーが"
"検出されたことを表す終了コード。"

#: ../../library/os.rst:1863
msgid ""
"Exit code that means some system file did not exist, could not be opened, or "
"had some other kind of error."
msgstr ""
"システムファイルが存在しなかった、開けなかった、あるいはその他のエラーが起き"
"たことを表す終了コード。"

#: ../../library/os.rst:1873
msgid "Exit code that means a user specified output file could not be created."
msgstr "ユーザーには作成できない出力ファイルを指定したことを表す終了コード。"

#: ../../library/os.rst:1882
msgid ""
"Exit code that means that an error occurred while doing I/O on some file."
msgstr "ファイルの I/O を行っている途中にエラーが発生した時の終了コード。"

#: ../../library/os.rst:1891
msgid ""
"Exit code that means a temporary failure occurred.  This indicates something "
"that may not really be an error, such as a network connection that couldn't "
"be made during a retryable operation."
msgstr ""
"一時的な失敗が発生したことを表す終了コード。これは、再試行可能な操作の途中"
"に、ネットワークに接続できないというような、実際にはエラーではないかも知れな"
"いことを意味します。"

#: ../../library/os.rst:1902
msgid ""
"Exit code that means that a protocol exchange was illegal, invalid, or not "
"understood."
msgstr "プロトコル交換が不正、不適切、または理解不能なことを表す終了コード。"

#: ../../library/os.rst:1912
msgid ""
"Exit code that means that there were insufficient permissions to perform the "
"operation (but not intended for file system problems)."
msgstr ""
"操作を行うために十分な許可がなかった（ファイルシステムの問題を除く）ことを表"
"す終了コード。"

#: ../../library/os.rst:1922
msgid "Exit code that means that some kind of configuration error occurred."
msgstr "設定エラーが起こったことを表す終了コード。"

#: ../../library/os.rst:1931
msgid "Exit code that means something like \"an entry was not found\"."
msgstr "\"an entry was not found\" のようなことを表す終了コード。"

#: ../../library/os.rst:1940
msgid ""
"Fork a child process.  Return ``0`` in the child and the child's process id "
"in the parent.  If an error occurs :exc:`OSError` is raised."
msgstr ""
"子プロセスを fork します。子プロセスでは ``0`` が返り、親プロセスでは子プロセ"
"スの id が返ります。エラーが発生した場合は、 :exc:`OSError` を送出します。"

#: ../../library/os.rst:1943
msgid ""
"Note that some platforms including FreeBSD <= 6.3, Cygwin and OS/2 EMX have "
"known issues when using fork() from a thread."
msgstr ""
"FreeBSD 6.3 以下、 Cygwin 、 OS/2 EMX を含む一部のプラットフォームにおいて、 "
"fork() をスレッド内から利用した場合に既知の問題があることに注意してください。"

#: ../../library/os.rst:1948
msgid "See :mod:`ssl` for applications that use the SSL module with fork()."
msgstr ""
"SSL モジュールを fork() とともに使うアプリケーションについて、 :mod:`ssl` を"
"参照して下さい。"

#: ../../library/os.rst:1955
msgid ""
"Fork a child process, using a new pseudo-terminal as the child's controlling "
"terminal. Return a pair of ``(pid, fd)``, where *pid* is ``0`` in the child, "
"the new child's process id in the parent, and *fd* is the file descriptor of "
"the master end of the pseudo-terminal.  For a more portable approach, use "
"the :mod:`pty` module.  If an error occurs :exc:`OSError` is raised."
msgstr ""
"子プロセスを fork します。この時新しい擬似端末を子プロセスの制御端末として使"
"います。親プロセスでは ``(pid, fd)`` からなるペアが返り、 *fd* は擬似端末のマ"
"スター側のファイル記述子となります。可搬性のあるアプローチを取るには、 :mod:"
"`pty` モジュールを利用してください。エラーが発生した場合は、 :exc:`OSError` "
"を送出します。"

#: ../../library/os.rst:1970
msgid ""
"Send signal *sig* to the process *pid*.  Constants for the specific signals "
"available on the host platform are defined in the :mod:`signal` module."
msgstr ""
"プロセス *pid* にシグナル *sig* を送ります。ホストプラットフォームで利用可能"
"なシグナルを特定する定数は :mod:`signal` モジュールで定義されています。"

#: ../../library/os.rst:1973
msgid ""
"Windows: The :data:`signal.CTRL_C_EVENT` and :data:`signal.CTRL_BREAK_EVENT` "
"signals are special signals which can only be sent to console processes "
"which share a common console window, e.g., some subprocesses. Any other "
"value for *sig* will cause the process to be unconditionally killed by the "
"TerminateProcess API, and the exit code will be set to *sig*. The Windows "
"version of :func:`kill` additionally takes process handles to be killed."
msgstr ""
"Windows: :data:`signal.CTRL_C_EVENT` と :data:`signal.CTRL_BREAK_EVENT` は、"
"同じコンソールウィンドウを共有しているコンソールプロセス ( 例 : 子プロセス ) "
"にだけ送ることができる特別なシグナルです。その他の値を *sig* に与えると、その"
"プロセスが無条件に TerminateProcess API によって kill され、終了コードが "
"*sig* に設定されます。 Windows の :func:`kill` は kill するプロセスのハンドル"
"も受け取ります。"

#: ../../library/os.rst:1981
msgid "Windows support"
msgstr "Windows サポート"

#: ../../library/os.rst:1990
msgid "Send the signal *sig* to the process group *pgid*."
msgstr "プロセスグループ *pgid* にシグナル *sig* を送ります。"

#: ../../library/os.rst:1999
msgid ""
"Add *increment* to the process's \"niceness\".  Return the new niceness."
msgstr ""
"プロセスの \"nice 値 \" に *increment* を加えます。新たな nice 値を返します。"

#: ../../library/os.rst:2006
msgid ""
"Lock program segments into memory.  The value of *op* (defined in ``<sys/"
"lock.h>``) determines which segments are locked."
msgstr ""
"プログラムのセグメントをメモリ内にロックします。 *op* (``<sys/lock.h>`` で定"
"義されています ) にはどのセグメントをロックするかを指定します。"

#: ../../library/os.rst:2018
msgid ""
"Run child processes, returning opened pipes for communications.  These "
"functions are described in section :ref:`os-newstreams`."
msgstr ""
"子プロセスを起動し、子プロセスとの通信のために開かれたパイプを返します。これ"
"らの関数は :ref:`os-newstreams` 節で説明されています。"

#: ../../library/os.rst:2031
msgid "Execute the program *path* in a new process."
msgstr "新たなプロセス内でプログラム *path* を実行します。"

#: ../../library/os.rst:2033
msgid ""
"(Note that the :mod:`subprocess` module provides more powerful facilities "
"for spawning new processes and retrieving their results; using that module "
"is preferable to using these functions.  Check especially the :ref:"
"`subprocess-replacements` section.)"
msgstr ""
"(:mod:`subprocess` モジュールが、新しいプロセスを実行して結果を取得するため"
"の、より強力な機能を提供しています。この関数の代わりに :mod:`subprocess` モ"
"ジュールを利用することが推奨されています。 :mod:`subprocess` モジュールのド"
"キュメントの、 :ref:`subprocess-replacements` セクションを参照してください )"

#: ../../library/os.rst:2038
msgid ""
"If *mode* is :const:`P_NOWAIT`, this function returns the process id of the "
"new process; if *mode* is :const:`P_WAIT`, returns the process's exit code "
"if it exits normally, or ``-signal``, where *signal* is the signal that "
"killed the process.  On Windows, the process id will actually be the process "
"handle, so can be used with the :func:`waitpid` function."
msgstr ""
"*mode* が :const:`P_NOWAIT` の場合、この関数は新たなプロセスのプロセス ID を"
"返します ; *mode* が :const:`P_WAIT` の場合、子プロセスが正常に終了するとその"
"終了コードが返ります。そうでない場合にはプロセスを kill したシグナル "
"*signal* に対して ``-signal`` が返ります。 Windows では、プロセス ID は実際に"
"はプロセスハンドル値になるので、 :func:`waitpid` 関数で使えます。"

#: ../../library/os.rst:2044
msgid ""
"The \"l\" and \"v\" variants of the :func:`spawn\\* <spawnl>` functions "
"differ in how command-line arguments are passed.  The \"l\" variants are "
"perhaps the easiest to work with if the number of parameters is fixed when "
"the code is written; the individual parameters simply become additional "
"parameters to the :func:`spawnl\\*` functions.  The \"v\" variants are good "
"when the number of parameters is variable, with the arguments being passed "
"in a list or tuple as the *args* parameter.  In either case, the arguments "
"to the child process must start with the name of the command being run."
msgstr ""
"\"l\" および \"v\" のついた :func:`spawn\\* <spawnl>` 関数は、コマンドライン"
"引数をどのように渡すかが異なります。 \"l\" 型は、コードを書くときにパラメタ数"
"が決まっている場合に、おそらくもっとも簡単に利用できます。個々のパラメタは単"
"に :func:`spawnl\\*` 関数の追加パラメタとなります。 \"v\" 型は、パラメタの数"
"が可変の時に便利で、リストかタプルの引数が *args* パラメタとして渡されます。"
"どちらの場合も、子プロセスに渡す引数は動作させようとしているコマンドの名前か"
"ら始まらなければなりません。"

#: ../../library/os.rst:2053
msgid ""
"The variants which include a second \"p\" near the end (:func:`spawnlp`, :"
"func:`spawnlpe`, :func:`spawnvp`, and :func:`spawnvpe`) will use the :envvar:"
"`PATH` environment variable to locate the program *file*.  When the "
"environment is being replaced (using one of the :func:`spawn\\*e <spawnl>` "
"variants, discussed in the next paragraph), the new environment is used as "
"the source of the :envvar:`PATH` variable.  The other variants, :func:"
"`spawnl`, :func:`spawnle`, :func:`spawnv`, and :func:`spawnve`, will not use "
"the :envvar:`PATH` variable to locate the executable; *path* must contain an "
"appropriate absolute or relative path."
msgstr ""
"末尾近くに \"p\" をもつ型 (:func:`spawnlp`, :func:`spawnlpe`, :func:"
"`spawnvp`, :func:`spawnvpe`) は、プログラム *file* を探すために環境変数 :"
"envvar:`PATH` を利用します。環境変数が ( 次の段で述べる :func:`spawn\\*e "
"<spawnl>` 型関数で ) 置き換えられる場合、環境変数は :envvar:`PATH` を決定する"
"上の情報源として使われます。その他の型、 :func:`spawnl`, :func:`spawnle`, :"
"func:`spawnv`, および :func:`spawnve` では、実行コードを探すために :envvar:"
"`PATH` を使いません。 *path* には適切に設定された絶対パスまたは相対パスが入っ"
"ていなくてはなりません。"

#: ../../library/os.rst:2063
msgid ""
"For :func:`spawnle`, :func:`spawnlpe`, :func:`spawnve`, and :func:`spawnvpe` "
"(note that these all end in \"e\"), the *env* parameter must be a mapping "
"which is used to define the environment variables for the new process (they "
"are used instead of the current process' environment); the functions :func:"
"`spawnl`, :func:`spawnlp`, :func:`spawnv`, and :func:`spawnvp` all cause the "
"new process to inherit the environment of the current process.  Note that "
"keys and values in the *env* dictionary must be strings; invalid keys or "
"values will cause the function to fail, with a return value of ``127``."
msgstr ""
":func:`spawnle`, :func:`spawnlpe`, :func:`spawnve`, および :func:`spawnvpe` "
"( すべて末尾に \"e\" がついています ) では、 *env* パラメーターは新たなプロセ"
"スで利用される環境変数を定義するためのマップ型でなくてはなりません ; :func:"
"`spawnl` 、 :func:`spawnlp` 、 :func:`spawnv` 、および :func:`spawnvp` では、"
"すべて新たなプロセスは現在のプロセスの環境を引き継ぎます。 *env* 辞書のキーと"
"値はすべて文字列である必要があります。不正なキーや値を与えると関数が失敗し、 "
"``127`` を返します。"

#: ../../library/os.rst:2072
msgid ""
"As an example, the following calls to :func:`spawnlp` and :func:`spawnvpe` "
"are equivalent::"
msgstr ""
"例えば、以下の :func:`spawnlp` および :func:`spawnvpe` 呼び出しは等価です ::"

#: ../../library/os.rst:2081
msgid ""
"Availability: Unix, Windows.  :func:`spawnlp`, :func:`spawnlpe`, :func:"
"`spawnvp` and :func:`spawnvpe` are not available on Windows.  :func:"
"`spawnle` and :func:`spawnve` are not thread-safe on Windows; we advise you "
"to use the :mod:`subprocess` module instead."
msgstr ""
"利用できる環境 : Unix 、 Windows :func:`spawnlp` 、 :func:`spawnlpe` 、 :"
"func:`spawnvp` 、および :func:`spawnvpe` は Windows では利用できません。 :"
"func:`spawnle` および :func:`spawnve` は Windows においてスレッドセーフではあ"
"りません ; 代わりに :mod:`subprocess` モジュールの利用を推奨します。"

#: ../../library/os.rst:2092
msgid ""
"Possible values for the *mode* parameter to the :func:`spawn\\* <spawnl>` "
"family of functions.  If either of these values is given, the :func:"
"`spawn\\*` functions will return as soon as the new process has been "
"created, with the process id as the return value."
msgstr ""
":func:`spawn\\* <spawnl>` 関数ファミリに対する *mode* パラメタとして取れる値"
"です。この値のいずれかを *mode* として与えた場合、 :func:`spawn\\*` 関数は新"
"たなプロセスが生成されるとすぐに、プロセスの ID を戻り値として返ります。"

#: ../../library/os.rst:2104
msgid ""
"Possible value for the *mode* parameter to the :func:`spawn\\* <spawnl>` "
"family of functions.  If this is given as *mode*, the :func:`spawn\\*` "
"functions will not return until the new process has run to completion and "
"will return the exit code of the process the run is successful, or ``-"
"signal`` if a signal kills the process."
msgstr ""
":func:`spawn\\* <spawnl>` 関数ファミリに対する *mode* パラメタとして取れる値"
"です。この値を *mode* として与えた場合、 :func:`spawn\\*` 関数は新たなプロセ"
"スを起動して完了するまで返らず、プロセスがうまく終了した場合には終了コード"
"を、シグナルによってプロセスが kill された場合には ``-signal`` を返します。"

#: ../../library/os.rst:2118
msgid ""
"Possible values for the *mode* parameter to the :func:`spawn\\* <spawnl>` "
"family of functions.  These are less portable than those listed above. :"
"const:`P_DETACH` is similar to :const:`P_NOWAIT`, but the new process is "
"detached from the console of the calling process. If :const:`P_OVERLAY` is "
"used, the current process will be replaced; the :func:`spawn\\*` function "
"will not return."
msgstr ""
":func:`spawn\\* <spawnl>` 関数ファミリに対する *mode* パラメタとして取れる値"
"です。これらの値は上の値よりもやや可搬性において劣っています。 :const:"
"`P_DETACH` は :const:`P_NOWAIT` に似ていますが、新たなプロセスは呼び出しプロ"
"セスのコンソールから切り離され (detach) ます。 :const:`P_OVERLAY` が使われた"
"場合、現在のプロセスは置き換えられます ; 従って :func:`spawn\\*` は返りませ"
"ん。"

#: ../../library/os.rst:2124 ../../library/os.rst:2151
msgid "Availability: Windows."
msgstr "利用出来る環境 : Windows."

#: ../../library/os.rst:2131
msgid "Start a file with its associated application."
msgstr "ファイルを関連付けられたアプリケーションを使ってスタートします。"

#: ../../library/os.rst:2133
msgid ""
"When *operation* is not specified or ``'open'``, this acts like double-"
"clicking the file in Windows Explorer, or giving the file name as an "
"argument to the :program:`start` command from the interactive command shell: "
"the file is opened with whatever application (if any) its extension is "
"associated."
msgstr ""
"*operation* が指定されないか、または ``'open'`` である時、この動作は、 "
"Windows の Explorer 上でのファイルをダブルクリックした、あるいはコマンドプロ"
"ンプト上でファイル名を :program:`start` コマンドの引数としての実行した場合と"
"等価です : ファイルは拡張子が関連付けされているアプリケーション ( が存在する"
"場合 ) を使って開かれます。"

#: ../../library/os.rst:2138
msgid ""
"When another *operation* is given, it must be a \"command verb\" that "
"specifies what should be done with the file. Common verbs documented by "
"Microsoft are ``'print'`` and  ``'edit'`` (to be used on files) as well as "
"``'explore'`` and ``'find'`` (to be used on directories)."
msgstr ""
"他の *operation* が与えられる場合、それはファイルに対して何がなされるべきかを"
"表す \"command verb\" ( コマンドを表す動詞 ) でなければなりません。 "
"Microsoft が文書化している動詞は、 ``'print'`` と ``'edit'`` ( ファイルに対し"
"て ) および ``'explore'`` と ``'find'`` ( ディレクトリに対して ) です。"

#: ../../library/os.rst:2143
msgid ""
":func:`startfile` returns as soon as the associated application is launched. "
"There is no option to wait for the application to close, and no way to "
"retrieve the application's exit status.  The *path* parameter is relative to "
"the current directory.  If you want to use an absolute path, make sure the "
"first character is not a slash (``'/'``); the underlying Win32 :c:func:"
"`ShellExecute` function doesn't work if it is.  Use the :func:`os.path."
"normpath` function to ensure that the path is properly encoded for Win32."
msgstr ""
":func:`startfile` は関連付けされたアプリケーションが起動すると同時に返りま"
"す。アプリケーションが閉じるまで待機させるためのオプションはなく、アプリケー"
"ションの終了状態を取得する方法もありません。引数 *path* はカレントディレクト"
"リからの相対パスです。絶対パスで指定したい場合は、最初の文字はスラッシュ "
"(``'/'``) ではないので注意してください ; もし最初の文字がスラッシュなら、下層"
"の Win32 :c:func:`ShellExecute` 関数は動作しません。 :func:`os.path."
"normpath` 関数を使って、 Win32 用に正しくコード化されたパスになるようにしてく"
"ださい。"

#: ../../library/os.rst:2155
msgid "The *operation* parameter."
msgstr "*operation* パラメータ ."

#: ../../library/os.rst:2161
msgid ""
"Execute the command (a string) in a subshell.  This is implemented by "
"calling the Standard C function :c:func:`system`, and has the same "
"limitations. Changes to :data:`sys.stdin`, etc. are not reflected in the "
"environment of the executed command."
msgstr ""
"サブシェル内でコマンド (文字列) を実行します。この関数は標準 C 関数 :c:func:"
"`system` を使って実装されており、 :c:func:`system` と同じ制限があります。 :"
"data:`sys.stdin` などに対する変更を行っても、実行されるコマンドの環境には反映"
"されません。"

#: ../../library/os.rst:2166
msgid ""
"On Unix, the return value is the exit status of the process encoded in the "
"format specified for :func:`wait`.  Note that POSIX does not specify the "
"meaning of the return value of the C :c:func:`system` function, so the "
"return value of the Python function is system-dependent."
msgstr ""
"Unix では、返り値はプロセスの終了ステータスで、 :func:`wait` で定義されている"
"書式にコード化されています。 POSIX は :c:func:`system` 関数の返り値の意味につ"
"いて定義していないので、 Python の :func:`system` における返り値はシステム依"
"存となることに注意してください。"

#: ../../library/os.rst:2171
msgid ""
"On Windows, the return value is that returned by the system shell after "
"running *command*, given by the Windows environment variable :envvar:"
"`COMSPEC`: on :program:`command.com` systems (Windows 95, 98 and ME) this is "
"always ``0``; on :program:`cmd.exe` systems (Windows NT, 2000 and XP) this "
"is the exit status of the command run; on systems using a non-native shell, "
"consult your shell documentation."
msgstr ""
"Windows では、戻り値は *command* を実行した後にシステムシェルから返される値"
"で、 Windows の環境変数 :envvar:`COMSPEC` となります : :program:`command."
"com` ベースのシステム (Windows 95, 98 および ME) では、この値は常に ``0`` で"
"す ; :program:`cmd.exe` ベースのシステム (Windows NT, 2000 および XP) では、"
"この値は実行したコマンドの終了ステータスです ; ネイティブでないシェルを使って"
"いるシステムについては、使っているシェルのドキュメントを参照してください。"

#: ../../library/os.rst:2178
msgid ""
"The :mod:`subprocess` module provides more powerful facilities for spawning "
"new processes and retrieving their results; using that module is preferable "
"to using this function.  See the :ref:`subprocess-replacements` section in "
"the :mod:`subprocess` documentation for some helpful recipes."
msgstr ""
":mod:`subprocess` モジュールは、新しいプロセスを実行して結果を取得するための"
"より強力な機能を提供しています。この関数の代わりに :mod:`subprocess` モジュー"
"ルを利用することが推奨されています。 :mod:`subprocess` モジュールのドキュメン"
"トの :ref:`subprocess-replacements` 節のレシピを参考にして下さい。"

#: ../../library/os.rst:2189
msgid ""
"Return a 5-tuple of floating point numbers indicating accumulated (processor "
"or other) times, in seconds.  The items are: user time, system time, "
"children's user time, children's system time, and elapsed real time since a "
"fixed point in the past, in that order.  See the Unix manual page :manpage:"
"`times(2)` or the corresponding Windows Platform API documentation. On "
"Windows, only the first two items are filled, the others are zero."
msgstr ""
"( プロセッサまたはその他の ) 積算時間を秒で表す浮動小数点数からなる、 5 要素"
"のタプルを返します。タプルの要素は、ユーザ時間 (user time) 、システム時間 "
"(system time) 、子プロセスのユーザ時間、子プロセスのシステム時間、そして過去"
"のある固定時点からの経過時間で、この順に並んでいます。 Unix マニュアルペー"
"ジ :manpage:`times(2)` または対応する Windows プラットフォーム API ドキュメン"
"トを参照してください。 Windows では、最初の２つの要素だけが埋められ、残りは "
"0 になります。"

#: ../../library/os.rst:2196
msgid "Availability: Unix, Windows"
msgstr "利用できる環境 : Unix, Windows"

#: ../../library/os.rst:2201
msgid ""
"Wait for completion of a child process, and return a tuple containing its "
"pid and exit status indication: a 16-bit number, whose low byte is the "
"signal number that killed the process, and whose high byte is the exit "
"status (if the signal number is zero); the high bit of the low byte is set "
"if a core file was produced."
msgstr ""
"子プロセスの実行完了を待機し、子プロセスの pid と終了コードインジケーター "
"--- 16 ビットの数値で、下位バイトがプロセスを kill したシグナル番号、上位バイ"
"トが終了ステータス ( シグナル番号がゼロの場合 ) --- の入ったタプルを返しま"
"す ; コアダンプファイルが生成された場合、下位バイトの最上桁ビットが立てられま"
"す。"

#: ../../library/os.rst:2212
msgid "The details of this function differ on Unix and Windows."
msgstr "この関数の詳細は Unix と Windows で異なります。"

#: ../../library/os.rst:2214
msgid ""
"On Unix: Wait for completion of a child process given by process id *pid*, "
"and return a tuple containing its process id and exit status indication "
"(encoded as for :func:`wait`).  The semantics of the call are affected by "
"the value of the integer *options*, which should be ``0`` for normal "
"operation."
msgstr ""
"Unix の場合 : プロセス id *pid* で与えられた子プロセスの完了を待機し、子プロ"
"セスのプロセス id と (:func:`wait` と同様にコード化された ) 終了ステータスイ"
"ンジケーターからなるタプルを返します。この関数の動作は *options* によって変わ"
"ります。通常の操作では ``0`` にします。"

#: ../../library/os.rst:2219
msgid ""
"If *pid* is greater than ``0``, :func:`waitpid` requests status information "
"for that specific process.  If *pid* is ``0``, the request is for the status "
"of any child in the process group of the current process.  If *pid* is "
"``-1``, the request pertains to any child of the current process.  If *pid* "
"is less than ``-1``, status is requested for any process in the process "
"group ``-pid`` (the absolute value of *pid*)."
msgstr ""
"*pid* が ``0`` よりも大きい場合、 :func:`waitpid` は特定のプロセスのステータ"
"ス情報を要求します。 *pid* が ``0`` の場合、現在のプロセスグループ内の任意の"
"子プロセスの状態に対する要求です。 *pid* が ``-1`` の場合、現在のプロセスの任"
"意の子プロセスに対する要求です。 *pid* が ``-1`` よりも小さい場合、プロセスグ"
"ループ ``-pid`` ( すなわち *pid* の絶対値 ) 内の任意のプロセスに対する要求で"
"す。"

#: ../../library/os.rst:2226
msgid ""
"An :exc:`OSError` is raised with the value of errno when the syscall returns "
"-1."
msgstr ""
"システムコールが -1 を返した時、 :exc:`OSError` を errno と共に送出します。"

#: ../../library/os.rst:2229
msgid ""
"On Windows: Wait for completion of a process given by process handle *pid*, "
"and return a tuple containing *pid*, and its exit status shifted left by 8 "
"bits (shifting makes cross-platform use of the function easier). A *pid* "
"less than or equal to ``0`` has no special meaning on Windows, and raises an "
"exception. The value of integer *options* has no effect. *pid* can refer to "
"any process whose id is known, not necessarily a child process. The :func:"
"`spawn\\* <spawnl>` functions called with :const:`P_NOWAIT` return suitable "
"process handles."
msgstr ""
"Windows では、プロセスハンドル *pid* を指定してプロセスの終了を待って、 "
"*pid* と、終了ステータスを 8bit 左シフトした値のタプルを返します。 ( シフト"
"は、この関数をクロスプラットフォームで利用しやすくするために行われます ) "
"``0`` 以下の *pid* は Windows では特別な意味を持っておらず、例外を発生させま"
"す。 *options* の値は効果がありません。 *pid* は、子プロセスで無くても、プロ"
"セス ID を知っているどんなプロセスでも参照することが可能です。 :func:"
"`spawn\\* <spawnl>` 関数を :const:`P_NOWAIT` と共に呼び出した場合、適切なプロ"
"セスハンドルが返されます。"

#: ../../library/os.rst:2240
msgid ""
"Similar to :func:`waitpid`, except no process id argument is given and a 3-"
"element tuple containing the child's process id, exit status indication, and "
"resource usage information is returned.  Refer to :mod:`resource`.\\ :func:"
"`~resource.getrusage` for details on resource usage information.  The option "
"argument is the same as that provided to :func:`waitpid` and :func:`wait4`."
msgstr ""
":func:`waitpid` に似ていますが、プロセス id を引数に取らず、子プロセス id 、"
"終了ステータスインジケータ、リソース使用情報の 3 要素からなるタプルを返しま"
"す。リソース使用情報の詳しい情報は :mod:`resource`. :func:`~resource."
"getrusage` を参照してください。 オプション引数は :func:`waitpid` および :"
"func:`wait4` と同じです。"

#: ../../library/os.rst:2254
msgid ""
"Similar to :func:`waitpid`, except a 3-element tuple, containing the child's "
"process id, exit status indication, and resource usage information is "
"returned. Refer to :mod:`resource`.\\ :func:`~resource.getrusage` for "
"details on resource usage information.  The arguments to :func:`wait4` are "
"the same as those provided to :func:`waitpid`."
msgstr ""
":func:`waitpid` に似ていますが、子プロセス id 、終了ステータスインジケータ、"
"リソース使用情報の 3 要素からなるタプルを返します。リソース使用情報の詳しい情"
"報は :mod:`resource`. :func:`~resource.getrusage` を参照してください。 :func:"
"`wait4` の引数は :func:`waitpid` に与えられるものと同じです。"

#: ../../library/os.rst:2267
msgid ""
"The option for :func:`waitpid` to return immediately if no child process "
"status is available immediately. The function returns ``(0, 0)`` in this "
"case."
msgstr ""
"子プロセス状態がすぐに取得できなかった場合に直ちに終了するようにするための :"
"func:`waitpid` のオプションです。この場合、関数は ``(0, 0)`` を返します。"

#: ../../library/os.rst:2275
msgid ""
"This option causes child processes to be reported if they have been "
"continued from a job control stop since their status was last reported."
msgstr ""
"このオプションによって子プロセスは前回状態が報告された後にジョブ制御による停"
"止状態から実行を再開された場合に報告されるようになります。"

#: ../../library/os.rst:2278
msgid "Availability: Some Unix systems."
msgstr "利用できる環境 : ある種の Unix システム。"

#: ../../library/os.rst:2285
msgid ""
"This option causes child processes to be reported if they have been stopped "
"but their current state has not been reported since they were stopped."
msgstr ""
"このオプションによって子プロセスは停止されていながら停止されてから状態が報告"
"されていない場合に報告されるようになります。"

#: ../../library/os.rst:2292
msgid ""
"The following functions take a process status code as returned by :func:"
"`system`, :func:`wait`, or :func:`waitpid` as a parameter.  They may be used "
"to determine the disposition of a process."
msgstr ""
"以下の関数は :func:`system` 、 :func:`wait` 、あるいは :func:`waitpid` が返す"
"プロセス状態コードを引数にとります。これらの関数はプロセスの配置を決めるため"
"に利用できます。"

#: ../../library/os.rst:2299
msgid ""
"Return ``True`` if a core dump was generated for the process, otherwise "
"return ``False``."
msgstr ""
"プロセスに対してコアダンプが生成されていた場合には ``True`` を、それ以外の場"
"合は ``False`` を返します。"

#: ../../library/os.rst:2309
msgid ""
"Return ``True`` if the process has been continued from a job control stop, "
"otherwise return ``False``."
msgstr ""
"プロセスがジョブ制御による停止状態から実行を再開された (continue) 場合に "
"``True`` を、それ以外の場合は ``False`` を返します。"

#: ../../library/os.rst:2319
msgid ""
"Return ``True`` if the process has been stopped, otherwise return ``False``."
msgstr ""
"プロセスが停止された (stop) 場合に ``True`` を、それ以外の場合は ``False`` を"
"返します。"

#: ../../library/os.rst:2327
msgid ""
"Return ``True`` if the process exited due to a signal, otherwise return "
"``False``."
msgstr ""
"プロセスがシグナルによって終了した (exit) 場合に ``True`` を、それ以外の場合"
"は ``False`` を返します。"

#: ../../library/os.rst:2335
msgid ""
"Return ``True`` if the process exited using the :manpage:`exit(2)` system "
"call, otherwise return ``False``."
msgstr ""
"プロセスが :manpage:`exit(2)` システムコールで終了した場合に ``True`` を、そ"
"れ以外の場合は ``False`` を返します。"

#: ../../library/os.rst:2343
msgid ""
"If ``WIFEXITED(status)`` is true, return the integer parameter to the :"
"manpage:`exit(2)` system call.  Otherwise, the return value is meaningless."
msgstr ""
"``WIFEXITED(status)`` が真の場合、 :manpage:`exit(2)` システムコールに渡され"
"た整数パラメーターを返します。そうでない場合、返される値には意味がありませ"
"ん。"

#: ../../library/os.rst:2351
msgid "Return the signal which caused the process to stop."
msgstr "プロセスを停止させたシグナル番号を返します。"

#: ../../library/os.rst:2358
msgid "Return the signal which caused the process to exit."
msgstr "プロセスを終了させたシグナル番号を返します。"

#: ../../library/os.rst:2366
msgid "Miscellaneous System Information"
msgstr "雑多なシステム情報"

#: ../../library/os.rst:2371
msgid ""
"Return string-valued system configuration values. *name* specifies the "
"configuration value to retrieve; it may be a string which is the name of a "
"defined system value; these names are specified in a number of standards "
"(POSIX, Unix 95, Unix 98, and others).  Some platforms define additional "
"names as well. The names known to the host operating system are given as the "
"keys of the ``confstr_names`` dictionary.  For configuration variables not "
"included in that mapping, passing an integer for *name* is also accepted."
msgstr ""
"システム設定値を文字列で返します。 *name* には取得したい設定名を指定します ; "
"この値は定義済みのシステム値名を表す文字列にすることができます ; 名前は多くの"
"標準 (POSIX.1 、 Unix 95 、 Unix 98 その他 ) で定義されています。ホストオペ"
"レーティングシステムの関知する名前は ``confstr_names`` 辞書のキーとして与えら"
"れています。このマップ型オブジェクトに入っていない設定変数については、 "
"*name* に整数を渡してもかまいません。"

#: ../../library/os.rst:2379
msgid ""
"If the configuration value specified by *name* isn't defined, ``None`` is "
"returned."
msgstr ""
"*name* に指定された設定値が定義されていない場合、 ``None`` を返します。"

#: ../../library/os.rst:2382
msgid ""
"If *name* is a string and is not known, :exc:`ValueError` is raised.  If a "
"specific value for *name* is not supported by the host system, even if it is "
"included in ``confstr_names``, an :exc:`OSError` is raised with :const:"
"`errno.EINVAL` for the error number."
msgstr ""
"*name* が文字列で、かつ不明の場合、 :exc:`ValueError` を送出します。 *name* "
"の指定値がホストシステムでサポートされておらず、 ``confstr_names`` にも入って"
"いない場合、 :const:`errno.EINVAL` をエラー番号として :exc:`OSError` を送出し"
"ます。"

#: ../../library/os.rst:2387
msgid "Availability: Unix"
msgstr "利用できる環境 : Unix"

#: ../../library/os.rst:2392
msgid ""
"Dictionary mapping names accepted by :func:`confstr` to the integer values "
"defined for those names by the host operating system. This can be used to "
"determine the set of names known to the system."
msgstr ""
":func:`confstr` が受理する名前を、ホストオペレーティングシステムで定義されて"
"いる整数値に対応付けている辞書です。この辞書はシステムでどの設定名が定義され"
"ているかを決定するために利用できます。"

#: ../../library/os.rst:2401
msgid ""
"Return the number of processes in the system run queue averaged over the "
"last 1, 5, and 15 minutes or raises :exc:`OSError` if the load average was "
"unobtainable."
msgstr ""
"過去 1 分、 5 分、および 15 分間の、システムの実行キューの平均プロセス数を返"
"します。平均負荷が得られない場合には :exc:`OSError` を送出します。"

#: ../../library/os.rst:2412
msgid ""
"Return integer-valued system configuration values. If the configuration "
"value specified by *name* isn't defined, ``-1`` is returned.  The comments "
"regarding the *name* parameter for :func:`confstr` apply here as well; the "
"dictionary that provides information on the known names is given by "
"``sysconf_names``."
msgstr ""
"整数値のシステム設定値を返します。 *name* で指定された設定値が定義されていな"
"い場合、 ``-1`` が返されます。 *name* に関するコメントとしては、 :func:"
"`confstr` で述べた内容が同様に当てはまります ; 既知の設定名についての情報を与"
"える辞書は ``sysconf_names`` で与えられています。"

#: ../../library/os.rst:2422
msgid ""
"Dictionary mapping names accepted by :func:`sysconf` to the integer values "
"defined for those names by the host operating system. This can be used to "
"determine the set of names known to the system."
msgstr ""
":func:`sysconf` が受理する名前を、ホストオペレーティングシステムで定義されて"
"いる整数値に対応付けている辞書です。この辞書はシステムでどの設定名が定義され"
"ているかを決定するために利用できます。"

#: ../../library/os.rst:2428
msgid ""
"The following data values are used to support path manipulation operations.  "
"These are defined for all platforms."
msgstr ""
"以下のデータ値はパス名編集操作をサポートするために利用されます。これらの値は"
"すべてのプラットフォームで定義されています。"

#: ../../library/os.rst:2431
msgid ""
"Higher-level operations on pathnames are defined in the :mod:`os.path` "
"module."
msgstr ""
"パス名に対する高レベルの操作は :mod:`os.path` モジュールで定義されています。"

#: ../../library/os.rst:2436
msgid ""
"The constant string used by the operating system to refer to the current "
"directory. This is ``'.'`` for Windows and POSIX. Also available via :mod:"
"`os.path`."
msgstr ""
"現在のディレクトリ参照するためにオペレーティングシステムで使われる文字列定数"
"です。 POSIX と Windows では ``'.'`` になります。 :mod:`os.path` からも利用で"
"きます。"

#: ../../library/os.rst:2443
msgid ""
"The constant string used by the operating system to refer to the parent "
"directory. This is ``'..'`` for Windows and POSIX. Also available via :mod:"
"`os.path`."
msgstr ""
"親ディレクトリを参照するためにオペレーティングシステムで使われる文字列定数で"
"す。 POSIX と Windows では ``'..'`` になります。 :mod:`os.path` からも利用で"
"きます。"

#: ../../library/os.rst:2450
msgid ""
"The character used by the operating system to separate pathname components. "
"This is ``'/'`` for POSIX and ``'\\\\'`` for Windows.  Note that knowing "
"this is not sufficient to be able to parse or concatenate pathnames --- use :"
"func:`os.path.split` and :func:`os.path.join` --- but it is occasionally "
"useful. Also available via :mod:`os.path`."
msgstr ""
"パス名を要素に分割するためにオペレーティングシステムで利用されている文字で"
"す。例えば POSIX では ``'/'`` で、 Windows では ``'\\\\'`` です。しかし、この"
"ことを知っているだけではパス名を解析したり、パス名同士を結合したりするには不"
"十分です --- こうした操作には :func:`os.path.split` や :func:`os.path.join` "
"を使用してください --- が、たまに便利なこともあります。 :mod:`os.path` からも"
"利用できます。"

#: ../../library/os.rst:2459
msgid ""
"An alternative character used by the operating system to separate pathname "
"components, or ``None`` if only one separator character exists.  This is set "
"to ``'/'`` on Windows systems where ``sep`` is a backslash. Also available "
"via :mod:`os.path`."
msgstr ""
"文字パス名を要素に分割する際にオペレーティングシステムで利用されるもう一つの"
"文字で、分割文字が一つしかない場合には ``None`` になります。この値は ``sep`` "
"がバックスラッシュとなっている DOS や Windows システムでは ``'/'`` に設定され"
"ています。 :mod:`os.path` からも利用できます。"

#: ../../library/os.rst:2467
msgid ""
"The character which separates the base filename from the extension; for "
"example, the ``'.'`` in :file:`os.py`. Also available via :mod:`os.path`."
msgstr ""
"ベースのファイル名と拡張子を分ける文字です。例えば、 :file:`os.py` であれば "
"``'.'`` です。 :mod:`os.path` からも利用できます。"

#: ../../library/os.rst:2475
msgid ""
"The character conventionally used by the operating system to separate search "
"path components (as in :envvar:`PATH`), such as ``':'`` for POSIX or ``';'`` "
"for Windows. Also available via :mod:`os.path`."
msgstr ""
"(:envvar:`PATH` のような ) サーチパス内の要素を分割するためにオペレーティング"
"システムが慣習的に用いる文字で、 POSIX における ``':'`` や DOS および "
"Windows における ``';'`` に相当します。 :mod:`os.path` からも利用できます。"

#: ../../library/os.rst:2482
msgid ""
"The default search path used by :func:`exec\\*p\\* <execl>` and :func:"
"`spawn\\*p\\* <spawnl>` if the environment doesn't have a ``'PATH'`` key. "
"Also available via :mod:`os.path`."
msgstr ""
":func:`exec\\*p\\* <execl>` や :func:`spawn\\*p\\* <spawnl>` において、環境変"
"数辞書内に ``'PATH'`` キーがない場合に使われる標準設定のサーチパスです。 :"
"mod:`os.path` からも利用できます。"

#: ../../library/os.rst:2489
msgid ""
"The string used to separate (or, rather, terminate) lines on the current "
"platform.  This may be a single character, such as ``'\\n'`` for POSIX, or "
"multiple characters, for example, ``'\\r\\n'`` for Windows. Do not use *os."
"linesep* as a line terminator when writing files opened in text mode (the "
"default); use a single ``'\\n'`` instead, on all platforms."
msgstr ""
"現在のプラットフォーム上で行を分割 ( あるいは終端 ) するために用いられている"
"文字列です。この値は例えば POSIX での ``'\\n'`` や Mac OS での ``'\\r'`` のよ"
"うに、単一の文字にもなりますし、例えば Windows での ``'\\r\\n'`` のように複数"
"の文字列にもなります。テキストモードで開いたファイルに書き込む時には、 *os."
"linesep* を利用しないでください。すべてのプラットフォームで、単一の "
"``'\\n'`` を使用してください。"

#: ../../library/os.rst:2498
msgid ""
"The file path of the null device. For example: ``'/dev/null'`` for POSIX, "
"``'nul'`` for Windows.  Also available via :mod:`os.path`."
msgstr ""
"ヌルデバイスのファイルパスです。例えば POSIX では ``'/dev/null'`` で、 "
"Windows では ``'nul'`` です。この値は :mod:`os.path` からも利用できます。"

#: ../../library/os.rst:2507
msgid "Miscellaneous Functions"
msgstr "雑多な関数"

#: ../../library/os.rst:2512
msgid "Return a string of *n* random bytes suitable for cryptographic use."
msgstr ""
"暗号に関する用途に適した *n* バイトからなるランダムな文字列を返します。"

#: ../../library/os.rst:2514
msgid ""
"This function returns random bytes from an OS-specific randomness source.  "
"The returned data should be unpredictable enough for cryptographic "
"applications, though its exact quality depends on the OS implementation.  On "
"a UNIX-like system this will query ``/dev/urandom``, and on Windows it will "
"use ``CryptGenRandom()``.  If a randomness source is not found, :exc:"
"`NotImplementedError` will be raised."
msgstr ""
"この関数は OS 固有の乱数発生源からランダムなバイト列を生成して返します。この"
"関数の返すデータは暗号を用いたアプリケーションで十分利用できる程度に予測不能"
"ですが、実際のクオリティは OS の実装によって異なります。Unix系のシステムでは "
"``/dev/urandom`` への問い合わせを行い、Windows では ``CryptGenRandom()`` を使"
"います。乱数発生源が見つからない場合、 :exc:`NotImplementedError` を送出しま"
"す。"

#: ../../library/os.rst:2521
msgid ""
"For an easy-to-use interface to the random number generator provided by your "
"platform, please see :class:`random.SystemRandom`."
msgstr ""
"プラットフォームが提供している乱数発生器へのインターフェイスについては、 :"
"class:`random.SystemRandom` を参照してください。"
