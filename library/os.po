# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# mollinaca, 2021
# Osamu NAKAMURA, 2021
# Masato HASHIMOTO <cabezon.hashimoto@gmail.com>, 2023
# Takeshi Nakazato, 2024
# 石井明久, 2024
# righteous, 2024
# tomo, 2024
# Takanori Suzuki <takanori@takanory.net>, 2024
# Tetsuo Koyama <tkoyama010@gmail.com>, 2024
# Arihiro TAKASE, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-11 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:10+0000\n"
"Last-Translator: Arihiro TAKASE, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/os.rst:2
msgid ":mod:`!os` --- Miscellaneous operating system interfaces"
msgstr ":mod:`!os` --- 雑多なオペレーティングシステムインターフェース"

#: ../../library/os.rst:7
msgid "**Source code:** :source:`Lib/os.py`"
msgstr "**ソースコード:** :source:`Lib/os.py`"

#: ../../library/os.rst:11
msgid ""
"This module provides a portable way of using operating system dependent "
"functionality.  If you just want to read or write a file see :func:`open`, "
"if you want to manipulate paths, see the :mod:`os.path` module, and if you "
"want to read all the lines in all the files on the command line see the :mod:"
"`fileinput` module.  For creating temporary files and directories see the :"
"mod:`tempfile` module, and for high-level file and directory handling see "
"the :mod:`shutil` module."
msgstr ""
"このモジュールは、 OS 依存の機能を利用するポータブルな方法を提供します。単純"
"なファイルの読み書きについては、 :func:`open` を参照してください。パス操作に"
"ついては、 :mod:`os.path` モジュールを参照してください。コマンドラインに与え"
"られたすべてのファイルから行を読み込んでいくには、 :mod:`fileinput` モジュー"
"ルを参照してください。一時ファイルや一時ディレクトリの作成については、 :mod:"
"`tempfile` モジュールを参照してください。高水準のファイルとディレクトリの操作"
"については、 :mod:`shutil` モジュールを参照してください。"

#: ../../library/os.rst:19
msgid "Notes on the availability of these functions:"
msgstr "利用可能性に関する注意 :"

#: ../../library/os.rst:21
msgid ""
"The design of all built-in operating system dependent modules of Python is "
"such that as long as the same functionality is available, it uses the same "
"interface; for example, the function ``os.stat(path)`` returns stat "
"information about *path* in the same format (which happens to have "
"originated with the POSIX interface)."
msgstr ""
"Python の、すべての OS 依存モジュールの設計方針は、可能な限り同一のインター"
"フェースで同一の機能を利用できるようにする、というものです。例えば、 ``os."
"stat(path)`` は *path* に関する stat 情報を、 (POSIX を元にした ) 同じフォー"
"マットで返します。"

#: ../../library/os.rst:27
msgid ""
"Extensions peculiar to a particular operating system are also available "
"through the :mod:`os` module, but using them is of course a threat to "
"portability."
msgstr ""
"特定のオペレーティングシステム固有の拡張も :mod:`os` を介して利用することがで"
"きますが、これらの利用はもちろん、可搬性を脅かします。"

#: ../../library/os.rst:31
msgid ""
"All functions accepting path or file names accept both bytes and string "
"objects, and result in an object of the same type, if a path or file name is "
"returned."
msgstr ""
"パスやファイル名を受け付けるすべての関数は、バイト列型および文字列型両方のオ"
"ブジェクトを受け付け、パスやファイル名を返す時は、同じ型のオブジェクトを返し"
"ます。"

#: ../../library/os.rst:35
msgid ""
"On VxWorks, os.popen, os.fork, os.execv and os.spawn*p* are not supported."
msgstr ""
"VxWorks では、os.popen, os.fork, os.execv および os.spawn*p* はサポートされて"
"いません。"

#: ../../library/os.rst:37
msgid ""
"On WebAssembly platforms, Android and iOS, large parts of the :mod:`os` "
"module are not available or behave differently. APIs related to processes (e."
"g. :func:`~os.fork`, :func:`~os.execve`) and resources (e.g. :func:`~os."
"nice`) are not available. Others like :func:`~os.getuid` and :func:`~os."
"getpid` are emulated or stubs. WebAssembly platforms also lack support for "
"signals (e.g. :func:`~os.kill`, :func:`~os.wait`)."
msgstr ""

#: ../../library/os.rst:47
msgid ""
"All functions in this module raise :exc:`OSError` (or subclasses thereof) in "
"the case of invalid or inaccessible file names and paths, or other arguments "
"that have the correct type, but are not accepted by the operating system."
msgstr ""
"このモジュール内のすべての関数は、間違った、あるいはアクセス出来ないファイル"
"名やファイルパス、その他型が合っていても OS が受理しない引数に対して、 :exc:"
"`OSError` (またはそのサブクラス)を送出します。"

#: ../../library/os.rst:53
msgid "An alias for the built-in :exc:`OSError` exception."
msgstr "組み込みの :exc:`OSError` 例外に対するエイリアスです。"

#: ../../library/os.rst:58
msgid ""
"The name of the operating system dependent module imported.  The following "
"names have currently been registered: ``'posix'``, ``'nt'``, ``'java'``."
msgstr ""
"import されているオペレーティングシステムに依存するモジュールの名前です。現在"
"次の名前が登録されています: ``'posix'``, ``'nt'``, ``'java'``。"

#: ../../library/os.rst:63
msgid ""
":data:`sys.platform` has a finer granularity.  :func:`os.uname` gives system-"
"dependent version information."
msgstr ""
":data:`sys.platform` はより細かな粒度を持っています。 :func:`os.uname` はシス"
"テム依存のバージョン情報を提供します。"

#: ../../library/os.rst:66
msgid ""
"The :mod:`platform` module provides detailed checks for the system's "
"identity."
msgstr ""
":mod:`platform` モジュールはシステムの詳細な識別情報をチェックする機能を提供"
"しています。"

#: ../../library/os.rst:74
msgid "File Names, Command Line Arguments, and Environment Variables"
msgstr "ファイル名、コマンドライン引数、および環境変数"

#: ../../library/os.rst:76
msgid ""
"In Python, file names, command line arguments, and environment variables are "
"represented using the string type. On some systems, decoding these strings "
"to and from bytes is necessary before passing them to the operating system. "
"Python uses the :term:`filesystem encoding and error handler` to perform "
"this conversion (see :func:`sys.getfilesystemencoding`)."
msgstr ""
"Python では、ファイル名、コマンドライン引数、および環境変数を表すのに文字列型"
"を使用します。一部のシステムでは、これらをオペレーティングシステムに渡す前"
"に、文字列からバイト列へ、またはその逆のデコードが必要です。Python はこの変換"
"を行うために :term:`filesystem encoding and error handler` を使用します (:"
"func:`sys.getfilesystemencoding` 参照)。"

#: ../../library/os.rst:82
msgid ""
"The :term:`filesystem encoding and error handler` are configured at Python "
"startup by the :c:func:`PyConfig_Read` function: see :c:member:`~PyConfig."
"filesystem_encoding` and :c:member:`~PyConfig.filesystem_errors` members of :"
"c:type:`PyConfig`."
msgstr ""

#: ../../library/os.rst:87
msgid ""
"On some systems, conversion using the file system encoding may fail. In this "
"case, Python uses the :ref:`surrogateescape encoding error handler "
"<surrogateescape>`, which means that undecodable bytes are replaced by a "
"Unicode character U+DC\\ *xx* on decoding, and these are again translated to "
"the original byte on encoding."
msgstr ""
"一部のシステムでは、ファイルシステムのエンコーディングを使用して変換すると失"
"敗する場合があります。この場合、Python は  :ref:`surrogateescape エンコーディ"
"ングエラーハンドラー <surrogateescape>` を使用します。これは、デコード時にデ"
"コードできないバイト列は Unicode 文字 U+DC\\ *xx* に置き換えられ、それらはエ"
"ンコード時に再び元のバイト列に変換されることを意味します。"

#: ../../library/os.rst:95
msgid ""
"The :term:`file system encoding <filesystem encoding and error handler>` "
"must guarantee to successfully decode all bytes below 128. If the file "
"system encoding fails to provide this guarantee, API functions can raise :"
"exc:`UnicodeError`."
msgstr ""
":term:`file system encoding <filesystem encoding and error handler>` では、す"
"べてが 128 バイト以下に正常にデコードされることが保証されなくてはなりません。"
"ファイルシステムのエンコーディングでこれが保証されなかった場合は、API 関数"
"が :exc:`UnicodeError` を送出します。"

#: ../../library/os.rst:100
msgid "See also the :term:`locale encoding`."
msgstr ""

#: ../../library/os.rst:106
msgid "Python UTF-8 Mode"
msgstr ""

#: ../../library/os.rst:108
msgid "See :pep:`540` for more details."
msgstr "より詳しくは :pep:`540` を参照してください。"

#: ../../library/os.rst:111
msgid ""
"The Python UTF-8 Mode ignores the :term:`locale encoding` and forces the "
"usage of the UTF-8 encoding:"
msgstr ""

#: ../../library/os.rst:114
msgid ""
"Use UTF-8 as the :term:`filesystem encoding <filesystem encoding and error "
"handler>`."
msgstr ""

#: ../../library/os.rst:116
msgid ":func:`sys.getfilesystemencoding` returns ``'utf-8'``."
msgstr ""

#: ../../library/os.rst:117
msgid ""
":func:`locale.getpreferredencoding` returns ``'utf-8'`` (the *do_setlocale* "
"argument has no effect)."
msgstr ""

#: ../../library/os.rst:119
msgid ""
":data:`sys.stdin`, :data:`sys.stdout`, and :data:`sys.stderr` all use UTF-8 "
"as their text encoding, with the ``surrogateescape`` :ref:`error handler "
"<error-handlers>` being enabled for :data:`sys.stdin` and :data:`sys.stdout` "
"(:data:`sys.stderr` continues to use ``backslashreplace`` as it does in the "
"default locale-aware mode)"
msgstr ""

#: ../../library/os.rst:124
msgid ""
"On Unix, :func:`os.device_encoding` returns ``'utf-8'`` rather than the "
"device encoding."
msgstr ""

#: ../../library/os.rst:127
msgid ""
"Note that the standard stream settings in UTF-8 mode can be overridden by :"
"envvar:`PYTHONIOENCODING` (just as they can be in the default locale-aware "
"mode)."
msgstr ""

#: ../../library/os.rst:131
msgid ""
"As a consequence of the changes in those lower level APIs, other higher "
"level APIs also exhibit different default behaviours:"
msgstr ""

#: ../../library/os.rst:134
msgid ""
"Command line arguments, environment variables and filenames are decoded to "
"text using the UTF-8 encoding."
msgstr ""

#: ../../library/os.rst:136
msgid ":func:`os.fsdecode` and :func:`os.fsencode` use the UTF-8 encoding."
msgstr ""

#: ../../library/os.rst:137
msgid ""
":func:`open`, :func:`io.open`, and :func:`codecs.open` use the UTF-8 "
"encoding by default. However, they still use the strict error handler by "
"default so that attempting to open a binary file in text mode is likely to "
"raise an exception rather than producing nonsense data."
msgstr ""

#: ../../library/os.rst:142
msgid ""
"The :ref:`Python UTF-8 Mode <utf8-mode>` is enabled if the LC_CTYPE locale "
"is ``C`` or ``POSIX`` at Python startup (see the :c:func:`PyConfig_Read` "
"function)."
msgstr ""

#: ../../library/os.rst:146
msgid ""
"It can be enabled or disabled using the :option:`-X utf8 <-X>` command line "
"option and the :envvar:`PYTHONUTF8` environment variable."
msgstr ""

#: ../../library/os.rst:149
msgid ""
"If the :envvar:`PYTHONUTF8` environment variable is not set at all, then the "
"interpreter defaults to using the current locale settings, *unless* the "
"current locale is identified as a legacy ASCII-based locale (as described "
"for :envvar:`PYTHONCOERCECLOCALE`), and locale coercion is either disabled "
"or fails. In such legacy locales, the interpreter will default to enabling "
"UTF-8 mode unless explicitly instructed not to do so."
msgstr ""

#: ../../library/os.rst:156
msgid ""
"The Python UTF-8 Mode can only be enabled at the Python startup. Its value "
"can be read from :data:`sys.flags.utf8_mode <sys.flags>`."
msgstr ""

#: ../../library/os.rst:159
msgid ""
"See also the :ref:`UTF-8 mode on Windows <win-utf8-mode>` and the :term:"
"`filesystem encoding and error handler`."
msgstr ""

#: ../../library/os.rst:164
msgid ":pep:`686`"
msgstr ""

#: ../../library/os.rst:165
msgid "Python 3.15 will make :ref:`utf8-mode` default."
msgstr ""

#: ../../library/os.rst:171
msgid "Process Parameters"
msgstr "プロセスのパラメーター"

#: ../../library/os.rst:173
msgid ""
"These functions and data items provide information and operate on the "
"current process and user."
msgstr ""
"これらの関数とデータアイテムは、現在のプロセスおよびユーザーに対する情報提供"
"および操作のための機能を提供しています。"

#: ../../library/os.rst:179
msgid ""
"Return the filename corresponding to the controlling terminal of the process."
msgstr "プロセスの制御端末に対応するファイル名を返します。"

#: ../../library/os.rst:181 ../../library/os.rst:322 ../../library/os.rst:337
#: ../../library/os.rst:358 ../../library/os.rst:367 ../../library/os.rst:376
#: ../../library/os.rst:389 ../../library/os.rst:398 ../../library/os.rst:426
#: ../../library/os.rst:434 ../../library/os.rst:442 ../../library/os.rst:462
#: ../../library/os.rst:480 ../../library/os.rst:491 ../../library/os.rst:503
#: ../../library/os.rst:512 ../../library/os.rst:522 ../../library/os.rst:533
#: ../../library/os.rst:545 ../../library/os.rst:579 ../../library/os.rst:586
#: ../../library/os.rst:593 ../../library/os.rst:602 ../../library/os.rst:639
#: ../../library/os.rst:652 ../../library/os.rst:661 ../../library/os.rst:678
#: ../../library/os.rst:687 ../../library/os.rst:694 ../../library/os.rst:703
#: ../../library/os.rst:712 ../../library/os.rst:719 ../../library/os.rst:726
#: ../../library/os.rst:735 ../../library/os.rst:792 ../../library/os.rst:831
#: ../../library/os.rst:953 ../../library/os.rst:979 ../../library/os.rst:992
#: ../../library/os.rst:1009 ../../library/os.rst:1027
#: ../../library/os.rst:1038 ../../library/os.rst:1061
#: ../../library/os.rst:1082 ../../library/os.rst:1094
#: ../../library/os.rst:1105 ../../library/os.rst:1118
#: ../../library/os.rst:1139 ../../library/os.rst:1160
#: ../../library/os.rst:1172 ../../library/os.rst:1183
#: ../../library/os.rst:1244 ../../library/os.rst:1367
#: ../../library/os.rst:1379 ../../library/os.rst:1393
#: ../../library/os.rst:1403 ../../library/os.rst:1418
#: ../../library/os.rst:1433 ../../library/os.rst:1446
#: ../../library/os.rst:1463 ../../library/os.rst:1489
#: ../../library/os.rst:1506 ../../library/os.rst:1520
#: ../../library/os.rst:1535 ../../library/os.rst:1547
#: ../../library/os.rst:1574 ../../library/os.rst:1586
#: ../../library/os.rst:1596 ../../library/os.rst:1610
#: ../../library/os.rst:1662 ../../library/os.rst:1682
#: ../../library/os.rst:1691 ../../library/os.rst:1703
#: ../../library/os.rst:1738 ../../library/os.rst:1762
#: ../../library/os.rst:1772 ../../library/os.rst:1780
#: ../../library/os.rst:1789 ../../library/os.rst:1800
#: ../../library/os.rst:1837 ../../library/os.rst:1864
#: ../../library/os.rst:1915 ../../library/os.rst:1921
#: ../../library/os.rst:2087 ../../library/os.rst:2164
#: ../../library/os.rst:2181 ../../library/os.rst:2195
#: ../../library/os.rst:2221 ../../library/os.rst:2239
#: ../../library/os.rst:2255 ../../library/os.rst:2271
#: ../../library/os.rst:2334 ../../library/os.rst:2358
#: ../../library/os.rst:2378 ../../library/os.rst:2514
#: ../../library/os.rst:2536 ../../library/os.rst:2580
#: ../../library/os.rst:2592 ../../library/os.rst:2614
#: ../../library/os.rst:3322 ../../library/os.rst:3456
#: ../../library/os.rst:3479 ../../library/os.rst:3493
#: ../../library/os.rst:3712 ../../library/os.rst:3737
#: ../../library/os.rst:3762 ../../library/os.rst:3816
#: ../../library/os.rst:3825 ../../library/os.rst:3834
#: ../../library/os.rst:3842 ../../library/os.rst:3851
#: ../../library/os.rst:3860 ../../library/os.rst:3932
#: ../../library/os.rst:3995 ../../library/os.rst:4005
#: ../../library/os.rst:4023 ../../library/os.rst:4032
#: ../../library/os.rst:4042 ../../library/os.rst:4052
#: ../../library/os.rst:4062 ../../library/os.rst:4073
#: ../../library/os.rst:4218 ../../library/os.rst:4287
#: ../../library/os.rst:4322 ../../library/os.rst:4330
#: ../../library/os.rst:4337 ../../library/os.rst:4344
#: ../../library/os.rst:4351 ../../library/os.rst:4358
#: ../../library/os.rst:4365 ../../library/os.rst:4372
#: ../../library/os.rst:4380 ../../library/os.rst:4388
#: ../../library/os.rst:4395 ../../library/os.rst:4402
#: ../../library/os.rst:4411 ../../library/os.rst:4419
#: ../../library/os.rst:4427 ../../library/os.rst:4434
#: ../../library/os.rst:4441 ../../library/os.rst:4490
#: ../../library/os.rst:4517 ../../library/os.rst:4541
#: ../../library/os.rst:4557 ../../library/os.rst:4564
#: ../../library/os.rst:4575 ../../library/os.rst:4585
#: ../../library/os.rst:4594 ../../library/os.rst:4626
#: ../../library/os.rst:4734 ../../library/os.rst:4750
#: ../../library/os.rst:4783 ../../library/os.rst:4852
#: ../../library/os.rst:4871 ../../library/os.rst:4882
#: ../../library/os.rst:4894 ../../library/os.rst:4939
#: ../../library/os.rst:4976 ../../library/os.rst:4999
#: ../../library/os.rst:5020 ../../library/os.rst:5054
#: ../../library/os.rst:5095 ../../library/os.rst:5115
#: ../../library/os.rst:5129 ../../library/os.rst:5146
#: ../../library/os.rst:5161 ../../library/os.rst:5172
#: ../../library/os.rst:5184 ../../library/os.rst:5197
#: ../../library/os.rst:5206 ../../library/os.rst:5216
#: ../../library/os.rst:5229 ../../library/os.rst:5264
#: ../../library/os.rst:5280 ../../library/os.rst:5291
#: ../../library/os.rst:5303 ../../library/os.rst:5310
#: ../../library/os.rst:5319 ../../library/os.rst:5328
#: ../../library/os.rst:5337 ../../library/os.rst:5346
#: ../../library/os.rst:5496 ../../library/os.rst:5505
#: ../../library/os.rst:5529 ../../library/os.rst:5556
#: ../../library/os.rst:5565 ../../library/os.rst:5688
msgid "Availability"
msgstr ""

#: ../../library/os.rst:186
msgid ""
"A :term:`mapping` object where keys and values are strings that represent "
"the process environment.  For example, ``environ['HOME']`` is the pathname "
"of your home directory (on some platforms), and is equivalent to "
"``getenv(\"HOME\")`` in C."
msgstr ""

#: ../../library/os.rst:191
msgid ""
"This mapping is captured the first time the :mod:`os` module is imported, "
"typically during Python startup as part of processing :file:`site.py`.  "
"Changes to the environment made after this time are not reflected in :data:"
"`os.environ`, except for changes made by modifying :data:`os.environ` "
"directly."
msgstr ""
"このマップ型の内容は、 :mod:`os` モジュールの最初の import の時点、通常は "
"Python の起動時に :file:`site.py` が処理される中で取り込まれます。それ以後に"
"変更された環境変数は :data:`os.environ` を直接変更しない限り :data:`os."
"environ` には反映されません。"

#: ../../library/os.rst:196
msgid ""
"This mapping may be used to modify the environment as well as query the "
"environment.  :func:`putenv` will be called automatically when the mapping "
"is modified."
msgstr ""
"このマップ型オブジェクトは環境変数に対する変更に使うこともできます。 :func:"
"`putenv` はマップ型オブジェクトが修正される時に、自動的に呼ばれることになりま"
"す。"

#: ../../library/os.rst:200
msgid ""
"On Unix, keys and values use :func:`sys.getfilesystemencoding` and "
"``'surrogateescape'`` error handler. Use :data:`environb` if you would like "
"to use a different encoding."
msgstr ""
"Unix では、キーと値に :func:`sys.getfilesystemencoding`、エラーハンドラーに "
"``'surrogateescape'`` を使用します。異なるエンコーディングを使用したい場合"
"は :data:`environb` を使用します。"

#: ../../library/os.rst:204
msgid ""
"On Windows, the keys are converted to uppercase. This also applies when "
"getting, setting, or deleting an item. For example, ``environ['monty'] = "
"'python'`` maps the key ``'MONTY'`` to the value ``'python'``."
msgstr ""

#: ../../library/os.rst:211
msgid ""
"Calling :func:`putenv` directly does not change :data:`os.environ`, so it's "
"better to modify :data:`os.environ`."
msgstr ""
":func:`putenv` を直接呼び出しても :data:`os.environ` の内容は変わらないの"
"で、 :data:`os.environ` を直接変更する方が良いです。"

#: ../../library/os.rst:216
msgid ""
"On some platforms, including FreeBSD and macOS, setting ``environ`` may "
"cause memory leaks.  Refer to the system documentation for :c:func:`!putenv`."
msgstr ""
"FreeBSD や macOS など一部のプラットフォームでは ``environ`` の値を変更すると"
"メモリリークが発生する可能性があります。各システムのドキュメントで :c:func:`!"
"putenv` の項目を参照してください。 "

#: ../../library/os.rst:220
msgid ""
"You can delete items in this mapping to unset environment variables. :func:"
"`unsetenv` will be called automatically when an item is deleted from :data:"
"`os.environ`, and when one of the :meth:`pop` or :meth:`clear` methods is "
"called."
msgstr ""
"このマップ型オブジェクトからアイテムを削除することで環境変数を消すことができ"
"ます。 :func:`unsetenv` は :data:`os.environ` からアイテムが取り除かれた時に"
"自動的に呼ばれます。 :meth:`pop` または :meth:`clear` が呼ばれた時も同様で"
"す。"

#: ../../library/os.rst:225 ../../library/os.rst:241
msgid ""
"Updated to support :pep:`584`'s merge (``|``) and update (``|=``) operators."
msgstr ""
"更新され :pep:`584` の合成演算子 (``|``) と更新演算子 (``|=``) がサポートされ"
"ました。"

#: ../../library/os.rst:231
msgid ""
"Bytes version of :data:`environ`: a :term:`mapping` object where both keys "
"and values are :class:`bytes` objects representing the process environment. :"
"data:`environ` and :data:`environb` are synchronized (modifying :data:"
"`environb` updates :data:`environ`, and vice versa)."
msgstr ""

#: ../../library/os.rst:236
msgid ""
":data:`environb` is only available if :const:`supports_bytes_environ` is "
"``True``."
msgstr ""
":data:`environb` は :const:`supports_bytes_environ` が ``True`` の場合のみ利"
"用可能です。"

#: ../../library/os.rst:250
msgid "These functions are described in :ref:`os-file-dir`."
msgstr "これらの関数は、 :ref:`os-file-dir` 節で説明されています。"

#: ../../library/os.rst:255
msgid ""
"Encode :term:`path-like <path-like object>` *filename* to the :term:"
"`filesystem encoding and error handler`; return :class:`bytes` unchanged."
msgstr ""
":term:`path-like <path-like object>` な *filename* を :term:`ファイルシステム"
"のエンコーディングとエラーハンドラ <filesystem encoding and error handler>` "
"にエンコードします。未変更の :class:`bytes` オブジェクトを返します。"

#: ../../library/os.rst:259
msgid ":func:`fsdecode` is the reverse function."
msgstr ":func:`fsdecode` はこの逆変換を行う関数です。"

#: ../../library/os.rst:263 ../../library/os.rst:278
msgid ""
"Support added to accept objects implementing the :class:`os.PathLike` "
"interface."
msgstr ""
":class:`os.PathLike` インターフェースを実装したオブジェクトを受け入れるように"
"なりました。"

#: ../../library/os.rst:270
msgid ""
"Decode the :term:`path-like <path-like object>` *filename* from the :term:"
"`filesystem encoding and error handler`; return :class:`str` unchanged."
msgstr ""
":term:`path-like <path-like object>` な *filename* を :term:`ファイルシステム"
"のエンコーディングとエラーハンドラ <filesystem encoding and error handler>` "
"からデコードします。未変更の :class:`str` オブジェクトを返します。"

#: ../../library/os.rst:274
msgid ":func:`fsencode` is the reverse function."
msgstr ":func:`fsencode` はこの逆変換を行う関数です。"

#: ../../library/os.rst:285
msgid "Return the file system representation of the path."
msgstr "path のファイルシステム表現を返します。"

#: ../../library/os.rst:287
msgid ""
"If :class:`str` or :class:`bytes` is passed in, it is returned unchanged. "
"Otherwise :meth:`~os.PathLike.__fspath__` is called and its value is "
"returned as long as it is a :class:`str` or :class:`bytes` object. In all "
"other cases, :exc:`TypeError` is raised."
msgstr ""
"もし :class:`str` か :class:`bytes:` のオブジェクトが渡された場合は、変更せず"
"にそのまま返します。さもなければ、 :meth:`~os.PathLike.__fspath__` が呼び出さ"
"れ、その戻り値が :class:`str` か :class:`bytes` のオブジェクトであれば、その"
"値を返します。他のすべてのケースでは :exc:`TypeError` が送出されます。"

#: ../../library/os.rst:297
msgid ""
"An :term:`abstract base class` for objects representing a file system path, "
"e.g. :class:`pathlib.PurePath`."
msgstr ""
"ファイルシステムパスを表すオブジェクト(例: :class:`pathlib.PurePath`) 向け"
"の :term:`abstract base class` です。"

#: ../../library/os.rst:304
msgid "Return the file system path representation of the object."
msgstr "このオブジェクトが表現するファイルシステムパスを返します。"

#: ../../library/os.rst:306
msgid ""
"The method should only return a :class:`str` or :class:`bytes` object, with "
"the preference being for :class:`str`."
msgstr ""
"このメソッドは :class:`str` か :class:`bytes` のオブジェクトのみを返す必要が"
"あります(:class:`str` が好まれます)。"

#: ../../library/os.rst:312
msgid ""
"Return the value of the environment variable *key* as a string if it exists, "
"or *default* if it doesn't. *key* is a string. Note that since :func:"
"`getenv` uses :data:`os.environ`, the mapping of :func:`getenv` is similarly "
"also captured on import, and the function may not reflect future environment "
"changes."
msgstr ""
"環境変数 *key* が存在する場合はその値を文字列として返し、存在しなければ "
"*default* を返します。*key* は文字列です。注意すべき点として、:func:`getenv` "
"は内部的に :data:`os.environ` を使用するため、:func:`getenv` のマップ型オブ"
"ジェクトはインポート時に取得されます。そのため、それ以降に環境変数が変更され"
"ても、この関数の値にそれが反映されない可能性があります。"

#: ../../library/os.rst:318
msgid ""
"On Unix, keys and values are decoded with :func:`sys.getfilesystemencoding` "
"and ``'surrogateescape'`` error handler. Use :func:`os.getenvb` if you would "
"like to use a different encoding."
msgstr ""
"Unix では、キーと値は :func:`sys.getfilesystemencoding`、エラーハンドラー "
"``'surrogateescape'`` でデコードされます。異なるエンコーディングを使用したい"
"場合は :func:`os.getenvb` を使用します。"

#: ../../library/os.rst:327
msgid ""
"Return the value of the environment variable *key* as bytes if it exists, or "
"*default* if it doesn't. *key* must be bytes. Note that since :func:"
"`getenvb` uses :data:`os.environb`, the mapping of :func:`getenvb` is "
"similarly also captured on import, and the function may not reflect future "
"environment changes."
msgstr ""
"環境変数 *key* が存在する場合はその値を bytes として返し、存在しなければ "
"*default* を返します。*key* はbytes である必要があります。注意すべき点とし"
"て、:func:`getenvb` は内部的に :data:`os.environb` を使用するため、:func:"
"`getenvb` のマップ型オブジェクトはインポート時に取得されます。そのため、それ"
"以降に環境変数が変更されても、この関数の値にそれが反映されない可能性がありま"
"す。"

#: ../../library/os.rst:334
msgid ""
":func:`getenvb` is only available if :const:`supports_bytes_environ` is "
"``True``."
msgstr ""
":func:`getenvb` は :const:`supports_bytes_environ` が ``True`` の場合のみ利用"
"可能です。"

#: ../../library/os.rst:344
msgid ""
"Returns the list of directories that will be searched for a named "
"executable, similar to a shell, when launching a process. *env*, when "
"specified, should be an environment variable dictionary to lookup the PATH "
"in. By default, when *env* is ``None``, :data:`environ` is used."
msgstr ""
"プロセスを起動する時に名前付き実行ファイルを検索するディレクトリのリストを返"
"します。\n"
"*env* が指定されると、それを環境変数の辞書とみなし、その辞書からキー PATH の"
"値を探します。\n"
"デフォルトでは *env* は ``None`` であり、:data:`environ` が使用されます。"

#: ../../library/os.rst:355
msgid ""
"Return the effective group id of the current process.  This corresponds to "
"the \"set id\" bit on the file being executed in the current process."
msgstr ""
"現在のプロセスの実効グループ id を返します。この id は現在のプロセスで実行さ"
"れているファイルの \"set id\" ビットに対応します。"

#: ../../library/os.rst:365
msgid "Return the current process's effective user id."
msgstr "現在のプロセスの実効ユーザー id を返します。"

#: ../../library/os.rst:374
msgid "Return the real group id of the current process."
msgstr "現在のプロセスの実グループ id を返します。"

#: ../../library/os.rst:378 ../../library/os.rst:451 ../../library/os.rst:535
#: ../../library/os.rst:758
msgid ""
"The function is a stub on WASI, see :ref:`wasm-availability` for more "
"information."
msgstr ""

#: ../../library/os.rst:384
msgid ""
"Return list of group ids that *user* belongs to. If *group* is not in the "
"list, it is included; typically, *group* is specified as the group ID field "
"from the password record for *user*, because that group ID will otherwise be "
"potentially omitted."
msgstr ""

#: ../../library/os.rst:396
msgid ""
"Return list of supplemental group ids associated with the current process."
msgstr "現在のプロセスに関連付けられた従属グループ id のリストを返します。"

#: ../../library/os.rst:402
msgid ""
"On macOS, :func:`getgroups` behavior differs somewhat from other Unix "
"platforms. If the Python interpreter was built with a deployment target of "
"``10.5`` or earlier, :func:`getgroups` returns the list of effective group "
"ids associated with the current user process; this list is limited to a "
"system-defined number of entries, typically 16, and may be modified by calls "
"to :func:`setgroups` if suitably privileged. If built with a deployment "
"target greater than ``10.5``, :func:`getgroups` returns the current group "
"access list for the user associated with the effective user id of the "
"process; the group access list may change over the lifetime of the process, "
"it is not affected by calls to :func:`setgroups`, and its length is not "
"limited to 16.  The deployment target value, :const:"
"`MACOSX_DEPLOYMENT_TARGET`, can be obtained with :func:`sysconfig."
"get_config_var`."
msgstr ""
"macOS では :func:`getgroups` の挙動は他の Unix プラットフォームとはいくぶん異"
"なります。 Python のインタープリタが ``10.5`` 以前の Deployment Target でビル"
"ドされている場合、 :func:`getgroups` は現在のユーザープロセスに関連付けられて"
"いる実効グループ id を返します。このリストはシステムで定義されたエントリ数 "
"( 通常は 16) に制限され、適切な特権があれば :func:`setgroups` の呼び出しに"
"よって変更することができます。 ``10.5`` より新しい Deployment Target でビルド"
"されている場合、 :func:`getgroups` はプロセスの実効ユーザー id に関連付けられ"
"たユーザーの現在のグループアクセスリストを返します。このグループアクセスリス"
"トは、プロセスのライフタイムで変更される可能性があり、 :func:`setgroups` の呼"
"び出しの影響を受けず、長さ 16 の制限を受けません。 Deployment Target の値 :"
"const:`MACOSX_DEPLOYMENT_TARGET` は、 :func:`sysconfig.get_config_var` で取得"
"することができます。"

#: ../../library/os.rst:419
msgid ""
"Return the name of the user logged in on the controlling terminal of the "
"process.  For most purposes, it is more useful to use :func:`getpass."
"getuser` since the latter checks the environment variables :envvar:`LOGNAME` "
"or :envvar:`USERNAME` to find out who the user is, and falls back to ``pwd."
"getpwuid(os.getuid())[0]`` to get the login name of the current real user id."
msgstr ""
"プロセスの制御端末にログインしているユーザー名を返します。ほとんどの場合、:"
"func:`getpass.getuser` を使う方が便利です。なぜなら、:func:`getpass.getuser` "
"は、ユーザーを見つけるために、環境変数 :envvar:`LOGNAME` や :envvar:"
"`USERNAME` を調べ、さらには ``pwd.getpwuid(os.getuid())[0]`` まで調べに行くか"
"らです。"

#: ../../library/os.rst:431
msgid ""
"Return the process group id of the process with process id *pid*. If *pid* "
"is 0, the process group id of the current process is returned."
msgstr ""
"プロセス id *pid* のプロセスのプロセスグループ id を返します。 *pid* が 0 の"
"場合、現在のプロセスのプロセスグループ id を返します。"

#: ../../library/os.rst:440
msgid "Return the id of the current process group."
msgstr "現在のプロセスグループの id を返します。"

#: ../../library/os.rst:449
msgid "Return the current process id."
msgstr "現在のプロセス id を返します。"

#: ../../library/os.rst:458
msgid ""
"Return the parent's process id.  When the parent process has exited, on Unix "
"the id returned is the one of the init process (1), on Windows it is still "
"the same id, which may be already reused by another process."
msgstr ""
"親プロセスのプロセス id を返します。親プロセスが終了していた場合、Unix では "
"init プロセスの id (1) が返され、Windows では親のプロセス id だったもの (別の"
"プロセスで再利用されているかもしれない) がそのまま返されます。"

#: ../../library/os.rst:464
msgid "Added support for Windows."
msgstr "Windows サポートが追加されました。"

#: ../../library/os.rst:472
msgid ""
"Get program scheduling priority.  The value *which* is one of :const:"
"`PRIO_PROCESS`, :const:`PRIO_PGRP`, or :const:`PRIO_USER`, and *who* is "
"interpreted relative to *which* (a process identifier for :const:"
"`PRIO_PROCESS`, process group identifier for :const:`PRIO_PGRP`, and a user "
"ID for :const:`PRIO_USER`).  A zero value for *who* denotes (respectively) "
"the calling process, the process group of the calling process, or the real "
"user ID of the calling process."
msgstr ""
"プログラムのスケジューリング優先度を取得します。*which* の値は :const:"
"`PRIO_PROCESS`、:const:`PRIO_PGRP`、あるいは :const:`PRIO_USER` のいずれか一"
"つで、*who* の値は *which* に応じて解釈されます (:const:`PRIO_PROCESS` であれ"
"ばプロセス識別子、:const:`PRIO_PGRP` であればプロセスグループ識別子、そして :"
"const:`PRIO_USER` であればユーザー ID)。*who* の値がゼロの場合、呼び出したプ"
"ロセス、呼び出したプロセスのプロセスグループ、および呼び出したプロセスの実"
"ユーザー id を (それぞれ) 意味します。"

#: ../../library/os.rst:489 ../../library/os.rst:501
msgid ""
"Parameters for the :func:`getpriority` and :func:`setpriority` functions."
msgstr ":func:`getpriority` と :func:`setpriority` 用のパラメータです。"

#: ../../library/os.rst:509
msgid ""
"Return a tuple (ruid, euid, suid) denoting the current process's real, "
"effective, and saved user ids."
msgstr ""
"現在のプロセスの実ユーザー id 、実効ユーザー id 、および保存ユーザー id を示"
"す、 (ruid, euid, suid) のタプルを返します。"

#: ../../library/os.rst:519
msgid ""
"Return a tuple (rgid, egid, sgid) denoting the current process's real, "
"effective, and saved group ids."
msgstr ""
"現在のプロセスの実グループ id 、実効グループ id 、および保存グループ id を示"
"す、 (rgid, egid, sgid) のタプルを返します。"

#: ../../library/os.rst:531
msgid "Return the current process's real user id."
msgstr "現在のプロセスの実ユーザー id を返します。"

#: ../../library/os.rst:541
msgid ""
"Call the system initgroups() to initialize the group access list with all of "
"the groups of which the specified username is a member, plus the specified "
"group id."
msgstr ""
"システムの initgroups() を呼び出し、指定された *username* がメンバーである全"
"グループと *gid* で指定されたグループでグループアクセスリストを初期化します。"

#: ../../library/os.rst:554
msgid ""
"Set the environment variable named *key* to the string *value*.  Such "
"changes to the environment affect subprocesses started with :func:`os."
"system`, :func:`popen` or :func:`fork` and :func:`execv`."
msgstr ""
"*key* という名前の環境変数に文字列 *value* を設定します。このような環境変数の"
"変更は、:func:`os.system`、:func:`popen`、または :func:`fork` と :func:"
"`execv` で起動されたサブプロセスに影響を与えます。"

#: ../../library/os.rst:558
msgid ""
"Assignments to items in :data:`os.environ` are automatically translated into "
"corresponding calls to :func:`putenv`; however, calls to :func:`putenv` "
"don't update :data:`os.environ`, so it is actually preferable to assign to "
"items of :data:`os.environ`. This also applies to :func:`getenv` and :func:"
"`getenvb`, which respectively use :data:`os.environ` and :data:`os.environb` "
"in their implementations."
msgstr ""
":data:`os.environ` の要素に代入すると、それは :func:`putenv` の呼び出しに自動"
"変換されます。\n"
"しかし、直接 :func:`putenv` を呼び出しても :data:`os.environ` には反映されな"
"いため、:data:`os.environ` の要素に代入する方がベターです。\n"
":func:`getenv` と :func:`getenvb` についても、実装上それぞれ :data:`os."
"environ` と :data:`os.environb` を使用するので、同様に注意が必要です。"

#: ../../library/os.rst:566
msgid ""
"On some platforms, including FreeBSD and macOS, setting ``environ`` may "
"cause memory leaks. Refer to the system documentation for :c:func:`!putenv`."
msgstr ""
"FreeBSD や macOS など一部のプラットフォームでは ``environ`` の値を変更すると"
"メモリリークが発生する可能性があります。\n"
"各システムのドキュメントで :c:func:`!putenv` の項目を参照してください。 "

#: ../../library/os.rst:569
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.putenv`` with arguments "
"``key``, ``value``."
msgstr ""
"引数 ``key``, ``value`` を指定して :ref:`監査イベント <auditing>` ``os."
"putenv`` を送出します。 "

#: ../../library/os.rst:571
msgid "The function is now always available."
msgstr "常に利用出来るようになりました。"

#: ../../library/os.rst:577
msgid "Set the current process's effective group id."
msgstr "現在のプロセスに実効グループ id をセットします。"

#: ../../library/os.rst:584
msgid "Set the current process's effective user id."
msgstr "現在のプロセスに実効ユーザー id をセットします。"

#: ../../library/os.rst:591
msgid "Set the current process' group id."
msgstr "現在のプロセスにグループ id をセットします。"

#: ../../library/os.rst:598
msgid ""
"Set the list of supplemental group ids associated with the current process "
"to *groups*. *groups* must be a sequence, and each element must be an "
"integer identifying a group. This operation is typically available only to "
"the superuser."
msgstr ""
"現在のグループに関連付けられた従属グループ id のリストを *groups* に設定しま"
"す。 *groups* はシーケンス型でなくてはならず、各要素はグループを特定する整数"
"でなくてはなりません。通常、この操作はスーパユーザーしか利用できません。"

#: ../../library/os.rst:604
msgid ""
"On macOS, the length of *groups* may not exceed the system-defined maximum "
"number of effective group ids, typically 16. See the documentation for :func:"
"`getgroups` for cases where it may not return the same group list set by "
"calling setgroups()."
msgstr ""
"macOS では、 *groups* の長さはシステムで定義された実効グループ id の最大数 "
"( 通常は 16) を超えない場合があります。 setgroups() 呼び出しで設定されたもの"
"と同じグループリストが返されないケースについては、 :func:`getgroups` のドキュ"
"メントを参照してください。"

#: ../../library/os.rst:611
msgid ""
"Reassociate the current thread with a Linux namespace. See the :manpage:"
"`setns(2)` and :manpage:`namespaces(7)` man pages for more details."
msgstr ""

#: ../../library/os.rst:615
msgid ""
"If *fd* refers to a :file:`/proc/{pid}/ns/` link, ``setns()`` reassociates "
"the calling thread with the namespace associated with that link, and "
"*nstype* may be set to one of the :ref:`CLONE_NEW* constants <os-unshare-"
"clone-flags>` to impose constraints on the operation (``0`` means no "
"constraints)."
msgstr ""

#: ../../library/os.rst:622
msgid ""
"Since Linux 5.8, *fd* may refer to a PID file descriptor obtained from :func:"
"`~os.pidfd_open`. In this case, ``setns()`` reassociates the calling thread "
"into one or more of the same namespaces as the thread referred to by *fd*. "
"This is subject to any constraints imposed by *nstype*, which is a bit mask "
"combining one or more of the :ref:`CLONE_NEW* constants <os-unshare-clone-"
"flags>`, e.g. ``setns(fd, os.CLONE_NEWUTS | os.CLONE_NEWPID)``. The caller's "
"memberships in unspecified namespaces are left unchanged."
msgstr ""

#: ../../library/os.rst:631
msgid ""
"*fd* can be any object with a :meth:`~io.IOBase.fileno` method, or a raw "
"file descriptor."
msgstr ""

#: ../../library/os.rst:633
msgid ""
"This example reassociates the thread with the ``init`` process's network "
"namespace::"
msgstr ""

#: ../../library/os.rst:635
msgid ""
"fd = os.open(\"/proc/1/ns/net\", os.O_RDONLY)\n"
"os.setns(fd, os.CLONE_NEWNET)\n"
"os.close(fd)"
msgstr ""

#: ../../library/os.rst:645
msgid "The :func:`~os.unshare` function."
msgstr ""

#: ../../library/os.rst:649
msgid ""
"Call the system call :c:func:`!setpgrp` or ``setpgrp(0, 0)`` depending on "
"which version is implemented (if any).  See the Unix manual for the "
"semantics."
msgstr ""
"システムコール :c:func:`!setpgrp` か ``setpgrp(0, 0)`` のどちらか(実装されて"
"いるもの)を呼び出します。機能については UNIX マニュアルを参照して下さい。"

#: ../../library/os.rst:657
msgid ""
"Call the system call :c:func:`!setpgid` to set the process group id of the "
"process with id *pid* to the process group with id *pgrp*.  See the Unix "
"manual for the semantics."
msgstr ""
"システムコール :c:func:`!setpgid` を呼び出してプロセス id *pid* のプロセスの"
"プロセスグループ id を *pgrp* に設定します。この動作に関しては Unix のマニュ"
"アルを参照してください。"

#: ../../library/os.rst:668
msgid ""
"Set program scheduling priority. The value *which* is one of :const:"
"`PRIO_PROCESS`, :const:`PRIO_PGRP`, or :const:`PRIO_USER`, and *who* is "
"interpreted relative to *which* (a process identifier for :const:"
"`PRIO_PROCESS`, process group identifier for :const:`PRIO_PGRP`, and a user "
"ID for :const:`PRIO_USER`). A zero value for *who* denotes (respectively) "
"the calling process, the process group of the calling process, or the real "
"user ID of the calling process. *priority* is a value in the range -20 to "
"19. The default priority is 0; lower priorities cause more favorable "
"scheduling."
msgstr ""
"プログラムのスケジューリング優先度を設定します。*which* は :const:"
"`PRIO_PROCESS`、:const:`PRIO_PGRP`、あるいは :const:`PRIO_USER` のいずれか一"
"つで、*who* の値は *which* に応じて解釈されます (:const:`PRIO_PROCESS` であれ"
"ばプロセス識別子、:const:`PRIO_PGRP` であればプロセスグループ識別子、そして :"
"const:`PRIO_USER` であればユーザー ID)。*who* の値がゼロの場合、呼び出したプ"
"ロセス、呼び出したプロセスのプロセスグループ、および呼び出したプロセスの実"
"ユーザー id を (それぞれ) 意味します。*priority* は -20 から 19 の整数値で、"
"デフォルトの優先度は 0 です。小さい数値ほど優先されるスケジューリングとなりま"
"す。"

#: ../../library/os.rst:685
msgid "Set the current process's real and effective group ids."
msgstr "現在のプロセスの実グループ id および実効グループ id を設定します。"

#: ../../library/os.rst:692
msgid "Set the current process's real, effective, and saved group ids."
msgstr ""
"現在のプロセスの、実グループ id 、実効グループ id 、および保存グループ id を"
"設定します。"

#: ../../library/os.rst:701
msgid "Set the current process's real, effective, and saved user ids."
msgstr ""
"現在のプロセスの実ユーザー id 、実効ユーザー id 、および保存ユーザー id を設"
"定します。"

#: ../../library/os.rst:710
msgid "Set the current process's real and effective user ids."
msgstr "現在のプロセスの実ユーザー id および実効ユーザー id を設定します。"

#: ../../library/os.rst:717
msgid ""
"Call the system call :c:func:`!getsid`.  See the Unix manual for the "
"semantics."
msgstr ""
":c:func:`!getsid` システムコールを呼び出します。機能については Unix のマニュ"
"アルを参照してください。"

#: ../../library/os.rst:724
msgid ""
"Call the system call :c:func:`!setsid`.  See the Unix manual for the "
"semantics."
msgstr ""
":c:func:`!setsid` システムコールを呼び出します。機能については Unix のマニュ"
"アルを参照してください。"

#: ../../library/os.rst:733
msgid "Set the current process's user id."
msgstr "現在のプロセスのユーザー id を設定します。"

#: ../../library/os.rst:741
msgid ""
"Return the error message corresponding to the error code in *code*. On "
"platforms where :c:func:`!strerror` returns ``NULL`` when given an unknown "
"error number, :exc:`ValueError` is raised."
msgstr ""
"エラーコード *code* に対応するエラーメッセージを返します。未知のエラーコード"
"の対して :c:func:`!strerror` が ``NULL`` を返すプラットフォームでは、 :exc:"
"`ValueError` が送出されます。"

#: ../../library/os.rst:748
msgid ""
"``True`` if the native OS type of the environment is bytes (eg. ``False`` on "
"Windows)."
msgstr ""
"環境のネイティブ OS タイプがバイト型の場合、 ``True`` です (例: Windows で"
"は、 ``False`` です)。"

#: ../../library/os.rst:756
msgid "Set the current numeric umask and return the previous umask."
msgstr "現在の数値 umask を設定し、以前の umask 値を返します。"

#: ../../library/os.rst:768
msgid ""
"Returns information identifying the current operating system. The return "
"value is an object with five attributes:"
msgstr ""
"現在のオペレーティングシステムを識別する情報を返します。返り値は 5 個の属性を"
"持つオブジェクトです:"

#: ../../library/os.rst:771
msgid ":attr:`sysname` - operating system name"
msgstr ":attr:`sysname` - OS の名前"

#: ../../library/os.rst:772
msgid ":attr:`nodename` - name of machine on network (implementation-defined)"
msgstr ":attr:`nodename` - (実装時に定義された) ネットワーク上でのマシン名"

#: ../../library/os.rst:773
msgid ":attr:`release` - operating system release"
msgstr ":attr:`release` - OS のリリース"

#: ../../library/os.rst:774
msgid ":attr:`version` - operating system version"
msgstr ":attr:`version` - OS のバージョン"

#: ../../library/os.rst:775
msgid ":attr:`machine` - hardware identifier"
msgstr ":attr:`machine` - ハードウェア識別子"

#: ../../library/os.rst:777
msgid ""
"For backwards compatibility, this object is also iterable, behaving like a "
"five-tuple containing :attr:`sysname`, :attr:`nodename`, :attr:`release`, :"
"attr:`version`, and :attr:`machine` in that order."
msgstr ""
"後方互換性のため、このオブジェクトはイテラブルでもあり、:attr:`sysname`、:"
"attr:`nodename`、:attr:`release`、:attr:`version`、および :attr:`machine` の "
"5 個の要素をこの順序で持つタプルのように振る舞います。"

#: ../../library/os.rst:782
msgid ""
"Some systems truncate :attr:`nodename` to 8 characters or to the leading "
"component; a better way to get the hostname is :func:`socket.gethostname`  "
"or even ``socket.gethostbyaddr(socket.gethostname())``."
msgstr ""
"一部のシステムでは、:attr:`nodename` はコンポーネントを読み込むために 8 文字"
"または先頭の要素だけに切り詰められます; ホスト名を取得する方法としては、:"
"func:`socket.gethostname` を使う方がよいでしょう。あるいは ``socket."
"gethostbyaddr(socket.gethostname())`` でもかまいません。"

#: ../../library/os.rst:787
msgid ""
"On macOS, iOS and Android, this returns the *kernel* name and version (i.e., "
"``'Darwin'`` on macOS and iOS; ``'Linux'`` on Android). :func:`platform."
"uname` can be used to get the user-facing operating system name and version "
"on iOS and Android."
msgstr ""

#: ../../library/os.rst:794 ../../library/os.rst:5001
msgid ""
"Return type changed from a tuple to a tuple-like object with named "
"attributes."
msgstr ""
"返り値の型が、タプルから属性名のついたタプルライクオブジェクトに変更されまし"
"た。"

#: ../../library/os.rst:803
msgid ""
"Unset (delete) the environment variable named *key*. Such changes to the "
"environment affect subprocesses started with :func:`os.system`, :func:"
"`popen` or :func:`fork` and :func:`execv`."
msgstr ""
"*key* という名前の環境変数を unset (削除) します。このような環境変数の変更"
"は、:func:`os.system`、:func:`popen`、または :func:`fork` と :func:`execv` で"
"起動されたサブプロセスに影響を与えます。"

#: ../../library/os.rst:807
msgid ""
"Deletion of items in :data:`os.environ` is automatically translated into a "
"corresponding call to :func:`unsetenv`; however, calls to :func:`unsetenv` "
"don't update :data:`os.environ`, so it is actually preferable to delete "
"items of :data:`os.environ`."
msgstr ""
":data:`os.environ` のアイテムの削除を行うと、自動的に :func:`unsetenv` の対応"
"する呼び出しに変換されます。直接 :func:`unsetenv` を呼び出した場合 :data:`os."
"environ` は更新されないため、実際には :data:`os.environ` のアイテムを削除する"
"方が望ましい操作です。"

#: ../../library/os.rst:812
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.unsetenv`` with argument "
"``key``."
msgstr ""
"引数 ``key`` を指定して :ref:`監査イベント <auditing>` ``os.unsetenv`` を送出"
"します。 "

#: ../../library/os.rst:814
msgid "The function is now always available and is also available on Windows."
msgstr "常に関数は利用出来るようになりました。"

#: ../../library/os.rst:820
msgid ""
"Disassociate parts of the process execution context, and move them into a "
"newly created namespace. See the :manpage:`unshare(2)` man page for more "
"details. The *flags* argument is a bit mask, combining zero or more of the :"
"ref:`CLONE_* constants <os-unshare-clone-flags>`, that specifies which parts "
"of the execution context should be unshared from their existing associations "
"and moved to a new namespace. If the *flags* argument is ``0``, no changes "
"are made to the calling process's execution context."
msgstr ""

#: ../../library/os.rst:837
msgid "The :func:`~os.setns` function."
msgstr ":func:`~os.setns` 関数。"

#: ../../library/os.rst:841
msgid ""
"Flags to the :func:`unshare` function, if the implementation supports them. "
"See :manpage:`unshare(2)` in the Linux manual for their exact effect and "
"availability."
msgstr ""

#: ../../library/os.rst:864
msgid "File Object Creation"
msgstr "ファイルオブジェクトの生成"

#: ../../library/os.rst:866
msgid ""
"These functions create new :term:`file objects <file object>`.  (See also :"
"func:`~os.open` for opening file descriptors.)"
msgstr ""
"以下の関数は新しい :term:`ファイルオブジェクト <file object>` を作成します。"
"(ファイル記述子のオープンについては :func:`~os.open` も参照してください)"

#: ../../library/os.rst:872
msgid ""
"Return an open file object connected to the file descriptor *fd*.  This is "
"an alias of the :func:`open` built-in function and accepts the same "
"arguments. The only difference is that the first argument of :func:`fdopen` "
"must always be an integer."
msgstr ""
"ファイル記述子 *fd* に接続し、オープンしたファイルオブジェクトを返します。こ"
"れは組み込み関数 :func:`open` の別名であり、同じ引数を受け取ります。唯一の違"
"いは :func:`fdopen` の第一引数が常に整数でなければならないことです。"

#: ../../library/os.rst:881
msgid "File Descriptor Operations"
msgstr "ファイル記述子の操作"

#: ../../library/os.rst:883
msgid ""
"These functions operate on I/O streams referenced using file descriptors."
msgstr ""
"これらの関数は、ファイル記述子を使って参照されている I/O ストリームを操作しま"
"す。"

#: ../../library/os.rst:885
msgid ""
"File descriptors are small integers corresponding to a file that has been "
"opened by the current process.  For example, standard input is usually file "
"descriptor 0, standard output is 1, and standard error is 2.  Further files "
"opened by a process will then be assigned 3, 4, 5, and so forth.  The name "
"\"file descriptor\" is slightly deceptive; on Unix platforms, sockets and "
"pipes are also referenced by file descriptors."
msgstr ""
"ファイル記述子とは現在のプロセスで開かれたファイルに対応する小さな整数です。"
"例えば、標準入力のファイル記述子は通常 0 で、標準出力は 1 、標準エラーは 2 で"
"す。プロセスから開かれたその他のファイルには 3 、 4 、 5 と割り振られていきま"
"す。「ファイル記述子」という名称は少し誤解を与えるものかもしれません。Unix プ"
"ラットフォームでは、ソケットやパイプもファイル記述子によって参照されます。"

#: ../../library/os.rst:892
msgid ""
"The :meth:`~io.IOBase.fileno` method can be used to obtain the file "
"descriptor associated with a :term:`file object` when required.  Note that "
"using the file descriptor directly will bypass the file object methods, "
"ignoring aspects such as internal buffering of data."
msgstr ""
":meth:`~io.IOBase.fileno` メソッドを使用して、必要な場合に :term:`file "
"object` に関連付けられているファイル記述子を取得することができます。ファイル"
"記述子を直接使用すると、ファイルオブジェクトのメソッドが使用されないため、"
"データの内部バッファなどの性質は無視されることに注意してください。"

#: ../../library/os.rst:900
msgid "Close file descriptor *fd*."
msgstr "ファイル記述子 *fd* をクローズします。"

#: ../../library/os.rst:904
msgid ""
"This function is intended for low-level I/O and must be applied to a file "
"descriptor as returned by :func:`os.open` or :func:`pipe`.  To close a "
"\"file object\" returned by the built-in function :func:`open` or by :func:"
"`popen` or :func:`fdopen`, use its :meth:`~io.IOBase.close` method."
msgstr ""
"この関数は低水準の I/O 向けのもので、 :func:`os.open` や :func:`pipe` が返す"
"ファイル記述子に対して使用しなければなりません。\n"
"組み込み関数 :func:`open` や :func:`popen` 、 :func:`fdopen` が返す \"ファイ"
"ルオブジェクト\" を閉じるには、オブジェクトの :meth:`~io.IOBase.close` メソッ"
"ドを使用してください。"

#: ../../library/os.rst:912
msgid ""
"Close all file descriptors from *fd_low* (inclusive) to *fd_high* "
"(exclusive), ignoring errors. Equivalent to (but much faster than)::"
msgstr ""
"*fd_low* 以上 *fd_high* 未満のすべてのファイル記述子をエラーを無視してクロー"
"ズします。以下のコードと等価です::"

#: ../../library/os.rst:915
msgid ""
"for fd in range(fd_low, fd_high):\n"
"    try:\n"
"        os.close(fd)\n"
"    except OSError:\n"
"        pass"
msgstr ""

#: ../../library/os.rst:924
msgid ""
"Copy *count* bytes from file descriptor *src*, starting from offset "
"*offset_src*, to file descriptor *dst*, starting from offset *offset_dst*. "
"If *offset_src* is ``None``, then *src* is read from the current position; "
"respectively for *offset_dst*."
msgstr ""

#: ../../library/os.rst:929
msgid ""
"In Linux kernel older than 5.3, the files pointed to by *src* and *dst* must "
"reside in the same filesystem, otherwise an :exc:`OSError` is raised with :"
"attr:`~OSError.errno` set to :const:`errno.EXDEV`."
msgstr ""

#: ../../library/os.rst:933
msgid ""
"This copy is done without the additional cost of transferring data from the "
"kernel to user space and then back into the kernel. Additionally, some "
"filesystems could implement extra optimizations, such as the use of reflinks "
"(i.e., two or more inodes that share pointers to the same copy-on-write disk "
"blocks; supported file systems include btrfs and XFS) and server-side copy "
"(in the case of NFS)."
msgstr ""

#: ../../library/os.rst:940
msgid ""
"The function copies bytes between two file descriptors. Text options, like "
"the encoding and the line ending, are ignored."
msgstr ""

#: ../../library/os.rst:943
msgid ""
"The return value is the amount of bytes copied. This could be less than the "
"amount requested."
msgstr ""
"返り値はコピーされたバイトの量です。\n"
"この値は、要求した量より少なくなることもあります。"

#: ../../library/os.rst:948
msgid ""
"On Linux, :func:`os.copy_file_range` should not be used for copying a range "
"of a pseudo file from a special filesystem like procfs and sysfs. It will "
"always copy no bytes and return 0 as if the file was empty because of a "
"known Linux kernel issue."
msgstr ""

#: ../../library/os.rst:960
msgid ""
"Return a string describing the encoding of the device associated with *fd* "
"if it is connected to a terminal; else return :const:`None`."
msgstr ""
"*fd* に関連付けられたデバイスが端末 (ターミナル) に接続されている場合に、その"
"デバイスのエンコーディングを表す文字列を返します。端末に接続されていない場"
"合、 :const:`None` を返します。"

#: ../../library/os.rst:963
msgid ""
"On Unix, if the :ref:`Python UTF-8 Mode <utf8-mode>` is enabled, return "
"``'UTF-8'`` rather than the device encoding."
msgstr ""

#: ../../library/os.rst:966
msgid "On Unix, the function now implements the Python UTF-8 Mode."
msgstr ""

#: ../../library/os.rst:972
msgid ""
"Return a duplicate of file descriptor *fd*. The new file descriptor is :ref:"
"`non-inheritable <fd_inheritance>`."
msgstr ""
"ファイル記述子 *fd* の複製を返します。新しいファイル記述子は :ref:`継承不可 "
"<fd_inheritance>` です。"

#: ../../library/os.rst:975
msgid ""
"On Windows, when duplicating a standard stream (0: stdin, 1: stdout, 2: "
"stderr), the new file descriptor is :ref:`inheritable <fd_inheritance>`."
msgstr ""
"Windows では、標準ストリーム (0: 標準入力、1: 標準出力、2: 標準エラー出力) を"
"複製する場合、新しいファイル記述子は :ref:`継承可能 <fd_inheritance>` です。"

#: ../../library/os.rst:981 ../../library/os.rst:1266
msgid "The new file descriptor is now non-inheritable."
msgstr "新しいファイル記述子が継承不可になりました。"

#: ../../library/os.rst:987
msgid ""
"Duplicate file descriptor *fd* to *fd2*, closing the latter first if "
"necessary. Return *fd2*. The new file descriptor is :ref:`inheritable "
"<fd_inheritance>` by default or non-inheritable if *inheritable* is "
"``False``."
msgstr ""
"ファイル記述子 *fd* を *fd2* に複製し、必要な場合には後者を先に閉じます。\n"
"*fd2* が返ります。\n"
"新しいファイル記述子はデフォルトでは :ref:`継承可能 <fd_inheritance>` で、"
"*inheritable* が ``False`` の場合は継承不可です。"

#: ../../library/os.rst:994
msgid "Add the optional *inheritable* parameter."
msgstr "オプションの *inheritable* 引数が追加されました。"

#: ../../library/os.rst:997
msgid "Return *fd2* on success. Previously, ``None`` was always returned."
msgstr ""
"成功したときは *fd2* が返ります。\n"
"以前は常に ``None`` が返っていました。"

#: ../../library/os.rst:1003
msgid ""
"Change the mode of the file given by *fd* to the numeric *mode*.  See the "
"docs for :func:`chmod` for possible values of *mode*.  As of Python 3.3, "
"this is equivalent to ``os.chmod(fd, mode)``."
msgstr ""
"*fd* で指定されたファイルのモードを *mode* に変更します。*mode* に指定できる"
"値については、:func:`chmod` のドキュメントを参照してください。Python 3.3 以降"
"では ``os.chmod(fd, mode)`` と等価です。"

#: ../../library/os.rst:1007 ../../library/os.rst:2136
#: ../../library/os.rst:2237
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.chmod`` with arguments "
"``path``, ``mode``, ``dir_fd``."
msgstr ""
"引数 ``path``, ``mode``, ``dir_fd`` を指定して :ref:`監査イベント "
"<auditing>` ``os.chmod`` を送出します。 "

#: ../../library/os.rst:1011 ../../library/os.rst:1029
#: ../../library/os.rst:1120 ../../library/os.rst:1705
#: ../../library/os.rst:2133 ../../library/os.rst:2166
#: ../../library/os.rst:3458
msgid ""
"The function is limited on WASI, see :ref:`wasm-availability` for more "
"information."
msgstr ""

#: ../../library/os.rst:1014 ../../library/os.rst:2244
msgid "Added support on Windows."
msgstr ""

#: ../../library/os.rst:1020
msgid ""
"Change the owner and group id of the file given by *fd* to the numeric *uid* "
"and *gid*.  To leave one of the ids unchanged, set it to -1.  See :func:"
"`chown`.  As of Python 3.3, this is equivalent to ``os.chown(fd, uid, gid)``."
msgstr ""
"*fd* で指定されたファイルの所有者 id およびグループ id を数値 *uid* および "
"*gid* に変更します。いずれかの id を変更せずにおくにはその値として -1 を指定"
"します。:func:`chown` を参照してください。Python 3.3 以降では ``os.chown(fd, "
"uid, gid)`` と等価です。"

#: ../../library/os.rst:1025 ../../library/os.rst:2162
#: ../../library/os.rst:2253
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.chown`` with arguments "
"``path``, ``uid``, ``gid``, ``dir_fd``."
msgstr ""
"引数 ``path``, ``uid``, ``gid``, ``dir_fd`` を指定して :ref:`監査イベント "
"<auditing>` ``os.chown`` を送出します。 "

#: ../../library/os.rst:1035
msgid ""
"Force write of file with filedescriptor *fd* to disk. Does not force update "
"of metadata."
msgstr ""
"ファイル記述子 *fd* を持つファイルのディスクへの書き込みを強制します。メタ"
"データの更新は強制しません。"

#: ../../library/os.rst:1041
msgid "This function is not available on MacOS."
msgstr "この関数は MacOS では利用できません。"

#: ../../library/os.rst:1046
msgid ""
"Return system configuration information relevant to an open file. *name* "
"specifies the configuration value to retrieve; it may be a string which is "
"the name of a defined system value; these names are specified in a number of "
"standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define "
"additional names as well.  The names known to the host operating system are "
"given in the ``pathconf_names`` dictionary.  For configuration variables not "
"included in that mapping, passing an integer for *name* is also accepted."
msgstr ""
"開いているファイルに関連するシステム設定情報を返します。 *name* は取得する設"
"定名を指定します。これは、いくつかの標準 (POSIX.1 、 Unix 95 、 Unix 98 その"
"他 ) で定義された定義済みのシステム値名の文字列である場合があります。プラット"
"フォームによっては別の名前も定義されています。ホストオペレーティングシステム"
"の関知する名前は ``pathconf_names`` 辞書で与えられています。このマップ型オブ"
"ジェクトに含まれていない構成変数については、 *name* に整数を渡してもかまいま"
"せん。"

#: ../../library/os.rst:1054 ../../library/os.rst:2572
msgid ""
"If *name* is a string and is not known, :exc:`ValueError` is raised.  If a "
"specific value for *name* is not supported by the host system, even if it is "
"included in ``pathconf_names``, an :exc:`OSError` is raised with :const:"
"`errno.EINVAL` for the error number."
msgstr ""
"*name* が不明の文字列である場合、 :exc:`ValueError` を送出します。 *name* の"
"特定の値がホストシステムでサポートされていない場合、 ``pathconf_names`` に含"
"まれていたとしても、 :const:`errno.EINVAL` をエラー番号として :exc:`OSError` "
"を送出します。"

#: ../../library/os.rst:1059
msgid "As of Python 3.3, this is equivalent to ``os.pathconf(fd, name)``."
msgstr "Python 3.3 以降では ``os.pathconf(fd, name)`` と等価です。"

#: ../../library/os.rst:1066
msgid ""
"Get the status of the file descriptor *fd*. Return a :class:`stat_result` "
"object."
msgstr ""
"ファイル記述子 *fd* の状態を取得します。:class:`stat_result` オブジェクトを返"
"します。"

#: ../../library/os.rst:1069
msgid "As of Python 3.3, this is equivalent to ``os.stat(fd)``."
msgstr "Python 3.3 以降では ``os.stat(fd)`` と等価です。"

#: ../../library/os.rst:1073 ../../library/os.rst:2400
msgid "The :func:`.stat` function."
msgstr ":func:`.stat` 関数。"

#: ../../library/os.rst:1078
msgid ""
"Return information about the filesystem containing the file associated with "
"file descriptor *fd*, like :func:`statvfs`.  As of Python 3.3, this is "
"equivalent to ``os.statvfs(fd)``."
msgstr ""
":func:`statvfs` と同様に、ファイル記述子 *fd* に関連付けられたファイルが格納"
"されているファイルシステムに関する情報を返します。Python 3.3 以降では ``os."
"statvfs(fd)`` と等価です。"

#: ../../library/os.rst:1087
msgid ""
"Force write of file with filedescriptor *fd* to disk.  On Unix, this calls "
"the native :c:func:`!fsync` function; on Windows, the MS :c:func:`!_commit` "
"function."
msgstr ""
"ファイル記述子 *fd* を持つファイルのディスクへの書き込みを強制します。 Unix "
"では、ネイティブの :c:func:`!fsync` 関数を、 Windows では :c:func:`!_commit` "
"関数を呼び出します。"

#: ../../library/os.rst:1090
msgid ""
"If you're starting with a buffered Python :term:`file object` *f*, first do "
"``f.flush()``, and then do ``os.fsync(f.fileno())``, to ensure that all "
"internal buffers associated with *f* are written to disk."
msgstr ""
"Python の :term:`ファイルオブジェクト <file object>` *f* を使う場合、*f* の内"
"部バッファを確実にディスクに書き込むために、まず ``f.flush()`` を、その後 "
"``os.fsync(f.fileno())`` を実行してください。"

#: ../../library/os.rst:1099
msgid ""
"Truncate the file corresponding to file descriptor *fd*, so that it is at "
"most *length* bytes in size.  As of Python 3.3, this is equivalent to ``os."
"truncate(fd, length)``."
msgstr ""
"ファイル記述子 *fd* に対応するファイルを、サイズが最長で *length* バイトにな"
"るように切り詰めます。Python 3.3 以降では ``os.truncate(fd, length)`` と等価"
"です。"

#: ../../library/os.rst:1103
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.truncate`` with arguments "
"``fd``, ``length``."
msgstr ""
"引数 ``fd``, ``length`` を指定して :ref:`監査イベント <auditing>` ``os."
"truncate`` を送出します。 "

#: ../../library/os.rst:1107 ../../library/os.rst:3497
msgid "Added support for Windows"
msgstr "Windows サポートを追加しました。"

#: ../../library/os.rst:1113
msgid ""
"Get the blocking mode of the file descriptor: ``False`` if the :data:"
"`O_NONBLOCK` flag is set, ``True`` if the flag is cleared."
msgstr ""
"記述子のブロッキングモードを取得します。\n"
":data:`O_NONBLOCK` フラグが設定されている場合は ``False`` で、フラグがクリア"
"されている場合は ``True`` です。"

#: ../../library/os.rst:1116
msgid "See also :func:`set_blocking` and :meth:`socket.socket.setblocking`."
msgstr ""
":func:`set_blocking` および :meth:`socket.socket.setblocking` も参照してくだ"
"さい。"

#: ../../library/os.rst:1123 ../../library/os.rst:1708
msgid "On Windows, this function is limited to pipes."
msgstr ""

#: ../../library/os.rst:1127 ../../library/os.rst:1712
msgid "Added support for pipes on Windows."
msgstr ""

#: ../../library/os.rst:1133
msgid ""
"Grant access to the slave pseudo-terminal device associated with the master "
"pseudo-terminal device to which the file descriptor *fd* refers. The file "
"descriptor *fd* is not closed upon failure."
msgstr ""

#: ../../library/os.rst:1137
msgid "Calls the C standard library function :c:func:`grantpt`."
msgstr ""

#: ../../library/os.rst:1146
msgid ""
"Return ``True`` if the file descriptor *fd* is open and connected to a tty(-"
"like) device, else ``False``."
msgstr ""
"ファイル記述子 *fd* がオープンされていて、 tty (のような) デバイスに接続され"
"ている場合、 ``True`` を返します。そうでない場合は ``False`` を返します。"

#: ../../library/os.rst:1152
msgid ""
"Apply, test or remove a POSIX lock on an open file descriptor. *fd* is an "
"open file descriptor. *cmd* specifies the command to use - one of :data:"
"`F_LOCK`, :data:`F_TLOCK`, :data:`F_ULOCK` or :data:`F_TEST`. *len* "
"specifies the section of the file to lock."
msgstr ""
"オープンされたファイル記述子に対して、POSIX ロックの適用、テスト、解除を行い"
"ます。*fd* はオープンされたファイル記述子です。*cmd* には使用するコマンド (:"
"data:`F_LOCK`、:data:`F_TLOCK`、:data:`F_ULOCK`、あるいは :data:`F_TEST` のい"
"ずれか一つ) を指定します。*len* にはロックするファイルのセクションを指定しま"
"す。"

#: ../../library/os.rst:1158
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.lockf`` with arguments "
"``fd``, ``cmd``, ``len``."
msgstr ""
"引数 ``fd``, ``cmd``, ``len`` を指定して :ref:`監査イベント <auditing>` ``os."
"lockf`` を送出します。 "

#: ../../library/os.rst:1170
msgid "Flags that specify what action :func:`lockf` will take."
msgstr ":func:`lockf` がとる動作を指定するフラグです。"

#: ../../library/os.rst:1179
msgid ""
"Prepare the tty of which fd is a file descriptor for a new login session. "
"Make the calling process a session leader; make the tty the controlling tty, "
"the stdin, the stdout, and the stderr of the calling process; close fd."
msgstr ""

#: ../../library/os.rst:1190
msgid ""
"Set the current position of file descriptor *fd* to position *pos*, modified "
"by *whence*, and return the new position in bytes relative to the start of "
"the file. Valid values for *whence* are:"
msgstr ""

#: ../../library/os.rst:1195
msgid ""
":const:`SEEK_SET` or ``0`` -- set *pos* relative to the beginning of the file"
msgstr ""

#: ../../library/os.rst:1196
msgid ""
":const:`SEEK_CUR` or ``1`` -- set *pos* relative to the current file position"
msgstr ""

#: ../../library/os.rst:1197
msgid ":const:`SEEK_END` or ``2`` -- set *pos* relative to the end of the file"
msgstr ""

#: ../../library/os.rst:1198
msgid ""
":const:`SEEK_HOLE` -- set *pos* to the next data location, relative to *pos*"
msgstr ""

#: ../../library/os.rst:1199
msgid ""
":const:`SEEK_DATA` -- set *pos* to the next data hole, relative to *pos*"
msgstr ""

#: ../../library/os.rst:1203
msgid "Add support for :const:`!SEEK_HOLE` and :const:`!SEEK_DATA`."
msgstr ""

#: ../../library/os.rst:1210
msgid ""
"Parameters to the :func:`lseek` function and the :meth:`~io.IOBase.seek` "
"method on :term:`file-like objects <file object>`, for whence to adjust the "
"file position indicator."
msgstr ""

#: ../../library/os.rst:1214
msgid ":const:`SEEK_SET`"
msgstr ""

#: ../../library/os.rst:1215
msgid "Adjust the file position relative to the beginning of the file."
msgstr ""

#: ../../library/os.rst:1216
msgid ":const:`SEEK_CUR`"
msgstr ""

#: ../../library/os.rst:1217
msgid "Adjust the file position relative to the current file position."
msgstr ""

#: ../../library/os.rst:1218
msgid ":const:`SEEK_END`"
msgstr ""

#: ../../library/os.rst:1219
msgid "Adjust the file position relative to the end of the file."
msgstr ""

#: ../../library/os.rst:1221
msgid "Their values are 0, 1, and 2, respectively."
msgstr ""

#: ../../library/os.rst:1227
msgid ""
"Parameters to the :func:`lseek` function and the :meth:`~io.IOBase.seek` "
"method on :term:`file-like objects <file object>`, for seeking file data and "
"holes on sparsely allocated files."
msgstr ""

#: ../../library/os.rst:1231
msgid ":data:`!SEEK_DATA`"
msgstr ""

#: ../../library/os.rst:1232
msgid ""
"Adjust the file offset to the next location containing data, relative to the "
"seek position."
msgstr ""

#: ../../library/os.rst:1235
msgid ":data:`!SEEK_HOLE`"
msgstr ""

#: ../../library/os.rst:1236
msgid ""
"Adjust the file offset to the next location containing a hole, relative to "
"the seek position. A hole is defined as a sequence of zeros."
msgstr ""

#: ../../library/os.rst:1242
msgid "These operations only make sense for filesystems that support them."
msgstr ""

#: ../../library/os.rst:1251
msgid ""
"Open the file *path* and set various flags according to *flags* and possibly "
"its mode according to *mode*.  When computing *mode*, the current umask "
"value is first masked out.  Return the file descriptor for the newly opened "
"file. The new file descriptor is :ref:`non-inheritable <fd_inheritance>`."
msgstr ""
"ファイル *path* を開き、*flag* に従って様々なフラグを設定し、可能なら *mode* "
"に従ってファイルモードを設定します。*mode* を計算する際、まず現在の umask 値"
"でマスクされます。新たに開いたファイルのファイル記述子を返します。新しいファ"
"イル記述子は :ref:`継承不可<fd_inheritance>` です。"

#: ../../library/os.rst:1256
msgid ""
"For a description of the flag and mode values, see the C run-time "
"documentation; flag constants (like :const:`O_RDONLY` and :const:`O_WRONLY`) "
"are defined in the :mod:`os` module.  In particular, on Windows adding :"
"const:`O_BINARY` is needed to open files in binary mode."
msgstr ""
"フラグとファイルモードの値についての詳細は C ランタイムのドキュメントを参照し"
"てください; (:const:`O_RDONLY` や :const:`O_WRONLY` のような) フラグ定数は :"
"mod:`os` モジュールでも定義されています。特に、Windows ではバイナリモードで"
"ファイルを開く時に :const:`O_BINARY` を加える必要があります。"

#: ../../library/os.rst:1261
msgid ""
"This function can support :ref:`paths relative to directory descriptors "
"<dir_fd>` with the *dir_fd* parameter."
msgstr ""
"この関数は *dir_fd* パラメタで :ref:`ディレクトリ記述子への相対パス "
"<dir_fd>` をサポートしています。"

#: ../../library/os.rst:1264
msgid ""
"Raises an :ref:`auditing event <auditing>` ``open`` with arguments ``path``, "
"``mode``, ``flags``."
msgstr ""
"引数 ``path``, ``mode``, ``flags`` を指定して :ref:`監査イベント <auditing>` "
"``open`` を送出します。 "

#: ../../library/os.rst:1271
msgid ""
"This function is intended for low-level I/O.  For normal usage, use the "
"built-in function :func:`open`, which returns a :term:`file object` with :"
"meth:`~file.read` and :meth:`~file.write` methods (and many more).  To wrap "
"a file descriptor in a file object, use :func:`fdopen`."
msgstr ""
"この関数は低水準の I/O 向けのものです。\n"
"通常の利用では、組み込み関数 :func:`open` を使用してください。\n"
":func:`open` は :meth:`~file.read` や :meth:`~file.write` (そしてさらに多く"
"の) メソッドを持つ :term:`ファイルオブジェクト <file object>` を返します。\n"
"ファイル記述子をファイルオブジェクトでラップするには :func:`fdopen` を使用し"
"てください。"

#: ../../library/os.rst:1276 ../../library/os.rst:2405
#: ../../library/os.rst:2445 ../../library/os.rst:2516
#: ../../library/os.rst:2538 ../../library/os.rst:2619
#: ../../library/os.rst:2649 ../../library/os.rst:2756
#: ../../library/os.rst:3513
msgid "Added the *dir_fd* parameter."
msgstr "引数 *dir_fd* を追加しました。"

#: ../../library/os.rst:1279 ../../library/os.rst:1630
#: ../../library/os.rst:1819 ../../library/os.rst:5097
msgid ""
"If the system call is interrupted and the signal handler does not raise an "
"exception, the function now retries the system call instead of raising an :"
"exc:`InterruptedError` exception (see :pep:`475` for the rationale)."
msgstr ""
"システムコールが中断されシグナルハンドラが例外を送出しなかった場合、この関数"
"は :exc:`InterruptedError` 例外を送出する代わりにシステムコールを再試行するよ"
"うになりました (論拠については :pep:`475` を参照してください)。"

#: ../../library/os.rst:1284 ../../library/os.rst:2029
#: ../../library/os.rst:2061 ../../library/os.rst:2092
#: ../../library/os.rst:2142 ../../library/os.rst:2183
#: ../../library/os.rst:2223 ../../library/os.rst:2241
#: ../../library/os.rst:2257 ../../library/os.rst:2316
#: ../../library/os.rst:2408 ../../library/os.rst:2448
#: ../../library/os.rst:2492 ../../library/os.rst:2519
#: ../../library/os.rst:2541 ../../library/os.rst:2582
#: ../../library/os.rst:2652 ../../library/os.rst:2671
#: ../../library/os.rst:2759 ../../library/os.rst:3049
#: ../../library/os.rst:3336 ../../library/os.rst:3500
#: ../../library/os.rst:3516 ../../library/os.rst:3556
#: ../../library/os.rst:3655 ../../library/os.rst:3716
#: ../../library/os.rst:4113 ../../library/os.rst:4293
#: ../../library/os.rst:4859
msgid "Accepts a :term:`path-like object`."
msgstr ":term:`path-like object` を受け入れるようになりました。"

#: ../../library/os.rst:1287
msgid ""
"The following constants are options for the *flags* parameter to the :func:"
"`~os.open` function.  They can be combined using the bitwise OR operator ``|"
"``.  Some of them are not available on all platforms.  For descriptions of "
"their availability and use, consult the :manpage:`open(2)` manual page on "
"Unix or `the MSDN <https://msdn.microsoft.com/en-us/library/z0kc8e3z.aspx>`_ "
"on Windows."
msgstr ""
"以下の定数は :func:`~os.open` 関数の *flags* 引数に利用します。これらの定数"
"は、ビット単位に OR 演算子 ``|`` で組み合わせることができます。一部、すべての"
"プラットフォームでは使用できない定数があります。利用可能かどうかや使い方につ"
"いては、Unix では :manpage:`open(2)`、Windows では `MSDN <https://msdn."
"microsoft.com/en-us/library/z0kc8e3z.aspx>`_ を参照してください。"

#: ../../library/os.rst:1302
msgid "The above constants are available on Unix and Windows."
msgstr "上記の定数は Unix および Windows で利用可能です。"

#: ../../library/os.rst:1313
msgid "The above constants are only available on Unix."
msgstr "上記の定数は Unix でのみ利用可能です。"

#: ../../library/os.rst:1315
msgid "Add :data:`O_CLOEXEC` constant."
msgstr "定数 :data:`O_CLOEXEC` が追加されました。"

#: ../../library/os.rst:1326
msgid "The above constants are only available on Windows."
msgstr "上記の定数は Windows でのみ利用可能です。"

#: ../../library/os.rst:1333
msgid "The above constants are only available on macOS."
msgstr "上記の定数は macOS でのみ利用可能です。"

#: ../../library/os.rst:1335
msgid ""
"Add :data:`O_EVTONLY`, :data:`O_FSYNC`, :data:`O_SYMLINK` and :data:"
"`O_NOFOLLOW_ANY` constants."
msgstr ""

#: ../../library/os.rst:1349
msgid ""
"The above constants are extensions and not present if they are not defined "
"by the C library."
msgstr ""
"上記の定数は拡張仕様であり、Cライブラリで定義されていない場合は利用できませ"
"ん。"

#: ../../library/os.rst:1352
msgid ""
"Add :data:`O_PATH` on systems that support it. Add :data:`O_TMPFILE`, only "
"available on Linux Kernel 3.11   or newer."
msgstr ""
":data:`O_PATH` を、それをサポートするシステムで追加しました。また、 :data:"
"`O_TMPFILE` を追加しました (Linux Kernel 3.11 以降でのみ利用可能です)。"

#: ../../library/os.rst:1362
msgid ""
"Open a new pseudo-terminal pair. Return a pair of file descriptors "
"``(master, slave)`` for the pty and the tty, respectively. The new file "
"descriptors are :ref:`non-inheritable <fd_inheritance>`. For a (slightly) "
"more portable approach, use the :mod:`pty` module."
msgstr ""
"新しい擬似端末のペアを開きます。pty および tty を表すファイル記述子のペア "
"``(master, slave)`` を返します。新しいファイル記述子は :ref:`継承不可 "
"<fd_inheritance>` です。(若干) 可搬性の高いアプローチには :mod:`pty` を使用し"
"てください。"

#: ../../library/os.rst:1369 ../../library/os.rst:1381
msgid "The new file descriptors are now non-inheritable."
msgstr "新しいファイル記述子が継承不可になりました。"

#: ../../library/os.rst:1375
msgid ""
"Create a pipe.  Return a pair of file descriptors ``(r, w)`` usable for "
"reading and writing, respectively. The new file descriptor is :ref:`non-"
"inheritable <fd_inheritance>`."
msgstr ""
"パイプを作成します。読み込み、書き込みに使うことの出来るファイル記述子のペア "
"``(r, w)``  を返します。新しいファイル記述子は :ref:`継承不可 "
"<fd_inheritance>` です。"

#: ../../library/os.rst:1387
msgid ""
"Create a pipe with *flags* set atomically. *flags* can be constructed by "
"ORing together one or more of these values: :data:`O_NONBLOCK`, :data:"
"`O_CLOEXEC`. Return a pair of file descriptors ``(r, w)`` usable for reading "
"and writing, respectively."
msgstr ""
"*flags* を設定したパイプをアトミックに作成します。*flags* には値 :data:"
"`O_NONBLOCK` と :data:`O_CLOEXEC` を一つ以上論理和指定できます。読み込み、書"
"き込みに使うことの出来るファイル記述子のペア ``(r, w)``  を返します。"

#: ../../library/os.rst:1400
msgid ""
"Ensures that enough disk space is allocated for the file specified by *fd* "
"starting from *offset* and continuing for *len* bytes."
msgstr ""
"*fd* で指定されたファイルに対し、開始位置 *offset* から *len* バイト分割り当"
"てるに十分なディスクスペースを確保します。"

#: ../../library/os.rst:1410
msgid ""
"Announces an intention to access data in a specific pattern thus allowing "
"the kernel to make optimizations. The advice applies to the region of the "
"file specified by *fd* starting at *offset* and continuing for *len* bytes. "
"*advice* is one of :data:`POSIX_FADV_NORMAL`, :data:"
"`POSIX_FADV_SEQUENTIAL`, :data:`POSIX_FADV_RANDOM`, :data:"
"`POSIX_FADV_NOREUSE`, :data:`POSIX_FADV_WILLNEED` or :data:"
"`POSIX_FADV_DONTNEED`."
msgstr ""
"データへアクセスする意思を、パターンを指定して宣言します。これによりカーネル"
"が最適化を行えるようになります。*advice* は *fd* で指定されたファイルに対し、"
"開始位置 *offset* から *len* バイト分の領域に適用されます。*advice* には :"
"data:`POSIX_FADV_NORMAL`、:data:`POSIX_FADV_SEQUENTIAL`、:data:"
"`POSIX_FADV_RANDOM`、:data:`POSIX_FADV_NOREUSE`、:data:"
"`POSIX_FADV_WILLNEED`、または :data:`POSIX_FADV_DONTNEED` のいずれか一つを指"
"定します。"

#: ../../library/os.rst:1430
msgid ""
"Flags that can be used in *advice* in :func:`posix_fadvise` that specify the "
"access pattern that is likely to be used."
msgstr ""
":func:`posix_fadvise` において、使われるであろうアクセスパターンを指定する "
"*advice* に使用できるフラグです。"

#: ../../library/os.rst:1440
msgid ""
"Read at most *n* bytes from file descriptor *fd* at a position of *offset*, "
"leaving the file offset unchanged."
msgstr ""
"ファイル記述子の位置 *offset* から最大で *n* バイトを読み出します。\n"
"ファイルオフセットは変化しません。"

#: ../../library/os.rst:1443 ../../library/os.rst:1619
msgid ""
"Return a bytestring containing the bytes read. If the end of the file "
"referred to by *fd* has been reached, an empty bytes object is returned."
msgstr ""
"読み込んだバイト分のバイト列を返します。\n"
"*fd* が参照しているファイルの終端に達した場合、空のバイト列が返されます。"

#: ../../library/os.rst:1453
msgid "Open and return a file descriptor for a master pseudo-terminal device."
msgstr ""

#: ../../library/os.rst:1455
msgid ""
"Calls the C standard library function :c:func:`posix_openpt`. The *oflag* "
"argument is used to set file status flags and file access modes as specified "
"in the manual page of :c:func:`posix_openpt` of your system."
msgstr ""

#: ../../library/os.rst:1459
msgid ""
"The returned file descriptor is :ref:`non-inheritable <fd_inheritance>`. If "
"the value :data:`O_CLOEXEC` is available on the system, it is added to "
"*oflag*."
msgstr ""

#: ../../library/os.rst:1470
msgid ""
"Read from a file descriptor *fd* at a position of *offset* into mutable :"
"term:`bytes-like objects <bytes-like object>` *buffers*, leaving the file "
"offset unchanged.  Transfer data into each buffer until it is full and then "
"move on to the next buffer in the sequence to hold the rest of the data."
msgstr ""
"ファイル記述子 *fd* の *offset* の位置から、可変な :term:`bytes-like オブジェ"
"クト <bytes-like object>` *buffers* にオフセットを変更せずに読み込みます。\n"
"データをそれぞれのバッファがいっぱいになるまで移し、いっぱいになったらシーケ"
"ンスの次のバッファに処理を移し、残りのデータを読み込ませます。"

#: ../../library/os.rst:1475 ../../library/os.rst:1560
msgid ""
"The flags argument contains a bitwise OR of zero or more of the following "
"flags:"
msgstr ""
"flags 引数にはゼロあるいは次のフラグのバイトごとの OR を取った結果が保持され"
"ています。"

#: ../../library/os.rst:1478
msgid ":data:`RWF_HIPRI`"
msgstr ":data:`RWF_HIPRI`"

#: ../../library/os.rst:1479
msgid ":data:`RWF_NOWAIT`"
msgstr ":data:`RWF_NOWAIT`"

#: ../../library/os.rst:1481 ../../library/os.rst:1756
msgid ""
"Return the total number of bytes actually read which can be less than the "
"total capacity of all the objects."
msgstr ""
"実際に読み込んだ合計バイト数を返します。この値は、すべてのオブジェクトの容量"
"の総量よりも小さくなることがあります。"

#: ../../library/os.rst:1484 ../../library/os.rst:1569
#: ../../library/os.rst:1759 ../../library/os.rst:1834
msgid ""
"The operating system may set a limit (:func:`sysconf` value "
"``'SC_IOV_MAX'``) on the number of buffers that can be used."
msgstr ""
"オペレーティングシステムは、使用可能なバッファの個数に基づいて上限 (:func:"
"`sysconf` の ``'SC_IOV_MAX'`` の値) を設定することがあります。"

#: ../../library/os.rst:1487
msgid "Combine the functionality of :func:`os.readv` and :func:`os.pread`."
msgstr ":func:`os.readv` と :func:`os.pread` の機能を統合します。"

#: ../../library/os.rst:1491 ../../library/os.rst:1576
msgid "Using flags requires Linux >= 4.6."
msgstr ""

#: ../../library/os.rst:1498
msgid ""
"Do not wait for data which is not immediately available. If this flag is "
"specified, the system call will return instantly if it would have to read "
"data from the backing storage or wait for a lock."
msgstr ""
"即座に利用できないデータを待ちません。このフラグを指定すると、バックエンドの"
"ストレージからデータを読む必要があるか、ロックを待機する場合、システムコール"
"は即座にリターンします。"

#: ../../library/os.rst:1502
msgid ""
"If some data was successfully read, it will return the number of bytes read. "
"If no bytes were read, it will return ``-1`` and set errno to :const:`errno."
"EAGAIN`."
msgstr ""

#: ../../library/os.rst:1513
msgid ""
"High priority read/write. Allows block-based filesystems to use polling of "
"the device, which provides lower latency, but may use additional resources."
msgstr ""
"優先度の高い読み込み・書き込み (read/write) フラグです。ブロックストレージに"
"対して、追加のリソースを必要とする一方で低レイテンシなデバイスのポーリングを"
"使うことを許可します。"

#: ../../library/os.rst:1517
msgid ""
"Currently, on Linux, this feature is usable only on a file descriptor opened "
"using the :data:`O_DIRECT` flag."
msgstr ""
"現状、Linuxでは、ファイル記述子を :data:`O_DIRECT` フラグを指定したオープンし"
"た場合でのみ、この機能を利用できます。"

#: ../../library/os.rst:1527
msgid ""
"Return the name of the slave pseudo-terminal device associated with the "
"master pseudo-terminal device to which the file descriptor *fd* refers. The "
"file descriptor *fd* is not closed upon failure."
msgstr ""

#: ../../library/os.rst:1531
msgid ""
"Calls the reentrant C standard library function :c:func:`ptsname_r` if it is "
"available; otherwise, the C standard library function :c:func:`ptsname`, "
"which is not guaranteed to be thread-safe, is called."
msgstr ""

#: ../../library/os.rst:1542
msgid ""
"Write the bytestring in *str* to file descriptor *fd* at position of "
"*offset*, leaving the file offset unchanged."
msgstr ""
"*str* 中のバイト文字列をファイル記述子 *fd* の *offset* の位置に書き込みま"
"す。ファイルオフセットを変化しません。"

#: ../../library/os.rst:1545 ../../library/os.rst:1809
msgid "Return the number of bytes actually written."
msgstr "実際に書き込まれたバイト数を返します。"

#: ../../library/os.rst:1554
msgid ""
"Write the *buffers* contents to file descriptor *fd* at an offset *offset*, "
"leaving the file offset unchanged.  *buffers* must be a sequence of :term:"
"`bytes-like objects <bytes-like object>`. Buffers are processed in array "
"order. Entire contents of the first buffer is written before proceeding to "
"the second, and so on."
msgstr ""

#: ../../library/os.rst:1563
msgid ":data:`RWF_DSYNC`"
msgstr ":data:`RWF_DSYNC`"

#: ../../library/os.rst:1564
msgid ":data:`RWF_SYNC`"
msgstr ":data:`RWF_SYNC`"

#: ../../library/os.rst:1565
msgid ":data:`RWF_APPEND`"
msgstr ":data:`RWF_APPEND`"

#: ../../library/os.rst:1567
msgid "Return the total number of bytes actually written."
msgstr "実際に書き込まれた合計バイト数を返します。"

#: ../../library/os.rst:1572
msgid "Combine the functionality of :func:`os.writev` and :func:`os.pwrite`."
msgstr ":func:`os.writev` と :func:`os.pwrite` の機能を統合します。"

#: ../../library/os.rst:1583
msgid ""
"Provide a per-write equivalent of the :data:`O_DSYNC` :func:`os.open` flag. "
"This flag effect applies only to the data range written by the system call."
msgstr ""
"書き込みごとに :func:`os.open` の :data:`O_DSYNC` と同等の効果を提供するフラ"
"グです。このフラグはシステムコールによって書き込まれたデータ範囲に対してのみ"
"適用されます。"

#: ../../library/os.rst:1593
msgid ""
"Provide a per-write equivalent of the :data:`O_SYNC` :func:`os.open` flag. "
"This flag effect applies only to the data range written by the system call."
msgstr ""
"書き込みごとに :func:`os.open` の :data:`O_SYNC` と同等の効果を提供するフラグ"
"です。このフラグはシステムコールによって書き込まれたデータ範囲に対してのみ適"
"用されます。"

#: ../../library/os.rst:1603
msgid ""
"Provide a per-write equivalent of the :data:`O_APPEND` :func:`os.open` flag. "
"This flag is meaningful only for :func:`os.pwritev`, and its effect applies "
"only to the data range written by the system call. The *offset* argument "
"does not affect the write operation; the data is always appended to the end "
"of the file. However, if the *offset* argument is ``-1``, the current file "
"*offset* is updated."
msgstr ""

#: ../../library/os.rst:1617
msgid "Read at most *n* bytes from file descriptor *fd*."
msgstr "ファイル記述子 *fd* から 最大 *n* バイトを読み込みます。"

#: ../../library/os.rst:1624
msgid ""
"This function is intended for low-level I/O and must be applied to a file "
"descriptor as returned by :func:`os.open` or :func:`pipe`.  To read a \"file "
"object\" returned by the built-in function :func:`open` or by :func:`popen` "
"or :func:`fdopen`, or :data:`sys.stdin`, use its :meth:`~file.read` or :meth:"
"`~file.readline` methods."
msgstr ""
"この関数は低水準の I/O 向けのもので、 :func:`os.open` や :func:`pipe` が返す"
"ファイル記述子に対して使用されなければなりません。\n"
"組み込み関数 :func:`open` や :func:`popen` 、 :func:`fdopen` 、あるいは :"
"data:`sys.stdin` が返す \"ファイルオブジェクト\" を読み込むには、オブジェクト"
"の :meth:`~file.read` か :meth:`~file.readline` メソッドを使用してください。"

#: ../../library/os.rst:1639
msgid ""
"Copy *count* bytes from file descriptor *in_fd* to file descriptor *out_fd* "
"starting at *offset*. Return the number of bytes sent. When EOF is reached "
"return ``0``."
msgstr ""
"ファイル記述子 *in_fd* からファイル記述子 *out_fd* への開始位置 *offset* へ "
"*count* バイトコピーします。\n"
"送信バイト数を返します。\n"
"EOF に達した場合は ``0`` を返します。"

#: ../../library/os.rst:1643
msgid ""
"The first function notation is supported by all platforms that define :func:"
"`sendfile`."
msgstr ""
"前者の関数表記は :func:`sendfile` が定義されているすべてのプラットフォームで"
"サポートされています。"

#: ../../library/os.rst:1646
msgid ""
"On Linux, if *offset* is given as ``None``, the bytes are read from the "
"current position of *in_fd* and the position of *in_fd* is updated."
msgstr ""
"Linux では、*offset* に ``None`` が与えられると、バイト列は *in_fd* の現在の"
"位置から読み込まれ、*in_fd* の位置は更新されます。"

#: ../../library/os.rst:1649
msgid ""
"The second case may be used on macOS and FreeBSD where *headers* and "
"*trailers* are arbitrary sequences of buffers that are written before and "
"after the data from *in_fd* is written. It returns the same as the first "
"case."
msgstr ""
"後者は macOS および FreeBSD で使用される場合があります。*headers* および "
"*trailers* は任意のバッファのシーケンス型オブジェクトで、*in_fd* からのデータ"
"が書き出される前と後に書き出されます。返り値は前者と同じです。"

#: ../../library/os.rst:1653
msgid ""
"On macOS and FreeBSD, a value of ``0`` for *count* specifies to send until "
"the end of *in_fd* is reached."
msgstr ""
"macOS と FreeBSD では、*count* の値に ``0`` を指定すると、 *in_fd* の末尾に達"
"するまで送信します。"

#: ../../library/os.rst:1656
msgid ""
"All platforms support sockets as *out_fd* file descriptor, and some "
"platforms allow other types (e.g. regular file, pipe) as well."
msgstr ""
"全てのプラットフォームはソケットをファイル記述子 *out_fd* としてサポートし、"
"あるプラットフォームは他の種類 (例えば、通常のファイル、パイプ) も同様にサ"
"ポートします。"

#: ../../library/os.rst:1659
msgid ""
"Cross-platform applications should not use *headers*, *trailers* and *flags* "
"arguments."
msgstr ""
"クロスプラットフォームのアプリケーションは *headers*、*trailers* ならびに "
"*flags* 引数を使用するべきではありません。"

#: ../../library/os.rst:1666
msgid ""
"For a higher-level wrapper of :func:`sendfile`, see :meth:`socket.socket."
"sendfile`."
msgstr ""
":func:`sendfile` のより高水準のラッパについては :meth:`socket.socket."
"sendfile` を参照してください。"

#: ../../library/os.rst:1671
msgid "Parameters *out* and *in* was renamed to *out_fd* and *in_fd*."
msgstr "引数 *out* と *in* は *out_fd* と *in_fd* に名前が変更されました。"

#: ../../library/os.rst:1679
msgid ""
"Parameters to the :func:`sendfile` function, if the implementation supports "
"them."
msgstr ""
"実装がサポートしている場合 :func:`sendfile` 関数に渡すパラメーターです。"

#: ../../library/os.rst:1688
msgid ""
"Parameter to the :func:`sendfile` function, if the implementation supports "
"it. The data won't be cached in the virtual memory and will be freed "
"afterwards."
msgstr ""

#: ../../library/os.rst:1698
msgid ""
"Set the blocking mode of the specified file descriptor. Set the :data:"
"`O_NONBLOCK` flag if blocking is ``False``, clear the flag otherwise."
msgstr ""
"指定されたファイル記述子のブロッキングモードを設定します。\n"
"ブロッキングが ``False`` の場合 :data:`O_NONBLOCK` フラグを設定し、そうでない"
"場合はクリアします。"

#: ../../library/os.rst:1701
msgid "See also :func:`get_blocking` and :meth:`socket.socket.setblocking`."
msgstr ""
":func:`get_blocking` および :meth:`socket.socket.setblocking` も参照してくだ"
"さい。"

#: ../../library/os.rst:1718
msgid ""
"Transfer *count* bytes from file descriptor *src*, starting from offset "
"*offset_src*, to file descriptor *dst*, starting from offset *offset_dst*. "
"At least one of the file descriptors must refer to a pipe. If *offset_src* "
"is ``None``, then *src* is read from the current position; respectively for "
"*offset_dst*. The offset associated to the file descriptor that refers to a "
"pipe must be ``None``. The files pointed to by *src* and *dst* must reside "
"in the same filesystem, otherwise an :exc:`OSError` is raised with :attr:"
"`~OSError.errno` set to :const:`errno.EXDEV`."
msgstr ""

#: ../../library/os.rst:1727
msgid ""
"This copy is done without the additional cost of transferring data from the "
"kernel to user space and then back into the kernel. Additionally, some "
"filesystems could implement extra optimizations. The copy is done as if both "
"files are opened as binary."
msgstr ""
"このコピーは、カーネルからユーザースペースにデータを転送した後カーネルに戻す"
"という追加のコスト無しに完了します。\n"
"加えて、追加の最適化ができるファイルシステムもあります。\n"
"このコピーはファイルが両方ともバイナリファイルとして開かれたかのように行われ"
"ます。"

#: ../../library/os.rst:1732
msgid ""
"Upon successful completion, returns the number of bytes spliced to or from "
"the pipe. A return value of 0 means end of input. If *src* refers to a pipe, "
"then this means that there was no data to transfer, and it would not make "
"sense to block because there are no writers connected to the write end of "
"the pipe."
msgstr ""

#: ../../library/os.rst:1751
msgid ""
"Read from a file descriptor *fd* into a number of mutable :term:`bytes-like "
"objects <bytes-like object>` *buffers*. Transfer data into each buffer until "
"it is full and then move on to the next buffer in the sequence to hold the "
"rest of the data."
msgstr ""
" ファイル記述子 *fd* から、いくつかの可変な :term:`bytes-like オブジェクト "
"<bytes-like object>` *buffers* へ読み込みます。バッファがいっぱいになるまで"
"データを転送した後で、残りのデータを保持するためにシーケンスの次のバッファへ"
"移ってデータ転送を続けます。"

#: ../../library/os.rst:1769
msgid ""
"Return the process group associated with the terminal given by *fd* (an open "
"file descriptor as returned by :func:`os.open`)."
msgstr ""
"*fd* (:func:`os.open` が返すオープンしたファイル記述子 ) で与えられる端末に関"
"連付けられたプロセスグループを返します。"

#: ../../library/os.rst:1777
msgid ""
"Set the process group associated with the terminal given by *fd* (an open "
"file descriptor as returned by :func:`os.open`) to *pg*."
msgstr ""
"*fd* (:func:`os.open` が返すオープンしたファイル記述子 ) で与えられる端末に関"
"連付けられたプロセスグループを *pg* に設定します。"

#: ../../library/os.rst:1785
msgid ""
"Return a string which specifies the terminal device associated with file "
"descriptor *fd*.  If *fd* is not associated with a terminal device, an "
"exception is raised."
msgstr ""
"ファイル記述子 *fd* に関連付けられている端末デバイスを特定する文字列を返しま"
"す。 *fd* が端末に関連付けられていない場合、例外が送出されます。"

#: ../../library/os.rst:1794
msgid ""
"Unlock the slave pseudo-terminal device associated with the master pseudo-"
"terminal device to which the file descriptor *fd* refers. The file "
"descriptor *fd* is not closed upon failure."
msgstr ""

#: ../../library/os.rst:1798
msgid "Calls the C standard library function :c:func:`unlockpt`."
msgstr ""

#: ../../library/os.rst:1807
msgid "Write the bytestring in *str* to file descriptor *fd*."
msgstr "*str* のバイト列をファイル記述子 *fd* に書き出します。"

#: ../../library/os.rst:1813
msgid ""
"This function is intended for low-level I/O and must be applied to a file "
"descriptor as returned by :func:`os.open` or :func:`pipe`.  To write a "
"\"file object\" returned by the built-in function :func:`open` or by :func:"
"`popen` or :func:`fdopen`, or :data:`sys.stdout` or :data:`sys.stderr`, use "
"its :meth:`~file.write` method."
msgstr ""
"この関数は低水準の I/O 向けのもので、 :func:`os.open` や :func:`pipe` が返す"
"ファイル記述子に対して使用しなければなりません。\n"
"組み込み関数 :func:`open` や :func:`popen` 、 :func:`fdopen` 、あるいは :"
"data:`sys.stdout` や :data:`sys.stderr` が返す \"ファイルオブジェクト\" に書"
"き込むには、オブジェクトの :meth:`~file.write` メソッドを使用してください。"

#: ../../library/os.rst:1827
msgid ""
"Write the contents of *buffers* to file descriptor *fd*. *buffers* must be a "
"sequence of :term:`bytes-like objects <bytes-like object>`. Buffers are "
"processed in array order. Entire contents of the first buffer is written "
"before proceeding to the second, and so on."
msgstr ""
"*buffers* の内容をファイル記述子 *fd* へ書き出します。 *buffers* は :term:"
"`bytes-like オブジェクト<bytes-like object>` のシーケンスでなければなりませ"
"ん。バッファは配列の順番で処理されます。最初のバッファの内容全体は 2 番目の"
"バッファに進む前に書き込まれ、その次も同様です。"

#: ../../library/os.rst:1832
msgid "Returns the total number of bytes actually written."
msgstr "実際に書き込まれた合計バイト数を返します。"

#: ../../library/os.rst:1845
msgid "Querying the size of a terminal"
msgstr "ターミナルのサイズの問い合わせ"

#: ../../library/os.rst:1851
msgid ""
"Return the size of the terminal window as ``(columns, lines)``, tuple of "
"type :class:`terminal_size`."
msgstr ""
"ターミナル (端末) のサイズ ``(columns, lines)`` を、:class:`terminal_size` 型"
"のタプルで返します。"

#: ../../library/os.rst:1854
msgid ""
"The optional argument ``fd`` (default ``STDOUT_FILENO``, or standard output) "
"specifies which file descriptor should be queried."
msgstr ""
"オプションの引数 ``fd`` には問い合わせるファイル記述子を指定します (デフォル"
"トは ``STDOUT_FILENO``、または標準出力)。"

#: ../../library/os.rst:1857
msgid ""
"If the file descriptor is not connected to a terminal, an :exc:`OSError` is "
"raised."
msgstr ""
"ファイル記述子が接続されていなかった場合、 :exc:`OSError` が送出されます。"

#: ../../library/os.rst:1860
msgid ""
":func:`shutil.get_terminal_size` is the high-level function which should "
"normally be used, ``os.get_terminal_size`` is the low-level implementation."
msgstr ""
"通常は高水準関数である :func:`shutil.get_terminal_size` を使用してください。"
"``os.get_terminal_size`` は低水準の実装です。"

#: ../../library/os.rst:1868
msgid ""
"A subclass of tuple, holding ``(columns, lines)`` of the terminal window "
"size."
msgstr ""
"ターミナルウィンドウのサイズ ``(columns, lines)`` を保持するタプルのサブクラ"
"スです。"

#: ../../library/os.rst:1872
msgid "Width of the terminal window in characters."
msgstr "ターミナルウィンドウの横幅 (文字数) です。"

#: ../../library/os.rst:1876
msgid "Height of the terminal window in characters."
msgstr "ターミナルウィンドウの高さ (文字数) です。"

#: ../../library/os.rst:1882
msgid "Inheritance of File Descriptors"
msgstr "ファイル記述子の継承"

#: ../../library/os.rst:1886
msgid ""
"A file descriptor has an \"inheritable\" flag which indicates if the file "
"descriptor can be inherited by child processes.  Since Python 3.4, file "
"descriptors created by Python are non-inheritable by default."
msgstr ""
"ファイル記述子には「継承可能 (inheritable)」フラグというものがあって、これに"
"より子プロセスにファイル記述子が引き継がれるかどうかが決定されます。Python "
"3.4 より、 Python によって作成されるファイル記述子はデフォルトで継承不可 "
"(non-inheritable) となりました。"

#: ../../library/os.rst:1890
msgid ""
"On UNIX, non-inheritable file descriptors are closed in child processes at "
"the execution of a new program, other file descriptors are inherited."
msgstr ""
"UNIX の場合、継承不可のファイル記述子は新規プロセス実行時にクローズされ、そう"
"でないファイル記述子は引き継がれます。"

#: ../../library/os.rst:1893
msgid ""
"On Windows, non-inheritable handles and file descriptors are closed in child "
"processes, except for standard streams (file descriptors 0, 1 and 2: stdin, "
"stdout and stderr), which are always inherited.  Using :func:`spawn\\* "
"<spawnl>` functions, all inheritable handles and all inheritable file "
"descriptors are inherited. Using the :mod:`subprocess` module, all file "
"descriptors except standard streams are closed, and inheritable handles are "
"only inherited if the *close_fds* parameter is ``False``."
msgstr ""
"Windows の場合は、標準ストリームを除き、継承不可のハンドルと継承不可のファイ"
"ル記述子は子プロセスでクローズされます。標準ストリーム (ファイル記述子の 0, "
"1, 2: 標準入力, 標準出力, 標準エラー出力) は常に引き継がれます。 :func:"
"`spawn\\* <spawnl>` 関数を使う場合、全ての継承可能なハンドルと全ての継承可能"
"なファイル記述子は引き継がれます。 :mod:`subprocess` モジュールを使う場合、標"
"準ストリームを除く全てのファイル記述子はクローズされ、継承可能なハンドルは "
"*close_fds* 引数が ``False`` の場合にのみ引き継がれます。"

#: ../../library/os.rst:1901
msgid "On WebAssembly platforms, the file descriptor cannot be modified."
msgstr ""

#: ../../library/os.rst:1905
msgid ""
"Get the \"inheritable\" flag of the specified file descriptor (a boolean)."
msgstr ""
"指定したファイル記述子の「継承可能 (inheritable)」フラグを取得します "
"(boolean)。"

#: ../../library/os.rst:1909
msgid "Set the \"inheritable\" flag of the specified file descriptor."
msgstr ""
"指定したファイル記述子の「継承可能 (inheritable)」フラグをセットします。"

#: ../../library/os.rst:1913
msgid "Get the \"inheritable\" flag of the specified handle (a boolean)."
msgstr ""
"指定したハンドルの「継承可能 (inheritable)」フラグを取得します (boolean)。"

#: ../../library/os.rst:1919
msgid "Set the \"inheritable\" flag of the specified handle."
msgstr "指定したハンドルの「継承可能 (inheritable)」フラグをセットします。"

#: ../../library/os.rst:1927
msgid "Files and Directories"
msgstr "ファイルとディレクトリ"

#: ../../library/os.rst:1929
msgid ""
"On some Unix platforms, many of these functions support one or more of these "
"features:"
msgstr ""
"一部の Unix プラットフォームでは、このセクションの関数の多くが以下の機能を一"
"つ以上サポートしています。"

#: ../../library/os.rst:1934
msgid ""
"**specifying a file descriptor:** Normally the *path* argument provided to "
"functions in the :mod:`os` module must be a string specifying a file path.  "
"However, some functions now alternatively accept an open file descriptor for "
"their *path* argument. The function will then operate on the file referred "
"to by the descriptor. (For POSIX systems, Python will call the variant of "
"the function prefixed with ``f`` (e.g. call ``fchdir`` instead of "
"``chdir``).)"
msgstr ""
"**ファイル記述子の指定:** :mod:`os` モジュールの関数で *path* 引数に渡される"
"値はファイルパスでなければなりません。しかしながら、いくつかの関数では "
"*path* 引数にファイルパスではなく、そのファイルをオープンしたファイル記述子を"
"指定できるようになりました。この場合それらの関数はファイル記述子が参照する"
"ファイルに対して操作を行います。  (POSIX システムの場合、 Python はプレフィッ"
"クス ``f`` の付いた関数の亜種 (たとえば ``chdir``の代わりに ``fchdir``) を呼"
"び出します。)"

#: ../../library/os.rst:1942
msgid ""
"You can check whether or not *path* can be specified as a file descriptor "
"for a particular function on your platform using :data:`os.supports_fd`. If "
"this functionality is unavailable, using it will raise a :exc:"
"`NotImplementedError`."
msgstr ""
":data:`os.supports_fd` を使うことで、そのプラットフォーム上で *path* にファイ"
"ル記述子を指定できるかどうかを確認することができます。この機能が利用可能でな"
"い場合、 :data:`os.supports_fd` の利用は :exc:`NotImplementedError` 例外を送"
"出します。"

#: ../../library/os.rst:1947
msgid ""
"If the function also supports *dir_fd* or *follow_symlinks* arguments, it's "
"an error to specify one of those when supplying *path* as a file descriptor."
msgstr ""
"その関数が引数に *dir_fd* または *follow_symlinks* もサポートしている場合、"
"*path* にファイル記述子を指定した時にそれらのいずれかを指定するとエラーになり"
"ます。"

#: ../../library/os.rst:1952
msgid ""
"**paths relative to directory descriptors:** If *dir_fd* is not ``None``, it "
"should be a file descriptor referring to a directory, and the path to "
"operate on should be relative; path will then be relative to that "
"directory.  If the path is absolute, *dir_fd* is ignored.  (For POSIX "
"systems, Python will call the variant of the function with an ``at`` suffix "
"and possibly prefixed with ``f`` (e.g. call ``faccessat`` instead of "
"``access``)."
msgstr ""
"**ディレクトリ記述子からの相対パス:** *dir_fd* が ``None`` でない場合、その値"
"はディレクトリを参照するファイル記述子である必要があり、また操作対象のファイ"
"ルパスは相対パスである必要があります; このときパスはファイル記述子が指すディ"
"レクトリからの相対パスと解釈されます。パスが絶対パスの場合、 *dir_fd* は無視"
"されます。 (POSIX システムでは、 Python はサフィックス ``at`` が付いた関数の"
"亜種、もしくはさらにプレフィックス ``f`` が付いたもの (たとえば ``access`` の"
"代わりに ``faccessat``) を呼び出します。"

#: ../../library/os.rst:1959
msgid ""
"You can check whether or not *dir_fd* is supported for a particular function "
"on your platform using :data:`os.supports_dir_fd`.  If it's unavailable, "
"using it will raise a :exc:`NotImplementedError`."
msgstr ""
"そのプラットフォーム上で特別な関数に *dir_fd* がサポートされているかどうか"
"は、:data:`os.supports_dir_fd` で確認できます。利用できない場合 :exc:"
"`NotImplementedError` が送出されます。"

#: ../../library/os.rst:1965
msgid ""
"**not following symlinks:** If *follow_symlinks* is ``False``, and the last "
"element of the path to operate on is a symbolic link, the function will "
"operate on the symbolic link itself rather than the file pointed to by the "
"link.  (For POSIX systems, Python will call the ``l...`` variant of the "
"function.)"
msgstr ""
"**シンボリックリンクをたどらない:** *follow_symlinks* が ``False`` で、かつパ"
"スの末尾の要素がシンボリックリンクの場合、関数はシンボリックリンクが指すファ"
"イルではなくシンボリックリンク自身を操作対象とします。 (POSIX システムの場"
"合、 Python はプレフィックス ``l...`` 付きの関数の亜種を呼び出します。)"

#: ../../library/os.rst:1971
msgid ""
"You can check whether or not *follow_symlinks* is supported for a particular "
"function on your platform using :data:`os.supports_follow_symlinks`. If it's "
"unavailable, using it will raise a :exc:`NotImplementedError`."
msgstr ""
"そのプラットフォーム上で特別な関数に *follow_symlinks* がサポートされているか"
"どうかは、:data:`os.supports_follow_symlinks` で確認できます。利用できない場"
"合 :exc:`NotImplementedError` が送出されます。"

#: ../../library/os.rst:1979
msgid ""
"Use the real uid/gid to test for access to *path*.  Note that most "
"operations will use the effective uid/gid, therefore this routine can be "
"used in a suid/sgid environment to test if the invoking user has the "
"specified access to *path*.  *mode* should be :const:`F_OK` to test the "
"existence of *path*, or it can be the inclusive OR of one or more of :const:"
"`R_OK`, :const:`W_OK`, and :const:`X_OK` to test permissions.  Return :const:"
"`True` if access is allowed, :const:`False` if not. See the Unix man page :"
"manpage:`access(2)` for more information."
msgstr ""
"実 uid/gid を使って *path* に対するアクセスが可能か調べます。ほとんどのオペ"
"レーティングシステムは実効 uid/gid を使うため、このルーチンは suid/sgid 環境"
"において、プログラムを起動したユーザーが *path* に対するアクセス権をもってい"
"るかを調べるために使われます。 *path* が存在するかどうかを調べるには *mode* "
"を :const:`F_OK` にします。ファイルアクセス権限 ( パーミッション ) を調べるに"
"は、 :const:`R_OK`, :const:`W_OK`, :const:`X_OK` から一つまたはそれ以上のフラ"
"グを論理和指定でとることもできます。アクセスが許可されている場合 :const:"
"`True` を、そうでない場合 :const:`False` を返します。詳細は :manpage:"
"`access(2)` の Unix マニュアルページを参照してください。"

#: ../../library/os.rst:1988
msgid ""
"This function can support specifying :ref:`paths relative to directory "
"descriptors <dir_fd>` and :ref:`not following symlinks <follow_symlinks>`."
msgstr ""
"この関数は :ref:`ディレクトリ記述子への相対パス <dir_fd>` および :ref:`シンボ"
"リックリンクをたどらない <follow_symlinks>` をサポートしています。"

#: ../../library/os.rst:1991
msgid ""
"If *effective_ids* is ``True``, :func:`access` will perform its access "
"checks using the effective uid/gid instead of the real uid/gid. "
"*effective_ids* may not be supported on your platform; you can check whether "
"or not it is available using :data:`os.supports_effective_ids`.  If it is "
"unavailable, using it will raise a :exc:`NotImplementedError`."
msgstr ""
"*effective_ids* が ``True`` の場合、:func:`access` は実 uid/gid ではなく実効 "
"uid/gid を使用してアクセス権を調べます。プラットフォームによっては "
"*effective_ids* がサポートされていない場合があります; サポートされているかど"
"うかは :data:`os.supports_effective_ids` で確認できます。利用できない場合 :"
"exc:`NotImplementedError` が送出されます。"

#: ../../library/os.rst:1999
msgid ""
"Using :func:`access` to check if a user is authorized to e.g. open a file "
"before actually doing so using :func:`open` creates a security hole, because "
"the user might exploit the short time interval between checking and opening "
"the file to manipulate it. It's preferable to use :term:`EAFP` techniques. "
"For example::"
msgstr ""
"ユーザーが、例えばファイルを開く権限を持っているかどうかを調べるために実際"
"に :func:`open` を行う前に :func:`access` を使用することはセキュリティホール"
"の原因になります。なぜなら、調べた時点とオープンした時点との時間差を利用して"
"そのユーザーがファイルを不当に操作してしまうかもしれないからです。その場合"
"は :term:`EAFP` テクニックを利用するのが望ましいやり方です。例えば ::"

#: ../../library/os.rst:2005
msgid ""
"if os.access(\"myfile\", os.R_OK):\n"
"    with open(\"myfile\") as fp:\n"
"        return fp.read()\n"
"return \"some default data\""
msgstr ""

#: ../../library/os.rst:2010
msgid "is better written as::"
msgstr "このコードは次のように書いたほうが良いです ::"

#: ../../library/os.rst:2012
msgid ""
"try:\n"
"    fp = open(\"myfile\")\n"
"except PermissionError:\n"
"    return \"some default data\"\n"
"else:\n"
"    with fp:\n"
"        return fp.read()"
msgstr ""

#: ../../library/os.rst:2022
msgid ""
"I/O operations may fail even when :func:`access` indicates that they would "
"succeed, particularly for operations on network filesystems which may have "
"permissions semantics beyond the usual POSIX permission-bit model."
msgstr ""
"I/O 操作は :func:`access` が成功を示した時でも失敗することがあります。特に"
"ネットワークファイルシステムが通常の POSIX のパーミッションビットモデルをはみ"
"出すアクセス権限操作を備える場合にはそのようなことが起こりえます。"

#: ../../library/os.rst:2026
msgid "Added the *dir_fd*, *effective_ids*, and *follow_symlinks* parameters."
msgstr ""
"引数 *dir_fd*、*effective_ids*、および *follow_symlinks* が追加されました。"

#: ../../library/os.rst:2038
msgid ""
"Values to pass as the *mode* parameter of :func:`access` to test the "
"existence, readability, writability and executability of *path*, "
"respectively."
msgstr ""
":func:`access` で *path* をテストする時に *mode* 引数に渡す値です。上からそれ"
"ぞれ、ファイルの存在、読み込み許可、書き込み許可、および実行許可になります。"

#: ../../library/os.rst:2047
msgid "Change the current working directory to *path*."
msgstr "現在の作業ディレクトリを *path* に設定します。"

#: ../../library/os.rst:2049
msgid ""
"This function can support :ref:`specifying a file descriptor <path_fd>`.  "
"The descriptor must refer to an opened directory, not an open file."
msgstr ""
"この関数は :ref:`ファイル記述子の指定 <path_fd>` をサポートしています。記述子"
"は、オープンしているファイルではなく、オープンしているディレクトリを参照して"
"いなければなりません。"

#: ../../library/os.rst:2052
msgid ""
"This function can raise :exc:`OSError` and subclasses such as :exc:"
"`FileNotFoundError`, :exc:`PermissionError`, and :exc:`NotADirectoryError`."
msgstr ""
"この関数は :exc:`OSError` やそのサブクラスである :exc:`FileNotFoundError`, :"
"exc:`PermissionError`, :exc:`NotADirectoryError` などの例外を送出することがあ"
"ります。"

#: ../../library/os.rst:2055 ../../library/os.rst:2193
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.chdir`` with argument "
"``path``."
msgstr ""
"引数 ``path`` を指定して :ref:`監査イベント <auditing>` ``os.chdir`` を送出し"
"ます。 "

#: ../../library/os.rst:2057
msgid ""
"Added support for specifying *path* as a file descriptor on some platforms."
msgstr ""
"一部のプラットフォームで、*path* にファイル記述子の指定をサポートしました。"

#: ../../library/os.rst:2067
msgid ""
"Set the flags of *path* to the numeric *flags*. *flags* may take a "
"combination (bitwise OR) of the following values (as defined in the :mod:"
"`stat` module):"
msgstr ""
"*path* のフラグを *flags* に変更します。 *flags* は、以下の値 (:mod:`stat` モ"
"ジュールで定義されているもの ) をビット単位の論理和で組み合わせることができま"
"す :"

#: ../../library/os.rst:2070
msgid ":const:`stat.UF_NODUMP`"
msgstr ""

#: ../../library/os.rst:2071
msgid ":const:`stat.UF_IMMUTABLE`"
msgstr ""

#: ../../library/os.rst:2072
msgid ":const:`stat.UF_APPEND`"
msgstr ""

#: ../../library/os.rst:2073
msgid ":const:`stat.UF_OPAQUE`"
msgstr ""

#: ../../library/os.rst:2074
msgid ":const:`stat.UF_NOUNLINK`"
msgstr ""

#: ../../library/os.rst:2075
msgid ":const:`stat.UF_COMPRESSED`"
msgstr ""

#: ../../library/os.rst:2076
msgid ":const:`stat.UF_HIDDEN`"
msgstr ""

#: ../../library/os.rst:2077
msgid ":const:`stat.SF_ARCHIVED`"
msgstr ""

#: ../../library/os.rst:2078
msgid ":const:`stat.SF_IMMUTABLE`"
msgstr ""

#: ../../library/os.rst:2079
msgid ":const:`stat.SF_APPEND`"
msgstr ""

#: ../../library/os.rst:2080
msgid ":const:`stat.SF_NOUNLINK`"
msgstr ""

#: ../../library/os.rst:2081
msgid ":const:`stat.SF_SNAPSHOT`"
msgstr ""

#: ../../library/os.rst:2083
msgid ""
"This function can support :ref:`not following symlinks <follow_symlinks>`."
msgstr ""
"この関数は :ref:`シンボリックリンクをたどらない <follow_symlinks>` をサポート"
"しています。"

#: ../../library/os.rst:2085 ../../library/os.rst:2219
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.chflags`` with arguments "
"``path``, ``flags``."
msgstr ""
"引数 ``path``, ``flags`` を指定して :ref:`監査イベント <auditing>` ``os."
"chflags`` を送出します。 "

#: ../../library/os.rst:2089
msgid "Added the *follow_symlinks* parameter."
msgstr ""

#: ../../library/os.rst:2098
msgid ""
"Change the mode of *path* to the numeric *mode*. *mode* may take one of the "
"following values (as defined in the :mod:`stat` module) or bitwise ORed "
"combinations of them:"
msgstr ""
"*path* のモードを数値 *mode* に変更します。 *mode* は、 (:mod:`stat` モジュー"
"ルで定義されている ) 以下の値のいずれかまたはビット単位の論理和で組み合わせた"
"値を取り得ます :"

#: ../../library/os.rst:2102
msgid ":const:`stat.S_ISUID`"
msgstr ""

#: ../../library/os.rst:2103
msgid ":const:`stat.S_ISGID`"
msgstr ""

#: ../../library/os.rst:2104
msgid ":const:`stat.S_ENFMT`"
msgstr ""

#: ../../library/os.rst:2105
msgid ":const:`stat.S_ISVTX`"
msgstr ""

#: ../../library/os.rst:2106
msgid ":const:`stat.S_IREAD`"
msgstr ""

#: ../../library/os.rst:2107
msgid ":const:`stat.S_IWRITE`"
msgstr ""

#: ../../library/os.rst:2108
msgid ":const:`stat.S_IEXEC`"
msgstr ""

#: ../../library/os.rst:2109
msgid ":const:`stat.S_IRWXU`"
msgstr ""

#: ../../library/os.rst:2110
msgid ":const:`stat.S_IRUSR`"
msgstr ""

#: ../../library/os.rst:2111
msgid ":const:`stat.S_IWUSR`"
msgstr ""

#: ../../library/os.rst:2112
msgid ":const:`stat.S_IXUSR`"
msgstr ""

#: ../../library/os.rst:2113
msgid ":const:`stat.S_IRWXG`"
msgstr ""

#: ../../library/os.rst:2114
msgid ":const:`stat.S_IRGRP`"
msgstr ""

#: ../../library/os.rst:2115
msgid ":const:`stat.S_IWGRP`"
msgstr ""

#: ../../library/os.rst:2116
msgid ":const:`stat.S_IXGRP`"
msgstr ""

#: ../../library/os.rst:2117
msgid ":const:`stat.S_IRWXO`"
msgstr ""

#: ../../library/os.rst:2118
msgid ":const:`stat.S_IROTH`"
msgstr ""

#: ../../library/os.rst:2119
msgid ":const:`stat.S_IWOTH`"
msgstr ""

#: ../../library/os.rst:2120
msgid ":const:`stat.S_IXOTH`"
msgstr ""

#: ../../library/os.rst:2122 ../../library/os.rst:2155
#: ../../library/os.rst:3546
msgid ""
"This function can support :ref:`specifying a file descriptor <path_fd>`, :"
"ref:`paths relative to directory descriptors <dir_fd>` and :ref:`not "
"following symlinks <follow_symlinks>`."
msgstr ""
"この関数は :ref:`ファイル記述子の指定 <path_fd>` 、 :ref:`ディレクトリ記述子"
"への相対パス <dir_fd>` 、および :ref:`シンボリックリンクをたどらない "
"<follow_symlinks>` をサポートしています。"

#: ../../library/os.rst:2128
msgid ""
"Although Windows supports :func:`chmod`, you can only set the file's read-"
"only flag with it (via the ``stat.S_IWRITE`` and ``stat.S_IREAD`` constants "
"or a corresponding integer value).  All other bits are ignored. The default "
"value of *follow_symlinks* is ``False`` on Windows."
msgstr ""

#: ../../library/os.rst:2138 ../../library/os.rst:2169
msgid ""
"Added support for specifying *path* as an open file descriptor, and the "
"*dir_fd* and *follow_symlinks* arguments."
msgstr ""
"*path* にオープンしているファイル記述子の指定のサポート、および引数 *dir_fd* "
"と *follow_symlinks* を追加しました。"

#: ../../library/os.rst:2145
msgid ""
"Added support for a file descriptor and the *follow_symlinks* argument on "
"Windows."
msgstr ""

#: ../../library/os.rst:2152
msgid ""
"Change the owner and group id of *path* to the numeric *uid* and *gid*.  To "
"leave one of the ids unchanged, set it to -1."
msgstr ""
"*path* の所有者 id およびグループ id を、数値 *uid* および *gid* に変更しま"
"す。いずれかの id を変更せずにおくには、その値として -1 を指定します。"

#: ../../library/os.rst:2159
msgid ""
"See :func:`shutil.chown` for a higher-level function that accepts names in "
"addition to numeric ids."
msgstr ""
"数値 id の他に名前でも受け取る高水準関数の :func:`shutil.chown` を参照してく"
"ださい。"

#: ../../library/os.rst:2173
msgid "Supports a :term:`path-like object`."
msgstr ":term:`path-like object` を受け入れるようになりました。"

#: ../../library/os.rst:2179
msgid "Change the root directory of the current process to *path*."
msgstr "現在のプロセスのルートディレクトリを *path* に変更します。"

#: ../../library/os.rst:2189
msgid ""
"Change the current working directory to the directory represented by the "
"file descriptor *fd*.  The descriptor must refer to an opened directory, not "
"an open file.  As of Python 3.3, this is equivalent to ``os.chdir(fd)``."
msgstr ""
"現在の作業ディレクトリをファイル記述子 *fd* が表すディレクトリに変更します。"
"記述子はオープンしているファイルではなく、オープンしたディレクトリを参照して"
"いなければなりません。Python 3.3 以降では ``os.chdir(fd)`` と等価です。"

#: ../../library/os.rst:2200
msgid "Return a string representing the current working directory."
msgstr "現在の作業ディレクトリを表す文字列を返します。"

#: ../../library/os.rst:2205
msgid "Return a bytestring representing the current working directory."
msgstr "現在の作業ディレクトリを表すバイト列を返します。"

#: ../../library/os.rst:2207
msgid ""
"The function now uses the UTF-8 encoding on Windows, rather than the ANSI "
"code page: see :pep:`529` for the rationale. The function is no longer "
"deprecated on Windows."
msgstr ""
"この関数は Windows において ANSI コードページ ではなく UTF-8 エンコーディング"
"を使うようになりました: 変更の背景については :pep:`529` をご覧ください。この"
"関数は Windows において非推奨になりません。"

#: ../../library/os.rst:2215
msgid ""
"Set the flags of *path* to the numeric *flags*, like :func:`chflags`, but do "
"not follow symbolic links.  As of Python 3.3, this is equivalent to ``os."
"chflags(path, flags, follow_symlinks=False)``."
msgstr ""
"*path* のフラグを数値 *flags* に設定します。:func:`chflags` に似ていますが、"
"シンボリックリンクをたどりません。Python 3.3 以降では ``os.chflags(path, "
"flags, follow_symlinks=False)`` と等価です。"

#: ../../library/os.rst:2229
msgid ""
"Change the mode of *path* to the numeric *mode*. If path is a symlink, this "
"affects the symlink rather than the target.  See the docs for :func:`chmod` "
"for possible values of *mode*.  As of Python 3.3, this is equivalent to ``os."
"chmod(path, mode, follow_symlinks=False)``."
msgstr ""
"*path* のモードを数値 *mode* に変更します。パスがシンボリックリンクの場合はそ"
"のリンク先ではなくシンボリックリンクそのものに対して作用します。*mode* に指定"
"できる値については :func:`chmod` のドキュメントを参照してください。Python "
"3.3 以降では ``os.chmod(path, mode, follow_symlinks=False)`` と等価です。"

#: ../../library/os.rst:2234
msgid ""
"``lchmod()`` is not part of POSIX, but Unix implementations may have it if "
"changing the mode of symbolic links is supported."
msgstr ""

#: ../../library/os.rst:2249
msgid ""
"Change the owner and group id of *path* to the numeric *uid* and *gid*.  "
"This function will not follow symbolic links.  As of Python 3.3, this is "
"equivalent to ``os.chown(path, uid, gid, follow_symlinks=False)``."
msgstr ""
"*path* の所有者 id およびグループ id を、数値 *uid* および *gid* に変更しま"
"す。この関数はシンボリックリンクをたどりません。Python 3.3 以降では ``os."
"chown(path, uid, gid, follow_symlinks=False)`` と等価です。"

#: ../../library/os.rst:2263
msgid "Create a hard link pointing to *src* named *dst*."
msgstr "*src* を指し示すハードリンク *dst* を作成します。"

#: ../../library/os.rst:2265
msgid ""
"This function can support specifying *src_dir_fd* and/or *dst_dir_fd* to "
"supply :ref:`paths relative to directory descriptors <dir_fd>`, and :ref:"
"`not following symlinks <follow_symlinks>`."
msgstr ""
"この関数は *src_dir_fd* と *dst_dir_fd* の両方またはどちらかに対し :ref:`ディ"
"レクトリ記述子への相対パス <dir_fd>` および :ref:`シンボリックリンクをたどら"
"ない <follow_symlinks>` をサポートしています。"

#: ../../library/os.rst:2269
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.link`` with arguments "
"``src``, ``dst``, ``src_dir_fd``, ``dst_dir_fd``."
msgstr ""
"引数 ``src``, ``dst``, ``src_dir_fd``, ``dst_dir_fd`` を指定して :ref:`監査イ"
"ベント <auditing>` ``os.link`` を送出します。 "

#: ../../library/os.rst:2273 ../../library/os.rst:4543
msgid "Added Windows support."
msgstr "Windows サポートを追加しました。"

#: ../../library/os.rst:2276
msgid "Added the *src_dir_fd*, *dst_dir_fd*, and *follow_symlinks* parameters."
msgstr ""

#: ../../library/os.rst:2279 ../../library/os.rst:2703
#: ../../library/os.rst:2740 ../../library/os.rst:3468
msgid "Accepts a :term:`path-like object` for *src* and *dst*."
msgstr ""
"*src* と *dst* が :term:`path-like object` を受け付けるようになりました。"

#: ../../library/os.rst:2285
msgid ""
"Return a list containing the names of the entries in the directory given by "
"*path*.  The list is in arbitrary order, and does not include the special "
"entries ``'.'`` and ``'..'`` even if they are present in the directory. If a "
"file is removed from or added to the directory during the call of this "
"function, whether a name for that file be included is unspecified."
msgstr ""
"*path* に指定したディレクトリに含まれるエントリ名のリストを返します。リストの"
"順番は不定です。特別なエントリ ``'.'`` と ``'..'`` はリストに含まれません。こ"
"の関数の呼び出し中にディレクトリからファイルが削除されたり、ディレクトリに"
"ファイルが追加されたりした場合、それらのファイルがリストに含まれるかどうかは"
"不定です。"

#: ../../library/os.rst:2291
msgid ""
"*path* may be a :term:`path-like object`.  If *path* is of type ``bytes`` "
"(directly or indirectly through the :class:`PathLike` interface), the "
"filenames returned will also be of type ``bytes``; in all other "
"circumstances, they will be of type ``str``."
msgstr ""
"*path* に :term:`path-like オブジェクト <path-like object>` を指定することも"
"できます。  *path* が  (直接的または間接的に :class:`PathLike` インターフェー"
"スを介した) ``bytes`` 型の場合、戻り値のファイル名も ``bytes`` 型になります; "
"それ以外の場合、ファイル名は ``str`` 型です。"

#: ../../library/os.rst:2296 ../../library/os.rst:2788
msgid ""
"This function can also support :ref:`specifying a file descriptor "
"<path_fd>`; the file descriptor must refer to a directory."
msgstr ""
"この関数は :ref:`ファイル記述子の指定 <path_fd>` もサポートしています; ファイ"
"ル記述子はディレクトリを参照していなくてはなりません。"

#: ../../library/os.rst:2299
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.listdir`` with argument "
"``path``."
msgstr ""
"引数 ``path`` を指定して :ref:`監査イベント <auditing>` ``os.listdir`` を送出"
"します。 "

#: ../../library/os.rst:2302
msgid "To encode ``str`` filenames to ``bytes``, use :func:`~os.fsencode`."
msgstr ""
"``文字列型`` のファイル名を ``バイト列型`` にエンコードするには、:func:`~os."
"fsencode` を使用します。"

#: ../../library/os.rst:2306
msgid ""
"The :func:`scandir` function returns directory entries along with file "
"attribute information, giving better performance for many common use cases."
msgstr ""
"ディレクトリエントリに加えてファイル属性情報も返す :func:`scandir` 関数の方"
"が、多くの一般的な用途では使い勝手が良くなります。"

#: ../../library/os.rst:2310
msgid "The *path* parameter became optional."
msgstr "引数 *path* は任意になりました。"

#: ../../library/os.rst:2313 ../../library/os.rst:3327
msgid "Added support for specifying *path* as an open file descriptor."
msgstr "*path* へのオープン・ファイル記述子の指定をサポートしました。"

#: ../../library/os.rst:2322
msgid "Return a list containing the names of drives on a Windows system."
msgstr ""

#: ../../library/os.rst:2324
msgid ""
"A drive name typically looks like ``'C:\\\\'``. Not every drive name will be "
"associated with a volume, and some may be inaccessible for a variety of "
"reasons, including permissions, network connectivity or missing media. This "
"function does not test for access."
msgstr ""

#: ../../library/os.rst:2329
msgid "May raise :exc:`OSError` if an error occurs collecting the drive names."
msgstr ""

#: ../../library/os.rst:2332
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.listdrives`` with no "
"arguments."
msgstr ""

#: ../../library/os.rst:2341
msgid ""
"Return a list containing the mount points for a volume on a Windows system."
msgstr ""

#: ../../library/os.rst:2344
msgid ""
"*volume* must be represented as a GUID path, like those returned by :func:"
"`os.listvolumes`. Volumes may be mounted in multiple locations or not at "
"all. In the latter case, the list will be empty. Mount points that are not "
"associated with a volume will not be returned by this function."
msgstr ""

#: ../../library/os.rst:2350
msgid ""
"The mount points return by this function will be absolute paths, and may be "
"longer than the drive name."
msgstr ""

#: ../../library/os.rst:2353
msgid ""
"Raises :exc:`OSError` if the volume is not recognized or if an error occurs "
"collecting the paths."
msgstr ""

#: ../../library/os.rst:2356
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.listmounts`` with argument "
"``volume``."
msgstr ""

#: ../../library/os.rst:2365
msgid "Return a list containing the volumes in the system."
msgstr ""

#: ../../library/os.rst:2367
msgid ""
"Volumes are typically represented as a GUID path that looks like ``\\\\?"
"\\Volume{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\\``. Files can usually be "
"accessed through a GUID path, permissions allowing. However, users are "
"generally not familiar with them, and so the recommended use of this "
"function is to retrieve mount points using :func:`os.listmounts`."
msgstr ""

#: ../../library/os.rst:2374
msgid "May raise :exc:`OSError` if an error occurs collecting the volumes."
msgstr ""

#: ../../library/os.rst:2376
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.listvolumes`` with no "
"arguments."
msgstr ""

#: ../../library/os.rst:2385
msgid ""
"Perform the equivalent of an :c:func:`!lstat` system call on the given path. "
"Similar to :func:`~os.stat`, but does not follow symbolic links. Return a :"
"class:`stat_result` object."
msgstr ""

#: ../../library/os.rst:2389
msgid ""
"On platforms that do not support symbolic links, this is an alias for :func:"
"`~os.stat`."
msgstr ""
"シンボリックリンクをサポートしていないプラットフォームでは :func:`~os.stat` "
"の別名です。"

#: ../../library/os.rst:2392
msgid ""
"As of Python 3.3, this is equivalent to ``os.stat(path, dir_fd=dir_fd, "
"follow_symlinks=False)``."
msgstr ""
"Python 3.3 以降では ``os.stat(path, dir_fd=dir_fd, follow_symlinks=False)`` "
"と等価です。"

#: ../../library/os.rst:2395 ../../library/os.rst:2437
#: ../../library/os.rst:2505 ../../library/os.rst:2533
#: ../../library/os.rst:2607
msgid ""
"This function can also support :ref:`paths relative to directory descriptors "
"<dir_fd>`."
msgstr ""
"この関数は :ref:`ディレクトリ記述子への相対パス <dir_fd>` もサポートすること"
"ができます。"

#: ../../library/os.rst:2402 ../../library/os.rst:2616
#: ../../library/os.rst:3461
msgid "Added support for Windows 6.0 (Vista) symbolic links."
msgstr "Windows 6.0 (Vista) のシンボリックリンクをサポートしました。"

#: ../../library/os.rst:2411
msgid ""
"On Windows, now opens reparse points that represent another path (name "
"surrogates), including symbolic links and directory junctions. Other kinds "
"of reparse points are resolved by the operating system as for :func:`~os."
"stat`."
msgstr ""

#: ../../library/os.rst:2420
msgid "Create a directory named *path* with numeric mode *mode*."
msgstr "ディレクトリ *path* を数値モード *mode* で作成します。"

#: ../../library/os.rst:2422
msgid ""
"If the directory already exists, :exc:`FileExistsError` is raised. If a "
"parent directory in the path does not exist, :exc:`FileNotFoundError` is "
"raised."
msgstr ""

#: ../../library/os.rst:2427
msgid ""
"On some systems, *mode* is ignored.  Where it is used, the current umask "
"value is first masked out.  If bits other than the last 9 (i.e. the last 3 "
"digits of the octal representation of the *mode*) are set, their meaning is "
"platform-dependent.  On some platforms, they are ignored and you should "
"call :func:`chmod` explicitly to set them."
msgstr ""
"いくつかのシステムにおいては *mode* は無視されます。それが使われる時には、最"
"初に現在の umask 値でマスクされます。もし最後の 9 ビット (つまり *mode* の8進"
"法表記の最後の3桁) を除いたビットが設定されていたら、それらの意味はプラット"
"フォームに依存します。いくつかのプラットフォームではそれらは無視され、それら"
"を設定するためには明示的に :func:`chmod` を呼ぶ必要があるでしょう。"

#: ../../library/os.rst:2433
msgid ""
"On Windows, a *mode* of ``0o700`` is specifically handled to apply access "
"control to the new directory such that only the current user and "
"administrators have access. Other values of *mode* are ignored."
msgstr ""

#: ../../library/os.rst:2440
msgid ""
"It is also possible to create temporary directories; see the :mod:`tempfile` "
"module's :func:`tempfile.mkdtemp` function."
msgstr ""
"一時ディレクトリを作成することもできます : :mod:`tempfile` モジュールの :"
"func:`tempfile.mkdtemp` 関数を参照してください。"

#: ../../library/os.rst:2443 ../../library/os.rst:2480
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.mkdir`` with arguments "
"``path``, ``mode``, ``dir_fd``."
msgstr ""
"引数 ``path``, ``mode``, ``dir_fd`` を指定して :ref:`監査イベント "
"<auditing>` ``os.mkdir`` を送出します。 "

#: ../../library/os.rst:2451
msgid "Windows now handles a *mode* of ``0o700``."
msgstr ""

#: ../../library/os.rst:2461
msgid ""
"Recursive directory creation function.  Like :func:`mkdir`, but makes all "
"intermediate-level directories needed to contain the leaf directory."
msgstr ""
"再帰的にディレクトリを作成する関数です。:func:`mkdir` と似ていますが、末端"
"ディレクトリを作成するために必要なすべての中間ディレクトリも作成します。"

#: ../../library/os.rst:2464
msgid ""
"The *mode* parameter is passed to :func:`mkdir` for creating the leaf "
"directory; see :ref:`the mkdir() description <mkdir_modebits>` for how it is "
"interpreted.  To set the file permission bits of any newly created parent "
"directories you can set the umask before invoking :func:`makedirs`.  The "
"file permission bits of existing parent directories are not changed."
msgstr ""

#: ../../library/os.rst:2470
msgid ""
"If *exist_ok* is ``False`` (the default), a :exc:`FileExistsError` is raised "
"if the target directory already exists."
msgstr ""
"*exist_ok* の値が ``False`` の場合 (デフォルト)、対象のディレクトリがすでに存"
"在すると :exc:`FileExistsError` を送出します。"

#: ../../library/os.rst:2475
msgid ""
":func:`makedirs` will become confused if the path elements to create "
"include :data:`pardir` (eg. \"..\" on UNIX systems)."
msgstr ""
"作成するパス要素に :data:`pardir` (UNIX では \"..\") が含まれる場合、:func:"
"`makedirs` は混乱します。"

#: ../../library/os.rst:2478
msgid "This function handles UNC paths correctly."
msgstr "この関数は UNC パスを正しく扱えるようになりました。"

#: ../../library/os.rst:2482
msgid "Added the *exist_ok* parameter."
msgstr ""

#: ../../library/os.rst:2487
msgid ""
"Before Python 3.4.1, if *exist_ok* was ``True`` and the directory existed, :"
"func:`makedirs` would still raise an error if *mode* did not match the mode "
"of the existing directory. Since this behavior was impossible to implement "
"safely, it was removed in Python 3.4.1. See :issue:`21082`."
msgstr ""
"Python 3.4.1 より前、 *exist_ok* が ``True`` でそのディレクトリが既存の場合で"
"も、 :func:`makedirs` は *mode* が既存ディレクトリのモードと合わない場合には"
"エラーにしようとしていました。このモードチェックの振る舞いを安全に実装するこ"
"とが出来なかったため、 Python 3.4.1 でこのチェックは削除されました。 :issue:"
"`21082` を参照してください。"

#: ../../library/os.rst:2495
msgid ""
"The *mode* argument no longer affects the file permission bits of newly "
"created intermediate-level directories."
msgstr ""

#: ../../library/os.rst:2502
msgid ""
"Create a FIFO (a named pipe) named *path* with numeric mode *mode*. The "
"current umask value is first masked out from the mode."
msgstr ""
"FIFO (名前付きパイプ) *path* を数値モード *mode* で作成します。先に現在の "
"umask 値でマスクされます。"

#: ../../library/os.rst:2508
msgid ""
"FIFOs are pipes that can be accessed like regular files.  FIFOs exist until "
"they are deleted (for example with :func:`os.unlink`). Generally, FIFOs are "
"used as rendezvous between \"client\" and \"server\" type processes: the "
"server opens the FIFO for reading, and the client opens it for writing.  "
"Note that :func:`mkfifo` doesn't open the FIFO --- it just creates the "
"rendezvous point."
msgstr ""
"FIFO は通常のファイルのようにアクセスできるパイプです。 FIFO は ( 例えば :"
"func:`os.unlink` を使って ) 削除されるまで存在しつづけます。一般的に、 FIFO "
"は \" クライアント \" と \" サーバー \" 形式のプロセス間でランデブーを行うた"
"めに使われます : この時、サーバーは FIFO を読み込み用に、クライアントは書き出"
"し用にオープンします。 :func:`mkfifo` は FIFO をオープンしない --- 単にランデ"
"ブーポイントを作成するだけ --- なので注意してください。"

#: ../../library/os.rst:2525
msgid ""
"Create a filesystem node (file, device special file or named pipe) named "
"*path*. *mode* specifies both the permissions to use and the type of node to "
"be created, being combined (bitwise OR) with one of ``stat.S_IFREG``, ``stat."
"S_IFCHR``, ``stat.S_IFBLK``, and ``stat.S_IFIFO`` (those constants are "
"available in :mod:`stat`).  For ``stat.S_IFCHR`` and ``stat.S_IFBLK``, "
"*device* defines the newly created device special file (probably using :func:"
"`os.makedev`), otherwise it is ignored."
msgstr ""
"*path* という名前で、ファイルシステムノード (ファイル、デバイス特殊ファイル、"
"または名前つきパイプ) を作成します。*mode* は、作成するノードのアクセス権限と"
"タイプの両方を ``stat.S_IFREG``、``stat.S_IFCHR``、``stat.S_IFBLK``、および "
"``stat.S_IFIFO`` の組み合わせ (ビット単位の論理和) で指定します (これらの定数"
"は :mod:`stat` で利用可能です)。``stat.S_IFCHR`` と ``stat.S_IFBLK`` を指定し"
"た場合、*devide* は新しく作成されたデバイス特殊ファイルを (おそらく :func:"
"`os.makedev` を使って) 定義し、それ以外の定数を指定した場合は無視されます。"

#: ../../library/os.rst:2547
msgid ""
"Extract the device major number from a raw device number (usually the :attr:"
"`st_dev` or :attr:`st_rdev` field from :c:struct:`stat`)."
msgstr ""

#: ../../library/os.rst:2553
msgid ""
"Extract the device minor number from a raw device number (usually the :attr:"
"`st_dev` or :attr:`st_rdev` field from :c:struct:`stat`)."
msgstr ""

#: ../../library/os.rst:2559
msgid "Compose a raw device number from the major and minor device numbers."
msgstr ""
"メジャーおよびマイナーデバイス番号から、新しく RAW デバイス番号を作成します。"

#: ../../library/os.rst:2564
msgid ""
"Return system configuration information relevant to a named file. *name* "
"specifies the configuration value to retrieve; it may be a string which is "
"the name of a defined system value; these names are specified in a number of "
"standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define "
"additional names as well.  The names known to the host operating system are "
"given in the ``pathconf_names`` dictionary.  For configuration variables not "
"included in that mapping, passing an integer for *name* is also accepted."
msgstr ""
"名前付きファイルに関連するシステム設定情報を返します。 *name* には取得したい"
"設定名を指定します ; これは定義済みのシステム値名の文字列で、多くの標準 "
"(POSIX.1 、 Unix 95 、 Unix 98 その他 ) で定義されています。プラットフォーム"
"によっては別の名前も定義しています。ホストオペレーティングシステムの関知する"
"名前は ``pathconf_names`` 辞書で与えられています。このマップ型オブジェクトに"
"入っていない設定変数については、 *name* に整数を渡してもかまいません。"

#: ../../library/os.rst:2577 ../../library/os.rst:3320
#: ../../library/os.rst:3489
msgid ""
"This function can support :ref:`specifying a file descriptor <path_fd>`."
msgstr ""
"この関数は :ref:`ファイル記述子の指定 <path_fd>` をサポートしています。"

#: ../../library/os.rst:2588
msgid ""
"Dictionary mapping names accepted by :func:`pathconf` and :func:`fpathconf` "
"to the integer values defined for those names by the host operating system.  "
"This can be used to determine the set of names known to the system."
msgstr ""
":func:`pathconf` および :func:`fpathconf` が受理するシステム設定名を、ホスト"
"オペレーティングシステムで定義されている整数値に対応付けている辞書です。この"
"辞書はシステムでどの設定名が定義されているかを知るために利用できます。"

#: ../../library/os.rst:2597
msgid ""
"Return a string representing the path to which the symbolic link points.  "
"The result may be either an absolute or relative pathname; if it is "
"relative, it may be converted to an absolute pathname using ``os.path."
"join(os.path.dirname(path), result)``."
msgstr ""
"シンボリックリンクが指しているパスを表す文字列を返します。返される値は絶対パ"
"スにも、相対パスにもなり得ます ; 相対パスの場合、 ``os.path.join(os.path."
"dirname(path), result)`` を使って絶対パスに変換することができます。"

#: ../../library/os.rst:2602
msgid ""
"If the *path* is a string object (directly or indirectly through a :class:"
"`PathLike` interface), the result will also be a string object, and the call "
"may raise a UnicodeDecodeError. If the *path* is a bytes object (direct or "
"indirectly), the result will be a bytes object."
msgstr ""

#: ../../library/os.rst:2610
msgid ""
"When trying to resolve a path that may contain links, use :func:`~os.path."
"realpath` to properly handle recursion and platform differences."
msgstr ""

#: ../../library/os.rst:2622
msgid "Accepts a :term:`path-like object` on Unix."
msgstr "Unixで、 :term:`path-like object` を受け入れるようになりました。"

#: ../../library/os.rst:2625
msgid "Accepts a :term:`path-like object` and a bytes object on Windows."
msgstr ""
"Windowsで、 :term:`path-like object` と bytes オブジェクトを受け入れるように"
"なりました。"

#: ../../library/os.rst:2628
msgid ""
"Added support for directory junctions, and changed to return the "
"substitution path (which typically includes ``\\\\?\\`` prefix) rather than "
"the optional \"print name\" field that was previously returned."
msgstr ""

#: ../../library/os.rst:2634
msgid ""
"Remove (delete) the file *path*.  If *path* is a directory, an :exc:"
"`OSError` is raised.  Use :func:`rmdir` to remove directories. If the file "
"does not exist, a :exc:`FileNotFoundError` is raised."
msgstr ""

#: ../../library/os.rst:2638 ../../library/os.rst:2751
#: ../../library/os.rst:3440
msgid ""
"This function can support :ref:`paths relative to directory descriptors "
"<dir_fd>`."
msgstr ""
"この関数は :ref:`ディレクトリ記述子への相対パス <dir_fd>` をサポートしていま"
"す。"

#: ../../library/os.rst:2641
msgid ""
"On Windows, attempting to remove a file that is in use causes an exception "
"to be raised; on Unix, the directory entry is removed but the storage "
"allocated to the file is not made available until the original file is no "
"longer in use."
msgstr ""
"Windows では、使用中のファイルを削除しようとすると例外を送出します; Unixで"
"は、ディレクトリエントリは削除されますが、記憶装置上に割り当てられたファイル"
"領域は元のファイルが使われなくなるまで残されます。"

#: ../../library/os.rst:2645
msgid "This function is semantically identical to :func:`unlink`."
msgstr "この関数は意味論的に :func:`unlink` と同一です。"

#: ../../library/os.rst:2647 ../../library/os.rst:2669
#: ../../library/os.rst:3511
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.remove`` with arguments "
"``path``, ``dir_fd``."
msgstr ""
"引数 ``path``, ``dir_fd`` を指定して :ref:`監査イベント <auditing>` ``os."
"remove`` を送出します。 "

#: ../../library/os.rst:2660
msgid ""
"Remove directories recursively.  Works like :func:`rmdir` except that, if "
"the leaf directory is successfully removed, :func:`removedirs`  tries to "
"successively remove every parent directory mentioned in  *path* until an "
"error is raised (which is ignored, because it generally means that a parent "
"directory is not empty). For example, ``os.removedirs('foo/bar/baz')`` will "
"first remove the directory ``'foo/bar/baz'``, and then remove ``'foo/bar'`` "
"and ``'foo'`` if they are empty. Raises :exc:`OSError` if the leaf directory "
"could not be successfully removed."
msgstr ""
"再帰的なディレクトリ削除関数です。 :func:`rmdir` と同じように動作しますが、末"
"端ディレクトリがうまく削除できるかぎり、 :func:`removedirs` は *path* に現れ"
"る親ディレクトリをエラーが送出されるまで ( このエラーは通常、指定したディレク"
"トリの親ディレクトリが空でないことを意味するだけなので無視されます ) 順に削除"
"することを試みます。例えば、 ``os.removedirs('foo/bar/baz')`` では最初にディ"
"レクトリ ``'foo/bar/baz'`` を削除し、次に ``'foo/bar'`` さらに ``'foo'`` をそ"
"れらが空ならば削除します。末端のディレクトリが削除できなかった場合には :exc:"
"`OSError` が送出されます。"

#: ../../library/os.rst:2677
msgid ""
"Rename the file or directory *src* to *dst*. If *dst* exists, the operation "
"will fail with an :exc:`OSError` subclass in a number of cases:"
msgstr ""

#: ../../library/os.rst:2680
msgid ""
"On Windows, if *dst* exists a :exc:`FileExistsError` is always raised. The "
"operation may fail if *src* and *dst* are on different filesystems. Use :"
"func:`shutil.move` to support moves to a different filesystem."
msgstr ""

#: ../../library/os.rst:2684
msgid ""
"On Unix, if *src* is a file and *dst* is a directory or vice-versa, an :exc:"
"`IsADirectoryError` or a :exc:`NotADirectoryError` will be raised "
"respectively.  If both are directories and *dst* is empty, *dst* will be "
"silently replaced.  If *dst* is a non-empty directory, an :exc:`OSError` is "
"raised. If both are files, *dst* will be replaced silently if the user has "
"permission.  The operation may fail on some Unix flavors if *src* and *dst* "
"are on different filesystems.  If successful, the renaming will be an atomic "
"operation (this is a POSIX requirement)."
msgstr ""

#: ../../library/os.rst:2693 ../../library/os.rst:2733
msgid ""
"This function can support specifying *src_dir_fd* and/or *dst_dir_fd* to "
"supply :ref:`paths relative to directory descriptors <dir_fd>`."
msgstr ""
"この関数は *src_dir_fd* と *dst_dir_fd* のどちらかまたは両方の指定に :ref:`"
"ディレクトリ記述子への相対パス <dir_fd>` をサポートしています。"

#: ../../library/os.rst:2696
msgid ""
"If you want cross-platform overwriting of the destination, use :func:"
"`replace`."
msgstr ""
"対象の上書きがクロスプラットフォームになる場合は :func:`replace` を使用してく"
"ださい。"

#: ../../library/os.rst:2698 ../../library/os.rst:2719
#: ../../library/os.rst:2736
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.rename`` with arguments "
"``src``, ``dst``, ``src_dir_fd``, ``dst_dir_fd``."
msgstr ""
"引数 ``src``, ``dst``, ``src_dir_fd``, ``dst_dir_fd`` を指定して :ref:`監査イ"
"ベント <auditing>` ``os.rename`` を送出します。 "

#: ../../library/os.rst:2700
msgid "Added the *src_dir_fd* and *dst_dir_fd* parameters."
msgstr ""

#: ../../library/os.rst:2709
msgid ""
"Recursive directory or file renaming function. Works like :func:`rename`, "
"except creation of any intermediate directories needed to make the new "
"pathname good is attempted first. After the rename, directories "
"corresponding to rightmost path segments of the old name will be pruned away "
"using :func:`removedirs`."
msgstr ""
"再帰的にディレクトリやファイル名を変更する関数です。 :func:`rename` のように"
"動作しますが、新たなパス名を持つファイルを配置するために必要な途中のディレク"
"トリ構造をまず作成しようと試みます。名前変更の後、元のファイル名のパス要素"
"は :func:`removedirs` を使って右側から順に削除されます。"

#: ../../library/os.rst:2716
msgid ""
"This function can fail with the new directory structure made if you lack "
"permissions needed to remove the leaf directory or file."
msgstr ""
"この関数はコピー元の末端のディレクトリまたはファイルを削除する権限がない場合"
"には失敗します。"

#: ../../library/os.rst:2721
msgid "Accepts a :term:`path-like object` for *old* and *new*."
msgstr ""
"*old* と *new* が :term:`path-like object` を受け付けるようになりました。"

#: ../../library/os.rst:2727
msgid ""
"Rename the file or directory *src* to *dst*.  If *dst* is a non-empty "
"directory, :exc:`OSError` will be raised.  If *dst* exists and is a file, it "
"will be replaced silently if the user has permission.  The operation may "
"fail if *src* and *dst* are on different filesystems.  If successful, the "
"renaming will be an atomic operation (this is a POSIX requirement)."
msgstr ""
"ファイルまたはディレクトリ *src* の名前を *dst* へ変更します。*dst* が空でな"
"いディレクトリの場合 :exc:`OSError` が送出されます。*dst* が存在し、かつファ"
"イルの場合、ユーザーの権限がある限り暗黙のうちに置き換えられます。*src* と "
"*dst* が異なるファイルシステム上にあると失敗することがあります。ファイル名の"
"変更が成功する場合はアトミック操作となります (これは POSIX 要求仕様です)。"

#: ../../library/os.rst:2746
msgid ""
"Remove (delete) the directory *path*.  If the directory does not exist or is "
"not empty, a :exc:`FileNotFoundError` or an :exc:`OSError` is raised "
"respectively.  In order to remove whole directory trees, :func:`shutil."
"rmtree` can be used."
msgstr ""

#: ../../library/os.rst:2754
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.rmdir`` with arguments "
"``path``, ``dir_fd``."
msgstr ""
"引数 ``path``, ``dir_fd`` を指定して :ref:`監査イベント <auditing>` ``os."
"rmdir`` を送出します。 "

#: ../../library/os.rst:2765
msgid ""
"Return an iterator of :class:`os.DirEntry` objects corresponding to the "
"entries in the directory given by *path*. The entries are yielded in "
"arbitrary order, and the special entries ``'.'`` and ``'..'`` are not "
"included.  If a file is removed from or added to the directory after "
"creating the iterator, whether an entry for that file be included is "
"unspecified."
msgstr ""

#: ../../library/os.rst:2772
msgid ""
"Using :func:`scandir` instead of :func:`listdir` can significantly increase "
"the performance of code that also needs file type or file attribute "
"information, because :class:`os.DirEntry` objects expose this information if "
"the operating system provides it when scanning a directory. All :class:`os."
"DirEntry` methods may perform a system call, but :func:`~os.DirEntry.is_dir` "
"and :func:`~os.DirEntry.is_file` usually only require a system call for "
"symbolic links; :func:`os.DirEntry.stat` always requires a system call on "
"Unix but only requires one for symbolic links on Windows."
msgstr ""
":func:`listdir` の代わりに :func:`scandir` を使用すると、ファイルタイプや属性"
"情報も必要とするコードのパフォーマンスが大幅に向上します。これは、オペレー"
"ティングシステムがディレクトリのスキャン中にこの情報を提供した場合、:class:"
"`os.DirEntry` オブジェクトがその情報を公開するからです。すべての :class:`os."
"DirEntry` メソッドはシステムコールを実行する場合がありますが、:func:`~os."
"DirEntry.is_dir` と :func:`~os.DirEntry.is_file` は、通常はシンボリックリンク"
"にしかシステムコールを必要としません。:func:`os.DirEntry.stat` は、Unix 上で"
"は常にシステムコールを必要としますが、Windows ではシンボリックリンク用にシス"
"テムコールを一つ必要とするだけです。"

#: ../../library/os.rst:2782
msgid ""
"*path* may be a :term:`path-like object`.  If *path* is of type ``bytes`` "
"(directly or indirectly through the :class:`PathLike` interface), the type "
"of the :attr:`~os.DirEntry.name` and :attr:`~os.DirEntry.path` attributes of "
"each :class:`os.DirEntry` will be ``bytes``; in all other circumstances, "
"they will be of type ``str``."
msgstr ""

#: ../../library/os.rst:2791
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.scandir`` with argument "
"``path``."
msgstr ""
"引数 ``path`` を指定して :ref:`監査イベント <auditing>` ``os.scandir`` を送出"
"します。 "

#: ../../library/os.rst:2793
msgid ""
"The :func:`scandir` iterator supports the :term:`context manager` protocol "
"and has the following method:"
msgstr ""
":func:`scandir` イテレータは、 :term:`コンテキストマネージャ <context "
"manager>` プロトコルをサポートし、次のメソッドを持ちます。"

#: ../../library/os.rst:2798
msgid "Close the iterator and free acquired resources."
msgstr "イテレータを閉じ、獲得した資源を開放します。"

#: ../../library/os.rst:2800
msgid ""
"This is called automatically when the iterator is exhausted or garbage "
"collected, or when an error happens during iterating.  However it is "
"advisable to call it explicitly or use the :keyword:`with` statement."
msgstr ""
"この関数は、イテレータがすべて消費されるか、ガーベージコレクトされた、もしく"
"はイテレート中にエラーが発生した際に自動的に呼び出されます。しかし、 :"
"keyword:`with` 文を用いるか、明示的に呼び出すことを推奨します。"

#: ../../library/os.rst:2807
msgid ""
"The following example shows a simple use of :func:`scandir` to display all "
"the files (excluding directories) in the given *path* that don't start with "
"``'.'``. The ``entry.is_file()`` call will generally not make an additional "
"system call::"
msgstr ""
"次の単純な例では、:func:`scandir` を使用して、指定した *path* 内の先頭が "
"``'.'`` でないすべてのファイル (ディレクトリを除く) をすべて表示します。"
"``entry.is_file()`` を呼び出しても、通常は追加のシステムコールは行われませ"
"ん::"

#: ../../library/os.rst:2812
msgid ""
"with os.scandir(path) as it:\n"
"    for entry in it:\n"
"        if not entry.name.startswith('.') and entry.is_file():\n"
"            print(entry.name)"
msgstr ""

#: ../../library/os.rst:2819
msgid ""
"On Unix-based systems, :func:`scandir` uses the system's `opendir() <https://"
"pubs.opengroup.org/onlinepubs/009695399/functions/opendir.html>`_ and "
"`readdir() <https://pubs.opengroup.org/onlinepubs/009695399/functions/"
"readdir_r.html>`_ functions. On Windows, it uses the Win32 `FindFirstFileW "
"<https://msdn.microsoft.com/en-us/library/windows/desktop/aa364418(v=vs.85)."
"aspx>`_ and `FindNextFileW <https://msdn.microsoft.com/en-us/library/windows/"
"desktop/aa364428(v=vs.85).aspx>`_ functions."
msgstr ""
" :func:`scandir` は、Unix ベースのシステムではシステムの `opendir() <https://"
"pubs.opengroup.org/onlinepubs/009695399/functions/opendir.html>`_ 関数と "
"`readdir() <https://pubs.opengroup.org/onlinepubs/009695399/functions/"
"readdir_r.html>`_ 関数を使います。Windows では Win32 API の `FindFirstFileW "
"<https://msdn.microsoft.com/en-us/library/windows/desktop/aa364418(v=vs.85)."
"aspx>`_ と `FindNextFileW <https://msdn.microsoft.com/en-us/library/windows/"
"desktop/aa364428(v=vs.85).aspx>`_ 関数を使います。"

#: ../../library/os.rst:2831
msgid ""
"Added support for the :term:`context manager` protocol and the :func:"
"`~scandir.close` method.  If a :func:`scandir` iterator is neither exhausted "
"nor explicitly closed a :exc:`ResourceWarning` will be emitted in its "
"destructor."
msgstr ""

#: ../../library/os.rst:2837
msgid "The function accepts a :term:`path-like object`."
msgstr "関数が :term:`path-like object` を受け入れるようになりました。"

#: ../../library/os.rst:2839
msgid "Added support for :ref:`file descriptors <path_fd>` on Unix."
msgstr ""
"Unix で :ref:`ファイル記述子の指定 <path_fd>` のサポートが追加されました。"

#: ../../library/os.rst:2845
msgid ""
"Object yielded by :func:`scandir` to expose the file path and other file "
"attributes of a directory entry."
msgstr ""
"ディレクトリエントリのファイルパスとその他のファイル属性を公開するために、:"
"func:`scandir` が yield するオブジェクトです。"

#: ../../library/os.rst:2848
msgid ""
":func:`scandir` will provide as much of this information as possible without "
"making additional system calls. When a ``stat()`` or ``lstat()`` system call "
"is made, the ``os.DirEntry`` object will cache the result."
msgstr ""
":func:`scandir` は、追加のシステムコールを実行することなく、この情報をできる"
"だけ多く提供します。``stat()`` または ``lstat()`` システムコールが実行された"
"場合、``os.DirEntry`` オブジェクトは結果をキャッシュします。"

#: ../../library/os.rst:2852
msgid ""
"``os.DirEntry`` instances are not intended to be stored in long-lived data "
"structures; if you know the file metadata has changed or if a long time has "
"elapsed since calling :func:`scandir`, call ``os.stat(entry.path)`` to fetch "
"up-to-date information."
msgstr ""
"``os.DirEntry`` インスタンスは、寿命の長いデータ構造に保存されることは想定さ"
"れていません。ファイルメタデータが変更された場合や、 :func:`scandir` が呼び出"
"されてから長時間が経過した場合は、 ``os.stat(entry.path)`` を呼び出して最新の"
"情報を取得してください。"

#: ../../library/os.rst:2857
msgid ""
"Because the ``os.DirEntry`` methods can make operating system calls, they "
"may also raise :exc:`OSError`. If you need very fine-grained control over "
"errors, you can catch :exc:`OSError` when calling one of the ``os.DirEntry`` "
"methods and handle as appropriate."
msgstr ""
"``os.DirEntry`` のメソッドはオペレーティングシステムコールを実行する場合があ"
"るため、それらは :exc:`OSError` も送出する場合があります。エラーを細かく制御"
"する必要がある場合、 ``os.DirEntry`` のメソッドの一つの呼び出し時に :exc:"
"`OSError` を捕捉して、適切な処理を行うことができます。"

#: ../../library/os.rst:2862
msgid ""
"To be directly usable as a :term:`path-like object`, ``os.DirEntry`` "
"implements the :class:`PathLike` interface."
msgstr ""

#: ../../library/os.rst:2865
msgid "Attributes and methods on a ``os.DirEntry`` instance are as follows:"
msgstr "``os.DirEntry`` インスタンスの属性とメソッドは以下の通りです:"

#: ../../library/os.rst:2869
msgid ""
"The entry's base filename, relative to the :func:`scandir` *path* argument."
msgstr ""
":func:`scandir` の *path* 引数に対して相対的な、エントリのベースファイル名で"
"す。"

#: ../../library/os.rst:2872
msgid ""
"The :attr:`name` attribute will be ``bytes`` if the :func:`scandir` *path* "
"argument is of type ``bytes`` and ``str`` otherwise.  Use :func:`~os."
"fsdecode` to decode byte filenames."
msgstr ""

#: ../../library/os.rst:2878
msgid ""
"The entry's full path name: equivalent to ``os.path.join(scandir_path, entry."
"name)`` where *scandir_path* is the :func:`scandir` *path* argument.  The "
"path is only absolute if the :func:`scandir` *path* argument was absolute.  "
"If the :func:`scandir` *path* argument was a :ref:`file descriptor "
"<path_fd>`, the :attr:`path` attribute is the same as the :attr:`name` "
"attribute."
msgstr ""

#: ../../library/os.rst:2885
msgid ""
"The :attr:`path` attribute will be ``bytes`` if the :func:`scandir` *path* "
"argument is of type ``bytes`` and ``str`` otherwise.  Use :func:`~os."
"fsdecode` to decode byte filenames."
msgstr ""

#: ../../library/os.rst:2891
msgid "Return the inode number of the entry."
msgstr "項目の inode 番号を返します。"

#: ../../library/os.rst:2893
msgid ""
"The result is cached on the ``os.DirEntry`` object. Use ``os.stat(entry."
"path, follow_symlinks=False).st_ino`` to fetch up-to-date information."
msgstr ""
"結果は ``os.DirEntry`` オブジェクトにキャッシュされます。最新の情報を取得する"
"には ``os.stat(entry.path, follow_symlinks=False).st_ino`` を使用してくださ"
"い。"

#: ../../library/os.rst:2897
msgid ""
"On the first, uncached call, a system call is required on Windows but not on "
"Unix."
msgstr ""
"Windows 上では、最初のキャッシュされていない呼び出しでシステムコールが必要で"
"すが、 Unix 上では必要ありません。"

#: ../../library/os.rst:2902
msgid ""
"Return ``True`` if this entry is a directory or a symbolic link pointing to "
"a directory; return ``False`` if the entry is or points to any other kind of "
"file, or if it doesn't exist anymore."
msgstr ""
"この項目がディレクトリまたはディレクトリへのシンボリックリンクである場合、 "
"``True`` を返します。項目がそれ以外のファイルやそれ以外のファイルへのシンボ"
"リックリンクである場合や、もはや存在しない場合は ``False`` を返します。"

#: ../../library/os.rst:2906
msgid ""
"If *follow_symlinks* is ``False``, return ``True`` only if this entry is a "
"directory (without following symlinks); return ``False`` if the entry is any "
"other kind of file or if it doesn't exist anymore."
msgstr ""
"*follow_symlinks* が ``False`` の場合、項目がディレクトリ (シンボリックリンク"
"はたどりません) の場合にのみ ``True`` を返します。項目がディレクトリ以外の"
"ファイルである場合や、項目がもはや存在しない場合は ``False`` を返します。"

#: ../../library/os.rst:2910
msgid ""
"The result is cached on the ``os.DirEntry`` object, with a separate cache "
"for *follow_symlinks* ``True`` and ``False``. Call :func:`os.stat` along "
"with :func:`stat.S_ISDIR` to fetch up-to-date information."
msgstr ""
"結果は ``os.DirEntry`` オブジェクトにキャッシュされます。*follow_symlinks* "
"が ``True`` の場合と ``False`` の場合とでは、別のオブジェクトにキャッシュされ"
"ます。最新の情報を取得するには :func:`stat.S_ISDIR` と共に :func:`os.stat` を"
"呼び出してください。"

#: ../../library/os.rst:2914
msgid ""
"On the first, uncached call, no system call is required in most cases. "
"Specifically, for non-symlinks, neither Windows or Unix require a system "
"call, except on certain Unix file systems, such as network file systems, "
"that return ``dirent.d_type == DT_UNKNOWN``. If the entry is a symlink, a "
"system call will be required to follow the symlink unless *follow_symlinks* "
"is ``False``."
msgstr ""
"多くの場合、最初のキャッシュされない呼び出しでは、システムコールは必要とされ"
"ません。具体的には、シンボリックリンク以外では、Windows も Unix もシステム"
"コールを必要としません。ただし、``dirent.d_type == DT_UNKNOWN`` を返す、ネッ"
"トワークファイルシステムなどの特定の Unix ファイルシステムは例外です。項目が"
"シンボリックリンクの場合、*follow_symlinks* が ``False`` の場合を除き、シンボ"
"リックリンクをたどるためにシステムコールが必要となります。"

#: ../../library/os.rst:2921 ../../library/os.rst:2951
msgid ""
"This method can raise :exc:`OSError`, such as :exc:`PermissionError`, but :"
"exc:`FileNotFoundError` is caught and not raised."
msgstr ""
"このメソッドは :exc:`PermissionError` のような :exc:`OSError` を送出すること"
"がありますが、 :exc:`FileNotFoundError` は捕捉され送出されません。"

#: ../../library/os.rst:2926
msgid ""
"Return ``True`` if this entry is a file or a symbolic link pointing to a "
"file; return ``False`` if the entry is or points to a directory or other non-"
"file entry, or if it doesn't exist anymore."
msgstr ""
"この項目がファイルまたはファイルへのシンボリックリンクである場合、 ``True`` "
"を返します。項目がディレクトリやファイル以外の項目へのシンボリックリンクであ"
"る場合や、もはや存在しない場合は ``False`` を返します。"

#: ../../library/os.rst:2930
msgid ""
"If *follow_symlinks* is ``False``, return ``True`` only if this entry is a "
"file (without following symlinks); return ``False`` if the entry is a "
"directory or other non-file entry, or if it doesn't exist anymore."
msgstr ""
"*follow_symlinks* が ``False`` の場合、項目がファイル (シンボリックリンクはた"
"どりません) の場合にのみ ``True`` を返します。項目がディレクトリやその他の"
"ファイル以外の項目である場合や、項目がもはや存在しない場合は ``False`` を返し"
"ます。"

#: ../../library/os.rst:2934
msgid ""
"The result is cached on the ``os.DirEntry`` object. Caching, system calls "
"made, and exceptions raised are as per :func:`~os.DirEntry.is_dir`."
msgstr ""
"結果は ``os.DirEntry`` オブジェクトにキャッシュされます。キャッシュ、システム"
"コール、例外は、:func:`~os.DirEntry.is_dir` と同様に行われます。"

#: ../../library/os.rst:2939
msgid ""
"Return ``True`` if this entry is a symbolic link (even if broken); return "
"``False`` if the entry points to a directory or any kind of file, or if it "
"doesn't exist anymore."
msgstr ""
"この項目がシンボリックリンクの場合 (たとえ破損していても)、``True`` を返しま"
"す。項目がディレクトリやあらゆる種類のファイルの場合、またはもはや存在しない"
"場合は ``False`` を返します。"

#: ../../library/os.rst:2943
msgid ""
"The result is cached on the ``os.DirEntry`` object. Call :func:`os.path."
"islink` to fetch up-to-date information."
msgstr ""
"結果は ``os.DirEntry`` オブジェクトにキャッシュされます。\n"
"最新の情報をフェッチするには :func:`os.path.islink` を呼び出してください。"

#: ../../library/os.rst:2946
msgid ""
"On the first, uncached call, no system call is required in most cases. "
"Specifically, neither Windows or Unix require a system call, except on "
"certain Unix file systems, such as network file systems, that return "
"``dirent.d_type == DT_UNKNOWN``."
msgstr ""
"多くの場合、最初のキャッシュされない呼び出しでは、システムコールは必要とされ"
"ません。具体的には、Windows も Unix もシステムコールを必要としません。ただ"
"し、``dirent.d_type == DT_UNKNOWN`` を返す、ネットワークファイルシステムなど"
"の特定の Unix ファイルシステムは例外です。"

#: ../../library/os.rst:2956
msgid ""
"Return ``True`` if this entry is a junction (even if broken); return "
"``False`` if the entry points to a regular directory, any kind of file, a "
"symlink, or if it doesn't exist anymore."
msgstr ""

#: ../../library/os.rst:2960
msgid ""
"The result is cached on the ``os.DirEntry`` object. Call :func:`os.path."
"isjunction` to fetch up-to-date information."
msgstr ""

#: ../../library/os.rst:2967
msgid ""
"Return a :class:`stat_result` object for this entry. This method follows "
"symbolic links by default; to stat a symbolic link add the "
"``follow_symlinks=False`` argument."
msgstr ""
"この項目の :class:`stat_result` オブジェクトを返します。このメソッドは、デ"
"フォルトでシンボリックリンクをたどります。シンボリックリンクを開始するには、 "
"``follow_symlinks=False`` 引数を追加します。"

#: ../../library/os.rst:2971
msgid ""
"On Unix, this method always requires a system call. On Windows, it only "
"requires a system call if *follow_symlinks* is ``True`` and the entry is a "
"reparse point (for example, a symbolic link or directory junction)."
msgstr ""

#: ../../library/os.rst:2976
msgid ""
"On Windows, the ``st_ino``, ``st_dev`` and ``st_nlink`` attributes of the :"
"class:`stat_result` are always set to zero. Call :func:`os.stat` to get "
"these attributes."
msgstr ""
"Windows では、:class:`stat_result` の ``st_ino`` 、 ``st_dev`` 、 "
"``st_nlink`` 属性は常にゼロに設定されます。これらの属性を取得するには、 :"
"func:`os.stat` を呼び出します。"

#: ../../library/os.rst:2980
msgid ""
"The result is cached on the ``os.DirEntry`` object, with a separate cache "
"for *follow_symlinks* ``True`` and ``False``. Call :func:`os.stat` to fetch "
"up-to-date information."
msgstr ""
"結果は ``os.DirEntry`` オブジェクトにキャッシュされます。*follow_symlinks* "
"が ``True`` の場合と ``False`` の場合とでは、別のオブジェクトにキャッシュされ"
"ます。最新の情報を取得するには、 :func:`os.stat` を呼び出してください。"

#: ../../library/os.rst:2984
msgid ""
"Note that there is a nice correspondence between several attributes and "
"methods of ``os.DirEntry`` and of :class:`pathlib.Path`.  In particular, the "
"``name`` attribute has the same meaning, as do the ``is_dir()``, "
"``is_file()``, ``is_symlink()``, ``is_junction()``, and ``stat()`` methods."
msgstr ""

#: ../../library/os.rst:2992
msgid ""
"Added support for the :class:`~os.PathLike` interface.  Added support for :"
"class:`bytes` paths on Windows."
msgstr ""
":class:`~os.PathLike` インターフェースをサポートしました。Windowsで :class:"
"`bytes` パスをサポートしました。"

#: ../../library/os.rst:2996
msgid ""
"The ``st_ctime`` attribute of a stat result is deprecated on Windows. The "
"file creation time is properly available as ``st_birthtime``, and in the "
"future ``st_ctime`` may be changed to return zero or the metadata change "
"time, if available."
msgstr ""

#: ../../library/os.rst:3005
msgid ""
"Get the status of a file or a file descriptor. Perform the equivalent of a :"
"c:func:`stat` system call on the given path. *path* may be specified as "
"either a string or bytes -- directly or indirectly through the :class:"
"`PathLike` interface -- or as an open file descriptor. Return a :class:"
"`stat_result` object."
msgstr ""

#: ../../library/os.rst:3011
msgid ""
"This function normally follows symlinks; to stat a symlink add the argument "
"``follow_symlinks=False``, or use :func:`lstat`."
msgstr ""
"この関数は通常はシンボリックリンクをたどります。シンボリックリンクに対して "
"stat したい場合は ``follow_symlinks=False`` とするか、 :func:`lstat` を利用し"
"てください。"

#: ../../library/os.rst:3014 ../../library/os.rst:4092
#: ../../library/os.rst:4108 ../../library/os.rst:4124
#: ../../library/os.rst:4144
msgid ""
"This function can support :ref:`specifying a file descriptor <path_fd>` and :"
"ref:`not following symlinks <follow_symlinks>`."
msgstr ""
"この関数は :ref:`ファイル記述子の指定 <path_fd>` および :ref:`シンボリックリ"
"ンクをたどらない <follow_symlinks>` をサポートしています。"

#: ../../library/os.rst:3017
msgid ""
"On Windows, passing ``follow_symlinks=False`` will disable following all "
"name-surrogate reparse points, which includes symlinks and directory "
"junctions. Other types of reparse points that do not resemble links or that "
"the operating system is unable to follow will be opened directly. When "
"following a chain of multiple links, this may result in the original link "
"being returned instead of the non-link that prevented full traversal. To "
"obtain stat results for the final path in this case, use the :func:`os.path."
"realpath` function to resolve the path name as far as possible and call :"
"func:`lstat` on the result. This does not apply to dangling symlinks or "
"junction points, which will raise the usual exceptions."
msgstr ""

#: ../../library/os.rst:3030 ../../library/os.rst:3799
msgid "Example::"
msgstr "以下はプログラム例です::"

#: ../../library/os.rst:3032
msgid ""
">>> import os\n"
">>> statinfo = os.stat('somefile.txt')\n"
">>> statinfo\n"
"os.stat_result(st_mode=33188, st_ino=7876932, st_dev=234881026,\n"
"st_nlink=1, st_uid=501, st_gid=501, st_size=264, st_atime=1297230295,\n"
"st_mtime=1297230027, st_ctime=1297230027)\n"
">>> statinfo.st_size\n"
"264"
msgstr ""

#: ../../library/os.rst:3043
msgid ":func:`fstat` and :func:`lstat` functions."
msgstr ":func:`fstat` と :func:`lstat`。"

#: ../../library/os.rst:3045
msgid ""
"Added the *dir_fd* and *follow_symlinks* parameters, specifying a file "
"descriptor instead of a path."
msgstr ""

#: ../../library/os.rst:3052
msgid ""
"On Windows, all reparse points that can be resolved by the operating system "
"are now followed, and passing ``follow_symlinks=False`` disables following "
"all name surrogate reparse points. If the operating system reaches a reparse "
"point that it is not able to follow, *stat* now returns the information for "
"the original path as if ``follow_symlinks=False`` had been specified instead "
"of raising an error."
msgstr ""

#: ../../library/os.rst:3063
msgid ""
"Object whose attributes correspond roughly to the members of the :c:struct:"
"`stat` structure. It is used for the result of :func:`os.stat`, :func:`os."
"fstat` and :func:`os.lstat`."
msgstr ""

#: ../../library/os.rst:3067
msgid "Attributes:"
msgstr "属性:"

#: ../../library/os.rst:3071
msgid "File mode: file type and file mode bits (permissions)."
msgstr "ファイルモード。ファイルタイプとファイルモードのビット （権限）。"

#: ../../library/os.rst:3075
msgid ""
"Platform dependent, but if non-zero, uniquely identifies the file for a "
"given value of ``st_dev``. Typically:"
msgstr ""

#: ../../library/os.rst:3078
msgid "the inode number on Unix,"
msgstr ""

#: ../../library/os.rst:3079
msgid ""
"the `file index <https://msdn.microsoft.com/en-us/library/aa363788>`_ on "
"Windows"
msgstr ""

#: ../../library/os.rst:3085
msgid "Identifier of the device on which this file resides."
msgstr "このファイルが存在するデバイスの識別子。"

#: ../../library/os.rst:3089
msgid "Number of hard links."
msgstr "ハードリンクの数。"

#: ../../library/os.rst:3093
msgid "User identifier of the file owner."
msgstr "ファイル所有者のユーザ識別子。"

#: ../../library/os.rst:3097
msgid "Group identifier of the file owner."
msgstr "ファイル所有者のグループ識別子。"

#: ../../library/os.rst:3101
msgid ""
"Size of the file in bytes, if it is a regular file or a symbolic link. The "
"size of a symbolic link is the length of the pathname it contains, without a "
"terminating null byte."
msgstr ""
"ファイルが通常のファイルまたはシンボリックリンクの場合、そのファイルのバイト"
"単位でのサイズです。シンボリックリンクのサイズは、含まれるパス名の長さで、"
"null バイトで終わることはありません。"

#: ../../library/os.rst:3105
msgid "Timestamps:"
msgstr "タイムスタンプ:"

#: ../../library/os.rst:3109
msgid "Time of most recent access expressed in seconds."
msgstr "秒で表した最終アクセス時刻。"

#: ../../library/os.rst:3113
msgid "Time of most recent content modification expressed in seconds."
msgstr "秒で表した最終内容更新時刻。"

#: ../../library/os.rst:3117
msgid "Time of most recent metadata change expressed in seconds."
msgstr ""

#: ../../library/os.rst:3119
msgid ""
"``st_ctime`` is deprecated on Windows. Use ``st_birthtime`` for the file "
"creation time. In the future, ``st_ctime`` will contain the time of the most "
"recent metadata change, as for other platforms."
msgstr ""

#: ../../library/os.rst:3126
msgid "Time of most recent access expressed in nanoseconds as an integer."
msgstr "ナノ秒 (整数) で表した最終アクセス時刻。"

#: ../../library/os.rst:3132
msgid ""
"Time of most recent content modification expressed in nanoseconds as an "
"integer."
msgstr "ナノ秒 (整数) で表した最終内容更新時刻。"

#: ../../library/os.rst:3139
msgid ""
"Time of most recent metadata change expressed in nanoseconds as an integer."
msgstr ""

#: ../../library/os.rst:3144
msgid ""
"``st_ctime_ns`` is deprecated on Windows. Use ``st_birthtime_ns`` for the "
"file creation time. In the future, ``st_ctime`` will contain the time of the "
"most recent metadata change, as for other platforms."
msgstr ""

#: ../../library/os.rst:3151
msgid ""
"Time of file creation expressed in seconds. This attribute is not always "
"available, and may raise :exc:`AttributeError`."
msgstr ""

#: ../../library/os.rst:3154
msgid "``st_birthtime`` is now available on Windows."
msgstr ""

#: ../../library/os.rst:3159
msgid ""
"Time of file creation expressed in nanoseconds as an integer. This attribute "
"is not always available, and may raise :exc:`AttributeError`."
msgstr ""

#: ../../library/os.rst:3167
msgid ""
"The exact meaning and resolution of the :attr:`st_atime`, :attr:`st_mtime`, :"
"attr:`st_ctime` and :attr:`st_birthtime` attributes depend on the operating "
"system and the file system. For example, on Windows systems using the FAT32 "
"file systems, :attr:`st_mtime` has 2-second resolution, and :attr:`st_atime` "
"has only 1-day resolution. See your operating system documentation for "
"details."
msgstr ""

#: ../../library/os.rst:3174
msgid ""
"Similarly, although :attr:`st_atime_ns`, :attr:`st_mtime_ns`, :attr:"
"`st_ctime_ns` and :attr:`st_birthtime_ns` are always expressed in "
"nanoseconds, many systems do not provide nanosecond precision.  On systems "
"that do provide nanosecond precision, the floating-point object used to "
"store :attr:`st_atime`, :attr:`st_mtime`, :attr:`st_ctime` and :attr:"
"`st_birthtime` cannot preserve all of it, and as such will be slightly "
"inexact. If you need the exact timestamps you should always use :attr:"
"`st_atime_ns`, :attr:`st_mtime_ns`, :attr:`st_ctime_ns` and :attr:"
"`st_birthtime_ns`."
msgstr ""

#: ../../library/os.rst:3184
msgid ""
"On some Unix systems (such as Linux), the following attributes may also be "
"available:"
msgstr ""
"(Linux のような ) 一部の Unix システムでは、以下の属性が利用できる場合があり"
"ます :"

#: ../../library/os.rst:3189
msgid ""
"Number of 512-byte blocks allocated for file. This may be smaller than :attr:"
"`st_size`/512 when the file has holes."
msgstr ""
"ファイルに対して割り当てられている 512 バイトのブロックの数です。ファイルに"
"ホール (hole) が含まれている場合、:attr:`st_size`/512 より小さくなる場合があ"
"ります。"

#: ../../library/os.rst:3194
msgid ""
"\"Preferred\" blocksize for efficient file system I/O. Writing to a file in "
"smaller chunks may cause an inefficient read-modify-rewrite."
msgstr ""
"効率的なファイルシステム I/O のための「推奨される」ブロックサイズです。ファイ"
"ルに、これより小さいチャンクで書き込むと、非効率的な読み込み、編集、再書き込"
"みが起こる場合があります。"

#: ../../library/os.rst:3199
msgid "Type of device if an inode device."
msgstr "inode デバイスの場合デバイスタイプ"

#: ../../library/os.rst:3203
msgid "User defined flags for file."
msgstr "ファイルのユーザ定義フラグ"

#: ../../library/os.rst:3205
msgid ""
"On other Unix systems (such as FreeBSD), the following attributes may be "
"available (but may be only filled out if root tries to use them):"
msgstr ""
"他の (FreeBSD のような ) Unix システムでは、以下の属性が利用できる場合があり"
"ます ( ただし root ユーザ以外が使うと値が入っていない場合があります ):"

#: ../../library/os.rst:3210
msgid "File generation number."
msgstr "ファイル生成番号"

#: ../../library/os.rst:3212
msgid ""
"On Solaris and derivatives, the following attributes may also be available:"
msgstr ""

#: ../../library/os.rst:3217
msgid ""
"String that uniquely identifies the type of the filesystem that contains the "
"file."
msgstr ""

#: ../../library/os.rst:3220
msgid "On macOS systems, the following attributes may also be available:"
msgstr ""

#: ../../library/os.rst:3224
msgid "Real size of the file."
msgstr "ファイルの実際のサイズ"

#: ../../library/os.rst:3228
msgid "Creator of the file."
msgstr "ファイルの作成者"

#: ../../library/os.rst:3232
msgid "File type."
msgstr "ファイルタイプ"

#: ../../library/os.rst:3234
msgid "On Windows systems, the following attributes are also available:"
msgstr ""

#: ../../library/os.rst:3238
msgid ""
"Windows file attributes: ``dwFileAttributes`` member of the "
"``BY_HANDLE_FILE_INFORMATION`` structure returned by :c:func:`!"
"GetFileInformationByHandle`. See the :const:`!FILE_ATTRIBUTE_* <stat."
"FILE_ATTRIBUTE_ARCHIVE>` constants in the :mod:`stat` module."
msgstr ""

#: ../../library/os.rst:3248
msgid ""
"When :attr:`st_file_attributes` has the :const:`~stat."
"FILE_ATTRIBUTE_REPARSE_POINT` set, this field contains the tag identifying "
"the type of reparse point. See the :const:`IO_REPARSE_TAG_* <stat."
"IO_REPARSE_TAG_SYMLINK>` constants in the :mod:`stat` module."
msgstr ""

#: ../../library/os.rst:3253
msgid ""
"The standard module :mod:`stat` defines functions and constants that are "
"useful for extracting information from a :c:struct:`stat` structure. (On "
"Windows, some items are filled with dummy values.)"
msgstr ""

#: ../../library/os.rst:3257
msgid ""
"For backward compatibility, a :class:`stat_result` instance is also "
"accessible as a tuple of at least 10 integers giving the most important (and "
"portable) members of the :c:struct:`stat` structure, in the order :attr:"
"`st_mode`, :attr:`st_ino`, :attr:`st_dev`, :attr:`st_nlink`, :attr:"
"`st_uid`, :attr:`st_gid`, :attr:`st_size`, :attr:`st_atime`, :attr:"
"`st_mtime`, :attr:`st_ctime`. More items may be added at the end by some "
"implementations. For compatibility with older Python versions, accessing :"
"class:`stat_result` as a tuple always returns integers."
msgstr ""

#: ../../library/os.rst:3266
msgid "Windows now returns the file index as :attr:`st_ino` when available."
msgstr ""

#: ../../library/os.rst:3270
msgid "Added the :attr:`st_fstype` member to Solaris/derivatives."
msgstr ""

#: ../../library/os.rst:3273
msgid "Added the :attr:`st_reparse_tag` member on Windows."
msgstr ""

#: ../../library/os.rst:3276
msgid ""
"On Windows, the :attr:`st_mode` member now identifies special files as :"
"const:`S_IFCHR`, :const:`S_IFIFO` or :const:`S_IFBLK` as appropriate."
msgstr ""

#: ../../library/os.rst:3281
msgid ""
"On Windows, :attr:`st_ctime` is deprecated. Eventually, it will contain the "
"last metadata change time, for consistency with other platforms, but for now "
"still contains creation time. Use :attr:`st_birthtime` for the creation time."
msgstr ""

#: ../../library/os.rst:3287
msgid ""
"On Windows, :attr:`st_ino` may now be up to 128 bits, depending on the file "
"system. Previously it would not be above 64 bits, and larger file "
"identifiers would be arbitrarily packed."
msgstr ""

#: ../../library/os.rst:3291
msgid ""
"On Windows, :attr:`st_rdev` no longer returns a value. Previously it would "
"contain the same as :attr:`st_dev`, which was incorrect."
msgstr ""

#: ../../library/os.rst:3294
msgid "Added the :attr:`st_birthtime` member on Windows."
msgstr ""

#: ../../library/os.rst:3299
msgid ""
"Perform a :c:func:`!statvfs` system call on the given path.  The return "
"value is an object whose attributes describe the filesystem on the given "
"path, and correspond to the members of the :c:struct:`statvfs` structure, "
"namely: :attr:`f_bsize`, :attr:`f_frsize`, :attr:`f_blocks`, :attr:"
"`f_bfree`, :attr:`f_bavail`, :attr:`f_files`, :attr:`f_ffree`, :attr:"
"`f_favail`, :attr:`f_flag`, :attr:`f_namemax`, :attr:`f_fsid`."
msgstr ""

#: ../../library/os.rst:3306
msgid ""
"Two module-level constants are defined for the :attr:`f_flag` attribute's "
"bit-flags: if :const:`ST_RDONLY` is set, the filesystem is mounted read-"
"only, and if :const:`ST_NOSUID` is set, the semantics of setuid/setgid bits "
"are disabled or not supported."
msgstr ""
":attr:`f_flag` 属性のビットフラグ用に 2 つのモジュールレベル定数が定義されて"
"います: :const:`ST_RDONLY` が設定されるとファイルシステムは読み出し専用でマウ"
"ントされ、:const:`ST_NOSUID` が設定されると setuid/setgid ビットの動作は無効"
"になるか、サポートされません。"

#: ../../library/os.rst:3311
msgid ""
"Additional module-level constants are defined for GNU/glibc based systems. "
"These are :const:`ST_NODEV` (disallow access to device special files), :"
"const:`ST_NOEXEC` (disallow program execution), :const:`ST_SYNCHRONOUS` "
"(writes are synced at once), :const:`ST_MANDLOCK` (allow mandatory locks on "
"an FS), :const:`ST_WRITE` (write on file/directory/symlink), :const:"
"`ST_APPEND` (append-only file), :const:`ST_IMMUTABLE` (immutable file), :"
"const:`ST_NOATIME` (do not update access times), :const:`ST_NODIRATIME` (do "
"not update directory access times), :const:`ST_RELATIME` (update atime "
"relative to mtime/ctime)."
msgstr ""
"GNU/glibc ベースのシステム用に、追加のモジュールレベルの定数が次のように定義"
"されています。 :const:`ST_NODEV` (デバイス特殊ファイルへのアクセスを許可しな"
"い) 、  :const:`ST_NOEXEC` (プログラムの実行を許可しない) 、 :const:"
"`ST_SYNCHRONOUS` (書き込みが一度に同期される) 、:const:`ST_MANDLOCK` (ファイ"
"ルシステムで強制的なロックを許可する) 、 :const:`ST_WRITE` (ファイル/ディレク"
"トリ/シンボリックリンクに書き込む) 、 :const:`ST_APPEND` (追記のみのファイ"
"ル) 、:const:`ST_IMMUTABLE` (変更不能なファイル) 、 :const:`ST_NOATIME` (アク"
"セス時刻を更新しない) 、:const:`ST_NODIRATIME` (ディレクトリアクセス時刻を更"
"新しない) 、:const:`ST_RELATIME` (mtime/ctimeに対して相対的に atime を更新す"
"る)。"

#: ../../library/os.rst:3324
msgid "The :const:`ST_RDONLY` and :const:`ST_NOSUID` constants were added."
msgstr "定数 :const:`ST_RDONLY` および :const:`ST_NOSUID` が追加されました。"

#: ../../library/os.rst:3330
msgid ""
"The :const:`ST_NODEV`, :const:`ST_NOEXEC`, :const:`ST_SYNCHRONOUS`, :const:"
"`ST_MANDLOCK`, :const:`ST_WRITE`, :const:`ST_APPEND`, :const:"
"`ST_IMMUTABLE`, :const:`ST_NOATIME`, :const:`ST_NODIRATIME`, and :const:"
"`ST_RELATIME` constants were added."
msgstr ""
":const:`ST_NODEV`, :const:`ST_NOEXEC`, :const:`ST_SYNCHRONOUS`, :const:"
"`ST_MANDLOCK`, :const:`ST_WRITE`, :const:`ST_APPEND`, :const:"
"`ST_IMMUTABLE`, :const:`ST_NOATIME`, :const:`ST_NODIRATIME`, :const:"
"`ST_RELATIME` 定数が追加されました。"

#: ../../library/os.rst:3339
msgid "Added the :attr:`f_fsid` attribute."
msgstr ""

#: ../../library/os.rst:3345
msgid ""
"A :class:`set` object indicating which functions in the :mod:`os` module "
"accept an open file descriptor for their *dir_fd* parameter. Different "
"platforms provide different features, and the underlying functionality "
"Python uses to implement the *dir_fd* parameter is not available on all "
"platforms Python supports.  For consistency's sake, functions that may "
"support *dir_fd* always allow specifying the parameter, but will throw an "
"exception if the functionality is used when it's not locally available. "
"(Specifying ``None`` for *dir_fd* is always supported on all platforms.)"
msgstr ""

#: ../../library/os.rst:3355
msgid ""
"To check whether a particular function accepts an open file descriptor for "
"its *dir_fd* parameter, use the ``in`` operator on ``supports_dir_fd``. As "
"an example, this expression evaluates to ``True`` if :func:`os.stat` accepts "
"open file descriptors for *dir_fd* on the local platform::"
msgstr ""

#: ../../library/os.rst:3360
msgid "os.stat in os.supports_dir_fd"
msgstr ""

#: ../../library/os.rst:3362
msgid ""
"Currently *dir_fd* parameters only work on Unix platforms; none of them work "
"on Windows."
msgstr ""
"現在 *dir_fd* 引数は Unix プラットフォームでのみ動作します。Windows で動作す"
"る関数はありません。"

#: ../../library/os.rst:3370
msgid ""
"A :class:`set` object indicating whether :func:`os.access` permits "
"specifying ``True`` for its *effective_ids* parameter on the local platform. "
"(Specifying ``False`` for *effective_ids* is always supported on all "
"platforms.)  If the local platform supports it, the collection will contain :"
"func:`os.access`; otherwise it will be empty."
msgstr ""

#: ../../library/os.rst:3376
msgid ""
"This expression evaluates to ``True`` if :func:`os.access` supports "
"``effective_ids=True`` on the local platform::"
msgstr ""

#: ../../library/os.rst:3379
msgid "os.access in os.supports_effective_ids"
msgstr ""

#: ../../library/os.rst:3381
msgid ""
"Currently *effective_ids* is only supported on Unix platforms; it does not "
"work on Windows."
msgstr ""
"現在 *effective_ids* は Unix プラットフォームでのみサポートされています。"
"Windows では動作しません。"

#: ../../library/os.rst:3389
msgid ""
"A :class:`set` object indicating which functions in the :mod:`os` module "
"permit specifying their *path* parameter as an open file descriptor on the "
"local platform.  Different platforms provide different features, and the "
"underlying functionality Python uses to accept open file descriptors as "
"*path* arguments is not available on all platforms Python supports."
msgstr ""

#: ../../library/os.rst:3396
msgid ""
"To determine whether a particular function permits specifying an open file "
"descriptor for its *path* parameter, use the ``in`` operator on "
"``supports_fd``. As an example, this expression evaluates to ``True`` if :"
"func:`os.chdir` accepts open file descriptors for *path* on your local "
"platform::"
msgstr ""

#: ../../library/os.rst:3402
msgid "os.chdir in os.supports_fd"
msgstr ""

#: ../../library/os.rst:3409
msgid ""
"A :class:`set` object indicating which functions in the :mod:`os` module "
"accept ``False`` for their *follow_symlinks* parameter on the local "
"platform. Different platforms provide different features, and the underlying "
"functionality Python uses to implement *follow_symlinks* is not available on "
"all platforms Python supports.  For consistency's sake, functions that may "
"support *follow_symlinks* always allow specifying the parameter, but will "
"throw an exception if the functionality is used when it's not locally "
"available.  (Specifying ``True`` for *follow_symlinks* is always supported "
"on all platforms.)"
msgstr ""

#: ../../library/os.rst:3419
msgid ""
"To check whether a particular function accepts ``False`` for its "
"*follow_symlinks* parameter, use the ``in`` operator on "
"``supports_follow_symlinks``.  As an example, this expression evaluates to "
"``True`` if you may specify ``follow_symlinks=False`` when calling :func:`os."
"stat` on the local platform::"
msgstr ""

#: ../../library/os.rst:3425
msgid "os.stat in os.supports_follow_symlinks"
msgstr ""

#: ../../library/os.rst:3432
msgid "Create a symbolic link pointing to *src* named *dst*."
msgstr "*src* を指し示すシンボリックリンク *dst* を作成します。"

#: ../../library/os.rst:3434
msgid ""
"On Windows, a symlink represents either a file or a directory, and does not "
"morph to the target dynamically.  If the target is present, the type of the "
"symlink will be created to match. Otherwise, the symlink will be created as "
"a directory if *target_is_directory* is ``True`` or a file symlink (the "
"default) otherwise.  On non-Windows platforms, *target_is_directory* is "
"ignored."
msgstr ""
"Windows では、シンボリックリンクはファイルかディレクトリのどちらかを表します"
"が、ターゲットに合わせて動的に変化することはありません。ターゲットが存在する"
"場合、シンボリックリンクの種類は対象に合わせて作成されます。ターゲットが存在"
"せず *target_is_directory* に ``True`` が設定された場合、シンボリックリンクは"
"ディレクトリのリンクとして作成され、``False`` に設定された場合 (デフォルト) "
"はファイルのリンクになります。Windows 以外のプラットフォームでは "
"*target_is_directory* は無視されます。"

#: ../../library/os.rst:3445
msgid ""
"On newer versions of Windows 10, unprivileged accounts can create symlinks "
"if Developer Mode is enabled. When Developer Mode is not available/enabled, "
"the *SeCreateSymbolicLinkPrivilege* privilege is required, or the process "
"must be run as an administrator."
msgstr ""

#: ../../library/os.rst:3451
msgid ""
":exc:`OSError` is raised when the function is called by an unprivileged user."
msgstr ""
"この関数が特権を持たないユーザーに呼び出されると、:exc:`OSError` が送出されま"
"す。"

#: ../../library/os.rst:3454
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.symlink`` with arguments "
"``src``, ``dst``, ``dir_fd``."
msgstr ""
"引数 ``src``, ``dst``, ``dir_fd`` を指定して :ref:`監査イベント <auditing>` "
"``os.symlink`` を送出します。 "

#: ../../library/os.rst:3464
msgid ""
"Added the *dir_fd* parameter, and now allow *target_is_directory* on non-"
"Windows platforms."
msgstr ""

#: ../../library/os.rst:3471
msgid "Added support for unelevated symlinks on Windows with Developer Mode."
msgstr ""

#: ../../library/os.rst:3477
msgid "Force write of everything to disk."
msgstr "ディスクキャッシュのディスクへの書き出しを強制します。"

#: ../../library/os.rst:3486
msgid ""
"Truncate the file corresponding to *path*, so that it is at most *length* "
"bytes in size."
msgstr ""
"*path* に対応するファイルを、サイズが最大で *length* バイトになるよう切り詰め"
"ます。"

#: ../../library/os.rst:3491
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.truncate`` with arguments "
"``path``, ``length``."
msgstr ""
"引数 ``path``, ``length`` を指定して :ref:`監査イベント <auditing>` ``os."
"truncate`` を送出します。 "

#: ../../library/os.rst:3506
msgid ""
"Remove (delete) the file *path*.  This function is semantically identical "
"to :func:`remove`; the ``unlink`` name is its traditional Unix name.  Please "
"see the documentation for :func:`remove` for further information."
msgstr ""
"ファイル *path* を削除します。意味上は :func:`remove` と等価です。 "
"``unlink`` の名前は伝統的な Unix の関数名です。詳細は :func:`remove` のドキュ"
"メントを参照してください。"

#: ../../library/os.rst:3522
msgid "Set the access and modified times of the file specified by *path*."
msgstr ""
"*path* で指定されたファイルに最終アクセス時刻および最終修正時刻を設定します。"

#: ../../library/os.rst:3524
msgid ""
":func:`utime` takes two optional parameters, *times* and *ns*. These specify "
"the times set on *path* and are used as follows:"
msgstr ""
":func:`utime` は 2 つの任意引数 *times* と *ns* をとります。これらは *path* "
"に設定する時刻を指定し、以下のように使用されます:"

#: ../../library/os.rst:3527
msgid ""
"If *ns* is specified, it must be a 2-tuple of the form ``(atime_ns, "
"mtime_ns)`` where each member is an int expressing nanoseconds."
msgstr ""
"*ns* を指定する場合、ナノ秒を表す整数値をメンバーとして使用して、 "
"``(atime_ns, mtime_ns)`` の形式の 2 要素タプルを指定する必要があります。"

#: ../../library/os.rst:3530
msgid ""
"If *times* is not ``None``, it must be a 2-tuple of the form ``(atime, "
"mtime)`` where each member is an int or float expressing seconds."
msgstr ""
"*times* が ``None`` ではない場合、``(atime, mtime)`` の形式で各メンバーは単位"
"を秒で表す整数か浮動小数点値のタプルを指定しなければなりません。"

#: ../../library/os.rst:3533
msgid ""
"If *times* is ``None`` and *ns* is unspecified, this is equivalent to "
"specifying ``ns=(atime_ns, mtime_ns)`` where both times are the current time."
msgstr ""
"*times* が ``None`` で、 *ns* が指定されていない場合、これは両方の時間を現在"
"時刻として ``ns=(atime_ns, mtime_ns)`` を指定することと等価です。"

#: ../../library/os.rst:3537
msgid "It is an error to specify tuples for both *times* and *ns*."
msgstr "*times* と *ns* の両方にタプルが指定されるとエラーになります。"

#: ../../library/os.rst:3539
msgid ""
"Note that the exact times you set here may not be returned by a subsequent :"
"func:`~os.stat` call, depending on the resolution with which your operating "
"system records access and modification times; see :func:`~os.stat`. The best "
"way to preserve exact times is to use the *st_atime_ns* and *st_mtime_ns* "
"fields from the :func:`os.stat` result object with the *ns* parameter to :"
"func:`utime`."
msgstr ""
"ここで設定した時刻が、後に :func:`~os.stat` の呼び出し時正確に返されない場合"
"があります。これはオペレーティングシステムが記録するアクセスおよび修正時刻の"
"精度に依存しています; :func:`~os.stat` を参照してください。正確な時刻を保持す"
"る最善の方法は、:func:`utime` で *ns* 引数を指定し、:func:`os.stat` の返り値"
"オブジェクトから *st_atime_ns* および *st_mtime_ns* フィールドを使用すること"
"です。"

#: ../../library/os.rst:3550
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.utime`` with arguments "
"``path``, ``times``, ``ns``, ``dir_fd``."
msgstr ""
"引数 ``path``, ``times``, ``ns``, ``dir_fd`` を指定して :ref:`監査イベント "
"<auditing>` ``os.utime`` を送出します。 "

#: ../../library/os.rst:3552
msgid ""
"Added support for specifying *path* as an open file descriptor, and the "
"*dir_fd*, *follow_symlinks*, and *ns* parameters."
msgstr ""
"*path* にオープンしているファイル記述子の指定のサポート、および引数 "
"*dir_fd*, *follow_symlinks*, *ns* を追加しました。"

#: ../../library/os.rst:3566
msgid ""
"Generate the file names in a directory tree by walking the tree either top-"
"down or bottom-up. For each directory in the tree rooted at directory *top* "
"(including *top* itself), it yields a 3-tuple ``(dirpath, dirnames, "
"filenames)``."
msgstr ""
"ディレクトリツリー以下のファイル名を、ツリーをトップダウンもしくはボトムアッ"
"プに走査することで作成します。ディレクトリ *top* を根に持つディレクトリツリー"
"に含まれる、各ディレクトリ (*top* 自身を含む ) ごとに、タプル ``(dirpath, "
"dirnames, filenames)`` を yield します。"

#: ../../library/os.rst:3571
msgid ""
"*dirpath* is a string, the path to the directory.  *dirnames* is a list of "
"the names of the subdirectories in *dirpath* (including symlinks to "
"directories, and excluding ``'.'`` and ``'..'``). *filenames* is a list of "
"the names of the non-directory files in *dirpath*. Note that the names in "
"the lists contain no path components.  To get a full path (which begins with "
"*top*) to a file or directory in *dirpath*, do ``os.path.join(dirpath, "
"name)``.  Whether or not the lists are sorted depends on the file system.  "
"If a file is removed from or added to the *dirpath* directory during "
"generating the lists, whether a name for that file be included is "
"unspecified."
msgstr ""

#: ../../library/os.rst:3582
msgid ""
"If optional argument *topdown* is ``True`` or not specified, the triple for "
"a directory is generated before the triples for any of its subdirectories "
"(directories are generated top-down).  If *topdown* is ``False``, the triple "
"for a directory is generated after the triples for all of its subdirectories "
"(directories are generated bottom-up). No matter the value of *topdown*, the "
"list of subdirectories is retrieved before the tuples for the directory and "
"its subdirectories are generated."
msgstr ""
"オプション引数 *topdown* が ``True`` であるか、指定されなかった場合、各ディレ"
"クトリからタプルを生成した後で、サブディレクトリからタプルを生成します。 "
"( ディレクトリはトップダウンで生成 ) 。 *topdown* が ``False`` の場合、ディレ"
"クトリに対応するタプルは、そのディレクトリ以下の全てのサブディレクトリに対応"
"するタプルの後で ( ボトムアップで ) 生成されます。 *topdown* の値によらず、サ"
"ブディレクトリのリストは、ディレクトリとそのサブディレクトリのタプルを生成す"
"る前に取り出されます。"

#: ../../library/os.rst:3590
msgid ""
"When *topdown* is ``True``, the caller can modify the *dirnames* list in-"
"place (perhaps using :keyword:`del` or slice assignment), and :func:`walk` "
"will only recurse into the subdirectories whose names remain in *dirnames*; "
"this can be used to prune the search, impose a specific order of visiting, "
"or even to inform :func:`walk` about directories the caller creates or "
"renames before it resumes :func:`walk` again.  Modifying *dirnames* when "
"*topdown* is ``False`` has no effect on the behavior of the walk, because in "
"bottom-up mode the directories in *dirnames* are generated before *dirpath* "
"itself is generated."
msgstr ""
"*topdown* が ``True`` のとき、呼び出し側は *dirnames* リストを、インプレース"
"で ( たとえば、 :keyword:`del` やスライスを使った代入で ) 変更でき、 :func:"
"`walk` は *dirnames* に残っているサブディレクトリ内のみを再帰します。これによ"
"り、検索を省略したり、特定の訪問順序を強制したり、呼び出し側が :func:`walk` "
"を再開する前に、呼び出し側が作った、または名前を変更したディレクトリを、 :"
"func:`walk` に知らせたりすることができます。 *topdown* が ``False`` のときに "
"*dirnames* を変更しても効果はありません。ボトムアップモードでは *dirpath* 自"
"身が生成される前に *dirnames* 内のディレクトリの情報が生成されるからです。"

#: ../../library/os.rst:3599
msgid ""
"By default, errors from the :func:`scandir` call are ignored.  If optional "
"argument *onerror* is specified, it should be a function; it will be called "
"with one argument, an :exc:`OSError` instance.  It can report the error to "
"continue with the walk, or raise the exception to abort the walk.  Note that "
"the filename is available as the ``filename`` attribute of the exception "
"object."
msgstr ""
"デフォルトでは、 :func:`scandir` 呼び出しからのエラーは無視されます。オプショ"
"ン引数の *onerror* を指定する場合は関数でなければなりません ; この関数は単一"
"の引数として :exc:`OSError` インスタンスを伴って呼び出されます。この関数でエ"
"ラーを報告して走査を継続したり、例外を送出して走査を中止したりできます。ファ"
"イル名は例外オブジェクトの ``filename`` 属性として利用できます。"

#: ../../library/os.rst:3605
msgid ""
"By default, :func:`walk` will not walk down into symbolic links that resolve "
"to directories. Set *followlinks* to ``True`` to visit directories pointed "
"to by symlinks, on systems that support them."
msgstr ""
"デフォルトでは、 :func:`walk` はディレクトリへのシンボリックリンクをたどりま"
"せん。 *followlinks* に ``True`` を指定すると、ディレクトリへのシンボリックリ"
"ンクをサポートしているシステムでは、シンボリックリンクの指しているディレクト"
"リを走査します。"

#: ../../library/os.rst:3611
msgid ""
"Be aware that setting *followlinks* to ``True`` can lead to infinite "
"recursion if a link points to a parent directory of itself. :func:`walk` "
"does not keep track of the directories it visited already."
msgstr ""
"*followlinks* に ``True`` を指定すると、シンボリックリンクが親ディレクトリを"
"指していた場合に、無限ループになることに注意してください。 :func:`walk` はす"
"でにたどったディレクトリを管理したりはしません。"

#: ../../library/os.rst:3617
msgid ""
"If you pass a relative pathname, don't change the current working directory "
"between resumptions of :func:`walk`.  :func:`walk` never changes the current "
"directory, and assumes that its caller doesn't either."
msgstr ""
"相対パスを渡した場合、 :func:`walk` が再開されるまでの間に現在の作業ディレク"
"トリを変更しないでください。 :func:`walk` はカレントディレクトリを変更しませ"
"んし、呼び出し側もカレントディレクトリを変更しないと仮定しています。"

#: ../../library/os.rst:3621 ../../library/os.rst:3682
msgid ""
"This example displays the number of bytes taken by non-directory files in "
"each directory under the starting directory, except that it doesn't look "
"under any CVS subdirectory::"
msgstr ""
"以下の例では、最初のディレクトリ以下にある各ディレクトリに含まれる、非ディレ"
"クトリファイルのバイト数を表示します。ただし、 CVS サブディレクトリ以下は見に"
"行きません ::"

#: ../../library/os.rst:3625
msgid ""
"import os\n"
"from os.path import join, getsize\n"
"for root, dirs, files in os.walk('python/Lib/email'):\n"
"    print(root, \"consumes\", end=\" \")\n"
"    print(sum(getsize(join(root, name)) for name in files), end=\" \")\n"
"    print(\"bytes in\", len(files), \"non-directory files\")\n"
"    if 'CVS' in dirs:\n"
"        dirs.remove('CVS')  # don't visit CVS directories"
msgstr ""

#: ../../library/os.rst:3634
msgid ""
"In the next example (simple implementation of :func:`shutil.rmtree`), "
"walking the tree bottom-up is essential, :func:`rmdir` doesn't allow "
"deleting a directory before the directory is empty::"
msgstr ""
"次の例 (:func:`shutil.rmtree` の単純な実装) では、ツリーをボトムアップで走査"
"することが不可欠になります; :func:`rmdir` はディレクトリが空になるまで削除を"
"許さないからです::"

#: ../../library/os.rst:3638
msgid ""
"# Delete everything reachable from the directory named in \"top\",\n"
"# assuming there are no symbolic links.\n"
"# CAUTION:  This is dangerous!  For example, if top == '/', it\n"
"# could delete all your disk files.\n"
"import os\n"
"for root, dirs, files in os.walk(top, topdown=False):\n"
"    for name in files:\n"
"        os.remove(os.path.join(root, name))\n"
"    for name in dirs:\n"
"        os.rmdir(os.path.join(root, name))"
msgstr ""

#: ../../library/os.rst:3649
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.walk`` with arguments "
"``top``, ``topdown``, ``onerror``, ``followlinks``."
msgstr ""
"引数 ``top``, ``topdown``, ``onerror``, ``followlinks`` を指定して :ref:`監査"
"イベント <auditing>` ``os.walk`` を送出します。 "

#: ../../library/os.rst:3651
msgid ""
"This function now calls :func:`os.scandir` instead of :func:`os.listdir`, "
"making it faster by reducing the number of calls to :func:`os.stat`."
msgstr ""
"この関数は、今では :func:`os.listdir` ではなく :func:`os.scandir` を呼び出し"
"ます。これにより、 :func:`os.stat` の呼び出し回数を削減でき、動作が高速化しま"
"す。"

#: ../../library/os.rst:3665
msgid ""
"This behaves exactly like :func:`walk`, except that it yields a 4-tuple "
"``(dirpath, dirnames, filenames, dirfd)``, and it supports ``dir_fd``."
msgstr ""
"挙動は :func:`walk` と同じですが、``dir_fd`` をサポートし、タプル "
"``(dirpath, dirnames, filenames, dirfd)`` を yield します。"

#: ../../library/os.rst:3668
msgid ""
"*dirpath*, *dirnames* and *filenames* are identical to :func:`walk` output, "
"and *dirfd* is a file descriptor referring to the directory *dirpath*."
msgstr ""
"*dirpath*、*dirnames*、および *filenames* は :func:`walk` の出力と同じで、"
"*dirfd* は *dirpath* を参照するファイル記述子です。"

#: ../../library/os.rst:3671
msgid ""
"This function always supports :ref:`paths relative to directory descriptors "
"<dir_fd>` and :ref:`not following symlinks <follow_symlinks>`.  Note however "
"that, unlike other functions, the :func:`fwalk` default value for "
"*follow_symlinks* is ``False``."
msgstr ""
"この関数は常に :ref:`ディレクトリ記述子への相対パス <dir_fd>` および :ref:`シ"
"ンボリックリンクをたどらない <follow_symlinks>` をサポートしています。ただ"
"し、他の関数と異なり、:func:`fwalk` での *follow_symlinks* のデフォルト値は "
"``False`` になることに注意してください。"

#: ../../library/os.rst:3678
msgid ""
"Since :func:`fwalk` yields file descriptors, those are only valid until the "
"next iteration step, so you should duplicate them (e.g. with :func:`dup`) if "
"you want to keep them longer."
msgstr ""
":func:`fwalk` はファイル記述子を yield するため、それらが有効なのは次のイテ"
"レートステップまでです。それ以後も保持したい場合は :func:`dup` などを使って複"
"製して使用してください。"

#: ../../library/os.rst:3686
msgid ""
"import os\n"
"for root, dirs, files, rootfd in os.fwalk('python/Lib/email'):\n"
"    print(root, \"consumes\", end=\"\")\n"
"    print(sum([os.stat(name, dir_fd=rootfd).st_size for name in files]),\n"
"          end=\"\")\n"
"    print(\"bytes in\", len(files), \"non-directory files\")\n"
"    if 'CVS' in dirs:\n"
"        dirs.remove('CVS')  # don't visit CVS directories"
msgstr ""

#: ../../library/os.rst:3695
msgid ""
"In the next example, walking the tree bottom-up is essential: :func:`rmdir` "
"doesn't allow deleting a directory before the directory is empty::"
msgstr ""
"次の例では、ツリーをボトムアップで走査することが不可欠になります ; :func:"
"`rmdir` はディレクトリが空になるまで削除を許さないからです ::"

#: ../../library/os.rst:3699
msgid ""
"# Delete everything reachable from the directory named in \"top\",\n"
"# assuming there are no symbolic links.\n"
"# CAUTION:  This is dangerous!  For example, if top == '/', it\n"
"# could delete all your disk files.\n"
"import os\n"
"for root, dirs, files, rootfd in os.fwalk(top, topdown=False):\n"
"    for name in files:\n"
"        os.unlink(name, dir_fd=rootfd)\n"
"    for name in dirs:\n"
"        os.rmdir(name, dir_fd=rootfd)"
msgstr ""

#: ../../library/os.rst:3710
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.fwalk`` with arguments "
"``top``, ``topdown``, ``onerror``, ``follow_symlinks``, ``dir_fd``."
msgstr ""
"引数 ``top``, ``topdown``, ``onerror``, ``follow_symlinks`` を指定して :ref:`"
"監査イベント <auditing>` ``os.fwalk`` を送出します。 "

#: ../../library/os.rst:3719
msgid "Added support for :class:`bytes` paths."
msgstr ""

#: ../../library/os.rst:3725
msgid ""
"Create an anonymous file and return a file descriptor that refers to it. "
"*flags* must be one of the ``os.MFD_*`` constants available on the system "
"(or a bitwise ORed combination of them).  By default, the new file "
"descriptor is :ref:`non-inheritable <fd_inheritance>`."
msgstr ""

#: ../../library/os.rst:3730
msgid ""
"The name supplied in *name* is used as a filename and will be displayed as "
"the target of the corresponding symbolic link in the directory ``/proc/self/"
"fd/``. The displayed name is always prefixed with ``memfd:`` and serves only "
"for debugging purposes. Names do not affect the behavior of the file "
"descriptor, and as such multiple files can have the same name without any "
"side effects."
msgstr ""

#: ../../library/os.rst:3760
msgid "These flags can be passed to :func:`memfd_create`."
msgstr ""

#: ../../library/os.rst:3764
msgid "The ``MFD_HUGE*`` flags are only available since Linux 4.14."
msgstr ""

#: ../../library/os.rst:3771
msgid ""
"Create and return an event file descriptor. The file descriptors supports "
"raw :func:`read` and :func:`write` with a buffer size of 8, :func:`~select."
"select`, :func:`~select.poll` and similar. See man page :manpage:"
"`eventfd(2)` for more information.  By default, the new file descriptor is :"
"ref:`non-inheritable <fd_inheritance>`."
msgstr ""

#: ../../library/os.rst:3777
msgid ""
"*initval* is the initial value of the event counter. The initial value must "
"be a 32 bit unsigned integer. Please note that the initial value is limited "
"to a 32 bit unsigned int although the event counter is an unsigned 64 bit "
"integer with a maximum value of 2\\ :sup:`64`\\ -\\ 2."
msgstr ""

#: ../../library/os.rst:3782
msgid ""
"*flags* can be constructed from :const:`EFD_CLOEXEC`, :const:`EFD_NONBLOCK`, "
"and :const:`EFD_SEMAPHORE`."
msgstr ""

#: ../../library/os.rst:3785
msgid ""
"If :const:`EFD_SEMAPHORE` is specified and the event counter is non-zero, :"
"func:`eventfd_read` returns 1 and decrements the counter by one."
msgstr ""

#: ../../library/os.rst:3788
msgid ""
"If :const:`EFD_SEMAPHORE` is not specified and the event counter is non-"
"zero, :func:`eventfd_read` returns the current event counter value and "
"resets the counter to zero."
msgstr ""

#: ../../library/os.rst:3792
msgid ""
"If the event counter is zero and :const:`EFD_NONBLOCK` is not specified, :"
"func:`eventfd_read` blocks."
msgstr ""

#: ../../library/os.rst:3795
msgid ""
":func:`eventfd_write` increments the event counter. Write blocks if the "
"write operation would increment the counter to a value larger than 2\\ :sup:"
"`64`\\ -\\ 2."
msgstr ""

#: ../../library/os.rst:3801
msgid ""
"import os\n"
"\n"
"# semaphore with start value '1'\n"
"fd = os.eventfd(1, os.EFD_SEMAPHORE | os.EFC_CLOEXEC)\n"
"try:\n"
"    # acquire semaphore\n"
"    v = os.eventfd_read(fd)\n"
"    try:\n"
"        do_work()\n"
"    finally:\n"
"        # release semaphore\n"
"        os.eventfd_write(fd, v)\n"
"finally:\n"
"    os.close(fd)"
msgstr ""

#: ../../library/os.rst:3822
msgid ""
"Read value from an :func:`eventfd` file descriptor and return a 64 bit "
"unsigned int. The function does not verify that *fd* is an :func:`eventfd`."
msgstr ""

#: ../../library/os.rst:3831
msgid ""
"Add value to an :func:`eventfd` file descriptor. *value* must be a 64 bit "
"unsigned int. The function does not verify that *fd* is an :func:`eventfd`."
msgstr ""

#: ../../library/os.rst:3840
msgid "Set close-on-exec flag for new :func:`eventfd` file descriptor."
msgstr ""

#: ../../library/os.rst:3848
msgid ""
"Set :const:`O_NONBLOCK` status flag for new :func:`eventfd` file descriptor."
msgstr ""

#: ../../library/os.rst:3857
msgid ""
"Provide semaphore-like semantics for reads from an :func:`eventfd` file "
"descriptor. On read the internal counter is decremented by one."
msgstr ""

#: ../../library/os.rst:3868
msgid "Timer File Descriptors"
msgstr ""

#: ../../library/os.rst:3872
msgid ""
"These functions provide support for Linux's *timer file descriptor* API. "
"Naturally, they are all only available on Linux."
msgstr ""

#: ../../library/os.rst:3877
msgid "Create and return a timer file descriptor (*timerfd*)."
msgstr ""

#: ../../library/os.rst:3879
msgid "The file descriptor returned by :func:`timerfd_create` supports:"
msgstr ""

#: ../../library/os.rst:3881
msgid ":func:`read`"
msgstr ""

#: ../../library/os.rst:3882
msgid ":func:`~select.select`"
msgstr ""

#: ../../library/os.rst:3883
msgid ":func:`~select.poll`"
msgstr ""

#: ../../library/os.rst:3885
msgid ""
"The file descriptor's :func:`read` method can be called with a buffer size "
"of 8. If the timer has already expired one or more times, :func:`read` "
"returns the number of expirations with the host's endianness, which may be "
"converted to an :class:`int` by ``int.from_bytes(x, byteorder=sys."
"byteorder)``."
msgstr ""

#: ../../library/os.rst:3890
msgid ""
":func:`~select.select` and :func:`~select.poll` can be used to wait until "
"timer expires and the file descriptor is readable."
msgstr ""

#: ../../library/os.rst:3893
msgid ""
"*clockid* must be a valid :ref:`clock ID <time-clock-id-constants>`, as "
"defined in the :py:mod:`time` module:"
msgstr ""

#: ../../library/os.rst:3896
msgid ":const:`time.CLOCK_REALTIME`"
msgstr ""

#: ../../library/os.rst:3897
msgid ":const:`time.CLOCK_MONOTONIC`"
msgstr ""

#: ../../library/os.rst:3898
msgid ":const:`time.CLOCK_BOOTTIME` (Since Linux 3.15 for timerfd_create)"
msgstr ""

#: ../../library/os.rst:3900
msgid ""
"If *clockid* is :const:`time.CLOCK_REALTIME`, a settable system-wide real-"
"time clock is used. If system clock is changed, timer setting need to be "
"updated. To cancel timer when system clock is changed, see :const:"
"`TFD_TIMER_CANCEL_ON_SET`."
msgstr ""

#: ../../library/os.rst:3905
msgid ""
"If *clockid* is :const:`time.CLOCK_MONOTONIC`, a non-settable monotonically "
"increasing clock is used. Even if the system clock is changed, the timer "
"setting will not be affected."
msgstr ""

#: ../../library/os.rst:3909
msgid ""
"If *clockid* is :const:`time.CLOCK_BOOTTIME`, same as :const:`time."
"CLOCK_MONOTONIC` except it includes any time that the system is suspended."
msgstr ""

#: ../../library/os.rst:3912
msgid ""
"The file descriptor's behaviour can be modified by specifying a *flags* "
"value. Any of the following variables may used, combined using bitwise OR "
"(the ``|`` operator):"
msgstr ""

#: ../../library/os.rst:3916
msgid ":const:`TFD_NONBLOCK`"
msgstr ""

#: ../../library/os.rst:3917
msgid ":const:`TFD_CLOEXEC`"
msgstr ""

#: ../../library/os.rst:3919
msgid ""
"If :const:`TFD_NONBLOCK` is not set as a flag, :func:`read` blocks until the "
"timer expires. If it is set as a flag, :func:`read` doesn't block, but If "
"there hasn't been an expiration since the last call to read, :func:`read` "
"raises :class:`OSError` with ``errno`` is set to :const:`errno.EAGAIN`."
msgstr ""

#: ../../library/os.rst:3925
msgid ":const:`TFD_CLOEXEC` is always set by Python automatically."
msgstr ""

#: ../../library/os.rst:3927
msgid ""
"The file descriptor must be closed with :func:`os.close` when it is no "
"longer needed, or else the file descriptor will be leaked."
msgstr ""

#: ../../library/os.rst:3930
msgid "The :manpage:`timerfd_create(2)` man page."
msgstr ""

#: ../../library/os.rst:3939
msgid ""
"Alter a timer file descriptor's internal timer. This function operates the "
"same interval timer as :func:`timerfd_settime_ns`."
msgstr ""

#: ../../library/os.rst:3942
msgid "*fd* must be a valid timer file descriptor."
msgstr ""

#: ../../library/os.rst:3944
msgid ""
"The timer's behaviour can be modified by specifying a *flags* value. Any of "
"the following variables may used, combined using bitwise OR (the ``|`` "
"operator):"
msgstr ""

#: ../../library/os.rst:3948
msgid ":const:`TFD_TIMER_ABSTIME`"
msgstr ""

#: ../../library/os.rst:3949
msgid ":const:`TFD_TIMER_CANCEL_ON_SET`"
msgstr ""

#: ../../library/os.rst:3951
msgid ""
"The timer is disabled by setting *initial* to zero (``0``). If *initial* is "
"equal to or greater than zero, the timer is enabled. If *initial* is less "
"than zero, it raises an :class:`OSError` exception with ``errno`` set to :"
"const:`errno.EINVAL`"
msgstr ""

#: ../../library/os.rst:3956
msgid ""
"By default the timer will fire when *initial* seconds have elapsed. (If "
"*initial* is zero, timer will fire immediately.)"
msgstr ""

#: ../../library/os.rst:3959
msgid ""
"However, if the :const:`TFD_TIMER_ABSTIME` flag is set, the timer will fire "
"when the timer's clock (set by *clockid* in :func:`timerfd_create`) reaches "
"*initial* seconds."
msgstr ""

#: ../../library/os.rst:3963
msgid ""
"The timer's interval is set by the *interval* :py:class:`float`. If "
"*interval* is zero, the timer only fires once, on the initial expiration. If "
"*interval* is greater than zero, the timer fires every time *interval* "
"seconds have elapsed since the previous expiration. If *interval* is less "
"than zero, it raises :class:`OSError` with ``errno`` set to :const:`errno."
"EINVAL`"
msgstr ""

#: ../../library/os.rst:3970
msgid ""
"If the :const:`TFD_TIMER_CANCEL_ON_SET` flag is set along with :const:"
"`TFD_TIMER_ABSTIME` and the clock for this timer is :const:`time."
"CLOCK_REALTIME`, the timer is marked as cancelable if the real-time clock is "
"changed discontinuously. Reading the descriptor is aborted with the error "
"ECANCELED."
msgstr ""

#: ../../library/os.rst:3976
msgid ""
"Linux manages system clock as UTC. A daylight-savings time transition is "
"done by changing time offset only and doesn't cause discontinuous system "
"clock change."
msgstr ""

#: ../../library/os.rst:3980
msgid ""
"Discontinuous system clock change will be caused by the following events:"
msgstr ""

#: ../../library/os.rst:3982
msgid "``settimeofday``"
msgstr ""

#: ../../library/os.rst:3983
msgid "``clock_settime``"
msgstr ""

#: ../../library/os.rst:3984
msgid "set the system date and time by ``date`` command"
msgstr ""

#: ../../library/os.rst:3986
msgid ""
"Return a two-item tuple of (``next_expiration``, ``interval``) from the "
"previous timer state, before this function executed."
msgstr ""

#: ../../library/os.rst:3991
msgid ""
":manpage:`timerfd_create(2)`, :manpage:`timerfd_settime(2)`, :manpage:"
"`settimeofday(2)`, :manpage:`clock_settime(2)`, and :manpage:`date(1)`."
msgstr ""

#: ../../library/os.rst:4002
msgid ""
"Similar to :func:`timerfd_settime`, but use time as nanoseconds. This "
"function operates the same interval timer as :func:`timerfd_settime`."
msgstr ""

#: ../../library/os.rst:4012
msgid "Return a two-item tuple of floats (``next_expiration``, ``interval``)."
msgstr ""

#: ../../library/os.rst:4014
msgid ""
"``next_expiration`` denotes the relative time until next the timer next "
"fires, regardless of if the :const:`TFD_TIMER_ABSTIME` flag is set."
msgstr ""

#: ../../library/os.rst:4017
msgid ""
"``interval`` denotes the timer's interval. If zero, the timer will only fire "
"once, after ``next_expiration`` seconds have elapsed."
msgstr ""

#: ../../library/os.rst:4021
msgid ":manpage:`timerfd_gettime(2)`"
msgstr ""

#: ../../library/os.rst:4030
msgid "Similar to :func:`timerfd_gettime`, but return time as nanoseconds."
msgstr ""

#: ../../library/os.rst:4038
msgid ""
"A flag for the :func:`timerfd_create` function, which sets the :const:"
"`O_NONBLOCK` status flag for the new timer file descriptor. If :const:"
"`TFD_NONBLOCK` is not set as a flag, :func:`read` blocks."
msgstr ""

#: ../../library/os.rst:4048
msgid ""
"A flag for the :func:`timerfd_create` function, If :const:`TFD_CLOEXEC` is "
"set as a flag, set close-on-exec flag for new file descriptor."
msgstr ""

#: ../../library/os.rst:4058
msgid ""
"A flag for the :func:`timerfd_settime` and :func:`timerfd_settime_ns` "
"functions. If this flag is set, *initial* is interpreted as an absolute "
"value on the timer's clock (in UTC seconds or nanoseconds since the Unix "
"Epoch)."
msgstr ""

#: ../../library/os.rst:4068
msgid ""
"A flag for the :func:`timerfd_settime` and :func:`timerfd_settime_ns` "
"functions along with :const:`TFD_TIMER_ABSTIME`. The timer is cancelled when "
"the time of the underlying clock changes discontinuously."
msgstr ""

#: ../../library/os.rst:4079
msgid "Linux extended attributes"
msgstr "Linux 拡張属性"

#: ../../library/os.rst:4083
msgid "These functions are all available on Linux only."
msgstr "以下の関数はすべて Linux でのみ使用可能です。"

#: ../../library/os.rst:4087
msgid ""
"Return the value of the extended filesystem attribute *attribute* for "
"*path*. *attribute* can be bytes or str (directly or indirectly through the :"
"class:`PathLike` interface). If it is str, it is encoded with the filesystem "
"encoding."
msgstr ""

#: ../../library/os.rst:4095
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.getxattr`` with arguments "
"``path``, ``attribute``."
msgstr ""
"引数 ``path``, ``attribute`` を指定して :ref:`監査イベント <auditing>` ``os."
"getxattr`` を送出します。 "

#: ../../library/os.rst:4097 ../../library/os.rst:4129
#: ../../library/os.rst:4154
msgid "Accepts a :term:`path-like object` for *path* and *attribute*."
msgstr ""
"*path* と *attribute* が :term:`path-like object` を受け付けるようになりまし"
"た。"

#: ../../library/os.rst:4103
msgid ""
"Return a list of the extended filesystem attributes on *path*.  The "
"attributes in the list are represented as strings decoded with the "
"filesystem encoding.  If *path* is ``None``, :func:`listxattr` will examine "
"the current directory."
msgstr ""
"*path* の拡張ファイルシステム属性のリストを返します。リスト内の属性はファイル"
"システムのエンコーディングでデコードされた文字列で表されます。*path* が "
"``None`` の場合、:func:`listxattr` はカレントディレクトリを調べます。"

#: ../../library/os.rst:4111
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.listxattr`` with argument "
"``path``."
msgstr ""
"引数 ``path`` を指定して :ref:`監査イベント <auditing>` ``os.listxattr`` を送"
"出します。 "

#: ../../library/os.rst:4119
msgid ""
"Removes the extended filesystem attribute *attribute* from *path*. "
"*attribute* should be bytes or str (directly or indirectly through the :"
"class:`PathLike` interface). If it is a string, it is encoded with the :term:"
"`filesystem encoding and error handler`."
msgstr ""

#: ../../library/os.rst:4127
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.removexattr`` with arguments "
"``path``, ``attribute``."
msgstr ""
"引数 ``path``, ``attribute`` を指定して :ref:`監査イベント <auditing>` ``os."
"removexattr`` を送出します。 "

#: ../../library/os.rst:4135
msgid ""
"Set the extended filesystem attribute *attribute* on *path* to *value*. "
"*attribute* must be a bytes or str with no embedded NULs (directly or "
"indirectly through the :class:`PathLike` interface). If it is a str, it is "
"encoded with the :term:`filesystem encoding and error handler`.  *flags* may "
"be :data:`XATTR_REPLACE` or :data:`XATTR_CREATE`. If :data:`XATTR_REPLACE` "
"is given and the attribute does not exist, ``ENODATA`` will be raised. If :"
"data:`XATTR_CREATE` is given and the attribute already exists, the attribute "
"will not be created and ``EEXISTS`` will be raised."
msgstr ""

#: ../../library/os.rst:4149
msgid ""
"A bug in Linux kernel versions less than 2.6.39 caused the flags argument to "
"be ignored on some filesystems."
msgstr ""
"Linux カーネル 2.6.39 以前では、バグのため一部のファイルシステムで引数 flags "
"が無視されます。"

#: ../../library/os.rst:4152
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.setxattr`` with arguments "
"``path``, ``attribute``, ``value``, ``flags``."
msgstr ""
"引数 ``path``, ``attribute``, ``value``, ``flags`` を指定して :ref:`監査イベ"
"ント <auditing>` ``os.setxattr`` を送出します。 "

#: ../../library/os.rst:4160
msgid ""
"The maximum size the value of an extended attribute can be. Currently, this "
"is 64 KiB on Linux."
msgstr ""
"拡張属性の値にできる最大サイズです。現在、Linux では 64 キロバイトです。"

#: ../../library/os.rst:4166
msgid ""
"This is a possible value for the flags argument in :func:`setxattr`. It "
"indicates the operation must create an attribute."
msgstr ""
":func:`setxattr` の引数 flags に指定できる値です。その操作で属性を作成しなけ"
"ればならないことを意味します。"

#: ../../library/os.rst:4172
msgid ""
"This is a possible value for the flags argument in :func:`setxattr`. It "
"indicates the operation must replace an existing attribute."
msgstr ""
":func:`setxattr` の引数 flags に指定できる値です。その操作で既存の属性を置き"
"換えなければならないことを意味します。"

#: ../../library/os.rst:4179
msgid "Process Management"
msgstr "プロセス管理"

#: ../../library/os.rst:4181
msgid "These functions may be used to create and manage processes."
msgstr "以下の関数はプロセスの生成や管理に利用できます。"

#: ../../library/os.rst:4183
msgid ""
"The various :func:`exec\\* <execl>` functions take a list of arguments for "
"the new program loaded into the process.  In each case, the first of these "
"arguments is passed to the new program as its own name rather than as an "
"argument a user may have typed on a command line.  For the C programmer, "
"this is the ``argv[0]`` passed to a program's :c:func:`main`.  For example, "
"``os.execv('/bin/echo', ['foo', 'bar'])`` will only print ``bar`` on "
"standard output; ``foo`` will seem to be ignored."
msgstr ""
"さまざまな :func:`exec\\* <execl>` 関数は、プロセス内にロードされる新しいプロ"
"グラムに与えるための、引数のリストを取ります。どの関数の場合でも、新しいプロ"
"グラムに渡されるリストの最初の引数は、ユーザがコマンドラインで入力する引数で"
"はなく、そのプログラム自体の名前です。 C プログラマならば、プログラムの :c:"
"func:`main` に渡される ``argv[0]`` だと考えれば良いでしょう。たとえば、 ``os."
"execv('/bin/echo', ['foo', 'bar'])`` が標準出力に出力するのは ``bar`` だけ"
"で、 ``foo`` は無視されたかのように見えることになります。"

#: ../../library/os.rst:4194
msgid ""
"Generate a :const:`SIGABRT` signal to the current process.  On Unix, the "
"default behavior is to produce a core dump; on Windows, the process "
"immediately returns an exit code of ``3``.  Be aware that calling this "
"function will not call the Python signal handler registered for :const:"
"`SIGABRT` with :func:`signal.signal`."
msgstr ""
":const:`SIGABRT` シグナルを現在のプロセスに対して生成します。 Unix では、デ"
"フォルトの動作はコアダンプの生成です ; Windows では、プロセスは即座に終了コー"
"ド ``3`` を返します。この関数の呼び出しは :func:`signal.signal` を使って :"
"const:`SIGABRT` に対し登録された Python シグナルハンドラーを呼び出さないこと"
"に注意してください。"

#: ../../library/os.rst:4203
msgid "Add a path to the DLL search path."
msgstr ""

#: ../../library/os.rst:4205
msgid ""
"This search path is used when resolving dependencies for imported extension "
"modules (the module itself is resolved through :data:`sys.path`), and also "
"by :mod:`ctypes`."
msgstr ""

#: ../../library/os.rst:4209
msgid ""
"Remove the directory by calling **close()** on the returned object or using "
"it in a :keyword:`with` statement."
msgstr ""

#: ../../library/os.rst:4212
msgid ""
"See the `Microsoft documentation <https://msdn.microsoft."
"com/44228cf2-6306-466c-8f16-f513cd3ba8b5>`_ for more information about how "
"DLLs are loaded."
msgstr ""

#: ../../library/os.rst:4216
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.add_dll_directory`` with "
"argument ``path``."
msgstr ""
"引数 ``path`` を指定して :ref:`監査イベント <auditing>` ``os."
"add_dll_directory`` を送出します。 "

#: ../../library/os.rst:4220
msgid ""
"Previous versions of CPython would resolve DLLs using the default behavior "
"for the current process. This led to inconsistencies, such as only sometimes "
"searching :envvar:`PATH` or the current working directory, and OS functions "
"such as ``AddDllDirectory`` having no effect."
msgstr ""

#: ../../library/os.rst:4227
msgid ""
"In 3.8, the two primary ways DLLs are loaded now explicitly override the "
"process-wide behavior to ensure consistency. See the :ref:`porting notes "
"<bpo-36085-whatsnew>` for information on updating libraries."
msgstr ""

#: ../../library/os.rst:4242
msgid ""
"These functions all execute a new program, replacing the current process; "
"they do not return.  On Unix, the new executable is loaded into the current "
"process, and will have the same process id as the caller.  Errors will be "
"reported as :exc:`OSError` exceptions."
msgstr ""
"これらの関数はすべて、現在のプロセスを置き換える形で新たなプログラムを実行し"
"ます ; 現在のプロセスは返り値を返しません。 Unix では、新たに実行される実行"
"コードは現在のプロセス内に読み込まれ、呼び出し側と同じプロセス ID を持つこと"
"になります。エラーは :exc:`OSError` 例外として報告されます。"

#: ../../library/os.rst:4247
msgid ""
"The current process is replaced immediately. Open file objects and "
"descriptors are not flushed, so if there may be data buffered on these open "
"files, you should flush them using :func:`sys.stdout.flush` or :func:`os."
"fsync` before calling an :func:`exec\\* <execl>` function."
msgstr ""
"現在のプロセスは瞬時に置き換えられます。開かれているファイルオブジェクトや"
"ファイル記述子はフラッシュされません。そのため、バッファ内にデータが残ってい"
"るかもしれない場合、 :func:`exec\\* <execl>` 関数を実行する前に :func:`sys."
"stdout.flush` か :func:`os.fsync` を利用してバッファをフラッシュしておく必要"
"があります。"

#: ../../library/os.rst:4253
msgid ""
"The \"l\" and \"v\" variants of the :func:`exec\\* <execl>` functions differ "
"in how command-line arguments are passed.  The \"l\" variants are perhaps "
"the easiest to work with if the number of parameters is fixed when the code "
"is written; the individual parameters simply become additional parameters to "
"the :func:`!execl\\*` functions.  The \"v\" variants are good when the "
"number of parameters is variable, with the arguments being passed in a list "
"or tuple as the *args* parameter.  In either case, the arguments to the "
"child process should start with the name of the command being run, but this "
"is not enforced."
msgstr ""

#: ../../library/os.rst:4262
msgid ""
"The variants which include a \"p\" near the end (:func:`execlp`, :func:"
"`execlpe`, :func:`execvp`, and :func:`execvpe`) will use the :envvar:`PATH` "
"environment variable to locate the program *file*.  When the environment is "
"being replaced (using one of the :func:`exec\\*e <execl>` variants, "
"discussed in the next paragraph), the new environment is used as the source "
"of the :envvar:`PATH` variable. The other variants, :func:`execl`, :func:"
"`execle`, :func:`execv`, and :func:`execve`, will not use the :envvar:`PATH` "
"variable to locate the executable; *path* must contain an appropriate "
"absolute or relative path. Relative paths must include at least one slash, "
"even on Windows, as plain names will not be resolved."
msgstr ""

#: ../../library/os.rst:4273
msgid ""
"For :func:`execle`, :func:`execlpe`, :func:`execve`, and :func:`execvpe` "
"(note that these all end in \"e\"), the *env* parameter must be a mapping "
"which is used to define the environment variables for the new process (these "
"are used instead of the current process' environment); the functions :func:"
"`execl`, :func:`execlp`, :func:`execv`, and :func:`execvp` all cause the new "
"process to inherit the environment of the current process."
msgstr ""
":func:`execle` 、 :func:`execlpe` 、 :func:`execve` 、および :func:`execvpe` "
"(すべて末尾に \"e\" がついています) では、 *env* 引数は新たなプロセスで利用さ"
"れる環境変数を定義するためのマップ型でなくてはなりません ( 現在のプロセスの環"
"境変数の代わりに利用されます ); :func:`execl` 、 :func:`execlp` 、 :func:"
"`execv` 、および :func:`execvp` では、すべて新たなプロセスは現在のプロセスの"
"環境を引き継ぎます。"

#: ../../library/os.rst:4280
msgid ""
"For :func:`execve` on some platforms, *path* may also be specified as an "
"open file descriptor.  This functionality may not be supported on your "
"platform; you can check whether or not it is available using :data:`os."
"supports_fd`. If it is unavailable, using it will raise a :exc:"
"`NotImplementedError`."
msgstr ""
"一部のプラットフォームの :func:`execve` では、*path* はオープンしているファイ"
"ル記述子で指定することもできます。この機能をサポートしていないプラットフォー"
"ムもあります; :data:`os.supports_fd` を使うことで利用可能かどうか調べることが"
"できます。利用できない場合、:exc:`NotImplementedError` が送出されます。"

#: ../../library/os.rst:4285
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.exec`` with arguments "
"``path``, ``args``, ``env``."
msgstr ""
"引数 ``path``, ``args``, ``env`` を指定して :ref:`監査イベント <auditing>` "
"``os.exec`` を送出します。 "

#: ../../library/os.rst:4289
msgid ""
"Added support for specifying *path* as an open file descriptor for :func:"
"`execve`."
msgstr ""

#: ../../library/os.rst:4298
msgid ""
"Exit the process with status *n*, without calling cleanup handlers, flushing "
"stdio buffers, etc."
msgstr ""
"終了ステータス *n* でプロセスを終了します。この時クリーンアップハンドラーの呼"
"び出しや、標準入出力バッファのフラッシュなどは行いません。"

#: ../../library/os.rst:4303
msgid ""
"The standard way to exit is :func:`sys.exit(n) <sys.exit>`.  :func:`!_exit` "
"should normally only be used in the child process after a :func:`fork`."
msgstr ""

#: ../../library/os.rst:4306
msgid ""
"The following exit codes are defined and can be used with :func:`_exit`, "
"although they are not required.  These are typically used for system "
"programs written in Python, such as a mail server's external command "
"delivery program."
msgstr ""
"以下の終了コードは必須ではありませんが :func:`_exit` で使うことができます。一"
"般に、メールサーバーの外部コマンド配送プログラムのような、 Python で書かれた"
"システムプログラムに使います。"

#: ../../library/os.rst:4312
msgid ""
"Some of these may not be available on all Unix platforms, since there is "
"some variation.  These constants are defined where they are defined by the "
"underlying platform."
msgstr ""
"いくつかのバリエーションがあって、これらのすべてがすべての Unix プラット"
"フォームで使えるわけではありません。以下の定数は下層のプラットフォームで定義"
"されていれば定義されます。"

#: ../../library/os.rst:4319
msgid ""
"Exit code that means no error occurred. May be taken from the defined value "
"of ``EXIT_SUCCESS`` on some platforms. Generally has a value of zero."
msgstr ""

#: ../../library/os.rst:4327
msgid ""
"Exit code that means the command was used incorrectly, such as when the "
"wrong number of arguments are given."
msgstr ""
"誤った個数の引数が渡された時など、コマンドが間違って使われたことを表す終了"
"コード。"

#: ../../library/os.rst:4335
msgid "Exit code that means the input data was incorrect."
msgstr "入力データが誤っていたことを表す終了コード。"

#: ../../library/os.rst:4342
msgid "Exit code that means an input file did not exist or was not readable."
msgstr ""
"入力ファイルが存在しなかった、または、読み込み不可だったことを表す終了コー"
"ド。"

#: ../../library/os.rst:4349
msgid "Exit code that means a specified user did not exist."
msgstr "指定されたユーザーが存在しなかったことを表す終了コード。"

#: ../../library/os.rst:4356
msgid "Exit code that means a specified host did not exist."
msgstr "指定されたホストが存在しなかったことを表す終了コード。"

#: ../../library/os.rst:4363
msgid "Exit code that means that a required service is unavailable."
msgstr "要求されたサービスが利用できないことを表す終了コード。"

#: ../../library/os.rst:4370
msgid "Exit code that means an internal software error was detected."
msgstr "内部ソフトウェアエラーが検出されたことを表す終了コード。"

#: ../../library/os.rst:4377
msgid ""
"Exit code that means an operating system error was detected, such as the "
"inability to fork or create a pipe."
msgstr ""
"fork できない、 pipe の作成ができないなど、オペレーティングシステムのエラーが"
"検出されたことを表す終了コード。"

#: ../../library/os.rst:4385
msgid ""
"Exit code that means some system file did not exist, could not be opened, or "
"had some other kind of error."
msgstr ""
"システムファイルが存在しなかった、開けなかった、あるいはその他のエラーが起き"
"たことを表す終了コード。"

#: ../../library/os.rst:4393
msgid "Exit code that means a user specified output file could not be created."
msgstr "ユーザーには作成できない出力ファイルを指定したことを表す終了コード。"

#: ../../library/os.rst:4400
msgid ""
"Exit code that means that an error occurred while doing I/O on some file."
msgstr "ファイルの I/O を行っている途中にエラーが発生した時の終了コード。"

#: ../../library/os.rst:4407
msgid ""
"Exit code that means a temporary failure occurred.  This indicates something "
"that may not really be an error, such as a network connection that couldn't "
"be made during a retryable operation."
msgstr ""
"一時的な失敗が発生したことを表す終了コード。これは、再試行可能な操作の途中"
"に、ネットワークに接続できないというような、実際にはエラーではないかも知れな"
"いことを意味します。"

#: ../../library/os.rst:4416
msgid ""
"Exit code that means that a protocol exchange was illegal, invalid, or not "
"understood."
msgstr "プロトコル交換が不正、不適切、または理解不能なことを表す終了コード。"

#: ../../library/os.rst:4424
msgid ""
"Exit code that means that there were insufficient permissions to perform the "
"operation (but not intended for file system problems)."
msgstr ""
"操作を行うために十分な許可がなかった（ファイルシステムの問題を除く）ことを表"
"す終了コード。"

#: ../../library/os.rst:4432
msgid "Exit code that means that some kind of configuration error occurred."
msgstr "設定エラーが起こったことを表す終了コード。"

#: ../../library/os.rst:4439
msgid "Exit code that means something like \"an entry was not found\"."
msgstr "\"an entry was not found\" のようなことを表す終了コード。"

#: ../../library/os.rst:4446
msgid ""
"Fork a child process.  Return ``0`` in the child and the child's process id "
"in the parent.  If an error occurs :exc:`OSError` is raised."
msgstr ""
"子プロセスを fork します。子プロセスでは ``0`` が返り、親プロセスでは子プロセ"
"スの id が返ります。エラーが発生した場合は、 :exc:`OSError` を送出します。"

#: ../../library/os.rst:4449
msgid ""
"Note that some platforms including FreeBSD <= 6.3 and Cygwin have known "
"issues when using ``fork()`` from a thread."
msgstr ""
"FreeBSD 6.3 以下、Cygwinを含む一部のプラットフォームにおいて、 ``fork()`` を"
"スレッド内から利用した場合に既知の問題があることに注意してください。"

#: ../../library/os.rst:4452
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.fork`` with no arguments."
msgstr "引数無しで :ref:`監査イベント <auditing>` ``os.fork`` を送出します。 "

#: ../../library/os.rst:4456
msgid ""
"If you use TLS sockets in an application calling ``fork()``, see the warning "
"in the :mod:`ssl` documentation."
msgstr ""

#: ../../library/os.rst:4461 ../../library/os.rst:4505
msgid ""
"On macOS the use of this function is unsafe when mixed with using higher-"
"level system APIs, and that includes using :mod:`urllib.request`."
msgstr ""

#: ../../library/os.rst:4464
msgid ""
"Calling ``fork()`` in a subinterpreter is no longer supported (:exc:"
"`RuntimeError` is raised)."
msgstr ""

#: ../../library/os.rst:4468
msgid ""
"If Python is able to detect that your process has multiple threads, :func:"
"`os.fork` now raises a :exc:`DeprecationWarning`."
msgstr ""

#: ../../library/os.rst:4472
msgid ""
"We chose to surface this as a warning, when detectable, to better inform "
"developers of a design problem that the POSIX platform specifically notes as "
"not supported. Even in code that *appears* to work, it has never been safe "
"to mix threading with :func:`os.fork` on POSIX platforms. The CPython "
"runtime itself has always made API calls that are not safe for use in the "
"child process when threads existed in the parent (such as ``malloc`` and "
"``free``)."
msgstr ""

#: ../../library/os.rst:4481
msgid ""
"Users of macOS or users of libc or malloc implementations other than those "
"typically found in glibc to date are among those already more likely to "
"experience deadlocks running such code."
msgstr ""

#: ../../library/os.rst:4485
msgid ""
"See `this discussion on fork being incompatible with threads <https://"
"discuss.python.org/t/33555>`_ for technical details of why we're surfacing "
"this longstanding platform compatibility problem to developers."
msgstr ""

#: ../../library/os.rst:4495
msgid ""
"Fork a child process, using a new pseudo-terminal as the child's controlling "
"terminal. Return a pair of ``(pid, fd)``, where *pid* is ``0`` in the child, "
"the new child's process id in the parent, and *fd* is the file descriptor of "
"the master end of the pseudo-terminal.  For a more portable approach, use "
"the :mod:`pty` module.  If an error occurs :exc:`OSError` is raised."
msgstr ""
"子プロセスを fork します。この時新しい擬似端末を子プロセスの制御端末として使"
"います。親プロセスでは ``(pid, fd)`` からなるペアが返り、 *fd* は擬似端末のマ"
"スター側のファイル記述子となります。可搬性のあるアプローチを取るには、 :mod:"
"`pty` モジュールを利用してください。エラーが発生した場合は、 :exc:`OSError` "
"を送出します。"

#: ../../library/os.rst:4501
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.forkpty`` with no arguments."
msgstr ""
"引数無しで :ref:`監査イベント <auditing>` ``os.forkpty`` を送出します。 "

#: ../../library/os.rst:4508
msgid ""
"Calling ``forkpty()`` in a subinterpreter is no longer supported (:exc:"
"`RuntimeError` is raised)."
msgstr ""

#: ../../library/os.rst:4512
msgid ""
"If Python is able to detect that your process has multiple threads, this now "
"raises a :exc:`DeprecationWarning`. See the longer explanation on :func:`os."
"fork`."
msgstr ""

#: ../../library/os.rst:4526
msgid ""
"Send signal *sig* to the process *pid*.  Constants for the specific signals "
"available on the host platform are defined in the :mod:`signal` module."
msgstr ""
"プロセス *pid* にシグナル *sig* を送ります。ホストプラットフォームで利用可能"
"なシグナルを特定する定数は :mod:`signal` モジュールで定義されています。"

#: ../../library/os.rst:4529
msgid ""
"Windows: The :const:`signal.CTRL_C_EVENT` and :const:`signal."
"CTRL_BREAK_EVENT` signals are special signals which can only be sent to "
"console processes which share a common console window, e.g., some "
"subprocesses. Any other value for *sig* will cause the process to be "
"unconditionally killed by the TerminateProcess API, and the exit code will "
"be set to *sig*. The Windows version of :func:`kill` additionally takes "
"process handles to be killed."
msgstr ""

#: ../../library/os.rst:4537
msgid "See also :func:`signal.pthread_kill`."
msgstr ":func:`signal.pthread_kill` も参照してください。"

#: ../../library/os.rst:4539
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.kill`` with arguments "
"``pid``, ``sig``."
msgstr ""
"引数 ``pid``, ``sig`` を指定して :ref:`監査イベント <auditing>` ``os.kill`` "
"を送出します。 "

#: ../../library/os.rst:4553
msgid "Send the signal *sig* to the process group *pgid*."
msgstr "プロセスグループ *pgid* にシグナル *sig* を送ります。"

#: ../../library/os.rst:4555
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.killpg`` with arguments "
"``pgid``, ``sig``."
msgstr ""
"引数 ``pgid``, ``sig`` を指定して :ref:`監査イベント <auditing>` ``os."
"killpg`` を送出します。 "

#: ../../library/os.rst:4562
msgid ""
"Add *increment* to the process's \"niceness\".  Return the new niceness."
msgstr ""
"プロセスの \"nice 値 \" に *increment* を加えます。新たな nice 値を返します。"

#: ../../library/os.rst:4569
msgid ""
"Return a file descriptor referring to the process *pid* with *flags* set. "
"This descriptor can be used to perform process management without races and "
"signals."
msgstr ""

#: ../../library/os.rst:4573
msgid "See the :manpage:`pidfd_open(2)` man page for more details."
msgstr ""

#: ../../library/os.rst:4580
msgid ""
"This flag indicates that the file descriptor will be non-blocking. If the "
"process referred to by the file descriptor has not yet terminated, then an "
"attempt to wait on the file descriptor using :manpage:`waitid(2)` will "
"immediately return the error :const:`~errno.EAGAIN` rather than blocking."
msgstr ""

#: ../../library/os.rst:4591
msgid ""
"Lock program segments into memory.  The value of *op* (defined in ``<sys/"
"lock.h>``) determines which segments are locked."
msgstr ""
"プログラムのセグメントをメモリ内にロックします。 *op* (``<sys/lock.h>`` で定"
"義されています ) にはどのセグメントをロックするかを指定します。"

#: ../../library/os.rst:4599
msgid ""
"Open a pipe to or from command *cmd*. The return value is an open file "
"object connected to the pipe, which can be read or written depending on "
"whether *mode* is ``'r'`` (default) or ``'w'``. The *buffering* argument "
"have the same meaning as the corresponding argument to the built-in :func:"
"`open` function. The returned file object reads or writes text strings "
"rather than bytes."
msgstr ""
"コマンド *cmd* への、または *cmd* からのパイプ入出力を開きます。戻り値はパイ"
"プに接続されている開かれたファイルオブジェクトで、 *mode* が ``'r'`` (デフォ"
"ルト) または ``'w'`` かによって読み出しまたは書き込みを行うことができます。引"
"数 *bufsize* は、組み込み関数 :func:`open` における対応する引数と同じ意味を持"
"ちます。 返されるファイルオブジェクトは、バイトではなくテキスト文字列を読み書"
"きします。"

#: ../../library/os.rst:4607
msgid ""
"The ``close`` method returns :const:`None` if the subprocess exited "
"successfully, or the subprocess's return code if there was an error. On "
"POSIX systems, if the return code is positive it represents the return value "
"of the process left-shifted by one byte.  If the return code is negative, "
"the process was terminated by the signal given by the negated value of the "
"return code.  (For example, the return value might be ``- signal.SIGKILL`` "
"if the subprocess was killed.)  On Windows systems, the return value "
"contains the signed integer return code from the child process."
msgstr ""
"``close`` メソッドは、サブプロセスが正常に終了した場合は :const:`None` を返"
"し、エラーが発生した場合にはサブプロセスの返りコードを返します。POSIX システ"
"ムでは、返りコードが正の場合、そのコードは1バイト左にシフトしてプロセスが終了"
"したことを示します。返りコードが負の場合、プロセスは返りコードの符号を変えた"
"信号により終了します 。 (例えば、サブプロセスが kill された場合、返り値は "
"``- signal.SIGKILL`` となる場合があります。) Windows システムでは、返り値には"
"子プロセスからの符号のついた整数の返りコードを含まれます。"

#: ../../library/os.rst:4617
msgid ""
"On Unix, :func:`waitstatus_to_exitcode` can be used to convert the ``close`` "
"method result (exit status) into an exit code if it is not ``None``. On "
"Windows, the ``close`` method result is directly the exit code (or ``None``)."
msgstr ""

#: ../../library/os.rst:4622
msgid ""
"This is implemented using :class:`subprocess.Popen`; see that class's "
"documentation for more powerful ways to manage and communicate with "
"subprocesses."
msgstr ""
"これは、:class:`subprocess.Popen` を使用して実装されています。サブプロセスを"
"管理し、サブプロセスと通信を行うためのより強力な方法については、クラスのド"
"キュメンテーションを参照してください。"

#: ../../library/os.rst:4629
msgid ""
"The :ref:`Python UTF-8 Mode <utf8-mode>` affects encodings used for *cmd* "
"and pipe contents."
msgstr ""

#: ../../library/os.rst:4632
msgid ""
":func:`popen` is a simple wrapper around :class:`subprocess.Popen`. Use :"
"class:`subprocess.Popen` or :func:`subprocess.run` to control options like "
"encodings."
msgstr ""

#: ../../library/os.rst:4641
msgid "Wraps the :c:func:`!posix_spawn` C library API for use from Python."
msgstr ""

#: ../../library/os.rst:4643
msgid ""
"Most users should use :func:`subprocess.run` instead of :func:`posix_spawn`."
msgstr ""
"大部分のユーザーは :func:`posix_spawn` ではなく、 :func:`subprocess.run` を使"
"うべきです。"

#: ../../library/os.rst:4645
msgid ""
"The positional-only arguments *path*, *args*, and *env* are similar to :func:"
"`execve`. *env* is allowed to be ``None``, in which case current process' "
"environment is used."
msgstr ""

#: ../../library/os.rst:4649
msgid ""
"The *path* parameter is the path to the executable file.  The *path* should "
"contain a directory.  Use :func:`posix_spawnp` to pass an executable file "
"without directory."
msgstr ""
"*path* には実行ファイルへのパスを指定します。 *path* はディレクトリを含む形"
"（実行ファイルへの絶対パスまたは相対パス）で指定する必要があります。実行ファ"
"イル名のみを指定したい場合は :func:`posix_spawnp` を使ってください。"

#: ../../library/os.rst:4653
msgid ""
"The *file_actions* argument may be a sequence of tuples describing actions "
"to take on specific file descriptors in the child process between the C "
"library implementation's :c:func:`fork` and :c:func:`exec` steps. The first "
"item in each tuple must be one of the three type indicator listed below "
"describing the remaining tuple elements:"
msgstr ""
"*file_actions* 引数はCライブラリ実装の :c:func:`fork` と :c:func:`exec` の間"
"で子プロセスが持つファイルデスクリプタに対して行うアクションを記述するタプル"
"のシーケンスです。各タプルの最初の要素は、残りのタプル要素の解釈方法を指定す"
"る以下の3つの型指定子のうちのひとつでなければなりません。"

#: ../../library/os.rst:4661
msgid "(``os.POSIX_SPAWN_OPEN``, *fd*, *path*, *flags*, *mode*)"
msgstr "(``os.POSIX_SPAWN_OPEN``, *fd*, *path*, *flags*, *mode*)"

#: ../../library/os.rst:4663
msgid "Performs ``os.dup2(os.open(path, flags, mode), fd)``."
msgstr "``os.dup2(os.open(path, flags, mode), fd)`` を実行します。"

#: ../../library/os.rst:4667
msgid "(``os.POSIX_SPAWN_CLOSE``, *fd*)"
msgstr "(``os.POSIX_SPAWN_CLOSE``, *fd*)"

#: ../../library/os.rst:4669
msgid "Performs ``os.close(fd)``."
msgstr "``os.close(fd)`` を実行します。"

#: ../../library/os.rst:4673
msgid "(``os.POSIX_SPAWN_DUP2``, *fd*, *new_fd*)"
msgstr "(``os.POSIX_SPAWN_DUP2``, *fd*, *new_fd*)"

#: ../../library/os.rst:4675
msgid "Performs ``os.dup2(fd, new_fd)``."
msgstr "``os.dup2(fd, new_fd)`` を実行します。"

#: ../../library/os.rst:4679
msgid "(``os.POSIX_SPAWN_CLOSEFROM``, *fd*)"
msgstr ""

#: ../../library/os.rst:4681
msgid "Performs ``os.closerange(fd, INF)``."
msgstr ""

#: ../../library/os.rst:4683
msgid ""
"These tuples correspond to the C library :c:func:`!"
"posix_spawn_file_actions_addopen`, :c:func:`!"
"posix_spawn_file_actions_addclose`, :c:func:`!"
"posix_spawn_file_actions_adddup2`, and :c:func:`!"
"posix_spawn_file_actions_addclosefrom_np` API calls used to prepare for the :"
"c:func:`!posix_spawn` call itself."
msgstr ""

#: ../../library/os.rst:4690
msgid ""
"The *setpgroup* argument will set the process group of the child to the "
"value specified. If the value specified is 0, the child's process group ID "
"will be made the same as its process ID. If the value of *setpgroup* is not "
"set, the child will inherit the parent's process group ID. This argument "
"corresponds to the C library :c:macro:`!POSIX_SPAWN_SETPGROUP` flag."
msgstr ""

#: ../../library/os.rst:4696
msgid ""
"If the *resetids* argument is ``True`` it will reset the effective UID and "
"GID of the child to the real UID and GID of the parent process. If the "
"argument is ``False``, then the child retains the effective UID and GID of "
"the parent. In either case, if the set-user-ID and set-group-ID permission "
"bits are enabled on the executable file, their effect will override the "
"setting of the effective UID and GID. This argument corresponds to the C "
"library :c:macro:`!POSIX_SPAWN_RESETIDS` flag."
msgstr ""

#: ../../library/os.rst:4704
msgid ""
"If the *setsid* argument is ``True``, it will create a new session ID for "
"``posix_spawn``. *setsid* requires :c:macro:`!POSIX_SPAWN_SETSID` or :c:"
"macro:`!POSIX_SPAWN_SETSID_NP` flag. Otherwise, :exc:`NotImplementedError` "
"is raised."
msgstr ""

#: ../../library/os.rst:4709
msgid ""
"The *setsigmask* argument will set the signal mask to the signal set "
"specified. If the parameter is not used, then the child inherits the "
"parent's signal mask. This argument corresponds to the C library :c:macro:`!"
"POSIX_SPAWN_SETSIGMASK` flag."
msgstr ""

#: ../../library/os.rst:4714
msgid ""
"The *sigdef* argument will reset the disposition of all signals in the set "
"specified. This argument corresponds to the C library :c:macro:`!"
"POSIX_SPAWN_SETSIGDEF` flag."
msgstr ""

#: ../../library/os.rst:4718
msgid ""
"The *scheduler* argument must be a tuple containing the (optional) scheduler "
"policy and an instance of :class:`sched_param` with the scheduler "
"parameters. A value of ``None`` in the place of the scheduler policy "
"indicates that is not being provided. This argument is a combination of the "
"C library :c:macro:`!POSIX_SPAWN_SETSCHEDPARAM` and :c:macro:`!"
"POSIX_SPAWN_SETSCHEDULER` flags."
msgstr ""

#: ../../library/os.rst:4725 ../../library/os.rst:4746
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.posix_spawn`` with arguments "
"``path``, ``argv``, ``env``."
msgstr ""
"引数 ``path``, ``argv``, ``env`` を指定して :ref:`監査イベント <auditing>` "
"``os.posix_spawn`` を送出します。 "

#: ../../library/os.rst:4729
msgid ""
"*env* parameter accepts ``None``. ``os.POSIX_SPAWN_CLOSEFROM`` is available "
"on platforms where :c:func:`!posix_spawn_file_actions_addclosefrom_np` "
"exists."
msgstr ""

#: ../../library/os.rst:4740
msgid "Wraps the :c:func:`!posix_spawnp` C library API for use from Python."
msgstr ""

#: ../../library/os.rst:4742
msgid ""
"Similar to :func:`posix_spawn` except that the system searches for the "
"*executable* file in the list of directories specified by the :envvar:`PATH` "
"environment variable (in the same way as for ``execvp(3)``)."
msgstr ""

#: ../../library/os.rst:4752
msgid "See :func:`posix_spawn` documentation."
msgstr ""

#: ../../library/os.rst:4758
msgid ""
"Register callables to be executed when a new child process is forked using :"
"func:`os.fork` or similar process cloning APIs. The parameters are optional "
"and keyword-only. Each specifies a different call point."
msgstr ""

#: ../../library/os.rst:4763
msgid "*before* is a function called before forking a child process."
msgstr ""

#: ../../library/os.rst:4764
msgid ""
"*after_in_parent* is a function called from the parent process after forking "
"a child process."
msgstr ""

#: ../../library/os.rst:4766
msgid "*after_in_child* is a function called from the child process."
msgstr ""

#: ../../library/os.rst:4768
msgid ""
"These calls are only made if control is expected to return to the Python "
"interpreter.  A typical :mod:`subprocess` launch will not trigger them as "
"the child is not going to re-enter the interpreter."
msgstr ""

#: ../../library/os.rst:4772
msgid ""
"Functions registered for execution before forking are called in reverse "
"registration order.  Functions registered for execution after forking "
"(either in the parent or in the child) are called in registration order."
msgstr ""

#: ../../library/os.rst:4777
msgid ""
"Note that :c:func:`fork` calls made by third-party C code may not call those "
"functions, unless it explicitly calls :c:func:`PyOS_BeforeFork`, :c:func:"
"`PyOS_AfterFork_Parent` and :c:func:`PyOS_AfterFork_Child`."
msgstr ""

#: ../../library/os.rst:4781
msgid "There is no way to unregister a function."
msgstr ""

#: ../../library/os.rst:4797
msgid "Execute the program *path* in a new process."
msgstr "新たなプロセス内でプログラム *path* を実行します。"

#: ../../library/os.rst:4799
msgid ""
"(Note that the :mod:`subprocess` module provides more powerful facilities "
"for spawning new processes and retrieving their results; using that module "
"is preferable to using these functions.  Check especially the :ref:"
"`subprocess-replacements` section.)"
msgstr ""
"(:mod:`subprocess` モジュールが、新しいプロセスを実行して結果を取得するため"
"の、より強力な機能を提供しています。この関数の代わりに :mod:`subprocess` モ"
"ジュールを利用することが推奨されています。 :mod:`subprocess` モジュールのド"
"キュメントの、 :ref:`subprocess-replacements` セクションを参照してください )"

#: ../../library/os.rst:4804
msgid ""
"If *mode* is :const:`P_NOWAIT`, this function returns the process id of the "
"new process; if *mode* is :const:`P_WAIT`, returns the process's exit code "
"if it exits normally, or ``-signal``, where *signal* is the signal that "
"killed the process.  On Windows, the process id will actually be the process "
"handle, so can be used with the :func:`waitpid` function."
msgstr ""
"*mode* が :const:`P_NOWAIT` の場合、この関数は新たなプロセスのプロセス ID を"
"返します ; *mode* が :const:`P_WAIT` の場合、子プロセスが正常に終了するとその"
"終了コードが返ります。そうでない場合にはプロセスを kill したシグナル "
"*signal* に対して ``-signal`` が返ります。 Windows では、プロセス ID は実際に"
"はプロセスハンドル値になるので、 :func:`waitpid` 関数で使えます。"

#: ../../library/os.rst:4810
msgid ""
"Note on VxWorks, this function doesn't return ``-signal`` when the new "
"process is killed. Instead it raises OSError exception."
msgstr ""

#: ../../library/os.rst:4813
msgid ""
"The \"l\" and \"v\" variants of the :func:`spawn\\* <spawnl>` functions "
"differ in how command-line arguments are passed.  The \"l\" variants are "
"perhaps the easiest to work with if the number of parameters is fixed when "
"the code is written; the individual parameters simply become additional "
"parameters to the :func:`!spawnl\\*` functions.  The \"v\" variants are good "
"when the number of parameters is variable, with the arguments being passed "
"in a list or tuple as the *args* parameter.  In either case, the arguments "
"to the child process must start with the name of the command being run."
msgstr ""

#: ../../library/os.rst:4822
msgid ""
"The variants which include a second \"p\" near the end (:func:`spawnlp`, :"
"func:`spawnlpe`, :func:`spawnvp`, and :func:`spawnvpe`) will use the :envvar:"
"`PATH` environment variable to locate the program *file*.  When the "
"environment is being replaced (using one of the :func:`spawn\\*e <spawnl>` "
"variants, discussed in the next paragraph), the new environment is used as "
"the source of the :envvar:`PATH` variable.  The other variants, :func:"
"`spawnl`, :func:`spawnle`, :func:`spawnv`, and :func:`spawnve`, will not use "
"the :envvar:`PATH` variable to locate the executable; *path* must contain an "
"appropriate absolute or relative path."
msgstr ""
"末尾近くに \"p\" をもつ型 (:func:`spawnlp`, :func:`spawnlpe`, :func:"
"`spawnvp`, :func:`spawnvpe`) は、プログラム *file* を探すために環境変数 :"
"envvar:`PATH` を利用します。環境変数が ( 次の段で述べる :func:`spawn\\*e "
"<spawnl>` 型関数で ) 置き換えられる場合、環境変数は :envvar:`PATH` を決定する"
"上の情報源として使われます。その他の型、 :func:`spawnl`, :func:`spawnle`, :"
"func:`spawnv`, および :func:`spawnve` では、実行コードを探すために :envvar:"
"`PATH` を使いません。 *path* には適切に設定された絶対パスまたは相対パスが入っ"
"ていなくてはなりません。"

#: ../../library/os.rst:4832
msgid ""
"For :func:`spawnle`, :func:`spawnlpe`, :func:`spawnve`, and :func:`spawnvpe` "
"(note that these all end in \"e\"), the *env* parameter must be a mapping "
"which is used to define the environment variables for the new process (they "
"are used instead of the current process' environment); the functions :func:"
"`spawnl`, :func:`spawnlp`, :func:`spawnv`, and :func:`spawnvp` all cause the "
"new process to inherit the environment of the current process.  Note that "
"keys and values in the *env* dictionary must be strings; invalid keys or "
"values will cause the function to fail, with a return value of ``127``."
msgstr ""
":func:`spawnle`, :func:`spawnlpe`, :func:`spawnve`, および :func:`spawnvpe` "
"(すべて末尾に \"e\" がついています) では、 *env* 引数は新たなプロセスで利用さ"
"れる環境変数を定義するためのマップ型でなくてはなりません ; :func:"
"`spawnl` 、 :func:`spawnlp` 、 :func:`spawnv` 、および :func:`spawnvp` では、"
"すべて新たなプロセスは現在のプロセスの環境を引き継ぎます。 *env* 辞書のキーと"
"値はすべて文字列である必要があります。不正なキーや値を与えると関数が失敗し、 "
"``127`` を返します。"

#: ../../library/os.rst:4841
msgid ""
"As an example, the following calls to :func:`spawnlp` and :func:`spawnvpe` "
"are equivalent::"
msgstr ""
"例えば、以下の :func:`spawnlp` および :func:`spawnvpe` 呼び出しは等価です ::"

#: ../../library/os.rst:4844
msgid ""
"import os\n"
"os.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')\n"
"\n"
"L = ['cp', 'index.html', '/dev/null']\n"
"os.spawnvpe(os.P_WAIT, 'cp', L, os.environ)"
msgstr ""

#: ../../library/os.rst:4850
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.spawn`` with arguments "
"``mode``, ``path``, ``args``, ``env``."
msgstr ""
"引数 ``mode``, ``path``, ``args``, ``env`` を指定して :ref:`監査イベント "
"<auditing>` ``os.spawn`` を送出します。 "

#: ../../library/os.rst:4854
msgid ""
":func:`spawnlp`, :func:`spawnlpe`, :func:`spawnvp` and :func:`spawnvpe` are "
"not available on Windows.  :func:`spawnle` and :func:`spawnve` are not "
"thread-safe on Windows; we advise you to use the :mod:`subprocess` module "
"instead."
msgstr ""
":func:`spawnlp` 、 :func:`spawnlpe` 、 :func:`spawnvp` 、および :func:"
"`spawnvpe` は Windows では利用できません。 :func:`spawnle` および :func:"
"`spawnve` は Windows においてスレッドセーフではありません ; 代わりに :mod:"
"`subprocess` モジュールの利用を推奨します。"

#: ../../library/os.rst:4866
msgid ""
"Possible values for the *mode* parameter to the :func:`spawn\\* <spawnl>` "
"family of functions.  If either of these values is given, the :func:"
"`spawn\\* <spawnl>` functions will return as soon as the new process has "
"been created, with the process id as the return value."
msgstr ""

#: ../../library/os.rst:4876
msgid ""
"Possible value for the *mode* parameter to the :func:`spawn\\* <spawnl>` "
"family of functions.  If this is given as *mode*, the :func:`spawn\\* "
"<spawnl>` functions will not return until the new process has run to "
"completion and will return the exit code of the process the run is "
"successful, or ``-signal`` if a signal kills the process."
msgstr ""

#: ../../library/os.rst:4888
msgid ""
"Possible values for the *mode* parameter to the :func:`spawn\\* <spawnl>` "
"family of functions.  These are less portable than those listed above. :"
"const:`P_DETACH` is similar to :const:`P_NOWAIT`, but the new process is "
"detached from the console of the calling process. If :const:`P_OVERLAY` is "
"used, the current process will be replaced; the :func:`spawn\\* <spawnl>` "
"function will not return."
msgstr ""
":func:`spawn\\* <spawnl>` 関数ファミリに対する *mode* パラメタとして取れる値"
"です。これらの値は上の値よりもやや可搬性において劣っています。 :const:"
"`P_DETACH` は :const:`P_NOWAIT` に似ていますが、新たなプロセスは呼び出しプロ"
"セスのコンソールから切り離され (detach) ます。 :const:`P_OVERLAY` が使われた"
"場合、現在のプロセスは置き換えられます。したがって :func:`spawn\\* <spawnl>` "
"は返りません。"

#: ../../library/os.rst:4899
msgid "Start a file with its associated application."
msgstr "ファイルを関連付けられたアプリケーションを使ってスタートします。"

#: ../../library/os.rst:4901
msgid ""
"When *operation* is not specified, this acts like double-clicking the file "
"in Windows Explorer, or giving the file name as an argument to the :program:"
"`start` command from the interactive command shell: the file is opened with "
"whatever application (if any) its extension is associated."
msgstr ""

#: ../../library/os.rst:4906
msgid ""
"When another *operation* is given, it must be a \"command verb\" that "
"specifies what should be done with the file. Common verbs documented by "
"Microsoft are ``'open'``, ``'print'`` and  ``'edit'`` (to be used on files) "
"as well as ``'explore'`` and ``'find'`` (to be used on directories)."
msgstr ""

#: ../../library/os.rst:4911
msgid ""
"When launching an application, specify *arguments* to be passed as a single "
"string. This argument may have no effect when using this function to launch "
"a document."
msgstr ""

#: ../../library/os.rst:4915
msgid ""
"The default working directory is inherited, but may be overridden by the "
"*cwd* argument. This should be an absolute path. A relative *path* will be "
"resolved against this argument."
msgstr ""

#: ../../library/os.rst:4919
msgid ""
"Use *show_cmd* to override the default window style. Whether this has any "
"effect will depend on the application being launched. Values are integers as "
"supported by the Win32 :c:func:`!ShellExecute` function."
msgstr ""

#: ../../library/os.rst:4923
msgid ""
":func:`startfile` returns as soon as the associated application is launched. "
"There is no option to wait for the application to close, and no way to "
"retrieve the application's exit status.  The *path* parameter is relative to "
"the current directory or *cwd*.  If you want to use an absolute path, make "
"sure the first character is not a slash (``'/'``)  Use :mod:`pathlib` or "
"the :func:`os.path.normpath` function to ensure that paths are properly "
"encoded for Win32."
msgstr ""

#: ../../library/os.rst:4931
msgid ""
"To reduce interpreter startup overhead, the Win32 :c:func:`!ShellExecute` "
"function is not resolved until this function is first called.  If the "
"function cannot be resolved, :exc:`NotImplementedError` will be raised."
msgstr ""

#: ../../library/os.rst:4935
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.startfile`` with arguments "
"``path``, ``operation``."
msgstr ""
"引数 ``path``, ``operation`` を指定して :ref:`監査イベント <auditing>` ``os."
"startfile`` を送出します。 "

#: ../../library/os.rst:4937
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.startfile/2`` with arguments "
"``path``, ``operation``, ``arguments``, ``cwd``, ``show_cmd``."
msgstr ""

#: ../../library/os.rst:4941
msgid ""
"Added the *arguments*, *cwd* and *show_cmd* arguments, and the ``os."
"startfile/2`` audit event."
msgstr ""

#: ../../library/os.rst:4948
msgid ""
"Execute the command (a string) in a subshell.  This is implemented by "
"calling the Standard C function :c:func:`system`, and has the same "
"limitations. Changes to :data:`sys.stdin`, etc. are not reflected in the "
"environment of the executed command. If *command* generates any output, it "
"will be sent to the interpreter standard output stream. The C standard does "
"not specify the meaning of the return value of the C function, so the return "
"value of the Python function is system-dependent."
msgstr ""

#: ../../library/os.rst:4956
msgid ""
"On Unix, the return value is the exit status of the process encoded in the "
"format specified for :func:`wait`."
msgstr ""

#: ../../library/os.rst:4959
msgid ""
"On Windows, the return value is that returned by the system shell after "
"running *command*.  The shell is given by the Windows environment variable :"
"envvar:`COMSPEC`: it is usually :program:`cmd.exe`, which returns the exit "
"status of the command run; on systems using a non-native shell, consult your "
"shell documentation."
msgstr ""
"Windows では、返り値は *command* を実行した後にシステムシェルから返される値で"
"す。シェルは通常 :program:`cmd.exe` であり、返す値は実行したコマンドの終了ス"
"テータスになります。シェルの種類は Windows の環境変数 :envvar:`COMSPEC`: に指"
"定されています。ネイティブでないシェルを使用している場合は、そのドキュメント"
"を参照してください。"

#: ../../library/os.rst:4965
msgid ""
"The :mod:`subprocess` module provides more powerful facilities for spawning "
"new processes and retrieving their results; using that module is preferable "
"to using this function.  See the :ref:`subprocess-replacements` section in "
"the :mod:`subprocess` documentation for some helpful recipes."
msgstr ""
":mod:`subprocess` モジュールは、新しいプロセスを実行して結果を取得するための"
"より強力な機能を提供しています。この関数の代わりに :mod:`subprocess` モジュー"
"ルを利用することが推奨されています。 :mod:`subprocess` モジュールのドキュメン"
"トの :ref:`subprocess-replacements` 節のレシピを参考にして下さい。"

#: ../../library/os.rst:4970
msgid ""
"On Unix, :func:`waitstatus_to_exitcode` can be used to convert the result "
"(exit status) into an exit code. On Windows, the result is directly the exit "
"code."
msgstr ""

#: ../../library/os.rst:4974
msgid ""
"Raises an :ref:`auditing event <auditing>` ``os.system`` with argument "
"``command``."
msgstr ""
"引数 ``command`` を指定して :ref:`監査イベント <auditing>` ``os.system`` を送"
"出します。 "

#: ../../library/os.rst:4981
msgid ""
"Returns the current global process times. The return value is an object with "
"five attributes:"
msgstr ""
"現在の全体的なプロセス時間を返します。返り値は 5 個の属性を持つオブジェクトに"
"なります:"

#: ../../library/os.rst:4984
msgid ":attr:`!user` - user time"
msgstr ""

#: ../../library/os.rst:4985
msgid ":attr:`!system` - system time"
msgstr ""

#: ../../library/os.rst:4986
msgid ":attr:`!children_user` - user time of all child processes"
msgstr ""

#: ../../library/os.rst:4987
msgid ":attr:`!children_system` - system time of all child processes"
msgstr ""

#: ../../library/os.rst:4988
msgid ":attr:`!elapsed` - elapsed real time since a fixed point in the past"
msgstr ""

#: ../../library/os.rst:4990
msgid ""
"For backwards compatibility, this object also behaves like a five-tuple "
"containing :attr:`!user`, :attr:`!system`, :attr:`!children_user`, :attr:`!"
"children_system`, and :attr:`!elapsed` in that order."
msgstr ""
"後方互換性のため、このオブジェクトは 5 個のアイテム :attr:`!user` 、 :attr:`!"
"system` 、 :attr:`!children_user` 、 :attr:`!children_system` 、および :attr:"
"`!elapsed` を持つタプルのようにも振る舞います。"

#: ../../library/os.rst:4994
msgid ""
"See the Unix manual page :manpage:`times(2)` and `times(3) <https://man."
"freebsd.org/cgi/man.cgi?time(3)>`_ manual page on Unix or `the "
"GetProcessTimes MSDN <https://docs.microsoft.com/windows/win32/api/"
"processthreadsapi/nf-processthreadsapi-getprocesstimes>`_ on Windows. On "
"Windows, only :attr:`!user` and :attr:`!system` are known; the other "
"attributes are zero."
msgstr ""

#: ../../library/os.rst:5008
msgid ""
"Wait for completion of a child process, and return a tuple containing its "
"pid and exit status indication: a 16-bit number, whose low byte is the "
"signal number that killed the process, and whose high byte is the exit "
"status (if the signal number is zero); the high bit of the low byte is set "
"if a core file was produced."
msgstr ""
"子プロセスの実行完了を待機し、子プロセスの pid と終了コードインジケーター "
"--- 16 ビットの数値で、下位バイトがプロセスを kill したシグナル番号、上位バイ"
"トが終了ステータス ( シグナル番号がゼロの場合 ) --- の入ったタプルを返しま"
"す ; コアダンプファイルが生成された場合、下位バイトの最上桁ビットが立てられま"
"す。"

#: ../../library/os.rst:5014
msgid ""
"If there are no children that could be waited for, :exc:`ChildProcessError` "
"is raised."
msgstr ""

#: ../../library/os.rst:5017 ../../library/os.rst:5092
msgid ""
":func:`waitstatus_to_exitcode` can be used to convert the exit status into "
"an exit code."
msgstr ""
"戻り値の終了ステータスを終了コードに変換するために :func:"
"`waitstatus_to_exitcode` を使うことができます。"

#: ../../library/os.rst:5024
msgid ""
"The other :func:`!wait*` functions documented below can be used to wait for "
"the completion of a specific child process and have more options. :func:"
"`waitpid` is the only one also available on Windows."
msgstr ""

#: ../../library/os.rst:5031
msgid "Wait for the completion of a child process."
msgstr ""

#: ../../library/os.rst:5033
msgid ""
"*idtype* can be :data:`P_PID`, :data:`P_PGID`, :data:`P_ALL`, or (on Linux) :"
"data:`P_PIDFD`. The interpretation of *id* depends on it; see their "
"individual descriptions."
msgstr ""

#: ../../library/os.rst:5036
msgid ""
"*options* is an OR combination of flags.  At least one of :data:`WEXITED`, :"
"data:`WSTOPPED` or :data:`WCONTINUED` is required; :data:`WNOHANG` and :data:"
"`WNOWAIT` are additional optional flags."
msgstr ""

#: ../../library/os.rst:5040
msgid ""
"The return value is an object representing the data contained in the :c:type:"
"`siginfo_t` structure with the following attributes:"
msgstr ""

#: ../../library/os.rst:5043
msgid ":attr:`!si_pid` (process ID)"
msgstr ""

#: ../../library/os.rst:5044
msgid ":attr:`!si_uid` (real user ID of the child)"
msgstr ""

#: ../../library/os.rst:5045
msgid ":attr:`!si_signo` (always :const:`~signal.SIGCHLD`)"
msgstr ""

#: ../../library/os.rst:5046
msgid ""
":attr:`!si_status` (the exit status or signal number, depending on :attr:`!"
"si_code`)"
msgstr ""

#: ../../library/os.rst:5047
msgid ":attr:`!si_code` (see :data:`CLD_EXITED` for possible values)"
msgstr ""

#: ../../library/os.rst:5049
msgid ""
"If :data:`WNOHANG` is specified and there are no matching children in the "
"requested state, ``None`` is returned. Otherwise, if there are no matching "
"children that could be waited for, :exc:`ChildProcessError` is raised."
msgstr ""

#: ../../library/os.rst:5058
msgid "This function is now available on macOS as well."
msgstr ""

#: ../../library/os.rst:5064
msgid "The details of this function differ on Unix and Windows."
msgstr "この関数の詳細は Unix と Windows で異なります。"

#: ../../library/os.rst:5066
msgid ""
"On Unix: Wait for completion of a child process given by process id *pid*, "
"and return a tuple containing its process id and exit status indication "
"(encoded as for :func:`wait`).  The semantics of the call are affected by "
"the value of the integer *options*, which should be ``0`` for normal "
"operation."
msgstr ""
"Unix の場合 : プロセス id *pid* で与えられた子プロセスの完了を待機し、子プロ"
"セスのプロセス id と (:func:`wait` と同様にコード化された ) 終了ステータスイ"
"ンジケーターからなるタプルを返します。この関数の動作は *options* によって変わ"
"ります。通常の操作では ``0`` にします。"

#: ../../library/os.rst:5071
msgid ""
"If *pid* is greater than ``0``, :func:`waitpid` requests status information "
"for that specific process.  If *pid* is ``0``, the request is for the status "
"of any child in the process group of the current process.  If *pid* is "
"``-1``, the request pertains to any child of the current process.  If *pid* "
"is less than ``-1``, status is requested for any process in the process "
"group ``-pid`` (the absolute value of *pid*)."
msgstr ""
"*pid* が ``0`` よりも大きい場合、 :func:`waitpid` は特定のプロセスのステータ"
"ス情報を要求します。 *pid* が ``0`` の場合、現在のプロセスグループ内の任意の"
"子プロセスの状態に対する要求です。 *pid* が ``-1`` の場合、現在のプロセスの任"
"意の子プロセスに対する要求です。 *pid* が ``-1`` よりも小さい場合、プロセスグ"
"ループ ``-pid`` ( すなわち *pid* の絶対値 ) 内の任意のプロセスに対する要求で"
"す。"

#: ../../library/os.rst:5078
msgid ""
"*options* is an OR combination of flags.  If it contains :data:`WNOHANG` and "
"there are no matching children in the requested state, ``(0, 0)`` is "
"returned.  Otherwise, if there are no matching children that could be waited "
"for, :exc:`ChildProcessError` is raised.  Other options that can be used "
"are :data:`WUNTRACED` and :data:`WCONTINUED`."
msgstr ""

#: ../../library/os.rst:5084
msgid ""
"On Windows: Wait for completion of a process given by process handle *pid*, "
"and return a tuple containing *pid*, and its exit status shifted left by 8 "
"bits (shifting makes cross-platform use of the function easier). A *pid* "
"less than or equal to ``0`` has no special meaning on Windows, and raises an "
"exception. The value of integer *options* has no effect. *pid* can refer to "
"any process whose id is known, not necessarily a child process. The :func:"
"`spawn\\* <spawnl>` functions called with :const:`P_NOWAIT` return suitable "
"process handles."
msgstr ""
"Windows では、プロセスハンドル *pid* を指定してプロセスの終了を待って、 "
"*pid* と、終了ステータスを 8bit 左シフトした値のタプルを返します。 ( シフト"
"は、この関数をクロスプラットフォームで利用しやすくするために行われます ) "
"``0`` 以下の *pid* は Windows では特別な意味を持っておらず、例外を発生させま"
"す。 *options* の値は効果がありません。 *pid* は、子プロセスで無くても、プロ"
"セス ID を知っているどんなプロセスでも参照することが可能です。 :func:"
"`spawn\\* <spawnl>` 関数を :const:`P_NOWAIT` と共に呼び出した場合、適切なプロ"
"セスハンドルが返されます。"

#: ../../library/os.rst:5105
msgid ""
"Similar to :func:`waitpid`, except no process id argument is given and a 3-"
"element tuple containing the child's process id, exit status indication, and "
"resource usage information is returned.  Refer to :func:`resource.getrusage` "
"for details on resource usage information.  The *options* argument is the "
"same as that provided to :func:`waitpid` and :func:`wait4`."
msgstr ""
":func:`waitpid` に似ていますが、プロセス id を引数に取らず、子プロセス id 、"
"終了ステータスインジケータ、リソース使用情報の 3 要素からなるタプルを返しま"
"す。リソース使用情報の詳しい情報は :func:`resource.getrusage` を参照してくだ"
"さい。*options* 引数は :func:`waitpid` および :func:`wait4` に渡されるものと"
"同じです。"

#: ../../library/os.rst:5112 ../../library/os.rst:5126
msgid ""
":func:`waitstatus_to_exitcode` can be used to convert the exit status into "
"an exitcode."
msgstr ""
"戻り値の終了ステータスを終了コードに変換するために :func:"
"`waitstatus_to_exitcode` を使うことができます。"

#: ../../library/os.rst:5120
msgid ""
"Similar to :func:`waitpid`, except a 3-element tuple, containing the child's "
"process id, exit status indication, and resource usage information is "
"returned.  Refer to :func:`resource.getrusage` for details on resource usage "
"information.  The arguments to :func:`wait4` are the same as those provided "
"to :func:`waitpid`."
msgstr ""
":func:`waitpid` に似ていますが、子プロセス id 、終了ステータスインジケータ、"
"リソース使用情報の 3 要素からなるタプルを返します。リソース使用情報の詳しい情"
"報は :func:`resource.getrusage` を参照してください。 :func:`wait4` の引数は :"
"func:`waitpid` に与えられるものと同じです。"

#: ../../library/os.rst:5137
msgid ""
"These are the possible values for *idtype* in :func:`waitid`. They affect "
"how *id* is interpreted:"
msgstr ""
":func:`waitid` の *idtype* に指定できる値です。これらは *id* がどう解釈される"
"かに影響します:"

#: ../../library/os.rst:5140
msgid ":data:`!P_PID` - wait for the child whose PID is *id*."
msgstr ""

#: ../../library/os.rst:5141
msgid ":data:`!P_PGID` - wait for any child whose progress group ID is *id*."
msgstr ""

#: ../../library/os.rst:5142
msgid ":data:`!P_ALL` - wait for any child; *id* is ignored."
msgstr ""

#: ../../library/os.rst:5143
msgid ""
":data:`!P_PIDFD` - wait for the child identified by the file descriptor *id* "
"(a process file descriptor created with :func:`pidfd_open`)."
msgstr ""

#: ../../library/os.rst:5148
msgid ":data:`!P_PIDFD` is only available on Linux >= 5.4."
msgstr ""

#: ../../library/os.rst:5151
msgid "The :data:`!P_PIDFD` constant."
msgstr ""

#: ../../library/os.rst:5157
msgid ""
"This *options* flag for :func:`waitpid`, :func:`wait3`, :func:`wait4`, and :"
"func:`waitid` causes child processes to be reported if they have been "
"continued from a job control stop since they were last reported."
msgstr ""

#: ../../library/os.rst:5166
msgid ""
"This *options* flag for :func:`waitid` causes child processes that have "
"terminated to be reported."
msgstr ""

#: ../../library/os.rst:5169
msgid ""
"The other ``wait*`` functions always report children that have terminated, "
"so this option is not available for them."
msgstr ""

#: ../../library/os.rst:5179
msgid ""
"This *options* flag for :func:`waitid` causes child processes that have been "
"stopped by the delivery of a signal to be reported."
msgstr ""

#: ../../library/os.rst:5182 ../../library/os.rst:5214
msgid "This option is not available for the other ``wait*`` functions."
msgstr ""

#: ../../library/os.rst:5191
msgid ""
"This *options* flag for :func:`waitpid`, :func:`wait3`, and :func:`wait4` "
"causes child processes to also be reported if they have been stopped but "
"their current state has not been reported since they were stopped."
msgstr ""

#: ../../library/os.rst:5195
msgid "This option is not available for :func:`waitid`."
msgstr ""

#: ../../library/os.rst:5202
msgid ""
"This *options* flag causes :func:`waitpid`, :func:`wait3`, :func:`wait4`, "
"and :func:`waitid` to return right away if no child process status is "
"available immediately."
msgstr ""

#: ../../library/os.rst:5211
msgid ""
"This *options* flag causes :func:`waitid` to leave the child in a waitable "
"state, so that a later :func:`!wait*` call can be used to retrieve the child "
"status information again."
msgstr ""

#: ../../library/os.rst:5226
msgid ""
"These are the possible values for :attr:`!si_code` in the result returned "
"by :func:`waitid`."
msgstr ":func:`waitid` の返り値の :attr:`!si_code` に設定され得る値です。"

#: ../../library/os.rst:5233
msgid "Added :data:`CLD_KILLED` and :data:`CLD_STOPPED` values."
msgstr ":data:`CLD_KILLED` と :data:`CLD_STOPPED` が追加されました。"

#: ../../library/os.rst:5239
msgid "Convert a wait status to an exit code."
msgstr "待機ステータスを終了コードに変換します。"

#: ../../library/os.rst:5241
msgid "On Unix:"
msgstr "Unix の場合:"

#: ../../library/os.rst:5243
msgid ""
"If the process exited normally (if ``WIFEXITED(status)`` is true), return "
"the process exit status (return ``WEXITSTATUS(status)``): result greater "
"than or equal to 0."
msgstr ""
"子プロセスが正常終了した場合 (``WIFEXITED(status)``が真の場合)、子プロセスの"
"終了ステータス (``WEXITSTATUS(status)``) を返します: 戻り値は0または正の整数"
"です。"

#: ../../library/os.rst:5246
msgid ""
"If the process was terminated by a signal (if ``WIFSIGNALED(status)`` is "
"true), return ``-signum`` where *signum* is the number of the signal that "
"caused the process to terminate (return ``-WTERMSIG(status)``): result less "
"than 0."
msgstr ""
"子プロセスがシグナルによって終了した場合 (``WIFSIGNALED(status)``が真の場"
"合)、子プロセスを終了したシグナルの番号に負符号をつけた ``-signum`` (``-"
"WTERMSIG(status)``) を返します: 戻り値は負の整数です。"

#: ../../library/os.rst:5250
msgid "Otherwise, raise a :exc:`ValueError`."
msgstr "それ以外の場合、 :exc:`ValueError` 例外を送出します。"

#: ../../library/os.rst:5252
msgid "On Windows, return *status* shifted right by 8 bits."
msgstr "Windows の場合、 *status* を8ビット右にシフトした値を返します。"

#: ../../library/os.rst:5254
msgid ""
"On Unix, if the process is being traced or if :func:`waitpid` was called "
"with :data:`WUNTRACED` option, the caller must first check if "
"``WIFSTOPPED(status)`` is true. This function must not be called if "
"``WIFSTOPPED(status)`` is true."
msgstr ""
"Unix の場合、プロセスがトレースされているか :func:`waitpid` が :data:"
"`WUNTRACED` オプションをつけて実行されている場合、呼び出しもとは最初に "
"``WIFSTOPPED(status)`` が真であるかを確認しなければなりません。この関数は "
"``WIFSTOPPED(status)`` が真の場合呼び出してはいけません。"

#: ../../library/os.rst:5261
msgid ""
":func:`WIFEXITED`, :func:`WEXITSTATUS`, :func:`WIFSIGNALED`, :func:"
"`WTERMSIG`, :func:`WIFSTOPPED`, :func:`WSTOPSIG` functions."
msgstr ""
":func:`WIFEXITED`, :func:`WEXITSTATUS`, :func:`WIFSIGNALED`, :func:"
"`WTERMSIG`, :func:`WIFSTOPPED`, :func:`WSTOPSIG` 関数。"

#: ../../library/os.rst:5269
msgid ""
"The following functions take a process status code as returned by :func:"
"`system`, :func:`wait`, or :func:`waitpid` as a parameter.  They may be used "
"to determine the disposition of a process."
msgstr ""
"以下の関数は :func:`system` 、 :func:`wait` 、あるいは :func:`waitpid` が返す"
"プロセス状態コードを引数にとります。これらの関数はプロセスの配置を決めるため"
"に利用できます。"

#: ../../library/os.rst:5275
msgid ""
"Return ``True`` if a core dump was generated for the process, otherwise "
"return ``False``."
msgstr ""
"プロセスに対してコアダンプが生成されていた場合には ``True`` を、それ以外の場"
"合は ``False`` を返します。"

#: ../../library/os.rst:5278 ../../library/os.rst:5344
msgid "This function should be employed only if :func:`WIFSIGNALED` is true."
msgstr "この関数は :func:`WIFSIGNALED` が真である場合のみ使用されるべきです。"

#: ../../library/os.rst:5285
msgid ""
"Return ``True`` if a stopped child has been resumed by delivery of :const:"
"`~signal.SIGCONT` (if the process has been continued from a job control "
"stop), otherwise return ``False``."
msgstr ""

#: ../../library/os.rst:5289
msgid "See :data:`WCONTINUED` option."
msgstr ":data:`WCONTINUED` オプションを参照してください。"

#: ../../library/os.rst:5296
msgid ""
"Return ``True`` if the process was stopped by delivery of a signal, "
"otherwise return ``False``."
msgstr ""
"プロセスがシグナルの送信によって中断させられた場合に ``True`` を返します。そ"
"れ以外の場合は ``False`` を返します。"

#: ../../library/os.rst:5299
msgid ""
":func:`WIFSTOPPED` only returns ``True`` if the :func:`waitpid` call was "
"done using :data:`WUNTRACED` option or when the process is being traced "
"(see :manpage:`ptrace(2)`)."
msgstr ""
":func:`WIFSTOPPED` は :func:`waitpid` が :data:`WUNTRACED` オプションを使って"
"実行されたか、もしくはプロセスがトレースされている場合 (:manpage:`ptrace(2)` "
"を参照してください) にのみ ``True`` を返します。"

#: ../../library/os.rst:5307
msgid ""
"Return ``True`` if the process was terminated by a signal, otherwise return "
"``False``."
msgstr ""
"プロセスがシグナルによって終了させられた場合に ``True`` を返します。そうでな"
"い場合は ``False`` を返します。"

#: ../../library/os.rst:5315
msgid ""
"Return ``True`` if the process exited terminated normally, that is, by "
"calling ``exit()`` or ``_exit()``, or by returning from ``main()``; "
"otherwise return ``False``."
msgstr ""
"プロセスが正常終了した場合、すなわち ``exit()`` や ``_exit()`` を呼び出した"
"か、もしくは ``main()`` から戻ることにより終了した場合に ``True`` を返しま"
"す。それ以外は ``False`` を返します。"

#: ../../library/os.rst:5324
msgid "Return the process exit status."
msgstr "プロセスの終了ステータスを返します。"

#: ../../library/os.rst:5326
msgid "This function should be employed only if :func:`WIFEXITED` is true."
msgstr "この関数は :func:`WIFEXITED` が真である場合のみ使用されるべきです。"

#: ../../library/os.rst:5333
msgid "Return the signal which caused the process to stop."
msgstr "プロセスを停止させたシグナル番号を返します。"

#: ../../library/os.rst:5335
msgid "This function should be employed only if :func:`WIFSTOPPED` is true."
msgstr "この関数は :func:`WIFSTOPPED` が真である場合のみ使用されるべきです。"

#: ../../library/os.rst:5342
msgid "Return the number of the signal that caused the process to terminate."
msgstr "プロセスを終了させたシグナルの番号を返します。"

#: ../../library/os.rst:5350
msgid "Interface to the scheduler"
msgstr "スケジューラーへのインターフェイス"

#: ../../library/os.rst:5352
msgid ""
"These functions control how a process is allocated CPU time by the operating "
"system. They are only available on some Unix platforms. For more detailed "
"information, consult your Unix manpages."
msgstr ""
"以下の関数は、オペレーティングシステムがプロセスに CPU 時間を割り当てる方法を"
"制御します。これらは一部の Unix プラットフォームでのみ利用可能です。詳しくは "
"Unix マニュアルページを参照してください。"

#: ../../library/os.rst:5358
msgid ""
"The following scheduling policies are exposed if they are supported by the "
"operating system."
msgstr ""
"次のスケジューリングポリシーは、オペレーティングシステムでサポートされていれ"
"ば公開されます。"

#: ../../library/os.rst:5363
msgid "The default scheduling policy."
msgstr "デフォルトのスケジューリングポリシーです。"

#: ../../library/os.rst:5367
msgid ""
"Scheduling policy for CPU-intensive processes that tries to preserve "
"interactivity on the rest of the computer."
msgstr ""
"常にCPUに負荷のかかる (CPU-intensive) プロセス用のポリシーです。他の対話式プ"
"ロセスなどの応答性を維持するよう試みます。"

#: ../../library/os.rst:5372
msgid "Scheduling policy for extremely low priority background tasks."
msgstr ""
"非常に優先度の低いバックグラウンドタスク用のスケジューリングポリシーです。"

#: ../../library/os.rst:5376
msgid "Scheduling policy for sporadic server programs."
msgstr "散発的なサーバープログラム用のスケジューリングポリシーです。"

#: ../../library/os.rst:5380
msgid "A First In First Out scheduling policy."
msgstr "FIFO (First In, First Out) 型のスケジューリングポリシーです。"

#: ../../library/os.rst:5384
msgid "A round-robin scheduling policy."
msgstr "ラウンドロビン型のスケジューリングポリシーです。"

#: ../../library/os.rst:5388
msgid ""
"This flag can be OR'ed with any other scheduling policy. When a process with "
"this flag set forks, its child's scheduling policy and priority are reset to "
"the default."
msgstr ""
"このフラグは他のスケジューリングポリシーとともに論理和指定できます。このフラ"
"グが与えられたプロセスが fork されると、その子プロセスのスケジューリングポリ"
"シーおよび優先度はデフォルトにリセットされます。"

#: ../../library/os.rst:5395
msgid ""
"This class represents tunable scheduling parameters used in :func:"
"`sched_setparam`, :func:`sched_setscheduler`, and :func:`sched_getparam`. It "
"is immutable."
msgstr ""
"このクラスは、:func:`sched_setparam`、:func:`sched_setscheduler`、および :"
"func:`sched_getparam` で使用される、調節可能なスケジューリングパラメーターを"
"表します。これはイミュータブルです。"

#: ../../library/os.rst:5399
msgid "At the moment, there is only one possible parameter:"
msgstr "現在、一つの引数のみ指定できます:"

#: ../../library/os.rst:5403
msgid "The scheduling priority for a scheduling policy."
msgstr "スケジューリングポリシーのスケジューリング優先度です。"

#: ../../library/os.rst:5408
msgid ""
"Get the minimum priority value for *policy*. *policy* is one of the "
"scheduling policy constants above."
msgstr ""
"*policy* の最小優先度値を取得します。*policy* には上記のスケジューリングポリ"
"シー定数の一つを指定します。"

#: ../../library/os.rst:5414
msgid ""
"Get the maximum priority value for *policy*. *policy* is one of the "
"scheduling policy constants above."
msgstr ""
"*policy* の最大優先度値を取得します。*policy* には上記のスケジューリングポリ"
"シー定数の一つを指定します。"

#: ../../library/os.rst:5420
msgid ""
"Set the scheduling policy for the process with PID *pid*. A *pid* of 0 means "
"the calling process. *policy* is one of the scheduling policy constants "
"above. *param* is a :class:`sched_param` instance."
msgstr ""
"PID *pid* のプロセスのスケジューリングポリシーを設定します。*pid* が 0 の場"
"合、呼び出しプロセスを意味します。*policy* には上記のスケジューリングポリシー"
"定数の一つを指定します。*param* は :class:`sched_param` のインスタンスです。"

#: ../../library/os.rst:5427
msgid ""
"Return the scheduling policy for the process with PID *pid*. A *pid* of 0 "
"means the calling process. The result is one of the scheduling policy "
"constants above."
msgstr ""
"PID *pid* のプロセスのスケジューリングポリシーを返します。*pid* が 0 の場合、"
"呼び出しプロセスを意味します。返り値は上記のスケジューリングポリシー定数の一"
"つになります。"

#: ../../library/os.rst:5434
msgid ""
"Set the scheduling parameters for the process with PID *pid*. A *pid* of 0 "
"means the calling process. *param* is a :class:`sched_param` instance."
msgstr ""
"PID *pid* を持つプロセスのスケジューリングパラメータを設定します。 *pid* を "
"0 とした場合呼び出しプロセスを意味します。 *param* は :class:`sched_param` イ"
"ンスタンスです。"

#: ../../library/os.rst:5440
msgid ""
"Return the scheduling parameters as a :class:`sched_param` instance for the "
"process with PID *pid*. A *pid* of 0 means the calling process."
msgstr ""
"PID *pid* のプロセスのスケジューリングパラメーターを :class:`sched_param` の"
"インスタンスとして返します。*pid* が 0 の場合、呼び出しプロセスを意味します。"

#: ../../library/os.rst:5446
msgid ""
"Return the round-robin quantum in seconds for the process with PID *pid*. A "
"*pid* of 0 means the calling process."
msgstr ""
"PID *pid* のプロセスのラウンドロビンクォンタム (秒) を返します。*pid* が 0 の"
"場合、呼び出しプロセスを意味します。"

#: ../../library/os.rst:5452
msgid "Voluntarily relinquish the CPU."
msgstr "自発的に CPU を解放します。"

#: ../../library/os.rst:5457
msgid ""
"Restrict the process with PID *pid* (or the current process if zero) to a "
"set of CPUs.  *mask* is an iterable of integers representing the set of CPUs "
"to which the process should be restricted."
msgstr ""
"PID *pid* のプロセス (0 であれば現在のプロセス) を CPU の集合に制限します。"
"*mask* はプロセスを制限する CPU の集合を表す整数のイテラブルなオブジェクトで"
"す。"

#: ../../library/os.rst:5464
msgid "Return the set of CPUs the process with PID *pid* is restricted to."
msgstr ""

#: ../../library/os.rst:5466
msgid ""
"If *pid* is zero, return the set of CPUs the calling thread of the current "
"process is restricted to."
msgstr ""

#: ../../library/os.rst:5469
msgid "See also the :func:`process_cpu_count` function."
msgstr ""

#: ../../library/os.rst:5475
msgid "Miscellaneous System Information"
msgstr "雑多なシステム情報"

#: ../../library/os.rst:5480
msgid ""
"Return string-valued system configuration values. *name* specifies the "
"configuration value to retrieve; it may be a string which is the name of a "
"defined system value; these names are specified in a number of standards "
"(POSIX, Unix 95, Unix 98, and others).  Some platforms define additional "
"names as well. The names known to the host operating system are given as the "
"keys of the ``confstr_names`` dictionary.  For configuration variables not "
"included in that mapping, passing an integer for *name* is also accepted."
msgstr ""
"システム設定値を文字列で返します。 *name* には取得したい設定名を指定します ; "
"この値は定義済みのシステム値名を表す文字列にすることができます ; 名前は多くの"
"標準 (POSIX.1 、 Unix 95 、 Unix 98 その他 ) で定義されています。ホストオペ"
"レーティングシステムの関知する名前は ``confstr_names`` 辞書のキーとして与えら"
"れています。このマップ型オブジェクトに入っていない設定変数については、 "
"*name* に整数を渡してもかまいません。"

#: ../../library/os.rst:5488
msgid ""
"If the configuration value specified by *name* isn't defined, ``None`` is "
"returned."
msgstr ""
"*name* に指定された設定値が定義されていない場合、 ``None`` を返します。"

#: ../../library/os.rst:5491
msgid ""
"If *name* is a string and is not known, :exc:`ValueError` is raised.  If a "
"specific value for *name* is not supported by the host system, even if it is "
"included in ``confstr_names``, an :exc:`OSError` is raised with :const:"
"`errno.EINVAL` for the error number."
msgstr ""
"*name* が文字列で、かつ不明の場合、 :exc:`ValueError` を送出します。 *name* "
"の指定値がホストシステムでサポートされておらず、 ``confstr_names`` にも入って"
"いない場合、 :const:`errno.EINVAL` をエラー番号として :exc:`OSError` を送出し"
"ます。"

#: ../../library/os.rst:5501
msgid ""
"Dictionary mapping names accepted by :func:`confstr` to the integer values "
"defined for those names by the host operating system. This can be used to "
"determine the set of names known to the system."
msgstr ""
":func:`confstr` が受理する名前を、ホストオペレーティングシステムで定義されて"
"いる整数値に対応付けている辞書です。この辞書はシステムでどの設定名が定義され"
"ているかを決定するために利用できます。"

#: ../../library/os.rst:5510
msgid ""
"Return the number of logical CPUs in the **system**. Returns ``None`` if "
"undetermined."
msgstr ""

#: ../../library/os.rst:5513
msgid ""
"The :func:`process_cpu_count` function can be used to get the number of "
"logical CPUs usable by the calling thread of the **current process**."
msgstr ""

#: ../../library/os.rst:5518
msgid ""
"If :option:`-X cpu_count <-X>` is given or :envvar:`PYTHON_CPU_COUNT` is "
"set, :func:`cpu_count` returns the overridden value *n*."
msgstr ""

#: ../../library/os.rst:5525
msgid ""
"Return the number of processes in the system run queue averaged over the "
"last 1, 5, and 15 minutes or raises :exc:`OSError` if the load average was "
"unobtainable."
msgstr ""
"過去 1 分、 5 分、および 15 分間の、システムの実行キューの平均プロセス数を返"
"します。平均負荷が得られない場合には :exc:`OSError` を送出します。"

#: ../../library/os.rst:5534
msgid ""
"Get the number of logical CPUs usable by the calling thread of the **current "
"process**. Returns ``None`` if undetermined. It can be less than :func:"
"`cpu_count` depending on the CPU affinity."
msgstr ""

#: ../../library/os.rst:5538
msgid ""
"The :func:`cpu_count` function can be used to get the number of logical CPUs "
"in the **system**."
msgstr ""

#: ../../library/os.rst:5541
msgid ""
"If :option:`-X cpu_count <-X>` is given or :envvar:`PYTHON_CPU_COUNT` is "
"set, :func:`process_cpu_count` returns the overridden value *n*."
msgstr ""

#: ../../library/os.rst:5544
msgid "See also the :func:`sched_getaffinity` functions."
msgstr ""

#: ../../library/os.rst:5551
msgid ""
"Return integer-valued system configuration values. If the configuration "
"value specified by *name* isn't defined, ``-1`` is returned.  The comments "
"regarding the *name* parameter for :func:`confstr` apply here as well; the "
"dictionary that provides information on the known names is given by "
"``sysconf_names``."
msgstr ""
"整数値のシステム設定値を返します。 *name* で指定された設定値が定義されていな"
"い場合、 ``-1`` が返されます。 *name* に関するコメントとしては、 :func:"
"`confstr` で述べた内容が同様に当てはまります ; 既知の設定名についての情報を与"
"える辞書は ``sysconf_names`` で与えられています。"

#: ../../library/os.rst:5561
msgid ""
"Dictionary mapping names accepted by :func:`sysconf` to the integer values "
"defined for those names by the host operating system. This can be used to "
"determine the set of names known to the system."
msgstr ""
":func:`sysconf` が受理する名前を、ホストオペレーティングシステムで定義されて"
"いる整数値に対応付けている辞書です。この辞書はシステムでどの設定名が定義され"
"ているかを決定するために利用できます。"

#: ../../library/os.rst:5567
msgid "Add ``'SC_MINSIGSTKSZ'`` name."
msgstr ""

#: ../../library/os.rst:5570
msgid ""
"The following data values are used to support path manipulation operations.  "
"These are defined for all platforms."
msgstr ""
"以下のデータ値はパス名編集操作をサポートするために利用されます。これらの値は"
"すべてのプラットフォームで定義されています。"

#: ../../library/os.rst:5573
msgid ""
"Higher-level operations on pathnames are defined in the :mod:`os.path` "
"module."
msgstr ""
"パス名に対する高水準の操作は :mod:`os.path` モジュールで定義されています。"

#: ../../library/os.rst:5579
msgid ""
"The constant string used by the operating system to refer to the current "
"directory. This is ``'.'`` for Windows and POSIX. Also available via :mod:"
"`os.path`."
msgstr ""
"現在のディレクトリ参照するためにオペレーティングシステムで使われる文字列定数"
"です。 POSIX と Windows では ``'.'`` になります。 :mod:`os.path` からも利用で"
"きます。"

#: ../../library/os.rst:5587
msgid ""
"The constant string used by the operating system to refer to the parent "
"directory. This is ``'..'`` for Windows and POSIX. Also available via :mod:"
"`os.path`."
msgstr ""
"親ディレクトリを参照するためにオペレーティングシステムで使われる文字列定数で"
"す。 POSIX と Windows では ``'..'`` になります。 :mod:`os.path` からも利用で"
"きます。"

#: ../../library/os.rst:5596
msgid ""
"The character used by the operating system to separate pathname components. "
"This is ``'/'`` for POSIX and ``'\\\\'`` for Windows.  Note that knowing "
"this is not sufficient to be able to parse or concatenate pathnames --- use :"
"func:`os.path.split` and :func:`os.path.join` --- but it is occasionally "
"useful. Also available via :mod:`os.path`."
msgstr ""
"パス名を要素に分割するためにオペレーティングシステムで利用されている文字で"
"す。例えば POSIX では ``'/'`` で、 Windows では ``'\\\\'`` です。しかし、この"
"ことを知っているだけではパス名を解析したり、パス名同士を結合したりするには不"
"十分です --- こうした操作には :func:`os.path.split` や :func:`os.path.join` "
"を使用してください --- が、たまに便利なこともあります。 :mod:`os.path` からも"
"利用できます。"

#: ../../library/os.rst:5606
msgid ""
"An alternative character used by the operating system to separate pathname "
"components, or ``None`` if only one separator character exists.  This is set "
"to ``'/'`` on Windows systems where ``sep`` is a backslash. Also available "
"via :mod:`os.path`."
msgstr ""
"文字パス名を要素に分割する際にオペレーティングシステムで利用されるもう一つの"
"文字で、分割文字が一つしかない場合には ``None`` になります。この値は ``sep`` "
"がバックスラッシュとなっている DOS や Windows システムでは ``'/'`` に設定され"
"ています。 :mod:`os.path` からも利用できます。"

#: ../../library/os.rst:5615
msgid ""
"The character which separates the base filename from the extension; for "
"example, the ``'.'`` in :file:`os.py`. Also available via :mod:`os.path`."
msgstr ""
"ベースのファイル名と拡張子を分ける文字です。例えば、 :file:`os.py` であれば "
"``'.'`` です。 :mod:`os.path` からも利用できます。"

#: ../../library/os.rst:5623
msgid ""
"The character conventionally used by the operating system to separate search "
"path components (as in :envvar:`PATH`), such as ``':'`` for POSIX or ``';'`` "
"for Windows. Also available via :mod:`os.path`."
msgstr ""
"(:envvar:`PATH` のような ) サーチパス内の要素を分割するためにオペレーティング"
"システムが慣習的に用いる文字で、 POSIX における ``':'`` や DOS および "
"Windows における ``';'`` に相当します。 :mod:`os.path` からも利用できます。"

#: ../../library/os.rst:5630
msgid ""
"The default search path used by :func:`exec\\*p\\* <execl>` and :func:"
"`spawn\\*p\\* <spawnl>` if the environment doesn't have a ``'PATH'`` key. "
"Also available via :mod:`os.path`."
msgstr ""
":func:`exec\\*p\\* <execl>` や :func:`spawn\\*p\\* <spawnl>` において、環境変"
"数辞書内に ``'PATH'`` キーがない場合に使われる標準設定のサーチパスです。 :"
"mod:`os.path` からも利用できます。"

#: ../../library/os.rst:5637
msgid ""
"The string used to separate (or, rather, terminate) lines on the current "
"platform.  This may be a single character, such as ``'\\n'`` for POSIX, or "
"multiple characters, for example, ``'\\r\\n'`` for Windows. Do not use *os."
"linesep* as a line terminator when writing files opened in text mode (the "
"default); use a single ``'\\n'`` instead, on all platforms."
msgstr ""
"現在のプラットフォーム上で行を分割 ( あるいは終端 ) するために用いられている"
"文字列です。この値は例えば POSIX での ``'\\n'`` や Mac OS での ``'\\r'`` のよ"
"うに、単一の文字にもなりますし、例えば Windows での ``'\\r\\n'`` のように複数"
"の文字列にもなります。テキストモードで開いたファイルに書き込む時には、 *os."
"linesep* を利用しないでください。すべてのプラットフォームで、単一の "
"``'\\n'`` を使用してください。"

#: ../../library/os.rst:5646
msgid ""
"The file path of the null device. For example: ``'/dev/null'`` for POSIX, "
"``'nul'`` for Windows.  Also available via :mod:`os.path`."
msgstr ""
"ヌルデバイスのファイルパスです。例えば POSIX では ``'/dev/null'`` で、 "
"Windows では ``'nul'`` です。この値は :mod:`os.path` からも利用できます。"

#: ../../library/os.rst:5657
msgid ""
"Flags for use with the :func:`~sys.setdlopenflags` and :func:`~sys."
"getdlopenflags` functions.  See the Unix manual page :manpage:`dlopen(3)` "
"for what the different flags mean."
msgstr ""
":func:`~sys.setdlopenflags` 関数と :func:`~sys.getdlopenflags` 関数と一緒に使"
"用するフラグ。それぞれのフラグの意味については、Unix マニュアルの :manpage:"
"`dlopen(3)` ページを参照してください。"

#: ../../library/os.rst:5665
msgid "Random numbers"
msgstr "乱数"

#: ../../library/os.rst:5670
msgid ""
"Get up to *size* random bytes. The function can return less bytes than "
"requested."
msgstr ""
"最大で *size* バイトからなるランダムなバイト列を返します。この関数は要求され"
"たバイト数よりも少ないバイト数を返すことがあります。"

#: ../../library/os.rst:5673
msgid ""
"These bytes can be used to seed user-space random number generators or for "
"cryptographic purposes."
msgstr ""
"バイト列は、ユーザー空間の乱数生成器や暗号目的ののシードとして利用できます。"

#: ../../library/os.rst:5676
msgid ""
"``getrandom()`` relies on entropy gathered from device drivers and other "
"sources of environmental noise. Unnecessarily reading large quantities of "
"data will have a negative impact on  other users  of the ``/dev/random`` and "
"``/dev/urandom`` devices."
msgstr ""
"``getrandom()`` はデバイスドライバや他の環境ノイズ源から収集されたエントロ"
"ピーに頼っています。不必要な大量のデータの読出しは、``/dev/random`` と ``/"
"dev/urandom`` デバイスの他のユーザーに負の影響を与えるでしょう。"

#: ../../library/os.rst:5681
msgid ""
"The flags argument is a bit mask that can contain zero or more of the "
"following values ORed together: :py:const:`os.GRND_RANDOM` and :py:data:"
"`GRND_NONBLOCK`."
msgstr ""

#: ../../library/os.rst:5685
msgid ""
"See also the `Linux getrandom() manual page <https://man7.org/linux/man-"
"pages/man2/getrandom.2.html>`_."
msgstr ""
"`Linux getrandom() manual page <https://man7.org/linux/man-pages/man2/"
"getrandom.2.html>`_ も参照してください。　"

#: ../../library/os.rst:5694
msgid ""
"Return a bytestring of *size* random bytes suitable for cryptographic use."
msgstr ""
"暗号に関する用途に適した *size* バイトからなるランダムなバイト文字列を返しま"
"す。"

#: ../../library/os.rst:5696
msgid ""
"This function returns random bytes from an OS-specific randomness source.  "
"The returned data should be unpredictable enough for cryptographic "
"applications, though its exact quality depends on the OS implementation."
msgstr ""
"この関数は OS 固有の乱数発生源からランダムなバイト列を生成して返します。この"
"関数の返すデータは暗号を用いたアプリケーションで十分利用できる程度に予測不能"
"ですが、実際のクオリティは OS の実装によって異なります。"

#: ../../library/os.rst:5700
msgid ""
"On Linux, if the ``getrandom()`` syscall is available, it is used in "
"blocking mode: block until the system urandom entropy pool is initialized "
"(128 bits of entropy are collected by the kernel). See the :pep:`524` for "
"the rationale. On Linux, the :func:`getrandom` function can be used to get "
"random bytes in non-blocking mode (using the :data:`GRND_NONBLOCK` flag) or "
"to poll until the system urandom entropy pool is initialized."
msgstr ""
"Linux では、 ``getrandom()`` システムコールが利用可能ならブロッキングモードで"
"呼び出されます: すなわちシステムの urandom エントロピープールが初期化されるま"
"で (128 ビットのエントロピーがカーネルにより収集されるまで) 処理がブロックさ"
"れます。論拠については :pep:`524` を参照してください。 Linux では、 (:data:"
"`GRND_NONBLOCK` フラグを使って) 非ブロッキングモードでランダムなバイトを取得"
"したり、システムの urandom エントロピープールが初期化されるまでポーリングする"
"ために :func:`getrandom` 関数を利用することができます。"

#: ../../library/os.rst:5707
msgid ""
"On a Unix-like system, random bytes are read from the ``/dev/urandom`` "
"device. If the ``/dev/urandom`` device is not available or not readable, "
"the :exc:`NotImplementedError` exception is raised."
msgstr ""
"Unix ライクなシステムでは、ランダムなバイトは ``/dev/urandom`` デバイスから読"
"み込みます。 ``/dev/urandom`` デバイスが利用できないか、もしくは読み取り不可"
"のときは、 :exc:`NotImplementedError` 例外が送出されます。"

#: ../../library/os.rst:5711
msgid "On Windows, it will use ``BCryptGenRandom()``."
msgstr "Windowsで、 ``BCryptGenRandom()`` を使用します。"

#: ../../library/os.rst:5714
msgid ""
"The :mod:`secrets` module provides higher level functions. For an easy-to-"
"use interface to the random number generator provided by your platform, "
"please see :class:`random.SystemRandom`."
msgstr ""
":mod:`secrets` モジュールは高レベルの乱数生成機能を提供します。プラットフォー"
"ムが提供する乱数生成器に対する簡便なインターフェースについては、 :class:"
"`random.SystemRandom` を参照してください。"

#: ../../library/os.rst:5718
msgid ""
"On Linux 3.17 and newer, the ``getrandom()`` syscall is now used when "
"available.  On OpenBSD 5.6 and newer, the C ``getentropy()`` function is now "
"used. These functions avoid the usage of an internal file descriptor."
msgstr ""
"Linux 3.17 以降では、使用可能な場合に ``getrandom()``  システムコールが使用さ"
"れるようになりました。OpenBSD 5.6 以降では、C ``getentropy()`` 関数が使用され"
"るようになりました。これらの関数は、内部ファイル記述子を使用しません。"

#: ../../library/os.rst:5724
msgid ""
"On Linux, if the ``getrandom()`` syscall blocks (the urandom entropy pool is "
"not initialized yet), fall back on reading ``/dev/urandom``."
msgstr ""
"Linux において、 ``getrandom()`` システムコールがブロックするなら (urandom エ"
"ントロピープールが初期化されていなければ) 、 ``/dev/urandom`` を読む方法に"
"フォールバックします。"

#: ../../library/os.rst:5728
msgid ""
"On Linux, ``getrandom()`` is now used in blocking mode to increase the "
"security."
msgstr ""
"Linuxで、 セキュリティを高めるために、``getrandom()`` をブロッキングモードで"
"使用するようになりました。"

#: ../../library/os.rst:5732
msgid ""
"On Windows, ``BCryptGenRandom()`` is used instead of ``CryptGenRandom()`` "
"which is deprecated."
msgstr ""

#: ../../library/os.rst:5738
msgid ""
"By  default, when reading from ``/dev/random``, :func:`getrandom` blocks if "
"no random bytes are available, and when reading from ``/dev/urandom``, it "
"blocks if the entropy pool has not yet been initialized."
msgstr ""
"デフォルトでは、:func:`getrandom` は ``/dev/random`` から読み込んだときにラン"
"ダムなバイトが存在しない場合や、 ``/dev/urandom`` から読み込んだときにエント"
"ロピープールが初期化されていない場合に処理をブロックします。"

#: ../../library/os.rst:5742
msgid ""
"If the :py:data:`GRND_NONBLOCK` flag is set, then :func:`getrandom` does not "
"block in these cases, but instead immediately raises :exc:`BlockingIOError`."
msgstr ""
":py:data:`GRND_NONBLOCK` フラグがセットされると、 :func:`getrandom` はこれら"
"の場合に処理をブロックせず、ただちに :exc:`BlockingIOError` 例外を送出しま"
"す。"

#: ../../library/os.rst:5749
msgid ""
"If  this  bit  is  set,  then  random bytes are drawn from the ``/dev/"
"random`` pool instead of the ``/dev/urandom`` pool."
msgstr ""
"このビットがセットされた場合、 ランダムバイトは ``/dev/urandom`` プールの代わ"
"りに  ``/dev/random`` プールから取り出されます。"

#: ../../library/os.rst:363 ../../library/os.rst:529 ../../library/os.rst:731
msgid "user"
msgstr "ユーザー"

#: ../../library/os.rst:363
msgid "effective id"
msgstr "実効 ID"

#: ../../library/os.rst:372 ../../library/os.rst:438 ../../library/os.rst:447
#: ../../library/os.rst:456 ../../library/os.rst:470 ../../library/os.rst:666
#: ../../library/os.rst:4522 ../../library/os.rst:4549
msgid "process"
msgstr "process"

#: ../../library/os.rst:372 ../../library/os.rst:438
msgid "group"
msgstr "グループ"

#: ../../library/os.rst:447 ../../library/os.rst:529
msgid "id"
msgstr "id"

#: ../../library/os.rst:456
msgid "id of parent"
msgstr "親の ID"

#: ../../library/os.rst:470 ../../library/os.rst:666
msgid "scheduling priority"
msgstr "スケジューリング優先度"

#: ../../library/os.rst:552 ../../library/os.rst:801
msgid "environment variables"
msgstr "環境変数"

#: ../../library/os.rst:552
msgid "setting"
msgstr "設定"

#: ../../library/os.rst:731
msgid "id, setting"
msgstr "ID、設定"

#: ../../library/os.rst:764
msgid "gethostname() (in module socket)"
msgstr "gethostname() (socket モジュール)"

#: ../../library/os.rst:764
msgid "gethostbyaddr() (in module socket)"
msgstr "gethostbyaddr() (socket モジュール)"

#: ../../library/os.rst:801 ../../library/os.rst:2658
msgid "deleting"
msgstr "削除"

#: ../../library/os.rst:1360 ../../library/os.rst:3028
msgid "module"
msgstr "module"

#: ../../library/os.rst:1360
msgid "pty"
msgstr "pty"

#: ../../library/os.rst:2045 ../../library/os.rst:2457
#: ../../library/os.rst:2658 ../../library/os.rst:3562
#: ../../library/os.rst:3661
msgid "directory"
msgstr "ディレクトリ"

#: ../../library/os.rst:2045
msgid "changing"
msgstr "変更"

#: ../../library/os.rst:2457
msgid "creating"
msgstr "作成"

#: ../../library/os.rst:2457
msgid "UNC paths"
msgstr "UNC パス"

#: ../../library/os.rst:2457
msgid "and os.makedirs()"
msgstr "os.makedirs()"

#: ../../library/os.rst:3028
msgid "stat"
msgstr "stat"

#: ../../library/os.rst:3562 ../../library/os.rst:3661
msgid "walking"
msgstr "走査"

#: ../../library/os.rst:3562 ../../library/os.rst:3661
msgid "traversal"
msgstr "トラバース"

#: ../../library/os.rst:4522 ../../library/os.rst:4549
msgid "killing"
msgstr "kill"

#: ../../library/os.rst:4522 ../../library/os.rst:4549
msgid "signalling"
msgstr "シグナル"

#: ../../library/os.rst:5576 ../../library/os.rst:5612
msgid ". (dot)"
msgstr ". (ドット)"

#: ../../library/os.rst:5576 ../../library/os.rst:5584
#: ../../library/os.rst:5592 ../../library/os.rst:5603
#: ../../library/os.rst:5612
msgid "in pathnames"
msgstr ""

#: ../../library/os.rst:5584
msgid ".."
msgstr ""

#: ../../library/os.rst:5592 ../../library/os.rst:5603
msgid "/ (slash)"
msgstr "/ (スラッシュ)"

#: ../../library/os.rst:5593
msgid "\\ (backslash)"
msgstr ""

#: ../../library/os.rst:5593
msgid "in pathnames (Windows)"
msgstr ""

#: ../../library/os.rst:5619
msgid ": (colon)"
msgstr ": (コロン)"

#: ../../library/os.rst:5619
msgid "path separator (POSIX)"
msgstr ""

#: ../../library/os.rst:5619
msgid "; (semicolon)"
msgstr ""
