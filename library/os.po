# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2018
# samuel300z <samuel300z@gmail.com>, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:24+0000\n"
"Last-Translator: samuel300z <samuel300z@gmail.com>, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/os.rst:2
msgid ":mod:`os` --- Miscellaneous operating system interfaces"
msgstr ":mod:`os` --- 雑多なオペレーティングシステムインタフェース"

#: ../../library/os.rst:7
msgid "**Source code:** :source:`Lib/os.py`"
msgstr "**ソースコード:** :source:`Lib/os.py`"

#: ../../library/os.rst:11
msgid ""
"This module provides a portable way of using operating system dependent "
"functionality.  If you just want to read or write a file see :func:`open`, "
"if you want to manipulate paths, see the :mod:`os.path` module, and if you "
"want to read all the lines in all the files on the command line see the :mod:"
"`fileinput` module.  For creating temporary files and directories see the :"
"mod:`tempfile` module, and for high-level file and directory handling see "
"the :mod:`shutil` module."
msgstr ""
"このモジュールは、 OS 依存の機能を利用するポータブルな方法を提供します。単純"
"なファイルの読み書きについては、 :func:`open` を参照してください。パス操作に"
"ついては、 :mod:`os.path` モジュールを参照してください。コマンドラインに与え"
"られたすべてのファイルから行を読み込んでいくには、 :mod:`fileinput` モジュー"
"ルを参照してください。一時ファイルや一時ディレクトリの作成については、 :mod:"
"`tempfile` モジュールを参照してください。高水準のファイルとディレクトリの操作"
"については、 :mod:`shutil` モジュールを参照してください。"

#: ../../library/os.rst:19
msgid "Notes on the availability of these functions:"
msgstr "利用可能性に関する注意 :"

#: ../../library/os.rst:21
msgid ""
"The design of all built-in operating system dependent modules of Python is "
"such that as long as the same functionality is available, it uses the same "
"interface; for example, the function ``os.stat(path)`` returns stat "
"information about *path* in the same format (which happens to have "
"originated with the POSIX interface)."
msgstr ""
"Python の、すべての OS 依存モジュールの設計方針は、可能な限り同一のインタ"
"フェースで同一の機能を利用できるようにする、というものです。例えば、 ``os."
"stat(path)`` は *path* に関する stat 情報を、 (POSIX を元にした ) 同じフォー"
"マットで返します。"

#: ../../library/os.rst:27
msgid ""
"Extensions peculiar to a particular operating system are also available "
"through the :mod:`os` module, but using them is of course a threat to "
"portability."
msgstr ""
"特定のオペレーティングシステム固有の拡張も :mod:`os` を介して利用することがで"
"きますが、これらの利用はもちろん、可搬性を脅かします。"

#: ../../library/os.rst:31
msgid ""
"All functions accepting path or file names accept both bytes and string "
"objects, and result in an object of the same type, if a path or file name is "
"returned."
msgstr ""
"パスやファイル名を受け付けるすべての関数は、バイト列型および文字列型両方のオ"
"ブジェクトを受け付け、パスやファイル名を返す時は、同じ型のオブジェクトを返し"
"ます。"

#: ../../library/os.rst:35
msgid ""
"An \"Availability: Unix\" note means that this function is commonly found on "
"Unix systems.  It does not make any claims about its existence on a specific "
"operating system."
msgstr ""
"「利用できる環境 : Unix 」の意味はこの関数が Unix システムにあることが多いと"
"いうことです。このことは特定の OS における存在を主張するものではありません。"

#: ../../library/os.rst:39
msgid ""
"If not separately noted, all functions that claim \"Availability: Unix\" are "
"supported on Mac OS X, which builds on a Unix core."
msgstr ""
"特に記述がない場合、「利用できる環境 : Unix 」と書かれている関数は、 Unix を"
"コアにしている Mac OS X でも利用することができます。"

#: ../../library/os.rst:47
msgid ""
"All functions in this module raise :exc:`OSError` in the case of invalid or "
"inaccessible file names and paths, or other arguments that have the correct "
"type, but are not accepted by the operating system."
msgstr ""
"このモジュール内のすべての関数は、間違った、あるいはアクセス出来ないファイル"
"名やファイルパス、その他型が合っていても OS が受理しない引数に対して、 :exc:"
"`OSError` を送出します。"

#: ../../library/os.rst:53
msgid "An alias for the built-in :exc:`OSError` exception."
msgstr "組み込みの :exc:`OSError` 例外に対するエイリアスです。"

#: ../../library/os.rst:58
msgid ""
"The name of the operating system dependent module imported.  The following "
"names have currently been registered: ``'posix'``, ``'nt'``, ``'java'``."
msgstr ""
"import されているオペレーティングシステムに依存するモジュールの名前です。現在"
"次の名前が登録されています: ``'posix'``, ``'nt'``, ``'java'``。"

#: ../../library/os.rst:63
msgid ""
":attr:`sys.platform` has a finer granularity.  :func:`os.uname` gives system-"
"dependent version information."
msgstr ""
":attr:`sys.platform` はより細かな粒度を持っています。 :func:`os.uname` はシス"
"テム依存のバージョン情報を提供します。"

#: ../../library/os.rst:66
msgid ""
"The :mod:`platform` module provides detailed checks for the system's "
"identity."
msgstr ""
":mod:`platform` モジュールはシステムの詳細な識別情報をチェックする機能を提供"
"しています。"

#: ../../library/os.rst:74
msgid "File Names, Command Line Arguments, and Environment Variables"
msgstr "ファイル名、コマンドライン引数、および環境変数"

#: ../../library/os.rst:76
msgid ""
"In Python, file names, command line arguments, and environment variables are "
"represented using the string type. On some systems, decoding these strings "
"to and from bytes is necessary before passing them to the operating system. "
"Python uses the file system encoding to perform this conversion (see :func:"
"`sys.getfilesystemencoding`)."
msgstr ""
"Python では、ファイル名、コマンドライン引数、および環境変数を表すのに文字列型"
"を使用します。一部のシステムでは、これらをオペレーティングシステムに渡す前"
"に、文字列からバイト列へ、またはその逆のデコードが必要です。Python はこの変換"
"を行うためにファイルシステムのエンコーディングを使用します (:func:`sys."
"getfilesystemencoding` 参照)。"

#: ../../library/os.rst:82
msgid ""
"On some systems, conversion using the file system encoding may fail. In this "
"case, Python uses the :ref:`surrogateescape encoding error handler "
"<surrogateescape>`, which means that undecodable bytes are replaced by a "
"Unicode character U+DCxx on decoding, and these are again translated to the "
"original byte on encoding."
msgstr ""
"一部のシステムでは、ファイルシステムのエンコーディングを使用して変換すると失"
"敗する場合があります。この場合、Python は  :ref:`surrogateescape エンコーディ"
"ングエラーハンドラー <surrogateescape>` を使用します。これは、デコード時にデ"
"コードできないバイト列は Unicode 文字 U+DCxx に置き換えられ、それらはエンコー"
"ド時に再び元のバイト列に変換されることを意味します。"

#: ../../library/os.rst:90
msgid ""
"The file system encoding must guarantee to successfully decode all bytes "
"below 128. If the file system encoding fails to provide this guarantee, API "
"functions may raise UnicodeErrors."
msgstr ""
"ファイルシステムのエンコーディングでは、すべてが 128 バイト以下に正常にデコー"
"ドされることが保証されなくてはなりません。ファイルシステムのエンコーディング"
"でこれが保証されなかった場合は、API 関数が UnicodeError を送出します。"

#: ../../library/os.rst:98
msgid "Process Parameters"
msgstr "プロセスのパラメーター"

#: ../../library/os.rst:100
msgid ""
"These functions and data items provide information and operate on the "
"current process and user."
msgstr ""
"これらの関数とデータアイテムは、現在のプロセスおよびユーザーに対する情報提供"
"および操作のための機能を提供しています。"

#: ../../library/os.rst:106
msgid ""
"Return the filename corresponding to the controlling terminal of the process."
msgstr "プロセスの制御端末に対応するファイル名を返します。"

#: ../../library/os.rst:108 ../../library/os.rst:270 ../../library/os.rst:279
#: ../../library/os.rst:288 ../../library/os.rst:297 ../../library/os.rst:306
#: ../../library/os.rst:342 ../../library/os.rst:350 ../../library/os.rst:386
#: ../../library/os.rst:397 ../../library/os.rst:407 ../../library/os.rst:417
#: ../../library/os.rst:428 ../../library/os.rst:437 ../../library/os.rst:467
#: ../../library/os.rst:474 ../../library/os.rst:481 ../../library/os.rst:490
#: ../../library/os.rst:502 ../../library/os.rst:511 ../../library/os.rst:537
#: ../../library/os.rst:544 ../../library/os.rst:553 ../../library/os.rst:562
#: ../../library/os.rst:569 ../../library/os.rst:576 ../../library/os.rst:585
#: ../../library/os.rst:753 ../../library/os.rst:763 ../../library/os.rst:771
#: ../../library/os.rst:794 ../../library/os.rst:815 ../../library/os.rst:848
#: ../../library/os.rst:866 ../../library/os.rst:878 ../../library/os.rst:1046
#: ../../library/os.rst:1061 ../../library/os.rst:1076
#: ../../library/os.rst:1086 ../../library/os.rst:1096
#: ../../library/os.rst:1147 ../../library/os.rst:1164
#: ../../library/os.rst:1176 ../../library/os.rst:1190
#: ../../library/os.rst:1200 ../../library/os.rst:1208
#: ../../library/os.rst:1217 ../../library/os.rst:1250
#: ../../library/os.rst:1487 ../../library/os.rst:1552
#: ../../library/os.rst:1566 ../../library/os.rst:1578
#: ../../library/os.rst:1597 ../../library/os.rst:1610
#: ../../library/os.rst:1621 ../../library/os.rst:1786
#: ../../library/os.rst:1808 ../../library/os.rst:1852
#: ../../library/os.rst:1864 ../../library/os.rst:2482
#: ../../library/os.rst:2626 ../../library/os.rst:2847
#: ../../library/os.rst:3055 ../../library/os.rst:3063
#: ../../library/os.rst:3070 ../../library/os.rst:3077
#: ../../library/os.rst:3084 ../../library/os.rst:3091
#: ../../library/os.rst:3098 ../../library/os.rst:3105
#: ../../library/os.rst:3113 ../../library/os.rst:3121
#: ../../library/os.rst:3128 ../../library/os.rst:3135
#: ../../library/os.rst:3144 ../../library/os.rst:3152
#: ../../library/os.rst:3160 ../../library/os.rst:3167
#: ../../library/os.rst:3174 ../../library/os.rst:3189
#: ../../library/os.rst:3234 ../../library/os.rst:3241
#: ../../library/os.rst:3249 ../../library/os.rst:3469
#: ../../library/os.rst:3484 ../../library/os.rst:3495
#: ../../library/os.rst:3506 ../../library/os.rst:3519
#: ../../library/os.rst:3566 ../../library/os.rst:3577
#: ../../library/os.rst:3585 ../../library/os.rst:3601
#: ../../library/os.rst:3613 ../../library/os.rst:3621
#: ../../library/os.rst:3629 ../../library/os.rst:3637
#: ../../library/os.rst:3645 ../../library/os.rst:3653
#: ../../library/os.rst:3660 ../../library/os.rst:3667
#: ../../library/os.rst:3813 ../../library/os.rst:3822
#: ../../library/os.rst:3843 ../../library/os.rst:3853
#: ../../library/os.rst:3862
msgid "Availability: Unix."
msgstr "利用できる環境 : Unix 。"

#: ../../library/os.rst:113
msgid ""
"A :term:`mapping` object representing the string environment. For example, "
"``environ['HOME']`` is the pathname of your home directory (on some "
"platforms), and is equivalent to ``getenv(\"HOME\")`` in C."
msgstr ""
"文字列の環境を表す :term:`マップ型 <mapping>` オブジェクトです。例えば、 "
"``environ['HOME']`` は (一部のプラットフォームでは) ホームディレクトリのパス"
"名であり、 C における ``getenv(\"HOME\")`` と等価です。"

#: ../../library/os.rst:117
msgid ""
"This mapping is captured the first time the :mod:`os` module is imported, "
"typically during Python startup as part of processing :file:`site.py`.  "
"Changes to the environment made after this time are not reflected in ``os."
"environ``, except for changes made by modifying ``os.environ`` directly."
msgstr ""
"このマップ型の内容は、 :mod:`os` モジュールの最初の import の時点、通常は "
"Python の起動時に :file:`site.py` が処理される中で取り込まれます。それ以後に"
"変更された環境変数は ``os.environ`` を直接変更しない限り ``os.environ`` には"
"反映されません。"

#: ../../library/os.rst:122
msgid ""
"If the platform supports the :func:`putenv` function, this mapping may be "
"used to modify the environment as well as query the environment.  :func:"
"`putenv` will be called automatically when the mapping is modified."
msgstr ""
"プラットフォーム上で :func:`putenv` がサポートされている場合、このマップ型オ"
"ブジェクトは環境変数に対する変更に使うこともできます。 :func:`putenv` はマッ"
"プ型オブジェクトが修正される時に、自動的に呼ばれることになります。"

#: ../../library/os.rst:126
msgid ""
"On Unix, keys and values use :func:`sys.getfilesystemencoding` and "
"``'surrogateescape'`` error handler. Use :data:`environb` if you would like "
"to use a different encoding."
msgstr ""
"Unix では、キーと値に :func:`sys.getfilesystemencoding`、エラーハンドラーに "
"``'surrogateescape'`` を使用します。異なるエンコーディングを使用したい場合"
"は :data:`environb` を使用します。"

#: ../../library/os.rst:132
msgid ""
"Calling :func:`putenv` directly does not change ``os.environ``, so it's "
"better to modify ``os.environ``."
msgstr ""
":func:`putenv` を直接呼び出しても ``os.environ`` の内容は変わらないので、 "
"``os.environ`` を直接変更する方が良いです。"

#: ../../library/os.rst:137
msgid ""
"On some platforms, including FreeBSD and Mac OS X, setting ``environ`` may "
"cause memory leaks.  Refer to the system documentation for :c:func:`putenv`."
msgstr ""
"FreeBSD と Mac OS X を含む一部のプラットフォームでは、 ``environ`` の値を変更"
"するとメモリリークの原因になる場合があります。システムの :c:func:`putenv` に"
"関するドキュメントを参照してください。"

#: ../../library/os.rst:141
msgid ""
"If :func:`putenv` is not provided, a modified copy of this mapping  may be "
"passed to the appropriate process-creation functions to cause  child "
"processes to use a modified environment."
msgstr ""
":func:`putenv` が提供されていない場合、このマップ型オブジェクトに変更を加えた"
"コピーを適切なプロセス生成機能に渡すことで、生成された子プロセスが変更された"
"環境変数を利用するようにできます。"

#: ../../library/os.rst:145
msgid ""
"If the platform supports the :func:`unsetenv` function, you can delete items "
"in this mapping to unset environment variables. :func:`unsetenv` will be "
"called automatically when an item is deleted from ``os.environ``, and when "
"one of the :meth:`pop` or :meth:`clear` methods is called."
msgstr ""
"プラットフォームが :func:`unsetenv` 関数をサポートしている場合、このマップ型"
"オブジェクトからアイテムを削除することで環境変数を消すことができます。 :func:"
"`unsetenv` は ``os.environ`` からアイテムが取り除かれた時に自動的に呼ばれま"
"す。 :meth:`pop` または :meth:`clear` が呼ばれた時も同様です。"

#: ../../library/os.rst:153
msgid ""
"Bytes version of :data:`environ`: a :term:`mapping` object representing the "
"environment as byte strings. :data:`environ` and :data:`environb` are "
"synchronized (modify :data:`environb` updates :data:`environ`, and vice "
"versa)."
msgstr ""
":data:`environ` のバイト列版です。環境変数をバイト文字列で表す :term:`マップ"
"型 <mapping>` オブジェクトです。:data:`environ` と :data:`environb` は同期さ"
"れます。(:data:`environb` を変更すると :data:`environ` が更新され、逆の場合も"
"同様に更新されます)。"

#: ../../library/os.rst:158
msgid ""
":data:`environb` is only available if :data:`supports_bytes_environ` is True."
msgstr ""
":data:`environb` は :data:`supports_bytes_environ` が True の場合のみ利用可能"
"です。"

#: ../../library/os.rst:169
msgid "These functions are described in :ref:`os-file-dir`."
msgstr "これらの関数は、 :ref:`os-file-dir` 節で説明されています。"

#: ../../library/os.rst:174
msgid ""
"Encode :term:`path-like <path-like object>` *filename* to the filesystem "
"encoding with ``'surrogateescape'`` error handler, or ``'strict'`` on "
"Windows; return :class:`bytes` unchanged."
msgstr ""
"*filename* をファイルシステムのエンコーディングにエンコードします。エラーハン"
"ドラーに ``'surrogateescape'`` (Windows の場合は ``'strict'``) が指定されま"
"す; 未変更の :class:`bytes` オブジェクトを返します。"

#: ../../library/os.rst:178
msgid ":func:`fsdecode` is the reverse function."
msgstr ":func:`fsdecode` はこの逆変換を行う関数です。"

#: ../../library/os.rst:182 ../../library/os.rst:197
msgid ""
"Support added to accept objects implementing the :class:`os.PathLike` "
"interface."
msgstr ""
":class:`os.PathLike` インタフェースを実装したオブジェクトを受け入れるようにな"
"りました。"

#: ../../library/os.rst:189
msgid ""
"Decode the :term:`path-like <path-like object>` *filename* from the "
"filesystem encoding with ``'surrogateescape'`` error handler, or "
"``'strict'`` on Windows; return :class:`str` unchanged."
msgstr ""
"ファイルシステムのエンコーディングから :term:`path-like` な *filename* にデ"
"コードします。エラーハンドラーに ``'surrogateescape'`` (Windows の場合は "
"``'strict'``) が指定されます; 未変更の :class:`bytes` オブジェクトを返しま"
"す。"

#: ../../library/os.rst:193
msgid ":func:`fsencode` is the reverse function."
msgstr ":func:`fsencode` はこの逆変換を行う関数です。"

#: ../../library/os.rst:204
msgid "Return the file system representation of the path."
msgstr "path のファイルシステム表現を返します。"

#: ../../library/os.rst:206
msgid ""
"If :class:`str` or :class:`bytes` is passed in, it is returned unchanged. "
"Otherwise :meth:`~os.PathLike.__fspath__` is called and its value is "
"returned as long as it is a :class:`str` or :class:`bytes` object. In all "
"other cases, :exc:`TypeError` is raised."
msgstr ""
"もし :class:`str` か :class:`bytes: のオブジェクトが渡された場合は、変更せず"
"にそのまま返します。さもなければ、 :meth:`~os.PathLike.__fspath__` が呼び出さ"
"れ、その戻り値が :class:`str` か :class:`bytes` のオブジェクトであれば、その"
"値を返します。他のすべてのケースでは :exc:`TypeError` が送出されます。"

#: ../../library/os.rst:216
msgid ""
"An :term:`abstract base class` for objects representing a file system path, "
"e.g. :class:`pathlib.PurePath`."
msgstr ""
"ファイルシステムパスを表すオブジェクト(例: :class:`pathlib.PurePath`) 向け"
"の :term:`abstract base class` です。"

#: ../../library/os.rst:223
msgid "Return the file system path representation of the object."
msgstr "このオブジェクトが表現するファイルシステムパスを返します。"

#: ../../library/os.rst:225
msgid ""
"The method should only return a :class:`str` or :class:`bytes` object, with "
"the preference being for :class:`str`."
msgstr ""
"このメソッドは :class:`str` か :class:`bytes` のオブジェクトのみを返す必要が"
"あります(:class:`str` が好まれます)。"

#: ../../library/os.rst:231
msgid ""
"Return the value of the environment variable *key* if it exists, or "
"*default* if it doesn't. *key*, *default* and the result are str."
msgstr ""
"環境変数 *key* が存在すればその値を返し、存在しなければ *default* を返しま"
"す。*key*、*default*、および返り値は文字列です。"

#: ../../library/os.rst:234
msgid ""
"On Unix, keys and values are decoded with :func:`sys.getfilesystemencoding` "
"and ``'surrogateescape'`` error handler. Use :func:`os.getenvb` if you would "
"like to use a different encoding."
msgstr ""
"Unix では、キーと値は :func:`sys.getfilesystemencoding`、エラーハンドラー "
"``'surrogateescape'`` でデコードされます。異なるエンコーディングを使用したい"
"場合は :func:`os.getenvb` を使用します。"

#: ../../library/os.rst:238 ../../library/os.rst:450 ../../library/os.rst:654
msgid "Availability: most flavors of Unix, Windows."
msgstr "利用できる環境 : 主な Unix 互換環境、 Windows 。"

#: ../../library/os.rst:243
msgid ""
"Return the value of the environment variable *key* if it exists, or "
"*default* if it doesn't. *key*, *default* and the result are bytes."
msgstr ""
"環境変数 *key* が存在すればその値を返し、存在しなければ *default* を返しま"
"す。*key*、*default*、および返り値はバイト列型です。"

#: ../../library/os.rst:246
msgid ""
":func:`getenvb` is only available if :data:`supports_bytes_environ` is True."
msgstr ""
":func:`getenvb` は :data:`supports_bytes_environ` が True の場合のみ利用可能"
"です。"

#: ../../library/os.rst:249
msgid "Availability: most flavors of Unix."
msgstr "利用できる環境: 主な Unix 互換環境。"

#: ../../library/os.rst:256
msgid ""
"Returns the list of directories that will be searched for a named "
"executable, similar to a shell, when launching a process. *env*, when "
"specified, should be an environment variable dictionary to lookup the PATH "
"in. By default, when *env* is ``None``, :data:`environ` is used."
msgstr ""
"プロセスを起動する時に名前付き実行ファイルを検索するディレクトリのリストを返"
"します。\n"
"*env* が指定されると、それを環境変数の辞書とみなし、その辞書からキー PATH の"
"値を探します。\n"
"デフォルトでは *env* は ``None`` であり、:data:`environ` が使用されます。"

#: ../../library/os.rst:267
msgid ""
"Return the effective group id of the current process.  This corresponds to "
"the \"set id\" bit on the file being executed in the current process."
msgstr ""
"現在のプロセスの実効グループ id を返します。この id は現在のプロセスで実行さ"
"れているファイルの \"set id\" ビットに対応します。"

#: ../../library/os.rst:277
msgid "Return the current process's effective user id."
msgstr "現在のプロセスの実効ユーザー id を返します。"

#: ../../library/os.rst:286
msgid "Return the real group id of the current process."
msgstr "現在のプロセスの実グループ id を返します。"

#: ../../library/os.rst:293
msgid ""
"Return list of group ids that *user* belongs to. If *group* is not in the "
"list, it is included; typically, *group* is specified as the group ID field "
"from the password record for *user*."
msgstr ""
"*user* が所属するグループ id のリストを返します。*group* がリストにない場合、"
"それを追加します。通常、*group* にはユーザー *user* のパスワードレコードに書"
"かれているグループ ID を指定します。"

#: ../../library/os.rst:304
msgid ""
"Return list of supplemental group ids associated with the current process."
msgstr "現在のプロセスに関連付けられた従属グループ id のリストを返します。"

#: ../../library/os.rst:310
msgid ""
"On Mac OS X, :func:`getgroups` behavior differs somewhat from other Unix "
"platforms. If the Python interpreter was built with a deployment target of :"
"const:`10.5` or earlier, :func:`getgroups` returns the list of effective "
"group ids associated with the current user process; this list is limited to "
"a system-defined number of entries, typically 16, and may be modified by "
"calls to :func:`setgroups` if suitably privileged. If built with a "
"deployment target greater than :const:`10.5`, :func:`getgroups` returns the "
"current group access list for the user associated with the effective user id "
"of the process; the group access list may change over the lifetime of the "
"process, it is not affected by calls to :func:`setgroups`, and its length is "
"not limited to 16.  The deployment target value, :const:"
"`MACOSX_DEPLOYMENT_TARGET`, can be obtained with :func:`sysconfig."
"get_config_var`."
msgstr ""
"Mac OS X では :func:`getgroups` の挙動は他の Unix プラットフォームとはいくぶ"
"ん異なります。 Python のインタープリタが :const:`10.5` 以前の Deployment "
"Target でビルドされている場合、 :func:`getgroups` は現在のユーザープロセスに"
"関連付けられている実効グループ id を返します。このリストはシステムで定義され"
"たエントリ数 ( 通常は 16) に制限され、適切な特権があれば :func:`setgroups` の"
"呼び出しによって変更することができます。 :const:`10.5` より新しい Deployment "
"Target でビルドされている場合、 :func:`getgroups` はプロセスの実効ユーザー "
"id に関連付けられたユーザーの現在のグループアクセスリストを返します。このグ"
"ループアクセスリストは、プロセスのライフタイムで変更される可能性があり、 :"
"func:`setgroups` の呼び出しの影響を受けず、長さ 16 の制限を受けません。 "
"Deployment Target の値 :const:`MACOSX_DEPLOYMENT_TARGET` は、 :func:"
"`sysconfig.get_config_var` で取得することができます。"

#: ../../library/os.rst:327
msgid ""
"Return the name of the user logged in on the controlling terminal of the "
"process.  For most purposes, it is more useful to use :func:`getpass."
"getuser` since the latter checks the environment variables :envvar:`LOGNAME` "
"or :envvar:`USERNAME` to find out who the user is, and falls back to ``pwd."
"getpwuid(os.getuid())[0]`` to get the login name of the current real user id."
msgstr ""
"プロセスの制御端末にログインしているユーザー名を返します。ほとんどの場合、:"
"func:`getpass.getuser` を使う方が便利です。なぜなら、:func:`getpass.getuser` "
"は、ユーザーを見つけるために、環境変数 :envvar:`LOGNAME` や :envvar:"
"`USERNAME` を調べ、さらには ``pwd.getpwuid(os.getuid())[0]`` まで調べに行くか"
"らです。"

#: ../../library/os.rst:334 ../../library/os.rst:368 ../../library/os.rst:827
#: ../../library/os.rst:836 ../../library/os.rst:1022 ../../library/os.rst:1277
#: ../../library/os.rst:1635 ../../library/os.rst:2609
#: ../../library/os.rst:2638 ../../library/os.rst:3021
#: ../../library/os.rst:3352 ../../library/os.rst:3363
#: ../../library/os.rst:3431 ../../library/os.rst:3454
msgid "Availability: Unix, Windows."
msgstr "利用できる環境 : Unix 、 Windows 。"

#: ../../library/os.rst:339
msgid ""
"Return the process group id of the process with process id *pid*. If *pid* "
"is 0, the process group id of the current process is returned."
msgstr ""
"プロセス id *pid* のプロセスのプロセスグループ id を返します。 *pid* が 0 の"
"場合、現在のプロセスのプロセスグループ id を返します。"

#: ../../library/os.rst:348
msgid "Return the id of the current process group."
msgstr "現在のプロセスグループの id を返します。"

#: ../../library/os.rst:357
msgid "Return the current process id."
msgstr "現在のプロセス id を返します。"

#: ../../library/os.rst:364
msgid ""
"Return the parent's process id.  When the parent process has exited, on Unix "
"the id returned is the one of the init process (1), on Windows it is still "
"the same id, which may be already reused by another process."
msgstr ""
"親プロセスのプロセス id を返します。親プロセスが終了していた場合、Unix では "
"init プロセスの id (1) が返され、Windows では親のプロセス id だったもの (別の"
"プロセスで再利用されているかもしれない) がそのまま返されます。"

#: ../../library/os.rst:370
msgid "Added support for Windows."
msgstr "Windows サポートが追加されました。"

#: ../../library/os.rst:378
msgid ""
"Get program scheduling priority.  The value *which* is one of :const:"
"`PRIO_PROCESS`, :const:`PRIO_PGRP`, or :const:`PRIO_USER`, and *who* is "
"interpreted relative to *which* (a process identifier for :const:"
"`PRIO_PROCESS`, process group identifier for :const:`PRIO_PGRP`, and a user "
"ID for :const:`PRIO_USER`).  A zero value for *who* denotes (respectively) "
"the calling process, the process group of the calling process, or the real "
"user ID of the calling process."
msgstr ""
"プログラムのスケジューリング優先度を取得します。*which* の値は :const:"
"`PRIO_PROCESS`、:const:`PRIO_PGRP`、あるいは :const:`PRIO_USER` のいずれか一"
"つで、*who* の値は *which* に応じて解釈されます (:const:`PRIO_PROCESS` であれ"
"ばプロセス識別子、:const:`PRIO_PGRP` であればプロセスグループ識別子、そして :"
"const:`PRIO_USER` であればユーザー ID)。*who* の値がゼロの場合、呼び出したプ"
"ロセス、呼び出したプロセスのプロセスグループ、および呼び出したプロセスの実"
"ユーザー id を (それぞれ) 意味します。"

#: ../../library/os.rst:395
msgid ""
"Parameters for the :func:`getpriority` and :func:`setpriority` functions."
msgstr ":func:`getpriority` と :func:`setpriority` 用のパラメータです。"

#: ../../library/os.rst:404
msgid ""
"Return a tuple (ruid, euid, suid) denoting the current process's real, "
"effective, and saved user ids."
msgstr ""
"現在のプロセスの実ユーザー id 、実効ユーザー id 、および保存ユーザー id を示"
"す、 (ruid, euid, suid) のタプルを返します。"

#: ../../library/os.rst:414
msgid ""
"Return a tuple (rgid, egid, sgid) denoting the current process's real, "
"effective, and saved group ids."
msgstr ""
"現在のプロセスの実グループ id 、実効グループ id 、および保存グループ id を示"
"す、 (rgid, egid, sgid) のタプルを返します。"

#: ../../library/os.rst:426
msgid "Return the current process's real user id."
msgstr "現在のプロセスの実ユーザー id を返します。"

#: ../../library/os.rst:433
msgid ""
"Call the system initgroups() to initialize the group access list with all of "
"the groups of which the specified username is a member, plus the specified "
"group id."
msgstr ""
"システムの initgroups() を呼び出し、指定された *username* がメンバーである全"
"グループと *gid* で指定されたグループでグループアクセスリストを初期化します。"

#: ../../library/os.rst:446
msgid ""
"Set the environment variable named *key* to the string *value*.  Such "
"changes to the environment affect subprocesses started with :func:`os."
"system`, :func:`popen` or :func:`fork` and :func:`execv`."
msgstr ""
"*key* という名前の環境変数に文字列 *value* を設定します。このような環境変数の"
"変更は、:func:`os.system`、:func:`popen`、または :func:`fork` と :func:"
"`execv` で起動されたサブプロセスに影響を与えます。"

#: ../../library/os.rst:454
msgid ""
"On some platforms, including FreeBSD and Mac OS X, setting ``environ`` may "
"cause memory leaks. Refer to the system documentation for putenv."
msgstr ""
"FreeBSD と Mac OS X を含む一部のプラットフォームでは、 ``environ`` の値を変更"
"するとメモリリークの原因になる場合があります。システムの putenv に関するド"
"キュメントを参照してください。"

#: ../../library/os.rst:457
msgid ""
"When :func:`putenv` is supported, assignments to items in ``os.environ`` are "
"automatically translated into corresponding calls to :func:`putenv`; "
"however, calls to :func:`putenv` don't update ``os.environ``, so it is "
"actually preferable to assign to items of ``os.environ``."
msgstr ""
":func:`putenv` がサポートされている場合、 ``os.environ`` のアイテムに対する代"
"入を行うと、自動的に :func:`putenv` の対応する呼び出しに変換されます。直接 :"
"func:`putenv` を呼び出した場合 ``os.environ`` は更新されないため、実際には "
"``os.environ`` のアイテムに代入する方が望ましい操作です。"

#: ../../library/os.rst:465
msgid "Set the current process's effective group id."
msgstr "現在のプロセスに実効グループ id をセットします。"

#: ../../library/os.rst:472
msgid "Set the current process's effective user id."
msgstr "現在のプロセスに実効ユーザー id をセットします。"

#: ../../library/os.rst:479
msgid "Set the current process' group id."
msgstr "現在のプロセスにグループ id をセットします。"

#: ../../library/os.rst:486
msgid ""
"Set the list of supplemental group ids associated with the current process "
"to *groups*. *groups* must be a sequence, and each element must be an "
"integer identifying a group. This operation is typically available only to "
"the superuser."
msgstr ""
"現在のグループに関連付けられた従属グループ id のリストを *groups* に設定しま"
"す。 *groups* はシーケンス型でなくてはならず、各要素はグループを特定する整数"
"でなくてはなりません。通常、この操作はスーパユーザーしか利用できません。"

#: ../../library/os.rst:492
msgid ""
"On Mac OS X, the length of *groups* may not exceed the system-defined "
"maximum number of effective group ids, typically 16. See the documentation "
"for :func:`getgroups` for cases where it may not return the same group list "
"set by calling setgroups()."
msgstr ""
"Mac OS X では、 *groups* の長さはシステムで定義された実効グループ id の最大"
"数 ( 通常は 16) を超えない場合があります。 setgroups() 呼び出しで設定されたも"
"のと同じグループリストが返されないケースについては、 :func:`getgroups` のド"
"キュメントを参照してください。"

#: ../../library/os.rst:499
msgid ""
"Call the system call :c:func:`setpgrp` or ``setpgrp(0, 0)`` depending on "
"which version is implemented (if any).  See the Unix manual for the "
"semantics."
msgstr ""
"システムコール :c:func:`setpgrp` か ``setpgrp(0, 0)`` のどちらか(実装されてい"
"るもの)を呼び出します。機能については UNIX マニュアルを参照して下さい。"

#: ../../library/os.rst:507
msgid ""
"Call the system call :c:func:`setpgid` to set the process group id of the "
"process with id *pid* to the process group with id *pgrp*.  See the Unix "
"manual for the semantics."
msgstr ""
"システムコール :c:func:`setpgid` を呼び出してプロセス id *pid* のプロセスのプ"
"ロセスグループ id を *pgrp* に設定します。この動作に関しては Unix のマニュア"
"ルを参照してください。"

#: ../../library/os.rst:518
msgid ""
"Set program scheduling priority. The value *which* is one of :const:"
"`PRIO_PROCESS`, :const:`PRIO_PGRP`, or :const:`PRIO_USER`, and *who* is "
"interpreted relative to *which* (a process identifier for :const:"
"`PRIO_PROCESS`, process group identifier for :const:`PRIO_PGRP`, and a user "
"ID for :const:`PRIO_USER`). A zero value for *who* denotes (respectively) "
"the calling process, the process group of the calling process, or the real "
"user ID of the calling process. *priority* is a value in the range -20 to "
"19. The default priority is 0; lower priorities cause more favorable "
"scheduling."
msgstr ""
"プログラムのスケジューリング優先度を設定します。*which* は :const:"
"`PRIO_PROCESS`、:const:`PRIO_PGRP`、あるいは :const:`PRIO_USER` のいずれか一"
"つで、*who* の値は *which* に応じて解釈されます (:const:`PRIO_PROCESS` であれ"
"ばプロセス識別子、:const:`PRIO_PGRP` であればプロセスグループ識別子、そして :"
"const:`PRIO_USER` であればユーザー ID)。*who* の値がゼロの場合、呼び出したプ"
"ロセス、呼び出したプロセスのプロセスグループ、および呼び出したプロセスの実"
"ユーザー id を (それぞれ) 意味します。*priority* は -20 から 19 の整数値で、"
"デフォルトの優先度は 0 です。小さい数値ほど優先されるスケジューリングとなりま"
"す。"

#: ../../library/os.rst:528
msgid "Availability: Unix"
msgstr "利用できる環境 : Unix"

#: ../../library/os.rst:535
msgid "Set the current process's real and effective group ids."
msgstr "現在のプロセスの実グループ id および実効グループ id を設定します。"

#: ../../library/os.rst:542
msgid "Set the current process's real, effective, and saved group ids."
msgstr ""
"現在のプロセスの、実グループ id 、実効グループ id 、および保存グループ id を"
"設定します。"

#: ../../library/os.rst:551
msgid "Set the current process's real, effective, and saved user ids."
msgstr ""
"現在のプロセスの実ユーザー id 、実効ユーザー id 、および保存ユーザー id を設"
"定します。"

#: ../../library/os.rst:560
msgid "Set the current process's real and effective user ids."
msgstr "現在のプロセスの実ユーザー id および実効ユーザー id を設定します。"

#: ../../library/os.rst:567
msgid ""
"Call the system call :c:func:`getsid`.  See the Unix manual for the "
"semantics."
msgstr ""
":c:func:`getsid` システムコールを呼び出します。機能については Unix のマニュア"
"ルを参照してください。"

#: ../../library/os.rst:574
msgid ""
"Call the system call :c:func:`setsid`.  See the Unix manual for the "
"semantics."
msgstr ""
":c:func:`setsid` システムコールを呼び出します。機能については Unix のマニュア"
"ルを参照してください。"

#: ../../library/os.rst:583
msgid "Set the current process's user id."
msgstr "現在のプロセスのユーザー id を設定します。"

#: ../../library/os.rst:591
msgid ""
"Return the error message corresponding to the error code in *code*. On "
"platforms where :c:func:`strerror` returns ``NULL`` when given an unknown "
"error number, :exc:`ValueError` is raised."
msgstr ""
"エラーコード *code* に対応するエラーメッセージを返します。未知のエラーコード"
"の対して :c:func:`strerror` が ``NULL`` を返すプラットフォームでは、 :exc:"
"`ValueError` が送出されます。"

#: ../../library/os.rst:598
msgid ""
"``True`` if the native OS type of the environment is bytes (eg. ``False`` on "
"Windows)."
msgstr ""
"環境のネイティブ OS タイプがバイト型の場合、 ``True`` です (例: Windows で"
"は、 ``False`` です)。"

#: ../../library/os.rst:606
msgid "Set the current numeric umask and return the previous umask."
msgstr "現在の数値 umask を設定し、以前の umask 値を返します。"

#: ../../library/os.rst:615
msgid ""
"Returns information identifying the current operating system. The return "
"value is an object with five attributes:"
msgstr ""
"現在のオペレーティングシステムを識別する情報を返します。返り値は 5 個の属性を"
"持つオブジェクトです:"

#: ../../library/os.rst:618
msgid ":attr:`sysname` - operating system name"
msgstr ":attr:`sysname` - OS の名前"

#: ../../library/os.rst:619
msgid ":attr:`nodename` - name of machine on network (implementation-defined)"
msgstr ":attr:`nodename` - (実装時に定義された) ネットワーク上でのマシン名"

#: ../../library/os.rst:620
msgid ":attr:`release` - operating system release"
msgstr ":attr:`release` - OS のリリース"

#: ../../library/os.rst:621
msgid ":attr:`version` - operating system version"
msgstr ":attr:`version` - OS のバージョン"

#: ../../library/os.rst:622
msgid ":attr:`machine` - hardware identifier"
msgstr ":attr:`machine` - ハードウェア識別子"

#: ../../library/os.rst:624
msgid ""
"For backwards compatibility, this object is also iterable, behaving like a "
"five-tuple containing :attr:`sysname`, :attr:`nodename`, :attr:`release`, :"
"attr:`version`, and :attr:`machine` in that order."
msgstr ""
"後方互換性のため、このオブジェクトはイテラブルでもあり、:attr:`sysname`、:"
"attr:`nodename`、:attr:`release`、:attr:`version`、および :attr:`machine` の "
"5 個の要素をこの順序で持つタプルのように振る舞います。"

#: ../../library/os.rst:629
msgid ""
"Some systems truncate :attr:`nodename` to 8 characters or to the leading "
"component; a better way to get the hostname is :func:`socket.gethostname`  "
"or even ``socket.gethostbyaddr(socket.gethostname())``."
msgstr ""
"一部のシステムでは、:attr:`nodename` はコンポーネントを読み込むために 8 文字"
"または先頭の要素だけに切り詰められます; ホスト名を取得する方法としては、:"
"func:`socket.gethostname` を使う方がよいでしょう。あるいは ``socket."
"gethostbyaddr(socket.gethostname())`` でもかまいません。"

#: ../../library/os.rst:634
msgid "Availability: recent flavors of Unix."
msgstr "利用できる環境 : Unix 互換環境。"

#: ../../library/os.rst:636 ../../library/os.rst:3456
msgid ""
"Return type changed from a tuple to a tuple-like object with named "
"attributes."
msgstr ""
"返り値の型が、タプルから属性名のついたタプルライクオブジェクトに変更されまし"
"た。"

#: ../../library/os.rst:645
msgid ""
"Unset (delete) the environment variable named *key*. Such changes to the "
"environment affect subprocesses started with :func:`os.system`, :func:"
"`popen` or :func:`fork` and :func:`execv`."
msgstr ""
"*key* という名前の環境変数を unset (削除) します。このような環境変数の変更"
"は、:func:`os.system`、:func:`popen`、または :func:`fork` と :func:`execv` で"
"起動されたサブプロセスに影響を与えます。"

#: ../../library/os.rst:649
msgid ""
"When :func:`unsetenv` is supported, deletion of items in ``os.environ`` is "
"automatically translated into a corresponding call to :func:`unsetenv`; "
"however, calls to :func:`unsetenv` don't update ``os.environ``, so it is "
"actually preferable to delete items of ``os.environ``."
msgstr ""
":func:`unsetenv` がサポートされている場合、 ``os.environ`` のアイテムの削除を"
"行うと、自動的に :func:`unsetenv` の対応する呼び出しに変換されます。直接 :"
"func:`unsetenv` を呼び出した場合 ``os.environ`` は更新されないため、実際には "
"``os.environ`` のアイテムを削除する方が望ましい操作です。"

#: ../../library/os.rst:660
msgid "File Object Creation"
msgstr "ファイルオブジェクトの生成"

#: ../../library/os.rst:662
msgid ""
"This function creates new :term:`file objects <file object>`.  (See also :"
"func:`~os.open` for opening file descriptors.)"
msgstr ""
"以下の関数は新しい :term:`ファイルオブジェクト <file object>` を作成します。"
"(:func:`~os.open` も参照してください)"

#: ../../library/os.rst:668
msgid ""
"Return an open file object connected to the file descriptor *fd*.  This is "
"an alias of the :func:`open` built-in function and accepts the same "
"arguments. The only difference is that the first argument of :func:`fdopen` "
"must always be an integer."
msgstr ""
"ファイル記述子 *fd* に接続し、オープンしたファイルオブジェクトを返します。こ"
"れは組み込み関数 :func:`open` の別名であり、同じ引数を受け取ります。唯一の違"
"いは :func:`fdopen` の第一引数が常に整数でなければならないことです。"

#: ../../library/os.rst:677
msgid "File Descriptor Operations"
msgstr "ファイル記述子の操作"

#: ../../library/os.rst:679
msgid ""
"These functions operate on I/O streams referenced using file descriptors."
msgstr ""
"これらの関数は、ファイル記述子を使って参照されている I/O ストリームを操作しま"
"す。"

#: ../../library/os.rst:681
msgid ""
"File descriptors are small integers corresponding to a file that has been "
"opened by the current process.  For example, standard input is usually file "
"descriptor 0, standard output is 1, and standard error is 2.  Further files "
"opened by a process will then be assigned 3, 4, 5, and so forth.  The name "
"\"file descriptor\" is slightly deceptive; on Unix platforms, sockets and "
"pipes are also referenced by file descriptors."
msgstr ""
"ファイル記述子とは現在のプロセスで開かれたファイルに対応する小さな整数です。"
"例えば、標準入力のファイル記述子は通常 0 で、標準出力は 1 、標準エラーは 2 で"
"す。プロセスから開かれたその他のファイルには 3 、 4 、 5 と割り振られていきま"
"す。「ファイル記述子」という名称は少し誤解を与えるものかもしれません。Unix プ"
"ラットフォームでは、ソケットやパイプもファイル記述子によって参照されます。"

#: ../../library/os.rst:688
msgid ""
"The :meth:`~io.IOBase.fileno` method can be used to obtain the file "
"descriptor associated with a :term:`file object` when required.  Note that "
"using the file descriptor directly will bypass the file object methods, "
"ignoring aspects such as internal buffering of data."
msgstr ""
":meth:`~io.IOBase.fileno` メソッドを使用して、必要な場合に :term:`file "
"object` に関連付けられているファイル記述子を取得することができます。ファイル"
"記述子を直接使用すると、ファイルオブジェクトのメソッドが使用されないため、"
"データの内部バッファなどの性質は無視されることに注意してください。"

#: ../../library/os.rst:696
msgid "Close file descriptor *fd*."
msgstr "ファイル記述子 *fd* をクローズします。"

#: ../../library/os.rst:700
msgid ""
"This function is intended for low-level I/O and must be applied to a file "
"descriptor as returned by :func:`os.open` or :func:`pipe`.  To close a "
"\"file object\" returned by the built-in function :func:`open` or by :func:"
"`popen` or :func:`fdopen`, use its :meth:`~io.IOBase.close` method."
msgstr ""
"この関数は低水準の I/O 向けのもので、 :func:`os.open` や :func:`pipe` が返す"
"ファイル記述子に対して使用しなければなりません。\n"
"組み込み関数 :func:`open` や :func:`popen` 、 :func:`fdopen` が返す \"ファイ"
"ルオブジェクト\" を閉じるには、オブジェクトの :meth:`~io.IOBase.close` メソッ"
"ドを使用してください。"

#: ../../library/os.rst:708
msgid ""
"Close all file descriptors from *fd_low* (inclusive) to *fd_high* "
"(exclusive), ignoring errors. Equivalent to (but much faster than)::"
msgstr ""
"*fd_low* 以上 *fd_high* 未満のすべてのファイル記述子をエラーを無視してクロー"
"ズします。以下のコードと等価です::"

#: ../../library/os.rst:720
msgid ""
"Return a string describing the encoding of the device associated with *fd* "
"if it is connected to a terminal; else return :const:`None`."
msgstr ""
"*fd* に関連付けられたデバイスが端末 (ターミナル) に接続されている場合に、その"
"デバイスのエンコーディングを表す文字列を返します。端末に接続されていない場"
"合、 :const:`None` を返します。"

#: ../../library/os.rst:726
msgid ""
"Return a duplicate of file descriptor *fd*. The new file descriptor is :ref:"
"`non-inheritable <fd_inheritance>`."
msgstr ""
"ファイル記述子 *fd* の複製を返します。新しいファイル記述子は :ref:`継承不可 "
"<fd_inheritance>` です。"

#: ../../library/os.rst:729
msgid ""
"On Windows, when duplicating a standard stream (0: stdin, 1: stdout, 2: "
"stderr), the new file descriptor is :ref:`inheritable <fd_inheritance>`."
msgstr ""
"Windows では、標準ストリーム (0: 標準入力、1: 標準出力、2: 標準エラー出力) を"
"複製する場合、新しいファイル記述子は :ref:`継承可能 <fd_inheritance>` です。"

#: ../../library/os.rst:733 ../../library/os.rst:919
msgid "The new file descriptor is now non-inheritable."
msgstr "新しいファイル記述子が継承不可になりました。"

#: ../../library/os.rst:739
msgid ""
"Duplicate file descriptor *fd* to *fd2*, closing the latter first if "
"necessary. The file descriptor *fd2* is :ref:`inheritable <fd_inheritance>` "
"by default, or non-inheritable if *inheritable* is ``False``."
msgstr ""
"ファイル記述子 *fd* を *fd2* に複製し、必要な場合には後者を先に閉じます。 "
"*fd2* はデフォルトでは :ref:`継承可能 <fd_inheritance>` で、*inheritable* が "
"``False`` の場合は継承不可です。"

#: ../../library/os.rst:743
msgid "Add the optional *inheritable* parameter."
msgstr "オプションの *inheritable* 引数が追加されました。"

#: ../../library/os.rst:749
msgid ""
"Change the mode of the file given by *fd* to the numeric *mode*.  See the "
"docs for :func:`chmod` for possible values of *mode*.  As of Python 3.3, "
"this is equivalent to ``os.chmod(fd, mode)``."
msgstr ""
"*fd* で指定されたファイルのモードを *mode* に変更します。*mode* に指定できる"
"値については、:func:`chmod` のドキュメントを参照してください。Python 3.3 以降"
"では ``os.chmod(fd, mode)`` と等価です。"

#: ../../library/os.rst:758
msgid ""
"Change the owner and group id of the file given by *fd* to the numeric *uid* "
"and *gid*.  To leave one of the ids unchanged, set it to -1.  See :func:"
"`chown`.  As of Python 3.3, this is equivalent to ``os.chown(fd, uid, gid)``."
msgstr ""
"*fd* で指定されたファイルの所有者 id およびグループ id を数値 *uid* および "
"*gid* に変更します。いずれかの id を変更せずにおくにはその値として -1 を指定"
"します。:func:`chown` を参照してください。Python 3.3 以降では ``os.chown(fd, "
"uid, gid)`` と等価です。"

#: ../../library/os.rst:768
msgid ""
"Force write of file with filedescriptor *fd* to disk. Does not force update "
"of metadata."
msgstr ""
"ファイル記述子 *fd* を持つファイルのディスクへの書き込みを強制します。メタ"
"データの更新は強制しません。"

#: ../../library/os.rst:774
msgid "This function is not available on MacOS."
msgstr "この関数は MacOS では利用できません。"

#: ../../library/os.rst:779
msgid ""
"Return system configuration information relevant to an open file. *name* "
"specifies the configuration value to retrieve; it may be a string which is "
"the name of a defined system value; these names are specified in a number of "
"standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define "
"additional names as well.  The names known to the host operating system are "
"given in the ``pathconf_names`` dictionary.  For configuration variables not "
"included in that mapping, passing an integer for *name* is also accepted."
msgstr ""
"開いているファイルに関連するシステム設定情報を返します。 *name* は取得する設"
"定名を指定します。これは、いくつかの標準 (POSIX.1 、 Unix 95 、 Unix 98 その"
"他 ) で定義された定義済みのシステム値名の文字列である場合があります。プラット"
"フォームによっては別の名前も定義されています。ホストオペレーティングシステム"
"の関知する名前は ``pathconf_names`` 辞書で与えられています。このマップ型オブ"
"ジェクトに含まれていない構成変数については、 *name* に整数を渡してもかまいま"
"せん。"

#: ../../library/os.rst:787 ../../library/os.rst:1844
msgid ""
"If *name* is a string and is not known, :exc:`ValueError` is raised.  If a "
"specific value for *name* is not supported by the host system, even if it is "
"included in ``pathconf_names``, an :exc:`OSError` is raised with :const:"
"`errno.EINVAL` for the error number."
msgstr ""
"*name* が不明の文字列である場合、 :exc:`ValueError` を送出します。 *name* の"
"特定の値がホストシステムでサポートされていない場合、 ``pathconf_names`` に含"
"まれていたとしても、 :const:`errno.EINVAL` をエラー番号として :exc:`OSError` "
"を送出します。"

#: ../../library/os.rst:792
msgid "As of Python 3.3, this is equivalent to ``os.pathconf(fd, name)``."
msgstr "Python 3.3 以降では ``os.pathconf(fd, name)`` と等価です。"

#: ../../library/os.rst:799
msgid ""
"Get the status of the file descriptor *fd*. Return a :class:`stat_result` "
"object."
msgstr ""
"ファイル記述子 *fd* の状態を取得します。:class:`stat_result` オブジェクトを返"
"します。"

#: ../../library/os.rst:802
msgid "As of Python 3.3, this is equivalent to ``os.stat(fd)``."
msgstr "Python 3.3 以降では ``os.stat(fd)`` と等価です。"

#: ../../library/os.rst:806 ../../library/os.rst:1697
msgid "The :func:`.stat` function."
msgstr ":func:`.stat` 関数。"

#: ../../library/os.rst:811
msgid ""
"Return information about the filesystem containing the file associated with "
"file descriptor *fd*, like :func:`statvfs`.  As of Python 3.3, this is "
"equivalent to ``os.statvfs(fd)``."
msgstr ""
":func:`statvfs` と同様に、ファイル記述子 *fd* に関連付けられたファイルが格納"
"されているファイルシステムに関する情報を返します。Python 3.3 以降では ``os."
"statvfs(fd)`` と等価です。"

#: ../../library/os.rst:820
msgid ""
"Force write of file with filedescriptor *fd* to disk.  On Unix, this calls "
"the native :c:func:`fsync` function; on Windows, the MS :c:func:`_commit` "
"function."
msgstr ""
"ファイル記述子 *fd* を持つファイルのディスクへの書き込みを強制します。 Unix "
"では、ネイティブの :c:func:`fsync` 関数を、 Windows では :c:func:`_commit` 関"
"数を呼び出します。"

#: ../../library/os.rst:823
msgid ""
"If you're starting with a buffered Python :term:`file object` *f*, first do "
"``f.flush()``, and then do ``os.fsync(f.fileno())``, to ensure that all "
"internal buffers associated with *f* are written to disk."
msgstr ""
"Python の :term:`ファイルオブジェクト <file object>` *f* を使う場合、*f* の内"
"部バッファを確実にディスクに書き込むために、まず ``f.flush()`` を、その後 "
"``os.fsync(f.fileno())`` を実行してください。"

#: ../../library/os.rst:832
msgid ""
"Truncate the file corresponding to file descriptor *fd*, so that it is at "
"most *length* bytes in size.  As of Python 3.3, this is equivalent to ``os."
"truncate(fd, length)``."
msgstr ""
"ファイル記述子 *fd* に対応するファイルを、サイズが最長で *length* バイトにな"
"るように切り詰めます。Python 3.3 以降では ``os.truncate(fd, length)`` と等価"
"です。"

#: ../../library/os.rst:838 ../../library/os.rst:2642
msgid "Added support for Windows"
msgstr "Windows サポートを追加しました。"

#: ../../library/os.rst:843
msgid ""
"Get the blocking mode of the file descriptor: ``False`` if the :data:"
"`O_NONBLOCK` flag is set, ``True`` if the flag is cleared."
msgstr ""
"記述子のブロッキングモードを取得します。\n"
":data:`O_NONBLOCK` フラグが設定されている場合は ``False`` で、フラグがクリア"
"されている場合は ``True`` です。"

#: ../../library/os.rst:846
msgid "See also :func:`set_blocking` and :meth:`socket.socket.setblocking`."
msgstr ""
":func:`set_blocking` および :meth:`socket.socket.setblocking` も参照してくだ"
"さい。"

#: ../../library/os.rst:854
msgid ""
"Return ``True`` if the file descriptor *fd* is open and connected to a tty(-"
"like) device, else ``False``."
msgstr ""
"ファイル記述子 *fd* がオープンされていて、 tty (のような) デバイスに接続され"
"ている場合、 ``True`` を返します。そうでない場合は ``False`` を返します。"

#: ../../library/os.rst:860
msgid ""
"Apply, test or remove a POSIX lock on an open file descriptor. *fd* is an "
"open file descriptor. *cmd* specifies the command to use - one of :data:"
"`F_LOCK`, :data:`F_TLOCK`, :data:`F_ULOCK` or :data:`F_TEST`. *len* "
"specifies the section of the file to lock."
msgstr ""
"オープンされたファイル記述子に対して、POSIX ロックの適用、テスト、解除を行い"
"ます。*fd* はオープンされたファイル記述子です。*cmd* には使用するコマンド (:"
"data:`F_LOCK`、:data:`F_TLOCK`、:data:`F_ULOCK`、あるいは :data:`F_TEST` のい"
"ずれか一つ) を指定します。*len* にはロックするファイルのセクションを指定しま"
"す。"

#: ../../library/os.rst:876
msgid "Flags that specify what action :func:`lockf` will take."
msgstr ":func:`lockf` がとる動作を指定するフラグです。"

#: ../../library/os.rst:885
msgid ""
"Set the current position of file descriptor *fd* to position *pos*, modified "
"by *how*: :const:`SEEK_SET` or ``0`` to set the position relative to the "
"beginning of the file; :const:`SEEK_CUR` or ``1`` to set it relative to the "
"current position; :const:`SEEK_END` or ``2`` to set it relative to the end "
"of the file. Return the new cursor position in bytes, starting from the "
"beginning."
msgstr ""
"ファイル記述子 *fd* の現在の位置を *pos* に設定します。 *pos* の意味は *how* "
"で次のように修飾されます。ファイルの先頭からの相対位置には :const:`SEEK_SET` "
"か ``0`` を、現在の位置からの相対位置には :const:`SEEK_CUR` か ``1`` を、ファ"
"イルの末尾からの相対位置には :const:`SEEK_END` か ``2`` を設定します。戻り値"
"は、新しいカーソル位置のファイルの先頭からのバイト数です。"

#: ../../library/os.rst:896
msgid ""
"Parameters to the :func:`lseek` function. Their values are 0, 1, and 2, "
"respectively."
msgstr ":func:`lseek` 関数に渡すパラメーター。値は順に 0, 1, 2 です。"

#: ../../library/os.rst:899
msgid ""
"Some operating systems could support additional values, like :data:`os."
"SEEK_HOLE` or :data:`os.SEEK_DATA`."
msgstr ""
"一部のオペレーティングシステムは :data:`os.SEEK_HOLE` や :data:`os."
"SEEK_DATA` など、追加の値をサポートすることがあります。"

#: ../../library/os.rst:906
msgid ""
"Open the file *path* and set various flags according to *flags* and possibly "
"its mode according to *mode*.  When computing *mode*, the current umask "
"value is first masked out.  Return the file descriptor for the newly opened "
"file. The new file descriptor is :ref:`non-inheritable <fd_inheritance>`."
msgstr ""
"ファイル *path* を開き、*flag* に従って様々なフラグを設定し、可能なら *mode* "
"に従ってファイルモードを設定します。*mode* を計算する際、まず現在の umask 値"
"でマスクされます。新たに開いたファイルのファイル記述子を返します。新しいファ"
"イル記述子は :ref:`継承不可<fd_inheritance>` です。"

#: ../../library/os.rst:911
msgid ""
"For a description of the flag and mode values, see the C run-time "
"documentation; flag constants (like :const:`O_RDONLY` and :const:`O_WRONLY`) "
"are defined in the :mod:`os` module.  In particular, on Windows adding :"
"const:`O_BINARY` is needed to open files in binary mode."
msgstr ""
"フラグとファイルモードの値についての詳細は C ランタイムのドキュメントを参照し"
"てください; (:const:`O_RDONLY` や :const:`O_WRONLY` のような) フラグ定数は :"
"mod:`os` モジュールでも定義されています。特に、Windows ではバイナリモードで"
"ファイルを開く時に :const:`O_BINARY` を加える必要があります。"

#: ../../library/os.rst:916
msgid ""
"This function can support :ref:`paths relative to directory descriptors "
"<dir_fd>` with the *dir_fd* parameter."
msgstr ""
"この関数は *dir_fd* パラメタで :ref:`ディレクトリ記述子への相対パス "
"<dir_fd>` をサポートしています。"

#: ../../library/os.rst:924
msgid ""
"This function is intended for low-level I/O.  For normal usage, use the "
"built-in function :func:`open`, which returns a :term:`file object` with :"
"meth:`~file.read` and :meth:`~file.write` methods (and many more).  To wrap "
"a file descriptor in a file object, use :func:`fdopen`."
msgstr ""
"この関数は低水準の I/O 向けのものです。\n"
"通常の利用では、組み込み関数 :func:`open` を使用してください。\n"
":func:`open` は :meth:`~file.read` や :meth:`~file.write` (そしてさらに多く"
"の) メソッドを持つ :term:`ファイルオブジェクト <file object>` を返します。\n"
"ファイル記述子をファイルオブジェクトでラップするには :func:`fdopen` を使用し"
"てください。"

#: ../../library/os.rst:929 ../../library/os.rst:1729 ../../library/os.rst:1788
#: ../../library/os.rst:1810 ../../library/os.rst:1887
#: ../../library/os.rst:1908
msgid "The *dir_fd* argument."
msgstr "引数 *dir_fd* が追加されました。"

#: ../../library/os.rst:932 ../../library/os.rst:1115 ../../library/os.rst:1233
#: ../../library/os.rst:3551
msgid ""
"If the system call is interrupted and the signal handler does not raise an "
"exception, the function now retries the system call instead of raising an :"
"exc:`InterruptedError` exception (see :pep:`475` for the rationale)."
msgstr ""
"システムコールが中断されシグナルハンドラが例外を送出しなかった場合、この関数"
"は :exc:`InterruptedError` 例外を送出する代わりにシステムコールを再試行するよ"
"うになりました (論拠については :pep:`475` を参照してください)。"

#: ../../library/os.rst:937 ../../library/os.rst:1436 ../../library/os.rst:1463
#: ../../library/os.rst:1492 ../../library/os.rst:1536
#: ../../library/os.rst:1568 ../../library/os.rst:1599
#: ../../library/os.rst:1612 ../../library/os.rst:1623
#: ../../library/os.rst:1676 ../../library/os.rst:1732
#: ../../library/os.rst:1768 ../../library/os.rst:1791
#: ../../library/os.rst:1813 ../../library/os.rst:1854
#: ../../library/os.rst:1890 ../../library/os.rst:1911
#: ../../library/os.rst:1928 ../../library/os.rst:1999
#: ../../library/os.rst:2248 ../../library/os.rst:2496
#: ../../library/os.rst:2645 ../../library/os.rst:2659
#: ../../library/os.rst:2699 ../../library/os.rst:2792
#: ../../library/os.rst:2851 ../../library/os.rst:2886
#: ../../library/os.rst:3027 ../../library/os.rst:3340
msgid "Accepts a :term:`path-like object`."
msgstr ":term:`path-like object` を受け入れるようになりました。"

#: ../../library/os.rst:940
msgid ""
"The following constants are options for the *flags* parameter to the :func:"
"`~os.open` function.  They can be combined using the bitwise OR operator ``|"
"``.  Some of them are not available on all platforms.  For descriptions of "
"their availability and use, consult the :manpage:`open(2)` manual page on "
"Unix or `the MSDN <https://msdn.microsoft.com/en-us/library/z0kc8e3z.aspx>`_ "
"on Windows."
msgstr ""
"以下の定数は :func:`~os.open` 関数の *flags* 引数に利用します。これらの定数"
"は、ビット単位に OR 演算子 ``|`` で組み合わせることができます。一部、すべての"
"プラットフォームでは使用できない定数があります。利用可能かどうかや使い方につ"
"いては、Unix では :manpage:`open(2)`、Windows では `MSDN <https://msdn."
"microsoft.com/en-us/library/z0kc8e3z.aspx>`_ を参照してください。"

#: ../../library/os.rst:955
msgid "The above constants are available on Unix and Windows."
msgstr "上記の定数は Unix および Windows で利用可能です。"

#: ../../library/os.rst:966
msgid "The above constants are only available on Unix."
msgstr "上記の定数は Unix でのみ利用可能です。"

#: ../../library/os.rst:968
msgid "Add :data:`O_CLOEXEC` constant."
msgstr "定数 :data:`O_CLOEXEC` が追加されました。"

#: ../../library/os.rst:979
msgid "The above constants are only available on Windows."
msgstr "上記の定数は Windows でのみ利用可能です。"

#: ../../library/os.rst:992
msgid ""
"The above constants are extensions and not present if they are not defined "
"by the C library."
msgstr ""
"上記の定数は拡張仕様であり、Cライブラリで定義されていない場合は利用できませ"
"ん。"

#: ../../library/os.rst:995
msgid ""
"Add :data:`O_PATH` on systems that support it. Add :data:`O_TMPFILE`, only "
"available on Linux Kernel 3.11   or newer."
msgstr ""
":data:`O_PATH` を、それをサポートするシステムで追加しました。また、 :data:"
"`O_TMPFILE` を追加しました (Linux Kernel 3.11 以降でのみ利用可能です)。"

#: ../../library/os.rst:1005
msgid ""
"Open a new pseudo-terminal pair. Return a pair of file descriptors "
"``(master, slave)`` for the pty and the tty, respectively. The new file "
"descriptors are :ref:`non-inheritable <fd_inheritance>`. For a (slightly) "
"more portable approach, use the :mod:`pty` module."
msgstr ""
"新しい擬似端末のペアを開きます。pty および tty を表すファイル記述子のペア "
"``(master, slave)`` を返します。新しいファイル記述子は :ref:`継承不可 "
"<fd_inheritance>` です。(若干) 可搬性の高いアプローチには :mod:`pty` を使用し"
"てください。"

#: ../../library/os.rst:1010 ../../library/os.rst:1036
#: ../../library/os.rst:3200
msgid "Availability: some flavors of Unix."
msgstr "利用できる環境 : 一部の Unix 互換環境。"

#: ../../library/os.rst:1012 ../../library/os.rst:1024
msgid "The new file descriptors are now non-inheritable."
msgstr "新しいファイル記述子が継承不可になりました。"

#: ../../library/os.rst:1018
msgid ""
"Create a pipe.  Return a pair of file descriptors ``(r, w)`` usable for "
"reading and writing, respectively. The new file descriptor is :ref:`non-"
"inheritable <fd_inheritance>`."
msgstr ""
"パイプを作成します。読み込み、書き込みに使うことの出来るファイル記述子のペア "
"``(r, w)``  を返します。新しいファイル記述子は :ref:`継承不可 "
"<fd_inheritance>` です。"

#: ../../library/os.rst:1030
msgid ""
"Create a pipe with *flags* set atomically. *flags* can be constructed by "
"ORing together one or more of these values: :data:`O_NONBLOCK`, :data:"
"`O_CLOEXEC`. Return a pair of file descriptors ``(r, w)`` usable for reading "
"and writing, respectively."
msgstr ""
"*flags* を設定したパイプをアトミックに作成します。*flags* には値 :data:"
"`O_NONBLOCK` と :data:`O_CLOEXEC` を一つ以上論理和指定できます。読み込み、書"
"き込みに使うことの出来るファイル記述子のペア ``(r, w)``  を返します。"

#: ../../library/os.rst:1043
msgid ""
"Ensures that enough disk space is allocated for the file specified by *fd* "
"starting from *offset* and continuing for *len* bytes."
msgstr ""
"*fd* で指定されたファイルに対し、開始位置 *offset* から *len* バイト分割り当"
"てるに十分なディスクスペースを確保します。"

#: ../../library/os.rst:1053
msgid ""
"Announces an intention to access data in a specific pattern thus allowing "
"the kernel to make optimizations. The advice applies to the region of the "
"file specified by *fd* starting at *offset* and continuing for *len* bytes. "
"*advice* is one of :data:`POSIX_FADV_NORMAL`, :data:"
"`POSIX_FADV_SEQUENTIAL`, :data:`POSIX_FADV_RANDOM`, :data:"
"`POSIX_FADV_NOREUSE`, :data:`POSIX_FADV_WILLNEED` or :data:"
"`POSIX_FADV_DONTNEED`."
msgstr ""
"データへアクセスする意思を、パターンを指定して宣言します。これによりカーネル"
"が最適化を行えるようになります。*advice* は *fd* で指定されたファイルに対し、"
"開始位置 *offset* から *len* バイト分の領域に適用されます。*advice* には :"
"data:`POSIX_FADV_NORMAL`、:data:`POSIX_FADV_SEQUENTIAL`、:data:"
"`POSIX_FADV_RANDOM`、:data:`POSIX_FADV_NOREUSE`、:data:"
"`POSIX_FADV_WILLNEED`、または :data:`POSIX_FADV_DONTNEED` のいずれか一つを指"
"定します。"

#: ../../library/os.rst:1073
msgid ""
"Flags that can be used in *advice* in :func:`posix_fadvise` that specify the "
"access pattern that is likely to be used."
msgstr ""
":func:`posix_fadvise` において、使われるであろうアクセスパターンを指定する "
"*advice* に使用できるフラグです。"

#: ../../library/os.rst:1083
msgid ""
"Read from a file descriptor, *fd*, at a position of *offset*. It will read "
"up to *buffersize* number of bytes. The file offset remains unchanged."
msgstr ""
"ファイル記述子 *fd* に対し、位置 *offset* から読み込みます。読み込み量は最大"
"で *buffersize* バイトです。ファイルオフセットは変化しません。"

#: ../../library/os.rst:1093
msgid ""
"Write *bytestring* to a file descriptor, *fd*, from *offset*, leaving the "
"file offset unchanged."
msgstr ""
"ファイル記述子 *fd* に対し、位置 *offset* から *bytestring* を書き出します。"
"ファイルオフセットは変化しません。"

#: ../../library/os.rst:1103
msgid ""
"Read at most *n* bytes from file descriptor *fd*. Return a bytestring "
"containing the bytes read.  If the end of the file referred to by *fd* has "
"been reached, an empty bytes object is returned."
msgstr ""
"ファイル記述子 *fd* から最大で *n* バイト読み込みます。読み込んだバイト分のバ"
"イト列を返します。*fd* が参照しているファイルの終端に達した場合、空のバイト列"
"が返されます。"

#: ../../library/os.rst:1109
msgid ""
"This function is intended for low-level I/O and must be applied to a file "
"descriptor as returned by :func:`os.open` or :func:`pipe`.  To read a \"file "
"object\" returned by the built-in function :func:`open` or by :func:`popen` "
"or :func:`fdopen`, or :data:`sys.stdin`, use its :meth:`~file.read` or :meth:"
"`~file.readline` methods."
msgstr ""
"この関数は低水準の I/O 向けのもので、 :func:`os.open` や :func:`pipe` が返す"
"ファイル記述子に対して使用されなければなりません。\n"
"組み込み関数 :func:`open` や :func:`popen` 、 :func:`fdopen` 、あるいは :"
"data:`sys.stdin` が返す \"ファイルオブジェクト\" を読み込むには、オブジェクト"
"の :meth:`~file.read` か :meth:`~file.readline` メソッドを使用してください。"

#: ../../library/os.rst:1124
msgid ""
"Copy *count* bytes from file descriptor *in* to file descriptor *out* "
"starting at *offset*. Return the number of bytes sent. When EOF is reached "
"return 0."
msgstr ""
"ファイル記述子 *in* からファイル記述子 *out* への開始位置 *offset* へ "
"*count* バイトコピーします。\n"
"送信バイト数を返します。\n"
"EOF に達した場合は 0 を返します。"

#: ../../library/os.rst:1128
msgid ""
"The first function notation is supported by all platforms that define :func:"
"`sendfile`."
msgstr ""
"前者の関数表記は :func:`sendfile` が定義されているすべてのプラットフォームで"
"サポートされています。"

#: ../../library/os.rst:1131
msgid ""
"On Linux, if *offset* is given as ``None``, the bytes are read from the "
"current position of *in* and the position of *in* is updated."
msgstr ""
"Linux では、*offset* に ``None`` が与えられると、バイト列は *in* の現在の位置"
"から読み込まれ、*in* の位置は更新されます。"

#: ../../library/os.rst:1134
msgid ""
"The second case may be used on Mac OS X and FreeBSD where *headers* and "
"*trailers* are arbitrary sequences of buffers that are written before and "
"after the data from *in* is written. It returns the same as the first case."
msgstr ""
"後者は Mac OS X および FreeBSD で使用される場合があります。*headers* および "
"*trailers* は任意のバッファのシーケンス型オブジェクトで、*in* からのデータが"
"書き出される前と後に書き出されます。返り値は前者と同じです。"

#: ../../library/os.rst:1138
msgid ""
"On Mac OS X and FreeBSD, a value of 0 for *count* specifies to send until "
"the end of *in* is reached."
msgstr ""
"Mac OS X と FreeBSD では、*count* の値に 0 を指定すると、*in* の末尾に達する"
"まで送信します。"

#: ../../library/os.rst:1141
msgid ""
"All platforms support sockets as *out* file descriptor, and some platforms "
"allow other types (e.g. regular file, pipe) as well."
msgstr ""
"全てのプラットフォームはソケットをファイル記述子 *out* としてサポートし、ある"
"プラットフォームは他の種類 (例えば、通常のファイル、パイプ) も同様にサポート"
"します。"

#: ../../library/os.rst:1144
msgid ""
"Cross-platform applications should not use *headers*, *trailers* and *flags* "
"arguments."
msgstr ""
"クロスプラットフォームのアプリケーションは *headers*、*trailers* ならびに "
"*flags* 引数を使用するべきではありません。"

#: ../../library/os.rst:1151
msgid ""
"For a higher-level wrapper of :func:`sendfile`, see :meth:`socket.socket."
"sendfile`."
msgstr ""
":func:`sendfile` のより高水準のラッパについては :meth:`socket.socket."
"sendfile` を参照してください。"

#: ../../library/os.rst:1159
msgid ""
"Set the blocking mode of the specified file descriptor. Set the :data:"
"`O_NONBLOCK` flag if blocking is ``False``, clear the flag otherwise."
msgstr ""
"指定されたファイル記述子のブロッキングモードを設定します。\n"
"ブロッキングが ``False`` の場合 :data:`O_NONBLOCK` フラグを設定し、そうでない"
"場合はクリアします。"

#: ../../library/os.rst:1162
msgid "See also :func:`get_blocking` and :meth:`socket.socket.setblocking`."
msgstr ""
":func:`get_blocking` および :meth:`socket.socket.setblocking` も参照してくだ"
"さい。"

#: ../../library/os.rst:1173
msgid ""
"Parameters to the :func:`sendfile` function, if the implementation supports "
"them."
msgstr ""
"実装がサポートしている場合 :func:`sendfile` 関数に渡すパラメーターです。"

#: ../../library/os.rst:1183
msgid ""
"Read from a file descriptor *fd* into a number of mutable :term:`bytes-like "
"objects <bytes-like object>` *buffers*. :func:`~os.readv` will transfer data "
"into each buffer until it is full and then move on to the next buffer in the "
"sequence to hold the rest of the data. :func:`~os.readv` returns the total "
"number of bytes read (which may be less than the total capacity of all the "
"objects)."
msgstr ""
"ファイル記述子 *fd* から、いくつかのミュータブルな :term:`バイトライクオブ"
"ジェクト <bytes-like object>` *buffers* に読み込みます。 :func:`~os.readv` "
"は、各バッファーにいっぱいになるまでデータを転送したのちシーケンス内の次の"
"バッファーに移動し、データの残りを転送します。 :func:`~os.readv` は、読み込ん"
"だ合計バイト数 (すべてのオブジェクトの合計容量より小さい場合があります) を返"
"します。"

#: ../../library/os.rst:1197
msgid ""
"Return the process group associated with the terminal given by *fd* (an open "
"file descriptor as returned by :func:`os.open`)."
msgstr ""
"*fd* (:func:`os.open` が返すオープンしたファイル記述子 ) で与えられる端末に関"
"連付けられたプロセスグループを返します。"

#: ../../library/os.rst:1205
msgid ""
"Set the process group associated with the terminal given by *fd* (an open "
"file descriptor as returned by :func:`os.open`) to *pg*."
msgstr ""
"*fd* (:func:`os.open` が返すオープンしたファイル記述子 ) で与えられる端末に関"
"連付けられたプロセスグループを *pg* に設定します。"

#: ../../library/os.rst:1213
msgid ""
"Return a string which specifies the terminal device associated with file "
"descriptor *fd*.  If *fd* is not associated with a terminal device, an "
"exception is raised."
msgstr ""
"ファイル記述子 *fd* に関連付けられている端末デバイスを特定する文字列を返しま"
"す。 *fd* が端末に関連付けられていない場合、例外が送出されます。"

#: ../../library/os.rst:1222
msgid ""
"Write the bytestring in *str* to file descriptor *fd*. Return the number of "
"bytes actually written."
msgstr ""
"*str* のバイト列をファイル記述子 *fd* に書き出します。実際に書き出されたバイ"
"ト数が返されます。"

#: ../../library/os.rst:1227
msgid ""
"This function is intended for low-level I/O and must be applied to a file "
"descriptor as returned by :func:`os.open` or :func:`pipe`.  To write a "
"\"file object\" returned by the built-in function :func:`open` or by :func:"
"`popen` or :func:`fdopen`, or :data:`sys.stdout` or :data:`sys.stderr`, use "
"its :meth:`~file.write` method."
msgstr ""
"この関数は低水準の I/O 向けのもので、 :func:`os.open` や :func:`pipe` が返す"
"ファイル記述子に対して使用しなければなりません。\n"
"組み込み関数 :func:`open` や :func:`popen` 、 :func:`fdopen` 、あるいは :"
"data:`sys.stdout` や :data:`sys.stderr` が返す \"ファイルオブジェクト\" に書"
"き込むには、オブジェクトの :meth:`~file.write` メソッドを使用してください。"

#: ../../library/os.rst:1241
msgid ""
"Write the contents of *buffers* to file descriptor *fd*. *buffers* must be a "
"sequence of :term:`bytes-like objects <bytes-like object>`. Buffers are "
"processed in array order. Entire contents of first buffer is written before "
"proceeding to second, and so on. The operating system may set a limit "
"(sysconf() value SC_IOV_MAX) on the number of buffers that can be used."
msgstr ""
"*buffers* の内容をファイル記述子 *fd* へ書き出します。 *buffers* は :term:"
"`bytes-like オブジェクト<bytes-like object>` のシーケンスでなければなりませ"
"ん。バッファは配列の順番で処理されます。最初のバッファの内容全体は 2 番目の"
"バッファに進む前に書き込まれ、その次も同様です。オペレーティングシステムは使"
"われるバッファの数を制限するかもしれません (sysconf() 値の SC_IOV_MAX) 。"

#: ../../library/os.rst:1247
msgid ""
":func:`~os.writev` writes the contents of each object to the file descriptor "
"and returns the total number of bytes written."
msgstr ""
":func:`~os.writev` は各オブジェクトの内容をファイル記述子に書き出し、書き出さ"
"れたバイト数の合計を返します。"

#: ../../library/os.rst:1258
msgid "Querying the size of a terminal"
msgstr "ターミナルのサイズの問い合わせ"

#: ../../library/os.rst:1264
msgid ""
"Return the size of the terminal window as ``(columns, lines)``, tuple of "
"type :class:`terminal_size`."
msgstr ""
"ターミナル (端末) のサイズ ``(columns, lines)`` を、:class:`terminal_size` 型"
"のタプルで返します。"

#: ../../library/os.rst:1267
msgid ""
"The optional argument ``fd`` (default ``STDOUT_FILENO``, or standard output) "
"specifies which file descriptor should be queried."
msgstr ""
"オプションの引数 ``fd`` には問い合わせるファイル記述子を指定します (デフォル"
"トは ``STDOUT_FILENO``、または標準出力)。"

#: ../../library/os.rst:1270
msgid ""
"If the file descriptor is not connected to a terminal, an :exc:`OSError` is "
"raised."
msgstr ""
"ファイル記述子が接続されていなかった場合、 :exc:`OSError` が送出されます。"

#: ../../library/os.rst:1273
msgid ""
":func:`shutil.get_terminal_size` is the high-level function which should "
"normally be used, ``os.get_terminal_size`` is the low-level implementation."
msgstr ""
"通常は高水準関数である :func:`shutil.get_terminal_size` を使用してください。"
"``os.get_terminal_size`` は低水準の実装です。"

#: ../../library/os.rst:1281
msgid ""
"A subclass of tuple, holding ``(columns, lines)`` of the terminal window "
"size."
msgstr ""
"ターミナルウィンドウのサイズ ``(columns, lines)`` を保持するタプルのサブクラ"
"スです。"

#: ../../library/os.rst:1285
msgid "Width of the terminal window in characters."
msgstr "ターミナルウィンドウの横幅 (文字数) です。"

#: ../../library/os.rst:1289
msgid "Height of the terminal window in characters."
msgstr "ターミナルウィンドウの高さ (文字数) です。"

#: ../../library/os.rst:1295
msgid "Inheritance of File Descriptors"
msgstr "ファイル記述子の継承"

#: ../../library/os.rst:1299
msgid ""
"A file descriptor has an \"inheritable\" flag which indicates if the file "
"descriptor can be inherited by child processes.  Since Python 3.4, file "
"descriptors created by Python are non-inheritable by default."
msgstr ""
"ファイル記述子には「継承可能 (inheritable)」フラグというものがあって、これに"
"より子プロセスにファイル記述子が引き継がれるかどうかが決定されます。Python "
"3.4 より、 Python によって作成されるファイル記述子はデフォルトで継承不可 "
"(non-inheritable) となりました。"

#: ../../library/os.rst:1303
msgid ""
"On UNIX, non-inheritable file descriptors are closed in child processes at "
"the execution of a new program, other file descriptors are inherited."
msgstr ""
"UNIX の場合、継承不可のファイル記述子は新規プロセス実行時にクローズされ、そう"
"でないファイル記述子は引き継がれます。"

#: ../../library/os.rst:1306
msgid ""
"On Windows, non-inheritable handles and file descriptors are closed in child "
"processes, except for standard streams (file descriptors 0, 1 and 2: stdin, "
"stdout and stderr), which are always inherited.  Using :func:`spawn\\* "
"<spawnl>` functions, all inheritable handles and all inheritable file "
"descriptors are inherited. Using the :mod:`subprocess` module, all file "
"descriptors except standard streams are closed, and inheritable handles are "
"only inherited if the *close_fds* parameter is ``False``."
msgstr ""
"Windows の場合は、標準ストリームを除き、継承不可のハンドルと継承不可のファイ"
"ル記述子は子プロセスでクローズされます。標準ストリーム (ファイル記述子の 0, "
"1, 2: 標準入力, 標準出力, 標準エラー出力) は常に引き継がれます。 :func:"
"`spawn\\* <spawnl>` 関数を使う場合、全ての継承可能なハンドルと全ての継承可能"
"なファイル記述子は引き継がれます。 :mod:`subprocess` モジュールを使う場合、標"
"準ストリームを除く全てのファイル記述子はクローズされ、継承可能なハンドルは "
"*close_fds* 引数が ``False`` の場合にのみ引き継がれます。"

#: ../../library/os.rst:1316
msgid ""
"Get the \"inheritable\" flag of the specified file descriptor (a boolean)."
msgstr ""
"指定したファイル記述子の「継承可能 (inheritable)」フラグを取得します "
"(boolean)。"

#: ../../library/os.rst:1320
msgid "Set the \"inheritable\" flag of the specified file descriptor."
msgstr ""
"指定したファイル記述子の「継承可能 (inheritable)」フラグをセットします。"

#: ../../library/os.rst:1324
msgid "Get the \"inheritable\" flag of the specified handle (a boolean)."
msgstr ""
"指定したハンドルの「継承可能 (inheritable)」フラグを取得します (boolean)。"

#: ../../library/os.rst:1326 ../../library/os.rst:1332
#: ../../library/os.rst:3375 ../../library/os.rst:3404
msgid "Availability: Windows."
msgstr "利用できる環境 : Windows."

#: ../../library/os.rst:1330
msgid "Set the \"inheritable\" flag of the specified handle."
msgstr "指定したハンドルの「継承可能 (inheritable)」フラグをセットします。"

#: ../../library/os.rst:1338
msgid "Files and Directories"
msgstr "ファイルとディレクトリ"

#: ../../library/os.rst:1340
msgid ""
"On some Unix platforms, many of these functions support one or more of these "
"features:"
msgstr ""
"一部の Unix プラットフォームでは、このセクションの関数の多くが以下の機能を一"
"つ以上サポートしています。"

#: ../../library/os.rst:1345
msgid ""
"**specifying a file descriptor:** For some functions, the *path* argument "
"can be not only a string giving a path name, but also a file descriptor.  "
"The function will then operate on the file referred to by the descriptor.  "
"(For POSIX systems, Python will call the ``f...`` version of the function.)"
msgstr ""
"**ファイル記述子の指定:** 一部の関数では、*path* 引数はパス名を示す文字列だけ"
"でなく、ファイル記述子でも指定できます。関数はファイル記述子が参照するファイ"
"ルを操作します。(POSIX システムでは、Python は関数の ``f...`` バージョンを呼"
"び出します)"

#: ../../library/os.rst:1351
msgid ""
"You can check whether or not *path* can be specified as a file descriptor on "
"your platform using :data:`os.supports_fd`.  If it is unavailable, using it "
"will raise a :exc:`NotImplementedError`."
msgstr ""
"そのプラットフォーム上で *path* にファイル記述子を使用できるかどうかは、:"
"data:`os.supports_fd` で確認できます。使用できない場合 :exc:"
"`NotImplementedError` が送出されます。"

#: ../../library/os.rst:1355
msgid ""
"If the function also supports *dir_fd* or *follow_symlinks* arguments, it is "
"an error to specify one of those when supplying *path* as a file descriptor."
msgstr ""
"その関数が引数に *dir_fd* または *follow_symlinks* もサポートしている場合、"
"*path* にファイル記述子を指定した時にそれらのいずれかを指定するとエラーになり"
"ます。"

#: ../../library/os.rst:1360
msgid ""
"**paths relative to directory descriptors:** If *dir_fd* is not ``None``, it "
"should be a file descriptor referring to a directory, and the path to "
"operate on should be relative; path will then be relative to that "
"directory.  If the path is absolute, *dir_fd* is ignored.  (For POSIX "
"systems, Python will call the ``...at`` or ``f...at`` version of the "
"function.)"
msgstr ""
"**ディレクトリ記述子への相対パス:** *dir_fd* が ``None`` ではない場合、その"
"ファイル記述子はディレクトリを参照しているはずであり、操作するパスは相対パス"
"であるべきです; パスはそのディレクトリへの相対パスになります。パスが絶対パス"
"であった場合、*dir_fd* は無視されます。(POSIX システムでは、Python は関数の "
"``...at`` または ``f...at`` バージョンを呼び出します)"

#: ../../library/os.rst:1366
msgid ""
"You can check whether or not *dir_fd* is supported on your platform using :"
"data:`os.supports_dir_fd`.  If it is unavailable, using it will raise a :exc:"
"`NotImplementedError`."
msgstr ""
"そのプラットフォーム上で *dir_fd* がサポートされているかどうかは、:data:`os."
"supports_dir_fd` で確認できます。サポートされていない場合 :exc:"
"`NotImplementedError` が送出されます。"

#: ../../library/os.rst:1372
msgid ""
"**not following symlinks:** If *follow_symlinks* is ``False``, and the last "
"element of the path to operate on is a symbolic link, the function will "
"operate on the symbolic link itself instead of the file the link points to.  "
"(For POSIX systems, Python will call the ``l...`` version of the function.)"
msgstr ""
"**シンボリックリンクをたどらない:** *follow_symlinks* が ``False`` で、かつ、"
"操作するパスの末尾の要素がシンボリックリンクの場合、その関数はリンクの指し示"
"す先のファイルではなく、シンボリックリンク自身を操作します。(POSIX システムで"
"は、Python は関数の ``l...`` バージョンを呼び出します)"

#: ../../library/os.rst:1378
msgid ""
"You can check whether or not *follow_symlinks* is supported on your platform "
"using :data:`os.supports_follow_symlinks`.  If it is unavailable, using it "
"will raise a :exc:`NotImplementedError`."
msgstr ""
"そのプラットフォーム上で *follow_symlinks* がサポートされているかどうかは、:"
"data:`os.supports_follow_symlinks` で確認できます。利用できない場合 :exc:"
"`NotImplementedError` が送出されます。"

#: ../../library/os.rst:1386
msgid ""
"Use the real uid/gid to test for access to *path*.  Note that most "
"operations will use the effective uid/gid, therefore this routine can be "
"used in a suid/sgid environment to test if the invoking user has the "
"specified access to *path*.  *mode* should be :const:`F_OK` to test the "
"existence of *path*, or it can be the inclusive OR of one or more of :const:"
"`R_OK`, :const:`W_OK`, and :const:`X_OK` to test permissions.  Return :const:"
"`True` if access is allowed, :const:`False` if not. See the Unix man page :"
"manpage:`access(2)` for more information."
msgstr ""
"実 uid/gid を使って *path* に対するアクセスが可能か調べます。ほとんどのオペ"
"レーティングシステムは実効 uid/gid を使うため、このルーチンは suid/sgid 環境"
"において、プログラムを起動したユーザーが *path* に対するアクセス権をもってい"
"るかを調べるために使われます。 *path* が存在するかどうかを調べるには *mode* "
"を :const:`F_OK` にします。ファイルアクセス権限 ( パーミッション ) を調べるに"
"は、 :const:`R_OK`, :const:`W_OK`, :const:`X_OK` から一つまたはそれ以上のフラ"
"グを論理和指定でとることもできます。アクセスが許可されている場合 :const:"
"`True` を、そうでない場合 :const:`False` を返します。詳細は :manpage:"
"`access(2)` の Unix マニュアルページを参照してください。"

#: ../../library/os.rst:1395
msgid ""
"This function can support specifying :ref:`paths relative to directory "
"descriptors <dir_fd>` and :ref:`not following symlinks <follow_symlinks>`."
msgstr ""
"この関数は :ref:`ディレクトリ記述子への相対パス <dir_fd>` および :ref:`シンボ"
"リックリンクをたどらない <follow_symlinks>` をサポートしています。"

#: ../../library/os.rst:1398
msgid ""
"If *effective_ids* is ``True``, :func:`access` will perform its access "
"checks using the effective uid/gid instead of the real uid/gid. "
"*effective_ids* may not be supported on your platform; you can check whether "
"or not it is available using :data:`os.supports_effective_ids`.  If it is "
"unavailable, using it will raise a :exc:`NotImplementedError`."
msgstr ""
"*effective_ids* が ``True`` の場合、:func:`access` は実 uid/gid ではなく実効 "
"uid/gid を使用してアクセス権を調べます。プラットフォームによっては "
"*effective_ids* がサポートされていない場合があります; サポートされているかど"
"うかは :data:`os.supports_effective_ids` で確認できます。利用できない場合 :"
"exc:`NotImplementedError` が送出されます。"

#: ../../library/os.rst:1406
msgid ""
"Using :func:`access` to check if a user is authorized to e.g. open a file "
"before actually doing so using :func:`open` creates a security hole, because "
"the user might exploit the short time interval between checking and opening "
"the file to manipulate it. It's preferable to use :term:`EAFP` techniques. "
"For example::"
msgstr ""
"ユーザーが、例えばファイルを開く権限を持っているかどうかを調べるために実際"
"に :func:`open` を行う前に :func:`access` を使用することはセキュリティホール"
"の原因になります。なぜなら、調べた時点とオープンした時点との時間差を利用して"
"そのユーザーがファイルを不当に操作してしまうかもしれないからです。その場合"
"は :term:`EAFP` テクニックを利用するのが望ましいやり方です。例えば ::"

#: ../../library/os.rst:1417
msgid "is better written as::"
msgstr "このコードは次のように書いたほうが良いです ::"

#: ../../library/os.rst:1429
msgid ""
"I/O operations may fail even when :func:`access` indicates that they would "
"succeed, particularly for operations on network filesystems which may have "
"permissions semantics beyond the usual POSIX permission-bit model."
msgstr ""
"I/O 操作は :func:`access` が成功を示した時でも失敗することがあります。特に"
"ネットワークファイルシステムが通常の POSIX のパーミッションビットモデルをはみ"
"出すアクセス権限操作を備える場合にはそのようなことが起こりえます。"

#: ../../library/os.rst:1433
msgid "Added the *dir_fd*, *effective_ids*, and *follow_symlinks* parameters."
msgstr ""
"引数 *dir_fd*、*effective_ids*、および *follow_symlinks* が追加されました。"

#: ../../library/os.rst:1445
msgid ""
"Values to pass as the *mode* parameter of :func:`access` to test the "
"existence, readability, writability and executability of *path*, "
"respectively."
msgstr ""
":func:`access` で *path* をテストする時に *mode* 引数に渡す値です。上からそれ"
"ぞれ、ファイルの存在、読み込み許可、書き込み許可、および実行許可になります。"

#: ../../library/os.rst:1454
msgid "Change the current working directory to *path*."
msgstr "現在の作業ディレクトリを *path* に設定します。"

#: ../../library/os.rst:1456
msgid ""
"This function can support :ref:`specifying a file descriptor <path_fd>`.  "
"The descriptor must refer to an opened directory, not an open file."
msgstr ""
"この関数は :ref:`ファイル記述子の指定 <path_fd>` をサポートしています。記述子"
"は、オープンしているファイルではなく、オープンしているディレクトリを参照して"
"いなければなりません。"

#: ../../library/os.rst:1459
msgid ""
"Added support for specifying *path* as a file descriptor on some platforms."
msgstr ""
"一部のプラットフォームで、*path* にファイル記述子の指定をサポートしました。"

#: ../../library/os.rst:1469
msgid ""
"Set the flags of *path* to the numeric *flags*. *flags* may take a "
"combination (bitwise OR) of the following values (as defined in the :mod:"
"`stat` module):"
msgstr ""
"*path* のフラグを *flags* に変更します。 *flags* は、以下の値 (:mod:`stat` モ"
"ジュールで定義されているもの ) をビット単位の論理和で組み合わせることができま"
"す :"

#: ../../library/os.rst:1472
msgid ":data:`stat.UF_NODUMP`"
msgstr ":data:`stat.UF_NODUMP`"

#: ../../library/os.rst:1473
msgid ":data:`stat.UF_IMMUTABLE`"
msgstr ":data:`stat.UF_IMMUTABLE`"

#: ../../library/os.rst:1474
msgid ":data:`stat.UF_APPEND`"
msgstr ":data:`stat.UF_APPEND`"

#: ../../library/os.rst:1475
msgid ":data:`stat.UF_OPAQUE`"
msgstr ":data:`stat.UF_OPAQUE`"

#: ../../library/os.rst:1476
msgid ":data:`stat.UF_NOUNLINK`"
msgstr ":data:`stat.UF_NOUNLINK`"

#: ../../library/os.rst:1477
msgid ":data:`stat.UF_COMPRESSED`"
msgstr ":data:`stat.UF_COMPRESSED`"

#: ../../library/os.rst:1478
msgid ":data:`stat.UF_HIDDEN`"
msgstr ":data:`stat.UF_HIDDEN`"

#: ../../library/os.rst:1479
msgid ":data:`stat.SF_ARCHIVED`"
msgstr ":data:`stat.SF_ARCHIVED`"

#: ../../library/os.rst:1480
msgid ":data:`stat.SF_IMMUTABLE`"
msgstr ":data:`stat.SF_IMMUTABLE`"

#: ../../library/os.rst:1481
msgid ":data:`stat.SF_APPEND`"
msgstr ":data:`stat.SF_APPEND`"

#: ../../library/os.rst:1482
msgid ":data:`stat.SF_NOUNLINK`"
msgstr ":data:`stat.SF_NOUNLINK`"

#: ../../library/os.rst:1483
msgid ":data:`stat.SF_SNAPSHOT`"
msgstr ":data:`stat.SF_SNAPSHOT`"

#: ../../library/os.rst:1485
msgid ""
"This function can support :ref:`not following symlinks <follow_symlinks>`."
msgstr ""
"この関数は :ref:`シンボリックリンクをたどらない <follow_symlinks>` をサポート"
"しています。"

#: ../../library/os.rst:1489
msgid "The *follow_symlinks* argument."
msgstr "引数 *follow_symlinks* を追加しました。"

#: ../../library/os.rst:1498
msgid ""
"Change the mode of *path* to the numeric *mode*. *mode* may take one of the "
"following values (as defined in the :mod:`stat` module) or bitwise ORed "
"combinations of them:"
msgstr ""
"*path* のモードを数値 *mode* に変更します。 *mode* は、 (:mod:`stat` モジュー"
"ルで定義されている ) 以下の値のいずれかまたはビット単位の論理和で組み合わせた"
"値を取り得ます :"

#: ../../library/os.rst:1502
msgid ":data:`stat.S_ISUID`"
msgstr ":data:`stat.S_ISUID`"

#: ../../library/os.rst:1503
msgid ":data:`stat.S_ISGID`"
msgstr ":data:`stat.S_ISGID`"

#: ../../library/os.rst:1504
msgid ":data:`stat.S_ENFMT`"
msgstr ":data:`stat.S_ENFMT`"

#: ../../library/os.rst:1505
msgid ":data:`stat.S_ISVTX`"
msgstr ":data:`stat.S_ISVTX`"

#: ../../library/os.rst:1506
msgid ":data:`stat.S_IREAD`"
msgstr ":data:`stat.S_IREAD`"

#: ../../library/os.rst:1507
msgid ":data:`stat.S_IWRITE`"
msgstr ":data:`stat.S_IWRITE`"

#: ../../library/os.rst:1508
msgid ":data:`stat.S_IEXEC`"
msgstr ":data:`stat.S_IEXEC`"

#: ../../library/os.rst:1509
msgid ":data:`stat.S_IRWXU`"
msgstr ":data:`stat.S_IRWXU`"

#: ../../library/os.rst:1510
msgid ":data:`stat.S_IRUSR`"
msgstr ":data:`stat.S_IRUSR`"

#: ../../library/os.rst:1511
msgid ":data:`stat.S_IWUSR`"
msgstr ":data:`stat.S_IWUSR`"

#: ../../library/os.rst:1512
msgid ":data:`stat.S_IXUSR`"
msgstr ":data:`stat.S_IXUSR`"

#: ../../library/os.rst:1513
msgid ":data:`stat.S_IRWXG`"
msgstr ":data:`stat.S_IRWXG`"

#: ../../library/os.rst:1514
msgid ":data:`stat.S_IRGRP`"
msgstr ":data:`stat.S_IRGRP`"

#: ../../library/os.rst:1515
msgid ":data:`stat.S_IWGRP`"
msgstr ":data:`stat.S_IWGRP`"

#: ../../library/os.rst:1516
msgid ":data:`stat.S_IXGRP`"
msgstr ":data:`stat.S_IXGRP`"

#: ../../library/os.rst:1517
msgid ":data:`stat.S_IRWXO`"
msgstr ":data:`stat.S_IRWXO`"

#: ../../library/os.rst:1518
msgid ":data:`stat.S_IROTH`"
msgstr ":data:`stat.S_IROTH`"

#: ../../library/os.rst:1519
msgid ":data:`stat.S_IWOTH`"
msgstr ":data:`stat.S_IWOTH`"

#: ../../library/os.rst:1520
msgid ":data:`stat.S_IXOTH`"
msgstr ":data:`stat.S_IXOTH`"

#: ../../library/os.rst:1522 ../../library/os.rst:1545
#: ../../library/os.rst:2691
msgid ""
"This function can support :ref:`specifying a file descriptor <path_fd>`, :"
"ref:`paths relative to directory descriptors <dir_fd>` and :ref:`not "
"following symlinks <follow_symlinks>`."
msgstr ""
"この関数は :ref:`ファイル記述子の指定 <path_fd>` 、 :ref:`ディレクトリ記述子"
"への相対パス <dir_fd>` 、および :ref:`シンボリックリンクをたどらない "
"<follow_symlinks>` をサポートしています。"

#: ../../library/os.rst:1528
msgid ""
"Although Windows supports :func:`chmod`, you can only set the file's read-"
"only flag with it (via the ``stat.S_IWRITE`` and ``stat.S_IREAD`` constants "
"or a corresponding integer value).  All other bits are ignored."
msgstr ""
"Windows は :func:`chmod` をサポートしていますが、ファイルの読み出し専用フラグ"
"を (``stat.S_IWRITE`` および ``stat.S_IREAD`` 定数または対応する整数値によっ"
"て) 設定できるだけです。その他のビットはすべて無視されます。"

#: ../../library/os.rst:1532
msgid ""
"Added support for specifying *path* as an open file descriptor, and the "
"*dir_fd* and *follow_symlinks* arguments."
msgstr ""
"*path* にオープンしているファイル記述子の指定のサポート、および引数 *dir_fd* "
"と *follow_symlinks* を追加しました。"

#: ../../library/os.rst:1542
msgid ""
"Change the owner and group id of *path* to the numeric *uid* and *gid*.  To "
"leave one of the ids unchanged, set it to -1."
msgstr ""
"*path* の所有者 id およびグループ id を、数値 *uid* および *gid* に変更しま"
"す。いずれかの id を変更せずにおくには、その値として -1 を指定します。"

#: ../../library/os.rst:1549
msgid ""
"See :func:`shutil.chown` for a higher-level function that accepts names in "
"addition to numeric ids."
msgstr ""
"数値 id の他に名前でも受け取る高水準関数の :func:`shutil.chown` を参照してく"
"ださい。"

#: ../../library/os.rst:1554
msgid ""
"Added support for specifying an open file descriptor for *path*, and the "
"*dir_fd* and *follow_symlinks* arguments."
msgstr ""
"*path* にオープンしているファイル記述子の指定のサポート、および引数 *dir_fd* "
"と *follow_symlinks* を追加しました。"

#: ../../library/os.rst:1558
msgid "Supports a :term:`path-like object`."
msgstr ":term:`path-like object` を受け入れるようになりました。"

#: ../../library/os.rst:1564
msgid "Change the root directory of the current process to *path*."
msgstr "現在のプロセスのルートディレクトリを *path* に変更します。"

#: ../../library/os.rst:1574
msgid ""
"Change the current working directory to the directory represented by the "
"file descriptor *fd*.  The descriptor must refer to an opened directory, not "
"an open file.  As of Python 3.3, this is equivalent to ``os.chdir(fd)``."
msgstr ""
"現在の作業ディレクトリをファイル記述子 *fd* が表すディレクトリに変更します。"
"記述子はオープンしているファイルではなく、オープンしたディレクトリを参照して"
"いなければなりません。Python 3.3 以降では ``os.chdir(fd)`` と等価です。"

#: ../../library/os.rst:1583
msgid "Return a string representing the current working directory."
msgstr "現在の作業ディレクトリを表す文字列を返します。"

#: ../../library/os.rst:1588
msgid "Return a bytestring representing the current working directory."
msgstr "現在の作業ディレクトリを表すバイト列を返します。"

#: ../../library/os.rst:1593
msgid ""
"Set the flags of *path* to the numeric *flags*, like :func:`chflags`, but do "
"not follow symbolic links.  As of Python 3.3, this is equivalent to ``os."
"chflags(path, flags, follow_symlinks=False)``."
msgstr ""
"*path* のフラグを数値 *flags* に設定します。:func:`chflags` に似ていますが、"
"シンボリックリンクをたどりません。Python 3.3 以降では ``os.chflags(path, "
"flags, follow_symlinks=False)`` と等価です。"

#: ../../library/os.rst:1605
msgid ""
"Change the mode of *path* to the numeric *mode*. If path is a symlink, this "
"affects the symlink rather than the target.  See the docs for :func:`chmod` "
"for possible values of *mode*.  As of Python 3.3, this is equivalent to ``os."
"chmod(path, mode, follow_symlinks=False)``."
msgstr ""
"*path* のモードを数値 *mode* に変更します。パスがシンボリックリンクの場合はそ"
"のリンク先ではなくシンボリックリンクそのものに対して作用します。*mode* に指定"
"できる値については :func:`chmod` のドキュメントを参照してください。Python "
"3.3 以降では ``os.chmod(path, mode, follow_symlinks=False)`` と等価です。"

#: ../../library/os.rst:1617
msgid ""
"Change the owner and group id of *path* to the numeric *uid* and *gid*.  "
"This function will not follow symbolic links.  As of Python 3.3, this is "
"equivalent to ``os.chown(path, uid, gid, follow_symlinks=False)``."
msgstr ""
"*path* の所有者 id およびグループ id を、数値 *uid* および *gid* に変更しま"
"す。この関数はシンボリックリンクをたどりません。Python 3.3 以降では ``os."
"chown(path, uid, gid, follow_symlinks=False)`` と等価です。"

#: ../../library/os.rst:1629
msgid "Create a hard link pointing to *src* named *dst*."
msgstr "*src* を指し示すハードリンク *dst* を作成します。"

#: ../../library/os.rst:1631
msgid ""
"This function can support specifying *src_dir_fd* and/or *dst_dir_fd* to "
"supply :ref:`paths relative to directory descriptors <dir_fd>`, and :ref:"
"`not following symlinks <follow_symlinks>`."
msgstr ""
"この関数は *src_dir_fd* と *dst_dir_fd* の両方またはどちらかに対し :ref:`ディ"
"レクトリ記述子への相対パス <dir_fd>` および :ref:`シンボリックリンクをたどら"
"ない <follow_symlinks>` をサポートしています。"

#: ../../library/os.rst:1637
msgid "Added Windows support."
msgstr "Windows サポートを追加しました。"

#: ../../library/os.rst:1640
msgid "Added the *src_dir_fd*, *dst_dir_fd*, and *follow_symlinks* arguments."
msgstr ""
"引数 *src_dir_fd*、*dst_dir_fd*、および *follow_symlinks* を追加しました。"

#: ../../library/os.rst:1643 ../../library/os.rst:1705
#: ../../library/os.rst:1950 ../../library/os.rst:1983
#: ../../library/os.rst:2618
msgid "Accepts a :term:`path-like object` for *src* and *dst*."
msgstr ""
"*src* と *dst* が :term:`path-like object` を受け付けるようになりました。"

#: ../../library/os.rst:1649
msgid ""
"Return a list containing the names of the entries in the directory given by "
"*path*.  The list is in arbitrary order, and does not include the special "
"entries ``'.'`` and ``'..'`` even if they are present in the directory."
msgstr ""
"*path* で指定されたディレクトリ内のエントリ名が入ったリストを返します。リスト"
"内の順番は不定です。特殊エントリ ``'.'`` および ``'..'`` は、それらがディレク"
"トリ内に存在してもリストには含められません。"

#: ../../library/os.rst:1653
msgid ""
"*path* may be a :term:`path-like object`.  If *path* is of type ``bytes`` "
"(directly or indirectly through the :class:`PathLike` interface), the "
"filenames returned will also be of type ``bytes``; in all other "
"circumstances, they will be of type ``str``."
msgstr ""
"*path* に :term:`path-like オブジェクト` を指定することもできます。  *path* "
"が  (直接的または間接的に :class:`PathLike` インターフェースを介した) "
"``bytes`` 型の場合、戻り値のファイル名も ``bytes`` 型になります; それ以外の場"
"合、ファイル名は ``str`` 型です。"

#: ../../library/os.rst:1658
msgid ""
"This function can also support :ref:`specifying a file descriptor "
"<path_fd>`; the file descriptor must refer to a directory."
msgstr ""
"この関数は :ref:`ファイル記述子の指定 <path_fd>` もサポートしています; ファイ"
"ル記述子はディレクトリを参照していなくてはなりません。"

#: ../../library/os.rst:1662
msgid "To encode ``str`` filenames to ``bytes``, use :func:`~os.fsencode`."
msgstr ""
"``文字列型`` のファイル名を ``バイト列型`` にエンコードするには、:func:`~os."
"fsencode` を使用します。"

#: ../../library/os.rst:1666
msgid ""
"The :func:`scandir` function returns directory entries along with file "
"attribute information, giving better performance for many common use cases."
msgstr ""
"ディレクトリエントリに加えてファイル属性情報も返す :func:`scandir` 関数の方"
"が、多くの一般的な用途では使い勝手が良くなります。"

#: ../../library/os.rst:1670
msgid "The *path* parameter became optional."
msgstr "引数 *path* は任意になりました。"

#: ../../library/os.rst:1673 ../../library/os.rst:2487
msgid "Added support for specifying an open file descriptor for *path*."
msgstr "*path* にオープンしているファイル記述子の指定をサポートしました。"

#: ../../library/os.rst:1682
msgid ""
"Perform the equivalent of an :c:func:`lstat` system call on the given path. "
"Similar to :func:`~os.stat`, but does not follow symbolic links. Return a :"
"class:`stat_result` object."
msgstr ""
"与えられたパスに対して :c:func:`lstat` システムコールと同じ処理を行います。:"
"func:`~os.stat` と似ていますが、シンボリックリンクをたどりません。 :class:"
"`stat_result` オブジェクトを返します。"

#: ../../library/os.rst:1686
msgid ""
"On platforms that do not support symbolic links, this is an alias for :func:"
"`~os.stat`."
msgstr ""
"シンボリックリンクをサポートしていないプラットフォームでは :func:`~os.stat` "
"の別名です。"

#: ../../library/os.rst:1689
msgid ""
"As of Python 3.3, this is equivalent to ``os.stat(path, dir_fd=dir_fd, "
"follow_symlinks=False)``."
msgstr ""
"Python 3.3 以降では ``os.stat(path, dir_fd=dir_fd, follow_symlinks=False)`` "
"と等価です。"

#: ../../library/os.rst:1692 ../../library/os.rst:1723
#: ../../library/os.rst:1777 ../../library/os.rst:1805
#: ../../library/os.rst:1879
msgid ""
"This function can also support :ref:`paths relative to directory descriptors "
"<dir_fd>`."
msgstr ""
"この関数は :ref:`ディレクトリ記述子への相対パス <dir_fd>` もサポートすること"
"ができます。"

#: ../../library/os.rst:1699 ../../library/os.rst:1884
#: ../../library/os.rst:2611
msgid "Added support for Windows 6.0 (Vista) symbolic links."
msgstr "Windows 6.0 (Vista) のシンボリックリンクをサポートしました。"

#: ../../library/os.rst:1702
msgid "Added the *dir_fd* parameter."
msgstr "引数 *dir_fd* を追加しました。"

#: ../../library/os.rst:1711
msgid "Create a directory named *path* with numeric mode *mode*."
msgstr "ディレクトリ *path* を数値モード *mode* で作成します。"

#: ../../library/os.rst:1713
msgid "If the directory already exists, :exc:`FileExistsError` is raised."
msgstr ""
"すでにディレクトリが存在したら、 :exc:`FileExistsError` が上げられます。"

#: ../../library/os.rst:1717
msgid ""
"On some systems, *mode* is ignored.  Where it is used, the current umask "
"value is first masked out.  If bits other than the last 9 (i.e. the last 3 "
"digits of the octal representation of the *mode*) are set, their meaning is "
"platform-dependent.  On some platforms, they are ignored and you should "
"call :func:`chmod` explicitly to set them."
msgstr ""
"いくつかのシステムにおいては *mode* は無視されます。それが使われる時には、最"
"初に現在の umask 値でマスクされます。もし最後の 9 ビット (つまり *mode* の8進"
"法表記の最後の3桁) を除いたビットが設定されていたら、それらの意味はプラット"
"フォームに依存します。いくつかのプラットフォームではそれらは無視され、それら"
"を設定するためには明示的に :func:`chmod` を呼ぶ必要があるでしょう。"

#: ../../library/os.rst:1726
msgid ""
"It is also possible to create temporary directories; see the :mod:`tempfile` "
"module's :func:`tempfile.mkdtemp` function."
msgstr ""
"一時ディレクトリを作成することもできます : :mod:`tempfile` モジュールの :"
"func:`tempfile.mkdtemp` 関数を参照してください。"

#: ../../library/os.rst:1742
msgid ""
"Recursive directory creation function.  Like :func:`mkdir`, but makes all "
"intermediate-level directories needed to contain the leaf directory."
msgstr ""
"再帰的にディレクトリを作成する関数です。:func:`mkdir` と似ていますが、末端"
"ディレクトリを作成するために必要なすべての中間ディレクトリも作成します。"

#: ../../library/os.rst:1745
msgid ""
"The *mode* parameter is passed to :func:`mkdir`; see :ref:`the mkdir() "
"description <mkdir_modebits>` for how it is interpreted."
msgstr ""
"*mode* パラメータは :func:`mkdir` に渡されます; それがどのように解釈されるか"
"は :ref:`mkdir() の説明 <mkdir_modebits>` を見てください。"

#: ../../library/os.rst:1748
msgid ""
"If *exist_ok* is ``False`` (the default), an :exc:`OSError` is raised if the "
"target directory already exists."
msgstr ""
"*exist_ok* が (デフォルトの) ``False`` である場合、ターゲットのディレクトリが"
"既に存在していれば :exc:`OSError` が送出されます。"

#: ../../library/os.rst:1753
msgid ""
":func:`makedirs` will become confused if the path elements to create "
"include :data:`pardir` (eg. \"..\" on UNIX systems)."
msgstr ""
"作成するパス要素に :data:`pardir` (UNIX では \"..\") が含まれる場合、:func:"
"`makedirs` は混乱します。"

#: ../../library/os.rst:1756
msgid "This function handles UNC paths correctly."
msgstr "この関数は UNC パスを正しく扱えるようになりました。"

#: ../../library/os.rst:1758
msgid "The *exist_ok* parameter."
msgstr "引数 *exist_ok* が追加されました。"

#: ../../library/os.rst:1763
msgid ""
"Before Python 3.4.1, if *exist_ok* was ``True`` and the directory existed, :"
"func:`makedirs` would still raise an error if *mode* did not match the mode "
"of the existing directory. Since this behavior was impossible to implement "
"safely, it was removed in Python 3.4.1. See :issue:`21082`."
msgstr ""
"Python 3.4.1 より前、 *exist_ok* が ``True`` でそのディレクトリが既存の場合で"
"も、 :func:`makedirs` は *mode* が既存ディレクトリのモードと合わない場合には"
"エラーにしようとしていました。このモードチェックの振る舞いを安全に実装するこ"
"とが出来なかったため、 Python 3.4.1 でこのチェックは削除されました。 :issue:"
"`21082` を参照してください。"

#: ../../library/os.rst:1774
msgid ""
"Create a FIFO (a named pipe) named *path* with numeric mode *mode*. The "
"current umask value is first masked out from the mode."
msgstr ""
"FIFO (名前付きパイプ) *path* を数値モード *mode* で作成します。先に現在の "
"umask 値でマスクされます。"

#: ../../library/os.rst:1780
msgid ""
"FIFOs are pipes that can be accessed like regular files.  FIFOs exist until "
"they are deleted (for example with :func:`os.unlink`). Generally, FIFOs are "
"used as rendezvous between \"client\" and \"server\" type processes: the "
"server opens the FIFO for reading, and the client opens it for writing.  "
"Note that :func:`mkfifo` doesn't open the FIFO --- it just creates the "
"rendezvous point."
msgstr ""
"FIFO は通常のファイルのようにアクセスできるパイプです。 FIFO は ( 例えば :"
"func:`os.unlink` を使って ) 削除されるまで存在しつづけます。一般的に、 FIFO "
"は \" クライアント \" と \" サーバー \" 形式のプロセス間でランデブーを行うた"
"めに使われます : この時、サーバーは FIFO を読み込み用に、クライアントは書き出"
"し用にオープンします。 :func:`mkfifo` は FIFO をオープンしない --- 単にランデ"
"ブーポイントを作成するだけ --- なので注意してください。"

#: ../../library/os.rst:1797
msgid ""
"Create a filesystem node (file, device special file or named pipe) named "
"*path*. *mode* specifies both the permissions to use and the type of node to "
"be created, being combined (bitwise OR) with one of ``stat.S_IFREG``, ``stat."
"S_IFCHR``, ``stat.S_IFBLK``, and ``stat.S_IFIFO`` (those constants are "
"available in :mod:`stat`).  For ``stat.S_IFCHR`` and ``stat.S_IFBLK``, "
"*device* defines the newly created device special file (probably using :func:"
"`os.makedev`), otherwise it is ignored."
msgstr ""
"*path* という名前で、ファイルシステムノード (ファイル、デバイス特殊ファイル、"
"または名前つきパイプ) を作成します。*mode* は、作成するノードのアクセス権限と"
"タイプの両方を ``stat.S_IFREG``、``stat.S_IFCHR``、``stat.S_IFBLK``、および "
"``stat.S_IFIFO`` の組み合わせ (ビット単位の論理和) で指定します (これらの定数"
"は :mod:`stat` で利用可能です)。``stat.S_IFCHR`` と ``stat.S_IFBLK`` を指定し"
"た場合、*devide* は新しく作成されたデバイス特殊ファイルを (おそらく :func:"
"`os.makedev` を使って) 定義し、それ以外の定数を指定した場合は無視されます。"

#: ../../library/os.rst:1819
msgid ""
"Extract the device major number from a raw device number (usually the :attr:"
"`st_dev` or :attr:`st_rdev` field from :c:type:`stat`)."
msgstr ""
"RAW デバイス番号から、デバイスのメジャー番号を取り出します ( 通常 :c:type:"
"`stat` の :attr:`st_dev` か :attr:`st_rdev` フィールドです ) 。"

#: ../../library/os.rst:1825
msgid ""
"Extract the device minor number from a raw device number (usually the :attr:"
"`st_dev` or :attr:`st_rdev` field from :c:type:`stat`)."
msgstr ""
"RAW デバイス番号から、デバイスのマイナー番号を取り出します ( 通常 :c:type:"
"`stat` の :attr:`st_dev` か :attr:`st_rdev` フィールドです ) 。"

#: ../../library/os.rst:1831
msgid "Compose a raw device number from the major and minor device numbers."
msgstr ""
"メジャーおよびマイナーデバイス番号から、新しく RAW デバイス番号を作成します。"

#: ../../library/os.rst:1836
msgid ""
"Return system configuration information relevant to a named file. *name* "
"specifies the configuration value to retrieve; it may be a string which is "
"the name of a defined system value; these names are specified in a number of "
"standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define "
"additional names as well.  The names known to the host operating system are "
"given in the ``pathconf_names`` dictionary.  For configuration variables not "
"included in that mapping, passing an integer for *name* is also accepted."
msgstr ""
"名前付きファイルに関連するシステム設定情報を返します。 *name* には取得したい"
"設定名を指定します ; これは定義済みのシステム値名の文字列で、多くの標準 "
"(POSIX.1 、 Unix 95 、 Unix 98 その他 ) で定義されています。プラットフォーム"
"によっては別の名前も定義しています。ホストオペレーティングシステムの関知する"
"名前は ``pathconf_names`` 辞書で与えられています。このマップ型オブジェクトに"
"入っていない設定変数については、 *name* に整数を渡してもかまいません。"

#: ../../library/os.rst:1849 ../../library/os.rst:2480
#: ../../library/os.rst:2636
msgid ""
"This function can support :ref:`specifying a file descriptor <path_fd>`."
msgstr ""
"この関数は :ref:`ファイル記述子の指定 <path_fd>` をサポートしています。"

#: ../../library/os.rst:1860
msgid ""
"Dictionary mapping names accepted by :func:`pathconf` and :func:`fpathconf` "
"to the integer values defined for those names by the host operating system.  "
"This can be used to determine the set of names known to the system."
msgstr ""
":func:`pathconf` および :func:`fpathconf` が受理するシステム設定名を、ホスト"
"オペレーティングシステムで定義されている整数値に対応付けている辞書です。この"
"辞書はシステムでどの設定名が定義されているかを知るために利用できます。"

#: ../../library/os.rst:1869
msgid ""
"Return a string representing the path to which the symbolic link points.  "
"The result may be either an absolute or relative pathname; if it is "
"relative, it may be converted to an absolute pathname using ``os.path."
"join(os.path.dirname(path), result)``."
msgstr ""
"シンボリックリンクが指しているパスを表す文字列を返します。返される値は絶対パ"
"スにも、相対パスにもなり得ます ; 相対パスの場合、 ``os.path.join(os.path."
"dirname(path), result)`` を使って絶対パスに変換することができます。"

#: ../../library/os.rst:1874
msgid ""
"If the *path* is a string object (directly or indirectly through a :class:"
"`PathLike` interface), the result will also be a string object, and the call "
"may raise a UnicodeDecodeError. If the *path* is a bytes object (direct or "
"indirectly), the result will be a bytes object."
msgstr ""

#: ../../library/os.rst:1882
msgid "Availability: Unix, Windows"
msgstr "利用できる環境 : Unix, Windows"

#: ../../library/os.rst:1896
msgid ""
"Remove (delete) the file *path*.  If *path* is a directory, :exc:`OSError` "
"is raised.  Use :func:`rmdir` to remove directories."
msgstr ""
"ファイル *path* を削除します。 *path* がディレクトリの場合、:exc:`OSError` が"
"送出されます; ディレクトリの削除には :func:`rmdir` を使用してください。"

#: ../../library/os.rst:1899 ../../library/os.rst:1993
#: ../../library/os.rst:2594
msgid ""
"This function can support :ref:`paths relative to directory descriptors "
"<dir_fd>`."
msgstr ""
"この関数は :ref:`ディレクトリ記述子への相対パス <dir_fd>` をサポートしていま"
"す。"

#: ../../library/os.rst:1902
msgid ""
"On Windows, attempting to remove a file that is in use causes an exception "
"to be raised; on Unix, the directory entry is removed but the storage "
"allocated to the file is not made available until the original file is no "
"longer in use."
msgstr ""
"Windows では、使用中のファイルを削除しようとすると例外を送出します; Unixで"
"は、ディレクトリエントリは削除されますが、記憶装置上に割り当てられたファイル"
"領域は元のファイルが使われなくなるまで残されます。"

#: ../../library/os.rst:1906
msgid "This function is semantically identical to :func:`unlink`."
msgstr "この関数は意味論的に :func:`unlink` と同一です。"

#: ../../library/os.rst:1919
msgid ""
"Remove directories recursively.  Works like :func:`rmdir` except that, if "
"the leaf directory is successfully removed, :func:`removedirs`  tries to "
"successively remove every parent directory mentioned in  *path* until an "
"error is raised (which is ignored, because it generally means that a parent "
"directory is not empty). For example, ``os.removedirs('foo/bar/baz')`` will "
"first remove the directory ``'foo/bar/baz'``, and then remove ``'foo/bar'`` "
"and ``'foo'`` if they are empty. Raises :exc:`OSError` if the leaf directory "
"could not be successfully removed."
msgstr ""
"再帰的なディレクトリ削除関数です。 :func:`rmdir` と同じように動作しますが、末"
"端ディレクトリがうまく削除できるかぎり、 :func:`removedirs` は *path* に現れ"
"る親ディレクトリをエラーが送出されるまで ( このエラーは通常、指定したディレク"
"トリの親ディレクトリが空でないことを意味するだけなので無視されます ) 順に削除"
"することを試みます。例えば、 ``os.removedirs('foo/bar/baz')`` では最初にディ"
"レクトリ ``'foo/bar/baz'`` を削除し、次に ``'foo/bar'`` さらに ``'foo'`` をそ"
"れらが空ならば削除します。末端のディレクトリが削除できなかった場合には :exc:"
"`OSError` が送出されます。"

#: ../../library/os.rst:1934
msgid ""
"Rename the file or directory *src* to *dst*.  If *dst* is a directory, :exc:"
"`OSError` will be raised.  On Unix, if *dst* exists and is a file, it will "
"be replaced silently if the user has permission.  The operation may fail on "
"some Unix flavors if *src* and *dst* are on different filesystems.  If "
"successful, the renaming will be an atomic operation (this is a POSIX "
"requirement).  On Windows, if *dst* already exists, :exc:`OSError` will be "
"raised even if it is a file."
msgstr ""
"ファイルまたはディレクトリ *src* の名前を *dst* へ変更します。*dst* がディレ"
"クトリの場合 :exc:`OSError` が送出されます。Unixでは、*dst* が存在し、かつ"
"ファイルの場合、ユーザーの権限があるかぎり暗黙のうちに置き換えられます。この"
"操作は、一部の Unix 系システムにおいて *src* と *dst* が異なるファイルシステ"
"ム上にあると失敗することがあります。ファイル名の変更が成功する場合はアトミッ"
"ク操作となります (これは POSIX 要求仕様です)。Windows では、*dst* がすでに存"
"在する場合には、たとえファイルの場合でも :exc:`OSError` が送出されます。"

#: ../../library/os.rst:1942 ../../library/os.rst:1978
msgid ""
"This function can support specifying *src_dir_fd* and/or *dst_dir_fd* to "
"supply :ref:`paths relative to directory descriptors <dir_fd>`."
msgstr ""
"この関数は *src_dir_fd* と *dst_dir_fd* のどちらかまたは両方の指定に :ref:`"
"ディレクトリ記述子への相対パス <dir_fd>` をサポートしています。"

#: ../../library/os.rst:1945
msgid ""
"If you want cross-platform overwriting of the destination, use :func:"
"`replace`."
msgstr ""
"対象の上書きがクロスプラットフォームになる場合は :func:`replace` を使用してく"
"ださい。"

#: ../../library/os.rst:1947
msgid "The *src_dir_fd* and *dst_dir_fd* arguments."
msgstr "引数 *src_dir_fd* および *dst_dir_fd* が追加されました。"

#: ../../library/os.rst:1956
msgid ""
"Recursive directory or file renaming function. Works like :func:`rename`, "
"except creation of any intermediate directories needed to make the new "
"pathname good is attempted first. After the rename, directories "
"corresponding to rightmost path segments of the old name will be pruned away "
"using :func:`removedirs`."
msgstr ""
"再帰的にディレクトリやファイル名を変更する関数です。 :func:`rename` のように"
"動作しますが、新たなパス名を持つファイルを配置するために必要な途中のディレク"
"トリ構造をまず作成しようと試みます。名前変更の後、元のファイル名のパス要素"
"は :func:`removedirs` を使って右側から順に削除されます。"

#: ../../library/os.rst:1963
msgid ""
"This function can fail with the new directory structure made if you lack "
"permissions needed to remove the leaf directory or file."
msgstr ""
"この関数はコピー元の末端のディレクトリまたはファイルを削除する権限がない場合"
"には失敗します。"

#: ../../library/os.rst:1966
msgid "Accepts a :term:`path-like object` for *old* and *new*."
msgstr ""
"*old* と *new* が :term:`path-like object` を受け付けるようになりました。"

#: ../../library/os.rst:1972
msgid ""
"Rename the file or directory *src* to *dst*.  If *dst* is a directory, :exc:"
"`OSError` will be raised.  If *dst* exists and is a file, it will be "
"replaced silently if the user has permission.  The operation may fail if "
"*src* and *dst* are on different filesystems.  If successful, the renaming "
"will be an atomic operation (this is a POSIX requirement)."
msgstr ""
"ファイルまたはディレクトリ *src* の名前を *dst* へ変更します。*dst* がディレ"
"クトリの場合 :exc:`OSError` が送出されます。*dst* が存在し、かつファイルの場"
"合、ユーザーの権限がある限り暗黙のうちに置き換えられます。*src* と *dst* が異"
"なるファイルシステム上にあると失敗することがあります。ファイル名の変更が成功"
"する場合はアトミック操作となります (これは POSIX 要求仕様です)。"

#: ../../library/os.rst:1989
msgid ""
"Remove (delete) the directory *path*.  Only works when the directory is "
"empty, otherwise, :exc:`OSError` is raised.  In order to remove whole "
"directory trees, :func:`shutil.rmtree` can be used."
msgstr ""
"ディレクトリ *path* を削除します。ディレクトリが空の場合にだけ正常に動作しま"
"す。そうでなければ :exc:`OSError` が送出されます。ディレクトリツリー全体を削"
"除するには :func:`shutil.rmtree` を使います。"

#: ../../library/os.rst:1996 ../../library/os.rst:2656
msgid "The *dir_fd* parameter."
msgstr "引数 *dir_fd* が追加されました。"

#: ../../library/os.rst:2005
msgid ""
"Return an iterator of :class:`os.DirEntry` objects corresponding to the "
"entries in the directory given by *path*. The entries are yielded in "
"arbitrary order, and the special entries ``'.'`` and ``'..'`` are not "
"included."
msgstr ""
"*path* で指定されたディレクトリ内のエントリに対応する :class:`os.DirEntry` オ"
"ブジェクトのイテレータを返します。このエントリは、任意の順序で yield され、特"
"殊エントリ ``'.'`` および ``'..'`` は含められません。"

#: ../../library/os.rst:2010
msgid ""
"Using :func:`scandir` instead of :func:`listdir` can significantly increase "
"the performance of code that also needs file type or file attribute "
"information, because :class:`os.DirEntry` objects expose this information if "
"the operating system provides it when scanning a directory. All :class:`os."
"DirEntry` methods may perform a system call, but :func:`~os.DirEntry.is_dir` "
"and :func:`~os.DirEntry.is_file` usually only require a system call for "
"symbolic links; :func:`os.DirEntry.stat` always requires a system call on "
"Unix but only requires one for symbolic links on Windows."
msgstr ""
":func:`listdir` の代わりに :func:`scandir` を使用すると、ファイルタイプや属性"
"情報も必要とするコードのパフォーマンスが大幅に向上します。これは、オペレー"
"ティングシステムがディレクトリのスキャン中にこの情報を提供した場合、:class:"
"`os.DirEntry` オブジェクトがその情報を公開するからです。すべての :class:`os."
"DirEntry` メソッドはシステムコールを実行する場合がありますが、:func:`~os."
"DirEntry.is_dir` と :func:`~os.DirEntry.is_file` は、通常はシンボリックリンク"
"にしかシステムコールを必要としません。:func:`os.DirEntry.stat` は、Unix 上で"
"は常にシステムコールを必要としますが、Windows ではシンボリックリンク用にシス"
"テムコールを一つ必要とするだけです。"

#: ../../library/os.rst:2020
msgid ""
"*path* may be a :term:`path-like object`.  If *path* is of type ``bytes`` "
"(directly or indirectly through the :class:`PathLike` interface), the type "
"of the :attr:`~os.DirEntry.name` and :attr:`~os.DirEntry.path` attributes of "
"each :class:`os.DirEntry` will be ``bytes``; in all other circumstances, "
"they will be of type ``str``."
msgstr ""

#: ../../library/os.rst:2026
msgid ""
"The :func:`scandir` iterator supports the :term:`context manager` protocol "
"and has the following method:"
msgstr ""
":func:`scandir` イテレータは、 :term:`コンテキストマネージャ <context "
"manager>` プロトコルをサポートし、次のメソッドを持ちます。"

#: ../../library/os.rst:2031
msgid "Close the iterator and free acquired resources."
msgstr "イテレータを閉じ、獲得した資源を開放します。"

#: ../../library/os.rst:2033
msgid ""
"This is called automatically when the iterator is exhausted or garbage "
"collected, or when an error happens during iterating.  However it is "
"advisable to call it explicitly or use the :keyword:`with` statement."
msgstr ""
"この関数は、イテレータがすべて消費されるか、ガーベージコレクトされた、もしく"
"はイテレート中にエラーが発生した際に自動的に呼び出されます。しかし、 :"
"keyword:`with` 文を用いるか、明示的に呼び出すことを推奨します。"

#: ../../library/os.rst:2040
msgid ""
"The following example shows a simple use of :func:`scandir` to display all "
"the files (excluding directories) in the given *path* that don't start with "
"``'.'``. The ``entry.is_file()`` call will generally not make an additional "
"system call::"
msgstr ""
"次の単純な例では、:func:`scandir` を使用して、指定した *path* 内の先頭が "
"``'.'`` でないすべてのファイル (ディレクトリを除く) をすべて表示します。"
"``entry.is_file()`` を呼び出しても、通常は追加のシステムコールは行われませ"
"ん::"

#: ../../library/os.rst:2052
msgid ""
"On Unix-based systems, :func:`scandir` uses the system's `opendir() <http://"
"pubs.opengroup.org/onlinepubs/009695399/functions/opendir.html>`_ and "
"`readdir() <http://pubs.opengroup.org/onlinepubs/009695399/functions/"
"readdir_r.html>`_ functions. On Windows, it uses the Win32 `FindFirstFileW "
"<https://msdn.microsoft.com/en-us/library/windows/desktop/aa364418(v=vs.85)."
"aspx>`_ and `FindNextFileW <https://msdn.microsoft.com/en-us/library/windows/"
"desktop/aa364428(v=vs.85).aspx>`_ functions."
msgstr ""
" :func:`scandir` は、Unix ベースのシステムではシステムの `opendir() <http://"
"pubs.opengroup.org/onlinepubs/009695399/functions/opendir.html>`_ 関数と "
"`readdir() <http://pubs.opengroup.org/onlinepubs/009695399/functions/"
"readdir_r.html>`_ 関数を使います。Windows では Win32 API の `FindFirstFileW "
"<https://msdn.microsoft.com/en-us/library/windows/desktop/aa364418(v=vs.85)."
"aspx>`_ と `FindNextFileW <https://msdn.microsoft.com/en-us/library/windows/"
"desktop/aa364428(v=vs.85).aspx>`_ 関数を使います。"

#: ../../library/os.rst:2064
msgid ""
"Added support for the :term:`context manager` protocol and the :func:"
"`~scandir.close()` method.  If a :func:`scandir` iterator is neither "
"exhausted nor explicitly closed a :exc:`ResourceWarning` will be emitted in "
"its destructor."
msgstr ""

#: ../../library/os.rst:2070
msgid "The function accepts a :term:`path-like object`."
msgstr "関数が :term:`path-like object` を受け入れるようになりました。"

#: ../../library/os.rst:2075
msgid ""
"Object yielded by :func:`scandir` to expose the file path and other file "
"attributes of a directory entry."
msgstr ""
"ディレクトリエントリのファイルパスとその他のファイル属性を公開するために、:"
"func:`scandir` が yield するオブジェクトです。"

#: ../../library/os.rst:2078
msgid ""
":func:`scandir` will provide as much of this information as possible without "
"making additional system calls. When a ``stat()`` or ``lstat()`` system call "
"is made, the ``os.DirEntry`` object will cache the result."
msgstr ""
":func:`scandir` は、追加のシステムコールを実行することなく、この情報をできる"
"だけ多く提供します。``stat()`` または ``lstat()`` システムコールが実行された"
"場合、``os.DirEntry`` オブジェクトは結果をキャッシュします。"

#: ../../library/os.rst:2082
msgid ""
"``os.DirEntry`` instances are not intended to be stored in long-lived data "
"structures; if you know the file metadata has changed or if a long time has "
"elapsed since calling :func:`scandir`, call ``os.stat(entry.path)`` to fetch "
"up-to-date information."
msgstr ""
"``os.DirEntry`` インスタンスは、寿命の長いデータ構造に保存されることは想定さ"
"れていません。ファイルメタデータが変更された場合や、 :func:`scandir` が呼び出"
"されてから長時間が経過した場合は、 ``os.stat(entry.path)`` を呼び出して最新の"
"情報を取得してください。"

#: ../../library/os.rst:2087
msgid ""
"Because the ``os.DirEntry`` methods can make operating system calls, they "
"may also raise :exc:`OSError`. If you need very fine-grained control over "
"errors, you can catch :exc:`OSError` when calling one of the ``os.DirEntry`` "
"methods and handle as appropriate."
msgstr ""
"``os.DirEntry`` のメソッドはオペレーティングシステムコールを実行する場合があ"
"るため、それらは :exc:`OSError` も送出する場合があります。エラーを細かく制御"
"する必要がある場合、 ``os.DirEntry`` のメソッドの一つの呼び出し時に :exc:"
"`OSError` を捕捉して、適切な処理を行うことができます。"

#: ../../library/os.rst:2092
msgid ""
"To be directly usable as a :term:`path-like object`, ``os.DirEntry`` "
"implements the :class:`PathLike` interface."
msgstr ""

#: ../../library/os.rst:2095
msgid "Attributes and methods on a ``os.DirEntry`` instance are as follows:"
msgstr "``os.DirEntry`` インスタンスの属性とメソッドは以下の通りです:"

#: ../../library/os.rst:2099
msgid ""
"The entry's base filename, relative to the :func:`scandir` *path* argument."
msgstr ""
":func:`scandir` の *path* 引数に対して相対的な、エントリのベースファイル名で"
"す。"

#: ../../library/os.rst:2102
msgid ""
"The :attr:`name` attribute will be ``bytes`` if the :func:`scandir` *path* "
"argument is of type ``bytes`` and ``str`` otherwise.  Use :func:`~os."
"fsdecode` to decode byte filenames."
msgstr ""

#: ../../library/os.rst:2108
msgid ""
"The entry's full path name: equivalent to ``os.path.join(scandir_path, entry."
"name)`` where *scandir_path* is the :func:`scandir` *path* argument.  The "
"path is only absolute if the :func:`scandir` *path* argument was absolute."
msgstr ""
"``os.path.join(scandir_path, entry.name)`` と等価の、エントリの絶対パス名で"
"す。ここで、*scandir_path* は :func:`scandir` の *path* 引数です。このパス"
"は、:func:`scandir` の *path* 引数が絶対パスの場合にのみ、絶対パスです。"

#: ../../library/os.rst:2113
msgid ""
"The :attr:`path` attribute will be ``bytes`` if the :func:`scandir` *path* "
"argument is of type ``bytes`` and ``str`` otherwise.  Use :func:`~os."
"fsdecode` to decode byte filenames."
msgstr ""

#: ../../library/os.rst:2119
msgid "Return the inode number of the entry."
msgstr "項目の inode 番号を返します。"

#: ../../library/os.rst:2121
msgid ""
"The result is cached on the ``os.DirEntry`` object. Use ``os.stat(entry."
"path, follow_symlinks=False).st_ino`` to fetch up-to-date information."
msgstr ""
"結果は ``os.DirEntry`` オブジェクトにキャッシュされます。最新の情報を取得する"
"には ``os.stat(entry.path, follow_symlinks=False).st_ino`` を使用してくださ"
"い。"

#: ../../library/os.rst:2125
msgid ""
"On the first, uncached call, a system call is required on Windows but not on "
"Unix."
msgstr ""
"Windows 上では、最初のキャッシュされていない呼び出しでシステムコールが必要で"
"すが、 Unix 上では必要ありません。"

#: ../../library/os.rst:2130
msgid ""
"Return ``True`` if this entry is a directory or a symbolic link pointing to "
"a directory; return ``False`` if the entry is or points to any other kind of "
"file, or if it doesn't exist anymore."
msgstr ""
"この項目がディレクトリまたはディレクトリへのシンボリックリンクである場合、 "
"``True`` を返します。項目がそれ以外のファイルやそれ以外のファイルへのシンボ"
"リックリンクである場合や、もはや存在しない場合は ``False`` を返します。"

#: ../../library/os.rst:2134
msgid ""
"If *follow_symlinks* is ``False``, return ``True`` only if this entry is a "
"directory (without following symlinks); return ``False`` if the entry is any "
"other kind of file or if it doesn't exist anymore."
msgstr ""
"*follow_symlinks* が ``False`` の場合、項目がディレクトリ (シンボリックリンク"
"はたどりません) の場合にのみ ``True`` を返します。項目がディレクトリ以外の"
"ファイルである場合や、項目がもはや存在しない場合は ``False`` を返します。"

#: ../../library/os.rst:2138
msgid ""
"The result is cached on the ``os.DirEntry`` object, with a separate cache "
"for *follow_symlinks* ``True`` and ``False``. Call :func:`os.stat` along "
"with :func:`stat.S_ISDIR` to fetch up-to-date information."
msgstr ""
"結果は ``os.DirEntry`` オブジェクトにキャッシュされます。*follow_symlinks* "
"が ``True`` の場合と ``False`` の場合とでは、別のオブジェクトにキャッシュされ"
"ます。最新の情報を取得するには :func:`stat.S_ISDIR` と共に :func:`os.stat` を"
"呼び出してください。"

#: ../../library/os.rst:2142
msgid ""
"On the first, uncached call, no system call is required in most cases. "
"Specifically, for non-symlinks, neither Windows or Unix require a system "
"call, except on certain Unix file systems, such as network file systems, "
"that return ``dirent.d_type == DT_UNKNOWN``. If the entry is a symlink, a "
"system call will be required to follow the symlink unless *follow_symlinks* "
"is ``False``."
msgstr ""
"多くの場合、最初のキャッシュされない呼び出しでは、システムコールは必要とされ"
"ません。具体的には、シンボリックリンク以外では、Windows も Unix もシステム"
"コールを必要としません。ただし、``dirent.d_type == DT_UNKNOWN`` を返す、ネッ"
"トワークファイルシステムなどの特定の Unix ファイルシステムは例外です。項目が"
"シンボリックリンクの場合、*follow_symlinks* が ``False`` の場合を除き、シンボ"
"リックリンクをたどるためにシステムコールが必要となります。"

#: ../../library/os.rst:2149 ../../library/os.rst:2179
msgid ""
"This method can raise :exc:`OSError`, such as :exc:`PermissionError`, but :"
"exc:`FileNotFoundError` is caught and not raised."
msgstr ""
"このメソッドは :exc:`PermissionError` のような :exc:`OSError` を送出すること"
"がありますが、 :exc:`FileNotFoundError` は捕捉され送出されません。"

#: ../../library/os.rst:2154
msgid ""
"Return ``True`` if this entry is a file or a symbolic link pointing to a "
"file; return ``False`` if the entry is or points to a directory or other non-"
"file entry, or if it doesn't exist anymore."
msgstr ""
"この項目がファイルまたはファイルへのシンボリックリンクである場合、 ``True`` "
"を返します。項目がディレクトリやファイル以外の項目へのシンボリックリンクであ"
"る場合や、もはや存在しない場合は ``False`` を返します。"

#: ../../library/os.rst:2158
msgid ""
"If *follow_symlinks* is ``False``, return ``True`` only if this entry is a "
"file (without following symlinks); return ``False`` if the entry is a "
"directory or other non-file entry, or if it doesn't exist anymore."
msgstr ""
"*follow_symlinks* が ``False`` の場合、項目がファイル (シンボリックリンクはた"
"どりません) の場合にのみ ``True`` を返します。項目がディレクトリやその他の"
"ファイル以外の項目である場合や、項目がもはや存在しない場合は ``False`` を返し"
"ます。"

#: ../../library/os.rst:2162
msgid ""
"The result is cached on the ``os.DirEntry`` object. Caching, system calls "
"made, and exceptions raised are as per :func:`~os.DirEntry.is_dir`."
msgstr ""
"結果は ``os.DirEntry`` オブジェクトにキャッシュされます。キャッシュ、システム"
"コール、例外は、:func:`~os.DirEntry.is_dir` と同様に行われます。"

#: ../../library/os.rst:2167
msgid ""
"Return ``True`` if this entry is a symbolic link (even if broken); return "
"``False`` if the entry points to a directory or any kind of file, or if it "
"doesn't exist anymore."
msgstr ""
"この項目がシンボリックリンクの場合 (たとえ破損していても)、``True`` を返しま"
"す。項目がディレクトリやあらゆる種類のファイルの場合、またはもはや存在しない"
"場合は ``False`` を返します。"

#: ../../library/os.rst:2171
msgid ""
"The result is cached on the ``os.DirEntry`` object. Call :func:`os.path."
"islink` to fetch up-to-date information."
msgstr ""
"結果は ``os.DirEntry`` オブジェクトにキャッシュされます。\n"
"最新の情報をフェッチするには :func:`os.path.islink` を呼び出してください。"

#: ../../library/os.rst:2174
msgid ""
"On the first, uncached call, no system call is required in most cases. "
"Specifically, neither Windows or Unix require a system call, except on "
"certain Unix file systems, such as network file systems, that return "
"``dirent.d_type == DT_UNKNOWN``."
msgstr ""
"多くの場合、最初のキャッシュされない呼び出しでは、システムコールは必要とされ"
"ません。具体的には、Windows も Unix もシステムコールを必要としません。ただ"
"し、``dirent.d_type == DT_UNKNOWN`` を返す、ネットワークファイルシステムなど"
"の特定の Unix ファイルシステムは例外です。"

#: ../../library/os.rst:2184
msgid ""
"Return a :class:`stat_result` object for this entry. This method follows "
"symbolic links by default; to stat a symbolic link add the "
"``follow_symlinks=False`` argument."
msgstr ""
"この項目の :class:`stat_result` オブジェクトを返します。このメソッドは、デ"
"フォルトでシンボリックリンクをたどります。シンボリックリンクを開始するには、 "
"``follow_symlinks=False`` 引数を追加します。"

#: ../../library/os.rst:2188
msgid ""
"On Unix, this method always requires a system call. On Windows, it only "
"requires a system call if *follow_symlinks* is ``True`` and the entry is a "
"symbolic link."
msgstr ""
"Unix では、このメソッドは常にシステムコールを必要とします。Windows では、 "
"*follow_symlinks* が ``True`` かつ、項目がシンボリックリンクの場合にのみシス"
"テムコールが必要となります。"

#: ../../library/os.rst:2192
msgid ""
"On Windows, the ``st_ino``, ``st_dev`` and ``st_nlink`` attributes of the :"
"class:`stat_result` are always set to zero. Call :func:`os.stat` to get "
"these attributes."
msgstr ""
"Windows では、:class:`stat_result` の ``st_ino`` 、 ``st_dev`` 、 "
"``st_nlink`` 属性は常にゼロに設定されます。これらの属性を取得するには、 :"
"func:`os.stat` を呼び出します。"

#: ../../library/os.rst:2196
msgid ""
"The result is cached on the ``os.DirEntry`` object, with a separate cache "
"for *follow_symlinks* ``True`` and ``False``. Call :func:`os.stat` to fetch "
"up-to-date information."
msgstr ""
"結果は ``os.DirEntry`` オブジェクトにキャッシュされます。*follow_symlinks* "
"が ``True`` の場合と ``False`` の場合とでは、別のオブジェクトにキャッシュされ"
"ます。最新の情報を取得するには、 :func:`os.stat` を呼び出してください。"

#: ../../library/os.rst:2200
msgid ""
"Note that there is a nice correspondence between several attributes and "
"methods of ``os.DirEntry`` and of :class:`pathlib.Path`.  In particular, the "
"``name`` attribute has the same meaning, as do the ``is_dir()``, "
"``is_file()``, ``is_symlink()`` and ``stat()`` methods."
msgstr ""
"``os.DirEntry`` と :class:`pathlib.Path` では、いくつかの属性やメソッドがよい"
"対応関係にあります。特に、 ``name`` 属性は同じ意味を持ちます。"
"``is_dir()`` 、 ``is_file()`` 、 ``is_symlink()`` 、 ``stat()`` メソッドも同"
"じ意味を持ちます。"

#: ../../library/os.rst:2208
msgid ""
"Added support for the :class:`~os.PathLike` interface.  Added support for :"
"class:`bytes` paths on Windows."
msgstr ""
":class:`~os.PathLike` インターフェースをサポートしました。Windowsで:class:"
"`bytes` パスをサポートしました。"

#: ../../library/os.rst:2215
msgid ""
"Get the status of a file or a file descriptor. Perform the equivalent of a :"
"c:func:`stat` system call on the given path. *path* may be specified as "
"either a string or bytes -- directly or indirectly through the :class:"
"`PathLike` interface -- or as an open file descriptor. Return a :class:"
"`stat_result` object."
msgstr ""

#: ../../library/os.rst:2221
msgid ""
"This function normally follows symlinks; to stat a symlink add the argument "
"``follow_symlinks=False``, or use :func:`lstat`."
msgstr ""
"この関数は通常はシンボリックリンクをたどります。シンボリックリンクに対して "
"stat したい場合は ``follow_symlinks=False`` とするか、 :func:`lstat` を利用し"
"てください。"

#: ../../library/os.rst:2224 ../../library/os.rst:2869
#: ../../library/os.rst:2883 ../../library/os.rst:2897
#: ../../library/os.rst:2915
msgid ""
"This function can support :ref:`specifying a file descriptor <path_fd>` and :"
"ref:`not following symlinks <follow_symlinks>`."
msgstr ""
"この関数は :ref:`ファイル記述子の指定 <path_fd>` および :ref:`シンボリックリ"
"ンクをたどらない <follow_symlinks>` をサポートしています。"

#: ../../library/os.rst:2229
msgid "Example::"
msgstr "以下はプログラム例です::"

#: ../../library/os.rst:2242
msgid ":func:`fstat` and :func:`lstat` functions."
msgstr ":func:`fstat` と :func:`lstat`。"

#: ../../library/os.rst:2244
msgid ""
"Added the *dir_fd* and *follow_symlinks* arguments, specifying a file "
"descriptor instead of a path."
msgstr "*dir_fd*, *follow_symlinks* 引数の追加、ファイル記述子の指定の追加。"

#: ../../library/os.rst:2254
msgid ""
"Object whose attributes correspond roughly to the members of the :c:type:"
"`stat` structure. It is used for the result of :func:`os.stat`, :func:`os."
"fstat` and :func:`os.lstat`."
msgstr ""
"おおむね :c:type:`stat` 構造体のメンバーに対応する属性を持つオブジェクトで"
"す。:func:`os.stat` 、 :func:`os.fstat` 、 :func:`os.lstat` の結果に使用され"
"ます。"

#: ../../library/os.rst:2258
msgid "Attributes:"
msgstr "属性:"

#: ../../library/os.rst:2262
msgid "File mode: file type and file mode bits (permissions)."
msgstr "ファイルモード。ファイルタイプとファイルモードのビット （権限）。"

#: ../../library/os.rst:2266
msgid ""
"Platform dependent, but if non-zero, uniquely identifies the file for a "
"given value of ``st_dev``. Typically:"
msgstr ""

#: ../../library/os.rst:2269
msgid "the inode number on Unix,"
msgstr ""

#: ../../library/os.rst:2270
msgid ""
"the `file index <https://msdn.microsoft.com/en-us/library/aa363788>`_ on "
"Windows"
msgstr ""

#: ../../library/os.rst:2276
msgid "Identifier of the device on which this file resides."
msgstr "このファイルが存在するデバイスの識別子。"

#: ../../library/os.rst:2280
msgid "Number of hard links."
msgstr "ハードリンクの数。"

#: ../../library/os.rst:2284
msgid "User identifier of the file owner."
msgstr "ファイル所有者のユーザ識別子。"

#: ../../library/os.rst:2288
msgid "Group identifier of the file owner."
msgstr "ファイル所有者のグループ識別子。"

#: ../../library/os.rst:2292
msgid ""
"Size of the file in bytes, if it is a regular file or a symbolic link. The "
"size of a symbolic link is the length of the pathname it contains, without a "
"terminating null byte."
msgstr ""
"ファイルが通常のファイルまたはシンボリックリンクの場合、そのファイルのバイト"
"単位でのサイズです。シンボリックリンクのサイズは、含まれるパス名の長さで、"
"null バイトで終わることはありません。"

#: ../../library/os.rst:2296
msgid "Timestamps:"
msgstr "タイムスタンプ:"

#: ../../library/os.rst:2300
msgid "Time of most recent access expressed in seconds."
msgstr "秒で表した最終アクセス時刻。"

#: ../../library/os.rst:2304
msgid "Time of most recent content modification expressed in seconds."
msgstr "秒で表した最終内容更新時刻。"

#: ../../library/os.rst:2308 ../../library/os.rst:2324
msgid "Platform dependent:"
msgstr "プラットフォーム依存:"

#: ../../library/os.rst:2310 ../../library/os.rst:2326
msgid "the time of most recent metadata change on Unix,"
msgstr "Unix ではメタデータの最終更新時刻"

#: ../../library/os.rst:2311
msgid "the time of creation on Windows, expressed in seconds."
msgstr "Windows では作成時刻、単位は秒"

#: ../../library/os.rst:2315
msgid "Time of most recent access expressed in nanoseconds as an integer."
msgstr "ナノ秒 (整数) で表した最終アクセス時刻。"

#: ../../library/os.rst:2319
msgid ""
"Time of most recent content modification expressed in nanoseconds as an "
"integer."
msgstr "ナノ秒 (整数) で表した最終内容更新時刻。"

#: ../../library/os.rst:2327
msgid ""
"the time of creation on Windows, expressed in nanoseconds as an integer."
msgstr "Windows で、ナノ秒 (整数) で表した作成時刻。"

#: ../../library/os.rst:2330
msgid "See also the :func:`stat_float_times` function."
msgstr ":func:`stat_float_times` 関数も参照してください。"

#: ../../library/os.rst:2334
msgid ""
"The exact meaning and resolution of the :attr:`st_atime`, :attr:`st_mtime`, "
"and :attr:`st_ctime` attributes depend on the operating system and the file "
"system. For example, on Windows systems using the FAT or FAT32 file "
"systems, :attr:`st_mtime` has 2-second resolution, and :attr:`st_atime` has "
"only 1-day resolution.  See your operating system documentation for details."
msgstr ""
":attr:`st_atime` 、 :attr:`st_mtime` 、および :attr:`st_ctime` 属性の厳密な意"
"味や精度はオペレーティングシステムやファイルシステムによって変わります。例え"
"ば、 FAT や FAT32 ファイルシステムを使用している Windows システムでは、 :"
"attr:`st_mtime` の精度は 2 秒であり、 :attr:`st_atime` の精度は 1 日に過ぎま"
"せん。詳しくはお使いのオペレーティングシステムのドキュメントを参照してくださ"
"い。"

#: ../../library/os.rst:2341
msgid ""
"Similarly, although :attr:`st_atime_ns`, :attr:`st_mtime_ns`, and :attr:"
"`st_ctime_ns` are always expressed in nanoseconds, many systems do not "
"provide nanosecond precision.  On systems that do provide nanosecond "
"precision, the floating-point object used to store :attr:`st_atime`, :attr:"
"`st_mtime`, and :attr:`st_ctime` cannot preserve all of it, and as such will "
"be slightly inexact. If you need the exact timestamps you should always use :"
"attr:`st_atime_ns`, :attr:`st_mtime_ns`, and :attr:`st_ctime_ns`."
msgstr ""
"同じように、:attr:`st_atime_ns`、:attr:`st_mtime_ns`、および :attr:"
"`st_ctime_ns` は常にナノ秒で表されますが、多くのシステムではナノ秒単位の精度"
"では提供していません。ナノ秒単位の精度を提供するシステムであっても、:attr:"
"`st_atime`、:attr:`st_mtime`、および :attr:`st_ctime` についてはそれらが格納"
"される浮動小数点オブジェクトがそのすべてを保持できず、それ自体が少々不正確で"
"す。正確なタイムスタンプが必要な場合は、:attr:`st_atime_ns`、:attr:"
"`st_mtime_ns`、および :attr:`st_ctime_ns` を使用するべきです。"

#: ../../library/os.rst:2350
msgid ""
"On some Unix systems (such as Linux), the following attributes may also be "
"available:"
msgstr ""
"(Linux のような ) 一部の Unix システムでは、以下の属性が利用できる場合があり"
"ます :"

#: ../../library/os.rst:2355
msgid ""
"Number of 512-byte blocks allocated for file. This may be smaller than :attr:"
"`st_size`/512 when the file has holes."
msgstr ""
"ファイルに対して割り当てられている 512 バイトのブロックの数です。ファイルに"
"ホール (hole) が含まれている場合、:attr:`st_size`/512 より小さくなる場合があ"
"ります。"

#: ../../library/os.rst:2360
msgid ""
"\"Preferred\" blocksize for efficient file system I/O. Writing to a file in "
"smaller chunks may cause an inefficient read-modify-rewrite."
msgstr ""
"効率的なファイルシステム I/O のための「推奨される」ブロックサイズです。ファイ"
"ルに、これより小さいチャンクで書き込むと、非効率的な読み込み、編集、再書き込"
"みが起こる場合があります。"

#: ../../library/os.rst:2365
msgid "Type of device if an inode device."
msgstr "inode デバイスの場合デバイスタイプ"

#: ../../library/os.rst:2369
msgid "User defined flags for file."
msgstr "ファイルのユーザ定義フラグ"

#: ../../library/os.rst:2371
msgid ""
"On other Unix systems (such as FreeBSD), the following attributes may be "
"available (but may be only filled out if root tries to use them):"
msgstr ""
"他の (FreeBSD のような ) Unix システムでは、以下の属性が利用できる場合があり"
"ます ( ただし root ユーザ以外が使うと値が入っていない場合があります ):"

#: ../../library/os.rst:2376
msgid "File generation number."
msgstr "ファイル生成番号"

#: ../../library/os.rst:2380
msgid "Time of file creation."
msgstr "ファイル作成時刻"

#: ../../library/os.rst:2382
msgid "On Mac OS systems, the following attributes may also be available:"
msgstr "Mac OS システムでは、以下の属性も利用できる場合があります:"

#: ../../library/os.rst:2386
msgid "Real size of the file."
msgstr "ファイルの実際のサイズ"

#: ../../library/os.rst:2390
msgid "Creator of the file."
msgstr "ファイルの作成者"

#: ../../library/os.rst:2394
msgid "File type."
msgstr "ファイルタイプ"

#: ../../library/os.rst:2396
msgid "On Windows systems, the following attribute is also available:"
msgstr "Windows システムでは以下の属性も利用できます:"

#: ../../library/os.rst:2400
msgid ""
"Windows file attributes: ``dwFileAttributes`` member of the "
"``BY_HANDLE_FILE_INFORMATION`` structure returned by :c:func:"
"`GetFileInformationByHandle`. See the ``FILE_ATTRIBUTE_*`` constants in the :"
"mod:`stat` module."
msgstr ""
"Windows のファイルの属性。:c:func:`GetFileInformationByHandle` の返す "
"``BY_HANDLE_FILE_INFORMATION`` 構造の ``dwFileAttributes`` メンバーです。:"
"mod:`stat` モジュールの ``FILE_ATTRIBUTE_*`` 定数を参照してください。"

#: ../../library/os.rst:2405
msgid ""
"The standard module :mod:`stat` defines functions and constants that are "
"useful for extracting information from a :c:type:`stat` structure. (On "
"Windows, some items are filled with dummy values.)"
msgstr ""
"標準モジュール :mod:`stat` は :c:type:`stat` 構造体からの情報の取り出しに役立"
"つ関数と定数を定義しています。 (Windows では、一部のアイテムにダミー値が入り"
"ます )"

#: ../../library/os.rst:2409
msgid ""
"For backward compatibility, a :class:`stat_result` instance is also "
"accessible as a tuple of at least 10 integers giving the most important (and "
"portable) members of the :c:type:`stat` structure, in the order :attr:"
"`st_mode`, :attr:`st_ino`, :attr:`st_dev`, :attr:`st_nlink`, :attr:"
"`st_uid`, :attr:`st_gid`, :attr:`st_size`, :attr:`st_atime`, :attr:"
"`st_mtime`, :attr:`st_ctime`. More items may be added at the end by some "
"implementations. For compatibility with older Python versions, accessing :"
"class:`stat_result` as a tuple always returns integers."
msgstr ""
"後方互換性のため、:class:`stat_result` インスタンスには、 :c:type:`stat` 構造"
"体の最も重要な (そして移植性の高い) メンバーを表す少なくとも 10 個の整数から"
"なるタプルとしてもアクセス可能です。このタプルは、 :attr:`st_mode`、:attr:"
"`st_ino`、:attr:`st_dev`、:attr:`st_nlink`、:attr:`st_uid`、:attr:`st_gid`、:"
"attr:`st_size`、:attr:`st_atime`、:attr:`st_mtime`、:attr:`st_ctime` の順にな"
"ります。実装によってはそれ以上のアイテムが末尾に追加されます。古いバージョン"
"の Python との互換性のため、 :class:`stat_result` にタプルとしてアクセスする"
"と、常に整数を返します。"

#: ../../library/os.rst:2418
msgid ""
"Added the :attr:`st_atime_ns`, :attr:`st_mtime_ns`, and :attr:`st_ctime_ns` "
"members."
msgstr ""
":attr:`st_atime_ns`、:attr:`st_mtime_ns`、:attr:`st_ctime_ns` メンバが追加さ"
"れました。"

#: ../../library/os.rst:2422
msgid "Added the :attr:`st_file_attributes` member on Windows."
msgstr "Windows において :attr:`st_file_attributes` メンバが追加されました。"

#: ../../library/os.rst:2425
msgid "Windows now returns the file index as :attr:`st_ino` when available."
msgstr ""

#: ../../library/os.rst:2432
msgid ""
"Determine whether :class:`stat_result` represents time stamps as float "
"objects. If *newvalue* is ``True``, future calls to :func:`~os.stat` return "
"floats, if it is ``False``, future calls return ints. If *newvalue* is "
"omitted, return the current setting."
msgstr ""
":class:`stat_result` がタイムスタンプに浮動小数点オブジェクトを使うかどうかを"
"決定します。 *newvalue* が ``True`` の場合、以後の :func:`~os.stat` 呼び出し"
"は浮動小数点を返し、 ``False`` の場合には以後整数を返します。 *newvalue* が省"
"略された場合、現在の設定どおりの返り値になります。"

#: ../../library/os.rst:2437
msgid ""
"For compatibility with older Python versions, accessing :class:`stat_result` "
"as a tuple always returns integers."
msgstr ""
"古いバージョンの Python と互換性を保つため、 :class:`stat_result` にタプルと"
"してアクセスすると、常に整数が返されます。"

#: ../../library/os.rst:2440
msgid ""
"Python now returns float values by default. Applications which do not work "
"correctly with floating point time stamps can use this function to restore "
"the old behaviour."
msgstr ""
"Python は現在デフォルトで浮動小数点値を返します。タイムスタンプが浮動小数点で"
"は正常に動作しないアプリケーションは、この関数で古い挙動を利用できます。"

#: ../../library/os.rst:2444
msgid ""
"The resolution of the timestamps (that is the smallest possible fraction) "
"depends on the system. Some systems only support second resolution; on these "
"systems, the fraction will always be zero."
msgstr ""
"タイムスタンプの精度 (すなわち最小の小数部分) はシステム依存です。システムに"
"よっては秒単位の精度しかサポートしません。そういったシステムでは小数部分は常"
"に 0 です。"

#: ../../library/os.rst:2448
msgid ""
"It is recommended that this setting is only changed at program startup time "
"in the *__main__* module; libraries should never change this setting. If an "
"application uses a library that works incorrectly if floating point time "
"stamps are processed, this application should turn the feature off until the "
"library has been corrected."
msgstr ""
"この設定の変更は、プログラムの起動時に、 *__main__* モジュールの中でのみ行う"
"ことを推奨します。ライブラリは決してこの設定を変更すべきではありません。浮動"
"小数点型のタイムスタンプを処理すると不正確な動作をするようなライブラリを使う"
"場合、ライブラリが修正されるまで、その機能を停止させておくべきです。"

#: ../../library/os.rst:2459
msgid ""
"Perform a :c:func:`statvfs` system call on the given path.  The return value "
"is an object whose attributes describe the filesystem on the given path, and "
"correspond to the members of the :c:type:`statvfs` structure, namely: :attr:"
"`f_bsize`, :attr:`f_frsize`, :attr:`f_blocks`, :attr:`f_bfree`, :attr:"
"`f_bavail`, :attr:`f_files`, :attr:`f_ffree`, :attr:`f_favail`, :attr:"
"`f_flag`, :attr:`f_namemax`."
msgstr ""
"与えられたパスに対して :c:func:`statvfs` システムコールを実行します。返り値は"
"オブジェクトで、その属性は与えられたパスが格納されているファイルシステムにつ"
"いて記述したものです。各属性は :c:type:`statvfs` 構造体のメンバーに対応しま"
"す : :attr:`f_bsize`, :attr:`f_frsize`, :attr:`f_blocks`, :attr:`f_bfree`, :"
"attr:`f_bavail`, :attr:`f_files`, :attr:`f_ffree`, :attr:`f_favail`, :attr:"
"`f_flag`, :attr:`f_namemax` 。"

#: ../../library/os.rst:2466
msgid ""
"Two module-level constants are defined for the :attr:`f_flag` attribute's "
"bit-flags: if :const:`ST_RDONLY` is set, the filesystem is mounted read-"
"only, and if :const:`ST_NOSUID` is set, the semantics of setuid/setgid bits "
"are disabled or not supported."
msgstr ""
":attr:`f_flag` 属性のビットフラグ用に 2 つのモジュールレベル定数が定義されて"
"います: :const:`ST_RDONLY` が設定されるとファイルシステムは読み出し専用でマウ"
"ントされ、:const:`ST_NOSUID` が設定されると setuid/setgid ビットの動作は無効"
"になるか、サポートされません。"

#: ../../library/os.rst:2471
msgid ""
"Additional module-level constants are defined for GNU/glibc based systems. "
"These are :const:`ST_NODEV` (disallow access to device special files), :"
"const:`ST_NOEXEC` (disallow program execution), :const:`ST_SYNCHRONOUS` "
"(writes are synced at once), :const:`ST_MANDLOCK` (allow mandatory locks on "
"an FS), :const:`ST_WRITE` (write on file/directory/symlink), :const:"
"`ST_APPEND` (append-only file), :const:`ST_IMMUTABLE` (immutable file), :"
"const:`ST_NOATIME` (do not update access times), :const:`ST_NODIRATIME` (do "
"not update directory access times), :const:`ST_RELATIME` (update atime "
"relative to mtime/ctime)."
msgstr ""
"GNU/glibc ベースのシステム用に、追加のモジュールレベルの定数が次のように定義"
"されています。 :const:`ST_NODEV` (デバイス特殊ファイルへのアクセスを許可しな"
"い) 、  :const:`ST_NOEXEC` (プログラムの実行を許可しない) 、 :const:"
"`ST_SYNCHRONOUS` (書き込みが一度に同期される) 、:const:`ST_MANDLOCK` (ファイ"
"ルシステムで強制的なロックを許可する) 、 :const:`ST_WRITE` (ファイル/ディレク"
"トリ/シンボリックリンクに書き込む) 、 :const:`ST_APPEND` (追記のみのファイ"
"ル) 、:const:`ST_IMMUTABLE` (変更不能なファイル) 、 :const:`ST_NOATIME` (アク"
"セス時刻を更新しない) 、:const:`ST_NODIRATIME` (ディレクトリアクセス時刻を更"
"新しない) 、:const:`ST_RELATIME` (mtime/ctimeに対して相対的に atime を更新す"
"る)。"

#: ../../library/os.rst:2484
msgid "The :const:`ST_RDONLY` and :const:`ST_NOSUID` constants were added."
msgstr "定数 :const:`ST_RDONLY` および :const:`ST_NOSUID` が追加されました。"

#: ../../library/os.rst:2490
msgid ""
"The :const:`ST_NODEV`, :const:`ST_NOEXEC`, :const:`ST_SYNCHRONOUS`, :const:"
"`ST_MANDLOCK`, :const:`ST_WRITE`, :const:`ST_APPEND`, :const:"
"`ST_IMMUTABLE`, :const:`ST_NOATIME`, :const:`ST_NODIRATIME`, and :const:"
"`ST_RELATIME` constants were added."
msgstr ""
":const:`ST_NODEV`, :const:`ST_NOEXEC`, :const:`ST_SYNCHRONOUS`, :const:"
"`ST_MANDLOCK`, :const:`ST_WRITE`, :const:`ST_APPEND`, :const:"
"`ST_IMMUTABLE`, :const:`ST_NOATIME`, :const:`ST_NODIRATIME`, :const:"
"`ST_RELATIME` 定数が追加されました。"

#: ../../library/os.rst:2502
msgid ""
"A :class:`~collections.abc.Set` object indicating which functions in the :"
"mod:`os` module permit use of their *dir_fd* parameter.  Different platforms "
"provide different functionality, and an option that might work on one might "
"be unsupported on another.  For consistency's sakes, functions that support "
"*dir_fd* always allow specifying the parameter, but will raise an exception "
"if the functionality is not actually available."
msgstr ""
":mod:`os` モジュールのどの関数が *dir_fd* 引数の使用を許可するかを示す、:"
"class:`~collections.abc.Set` オブジェクト。異なるプラットフォームでは、異なる"
"機能を持ち、あるプラットフォームで動作するオプションが、別のプラットフォーム"
"では動作しない場合があります。一貫性を保つため、 *dir_fd* をサポートする関数"
"は常に引数の指定を許可しますが、機能が実際に使用できない場合には、例外を送出"
"します。"

#: ../../library/os.rst:2509
msgid ""
"To check whether a particular function permits use of its *dir_fd* "
"parameter, use the ``in`` operator on ``supports_dir_fd``.  As an example, "
"this expression determines whether the *dir_fd* parameter of :func:`os.stat` "
"is locally available::"
msgstr ""
"特定の関数が *dir_fd* 引数の使用を許可しているかどうか確認するには、"
"``supports_dir_fd`` と ``in`` 演算子で比較します。例えば、以下の式では :func:"
"`os.stat` の *dir_fd* 引数がローカルシステム上で利用できるかどうか確認できま"
"す::"

#: ../../library/os.rst:2516
msgid ""
"Currently *dir_fd* parameters only work on Unix platforms; none of them work "
"on Windows."
msgstr ""
"現在 *dir_fd* 引数は Unix プラットフォームでのみ動作します。Windows で動作す"
"る関数はありません。"

#: ../../library/os.rst:2524
msgid ""
"A :class:`~collections.abc.Set` object indicating which functions in the :"
"mod:`os` module permit use of the *effective_ids* parameter for :func:`os."
"access`.  If the local platform supports it, the collection will contain :"
"func:`os.access`, otherwise it will be empty."
msgstr ""
":mod:`os` モジュールのどの関数が :func:`os.access` の *effective_ids* 引数の"
"使用を許可するかを示す、:class:`~collections.abc.Set` オブジェクト。ローカル"
"プラットフォームでサポートされている場合、このコレクションは :func:`os."
"access` を含みます。サポートされていない場合、空になります。"

#: ../../library/os.rst:2529
msgid ""
"To check whether you can use the *effective_ids* parameter for :func:`os."
"access`, use the ``in`` operator on ``supports_effective_ids``, like so::"
msgstr ""
":func:`os.access` で *effective_ids* 引数が使用できるかどうか確認するには、以"
"下のように ``supports_effective_ids`` に ``in`` 演算子を使用します::"

#: ../../library/os.rst:2535
msgid ""
"Currently *effective_ids* only works on Unix platforms; it does not work on "
"Windows."
msgstr ""
"現在 *effective_ids* は Unix プラットフォームでのみが動作します。Windows では"
"動作しません。"

#: ../../library/os.rst:2543
msgid ""
"A :class:`~collections.abc.Set` object indicating which functions in the :"
"mod:`os` module permit specifying their *path* parameter as an open file "
"descriptor.  Different platforms provide different functionality, and an "
"option that might work on one might be unsupported on another.  For "
"consistency's sakes, functions that support *fd* always allow specifying the "
"parameter, but will raise an exception if the functionality is not actually "
"available."
msgstr ""
":mod:`os` モジュールのどの関数が、*path* 引数をオープンしているファイル記述子"
"として指定するかを示す、:class:`~collections.abc.Set` オブジェクト。異なるプ"
"ラットフォームでは、異なる機能を持ち、あるプラットフォームで動作するオプショ"
"ンが、別のプラットフォームでは動作しない場合があります。一貫性を保つため、 "
"*fd* をサポートする関数は常に引数の指定を許可しますが、機能が実際に使用できな"
"い場合には、例外を送出します。"

#: ../../library/os.rst:2551
msgid ""
"To check whether a particular function permits specifying an open file "
"descriptor for its *path* parameter, use the ``in`` operator on "
"``supports_fd``. As an example, this expression determines whether :func:`os."
"chdir` accepts open file descriptors when called on your local platform::"
msgstr ""
"特定の関数が *path* 引数にオープンしているファイル記述子の指定を許可している"
"かどうか確認するには、``supports_fd`` に ``in`` 演算子を使用します。例えば、"
"以下の式では :func:`os.chdir` がローカルプラットフォーム上で呼び出された時に"
"オープンしているファイル記述子を受け付けるかどうか確認できます::"

#: ../../library/os.rst:2564
msgid ""
"A :class:`~collections.abc.Set` object indicating which functions in the :"
"mod:`os` module permit use of their *follow_symlinks* parameter.  Different "
"platforms provide different functionality, and an option that might work on "
"one might be unsupported on another.  For consistency's sakes, functions "
"that support *follow_symlinks* always allow specifying the parameter, but "
"will raise an exception if the functionality is not actually available."
msgstr ""
":mod:`os` モジュールのどの関数が *follow_symlinks* 引数の使用を許可するかを示"
"す、:class:`~collections.abc.Set` オブジェクト。異なるプラットフォームでは、"
"異なる機能を持ち、あるプラットフォームで動作するオプションが、別のプラット"
"フォームでは動作しない場合があります。一貫性を保つため、 *follow_symlinks* を"
"サポートする関数は常に引数の指定を許可しますが、機能が実際に使用できない場合"
"には、例外を送出します。"

#: ../../library/os.rst:2571
msgid ""
"To check whether a particular function permits use of its *follow_symlinks* "
"parameter, use the ``in`` operator on ``supports_follow_symlinks``.  As an "
"example, this expression determines whether the *follow_symlinks* parameter "
"of :func:`os.stat` is locally available::"
msgstr ""
"特定の関数が *follow_symlinks* 引数をサポートしているかどうか確認するには、"
"``supports_follow_symlinks`` に ``in`` 演算子を使用します。例えば、以下の式で"
"は :func:`os.stat` がローカルシステム上で *follow_symlinks* 引数を利用できる"
"かどうか確認できます::"

#: ../../library/os.rst:2583
msgid "Create a symbolic link pointing to *src* named *dst*."
msgstr "*src* を指し示すシンボリックリンク *dst* を作成します。"

#: ../../library/os.rst:2585
msgid ""
"On Windows, a symlink represents either a file or a directory, and does not "
"morph to the target dynamically.  If the target is present, the type of the "
"symlink will be created to match. Otherwise, the symlink will be created as "
"a directory if *target_is_directory* is ``True`` or a file symlink (the "
"default) otherwise.  On non-Windows platforms, *target_is_directory* is "
"ignored."
msgstr ""
"Windows では、シンボリックリンクはファイルかディレクトリのどちらかを表します"
"が、ターゲットに合わせて動的に変化することはありません。ターゲットが存在する"
"場合、シンボリックリンクの種類は対象に合わせて作成されます。ターゲットが存在"
"せず *target_is_directory* に ``True`` が設定された場合、シンボリックリンクは"
"ディレクトリのリンクとして作成され、``False`` に設定された場合 (デフォルト) "
"はファイルのリンクになります。Windows 以外のプラットフォームでは "
"*target_is_directory* は無視されます。"

#: ../../library/os.rst:2591
msgid ""
"Symbolic link support was introduced in Windows 6.0 (Vista).  :func:"
"`symlink` will raise a :exc:`NotImplementedError` on Windows versions "
"earlier than 6.0."
msgstr ""
"シンボリックリンクのサポートは Windows 6.0 (Vista) から導入されました。"
"Windows がそれより古い場合 :func:`symlink` は :exc:`NotImplementedError` を送"
"出します。"

#: ../../library/os.rst:2599
msgid ""
"On Windows, the *SeCreateSymbolicLinkPrivilege* is required in order to "
"successfully create symlinks. This privilege is not typically granted to "
"regular users but is available to accounts which can escalate privileges to "
"the administrator level. Either obtaining the privilege or running your "
"application as an administrator are ways to successfully create symlinks."
msgstr ""
"Windowsでは、シンボリックリンクを作成するには特権 "
"*SeCreateSymbolicLinkPrivilege* が必要です。この特権は通常一般ユーザーには与"
"えられていませんが、管理者レベルに特権をエスカレートしたアカウントで利用でき"
"ます。この特権を取得するか、アプリケーションを管理者として実行すると、シンボ"
"リックリンクを作成することができます。"

#: ../../library/os.rst:2606
msgid ""
":exc:`OSError` is raised when the function is called by an unprivileged user."
msgstr ""
"この関数が特権を持たないユーザーに呼び出されると、:exc:`OSError` が送出されま"
"す。"

#: ../../library/os.rst:2614
msgid ""
"Added the *dir_fd* argument, and now allow *target_is_directory* on non-"
"Windows platforms."
msgstr ""
"引数 *dir_fd* が追加され、非 Windows プラットフォームでの "
"*target_is_directory* 指定がサポートされました。"

#: ../../library/os.rst:2624
msgid "Force write of everything to disk."
msgstr "ディスクキャッシュのディスクへの書き出しを強制します。"

#: ../../library/os.rst:2633
msgid ""
"Truncate the file corresponding to *path*, so that it is at most *length* "
"bytes in size."
msgstr ""
"*path* に対応するファイルを、サイズが最大で *length* バイトになるよう切り詰め"
"ます。"

#: ../../library/os.rst:2651
msgid ""
"Remove (delete) the file *path*.  This function is semantically identical "
"to :func:`remove`; the ``unlink`` name is its traditional Unix name.  Please "
"see the documentation for :func:`remove` for further information."
msgstr ""
"ファイル *path* を削除します。意味上は :func:`remove` と等価です。 "
"``unlink`` の名前は伝統的な Unix の関数名です。詳細は :func:`remove` のドキュ"
"メントを参照してください。"

#: ../../library/os.rst:2665
msgid "Set the access and modified times of the file specified by *path*."
msgstr ""
"*path* で指定されたファイルに最終アクセス時刻および最終修正時刻を設定します。"

#: ../../library/os.rst:2667
msgid ""
":func:`utime` takes two optional parameters, *times* and *ns*. These specify "
"the times set on *path* and are used as follows:"
msgstr ""
":func:`utime` は 2 つの任意引数 *times* と *ns* をとります。これらは *path* "
"に設定する時刻を指定し、以下のように使用されます:"

#: ../../library/os.rst:2670
msgid ""
"If *ns* is specified, it must be a 2-tuple of the form ``(atime_ns, "
"mtime_ns)`` where each member is an int expressing nanoseconds."
msgstr ""
"*ns* を指定する場合、ナノ秒を表す整数値をメンバーとして使用して、 "
"``(atime_ns, mtime_ns)`` の形式の 2 要素タプルを指定する必要があります。"

#: ../../library/os.rst:2673
msgid ""
"If *times* is not ``None``, it must be a 2-tuple of the form ``(atime, "
"mtime)`` where each member is an int or float expressing seconds."
msgstr ""
"*times* が ``None`` ではない場合、``(atime, mtime)`` の形式で各メンバーは単位"
"を秒で表す整数か浮動小数点値のタプルを指定しなければなりません。"

#: ../../library/os.rst:2676
msgid ""
"If *times* is ``None`` and *ns* is unspecified, this is equivalent to "
"specifying ``ns=(atime_ns, mtime_ns)`` where both times are the current time."
msgstr ""
"*times* が ``None`` で、 *ns* が指定されていない場合、これは両方の時間を現在"
"時刻として ``ns=(atime_ns, mtime_ns)`` を指定することと等価です。"

#: ../../library/os.rst:2680
msgid "It is an error to specify tuples for both *times* and *ns*."
msgstr "*times* と *ns* の両方にタプルが指定されるとエラーになります。"

#: ../../library/os.rst:2682
msgid ""
"Whether a directory can be given for *path* depends on whether the operating "
"system implements directories as files (for example, Windows does not).  "
"Note that the exact times you set here may not be returned by a subsequent :"
"func:`~os.stat` call, depending on the resolution with which your operating "
"system records access and modification times; see :func:`~os.stat`.  The "
"best way to preserve exact times is to use the *st_atime_ns* and "
"*st_mtime_ns* fields from the :func:`os.stat` result object with the *ns* "
"parameter to `utime`."
msgstr ""
"*path* にディレクトリを指定できるかどうかは、オペレーティングシステムがディレ"
"クトリをファイルとして実装しているかどうかによります (例えば Windows はそうで"
"はありません)。ここで設定した時刻が、後に :func:`~os.stat` の呼び出し時正確に"
"返されない場合があります。これはオペレーティングシステムが記録するアクセスお"
"よび修正時刻の精度に依存しています; :func:`~os.stat` を参照してください。正確"
"な時刻を保持する最善の方法は、`utime` で *ns* 引数を指定し、:func:`os.stat` "
"の返り値オブジェクトから *st_atime_ns* および *st_mtime_ns* フィールドを使用"
"することです。"

#: ../../library/os.rst:2695
msgid ""
"Added support for specifying an open file descriptor for *path*, and the "
"*dir_fd*, *follow_symlinks*, and *ns* parameters."
msgstr ""
"*path* にオープンしているファイル記述子の指定がサポートされ、引数 *dir_fd*、"
"*follow_symlinks*、および *ns* が追加されました。"

#: ../../library/os.rst:2709
msgid ""
"Generate the file names in a directory tree by walking the tree either top-"
"down or bottom-up. For each directory in the tree rooted at directory *top* "
"(including *top* itself), it yields a 3-tuple ``(dirpath, dirnames, "
"filenames)``."
msgstr ""
"ディレクトリツリー以下のファイル名を、ツリーをトップダウンもしくはボトムアッ"
"プに走査することで作成します。ディレクトリ *top* を根に持つディレクトリツリー"
"に含まれる、各ディレクトリ (*top* 自身を含む ) ごとに、タプル ``(dirpath, "
"dirnames, filenames)`` を yield します。"

#: ../../library/os.rst:2714
msgid ""
"*dirpath* is a string, the path to the directory.  *dirnames* is a list of "
"the names of the subdirectories in *dirpath* (excluding ``'.'`` and "
"``'..'``). *filenames* is a list of the names of the non-directory files in "
"*dirpath*. Note that the names in the lists contain no path components.  To "
"get a full path (which begins with *top*) to a file or directory in "
"*dirpath*, do ``os.path.join(dirpath, name)``."
msgstr ""
"*dirpath* は文字列で、ディレクトリへのパスです。 *dirnames* は *dirpath* 内の"
"サブディレクトリ名のリスト (``'.'`` と ``'..'`` は除く）です。 *filenames* "
"は *dirpath* 内の非ディレクトリ・ファイル名のリストです。このリスト内の名前に"
"はファイル名までのパスが含まれません。 *dirpath* 内のファイルやディレクトリへ"
"の (*top* からたどった ) フルパスを得るには、 ``os.path.join(dirpath, "
"name)`` を使用してください。"

#: ../../library/os.rst:2721
msgid ""
"If optional argument *topdown* is ``True`` or not specified, the triple for "
"a directory is generated before the triples for any of its subdirectories "
"(directories are generated top-down).  If *topdown* is ``False``, the triple "
"for a directory is generated after the triples for all of its subdirectories "
"(directories are generated bottom-up). No matter the value of *topdown*, the "
"list of subdirectories is retrieved before the tuples for the directory and "
"its subdirectories are generated."
msgstr ""
"オプション引数 *topdown* が ``True`` であるか、指定されなかった場合、各ディレ"
"クトリからタプルを生成した後で、サブディレクトリからタプルを生成します。 "
"( ディレクトリはトップダウンで生成 ) 。 *topdown* が ``False`` の場合、ディレ"
"クトリに対応するタプルは、そのディレクトリ以下の全てのサブディレクトリに対応"
"するタプルの後で ( ボトムアップで ) 生成されます。 *topdown* の値によらず、サ"
"ブディレクトリのリストは、ディレクトリとそのサブディレクトリのタプルを生成す"
"る前に取り出されます。"

#: ../../library/os.rst:2729
msgid ""
"When *topdown* is ``True``, the caller can modify the *dirnames* list in-"
"place (perhaps using :keyword:`del` or slice assignment), and :func:`walk` "
"will only recurse into the subdirectories whose names remain in *dirnames*; "
"this can be used to prune the search, impose a specific order of visiting, "
"or even to inform :func:`walk` about directories the caller creates or "
"renames before it resumes :func:`walk` again.  Modifying *dirnames* when "
"*topdown* is ``False`` has no effect on the behavior of the walk, because in "
"bottom-up mode the directories in *dirnames* are generated before *dirpath* "
"itself is generated."
msgstr ""
"*topdown* が ``True`` のとき、呼び出し側は *dirnames* リストを、インプレース"
"で ( たとえば、 :keyword:`del` やスライスを使った代入で ) 変更でき、 :func:"
"`walk` は *dirnames* に残っているサブディレクトリ内のみを再帰します。これによ"
"り、検索を省略したり、特定の訪問順序を強制したり、呼び出し側が :func:`walk` "
"を再開する前に、呼び出し側が作った、または名前を変更したディレクトリを、 :"
"func:`walk` に知らせたりすることができます。 *topdown* が ``False`` のときに "
"*dirnames* を変更しても効果はありません。ボトムアップモードでは *dirpath* 自"
"身が生成される前に *dirnames* 内のディレクトリの情報が生成されるからです。"

#: ../../library/os.rst:2738
msgid ""
"By default, errors from the :func:`scandir` call are ignored.  If optional "
"argument *onerror* is specified, it should be a function; it will be called "
"with one argument, an :exc:`OSError` instance.  It can report the error to "
"continue with the walk, or raise the exception to abort the walk.  Note that "
"the filename is available as the ``filename`` attribute of the exception "
"object."
msgstr ""
"デフォルトでは、 :func:`scandir` 呼び出しからのエラーは無視されます。オプショ"
"ン引数の *onerror* を指定する場合は関数でなければなりません ; この関数は単一"
"の引数として :exc:`OSError` インスタンスを伴って呼び出されます。この関数でエ"
"ラーを報告して走査を継続したり、例外を送出して走査を中止したりできます。ファ"
"イル名は例外オブジェクトの ``filename`` 属性として利用できます。"

#: ../../library/os.rst:2744
msgid ""
"By default, :func:`walk` will not walk down into symbolic links that resolve "
"to directories. Set *followlinks* to ``True`` to visit directories pointed "
"to by symlinks, on systems that support them."
msgstr ""
"デフォルトでは、 :func:`walk` はディレクトリへのシンボリックリンクをたどりま"
"せん。 *followlinks* に ``True`` を指定すると、ディレクトリへのシンボリックリ"
"ンクをサポートしているシステムでは、シンボリックリンクの指しているディレクト"
"リを走査します。"

#: ../../library/os.rst:2750
msgid ""
"Be aware that setting *followlinks* to ``True`` can lead to infinite "
"recursion if a link points to a parent directory of itself. :func:`walk` "
"does not keep track of the directories it visited already."
msgstr ""
"*followlinks* に ``True`` を指定すると、シンボリックリンクが親ディレクトリを"
"指していた場合に、無限ループになることに注意してください。 :func:`walk` はす"
"でにたどったディレクトリを管理したりはしません。"

#: ../../library/os.rst:2756
msgid ""
"If you pass a relative pathname, don't change the current working directory "
"between resumptions of :func:`walk`.  :func:`walk` never changes the current "
"directory, and assumes that its caller doesn't either."
msgstr ""
"相対パスを渡した場合、 :func:`walk` が再開されるまでの間に現在の作業ディレク"
"トリを変更しないでください。 :func:`walk` はカレントディレクトリを変更しませ"
"んし、呼び出し側もカレントディレクトリを変更しないと仮定しています。"

#: ../../library/os.rst:2760 ../../library/os.rst:2819
msgid ""
"This example displays the number of bytes taken by non-directory files in "
"each directory under the starting directory, except that it doesn't look "
"under any CVS subdirectory::"
msgstr ""
"以下の例では、最初のディレクトリ以下にある各ディレクトリに含まれる、非ディレ"
"クトリファイルのバイト数を表示します。ただし、 CVS サブディレクトリ以下は見に"
"行きません ::"

#: ../../library/os.rst:2773
msgid ""
"In the next example (simple implementation of :func:`shutil.rmtree`), "
"walking the tree bottom-up is essential, :func:`rmdir` doesn't allow "
"deleting a directory before the directory is empty::"
msgstr ""
"次の例 (:func:`shutil.rmtree` の単純な実装) では、ツリーをボトムアップで走査"
"することが不可欠になります; :func:`rmdir` はディレクトリが空になるまで削除を"
"許さないからです::"

#: ../../library/os.rst:2788
msgid ""
"This function now calls :func:`os.scandir` instead of :func:`os.listdir`, "
"making it faster by reducing the number of calls to :func:`os.stat`."
msgstr ""
"この関数は、今では :func:`os.listdir` ではなく :func:`os.scandir` を呼び出し"
"ます。これにより、 :func:`os.stat` の呼び出し回数を削減でき、動作が高速化しま"
"す。"

#: ../../library/os.rst:2802
msgid ""
"This behaves exactly like :func:`walk`, except that it yields a 4-tuple "
"``(dirpath, dirnames, filenames, dirfd)``, and it supports ``dir_fd``."
msgstr ""
"挙動は :func:`walk` と同じですが、``dir_fd`` をサポートし、タプル "
"``(dirpath, dirnames, filenames, dirfd)`` を yield します。"

#: ../../library/os.rst:2805
msgid ""
"*dirpath*, *dirnames* and *filenames* are identical to :func:`walk` output, "
"and *dirfd* is a file descriptor referring to the directory *dirpath*."
msgstr ""
"*dirpath*、*dirnames*、および *filenames* は :func:`walk` の出力と同じで、"
"*dirfd* は *dirpath* を参照するファイル記述子です。"

#: ../../library/os.rst:2808
msgid ""
"This function always supports :ref:`paths relative to directory descriptors "
"<dir_fd>` and :ref:`not following symlinks <follow_symlinks>`.  Note however "
"that, unlike other functions, the :func:`fwalk` default value for "
"*follow_symlinks* is ``False``."
msgstr ""
"この関数は常に :ref:`ディレクトリ記述子への相対パス <dir_fd>` および :ref:`シ"
"ンボリックリンクをたどらない <follow_symlinks>` をサポートしています。ただ"
"し、他の関数と異なり、:func:`fwalk` での *follow_symlinks* のデフォルト値は "
"``False`` になることに注意してください。"

#: ../../library/os.rst:2815
msgid ""
"Since :func:`fwalk` yields file descriptors, those are only valid until the "
"next iteration step, so you should duplicate them (e.g. with :func:`dup`) if "
"you want to keep them longer."
msgstr ""
":func:`fwalk` はファイル記述子を yield するため、それらが有効なのは次のイテ"
"レートステップまでです。それ以後も保持したい場合は :func:`dup` などを使って複"
"製して使用してください。"

#: ../../library/os.rst:2832
msgid ""
"In the next example, walking the tree bottom-up is essential: :func:`rmdir` "
"doesn't allow deleting a directory before the directory is empty::"
msgstr ""
"次の例では、ツリーをボトムアップで走査することが不可欠になります ; :func:"
"`rmdir` はディレクトリが空になるまで削除を許さないからです ::"

#: ../../library/os.rst:2856
msgid "Linux extended attributes"
msgstr "Linux 拡張属性"

#: ../../library/os.rst:2860
msgid "These functions are all available on Linux only."
msgstr "以下の関数はすべて Linux でのみ使用可能です。"

#: ../../library/os.rst:2864
msgid ""
"Return the value of the extended filesystem attribute *attribute* for "
"*path*. *attribute* can be bytes or str (directly or indirectly through the :"
"class:`PathLike` interface). If it is str, it is encoded with the filesystem "
"encoding."
msgstr ""

#: ../../library/os.rst:2872 ../../library/os.rst:2900
#: ../../library/os.rst:2923
msgid "Accepts a :term:`path-like object` for *path* and *attribute*."
msgstr ""
"*path* と *attribute* が :term:`path-like object` を受け付けるようになりまし"
"た。"

#: ../../library/os.rst:2878
msgid ""
"Return a list of the extended filesystem attributes on *path*.  The "
"attributes in the list are represented as strings decoded with the "
"filesystem encoding.  If *path* is ``None``, :func:`listxattr` will examine "
"the current directory."
msgstr ""
"*path* の拡張ファイルシステム属性のリストを返します。リスト内の属性はファイル"
"システムのエンコーディングでデコードされた文字列で表されます。*path* が "
"``None`` の場合、:func:`listxattr` はカレントディレクトリを調べます。"

#: ../../library/os.rst:2892
msgid ""
"Removes the extended filesystem attribute *attribute* from *path*. "
"*attribute* should be bytes or str (directly or indirectly through the :"
"class:`PathLike` interface). If it is a string, it is encoded with the "
"filesystem encoding."
msgstr ""

#: ../../library/os.rst:2906
msgid ""
"Set the extended filesystem attribute *attribute* on *path* to *value*. "
"*attribute* must be a bytes or str with no embedded NULs (directly or "
"indirectly through the :class:`PathLike` interface). If it is a str, it is "
"encoded with the filesystem encoding.  *flags* may be :data:`XATTR_REPLACE` "
"or :data:`XATTR_CREATE`. If :data:`XATTR_REPLACE` is given and the attribute "
"does not exist, ``EEXISTS`` will be raised. If :data:`XATTR_CREATE` is given "
"and the attribute already exists, the attribute will not be created and "
"``ENODATA`` will be raised."
msgstr ""

#: ../../library/os.rst:2920
msgid ""
"A bug in Linux kernel versions less than 2.6.39 caused the flags argument to "
"be ignored on some filesystems."
msgstr ""
"Linux カーネル 2.6.39 以前では、バグのため一部のファイルシステムで引数 flags "
"が無視されます。"

#: ../../library/os.rst:2929
msgid ""
"The maximum size the value of an extended attribute can be. Currently, this "
"is 64 KiB on Linux."
msgstr ""
"拡張属性の値にできる最大サイズです。現在、Linux では 64 キロバイトです。"

#: ../../library/os.rst:2935
msgid ""
"This is a possible value for the flags argument in :func:`setxattr`. It "
"indicates the operation must create an attribute."
msgstr ""
":func:`setxattr` の引数 flags に指定できる値です。その操作で属性を作成しなけ"
"ればならないことを意味します。"

#: ../../library/os.rst:2941
msgid ""
"This is a possible value for the flags argument in :func:`setxattr`. It "
"indicates the operation must replace an existing attribute."
msgstr ""
":func:`setxattr` の引数 flags に指定できる値です。その操作で既存の属性を置き"
"換えなければならないことを意味します。"

#: ../../library/os.rst:2948
msgid "Process Management"
msgstr "プロセス管理"

#: ../../library/os.rst:2950
msgid "These functions may be used to create and manage processes."
msgstr "以下の関数はプロセスの生成や管理に利用できます。"

#: ../../library/os.rst:2952
msgid ""
"The various :func:`exec\\* <execl>` functions take a list of arguments for "
"the new program loaded into the process.  In each case, the first of these "
"arguments is passed to the new program as its own name rather than as an "
"argument a user may have typed on a command line.  For the C programmer, "
"this is the ``argv[0]`` passed to a program's :c:func:`main`.  For example, "
"``os.execv('/bin/echo', ['foo', 'bar'])`` will only print ``bar`` on "
"standard output; ``foo`` will seem to be ignored."
msgstr ""
"さまざまな :func:`exec\\* <execl>` 関数は、プロセス内にロードされる新しいプロ"
"グラムに与えるための、引数のリストを取ります。どの関数の場合でも、新しいプロ"
"グラムに渡されるリストの最初の引数は、ユーザがコマンドラインで入力する引数で"
"はなく、そのプログラム自体の名前です。 C プログラマならば、プログラムの :c:"
"func:`main` に渡される ``argv[0]`` だと考えれば良いでしょう。たとえば、 ``os."
"execv('/bin/echo', ['foo', 'bar'])`` が標準出力に出力するのは ``bar`` だけ"
"で、 ``foo`` は無視されたかのように見えることになります。"

#: ../../library/os.rst:2963
msgid ""
"Generate a :const:`SIGABRT` signal to the current process.  On Unix, the "
"default behavior is to produce a core dump; on Windows, the process "
"immediately returns an exit code of ``3``.  Be aware that calling this "
"function will not call the Python signal handler registered for :const:"
"`SIGABRT` with :func:`signal.signal`."
msgstr ""
":const:`SIGABRT` シグナルを現在のプロセスに対して生成します。 Unix では、デ"
"フォルトの動作はコアダンプの生成です ; Windows では、プロセスは即座に終了コー"
"ド ``3`` を返します。この関数の呼び出しは :func:`signal.signal` を使って :"
"const:`SIGABRT` に対し登録された Python シグナルハンドラーを呼び出さないこと"
"に注意してください。"

#: ../../library/os.rst:2979
msgid ""
"These functions all execute a new program, replacing the current process; "
"they do not return.  On Unix, the new executable is loaded into the current "
"process, and will have the same process id as the caller.  Errors will be "
"reported as :exc:`OSError` exceptions."
msgstr ""
"これらの関数はすべて、現在のプロセスを置き換える形で新たなプログラムを実行し"
"ます ; 現在のプロセスは返り値を返しません。 Unix では、新たに実行される実行"
"コードは現在のプロセス内に読み込まれ、呼び出し側と同じプロセス ID を持つこと"
"になります。エラーは :exc:`OSError` 例外として報告されます。"

#: ../../library/os.rst:2984
msgid ""
"The current process is replaced immediately. Open file objects and "
"descriptors are not flushed, so if there may be data buffered on these open "
"files, you should flush them using :func:`sys.stdout.flush` or :func:`os."
"fsync` before calling an :func:`exec\\* <execl>` function."
msgstr ""
"現在のプロセスは瞬時に置き換えられます。開かれているファイルオブジェクトや"
"ファイル記述子はフラッシュされません。そのため、バッファ内にデータが残ってい"
"るかもしれない場合、 :func:`exec\\* <execl>` 関数を実行する前に :func:`sys."
"stdout.flush` か :func:`os.fsync` を利用してバッファをフラッシュしておく必要"
"があります。"

#: ../../library/os.rst:2990
msgid ""
"The \"l\" and \"v\" variants of the :func:`exec\\* <execl>` functions differ "
"in how command-line arguments are passed.  The \"l\" variants are perhaps "
"the easiest to work with if the number of parameters is fixed when the code "
"is written; the individual parameters simply become additional parameters to "
"the :func:`execl\\*` functions.  The \"v\" variants are good when the number "
"of parameters is variable, with the arguments being passed in a list or "
"tuple as the *args* parameter.  In either case, the arguments to the child "
"process should start with the name of the command being run, but this is not "
"enforced."
msgstr ""
"\"l\" および \"v\" のついた :func:`exec\\* <execl>` 関数は、コマンドライン引"
"数をどのように渡すかが異なります。 \"l\" 型は、コードを書くときにパラメタ数が"
"決まっている場合に、おそらくもっとも簡単に利用できます。個々のパラメタは単"
"に :func:`execl\\*` 関数の追加パラメタとなります。 \"v\" 型は、パラメタの数が"
"可変の時に便利で、リストかタプルの引数が *args* パラメタとして渡されます。ど"
"ちらの場合も、子プロセスに渡す引数は動作させようとしているコマンドの名前から"
"始まるべきですが、これは強制されません。"

#: ../../library/os.rst:2999
msgid ""
"The variants which include a \"p\" near the end (:func:`execlp`, :func:"
"`execlpe`, :func:`execvp`, and :func:`execvpe`) will use the :envvar:`PATH` "
"environment variable to locate the program *file*.  When the environment is "
"being replaced (using one of the :func:`exec\\*e <execl>` variants, "
"discussed in the next paragraph), the new environment is used as the source "
"of the :envvar:`PATH` variable. The other variants, :func:`execl`, :func:"
"`execle`, :func:`execv`, and :func:`execve`, will not use the :envvar:`PATH` "
"variable to locate the executable; *path* must contain an appropriate "
"absolute or relative path."
msgstr ""
"末尾近くに \"p\" をもつ型 (:func:`execlp`, :func:`execlpe`, :func:`execvp`, "
"および :func:`execvpe`) は、プログラム *file* を探すために環境変数 :envvar:"
"`PATH` を利用します。環境変数が ( 次の段で述べる :func:`exec\\*e <execl>` 型"
"関数で ) 置き換えられる場合、環境変数は :envvar:`PATH` を決定する上の情報源と"
"して使われます。その他の型、 :func:`execl`, :func:`execle`, :func:`execv`, お"
"よび :func:`execve` では、実行コードを探すために :envvar:`PATH` を使いませ"
"ん。 *path* には適切に設定された絶対パスまたは相対パスが入っていなくてはなり"
"ません。"

#: ../../library/os.rst:3009
msgid ""
"For :func:`execle`, :func:`execlpe`, :func:`execve`, and :func:`execvpe` "
"(note that these all end in \"e\"), the *env* parameter must be a mapping "
"which is used to define the environment variables for the new process (these "
"are used instead of the current process' environment); the functions :func:"
"`execl`, :func:`execlp`, :func:`execv`, and :func:`execvp` all cause the new "
"process to inherit the environment of the current process."
msgstr ""
":func:`execle` 、 :func:`execlpe` 、 :func:`execve` 、および :func:`execvpe` "
"(すべて末尾に \"e\" がついています) では、 *env* 引数は新たなプロセスで利用さ"
"れる環境変数を定義するためのマップ型でなくてはなりません ( 現在のプロセスの環"
"境変数の代わりに利用されます ); :func:`execl` 、 :func:`execlp` 、 :func:"
"`execv` 、および :func:`execvp` では、すべて新たなプロセスは現在のプロセスの"
"環境を引き継ぎます。"

#: ../../library/os.rst:3016
msgid ""
"For :func:`execve` on some platforms, *path* may also be specified as an "
"open file descriptor.  This functionality may not be supported on your "
"platform; you can check whether or not it is available using :data:`os."
"supports_fd`. If it is unavailable, using it will raise a :exc:"
"`NotImplementedError`."
msgstr ""
"一部のプラットフォームの :func:`execve` では、*path* はオープンしているファイ"
"ル記述子で指定することもできます。この機能をサポートしていないプラットフォー"
"ムもあります; :data:`os.supports_fd` を使うことで利用可能かどうか調べることが"
"できます。利用できない場合、:exc:`NotImplementedError` が送出されます。"

#: ../../library/os.rst:3023
msgid ""
"Added support for specifying an open file descriptor for *path* for :func:"
"`execve`."
msgstr ""
":func:`execve` において、*path* へのオープンしているファイル記述子の指定のサ"
"ポートを追加しました。"

#: ../../library/os.rst:3032
msgid ""
"Exit the process with status *n*, without calling cleanup handlers, flushing "
"stdio buffers, etc."
msgstr ""
"終了ステータス *n* でプロセスを終了します。この時クリーンアップハンドラーの呼"
"び出しや、標準入出力バッファのフラッシュなどは行いません。"

#: ../../library/os.rst:3037
msgid ""
"The standard way to exit is ``sys.exit(n)``.  :func:`_exit` should normally "
"only be used in the child process after a :func:`fork`."
msgstr ""
"終了する標準的な方法は ``sys.exit(n)`` です。 :func:`_exit` は通常、 :func:"
"`fork` された後の子プロセスでのみ使われます。"

#: ../../library/os.rst:3040
msgid ""
"The following exit codes are defined and can be used with :func:`_exit`, "
"although they are not required.  These are typically used for system "
"programs written in Python, such as a mail server's external command "
"delivery program."
msgstr ""
"以下の終了コードは必須ではありませんが :func:`_exit` で使うことができます。一"
"般に、メールサーバーの外部コマンド配送プログラムのような、 Python で書かれた"
"システムプログラムに使います。"

#: ../../library/os.rst:3046
msgid ""
"Some of these may not be available on all Unix platforms, since there is "
"some variation.  These constants are defined where they are defined by the "
"underlying platform."
msgstr ""
"いくつかのバリエーションがあって、これらのすべてがすべての Unix プラット"
"フォームで使えるわけではありません。以下の定数は下層のプラットフォームで定義"
"されていれば定義されます。"

#: ../../library/os.rst:3053
msgid "Exit code that means no error occurred."
msgstr "エラーが起きなかったことを表す終了コード。"

#: ../../library/os.rst:3060
msgid ""
"Exit code that means the command was used incorrectly, such as when the "
"wrong number of arguments are given."
msgstr ""
"誤った個数の引数が渡された時など、コマンドが間違って使われたことを表す終了"
"コード。"

#: ../../library/os.rst:3068
msgid "Exit code that means the input data was incorrect."
msgstr "入力データが誤っていたことを表す終了コード。"

#: ../../library/os.rst:3075
msgid "Exit code that means an input file did not exist or was not readable."
msgstr ""
"入力ファイルが存在しなかった、または、読み込み不可だったことを表す終了コー"
"ド。"

#: ../../library/os.rst:3082
msgid "Exit code that means a specified user did not exist."
msgstr "指定されたユーザーが存在しなかったことを表す終了コード。"

#: ../../library/os.rst:3089
msgid "Exit code that means a specified host did not exist."
msgstr "指定されたホストが存在しなかったことを表す終了コード。"

#: ../../library/os.rst:3096
msgid "Exit code that means that a required service is unavailable."
msgstr "要求されたサービスが利用できないことを表す終了コード。"

#: ../../library/os.rst:3103
msgid "Exit code that means an internal software error was detected."
msgstr "内部ソフトウェアエラーが検出されたことを表す終了コード。"

#: ../../library/os.rst:3110
msgid ""
"Exit code that means an operating system error was detected, such as the "
"inability to fork or create a pipe."
msgstr ""
"fork できない、 pipe の作成ができないなど、オペレーティングシステムのエラーが"
"検出されたことを表す終了コード。"

#: ../../library/os.rst:3118
msgid ""
"Exit code that means some system file did not exist, could not be opened, or "
"had some other kind of error."
msgstr ""
"システムファイルが存在しなかった、開けなかった、あるいはその他のエラーが起き"
"たことを表す終了コード。"

#: ../../library/os.rst:3126
msgid "Exit code that means a user specified output file could not be created."
msgstr "ユーザーには作成できない出力ファイルを指定したことを表す終了コード。"

#: ../../library/os.rst:3133
msgid ""
"Exit code that means that an error occurred while doing I/O on some file."
msgstr "ファイルの I/O を行っている途中にエラーが発生した時の終了コード。"

#: ../../library/os.rst:3140
msgid ""
"Exit code that means a temporary failure occurred.  This indicates something "
"that may not really be an error, such as a network connection that couldn't "
"be made during a retryable operation."
msgstr ""
"一時的な失敗が発生したことを表す終了コード。これは、再試行可能な操作の途中"
"に、ネットワークに接続できないというような、実際にはエラーではないかも知れな"
"いことを意味します。"

#: ../../library/os.rst:3149
msgid ""
"Exit code that means that a protocol exchange was illegal, invalid, or not "
"understood."
msgstr "プロトコル交換が不正、不適切、または理解不能なことを表す終了コード。"

#: ../../library/os.rst:3157
msgid ""
"Exit code that means that there were insufficient permissions to perform the "
"operation (but not intended for file system problems)."
msgstr ""
"操作を行うために十分な許可がなかった（ファイルシステムの問題を除く）ことを表"
"す終了コード。"

#: ../../library/os.rst:3165
msgid "Exit code that means that some kind of configuration error occurred."
msgstr "設定エラーが起こったことを表す終了コード。"

#: ../../library/os.rst:3172
msgid "Exit code that means something like \"an entry was not found\"."
msgstr "\"an entry was not found\" のようなことを表す終了コード。"

#: ../../library/os.rst:3179
msgid ""
"Fork a child process.  Return ``0`` in the child and the child's process id "
"in the parent.  If an error occurs :exc:`OSError` is raised."
msgstr ""
"子プロセスを fork します。子プロセスでは ``0`` が返り、親プロセスでは子プロセ"
"スの id が返ります。エラーが発生した場合は、 :exc:`OSError` を送出します。"

#: ../../library/os.rst:3182
msgid ""
"Note that some platforms including FreeBSD <= 6.3 and Cygwin have known "
"issues when using fork() from a thread."
msgstr ""
"FreeBSD 6.3 以下、Cygwinを含む一部のプラットフォームにおいて、fork() をスレッ"
"ド内から利用した場合に既知の問題があることに注意してください。"

#: ../../library/os.rst:3187
msgid "See :mod:`ssl` for applications that use the SSL module with fork()."
msgstr ""
"SSL モジュールを fork() とともに使うアプリケーションについて、 :mod:`ssl` を"
"参照して下さい。"

#: ../../library/os.rst:3194
msgid ""
"Fork a child process, using a new pseudo-terminal as the child's controlling "
"terminal. Return a pair of ``(pid, fd)``, where *pid* is ``0`` in the child, "
"the new child's process id in the parent, and *fd* is the file descriptor of "
"the master end of the pseudo-terminal.  For a more portable approach, use "
"the :mod:`pty` module.  If an error occurs :exc:`OSError` is raised."
msgstr ""
"子プロセスを fork します。この時新しい擬似端末を子プロセスの制御端末として使"
"います。親プロセスでは ``(pid, fd)`` からなるペアが返り、 *fd* は擬似端末のマ"
"スター側のファイル記述子となります。可搬性のあるアプローチを取るには、 :mod:"
"`pty` モジュールを利用してください。エラーが発生した場合は、 :exc:`OSError` "
"を送出します。"

#: ../../library/os.rst:3209
msgid ""
"Send signal *sig* to the process *pid*.  Constants for the specific signals "
"available on the host platform are defined in the :mod:`signal` module."
msgstr ""
"プロセス *pid* にシグナル *sig* を送ります。ホストプラットフォームで利用可能"
"なシグナルを特定する定数は :mod:`signal` モジュールで定義されています。"

#: ../../library/os.rst:3212
msgid ""
"Windows: The :data:`signal.CTRL_C_EVENT` and :data:`signal.CTRL_BREAK_EVENT` "
"signals are special signals which can only be sent to console processes "
"which share a common console window, e.g., some subprocesses. Any other "
"value for *sig* will cause the process to be unconditionally killed by the "
"TerminateProcess API, and the exit code will be set to *sig*. The Windows "
"version of :func:`kill` additionally takes process handles to be killed."
msgstr ""
"Windows: :data:`signal.CTRL_C_EVENT` と :data:`signal.CTRL_BREAK_EVENT` は、"
"同じコンソールウィンドウを共有しているコンソールプロセス ( 例 : 子プロセス ) "
"にだけ送ることができる特別なシグナルです。その他の値を *sig* に与えると、その"
"プロセスが無条件に TerminateProcess API によって kill され、終了コードが "
"*sig* に設定されます。 Windows の :func:`kill` は kill するプロセスのハンドル"
"も受け取ります。"

#: ../../library/os.rst:3220
msgid "See also :func:`signal.pthread_kill`."
msgstr ":func:`signal.pthread_kill` も参照してください。"

#: ../../library/os.rst:3222
msgid "Windows support."
msgstr "Windows をサポートしました。"

#: ../../library/os.rst:3232
msgid "Send the signal *sig* to the process group *pgid*."
msgstr "プロセスグループ *pgid* にシグナル *sig* を送ります。"

#: ../../library/os.rst:3239
msgid ""
"Add *increment* to the process's \"niceness\".  Return the new niceness."
msgstr ""
"プロセスの \"nice 値 \" に *increment* を加えます。新たな nice 値を返します。"

#: ../../library/os.rst:3246
msgid ""
"Lock program segments into memory.  The value of *op* (defined in ``<sys/"
"lock.h>``) determines which segments are locked."
msgstr ""
"プログラムのセグメントをメモリ内にロックします。 *op* (``<sys/lock.h>`` で定"
"義されています ) にはどのセグメントをロックするかを指定します。"

#: ../../library/os.rst:3254
msgid ""
"Open a pipe to or from command *cmd*. The return value is an open file "
"object connected to the pipe, which can be read or written depending on "
"whether *mode* is ``'r'`` (default) or ``'w'``. The *buffering* argument has "
"the same meaning as the corresponding argument to the built-in :func:`open` "
"function. The returned file object reads or writes text strings rather than "
"bytes."
msgstr ""
"コマンド *cmd* への、または *cmd* からのパイプ入出力を開きます。戻り値はパイ"
"プに接続されている開かれたファイルオブジェクトで、 *mode* が ``'r'`` (デフォ"
"ルト) または ``'w'`` かによって読み出しまたは書き込みを行うことができます。引"
"数 *bufsize* は、組み込み関数 :func:`open` における対応する引数と同じ意味を持"
"ちます。 返されるファイルオブジェクトは、バイトではなくテキスト文字列を読み書"
"きします。"

#: ../../library/os.rst:3261
msgid ""
"The ``close`` method returns :const:`None` if the subprocess exited "
"successfully, or the subprocess's return code if there was an error. On "
"POSIX systems, if the return code is positive it represents the return value "
"of the process left-shifted by one byte.  If the return code is negative, "
"the process was terminated by the signal given by the negated value of the "
"return code.  (For example, the return value might be ``- signal.SIGKILL`` "
"if the subprocess was killed.)  On Windows systems, the return value "
"contains the signed integer return code from the child process."
msgstr ""
"``close`` メソッドは、サブプロセスが正常に終了した場合は :const:`None` を返"
"し、エラーが発生した場合にはサブプロセスの返りコードを返します。POSIX システ"
"ムでは、返りコードが正の場合、そのコードは1バイト左にシフトしてプロセスが終了"
"したことを示します。返りコードが負の場合、プロセスは返りコードの符号を変えた"
"信号により終了します 。 (例えば、サブプロセスが kill された場合、返り値は "
"``- signal.SIGKILL`` となる場合があります。) Windows システムでは、返り値には"
"子プロセスからの符号のついた整数の返りコードを含まれます。"

#: ../../library/os.rst:3271
msgid ""
"This is implemented using :class:`subprocess.Popen`; see that class's "
"documentation for more powerful ways to manage and communicate with "
"subprocesses."
msgstr ""
"これは、:class:`subprocess.Popen` を使用して実装されています。サブプロセスを"
"管理し、サブプロセスと通信を行うためのより強力な方法については、クラスのド"
"キュメンテーションを参照してください。"

#: ../../library/os.rst:3285
msgid "Execute the program *path* in a new process."
msgstr "新たなプロセス内でプログラム *path* を実行します。"

#: ../../library/os.rst:3287
msgid ""
"(Note that the :mod:`subprocess` module provides more powerful facilities "
"for spawning new processes and retrieving their results; using that module "
"is preferable to using these functions.  Check especially the :ref:"
"`subprocess-replacements` section.)"
msgstr ""
"(:mod:`subprocess` モジュールが、新しいプロセスを実行して結果を取得するため"
"の、より強力な機能を提供しています。この関数の代わりに :mod:`subprocess` モ"
"ジュールを利用することが推奨されています。 :mod:`subprocess` モジュールのド"
"キュメントの、 :ref:`subprocess-replacements` セクションを参照してください )"

#: ../../library/os.rst:3292
msgid ""
"If *mode* is :const:`P_NOWAIT`, this function returns the process id of the "
"new process; if *mode* is :const:`P_WAIT`, returns the process's exit code "
"if it exits normally, or ``-signal``, where *signal* is the signal that "
"killed the process.  On Windows, the process id will actually be the process "
"handle, so can be used with the :func:`waitpid` function."
msgstr ""
"*mode* が :const:`P_NOWAIT` の場合、この関数は新たなプロセスのプロセス ID を"
"返します ; *mode* が :const:`P_WAIT` の場合、子プロセスが正常に終了するとその"
"終了コードが返ります。そうでない場合にはプロセスを kill したシグナル "
"*signal* に対して ``-signal`` が返ります。 Windows では、プロセス ID は実際に"
"はプロセスハンドル値になるので、 :func:`waitpid` 関数で使えます。"

#: ../../library/os.rst:3298
msgid ""
"The \"l\" and \"v\" variants of the :func:`spawn\\* <spawnl>` functions "
"differ in how command-line arguments are passed.  The \"l\" variants are "
"perhaps the easiest to work with if the number of parameters is fixed when "
"the code is written; the individual parameters simply become additional "
"parameters to the :func:`spawnl\\*` functions.  The \"v\" variants are good "
"when the number of parameters is variable, with the arguments being passed "
"in a list or tuple as the *args* parameter.  In either case, the arguments "
"to the child process must start with the name of the command being run."
msgstr ""
"\"l\" および \"v\" のついた :func:`spawn\\* <spawnl>` 関数は、コマンドライン"
"引数をどのように渡すかが異なります。 \"l\" 型は、コードを書くときにパラメタ数"
"が決まっている場合に、おそらくもっとも簡単に利用できます。個々のパラメタは単"
"に :func:`spawnl\\*` 関数の追加パラメタとなります。 \"v\" 型は、パラメタの数"
"が可変の時に便利で、リストかタプルの引数が *args* パラメタとして渡されます。"
"どちらの場合も、子プロセスに渡す引数は動作させようとしているコマンドの名前か"
"ら始まらなければなりません。"

#: ../../library/os.rst:3307
msgid ""
"The variants which include a second \"p\" near the end (:func:`spawnlp`, :"
"func:`spawnlpe`, :func:`spawnvp`, and :func:`spawnvpe`) will use the :envvar:"
"`PATH` environment variable to locate the program *file*.  When the "
"environment is being replaced (using one of the :func:`spawn\\*e <spawnl>` "
"variants, discussed in the next paragraph), the new environment is used as "
"the source of the :envvar:`PATH` variable.  The other variants, :func:"
"`spawnl`, :func:`spawnle`, :func:`spawnv`, and :func:`spawnve`, will not use "
"the :envvar:`PATH` variable to locate the executable; *path* must contain an "
"appropriate absolute or relative path."
msgstr ""
"末尾近くに \"p\" をもつ型 (:func:`spawnlp`, :func:`spawnlpe`, :func:"
"`spawnvp`, :func:`spawnvpe`) は、プログラム *file* を探すために環境変数 :"
"envvar:`PATH` を利用します。環境変数が ( 次の段で述べる :func:`spawn\\*e "
"<spawnl>` 型関数で ) 置き換えられる場合、環境変数は :envvar:`PATH` を決定する"
"上の情報源として使われます。その他の型、 :func:`spawnl`, :func:`spawnle`, :"
"func:`spawnv`, および :func:`spawnve` では、実行コードを探すために :envvar:"
"`PATH` を使いません。 *path* には適切に設定された絶対パスまたは相対パスが入っ"
"ていなくてはなりません。"

#: ../../library/os.rst:3317
msgid ""
"For :func:`spawnle`, :func:`spawnlpe`, :func:`spawnve`, and :func:`spawnvpe` "
"(note that these all end in \"e\"), the *env* parameter must be a mapping "
"which is used to define the environment variables for the new process (they "
"are used instead of the current process' environment); the functions :func:"
"`spawnl`, :func:`spawnlp`, :func:`spawnv`, and :func:`spawnvp` all cause the "
"new process to inherit the environment of the current process.  Note that "
"keys and values in the *env* dictionary must be strings; invalid keys or "
"values will cause the function to fail, with a return value of ``127``."
msgstr ""
":func:`spawnle`, :func:`spawnlpe`, :func:`spawnve`, および :func:`spawnvpe` "
"(すべて末尾に \"e\" がついています) では、 *env* 引数は新たなプロセスで利用さ"
"れる環境変数を定義するためのマップ型でなくてはなりません ; :func:"
"`spawnl` 、 :func:`spawnlp` 、 :func:`spawnv` 、および :func:`spawnvp` では、"
"すべて新たなプロセスは現在のプロセスの環境を引き継ぎます。 *env* 辞書のキーと"
"値はすべて文字列である必要があります。不正なキーや値を与えると関数が失敗し、 "
"``127`` を返します。"

#: ../../library/os.rst:3326
msgid ""
"As an example, the following calls to :func:`spawnlp` and :func:`spawnvpe` "
"are equivalent::"
msgstr ""
"例えば、以下の :func:`spawnlp` および :func:`spawnvpe` 呼び出しは等価です ::"

#: ../../library/os.rst:3335
msgid ""
"Availability: Unix, Windows.  :func:`spawnlp`, :func:`spawnlpe`, :func:"
"`spawnvp` and :func:`spawnvpe` are not available on Windows.  :func:"
"`spawnle` and :func:`spawnve` are not thread-safe on Windows; we advise you "
"to use the :mod:`subprocess` module instead."
msgstr ""
"利用できる環境 : Unix 、 Windows :func:`spawnlp` 、 :func:`spawnlpe` 、 :"
"func:`spawnvp` 、および :func:`spawnvpe` は Windows では利用できません。 :"
"func:`spawnle` および :func:`spawnve` は Windows においてスレッドセーフではあ"
"りません ; 代わりに :mod:`subprocess` モジュールの利用を推奨します。"

#: ../../library/os.rst:3347
msgid ""
"Possible values for the *mode* parameter to the :func:`spawn\\* <spawnl>` "
"family of functions.  If either of these values is given, the :func:"
"`spawn\\*` functions will return as soon as the new process has been "
"created, with the process id as the return value."
msgstr ""
":func:`spawn\\* <spawnl>` 関数ファミリに対する *mode* パラメタとして取れる値"
"です。この値のいずれかを *mode* として与えた場合、 :func:`spawn\\*` 関数は新"
"たなプロセスが生成されるとすぐに、プロセスの ID を戻り値として返ります。"

#: ../../library/os.rst:3357
msgid ""
"Possible value for the *mode* parameter to the :func:`spawn\\* <spawnl>` "
"family of functions.  If this is given as *mode*, the :func:`spawn\\*` "
"functions will not return until the new process has run to completion and "
"will return the exit code of the process the run is successful, or ``-"
"signal`` if a signal kills the process."
msgstr ""
":func:`spawn\\* <spawnl>` 関数ファミリに対する *mode* パラメタとして取れる値"
"です。この値を *mode* として与えた場合、 :func:`spawn\\*` 関数は新たなプロセ"
"スを起動して完了するまで返らず、プロセスがうまく終了した場合には終了コード"
"を、シグナルによってプロセスが kill された場合には ``-signal`` を返します。"

#: ../../library/os.rst:3369
msgid ""
"Possible values for the *mode* parameter to the :func:`spawn\\* <spawnl>` "
"family of functions.  These are less portable than those listed above. :"
"const:`P_DETACH` is similar to :const:`P_NOWAIT`, but the new process is "
"detached from the console of the calling process. If :const:`P_OVERLAY` is "
"used, the current process will be replaced; the :func:`spawn\\* <spawnl>` "
"function will not return."
msgstr ""
":func:`spawn\\* <spawnl>` 関数ファミリに対する *mode* パラメタとして取れる値"
"です。これらの値は上の値よりもやや可搬性において劣っています。 :const:"
"`P_DETACH` は :const:`P_NOWAIT` に似ていますが、新たなプロセスは呼び出しプロ"
"セスのコンソールから切り離され (detach) ます。 :const:`P_OVERLAY` が使われた"
"場合、現在のプロセスは置き換えられます。したがって :func:`spawn\\* <spawnl>` "
"は返りません。"

#: ../../library/os.rst:3380
msgid "Start a file with its associated application."
msgstr "ファイルを関連付けられたアプリケーションを使ってスタートします。"

#: ../../library/os.rst:3382
msgid ""
"When *operation* is not specified or ``'open'``, this acts like double-"
"clicking the file in Windows Explorer, or giving the file name as an "
"argument to the :program:`start` command from the interactive command shell: "
"the file is opened with whatever application (if any) its extension is "
"associated."
msgstr ""
"*operation* が指定されないか、または ``'open'`` である時、この動作は、 "
"Windows の Explorer 上でのファイルをダブルクリックした、あるいはコマンドプロ"
"ンプト上でファイル名を :program:`start` コマンドの引数としての実行した場合と"
"等価です : ファイルは拡張子が関連付けされているアプリケーション ( が存在する"
"場合 ) を使って開かれます。"

#: ../../library/os.rst:3387
msgid ""
"When another *operation* is given, it must be a \"command verb\" that "
"specifies what should be done with the file. Common verbs documented by "
"Microsoft are ``'print'`` and  ``'edit'`` (to be used on files) as well as "
"``'explore'`` and ``'find'`` (to be used on directories)."
msgstr ""
"他の *operation* が与えられる場合、それはファイルに対して何がなされるべきかを"
"表す \"command verb\" ( コマンドを表す動詞 ) でなければなりません。 "
"Microsoft が文書化している動詞は、 ``'print'`` と ``'edit'`` ( ファイルに対し"
"て ) および ``'explore'`` と ``'find'`` ( ディレクトリに対して ) です。"

#: ../../library/os.rst:3392
msgid ""
":func:`startfile` returns as soon as the associated application is launched. "
"There is no option to wait for the application to close, and no way to "
"retrieve the application's exit status.  The *path* parameter is relative to "
"the current directory.  If you want to use an absolute path, make sure the "
"first character is not a slash (``'/'``); the underlying Win32 :c:func:"
"`ShellExecute` function doesn't work if it is.  Use the :func:`os.path."
"normpath` function to ensure that the path is properly encoded for Win32."
msgstr ""
":func:`startfile` は関連付けされたアプリケーションが起動すると同時に返りま"
"す。アプリケーションが閉じるまで待機させるためのオプションはなく、アプリケー"
"ションの終了状態を取得する方法もありません。引数 *path* はカレントディレクト"
"リからの相対パスです。絶対パスで指定したい場合は、最初の文字はスラッシュ "
"(``'/'``) ではないので注意してください。最初の文字がスラッシュの場合、下層の "
"Win32 :c:func:`ShellExecute` 関数は動作しません。 :func:`os.path.normpath` 関"
"数を使って、 Win32 用に正しくコード化されたパスになるようにしてください。"

#: ../../library/os.rst:3400
msgid ""
"To reduce interpreter startup overhead, the Win32 :c:func:`ShellExecute` "
"function is not resolved until this function is first called.  If the "
"function cannot be resolved, :exc:`NotImplementedError` will be raised."
msgstr ""
"インタープリタの起動時のオーバーヘッドを削減するため、この関数が最初に呼ばれ"
"るまで、Win32 :c:func:`ShellExecute` 関数は決定されません。関数を決定できない"
"場合、 :exc:`NotImplementedError` が送出されます。"

#: ../../library/os.rst:3409
msgid ""
"Execute the command (a string) in a subshell.  This is implemented by "
"calling the Standard C function :c:func:`system`, and has the same "
"limitations. Changes to :data:`sys.stdin`, etc. are not reflected in the "
"environment of the executed command. If *command* generates any output, it "
"will be sent to the interpreter standard output stream."
msgstr ""
"サブシェル内でコマンド (文字列) を実行します。この関数は標準 C 関数 :c:func:"
"`system` を使って実装されており、:c:func:`system` と同じ制限があります。:"
"data:`sys.stdin` などに対する変更を行っても、実行されるコマンドの環境には反映"
"されません。*command* が何らかの出力を生成した場合、インタープリターの標準出"
"力ストリームに送られます。"

#: ../../library/os.rst:3415
msgid ""
"On Unix, the return value is the exit status of the process encoded in the "
"format specified for :func:`wait`.  Note that POSIX does not specify the "
"meaning of the return value of the C :c:func:`system` function, so the "
"return value of the Python function is system-dependent."
msgstr ""
"Unix では、返り値はプロセスの終了ステータスで、 :func:`wait` で定義されている"
"書式にコード化されています。 POSIX は :c:func:`system` 関数の返り値の意味につ"
"いて定義していないので、 Python の :func:`system` における返り値はシステム依"
"存となることに注意してください。"

#: ../../library/os.rst:3420
msgid ""
"On Windows, the return value is that returned by the system shell after "
"running *command*.  The shell is given by the Windows environment variable :"
"envvar:`COMSPEC`: it is usually :program:`cmd.exe`, which returns the exit "
"status of the command run; on systems using a non-native shell, consult your "
"shell documentation."
msgstr ""
"Windows では、返り値は *command* を実行した後にシステムシェルから返される値で"
"す。シェルは通常 :program:`cmd.exe` であり、返す値は実行したコマンドの終了ス"
"テータスになります。シェルの種類は Windows の環境変数 :envvar:`COMSPEC`: に指"
"定されています。ネイティブでないシェルを使用している場合は、そのドキュメント"
"を参照してください。"

#: ../../library/os.rst:3426
msgid ""
"The :mod:`subprocess` module provides more powerful facilities for spawning "
"new processes and retrieving their results; using that module is preferable "
"to using this function.  See the :ref:`subprocess-replacements` section in "
"the :mod:`subprocess` documentation for some helpful recipes."
msgstr ""
":mod:`subprocess` モジュールは、新しいプロセスを実行して結果を取得するための"
"より強力な機能を提供しています。この関数の代わりに :mod:`subprocess` モジュー"
"ルを利用することが推奨されています。 :mod:`subprocess` モジュールのドキュメン"
"トの :ref:`subprocess-replacements` 節のレシピを参考にして下さい。"

#: ../../library/os.rst:3436
msgid ""
"Returns the current global process times. The return value is an object with "
"five attributes:"
msgstr ""
"現在の全体的なプロセス時間を返します。返り値は 5 個の属性を持つオブジェクトに"
"なります:"

#: ../../library/os.rst:3439
msgid ":attr:`user` - user time"
msgstr ":attr:`user` - ユーザー時間"

#: ../../library/os.rst:3440
msgid ":attr:`system` - system time"
msgstr ":attr:`system` - システム時間"

#: ../../library/os.rst:3441
msgid ":attr:`children_user` - user time of all child processes"
msgstr ":attr:`children_user` - すべての子プロセスのユーザー時間"

#: ../../library/os.rst:3442
msgid ":attr:`children_system` - system time of all child processes"
msgstr ":attr:`children_system` - すべての子プロセスのシステム時間"

#: ../../library/os.rst:3443
msgid ":attr:`elapsed` - elapsed real time since a fixed point in the past"
msgstr ":attr:`elapsed` - 去のある固定時点からの経過実時間"

#: ../../library/os.rst:3445
msgid ""
"For backwards compatibility, this object also behaves like a five-tuple "
"containing :attr:`user`, :attr:`system`, :attr:`children_user`, :attr:"
"`children_system`, and :attr:`elapsed` in that order."
msgstr ""
"後方互換性のため、このオブジェクトは 5 個のアイテム :attr:`user` 、 :attr:"
"`system` 、 :attr:`children_user` 、 :attr:`children_system` 、および :attr:"
"`elapsed` を持つタプルのようにも振る舞います。"

#: ../../library/os.rst:3449
msgid ""
"See the Unix manual page :manpage:`times(2)` or the corresponding Windows "
"Platform API documentation. On Windows, only :attr:`user` and :attr:`system` "
"are known; the other attributes are zero."
msgstr ""
":manpage:`times(2)` の Unix マニュアルページ、または対応する Windows プラット"
"フォーム API ドキュメントを参照してください。Windows では、:attr:`user` およ"
"び :attr:`system` のみ有効で、その他の属性にはゼロが入ります。"

#: ../../library/os.rst:3463
msgid ""
"Wait for completion of a child process, and return a tuple containing its "
"pid and exit status indication: a 16-bit number, whose low byte is the "
"signal number that killed the process, and whose high byte is the exit "
"status (if the signal number is zero); the high bit of the low byte is set "
"if a core file was produced."
msgstr ""
"子プロセスの実行完了を待機し、子プロセスの pid と終了コードインジケーター "
"--- 16 ビットの数値で、下位バイトがプロセスを kill したシグナル番号、上位バイ"
"トが終了ステータス ( シグナル番号がゼロの場合 ) --- の入ったタプルを返しま"
"す ; コアダンプファイルが生成された場合、下位バイトの最上桁ビットが立てられま"
"す。"

#: ../../library/os.rst:3473
msgid ""
"Wait for the completion of one or more child processes. *idtype* can be :"
"data:`P_PID`, :data:`P_PGID` or :data:`P_ALL`. *id* specifies the pid to "
"wait on. *options* is constructed from the ORing of one or more of :data:"
"`WEXITED`, :data:`WSTOPPED` or :data:`WCONTINUED` and additionally may be "
"ORed with :data:`WNOHANG` or :data:`WNOWAIT`. The return value is an object "
"representing the data contained in the :c:type:`siginfo_t` structure, "
"namely: :attr:`si_pid`, :attr:`si_uid`, :attr:`si_signo`, :attr:"
"`si_status`, :attr:`si_code` or ``None`` if :data:`WNOHANG` is specified and "
"there are no children in a waitable state."
msgstr ""
"一つ以上のプロセスの完了を待機します。*idtype* には :data:`P_PID`、:data:"
"`P_PGID`、または :data:`P_ALL` を指定できます。*id* は待機する pid を指定しま"
"す。*options* は :data:`WEXITED`、:data:`WSTOPPED`、または :data:"
"`WCONTINUED` を一つ以上、論理和で指定でき、他に :data:`WNOHANG` または :data:"
"`WNOWAIT` も追加できます。返り値は :c:type:`siginfo_t` 構造体に含まれるデー"
"タ (:attr:`si_pid`、:attr:`si_uid`、:attr:`si_signo`、:attr:`si_status`、およ"
"び :attr:`si_code`) を表すオブジェクトになります。:data:`WNOHANG` が指定さ"
"れ、待機状態の子プロセスがない場合は ``None`` を返します。"

#: ../../library/os.rst:3492
msgid ""
"These are the possible values for *idtype* in :func:`waitid`. They affect "
"how *id* is interpreted."
msgstr ""
":func:`waitid` の *idtype* に指定できる値です。これらは *id* がどう解釈される"
"かに影響します。"

#: ../../library/os.rst:3503
msgid ""
"Flags that can be used in *options* in :func:`waitid` that specify what "
"child signal to wait for."
msgstr ""
":func:`waitid` の *options* で使用できるフラグです。子プロセスのどのシグナル"
"を待機するかを指定します。"

#: ../../library/os.rst:3516
msgid ""
"These are the possible values for :attr:`si_code` in the result returned by :"
"func:`waitid`."
msgstr ":func:`waitid` の返り値の :attr:`si_code` に設定され得る値です。"

#: ../../library/os.rst:3526
msgid "The details of this function differ on Unix and Windows."
msgstr "この関数の詳細は Unix と Windows で異なります。"

#: ../../library/os.rst:3528
msgid ""
"On Unix: Wait for completion of a child process given by process id *pid*, "
"and return a tuple containing its process id and exit status indication "
"(encoded as for :func:`wait`).  The semantics of the call are affected by "
"the value of the integer *options*, which should be ``0`` for normal "
"operation."
msgstr ""
"Unix の場合 : プロセス id *pid* で与えられた子プロセスの完了を待機し、子プロ"
"セスのプロセス id と (:func:`wait` と同様にコード化された ) 終了ステータスイ"
"ンジケーターからなるタプルを返します。この関数の動作は *options* によって変わ"
"ります。通常の操作では ``0`` にします。"

#: ../../library/os.rst:3533
msgid ""
"If *pid* is greater than ``0``, :func:`waitpid` requests status information "
"for that specific process.  If *pid* is ``0``, the request is for the status "
"of any child in the process group of the current process.  If *pid* is "
"``-1``, the request pertains to any child of the current process.  If *pid* "
"is less than ``-1``, status is requested for any process in the process "
"group ``-pid`` (the absolute value of *pid*)."
msgstr ""
"*pid* が ``0`` よりも大きい場合、 :func:`waitpid` は特定のプロセスのステータ"
"ス情報を要求します。 *pid* が ``0`` の場合、現在のプロセスグループ内の任意の"
"子プロセスの状態に対する要求です。 *pid* が ``-1`` の場合、現在のプロセスの任"
"意の子プロセスに対する要求です。 *pid* が ``-1`` よりも小さい場合、プロセスグ"
"ループ ``-pid`` ( すなわち *pid* の絶対値 ) 内の任意のプロセスに対する要求で"
"す。"

#: ../../library/os.rst:3540
msgid ""
"An :exc:`OSError` is raised with the value of errno when the syscall returns "
"-1."
msgstr ""
"システムコールが -1 を返した時、 :exc:`OSError` を errno と共に送出します。"

#: ../../library/os.rst:3543
msgid ""
"On Windows: Wait for completion of a process given by process handle *pid*, "
"and return a tuple containing *pid*, and its exit status shifted left by 8 "
"bits (shifting makes cross-platform use of the function easier). A *pid* "
"less than or equal to ``0`` has no special meaning on Windows, and raises an "
"exception. The value of integer *options* has no effect. *pid* can refer to "
"any process whose id is known, not necessarily a child process. The :func:"
"`spawn\\* <spawnl>` functions called with :const:`P_NOWAIT` return suitable "
"process handles."
msgstr ""
"Windows では、プロセスハンドル *pid* を指定してプロセスの終了を待って、 "
"*pid* と、終了ステータスを 8bit 左シフトした値のタプルを返します。 ( シフト"
"は、この関数をクロスプラットフォームで利用しやすくするために行われます ) "
"``0`` 以下の *pid* は Windows では特別な意味を持っておらず、例外を発生させま"
"す。 *options* の値は効果がありません。 *pid* は、子プロセスで無くても、プロ"
"セス ID を知っているどんなプロセスでも参照することが可能です。 :func:"
"`spawn\\* <spawnl>` 関数を :const:`P_NOWAIT` と共に呼び出した場合、適切なプロ"
"セスハンドルが返されます。"

#: ../../library/os.rst:3559
msgid ""
"Similar to :func:`waitpid`, except no process id argument is given and a 3-"
"element tuple containing the child's process id, exit status indication, and "
"resource usage information is returned.  Refer to :mod:`resource`.\\ :func:"
"`~resource.getrusage` for details on resource usage information.  The option "
"argument is the same as that provided to :func:`waitpid` and :func:`wait4`."
msgstr ""
":func:`waitpid` に似ていますが、プロセス id を引数に取らず、子プロセス id 、"
"終了ステータスインジケータ、リソース使用情報の 3 要素からなるタプルを返しま"
"す。リソース使用情報の詳しい情報は :mod:`resource`. :func:`~resource."
"getrusage` を参照してください。 オプション引数は :func:`waitpid` および :"
"func:`wait4` と同じです。"

#: ../../library/os.rst:3571
msgid ""
"Similar to :func:`waitpid`, except a 3-element tuple, containing the child's "
"process id, exit status indication, and resource usage information is "
"returned. Refer to :mod:`resource`.\\ :func:`~resource.getrusage` for "
"details on resource usage information.  The arguments to :func:`wait4` are "
"the same as those provided to :func:`waitpid`."
msgstr ""
":func:`waitpid` に似ていますが、子プロセス id 、終了ステータスインジケータ、"
"リソース使用情報の 3 要素からなるタプルを返します。リソース使用情報の詳しい情"
"報は :mod:`resource`. :func:`~resource.getrusage` を参照してください。 :func:"
"`wait4` の引数は :func:`waitpid` に与えられるものと同じです。"

#: ../../library/os.rst:3582
msgid ""
"The option for :func:`waitpid` to return immediately if no child process "
"status is available immediately. The function returns ``(0, 0)`` in this "
"case."
msgstr ""
"子プロセス状態がすぐに取得できなかった場合に直ちに終了するようにするための :"
"func:`waitpid` のオプションです。この場合、関数は ``(0, 0)`` を返します。"

#: ../../library/os.rst:3590
msgid ""
"This option causes child processes to be reported if they have been "
"continued from a job control stop since their status was last reported."
msgstr ""
"このオプションによって子プロセスは前回状態が報告された後にジョブ制御による停"
"止状態から実行を再開された場合に報告されるようになります。"

#: ../../library/os.rst:3593
msgid "Availability: some Unix systems."
msgstr "利用できる環境: 一部の Unix システム。"

#: ../../library/os.rst:3598
msgid ""
"This option causes child processes to be reported if they have been stopped "
"but their current state has not been reported since they were stopped."
msgstr ""
"このオプションによって子プロセスは停止されていながら停止されてから状態が報告"
"されていない場合に報告されるようになります。"

#: ../../library/os.rst:3604
msgid ""
"The following functions take a process status code as returned by :func:"
"`system`, :func:`wait`, or :func:`waitpid` as a parameter.  They may be used "
"to determine the disposition of a process."
msgstr ""
"以下の関数は :func:`system` 、 :func:`wait` 、あるいは :func:`waitpid` が返す"
"プロセス状態コードを引数にとります。これらの関数はプロセスの配置を決めるため"
"に利用できます。"

#: ../../library/os.rst:3610
msgid ""
"Return ``True`` if a core dump was generated for the process, otherwise "
"return ``False``."
msgstr ""
"プロセスに対してコアダンプが生成されていた場合には ``True`` を、それ以外の場"
"合は ``False`` を返します。"

#: ../../library/os.rst:3618
msgid ""
"Return ``True`` if the process has been continued from a job control stop, "
"otherwise return ``False``."
msgstr ""
"プロセスがジョブ制御による停止状態から実行を再開された (continue) 場合に "
"``True`` を、それ以外の場合は ``False`` を返します。"

#: ../../library/os.rst:3626
msgid ""
"Return ``True`` if the process has been stopped, otherwise return ``False``."
msgstr ""
"プロセスが停止された (stop) 場合に ``True`` を、それ以外の場合は ``False`` を"
"返します。"

#: ../../library/os.rst:3634
msgid ""
"Return ``True`` if the process exited due to a signal, otherwise return "
"``False``."
msgstr ""
"プロセスがシグナルによって終了した (exit) 場合に ``True`` を、それ以外の場合"
"は ``False`` を返します。"

#: ../../library/os.rst:3642
msgid ""
"Return ``True`` if the process exited using the :manpage:`exit(2)` system "
"call, otherwise return ``False``."
msgstr ""
"プロセスが :manpage:`exit(2)` システムコールで終了した場合に ``True`` を、そ"
"れ以外の場合は ``False`` を返します。"

#: ../../library/os.rst:3650
msgid ""
"If ``WIFEXITED(status)`` is true, return the integer parameter to the :"
"manpage:`exit(2)` system call.  Otherwise, the return value is meaningless."
msgstr ""
"``WIFEXITED(status)`` が真の場合、 :manpage:`exit(2)` システムコールに渡され"
"た整数の引数を返します。そうでない場合、返り値に意味はありません。"

#: ../../library/os.rst:3658
msgid "Return the signal which caused the process to stop."
msgstr "プロセスを停止させたシグナル番号を返します。"

#: ../../library/os.rst:3665
msgid "Return the signal which caused the process to exit."
msgstr "プロセスを終了させたシグナル番号を返します。"

#: ../../library/os.rst:3671
msgid "Interface to the scheduler"
msgstr "スケジューラーへのインターフェイス"

#: ../../library/os.rst:3673
msgid ""
"These functions control how a process is allocated CPU time by the operating "
"system. They are only available on some Unix platforms. For more detailed "
"information, consult your Unix manpages."
msgstr ""
"以下の関数は、オペレーティングシステムがプロセスに CPU 時間を割り当てる方法を"
"制御します。これらは一部の Unix プラットフォームでのみ利用可能です。詳しくは "
"Unix マニュアルページを参照してください。"

#: ../../library/os.rst:3679
msgid ""
"The following scheduling policies are exposed if they are supported by the "
"operating system."
msgstr ""
"次のスケジューリングポリシーは、オペレーティングシステムでサポートされていれ"
"ば公開されます。"

#: ../../library/os.rst:3684
msgid "The default scheduling policy."
msgstr "デフォルトのスケジューリングポリシーです。"

#: ../../library/os.rst:3688
msgid ""
"Scheduling policy for CPU-intensive processes that tries to preserve "
"interactivity on the rest of the computer."
msgstr ""
"常にCPUに負荷のかかる (CPU-intensive) プロセス用のポリシーです。他の対話式プ"
"ロセスなどの応答性を維持するよう試みます。"

#: ../../library/os.rst:3693
msgid "Scheduling policy for extremely low priority background tasks."
msgstr ""
"非常に優先度の低いバックグラウンドタスク用のスケジューリングポリシーです。"

#: ../../library/os.rst:3697
msgid "Scheduling policy for sporadic server programs."
msgstr "散発的なサーバープログラム用のスケジューリングポリシーです。"

#: ../../library/os.rst:3701
msgid "A First In First Out scheduling policy."
msgstr "FIFO (First In, First Out) 型のスケジューリングポリシーです。"

#: ../../library/os.rst:3705
msgid "A round-robin scheduling policy."
msgstr "ラウンドロビン型のスケジューリングポリシーです。"

#: ../../library/os.rst:3709
msgid ""
"This flag can be OR'ed with any other scheduling policy. When a process with "
"this flag set forks, its child's scheduling policy and priority are reset to "
"the default."
msgstr ""
"このフラグは他のスケジューリングポリシーとともに論理和指定できます。このフラ"
"グが与えられたプロセスが fork されると、その子プロセスのスケジューリングポリ"
"シーおよび優先度はデフォルトにリセットされます。"

#: ../../library/os.rst:3716
msgid ""
"This class represents tunable scheduling parameters used in :func:"
"`sched_setparam`, :func:`sched_setscheduler`, and :func:`sched_getparam`. It "
"is immutable."
msgstr ""
"このクラスは、:func:`sched_setparam`、:func:`sched_setscheduler`、および :"
"func:`sched_getparam` で使用される、調節可能なスケジューリングパラメーターを"
"表します。これはイミュータブルです。"

#: ../../library/os.rst:3720
msgid "At the moment, there is only one possible parameter:"
msgstr "現在、一つの引数のみ指定できます:"

#: ../../library/os.rst:3724
msgid "The scheduling priority for a scheduling policy."
msgstr "スケジューリングポリシーのスケジューリング優先度です。"

#: ../../library/os.rst:3729
msgid ""
"Get the minimum priority value for *policy*. *policy* is one of the "
"scheduling policy constants above."
msgstr ""
"*policy* の最小優先度値を取得します。*policy* には上記のスケジューリングポリ"
"シー定数の一つを指定します。"

#: ../../library/os.rst:3735
msgid ""
"Get the maximum priority value for *policy*. *policy* is one of the "
"scheduling policy constants above."
msgstr ""
"*policy* の最大優先度値を取得します。*policy* には上記のスケジューリングポリ"
"シー定数の一つを指定します。"

#: ../../library/os.rst:3741
msgid ""
"Set the scheduling policy for the process with PID *pid*. A *pid* of 0 means "
"the calling process. *policy* is one of the scheduling policy constants "
"above. *param* is a :class:`sched_param` instance."
msgstr ""
"PID *pid* のプロセスのスケジューリングポリシーを設定します。*pid* が 0 の場"
"合、呼び出しプロセスを意味します。*policy* には上記のスケジューリングポリシー"
"定数の一つを指定します。*param* は :class:`sched_param` のインスタンスです。"

#: ../../library/os.rst:3748
msgid ""
"Return the scheduling policy for the process with PID *pid*. A *pid* of 0 "
"means the calling process. The result is one of the scheduling policy "
"constants above."
msgstr ""
"PID *pid* のプロセスのスケジューリングポリシーを返します。*pid* が 0 の場合、"
"呼び出しプロセスを意味します。返り値は上記のスケジューリングポリシー定数の一"
"つになります。"

#: ../../library/os.rst:3755
msgid ""
"Set a scheduling parameters for the process with PID *pid*. A *pid* of 0 "
"means the calling process. *param* is a :class:`sched_param` instance."
msgstr ""
"PID *pid* のプロセスのスケジュールパラメーターを設定します。*pid* が 0 の場"
"合、呼び出しプロセスを意味します。*param* は :class:`sched_param` のインスタ"
"ンスです。"

#: ../../library/os.rst:3761
msgid ""
"Return the scheduling parameters as a :class:`sched_param` instance for the "
"process with PID *pid*. A *pid* of 0 means the calling process."
msgstr ""
"PID *pid* のプロセスのスケジューリングパラメーターを :class:`sched_param` の"
"インスタンスとして返します。*pid* が 0 の場合、呼び出しプロセスを意味します。"

#: ../../library/os.rst:3767
msgid ""
"Return the round-robin quantum in seconds for the process with PID *pid*. A "
"*pid* of 0 means the calling process."
msgstr ""
"PID *pid* のプロセスのラウンドロビンクォンタム (秒) を返します。*pid* が 0 の"
"場合、呼び出しプロセスを意味します。"

#: ../../library/os.rst:3773
msgid "Voluntarily relinquish the CPU."
msgstr "自発的に CPU を解放します。"

#: ../../library/os.rst:3778
msgid ""
"Restrict the process with PID *pid* (or the current process if zero) to a "
"set of CPUs.  *mask* is an iterable of integers representing the set of CPUs "
"to which the process should be restricted."
msgstr ""
"PID *pid* のプロセス (0 であれば現在のプロセス) を CPU の集合に制限します。"
"*mask* はプロセスを制限する CPU の集合を表す整数のイテラブルなオブジェクトで"
"す。"

#: ../../library/os.rst:3785
msgid ""
"Return the set of CPUs the process with PID *pid* (or the current process if "
"zero) is restricted to."
msgstr ""
"PID *pid* のプロセス (0 の場合、現在のプロセス) が制限されている CPU の集合を"
"返します。"

#: ../../library/os.rst:3792
msgid "Miscellaneous System Information"
msgstr "雑多なシステム情報"

#: ../../library/os.rst:3797
msgid ""
"Return string-valued system configuration values. *name* specifies the "
"configuration value to retrieve; it may be a string which is the name of a "
"defined system value; these names are specified in a number of standards "
"(POSIX, Unix 95, Unix 98, and others).  Some platforms define additional "
"names as well. The names known to the host operating system are given as the "
"keys of the ``confstr_names`` dictionary.  For configuration variables not "
"included in that mapping, passing an integer for *name* is also accepted."
msgstr ""
"システム設定値を文字列で返します。 *name* には取得したい設定名を指定します ; "
"この値は定義済みのシステム値名を表す文字列にすることができます ; 名前は多くの"
"標準 (POSIX.1 、 Unix 95 、 Unix 98 その他 ) で定義されています。ホストオペ"
"レーティングシステムの関知する名前は ``confstr_names`` 辞書のキーとして与えら"
"れています。このマップ型オブジェクトに入っていない設定変数については、 "
"*name* に整数を渡してもかまいません。"

#: ../../library/os.rst:3805
msgid ""
"If the configuration value specified by *name* isn't defined, ``None`` is "
"returned."
msgstr ""
"*name* に指定された設定値が定義されていない場合、 ``None`` を返します。"

#: ../../library/os.rst:3808
msgid ""
"If *name* is a string and is not known, :exc:`ValueError` is raised.  If a "
"specific value for *name* is not supported by the host system, even if it is "
"included in ``confstr_names``, an :exc:`OSError` is raised with :const:"
"`errno.EINVAL` for the error number."
msgstr ""
"*name* が文字列で、かつ不明の場合、 :exc:`ValueError` を送出します。 *name* "
"の指定値がホストシステムでサポートされておらず、 ``confstr_names`` にも入って"
"いない場合、 :const:`errno.EINVAL` をエラー番号として :exc:`OSError` を送出し"
"ます。"

#: ../../library/os.rst:3818
msgid ""
"Dictionary mapping names accepted by :func:`confstr` to the integer values "
"defined for those names by the host operating system. This can be used to "
"determine the set of names known to the system."
msgstr ""
":func:`confstr` が受理する名前を、ホストオペレーティングシステムで定義されて"
"いる整数値に対応付けている辞書です。この辞書はシステムでどの設定名が定義され"
"ているかを決定するために利用できます。"

#: ../../library/os.rst:3827
msgid ""
"Return the number of CPUs in the system. Returns ``None`` if undetermined."
msgstr "システムの CPU 数を返します。未定の場合は ``None`` を返します。"

#: ../../library/os.rst:3829
msgid ""
"This number is not equivalent to the number of CPUs the current process can "
"use.  The number of usable CPUs can be obtained with ``len(os."
"sched_getaffinity(0))``"
msgstr ""
"この数は現在のプロセスが使える CPU 数と同じものではありません。\n"
"使用可能な CPU 数は ``len(os.sched_getaffinity(0))`` で取得できます。"

#: ../../library/os.rst:3839
msgid ""
"Return the number of processes in the system run queue averaged over the "
"last 1, 5, and 15 minutes or raises :exc:`OSError` if the load average was "
"unobtainable."
msgstr ""
"過去 1 分、 5 分、および 15 分間の、システムの実行キューの平均プロセス数を返"
"します。平均負荷が得られない場合には :exc:`OSError` を送出します。"

#: ../../library/os.rst:3848
msgid ""
"Return integer-valued system configuration values. If the configuration "
"value specified by *name* isn't defined, ``-1`` is returned.  The comments "
"regarding the *name* parameter for :func:`confstr` apply here as well; the "
"dictionary that provides information on the known names is given by "
"``sysconf_names``."
msgstr ""
"整数値のシステム設定値を返します。 *name* で指定された設定値が定義されていな"
"い場合、 ``-1`` が返されます。 *name* に関するコメントとしては、 :func:"
"`confstr` で述べた内容が同様に当てはまります ; 既知の設定名についての情報を与"
"える辞書は ``sysconf_names`` で与えられています。"

#: ../../library/os.rst:3858
msgid ""
"Dictionary mapping names accepted by :func:`sysconf` to the integer values "
"defined for those names by the host operating system. This can be used to "
"determine the set of names known to the system."
msgstr ""
":func:`sysconf` が受理する名前を、ホストオペレーティングシステムで定義されて"
"いる整数値に対応付けている辞書です。この辞書はシステムでどの設定名が定義され"
"ているかを決定するために利用できます。"

#: ../../library/os.rst:3864
msgid ""
"The following data values are used to support path manipulation operations.  "
"These are defined for all platforms."
msgstr ""
"以下のデータ値はパス名編集操作をサポートするために利用されます。これらの値は"
"すべてのプラットフォームで定義されています。"

#: ../../library/os.rst:3867
msgid ""
"Higher-level operations on pathnames are defined in the :mod:`os.path` "
"module."
msgstr ""
"パス名に対する高水準の操作は :mod:`os.path` モジュールで定義されています。"

#: ../../library/os.rst:3873
msgid ""
"The constant string used by the operating system to refer to the current "
"directory. This is ``'.'`` for Windows and POSIX. Also available via :mod:"
"`os.path`."
msgstr ""
"現在のディレクトリ参照するためにオペレーティングシステムで使われる文字列定数"
"です。 POSIX と Windows では ``'.'`` になります。 :mod:`os.path` からも利用で"
"きます。"

#: ../../library/os.rst:3881
msgid ""
"The constant string used by the operating system to refer to the parent "
"directory. This is ``'..'`` for Windows and POSIX. Also available via :mod:"
"`os.path`."
msgstr ""
"親ディレクトリを参照するためにオペレーティングシステムで使われる文字列定数で"
"す。 POSIX と Windows では ``'..'`` になります。 :mod:`os.path` からも利用で"
"きます。"

#: ../../library/os.rst:3890
msgid ""
"The character used by the operating system to separate pathname components. "
"This is ``'/'`` for POSIX and ``'\\\\'`` for Windows.  Note that knowing "
"this is not sufficient to be able to parse or concatenate pathnames --- use :"
"func:`os.path.split` and :func:`os.path.join` --- but it is occasionally "
"useful. Also available via :mod:`os.path`."
msgstr ""
"パス名を要素に分割するためにオペレーティングシステムで利用されている文字で"
"す。例えば POSIX では ``'/'`` で、 Windows では ``'\\\\'`` です。しかし、この"
"ことを知っているだけではパス名を解析したり、パス名同士を結合したりするには不"
"十分です --- こうした操作には :func:`os.path.split` や :func:`os.path.join` "
"を使用してください --- が、たまに便利なこともあります。 :mod:`os.path` からも"
"利用できます。"

#: ../../library/os.rst:3900
msgid ""
"An alternative character used by the operating system to separate pathname "
"components, or ``None`` if only one separator character exists.  This is set "
"to ``'/'`` on Windows systems where ``sep`` is a backslash. Also available "
"via :mod:`os.path`."
msgstr ""
"文字パス名を要素に分割する際にオペレーティングシステムで利用されるもう一つの"
"文字で、分割文字が一つしかない場合には ``None`` になります。この値は ``sep`` "
"がバックスラッシュとなっている DOS や Windows システムでは ``'/'`` に設定され"
"ています。 :mod:`os.path` からも利用できます。"

#: ../../library/os.rst:3909
msgid ""
"The character which separates the base filename from the extension; for "
"example, the ``'.'`` in :file:`os.py`. Also available via :mod:`os.path`."
msgstr ""
"ベースのファイル名と拡張子を分ける文字です。例えば、 :file:`os.py` であれば "
"``'.'`` です。 :mod:`os.path` からも利用できます。"

#: ../../library/os.rst:3917
msgid ""
"The character conventionally used by the operating system to separate search "
"path components (as in :envvar:`PATH`), such as ``':'`` for POSIX or ``';'`` "
"for Windows. Also available via :mod:`os.path`."
msgstr ""
"(:envvar:`PATH` のような ) サーチパス内の要素を分割するためにオペレーティング"
"システムが慣習的に用いる文字で、 POSIX における ``':'`` や DOS および "
"Windows における ``';'`` に相当します。 :mod:`os.path` からも利用できます。"

#: ../../library/os.rst:3924
msgid ""
"The default search path used by :func:`exec\\*p\\* <execl>` and :func:"
"`spawn\\*p\\* <spawnl>` if the environment doesn't have a ``'PATH'`` key. "
"Also available via :mod:`os.path`."
msgstr ""
":func:`exec\\*p\\* <execl>` や :func:`spawn\\*p\\* <spawnl>` において、環境変"
"数辞書内に ``'PATH'`` キーがない場合に使われる標準設定のサーチパスです。 :"
"mod:`os.path` からも利用できます。"

#: ../../library/os.rst:3931
msgid ""
"The string used to separate (or, rather, terminate) lines on the current "
"platform.  This may be a single character, such as ``'\\n'`` for POSIX, or "
"multiple characters, for example, ``'\\r\\n'`` for Windows. Do not use *os."
"linesep* as a line terminator when writing files opened in text mode (the "
"default); use a single ``'\\n'`` instead, on all platforms."
msgstr ""
"現在のプラットフォーム上で行を分割 ( あるいは終端 ) するために用いられている"
"文字列です。この値は例えば POSIX での ``'\\n'`` や Mac OS での ``'\\r'`` のよ"
"うに、単一の文字にもなりますし、例えば Windows での ``'\\r\\n'`` のように複数"
"の文字列にもなります。テキストモードで開いたファイルに書き込む時には、 *os."
"linesep* を利用しないでください。すべてのプラットフォームで、単一の "
"``'\\n'`` を使用してください。"

#: ../../library/os.rst:3940
msgid ""
"The file path of the null device. For example: ``'/dev/null'`` for POSIX, "
"``'nul'`` for Windows.  Also available via :mod:`os.path`."
msgstr ""
"ヌルデバイスのファイルパスです。例えば POSIX では ``'/dev/null'`` で、 "
"Windows では ``'nul'`` です。この値は :mod:`os.path` からも利用できます。"

#: ../../library/os.rst:3951
msgid ""
"Flags for use with the :func:`~sys.setdlopenflags` and :func:`~sys."
"getdlopenflags` functions.  See the Unix manual page :manpage:`dlopen(3)` "
"for what the different flags mean."
msgstr ""
":func:`~sys.setdlopenflags` 関数と :func:`~sys.getdlopenflags` 関数と一緒に使"
"用するフラグ。それぞれのフラグの意味については、Unix マニュアルの :manpage:"
"`dlopen(3)` ページを参照してください。"

#: ../../library/os.rst:3959
msgid "Random numbers"
msgstr "乱数"

#: ../../library/os.rst:3964
msgid ""
"Get up to *size* random bytes. The function can return less bytes than "
"requested."
msgstr ""
"最大で *size* バイトからなるランダムなバイト列を返します。この関数は要求され"
"たバイト数よりも少ないバイト数を返すことがあります。"

#: ../../library/os.rst:3967
msgid ""
"These bytes can be used to seed user-space random number generators or for "
"cryptographic purposes."
msgstr ""
"バイト列は、ユーザー空間の乱数生成器や暗号目的ののシードとして利用できます。"

#: ../../library/os.rst:3970
msgid ""
"``getrandom()`` relies on entropy gathered from device drivers and other "
"sources of environmental noise. Unnecessarily reading large quantities of "
"data will have a negative impact on  other users  of the ``/dev/random`` and "
"``/dev/urandom`` devices."
msgstr ""
"``getrandom()`` はデバイスドライバや他の環境ノイズ源から収集されたエントロ"
"ピーに頼っています。不必要な大量のデータの読出しは、``/dev/random`` と ``/"
"dev/urandom`` デバイスの他のユーザーに負の影響を与えるでしょう。"

#: ../../library/os.rst:3975
msgid ""
"The flags argument is a bit mask that can contain zero or more of the "
"following values ORed together: :py:data:`os.GRND_RANDOM` and :py:data:"
"`GRND_NONBLOCK`."
msgstr ""
"flags 引数には、次に示す値の0個以上の論理和で与えられるビットマスクを指定でき"
"ます: :py:data:`os.GRND_RANDOM` および :py:data:`GRND_NONBLOCK`。"

#: ../../library/os.rst:3979
msgid ""
"See also the `Linux getrandom() manual page <http://man7.org/linux/man-pages/"
"man2/getrandom.2.html>`_."
msgstr ""
"`Linux getrandom() manual page <http://man7.org/linux/man-pages/man2/"
"getrandom.2.html>`_ も参照してください。　"

#: ../../library/os.rst:3982
msgid "Availability: Linux 3.17 and newer."
msgstr "利用できる環境: Linux 3.17 以降。"

#: ../../library/os.rst:3988
msgid "Return a string of *size* random bytes suitable for cryptographic use."
msgstr ""
"暗号に関する用途に適した *size* バイトからなるランダムな文字列を返します。"

#: ../../library/os.rst:3990
msgid ""
"This function returns random bytes from an OS-specific randomness source.  "
"The returned data should be unpredictable enough for cryptographic "
"applications, though its exact quality depends on the OS implementation."
msgstr ""
"この関数は OS 固有の乱数発生源からランダムなバイト列を生成して返します。この"
"関数の返すデータは暗号を用いたアプリケーションで十分利用できる程度に予測不能"
"ですが、実際のクオリティは OS の実装によって異なります。"

#: ../../library/os.rst:3994
msgid ""
"On Linux, if the ``getrandom()`` syscall is available, it is used in "
"blocking mode: block until the system urandom entropy pool is initialized "
"(128 bits of entropy are collected by the kernel). See the :pep:`524` for "
"the rationale. On Linux, the :func:`getrandom` function can be used to get "
"random bytes in non-blocking mode (using the :data:`GRND_NONBLOCK` flag) or "
"to poll until the system urandom entropy pool is initialized."
msgstr ""
"Linux では、 ``getrandom()`` システムコールが利用可能ならブロッキングモードで"
"呼び出されます: すなわちシステムの urandom エントロピープールが初期化されるま"
"で (128 ビットのエントロピーがカーネルにより収集されるまで) 処理がブロックさ"
"れます。論拠については :pep:`524` を参照してください。 Linux では、 (:data:"
"`GRND_NONBLOCK` フラグを使って) 非ブロッキングモードでランダムなバイトを取得"
"したり、システムの urandom エントロピープールが初期化されるまでポーリングする"
"ために :func:`getrandom` 関数を利用することができます。"

#: ../../library/os.rst:4001
msgid ""
"On a Unix-like system, random bytes are read from the ``/dev/urandom`` "
"device. If the ``/dev/urandom`` device is not available or not readable, "
"the :exc:`NotImplementedError` exception is raised."
msgstr ""
"Unix ライクなシステムでは、ランダムなバイトは ``/dev/urandom`` デバイスから読"
"み込みます。 ``/dev/urandom`` デバイスが利用できないか、もしくは読み取り不可"
"のときは、 :exc:`NotImplementedError` 例外が送出されます。"

#: ../../library/os.rst:4005
msgid "On Windows, it will use ``CryptGenRandom()``."
msgstr "Windowsで、 ``CryptGenRandom()`` を使用します。"

#: ../../library/os.rst:4008
msgid ""
"The :mod:`secrets` module provides higher level functions. For an easy-to-"
"use interface to the random number generator provided by your platform, "
"please see :class:`random.SystemRandom`."
msgstr ""
":mod:`secrets` モジュールは高レベルの乱数生成機能を提供します。プラットフォー"
"ムが提供する乱数生成器に対する簡便なインターフェースについては、 :class:"
"`random.SystemRandom` を参照してください。"

#: ../../library/os.rst:4012
msgid ""
"On Linux, ``getrandom()`` is now used in blocking mode to increase the "
"security."
msgstr ""
"Linuxで、 セキュリティを高めるために、``getrandom()`` をブロッキングモードで"
"使用するようになりました。"

#: ../../library/os.rst:4016
msgid ""
"On Linux, if the ``getrandom()`` syscall blocks (the urandom entropy pool is "
"not initialized yet), fall back on reading ``/dev/urandom``."
msgstr ""
"Linux において、 ``getrandom()`` システムコールがブロックするなら (urandom エ"
"ントロピープールが初期化されていなければ) 、 ``/dev/urandom`` を読む方法に"
"フォールバックします。"

#: ../../library/os.rst:4020
msgid ""
"On Linux 3.17 and newer, the ``getrandom()`` syscall is now used when "
"available.  On OpenBSD 5.6 and newer, the C ``getentropy()`` function is now "
"used. These functions avoid the usage of an internal file descriptor."
msgstr ""
"Linux 3.17 以降では、使用可能な場合に ``getrandom()``  システムコールが使用さ"
"れるようになりました。OpenBSD 5.6 以降では、C ``getentropy()`` 関数が使用され"
"るようになりました。これらの関数は、内部ファイル記述子を使用しません。"

#: ../../library/os.rst:4028
msgid ""
"By  default, when reading from ``/dev/random``, :func:`getrandom` blocks if "
"no random bytes are available, and when reading from ``/dev/urandom``, it "
"blocks if the entropy pool has not yet been initialized."
msgstr ""
"デフォルトでは、:func:`getrandom` は ``/dev/random``から読み込んだときにラン"
"ダムなバイトが存在しない場合や、 ``/dev/urandom``から読み込んだときにエントロ"
"ピープールが初期化されていない場合に処理をブロックします。"

#: ../../library/os.rst:4032
msgid ""
"If the :py:data:`GRND_NONBLOCK` flag is set, then :func:`getrandom` does not "
"block in these cases, but instead immediately raises :exc:`BlockingIOError`."
msgstr ""
":py:data:`GRND_NONBLOCK` フラグがセットされると、 :func:`getrandom` はこれら"
"の場合に処理をブロックせず、ただちに :exc:`BlockingIOError` 例外を送出しま"
"す。"

#: ../../library/os.rst:4039
msgid ""
"If  this  bit  is  set,  then  random bytes are drawn from the ``/dev/"
"random`` pool instead of the ``/dev/urandom`` pool."
msgstr ""
"このビットがセットされた場合、 ランダムバイトは ``/dev/urandom`` プールの代わ"
"りに  ``/dev/random`` プールから取り出されます。"
