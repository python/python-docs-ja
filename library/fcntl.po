# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/fcntl.rst:2
msgid ":mod:`fcntl` --- The ``fcntl`` and ``ioctl`` system calls"
msgstr ":mod:`fcntl` --- ``fcntl`` および ``ioctl`` システムコール"

#: ../../library/fcntl.rst:14
msgid ""
"This module performs file control and I/O control on file descriptors. It is "
"an interface to the :c:func:`fcntl` and :c:func:`ioctl` Unix routines.  For "
"a complete description of these calls, see :manpage:`fcntl(2)` and :manpage:"
"`ioctl(2)` Unix manual pages."
msgstr ""
"このモジュールでは、ファイル記述子 (file descriptor) に基づいたファイル制御お"
"よび I/O 制御を実現します。\n"
"このモジュールは、 Unix のルーチンである :c:func:`fcntl` および :c:func:"
"`ioctl` へのインタフェースです。\n"
"これらのシステムコールの完全な説明は、 :manpage:`fcntl(2)` と :manpage:"
"`ioctl(2)` のUnix マニュアルページを参照してください。"

#: ../../library/fcntl.rst:19
msgid ""
"All functions in this module take a file descriptor *fd* as their first "
"argument.  This can be an integer file descriptor, such as returned by ``sys."
"stdin.fileno()``, or a file object, such as ``sys.stdin`` itself, which "
"provides a :meth:`~io.IOBase.fileno` which returns a genuine file descriptor."
msgstr ""
"このモジュール内の全ての関数はファイル記述子 *fd* を最初の引数に取ります。 こ"
"の値は ``sys.stdin.fileno()`` が返すような\\ 整数のファイル記述子でも、 "
"``sys.stdin`` 自体のような、純粋にファイル記述子だけを返す :meth:`~io.IOBase."
"fileno` メソッドを提供しているファイルオブジェクトでもかまいません。"

#: ../../library/fcntl.rst:24
msgid "The module defines the following functions:"
msgstr "このモジュールでは以下の関数を定義しています:"

#: ../../library/fcntl.rst:29
msgid ""
"Perform the operation *op* on file descriptor *fd* (file objects providing "
"a :meth:`~io.IOBase.fileno` method are accepted as well).  The values used "
"for for *op* are operating system dependent, and are available as constants "
"in the :mod:`fcntl` module, using the same names as used in the relevant C "
"header files.  The argument *arg* is optional, and defaults to the integer "
"value ``0``.  When present, it can either be an integer value, or a string. "
"With the argument missing or an integer value, the return value of this "
"function is the integer return value of the C :c:func:`fcntl` call.  When "
"the argument is a string it represents a binary structure, e.g. created by :"
"func:`struct.pack`. The binary data is copied to a buffer whose address is "
"passed to the C :c:func:`fcntl` call.  The return value after a successful "
"call is the contents of the buffer, converted to a string object.  The "
"length of the returned string will be the same as the length of the *arg* "
"argument.  This is limited to 1024 bytes.  If the information returned in "
"the buffer by the operating system is larger than 1024 bytes, this is most "
"likely to result in a segmentation violation or a more subtle data "
"corruption."
msgstr ""
"操作 *op* をファイル記述子 *fd* (または :meth:`~io.IOBase.fileno` メソッドを"
"提供しているファイルオブジェクト) に対して実行します。 *op* として用いられる"
"値はオペレーティングシステム依存で、 :mod:`fcntl` モジュール内に関連する C "
"ヘッダファイルと同じ名前が使われている定数の形で利用出来ます。引数 *arg* はオ"
"プションで、標準では整数値 ``0`` です。この引数を与える場合、整数か文字列の値"
"をとります。引数が無いか整数値の場合、この関数の戻り値は C 言語の :c:func:"
"`fcntl` を呼び出した際の整数の戻り値になります。引数が文字列の場合には、 :"
"func:`struct.pack` で作られる\\ ようなバイナリの構造体を表します。バイナリ"
"データはバッファにコピーされ、そのアドレスが C 言語の :c:func:`fcntl` 呼び出"
"しに渡されます。 呼び出しが成功した後に戻される値はバッファの内容で、文字列"
"\\ オブジェクトに変換されています。 返される文字列は *arg* 引数と同じ長さにな"
"ます。 この値は 1024 バイトに制限されています。 オペレーティングシステムから"
"バッファに返される情報の長さが 1024 バイトよりも大きい場合、大抵はセグメン"
"テーション違反となるか、\\ より不可思議なデータの破損を引き起こします。"

#: ../../library/fcntl.rst:46
msgid "If the :c:func:`fcntl` fails, an :exc:`IOError` is raised."
msgstr ":c:func:`fcntl` が失敗した場合、 :exc:`IOError` が送出されます。"

#: ../../library/fcntl.rst:51
msgid ""
"This function is identical to the :func:`~fcntl.fcntl` function, except that "
"the operations are typically defined in the library module :mod:`termios` "
"and the argument handling is even more complicated."
msgstr ""
"この関数は :func:`~fcntl.fcntl` 関数と同じですが、操作が通常ライブラリモ"
"ジュール :mod:`termios` で定義されており、引数の扱いがより複雑であるところが"
"異なります。"

#: ../../library/fcntl.rst:55
msgid ""
"The op parameter is limited to values that can fit in 32-bits. Additional "
"constants of interest for use as the *op* argument can be found in the :mod:"
"`termios` module, under the same names as used in the relevant C header "
"files."
msgstr ""
"パラメータ op は32ビットに収まる値に制限されます。 *op* 引数として使うのに関"
"係のある追加の定数は :mod:`termios` モジュールにあって、関連する C ヘッダファ"
"イルで使われているのと同じ名前が付けられています。"

#: ../../library/fcntl.rst:60
msgid ""
"The parameter *arg* can be one of an integer, absent (treated identically to "
"the integer ``0``), an object supporting the read-only buffer interface "
"(most likely a plain Python string) or an object supporting the read-write "
"buffer interface."
msgstr ""
"パラメータ *arg* は整数か、存在しない (整数 ``0`` と等価なものとして扱われま"
"す) か、\\ (通常の Python 文字列のような) 読み出し専用の\\ バッファインタ"
"フェースをサポートするオブジェクトか、\\ 読み書きバッファインタフェースをサ"
"ポートするオブジェクトです。"

#: ../../library/fcntl.rst:64
msgid ""
"In all but the last case, behaviour is as for the :func:`~fcntl.fcntl` "
"function."
msgstr ""
"最後の型のオブジェクトを除き、動作は :func:`~fcntl.fcntl` 関数と同じです。"

#: ../../library/fcntl.rst:67
msgid ""
"If a mutable buffer is passed, then the behaviour is determined by the value "
"of the *mutate_flag* parameter."
msgstr ""
"可変なバッファが渡された場合、動作は *mutate_flag* 引数の値で決定されます。"

#: ../../library/fcntl.rst:70
msgid ""
"If it is false, the buffer's mutability is ignored and behaviour is as for a "
"read-only buffer, except that the 1024 byte limit mentioned above is avoided "
"-- so long as the buffer you pass is as least as long as what the operating "
"system wants to put there, things should work."
msgstr ""
"この値が偽の場合、バッファの可変性は無視され、動作は読み出しバッファの場合と"
"\\ 同じになりますが、上で述べた 1024 バイトの制限は回避されます -- 従って、オ"
"ペレーティングシステムが希望するバッファ長までであれば正しく動作します。"

#: ../../library/fcntl.rst:75
msgid ""
"If *mutate_flag* is true, then the buffer is (in effect) passed to the "
"underlying :func:`ioctl` system call, the latter's return code is passed "
"back to the calling Python, and the buffer's new contents reflect the action "
"of the :func:`ioctl`.  This is a slight simplification, because if the "
"supplied buffer is less than 1024 bytes long it is first copied into a "
"static buffer 1024 bytes long which is then passed to :func:`ioctl` and "
"copied back into the supplied buffer."
msgstr ""
"*mutate_flag* が真の場合、バッファは (実際には) 根底にある :func:`ioctl` シス"
"テムコールに渡され、後者の戻り値が呼び出し側の Python に引き渡され、バッファ"
"の新たな内容は  :func:`ioctl` の動作を反映します。 この説明はやや単純化されて"
"います。 というのは、与えられたバッファが 1024 バイト長よりも短い場合、バッ"
"ファはまず 1024 バイト長の静的なバッファにコピーされてから :func:`ioctl` に渡"
"され、\\ その後引数で与えたバッファに戻しコピーされるからです。"

#: ../../library/fcntl.rst:83
msgid ""
"If *mutate_flag* is not supplied, then from Python 2.5 it defaults to true, "
"which is a change from versions 2.3 and 2.4. Supply the argument explicitly "
"if version portability is a priority."
msgstr ""
"*mutate_flag* が与えられなかった場合、2.3 ではこの値は偽となります。 この仕様"
"は今後のいくつかのバージョンを経た Python で変更される予定\\ です: 2.4 で"
"は、 *mutate_flag* を提供し忘れると警告が出されますが\\ 同じ動作を行い、2.5 "
"ではデフォルトの値が真となるはずです。"

#: ../../library/fcntl.rst:87
msgid "If the :c:func:`ioctl` fails, an :exc:`IOError` exception is raised."
msgstr ":c:func:`ioctl` が失敗すると、 :exc:`IOError` 例外が送出されます。"

#: ../../library/fcntl.rst:89
msgid "An example::"
msgstr "以下に例を示します::"

#: ../../library/fcntl.rst:105
msgid ""
"Perform the lock operation *op* on file descriptor *fd* (file objects "
"providing a :meth:`~io.IOBase.fileno` method are accepted as well). See the "
"Unix manual :manpage:`flock(2)` for details.  (On some systems, this "
"function is emulated using :c:func:`fcntl`.)"
msgstr ""
"ファイル記述子 *fd* (:meth:`~io.IOBase.fileno` メソッドを提供しているファイル"
"オブジェクトも含む) に対してロック操作 *op* を実行します。 詳細は Unix マニュ"
"アルの :manpage:`flock(2)` を参照してください (システムによっては、この関数"
"は :c:func:`fcntl` を使ってエミュレーションされています)。"

#: ../../library/fcntl.rst:110
msgid "If the :c:func:`flock` fails, an :exc:`IOError` exception is raised."
msgstr ":c:func:`flock` が失敗すると、 :exc:`IOError` 例外が送出されます。"

#: ../../library/fcntl.rst:115
msgid ""
"This is essentially a wrapper around the :func:`~fcntl.fcntl` locking calls. "
"*fd* is the file descriptor of the file to lock or unlock, and *operation* "
"is one of the following values:"
msgstr ""
"本質的に :func:`~fcntl.fcntl` によるロッキングの呼び出しをラップしたもので"
"す。 *fd* はロックまたはアンロックするファイルのファイル記述子で、 "
"*operation* は以下の値のうちいずれかになります:"

#: ../../library/fcntl.rst:119
msgid ":const:`LOCK_UN` -- unlock"
msgstr ":const:`LOCK_UN` -- アンロック"

#: ../../library/fcntl.rst:120
msgid ":const:`LOCK_SH` -- acquire a shared lock"
msgstr ":const:`LOCK_SH` -- 共有ロックを取得"

#: ../../library/fcntl.rst:121
msgid ":const:`LOCK_EX` -- acquire an exclusive lock"
msgstr ":const:`LOCK_EX` -- 排他的ロックを取得"

#: ../../library/fcntl.rst:123
msgid ""
"When *operation* is :const:`LOCK_SH` or :const:`LOCK_EX`, it can also be "
"bitwise ORed with :const:`LOCK_NB` to avoid blocking on lock acquisition. "
"If :const:`LOCK_NB` is used and the lock cannot be acquired, an :exc:"
"`IOError` will be raised and the exception will have an *errno* attribute "
"set to :const:`EACCES` or :const:`EAGAIN` (depending on the operating "
"system; for portability, check for both values).  On at least some systems, :"
"const:`LOCK_EX` can only be used if the file descriptor refers to a file "
"opened for writing."
msgstr ""
"*operation* が :const:`LOCK_SH` または :const:`LOCK_EX` の場合、 :const:"
"`LOCK_NB` とビット OR にすることでロック取得時にブロックしないようにすること"
"ができます。 :const:`LOCK_NB` が 使われ、ロックが取得できなかった場合、 :exc:"
"`IOError` が送出され、例外は *errno* 属性を持ち、その値は :const:`EACCESS` ま"
"たは :const:`EAGAIN` になります (オペレーティングシステムに依存します; 可搬性"
"のため、両方の値をチェックしてください)。 少なくともいくつかのシステムでは、 "
"ファイル記述子が参照しているファイルが書き込みのために開かれている場合、 :"
"const:`LOCK_EX` だけしか使うことができません。"

#: ../../library/fcntl.rst:132
msgid ""
"*length* is the number of bytes to lock, *start* is the byte offset at which "
"the lock starts, relative to *whence*, and *whence* is as with :func:`io."
"IOBase.seek`, specifically:"
msgstr ""
"*length* はロックを行いたいバイト数、 *start* はロック領域先頭の *whence* か"
"らの相対的なバイトオフセット、 *whence* は :func:`io.IOBase.seek` と同じで、"
"具体的には:"

#: ../../library/fcntl.rst:136
msgid ":const:`0` -- relative to the start of the file (:data:`os.SEEK_SET`)"
msgstr ":const:`0` -- ファイル先頭からの相対位置 (:data:`os.SEEK_SET`)"

#: ../../library/fcntl.rst:137
msgid ""
":const:`1` -- relative to the current buffer position (:data:`os.SEEK_CUR`)"
msgstr ":const:`1` -- 現在のバッファ位置からの相対位置 (:data:`os.SEEK_CUR`)"

#: ../../library/fcntl.rst:138
msgid ":const:`2` -- relative to the end of the file (:data:`os.SEEK_END`)"
msgstr ":const:`2` -- ファイルの末尾からの相対位置 (:data:`os.SEEK_END`)"

#: ../../library/fcntl.rst:140
msgid ""
"The default for *start* is 0, which means to start at the beginning of the "
"file. The default for *length* is 0 which means to lock to the end of the "
"file.  The default for *whence* is also 0."
msgstr ""
"*start* の標準の値は 0 で、ファイルの先頭から開始することを意味します。 "
"*whence* の標準の値も 0 です。"

#: ../../library/fcntl.rst:144
msgid "Examples (all on a SVR4 compliant system)::"
msgstr "以下に (全ての SVR4 互換システムでの) 例を示します::"

#: ../../library/fcntl.rst:154
msgid ""
"Note that in the first example the return value variable *rv* will hold an "
"integer value; in the second example it will hold a string value.  The "
"structure lay-out for the *lockdata* variable is system dependent --- "
"therefore using the :func:`flock` call may be better."
msgstr ""
"最初の例では、戻り値 *rv* は整数値を保持しています; 二つ目の例では文字列値を"
"保持しています。 *lockdata* 変数の構造体レイアウトはシステム依存です --- 従っ"
"て :func:`flock` を呼ぶ方がベターです。"

#: ../../library/fcntl.rst:165
msgid "Module :mod:`os`"
msgstr ":mod:`os` モジュール"

#: ../../library/fcntl.rst:163
msgid ""
"If the locking flags :data:`~os.O_SHLOCK` and :data:`~os.O_EXLOCK` are "
"present in the :mod:`os` module (on BSD only), the :func:`os.open` function "
"provides an alternative to the :func:`lockf` and :func:`flock` functions."
msgstr ""
"もし :mod:`os` モジュールに :data:`os.O_SHLOCK` と :data:`os.O_EXLOCK` が 存"
"在する場合 (BSD のみ)、 :func:`os.open` 関数は :func:`lockf` や :func:"
"`flock` 関数を代替できます。"
