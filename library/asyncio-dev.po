# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:06+0000\n"
"PO-Revision-Date: 2020-05-30 11:56+0000\n"
"Last-Translator: tomo, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-dev.rst:7
msgid "Developing with asyncio"
msgstr "asyncio での開発"

#: ../../library/asyncio-dev.rst:9
msgid ""
"Asynchronous programming is different from classic \"sequential\" "
"programming."
msgstr ""
"非同期プログラミングは伝統的な \"同期的\" プログラミングとは異なります。"

#: ../../library/asyncio-dev.rst:12
msgid ""
"This page lists common mistakes and traps and explains how to avoid them."
msgstr ""
"このページはよくある間違いや落とし穴を列挙し、それらを回避する方法を説明しま"
"す。"

#: ../../library/asyncio-dev.rst:19
msgid "Debug Mode"
msgstr "デバッグモード"

#: ../../library/asyncio-dev.rst:21
msgid ""
"By default asyncio runs in production mode.  In order to ease the "
"development asyncio has a *debug mode*."
msgstr ""
"asyncio はデフォルトで本運用モードで実行されます。いっぽう、開発を容易にする"
"ために asyncio は \"デバッグモード\" を持っています。"

#: ../../library/asyncio-dev.rst:24
msgid "There are several ways to enable asyncio debug mode:"
msgstr "asyncio のデバッグモードを有効化する方法はいくつかあります:"

#: ../../library/asyncio-dev.rst:26
msgid "Setting the :envvar:`PYTHONASYNCIODEBUG` environment variable to ``1``."
msgstr ":envvar:`PYTHONASYNCIODEBUG` 環境変数の値を ``1`` に設定する。"

#: ../../library/asyncio-dev.rst:28
msgid "Using the :option:`-X` ``dev`` Python command line option."
msgstr ""

#: ../../library/asyncio-dev.rst:30
msgid "Passing ``debug=True`` to :func:`asyncio.run`."
msgstr ":func:`asyncio.run` 実行時に ``debug=True`` を設定する。"

#: ../../library/asyncio-dev.rst:32
msgid "Calling :meth:`loop.set_debug`."
msgstr ":meth:`loop.set_debug` を呼び出す。"

#: ../../library/asyncio-dev.rst:34
msgid "In addition to enabling the debug mode, consider also:"
msgstr "デバッグモードを有効化することに加え、以下も検討してください:"

#: ../../library/asyncio-dev.rst:36
msgid ""
"setting the log level of the :ref:`asyncio logger <asyncio-logger>` to :py:"
"data:`logging.DEBUG`, for example the following snippet of code can be run "
"at startup of the application::"
msgstr ""
":ref:`asyncio ロガー <asyncio-logger>` のログレベルを :py:data:`logging."
"DEBUG` に設定します。例えばアプリケーションの起動時に以下を実行します::"

#: ../../library/asyncio-dev.rst:42
msgid ""
"configuring the :mod:`warnings` module to display :exc:`ResourceWarning` "
"warnings.  One way of doing that is by using the :option:`-W` ``default`` "
"command line option."
msgstr ""
":mod:`warnings` モジュールが :exc:`ResourceWarning` 警告を表示するように設定"
"します。やり方のひとつは :option:`-W` ``default`` コマンドラインオプションを"
"使うことです。"

#: ../../library/asyncio-dev.rst:47
msgid "When the debug mode is enabled:"
msgstr "デバッグモードが有効化されたときの動作:"

#: ../../library/asyncio-dev.rst:49
msgid ""
"asyncio checks for :ref:`coroutines that were not awaited <asyncio-coroutine-"
"not-scheduled>` and logs them; this mitigates the \"forgotten await\" "
"pitfall."
msgstr ""
"asyncio は :ref:`待ち受け処理 (await) を伴わないコルーチン <asyncio-"
"coroutine-not-scheduled>` がないかをチェックし、それらを記録します; これによ"
"り \"待ち受け忘れ\" の落とし穴にはまる可能性を軽減します。"

#: ../../library/asyncio-dev.rst:53
msgid ""
"Many non-threadsafe asyncio APIs (such as :meth:`loop.call_soon` and :meth:"
"`loop.call_at` methods) raise an exception if they are called from a wrong "
"thread."
msgstr ""
"スレッドセーフでない asyncio APIs の多く (:meth:`loop.call_soon` や :meth:"
"`loop.call_at` など) は、誤ったスレッドから呼び出されたときに例外を送出しま"
"す。"

#: ../../library/asyncio-dev.rst:57
msgid ""
"The execution time of the I/O selector is logged if it takes too long to "
"perform an I/O operation."
msgstr ""
"I/O セレクタが I/O 処理を実行する時間が長すぎる場合、その実行時間が記録されま"
"す。"

#: ../../library/asyncio-dev.rst:60
msgid ""
"Callbacks taking longer than 100ms are logged.  The :attr:`loop."
"slow_callback_duration` attribute can be used to set the minimum execution "
"duration in seconds that is considered \"slow\"."
msgstr ""

#: ../../library/asyncio-dev.rst:68
msgid "Concurrency and Multithreading"
msgstr "並行処理とマルチスレッド処理"

#: ../../library/asyncio-dev.rst:70
msgid ""
"An event loop runs in a thread (typically the main thread) and executes all "
"callbacks and Tasks in its thread.  While a Task is running in the event "
"loop, no other Tasks can run in the same thread.  When a Task executes an "
"``await`` expression, the running Task gets suspended, and the event loop "
"executes the next Task."
msgstr ""
"イベントループはスレッド（典型的にはメインスレッド）内で動作し、すべてのコー"
"ルバックとタスクをそのスレッド内で実行します。ひとつのタスクがイベントループ"
"内で実行される間、他のタスクを同じスレッド内で実行することはできません。タス"
"クが ``await`` 式を実行すると、実行中のタスクはサスペンドされ、イベントループ"
"は次のタスクを実行します。"

#: ../../library/asyncio-dev.rst:76
msgid ""
"To schedule a :term:`callback` from another OS thread, the :meth:`loop."
"call_soon_threadsafe` method should be used. Example::"
msgstr ""
"別の OS スレッドからのコールバック (:term:`callback`) をスケジュールする場"
"合、  :meth:`loop.call_soon_threadsafe` メソッドを使ってください。例:"

#: ../../library/asyncio-dev.rst:81
msgid ""
"Almost all asyncio objects are not thread safe, which is typically not a "
"problem unless there is code that works with them from outside of a Task or "
"a callback.  If there's a need for such code to call a low-level asyncio "
"API, the :meth:`loop.call_soon_threadsafe` method should be used, e.g.::"
msgstr ""
"ほぼ全ての非同期オブジェクトはスレッドセーフではありませんが、タスクやコール"
"バックの外側で非同期オブジェクトを使うコードが存在しない限り、それが問題には"
"なることはほとんどありません。もしそのような目的で低レベルの asyncio API を呼"
"び出すようなコードを書く必要がある場合、 :meth:`loop.call_soon_threadsafe` メ"
"ソッドを使ってください。例: "

#: ../../library/asyncio-dev.rst:89
msgid ""
"To schedule a coroutine object from a different OS thread, the :func:"
"`run_coroutine_threadsafe` function should be used. It returns a :class:"
"`concurrent.futures.Future` to access the result::"
msgstr ""
"別の OS スレッドからコルーチンオブジェクトをスケジュールする場合は、 :func:"
"`run_coroutine_threadsafe` メソッドを使ってください。 :func:"
"`run_coroutine_threadsafe` は結果にアクセスするための :class:`concurrent."
"futures.Future`  オブジェクトを返します:"

#: ../../library/asyncio-dev.rst:102
msgid ""
"To handle signals and to execute subprocesses, the event loop must be run in "
"the main thread."
msgstr ""
"シグナルの処理やサブプロセスの実行を行うには、イベントループはメインスレッド"
"内で実行しなければなりません。"

#: ../../library/asyncio-dev.rst:105
msgid ""
"The :meth:`loop.run_in_executor` method can be used with a :class:"
"`concurrent.futures.ThreadPoolExecutor` to execute blocking code in a "
"different OS thread without blocking the OS thread that the event loop runs "
"in."
msgstr ""
"The :meth:`loop.run_in_executor` メソッドを :class:`concurrent.futures."
"ThreadPoolExecutor` とともに使用することで、イベントループの OS スレッドをブ"
"ロックすることなく、別の OS スレッド内でブロッキングコードを実行することがで"
"きます。 "

#: ../../library/asyncio-dev.rst:110
msgid ""
"There is currently no way to schedule coroutines or callbacks directly from "
"a different process (such as one started with :mod:`multiprocessing`). The :"
"ref:`Event Loop Methods <asyncio-event-loop>` section lists APIs that can "
"read from pipes and watch file descriptors without blocking the event loop. "
"In addition, asyncio's :ref:`Subprocess <asyncio-subprocess>` APIs provide a "
"way to start a process and communicate with it from the event loop. Lastly, "
"the aforementioned :meth:`loop.run_in_executor` method can also be used with "
"a :class:`concurrent.futures.ProcessPoolExecutor` to execute code in a "
"different process."
msgstr ""

#: ../../library/asyncio-dev.rst:124
msgid "Running Blocking Code"
msgstr "ブロッキングコードの実行"

#: ../../library/asyncio-dev.rst:126
msgid ""
"Blocking (CPU-bound) code should not be called directly.  For example, if a "
"function performs a CPU-intensive calculation for 1 second, all concurrent "
"asyncio Tasks and IO operations would be delayed by 1 second."
msgstr ""
"ブロッキングコード (CPU バウンドなコード) を直接呼び出すべきではありません。"
"たとえば、 CPU 負荷の高い関数を1秒実行したとすると、並行に処理されている全て"
"の非同期タスクと I/O 処理は1秒遅れる可能性があります。 "

#: ../../library/asyncio-dev.rst:131
msgid ""
"An executor can be used to run a task in a different thread or even in a "
"different process to avoid blocking the OS thread with the event loop.  See "
"the :meth:`loop.run_in_executor` method for more details."
msgstr ""
"エグゼキューターを使用することにより、イベントループの OS スレッドをブロック"
"することなく、別のスレッドや別のプロセス上でタスクを実行することができます。"
"詳しくは :meth:`loop.run_in_executor` メソッドを参照してください。"

#: ../../library/asyncio-dev.rst:140
msgid "Logging"
msgstr "ログ記録"

#: ../../library/asyncio-dev.rst:142
msgid ""
"asyncio uses the :mod:`logging` module and all logging is performed via the "
"``\"asyncio\"`` logger."
msgstr ""
"asyncio は :mod:`logging` モジュールを利用し、 全てのログ記録は "
"``\"asyncio\"`` ロガーを通じて行われます。"

#: ../../library/asyncio-dev.rst:145
msgid ""
"The default log level is :py:data:`logging.INFO`, which can be easily "
"adjusted::"
msgstr ""
"デフォルトのログレベルは :py:data:`logging.INFO` ですが、これは簡単に調節でき"
"ます:"

#: ../../library/asyncio-dev.rst:154
msgid "Detect never-awaited coroutines"
msgstr "待ち受け処理を伴わないコルーチンの検出"

#: ../../library/asyncio-dev.rst:156
msgid ""
"When a coroutine function is called, but not awaited (e.g. ``coro()`` "
"instead of ``await coro()``) or the coroutine is not scheduled with :meth:"
"`asyncio.create_task`, asyncio will emit a :exc:`RuntimeWarning`::"
msgstr ""
"コルーチンが呼び出されただけで、待ち受け処理がない場合 (たとえば ``await "
"coro()`` のかわりに ``coro()`` と書いてしまった場合) 、またはコルーチンが :"
"meth:`asyncio.create_task` を使わずにスケジュールされた場合、 asyncio は :"
"exc:`RuntimeWarning` 警告を送出します:"

#: ../../library/asyncio-dev.rst:171 ../../library/asyncio-dev.rst:216
msgid "Output::"
msgstr "出力::"

#: ../../library/asyncio-dev.rst:176 ../../library/asyncio-dev.rst:232
msgid "Output in debug mode::"
msgstr "デバッグモードの出力::"

#: ../../library/asyncio-dev.rst:189
msgid ""
"The usual fix is to either await the coroutine or call the :meth:`asyncio."
"create_task` function::"
msgstr ""
"通常の修正方法はコルーチンを待ち受ける (await) か、 :meth:`asyncio."
"create_task` 関数を呼び出すことです:"

#: ../../library/asyncio-dev.rst:197
msgid "Detect never-retrieved exceptions"
msgstr "回収されない例外の検出"

#: ../../library/asyncio-dev.rst:199
msgid ""
"If a :meth:`Future.set_exception` is called but the Future object is never "
"awaited on, the exception would never be propagated to the user code.  In "
"this case, asyncio would emit a log message when the Future object is "
"garbage collected."
msgstr ""
"もし :meth:`Future.set_exception` メソッドが呼び出されても、その Future オブ"
"ジェクトを待ち受けていなければ、例外は決してユーザーコードまで伝播しません。"
"この場合 asyncio は、 Future オブジェクトがガベージコレクションの対象となった"
"ときにログメッセージを送出することがあります。"

#: ../../library/asyncio-dev.rst:204
msgid "Example of an unhandled exception::"
msgstr "処理されない例外の例:"

#: ../../library/asyncio-dev.rst:227
msgid ""
":ref:`Enable the debug mode <asyncio-debug-mode>` to get the traceback where "
"the task was created::"
msgstr ""
"タスクが生成された箇所を特定するには、 :ref:`デバッグモードを有効化して "
"<asyncio-debug-mode>` トレースバックを取得してください:"
