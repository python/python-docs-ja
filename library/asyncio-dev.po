# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2018
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:27+0000\n"
"Last-Translator: tomo, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-dev.rst:6
msgid "Develop with asyncio"
msgstr "asyncio での開発"

#: ../../library/asyncio-dev.rst:8
msgid ""
"Asynchronous programming is different than classical \"sequential\" "
"programming. This page lists common traps and explains how to avoid them."
msgstr ""
"非同期プログラミングは古典的な \"逐次\" プログラミングとは異なります。この"
"ページでは非同期プログラミングで陥りやすい落とし穴の一覧とその回避方法につい"
"て説明しています。"

#: ../../library/asyncio-dev.rst:15
msgid "Debug mode of asyncio"
msgstr "asyncio のデバッグモード"

#: ../../library/asyncio-dev.rst:17
msgid ""
"The implementation of :mod:`asyncio` has been written for performance. In "
"order to ease the development of asynchronous code, you may wish to enable "
"*debug mode*."
msgstr ""
":mod:`asyncio` の実装では、パフォーマンスが重視されています。非同期コードの開"
"発を行いやすくするには、 *デバッグモード*  を有効にするとよいかもしれません。"

#: ../../library/asyncio-dev.rst:21
msgid "To enable all debug checks for an application:"
msgstr "アプリケーションで全てのデバッグチェックを有効にするには:"

#: ../../library/asyncio-dev.rst:23
msgid ""
"Enable the asyncio debug mode globally by setting the environment variable :"
"envvar:`PYTHONASYNCIODEBUG` to ``1``, or by calling :meth:`AbstractEventLoop."
"set_debug`."
msgstr ""
"環境変数 :envvar:`PYTHONASYNCIODEBUG` を ``1`` に設定するか、 :meth:"
"`AbstractEventLoop.set_debug` を呼び出すと、asyncio  デバッグモードがグローバ"
"ルに有効になります。"

#: ../../library/asyncio-dev.rst:25
msgid ""
"Set the log level of the :ref:`asyncio logger <asyncio-logger>` to :py:data:"
"`logging.DEBUG`. For example, call ``logging.basicConfig(level=logging."
"DEBUG)`` at startup."
msgstr ""
":ref:`asyncio logger <asyncio-logger>` のトップレベルを :py:data:`logging."
"DEBUG` に設定します。例えば、起動時に ``logging.basicConfig(level=logging."
"DEBUG)`` を呼び出します。"

#: ../../library/asyncio-dev.rst:28
msgid ""
"Configure the :mod:`warnings` module to display :exc:`ResourceWarning` "
"warnings. For example, use the ``-Wdefault`` command line option of Python "
"to display them."
msgstr ""
":mod:`warnings` モジュールを構成して、 :exc:`ResourceWarning` 警告が表示され"
"るようにします。例えば、Python の ``-Wdefault`` コマンドラインオプションを使"
"用して、それらを表示します。"

#: ../../library/asyncio-dev.rst:32
msgid "Examples debug checks:"
msgstr "デバッグチェックの例:"

#: ../../library/asyncio-dev.rst:34
msgid ""
"Log :ref:`coroutines defined but never \"yielded from\" <asyncio-coroutine-"
"not-scheduled>`"
msgstr ""
":ref:`定義されているが \"yielded from\" されなかったコルーチン <asyncio-"
"coroutine-not-scheduled>` のログを取ります"

#: ../../library/asyncio-dev.rst:36
msgid ""
":meth:`~AbstractEventLoop.call_soon` and :meth:`~AbstractEventLoop.call_at` "
"methods raise an exception if they are called from the wrong thread."
msgstr ""
"誤ったスレッドから呼ばれた場合、 :meth:`~AbstractEventLoop.call_soon` や  :"
"meth:`~AbstractEventLoop.call_at` メソッドが例外を送出します"

#: ../../library/asyncio-dev.rst:38
msgid "Log the execution time of the selector"
msgstr "セレクターの実行時間のログを取ります"

#: ../../library/asyncio-dev.rst:39
msgid ""
"Log callbacks taking more than 100 ms to be executed. The :attr:"
"`AbstractEventLoop.slow_callback_duration` attribute is the minimum duration "
"in seconds of \"slow\" callbacks."
msgstr ""
"実行時間が 100 ms を超えるコールバックのログ。:attr:`AbstractEventLoop."
"slow_callback_duration` 属性には \"遅い\" コールバックとみなす最小時間を秒で"
"指定できます。"

#: ../../library/asyncio-dev.rst:42
msgid ""
":exc:`ResourceWarning` warnings are emitted when transports and event loops "
"are :ref:`not closed explicitly <asyncio-close-transports>`."
msgstr ""
"トランスポートとイベントループが :ref:`明示的に閉じられなかった <asyncio-"
"close-transports>` 場合、 :exc:`ResourceWarning` 警告が出ます。"

#: ../../library/asyncio-dev.rst:47
msgid ""
"The :meth:`AbstractEventLoop.set_debug` method and the :ref:`asyncio logger "
"<asyncio-logger>`."
msgstr ""
":meth:`AbstractEventLoop.set_debug` メソッドならびに :ref:`asyncio logger "
"<asyncio-logger>`。"

#: ../../library/asyncio-dev.rst:52
msgid "Cancellation"
msgstr "取り消し"

#: ../../library/asyncio-dev.rst:54
msgid ""
"Cancellation of tasks is not common in classic programming. In asynchronous "
"programming, not only is it something common, but you have to prepare your "
"code to handle it."
msgstr ""
"古典的なプログラミングでは、タスクのキャンセルは一般的ではありません。非同期"
"プログラミングでは、それは一般的であるどころか、それを処理するためのコードを"
"用意する必要があります。"

#: ../../library/asyncio-dev.rst:58
msgid ""
"Futures and tasks can be cancelled explicitly with their :meth:`Future."
"cancel` method. The :func:`wait_for` function cancels the waited task when "
"the timeout occurs. There are many other cases where a task can be cancelled "
"indirectly."
msgstr ""
"Future おびタスクは、それらの :meth:`Future.cancel` メソッドを呼び出すこと"
"で、明示的にキャンセルすることができます。:func:`wait_for` 関数は、タイムアウ"
"ト発生時に、待機中のタスクをキャンセルします。タスクを間接的にキャンセルする"
"ことができる使用例は、他にも数多くあります。"

#: ../../library/asyncio-dev.rst:62
msgid ""
"Don't call :meth:`~Future.set_result` or :meth:`~Future.set_exception` "
"method of :class:`Future` if the future is cancelled: it would fail with an "
"exception. For example, write::"
msgstr ""
"Future がキャンセルされた場合、:class:`Future` の :meth:`~Future.set_result` "
"または :meth:`~Future.set_exception` メソッドは呼び出さないでください。例外を"
"送出して、失敗してしまいます。例えば、以下のように書いてください。"

#: ../../library/asyncio-dev.rst:69
msgid ""
"Don't schedule directly a call to the :meth:`~Future.set_result` or the :"
"meth:`~Future.set_exception` method of a future with :meth:"
"`AbstractEventLoop.call_soon`: the future can be cancelled before its method "
"is called."
msgstr ""
":meth:`AbstractEventLoop.call_soon` で、Future の :meth:`~Future.set_result` "
"メソッドまたは :meth:`~Future.set_exception` メソッドの呼び出しを直接スケ"
"ジュールしないでください。Future は、そのメソッドが呼び出される前にキャンセル"
"される場合があります。"

#: ../../library/asyncio-dev.rst:74
msgid ""
"If you wait for a future, you should check early if the future was cancelled "
"to avoid useless operations. Example::"
msgstr ""
"Future を待機する場合、Future がキャンセルされているかどうかを早い段階で確認"
"し、無駄な操作を防いでください。以下に例を示します。"

#: ../../library/asyncio-dev.rst:85
msgid "The :func:`shield` function can also be used to ignore cancellation."
msgstr ":func:`shield` 関数も、キャンセルを無視するために使用できます。"

#: ../../library/asyncio-dev.rst:91
msgid "Concurrency and multithreading"
msgstr "並行処理とマルチスレッド処理"

#: ../../library/asyncio-dev.rst:93
msgid ""
"An event loop runs in a thread and executes all callbacks and tasks in the "
"same thread. While a task is running in the event loop, no other task is "
"running in the same thread. But when the task uses ``yield from``, the task "
"is suspended and the event loop executes the next task."
msgstr ""
"イベントループは 1 個のスレッド内で実行し、同じスレッド内ですべてのコールバッ"
"クとタスクを実行します。1 個のタスクがイベントループ内で実行される間、他のタ"
"スクは同じスレッド内で実行されることはありません。ただし、タスクが ``yield "
"from`` を使用するとそのタスクはサスペンドされ、イベントループは次のタスクを実"
"行します。"

#: ../../library/asyncio-dev.rst:98
msgid ""
"To schedule a callback from a different thread, the :meth:`AbstractEventLoop."
"call_soon_threadsafe` method should be used. Example::"
msgstr ""
"異なるスレッドからコールバックをスケジュールする場合、 :meth:"
"`AbstractEventLoop.call_soon_threadsafe` メソッドを使用してください。例::"

#: ../../library/asyncio-dev.rst:103
msgid ""
"Most asyncio objects are not thread safe. You should only worry if you "
"access objects outside the event loop. For example, to cancel a future, "
"don't call directly its :meth:`Future.cancel` method, but::"
msgstr ""
"ほとんどの asyncio オブジェクトはスレッドセーフではありません。イベントループ"
"の外からオブジェクトにアクセスしていないかどうかだけに注意してください。例え"
"ばフューチャーをキャンセルする場合にその :meth:`Future.cancel` メソッドを直接"
"呼び出すのではなく以下のようにします::"

#: ../../library/asyncio-dev.rst:109
msgid ""
"To handle signals and to execute subprocesses, the event loop must be run in "
"the main thread."
msgstr ""
"シグナルの処理やサブプロセスの実行を行うには、イベントループはメインスレッド"
"内で実行しなければなりません。"

#: ../../library/asyncio-dev.rst:112
msgid ""
"To schedule a coroutine object from a different thread, the :func:"
"`run_coroutine_threadsafe` function should be used. It returns a :class:"
"`concurrent.futures.Future` to access the result::"
msgstr ""
"別のスレッドからコルーチンオブジェクトをスケジュールする場合は、 :func:"
"`run_coroutine_threadsafe` メソッドを使用してください。\n"
":func:`run_coroutine_threadsafe` は結果にアクセスするための :class:"
"`concurrent.futures.Future` を返します::"

#: ../../library/asyncio-dev.rst:119
msgid ""
"The :meth:`AbstractEventLoop.run_in_executor` method can be used with a "
"thread pool executor to execute a callback in different thread to not block "
"the thread of the event loop."
msgstr ""
":meth:`AbstractEventLoop.run_in_executor` メソッドをスレッドプール実行者とと"
"もに使用することで、イベントループのスレッドをブロックすることなく、別のス"
"レッド内でコールバックを実行できます。"

#: ../../library/asyncio-dev.rst:125
msgid ""
"The :ref:`Synchronization primitives <asyncio-sync>` section describes ways "
"to synchronize tasks."
msgstr ""
":ref:`同期プリミティブ <asyncio-sync>` 節にはタスクの同期法が書かれています。"

#: ../../library/asyncio-dev.rst:128
msgid ""
"The :ref:`Subprocess and threads <asyncio-subprocess-threads>` section lists "
"asyncio limitations to run subprocesses from different threads."
msgstr ""
":ref:`サブプロセスとスレッド <asyncio-subprocess-threads>` 節では別スレッドか"
"らサブプロセスを実行する際の asyncio の限界を列挙しています。"

#: ../../library/asyncio-dev.rst:137
msgid "Handle blocking functions correctly"
msgstr "ブロック関数を正しく扱う"

#: ../../library/asyncio-dev.rst:139
msgid ""
"Blocking functions should not be called directly. For example, if a function "
"blocks for 1 second, other tasks are delayed by 1 second which can have an "
"important impact on reactivity."
msgstr ""
"ブロック関数を直接呼び出してはなりません。例えば、関数が 1 秒間ブロックした場"
"合、他のタスクには 1 秒間の遅延が発生します。これは反応性において重大な影響が"
"発生します。"

#: ../../library/asyncio-dev.rst:143
msgid ""
"For networking and subprocesses, the :mod:`asyncio` module provides high-"
"level APIs like :ref:`protocols <asyncio-protocol>`."
msgstr ""
"ネットワークとサブプロセスには、:mod:`asyncio` モジュールは :ref:`プロトコル "
"<asyncio-protocol>` のような高水準 API を提供しています。"

#: ../../library/asyncio-dev.rst:146
msgid ""
"An executor can be used to run a task in a different thread or even in a "
"different process, to not block the thread of the event loop. See the :meth:"
"`AbstractEventLoop.run_in_executor` method."
msgstr ""
"実行者を使用することで、イベントループのスレッドをブロックすることなく、別の"
"スレッドや別のサブプロセスでタスクを実行できます。:meth:`AbstractEventLoop."
"run_in_executor` メソッドを参照してください。"

#: ../../library/asyncio-dev.rst:152
msgid ""
"The :ref:`Delayed calls <asyncio-delayed-calls>` section details how the "
"event loop handles time."
msgstr ""
":ref:`遅延呼び出し <asyncio-delayed-calls>` 節でイベントループで時間を扱う手"
"順の詳細を説明しています。"

#: ../../library/asyncio-dev.rst:159
msgid "Logging"
msgstr "ログ記録"

#: ../../library/asyncio-dev.rst:161
msgid ""
"The :mod:`asyncio` module logs information with the :mod:`logging` module in "
"the logger ``'asyncio'``."
msgstr ""
":mod:`asyncio` モジュールは :mod:`logging` モジュールとともにロガー "
"``'asyncio'`` の情報のログを記録します。"

#: ../../library/asyncio-dev.rst:164
msgid ""
"The default log level for the :mod:`asyncio` module is :py:data:`logging."
"INFO`. For those not wanting such verbosity from :mod:`asyncio` the log "
"level can be changed.  For example, to change the level to :py:data:`logging."
"WARNING`:"
msgstr ""
":mod:`asyncio` モジュールのデフォルトのログレベルは、 :py:data:`logging."
"INFO` です。:mod:`asyncio` にそれほどの冗長性を求めないユーザは、ログレベルを"
"変更できます。例えば、レベルを :py:data:`logging.WARNING` に変更するには、以"
"下のようにします。"

#: ../../library/asyncio-dev.rst:176
msgid "Detect coroutine objects never scheduled"
msgstr "スケジュールされなかったコルーチンオブジェクトの検出"

#: ../../library/asyncio-dev.rst:178
msgid ""
"When a coroutine function is called and its result is not passed to :func:"
"`ensure_future` or to the :meth:`AbstractEventLoop.create_task` method, the "
"execution of the coroutine object will never be scheduled which is probably "
"a bug.  :ref:`Enable the debug mode of asyncio <asyncio-debug-mode>` to :ref:"
"`log a warning <asyncio-logger>` to detect it."
msgstr ""
"コルーチン関数が呼び出されてもその結果が :func:`ensure_future` や :meth:"
"`AbstractEventLoop.create_task` メソッドに渡されない場合、そのコルーチンオブ"
"ジェクトの実行がスケジュールされることはなく、これはおそらくバグです。\n"
":ref:`asyncio のデバッグモードの有効化 <asyncio-debug-mode>` により :ref:`警"
"告のログ記録 <asyncio-logger>` を行うことでそれを検出できます。"

#: ../../library/asyncio-dev.rst:184
msgid "Example with the bug::"
msgstr "バグの例::"

#: ../../library/asyncio-dev.rst:194
msgid "Output in debug mode::"
msgstr "デバッグモードの出力::"

#: ../../library/asyncio-dev.rst:201
msgid ""
"The fix is to call the :func:`ensure_future` function or the :meth:"
"`AbstractEventLoop.create_task` method with the coroutine object."
msgstr ""
"これを修正するには、そのコルーチンオブジェクトで :func:`ensure_future` 関数"
"か :meth:`AbstractEventLoop.create_task` メソッドを呼び出します。"

#: ../../library/asyncio-dev.rst:206
msgid ":ref:`Pending task destroyed <asyncio-pending-task-destroyed>`."
msgstr ":ref:`未完のタスクの破棄 <asyncio-pending-task-destroyed>`。"

#: ../../library/asyncio-dev.rst:210
msgid "Detect exceptions never consumed"
msgstr "未処理の例外の検出"

#: ../../library/asyncio-dev.rst:212
msgid ""
"Python usually calls :func:`sys.excepthook` on unhandled exceptions. If :"
"meth:`Future.set_exception` is called, but the exception is never consumed, :"
"func:`sys.excepthook` is not called. Instead, :ref:`a log is emitted "
"<asyncio-logger>` when the future is deleted by the garbage collector, with "
"the traceback where the exception was raised."
msgstr ""
"Python は通常未処理の例外には :func:`sys.excepthook` を呼び出します。\n"
":meth:`Future.set_exception` が呼び出されたものの処理されなかった場合、 :"
"func:`sys.excepthook` が呼び出されません。\n"
"代わりに、フューチャーがガベージコレクションで削除されたとき、例外発生場所の"
"トレースバックとともに :ref:`ログが記録され <asyncio-logger>` ます。"

#: ../../library/asyncio-dev.rst:218
msgid "Example of unhandled exception::"
msgstr "未処理の例外の例::"

#: ../../library/asyncio-dev.rst:231
msgid "Output::"
msgstr "出力::"

#: ../../library/asyncio-dev.rst:244
msgid ""
":ref:`Enable the debug mode of asyncio <asyncio-debug-mode>` to get the "
"traceback where the task was created. Output in debug mode::"
msgstr ""
":ref:`asyncio のデバッグモードの有効化 <asyncio-debug-mode>` によりタスクが生"
"成したトレースバックを取得できます。デバッグモードの出力は以下のようになりま"
"す::"

#: ../../library/asyncio-dev.rst:263
msgid ""
"There are different options to fix this issue. The first option is to chain "
"the coroutine in another coroutine and use classic try/except::"
msgstr ""
"この問題を解決するには異なるオプションがあります。最初のオプションでは、別の"
"コルーチン内でコルーチンをチェーンし、古典的な try/except を使用します::"

#: ../../library/asyncio-dev.rst:278
msgid ""
"Another option is to use the :meth:`AbstractEventLoop.run_until_complete` "
"function::"
msgstr ""
":meth:`AbstractEventLoop.run_until_complete` 関数を使う別のオプション::"

#: ../../library/asyncio-dev.rst:289
msgid "The :meth:`Future.exception` method."
msgstr ":meth:`Future.exception` メソッド。"

#: ../../library/asyncio-dev.rst:293
msgid "Chain coroutines correctly"
msgstr "コルーチンを正しくチェーンする"

#: ../../library/asyncio-dev.rst:295
msgid ""
"When a coroutine function calls other coroutine functions and tasks, they "
"should be chained explicitly with ``yield from``. Otherwise, the execution "
"is not guaranteed to be sequential."
msgstr ""
"コルーチン関数が別のコルーチン関数かタスクを呼び出すとき、それらは ``yield "
"from`` で明示的にチェーンされなければなりません。そうされなかった場合、逐次的"
"に実行されることは保証されません。"

#: ../../library/asyncio-dev.rst:299
msgid ""
"Example with different bugs using :func:`asyncio.sleep` to simulate slow "
"operations::"
msgstr ""
":func:`asyncio.sleep` を使って処理速度の低下をシミュレートする異なるバグの"
"例::"

#: ../../library/asyncio-dev.rst:332
msgid "Expected output:"
msgstr "予想される出力:"

#: ../../library/asyncio-dev.rst:341
msgid "Actual output:"
msgstr "実際の出力:"

#: ../../library/asyncio-dev.rst:351
msgid ""
"The loop stopped before the ``create()`` finished, ``close()`` has been "
"called before ``write()``, whereas coroutine functions were called in this "
"order: ``create()``, ``write()``, ``close()``."
msgstr ""
"``create()`` が完了する前か、``write()`` を呼び出す前に ``close()`` が呼び出"
"されたか、その一方でコルーチン関数が ``create()``、``write()``。``close()`` "
"の順で呼び出された場合、ループは停止します。"

#: ../../library/asyncio-dev.rst:355
msgid "To fix the example, tasks must be marked with ``yield from``::"
msgstr ""
"この問題を解決するには、タスクは ``yield from`` でマークされなければなりませ"
"ん::"

#: ../../library/asyncio-dev.rst:365
msgid "Or without ``asyncio.ensure_future()``::"
msgstr "あるいは、``asyncio.ensure_future()`` を使いません::"

#: ../../library/asyncio-dev.rst:379
msgid "Pending task destroyed"
msgstr "未完のタスクの破棄"

#: ../../library/asyncio-dev.rst:381
msgid ""
"If a pending task is destroyed, the execution of its wrapped :ref:`coroutine "
"<coroutine>` did not complete. It is probably a bug and so a warning is "
"logged."
msgstr ""
"未完のタスクが破棄された場合、それがラップした :ref:`コルーチン <coroutine>` "
"は完了しません。これがおそらくバグであり、そのため警告がログに記録されます。"

#: ../../library/asyncio-dev.rst:384
msgid "Example of log:"
msgstr "ログの例:"

#: ../../library/asyncio-dev.rst:391
msgid ""
":ref:`Enable the debug mode of asyncio <asyncio-debug-mode>` to get the "
"traceback where the task was created. Example of log in debug mode:"
msgstr ""
":ref:`asyncio のデバッグモードの有効化 <asyncio-debug-mode>` をすることで、タ"
"スクが生成された場所でトレースバックを取得できます。以下はデバッグモードでロ"
"グを記録する例です。"

#: ../../library/asyncio-dev.rst:405
msgid ""
":ref:`Detect coroutine objects never scheduled <asyncio-coroutine-not-"
"scheduled>`."
msgstr ""
":ref:`スケジュールされなかったコルーチンオブジェクトの検出 <asyncio-"
"coroutine-not-scheduled>`。"

#: ../../library/asyncio-dev.rst:410
msgid "Close transports and event loops"
msgstr "トランスポートとイベントループを閉じる"

#: ../../library/asyncio-dev.rst:412
msgid ""
"When a transport is no more needed, call its ``close()`` method to release "
"resources. Event loops must also be closed explicitly."
msgstr ""
"もはやトランスポートの必要がない場合、その ``close()`` メソッドを呼び出して、"
"リソースを解放します。イベントループも、明示的に閉じなければなりません。"

#: ../../library/asyncio-dev.rst:415
msgid ""
"If a transport or an event loop is not closed explicitly, a :exc:"
"`ResourceWarning` warning will be emitted in its destructor. By default, :"
"exc:`ResourceWarning` warnings are ignored. The :ref:`Debug mode of asyncio "
"<asyncio-debug-mode>` section explains how to display them."
msgstr ""
"トランスポートまたはイベントループが明示的に閉じられない場合、デストラクタ内"
"で :exc:`ResourceWarning` 警告が送出されます。デフォルトでは、 :exc:"
"`ResourceWarning` 警告は無視されます。:ref:`asyncio のデバッグモード "
"<asyncio-debug-mode>` セクションで、それらを表示する方法を説明します。"
