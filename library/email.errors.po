# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Takanori Suzuki <takanori@takanory.net>, 2021
# tomo, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-04 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:05+0000\n"
"Last-Translator: tomo, 2021\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/email.errors.rst:2
msgid ":mod:`!email.errors`: Exception and Defect classes"
msgstr ""

#: ../../library/email.errors.rst:7
msgid "**Source code:** :source:`Lib/email/errors.py`"
msgstr "**ソースコード:** :source:`Lib/email/errors.py`"

#: ../../library/email.errors.rst:11
msgid ""
"The following exception classes are defined in the :mod:`email.errors` "
"module:"
msgstr ""
":mod:`email.errors` モジュールでは、以下の例外クラスが定義されています:"

#: ../../library/email.errors.rst:16
msgid ""
"This is the base class for all exceptions that the :mod:`email` package can "
"raise.  It is derived from the standard :exc:`Exception` class and defines "
"no additional methods."
msgstr ""
"これは :mod:`email` パッケージが送出しうるすべての例外の基底クラスです。これ"
"は標準の :exc:`Exception` クラスから派生しており、追加のメソッドは定義されて"
"いません。"

#: ../../library/email.errors.rst:23
msgid ""
"This is the base class for exceptions raised by the :class:`~email.parser."
"Parser` class.  It is derived from :exc:`MessageError`.  This class is also "
"used internally by the parser used by :mod:`~email.headerregistry`."
msgstr ""

#: ../../library/email.errors.rst:31
msgid ""
"Raised under some error conditions when parsing the :rfc:`5322` headers of a "
"message, this class is derived from :exc:`MessageParseError`.  The :meth:"
"`~email.message.EmailMessage.set_boundary` method will raise this error if "
"the content type is unknown when the method is called. :class:`~email.header."
"Header` may raise this error for certain base64 decoding errors, and when an "
"attempt is made to create a header that appears to contain an embedded "
"header (that is, there is what is supposed to be a continuation line that "
"has no leading whitespace and looks like a header)."
msgstr ""

#: ../../library/email.errors.rst:43
msgid "Deprecated and no longer used."
msgstr ""

#: ../../library/email.errors.rst:48
msgid ""
"Raised when a payload is added to a :class:`~email.message.Message` object "
"using :meth:`add_payload`, but the payload is already a scalar and the "
"message's :mailheader:`Content-Type` main type is not either :mimetype:"
"`multipart` or missing.  :exc:`MultipartConversionError` multiply inherits "
"from :exc:`MessageError` and the built-in :exc:`TypeError`."
msgstr ""
"この例外は、 :class:`~email.message.Message` オブジェクトに :meth:"
"`add_payload` メソッドでペイロードを追加したが、そのペイロードがすでにスカ"
"ラー値で、メッセージの :mailheader:`Content-Type` メインタイプが :mimetype:"
"`multipart` でないか見付からない場合に送出されます。\n"
":exc:`MultipartConversionError` は :exc:`MessageError` と組み込みの :exc:"
"`TypeError` を多重継承しています。"

#: ../../library/email.errors.rst:54
msgid ""
"Since :meth:`Message.add_payload` is deprecated, this exception is rarely "
"raised in practice.  However the exception may also be raised if the :meth:"
"`~email.message.Message.attach` method is called on an instance of a class "
"derived from :class:`~email.mime.nonmultipart.MIMENonMultipart` (e.g. :class:"
"`~email.mime.image.MIMEImage`)."
msgstr ""
":meth:`Message.add_payload` は非推奨なので、実際のところこの例外が送出される"
"ことはほとんどありません。\n"
"しかしながら、 :meth:`~email.message.Message.attach` メソッドを :class:"
"`~email.mime.nonmultipart.MIMENonMultipart` から派生したインスタンス (たとえ"
"ば :class:`~email.mime.image.MIMEImage`) に対して呼んだ場合にも送出されること"
"があります。"

#: ../../library/email.errors.rst:64
msgid ""
"Raised when an error occurs when the :mod:`~email.generator` outputs headers."
msgstr ""

#: ../../library/email.errors.rst:70
msgid ""
"This is the base class for all defects found when parsing email messages. It "
"is derived from :exc:`ValueError`."
msgstr ""

#: ../../library/email.errors.rst:75
msgid ""
"This is the base class for all defects found when parsing email headers. It "
"is derived from :exc:`MessageDefect`."
msgstr ""

#: ../../library/email.errors.rst:78
msgid ""
"Here is the list of the defects that the :class:`~email.parser.FeedParser` "
"can find while parsing messages.  Note that the defects are added to the "
"message where the problem was found, so for example, if a message nested "
"inside a :mimetype:`multipart/alternative` had a malformed header, that "
"nested message object would have a defect, but the containing messages would "
"not."
msgstr ""
"以下は :class:`~email.parser.FeedParser` がメッセージの解析中に検出する障害 "
"(defect) の一覧です。これらの障害は、問題が見つかったメッセージに追加されるた"
"め、たとえば :mimetype:`multipart/alternative` 内にあるネストしたメッセージが"
"異常なヘッダをもっていた場合には、そのネストしたメッセージが障害を持っている"
"が、その親メッセージには障害はないとみなされることに注意してください。"

#: ../../library/email.errors.rst:84
msgid ""
"All defect classes are subclassed from :class:`email.errors.MessageDefect`."
msgstr ""
"すべての障害クラスは :class:`email.errors.MessageDefect` のサブクラスです。"

#: ../../library/email.errors.rst:86
msgid ""
":class:`NoBoundaryInMultipartDefect` -- A message claimed to be a multipart, "
"but had no :mimetype:`boundary` parameter."
msgstr ""
":class:`NoBoundaryInMultipartDefect` -- メッセージが multipart だと宣言されて"
"いるのに、 :mimetype:`boundary` パラメータがありません。"

#: ../../library/email.errors.rst:89
msgid ""
":class:`StartBoundaryNotFoundDefect` -- The start boundary claimed in the :"
"mailheader:`Content-Type` header was never found."
msgstr ""
":class:`StartBoundaryNotFoundDefect` -- :mailheader:`Content-Type` ヘッダで宣"
"言された開始境界がありません。"

#: ../../library/email.errors.rst:92
msgid ""
":class:`CloseBoundaryNotFoundDefect` -- A start boundary was found, but no "
"corresponding close boundary was ever found."
msgstr ""
":class:`CloseBoundaryNotFoundDefect` -- 開始境界はあるが対応する終了境界があ"
"りません。"

#: ../../library/email.errors.rst:97
msgid ""
":class:`FirstHeaderLineIsContinuationDefect` -- The message had a "
"continuation line as its first header line."
msgstr ""
":class:`FirstHeaderLineIsContinuationDefect` -- メッセージの最初のヘッダ行が"
"継続行です。"

#: ../../library/email.errors.rst:100
msgid ""
":class:`MisplacedEnvelopeHeaderDefect` - A \"Unix From\" header was found in "
"the middle of a header block."
msgstr ""
":class:`MisplacedEnvelopeHeaderDefect` -- ヘッダブロックの途中に \"Unix "
"From\" ヘッダがあります。"

#: ../../library/email.errors.rst:103
msgid ""
":class:`MissingHeaderBodySeparatorDefect` - A line was found while parsing "
"headers that had no leading white space but contained no ':'.  Parsing "
"continues assuming that the line represents the first line of the body."
msgstr ""
":class:`MissingHeaderBodySeparatorDefect` - 先頭に空白はないが ':' がないヘッ"
"ダの解析中に行が見付かりました。その行を本体の最初の行とみなして解析を続けま"
"す。"

#: ../../library/email.errors.rst:109
msgid ""
":class:`MalformedHeaderDefect` -- A header was found that was missing a "
"colon, or was otherwise malformed."
msgstr ""
":class:`MalformedHeaderDefect` -- ヘッダにコロンがありません、あるいはそれ以"
"外の不正な形式です。"

#: ../../library/email.errors.rst:112
msgid "This defect has not been used for several Python versions."
msgstr "この欠陥が使われていないPythonバージョンがいくつかあります。"

#: ../../library/email.errors.rst:115
msgid ""
":class:`MultipartInvariantViolationDefect` -- A message claimed to be a :"
"mimetype:`multipart`, but no subparts were found.  Note that when a message "
"has this defect, its :meth:`~email.message.Message.is_multipart` method may "
"return ``False`` even though its content type claims to be :mimetype:"
"`multipart`."
msgstr ""
":class:`MultipartInvariantViolationDefect` -- メッセージが :mimetype:"
"`multipart` だと宣言されているのに、サブパートが存在しません。\n"
"メッセージがこの欠陥を持つ場合、内容の型が :mimetype:`multipart` と宣言されて"
"いても :meth:`~email.message.Message.is_multipart` メソッドは ``False`` を返"
"すことがあるので注意してください。"

#: ../../library/email.errors.rst:120
msgid ""
":class:`InvalidBase64PaddingDefect` -- When decoding a block of base64 "
"encoded bytes, the padding was not correct.  Enough padding is added to "
"perform the decode, but the resulting decoded bytes may be invalid."
msgstr ""
":class:`InvalidBase64PaddingDefect` -- 一連の base64 でエンコードされた "
"bytes をデコードしているときにパディングが誤っていました。\n"
"デコードするのに十分なパディングがなされますが、デコードされた bytes は不正か"
"もしれません。"

#: ../../library/email.errors.rst:124
msgid ""
":class:`InvalidBase64CharactersDefect` -- When decoding a block of base64 "
"encoded bytes, characters outside the base64 alphabet were encountered. The "
"characters are ignored, but the resulting decoded bytes may be invalid."
msgstr ""
":class:`InvalidBase64CharactersDefect` -- 一連の base64 でエンコードされた "
"bytes をデコードしているときに base64 アルファベット外の文字がありました。\n"
"その文字は無視されますが、デコードされた bytes は不正かもしれません。"

#: ../../library/email.errors.rst:128
msgid ""
":class:`InvalidBase64LengthDefect` -- When decoding a block of base64 "
"encoded bytes, the number of non-padding base64 characters was invalid (1 "
"more than a multiple of 4).  The encoded block was kept as-is."
msgstr ""

#: ../../library/email.errors.rst:132
msgid ""
":class:`InvalidDateDefect` -- When decoding an invalid or unparsable date "
"field. The original value is kept as-is."
msgstr ""
