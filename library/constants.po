# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Arihiro TAKASE, 2023
# Takanori Suzuki <takanori@takanory.net>, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-11 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:57+0000\n"
"Last-Translator: Takanori Suzuki <takanori@takanory.net>, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/constants.rst:4
msgid "Built-in Constants"
msgstr "組み込み定数"

#: ../../library/constants.rst:6
msgid "A small number of constants live in the built-in namespace.  They are:"
msgstr "組み込み名前空間にはいくつかの定数があります。定数の一覧:"

#: ../../library/constants.rst:10
msgid ""
"The false value of the :class:`bool` type. Assignments to ``False`` are "
"illegal and raise a :exc:`SyntaxError`."
msgstr ""
":class:`bool` 型の偽値です。``False`` への代入は不正で、:exc:`SyntaxError` を"
"送出します。"

#: ../../library/constants.rst:16
msgid ""
"The true value of the :class:`bool` type. Assignments to ``True`` are "
"illegal and raise a :exc:`SyntaxError`."
msgstr ""
":class:`bool` 型の真値です。``True`` への代入は不正で、:exc:`SyntaxError` を"
"送出します。"

#: ../../library/constants.rst:22
msgid ""
"An object frequently used to represent the absence of a value, as when "
"default arguments are not passed to a function. Assignments to ``None`` are "
"illegal and raise a :exc:`SyntaxError`. ``None`` is the sole instance of "
"the :data:`~types.NoneType` type."
msgstr ""
"関数にデフォルト引数が渡されなかったときなどに、値の非存在を表すのに頻繁に用"
"いられるオブジェクトです。``None`` への代入は不正で、:exc:`SyntaxError` を送"
"出します。``None`` が :data:`~types.NoneType` 型の唯一のインスタンスです。"

#: ../../library/constants.rst:30
msgid ""
"A special value which should be returned by the binary special methods (e."
"g. :meth:`~object.__eq__`, :meth:`~object.__lt__`, :meth:`~object.__add__`, :"
"meth:`~object.__rsub__`, etc.) to indicate that the operation is not "
"implemented with respect to the other type; may be returned by the in-place "
"binary special methods (e.g. :meth:`~object.__imul__`, :meth:`~object."
"__iand__`, etc.) for the same purpose. It should not be evaluated in a "
"boolean context. :data:`!NotImplemented` is the sole instance of the :data:"
"`types.NotImplementedType` type."
msgstr ""
"特殊な二項演算のメソッド (e.g. :meth:`~object.__eq__`, :meth:`~object."
"__lt__`, :meth:`~object.__add__`, :meth:`~object.__rsub__`, etc.) が、他の型"
"に対して演算が実装されていないことを示すために返す特殊値です。インプレースの"
"特殊な二項演算のメソッド (e.g. :meth:`~object.__imul__`, :meth:`~object."
"__iand__`, etc.) も同じ理由でこの値を返すことがあります。この処理では真偽値コ"
"ンテキストでの評価はしてはいけません。:data:`!NotImplemented` が :data:"
"`types.NotImplementedType` 型の唯一のインスタンスです。"

#: ../../library/constants.rst:40
msgid ""
"When a binary (or in-place) method returns :data:`!NotImplemented` the "
"interpreter will try the reflected operation on the other type (or some "
"other fallback, depending on the operator).  If all attempts return :data:`!"
"NotImplemented`, the interpreter will raise an appropriate exception. "
"Incorrectly returning :data:`!NotImplemented` will result in a misleading "
"error message or the :data:`!NotImplemented` value being returned to Python "
"code."
msgstr ""
"二項演算の (あるいはインプレースの) メソッドが :data:`!NotImplemented` を返し"
"た場合、インタープリタはもう一方の型で定義された対の演算で代用を試みます (あ"
"るいは演算によっては他の代替手段も試みます)。試行された演算全てが :data:`!"
"NotImplemented` を返した場合、インタープリタは適切な例外を送出します。 :data:"
"`!NotImplemented` を正しく返さないと、誤解を招きかねないエラーメッセージに"
"なったり、 :data:`!NotImplemented` が Python コードに返されるようなことになり"
"ます。"

#: ../../library/constants.rst:47
msgid "See :ref:`implementing-the-arithmetic-operations` for examples."
msgstr ""
"例として :ref:`implementing-the-arithmetic-operations` を参照してください。"

#: ../../library/constants.rst:51
msgid ""
"``NotImplementedError`` and :data:`!NotImplemented` are not interchangeable, "
"even though they have similar names and purposes. See :exc:"
"`NotImplementedError` for details on when to use it."
msgstr ""
"``NotImplementedError`` と :data:`!NotImplemented` は、似たような名前と目的を"
"持っていますが、相互に変換できません。 利用する際には、 :exc:"
"`NotImplementedError` を参照してください。"

#: ../../library/constants.rst:55
msgid ""
"Evaluating :data:`!NotImplemented` in a boolean context is deprecated. While "
"it currently evaluates as true, it will emit a :exc:`DeprecationWarning`. It "
"will raise a :exc:`TypeError` in a future version of Python."
msgstr ""
":data:`!NotImplemented` の評価は非推奨です。\n"
"現時点で真と評価されていても :exc:`DeprecationWarning` が出ます。\n"
"この警告は将来のバージョンの Python で :exc:`TypeError` を送出します。"

#: ../../library/constants.rst:64
msgid ""
"The same as the ellipsis literal \"``...``\". Special value used mostly in "
"conjunction with extended slicing syntax for user-defined container data "
"types. ``Ellipsis`` is the sole instance of the :data:`types.EllipsisType` "
"type."
msgstr ""
"Ellipsis リテラル \"``...``\" と同じです。\n"
"主に拡張スライス構文やユーザ定義のコンテナデータ型において使われる特殊な値で"
"す。``Ellipsis`` が :data:`types.EllipsisType` 型の唯一のインスタンスです。"

#: ../../library/constants.rst:71
msgid ""
"This constant is true if Python was not started with an :option:`-O` option. "
"See also the :keyword:`assert` statement."
msgstr ""
"この定数は、Python が :option:`-O` オプションを有効にして開始されたのでなけれ"
"ば真です。 :keyword:`assert` 文も参照して下さい。"

#: ../../library/constants.rst:77
msgid ""
"The names :data:`None`, :data:`False`, :data:`True` and :data:`__debug__` "
"cannot be reassigned (assignments to them, even as an attribute name, raise :"
"exc:`SyntaxError`), so they can be considered \"true\" constants."
msgstr ""
"名前 :data:`None` 、 :data:`False` 、 :data:`True` 、 :data:`__debug__` は再"
"代入できない (これらに対する代入は、たとえ属性名としてであっても :exc:"
"`SyntaxError` が送出されます) ので、これらは「真の」定数であると考えられま"
"す。"

#: ../../library/constants.rst:85
msgid "Constants added by the :mod:`site` module"
msgstr ":mod:`site` モジュールで追加される定数"

#: ../../library/constants.rst:87
msgid ""
"The :mod:`site` module (which is imported automatically during startup, "
"except if the :option:`-S` command-line option is given) adds several "
"constants to the built-in namespace.  They are useful for the interactive "
"interpreter shell and should not be used in programs."
msgstr ""
":mod:`site` モジュール (:option:`-S` コマンドラインオプションが指定されない限"
"り、スタートアップ時に自動的にインポートされます) は組み込み名前空間にいくつ"
"かの定数を追加します。それらは対話的インタープリタシェルで有用ですが、プログ"
"ラム中では使うべきではありません。"

#: ../../library/constants.rst:95
msgid ""
"Objects that when printed, print a message like \"Use quit() or Ctrl-D (i.e. "
"EOF) to exit\", and when called, raise :exc:`SystemExit` with the specified "
"exit code."
msgstr ""
"表示されたときに \"Use quit() or Ctrl-D (i.e. EOF) to exit\" のようなメッセー"
"ジを表示し、呼び出されたときには指定された終了コードを伴って :exc:"
"`SystemExit` を送出するオブジェクトです。"

#: ../../library/constants.rst:102
msgid ""
"Object that when printed, prints the message \"Type help() for interactive "
"help, or help(object) for help about object.\", and when called, acts as "
"described :func:`elsewhere <help>`."
msgstr ""

#: ../../library/constants.rst:109
msgid ""
"Objects that when printed or called, print the text of copyright or credits, "
"respectively."
msgstr ""
"表示あるいは呼び出されたときに、それぞれ著作権あるいはクレジットのテキストが"
"表示されるオブジェクトです。"

#: ../../library/constants.rst:114
msgid ""
"Object that when printed, prints the message \"Type license() to see the "
"full license text\", and when called, displays the full license text in a "
"pager-like fashion (one screen at a time)."
msgstr ""
"表示されたときに \"Type license() to see the full license text\" というメッ"
"セージを表示し、呼び出されたときには完全なライセンスのテキストをページャのよ"
"うな形式で (1画面分づつ) 表示するオブジェクトです。"

#: ../../library/constants.rst:61
msgid "..."
msgstr "..."

#: ../../library/constants.rst:61
msgid "ellipsis literal"
msgstr "ellipsisリテラル"
