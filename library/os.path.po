# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
# Tetsuo Koyama <tkoyama010@gmail.com>, 2020
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:39+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/os.path.rst:2
msgid ":mod:`os.path` --- Common pathname manipulations"
msgstr ":mod:`os.path` --- 共通のパス名操作"

#: ../../library/os.path.rst:7
msgid ""
"**Source code:** :source:`Lib/posixpath.py` (for POSIX), :source:`Lib/ntpath."
"py` (for Windows NT), and :source:`Lib/macpath.py` (for Macintosh)"
msgstr ""
"**ソースコード:** :source:`Lib/posixpath.py` (POSIX), :source:`Lib/ntpath."
"py` (Windows NT), :source:`Lib/macpath.py` (Mac)"

#: ../../library/os.path.rst:15
msgid ""
"This module implements some useful functions on pathnames. To read or write "
"files see :func:`open`, and for accessing the filesystem see the :mod:`os` "
"module. The path parameters can be passed as either strings, or bytes. "
"Applications are encouraged to represent file names as (Unicode) character "
"strings. Unfortunately, some file names may not be representable as strings "
"on Unix, so applications that need to support arbitrary file names on Unix "
"should use bytes objects to represent path names. Vice versa, using bytes "
"objects cannot represent all file names on Windows (in the standard ``mbcs`` "
"encoding), hence Windows applications should use string objects to access "
"all files."
msgstr ""
"このモジュールには、パス名を操作する便利な関数が実装されています。ファイルの"
"読み書きに関しては :func:`open` を、ファイルシステムへのアクセスに関しては :"
"mod:`os` モジュールを参照してください。パスパラメータは文字列またはバイト列で"
"渡すことができます。アプリケーションは、ファイル名を Unicode 文字列で表すこと"
"が推奨されています。残念ながら、Unix では文字列で表すことのできないファイル名"
"があるため、Unix 上で任意のファイル名をサポートする必要のあるアプリケーション"
"は、そのパス名にバイト列を使用すべきです。逆に、バイト列オブジェクトを使用す"
"ると Windows (標準の ``mbcs`` エンコーディング) 上ではすべてのファイル名を表"
"すことができないため、Windows アプリケーションはファイルアクセスのために文字"
"列オブジェクトを使用するべきです。"

#: ../../library/os.path.rst:26
msgid ""
"Unlike a unix shell, Python does not do any *automatic* path expansions. "
"Functions such as :func:`expanduser` and :func:`expandvars` can be invoked "
"explicitly when an application desires shell-like path expansion.  (See also "
"the :mod:`glob` module.)"
msgstr ""
"Unix シェルとは異なり、Python はあらゆるパス展開を *自動的には* 行いません。"
"アプリケーションがシェルのようなパス展開を必要とした場合は、 :func:"
"`expanduser` や :func:`expandvars` といった関数を明示的に呼び出すことで行えま"
"す。(:mod:`glob` モジュールも参照してください)"

#: ../../library/os.path.rst:33
msgid "The :mod:`pathlib` module offers high-level path objects."
msgstr ":mod:`pathlib` モジュールは高水準のパスオブジェクトを提供します。"

#: ../../library/os.path.rst:38
msgid ""
"All of these functions accept either only bytes or only string objects as "
"their parameters.  The result is an object of the same type, if a path or "
"file name is returned."
msgstr ""
"以下のすべての関数は、そのパラメータにバイト列のみ、あるいは文字列のみ受け付"
"けます。パスまたはファイル名を返す場合、返り値は同じ型のオブジェクトになりま"
"す。"

#: ../../library/os.path.rst:45
msgid ""
"Since different operating systems have different path name conventions, "
"there are several versions of this module in the standard library.  The :mod:"
"`os.path` module is always the path module suitable for the operating system "
"Python is running on, and therefore usable for local paths.  However, you "
"can also import and use the individual modules if you want to manipulate a "
"path that is *always* in one of the different formats.  They all have the "
"same interface:"
msgstr ""
"OS によって異なるパス名の決まりがあるため、標準ライブラリにはこのモジュールの"
"いくつかのバージョンが含まれています。 :mod:`os.path` モジュールは常に現在 "
"Python が動作している OS に適したパスモジュールであるため、ローカルのパスを扱"
"うのに適しています。各々のモジュールをインポートして *常に* 一つのフォーマッ"
"トを利用することも可能です。これらはすべて同じインタフェースを持っています:"

#: ../../library/os.path.rst:53
msgid ":mod:`posixpath` for UNIX-style paths"
msgstr ":mod:`posixpath` UNIX スタイルのパス用"

#: ../../library/os.path.rst:54
msgid ":mod:`ntpath` for Windows paths"
msgstr ":mod:`ntpath` Windows パス用"

#: ../../library/os.path.rst:55
msgid ":mod:`macpath` for old-style MacOS paths"
msgstr ":mod:`macpath` 古いスタイルの MacOS パス用"

#: ../../library/os.path.rst:60
msgid ""
"Return a normalized absolutized version of the pathname *path*. On most "
"platforms, this is equivalent to calling the function :func:`normpath` as "
"follows: ``normpath(join(os.getcwd(), path))``."
msgstr ""
"パス名 *path* の正規化された絶対パスを返します。ほとんどのプラットフォームで"
"は、これは関数 :func:`normpath` を次のように呼び出した時と等価です: "
"``normpath(join(os.getcwd(), path))``。"

#: ../../library/os.path.rst:64 ../../library/os.path.rst:77
#: ../../library/os.path.rst:116 ../../library/os.path.rst:125
#: ../../library/os.path.rst:141 ../../library/os.path.rst:151
#: ../../library/os.path.rst:177 ../../library/os.path.rst:194
#: ../../library/os.path.rst:217 ../../library/os.path.rst:229
#: ../../library/os.path.rst:238 ../../library/os.path.rst:248
#: ../../library/os.path.rst:258 ../../library/os.path.rst:268
#: ../../library/os.path.rst:278 ../../library/os.path.rst:296
#: ../../library/os.path.rst:329 ../../library/os.path.rst:341
#: ../../library/os.path.rst:350 ../../library/os.path.rst:365
#: ../../library/os.path.rst:383 ../../library/os.path.rst:396
#: ../../library/os.path.rst:412 ../../library/os.path.rst:428
#: ../../library/os.path.rst:449 ../../library/os.path.rst:460
msgid "Accepts a :term:`path-like object`."
msgstr ":term:`path-like object` を受け入れるようになりました。"

#: ../../library/os.path.rst:70
msgid ""
"Return the base name of pathname *path*.  This is the second element of the "
"pair returned by passing *path* to the function :func:`split`.  Note that "
"the result of this function is different from the Unix :program:`basename` "
"program; where :program:`basename` for ``'/foo/bar/'`` returns ``'bar'``, "
"the :func:`basename` function returns an empty string (``''``)."
msgstr ""
"パス名 *path* の末尾のファイル名部分を返します。これは関数 :func:`split` に "
"*path* を渡した時に返されるペアの 2 番めの要素です。この関数が返すのは Unix "
"の :program:`basename` とは異なります; Unix の :program:`basename` は ``'/"
"foo/bar/'`` に対して ``'bar'`` を返しますが、関数 :func:`basename` は空文字"
"列 (``''``) を返します。"

#: ../../library/os.path.rst:83
msgid ""
"Return the longest common sub-path of each pathname in the sequence "
"*paths*.  Raise ValueError if *paths* contains both absolute and relative "
"pathnames, or if *paths* is empty.  Unlike :func:`commonprefix`, this "
"returns a valid path."
msgstr ""
"シーケンス *paths* 中の各パス名に共通するサブパスのうち、最も長いものを返しま"
"す。*paths* に絶対パス名と相対パス名の両方が含まれているか、*paths* が空の場"
"合、 ValueError を送出します。:func:`commonprefix` とは異なり、有効なパスを返"
"します。"

#: ../../library/os.path.rst:88
msgid "Availability: Unix, Windows"
msgstr "利用できる環境 : Unix, Windows"

#: ../../library/os.path.rst:92
msgid "Accepts a sequence of :term:`path-like objects <path-like object>`."
msgstr ""
":term:`path-like objects <path-like object>` のシーケンスを受け入れるようにな"
"りました。"

#: ../../library/os.path.rst:98
msgid ""
"Return the longest path prefix (taken character-by-character) that is a "
"prefix of all paths in  *list*.  If *list* is empty, return the empty string "
"(``''``)."
msgstr ""
"*list* 内のすべてのパスに共通する接頭辞のうち、最も長いものを (パス名の 1 文"
"字 1 文字を判断して) 返します。*list* が空の場合、空文字列 (``''``) を返しま"
"す。"

#: ../../library/os.path.rst:104
msgid ""
"This function may return invalid paths because it works a character at a "
"time.  To obtain a valid path, see :func:`commonpath`."
msgstr ""
"この関数は一度に 1 文字ずつ処理するため、不正なパスを返す場合があります。有効"
"なパスを取得するためには、:func:`commonpath` を参照してください。"

#: ../../library/os.path.rst:122
msgid ""
"Return the directory name of pathname *path*.  This is the first element of "
"the pair returned by passing *path* to the function :func:`split`."
msgstr ""
"パス名 *path* のディレクトリ名を返します。これは関数 :func:`split` に *path* "
"を渡した時に返されるペアの 1 番めの要素です。"

#: ../../library/os.path.rst:131
msgid ""
"Return ``True`` if *path* refers to an existing path or an open file "
"descriptor.  Returns ``False`` for broken symbolic links.  On some "
"platforms, this function may return ``False`` if permission is not granted "
"to execute :func:`os.stat` on the requested file, even if the *path* "
"physically exists."
msgstr ""
"*path* が実在するパスかオープンしているファイル記述子を参照している場合 "
"``True`` を返します。壊れたシンボリックリンクについては ``False`` を返しま"
"す。一部のプラットフォームでは、たとえ *path* が物理的に存在していたとして"
"も、要求されたファイルに対する :func:`os.stat` の実行権がなければこの関数が "
"``False`` を返すことがあります。"

#: ../../library/os.path.rst:137
msgid ""
"*path* can now be an integer: ``True`` is returned if it is an  open file "
"descriptor, ``False`` otherwise."
msgstr ""
"*path* は整数でも可能になりました: それがオープンしているファイル記述子なら "
"``True`` が返り、それ以外なら ``False`` が返ります。"

#: ../../library/os.path.rst:147
msgid ""
"Return ``True`` if *path* refers to an existing path. Returns ``True`` for "
"broken symbolic links.   Equivalent to :func:`exists` on platforms lacking :"
"func:`os.lstat`."
msgstr ""
"*path* が実在するパスなら ``True`` を返します。壊れたシンボリックリンクについ"
"ては ``True`` を返します。 :func:`os.lstat` がない環境では :func:`exists` と"
"等価です。"

#: ../../library/os.path.rst:159
msgid ""
"On Unix and Windows, return the argument with an initial component of ``~`` "
"or ``~user`` replaced by that *user*'s home directory."
msgstr ""
"Unix および Windows では、与えられた引数の先頭のパス要素 ``~`` 、または "
"``~user`` を、 *user* のホームディレクトリのパスに置き換えて返します。"

#: ../../library/os.path.rst:164
msgid ""
"On Unix, an initial ``~`` is replaced by the environment variable :envvar:"
"`HOME` if it is set; otherwise the current user's home directory is looked "
"up in the password directory through the built-in module :mod:`pwd`. An "
"initial ``~user`` is looked up directly in the password directory."
msgstr ""
"Unix では、先頭の ``~`` は、環境変数 :envvar:`HOME` が設定されているならその"
"値に置き換えられます。設定されていない場合は、現在のユーザのホームディレクト"
"リをビルトインモジュール :mod:`pwd` を使ってパスワードディレクトリから探して"
"置き換えます。先頭の ``~user`` については、直接パスワードディレクトリから探し"
"ます。"

#: ../../library/os.path.rst:169
msgid ""
"On Windows, :envvar:`HOME` and :envvar:`USERPROFILE` will be used if set, "
"otherwise a combination of :envvar:`HOMEPATH` and :envvar:`HOMEDRIVE` will "
"be used.  An initial ``~user`` is handled by stripping the last directory "
"component from the created user path derived above."
msgstr ""
"Windows では、 :envvar:`HOME` と :envvar:`USERPROFILE` が設定されていればそれ"
"を使用します。設定されていない場合は、環境変数 :envvar:`HOMEPATH` と :envvar:"
"`HOMEDRIVE` の組み合わせで置き換えられます。先頭の ``~user`` は ``~`` で得ら"
"れるユーザパスの最後のディレクトリ要素を除去したものを利用します。"

#: ../../library/os.path.rst:174
msgid ""
"If the expansion fails or if the path does not begin with a tilde, the path "
"is returned unchanged."
msgstr ""
"置き換えに失敗したり、引数のパスがチルダで始まっていなかった場合は、パスをそ"
"のまま返します。"

#: ../../library/os.path.rst:186
msgid ""
"Return the argument with environment variables expanded.  Substrings of the "
"form ``$name`` or ``${name}`` are replaced by the value of environment "
"variable *name*.  Malformed variable names and references to non-existing "
"variables are left unchanged."
msgstr ""
"引数のパスの環境変数を展開して返します。引数の中の ``$name`` または ``${name}"
"`` のような形式の文字列は環境変数、 *name* の値に置き換えられます。不正な変数"
"名や存在しない変数名の場合には変換されず、そのまま返します。"

#: ../../library/os.path.rst:191
msgid ""
"On Windows, ``%name%`` expansions are supported in addition to ``$name`` and "
"``${name}``."
msgstr ""
"Windows では、 ``$name`` や ``${name}`` の形式に加えて、 ``%name%`` の形式も"
"サポートされています。"

#: ../../library/os.path.rst:200
msgid ""
"Return the time of last access of *path*.  The return value is a number "
"giving the number of seconds since the epoch (see the  :mod:`time` module).  "
"Raise :exc:`OSError` if the file does not exist or is inaccessible."
msgstr ""
"*path* に最後にアクセスした時刻を、エポック (:mod:`time` モジュールを参照) か"
"らの経過時間を示す秒数で返します。ファイルが存在しない、あるいはアクセスでき"
"なかった場合は :exc:`OSError` を送出します。"

#: ../../library/os.path.rst:204 ../../library/os.path.rst:214
msgid ""
"If :func:`os.stat_float_times` returns ``True``, the result is a floating "
"point number."
msgstr ""
":func:`os.stat_float_times` が ``True`` を返す場合、この関数の返り値は浮動小"
"数点数になります。"

#: ../../library/os.path.rst:210
msgid ""
"Return the time of last modification of *path*.  The return value is a "
"number giving the number of seconds since the epoch (see the  :mod:`time` "
"module). Raise :exc:`OSError` if the file does not exist or is inaccessible."
msgstr ""
"*path* を最後に更新した時刻を、エポック (:mod:`time` モジュールを参照) からの"
"経過時間を示す秒数で返します。ファイルが存在しない、あるいはアクセスできな"
"かった場合は :exc:`OSError` を送出します。"

#: ../../library/os.path.rst:223
msgid ""
"Return the system's ctime which, on some systems (like Unix) is the time of "
"the last metadata change, and, on others (like Windows), is the creation "
"time for *path*. The return value is a number giving the number of seconds "
"since the epoch (see the  :mod:`time` module).  Raise :exc:`OSError` if the "
"file does not exist or is inaccessible."
msgstr ""
"システムの ctime、Unix系など一部のシステムでは最後にメタデータが変更された時"
"刻、Windows などその他のシステムでは *path* の作成時刻を返します。返り値はエ"
"ポック (:mod:`time` モジュールを参照) からの経過時間を示す秒数になります。"
"ファイルが存在しない、あるいはアクセスできなかった場合は :exc:`OSError` を送"
"出します。"

#: ../../library/os.path.rst:235
msgid ""
"Return the size, in bytes, of *path*.  Raise :exc:`OSError` if the file does "
"not exist or is inaccessible."
msgstr ""
"*path* のサイズをバイト数で返します。ファイルが存在しない、あるいはアクセスで"
"きなかった場合は :exc:`OSError` を送出します。"

#: ../../library/os.path.rst:244
msgid ""
"Return ``True`` if *path* is an absolute pathname.  On Unix, that means it "
"begins with a slash, on Windows that it begins with a (back)slash after "
"chopping off a potential drive letter."
msgstr ""
"*path* が絶対パスなら ``True`` を返します。すなわち、 Unix ではスラッシュで始"
"まり、 Windows ではドライブレターに続く (バック) スラッシュで始まる場合です。"

#: ../../library/os.path.rst:254
msgid ""
"Return ``True`` if *path* is an :func:`existing <exists>` regular file. This "
"follows symbolic links, so both :func:`islink` and :func:`isfile` can be "
"true for the same path."
msgstr ""
"*path* が :func:`存在する <exists>` 一般ファイルなら ``True`` を返します。\n"
"この関数はシンボリックリンクの先を辿るので、同じパスに対して :func:`islink` "
"と :func:`isfile` の両方が真を返すことがあります。"

#: ../../library/os.path.rst:264
msgid ""
"Return ``True`` if *path* is an :func:`existing <exists>` directory.  This "
"follows symbolic links, so both :func:`islink` and :func:`isdir` can be true "
"for the same path."
msgstr ""
"*path* が :func:`存在する <exists>` ディレクトリなら ``True`` を返します。\n"
"この関数はシンボリックリンクの先を辿るので、同じパスに対して :func:`islink` "
"と :func:`isdir` の両方が真を返すことがあります。"

#: ../../library/os.path.rst:274
msgid ""
"Return ``True`` if *path* refers to an :func:`existing <exists>` directory "
"entry that is a symbolic link.  Always ``False`` if symbolic links are not "
"supported by the Python runtime."
msgstr ""
"*path* が :func:`存在する <exists>` ディレクトリを指すシンボリックリンクなら "
"``True`` を返します。\n"
"Python ランタイムがシンボリックリンクをサポートしていないプラットフォームで"
"は、常に ``False`` を返します。"

#: ../../library/os.path.rst:284
msgid ""
"Return ``True`` if pathname *path* is a :dfn:`mount point`: a point in a "
"file system where a different file system has been mounted.  On POSIX, the "
"function checks whether *path*'s parent, :file:`path/..`, is on a different "
"device than *path*, or whether :file:`path/..` and *path* point to the same "
"i-node on the same device --- this should detect mount points for all Unix "
"and POSIX variants.  On Windows, a drive letter root and a share UNC are "
"always mount points, and for any other path ``GetVolumePathName`` is called "
"to see if it is different from the input path."
msgstr ""
"パス名 *path* がマウントポイント :dfn:`mount point` (ファイルシステムの中で異"
"なるファイルシステムがマウントされているところ) なら、 ``True`` を返します。"
"POSIX では、この関数は *path* の親ディレクトリである :file:`path/..` が "
"*path* と異なるデバイス上にあるか、あるいは :file:`path/..` と *path* が同じ"
"デバイス上の同じ i-node を指しているかをチェックします --- これによって全て"
"の Unix 系システムと POSIX 標準でマウントポイントが検出できます。Windows で"
"は、ドライブレターを持つルートと共有 UNC は常にマウントポイントであり、また他"
"のパスでは、入力のパスが異なるデバイスからのものか見るために "
"``GetVolumePathName`` が呼び出されます。"

#: ../../library/os.path.rst:293
msgid "Support for detecting non-root mount points on Windows."
msgstr ""
"Windows での、ルートでないマウントポイントの検出をサポートするようになってい"
"ます。"

#: ../../library/os.path.rst:302
msgid ""
"Join one or more path components intelligently.  The return value is the "
"concatenation of *path* and any members of *\\*paths* with exactly one "
"directory separator (``os.sep``) following each non-empty part except the "
"last, meaning that the result will only end in a separator if the last part "
"is empty.  If a component is an absolute path, all previous components are "
"thrown away and joining continues from the absolute path component."
msgstr ""
"1 つあるいはそれ以上のパスの要素を賢く結合します。戻り値は *path*、ディレクト"
"リの区切り文字 (``os.sep``) を *\\*paths* の各パートの(末尾でない場合の空文字"
"列を除いて)頭に付けたもの、これらの結合になります。最後の部分が空文字列の場合"
"に限り区切り文字で終わる文字列になります。付け加える要素に絶対パスがあれば、"
"それより前の要素は全て破棄され、以降の要素を結合します。"

#: ../../library/os.path.rst:310
msgid ""
"On Windows, the drive letter is not reset when an absolute path component (e."
"g., ``r'\\foo'``) is encountered.  If a component contains a drive letter, "
"all previous components are thrown away and the drive letter is reset.  Note "
"that since there is a current directory for each drive, ``os.path.join(\"c:"
"\", \"foo\")`` represents a path relative to the current directory on drive :"
"file:`C:` (:file:`c:foo`), not :file:`c:\\\\foo`."
msgstr ""
"Windows の場合は、絶対パスの要素 (たとえば ``r'\\foo'``) が見つかった場合はド"
"ライブレターはリセットされません。要素にドライブレターが含まれていれば、それ"
"より前の要素は全て破棄され、ドライブレターがリセットされます。各ドライブに対"
"してカレントディレクトリがあるので、 ``os.path.join(\"c:\", \"foo\")`` によっ"
"て、 :file:`c:\\\\foo` ではなく、ドライブ :file:`C:` 上のカレントディレクトリ"
"からの相対パス(:file:`c:foo`) が返されることに注意してください。"

#: ../../library/os.path.rst:317
msgid "Accepts a :term:`path-like object` for *path* and *paths*."
msgstr ""
"*path* と *paths* が :term:`path-like object` を受け付けるようになりました。"

#: ../../library/os.path.rst:323
msgid ""
"Normalize the case of a pathname.  On Unix and Mac OS X, this returns the "
"path unchanged; on case-insensitive filesystems, it converts the path to "
"lowercase.  On Windows, it also converts forward slashes to backward "
"slashes. Raise a TypeError if the type of *path* is not ``str`` or ``bytes`` "
"(directly or indirectly through the :class:`os.PathLike` interface)."
msgstr ""
"パス名の大文字・小文字を正規化します。Unix および Mac OS X では変更せずに返し"
"ます。大文字と小文字を区別しないファイルシステムでは小文字に変換します。"
"Windows では、スラッシュをバックスラッシュに変換します。*path* が ``str`` あ"
"るいは ``bytes`` ではない場合、TypeError を送出します(直接的または間接的な :"
"class:`os.PathLike` インタフェース)。"

#: ../../library/os.path.rst:335
msgid ""
"Normalize a pathname by collapsing redundant separators and up-level "
"references so that ``A//B``, ``A/B/``, ``A/./B`` and ``A/foo/../B`` all "
"become ``A/B``.  This string manipulation may change the meaning of a path "
"that contains symbolic links.  On Windows, it converts forward slashes to "
"backward slashes. To normalize case, use :func:`normcase`."
msgstr ""
"パスを正規化します。余分な区切り文字や上位レベル参照を除去し、``A//B``、``A/"
"B/``、``A/./B`` や ``A/foo/../B`` などはすべて ``A/B`` になります。この文字列"
"操作は、シンボリックリンクを含むパスの意味を変えてしまう場合があります。"
"Windows では、スラッシュをバックスラッシュに変換します。大文字小文字の正規化"
"には :func:`normcase` を使用してください。"

#: ../../library/os.path.rst:347
msgid ""
"Return the canonical path of the specified filename, eliminating any "
"symbolic links encountered in the path (if they are supported by the "
"operating system)."
msgstr ""
"パスの中のシンボリックリンク (もしそれが当該オペレーティングシステムでサポー"
"トされていれば) を取り除いて、指定されたファイル名を正規化したパスを返しま"
"す。"

#: ../../library/os.path.rst:356
msgid ""
"Return a relative filepath to *path* either from the current directory or "
"from an optional *start* directory.  This is a path computation:  the "
"filesystem is not accessed to confirm the existence or nature of *path* or "
"*start*."
msgstr ""
"カレントディレクトリあるいはオプションの *start* ディレクトリからの *path* へ"
"の相対パスを返します。これはパス計算で行っており、ファイルシステムにアクセス"
"して *path* や *start* の存在や性質を確認することはありません。"

#: ../../library/os.path.rst:361
msgid "*start* defaults to :attr:`os.curdir`."
msgstr "*start* のデフォルト値は :attr:`os.curdir` です。"

#: ../../library/os.path.rst:363 ../../library/os.path.rst:375
#: ../../library/os.path.rst:391 ../../library/os.path.rst:407
msgid "Availability: Unix, Windows."
msgstr "利用できる環境 : Unix 、 Windows 。"

#: ../../library/os.path.rst:371
msgid ""
"Return ``True`` if both pathname arguments refer to the same file or "
"directory. This is determined by the device number and i-node number and "
"raises an exception if an :func:`os.stat` call on either pathname fails."
msgstr ""
"引数の両パス名が同じファイルまたはディレクトリを参照している場合、 ``True`` "
"を返します。これは、デバイス番号と i-node 番号で決定されます。どちらかのパス"
"名への :func:`os.stat` 呼び出しが失敗した場合、例外が送出されます。"

#: ../../library/os.path.rst:377 ../../library/os.path.rst:393
#: ../../library/os.path.rst:409
msgid "Added Windows support."
msgstr "Windows サポートを追加しました。"

#: ../../library/os.path.rst:380
msgid "Windows now uses the same implementation as all other platforms."
msgstr "Windows が他のプラットフォームと同じ実装を使用するようになりました。"

#: ../../library/os.path.rst:389
msgid ""
"Return ``True`` if the file descriptors *fp1* and *fp2* refer to the same "
"file."
msgstr ""
"ファイル記述子 *fp1* と *fp2* が同じファイルを参照していたら ``True`` を返し"
"ます。"

#: ../../library/os.path.rst:402
msgid ""
"Return ``True`` if the stat tuples *stat1* and *stat2* refer to the same "
"file. These structures may have been returned by :func:`os.fstat`, :func:`os."
"lstat`, or :func:`os.stat`.  This function implements the underlying "
"comparison used by :func:`samefile` and :func:`sameopenfile`."
msgstr ""
"stat タプル *stat1* と *stat2* が同じファイルを参照していれば ``True`` を返し"
"ます。これらのタプルは :func:`os.fstat` 、 :func:`os.lstat` あるいは :func:"
"`os.stat` の返り値で構いません。この関数は :func:`samefile` と :func:"
"`sameopenfile` を使用した比較に基いて実装しています。"

#: ../../library/os.path.rst:418
msgid ""
"Split the pathname *path* into a pair, ``(head, tail)`` where *tail* is the "
"last pathname component and *head* is everything leading up to that.  The "
"*tail* part will never contain a slash; if *path* ends in a slash, *tail* "
"will be empty.  If there is no slash in *path*, *head* will be empty.  If "
"*path* is empty, both *head* and *tail* are empty.  Trailing slashes are "
"stripped from *head* unless it is the root (one or more slashes only).  In "
"all cases, ``join(head, tail)`` returns a path to the same location as "
"*path* (but the strings may differ).  Also see the functions :func:`dirname` "
"and :func:`basename`."
msgstr ""
"パス名 *path* を ``(head, tail)`` のペアに分割します。 *tail* はパス名の構成"
"要素の末尾で、 *head* はそれより前の部分です。 *tail* はスラッシュを含みませ"
"ん; もし *path* がスラッシュで終わっていれば *tail* は空文字列になります。も"
"し *path* にスラッシュがなければ、 *head* は空文字になります。 *path* が空文"
"字なら、 *head* と *tail* の両方が空文字になります。 *head* の末尾のスラッ"
"シュは *head* がルートディレクトリ (または 1 個以上のスラッシュだけ) でない限"
"り取り除かれます。 ``join(head, tail)`` は常に *path* と同じ場所を返します"
"が、文字列としては異なるかもしれません。関数 :func:`dirname`, :func:"
"`basename` も参照してください。"

#: ../../library/os.path.rst:434
msgid ""
"Split the pathname *path* into a pair ``(drive, tail)`` where *drive* is "
"either a mount point or the empty string.  On systems which do not use drive "
"specifications, *drive* will always be the empty string.  In all cases, "
"``drive + tail`` will be the same as *path*."
msgstr ""
"パス名 *path* を ``(drive, tail)`` のペアに分割します。*drive* はマウントポイ"
"ントか空文字列になります。ドライブ指定をサポートしていないシステムでは、"
"*drive* は常に空文字になります。どの場合でも、``drive + tail`` は *path* と等"
"しくなります。"

#: ../../library/os.path.rst:439
msgid ""
"On Windows, splits a pathname into drive/UNC sharepoint and relative path."
msgstr ""
"Windows では、パス名はドライブ名/UNC 共有ポイントと相対パスに分割されます。"

#: ../../library/os.path.rst:441
msgid ""
"If the path contains a drive letter, drive will contain everything up to and "
"including the colon. e.g. ``splitdrive(\"c:/dir\")`` returns ``(\"c:\", \"/"
"dir\")``"
msgstr ""
"パスがドライブレターを含む場合、ドライブレターにはコロンまでが含まれます。例"
"えば、``splitdrive(\"c:/dir\")`` は ``(\"c:\", \"/dir\")`` を返します。"

#: ../../library/os.path.rst:445
msgid ""
"If the path contains a UNC path, drive will contain the host name and share, "
"up to but not including the fourth separator. e.g. ``splitdrive(\"//host/"
"computer/dir\")`` returns ``(\"//host/computer\", \"/dir\")``"
msgstr ""
"パスが UNC パスを含む場合、ドライブレターにはホスト名と共有名までが含まれます"
"が、共有名の後の区切り文字は含まれません。例えば、``splitdrive(\"//host/"
"computer/dir\")`` は ``(\"//host/computer\", \"/dir\")`` を返します。"

#: ../../library/os.path.rst:455
msgid ""
"Split the pathname *path* into a pair ``(root, ext)``  such that ``root + "
"ext == path``, and *ext* is empty or begins with a period and contains at "
"most one period. Leading periods on the basename are  ignored; ``splitext('."
"cshrc')`` returns  ``('.cshrc', '')``."
msgstr ""
"パス名 *path* を ``(root, ext)`` のペアに分割します。 ``root + ext == path`` "
"になります。 *ext* は空文字列か 1 つのピリオドで始まり、多くても 1 つのピリオ"
"ドを含みます。ベースネームを導出するピリオドは無視されます; ``splitext('."
"cshrc')`` は ``('.cshrc', '')`` を返します。"

#: ../../library/os.path.rst:466
msgid "Use *splitdrive* instead."
msgstr "代わりに *splitdrive* を使ってください。"

#: ../../library/os.path.rst:469
msgid ""
"Split the pathname *path* into a pair ``(unc, rest)`` so that *unc* is the "
"UNC mount point (such as ``r'\\\\host\\mount'``), if present, and *rest* the "
"rest of the path (such as  ``r'\\path\\file.ext'``).  For paths containing "
"drive letters, *unc* will always be the empty string."
msgstr ""
"パス名 *path* をペア ``(unc, rest)`` に分割します。ここで *unc* は (``r'\\"
"\\host\\mount'`` のような) UNC マウントポイント、そして *rest* は "
"(``r'\\path\\file.ext'`` のような) パスの残りの部分です。ドライブレターを含む"
"パスでは常に *unc* が空文字列になります。"

#: ../../library/os.path.rst:474
msgid "Availability:  Windows."
msgstr "利用できる環境: Windows。"

#: ../../library/os.path.rst:479
msgid ""
"``True`` if arbitrary Unicode strings can be used as file names (within "
"limitations imposed by the file system)."
msgstr ""
"ファイル名に任意の Unicode 文字列を (システムの制限内で) 使用できる場合は "
"``True`` になります。"
