# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Osamu NAKAMURA, 2021
# Atsuo Ishimoto <atsuoishimoto@gmail.com>, 2021
# mollinaca, 2021
# Takanori Suzuki <takanori@takanory.net>, 2021
# Arihiro TAKASE, 2023
# Masato HASHIMOTO <cabezon.hashimoto@gmail.com>, 2023
# tomo, 2023
# Takeshi Nakazato, 2024
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:10+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/os.path.rst:2
msgid ":mod:`!os.path` --- Common pathname manipulations"
msgstr ":mod:`!os.path` --- 一般的なパス名操作"

#: ../../library/os.path.rst:7
msgid ""
"**Source code:** :source:`Lib/genericpath.py`, :source:`Lib/posixpath.py` "
"(for POSIX) and :source:`Lib/ntpath.py` (for Windows)."
msgstr ""
"**ソースコード:** :source:`Lib/genericpath.py`, :source:`Lib/posixpath.py` "
"(POSIX) 、 :source:`Lib/ntpath.py` (Windows) 。"

#: ../../library/os.path.rst:14
msgid ""
"This module implements some useful functions on pathnames. To read or write "
"files see :func:`open`, and for accessing the filesystem see the :mod:`os` "
"module. The path parameters can be passed as strings, or bytes, or any "
"object implementing the :class:`os.PathLike` protocol."
msgstr ""

#: ../../library/os.path.rst:19
msgid ""
"Unlike a Unix shell, Python does not do any *automatic* path expansions. "
"Functions such as :func:`expanduser` and :func:`expandvars` can be invoked "
"explicitly when an application desires shell-like path expansion.  (See also "
"the :mod:`glob` module.)"
msgstr ""
"Unix シェルとは異なり、Python はあらゆるパス展開を *自動的には* 行いません。"
"アプリケーションがシェルのようなパス展開を必要とした場合は、 :func:"
"`expanduser` や :func:`expandvars` といった関数を明示的に呼び出すことで行えま"
"す。(:mod:`glob` モジュールも参照してください)"

#: ../../library/os.path.rst:26
msgid "The :mod:`pathlib` module offers high-level path objects."
msgstr ":mod:`pathlib` モジュールは高水準のパスオブジェクトを提供します。"

#: ../../library/os.path.rst:31
msgid ""
"All of these functions accept either only bytes or only string objects as "
"their parameters.  The result is an object of the same type, if a path or "
"file name is returned."
msgstr ""
"以下のすべての関数は、そのパラメータにバイト列のみ、あるいは文字列のみ受け付"
"けます。パスまたはファイル名を返す場合、返り値は同じ型のオブジェクトになりま"
"す。"

#: ../../library/os.path.rst:37
msgid ""
"Since different operating systems have different path name conventions, "
"there are several versions of this module in the standard library.  The :mod:"
"`os.path` module is always the path module suitable for the operating system "
"Python is running on, and therefore usable for local paths.  However, you "
"can also import and use the individual modules if you want to manipulate a "
"path that is *always* in one of the different formats.  They all have the "
"same interface:"
msgstr ""
"OS によって異なるパス名の決まりがあるため、標準ライブラリにはこのモジュールの"
"いくつかのバージョンが含まれています。 :mod:`os.path` モジュールは常に現在 "
"Python が動作している OS に適したパスモジュールであるため、ローカルのパスを扱"
"うのに適しています。各々のモジュールをインポートして *常に* 一つのフォーマッ"
"トを利用することも可能です。これらはすべて同じインターフェースを持っています:"

#: ../../library/os.path.rst:45
msgid ":mod:`posixpath` for UNIX-style paths"
msgstr ":mod:`posixpath` UNIX スタイルのパス用"

#: ../../library/os.path.rst:46
msgid ":mod:`ntpath` for Windows paths"
msgstr ":mod:`ntpath` Windows パス用"

#: ../../library/os.path.rst:51
msgid ""
":func:`exists`, :func:`lexists`, :func:`isdir`, :func:`isfile`, :func:"
"`islink`, and :func:`ismount` now return ``False`` instead of raising an "
"exception for paths that contain characters or bytes unrepresentable at the "
"OS level."
msgstr ""
":func:`exists`、 :func:`lexists`、 :func:`isdir`、 :func:`isfile`、 :func:"
"`islink`、および :func:`ismount` は、OS レベルで表現できない文字列を含む可能"
"性がある例外を送出する代わりに ``False`` を返すようになりました。"

#: ../../library/os.path.rst:59
msgid ""
"Return a normalized absolutized version of the pathname *path*. On most "
"platforms, this is equivalent to calling the function :func:`normpath` as "
"follows: ``normpath(join(os.getcwd(), path))``."
msgstr ""
"パス名 *path* の正規化された絶対パスを返します。ほとんどのプラットフォームで"
"は、これは関数 :func:`normpath` を次のように呼び出した時と等価です: "
"``normpath(join(os.getcwd(), path))``。"

#: ../../library/os.path.rst:63 ../../library/os.path.rst:76
#: ../../library/os.path.rst:117 ../../library/os.path.rst:126
#: ../../library/os.path.rst:142 ../../library/os.path.rst:152
#: ../../library/os.path.rst:178 ../../library/os.path.rst:198
#: ../../library/os.path.rst:215 ../../library/os.path.rst:227
#: ../../library/os.path.rst:236 ../../library/os.path.rst:246
#: ../../library/os.path.rst:260 ../../library/os.path.rst:270
#: ../../library/os.path.rst:289 ../../library/os.path.rst:308
#: ../../library/os.path.rst:380 ../../library/os.path.rst:400
#: ../../library/os.path.rst:423 ../../library/os.path.rst:443
#: ../../library/os.path.rst:459 ../../library/os.path.rst:470
#: ../../library/os.path.rst:484 ../../library/os.path.rst:500
#: ../../library/os.path.rst:525 ../../library/os.path.rst:589
msgid "Accepts a :term:`path-like object`."
msgstr ":term:`path-like object` を受け入れるようになりました。"

#: ../../library/os.path.rst:69
msgid ""
"Return the base name of pathname *path*.  This is the second element of the "
"pair returned by passing *path* to the function :func:`split`.  Note that "
"the result of this function is different from the Unix :program:`basename` "
"program; where :program:`basename` for ``'/foo/bar/'`` returns ``'bar'``, "
"the :func:`basename` function returns an empty string (``''``)."
msgstr ""
"パス名 *path* の末尾のファイル名部分を返します。これは関数 :func:`split` に "
"*path* を渡した時に返されるペアの 2 番めの要素です。この関数が返すのは Unix "
"の :program:`basename` とは異なります; Unix の :program:`basename` は ``'/"
"foo/bar/'`` に対して ``'bar'`` を返しますが、関数 :func:`basename` は空文字"
"列 (``''``) を返します。"

#: ../../library/os.path.rst:82
msgid ""
"Return the longest common sub-path of each pathname in the iterable "
"*paths*.  Raise :exc:`ValueError` if *paths* contain both absolute and "
"relative pathnames, if *paths* are on different drives, or if *paths* is "
"empty.  Unlike :func:`commonprefix`, this returns a valid path."
msgstr ""

#: ../../library/os.path.rst:90
msgid "Accepts a sequence of :term:`path-like objects <path-like object>`."
msgstr ""
":term:`path-like objects <path-like object>` のシーケンスを受け入れるようにな"
"りました。"

#: ../../library/os.path.rst:93
msgid "Any iterable can now be passed, rather than just sequences."
msgstr ""

#: ../../library/os.path.rst:99
msgid ""
"Return the longest path prefix (taken character-by-character) that is a "
"prefix of all paths in  *list*.  If *list* is empty, return the empty string "
"(``''``)."
msgstr ""
"*list* 内のすべてのパスに共通する接頭辞のうち、最も長いものを (パス名の 1 文"
"字 1 文字を判断して) 返します。*list* が空の場合、空文字列 (``''``) を返しま"
"す。"

#: ../../library/os.path.rst:105
msgid ""
"This function may return invalid paths because it works a character at a "
"time.  To obtain a valid path, see :func:`commonpath`."
msgstr ""
"この関数は一度に 1 文字ずつ処理するため、不正なパスを返す場合があります。有効"
"なパスを取得するためには、:func:`commonpath` を参照してください。"

#: ../../library/os.path.rst:111
msgid ""
">>> os.path.commonprefix(['/usr/lib', '/usr/local/lib'])\n"
"'/usr/l'\n"
"\n"
">>> os.path.commonpath(['/usr/lib', '/usr/local/lib'])\n"
"'/usr'"
msgstr ""

#: ../../library/os.path.rst:123
msgid ""
"Return the directory name of pathname *path*.  This is the first element of "
"the pair returned by passing *path* to the function :func:`split`."
msgstr ""
"パス名 *path* のディレクトリ名を返します。これは関数 :func:`split` に *path* "
"を渡した時に返されるペアの 1 番めの要素です。"

#: ../../library/os.path.rst:132
msgid ""
"Return ``True`` if *path* refers to an existing path or an open file "
"descriptor.  Returns ``False`` for broken symbolic links.  On some "
"platforms, this function may return ``False`` if permission is not granted "
"to execute :func:`os.stat` on the requested file, even if the *path* "
"physically exists."
msgstr ""
"*path* が実在するパスかオープンしているファイル記述子を参照している場合 "
"``True`` を返します。壊れたシンボリックリンクについては ``False`` を返しま"
"す。一部のプラットフォームでは、たとえ *path* が物理的に存在していたとして"
"も、要求されたファイルに対する :func:`os.stat` の実行権がなければこの関数が "
"``False`` を返すことがあります。"

#: ../../library/os.path.rst:138
msgid ""
"*path* can now be an integer: ``True`` is returned if it is an  open file "
"descriptor, ``False`` otherwise."
msgstr ""
"*path* は整数でも可能になりました: それがオープンしているファイル記述子なら "
"``True`` が返り、それ以外なら ``False`` が返ります。"

#: ../../library/os.path.rst:148
msgid ""
"Return ``True`` if *path* refers to an existing path, including broken "
"symbolic links.   Equivalent to :func:`exists` on platforms lacking :func:"
"`os.lstat`."
msgstr ""

#: ../../library/os.path.rst:160
msgid ""
"On Unix and Windows, return the argument with an initial component of ``~`` "
"or ``~user`` replaced by that *user*'s home directory."
msgstr ""
"Unix および Windows では、与えられた引数の先頭のパス要素 ``~`` 、または "
"``~user`` を、 *user* のホームディレクトリのパスに置き換えて返します。"

#: ../../library/os.path.rst:165
msgid ""
"On Unix, an initial ``~`` is replaced by the environment variable :envvar:"
"`HOME` if it is set; otherwise the current user's home directory is looked "
"up in the password directory through the built-in module :mod:`pwd`. An "
"initial ``~user`` is looked up directly in the password directory."
msgstr ""
"Unix では、先頭の ``~`` は、環境変数 :envvar:`HOME` が設定されているならその"
"値に置き換えられます。設定されていない場合は、現在のユーザのホームディレクト"
"リをビルトインモジュール :mod:`pwd` を使ってパスワードディレクトリから探して"
"置き換えます。先頭の ``~user`` については、直接パスワードディレクトリから探し"
"ます。"

#: ../../library/os.path.rst:170
msgid ""
"On Windows, :envvar:`USERPROFILE` will be used if set, otherwise a "
"combination of :envvar:`HOMEPATH` and :envvar:`HOMEDRIVE` will be used.  An "
"initial ``~user`` is handled by checking that the last directory component "
"of the current user's home directory matches :envvar:`USERNAME`, and "
"replacing it if so."
msgstr ""

#: ../../library/os.path.rst:175
msgid ""
"If the expansion fails or if the path does not begin with a tilde, the path "
"is returned unchanged."
msgstr ""
"置き換えに失敗したり、引数のパスがチルダで始まっていなかった場合は、パスをそ"
"のまま返します。"

#: ../../library/os.path.rst:181
msgid "No longer uses :envvar:`HOME` on Windows."
msgstr "Windowsで  :envvar:`HOME` は参照しなくなりました。"

#: ../../library/os.path.rst:190
msgid ""
"Return the argument with environment variables expanded.  Substrings of the "
"form ``$name`` or ``${name}`` are replaced by the value of environment "
"variable *name*.  Malformed variable names and references to non-existing "
"variables are left unchanged."
msgstr ""
"引数のパスの環境変数を展開して返します。引数の中の ``$name`` または ``${name}"
"`` のような形式の文字列は環境変数、 *name* の値に置き換えられます。不正な変数"
"名や存在しない変数名の場合には変換されず、そのまま返します。"

#: ../../library/os.path.rst:195
msgid ""
"On Windows, ``%name%`` expansions are supported in addition to ``$name`` and "
"``${name}``."
msgstr ""
"Windows では、 ``$name`` や ``${name}`` の形式に加えて、 ``%name%`` の形式も"
"サポートされています。"

#: ../../library/os.path.rst:204
msgid ""
"Return the time of last access of *path*.  The return value is a floating-"
"point number giving the number of seconds since the epoch (see the  :mod:"
"`time` module).  Raise :exc:`OSError` if the file does not exist or is "
"inaccessible."
msgstr ""

#: ../../library/os.path.rst:211
msgid ""
"Return the time of last modification of *path*.  The return value is a "
"floating-point number giving the number of seconds since the epoch (see "
"the  :mod:`time` module). Raise :exc:`OSError` if the file does not exist or "
"is inaccessible."
msgstr ""

#: ../../library/os.path.rst:221
msgid ""
"Return the system's ctime which, on some systems (like Unix) is the time of "
"the last metadata change, and, on others (like Windows), is the creation "
"time for *path*. The return value is a number giving the number of seconds "
"since the epoch (see the  :mod:`time` module).  Raise :exc:`OSError` if the "
"file does not exist or is inaccessible."
msgstr ""
"システムの ctime、Unix系など一部のシステムでは最後にメタデータが変更された時"
"刻、Windows などその他のシステムでは *path* の作成時刻を返します。返り値はエ"
"ポック (:mod:`time` モジュールを参照) からの経過時間を示す秒数になります。"
"ファイルが存在しない、あるいはアクセスできなかった場合は :exc:`OSError` を送"
"出します。"

#: ../../library/os.path.rst:233
msgid ""
"Return the size, in bytes, of *path*.  Raise :exc:`OSError` if the file does "
"not exist or is inaccessible."
msgstr ""
"*path* のサイズをバイト数で返します。ファイルが存在しない、あるいはアクセスで"
"きなかった場合は :exc:`OSError` を送出します。"

#: ../../library/os.path.rst:242
msgid ""
"Return ``True`` if *path* is an absolute pathname.  On Unix, that means it "
"begins with a slash, on Windows that it begins with two (back)slashes, or a "
"drive letter, colon, and (back)slash together."
msgstr ""

#: ../../library/os.path.rst:249
msgid ""
"On Windows, returns ``False`` if the given path starts with exactly one "
"(back)slash."
msgstr ""

#: ../../library/os.path.rst:256
msgid ""
"Return ``True`` if *path* is an :func:`existing <exists>` regular file. This "
"follows symbolic links, so both :func:`islink` and :func:`isfile` can be "
"true for the same path."
msgstr ""
"*path* が :func:`存在する <exists>` 一般ファイルなら ``True`` を返します。\n"
"この関数はシンボリックリンクの先を辿るので、同じパスに対して :func:`islink` "
"と :func:`isfile` の両方が真を返すことがあります。"

#: ../../library/os.path.rst:266
msgid ""
"Return ``True`` if *path* is an :func:`existing <exists>` directory.  This "
"follows symbolic links, so both :func:`islink` and :func:`isdir` can be true "
"for the same path."
msgstr ""
"*path* が :func:`存在する <exists>` ディレクトリなら ``True`` を返します。\n"
"この関数はシンボリックリンクの先を辿るので、同じパスに対して :func:`islink` "
"と :func:`isdir` の両方が真を返すことがあります。"

#: ../../library/os.path.rst:276
msgid ""
"Return ``True`` if *path* refers to an :func:`existing <lexists>` directory "
"entry that is a junction.  Always return ``False`` if junctions are not "
"supported on the current platform."
msgstr ""

#: ../../library/os.path.rst:285
msgid ""
"Return ``True`` if *path* refers to an :func:`existing <exists>` directory "
"entry that is a symbolic link.  Always ``False`` if symbolic links are not "
"supported by the Python runtime."
msgstr ""
"*path* が :func:`存在する <exists>` ディレクトリを指すシンボリックリンクなら "
"``True`` を返します。\n"
"Python ランタイムがシンボリックリンクをサポートしていないプラットフォームで"
"は、常に ``False`` を返します。"

#: ../../library/os.path.rst:295
msgid ""
"Return ``True`` if pathname *path* is a :dfn:`mount point`: a point in a "
"file system where a different file system has been mounted.  On POSIX, the "
"function checks whether *path*'s parent, :file:`{path}/..`, is on a "
"different device than *path*, or whether :file:`{path}/..` and *path* point "
"to the same i-node on the same device --- this should detect mount points "
"for all Unix and POSIX variants.  It is not able to reliably detect bind "
"mounts on the same filesystem.  On Windows, a drive letter root and a share "
"UNC are always mount points, and for any other path ``GetVolumePathName`` is "
"called to see if it is different from the input path."
msgstr ""
"パス名 *path* がマウントポイント :dfn:`mount point` (ファイルシステムの中で異"
"なるファイルシステムがマウントされているところ) なら、 ``True`` を返しま"
"す。\n"
"POSIX では、この関数は *path* の親ディレクトリである :file:`{path}/..` が "
"*path* と異なるデバイス上にあるか、あるいは :file:`{path}/..` と *path* が同"
"じデバイス上の同じ i-node を指しているかをチェックします --- これによって全て"
"の Unix 系システムと POSIX 標準でマウントポイントが検出できます。\n"
"だたし、同じファイルシステムの bind mount の信頼できる検出はできません。\n"
"Windows では、ドライブレターを持つルートと共有 UNC は常にマウントポイントであ"
"り、また他のパスでは、入力のパスが異なるデバイスからのものか見るために "
"``GetVolumePathName`` が呼び出されます。"

#: ../../library/os.path.rst:305
msgid "Added support for detecting non-root mount points on Windows."
msgstr ""

#: ../../library/os.path.rst:314
msgid ""
"Return ``True`` if pathname *path* is located on a Windows Dev Drive. A Dev "
"Drive is optimized for developer scenarios, and offers faster performance "
"for reading and writing files. It is recommended for use for source code, "
"temporary build directories, package caches, and other IO-intensive "
"operations."
msgstr ""

#: ../../library/os.path.rst:320
msgid ""
"May raise an error for an invalid path, for example, one without a "
"recognizable drive, but returns ``False`` on platforms that do not support "
"Dev Drives. See `the Windows documentation <https://learn.microsoft.com/"
"windows/dev-drive/>`_ for information on enabling and creating Dev Drives."
msgstr ""

#: ../../library/os.path.rst:327
msgid ""
"The function is now available on all platforms, and will always return "
"``False`` on those that have no support for Dev Drives"
msgstr ""

#: ../../library/os.path.rst:333
msgid "Return ``True`` if *path* is a reserved pathname on the current system."
msgstr ""

#: ../../library/os.path.rst:335
msgid ""
"On Windows, reserved filenames include those that end with a space or dot; "
"those that contain colons (i.e. file streams such as \"name:stream\"), "
"wildcard characters (i.e. ``'*?\"<>'``), pipe, or ASCII control characters; "
"as well as DOS device names such as \"NUL\", \"CON\", \"CONIN$\", \"CONOUT$"
"\", \"AUX\", \"PRN\", \"COM1\", and \"LPT1\"."
msgstr ""

#: ../../library/os.path.rst:343
msgid ""
"This function approximates rules for reserved paths on most Windows systems. "
"These rules change over time in various Windows releases. This function may "
"be updated in future Python releases as changes to the rules become broadly "
"available."
msgstr ""

#: ../../library/os.path.rst:348
msgid ":ref:`Availability <availability>`: Windows."
msgstr ":ref:`利用可能な環境 <availability>`: Windows 。"

#: ../../library/os.path.rst:355
msgid ""
"Join one or more path segments intelligently.  The return value is the "
"concatenation of *path* and all members of *\\*paths*, with exactly one "
"directory separator following each non-empty part, except the last. That is, "
"the result will only end in a separator if the last part is either empty or "
"ends in a separator. If a segment is an absolute path (which on Windows "
"requires both a drive and a root), then all previous segments are ignored "
"and joining continues from the absolute path segment."
msgstr ""

#: ../../library/os.path.rst:363
msgid ""
"On Windows, the drive is not reset when a rooted path segment (e.g., "
"``r'\\foo'``) is encountered. If a segment is on a different drive or is an "
"absolute path, all previous segments are ignored and the drive is reset. "
"Note that since there is a current directory for each drive, ``os.path."
"join(\"c:\", \"foo\")`` represents a path relative to the current directory "
"on drive :file:`C:` (:file:`c:foo`), not :file:`c:\\\\foo`."
msgstr ""

#: ../../library/os.path.rst:370
msgid "Accepts a :term:`path-like object` for *path* and *paths*."
msgstr ""
"*path* と *paths* が :term:`path-like object` を受け付けるようになりました。"

#: ../../library/os.path.rst:376
msgid ""
"Normalize the case of a pathname.  On Windows, convert all characters in the "
"pathname to lowercase, and also convert forward slashes to backward slashes. "
"On other operating systems, return the path unchanged."
msgstr ""
"パス名の大文字・小文字を正規化します。\n"
"Windowsでは、パス名にある文字を全て小文字に、スラッシュをバックスラッシュに変"
"換します。\n"
"他のオペレーティングシステムでは、パスを変更せずに返します。"

#: ../../library/os.path.rst:386
msgid ""
"Normalize a pathname by collapsing redundant separators and up-level "
"references so that ``A//B``, ``A/B/``, ``A/./B`` and ``A/foo/../B`` all "
"become ``A/B``.  This string manipulation may change the meaning of a path "
"that contains symbolic links.  On Windows, it converts forward slashes to "
"backward slashes. To normalize case, use :func:`normcase`."
msgstr ""
"パスを正規化します。余分な区切り文字や上位レベル参照を除去し、``A//B``、``A/"
"B/``、``A/./B`` や ``A/foo/../B`` などはすべて ``A/B`` になります。この文字列"
"操作は、シンボリックリンクを含むパスの意味を変えてしまう場合があります。"
"Windows では、スラッシュをバックスラッシュに変換します。大文字小文字の正規化"
"には :func:`normcase` を使用してください。"

#: ../../library/os.path.rst:393
msgid ""
"On POSIX systems, in accordance with `IEEE Std 1003.1 2013 Edition; 4.13 "
"Pathname Resolution <https://pubs.opengroup.org/onlinepubs/9699919799/"
"basedefs/V1_chap04.html#tag_04_13>`_, if a pathname begins with exactly two "
"slashes, the first component following the leading characters may be "
"interpreted in an implementation-defined manner, although more than two "
"leading characters shall be treated as a single character."
msgstr ""

#: ../../library/os.path.rst:406
msgid ""
"Return the canonical path of the specified filename, eliminating any "
"symbolic links encountered in the path (if they are supported by the "
"operating system). On Windows, this function will also resolve MS-DOS (also "
"called 8.3) style names such as ``C:\\\\PROGRA~1`` to ``C:\\\\Program "
"Files``."
msgstr ""

#: ../../library/os.path.rst:411
msgid ""
"If a path doesn't exist or a symlink loop is encountered, and *strict* is "
"``True``, :exc:`OSError` is raised. If *strict* is ``False`` these errors "
"are ignored, and so the result might be missing or otherwise inaccessible."
msgstr ""

#: ../../library/os.path.rst:416
msgid ""
"This function emulates the operating system's procedure for making a path "
"canonical, which differs slightly between Windows and UNIX with respect to "
"how links and subsequent path components interact."
msgstr ""

#: ../../library/os.path.rst:420
msgid ""
"Operating system APIs make paths canonical as needed, so it's not normally "
"necessary to call this function."
msgstr ""

#: ../../library/os.path.rst:426
msgid "Symbolic links and junctions are now resolved on Windows."
msgstr ""
"Windows においてシンボリックリンクとジャンクションが解決されるようになりまし"
"た。"

#: ../../library/os.path.rst:429
msgid "The *strict* parameter was added."
msgstr "*strict* 引数が追加されました。"

#: ../../library/os.path.rst:435
msgid ""
"Return a relative filepath to *path* either from the current directory or "
"from an optional *start* directory.  This is a path computation:  the "
"filesystem is not accessed to confirm the existence or nature of *path* or "
"*start*.  On Windows, :exc:`ValueError` is raised when *path* and *start* "
"are on different drives."
msgstr ""
"カレントディレクトリあるいはオプションの *start* ディレクトリからの *path* へ"
"の相対パスを返します。これはパス計算で行っており、ファイルシステムにアクセス"
"して *path* や *start* の存在や性質を確認することはありません。Windowsでは、 "
"*path* と *start* が異なるドライブの場合、 :exc:`ValueError` を送出します。"

#: ../../library/os.path.rst:441
msgid "*start* defaults to :data:`os.curdir`."
msgstr ""

#: ../../library/os.path.rst:449
msgid ""
"Return ``True`` if both pathname arguments refer to the same file or "
"directory. This is determined by the device number and i-node number and "
"raises an exception if an :func:`os.stat` call on either pathname fails."
msgstr ""
"引数の両パス名が同じファイルまたはディレクトリを参照している場合、 ``True`` "
"を返します。これは、デバイス番号と i-node 番号で決定されます。どちらかのパス"
"名への :func:`os.stat` 呼び出しが失敗した場合、例外が送出されます。"

#: ../../library/os.path.rst:453 ../../library/os.path.rst:467
#: ../../library/os.path.rst:481
msgid "Added Windows support."
msgstr "Windows サポートを追加しました。"

#: ../../library/os.path.rst:456
msgid "Windows now uses the same implementation as all other platforms."
msgstr "Windows が他のプラットフォームと同じ実装を使用するようになりました。"

#: ../../library/os.path.rst:465
msgid ""
"Return ``True`` if the file descriptors *fp1* and *fp2* refer to the same "
"file."
msgstr ""
"ファイル記述子 *fp1* と *fp2* が同じファイルを参照していたら ``True`` を返し"
"ます。"

#: ../../library/os.path.rst:476
msgid ""
"Return ``True`` if the stat tuples *stat1* and *stat2* refer to the same "
"file. These structures may have been returned by :func:`os.fstat`, :func:`os."
"lstat`, or :func:`os.stat`.  This function implements the underlying "
"comparison used by :func:`samefile` and :func:`sameopenfile`."
msgstr ""
"stat タプル *stat1* と *stat2* が同じファイルを参照していれば ``True`` を返し"
"ます。これらのタプルは :func:`os.fstat` 、 :func:`os.lstat` あるいは :func:"
"`os.stat` の返り値で構いません。この関数は :func:`samefile` と :func:"
"`sameopenfile` を使用した比較に基いて実装しています。"

#: ../../library/os.path.rst:490
msgid ""
"Split the pathname *path* into a pair, ``(head, tail)`` where *tail* is the "
"last pathname component and *head* is everything leading up to that.  The "
"*tail* part will never contain a slash; if *path* ends in a slash, *tail* "
"will be empty.  If there is no slash in *path*, *head* will be empty.  If "
"*path* is empty, both *head* and *tail* are empty.  Trailing slashes are "
"stripped from *head* unless it is the root (one or more slashes only).  In "
"all cases, ``join(head, tail)`` returns a path to the same location as "
"*path* (but the strings may differ).  Also see the functions :func:`dirname` "
"and :func:`basename`."
msgstr ""
"パス名 *path* を ``(head, tail)`` のペアに分割します。 *tail* はパス名の構成"
"要素の末尾で、 *head* はそれより前の部分です。 *tail* はスラッシュを含みませ"
"ん; もし *path* がスラッシュで終わっていれば *tail* は空文字列になります。も"
"し *path* にスラッシュがなければ、 *head* は空文字になります。 *path* が空文"
"字なら、 *head* と *tail* の両方が空文字になります。 *head* の末尾のスラッ"
"シュは *head* がルートディレクトリ (または 1 個以上のスラッシュだけ) でない限"
"り取り除かれます。 ``join(head, tail)`` は常に *path* と同じ場所を返します"
"が、文字列としては異なるかもしれません。関数 :func:`dirname`, :func:"
"`basename` も参照してください。"

#: ../../library/os.path.rst:506
msgid ""
"Split the pathname *path* into a pair ``(drive, tail)`` where *drive* is "
"either a mount point or the empty string.  On systems which do not use drive "
"specifications, *drive* will always be the empty string.  In all cases, "
"``drive + tail`` will be the same as *path*."
msgstr ""
"パス名 *path* を ``(drive, tail)`` のペアに分割します。*drive* はマウントポイ"
"ントか空文字列になります。ドライブ指定をサポートしていないシステムでは、"
"*drive* は常に空文字になります。どの場合でも、``drive + tail`` は *path* と等"
"しくなります。"

#: ../../library/os.path.rst:511
msgid ""
"On Windows, splits a pathname into drive/UNC sharepoint and relative path."
msgstr ""
"Windows では、パス名はドライブ名/UNC 共有ポイントと相対パスに分割されます。"

#: ../../library/os.path.rst:513
msgid ""
"If the path contains a drive letter, drive will contain everything up to and "
"including the colon::"
msgstr ""
"パスがドライブレターを含む場合、ドライブレターにはコロンまでが含まれます::"

#: ../../library/os.path.rst:516
msgid ""
">>> splitdrive(\"c:/dir\")\n"
"(\"c:\", \"/dir\")"
msgstr ""

#: ../../library/os.path.rst:519
msgid ""
"If the path contains a UNC path, drive will contain the host name and share::"
msgstr ""

#: ../../library/os.path.rst:522
msgid ""
">>> splitdrive(\"//host/computer/dir\")\n"
"(\"//host/computer\", \"/dir\")"
msgstr ""

#: ../../library/os.path.rst:531
msgid ""
"Split the pathname *path* into a 3-item tuple ``(drive, root, tail)`` where "
"*drive* is a device name or mount point, *root* is a string of separators "
"after the drive, and *tail* is everything after the root. Any of these items "
"may be the empty string. In all cases, ``drive + root + tail`` will be the "
"same as *path*."
msgstr ""

#: ../../library/os.path.rst:537
msgid ""
"On POSIX systems, *drive* is always empty. The *root* may be empty (if "
"*path* is relative), a single forward slash (if *path* is absolute), or two "
"forward slashes (implementation-defined per `IEEE Std 1003.1-2017; 4.13 "
"Pathname Resolution <https://pubs.opengroup.org/onlinepubs/9699919799/"
"basedefs/V1_chap04.html#tag_04_13>`_.) For example::"
msgstr ""

#: ../../library/os.path.rst:543
msgid ""
">>> splitroot('/home/sam')\n"
"('', '/', 'home/sam')\n"
">>> splitroot('//home/sam')\n"
"('', '//', 'home/sam')\n"
">>> splitroot('///home/sam')\n"
"('', '/', '//home/sam')"
msgstr ""

#: ../../library/os.path.rst:550
msgid ""
"On Windows, *drive* may be empty, a drive-letter name, a UNC share, or a "
"device name. The *root* may be empty, a forward slash, or a backward slash. "
"For example::"
msgstr ""

#: ../../library/os.path.rst:554
msgid ""
">>> splitroot('C:/Users/Sam')\n"
"('C:', '/', 'Users/Sam')\n"
">>> splitroot('//Server/Share/Users/Sam')\n"
"('//Server/Share', '/', 'Users/Sam')"
msgstr ""

#: ../../library/os.path.rst:564
msgid ""
"Split the pathname *path* into a pair ``(root, ext)``  such that ``root + "
"ext == path``, and the extension, *ext*, is empty or begins with a period "
"and contains at most one period."
msgstr ""

#: ../../library/os.path.rst:568
msgid "If the path contains no extension, *ext* will be ``''``::"
msgstr ""

#: ../../library/os.path.rst:570
msgid ""
">>> splitext('bar')\n"
"('bar', '')"
msgstr ""

#: ../../library/os.path.rst:573
msgid ""
"If the path contains an extension, then *ext* will be set to this extension, "
"including the leading period. Note that previous periods will be ignored::"
msgstr ""

#: ../../library/os.path.rst:576
msgid ""
">>> splitext('foo.bar.exe')\n"
"('foo.bar', '.exe')\n"
">>> splitext('/foo/bar.exe')\n"
"('/foo/bar', '.exe')"
msgstr ""

#: ../../library/os.path.rst:581
msgid ""
"Leading periods of the last component of the path are considered to be part "
"of the root::"
msgstr ""

#: ../../library/os.path.rst:584
msgid ""
">>> splitext('.cshrc')\n"
"('.cshrc', '')\n"
">>> splitext('/foo/....jpg')\n"
"('/foo/....jpg', '')"
msgstr ""

#: ../../library/os.path.rst:595
msgid ""
"``True`` if arbitrary Unicode strings can be used as file names (within "
"limitations imposed by the file system)."
msgstr ""
"ファイル名に任意の Unicode 文字列を (システムの制限内で) 使用できる場合は "
"``True`` になります。"

#: ../../library/os.path.rst:10
msgid "path"
msgstr "パス"

#: ../../library/os.path.rst:10
msgid "operations"
msgstr "操作"

#: ../../library/os.path.rst:156
msgid "~ (tilde)"
msgstr "~ (チルダ)"

#: ../../library/os.path.rst:156
msgid "home directory expansion"
msgstr ""

#: ../../library/os.path.rst:163
msgid "module"
msgstr "module"

#: ../../library/os.path.rst:163
msgid "pwd"
msgstr "pwd"

#: ../../library/os.path.rst:184
msgid "$ (dollar)"
msgstr ""

#: ../../library/os.path.rst:184
msgid "environment variables expansion"
msgstr ""

#: ../../library/os.path.rst:184
msgid "% (percent)"
msgstr "% (パーセント)"

#: ../../library/os.path.rst:184
msgid "environment variables expansion (Windows)"
msgstr ""
