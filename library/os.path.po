# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2015-2016
# 秘湯 <xwhhsprings@gmail.com>, 2016
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/os.path.rst:2
msgid ":mod:`os.path` --- Common pathname manipulations"
msgstr ":mod:`os.path` --- 共通のパス名操作"

#: ../../library/os.path.rst:9
msgid ""
"This module implements some useful functions on pathnames. To read or write "
"files see :func:`open`, and for accessing the filesystem see the :mod:`os` "
"module."
msgstr ""
"このモジュールには、パス名を操作する便利な関数が定義されています。ファイルの"
"読み書きに関しては、 :func:`open` 、ファイルシステムへのアクセスに関して"
"は、 :mod:`os` モジュールを参照下さい。"

#: ../../library/os.path.rst:15
msgid ""
"On Windows, many of these functions do not properly support UNC pathnames. :"
"func:`splitunc` and :func:`ismount` do handle them correctly."
msgstr ""
"これらの関数の多くは Windows の一律命名規則 (UNC パス名 ) を正しくサポートし"
"ていません。 :func:`splitunc` と :func:`ismount` は正しく UNC パス名を操作で"
"きます。"

#: ../../library/os.path.rst:19
msgid ""
"Unlike a unix shell, Python does not do any *automatic* path expansions. "
"Functions such as :func:`expanduser` and :func:`expandvars` can be invoked "
"explicitly when an application desires shell-like path expansion.  (See also "
"the :mod:`glob` module.)"
msgstr ""
"Unix シェルとは異なり、Python はあらゆるパス展開を *自動的には* 行いません。"
"アプリケーションがシェルのようなパス展開を必要とした場合は、 :func:"
"`expanduser` や :func:`expandvars` といった関数を明示的に呼び出すことで行えま"
"す。(:mod:`glob` モジュールも参照してください)"

#: ../../library/os.path.rst:26
msgid ""
"Since different operating systems have different path name conventions, "
"there are several versions of this module in the standard library.  The :mod:"
"`os.path` module is always the path module suitable for the operating system "
"Python is running on, and therefore usable for local paths.  However, you "
"can also import and use the individual modules if you want to manipulate a "
"path that is *always* in one of the different formats.  They all have the "
"same interface:"
msgstr ""
"OS によって異なるパス名の決まりがあるため、標準ライブラリにはこのモジュールの"
"いくつかのバージョンが含まれています。 :mod:`os.path` モジュールは常に現在 "
"Python が動作している OS に適したパスモジュールであるため、ローカルのパスを扱"
"うのに適しています。各々のモジュールをインポートして *常に* 一つのフォーマッ"
"トを利用することも可能です。これらはすべて同じインタフェースを持っています:"

#: ../../library/os.path.rst:34
msgid ":mod:`posixpath` for UNIX-style paths"
msgstr ":mod:`posixpath` UNIX スタイルのパス用"

#: ../../library/os.path.rst:35
msgid ":mod:`ntpath` for Windows paths"
msgstr ":mod:`ntpath` Windows パス用"

#: ../../library/os.path.rst:36
msgid ":mod:`macpath` for old-style MacOS paths"
msgstr ":mod:`macpath` 古いスタイルの MacOS パス用"

#: ../../library/os.path.rst:37
msgid ":mod:`os2emxpath` for OS/2 EMX paths"
msgstr ":mod:`os2emxpath` OS/2 EMX パス用"

#: ../../library/os.path.rst:42
msgid ""
"Return a normalized absolutized version of the pathname *path*. On most "
"platforms, this is equivalent to calling the function :func:`normpath` as "
"follows: ``normpath(join(os.getcwd(), path))``."
msgstr ""
"パス名 *path* の正規化された絶対パスを返します。ほとんどのプラットフォームで"
"は、これは関数 :func:`normpath` を次のように呼び出した時と等価です: "
"``normpath(join(os.getcwd(), path))``。"

#: ../../library/os.path.rst:51
msgid ""
"Return the base name of pathname *path*.  This is the second element of the "
"pair returned by passing *path* to the function :func:`split`.  Note that "
"the result of this function is different from the Unix :program:`basename` "
"program; where :program:`basename` for ``'/foo/bar/'`` returns ``'bar'``, "
"the :func:`basename` function returns an empty string (``''``)."
msgstr ""
"パス名 *path* の末尾のファイル名部分を返します。これは関数 :func:`split` に "
"*path* を渡した時に返されるペアの 2 番めの要素です。この関数が返すのは Unix "
"の :program:`basename` とは異なります; Unix の :program:`basename` は ``'/"
"foo/bar/'`` に対して ``'bar'`` を返しますが、関数 :func:`basename` は空文字"
"列 (``''``) を返します。"

#: ../../library/os.path.rst:61
msgid ""
"Return the longest path prefix (taken character-by-character) that is a "
"prefix of all paths in  *list*.  If *list* is empty, return the empty string "
"(``''``). Note that this may return invalid paths because it works a "
"character at a time."
msgstr ""
"パスの *list* の中に共通する最長の接頭辞を (パス名の 1 文字 1 文字を判断し"
"て) 返します。もし *list* が空なら、空文字列 (``''``) を返します。これは一度"
"に 1 文字を扱うため、不正なパスを返すことがあるかもしれないので注意して下さ"
"い。"

#: ../../library/os.path.rst:68
msgid ""
"Return the directory name of pathname *path*.  This is the first element of "
"the pair returned by passing *path* to the function :func:`split`."
msgstr ""
"パス名 *path* のディレクトリ名を返します。これは関数 :func:`split` に *path* "
"を渡した時に返されるペアの 1 番めの要素です。"

#: ../../library/os.path.rst:74
msgid ""
"Return ``True`` if *path* refers to an existing path.  Returns ``False`` for "
"broken symbolic links. On some platforms, this function may return ``False`` "
"if permission is not granted to execute :func:`os.stat` on the requested "
"file, even if the *path* physically exists."
msgstr ""
"*path* が存在するなら、 ``True`` を返します。壊れたシンボリックリンクについて"
"は ``False`` を返します。いくつかのプラットフォームでは、たとえ *path* が物理"
"的に存在していたとしても、リクエストされたファイルに対する :func:`os.stat` の"
"実行が許可されなければこの関数が ``False`` を返すことがあります。"

#: ../../library/os.path.rst:82
msgid ""
"Return ``True`` if *path* refers to an existing path. Returns ``True`` for "
"broken symbolic links.   Equivalent to :func:`exists` on platforms lacking :"
"func:`os.lstat`."
msgstr ""
"*path* が実在するパスなら ``True`` を返します。壊れたシンボリックリンクについ"
"ては ``True`` を返します。 :func:`os.lstat` がない環境では :func:`exists` と"
"等価です。"

#: ../../library/os.path.rst:91
msgid ""
"On Unix and Windows, return the argument with an initial component of ``~`` "
"or ``~user`` replaced by that *user*'s home directory."
msgstr ""
"Unix および Windows では、与えられた引数の先頭のパス要素 ``~`` 、または "
"``~user`` を、 *user* のホームディレクトリのパスに置き換えて返します。"

#: ../../library/os.path.rst:96
msgid ""
"On Unix, an initial ``~`` is replaced by the environment variable :envvar:"
"`HOME` if it is set; otherwise the current user's home directory is looked "
"up in the password directory through the built-in module :mod:`pwd`. An "
"initial ``~user`` is looked up directly in the password directory."
msgstr ""
"Unix では、先頭の ``~`` は、環境変数 :envvar:`HOME` が設定されているならその"
"値に置き換えられます。設定されていない場合は、現在のユーザのホームディレクト"
"リをビルトインモジュール :mod:`pwd` を使ってパスワードディレクトリから探して"
"置き換えます。先頭の ``~user`` については、直接パスワードディレクトリから探し"
"ます。"

#: ../../library/os.path.rst:101
msgid ""
"On Windows, :envvar:`HOME` and :envvar:`USERPROFILE` will be used if set, "
"otherwise a combination of :envvar:`HOMEPATH` and :envvar:`HOMEDRIVE` will "
"be used.  An initial ``~user`` is handled by stripping the last directory "
"component from the created user path derived above."
msgstr ""
"Windows では、 :envvar:`HOME` と :envvar:`USERPROFILE` が設定されていればそれ"
"を使用します。設定されていない場合は、環境変数 :envvar:`HOMEPATH` と :envvar:"
"`HOMEDRIVE` の組み合わせで置き換えられます。先頭の ``~user`` は ``~`` で得ら"
"れるユーザパスの最後のディレクトリ要素を除去したものを利用します。"

#: ../../library/os.path.rst:106
msgid ""
"If the expansion fails or if the path does not begin with a tilde, the path "
"is returned unchanged."
msgstr ""
"置き換えに失敗したり、引数のパスがチルダで始まっていなかった場合は、パスをそ"
"のまま返します。"

#: ../../library/os.path.rst:112
msgid ""
"Return the argument with environment variables expanded.  Substrings of the "
"form ``$name`` or ``${name}`` are replaced by the value of environment "
"variable *name*.  Malformed variable names and references to non-existing "
"variables are left unchanged."
msgstr ""
"引数のパスの環境変数を展開して返します。引数の中の ``$name`` または ``${name}"
"`` のような形式の文字列は環境変数、 *name* の値に置き換えられます。不正な変数"
"名や存在しない変数名の場合には変換されず、そのまま返します。"

#: ../../library/os.path.rst:117
msgid ""
"On Windows, ``%name%`` expansions are supported in addition to ``$name`` and "
"``${name}``."
msgstr ""
"Windows では、 ``$name`` や ``${name}`` の形式に加えて、 ``%name%`` の形式も"
"サポートされています。"

#: ../../library/os.path.rst:123
msgid ""
"Return the time of last access of *path*.  The return value is a number "
"giving the number of seconds since the epoch (see the  :mod:`time` module).  "
"Raise :exc:`os.error` if the file does not exist or is inaccessible."
msgstr ""
"*path* に最後にアクセスした時刻を、エポック (:mod:`time` モジュールを参照下さ"
"い ) からの経過時間を示す秒数で返します。ファイルが存在しなかったりアクセスで"
"きない場合は :exc:`os.error` を送出します。"

#: ../../library/os.path.rst:129 ../../library/os.path.rst:142
msgid ""
"If :func:`os.stat_float_times` returns ``True``, the result is a floating "
"point number."
msgstr ""
":func:`os.stat_float_times` が ``True`` を返す場合、この関数の返り値は浮動小"
"数点数になります。"

#: ../../library/os.path.rst:136
msgid ""
"Return the time of last modification of *path*.  The return value is a "
"number giving the number of seconds since the epoch (see the  :mod:`time` "
"module). Raise :exc:`os.error` if the file does not exist or is inaccessible."
msgstr ""
"*path* の最終更新時刻を、エポック (:mod:`time` モジュールを参照下さい ) から"
"の経過時間を示す秒数で返します。ファイルが存在しなかったりアクセスできない場"
"合は :exc:`os.error` を送出します。"

#: ../../library/os.path.rst:149
msgid ""
"Return the system's ctime which, on some systems (like Unix) is the time of "
"the last metadata change, and, on others (like Windows), is the creation "
"time for *path*. The return value is a number giving the number of seconds "
"since the epoch (see the  :mod:`time` module).  Raise :exc:`os.error` if the "
"file does not exist or is inaccessible."
msgstr ""
"システムの ctime、Unix系など一部のシステムでは最後にメタデータが変更された時"
"刻、Windows などその他のシステムでは *path* の作成時刻を返します。返り値はエ"
"ポック (:mod:`time` モジュールを参照) からの経過時間を示す秒数になります。"
"ファイルが存在しない、あるいはアクセスできなかった場合は :exc:`os.error` を送"
"出します。"

#: ../../library/os.path.rst:160
msgid ""
"Return the size, in bytes, of *path*.  Raise :exc:`os.error` if the file "
"does not exist or is inaccessible."
msgstr ""
"ファイル *path* のサイズをバイト数で返します。ファイルが存在しなかったりアク"
"セスできない場合は :exc:`os.error` を送出します。"

#: ../../library/os.path.rst:168
msgid ""
"Return ``True`` if *path* is an absolute pathname.  On Unix, that means it "
"begins with a slash, on Windows that it begins with a (back)slash after "
"chopping off a potential drive letter."
msgstr ""
"*path* が絶対パスなら ``True`` を返します。すなわち、 Unix ではスラッシュで始"
"まり、 Windows ではドライブレターに続く (バック) スラッシュで始まる場合です。"

#: ../../library/os.path.rst:175
msgid ""
"Return ``True`` if *path* is an existing regular file.  This follows "
"symbolic links, so both :func:`islink` and :func:`isfile` can be true for "
"the same path."
msgstr ""
"*path* が実在する一般ファイルなら ``True`` を返します。シンボリックリンクの場"
"合にはその実体をチェックするので、同じパスに対して :func:`islink` と :func:"
"`isfile` の両方が *True* を返すことがあります。"

#: ../../library/os.path.rst:181
msgid ""
"Return ``True`` if *path* is an existing directory.  This follows symbolic "
"links, so both :func:`islink` and :func:`isdir` can be true for the same "
"path."
msgstr ""
"*path* が実在するディレクトリなら ``True`` を返します。シンボリックリンクの場"
"合にはその実体をチェックするので、同じパスに対して :func:`islink` と :func:"
"`isdir` の両方が *True* を返すことがあります。"

#: ../../library/os.path.rst:187
msgid ""
"Return ``True`` if *path* refers to a directory entry that is a symbolic "
"link. Always ``False`` if symbolic links are not supported by the Python "
"runtime."
msgstr ""
"*path* がシンボリックリンクなら ``True`` を返します。Python ランタイムでシン"
"ボリックリンクがサポートされていないプラットフォームでは、常に ``False`` を返"
"します。"

#: ../../library/os.path.rst:193
msgid ""
"Return ``True`` if pathname *path* is a :dfn:`mount point`: a point in a "
"file system where a different file system has been mounted.  The function "
"checks whether *path*'s parent, :file:`path/..`, is on a different device "
"than *path*, or whether :file:`path/..` and *path* point to the same i-node "
"on the same device --- this should detect mount points for all Unix and "
"POSIX variants."
msgstr ""
"パス名 *path* がマウントポイント :dfn:`mount point` (ファイルシステムの中で異"
"なるファイルシステムがマウントされているところ) なら ``True`` を返します。こ"
"の関数は *path* の親ディレクトリである :file:`path/..` が *path* と異なるデバ"
"イス上にあるか、あるいは :file:`path/..` と *path* が同じデバイス上の同じ i-"
"node を指しているかをチェックします --- これによってすべての Unix と POSIX 系"
"システムでマウントポイントが検出できます。"

#: ../../library/os.path.rst:202
msgid ""
"Join one or more path components intelligently.  The return value is the "
"concatenation of *path* and any members of *\\*paths* with exactly one "
"directory separator (``os.sep``) following each non-empty part except the "
"last, meaning that the result will only end in a separator if the last part "
"is empty.  If a component is an absolute path, all previous components are "
"thrown away and joining continues from the absolute path component."
msgstr ""
"1 つあるいはそれ以上のパスの要素を賢く結合します。戻り値は *path*、ディレクト"
"リの区切り文字 (``os.sep``) を *\\*paths* の各パートの(末尾でない場合の空文字"
"列を除いて)頭に付けたもの、これらの結合になります。最後の部分が空文字列の場合"
"に限り区切り文字で終わる文字列になります。付け加える要素に絶対パスがあれば、"
"それより前の要素は全て破棄され、以降の要素を結合します。"

#: ../../library/os.path.rst:210
msgid ""
"On Windows, the drive letter is not reset when an absolute path component (e."
"g., ``r'\\foo'``) is encountered.  If a component contains a drive letter, "
"all previous components are thrown away and the drive letter is reset.  Note "
"that since there is a current directory for each drive, ``os.path.join(\"c:"
"\", \"foo\")`` represents a path relative to the current directory on drive :"
"file:`C:` (:file:`c:foo`), not :file:`c:\\\\foo`."
msgstr ""
"Windows の場合は、絶対パスの要素 (たとえば ``r'\\foo'``) が見つかった場合はド"
"ライブレターはリセットされません。要素にドライブレターが含まれていれば、それ"
"より前の要素は全て破棄され、ドライブレターがリセットされます。各ドライブに対"
"してカレントディレクトリがあるので、 ``os.path.join(\"c:\", \"foo\")`` によっ"
"て、 :file:`c:\\\\foo` ではなく、ドライブ :file:`C:` 上のカレントディレクトリ"
"からの相対パス(:file:`c:foo`) が返されることに注意してください。"

#: ../../library/os.path.rst:220
msgid ""
"Normalize the case of a pathname.  On Unix and Mac OS X, this returns the "
"path unchanged; on case-insensitive filesystems, it converts the path to "
"lowercase.  On Windows, it also converts forward slashes to backward slashes."
msgstr ""
"パス名の大文字、小文字をシステムの標準にします。 Unix と Mac OS X ではそのま"
"ま返します。大文字、小文字を区別しないファイルシステムではパス名を小文字に変"
"換します。 Windows では、スラッシュをバックスラッシュに変換します。"

#: ../../library/os.path.rst:227
msgid ""
"Normalize a pathname by collapsing redundant separators and up-level "
"references so that ``A//B``, ``A/B/``, ``A/./B`` and ``A/foo/../B`` all "
"become ``A/B``.  This string manipulation may change the meaning of a path "
"that contains symbolic links.  On Windows, it converts forward slashes to "
"backward slashes. To normalize case, use :func:`normcase`."
msgstr ""
"パスを正規化します。余分な区切り文字や上位レベル参照を除去し、``A//B``、``A/"
"B/``、``A/./B`` や ``A/foo/../B`` などはすべて ``A/B`` になります。この文字列"
"操作は、シンボリックリンクを含むパスの意味を変えてしまう場合があります。"
"Windows では、スラッシュをバックスラッシュに変換します。大文字小文字の正規化"
"には :func:`normcase` を使用してください。"

#: ../../library/os.path.rst:236
msgid ""
"Return the canonical path of the specified filename, eliminating any "
"symbolic links encountered in the path (if they are supported by the "
"operating system)."
msgstr ""
"パスの中のシンボリックリンク (もしそれが当該オペレーティングシステムでサポー"
"トされていれば) を取り除いて、指定されたファイル名を正規化したパスを返しま"
"す。"

#: ../../library/os.path.rst:244
msgid ""
"Return a relative filepath to *path* either from the current directory or "
"from an optional *start* directory.  This is a path computation:  the "
"filesystem is not accessed to confirm the existence or nature of *path* or "
"*start*."
msgstr ""
"カレントディレクトリあるいはオプションの *start* ディレクトリからの *path* へ"
"の相対パスを返します。これは経路計算で行っており、ファイルシステムにアクセス"
"して *path* や *start* の存在や性質を確認することはありません。"

#: ../../library/os.path.rst:249
msgid "*start* defaults to :attr:`os.curdir`."
msgstr "*start* のデフォルト値は :attr:`os.curdir` です。"

#: ../../library/os.path.rst:251
msgid "Availability:  Windows, Unix."
msgstr "利用できる環境 : Windows 、 Unix"

#: ../../library/os.path.rst:258
msgid ""
"Return ``True`` if both pathname arguments refer to the same file or "
"directory (as indicated by device number and i-node number). Raise an "
"exception if an :func:`os.stat` call on either pathname fails."
msgstr ""
"2 つの引数であるパス名が同じファイルあるいはディレクトリを指していれば (同じ"
"デバイスナンバーと i-node ナンバーで示されていれば ) 、 ``True`` を返します。"
"どちらかのパス名で :func:`os.stat` の呼び出しに失敗した場合には、例外が発生し"
"ます。"

#: ../../library/os.path.rst:262 ../../library/os.path.rst:269
#: ../../library/os.path.rst:279
msgid "Availability: Unix."
msgstr "利用できる環境: Unix。"

#: ../../library/os.path.rst:267
msgid ""
"Return ``True`` if the file descriptors *fp1* and *fp2* refer to the same "
"file."
msgstr ""
"ファイル記述子 *fp1* と *fp2* が同じファイルを参照していたら ``True`` を返し"
"ます。"

#: ../../library/os.path.rst:274
msgid ""
"Return ``True`` if the stat tuples *stat1* and *stat2* refer to the same "
"file. These structures may have been returned by :func:`os.fstat`, :func:`os."
"lstat`, or :func:`os.stat`.  This function implements the underlying "
"comparison used by :func:`samefile` and :func:`sameopenfile`."
msgstr ""
"stat タプル *stat1* と *stat2* が同じファイルを参照していれば ``True`` を返し"
"ます。これらのタプルは :func:`os.fstat` 、 :func:`os.lstat` あるいは :func:"
"`os.stat` の返り値で構いません。この関数は :func:`samefile` と :func:"
"`sameopenfile` を使用した比較に基いて実装しています。"

#: ../../library/os.path.rst:284
msgid ""
"Split the pathname *path* into a pair, ``(head, tail)`` where *tail* is the "
"last pathname component and *head* is everything leading up to that.  The "
"*tail* part will never contain a slash; if *path* ends in a slash, *tail* "
"will be empty.  If there is no slash in *path*, *head* will be empty.  If "
"*path* is empty, both *head* and *tail* are empty.  Trailing slashes are "
"stripped from *head* unless it is the root (one or more slashes only).  In "
"all cases, ``join(head, tail)`` returns a path to the same location as "
"*path* (but the strings may differ).  Also see the functions :func:`dirname` "
"and :func:`basename`."
msgstr ""
"パス名 *path* を ``(head, tail)`` のペアに分割します。 *tail* はパス名の構成"
"要素の末尾で、 *head* はそれより前の部分です。 *tail* はスラッシュを含みませ"
"ん; もし *path* がスラッシュで終わっていれば *tail* は空文字列になります。も"
"し *path* にスラッシュがなければ、 *head* は空文字になります。 *path* が空文"
"字なら、 *head* と *tail* の両方が空文字になります。 *head* の末尾のスラッ"
"シュは *head* がルートディレクトリ (または 1 個以上のスラッシュだけ) でない限"
"り取り除かれます。 ``join(head, tail)`` は常に *path* と同じ場所を返します"
"が、文字列としては異なるかもしれません。関数 :func:`dirname`, :func:"
"`basename` も参照してください。"

#: ../../library/os.path.rst:297
msgid ""
"Split the pathname *path* into a pair ``(drive, tail)`` where *drive* is "
"either a drive specification or the empty string.  On systems which do not "
"use drive specifications, *drive* will always be the empty string.  In all "
"cases, ``drive + tail`` will be the same as *path*."
msgstr ""
"パス名 *path* を ``(drive, tail)`` のペアに分割します。 *drive* はドライブ名"
"か、空文字列です。ドライブ名を使用しないシステムでは、 *drive* は常に空文字列"
"です。全ての場合に ``drive + tail`` は *path* と等しくなります。"

#: ../../library/os.path.rst:307
msgid ""
"Split the pathname *path* into a pair ``(root, ext)``  such that ``root + "
"ext == path``, and *ext* is empty or begins with a period and contains at "
"most one period. Leading periods on the basename are  ignored; ``splitext('."
"cshrc')`` returns  ``('.cshrc', '')``."
msgstr ""
"パス名 *path* を ``(root, ext)`` のペアに分割します。 ``root + ext == path`` "
"になります。 *ext* は空文字列か 1 つのピリオドで始まり、多くても 1 つのピリオ"
"ドを含みます。ベースネームを導出するピリオドは無視されます; ``splitext('."
"cshrc')`` は ``('.cshrc', '')`` を返します。"

#: ../../library/os.path.rst:312
msgid ""
"Earlier versions could produce an empty root when the only period was the "
"first character."
msgstr ""
"以前のバージョンでは、最初の文字がピリオドであった場合、空の root を生成して"
"いました。"

#: ../../library/os.path.rst:319
msgid ""
"Split the pathname *path* into a pair ``(unc, rest)`` so that *unc* is the "
"UNC mount point (such as ``r'\\\\host\\mount'``), if present, and *rest* the "
"rest of the path (such as  ``r'\\path\\file.ext'``).  For paths containing "
"drive letters, *unc* will always be the empty string."
msgstr ""
"パス名 *path* をペア ``(unc, rest)`` に分割します。ここで *unc* は (``r'\\"
"\\host\\mount'`` のような) UNC マウントポイント、そして *rest* は "
"(``r'\\path\\file.ext'`` のような) パスの残りの部分です。ドライブレターを含む"
"パスでは常に *unc* が空文字列になります。"

#: ../../library/os.path.rst:324
msgid "Availability:  Windows."
msgstr "利用できる環境: Windows。"

#: ../../library/os.path.rst:329
msgid ""
"Calls the function *visit* with arguments ``(arg, dirname, names)`` for each "
"directory in the directory tree rooted at *path* (including *path* itself, "
"if it is a directory).  The argument *dirname* specifies the visited "
"directory, the argument *names* lists the files in the directory (gotten "
"from ``os.listdir(dirname)``). The *visit* function may modify *names* to "
"influence the set of directories visited below *dirname*, e.g. to avoid "
"visiting certain parts of the tree.  (The object referred to by *names* must "
"be modified in place, using :keyword:`del` or slice assignment.)"
msgstr ""
"*path* をルートとする各ディレクトリに対して (もし *path* がディレクトリなら "
"*path* も含みます) 、 ``(arg, dirname, names)`` を引数として関数 *visit* を呼"
"び出します。引数 *dirname* は訪れたディレクトリを示し、引数 *names* はその"
"ディレクトリ内のファイルのリスト (``os.listdir(dirname)`` で得られる) です。"
"関数 *visit* によって *names* を変更して、 *dirname* 以下の対象となるディレク"
"トリのセットを変更することもできます。例えば、あるディレクトリツリーだけ関数"
"を適用しないなど。 (*names* で参照されるオブジェクトは、 :keyword:`del` ある"
"いはスライスを使って正しく変更しなければなりません。 )"

#: ../../library/os.path.rst:340
msgid ""
"Symbolic links to directories are not treated as subdirectories, and that :"
"func:`walk` therefore will not visit them. To visit linked directories you "
"must identify them with ``os.path.islink(file)`` and ``os.path."
"isdir(file)``, and invoke :func:`walk` as necessary."
msgstr ""
"ディレクトリへのシンボリックリンクはサブディレクトリとして扱われないので、 :"
"func:`walk` による操作対象とはされません。ディレクトリへのシンボリックリンク"
"を操作対象とするには、 ``os.path.islink(file)`` と ``os.path.isdir(file)`` で"
"識別して、 :func:`walk` で必要な操作を実行しなければなりません。"

#: ../../library/os.path.rst:347
msgid ""
"This function is deprecated and has been removed in Python 3 in favor of :"
"func:`os.walk`."
msgstr ""
"この関数は廃止予定で、 Python 3 では :func:`os.walk` を採用し、こちらは削除さ"
"れます。"

#: ../../library/os.path.rst:353
msgid ""
"``True`` if arbitrary Unicode strings can be used as file names (within "
"limitations imposed by the file system)."
msgstr ""
"ファイル名に任意の Unicode 文字列を (システムの制限内で) 使用できる場合は "
"``True`` になります。"
