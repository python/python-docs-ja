# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/pickletools.rst:2
msgid ":mod:`pickletools` --- Tools for pickle developers"
msgstr ":mod:`pickletools` --- pickle 開発者のためのツール群"

#: ../../library/pickletools.rst:8
msgid "**Source code:** :source:`Lib/pickletools.py`"
msgstr "**ソースコード:** :source:`Lib/pickletools.py`"

#: ../../library/pickletools.rst:13
msgid ""
"This module contains various constants relating to the intimate details of "
"the :mod:`pickle` module, some lengthy comments about the implementation, "
"and a few useful functions for analyzing pickled data.  The contents of this "
"module are useful for Python core developers who are working on the :mod:"
"`pickle`; ordinary users of the :mod:`pickle` module probably won't find "
"the :mod:`pickletools` module relevant."
msgstr ""
"このモジュールには、 :mod:`pickle` モジュールの詳細に関わる様々な定数や実装に"
"関する長大なコメント、そして pickle 化されたデータを解析する上で有用な関数を"
"いくつか定義しています。このモジュールの内容は :mod:`pickle` の実装に関わって"
"いる Python コア開発者にとって有用なものです; 普通の :mod:`pickle` 利用者に"
"とっては、 :mod:`pickletools` モジュールはおそらく関係ないものでしょう。"

#: ../../library/pickletools.rst:21
msgid "Command line usage"
msgstr "コマンドラインの使い方"

#: ../../library/pickletools.rst:25
msgid ""
"When invoked from the command line, ``python -m pickletools`` will "
"disassemble the contents of one or more pickle files.  Note that if you want "
"to see the Python object stored in the pickle rather than the details of "
"pickle format, you may want to use ``-m pickle`` instead. However, when the "
"pickle file that you want to examine comes from an untrusted source, ``-m "
"pickletools`` is a safer option because it does not execute pickle bytecode."
msgstr ""
"コマンドラインから実行するとき、``python -m pickletools`` は 1 つもしくは複数"
"の pickle ファイルの内容を逆アセンブルします。pickle 形式の詳細ではなく "
"pickle に保存された Python オブジェクトを見たい場合は、そのコマンドではなく "
"``-m pickle`` を使いたいと思うかもしれません。しかし、調べたい pickle ファイ"
"ルが信頼できないソースから来たものであるとき、``-m pickletools`` は pickle の"
"バイトコードを実行しないので、より安全な選択肢です。"

#: ../../library/pickletools.rst:33
msgid "For example, with a tuple ``(1, 2)`` pickled in file ``x.pickle``:"
msgstr ""
"例えば、 ``x.pickle`` ファイルに pickle 化されているタプル ``(1, 2)`` に対し"
"て実行すると次のようになります:"

#: ../../library/pickletools.rst:50
msgid "Command line options"
msgstr "コマンドラインオプション"

#: ../../library/pickletools.rst:56
msgid "Annotate each line with a short opcode description."
msgstr "注釈として短い命令コードの説明を各行に表示します。"

#: ../../library/pickletools.rst:60
msgid "Name of a file where the output should be written."
msgstr "出力結果を書き込むファイル名。"

#: ../../library/pickletools.rst:64
msgid "The number of blanks by which to indent a new MARK level."
msgstr "新しい MARK レベルのインデントに使われる空白の数。"

#: ../../library/pickletools.rst:68
msgid ""
"When multiple objects are disassembled, preserve memo between disassemblies."
msgstr ""
"複数のオブジェクトが逆アセンブルされたとき、逆アセンブリ間でメモを保持しま"
"す。"

#: ../../library/pickletools.rst:73
msgid ""
"When more than one pickle file are specified, print given preamble before "
"each disassembly."
msgstr ""
"複数の pickle ファイルが指定されたとき、各逆アセンブリの前に与えられたプリア"
"ンブルを表示します。"

#: ../../library/pickletools.rst:79
msgid "Programmatic Interface"
msgstr "プログラミングインターフェース"

#: ../../library/pickletools.rst:84
msgid ""
"Outputs a symbolic disassembly of the pickle to the file-like object *out*, "
"defaulting to ``sys.stdout``.  *pickle* can be a string or a file-like "
"object.  *memo* can be a Python dictionary that will be used as the pickle's "
"memo; it can be used to perform disassemblies across multiple pickles "
"created by the same pickler. Successive levels, indicated by ``MARK`` "
"opcodes in the stream, are indented by *indentlevel* spaces.  If a nonzero "
"value is given to *annotate*, each opcode in the output is annotated with a "
"short description.  The value of *annotate* is used as a hint for the column "
"where annotation should start."
msgstr ""
"pickle の抽象的な逆アセンブリを file-like オブジェクト *out* (デフォルトは "
"``sys.stdout``) に出力します。*pickle* は文字列または file-like オブジェクト"
"です。*memo* は Python の辞書で、pickle のメモとして使われます; これは、"
"pickle 処理を行う 1 つのオブジェクトが、複数の pickle にわたって逆アセンブル"
"を行うために使われます。ストリーム上の ``MARK`` 命令コードが示す後続のレベル"
"は、*indentlevel* 個の空白でインデントされます。*annotate* に非ゼロの値が与え"
"られた場合、出力される各命令コードは短い命令コードに注釈が付けられます。"
"*annotate* の値は、注釈の先頭の位置のヒントとして使われます。"

#: ../../library/pickletools.rst:95
msgid "The *annotate* argument."
msgstr "*annotate* 引数。"

#: ../../library/pickletools.rst:100
msgid ""
"Provides an :term:`iterator` over all of the opcodes in a pickle, returning "
"a sequence of ``(opcode, arg, pos)`` triples.  *opcode* is an instance of "
"an :class:`OpcodeInfo` class; *arg* is the decoded value, as a Python "
"object, of the opcode's argument; *pos* is the position at which this opcode "
"is located. *pickle* can be a string or a file-like object."
msgstr ""
"pickle 内の全ての opcode を取り出す :term:`イテレータ <iterator>` を返しま"
"す。このイテレータは ``(opcode, arg, pos)`` の三つ組みからなる配列を返しま"
"す。 *opcode* は :class:`OpcodeInfo` クラスのインスタンスのクラスです。 "
"*arg* は *opcode* の引数としてデコードされた Python オブジェクトの値です。 "
"*pos* は *opcode* の場所を表す値です。 *pickle* は文字列でもファイル類似オブ"
"ジェクトでもかまいません。"

#: ../../library/pickletools.rst:108
msgid ""
"Returns a new equivalent pickle string after eliminating unused ``PUT`` "
"opcodes. The optimized pickle is shorter, takes less transmission time, "
"requires less storage space, and unpickles more efficiently."
msgstr ""
"使われていない ``PUT`` 命令コードを除去した上で、その新しい pickle 文字列を返"
"します。最適化された pickle は、長さがより短く、転送時間がより少なく、必要と"
"するストレージ領域がより狭く、unpickle 化がより効率的になります。"
