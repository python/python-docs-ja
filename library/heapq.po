# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Takanori Suzuki <takanori@takanory.net>, 2021
# tomo, 2021
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:07+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/heapq.rst:2
msgid ":mod:`!heapq` --- Heap queue algorithm"
msgstr ":mod:`!heapq` --- ヒープキューアルゴリズム"

#: ../../library/heapq.rst:12
msgid "**Source code:** :source:`Lib/heapq.py`"
msgstr "**ソースコード:** :source:`Lib/heapq.py`"

#: ../../library/heapq.rst:16
msgid ""
"This module provides an implementation of the heap queue algorithm, also "
"known as the priority queue algorithm."
msgstr ""
"このモジュールではヒープキューアルゴリズムの一実装を提供しています。優先度"
"キューアルゴリズムとしても知られています。"

#: ../../library/heapq.rst:19
msgid ""
"Heaps are binary trees for which every parent node has a value less than or "
"equal to any of its children.  We refer to this condition as the heap "
"invariant."
msgstr ""
"ヒープとは、各親ノードがどの子ノードよりも小さいか等しい値を持つ二分木のこと"
"です。この条件をヒープ不変式と呼びます。"

#: ../../library/heapq.rst:22
msgid ""
"This implementation uses arrays for which ``heap[k] <= heap[2*k+1]`` and "
"``heap[k] <= heap[2*k+2]`` for all *k*, counting elements from zero.  For "
"the sake of comparison, non-existing elements are considered to be "
"infinite.  The interesting property of a heap is that its smallest element "
"is always the root, ``heap[0]``."
msgstr ""
"ヒープの実装には、全ての *k* について、要素をゼロから数えたときに、 "
"``heap[k] <= heap[2*k+1]`` かつ ``heap[k] <= heap[2*k+2]`` となる配列を使用し"
"ています。比較のために、存在しない要素を無限大と考えます。ヒープの興味深い特"
"性は、最小の要素が常にルートの ``heap[0]`` になることです。"

#: ../../library/heapq.rst:28
msgid ""
"The API below differs from textbook heap algorithms in two aspects: (a) We "
"use zero-based indexing.  This makes the relationship between the index for "
"a node and the indexes for its children slightly less obvious, but is more "
"suitable since Python uses zero-based indexing. (b) Our pop method returns "
"the smallest item, not the largest (called a \"min heap\" in textbooks; a "
"\"max heap\" is more common in texts because of its suitability for in-place "
"sorting)."
msgstr ""
"以下の API は教科書におけるヒープアルゴリズムとは 2 つの側面で異なっていま"
"す: (a) ゼロベースのインデクス化を行っています。これにより、ノードに対するイ"
"ンデクスとその子ノードのインデクスの関係がやや明瞭でなくなりますが、Python は"
"ゼロベースのインデクス化を使っているのでよりしっくりきます。(b) われわれの "
"pop メソッドは最大の要素ではなく最小の要素 (教科書では \"min heap:最小ヒープ"
"\" と呼ばれています; 教科書では並べ替えをインプレースで行うのに適した \"max "
"heap:最大ヒープ\" が一般的です)。"

#: ../../library/heapq.rst:35
msgid ""
"These two make it possible to view the heap as a regular Python list without "
"surprises: ``heap[0]`` is the smallest item, and ``heap.sort()`` maintains "
"the heap invariant!"
msgstr ""
"これらの 2 点によって、ユーザに戸惑いを与えることなく、ヒープを通常の Python "
"リストとして見ることができます: ``heap[0]`` が最小の要素となり、``heap."
"sort()`` はヒープ不変式を保ちます!"

#: ../../library/heapq.rst:39
msgid ""
"To create a heap, use a list initialized to ``[]``, or you can transform a "
"populated list into a heap via function :func:`heapify`."
msgstr ""
"ヒープを作成するには、 ``[]`` に初期化されたリストを使うか、 :func:`heapify` "
"を用いて要素の入ったリストを変換します。"

#: ../../library/heapq.rst:42
msgid "The following functions are provided:"
msgstr "次の関数が用意されています:"

#: ../../library/heapq.rst:47
msgid "Push the value *item* onto the *heap*, maintaining the heap invariant."
msgstr "*item* を *heap* に push します。ヒープ不変式を保ちます。"

#: ../../library/heapq.rst:52
msgid ""
"Pop and return the smallest item from the *heap*, maintaining the heap "
"invariant.  If the heap is empty, :exc:`IndexError` is raised.  To access "
"the smallest item without popping it, use ``heap[0]``."
msgstr ""
"pop を行い、 *heap* から最小の要素を返します。ヒープ不変式は保たれます。ヒー"
"プが空の場合、 :exc:`IndexError` が送出されます。pop せずに最小の要素にアクセ"
"スするには、 ``heap[0]`` を使ってください。"

#: ../../library/heapq.rst:59
msgid ""
"Push *item* on the heap, then pop and return the smallest item from the "
"*heap*.  The combined action runs more efficiently than :func:`heappush` "
"followed by a separate call to :func:`heappop`."
msgstr ""
"*item* を *heap* に push した後、pop を行って *heap* から最初の要素を返しま"
"す。この一続きの動作を :func:`heappush` に引き続いて :func:`heappop` を別々に"
"呼び出すよりも効率的に実行します。"

#: ../../library/heapq.rst:66
msgid "Transform list *x* into a heap, in-place, in linear time."
msgstr "リスト *x* をインプレース処理し、線形時間でヒープに変換します。"

#: ../../library/heapq.rst:71
msgid ""
"Pop and return the smallest item from the *heap*, and also push the new "
"*item*. The heap size doesn't change. If the heap is empty, :exc:"
"`IndexError` is raised."
msgstr ""
"*heap* から最小の要素を pop して返し、新たに *item* を push します。ヒープの"
"サイズは変更されません。ヒープが空の場合、 :exc:`IndexError` が送出されます。"

#: ../../library/heapq.rst:74
msgid ""
"This one step operation is more efficient than a :func:`heappop` followed "
"by :func:`heappush` and can be more appropriate when using a fixed-size "
"heap. The pop/push combination always returns an element from the heap and "
"replaces it with *item*."
msgstr ""
"この一息の演算は :func:`heappop` に次いで :func:`heappush` を送出するよりも効"
"率的で、固定サイズのヒープを用いている場合にはより適しています。 pop/push の"
"組み合わせは必ずヒープから要素を一つ返し、それを *item* と置き換えます。"

#: ../../library/heapq.rst:79
msgid ""
"The value returned may be larger than the *item* added.  If that isn't "
"desired, consider using :func:`heappushpop` instead.  Its push/pop "
"combination returns the smaller of the two values, leaving the larger value "
"on the heap."
msgstr ""
"返される値は加えられた *item* よりも大きくなるかもしれません。それを望まない"
"なら、代わりに :func:`heappushpop` を使うことを考えてください。この push/pop "
"の組み合わせは二つの値の小さい方を返し、大きい方の値をヒープに残します。"

#: ../../library/heapq.rst:85
msgid "The module also offers three general purpose functions based on heaps."
msgstr "このモジュールではさらに3つのヒープに基く汎用関数を提供します。"

#: ../../library/heapq.rst:90
msgid ""
"Merge multiple sorted inputs into a single sorted output (for example, merge "
"timestamped entries from multiple log files).  Returns an :term:`iterator` "
"over the sorted values."
msgstr ""
"複数のソートされた入力をマージ(merge)して一つのソートされた出力にします (たと"
"えば、複数のログファイルの時刻の入ったエントリーをマージします)。ソートされた"
"値にわたる :term:`iterator` を返します。"

#: ../../library/heapq.rst:94
msgid ""
"Similar to ``sorted(itertools.chain(*iterables))`` but returns an iterable, "
"does not pull the data into memory all at once, and assumes that each of the "
"input streams is already sorted (smallest to largest)."
msgstr ""
"``sorted(itertools.chain(*iterables))`` と似ていますが、イテレータを返し、一"
"度にはデータをメモリに読み込まず、それぞれの入力ストリームが予め(最小から最大"
"へ)ソートされていることを仮定します。"

#: ../../library/heapq.rst:98
msgid ""
"Has two optional arguments which must be specified as keyword arguments."
msgstr ""
"2 つのオプション引数があり、これらはキーワード引数として指定されなければなり"
"ません。"

#: ../../library/heapq.rst:100
msgid ""
"*key* specifies a :term:`key function` of one argument that is used to "
"extract a comparison key from each input element.  The default value is "
"``None`` (compare the elements directly)."
msgstr ""
"*key* は 1 つの引数からなる :term:`key function` を指定します。この関数は、入"
"力の各要素から比較のキーを取り出すのに使われます。デフォルト値は ``None`` で"
"す (要素を直接比較します)。"

#: ../../library/heapq.rst:104
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the input elements "
"are merged as if each comparison were reversed. To achieve behavior similar "
"to ``sorted(itertools.chain(*iterables), reverse=True)``, all iterables must "
"be sorted from largest to smallest."
msgstr ""
"*reverse* は真偽値です。 ``True`` を設定した場合、挿入要素は逆向きに比較され"
"たかのように結合されます。  ``sorted(itertools.chain(*iterables), "
"reverse=True)`` でこれに似た挙動を実現するには、全てのイテラブルは降順で並ん"
"でいなければなりません。"

#: ../../library/heapq.rst:109
msgid "Added the optional *key* and *reverse* parameters."
msgstr "オプションの *key* 引数および *reverse* 引数を追加."

#: ../../library/heapq.rst:115
msgid ""
"Return a list with the *n* largest elements from the dataset defined by "
"*iterable*.  *key*, if provided, specifies a function of one argument that "
"is used to extract a comparison key from each element in *iterable* (for "
"example, ``key=str.lower``).  Equivalent to:  ``sorted(iterable, key=key, "
"reverse=True)[:n]``."
msgstr ""
"*iterable* で定義されるデータセットのうち、最大値から降順に *n* 個の値のリス"
"トを返します。(あたえられた場合) *key* は、引数を一つとる、*iterable* のそれ"
"ぞれの要素から比較キーを生成する関数を指定します(例 ``key=str.lower``)。以下"
"のコードと同等です: ``sorted(iterable, key=key, reverse=True)[:n]``"

#: ../../library/heapq.rst:124
msgid ""
"Return a list with the *n* smallest elements from the dataset defined by "
"*iterable*.  *key*, if provided, specifies a function of one argument that "
"is used to extract a comparison key from each element in *iterable* (for "
"example, ``key=str.lower``).  Equivalent to:  ``sorted(iterable, key=key)[:"
"n]``."
msgstr ""
"*iterable* で定義されるデータセットのうち、最小値から昇順に *n* 個の値のリス"
"トを返します。(あたえられた場合) *key* は、引数を一つとる、*iterable* のそれ"
"ぞれの要素から比較キーを生成する関数を指定します(例 ``key=str.lower``)。以下"
"のコードと同等です: ``sorted(iterable, key=key)[:n]``"

#: ../../library/heapq.rst:130
msgid ""
"The latter two functions perform best for smaller values of *n*.  For larger "
"values, it is more efficient to use the :func:`sorted` function.  Also, when "
"``n==1``, it is more efficient to use the built-in :func:`min` and :func:"
"`max` functions.  If repeated usage of these functions is required, consider "
"turning the iterable into an actual heap."
msgstr ""
"後ろ二つの関数は *n* の値が小さな場合に最適な動作をします。大きな値の時には :"
"func:`sorted` 関数の方が効率的です。さらに、 ``n==1`` の時には :func:`min` お"
"よび :func:`max` 関数の方が効率的です。この関数を繰り返し使うことが必要なら、"
"iterable を実際のヒープに変えることを考えてください。"

#: ../../library/heapq.rst:138
msgid "Basic Examples"
msgstr "基本的な例"

#: ../../library/heapq.rst:140
msgid ""
"A `heapsort <https://en.wikipedia.org/wiki/Heapsort>`_ can be implemented by "
"pushing all values onto a heap and then popping off the smallest values one "
"at a time::"
msgstr ""
"すべての値をヒープに push してから最小値を 1 つずつ pop することで、`ヒープ"
"ソート <https://ja.wikipedia.org/wiki/"
"%E3%83%92%E3%83%BC%E3%83%97%E3%82%BD%E3%83%BC%E3%83%88>`_ を実装できます::"

#: ../../library/heapq.rst:144
msgid ""
">>> def heapsort(iterable):\n"
"...     h = []\n"
"...     for value in iterable:\n"
"...         heappush(h, value)\n"
"...     return [heappop(h) for i in range(len(h))]\n"
"...\n"
">>> heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
msgstr ""

#: ../../library/heapq.rst:153
msgid ""
"This is similar to ``sorted(iterable)``, but unlike :func:`sorted`, this "
"implementation is not stable."
msgstr ""
"これは ``sorted(iterable)`` に似ていますが、 :func:`sorted` とは異なり、この"
"実装はステーブルソートではありません。"

#: ../../library/heapq.rst:156
msgid ""
"Heap elements can be tuples.  This is useful for assigning comparison values "
"(such as task priorities) alongside the main record being tracked::"
msgstr ""
"ヒープの要素はタプルに出来ます。これは、追跡される主レコードとは別に (タスク"
"の優先度のような) 比較値を指定するときに便利です::"

#: ../../library/heapq.rst:159
msgid ""
">>> h = []\n"
">>> heappush(h, (5, 'write code'))\n"
">>> heappush(h, (7, 'release product'))\n"
">>> heappush(h, (1, 'write spec'))\n"
">>> heappush(h, (3, 'create tests'))\n"
">>> heappop(h)\n"
"(1, 'write spec')"
msgstr ""

#: ../../library/heapq.rst:169
msgid "Priority Queue Implementation Notes"
msgstr "優先度キュー実装の注釈"

#: ../../library/heapq.rst:171
msgid ""
"A `priority queue <https://en.wikipedia.org/wiki/Priority_queue>`_ is common "
"use for a heap, and it presents several implementation challenges:"
msgstr ""
"`優先度つきキュー <https://ja.wikipedia.org/wiki/"
"%E5%84%AA%E5%85%88%E5%BA%A6%E3%81%A4%E3%81%8D%E3%82%AD%E3%83%A5%E3%83%BC>`_ "
"は、ヒープの一般的な使い方で、実装にはいくつか困難な点があります:"

#: ../../library/heapq.rst:174
msgid ""
"Sort stability:  how do you get two tasks with equal priorities to be "
"returned in the order they were originally added?"
msgstr ""
"ソート安定性: 優先度が等しい二つのタスクが、もともと追加された順序で返される"
"ためにはどうしたらいいでしょうか？"

#: ../../library/heapq.rst:177
msgid ""
"Tuple comparison breaks for (priority, task) pairs if the priorities are "
"equal and the tasks do not have a default comparison order."
msgstr ""
"(priority, task) ペアに対するタプルの比較は、priority が同じで task がデフォ"
"ルトの比較順を持たないときに破綻します。"

#: ../../library/heapq.rst:180
msgid ""
"If the priority of a task changes, how do you move it to a new position in "
"the heap?"
msgstr ""
"あるタスクの優先度が変化したら、どうやってそれをヒープの新しい位置に移動させ"
"るのでしょうか？"

#: ../../library/heapq.rst:183
msgid ""
"Or if a pending task needs to be deleted, how do you find it and remove it "
"from the queue?"
msgstr ""
"未解決のタスクが削除される必要があるとき、どのようにそれをキューから探して削"
"除するのでしょうか？"

#: ../../library/heapq.rst:186
msgid ""
"A solution to the first two challenges is to store entries as 3-element list "
"including the priority, an entry count, and the task.  The entry count "
"serves as a tie-breaker so that two tasks with the same priority are "
"returned in the order they were added. And since no two entry counts are the "
"same, the tuple comparison will never attempt to directly compare two tasks."
msgstr ""
"最初の二つの困難の解決策は、項目を優先度、項目番号、そしてタスクを含む 3 要素"
"のリストとして保存することです。この項目番号は、同じ優先度の二つのタスクが、"
"追加された順序で返されるようにするための同点決勝戦として働きます。そして二つ"
"の項目番号が等しくなることはありませんので、タプルの比較が二つのタスクを直接"
"比べようとすることはありえません。"

#: ../../library/heapq.rst:192
msgid ""
"Another solution to the problem of non-comparable tasks is to create a "
"wrapper class that ignores the task item and only compares the priority "
"field::"
msgstr ""
"比較できないタスク問題のもう一つの解決法は、タスクアイテムを無視して優先順序"
"フィールドだけで比較するラッパークラスです::"

#: ../../library/heapq.rst:195
msgid ""
"from dataclasses import dataclass, field\n"
"from typing import Any\n"
"\n"
"@dataclass(order=True)\n"
"class PrioritizedItem:\n"
"    priority: int\n"
"    item: Any=field(compare=False)"
msgstr ""

#: ../../library/heapq.rst:203
msgid ""
"The remaining challenges revolve around finding a pending task and making "
"changes to its priority or removing it entirely.  Finding a task can be done "
"with a dictionary pointing to an entry in the queue."
msgstr ""
"残りの困難は主に、未解決のタスクを探して、その優先度を変更したり、完全に削除"
"することです。タスクを探すことは、キュー内の項目を指し示す辞書によってなされ"
"ます。"

#: ../../library/heapq.rst:207
msgid ""
"Removing the entry or changing its priority is more difficult because it "
"would break the heap structure invariants.  So, a possible solution is to "
"mark the entry as removed and add a new entry with the revised priority::"
msgstr ""
"項目を削除したり、優先度を変更することは、ヒープ構造の不変関係を壊すことにな"
"るので、もっと難しいです。ですから、可能な解決策は、その項目が無効であるもの"
"としてマークし、必要なら変更された優先度の項目を加えることです::"

#: ../../library/heapq.rst:211
msgid ""
"pq = []                         # list of entries arranged in a heap\n"
"entry_finder = {}               # mapping of tasks to entries\n"
"REMOVED = '<removed-task>'      # placeholder for a removed task\n"
"counter = itertools.count()     # unique sequence count\n"
"\n"
"def add_task(task, priority=0):\n"
"    'Add a new task or update the priority of an existing task'\n"
"    if task in entry_finder:\n"
"        remove_task(task)\n"
"    count = next(counter)\n"
"    entry = [priority, count, task]\n"
"    entry_finder[task] = entry\n"
"    heappush(pq, entry)\n"
"\n"
"def remove_task(task):\n"
"    'Mark an existing task as REMOVED.  Raise KeyError if not found.'\n"
"    entry = entry_finder.pop(task)\n"
"    entry[-1] = REMOVED\n"
"\n"
"def pop_task():\n"
"    'Remove and return the lowest priority task. Raise KeyError if empty.'\n"
"    while pq:\n"
"        priority, count, task = heappop(pq)\n"
"        if task is not REMOVED:\n"
"            del entry_finder[task]\n"
"            return task\n"
"    raise KeyError('pop from an empty priority queue')"
msgstr ""

#: ../../library/heapq.rst:241
msgid "Theory"
msgstr "理論"

#: ../../library/heapq.rst:243
msgid ""
"Heaps are arrays for which ``a[k] <= a[2*k+1]`` and ``a[k] <= a[2*k+2]`` for "
"all *k*, counting elements from 0.  For the sake of comparison, non-existing "
"elements are considered to be infinite.  The interesting property of a heap "
"is that ``a[0]`` is always its smallest element."
msgstr ""
"ヒープとは、全ての *k* について、要素を 0 から数えたときに、``a[k] <= "
"a[2*k+1]`` かつ  ``a[k] <= a[2*k+2]`` となる配列です。比較のために、存在しな"
"い要素を無限大と考えます。ヒープの興味深い属性は ``a[0]`` が常に最小の要素に"
"なることです。"

#: ../../library/heapq.rst:248
msgid ""
"The strange invariant above is meant to be an efficient memory "
"representation for a tournament.  The numbers below are *k*, not ``a[k]``::"
msgstr ""
"上記の奇妙な不変式は、勝ち抜き戦判定の際に効率的なメモリ表現を行うためのもの"
"です。以下の番号は ``a[k]`` ではなく *k* とします::"

#: ../../library/heapq.rst:251
msgid ""
"                               0\n"
"\n"
"              1                                 2\n"
"\n"
"      3               4                5               6\n"
"\n"
"  7       8       9       10      11      12      13      14\n"
"\n"
"15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30"
msgstr ""

#: ../../library/heapq.rst:261
msgid ""
"In the tree above, each cell *k* is topping ``2*k+1`` and ``2*k+2``. In a "
"usual binary tournament we see in sports, each cell is the winner over the "
"two cells it tops, and we can trace the winner down the tree to see all "
"opponents s/he had.  However, in many computer applications of such "
"tournaments, we do not need to trace the history of a winner. To be more "
"memory efficient, when a winner is promoted, we try to replace it by "
"something else at a lower level, and the rule becomes that a cell and the "
"two cells it tops contain three different items, but the top cell \"wins\" "
"over the two topped cells."
msgstr ""
"上の木構造では、各セル *k* は ``2*k+1`` および ``2*k+2`` を最大値としていま"
"す。スポーツに見られるような通常の 2 つ組勝ち抜き戦では、各セルはその下にある"
"二つのセルに対する勝者となっていて、個々のセルの勝者を追跡していくことによ"
"り、そのセルに対する全ての相手を見ることができます。しかしながら、このような"
"勝ち抜き戦を使う計算機アプリケーションの多くでは、勝歴を追跡する必要はりませ"
"ん。メモリ効率をより高めるために、勝者が上位に進級した際、下のレベルから持っ"
"てきて置き換えることにすると、あるセルとその下位にある二つのセルは異なる三つ"
"の要素を含み、かつ上位のセルは二つの下位のセルに対して \"勝者と\" なります。"

#: ../../library/heapq.rst:270
msgid ""
"If this heap invariant is protected at all time, index 0 is clearly the "
"overall winner.  The simplest algorithmic way to remove it and find the "
"\"next\" winner is to move some loser (let's say cell 30 in the diagram "
"above) into the 0 position, and then percolate this new 0 down the tree, "
"exchanging values, until the invariant is re-established. This is clearly "
"logarithmic on the total number of items in the tree. By iterating over all "
"items, you get an *O*\\ (*n* log *n*) sort."
msgstr ""
"このヒープ不変式が常に守られれば、インデックス 0 は明らかに最勝者となります。"
"最勝者の要素を除去し、\"次の\" 勝者を見つけるための最も単純なアルゴリズム的手"
"法は、ある敗者要素 (ここでは上図のセル 30 とします) を 0 の場所に持っていき、"
"この新しい 0 を濾過するようにしてツリーを下らせて値を交換してゆきます。不変関"
"係が再構築されるまでこれを続けます。この操作は明らかに、ツリー内の全ての要素"
"数に対して対数的な計算量となります。全ての要素について繰り返すと、 *O*\\ "
"(*n* log *n*) のソートになります。"

#: ../../library/heapq.rst:277
msgid ""
"A nice feature of this sort is that you can efficiently insert new items "
"while the sort is going on, provided that the inserted items are not "
"\"better\" than the last 0'th element you extracted.  This is especially "
"useful in simulation contexts, where the tree holds all incoming events, and "
"the \"win\" condition means the smallest scheduled time.  When an event "
"schedules other events for execution, they are scheduled into the future, so "
"they can easily go into the heap.  So, a heap is a good structure for "
"implementing schedulers (this is what I used for my MIDI sequencer :-)."
msgstr ""
"このソートの良い点は、新たに挿入する要素が、最後に取り出された 0 番目の要素よ"
"りも \"良い値\" でない限り、ソートを行っている最中に新たな要素を効率的に追加"
"できるというところです。この性質は、シミュレーション的な状況で、ツリーで全て"
"の入力イベントを保持し、\"勝者\" の状況を最小のスケジュール時刻にするような場"
"合に特に便利です。あるイベントが他のイベント群の実行をスケジュールする際、そ"
"れらは未来にスケジュールされることになるので、それらのイベント群を容易にヒー"
"プに積むことができます。すなわち、ヒープはスケジューラを実装する上で良いデー"
"タ構造であるといえます (私はこれを MIDI シーケンサで使っています :-)。"

#: ../../library/heapq.rst:286
msgid ""
"Various structures for implementing schedulers have been extensively "
"studied, and heaps are good for this, as they are reasonably speedy, the "
"speed is almost constant, and the worst case is not much different than the "
"average case. However, there are other representations which are more "
"efficient overall, yet the worst cases might be terrible."
msgstr ""
"これまで、スケジューラを実装するための様々なデータ構造が広範に研究されてきま"
"した。ヒープは、十分高速で、速度はおおむね一定であり、最悪の場合でも平均的な"
"速度とさほど変わらないため、良いデータ構造といえます。しかし、最悪の場合にひ"
"どい速度になるとしても、全体的にはより効率の高い他のデータ構造表現も存在しま"
"す。"

#: ../../library/heapq.rst:292
msgid ""
"Heaps are also very useful in big disk sorts.  You most probably all know "
"that a big sort implies producing \"runs\" (which are pre-sorted sequences, "
"whose size is usually related to the amount of CPU memory), followed by a "
"merging passes for these runs, which merging is often very cleverly "
"organised [#]_. It is very important that the initial sort produces the "
"longest runs possible.  Tournaments are a good way to achieve that.  If, "
"using all the memory available to hold a tournament, you replace and "
"percolate items that happen to fit the current run, you'll produce runs "
"which are twice the size of the memory for random input, and much better for "
"input fuzzily ordered."
msgstr ""
"ヒープはまた、巨大なディスクのソートでも非常に有用です。おそらくご存知のよう"
"に、巨大なソートを行うと、複数の \"ラン (run)\" (予めソートされた配列で、その"
"サイズは通常 CPU メモリの量に関係しています) が生成され、続いて統合処理 "
"(merging) がこれらのランを判定します。この統合処理はしばしば非常に巧妙に組織"
"されています [#]_。重要なのは、最初のソートが可能な限り長いランを生成すること"
"です。勝ち抜き戦はこれを達成するための良い方法です。もし利用可能な全てのメモ"
"リを使って勝ち抜き戦を行い、要素を置換および濾過処理して現在のランに収めれ"
"ば、ランダムな入力に対してメモリの二倍のサイズのランを生成することになり、大"
"体順序づけがなされている入力に対してはもっと高い効率になります。"

#: ../../library/heapq.rst:302
msgid ""
"Moreover, if you output the 0'th item on disk and get an input which may not "
"fit in the current tournament (because the value \"wins\" over the last "
"output value), it cannot fit in the heap, so the size of the heap "
"decreases.  The freed memory could be cleverly reused immediately for "
"progressively building a second heap, which grows at exactly the same rate "
"the first heap is melting.  When the first heap completely vanishes, you "
"switch heaps and start a new run.  Clever and quite effective!"
msgstr ""
"さらに、ディスク上の 0 番目の要素を出力して、現在の勝ち抜き戦に (最後に出力し"
"た値に \"勝って\" しまうために) 収められない入力を得たなら、ヒープには収まら"
"ないため、ヒープのサイズは減少します。解放されたメモリは二つ目のヒープを段階"
"的に構築するために巧妙に再利用することができ、この二つ目のヒープは最初のヒー"
"プが崩壊していくのと同じ速度で成長します。最初のヒープが完全に消滅したら、"
"ヒープを切り替えて新たなランを開始します。なんと巧妙で効率的なのでしょう！"

#: ../../library/heapq.rst:310
msgid ""
"In a word, heaps are useful memory structures to know.  I use them in a few "
"applications, and I think it is good to keep a 'heap' module around. :-)"
msgstr ""
"一言で言うと、ヒープは知って得するメモリ構造です。私はいくつかのアプリケー"
"ションでヒープを使っていて、'ヒープ' モジュールを常備するのはいい事だと考えて"
"います。:-)"

#: ../../library/heapq.rst:314
msgid "Footnotes"
msgstr "脚注"

#: ../../library/heapq.rst:315
msgid ""
"The disk balancing algorithms which are current, nowadays, are more annoying "
"than clever, and this is a consequence of the seeking capabilities of the "
"disks. On devices which cannot seek, like big tape drives, the story was "
"quite different, and one had to be very clever to ensure (far in advance) "
"that each tape movement will be the most effective possible (that is, will "
"best participate at \"progressing\" the merge).  Some tapes were even able "
"to read backwards, and this was also used to avoid the rewinding time. "
"Believe me, real good tape sorts were quite spectacular to watch! From all "
"times, sorting has always been a Great Art! :-)"
msgstr ""
"現在使われているディスクバランス化アルゴリズムは、最近ではもはや巧妙というよ"
"りも目障りになっています。これは、ディスクのシーク機能が向上した結果です。巨"
"大な容量を持つテープドライブなど、シーク不能なデバイスでは、事情は全く異なり"
"ます。テープの 1 つ 1 つの動きが可能な限り効率的に行われるように非常に巧妙な"
"処理を (相当前もって) 確保しなければなりません (統合処理の \"進行\" に最も多"
"く使用させます)。テープによっては逆方向に読むことさえでき、巻き戻しに時間を取"
"られるのを避けるために使うこともできます。正直、本当に良いテープソートは見て"
"いて素晴らしく驚異的なものです！ソートというのは常に偉大な芸術なのです！:-)"
