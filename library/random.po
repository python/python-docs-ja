# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Shin Saito, 2021
# Takeshi Nakazato, 2024
# tomo, 2024
# 石井明久, 2024
# Takanori Suzuki <takanori@takanory.net>, 2024
# Arihiro TAKASE, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-27 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 01:12+0000\n"
"Last-Translator: Arihiro TAKASE, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/random.rst:2
msgid ":mod:`!random` --- Generate pseudo-random numbers"
msgstr ":mod:`!random` --- 疑似乱数を生成する"

#: ../../library/random.rst:7
msgid "**Source code:** :source:`Lib/random.py`"
msgstr "**ソースコード:** :source:`Lib/random.py`"

#: ../../library/random.rst:11
msgid ""
"This module implements pseudo-random number generators for various "
"distributions."
msgstr "このモジュールでは様々な分布をもつ擬似乱数生成器を実装しています。"

#: ../../library/random.rst:14
msgid ""
"For integers, there is uniform selection from a range. For sequences, there "
"is uniform selection of a random element, a function to generate a random "
"permutation of a list in-place, and a function for random sampling without "
"replacement."
msgstr ""
"整数用に、ある範囲からの一様な選択があります。シーケンス用には、シーケンスか"
"らのランダムな要素の一様な選択、リストのランダムな置換をインプレースに生成す"
"る関数、順列を置換せずにランダムサンプリングする関数があります。"

#: ../../library/random.rst:19
msgid ""
"On the real line, there are functions to compute uniform, normal (Gaussian), "
"lognormal, negative exponential, gamma, and beta distributions. For "
"generating distributions of angles, the von Mises distribution is available."
msgstr ""
"実数用としては、一様分布、正規分布 (ガウス分布)、対数正規分布、負の指数分布、"
"ガンマおよびベータ分布を計算する関数があります。角度の分布を生成するにはフォ"
"ン・ミーゼス分布が利用できます。"

#: ../../library/random.rst:23
msgid ""
"Almost all module functions depend on the basic function :func:`.random`, "
"which generates a random float uniformly in the half-open range ``0.0 <= X < "
"1.0``. Python uses the Mersenne Twister as the core generator.  It produces "
"53-bit precision floats and has a period of 2\\*\\*19937-1.  The underlying "
"implementation in C is both fast and threadsafe.  The Mersenne Twister is "
"one of the most extensively tested random number generators in existence.  "
"However, being completely deterministic, it is not suitable for all "
"purposes, and is completely unsuitable for cryptographic purposes."
msgstr ""
"ほとんど全てのモジュール関数は、基礎となる関数 :func:`random` に依存します。"
"この関数はランダムな浮動小数点数を半開区間 ``0.0 <= X < 1.0`` 内に一様に生成"
"します。Python は中心となる乱数生成器としてメルセンヌツイスタを使います。これ"
"は 53 ビット精度の浮動小数点を生成し、周期は 2\\*\\*19937-1 です。本体は C で"
"実装されていて、高速でスレッドセーフです。メルセンヌツイスタは、現存する中で"
"最も広範囲にテストされた乱数生成器のひとつです。しかしながら、メルセンヌツイ"
"スタは完全に決定論的であるため、全ての目的に合致しているわけではなく、暗号化"
"の目的には全く向いていません。"

#: ../../library/random.rst:32
msgid ""
"The functions supplied by this module are actually bound methods of a hidden "
"instance of the :class:`random.Random` class.  You can instantiate your own "
"instances of :class:`Random` to get generators that don't share state."
msgstr ""
"このモジュールで提供されている関数は、実際には :class:`random.Random` クラス"
"の隠蔽されたインスタンスのメソッドに束縛されています。内部状態を共有しない生"
"成器を取得するため、自分で :class:`Random` のインスタンスを生成することができ"
"ます。"

#: ../../library/random.rst:36
msgid ""
"Class :class:`Random` can also be subclassed if you want to use a different "
"basic generator of your own devising: see the documentation on that class "
"for more details."
msgstr ""

#: ../../library/random.rst:40
msgid ""
"The :mod:`random` module also provides the :class:`SystemRandom` class which "
"uses the system function :func:`os.urandom` to generate random numbers from "
"sources provided by the operating system."
msgstr ""
":mod:`random` モジュールは :class:`SystemRandom` クラスも提供していて、このク"
"ラスは OS が提供している乱数発生源を利用して乱数を生成するシステム関数 :func:"
"`os.urandom` を使うものです。"

#: ../../library/random.rst:46
msgid ""
"The pseudo-random generators of this module should not be used for security "
"purposes.  For security or cryptographic uses, see the :mod:`secrets` module."
msgstr ""
"このモジュールの擬似乱数生成器をセキュリティ目的に使用してはいけません。セ"
"キュリティや暗号学的な用途については :mod:`secrets` モジュールを参照してくだ"
"さい。"

#: ../../library/random.rst:52
msgid ""
"M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally "
"equidistributed uniform pseudorandom number generator\", ACM Transactions on "
"Modeling and Computer Simulation Vol. 8, No. 1, January pp.3--30 1998."
msgstr ""
"M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-dimensionally "
"equidistributed uniform pseudorandom number generator\", ACM Transactions on "
"Modeling and Computer Simulation Vol. 8, No. 1, January pp.3--30 1998."

#: ../../library/random.rst:57
msgid ""
"`Complementary-Multiply-with-Carry recipe <https://code.activestate.com/"
"recipes/576707-long-period-random-number-generator/>`_ for a compatible "
"alternative random number generator with a long period and comparatively "
"simple update operations."
msgstr ""
"`Complementary-Multiply-with-Carry recipe <https://code.activestate.com/"
"recipes/576707-long-period-random-number-generator/>`_  長い周期と比較的シン"
"プルな更新操作を備えた互換性のある別の乱数生成器。"

#: ../../library/random.rst:63
msgid ""
"The global random number generator and instances of :class:`Random` are "
"thread-safe. However, in the free-threaded build, concurrent calls to the "
"global generator or to the same instance of :class:`Random` may encounter "
"contention and poor performance. Consider using separate instances of :class:"
"`Random` per thread instead."
msgstr ""

#: ../../library/random.rst:70
msgid "Bookkeeping functions"
msgstr "保守 (bookkeeping) 関数"

#: ../../library/random.rst:74
msgid "Initialize the random number generator."
msgstr "乱数生成器を初期化します。"

#: ../../library/random.rst:76
msgid ""
"If *a* is omitted or ``None``, the current system time is used.  If "
"randomness sources are provided by the operating system, they are used "
"instead of the system time (see the :func:`os.urandom` function for details "
"on availability)."
msgstr ""
"*a* が省略されるか ``None`` の場合、現在のシステム時刻が使用されます。乱数の"
"ソースがオペレーティングシステムによって提供される場合、システム時刻の代わり"
"にそれが使用されます (利用可能性についての詳細は :func:`os.urandom` 関数を参"
"照)。"

#: ../../library/random.rst:81
msgid "If *a* is an int, it is used directly."
msgstr "*a* が int の場合、それが直接使われます。"

#: ../../library/random.rst:83
msgid ""
"With version 2 (the default), a :class:`str`, :class:`bytes`, or :class:"
"`bytearray` object gets converted to an :class:`int` and all of its bits are "
"used."
msgstr ""
"バージョン2 (デフォルト) では、 :class:`str`, :class:`bytes`, :class:"
"`bytearray` オブジェクトは :class:`int` に変換され、そのビットがすべて使用さ"
"れます。"

#: ../../library/random.rst:86
msgid ""
"With version 1 (provided for reproducing random sequences from older "
"versions of Python), the algorithm for :class:`str` and :class:`bytes` "
"generates a narrower range of seeds."
msgstr ""
"バージョン1 (Python の古いバージョンでの乱数列を再現するために提供される) で"
"は、 :class:`str` と :class:`bytes` に対して適用されるアルゴリズムは、より狭"
"い範囲のシードを生成します。"

#: ../../library/random.rst:90
msgid ""
"Moved to the version 2 scheme which uses all of the bits in a string seed."
msgstr "文字列シードのすべてのビットを使うバージョン2スキームに移行。"

#: ../../library/random.rst:93
msgid ""
"The *seed* must be one of the following types: ``None``, :class:`int`, :"
"class:`float`, :class:`str`, :class:`bytes`, or :class:`bytearray`."
msgstr ""
"*seed* は次の型の内のいずれかでなければなりません: ``None``、:class:`int`、:"
"class:`float`、:class:`str`、:class:`bytes`、:class:`bytearray`。"

#: ../../library/random.rst:100
msgid ""
"Return an object capturing the current internal state of the generator.  "
"This object can be passed to :func:`setstate` to restore the state."
msgstr ""
"乱数生成器の現在の内部状態を記憶したオブジェクトを返します。このオブジェクト"
"を :func:`setstate` に渡して内部状態を復元することができます。"

#: ../../library/random.rst:106
msgid ""
"*state* should have been obtained from a previous call to :func:`getstate`, "
"and :func:`setstate` restores the internal state of the generator to what it "
"was at the time :func:`getstate` was called."
msgstr ""
"*state* は予め :func:`getstate` を呼び出して得ておかなくてはなりません。 :"
"func:`setstate` は :func:`getstate` が呼び出された時の乱数生成器の内部状態を"
"復元します。"

#: ../../library/random.rst:112
msgid "Functions for bytes"
msgstr "バイト列用の関数"

#: ../../library/random.rst:116
msgid "Generate *n* random bytes."
msgstr "*n* バイトのランダムなバイト列を生成します。"

#: ../../library/random.rst:118
msgid ""
"This method should not be used for generating security tokens. Use :func:"
"`secrets.token_bytes` instead."
msgstr ""
"セキュリティトークンを生成する目的で、このメソッドを使用しないでください。代"
"わりに :func:`secrets.token_bytes` を使用してください。"

#: ../../library/random.rst:125
msgid "Functions for integers"
msgstr "整数用の関数"

#: ../../library/random.rst:130
msgid "Return a randomly selected element from ``range(start, stop, step)``."
msgstr ""
"``range(start, stop, step)`` の要素からランダムに選ばれた要素を返します。"

#: ../../library/random.rst:132
msgid ""
"This is roughly equivalent to ``choice(range(start, stop, step))`` but "
"supports arbitrarily large ranges and is optimized for common cases."
msgstr ""

#: ../../library/random.rst:135
msgid "The positional argument pattern matches the :func:`range` function."
msgstr "位置引数のパターンは :func:`range` 関数の引数と一致します。"

#: ../../library/random.rst:137
msgid ""
"Keyword arguments should not be used because they can be interpreted in "
"unexpected ways. For example ``randrange(start=100)`` is interpreted as "
"``randrange(0, 100, 1)``."
msgstr ""

#: ../../library/random.rst:141
msgid ""
":meth:`randrange` is more sophisticated about producing equally distributed "
"values.  Formerly it used a style like ``int(random()*n)`` which could "
"produce slightly uneven distributions."
msgstr ""
"一様に分布した値の生成に関して :meth:`randrange` がより洗練されました。以前"
"は ``int(random()*n)`` のようなやや一様でない分布を生成するスタイルを使用して"
"いました。"

#: ../../library/random.rst:146
msgid ""
"Automatic conversion of non-integer types is no longer supported. Calls such "
"as ``randrange(10.0)`` and ``randrange(Fraction(10, 1))`` now raise a :exc:"
"`TypeError`."
msgstr ""
"整数以外の型の自動変換はサポートされなくなりました。``randrange(10.0)`` や "
"``randrange(Fraction(10, 1))`` のような呼び出しは :exc:`TypeError` を送出しま"
"す。"

#: ../../library/random.rst:153
msgid ""
"Return a random integer *N* such that ``a <= N <= b``.  Alias for "
"``randrange(a, b+1)``."
msgstr ""
"``a <= N <= b`` であるようなランダムな整数 *N* を返します。``randrange(a, "
"b+1)`` のエイリアスです。"

#: ../../library/random.rst:158
msgid ""
"Returns a non-negative Python integer with *k* random bits. This method is "
"supplied with the Mersenne Twister generator and some other generators may "
"also provide it as an optional part of the API. When available, :meth:"
"`getrandbits` enables :meth:`randrange` to handle arbitrarily large ranges."
msgstr ""
"*k* 桁の乱数ビットを持つ Python の整数を生成し、返します。このメソッドはメル"
"センヌツイスタ生成器で提供されており、その他の乱数生成器でもオプションの API "
"として提供されている場合があります。:meth:`getrandbits` が使用可能な場合、:"
"meth:`randrange` は任意の範囲の乱数を生成できるようになります。"

#: ../../library/random.rst:164
msgid "This method now accepts zero for *k*."
msgstr "*k* の値として 0 が許されるようになりました。"

#: ../../library/random.rst:169
msgid "Functions for sequences"
msgstr "シーケンス用の関数"

#: ../../library/random.rst:173
msgid ""
"Return a random element from the non-empty sequence *seq*. If *seq* is "
"empty, raises :exc:`IndexError`."
msgstr ""
"空でないシーケンス *seq* からランダムに要素を返します。 *seq* が空のとき"
"は、 :exc:`IndexError` が送出されます。"

#: ../../library/random.rst:178
msgid ""
"Return a *k* sized list of elements chosen from the *population* with "
"replacement. If the *population* is empty, raises :exc:`IndexError`."
msgstr ""
"*population* から重複ありで選んだ要素からなる大きさ *k* のリストを返します。"
"*population* が空の場合 :exc:`IndexError` を送出します。"

#: ../../library/random.rst:181
msgid ""
"If a *weights* sequence is specified, selections are made according to the "
"relative weights.  Alternatively, if a *cum_weights* sequence is given, the "
"selections are made according to the cumulative weights (perhaps computed "
"using :func:`itertools.accumulate`).  For example, the relative weights "
"``[10, 5, 30, 5]`` are equivalent to the cumulative weights ``[10, 15, 45, "
"50]``.  Internally, the relative weights are converted to cumulative weights "
"before making selections, so supplying the cumulative weights saves work."
msgstr ""
"*weights* シーケンスが与えられた場合、相対的な重みに基づいて要素が選ばれま"
"す。あるいは、*cum_weights* シーケンスが与えられた場合、累積的な重み (:func:"
"`itertools.accumulate` を用いて計算されるかもしれません) で要素が選ばれます。"
"例えば、相対的な重み ``[10, 5, 30, 5]`` は累積的な重み ``[10, 15, 45, 50]`` "
"と等価です。内部的には、相対的な重みは要素選択の前に累積的な重みに変換される"
"ため、累積的な重みを渡すと手間を省けます。"

#: ../../library/random.rst:190
msgid ""
"If neither *weights* nor *cum_weights* are specified, selections are made "
"with equal probability.  If a weights sequence is supplied, it must be the "
"same length as the *population* sequence.  It is a :exc:`TypeError` to "
"specify both *weights* and *cum_weights*."
msgstr ""
"*weights* および *cum_weights* が与えられなかった場合、要素は同じ確率で選択さ"
"れます。重みのシーケンスが与えられた場合、その長さは *population* シーケンス"
"と同じでなければなりません。*weights* と *cum_weights* を同時に与えると :exc:"
"`TypeError` が送出されます。"

#: ../../library/random.rst:195
msgid ""
"The *weights* or *cum_weights* can use any numeric type that interoperates "
"with the :class:`float` values returned by :func:`random` (that includes "
"integers, floats, and fractions but excludes decimals).  Weights are assumed "
"to be non-negative and finite.  A :exc:`ValueError` is raised if all weights "
"are zero."
msgstr ""
"*weights* や *cum_weights* には :func:`random` が返す :class:`float` 値と相互"
"に変換できるような、任意の数値型を使用できます (int、float、fraction を含みま"
"すが、decimal は除きます)。重みには非負で有限の値を指定することが規定されま"
"す。全ての重みが 0 の場合、例外 :exc:`ValueError` が送出されます。"

#: ../../library/random.rst:201
msgid ""
"For a given seed, the :func:`choices` function with equal weighting "
"typically produces a different sequence than repeated calls to :func:"
"`choice`.  The algorithm used by :func:`choices` uses floating-point "
"arithmetic for internal consistency and speed.  The algorithm used by :func:"
"`choice` defaults to integer arithmetic with repeated selections to avoid "
"small biases from round-off error."
msgstr ""
"与えられた種に対して、同じ重みを持つ :func:`choices` 関数は、一般に :func:"
"`choice` を繰り返し呼び出す場合とは異なるシーケンスを生成します。 :func:"
"`choices` で使用されるアルゴリズムは、内部の一貫性とスピードのために浮動小数"
"点演算を使用します。 :func:`choice` で使われるアルゴリズムは、丸め誤差による"
"小さな偏りを避けるために、デフォルトでは選択を繰り返す整数演算になっていま"
"す。"

#: ../../library/random.rst:210
msgid "Raises a :exc:`ValueError` if all weights are zero."
msgstr "全ての重みが 0 の場合、例外 :exc:`ValueError` を送出します。"

#: ../../library/random.rst:216
msgid "Shuffle the sequence *x* in place."
msgstr "シーケンス *x* をインプレースにシャッフルします。"

#: ../../library/random.rst:218
msgid ""
"To shuffle an immutable sequence and return a new shuffled list, use "
"``sample(x, k=len(x))`` instead."
msgstr ""
"イミュータブルなシーケンスをシャッフルしてシャッフルされたリストを新たに返す"
"には、代わりに ``sample(x, k=len(x))`` を使用してください。"

#: ../../library/random.rst:221
msgid ""
"Note that even for small ``len(x)``, the total number of permutations of *x* "
"can quickly grow larger than the period of most random number generators. "
"This implies that most permutations of a long sequence can never be "
"generated.  For example, a sequence of length 2080 is the largest that can "
"fit within the period of the Mersenne Twister random number generator."
msgstr ""
"たとえ ``len(x)`` が小さくても、*x* の並べ替えの総数 (訳注: 要素数の階乗) は"
"大半の乱数生成器の周期よりもすぐに大きくなることに注意してください。つまり、"
"長いシーケンスの大半の並べ替えは決して生成されないだろう、ということです。例"
"えば、長さ 2080 のシーケンスがメルセンヌツイスタ生成器の周期に収まる中で最大"
"のものになります。"

#: ../../library/random.rst:227
msgid "Removed the optional parameter *random*."
msgstr "オプション引数 *random* が削除されました。"

#: ../../library/random.rst:233
msgid ""
"Return a *k* length list of unique elements chosen from the population "
"sequence.  Used for random sampling without replacement."
msgstr ""
"母集団のシーケンスから選ばれた長さ *k* の一意な要素からなるリストを返します。"
"値の置換を行わないランダムサンプリングに用いられます。"

#: ../../library/random.rst:236
msgid ""
"Returns a new list containing elements from the population while leaving the "
"original population unchanged.  The resulting list is in selection order so "
"that all sub-slices will also be valid random samples.  This allows raffle "
"winners (the sample) to be partitioned into grand prize and second place "
"winners (the subslices)."
msgstr ""
"母集団自体を変更せずに、母集団内の要素を含む新たなリストを返します。返された"
"リストは選択された順に並んでいるので、このリストの部分スライスもランダムなサ"
"ンプルになります。これにより、くじの当選者 (サンプル) を1等賞と2等賞（の部分"
"スライス）に分けることも可能です。"

#: ../../library/random.rst:242
msgid ""
"Members of the population need not be :term:`hashable` or unique.  If the "
"population contains repeats, then each occurrence is a possible selection in "
"the sample."
msgstr ""
"母集団の要素は :term:`ハッシュ可能 <hashable>` でなくても、ユニークでなくても"
"かまいません。母集団が繰り返しを含む場合、出現するそれぞれがサンプルに選択さ"
"れえます。"

#: ../../library/random.rst:245
msgid ""
"Repeated elements can be specified one at a time or with the optional "
"keyword-only *counts* parameter.  For example, ``sample(['red', 'blue'], "
"counts=[4, 2], k=5)`` is equivalent to ``sample(['red', 'red', 'red', 'red', "
"'blue', 'blue'], k=5)``."
msgstr ""
"母集団に重複がある場合はその分だけ1つずつ指定するか、キーワード専用オプション"
"引数 *counts* で指定することができます。例えば、 ``sample(['red', 'blue'], "
"counts=[4, 2], k=5)`` は ``sample(['red', 'red', 'red', 'red', 'blue', "
"'blue'], k=5)`` と等価になります。"

#: ../../library/random.rst:250
msgid ""
"To choose a sample from a range of integers, use a :func:`range` object as "
"an argument.  This is especially fast and space efficient for sampling from "
"a large population:  ``sample(range(10000000), k=60)``."
msgstr ""
"ある範囲の整数からサンプルを取る場合、引数に :func:`range` オブジェクトを使用"
"してください。大きな母集団の場合、これは特に速く、メモリ効率が良いです: "
"``sample(range(10000000), k=60)``。"

#: ../../library/random.rst:254
msgid ""
"If the sample size is larger than the population size, a :exc:`ValueError` "
"is raised."
msgstr ""
"サンプルの大きさが母集団の大きさより大きい場合 :exc:`ValueError` が送出されま"
"す。"

#: ../../library/random.rst:257
msgid "Added the *counts* parameter."
msgstr "*counts* 引数が追加されました。"

#: ../../library/random.rst:262
msgid ""
"The *population* must be a sequence.  Automatic conversion of sets to lists "
"is no longer supported."
msgstr ""

#: ../../library/random.rst:266
msgid "Discrete distributions"
msgstr ""

#: ../../library/random.rst:268
msgid "The following function generates a discrete distribution."
msgstr ""

#: ../../library/random.rst:272
msgid ""
"`Binomial distribution <https://mathworld.wolfram.com/BinomialDistribution."
"html>`_. Return the number of successes for *n* independent trials with the "
"probability of success in each trial being *p*:"
msgstr ""

#: ../../library/random.rst:277
msgid "Mathematically equivalent to::"
msgstr ""

#: ../../library/random.rst:279
msgid "sum(random() < p for i in range(n))"
msgstr ""

#: ../../library/random.rst:281
msgid ""
"The number of trials *n* should be a non-negative integer. The probability "
"of success *p* should be between ``0.0 <= p <= 1.0``. The result is an "
"integer in the range ``0 <= X <= n``."
msgstr ""

#: ../../library/random.rst:291
msgid "Real-valued distributions"
msgstr "実数分布"

#: ../../library/random.rst:293
msgid ""
"The following functions generate specific real-valued distributions. "
"Function parameters are named after the corresponding variables in the "
"distribution's equation, as used in common mathematical practice; most of "
"these equations can be found in any statistics text."
msgstr ""
"以下の関数は特定の実数値分布を生成します。関数の引数の名前は、一般的な数学の"
"慣例で使われている分布の公式の対応する変数から取られています; これらの公式の"
"ほとんどはどんな統計学のテキストにも載っています。"

#: ../../library/random.rst:301
msgid ""
"Return the next random floating-point number in the range ``0.0 <= X < 1.0``"
msgstr "ランダムな浮動小数点数（範囲は ``0.0 <= X < 1.0``）を返します。"

#: ../../library/random.rst:306
msgid ""
"Return a random floating-point number *N* such that ``a <= N <= b`` for ``a "
"<= b`` and ``b <= N <= a`` for ``b < a``."
msgstr ""
"``a <= b`` であれば ``a <= N <= b`` 、``b < a`` であれば ``b <= N <= a`` であ"
"るようなランダムな浮動小数点数 *N* を返します。"

#: ../../library/random.rst:309
msgid ""
"The end-point value ``b`` may or may not be included in the range depending "
"on floating-point rounding in the expression ``a + (b-a) * random()``."
msgstr ""
"端点の値 ``b`` が範囲に含まれるかどうかは、式 ``a + (b-a) * random()`` におけ"
"る浮動小数点の丸めに依存します。"

#: ../../library/random.rst:316
msgid ""
"Return a random floating-point number *N* such that ``low <= N <= high`` and "
"with the specified *mode* between those bounds.  The *low* and *high* bounds "
"default to zero and one.  The *mode* argument defaults to the midpoint "
"between the bounds, giving a symmetric distribution."
msgstr ""
"``low <= N <= high`` でありこれら境界値の間に指定された最頻値 *mode* を持つよ"
"うなランダムな浮動小数点数 *N* を返します。境界 *low* と *high* のデフォルト"
"は 0 と 1 です。最頻値 *mode* 引数のデフォルトは両境界値の中点になり、対称な"
"分布を与えます。"

#: ../../library/random.rst:324
msgid ""
"Beta distribution.  Conditions on the parameters are ``alpha > 0`` and "
"``beta > 0``. Returned values range between 0 and 1."
msgstr ""
"ベータ分布です。引数の満たすべき条件は ``alpha > 0`` および ``beta > 0`` で"
"す。 0 から 1 の範囲の値を返します。"

#: ../../library/random.rst:330
msgid ""
"Exponential distribution.  *lambd* is 1.0 divided by the desired mean.  It "
"should be nonzero.  (The parameter would be called \"lambda\", but that is a "
"reserved word in Python.)  Returned values range from 0 to positive infinity "
"if *lambd* is positive, and from negative infinity to 0 if *lambd* is "
"negative."
msgstr ""
"指数分布です。*lambd* は平均にしたい値の逆数です。(この引数は \"lambda\" と呼"
"ぶべきなのですが、Python の予約語なので使えません。) 返す値の範囲は *lambd* "
"が正なら 0 から正の無限大、*lambd* が負なら負の無限大から 0 です。"

#: ../../library/random.rst:336
msgid "Added the default value for ``lambd``."
msgstr "``lambd`` にデフォルト値を追加しました。"

#: ../../library/random.rst:342
msgid ""
"Gamma distribution.  (*Not* the gamma function!)  The shape and scale "
"parameters, *alpha* and *beta*, must have positive values. (Calling "
"conventions vary and some sources define 'beta' as the inverse of the scale)."
msgstr ""

#: ../../library/random.rst:347
msgid "The probability distribution function is::"
msgstr "確率分布関数は::"

#: ../../library/random.rst:349
msgid ""
"          x ** (alpha - 1) * math.exp(-x / beta)\n"
"pdf(x) =  --------------------------------------\n"
"            math.gamma(alpha) * beta ** alpha"
msgstr ""

#: ../../library/random.rst:356
msgid ""
"Normal distribution, also called the Gaussian distribution. *mu* is the "
"mean, and *sigma* is the standard deviation.  This is slightly faster than "
"the :func:`normalvariate` function defined below."
msgstr ""
"正規分布、またはガウス分布と呼ばれます。 *mu* は平均であり、 *sigma* は標準偏"
"差です。この関数は後で定義する関数 :func:`normalvariate` より少しだけ高速で"
"す。"

#: ../../library/random.rst:361
msgid ""
"Multithreading note:  When two threads call this function simultaneously, it "
"is possible that they will receive the same return value.  This can be "
"avoided in three ways. 1) Have each thread use a different instance of the "
"random number generator. 2) Put locks around all calls. 3) Use the slower, "
"but thread-safe :func:`normalvariate` function instead."
msgstr ""

#: ../../library/random.rst:368 ../../library/random.rst:384
msgid "*mu* and *sigma* now have default arguments."
msgstr "*mu* と *sigma* にデフォルト値を追加しました。"

#: ../../library/random.rst:374
msgid ""
"Log normal distribution.  If you take the natural logarithm of this "
"distribution, you'll get a normal distribution with mean *mu* and standard "
"deviation *sigma*.  *mu* can have any value, and *sigma* must be greater "
"than zero."
msgstr ""
"対数正規分布です。この分布を自然対数を用いた分布にした場合、平均 *mu* で標準"
"偏差 *sigma* の正規分布になります。 *mu* は任意の値を取ることができ、*sigma* "
"はゼロより大きくなければなりません。"

#: ../../library/random.rst:382
msgid ""
"Normal distribution.  *mu* is the mean, and *sigma* is the standard "
"deviation."
msgstr "正規分布です。 *mu* は平均で、 *sigma* は標準偏差です。"

#: ../../library/random.rst:390
msgid ""
"*mu* is the mean angle, expressed in radians between 0 and 2\\*\\ *pi*, and "
"*kappa* is the concentration parameter, which must be greater than or equal "
"to zero.  If *kappa* is equal to zero, this distribution reduces to a "
"uniform random angle over the range 0 to 2\\*\\ *pi*."
msgstr ""
"*mu* は平均の角度で、0 から 2\\*\\ *pi* までのラジアンで表されます。 *kappa* "
"は濃度パラメータで、ゼロ以上でなければなりません。*kappa* がゼロに等しい場"
"合、この分布は範囲 0 から 2\\*\\ *pi* の一様でランダムな角度の分布に退化しま"
"す。"

#: ../../library/random.rst:398
msgid "Pareto distribution.  *alpha* is the shape parameter."
msgstr "パレート分布です。 *alpha* は形状パラメータです。"

#: ../../library/random.rst:403
msgid ""
"Weibull distribution.  *alpha* is the scale parameter and *beta* is the "
"shape parameter."
msgstr ""
"ワイブル分布です。 *alpha* は尺度パラメタで、 *beta* は形状パラメータです。"

#: ../../library/random.rst:408
msgid "Alternative Generator"
msgstr "他の生成器"

#: ../../library/random.rst:412
msgid ""
"Class that implements the default pseudo-random number generator used by "
"the :mod:`random` module."
msgstr ""
":mod:`random`  モジュールがデフォルトで使用する疑似乱数生成器を実装したクラス"
"です。"

#: ../../library/random.rst:415
msgid ""
"Formerly the *seed* could be any hashable object.  Now it is limited to: "
"``None``, :class:`int`, :class:`float`, :class:`str`, :class:`bytes`, or :"
"class:`bytearray`."
msgstr ""
"以前は *seed* は任意のハッシュ可能オブジェクトが設定可能でした。現在は "
"``None``, :class:`int`, :class:`float`, :class:`str`, :class:`bytes`, :class:"
"`bytearray` に制限されています。  "

#: ../../library/random.rst:420
msgid ""
"Subclasses of :class:`!Random` should override the following methods if they "
"wish to make use of a different basic generator:"
msgstr ""

#: ../../library/random.rst:425
msgid ""
"Override this method in subclasses to customise the :meth:`~random.seed` "
"behaviour of :class:`!Random` instances."
msgstr ""

#: ../../library/random.rst:430
msgid ""
"Override this method in subclasses to customise the :meth:`~random.getstate` "
"behaviour of :class:`!Random` instances."
msgstr ""

#: ../../library/random.rst:435
msgid ""
"Override this method in subclasses to customise the :meth:`~random.setstate` "
"behaviour of :class:`!Random` instances."
msgstr ""

#: ../../library/random.rst:440
msgid ""
"Override this method in subclasses to customise the :meth:`~random.random` "
"behaviour of :class:`!Random` instances."
msgstr ""

#: ../../library/random.rst:443
msgid ""
"Optionally, a custom generator subclass can also supply the following method:"
msgstr ""

#: ../../library/random.rst:447
msgid ""
"Override this method in subclasses to customise the :meth:`~random."
"getrandbits` behaviour of :class:`!Random` instances."
msgstr ""

#: ../../library/random.rst:453
msgid ""
"Class that uses the :func:`os.urandom` function for generating random "
"numbers from sources provided by the operating system. Not available on all "
"systems. Does not rely on software state, and sequences are not "
"reproducible. Accordingly, the :meth:`seed` method has no effect and is "
"ignored. The :meth:`getstate` and :meth:`setstate` methods raise :exc:"
"`NotImplementedError` if called."
msgstr ""
"オペレーティングシステムの提供する発生源によって乱数を生成する :func:`os."
"urandom` 関数を使うクラスです。すべてのシステムで使えるメソッドではありませ"
"ん。ソフトウェアの状態に依存してはいけませんし、一連の操作は再現不能です。"
"従って、 :meth:`seed` メソッドは何の影響も及ぼさず、無視されます。 :meth:"
"`getstate` と :meth:`setstate` メソッドが呼び出されると、例外 :exc:"
"`NotImplementedError` が送出されます。"

#: ../../library/random.rst:462
msgid "Notes on Reproducibility"
msgstr "再現性について"

#: ../../library/random.rst:464
msgid ""
"Sometimes it is useful to be able to reproduce the sequences given by a "
"pseudo-random number generator.  By reusing a seed value, the same sequence "
"should be reproducible from run to run as long as multiple threads are not "
"running."
msgstr ""
"疑似乱数生成器から与えられたシーケンスを再現できると便利なことがあります。"
"シード値を再利用することで、複数のスレッドが実行されていない限り、実行ごとに"
"同じシーケンスが再現できます。"

#: ../../library/random.rst:468
msgid ""
"Most of the random module's algorithms and seeding functions are subject to "
"change across Python versions, but two aspects are guaranteed not to change:"
msgstr ""
"random モジュールのアルゴリズムやシード処理関数のほとんどは、Python バージョ"
"ン間で変更される対象となりますが、次の二点は変更されないことが保証されていま"
"す:"

#: ../../library/random.rst:471
msgid ""
"If a new seeding method is added, then a backward compatible seeder will be "
"offered."
msgstr ""
"新しいシード処理メソッドが追加されたら、後方互換なシード処理器が提供されま"
"す。"

#: ../../library/random.rst:474
msgid ""
"The generator's :meth:`~Random.random` method will continue to produce the "
"same sequence when the compatible seeder is given the same seed."
msgstr ""
"生成器の :meth:`~Random.random` メソッドは、互換なシード処理器に同じシードが"
"与えられた場合、引き続き同じシーケンスを生成します。"

#: ../../library/random.rst:480
msgid "Examples"
msgstr "使用例"

#: ../../library/random.rst:482
msgid "Basic examples::"
msgstr "基礎的な例::"

#: ../../library/random.rst:484
msgid ""
">>> random()                          # Random float:  0.0 <= x < 1.0\n"
"0.37444887175646646\n"
"\n"
">>> uniform(2.5, 10.0)                # Random float:  2.5 <= x <= 10.0\n"
"3.1800146073117523\n"
"\n"
">>> expovariate(1 / 5)                # Interval between arrivals averaging "
"5 seconds\n"
"5.148957571865031\n"
"\n"
">>> randrange(10)                     # Integer from 0 to 9 inclusive\n"
"7\n"
"\n"
">>> randrange(0, 101, 2)              # Even integer from 0 to 100 "
"inclusive\n"
"26\n"
"\n"
">>> choice(['win', 'lose', 'draw'])   # Single random element from a "
"sequence\n"
"'draw'\n"
"\n"
">>> deck = 'ace two three four'.split()\n"
">>> shuffle(deck)                     # Shuffle a list\n"
">>> deck\n"
"['four', 'two', 'ace', 'three']\n"
"\n"
">>> sample([10, 20, 30, 40, 50], k=4) # Four samples without replacement\n"
"[40, 10, 50, 30]"
msgstr ""

#: ../../library/random.rst:510
msgid "Simulations::"
msgstr "シミュレーション::"

#: ../../library/random.rst:512
msgid ""
">>> # Six roulette wheel spins (weighted sampling with replacement)\n"
">>> choices(['red', 'black', 'green'], [18, 18, 2], k=6)\n"
"['red', 'green', 'black', 'black', 'red', 'black']\n"
"\n"
">>> # Deal 20 cards without replacement from a deck\n"
">>> # of 52 playing cards, and determine the proportion of cards\n"
">>> # with a ten-value:  ten, jack, queen, or king.\n"
">>> deal = sample(['tens', 'low cards'], counts=[16, 36], k=20)\n"
">>> deal.count('tens') / 20\n"
"0.15\n"
"\n"
">>> # Estimate the probability of getting 5 or more heads from 7 spins\n"
">>> # of a biased coin that settles on heads 60% of the time.\n"
">>> sum(binomialvariate(n=7, p=0.6) >= 5 for i in range(10_000)) / 10_000\n"
"0.4169\n"
"\n"
">>> # Probability of the median of 5 samples being in middle two quartiles\n"
">>> def trial():\n"
"...     return 2_500 <= sorted(choices(range(10_000), k=5))[2] < 7_500\n"
"...\n"
">>> sum(trial() for i in range(10_000)) / 10_000\n"
"0.7958"
msgstr ""

#: ../../library/random.rst:535
msgid ""
"Example of `statistical bootstrapping <https://en.wikipedia.org/wiki/"
"Bootstrapping_(statistics)>`_ using resampling with replacement to estimate "
"a confidence interval for the mean of a sample::"
msgstr ""
"サンプルの平均の信頼区間を推定するのに、重複ありでリサンプリングして `統計的"
"ブートストラップ <https://ja.wikipedia.org/wiki/"
"%E3%83%96%E3%83%BC%E3%83%88%E3%82%B9%E3%83%88%E3%83%A9%E3%83%83%E3%83%97%E6%B3%95>`_ "
"を行う例::"

#: ../../library/random.rst:539
msgid ""
"# https://www.thoughtco.com/example-of-bootstrapping-3126155\n"
"from statistics import fmean as mean\n"
"from random import choices\n"
"\n"
"data = [41, 50, 29, 37, 81, 30, 73, 63, 20, 35, 68, 22, 60, 31, 95]\n"
"means = sorted(mean(choices(data, k=len(data))) for i in range(100))\n"
"print(f'The sample mean of {mean(data):.1f} has a 90% confidence '\n"
"      f'interval from {means[5]:.1f} to {means[94]:.1f}')"
msgstr ""

#: ../../library/random.rst:548
msgid ""
"Example of a `resampling permutation test <https://en.wikipedia.org/wiki/"
"Resampling_(statistics)#Permutation_tests>`_ to determine the statistical "
"significance or `p-value <https://en.wikipedia.org/wiki/P-value>`_ of an "
"observed difference between the effects of a drug versus a placebo::"
msgstr ""
"薬と偽薬の間に観察された効果の違いについて、統計的有意性、すなわち `p 値 "
"<https://en.wikipedia.org/wiki/P-value>`_ を決定するために、`リサンプリング順"
"列試験 <https://en.wikipedia.org/wiki/"
"Resampling_(statistics)#Permutation_tests>`_ を行う例::"

#: ../../library/random.rst:554
msgid ""
"# Example from \"Statistics is Easy\" by Dennis Shasha and Manda Wilson\n"
"from statistics import fmean as mean\n"
"from random import shuffle\n"
"\n"
"drug = [54, 73, 53, 70, 73, 68, 52, 65, 65]\n"
"placebo = [54, 51, 58, 44, 55, 52, 42, 47, 58, 46]\n"
"observed_diff = mean(drug) - mean(placebo)\n"
"\n"
"n = 10_000\n"
"count = 0\n"
"combined = drug + placebo\n"
"for i in range(n):\n"
"    shuffle(combined)\n"
"    new_diff = mean(combined[:len(drug)]) - mean(combined[len(drug):])\n"
"    count += (new_diff >= observed_diff)\n"
"\n"
"print(f'{n} label reshufflings produced only {count} instances with a "
"difference')\n"
"print(f'at least as extreme as the observed difference of "
"{observed_diff:.1f}.')\n"
"print(f'The one-sided p-value of {count / n:.4f} leads us to reject the "
"null')\n"
"print(f'hypothesis that there is no difference between the drug and the "
"placebo.')"
msgstr ""

#: ../../library/random.rst:575
msgid ""
"Simulation of arrival times and service deliveries for a multiserver queue::"
msgstr "マルチサーバーキューにおける到達時間とサービス提供のシミュレーション::"

#: ../../library/random.rst:577
msgid ""
"from heapq import heapify, heapreplace\n"
"from random import expovariate, gauss\n"
"from statistics import mean, quantiles\n"
"\n"
"average_arrival_interval = 5.6\n"
"average_service_time = 15.0\n"
"stdev_service_time = 3.5\n"
"num_servers = 3\n"
"\n"
"waits = []\n"
"arrival_time = 0.0\n"
"servers = [0.0] * num_servers  # time when each server becomes available\n"
"heapify(servers)\n"
"for i in range(1_000_000):\n"
"    arrival_time += expovariate(1.0 / average_arrival_interval)\n"
"    next_server_available = servers[0]\n"
"    wait = max(0.0, next_server_available - arrival_time)\n"
"    waits.append(wait)\n"
"    service_duration = max(0.0, gauss(average_service_time, "
"stdev_service_time))\n"
"    service_completed = arrival_time + wait + service_duration\n"
"    heapreplace(servers, service_completed)\n"
"\n"
"print(f'Mean wait: {mean(waits):.1f}   Max wait: {max(waits):.1f}')\n"
"print('Quartiles:', [round(q, 1) for q in quantiles(waits)])"
msgstr ""

#: ../../library/random.rst:604
msgid ""
"`Statistics for Hackers <https://www.youtube.com/watch?v=Iq9DzN6mvYA>`_ a "
"video tutorial by `Jake Vanderplas <https://us.pycon.org/2016/speaker/"
"profile/295/>`_ on statistical analysis using just a few fundamental "
"concepts including simulation, sampling, shuffling, and cross-validation."
msgstr ""
"`Statistics for Hackers <https://www.youtube.com/watch?v=Iq9DzN6mvYA>`_ "
"`Jake Vanderplas <https://us.pycon.org/2016/speaker/profile/295/>`_ による統"
"計解析のビデオ。シミュレーション、サンプリング、シャッフル、交差検定といった"
"基本的な概念のみを用いています。"

#: ../../library/random.rst:610
msgid ""
"`Economics Simulation <https://nbviewer.org/url/norvig.com/ipython/Economics."
"ipynb>`_ a simulation of a marketplace by `Peter Norvig <https://norvig.com/"
"bio.html>`_ that shows effective use of many of the tools and distributions "
"provided by this module (gauss, uniform, sample, betavariate, choice, "
"triangular, and randrange)."
msgstr ""
"`Economics Simulation <https://nbviewer.org/url/norvig.com/ipython/Economics."
"ipynb>`_ `Peter Norvig <https://norvig.com/bio.html>`_ による市場価格のシミュ"
"レーション。このモジュールが提供する多くのツールや分布 (gauss, uniform, "
"sample, betavariate, choice, triangular, randrange) の活用法を示しています。"

#: ../../library/random.rst:617
msgid ""
"`A Concrete Introduction to Probability (using Python) <https://nbviewer.org/"
"url/norvig.com/ipython/Probability.ipynb>`_ a tutorial by `Peter Norvig "
"<https://norvig.com/bio.html>`_ covering the basics of probability theory, "
"how to write simulations, and how to perform data analysis using Python."
msgstr ""
"`A Concrete Introduction to Probability (using Python) <https://nbviewer.org/"
"url/norvig.com/ipython/Probability.ipynb>`_ `Peter Norvig <https://norvig."
"com/bio.html>`_ によるチュートリアル。確率論の基礎、シミュレーションの書き"
"方、Python を使用したデータ解析法をカバーしています。"

#: ../../library/random.rst:625
msgid "Recipes"
msgstr "レシピ"

#: ../../library/random.rst:627
msgid ""
"These recipes show how to efficiently make random selections from the "
"combinatoric iterators in the :mod:`itertools` module:"
msgstr ""

#: ../../library/random.rst:630
msgid ""
"def random_product(*args, repeat=1):\n"
"    \"Random selection from itertools.product(*args, **kwds)\"\n"
"    pools = [tuple(pool) for pool in args] * repeat\n"
"    return tuple(map(random.choice, pools))\n"
"\n"
"def random_permutation(iterable, r=None):\n"
"    \"Random selection from itertools.permutations(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    r = len(pool) if r is None else r\n"
"    return tuple(random.sample(pool, r))\n"
"\n"
"def random_combination(iterable, r):\n"
"    \"Random selection from itertools.combinations(iterable, r)\"\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.sample(range(n), r))\n"
"    return tuple(pool[i] for i in indices)\n"
"\n"
"def random_combination_with_replacement(iterable, r):\n"
"    \"Choose r elements with replacement.  Order the result to match the "
"iterable.\"\n"
"    # Result will be in set(itertools."
"combinations_with_replacement(iterable, r)).\n"
"    pool = tuple(iterable)\n"
"    n = len(pool)\n"
"    indices = sorted(random.choices(range(n), k=r))\n"
"    return tuple(pool[i] for i in indices)"
msgstr ""

#: ../../library/random.rst:659
msgid ""
"The default :func:`.random` returns multiples of 2⁻⁵³ in the range *0.0 ≤ x "
"< 1.0*.  All such numbers are evenly spaced and are exactly representable as "
"Python floats.  However, many other representable floats in that interval "
"are not possible selections.  For example, ``0.05954861408025609`` isn't an "
"integer multiple of 2⁻⁵³."
msgstr ""

#: ../../library/random.rst:665
msgid ""
"The following recipe takes a different approach.  All floats in the interval "
"are possible selections.  The mantissa comes from a uniform distribution of "
"integers in the range *2⁵² ≤ mantissa < 2⁵³*.  The exponent comes from a "
"geometric distribution where exponents smaller than *-53* occur half as "
"often as the next larger exponent."
msgstr ""

#: ../../library/random.rst:673
msgid ""
"from random import Random\n"
"from math import ldexp\n"
"\n"
"class FullRandom(Random):\n"
"\n"
"    def random(self):\n"
"        mantissa = 0x10_0000_0000_0000 | self.getrandbits(52)\n"
"        exponent = -53\n"
"        x = 0\n"
"        while not x:\n"
"            x = self.getrandbits(32)\n"
"            exponent += x.bit_length() - 32\n"
"        return ldexp(mantissa, exponent)"
msgstr ""

#: ../../library/random.rst:687
msgid ""
"All :ref:`real valued distributions <real-valued-distributions>` in the "
"class will use the new method::"
msgstr ""

#: ../../library/random.rst:690
msgid ""
">>> fr = FullRandom()\n"
">>> fr.random()\n"
"0.05954861408025609\n"
">>> fr.expovariate(0.25)\n"
"8.87925541791544"
msgstr ""

#: ../../library/random.rst:696
msgid ""
"The recipe is conceptually equivalent to an algorithm that chooses from all "
"the multiples of 2⁻¹⁰⁷⁴ in the range *0.0 ≤ x < 1.0*.  All such numbers are "
"evenly spaced, but most have to be rounded down to the nearest representable "
"Python float.  (The value 2⁻¹⁰⁷⁴ is the smallest positive unnormalized float "
"and is equal to ``math.ulp(0.0)``.)"
msgstr ""

#: ../../library/random.rst:705
msgid ""
"`Generating Pseudo-random Floating-Point Values <https://allendowney.com/"
"research/rand/downey07randfloat.pdf>`_ a paper by Allen B. Downey describing "
"ways to generate more fine-grained floats than normally generated by :func:`."
"random`."
msgstr ""

#: ../../library/random.rst:713
msgid "Command-line usage"
msgstr "コマンドラインでの使用"

#: ../../library/random.rst:717
msgid "The :mod:`!random` module can be executed from the command line."
msgstr ":mod:`!random` モジュールはコマンドラインから実行できます。"

#: ../../library/random.rst:719
msgid ""
"python -m random [-h] [-c CHOICE [CHOICE ...] | -i N | -f N] [input ...]"
msgstr ""

#: ../../library/random.rst:723
msgid "The following options are accepted:"
msgstr "以下のオプションが使用できます:"

#: ../../library/random.rst:729
msgid "Show the help message and exit."
msgstr "ヘルプメッセージを表示して終了します。"

#: ../../library/random.rst:734
msgid "Print a random choice, using :meth:`choice`."
msgstr ":meth:`choice` を使用してランダムに選択して出力します。"

#: ../../library/random.rst:739
msgid ""
"Print a random integer between 1 and N inclusive, using :meth:`randint`."
msgstr ""
":meth:`randint` を使用して1からNの間(Nを含む)のランダムな整数を出力します。"

#: ../../library/random.rst:744
msgid ""
"Print a random floating-point number between 0 and N inclusive, using :meth:"
"`uniform`."
msgstr ""

#: ../../library/random.rst:747
msgid "If no options are given, the output depends on the input:"
msgstr "オプションが指定されない場合、出力は入力に依存します。"

#: ../../library/random.rst:749
msgid "String or multiple: same as :option:`--choice`."
msgstr "文字列または複数: :option:`--choice` と同じ。"

#: ../../library/random.rst:750
msgid "Integer: same as :option:`--integer`."
msgstr "整数: :option:`--integer` と同じ。"

#: ../../library/random.rst:751
msgid "Float: same as :option:`--float`."
msgstr "浮動小数点数: :option:`--float` と同じ。"

#: ../../library/random.rst:756
msgid "Command-line example"
msgstr "コマンドラインの例"

#: ../../library/random.rst:758
msgid "Here are some examples of the :mod:`!random` command-line interface:"
msgstr "以下は :mod:`!random` のコマンドラインインターフェースの例です:"

#: ../../library/random.rst:760
msgid ""
"$ # Choose one at random\n"
"$ python -m random egg bacon sausage spam \"Lobster Thermidor aux crevettes "
"with a Mornay sauce\"\n"
"Lobster Thermidor aux crevettes with a Mornay sauce\n"
"\n"
"$ # Random integer\n"
"$ python -m random 6\n"
"6\n"
"\n"
"$ # Random floating-point number\n"
"$ python -m random 1.8\n"
"1.7080016272295635\n"
"\n"
"$ # With explicit arguments\n"
"$ python  -m random --choice egg bacon sausage spam \"Lobster Thermidor aux "
"crevettes with a Mornay sauce\"\n"
"egg\n"
"\n"
"$ python -m random --integer 6\n"
"3\n"
"\n"
"$ python -m random --float 1.8\n"
"1.5666339105010318\n"
"\n"
"$ python -m random --integer 6\n"
"5\n"
"\n"
"$ python -m random --float 6\n"
"3.1942323316565915"
msgstr ""
