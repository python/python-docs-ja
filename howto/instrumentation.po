# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:21+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/instrumentation.rst:7
msgid "Instrumenting CPython with DTrace and SystemTap"
msgstr "DTrace と SystemTap で CPython を測定する"

#: ../../howto/instrumentation.rst:0
msgid "author"
msgstr "author"

#: ../../howto/instrumentation.rst:9
msgid "David Malcolm"
msgstr "David Malcolm"

#: ../../howto/instrumentation.rst:10
msgid "Łukasz Langa"
msgstr "Łukasz Langa"

#: ../../howto/instrumentation.rst:12
msgid ""
"DTrace and SystemTap are monitoring tools, each providing a way to inspect "
"what the processes on a computer system are doing.  They both use domain-"
"specific languages allowing a user to write scripts which:"
msgstr ""
"Dtrace と SystemTap はモニタリングツールで、コンピュータシステムのプロセスが"
"何をしているかを調べる方法を提供します。\n"
"どちらもドメイン固有言語 (domain-specific language) を使用して、次のことがで"
"きるスクリプトをユーザが書けます:"

#: ../../howto/instrumentation.rst:16
msgid "filter which processes are to be observed"
msgstr "観測対象のプロセスを絞り込む"

#: ../../howto/instrumentation.rst:17
msgid "gather data from the processes of interest"
msgstr "関心のあるプロセスからデータを収集する"

#: ../../howto/instrumentation.rst:18
msgid "generate reports on the data"
msgstr "収集したデータからレポートを生成する"

#: ../../howto/instrumentation.rst:20
msgid ""
"As of Python 3.6, CPython can be built with embedded \"markers\", also known "
"as \"probes\", that can be observed by a DTrace or SystemTap script, making "
"it easier to monitor what the CPython processes on a system are doing."
msgstr ""
"Python 3.6 では、 CPython は \"プローブ\" としても知られる \"マーカー\" を埋"
"め込んだビルドが行えます。\n"
"マーカーは DTrace や SystemTap のスクリプトから観測でき、システムの CPython "
"プロセスが何をしているかを観察するのが簡単になります。"

#: ../../howto/instrumentation.rst:27
msgid ""
"DTrace markers are implementation details of the CPython interpreter. No "
"guarantees are made about probe compatibility between versions of CPython. "
"DTrace scripts can stop working or work incorrectly without warning when "
"changing CPython versions."
msgstr ""
"DTrace マーカーは CPython インタプリタの実装詳細です。\n"
"CPython のバージョン間でプローブの互換性があるという保証はありません。\n"
"CPython のバージョンを変えると、 DTrace スクリプトは警告無しに動作しなくなっ"
"たり、おかしな動作をする可能性があります。"

#: ../../howto/instrumentation.rst:34
msgid "Enabling the static markers"
msgstr "静的マーカーの有効化"

#: ../../howto/instrumentation.rst:36
msgid ""
"macOS comes with built-in support for DTrace.  On Linux, in order to build "
"CPython with the embedded markers for SystemTap, the SystemTap development "
"tools must be installed."
msgstr ""
"macOS には組み込みの DTrace サポートが備わっています。\n"
"Linux では SystemTap 用のマーカーを埋め込んで CPython をビルドするためには、 "
"SystemTap 開発ツールをインストールしなければなりません。"

#: ../../howto/instrumentation.rst:40
msgid "On a Linux machine, this can be done via::"
msgstr ""
"Linux マシンでは、 SystemTap 開発ツールのインストールは次のように行えます::"

#: ../../howto/instrumentation.rst:44
msgid "or::"
msgstr "もしくは::"

#: ../../howto/instrumentation.rst:49
msgid ""
"CPython must then be :option:`configured with the --with-dtrace option <--"
"with-dtrace>`:"
msgstr ""

#: ../../howto/instrumentation.rst:56
msgid ""
"On macOS, you can list available DTrace probes by running a Python process "
"in the background and listing all probes made available by the Python "
"provider::"
msgstr ""

#: ../../howto/instrumentation.rst:73
msgid ""
"On Linux, you can verify if the SystemTap static markers are present in the "
"built binary by seeing if it contains a \".note.stapsdt\" section."
msgstr ""

#: ../../howto/instrumentation.rst:81
msgid ""
"If you've built Python as a shared library (with the :option:`--enable-"
"shared` configure option), you need to look instead within the shared "
"library.  For example::"
msgstr ""

#: ../../howto/instrumentation.rst:88
msgid "Sufficiently modern readelf can print the metadata::"
msgstr "十分に新しい readelf ではメタデータを出力できます::"

#: ../../howto/instrumentation.rst:125
msgid ""
"The above metadata contains information for SystemTap describing how it can "
"patch strategically placed machine code instructions to enable the tracing "
"hooks used by a SystemTap script."
msgstr ""

#: ../../howto/instrumentation.rst:131
msgid "Static DTrace probes"
msgstr "静的 DTrace プローブ"

#: ../../howto/instrumentation.rst:133
msgid ""
"The following example DTrace script can be used to show the call/return "
"hierarchy of a Python script, only tracing within the invocation of a "
"function called \"start\". In other words, import-time function invocations "
"are not going to be listed:"
msgstr ""

#: ../../howto/instrumentation.rst:172 ../../howto/instrumentation.rst:230
msgid "It can be invoked like this::"
msgstr "この例は次のように実行できます::"

#: ../../howto/instrumentation.rst:176 ../../howto/instrumentation.rst:236
msgid "The output looks like this:"
msgstr "出力はこのようになります:"

#: ../../howto/instrumentation.rst:201
msgid "Static SystemTap markers"
msgstr "静的 SystemTap マーカー"

#: ../../howto/instrumentation.rst:203
msgid ""
"The low-level way to use the SystemTap integration is to use the static "
"markers directly.  This requires you to explicitly state the binary file "
"containing them."
msgstr ""

#: ../../howto/instrumentation.rst:207
msgid ""
"For example, this SystemTap script can be used to show the call/return "
"hierarchy of a Python script:"
msgstr ""
"例えば、この SystemTap スクリプトは Python の呼び出し/返却 (call/return) 階層"
"を表示するのに使えます:"

#: ../../howto/instrumentation.rst:247
msgid "where the columns are:"
msgstr "それぞれの列の内容は次の通りです:"

#: ../../howto/instrumentation.rst:249
msgid "time in microseconds since start of script"
msgstr "スクリプトを起動してからのマイクロ秒単位の時間"

#: ../../howto/instrumentation.rst:251
msgid "name of executable"
msgstr "実行可能ファイルの名前"

#: ../../howto/instrumentation.rst:253
msgid "PID of process"
msgstr "プロセスの PID"

#: ../../howto/instrumentation.rst:255
msgid ""
"and the remainder indicates the call/return hierarchy as the script executes."
msgstr ""
"そして、残りの部分はスクリプトが実行していた呼び出し/返却階層を表示していま"
"す。"

#: ../../howto/instrumentation.rst:257
msgid ""
"For a :option:`--enable-shared` build of CPython, the markers are contained "
"within the libpython shared library, and the probe's dotted path needs to "
"reflect this. For example, this line from the above example:"
msgstr ""

#: ../../howto/instrumentation.rst:265
msgid "should instead read:"
msgstr ""

#: ../../howto/instrumentation.rst:271
msgid "(assuming a :ref:`debug build <debug-build>` of CPython 3.6)"
msgstr ""

#: ../../howto/instrumentation.rst:275
msgid "Available static markers"
msgstr "利用可能な静的マーカー"

#: ../../howto/instrumentation.rst:279
msgid ""
"This marker indicates that execution of a Python function has begun. It is "
"only triggered for pure-Python (bytecode) functions."
msgstr ""
"このマーカーは Python の関数の実行が開始されたことを示しています。\n"
"このマーカーは、ピュア Python (バイトコード) の関数でしか起動されません。"

#: ../../howto/instrumentation.rst:282
msgid ""
"The filename, function name, and line number are provided back to the "
"tracing script as positional arguments, which must be accessed using "
"``$arg1``, ``$arg2``, ``$arg3``:"
msgstr ""
"トレーススクリプトには位置引数として、ファイル名、関数名、行番号が渡され、必"
"ず ``$arg1``, ``$arg2``, ``$arg3`` で渡されます:"

#: ../../howto/instrumentation.rst:286
msgid ""
"``$arg1`` : ``(const char *)`` filename, accessible using "
"``user_string($arg1)``"
msgstr ""
"``$arg1`` : ``(const char *)`` ファイル名、 ``user_string($arg1)`` でアクセス"
"できます"

#: ../../howto/instrumentation.rst:288
msgid ""
"``$arg2`` : ``(const char *)`` function name, accessible using "
"``user_string($arg2)``"
msgstr ""
"``$arg2`` : ``(const char *)`` 関数名、 ``user_string($arg2)`` でアクセスでき"
"ます"

#: ../../howto/instrumentation.rst:291
msgid "``$arg3`` : ``int`` line number"
msgstr "``$arg3`` : ``int`` 行番号"

#: ../../howto/instrumentation.rst:295
msgid ""
"This marker is the converse of :c:func:`function__entry`, and indicates that "
"execution of a Python function has ended (either via ``return``, or via an "
"exception).  It is only triggered for pure-Python (bytecode) functions."
msgstr ""
"このマーカーは :c:func:`function__entry` の反対で、 Python 関数の実行が "
"(``return`` もしくは例外によって) 終了したことを示しています。\n"
"このマーカーは、ピュア Python (バイトコード) の関数でしか起動されません。"

#: ../../howto/instrumentation.rst:299
msgid "The arguments are the same as for :c:func:`function__entry`"
msgstr "引数は :c:func:`function__entry` と同じです。"

#: ../../howto/instrumentation.rst:303
msgid ""
"This marker indicates a Python line is about to be executed.  It is the "
"equivalent of line-by-line tracing with a Python profiler.  It is not "
"triggered within C functions."
msgstr ""
"このマーカーは、これから実行される Python の行を示しています。\n"
"これは Python プロファイラによる行ごとのトレースと同等です。\n"
"このマーカーは C 関数の内部では起動されません。"

#: ../../howto/instrumentation.rst:307
msgid "The arguments are the same as for :c:func:`function__entry`."
msgstr "引数は :c:func:`function__entry` と同じです。"

#: ../../howto/instrumentation.rst:311
msgid ""
"Fires when the Python interpreter starts a garbage collection cycle. "
"``arg0`` is the generation to scan, like :func:`gc.collect()`."
msgstr ""
"Python インタプリタによる循環参照のガベージコレクションが開始されたときに発火"
"します。\n"
":func:`gc.collect()` と同じように ``arg0`` は走査する対象の世代です。"

#: ../../howto/instrumentation.rst:316
msgid ""
"Fires when the Python interpreter finishes a garbage collection cycle. "
"``arg0`` is the number of collected objects."
msgstr ""
"Python インタプリタによる循環参照のガベージコレクションが完了したときに発火し"
"ます。\n"
"``arg0`` は回収したオブジェクトの数です。"

#: ../../howto/instrumentation.rst:321
msgid ""
"Fires before :mod:`importlib` attempts to find and load the module. ``arg0`` "
"is the module name."
msgstr ""

#: ../../howto/instrumentation.rst:328
msgid ""
"Fires after :mod:`importlib`'s find_and_load function is called. ``arg0`` is "
"the module name, ``arg1`` indicates if module was successfully loaded."
msgstr ""

#: ../../howto/instrumentation.rst:337
msgid ""
"Fires when :func:`sys.audit` or :c:func:`PySys_Audit` is called. ``arg0`` is "
"the event name as C string, ``arg1`` is a :c:type:`PyObject` pointer to a "
"tuple object."
msgstr ""

#: ../../howto/instrumentation.rst:345
msgid "SystemTap Tapsets"
msgstr "SystemTap Tapset"

#: ../../howto/instrumentation.rst:347
msgid ""
"The higher-level way to use the SystemTap integration is to use a "
"\"tapset\": SystemTap's equivalent of a library, which hides some of the "
"lower-level details of the static markers."
msgstr ""

#: ../../howto/instrumentation.rst:351
msgid "Here is a tapset file, based on a non-shared build of CPython:"
msgstr ""

#: ../../howto/instrumentation.rst:374
msgid ""
"If this file is installed in SystemTap's tapset directory (e.g. ``/usr/share/"
"systemtap/tapset``), then these additional probepoints become available:"
msgstr ""

#: ../../howto/instrumentation.rst:380
msgid ""
"This probe point indicates that execution of a Python function has begun. It "
"is only triggered for pure-Python (bytecode) functions."
msgstr ""

#: ../../howto/instrumentation.rst:385
msgid ""
"This probe point is the converse of ``python.function.return``, and "
"indicates that execution of a Python function has ended (either via "
"``return``, or via an exception).  It is only triggered for pure-Python "
"(bytecode) functions."
msgstr ""

#: ../../howto/instrumentation.rst:392
msgid "Examples"
msgstr "使用例"

#: ../../howto/instrumentation.rst:393
msgid ""
"This SystemTap script uses the tapset above to more cleanly implement the "
"example given above of tracing the Python function-call hierarchy, without "
"needing to directly name the static markers:"
msgstr ""

#: ../../howto/instrumentation.rst:412
msgid ""
"The following script uses the tapset above to provide a top-like view of all "
"running CPython code, showing the top 20 most frequently entered bytecode "
"frames, each second, across the whole system:"
msgstr ""
