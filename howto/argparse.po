# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# Takeshi Nakazato, 2023
# TENMYO Masakazu, 2024
# Arihiro TAKASE, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-11 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:52+0000\n"
"Last-Translator: Arihiro TAKASE, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/argparse.rst:5
msgid "Argparse Tutorial"
msgstr "Argparse チュートリアル"

#: ../../howto/argparse.rst:0
msgid "author"
msgstr "author"

#: ../../howto/argparse.rst:7
msgid "Tshepang Mbambo"
msgstr "Tshepang Mbambo"

#: ../../howto/argparse.rst:11
msgid ""
"This tutorial is intended to be a gentle introduction to :mod:`argparse`, "
"the recommended command-line parsing module in the Python standard library."
msgstr ""
"このチュートリアルでは、:mod:`argparse` を丁寧に説明します。:mod:`argparse` "
"は、Python 標準ライブラリの一部であり、おすすめのコマンドライン引数の解析モ"
"ジュールです。"

#: ../../howto/argparse.rst:16
msgid ""
"There are two other modules that fulfill the same task, namely :mod:`getopt` "
"(an equivalent for ``getopt()`` from the C language) and the deprecated :mod:"
"`optparse`. Note also that :mod:`argparse` is based on :mod:`optparse`, and "
"therefore very similar in terms of usage."
msgstr ""
"同じ機能を実現するモジュールが他に2つあります。 :mod:`getopt` (C 言語の "
"``getopt()`` に相当するもの) と非推奨の :mod:`optparse` です。なお :mod:"
"`argparse` は :mod:`optparse` をもとにしており、従ってその使い方は非常によく"
"似ています。"

#: ../../howto/argparse.rst:24
msgid "Concepts"
msgstr "コンセプト"

#: ../../howto/argparse.rst:26
msgid ""
"Let's show the sort of functionality that we are going to explore in this "
"introductory tutorial by making use of the :command:`ls` command:"
msgstr ""
":command:`ls` コマンドを使って、このチュートリアルで私たちが学ぶ機能をいくつ"
"か見てみましょう:"

#: ../../howto/argparse.rst:29
msgid ""
"$ ls\n"
"cpython  devguide  prog.py  pypy  rm-unused-function.patch\n"
"$ ls pypy\n"
"ctypes_configure  demo  dotviewer  include  lib_pypy  lib-python ...\n"
"$ ls -l\n"
"total 20\n"
"drwxr-xr-x 19 wena wena 4096 Feb 18 18:51 cpython\n"
"drwxr-xr-x  4 wena wena 4096 Feb  8 12:04 devguide\n"
"-rwxr-xr-x  1 wena wena  535 Feb 19 00:05 prog.py\n"
"drwxr-xr-x 14 wena wena 4096 Feb  7 00:59 pypy\n"
"-rw-r--r--  1 wena wena  741 Feb 18 01:01 rm-unused-function.patch\n"
"$ ls --help\n"
"Usage: ls [OPTION]... [FILE]...\n"
"List information about the FILEs (the current directory by default).\n"
"Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n"
"..."
msgstr ""

#: ../../howto/argparse.rst:48
msgid "A few concepts we can learn from the four commands:"
msgstr "上の４つの実行結果から、以下のことが分かります:"

#: ../../howto/argparse.rst:50
msgid ""
"The :command:`ls` command is useful when run without any options at all. It "
"defaults to displaying the contents of the current directory."
msgstr ""
":command:`ls` コマンドは、まったくオプションを指定せずに実行したとしても役に"
"立ちます。デフォルトの動作は、カレントディレクトリの内容を表示することです。"

#: ../../howto/argparse.rst:53
msgid ""
"If we want beyond what it provides by default, we tell it a bit more. In "
"this case, we want it to display a different directory, ``pypy``. What we "
"did is specify what is known as a positional argument. It's named so because "
"the program should know what to do with the value, solely based on where it "
"appears on the command line. This concept is more relevant to a command "
"like :command:`cp`, whose most basic usage is ``cp SRC DEST``. The first "
"position is *what you want copied,* and the second position is *where you "
"want it copied to*."
msgstr ""
"デフォルトの動作で提供される以上のことをしたい場合、すこしだけオプションを指"
"定する必要があります。別のディレクトリ ``pypy`` を表示したい場合、私たちがし"
"たことは、位置引数として知られる引数を指定することです。これは、引数がコマン"
"ドラインのどの位置に現れたかということだけを基に、プログラムがその値について"
"何をするのか分かるべきなので、このように名づけられています。このコンセプト"
"は :command:`cp` のようなコマンドで重要な意味があります。 :command:`cp` コマ"
"ンドのもっとも基本的な使い方は、 ``cp SRC DEST`` です。最初の引数は *何をコ"
"ピーしたいか* であり、二つ目の引数は *どこにコピーしたいか* を意味します。"

#: ../../howto/argparse.rst:62
msgid ""
"Now, say we want to change behaviour of the program. In our example, we "
"display more info for each file instead of just showing the file names. The "
"``-l`` in that case is known as an optional argument."
msgstr ""
"プログラムの振る舞いを変えましょう。例では、単にファイル名を表示する代わりに"
"それぞれのファイルに関する多くの情報を表示します。このケースでは、``-l`` は"
"optional引数として知られます。"

#: ../../howto/argparse.rst:66
msgid ""
"That's a snippet of the help text. It's very useful in that you can come "
"across a program you have never used before, and can figure out how it works "
"simply by reading its help text."
msgstr ""
"ヘルプテキストの抜粋です。この実行の仕方は、まだ使用したことがないプログラム"
"にたいして行うと有用で、ヘルプテキストを読むことで、プログラムがどのように動"
"作するかわかります。"

#: ../../howto/argparse.rst:72
msgid "The basics"
msgstr "基礎"

#: ../../howto/argparse.rst:74
msgid "Let us start with a very simple example which does (almost) nothing::"
msgstr "（ほとんど）何もしない、とても簡単な例から始めましょう::"

#: ../../howto/argparse.rst:76
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.parse_args()"
msgstr ""

#: ../../howto/argparse.rst:80 ../../howto/argparse.rst:188
#: ../../howto/argparse.rst:209
msgid "Following is a result of running the code:"
msgstr "下記がこのコードを実行した結果です:"

#: ../../howto/argparse.rst:82
msgid ""
"$ python prog.py\n"
"$ python prog.py --help\n"
"usage: prog.py [-h]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"$ python prog.py --verbose\n"
"usage: prog.py [-h]\n"
"prog.py: error: unrecognized arguments: --verbose\n"
"$ python prog.py foo\n"
"usage: prog.py [-h]\n"
"prog.py: error: unrecognized arguments: foo"
msgstr ""

#: ../../howto/argparse.rst:97 ../../howto/argparse.rst:254
#: ../../howto/argparse.rst:298
msgid "Here is what is happening:"
msgstr "こんなことが起こりました:"

#: ../../howto/argparse.rst:99
msgid ""
"Running the script without any options results in nothing displayed to "
"stdout. Not so useful."
msgstr ""
"オプションなしでスクリプトを実行した結果、なにも標準出力に表示されませんでし"
"た。それほど便利ではありませんね。"

#: ../../howto/argparse.rst:102
msgid ""
"The second one starts to display the usefulness of the :mod:`argparse` "
"module. We have done almost nothing, but already we get a nice help message."
msgstr ""
"二つ目の実行結果から :mod:`argparse` モジュールの有用性がわかります。ほとんど"
"何もしていないのに、すてきなヘルプメッセージが手に入りました。"

#: ../../howto/argparse.rst:105
msgid ""
"The ``--help`` option, which can also be shortened to ``-h``, is the only "
"option we get for free (i.e. no need to specify it). Specifying anything "
"else results in an error. But even then, we do get a useful usage message, "
"also for free."
msgstr ""
"``--help`` （これは ``-h`` と短縮できます）だけが無料のオプションです（つまり"
"プログラムで指示する必要はありません）。他のオプションを指定するとエラーにな"
"ります。エラー時の有用な用法メッセージも、プログラムで指示することなく出力で"
"きます。"

#: ../../howto/argparse.rst:112
msgid "Introducing Positional arguments"
msgstr "位置引数の入門"

#: ../../howto/argparse.rst:114
msgid "An example::"
msgstr "以下に例を示します::"

#: ../../howto/argparse.rst:116
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"echo\")\n"
"args = parser.parse_args()\n"
"print(args.echo)"
msgstr ""

#: ../../howto/argparse.rst:122
msgid "And running the code:"
msgstr "このコードを実行してみましょう:"

#: ../../howto/argparse.rst:124
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] echo\n"
"prog.py: error: the following arguments are required: echo\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] echo\n"
"\n"
"positional arguments:\n"
"  echo\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"$ python prog.py foo\n"
"foo"
msgstr ""

#: ../../howto/argparse.rst:140
msgid "Here is what's happening:"
msgstr "こんなことが起こりました:"

#: ../../howto/argparse.rst:142
msgid ""
"We've added the :meth:`~ArgumentParser.add_argument` method, which is what "
"we use to specify which command-line options the program is willing to "
"accept. In this case, I've named it ``echo`` so that it's in line with its "
"function."
msgstr ""
"プログラムが受け付けるコマンドラインオプションを指定するメソッドである :meth:"
"`~ArgumentParser.add_argument` を追加しました。ここでは、その機能にあわせて引"
"数名を ``echo`` としました。"

#: ../../howto/argparse.rst:146
msgid "Calling our program now requires us to specify an option."
msgstr "プログラムを実行すると、オプションを指定するように要求されます。"

#: ../../howto/argparse.rst:148
msgid ""
"The :meth:`~ArgumentParser.parse_args` method actually returns some data "
"from the options specified, in this case, ``echo``."
msgstr ""
":meth:`~ArgumentParser.parse_args` メソッドは指定されたオプションを、この場合"
"は ``echo`` として、返します。"

#: ../../howto/argparse.rst:151
msgid ""
"The variable is some form of 'magic' that :mod:`argparse` performs for free "
"(i.e. no need to specify which variable that value is stored in). You will "
"also notice that its name matches the string argument given to the method, "
"``echo``."
msgstr ""
"この変数は :mod:`argparse` が自動的に行うある種の魔法です（つまり、値を格納す"
"る変数を指定する必要がありません）。変数の名前がメソッドに与えた文字列引数 "
"``echo`` と同じことに気付いたでしょう。"

#: ../../howto/argparse.rst:156
msgid ""
"Note however that, although the help display looks nice and all, it "
"currently is not as helpful as it can be. For example we see that we got "
"``echo`` as a positional argument, but we don't know what it does, other "
"than by guessing or by reading the source code. So, let's make it a bit more "
"useful::"
msgstr ""
"ヘルプメッセージは十分なように見えますが、それほど分かりやすくもありません。"
"たとえば、``echo`` は位置引数であることがわかりますが、それが何であるかを知る"
"ためには推測するかソースコードを見なけれなりません。もうすこしヘルプメッセー"
"ジ分かりやすくしてみましょう::"

#: ../../howto/argparse.rst:161
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"echo\", help=\"echo the string you use here\")\n"
"args = parser.parse_args()\n"
"print(args.echo)"
msgstr ""

#: ../../howto/argparse.rst:167
msgid "And we get:"
msgstr "修正した結果は以下のようになります:"

#: ../../howto/argparse.rst:169
msgid ""
"$ python prog.py -h\n"
"usage: prog.py [-h] echo\n"
"\n"
"positional arguments:\n"
"  echo        echo the string you use here\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit"
msgstr ""

#: ../../howto/argparse.rst:180
msgid "Now, how about doing something even more useful::"
msgstr "次は、もっと有益なことをしてみませんか？::"

#: ../../howto/argparse.rst:182
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", help=\"display a square of a given "
"number\")\n"
"args = parser.parse_args()\n"
"print(args.square**2)"
msgstr ""

#: ../../howto/argparse.rst:190
msgid ""
"$ python prog.py 4\n"
"Traceback (most recent call last):\n"
"  File \"prog.py\", line 5, in <module>\n"
"    print(args.square**2)\n"
"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'"
msgstr ""

#: ../../howto/argparse.rst:198
msgid ""
"That didn't go so well. That's because :mod:`argparse` treats the options we "
"give it as strings, unless we tell it otherwise. So, let's tell :mod:"
"`argparse` to treat that input as an integer::"
msgstr ""
"上手くいきませんでした。 何も伝えなければ、:mod:`argparse` は与えられたオプ"
"ションを文字列として扱います。 :mod:`argparse` にオプションの値を整数として扱"
"うように伝えましょう::"

#: ../../howto/argparse.rst:202
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", help=\"display a square of a given "
"number\",\n"
"                    type=int)\n"
"args = parser.parse_args()\n"
"print(args.square**2)"
msgstr ""

#: ../../howto/argparse.rst:211
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py four\n"
"usage: prog.py [-h] square\n"
"prog.py: error: argument square: invalid int value: 'four'"
msgstr ""

#: ../../howto/argparse.rst:219
msgid ""
"That went well. The program now even helpfully quits on bad illegal input "
"before proceeding."
msgstr ""
"今度は上手くいきました。このプログラムは不正な入力が与えられるとそれを処理せ"
"ずに、より親切なメッセージを表示して実行を終了します。"

#: ../../howto/argparse.rst:224
msgid "Introducing Optional arguments"
msgstr "Optional引数の導入"

#: ../../howto/argparse.rst:226
msgid ""
"So far we have been playing with positional arguments. Let us have a look on "
"how to add optional ones::"
msgstr ""
"ここまで位置引数を扱ってきました。optional引数を追加する方法についても見てい"
"きましょう::"

#: ../../howto/argparse.rst:229
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"--verbosity\", help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"if args.verbosity:\n"
"    print(\"verbosity turned on\")"
msgstr ""

#: ../../howto/argparse.rst:236 ../../howto/argparse.rst:282
#: ../../howto/argparse.rst:398 ../../howto/argparse.rst:432
msgid "And the output:"
msgstr "実行してみましょう:"

#: ../../howto/argparse.rst:238
msgid ""
"$ python prog.py --verbosity 1\n"
"verbosity turned on\n"
"$ python prog.py\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [--verbosity VERBOSITY]\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  --verbosity VERBOSITY\n"
"                        increase output verbosity\n"
"$ python prog.py --verbosity\n"
"usage: prog.py [-h] [--verbosity VERBOSITY]\n"
"prog.py: error: argument --verbosity: expected one argument"
msgstr ""

#: ../../howto/argparse.rst:256
msgid ""
"The program is written so as to display something when ``--verbosity`` is "
"specified and display nothing when not."
msgstr ""
"プログラムは、``--verbosity`` が指定された場合はなにかしらを表示し、指定され"
"なければ何も表示をしないように書かれています。"

#: ../../howto/argparse.rst:259
msgid ""
"To show that the option is actually optional, there is no error when running "
"the program without it. Note that by default, if an optional argument isn't "
"used, the relevant variable, in this case ``args.verbosity``, is given "
"``None`` as a value, which is the reason it fails the truth test of the :"
"keyword:`if` statement."
msgstr ""
"オプションの指定が実際に任意であることを示すために、プログラムをオプション指"
"定なしで実行してもエラーにはなっていません。オプション引数が指定されなかった"
"場合、関連する変数、この例では ``args.verbosity`` 、の値にはデフォルトで "
"``None`` がセットされます。これが :keyword:`if` 文による真偽テストに失敗した"
"理由です。"

#: ../../howto/argparse.rst:265
msgid "The help message is a bit different."
msgstr "ヘルプメッセージが少し変わりました。"

#: ../../howto/argparse.rst:267
msgid ""
"When using the ``--verbosity`` option, one must also specify some value, any "
"value."
msgstr ""
"``--verbosity`` オプションを使うには、そのオプションにひとつの値を指定しなけ"
"ればなりません。"

#: ../../howto/argparse.rst:270
msgid ""
"The above example accepts arbitrary integer values for ``--verbosity``, but "
"for our simple program, only two values are actually useful, ``True`` or "
"``False``. Let's modify the code accordingly::"
msgstr ""
"上記の例では、``--verbosity`` に任意の整数を取れます。この簡単なプログラムで"
"は、実際には ``True`` または ``False`` の二つの値だけが有効です。そうなるよう"
"にコードを修正してみましょう::"

#: ../../howto/argparse.rst:274
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"--verbose\", help=\"increase output verbosity\",\n"
"                    action=\"store_true\")\n"
"args = parser.parse_args()\n"
"if args.verbose:\n"
"    print(\"verbosity turned on\")"
msgstr ""

#: ../../howto/argparse.rst:284
msgid ""
"$ python prog.py --verbose\n"
"verbosity turned on\n"
"$ python prog.py --verbose 1\n"
"usage: prog.py [-h] [--verbose]\n"
"prog.py: error: unrecognized arguments: 1\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [--verbose]\n"
"\n"
"options:\n"
"  -h, --help  show this help message and exit\n"
"  --verbose   increase output verbosity"
msgstr ""

#: ../../howto/argparse.rst:300
msgid ""
"The option is now more of a flag than something that requires a value. We "
"even changed the name of the option to match that idea. Note that we now "
"specify a new keyword, ``action``, and give it the value ``\"store_true\"``. "
"This means that, if the option is specified, assign the value ``True`` to "
"``args.verbose``. Not specifying it implies ``False``."
msgstr ""
"オプションは値を必要とするのではなく、単なるフラグになりました。この考え方に"
"沿うようにオプションの名前も変更しています。ここで新しいキーワード "
"``action`` を指定し、値として ``\"store_true\"`` を設定していることに注意して"
"ください。これは、オプションが指定された場合に値として ``True`` を ``args."
"verbose`` に設定するということを意味します。オプションの指定がない場合の値は "
"``False`` となることを意味します。"

#: ../../howto/argparse.rst:307
msgid ""
"It complains when you specify a value, in true spirit of what flags actually "
"are."
msgstr ""
"フラグは値を取るべきではないので、値を指定するとプログラムはエラーになりま"
"す。"

#: ../../howto/argparse.rst:310
msgid "Notice the different help text."
msgstr "ヘルプテキストが変わっています。"

#: ../../howto/argparse.rst:314
msgid "Short options"
msgstr "短いオプション"

#: ../../howto/argparse.rst:316
msgid ""
"If you are familiar with command line usage, you will notice that I haven't "
"yet touched on the topic of short versions of the options. It's quite "
"simple::"
msgstr ""
"コマンドラインになれていれば、オプションの短いバージョンの話題に触れていない"
"ことに気付いたでしょう。それはとても簡単です::"

#: ../../howto/argparse.rst:320
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"-v\", \"--verbose\", help=\"increase output "
"verbosity\",\n"
"                    action=\"store_true\")\n"
"args = parser.parse_args()\n"
"if args.verbose:\n"
"    print(\"verbosity turned on\")"
msgstr ""

#: ../../howto/argparse.rst:328
msgid "And here goes:"
msgstr "上記のプログラムを実行するとこうなります:"

#: ../../howto/argparse.rst:330
msgid ""
"$ python prog.py -v\n"
"verbosity turned on\n"
"$ python prog.py --help\n"
"usage: prog.py [-h] [-v]\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  -v, --verbose  increase output verbosity"
msgstr ""

#: ../../howto/argparse.rst:341
msgid "Note that the new ability is also reflected in the help text."
msgstr "新しい機能がヘルプテキストにも反映されている点に気付いたでしょう。"

#: ../../howto/argparse.rst:345
msgid "Combining Positional and Optional arguments"
msgstr "位置引数とOptional引数の併用"

#: ../../howto/argparse.rst:347
msgid "Our program keeps growing in complexity::"
msgstr "プログラムが複雑になってきました::"

#: ../../howto/argparse.rst:349
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbose:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:362
msgid "And now the output:"
msgstr "出力は以下のようになります:"

#: ../../howto/argparse.rst:364
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] [-v] square\n"
"prog.py: error: the following arguments are required: square\n"
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 --verbose\n"
"the square of 4 equals 16\n"
"$ python prog.py --verbose 4\n"
"the square of 4 equals 16"
msgstr ""

#: ../../howto/argparse.rst:376
msgid "We've brought back a positional argument, hence the complaint."
msgstr "位置引数を元に戻したので、引数を指定しないとエラーになりました。"

#: ../../howto/argparse.rst:378
msgid "Note that the order does not matter."
msgstr "２つのオプションの順序を考慮しないことに注意してください。"

#: ../../howto/argparse.rst:380
msgid ""
"How about we give this program of ours back the ability to have multiple "
"verbosity values, and actually get to use them::"
msgstr ""
"複数の詳細レベルを値にとれるようにプログラムを元に戻して、指定された値を使っ"
"てみましょう::"

#: ../../howto/argparse.rst:383
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", type=int,\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:400
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 -v\n"
"usage: prog.py [-h] [-v VERBOSITY] square\n"
"prog.py: error: argument -v/--verbosity: expected one argument\n"
"$ python prog.py 4 -v 1\n"
"4^2 == 16\n"
"$ python prog.py 4 -v 2\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -v 3\n"
"16"
msgstr ""

#: ../../howto/argparse.rst:414
msgid ""
"These all look good except the last one, which exposes a bug in our program. "
"Let's fix it by restricting the values the ``--verbosity`` option can "
"accept::"
msgstr ""
"プログラムのバグである最後の結果を除いて、上手く行っているようです。このバグ"
"を、``--verbosity`` オプションが取れる値を制限することで修正しましょう::"

#: ../../howto/argparse.rst:417
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", type=int, choices=[0, 1, 2],\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:434
msgid ""
"$ python prog.py 4 -v 3\n"
"usage: prog.py [-h] [-v {0,1,2}] square\n"
"prog.py: error: argument -v/--verbosity: invalid choice: 3 (choose from 0, "
"1, 2)\n"
"$ python prog.py 4 -h\n"
"usage: prog.py [-h] [-v {0,1,2}] square\n"
"\n"
"positional arguments:\n"
"  square                display a square of a given number\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -v, --verbosity {0,1,2}\n"
"                        increase output verbosity"
msgstr ""

#: ../../howto/argparse.rst:450
msgid ""
"Note that the change also reflects both in the error message as well as the "
"help string."
msgstr ""
"変更がエラーメッセージとヘルプメッセージの両方に反映されていることに注意して"
"ください。"

#: ../../howto/argparse.rst:453
msgid ""
"Now, let's use a different approach of playing with verbosity, which is "
"pretty common. It also matches the way the CPython executable handles its "
"own verbosity argument (check the output of ``python --help``)::"
msgstr ""
"詳細レベルついて、違ったアプローチを試してみましょう。これは CPython 実行可能"
"ファイルがその詳細レベル引数を扱う方法と同じです。（ ``python --help`` の出力"
"を確認してください）::"

#: ../../howto/argparse.rst:457
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display the square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity == 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity == 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:472
msgid ""
"We have introduced another action, \"count\", to count the number of "
"occurrences of specific options."
msgstr ""
"もう一つの action である \"count\" を紹介します。これは指定されたオプションの"
"出現回数を数えます:"

#: ../../howto/argparse.rst:476
msgid ""
"$ python prog.py 4\n"
"16\n"
"$ python prog.py 4 -v\n"
"4^2 == 16\n"
"$ python prog.py 4 -vv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 --verbosity --verbosity\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -v 1\n"
"usage: prog.py [-h] [-v] square\n"
"prog.py: error: unrecognized arguments: 1\n"
"$ python prog.py 4 -h\n"
"usage: prog.py [-h] [-v] square\n"
"\n"
"positional arguments:\n"
"  square           display a square of a given number\n"
"\n"
"options:\n"
"  -h, --help       show this help message and exit\n"
"  -v, --verbosity  increase output verbosity\n"
"$ python prog.py 4 -vvv\n"
"16"
msgstr ""

#: ../../howto/argparse.rst:501
msgid ""
"Yes, it's now more of a flag (similar to ``action=\"store_true\"``) in the "
"previous version of our script. That should explain the complaint."
msgstr ""
"前のバージョンのスクリプトのようにフラグ (``action=\"store_true\"`` に似てい"
"ます）になりました。エラーとなる理由がわかります。（訳注: ５つ目の例では ``-"
"v`` オプションに引数を与えたため、エラーとなっています。）"

#: ../../howto/argparse.rst:504
msgid "It also behaves similar to \"store_true\" action."
msgstr "これは\"store_true\" アクションによく似た動作をします。"

#: ../../howto/argparse.rst:506
msgid ""
"Now here's a demonstration of what the \"count\" action gives. You've "
"probably seen this sort of usage before."
msgstr ""
"では \"count\" アクションが何をもたらすかデモンストレーションをします。おそら"
"くこのような使用方法を前に見たことがあるでしょう。"

#: ../../howto/argparse.rst:509
msgid ""
"And if you don't specify the ``-v`` flag, that flag is considered to have "
"``None`` value."
msgstr "``-v`` フラグを指定しなければ、フラグの値は ``None`` とみなされます。"

#: ../../howto/argparse.rst:512
msgid ""
"As should be expected, specifying the long form of the flag, we should get "
"the same output."
msgstr "期待通り、長い形式のフラグを指定しても同じ結果になります。"

#: ../../howto/argparse.rst:515
msgid ""
"Sadly, our help output isn't very informative on the new ability our script "
"has acquired, but that can always be fixed by improving the documentation "
"for our script (e.g. via the ``help`` keyword argument)."
msgstr ""
"残念ながら、このヘルプ出力はプログラムが新しく得た機能についてそこまで有益で"
"はありません。しかし、スクリプトのドキュメンテーションを改善することでいつで"
"も修正することができます（例えば、``help`` キーワード引数を使用することで）。"

#: ../../howto/argparse.rst:519
msgid "That last output exposes a bug in our program."
msgstr "最後の出力はプログラムにバグがあることを示します。"

#: ../../howto/argparse.rst:522
msgid "Let's fix::"
msgstr "修正しましょう::"

#: ../../howto/argparse.rst:524
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\",\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"\n"
"# bugfix: replace == with >=\n"
"if args.verbosity >= 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:541
msgid "And this is what it gives:"
msgstr "これが結果です:"

#: ../../howto/argparse.rst:543
msgid ""
"$ python prog.py 4 -vvv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4 -vvvv\n"
"the square of 4 equals 16\n"
"$ python prog.py 4\n"
"Traceback (most recent call last):\n"
"  File \"prog.py\", line 11, in <module>\n"
"    if args.verbosity >= 2:\n"
"TypeError: '>=' not supported between instances of 'NoneType' and 'int'"
msgstr ""

#: ../../howto/argparse.rst:556
msgid ""
"First output went well, and fixes the bug we had before. That is, we want "
"any value >= 2 to be as verbose as possible."
msgstr ""
"最初の出力は上手くいっていますし、以前のバグが修正されています。最も詳細な出"
"力を得るには、2 以上の値が必要です。"

#: ../../howto/argparse.rst:559
msgid "Third output not so good."
msgstr "三番目の結果は、よくありません。"

#: ../../howto/argparse.rst:561
msgid "Let's fix that bug::"
msgstr "このバグを修正しましょう::"

#: ../../howto/argparse.rst:563
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"square\", type=int,\n"
"                    help=\"display a square of a given number\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0,\n"
"                    help=\"increase output verbosity\")\n"
"args = parser.parse_args()\n"
"answer = args.square**2\n"
"if args.verbosity >= 2:\n"
"    print(f\"the square of {args.square} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.square}^2 == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:578
msgid ""
"We've just introduced yet another keyword, ``default``. We've set it to "
"``0`` in order to make it comparable to the other int values. Remember that "
"by default, if an optional argument isn't specified, it gets the ``None`` "
"value, and that cannot be compared to an int value (hence the :exc:"
"`TypeError` exception)."
msgstr ""
"もう一つのキーワード引数である ``default`` を導入しました。整数値と比較できる"
"ように、その値に ``0`` を設定しました。デフォルトでは、optional 引数が指定さ"
"れていない場合 ``None`` となること、``None`` が整数値と比較できない（よって :"
"exc:`TypeError` 例外となる）ことを思い出してください。"

#: ../../howto/argparse.rst:585
msgid "And:"
msgstr "こうなりました:"

#: ../../howto/argparse.rst:587
msgid ""
"$ python prog.py 4\n"
"16"
msgstr ""

#: ../../howto/argparse.rst:592
msgid ""
"You can go quite far just with what we've learned so far, and we have only "
"scratched the surface. The :mod:`argparse` module is very powerful, and "
"we'll explore a bit more of it before we end this tutorial."
msgstr ""
"ここまで学んできたことだけで、さまざまな事が実現できます。しかしまだ表面をな"
"ぞっただけです。 :mod:`argparse` モジュールはとても強力ですので、チュートリア"
"ルを終える前にもう少しだけ探検してみましょう."

#: ../../howto/argparse.rst:599
msgid "Getting a little more advanced"
msgstr "もうちょっとだけ学ぶ"

#: ../../howto/argparse.rst:601
msgid ""
"What if we wanted to expand our tiny program to perform other powers, not "
"just squares::"
msgstr ""
"もし、この小さなプログラムを二乗以外の累乗が行えるように拡張するとどうなるで"
"しょうか::"

#: ../../howto/argparse.rst:604
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"if args.verbosity >= 2:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"elif args.verbosity >= 1:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")\n"
"else:\n"
"    print(answer)"
msgstr ""

#: ../../howto/argparse.rst:618 ../../howto/argparse.rst:656
msgid "Output:"
msgstr "出力:"

#: ../../howto/argparse.rst:620
msgid ""
"$ python prog.py\n"
"usage: prog.py [-h] [-v] x y\n"
"prog.py: error: the following arguments are required: x, y\n"
"$ python prog.py -h\n"
"usage: prog.py [-h] [-v] x y\n"
"\n"
"positional arguments:\n"
"  x                the base\n"
"  y                the exponent\n"
"\n"
"options:\n"
"  -h, --help       show this help message and exit\n"
"  -v, --verbosity\n"
"$ python prog.py 4 2 -v\n"
"4^2 == 16"
msgstr ""

#: ../../howto/argparse.rst:639
msgid ""
"Notice that so far we've been using verbosity level to *change* the text "
"that gets displayed. The following example instead uses verbosity level to "
"display *more* text instead::"
msgstr ""
"これまで、出力されるテキストを *変更する* ために詳細レベルを使ってきました。"
"かわりに下記の例では、*追加の* テキストを出力するのに詳細レベルを使用します::"

#: ../../howto/argparse.rst:643
msgid ""
"import argparse\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"parser.add_argument(\"-v\", \"--verbosity\", action=\"count\", default=0)\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"if args.verbosity >= 2:\n"
"    print(f\"Running '{__file__}'\")\n"
"if args.verbosity >= 1:\n"
"    print(f\"{args.x}^{args.y} == \", end=\"\")\n"
"print(answer)"
msgstr ""

#: ../../howto/argparse.rst:658
msgid ""
"$ python prog.py 4 2\n"
"16\n"
"$ python prog.py 4 2 -v\n"
"4^2 == 16\n"
"$ python prog.py 4 2 -vv\n"
"Running 'prog.py'\n"
"4^2 == 16"
msgstr ""

#: ../../howto/argparse.rst:672
msgid "Specifying ambiguous arguments"
msgstr "多義性のある引数の指定"

#: ../../howto/argparse.rst:674
msgid ""
"When there is ambiguity in deciding whether an argument is positional or for "
"an argument, ``--`` can be used to tell :meth:`~ArgumentParser.parse_args` "
"that everything after that is a positional argument::"
msgstr ""
"ある引数の解釈について、位置引数なのか、ある引数に対する追加の引数なのか、あ"
"いまいさがあるときは、 ``--`` を使うことで :meth:`~ArgumentParser."
"parse_args` に対してこれ以降は位置引数であることを伝えることができます::"

#: ../../howto/argparse.rst:678
msgid ""
">>> parser = argparse.ArgumentParser(prog='PROG')\n"
">>> parser.add_argument('-n', nargs='+')\n"
">>> parser.add_argument('args', nargs='*')\n"
"\n"
">>> # ambiguous, so parse_args assumes it's an option\n"
">>> parser.parse_args(['-f'])\n"
"usage: PROG [-h] [-n N [N ...]] [args ...]\n"
"PROG: error: unrecognized arguments: -f\n"
"\n"
">>> parser.parse_args(['--', '-f'])\n"
"Namespace(args=['-f'], n=None)\n"
"\n"
">>> # ambiguous, so the -n option greedily accepts arguments\n"
">>> parser.parse_args(['-n', '1', '2', '3'])\n"
"Namespace(args=[], n=['1', '2', '3'])\n"
"\n"
">>> parser.parse_args(['-n', '1', '--', '2', '3'])\n"
"Namespace(args=['2', '3'], n=['1'])"
msgstr ""

#: ../../howto/argparse.rst:699
msgid "Conflicting options"
msgstr "競合するオプション"

#: ../../howto/argparse.rst:701
msgid ""
"So far, we have been working with two methods of an :class:`argparse."
"ArgumentParser` instance. Let's introduce a third one, :meth:"
"`~ArgumentParser.add_mutually_exclusive_group`. It allows for us to specify "
"options that conflict with each other. Let's also change the rest of the "
"program so that the new functionality makes more sense: we'll introduce the "
"``--quiet`` option, which will be the opposite of the ``--verbose`` one::"
msgstr ""
"これまでのところ、 :class:`argparse.ArgumentParser` インスタンスの2つのメソッ"
"ドについて学んできました。ここで3つめのメソッドとして :meth:`~ArgumentParser."
"add_mutually_exclusive_group` を導入しましょう。このメソッドは互いに対立する"
"引数の指定を可能にします。また、新しい機能として理解しやすいように、プログラ"
"ムの残りの部分を変更しましょう: 以下では ``--quiet`` オプションを ``--"
"verbose`` と反対のオプションとして導入します::"

#: ../../howto/argparse.rst:709
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"group = parser.add_mutually_exclusive_group()\n"
"group.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\n"
"group.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"\n"
"if args.quiet:\n"
"    print(answer)\n"
"elif args.verbose:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"else:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")"
msgstr ""

#: ../../howto/argparse.rst:727
msgid ""
"Our program is now simpler, and we've lost some functionality for the sake "
"of demonstration. Anyways, here's the output:"
msgstr ""
"プログラムはより簡潔になりましたが、デモのための機能が失われました。ともかく"
"下記が実行結果です:"

#: ../../howto/argparse.rst:730
msgid ""
"$ python prog.py 4 2\n"
"4^2 == 16\n"
"$ python prog.py 4 2 -q\n"
"16\n"
"$ python prog.py 4 2 -v\n"
"4 to the power 2 equals 16\n"
"$ python prog.py 4 2 -vq\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose\n"
"$ python prog.py 4 2 -v --quiet\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"prog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose"
msgstr ""

#: ../../howto/argparse.rst:745
msgid ""
"That should be easy to follow. I've added that last output so you can see "
"the sort of flexibility you get, i.e. mixing long form options with short "
"form ones."
msgstr ""
"これは分かりやすいでしょう。ここで得たちょっとした柔軟性を示すために最後の出"
"力を追加しました、つまり長い形式のオプションと短い形式のオプションの混在で"
"す。"

#: ../../howto/argparse.rst:749
msgid ""
"Before we conclude, you probably want to tell your users the main purpose of "
"your program, just in case they don't know::"
msgstr ""
"結びの前に、恐らくあなたはプログラムの主な目的をユーザに伝えたいでしょう。万"
"が一、彼らがそれを知らないときに備えて::"

#: ../../howto/argparse.rst:752
msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(description=\"calculate X to the power of "
"Y\")\n"
"group = parser.add_mutually_exclusive_group()\n"
"group.add_argument(\"-v\", \"--verbose\", action=\"store_true\")\n"
"group.add_argument(\"-q\", \"--quiet\", action=\"store_true\")\n"
"parser.add_argument(\"x\", type=int, help=\"the base\")\n"
"parser.add_argument(\"y\", type=int, help=\"the exponent\")\n"
"args = parser.parse_args()\n"
"answer = args.x**args.y\n"
"\n"
"if args.quiet:\n"
"    print(answer)\n"
"elif args.verbose:\n"
"    print(f\"{args.x} to the power {args.y} equals {answer}\")\n"
"else:\n"
"    print(f\"{args.x}^{args.y} == {answer}\")"
msgstr ""

#: ../../howto/argparse.rst:770
msgid ""
"Note that slight difference in the usage text. Note the ``[-v | -q]``, which "
"tells us that we can either use ``-v`` or ``-q``, but not both at the same "
"time:"
msgstr ""
"使用方法のテキストが少し変化しました。``[-v | -q]`` は ``-v`` または ``-q`` "
"のどちらかを使用できるが、同時に両方を使用できないことを意味します:"

#: ../../howto/argparse.rst:774 ../../howto/argparse.rst:801
msgid ""
"$ python prog.py --help\n"
"usage: prog.py [-h] [-v | -q] x y\n"
"\n"
"calculate X to the power of Y\n"
"\n"
"positional arguments:\n"
"  x              the base\n"
"  y              the exponent\n"
"\n"
"options:\n"
"  -h, --help     show this help message and exit\n"
"  -v, --verbose\n"
"  -q, --quiet"
msgstr ""

#: ../../howto/argparse.rst:792
msgid "How to translate the argparse output"
msgstr "argparse の出力を翻訳するには"

#: ../../howto/argparse.rst:794
msgid ""
"The output of the :mod:`argparse` module such as its help text and error "
"messages are all made translatable using the :mod:`gettext` module. This "
"allows applications to easily localize messages produced by :mod:`argparse`. "
"See also :ref:`i18n-howto`."
msgstr ""
"ヘルプテキストやエラーメッセージなどの :mod:`argparse` モジュールの出力は、す"
"べて :mod:`gettext` モジュールを使って訳せるように作られています。これによ"
"り、 :mod:`argparse` によって生成されたメッセージを簡単にローカライズできま"
"す。 :ref:`i18n-howto` も参照してください。"

#: ../../howto/argparse.rst:799
msgid "For instance, in this :mod:`argparse` output:"
msgstr "たとえば、この :mod:`argparse` の出力では:"

#: ../../howto/argparse.rst:817
msgid ""
"The strings ``usage:``, ``positional arguments:``, ``options:`` and ``show "
"this help message and exit`` are all translatable."
msgstr ""
"文字列 ``usage:``, ``positional arguments:``, ``options:`` と ``show this "
"help message and exit`` はすべて訳せます。"

#: ../../howto/argparse.rst:820
msgid ""
"In order to translate these strings, they must first be extracted into a ``."
"po`` file. For example, using `Babel <https://babel.pocoo.org/>`__, run this "
"command:"
msgstr ""
"これらの文字列を訳すには、それらをまず ``.po`` ファイルに抽出する必要がありま"
"す。たとえば、 `Babel <https://babel.pocoo.org/>`__ を使い、次のコマンドを実"
"行します。"

#: ../../howto/argparse.rst:824
msgid "$ pybabel extract -o messages.po /usr/lib/python3.12/argparse.py"
msgstr ""

#: ../../howto/argparse.rst:828
msgid ""
"This command will extract all translatable strings from the :mod:`argparse` "
"module and output them into a file named ``messages.po``. This command "
"assumes that your Python installation is in ``/usr/lib``."
msgstr ""
"このコマンドは :mod:`argparse` モジュールからすべての翻訳可能な文字列を抽出"
"し、それらを ``messages.po`` という名前のファイルに出力します。このコマンド"
"は Python のインストールが ``/usr/lib`` にあることを前提としています。"

#: ../../howto/argparse.rst:832
msgid ""
"You can find out the location of the :mod:`argparse` module on your system "
"using this script::"
msgstr ""
"システム上の :mod:`argparse` モジュールの場所は、次のスクリプトで調べられま"
"す::"

#: ../../howto/argparse.rst:835
msgid ""
"import argparse\n"
"print(argparse.__file__)"
msgstr ""

#: ../../howto/argparse.rst:838
msgid ""
"Once the messages in the ``.po`` file are translated and the translations "
"are installed using :mod:`gettext`, :mod:`argparse` will be able to display "
"the translated messages."
msgstr ""
"``.po`` ファイル内のメッセージが訳され、その訳が :mod:`gettext` を用いてイン"
"ストールされると、 :mod:`argparse` は翻訳されたメッセージを表示できるようにな"
"ります。"

#: ../../howto/argparse.rst:842
msgid ""
"To translate your own strings in the :mod:`argparse` output, use :mod:"
"`gettext`."
msgstr ""
":mod:`argparse` 出力内のあなたの文字列を翻訳するには、 :mod:`gettext` を使い"
"ます。"

#: ../../howto/argparse.rst:845
msgid "Conclusion"
msgstr "結び"

#: ../../howto/argparse.rst:847
msgid ""
"The :mod:`argparse` module offers a lot more than shown here. Its docs are "
"quite detailed and thorough, and full of examples. Having gone through this "
"tutorial, you should easily digest them without feeling overwhelmed."
msgstr ""
":mod:`argparse` モジュールはここで学んだことより多くの機能を提供します。モ"
"ジュールのドキュメントはとても詳細で、綿密で、そしてたくさんの例があります。"
"このチュートリアルの体験したことで、気がめいることなくそれらの他の機能を会得"
"できるに違いありません。"
