# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2018-05-29 04:30+0000\n"
"Last-Translator: 秘湯 <xwhhsprings@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/webservers.rst:3
msgid "HOWTO Use Python in the web"
msgstr "Python を Web 上で使うには"

#: ../../howto/webservers.rst:0
msgid "Author"
msgstr "著者"

#: ../../howto/webservers.rst:5
msgid "Marek Kubica"
msgstr "Marek Kubica"

#: ../../howto/webservers.rstNone
msgid "Abstract"
msgstr "概要"

#: ../../howto/webservers.rst:9
msgid ""
"This document shows how Python fits into the web.  It presents some ways to "
"integrate Python with a web server, and general practices useful for "
"developing web sites."
msgstr ""
"このドキュメントは Python を web 向けに使う方法を示します。\n"
"Python を web サーバとともに利用するためのいくつかの方法や web サイトを開発す"
"る際の一般的なプラクティスを示します。"

#: ../../howto/webservers.rst:14
msgid ""
"Programming for the Web has become a hot topic since the rise of \"Web "
"2.0\", which focuses on user-generated content on web sites.  It has always "
"been possible to use Python for creating web sites, but it was a rather "
"tedious task. Therefore, many frameworks and helper tools have been created "
"to assist developers in creating faster and more robust sites.  This HOWTO "
"describes some of the methods used to combine Python with a web server to "
"create dynamic content.  It is not meant as a complete introduction, as this "
"topic is far too broad to be covered in one single document.  However, a "
"short overview of the most popular libraries is provided."
msgstr ""
"web サイトのコンテンツをユーザが作るということに焦点を当てた \"Web 2.0\" の提"
"起以来 Web プログラミングは人気の話題となっています。\n"
"Python を使って web サイトを作れましたが、それはやや退屈な作業でした。\n"
"そのため、開発者がサイトを速く、頑強に作るのを助けるために多くのフレームワー"
"クと補助ツールが作成されました。\n"
"この HOWTO では動的なコンテンツを作成するために Python と web サーバを結合さ"
"せるいくつかの方法について述べます。\n"
"この話題は非常に広過ぎてドキュメント 1 つだけでは網羅しきれないため、この "
"HOWTO を完全な入門書とするつもりはありません。\n"
"ここでは最も人気のあるライブラリの簡単な概要を述べます。"

#: ../../howto/webservers.rst:26
msgid ""
"While this HOWTO tries to give an overview of Python in the web, it cannot "
"always be as up to date as desired.  Web development in Python is rapidly "
"moving forward, so the wiki page on `Web Programming <https://wiki.python."
"org/moin/WebProgramming>`_ may be more in sync with recent development."
msgstr ""
"この HOWTO は Python を web 上で使う方法の概要を扱おうとしていますが、HOWTO "
"が常に望みどおりに最新の状況を伝えられるわけではありません。\n"
"Python での web 開発は急速に発展しています、そのため Wiki ページ `Web "
"Programming <https://wiki.python.org/moin/WebProgramming>`_ に多くの最新の開"
"発に関する内容があるでしょう。"

#: ../../howto/webservers.rst:34
msgid "The Low-Level View"
msgstr "低レベルから見て"

#: ../../howto/webservers.rst:36
msgid ""
"When a user enters a web site, their browser makes a connection to the "
"site's web server (this is called the *request*).  The server looks up the "
"file in the file system and sends it back to the user's browser, which "
"displays it (this is the *response*).  This is roughly how the underlying "
"protocol, HTTP, works."
msgstr ""
"ユーザが web サイトを訪れた時、ブラウザはサイトの web サーバとコネクションを"
"形成します (これは *リクエスト* と呼ばれます)。サーバはファイルシステム上から"
"ファイルを探し出し、ユーザのブラウザにそれを送り返し、ブラウザが表示します "
"(これが *レスポンス* です)。これが基礎となるプロトロル、HTTP のおおまかな動作"
"です。"

#: ../../howto/webservers.rst:41
msgid ""
"Dynamic web sites are not based on files in the file system, but rather on "
"programs which are run by the web server when a request comes in, and which "
"*generate* the content that is returned to the user.  They can do all sorts "
"of useful things, like display the postings of a bulletin board, show your "
"email, configure software, or just display the current time.  These programs "
"can be written in any programming language the server supports.  Since most "
"servers support Python, it is easy to use Python to create dynamic web sites."
msgstr ""
"さて、動的な web サイトはファイルシステム上のファイルではなく、リクエストが来"
"たときに web サーバが実行するプログラムの上に作られていて、このプログラムが"
"ユーザへ返すコンテンツを *生成* します。\n"
"それらは掲示板の投稿を表示したり、メールを表示したり、ソフトウェアの設定や現"
"在時刻の表示などの様々な便利なことができます。\n"
"これらのプログラムはサーバがサポートするあらゆる言語で書くことができます。\n"
"ほとんどのサーバが Python をサポートしているので、動的な web サイトを作成する"
"のに Python を利用することは簡単です。"

#: ../../howto/webservers.rst:49
msgid ""
"Most HTTP servers are written in C or C++, so they cannot execute Python "
"code directly -- a bridge is needed between the server and the program.  "
"These bridges, or rather interfaces, define how programs interact with the "
"server. There have been numerous attempts to create the best possible "
"interface, but there are only a few worth mentioning."
msgstr ""
"ほとんどの HTTP サーバは C や C++ で書かれていて、これらは Python コードを直"
"接は実行できず、サーバとプログラムの間にブリッジが必要です。\n"
"これらのブリッジやインターフェースはプログラムがサーバとどうやりとりするかを"
"定めます。\n"
"これまでに最良のインターフェースを作成するために膨大な数の試みがなされてきま"
"したが、触れる価値のあるものはわずかです。"

#: ../../howto/webservers.rst:55
msgid ""
"Not every web server supports every interface.  Many web servers only "
"support old, now-obsolete interfaces; however, they can often be extended "
"using third-party modules to support newer ones."
msgstr ""
"全ての web サーバが全てのインターフェースをサポートしているわけではありませ"
"ん。多くの web サーバは古い、現在では撤廃されたインターフェースのみをサポート"
"しています; しかし、多くの場合にはサードパーティーモジュールを利用して新しい"
"インターフェースをサポートするように拡張できます。"

#: ../../howto/webservers.rst:61
msgid "Common Gateway Interface"
msgstr "Common Gateway Interface"

#: ../../howto/webservers.rst:63
msgid ""
"This interface, most commonly referred to as \"CGI\", is the oldest, and is "
"supported by nearly every web server out of the box.  Programs using CGI to "
"communicate with their web server need to be started by the server for every "
"request.  So, every request starts a new Python interpreter -- which takes "
"some time to start up -- thus making the whole interface only usable for low "
"load situations."
msgstr ""
"一般に \"CGI\" と呼ばれるこのインターフェースは最も古く、ほとんどの web サー"
"バでサポートされ、すぐに使うことができます。\n"
"CGI を利用して web サーバと通信するプログラムはリクエスト毎に起動される必要が"
"あります。\n"
"そのため毎回のリクエストは新しい Python インタプリタを起動します -- このため"
"起動にいくらか時間がかかります -- そしてこのインターフェースは負荷が低い状況"
"にのみ向いています。"

#: ../../howto/webservers.rst:70
msgid ""
"The upside of CGI is that it is simple -- writing a Python program which "
"uses CGI is a matter of about three lines of code.  This simplicity comes at "
"a price: it does very few things to help the developer."
msgstr ""
"CGI の利点は単純だということです -- CGI を利用するプログラムを書くのは3行の"
"コードを書くだけです。しかし、この単純さは後で高くつきます; 開発者を少ししか"
"助けてくれません。"

#: ../../howto/webservers.rst:74
msgid ""
"Writing CGI programs, while still possible, is no longer recommended.  With :"
"ref:`WSGI <WSGI>`, a topic covered later in this document, it is possible to "
"write programs that emulate CGI, so they can be run as CGI if no better "
"option is available."
msgstr ""
"CGI プログラムを書くことは可能ではありますが、もはや推奨されません。\n"
":ref:`WSGI <WSGI>` (詳しくは後で述べます) では CGI をエミュレートするプログラ"
"ムを書くことができるので、よりよい選択肢が選べない場合には CGI としてプログラ"
"ムを実行できます。"

#: ../../howto/webservers.rst:81
msgid ""
"The Python standard library includes some modules that are helpful for "
"creating plain CGI programs:"
msgstr ""
"Python の標準ライブラリには簡素な CGI プログラムを作成するのを助けるいくつか"
"のモジュールが含まれています:"

#: ../../howto/webservers.rst:84
msgid ":mod:`cgi` -- Handling of user input in CGI scripts"
msgstr ":mod:`cgi` -- CGI スクリプトでのユーザ入力を扱います"

#: ../../howto/webservers.rst:85
msgid ""
":mod:`cgitb` -- Displays nice tracebacks when errors happen in CGI "
"applications, instead of presenting a \"500 Internal Server Error\" message"
msgstr ""
":mod:`cgitb` -- CGI アプリケーションの中でエラーが発生した場合に、 \"500 "
"Internal Server Error\" メッセージの代わりに親切なトレースバックを表示します"

#: ../../howto/webservers.rst:88
msgid ""
"The Python wiki features a page on `CGI scripts <https://wiki.python.org/"
"moin/CgiScripts>`_ with some additional information about CGI in Python."
msgstr ""
"Python wiki では `CGI scripts <https://wiki.python.org/moin/CgiScripts>`_ に"
"あるページに Python での CGI に関して追加情報を取り上げています。"

#: ../../howto/webservers.rst:94
msgid "Simple script for testing CGI"
msgstr "CGI をテストするための単純なスクリプト"

#: ../../howto/webservers.rst:96
msgid ""
"To test whether your web server works with CGI, you can use this short and "
"simple CGI program::"
msgstr ""
"CGI が web サーバで動くかどうかを調べるのに、この短く単純な CGI プログラムが"
"利用できます::"

#: ../../howto/webservers.rst:111
msgid ""
"Depending on your web server configuration, you may need to save this code "
"with a ``.py`` or ``.cgi`` extension.  Additionally, this file may also need "
"to be in a ``cgi-bin`` folder, for security reasons."
msgstr ""
"web サーバの設定に依存して、このコードを ``.py`` もしくは ``.cgi`` 拡張子をつ"
"けたファイルに書く必要があります。\n"
"それに加えて、セキュリティ上の理由のため、ファイルは ``cgi-bin`` フォルダ内に"
"置く必要があるかもしれません。"

#: ../../howto/webservers.rst:115
msgid ""
"You might wonder what the ``cgitb`` line is about.  This line makes it "
"possible to display a nice traceback instead of just crashing and displaying "
"an \"Internal Server Error\" in the user's browser.  This is useful for "
"debugging, but it might risk exposing some confidential data to the user.  "
"You should not use ``cgitb`` in production code for this reason.  You should "
"*always* catch exceptions, and display proper error pages -- end-users don't "
"like to see nondescript \"Internal Server Errors\" in their browsers."
msgstr ""
"``cgitb`` 行が何なのか疑問に思うかもしれません。\n"
"この行は、クラッシュしてブラウザで \"Internal Server Error\" と表示する代わり"
"に、親切なトレースバックを表示できるようにします。\n"
"これはデバッグの際に便利ですが、いくつかの機密データをユーザにさらけ出すリス"
"クにもなりえます。\n"
"そういった理由で、スクリプトを完成品として利用する準備ができたら ``cgitb`` は"
"使ってはいけません。\n"
"さらに、*常に* 例外を捕捉し、適切なエラーページを表示するようにしなければいけ"
"ません -- エンドユーザは得体の知れない \"Internal Server Errors\" をブラウザ"
"で見ることを好みません。"

#: ../../howto/webservers.rst:125
msgid "Setting up CGI on your own server"
msgstr "自身のサーバで CGI を立ち上げる"

#: ../../howto/webservers.rst:127
msgid ""
"If you don't have your own web server, this does not apply to you.  You can "
"check whether it works as-is, and if not you will need to talk to the "
"administrator of your web server. If it is a big host, you can try filing a "
"ticket asking for Python support."
msgstr ""
"自身の web サーバを持っていない場合には、この内容は当てはまりません。\n"
"そのままで動作するか調べることは可能で、もし動作しない場合は、とにかく web "
"サーバの管理者と話し合う必要があります。\n"
"大きなホストである場合、チケットに記入して Python サポートを求められるでしょ"
"う。"

#: ../../howto/webservers.rst:132
msgid ""
"If you are your own administrator or want to set up CGI for testing purposes "
"on your own computers, you have to configure it by yourself.  There is no "
"single way to configure CGI, as there are many web servers with different "
"configuration options.  Currently the most widely used free web server is "
"`Apache HTTPd <http://httpd.apache.org/>`_, or Apache for short. Apache can "
"be easily installed on nearly every system using the system's package "
"management tool.  `lighttpd <http://www.lighttpd.net>`_ is another "
"alternative and is said to have better performance.  On many systems this "
"server can also be installed using the package management tool, so manually "
"compiling the web server may not be needed."
msgstr ""
"あなた自身が管理者であるか、自身のコンピュータで試すためにインストールしたい"
"場合には自分自身で設定する必要があります。\n"
"異なる設定オプションを持つ web サーバがたくさんあるため、CGI の設定法はひとつ"
"ではありません。\n"
"現在最も広く使われている web サーバは  `Apache HTTPd <http://httpd.apache."
"org/>`_ 、略して Apache です。\n"
"Apache はほぼ全てのシステムにパッケージ管理ツールを使って簡単にインストールで"
"きます。\n"
"`lighttpd <http://www.lighttpd.net>`_ はもう一つの選択肢で、パフォーマンスが"
"より優れているといわれています。\n"
"多くのシステムでこのサーバはパッケージ管理ツールを利用してインストールできる"
"ので、web サーバを手動でコンパイルする必要はないでしょう。"

#: ../../howto/webservers.rst:143
msgid ""
"On Apache you can take a look at the `Dynamic Content with CGI <http://httpd."
"apache.org/docs/2.2/howto/cgi.html>`_ tutorial, where everything is "
"described.  Most of the time it is enough just to set ``+ExecCGI``.  The "
"tutorial also describes the most common gotchas that might arise."
msgstr ""
"Apache ではチュートリアル `Dynamic Content with CGI <http://httpd.apache.org/"
"docs/2.2/howto/cgi.html>`_ を参照でき、これには全てが解説されています。\n"
"ほとんど場合には ``+ExecCGI`` を設定すれば十分です。\n"
"このチュートリアルはよくでくわす可能性のある落し穴についても書かれています。"

#: ../../howto/webservers.rst:148
msgid ""
"On lighttpd you need to use the `CGI module <http://redmine.lighttpd.net/"
"projects/lighttpd/wiki/Docs_ModCGI>`_\\ , which can be configured in a "
"straightforward way.  It boils down to setting ``cgi.assign`` properly."
msgstr ""
"lighttpd では `CGI module <http://redmine.lighttpd.net/projects/lighttpd/"
"wiki/Docs_ModCGI>`_ を使う必要があり、この設定は分かりやすいです。\n"
"結局のところ、``cgi.assign`` を適切に設定することになります。"

#: ../../howto/webservers.rst:154
msgid "Common problems with CGI scripts"
msgstr "CGI スクリプトでの一般的な問題"

#: ../../howto/webservers.rst:156
msgid ""
"Using CGI sometimes leads to small annoyances while trying to get these "
"scripts to run.  Sometimes a seemingly correct script does not work as "
"expected, the cause being some small hidden problem that's difficult to spot."
msgstr ""
"CGI を利用していると、スクリプトを走らせようとするときにちょっといらいらする"
"ことがときどきあります。\n"
"あるときは一見正しいスクリプトが期待どおりに動かないことがあり、気付くのが難"
"しい小さな隠れた問題が原因だったりします。"

#: ../../howto/webservers.rst:160
msgid "Some of these potential problems are:"
msgstr "いくつかの潜在的な問題は次の通りです:"

#: ../../howto/webservers.rst:162
msgid ""
"The Python script is not marked as executable.  When CGI scripts are not "
"executable most web servers will let the user download it, instead of "
"running it and sending the output to the user.  For CGI scripts to run "
"properly on Unix-like operating systems, the ``+x`` bit needs to be set. "
"Using ``chmod a+x your_script.py`` may solve this problem."
msgstr ""
"Python スクリプトが実行可能でない。\n"
"CGI スクリプトが実行可能でないとき、多くの web サーバは実行しユーザに出力を送"
"る代わりに、ユーザがダウンロードできるようにします。\n"
"CGI スクリプトが Unix 系 OS で適切に実行されるために ``+x`` ビットが設定され"
"る必要があります。\n"
"``chmod a+x your_script.py`` を使うことで問題は解決するでしょう。"

#: ../../howto/webservers.rst:168
msgid ""
"On a Unix-like system, The line endings in the program file must be Unix "
"style line endings.  This is important because the web server checks the "
"first line of the script (called shebang) and tries to run the program "
"specified there.  It gets easily confused by Windows line endings (Carriage "
"Return & Line Feed, also called CRLF), so you have to convert the file to "
"Unix line endings (only Line Feed, LF).  This can be done automatically by "
"uploading the file via FTP in text mode instead of binary mode, but the "
"preferred way is just telling your editor to save the files with Unix line "
"endings.  Most editors support this."
msgstr ""
"Unix 系システムでは、プログラムファイルの行末は Unix 形式でなければなりませ"
"ん。\n"
"web サーバはスクリプト最初の行 (shebang と呼ばれます) を調べ、そこで指定され"
"たプログラムを実行しようとするため、ここが重要なのです。\n"
"これは Windows の行末 (Carriage Return & Line Feed、または CRLF) によって簡単"
"に混乱させられるので、ファイルの行末を Unix の行末 (Line Feed, LF のみ) に変"
"換する必要があります。\n"
"これは FTP 経由でバイナリモードではなくテキストモードでファイルをアップロード"
"すると自動的に行なわれますが、単に Unix 行末で保存するようテキストエディタに"
"指示する方が望ましいです。\n"
"ほとんどのエディタはこの機能をサポートしています。"

#: ../../howto/webservers.rst:178
msgid ""
"Your web server must be able to read the file, and you need to make sure the "
"permissions are correct.  On unix-like systems, the server often runs as "
"user and group ``www-data``, so it might be worth a try to change the file "
"ownership, or making the file world readable by using ``chmod a+r "
"your_script.py``."
msgstr ""
"web サーバはファイルが読めなければならないので、パーミッションが適切になって"
"いるか確認する必要があります。\n"
"Unix 系システムでは、サーバはしばしば ``www-data`` ユーザ、 ``www-data`` グ"
"ループのパーミッションで実行されているので、ファイルの所有権を変更したり、 "
"``chmod a+r your_script.py`` を使いファイルを誰からでも読み込み可能にしたりす"
"るのは試す価値があります。"

#: ../../howto/webservers.rst:184
msgid ""
"The web server must know that the file you're trying to access is a CGI "
"script. Check the configuration of your web server, as it may be configured "
"to expect a specific file extension for CGI scripts."
msgstr ""
"web サーバはアクセスを試みているファイルが CGI スクリプトであるということを"
"知っていなければなりません。\n"
"web サーバが CGI スクリプトに対し、ある特定のファイル拡張子を持つことを要求す"
"るよう設定されていないか設定を確認して下さい。"

#: ../../howto/webservers.rst:188
msgid ""
"On Unix-like systems, the path to the interpreter in the shebang (``#!/usr/"
"bin/env python``) must be correct.  This line calls ``/usr/bin/env`` to find "
"Python, but it will fail if there is no ``/usr/bin/env``, or if Python is "
"not in the web server's path.  If you know where your Python is installed, "
"you can also use that full path.  The commands ``whereis python`` and ``type "
"-p python`` could help you find where it is installed.  Once you know the "
"path, you can change the shebang accordingly: ``#!/usr/bin/python``."
msgstr ""
"Unix 系システムでは、 shebang にあるインタプリタへのパス (``#!/usr/bin/env "
"python``) は正確でなければなりません。\n"
"この行は Python を見つけるために ``/usr/bin/env`` を呼び出しますが、``/usr/"
"bin/env`` が無いか Python が web サーバのパスに無い場合は失敗します。\n"
"Python がどこにインストールされているか分かっている場合、そのフルパスを使うこ"
"ともできます。\n"
"``whereis python`` コマンドと ``type -p python`` コマンドも Python がどこにイ"
"ンストールされたかを探すのに役立つでしょう。\n"
"一旦パスが分かれば、shebang 行をそれに応じて変更できます: ``#!/usr/bin/"
"python``。"

#: ../../howto/webservers.rst:197
msgid ""
"The file must not contain a BOM (Byte Order Mark). The BOM is meant for "
"determining the byte order of UTF-16 and UTF-32 encodings, but some editors "
"write this also into UTF-8 files.  The BOM interferes with the shebang line, "
"so be sure to tell your editor not to write the BOM."
msgstr ""
"ファイルは BOM (Byte Order Mark) を含んでいてはいけません。\n"
"BOM は UTF-16 と UTF-32 エンコーディングのバイト順を決定するのに利用されます"
"が、あるエディタは UTF-8 ファイルにも BOM を書き込むことがあります。\n"
"BOM は shebang 行に影響するので、エディタが BOM を書き込まないようにしてくだ"
"さい。"

#: ../../howto/webservers.rst:202
msgid ""
"If the web server is using :ref:`mod-python`, ``mod_python`` may be having "
"problems.  ``mod_python`` is able to handle CGI scripts by itself, but it "
"can also be a source of issues."
msgstr ""
"web サーバが :ref:`mod-python` を使っている場合、 ``mod_python`` が問題となる"
"ことがあります。\n"
"``mod_python`` はそれ自身で CGI スクリプトを扱うことができますが、そのことが"
"問題の原因となることがあります。"

#: ../../howto/webservers.rst:210
msgid "mod_python"
msgstr "mod_python"

#: ../../howto/webservers.rst:212
msgid ""
"People coming from PHP often find it hard to grasp how to use Python in the "
"web. Their first thought is mostly `mod_python <http://modpython.org/>`_\\ , "
"because they think that this is the equivalent to ``mod_php``.  Actually, "
"there are many differences.  What ``mod_python`` does is embed the "
"interpreter into the Apache process, thus speeding up requests by not having "
"to start a Python interpreter for each request.  On the other hand, it is "
"not \"Python intermixed with HTML\" in the way that PHP is often intermixed "
"with HTML. The Python equivalent of that is a template engine.  "
"``mod_python`` itself is much more powerful and provides more access to "
"Apache internals.  It can emulate CGI, work in a \"Python Server Pages\" "
"mode (similar to JSP) which is \"HTML intermingled with Python\", and it has "
"a \"Publisher\" which designates one file to accept all requests and decide "
"what to do with them."
msgstr ""
"PHP から来た人達はしばしば、Python を web 上で利用する方法を把握するのに苦労"
"します。\n"
"彼らが最初に考えるのはたいてい `mod_python <http://modpython.org/>`_ のこと"
"で、それは ``mod_python`` が ``mod_php`` と同等のものだと考えるからです。\n"
"しかし実際にはたくさんの相違点があります。\n"
"``mod_python`` が行なうことは Apache プロセスへのインタプリタの埋め込みで、そ"
"のためリクエストごとに Python インタプリタを起動させる必要が無いので、リクエ"
"ストに対する速度が向上します。\n"
"一方で PHP でよくやるような「HTML への Python の埋め込み」とはかけ離れていま"
"す。\n"
"Python でそれと同等なことをするのはテンプレートエンジンです。\n"
"``mod_python`` 自身はより強力で Apache 内部に対してより多くのアクセスを提供し"
"ます。\n"
"CGI をエミュレートし、JSP に似た「HTML への Python 埋め込み」である \"Python "
"Server Pages\" モードで動作でき、全てのリクエストを一つのファイルで受け付けて"
"何を実行するを決める \"Publisher\" を持っています。"

#: ../../howto/webservers.rst:225
msgid ""
"``mod_python`` does have some problems.  Unlike the PHP interpreter, the "
"Python interpreter uses caching when executing files, so changes to a file "
"will require the web server to be restarted.  Another problem is the basic "
"concept -- Apache starts child processes to handle the requests, and "
"unfortunately every child process needs to load the whole Python interpreter "
"even if it does not use it.  This makes the whole web server slower.  "
"Another problem is that, because ``mod_python`` is linked against a specific "
"version of ``libpython``, it is not possible to switch from an older version "
"to a newer (e.g. 2.4 to 2.5) without recompiling ``mod_python``.  "
"``mod_python`` is also bound to the Apache web server, so programs written "
"for ``mod_python`` cannot easily run on other web servers."
msgstr ""
"しかし、``mod_python`` はいくつかの問題も抱えています。\n"
"PHP インタプリタと違い Python インタプリタはファイル実行時にキャッシュを利用"
"するため、ファイルの変更時にはアップデートするには web サーバ全体を再起動する"
"必要があります。\n"
"もう一つの問題は基本的なコンセプトにあります -- Apache はリクエストを扱うため"
"にいくつかの子プロセスを起動し、不幸にも全ての子プロセスが Python インタプリ"
"タ全体を、利用しない場合であっても、読み込む必要があるのです。\n"
"このせいで web サーバ全体が遅くなります。\n"
"別の問題は ``mod_python`` は特定のバージョンの ``libpython`` に対してリンクさ"
"れるため、``mod_python`` を再コンパイルせずに古いバージョンから新しいバージョ"
"ンに切り替える (例えば 2.4 から 2.5) ことはできません。\n"
"さらに ``mod_python`` は Apache web サーバとも結び付いているため "
"``mod_python`` 用に書かれたプログラムは他の web サーバで簡単に動かすことはで"
"きません。"

#: ../../howto/webservers.rst:237
msgid ""
"These are the reasons why ``mod_python`` should be avoided when writing new "
"programs.  In some circumstances it still might be a good idea to use "
"``mod_python`` for deployment, but WSGI makes it possible to run WSGI "
"programs under ``mod_python`` as well."
msgstr ""
"これらが新しくプログラムを書く際に ``mod_python`` を避けるべき理由です。いく"
"つかの状況では ``mod_python`` を利用するのはよいアイデアでしょうが、WSGI は "
"``mod_python`` 下でも WSGI プログラムを同様に動かせます。"

#: ../../howto/webservers.rst:244
msgid "FastCGI and SCGI"
msgstr "FastCGI と SCGI"

#: ../../howto/webservers.rst:246
msgid ""
"FastCGI and SCGI try to solve the performance problem of CGI in another way. "
"Instead of embedding the interpreter into the web server, they create long-"
"running background processes. There is still a module in the web server "
"which makes it possible for the web server to \"speak\" with the background "
"process.  As the background process is independent of the server, it can be "
"written in any language, including Python.  The language just needs to have "
"a library which handles the communication with the webserver."
msgstr ""
"FastCGI と SCGI は CGI のパフォーマンス上の問題を別の方法で解決しようという試"
"みです。\n"
"web サーバにインタプリタを組み込む代わりに、バックグラウンドで長時間実行され"
"るプロセスを生成します。\n"
"さらに web サーバ上にはいくつかのモジュールがあり、それらは web サーバとバッ"
"クグラウンドプロセスが「話す」ことを可能にします。\n"
"バックグラウンドプロセスはサーバと独立しているため、 Python を含んだ、任意の"
"言語で書くことができます。\n"
"言語に必要なのは web サーバとの通信を扱うライブラリだけです。"

#: ../../howto/webservers.rst:254
msgid ""
"The difference between FastCGI and SCGI is very small, as SCGI is "
"essentially just a \"simpler FastCGI\".  As the web server support for SCGI "
"is limited, most people use FastCGI instead, which works the same way.  "
"Almost everything that applies to SCGI also applies to FastCGI as well, so "
"we'll only cover the latter."
msgstr ""
"FastCGI と SCGI の違いはささいなもので、SCGI は基本的に \"simpler FastCGI\" "
"です。しかし、SCGI をサポートする web サーバは限定されているため、多くの人々"
"は代わりに同様に動作する FastCGI を利用します。SCGI に適用されるほとんど全て"
"のものは FastCGI にも適用できるので、 FastCGI だけについて解説します。"

#: ../../howto/webservers.rst:260
msgid ""
"These days, FastCGI is never used directly.  Just like ``mod_python``, it is "
"only used for the deployment of WSGI applications."
msgstr ""
"最近では FastCGI を直接使うことはありません。\n"
"``mod_python`` のように WSGI アプリケーションの配置のためだけに FastCGI が利"
"用されています。"

#: ../../howto/webservers.rst:265
msgid "Setting up FastCGI"
msgstr "FastCGI のセットアップ"

#: ../../howto/webservers.rst:267
msgid "Each web server requires a specific module."
msgstr "web サーバに応じて特別なモジュールが必要となります。"

#: ../../howto/webservers.rst:269
msgid ""
"Apache has both `mod_fastcgi <http://www.fastcgi.com/drupal/>`_ and "
"`mod_fcgid <https://httpd.apache.org/mod_fcgid/>`_.  ``mod_fastcgi`` is the "
"original one, but it has some licensing issues, which is why it is sometimes "
"considered non-free. ``mod_fcgid`` is a smaller, compatible alternative.  "
"One of these modules needs to be loaded by Apache."
msgstr ""
"Apache には `mod_fastcgi <http://www.fastcgi.com/drupal/>`_ と `mod_fcgid "
"<https://httpd.apache.org/mod_fcgid/>`_ の両方があります。``mod_fastcgi`` が"
"最初に作られましたが、非フリーとして扱われるという、いくつかのライセンスの問"
"題があります。``mod_fcgid`` はより小さく、前者と互換性があります。このうちの"
"どちらかを Apache から読み込む必要があります。"

#: ../../howto/webservers.rst:275
msgid ""
"lighttpd ships its own `FastCGI module <http://redmine.lighttpd.net/projects/"
"lighttpd/wiki/Docs_ModFastCGI>`_ as well as an `SCGI module <http://redmine."
"lighttpd.net/projects/lighttpd/wiki/Docs_ModSCGI>`_."
msgstr ""
"lighttpd は自身に `FastCGI module <http://redmine.lighttpd.net/projects/"
"lighttpd/wiki/Docs_ModFastCGI>`_ を含んでいて、`SCGI module <http://redmine."
"lighttpd.net/projects/lighttpd/wiki/Docs_ModSCGI>`_ も同様に含んでいます。"

#: ../../howto/webservers.rst:279
msgid ""
"`nginx <http://nginx.org/>`_ also supports `FastCGI <https://www.nginx.com/"
"resources/wiki/start/topics/examples/simplepythonfcgi/>`_."
msgstr ""
"`nginx <http://nginx.org/>`_ も `FastCGI <https://www.nginx.com/resources/"
"wiki/start/topics/examples/simplepythonfcgi/>`_ をサポートしています。"

#: ../../howto/webservers.rst:282
msgid ""
"Once you have installed and configured the module, you can test it with the "
"following WSGI-application::"
msgstr ""
"一旦モジュールをインストールして設定したら、以下の WSGI アプリケーションを"
"使ってテストできます::"

#: ../../howto/webservers.rst:303
msgid ""
"This is a simple WSGI application, but you need to install `flup <https://"
"pypi.org/project/flup/1.0>`_ first, as flup handles the low level FastCGI "
"access."
msgstr ""

#: ../../howto/webservers.rst:309
msgid ""
"There is some documentation on `setting up Django with WSGI <https://docs."
"djangoproject.com/en/dev/howto/deployment/wsgi/>`_, most of which can be "
"reused for other WSGI-compliant frameworks and libraries. Only the ``manage."
"py`` part has to be changed, the example used here can be used instead.  "
"Django does more or less the exact same thing."
msgstr ""
"`setting up Django with WSGI <https://docs.djangoproject.com/en/dev/howto/"
"deployment/wsgi/>`_ にドキュメントがあり、その多くは WSGI 互換フレームワーク"
"やライブラリで再利用できます。\n"
"``manage.py`` の部分を変更するだけで、ここで使った例を利用できます。\n"
"Django もほとんど同様のことを行います。"

#: ../../howto/webservers.rst:317
msgid "mod_wsgi"
msgstr "mod_wsgi"

#: ../../howto/webservers.rst:319
msgid ""
"`mod_wsgi <http://code.google.com/p/modwsgi/>`_ is an attempt to get rid of "
"the low level gateways.  Given that FastCGI, SCGI, and mod_python are mostly "
"used to deploy WSGI applications, mod_wsgi was started to directly embed "
"WSGI applications into the Apache web server. mod_wsgi is specifically "
"designed to host WSGI applications.  It makes the deployment of WSGI "
"applications much easier than deployment using other low level methods, "
"which need glue code.  The downside is that mod_wsgi is limited to the "
"Apache web server; other servers would need their own implementations of "
"mod_wsgi."
msgstr ""
"`mod_wsgi <http://code.google.com/p/modwsgi/>`_ は低レベルなゲートウェイから"
"脱するための試みです。\n"
"FastCGI、SCGI、mod_python は主に WSGI アプリケーションを配置するために使われ"
"ると仮定し、mod_wsgi は WSGI アプリケーションを直接 Apache web サーバに埋め込"
"むために開発が開始されました。\n"
"mod_wsgi は WSGI アプリケーションをホストするために特別に設計されています。\n"
"これにより WSGI アプリケーションの配置は、グルーコードが必要な他の低レベルな"
"手法を使った配置よりも非常に簡単になります。\n"
"mod_wsgi の欠点は Apache web サーバに制限されてしまうことです; 他のサーバでは"
"それ用の mod_wsgi の実装が必要になるでしょう。"

#: ../../howto/webservers.rst:328
msgid ""
"mod_wsgi supports two modes: embedded mode, in which it integrates with the "
"Apache process, and daemon mode, which is more FastCGI-like.  Unlike "
"FastCGI, mod_wsgi handles the worker-processes by itself, which makes "
"administration easier."
msgstr ""
"mod_wsgi は2つのモードをサポートします: 埋め込みモード (embeded mode) は "
"Apache プロセスとデーモンプロセスを統合するもので、 FastCGI に似ています。\n"
"FastCGI と違って、 mod_wsgi はそれ自身がワーカープロセスを取り扱うので管理が"
"楽になります。"

#: ../../howto/webservers.rst:337
msgid "Step back: WSGI"
msgstr "後ろに下って: WSGI"

#: ../../howto/webservers.rst:339
msgid ""
"WSGI has already been mentioned several times, so it has to be something "
"important.  In fact it really is, and now it is time to explain it."
msgstr ""
"WSGI について何度も言及してきたため、なにか重要そうに感じたでしょう。実際に重"
"要なので、ここで説明します。"

#: ../../howto/webservers.rst:342
msgid ""
"The *Web Server Gateway Interface*,  or WSGI for short, is defined in :pep:"
"`333` and is currently the best way to do Python web programming.  While it "
"is great for programmers writing frameworks, a normal web developer does not "
"need to get in direct contact with it.  When choosing a framework for web "
"development it is a good idea to choose one which supports WSGI."
msgstr ""
"*Web Server Gateway Interface* 、略して WSGI は :pep:`333` で定義されていて、"
"現在のところ Python で web プログラミングをする最良の方法です。 \n"
"WSGI はフレームワークを書くプログラマにとっては優れている一方、普通の web プ"
"ログラマが直接触れる必要の無いものです。\n"
"web 開発のフレームワークを選ぶときに、 WSGI をサポートしているもの選ぶことは"
"素晴しい考えです。"

#: ../../howto/webservers.rst:348
msgid ""
"The big benefit of WSGI is the unification of the application programming "
"interface.  When your program is compatible with WSGI -- which at the outer "
"level means that the framework you are using has support for WSGI -- your "
"program can be deployed via any web server interface for which there are "
"WSGI wrappers.  You do not need to care about whether the application user "
"uses mod_python or FastCGI or mod_wsgi -- with WSGI your application will "
"work on any gateway interface.  The Python standard library contains its own "
"WSGI server, :mod:`wsgiref`, which is a small web server that can be used "
"for testing."
msgstr ""
"WSGI の大きな利点は、アプリケーションプログラミングインターフェース (API) が"
"統一されることです。\n"
"プログラムが WSGI と互換性があれば -- これは外部から見たときにフレームワーク"
"が WSGI をサポートしているということになります -- そのプログラムは WSGI ラッ"
"パーのある全ての web サーバインターフェースを通して利用できます。\n"
"ユーザが mod_python や FastCGI や mod_wsgi のうちどれを利用しているかを気にせ"
"ずにすみます -- WSGI を使うことで任意ゲートウェイインターフェース上で動作する"
"ようになります。\n"
"Python 標準ライブラリには、テストのために利用できる小さな web サーバである、"
"独自の WSGI サーバ :mod:`wsgiref` が含まれています。"

#: ../../howto/webservers.rst:358
msgid ""
"A really great WSGI feature is middleware.  Middleware is a layer around "
"your program which can add various functionality to it.  There is quite a "
"bit of `middleware <https://wsgi.readthedocs.org/en/latest/libraries.html>`_ "
"already available.  For example, instead of writing your own session "
"management (HTTP is a stateless protocol, so to associate multiple HTTP "
"requests with a single user your application must create and manage such "
"state via a session), you can just download middleware which does that, plug "
"it in, and get on with coding the unique parts of your application.  The "
"same thing with compression -- there is existing middleware which handles "
"compressing your HTML using gzip to save on your server's bandwidth.  "
"Authentication is another problem that is easily solved using existing "
"middleware."
msgstr ""
"WSGI の本当に卓越している機能はミドルウェアです。\n"
"ミドルウェアとはプログラムに様々な機能性を加えられるレイヤーのことを指しま"
"す。\n"
"無数の `ミドルウェア <https://wsgi.readthedocs.org/en/latest/libraries."
"html>`_ が利用可能になっています。\n"
"例えば自前でセッション管理を書く (HTTP はステートレスなプロトコルなので、複数"
"の HTTP リクエストを単一のユーザに関連付けるために、アプリケーションがセッ"
"ションによって状態を作成し管理しなければなりません) 代わりに、セッション管理"
"をしてくれるミドルウェアをダウンロードし、動作させ、アプリケーション独自の部"
"分をコーディングするだけです。\n"
"圧縮についても同じです -- HTML の gzip 圧縮をする既存のミドルウェアがあって、"
"これでサーバの帯域を節約できます。\n"
"認証も既存のミドルウェアで簡単に解決できる問題です。"

#: ../../howto/webservers.rst:370
msgid ""
"Although WSGI may seem complex, the initial phase of learning can be very "
"rewarding because WSGI and the associated middleware already have solutions "
"to many problems that might arise while developing web sites."
msgstr ""
"WSGI は複雑に思えるかもしれませんが、学習の始めの段階は非常に価値ものになりま"
"す。\n"
"というのも WSGI とそれに関連したミドルウェアには、 web サイトを開発している中"
"で起きる多くの問題の解決策が備わっています。"

#: ../../howto/webservers.rst:376
msgid "WSGI Servers"
msgstr "WSGI サーバ"

#: ../../howto/webservers.rst:378
msgid ""
"The code that is used to connect to various low level gateways like CGI or "
"mod_python is called a *WSGI server*.  One of these servers is ``flup``, "
"which supports FastCGI and SCGI, as well as `AJP <https://en.wikipedia.org/"
"wiki/Apache_JServ_Protocol>`_.  Some of these servers are written in Python, "
"as ``flup`` is, but there also exist others which are written in C and can "
"be used as drop-in replacements."
msgstr ""
"CGI や mod_python などの様々な低レベルゲートウェイに接続するためのコードを "
"*WSGI サーバ* と呼びます。\n"
"こういったサーバの一つに ``flup`` があり、これは FastCGI、SCGI に加えて `AJP "
"<https://en.wikipedia.org/wiki/Apache_JServ_Protocol>`_ もサポートしていま"
"す。\n"
"これらのサーバのいくつかは ``flup`` のように Python で書かれていますが、C で"
"書かれたものもあり、それらは気軽に置き換えることができます。"

#: ../../howto/webservers.rst:385
msgid ""
"There are many servers already available, so a Python web application can be "
"deployed nearly anywhere.  This is one big advantage that Python has "
"compared with other web technologies."
msgstr ""
"多くのサーバが既に利用可能なので、 Python の web アプリケーションはほとんどど"
"こにでも配置できます。\n"
"これは他の web テクノロジーと比べたときの Python の大きな利点の 1 つです。"

#: ../../howto/webservers.rst:391
msgid ""
"A good overview of WSGI-related code can be found in the `WSGI homepage "
"<https://wsgi.readthedocs.org/>`_, which contains an extensive list of `WSGI "
"servers <https://wsgi.readthedocs.org/en/latest/servers.html>`_ which can be "
"used by *any* application supporting WSGI."
msgstr ""
"`WSGI homepage <https://wsgi.readthedocs.org/>`_ では WSGI 関係のコードの素晴"
"しい概要が読め、 WSGI をサポートする *全ての* アプリケーションが利用できる "
"`WSGI サーバ <https://wsgi.readthedocs.org/en/latest/servers.html>`_ の広大な"
"リストがあります。"

#: ../../howto/webservers.rst:396
msgid ""
"You might be interested in some WSGI-supporting modules already contained in "
"the standard library, namely:"
msgstr ""
"標準ライブラリに含まれる WSGI をサポートするモジュールに興味が湧いたかもしれ"
"ません、すなわちこのモジュールのことです:"

#: ../../howto/webservers.rst:399
msgid ":mod:`wsgiref` -- some tiny utilities and servers for WSGI"
msgstr ":mod:`wsgiref` -- WSGI のためのいくつかの小さなユーティリティとサーバ"

#: ../../howto/webservers.rst:403
msgid "Case study: MoinMoin"
msgstr "事例研究: MoinMoin"

#: ../../howto/webservers.rst:405
msgid ""
"What does WSGI give the web application developer?  Let's take a look at an "
"application that's been around for a while, which was written in Python "
"without using WSGI."
msgstr ""
"WSGI は web アプリケーションプログラマに何をもたらしてくれるのでしょうか?\n"
"WSGI を使わずに Python で書かれた昔からある web アプリケーションをみてみま"
"しょう。"

#: ../../howto/webservers.rst:409
msgid ""
"One of the most widely used wiki software packages is `MoinMoin <https://"
"moinmo.in/>`_.  It was created in 2000, so it predates WSGI by about three "
"years.  Older versions needed separate code to run on CGI, mod_python, "
"FastCGI and standalone."
msgstr ""
"最も広く使われている wiki ソフトウェアパッケージの一つに `MoinMoin <https://"
"moinmo.in/>`_ があります。\n"
"これは2000年に作られたため、WSGI より3年ほど先行していました。\n"
"古いバージョンでは CGI、mod_python、FastCGI、スタンドアロンで動作するためには"
"別々のコードが必要でした。"

#: ../../howto/webservers.rst:414
msgid ""
"It now includes support for WSGI.  Using WSGI, it is possible to deploy "
"MoinMoin on any WSGI compliant server, with no additional glue code. Unlike "
"the pre-WSGI versions, this could include WSGI servers that the authors of "
"MoinMoin know nothing about."
msgstr ""
"現在では WSGI をサポートしています。\n"
"WSGI を使うことで、グルーコードを追加せずに WSGI に準拠したサーバに MoinMoin "
"を配置できるようになりました。\n"
"WSGI 対応前のバージョンとは違って、 MoinMoin の開発者が全く知らない WSGI サー"
"バを MoinMoin に含めることができます。"

#: ../../howto/webservers.rst:421
msgid "Model-View-Controller"
msgstr "モデル・ビュー・コントローラ (Model-View-Controller)"

#: ../../howto/webservers.rst:423
msgid ""
"The term *MVC* is often encountered in statements such as \"framework *foo* "
"supports MVC\".  MVC is more about the overall organization of code, rather "
"than any particular API.  Many web frameworks use this model to help the "
"developer bring structure to their program.  Bigger web applications can "
"have lots of code, so it is a good idea to have an effective structure right "
"from the beginning. That way, even users of other frameworks (or even other "
"languages, since MVC is not Python-specific) can easily understand the code, "
"given that they are already familiar with the MVC structure."
msgstr ""
"*MVC* という用語は「フレームワーク *foo* は MVC をサポートしています」という"
"ような文句でよく聞きます。\n"
"MVC は特定の API というよりは、コードの総合的な構造についての話です。\n"
"多くの web フレームワークはこのモデルを使い、開発者がプログラムに構造を与える"
"ことを助けています。\n"
"大きな web アプリケーションはコード量が増えるので、最初からプログラムによい構"
"造を持たせることはよい考えです。\n"
"そうすることで、他のフレームワークのユーザであっても (MVC は Python 特有のも"
"のではないので、他の言語であっても)、既に MVC 構造に馴染んでいるため、コード"
"を簡単に理解できます。"

#: ../../howto/webservers.rst:432
msgid "MVC stands for three components:"
msgstr "MVC は 3 つの構成要素からできています:"

#: ../../howto/webservers.rst:434
msgid ""
"The *model*.  This is the data that will be displayed and modified.  In "
"Python frameworks, this component is often represented by the classes used "
"by an object-relational mapper."
msgstr ""
"*モデル* (model) 。\n"
"これは表示したり変更されたりするデータのことです。\n"
"Python のフレームワークでは、この要素は object-relational マッパーが利用する"
"クラスで表現されます。"

#: ../../howto/webservers.rst:438
msgid ""
"The *view*.  This component's job is to display the data of the model to the "
"user.  Typically this component is implemented via templates."
msgstr ""
"*ビュー* (view) 。\n"
"この構成要素の仕事は、モデルのデータをユーザに表示することです。\n"
"典型的にはこの要素はテンプレートで実装されます。"

#: ../../howto/webservers.rst:441
msgid ""
"The *controller*.  This is the layer between the user and the model.  The "
"controller reacts to user actions (like opening some specific URL), tells "
"the model to modify the data if necessary, and tells the view code what to "
"display,"
msgstr ""
"*コントローラ* (controller) 。\n"
"これはユーザとモデルの間にあるレイヤーです。\n"
"コントローラは (ある特定の URL を開くというような) ユーザの動作に反応し、必要"
"に応じてモデルにデータを変更するよう伝え、ビューのコードに何を表示するかを伝"
"えます。"

#: ../../howto/webservers.rst:446
msgid ""
"While one might think that MVC is a complex design pattern, in fact it is "
"not. It is used in Python because it has turned out to be useful for "
"creating clean, maintainable web sites."
msgstr ""
"MVC を複雑なデザインパターンだと考える人もいるかもしれませんが、実際はそうで"
"はありません。Python で使われているのは、それがきれいで保守可能な web サイト"
"を作成するのに便利だということがわかっているからです。"

#: ../../howto/webservers.rst:452
msgid ""
"While not all Python frameworks explicitly support MVC, it is often trivial "
"to create a web site which uses the MVC pattern by separating the data logic "
"(the model) from the user interaction logic (the controller) and the "
"templates (the view).  That's why it is important not to write unnecessary "
"Python code in the templates -- it works against the MVC model and creates "
"chaos in the code base, making it harder to understand and modify."
msgstr ""
"全ての Python フレームワークが明示的に MVC をサポートしているわけではありませ"
"んが、データロジック (モデル) とユーザとのインタラクションロジック (コント"
"ローラ) とテンプレート (ビュー) を分離して、 MVC パターンを使っている web サ"
"イトを作成することは普通のことです。\n"
"その理由はテンプレートに不必要な Python コードを書かないことが重要なことだか"
"らです --  そのようなコードは MVC に反する動作をして大混乱を生み、それを理解"
"して修正することがいっそう難しくなります。"

#: ../../howto/webservers.rst:461
msgid ""
"The English Wikipedia has an article about the `Model-View-Controller "
"pattern <https://en.wikipedia.org/wiki/"
"Model%E2%80%93view%E2%80%93controller>`_.  It includes a long list of web "
"frameworks for various programming languages."
msgstr ""
"Wikipedia の英語版には `Model-View-Controller pattern <https://en.wikipedia."
"org/wiki/Model%E2%80%93view%E2%80%93controller>`_ についての記事がありま"
"す。\n"
"この記事には様々なプログラミング言語での web フレームワークの長大なリストが"
"載っています。"

#: ../../howto/webservers.rst:467
msgid "Ingredients for Websites"
msgstr "web サイトの要素"

#: ../../howto/webservers.rst:469
msgid ""
"Websites are complex constructs, so tools have been created to help web "
"developers make their code easier to write and more maintainable.  Tools "
"like these exist for all web frameworks in all languages.  Developers are "
"not forced to use these tools, and often there is no \"best\" tool.  It is "
"worth learning about the available tools because they can greatly simplify "
"the process of developing a web site."
msgstr ""
"web サイトは複雑な構造物なので、 web 開発者がコードを書きやすく、保守しやすく"
"する助けとなるツールが作られてきました。\n"
"このようなツールは、全ての言語の全ての web フレームワークについて存在しま"
"す。\n"
"開発者はこれらのツールを強制的に使わされるわけではないし、「最良の」ツールは"
"たいていは存在しません。\n"
"しかし、これらの利用可能なツールは web サイトの開発プロセスを非常に単純にして"
"くれるので、学ぶ価値はあります。"

#: ../../howto/webservers.rst:479
msgid ""
"There are far more components than can be presented here.  The Python wiki "
"has a page about these components, called `Web Components <https://wiki."
"python.org/moin/WebComponents>`_."
msgstr ""
"このドキュメントで述べられるよりも多くの要素があります。\n"
"Python wiki には `Web Components <https://wiki.python.org/moin/"
"WebComponents>`_ と呼ばれる、これらの要素についてのページがあります。"

#: ../../howto/webservers.rst:485
msgid "Templates"
msgstr "テンプレート"

#: ../../howto/webservers.rst:487
msgid ""
"Mixing of HTML and Python code is made possible by a few libraries.  While "
"convenient at first, it leads to horribly unmaintainable code.  That's why "
"templates exist.  Templates are, in the simplest case, just HTML files with "
"placeholders.  The HTML is sent to the user's browser after filling in the "
"placeholders."
msgstr ""
"HTML と Python コードを混在させることは、いくつかのライブラリを利用することで"
"可能になります。\n"
"最初は便利なのですが、こうしてしまうとコードが恐ろしく保守不可能となりま"
"す。\n"
"これがテンプレートが存在する理由です。\n"
"テンプレートは、最も単純な場合には、単にプレースホルダーを持つ HTML ファイル"
"となります。\n"
"プレースホルダーを埋めた後に HTML はユーザのブラウザに送信されます。"

#: ../../howto/webservers.rst:493
msgid "Python already includes two ways to build simple templates::"
msgstr "Python には既に単純なテンプレートを作る 2つの手段があります::"

#: ../../howto/webservers.rst:504
msgid ""
"To generate complex HTML based on non-trivial model data, conditional and "
"looping constructs like Python's *for* and *if* are generally needed. "
"*Template engines* support templates of this complexity."
msgstr ""
"単純でないモデルのデータに基づいて複雑な HTML を生成するために、たいてい "
"Python の *for* や *if* のような条件分岐や反復といった構造が必要とされま"
"す。\n"
"*テンプレートエンジン* はこのような複雑さを持つテンプレートをサポートします。"

#: ../../howto/webservers.rst:508
msgid ""
"There are a lot of template engines available for Python which can be used "
"with or without a `framework`_.  Some of these define a plain-text "
"programming language which is easy to learn, partly because it is limited in "
"scope. Others use XML, and the template output is guaranteed to be always be "
"valid XML.  There are many other variations."
msgstr ""
"Python には多くのテンプレートエンジンがあり、`framework`_ とともに、または独"
"立に利用できます。\n"
"いくつかのテンプレートエンジンでは、利用用途を狭めて学びやすくしてあるプレー"
"ンテキストのプログラミング言語を定義しています。\n"
"他のテンプレートエンジンでは XML を利用しているものもあり、テンプレートの出力"
"が常に有効な XML になるよう保証されています。\n"
"これ以外にも非常に多くの種類があります。"

#: ../../howto/webservers.rst:514
msgid ""
"Some `frameworks`_ ship their own template engine or recommend one in "
"particular.  In the absence of a reason to use a different template engine, "
"using the one provided by or recommended by the framework is a good idea."
msgstr ""
"独自のテンプレートエンジンを提供する `frameworks`_ もあれば、ある特定のテンプ"
"レートエンジンを推奨するものもあります。\n"
"別のテンプレートエンジンを使う理由が無ければ、フレームワークが提供もしくは推"
"奨するものを使うのがよい考えです。"

#: ../../howto/webservers.rst:518
msgid "Popular template engines include:"
msgstr "人気のあるテンプレートエンジンには次のようなものがあります:"

#: ../../howto/webservers.rst:520
msgid "`Mako <http://www.makotemplates.org/>`_"
msgstr "`Mako <http://www.makotemplates.org/>`_"

#: ../../howto/webservers.rst:521
msgid "`Genshi <http://genshi.edgewall.org/>`_"
msgstr "`Genshi <http://genshi.edgewall.org/>`_"

#: ../../howto/webservers.rst:522
msgid "`Jinja <http://jinja.pocoo.org/>`_"
msgstr "`Jinja <http://jinja.pocoo.org/>`_"

#: ../../howto/webservers.rst:526
msgid ""
"There are many template engines competing for attention, because it is "
"pretty easy to create them in Python.  The page `Templating <https://wiki."
"python.org/moin/Templating>`_ in the wiki lists a big, ever-growing number "
"of these.  The three listed above are considered \"second generation\" "
"template engines and are a good place to start."
msgstr ""
"たくさんのテンプレートエンジンが注目を集めようと競っています。\n"
"というのも、 Python でテンプレートエンジンを作るのが非常に簡単だからです。\n"
"wiki の `Templating <https://wiki.python.org/moin/Templating>`_ ページには、"
"大量の今も増え続けるテンプレートエンジンの一覧が載っています。\n"
"上で挙げた 3 つのテンプレートエンジンは \"次世代の\" テンプレートエンジンと見"
"なされていて、始めるのに良いものです。"

#: ../../howto/webservers.rst:534
msgid "Data persistence"
msgstr "データの永続化"

#: ../../howto/webservers.rst:536
msgid ""
"*Data persistence*, while sounding very complicated, is just about storing "
"data. This data might be the text of blog entries, the postings on a "
"bulletin board or the text of a wiki page.  There are, of course, a number "
"of different ways to store information on a web server."
msgstr ""
"*データの永続化 (data persistence)* とは非常に複雑に聞こえますが、単にデータ"
"を保存するだけです。\n"
"このデータはブログエントリのテキストだったり、掲示板の投稿だったり、wiki ペー"
"ジのテキストだったりします。\n"
"もちろん、 web サーバに情報を保存するたくさんの様々な方法があります。"

#: ../../howto/webservers.rst:541
msgid ""
"Often, relational database engines like `MySQL <http://www.mysql.com/>`_ or "
"`PostgreSQL <http://www.postgresql.org/>`_ are used because of their good "
"performance when handling very large databases consisting of millions of "
"entries.  There is also a small database engine called `SQLite <http://www."
"sqlite.org/>`_, which is bundled with Python in the :mod:`sqlite3` module, "
"and which uses only one file.  It has no other dependencies.  For smaller "
"sites SQLite is just enough."
msgstr ""
"しばしば `MySQL <http://www.mysql.com/>`_ や `PostgreSQL <http://www."
"postgresql.org/>`_ のような関係データベースエンジンが利用されます。\n"
"それは数百万エントリに及ぶ非常に大きなデータベースを優れたパフォーマンスで扱"
"うことができるためです。`SQLite <http://www.sqlite.org/>`_ と呼ばれる小さな"
"データベースエンジンもあり、これは :mod:`sqlite3` モジュールによって Python "
"にバンドルされていて、ファイルを一つだけしか使いません。\n"
"これ以外の依存関係はありません。\n"
"小さめのサイトに対しては SQLite で十分です。"

#: ../../howto/webservers.rst:549
msgid ""
"Relational databases are *queried* using a language called `SQL <https://en."
"wikipedia.org/wiki/SQL>`_.  Python programmers in general do not like SQL "
"too much, as they prefer to work with objects.  It is possible to save "
"Python objects into a database using a technology called `ORM <https://en."
"wikipedia.org/wiki/Object-relational_mapping>`_ (Object Relational "
"Mapping).  ORM translates all object-oriented access into SQL code under the "
"hood, so the developer does not need to think about it.  Most `frameworks`_ "
"use ORMs, and it works quite well."
msgstr ""
"関係データベースには `SQL <https://en.wikipedia.org/wiki/SQL>`_ と呼ばれる言"
"語を利用して *問い合わせ (query)* ます。\n"
"一般的に Python プログラマは SQL があまり好きではなく、オブジェクトで動作する"
"方を好みます。\n"
"`ORM <https://en.wikipedia.org/wiki/Object-relational_mapping>`_ (Object "
"Relational Mapping) と呼ばれる技術を使うことで、 Python オブジェクトをデータ"
"ベースに保存できます。\n"
"ORM は内部でオブジェクト指向的アクセスを SQL コードに変換するので、ユーザはそ"
"のことを意識せずに済みます。\n"
"ほとんどの `framework`_ は ORMs を利用し、とてもうまくいっています."

#: ../../howto/webservers.rst:558
msgid ""
"A second possibility is storing data in normal, plain text files (some times "
"called \"flat files\").  This is very easy for simple sites, but can be "
"difficult to get right if the web site is performing many updates to the "
"stored data."
msgstr ""
"第2の可能性は通常のプレーンテキストのファイル (しばしば \"フラットファイル\" "
"と呼ばれます) で保存することです。\n"
"この方法は単純なサイトでは非常に簡単ですが、 web サイトが保存されたデータへの"
"更新がたくさん行われる場合、ちゃんと動くようにするのは難しくなってきます。"

#: ../../howto/webservers.rst:563
msgid ""
"A third possibility are object oriented databases (also called \"object "
"databases\").  These databases store the object data in a form that closely "
"parallels the way the objects are structured in memory during program "
"execution.  (By contrast, ORMs store the object data as rows of data in "
"tables and relations between those rows.)  Storing the objects directly has "
"the advantage that nearly all objects can be saved in a straightforward way, "
"unlike in relational databases where some objects are very hard to represent."
msgstr ""
"第3の可能性はオブジェクト指向データベースです (\"オブジェクトデータベース\" "
"とも呼ばれます)。\n"
"このデータベースは、プログラムの実行中のメモリ上での構成とほぼ同じ形式でオブ"
"ジェクトのデータを保存します。\n"
"(対照的に、 ORM はオブジェクトデータをテーブルの行と行どうしの関係として保存"
"します。)\n"
"オブジェクトを直接保存することには、ほぼ全てのオブジェクトを単純な方法で保存"
"できるという優位点があり、これは表現するのが非常に難しいオブジェクトがある関"
"係データベースには無い特徴です。"

#: ../../howto/webservers.rst:571
msgid ""
"`Frameworks`_ often give hints on which data storage method to choose.  It "
"is usually a good idea to stick to the data store recommended by the "
"framework unless the application has special requirements better satisfied "
"by an alternate storage mechanism."
msgstr ""
"`framework`_ はしばしばどのデータストレージ方法を選べばよいかのヒントを与えて"
"くれます。\n"
"代わりとなるストレージ機構を使った方がアプリケーションの特別な要件によりよく"
"合うのでない限り、普通はフレームワークが推奨しているデータストアを使い続ける"
"のがよい考えです。"

#: ../../howto/webservers.rst:578
msgid ""
"`Persistence Tools <https://wiki.python.org/moin/PersistenceTools>`_ lists "
"possibilities on how to save data in the file system.  Some of these modules "
"are part of the standard library"
msgstr ""
"`Persistence Tools <https://wiki.python.org/moin/PersistenceTools>`_ にはファ"
"イルシステムにデータを保存する方法が列挙されています、これらのモジュールの内"
"のいくつかは標準ライブラリの一部です"

#: ../../howto/webservers.rst:582
msgid ""
"`Database Programming <https://wiki.python.org/moin/DatabaseProgramming>`_ "
"helps with choosing a method for saving data"
msgstr ""
"`Database Programming <https://wiki.python.org/moin/DatabaseProgramming>`_ は"
"データ保存の方法を選ぶのを助けてくれます"

#: ../../howto/webservers.rst:585
msgid ""
"`SQLAlchemy <http://www.sqlalchemy.org/>`_, the most powerful OR-Mapper for "
"Python, and `Elixir <https://pypi.org/project/Elixir>`_, which makes "
"SQLAlchemy easier to use"
msgstr ""

#: ../../howto/webservers.rst:589
msgid "`SQLObject <http://www.sqlobject.org/>`_, another popular OR-Mapper"
msgstr ""
"`SQLObject <http://www.sqlobject.org/>`_ は別の人気のある OR マッパーです"

#: ../../howto/webservers.rst:591
msgid ""
"`ZODB <https://launchpad.net/zodb>`_ and `Durus <https://www.mems-exchange."
"org/software/>`_, two object oriented databases"
msgstr ""
"`ZODB <https://launchpad.net/zodb>`_ と `Durus <https://www.mems-exchange."
"org/software/>`_ の二つはオブジェクト指向データベースです"

#: ../../howto/webservers.rst:599
msgid "Frameworks"
msgstr "フレームワーク"

#: ../../howto/webservers.rst:601
msgid ""
"The process of creating code to run web sites involves writing code to "
"provide various services.  The code to provide a particular service often "
"works the same way regardless of the complexity or purpose of the web site "
"in question. Abstracting these common solutions into reusable code produces "
"what are called \"frameworks\" for web development.  Perhaps the most well-"
"known framework for web development is Ruby on Rails, but Python has its own "
"frameworks.  Some of these were partly inspired by Rails, or borrowed ideas "
"from Rails, but many existed a long time before Rails."
msgstr ""
"web サイトを動かずコードを作成するプロセスは様々なサービスを提供するコードを"
"書く作業を伴います。\n"
"あるサービスを提供するコードは、当該の web サイトの複雑さや目的に関わらず、た"
"いてい同じような動作をします。\n"
"共通のソリューションを抽象化し再利用可能なコードにすると、 web 開発で \"フ"
"レームワーク\" と呼ばれるものが生み出されます。\n"
"おそらく最も知られている web 開発のフレームワークは Ruby on Rails ですが、 "
"Python には独自のフレームワークがあります。\n"
"その中には部分的に Rails にインスパイアされたり、アイディアを拝借したものもあ"
"りましたが、多くのものは Rails よりずっと前から存在していました。"

#: ../../howto/webservers.rst:610
msgid ""
"Originally Python web frameworks tended to incorporate all of the services "
"needed to develop web sites as a giant, integrated set of tools.  No two web "
"frameworks were interoperable:  a program developed for one could not be "
"deployed on a different one without considerable re-engineering work.  This "
"led to the development of \"minimalist\" web frameworks that provided just "
"the tools to communicate between the Python code and the http protocol, with "
"all other services to be added on top via separate components.  Some ad hoc "
"standards were developed that allowed for limited interoperability between "
"frameworks, such as a standard that allowed different template engines to be "
"used interchangeably."
msgstr ""
"もともと Python の web フレームワークには、 web サイトを開発するのに必要な全"
"てのサービスを1つにまとめて、巨大な集約されたツールの集まりを作る傾向がありま"
"した。\n"
"どの2つの web フレームワークも互換性はありませんでした:\n"
"あるフレームワーク用に開発したプログラムは、かなりの再設計作業をしないと他の"
"フレームワークには配置できませんでした。\n"
"この状況が \"ミニマリスト\" web フレームワークの開発につながり、そういったフ"
"レームワークは Python コードと http プロトコルの間のやり取りをするツールだけ"
"を提供し、他の全てのサービスを別々のコンポーネントとしてフレームワーク上に追"
"加するものでした。\n"
"場当たり的な標準が開発され、制限はあるものの、異なるテンプレートエンジンを交"
"換可能にする標準のような、フレームワークどうしの互換性も生まれました。"

#: ../../howto/webservers.rst:621
msgid ""
"Since the advent of WSGI, the Python web framework world has been evolving "
"toward interoperability based on the WSGI standard.  Now many web "
"frameworks, whether \"full stack\" (providing all the tools one needs to "
"deploy the most complex web sites) or minimalist, or anything in between, "
"are built from collections of reusable components that can be used with more "
"than one framework."
msgstr ""
"WSGI の出現から Python の web フレームワークの世界は、 WSGI 標準に基づいた互"
"換性に向かって進化していきました。\n"
"(最も複雑な web サイトを配置するのに必要な全てのツールを提供する) \"フルス"
"タック\" であれ、ミニマリストであれ、その中間であれ、今や多くの web フレーム"
"ワークが複数のフレームワークで使える再利用可能なコンポーネントで構築されてい"
"ます。"

#: ../../howto/webservers.rst:628
msgid ""
"The majority of users will probably want to select a \"full stack\" "
"framework that has an active community.  These frameworks tend to be well "
"documented, and provide the easiest path to producing a fully functional web "
"site in minimal time."
msgstr ""
"大多数のユーザはおそらくコミュニティが活発な \"フルスタック\" フレームワーク"
"を選びたいでしょう。\n"
"これらのフレームワークはきちんとドキュメントが書かれ、機能を完全に揃えた web "
"サイトを最小の時間で作る簡単な道が提供されている傾向があります。"

#: ../../howto/webservers.rst:635
msgid "Some notable frameworks"
msgstr "いくつかの注目に値するフレームワーク"

#: ../../howto/webservers.rst:637
msgid ""
"There are an incredible number of frameworks, so they cannot all be covered "
"here.  Instead we will briefly touch on some of the most popular."
msgstr ""
"膨大な数のフレームワークがあるので、全てについて記述することは不可能です。\n"
"その代わりに最も人気のあるもののいくつかに簡単に触れます。"

#: ../../howto/webservers.rst:642
msgid "Django"
msgstr "Django"

#: ../../howto/webservers.rst:644
msgid ""
"`Django <https://www.djangoproject.com/>`_ is a framework consisting of "
"several tightly coupled elements which were written from scratch and work "
"together very well.  It includes an ORM which is quite powerful while being "
"simple to use, and has a great online administration interface which makes "
"it possible to edit the data in the database with a browser.  The template "
"engine is text-based and is designed to be usable for page designers who "
"cannot write Python.  It supports template inheritance and filters (which "
"work like Unix pipes).  Django has many handy features bundled, such as "
"creation of RSS feeds or generic views, which make it possible to create web "
"sites almost without writing any Python code."
msgstr ""
"`Django <https://www.djangoproject.com/>`_ は、一から書かれた非常に上手く連携"
"するいくつかの要素を固く結び付けて構成されたフレームワークです。\n"
"Django には非常に強力でシンプルに使える ORM があり、ブラウザでデータベースの"
"データを編集できる優れたオンラインの管理インターフェースがあります。\n"
"テンプレートエンジンはテキストベースで Python が書けないページデザイナーにも"
"使えるよう設計されています。\n"
"このテンプレートエンジンはテンプレートの継承と (Unix のパイプのように動作す"
"る) フィルタをサポートしています。\n"
"Django には RSS フィードや汎用ビュー (generic view) のようなたくさんの使いや"
"すい機能が付属しているため、 Python コードをほとんど書かずに web サイトを作る"
"ことができるようになっています。"

#: ../../howto/webservers.rst:654
msgid ""
"It has a big, international community, the members of which have created "
"many web sites.  There are also a lot of add-on projects which extend "
"Django's normal functionality.  This is partly due to Django's well written "
"`online documentation <https://docs.djangoproject.com/>`_ and the `Django "
"book <http://www.djangobook.com/>`_."
msgstr ""
"Django には、多くの web サイトを作成してきたメンバーによる、大きな国際的なコ"
"ミュニティがあります。\n"
"Django の通常の機能を拡張するたくさんのアドオンプロジェクトもあります。\n"
"これらは Django の素晴しい `オンラインドキュメント <https://docs."
"djangoproject.com/>`_ と `Django book <http://www.djangobook.com/>`_ による部"
"分もあります。"

#: ../../howto/webservers.rst:663
msgid ""
"Although Django is an MVC-style framework, it names the elements "
"differently, which is described in the `Django FAQ <https://docs."
"djangoproject.com/en/dev/faq/general/#django-appears-to-be-a-mvc-framework-"
"but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-"
"don-t-use-the-standard-names>`_."
msgstr ""
"Django は MVC スタイルのフレームワークですが、 Django は構成要素に対して別の"
"名前を付けています。\n"
"これについては `Django FAQ <https://docs.djangoproject.com/en/dev/faq/"
"general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-"
"the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-"
"names>`_ で解説されています。"

#: ../../howto/webservers.rst:669
msgid "TurboGears"
msgstr "TurboGears"

#: ../../howto/webservers.rst:671
msgid ""
"Another popular web framework for Python is `TurboGears <http://www."
"turbogears.org/>`_.  TurboGears takes the approach of using already existing "
"components and combining them with glue code to create a seamless "
"experience.  TurboGears gives the user flexibility in choosing components. "
"For example the ORM and template engine can be changed to use packages "
"different from those used by default."
msgstr ""
"他の人気がある Python のフレームワークは `TurboGears <http://www.turbogears."
"org/>`_ です。\n"
"TurboGears は、既存のコンポーネントをグルーコードで組み合わせ、無理なく連携す"
"る使い勝手を持たせるという手法をとっています。\n"
"TurboGeers にはユーザがコンポーネントを選べる柔軟性があります。\n"
"例えば、 ORM とテンプレートエンジンはデフォルトとは異なるパッケージに変えられ"
"ます。"

#: ../../howto/webservers.rst:678
msgid ""
"The documentation can be found in the `TurboGears documentation <https://"
"turbogears.readthedocs.org/>`_, where links to screencasts can be found. "
"TurboGears has also an active user community which can respond to most "
"related questions.  There is also a `TurboGears book <http://turbogears."
"org/1.0/docs/TGBooks.html>`_ published, which is a good starting point."
msgstr ""
"ドキュメントが `TurboGears documentation <https://turbogears.readthedocs.org/"
">`_ にあり、スクリーンキャストへのリンクもあります。\n"
"TurboGears にも活発なユーザコミュニティがあり、関連した質問のほとんどに答えて"
"くれます。\n"
"入門に向いた `TurboGears book <http://turbogears.org/1.0/docs/TGBooks."
"html>`_ も出版されています。"

#: ../../howto/webservers.rst:684
msgid ""
"The newest version of TurboGears, version 2.0, moves even further in "
"direction of WSGI support and a component-based architecture.  TurboGears 2 "
"is based on the WSGI stack of another popular component-based web framework, "
"`Pylons <http://www.pylonsproject.org/>`_."
msgstr ""
"TurboGears の最新版の version 2.0 では、よりいっそう WSGI サポートとコンポー"
"ネントに基づくアーキテクチャに向けて進んでいます。\n"
"TurboGears 2 は `Pylons <http://www.pylonsproject.org/>`_ というコンポーネン"
"トに基づく人気の web フレームワークの WSGI スタックを基礎としています。"

#: ../../howto/webservers.rst:691
msgid "Zope"
msgstr "Zope"

#: ../../howto/webservers.rst:693
msgid ""
"The Zope framework is one of the \"old original\" frameworks.  Its current "
"incarnation in Zope2 is a tightly integrated full-stack framework.  One of "
"its most interesting feature is its tight integration with a powerful object "
"database called the `ZODB <https://launchpad.net/zodb>`_ (Zope Object "
"Database). Because of its highly integrated nature, Zope wound up in a "
"somewhat isolated ecosystem:  code written for Zope wasn't very usable "
"outside of Zope, and vice-versa.  To solve this problem the Zope 3 effort "
"was started.  Zope 3 re-engineers Zope as a set of more cleanly isolated "
"components.  This effort was started before the advent of the WSGI standard, "
"but there is WSGI support for Zope 3 from the `Repoze <http://repoze.org/>`_ "
"project.  Zope components have many years of production use behind them, and "
"the Zope 3 project gives access to these components to the wider Python "
"community.  There is even a separate framework based on the Zope components: "
"`Grok <http://grok.zope.org/>`_."
msgstr ""
"Zope フレームワークは \"古い原始の\" フレームワークの1つです。\n"
"Zope2 の現在の姿は、固く結合されたフルスタックなフレームワークです。\n"
"Zope の最も興味深い機能の1つは、本体に固く結合されている `ZODB <https://"
"launchpad.net/zodb>`_ (Zope Object Database) と呼ばれる強力なオブジェクトデー"
"タベースです。\n"
"この固く結合されている性質のために、 Zope はいくぶん孤立したエコシステムが形"
"成されることとなりました: Zope 用に書かれたコードは Zope 以外の場所ではあまり"
"使えず、逆向きも同様です。\n"
"この問題を解決するために Zope 3 への取り組みが始まりました。\n"
"Zope 3 では、より綺麗に分離されたコンポーネントの集合体として Zope を再設計し"
"ます。\n"
"この取り組みは WSGI 標準が考案されるより前に始まりましたが、 `Repoze <http://"
"repoze.org/>`_ プロジェクトによって Zope 3 のための WSGI サポートが提供されて"
"います。\n"
"Zope のコンポーネントはそれまで何年もプロダクションで使われていて、 Zope 3 プ"
"ロジェクトではそれまでより広い Python コミュニティに向けて、それらのコンポー"
"ネントが利用できるようになります。\n"
"Zope コンポーネントに基づく Zope とは別の `Grok <http://grok.zope.org/>`_ と"
"いうフレームワークさえあります。"

#: ../../howto/webservers.rst:708
msgid ""
"Zope is also the infrastructure used by the `Plone <https://plone.org/>`_ "
"content management system, one of the most powerful and popular content "
"management systems available."
msgstr ""
"Zope は `Plone <https://plone.org/>`_ によって利用されているインフラストラク"
"チャでもあります。Plone は利用可能な中でもっとも強力で人気のあるコンテンツ管"
"理システム (content management system, CMS) の一つです。"

#: ../../howto/webservers.rst:714
msgid "Other notable frameworks"
msgstr "他の注目に値するフレームワーク"

#: ../../howto/webservers.rst:716
msgid ""
"Of course these are not the only frameworks that are available.  There are "
"many other frameworks worth mentioning."
msgstr ""
"もちろんこれらの二つだけが利用できるフレームワークの全てではありません。\n"
"ここで触れておく価値のあるフレームワークは他にもたくさんあります。"

#: ../../howto/webservers.rst:719
msgid ""
"Another framework that's already been mentioned is `Pylons`_.  Pylons is "
"much like TurboGears, but with an even stronger emphasis on flexibility, "
"which comes at the cost of being more difficult to use.  Nearly every "
"component can be exchanged, which makes it necessary to use the "
"documentation of every single component, of which there are many.  Pylons "
"builds upon `Paste <http://pythonpaste.org/>`_, an extensive set of tools "
"which are handy for WSGI."
msgstr ""
"既に述べた別のフレームワークに `Pylons`_ がありました。\n"
"Pylons は TurboGears とよく似ていますが、柔軟性に磨きがかかっていて、利用する"
"コストが少々高くつきます。\n"
"ほぼ全ての要素は交換することができるため、個々のコンポーネント全てについてド"
"キュメントを利用する必要があり、そしてコンポーネントはたくさんあります。\n"
"Pylons は `Paste <http://pythonpaste.org/>`_ という WSGI を扱いやすい大量の"
"ツールの集合体に基づいて構築されています。"

#: ../../howto/webservers.rst:726
msgid ""
"And that's still not everything.  The most up-to-date information can always "
"be found in the Python wiki."
msgstr ""
"これで全てが述べられたわけではありません。最新の情報は Python wiki で見つける"
"ことができます。"

#: ../../howto/webservers.rst:731
msgid ""
"The Python wiki contains an extensive list of `web frameworks <https://wiki."
"python.org/moin/WebFrameworks>`_."
msgstr ""
"Python wiki には広大な `web フレームワーク <https://wiki.python.org/moin/"
"WebFrameworks>`_ のリストがあります。"

#: ../../howto/webservers.rst:734
msgid ""
"Most frameworks also have their own mailing lists and IRC channels, look out "
"for these on the projects' web sites."
msgstr ""
"ほとんどのフレームワークは自身のメーリングリストや IRC チャンネルを持っている"
"ので、プロジェクトの web サイトからそれらを探して下さい。"
