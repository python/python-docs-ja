# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2018-06-20 04:48+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/doanddont.rst:3
msgid "Idioms and Anti-Idioms in Python"
msgstr "Python 良い慣用句、悪い慣用句"

#: ../../howto/doanddont.rst:0
msgid "Author"
msgstr "著者"

#: ../../howto/doanddont.rst:5
msgid "Moshe Zadka"
msgstr "Moshe Zadka"

#: ../../howto/doanddont.rst:7
msgid "This document is placed in the public domain."
msgstr ""
"This document is placed in the public domain. (この文書はパブリックドメインで"
"す。)"

#: ../../howto/doanddont.rstNone
msgid "Abstract"
msgstr "概要"

#: ../../howto/doanddont.rst:12
msgid ""
"This document can be considered a companion to the tutorial. It shows how to "
"use Python, and even more importantly, how *not* to use Python."
msgstr ""
"この文書はチュートリアルのおまけと考えてもらって結構です。 Python をどう使う"
"べきか、そして更に重要なこととして、どう使うべきで *ない* かを例示していま"
"す。"

#: ../../howto/doanddont.rst:17
msgid "Language Constructs You Should Not Use"
msgstr "使うべきでない構文"

#: ../../howto/doanddont.rst:19
msgid ""
"While Python has relatively few gotchas compared to other languages, it "
"still has some constructs which are only useful in corner cases, or are "
"plain dangerous."
msgstr ""
"Python の落とし穴は他言語と比べればほとんどないようなものですが、中には特殊な"
"場面でしか役に立たなかったり、単に危険なだけの構文も存在しています。"

#: ../../howto/doanddont.rst:25
msgid "from module import \\*"
msgstr "from モジュール import \\*"

#: ../../howto/doanddont.rst:29
msgid "Inside Function Definitions"
msgstr "関数定義の中で"

#: ../../howto/doanddont.rst:31
msgid ""
"``from module import *`` is *invalid* inside function definitions. While "
"many versions of Python do not check for the invalidity, it does not make it "
"more valid, no more than having a smart lawyer makes a man innocent. Do not "
"use it like that ever. Even in versions where it was accepted, it made the "
"function execution slower, because the compiler could not be certain which "
"names were local and which were global. In Python 2.1 this construct causes "
"warnings, and sometimes even errors."
msgstr ""
"関数定義内での ``from モジュール import *`` は *不正* です。多くの古い "
"Python では不正としてチェックされないものの、だからと言って有効になるわけでは"
"ありません。やり手の弁護士を雇って無罪になっても、潔白になれるわけではないの"
"と同じですね。ですから絶対にそういう使い方をしないでください。不正にされない"
"バージョンでも、コンパイラはどの名前がローカルでどの名前がグローバルなのか判"
"然としなくなるので、関数の実行が遅くなってしまいます。Python 2.1 で、この構文"
"は警告や、場合によってはエラーも出すようになりました。"

#: ../../howto/doanddont.rst:41
msgid "At Module Level"
msgstr "モジュールレベルで"

#: ../../howto/doanddont.rst:43
msgid ""
"While it is valid to use ``from module import *`` at module level it is "
"usually a bad idea. For one, this loses an important property Python "
"otherwise has --- you can know where each toplevel name is defined by a "
"simple \"search\" function in your favourite editor. You also open yourself "
"to trouble in the future, if some module grows additional functions or "
"classes."
msgstr ""
"モジュールレベルで ``from モジュール import *`` を使うのは有効ではあります"
"が、大抵は、やめたほうが良いですよ。理由のひとつとして、それをやると本来 "
"Python が持っている大事な特徴を失ってしまうということが挙げられます。その特徴"
"とは、トップレベルの名前がそれぞれどこで定義されているのか、エディタの検索機"
"能だけでわかるというものです。それに、将来モジュールに関数やクラスが増えてい"
"くと、ややこしいことになりかねません。"

#: ../../howto/doanddont.rst:49
msgid ""
"One of the most awful questions asked on the newsgroup is why this code::"
msgstr "ニュースグループで出てくる最低の質問には、なぜこのコード::"

#: ../../howto/doanddont.rst:54
msgid ""
"does not work. Of course, it works just fine (assuming you have a file "
"called \"www\".) But it does not work if somewhere in the module, the "
"statement ``from os import *`` is present. The :mod:`os` module has a "
"function called :func:`open` which returns an integer. While it is very "
"useful, shadowing a builtin is one of its least useful properties."
msgstr ""
"が動かないのか、というものがあります。もちろんこれで動きますよ (ただし "
"\"www\" というファイルがあれば)。でもモジュールのどこかに ``from os import "
"*`` があればダメです。 :mod:`os` モジュールは、整数を返す :func:`open` 関数を"
"持っているのです。これはとても便利ではありますが、ビルトインを隠してしまうの"
"は、非常に不便な特徴のひとつと言えます。"

#: ../../howto/doanddont.rst:60
msgid ""
"Remember, you can never know for sure what names a module exports, so either "
"take what you need --- ``from module import name1, name2``, or keep them in "
"the module and access on a per-need basis ---  ``import module;print module."
"name``."
msgstr ""
"モジュールがエクスポートする名前は確実にはわからないのですから、必要なものだ"
"け ``from モジュール import 名前1, 名前2`` で取るか、モジュールから出さずに "
"``import モジュール;print モジュール.name`` としておいて必要に応じてアクセス"
"するようにしましょう。"

#: ../../howto/doanddont.rst:66
msgid "When It Is Just Fine"
msgstr "問題ない状況"

#: ../../howto/doanddont.rst:68
msgid "There are situations in which ``from module import *`` is just fine:"
msgstr "``from モジュール import *`` が問題とならない状況もあります:"

#: ../../howto/doanddont.rst:70
msgid ""
"The interactive prompt. For example, ``from math import *`` makes Python an "
"amazing scientific calculator."
msgstr ""
"対話的プロンプト。たとえば ``from math import *`` すれば Python がスーパー関"
"数電卓に変身します。"

#: ../../howto/doanddont.rst:73
msgid "When extending a module in C with a module in Python."
msgstr "C のモジュールを Python のモジュールで拡張するとき。"

#: ../../howto/doanddont.rst:75
msgid "When the module advertises itself as ``from import *`` safe."
msgstr "そのモジュールは ``from import *`` 可だ、と作者が言っているとき。"

#: ../../howto/doanddont.rst:79
msgid "Unadorned :keyword:`exec`, :func:`execfile` and friends"
msgstr "そのまんまな :keyword:`exec`, :func:`execfile` と仲間たち"

#: ../../howto/doanddont.rst:81
msgid ""
"The word \"unadorned\" refers to the use without an explicit dictionary, in "
"which case those constructs evaluate code in the *current* environment. This "
"is dangerous for the same reasons ``from import *`` is dangerous --- it "
"might step over variables you are counting on and mess up things for the "
"rest of your code. Simply do not do that."
msgstr ""
"「そのまんま」という言葉は辞書を明示せずに使うという意味で、そういう構文では"
"コードが *その時点の* 環境に対して評価されます。これは ``from import *`` と同"
"じ理由で危険です --- 使っている最中の変数を土足で踏んで行って、コード全体をメ"
"チャクチャにしてしまう可能性があるからです。これは、とにかくやめてください。"

#: ../../howto/doanddont.rst:87
msgid "Bad examples::"
msgstr "悪い見本::"

#: ../../howto/doanddont.rst:97
msgid "Good examples::"
msgstr "良い見本::"

#: ../../howto/doanddont.rst:112
msgid "from module import name1, name2"
msgstr "from モジュール import 名前1, 名前2"

#: ../../howto/doanddont.rst:114
msgid ""
"This is a \"don't\" which is much weaker than the previous \"don't\"s but is "
"still something you should not do if you don't have good reasons to do that. "
"The reason it is usually a bad idea is because you suddenly have an object "
"which lives in two separate namespaces. When the binding in one namespace "
"changes, the binding in the other will not, so there will be a discrepancy "
"between them. This happens when, for example, one module is reloaded, or "
"changes the definition of a function at runtime."
msgstr ""
"今回のは、これまでの「ダメ」よりかなり弱い「ダメ」ですが、やはりそれなりの理"
"由がなければ、やめておいたほうが良いことに変わりありません。これが大抵うまく"
"ないのは、いつの間にか二つ別々の名前空間に住む一つのオブジェクトを持つことに"
"なるからです。一方の名前空間でそのバインディングが変更されたとき、もう一方の"
"バインディングは変更されないので、食い違いができてしまいます。これが起こるの"
"は、たとえば、モジュールを読み直したり、ランタイムで関数の定義を変更したとき"
"などです。"

#: ../../howto/doanddont.rst:122
msgid "Bad example::"
msgstr "悪い見本::"

#: ../../howto/doanddont.rst:132
msgid "Good example::"
msgstr "良い見本::"

#: ../../howto/doanddont.rst:144
msgid "except:"
msgstr "except:"

#: ../../howto/doanddont.rst:146
msgid ""
"Python has the ``except:`` clause, which catches all exceptions. Since "
"*every* error in Python raises an exception, using ``except:`` can make many "
"programming errors look like runtime problems, which hinders the debugging "
"process."
msgstr ""
"Python には ``except:`` 節があり、これはあらゆる例外を捕捉します。 Python の"
"エラーは *すべて* 例外を出しますから、 ``except:`` を使うと各種のプログラミン"
"グエラーがランタイムの問題のように見えてしまい、デバッグの邪魔になります。"

#: ../../howto/doanddont.rst:151
msgid "The following code shows a great example of why this is bad::"
msgstr "以下のコードは、 ``except:`` をなぜ避けるべきなのかを示す良い例です::"

#: ../../howto/doanddont.rst:158
msgid ""
"The second line triggers a :exc:`NameError`, which is caught by the except "
"clause. The program will exit, and the error message the program prints will "
"make you think the problem is the readability of ``\"file\"`` when in fact "
"the real error has nothing to do with ``\"file\"``."
msgstr ""
"この 2 行目は :exc:`NameError` を引き起こし、続く except 節で捕捉されます。プ"
"ログラムがエラー終了しますが、実際のエラーが ``\"file\"`` とは何の関係もない"
"のに、にプログラムが表示するエラーメッセージは ``\"file\"`` の読み込みにあっ"
"たように誤解させます。"

#: ../../howto/doanddont.rst:163
msgid "A better way to write the above is ::"
msgstr "前述の例はこう書くべきでした::"

#: ../../howto/doanddont.rst:170
msgid ""
"When this is run, Python will produce a traceback showing the :exc:"
"`NameError`, and it will be immediately apparent what needs to be fixed."
msgstr ""
"このプログラムを実行した場合は、 Python は :exc:`NameError` のトレースバック"
"を表示し、修正すべき問題を即座に明らかにしてくれます。"

#: ../../howto/doanddont.rst:175
msgid ""
"Because ``except:`` catches *all* exceptions, including :exc:`SystemExit`, :"
"exc:`KeyboardInterrupt`, and :exc:`GeneratorExit` (which is not an error and "
"should not normally be caught by user code), using a bare ``except:`` is "
"almost never a good idea.  In situations where you need to catch all "
"\"normal\" errors, such as in a framework that runs callbacks, you can catch "
"the base class for all normal exceptions, :exc:`Exception`.  Unfortunately "
"in Python 2.x it is possible for third-party code to raise exceptions that "
"do not inherit from :exc:`Exception`, so in Python 2.x there are some cases "
"where you may have to use a bare ``except:`` and manually re-raise the "
"exceptions you don't want to catch."
msgstr ""
"``except:`` は *全て* の例外を補足します。これには :exc:`SystemExit`, :exc:"
"`KeyboardInterrupt`, :exc:`GeneratorExit` (これはエラーではなく、通常はユー"
"ザーコードでキャッチするべきではない例外です) も含まれるので、ほとんど全ての"
"場合に ``except:`` を利用してはいけません。 \"通常の\" すべてのエラーをキャッ"
"チする必要がある場合、たとえばコールバックを実行するようなフレームワークの場"
"合は、全ての通常の例外の基底クラスである :exc:`Exception` をキャッチすること"
"ができます。不幸なことに、 Python 2.x ではサードパーティのコードが :exc:"
"`Exception` を継承していない例外を発生させる可能性があるので、 ``except:`` を"
"使ってキャッチしたくない例外を手動で再度 raise する必要がある場合があるかもし"
"れません。"

#: ../../howto/doanddont.rst:188
msgid "Exceptions"
msgstr "例外"

#: ../../howto/doanddont.rst:190
msgid ""
"Exceptions are a useful feature of Python. You should learn to raise them "
"whenever something unexpected occurs, and catch them only where you can do "
"something about them."
msgstr ""
"例外は Python の有用な機能です。何か期待している以外のことが起これば例外を出"
"す、という習慣を持つべきですが、それと同時に、何か対処できるときにだけ捕捉す"
"る、ということも習慣にしてください。"

#: ../../howto/doanddont.rst:194
msgid "The following is a very popular anti-idiom ::"
msgstr "以下は非常にありがちな悪い見本です::"

#: ../../howto/doanddont.rst:202
msgid ""
"Consider the case where the file gets deleted between the time the call to :"
"func:`os.path.exists` is made and the time :func:`open` is called. In that "
"case the last line will raise an :exc:`IOError`.  The same thing would "
"happen if *file* exists but has no read permission.  Since testing this on a "
"normal machine on existent and non-existent files makes it seem bugless, the "
"test results will seem fine, and the code will get shipped.  Later an "
"unhandled :exc:`IOError` (or perhaps some other :exc:`EnvironmentError`) "
"escapes to the user, who gets to watch the ugly traceback."
msgstr ""
"ここで、 :func:`os.path.exists` を呼んでから :func:`open` を呼ぶまでの間に"
"ファイルが消された場合を考えてください。そうなれば最後の行は :exc:`IOError` "
"を投げるでしょう。同じことは、 *file* は存在しているけれど読み出し権限がな"
"かった、という場合にも起こります。これをテストする際、ふつうのマシンで、存在"
"するファイルと存在しないファイルに対してだけやったのではバグがないように見え"
"てしまい、テスト結果が大丈夫そうなのでコードはそのまま出荷されてしまうことに"
"なります。こうして、対処されない :exc:`IOError` (またはその他の :exc:"
"`EnvironmentError`)はユーザの所まで逃げのびて、汚いトレースバックを見せること"
"になるのです。"

#: ../../howto/doanddont.rst:211
msgid "Here is a somewhat better way to do it. ::"
msgstr "もっと良い方法はこちら::"

#: ../../howto/doanddont.rst:220
msgid ""
"In this version, *either* the file gets opened and the line is read (so it "
"works even on flaky NFS or SMB connections), or an error message is printed "
"that provides all the available information on why the open failed, and the "
"application is aborted."
msgstr ""
"このバージョンでは、ファイルが開かれて一行目も読まれる (だから、あてにならな"
"い NFS や SMB 接続でも動く) か、あるいはファイルを開くのに失敗した理由につい"
"ての全ての情報を含むエラーメッセージを表示してアプリケーションを強制終了する"
"かの *いずれか* 一方しか起こりません。"

#: ../../howto/doanddont.rst:225
msgid ""
"However, even this version of :func:`get_status` makes too many assumptions "
"--- that it will only be used in a short running script, and not, say, in a "
"long running server. Sure, the caller could do something like ::"
msgstr ""
"とはいえ、このバージョンの :func:`get_status` でさえ、前提としている条件が多"
"過ぎます --- すぐ終わるスクリプトでだけ使って、長く動作させる、いわゆるサーバ"
"では使わない前提なのです。もちろん呼び出し側はこうすることもできます::"

#: ../../howto/doanddont.rst:234
msgid ""
"But there is a better way.  You should try to use as few ``except`` clauses "
"in your code as you can --- the ones you do use will usually be inside calls "
"which should always succeed, or a catch-all in a main function."
msgstr ""
"でも、もっと良い方法があります。コードで使う ``except`` 節を、できるだけ少な"
"くするのです --- 使うとすれば、必ず成功するはずの呼び出し内か、main 関数での"
"全捕捉ですね。"

#: ../../howto/doanddont.rst:238
msgid "So, an even better version of :func:`get_status()` is probably ::"
msgstr "というわけで、たぶんもっと良い :func:`get_status` はこちら::"

#: ../../howto/doanddont.rst:243
msgid ""
"The caller can deal with the exception if it wants (for example, if it tries "
"several files in a loop), or just let the exception filter upwards to *its* "
"caller."
msgstr ""
"呼び出した側は、望むなら例外を処理することもできますし (たとえばループで複数"
"ファイルに試行するときとか)、そのまま *自分の* 呼び出し親まで上げることもでき"
"ます。"

#: ../../howto/doanddont.rst:247
msgid ""
"But the last version still has a serious problem --- due to implementation "
"details in CPython, the file would not be closed when an exception is raised "
"until the exception handler finishes; and, worse, in other implementations "
"(e.g., Jython) it might not be closed at all regardless of whether or not an "
"exception is raised."
msgstr ""
"しかし、この最終バージョンにも深刻な問題があります --- CPython 実装の細部に原"
"因があるのですが、例外が起きたときにはその例外ハンドラが終了するまでファイル"
"が閉じられないのです; しかも、なお悪いことに、他の実装 (たとえば Jython) では"
"例外の有無に関わらず閉じられません。"

#: ../../howto/doanddont.rst:253
msgid ""
"The best version of this function uses the ``open()`` call as a context "
"manager, which will ensure that the file gets closed as soon as the function "
"returns::"
msgstr ""
"この関数の一番良いバージョンでは :func:`open` をコンテクストマネジャとして"
"使って、関数が返るとすぐにファイルが閉じられるようにしています::"

#: ../../howto/doanddont.rst:263
msgid "Using the Batteries"
msgstr "使い捨てじゃなくて充電池を使う"

#: ../../howto/doanddont.rst:265
msgid ""
"Every so often, people seem to be writing stuff in the Python library again, "
"usually poorly. While the occasional module has a poor interface, it is "
"usually much better to use the rich standard library and data types that "
"come with Python than inventing your own."
msgstr ""
"どうも皆、Python ライブラリに最初からあるものを自分で書こうとして、大抵うまく"
"いっていないようです。そういう場当たりなモジュールには貧弱なインタフェースし"
"かないことを考えると、ふつうは Python に付いてくる高機能な標準ライブラリと"
"データ型を使うほうが、自分でひねり出すより格段に良いですよ。"

#: ../../howto/doanddont.rst:270
msgid ""
"A useful module very few people know about is :mod:`os.path`. It  always has "
"the correct path arithmetic for your operating system, and will usually be "
"much better than whatever you come up with yourself."
msgstr ""
"便利なのにほとんど知られていないモジュールに :mod:`os.path` があります。この"
"モジュールには OS に合ったパス演算が備わっていて、大抵は自分でどれだけ苦労し"
"て作ったものよりもずっと良いものです。"

#: ../../howto/doanddont.rst:274
msgid "Compare::"
msgstr "比べてください::"

#: ../../howto/doanddont.rst:281
msgid ""
"More useful functions in :mod:`os.path`: :func:`basename`,  :func:`dirname` "
"and :func:`splitext`."
msgstr ""
":mod:`os.path` にはさらに便利な関数が他にもあります: :func:`basename` や :"
"func:`dirname`, :func:`splitext` などです。"

#: ../../howto/doanddont.rst:284
msgid ""
"There are also many useful built-in functions people seem not to be aware of "
"for some reason: :func:`min` and :func:`max` can find the minimum/maximum of "
"any sequence with comparable semantics, for example, yet many people write "
"their own :func:`max`/:func:`min`. Another highly useful function is :func:"
"`reduce` which can be used to repeatedly apply a binary operation to a "
"sequence, reducing it to a single value.  For example, compute a factorial "
"with a series of multiply operations::"
msgstr ""

#: ../../howto/doanddont.rst:297
msgid ""
"When it comes to parsing numbers, note that :func:`float`, :func:`int` and :"
"func:`long` all accept string arguments and will reject ill-formed strings "
"by raising an :exc:`ValueError`."
msgstr ""
"数値の字句解析をするときには、 :func:`float`, :func:`int`, :func:`long` は全"
"て文字列の引数を受け取って、不正なフォーマットの文字列の場合には :exc:"
"`ValueError` を発生させることを覚えておくと便利です。"

#: ../../howto/doanddont.rst:303
msgid "Using Backslash to Continue Statements"
msgstr "バックスラッシュで文を続ける"

#: ../../howto/doanddont.rst:305
msgid ""
"Since Python treats a newline as a statement terminator, and since "
"statements are often more than is comfortable to put in one line, many "
"people do::"
msgstr ""
"Python は改行を文の終わりとして扱いますので、そして文は一行にうまく収まらない"
"ことがよくありますので、こうする人が多いです::"

#: ../../howto/doanddont.rst:312
msgid ""
"You should realize that this is dangerous: a stray space after the ``\\`` "
"would make this line wrong, and stray spaces are notoriously hard to see in "
"editors. In this case, at least it would be a syntax error, but if the code "
"was::"
msgstr ""
"これは危険だということに気づいたほうが良いですよ: はぐれスペースが ``\\`` の"
"後に来ればその行の意味が変わってしまいますが、スペースはエディタで見えにくい"
"ことに定評があるのです。今回の場合は構文エラーにはなりますが、もしこうなら::"

#: ../../howto/doanddont.rst:319
msgid "then it would just be subtly wrong."
msgstr "微妙に違う意味になるだけで、エラーが出ません。"

#: ../../howto/doanddont.rst:321
msgid ""
"It is usually much better to use the implicit continuation inside "
"parenthesis:"
msgstr "それで、ふつうは括弧に入れて暗黙のうちに行をつなげるほうが賢明です:"

#: ../../howto/doanddont.rst:323
msgid "This version is bulletproof::"
msgstr "このバージョンで鉄壁です::"
