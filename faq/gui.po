# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2018-05-29 04:30+0000\n"
"Last-Translator: Arihiro TAKASE\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../faq/gui.rst:5
msgid "Graphic User Interface FAQ"
msgstr "グラフィックユーザインタフェース FAQ"

#: ../../faq/gui.rst:8
msgid "Contents"
msgstr "内容"

#: ../../faq/gui.rst:12
msgid "What platform-independent GUI toolkits exist for Python?"
msgstr "Python のプラットフォーム非依存の GUI ツールキットには何がありますか？"

#: ../../faq/gui.rst:14
msgid "Depending on what platform(s) you are aiming at, there are several."
msgstr ""
"目的のプラットフォーム (群) が何かによって、いくつかあります。この中にはまだ "
"Python 3 に移植されていないものもあります。少なくとも `Tkinter`_ と `Qt`_ は "
"Python 3 互換であることを確認しています。"

#: ../../faq/gui.rst:19
msgid "Tkinter"
msgstr "Tkinter"

#: ../../faq/gui.rst:21
msgid ""
"Standard builds of Python include an object-oriented interface to the Tcl/Tk "
"widget set, called Tkinter.  This is probably the easiest to install and "
"use. For more info about Tk, including pointers to the source, see the Tcl/"
"Tk home page at https://www.tcl.tk.  Tcl/Tk is fully portable to the Mac OS "
"X, Windows, and Unix platforms."
msgstr ""
"Python の標準的なビルドには、 :ref:`tkinter <Tkinter>` という Tcl/Tk ウィ"
"ジェットセットのオブジェクト指向インタフェースが含まれています。\n"
"これは最も簡単にインストールして使えるでしょう。\n"
"ソースへのポインタなど、 Tk に関する詳しい情報は、 Tcl/Tk のホームページ "
"https://www.tcl.tk を参照してください。\n"
"Tcl/Tk は、Mac OS X、Windows、Unix のプラットフォームにおいて完全にポータブル"
"です。"

#: ../../faq/gui.rst:28
msgid "wxWidgets"
msgstr "wxWidgets"

#: ../../faq/gui.rst:30
msgid ""
"wxWidgets (https://www.wxwidgets.org) is a free, portable GUI class library "
"written in C++ that provides a native look and feel on a number of "
"platforms, with Windows, Mac OS X, GTK, X11, all listed as current stable "
"targets.  Language bindings are available for a number of languages "
"including Python, Perl, Ruby, etc."
msgstr ""
"wxWidgets (https://www.wxwidgets.org) は、C++ で書かれたフリーでポータブルな "
"GUI クラスライブラリで、各プラットフォームのネイティブなルックアンドフィール"
"を提供します。現在、Windows、Mac OS X、GTK、X11 はすべて安定した対象です。言"
"語バインディングは Python、Perl、Ruby などの言語で利用できます。"

#: ../../faq/gui.rst:36
msgid ""
"wxPython (http://www.wxpython.org) is the Python binding for wxwidgets.  "
"While it often lags slightly behind the official wxWidgets releases, it also "
"offers a number of features via pure Python extensions that are not "
"available in other language bindings.  There is an active wxPython user and "
"developer community."
msgstr ""
"wxPython (http://www.wxpython.org) が wxWidgets の Python バインディングで"
"す。これはたいてい公式の wxWidgets より少し遅れますが、他の言語バインディング"
"では利用できない機能も pure Python 拡張経由でいくつか提供しています。"
"wxPython ユーザと開発者の活発なコミュニティがあります。"

#: ../../faq/gui.rst:42
msgid ""
"Both wxWidgets and wxPython are free, open source, software with permissive "
"licences that allow their use in commercial products as well as in freeware "
"or shareware."
msgstr ""
"wxWidgets も wxPython も、フリーなオープンソースソフトウェアであり、寛大なラ"
"イセンスでフリーウェアやシェアウェアと同様に商業利用も許可されています。"

#: ../../faq/gui.rst:48
msgid "Qt"
msgstr "Qt"

#: ../../faq/gui.rst:50
msgid ""
"There are bindings available for the Qt toolkit (using either `PyQt <https://"
"riverbankcomputing.com/software/pyqt/intro>`_ or `PySide <https://wiki.qt.io/"
"PySide>`_) and for KDE (`PyKDE4 <https://techbase.kde.org/Languages/Python/"
"Using_PyKDE_4>`__). PyQt is currently more mature than PySide, but you must "
"buy a PyQt license from `Riverbank Computing <https://www.riverbankcomputing."
"com/commercial/license-faq>`_ if you want to write proprietary "
"applications.  PySide is free for all applications."
msgstr ""
"Qt ツールキットへのバインディング (`PyQt <https://riverbankcomputing.com/"
"software/pyqt/intro>`_ または `PySide <https://wiki.qt.io/PySide>`_) や KDE "
"へのバインディング (`PyKDE4 <https://techbase.kde.org/Languages/Python/"
"Using_PyKDE_4>`_) があります。PyQt は現在 PySide よりも発達していますが、プロ"
"プライエタリなアプリケーションを書くには  `Riverbank Computing <https://www."
"riverbankcomputing.com/commercial/license-faq>`_ から PyQt ライセンスを購入し"
"なければなりません。PySide は全てのアプリケーションに対してフリーです。"

#: ../../faq/gui.rst:57
msgid ""
"Qt 4.5 upwards is licensed under the LGPL license; also, commercial licenses "
"are available from `The Qt Company <https://www.qt.io/licensing/>`_."
msgstr ""
"Qt 4.5 以降は LGPL ライセンスでライセンスされています。また、商用ライセンス"
"も `The Qt Company <https://www.qt.io/licensing/>`_ から利用できます。"

#: ../../faq/gui.rst:61
msgid "Gtk+"
msgstr "Gtk+"

#: ../../faq/gui.rst:63
msgid ""
"PyGtk bindings for the `Gtk+ toolkit <http://www.gtk.org>`_ have been "
"implemented by James Henstridge; see <http://www.pygtk.org>."
msgstr ""
"`Gtk+ toolkit <http://www.gtk.org>`_ 用の PyGtk バインディングが James "
"Henstridge によって実装されています。<http://www.pygtk.org> を参照してくださ"
"い。"

#: ../../faq/gui.rst:67
msgid "FLTK"
msgstr "FLTK"

#: ../../faq/gui.rst:69
msgid ""
"Python bindings for `the FLTK toolkit <http://www.fltk.org>`_, a simple yet "
"powerful and mature cross-platform windowing system, are available from `the "
"PyFLTK project <http://pyfltk.sourceforge.net>`_."
msgstr ""
"簡潔かつ強力で成熟したクロスプラットフォームウィンドウシステム `the FLTK "
"toolkit <http://www.fltk.org>`_ の Python バインディングが `the PyFLTK "
"project <http://pyfltk.sourceforge.net>`_ から利用できます。"

#: ../../faq/gui.rst:74
msgid "OpenGL"
msgstr "OpenGL"

#: ../../faq/gui.rst:76
msgid "For OpenGL bindings, see `PyOpenGL <http://pyopengl.sourceforge.net>`_."
msgstr ""
"OpenGL のバインディングは、 `PyOpenGL <http://pyopengl.sourceforge.net>`_ を"
"参照してください。"

#: ../../faq/gui.rst:80
msgid "What platform-specific GUI toolkits exist for Python?"
msgstr "Python のプラットフォーム固有の GUI ツールキットには何がありますか？"

#: ../../faq/gui.rst:82
msgid ""
"By installing the `PyObjc Objective-C bridge <https://pythonhosted.org/"
"pyobjc/>`_, Python programs can use Mac OS X's Cocoa libraries."
msgstr ""
"`PyObjc Objective-C bridge <https://pythonhosted.org/pyobjc/>`_ をインストー"
"ルすることによって、Python プログラマは MacOS X の Cocoa ライブラリを使うこと"
"ができます。"

#: ../../faq/gui.rst:86
msgid ""
":ref:`Pythonwin <windows-faq>` by Mark Hammond includes an interface to the "
"Microsoft Foundation Classes and a Python programming environment that's "
"written mostly in Python using the MFC classes."
msgstr ""
"Mark Hammond による :ref:`Pythonwin <windows-faq>` には Microsoft Foundation "
"Class のインタフェースと Python プログラミング環境が含まれています。これは "
"MFC クラスを用いて主に Python で書かれています。"

#: ../../faq/gui.rst:92
msgid "Tkinter questions"
msgstr "Tkinter の質問"

#: ../../faq/gui.rst:95
msgid "How do I freeze Tkinter applications?"
msgstr "Tkinter アプリケーションを凍結するにはどうしますか？"

#: ../../faq/gui.rst:97
msgid ""
"Freeze is a tool to create stand-alone applications.  When freezing Tkinter "
"applications, the applications will not be truly stand-alone, as the "
"application will still need the Tcl and Tk libraries."
msgstr ""
"Freeze はスタンドアロンアプリケーションを生成するツールです。Tkinter アプリ"
"ケーションを凍結するとき、それは Tcl と Tk ライブラリを必要とするので、真のス"
"タンドアロンにはなりません。"

#: ../../faq/gui.rst:101
msgid ""
"One solution is to ship the application with the Tcl and Tk libraries, and "
"point to them at run-time using the :envvar:`TCL_LIBRARY` and :envvar:"
"`TK_LIBRARY` environment variables."
msgstr ""
"一つの解決策は、アプリケーションに Tcl と Tk ライブラリを同梱し、環境変数 :"
"envvar:`TCL_LIBRARY` と :envvar:`TK_LIBRARY` でランタイムに指定することです。"

#: ../../faq/gui.rst:105
msgid ""
"To get truly stand-alone applications, the Tcl scripts that form the library "
"have to be integrated into the application as well. One tool supporting that "
"is SAM (stand-alone modules), which is part of the Tix distribution (http://"
"tix.sourceforge.net/)."
msgstr ""
"真にスタンドアロンなアプリケーションにするためには、ライブラリを成す Tcl スク"
"リプトもアプリケーションに統合されていなければなりません。それをサポートする"
"ツールの一つは SAM (stand-alone modules) で、Tix ディストリビューション "
"(http://tix.sourceforge.net/) の一部です。"

#: ../../faq/gui.rst:110
msgid ""
"Build Tix with SAM enabled, perform the appropriate call to :c:func:"
"`Tclsam_init`, etc. inside Python's :file:`Modules/tkappinit.c`, and link "
"with libtclsam and libtksam (you might include the Tix libraries as well)."
msgstr ""
"SAM を有効にするように Tix をビルドして、Python の :file:`Modules/tkappinit."
"c` 内部の :c:func:`Tclsam_init` 等への適切なコールを実行し、libtclsam と "
"libtksam にリンクしてください (Tix ライブラリを含んでも良いです)。"

#: ../../faq/gui.rst:117
msgid "Can I have Tk events handled while waiting for I/O?"
msgstr "I/O を待つ間に扱われる Tk イベントを作れますか？"

#: ../../faq/gui.rst:119
msgid ""
"On platforms other than Windows, yes, and you don't even need threads!  But "
"you'll have to restructure your I/O code a bit.  Tk has the equivalent of "
"Xt's :c:func:`XtAddInput()` call, which allows you to register a callback "
"function which will be called from the Tk mainloop when I/O is possible on a "
"file descriptor.  See :ref:`tkinter-file-handlers`."
msgstr ""
"Windows 以外のプラットフォームについては、はい、スレッドさえ必要ありませ"
"ん！  ただし、I/O コードを少し再構成しなければなりません。Tk には Xt の :c:"
"func:`XtAddInput()` コールと同等なものがあるので、ファイルディスクリプタ上で "
"I/O が可能なときに Tk メインループから呼ばれるコールバック関数を登録できま"
"す。 :ref:`tkinter-file-handlers` を参照してください。"

#: ../../faq/gui.rst:127
msgid "I can't get key bindings to work in Tkinter: why?"
msgstr "Tkinter で働くキーバインディングが得られません。なぜですか？"

#: ../../faq/gui.rst:129
msgid ""
"An often-heard complaint is that event handlers bound to events with the :"
"meth:`bind` method don't get handled even when the appropriate key is "
"pressed."
msgstr ""
":meth:`bind` メソッドでイベントに結び付けられたイベントハンドラが、適切なキー"
"が押されたときにさえハンドルされないという苦情がよく聞かれます。"

#: ../../faq/gui.rst:132
msgid ""
"The most common cause is that the widget to which the binding applies "
"doesn't have \"keyboard focus\".  Check out the Tk documentation for the "
"focus command. Usually a widget is given the keyboard focus by clicking in "
"it (but not for labels; see the takefocus option)."
msgstr ""
"最も一般的な原因は、バインディングが適用されるウィジェットが \"キーボード"
"フォーカス\" を持たないことです。Tk ドキュメントでフォーカスコマンドを確認し"
"てください。通常はウィジェットの中をクリックすることでキーボードフォーカスを"
"与えられます (ただしラベルには与えられません。takefocus オプションを参照して"
"ください)。"
