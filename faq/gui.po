# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# mollinaca, 2021
# Shin Saito, 2021
# Arihiro TAKASE, 2023
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-18 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:52+0000\n"
"Last-Translator: Arihiro TAKASE, 2023\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../faq/gui.rst:5
msgid "Graphic User Interface FAQ"
msgstr "グラフィックユーザインターフェース FAQ"

#: ../../faq/gui.rst:8
msgid "Contents"
msgstr "内容"

#: ../../faq/gui.rst:15
msgid "General GUI Questions"
msgstr "一般的な GUI の質問"

#: ../../faq/gui.rst:18
msgid "What GUI toolkits exist for Python?"
msgstr "Python の GUI ツールキットには何がありますか？"

#: ../../faq/gui.rst:20
msgid ""
"Standard builds of Python include an object-oriented interface to the Tcl/Tk "
"widget set, called :ref:`tkinter <Tkinter>`.  This is probably the easiest "
"to install (since it comes included with most `binary distributions <https://"
"www.python.org/downloads/>`_ of Python) and use. For more info about Tk, "
"including pointers to the source, see the `Tcl/Tk home page <https://www.tcl."
"tk>`_.  Tcl/Tk is fully portable to the macOS, Windows, and Unix platforms."
msgstr ""
"Python の標準的なビルドには、 :ref:`tkinter <Tkinter>` という Tcl/Tk ウィ"
"ジェットセットのオブジェクト指向インターフェースが含まれています。これは最も"
"簡単にインストールして使えるでしょう (なぜなら、これは Python のほとんどの `"
"バイナリディストリビューション <https://www.python.org/downloads/>`_ に同梱さ"
"れているからです)。ソースへのポインタなど、 Tk に関する詳しい情報は、 `Tcl/"
"Tk ホームページ <https://www.tcl.tk>`_ を参照してください。 Tcl/Tk は、 "
"macOS 、Windows 、 Unix プラットフォームに完全にポータブルです。"

#: ../../faq/gui.rst:28
msgid ""
"Depending on what platform(s) you are aiming at, there are also several "
"alternatives. A `list of cross-platform <https://wiki.python.org/moin/"
"GuiProgramming#Cross-Platform_Frameworks>`_ and `platform-specific <https://"
"wiki.python.org/moin/GuiProgramming#Platform-specific_Frameworks>`_ GUI "
"frameworks can be found on the python wiki."
msgstr ""
"対象とするプラットフォームによっては他の選択肢もあります。`プラットフォーム互"
"換 <https://wiki.python.org/moin/GuiProgramming#Cross-Platform_Frameworks>`_ "
"および `プラットフォーム固有 <https://wiki.python.org/moin/"
"GuiProgramming#Platform-specific_Frameworks>`_ の GUI フレームワークのリスト"
"を python wiki で参照できます。"

#: ../../faq/gui.rst:36
msgid "Tkinter questions"
msgstr "Tkinter の質問"

#: ../../faq/gui.rst:39
msgid "How do I freeze Tkinter applications?"
msgstr "Tkinter アプリケーションを凍結するにはどうしますか？"

#: ../../faq/gui.rst:41
msgid ""
"Freeze is a tool to create stand-alone applications.  When freezing Tkinter "
"applications, the applications will not be truly stand-alone, as the "
"application will still need the Tcl and Tk libraries."
msgstr ""
"Freeze はスタンドアロンアプリケーションを生成するツールです。Tkinter アプリ"
"ケーションを凍結するとき、それは Tcl と Tk ライブラリを必要とするので、真のス"
"タンドアロンにはなりません。"

#: ../../faq/gui.rst:45
msgid ""
"One solution is to ship the application with the Tcl and Tk libraries, and "
"point to them at run-time using the :envvar:`!TCL_LIBRARY` and :envvar:`!"
"TK_LIBRARY` environment variables."
msgstr ""
"一つの解決策は、アプリケーションに Tcl と Tk ライブラリを同梱し、環境変数 :"
"envvar:`!TCL_LIBRARY` と :envvar:`!TK_LIBRARY` でランタイムに指定することで"
"す。"

#: ../../faq/gui.rst:49
msgid ""
"Various third-party freeze libraries such as py2exe and cx_Freeze have "
"handling for Tkinter applications built-in."
msgstr ""

#: ../../faq/gui.rst:54
msgid "Can I have Tk events handled while waiting for I/O?"
msgstr "I/O を待つ間に扱われる Tk イベントを作れますか？"

#: ../../faq/gui.rst:56
msgid ""
"On platforms other than Windows, yes, and you don't even need threads!  But "
"you'll have to restructure your I/O code a bit.  Tk has the equivalent of "
"Xt's :c:func:`!XtAddInput` call, which allows you to register a callback "
"function which will be called from the Tk mainloop when I/O is possible on a "
"file descriptor.  See :ref:`tkinter-file-handlers`."
msgstr ""
"Windows 以外のプラットフォームについては、はい、スレッドさえ必要ありませ"
"ん！  ただし、I/O コードを少し再構成しなければなりません。Tk には Xt の :c:"
"func:`!XtAddInput` コールと同等なものがあるので、ファイルディスクリプタ上で "
"I/O が可能なときに Tk メインループから呼ばれるコールバック関数を登録できま"
"す。 :ref:`tkinter-file-handlers` を参照してください。"

#: ../../faq/gui.rst:64
msgid "I can't get key bindings to work in Tkinter: why?"
msgstr "Tkinter で働くキーバインディングが得られません。なぜですか？"

#: ../../faq/gui.rst:66
msgid ""
"An often-heard complaint is that event handlers :ref:`bound <bindings-and-"
"events>` to events with the :meth:`!bind` method don't get handled even when "
"the appropriate key is pressed."
msgstr ""
":meth:`!bind` メソッドでイベントに :ref:`結び付けられた <bindings-and-"
"events>` イベントハンドラが、適切なキーが押されたときにさえハンドルされないと"
"いう苦情がよく聞かれます。"

#: ../../faq/gui.rst:70
msgid ""
"The most common cause is that the widget to which the binding applies "
"doesn't have \"keyboard focus\".  Check out the Tk documentation for the "
"focus command. Usually a widget is given the keyboard focus by clicking in "
"it (but not for labels; see the takefocus option)."
msgstr ""
"最も一般的な原因は、バインディングが適用されるウィジェットが \"キーボード"
"フォーカス\" を持たないことです。Tk ドキュメントでフォーカスコマンドを確認し"
"てください。通常はウィジェットの中をクリックすることでキーボードフォーカスを"
"与えられます (ただしラベルには与えられません。takefocus オプションを参照して"
"ください)。"
