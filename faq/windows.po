# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 02:43+0000\n"
"Last-Translator: tomo, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../faq/windows.rst:9
msgid "Python on Windows FAQ"
msgstr "Windows 上の Python FAQ"

#: ../../faq/windows.rst:12
msgid "Contents"
msgstr "内容"

#: ../../faq/windows.rst:22
msgid "How do I run a Python program under Windows?"
msgstr "Python プログラムを Windows で動かすにはどうしますか？"

#: ../../faq/windows.rst:24
msgid ""
"This is not necessarily a straightforward question. If you are already "
"familiar with running programs from the Windows command line then everything "
"will seem obvious; otherwise, you might need a little more guidance."
msgstr ""
"これは必ずしも単純な質問ではありません。Windows コマンドラインからプログラム"
"を実行するのに慣れてしまっている場合は、全て明らかなことに思えるでしょう; そ"
"うでない場合は、もう少し手引きが必要でしょう。"

#: ../../faq/windows.rst:28
msgid ""
"Unless you use some sort of integrated development environment, you will end "
"up *typing* Windows commands into what is variously referred to as a \"DOS "
"window\" or \"Command prompt window\".  Usually you can create such a window "
"from your search bar by searching for ``cmd``.  You should be able to "
"recognize when you have started such a window because you will see a Windows "
"\"command prompt\", which usually looks like this:"
msgstr ""
"ある種の統合開発環境を使っているのでなければ、最終的には \"DOS ウィンドウ\" "
"や \"コマンドプロンプト\" などと色々に呼ばれているものに、 Windows コマンドを"
"タイプすることになるでしょう。\n"
"通常そういうウィンドウは検索バーで ``cmd`` を検索して起動します。\n"
"通常は次のような見た目の Windows の \"コマンド プロンプト\" が現れるので、"
"ウィンドウが起動したのが分かるはずです::"

#: ../../faq/windows.rst:39
msgid ""
"The letter may be different, and there might be other things after it, so "
"you might just as easily see something like:"
msgstr ""
"この文字は異なっていたり、続きがあったりするので、コンピュータの設定や、あな"
"たが最近何をしたかに依って、このようになっていることもあるでしょう:"

#: ../../faq/windows.rst:46
msgid ""
"depending on how your computer has been set up and what else you have "
"recently done with it.  Once you have started such a window, you are well on "
"the way to running Python programs."
msgstr ""
"このようなウィンドウさえ開けば、Python プログラムを動かす手順は順調に進みま"
"す。"

#: ../../faq/windows.rst:50
msgid ""
"You need to realize that your Python scripts have to be processed by another "
"program called the Python *interpreter*.  The interpreter reads your script, "
"compiles it into bytecodes, and then executes the bytecodes to run your "
"program. So, how do you arrange for the interpreter to handle your Python?"
msgstr ""
"Python スクリプトは Python *インタプリタ* と呼ばれる別のプログラムで処理され"
"なければならないということを、理解する必要があります。インタプリタはスクリプ"
"トを読み込み、バイトコードにコンパイルし、バイトコードを実行しプログラムを走"
"らせます。では、インタプリタが Python スクリプトを取り扱うためには、どんな用"
"意をするのでしょうか?"

#: ../../faq/windows.rst:55
msgid ""
"First, you need to make sure that your command window recognises the word "
"\"py\" as an instruction to start the interpreter.  If you have opened a "
"command window, you should try entering the command ``py`` and hitting "
"return:"
msgstr ""
"まず最初に、コマンドウィンドウに \"py\" という単語がインタプリタを起動する指"
"示であると認識させる必要があります。\n"
"コマンドウィンドウを開いたら、 ``py`` というコマンドを入力し、リターンキーを"
"叩いてください。:"

#: ../../faq/windows.rst:64
msgid "You should then see something like:"
msgstr "次のような出力が見えるでしょう:"

#: ../../faq/windows.rst:72
msgid ""
"You have started the interpreter in \"interactive mode\". That means you can "
"enter Python statements or expressions interactively and have them executed "
"or evaluated while you wait.  This is one of Python's strongest features.  "
"Check it by entering a few expressions of your choice and seeing the results:"
msgstr ""
"インタプリタの\"対話モード\"が始まりました。これで Python の文や式を対話的に"
"入力して、待っている間に実行や評価させることができます。これが Python の最強"
"の機能のひとつです。いくつかの式を選んで入力し、結果を見て確かめてみましょう:"

#: ../../faq/windows.rst:84
msgid ""
"Many people use the interactive mode as a convenient yet highly programmable "
"calculator.  When you want to end your interactive Python session, call the :"
"func:`exit` function or hold the :kbd:`Ctrl` key down while you enter a :kbd:"
"`Z`, then hit the \":kbd:`Enter`\" key to get back to your Windows command "
"prompt."
msgstr ""
"多くの人が対話モードを便利で高度なプログラム可能計算機として使っています。対"
"話式 Python セッションを終わらせたいなら、 :func:`exit` 関数を呼び出すか、 :"
"kbd:`Ctrl` キーを押しながら :kbd:`Z` を入力し \":kbd:`Enter`\" キーを押し"
"て、 Windows コマンドプロンプトに戻ってください。"

#: ../../faq/windows.rst:90
msgid ""
"You may also find that you have a Start-menu entry such as :menuselection:"
"`Start --> Programs --> Python 3.x --> Python (command line)` that results "
"in you seeing the ``>>>`` prompt in a new window.  If so, the window will "
"disappear after you call the :func:`exit` function or enter the :kbd:`Ctrl-"
"Z` character; Windows is running a single \"python\" command in the window, "
"and closes it when you terminate the interpreter."
msgstr ""
":menuselection:`スタート --> すべてのプログラム --> Python 3.x --> Python "
"(command line)` のような項目がスタートメニューに見付かるかもしれません。\n"
"これを起動すると、新しいウィンドウに ``>>>`` というプロンプトが見られるでしょ"
"う。その場合、 :func:`exit` 関数を呼び出すか :kbd:`Ctrl-Z` を入力するとウィン"
"ドウは閉じます; Windows は 1 つの \"python\" コマンドをウィンドウで実行してい"
"て、インタプリタを終了させたときに、そのウィンドウを閉じます。"

#: ../../faq/windows.rst:97
msgid ""
"Now that we know the ``py`` command is recognized, you can give your Python "
"script to it. You'll have to give either an absolute or a relative path to "
"the Python script. Let's say your Python script is located in your desktop "
"and is named ``hello.py``, and your command prompt is nicely opened in your "
"home directory so you're seeing something similar to::"
msgstr ""
"``py`` コマンドが認識されていることが確認できたので、 Python スクリプトを与え"
"られるようになりました。\n"
"そのためには Python スクリプトの絶対パスあるいは相対パスを与える必要がありま"
"す。\n"
"Python スクリプトがデスクトップにあり、 ``hellp.py`` という名前で、ちょうど良"
"いことにコマンドプロンプトがホームディレクトリを開いていると仮定しましょう。"
"そうすると次のような表示が見られます::"

#: ../../faq/windows.rst:106
msgid ""
"So now you'll ask the ``py`` command to give your script to Python by typing "
"``py`` followed by your script path::"
msgstr ""
"ここまで来れば ``py`` の後ろにスクリプトのパスを入力することで、 Python にス"
"クリプトを渡すよう ``py`` コマンドに命令できます::"

#: ../../faq/windows.rst:114
msgid "How do I make Python scripts executable?"
msgstr "Python スクリプトを実行可能にするにはどうしますか？"

#: ../../faq/windows.rst:116
msgid ""
"On Windows, the standard Python installer already associates the .py "
"extension with a file type (Python.File) and gives that file type an open "
"command that runs the interpreter (``D:\\Program Files\\Python\\python.exe "
"\"%1\" %*``).  This is enough to make scripts executable from the command "
"prompt as 'foo.py'.  If you'd rather be able to execute the script by simple "
"typing 'foo' with no extension you need to add .py to the PATHEXT "
"environment variable."
msgstr ""
"Windows では、標準の Python インストーラはすでに .py 拡張子をあるファイル型 "
"(Python.File) に関連付け、そのファイル型にインタプリタを実行するオープンコマ"
"ンド (``D:\\Program Files\\Python\\python.exe \"%1\" %*``) を与えます。コマン"
"ドプロンプトから 'foo.py' としてスクリプトを実行可能にするにはこれで十分で"
"す。スクリプトを拡張子なしで 'foo' とだけタイプして実行したいのなら、PATHEXT "
"環境変数に .py を加えてください。"

#: ../../faq/windows.rst:124
msgid "Why does Python sometimes take so long to start?"
msgstr "Python の起動に時間がかかることがあるのはなぜですか？"

#: ../../faq/windows.rst:126
msgid ""
"Usually Python starts very quickly on Windows, but occasionally there are "
"bug reports that Python suddenly begins to take a long time to start up.  "
"This is made even more puzzling because Python will work fine on other "
"Windows systems which appear to be configured identically."
msgstr ""
"通常 Python は Windows でとても早く起動しますが、ときどき Python が急にスター"
"トアップに時間がかかるようになったというバグレポートがあります。更に複雑なこ"
"とに、Python は同様に設定された他の Windows システムではきちんと動くのです。"

#: ../../faq/windows.rst:131
msgid ""
"The problem may be caused by a misconfiguration of virus checking software "
"on the problem machine.  Some virus scanners have been known to introduce "
"startup overhead of two orders of magnitude when the scanner is configured "
"to monitor all reads from the filesystem.  Try checking the configuration of "
"virus scanning software on your systems to ensure that they are indeed "
"configured identically. McAfee, when configured to scan all file system read "
"activity, is a particular offender."
msgstr ""
"この問題はそのマシンのウイルス対策ソフトウェアの設定ミスによって起こされるこ"
"とがあります。ウイルススキャナの中には、ファイルシステムからの全ての読み込み"
"を監視するように設定した場合に、二桁のスタートアップオーバーヘッドを引き起す"
"ことが知られているものがあります。あなたのシステムのウイルススキャンソフト"
"ウェアの設定を確かめて、本当に同様に設定されていることを確実にしてください。"

#: ../../faq/windows.rst:141
msgid "How do I make an executable from a Python script?"
msgstr "どうすれば Python スクリプトを EXE に出来ますか?"

#: ../../faq/windows.rst:143
msgid ""
"See `cx_Freeze <https://anthony-tuininga.github.io/cx_Freeze/>`_ for a "
"distutils extension that allows you to create console and GUI executables "
"from Python code. `py2exe <http://www.py2exe.org/>`_, the most popular "
"extension for building Python 2.x-based executables, does not yet support "
"Python 3 but a version that does is in development."
msgstr ""
"`cx_Freeze <https://anthony-tuininga.github.io/cx_Freeze/>`_ を参照して、 "
"Python コードからコンソール、GUI の実行可能ファイルを作れるようにする "
"distutils の拡張を調べてください。\n"
"`py2exe <http://www.py2exe.org/>`_ は最も有名な Python 2.x-ベースの EXE を作"
"る拡張です。\n"
"これは Python 3 をまだサポートしていませんが、開発中です。"

#: ../../faq/windows.rst:151
msgid "Is a ``*.pyd`` file the same as a DLL?"
msgstr "``*.pyd`` ファイルは DLL と同じですか？"

#: ../../faq/windows.rst:153
msgid ""
"Yes, .pyd files are dll's, but there are a few differences.  If you have a "
"DLL named ``foo.pyd``, then it must have a function ``PyInit_foo()``.  You "
"can then write Python \"import foo\", and Python will search for foo.pyd (as "
"well as foo.py, foo.pyc) and if it finds it, will attempt to call "
"``PyInit_foo()`` to initialize it.  You do not link your .exe with foo.lib, "
"as that would cause Windows to require the DLL to be present."
msgstr ""
"はい、.pyd ファイルは dll と同じようなものですが、少し違いがあります。``foo."
"pyd`` という名前の DLL があったとしたら、それには関数 ``PyInit_foo()`` が含ま"
"れていなければなりません。そうすれば Python で \"import foo\" を書けて、"
"Python は foo.pyd (や foo.py、foo.pyc) を探して、あれば、``PyInit_foo()`` を"
"呼び出して初期化しようとします。Windows が DLL の存在を必要とするのと違い、."
"exe ファイルを foo.lib にリンクするわけではありません。"

#: ../../faq/windows.rst:160
msgid ""
"Note that the search path for foo.pyd is PYTHONPATH, not the same as the "
"path that Windows uses to search for foo.dll.  Also, foo.pyd need not be "
"present to run your program, whereas if you linked your program with a dll, "
"the dll is required.  Of course, foo.pyd is required if you want to say "
"``import foo``.  In a DLL, linkage is declared in the source code with "
"``__declspec(dllexport)``. In a .pyd, linkage is defined in a list of "
"available functions."
msgstr ""
"なお、foo.pyd を検索するパスは PYTHONPATH であり、Windows が foo.dll を検索す"
"るパスと同じではありません。また、プログラムを dll にリンクしたときはプログラ"
"ムの実行に dll が必要ですが、foo.pyd は実行には必要はありません。もちろん、 "
"``import foo`` したいなら foo.pyd は必要です。DLL では、リンクはソースコード"
"内で ``__declspec(dllexport)`` によって宣言されます。.pyd では、リンクは使え"
"る関数のリストで定義されます。"

#: ../../faq/windows.rst:169
msgid "How can I embed Python into a Windows application?"
msgstr "Python を Windows アプリケーションに埋め込むにはどうしたらいいですか？"

#: ../../faq/windows.rst:171
msgid ""
"Embedding the Python interpreter in a Windows app can be summarized as "
"follows:"
msgstr ""
"Python インタプリタを Windows app に埋め込む方法は、次のように要約できます:"

#: ../../faq/windows.rst:173
msgid ""
"Do _not_ build Python into your .exe file directly.  On Windows, Python must "
"be a DLL to handle importing modules that are themselves DLL's.  (This is "
"the first key undocumented fact.)  Instead, link to :file:`python{NN}.dll`; "
"it is typically installed in ``C:\\Windows\\System``.  *NN* is the Python "
"version, a number such as \"33\" for Python 3.3."
msgstr ""
"あなたの .exe 内に直接 Python を取り込んでビルド *しないで* 下さい。Windows "
"では、それ自身が DLL になっているようなモジュールのインポートを処理するため"
"に、Python は DLL でなければなりません。(ドキュメント化されていない重大な事実"
"の一つ目です。)代わりに、 :file:`python{NN}.dll` とリンクしてください; 普通は"
"それは ``C:\\Windows\\System`` にインストールされています。 *NN* は Python "
"バージョンで Python 3.3 であれば \"33\" のような数字です。"

#: ../../faq/windows.rst:179
msgid ""
"You can link to Python in two different ways.  Load-time linking means "
"linking against :file:`python{NN}.lib`, while run-time linking means linking "
"against :file:`python{NN}.dll`.  (General note: :file:`python{NN}.lib` is "
"the so-called \"import lib\" corresponding to :file:`python{NN}.dll`.  It "
"merely defines symbols for the linker.)"
msgstr ""
"Python には、load-time に、または run-time にリンクできます。load-time なリン"
"クは、 :file:`python{NN}.lib` に対してリンクするもので、run-time なリンクは :"
"file:`python{NN}.dll` に対してリンクするものです。(一般的な注意: :file:"
"`python{NN}.lib` は :file:`python{NN}.dll` に対するいわゆる \"インポートライ"
"ブラリ\" です。これは単にリンカに対するシンボルを定義します。)"

#: ../../faq/windows.rst:185
msgid ""
"Run-time linking greatly simplifies link options; everything happens at run "
"time.  Your code must load :file:`python{NN}.dll` using the Windows "
"``LoadLibraryEx()`` routine.  The code must also use access routines and "
"data in :file:`python{NN}.dll` (that is, Python's C API's) using pointers "
"obtained by the Windows ``GetProcAddress()`` routine.  Macros can make using "
"these pointers transparent to any C code that calls routines in Python's C "
"API."
msgstr ""
"run-time なリンクは、リンクの選択を大いに単純化します。全ては実行時に行われま"
"す。コードは Windows の ``LoadLibraryEx()`` ルーチンで :file:`python{NN}."
"dll` をロードしなければなりません。コードはまた、Windows の "
"``GetProcAddress()`` ルーチンで得られるポインタで、 :file:`python{NN}.dll` "
"(すなわち、Python の C API)のルーチンとデータへアクセスしていなければなりませ"
"ん。マクロによって、このポインタを Python の C API のルーチンを呼び出す任意"
"の C コードに通して使えます。"

#: ../../faq/windows.rst:192
msgid ""
"Borland note: convert :file:`python{NN}.lib` to OMF format using Coff2Omf."
"exe first."
msgstr ""
"Borland note: まず :file:`python{NN}.lib` を Coff2Omf.exe で OMF フォーマット"
"に変換してください。"

#: ../../faq/windows.rst:197
msgid ""
"If you use SWIG, it is easy to create a Python \"extension module\" that "
"will make the app's data and methods available to Python.  SWIG will handle "
"just about all the grungy details for you.  The result is C code that you "
"link *into* your .exe file (!)  You do _not_ have to create a DLL file, and "
"this also simplifies linking."
msgstr ""
"SWIG を使えば、app のデータとメソッドを Python で使えるようにする Python \"拡"
"張モジュール\"を簡単に作れます。SWIG は雑用を殆どやってくれるでしょう。結果と"
"して、.exe ファイル *の中に* リンクする C コードができます(！)。DLL を作 _ら"
"なくてもよく_、リンクも簡潔になります。"

#: ../../faq/windows.rst:203
msgid ""
"SWIG will create an init function (a C function) whose name depends on the "
"name of the extension module.  For example, if the name of the module is "
"leo, the init function will be called initleo().  If you use SWIG shadow "
"classes, as you should, the init function will be called initleoc().  This "
"initializes a mostly hidden helper class used by the shadow class."
msgstr ""
"SWIG は拡張の名前に依る名前の init 関数 (C 関数) を作ります。例えば、モジュー"
"ルの名前が leo なら、init 関数の名前は initleo() になります。SWIG shadow クラ"
"スを使ったほうがよく、そうすると init 関数の名前は initleoc() になります。こ"
"れは shadow クラスが使うほとんど隠れた helper クラスを初期化します。"

#: ../../faq/windows.rst:209
msgid ""
"The reason you can link the C code in step 2 into your .exe file is that "
"calling the initialization function is equivalent to importing the module "
"into Python! (This is the second key undocumented fact.)"
msgstr ""
"ステップ 2 の C コードを .exe ファイルにリンクできるのは、初期化関数の呼び出"
"しと Python へのモジュールのインポートが同等だからです！ (ドキュメント化され"
"ていない重大な事実の二つ目です)"

#: ../../faq/windows.rst:213
msgid ""
"In short, you can use the following code to initialize the Python "
"interpreter with your extension module."
msgstr ""
"要するに、以下のコードを使って Python インタプリタを拡張モジュール込みで初期"
"化することができます。"

#: ../../faq/windows.rst:224
msgid ""
"There are two problems with Python's C API which will become apparent if you "
"use a compiler other than MSVC, the compiler used to build pythonNN.dll."
msgstr ""
"Python の C API には、pythonNN.dll をビルドするのに使われたコンパイラ MSVC 以"
"外のコンパイラを使うと現れる二つの問題があります。"

#: ../../faq/windows.rst:227
msgid ""
"Problem 1: The so-called \"Very High Level\" functions that take FILE * "
"arguments will not work in a multi-compiler environment because each "
"compiler's notion of a struct FILE will be different.  From an "
"implementation standpoint these are very _low_ level functions."
msgstr ""
"問題 1: コンパイラによって struct FILE に対する概念が異なるため、FILE * 引数"
"を取るいわゆる \"超高水準\" 関数は、多コンパイラ環境で働きません。実装の観点"
"から、これらは超 _低_ 水準関数になっています。"

#: ../../faq/windows.rst:232
msgid ""
"Problem 2: SWIG generates the following code when generating wrappers to "
"void functions:"
msgstr ""
"問題 2: SWIG は void 関数へのラッパを生成するときに以下のコードを生成します:"

#: ../../faq/windows.rst:241
msgid ""
"Alas, Py_None is a macro that expands to a reference to a complex data "
"structure called _Py_NoneStruct inside pythonNN.dll.  Again, this code will "
"fail in a mult-compiler environment.  Replace such code by:"
msgstr ""
"ああ、Py_none は pythonNN.dll 内の _Py_NoneStruct という複雑なデータ構造に展"
"開するマクロです。また、このコードは他コンパイラ環境では失敗します。このコー"
"ドを次のように置き換えてください:"

#: ../../faq/windows.rst:249
msgid ""
"It may be possible to use SWIG's ``%typemap`` command to make the change "
"automatically, though I have not been able to get this to work (I'm a "
"complete SWIG newbie)."
msgstr ""
"これで、SWIG をまだ仕事に使えない (私は SWIG の完全な初心者です) 私でも、"
"SWIG の ``%typemap`` コマンドを使って自動的に変更できるようになります。"

#: ../../faq/windows.rst:253
msgid ""
"Using a Python shell script to put up a Python interpreter window from "
"inside your Windows app is not a good idea; the resulting window will be "
"independent of your app's windowing system.  Rather, you (or the "
"wxPythonWindow class) should create a \"native\" interpreter window.  It is "
"easy to connect that window to the Python interpreter.  You can redirect "
"Python's i/o to _any_ object that supports read and write, so all you need "
"is a Python object (defined in your extension module) that contains read() "
"and write() methods."
msgstr ""
"Python シェルスクリプトを使って Windows app 内から Python インタプリタウィン"
"ドウを掲示するのはいい方法ではありません。そのように表示されるウィンドウは "
"app のウィンドウシステムとは関係ありません。むしろ \"ネイティブな\" インタプ"
"リタウィンドウを (wxPythonWindow を使ったりして) 作るべきです。そのウィンドウ"
"を Python インタプリタにつなぐのは簡単です。Python の i/o は読み書きをサポー"
"トする _どんな_ オブジェクトにもリダイレクトできるので、read() と write() メ"
"ソッドを含む (拡張モジュールで定義された) Python オブジェクトさえあればいいの"
"です。"

#: ../../faq/windows.rst:262
msgid "How do I keep editors from inserting tabs into my Python source?"
msgstr ""
"エディタが Python ソースにタブを勝手に挿入しないようにするにはどうしますか？"

#: ../../faq/windows.rst:264
msgid ""
"The FAQ does not recommend using tabs, and the Python style guide, :pep:`8`, "
"recommends 4 spaces for distributed Python code; this is also the Emacs "
"python-mode default."
msgstr ""
"この FAQ ではタブを使うことを勧めません。Python スタイルガイド :pep:`8` で"
"は、配布される Python コードにはスペース 4 つを使うことを推奨しています。これ"
"は Emacs の python-mode のデフォルトでも同じです。"

#: ../../faq/windows.rst:268
msgid ""
"Under any editor, mixing tabs and spaces is a bad idea.  MSVC is no "
"different in this respect, and is easily configured to use spaces: Take :"
"menuselection:`Tools --> Options --> Tabs`, and for file type \"Default\" "
"set \"Tab size\" and \"Indent size\" to 4, and select the \"Insert spaces\" "
"radio button."
msgstr ""
"いかなるエディタでも、タブとスペースを混ぜるのは良くないです。 MSVC も全く同"
"じ立場であり、スペースを使うようにする設定が簡単にできます。 :menuselection:"
"`Tools --> Options --> Tabs` を選択し、ファイルタイプの \"デフォルト\" の "
"\"タブ幅\" と \"インデント幅\" に 4 を設定して、 \"スペースを挿入する\" のラ"
"ジオボタンを選択してください。"

#: ../../faq/windows.rst:273
msgid ""
"Python raises :exc:`IndentationError` or :exc:`TabError` if mixed tabs and "
"spaces are causing problems in leading whitespace. You may also run the :mod:"
"`tabnanny` module to check a directory tree in batch mode."
msgstr ""
"Python は、もしタブとスペースが混在していることで先頭の空白に問題がある場"
"合、:exc:`IndentationError` または :exc:`TabError` を送出します。\n"
":mod:`tabnanny` モジュールを実行することで、ディレクトリーツリーをバッチモー"
"ドでチェックすることができます。"

#: ../../faq/windows.rst:280
msgid "How do I check for a keypress without blocking?"
msgstr "ブロックすることなく押鍵を検出するにはどうしますか？"

#: ../../faq/windows.rst:282
msgid ""
"Use the msvcrt module.  This is a standard Windows-specific extension "
"module. It defines a function ``kbhit()`` which checks whether a keyboard "
"hit is present, and ``getch()`` which gets one character without echoing it."
msgstr ""
"msvcrt モジュールを使ってください。これは標準の Windows 専用拡張モジュールで"
"す。これはキーボードが打たれているかを調べる関数 ``kbhit()`` と、反響すること"
"なく一文字を得る ``getch()`` を定義します。"
