# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2018-01-20 20:56+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../extending/building.rst:8
msgid "Building C and C++ Extensions with distutils"
msgstr "distutils による C および C++ 拡張モジュールのビルド"

#: ../../extending/building.rst:13
msgid ""
"Starting in Python 1.4, Python provides, on Unix, a special make file for "
"building make files for building dynamically-linked extensions and custom "
"interpreters.  Starting with Python 2.0, this mechanism (known as related to "
"Makefile.pre.in, and Setup files) is no longer supported. Building custom "
"interpreters was rarely used, and extension modules can be built using "
"distutils."
msgstr ""
"Python 1.4 になってから、動的にリンクされるような拡張モジュールをビルドするた"
"めのメイクファイルを作成するような、特殊なメイクファイルをUnix 向けに提供する"
"ようになりました。Python 2.0 からはこの機構 (いわゆる Makefile.pre.in および "
"Setup ファイルの関係ファイル) はサポートされなくなりました。インタプリタ自体"
"のカスタマイズはほとんど使われず、distutils で拡張モジュールをビルドできるよ"
"うになったからです。"

#: ../../extending/building.rst:20
msgid ""
"Building an extension module using distutils requires that distutils is "
"installed on the build machine, which is included in Python 2.x and "
"available separately for Python 1.5. Since distutils also supports creation "
"of binary packages, users don't necessarily need a compiler and distutils to "
"install the extension."
msgstr ""
"distutils を使った拡張モジュールのビルドには、ビルドを行う計算機上に "
"distutils をインストールしていることが必要です。Python 2.x には distutils が"
"入っており、Python 1.5 用には個別のパッケージがあります。distutils はバイナリ"
"パッケージの作成もサポートしているので、ユーザが拡張モジュールをインストール"
"する際に、必ずしもコンパイラが必要というわけではありません。"

#: ../../extending/building.rst:26
msgid ""
"A distutils package contains a driver script, :file:`setup.py`. This is a "
"plain Python file, which, in the most simple case, could look like this:"
msgstr ""
"distutils ベースのパッケージには、駆動スクリプト (driver script) となる :"
"file:`setup.py` が入っています。\n"
":file:`setup.py` は普通の Python プログラムファイルで、ほとんどの場合以下のよ"
"うな内容になっています:"

#: ../../extending/building.rst:42
msgid "With this :file:`setup.py`, and a file :file:`demo.c`, running ::"
msgstr ""
"この :file:`setup.py` とファイル :file:`demo.c` があるとき、以下のコマンド ::"

#: ../../extending/building.rst:46
msgid ""
"will compile :file:`demo.c`, and produce an extension module named ``demo`` "
"in the :file:`build` directory. Depending on the system, the module file "
"will end up in a subdirectory :file:`build/lib.system`, and may have a name "
"like :file:`demo.so` or :file:`demo.pyd`."
msgstr ""
"を実行すると、 :file:`demo.c` をコンパイルして、 ``demo`` という名前の拡張モ"
"ジュールを :file:`build` ディレクトリ内に生成します。システムによってはモ"
"ジュールファイルは :file:`build/lib.system` サブディレクトリに生成され、 :"
"file:`demo.so` や :file:`demo.pyd` といった名前になることがあります。"

#: ../../extending/building.rst:51
msgid ""
"In the :file:`setup.py`, all execution is performed by calling the ``setup`` "
"function. This takes a variable number of keyword arguments, of which the "
"example above uses only a subset. Specifically, the example specifies meta-"
"information to build packages, and it specifies the contents of the "
"package.  Normally, a package will contain of addition modules, like Python "
"source modules, documentation, subpackages, etc. Please refer to the "
"distutils documentation in :ref:`distutils-index` to learn more about the "
"features of distutils; this section explains building extension modules only."
msgstr ""
":file:`setup.py` 内では、コマンドの実行はすべて ``setup`` 関数を呼び出して行"
"います。この関数は可変個のキーワード引数をとります。例ではその一部を使ってい"
"るにすぎません。もっと具体的にいうと、例の中ではパッケージをビルドするための"
"メタ情報と、パッケージの内容を指定しています。通常、パッケージには Python "
"ソースモジュールやドキュメント、サブパッケージ等といった別のファイルも入りま"
"す。 distutils の機能に関する詳細は、 :ref:`distutils-index` に書かれている "
"distutils のドキュメントを参照してください;  この節では、拡張モジュールのビル"
"ドについてのみ説明します。"

#: ../../extending/building.rst:60
msgid ""
"It is common to pre-compute arguments to :func:`setup`, to better structure "
"the driver script. In the example above, the ``ext_modules`` argument to :"
"func:`setup` is a list of extension modules, each of which is an instance of "
"the :class:`~distutils.extension.Extension`. In the example, the instance "
"defines an extension named ``demo`` which is build by compiling a single "
"source file, :file:`demo.c`."
msgstr ""
"駆動スクリプトをよりよく構成するために、 :func:`setup` への引数を前もって計算"
"しておくことがよくあります。上の例では、 :func:`setup` の ``ext_modules`` は"
"拡張モジュールのリストで、リストの各々の要素は :class:`~distutils.extension."
"Extension` クラスのインスタンスになっています。上の例では、 ``demo`` という名"
"の拡張モジュールを定義していて、単一のソースファイル :file:`demo.c` をコンパ"
"イルしてビルドするよう定義しています。"

#: ../../extending/building.rst:67
msgid ""
"In many cases, building an extension is more complex, since additional "
"preprocessor defines and libraries may be needed. This is demonstrated in "
"the example below."
msgstr ""
"多くの場合、拡張モジュールのビルドはもっと複雑になります。\n"
"というのは、プリプロセッサ定義やライブラリの追加指定が必要になることがあるか"
"らです。\n"
"例えば以下のファイルがその実例です。"

#: ../../extending/building.rst:95
msgid ""
"In this example, :func:`setup` is called with additional meta-information, "
"which is recommended when distribution packages have to be built. For the "
"extension itself, it specifies preprocessor defines, include directories, "
"library directories, and libraries. Depending on the compiler, distutils "
"passes this information in different ways to the compiler. For example, on "
"Unix, this may result in the compilation commands ::"
msgstr ""
"この例では、 :func:`setup` は追加のメタ情報と共に呼び出されます。配布パッケー"
"ジを構築する際には、メタ情報の追加が推奨されています。拡張モジュール自体につ"
"いては、プリプロセッサ定義、インクルードファイルのディレクトリ、ライブラリの"
"ディレクトリ、ライブラリといった指定があります。 distutils はこの情報をコンパ"
"イラに応じて異なるやり方で引渡します。例えば、Unix では、上の設定は以下のよう"
"なコンパイルコマンドになるかもしれません ::"

#: ../../extending/building.rst:106
msgid ""
"These lines are for demonstration purposes only; distutils users should "
"trust that distutils gets the invocations right."
msgstr ""
"これらのコマンドラインは実演目的で書かれたものです; distutils のユーザは "
"distutils が正しくコマンドを実行すると信用してください。"

#: ../../extending/building.rst:113
msgid "Distributing your extension modules"
msgstr "拡張モジュールの配布"

#: ../../extending/building.rst:115
msgid ""
"When an extension has been successfully build, there are three ways to use "
"it."
msgstr "拡張モジュールをうまくビルドできたら、三通りの使い方があります。"

#: ../../extending/building.rst:117
msgid ""
"End-users will typically want to install the module, they do so by running ::"
msgstr ""
"エンドユーザは普通モジュールをインストールしようと考えます; これには、次を実"
"行します ::"

#: ../../extending/building.rst:121
msgid ""
"Module maintainers should produce source packages; to do so, they run ::"
msgstr ""
"モジュールメンテナはソースパッケージを作成します; これには、次を実行します ::"

#: ../../extending/building.rst:125
msgid ""
"In some cases, additional files need to be included in a source "
"distribution; this is done through a :file:`MANIFEST.in` file; see the "
"distutils documentation for details."
msgstr ""
"場合によっては、ソース配布物に追加のファイルを含める必要があります; これに"
"は :file:`MANIFEST.in` ファイルを使います; 詳しくは distutils のドキュメント"
"を参照してください。"

#: ../../extending/building.rst:129
msgid ""
"If the source distribution has been build successfully, maintainers can also "
"create binary distributions. Depending on the platform, one of the following "
"commands can be used to do so. ::"
msgstr ""
"ソースコード配布物をうまく構築できたら、メンテナはバイナリ配布物も作成できま"
"す。プラットフォームに応じて、以下のコマンドのいずれかを使います。 ::"
