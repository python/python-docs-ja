# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2021
# 菊池 健志, 2023
# 石井明久, 2024
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-20 14:17+0000\n"
"PO-Revision-Date: 2021-06-28 00:51+0000\n"
"Last-Translator: 石井明久, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../extending/building.rst:7
msgid "Building C and C++ Extensions"
msgstr "C および C++ 拡張のビルド"

#: ../../extending/building.rst:9
msgid ""
"A C extension for CPython is a shared library (e.g. a ``.so`` file on Linux, "
"``.pyd`` on Windows), which exports an *initialization function*."
msgstr ""
"CPython の C 拡張は *初期化関数* をエクスポートした共有ライブラリ (例、 "
"Linux の ``.so`` ファイルや Windows の ``.pyd`` ファイル) です。"

#: ../../extending/building.rst:12
msgid ""
"To be importable, the shared library must be available on :envvar:"
"`PYTHONPATH`, and must be named after the module name, with an appropriate "
"extension. When using setuptools, the correct filename is generated "
"automatically."
msgstr ""
"インポートできるように、共有ライブラリは使える状態で :envvar:`PYTHONPATH` 上"
"になければならず、ファイル名をモジュール名に揃え、適切な拡張子になっていなけ"
"ればいけません。 setuptools を使っているときは、自動的に正しいファイル名が生"
"成されます。"

#: ../../extending/building.rst:16
msgid "The initialization function has the signature:"
msgstr "初期化関数のシグネチャは次のとおりです:"

#: ../../extending/building.rst:20
msgid ""
"It returns either a fully initialized module, or a :c:type:`PyModuleDef` "
"instance. See :ref:`initializing-modules` for details."
msgstr ""
"この関数は完全に初期化されたモジュールか、 :c:type:`PyModuleDef` インスタンス"
"を返します。\n"
"詳しいことは :ref:`initializing-modules` を参照してください。"

#: ../../extending/building.rst:25
msgid ""
"For modules with ASCII-only names, the function must be named "
"``PyInit_<modulename>``, with ``<modulename>`` replaced by the name of the "
"module. When using :ref:`multi-phase-initialization`, non-ASCII module names "
"are allowed. In this case, the initialization function name is "
"``PyInitU_<modulename>``, with ``<modulename>`` encoded using Python's "
"*punycode* encoding with hyphens replaced by underscores. In Python::"
msgstr ""
"名前にASCIIしか使っていないモジュールの場合、関数名は "
"``PyInit_<modulename>`` の ``<modulename>`` をモジュール名で置き換えたもので"
"なければなりません。\n"
":ref:`multi-phase-initialization` を使っているときは、モジュール名にASCII以外"
"の文字も使えます。\n"
"この場合、初期化関数の名前は ``PyInitU_<modulename>`` で、 ``<modulename>`` "
"はハイフンをアンダースコアで置き換えて Python の *punycode* エンコーディング"
"でエンコードしたものになります。\n"
"Python で書くと次のような処理になります::"

#: ../../extending/building.rst:32
msgid ""
"def initfunc_name(name):\n"
"    try:\n"
"        suffix = b'_' + name.encode('ascii')\n"
"    except UnicodeEncodeError:\n"
"        suffix = b'U_' + name.encode('punycode').replace(b'-', b'_')\n"
"    return b'PyInit' + suffix"
msgstr ""

#: ../../extending/building.rst:39
msgid ""
"It is possible to export multiple modules from a single shared library by "
"defining multiple initialization functions. However, importing them requires "
"using symbolic links or a custom importer, because by default only the "
"function corresponding to the filename is found. See the *\"Multiple modules "
"in one library\"* section in :pep:`489` for details."
msgstr ""
"1つの共有ライブラリに複数の初期化関数を定義することで、複数のモジュールをエク"
"スポートすることは可能です。\n"
"しかし、デフォルトではファイル名に対応した関数しか見付けようとしないので、複"
"数のモジュールをインポートさせるにはシンボリックリンクか独自のインポーターを"
"使う必要があります。\n"
"詳しいことは :pep:`489` の *\"Multiple modules in one library\"* 節を参照して"
"ください。"

#: ../../extending/building.rst:52
msgid "Building C and C++ Extensions with setuptools"
msgstr "setuptools による C および C++ 拡張のビルド"

#: ../../extending/building.rst:54
msgid ""
"Python 3.12 and newer no longer come with distutils. Please refer to the "
"``setuptools`` documentation at https://setuptools.readthedocs.io/en/latest/"
"setuptools.html to learn more about how build and distribute C/C++ "
"extensions with setuptools."
msgstr ""
"Python 3.12 以降には、 distutils は含まれていません。 setuptools で C/C++ 拡"
"張をビルドする方法について更に学ぶには、 https://setuptools.readthedocs.io/"
"en/latest/setuptools.html にある ``setuptools`` のドキュメントを参照してくだ"
"さい。"
