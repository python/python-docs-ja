# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# tomo, 2020
# Yusuke Miyazaki <miyazaki.dev@gmail.com>, 2021
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-14 17:03+0000\n"
"PO-Revision-Date: 2020-05-30 12:17+0000\n"
"Last-Translator: Yusuke Miyazaki <miyazaki.dev@gmail.com>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/venv.rst:6
msgid "Virtual Environments and Packages"
msgstr "仮想環境とパッケージ"

#: ../../tutorial/venv.rst:9
msgid "Introduction"
msgstr "はじめに"

#: ../../tutorial/venv.rst:11
msgid ""
"Python applications will often use packages and modules that don't come as "
"part of the standard library.  Applications will sometimes need a specific "
"version of a library, because the application may require that a particular "
"bug has been fixed or the application may be written using an obsolete "
"version of the library's interface."
msgstr ""
"Python アプリケーションはよく標準ライブラリ以外のパッケージやモジュールを利用"
"します。またアプリケーションがあるバグ修正を必要としていたり、過去のバージョ"
"ンのインターフェイスに依存しているために、ライブラリの特定のバージョンを必要"
"とすることもあります。"

#: ../../tutorial/venv.rst:17
msgid ""
"This means it may not be possible for one Python installation to meet the "
"requirements of every application.  If application A needs version 1.0 of a "
"particular module but application B needs version 2.0, then the requirements "
"are in conflict and installing either version 1.0 or 2.0 will leave one "
"application unable to run."
msgstr ""
"そのため、1つのインストールされたPythonが全てのアプリケーションの要求に対応す"
"ることは不可能です。もしアプリケーションAがあるモジュールのバージョン 1.0 を"
"要求していて、別のアプリケーションBが同じモジュールのバージョン 2.0 を要求し"
"ている場合、2つの要求は衝突していて、1.0 と 2.0 のどちらかのバージョンをイン"
"ストールしても片方のアプリケーションが動きません。"

#: ../../tutorial/venv.rst:23
msgid ""
"The solution for this problem is to create a :term:`virtual environment`, a "
"self-contained directory tree that contains a Python installation for a "
"particular version of Python, plus a number of additional packages."
msgstr ""
"この問題の解決策は :term:`仮想環境<virtual environment>` を作ることです。仮想"
"環境とは、特定のバージョンの Python と幾つかの追加パッケージを含んだ Python "
"インストールを構成するディレクトリです。"

#: ../../tutorial/venv.rst:27
msgid ""
"Different applications can then use different virtual environments. To "
"resolve the earlier example of conflicting requirements, application A can "
"have its own virtual environment with version 1.0 installed while "
"application B has another virtual environment with version 2.0. If "
"application B requires a library be upgraded to version 3.0, this will not "
"affect application A's environment."
msgstr ""
"別のアプリケーションはそれぞれ別の仮想環境を使うことができます。先の例にあっ"
"た要求の衝突を解決する場合、アプリケーションAが固有の仮想環境を持ってそこにラ"
"イブラリのバージョン 1.0 をインストールし、アプリケーションBが持つ別の仮想環"
"境にライブラリのバージョン 2.0 をインストールすることができます。そしてアプリ"
"ケーションBがライブラリのバージョンを 3.0 に更新することを要求する場合も、ア"
"プリケーションAに影響しません。"

#: ../../tutorial/venv.rst:36
msgid "Creating Virtual Environments"
msgstr "仮想環境の作成"

#: ../../tutorial/venv.rst:38
msgid ""
"The module used to create and manage virtual environments is called :mod:"
"`venv`.  :mod:`venv` will usually install the most recent version of Python "
"that you have available. If you have multiple versions of Python on your "
"system, you can select a specific Python version by running ``python3`` or "
"whichever version you want."
msgstr ""
"仮想環境の作成と管理を行うためのモジュールが :mod:`venv` です。 :mod:`venv` "
"は通常利用可能なもっとも新しいバージョンの Python をインストールします。複数"
"のバージョンの Python がインストールされている場合、 ``python3`` のように利用"
"したいバージョンを指定して実行することで Python バージョンを選択できます。"

#: ../../tutorial/venv.rst:44
msgid ""
"To create a virtual environment, decide upon a directory where you want to "
"place it, and run the :mod:`venv` module as a script with the directory "
"path::"
msgstr ""
"仮想環境を作るには、仮想環境を置くディレクトリを決めて、 そのディレクトリのパ"
"スを指定して、 :mod:`venv` をスクリプトとして実行します::"

#: ../../tutorial/venv.rst:49
msgid ""
"This will create the ``tutorial-env`` directory if it doesn't exist, and "
"also create directories inside it containing a copy of the Python "
"interpreter, the standard library, and various supporting files."
msgstr ""
"これは ``tutorial-env`` ディレクトリがなければ作成して、その中に Python イン"
"タプリタ、標準ライブラリ、その他関連するファイルを含むサブディレクトリを作り"
"ます。"

#: ../../tutorial/venv.rst:53
msgid ""
"A common directory location for a virtual environment is ``.venv``. This "
"name keeps the directory typically hidden in your shell and thus out of the "
"way while giving it a name that explains why the directory exists. It also "
"prevents clashing with ``.env`` environment variable definition files that "
"some tooling supports."
msgstr ""
"仮想環境の一般的なディレクトリの場所は ``.venv`` です。この名前は、通常はシェ"
"ルで隠されているため、ディレクトリが存在する理由を説明する名前を付けても、邪"
"魔にはなりません。また、一部のツールでサポートされている ``.env`` 環境変数定"
"義ファイルによるクラッシュも防止します。"

#: ../../tutorial/venv.rst:59
msgid "Once you've created a virtual environment, you may activate it."
msgstr "仮想環境を作ったら、それを有効化する必要があります。"

#: ../../tutorial/venv.rst:61
msgid "On Windows, run::"
msgstr "Windows の場合::"

#: ../../tutorial/venv.rst:65
msgid "On Unix or MacOS, run::"
msgstr "Unix や Mac OS の場合::"

#: ../../tutorial/venv.rst:69
msgid ""
"(This script is written for the bash shell.  If you use the :program:`csh` "
"or :program:`fish` shells, there are alternate ``activate.csh`` and "
"``activate.fish`` scripts you should use instead.)"
msgstr ""
"(このスクリプトは bash shell で書かれています。 :program:`csh` や :program:"
"`fish` を利用している場合、代わりに利用できる ``activate.csh`` と ``activate."
"fish`` スクリプトがあります。)"

#: ../../tutorial/venv.rst:74
msgid ""
"Activating the virtual environment will change your shell's prompt to show "
"what virtual environment you're using, and modify the environment so that "
"running ``python`` will get you that particular version and installation of "
"Python. For example:"
msgstr ""
"仮想環境を有効化すると、シェルのプロンプトに利用中の仮想環境が表示されるよう"
"になり、``python`` を実行するとその仮想環境の Python を実行するようになりま"
"す::"

#: ../../tutorial/venv.rst:93
msgid "Managing Packages with pip"
msgstr "pip を使ったパッケージ管理"

#: ../../tutorial/venv.rst:95
msgid ""
"You can install, upgrade, and remove packages using a program called :"
"program:`pip`.  By default ``pip`` will install packages from the Python "
"Package Index, <https://pypi.org>.  You can browse the Python Package Index "
"by going to it in your web browser."
msgstr ""
" :program:`pip` と呼ばれるプログラムでパッケージをインストール、アップグレー"
"ド、削除することができます。デフォルトでは ``pip`` は Python Package Index "
"<https://pypi.org> からパッケージをインストールします。ブラウザを使って "
"Python Package Index を閲覧することができます。"

#: ../../tutorial/venv.rst:100
msgid ""
"``pip`` has a number of subcommands: \"install\", \"uninstall\", \"freeze\", "
"etc.  (Consult the :ref:`installing-index` guide for complete documentation "
"for ``pip``.)"
msgstr ""
"``pip`` は \"install\" 、 \"uninstall\" 、 \"freeze\" など、いくつかのサブコ"
"マンドを持っています。 (``pip`` の完全なドキュメントは :ref:`installing-"
"index` ガイドを参照してください。)"

#: ../../tutorial/venv.rst:104
msgid ""
"You can install the latest version of a package by specifying a package's "
"name:"
msgstr ""
"パッケージ名を指定してそのパッケージの最新版をインストールすることができま"
"す::"

#: ../../tutorial/venv.rst:115
msgid ""
"You can also install a specific version of a package by giving the package "
"name  followed by ``==`` and the version number:"
msgstr ""
"パッケージ名のあとに ``==`` とバージョン番号を付けることで、特定のバージョン"
"のパッケージをインストールすることもできます::"

#: ../../tutorial/venv.rst:126
msgid ""
"If you re-run this command, ``pip`` will notice that the requested version "
"is already installed and do nothing.  You can supply a different version "
"number to get that version, or you can run ``pip install --upgrade`` to "
"upgrade the package to the latest version:"
msgstr ""
"同じコマンドを再び実行した場合、``pip`` は要求されたバージョンがインストール"
"済みだと表示して何もしません。別のバージョン番号を指定すればそのバージョンを"
"インストールしますし、``pip install --upgrade`` を実行すればそのパッケージを"
"最新版に更新します::"

#: ../../tutorial/venv.rst:141
msgid ""
"``pip uninstall`` followed by one or more package names will remove the "
"packages from the virtual environment."
msgstr "``pip uninstall`` コマンドに削除するパッケージ名を1つ以上指定します。"

#: ../../tutorial/venv.rst:144
msgid "``pip show`` will display information about a particular package:"
msgstr "``pip show`` は指定されたパッケージの情報を表示します::"

#: ../../tutorial/venv.rst:161
msgid ""
"``pip list`` will display all of the packages installed in the virtual "
"environment:"
msgstr ""
"``pip list`` は仮想環境にインストールされた全てのパッケージを表示します::"

#: ../../tutorial/venv.rst:173
msgid ""
"``pip freeze`` will produce a similar list of the installed packages, but "
"the output uses the format that ``pip install`` expects. A common convention "
"is to put this list in a ``requirements.txt`` file:"
msgstr ""
"``pip freeze`` はインストールされたパッケージ一覧を、``pip install`` が解釈す"
"るフォーマットで生成します。一般的な慣習として、このリストを ``requirements."
"txt`` というファイルに保存します::"

#: ../../tutorial/venv.rst:185
msgid ""
"The ``requirements.txt`` can then be committed to version control and "
"shipped as part of an application.  Users can then install all the necessary "
"packages with ``install -r``:"
msgstr ""
"``requirements.txt`` をバージョン管理システムにコミットして、アプリケーション"
"の一部として配布することができます。ユーザーは必要なパッケージを ``install -"
"r`` でインストールできます::"

#: ../../tutorial/venv.rst:202
msgid ""
"``pip`` has many more options.  Consult the :ref:`installing-index` guide "
"for complete documentation for ``pip``.  When you've written a package and "
"want to make it available on the Python Package Index, consult the :ref:"
"`distributing-index` guide."
msgstr ""
"``pip`` にはたくさんのオプションがあります。 ``pip`` の完全なドキュメントは :"
"ref:`installing-index` を参照してください。パッケージを作成してそれを Python "
"Package Index で公開したい場合、 :ref:`distributing-index` ガイドを参照してく"
"ださい。"
