# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Atsuo Ishimoto <atsuoishimoto@gmail.com>, 2019
# tomo, 2019
# Yuta Kanzawa, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 16:02+0000\n"
"PO-Revision-Date: 2019-09-01 02:41+0000\n"
"Last-Translator: Yuta Kanzawa, 2019\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/interpreter.rst:5
msgid "Using the Python Interpreter"
msgstr "Python インタプリタを使う"

#: ../../tutorial/interpreter.rst:11
msgid "Invoking the Interpreter"
msgstr "インタプリタを起動する"

#: ../../tutorial/interpreter.rst:13
msgid ""
"The Python interpreter is usually installed as :file:`/usr/local/bin/"
"python3.7` on those machines where it is available; putting :file:`/usr/"
"local/bin` in your Unix shell's search path makes it possible to start it by "
"typing the command:"
msgstr ""
"Python インタプリタは、それが使えるマシン上では通常 :file:`/usr/local/bin/"
"python3.7` としてインストールされています; Unix シェルの検索パスに :file:`/"
"usr/local/bin` を入れることによって、次のコマンドをタイプしてインタプリタを開"
"始することができます:"

#: ../../tutorial/interpreter.rst:21
msgid ""
"to the shell. [#]_ Since the choice of the directory where the interpreter "
"lives is an installation option, other places are possible; check with your "
"local Python guru or system administrator.  (E.g., :file:`/usr/local/python` "
"is a popular alternative location.)"
msgstr ""
"[#]_ どのディレクトリに Python インタプリタをインストールするかはインストール"
"時に選択できるので、インタプリタは他のディレクトリにあるかもしれません; 身近"
"な Python に詳しい人か、システム管理者に聞いてみてください。 (例えば、その他"
"の場所としては :file:`/usr/local/python` が一般的です。)"

#: ../../tutorial/interpreter.rst:26
msgid ""
"On Windows machines where you have installed Python from the :ref:`Microsoft "
"Store <windows-store>`, the :file:`python3.7` command will be available. If "
"you have the :ref:`py.exe launcher <launcher>` installed, you can use the :"
"file:`py` command. See :ref:`setting-envvars` for other ways to launch "
"Python."
msgstr ""
":ref:`Microsoft ストア <windows-store>` からのインストールを行った Windows マ"
"シンでは、 :file:`python3.7` コマンドが利用可能です。\n"
":ref:`py.exe ランチャ <launcher>` をインストールした場合、 :file:`py` コマン"
"ドが使えます。\n"
"Python を起動する他の方法については :ref:`setting-envvars` を参照してくださ"
"い。"

#: ../../tutorial/interpreter.rst:31
msgid ""
"Typing an end-of-file character (:kbd:`Control-D` on Unix, :kbd:`Control-Z` "
"on Windows) at the primary prompt causes the interpreter to exit with a zero "
"exit status.  If that doesn't work, you can exit the interpreter by typing "
"the following command: ``quit()``."
msgstr ""
"ファイル終端文字 (Unixでは :kbd:`Control-D` 、DOS や Windows では :kbd:"
"`Control-Z`) を一次プロンプト (訳注: '>>>' のこと) に入力すると、インタプリタ"
"が終了ステータス 0 で終了します。もしこの操作がうまく働かないなら、コマンド: "
"``quit()`` と入力すればインタプリタを終了できます。"

#: ../../tutorial/interpreter.rst:36
msgid ""
"The interpreter's line-editing features include interactive editing, history "
"substitution and code completion on systems that support the `GNU Readline "
"<https://tiswww.case.edu/php/chet/readline/rltop.html>`_ library. Perhaps "
"the quickest check to see whether command line editing is supported is "
"typing :kbd:`Control-P` to the first Python prompt you get.  If it beeps, "
"you have command line editing; see Appendix :ref:`tut-interacting` for an "
"introduction to the keys.  If nothing appears to happen, or if ``^P`` is "
"echoed, command line editing isn't available; you'll only be able to use "
"backspace to remove characters from the current line."
msgstr ""
"`GNU Readline <https://tiswww.case.edu/php/chet/readline/rltop.html>`_ ライブ"
"ラリをサポートしているシステム上では、対話的行編集やヒストリ置換、コード補完"
"のインタプリタの行編集機能が利用できます。コマンドライン編集機能がサポートさ"
"れているかを最も手っ取り早く調べる方法は、おそらく最初に表示された Python プ"
"ロンプトに :kbd:`Control-P` を入力してみることでしょう。ビープ音が鳴るなら、"
"コマンドライン編集機能があります。編集キーについての解説は付録 :ref:`tut-"
"interacting` を参照してください。何も起こらないように見えるか、 ``^P`` がエ"
"コーバックされるなら、コマンドライン編集機能は利用できません。この場合、現在"
"編集中の行から文字を削除するにはバックスペースを使うしかありません。"

#: ../../tutorial/interpreter.rst:46
msgid ""
"The interpreter operates somewhat like the Unix shell: when called with "
"standard input connected to a tty device, it reads and executes commands "
"interactively; when called with a file name argument or with a file as "
"standard input, it reads and executes a *script* from that file."
msgstr ""
"インタプリタは Unix シェルと同じように使えます。標準入力が端末に接続された状"
"態では、コマンドを対話的に読み込んで実行します。ファイル名を引数に指定する"
"か、``python3 < filename`` のように標準入力ファイルとして指定すると、インタプ"
"リタはファイルから *スクリプト* を読み込んで実行します。"

#: ../../tutorial/interpreter.rst:51
msgid ""
"A second way of starting the interpreter is ``python -c command [arg] ...``, "
"which executes the statement(s) in *command*, analogous to the shell's :"
"option:`-c` option.  Since Python statements often contain spaces or other "
"characters that are special to the shell, it is usually advised to quote "
"*command* in its entirety with single quotes."
msgstr ""
"インタプリタを ``python -c command [arg] ...`` のように起動する方法もありま"
"す。この形式では、シェルの :option:`-c` オプションと同じように、 *command* に"
"指定した文を実行します。 Python 文には、スペースなどのシェルにとって特殊な意"
"味をもつ文字がしばしば含まれるので、 *command* 全体をシングルクォート(訳注: "
"``'``)で囲っておいたほうが良いでしょう。"

#: ../../tutorial/interpreter.rst:57
msgid ""
"Some Python modules are also useful as scripts.  These can be invoked using "
"``python -m module [arg] ...``, which executes the source file for *module* "
"as if you had spelled out its full name on the command line."
msgstr ""
"Python のモジュールには、スクリプトとしても便利に使えるものがあります。 "
"``python -m module [arg] ...`` のように起動すると、 *module* のソースファイル"
"を、フルパスを指定して起動したかのように実行できます。"

#: ../../tutorial/interpreter.rst:61
msgid ""
"When a script file is used, it is sometimes useful to be able to run the "
"script and enter interactive mode afterwards.  This can be done by passing :"
"option:`-i` before the script."
msgstr ""
"スクリプトファイルを使用する場合、スクリプトの実行が完了した後、そのまま対話"
"モードに入れると便利なことがあります。これには :option:`-i` をスクリプト名の"
"前に追加します。"

#: ../../tutorial/interpreter.rst:65
msgid "All command line options are described in :ref:`using-on-general`."
msgstr ""
"全てのコマンドラインオプションは :ref:`using-on-general` で説明されています。"

#: ../../tutorial/interpreter.rst:71
msgid "Argument Passing"
msgstr "引数の受け渡し"

#: ../../tutorial/interpreter.rst:73
msgid ""
"When known to the interpreter, the script name and additional arguments "
"thereafter are turned into a list of strings and assigned to the ``argv`` "
"variable in the ``sys`` module.  You can access this list by executing "
"``import sys``.  The length of the list is at least one; when no script and "
"no arguments are given, ``sys.argv[0]`` is an empty string.  When the script "
"name is given as ``'-'`` (meaning  standard input), ``sys.argv[0]`` is set "
"to ``'-'``.  When :option:`-c` *command* is used, ``sys.argv[0]`` is set to "
"``'-c'``.  When :option:`-m` *module* is used, ``sys.argv[0]``  is set to "
"the full name of the located module.  Options found after  :option:`-c` "
"*command* or :option:`-m` *module* are not consumed  by the Python "
"interpreter's option processing but left in ``sys.argv`` for  the command or "
"module to handle."
msgstr ""
"スクリプト名と引数を指定してインタプリタを起動した場合、スクリプト名やスクリ"
"プト名以後に指定した引数は、文字列のリストに変換されて ``sys`` モジュールの "
"``argv`` 変数に格納されます。 ``import sys`` とすることでこのリストにアクセス"
"できます。 \n"
"``sys.argv`` には少なくとも一つ要素が入っています。スクリプト名も引数も指定し"
"なければ、 ``sys.argv[0]`` は空の文字列になります。\n"
"スクリプト名の代わりに ``'-'`` (標準入力を意味します) を指定すると、 ``sys."
"argv[0]`` は ``'-'`` になります。\n"
":option:`-c`  *command* を使うと、 ``sys.argv[0]`` は ``'-c'`` になります。 :"
"option:`-m` *module* を使った場合、 ``sys.argv[0]`` はモジュールのフルパスに"
"なります。 Python インタープリタは、:option:`-c` *command* や :option:`-m` "
"*module* の後ろに指定したオプションは無視します。無視された引数は、``sys."
"argv`` を使って *command* や *module* から参照できます。"

#: ../../tutorial/interpreter.rst:89
msgid "Interactive Mode"
msgstr "対話モード"

#: ../../tutorial/interpreter.rst:91
msgid ""
"When commands are read from a tty, the interpreter is said to be in "
"*interactive mode*.  In this mode it prompts for the next command with the "
"*primary prompt*, usually three greater-than signs (``>>>``); for "
"continuation lines it prompts with the *secondary prompt*, by default three "
"dots (``...``). The interpreter prints a welcome message stating its version "
"number and a copyright notice before printing the first prompt:"
msgstr ""
"インタプリタが命令を端末 (tty) やコマンドプロンプトから読み取っている場合、イ"
"ンタプリタは *対話モード (interactive mode)* で動作しているといいます。\n"
"このモードでは、インタプリタは *一次プロンプト (primary prompt)* を表示して、"
"ユーザにコマンドを入力するよう促します。一次プロンプトは普通、三つの「大なり"
"記号」 (``>>>``) です。継続行では、インタプリタは *二次プロンプト (secondary "
"prompt)* を表示します。二次プロンプトは、デフォルトでは三つのドット (``..."
"``) です。\n"
"インタプリタは、最初のプロンプトを出す前にバージョン番号と著作権表示から始ま"
"る起動メッセージを出力します:"

#: ../../tutorial/interpreter.rst:108
msgid ""
"Continuation lines are needed when entering a multi-line construct. As an "
"example, take a look at this :keyword:`if` statement::"
msgstr ""
"継続行は、複数行の構文を入力するときに使います。例えば、 :keyword:`if` 文は継"
"続行を使用します ::"

#: ../../tutorial/interpreter.rst:118
msgid "For more on interactive mode, see :ref:`tut-interac`."
msgstr "対話モードについての詳細は :ref:`tut-interac` を参照してください。"

#: ../../tutorial/interpreter.rst:124
msgid "The Interpreter and Its Environment"
msgstr "インタプリタとその環境"

#: ../../tutorial/interpreter.rst:130
msgid "Source Code Encoding"
msgstr "ソースコードの文字コード"

#: ../../tutorial/interpreter.rst:132
msgid ""
"By default, Python source files are treated as encoded in UTF-8.  In that "
"encoding, characters of most languages in the world can be used "
"simultaneously in string literals, identifiers and comments --- although the "
"standard library only uses ASCII characters for identifiers, a convention "
"that any portable code should follow.  To display all these characters "
"properly, your editor must recognize that the file is UTF-8, and it must use "
"a font that supports all the characters in the file."
msgstr ""
"デフォルトでは、Python のソースコードは UTF-8 でエンコードされているものとし"
"て扱われます。UTF-8 では、世界中のほとんどの言語の文字を、同時に文字列リテラ"
"ル、識別子、コメントなどに書けます。--- ただし、標準ライブラリは識別子に "
"ASCII 文字のみを利用していて、その他のポータブルなコードもその慣習に従うべき"
"です。それらの文字を正しく表示するためには、エディターはそのファイルが UTF-8 "
"である事を識別して、そのファイルに含まれている文字を全てサポートしたフォント"
"を使わなければなりません。"

#: ../../tutorial/interpreter.rst:140
msgid ""
"To declare an encoding other than the default one, a special comment line "
"should be added as the *first* line of the file.  The syntax is as follows::"
msgstr ""
"デフォルトエンコーディング以外のエンコーディングを使用するには、ファイルの *"
"先頭* の行に特別なコメントを追加しなければなりません。書式は以下の通りです::"

#: ../../tutorial/interpreter.rst:145
msgid "where *encoding* is one of the valid :mod:`codecs` supported by Python."
msgstr ""
"*encoding* には、Python が :mod:`codecs` でサポートしている有効なエンコーディ"
"ングを指定します。"

#: ../../tutorial/interpreter.rst:147
msgid ""
"For example, to declare that Windows-1252 encoding is to be used, the first "
"line of your source code file should be::"
msgstr ""
"例えば、Windows-1252 エンコーディングを使用するには、ソースコードファイルの先"
"頭行は下記のようにします::"

#: ../../tutorial/interpreter.rst:152
msgid ""
"One exception to the *first line* rule is when the source code starts with "
"a :ref:`UNIX \"shebang\" line <tut-scripts>`.  In this case, the encoding "
"declaration should be added as the second line of the file.  For example::"
msgstr ""
"ソースコードが :ref:`UNIX \"shebang\" 行 <tut-scripts>` で始まる場合には、*先"
"頭行* のルールは当てはまりません。\n"
"この場合には、エンコーディングの宣言はファイルの2行目に追加します。\n"
"例えば以下のようになります::"

#: ../../tutorial/interpreter.rst:160
msgid "Footnotes"
msgstr "脚注"

#: ../../tutorial/interpreter.rst:161
msgid ""
"On Unix, the Python 3.x interpreter is by default not installed with the "
"executable named ``python``, so that it does not conflict with a "
"simultaneously installed Python 2.x executable."
msgstr ""
"Unixでは、Python 3.x インタープリタの実行ファイルはデフォルトでは ``python`` "
"という名前ではインストールされません。同時にインストールされた Python 2.x 実"
"行ファイルと衝突させないためです。"
