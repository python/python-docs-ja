# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# tomo, 2018
# 秘湯 <xwhhsprings@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/interpreter.rst:5
msgid "Using the Python Interpreter"
msgstr "Python インタプリタを使う"

#: ../../tutorial/interpreter.rst:11
msgid "Invoking the Interpreter"
msgstr "インタプリタを起動する"

#: ../../tutorial/interpreter.rst:13
msgid ""
"The Python interpreter is usually installed as :file:`/usr/local/bin/python` "
"on those machines where it is available; putting :file:`/usr/local/bin` in "
"your Unix shell's search path makes it possible to start it by typing the "
"command ::"
msgstr ""
"Python インタプリタは、それが使えるマシン上では通常 :file:`/usr/local/bin/"
"python` としてインストールされています; Unix シェルの検索パスに :file:`/usr/"
"local/bin` を入れることによって、次のコマンドをタイプしてインタプリタを開始す"
"ることができます ::"

#: ../../tutorial/interpreter.rst:19
msgid ""
"to the shell.  Since the choice of the directory where the interpreter lives "
"is an installation option, other places are possible; check with your local "
"Python guru or system administrator.  (E.g., :file:`/usr/local/python` is a "
"popular alternative location.)"
msgstr ""
"とコマンドを入力すれば使えるようになります。どのディレクトリに Python インタ"
"プリタをインストールするかはインストール時に選択できるので、インタプリタは他"
"のディレクトリにあるかもしれません; 身近な Python に詳しい人か、システム管理"
"者に聞いてみてください。 (例えば、その他の場所としては :file:`/usr/local/"
"python` が一般的です。)"

#: ../../tutorial/interpreter.rst:24
msgid ""
"On Windows machines, the Python installation is usually placed in :file:`C:\\"
"\\Python27`, though you can change this when you're running the installer.  "
"To add this directory to your path,  you can type the following command into "
"the command prompt in a DOS box::"
msgstr ""
"Windows では、 Python は大抵の場合 :file:`C:\\\\Python27` にインストールされ"
"ますが、インストーラ実行時に変更することができます。このディレクトリをあなた"
"のパスに追加するには、以下のコマンドをコマンドプロンプトで実行してくださ"
"い。 ::"

#: ../../tutorial/interpreter.rst:31
msgid ""
"Typing an end-of-file character (:kbd:`Control-D` on Unix, :kbd:`Control-Z` "
"on Windows) at the primary prompt causes the interpreter to exit with a zero "
"exit status.  If that doesn't work, you can exit the interpreter by typing "
"the following command: ``quit()``."
msgstr ""
"ファイル終端文字 (Unixでは :kbd:`Control-D` 、DOS や Windows では :kbd:"
"`Control-Z`) を一次プロンプト (訳注: '>>>' のこと) に入力すると、インタプリタ"
"が終了ステータス 0 で終了します。もしこの操作がうまく働かないなら、コマンド: "
"``quit()`` と入力すればインタプリタを終了できます。"

#: ../../tutorial/interpreter.rst:36
msgid ""
"The interpreter's line-editing features usually aren't very sophisticated.  "
"On Unix, whoever installed the interpreter may have enabled support for the "
"GNU readline library, which adds more elaborate interactive editing and "
"history features. Perhaps the quickest check to see whether command line "
"editing is supported is typing :kbd:`Control-P` to the first Python prompt "
"you get.  If it beeps, you have command line editing; see Appendix :ref:`tut-"
"interacting` for an introduction to the keys.  If nothing appears to happen, "
"or if ``^P`` is echoed, command line editing isn't available; you'll only be "
"able to use backspace to remove characters from the current line."
msgstr ""
"通常、インタプリタの行編集機能は、あまり洗練されたものではありません。 Unix "
"では、インタプリタをインストールした誰かが GNU readline ライブラリのサポート"
"を有効にしていれば、洗練された対話的行編集やヒストリ機能が利用できます。コマ"
"ンドライン編集機能がサポートされているかを最も手っ取り早く調べる方法は、おそ"
"らく最初に表示された Python プロンプトに :kbd:`Control-P` を入力してみること"
"でしょう。ビープ音が鳴るなら、コマンドライン編集機能があります。編集キーにつ"
"いての解説は付録 :ref:`tut-interacting` を参照してください。何も起こらないよ"
"うに見えるか、 ``^P`` がエコーバックされるなら、コマンドライン編集機能は利用"
"できません。この場合、現在編集中の行から文字を削除するにはバックスペースを使"
"うしかありません。"

#: ../../tutorial/interpreter.rst:46
msgid ""
"The interpreter operates somewhat like the Unix shell: when called with "
"standard input connected to a tty device, it reads and executes commands "
"interactively; when called with a file name argument or with a file as "
"standard input, it reads and executes a *script* from that file."
msgstr ""
"インタプリタはさながら Unix シェルのように働きます。標準入力が端末に接続され"
"た状態で呼び出されると、コマンドを対話的に読み込んで実行します。ファイル名を"
"引数にしたり、標準入力からファイルを入力すると、インタプリタはファイルから *"
"スクリプト* を読み込んで実行します。"

#: ../../tutorial/interpreter.rst:51
msgid ""
"A second way of starting the interpreter is ``python -c command [arg] ...``, "
"which executes the statement(s) in *command*, analogous to the shell's :"
"option:`-c` option.  Since Python statements often contain spaces or other "
"characters that are special to the shell, it is usually advised to quote "
"*command* in its entirety with single quotes."
msgstr ""
"インタプリタを起動する第二の方法は ``python -c command [arg] ...`` です。この"
"形式では、シェルの :option:`-c` オプションと同じように、 *command* に指定した"
"文を実行します。 Python 文には、スペースなどのシェルにとって特殊な意味をもつ"
"文字がしばしば含まれるので、 *command* 全体をシングルクォート(訳注: ``'``)で"
"囲っておいたほうが良いでしょう。"

#: ../../tutorial/interpreter.rst:57
msgid ""
"Some Python modules are also useful as scripts.  These can be invoked using "
"``python -m module [arg] ...``, which executes the source file for *module* "
"as if you had spelled out its full name on the command line."
msgstr ""
"Python のモジュールには、スクリプトとしても便利に使えるものがあります。 "
"``python -m module [arg] ...`` のようにすると、 *module* のソースファイルを、"
"フルパスを指定して起動したかのように実行できます。"

#: ../../tutorial/interpreter.rst:61
msgid ""
"When a script file is used, it is sometimes useful to be able to run the "
"script and enter interactive mode afterwards.  This can be done by passing :"
"option:`-i` before the script."
msgstr ""
"スクリプトファイルが使われた場合、スクリプトを走らせて、そのまま対話モードに"
"入れると便利なことがあります。これには :option:`-i` をスクリプトの前に追加し"
"ます。"

#: ../../tutorial/interpreter.rst:65
msgid "All command-line options are described in :ref:`using-on-general`."
msgstr ""
"全てのコマンドラインオプションは :ref:`using-on-general` で説明されています。"

#: ../../tutorial/interpreter.rst:71
msgid "Argument Passing"
msgstr "引数の受け渡し"

#: ../../tutorial/interpreter.rst:73
msgid ""
"When known to the interpreter, the script name and additional arguments "
"thereafter are turned into a list of strings and assigned to the ``argv`` "
"variable in the ``sys`` module.  You can access this list by executing "
"``import sys``.  The length of the list is at least one; when no script and "
"no arguments are given, ``sys.argv[0]`` is an empty string.  When the script "
"name is given as ``'-'`` (meaning  standard input), ``sys.argv[0]`` is set "
"to ``'-'``.  When :option:`-c` *command* is used, ``sys.argv[0]`` is set to "
"``'-c'``.  When :option:`-m` *module* is used, ``sys.argv[0]``  is set to "
"the full name of the located module.  Options found after  :option:`-c` "
"*command* or :option:`-m` *module* are not consumed  by the Python "
"interpreter's option processing but left in ``sys.argv`` for  the command or "
"module to handle."
msgstr ""
"スクリプト名と引数を指定してインタプリタを起動した場合、スクリプト名やスクリ"
"プト名以後に指定した引数は、文字列のリストに変換されて ``sys`` モジュールの "
"``argv`` 変数に格納されます。 ``import sys`` することでこのリストにアクセスす"
"ることができます。 ``sys.argv`` には少なくとも一つ要素が入っています。スクリ"
"プト名も引数も指定しなければ ``sys.argv[0]`` は空の文字列になります。スクリプ"
"ト名の代わりに ``'-'`` (標準入力を意味します) を指定すると、 ``sys.argv[0]`` "
"は ``'-'`` になります。 :option:`-c`  *command* を使うと、 ``sys.argv[0]`` "
"は ``'-c'`` になります。 :option:`-m` *module* を使った場合、 ``sys."
"argv[0]`` はモジュールのフルパスになります。 :option:`-c` *command* や :"
"option:`-m` *module* の後ろにオプションを指定した場合、 Python インタプリタ自"
"体はこれらの引数を処理せず、 ``sys.argv`` を介して *command* や *module* から"
"扱えるようになります。"

#: ../../tutorial/interpreter.rst:89
msgid "Interactive Mode"
msgstr "対話モード"

#: ../../tutorial/interpreter.rst:91
msgid ""
"When commands are read from a tty, the interpreter is said to be in "
"*interactive mode*.  In this mode it prompts for the next command with the "
"*primary prompt*, usually three greater-than signs (``>>>``); for "
"continuation lines it prompts with the *secondary prompt*, by default three "
"dots (``...``). The interpreter prints a welcome message stating its version "
"number and a copyright notice before printing the first prompt:"
msgstr ""
"インタプリタが命令を端末 (tty) やコマンドプロンプトから読み取っている場合、イ"
"ンタプリタは *対話モード (interactive mode)* で動作しているといいます。この"
"モードでは、インタプリタは *一次プロンプト (primary prompt)* を表示して、ユー"
"ザにコマンドを入力するよう促します。一次プロンプトは普通、三つの「大なり記"
"号」 (``>>>``) です。一つの入力が次の行まで続く (行継続: continuation line を"
"行う) 場合、インタプリタは *二次プロンプト (secondary prompt)* を表示します。"
"二次プロンプトは、デフォルトでは三つのドット (``...``) です。インタプリタは、"
"最初のプロンプトを出す前にバージョン番号と著作権表示から始まる起動メッセージ"
"を出力します:"

#: ../../tutorial/interpreter.rst:105
msgid ""
"Continuation lines are needed when entering a multi-line construct. As an "
"example, take a look at this :keyword:`if` statement::"
msgstr ""
"行継続は、例えば以下の :keyword:`if` 文のように、複数の行からなる構文を入力す"
"るときに必要です::"

#: ../../tutorial/interpreter.rst:115
msgid "For more on interactive mode, see :ref:`tut-interac`."
msgstr "対話モードについての詳細は :ref:`tut-interac` を参照してください。"

#: ../../tutorial/interpreter.rst:121
msgid "The Interpreter and Its Environment"
msgstr "インタプリタとその環境"

#: ../../tutorial/interpreter.rst:127
msgid "Source Code Encoding"
msgstr "ソースコードの文字コード"

#: ../../tutorial/interpreter.rst:129
msgid ""
"By default, Python source files are treated as encoded in ASCII. To declare "
"an encoding other than the default one, a special comment line should be "
"added as the *first* line of the file.  The syntax is as follows::"
msgstr ""
"デフォルトでは、Python のソースコードは UTF-8 でエンコードされているものとし"
"て扱われます。\n"
"デフォルトエンコーディング以外のエンコーディングを使用するには、ファイルの *"
"先頭* の行に特別なコメントを追加しなければなりません。\n"
"書式は以下の通りです::"

#: ../../tutorial/interpreter.rst:135
msgid "where *encoding* is one of the valid :mod:`codecs` supported by Python."
msgstr ""
"*encoding* には、Python が :mod:`codecs` でサポートしている有効なエンコーディ"
"ングを指定します。"

#: ../../tutorial/interpreter.rst:137
msgid ""
"For example, to declare that Windows-1252 encoding is to be used, the first "
"line of your source code file should be::"
msgstr ""
"例えば、Windows-1252 エンコーディングを使用するには、ソースコードファイルの先"
"頭行は下記のとおりとなります::"

#: ../../tutorial/interpreter.rst:142
msgid ""
"One exception to the *first line* rule is when the source code starts with "
"a :ref:`UNIX \"shebang\" line <tut-scripts>`.  In this case, the encoding "
"declaration should be added as the second line of the file.  For example::"
msgstr ""
"*先頭行* のルールは、:ref:`UNIX \"shebang\" line <tut-script>` でソースコード"
"が始まる場合には当てはまりません。\n"
"この場合には、エンコーディングの宣言はファイルの２行目に追加します。\n"
"例えば以下のようになります::"
