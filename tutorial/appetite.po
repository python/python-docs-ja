# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Yusuke Miyazaki <miyazaki.dev@gmail.com>, 2020
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2020-08-18 10:21+0000\n"
"Last-Translator: Yusuke Miyazaki <miyazaki.dev@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/appetite.rst:5
msgid "Whetting Your Appetite"
msgstr "やる気を高めよう"

#: ../../tutorial/appetite.rst:7
msgid ""
"If you do much work on computers, eventually you find that there's some task "
"you'd like to automate.  For example, you may wish to perform a search-and-"
"replace over a large number of text files, or rename and rearrange a bunch "
"of photo files in a complicated way. Perhaps you'd like to write a small "
"custom database, or a specialized GUI application, or a simple game."
msgstr ""
"コンピュータを使って様々な作業をしていたら、自動化したい作業が出てくるでしょ"
"う。たとえば、たくさんのテキストファイルで検索-置換操作を行いたい、大量の写真"
"ファイルを込み入ったやりかたでリネームまたは整理したいといったものです。"
"ひょっとすると、小さなカスタムデータベースや、何かに特化したGUIアプリケーショ"
"ン、シンプルなゲームを作りたいかもしれません。"

#: ../../tutorial/appetite.rst:13
msgid ""
"If you're a professional software developer, you may have to work with "
"several C/C++/Java libraries but find the usual write/compile/test/re-"
"compile cycle is too slow.  Perhaps you're writing a test suite for such a "
"library and find writing the testing code a tedious task.  Or maybe you've "
"written a program that could use an extension language, and you don't want "
"to design and implement a whole new language for your application."
msgstr ""
"もしあなたがプロのソフト開発者なら、C/C++/Java ライブラリを扱う必要があって、"
"通常の write/compile/test/re-compile サイクルが遅すぎると感じるかもしれませ"
"ん。ひょっとするとそのようなライブラリのテストスイートを書いていて、テスト用"
"のコードを書くのにうんざりしているかもしれません。拡張言語を使えるプログラム"
"を書いていて、アプリケーションのために新しい言語一式の設計と実装をしたくない"
"と思っているかもしれません。"

#: ../../tutorial/appetite.rst:20
msgid "Python is just the language for you."
msgstr "Pythonはそんなあなたのための言語です。"

#: ../../tutorial/appetite.rst:22
msgid ""
"You could write a Unix shell script or Windows batch files for some of these "
"tasks, but shell scripts are best at moving around files and changing text "
"data, not well-suited for GUI applications or games. You could write a C/C++/"
"Java program, but it can take a lot of development time to get even a first-"
"draft program.  Python is simpler to use, available on Windows, Mac OS X, "
"and Unix operating systems, and will help you get the job done more quickly."
msgstr ""
"それらの作業の幾つかは、Unix シェルスクリプトや Windows バッチファイルで書く"
"こともできますが、シェルスクリプトはファイル操作やテキストデータの操作には向"
"いているもののGUIアプリケーションやゲームにはむいていません。C/C++/Java プロ"
"グラムを書くこともできますが、最初の試し書きにすらかなりの時間がかかってしま"
"います。Pythonは簡単に利用でき、Windows、Mac OS X、そして Unix オペレーティン"
"グシステムで動作し、あなたの作業を素早く行う助けになるでしょう。"

#: ../../tutorial/appetite.rst:29
msgid ""
"Python is simple to use, but it is a real programming language, offering "
"much more structure and support for large programs than shell scripts or "
"batch files can offer.  On the other hand, Python also offers much more "
"error checking than C, and, being a *very-high-level language*, it has high-"
"level data types built in, such as flexible arrays and dictionaries.  "
"Because of its more general data types Python is applicable to a much larger "
"problem domain than Awk or even Perl, yet many things are at least as easy "
"in Python as in those languages."
msgstr ""
"Python は簡単に利用できますが、本物のプログラミング言語であり、シェルスクリプ"
"トやバッチファイルで提供されるよりもたくさんの、大規模プログラム向けの構造や"
"サポートを提供しています。一方、Python は C よりたくさんのエラーチェックを提"
"供しており、*超高級言語(very-high-level language)* であり、可変長配列や辞書な"
"どの高級な型を組込みで持っています。そのような型は一般的なため、Python は "
"Awk や Perl が扱うものより (多くの場合、少なくともそれらの言語と同じくらい簡"
"単に)大規模な問題に利用できます。"

#: ../../tutorial/appetite.rst:37
msgid ""
"Python allows you to split your program into modules that can be reused in "
"other Python programs.  It comes with a large collection of standard modules "
"that you can use as the basis of your programs --- or as examples to start "
"learning to program in Python.  Some of these modules provide things like "
"file I/O, system calls, sockets, and even interfaces to graphical user "
"interface toolkits like Tk."
msgstr ""
"Python ではプログラムをモジュールに分割して他の Python プログラムで再利用でき"
"ます。Python には膨大な標準モジュールが付属していて、プログラムを作る上での基"
"盤として、あるいは Python プログラミングを学ぶためのサンプルとして利用できま"
"す。組み込みモジュールではまた、ファイル I/O、システムコール、ソケットといっ"
"た機能や、Tk のようなグラフィカルユーザインタフェースツールキットを使うための"
"インタフェースなども提供しています。"

#: ../../tutorial/appetite.rst:44
msgid ""
"Python is an interpreted language, which can save you considerable time "
"during program development because no compilation and linking is necessary.  "
"The interpreter can be used interactively, which makes it easy to experiment "
"with features of the language, to write throw-away programs, or to test "
"functions during bottom-up program development. It is also a handy desk "
"calculator."
msgstr ""
"Python はインタプリタ言語です。コンパイルやリンクが必要ないので、プログラムを"
"開発する際にかなりの時間を節約できます。インタプリタは対話的な使い方もできま"
"す。インタプリタは対話的にも使えるので、言語の様々な機能について実験してみた"
"り、書き捨てのプログラムを書いたり、ボトムアップでプログラムを開発する際に関"
"数をテストしたりといったことが簡単にできます。便利な電卓にもなります。"

#: ../../tutorial/appetite.rst:50
msgid ""
"Python enables programs to be written compactly and readably.  Programs "
"written in Python are typically much shorter than equivalent C,  C++, or "
"Java programs, for several reasons:"
msgstr ""
"Python では、とてもコンパクトで読みやすいプログラムを書けます。Python で書か"
"れたプログラムは大抵、同じ機能を提供する C 言語, C++ 言語や Java のプログラム"
"よりもはるかに短くなります。これには以下のようないくつかの理由があります:"

#: ../../tutorial/appetite.rst:54
msgid ""
"the high-level data types allow you to express complex operations in a "
"single statement;"
msgstr "高レベルのデータ型によって、複雑な操作を一つの実行文で表現できます。"

#: ../../tutorial/appetite.rst:57
msgid ""
"statement grouping is done by indentation instead of beginning and ending "
"brackets;"
msgstr ""
"実行文のグループ化を、グループの開始や終了の括弧ではなくインデントで行えま"
"す。"

#: ../../tutorial/appetite.rst:60
msgid "no variable or argument declarations are necessary."
msgstr "変数や引数の宣言が不要です。"

#: ../../tutorial/appetite.rst:62
msgid ""
"Python is *extensible*: if you know how to program in C it is easy to add a "
"new built-in function or module to the interpreter, either to perform "
"critical operations at maximum speed, or to link Python programs to "
"libraries that may only be available in binary form (such as a vendor-"
"specific graphics library). Once you are really hooked, you can link the "
"Python interpreter into an application written in C and use it as an "
"extension or command language for that application."
msgstr ""
"Python は *拡張* できます: C 言語でプログラムを書く方法を知っているなら、新た"
"な組み込み関数やモジュールを簡単にインタプリタに追加できます。これによって、"
"処理速度を決定的に左右する操作を最大速度で動作するように実現したり、(ベンダ特"
"有のグラフィクスライブラリのように) バイナリ形式でしか手に入らないライブラリ"
"を Python にリンクしたりできます。その気になれば、Python インタプリタを C で"
"書かれたアプリケーションにリンクして、アプリケーションに対する拡張言語や命令"
"言語としても使えます。"

#: ../../tutorial/appetite.rst:70
msgid ""
"By the way, the language is named after the BBC show \"Monty Python's Flying "
"Circus\" and has nothing to do with reptiles.  Making references to Monty "
"Python skits in documentation is not only allowed, it is encouraged!"
msgstr ""
"ところで、この言語は BBC のショー番組、\"モンティパイソンの空飛ぶサーカス "
"(Monty Python's Flying Circus)\" から取ったもので、爬虫類とは関係ありません。"
"このドキュメントでは、モンティパイソンの寸劇への参照が許可されているだけでな"
"く、むしろ推奨されています！"

#: ../../tutorial/appetite.rst:74
msgid ""
"Now that you are all excited about Python, you'll want to examine it in some "
"more detail.  Since the best way to learn a language is to use it, the "
"tutorial invites you to play with the Python interpreter as you read."
msgstr ""
"さて、皆さんはもう Python にワクワクして、もうちょっと詳しく調べてみたくなっ"
"たはずです。プログラミング言語を習得する最良の方法は使ってみることですから、"
"このチュートリアルではみなさんが読んだ内容を Python インタプリタで試してみる"
"ことをおすすめします。"

#: ../../tutorial/appetite.rst:78
msgid ""
"In the next chapter, the mechanics of using the interpreter are explained.  "
"This is rather mundane information, but essential for trying out the "
"examples shown later."
msgstr ""
"次の章では、まずインタプリタを使うための機微を説明します。これはさして面白み"
"のない情報なのですが、後に説明する例題を試してみる上で不可欠なことです。"

#: ../../tutorial/appetite.rst:82
msgid ""
"The rest of the tutorial introduces various features of the Python language "
"and system through examples, beginning with simple expressions, statements "
"and data types, through functions and modules, and finally touching upon "
"advanced concepts like exceptions and user-defined classes."
msgstr ""
"チュートリアルの残りの部分では、Python プログラム言語と実行システムの様々な機"
"能を例題を交えて紹介します。単純な式、実行文、データ型から始めて、関数とモ"
"ジュールを経て、最後には例外処理やユーザ定義クラスといったやや高度な概念にも"
"触れます。"
