# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/interactive.rst:5
msgid "Interactive Input Editing and History Substitution"
msgstr "対話入力編集と履歴置換"

#: ../../tutorial/interactive.rst:7
msgid ""
"Some versions of the Python interpreter support editing of the current input "
"line and history substitution, similar to facilities found in the Korn shell "
"and the GNU Bash shell.  This is implemented using the `GNU Readline`_ "
"library, which supports various styles of editing.  This library has its own "
"documentation which we won't duplicate here."
msgstr ""
"いくつかのバージョンの Python インタプリタでは、Korn シェルや GNU Bash シェル"
"に見られる機能に似た、現在の入力行に対する編集機能や履歴置換機能をサポートし"
"ています。この機能は様々な編集スタイルをサポートしている、`GNU Readline`_ ラ"
"イブラリを使って実装されています。このライブラリには独自のドキュメントがあ"
"り、ここでそれを繰り返すつもりはありません。"

#: ../../tutorial/interactive.rst:17
msgid "Tab Completion and History Editing"
msgstr "タブ補完と履歴編集"

#: ../../tutorial/interactive.rst:19
msgid ""
"Completion of variable and module names is :ref:`automatically enabled "
"<rlcompleter-config>` at interpreter startup so that the :kbd:`Tab` key "
"invokes the completion function; it looks at Python statement names, the "
"current local variables, and the available module names.  For dotted "
"expressions such as ``string.a``, it will evaluate the expression up to the "
"final ``'.'`` and then suggest completions from the attributes of the "
"resulting object.  Note that this may execute application-defined code if an "
"object with a :meth:`__getattr__` method is part of the expression.  The "
"default configuration also saves your history into a file named :file:`."
"python_history` in your user directory. The history will be available again "
"during the next interactive interpreter session."
msgstr ""
"変数とモジュール名の補完はインタプリタの起動時に :ref:`自動的に有効化されま"
"す <rlcompleter-config>` 。 従って :kbd:`Tab` キーは補完機能を呼び出し、"
"Python の文の名前、現在のローカル変数、および利用可能なモジュール名を検索しま"
"す。``string.a`` のようなドットで区切られた式については、最後の ``'.'`` まで"
"の式を評価し、結果として得られたオブジェクトの属性から補完候補を示します。 :"
"meth:`__getattr__` メソッドを持ったオブジェクトが式に含まれている場合、 :"
"meth:`__getattr__` がアプリケーション定義のコードを実行するかもしれないので注"
"意してください。デフォルトの設定ではあなたのユーザーディレクトリの :file:`."
"python_history` という名前のファイルに履歴を保存します。 履歴は次の対話的なイ"
"ンタプリタのセッションで再び利用することができます。"

#: ../../tutorial/interactive.rst:36
msgid "Alternatives to the Interactive Interpreter"
msgstr "対話的インタープリタの代替"

#: ../../tutorial/interactive.rst:38
msgid ""
"This facility is an enormous step forward compared to earlier versions of "
"the interpreter; however, some wishes are left: It would be nice if the "
"proper indentation were suggested on continuation lines (the parser knows if "
"an indent token is required next).  The completion mechanism might use the "
"interpreter's symbol table.  A command to check (or even suggest) matching "
"parentheses, quotes, etc., would also be useful."
msgstr ""
"この機能は、初期の版のインタープリタに比べれば大きな進歩です。とはいえ、まだ"
"いくつかの要望が残されています。例えば、行を継続するときに正しいインデントが"
"提示されたら快適でしょう (パーサは次の行でインデントトークンが必要かどうかを"
"知っています)。補完機構がインタープリタのシンボルテーブルを使ってもよいかもし"
"れません。括弧やクォートなどの対応をチェックする (あるいは指示する) コマンド"
"も有用でしょう。"

#: ../../tutorial/interactive.rst:45
msgid ""
"One alternative enhanced interactive interpreter that has been around for "
"quite some time is IPython_, which features tab completion, object "
"exploration and advanced history management.  It can also be thoroughly "
"customized and embedded into other applications.  Another similar enhanced "
"interactive environment is bpython_."
msgstr ""
"より優れた対話的インタープリタの代替の一つに IPython_ があります。このイン"
"タープリタは、様々なところで使われていて、タブ補完、オブジェクト探索や先進的"
"な履歴管理といった機能を持っています。他のアプリケーションにカスタマイズされ"
"たり、組込まれこともあります。別の優れたインタラクティブ環境としては "
"bpython_ があります。"
