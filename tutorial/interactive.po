# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/interactive.rst:5
msgid "Interactive Input Editing and History Substitution"
msgstr "対話入力編集とヒストリ置換"

#: ../../tutorial/interactive.rst:7
msgid ""
"Some versions of the Python interpreter support editing of the current input "
"line and history substitution, similar to facilities found in the Korn shell "
"and the GNU Bash shell.  This is implemented using the `GNU Readline`_ "
"library, which supports Emacs-style and vi-style editing.  This library has "
"its own documentation which I won't duplicate here; however, the basics are "
"easily explained.  The interactive editing and history described here are "
"optionally available in the Unix and Cygwin versions of the interpreter."
msgstr ""
"あるバージョンの Python インタプリタでは、Korn シェルや GNU Bash シェルに見ら"
"れる機能に似た、現在の入力行に対する編集機能やヒストリ置換機能をサポートして"
"います。この機能は `GNU Readline`_ ライブラリを使って実装されています。このラ"
"イブラリは Emacs スタイルと vi スタイルの編集をサポートしています。ライブラリ"
"には独自のドキュメントがあり、ここでそれを繰り返すつもりはありません。とはい"
"え、基本について簡単に解説することにします。ここで述べる対話的な編集とヒスト"
"リについては、 Unix 版と Cygwin 版のインタプリタでオプションとして利用するこ"
"とができます。"

#: ../../tutorial/interactive.rst:15
msgid ""
"This chapter does *not* document the editing facilities of Mark Hammond's "
"PythonWin package or the Tk-based environment, IDLE, distributed with "
"Python. The command line history recall which operates within DOS boxes on "
"NT and some other DOS and Windows flavors  is yet another beast."
msgstr ""
"この章では、Mark Hammond の PythonWin パッケージや、 Python とともに配布され"
"る Tk ベースの環境である IDLE にある編集機能については解説 *しません* 。 NT "
"上の DOS ボックスやその他の DOS および Windows 類で働くコマンド行ヒストリ呼出"
"しもまた別のものです。"

#: ../../tutorial/interactive.rst:24
msgid "Line Editing"
msgstr "行編集"

#: ../../tutorial/interactive.rst:26
msgid ""
"If supported, input line editing is active whenever the interpreter prints a "
"primary or secondary prompt.  The current line can be edited using the "
"conventional Emacs control characters.  The most important of these are: :"
"kbd:`C-A` (Control-A) moves the cursor to the beginning of the line, :kbd:`C-"
"E` to the end, :kbd:`C-B` moves it one position to the left, :kbd:`C-F` to "
"the right.  Backspace erases the character to the left of the cursor, :kbd:"
"`C-D` the character to its right. :kbd:`C-K` kills (erases) the rest of the "
"line to the right of the cursor, :kbd:`C-Y` yanks back the last killed "
"string. :kbd:`C-underscore` undoes the last change you made; it can be "
"repeated for cumulative effect."
msgstr ""
"入力行の編集がサポートされている場合、インタプリタが一次または二次プロンプト"
"を出力している際にはいつでも有効になっています。現在の行は、慣例的な Emacs 制"
"御文字を使って編集することができます。そのうち最も重要なものとして、次のよう"
"なキーがあります。 :kbd:`C-A` (Control-A)はカーソルを行の先頭へ移動させま"
"す。 :kbd:`C-E` は末尾へ移動させます。 :kbd:`C-B` は逆方向へ一つ移動させま"
"す。 :kbd:`C-F` は順方向へ移動させます。 Backspace は逆方向に向かって文字を消"
"します。 :kbd:`C-D` は順方向に向かって消します。 :kbd:`C-K` は順方向に向かっ"
"て行の残りを kill し (消し) ます、 :kbd:`C-Y` は最後に kill された文字列を再"
"び yank し (取り出し) ます。 :kbd:`C-underscore` 最後の変更を元に戻します。こ"
"れは、繰り返してどんどんさかのぼることができます。"

#: ../../tutorial/interactive.rst:41
msgid "History Substitution"
msgstr "ヒストリ置換"

#: ../../tutorial/interactive.rst:43
msgid ""
"History substitution works as follows.  All non-empty input lines issued are "
"saved in a history buffer, and when a new prompt is given you are positioned "
"on a new line at the bottom of this buffer. :kbd:`C-P` moves one line up "
"(back) in the history buffer, :kbd:`C-N` moves one down.  Any line in the "
"history buffer can be edited; an asterisk appears in front of the prompt to "
"mark a line as modified.  Pressing the :kbd:`Return` key passes the current "
"line to the interpreter.  :kbd:`C-R` starts an incremental reverse search; :"
"kbd:`C-S` starts a forward search."
msgstr ""
"ヒストリ置換は次のように働きます。入力された行のうち、空行でない実行された行"
"はすべてヒストリバッファに保存されます。そして、プロンプトが提示されるときに"
"は、ヒストリバッファの最も下の新たな行に移動します。 :kbd:`C-P` はヒストリ"
"バッファの中を一行だけ上に移動し (戻し) ます。 :kbd:`C-N` は 1 行だけ下に移動"
"します。ヒストリバッファのどの行も編集することができます。行が編集されると、"
"それを示すためにプロンプトの前にアスタリスクが表示されます。 :kbd:`Return` "
"キーを押すと現在行がインタプリタへ渡されます。 :kbd:`C-R` はインクリメンタル"
"な逆方向サーチ (reverse search) を開始し、 :kbd:`C-S` は順方向サーチ "
"(forward search)を開始します。"

#: ../../tutorial/interactive.rst:56
msgid "Key Bindings"
msgstr "キー割り当て"

#: ../../tutorial/interactive.rst:58
msgid ""
"The key bindings and some other parameters of the Readline library can be "
"customized by placing commands in an initialization file called :file:`~/."
"inputrc`.  Key bindings have the form ::"
msgstr ""
"Readline ライブラリのキー割り当て (key binding) やその他のパラメタは、 :file:"
"`~/.inputrc` という初期化ファイルにコマンドを置くことでカスタマイズできます。"
"キー割り当ての形式は ::"

#: ../../tutorial/interactive.rst:64
msgid "or ::"
msgstr "もしくは ::"

#: ../../tutorial/interactive.rst:68
msgid "and options can be set with ::"
msgstr "で、オプションの設定方法は ::"

#: ../../tutorial/interactive.rst:72
msgid "For example::"
msgstr "例えば::"

#: ../../tutorial/interactive.rst:85
msgid ""
"Note that the default binding for :kbd:`Tab` in Python is to insert a :kbd:"
"`Tab` character instead of Readline's default filename completion function.  "
"If you insist, you can override this by putting ::"
msgstr ""
"Python では、 :kbd:`Tab` に対するデフォルトの割り当ては TAB の挿入です。 "
"Readline のデフォルトであるファイル名補完関数ではないので注意してください。も"
"し、どうしても Readline のデフォルトを割り当てたいのなら、 :file:`~/."
"inputrc` に ::"

#: ../../tutorial/interactive.rst:91
msgid ""
"in your :file:`~/.inputrc`.  (Of course, this makes it harder to type "
"indented continuation lines if you're accustomed to using :kbd:`Tab` for "
"that purpose.)"
msgstr ""
"を入れれば設定を上書きすることができます。 (もちろん、 :kbd:`Tab` を使ってイ"
"ンデントするのに慣れている場合、この設定を行うとインデントされた継続行を入力"
"しにくくなります。)"

#: ../../tutorial/interactive.rst:98
msgid ""
"Automatic completion of variable and module names is optionally available.  "
"To enable it in the interpreter's interactive mode, add the following to "
"your startup file: [#]_  ::"
msgstr ""
"変数名とモジュール名の自動的な補完がオプションとして利用できます。補完をイン"
"タプリタの対話モードで有効にするには、以下の設定をスタートアップファイルに追"
"加します。 [#]_ ::"

#: ../../tutorial/interactive.rst:105
msgid ""
"This binds the :kbd:`Tab` key to the completion function, so hitting the :"
"kbd:`Tab` key twice suggests completions; it looks at Python statement "
"names, the current local variables, and the available module names.  For "
"dotted expressions such as ``string.a``, it will evaluate the expression up "
"to the final ``'.'`` and then suggest completions from the attributes of the "
"resulting object.  Note that this may execute application-defined code if an "
"object with a :meth:`__getattr__` method is part of the expression."
msgstr ""
"この設定は、 :kbd:`Tab` キーを補完関数に束縛します。従って、 :kbd:`Tab` キー"
"を二回たたくと補完候補が示されます。補完機能は Python の文の名前、現在のロー"
"カル変数、および利用可能なモジュール名を検索します。 ``string.a`` のような"
"ドットで区切られた式については、最後の ``'.'`` までの式を評価し、結果として得"
"られたオブジェクトの属性から補完候補を示します。 :meth:`__getattr__` メソッド"
"を持ったオブジェクトが式に含まれている場合、 :meth:`__getattr__` がアプリケー"
"ション定義のコードを実行するかもしれないので注意してください。"

#: ../../tutorial/interactive.rst:113
msgid ""
"A more capable startup file might look like this example.  Note that this "
"deletes the names it creates once they are no longer needed; this is done "
"since the startup file is executed in the same namespace as the interactive "
"commands, and removing the names avoids creating side effects in the "
"interactive environment.  You may find it convenient to keep some of the "
"imported modules, such as :mod:`os`, which turn out to be needed in most "
"sessions with the interpreter. ::"
msgstr ""
"より良くできたスタートアップファイルは以下例のようになります。この例では、作"
"成した名前が不要になると削除されるのに注目してください。これは、スタートアッ"
"プファイルが対話コマンドと同じ名前空間で実行されているので、不要な名前を除去"
"して対話環境に副作用を生まないようにするためです。 import されたモジュールの"
"うち、 :mod:`os` のようなインタプリタのほとんどのセッションで必要なものについ"
"ては、残しておくと便利に思うかもしれません。 ::"

#: ../../tutorial/interactive.rst:149
msgid "Alternatives to the Interactive Interpreter"
msgstr "インタラクティブインタプタの代替"

#: ../../tutorial/interactive.rst:151
msgid ""
"This facility is an enormous step forward compared to earlier versions of "
"the interpreter; however, some wishes are left: It would be nice if the "
"proper indentation were suggested on continuation lines (the parser knows if "
"an indent token is required next).  The completion mechanism might use the "
"interpreter's symbol table.  A command to check (or even suggest) matching "
"parentheses, quotes, etc., would also be useful."
msgstr ""
"この機能は、初期の版のインタプリタに比べれば大きな進歩です。とはいえ、まだい"
"くつかの要望が残されています。例えば、行を継続するときに正しいインデントが提"
"示されたら快適でしょう (パーサは次の行でインデントトークンが必要かどうかを"
"知っています)。補完機構がインタプリタのシンボルテーブルを使ってもよいかもしれ"
"ません。括弧やクォートなどの対応をチェックする (あるいは指示する) コマンドも"
"有用でしょう。"

#: ../../tutorial/interactive.rst:158
msgid ""
"One alternative enhanced interactive interpreter that has been around for "
"quite some time is IPython_, which features tab completion, object "
"exploration and advanced history management.  It can also be thoroughly "
"customized and embedded into other applications.  Another similar enhanced "
"interactive environment is bpython_."
msgstr ""
"より優れたインタラクティブインタプリタの代替の一つに IPython_ があります。こ"
"のインタプリタは、様々なところで使われていて、タブ補完、オブジェクト探索や先"
"進的な履歴管理といった機能を持っています。他のアプリケーションにカスタマイズ"
"されたり、組込まれこともあります。別の優れたインタラクティブ環境としては "
"bpython_ があります。"

#: ../../tutorial/interactive.rst:166
msgid "Footnotes"
msgstr "注記"

#: ../../tutorial/interactive.rst:167
msgid ""
"Python will execute the contents of a file identified by the :envvar:"
"`PYTHONSTARTUP` environment variable when you start an interactive "
"interpreter.  To customize Python even for non-interactive mode, see :ref:"
"`tut-customize`."
msgstr ""
"Python は、対話インタプリタを開始する時に :envvar:`PYTHONSTARTUP` 環境変数が"
"指定するファイルの内容を実行します。非対話モードでも Pytohn をカスタマイズす"
"るには、 :ref:`tut-customize` を参照してください。"
