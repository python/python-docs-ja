# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2021, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# 秘湯 <xwhhsprings@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-01 01:01+0900\n"
"PO-Revision-Date: 2019-12-22 13:26+0000\n"
"Last-Translator: Yuta Kanzawa\n"
"Language-Team: Japanese (http://www.transifex.com/python-doc/python-27/"
"language/ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/controlflow.rst:5
msgid "More Control Flow Tools"
msgstr "その他の制御フローツール"

#: ../../tutorial/controlflow.rst:7
msgid ""
"Besides the :keyword:`while` statement just introduced, Python uses the "
"usual flow control statements known from other languages, with some twists."
msgstr ""
"先ほど説明のあった :keyword:`while` 文に加えて、他の言語での経験から分かるよ"
"うな通常のフロー制御文を少し工夫を効かせて使用します。"

#: ../../tutorial/controlflow.rst:14
msgid ":keyword:`if` Statements"
msgstr ":keyword:`if` 文"

#: ../../tutorial/controlflow.rst:16
msgid ""
"Perhaps the most well-known statement type is the :keyword:`if` statement.  "
"For example::"
msgstr "おそらく最もおなじみの文型は :keyword:`if` 文でしょう。例えば::"

#: ../../tutorial/controlflow.rst:33
msgid ""
"There can be zero or more :keyword:`elif` parts, and the :keyword:`else` "
"part is optional.  The keyword ':keyword:`elif`' is short for 'else if', and "
"is useful to avoid excessive indentation.  An  :keyword:`if` ... :keyword:"
"`elif` ... :keyword:`elif` ... sequence is a substitute for the ``switch`` "
"or ``case`` statements found in other languages."
msgstr ""
"ゼロ個以上の :keyword:`elif` 部を使うことができ、 :keyword:`else` 部を付ける"
"こともできます。キーワード ':keyword:`elif`' は 'else if' を短くしたもので、"
"過剰なインデントを避けるのに役立ちます。一連の :keyword:`if` ... :keyword:"
"`elif` ... :keyword:`elif` ...  は、他の言語における ``switch`` 文や "
"``case`` 文の代用となります。"

#: ../../tutorial/controlflow.rst:43
msgid ":keyword:`for` Statements"
msgstr ":keyword:`for` 文"

#: ../../tutorial/controlflow.rst:49
msgid ""
"The :keyword:`for` statement in Python differs a bit from what you may be "
"used to in C or Pascal.  Rather than always iterating over an arithmetic "
"progression of numbers (like in Pascal), or giving the user the ability to "
"define both the iteration step and halting condition (as C), Python's :"
"keyword:`for` statement iterates over the items of any sequence (a list or a "
"string), in the order that they appear in the sequence.  For example (no pun "
"intended):"
msgstr ""
"Python の :keyword:`for` 文は、読者が C 言語や Pascal 言語で使いなれているか"
"もしれない :keyword:`for` 文とは少し違います。 (Pascal のように) 常に算術型の"
"数列にわたる反復を行ったり、 (C のように) 繰返しステップと停止条件を両方とも"
"ユーザが定義できるようにするのとは違い、Python の :keyword:`for` 文は、任意の"
"シーケンス型 (リストまたは文字列) にわたって反復を行います。反復の順番はシー"
"ケンス中に要素が現れる順番です。例えば:"

#: ../../tutorial/controlflow.rst:70
msgid ""
"If you need to modify the sequence you are iterating over while inside the "
"loop (for example to duplicate selected items), it is recommended that you "
"first make a copy.  Iterating over a sequence does not implicitly make a "
"copy.  The slice notation makes this especially convenient::"
msgstr ""
"ループ内部でイテレートしているシーケンスを修正する必要があれば (例えば選択さ"
"れたアイテムを複製するために)、最初にコピーを作ることをお勧めします。シーケン"
"スに対するイテレーションは暗黙にコピーを作りません。スライス記法はこれを特に"
"便利にします::"

#: ../../tutorial/controlflow.rst:86
msgid "The :func:`range` Function"
msgstr ":func:`range` 関数"

#: ../../tutorial/controlflow.rst:88
msgid ""
"If you do need to iterate over a sequence of numbers, the built-in function :"
"func:`range` comes in handy.  It generates lists containing arithmetic "
"progressions::"
msgstr ""
"数列にわたって反復を行う必要がある場合、組み込み関数 :func:`range`  が便利で"
"す。この関数は算術型の数列を生成します::"

#: ../../tutorial/controlflow.rst:95
msgid ""
"The given end point is never part of the generated list; ``range(10)`` "
"generates a list of 10 values, the legal indices for items of a sequence of "
"length 10.  It is possible to let the range start at another number, or to "
"specify a different increment (even negative; sometimes this is called the "
"'step')::"
msgstr ""
"指定した終端値は生成されるシーケンスには入りません。 ``range(10)`` は 10 個の"
"値を生成し、長さ 10 のシーケンスにおける各項目のインデクスとなります。 range "
"を別の数から開始したり、他の増加量 (負の増加量でさえも; 増加量は時に 'ステッ"
"プ(step)' と呼ばれることもあります) を指定することもできます::"

#: ../../tutorial/controlflow.rst:107
msgid ""
"To iterate over the indices of a sequence, you can combine :func:`range` "
"and :func:`len` as follows::"
msgstr ""
"あるシーケンスにわたってインデクスで反復を行うには、 :func:`range` と :func:"
"`len` を次のように組み合わせられます::"

#: ../../tutorial/controlflow.rst:120
msgid ""
"In most such cases, however, it is convenient to use the :func:`enumerate` "
"function, see :ref:`tut-loopidioms`."
msgstr ""
"しかし、多くの場合は :func:`enumerate` 関数を使う方が便利です。 :ref:`tut-"
"loopidioms` を参照してください。"

#: ../../tutorial/controlflow.rst:127
msgid ""
":keyword:`break` and :keyword:`continue` Statements, and :keyword:`else` "
"Clauses on Loops"
msgstr ""
":keyword:`break` 文と :keyword:`continue` 文とループの :keyword:`else` 節"

#: ../../tutorial/controlflow.rst:129
msgid ""
"The :keyword:`break` statement, like in C, breaks out of the innermost "
"enclosing :keyword:`for` or :keyword:`while` loop."
msgstr ""
":keyword:`break` 文は、C 言語と同じく、最も内側の :keyword:`for` または :"
"keyword:`while` ループを中断します。"

#: ../../tutorial/controlflow.rst:132
msgid ""
"Loop statements may have an ``else`` clause; it is executed when the loop "
"terminates through exhaustion of the list (with :keyword:`for`) or when the "
"condition becomes false (with :keyword:`while`), but not when the loop is "
"terminated by a :keyword:`break` statement.  This is exemplified by the "
"following loop, which searches for prime numbers::"
msgstr ""
"ループ文は ``else`` 節を持つことができます。これは、 (:keyword:`for` で) 反復"
"処理対象のリストを使い切ってループが終了したとき、または (:keyword:`while` "
"で) 条件が偽になったときに実行されますが、 :keyword:`break` 文でループが終了"
"したときは実行されません。この動作を、素数を探す下記のループを例にとって示し"
"ます::"

#: ../../tutorial/controlflow.rst:156
msgid ""
"(Yes, this is the correct code.  Look closely: the ``else`` clause belongs "
"to the :keyword:`for` loop, **not** the :keyword:`if` statement.)"
msgstr ""
"(そう、これは正しいコードです。よく見てください: ``else`` 節は :keyword:`if` "
"文 **ではなく** 、 :keyword:`for` ループに属しています。)"

#: ../../tutorial/controlflow.rst:159
msgid ""
"When used with a loop, the ``else`` clause has more in common with the "
"``else`` clause of a :keyword:`try` statement than it does that of :keyword:"
"`if` statements: a :keyword:`try` statement's ``else`` clause runs when no "
"exception occurs, and a loop's ``else`` clause runs when no ``break`` "
"occurs. For more on the :keyword:`try` statement and exceptions, see :ref:"
"`tut-handling`."
msgstr ""
"ループの ``else`` 句は、 :keyword:`if` 文の ``else`` よりも :keyword:`try` 文"
"の ``else`` に似ています。 :keyword:`try` 文の ``else`` 句は例外が発生しな"
"かった時に実行され、ループの ``else`` 句は ``break`` されなかった場合に実行さ"
"れます。 :keyword:`try` 文と例外についての詳細は :ref:`tut-handling` を参照し"
"てください。"

#: ../../tutorial/controlflow.rst:166
msgid ""
"The :keyword:`continue` statement, also borrowed from C, continues with the "
"next iteration of the loop::"
msgstr ""
":keyword:`continue` 文も C 言語から借りてきたもので、ループの次のイテレーショ"
"ンを実行します::"

#: ../../tutorial/controlflow.rst:187
msgid ":keyword:`pass` Statements"
msgstr ":keyword:`pass` 文"

#: ../../tutorial/controlflow.rst:189
msgid ""
"The :keyword:`pass` statement does nothing. It can be used when a statement "
"is required syntactically but the program requires no action. For example::"
msgstr ""
":keyword:`pass` 文は何もしません。 :keyword:`pass` は、文を書くことが構文上要"
"求されているが、プログラム上何の動作もする必要がない時に使われます::"

#: ../../tutorial/controlflow.rst:196
msgid "This is commonly used for creating minimal classes::"
msgstr "これは最小のクラスを作るときによく使われる方法です::"

#: ../../tutorial/controlflow.rst:202
msgid ""
"Another place :keyword:`pass` can be used is as a place-holder for a "
"function or conditional body when you are working on new code, allowing you "
"to keep thinking at a more abstract level.  The :keyword:`pass` is silently "
"ignored::"
msgstr ""
":keyword:`pass` が使われるもう1つの場所は、新しいコードを書いている時の関数や"
"条件文の中身です。こうすることで、具体的なコードを書かないで抽象的なレベルで"
"考えることができます。 :keyword:`pass` は何もすることなく無視されます::"

#: ../../tutorial/controlflow.rst:213
msgid "Defining Functions"
msgstr "関数を定義する"

#: ../../tutorial/controlflow.rst:215
msgid ""
"We can create a function that writes the Fibonacci series to an arbitrary "
"boundary::"
msgstr ""
"フィボナッチ数列 (Fibonacci series) を任意の上限値まで書き出すような関数を作"
"成できます::"

#: ../../tutorial/controlflow.rst:234
msgid ""
"The keyword :keyword:`def` introduces a function *definition*.  It must be "
"followed by the function name and the parenthesized list of formal "
"parameters. The statements that form the body of the function start at the "
"next line, and must be indented."
msgstr ""
":keyword:`def` は関数の *定義 (definition)* を導くキーワードです。 :keyword:"
"`def` の後には、関数名と仮引数を丸括弧で囲んだリストを続けなければなりませ"
"ん。関数の実体を構成する実行文は次の行から始め、インデントされていなければな"
"りません。"

#: ../../tutorial/controlflow.rst:239
msgid ""
"The first statement of the function body can optionally be a string literal; "
"this string literal is the function's documentation string, or :dfn:"
"`docstring`. (More about docstrings can be found in the section :ref:`tut-"
"docstrings`.) There are tools which use docstrings to automatically produce "
"online or printed documentation, or to let the user interactively browse "
"through code; it's good practice to include docstrings in code that you "
"write, so make a habit of it."
msgstr ""
"関数の本体の記述する文の最初の行は文字列リテラルにすることもできます。その場"
"合、この文字列は関数のドキュメンテーション文字列 (documentation string)、また"
"は :dfn:`docstring` と呼ばれます。 (docstring については :ref:`tut-"
"docstrings` でさらに扱っています。) ドキュメンテーション文字列を使ったツール"
"には、オンライン文書や印刷文書を自動的に生成したり、ユーザが対話的にコードか"
"ら直接閲覧できるようにするものがあります。自分が書くコードにドキュメンテー"
"ション文字列を入れるのはよい習慣です。書く癖をつけてください。"

#: ../../tutorial/controlflow.rst:246
msgid ""
"The *execution* of a function introduces a new symbol table used for the "
"local variables of the function.  More precisely, all variable assignments "
"in a function store the value in the local symbol table; whereas variable "
"references first look in the local symbol table, then in the local symbol "
"tables of enclosing functions, then in the global symbol table, and finally "
"in the table of built-in names. Thus, global variables cannot be directly "
"assigned a value within a function (unless named in a :keyword:`global` "
"statement), although they may be referenced."
msgstr ""
"関数を *実行 (execution)* するとき、関数のローカル変数のために使われる新たな"
"シンボルテーブル (symbol table) が用意されます。もっと正確にいうと、関数内で"
"変数への代入を行うと、その値はすべてこのローカルなシンボルテーブルに記憶され"
"ます。一方、変数の参照を行うと、まずローカルなシンボルテーブルが検索され、次"
"にさらに外側の関数のローカルなシンボルテーブルを検索し、その後グローバルなシ"
"ンボルテーブルを調べ、最後に組み込みの名前テーブルを調べます。従って、関数の"
"中では、グローバルな変数を参照することはできますが、直接値を代入することは (:"
"keyword:`global` 文で名前を挙げておかない限り)できません。"

#: ../../tutorial/controlflow.rst:255
msgid ""
"The actual parameters (arguments) to a function call are introduced in the "
"local symbol table of the called function when it is called; thus, arguments "
"are passed using *call by value* (where the *value* is always an object "
"*reference*, not the value of the object). [#]_ When a function calls "
"another function, a new local symbol table is created for that call."
msgstr ""
"関数を呼び出す際の実際のパラメタ (引数) は、関数が呼び出されるときに関数の"
"ローカルなシンボルテーブル内に取り込まれます。そうすることで、引数は *値渡し "
"(call by value)* で関数に渡されることになります (ここでの *値 (value)* とは常"
"にオブジェクトへの *参照(reference)* をいい、オブジェクトの値そのものではあり"
"ません) [#]_。ある関数がほかの関数を呼び出すときには、新たな呼び出しのために"
"ローカルなシンボルテーブルが新たに作成されます。"

#: ../../tutorial/controlflow.rst:261
msgid ""
"A function definition introduces the function name in the current symbol "
"table. The value of the function name has a type that is recognized by the "
"interpreter as a user-defined function.  This value can be assigned to "
"another name which can then also be used as a function.  This serves as a "
"general renaming mechanism::"
msgstr ""
"関数の定義を行うと、関数名は現在のシンボルテーブル内に取り入れられます。関数"
"名の値は、インタプリタからはユーザ定義関数 (user-defined function) として認識"
"される型を持ちます。この値は別の名前に代入して、後にその名前を関数として使う"
"こともできます。これは一般的な名前変更のメカニズムとして働きます::"

#: ../../tutorial/controlflow.rst:273
msgid ""
"Coming from other languages, you might object that ``fib`` is not a function "
"but a procedure since it doesn't return a value.  In fact, even functions "
"without a :keyword:`return` statement do return a value, albeit a rather "
"boring one.  This value is called ``None`` (it's a built-in name).  Writing "
"the value ``None`` is normally suppressed by the interpreter if it would be "
"the only value written. You can see it if you really want to using :keyword:"
"`print`::"
msgstr ""
"他の言語出身の人からは、 ``fib`` は値を返さないので関数ではなく手続き "
"(procedure) だと異論があるかもしれませんね。技術的に言えば、実際には :"
"keyword:`return` 文を持たない関数もややつまらない値ですが値を返しています。こ"
"の値は ``None`` と呼ばれます (これは組み込みの名前です)。 ``None`` だけを書き"
"出そうとすると、インタプリタは通常出力を抑制します。本当に出力したいのなら、"
"以下のように :keyword:`print` を使うと見ることができます::"

#: ../../tutorial/controlflow.rst:284
msgid ""
"It is simple to write a function that returns a list of the numbers of the "
"Fibonacci series, instead of printing it::"
msgstr ""
"フィボナッチ数列の数からなるリストを出力する代わりに、値を返すような関数を書"
"くのは簡単です::"

#: ../../tutorial/controlflow.rst:300
msgid "This example, as usual, demonstrates some new Python features:"
msgstr "この例は Python の新しい機能を示しています:"

#: ../../tutorial/controlflow.rst:302
msgid ""
"The :keyword:`return` statement returns with a value from a function. :"
"keyword:`return` without an expression argument returns ``None``. Falling "
"off the end of a function also returns ``None``."
msgstr ""
":keyword:`return` 文では、関数から一つ値を返します。 :keyword:`return` の引数"
"となる式がない場合、 ``None`` が返ります。関数が終了したときにも ``None`` が"
"返ります。"

#: ../../tutorial/controlflow.rst:306
msgid ""
"The statement ``result.append(a)`` calls a *method* of the list object "
"``result``.  A method is a function that 'belongs' to an object and is named "
"``obj.methodname``, where ``obj`` is some object (this may be an "
"expression), and ``methodname`` is the name of a method that is defined by "
"the object's type. Different types define different methods.  Methods of "
"different types may have the same name without causing ambiguity.  (It is "
"possible to define your own object types and methods, using *classes*, see :"
"ref:`tut-classes`) The method :meth:`append` shown in the example is defined "
"for list objects; it adds a new element at the end of the list.  In this "
"example it is equivalent to ``result = result + [a]``, but more efficient."
msgstr ""
"文 ``result.append(a)`` では、リストオブジェクト ``result`` の *メソッド "
"(method)* を呼び出しています。メソッドとは、オブジェクトに '属している' 関数"
"のことで、 ``obj`` を何らかのオブジェクト (式であっても構いません)、 "
"``methodname`` をそのオブジェクトで定義されているメソッド名とすると、 ``obj."
"methodname`` と書き表されます。異なる型は異なるメソッドを定義しています。異な"
"る型のメソッドで同じ名前のメソッドを持つことができ、あいまいさを生じることは"
"ありません。 (*クラス (class)* を使うことで、自前のオブジェクト型とメソッドを"
"定義することもできます。 :ref:`tut-classes` 参照) 例で示されているメソッド :"
"meth:`append` は、リストオブジェクトで定義されています; このメソッドはリスト"
"の末尾に新たな要素を追加します。この例での :meth:`append` は ``result = "
"result + [a]`` と等価ですが、より効率的です。"

#: ../../tutorial/controlflow.rst:321
msgid "More on Defining Functions"
msgstr "関数定義についてもう少し"

#: ../../tutorial/controlflow.rst:323
msgid ""
"It is also possible to define functions with a variable number of arguments. "
"There are three forms, which can be combined."
msgstr ""
"可変個の引数を伴う関数を定義することもできます。引数の定義方法には 3 つの形式"
"があり、それらを組み合わせることができます。"

#: ../../tutorial/controlflow.rst:330
msgid "Default Argument Values"
msgstr "デフォルトの引数値"

#: ../../tutorial/controlflow.rst:332
msgid ""
"The most useful form is to specify a default value for one or more "
"arguments. This creates a function that can be called with fewer arguments "
"than it is defined to allow.  For example::"
msgstr ""
"もっとも便利なのは、一つ以上の引数に対してデフォルトの値を指定する形式です。"
"この形式を使うと、定義されている引数より少ない個数の引数で呼び出せる関数を作"
"成します::"

#: ../../tutorial/controlflow.rst:348
msgid "This function can be called in several ways:"
msgstr "この関数はいくつかの方法で呼び出せます:"

#: ../../tutorial/controlflow.rst:350
msgid ""
"giving only the mandatory argument: ``ask_ok('Do you really want to quit?')``"
msgstr "必須の引数のみ与える: ``ask_ok('Do you really want to quit?')``"

#: ../../tutorial/controlflow.rst:352
msgid ""
"giving one of the optional arguments: ``ask_ok('OK to overwrite the file?', "
"2)``"
msgstr ""
"一つのオプション引数を与える: ``ask_ok('OK to overwrite the file?', 2)``"

#: ../../tutorial/controlflow.rst:354
msgid ""
"or even giving all arguments: ``ask_ok('OK to overwrite the file?', 2, 'Come "
"on, only yes or no!')``"
msgstr ""
"全ての引数を与える: ``ask_ok('OK to overwrite the file?', 2, 'Come on, only "
"yes or no!')``"

#: ../../tutorial/controlflow.rst:357
msgid ""
"This example also introduces the :keyword:`in` keyword. This tests whether "
"or not a sequence contains a certain value."
msgstr ""
"この例では :keyword:`in` キーワードが導入されています。このキーワードはシーケ"
"ンスが特定の値を含んでいるかどうか調べるのに使われます。"

#: ../../tutorial/controlflow.rst:360
msgid ""
"The default values are evaluated at the point of function definition in the "
"*defining* scope, so that ::"
msgstr ""
"デフォルト値は、関数が定義された時点で、関数を *定義している* 側のスコープ "
"(scope) で評価されるので ::"

#: ../../tutorial/controlflow.rst:371
msgid "will print ``5``."
msgstr "は ``5`` を出力します。"

#: ../../tutorial/controlflow.rst:373
msgid ""
"**Important warning:**  The default value is evaluated only once. This makes "
"a difference when the default is a mutable object such as a list, "
"dictionary, or instances of most classes.  For example, the following "
"function accumulates the arguments passed to it on subsequent calls::"
msgstr ""
"**重要な警告:**  デフォルト値は 1 度だけしか評価されません。デフォルト値がリ"
"ストや辞書のような変更可能なオブジェクトの時にはその影響がでます。例えば以下"
"の関数は、後に続く関数呼び出しで関数に渡されている引数を累積します::"

#: ../../tutorial/controlflow.rst:386
msgid "This will print ::"
msgstr "このコードは、以下を出力します ::"

#: ../../tutorial/controlflow.rst:392
msgid ""
"If you don't want the default to be shared between subsequent calls, you can "
"write the function like this instead::"
msgstr ""
"後続の関数呼び出しでデフォルト値を共有したくなければ、代わりに以下のように関"
"数を書くことができます::"

#: ../../tutorial/controlflow.rst:405
msgid "Keyword Arguments"
msgstr "キーワード引数"

#: ../../tutorial/controlflow.rst:407
msgid ""
"Functions can also be called using :term:`keyword arguments <keyword "
"argument>` of the form ``kwarg=value``.  For instance, the following "
"function::"
msgstr ""
"関数を ``kwarg=value`` という形式の :term:`キーワード引数 <Keyword "
"argument>` を使って呼び出すこともできます。例えば、以下の関数::"

#: ../../tutorial/controlflow.rst:416
msgid ""
"accepts one required argument (``voltage``) and three optional arguments "
"(``state``, ``action``, and ``type``).  This function can be called in any "
"of the following ways::"
msgstr ""
"は、必須引数 (``voltage``) とオプション引数 (``state``、``action``、"
"``type``) を受け付けます。この関数は以下のいずれかの方法で呼び出せます::"

#: ../../tutorial/controlflow.rst:427
msgid "but all the following calls would be invalid::"
msgstr "が、以下の呼び出しは不適切です::"

#: ../../tutorial/controlflow.rst:434
msgid ""
"In a function call, keyword arguments must follow positional arguments. All "
"the keyword arguments passed must match one of the arguments accepted by the "
"function (e.g. ``actor`` is not a valid argument for the ``parrot`` "
"function), and their order is not important.  This also includes non-"
"optional arguments (e.g. ``parrot(voltage=1000)`` is valid too). No argument "
"may receive a value more than once. Here's an example that fails due to this "
"restriction::"
msgstr ""
"関数の呼び出しにおいて、キーワード引数は位置指定引数の後でなければなりませ"
"ん。渡されるキーワード引数は全て、関数で受け付けられる引数のいずれかに対応し"
"ていなければならず (例えば、``actor`` はこの ``parrot`` 関数の引数として適切"
"ではありません)、順序は重要ではありません。これはオプションでない引数でも同様"
"です (例えば、``parrot(voltage=1000)`` も適切です)。いかなる引数も値を複数回"
"は受け取れません。この制限により失敗する例は::"

#: ../../tutorial/controlflow.rst:450
msgid ""
"When a final formal parameter of the form ``**name`` is present, it receives "
"a dictionary (see :ref:`typesmapping`) containing all keyword arguments "
"except for those corresponding to a formal parameter.  This may be combined "
"with a formal parameter of the form ``*name`` (described in the next "
"subsection) which receives a tuple containing the positional arguments "
"beyond the formal parameter list.  (``*name`` must occur before ``**name``.) "
"For example, if we define a function like this::"
msgstr ""
"仮引数の最後に ``**name`` の形式のものがあると、それまでの仮引数に対応したも"
"のを除くすべてのキーワード引数が入った辞書 (:ref:`typesmapping` を参照) を受"
"け取ります。 ``**name`` は ``*name`` の形式をとる、仮引数のリストを超えた位置"
"指定引数の入ったタプルを受け取る引数 (次の節で述べます) と組み合わせることが"
"できます。 (``*name`` は ``**name`` より前になければなりません)。例えば、ある"
"関数の定義を以下のようにすると::"

#: ../../tutorial/controlflow.rst:468
msgid "It could be called like this::"
msgstr "呼び出しは以下のようになり::"

#: ../../tutorial/controlflow.rst:476
msgid "and of course it would print:"
msgstr "もちろん以下のように出力されます:"

#: ../../tutorial/controlflow.rst:489
msgid ""
"Note that the list of keyword argument names is created by sorting the "
"result of the keywords dictionary's ``keys()`` method before printing its "
"contents; if this is not done, the order in which the arguments are printed "
"is undefined."
msgstr ""
"キーワード引数名のリストを、キーワード辞書の ``keys()`` メソッドの結果をソー"
"トして作成していることに注目してください。:meth:`sort` が呼び出されていない"
"と、引数が出力される順番は不確定となります。"

#: ../../tutorial/controlflow.rst:496
msgid "Arbitrary Argument Lists"
msgstr "任意引数リスト"

#: ../../tutorial/controlflow.rst:501
msgid ""
"Finally, the least frequently used option is to specify that a function can "
"be called with an arbitrary number of arguments.  These arguments will be "
"wrapped up in a tuple (see :ref:`tut-tuples`).  Before the variable number "
"of arguments, zero or more normal arguments may occur. ::"
msgstr ""
"最後に、最も使うことの少ない選択肢として、関数が任意の個数の引数で呼び出せる"
"よう指定する方法があります。これらの引数はタプル (:ref:`tut-tuples` を参照) "
"に格納されます。可変個の引数の前に、ゼロ個かそれ以上の引数があっても構いませ"
"ん。 ::"

#: ../../tutorial/controlflow.rst:513
msgid "Unpacking Argument Lists"
msgstr "引数リストのアンパック"

#: ../../tutorial/controlflow.rst:515
msgid ""
"The reverse situation occurs when the arguments are already in a list or "
"tuple but need to be unpacked for a function call requiring separate "
"positional arguments.  For instance, the built-in :func:`range` function "
"expects separate *start* and *stop* arguments.  If they are not available "
"separately, write the function call with the  ``*``\\ -operator to unpack "
"the arguments out of a list or tuple::"
msgstr ""
"引数がすでにリストやタプルになっていて、個別な固定引数を要求する関数呼び出し"
"に渡すためにアンパックする必要がある場合には、逆の状況が起こります。例えば、"
"組み込み関数 :func:`range` は引数 *start* と *stop* を別に与える必要がありま"
"す。個別に引数を与えることができない場合、関数呼び出しを ``*`` 演算子を使って"
"書き、リストやタプルから引数をアンパックします::"

#: ../../tutorial/controlflow.rst:531
msgid ""
"In the same fashion, dictionaries can deliver keyword arguments with the "
"``**``\\ -operator::"
msgstr ""
"同じやりかたで、``**`` オペレータを使って辞書でもキーワード引数を渡すことがで"
"きます::"

#: ../../tutorial/controlflow.rst:547
msgid "Lambda Expressions"
msgstr "ラムダ式"

#: ../../tutorial/controlflow.rst:549
msgid ""
"Small anonymous functions can be created with the :keyword:`lambda` keyword. "
"This function returns the sum of its two arguments: ``lambda a, b: a+b``. "
"Lambda functions can be used wherever function objects are required.  They "
"are syntactically restricted to a single expression.  Semantically, they are "
"just syntactic sugar for a normal function definition.  Like nested function "
"definitions, lambda functions can reference variables from the containing "
"scope::"
msgstr ""
"キーワード :keyword:`lambda` を使うと、名前のない小さな関数を生成できます。例"
"えば ``lambda a, b: a+b`` は、二つの引数の和を返す関数です。ラムダ式の関数"
"は、関数オブジェクトが要求されている場所にならどこでも使うことができます。ラ"
"ムダ式は、構文上単一の式に制限されています。意味付け的には、ラムダ形式は単に"
"通常の関数定義に構文的な糖衣をかぶせたものに過ぎません。入れ子構造になった関"
"数定義と同様、ラムダ式もそれを取り囲むスコープから変数を参照することができま"
"す::"

#: ../../tutorial/controlflow.rst:566
msgid ""
"The above example uses a lambda expression to return a function.  Another "
"use is to pass a small function as an argument::"
msgstr ""
"上記の例は、関数を返すところでラムダ式を使っています。もう1つの例では、ちょっ"
"とした関数を引数として渡すのに使っています::"

#: ../../tutorial/controlflow.rst:578
msgid "Documentation Strings"
msgstr "ドキュメンテーション文字列"

#: ../../tutorial/controlflow.rst:585
msgid ""
"There are emerging conventions about the content and formatting of "
"documentation strings."
msgstr ""
"ドキュメンテーション文字列については、その内容と書式に関する慣習をいくつか挙"
"げます。"

#: ../../tutorial/controlflow.rst:588
msgid ""
"The first line should always be a short, concise summary of the object's "
"purpose.  For brevity, it should not explicitly state the object's name or "
"type, since these are available by other means (except if the name happens "
"to be a verb describing a function's operation).  This line should begin "
"with a capital letter and end with a period."
msgstr ""
"最初の行は、常に対象物の目的を短く簡潔にまとめたものでなくてはなりません。簡"
"潔に書くために、対象物の名前や型を明示する必要はありません。名前や型は他の方"
"法でも得られるからです (名前がたまたま関数の演算内容を記述する動詞である場合"
"は例外です)。最初の行は大文字で始まり、ピリオドで終わっていなければなりませ"
"ん。"

#: ../../tutorial/controlflow.rst:594
msgid ""
"If there are more lines in the documentation string, the second line should "
"be blank, visually separating the summary from the rest of the description.  "
"The following lines should be one or more paragraphs describing the object's "
"calling conventions, its side effects, etc."
msgstr ""
"ドキュメンテーション文字列中にさらに記述すべき行がある場合、二行目は空行に"
"し、まとめの行と残りの記述部分を視覚的に分離します。つづく行は一つまたはそれ"
"以上の段落で、対象物の呼び出し規約や副作用について記述します。"

#: ../../tutorial/controlflow.rst:599
msgid ""
"The Python parser does not strip indentation from multi-line string literals "
"in Python, so tools that process documentation have to strip indentation if "
"desired.  This is done using the following convention. The first non-blank "
"line *after* the first line of the string determines the amount of "
"indentation for the entire documentation string.  (We can't use the first "
"line since it is generally adjacent to the string's opening quotes so its "
"indentation is not apparent in the string literal.)  Whitespace "
"\"equivalent\" to this indentation is then stripped from the start of all "
"lines of the string.  Lines that are indented less should not occur, but if "
"they occur all their leading whitespace should be stripped.  Equivalence of "
"whitespace should be tested after expansion of tabs (to 8 spaces, normally)."
msgstr ""
"Python のパーザは複数行にわたる Python 文字列リテラルからインデントを剥ぎ取ら"
"ないので、ドキュメントを処理するツールでは必要に応じてインデントを剥ぎ取らな"
"ければなりません。この処理は以下の規約に従って行います。最初の行の *後にある"
"* 空行でない最初の行が、ドキュメント全体のインデントの量を決めます。(最初の行"
"は通常、文字列を開始するクオートに隣り合っているので、インデントが文字列リテ"
"ラル中に現れないためです。) このインデント量と \"等価な\" 空白が、文字列のす"
"べての行頭から剥ぎ取られます。インデントの量が少ない行を書いてはならないので"
"すが、もしそういう行があると、先頭の空白すべてが剥ぎ取られます。インデントの"
"空白の大きさが等しいかどうかは、タブ文字を (通常は 8 文字のスペースとして) 展"
"開した後に調べられます。"

#: ../../tutorial/controlflow.rst:611
msgid "Here is an example of a multi-line docstring::"
msgstr "以下に複数行のドキュメンテーション文字列の例を示します::"

#: ../../tutorial/controlflow.rst:629
msgid "Intermezzo: Coding Style"
msgstr "間奏曲: コーディングスタイル"

#: ../../tutorial/controlflow.rst:634
msgid ""
"Now that you are about to write longer, more complex pieces of Python, it is "
"a good time to talk about *coding style*.  Most languages can be written (or "
"more concise, *formatted*) in different styles; some are more readable than "
"others. Making it easy for others to read your code is always a good idea, "
"and adopting a nice coding style helps tremendously for that."
msgstr ""
"これからより長くより複雑な Python のコードを書いていくので、そろそろ *コー"
"ディングスタイル* について語っても良い頃です。ほとんどの言語は様々なスタイル"
"で書け (もっと簡潔に言えば *フォーマットでき*)、スタイルによって読み易さが異"
"なります。他人にとって読み易いコードにしようとするのはどんなときでも良い考え"
"であり、良いコーディングスタイルを採用することが非常に強力な助けになります。"

#: ../../tutorial/controlflow.rst:640
msgid ""
"For Python, :pep:`8` has emerged as the style guide that most projects "
"adhere to; it promotes a very readable and eye-pleasing coding style.  Every "
"Python developer should read it at some point; here are the most important "
"points extracted for you:"
msgstr ""
"Python には、ほとんどのプロジェクトが守っているスタイルガイドとして :pep:`8` "
"があります。それは非常に読み易く目に優しいコーディングスタイルを推奨していま"
"す。全ての Python 開発者はある時点でそれを読むべきです。ここに最も重要な点を"
"抜き出しておきます:"

#: ../../tutorial/controlflow.rst:645
msgid "Use 4-space indentation, and no tabs."
msgstr "インデントには空白 4 つを使い、タブは使わないこと。"

#: ../../tutorial/controlflow.rst:647
msgid ""
"4 spaces are a good compromise between small indentation (allows greater "
"nesting depth) and large indentation (easier to read).  Tabs introduce "
"confusion, and are best left out."
msgstr ""
"空白 4 つは (深くネストできる) 小さいインデントと (読み易い) 大きいインデント"
"のちょうど中間に当たります。タブは混乱させるので、使わずにおくのが良いです。"

#: ../../tutorial/controlflow.rst:651
msgid "Wrap lines so that they don't exceed 79 characters."
msgstr "ソースコードの幅が 79 文字を越えないように行を折り返すこと。"

#: ../../tutorial/controlflow.rst:653
msgid ""
"This helps users with small displays and makes it possible to have several "
"code files side-by-side on larger displays."
msgstr ""
"こうすることで小さいディスプレイを使っているユーザも読み易くなり、大きなディ"
"スプレイではソースコードファイルを並べることもできるようになります。"

#: ../../tutorial/controlflow.rst:656
msgid ""
"Use blank lines to separate functions and classes, and larger blocks of code "
"inside functions."
msgstr ""
"関数やクラスや関数内の大きめのコードブロックの区切りに空行を使いなさい。"

#: ../../tutorial/controlflow.rst:659
msgid "When possible, put comments on a line of their own."
msgstr "可能なら、コメントは行に独立で書きなさい"

#: ../../tutorial/controlflow.rst:661
msgid "Use docstrings."
msgstr "docstring を使いなさい。"

#: ../../tutorial/controlflow.rst:663
msgid ""
"Use spaces around operators and after commas, but not directly inside "
"bracketing constructs: ``a = f(1, 2) + g(3, 4)``."
msgstr ""
"演算子の前後とコンマの後には空白を入れ、括弧類のすぐ内側には空白を入れないこ"
"と: ``a = f(1, 2) + g(3, 4)``。"

#: ../../tutorial/controlflow.rst:666
msgid ""
"Name your classes and functions consistently; the convention is to use "
"``CamelCase`` for classes and ``lower_case_with_underscores`` for functions "
"and methods.  Always use ``self`` as the name for the first method argument "
"(see :ref:`tut-firstclasses` for more on classes and methods)."
msgstr ""
"クラスや関数に一貫性のある名前を付けなさい。慣習では ``CamelCase`` をクラス名"
"に使い、 ``lower_case_with_underscores`` を関数名やメソッド名に使います。常"
"に ``self`` をメソッドの第 1 引数の名前 (クラスやメソッドについては :ref:"
"`tut-firstclasses` を見よ) として使いなさい。"

#: ../../tutorial/controlflow.rst:671
msgid ""
"Don't use fancy encodings if your code is meant to be used in international "
"environments.  Plain ASCII works best in any case."
msgstr ""
"あなたのコードを世界中で使ってもらうつもりなら、風変りなエンコーディングは使"
"わないこと。どんな場合でも、プレーン ASCII が最も上手くいきます。"

#: ../../tutorial/controlflow.rst:676
msgid "Footnotes"
msgstr "注記"

#: ../../tutorial/controlflow.rst:677
msgid ""
"Actually, *call by object reference* would be a better description, since if "
"a mutable object is passed, the caller will see any changes the callee makes "
"to it (items inserted into a list)."
msgstr ""
"実際には、*オブジェクトへの参照渡し (call by object reference)* と書けばよい"
"のかもしれません。というのは、変更可能なオブジェクトが渡されると、関数の呼び"
"出し側は、呼び出された側の関数がオブジェクトに (リストに値が挿入されるといっ"
"た) 何らかの変更に出くわすことになるからです。"
