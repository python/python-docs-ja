# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Rafael Fontenelle <rffontenelle@gmail.com>, 2022
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-30 14:59+0000\n"
"PO-Revision-Date: 2022-11-05 17:23+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2022\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/"
"ja/)\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../tutorial/appendix.rst:5
msgid "Appendix"
msgstr "付録"

#: ../../tutorial/appendix.rst:11
msgid "Interactive Mode"
msgstr "対話モード"

#: ../../tutorial/appendix.rst:16
msgid "Error Handling"
msgstr "エラー処理"

#: ../../tutorial/appendix.rst:18
msgid ""
"When an error occurs, the interpreter prints an error message and a stack "
"trace. In interactive mode, it then returns to the primary prompt; when "
"input came from a file, it exits with a nonzero exit status after printing "
"the stack trace. (Exceptions handled by an :keyword:`except` clause in a :"
"keyword:`try` statement are not errors in this context.)  Some errors are "
"unconditionally fatal and cause an exit with a nonzero exit; this applies to "
"internal inconsistencies and some cases of running out of memory.  All error "
"messages are written to the standard error stream; normal output from "
"executed commands is written to standard output."
msgstr ""
"エラーが発生すると、インタプリタはエラーメッセージとスタックトレース (stack "
"trace) を出力します。対話モードにいるときは、インタプリタは一次プロンプトに戻"
"ります; スクリプトをファイルから実行しているときは、インタプリタはスタックト"
"レースを出力した後、非ゼロの終了ステータスで終了します。 (:keyword:`try` 文"
"の :keyword:`except` 節で処理された例外は、ここでいうエラーにはあたりませ"
"ん。) いくつかのエラーは常に致命的であり、非ゼロの終了ステータスとなるプログ"
"ラムの終了を引き起こします。例えばインタプリタ内部の矛盾やある種のメモリ枯渇"
"が当てはまります。エラーメッセージは全て標準エラー出力に書き込まれます; これ"
"に対して、通常は実行した命令から出力される内容は標準出力に書き込まれます。"

#: ../../tutorial/appendix.rst:28
msgid ""
"Typing the interrupt character (usually :kbd:`Control-C` or :kbd:`Delete`) "
"to the primary or secondary prompt cancels the input and returns to the "
"primary prompt. [#]_ Typing an interrupt while a command is executing raises "
"the :exc:`KeyboardInterrupt` exception, which may be handled by a :keyword:"
"`try` statement."
msgstr ""
"割り込み文字 (interrupt character、普通は :kbd:`Control-C` か :kbd:`Delete`) "
"を一次または二次プロンプトに対してタイプすると、入力が取り消されて一次プロン"
"プトに戻ります。 [#]_ コマンドの実行中に割り込み文字をタイプすると :exc:"
"`KeyboardInterrupt` 例外が送出されます。この例外は :keyword:`try` 文で処理で"
"きます。"

#: ../../tutorial/appendix.rst:38
msgid "Executable Python Scripts"
msgstr "実行可能な Python スクリプト"

#: ../../tutorial/appendix.rst:40
msgid ""
"On BSD'ish Unix systems, Python scripts can be made directly executable, "
"like shell scripts, by putting the line ::"
msgstr ""
"BSD 風の Unix システムでは、Python スクリプトはシェルスクリプトのように直接実"
"行可能にできます。これを行うには、以下の行 ::"

#: ../../tutorial/appendix.rst:45
msgid ""
"(assuming that the interpreter is on the user's :envvar:`PATH`) at the "
"beginning of the script and giving the file an executable mode.  The ``#!`` "
"must be the first two characters of the file.  On some platforms, this first "
"line must end with a Unix-style line ending (``'\\n'``), not a Windows "
"(``'\\r\\n'``) line ending.  Note that the hash, or pound, character, "
"``'#'``, is used to start a comment in Python."
msgstr ""
"(ここではインタプリタがユーザの :envvar:`PATH` 上にあると仮定しています) をス"
"クリプトの先頭に置き、スクリプトファイルに実行可能モードを設定します。 ``#!"
"`` はファイルの最初の２文字でなければなりません。プラットフォームによっては、"
"この最初の行を終端する改行文字が Windows 形式 (``'\\r\\n'``) ではなく、 Unix"
"形式(``'\\n'``)でなければならないことがあります。ハッシュまたはポンド文字、す"
"なわち ``'#'`` は、Python ではコメントを書き始めるために使われていることに注"
"意してください。"

#: ../../tutorial/appendix.rst:52
msgid ""
"The script can be given an executable mode, or permission, using the :"
"program:`chmod` command."
msgstr ""
":program:`chmod` コマンドを使えば、スクリプトに実行モードや実行権限を与えるこ"
"とができます。"

#: ../../tutorial/appendix.rst:59
msgid ""
"On Windows systems, there is no notion of an \"executable mode\".  The "
"Python installer automatically associates ``.py`` files with ``python.exe`` "
"so that a double-click on a Python file will run it as a script.  The "
"extension can also be ``.pyw``, in that case, the console window that "
"normally appears is suppressed."
msgstr ""
"Windows では、\"実行モード\" のような概念はありません。Python のインストー"
"ラーは自動的に ``.py`` ファイルを ``python.exe`` に関連付けるので、Python "
"ファイルをダブルクリックするとそれをスクリプトとして実行します。``.pyw`` 拡張"
"子も(訳注: ``pythonw.exe`` に)関連付けられ、通常コンソールウィンドウを抑制し"
"て実行します。"

#: ../../tutorial/appendix.rst:69
msgid "The Interactive Startup File"
msgstr "対話モード用の起動時実行ファイル"

#: ../../tutorial/appendix.rst:71
msgid ""
"When you use Python interactively, it is frequently handy to have some "
"standard commands executed every time the interpreter is started.  You can "
"do this by setting an environment variable named :envvar:`PYTHONSTARTUP` to "
"the name of a file containing your start-up commands.  This is similar to "
"the :file:`.profile` feature of the Unix shells."
msgstr ""
"Python を対話的に使うときには、インタプリタが起動する度に実行される何らかの標"
"準的なコマンドがあると便利なことがよくあります。これを行うには、 :envvar:"
"`PYTHONSTARTUP` と呼ばれる環境変数を、インタプリタ起動時に実行されるコマンド"
"が入ったファイル名に設定します。この機能は Unix シェルの :file:`.profile` に"
"似ています。"

#: ../../tutorial/appendix.rst:77
msgid ""
"This file is only read in interactive sessions, not when Python reads "
"commands from a script, and not when :file:`/dev/tty` is given as the "
"explicit source of commands (which otherwise behaves like an interactive "
"session).  It is executed in the same namespace where interactive commands "
"are executed, so that objects that it defines or imports can be used without "
"qualification in the interactive session. You can also change the prompts "
"``sys.ps1`` and ``sys.ps2`` in this file."
msgstr ""
"このファイルは対話セッションのときだけ読み出されます。 Python がコマンドをス"
"クリプトから読み出しているときや、 :file:`/dev/tty` がコマンドの入力元として"
"明示的に指定されている(この場合対話的セッションのように動作します) *わけでは"
"ない* 場合にはこのファイルは読み出されません。ファイル内のコマンドは、対話的"
"コマンドが実行される名前空間と同じ名前空間内で実行されます。このため、ファイ"
"ル内で定義されていたり import されたオブジェクトは、そのまま対話セッション内"
"で使うことができます。また、このファイル内で ``sys.ps1`` や ``sys.ps2`` を変"
"更して、プロンプトを変更することもできます。"

#: ../../tutorial/appendix.rst:85
msgid ""
"If you want to read an additional start-up file from the current directory, "
"you can program this in the global start-up file using code like ``if os."
"path.isfile('.pythonrc.py'): exec(open('.pythonrc.py').read())``. If you "
"want to use the startup file in a script, you must do this explicitly in the "
"script::"
msgstr ""
"もし現在のディレクトリから追加でスタートアップファイルを読み出したいのなら、"
"グローバルのスタートアップファイルの中に ``if os.path.isfile('.pythonrc."
"py'): exec(open('.pythonrc.py').read())`` のようなプログラムを書くことができ"
"ます。スクリプト中でスタートアップファイルを使いたいのなら、以下のようにして"
"スクリプト中で明示的に実行しなければなりません::"

#: ../../tutorial/appendix.rst:102
msgid "The Customization Modules"
msgstr "カスタマイズ用モジュール"

#: ../../tutorial/appendix.rst:104
msgid ""
"Python provides two hooks to let you customize it: :mod:`sitecustomize` and :"
"mod:`usercustomize`.  To see how it works, you need first to find the "
"location of your user site-packages directory.  Start Python and run this "
"code::"
msgstr ""
"Python はユーザーが Python をカスタマイズするための2つのフック、 :mod:"
"`sitecustomize` と :mod:`usercustomize` を提供しています。これがどのように動"
"作しているかを知るには、まずはユーザーの site-packages ディレクトリの場所を見"
"つける必要があります。Python を起動して次のコードを実行してください::"

#: ../../tutorial/appendix.rst:112
msgid ""
"Now you can create a file named :file:`usercustomize.py` in that directory "
"and put anything you want in it.  It will affect every invocation of Python, "
"unless it is started with the :option:`-s` option to disable the automatic "
"import."
msgstr ""
":file:`usercustomize.py` をそのディレクトリに作成して、そこでやりたいことをす"
"べて書くことができます。このファイルは自動インポートを無効にする :option:`-"
"s` オプションを使わない限り、全ての Python の起動時に実行されます。"

#: ../../tutorial/appendix.rst:116
msgid ""
":mod:`sitecustomize` works in the same way, but is typically created by an "
"administrator of the computer in the global site-packages directory, and is "
"imported before :mod:`usercustomize`.  See the documentation of the :mod:"
"`site` module for more details."
msgstr ""
":mod:`sitecustomize` モジュールも同じように動作しますが、一般的にコンピュー"
"ターの管理者によって、グローバルの site-packages ディレクトリに作成され、 :"
"mod:`usercustomize` より先にインポートされます。詳細は :mod:`site` モジュール"
"のドキュメントを参照してください。"

#: ../../tutorial/appendix.rst:123
msgid "Footnotes"
msgstr "脚注"

#: ../../tutorial/appendix.rst:124
msgid "A problem with the GNU Readline package may prevent this."
msgstr "GNU Readline パッケージに関する問題のせいで妨げられることがあります。"
